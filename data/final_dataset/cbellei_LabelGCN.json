{"home.repos.pwc.inspect_result.cbellei_LabelGCN.src.experiments_inductive.init_results_dict": [[18, 20], ["None"], "function", ["None"], ["def", "init_results_dict", "(", ")", ":", "\n", "    ", "return", "{", "'precision'", ":", "[", "]", ",", "'recall'", ":", "[", "]", ",", "'f1'", ":", "[", "]", ",", "'f1_shutdown'", ":", "[", "]", ",", "'accuracy'", ":", "[", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.cbellei_LabelGCN.src.experiments_inductive.run_job": [[22, 192], ["utils.get_elliptic_data", "utils.get_graph_without_label_elliptic", "utils.split_data", "utils.get_graph_with_label_elliptic.subgraph", "pandas.Series", "sklearn.preprocessing.LabelBinarizer", "pd.concat.copy", "range", "pandas.concat", "preprocessing.LabelBinarizer.fit_transform", "utils.encoding", "preprocessing.LabelBinarizer.fit_transform", "utils.encoding", "preprocessing.LabelBinarizer.transform", "utils.encoding", "stellargraph.mapper.FullBatchNodeGenerator", "stellargraph.mapper.FullBatchNodeGenerator.flow", "stellargraph.mapper.FullBatchNodeGenerator.flow", "stellargraph.layer.GCN", "stellargraph.layer.GCN.in_out_tensors", "tensorflow.keras.Model", "tensorflow.keras.Model.compile", "tensorflow.keras.Model.fit", "tensorflow.keras.Model", "tensorflow.keras.Model.predict", "embeds_training_no_label.squeeze.squeeze", "tensorflow.keras.Model.get_weights", "range", "utils.get_graph_with_label_elliptic", "utils.get_graph_with_label_elliptic.subgraph", "stellargraph.mapper.FullBatchNodeGenerator", "stellargraph.mapper.FullBatchNodeGenerator.flow", "stellargraph.mapper.FullBatchNodeGenerator.flow", "stellargraph.layer.LabelGCN", "stellargraph.layer.LabelGCN.in_out_tensors", "tensorflow.keras.Model", "tensorflow.keras.Model.compile", "tensorflow.keras.Model.fit", "tensorflow.keras.Model.get_weights", "tensorflow.keras.Model", "tensorflow.keras.Model.predict", "embeds_training.squeeze.squeeze", "stellargraph.StellarGraph", "range", "accuracy_score", "accuracy_score", "logger.info", "logger.info", "tensorflow.keras.layers.Dense", "print", "utils.get_graph_with_label_elliptic.subgraph", "graph_full.subgraph.to_adjacency_matrix", "graph_full.subgraph.node_features", "stellargraph.core.utils.GCN_Aadj_feats_op", "scipy.sparse.csr_matrix.dot", "numpy.dot", "tensorflow.keras.backend.relu", "scipy.sparse.csr_matrix.dot", "numpy.dot", "tensorflow.keras.backend.relu", "numpy.dot", "tensorflow.keras.backend.softmax().numpy", "graph_full.subgraph.node_ids_to_ilocs", "pandas.Series", "tensorflow.keras.layers.Dense", "stellargraph.StellarGraph.subgraph", "graph_full.subgraph.to_adjacency_matrix", "graph_full.subgraph.node_features", "stellargraph.core.utils.GCN_Aadj_feats_op", "enumerate", "float", "pd.Series.index.isin", "pd.Series.index.isin", "tensorflow.keras.optimizers.Adam", "h2[].numpy", "embeds_testing_no_label.append", "y_gcn_no_label.append", "tensorflow.keras.optimizers.Adam", "print", "df_features_subgraph.copy", "df.to_numpy.to_numpy", "scipy.sparse.csr_matrix.dot", "numpy.dot", "tensorflow.keras.backend.relu", "scipy.sparse.csr_matrix.dot", "numpy.dot", "tensorflow.keras.backend.relu", "numpy.dot", "tensorflow.keras.backend.softmax().numpy", "y_gcn.append", "h2[].numpy", "embeds_testing.append", "len", "df_features_no_label.index.isin", "tensorflow.keras.backend.softmax", "len", "df_features_with_label.index.isin", "graph_full.subgraph.node_ids_to_ilocs", "yy.round", "y[].round", "tensorflow.keras.backend.softmax", "y[].round", "df_features.id.isin", "df_features.id.isin"], "function", ["home.repos.pwc.inspect_result.cbellei_LabelGCN.src.utils.get_elliptic_data", "home.repos.pwc.inspect_result.cbellei_LabelGCN.src.utils.get_graph_without_label_elliptic", "home.repos.pwc.inspect_result.cbellei_LabelGCN.src.utils.split_data", "home.repos.pwc.inspect_result.cbellei_LabelGCN.src.utils.encoding", "home.repos.pwc.inspect_result.cbellei_LabelGCN.src.utils.encoding", "home.repos.pwc.inspect_result.cbellei_LabelGCN.src.utils.encoding", "home.repos.pwc.inspect_result.cbellei_LabelGCN.src.utils.get_graph_with_label_elliptic"], ["", "def", "run_job", "(", "logger", ",", "layer_sizes", ",", "bias", ",", "learning_rate", ",", "dropout", ",", "n_epochs", ",", "n_training_tsteps", ",", "n_oversampling", ")", ":", "\n", "\n", "    ", "df_features", ",", "df_classes_id", ",", "tx_colnames", ",", "agg_colnames", ",", "df_features_class", ",", "df_features_with_label", ",", "df_edgelist", "=", "utils", ".", "get_elliptic_data", "(", ")", "\n", "\n", "df_features_no_label", "=", "df_features_with_label", ".", "loc", "[", ":", ",", "df_features_with_label", ".", "columns", "!=", "'GCN-label'", "]", "\n", "\n", "#all graph", "\n", "G", ",", "_", "=", "utils", ".", "get_graph_without_label_elliptic", "(", "df_classes_id", ",", "df_features_no_label", ",", "df_edgelist", ")", "\n", "\n", "# Sub-graph for training", "\n", "train_ids", "=", "df_features", "[", "df_features", "[", "'time step'", "]", "<=", "n_training_tsteps", "]", ".", "id", "\n", "# Target ids", "\n", "train_target_ids", ",", "test_target_ids", "=", "utils", ".", "split_data", "(", "df_features_class", ",", "n_training_tsteps", ")", "\n", "\n", "#subgraph for training", "\n", "G1", "=", "G", ".", "subgraph", "(", "train_ids", ")", "\n", "node_subjects", "=", "df_classes_id", "[", "df_classes_id", ".", "label", "!=", "2", "]", "\n", "node_subjects", "=", "pd", ".", "Series", "(", "data", "=", "node_subjects", ".", "label", ".", "values", ",", "index", "=", "node_subjects", ".", "index", ")", "\n", "node_subjects", ".", "index", ".", "name", "=", "None", "\n", "\n", "train_subjects", "=", "node_subjects", "[", "node_subjects", ".", "index", ".", "isin", "(", "train_target_ids", ")", "]", "\n", "test_subjects", "=", "node_subjects", "[", "node_subjects", ".", "index", ".", "isin", "(", "test_target_ids", ")", "]", "\n", "target_encoding", "=", "preprocessing", ".", "LabelBinarizer", "(", ")", "\n", "\n", "#oversample training nodes for illicit", "\n", "illicit", "=", "train_subjects", ".", "loc", "[", "lambda", "x", ":", "x", "==", "1", "]", "\n", "train_subjects_no_oversampling", "=", "train_subjects", ".", "copy", "(", ")", "\n", "labels", "=", "[", "train_subjects", "]", "\n", "for", "_", "in", "range", "(", "n_oversampling", ")", ":", "\n", "        ", "labels", "+=", "[", "illicit", "]", "\n", "", "train_subjects", "=", "pd", ".", "concat", "(", "labels", ",", "axis", "=", "0", ")", "\n", "\n", "train_targets_no_oversampling", "=", "target_encoding", ".", "fit_transform", "(", "train_subjects_no_oversampling", ")", "\n", "train_targets_no_oversampling", "=", "utils", ".", "encoding", "(", "train_targets_no_oversampling", ")", "\n", "train_targets", "=", "target_encoding", ".", "fit_transform", "(", "train_subjects", ")", "\n", "train_targets", "=", "utils", ".", "encoding", "(", "train_targets", ")", "\n", "test_targets", "=", "target_encoding", ".", "transform", "(", "test_subjects", ")", "\n", "test_targets", "=", "utils", ".", "encoding", "(", "test_targets", ")", "\n", "\n", "generator", "=", "FullBatchNodeGenerator", "(", "G1", ",", "method", "=", "\"gcn\"", ")", "\n", "train_gen_no_oversampling", "=", "generator", ".", "flow", "(", "train_subjects_no_oversampling", ".", "index", ",", "train_targets_no_oversampling", ")", "\n", "train_gen", "=", "generator", ".", "flow", "(", "train_subjects", ".", "index", ",", "train_targets", ")", "\n", "\n", "gcn", "=", "GCN", "(", "\n", "layer_sizes", "=", "layer_sizes", ",", "activations", "=", "[", "'relu'", "]", "*", "len", "(", "layer_sizes", ")", ",", "generator", "=", "generator", ",", "dropout", "=", "dropout", ",", "bias", "=", "bias", "\n", ")", "\n", "x_inp", ",", "x_out", "=", "gcn", ".", "in_out_tensors", "(", ")", "\n", "predictions", "=", "layers", ".", "Dense", "(", "units", "=", "train_targets", ".", "shape", "[", "1", "]", ",", "activation", "=", "'softmax'", ")", "(", "x_out", ")", "\n", "\n", "model1", "=", "Model", "(", "inputs", "=", "x_inp", ",", "outputs", "=", "predictions", ")", "\n", "model1", ".", "compile", "(", "\n", "optimizer", "=", "optimizers", ".", "Adam", "(", "lr", "=", "learning_rate", ")", ",", "\n", "loss", "=", "losses", ".", "categorical_crossentropy", ",", "\n", "metrics", "=", "[", "'acc'", "]", ",", "\n", ")", "\n", "model1", ".", "fit", "(", "\n", "train_gen", ",", "\n", "epochs", "=", "n_epochs", ",", "\n", "verbose", "=", "2", ",", "\n", "shuffle", "=", "False", ",", "\n", "callbacks", "=", "None", "\n", ")", "\n", "\n", "embedding_model_no_label", "=", "Model", "(", "inputs", "=", "x_inp", ",", "outputs", "=", "x_out", ")", "\n", "embeds_training_no_label", "=", "embedding_model_no_label", ".", "predict", "(", "train_gen_no_oversampling", ")", "\n", "embeds_training_no_label", "=", "embeds_training_no_label", ".", "squeeze", "(", "0", ")", "\n", "embeds_testing_no_label", "=", "[", "]", "\n", "y_gcn_no_label", "=", "[", "]", "\n", "\n", "weights", "=", "model1", ".", "get_weights", "(", ")", "\n", "\n", "for", "tstep", "in", "range", "(", "35", ",", "50", ")", ":", "\n", "        ", "print", "(", "'tstep: {}'", ".", "format", "(", "tstep", ")", ")", "\n", "test_ids_tstep", "=", "df_features", "[", "(", "df_features", "[", "'time step'", "]", "==", "tstep", ")", "&", "(", "df_features", ".", "id", ".", "isin", "(", "test_target_ids", ")", ")", "]", "[", "'id'", "]", ".", "values", "\n", "# Sub-graph includes testing + training", "\n", "nodes_ids", "=", "df_features", "[", "df_features", "[", "'time step'", "]", "<=", "tstep", "]", ".", "id", "# all graph up until this time step", "\n", "graph_sampled", "=", "G", ".", "subgraph", "(", "nodes_ids", ")", "\n", "Adj", "=", "graph_sampled", ".", "to_adjacency_matrix", "(", ")", "\n", "node_features", "=", "graph_sampled", ".", "node_features", "(", ")", "\n", "_", ",", "Adj_norm", "=", "GCN_Aadj_feats_op", "(", "node_features", ",", "Adj", ")", "\n", "df_features_subgraph", "=", "df_features_no_label", "[", "df_features_no_label", ".", "index", ".", "isin", "(", "nodes_ids", ")", "]", "\n", "h1", "=", "sparse", ".", "csr_matrix", ".", "dot", "(", "Adj_norm", ",", "df_features_subgraph", ")", "\n", "h1", "=", "np", ".", "dot", "(", "h1", ",", "weights", "[", "0", "]", ")", "\n", "h1", "=", "K", ".", "relu", "(", "h1", ")", "\n", "h2", "=", "sparse", ".", "csr_matrix", ".", "dot", "(", "Adj_norm", ",", "h1", ")", "\n", "h2", "=", "np", ".", "dot", "(", "h2", ",", "weights", "[", "1", "]", ")", "\n", "h2", "=", "K", ".", "relu", "(", "h2", ")", "\n", "y", "=", "np", ".", "dot", "(", "h2", ",", "weights", "[", "2", "]", ")", "\n", "y", "=", "K", ".", "softmax", "(", "y", "+", "weights", "[", "3", "]", ")", ".", "numpy", "(", ")", "\n", "test_id_ilocs", "=", "graph_sampled", ".", "node_ids_to_ilocs", "(", "test_ids_tstep", ")", "\n", "for", "test_id_iloc", "in", "test_id_ilocs", ":", "\n", "            ", "emb_test_id", "=", "h2", "[", "test_id_iloc", "]", ".", "numpy", "(", ")", "\n", "embeds_testing_no_label", ".", "append", "(", "emb_test_id", ")", "\n", "y_gcn_no_label", ".", "append", "(", "y", "[", "test_id_iloc", "]", ".", "round", "(", ")", "[", "1", "]", ")", "\n", "\n", "# ----- Label-GCN -----", "\n", "", "", "G", "=", "utils", ".", "get_graph_with_label_elliptic", "(", "df_features_with_label", ",", "df_edgelist", ",", "train_subjects", ",", "pd", ".", "Series", "(", ")", ")", "\n", "\n", "#subgraph for training", "\n", "G2", "=", "G", ".", "subgraph", "(", "train_ids", ")", "\n", "\n", "generator", "=", "FullBatchNodeGenerator", "(", "G2", ",", "method", "=", "'gcn'", ")", "\n", "train_gen_no_oversampling", "=", "generator", ".", "flow", "(", "train_subjects_no_oversampling", ".", "index", ",", "train_targets_no_oversampling", ")", "\n", "train_gen", "=", "generator", ".", "flow", "(", "train_subjects", ".", "index", ",", "train_targets", ")", "\n", "\n", "gcn2", "=", "LabelGCN", "(", "layer_sizes", "=", "layer_sizes", ",", "activations", "=", "[", "'relu'", "]", "*", "len", "(", "layer_sizes", ")", ",", "generator", "=", "generator", ",", "dropout", "=", "dropout", ",", "\n", "label_idxs", "=", "[", "-", "1", "]", ",", "bias", "=", "bias", ")", "\n", "\n", "x_inp", ",", "x_out", "=", "gcn2", ".", "in_out_tensors", "(", ")", "# inp, out aren't defined yet in their values", "\n", "predictions2", "=", "layers", ".", "Dense", "(", "units", "=", "train_targets", ".", "shape", "[", "1", "]", ",", "activation", "=", "'softmax'", ")", "(", "x_out", ")", "\n", "\n", "model2", "=", "Model", "(", "inputs", "=", "x_inp", ",", "outputs", "=", "predictions2", ")", "\n", "model2", ".", "compile", "(", "\n", "optimizer", "=", "optimizers", ".", "Adam", "(", "lr", "=", "learning_rate", ")", ",", "\n", "loss", "=", "losses", ".", "categorical_crossentropy", ",", "\n", "metrics", "=", "[", "'acc'", "]", ",", "\n", ")", "\n", "model2", ".", "fit", "(", "\n", "train_gen", ",", "\n", "epochs", "=", "n_epochs", ",", "\n", "verbose", "=", "2", ",", "\n", "shuffle", "=", "False", ",", "# this should be False, since shuffling data means shuffling the whole graph", "\n", ")", "\n", "\n", "weights", "=", "model2", ".", "get_weights", "(", ")", "\n", "embedding_model", "=", "Model", "(", "inputs", "=", "x_inp", ",", "outputs", "=", "x_out", ")", "\n", "embeds_training", "=", "embedding_model", ".", "predict", "(", "train_gen_no_oversampling", ")", "\n", "embeds_training", "=", "embeds_training", ".", "squeeze", "(", "0", ")", "\n", "embeds_testing", "=", "[", "]", "\n", "graph_full", "=", "StellarGraph", "(", "df_features_with_label", ",", "df_edgelist", ")", "\n", "y_gcn", "=", "[", "]", "\n", "for", "tstep", "in", "range", "(", "35", ",", "50", ")", ":", "\n", "        ", "test_ids_tstep", "=", "df_features", "[", "(", "df_features", "[", "'time step'", "]", "==", "tstep", ")", "&", "(", "df_features", ".", "id", ".", "isin", "(", "test_target_ids", ")", ")", "]", "[", "'id'", "]", ".", "values", "\n", "# Sub-graph includes testing + training", "\n", "nodes_ids", "=", "df_features", "[", "df_features", "[", "'time step'", "]", "<=", "tstep", "]", ".", "id", "# all graph up until this time step", "\n", "graph_sampled", "=", "graph_full", ".", "subgraph", "(", "nodes_ids", ")", "\n", "Adj", "=", "graph_sampled", ".", "to_adjacency_matrix", "(", ")", "\n", "node_features", "=", "graph_sampled", ".", "node_features", "(", ")", "\n", "_", ",", "Adj_norm", "=", "GCN_Aadj_feats_op", "(", "node_features", ",", "Adj", ")", "\n", "df_features_subgraph", "=", "df_features_with_label", "[", "df_features_with_label", ".", "index", ".", "isin", "(", "nodes_ids", ")", "]", "\n", "for", "i", ",", "test_id", "in", "enumerate", "(", "test_ids_tstep", ")", ":", "\n", "            ", "print", "(", "'tstep: {}, i: {}'", ".", "format", "(", "tstep", ",", "i", ")", ")", "\n", "df", "=", "df_features_subgraph", ".", "copy", "(", ")", "\n", "df", ".", "loc", "[", "test_id", ",", "'GCN-label'", "]", "=", "0", "\n", "df", "=", "df", ".", "to_numpy", "(", ")", "\n", "h1", "=", "sparse", ".", "csr_matrix", ".", "dot", "(", "Adj_norm", ",", "df", ")", "\n", "h1", "=", "np", ".", "dot", "(", "h1", ",", "weights", "[", "0", "]", ")", "\n", "h1", "=", "K", ".", "relu", "(", "h1", ")", "\n", "h2", "=", "sparse", ".", "csr_matrix", ".", "dot", "(", "Adj_norm", ",", "h1", ")", "\n", "h2", "=", "np", ".", "dot", "(", "h2", ",", "weights", "[", "1", "]", ")", "\n", "h2", "=", "K", ".", "relu", "(", "h2", ")", "\n", "y", "=", "np", ".", "dot", "(", "h2", ",", "weights", "[", "2", "]", ")", "\n", "y", "=", "K", ".", "softmax", "(", "y", "+", "weights", "[", "3", "]", ")", ".", "numpy", "(", ")", "\n", "test_id_iloc", "=", "graph_sampled", ".", "node_ids_to_ilocs", "(", "[", "test_id", "]", ")", "[", "0", "]", "\n", "y_gcn", ".", "append", "(", "y", "[", "test_id_iloc", "]", ".", "round", "(", ")", "[", "1", "]", ")", "\n", "emb_test_id", "=", "h2", "[", "test_id_iloc", "]", ".", "numpy", "(", ")", "\n", "embeds_testing", ".", "append", "(", "emb_test_id", ")", "\n", "\n", "", "", "y_true", "=", "[", "float", "(", "yy", ".", "round", "(", ")", "[", "1", "]", ")", "for", "yy", "in", "test_targets", "]", "\n", "\n", "accuracy1", "=", "accuracy_score", "(", "y_true", ",", "y_gcn_no_label", ")", "\n", "accuracy2", "=", "accuracy_score", "(", "y_true", ",", "y_gcn", ")", "\n", "\n", "logger", ".", "info", "(", "'accuracy w/o label feature: {}'", ".", "format", "(", "accuracy1", ")", ")", "\n", "logger", ".", "info", "(", "'accuracy w/  label feature: {}'", ".", "format", "(", "accuracy2", ")", ")", "\n", "\n", "return", "[", "y_true", ",", "y_gcn_no_label", ",", "y_gcn", ",", "\n", "embeds_training_no_label", ",", "embeds_testing_no_label", ",", "\n", "embeds_training", ",", "embeds_testing", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cbellei_LabelGCN.src.experiments_transductive.run_job": [[19, 177], ["int", "int", "int", "tensorflow.keras.callbacks.EarlyStopping", "sklearn.model_selection.train_test_split", "sklearn.model_selection.train_test_split", "sklearn.model_selection.train_test_split", "sklearn.preprocessing.LabelBinarizer", "preprocessing.LabelBinarizer.fit_transform", "preprocessing.LabelBinarizer.transform", "preprocessing.LabelBinarizer.transform", "stellargraph.mapper.FullBatchNodeGenerator", "stellargraph.mapper.FullBatchNodeGenerator.flow", "stellargraph.mapper.FullBatchNodeGenerator.flow", "stellargraph.mapper.FullBatchNodeGenerator.flow", "stellargraph.layer.GCN", "stellargraph.layer.GCN.in_out_tensors", "tensorflow.keras.Model", "tensorflow.keras.Model.compile", "tensorflow.keras.Model.fit", "tensorflow.keras.Model.predict", "accuracy_score", "stellargraph.mapper.FullBatchNodeGenerator", "stellargraph.mapper.FullBatchNodeGenerator.flow", "stellargraph.mapper.FullBatchNodeGenerator.flow", "stellargraph.layer.LabelGCN.in_out_tensors", "tensorflow.keras.Model", "tensorflow.keras.Model.compile", "tensorflow.keras.Model.fit", "tensorflow.keras.Model.get_weights", "stellargraph.datasets.Cora", "sg.datasets.PubMedDiabetes.load", "range", "pandas.concat", "preprocessing.LabelBinarizer.fit_transform", "utils.encoding", "utils.encoding", "utils.encoding", "tensorflow.keras.layers.Dense", "numpy.argmax", "numpy.argmax", "utils.get_graph_with_label_elliptic", "utils.get_graph", "stellargraph.layer.LabelGCN", "stellargraph.layer.LabelGCN", "tensorflow.keras.layers.Dense", "numpy.random.choice", "utils.get_graph_with_label_elliptic.to_adjacency_matrix", "utils.get_graph_with_label_elliptic.node_features", "stellargraph.core.utils.GCN_Aadj_feats_op", "scipy.sparse.csr_matrix.dot", "numpy.dot", "tensorflow.keras.backend.relu", "scipy.sparse.csr_matrix.dot", "numpy.dot", "tensorflow.keras.backend.relu", "numpy.dot", "tensorflow.keras.backend.softmax().numpy", "accuracy_score", "logger.info", "logger.info", "stellargraph.datasets.CiteSeer", "sg.datasets.PubMedDiabetes.load", "len", "len", "len", "tensorflow.keras.optimizers.Adam", "G1.node_features", "G1.edges", "tensorflow.keras.optimizers.Adam", "int", "utils.get_graph_with_label_elliptic", "utils.get_graph", "utils.get_graph_with_label_elliptic.node_ids_to_ilocs", "y_pred.append", "numpy.argmax", "res.append", "recall_score", "precision_score", "f1_score", "recall_score", "precision_score", "f1_score", "res.append", "stellargraph.datasets.PubMedDiabetes", "sg.datasets.PubMedDiabetes.load", "len", "G1.node_features", "G1.edges", "tensorflow.keras.backend.softmax", "utils.get_elliptic_data", "utils.get_graph_without_label_elliptic", "sys.exit", "len", "len", "len", "range"], "function", ["home.repos.pwc.inspect_result.cbellei_LabelGCN.src.utils.encoding", "home.repos.pwc.inspect_result.cbellei_LabelGCN.src.utils.encoding", "home.repos.pwc.inspect_result.cbellei_LabelGCN.src.utils.encoding", "home.repos.pwc.inspect_result.cbellei_LabelGCN.src.utils.get_graph_with_label_elliptic", "home.repos.pwc.inspect_result.cbellei_LabelGCN.src.utils.get_graph", "home.repos.pwc.inspect_result.cbellei_LabelGCN.src.utils.get_graph_with_label_elliptic", "home.repos.pwc.inspect_result.cbellei_LabelGCN.src.utils.get_graph", "home.repos.pwc.inspect_result.cbellei_LabelGCN.src.utils.get_elliptic_data", "home.repos.pwc.inspect_result.cbellei_LabelGCN.src.utils.get_graph_without_label_elliptic"], ["def", "run_job", "(", "count", ",", "logger", ",", "dataset", ",", "training_fraction", ",", "validation_fraction", ",", "support_fraction", ",", "\n", "layer_sizes", ",", "bias", ",", "learning_rate", ",", "dropout", ",", "fracs", ",", "patience", ",", "n_epochs", ",", "n_oversampling", "=", "-", "1", ")", ":", "\n", "\n", "    ", "if", "dataset", "==", "'cora'", ":", "\n", "        ", "dataset", "=", "sg", ".", "datasets", ".", "Cora", "(", ")", "\n", "G1", ",", "node_subjects", "=", "dataset", ".", "load", "(", ")", "\n", "", "elif", "dataset", "==", "'citeseer'", ":", "\n", "        ", "dataset", "=", "sg", ".", "datasets", ".", "CiteSeer", "(", ")", "\n", "G1", ",", "node_subjects", "=", "dataset", ".", "load", "(", ")", "\n", "", "elif", "dataset", "==", "'pubmed'", ":", "\n", "        ", "dataset", "=", "sg", ".", "datasets", ".", "PubMedDiabetes", "(", ")", "\n", "G1", ",", "node_subjects", "=", "dataset", ".", "load", "(", ")", "\n", "", "elif", "dataset", "==", "'elliptic'", ":", "\n", "        ", "df_features", ",", "df_classes_id", ",", "tx_colnames", ",", "agg_colnames", ",", "df_features_class", ",", "df_features_with_label", ",", "df_edgelist", "=", "utils", ".", "get_elliptic_data", "(", ")", "\n", "df_features_no_label", "=", "df_features_with_label", ".", "loc", "[", ":", ",", "df_features_with_label", ".", "columns", "!=", "'GCN-label'", "]", "\n", "G1", ",", "node_subjects", "=", "utils", ".", "get_graph_without_label_elliptic", "(", "df_classes_id", ",", "df_features_no_label", ",", "df_edgelist", ")", "\n", "", "else", ":", "\n", "        ", "sys", ".", "exit", "(", "'dataset invalid - aborting'", ")", "\n", "\n", "", "train_size", "=", "int", "(", "training_fraction", "*", "len", "(", "node_subjects", ")", ")", "\n", "validation_size", "=", "int", "(", "validation_fraction", "*", "len", "(", "node_subjects", ")", ")", "\n", "support_size", "=", "int", "(", "support_fraction", "*", "len", "(", "node_subjects", ")", ")", "\n", "\n", "es_callback", "=", "EarlyStopping", "(", "monitor", "=", "'val_loss'", ",", "patience", "=", "patience", ",", "restore_best_weights", "=", "True", ",", "verbose", "=", "1", ")", "\n", "train_subjects", ",", "test_subjects", "=", "model_selection", ".", "train_test_split", "(", "\n", "node_subjects", ",", "train_size", "=", "train_size", ",", "test_size", "=", "None", ",", "stratify", "=", "node_subjects", "\n", ")", "\n", "val_subjects", ",", "test_subjects", "=", "model_selection", ".", "train_test_split", "(", "\n", "test_subjects", ",", "train_size", "=", "validation_size", ",", "test_size", "=", "None", ",", "stratify", "=", "test_subjects", "\n", ")", "\n", "support_subjects", ",", "test_subjects", "=", "model_selection", ".", "train_test_split", "(", "\n", "test_subjects", ",", "train_size", "=", "support_size", ",", "test_size", "=", "None", ",", "stratify", "=", "test_subjects", "\n", ")", "\n", "target_encoding", "=", "preprocessing", ".", "LabelBinarizer", "(", ")", "\n", "train_targets", "=", "target_encoding", ".", "fit_transform", "(", "train_subjects", ")", "\n", "val_targets", "=", "target_encoding", ".", "transform", "(", "val_subjects", ")", "\n", "test_targets", "=", "target_encoding", ".", "transform", "(", "test_subjects", ")", "\n", "\n", "if", "dataset", "==", "'elliptic'", ":", "\n", "        ", "illicit", "=", "train_subjects", ".", "loc", "[", "lambda", "x", ":", "x", "==", "1", "]", "\n", "labels", "=", "[", "train_subjects", "]", "\n", "for", "_", "in", "range", "(", "n_oversampling", "-", "1", ")", ":", "\n", "            ", "labels", "+=", "[", "illicit", "]", "\n", "", "train_subjects", "=", "pd", ".", "concat", "(", "labels", ",", "axis", "=", "0", ")", "\n", "train_targets", "=", "target_encoding", ".", "fit_transform", "(", "train_subjects", ")", "\n", "train_targets", "=", "utils", ".", "encoding", "(", "train_targets", ")", "\n", "val_targets", "=", "utils", ".", "encoding", "(", "val_targets", ")", "\n", "test_targets", "=", "utils", ".", "encoding", "(", "test_targets", ")", "\n", "\n", "", "generator", "=", "FullBatchNodeGenerator", "(", "G1", ",", "method", "=", "'gcn'", ")", "\n", "val_gen", "=", "generator", ".", "flow", "(", "val_subjects", ".", "index", ",", "val_targets", ")", "\n", "train_gen", "=", "generator", ".", "flow", "(", "train_subjects", ".", "index", ",", "train_targets", ")", "\n", "test_gen", "=", "generator", ".", "flow", "(", "test_subjects", ".", "index", ",", "test_targets", ")", "\n", "\n", "gcn", "=", "GCN", "(", "\n", "layer_sizes", "=", "layer_sizes", ",", "activations", "=", "[", "'relu'", "]", "*", "len", "(", "layer_sizes", ")", ",", "generator", "=", "generator", ",", "dropout", "=", "dropout", ",", "bias", "=", "bias", "\n", ")", "\n", "x_inp", ",", "x_out", "=", "gcn", ".", "in_out_tensors", "(", ")", "\n", "predictions", "=", "layers", ".", "Dense", "(", "units", "=", "train_targets", ".", "shape", "[", "1", "]", ",", "activation", "=", "'softmax'", ")", "(", "x_out", ")", "\n", "\n", "model1", "=", "Model", "(", "inputs", "=", "x_inp", ",", "outputs", "=", "predictions", ")", "\n", "model1", ".", "compile", "(", "\n", "optimizer", "=", "optimizers", ".", "Adam", "(", "lr", "=", "learning_rate", ")", ",", "\n", "loss", "=", "losses", ".", "categorical_crossentropy", ",", "\n", "metrics", "=", "[", "'acc'", "]", ",", "\n", ")", "\n", "\n", "model1", ".", "fit", "(", "\n", "train_gen", ",", "\n", "epochs", "=", "n_epochs", ",", "\n", "validation_data", "=", "val_gen", ",", "\n", "verbose", "=", "2", ",", "\n", "shuffle", "=", "False", ",", "\n", "callbacks", "=", "[", "es_callback", "]", "\n", ")", "\n", "\n", "test_predictions", "=", "model1", ".", "predict", "(", "test_gen", ")", "\n", "y_true", "=", "[", "np", ".", "argmax", "(", "y", ")", "for", "y", "in", "test_targets", "]", "\n", "y_pred1", "=", "[", "np", ".", "argmax", "(", "y", ")", "for", "y", "in", "test_predictions", "[", "0", "]", "]", "\n", "accuracy1", "=", "accuracy_score", "(", "y_true", ",", "y_pred1", ")", "\n", "\n", "# ----- Label-GCN -----", "\n", "if", "dataset", "==", "'elliptic'", ":", "\n", "        ", "G2", "=", "utils", ".", "get_graph_with_label_elliptic", "(", "df_features_with_label", ",", "df_edgelist", ",", "train_subjects", ",", "val_subjects", ")", "\n", "", "else", ":", "\n", "        ", "G2", ",", "n_cols", ",", "n_dummies", "=", "utils", ".", "get_graph", "(", "G1", ".", "node_features", "(", ")", ",", "G1", ".", "edges", "(", ")", ",", "node_subjects", ",", "train_subjects", ",", "val_subjects", ")", "\n", "", "generator", "=", "FullBatchNodeGenerator", "(", "G2", ",", "method", "=", "'gcn'", ")", "\n", "train_gen", "=", "generator", ".", "flow", "(", "train_subjects", ".", "index", ",", "train_targets", ")", "\n", "val_gen", "=", "generator", ".", "flow", "(", "val_subjects", ".", "index", ",", "val_targets", ")", "\n", "\n", "if", "dataset", "==", "'elliptic'", ":", "\n", "        ", "gcn2", "=", "LabelGCN", "(", "layer_sizes", "=", "layer_sizes", ",", "activations", "=", "[", "'relu'", "]", "*", "len", "(", "layer_sizes", ")", ",", "generator", "=", "generator", ",", "dropout", "=", "dropout", ",", "\n", "label_idxs", "=", "[", "-", "1", "]", ",", "bias", "=", "bias", ")", "\n", "", "else", ":", "\n", "        ", "gcn2", "=", "LabelGCN", "(", "layer_sizes", "=", "layer_sizes", ",", "activations", "=", "[", "'relu'", "]", "*", "len", "(", "layer_sizes", ")", ",", "generator", "=", "generator", ",", "dropout", "=", "dropout", ",", "\n", "label_idxs", "=", "[", "i", "for", "i", "in", "range", "(", "n_cols", "-", "n_dummies", ",", "n_cols", ")", "]", ",", "bias", "=", "bias", ")", "\n", "", "x_inp", ",", "x_out", "=", "gcn2", ".", "in_out_tensors", "(", ")", "\n", "predictions2", "=", "layers", ".", "Dense", "(", "units", "=", "train_targets", ".", "shape", "[", "1", "]", ",", "activation", "=", "'softmax'", ")", "(", "x_out", ")", "\n", "\n", "model2", "=", "Model", "(", "inputs", "=", "x_inp", ",", "outputs", "=", "predictions2", ")", "\n", "model2", ".", "compile", "(", "\n", "optimizer", "=", "optimizers", ".", "Adam", "(", "lr", "=", "learning_rate", ")", ",", "\n", "loss", "=", "losses", ".", "categorical_crossentropy", ",", "\n", "metrics", "=", "[", "'acc'", "]", ",", "\n", ")", "\n", "model2", ".", "fit", "(", "\n", "train_gen", ",", "\n", "epochs", "=", "n_epochs", ",", "\n", "validation_data", "=", "val_gen", ",", "\n", "verbose", "=", "2", ",", "\n", "shuffle", "=", "False", ",", "\n", "callbacks", "=", "[", "es_callback", "]", "\n", ")", "\n", "\n", "weights", "=", "model2", ".", "get_weights", "(", ")", "\n", "res", "=", "[", "]", "\n", "for", "frac", "in", "fracs", ":", "\n", "        ", "support_subset_index", "=", "np", ".", "random", ".", "choice", "(", "support_subjects", ".", "index", ",", "int", "(", "frac", "*", "len", "(", "support_subjects", ".", "index", ")", ")", ",", "\n", "replace", "=", "False", ")", "\n", "if", "dataset", "==", "'elliptic'", ":", "\n", "            ", "G3", "=", "utils", ".", "get_graph_with_label_elliptic", "(", "df_features_with_label", ",", "df_edgelist", ",", "\n", "train_subjects", ",", "val_subjects", ",", "support_subset_index", ",", "test", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "G3", ",", "_", ",", "_", "=", "utils", ".", "get_graph", "(", "G1", ".", "node_features", "(", ")", ",", "G1", ".", "edges", "(", ")", ",", "node_subjects", ",", "\n", "train_subjects", ",", "val_subjects", ",", "support_subset_index", ",", "test", "=", "True", ")", "\n", "", "Adj", "=", "G3", ".", "to_adjacency_matrix", "(", ")", "\n", "node_features", "=", "G3", ".", "node_features", "(", ")", "\n", "_", ",", "Adj_norm", "=", "GCN_Aadj_feats_op", "(", "node_features", ",", "Adj", ")", "\n", "h1", "=", "sparse", ".", "csr_matrix", ".", "dot", "(", "Adj_norm", ",", "node_features", ")", "\n", "h1", "=", "np", ".", "dot", "(", "h1", ",", "weights", "[", "0", "]", ")", "\n", "h1", "=", "K", ".", "relu", "(", "h1", ")", "\n", "h2", "=", "sparse", ".", "csr_matrix", ".", "dot", "(", "Adj_norm", ",", "h1", ")", "\n", "h2", "=", "np", ".", "dot", "(", "h2", ",", "weights", "[", "1", "]", ")", "\n", "h2", "=", "K", ".", "relu", "(", "h2", ")", "\n", "out", "=", "np", ".", "dot", "(", "h2", ",", "weights", "[", "2", "]", ")", "\n", "out", "=", "K", ".", "softmax", "(", "out", "+", "weights", "[", "3", "]", ")", ".", "numpy", "(", ")", "\n", "y_pred", "=", "[", "]", "\n", "for", "test_id", "in", "test_subjects", ".", "index", ":", "\n", "            ", "test_id_iloc", "=", "G3", ".", "node_ids_to_ilocs", "(", "[", "test_id", "]", ")", "\n", "y_pred", ".", "append", "(", "out", "[", "test_id_iloc", "]", ")", "\n", "\n", "", "y_pred2", "=", "[", "np", ".", "argmax", "(", "y", ")", "for", "y", "in", "y_pred", "]", "\n", "accuracy2", "=", "accuracy_score", "(", "y_true", ",", "y_pred2", ")", "\n", "\n", "logger", ".", "info", "(", "'frac: {}, count: {}, accuracy w/o label feature: {}'", ".", "format", "(", "frac", ",", "count", ",", "accuracy1", ")", ")", "\n", "logger", ".", "info", "(", "'frac: {}, count: {}, accuracy w/  label feature: {}'", ".", "format", "(", "frac", ",", "count", ",", "accuracy2", ")", ")", "\n", "if", "dataset", "!=", "'elliptic'", ":", "\n", "            ", "res", ".", "append", "(", "[", "accuracy1", ",", "accuracy2", "]", ")", "\n", "", "else", ":", "\n", "            ", "recall1", "=", "recall_score", "(", "y_true", ",", "y_pred1", ",", "average", "=", "'binary'", ",", "pos_label", "=", "1", ")", "\n", "precision1", "=", "precision_score", "(", "y_true", ",", "y_pred1", ",", "average", "=", "'binary'", ",", "pos_label", "=", "1", ")", "\n", "f11", "=", "f1_score", "(", "y_true", ",", "y_pred1", ",", "average", "=", "'binary'", ",", "pos_label", "=", "1", ")", "\n", "recall2", "=", "recall_score", "(", "y_true", ",", "y_pred2", ",", "average", "=", "'binary'", ",", "pos_label", "=", "1", ")", "\n", "precision2", "=", "precision_score", "(", "y_true", ",", "y_pred2", ",", "average", "=", "'binary'", ",", "pos_label", "=", "1", ")", "\n", "f12", "=", "f1_score", "(", "y_true", ",", "y_pred2", ",", "average", "=", "'binary'", ",", "pos_label", "=", "1", ")", "\n", "res", ".", "append", "(", "[", "accuracy1", ",", "accuracy2", ",", "precision1", ",", "precision2", ",", "recall1", ",", "recall2", ",", "f11", ",", "f12", "]", ")", "\n", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.cbellei_LabelGCN.src.experiments_transductive.run_jobs": [[179, 201], ["numpy.random.RandomState", "np.random.RandomState.randint", "range", "tensorflow.random.set_seed", "range", "tensorflow.keras.backend.clear_session", "results.append", "results.append", "experiments_transductive.run_job", "experiments_transductive.run_job"], "function", ["home.repos.pwc.inspect_result.cbellei_LabelGCN.src.experiments_transductive.run_job", "home.repos.pwc.inspect_result.cbellei_LabelGCN.src.experiments_transductive.run_job"], ["", "def", "run_jobs", "(", "dataset", ",", "num_random_states", ",", "num_runs", ",", "logger", ",", "training_fraction", ",", "validation_fraction", ",", "\n", "support_fraction", ",", "layer_sizes", ",", "bias", ",", "learning_rate", ",", "dropout", ",", "fracs", ",", "patience", ",", "n_epochs", ",", "n_oversampling", ")", ":", "\n", "\n", "    ", "random_state", "=", "np", ".", "random", ".", "RandomState", "(", "2021", ")", "\n", "tf_seeds", "=", "random_state", ".", "randint", "(", "0", ",", "1000000", ",", "num_random_states", ")", "\n", "\n", "results", "=", "[", "]", "\n", "count", "=", "0", "\n", "for", "i", "in", "range", "(", "num_random_states", ")", ":", "\n", "        ", "tf", ".", "random", ".", "set_seed", "(", "tf_seeds", "[", "i", "]", ")", "\n", "for", "j", "in", "range", "(", "num_runs", ")", ":", "\n", "            ", "count", "+=", "1", "\n", "tf", ".", "keras", ".", "backend", ".", "clear_session", "(", ")", "\n", "if", "dataset", "==", "'elliptic'", ":", "\n", "                ", "results", ".", "append", "(", "run_job", "(", "count", ",", "logger", ",", "dataset", ",", "training_fraction", ",", "validation_fraction", ",", "\n", "support_fraction", ",", "layer_sizes", ",", "bias", ",", "learning_rate", ",", "dropout", ",", "\n", "fracs", ",", "patience", ",", "n_epochs", ",", "n_oversampling", ")", ")", "\n", "", "else", ":", "\n", "                ", "results", ".", "append", "(", "run_job", "(", "count", ",", "logger", ",", "dataset", ",", "training_fraction", ",", "validation_fraction", ",", "\n", "support_fraction", ",", "layer_sizes", ",", "bias", ",", "learning_rate", ",", "dropout", ",", "\n", "fracs", ",", "patience", ",", "n_epochs", ")", ")", "\n", "", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.cbellei_LabelGCN.src.experiments_transductive.main": [[203, 259], ["numpy.random.seed", "utils.parse_command_line_args_transductive", "utils.init_vars_transductive", "utils.get_logger", "utils.get_logger.info", "utils.get_logger", "experiments_transductive.run_jobs", "utils.get_logger.info", "enumerate", "utils.get_logger.info", "result_frac.append", "utils.get_logger.info", "numpy.mean", "numpy.std", "utils.get_logger.info", "utils.get_logger.info", "utils.get_logger.info", "utils.get_logger.info", "utils.get_logger.info", "numpy.mean", "numpy.std", "utils.get_logger.info", "utils.get_logger.info", "utils.get_logger.info", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "str", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "str", "str", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.cbellei_LabelGCN.src.utils.parse_command_line_args_transductive", "home.repos.pwc.inspect_result.cbellei_LabelGCN.src.utils.init_vars_transductive", "home.repos.pwc.inspect_result.cbellei_LabelGCN.src.utils.get_logger", "home.repos.pwc.inspect_result.cbellei_LabelGCN.src.utils.get_logger", "home.repos.pwc.inspect_result.cbellei_LabelGCN.src.experiments_transductive.run_jobs"], ["", "def", "main", "(", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "1", ")", "\n", "dataset", ",", "nstates", ",", "nruns", "=", "utils", ".", "parse_command_line_args_transductive", "(", ")", "\n", "\n", "bias", ",", "learning_rate", ",", "dropout", ",", "patience", ",", "n_epochs", ",", "n_oversampling", ",", "layer_sizes", ",", "training_fraction", ",", "num_random_states", ",", "num_runs", ",", "max_val", "=", "utils", ".", "init_vars_transductive", "(", "dataset", ",", "nstates", ",", "nruns", ")", "\n", "\n", "validation_fraction", "=", "training_fraction", "\n", "min_val", "=", "training_fraction", "+", "validation_fraction", "\n", "support_fraction", "=", "max_val", "-", "validation_fraction", "-", "training_fraction", "\n", "\n", "if", "dataset", "==", "'elliptic'", ":", "\n", "        ", "fracs", "=", "[", "(", "s", "-", "validation_fraction", "-", "training_fraction", ")", "/", "support_fraction", "for", "s", "in", "[", "min_val", ",", "0.5", ",", "0.6", ",", "0.7", ",", "max_val", "]", "]", "\n", "", "else", ":", "\n", "        ", "fracs", "=", "[", "(", "s", "-", "validation_fraction", "-", "training_fraction", ")", "/", "support_fraction", "for", "s", "in", "[", "min_val", ",", "0.15", ",", "0.3", ",", "0.6", ",", "max_val", "]", "]", "\n", "\n", "", "logger", "=", "utils", ".", "get_logger", "(", "dataset", ")", "\n", "logger", ".", "info", "(", "'layer_size: {}, learning rate: {}, dropout: {}, min_val: {}, max_val: {}, '", "\n", "'n_oversampling: {}, patience: {}, num_random_states: {}, num_runs: {}, training_fraction: {}'", "\n", ".", "format", "(", "layer_sizes", ",", "learning_rate", ",", "dropout", ",", "min_val", ",", "max_val", ",", "\n", "n_oversampling", ",", "patience", ",", "num_random_states", ",", "num_runs", ",", "training_fraction", ")", ")", "\n", "logger_results", "=", "utils", ".", "get_logger", "(", "dataset", "+", "'_results'", ")", "\n", "\n", "results", "=", "run_jobs", "(", "dataset", ",", "num_random_states", ",", "num_runs", ",", "logger", ",", "training_fraction", ",", "validation_fraction", ",", "\n", "support_fraction", ",", "layer_sizes", ",", "bias", ",", "learning_rate", ",", "dropout", ",", "fracs", ",", "patience", ",", "n_epochs", ",", "n_oversampling", ")", "\n", "\n", "logger_results", ".", "info", "(", "'layer_size: {}, learning rate: {}, dropout: {}, min_val: {}, max_val: {}, '", "\n", "'n_oversampling: {}, patience: {}, num_random_states: {}, num_runs: {}, training_fraction: {}'", "\n", ".", "format", "(", "layer_sizes", ",", "learning_rate", ",", "dropout", ",", "min_val", ",", "max_val", ",", "\n", "n_oversampling", ",", "patience", ",", "num_random_states", ",", "num_runs", ",", "training_fraction", ")", ")", "\n", "for", "ifrac", ",", "frac", "in", "enumerate", "(", "fracs", ")", ":", "\n", "        ", "result_frac", "=", "[", "]", "\n", "for", "result", "in", "results", ":", "\n", "            ", "result_frac", ".", "append", "(", "result", "[", "ifrac", "]", ")", "\n", "", "if", "ifrac", "==", "0", ":", "# result w/o label doesn't change with size of support set -> only output when ifrac == 0", "\n", "            ", "mean_accuracy1", ",", "std_accuracy1", "=", "np", ".", "mean", "(", "[", "r", "[", "0", "]", "for", "r", "in", "result_frac", "]", ")", ",", "np", ".", "std", "(", "[", "r", "[", "0", "]", "for", "r", "in", "result_frac", "]", ")", "\n", "logger_results", ".", "info", "(", "'Accuracy w/o label: {} {} {}'", ".", "format", "(", "str", "(", "mean_accuracy1", ")", ",", "u'\\u00B1'", ",", "std_accuracy1", ")", ")", "\n", "", "mean_accuracy2", ",", "std_accuracy2", "=", "np", ".", "mean", "(", "[", "r", "[", "1", "]", "for", "r", "in", "result_frac", "]", ")", ",", "np", ".", "std", "(", "[", "r", "[", "1", "]", "for", "r", "in", "result_frac", "]", ")", "\n", "if", "dataset", "==", "'elliptic'", ":", "\n", "            ", "if", "ifrac", "==", "0", ":", "# result w/o label doesn't change with size of support set -> only output when ifrac == 0", "\n", "                ", "mean_precision1", ",", "std_precision1", "=", "np", ".", "mean", "(", "[", "r", "[", "2", "]", "for", "r", "in", "result_frac", "]", ")", ",", "np", ".", "std", "(", "[", "r", "[", "2", "]", "for", "r", "in", "result_frac", "]", ")", "\n", "mean_recall1", ",", "std_recall1", "=", "np", ".", "mean", "(", "[", "r", "[", "4", "]", "for", "r", "in", "result_frac", "]", ")", ",", "np", ".", "std", "(", "[", "r", "[", "4", "]", "for", "r", "in", "result_frac", "]", ")", "\n", "mean_f11", ",", "std_f11", "=", "np", ".", "mean", "(", "[", "r", "[", "6", "]", "for", "r", "in", "result_frac", "]", ")", ",", "np", ".", "std", "(", "[", "r", "[", "6", "]", "for", "r", "in", "result_frac", "]", ")", "\n", "logger_results", ".", "info", "(", "'Precision w/o label: {} {} {}'", ".", "format", "(", "str", "(", "mean_precision1", ")", ",", "u'\\u00B1'", ",", "std_precision1", ")", ")", "\n", "logger_results", ".", "info", "(", "'Recall w/o label: {} {} {}'", ".", "format", "(", "str", "(", "mean_recall1", ")", ",", "u'\\u00B1'", ",", "std_recall1", ")", ")", "\n", "logger_results", ".", "info", "(", "'F1 score w/o label: {} {} {}'", ".", "format", "(", "str", "(", "mean_f11", ")", ",", "u'\\u00B1'", ",", "std_f11", ")", ")", "\n", "", "mean_precision2", ",", "std_precision2", "=", "np", ".", "mean", "(", "[", "r", "[", "3", "]", "for", "r", "in", "result_frac", "]", ")", ",", "np", ".", "std", "(", "[", "r", "[", "3", "]", "for", "r", "in", "result_frac", "]", ")", "\n", "mean_recall2", ",", "std_recall2", "=", "np", ".", "mean", "(", "[", "r", "[", "5", "]", "for", "r", "in", "result_frac", "]", ")", ",", "np", ".", "std", "(", "[", "r", "[", "5", "]", "for", "r", "in", "result_frac", "]", ")", "\n", "mean_f12", ",", "std_f12", "=", "np", ".", "mean", "(", "[", "r", "[", "7", "]", "for", "r", "in", "result_frac", "]", ")", ",", "np", ".", "std", "(", "[", "r", "[", "7", "]", "for", "r", "in", "result_frac", "]", ")", "\n", "logger_results", ".", "info", "(", "'frac: {}, Accuracy w/ label: {} {} {}'", ".", "format", "(", "frac", ",", "str", "(", "mean_accuracy2", ")", ",", "u'\\u00B1'", ",", "std_accuracy2", ")", ")", "\n", "logger_results", ".", "info", "(", "'frac: {}, Precision w/ label: {} {} {}'", ".", "format", "(", "frac", ",", "str", "(", "mean_precision2", ")", ",", "u'\\u00B1'", ",", "std_precision2", ")", ")", "\n", "logger_results", ".", "info", "(", "'frac: {}, Recall w/ label: {} {} {}'", ".", "format", "(", "frac", ",", "str", "(", "mean_recall2", ")", ",", "u'\\u00B1'", ",", "std_recall2", ")", ")", "\n", "logger_results", ".", "info", "(", "'frac: {}, F1 score w/ label: {} {} {}'", ".", "format", "(", "frac", ",", "str", "(", "mean_f12", ")", ",", "u'\\u00B1'", ",", "std_f12", ")", ")", "\n", "", "else", ":", "\n", "            ", "logger_results", ".", "info", "(", "'frac: {}, Accuracy w/ label: {} {} {}'", ".", "format", "(", "frac", ",", "str", "(", "mean_accuracy2", ")", ",", "u'\\u00B1'", ",", "std_accuracy2", ")", ")", "\n", "", "", "logger_results", ".", "info", "(", "'------------------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cbellei_LabelGCN.src.utils.get_logger": [[15, 23], ["logging.getLogger", "logging.getLogger.setLevel", "logging.FileHandler", "logging.Formatter", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler"], "function", ["None"], ["def", "get_logger", "(", "name", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "fh", "=", "logging", ".", "FileHandler", "(", "'{}.log'", ".", "format", "(", "name", ")", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s - %(name)s - %(message)s'", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "fh", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.cbellei_LabelGCN.src.utils.split_data": [[24, 28], ["list", "list"], "function", ["None"], ["", "def", "split_data", "(", "df_features_class", ",", "n_training_tsteps", ")", ":", "\n", "    ", "labelled_data", "=", "df_features_class", ".", "loc", "[", "(", "df_features_class", "[", "'label'", "]", "==", "0", ")", "|", "(", "df_features_class", "[", "'label'", "]", "==", "1", ")", "]", "\n", "return", "list", "(", "labelled_data", "[", "labelled_data", "[", "'time step'", "]", "<=", "n_training_tsteps", "]", ".", "index", ")", ",", "list", "(", "labelled_data", "[", "labelled_data", "[", "'time step'", "]", ">", "n_training_tsteps", "]", ".", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cbellei_LabelGCN.src.utils.get_elliptic_data": [[30, 61], ["pandas.read_csv", "df_classes[].map", "pandas.read_csv", "pandas.read_csv", "df_classes_id.set_index.set_index", "pd.read_csv.copy", "pandas.merge", "df_features_class.set_index.set_index", "df_classes_id[].map", "range", "range"], "function", ["None"], ["", "def", "get_elliptic_data", "(", ")", ":", "\n", "# Importing classes.csv file, renaming the columns to (id, label)", "\n", "    ", "df_classes", "=", "pd", ".", "read_csv", "(", "'elliptic_bitcoin_dataset/elliptic_txs_classes.csv'", ")", "\n", "df_classes", ".", "columns", "=", "[", "'id'", ",", "'label'", "]", "\n", "# Renaming labels to (2,0,1)", "\n", "df_classes", "[", "'label'", "]", "=", "df_classes", "[", "'label'", "]", ".", "map", "(", "{", "'unknown'", ":", "2", ",", "'2'", ":", "0", ",", "'1'", ":", "1", "}", ")", "\n", "\n", "# Importing edgelist.csv file, renaming the coulmns to (source, target).", "\n", "# Must be source and target in order to be used in stellargraph", "\n", "df_edgelist", "=", "pd", ".", "read_csv", "(", "'../elliptic_bitcoin_dataset/elliptic_txs_edgelist.csv'", ")", "\n", "df_edgelist", ".", "columns", "=", "[", "'source'", ",", "'target'", "]", "\n", "\n", "# Importing features.csv file, renaming features as well. first to (id, time step) then trans_feat_ for the next 93 feathres and agg_feat_ for the rest", "\n", "df_features", "=", "pd", ".", "read_csv", "(", "'../elliptic_bitcoin_dataset/elliptic_txs_features.csv'", ",", "header", "=", "None", ")", "\n", "tx_features", "=", "[", "f'trans_feat_{i}'", "for", "i", "in", "range", "(", "93", ")", "]", "\n", "agg_features", "=", "[", "f'agg_feat_{i}'", "for", "i", "in", "range", "(", "72", ")", "]", "\n", "df_features", ".", "columns", "=", "[", "'id'", ",", "'time step'", "]", "+", "tx_features", "+", "agg_features", "\n", "\n", "df_classes_id", "=", "df_classes", "\n", "df_classes_id", "[", "'label'", "]", "=", "df_classes_id", "[", "'label'", "]", "\n", "df_classes_id", "=", "df_classes_id", ".", "set_index", "(", "'id'", ")", "\n", "\n", "df_features_new", "=", "df_features", ".", "copy", "(", ")", "\n", "df_features_new", "[", "'GCN-label'", "]", "=", "df_classes_id", "[", "'label'", "]", ".", "map", "(", "{", "2", ":", "0", ",", "0", ":", "-", "1", ",", "1", ":", "1", "}", ")", ".", "values", "\n", "\n", "df_features_class", "=", "pd", ".", "merge", "(", "df_features_new", ",", "df_classes", ",", "left_on", "=", "'id'", ",", "right_on", "=", "'id'", ",", "how", "=", "'left'", ")", "\n", "df_features_class", "=", "df_features_class", ".", "set_index", "(", "'id'", ")", "\n", "\n", "df_features_new", "=", "df_features_class", "[", "[", "'time step'", "]", "+", "tx_features", "+", "agg_features", "+", "[", "'GCN-label'", "]", "]", "\n", "\n", "return", "df_features", ",", "df_classes_id", ",", "tx_features", ",", "agg_features", ",", "df_features_class", ",", "df_features_new", ",", "df_edgelist", "\n", "\n"]], "home.repos.pwc.inspect_result.cbellei_LabelGCN.src.utils.get_graph_with_label_elliptic": [[63, 76], ["df_features.copy.copy", "stellargraph.StellarGraph", "df_features.copy.index.isin", "df_features.copy.index.isin", "df_features.copy.index.isin", "df_features.copy.index.isin"], "function", ["None"], ["", "def", "get_graph_with_label_elliptic", "(", "df_features", ",", "df_edgelist", ",", "train_subjects", ",", "val_subjects", ",", "\n", "support_subset_index", "=", "None", ",", "test", "=", "False", ")", ":", "\n", "    ", "df_features", "=", "df_features", ".", "copy", "(", ")", "\n", "if", "support_subset_index", "is", "None", ":", "\n", "        ", "support_subset_index", "=", "[", "]", "\n", "", "if", "test", ":", "\n", "        ", "df_features", ".", "loc", "[", "(", "~", "df_features", ".", "index", ".", "isin", "(", "train_subjects", ".", "index", ")", ")", "&", "\n", "(", "~", "df_features", ".", "index", ".", "isin", "(", "val_subjects", ".", "index", ")", ")", "&", "\n", "(", "~", "df_features", ".", "index", ".", "isin", "(", "support_subset_index", ")", ")", ",", "'GCN-label'", "]", "=", "0", "\n", "", "else", ":", "\n", "        ", "df_features", ".", "loc", "[", "(", "~", "df_features", ".", "index", ".", "isin", "(", "train_subjects", ".", "index", ")", ")", ",", "'GCN-label'", "]", "=", "0", "\n", "", "G", "=", "StellarGraph", "(", "df_features", ",", "df_edgelist", ")", "\n", "return", "G", "\n", "\n"]], "home.repos.pwc.inspect_result.cbellei_LabelGCN.src.utils.get_graph_without_label_elliptic": [[78, 84], ["stellargraph.StellarGraph", "pandas.Series"], "function", ["None"], ["", "def", "get_graph_without_label_elliptic", "(", "df_classes_id", ",", "df_features", ",", "df_edgelist", ")", ":", "\n", "    ", "G", "=", "StellarGraph", "(", "df_features", ",", "df_edgelist", ")", "\n", "node_subjects", "=", "df_classes_id", "[", "df_classes_id", ".", "label", "!=", "0", "]", "\n", "s", "=", "pd", ".", "Series", "(", "data", "=", "node_subjects", ".", "label", ".", "values", ",", "index", "=", "node_subjects", ".", "index", ")", "\n", "s", ".", "index", ".", "name", "=", "None", "\n", "return", "G", ",", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.cbellei_LabelGCN.src.utils.get_graph": [[86, 111], ["pandas.DataFrame", "pandas.Series", "pandas.get_dummies", "sklearn.preprocessing.StandardScaler", "sklearn.preprocessing.StandardScaler.fit", "pandas.DataFrame", "pandas.concat", "pandas.DataFrame", "stellargraph.StellarGraph", "len", "len", "sklearn.preprocessing.StandardScaler.transform", "range", "len"], "function", ["None"], ["", "def", "get_graph", "(", "features", ",", "edges", ",", "node_subjects", ",", "train_subjects", ",", "val_subjects", ",", "support_subset", "=", "None", ",", "test", "=", "False", ")", ":", "\n", "    ", "cols", "=", "[", "'feat{}'", ".", "format", "(", "i", ")", "for", "i", "in", "range", "(", "len", "(", "features", "[", "0", "]", ")", ")", "]", "\n", "features", "=", "pd", ".", "DataFrame", "(", "features", ",", "columns", "=", "cols", ",", "index", "=", "node_subjects", ".", "index", ")", "\n", "s", "=", "pd", ".", "Series", "(", "data", "=", "node_subjects", ".", "values", ",", "index", "=", "node_subjects", ".", "index", ")", "\n", "dummies", "=", "pd", ".", "get_dummies", "(", "s", ")", "\n", "scaler", "=", "StandardScaler", "(", ")", "\n", "scaler", ".", "fit", "(", "dummies", ")", "\n", "dummies", "=", "pd", ".", "DataFrame", "(", "scaler", ".", "transform", "(", "dummies", ")", ",", "columns", "=", "dummies", ".", "columns", ",", "index", "=", "dummies", ".", "index", ")", "\n", "if", "test", ":", "\n", "        ", "for", "node_id", "in", "node_subjects", ".", "index", ":", "# make sure we don't use information from test nodes", "\n", "            ", "if", "(", "node_id", "not", "in", "support_subset", ")", "and", "(", "node_id", "not", "in", "train_subjects", ".", "index", ")", "and", "(", "node_id", "not", "in", "val_subjects", ".", "index", ")", ":", "\n", "                ", "for", "col", "in", "dummies", ".", "columns", ":", "\n", "                    ", "dummies", ".", "loc", "[", "node_id", ",", "col", "]", "=", "0", "\n", "", "", "", "", "else", ":", "\n", "        ", "for", "node_id", "in", "node_subjects", ".", "index", ":", "# make sure we only use information from train nodes", "\n", "            ", "if", "node_id", "not", "in", "train_subjects", ".", "index", ":", "\n", "                ", "for", "col", "in", "dummies", ".", "columns", ":", "\n", "                    ", "dummies", ".", "loc", "[", "node_id", ",", "col", "]", "=", "0", "\n", "", "", "", "", "new_features", "=", "pd", ".", "concat", "(", "[", "features", ",", "dummies", "]", ",", "axis", "=", "1", ")", "\n", "edges", "=", "pd", ".", "DataFrame", "(", "{", "'source'", ":", "[", "e", "[", "0", "]", "for", "e", "in", "edges", "]", ",", "'target'", ":", "[", "e", "[", "1", "]", "for", "e", "in", "edges", "]", "}", ")", "\n", "G", "=", "StellarGraph", "(", "new_features", ",", "edges", ")", "\n", "n_cols", "=", "len", "(", "new_features", ".", "columns", ")", "\n", "n_dummies", "=", "len", "(", "dummies", ".", "columns", ")", "\n", "return", "G", ",", "n_cols", ",", "n_dummies", "\n", "\n"]], "home.repos.pwc.inspect_result.cbellei_LabelGCN.src.utils.encoding": [[113, 121], ["enumerate", "numpy.array", "empty.append", "empty.append", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "encoding", "(", "x", ")", ":", "\n", "    ", "empty", "=", "[", "]", "\n", "for", "idx", ",", "i", "in", "enumerate", "(", "x", ")", ":", "\n", "        ", "if", "i", "==", "[", "0", "]", ":", "\n", "            ", "empty", ".", "append", "(", "np", ".", "array", "(", "[", "1", ",", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "empty", ".", "append", "(", "np", ".", "array", "(", "[", "0", ",", "1", "]", ")", ")", "\n", "", "", "return", "np", ".", "array", "(", "empty", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cbellei_LabelGCN.src.utils.output_results": [[123, 131], ["logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "log_loss", "f1_score", "roc_auc_score", "recall_score", "precision_score", "f1_score"], "function", ["None"], ["", "def", "output_results", "(", "y_test", ",", "y_pred", ",", "logger", ")", ":", "\n", "    ", "logger", ".", "info", "(", "'Log Loss= {}'", ".", "format", "(", "log_loss", "(", "y_test", ",", "y_pred", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Illicit F1= {}'", ".", "format", "(", "f1_score", "(", "y_test", ",", "y_pred", ",", "average", "=", "'binary'", ",", "pos_label", "=", "1", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Illicit AUC= {}'", ".", "format", "(", "roc_auc_score", "(", "y_test", ",", "y_pred", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Illicit Recall= {}'", ".", "format", "(", "recall_score", "(", "y_test", ",", "y_pred", ",", "average", "=", "'binary'", ",", "pos_label", "=", "1", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Illicit Precision= {}'", ".", "format", "(", "precision_score", "(", "y_test", ",", "y_pred", ",", "average", "=", "'binary'", ",", "pos_label", "=", "1", ")", ")", ")", "\n", "logger", ".", "info", "(", "'Micro F1= {}'", ".", "format", "(", "f1_score", "(", "y_test", ",", "y_pred", ",", "average", "=", "'micro'", ",", "pos_label", "=", "1", ")", ")", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.cbellei_LabelGCN.src.utils.dfs_for_standard_models": [[133, 148], ["data.reset_index", "train[].reset_index", "test[].reset_index"], "function", ["None"], ["", "def", "dfs_for_standard_models", "(", "df_features_class", ",", "tx_colnames", ",", "agg_colnames", ",", "n_training_tsteps", ")", ":", "\n", "    ", "data", "=", "df_features_class", ".", "loc", "[", "(", "df_features_class", "[", "'label'", "]", "==", "0", ")", "|", "(", "df_features_class", "[", "'label'", "]", "==", "1", ")", "]", "# only labelled nodes", "\n", "data", ".", "reset_index", "(", "inplace", "=", "True", ",", "drop", "=", "True", ")", "\n", "data", "=", "data", ".", "loc", "[", ":", ",", "data", ".", "columns", "!=", "'id'", "]", "\n", "\n", "train", "=", "data", ".", "loc", "[", "(", "data", "[", "'time step'", "]", "<=", "n_training_tsteps", ")", ",", "[", "'time step'", "]", "+", "tx_colnames", "+", "agg_colnames", "+", "[", "'label'", "]", "]", "\n", "test", "=", "data", ".", "loc", "[", "(", "data", "[", "'time step'", "]", ">", "n_training_tsteps", ")", ",", "[", "'time step'", "]", "+", "tx_colnames", "+", "agg_colnames", "+", "[", "'label'", "]", "]", "\n", "\n", "X_train", "=", "train", "[", "[", "'time step'", "]", "+", "tx_colnames", "+", "agg_colnames", "]", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "y_train", "=", "train", "[", "'label'", "]", "\n", "\n", "X_test", "=", "test", "[", "[", "'time step'", "]", "+", "tx_colnames", "+", "agg_colnames", "]", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "y_test", "=", "test", "[", "'label'", "]", "\n", "\n", "return", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "\n", "\n"]], "home.repos.pwc.inspect_result.cbellei_LabelGCN.src.utils.get_len_after_shutdown": [[150, 154], ["len"], "function", ["None"], ["", "def", "get_len_after_shutdown", "(", "df_features_class", ",", "dark_market_shutdown_tstep", ")", ":", "\n", "    ", "df_labelled", "=", "df_features_class", ".", "loc", "[", "\n", "(", "df_features_class", "[", "'label'", "]", "==", "0", ")", "|", "(", "df_features_class", "[", "'label'", "]", "==", "1", ")", "]", "# only labelled nodes", "\n", "return", "len", "(", "df_labelled", "[", "df_labelled", "[", "'time step'", "]", ">=", "dark_market_shutdown_tstep", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cbellei_LabelGCN.src.utils.performance_gcn": [[156, 169], ["collections.OrderedDict", "collections.OrderedDict", "utils.performance", "utils.performance", "performance.items", "performance.items", "gcn_results_no_label[].append", "gcn_results[].append"], "function", ["home.repos.pwc.inspect_result.cbellei_LabelGCN.src.utils.performance", "home.repos.pwc.inspect_result.cbellei_LabelGCN.src.utils.performance"], ["", "def", "performance_gcn", "(", "all_gcn_results", ",", "len_after_shutdown", ")", ":", "\n", "    ", "y_true", "=", "all_gcn_results", "[", "0", "]", "[", "0", "]", "\n", "gcn_results_no_label", "=", "OrderedDict", "(", "{", "'precision'", ":", "[", "]", ",", "'recall'", ":", "[", "]", ",", "'f1'", ":", "[", "]", ",", "'f1_shutdown'", ":", "[", "]", ",", "'accuracy'", ":", "[", "]", "}", ")", "\n", "gcn_results", "=", "OrderedDict", "(", "{", "'precision'", ":", "[", "]", ",", "'recall'", ":", "[", "]", ",", "'f1'", ":", "[", "]", ",", "'f1_shutdown'", ":", "[", "]", ",", "'accuracy'", ":", "[", "]", "}", ")", "\n", "for", "res", "in", "all_gcn_results", ":", "\n", "        ", "y_gcn_no_label", ",", "y_gcn", "=", "res", "[", "1", "]", ",", "res", "[", "2", "]", "\n", "performance_no_label", "=", "performance", "(", "y_true", ",", "y_gcn_no_label", ",", "len_after_shutdown", ")", "\n", "performance_label", "=", "performance", "(", "y_true", ",", "y_gcn", ",", "len_after_shutdown", ")", "\n", "for", "k", ",", "v", "in", "performance_no_label", ".", "items", "(", ")", ":", "\n", "            ", "gcn_results_no_label", "[", "k", "]", ".", "append", "(", "v", ")", "\n", "", "for", "k", ",", "v", "in", "performance_label", ".", "items", "(", ")", ":", "\n", "            ", "gcn_results", "[", "k", "]", ".", "append", "(", "v", ")", "\n", "", "", "return", "gcn_results_no_label", ",", "gcn_results", "\n", "\n"]], "home.repos.pwc.inspect_result.cbellei_LabelGCN.src.utils.performance_standard_models": [[171, 201], ["sklearn.preprocessing.StandardScaler", "sklearn.preprocessing.StandardScaler.fit", "pandas.DataFrame", "pandas.DataFrame", "collections.OrderedDict", "range", "collections.OrderedDict", "collections.OrderedDict.keys", "sklearn.preprocessing.StandardScaler.transform", "sklearn.preprocessing.StandardScaler.transform", "xgboost.XGBClassifier.fit", "xgboost.XGBClassifier.predict", "utils.performance", "performance.items", "numpy.mean", "numpy.std", "sklearn.linear_model.LogisticRegression", "results[].append", "sklearn.ensemble.RandomForestClassifier", "xgboost.XGBClassifier", "sys.exit"], "function", ["home.repos.pwc.inspect_result.cbellei_LabelGCN.src.utils.performance"], ["", "def", "performance_standard_models", "(", "X_train", ",", "y_train", ",", "X_test", ",", "y_test", ",", "len_after_shutdown", ",", "nruns", ",", "method", ")", ":", "\n", "\n", "    ", "scaler", "=", "StandardScaler", "(", ")", "\n", "scaler", ".", "fit", "(", "X_train", ")", "\n", "X_train_std", "=", "pd", ".", "DataFrame", "(", "scaler", ".", "transform", "(", "X_train", ")", ",", "columns", "=", "X_train", ".", "columns", ",", "index", "=", "X_train", ".", "index", ")", "\n", "X_test_std", "=", "pd", ".", "DataFrame", "(", "scaler", ".", "transform", "(", "X_test", ")", ",", "columns", "=", "X_test", ".", "columns", ",", "index", "=", "X_test", ".", "index", ")", "\n", "\n", "results", "=", "OrderedDict", "(", "{", "'precision'", ":", "[", "]", ",", "'recall'", ":", "[", "]", ",", "'f1'", ":", "[", "]", ",", "'f1_shutdown'", ":", "[", "]", ",", "'accuracy'", ":", "[", "]", "}", ")", "\n", "for", "run", "in", "range", "(", "nruns", ")", ":", "\n", "        ", "if", "method", "==", "'LR'", ":", "\n", "            ", "model", "=", "LogisticRegression", "(", "random_state", "=", "run", ",", "max_iter", "=", "10000", ")", "\n", "", "elif", "method", "==", "'RF'", ":", "\n", "            ", "model", "=", "RandomForestClassifier", "(", "random_state", "=", "run", ",", "n_estimators", "=", "50", ",", "max_features", "=", "50", ")", "\n", "", "elif", "method", "==", "'XG'", ":", "\n", "            ", "model", "=", "XGBClassifier", "(", "random_state", "=", "run", ")", "\n", "", "else", ":", "\n", "            ", "sys", ".", "exit", "(", "'Method invalid'", ")", "\n", "", "model", ".", "fit", "(", "X_train_std", ",", "y_train", ")", "\n", "y_pred", "=", "model", ".", "predict", "(", "X_test_std", ")", "\n", "result", "=", "performance", "(", "y_test", ",", "y_pred", ",", "len_after_shutdown", ")", "\n", "for", "k", ",", "v", "in", "result", ".", "items", "(", ")", ":", "\n", "            ", "results", "[", "k", "]", ".", "append", "(", "v", ")", "\n", "\n", "", "", "results_averaged", "=", "OrderedDict", "(", "{", "'precision'", ":", "None", ",", "'recall'", ":", "None", ",", "'f1'", ":", "None", ",", "'f1_shutdown'", ":", "None", ",", "'accuracy'", ":", "None", "}", ")", "\n", "for", "k", "in", "results_averaged", ".", "keys", "(", ")", ":", "\n", "        ", "mean", "=", "np", ".", "mean", "(", "results", "[", "k", "]", ")", "\n", "standard_deviation", "=", "np", ".", "std", "(", "results", "[", "k", "]", ")", "\n", "results_averaged", "[", "k", "]", "=", "'{} {} {}'", ".", "format", "(", "mean", ",", "u'\\u00B1'", ",", "standard_deviation", ")", "\n", "\n", "", "return", "results_averaged", ",", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.cbellei_LabelGCN.src.utils.performance": [[203, 211], ["f1_score", "f1_score", "recall_score", "precision_score", "accuracy_score"], "function", ["None"], ["", "def", "performance", "(", "y_test", ",", "y_pred", ",", "len_after_shutdown", ")", ":", "\n", "    ", "f1", "=", "f1_score", "(", "y_test", ",", "y_pred", ",", "average", "=", "'binary'", ",", "pos_label", "=", "1", ")", "\n", "f1_shutdown", "=", "f1_score", "(", "y_test", "[", "-", "len_after_shutdown", ":", "]", ",", "y_pred", "[", "-", "len_after_shutdown", ":", "]", ",", "average", "=", "'binary'", ",", "pos_label", "=", "1", ")", "\n", "recall", "=", "recall_score", "(", "y_test", ",", "y_pred", ",", "average", "=", "'binary'", ",", "pos_label", "=", "1", ")", "\n", "precision", "=", "precision_score", "(", "y_test", ",", "y_pred", ",", "average", "=", "'binary'", ",", "pos_label", "=", "1", ")", "\n", "accuracy", "=", "accuracy_score", "(", "y_test", ",", "y_pred", ")", "\n", "result", "=", "{", "'precision'", ":", "precision", ",", "'recall'", ":", "recall", ",", "'f1'", ":", "f1", ",", "'f1_shutdown'", ":", "f1_shutdown", ",", "'accuracy'", ":", "accuracy", "}", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.cbellei_LabelGCN.src.utils.init_vars_transductive": [[213, 251], ["sys.exit"], "function", ["None"], ["", "def", "init_vars_transductive", "(", "dataset", ",", "ns", ",", "nr", ")", ":", "\n", "    ", "bias", "=", "False", "\n", "learning_rate", "=", "0.01", "\n", "dropout", "=", "0.5", "\n", "patience", "=", "10", "\n", "n_epochs", "=", "1000", "\n", "n_oversampling", "=", "0", "\n", "if", "dataset", "==", "'citeseer'", ":", "\n", "        ", "layer_sizes", "=", "[", "16", ",", "16", "]", "\n", "training_fraction", "=", "0.0364", "\n", "num_random_states", ",", "num_runs", "=", "10", ",", "100", "\n", "max_val", "=", "0.90", "\n", "", "elif", "dataset", "==", "'cora'", ":", "\n", "        ", "layer_sizes", "=", "[", "16", ",", "16", "]", "\n", "training_fraction", "=", "0.052", "\n", "num_random_states", ",", "num_runs", "=", "10", ",", "100", "\n", "max_val", "=", "0.90", "\n", "", "elif", "dataset", "==", "'pubmed'", ":", "\n", "        ", "layer_sizes", "=", "[", "16", ",", "16", "]", "\n", "training_fraction", "=", "0.00306", "\n", "num_random_states", ",", "num_runs", "=", "10", ",", "20", "\n", "max_val", "=", "0.90", "\n", "", "elif", "dataset", "==", "'elliptic'", ":", "\n", "        ", "layer_sizes", "=", "[", "100", ",", "100", "]", "\n", "training_fraction", "=", "0.1", "\n", "num_random_states", ",", "num_runs", "=", "2", ",", "5", "\n", "max_val", "=", "0.80", "\n", "dropout", "=", "0.5", "\n", "patience", "=", "30", "\n", "", "else", ":", "\n", "        ", "sys", ".", "exit", "(", "'dataset invalid'", ")", "\n", "# overwrite default values from command line", "\n", "", "if", "ns", "is", "not", "None", ":", "\n", "        ", "num_random_states", "=", "ns", "\n", "", "if", "nr", "is", "not", "None", ":", "\n", "        ", "num_runs", "=", "nr", "\n", "", "return", "bias", ",", "learning_rate", ",", "dropout", ",", "patience", ",", "n_epochs", ",", "n_oversampling", ",", "layer_sizes", ",", "training_fraction", ",", "num_random_states", ",", "num_runs", ",", "max_val", "\n", "\n"]], "home.repos.pwc.inspect_result.cbellei_LabelGCN.src.utils.parse_command_line_args_transductive": [[253, 260], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "vars", "argparse.ArgumentParser.parse_args", "int", "int"], "function", ["None"], ["", "def", "parse_command_line_args_transductive", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-ds'", ",", "'--dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'-ns'", ",", "'--num_random_states'", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'-nr'", ",", "'--num_runs'", ",", "default", "=", "None", ")", "\n", "args", "=", "vars", "(", "parser", ".", "parse_args", "(", ")", ")", "\n", "return", "args", "[", "'dataset'", "]", ",", "int", "(", "args", "[", "'num_random_states'", "]", ")", ",", "int", "(", "args", "[", "'num_runs'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cbellei_LabelGCN.src.utils.parse_command_line_args_inductive": [[262, 269], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "vars", "argparse.ArgumentParser.parse_args", "int", "int", "int"], "function", ["None"], ["", "def", "parse_command_line_args_inductive", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-ns'", ",", "'--num_random_states'", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'-nr1'", ",", "'--num_runs_1'", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'-nr2'", ",", "'--num_runs_2'", ",", "default", "=", "None", ")", "\n", "args", "=", "vars", "(", "parser", ".", "parse_args", "(", ")", ")", "\n", "return", "int", "(", "args", "[", "'num_random_states'", "]", ")", ",", "int", "(", "args", "[", "'num_runs_1'", "]", ")", ",", "int", "(", "args", "[", "'num_runs_2'", "]", ")", "\n", "", ""]]}