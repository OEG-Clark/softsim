{"home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.updater.Updater.__init__": [[38, 53], ["kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "super().__init__"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.resblocks.OptimizedBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "models", "=", "kwargs", ".", "pop", "(", "'models'", ")", "\n", "self", ".", "n_dis", "=", "kwargs", ".", "pop", "(", "'n_dis'", ")", "\n", "self", ".", "loss_type", "=", "kwargs", ".", "pop", "(", "'loss_type'", ")", "\n", "self", ".", "conditional", "=", "kwargs", ".", "pop", "(", "'conditional'", ")", "\n", "self", ".", "n_gen_samples", "=", "kwargs", ".", "pop", "(", "'n_gen_samples'", ")", "\n", "if", "self", ".", "loss_type", "==", "'dcgan'", ":", "\n", "            ", "self", ".", "loss_gen", "=", "loss_dcgan_gen", "\n", "self", ".", "loss_dis", "=", "loss_dcgan_dis", "\n", "", "elif", "self", ".", "loss_type", "==", "'hinge'", ":", "\n", "            ", "self", ".", "loss_gen", "=", "loss_hinge_gen", "\n", "self", ".", "loss_dis", "=", "loss_hinge_dis", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "super", "(", "Updater", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.updater.Updater._generete_samples": [[54, 64], ["gen", "source.miscs.random_samples.sample_categorical"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.miscs.random_samples.sample_categorical"], ["", "def", "_generete_samples", "(", "self", ",", "n_gen_samples", "=", "None", ")", ":", "\n", "        ", "if", "n_gen_samples", "is", "None", ":", "\n", "            ", "n_gen_samples", "=", "self", ".", "n_gen_samples", "\n", "", "gen", "=", "self", ".", "models", "[", "'gen'", "]", "\n", "if", "self", ".", "conditional", ":", "\n", "            ", "y", "=", "sample_categorical", "(", "gen", ".", "n_classes", ",", "n_gen_samples", ",", "xp", "=", "gen", ".", "xp", ")", "\n", "", "else", ":", "\n", "            ", "y", "=", "None", "\n", "", "x_fake", "=", "gen", "(", "n_gen_samples", ",", "y", "=", "y", ")", "\n", "return", "x_fake", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.updater.Updater.get_batch": [[65, 81], ["updater.Updater.get_iterator().next", "len", "range", "x.append", "y.append", "chainer.Variable", "chainer.Variable", "updater.Updater.get_iterator", "numpy.asarray().astype", "numpy.asarray().astype", "xp.asarray", "chainer.Variable", "chainer.Variable", "print", "updater.Updater.get_batch", "xp.asarray", "numpy.asarray", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.updater.Updater.get_batch"], ["", "def", "get_batch", "(", "self", ",", "xp", ")", ":", "\n", "        ", "batch", "=", "self", ".", "get_iterator", "(", "'main'", ")", ".", "next", "(", ")", "\n", "batchsize", "=", "len", "(", "batch", ")", "\n", "x", "=", "[", "]", "\n", "y", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "batchsize", ")", ":", "\n", "            ", "x", ".", "append", "(", "np", ".", "asarray", "(", "batch", "[", "j", "]", "[", "0", "]", ")", ".", "astype", "(", "\"f\"", ")", ")", "\n", "y", ".", "append", "(", "np", ".", "asarray", "(", "batch", "[", "j", "]", "[", "1", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", ")", "\n", "# JPEG problem in ImageNet dataset", "\n", "", "try", ":", "\n", "            ", "x_real", "=", "Variable", "(", "xp", ".", "asarray", "(", "x", ")", ")", "\n", "y_real", "=", "Variable", "(", "xp", ".", "asarray", "(", "y", ",", "dtype", "=", "xp", ".", "int32", ")", ")", "if", "self", ".", "conditional", "else", "None", "\n", "", "except", ":", "\n", "            ", "print", "(", "'JPEG IOError'", ")", "\n", "x_real", ",", "y_real", "=", "self", ".", "get_batch", "(", "xp", ")", "\n", "", "return", "x_real", ",", "y_real", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.updater.Updater.update_core": [[82, 114], ["updater.Updater.get_optimizer", "updater.Updater.get_optimizer", "updater.Updater.get_batch", "len", "range", "source.miscs.random_samples.sample_categorical", "gen", "langevin.langevin", "dis", "dis", "langevin.langevin.unchain_backward", "updater.Updater.loss_dis", "dis.cleargrads", "updater.Updater.backward", "updater.Updater.update", "chainer.reporter.report", "chainer.reporter.report", "chainer.reporter.report", "chainer.reporter.report", "langevin_z.langevin"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.updater.Updater.get_batch", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.miscs.random_samples.sample_categorical", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.langevin.langevin", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.langevin.langevin"], ["", "def", "update_core", "(", "self", ")", ":", "\n", "        ", "gen", "=", "self", ".", "models", "[", "'gen'", "]", "\n", "dis", "=", "self", ".", "models", "[", "'dis'", "]", "\n", "gen_optimizer", "=", "self", ".", "get_optimizer", "(", "'opt_gen'", ")", "\n", "dis_optimizer", "=", "self", ".", "get_optimizer", "(", "'opt_dis'", ")", "\n", "xp", "=", "gen", ".", "xp", "\n", "\n", "x_real", ",", "y_real", "=", "self", ".", "get_batch", "(", "xp", ")", "\n", "# First, sample data from G through langevin dynamics", "\n", "batchsize", "=", "len", "(", "x_real", ")", "\n", "# x_fake, y_fake = self._generete_samples(n_gen_samples=batchsize)", "\n", "if", "self", ".", "conditional", ":", "\n", "            ", "y_fake", "=", "sample_categorical", "(", "gen", ".", "n_classes", ",", "batchsize", ",", "xp", "=", "gen", ".", "xp", ")", "\n", "", "else", ":", "\n", "            ", "y_fake", "=", "None", "\n", "", "if", "args", ".", "sampling_space", "==", "'pixel'", ":", "\n", "            ", "x_fake", "=", "gen", "(", "batchsize", ",", "y", "=", "y_fake", ")", "\n", "x_fake", "=", "sampler", ".", "langevin", "(", "x_fake", ",", "y_fake", ",", "dis", ")", "\n", "", "elif", "args", ".", "sampling_space", "==", "'latent'", ":", "\n", "            ", "x_fake", ",", "_", "=", "latent_sampler", ".", "langevin", "(", "batchsize", ",", "gen", ",", "dis", ",", "y_fake", "=", "y_fake", ")", "\n", "\n", "\n", "# Then, update energy critic", "\n", "", "for", "i", "in", "range", "(", "self", ".", "n_dis", ")", ":", "\n", "            ", "dis_real", "=", "dis", "(", "x_real", ",", "y", "=", "y_real", ")", "\n", "dis_fake", "=", "dis", "(", "x_fake", ",", "y", "=", "y_fake", ")", "\n", "x_fake", ".", "unchain_backward", "(", ")", "\n", "loss_dis", "=", "self", ".", "loss_dis", "(", "dis_fake", "=", "dis_fake", ",", "dis_real", "=", "dis_real", ")", "\n", "dis", ".", "cleargrads", "(", ")", "\n", "loss_dis", ".", "backward", "(", ")", "\n", "dis_optimizer", ".", "update", "(", ")", "\n", "chainer", ".", "reporter", ".", "report", "(", "{", "'loss_dis'", ":", "loss_dis", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.updater.loss_dcgan_dis": [[13, 18], ["chainer.mean", "chainer.mean", "chainer.softplus", "chainer.softplus"], "function", ["None"], ["def", "loss_dcgan_dis", "(", "dis_fake", ",", "dis_real", ")", ":", "\n", "    ", "L1", "=", "F", ".", "mean", "(", "F", ".", "softplus", "(", "-", "dis_real", ")", ")", "\n", "L2", "=", "F", ".", "mean", "(", "F", ".", "softplus", "(", "dis_fake", ")", ")", "\n", "loss", "=", "L1", "+", "L2", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.updater.loss_dcgan_gen": [[20, 23], ["chainer.mean", "chainer.softplus"], "function", ["None"], ["", "def", "loss_dcgan_gen", "(", "dis_fake", ")", ":", "\n", "    ", "loss", "=", "F", ".", "mean", "(", "F", ".", "softplus", "(", "-", "dis_fake", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.updater.loss_hinge_dis": [[26, 30], ["chainer.mean", "chainer.mean", "chainer.relu", "chainer.relu"], "function", ["None"], ["", "def", "loss_hinge_dis", "(", "dis_fake", ",", "dis_real", ")", ":", "\n", "    ", "loss", "=", "F", ".", "mean", "(", "F", ".", "relu", "(", "1.", "-", "dis_real", ")", ")", "\n", "loss", "+=", "F", ".", "mean", "(", "F", ".", "relu", "(", "1.", "+", "dis_fake", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.updater.loss_hinge_gen": [[32, 35], ["chainer.mean"], "function", ["None"], ["", "def", "loss_hinge_gen", "(", "dis_fake", ")", ":", "\n", "    ", "loss", "=", "-", "F", ".", "mean", "(", "dis_fake", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.langevin_z.langevin": [[10, 41], ["gen", "range", "source.miscs.random_samples.sample_continuous", "chainer.Variable", "chainer.Variable", "chainer.Variable.unchain_backward", "gen", "dis", "chainer.grad", "chainer.grad", "cupy.random.normal"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.miscs.random_samples.sample_continuous"], ["def", "langevin", "(", "batchsize", ",", "gen", ",", "dis", ",", "y_fake", ",", "eval", "=", "False", ",", "given_z", "=", "None", ")", ":", "\n", "    ", "if", "eval", ":", "\n", "        ", "Step_lr", "=", "args", ".", "eval_step_lr", "\n", "num_steps", "=", "args", ".", "eval_num_steps", "\n", "Noise_scale", "=", "args", ".", "eval_noise_scale", "\n", "", "else", ":", "\n", "        ", "Step_lr", "=", "args", ".", "step_lr", "\n", "num_steps", "=", "args", ".", "num_steps", "\n", "Noise_scale", "=", "args", ".", "noise_scale", "\n", "", "if", "given_z", "is", "None", ":", "\n", "        ", "z", "=", "sample_continuous", "(", "gen", ".", "dim_z", ",", "batchsize", ",", "distribution", "=", "gen", ".", "distribution", ",", "xp", "=", "gen", ".", "xp", ")", "\n", "z", "=", "chainer", ".", "Variable", "(", "z", ")", "\n", "", "else", ":", "\n", "        ", "z", "=", "given_z", "\n", "", "x_fake", "=", "gen", "(", "batchsize", ",", "z", "=", "z", ",", "y", "=", "y_fake", ")", "\n", "for", "step", "in", "range", "(", "num_steps", ")", ":", "\n", "        ", "energy", "=", "dis", "(", "x_fake", ",", "y", "=", "y_fake", ")", "*", "args", ".", "temperature", "\n", "z_grad", "=", "chainer", ".", "grad", "(", "outputs", "=", "[", "energy", "]", ",", "inputs", "=", "[", "z", "]", ")", "[", "0", "]", "\n", "# pdb.set_trace()", "\n", "if", "args", ".", "anealing", ":", "\n", "            ", "step_lr", "=", "Step_lr", "*", "0.1", "**", "(", "step", "//", "(", "num_steps", "/", "5", ")", ")", "\n", "noise_scale", "=", "Noise_scale", "*", "0.1", "**", "(", "step", "//", "(", "num_steps", "/", "5", ")", ")", "\n", "", "else", ":", "\n", "            ", "step_lr", "=", "Step_lr", "\n", "noise_scale", "=", "Noise_scale", "\n", "", "z_grad_noise", "=", "step_lr", "/", "2", "*", "z_grad", "+", "(", "step_lr", "**", "0.5", ")", "*", "cp", ".", "random", ".", "normal", "(", "size", "=", "z", ".", "shape", ",", "loc", "=", "0.0", ",", "scale", "=", "noise_scale", ")", "\n", "z", "=", "z", "+", "z_grad_noise", "\n", "z", ".", "unchain_backward", "(", ")", "\n", "x_fake", "=", "gen", "(", "batchsize", ",", "z", "=", "z", ",", "y", "=", "y_fake", ")", "\n", "", "return", "x_fake", ",", "z", "", "", ""]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.langevin.langevin": [[9, 13], ["range", "langevin.langevin_step"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.langevin.langevin_step"], ["def", "langevin", "(", "x_fake", ",", "y_fake", ",", "dis", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "args", ".", "num_steps", ")", ":", "\n", "        ", "x_fake", "=", "langevin_step", "(", "args", ",", "x_fake", ",", "y_fake", ",", "dis", ",", "steps", "=", "i", ",", "anealing", "=", "args", ".", "anealing", ")", "\n", "", "return", "x_fake", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.langevin.anealing_fn": [[15, 25], ["argparser.args.num_steps"], "function", ["None"], ["", "def", "anealing_fn", "(", "steps", ",", "total_steps", ")", ":", "\n", "    ", "ratio", "=", "1", "\n", "if", "steps", "/", "total_steps", "<", "1", "/", "3", ":", "\n", "        ", "return", "ratio", "*", "1", "\n", "", "elif", "steps", "/", "total_steps", "<", "2", "/", "3", ":", "\n", "        ", "return", "ratio", "*", "0.7", "\n", "", "else", ":", "\n", "        ", "return", "ratio", "*", "0.4", "\n", "", "ratio", "=", "(", "total_steps", "-", "steps", ")", "/", "total_steps", "\n", "return", "ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.langevin.langevin_step": [[26, 70], ["chainer.clip", "F.clip.unchain_backward", "cupy.random.normal", "dis", "chainer.grad", "chainer.grad", "print", "langevin.anealing_fn", "chainer.clip", "print", "print", "argparser.args"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.langevin.anealing_fn"], ["", "def", "langevin_step", "(", "args", ",", "x_fake", ",", "y_fake", ",", "dis", ",", "steps", "=", "None", ",", "anealing", "=", "False", ")", ":", "\n", "# 1 in scale is the \"Factor to rescale inputs from 0-1 box\"", "\n", "    ", "noise_scale", "=", "1.", "*", "args", ".", "noise_scale", "\n", "if", "steps", "is", "not", "None", "and", "anealing", ":", "\n", "        ", "noise_scale", "=", "1.", "*", "args", ".", "noise_scale", "*", "anealing_fn", "(", "steps", ",", "args", ".", "num_steps", ")", "\n", "", "x_fake", "=", "x_fake", "+", "cp", ".", "random", ".", "normal", "(", "size", "=", "x_fake", ".", "shape", ",", "\n", "loc", "=", "0.0", ",", "\n", "scale", "=", "noise_scale", ")", "\n", "\n", "energy_noise", "=", "dis", "(", "x_fake", ",", "y", "=", "y_fake", ")", "*", "args", ".", "temperature", "\n", "# x_fake.unchain_backward()", "\n", "x_grad", "=", "chainer", ".", "grad", "(", "outputs", "=", "[", "energy_noise", "]", ",", "inputs", "=", "[", "x_fake", "]", ")", "[", "0", "]", "\n", "\n", "lr", "=", "args", ".", "step_lr", "\n", "\n", "if", "args", ".", "proj_norm", "!=", "0.0", ":", "\n", "        ", "if", "args", ".", "proj_norm_type", "==", "'li'", ":", "\n", "            ", "x_grad", "=", "F", ".", "clip", "(", "x_grad", ",", "-", "args", ".", "proj_norm", ",", "args", ".", "proj_norm", ")", "\n", "", "elif", "args", ".", "proj_norm_type", "==", "'l2'", ":", "\n", "# x_grad = tf.clip_by_norm(x_grad, args.proj_norm)", "\n", "            ", "print", "(", "\"L2 type of projection are not supported!!!\"", ")", "\n", "assert", "False", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Other types of projection are not supported!!!\"", ")", "\n", "assert", "False", "\n", "\n", "# Clip gradient norm for now", "\n", "", "", "if", "args", ".", "hmc", ":", "\n", "        ", "print", "(", "\"HMC is not supported!!!\"", ")", "\n", "assert", "False", "\n", "# Step size should be tuned to get around 65% acceptance", "\n", "# def energy(x):", "\n", "#     return args.temperature * dis(x_fake, y=y_fake)", "\n", "#             # model.forward(x, weights[0], label=LABEL_SPLIT[j], reuse=True)", "\n", "# x_last = hmc(x_fake, 15., 10, energy)", "\n", "", "else", ":", "\n", "        ", "x_last", "=", "x_fake", "+", "lr", "*", "x_grad", "\n", "\n", "", "x_fake", "=", "x_last", "\n", "x_fake", "=", "F", ".", "clip", "(", "x_fake", ",", "-", "1.", ",", "1.", ")", "# 1\uff1a\"Factor to rescale inputs from 0-1 box\"", "\n", "\n", "x_fake", ".", "unchain_backward", "(", ")", "\n", "\n", "return", "x_fake", "\n", "", ""]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.train.create_result_dir": [[19, 36], ["train.create_result_dir.copy_to_result_dir", "argparser.args.config_path"], "function", ["None"], ["def", "create_result_dir", "(", "result_dir", ",", "config_path", ",", "config", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "result_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "result_dir", ")", "\n", "\n", "", "def", "copy_to_result_dir", "(", "fn", ",", "result_dir", ")", ":", "\n", "        ", "bfn", "=", "os", ".", "path", ".", "basename", "(", "fn", ")", "\n", "shutil", ".", "copy", "(", "fn", ",", "'{}/{}'", ".", "format", "(", "result_dir", ",", "bfn", ")", ")", "\n", "\n", "", "copy_to_result_dir", "(", "config_path", ",", "result_dir", ")", "\n", "copy_to_result_dir", "(", "\n", "config", ".", "models", "[", "'generator'", "]", "[", "'fn'", "]", ",", "result_dir", ")", "\n", "copy_to_result_dir", "(", "\n", "config", ".", "models", "[", "'discriminator'", "]", "[", "'fn'", "]", ",", "result_dir", ")", "\n", "copy_to_result_dir", "(", "\n", "config", ".", "dataset", "[", "'dataset_fn'", "]", ",", "result_dir", ")", "\n", "copy_to_result_dir", "(", "\n", "config", ".", "updater", "[", "'fn'", "]", ",", "result_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.train.load_models": [[38, 44], ["source.load_model", "source.load_model"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.source.yaml_utils.load_model", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.source.yaml_utils.load_model"], ["", "def", "load_models", "(", "config", ")", ":", "\n", "    ", "gen_conf", "=", "config", ".", "models", "[", "'generator'", "]", "\n", "gen", "=", "yaml_utils", ".", "load_model", "(", "gen_conf", "[", "'fn'", "]", ",", "gen_conf", "[", "'name'", "]", ",", "gen_conf", "[", "'args'", "]", ")", "\n", "dis_conf", "=", "config", ".", "models", "[", "'discriminator'", "]", "\n", "dis", "=", "yaml_utils", ".", "load_model", "(", "dis_conf", "[", "'fn'", "]", ",", "dis_conf", "[", "'name'", "]", ",", "dis_conf", "[", "'args'", "]", ")", "\n", "return", "gen", ",", "dis", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.train.make_optimizer": [[46, 50], ["chainer.optimizers.Adam", "chainer.optimizers.Adam.setup"], "function", ["None"], ["", "def", "make_optimizer", "(", "model", ",", "alpha", "=", "0.0002", ",", "beta1", "=", "0.", ",", "beta2", "=", "0.9", ")", ":", "\n", "    ", "optimizer", "=", "chainer", ".", "optimizers", ".", "Adam", "(", "alpha", "=", "alpha", ",", "beta1", "=", "beta1", ",", "beta2", "=", "beta2", ")", "\n", "optimizer", ".", "setup", "(", "model", ")", "\n", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.train.main": [[52, 125], ["source.Config", "chainer.cuda.get_device_from_id().use", "train.make_optimizer", "train.make_optimizer", "source.load_dataset", "chainer.iterators.MultiprocessIterator", "kwargs.update", "source.load_updater_class", "updater.", "train.create_result_dir", "chainer.training.Trainer", "training.Trainer.extend", "models.values", "training.Trainer.extend", "training.Trainer.extend", "training.Trainer.extend", "training.Trainer.extend", "training.Trainer.extend", "chainer.training.extensions.LinearShift", "chainer.training.extensions.LinearShift", "training.Trainer.extend", "training.Trainer.extend", "print", "training.Trainer.run", "yaml.load", "chainer.training.extensions.snapshot", "training.Trainer.extend", "chainer.training.extensions.LogReport", "chainer.training.extensions.PrintReport", "training.Trainer.extend", "training.Trainer.extend", "evaluation.sample_generate_light", "evaluation.calc_inception_and_FID", "chainer.training.extensions.ProgressBar", "print", "chainer.serializers.load_npz", "open", "chainer.cuda.get_device_from_id", "chainer.training.extensions.snapshot_object", "evaluation.sample_generate_conditional", "evaluation.sample_generate"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.train_mn.make_optimizer", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.train_mn.make_optimizer", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.source.yaml_utils.load_dataset", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.source.yaml_utils.load_updater_class", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.train_mn.create_result_dir", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.tflib.cifar10.load", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.evaluation.sample_generate_light", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.evaluation.calc_inception_and_FID", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.evaluation.sample_generate_conditional", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.evaluation.sample_generate"], ["", "def", "main", "(", ")", ":", "\n", "\n", "    ", "config", "=", "yaml_utils", ".", "Config", "(", "yaml", ".", "load", "(", "open", "(", "args", ".", "config_path", ")", ")", ")", "\n", "chainer", ".", "cuda", ".", "get_device_from_id", "(", "args", ".", "gpu", ")", ".", "use", "(", ")", "\n", "from", "model_loader", "import", "gen", ",", "dis", "\n", "\n", "models", "=", "{", "\"gen\"", ":", "gen", ",", "\"dis\"", ":", "dis", "}", "\n", "# Optimizer", "\n", "opt_gen", "=", "make_optimizer", "(", "\n", "gen", ",", "alpha", "=", "config", ".", "adam", "[", "'alpha'", "]", ",", "beta1", "=", "config", ".", "adam", "[", "'beta1'", "]", ",", "beta2", "=", "config", ".", "adam", "[", "'beta2'", "]", ")", "\n", "opt_dis", "=", "make_optimizer", "(", "\n", "dis", ",", "alpha", "=", "config", ".", "adam", "[", "'alpha'", "]", ",", "beta1", "=", "config", ".", "adam", "[", "'beta1'", "]", ",", "beta2", "=", "config", ".", "adam", "[", "'beta2'", "]", ")", "\n", "opts", "=", "{", "\"opt_gen\"", ":", "opt_gen", ",", "\"opt_dis\"", ":", "opt_dis", "}", "\n", "# Dataset", "\n", "# Cifar10 and STL10 dataset handler does not take \"root\" as argument.", "\n", "if", "config", "[", "'dataset'", "]", "[", "'dataset_name'", "]", "!=", "'CIFAR10Dataset'", "and", "config", "[", "'dataset'", "]", "[", "'dataset_name'", "]", "!=", "'STL10Dataset'", ":", "\n", "        ", "config", "[", "'dataset'", "]", "[", "'args'", "]", "[", "'root'", "]", "=", "args", ".", "data_dir", "\n", "", "dataset", "=", "yaml_utils", ".", "load_dataset", "(", "config", ")", "\n", "# Iterator", "\n", "iterator", "=", "chainer", ".", "iterators", ".", "MultiprocessIterator", "(", "\n", "dataset", ",", "config", ".", "batchsize", ",", "n_processes", "=", "args", ".", "loaderjob", ")", "\n", "kwargs", "=", "config", ".", "updater", "[", "'args'", "]", "if", "'args'", "in", "config", ".", "updater", "else", "{", "}", "\n", "kwargs", ".", "update", "(", "{", "\n", "'models'", ":", "models", ",", "\n", "'iterator'", ":", "iterator", ",", "\n", "'optimizer'", ":", "opts", ",", "\n", "}", ")", "\n", "updater", "=", "yaml_utils", ".", "load_updater_class", "(", "config", ")", "\n", "updater", "=", "updater", "(", "**", "kwargs", ")", "\n", "out", "=", "args", ".", "results_dir", "\n", "create_result_dir", "(", "out", ",", "args", ".", "config_path", ",", "config", ")", "\n", "trainer", "=", "training", ".", "Trainer", "(", "updater", ",", "(", "config", ".", "iteration", ",", "'iteration'", ")", ",", "out", "=", "out", ")", "\n", "report_keys", "=", "[", "\"loss_dis\"", ",", "\"loss_gen\"", ",", "\"inception_mean\"", ",", "\"inception_std\"", ",", "\"FID_mean\"", ",", "\"FID_std\"", "]", "\n", "# Set up logging", "\n", "trainer", ".", "extend", "(", "extensions", ".", "snapshot", "(", ")", ",", "trigger", "=", "(", "config", ".", "snapshot_interval", ",", "'iteration'", ")", ")", "\n", "for", "m", "in", "models", ".", "values", "(", ")", ":", "\n", "        ", "trainer", ".", "extend", "(", "extensions", ".", "snapshot_object", "(", "\n", "m", ",", "m", ".", "__class__", ".", "__name__", "+", "'_{.updater.iteration}.npz'", ")", ",", "trigger", "=", "(", "config", ".", "snapshot_interval", ",", "'iteration'", ")", ")", "\n", "", "trainer", ".", "extend", "(", "extensions", ".", "LogReport", "(", "keys", "=", "report_keys", ",", "\n", "trigger", "=", "(", "config", ".", "display_interval", ",", "'iteration'", ")", ")", ")", "\n", "trainer", ".", "extend", "(", "extensions", ".", "PrintReport", "(", "report_keys", ")", ",", "trigger", "=", "(", "config", ".", "display_interval", ",", "'iteration'", ")", ")", "\n", "if", "gen", ".", "n_classes", ">", "0", ":", "\n", "        ", "trainer", ".", "extend", "(", "sample_generate_conditional", "(", "gen", ",", "out", ",", "n_classes", "=", "gen", ".", "n_classes", ")", ",", "\n", "trigger", "=", "(", "config", ".", "evaluation_interval", ",", "'iteration'", ")", ",", "\n", "priority", "=", "extension", ".", "PRIORITY_WRITER", ")", "\n", "", "else", ":", "\n", "        ", "trainer", ".", "extend", "(", "sample_generate", "(", "gen", ",", "out", ")", ",", "\n", "trigger", "=", "(", "config", ".", "evaluation_interval", ",", "'iteration'", ")", ",", "\n", "priority", "=", "extension", ".", "PRIORITY_WRITER", ")", "\n", "", "trainer", ".", "extend", "(", "sample_generate_light", "(", "gen", ",", "out", ",", "rows", "=", "10", ",", "cols", "=", "10", ")", ",", "\n", "trigger", "=", "(", "config", ".", "evaluation_interval", "//", "10", ",", "'iteration'", ")", ",", "\n", "priority", "=", "extension", ".", "PRIORITY_WRITER", ")", "\n", "# trainer.extend(calc_inception(gen, n_ims=50000, dst=out, splits=10, path=args.inception_model_path),", "\n", "#                trigger=(config.evaluation_interval, 'iteration'),", "\n", "#                priority=extension.PRIORITY_WRITER)", "\n", "trainer", ".", "extend", "(", "calc_inception_and_FID", "(", "gen", ",", "n_ims", "=", "50000", ",", "dst", "=", "out", ",", "path", "=", "args", ".", "inception_model_path", ",", "splits", "=", "10", ",", "stat_file", "=", "args", ".", "FID_stat_file", ")", ",", "\n", "trigger", "=", "(", "config", ".", "evaluation_interval", ",", "'iteration'", ")", ",", "\n", "priority", "=", "extension", ".", "PRIORITY_WRITER", ")", "\n", "trainer", ".", "extend", "(", "extensions", ".", "ProgressBar", "(", "update_interval", "=", "config", ".", "progressbar_interval", ")", ")", "\n", "ext_opt_gen", "=", "extensions", ".", "LinearShift", "(", "'alpha'", ",", "(", "config", ".", "adam", "[", "'alpha'", "]", ",", "0.", ")", ",", "\n", "(", "config", ".", "iteration_decay_start", ",", "config", ".", "iteration", ")", ",", "opt_gen", ")", "\n", "ext_opt_dis", "=", "extensions", ".", "LinearShift", "(", "'alpha'", ",", "(", "config", ".", "adam", "[", "'alpha'", "]", ",", "0.", ")", ",", "\n", "(", "config", ".", "iteration_decay_start", ",", "config", ".", "iteration", ")", ",", "opt_dis", ")", "\n", "trainer", ".", "extend", "(", "ext_opt_gen", ")", "\n", "trainer", ".", "extend", "(", "ext_opt_dis", ")", "\n", "if", "args", ".", "snapshot", ":", "\n", "        ", "print", "(", "\"Resume training with snapshot:{}\"", ".", "format", "(", "args", ".", "snapshot", ")", ")", "\n", "chainer", ".", "serializers", ".", "load_npz", "(", "args", ".", "snapshot", ",", "trainer", ")", "\n", "\n", "# Run the training", "\n", "", "print", "(", "\"start training\"", ")", "\n", "trainer", ".", "run", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.train_mn.create_result_dir": [[19, 36], ["train_mn.create_result_dir.copy_to_result_dir"], "function", ["None"], ["def", "create_result_dir", "(", "result_dir", ",", "config_path", ",", "config", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "result_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "result_dir", ")", "\n", "\n", "", "def", "copy_to_result_dir", "(", "fn", ",", "result_dir", ")", ":", "\n", "        ", "bfn", "=", "os", ".", "path", ".", "basename", "(", "fn", ")", "\n", "shutil", ".", "copy", "(", "fn", ",", "'{}/{}'", ".", "format", "(", "result_dir", ",", "bfn", ")", ")", "\n", "\n", "", "copy_to_result_dir", "(", "config_path", ",", "result_dir", ")", "\n", "copy_to_result_dir", "(", "\n", "config", ".", "models", "[", "'generator'", "]", "[", "'fn'", "]", ",", "result_dir", ")", "\n", "copy_to_result_dir", "(", "\n", "config", ".", "models", "[", "'discriminator'", "]", "[", "'fn'", "]", ",", "result_dir", ")", "\n", "copy_to_result_dir", "(", "\n", "config", ".", "dataset", "[", "'dataset_fn'", "]", ",", "result_dir", ")", "\n", "copy_to_result_dir", "(", "\n", "config", ".", "updater", "[", "'fn'", "]", ",", "result_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.train_mn.load_models": [[38, 44], ["source.load_model", "source.load_model"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.source.yaml_utils.load_model", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.source.yaml_utils.load_model"], ["", "def", "load_models", "(", "config", ")", ":", "\n", "    ", "gen_conf", "=", "config", ".", "models", "[", "'generator'", "]", "\n", "gen", "=", "yaml_utils", ".", "load_model", "(", "gen_conf", "[", "'fn'", "]", ",", "gen_conf", "[", "'name'", "]", ",", "gen_conf", "[", "'args'", "]", ")", "\n", "dis_conf", "=", "config", ".", "models", "[", "'discriminator'", "]", "\n", "dis", "=", "yaml_utils", ".", "load_model", "(", "dis_conf", "[", "'fn'", "]", ",", "dis_conf", "[", "'name'", "]", ",", "dis_conf", "[", "'args'", "]", ")", "\n", "return", "gen", ",", "dis", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.train_mn.make_optimizer": [[46, 51], ["chainermn.create_multi_node_optimizer", "chainermn.create_multi_node_optimizer.setup", "chainer.optimizers.Adam"], "function", ["None"], ["", "def", "make_optimizer", "(", "model", ",", "comm", ",", "alpha", "=", "0.0002", ",", "beta1", "=", "0.", ",", "beta2", "=", "0.9", ")", ":", "\n", "    ", "optimizer", "=", "chainermn", ".", "create_multi_node_optimizer", "(", "\n", "chainer", ".", "optimizers", ".", "Adam", "(", "alpha", "=", "alpha", ",", "beta1", "=", "beta1", ",", "beta2", "=", "beta2", ")", ",", "comm", ")", "\n", "optimizer", ".", "setup", "(", "model", ")", "\n", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.train_mn.main": [[53, 154], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "source.Config", "chainermn.create_communicator", "chainer.cuda.get_device_from_id().use", "print", "multiprocessing.set_start_method", "train_mn.load_models", "gen.to_gpu", "dis.to_gpu", "train_mn.make_optimizer", "train_mn.make_optimizer", "chainermn.scatter_dataset", "chainer.iterators.MultiprocessIterator", "kwargs.update", "source.load_updater_class", "updater.", "chainer.training.Trainer", "chainer.training.extensions.LinearShift", "chainer.training.extensions.LinearShift", "training.Trainer.extend", "training.Trainer.extend", "print", "training.Trainer.run", "yaml.load", "print", "print", "print", "source.load_dataset", "source.load_dataset", "train_mn.create_result_dir", "training.Trainer.extend", "models.values", "training.Trainer.extend", "training.Trainer.extend", "training.Trainer.extend", "training.Trainer.extend", "training.Trainer.extend", "print", "chainer.serializers.load_npz", "open", "chainer.cuda.get_device_from_id", "chainer.training.extensions.snapshot", "training.Trainer.extend", "chainer.training.extensions.LogReport", "chainer.training.extensions.PrintReport", "training.Trainer.extend", "training.Trainer.extend", "evaluation.sample_generate_light", "evaluation.calc_inception", "chainer.training.extensions.ProgressBar", "chainer.training.extensions.snapshot_object", "evaluation.sample_generate_conditional", "evaluation.sample_generate"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.parse_args", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.evaluations.calc_intra_FID.load_models", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.train_mn.make_optimizer", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.train_mn.make_optimizer", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.source.yaml_utils.load_updater_class", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.tflib.cifar10.load", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.source.yaml_utils.load_dataset", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.source.yaml_utils.load_dataset", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.train_mn.create_result_dir", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.evaluation.sample_generate_light", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.evaluation.calc_inception", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.evaluation.sample_generate_conditional", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.evaluation.sample_generate"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--config_path'", ",", "type", "=", "str", ",", "default", "=", "'configs/base.yml'", ",", "help", "=", "'path to config file'", ")", "\n", "parser", ".", "add_argument", "(", "'--data_dir'", ",", "type", "=", "str", ",", "default", "=", "'./data/imagenet'", ")", "\n", "parser", ".", "add_argument", "(", "'--results_dir'", ",", "type", "=", "str", ",", "default", "=", "'./results/gans'", ",", "\n", "help", "=", "'directory to save the results to'", ")", "\n", "parser", ".", "add_argument", "(", "'--inception_model_path'", ",", "type", "=", "str", ",", "default", "=", "'./datasets/inception_model'", ",", "\n", "help", "=", "'path to the inception model'", ")", "\n", "parser", ".", "add_argument", "(", "'--snapshot'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "\n", "help", "=", "'path to the snapshot'", ")", "\n", "parser", ".", "add_argument", "(", "'--loaderjob'", ",", "type", "=", "int", ",", "\n", "help", "=", "'number of parallel data loading processes'", ")", "\n", "parser", ".", "add_argument", "(", "'--communicator'", ",", "type", "=", "str", ",", "\n", "default", "=", "'hierarchical'", ",", "help", "=", "'Type of communicator'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "config", "=", "yaml_utils", ".", "Config", "(", "yaml", ".", "load", "(", "open", "(", "args", ".", "config_path", ")", ")", ")", "\n", "comm", "=", "chainermn", ".", "create_communicator", "(", "args", ".", "communicator", ")", "\n", "device", "=", "comm", ".", "intra_rank", "\n", "chainer", ".", "cuda", ".", "get_device_from_id", "(", "device", ")", ".", "use", "(", ")", "\n", "print", "(", "\"init\"", ")", "\n", "multiprocessing", ".", "set_start_method", "(", "'forkserver'", ")", "\n", "if", "comm", ".", "rank", "==", "0", ":", "\n", "        ", "print", "(", "'=========================================='", ")", "\n", "print", "(", "'Using {} communicator'", ".", "format", "(", "args", ".", "communicator", ")", ")", "\n", "print", "(", "'=========================================='", ")", "\n", "# Model", "\n", "", "gen", ",", "dis", "=", "load_models", "(", "config", ")", "\n", "gen", ".", "to_gpu", "(", ")", "\n", "dis", ".", "to_gpu", "(", ")", "\n", "models", "=", "{", "\"gen\"", ":", "gen", ",", "\"dis\"", ":", "dis", "}", "\n", "# Optimizer", "\n", "opt_gen", "=", "make_optimizer", "(", "gen", ",", "comm", ",", "\n", "alpha", "=", "config", ".", "adam", "[", "'alpha'", "]", ",", "beta1", "=", "config", ".", "adam", "[", "'beta1'", "]", ",", "beta2", "=", "config", ".", "adam", "[", "'beta2'", "]", ")", "\n", "opt_dis", "=", "make_optimizer", "(", "dis", ",", "comm", ",", "\n", "alpha", "=", "config", ".", "adam", "[", "'alpha'", "]", ",", "beta1", "=", "config", ".", "adam", "[", "'beta1'", "]", ",", "beta2", "=", "config", ".", "adam", "[", "'beta2'", "]", ")", "\n", "opts", "=", "{", "\"opt_gen\"", ":", "opt_gen", ",", "\"opt_dis\"", ":", "opt_dis", "}", "\n", "# Dataset", "\n", "if", "config", "[", "'dataset'", "]", "[", "\n", "'dataset_name'", "]", "!=", "'CIFAR10Dataset'", ":", "# Cifar10 dataset handler does not take \"root\" as argument.", "\n", "        ", "config", "[", "'dataset'", "]", "[", "'args'", "]", "[", "'root'", "]", "=", "args", ".", "data_dir", "\n", "", "if", "comm", ".", "rank", "==", "0", ":", "\n", "        ", "dataset", "=", "yaml_utils", ".", "load_dataset", "(", "config", ")", "\n", "", "else", ":", "\n", "        ", "_", "=", "yaml_utils", ".", "load_dataset", "(", "config", ")", "# Dummy, for adding path to the dataset module", "\n", "dataset", "=", "None", "\n", "", "dataset", "=", "chainermn", ".", "scatter_dataset", "(", "dataset", ",", "comm", ")", "\n", "# Iterator", "\n", "iterator", "=", "chainer", ".", "iterators", ".", "MultiprocessIterator", "(", "dataset", ",", "config", ".", "batchsize", ",", "\n", "n_processes", "=", "args", ".", "loaderjob", ")", "\n", "kwargs", "=", "config", ".", "updater", "[", "'args'", "]", "if", "'args'", "in", "config", ".", "updater", "else", "{", "}", "\n", "kwargs", ".", "update", "(", "{", "\n", "'models'", ":", "models", ",", "\n", "'iterator'", ":", "iterator", ",", "\n", "'optimizer'", ":", "opts", ",", "\n", "'device'", ":", "device", ",", "\n", "}", ")", "\n", "updater", "=", "yaml_utils", ".", "load_updater_class", "(", "config", ")", "\n", "updater", "=", "updater", "(", "**", "kwargs", ")", "\n", "out", "=", "args", ".", "results_dir", "\n", "if", "comm", ".", "rank", "==", "0", ":", "\n", "        ", "create_result_dir", "(", "out", ",", "args", ".", "config_path", ",", "config", ")", "\n", "", "trainer", "=", "training", ".", "Trainer", "(", "updater", ",", "(", "config", ".", "iteration", ",", "'iteration'", ")", ",", "out", "=", "out", ")", "\n", "report_keys", "=", "[", "\"loss_dis\"", ",", "\"loss_gen\"", ",", "\"inception_mean\"", ",", "\"inception_std\"", "]", "\n", "if", "comm", ".", "rank", "==", "0", ":", "\n", "# Set up logging", "\n", "        ", "trainer", ".", "extend", "(", "extensions", ".", "snapshot", "(", ")", ",", "trigger", "=", "(", "config", ".", "snapshot_interval", ",", "'iteration'", ")", ")", "\n", "for", "m", "in", "models", ".", "values", "(", ")", ":", "\n", "            ", "trainer", ".", "extend", "(", "extensions", ".", "snapshot_object", "(", "\n", "m", ",", "m", ".", "__class__", ".", "__name__", "+", "'_{.updater.iteration}.npz'", ")", ",", "trigger", "=", "(", "config", ".", "snapshot_interval", ",", "'iteration'", ")", ")", "\n", "", "trainer", ".", "extend", "(", "extensions", ".", "LogReport", "(", "keys", "=", "report_keys", ",", "\n", "trigger", "=", "(", "config", ".", "display_interval", ",", "'iteration'", ")", ")", ")", "\n", "trainer", ".", "extend", "(", "extensions", ".", "PrintReport", "(", "report_keys", ")", ",", "trigger", "=", "(", "config", ".", "display_interval", ",", "'iteration'", ")", ")", "\n", "if", "gen", ".", "n_classes", ">", "0", ":", "\n", "            ", "trainer", ".", "extend", "(", "sample_generate_conditional", "(", "gen", ",", "out", ",", "n_classes", "=", "gen", ".", "n_classes", ")", ",", "\n", "trigger", "=", "(", "config", ".", "evaluation_interval", ",", "'iteration'", ")", ",", "\n", "priority", "=", "extension", ".", "PRIORITY_WRITER", ")", "\n", "", "else", ":", "\n", "            ", "trainer", ".", "extend", "(", "sample_generate", "(", "gen", ",", "out", ")", ",", "\n", "trigger", "=", "(", "config", ".", "evaluation_interval", ",", "'iteration'", ")", ",", "\n", "priority", "=", "extension", ".", "PRIORITY_WRITER", ")", "\n", "", "trainer", ".", "extend", "(", "sample_generate_light", "(", "gen", ",", "out", ",", "rows", "=", "10", ",", "cols", "=", "10", ")", ",", "\n", "trigger", "=", "(", "config", ".", "evaluation_interval", "//", "10", ",", "'iteration'", ")", ",", "\n", "priority", "=", "extension", ".", "PRIORITY_WRITER", ")", "\n", "trainer", ".", "extend", "(", "calc_inception", "(", "gen", ",", "n_ims", "=", "5000", ",", "splits", "=", "1", ",", "path", "=", "args", ".", "inception_model_path", ")", ",", "\n", "trigger", "=", "(", "config", ".", "evaluation_interval", ",", "'iteration'", ")", ",", "\n", "priority", "=", "extension", ".", "PRIORITY_WRITER", ")", "\n", "trainer", ".", "extend", "(", "extensions", ".", "ProgressBar", "(", "update_interval", "=", "config", ".", "progressbar_interval", ")", ")", "\n", "", "ext_opt_gen", "=", "extensions", ".", "LinearShift", "(", "'alpha'", ",", "(", "config", ".", "adam", "[", "'alpha'", "]", ",", "0.", ")", ",", "\n", "(", "config", ".", "iteration_decay_start", ",", "config", ".", "iteration", ")", ",", "opt_gen", ")", "\n", "ext_opt_dis", "=", "extensions", ".", "LinearShift", "(", "'alpha'", ",", "(", "config", ".", "adam", "[", "'alpha'", "]", ",", "0.", ")", ",", "\n", "(", "config", ".", "iteration_decay_start", ",", "config", ".", "iteration", ")", ",", "opt_dis", ")", "\n", "trainer", ".", "extend", "(", "ext_opt_gen", ")", "\n", "trainer", ".", "extend", "(", "ext_opt_dis", ")", "\n", "if", "args", ".", "snapshot", ":", "\n", "        ", "print", "(", "\"Resume training with snapshot:{}\"", ".", "format", "(", "args", ".", "snapshot", ")", ")", "\n", "chainer", ".", "serializers", ".", "load_npz", "(", "args", ".", "snapshot", ",", "trainer", ")", "\n", "\n", "# Run the training", "\n", "", "print", "(", "\"start training\"", ")", "\n", "trainer", ".", "run", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.evaluation.gen_images": [[35, 64], ["range", "numpy.asarray", "ims.reshape.reshape", "source.Config", "chainer.cuda.to_cpu", "chainer.cuda.to_cpu", "chainer.cuda.to_cpu", "numpy.asarray", "ims.reshape.append", "print", "yaml.load", "source.miscs.random_samples.sample_categorical", "langevin.langevin", "numpy.clip", "open", "chainer.using_config", "chainer.using_config", "chainer.using_config", "chainer.using_config", "chainer.using_config", "chainer.using_config", "gen", "langevin_z.langevin", "str"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.tflib.cifar10.load", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.miscs.random_samples.sample_categorical", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.langevin.langevin", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.langevin.langevin"], ["def", "gen_images", "(", "gen", ",", "n", "=", "50000", ",", "batchsize", "=", "100", ")", ":", "\n", "    ", "ims", "=", "[", "]", "\n", "xp", "=", "gen", ".", "xp", "\n", "# start_time = time.time()", "\n", "# print('Start!')", "\n", "for", "i", "in", "range", "(", "0", ",", "n", ",", "batchsize", ")", ":", "\n", "        ", "if", "i", "%", "2500", "==", "2500", "-", "batchsize", ":", "\n", "            ", "print", "(", "str", "(", "i", ")", "+", "\" generated\"", ")", "\n", "", "config", "=", "yaml_utils", ".", "Config", "(", "yaml", ".", "load", "(", "open", "(", "args", ".", "config_path", ")", ")", ")", "\n", "is_conditional", "=", "config", ".", "updater", "[", "'args'", "]", "[", "'conditional'", "]", "\n", "if", "is_conditional", ":", "\n", "            ", "y", "=", "sample_categorical", "(", "gen", ".", "n_classes", ",", "batchsize", ",", "xp", "=", "gen", ".", "xp", ")", "\n", "", "else", ":", "\n", "            ", "y", "=", "None", "\n", "", "if", "args", ".", "sampling_space", "==", "'pixel'", ":", "\n", "            ", "with", "chainer", ".", "using_config", "(", "'train'", ",", "False", ")", ",", "chainer", ".", "using_config", "(", "'enable_backprop'", ",", "False", ")", ":", "\n", "                ", "x", "=", "gen", "(", "batchsize", ",", "y", "=", "y", ")", "\n", "", "x", "=", "sampler", ".", "langevin", "(", "x", ",", "y", ",", "dis", ")", "\n", "", "elif", "args", ".", "sampling_space", "==", "'latent'", ":", "\n", "            ", "x", ",", "_", "=", "latent_sampler", ".", "langevin", "(", "batchsize", ",", "gen", ",", "dis", ",", "y_fake", "=", "y", ",", "eval", "=", "True", ")", "\n", "", "x", "=", "chainer", ".", "cuda", ".", "to_cpu", "(", "x", ".", "data", ")", "\n", "x", "=", "np", ".", "asarray", "(", "np", ".", "clip", "(", "x", "*", "127.5", "+", "127.5", ",", "0.0", ",", "255.0", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "ims", ".", "append", "(", "x", ")", "\n", "", "ims", "=", "np", ".", "asarray", "(", "ims", ")", "\n", "_", ",", "_", ",", "_", ",", "h", ",", "w", "=", "ims", ".", "shape", "\n", "ims", "=", "ims", ".", "reshape", "(", "(", "n", ",", "3", ",", "h", ",", "w", ")", ")", "\n", "# stop_time = time.time()", "\n", "# print('Stop! Time: '+str(stop_time-start_time))", "\n", "return", "ims", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.evaluation.gen_images_with_condition": [[66, 80], ["range", "numpy.asarray", "ims.reshape.reshape", "chainer.cuda.to_cpu", "chainer.cuda.to_cpu", "chainer.cuda.to_cpu", "numpy.asarray", "ims.reshape.append", "chainer.using_config", "chainer.using_config", "chainer.using_config", "chainer.using_config", "chainer.using_config", "chainer.using_config", "xp.asarray", "gen", "numpy.clip"], "function", ["None"], ["", "def", "gen_images_with_condition", "(", "gen", ",", "c", "=", "0", ",", "n", "=", "500", ",", "batchsize", "=", "100", ")", ":", "\n", "    ", "ims", "=", "[", "]", "\n", "xp", "=", "gen", ".", "xp", "\n", "for", "i", "in", "range", "(", "0", ",", "n", ",", "batchsize", ")", ":", "\n", "        ", "with", "chainer", ".", "using_config", "(", "'train'", ",", "False", ")", ",", "chainer", ".", "using_config", "(", "'enable_backprop'", ",", "False", ")", ":", "\n", "            ", "y", "=", "xp", ".", "asarray", "(", "[", "c", "]", "*", "batchsize", ",", "dtype", "=", "xp", ".", "int32", ")", "\n", "x", "=", "gen", "(", "batchsize", ",", "y", "=", "y", ")", "\n", "", "x", "=", "chainer", ".", "cuda", ".", "to_cpu", "(", "x", ".", "data", ")", "\n", "x", "=", "np", ".", "asarray", "(", "np", ".", "clip", "(", "x", "*", "127.5", "+", "127.5", ",", "0.0", ",", "255.0", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "ims", ".", "append", "(", "x", ")", "\n", "", "ims", "=", "np", ".", "asarray", "(", "ims", ")", "\n", "_", ",", "_", ",", "_", ",", "h", ",", "w", "=", "ims", ".", "shape", "\n", "ims", "=", "ims", ".", "reshape", "(", "(", "n", ",", "3", ",", "h", ",", "w", ")", ")", "\n", "return", "ims", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.evaluation.gen_eval_images": [[81, 122], ["xp.random.seed", "range", "list", "numpy.asarray", "ims.reshape.reshape", "print", "source.Config", "map", "yaml.load", "source.miscs.random_samples.sample_categorical", "range", "zip", "open", "chainer.using_config", "chainer.using_config", "chainer.using_config", "chainer.using_config", "chainer.using_config", "chainer.using_config", "gen", "langevin.langevin", "chainer.cuda.to_cpu", "chainer.cuda.to_cpu", "chainer.cuda.to_cpu", "numpy.asarray", "ims.reshape.append", "chainer.Variable", "gen", "chainer.cuda.to_cpu", "chainer.cuda.to_cpu", "chainer.cuda.to_cpu", "numpy.asarray", "ims.reshape.append", "range", "numpy.clip", "source.miscs.random_samples.sample_continuous", "numpy.clip", "langevin_z.langevin", "chainer.cuda.to_cpu", "chainer.cuda.to_cpu", "chainer.cuda.to_cpu", "numpy.asarray", "ims.reshape.append", "numpy.clip"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.tflib.cifar10.load", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.miscs.random_samples.sample_categorical", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.langevin.langevin", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.miscs.random_samples.sample_continuous", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.langevin.langevin"], ["", "def", "gen_eval_images", "(", "gen", ",", "n", "=", "50000", ",", "batchsize", "=", "100", ",", "seeds", "=", "1234", ",", "langevin_steps", "=", "5", ")", ":", "\n", "    ", "'''\n    langevin_steps: column\n    '''", "\n", "ims", "=", "[", "]", "\n", "xp", "=", "gen", ".", "xp", "\n", "xp", ".", "random", ".", "seed", "(", "seeds", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "n", ",", "batchsize", ")", ":", "\n", "        ", "print", "(", "i", ")", "\n", "config", "=", "yaml_utils", ".", "Config", "(", "yaml", ".", "load", "(", "open", "(", "args", ".", "config_path", ")", ")", ")", "\n", "is_conditional", "=", "config", ".", "updater", "[", "'args'", "]", "[", "'conditional'", "]", "\n", "if", "is_conditional", ":", "\n", "            ", "y", "=", "sample_categorical", "(", "gen", ".", "n_classes", ",", "batchsize", ",", "xp", "=", "gen", ".", "xp", ")", "\n", "", "else", ":", "\n", "            ", "y", "=", "None", "\n", "", "if", "args", ".", "sampling_space", "==", "'pixel'", ":", "\n", "            ", "with", "chainer", ".", "using_config", "(", "'train'", ",", "False", ")", ",", "chainer", ".", "using_config", "(", "'enable_backprop'", ",", "False", ")", ":", "\n", "                ", "x", "=", "gen", "(", "batchsize", ",", "y", "=", "y", ")", "\n", "", "for", "j", "in", "range", "(", "langevin_steps", ")", ":", "\n", "                ", "x", "=", "sampler", ".", "langevin", "(", "x", ",", "y", ",", "dis", ")", "\n", "nx", "=", "chainer", ".", "cuda", ".", "to_cpu", "(", "x", ".", "data", ")", "\n", "nx", "=", "np", ".", "asarray", "(", "np", ".", "clip", "(", "nx", "*", "127.5", "+", "127.5", ",", "0.0", ",", "255.0", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "ims", ".", "append", "(", "nx", ")", "\n", "", "", "elif", "args", ".", "sampling_space", "==", "'latent'", ":", "\n", "            ", "z", "=", "Variable", "(", "sample_continuous", "(", "gen", ".", "dim_z", ",", "batchsize", ",", "distribution", "=", "gen", ".", "distribution", ",", "xp", "=", "gen", ".", "xp", ")", ")", "\n", "x", "=", "gen", "(", "batchsize", ",", "y", "=", "y", ",", "z", "=", "z", ")", "\n", "nx", "=", "chainer", ".", "cuda", ".", "to_cpu", "(", "x", ".", "data", ")", "\n", "nx", "=", "np", ".", "asarray", "(", "np", ".", "clip", "(", "nx", "*", "127.5", "+", "127.5", ",", "0.0", ",", "255.0", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "ims", ".", "append", "(", "nx", ")", "\n", "for", "j", "in", "range", "(", "langevin_steps", ")", ":", "\n", "                ", "x", ",", "z", "=", "latent_sampler", ".", "langevin", "(", "batchsize", ",", "gen", ",", "dis", ",", "y_fake", "=", "y", ",", "eval", "=", "True", ",", "given_z", "=", "z", ")", "\n", "nx", "=", "chainer", ".", "cuda", ".", "to_cpu", "(", "x", ".", "data", ")", "\n", "nx", "=", "np", ".", "asarray", "(", "np", ".", "clip", "(", "nx", "*", "127.5", "+", "127.5", ",", "0.0", ",", "255.0", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "ims", ".", "append", "(", "nx", ")", "\n", "", "", "", "ims", "=", "list", "(", "map", "(", "list", ",", "zip", "(", "*", "ims", ")", ")", ")", "\n", "ims", "=", "np", ".", "asarray", "(", "ims", ")", "\n", "_", ",", "_", ",", "_", ",", "h", ",", "w", "=", "ims", ".", "shape", "\n", "if", "args", ".", "sampling_space", "==", "'latent'", ":", "\n", "        ", "langevin_steps", "+=", "1", "\n", "", "ims", "=", "ims", ".", "reshape", "(", "(", "n", "*", "langevin_steps", ",", "3", ",", "h", ",", "w", ")", ")", "\n", "return", "ims", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.evaluation.sample_generate_light": [[124, 141], ["chainer.training.make_extension", "chainer.training.make_extension", "chainer.training.make_extension", "numpy.random.seed", "evaluation.gen_images", "x.reshape.reshape", "x.reshape.transpose", "x.reshape.reshape", "PIL.Image.fromarray().save", "os.path.exists", "os.makedirs", "PIL.Image.fromarray"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.evaluation.gen_images"], ["", "def", "sample_generate_light", "(", "gen", ",", "dst", ",", "rows", "=", "5", ",", "cols", "=", "5", ",", "seed", "=", "0", ")", ":", "\n", "    ", "@", "chainer", ".", "training", ".", "make_extension", "(", ")", "\n", "def", "make_image", "(", "trainer", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "n_images", "=", "rows", "*", "cols", "\n", "x", "=", "gen_images", "(", "gen", ",", "n_images", ",", "batchsize", "=", "n_images", ")", "\n", "_", ",", "_", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "reshape", "(", "(", "rows", ",", "cols", ",", "3", ",", "H", ",", "W", ")", ")", "\n", "x", "=", "x", ".", "transpose", "(", "0", ",", "3", ",", "1", ",", "4", ",", "2", ")", "\n", "x", "=", "x", ".", "reshape", "(", "(", "rows", "*", "H", ",", "cols", "*", "W", ",", "3", ")", ")", "\n", "preview_dir", "=", "'{}/preview'", ".", "format", "(", "dst", ")", "\n", "preview_path", "=", "preview_dir", "+", "'/image_latest.png'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "preview_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "preview_dir", ")", "\n", "", "Image", ".", "fromarray", "(", "x", ")", ".", "save", "(", "preview_path", ")", "\n", "\n", "", "return", "make_image", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.evaluation.sample_generate": [[143, 161], ["chainer.training.make_extension", "chainer.training.make_extension", "chainer.training.make_extension", "numpy.random.seed", "evaluation.gen_images", "x.reshape.reshape", "x.reshape.transpose", "x.reshape.reshape", "PIL.Image.fromarray().save", "os.path.exists", "os.makedirs", "PIL.Image.fromarray"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.evaluation.gen_images"], ["", "def", "sample_generate", "(", "gen", ",", "dst", ",", "rows", "=", "10", ",", "cols", "=", "10", ",", "seed", "=", "0", ")", ":", "\n", "    ", "\"\"\"Visualization of rows*cols images randomly generated by the generator.\"\"\"", "\n", "@", "chainer", ".", "training", ".", "make_extension", "(", ")", "\n", "def", "make_image", "(", "trainer", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "n_images", "=", "rows", "*", "cols", "\n", "x", "=", "gen_images", "(", "gen", ",", "n_images", ",", "batchsize", "=", "n_images", ")", "\n", "_", ",", "_", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "reshape", "(", "(", "rows", ",", "cols", ",", "3", ",", "h", ",", "w", ")", ")", "\n", "x", "=", "x", ".", "transpose", "(", "0", ",", "3", ",", "1", ",", "4", ",", "2", ")", "\n", "x", "=", "x", ".", "reshape", "(", "(", "rows", "*", "h", ",", "cols", "*", "w", ",", "3", ")", ")", "\n", "preview_dir", "=", "'{}/preview'", ".", "format", "(", "dst", ")", "\n", "preview_path", "=", "preview_dir", "+", "'/image{:0>8}.png'", ".", "format", "(", "trainer", ".", "updater", ".", "iteration", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "preview_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "preview_dir", ")", "\n", "", "Image", ".", "fromarray", "(", "x", ")", ".", "save", "(", "preview_path", ")", "\n", "\n", "", "return", "make_image", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.evaluation.sample_generate_conditional": [[163, 189], ["numpy.asarray", "chainer.training.make_extension", "chainer.training.make_extension", "chainer.training.make_extension", "numpy.random.seed", "np.concatenate.reshape", "np.concatenate.transpose", "np.concatenate.reshape", "PIL.Image.fromarray().save", "numpy.arange", "chainer.using_config", "chainer.using_config", "chainer.using_config", "chainer.using_config", "chainer.using_config", "chainer.using_config", "numpy.concatenate", "os.path.exists", "os.makedirs", "np.concatenate.append", "len", "PIL.Image.fromarray", "evaluation.gen_images_with_condition", "len"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.evaluation.gen_images_with_condition"], ["", "def", "sample_generate_conditional", "(", "gen", ",", "dst", ",", "rows", "=", "10", ",", "cols", "=", "10", ",", "n_classes", "=", "1000", ",", "seed", "=", "0", ")", ":", "\n", "    ", "\"\"\"Visualization of rows*cols images randomly generated by the generator.\"\"\"", "\n", "classes", "=", "np", ".", "asarray", "(", "np", ".", "arange", "(", "cols", ")", "*", "(", "n_classes", "/", "cols", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "@", "chainer", ".", "training", ".", "make_extension", "(", ")", "\n", "def", "make_image", "(", "trainer", "=", "None", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "xp", "=", "gen", ".", "xp", "\n", "with", "chainer", ".", "using_config", "(", "'train'", ",", "False", ")", ",", "chainer", ".", "using_config", "(", "'enable_backprop'", ",", "False", ")", ":", "\n", "            ", "x", "=", "[", "]", "\n", "for", "c", "in", "classes", ":", "\n", "                ", "x", ".", "append", "(", "gen_images_with_condition", "(", "gen", ",", "c", "=", "c", ",", "n", "=", "rows", ",", "batchsize", "=", "rows", ")", ")", "\n", "", "x", "=", "np", ".", "concatenate", "(", "x", ",", "0", ")", "\n", "", "_", ",", "_", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "reshape", "(", "(", "rows", ",", "len", "(", "classes", ")", ",", "3", ",", "h", ",", "w", ")", ")", "\n", "x", "=", "x", ".", "transpose", "(", "0", ",", "3", ",", "1", ",", "4", ",", "2", ")", "\n", "x", "=", "x", ".", "reshape", "(", "(", "rows", "*", "h", ",", "len", "(", "classes", ")", "*", "w", ",", "3", ")", ")", "\n", "\n", "preview_dir", "=", "'{}/preview'", ".", "format", "(", "dst", ")", "\n", "preview_path", "=", "preview_dir", "+", "'/image{:0>8}.png'", ".", "format", "(", "\n", "trainer", ".", "updater", ".", "iteration", "if", "trainer", "is", "not", "None", "else", "None", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "preview_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "preview_dir", ")", "\n", "", "Image", ".", "fromarray", "(", "x", ")", ".", "save", "(", "preview_path", ")", "\n", "\n", "", "return", "make_image", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.evaluation.load_inception_model": [[191, 197], ["source.inception.inception_score.Inception", "chainer.serializers.load_hdf5", "source.inception.inception_score.Inception.to_gpu", "os.path.dirname"], "function", ["None"], ["", "def", "load_inception_model", "(", "path", "=", "None", ")", ":", "\n", "    ", "path", "=", "path", "if", "path", "is", "not", "None", "else", "\"%s/inception/inception_score.model\"", "%", "os", ".", "path", ".", "dirname", "(", "__file__", ")", "\n", "model", "=", "Inception", "(", ")", "\n", "serializers", ".", "load_hdf5", "(", "path", ",", "model", ")", "\n", "model", ".", "to_gpu", "(", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.evaluation.calc_inception": [[199, 219], ["chainer.training.make_extension", "chainer.training.make_extension", "chainer.training.make_extension", "evaluation.load_inception_model", "gen_images().astype", "source.get_inception_score", "chainer.reporter.report", "chainer.reporter.report", "chainer.reporter.report", "numpy.savetxt", "evaluation.gen_images", "os.path.exists", "os.makedirs", "numpy.array", "max"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.evaluation.load_inception_model", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.tflib.inception_score.get_inception_score", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.evaluation.gen_images"], ["", "def", "calc_inception", "(", "gen", ",", "batchsize", "=", "100", ",", "dst", "=", "None", ",", "path", "=", "None", ",", "n_ims", "=", "50000", ",", "splits", "=", "10", ")", ":", "\n", "    ", "@", "chainer", ".", "training", ".", "make_extension", "(", ")", "\n", "def", "evaluation", "(", "trainer", "=", "None", ")", ":", "\n", "        ", "model", "=", "load_inception_model", "(", "path", ")", "\n", "ims", "=", "gen_images", "(", "gen", ",", "max", "(", "n_ims", ",", "batchsize", ")", ",", "batchsize", "=", "batchsize", ")", ".", "astype", "(", "\"f\"", ")", "\n", "mean", ",", "std", "=", "inception_score_tf", ".", "get_inception_score", "(", "ims", ",", "splits", ")", "\n", "# mean, std = inception_score(model, ims, splits=splits)", "\n", "chainer", ".", "reporter", ".", "report", "(", "{", "\n", "'inception_mean'", ":", "mean", ",", "\n", "'inception_std'", ":", "std", "\n", "}", ")", "\n", "if", "dst", "is", "not", "None", ":", "\n", "            ", "preview_dir", "=", "'{}/stats'", ".", "format", "(", "dst", ")", "\n", "preview_path", "=", "preview_dir", "+", "'/inception_score_{:0>8}.txt'", ".", "format", "(", "\n", "trainer", ".", "updater", ".", "iteration", "if", "trainer", "is", "not", "None", "else", "None", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "preview_dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "preview_dir", ")", "\n", "", "np", ".", "savetxt", "(", "preview_path", ",", "np", ".", "array", "(", "[", "mean", ",", "std", "]", ")", ")", "\n", "\n", "", "", "return", "evaluation", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.evaluation.get_mean_cov": [[221, 251], ["int", "print", "print", "print", "xp.empty", "range", "xp.mean().get", "numpy.cov", "math.ceil", "print", "min", "xp.asarray", "chainer.Variable", "chainer.resize_images", "chainer.using_config", "chainer.using_config", "chainer.using_config", "chainer.using_config", "chainer.using_config", "chainer.using_config", "model", "xp.mean", "xp.empty.get", "float", "float"], "function", ["None"], ["", "def", "get_mean_cov", "(", "model", ",", "ims", ",", "batch_size", "=", "100", ")", ":", "\n", "    ", "n", ",", "c", ",", "w", ",", "h", "=", "ims", ".", "shape", "\n", "n_batches", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "n", ")", "/", "float", "(", "batch_size", ")", ")", ")", "\n", "xp", "=", "model", ".", "xp", "\n", "print", "(", "'Batch size:'", ",", "batch_size", ")", "\n", "print", "(", "'Total number of images:'", ",", "n", ")", "\n", "print", "(", "'Total number of batches:'", ",", "n_batches", ")", "\n", "ys", "=", "xp", ".", "empty", "(", "(", "n", ",", "2048", ")", ",", "dtype", "=", "xp", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "n_batches", ")", ":", "\n", "        ", "print", "(", "'Running batch'", ",", "i", "+", "1", ",", "'/'", ",", "n_batches", ",", "'...'", ")", "\n", "batch_start", "=", "(", "i", "*", "batch_size", ")", "\n", "batch_end", "=", "min", "(", "(", "i", "+", "1", ")", "*", "batch_size", ",", "n", ")", "\n", "\n", "ims_batch", "=", "ims", "[", "batch_start", ":", "batch_end", "]", "\n", "ims_batch", "=", "xp", ".", "asarray", "(", "ims_batch", ")", "# To GPU if using CuPy", "\n", "ims_batch", "=", "Variable", "(", "ims_batch", ")", "\n", "\n", "# Resize image to the shape expected by the inception module", "\n", "if", "(", "w", ",", "h", ")", "!=", "(", "299", ",", "299", ")", ":", "\n", "            ", "ims_batch", "=", "F", ".", "resize_images", "(", "ims_batch", ",", "(", "299", ",", "299", ")", ")", "# bilinear", "\n", "\n", "# Feed images to the inception module to get the features", "\n", "", "with", "chainer", ".", "using_config", "(", "'train'", ",", "False", ")", ",", "chainer", ".", "using_config", "(", "'enable_backprop'", ",", "False", ")", ":", "\n", "            ", "y", "=", "model", "(", "ims_batch", ",", "get_feature", "=", "True", ")", "\n", "", "ys", "[", "batch_start", ":", "batch_end", "]", "=", "y", ".", "data", "\n", "\n", "", "mean", "=", "xp", ".", "mean", "(", "ys", ",", "axis", "=", "0", ")", ".", "get", "(", ")", "\n", "# cov = F.cross_covariance(ys, ys, reduce=\"no\").datasets.get()", "\n", "cov", "=", "np", ".", "cov", "(", "ys", ".", "get", "(", ")", ".", "T", ")", "\n", "return", "mean", ",", "cov", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.evaluation.monitor_largest_singular_values": [[253, 283], ["chainer.training.make_extension", "chainer.training.make_extension", "chainer.training.make_extension", "isinstance", "sorted", "W.reshape", "source.functions.max_sv.max_singular_value", "chainer.cuda.to_cpu", "numpy.linalg.svd", "print", "sigmas.append", "os.path.exists", "os.makedirs", "open", "numpy.savetxt", "model_loader.dis.namedlinks", "name.strip", "numpy.array", "xp.squeeze", "name.strip"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.functions.max_sv.max_singular_value"], ["", "def", "monitor_largest_singular_values", "(", "dis", ",", "dst", ")", ":", "\n", "    ", "@", "chainer", ".", "training", ".", "make_extension", "(", ")", "\n", "def", "evaluation", "(", "trainer", "=", "None", ")", ":", "\n", "        ", "def", "_l2normalize", "(", "v", ",", "eps", "=", "1e-12", ")", ":", "\n", "            ", "return", "v", "/", "(", "(", "(", "v", "**", "2", ")", ".", "sum", "(", ")", ")", "**", "0.5", "+", "eps", ")", "\n", "\n", "", "xp", "=", "dis", ".", "xp", "\n", "links", "=", "[", "[", "name", ",", "link", "]", "for", "name", ",", "link", "in", "sorted", "(", "dis", ".", "namedlinks", "(", ")", ")", "]", "\n", "sigmas", "=", "[", "]", "\n", "for", "name", ",", "link", "in", "links", ":", "\n", "            ", "if", "isinstance", "(", "link", ",", "SNConvolution2D", ")", ":", "\n", "                ", "W", ",", "u", "=", "link", ".", "W", ",", "link", ".", "u", "\n", "W_mat", "=", "W", ".", "reshape", "(", "W", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "sigma", ",", "_", ",", "_", "=", "max_singular_value", "(", "W_mat", ",", "u", ")", "\n", "W_bar", "=", "cuda", ".", "to_cpu", "(", "(", "W_mat", ".", "data", "/", "xp", ".", "squeeze", "(", "sigma", ".", "data", ")", ")", ")", "\n", "_", ",", "s", ",", "_", "=", "svd", "(", "W_bar", ")", "\n", "_sigma", "=", "s", "[", "0", "]", "\n", "print", "(", "name", ".", "strip", "(", "'/'", ")", ",", "_sigma", ")", "\n", "sigmas", ".", "append", "(", "[", "name", ".", "strip", "(", "'/'", ")", ",", "_sigma", "]", ")", "\n", "\n", "", "", "if", "dst", "is", "not", "None", ":", "\n", "            ", "preview_dir", "=", "'{}/sigmas'", ".", "format", "(", "dst", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "preview_dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "preview_dir", ")", "\n", "", "preview_path", "=", "preview_dir", "+", "'/sigmas_{:0>8}.txt'", ".", "format", "(", "\n", "trainer", ".", "updater", ".", "iteration", "if", "trainer", "is", "not", "None", "else", "None", ")", "\n", "with", "open", "(", "preview_path", ",", "'wb'", ")", "as", "f", ":", "\n", "                ", "np", ".", "savetxt", "(", "f", ",", "np", ".", "array", "(", "sigmas", ",", "dtype", "=", "np", ".", "str", ")", ",", "delimiter", "=", "\" \"", ",", "fmt", "=", "\"%s\"", ")", "\n", "\n", "", "", "", "return", "evaluation", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.evaluation.FID": [[285, 290], ["numpy.sum", "numpy.trace", "numpy.real", "scipy.linalg.sqrtm", "numpy.dot"], "function", ["None"], ["", "def", "FID", "(", "m0", ",", "c0", ",", "m1", ",", "c1", ")", ":", "\n", "    ", "ret", "=", "0", "\n", "ret", "+=", "np", ".", "sum", "(", "(", "m0", "-", "m1", ")", "**", "2", ")", "\n", "ret", "+=", "np", ".", "trace", "(", "c0", "+", "c1", "-", "2.0", "*", "scipy", ".", "linalg", ".", "sqrtm", "(", "np", ".", "dot", "(", "c0", ",", "c1", ")", ")", ")", "\n", "return", "np", ".", "real", "(", "ret", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.evaluation.calc_inception_and_FID": [[291, 331], ["chainer.training.make_extension", "chainer.training.make_extension", "chainer.training.make_extension", "os.path.dirname", "gen_images().astype", "numpy.load", "source.get_inception_and_FID", "chainer.reporter.report", "chainer.reporter.report", "chainer.reporter.report", "chainer.reporter.report", "chainer.reporter.report", "chainer.reporter.report", "numpy.savetxt", "numpy.savetxt", "evaluation.gen_images", "os.path.exists", "os.makedirs", "numpy.array", "os.path.exists", "os.makedirs", "numpy.array", "max"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.tflib.cifar10.load", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.inception_score_tf.get_inception_and_FID", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.evaluation.gen_images"], ["", "def", "calc_inception_and_FID", "(", "gen", ",", "batchsize", "=", "200", ",", "stat_file", "=", "\"%s/cifar-10-fid.npz\"", "%", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "dst", "=", "None", ",", "path", "=", "None", ",", "\n", "n_ims", "=", "5000", ",", "splits", "=", "10", ")", ":", "\n", "    ", "\"\"\"Frechet Inception Distance proposed by https://arxiv.org/abs/1706.08500\"\"\"", "\n", "# http://bioinf.jku.at/research/ttur/)", "\n", "\n", "@", "chainer", ".", "training", ".", "make_extension", "(", ")", "\n", "def", "evaluation", "(", "trainer", "=", "None", ")", ":", "\n", "# loading models and generating new images", "\n", "# model = load_inception_model(path)", "\n", "        ", "ims", "=", "gen_images", "(", "gen", ",", "max", "(", "n_ims", ",", "batchsize", ")", ",", "batchsize", "=", "batchsize", ")", ".", "astype", "(", "\"f\"", ")", "\n", "stat", "=", "np", ".", "load", "(", "stat_file", ",", "allow_pickle", "=", "False", ")", "\n", "is_mean", ",", "is_std", ",", "fid_mean", ",", "fid_std", "=", "inception_score_tf", ".", "get_inception_and_FID", "(", "ims", ",", "splits", ",", "ref_stats", "=", "stat", ")", "\n", "\n", "# report and log IS", "\n", "chainer", ".", "reporter", ".", "report", "(", "{", "\n", "'inception_mean'", ":", "is_mean", ",", "\n", "'inception_std'", ":", "is_std", "\n", "}", ")", "\n", "if", "dst", "is", "not", "None", ":", "\n", "            ", "preview_dir", "=", "'{}/stats'", ".", "format", "(", "dst", ")", "\n", "preview_path", "=", "preview_dir", "+", "'/inception_score_{:0>8}.txt'", ".", "format", "(", "\n", "trainer", ".", "updater", ".", "iteration", "if", "trainer", "is", "not", "None", "else", "None", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "preview_dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "preview_dir", ")", "\n", "", "np", ".", "savetxt", "(", "preview_path", ",", "np", ".", "array", "(", "[", "is_mean", ",", "is_std", "]", ")", ")", "\n", "\n", "# report and log FID", "\n", "", "chainer", ".", "reporter", ".", "report", "(", "{", "\n", "'FID_mean'", ":", "fid_mean", ",", "\n", "'FID_std'", ":", "fid_std", "\n", "}", ")", "\n", "if", "dst", "is", "not", "None", ":", "\n", "            ", "preview_dir", "=", "'{}/stats'", ".", "format", "(", "dst", ")", "\n", "preview_path", "=", "preview_dir", "+", "'/fid_{:0>8}.txt'", ".", "format", "(", "\n", "trainer", ".", "updater", ".", "iteration", "if", "trainer", "is", "not", "None", "else", "None", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "preview_dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "preview_dir", ")", "\n", "", "np", ".", "savetxt", "(", "preview_path", ",", "np", ".", "array", "(", "[", "fid_mean", ",", "fid_std", "]", ")", ")", "\n", "\n", "", "", "return", "evaluation", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.evaluation.calc_FID": [[332, 356], ["chainer.training.make_extension", "chainer.training.make_extension", "chainer.training.make_extension", "os.path.dirname", "evaluation.load_inception_model", "numpy.load", "gen_images().astype", "source.get_fid", "chainer.reporter.report", "chainer.reporter.report", "chainer.reporter.report", "numpy.savetxt", "evaluation.gen_images", "os.path.exists", "os.makedirs", "numpy.array", "max"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.evaluation.load_inception_model", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.tflib.cifar10.load", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.inception_score_tf.get_fid", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.evaluation.gen_images"], ["", "def", "calc_FID", "(", "gen", ",", "batchsize", "=", "200", ",", "stat_file", "=", "\"%s/cifar-10-fid.npz\"", "%", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "dst", "=", "None", ",", "path", "=", "None", ",", "\n", "n_ims", "=", "5000", ",", "splits", "=", "10", ")", ":", "\n", "    ", "\"\"\"Frechet Inception Distance proposed by https://arxiv.org/abs/1706.08500\"\"\"", "\n", "# http://bioinf.jku.at/research/ttur/", "\n", "\n", "@", "chainer", ".", "training", ".", "make_extension", "(", ")", "\n", "def", "evaluation", "(", "trainer", "=", "None", ")", ":", "\n", "        ", "model", "=", "load_inception_model", "(", "path", ")", "\n", "stat", "=", "np", ".", "load", "(", "stat_file", ",", "allow_pickle", "=", "False", ")", "\n", "ims", "=", "gen_images", "(", "gen", ",", "max", "(", "n_ims", ",", "batchsize", ")", ",", "batchsize", "=", "batchsize", ")", ".", "astype", "(", "\"f\"", ")", "\n", "mean", ",", "std", "=", "inception_score_tf", ".", "get_fid", "(", "ims", ",", "ref_stats", "=", "stat", ",", "splits", "=", "splits", ")", "\n", "chainer", ".", "reporter", ".", "report", "(", "{", "\n", "'FID_mean'", ":", "mean", ",", "\n", "'FID_std'", ":", "std", "\n", "}", ")", "\n", "if", "dst", "is", "not", "None", ":", "\n", "            ", "preview_dir", "=", "'{}/stats'", ".", "format", "(", "dst", ")", "\n", "preview_path", "=", "preview_dir", "+", "'/fid_{:0>8}.txt'", ".", "format", "(", "\n", "trainer", ".", "updater", ".", "iteration", "if", "trainer", "is", "not", "None", "else", "None", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "preview_dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "preview_dir", ")", "\n", "", "np", ".", "savetxt", "(", "preview_path", ",", "np", ".", "array", "(", "[", "fid", "]", ")", ")", "\n", "\n", "", "", "return", "evaluation", "\n", "", ""]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.source.yaml_utils.Config.__init__": [[15, 17], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "config_dict", ")", ":", "\n", "        ", "self", ".", "config", "=", "config_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.source.yaml_utils.Config.__getattr__": [[18, 23], ["AttributeError"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "key", ")", ":", "\n", "        ", "if", "key", "in", "self", ".", "config", ":", "\n", "            ", "return", "self", ".", "config", "[", "key", "]", "\n", "", "else", ":", "\n", "            ", "raise", "AttributeError", "(", "key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.source.yaml_utils.Config.__getitem__": [[24, 26], ["None"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "config", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.source.yaml_utils.Config.__repr__": [[27, 29], ["yaml.dump"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "yaml", ".", "dump", "(", "self", ".", "config", ",", "default_flow_style", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.source.yaml_utils.load_dataset": [[31, 35], ["yaml_utils.load_module", "load_module."], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.source.yaml_utils.load_module"], ["", "", "def", "load_dataset", "(", "config", ")", ":", "\n", "    ", "dataset", "=", "load_module", "(", "config", ".", "dataset", "[", "'dataset_fn'", "]", ",", "\n", "config", ".", "dataset", "[", "'dataset_name'", "]", ")", "\n", "return", "dataset", "(", "**", "config", ".", "dataset", "[", "'args'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.source.yaml_utils.load_module": [[37, 42], ["os.path.dirname", "sys.path.insert", "getattr", "os.path.splitext", "__import__", "os.path.basename"], "function", ["None"], ["", "def", "load_module", "(", "fn", ",", "name", ")", ":", "\n", "    ", "mod_name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "fn", ")", ")", "[", "0", "]", "\n", "mod_path", "=", "os", ".", "path", ".", "dirname", "(", "fn", ")", "\n", "sys", ".", "path", ".", "insert", "(", "0", ",", "mod_path", ")", "\n", "return", "getattr", "(", "__import__", "(", "mod_name", ")", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.source.yaml_utils.load_model": [[44, 49], ["yaml_utils.load_module", "load_module.", "load_module."], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.source.yaml_utils.load_module"], ["", "def", "load_model", "(", "model_fn", ",", "model_name", ",", "args", "=", "None", ")", ":", "\n", "    ", "model", "=", "load_module", "(", "model_fn", ",", "model_name", ")", "\n", "if", "args", ":", "\n", "        ", "return", "model", "(", "**", "args", ")", "\n", "", "return", "model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.source.yaml_utils.load_updater_class": [[51, 53], ["yaml_utils.load_module"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.source.yaml_utils.load_module"], ["", "def", "load_updater_class", "(", "config", ")", ":", "\n", "    ", "return", "load_module", "(", "config", ".", "updater", "[", "'fn'", "]", ",", "config", ".", "updater", "[", "'name'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.functions.max_sv._l2normalize": [[5, 14], ["chainer.cuda.reduce", "chainer.cuda.elementwise", "cuda.elementwise.", "cuda.reduce."], "function", ["None"], ["def", "_l2normalize", "(", "v", ",", "eps", "=", "1e-12", ")", ":", "\n", "    ", "norm", "=", "cuda", ".", "reduce", "(", "'T x'", ",", "'T out'", ",", "\n", "'x * x'", ",", "'a + b'", ",", "'out = sqrt(a)'", ",", "0", ",", "\n", "'norm_sn'", ")", "\n", "div", "=", "cuda", ".", "elementwise", "(", "'T x, T norm, T eps'", ",", "\n", "'T out'", ",", "\n", "'out = x / (norm + eps)'", ",", "\n", "'div_sn'", ")", "\n", "return", "div", "(", "v", ",", "norm", "(", "v", ")", ",", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.functions.max_sv.max_singular_value": [[16, 32], ["chainer.cuda.get_array_module", "range", "chainer.sum", "ValueError", "cuda.get_array_module.random.normal().astype", "max_sv._l2normalize", "max_sv._l2normalize", "cuda.get_array_module.dot", "cuda.get_array_module.dot", "chainer.linear", "cuda.get_array_module.random.normal", "W.data.transpose", "chainer.transpose"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.functions.max_sv._l2normalize", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.functions.max_sv._l2normalize"], ["", "def", "max_singular_value", "(", "W", ",", "u", "=", "None", ",", "Ip", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    Apply power iteration for the weight parameter\n    \"\"\"", "\n", "if", "not", "Ip", ">=", "1", ":", "\n", "        ", "raise", "ValueError", "(", "\"The number of power iterations should be positive integer\"", ")", "\n", "\n", "", "xp", "=", "cuda", ".", "get_array_module", "(", "W", ".", "data", ")", "\n", "if", "u", "is", "None", ":", "\n", "        ", "u", "=", "xp", ".", "random", ".", "normal", "(", "size", "=", "(", "1", ",", "W", ".", "shape", "[", "0", "]", ")", ")", ".", "astype", "(", "xp", ".", "float32", ")", "\n", "", "_u", "=", "u", "\n", "for", "_", "in", "range", "(", "Ip", ")", ":", "\n", "        ", "_v", "=", "_l2normalize", "(", "xp", ".", "dot", "(", "_u", ",", "W", ".", "data", ")", ",", "eps", "=", "1e-12", ")", "\n", "_u", "=", "_l2normalize", "(", "xp", ".", "dot", "(", "_v", ",", "W", ".", "data", ".", "transpose", "(", ")", ")", ",", "eps", "=", "1e-12", ")", "\n", "", "sigma", "=", "F", ".", "sum", "(", "F", ".", "linear", "(", "_u", ",", "F", ".", "transpose", "(", "W", ")", ")", "*", "_v", ")", "\n", "return", "sigma", ",", "_u", ",", "_v", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.functions.max_sv.max_singular_value_fully_differentiable": [[34, 51], ["chainer.cuda.get_array_module", "range", "chainer.matmul", "chainer.sqrt", "ValueError", "cuda.get_array_module.random.normal().astype", "chainer.normalize", "chainer.normalize", "chainer.transpose", "chainer.sum", "max_sv._l2normalize", "chainer.matmul", "chainer.matmul", "cuda.get_array_module.random.normal", "chainer.transpose"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.functions.max_sv._l2normalize"], ["", "def", "max_singular_value_fully_differentiable", "(", "W", ",", "u", "=", "None", ",", "Ip", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    Apply power iteration for the weight parameter (fully differentiable version)\n    \"\"\"", "\n", "if", "not", "Ip", ">=", "1", ":", "\n", "        ", "raise", "ValueError", "(", "\"The number of power iterations should be positive integer\"", ")", "\n", "\n", "", "xp", "=", "cuda", ".", "get_array_module", "(", "W", ".", "data", ")", "\n", "if", "u", "is", "None", ":", "\n", "        ", "u", "=", "xp", ".", "random", ".", "normal", "(", "size", "=", "(", "1", ",", "W", ".", "shape", "[", "0", "]", ")", ")", ".", "astype", "(", "xp", ".", "float32", ")", "\n", "", "_u", "=", "u", "\n", "for", "_", "in", "range", "(", "Ip", ")", ":", "\n", "        ", "_v", "=", "F", ".", "normalize", "(", "F", ".", "matmul", "(", "_u", ",", "W", ")", ",", "eps", "=", "1e-12", ")", "\n", "_u", "=", "F", ".", "normalize", "(", "F", ".", "matmul", "(", "_v", ",", "F", ".", "transpose", "(", "W", ")", ")", ",", "eps", "=", "1e-12", ")", "\n", "", "_u", "=", "F", ".", "matmul", "(", "_v", ",", "F", ".", "transpose", "(", "W", ")", ")", "\n", "norm", "=", "F", ".", "sqrt", "(", "F", ".", "sum", "(", "_u", "**", "2", ")", ")", "\n", "return", "norm", ",", "_l2normalize", "(", "_u", ".", "data", ")", ",", "_v", "\n", "", ""]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.inception_score_tf.inception_forward": [[29, 54], ["images.transpose.transpose", "type", "len", "numpy.max", "numpy.min", "tensorflow.Session", "int", "range", "numpy.concatenate", "math.ceil", "sess.run", "np.expand_dims.append", "numpy.expand_dims", "print", "float", "float", "min", "len", "str", "len"], "function", ["None"], ["\n", "def", "inception_forward", "(", "images", ",", "layer", ",", "expand_dim", "=", "False", ")", ":", "\n", "    ", "assert", "(", "type", "(", "images", "[", "0", "]", ")", "==", "np", ".", "ndarray", ")", "\n", "assert", "(", "len", "(", "images", "[", "0", "]", ".", "shape", ")", "==", "3", ")", "\n", "assert", "(", "np", ".", "max", "(", "images", "[", "0", "]", ")", ">", "10", ")", "\n", "assert", "(", "np", ".", "min", "(", "images", "[", "0", "]", ")", ">=", "0.0", ")", "\n", "# bs = 100", "\n", "bs", "=", "1", "\n", "images", "=", "images", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "with", "tf", ".", "Session", "(", "config", "=", "config", ")", "as", "sess", ":", "\n", "        ", "preds", "=", "[", "]", "\n", "n_batches", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "len", "(", "images", ")", ")", "/", "float", "(", "bs", ")", ")", ")", "\n", "# import pdb", "\n", "# pdb.set_trace()", "\n", "for", "i", "in", "range", "(", "n_batches", ")", ":", "\n", "# sys.stdout.write(\".\")", "\n", "# sys.stdout.flush()", "\n", "            ", "if", "i", "%", "5000", "==", "4999", ":", "\n", "                ", "print", "(", "str", "(", "i", "+", "1", ")", "+", "\" finished\"", ")", "\n", "", "inp", "=", "images", "[", "(", "i", "*", "bs", ")", ":", "min", "(", "(", "i", "+", "1", ")", "*", "bs", ",", "len", "(", "images", ")", ")", "]", "\n", "pred", "=", "sess", ".", "run", "(", "layer", ",", "{", "'ExpandDims:0'", ":", "inp", "}", ")", "\n", "preds", ".", "append", "(", "pred", ")", "\n", "", "if", "expand_dim", ":", "\n", "            ", "preds", "=", "np", ".", "expand_dims", "(", "preds", ",", "0", ")", "\n", "", "preds", "=", "np", ".", "concatenate", "(", "preds", ",", "0", ")", "\n", "", "return", "preds", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.inception_score_tf.get_mean_and_cov": [[56, 63], ["inception_score_tf.inception_forward", "numpy.mean", "numpy.cov", "pdb.set_trace"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.inception_score.inception_forward"], ["\n", "", "def", "get_mean_and_cov", "(", "images", ")", ":", "\n", "    ", "before_preds", "=", "inception_forward", "(", "images", ",", "last_layer", ")", "\n", "m", "=", "np", ".", "mean", "(", "before_preds", ",", "0", ")", "\n", "cov", "=", "np", ".", "cov", "(", "before_preds", ",", "rowvar", "=", "False", ")", "\n", "return", "m", ",", "cov", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.inception_score_tf.get_fid": [[65, 83], ["inception_score_tf.inception_forward", "range", "inception_score_tf.get_mean_and_cov", "numpy.mean", "numpy.cov", "fids.append", "numpy.mean", "numpy.std", "ValueError", "numpy.sum", "numpy.trace", "scipy.linalg.sqrtm", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.inception_score.inception_forward", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.inception_score_tf.get_mean_and_cov"], ["# https://github.com/bioinf-jku/TTUR/blob/master/fid_example.py", "\n", "    ", "before_preds", "=", "inception_forward", "(", "images", ",", "last_layer", ",", "True", ")", "\n", "if", "ref_stats", "is", "None", ":", "\n", "        ", "if", "images_ref", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'images_ref should be provided if ref_stats is None'", ")", "\n", "", "m_ref", ",", "cov_ref", "=", "get_mean_and_cov", "(", "images_ref", ")", "\n", "", "else", ":", "\n", "        ", "m_ref", ",", "cov_ref", "=", "ref_stats", "[", "'mu'", "]", "[", ":", "]", ",", "ref_stats", "[", "'sigma'", "]", "[", ":", "]", "\n", "", "fids", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "splits", ")", ":", "\n", "        ", "part", "=", "before_preds", "[", "(", "i", "*", "before_preds", ".", "shape", "[", "0", "]", "//", "splits", ")", ":", "(", "(", "i", "+", "1", ")", "*", "before_preds", ".", "shape", "[", "0", "]", "//", "splits", ")", ",", ":", "]", "\n", "m_gen", "=", "np", ".", "mean", "(", "part", ",", "0", ")", "\n", "cov_gen", "=", "np", ".", "cov", "(", "part", ",", "rowvar", "=", "False", ")", "\n", "fid", "=", "np", ".", "sum", "(", "(", "m_ref", "-", "m_gen", ")", "**", "2", ")", "+", "np", ".", "trace", "(", "\n", "cov_ref", "+", "cov_gen", "-", "2", "*", "scipy", ".", "linalg", ".", "sqrtm", "(", "np", ".", "dot", "(", "cov_ref", ",", "cov_gen", ")", ")", ")", "\n", "fids", ".", "append", "(", "fid", ")", "\n", "", "return", "np", ".", "mean", "(", "fids", ")", ",", "np", ".", "std", "(", "fids", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.inception_score_tf.get_inception_score": [[87, 96], ["inception_score_tf.inception_forward", "range", "numpy.mean", "scores.append", "numpy.mean", "numpy.std", "numpy.sum", "numpy.exp", "numpy.log", "numpy.log", "numpy.expand_dims", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.inception_score.inception_forward"], ["    ", "preds", "=", "inception_forward", "(", "images", ",", "softmax", ")", "\n", "scores", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "splits", ")", ":", "\n", "        ", "part", "=", "preds", "[", "(", "i", "*", "preds", ".", "shape", "[", "0", "]", "//", "splits", ")", ":", "(", "(", "i", "+", "1", ")", "*", "preds", ".", "shape", "[", "0", "]", "//", "splits", ")", ",", ":", "]", "\n", "kl", "=", "part", "*", "(", "np", ".", "log", "(", "part", ")", "-", "np", ".", "log", "(", "np", ".", "expand_dims", "(", "np", ".", "mean", "(", "part", ",", "0", ")", ",", "0", ")", ")", ")", "\n", "kl", "=", "np", ".", "mean", "(", "np", ".", "sum", "(", "kl", ",", "1", ")", ")", "\n", "scores", ".", "append", "(", "np", ".", "exp", "(", "kl", ")", ")", "\n", "", "return", "np", ".", "mean", "(", "scores", ")", ",", "np", ".", "std", "(", "scores", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.inception_score_tf.get_inception_and_FID": [[98, 150], ["images.transpose.transpose", "range", "range", "type", "len", "numpy.max", "numpy.min", "tensorflow.Session", "int", "range", "numpy.expand_dims", "numpy.concatenate", "numpy.concatenate", "numpy.mean", "inception.append", "inception_score_tf.get_mean_and_cov", "numpy.mean", "numpy.cov", "fids.append", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "math.ceil", "sess.run", "np.concatenate.append", "np.concatenate.append", "numpy.sum", "numpy.exp", "ValueError", "numpy.sum", "numpy.trace", "print", "numpy.log", "numpy.log", "float", "float", "min", "numpy.expand_dims", "len", "str", "len", "numpy.mean", "scipy.linalg.sqrtm", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.inception_score_tf.get_mean_and_cov"], ["    ", "assert", "(", "type", "(", "images", "[", "0", "]", ")", "==", "np", ".", "ndarray", ")", "\n", "assert", "(", "len", "(", "images", "[", "0", "]", ".", "shape", ")", "==", "3", ")", "\n", "assert", "(", "np", ".", "max", "(", "images", "[", "0", "]", ")", ">", "10", ")", "\n", "assert", "(", "np", ".", "min", "(", "images", "[", "0", "]", ")", ">=", "0.0", ")", "\n", "# bs = 100", "\n", "bs", "=", "1", "\n", "images", "=", "images", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "with", "tf", ".", "Session", "(", "config", "=", "config", ")", "as", "sess", ":", "\n", "# calculate preds for IS and FID", "\n", "        ", "preds_inception", "=", "[", "]", "\n", "preds_fid", "=", "[", "]", "\n", "n_batches", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "len", "(", "images", ")", ")", "/", "float", "(", "bs", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "n_batches", ")", ":", "\n", "# sys.stdout.write(\".\")", "\n", "# sys.stdout.flush()", "\n", "            ", "if", "i", "%", "5000", "==", "4999", ":", "\n", "                ", "print", "(", "str", "(", "i", "+", "1", ")", "+", "\" finished\"", ")", "\n", "", "inp", "=", "images", "[", "(", "i", "*", "bs", ")", ":", "min", "(", "(", "i", "+", "1", ")", "*", "bs", ",", "len", "(", "images", ")", ")", "]", "\n", "pred_inception", ",", "pred_fid", "=", "sess", ".", "run", "(", "[", "softmax", ",", "last_layer", "]", ",", "{", "'ExpandDims:0'", ":", "inp", "}", ")", "\n", "preds_inception", ".", "append", "(", "pred_inception", ")", "\n", "preds_fid", ".", "append", "(", "pred_fid", ")", "\n", "# expand dims for preds_FID", "\n", "", "preds_fid", "=", "np", ".", "expand_dims", "(", "preds_fid", ",", "0", ")", "\n", "preds_inception", "=", "np", ".", "concatenate", "(", "preds_inception", ",", "0", ")", "\n", "preds_fid", "=", "np", ".", "concatenate", "(", "preds_fid", ",", "0", ")", "\n", "\n", "# inception score", "\n", "", "inception", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "splits", ")", ":", "\n", "        ", "part", "=", "preds_inception", "[", "(", "i", "*", "preds_inception", ".", "shape", "[", "0", "]", "//", "splits", ")", ":", "(", "(", "i", "+", "1", ")", "*", "preds_inception", ".", "shape", "[", "0", "]", "//", "splits", ")", ",", ":", "]", "\n", "kl", "=", "part", "*", "(", "np", ".", "log", "(", "part", ")", "-", "np", ".", "log", "(", "np", ".", "expand_dims", "(", "np", ".", "mean", "(", "part", ",", "0", ")", ",", "0", ")", ")", ")", "\n", "kl", "=", "np", ".", "mean", "(", "np", ".", "sum", "(", "kl", ",", "1", ")", ")", "\n", "inception", ".", "append", "(", "np", ".", "exp", "(", "kl", ")", ")", "\n", "\n", "# FID", "\n", "", "if", "ref_stats", "is", "None", ":", "\n", "        ", "if", "images_ref", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'images_ref should be provided if ref_stats is None'", ")", "\n", "", "m_ref", ",", "cov_ref", "=", "get_mean_and_cov", "(", "images_ref", ")", "\n", "", "else", ":", "\n", "        ", "m_ref", ",", "cov_ref", "=", "ref_stats", "[", "'mu'", "]", "[", ":", "]", ",", "ref_stats", "[", "'sigma'", "]", "[", ":", "]", "\n", "", "fids", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "splits", ")", ":", "\n", "        ", "part", "=", "preds_fid", "[", "(", "i", "*", "preds_fid", ".", "shape", "[", "0", "]", "//", "splits", ")", ":", "(", "(", "i", "+", "1", ")", "*", "preds_fid", ".", "shape", "[", "0", "]", "//", "splits", ")", ",", ":", "]", "\n", "m_gen", "=", "np", ".", "mean", "(", "part", ",", "0", ")", "\n", "cov_gen", "=", "np", ".", "cov", "(", "part", ",", "rowvar", "=", "False", ")", "\n", "fid", "=", "np", ".", "sum", "(", "(", "m_ref", "-", "m_gen", ")", "**", "2", ")", "+", "np", ".", "trace", "(", "\n", "cov_ref", "+", "cov_gen", "-", "2", "*", "scipy", ".", "linalg", ".", "sqrtm", "(", "np", ".", "dot", "(", "cov_ref", ",", "cov_gen", ")", ")", ")", "\n", "fids", ".", "append", "(", "fid", ")", "\n", "\n", "", "return", "np", ".", "mean", "(", "inception", ")", ",", "np", ".", "std", "(", "inception", ")", ",", "np", ".", "mean", "(", "fids", ")", ",", "np", ".", "std", "(", "fids", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.inception_score_tf.get_inception_accuracy": [[154, 175], ["isinstance", "int", "print", "print", "chainer.functions.accuracy", "int", "print", "print", "ys_list.append", "sum", "len", "math.ceil", "inception_score_tf.inception_forward", "math.ceil", "inception_score_tf.inception_forward", "float", "float", "float", "float"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.inception_score.inception_forward", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.inception_score.inception_forward"], ["    ", "batch_size", "=", "100", "\n", "if", "isinstance", "(", "images", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "ims_list", "=", "images", "\n", "ys_list", "=", "[", "]", "\n", "for", "ims", "in", "ims_list", ":", "\n", "            ", "n", ",", "_", ",", "_", ",", "_", "=", "ims", ".", "shape", "\n", "n_batches", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "n", ")", "/", "float", "(", "batch_size", ")", ")", ")", "\n", "print", "(", "'batch_size:{}, n_ims{}, n_batches{}'", ".", "format", "(", "batch_size", ",", "n", ",", "n_batches", ")", ")", "\n", "print", "(", "'Calculating inception accuracy...'", ")", "\n", "ys", "=", "inception_forward", "(", "ims", ",", "softmax", ")", "[", ":", ",", "1", ":", "1001", "]", "\n", "ys_list", ".", "append", "(", "ys", ")", "\n", "", "ys", "=", "sum", "(", "ys_list", ")", "/", "len", "(", "ys_list", ")", "\n", "", "else", ":", "\n", "        ", "n", ",", "_", ",", "_", ",", "_", ",", "=", "images", ".", "shape", "\n", "n_batches", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "n", ")", "/", "float", "(", "batch_size", ")", ")", ")", "\n", "\n", "print", "(", "'batch_size:{}, n_ims{}, n_batches{}'", ".", "format", "(", "batch_size", ",", "n", ",", "n_batches", ")", ")", "\n", "print", "(", "'Calculating inception accuracy...'", ")", "\n", "ys", "=", "inception_forward", "(", "images", ",", "softmax", ")", "[", ":", ",", "1", ":", "1001", "]", "\n", "", "return", "F", ".", "accuracy", "(", "ys", ",", "labels", ")", ".", "data", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.inception_score_tf._init_inception": [[178, 222], ["os.path.join", "tarfile.open().extractall", "os.path.exists", "os.makedirs", "DATA_URL.split", "os.path.exists", "six.moves.urllib.request.urlretrieve", "print", "os.stat", "print", "tensorflow.gfile.FastGFile", "tensorflow.GraphDef", "tf.GraphDef.ParseFromString", "tensorflow.import_graph_def", "tensorflow.Session", "sess.graph.get_tensor_by_name", "sess.graph.get_tensor_by_name.graph.get_operations", "enumerate", "tensorflow.squeeze", "tensorflow.matmul", "tensorflow.nn.softmax", "sys.stdout.write", "sys.stdout.write", "sys.stdout.flush", "sys.stdout.flush", "tarfile.open", "os.path.join", "f.read", "tensorflow.expand_dims", "o.get_shape", "enumerate", "tensorflow.TensorShape", "sess.graph.get_operation_by_name", "new_shape.append", "new_shape.append", "float", "float"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.tflib.plot.flush", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.tflib.plot.flush"], ["    ", "global", "softmax", "\n", "global", "last_layer", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "MODEL_DIR", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "MODEL_DIR", ")", "\n", "", "filename", "=", "DATA_URL", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "MODEL_DIR", ",", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "filepath", ")", ":", "\n", "        ", "def", "_progress", "(", "count", ",", "block_size", ",", "total_size", ")", ":", "\n", "            ", "sys", ".", "stdout", ".", "write", "(", "'\\r>> Downloading %s %.1f%%'", "%", "(", "\n", "filename", ",", "float", "(", "count", "*", "block_size", ")", "/", "float", "(", "total_size", ")", "*", "100.0", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "", "filepath", ",", "_", "=", "urllib", ".", "request", ".", "urlretrieve", "(", "DATA_URL", ",", "filepath", ",", "_progress", ")", "\n", "print", "(", ")", "\n", "statinfo", "=", "os", ".", "stat", "(", "filepath", ")", "\n", "print", "(", "'Succesfully downloaded'", ",", "filename", ",", "statinfo", ".", "st_size", ",", "'bytes.'", ")", "\n", "", "tarfile", ".", "open", "(", "filepath", ",", "'r:gz'", ")", ".", "extractall", "(", "MODEL_DIR", ")", "\n", "with", "tf", ".", "gfile", ".", "FastGFile", "(", "os", ".", "path", ".", "join", "(", "\n", "MODEL_DIR", ",", "'classify_image_graph_def.pb'", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "graph_def", "=", "tf", ".", "GraphDef", "(", ")", "\n", "graph_def", ".", "ParseFromString", "(", "f", ".", "read", "(", ")", ")", "\n", "_", "=", "tf", ".", "import_graph_def", "(", "graph_def", ",", "name", "=", "''", ")", "\n", "# Works with an arbitrary minibatch size.", "\n", "", "with", "tf", ".", "Session", "(", "config", "=", "config", ")", "as", "sess", ":", "\n", "        ", "pool3", "=", "sess", ".", "graph", ".", "get_tensor_by_name", "(", "'pool_3:0'", ")", "\n", "ops", "=", "pool3", ".", "graph", ".", "get_operations", "(", ")", "\n", "for", "op_idx", ",", "op", "in", "enumerate", "(", "ops", ")", ":", "\n", "            ", "for", "o", "in", "op", ".", "outputs", ":", "\n", "                ", "shape", "=", "o", ".", "get_shape", "(", ")", "\n", "shape", "=", "[", "s", ".", "value", "for", "s", "in", "shape", "]", "\n", "new_shape", "=", "[", "]", "\n", "for", "j", ",", "s", "in", "enumerate", "(", "shape", ")", ":", "\n", "                    ", "if", "s", "==", "1", "and", "j", "==", "0", ":", "\n", "                        ", "new_shape", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "                        ", "new_shape", ".", "append", "(", "s", ")", "\n", "# o._shape = tf.TensorShape(new_shape)", "\n", "", "", "o", ".", "set_shape", "=", "tf", ".", "TensorShape", "(", "new_shape", ")", "\n", "", "", "w", "=", "sess", ".", "graph", ".", "get_operation_by_name", "(", "\"softmax/logits/MatMul\"", ")", ".", "inputs", "[", "1", "]", "\n", "last_layer", "=", "tf", ".", "squeeze", "(", "pool3", ")", "\n", "# logits = tf.matmul(last_layer, w)", "\n", "logits", "=", "tf", ".", "matmul", "(", "tf", ".", "expand_dims", "(", "last_layer", ",", "0", ")", ",", "w", ")", "\n", "softmax", "=", "tf", ".", "nn", ".", "softmax", "(", "logits", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.inception_score.Mixed.__init__": [[110, 115], ["chainer.Chain.__init__", "inception_score.Mixed.add_link"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.resblocks.OptimizedBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "trunk", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "for", "name", ",", "link", "in", "trunk", ":", "\n", "            ", "self", ".", "add_link", "(", "name", ",", "link", ")", "\n", "", "self", ".", "trunk", "=", "trunk", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.inception_score.Mixed.__call__": [[116, 122], ["chainer.functions.concat", "hs.append", "getattr"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "hs", "=", "[", "]", "\n", "for", "name", ",", "_", "in", "self", ".", "trunk", ":", "\n", "            ", "h", "=", "getattr", "(", "self", ",", "name", ")", "(", "x", ")", "\n", "hs", ".", "append", "(", "h", ")", "\n", "", "return", "F", ".", "concat", "(", "hs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.inception_score.Tower.__init__": [[125, 131], ["chainer.Chain.__init__", "name.startswith", "inception_score.Tower.add_link"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.resblocks.OptimizedBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "trunk", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "for", "name", ",", "link", "in", "trunk", ":", "\n", "            ", "if", "not", "name", ".", "startswith", "(", "'_'", ")", ":", "\n", "                ", "self", ".", "add_link", "(", "name", ",", "link", ")", "\n", "", "", "self", ".", "trunk", "=", "trunk", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.inception_score.Tower.__call__": [[132, 143], ["name.startswith", "f", "getattr", "getattr"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "x", "\n", "for", "name", ",", "f", "in", "self", ".", "trunk", ":", "\n", "            ", "if", "not", "name", ".", "startswith", "(", "'_'", ")", ":", "# Link", "\n", "                ", "if", "'bn'", "in", "name", ":", "\n", "                    ", "h", "=", "getattr", "(", "self", ",", "name", ")", "(", "h", ")", "\n", "", "else", ":", "\n", "                    ", "h", "=", "getattr", "(", "self", ",", "name", ")", "(", "h", ")", "\n", "", "", "else", ":", "# AveragePooling2D, MaxPooling2D or ReLU", "\n", "                ", "h", "=", "f", "(", "h", ")", "\n", "", "", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.inception_score.Inception.__init__": [[158, 579], ["chainer.Chain.__init__", "chainer.links.Convolution2D", "chainer.links.Convolution2D", "chainer.links.Convolution2D", "chainer.links.Convolution2D", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.BatchNormalization", "chainer.links.BatchNormalization", "chainer.links.BatchNormalization", "chainer.links.BatchNormalization", "inception_score.Mixed", "inception_score.Mixed", "inception_score.Mixed", "inception_score.Mixed", "inception_score.Mixed", "inception_score.Mixed", "inception_score.Mixed", "inception_score.Mixed", "inception_score.Mixed", "inception_score.Mixed", "inception_score.Mixed", "chainer.links.Linear", "inception_score.Tower", "inception_score.Tower", "inception_score.Tower", "inception_score.Tower", "inception_score.Tower", "inception_score.Tower", "inception_score.Tower", "inception_score.Tower", "inception_score.Tower", "inception_score.Tower", "inception_score.Tower", "inception_score.Tower", "inception_score.Tower", "inception_score.Tower", "inception_score.Tower", "inception_score.Tower", "inception_score.Tower", "inception_score.Tower", "inception_score.Tower", "inception_score.Tower", "inception_score.Tower", "inception_score.Tower", "inception_score.Tower", "inception_score.Tower", "inception_score.Tower", "inception_score.Tower", "inception_score.Tower", "inception_score.Tower", "inception_score.Tower", "inception_score.Tower", "inception_score.Tower", "inception_score.Tower", "inception_score.Tower", "inception_score.Tower", "inception_score.Tower", "inception_score.Tower", "inception_score.Tower", "inception_score.Tower", "inception_score.Tower", "inception_score.Tower", "inception_score.Tower", "inception_score.Tower", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "inception_score.Mixed", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "inception_score.Mixed", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "inception_score.Mixed", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "inception_score.Mixed", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "inception_score.Tower", "inception_score.Tower", "inception_score.Tower", "inception_score.Tower", "inception_score.Tower", "inception_score.Tower", "inception_score.Tower", "inception_score.Tower", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization", "chainer.links.Convolution2D", "chainer.links.BatchNormalization"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.resblocks.OptimizedBlock.__init__", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "conv", "=", "L", ".", "Convolution2D", "(", "3", ",", "32", ",", "3", ",", "stride", "=", "2", ",", "pad", "=", "0", ")", ",", "\n", "conv_1", "=", "L", ".", "Convolution2D", "(", "32", ",", "32", ",", "3", ",", "stride", "=", "1", ",", "pad", "=", "0", ")", ",", "\n", "conv_2", "=", "L", ".", "Convolution2D", "(", "32", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "pad", "=", "1", ")", ",", "\n", "conv_3", "=", "L", ".", "Convolution2D", "(", "64", ",", "80", ",", "1", ",", "stride", "=", "1", ",", "pad", "=", "0", ")", ",", "\n", "conv_4", "=", "L", ".", "Convolution2D", "(", "80", ",", "192", ",", "3", ",", "stride", "=", "1", ",", "pad", "=", "0", ")", ",", "\n", "bn_conv", "=", "L", ".", "BatchNormalization", "(", "32", ")", ",", "\n", "bn_conv_1", "=", "L", ".", "BatchNormalization", "(", "32", ")", ",", "\n", "bn_conv_2", "=", "L", ".", "BatchNormalization", "(", "64", ")", ",", "\n", "bn_conv_3", "=", "L", ".", "BatchNormalization", "(", "80", ")", ",", "\n", "bn_conv_4", "=", "L", ".", "BatchNormalization", "(", "192", ")", ",", "\n", "mixed", "=", "Mixed", "(", "[", "\n", "(", "'conv'", ",", "Tower", "(", "[", "\n", "(", "'conv'", ",", "L", ".", "Convolution2D", "(", "192", ",", "64", ",", "1", ",", "stride", "=", "1", ",", "pad", "=", "0", ")", ")", ",", "\n", "(", "'bn_conv'", ",", "L", ".", "BatchNormalization", "(", "64", ")", ")", ",", "\n", "(", "'_relu'", ",", "F", ".", "relu", ")", "\n", "]", ")", ")", ",", "\n", "(", "'tower'", ",", "Tower", "(", "[", "\n", "(", "'conv'", ",", "L", ".", "Convolution2D", "(", "192", ",", "48", ",", "1", ",", "stride", "=", "1", ",", "pad", "=", "0", ")", ")", ",", "\n", "(", "'bn_conv'", ",", "L", ".", "BatchNormalization", "(", "48", ")", ")", ",", "\n", "(", "'_relu'", ",", "F", ".", "relu", ")", ",", "\n", "(", "'conv_1'", ",", "L", ".", "Convolution2D", "(", "48", ",", "64", ",", "5", ",", "stride", "=", "1", ",", "pad", "=", "2", ")", ")", ",", "\n", "(", "'bn_conv_1'", ",", "L", ".", "BatchNormalization", "(", "64", ")", ")", ",", "\n", "(", "'_relu_1'", ",", "F", ".", "relu", ")", "\n", "]", ")", ")", ",", "\n", "(", "'tower_1'", ",", "Tower", "(", "[", "\n", "(", "'conv'", ",", "L", ".", "Convolution2D", "(", "192", ",", "64", ",", "1", ",", "stride", "=", "1", ",", "pad", "=", "0", ")", ")", ",", "\n", "(", "'bn_conv'", ",", "L", ".", "BatchNormalization", "(", "64", ")", ")", ",", "\n", "(", "'_relu'", ",", "F", ".", "relu", ")", ",", "\n", "(", "'conv_1'", ",", "L", ".", "Convolution2D", "(", "64", ",", "96", ",", "3", ",", "stride", "=", "1", ",", "pad", "=", "1", ")", ")", ",", "\n", "(", "'bn_conv_1'", ",", "L", ".", "BatchNormalization", "(", "96", ")", ")", ",", "\n", "(", "'_relu_1'", ",", "F", ".", "relu", ")", ",", "\n", "(", "'conv_2'", ",", "L", ".", "Convolution2D", "(", "96", ",", "96", ",", "3", ",", "stride", "=", "1", ",", "pad", "=", "1", ")", ")", ",", "\n", "(", "'bn_conv_2'", ",", "L", ".", "BatchNormalization", "(", "96", ")", ")", ",", "\n", "(", "'_relu_2'", ",", "F", ".", "relu", ")", "\n", "]", ")", ")", ",", "\n", "(", "'tower_2'", ",", "Tower", "(", "[", "\n", "(", "'_pooling'", ",", "_average_pooling_2d", ")", ",", "\n", "(", "'conv'", ",", "L", ".", "Convolution2D", "(", "192", ",", "32", ",", "1", ",", "stride", "=", "1", ",", "pad", "=", "0", ")", ")", ",", "\n", "(", "'bn_conv'", ",", "L", ".", "BatchNormalization", "(", "32", ")", ")", ",", "\n", "(", "'_relu'", ",", "F", ".", "relu", ")", "\n", "]", ")", ")", "\n", "]", ")", ",", "\n", "mixed_1", "=", "Mixed", "(", "[", "\n", "(", "'conv'", ",", "Tower", "(", "[", "\n", "(", "'conv'", ",", "L", ".", "Convolution2D", "(", "256", ",", "64", ",", "1", ",", "stride", "=", "1", ",", "pad", "=", "0", ")", ")", ",", "\n", "(", "'bn_conv'", ",", "L", ".", "BatchNormalization", "(", "64", ")", ")", ",", "\n", "(", "'_relu'", ",", "F", ".", "relu", ")", "\n", "]", ")", ")", ",", "\n", "(", "'tower'", ",", "Tower", "(", "[", "\n", "(", "'conv'", ",", "L", ".", "Convolution2D", "(", "256", ",", "48", ",", "1", ",", "stride", "=", "1", ",", "pad", "=", "0", ")", ")", ",", "\n", "(", "'bn_conv'", ",", "L", ".", "BatchNormalization", "(", "48", ")", ")", ",", "\n", "(", "'_relu'", ",", "F", ".", "relu", ")", ",", "\n", "(", "'conv_1'", ",", "L", ".", "Convolution2D", "(", "48", ",", "64", ",", "5", ",", "stride", "=", "1", ",", "pad", "=", "2", ")", ")", ",", "\n", "(", "'bn_conv_1'", ",", "L", ".", "BatchNormalization", "(", "64", ")", ")", ",", "\n", "(", "'_relu_1'", ",", "F", ".", "relu", ")", "\n", "]", ")", ")", ",", "\n", "(", "'tower_1'", ",", "Tower", "(", "[", "\n", "(", "'conv'", ",", "L", ".", "Convolution2D", "(", "256", ",", "64", ",", "1", ",", "stride", "=", "1", ",", "pad", "=", "0", ")", ")", ",", "\n", "(", "'bn_conv'", ",", "L", ".", "BatchNormalization", "(", "64", ")", ")", ",", "\n", "(", "'_relu'", ",", "F", ".", "relu", ")", ",", "\n", "(", "'conv_1'", ",", "L", ".", "Convolution2D", "(", "64", ",", "96", ",", "3", ",", "stride", "=", "1", ",", "pad", "=", "1", ")", ")", ",", "\n", "(", "'bn_conv_1'", ",", "L", ".", "BatchNormalization", "(", "96", ")", ")", ",", "\n", "(", "'_relu_1'", ",", "F", ".", "relu", ")", ",", "\n", "(", "'conv_2'", ",", "L", ".", "Convolution2D", "(", "96", ",", "96", ",", "3", ",", "stride", "=", "1", ",", "pad", "=", "1", ")", ")", ",", "\n", "(", "'bn_conv_2'", ",", "L", ".", "BatchNormalization", "(", "96", ")", ")", ",", "\n", "(", "'_relu_2'", ",", "F", ".", "relu", ")", "\n", "]", ")", ")", ",", "\n", "(", "'tower_2'", ",", "Tower", "(", "[", "\n", "(", "'_pooling'", ",", "_average_pooling_2d", ")", ",", "\n", "(", "'conv'", ",", "L", ".", "Convolution2D", "(", "256", ",", "64", ",", "1", ",", "stride", "=", "1", ",", "pad", "=", "0", ")", ")", ",", "\n", "(", "'bn_conv'", ",", "L", ".", "BatchNormalization", "(", "64", ")", ")", ",", "\n", "(", "'_relu'", ",", "F", ".", "relu", ")", "\n", "]", ")", ")", "\n", "]", ")", ",", "\n", "mixed_2", "=", "Mixed", "(", "[", "\n", "(", "'conv'", ",", "Tower", "(", "[", "\n", "(", "'conv'", ",", "L", ".", "Convolution2D", "(", "288", ",", "64", ",", "1", ",", "stride", "=", "1", ",", "pad", "=", "0", ")", ")", ",", "\n", "(", "'bn_conv'", ",", "L", ".", "BatchNormalization", "(", "64", ")", ")", ",", "\n", "(", "'_relu'", ",", "F", ".", "relu", ")", "\n", "]", ")", ")", ",", "\n", "(", "'tower'", ",", "Tower", "(", "[", "\n", "(", "'conv'", ",", "L", ".", "Convolution2D", "(", "288", ",", "48", ",", "1", ",", "stride", "=", "1", ",", "pad", "=", "0", ")", ")", ",", "\n", "(", "'bn_conv'", ",", "L", ".", "BatchNormalization", "(", "48", ")", ")", ",", "\n", "(", "'_relu'", ",", "F", ".", "relu", ")", ",", "\n", "(", "'conv_1'", ",", "L", ".", "Convolution2D", "(", "48", ",", "64", ",", "5", ",", "stride", "=", "1", ",", "pad", "=", "2", ")", ")", ",", "\n", "(", "'bn_conv_1'", ",", "L", ".", "BatchNormalization", "(", "64", ")", ")", ",", "\n", "(", "'_relu_1'", ",", "F", ".", "relu", ")", "\n", "]", ")", ")", ",", "\n", "(", "'tower_1'", ",", "Tower", "(", "[", "\n", "(", "'conv'", ",", "L", ".", "Convolution2D", "(", "288", ",", "64", ",", "1", ",", "stride", "=", "1", ",", "pad", "=", "0", ")", ")", ",", "\n", "(", "'bn_conv'", ",", "L", ".", "BatchNormalization", "(", "64", ")", ")", ",", "\n", "(", "'_relu'", ",", "F", ".", "relu", ")", ",", "\n", "(", "'conv_1'", ",", "L", ".", "Convolution2D", "(", "64", ",", "96", ",", "3", ",", "stride", "=", "1", ",", "pad", "=", "1", ")", ")", ",", "\n", "(", "'bn_conv_1'", ",", "L", ".", "BatchNormalization", "(", "96", ")", ")", ",", "\n", "(", "'_relu_1'", ",", "F", ".", "relu", ")", ",", "\n", "(", "'conv_2'", ",", "L", ".", "Convolution2D", "(", "96", ",", "96", ",", "3", ",", "stride", "=", "1", ",", "pad", "=", "1", ")", ")", ",", "\n", "(", "'bn_conv_2'", ",", "L", ".", "BatchNormalization", "(", "96", ")", ")", ",", "\n", "(", "'_relu_2'", ",", "F", ".", "relu", ")", "\n", "]", ")", ")", ",", "\n", "(", "'tower_2'", ",", "Tower", "(", "[", "\n", "(", "'_pooling'", ",", "_average_pooling_2d", ")", ",", "\n", "(", "'conv'", ",", "L", ".", "Convolution2D", "(", "288", ",", "64", ",", "1", ",", "stride", "=", "1", ",", "pad", "=", "0", ")", ")", ",", "\n", "(", "'bn_conv'", ",", "L", ".", "BatchNormalization", "(", "64", ")", ")", ",", "\n", "(", "'_relu'", ",", "F", ".", "relu", ")", "\n", "]", ")", ")", "\n", "]", ")", ",", "\n", "mixed_3", "=", "Mixed", "(", "[", "\n", "(", "'conv'", ",", "Tower", "(", "[", "\n", "(", "'conv'", ",", "L", ".", "Convolution2D", "(", "288", ",", "384", ",", "3", ",", "stride", "=", "2", ",", "pad", "=", "0", ")", ")", ",", "\n", "(", "'bn_conv'", ",", "L", ".", "BatchNormalization", "(", "384", ")", ")", ",", "\n", "(", "'_relu'", ",", "F", ".", "relu", ")", "\n", "]", ")", ")", ",", "\n", "(", "'tower'", ",", "Tower", "(", "[", "\n", "(", "'conv'", ",", "L", ".", "Convolution2D", "(", "288", ",", "64", ",", "1", ",", "stride", "=", "1", ",", "pad", "=", "0", ")", ")", ",", "\n", "(", "'bn_conv'", ",", "L", ".", "BatchNormalization", "(", "64", ")", ")", ",", "\n", "(", "'_relu'", ",", "F", ".", "relu", ")", ",", "\n", "(", "'conv_1'", ",", "L", ".", "Convolution2D", "(", "64", ",", "96", ",", "3", ",", "stride", "=", "1", ",", "pad", "=", "1", ")", ")", ",", "\n", "(", "'bn_conv_1'", ",", "L", ".", "BatchNormalization", "(", "96", ")", ")", ",", "\n", "(", "'_relu_1'", ",", "F", ".", "relu", ")", ",", "\n", "(", "'conv_2'", ",", "L", ".", "Convolution2D", "(", "96", ",", "96", ",", "3", ",", "stride", "=", "2", ",", "pad", "=", "0", ")", ")", ",", "\n", "(", "'bn_conv_2'", ",", "L", ".", "BatchNormalization", "(", "96", ")", ")", ",", "\n", "(", "'_relu_2'", ",", "F", ".", "relu", ")", "\n", "]", ")", ")", ",", "\n", "(", "'pool'", ",", "Tower", "(", "[", "\n", "(", "'_pooling'", ",", "_max_pooling_2d_320", ")", "\n", "]", ")", ")", "\n", "]", ")", ",", "\n", "mixed_4", "=", "Mixed", "(", "[", "\n", "(", "'conv'", ",", "Tower", "(", "[", "\n", "(", "'conv'", ",", "L", ".", "Convolution2D", "(", "768", ",", "192", ",", "1", ",", "stride", "=", "1", ",", "pad", "=", "0", ")", ")", ",", "\n", "(", "'bn_conv'", ",", "L", ".", "BatchNormalization", "(", "192", ")", ")", ",", "\n", "(", "'_relu'", ",", "F", ".", "relu", ")", "\n", "]", ")", ")", ",", "\n", "(", "'tower'", ",", "Tower", "(", "[", "\n", "(", "'conv'", ",", "L", ".", "Convolution2D", "(", "768", ",", "128", ",", "1", ",", "stride", "=", "1", ",", "pad", "=", "0", ")", ")", ",", "\n", "(", "'bn_conv'", ",", "L", ".", "BatchNormalization", "(", "128", ")", ")", ",", "\n", "(", "'_relu'", ",", "F", ".", "relu", ")", ",", "\n", "(", "'conv_1'", ",", "L", ".", "Convolution2D", "(", "128", ",", "128", ",", "(", "1", ",", "7", ")", ",", "stride", "=", "1", ",", "pad", "=", "(", "0", ",", "3", ")", ")", ")", ",", "\n", "(", "'bn_conv_1'", ",", "L", ".", "BatchNormalization", "(", "128", ")", ")", ",", "\n", "(", "'_relu_1'", ",", "F", ".", "relu", ")", ",", "\n", "(", "'conv_2'", ",", "L", ".", "Convolution2D", "(", "128", ",", "192", ",", "(", "7", ",", "1", ")", ",", "stride", "=", "1", ",", "pad", "=", "(", "3", ",", "0", ")", ")", ")", ",", "\n", "(", "'bn_conv_2'", ",", "L", ".", "BatchNormalization", "(", "192", ")", ")", ",", "\n", "(", "'_relu_2'", ",", "F", ".", "relu", ")", "\n", "]", ")", ")", ",", "\n", "(", "'tower_1'", ",", "Tower", "(", "[", "\n", "(", "'conv'", ",", "L", ".", "Convolution2D", "(", "768", ",", "128", ",", "1", ",", "stride", "=", "1", ",", "pad", "=", "0", ")", ")", ",", "\n", "(", "'bn_conv'", ",", "L", ".", "BatchNormalization", "(", "128", ")", ")", ",", "\n", "(", "'_relu'", ",", "F", ".", "relu", ")", ",", "\n", "(", "'conv_1'", ",", "L", ".", "Convolution2D", "(", "128", ",", "128", ",", "(", "7", ",", "1", ")", ",", "stride", "=", "1", ",", "pad", "=", "(", "3", ",", "0", ")", ")", ")", ",", "\n", "(", "'bn_conv_1'", ",", "L", ".", "BatchNormalization", "(", "128", ")", ")", ",", "\n", "(", "'_relu_1'", ",", "F", ".", "relu", ")", ",", "\n", "(", "'conv_2'", ",", "L", ".", "Convolution2D", "(", "128", ",", "128", ",", "(", "1", ",", "7", ")", ",", "stride", "=", "1", ",", "pad", "=", "(", "0", ",", "3", ")", ")", ")", ",", "\n", "(", "'bn_conv_2'", ",", "L", ".", "BatchNormalization", "(", "128", ")", ")", ",", "\n", "(", "'_relu_2'", ",", "F", ".", "relu", ")", ",", "\n", "(", "'conv_3'", ",", "L", ".", "Convolution2D", "(", "128", ",", "128", ",", "(", "7", ",", "1", ")", ",", "stride", "=", "1", ",", "pad", "=", "(", "3", ",", "0", ")", ")", ")", ",", "\n", "(", "'bn_conv_3'", ",", "L", ".", "BatchNormalization", "(", "128", ")", ")", ",", "\n", "(", "'_relu_3'", ",", "F", ".", "relu", ")", ",", "\n", "(", "'conv_4'", ",", "L", ".", "Convolution2D", "(", "128", ",", "192", ",", "(", "1", ",", "7", ")", ",", "stride", "=", "1", ",", "pad", "=", "(", "0", ",", "3", ")", ")", ")", ",", "\n", "(", "'bn_conv_4'", ",", "L", ".", "BatchNormalization", "(", "192", ")", ")", ",", "\n", "(", "'_relu_4'", ",", "F", ".", "relu", ")", "\n", "]", ")", ")", ",", "\n", "(", "'tower_2'", ",", "Tower", "(", "[", "\n", "(", "'_pooling'", ",", "_average_pooling_2d", ")", ",", "\n", "(", "'conv'", ",", "L", ".", "Convolution2D", "(", "768", ",", "192", ",", "1", ",", "stride", "=", "1", ",", "pad", "=", "0", ")", ")", ",", "\n", "(", "'bn_conv'", ",", "L", ".", "BatchNormalization", "(", "192", ")", ")", ",", "\n", "(", "'_relu'", ",", "F", ".", "relu", ")", "\n", "]", ")", ")", "\n", "]", ")", ",", "\n", "mixed_5", "=", "Mixed", "(", "[", "\n", "(", "'conv'", ",", "Tower", "(", "[", "\n", "(", "'conv'", ",", "L", ".", "Convolution2D", "(", "768", ",", "192", ",", "1", ",", "stride", "=", "1", ",", "pad", "=", "0", ")", ")", ",", "\n", "(", "'bn_conv'", ",", "L", ".", "BatchNormalization", "(", "192", ")", ")", ",", "\n", "(", "'_relu'", ",", "F", ".", "relu", ")", "\n", "]", ")", ")", ",", "\n", "(", "'tower'", ",", "Tower", "(", "[", "\n", "(", "'conv'", ",", "L", ".", "Convolution2D", "(", "768", ",", "160", ",", "1", ",", "stride", "=", "1", ",", "pad", "=", "0", ")", ")", ",", "\n", "(", "'bn_conv'", ",", "L", ".", "BatchNormalization", "(", "160", ")", ")", ",", "\n", "(", "'_relu'", ",", "F", ".", "relu", ")", ",", "\n", "(", "'conv_1'", ",", "L", ".", "Convolution2D", "(", "160", ",", "160", ",", "(", "1", ",", "7", ")", ",", "stride", "=", "1", ",", "pad", "=", "(", "0", ",", "3", ")", ")", ")", ",", "\n", "(", "'bn_conv_1'", ",", "L", ".", "BatchNormalization", "(", "160", ")", ")", ",", "\n", "(", "'_relu_1'", ",", "F", ".", "relu", ")", ",", "\n", "(", "'conv_2'", ",", "L", ".", "Convolution2D", "(", "160", ",", "192", ",", "(", "7", ",", "1", ")", ",", "stride", "=", "1", ",", "pad", "=", "(", "3", ",", "0", ")", ")", ")", ",", "\n", "(", "'bn_conv_2'", ",", "L", ".", "BatchNormalization", "(", "192", ")", ")", ",", "\n", "(", "'_relu_2'", ",", "F", ".", "relu", ")", "\n", "]", ")", ")", ",", "\n", "(", "'tower_1'", ",", "Tower", "(", "[", "\n", "(", "'conv'", ",", "L", ".", "Convolution2D", "(", "768", ",", "160", ",", "1", ",", "stride", "=", "1", ",", "pad", "=", "0", ")", ")", ",", "\n", "(", "'bn_conv'", ",", "L", ".", "BatchNormalization", "(", "160", ")", ")", ",", "\n", "(", "'_relu'", ",", "F", ".", "relu", ")", ",", "\n", "(", "'conv_1'", ",", "L", ".", "Convolution2D", "(", "160", ",", "160", ",", "(", "7", ",", "1", ")", ",", "stride", "=", "1", ",", "pad", "=", "(", "3", ",", "0", ")", ")", ")", ",", "\n", "(", "'bn_conv_1'", ",", "L", ".", "BatchNormalization", "(", "160", ")", ")", ",", "\n", "(", "'_relu_1'", ",", "F", ".", "relu", ")", ",", "\n", "(", "'conv_2'", ",", "L", ".", "Convolution2D", "(", "160", ",", "160", ",", "(", "1", ",", "7", ")", ",", "stride", "=", "1", ",", "pad", "=", "(", "0", ",", "3", ")", ")", ")", ",", "\n", "(", "'bn_conv_2'", ",", "L", ".", "BatchNormalization", "(", "160", ")", ")", ",", "\n", "(", "'_relu_2'", ",", "F", ".", "relu", ")", ",", "\n", "(", "'conv_3'", ",", "L", ".", "Convolution2D", "(", "160", ",", "160", ",", "(", "7", ",", "1", ")", ",", "stride", "=", "1", ",", "pad", "=", "(", "3", ",", "0", ")", ")", ")", ",", "\n", "(", "'bn_conv_3'", ",", "L", ".", "BatchNormalization", "(", "160", ")", ")", ",", "\n", "(", "'_relu_3'", ",", "F", ".", "relu", ")", ",", "\n", "(", "'conv_4'", ",", "L", ".", "Convolution2D", "(", "160", ",", "192", ",", "(", "1", ",", "7", ")", ",", "stride", "=", "1", ",", "pad", "=", "(", "0", ",", "3", ")", ")", ")", ",", "\n", "(", "'bn_conv_4'", ",", "L", ".", "BatchNormalization", "(", "192", ")", ")", ",", "\n", "(", "'_relu_4'", ",", "F", ".", "relu", ")", "\n", "]", ")", ")", ",", "\n", "(", "'tower_2'", ",", "Tower", "(", "[", "\n", "(", "'_pooling'", ",", "_average_pooling_2d", ")", ",", "\n", "(", "'conv'", ",", "L", ".", "Convolution2D", "(", "768", ",", "192", ",", "1", ",", "stride", "=", "1", ",", "pad", "=", "0", ")", ")", ",", "\n", "(", "'bn_conv'", ",", "L", ".", "BatchNormalization", "(", "192", ")", ")", ",", "\n", "(", "'_relu'", ",", "F", ".", "relu", ")", "\n", "]", ")", ")", "\n", "]", ")", ",", "\n", "mixed_6", "=", "Mixed", "(", "[", "\n", "(", "'conv'", ",", "Tower", "(", "[", "\n", "(", "'conv'", ",", "L", ".", "Convolution2D", "(", "768", ",", "192", ",", "1", ",", "stride", "=", "1", ",", "pad", "=", "0", ")", ")", ",", "\n", "(", "'bn_conv'", ",", "L", ".", "BatchNormalization", "(", "192", ")", ")", ",", "\n", "(", "'_relu'", ",", "F", ".", "relu", ")", "\n", "]", ")", ")", ",", "\n", "(", "'tower'", ",", "Tower", "(", "[", "\n", "(", "'conv'", ",", "L", ".", "Convolution2D", "(", "768", ",", "160", ",", "1", ",", "stride", "=", "1", ",", "pad", "=", "0", ")", ")", ",", "\n", "(", "'bn_conv'", ",", "L", ".", "BatchNormalization", "(", "160", ")", ")", ",", "\n", "(", "'_relu'", ",", "F", ".", "relu", ")", ",", "\n", "(", "'conv_1'", ",", "L", ".", "Convolution2D", "(", "160", ",", "160", ",", "(", "1", ",", "7", ")", ",", "stride", "=", "1", ",", "pad", "=", "(", "0", ",", "3", ")", ")", ")", ",", "\n", "(", "'bn_conv_1'", ",", "L", ".", "BatchNormalization", "(", "160", ")", ")", ",", "\n", "(", "'_relu_1'", ",", "F", ".", "relu", ")", ",", "\n", "(", "'conv_2'", ",", "L", ".", "Convolution2D", "(", "160", ",", "192", ",", "(", "7", ",", "1", ")", ",", "stride", "=", "1", ",", "pad", "=", "(", "3", ",", "0", ")", ")", ")", ",", "\n", "(", "'bn_conv_2'", ",", "L", ".", "BatchNormalization", "(", "192", ")", ")", ",", "\n", "(", "'_relu_2'", ",", "F", ".", "relu", ")", "\n", "]", ")", ")", ",", "\n", "(", "'tower_1'", ",", "Tower", "(", "[", "\n", "(", "'conv'", ",", "L", ".", "Convolution2D", "(", "768", ",", "160", ",", "1", ",", "stride", "=", "1", ",", "pad", "=", "0", ")", ")", ",", "\n", "(", "'bn_conv'", ",", "L", ".", "BatchNormalization", "(", "160", ")", ")", ",", "\n", "(", "'_relu'", ",", "F", ".", "relu", ")", ",", "\n", "(", "'conv_1'", ",", "L", ".", "Convolution2D", "(", "160", ",", "160", ",", "(", "7", ",", "1", ")", ",", "stride", "=", "1", ",", "pad", "=", "(", "3", ",", "0", ")", ")", ")", ",", "\n", "(", "'bn_conv_1'", ",", "L", ".", "BatchNormalization", "(", "160", ")", ")", ",", "\n", "(", "'_relu_1'", ",", "F", ".", "relu", ")", ",", "\n", "(", "'conv_2'", ",", "L", ".", "Convolution2D", "(", "160", ",", "160", ",", "(", "1", ",", "7", ")", ",", "stride", "=", "1", ",", "pad", "=", "(", "0", ",", "3", ")", ")", ")", ",", "\n", "(", "'bn_conv_2'", ",", "L", ".", "BatchNormalization", "(", "160", ")", ")", ",", "\n", "(", "'_relu_2'", ",", "F", ".", "relu", ")", ",", "\n", "(", "'conv_3'", ",", "L", ".", "Convolution2D", "(", "160", ",", "160", ",", "(", "7", ",", "1", ")", ",", "stride", "=", "1", ",", "pad", "=", "(", "3", ",", "0", ")", ")", ")", ",", "\n", "(", "'bn_conv_3'", ",", "L", ".", "BatchNormalization", "(", "160", ")", ")", ",", "\n", "(", "'_relu_3'", ",", "F", ".", "relu", ")", ",", "\n", "(", "'conv_4'", ",", "L", ".", "Convolution2D", "(", "160", ",", "192", ",", "(", "1", ",", "7", ")", ",", "stride", "=", "1", ",", "pad", "=", "(", "0", ",", "3", ")", ")", ")", ",", "\n", "(", "'bn_conv_4'", ",", "L", ".", "BatchNormalization", "(", "192", ")", ")", ",", "\n", "(", "'_relu_4'", ",", "F", ".", "relu", ")", "\n", "]", ")", ")", ",", "\n", "(", "'tower_2'", ",", "Tower", "(", "[", "\n", "(", "'_pooling'", ",", "_average_pooling_2d", ")", ",", "\n", "(", "'conv'", ",", "L", ".", "Convolution2D", "(", "768", ",", "192", ",", "1", ",", "stride", "=", "1", ",", "pad", "=", "0", ")", ")", ",", "\n", "(", "'bn_conv'", ",", "L", ".", "BatchNormalization", "(", "192", ")", ")", ",", "\n", "(", "'_relu'", ",", "F", ".", "relu", ")", "\n", "]", ")", ")", "\n", "]", ")", ",", "\n", "mixed_7", "=", "Mixed", "(", "[", "\n", "(", "'conv'", ",", "Tower", "(", "[", "\n", "(", "'conv'", ",", "L", ".", "Convolution2D", "(", "768", ",", "192", ",", "1", ",", "stride", "=", "1", ",", "pad", "=", "0", ")", ")", ",", "\n", "(", "'bn_conv'", ",", "L", ".", "BatchNormalization", "(", "192", ")", ")", ",", "\n", "(", "'_relu'", ",", "F", ".", "relu", ")", "\n", "]", ")", ")", ",", "\n", "(", "'tower'", ",", "Tower", "(", "[", "\n", "(", "'conv'", ",", "L", ".", "Convolution2D", "(", "768", ",", "192", ",", "1", ",", "stride", "=", "1", ",", "pad", "=", "0", ")", ")", ",", "\n", "(", "'bn_conv'", ",", "L", ".", "BatchNormalization", "(", "192", ")", ")", ",", "\n", "(", "'_relu'", ",", "F", ".", "relu", ")", ",", "\n", "(", "'conv_1'", ",", "L", ".", "Convolution2D", "(", "192", ",", "192", ",", "(", "1", ",", "7", ")", ",", "stride", "=", "1", ",", "pad", "=", "(", "0", ",", "3", ")", ")", ")", ",", "\n", "(", "'bn_conv_1'", ",", "L", ".", "BatchNormalization", "(", "192", ")", ")", ",", "\n", "(", "'_relu_1'", ",", "F", ".", "relu", ")", ",", "\n", "(", "'conv_2'", ",", "L", ".", "Convolution2D", "(", "192", ",", "192", ",", "(", "7", ",", "1", ")", ",", "stride", "=", "1", ",", "pad", "=", "(", "3", ",", "0", ")", ")", ")", ",", "\n", "(", "'bn_conv_2'", ",", "L", ".", "BatchNormalization", "(", "192", ")", ")", ",", "\n", "(", "'_relu_2'", ",", "F", ".", "relu", ")", "\n", "]", ")", ")", ",", "\n", "(", "'tower_1'", ",", "Tower", "(", "[", "\n", "(", "'conv'", ",", "L", ".", "Convolution2D", "(", "768", ",", "192", ",", "1", ",", "stride", "=", "1", ",", "pad", "=", "0", ")", ")", ",", "\n", "(", "'bn_conv'", ",", "L", ".", "BatchNormalization", "(", "192", ")", ")", ",", "\n", "(", "'_relu'", ",", "F", ".", "relu", ")", ",", "\n", "(", "'conv_1'", ",", "L", ".", "Convolution2D", "(", "192", ",", "192", ",", "(", "7", ",", "1", ")", ",", "stride", "=", "1", ",", "pad", "=", "(", "3", ",", "0", ")", ")", ")", ",", "\n", "(", "'bn_conv_1'", ",", "L", ".", "BatchNormalization", "(", "192", ")", ")", ",", "\n", "(", "'_relu_1'", ",", "F", ".", "relu", ")", ",", "\n", "(", "'conv_2'", ",", "L", ".", "Convolution2D", "(", "192", ",", "192", ",", "(", "1", ",", "7", ")", ",", "stride", "=", "1", ",", "pad", "=", "(", "0", ",", "3", ")", ")", ")", ",", "\n", "(", "'bn_conv_2'", ",", "L", ".", "BatchNormalization", "(", "192", ")", ")", ",", "\n", "(", "'_relu_2'", ",", "F", ".", "relu", ")", ",", "\n", "(", "'conv_3'", ",", "L", ".", "Convolution2D", "(", "192", ",", "192", ",", "(", "7", ",", "1", ")", ",", "stride", "=", "1", ",", "pad", "=", "(", "3", ",", "0", ")", ")", ")", ",", "\n", "(", "'bn_conv_3'", ",", "L", ".", "BatchNormalization", "(", "192", ")", ")", ",", "\n", "(", "'_relu_3'", ",", "F", ".", "relu", ")", ",", "\n", "(", "'conv_4'", ",", "L", ".", "Convolution2D", "(", "192", ",", "192", ",", "(", "1", ",", "7", ")", ",", "stride", "=", "1", ",", "pad", "=", "(", "0", ",", "3", ")", ")", ")", ",", "\n", "(", "'bn_conv_4'", ",", "L", ".", "BatchNormalization", "(", "192", ")", ")", ",", "\n", "(", "'_relu_4'", ",", "F", ".", "relu", ")", "\n", "]", ")", ")", ",", "\n", "(", "'tower_2'", ",", "Tower", "(", "[", "\n", "(", "'_pooling'", ",", "_average_pooling_2d", ")", ",", "\n", "(", "'conv'", ",", "L", ".", "Convolution2D", "(", "768", ",", "192", ",", "1", ",", "stride", "=", "1", ",", "pad", "=", "0", ")", ")", ",", "\n", "(", "'bn_conv'", ",", "L", ".", "BatchNormalization", "(", "192", ")", ")", ",", "\n", "(", "'_relu'", ",", "F", ".", "relu", ")", "\n", "]", ")", ")", "\n", "]", ")", ",", "\n", "mixed_8", "=", "Mixed", "(", "[", "\n", "(", "'tower'", ",", "Tower", "(", "[", "\n", "(", "'conv'", ",", "L", ".", "Convolution2D", "(", "768", ",", "192", ",", "1", ",", "stride", "=", "1", ",", "pad", "=", "0", ")", ")", ",", "\n", "(", "'bn_conv'", ",", "L", ".", "BatchNormalization", "(", "192", ")", ")", ",", "\n", "(", "'_relu'", ",", "F", ".", "relu", ")", ",", "\n", "(", "'conv_1'", ",", "L", ".", "Convolution2D", "(", "192", ",", "320", ",", "3", ",", "stride", "=", "2", ",", "pad", "=", "0", ")", ")", ",", "\n", "(", "'bn_conv_1'", ",", "L", ".", "BatchNormalization", "(", "320", ")", ")", ",", "\n", "(", "'_relu_1'", ",", "F", ".", "relu", ")", "\n", "]", ")", ")", ",", "\n", "(", "'tower_1'", ",", "Tower", "(", "[", "\n", "(", "'conv'", ",", "L", ".", "Convolution2D", "(", "768", ",", "192", ",", "1", ",", "stride", "=", "1", ",", "pad", "=", "0", ")", ")", ",", "\n", "(", "'bn_conv'", ",", "L", ".", "BatchNormalization", "(", "192", ")", ")", ",", "\n", "(", "'_relu'", ",", "F", ".", "relu", ")", ",", "\n", "(", "'conv_1'", ",", "L", ".", "Convolution2D", "(", "192", ",", "192", ",", "(", "1", ",", "7", ")", ",", "stride", "=", "1", ",", "pad", "=", "(", "0", ",", "3", ")", ")", ")", ",", "\n", "(", "'bn_conv_1'", ",", "L", ".", "BatchNormalization", "(", "192", ")", ")", ",", "\n", "(", "'_relu_1'", ",", "F", ".", "relu", ")", ",", "\n", "(", "'conv_2'", ",", "L", ".", "Convolution2D", "(", "192", ",", "192", ",", "(", "7", ",", "1", ")", ",", "stride", "=", "1", ",", "pad", "=", "(", "3", ",", "0", ")", ")", ")", ",", "\n", "(", "'bn_conv_2'", ",", "L", ".", "BatchNormalization", "(", "192", ")", ")", ",", "\n", "(", "'_relu_2'", ",", "F", ".", "relu", ")", ",", "\n", "(", "'conv_3'", ",", "L", ".", "Convolution2D", "(", "192", ",", "192", ",", "3", ",", "stride", "=", "2", ",", "pad", "=", "0", ")", ")", ",", "\n", "(", "'bn_conv_3'", ",", "L", ".", "BatchNormalization", "(", "192", ")", ")", ",", "\n", "(", "'_relu_3'", ",", "F", ".", "relu", ")", "\n", "]", ")", ")", ",", "\n", "(", "'pool'", ",", "Tower", "(", "[", "\n", "(", "'_pooling'", ",", "_max_pooling_2d_320", ")", "\n", "]", ")", ")", "\n", "]", ")", ",", "\n", "mixed_9", "=", "Mixed", "(", "[", "\n", "(", "'conv'", ",", "Tower", "(", "[", "\n", "(", "'conv'", ",", "L", ".", "Convolution2D", "(", "1280", ",", "320", ",", "1", ",", "stride", "=", "1", ",", "pad", "=", "0", ")", ")", ",", "\n", "(", "'bn_conv'", ",", "L", ".", "BatchNormalization", "(", "320", ")", ")", ",", "\n", "(", "'_relu'", ",", "F", ".", "relu", ")", ",", "\n", "]", ")", ")", ",", "\n", "(", "'tower'", ",", "Tower", "(", "[", "\n", "(", "'conv'", ",", "L", ".", "Convolution2D", "(", "1280", ",", "384", ",", "1", ",", "stride", "=", "1", ",", "pad", "=", "0", ")", ")", ",", "\n", "(", "'bn_conv'", ",", "L", ".", "BatchNormalization", "(", "384", ")", ")", ",", "\n", "(", "'_relu'", ",", "F", ".", "relu", ")", ",", "\n", "(", "'mixed'", ",", "Mixed", "(", "[", "\n", "(", "'conv'", ",", "Tower", "(", "[", "\n", "(", "'conv'", ",", "L", ".", "Convolution2D", "(", "384", ",", "384", ",", "(", "1", ",", "3", ")", ",", "stride", "=", "1", ",", "pad", "=", "(", "0", ",", "1", ")", ")", ")", ",", "\n", "(", "'bn_conv'", ",", "L", ".", "BatchNormalization", "(", "384", ")", ")", ",", "\n", "(", "'_relu'", ",", "F", ".", "relu", ")", ",", "\n", "]", ")", ")", ",", "\n", "(", "'conv_1'", ",", "Tower", "(", "[", "\n", "(", "'conv_1'", ",", "L", ".", "Convolution2D", "(", "384", ",", "384", ",", "(", "3", ",", "1", ")", ",", "stride", "=", "1", ",", "pad", "=", "(", "1", ",", "0", ")", ")", ")", ",", "\n", "(", "'bn_conv_1'", ",", "L", ".", "BatchNormalization", "(", "384", ")", ")", ",", "\n", "(", "'_relu_1'", ",", "F", ".", "relu", ")", ",", "\n", "]", ")", ")", "\n", "]", ")", ")", "\n", "]", ")", ")", ",", "\n", "(", "'tower_1'", ",", "Tower", "(", "[", "\n", "(", "'conv'", ",", "L", ".", "Convolution2D", "(", "1280", ",", "448", ",", "1", ",", "stride", "=", "1", ",", "pad", "=", "0", ")", ")", ",", "\n", "(", "'bn_conv'", ",", "L", ".", "BatchNormalization", "(", "448", ")", ")", ",", "\n", "(", "'_relu'", ",", "F", ".", "relu", ")", ",", "\n", "(", "'conv_1'", ",", "L", ".", "Convolution2D", "(", "448", ",", "384", ",", "3", ",", "stride", "=", "1", ",", "pad", "=", "1", ")", ")", ",", "\n", "(", "'bn_conv_1'", ",", "L", ".", "BatchNormalization", "(", "384", ")", ")", ",", "\n", "(", "'_relu_1'", ",", "F", ".", "relu", ")", ",", "\n", "(", "'mixed'", ",", "Mixed", "(", "[", "\n", "(", "'conv'", ",", "Tower", "(", "[", "\n", "(", "'conv'", ",", "L", ".", "Convolution2D", "(", "384", ",", "384", ",", "(", "1", ",", "3", ")", ",", "stride", "=", "1", ",", "pad", "=", "(", "0", ",", "1", ")", ")", ")", ",", "\n", "(", "'bn_conv'", ",", "L", ".", "BatchNormalization", "(", "384", ")", ")", ",", "\n", "(", "'_relu'", ",", "F", ".", "relu", ")", ",", "\n", "]", ")", ")", ",", "\n", "(", "'conv_1'", ",", "Tower", "(", "[", "\n", "(", "'conv_1'", ",", "L", ".", "Convolution2D", "(", "384", ",", "384", ",", "(", "3", ",", "1", ")", ",", "stride", "=", "1", ",", "pad", "=", "(", "1", ",", "0", ")", ")", ")", ",", "\n", "(", "'bn_conv_1'", ",", "L", ".", "BatchNormalization", "(", "384", ")", ")", ",", "\n", "(", "'_relu_1'", ",", "F", ".", "relu", ")", ",", "\n", "]", ")", ")", "\n", "]", ")", ")", "\n", "]", ")", ")", ",", "\n", "(", "'tower_2'", ",", "Tower", "(", "[", "\n", "(", "'_pooling'", ",", "_average_pooling_2d", ")", ",", "\n", "(", "'conv'", ",", "L", ".", "Convolution2D", "(", "1280", ",", "192", ",", "1", ",", "stride", "=", "1", ",", "pad", "=", "0", ")", ")", ",", "\n", "(", "'bn_conv'", ",", "L", ".", "BatchNormalization", "(", "192", ")", ")", ",", "\n", "(", "'_relu'", ",", "F", ".", "relu", ")", "\n", "]", ")", ")", "\n", "]", ")", ",", "\n", "mixed_10", "=", "Mixed", "(", "[", "\n", "(", "'conv'", ",", "Tower", "(", "[", "\n", "(", "'conv'", ",", "L", ".", "Convolution2D", "(", "2048", ",", "320", ",", "1", ",", "stride", "=", "1", ",", "pad", "=", "0", ")", ")", ",", "\n", "(", "'bn_conv'", ",", "L", ".", "BatchNormalization", "(", "320", ")", ")", ",", "\n", "(", "'_relu'", ",", "F", ".", "relu", ")", ",", "\n", "]", ")", ")", ",", "\n", "(", "'tower'", ",", "Tower", "(", "[", "\n", "(", "'conv'", ",", "L", ".", "Convolution2D", "(", "2048", ",", "384", ",", "1", ",", "stride", "=", "1", ",", "pad", "=", "0", ")", ")", ",", "\n", "(", "'bn_conv'", ",", "L", ".", "BatchNormalization", "(", "384", ")", ")", ",", "\n", "(", "'_relu'", ",", "F", ".", "relu", ")", ",", "\n", "(", "'mixed'", ",", "Mixed", "(", "[", "\n", "(", "'conv'", ",", "Tower", "(", "[", "\n", "(", "'conv'", ",", "L", ".", "Convolution2D", "(", "384", ",", "384", ",", "(", "1", ",", "3", ")", ",", "stride", "=", "1", ",", "pad", "=", "(", "0", ",", "1", ")", ")", ")", ",", "\n", "(", "'bn_conv'", ",", "L", ".", "BatchNormalization", "(", "384", ")", ")", ",", "\n", "(", "'_relu'", ",", "F", ".", "relu", ")", ",", "\n", "]", ")", ")", ",", "\n", "(", "'conv_1'", ",", "Tower", "(", "[", "\n", "(", "'conv_1'", ",", "L", ".", "Convolution2D", "(", "384", ",", "384", ",", "(", "3", ",", "1", ")", ",", "stride", "=", "1", ",", "pad", "=", "(", "1", ",", "0", ")", ")", ")", ",", "\n", "(", "'bn_conv_1'", ",", "L", ".", "BatchNormalization", "(", "384", ")", ")", ",", "\n", "(", "'_relu_1'", ",", "F", ".", "relu", ")", ",", "\n", "]", ")", ")", "\n", "]", ")", ")", "\n", "]", ")", ")", ",", "\n", "(", "'tower_1'", ",", "Tower", "(", "[", "\n", "(", "'conv'", ",", "L", ".", "Convolution2D", "(", "2048", ",", "448", ",", "1", ",", "stride", "=", "1", ",", "pad", "=", "0", ")", ")", ",", "\n", "(", "'bn_conv'", ",", "L", ".", "BatchNormalization", "(", "448", ")", ")", ",", "\n", "(", "'_relu'", ",", "F", ".", "relu", ")", ",", "\n", "(", "'conv_1'", ",", "L", ".", "Convolution2D", "(", "448", ",", "384", ",", "3", ",", "stride", "=", "1", ",", "pad", "=", "1", ")", ")", ",", "\n", "(", "'bn_conv_1'", ",", "L", ".", "BatchNormalization", "(", "384", ")", ")", ",", "\n", "(", "'_relu_1'", ",", "F", ".", "relu", ")", ",", "\n", "(", "'mixed'", ",", "Mixed", "(", "[", "\n", "(", "'conv'", ",", "Tower", "(", "[", "\n", "(", "'conv'", ",", "L", ".", "Convolution2D", "(", "384", ",", "384", ",", "(", "1", ",", "3", ")", ",", "stride", "=", "1", ",", "pad", "=", "(", "0", ",", "1", ")", ")", ")", ",", "\n", "(", "'bn_conv'", ",", "L", ".", "BatchNormalization", "(", "384", ")", ")", ",", "\n", "(", "'_relu'", ",", "F", ".", "relu", ")", "\n", "]", ")", ")", ",", "\n", "(", "'conv_1'", ",", "Tower", "(", "[", "\n", "(", "'conv_1'", ",", "L", ".", "Convolution2D", "(", "384", ",", "384", ",", "(", "3", ",", "1", ")", ",", "stride", "=", "1", ",", "pad", "=", "(", "1", ",", "0", ")", ")", ")", ",", "\n", "(", "'bn_conv_1'", ",", "L", ".", "BatchNormalization", "(", "384", ")", ")", ",", "\n", "(", "'_relu_1'", ",", "F", ".", "relu", ")", "\n", "]", ")", ")", "\n", "]", ")", ")", "\n", "]", ")", ")", ",", "\n", "(", "'tower_2'", ",", "Tower", "(", "[", "\n", "(", "'_pooling'", ",", "_max_pooling_2d", ")", ",", "\n", "(", "'conv'", ",", "L", ".", "Convolution2D", "(", "2048", ",", "192", ",", "1", ",", "stride", "=", "1", ",", "pad", "=", "0", ")", ")", ",", "\n", "(", "'bn_conv'", ",", "L", ".", "BatchNormalization", "(", "192", ")", ")", ",", "\n", "(", "'_relu'", ",", "F", ".", "relu", ")", "\n", "]", ")", ")", "\n", "]", ")", ",", "\n", "logit", "=", "L", ".", "Linear", "(", "2048", ",", "1008", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.inception_score.Inception.__call__": [[581, 656], ["chainer.functions.relu", "chainer.functions.relu", "chainer.functions.relu", "chainer.functions.max_pooling_2d", "chainer.functions.relu", "chainer.functions.relu", "chainer.functions.max_pooling_2d", "inception_score.Inception.mixed", "inception_score.Inception.mixed_1", "inception_score.Inception.mixed_2", "inception_score.Inception.mixed_3", "inception_score.Inception.mixed_4", "inception_score.Inception.mixed_5", "inception_score.Inception.mixed_6", "inception_score.Inception.mixed_7", "inception_score.Inception.mixed_8", "inception_score.Inception.mixed_9", "inception_score.Inception.mixed_10", "chainer.functions.average_pooling_2d", "chainer.functions.reshape", "inception_score.Inception.bn_conv", "inception_score.Inception.bn_conv_1", "inception_score.Inception.bn_conv_2", "inception_score.Inception.bn_conv_3", "inception_score.Inception.bn_conv_4", "inception_score.Inception.logit", "chainer.functions.softmax", "inception_score.Inception.conv", "inception_score.Inception.conv_1", "inception_score.Inception.conv_2", "inception_score.Inception.conv_3", "inception_score.Inception.conv_4"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ",", "get_feature", "=", "False", ")", ":", "\n", "        ", "\"\"\"Input dims are (batch_size, 3, 299, 299).\"\"\"", "\n", "\n", "# assert x.shape[1:] == (3, 299, 299)", "\n", "\n", "x", "-=", "128.0", "\n", "x", "*=", "0.0078125", "\n", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "bn_conv", "(", "self", ".", "conv", "(", "x", ")", ")", ")", "\n", "# assert h.shape[1:] == (32, 149, 149)", "\n", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "bn_conv_1", "(", "self", ".", "conv_1", "(", "h", ")", ")", ")", "\n", "# assert h.shape[1:] == (32, 147, 147)", "\n", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "bn_conv_2", "(", "self", ".", "conv_2", "(", "h", ")", ")", ")", "\n", "# assert h.shape[1:] == (64, 147, 147)", "\n", "\n", "h", "=", "F", ".", "max_pooling_2d", "(", "h", ",", "3", ",", "stride", "=", "2", ",", "pad", "=", "0", ")", "\n", "# assert h.shape[1:] == (64, 73, 73)", "\n", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "bn_conv_3", "(", "self", ".", "conv_3", "(", "h", ")", ")", ")", "\n", "# assert h.shape[1:] == (80, 73, 73)", "\n", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "bn_conv_4", "(", "self", ".", "conv_4", "(", "h", ")", ")", ")", "\n", "# assert h.shape[1:] == (192, 71, 71)", "\n", "\n", "h", "=", "F", ".", "max_pooling_2d", "(", "h", ",", "3", ",", "stride", "=", "2", ",", "pad", "=", "0", ")", "\n", "# assert h.shape[1:] == (192, 35, 35)", "\n", "\n", "h", "=", "self", ".", "mixed", "(", "h", ")", "\n", "# assert h.shape[1:] == (256, 35, 35)", "\n", "\n", "h", "=", "self", ".", "mixed_1", "(", "h", ")", "\n", "# assert h.shape[1:] == (288, 35, 35)", "\n", "\n", "h", "=", "self", ".", "mixed_2", "(", "h", ")", "\n", "# assert h.shape[1:] == (288, 35, 35)", "\n", "\n", "h", "=", "self", ".", "mixed_3", "(", "h", ")", "\n", "# assert h.shape[1:] == (768, 17, 17)", "\n", "\n", "h", "=", "self", ".", "mixed_4", "(", "h", ")", "\n", "# assert h.shape[1:] == (768, 17, 17)", "\n", "\n", "h", "=", "self", ".", "mixed_5", "(", "h", ")", "\n", "# assert h.shape[1:] == (768, 17, 17)", "\n", "\n", "h", "=", "self", ".", "mixed_6", "(", "h", ")", "\n", "# assert h.shape[1:] == (768, 17, 17)", "\n", "\n", "h", "=", "self", ".", "mixed_7", "(", "h", ")", "\n", "# assert h.shape[1:] == (768, 17, 17)", "\n", "\n", "h", "=", "self", ".", "mixed_8", "(", "h", ")", "\n", "# assert h.shape[1:] == (1280, 8, 8)", "\n", "\n", "h", "=", "self", ".", "mixed_9", "(", "h", ")", "\n", "# assert h.shape[1:] == (2048, 8, 8)", "\n", "\n", "h", "=", "self", ".", "mixed_10", "(", "h", ")", "\n", "# assert h.shape[1:] == (2048, 8, 8)", "\n", "\n", "h", "=", "F", ".", "average_pooling_2d", "(", "h", ",", "8", ",", "1", ")", "\n", "# assert h.shape[1:] == (2048, 1, 1)", "\n", "h", "=", "F", ".", "reshape", "(", "h", ",", "(", "-", "1", ",", "2048", ")", ")", "\n", "\n", "if", "get_feature", ":", "\n", "            ", "return", "h", "\n", "", "else", ":", "\n", "            ", "h", "=", "self", ".", "logit", "(", "h", ")", "\n", "h", "=", "F", ".", "softmax", "(", "h", ")", "\n", "\n", "# assert h.shape[1:] == (1008,)", "\n", "\n", "return", "h", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.inception_score.inception_forward": [[12, 41], ["int", "xp.empty", "range", "math.ceil", "min", "xp.asarray", "chainer.Variable", "chainer.functions.resize_images", "chainer.using_config", "chainer.using_config", "model", "float", "float"], "function", ["None"], ["def", "inception_forward", "(", "model", ",", "ims", ",", "batch_size", ")", ":", "\n", "    ", "n", ",", "c", ",", "w", ",", "h", "=", "ims", ".", "shape", "\n", "n_batches", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "n", ")", "/", "float", "(", "batch_size", ")", ")", ")", "\n", "\n", "xp", "=", "model", ".", "xp", "\n", "\n", "# Compute the softmax predicitions for for all images, split into batches", "\n", "# in order to fit in memory", "\n", "\n", "ys", "=", "xp", ".", "empty", "(", "(", "n", ",", "1008", ")", ",", "dtype", "=", "xp", ".", "float32", ")", "# Softmax container", "\n", "\n", "for", "i", "in", "range", "(", "n_batches", ")", ":", "\n", "        ", "batch_start", "=", "(", "i", "*", "batch_size", ")", "\n", "batch_end", "=", "min", "(", "(", "i", "+", "1", ")", "*", "batch_size", ",", "n", ")", "\n", "\n", "ims_batch", "=", "ims", "[", "batch_start", ":", "batch_end", "]", "\n", "ims_batch", "=", "xp", ".", "asarray", "(", "ims_batch", ")", "# To GPU if using CuPy", "\n", "ims_batch", "=", "Variable", "(", "ims_batch", ")", "\n", "\n", "# Resize image to the shape expected by the inception module", "\n", "if", "(", "w", ",", "h", ")", "!=", "(", "299", ",", "299", ")", ":", "\n", "            ", "ims_batch", "=", "F", ".", "resize_images", "(", "ims_batch", ",", "(", "299", ",", "299", ")", ")", "# bilinear", "\n", "\n", "# Feed images to the inception module to get the softmax predictions", "\n", "", "with", "chainer", ".", "using_config", "(", "'train'", ",", "False", ")", ",", "chainer", ".", "using_config", "(", "'enable_backprop'", ",", "False", ")", ":", "\n", "            ", "y", "=", "model", "(", "ims_batch", ")", "\n", "", "ys", "[", "batch_start", ":", "batch_end", "]", "=", "y", ".", "data", "\n", "", "ys", "=", "ys", "[", ":", ",", "1", ":", "1001", "]", "# 0 and 1001-1008 are the dummies", "\n", "return", "ys", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.inception_score.inception_score": [[43, 72], ["int", "print", "print", "inception_score.inception_forward", "xp.empty", "range", "math.ceil", "xp.mean", "xp.exp", "xp.mean", "xp.std", "xp.sum", "float", "float", "xp.log", "xp.log", "xp.expand_dims", "xp.mean"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.inception_score.inception_forward"], ["", "def", "inception_score", "(", "model", ",", "ims", ",", "batch_size", "=", "100", ",", "splits", "=", "10", ")", ":", "\n", "    ", "\"\"\"Compute the inception score for given images.\n\n    Default batch_size is 100 and split size is 10. Please refer to the\n    official implementation. It is recommended to to use at least 50000\n    images to obtain a reliable score.\n\n    Reference:\n    https://github.com/openai/improved-gan/blob/master/inception_score/model.py\n\n    \"\"\"", "\n", "n", ",", "c", ",", "w", ",", "h", "=", "ims", ".", "shape", "\n", "n_batches", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "n", ")", "/", "float", "(", "batch_size", ")", ")", ")", "\n", "xp", "=", "model", ".", "xp", "\n", "\n", "print", "(", "'batch_size:{}, n_ims{}, n_batches{}'", ".", "format", "(", "batch_size", ",", "n", ",", "n_batches", ")", ")", "\n", "print", "(", "'Calculating inception scores...'", ")", "\n", "ys", "=", "inception_forward", "(", "model", ",", "ims", ",", "batch_size", ")", "\n", "# Compute the inception score based on the softmax predictions of the", "\n", "# inception module.", "\n", "scores", "=", "xp", ".", "empty", "(", "(", "splits", ")", ",", "dtype", "=", "xp", ".", "float32", ")", "# Split inception scores", "\n", "for", "i", "in", "range", "(", "splits", ")", ":", "\n", "        ", "part", "=", "ys", "[", "(", "i", "*", "n", "//", "splits", ")", ":", "(", "(", "i", "+", "1", ")", "*", "n", "//", "splits", ")", ",", ":", "]", "\n", "kl", "=", "part", "*", "(", "xp", ".", "log", "(", "part", ")", "-", "\n", "xp", ".", "log", "(", "xp", ".", "expand_dims", "(", "xp", ".", "mean", "(", "part", ",", "0", ")", ",", "0", ")", ")", ")", "\n", "kl", "=", "xp", ".", "mean", "(", "xp", ".", "sum", "(", "kl", ",", "1", ")", ")", "\n", "scores", "[", "i", "]", "=", "xp", ".", "exp", "(", "kl", ")", "\n", "\n", "", "return", "xp", ".", "mean", "(", "scores", ")", ",", "xp", ".", "std", "(", "scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.inception_score.inception_accuracy": [[74, 107], ["isinstance", "int", "print", "print", "inception_score.inception_forward", "chainer.functions.accuracy", "int", "print", "print", "inception_score.inception_forward", "ys_list.append", "sum", "len", "math.ceil", "math.ceil", "float", "float", "float", "float"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.inception_score.inception_forward", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.inception_score.inception_forward"], ["", "def", "inception_accuracy", "(", "model", ",", "ims", ",", "labels", ",", "batch_size", "=", "100", ",", "splits", "=", "10", ")", ":", "\n", "    ", "\"\"\"Compute the inception score for given images.\n\n     Default batch_size is 100 and split size is 10. Please refer to the\n     official implementation. It is recommended to to use at least 50000\n     images to obtain a reliable score.\n\n     Reference:\n     https://github.com/openai/improved-gan/blob/master/inception_score/model.py\n\n     \"\"\"", "\n", "if", "isinstance", "(", "ims", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "ims_list", "=", "ims", "\n", "ys_list", "=", "[", "]", "\n", "for", "ims", "in", "ims_list", ":", "\n", "            ", "n", ",", "c", ",", "w", ",", "h", "=", "ims", ".", "shape", "\n", "n_batches", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "n", ")", "/", "float", "(", "batch_size", ")", ")", ")", "\n", "xp", "=", "model", ".", "xp", "\n", "\n", "print", "(", "'batch_size:{}, n_ims{}, n_batches{}'", ".", "format", "(", "batch_size", ",", "n", ",", "n_batches", ")", ")", "\n", "print", "(", "'Calculating inception accuracy...'", ")", "\n", "ys", "=", "inception_forward", "(", "model", ",", "ims", ",", "batch_size", ")", "\n", "ys_list", ".", "append", "(", "ys", ")", "\n", "", "ys", "=", "sum", "(", "ys_list", ")", "/", "len", "(", "ys_list", ")", "\n", "", "else", ":", "\n", "        ", "n", ",", "c", ",", "w", ",", "h", "=", "ims", ".", "shape", "\n", "n_batches", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "n", ")", "/", "float", "(", "batch_size", ")", ")", ")", "\n", "xp", "=", "model", ".", "xp", "\n", "\n", "print", "(", "'batch_size:{}, n_ims{}, n_batches{}'", ".", "format", "(", "batch_size", ",", "n", ",", "n_batches", ")", ")", "\n", "print", "(", "'Calculating inception accuracy...'", ")", "\n", "ys", "=", "inception_forward", "(", "model", ",", "ims", ",", "batch_size", ")", "\n", "", "return", "F", ".", "accuracy", "(", "ys", ",", "labels", ")", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.inception_score._average_pooling_2d": [[145, 147], ["chainer.functions.average_pooling_2d"], "function", ["None"], ["", "", "def", "_average_pooling_2d", "(", "h", ")", ":", "\n", "    ", "return", "F", ".", "average_pooling_2d", "(", "h", ",", "3", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.inception_score._max_pooling_2d": [[149, 151], ["chainer.functions.max_pooling_2d"], "function", ["None"], ["", "def", "_max_pooling_2d", "(", "h", ")", ":", "\n", "    ", "return", "F", ".", "max_pooling_2d", "(", "h", ",", "3", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.inception_score._max_pooling_2d_320": [[153, 155], ["chainer.functions.max_pooling_2d"], "function", ["None"], ["", "def", "_max_pooling_2d_320", "(", "h", ")", ":", "\n", "    ", "return", "F", ".", "max_pooling_2d", "(", "h", ",", "3", ",", "2", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.parse_args": [[29, 33], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--outfile'", ",", "type", "=", "str", ",", "default", "=", "'inception_score.model'", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_conv": [[35, 45], ["sess.graph.get_tensor_by_name().eval", "W.transpose.transpose", "sess.graph.get_tensor_by_name"], "function", ["None"], ["", "def", "copy_conv", "(", "sess", ",", "tftensor", ",", "layer", ")", ":", "\n", "\n", "    ", "\"\"\"Copy TensorFlow convolution layer weights to Chainer model.\"\"\"", "\n", "\n", "W", "=", "sess", ".", "graph", ".", "get_tensor_by_name", "(", "'{}/conv2d_params:0'", ".", "format", "(", "tftensor", ")", ")", ".", "eval", "(", ")", "\n", "W", "=", "W", ".", "transpose", "(", "(", "3", ",", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "assert", "W", ".", "shape", "==", "layer", ".", "W", ".", "data", ".", "shape", "\n", "\n", "layer", ".", "W", ".", "data", "=", "W", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_bn": [[47, 68], ["sess.graph.get_tensor_by_name().eval", "sess.graph.get_tensor_by_name().eval", "sess.graph.get_tensor_by_name().eval", "sess.graph.get_tensor_by_name().eval", "sess.graph.get_operation_by_name().get_attr", "sess.graph.get_tensor_by_name", "sess.graph.get_tensor_by_name", "sess.graph.get_tensor_by_name", "sess.graph.get_tensor_by_name", "sess.graph.get_operation_by_name"], "function", ["None"], ["", "def", "copy_bn", "(", "sess", ",", "tftensor", ",", "layer", ")", ":", "\n", "\n", "    ", "\"\"\"Copy TensorFlow batch normalization params weights to Chainer model.\"\"\"", "\n", "\n", "gamma", "=", "sess", ".", "graph", ".", "get_tensor_by_name", "(", "'{}/gamma:0'", ".", "format", "(", "tftensor", ")", ")", ".", "eval", "(", ")", "\n", "beta", "=", "sess", ".", "graph", ".", "get_tensor_by_name", "(", "'{}/beta:0'", ".", "format", "(", "tftensor", ")", ")", ".", "eval", "(", ")", "\n", "avg_mean", "=", "sess", ".", "graph", ".", "get_tensor_by_name", "(", "'{}/moving_mean:0'", ".", "format", "(", "tftensor", ")", ")", ".", "eval", "(", ")", "\n", "avg_var", "=", "sess", ".", "graph", ".", "get_tensor_by_name", "(", "'{}/moving_variance:0'", ".", "format", "(", "tftensor", ")", ")", ".", "eval", "(", ")", "\n", "eps", "=", "sess", ".", "graph", ".", "get_operation_by_name", "(", "tftensor", ")", ".", "get_attr", "(", "'variance_epsilon'", ")", "\n", "\n", "assert", "layer", ".", "beta", ".", "data", ".", "shape", "==", "beta", ".", "shape", "\n", "assert", "layer", ".", "gamma", ".", "data", ".", "shape", "==", "gamma", ".", "shape", "\n", "assert", "layer", ".", "avg_mean", ".", "shape", "==", "avg_mean", ".", "shape", "\n", "assert", "layer", ".", "avg_var", ".", "shape", "==", "avg_var", ".", "shape", "\n", "assert", "eps", ">", "0.0", "\n", "\n", "layer", ".", "beta", ".", "data", "=", "beta", "\n", "layer", ".", "gamma", ".", "data", "=", "gamma", "\n", "layer", ".", "avg_mean", "=", "avg_mean", "\n", "layer", ".", "avg_var", "=", "avg_var", "\n", "layer", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_inception": [[70, 180], ["print", "download.copy_conv", "download.copy_bn", "download.copy_conv", "download.copy_bn", "download.copy_conv", "download.copy_bn", "download.copy_conv", "download.copy_bn", "download.copy_conv", "download.copy_bn", "print", "sess.graph.get_operation_by_name().inputs[].eval", "sess.graph.get_tensor_by_name().eval", "print", "download.copy_conv", "download.copy_bn", "print", "download.copy_conv", "download.copy_bn", "print", "download.copy_conv", "download.copy_bn", "print", "print", "download.copy_conv", "download.copy_bn", "download.copy_conv", "download.copy_bn", "download.copy_conv", "download.copy_bn", "download.copy_conv", "download.copy_bn", "download.copy_conv", "download.copy_bn", "download.copy_conv", "download.copy_bn", "download.copy_conv", "download.copy_bn", "download.copy_conv", "download.copy_bn", "download.copy_conv", "download.copy_bn", "sess.graph.get_tensor_by_name", "download.copy_conv", "download.copy_bn", "download.copy_conv", "download.copy_bn", "download.copy_conv", "download.copy_bn", "download.copy_conv", "download.copy_bn", "download.copy_conv", "download.copy_bn", "download.copy_conv", "download.copy_bn", "download.copy_conv", "download.copy_bn", "download.copy_conv", "download.copy_bn", "download.copy_conv", "download.copy_bn", "download.copy_conv", "download.copy_bn", "download.copy_conv", "download.copy_bn", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "sess.graph.get_operation_by_name", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_conv", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_bn", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_conv", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_bn", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_conv", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_bn", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_conv", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_bn", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_conv", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_bn", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_conv", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_bn", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_conv", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_bn", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_conv", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_bn", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_conv", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_bn", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_conv", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_bn", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_conv", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_bn", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_conv", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_bn", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_conv", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_bn", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_conv", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_bn", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_conv", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_bn", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_conv", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_bn", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_conv", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_bn", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_conv", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_bn", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_conv", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_bn", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_conv", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_bn", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_conv", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_bn", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_conv", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_bn", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_conv", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_bn", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_conv", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_bn", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_conv", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_bn", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_conv", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_bn", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_conv", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_bn", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_conv", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_bn"], ["", "def", "copy_inception", "(", "sess", ",", "model", ")", ":", "\n", "\n", "    ", "\"\"\"Copy weights and params from the graph in the given TensorFlow session\n    to the Chainer chain.\"\"\"", "\n", "\n", "print", "(", "'Copying first layers ...'", ")", "\n", "copy_conv", "(", "sess", ",", "'conv'", ",", "model", ".", "conv", ")", "\n", "copy_bn", "(", "sess", ",", "'conv/batchnorm'", ",", "model", ".", "bn_conv", ")", "\n", "copy_conv", "(", "sess", ",", "'conv_1'", ",", "model", ".", "conv_1", ")", "\n", "copy_bn", "(", "sess", ",", "'conv_1/batchnorm'", ",", "model", ".", "bn_conv_1", ")", "\n", "copy_conv", "(", "sess", ",", "'conv_2'", ",", "model", ".", "conv_2", ")", "\n", "copy_bn", "(", "sess", ",", "'conv_2/batchnorm'", ",", "model", ".", "bn_conv_2", ")", "\n", "copy_conv", "(", "sess", ",", "'conv_3'", ",", "model", ".", "conv_3", ")", "\n", "copy_bn", "(", "sess", ",", "'conv_3/batchnorm'", ",", "model", ".", "bn_conv_3", ")", "\n", "copy_conv", "(", "sess", ",", "'conv_4'", ",", "model", ".", "conv_4", ")", "\n", "copy_bn", "(", "sess", ",", "'conv_4/batchnorm'", ",", "model", ".", "bn_conv_4", ")", "\n", "\n", "for", "m", "in", "[", "'mixed'", ",", "'mixed_1'", ",", "'mixed_2'", "]", ":", "\n", "        ", "print", "(", "'Copying '", ",", "m", ",", "'...'", ")", "\n", "copy_conv", "(", "sess", ",", "'{}/conv'", ".", "format", "(", "m", ")", ",", "getattr", "(", "model", ",", "m", ")", ".", "conv", ".", "conv", ")", "\n", "copy_bn", "(", "sess", ",", "'{}/conv/batchnorm'", ".", "format", "(", "m", ")", ",", "getattr", "(", "model", ",", "m", ")", ".", "conv", ".", "bn_conv", ")", "\n", "\n", "for", "t", "in", "[", "'tower'", ",", "'tower_1'", ",", "'tower_2'", "]", ":", "\n", "            ", "copy_conv", "(", "sess", ",", "'{}/{}/conv'", ".", "format", "(", "m", ",", "t", ")", ",", "getattr", "(", "getattr", "(", "model", ",", "m", ")", ",", "t", ")", ".", "conv", ")", "\n", "copy_bn", "(", "sess", ",", "'{}/{}/conv/batchnorm'", ".", "format", "(", "m", ",", "t", ")", ",", "getattr", "(", "getattr", "(", "model", ",", "m", ")", ",", "t", ")", ".", "bn_conv", ")", "\n", "\n", "if", "t", "==", "'tower'", "or", "t", "==", "'tower_1'", ":", "\n", "                ", "copy_conv", "(", "sess", ",", "'{}/{}/conv_1'", ".", "format", "(", "m", ",", "t", ")", ",", "getattr", "(", "getattr", "(", "model", ",", "m", ")", ",", "t", ")", ".", "conv_1", ")", "\n", "copy_bn", "(", "sess", ",", "'{}/{}/conv_1/batchnorm'", ".", "format", "(", "m", ",", "t", ")", ",", "getattr", "(", "getattr", "(", "model", ",", "m", ")", ",", "t", ")", ".", "bn_conv_1", ")", "\n", "\n", "", "if", "t", "==", "'tower_1'", ":", "\n", "                ", "copy_conv", "(", "sess", ",", "'{}/{}/conv_2'", ".", "format", "(", "m", ",", "t", ")", ",", "getattr", "(", "getattr", "(", "model", ",", "m", ")", ",", "t", ")", ".", "conv_2", ")", "\n", "copy_bn", "(", "sess", ",", "'{}/{}/conv_2/batchnorm'", ".", "format", "(", "m", ",", "t", ")", ",", "getattr", "(", "getattr", "(", "model", ",", "m", ")", ",", "t", ")", ".", "bn_conv_2", ")", "\n", "\n", "", "", "", "for", "m", "in", "[", "'mixed_3'", "]", ":", "\n", "        ", "print", "(", "'Copying '", ",", "m", ",", "'...'", ")", "\n", "copy_conv", "(", "sess", ",", "'{}/conv'", ".", "format", "(", "m", ")", ",", "getattr", "(", "model", ",", "m", ")", ".", "conv", ".", "conv", ")", "\n", "copy_bn", "(", "sess", ",", "'{}/conv/batchnorm'", ".", "format", "(", "m", ")", ",", "getattr", "(", "model", ",", "m", ")", ".", "conv", ".", "bn_conv", ")", "\n", "\n", "for", "t", "in", "[", "'tower'", "]", ":", "\n", "            ", "copy_conv", "(", "sess", ",", "'{}/{}/conv'", ".", "format", "(", "m", ",", "t", ")", ",", "getattr", "(", "getattr", "(", "model", ",", "m", ")", ",", "t", ")", ".", "conv", ")", "\n", "copy_bn", "(", "sess", ",", "'{}/{}/conv/batchnorm'", ".", "format", "(", "m", ",", "t", ")", ",", "getattr", "(", "getattr", "(", "model", ",", "m", ")", ",", "t", ")", ".", "bn_conv", ")", "\n", "copy_conv", "(", "sess", ",", "'{}/{}/conv_1'", ".", "format", "(", "m", ",", "t", ")", ",", "getattr", "(", "getattr", "(", "model", ",", "m", ")", ",", "t", ")", ".", "conv_1", ")", "\n", "copy_bn", "(", "sess", ",", "'{}/{}/conv_1/batchnorm'", ".", "format", "(", "m", ",", "t", ")", ",", "getattr", "(", "getattr", "(", "model", ",", "m", ")", ",", "t", ")", ".", "bn_conv_1", ")", "\n", "copy_conv", "(", "sess", ",", "'{}/{}/conv_2'", ".", "format", "(", "m", ",", "t", ")", ",", "getattr", "(", "getattr", "(", "model", ",", "m", ")", ",", "t", ")", ".", "conv_2", ")", "\n", "copy_bn", "(", "sess", ",", "'{}/{}/conv_2/batchnorm'", ".", "format", "(", "m", ",", "t", ")", ",", "getattr", "(", "getattr", "(", "model", ",", "m", ")", ",", "t", ")", ".", "bn_conv_2", ")", "\n", "\n", "", "", "for", "m", "in", "[", "'mixed_4'", ",", "'mixed_5'", ",", "'mixed_6'", ",", "'mixed_7'", "]", ":", "\n", "        ", "print", "(", "'Copying '", ",", "m", ",", "'...'", ")", "\n", "copy_conv", "(", "sess", ",", "'{}/conv'", ".", "format", "(", "m", ")", ",", "getattr", "(", "model", ",", "m", ")", ".", "conv", ".", "conv", ")", "\n", "copy_bn", "(", "sess", ",", "'{}/conv/batchnorm'", ".", "format", "(", "m", ")", ",", "getattr", "(", "model", ",", "m", ")", ".", "conv", ".", "bn_conv", ")", "\n", "\n", "for", "t", "in", "[", "'tower'", ",", "'tower_1'", ",", "'tower_2'", "]", ":", "\n", "            ", "copy_conv", "(", "sess", ",", "'{}/{}/conv'", ".", "format", "(", "m", ",", "t", ")", ",", "getattr", "(", "getattr", "(", "model", ",", "m", ")", ",", "t", ")", ".", "conv", ")", "\n", "copy_bn", "(", "sess", ",", "'{}/{}/conv/batchnorm'", ".", "format", "(", "m", ",", "t", ")", ",", "getattr", "(", "getattr", "(", "model", ",", "m", ")", ",", "t", ")", ".", "bn_conv", ")", "\n", "\n", "if", "t", "==", "'tower'", "or", "t", "==", "'tower_1'", ":", "\n", "                ", "copy_conv", "(", "sess", ",", "'{}/{}/conv_1'", ".", "format", "(", "m", ",", "t", ")", ",", "getattr", "(", "getattr", "(", "model", ",", "m", ")", ",", "t", ")", ".", "conv_1", ")", "\n", "copy_bn", "(", "sess", ",", "'{}/{}/conv_1/batchnorm'", ".", "format", "(", "m", ",", "t", ")", ",", "getattr", "(", "getattr", "(", "model", ",", "m", ")", ",", "t", ")", ".", "bn_conv_1", ")", "\n", "copy_conv", "(", "sess", ",", "'{}/{}/conv_2'", ".", "format", "(", "m", ",", "t", ")", ",", "getattr", "(", "getattr", "(", "model", ",", "m", ")", ",", "t", ")", ".", "conv_2", ")", "\n", "copy_bn", "(", "sess", ",", "'{}/{}/conv_2/batchnorm'", ".", "format", "(", "m", ",", "t", ")", ",", "getattr", "(", "getattr", "(", "model", ",", "m", ")", ",", "t", ")", ".", "bn_conv_2", ")", "\n", "\n", "", "if", "t", "==", "'tower_1'", ":", "\n", "                ", "copy_conv", "(", "sess", ",", "'{}/{}/conv_3'", ".", "format", "(", "m", ",", "t", ")", ",", "getattr", "(", "getattr", "(", "model", ",", "m", ")", ",", "t", ")", ".", "conv_3", ")", "\n", "copy_bn", "(", "sess", ",", "'{}/{}/conv_3/batchnorm'", ".", "format", "(", "m", ",", "t", ")", ",", "getattr", "(", "getattr", "(", "model", ",", "m", ")", ",", "t", ")", ".", "bn_conv_3", ")", "\n", "copy_conv", "(", "sess", ",", "'{}/{}/conv_4'", ".", "format", "(", "m", ",", "t", ")", ",", "getattr", "(", "getattr", "(", "model", ",", "m", ")", ",", "t", ")", ".", "conv_4", ")", "\n", "copy_bn", "(", "sess", ",", "'{}/{}/conv_4/batchnorm'", ".", "format", "(", "m", ",", "t", ")", ",", "getattr", "(", "getattr", "(", "model", ",", "m", ")", ",", "t", ")", ".", "bn_conv_4", ")", "\n", "\n", "", "", "", "for", "m", "in", "[", "'mixed_8'", "]", ":", "\n", "        ", "print", "(", "'Copying '", ",", "m", ",", "'...'", ")", "\n", "for", "t", "in", "[", "'tower'", ",", "'tower_1'", "]", ":", "\n", "            ", "copy_conv", "(", "sess", ",", "'{}/{}/conv'", ".", "format", "(", "m", ",", "t", ")", ",", "getattr", "(", "getattr", "(", "model", ",", "m", ")", ",", "t", ")", ".", "conv", ")", "\n", "copy_bn", "(", "sess", ",", "'{}/{}/conv/batchnorm'", ".", "format", "(", "m", ",", "t", ")", ",", "getattr", "(", "getattr", "(", "model", ",", "m", ")", ",", "t", ")", ".", "bn_conv", ")", "\n", "copy_conv", "(", "sess", ",", "'{}/{}/conv_1'", ".", "format", "(", "m", ",", "t", ")", ",", "getattr", "(", "getattr", "(", "model", ",", "m", ")", ",", "t", ")", ".", "conv_1", ")", "\n", "copy_bn", "(", "sess", ",", "'{}/{}/conv_1/batchnorm'", ".", "format", "(", "m", ",", "t", ")", ",", "getattr", "(", "getattr", "(", "model", ",", "m", ")", ",", "t", ")", ".", "bn_conv_1", ")", "\n", "\n", "if", "t", "==", "'tower_1'", ":", "\n", "                ", "copy_conv", "(", "sess", ",", "'{}/{}/conv_2'", ".", "format", "(", "m", ",", "t", ")", ",", "getattr", "(", "getattr", "(", "model", ",", "m", ")", ",", "t", ")", ".", "conv_2", ")", "\n", "copy_bn", "(", "sess", ",", "'{}/{}/conv_2/batchnorm'", ".", "format", "(", "m", ",", "t", ")", ",", "getattr", "(", "getattr", "(", "model", ",", "m", ")", ",", "t", ")", ".", "bn_conv_2", ")", "\n", "copy_conv", "(", "sess", ",", "'{}/{}/conv_3'", ".", "format", "(", "m", ",", "t", ")", ",", "getattr", "(", "getattr", "(", "model", ",", "m", ")", ",", "t", ")", ".", "conv_3", ")", "\n", "copy_bn", "(", "sess", ",", "'{}/{}/conv_3/batchnorm'", ".", "format", "(", "m", ",", "t", ")", ",", "getattr", "(", "getattr", "(", "model", ",", "m", ")", ",", "t", ")", ".", "bn_conv_3", ")", "\n", "\n", "", "", "", "for", "m", "in", "[", "'mixed_9'", ",", "'mixed_10'", "]", ":", "\n", "        ", "print", "(", "'Copying '", ",", "m", ",", "'...'", ")", "\n", "copy_conv", "(", "sess", ",", "'{}/conv'", ".", "format", "(", "m", ")", ",", "getattr", "(", "model", ",", "m", ")", ".", "conv", ".", "conv", ")", "\n", "copy_bn", "(", "sess", ",", "'{}/conv/batchnorm'", ".", "format", "(", "m", ")", ",", "getattr", "(", "model", ",", "m", ")", ".", "conv", ".", "bn_conv", ")", "\n", "\n", "for", "t", "in", "[", "'tower'", ",", "'tower_1'", ",", "'tower_2'", "]", ":", "\n", "            ", "copy_conv", "(", "sess", ",", "'{}/{}/conv'", ".", "format", "(", "m", ",", "t", ")", ",", "getattr", "(", "getattr", "(", "model", ",", "m", ")", ",", "t", ")", ".", "conv", ")", "\n", "copy_bn", "(", "sess", ",", "'{}/{}/conv/batchnorm'", ".", "format", "(", "m", ",", "t", ")", ",", "getattr", "(", "getattr", "(", "model", ",", "m", ")", ",", "t", ")", ".", "bn_conv", ")", "\n", "\n", "if", "t", "==", "'tower'", "or", "t", "==", "'tower_1'", ":", "\n", "                ", "copy_conv", "(", "sess", ",", "'{}/{}/mixed/conv'", ".", "format", "(", "m", ",", "t", ")", ",", "getattr", "(", "getattr", "(", "model", ",", "m", ")", ",", "t", ")", ".", "mixed", ".", "conv", ".", "conv", ")", "\n", "copy_bn", "(", "sess", ",", "'{}/{}/mixed/conv/batchnorm'", ".", "format", "(", "m", ",", "t", ")", ",", "getattr", "(", "getattr", "(", "model", ",", "m", ")", ",", "t", ")", ".", "mixed", ".", "conv", ".", "bn_conv", ")", "\n", "copy_conv", "(", "sess", ",", "'{}/{}/mixed/conv_1'", ".", "format", "(", "m", ",", "t", ")", ",", "getattr", "(", "getattr", "(", "model", ",", "m", ")", ",", "t", ")", ".", "mixed", ".", "conv_1", ".", "conv_1", ")", "\n", "copy_bn", "(", "sess", ",", "'{}/{}/mixed/conv_1/batchnorm'", ".", "format", "(", "m", ",", "t", ")", ",", "getattr", "(", "getattr", "(", "model", ",", "m", ")", ",", "t", ")", ".", "mixed", ".", "conv_1", ".", "bn_conv_1", ")", "\n", "\n", "", "if", "t", "==", "'tower_1'", ":", "\n", "                ", "copy_conv", "(", "sess", ",", "'{}/{}/conv_1'", ".", "format", "(", "m", ",", "t", ")", ",", "getattr", "(", "getattr", "(", "model", ",", "m", ")", ",", "t", ")", ".", "conv_1", ")", "\n", "copy_bn", "(", "sess", ",", "'{}/{}/conv_1/batchnorm'", ".", "format", "(", "m", ",", "t", ")", ",", "getattr", "(", "getattr", "(", "model", ",", "m", ")", ",", "t", ")", ".", "bn_conv_1", ")", "\n", "\n", "", "", "", "print", "(", "'Copying logit...'", ")", "\n", "w", "=", "sess", ".", "graph", ".", "get_operation_by_name", "(", "\"softmax/logits/MatMul\"", ")", ".", "inputs", "[", "1", "]", ".", "eval", "(", ")", "\n", "b", "=", "sess", ".", "graph", ".", "get_tensor_by_name", "(", "\"softmax/biases:0\"", ")", ".", "eval", "(", ")", "\n", "\n", "assert", "w", ".", "T", ".", "shape", "==", "model", ".", "logit", ".", "W", ".", "shape", "\n", "assert", "b", ".", "shape", "==", "model", ".", "logit", ".", "b", ".", "shape", "\n", "\n", "model", ".", "logit", ".", "W", ".", "data", "=", "w", ".", "T", "\n", "model", ".", "logit", ".", "b", ".", "data", "=", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.download_tf_params": [[182, 203], ["os.path.join", "tarfile.open().extractall", "os.path.exists", "os.makedirs", "DATA_URL.split", "os.path.exists", "six.moves.urllib.request.urlretrieve", "os.stat", "print", "print", "sys.stdout.write", "sys.stdout.flush", "tarfile.open", "float", "float"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.tflib.plot.flush"], ["", "def", "download_tf_params", "(", ")", ":", "\n", "\n", "    ", "\"\"\"Download and extract pretrained TensorFlow inception model params.\"\"\"", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "MODEL_DIR", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "MODEL_DIR", ")", "\n", "", "filename", "=", "DATA_URL", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "MODEL_DIR", ",", "filename", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "filepath", ")", ":", "\n", "        ", "def", "_progress", "(", "count", ",", "block_size", ",", "total_size", ")", ":", "\n", "            ", "sys", ".", "stdout", ".", "write", "(", "'\\r>> Downloading %s %.1f%%'", "%", "(", "\n", "filename", ",", "float", "(", "count", "*", "block_size", ")", "/", "float", "(", "total_size", ")", "*", "100.0", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "", "filepath", ",", "_", "=", "urllib", ".", "request", ".", "urlretrieve", "(", "DATA_URL", ",", "filepath", ",", "_progress", ")", "\n", "statinfo", "=", "os", ".", "stat", "(", "filepath", ")", "\n", "print", "(", ")", "\n", "print", "(", "'Succesfully downloaded'", ",", "filename", ",", "statinfo", ".", "st_size", ",", "'bytes.'", ")", "\n", "\n", "", "tarfile", ".", "open", "(", "filepath", ",", "'r:gz'", ")", ".", "extractall", "(", "MODEL_DIR", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.set_tf_params": [[205, 224], ["tensorflow.ConfigProto", "tensorflow.gfile.FastGFile", "tensorflow.GraphDef", "tf.GraphDef.ParseFromString", "tensorflow.import_graph_def", "tensorflow.Session", "download.copy_inception", "os.path.join", "f.read", "tensorflow.summary.FileWriter"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.copy_inception"], ["", "def", "set_tf_params", "(", "model", ",", "write_graph", "=", "False", ")", ":", "\n", "\n", "    ", "\"\"\"Update the parameters of the given chainer model with the downloaded\n    TensorFlow model.\"\"\"", "\n", "\n", "with", "tf", ".", "gfile", ".", "FastGFile", "(", "os", ".", "path", ".", "join", "(", "\n", "MODEL_DIR", ",", "'classify_image_graph_def.pb'", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "graph_def", "=", "tf", ".", "GraphDef", "(", ")", "\n", "graph_def", ".", "ParseFromString", "(", "f", ".", "read", "(", ")", ")", "\n", "_", "=", "tf", ".", "import_graph_def", "(", "graph_def", ",", "name", "=", "''", ")", "\n", "\n", "if", "write_graph", ":", "\n", "# Write graph to file so that it can be visualized using TensorBoard", "\n", "            ", "summary_writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "'data'", ",", "graph", "=", "graph_def", ")", "\n", "\n", "", "", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "# Do not allocale the whole GPU mem", "\n", "with", "tf", ".", "Session", "(", "config", "=", "config", ")", "as", "sess", ":", "\n", "        ", "copy_inception", "(", "sess", ",", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.main": [[226, 242], ["download.download_tf_params", "inception_score.Inception", "download.set_tf_params", "print", "chainer.serializers.save_hdf5"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.download_tf_params", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.set_tf_params"], ["", "", "def", "main", "(", "args", ")", ":", "\n", "    ", "outfile", "=", "args", ".", "outfile", "\n", "\n", "# Download pretrained TensorFlow model", "\n", "download_tf_params", "(", ")", "\n", "\n", "# Create empty Chainer inception model", "\n", "model", "=", "Inception", "(", ")", "\n", "\n", "# Update parameters of Chainer model with pretrained TensorFlow model", "\n", "set_tf_params", "(", "model", ")", "\n", "\n", "# TODO(hvy): Test score similarity with the original implementation", "\n", "\n", "print", "(", "'Saving '", ",", "outfile", ",", "'...'", ")", "\n", "serializers", ".", "save_hdf5", "(", "outfile", ",", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.miscs.random_samples.sample_continuous": [[5, 14], ["xp.random.randn().astype", "xp.random.uniform().astype", "xp.random.randn", "xp.random.uniform"], "function", ["None"], ["def", "sample_continuous", "(", "dim", ",", "batchsize", ",", "distribution", "=", "'normal'", ",", "xp", "=", "np", ")", ":", "\n", "    ", "if", "distribution", "==", "\"normal\"", ":", "\n", "        ", "return", "xp", ".", "random", ".", "randn", "(", "batchsize", ",", "dim", ")", ".", "astype", "(", "xp", ".", "float32", ")", "\n", "", "elif", "distribution", "==", "\"uniform\"", ":", "\n", "        ", "return", "xp", ".", "random", ".", "uniform", "(", "-", "1", ",", "1", ",", "(", "batchsize", ",", "dim", ")", ")", ".", "astype", "(", "xp", ".", "float32", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.miscs.random_samples.sample_categorical": [[16, 21], ["xp.random.randint().astype", "xp.random.randint"], "function", ["None"], ["", "", "def", "sample_categorical", "(", "n_cat", ",", "batchsize", ",", "distribution", "=", "'uniform'", ",", "xp", "=", "np", ")", ":", "\n", "    ", "if", "distribution", "==", "'uniform'", ":", "\n", "        ", "return", "xp", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "n_cat", ",", "size", "=", "(", "batchsize", ")", ")", ".", "astype", "(", "xp", ".", "int32", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.miscs.random_samples.sample_from_categorical_distribution": [[23, 34], ["chainer.cuda.get_array_module", "chainer.cuda.get_array_module.argmax().astype", "chainer.cuda.get_array_module.argmax", "chainer.cuda.get_array_module.log", "chainer.cuda.get_array_module.random.gumbel"], "function", ["None"], ["", "", "def", "sample_from_categorical_distribution", "(", "batch_probs", ")", ":", "\n", "    ", "\"\"\"Sample a batch of actions from a batch of action probabilities.\n    Args:\n        batch_probs (ndarray): batch of action probabilities BxA\n    Returns:\n        ndarray consisting of sampled action indices\n    \"\"\"", "\n", "xp", "=", "chainer", ".", "cuda", ".", "get_array_module", "(", "batch_probs", ")", "\n", "return", "xp", ".", "argmax", "(", "\n", "xp", ".", "log", "(", "batch_probs", ")", "+", "xp", ".", "random", ".", "gumbel", "(", "size", "=", "batch_probs", ".", "shape", ")", ",", "\n", "axis", "=", "1", ")", ".", "astype", "(", "np", ".", "int32", ",", "copy", "=", "False", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.links.sn_linear.SNLinear.__init__": [[46, 56], ["chainer.links.connection.linear.Linear.__init__", "numpy.random.normal().astype", "sn_linear.SNLinear.register_persistent", "numpy.random.normal"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.resblocks.OptimizedBlock.__init__"], ["def", "__init__", "(", "self", ",", "in_size", ",", "out_size", ",", "use_gamma", "=", "False", ",", "nobias", "=", "False", ",", "\n", "initialW", "=", "None", ",", "initial_bias", "=", "None", ",", "Ip", "=", "1", ",", "factor", "=", "None", ")", ":", "\n", "        ", "self", ".", "Ip", "=", "Ip", "\n", "self", ".", "use_gamma", "=", "use_gamma", "\n", "self", ".", "factor", "=", "factor", "\n", "super", "(", "SNLinear", ",", "self", ")", ".", "__init__", "(", "\n", "in_size", ",", "out_size", ",", "nobias", ",", "initialW", ",", "initial_bias", "\n", ")", "\n", "self", ".", "u", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "1", ",", "out_size", ")", ")", ".", "astype", "(", "dtype", "=", "\"f\"", ")", "\n", "self", ".", "register_persistent", "(", "'u'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.links.sn_linear.SNLinear.W_bar": [[57, 71], ["source.functions.max_sv.max_singular_value", "chainer.functions.array.broadcast.broadcast_to", "hasattr", "chainer.functions.array.broadcast.broadcast_to.reshape", "chainer.functions.array.broadcast.broadcast_to"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.functions.max_sv.max_singular_value"], ["", "@", "property", "\n", "def", "W_bar", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Spectral Normalized Weight\n        \"\"\"", "\n", "sigma", ",", "_u", ",", "_", "=", "max_singular_value", "(", "self", ".", "W", ",", "self", ".", "u", ",", "self", ".", "Ip", ")", "\n", "if", "self", ".", "factor", ":", "\n", "            ", "sigma", "=", "sigma", "/", "self", ".", "factor", "\n", "", "sigma", "=", "broadcast_to", "(", "sigma", ".", "reshape", "(", "(", "1", ",", "1", ")", ")", ",", "self", ".", "W", ".", "shape", ")", "\n", "self", ".", "u", "[", ":", "]", "=", "_u", "\n", "if", "hasattr", "(", "self", ",", "'gamma'", ")", ":", "\n", "            ", "return", "broadcast_to", "(", "self", ".", "gamma", ",", "self", ".", "W", ".", "shape", ")", "*", "self", ".", "W", "/", "sigma", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "W", "/", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.links.sn_linear.SNLinear._initialize_params": [[72, 78], ["super()._initialize_params", "numpy.linalg.svd", "sn_linear.SNLinear.init_scope", "chainer.Parameter"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.links.sn_convolution_2d.SNConvolution2D._initialize_params"], ["", "", "def", "_initialize_params", "(", "self", ",", "in_size", ")", ":", "\n", "        ", "super", "(", "SNLinear", ",", "self", ")", ".", "_initialize_params", "(", "in_size", ")", "\n", "if", "self", ".", "use_gamma", ":", "\n", "            ", "_", ",", "s", ",", "_", "=", "np", ".", "linalg", ".", "svd", "(", "self", ".", "W", ".", "data", ")", "\n", "with", "self", ".", "init_scope", "(", ")", ":", "\n", "                ", "self", ".", "gamma", "=", "chainer", ".", "Parameter", "(", "s", "[", "0", "]", ",", "(", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.links.sn_linear.SNLinear.__call__": [[79, 92], ["chainer.functions.connection.linear.linear", "sn_linear.SNLinear._initialize_params"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.links.sn_convolution_2d.SNConvolution2D._initialize_params"], ["", "", "", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Applies the linear layer.\n\n        Args:\n            x (~chainer.Variable): Batch of input vectors.\n\n        Returns:\n            ~chainer.Variable: Output of the linear layer.\n\n        \"\"\"", "\n", "if", "self", ".", "W", ".", "data", "is", "None", ":", "\n", "            ", "self", ".", "_initialize_params", "(", "x", ".", "size", "//", "x", ".", "shape", "[", "0", "]", ")", "\n", "", "return", "linear", ".", "linear", "(", "x", ",", "self", ".", "W_bar", ",", "self", ".", "b", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.links.sn_convolution_2d.SNConvolution2D.__init__": [[58, 68], ["chainer.links.connection.convolution_2d.Convolution2D.__init__", "numpy.random.normal().astype", "sn_convolution_2d.SNConvolution2D.register_persistent", "numpy.random.normal"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.resblocks.OptimizedBlock.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "ksize", ",", "stride", "=", "1", ",", "pad", "=", "0", ",", "\n", "nobias", "=", "False", ",", "initialW", "=", "None", ",", "initial_bias", "=", "None", ",", "use_gamma", "=", "False", ",", "Ip", "=", "1", ",", "factor", "=", "None", ")", ":", "\n", "        ", "self", ".", "Ip", "=", "Ip", "\n", "self", ".", "use_gamma", "=", "use_gamma", "\n", "self", ".", "factor", "=", "factor", "\n", "super", "(", "SNConvolution2D", ",", "self", ")", ".", "__init__", "(", "\n", "in_channels", ",", "out_channels", ",", "ksize", ",", "stride", ",", "pad", ",", "\n", "nobias", ",", "initialW", ",", "initial_bias", ")", "\n", "self", ".", "u", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "1", ",", "out_channels", ")", ")", ".", "astype", "(", "dtype", "=", "\"f\"", ")", "\n", "self", ".", "register_persistent", "(", "'u'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.links.sn_convolution_2d.SNConvolution2D.W_bar": [[69, 86], ["sn_convolution_2d.SNConvolution2D.W.reshape", "source.functions.max_sv.max_singular_value", "chainer.functions.array.broadcast.broadcast_to", "hasattr", "chainer.functions.array.broadcast.broadcast_to.reshape", "chainer.functions.array.broadcast.broadcast_to"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.functions.max_sv.max_singular_value"], ["", "@", "property", "\n", "def", "W_bar", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Spectrally Normalized Weight\n        \"\"\"", "\n", "W_mat", "=", "self", ".", "W", ".", "reshape", "(", "self", ".", "W", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "sigma", ",", "_u", ",", "_", "=", "max_singular_value", "(", "W_mat", ",", "self", ".", "u", ",", "self", ".", "Ip", ")", "\n", "if", "self", ".", "factor", ":", "\n", "            ", "sigma", "=", "sigma", "/", "self", ".", "factor", "\n", "", "sigma", "=", "broadcast_to", "(", "sigma", ".", "reshape", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "self", ".", "W", ".", "shape", ")", "\n", "if", "chainer", ".", "config", ".", "train", ":", "\n", "# Update estimated 1st singular vector", "\n", "            ", "self", ".", "u", "[", ":", "]", "=", "_u", "\n", "", "if", "hasattr", "(", "self", ",", "'gamma'", ")", ":", "\n", "            ", "return", "broadcast_to", "(", "self", ".", "gamma", ",", "self", ".", "W", ".", "shape", ")", "*", "self", ".", "W", "/", "sigma", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "W", "/", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.links.sn_convolution_2d.SNConvolution2D._initialize_params": [[87, 94], ["super()._initialize_params", "sn_convolution_2d.SNConvolution2D.W.data.reshape", "numpy.linalg.svd", "sn_convolution_2d.SNConvolution2D.init_scope", "chainer.Parameter"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.links.sn_convolution_2d.SNConvolution2D._initialize_params"], ["", "", "def", "_initialize_params", "(", "self", ",", "in_size", ")", ":", "\n", "        ", "super", "(", "SNConvolution2D", ",", "self", ")", ".", "_initialize_params", "(", "in_size", ")", "\n", "if", "self", ".", "use_gamma", ":", "\n", "            ", "W_mat", "=", "self", ".", "W", ".", "data", ".", "reshape", "(", "self", ".", "W", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "_", ",", "s", ",", "_", "=", "np", ".", "linalg", ".", "svd", "(", "W_mat", ")", "\n", "with", "self", ".", "init_scope", "(", ")", ":", "\n", "                ", "self", ".", "gamma", "=", "chainer", ".", "Parameter", "(", "s", "[", "0", "]", ",", "(", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.links.sn_convolution_2d.SNConvolution2D.__call__": [[95, 109], ["chainer.functions.connection.convolution_2d.convolution_2d", "sn_convolution_2d.SNConvolution2D._initialize_params"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.links.sn_convolution_2d.SNConvolution2D._initialize_params"], ["", "", "", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Applies the convolution layer.\n\n        Args:\n            x (~chainer.Variable): Input image.\n\n        Returns:\n            ~chainer.Variable: Output of the convolution.\n\n        \"\"\"", "\n", "if", "self", ".", "W", ".", "data", "is", "None", ":", "\n", "            ", "self", ".", "_initialize_params", "(", "x", ".", "shape", "[", "1", "]", ")", "\n", "", "return", "convolution_2d", ".", "convolution_2d", "(", "\n", "x", ",", "self", ".", "W_bar", ",", "self", ".", "b", ",", "self", ".", "stride", ",", "self", ".", "pad", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.links.sn_embed_id.SNEmbedID.__init__": [[38, 50], ["chainer.link.Link.__init__", "numpy.random.normal().astype", "sn_embed_id.SNEmbedID.register_persistent", "sn_embed_id.SNEmbedID.init_scope", "chainer.variable.Parameter", "chainer.initializers.normal.Normal", "numpy.random.normal"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.resblocks.OptimizedBlock.__init__"], ["def", "__init__", "(", "self", ",", "in_size", ",", "out_size", ",", "initialW", "=", "None", ",", "ignore_label", "=", "None", ",", "Ip", "=", "1", ",", "factor", "=", "None", ")", ":", "\n", "        ", "super", "(", "SNEmbedID", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "self", ".", "Ip", "=", "Ip", "\n", "self", ".", "factor", "=", "factor", "\n", "with", "self", ".", "init_scope", "(", ")", ":", "\n", "            ", "if", "initialW", "is", "None", ":", "\n", "                ", "initialW", "=", "normal", ".", "Normal", "(", "1.0", ")", "\n", "", "self", ".", "W", "=", "variable", ".", "Parameter", "(", "initialW", ",", "(", "in_size", ",", "out_size", ")", ")", "\n", "\n", "", "self", ".", "u", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "1", ",", "in_size", ")", ")", ".", "astype", "(", "dtype", "=", "\"f\"", ")", "\n", "self", ".", "register_persistent", "(", "'u'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.links.sn_embed_id.SNEmbedID.W_bar": [[51, 62], ["source.functions.max_sv.max_singular_value", "chainer.functions.array.broadcast.broadcast_to", "chainer.functions.array.broadcast.broadcast_to.reshape"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.functions.max_sv.max_singular_value"], ["", "@", "property", "\n", "def", "W_bar", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Spectral Normalized Weight\n        \"\"\"", "\n", "sigma", ",", "_u", ",", "_", "=", "max_singular_value", "(", "self", ".", "W", ",", "self", ".", "u", ",", "self", ".", "Ip", ")", "\n", "if", "self", ".", "factor", ":", "\n", "            ", "sigma", "=", "sigma", "/", "self", ".", "factor", "\n", "", "sigma", "=", "broadcast_to", "(", "sigma", ".", "reshape", "(", "(", "1", ",", "1", ")", ")", ",", "self", ".", "W", ".", "shape", ")", "\n", "self", ".", "u", "[", ":", "]", "=", "_u", "\n", "return", "self", ".", "W", "/", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.links.sn_embed_id.SNEmbedID.__call__": [[63, 71], ["chainer.functions.connection.embed_id.embed_id"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Extracts the word embedding of given IDs.\n        Args:\n            x (~chainer.Variable): Batch vectors of IDs.\n        Returns:\n            ~chainer.Variable: Batch of corresponding embeddings.\n        \"\"\"", "\n", "return", "embed_id", ".", "embed_id", "(", "x", ",", "self", ".", "W_bar", ",", "ignore_label", "=", "self", ".", "ignore_label", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.links.conditional_batch_normalization.ConditionalBatchNormalization.__init__": [[45, 56], ["chainer.Chain.__init__", "chainer.Chain.__init__", "numpy.zeros", "conditional_batch_normalization.ConditionalBatchNormalization.register_persistent", "numpy.zeros", "conditional_batch_normalization.ConditionalBatchNormalization.register_persistent", "conditional_batch_normalization.ConditionalBatchNormalization.register_persistent"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.resblocks.OptimizedBlock.__init__", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.resblocks.OptimizedBlock.__init__"], ["def", "__init__", "(", "self", ",", "size", ",", "n_cat", ",", "decay", "=", "0.9", ",", "eps", "=", "2e-5", ",", "dtype", "=", "numpy", ".", "float32", ")", ":", "\n", "        ", "super", "(", "ConditionalBatchNormalization", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_mean", "=", "numpy", ".", "zeros", "(", "size", ",", "dtype", "=", "dtype", ")", "\n", "self", ".", "register_persistent", "(", "'avg_mean'", ")", "\n", "self", ".", "avg_var", "=", "numpy", ".", "zeros", "(", "size", ",", "dtype", "=", "dtype", ")", "\n", "self", ".", "register_persistent", "(", "'avg_var'", ")", "\n", "self", ".", "N", "=", "0", "\n", "self", ".", "register_persistent", "(", "'N'", ")", "\n", "self", ".", "decay", "=", "decay", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "n_cat", "=", "n_cat", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.links.conditional_batch_normalization.ConditionalBatchNormalization.__call__": [[57, 105], ["chainer.utils.argument.check_unexpected_kwargs", "chainer.utils.argument.check_unexpected_kwargs", "chainer.utils.argument.parse_kwargs", "chainer.utils.argument.parse_kwargs", "len", "chainer.broadcast_to", "chainer.broadcast_to", "chainer.broadcast_to", "chainer.broadcast_to", "chainer.cuda.get_device_from_id", "chainer.cuda.get_device_from_id", "chainer.variable.Variable", "chainer.variable.Variable", "chainer.cuda.get_device_from_id", "chainer.cuda.get_device_from_id", "chainer.variable.Variable", "chainer.variable.Variable", "chainer.functions.batch_normalization", "chainer.functions.batch_normalization", "chainer.functions.batch_normalization", "chainer.functions.batch_normalization", "chainer.variable.Variable", "chainer.variable.Variable", "chainer.variable.Variable", "chainer.variable.Variable", "chainer.functions.normalization.batch_normalization.fixed_batch_normalization", "chainer.functions.normalization.batch_normalization.fixed_batch_normalization", "chainer.reshape", "chainer.reshape", "chainer.reshape", "chainer.reshape", "conditional_batch_normalization.ConditionalBatchNormalization.xp.ones", "conditional_batch_normalization.ConditionalBatchNormalization.xp.zeros", "list", "list", "len", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ",", "gamma", ",", "beta", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"__call__(self, x, c, finetune=False)\n        Invokes the forward propagation of BatchNormalization.\n        In training mode, the BatchNormalization computes moving averages of\n        mean and variance for evaluatino during training, and normalizes the\n        input using batch statistics.\n        .. warning::\n           ``test`` argument is not supported anymore since v2.\n           Instead, use ``chainer.using_config('train', train)``.\n           See :func:`chainer.using_config`.\n        Args:\n            x (Variable): Input variable.\n            gamma (Variable): Input variable of gamma of shape\n            finetune (bool): If it is in the training mode and ``finetune`` is\n                ``True``, BatchNormalization runs in fine-tuning mode; it\n                accumulates the input array to compute population statistics\n                for normalization, and normalizes the input using batch\n                statistics.\n        \"\"\"", "\n", "argument", ".", "check_unexpected_kwargs", "(", "\n", "kwargs", ",", "test", "=", "'test argument is not supported anymore. '", "\n", "'Use chainer.using_config'", ")", "\n", "finetune", ",", "=", "argument", ".", "parse_kwargs", "(", "kwargs", ",", "(", "'finetune'", ",", "False", ")", ")", "\n", "with", "cuda", ".", "get_device_from_id", "(", "self", ".", "_device_id", ")", ":", "\n", "            ", "_gamma", "=", "variable", ".", "Variable", "(", "self", ".", "xp", ".", "ones", "(", "\n", "self", ".", "avg_mean", ".", "shape", ",", "dtype", "=", "x", ".", "dtype", ")", ")", "\n", "", "with", "cuda", ".", "get_device_from_id", "(", "self", ".", "_device_id", ")", ":", "\n", "            ", "_beta", "=", "variable", ".", "Variable", "(", "self", ".", "xp", ".", "zeros", "(", "\n", "self", ".", "avg_mean", ".", "shape", ",", "dtype", "=", "x", ".", "dtype", ")", ")", "\n", "", "if", "configuration", ".", "config", ".", "train", ":", "\n", "            ", "if", "finetune", ":", "\n", "                ", "self", ".", "N", "+=", "1", "\n", "decay", "=", "1.", "-", "1.", "/", "self", ".", "N", "\n", "", "else", ":", "\n", "                ", "decay", "=", "self", ".", "decay", "\n", "", "ret", "=", "chainer", ".", "functions", ".", "batch_normalization", "(", "x", ",", "_gamma", ",", "_beta", ",", "eps", "=", "self", ".", "eps", ",", "running_mean", "=", "self", ".", "avg_mean", ",", "\n", "running_var", "=", "self", ".", "avg_var", ",", "decay", "=", "decay", ")", "\n", "", "else", ":", "\n", "# Use running average statistics or fine-tuned statistics.", "\n", "            ", "mean", "=", "variable", ".", "Variable", "(", "self", ".", "avg_mean", ")", "\n", "var", "=", "variable", ".", "Variable", "(", "self", ".", "avg_var", ")", "\n", "ret", "=", "batch_normalization", ".", "fixed_batch_normalization", "(", "\n", "x", ",", "_gamma", ",", "_beta", ",", "mean", ",", "var", ",", "self", ".", "eps", ")", "\n", "", "shape", "=", "ret", ".", "shape", "\n", "ndim", "=", "len", "(", "shape", ")", "\n", "gamma", "=", "F", ".", "broadcast_to", "(", "F", ".", "reshape", "(", "gamma", ",", "list", "(", "gamma", ".", "shape", ")", "+", "[", "1", "]", "*", "(", "ndim", "-", "len", "(", "gamma", ".", "shape", ")", ")", ")", ",", "shape", ")", "\n", "beta", "=", "F", ".", "broadcast_to", "(", "F", ".", "reshape", "(", "beta", ",", "list", "(", "beta", ".", "shape", ")", "+", "[", "1", "]", "*", "(", "ndim", "-", "len", "(", "beta", ".", "shape", ")", ")", ")", ",", "shape", ")", "\n", "return", "gamma", "*", "ret", "+", "beta", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.links.conditional_batch_normalization.start_finetuning": [[107, 114], ["None"], "function", ["None"], ["", "", "def", "start_finetuning", "(", "self", ")", ":", "\n", "    ", "\"\"\"Resets the population count for collecting population statistics.\n    This method can be skipped if it is the first time to use the\n    fine-tuning mode. Otherwise, this method should be called before\n    starting the fine-tuning mode again.\n    \"\"\"", "\n", "self", ".", "N", "=", "0", "\n", "", ""]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.links.sn_convolution_nd.SNConvolutionND.__init__": [[58, 88], ["chainer.link.Link.__init__", "chainer.utils.conv_nd.as_tuple", "numpy.random.normal().astype", "sn_convolution_nd.SNConvolutionND.register_persistent", "sn_convolution_nd.SNConvolutionND.init_scope", "chainer.variable.Parameter", "numpy.random.normal", "chainer.initializers._get_initializer", "chainer.initializers._get_initializer", "chainer.variable.Parameter", "sn_convolution_nd.SNConvolutionND.W.data.reshape", "numpy.linalg.svd", "chainer.variable.Parameter", "len"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.resblocks.OptimizedBlock.__init__"], ["def", "__init__", "(", "self", ",", "ndim", ",", "in_channels", ",", "out_channels", ",", "ksize", ",", "stride", "=", "1", ",", "pad", "=", "0", ",", "\n", "nobias", "=", "False", ",", "initialW", "=", "None", ",", "initial_bias", "=", "None", ",", "\n", "cover_all", "=", "False", ",", "use_gamma", "=", "False", ",", "Ip", "=", "1", ",", "factor", "=", "None", ")", ":", "\n", "        ", "super", "(", "SNConvolutionND", ",", "self", ")", ".", "__init__", "(", ")", "\n", "ksize", "=", "conv_nd", ".", "as_tuple", "(", "ksize", ",", "ndim", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "pad", "=", "pad", "\n", "self", ".", "cover_all", "=", "cover_all", "\n", "self", ".", "use_gamma", "=", "use_gamma", "\n", "self", ".", "Ip", "=", "Ip", "\n", "self", ".", "u", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "1", ",", "out_channels", ")", ")", ".", "astype", "(", "dtype", "=", "\"f\"", ")", "\n", "self", ".", "register_persistent", "(", "'u'", ")", "\n", "self", ".", "factor", "=", "factor", "\n", "with", "self", ".", "init_scope", "(", ")", ":", "\n", "            ", "W_shape", "=", "(", "out_channels", ",", "in_channels", ")", "+", "ksize", "\n", "self", ".", "W", "=", "variable", ".", "Parameter", "(", "\n", "initializers", ".", "_get_initializer", "(", "initialW", ")", ",", "W_shape", ")", "\n", "\n", "if", "nobias", ":", "\n", "                ", "self", ".", "b", "=", "None", "\n", "", "else", ":", "\n", "                ", "if", "initial_bias", "is", "None", ":", "\n", "                    ", "initial_bias", "=", "0", "\n", "", "initial_bias", "=", "initializers", ".", "_get_initializer", "(", "initial_bias", ")", "\n", "self", ".", "b", "=", "variable", ".", "Parameter", "(", "initial_bias", ",", "out_channels", ")", "\n", "\n", "", "if", "self", ".", "use_gamma", ":", "\n", "                ", "W_mat", "=", "self", ".", "W", ".", "data", ".", "reshape", "(", "self", ".", "W", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "_", ",", "s", ",", "_", "=", "np", ".", "linalg", ".", "svd", "(", "W_mat", ")", "\n", "self", ".", "gamma", "=", "variable", ".", "Parameter", "(", "s", "[", "0", "]", ",", "(", "1", ",", ")", "*", "len", "(", "self", ".", "W", ".", "shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.links.sn_convolution_nd.SNConvolutionND.W_bar": [[89, 105], ["sn_convolution_nd.SNConvolutionND.W.reshape", "source.functions.max_sv.max_singular_value", "chainer.functions.array.broadcast.broadcast_to", "hasattr", "chainer.functions.array.broadcast.broadcast_to.reshape", "len", "chainer.functions.array.broadcast.broadcast_to"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.functions.max_sv.max_singular_value"], ["", "", "", "@", "property", "\n", "def", "W_bar", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Spectral Normalized Weight\n        \"\"\"", "\n", "W_mat", "=", "self", ".", "W", ".", "reshape", "(", "self", ".", "W", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "sigma", ",", "_u", ",", "_", "=", "max_singular_value", "(", "W_mat", ",", "self", ".", "u", ",", "self", ".", "Ip", ")", "\n", "if", "self", ".", "factor", ":", "\n", "            ", "sigma", "=", "sigma", "/", "self", ".", "factor", "\n", "", "sigma", "=", "broadcast_to", "(", "sigma", ".", "reshape", "(", "[", "1", "]", "*", "len", "(", "self", ".", "W", ".", "shape", ")", ")", ",", "self", ".", "W", ".", "shape", ")", "\n", "self", ".", "u", "[", ":", "]", "=", "_u", "\n", "\n", "if", "hasattr", "(", "self", ",", "'gamma'", ")", ":", "\n", "            ", "return", "broadcast_to", "(", "self", ".", "gamma", ",", "self", ".", "W", ".", "shape", ")", "*", "self", ".", "W", "/", "sigma", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "W", "/", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.links.sn_convolution_nd.SNConvolutionND.__call__": [[106, 115], ["chainer.functions.connection.convolution_nd.convolution_nd"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Applies N-dimensional convolution layer.\n        Args:\n            x (~chainer.Variable): Input image.\n        Returns:\n            ~chainer.Variable: Output of convolution.\n        \"\"\"", "\n", "return", "convolution_nd", ".", "convolution_nd", "(", "\n", "x", ",", "self", ".", "W_bar", ",", "self", ".", "b", ",", "self", ".", "stride", ",", "self", ".", "pad", ",", "cover_all", "=", "self", ".", "cover_all", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.links.categorical_conditional_batch_normalization.CategoricalConditionalBatchNormalization.__init__": [[46, 62], ["source.links.conditional_batch_normalization.ConditionalBatchNormalization.__init__", "categorical_conditional_batch_normalization.CategoricalConditionalBatchNormalization.init_scope", "chainer.initializers._get_initializer", "chainer.initializers._get_initializer", "chainer.links.EmbedID", "chainer.links.EmbedID", "chainer.initializers._get_initializer", "chainer.initializers._get_initializer", "chainer.links.EmbedID", "chainer.links.EmbedID"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.resblocks.OptimizedBlock.__init__"], ["def", "__init__", "(", "self", ",", "size", ",", "n_cat", ",", "decay", "=", "0.9", ",", "eps", "=", "2e-5", ",", "dtype", "=", "numpy", ".", "float32", ",", "\n", "initial_gamma", "=", "None", ",", "initial_beta", "=", "None", ")", ":", "\n", "        ", "super", "(", "CategoricalConditionalBatchNormalization", ",", "self", ")", ".", "__init__", "(", "\n", "size", "=", "size", ",", "n_cat", "=", "n_cat", ",", "decay", "=", "decay", ",", "eps", "=", "eps", ",", "dtype", "=", "dtype", ")", "\n", "\n", "with", "self", ".", "init_scope", "(", ")", ":", "\n", "            ", "if", "initial_gamma", "is", "None", ":", "\n", "                ", "initial_gamma", "=", "1", "\n", "", "initial_gamma", "=", "initializers", ".", "_get_initializer", "(", "initial_gamma", ")", "\n", "initial_gamma", ".", "dtype", "=", "dtype", "\n", "self", ".", "gammas", "=", "EmbedID", "(", "n_cat", ",", "size", ",", "initialW", "=", "initial_gamma", ")", "\n", "if", "initial_beta", "is", "None", ":", "\n", "                ", "initial_beta", "=", "0", "\n", "", "initial_beta", "=", "initializers", ".", "_get_initializer", "(", "initial_beta", ")", "\n", "initial_beta", ".", "dtype", "=", "dtype", "\n", "self", ".", "betas", "=", "EmbedID", "(", "n_cat", ",", "size", ",", "initialW", "=", "initial_beta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.links.categorical_conditional_batch_normalization.CategoricalConditionalBatchNormalization.__call__": [[63, 94], ["chainer.utils.argument.parse_kwargs", "chainer.utils.argument.parse_kwargs", "super().__call__", "categorical_conditional_batch_normalization.CategoricalConditionalBatchNormalization.gammas", "categorical_conditional_batch_normalization.CategoricalConditionalBatchNormalization.betas", "chainer.sum", "chainer.sum", "chainer.sum", "chainer.sum", "categorical_conditional_batch_normalization.CategoricalConditionalBatchNormalization.gammas", "categorical_conditional_batch_normalization.CategoricalConditionalBatchNormalization.betas", "chainer.broadcast_to", "chainer.broadcast_to", "chainer.broadcast_to", "chainer.broadcast_to", "chainer.expand_dims", "chainer.expand_dims", "chainer.expand_dims", "chainer.expand_dims"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.resblocks.OptimizedBlock.__call__"], ["", "", "def", "__call__", "(", "self", ",", "x", ",", "c", ",", "finetune", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"__call__(self, x, c, finetune=False)\n        Invokes the forward propagation of BatchNormalization.\n        In training mode, the BatchNormalization computes moving averages of\n        mean and variance for evaluatino during training, and normalizes the\n        input using batch statistics.\n        .. warning::\n           ``test`` argument is not supported anymore since v2.\n           Instead, use ``chainer.using_config('train', train)``.\n           See :func:`chainer.using_config`.\n        Args:\n            x (Variable): Input variable.\n            c (Variable): Input variable for conditioning gamma and beta\n            finetune (bool): If it is in the training mode and ``finetune`` is\n                ``True``, BatchNormalization runs in fine-tuning mode; it\n                accumulates the input array to compute population statistics\n                for normalization, and normalizes the input using batch\n                statistics.\n        \"\"\"", "\n", "weights", ",", "=", "argument", ".", "parse_kwargs", "(", "kwargs", ",", "(", "'weights'", ",", "None", ")", ")", "\n", "if", "c", ".", "ndim", "==", "2", "and", "weights", "is", "not", "None", ":", "\n", "            ", "_gamma_c", "=", "self", ".", "gammas", "(", "c", ")", "\n", "_beta_c", "=", "self", ".", "betas", "(", "c", ")", "\n", "_gamma_c", "=", "F", ".", "broadcast_to", "(", "F", ".", "expand_dims", "(", "weights", ",", "2", ")", ",", "_gamma_c", ".", "shape", ")", "*", "_gamma_c", "\n", "_beta_c", "=", "F", ".", "broadcast_to", "(", "F", ".", "expand_dims", "(", "weights", ",", "2", ")", ",", "_beta_c", ".", "shape", ")", "*", "_beta_c", "\n", "gamma_c", "=", "F", ".", "sum", "(", "_gamma_c", ",", "1", ")", "\n", "beta_c", "=", "F", ".", "sum", "(", "_beta_c", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "gamma_c", "=", "self", ".", "gammas", "(", "c", ")", "\n", "beta_c", "=", "self", ".", "betas", "(", "c", ")", "\n", "", "return", "super", "(", "CategoricalConditionalBatchNormalization", ",", "self", ")", ".", "__call__", "(", "x", ",", "gamma_c", ",", "beta_c", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.links.categorical_conditional_batch_normalization.start_finetuning": [[96, 103], ["None"], "function", ["None"], ["", "", "def", "start_finetuning", "(", "self", ")", ":", "\n", "    ", "\"\"\"Resets the population count for collecting population statistics.\n    This method can be skipped if it is the first time to use the\n    fine-tuning mode. Otherwise, this method should be called before\n    starting the fine-tuning mode again.\n    \"\"\"", "\n", "self", ".", "N", "=", "0", "\n", "", ""]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.evaluations.gen_images.load_models": [[71, 74], ["None"], "function", ["None"], ["def", "load_models", "(", "config", ")", ":", "\n", "    ", "from", "model_loader", "import", "gen", ",", "dis", "\n", "return", "gen", ",", "dis", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.evaluations.gen_images.main": [[76, 99], ["source.Config", "chainer.cuda.get_device_from_id().use", "numpy.random.seed", "yaml.load", "tuple", "numpy.arange", "evaluation.gen_eval_images.reshape", "evaluation.gen_eval_images.transpose", "evaluation.gen_eval_images.reshape", "os.path.join", "PIL.Image.fromarray().save", "open", "chainer.cuda.get_device_from_id", "chainer.using_config", "chainer.using_config", "evaluation.gen_eval_images", "os.path.exists", "os.makedirs", "str", "PIL.Image.fromarray"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.tflib.cifar10.load", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.evaluation.gen_eval_images"], ["", "def", "main", "(", ")", ":", "\n", "    ", "from", "argparser", "import", "args", "\n", "config", "=", "yaml_utils", ".", "Config", "(", "yaml", ".", "load", "(", "open", "(", "args", ".", "config_path", ")", ")", ")", "\n", "chainer", ".", "cuda", ".", "get_device_from_id", "(", "args", ".", "gpu", ")", ".", "use", "(", ")", "\n", "out", "=", "args", ".", "eval_results_dir", "\n", "from", "model_loader", "import", "gen", ",", "dis", "\n", "np", ".", "random", ".", "seed", "(", "666", ")", "\n", "classes", "=", "tuple", "(", "args", ".", "classes", ")", "if", "args", ".", "classes", "is", "not", "None", "else", "np", ".", "arange", "(", "0", ",", "gen", ".", "n_classes", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "c", "in", "classes", ":", "\n", "        ", "with", "chainer", ".", "using_config", "(", "'train'", ",", "False", ")", ",", "chainer", ".", "using_config", "(", "'enable_backprop'", ",", "True", ")", ":", "\n", "# x = gen_images_with_condition(gen, c=c, n=args.rows * args.columns, batchsize=args.rows * args.columns)", "\n", "            ", "x", "=", "gen_eval_images", "(", "gen", ",", "n", "=", "args", ".", "rows", ",", "batchsize", "=", "args", ".", "rows", ",", "langevin_steps", "=", "args", ".", "columns", ",", "seeds", "=", "c", ")", "\n", "", "_", ",", "_", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "if", "args", ".", "sampling_space", "==", "'latent'", ":", "\n", "            ", "args", ".", "columns", "+=", "1", "\n", "", "x", "=", "x", ".", "reshape", "(", "(", "args", ".", "rows", ",", "args", ".", "columns", ",", "3", ",", "h", ",", "w", ")", ")", "\n", "x", "=", "x", ".", "transpose", "(", "0", ",", "3", ",", "1", ",", "4", ",", "2", ")", "\n", "x", "=", "x", ".", "reshape", "(", "(", "args", ".", "rows", "*", "h", ",", "args", ".", "columns", "*", "w", ",", "3", ")", ")", "\n", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "out", ",", "'{}.png'", ".", "format", "(", "str", "(", "c", ")", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "out", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "out", ")", "\n", "", "Image", ".", "fromarray", "(", "x", ")", ".", "save", "(", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.evaluations.gen_interpolated_images.load_models": [[21, 25], ["source.load_model"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.source.yaml_utils.load_model"], ["def", "load_models", "(", "config", ")", ":", "\n", "    ", "gen_conf", "=", "config", ".", "models", "[", "'generator'", "]", "\n", "gen", "=", "yaml_utils", ".", "load_model", "(", "gen_conf", "[", "'fn'", "]", ",", "gen_conf", "[", "'name'", "]", ",", "gen_conf", "[", "'args'", "]", ")", "\n", "return", "gen", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.evaluations.gen_interpolated_images.main": [[27, 69], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "chainer.cuda.get_device().use", "source.Config", "gen_interpolated_images.load_models", "load_models.to_gpu", "chainer.serializers.load_npz", "numpy.random.seed", "range", "numpy.stack", "img.reshape.transpose", "img.reshape.reshape", "os.path.join", "PIL.Image.fromarray().save", "yaml.load", "tuple", "xp.array", "xp.array", "chainer.cuda.to_cpu", "numpy.asarray", "imgs.append", "os.path.exists", "os.makedirs", "chainer.cuda.get_device", "open", "numpy.random.randint", "numpy.random.randint", "xp.array", "chainer.using_config", "chainer.using_config", "load_models.", "numpy.clip", "PIL.Image.fromarray", "numpy.random.normal", "numpy.linspace", "numpy.linspace"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.parse_args", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.evaluations.calc_intra_FID.load_models", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.tflib.cifar10.load"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--config_path'", ",", "type", "=", "str", ",", "default", "=", "'configs/base.yml'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "'-g'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--results_dir'", ",", "type", "=", "str", ",", "default", "=", "'./results/gans'", ")", "\n", "parser", ".", "add_argument", "(", "'--snapshot'", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--n_intp'", ",", "type", "=", "int", ",", "default", "=", "5", ")", "\n", "parser", ".", "add_argument", "(", "'--n_zs'", ",", "type", "=", "int", ",", "default", "=", "5", ")", "\n", "parser", ".", "add_argument", "(", "'--classes'", ",", "type", "=", "int", ",", "nargs", "=", "\"*\"", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1234", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "chainer", ".", "cuda", ".", "get_device", "(", "args", ".", "gpu", ")", ".", "use", "(", ")", "\n", "config", "=", "yaml_utils", ".", "Config", "(", "yaml", ".", "load", "(", "open", "(", "args", ".", "config_path", ")", ")", ")", "\n", "gen", "=", "load_models", "(", "config", ")", "\n", "gen", ".", "to_gpu", "(", ")", "\n", "out", "=", "args", ".", "results_dir", "\n", "chainer", ".", "serializers", ".", "load_npz", "(", "args", ".", "snapshot", ",", "gen", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "\n", "xp", "=", "gen", ".", "xp", "\n", "n_images", "=", "args", ".", "n_zs", "*", "args", ".", "n_intp", "\n", "imgs", "=", "[", "]", "\n", "classes", "=", "tuple", "(", "args", ".", "classes", ")", "if", "args", ".", "classes", "is", "not", "None", "else", "[", "np", ".", "random", ".", "randint", "(", "1000", ")", ",", "\n", "np", ".", "random", ".", "randint", "(", "1000", ")", "]", "\n", "for", "_", "in", "range", "(", "args", ".", "n_zs", ")", ":", "\n", "        ", "z", "=", "xp", ".", "array", "(", "[", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "128", ",", ")", ")", "]", "*", "args", ".", "n_intp", ",", "xp", ".", "float32", ")", "\n", "ys", "=", "xp", ".", "array", "(", "[", "[", "classes", "[", "0", "]", ",", "classes", "[", "1", "]", "]", "]", "*", "args", ".", "n_intp", ",", "dtype", "=", "xp", ".", "int32", ")", "\n", "ws_y", "=", "xp", ".", "array", "(", "[", "np", ".", "linspace", "(", "0", ",", "1", ",", "args", ".", "n_intp", ")", "[", ":", ":", "-", "1", "]", ",", "np", ".", "linspace", "(", "0", ",", "1", ",", "args", ".", "n_intp", ")", "]", ",", "dtype", "=", "xp", ".", "float32", ")", ".", "T", "\n", "with", "chainer", ".", "using_config", "(", "'train'", ",", "False", ")", ",", "chainer", ".", "using_config", "(", "'enable_backprop'", ",", "False", ")", ":", "\n", "            ", "x", "=", "gen", "(", "z", "=", "z", ",", "y", "=", "ys", ",", "weights", "=", "ws_y", ")", "\n", "", "x", "=", "chainer", ".", "cuda", ".", "to_cpu", "(", "x", ".", "data", ")", "\n", "x", "=", "np", ".", "asarray", "(", "np", ".", "clip", "(", "x", "*", "127.5", "+", "127.5", ",", "0.0", ",", "255.0", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "imgs", ".", "append", "(", "x", ")", "\n", "", "img", "=", "np", ".", "stack", "(", "imgs", ")", "\n", "_", ",", "_", ",", "_", ",", "h", ",", "w", "=", "img", ".", "shape", "\n", "img", "=", "img", ".", "transpose", "(", "0", ",", "3", ",", "1", ",", "4", ",", "2", ")", "\n", "img", "=", "img", ".", "reshape", "(", "(", "args", ".", "n_zs", "*", "h", ",", "args", ".", "n_intp", "*", "w", ",", "3", ")", ")", "\n", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "out", ",", "'interpolated_images_{}-{}.png'", ".", "format", "(", "classes", "[", "0", "]", ",", "classes", "[", "1", "]", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "out", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "out", ")", "\n", "", "Image", ".", "fromarray", "(", "img", ")", ".", "save", "(", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.evaluations.calc_inception_score.main": [[27, 54], ["chainer.cuda.get_device_from_id().use", "numpy.random.seed", "int", "print", "evaluation.gen_images().astype", "print", "numpy.savetxt", "numpy.savetxt", "numpy.max", "numpy.min", "numpy.load", "source.get_inception_and_FID", "print", "evaluation.load_inception_model", "source.inception.inception_score.inception_score", "print", "os.path.exists", "os.makedirs", "numpy.array", "numpy.array", "chainer.cuda.get_device_from_id", "evaluation.gen_images"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.tflib.cifar10.load", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.inception_score_tf.get_inception_and_FID", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.evaluation.load_inception_model", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.inception_score.inception_score", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.evaluation.gen_images"], ["def", "main", "(", ")", ":", "\n", "    ", "chainer", ".", "cuda", ".", "get_device_from_id", "(", "args", ".", "gpu", ")", ".", "use", "(", ")", "\n", "\n", "np", ".", "random", ".", "seed", "(", "1234", ")", "\n", "xp", "=", "gen", ".", "xp", "\n", "n", "=", "int", "(", "5000", "*", "args", ".", "splits", ")", "\n", "#for _ in range(50):", "\n", "#     gen(128) ", "\n", "print", "(", "\"Gen\"", ")", "\n", "ims", "=", "gen_images", "(", "gen", ",", "n", ",", "batchsize", "=", "125", ")", ".", "astype", "(", "\"f\"", ")", "\n", "print", "(", "np", ".", "max", "(", "ims", ")", ",", "np", ".", "min", "(", "ims", ")", ")", "\n", "\n", "if", "args", ".", "tf", ":", "\n", "# mean, std = inception_score.get_inception_score(ims, args.splits)", "\n", "        ", "stat", "=", "np", ".", "load", "(", "args", ".", "FID_stat_file", ",", "allow_pickle", "=", "False", ")", "\n", "is_mean", ",", "is_std", ",", "fid_mean", ",", "fid_std", "=", "inception_score_tf", ".", "get_inception_and_FID", "(", "ims", ",", "args", ".", "splits", ",", "ref_stats", "=", "stat", ")", "\n", "print", "(", "is_mean", ",", "is_std", ",", "fid_mean", ",", "fid_std", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "load_inception_model", "(", "args", ".", "inception_model_path", ")", "\n", "mean", ",", "std", "=", "inception_score", "(", "model", ",", "ims", ",", "splits", "=", "args", ".", "splits", ")", "\n", "print", "(", "mean", ",", "std", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "results_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "results_dir", ")", "\n", "", "np", ".", "savetxt", "(", "'{}/inception_score.txt'", ".", "format", "(", "args", ".", "results_dir", ")", ",", "\n", "np", ".", "array", "(", "[", "is_mean", ",", "is_std", "]", ")", ")", "\n", "np", ".", "savetxt", "(", "'{}/FID.txt'", ".", "format", "(", "args", ".", "results_dir", ")", ",", "\n", "np", ".", "array", "(", "[", "fid_mean", ",", "fid_std", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.evaluations.calc_intra_FID.load_models": [[14, 18], ["source.load_model"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.source.yaml_utils.load_model"], ["def", "load_models", "(", "config", ")", ":", "\n", "    ", "gen_conf", "=", "config", ".", "models", "[", "'generator'", "]", "\n", "gen", "=", "yaml_utils", ".", "load_model", "(", "gen_conf", "[", "'fn'", "]", ",", "gen_conf", "[", "'name'", "]", ",", "gen_conf", "[", "'args'", "]", ")", "\n", "return", "gen", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.evaluations.calc_intra_FID.main": [[20, 61], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "chainer.cuda.get_device_from_id().use", "source.Config", "calc_intra_FID.load_models", "load_models.to_gpu", "chainer.serializers.load_npz", "numpy.random.seed", "range", "os.path.exists", "os.makedirs", "yaml.load", "evaluation.load_inception_model", "print", "numpy.load", "evaluation.gen_images_with_condition().astype", "evaluation.FID", "print", "numpy.savetxt", "chainer.cuda.get_device_from_id", "open", "os.path.join", "get_mean_cov", "numpy.array", "evaluation.gen_images_with_condition", "chainer.using_config", "chainer.using_config", "get_mean_cov"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.parse_args", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.evaluations.calc_intra_FID.load_models", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.tflib.cifar10.load", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.evaluation.load_inception_model", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.tflib.cifar10.load", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.evaluation.FID", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.evaluation.get_mean_cov", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.evaluation.gen_images_with_condition", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.evaluation.get_mean_cov"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--config_path'", ",", "type", "=", "str", ",", "default", "=", "'configs/base.yml'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "'-g'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--results_dir'", ",", "type", "=", "str", ",", "default", "=", "'./results/gans'", ")", "\n", "parser", ".", "add_argument", "(", "'--stat_dir_path'", ",", "type", "=", "str", ",", "\n", "default", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--inception_model_path'", ",", "type", "=", "str", ",", "\n", "default", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--snapshot'", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--n_classes'", ",", "type", "=", "int", ",", "default", "=", "1000", ")", "\n", "parser", ".", "add_argument", "(", "'--class_start_from'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--tf'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "chainer", ".", "cuda", ".", "get_device_from_id", "(", "args", ".", "gpu", ")", ".", "use", "(", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "results_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "results_dir", ")", "\n", "", "config", "=", "yaml_utils", ".", "Config", "(", "yaml", ".", "load", "(", "open", "(", "args", ".", "config_path", ")", ")", ")", "\n", "# Model", "\n", "gen", "=", "load_models", "(", "config", ")", "\n", "gen", ".", "to_gpu", "(", ")", "\n", "chainer", ".", "serializers", ".", "load_npz", "(", "args", ".", "snapshot", ",", "gen", ")", "\n", "np", ".", "random", ".", "seed", "(", "1234", ")", "\n", "if", "args", ".", "tf", ":", "\n", "        ", "import", "source", ".", "inception", ".", "inception_score_tf", "\n", "from", "source", ".", "inception", ".", "inception_score_tf", "import", "get_mean_and_cov", "as", "get_mean_cov", "\n", "", "else", ":", "\n", "        ", "from", "evaluation", "import", "get_mean_cov", "\n", "model", "=", "load_inception_model", "(", "args", ".", "inception_model_path", ")", "\n", "", "for", "c", "in", "range", "(", "args", ".", "class_start_from", ",", "args", ".", "n_classes", ")", ":", "\n", "        ", "print", "(", "\"class:{}\"", ".", "format", "(", "c", ")", ")", "\n", "stat", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "stat_dir_path", ",", "'{}.npz'", ".", "format", "(", "c", ")", ")", ")", "\n", "ims", "=", "gen_images_with_condition", "(", "gen", ",", "c", ",", "5000", ",", "batchsize", "=", "100", ")", ".", "astype", "(", "\"f\"", ")", "\n", "if", "args", ".", "tf", ":", "\n", "            ", "mean", ",", "cov", "=", "get_mean_cov", "(", "ims", ")", "\n", "", "else", ":", "\n", "            ", "with", "chainer", ".", "using_config", "(", "'train'", ",", "False", ")", ",", "chainer", ".", "using_config", "(", "'enable_backprop'", ",", "False", ")", ":", "\n", "                ", "mean", ",", "cov", "=", "get_mean_cov", "(", "model", ",", "ims", ",", "batch_size", "=", "100", ")", "\n", "", "", "fid", "=", "FID", "(", "stat", "[", "\"mean\"", "]", ",", "stat", "[", "\"cov\"", "]", ",", "mean", ",", "cov", ")", "\n", "print", "(", "fid", ")", "\n", "np", ".", "savetxt", "(", "'{}/fid_{}.txt'", ".", "format", "(", "args", ".", "results_dir", ",", "c", ")", ",", "np", ".", "array", "(", "[", "fid", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.evaluations.calc_ref_stats.get_imagenet_samples": [[18, 35], ["numpy.stack().transpose().astype", "scipy.imread", "numpy.asarray", "scipy.misc.imresize", "images.append", "filename.split", "label.split", "int", "os.path.join", "numpy.stack().transpose", "numpy.stack"], "function", ["None"], ["def", "get_imagenet_samples", "(", "c", ")", ":", "\n", "    ", "RESOLUTION", "=", "128", "\n", "images", "=", "[", "]", "\n", "count", "=", "0", "\n", "for", "filename", ",", "label", "in", "train_filenames_and_labels", ":", "\n", "        ", "filename", "=", "filename", ".", "split", "(", "'\\''", ")", "[", "1", "]", "\n", "label", "=", "label", ".", "split", "(", "'\\''", ")", "[", "1", "]", "\n", "if", "int", "(", "label", ")", "!=", "c", ":", "\n", "            ", "continue", "\n", "", "image", "=", "ndimage", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "IMAGENET_ROOT_PATH", ",", "filename", ")", ")", "\n", "image", "=", "np", ".", "asarray", "(", "image", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "image", "=", "imresize", "(", "image", ",", "(", "RESOLUTION", ",", "RESOLUTION", ")", ")", "\n", "images", ".", "append", "(", "image", ")", "\n", "count", "+=", "1", "\n", "# Reference samples", "\n", "", "all_ref_samples", "=", "np", ".", "stack", "(", "images", ",", "axis", "=", "0", ")", ".", "transpose", "(", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "all_ref_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.evaluations.calc_ref_stats.main": [[37, 68], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "chainer.cuda.get_device_from_id().use", "range", "os.path.exists", "os.makedirs", "evaluation.load_inception_model", "print", "get_samples", "numpy.savez", "chainer.cuda.get_device_from_id", "get_mean_cov", "os.path.join", "chainer.using_config", "chainer.using_config", "get_mean_cov", "int"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.inception.download.parse_args", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.evaluation.load_inception_model", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.evaluation.get_mean_cov", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.None.evaluation.get_mean_cov"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "'-g'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'imagenet'", ")", "\n", "parser", ".", "add_argument", "(", "'--stat_dir_path'", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--n_classes'", ",", "type", "=", "int", ",", "default", "=", "1000", ")", "\n", "parser", ".", "add_argument", "(", "'--tf'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "chainer", ".", "cuda", ".", "get_device_from_id", "(", "args", ".", "gpu", ")", ".", "use", "(", ")", "\n", "if", "args", ".", "dataset", "==", "'imagenet'", ":", "\n", "        ", "get_samples", "=", "get_imagenet_samples", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "stat_dir_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "stat_dir_path", ")", "\n", "", "if", "args", ".", "tf", ":", "\n", "        ", "import", "source", ".", "inception", ".", "inception_score_tf", "\n", "from", "source", ".", "inception", ".", "inception_score_tf", "import", "get_mean_and_cov", "as", "get_mean_cov", "\n", "", "else", ":", "\n", "        ", "from", "evaluation", "import", "get_mean_cov", "\n", "model", "=", "load_inception_model", "(", "args", ".", "inception_model_path", ")", "\n", "", "for", "c", "in", "range", "(", "args", ".", "n_classes", ")", ":", "\n", "        ", "print", "(", "'label:{}'", ".", "format", "(", "c", ")", ")", "\n", "all_ref_samples", "=", "get_samples", "(", "c", ")", "\n", "if", "args", ".", "tf", ":", "\n", "            ", "mean", ",", "cov", "=", "get_mean_cov", "(", "all_ref_samples", ")", "\n", "", "else", ":", "\n", "            ", "with", "chainer", ".", "using_config", "(", "'train'", ",", "False", ")", ",", "chainer", ".", "using_config", "(", "'enable_backprop'", ",", "False", ")", ":", "\n", "                ", "mean", ",", "cov", "=", "get_mean_cov", "(", "model", ",", "all_ref_samples", ")", "\n", "", "", "np", ".", "savez", "(", "os", ".", "path", ".", "join", "(", "args", ".", "stat_dir_path", ",", "'{}.npz'", ".", "format", "(", "int", "(", "c", ")", ")", ")", ",", "mean", "=", "mean", ",", "cov", "=", "cov", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.gen_models.resnet_256.ResNetGenerator.__init__": [[9, 27], ["chainer.Chain.__init__", "chainer.Chain.__init__", "chainer.initializers.GlorotUniform", "chainer.initializers.GlorotUniform", "chainer.initializers.GlorotUniform", "chainer.initializers.GlorotUniform", "resnet_256.ResNetGenerator.init_scope", "chainer.Linear", "chainer.Linear", "gen_models.resblocks.Block", "gen_models.resblocks.Block", "gen_models.resblocks.Block", "gen_models.resblocks.Block", "gen_models.resblocks.Block", "gen_models.resblocks.Block", "chainer.BatchNormalization", "chainer.BatchNormalization", "chainer.Convolution2D", "chainer.Convolution2D"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.resblocks.OptimizedBlock.__init__", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.resblocks.OptimizedBlock.__init__", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear"], ["    ", "def", "__init__", "(", "self", ",", "ch", "=", "64", ",", "dim_z", "=", "128", ",", "bottom_width", "=", "4", ",", "activation", "=", "F", ".", "relu", ",", "n_classes", "=", "0", ",", "distribution", "=", "\"normal\"", ")", ":", "\n", "        ", "super", "(", "ResNetGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "initializer", "=", "chainer", ".", "initializers", ".", "GlorotUniform", "(", ")", "\n", "self", ".", "bottom_width", "=", "bottom_width", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "distribution", "=", "distribution", "\n", "self", ".", "dim_z", "=", "dim_z", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "with", "self", ".", "init_scope", "(", ")", ":", "\n", "            ", "self", ".", "l1", "=", "L", ".", "Linear", "(", "dim_z", ",", "(", "bottom_width", "**", "2", ")", "*", "ch", "*", "16", ",", "initialW", "=", "initializer", ")", "\n", "self", ".", "block2", "=", "Block", "(", "ch", "*", "16", ",", "ch", "*", "16", ",", "activation", "=", "activation", ",", "upsample", "=", "True", ",", "n_classes", "=", "n_classes", ")", "\n", "self", ".", "block3", "=", "Block", "(", "ch", "*", "16", ",", "ch", "*", "8", ",", "activation", "=", "activation", ",", "upsample", "=", "True", ",", "n_classes", "=", "n_classes", ")", "\n", "self", ".", "block4", "=", "Block", "(", "ch", "*", "8", ",", "ch", "*", "8", ",", "activation", "=", "activation", ",", "upsample", "=", "True", ",", "n_classes", "=", "n_classes", ")", "\n", "self", ".", "block5", "=", "Block", "(", "ch", "*", "8", ",", "ch", "*", "4", ",", "activation", "=", "activation", ",", "upsample", "=", "True", ",", "n_classes", "=", "n_classes", ")", "\n", "self", ".", "block6", "=", "Block", "(", "ch", "*", "4", ",", "ch", "*", "2", ",", "activation", "=", "activation", ",", "upsample", "=", "True", ",", "n_classes", "=", "n_classes", ")", "\n", "self", ".", "block7", "=", "Block", "(", "ch", "*", "2", ",", "ch", ",", "activation", "=", "activation", ",", "upsample", "=", "True", ",", "n_classes", "=", "n_classes", ")", "\n", "self", ".", "b8", "=", "L", ".", "BatchNormalization", "(", "ch", ")", "\n", "self", ".", "l8", "=", "L", ".", "Convolution2D", "(", "ch", ",", "3", ",", "ksize", "=", "3", ",", "stride", "=", "1", ",", "pad", "=", "1", ",", "initialW", "=", "initializer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.gen_models.resnet_256.ResNetGenerator.__call__": [[28, 49], ["resnet_256.ResNetGenerator.l1", "chainer.functions.reshape", "chainer.functions.reshape", "resnet_256.ResNetGenerator.block2", "resnet_256.ResNetGenerator.block3", "resnet_256.ResNetGenerator.block4", "resnet_256.ResNetGenerator.block5", "resnet_256.ResNetGenerator.block6", "resnet_256.ResNetGenerator.block7", "resnet_256.ResNetGenerator.b8", "resnet_256.ResNetGenerator.activation", "chainer.functions.tanh", "chainer.functions.tanh", "source.miscs.random_samples.sample_continuous", "Exception", "resnet_256.ResNetGenerator.l8", "source.miscs.random_samples.sample_categorical"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.miscs.random_samples.sample_continuous", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.miscs.random_samples.sample_categorical"], ["", "", "def", "__call__", "(", "self", ",", "batchsize", "=", "64", ",", "z", "=", "None", ",", "y", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "z", "is", "None", ":", "\n", "            ", "z", "=", "sample_continuous", "(", "self", ".", "dim_z", ",", "batchsize", ",", "distribution", "=", "self", ".", "distribution", ",", "xp", "=", "self", ".", "xp", ")", "\n", "", "if", "y", "is", "None", ":", "\n", "            ", "y", "=", "sample_categorical", "(", "self", ".", "n_classes", ",", "batchsize", ",", "distribution", "=", "\"uniform\"", ",", "\n", "xp", "=", "self", ".", "xp", ")", "if", "self", ".", "n_classes", ">", "0", "else", "None", "\n", "", "if", "(", "y", "is", "not", "None", ")", "and", "z", ".", "shape", "[", "0", "]", "!=", "y", ".", "shape", "[", "0", "]", ":", "\n", "            ", "raise", "Exception", "(", "'z.shape[0] != y.shape[0], z.shape[0]={}, y.shape[0]={}'", ".", "format", "(", "z", ".", "shape", "[", "0", "]", ",", "y", ".", "shape", "[", "0", "]", ")", ")", "\n", "", "h", "=", "z", "\n", "h", "=", "self", ".", "l1", "(", "h", ")", "\n", "h", "=", "F", ".", "reshape", "(", "h", ",", "(", "h", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "self", ".", "bottom_width", ",", "self", ".", "bottom_width", ")", ")", "\n", "h", "=", "self", ".", "block2", "(", "h", ",", "y", ",", "**", "kwargs", ")", "\n", "h", "=", "self", ".", "block3", "(", "h", ",", "y", ",", "**", "kwargs", ")", "\n", "h", "=", "self", ".", "block4", "(", "h", ",", "y", ",", "**", "kwargs", ")", "\n", "h", "=", "self", ".", "block5", "(", "h", ",", "y", ",", "**", "kwargs", ")", "\n", "h", "=", "self", ".", "block6", "(", "h", ",", "y", ",", "**", "kwargs", ")", "\n", "h", "=", "self", ".", "block7", "(", "h", ",", "y", ",", "**", "kwargs", ")", "\n", "h", "=", "self", ".", "b8", "(", "h", ")", "\n", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "h", "=", "F", ".", "tanh", "(", "self", ".", "l8", "(", "h", ")", ")", "\n", "return", "h", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.gen_models.resnet_32.ResNetGenerator.__init__": [[9, 23], ["chainer.Chain.__init__", "chainer.Chain.__init__", "resnet_32.ResNetGenerator.init_scope", "chainer.Linear", "chainer.Linear", "gen_models.resblocks.Block", "gen_models.resblocks.Block", "gen_models.resblocks.Block", "chainer.BatchNormalization", "chainer.BatchNormalization", "chainer.Convolution2D", "chainer.Convolution2D", "chainer.initializers.GlorotUniform", "chainer.initializers.GlorotUniform", "chainer.initializers.GlorotUniform", "chainer.initializers.GlorotUniform", "chainer.initializers.GlorotUniform", "chainer.initializers.GlorotUniform", "chainer.initializers.GlorotUniform", "chainer.initializers.GlorotUniform"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.resblocks.OptimizedBlock.__init__", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.resblocks.OptimizedBlock.__init__", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear"], ["    ", "def", "__init__", "(", "self", ",", "ch", "=", "256", ",", "dim_z", "=", "128", ",", "bottom_width", "=", "4", ",", "activation", "=", "F", ".", "relu", ",", "n_classes", "=", "0", ",", "distribution", "=", "\"normal\"", ")", ":", "\n", "        ", "super", "(", "ResNetGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bottom_width", "=", "bottom_width", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "distribution", "=", "distribution", "\n", "self", ".", "dim_z", "=", "dim_z", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "with", "self", ".", "init_scope", "(", ")", ":", "\n", "            ", "self", ".", "l1", "=", "L", ".", "Linear", "(", "dim_z", ",", "(", "bottom_width", "**", "2", ")", "*", "ch", ",", "initialW", "=", "chainer", ".", "initializers", ".", "GlorotUniform", "(", ")", ")", "\n", "self", ".", "block2", "=", "Block", "(", "ch", ",", "ch", ",", "activation", "=", "activation", ",", "upsample", "=", "True", ",", "n_classes", "=", "n_classes", ")", "\n", "self", ".", "block3", "=", "Block", "(", "ch", ",", "ch", ",", "activation", "=", "activation", ",", "upsample", "=", "True", ",", "n_classes", "=", "n_classes", ")", "\n", "self", ".", "block4", "=", "Block", "(", "ch", ",", "ch", ",", "activation", "=", "activation", ",", "upsample", "=", "True", ",", "n_classes", "=", "n_classes", ")", "\n", "self", ".", "b5", "=", "L", ".", "BatchNormalization", "(", "ch", ")", "\n", "self", ".", "c5", "=", "L", ".", "Convolution2D", "(", "ch", ",", "3", ",", "ksize", "=", "3", ",", "stride", "=", "1", ",", "pad", "=", "1", ",", "initialW", "=", "chainer", ".", "initializers", ".", "GlorotUniform", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.gen_models.resnet_32.ResNetGenerator.sample_z": [[24, 26], ["source.miscs.random_samples.sample_continuous"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.miscs.random_samples.sample_continuous"], ["", "", "def", "sample_z", "(", "self", ",", "batchsize", "=", "64", ")", ":", "\n", "        ", "return", "sample_continuous", "(", "self", ".", "dim_z", ",", "batchsize", ",", "distribution", "=", "self", ".", "distribution", ",", "xp", "=", "self", ".", "xp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.gen_models.resnet_32.ResNetGenerator.sample_y": [[27, 29], ["source.miscs.random_samples.sample_categorical"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.miscs.random_samples.sample_categorical"], ["", "def", "sample_y", "(", "self", ",", "batchsize", "=", "64", ")", ":", "\n", "        ", "return", "sample_categorical", "(", "self", ".", "n_classes", ",", "batchsize", ",", "distribution", "=", "\"uniform\"", ",", "xp", "=", "self", ".", "xp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.gen_models.resnet_32.ResNetGenerator.__call__": [[30, 48], ["resnet_32.ResNetGenerator.l1", "chainer.functions.reshape", "chainer.functions.reshape", "resnet_32.ResNetGenerator.block2", "resnet_32.ResNetGenerator.block3", "resnet_32.ResNetGenerator.block4", "resnet_32.ResNetGenerator.b5", "resnet_32.ResNetGenerator.activation", "chainer.functions.tanh", "chainer.functions.tanh", "source.miscs.random_samples.sample_continuous", "ValueError", "resnet_32.ResNetGenerator.c5", "source.miscs.random_samples.sample_categorical"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.miscs.random_samples.sample_continuous", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.miscs.random_samples.sample_categorical"], ["", "def", "__call__", "(", "self", ",", "batchsize", "=", "64", ",", "z", "=", "None", ",", "y", "=", "None", ")", ":", "\n", "        ", "if", "z", "is", "None", ":", "\n", "            ", "z", "=", "sample_continuous", "(", "self", ".", "dim_z", ",", "batchsize", ",", "distribution", "=", "self", ".", "distribution", ",", "xp", "=", "self", ".", "xp", ")", "\n", "", "if", "y", "is", "None", ":", "\n", "            ", "y", "=", "sample_categorical", "(", "self", ".", "n_classes", ",", "batchsize", ",", "distribution", "=", "\"uniform\"", ",", "\n", "xp", "=", "self", ".", "xp", ")", "if", "self", ".", "n_classes", ">", "0", "else", "None", "\n", "", "if", "(", "y", "is", "not", "None", ")", "and", "z", ".", "shape", "[", "0", "]", "!=", "y", ".", "shape", "[", "0", "]", ":", "\n", "            ", "raise", "ValueError", "(", "'z.shape[0] != y.shape[0]'", ")", "\n", "", "h", "=", "z", "\n", "h", "=", "self", ".", "l1", "(", "h", ")", "\n", "h", "=", "F", ".", "reshape", "(", "h", ",", "(", "h", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "self", ".", "bottom_width", ",", "self", ".", "bottom_width", ")", ")", "\n", "h", "=", "self", ".", "block2", "(", "h", ",", "y", ")", "\n", "h", "=", "self", ".", "block3", "(", "h", ",", "y", ")", "\n", "h", "=", "self", ".", "block4", "(", "h", ",", "y", ")", "\n", "h", "=", "self", ".", "b5", "(", "h", ")", "\n", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "h", "=", "F", ".", "tanh", "(", "self", ".", "c5", "(", "h", ")", ")", "\n", "return", "h", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.gen_models.resnet_64.ResNetGenerator.__init__": [[9, 25], ["chainer.Chain.__init__", "chainer.Chain.__init__", "chainer.initializers.GlorotUniform", "chainer.initializers.GlorotUniform", "chainer.initializers.GlorotUniform", "chainer.initializers.GlorotUniform", "resnet_64.ResNetGenerator.init_scope", "chainer.Linear", "chainer.Linear", "gen_models.resblocks.Block", "gen_models.resblocks.Block", "gen_models.resblocks.Block", "gen_models.resblocks.Block", "chainer.BatchNormalization", "chainer.BatchNormalization", "chainer.Convolution2D", "chainer.Convolution2D"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.resblocks.OptimizedBlock.__init__", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.resblocks.OptimizedBlock.__init__", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear"], ["    ", "def", "__init__", "(", "self", ",", "ch", "=", "64", ",", "dim_z", "=", "128", ",", "bottom_width", "=", "4", ",", "activation", "=", "F", ".", "relu", ",", "n_classes", "=", "0", ",", "distribution", "=", "\"normal\"", ")", ":", "\n", "        ", "super", "(", "ResNetGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "initializer", "=", "chainer", ".", "initializers", ".", "GlorotUniform", "(", ")", "\n", "self", ".", "bottom_width", "=", "bottom_width", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "distribution", "=", "distribution", "\n", "self", ".", "dim_z", "=", "dim_z", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "with", "self", ".", "init_scope", "(", ")", ":", "\n", "            ", "self", ".", "l1", "=", "L", ".", "Linear", "(", "dim_z", ",", "(", "bottom_width", "**", "2", ")", "*", "ch", "*", "16", ",", "initialW", "=", "initializer", ")", "\n", "self", ".", "block2", "=", "Block", "(", "ch", "*", "16", ",", "ch", "*", "8", ",", "activation", "=", "activation", ",", "upsample", "=", "True", ",", "n_classes", "=", "n_classes", ")", "\n", "self", ".", "block3", "=", "Block", "(", "ch", "*", "8", ",", "ch", "*", "4", ",", "activation", "=", "activation", ",", "upsample", "=", "True", ",", "n_classes", "=", "n_classes", ")", "\n", "self", ".", "block4", "=", "Block", "(", "ch", "*", "4", ",", "ch", "*", "2", ",", "activation", "=", "activation", ",", "upsample", "=", "True", ",", "n_classes", "=", "n_classes", ")", "\n", "self", ".", "block5", "=", "Block", "(", "ch", "*", "2", ",", "ch", ",", "activation", "=", "activation", ",", "upsample", "=", "True", ",", "n_classes", "=", "n_classes", ")", "\n", "self", ".", "b6", "=", "L", ".", "BatchNormalization", "(", "ch", ")", "\n", "self", ".", "l6", "=", "L", ".", "Convolution2D", "(", "ch", ",", "3", ",", "ksize", "=", "3", ",", "stride", "=", "1", ",", "pad", "=", "1", ",", "initialW", "=", "initializer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.gen_models.resnet_64.ResNetGenerator.__call__": [[26, 45], ["resnet_64.ResNetGenerator.l1", "chainer.functions.reshape", "chainer.functions.reshape", "resnet_64.ResNetGenerator.block2", "resnet_64.ResNetGenerator.block3", "resnet_64.ResNetGenerator.block4", "resnet_64.ResNetGenerator.block5", "resnet_64.ResNetGenerator.b6", "resnet_64.ResNetGenerator.activation", "chainer.functions.tanh", "chainer.functions.tanh", "source.miscs.random_samples.sample_continuous", "Exception", "resnet_64.ResNetGenerator.l6", "source.miscs.random_samples.sample_categorical"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.miscs.random_samples.sample_continuous", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.miscs.random_samples.sample_categorical"], ["", "", "def", "__call__", "(", "self", ",", "batchsize", "=", "64", ",", "z", "=", "None", ",", "y", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "z", "is", "None", ":", "\n", "            ", "z", "=", "sample_continuous", "(", "self", ".", "dim_z", ",", "batchsize", ",", "distribution", "=", "self", ".", "distribution", ",", "xp", "=", "self", ".", "xp", ")", "\n", "", "if", "y", "is", "None", ":", "\n", "            ", "y", "=", "sample_categorical", "(", "self", ".", "n_classes", ",", "batchsize", ",", "distribution", "=", "\"uniform\"", ",", "\n", "xp", "=", "self", ".", "xp", ")", "if", "self", ".", "n_classes", ">", "0", "else", "None", "\n", "", "if", "(", "y", "is", "not", "None", ")", "and", "z", ".", "shape", "[", "0", "]", "!=", "y", ".", "shape", "[", "0", "]", ":", "\n", "            ", "raise", "Exception", "(", "'z.shape[0] != y.shape[0], z.shape[0]={}, y.shape[0]={}'", ".", "format", "(", "z", ".", "shape", "[", "0", "]", ",", "y", ".", "shape", "[", "0", "]", ")", ")", "\n", "", "h", "=", "z", "\n", "h", "=", "self", ".", "l1", "(", "h", ")", "\n", "h", "=", "F", ".", "reshape", "(", "h", ",", "(", "h", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "self", ".", "bottom_width", ",", "self", ".", "bottom_width", ")", ")", "\n", "h", "=", "self", ".", "block2", "(", "h", ",", "y", ",", "**", "kwargs", ")", "\n", "h", "=", "self", ".", "block3", "(", "h", ",", "y", ",", "**", "kwargs", ")", "\n", "h", "=", "self", ".", "block4", "(", "h", ",", "y", ",", "**", "kwargs", ")", "\n", "h", "=", "self", ".", "block5", "(", "h", ",", "y", ",", "**", "kwargs", ")", "\n", "h", "=", "self", ".", "b6", "(", "h", ")", "\n", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "h", "=", "F", ".", "tanh", "(", "self", ".", "l6", "(", "h", ")", ")", "\n", "return", "h", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.gen_models.resnet.ResNetGenerator.__init__": [[9, 26], ["chainer.Chain.__init__", "chainer.Chain.__init__", "chainer.initializers.GlorotUniform", "chainer.initializers.GlorotUniform", "chainer.initializers.GlorotUniform", "chainer.initializers.GlorotUniform", "resnet.ResNetGenerator.init_scope", "chainer.Linear", "chainer.Linear", "gen_models.resblocks.Block", "gen_models.resblocks.Block", "gen_models.resblocks.Block", "gen_models.resblocks.Block", "gen_models.resblocks.Block", "chainer.BatchNormalization", "chainer.BatchNormalization", "chainer.Convolution2D", "chainer.Convolution2D"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.resblocks.OptimizedBlock.__init__", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.resblocks.OptimizedBlock.__init__", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear"], ["    ", "def", "__init__", "(", "self", ",", "ch", "=", "64", ",", "dim_z", "=", "128", ",", "bottom_width", "=", "4", ",", "activation", "=", "F", ".", "relu", ",", "n_classes", "=", "0", ",", "distribution", "=", "\"normal\"", ")", ":", "\n", "        ", "super", "(", "ResNetGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "initializer", "=", "chainer", ".", "initializers", ".", "GlorotUniform", "(", ")", "\n", "self", ".", "bottom_width", "=", "bottom_width", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "distribution", "=", "distribution", "\n", "self", ".", "dim_z", "=", "dim_z", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "with", "self", ".", "init_scope", "(", ")", ":", "\n", "            ", "self", ".", "l1", "=", "L", ".", "Linear", "(", "dim_z", ",", "(", "bottom_width", "**", "2", ")", "*", "ch", "*", "16", ",", "initialW", "=", "initializer", ")", "\n", "self", ".", "block2", "=", "Block", "(", "ch", "*", "16", ",", "ch", "*", "16", ",", "activation", "=", "activation", ",", "upsample", "=", "True", ",", "n_classes", "=", "n_classes", ")", "\n", "self", ".", "block3", "=", "Block", "(", "ch", "*", "16", ",", "ch", "*", "8", ",", "activation", "=", "activation", ",", "upsample", "=", "True", ",", "n_classes", "=", "n_classes", ")", "\n", "self", ".", "block4", "=", "Block", "(", "ch", "*", "8", ",", "ch", "*", "4", ",", "activation", "=", "activation", ",", "upsample", "=", "True", ",", "n_classes", "=", "n_classes", ")", "\n", "self", ".", "block5", "=", "Block", "(", "ch", "*", "4", ",", "ch", "*", "2", ",", "activation", "=", "activation", ",", "upsample", "=", "True", ",", "n_classes", "=", "n_classes", ")", "\n", "self", ".", "block6", "=", "Block", "(", "ch", "*", "2", ",", "ch", ",", "activation", "=", "activation", ",", "upsample", "=", "True", ",", "n_classes", "=", "n_classes", ")", "\n", "self", ".", "b7", "=", "L", ".", "BatchNormalization", "(", "ch", ")", "\n", "self", ".", "l7", "=", "L", ".", "Convolution2D", "(", "ch", ",", "3", ",", "ksize", "=", "3", ",", "stride", "=", "1", ",", "pad", "=", "1", ",", "initialW", "=", "initializer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.gen_models.resnet.ResNetGenerator.__call__": [[27, 47], ["resnet.ResNetGenerator.l1", "chainer.functions.reshape", "chainer.functions.reshape", "resnet.ResNetGenerator.block2", "resnet.ResNetGenerator.block3", "resnet.ResNetGenerator.block4", "resnet.ResNetGenerator.block5", "resnet.ResNetGenerator.block6", "resnet.ResNetGenerator.b7", "resnet.ResNetGenerator.activation", "chainer.functions.tanh", "chainer.functions.tanh", "source.miscs.random_samples.sample_continuous", "ValueError", "resnet.ResNetGenerator.l7", "source.miscs.random_samples.sample_categorical"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.miscs.random_samples.sample_continuous", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.miscs.random_samples.sample_categorical"], ["", "", "def", "__call__", "(", "self", ",", "batchsize", "=", "64", ",", "z", "=", "None", ",", "y", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "z", "is", "None", ":", "\n", "            ", "z", "=", "sample_continuous", "(", "self", ".", "dim_z", ",", "batchsize", ",", "distribution", "=", "self", ".", "distribution", ",", "xp", "=", "self", ".", "xp", ")", "\n", "", "if", "y", "is", "None", ":", "\n", "            ", "y", "=", "sample_categorical", "(", "self", ".", "n_classes", ",", "batchsize", ",", "distribution", "=", "\"uniform\"", ",", "\n", "xp", "=", "self", ".", "xp", ")", "if", "self", ".", "n_classes", ">", "0", "else", "None", "\n", "", "if", "(", "y", "is", "not", "None", ")", "and", "z", ".", "shape", "[", "0", "]", "!=", "y", ".", "shape", "[", "0", "]", ":", "\n", "            ", "raise", "ValueError", "(", "'z.shape[0] != y.shape[0], z.shape[0]={}, y.shape[0]={}'", ".", "format", "(", "z", ".", "shape", "[", "0", "]", ",", "y", ".", "shape", "[", "0", "]", ")", ")", "\n", "", "h", "=", "z", "\n", "h", "=", "self", ".", "l1", "(", "h", ")", "\n", "h", "=", "F", ".", "reshape", "(", "h", ",", "(", "h", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "self", ".", "bottom_width", ",", "self", ".", "bottom_width", ")", ")", "\n", "h", "=", "self", ".", "block2", "(", "h", ",", "y", ",", "**", "kwargs", ")", "\n", "h", "=", "self", ".", "block3", "(", "h", ",", "y", ",", "**", "kwargs", ")", "\n", "h", "=", "self", ".", "block4", "(", "h", ",", "y", ",", "**", "kwargs", ")", "\n", "h", "=", "self", ".", "block5", "(", "h", ",", "y", ",", "**", "kwargs", ")", "\n", "h", "=", "self", ".", "block6", "(", "h", ",", "y", ",", "**", "kwargs", ")", "\n", "h", "=", "self", ".", "b7", "(", "h", ")", "\n", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "h", "=", "F", ".", "tanh", "(", "self", ".", "l7", "(", "h", ")", ")", "\n", "return", "h", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.gen_models.resblocks.Block.__init__": [[18, 39], ["chainer.Chain.__init__", "chainer.Chain.__init__", "chainer.initializers.GlorotUniform", "chainer.initializers.GlorotUniform", "chainer.initializers.GlorotUniform", "chainer.initializers.GlorotUniform", "chainer.initializers.GlorotUniform", "chainer.initializers.GlorotUniform", "chainer.initializers.GlorotUniform", "chainer.initializers.GlorotUniform", "math.sqrt", "resblocks.Block.init_scope", "chainer.Convolution2D", "chainer.Convolution2D", "chainer.Convolution2D", "chainer.Convolution2D", "source.links.categorical_conditional_batch_normalization.CategoricalConditionalBatchNormalization", "source.links.categorical_conditional_batch_normalization.CategoricalConditionalBatchNormalization", "chainer.BatchNormalization", "chainer.BatchNormalization", "chainer.BatchNormalization", "chainer.BatchNormalization", "chainer.Convolution2D", "chainer.Convolution2D"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.resblocks.OptimizedBlock.__init__", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.resblocks.OptimizedBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "hidden_channels", "=", "None", ",", "ksize", "=", "3", ",", "pad", "=", "1", ",", "\n", "activation", "=", "F", ".", "relu", ",", "upsample", "=", "False", ",", "n_classes", "=", "0", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "initializer", "=", "chainer", ".", "initializers", ".", "GlorotUniform", "(", "math", ".", "sqrt", "(", "2", ")", ")", "\n", "initializer_sc", "=", "chainer", ".", "initializers", ".", "GlorotUniform", "(", ")", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "upsample", "=", "upsample", "\n", "self", ".", "learnable_sc", "=", "in_channels", "!=", "out_channels", "or", "upsample", "\n", "hidden_channels", "=", "out_channels", "if", "hidden_channels", "is", "None", "else", "hidden_channels", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "with", "self", ".", "init_scope", "(", ")", ":", "\n", "            ", "self", ".", "c1", "=", "L", ".", "Convolution2D", "(", "in_channels", ",", "hidden_channels", ",", "ksize", "=", "ksize", ",", "pad", "=", "pad", ",", "initialW", "=", "initializer", ")", "\n", "self", ".", "c2", "=", "L", ".", "Convolution2D", "(", "hidden_channels", ",", "out_channels", ",", "ksize", "=", "ksize", ",", "pad", "=", "pad", ",", "initialW", "=", "initializer", ")", "\n", "if", "n_classes", ">", "0", ":", "\n", "                ", "self", ".", "b1", "=", "CategoricalConditionalBatchNormalization", "(", "in_channels", ",", "n_cat", "=", "n_classes", ")", "\n", "self", ".", "b2", "=", "CategoricalConditionalBatchNormalization", "(", "hidden_channels", ",", "n_cat", "=", "n_classes", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "b1", "=", "L", ".", "BatchNormalization", "(", "in_channels", ")", "\n", "self", ".", "b2", "=", "L", ".", "BatchNormalization", "(", "hidden_channels", ")", "\n", "", "if", "self", ".", "learnable_sc", ":", "\n", "                ", "self", ".", "c_sc", "=", "L", ".", "Convolution2D", "(", "in_channels", ",", "out_channels", ",", "ksize", "=", "1", ",", "pad", "=", "0", ",", "initialW", "=", "initializer_sc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.gen_models.resblocks.Block.residual": [[40, 49], ["resblocks.Block.activation", "resblocks.Block.activation", "resblocks.Block.c2", "resblocks.Block.b1", "resblocks.Block.b1", "resblocks.upsample_conv", "resblocks.Block.c1", "resblocks.Block.b2", "resblocks.Block.b2"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.gen_models.resblocks.upsample_conv"], ["", "", "", "def", "residual", "(", "self", ",", "x", ",", "y", "=", "None", ",", "z", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "h", "=", "x", "\n", "h", "=", "self", ".", "b1", "(", "h", ",", "y", ",", "**", "kwargs", ")", "if", "y", "is", "not", "None", "else", "self", ".", "b1", "(", "h", ",", "**", "kwargs", ")", "\n", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "h", "=", "upsample_conv", "(", "h", ",", "self", ".", "c1", ")", "if", "self", ".", "upsample", "else", "self", ".", "c1", "(", "h", ")", "\n", "h", "=", "self", ".", "b2", "(", "h", ",", "y", ",", "**", "kwargs", ")", "if", "y", "is", "not", "None", "else", "self", ".", "b2", "(", "h", ",", "**", "kwargs", ")", "\n", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "h", "=", "self", ".", "c2", "(", "h", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.gen_models.resblocks.Block.shortcut": [[50, 56], ["resblocks.upsample_conv", "resblocks.Block.c_sc"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.gen_models.resblocks.upsample_conv"], ["", "def", "shortcut", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "learnable_sc", ":", "\n", "            ", "x", "=", "upsample_conv", "(", "x", ",", "self", ".", "c_sc", ")", "if", "self", ".", "upsample", "else", "self", ".", "c_sc", "(", "x", ")", "\n", "return", "x", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.gen_models.resblocks.Block.__call__": [[57, 59], ["resblocks.Block.residual", "resblocks.Block.shortcut"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.resblocks.OptimizedBlock.residual", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.resblocks.OptimizedBlock.shortcut"], ["", "", "def", "__call__", "(", "self", ",", "x", ",", "y", "=", "None", ",", "z", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "residual", "(", "x", ",", "y", ",", "z", ",", "**", "kwargs", ")", "+", "self", ".", "shortcut", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.gen_models.resblocks._upsample": [[8, 11], ["chainer.functions.unpooling_2d"], "function", ["None"], ["def", "_upsample", "(", "x", ")", ":", "\n", "    ", "h", ",", "w", "=", "x", ".", "shape", "[", "2", ":", "]", "\n", "return", "F", ".", "unpooling_2d", "(", "x", ",", "2", ",", "outsize", "=", "(", "h", "*", "2", ",", "w", "*", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.gen_models.resblocks.upsample_conv": [[13, 15], ["conv", "resblocks._upsample"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.gen_models.resblocks._upsample"], ["", "def", "upsample_conv", "(", "x", ",", "conv", ")", ":", "\n", "    ", "return", "conv", "(", "_upsample", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.gen_models.resnet_small.ResNetGenerator.__init__": [[9, 26], ["chainer.Chain.__init__", "chainer.Chain.__init__", "chainer.initializers.GlorotUniform", "chainer.initializers.GlorotUniform", "chainer.initializers.GlorotUniform", "chainer.initializers.GlorotUniform", "resnet_small.ResNetGenerator.init_scope", "chainer.Linear", "chainer.Linear", "gen_models.resblocks.Block", "gen_models.resblocks.Block", "gen_models.resblocks.Block", "gen_models.resblocks.Block", "gen_models.resblocks.Block", "chainer.BatchNormalization", "chainer.BatchNormalization", "chainer.Convolution2D", "chainer.Convolution2D"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.resblocks.OptimizedBlock.__init__", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.resblocks.OptimizedBlock.__init__", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear"], ["    ", "def", "__init__", "(", "self", ",", "ch", "=", "64", ",", "dim_z", "=", "128", ",", "bottom_width", "=", "4", ",", "activation", "=", "F", ".", "relu", ",", "n_classes", "=", "0", ",", "distribution", "=", "\"normal\"", ")", ":", "\n", "        ", "super", "(", "ResNetGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "initializer", "=", "chainer", ".", "initializers", ".", "GlorotUniform", "(", ")", "\n", "self", ".", "bottom_width", "=", "bottom_width", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "distribution", "=", "distribution", "\n", "self", ".", "dim_z", "=", "dim_z", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "with", "self", ".", "init_scope", "(", ")", ":", "\n", "            ", "self", ".", "l1", "=", "L", ".", "Linear", "(", "dim_z", ",", "(", "bottom_width", "**", "2", ")", "*", "ch", "*", "8", ",", "initialW", "=", "initializer", ")", "\n", "self", ".", "block2", "=", "Block", "(", "ch", "*", "8", ",", "ch", "*", "8", ",", "activation", "=", "activation", ",", "upsample", "=", "True", ",", "n_classes", "=", "n_classes", ")", "\n", "self", ".", "block3", "=", "Block", "(", "ch", "*", "8", ",", "ch", "*", "4", ",", "activation", "=", "activation", ",", "upsample", "=", "True", ",", "n_classes", "=", "n_classes", ")", "\n", "self", ".", "block4", "=", "Block", "(", "ch", "*", "4", ",", "ch", "*", "4", ",", "activation", "=", "activation", ",", "upsample", "=", "True", ",", "n_classes", "=", "n_classes", ")", "\n", "self", ".", "block5", "=", "Block", "(", "ch", "*", "4", ",", "ch", "*", "2", ",", "activation", "=", "activation", ",", "upsample", "=", "True", ",", "n_classes", "=", "n_classes", ")", "\n", "self", ".", "block6", "=", "Block", "(", "ch", "*", "2", ",", "ch", ",", "activation", "=", "activation", ",", "upsample", "=", "True", ",", "n_classes", "=", "n_classes", ")", "\n", "self", ".", "b7", "=", "L", ".", "BatchNormalization", "(", "ch", ")", "\n", "self", ".", "l7", "=", "L", ".", "Convolution2D", "(", "ch", ",", "3", ",", "ksize", "=", "3", ",", "stride", "=", "1", ",", "pad", "=", "1", ",", "initialW", "=", "initializer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.gen_models.resnet_small.ResNetGenerator.__call__": [[27, 47], ["resnet_small.ResNetGenerator.l1", "chainer.functions.reshape", "chainer.functions.reshape", "resnet_small.ResNetGenerator.block2", "resnet_small.ResNetGenerator.block3", "resnet_small.ResNetGenerator.block4", "resnet_small.ResNetGenerator.block5", "resnet_small.ResNetGenerator.block6", "resnet_small.ResNetGenerator.b7", "resnet_small.ResNetGenerator.activation", "chainer.functions.tanh", "chainer.functions.tanh", "source.miscs.random_samples.sample_continuous", "Exception", "resnet_small.ResNetGenerator.l7", "source.miscs.random_samples.sample_categorical"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.miscs.random_samples.sample_continuous", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.miscs.random_samples.sample_categorical"], ["", "", "def", "__call__", "(", "self", ",", "batchsize", "=", "64", ",", "z", "=", "None", ",", "y", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "z", "is", "None", ":", "\n", "            ", "z", "=", "sample_continuous", "(", "self", ".", "dim_z", ",", "batchsize", ",", "distribution", "=", "self", ".", "distribution", ",", "xp", "=", "self", ".", "xp", ")", "\n", "", "if", "y", "is", "None", ":", "\n", "            ", "y", "=", "sample_categorical", "(", "self", ".", "n_classes", ",", "batchsize", ",", "distribution", "=", "\"uniform\"", ",", "\n", "xp", "=", "self", ".", "xp", ")", "if", "self", ".", "n_classes", ">", "0", "else", "None", "\n", "", "if", "(", "y", "is", "not", "None", ")", "and", "z", ".", "shape", "[", "0", "]", "!=", "y", ".", "shape", "[", "0", "]", ":", "\n", "            ", "raise", "Exception", "(", "'z.shape[0] != y.shape[0], z.shape[0]={}, y.shape[0]={}'", ".", "format", "(", "z", ".", "shape", "[", "0", "]", ",", "y", ".", "shape", "[", "0", "]", ")", ")", "\n", "", "h", "=", "z", "\n", "h", "=", "self", ".", "l1", "(", "h", ")", "\n", "h", "=", "F", ".", "reshape", "(", "h", ",", "(", "h", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "self", ".", "bottom_width", ",", "self", ".", "bottom_width", ")", ")", "\n", "h", "=", "self", ".", "block2", "(", "h", ",", "y", ",", "**", "kwargs", ")", "\n", "h", "=", "self", ".", "block3", "(", "h", ",", "y", ",", "**", "kwargs", ")", "\n", "h", "=", "self", ".", "block4", "(", "h", ",", "y", ",", "**", "kwargs", ")", "\n", "h", "=", "self", ".", "block5", "(", "h", ",", "y", ",", "**", "kwargs", ")", "\n", "h", "=", "self", ".", "block6", "(", "h", ",", "y", ",", "**", "kwargs", ")", "\n", "h", "=", "self", ".", "b7", "(", "h", ")", "\n", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "h", "=", "F", ".", "tanh", "(", "self", ".", "l7", "(", "h", ")", ")", "\n", "return", "h", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.datasets.imagenet_dog_and_cat.ImageNetDogAndCatDataset.__init__": [[14, 20], ["chainer.datasets.LabeledImageDataset"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "root", ",", "size", "=", "128", ",", "resize_method", "=", "'bilinear'", ",", "augmentation", "=", "False", ",", "crop_ratio", "=", "0.9", ")", ":", "\n", "        ", "self", ".", "base", "=", "chainer", ".", "datasets", ".", "LabeledImageDataset", "(", "path", ",", "root", ")", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "resize_method", "=", "resize_method", "\n", "self", ".", "augmentation", "=", "augmentation", "\n", "self", ".", "crop_ratio", "=", "crop_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.datasets.imagenet_dog_and_cat.ImageNetDogAndCatDataset.__len__": [[21, 23], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "base", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.datasets.imagenet_dog_and_cat.ImageNetDogAndCatDataset.transform": [[24, 51], ["scipy.misc.imresize().transpose", "numpy.random.uniform", "numpy.concatenate", "int", "random.randint", "random.randint", "random.randint", "scipy.misc.imresize", "numpy.concatenate.transpose"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "image", ")", ":", "\n", "        ", "c", ",", "h", ",", "w", "=", "image", ".", "shape", "\n", "if", "c", "==", "1", ":", "\n", "            ", "image", "=", "np", ".", "concatenate", "(", "[", "image", ",", "image", ",", "image", "]", ",", "axis", "=", "0", ")", "\n", "", "short_side", "=", "h", "if", "h", "<", "w", "else", "w", "\n", "if", "self", ".", "augmentation", ":", "\n", "            ", "crop_size", "=", "int", "(", "short_side", "*", "self", ".", "crop_ratio", ")", "\n", "# Randomly crop a region and flip the image", "\n", "top", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "crop_size", "-", "1", ")", "\n", "left", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "crop_size", "-", "1", ")", "\n", "if", "random", ".", "randint", "(", "0", ",", "1", ")", ":", "\n", "                ", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "", "", "else", ":", "\n", "            ", "crop_size", "=", "short_side", "\n", "# Crop the center", "\n", "top", "=", "(", "h", "-", "crop_size", ")", "//", "2", "\n", "left", "=", "(", "w", "-", "crop_size", ")", "//", "2", "\n", "", "bottom", "=", "top", "+", "crop_size", "\n", "right", "=", "left", "+", "crop_size", "\n", "\n", "image", "=", "image", "[", ":", ",", "top", ":", "bottom", ",", "left", ":", "right", "]", "\n", "_", ",", "h", ",", "w", "=", "image", ".", "shape", "\n", "image", "=", "scipy", ".", "misc", ".", "imresize", "(", "image", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", ",", "\n", "[", "self", ".", "size", ",", "self", ".", "size", "]", ",", "self", ".", "resize_method", ")", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "image", "=", "image", "/", "128.", "-", "1.", "\n", "image", "+=", "np", ".", "random", ".", "uniform", "(", "size", "=", "image", ".", "shape", ",", "low", "=", "0.", ",", "high", "=", "1.", "/", "128", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.datasets.imagenet_dog_and_cat.ImageNetDogAndCatDataset.get_example": [[52, 57], ["imagenet_dog_and_cat.ImageNetDogAndCatDataset.transform", "int"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.datasets.imagenet.ImageNetDataset.transform"], ["", "def", "get_example", "(", "self", ",", "i", ")", ":", "\n", "        ", "image", ",", "label", "=", "self", ".", "base", "[", "i", "]", "\n", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "index", "=", "class_to_index", "[", "int", "(", "label", ")", "]", "\n", "return", "image", ",", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.datasets.stl10.STL10Dataset.__init__": [[7, 13], ["numpy.load", "numpy.zeros", "print", "len"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.tflib.cifar10.load"], ["    ", "def", "__init__", "(", "self", ",", "test", "=", "False", ")", ":", "\n", "        ", "from", "argparser", "import", "args", "\n", "images", "=", "np", ".", "load", "(", "args", ".", "data_dir", ")", "\n", "labels", "=", "np", ".", "zeros", "(", "[", "images", ".", "shape", "[", "0", "]", ",", "1", "]", ")", "# no use,", "\n", "self", ".", "dset", "=", "(", "images", ",", "labels", ")", "\n", "print", "(", "\"load stl-10.  shape: \"", ",", "len", "(", "self", ".", "dset", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.datasets.stl10.STL10Dataset.__len__": [[14, 16], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dset", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.datasets.stl10.STL10Dataset.get_example": [[17, 21], ["numpy.asarray", "numpy.random.uniform"], "methods", ["None"], ["", "def", "get_example", "(", "self", ",", "i", ")", ":", "\n", "        ", "image", "=", "np", ".", "asarray", "(", "self", ".", "dset", "[", "0", "]", "[", "i", "]", "/", "128.", "-", "1.", ",", "np", ".", "float32", ")", "\n", "image", "+=", "np", ".", "random", ".", "uniform", "(", "size", "=", "image", ".", "shape", ",", "low", "=", "0.", ",", "high", "=", "1.", "/", "128", ")", "\n", "return", "image", ",", "self", ".", "dset", "[", "1", "]", "[", "i", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.datasets.stl10_preprocess.read_labels": [[41, 49], ["open", "numpy.fromfile"], "function", ["None"], ["def", "read_labels", "(", "path_to_labels", ")", ":", "\n", "    ", "\"\"\"\n    :param path_to_labels: path to the binary file containing labels from the STL-10 dataset\n    :return: an array containing the labels\n    \"\"\"", "\n", "with", "open", "(", "path_to_labels", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "labels", "=", "np", ".", "fromfile", "(", "f", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "return", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.datasets.stl10_preprocess.read_all_images": [[51, 77], ["open", "numpy.fromfile", "numpy.reshape", "numpy.transpose"], "function", ["None"], ["", "", "def", "read_all_images", "(", "path_to_data", ")", ":", "\n", "    ", "\"\"\"\n    :param path_to_data: the file containing the binary images from the STL-10 dataset\n    :return: an array containing all the images\n    \"\"\"", "\n", "\n", "with", "open", "(", "path_to_data", ",", "'rb'", ")", "as", "f", ":", "\n", "# read whole file in uint8 chunks", "\n", "        ", "everything", "=", "np", ".", "fromfile", "(", "f", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "# We force the data into 3x96x96 chunks, since the", "\n", "# images are stored in \"column-major order\", meaning", "\n", "# that \"the first 96*96 values are the red channel,", "\n", "# the next 96*96 are green, and the last are blue.\"", "\n", "# The -1 is since the size of the pictures depends", "\n", "# on the input file, and this way numpy determines", "\n", "# the size on its own.", "\n", "images", "=", "np", ".", "reshape", "(", "everything", ",", "(", "-", "1", ",", "3", ",", "96", ",", "96", ")", ")", "\n", "\n", "# Now transpose the images into a standard image format", "\n", "# readable by, for example, matplotlib.imshow", "\n", "# You might want to comment this line or reverse the shuffle", "\n", "# if you will use a learning algorithm like CNN, since they like", "\n", "# their channels separated.", "\n", "images", "=", "np", ".", "transpose", "(", "images", ",", "(", "0", ",", "3", ",", "2", ",", "1", ")", ")", "\n", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.datasets.stl10_preprocess.read_single_image": [[79, 96], ["numpy.fromfile", "numpy.reshape", "numpy.transpose"], "function", ["None"], ["", "", "def", "read_single_image", "(", "image_file", ")", ":", "\n", "    ", "\"\"\"\n    CAREFUL! - this method uses a file as input instead of the path - so the\n    position of the reader will be remembered outside of context of this method.\n    :param image_file: the open file containing the images\n    :return: a single image\n    \"\"\"", "\n", "# read a single image, count determines the number of uint8's to read", "\n", "image", "=", "np", ".", "fromfile", "(", "image_file", ",", "dtype", "=", "np", ".", "uint8", ",", "count", "=", "SIZE", ")", "\n", "# force into image matrix", "\n", "image", "=", "np", ".", "reshape", "(", "image", ",", "(", "3", ",", "96", ",", "96", ")", ")", "\n", "# transpose to standard format", "\n", "# You might want to comment this line or reverse the shuffle", "\n", "# if you will use a learning algorithm like CNN, since they like", "\n", "# their channels separated.", "\n", "image", "=", "np", ".", "transpose", "(", "image", ",", "(", "2", ",", "1", ",", "0", ")", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.datasets.stl10_preprocess.plot_image": [[98, 105], ["matplotlib.imshow", "matplotlib.show"], "function", ["None"], ["", "def", "plot_image", "(", "image", ")", ":", "\n", "    ", "\"\"\"\n    :param image: the image to be plotted in a 3-D matrix format\n    :return: None\n    \"\"\"", "\n", "plt", ".", "imshow", "(", "image", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.datasets.stl10_preprocess.save_image": [[107, 109], ["imsave"], "function", ["None"], ["", "def", "save_image", "(", "image", ",", "name", ")", ":", "\n", "    ", "imsave", "(", "\"%s.png\"", "%", "name", ",", "image", ",", "format", "=", "\"png\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.datasets.stl10_preprocess.download_and_extract": [[111, 130], ["os.path.join", "os.path.exists", "os.makedirs", "DATA_URL.split", "os.path.exists", "urllib.urlretrieve", "print", "tarfile.open().extractall", "sys.stdout.write", "sys.stdout.write", "sys.stdout.flush", "sys.stdout.flush", "tarfile.open", "float", "float"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.tflib.plot.flush", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.tflib.plot.flush"], ["", "def", "download_and_extract", "(", ")", ":", "\n", "    ", "\"\"\"\n    Download and extract the STL-10 dataset\n    :return: None\n    \"\"\"", "\n", "dest_directory", "=", "DATA_DIR", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dest_directory", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dest_directory", ")", "\n", "", "filename", "=", "DATA_URL", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "dest_directory", ",", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "filepath", ")", ":", "\n", "        ", "def", "_progress", "(", "count", ",", "block_size", ",", "total_size", ")", ":", "\n", "            ", "sys", ".", "stdout", ".", "write", "(", "'\\rDownloading %s %.2f%%'", "%", "(", "filename", ",", "\n", "float", "(", "count", "*", "block_size", ")", "/", "float", "(", "total_size", ")", "*", "100.0", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "", "filepath", ",", "_", "=", "urllib", ".", "urlretrieve", "(", "DATA_URL", ",", "filepath", ",", "reporthook", "=", "_progress", ")", "\n", "print", "(", "'Downloaded'", ",", "filename", ")", "\n", "tarfile", ".", "open", "(", "filepath", ",", "'r:gz'", ")", ".", "extractall", "(", "dest_directory", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.datasets.stl10_preprocess.save_images": [[132, 147], ["print", "print", "stl10_preprocess.save_image", "os.makedirs", "str", "str"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.datasets.stl10_preprocess.save_image"], ["", "", "def", "save_images", "(", "images", ",", "labels", ")", ":", "\n", "    ", "print", "(", "\"Saving images to disk\"", ")", "\n", "i", "=", "0", "\n", "for", "image", "in", "images", ":", "\n", "        ", "label", "=", "labels", "[", "i", "]", "\n", "directory", "=", "'./img/'", "+", "str", "(", "label", ")", "+", "'/'", "\n", "try", ":", "\n", "            ", "os", ".", "makedirs", "(", "directory", ",", "exist_ok", "=", "True", ")", "\n", "", "except", "OSError", "as", "exc", ":", "\n", "            ", "if", "exc", ".", "errno", "==", "errno", ".", "EEXIST", ":", "\n", "                ", "pass", "\n", "", "", "filename", "=", "directory", "+", "str", "(", "i", ")", "\n", "print", "(", "filename", ")", "\n", "save_image", "(", "image", ",", "filename", ")", "\n", "i", "=", "i", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.datasets.imagenet.ImageNetDataset.__init__": [[9, 15], ["chainer.datasets.LabeledImageDataset"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "root", ",", "size", "=", "128", ",", "resize_method", "=", "'bilinear'", ",", "augmentation", "=", "False", ",", "crop_ratio", "=", "1.0", ")", ":", "\n", "        ", "self", ".", "base", "=", "chainer", ".", "datasets", ".", "LabeledImageDataset", "(", "path", ",", "root", ")", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "resize_method", "=", "resize_method", "\n", "self", ".", "augmentation", "=", "augmentation", "\n", "self", ".", "crop_ratio", "=", "crop_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.datasets.imagenet.ImageNetDataset.__len__": [[16, 18], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "base", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.datasets.imagenet.ImageNetDataset.transform": [[19, 46], ["scipy.misc.imresize().transpose", "numpy.random.uniform", "numpy.concatenate", "int", "random.randint", "random.randint", "random.randint", "scipy.misc.imresize", "numpy.concatenate.transpose"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "image", ")", ":", "\n", "        ", "c", ",", "h", ",", "w", "=", "image", ".", "shape", "\n", "if", "c", "==", "1", ":", "\n", "            ", "image", "=", "np", ".", "concatenate", "(", "[", "image", ",", "image", ",", "image", "]", ",", "axis", "=", "0", ")", "\n", "", "short_side", "=", "h", "if", "h", "<", "w", "else", "w", "\n", "if", "self", ".", "augmentation", ":", "\n", "            ", "crop_size", "=", "int", "(", "short_side", "*", "self", ".", "crop_ratio", ")", "\n", "# Randomly crop a region and flip the image", "\n", "top", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "crop_size", "-", "1", ")", "\n", "left", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "crop_size", "-", "1", ")", "\n", "if", "random", ".", "randint", "(", "0", ",", "1", ")", ":", "\n", "                ", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "", "", "else", ":", "\n", "            ", "crop_size", "=", "short_side", "\n", "# Crop the center", "\n", "top", "=", "(", "h", "-", "crop_size", ")", "//", "2", "\n", "left", "=", "(", "w", "-", "crop_size", ")", "//", "2", "\n", "", "bottom", "=", "top", "+", "crop_size", "\n", "right", "=", "left", "+", "crop_size", "\n", "\n", "image", "=", "image", "[", ":", ",", "top", ":", "bottom", ",", "left", ":", "right", "]", "\n", "_", ",", "h", ",", "w", "=", "image", ".", "shape", "\n", "image", "=", "scipy", ".", "misc", ".", "imresize", "(", "image", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", ",", "\n", "[", "self", ".", "size", ",", "self", ".", "size", "]", ",", "self", ".", "resize_method", ")", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "image", "=", "image", "/", "128.", "-", "1.", "\n", "image", "+=", "np", ".", "random", ".", "uniform", "(", "size", "=", "image", ".", "shape", ",", "low", "=", "0.", ",", "high", "=", "1.", "/", "128", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.datasets.imagenet.ImageNetDataset.get_example": [[47, 51], ["imagenet.ImageNetDataset.transform"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.datasets.imagenet.ImageNetDataset.transform"], ["", "def", "get_example", "(", "self", ",", "i", ")", ":", "\n", "        ", "image", ",", "label", "=", "self", ".", "base", "[", "i", "]", "\n", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.datasets.cifar10.CIFAR10Dataset.__init__": [[7, 15], ["chainer.datasets.get_cifar10", "print", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "test", "=", "False", ")", ":", "\n", "        ", "d_train", ",", "d_test", "=", "chainer", ".", "datasets", ".", "get_cifar10", "(", "ndim", "=", "3", ",", "withlabel", "=", "True", ",", "scale", "=", "255", ")", "\n", "if", "test", ":", "\n", "            ", "self", ".", "dset", "=", "d_test", "\n", "", "else", ":", "\n", "            ", "self", ".", "dset", "=", "d_train", "\n", "\n", "", "print", "(", "\"load cifar-10.  shape: \"", ",", "len", "(", "self", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.datasets.cifar10.CIFAR10Dataset.__len__": [[16, 18], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.datasets.cifar10.CIFAR10Dataset.get_example": [[19, 23], ["numpy.asarray", "numpy.random.uniform"], "methods", ["None"], ["", "def", "get_example", "(", "self", ",", "i", ")", ":", "\n", "        ", "image", "=", "np", ".", "asarray", "(", "self", ".", "dset", "[", "i", "]", "[", "0", "]", "/", "128.", "-", "1.", ",", "np", ".", "float32", ")", "\n", "image", "+=", "np", ".", "random", ".", "uniform", "(", "size", "=", "image", ".", "shape", ",", "low", "=", "0.", ",", "high", "=", "1.", "/", "128", ")", "\n", "return", "image", ",", "self", ".", "dset", "[", "i", "]", "[", "1", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.synthetic_exp.gan_toy_sn.Generator.__init__": [[79, 92], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.resblocks.OptimizedBlock.__init__", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "main", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "2", ",", "DIM", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "DIM", ",", "DIM", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "DIM", ",", "DIM", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "DIM", ",", "2", ")", ",", "\n", ")", "\n", "self", ".", "main", "=", "main", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.synthetic_exp.gan_toy_sn.Generator.forward": [[93, 99], ["gan_toy_sn.Generator.main"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.evaluations.calc_ref_stats.main"], ["", "def", "forward", "(", "self", ",", "noise", ",", "real_data", ")", ":", "\n", "        ", "if", "FIXED_GENERATOR", ":", "\n", "            ", "return", "noise", "+", "real_data", "\n", "", "else", ":", "\n", "            ", "output", "=", "self", ".", "main", "(", "noise", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.synthetic_exp.gan_toy_sn.Discriminator.__init__": [[102, 114], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "mcmc_sampler.spectral_norm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "mcmc_sampler.spectral_norm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "mcmc_sampler.spectral_norm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "mcmc_sampler.spectral_norm", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.resblocks.OptimizedBlock.__init__", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.synthetic_exp.mcmc_sampler.spectral_norm", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.synthetic_exp.mcmc_sampler.spectral_norm", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.synthetic_exp.mcmc_sampler.spectral_norm", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.synthetic_exp.mcmc_sampler.spectral_norm", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "main", "=", "nn", ".", "Sequential", "(", "\n", "spectral_norm", "(", "nn", ".", "Linear", "(", "2", ",", "DIM", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "spectral_norm", "(", "nn", ".", "Linear", "(", "DIM", ",", "DIM", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "spectral_norm", "(", "nn", ".", "Linear", "(", "DIM", ",", "DIM", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "spectral_norm", "(", "nn", ".", "Linear", "(", "DIM", ",", "1", ")", ")", ",", "\n", ")", "\n", "self", ".", "main", "=", "main", "\n", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.synthetic_exp.gan_toy_sn.Discriminator.forward": [[114, 117], ["gan_toy_sn.Discriminator.main", "gan_toy_sn.Discriminator.view"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.evaluations.calc_ref_stats.main"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "output", "=", "self", ".", "main", "(", "inputs", ")", "\n", "return", "output", ".", "view", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.synthetic_exp.gan_toy_sn.requires_grad": [[73, 76], ["None"], "function", ["None"], ["def", "requires_grad", "(", "parameters", ",", "flag", "=", "True", ")", ":", "\n", "    ", "for", "p", "in", "parameters", ":", "\n", "        ", "p", ".", "requires_grad", "=", "flag", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.synthetic_exp.gan_toy_sn.weights_init": [[122, 130], ["classname.find", "m.weight.data.normal_", "m.bias.data.fill_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_"], "function", ["None"], ["def", "weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.synthetic_exp.gan_toy_sn.generate_image": [[132, 188], ["numpy.zeros", "points.reshape.reshape", "torch.Variable().requires_grad_", "netD().cpu().data.numpy", "matplotlib.figure", "matplotlib.clf", "matplotlib.figure", "matplotlib.clf", "numpy.linspace", "matplotlib.figure", "matplotlib.contour", "matplotlib.contourf", "matplotlib.figure", "matplotlib.contour", "matplotlib.contourf", "range", "matplotlib.figure", "matplotlib.savefig", "matplotlib.figure", "matplotlib.savefig", "numpy.linspace", "numpy.linspace", "points_v.cuda.cuda", "netD().cpu().data.numpy.reshape().transpose", "netD().cpu().data.numpy.reshape().transpose", "netD().cpu().data.numpy.reshape().transpose", "netD().cpu().data.numpy.reshape().transpose", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.Variable().requires_grad_", "torch.Variable", "netG", "mcmc_sampler.Langevin_dynamics", "torch.Variable", "noise.cuda.cuda", "matplotlib.figure", "matplotlib.scatter", "matplotlib.figure", "matplotlib.scatter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "netD().cpu", "netD().cpu().data.numpy.reshape", "netD().cpu().data.numpy.reshape", "netD().cpu().data.numpy.reshape", "netD().cpu().data.numpy.reshape", "torch.Variable", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "str", "str", "netG.cpu().data.numpy", "netG.cpu().data.numpy", "mcmc_sampler.Langevin_dynamics.data.numpy", "mcmc_sampler.Langevin_dynamics.data.numpy", "netD", "len", "len", "len", "len", "len", "len", "len", "len", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "str", "str", "netG.cpu", "netG.cpu"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.synthetic_exp.mcmc_sampler.Langevin_dynamics"], ["def", "generate_image", "(", "true_dist", ")", ":", "\n", "    ", "\"\"\"\n    Generates and saves a plot of the true distribution, the generator, and the\n    critic.\n    \"\"\"", "\n", "BATCHs", "=", "8", "\n", "N_POINTS", "=", "128", "\n", "RANGE", "=", "3", "\n", "points", "=", "np", ".", "zeros", "(", "(", "N_POINTS", ",", "N_POINTS", ",", "2", ")", ",", "dtype", "=", "'float32'", ")", "\n", "points", "[", ":", ",", ":", ",", "0", "]", "=", "np", ".", "linspace", "(", "-", "RANGE", ",", "RANGE", ",", "N_POINTS", ")", "[", ":", ",", "None", "]", "\n", "points", "[", ":", ",", ":", ",", "1", "]", "=", "np", ".", "linspace", "(", "-", "RANGE", ",", "RANGE", ",", "N_POINTS", ")", "[", "None", ",", ":", "]", "\n", "points", "=", "points", ".", "reshape", "(", "(", "-", "1", ",", "2", ")", ")", "\n", "points_v", "=", "autograd", ".", "Variable", "(", "torch", ".", "Tensor", "(", "points", ")", ")", ".", "requires_grad_", "(", "False", ")", "\n", "if", "use_cuda", ":", "\n", "        ", "points_v", "=", "points_v", ".", "cuda", "(", ")", "\n", "", "disc_map", "=", "netD", "(", "points_v", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "# pdb.set_trace()", "\n", "plt", ".", "figure", "(", "1", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "plt", ".", "figure", "(", "2", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "x", "=", "y", "=", "np", ".", "linspace", "(", "-", "RANGE", ",", "RANGE", ",", "N_POINTS", ")", "\n", "plt", ".", "figure", "(", "1", ")", "\n", "plt", ".", "contour", "(", "x", ",", "y", ",", "disc_map", ".", "reshape", "(", "(", "len", "(", "x", ")", ",", "len", "(", "y", ")", ")", ")", ".", "transpose", "(", ")", ")", "\n", "plt", ".", "contourf", "(", "x", ",", "y", ",", "disc_map", ".", "reshape", "(", "(", "len", "(", "x", ")", ",", "len", "(", "y", ")", ")", ")", ".", "transpose", "(", ")", ",", "alpha", "=", "0.1", ")", "\n", "plt", ".", "figure", "(", "2", ")", "\n", "plt", ".", "contour", "(", "x", ",", "y", ",", "disc_map", ".", "reshape", "(", "(", "len", "(", "x", ")", ",", "len", "(", "y", ")", ")", ")", ".", "transpose", "(", ")", ")", "\n", "plt", ".", "contourf", "(", "x", ",", "y", ",", "disc_map", ".", "reshape", "(", "(", "len", "(", "x", ")", ",", "len", "(", "y", ")", ")", ")", ".", "transpose", "(", ")", ",", "alpha", "=", "0.1", ")", "\n", "for", "i", "in", "range", "(", "BATCHs", ")", ":", "\n", "        ", "noise", "=", "torch", ".", "randn", "(", "BATCH_SIZE", ",", "2", ")", "\n", "if", "use_cuda", ":", "\n", "            ", "noise", "=", "noise", ".", "cuda", "(", ")", "\n", "", "noisev", "=", "autograd", ".", "Variable", "(", "noise", ")", ".", "requires_grad_", "(", "True", ")", "\n", "true_dist_v", "=", "autograd", ".", "Variable", "(", "torch", ".", "Tensor", "(", "true_dist", ")", ".", "cuda", "(", ")", "if", "use_cuda", "else", "torch", ".", "Tensor", "(", "true_dist", ")", ")", "\n", "samples", "=", "netG", "(", "noisev", ",", "true_dist_v", ")", "\n", "if", "not", "FIXED_GENERATOR", ":", "\n", "            ", "plt", ".", "figure", "(", "1", ")", "\n", "plt", ".", "scatter", "(", "samples", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "[", ":", ",", "0", "]", ",", "samples", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "[", ":", ",", "1", "]", ",", "s", "=", "20", ",", "c", "=", "'black'", ",", "\n", "edgecolors", "=", "'none'", ",", "marker", "=", "'o'", ")", "# alpha=0.1,", "\n", "# plt.savefig('tmp/' + DATASET + types + 'ci' + str(CRITIC_ITERS) + '/' + 'frame' + str(frame_index[0]) + '.jpg')", "\n", "\n", "# samples.requires_grad_(True)", "\n", "# samples_new = Langevin_dynamics(samples, netD, n_steps=5000, step_lr=0.0005)", "\n", "", "samples_new", "=", "Langevin_dynamics", "(", "samples", ",", "netD", ",", "n_steps", "=", "200", ",", "step_lr", "=", "args", ".", "step_lr", ",", "noisel", "=", "args", ".", "noise", ",", "train", "=", "False", ")", "\n", "# print(samples.size())", "\n", "if", "not", "FIXED_GENERATOR", ":", "\n", "            ", "plt", ".", "figure", "(", "2", ")", "\n", "plt", ".", "scatter", "(", "samples_new", ".", "data", ".", "numpy", "(", ")", "[", ":", ",", "0", "]", ",", "samples_new", ".", "data", ".", "numpy", "(", ")", "[", ":", ",", "1", "]", ",", "s", "=", "20", ",", "c", "=", "'red'", ",", "\n", "edgecolors", "=", "'none'", ",", "marker", "=", "'o'", ")", "# alpha=0.1,", "\n", "\n", "# plt.scatter(true_dist[:, 0], true_dist[:, 1], c='orange', marker='o',alpha=0.3,edgecolors='none')", "\n", "", "", "plt", ".", "figure", "(", "1", ")", "\n", "plt", ".", "savefig", "(", "'tmp/'", "+", "DATASET", "+", "types", "+", "'ci'", "+", "str", "(", "CRITIC_ITERS", ")", "+", "'/'", "+", "'frame_original'", "+", "str", "(", "frame_index", "[", "0", "]", ")", "+", "'.jpg'", ")", "\n", "plt", ".", "figure", "(", "2", ")", "\n", "plt", ".", "savefig", "(", "'tmp/'", "+", "DATASET", "+", "types", "+", "'ci'", "+", "str", "(", "CRITIC_ITERS", ")", "+", "'/'", "+", "'frame_dynamic'", "+", "str", "(", "frame_index", "[", "0", "]", ")", "+", "'.jpg'", ")", "\n", "frame_index", "[", "0", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.synthetic_exp.gan_toy_sn.clip_grad": [[189, 201], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "p.grad.data.copy_", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min"], "function", ["None"], ["", "def", "clip_grad", "(", "parameters", ",", "optimizer", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "state", "=", "optimizer", ".", "state", "[", "p", "]", "\n", "if", "'step'", "not", "in", "state", "or", "state", "[", "'step'", "]", "<", "1", ":", "\n", "                    ", "continue", "\n", "", "step", "=", "state", "[", "'step'", "]", "\n", "exp_avg_sq", "=", "state", "[", "'exp_avg_sq'", "]", "\n", "_", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "bound", "=", "3", "*", "torch", ".", "sqrt", "(", "exp_avg_sq", "/", "(", "1", "-", "beta2", "**", "step", ")", ")", "+", "0.1", "\n", "p", ".", "grad", ".", "data", ".", "copy_", "(", "torch", ".", "max", "(", "torch", ".", "min", "(", "p", ".", "grad", ".", "data", ",", "bound", ")", ",", "-", "bound", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.synthetic_exp.gan_toy_sn.inf_train_gen": [[206, 277], ["range", "numpy.array", "numpy.random.shuffle", "int", "range", "range", "range", "numpy.array", "numpy.random.shuffle", "range", "int", "int", "range", "np.array.append", "range", "int", "numpy.random.randn", "len", "np.array.append", "sklearn.datasets.make_swiss_roll", "data.astype", "range", "numpy.array", "numpy.random.randn", "len", "random.choice", "np.array.append", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.random.randn"], "function", ["None"], ["", "", "", "", "def", "inf_train_gen", "(", ")", ":", "\n", "    ", "if", "DATASET", "==", "'25gaussians'", ":", "\n", "\n", "        ", "dataset", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "int", "(", "64000", "/", "25", ")", ")", ":", "\n", "            ", "for", "x", "in", "range", "(", "-", "2", ",", "3", ")", ":", "\n", "                ", "for", "y", "in", "range", "(", "-", "2", ",", "3", ")", ":", "\n", "                    ", "point", "=", "np", ".", "random", ".", "randn", "(", "2", ")", "*", "0.05", "\n", "point", "[", "0", "]", "+=", "x", "\n", "point", "[", "1", "]", "+=", "y", "\n", "dataset", ".", "append", "(", "point", ")", "\n", "", "", "", "dataset", "=", "np", ".", "array", "(", "dataset", ",", "dtype", "=", "'float32'", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "dataset", ")", "\n", "# dataset /= 2.828  # stdev", "\n", "while", "True", ":", "\n", "            ", "for", "i", "in", "range", "(", "int", "(", "len", "(", "dataset", ")", "/", "BATCH_SIZE", ")", ")", ":", "\n", "                ", "yield", "dataset", "[", "i", "*", "BATCH_SIZE", ":", "(", "i", "+", "1", ")", "*", "BATCH_SIZE", "]", "\n", "\n", "", "", "", "elif", "DATASET", "==", "'20gaussians'", ":", "\n", "\n", "        ", "dataset", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "int", "(", "64000", "/", "25", ")", ")", ":", "\n", "            ", "for", "x", "in", "[", "-", "2", ",", "-", "0", ",", "1", ",", "2", "]", ":", "\n", "                ", "for", "y", "in", "range", "(", "-", "2", ",", "3", ")", ":", "\n", "                    ", "point", "=", "np", ".", "random", ".", "randn", "(", "2", ")", "*", "0.05", "\n", "point", "[", "0", "]", "+=", "x", "\n", "point", "[", "1", "]", "+=", "y", "\n", "dataset", ".", "append", "(", "point", ")", "\n", "", "", "", "dataset", "=", "np", ".", "array", "(", "dataset", ",", "dtype", "=", "'float32'", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "dataset", ")", "\n", "# dataset /= 2.828  # stdev", "\n", "while", "True", ":", "\n", "            ", "for", "i", "in", "range", "(", "int", "(", "len", "(", "dataset", ")", "/", "BATCH_SIZE", ")", ")", ":", "\n", "                ", "yield", "dataset", "[", "i", "*", "BATCH_SIZE", ":", "(", "i", "+", "1", ")", "*", "BATCH_SIZE", "]", "\n", "\n", "", "", "", "elif", "DATASET", "==", "'swissroll'", ":", "\n", "\n", "        ", "while", "True", ":", "\n", "            ", "data", "=", "sklearn", ".", "datasets", ".", "make_swiss_roll", "(", "\n", "n_samples", "=", "BATCH_SIZE", ",", "\n", "noise", "=", "0.25", "\n", ")", "[", "0", "]", "\n", "data", "=", "data", ".", "astype", "(", "'float32'", ")", "[", ":", ",", "[", "0", ",", "2", "]", "]", "\n", "data", "/=", "7.5", "# stdev plus a little", "\n", "yield", "data", "\n", "\n", "", "", "elif", "DATASET", "==", "'8gaussians'", ":", "\n", "\n", "        ", "scale", "=", "2.", "\n", "centers", "=", "[", "\n", "(", "1", ",", "0", ")", ",", "\n", "(", "-", "1", ",", "0", ")", ",", "\n", "(", "0", ",", "1", ")", ",", "\n", "(", "0", ",", "-", "1", ")", ",", "\n", "(", "1.", "/", "np", ".", "sqrt", "(", "2", ")", ",", "1.", "/", "np", ".", "sqrt", "(", "2", ")", ")", ",", "\n", "(", "1.", "/", "np", ".", "sqrt", "(", "2", ")", ",", "-", "1.", "/", "np", ".", "sqrt", "(", "2", ")", ")", ",", "\n", "(", "-", "1.", "/", "np", ".", "sqrt", "(", "2", ")", ",", "1.", "/", "np", ".", "sqrt", "(", "2", ")", ")", ",", "\n", "(", "-", "1.", "/", "np", ".", "sqrt", "(", "2", ")", ",", "-", "1.", "/", "np", ".", "sqrt", "(", "2", ")", ")", "\n", "]", "\n", "centers", "=", "[", "(", "scale", "*", "x", ",", "scale", "*", "y", ")", "for", "x", ",", "y", "in", "centers", "]", "\n", "while", "True", ":", "\n", "            ", "dataset", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "BATCH_SIZE", ")", ":", "\n", "                ", "point", "=", "np", ".", "random", ".", "randn", "(", "2", ")", "*", ".02", "\n", "center", "=", "random", ".", "choice", "(", "centers", ")", "\n", "point", "[", "0", "]", "+=", "center", "[", "0", "]", "\n", "point", "[", "1", "]", "+=", "center", "[", "1", "]", "\n", "dataset", ".", "append", "(", "point", ")", "\n", "", "dataset", "=", "np", ".", "array", "(", "dataset", ",", "dtype", "=", "'float32'", ")", "\n", "dataset", "/=", "1.414", "# stdev", "\n", "yield", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.synthetic_exp.gan_toy_sn.calc_gradient_penalty": [[279, 299], ["torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "alpha.expand.expand", "torch.Variable", "netD", "real_data.size", "alpha.expand.cuda", "interpolates.cuda.cuda", "torch.grad", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "netD.size", "gradients.norm", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "netD.size"], "function", ["None"], ["", "", "", "def", "calc_gradient_penalty", "(", "netD", ",", "real_data", ",", "fake_data", ")", ":", "\n", "    ", "alpha", "=", "torch", ".", "rand", "(", "BATCH_SIZE", ",", "1", ")", "\n", "alpha", "=", "alpha", ".", "expand", "(", "real_data", ".", "size", "(", ")", ")", "\n", "alpha", "=", "alpha", ".", "cuda", "(", ")", "if", "use_cuda", "else", "alpha", "\n", "\n", "interpolates", "=", "alpha", "*", "real_data", "+", "(", "(", "1", "-", "alpha", ")", "*", "fake_data", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "        ", "interpolates", "=", "interpolates", ".", "cuda", "(", ")", "\n", "", "interpolates", "=", "autograd", ".", "Variable", "(", "interpolates", ",", "requires_grad", "=", "True", ")", "\n", "\n", "disc_interpolates", "=", "netD", "(", "interpolates", ")", "\n", "\n", "gradients", "=", "autograd", ".", "grad", "(", "outputs", "=", "disc_interpolates", ",", "inputs", "=", "interpolates", ",", "\n", "grad_outputs", "=", "torch", ".", "ones", "(", "disc_interpolates", ".", "size", "(", ")", ")", ".", "cuda", "(", ")", "if", "use_cuda", "else", "torch", ".", "ones", "(", "\n", "disc_interpolates", ".", "size", "(", ")", ")", ",", "\n", "create_graph", "=", "True", ",", "retain_graph", "=", "True", ",", "only_inputs", "=", "True", ")", "[", "0", "]", "\n", "\n", "gradient_penalty", "=", "(", "(", "gradients", ".", "norm", "(", "2", ",", "dim", "=", "1", ")", "-", "1", ")", "**", "2", ")", ".", "mean", "(", ")", "*", "LAMBDA", "\n", "return", "gradient_penalty", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.synthetic_exp.mcmc_sampler.SpectralNorm.__init__": [[9, 12], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "bound", "=", "False", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "bound", "=", "bound", "\n", "", "def", "compute_weight", "(", "self", ",", "module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.synthetic_exp.mcmc_sampler.SpectralNorm.compute_weight": [[12, 32], ["getattr", "getattr", "getattr.size", "getattr.contiguous().view", "torch.no_grad", "getattr.contiguous", "getattr.contiguous().view.t", "v.norm", "getattr.norm", "torch.clamp"], "methods", ["None"], ["", "def", "compute_weight", "(", "self", ",", "module", ")", ":", "\n", "        ", "weight", "=", "getattr", "(", "module", ",", "self", ".", "name", "+", "'_orig'", ")", "\n", "u", "=", "getattr", "(", "module", ",", "self", ".", "name", "+", "'_u'", ")", "\n", "size", "=", "weight", ".", "size", "(", ")", "\n", "weight_mat", "=", "weight", ".", "contiguous", "(", ")", ".", "view", "(", "size", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "v", "=", "weight_mat", ".", "t", "(", ")", "@", "u", "\n", "v", "=", "v", "/", "v", ".", "norm", "(", ")", "\n", "u", "=", "weight_mat", "@", "v", "\n", "u", "=", "u", "/", "u", ".", "norm", "(", ")", "\n", "\n", "", "sigma", "=", "u", "@", "weight_mat", "@", "v", "\n", "\n", "if", "self", ".", "bound", ":", "\n", "            ", "weight_sn", "=", "weight", "/", "(", "sigma", "+", "1e-6", ")", "*", "torch", ".", "clamp", "(", "sigma", ",", "max", "=", "1", ")", "\n", "\n", "", "else", ":", "\n", "            ", "weight_sn", "=", "weight", "/", "sigma", "\n", "", "return", "weight_sn", ",", "u", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.synthetic_exp.mcmc_sampler.SpectralNorm.apply": [[33, 45], ["mcmc_sampler.SpectralNorm", "getattr", "module.register_parameter", "getattr.size", "getattr.new_empty().normal_", "module.register_buffer", "module.register_buffer", "module.register_forward_pre_hook", "getattr.new_empty"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "apply", "(", "module", ",", "name", ",", "bound", ")", ":", "\n", "        ", "fn", "=", "SpectralNorm", "(", "name", ",", "bound", ")", "\n", "weight", "=", "getattr", "(", "module", ",", "name", ")", "\n", "del", "module", ".", "_parameters", "[", "name", "]", "\n", "module", ".", "register_parameter", "(", "name", "+", "'_orig'", ",", "weight", ")", "\n", "input_size", "=", "weight", ".", "size", "(", "0", ")", "\n", "u", "=", "weight", ".", "new_empty", "(", "input_size", ")", ".", "normal_", "(", ")", "\n", "module", ".", "register_buffer", "(", "name", ",", "weight", ")", "\n", "module", ".", "register_buffer", "(", "name", "+", "'_u'", ",", "u", ")", "\n", "module", ".", "register_forward_pre_hook", "(", "fn", ")", "\n", "return", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.synthetic_exp.mcmc_sampler.SpectralNorm.__call__": [[47, 51], ["mcmc_sampler.SpectralNorm.compute_weight", "setattr", "setattr"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.synthetic_exp.mcmc_sampler.SpectralNorm.compute_weight"], ["", "def", "__call__", "(", "self", ",", "module", ",", "input", ")", ":", "\n", "        ", "weight_sn", ",", "u", "=", "self", ".", "compute_weight", "(", "module", ")", "\n", "setattr", "(", "module", ",", "self", ".", "name", ",", "weight_sn", ")", "\n", "setattr", "(", "module", ",", "self", ".", "name", "+", "'_u'", ",", "u", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.synthetic_exp.mcmc_sampler.spectral_norm": [[56, 63], ["mcmc_sampler.SpectralNorm.apply", "torch.nn.init.normal_", "hasattr", "module.bias.data.zero_"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.synthetic_exp.mcmc_sampler.SpectralNorm.apply"], ["", "", "def", "spectral_norm", "(", "module", ",", "init", "=", "True", ",", "std", "=", "1", ",", "bound", "=", "False", ")", ":", "\n", "    ", "if", "init", ":", "\n", "        ", "nn", ".", "init", ".", "normal_", "(", "module", ".", "weight", ",", "0", ",", "std", ")", "\n", "", "if", "hasattr", "(", "module", ",", "'bias'", ")", "and", "module", ".", "bias", "is", "not", "None", ":", "\n", "        ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "SpectralNorm", ".", "apply", "(", "module", ",", "'weight'", ",", "bound", "=", "bound", ")", "\n", "return", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.synthetic_exp.mcmc_sampler.Langevin_dynamics": [[64, 93], ["torch.autograd.Variable().requires_grad_", "range", "torch.randn_like", "netD", "netD.sum().backward", "neg_img.to.data.add_", "neg_img.to.data.add_", "neg_img.to.grad.detach_", "neg_img.to.grad.zero_", "neg_img.to.to", "torch.autograd.Variable", "numpy.sqrt", "netD.sum", "neg_img.to.grad.norm().unsqueeze().expand", "torch.randn_like.normal_", "neg_img.to.grad.norm().unsqueeze", "neg_img.to.grad.norm"], "function", ["None"], ["", "def", "Langevin_dynamics", "(", "samples", ",", "netD", ",", "n_steps", "=", "10000", ",", "step_lr", "=", "0.0002", ",", "noisel", "=", "0.2", ",", "train", "=", "True", ")", ":", "\n", "# images = []", "\n", "    ", "neg_img", "=", "torch", ".", "autograd", ".", "Variable", "(", "samples", ".", "data", ")", ".", "requires_grad_", "(", "True", ")", "\n", "# print(samples.data)", "\n", "for", "_", "in", "range", "(", "n_steps", ")", ":", "\n", "# images.append(neg_img)", "\n", "        ", "noise", "=", "torch", ".", "randn_like", "(", "neg_img", ",", "device", "=", "'cuda'", ")", "\n", "images_out", "=", "netD", "(", "neg_img", ")", "\n", "images_out", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "# print(neg_img.grad.norm(dim=1).size())", "\n", "# print(\"modulus of grad components:  norm {}\".format(noise.norm()))", "\n", "# print(neg_img.grad.norm(dim=1).unsqueeze(1).expand(256, 2))", "\n", "noise", "=", "neg_img", ".", "grad", ".", "norm", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "256", ",", "2", ")", "*", "noise", ".", "normal_", "(", "0", ",", "noisel", ")", "*", "np", ".", "sqrt", "(", "step_lr", ")", "\n", "neg_img", ".", "data", ".", "add_", "(", "noise", ".", "data", ")", "\n", "# print(\"modulus of grad components: mean {}, max {} , norm {}\".format(neg_img.grad.data.abs().mean(),", "\n", "#                                                                      neg_img.grad.data.abs().max(),", "\n", "#                                                                      neg_img.grad.norm()))", "\n", "# print(neg_img)", "\n", "neg_img", ".", "data", ".", "add_", "(", "step_lr", ",", "neg_img", ".", "grad", ".", "data", ")", "\n", "# print(neg_img)", "\n", "# neg_img.data.add_(1.0,noise)", "\n", "neg_img", ".", "grad", ".", "detach_", "(", ")", "\n", "neg_img", ".", "grad", ".", "zero_", "(", ")", "\n", "", "if", "not", "train", ":", "\n", "        ", "neg_img", "=", "neg_img", ".", "to", "(", "'cpu'", ")", "\n", "# print(samples.data)", "\n", "# print(neg_img.data)", "\n", "\n", "", "return", "neg_img", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.synthetic_exp.gan_mnist.Generator.__init__": [[43, 65], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.resblocks.OptimizedBlock.__init__", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "preprocess", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "128", ",", "4", "*", "4", "*", "4", "*", "DIM", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "block1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "4", "*", "DIM", ",", "2", "*", "DIM", ",", "5", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "block2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "2", "*", "DIM", ",", "DIM", ",", "5", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "deconv_out", "=", "nn", ".", "ConvTranspose2d", "(", "DIM", ",", "1", ",", "8", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "block1", "=", "block1", "\n", "self", ".", "block2", "=", "block2", "\n", "self", ".", "deconv_out", "=", "deconv_out", "\n", "self", ".", "preprocess", "=", "preprocess", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.synthetic_exp.gan_mnist.Generator.forward": [[66, 80], ["gan_mnist.Generator.preprocess", "gan_mnist.Generator.view", "gan_mnist.Generator.block1", "gan_mnist.Generator.block2", "gan_mnist.Generator.deconv_out", "gan_mnist.Generator.sigmoid", "gan_mnist.Generator.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "output", "=", "self", ".", "preprocess", "(", "input", ")", "\n", "output", "=", "output", ".", "view", "(", "-", "1", ",", "4", "*", "DIM", ",", "4", ",", "4", ")", "\n", "#print output.size()", "\n", "output", "=", "self", ".", "block1", "(", "output", ")", "\n", "#print output.size()", "\n", "output", "=", "output", "[", ":", ",", ":", ",", ":", "7", ",", ":", "7", "]", "\n", "#print output.size()", "\n", "output", "=", "self", ".", "block2", "(", "output", ")", "\n", "#print output.size()", "\n", "output", "=", "self", ".", "deconv_out", "(", "output", ")", "\n", "output", "=", "self", ".", "sigmoid", "(", "output", ")", "\n", "#print output.size()", "\n", "return", "output", ".", "view", "(", "-", "1", ",", "OUTPUT_DIM", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.synthetic_exp.gan_mnist.Discriminator.__init__": [[82, 102], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "mcmc_sampler.spectral_norm", "mcmc_sampler.spectral_norm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "mcmc_sampler.spectral_norm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "mcmc_sampler.spectral_norm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.resblocks.OptimizedBlock.__init__", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.synthetic_exp.mcmc_sampler.spectral_norm", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.synthetic_exp.mcmc_sampler.spectral_norm", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.synthetic_exp.mcmc_sampler.spectral_norm", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.synthetic_exp.mcmc_sampler.spectral_norm", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "main", "=", "nn", ".", "Sequential", "(", "\n", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "1", ",", "DIM", ",", "5", ",", "stride", "=", "2", ",", "padding", "=", "2", ")", ")", ",", "\n", "# nn.Linear(OUTPUT_DIM, 4*4*4*DIM),", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "DIM", ",", "2", "*", "DIM", ",", "5", ",", "stride", "=", "2", ",", "padding", "=", "2", ")", ")", ",", "\n", "# nn.Linear(4*4*4*DIM, 4*4*4*DIM),", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "2", "*", "DIM", ",", "4", "*", "DIM", ",", "5", ",", "stride", "=", "2", ",", "padding", "=", "2", ")", ")", ",", "\n", "# nn.Linear(4*4*4*DIM, 4*4*4*DIM),", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "# nn.Linear(4*4*4*DIM, 4*4*4*DIM),", "\n", "# nn.LeakyReLU(True),", "\n", "# nn.Linear(4*4*4*DIM, 4*4*4*DIM),", "\n", "# nn.LeakyReLU(True),", "\n", ")", "\n", "self", ".", "main", "=", "main", "\n", "self", ".", "output", "=", "spectral_norm", "(", "nn", ".", "Linear", "(", "4", "*", "4", "*", "4", "*", "DIM", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.synthetic_exp.gan_mnist.Discriminator.forward": [[103, 109], ["input.view.view.view", "gan_mnist.Discriminator.main", "gan_mnist.Discriminator.view", "gan_mnist.Discriminator.output", "gan_mnist.Discriminator.view"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.evaluations.calc_ref_stats.main"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "input", "=", "input", ".", "view", "(", "-", "1", ",", "1", ",", "28", ",", "28", ")", "\n", "out", "=", "self", ".", "main", "(", "input", ")", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "4", "*", "4", "*", "4", "*", "DIM", ")", "\n", "out", "=", "self", ".", "output", "(", "out", ")", "\n", "return", "out", ".", "view", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.synthetic_exp.gan_mnist.generate_image": [[110, 124], ["torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.Variable().requires_grad_", "netG", "samples.cpu().data.numpy.view", "samples.cpu().data.numpy.cpu().data.numpy", "tflib.save_images.save_images", "noise.cuda.cuda", "torch.Variable", "samples.cpu().data.numpy.cpu"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.tflib.save_images.save_images"], ["", "", "def", "generate_image", "(", "frame", ",", "netG", ")", ":", "\n", "    ", "noise", "=", "torch", ".", "randn", "(", "BATCH_SIZE", ",", "128", ")", "\n", "if", "use_cuda", ":", "\n", "        ", "noise", "=", "noise", ".", "cuda", "(", "gpu", ")", "\n", "", "noisev", "=", "autograd", ".", "Variable", "(", "noise", ")", ".", "requires_grad_", "(", "False", ")", "\n", "samples", "=", "netG", "(", "noisev", ")", "\n", "samples", "=", "samples", ".", "view", "(", "BATCH_SIZE", ",", "28", ",", "28", ")", "\n", "# print samples.size()", "\n", "\n", "samples", "=", "samples", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "lib", ".", "save_images", ".", "save_images", "(", "\n", "samples", ",", "\n", "'tmp/mnist1/samples_{}.png'", ".", "format", "(", "frame", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.synthetic_exp.gan_mnist.inf_train_gen": [[128, 132], ["train_gen"], "function", ["None"], ["def", "inf_train_gen", "(", ")", ":", "\n", "    ", "while", "True", ":", "\n", "        ", "for", "images", ",", "targets", "in", "train_gen", "(", ")", ":", "\n", "            ", "yield", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.synthetic_exp.gan_mnist.calc_gradient_penalty": [[133, 154], ["torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "alpha.expand.expand", "torch.Variable", "netD", "real_data.size", "alpha.expand.cuda", "interpolates.cuda.cuda", "torch.grad", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "netD.size", "gradients.norm", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "netD.size"], "function", ["None"], ["", "", "", "def", "calc_gradient_penalty", "(", "netD", ",", "real_data", ",", "fake_data", ")", ":", "\n", "#print real_data.size()", "\n", "    ", "alpha", "=", "torch", ".", "rand", "(", "BATCH_SIZE", ",", "1", ")", "\n", "alpha", "=", "alpha", ".", "expand", "(", "real_data", ".", "size", "(", ")", ")", "\n", "alpha", "=", "alpha", ".", "cuda", "(", "gpu", ")", "if", "use_cuda", "else", "alpha", "\n", "\n", "interpolates", "=", "alpha", "*", "real_data", "+", "(", "(", "1", "-", "alpha", ")", "*", "fake_data", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "        ", "interpolates", "=", "interpolates", ".", "cuda", "(", "gpu", ")", "\n", "", "interpolates", "=", "autograd", ".", "Variable", "(", "interpolates", ",", "requires_grad", "=", "True", ")", "\n", "\n", "disc_interpolates", "=", "netD", "(", "interpolates", ")", "\n", "\n", "gradients", "=", "autograd", ".", "grad", "(", "outputs", "=", "disc_interpolates", ",", "inputs", "=", "interpolates", ",", "\n", "grad_outputs", "=", "torch", ".", "ones", "(", "disc_interpolates", ".", "size", "(", ")", ")", ".", "cuda", "(", "gpu", ")", "if", "use_cuda", "else", "torch", ".", "ones", "(", "\n", "disc_interpolates", ".", "size", "(", ")", ")", ",", "\n", "create_graph", "=", "True", ",", "retain_graph", "=", "True", ",", "only_inputs", "=", "True", ")", "[", "0", "]", "\n", "\n", "gradient_penalty", "=", "(", "(", "gradients", ".", "norm", "(", "2", ",", "dim", "=", "1", ")", "-", "1", ")", "**", "2", ")", ".", "mean", "(", ")", "*", "LAMBDA", "\n", "return", "gradient_penalty", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.tflib.inception_score.get_inception_score": [[25, 54], ["type", "type", "len", "numpy.max", "numpy.min", "img.astype.astype", "inps.append", "tensorflow.Session", "int", "range", "numpy.concatenate", "range", "numpy.expand_dims", "math.ceil", "numpy.concatenate", "sess.run", "np.concatenate.append", "numpy.mean", "scores.append", "numpy.mean", "numpy.std", "numpy.sum", "numpy.exp", "float", "float", "min", "numpy.log", "numpy.log", "len", "len", "numpy.expand_dims", "numpy.mean"], "function", ["None"], ["batch_end", "=", "min", "(", "(", "i", "+", "1", ")", "*", "batch_size", ",", "n", ")", "\n", "\n", "ims_batch", "=", "ims", "[", "batch_start", ":", "batch_end", "]", "\n", "ims_batch", "=", "xp", ".", "asarray", "(", "ims_batch", ")", "# To GPU if using CuPy", "\n", "ims_batch", "=", "Variable", "(", "ims_batch", ")", "\n", "\n", "# Resize image to the shape expected by the inception module", "\n", "if", "(", "w", ",", "h", ")", "!=", "(", "299", ",", "299", ")", ":", "\n", "            ", "ims_batch", "=", "F", ".", "resize_images", "(", "ims_batch", ",", "(", "299", ",", "299", ")", ")", "# bilinear", "\n", "\n", "# Feed images to the inception module to get the softmax predictions", "\n", "", "with", "chainer", ".", "using_config", "(", "'train'", ",", "False", ")", ",", "chainer", ".", "using_config", "(", "'enable_backprop'", ",", "False", ")", ":", "\n", "            ", "y", "=", "model", "(", "ims_batch", ")", "\n", "", "ys", "[", "batch_start", ":", "batch_end", "]", "=", "y", ".", "data", "\n", "", "ys", "=", "ys", "[", ":", ",", "1", ":", "1001", "]", "# 0 and 1001-1008 are the dummies", "\n", "return", "ys", "\n", "\n", "\n", "", "def", "inception_score", "(", "model", ",", "ims", ",", "batch_size", "=", "100", ",", "splits", "=", "10", ")", ":", "\n", "    ", "\"\"\"Compute the inception score for given images.\n\n    Default batch_size is 100 and split size is 10. Please refer to the\n    official implementation. It is recommended to to use at least 50000\n    images to obtain a reliable score.\n\n    Reference:\n    https://github.com/openai/improved-gan/blob/master/inception_score/model.py\n\n    \"\"\"", "\n", "n", ",", "c", ",", "w", ",", "h", "=", "ims", ".", "shape", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.tflib.inception_score._init_inception": [[56, 95], ["os.path.join", "tarfile.open().extractall", "os.path.exists", "os.makedirs", "DATA_URL.split", "os.path.exists", "six.moves.urllib.request.urlretrieve", "print", "os.stat", "print", "tensorflow.gfile.FastGFile", "tensorflow.GraphDef", "tf.GraphDef.ParseFromString", "tensorflow.import_graph_def", "tensorflow.Session", "sess.graph.get_tensor_by_name", "sess.graph.get_tensor_by_name.graph.get_operations", "enumerate", "tensorflow.matmul", "tensorflow.nn.softmax", "sys.stdout.write", "sys.stdout.write", "sys.stdout.flush", "sys.stdout.flush", "tarfile.open", "os.path.join", "f.read", "tensorflow.squeeze", "o.get_shape", "enumerate", "tensorflow.TensorShape", "sess.graph.get_operation_by_name", "new_shape.append", "new_shape.append", "float", "float"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.tflib.plot.flush", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.tflib.plot.flush"], ["xp", "=", "model", ".", "xp", "\n", "\n", "print", "(", "'batch_size:{}, n_ims{}, n_batches{}'", ".", "format", "(", "batch_size", ",", "n", ",", "n_batches", ")", ")", "\n", "print", "(", "'Calculating inception scores...'", ")", "\n", "ys", "=", "inception_forward", "(", "model", ",", "ims", ",", "batch_size", ")", "\n", "# Compute the inception score based on the softmax predictions of the", "\n", "# inception module.", "\n", "scores", "=", "xp", ".", "empty", "(", "(", "splits", ")", ",", "dtype", "=", "xp", ".", "float32", ")", "# Split inception scores", "\n", "for", "i", "in", "range", "(", "splits", ")", ":", "\n", "        ", "part", "=", "ys", "[", "(", "i", "*", "n", "//", "splits", ")", ":", "(", "(", "i", "+", "1", ")", "*", "n", "//", "splits", ")", ",", ":", "]", "\n", "kl", "=", "part", "*", "(", "xp", ".", "log", "(", "part", ")", "-", "\n", "xp", ".", "log", "(", "xp", ".", "expand_dims", "(", "xp", ".", "mean", "(", "part", ",", "0", ")", ",", "0", ")", ")", ")", "\n", "kl", "=", "xp", ".", "mean", "(", "xp", ".", "sum", "(", "kl", ",", "1", ")", ")", "\n", "scores", "[", "i", "]", "=", "xp", ".", "exp", "(", "kl", ")", "\n", "\n", "", "return", "xp", ".", "mean", "(", "scores", ")", ",", "xp", ".", "std", "(", "scores", ")", "\n", "\n", "\n", "", "def", "inception_accuracy", "(", "model", ",", "ims", ",", "labels", ",", "batch_size", "=", "100", ",", "splits", "=", "10", ")", ":", "\n", "    ", "\"\"\"Compute the inception score for given images.\n\n     Default batch_size is 100 and split size is 10. Please refer to the\n     official implementation. It is recommended to to use at least 50000\n     images to obtain a reliable score.\n\n     Reference:\n     https://github.com/openai/improved-gan/blob/master/inception_score/model.py\n\n     \"\"\"", "\n", "if", "isinstance", "(", "ims", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "ims_list", "=", "ims", "\n", "ys_list", "=", "[", "]", "\n", "for", "ims", "in", "ims_list", ":", "\n", "            ", "n", ",", "c", ",", "w", ",", "h", "=", "ims", ".", "shape", "\n", "n_batches", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "n", ")", "/", "float", "(", "batch_size", ")", ")", ")", "\n", "xp", "=", "model", ".", "xp", "\n", "\n", "print", "(", "'batch_size:{}, n_ims{}, n_batches{}'", ".", "format", "(", "batch_size", ",", "n", ",", "n_batches", ")", ")", "\n", "print", "(", "'Calculating inception accuracy...'", ")", "\n", "ys", "=", "inception_forward", "(", "model", ",", "ims", ",", "batch_size", ")", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.tflib.mnist.mnist_generator": [[8, 48], ["numpy.random.get_state", "numpy.random.shuffle", "numpy.random.set_state", "numpy.random.shuffle", "print", "numpy.zeros", "numpy.random.get_state", "numpy.random.shuffle", "numpy.random.set_state", "numpy.random.shuffle", "images.reshape", "targets.reshape", "images.astype", "targets.astype", "len", "numpy.random.set_state", "numpy.random.shuffle", "numpy.zeros.reshape", "range", "range", "len", "len", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.copy"], "function", ["None"], ["def", "mnist_generator", "(", "data", ",", "batch_size", ",", "n_labelled", ",", "limit", "=", "None", ")", ":", "\n", "    ", "images", ",", "targets", "=", "data", "\n", "\n", "rng_state", "=", "numpy", ".", "random", ".", "get_state", "(", ")", "\n", "numpy", ".", "random", ".", "shuffle", "(", "images", ")", "\n", "numpy", ".", "random", ".", "set_state", "(", "rng_state", ")", "\n", "numpy", ".", "random", ".", "shuffle", "(", "targets", ")", "\n", "if", "limit", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"WARNING ONLY FIRST {} MNIST DIGITS\"", ".", "format", "(", "limit", ")", ")", "\n", "images", "=", "images", ".", "astype", "(", "'float32'", ")", "[", ":", "limit", "]", "\n", "targets", "=", "targets", ".", "astype", "(", "'int32'", ")", "[", ":", "limit", "]", "\n", "", "if", "n_labelled", "is", "not", "None", ":", "\n", "        ", "labelled", "=", "numpy", ".", "zeros", "(", "len", "(", "images", ")", ",", "dtype", "=", "'int32'", ")", "\n", "labelled", "[", ":", "n_labelled", "]", "=", "1", "\n", "\n", "", "def", "get_epoch", "(", ")", ":", "\n", "        ", "rng_state", "=", "numpy", ".", "random", ".", "get_state", "(", ")", "\n", "numpy", ".", "random", ".", "shuffle", "(", "images", ")", "\n", "numpy", ".", "random", ".", "set_state", "(", "rng_state", ")", "\n", "numpy", ".", "random", ".", "shuffle", "(", "targets", ")", "\n", "\n", "if", "n_labelled", "is", "not", "None", ":", "\n", "            ", "numpy", ".", "random", ".", "set_state", "(", "rng_state", ")", "\n", "numpy", ".", "random", ".", "shuffle", "(", "labelled", ")", "\n", "\n", "", "image_batches", "=", "images", ".", "reshape", "(", "-", "1", ",", "batch_size", ",", "784", ")", "\n", "target_batches", "=", "targets", ".", "reshape", "(", "-", "1", ",", "batch_size", ")", "\n", "\n", "if", "n_labelled", "is", "not", "None", ":", "\n", "            ", "labelled_batches", "=", "labelled", ".", "reshape", "(", "-", "1", ",", "batch_size", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "image_batches", ")", ")", ":", "\n", "                ", "yield", "(", "numpy", ".", "copy", "(", "image_batches", "[", "i", "]", ")", ",", "numpy", ".", "copy", "(", "target_batches", "[", "i", "]", ")", ",", "numpy", ".", "copy", "(", "labelled", ")", ")", "\n", "\n", "", "", "else", ":", "\n", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "image_batches", ")", ")", ":", "\n", "                ", "yield", "(", "numpy", ".", "copy", "(", "image_batches", "[", "i", "]", ")", ",", "numpy", ".", "copy", "(", "target_batches", "[", "i", "]", ")", ")", "\n", "\n", "", "", "", "return", "get_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.tflib.mnist.load": [[49, 64], ["os.path.isfile", "print", "urllib.request.urlretrieve", "gzip.open", "six.moves.cPickle.load", "mnist.mnist_generator", "mnist.mnist_generator", "mnist.mnist_generator"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.tflib.cifar10.load", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.tflib.mnist.mnist_generator", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.tflib.mnist.mnist_generator", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.tflib.mnist.mnist_generator"], ["", "def", "load", "(", "batch_size", ",", "test_batch_size", ",", "n_labelled", "=", "None", ")", ":", "\n", "    ", "filepath", "=", "'/tmp/mnist.pkl.gz'", "\n", "url", "=", "'http://www.iro.umontreal.ca/~lisa/deep/data/mnist/mnist.pkl.gz'", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "filepath", ")", ":", "\n", "        ", "print", "(", "\"Couldn't find MNIST dataset in /tmp, downloading...\"", ")", "\n", "urllib", ".", "request", ".", "urlretrieve", "(", "url", ",", "filepath", ")", "\n", "\n", "", "with", "gzip", ".", "open", "(", "'/tmp/mnist.pkl.gz'", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "train_data", ",", "dev_data", ",", "test_data", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin'", ")", "\n", "\n", "", "return", "(", "\n", "mnist_generator", "(", "train_data", ",", "batch_size", ",", "n_labelled", ")", ",", "\n", "mnist_generator", "(", "dev_data", ",", "test_batch_size", ",", "n_labelled", ")", ",", "\n", "mnist_generator", "(", "test_data", ",", "test_batch_size", ",", "n_labelled", ")", "\n", ")", ""]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.tflib.plot.tick": [[15, 17], ["None"], "function", ["None"], ["def", "tick", "(", ")", ":", "\n", "\t", "_iter", "[", "0", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.tflib.plot.plot": [[18, 20], ["None"], "function", ["None"], ["", "def", "plot", "(", "name", ",", "value", ")", ":", "\n", "\t", "_since_last_flush", "[", "name", "]", "[", "_iter", "[", "0", "]", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.tflib.plot.flush": [[21, 43], ["_since_last_flush.items", "print", "_since_last_flush.clear", "prints.append", "_since_beginning[].update", "numpy.sort", "matplotlib.clf", "matplotlib.plot", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.savefig", "open", "pickle.dump", "numpy.array", "dict", "numpy.mean", "list", "name.replace", "numpy.array", "_since_beginning[].keys", "list", "vals.values"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.tflib.plot.plot"], ["", "def", "flush", "(", ")", ":", "\n", "\t", "prints", "=", "[", "]", "\n", "\n", "for", "name", ",", "vals", "in", "_since_last_flush", ".", "items", "(", ")", ":", "\n", "\n", "\t\t", "prints", ".", "append", "(", "\"{}\\t{}\"", ".", "format", "(", "name", ",", "np", ".", "mean", "(", "np", ".", "array", "(", "list", "(", "vals", ".", "values", "(", ")", ")", ")", ")", ")", ")", "\n", "_since_beginning", "[", "name", "]", ".", "update", "(", "vals", ")", "\n", "\n", "x_vals", "=", "np", ".", "sort", "(", "np", ".", "array", "(", "list", "(", "_since_beginning", "[", "name", "]", ".", "keys", "(", ")", ")", ")", ")", "\n", "y_vals", "=", "[", "_since_beginning", "[", "name", "]", "[", "x", "]", "for", "x", "in", "x_vals", "]", "\n", "\n", "plt", ".", "clf", "(", ")", "\n", "plt", ".", "plot", "(", "x_vals", ",", "y_vals", ")", "\n", "plt", ".", "xlabel", "(", "'iteration'", ")", "\n", "plt", ".", "ylabel", "(", "name", ")", "\n", "plt", ".", "savefig", "(", "name", ".", "replace", "(", "' '", ",", "'_'", ")", "+", "'.jpg'", ")", "\n", "\n", "", "print", "(", "\"iter {}\\t{}\"", ".", "format", "(", "_iter", "[", "0", "]", ",", "\"\\t\"", ".", "join", "(", "prints", ")", ")", ")", "\n", "_since_last_flush", ".", "clear", "(", ")", "\n", "\n", "with", "open", "(", "'log.pkl'", ",", "'wb'", ")", "as", "f", ":", "\n", "\t\t", "pickle", ".", "dump", "(", "dict", "(", "_since_beginning", ")", ",", "f", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.tflib.cifar10.unpickle": [[8, 13], ["open", "cPickle.load", "open.close"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.tflib.cifar10.load"], ["        ", "d_train", ",", "d_test", "=", "chainer", ".", "datasets", ".", "get_cifar10", "(", "ndim", "=", "3", ",", "withlabel", "=", "True", ",", "scale", "=", "255", ")", "\n", "if", "test", ":", "\n", "            ", "self", ".", "dset", "=", "d_test", "\n", "", "else", ":", "\n", "            ", "self", ".", "dset", "=", "d_train", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.tflib.cifar10.cifar_generator": [[14, 28], ["numpy.concatenate", "all_data.append", "numpy.random.shuffle", "xrange", "cifar10.unpickle", "len", "numpy.copy"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.tflib.cifar10.unpickle"], ["", "print", "(", "\"load cifar-10.  shape: \"", ",", "len", "(", "self", ")", ")", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dset", ")", "\n", "\n", "", "def", "get_example", "(", "self", ",", "i", ")", ":", "\n", "        ", "image", "=", "np", ".", "asarray", "(", "self", ".", "dset", "[", "i", "]", "[", "0", "]", "/", "128.", "-", "1.", ",", "np", ".", "float32", ")", "\n", "image", "+=", "np", ".", "random", ".", "uniform", "(", "size", "=", "image", ".", "shape", ",", "low", "=", "0.", ",", "high", "=", "1.", "/", "128", ")", "\n", "return", "image", ",", "self", ".", "dset", "[", "i", "]", "[", "1", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.tflib.cifar10.load": [[30, 34], ["cifar10.cifar_generator", "cifar10.cifar_generator"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.tflib.cifar10.cifar_generator", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.tflib.cifar10.cifar_generator"], []], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.tflib.__init__.param": [[10, 35], ["tf.Variable"], "function", ["None"], []], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.tflib.__init__.params_with_name": [[36, 38], ["_params.items"], "function", ["None"], []], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.tflib.__init__.delete_all_params": [[39, 41], ["_params.clear"], "function", ["None"], []], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.tflib.__init__.alias_params": [[42, 46], ["replace_dict.items"], "function", ["None"], []], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.tflib.__init__.delete_param_aliases": [[47, 49], ["_param_aliases.clear"], "function", ["None"], []], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.tflib.__init__.print_model_settings": [[101, 107], ["print", "sorted", "print", "locals_.items", "k.isupper"], "function", ["None"], []], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.tflib.__init__.print_model_settings_dict": [[109, 115], ["print", "sorted", "print", "settings.items"], "function", ["None"], []], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.tflib.save_images.save_images": [[9, 40], ["isinstance", "int", "enumerate", "scipy.misc.imsave", "numpy.sqrt", "int", "numpy.reshape", "X.transpose.transpose", "numpy.zeros", "int", "X.transpose.flatten", "numpy.zeros", "int", "int", "int", "int", "numpy.sqrt", "numpy.sqrt", "int", "int"], "function", ["None"], ["def", "save_images", "(", "X", ",", "save_path", ")", ":", "\n", "# [0, 1] -> [0,255]", "\n", "    ", "if", "isinstance", "(", "X", ".", "flatten", "(", ")", "[", "0", "]", ",", "np", ".", "floating", ")", ":", "\n", "        ", "X", "=", "(", "255.99", "*", "X", ")", ".", "astype", "(", "'uint8'", ")", "\n", "\n", "", "n_samples", "=", "X", ".", "shape", "[", "0", "]", "\n", "rows", "=", "int", "(", "np", ".", "sqrt", "(", "n_samples", ")", ")", "\n", "while", "n_samples", "%", "rows", "!=", "0", ":", "\n", "        ", "rows", "-=", "1", "\n", "\n", "", "nh", ",", "nw", "=", "rows", ",", "int", "(", "n_samples", "/", "rows", ")", "\n", "\n", "if", "X", ".", "ndim", "==", "2", ":", "\n", "        ", "X", "=", "np", ".", "reshape", "(", "X", ",", "(", "X", ".", "shape", "[", "0", "]", ",", "int", "(", "np", ".", "sqrt", "(", "X", ".", "shape", "[", "1", "]", ")", ")", ",", "int", "(", "np", ".", "sqrt", "(", "X", ".", "shape", "[", "1", "]", ")", ")", ")", ")", "\n", "\n", "", "if", "X", ".", "ndim", "==", "4", ":", "\n", "# BCHW -> BHWC", "\n", "        ", "X", "=", "X", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "h", ",", "w", "=", "X", "[", "0", "]", ".", "shape", "[", ":", "2", "]", "\n", "img", "=", "np", ".", "zeros", "(", "(", "int", "(", "h", "*", "nh", ")", ",", "int", "(", "w", "*", "nw", ")", ",", "3", ")", ")", "\n", "", "elif", "X", ".", "ndim", "==", "3", ":", "\n", "        ", "h", ",", "w", "=", "X", "[", "0", "]", ".", "shape", "[", ":", "2", "]", "\n", "img", "=", "np", ".", "zeros", "(", "(", "int", "(", "h", "*", "nh", ")", ",", "int", "(", "w", "*", "nw", ")", ")", ")", "\n", "\n", "", "for", "n", ",", "x", "in", "enumerate", "(", "X", ")", ":", "\n", "        ", "j", "=", "int", "(", "n", "/", "nw", ")", "\n", "i", "=", "n", "%", "nw", "\n", "\n", "img", "[", "j", "*", "h", ":", "j", "*", "h", "+", "h", ",", "i", "*", "w", ":", "i", "*", "w", "+", "w", "]", "=", "x", "\n", "\n", "", "imsave", "(", "save_path", ",", "img", ")", "", "", ""]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.conv1d.enable_default_weightnorm": [[7, 10], ["None"], "function", ["None"], ["def", "enable_default_weightnorm", "(", ")", ":", "\n", "    ", "global", "_default_weightnorm", "\n", "_default_weightnorm", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.conv1d.Conv1D": [[11, 109], ["tensorflow.name_scope", "conv1d.Conv1D.uniform"], "function", ["None"], ["", "def", "Conv1D", "(", "name", ",", "input_dim", ",", "output_dim", ",", "filter_size", ",", "inputs", ",", "he_init", "=", "True", ",", "mask_type", "=", "None", ",", "stride", "=", "1", ",", "weightnorm", "=", "None", ",", "biases", "=", "True", ",", "gain", "=", "1.", ")", ":", "\n", "    ", "\"\"\"\n    inputs: tensor of shape (batch size, num channels, width)\n    mask_type: one of None, 'a', 'b'\n\n    returns: tensor of shape (batch size, num channels, width)\n    \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "name", ")", "as", "scope", ":", "\n", "\n", "        ", "if", "mask_type", "is", "not", "None", ":", "\n", "            ", "mask_type", ",", "mask_n_channels", "=", "mask_type", "\n", "\n", "mask", "=", "np", ".", "ones", "(", "\n", "(", "filter_size", ",", "input_dim", ",", "output_dim", ")", ",", "\n", "dtype", "=", "'float32'", "\n", ")", "\n", "center", "=", "filter_size", "//", "2", "\n", "\n", "# Mask out future locations", "\n", "# filter shape is (width, input channels, output channels)", "\n", "mask", "[", "center", "+", "1", ":", ",", ":", ",", ":", "]", "=", "0.", "\n", "\n", "# Mask out future channels", "\n", "for", "i", "in", "xrange", "(", "mask_n_channels", ")", ":", "\n", "                ", "for", "j", "in", "xrange", "(", "mask_n_channels", ")", ":", "\n", "                    ", "if", "(", "mask_type", "==", "'a'", "and", "i", ">=", "j", ")", "or", "(", "mask_type", "==", "'b'", "and", "i", ">", "j", ")", ":", "\n", "                        ", "mask", "[", "\n", "center", ",", "\n", "i", ":", ":", "mask_n_channels", ",", "\n", "j", ":", ":", "mask_n_channels", "\n", "]", "=", "0.", "\n", "\n", "\n", "", "", "", "", "def", "uniform", "(", "stdev", ",", "size", ")", ":", "\n", "            ", "return", "np", ".", "random", ".", "uniform", "(", "\n", "low", "=", "-", "stdev", "*", "np", ".", "sqrt", "(", "3", ")", ",", "\n", "high", "=", "stdev", "*", "np", ".", "sqrt", "(", "3", ")", ",", "\n", "size", "=", "size", "\n", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n", "", "fan_in", "=", "input_dim", "*", "filter_size", "\n", "fan_out", "=", "output_dim", "*", "filter_size", "/", "stride", "\n", "\n", "if", "mask_type", "is", "not", "None", ":", "# only approximately correct", "\n", "            ", "fan_in", "/=", "2.", "\n", "fan_out", "/=", "2.", "\n", "\n", "", "if", "he_init", ":", "\n", "            ", "filters_stdev", "=", "np", ".", "sqrt", "(", "4.", "/", "(", "fan_in", "+", "fan_out", ")", ")", "\n", "", "else", ":", "# Normalized init (Glorot & Bengio)", "\n", "            ", "filters_stdev", "=", "np", ".", "sqrt", "(", "2.", "/", "(", "fan_in", "+", "fan_out", ")", ")", "\n", "\n", "", "filter_values", "=", "uniform", "(", "\n", "filters_stdev", ",", "\n", "(", "filter_size", ",", "input_dim", ",", "output_dim", ")", "\n", ")", "\n", "# print \"WARNING IGNORING GAIN\"", "\n", "filter_values", "*=", "gain", "\n", "\n", "filters", "=", "lib", ".", "param", "(", "name", "+", "'.Filters'", ",", "filter_values", ")", "\n", "\n", "if", "weightnorm", "==", "None", ":", "\n", "            ", "weightnorm", "=", "_default_weightnorm", "\n", "", "if", "weightnorm", ":", "\n", "            ", "norm_values", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "np", ".", "square", "(", "filter_values", ")", ",", "axis", "=", "(", "0", ",", "1", ")", ")", ")", "\n", "target_norms", "=", "lib", ".", "param", "(", "\n", "name", "+", "'.g'", ",", "\n", "norm_values", "\n", ")", "\n", "with", "tf", ".", "name_scope", "(", "'weightnorm'", ")", "as", "scope", ":", "\n", "                ", "norms", "=", "tf", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "filters", ")", ",", "reduction_indices", "=", "[", "0", ",", "1", "]", ")", ")", "\n", "filters", "=", "filters", "*", "(", "target_norms", "/", "norms", ")", "\n", "\n", "", "", "if", "mask_type", "is", "not", "None", ":", "\n", "            ", "with", "tf", ".", "name_scope", "(", "'filter_mask'", ")", ":", "\n", "                ", "filters", "=", "filters", "*", "mask", "\n", "\n", "", "", "result", "=", "tf", ".", "nn", ".", "conv1d", "(", "\n", "value", "=", "inputs", ",", "\n", "filters", "=", "filters", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "'SAME'", ",", "\n", "data_format", "=", "'NCHW'", "\n", ")", "\n", "\n", "if", "biases", ":", "\n", "            ", "_biases", "=", "lib", ".", "param", "(", "\n", "name", "+", "'.Biases'", ",", "\n", "np", ".", "zeros", "(", "[", "output_dim", "]", ",", "dtype", "=", "'float32'", ")", "\n", ")", "\n", "\n", "# result = result + _biases", "\n", "\n", "result", "=", "tf", ".", "expand_dims", "(", "result", ",", "3", ")", "\n", "result", "=", "tf", ".", "nn", ".", "bias_add", "(", "result", ",", "_biases", ",", "data_format", "=", "'NCHW'", ")", "\n", "result", "=", "tf", ".", "squeeze", "(", "result", ")", "\n", "\n", "", "return", "result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.layernorm.Layernorm": [[6, 22], ["tensorflow.nn.moments", "tflib.param", "tflib.param", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.batch_normalization", "inputs.get_shape().as_list", "numpy.zeros", "numpy.ones", "inputs.get_shape", "xrange", "xrange", "len", "len"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.tflib.__init__.param", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.tflib.__init__.param"], ["def", "Layernorm", "(", "name", ",", "norm_axes", ",", "inputs", ")", ":", "\n", "    ", "mean", ",", "var", "=", "tf", ".", "nn", ".", "moments", "(", "inputs", ",", "norm_axes", ",", "keep_dims", "=", "True", ")", "\n", "\n", "# Assume the 'neurons' axis is the first of norm_axes. This is the case for fully-connected and BCHW conv layers.", "\n", "n_neurons", "=", "inputs", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "norm_axes", "[", "0", "]", "]", "\n", "\n", "offset", "=", "lib", ".", "param", "(", "name", "+", "'.offset'", ",", "np", ".", "zeros", "(", "n_neurons", ",", "dtype", "=", "'float32'", ")", ")", "\n", "scale", "=", "lib", ".", "param", "(", "name", "+", "'.scale'", ",", "np", ".", "ones", "(", "n_neurons", ",", "dtype", "=", "'float32'", ")", ")", "\n", "\n", "# Add broadcasting dims to offset and scale (e.g. BCHW conv data)", "\n", "offset", "=", "tf", ".", "reshape", "(", "offset", ",", "[", "-", "1", "]", "+", "[", "1", "for", "i", "in", "xrange", "(", "len", "(", "norm_axes", ")", "-", "1", ")", "]", ")", "\n", "scale", "=", "tf", ".", "reshape", "(", "scale", ",", "[", "-", "1", "]", "+", "[", "1", "for", "i", "in", "xrange", "(", "len", "(", "norm_axes", ")", "-", "1", ")", "]", ")", "\n", "\n", "result", "=", "tf", ".", "nn", ".", "batch_normalization", "(", "inputs", ",", "mean", ",", "var", ",", "offset", ",", "scale", ",", "1e-5", ")", "\n", "\n", "return", "result", "", "", ""]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.conv2d.enable_default_weightnorm": [[7, 10], ["None"], "function", ["None"], ["def", "enable_default_weightnorm", "(", ")", ":", "\n", "    ", "global", "_default_weightnorm", "\n", "_default_weightnorm", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.conv2d.set_weights_stdev": [[12, 15], ["None"], "function", ["None"], ["def", "set_weights_stdev", "(", "weights_stdev", ")", ":", "\n", "    ", "global", "_weights_stdev", "\n", "_weights_stdev", "=", "weights_stdev", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.conv2d.unset_weights_stdev": [[16, 19], ["None"], "function", ["None"], ["", "def", "unset_weights_stdev", "(", ")", ":", "\n", "    ", "global", "_weights_stdev", "\n", "_weights_stdev", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.conv2d.Conv2D": [[20, 124], ["tensorflow.name_scope", "tflib.param", "tensorflow.nn.conv2d", "numpy.ones", "xrange", "numpy.random.uniform().astype", "numpy.sqrt", "numpy.sqrt", "conv2d.Conv2D.uniform"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.tflib.__init__.param"], ["", "def", "Conv2D", "(", "name", ",", "input_dim", ",", "output_dim", ",", "filter_size", ",", "inputs", ",", "he_init", "=", "True", ",", "mask_type", "=", "None", ",", "stride", "=", "1", ",", "weightnorm", "=", "None", ",", "biases", "=", "True", ",", "gain", "=", "1.", ")", ":", "\n", "    ", "\"\"\"\n    inputs: tensor of shape (batch size, num channels, height, width)\n    mask_type: one of None, 'a', 'b'\n\n    returns: tensor of shape (batch size, num channels, height, width)\n    \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "name", ")", "as", "scope", ":", "\n", "\n", "        ", "if", "mask_type", "is", "not", "None", ":", "\n", "            ", "mask_type", ",", "mask_n_channels", "=", "mask_type", "\n", "\n", "mask", "=", "np", ".", "ones", "(", "\n", "(", "filter_size", ",", "filter_size", ",", "input_dim", ",", "output_dim", ")", ",", "\n", "dtype", "=", "'float32'", "\n", ")", "\n", "center", "=", "filter_size", "//", "2", "\n", "\n", "# Mask out future locations", "\n", "# filter shape is (height, width, input channels, output channels)", "\n", "mask", "[", "center", "+", "1", ":", ",", ":", ",", ":", ",", ":", "]", "=", "0.", "\n", "mask", "[", "center", ",", "center", "+", "1", ":", ",", ":", ",", ":", "]", "=", "0.", "\n", "\n", "# Mask out future channels", "\n", "for", "i", "in", "xrange", "(", "mask_n_channels", ")", ":", "\n", "                ", "for", "j", "in", "xrange", "(", "mask_n_channels", ")", ":", "\n", "                    ", "if", "(", "mask_type", "==", "'a'", "and", "i", ">=", "j", ")", "or", "(", "mask_type", "==", "'b'", "and", "i", ">", "j", ")", ":", "\n", "                        ", "mask", "[", "\n", "center", ",", "\n", "center", ",", "\n", "i", ":", ":", "mask_n_channels", ",", "\n", "j", ":", ":", "mask_n_channels", "\n", "]", "=", "0.", "\n", "\n", "\n", "", "", "", "", "def", "uniform", "(", "stdev", ",", "size", ")", ":", "\n", "            ", "return", "np", ".", "random", ".", "uniform", "(", "\n", "low", "=", "-", "stdev", "*", "np", ".", "sqrt", "(", "3", ")", ",", "\n", "high", "=", "stdev", "*", "np", ".", "sqrt", "(", "3", ")", ",", "\n", "size", "=", "size", "\n", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n", "", "fan_in", "=", "input_dim", "*", "filter_size", "**", "2", "\n", "fan_out", "=", "output_dim", "*", "filter_size", "**", "2", "/", "(", "stride", "**", "2", ")", "\n", "\n", "if", "mask_type", "is", "not", "None", ":", "# only approximately correct", "\n", "            ", "fan_in", "/=", "2.", "\n", "fan_out", "/=", "2.", "\n", "\n", "", "if", "he_init", ":", "\n", "            ", "filters_stdev", "=", "np", ".", "sqrt", "(", "4.", "/", "(", "fan_in", "+", "fan_out", ")", ")", "\n", "", "else", ":", "# Normalized init (Glorot & Bengio)", "\n", "            ", "filters_stdev", "=", "np", ".", "sqrt", "(", "2.", "/", "(", "fan_in", "+", "fan_out", ")", ")", "\n", "\n", "", "if", "_weights_stdev", "is", "not", "None", ":", "\n", "            ", "filter_values", "=", "uniform", "(", "\n", "_weights_stdev", ",", "\n", "(", "filter_size", ",", "filter_size", ",", "input_dim", ",", "output_dim", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "filter_values", "=", "uniform", "(", "\n", "filters_stdev", ",", "\n", "(", "filter_size", ",", "filter_size", ",", "input_dim", ",", "output_dim", ")", "\n", ")", "\n", "\n", "# print \"WARNING IGNORING GAIN\"", "\n", "", "filter_values", "*=", "gain", "\n", "\n", "filters", "=", "lib", ".", "param", "(", "name", "+", "'.Filters'", ",", "filter_values", ")", "\n", "\n", "if", "weightnorm", "==", "None", ":", "\n", "            ", "weightnorm", "=", "_default_weightnorm", "\n", "", "if", "weightnorm", ":", "\n", "            ", "norm_values", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "np", ".", "square", "(", "filter_values", ")", ",", "axis", "=", "(", "0", ",", "1", ",", "2", ")", ")", ")", "\n", "target_norms", "=", "lib", ".", "param", "(", "\n", "name", "+", "'.g'", ",", "\n", "norm_values", "\n", ")", "\n", "with", "tf", ".", "name_scope", "(", "'weightnorm'", ")", "as", "scope", ":", "\n", "                ", "norms", "=", "tf", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "filters", ")", ",", "reduction_indices", "=", "[", "0", ",", "1", ",", "2", "]", ")", ")", "\n", "filters", "=", "filters", "*", "(", "target_norms", "/", "norms", ")", "\n", "\n", "", "", "if", "mask_type", "is", "not", "None", ":", "\n", "            ", "with", "tf", ".", "name_scope", "(", "'filter_mask'", ")", ":", "\n", "                ", "filters", "=", "filters", "*", "mask", "\n", "\n", "", "", "result", "=", "tf", ".", "nn", ".", "conv2d", "(", "\n", "input", "=", "inputs", ",", "\n", "filter", "=", "filters", ",", "\n", "strides", "=", "[", "1", ",", "1", ",", "stride", ",", "stride", "]", ",", "\n", "padding", "=", "'SAME'", ",", "\n", "data_format", "=", "'NCHW'", "\n", ")", "\n", "\n", "if", "biases", ":", "\n", "            ", "_biases", "=", "lib", ".", "param", "(", "\n", "name", "+", "'.Biases'", ",", "\n", "np", ".", "zeros", "(", "output_dim", ",", "dtype", "=", "'float32'", ")", "\n", ")", "\n", "\n", "result", "=", "tf", ".", "nn", ".", "bias_add", "(", "result", ",", "_biases", ",", "data_format", "=", "'NCHW'", ")", "\n", "\n", "\n", "", "return", "result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.deconv2d.enable_default_weightnorm": [[7, 10], ["None"], "function", ["None"], ["def", "enable_default_weightnorm", "(", ")", ":", "\n", "    ", "global", "_default_weightnorm", "\n", "_default_weightnorm", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.deconv2d.set_weights_stdev": [[12, 15], ["None"], "function", ["None"], ["def", "set_weights_stdev", "(", "weights_stdev", ")", ":", "\n", "    ", "global", "_weights_stdev", "\n", "_weights_stdev", "=", "weights_stdev", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.deconv2d.unset_weights_stdev": [[16, 19], ["None"], "function", ["None"], ["", "def", "unset_weights_stdev", "(", ")", ":", "\n", "    ", "global", "_weights_stdev", "\n", "_weights_stdev", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.deconv2d.Deconv2D": [[20, 116], ["tensorflow.name_scope", "tflib.param", "tensorflow.transpose", "tensorflow.shape", "tensorflow.nn.conv2d_transpose", "tensorflow.transpose", "Exception", "numpy.random.uniform().astype", "numpy.sqrt", "numpy.sqrt", "deconv2d.Deconv2D.uniform"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.tflib.__init__.param"], ["", "def", "Deconv2D", "(", "\n", "name", ",", "\n", "input_dim", ",", "\n", "output_dim", ",", "\n", "filter_size", ",", "\n", "inputs", ",", "\n", "he_init", "=", "True", ",", "\n", "weightnorm", "=", "None", ",", "\n", "biases", "=", "True", ",", "\n", "gain", "=", "1.", ",", "\n", "mask_type", "=", "None", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n    inputs: tensor of shape (batch size, height, width, input_dim)\n    returns: tensor of shape (batch size, 2*height, 2*width, output_dim)\n    \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "name", ")", "as", "scope", ":", "\n", "\n", "        ", "if", "mask_type", "!=", "None", ":", "\n", "            ", "raise", "Exception", "(", "'Unsupported configuration'", ")", "\n", "\n", "", "def", "uniform", "(", "stdev", ",", "size", ")", ":", "\n", "            ", "return", "np", ".", "random", ".", "uniform", "(", "\n", "low", "=", "-", "stdev", "*", "np", ".", "sqrt", "(", "3", ")", ",", "\n", "high", "=", "stdev", "*", "np", ".", "sqrt", "(", "3", ")", ",", "\n", "size", "=", "size", "\n", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n", "", "stride", "=", "2", "\n", "fan_in", "=", "input_dim", "*", "filter_size", "**", "2", "/", "(", "stride", "**", "2", ")", "\n", "fan_out", "=", "output_dim", "*", "filter_size", "**", "2", "\n", "\n", "if", "he_init", ":", "\n", "            ", "filters_stdev", "=", "np", ".", "sqrt", "(", "4.", "/", "(", "fan_in", "+", "fan_out", ")", ")", "\n", "", "else", ":", "# Normalized init (Glorot & Bengio)", "\n", "            ", "filters_stdev", "=", "np", ".", "sqrt", "(", "2.", "/", "(", "fan_in", "+", "fan_out", ")", ")", "\n", "\n", "\n", "", "if", "_weights_stdev", "is", "not", "None", ":", "\n", "            ", "filter_values", "=", "uniform", "(", "\n", "_weights_stdev", ",", "\n", "(", "filter_size", ",", "filter_size", ",", "output_dim", ",", "input_dim", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "filter_values", "=", "uniform", "(", "\n", "filters_stdev", ",", "\n", "(", "filter_size", ",", "filter_size", ",", "output_dim", ",", "input_dim", ")", "\n", ")", "\n", "\n", "", "filter_values", "*=", "gain", "\n", "\n", "filters", "=", "lib", ".", "param", "(", "\n", "name", "+", "'.Filters'", ",", "\n", "filter_values", "\n", ")", "\n", "\n", "if", "weightnorm", "==", "None", ":", "\n", "            ", "weightnorm", "=", "_default_weightnorm", "\n", "", "if", "weightnorm", ":", "\n", "            ", "norm_values", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "np", ".", "square", "(", "filter_values", ")", ",", "axis", "=", "(", "0", ",", "1", ",", "3", ")", ")", ")", "\n", "target_norms", "=", "lib", ".", "param", "(", "\n", "name", "+", "'.g'", ",", "\n", "norm_values", "\n", ")", "\n", "with", "tf", ".", "name_scope", "(", "'weightnorm'", ")", "as", "scope", ":", "\n", "                ", "norms", "=", "tf", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "filters", ")", ",", "reduction_indices", "=", "[", "0", ",", "1", ",", "3", "]", ")", ")", "\n", "filters", "=", "filters", "*", "tf", ".", "expand_dims", "(", "target_norms", "/", "norms", ",", "1", ")", "\n", "\n", "\n", "", "", "inputs", "=", "tf", ".", "transpose", "(", "inputs", ",", "[", "0", ",", "2", ",", "3", ",", "1", "]", ",", "name", "=", "'NCHW_to_NHWC'", ")", "\n", "\n", "input_shape", "=", "tf", ".", "shape", "(", "inputs", ")", "\n", "try", ":", "# tf pre-1.0 (top) vs 1.0 (bottom)", "\n", "            ", "output_shape", "=", "tf", ".", "pack", "(", "[", "input_shape", "[", "0", "]", ",", "2", "*", "input_shape", "[", "1", "]", ",", "2", "*", "input_shape", "[", "2", "]", ",", "output_dim", "]", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "output_shape", "=", "tf", ".", "stack", "(", "[", "input_shape", "[", "0", "]", ",", "2", "*", "input_shape", "[", "1", "]", ",", "2", "*", "input_shape", "[", "2", "]", ",", "output_dim", "]", ")", "\n", "\n", "", "result", "=", "tf", ".", "nn", ".", "conv2d_transpose", "(", "\n", "value", "=", "inputs", ",", "\n", "filter", "=", "filters", ",", "\n", "output_shape", "=", "output_shape", ",", "\n", "strides", "=", "[", "1", ",", "2", ",", "2", ",", "1", "]", ",", "\n", "padding", "=", "'SAME'", "\n", ")", "\n", "\n", "if", "biases", ":", "\n", "            ", "_biases", "=", "lib", ".", "param", "(", "\n", "name", "+", "'.Biases'", ",", "\n", "np", ".", "zeros", "(", "output_dim", ",", "dtype", "=", "'float32'", ")", "\n", ")", "\n", "result", "=", "tf", ".", "nn", ".", "bias_add", "(", "result", ",", "_biases", ")", "\n", "\n", "", "result", "=", "tf", ".", "transpose", "(", "result", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ",", "name", "=", "'NHWC_to_NCHW'", ")", "\n", "\n", "\n", "return", "result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.enable_default_weightnorm": [[7, 10], ["None"], "function", ["None"], ["def", "enable_default_weightnorm", "(", ")", ":", "\n", "    ", "global", "_default_weightnorm", "\n", "_default_weightnorm", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.disable_default_weightnorm": [[11, 14], ["None"], "function", ["None"], ["", "def", "disable_default_weightnorm", "(", ")", ":", "\n", "    ", "global", "_default_weightnorm", "\n", "_default_weightnorm", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.set_weights_stdev": [[16, 19], ["None"], "function", ["None"], ["def", "set_weights_stdev", "(", "weights_stdev", ")", ":", "\n", "    ", "global", "_weights_stdev", "\n", "_weights_stdev", "=", "weights_stdev", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.unset_weights_stdev": [[20, 23], ["None"], "function", ["None"], ["", "def", "unset_weights_stdev", "(", ")", ":", "\n", "    ", "global", "_weights_stdev", "\n", "_weights_stdev", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.ops.linear.Linear": [[24, 149], ["tensorflow.name_scope", "tflib.param", "numpy.random.uniform().astype", "linear.Linear.uniform"], "function", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.tflib.__init__.param"], ["", "def", "Linear", "(", "\n", "name", ",", "\n", "input_dim", ",", "\n", "output_dim", ",", "\n", "inputs", ",", "\n", "biases", "=", "True", ",", "\n", "initialization", "=", "None", ",", "\n", "weightnorm", "=", "None", ",", "\n", "gain", "=", "1.", "\n", ")", ":", "\n", "    ", "\"\"\"\n    initialization: None, `lecun`, 'glorot', `he`, 'glorot_he', `orthogonal`, `(\"uniform\", range)`\n    \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "name", ")", "as", "scope", ":", "\n", "\n", "        ", "def", "uniform", "(", "stdev", ",", "size", ")", ":", "\n", "            ", "if", "_weights_stdev", "is", "not", "None", ":", "\n", "                ", "stdev", "=", "_weights_stdev", "\n", "", "return", "np", ".", "random", ".", "uniform", "(", "\n", "low", "=", "-", "stdev", "*", "np", ".", "sqrt", "(", "3", ")", ",", "\n", "high", "=", "stdev", "*", "np", ".", "sqrt", "(", "3", ")", ",", "\n", "size", "=", "size", "\n", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n", "", "if", "initialization", "==", "'lecun'", ":", "# and input_dim != output_dim):", "\n", "# disabling orth. init for now because it's too slow", "\n", "            ", "weight_values", "=", "uniform", "(", "\n", "np", ".", "sqrt", "(", "1.", "/", "input_dim", ")", ",", "\n", "(", "input_dim", ",", "output_dim", ")", "\n", ")", "\n", "\n", "", "elif", "initialization", "==", "'glorot'", "or", "(", "initialization", "==", "None", ")", ":", "\n", "\n", "            ", "weight_values", "=", "uniform", "(", "\n", "np", ".", "sqrt", "(", "2.", "/", "(", "input_dim", "+", "output_dim", ")", ")", ",", "\n", "(", "input_dim", ",", "output_dim", ")", "\n", ")", "\n", "\n", "", "elif", "initialization", "==", "'he'", ":", "\n", "\n", "            ", "weight_values", "=", "uniform", "(", "\n", "np", ".", "sqrt", "(", "2.", "/", "input_dim", ")", ",", "\n", "(", "input_dim", ",", "output_dim", ")", "\n", ")", "\n", "\n", "", "elif", "initialization", "==", "'glorot_he'", ":", "\n", "\n", "            ", "weight_values", "=", "uniform", "(", "\n", "np", ".", "sqrt", "(", "4.", "/", "(", "input_dim", "+", "output_dim", ")", ")", ",", "\n", "(", "input_dim", ",", "output_dim", ")", "\n", ")", "\n", "\n", "", "elif", "initialization", "==", "'orthogonal'", "or", "(", "initialization", "==", "None", "and", "input_dim", "==", "output_dim", ")", ":", "\n", "\n", "# From lasagne", "\n", "            ", "def", "sample", "(", "shape", ")", ":", "\n", "                ", "if", "len", "(", "shape", ")", "<", "2", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\"Only shapes of length 2 or more are \"", "\n", "\"supported.\"", ")", "\n", "", "flat_shape", "=", "(", "shape", "[", "0", "]", ",", "np", ".", "prod", "(", "shape", "[", "1", ":", "]", ")", ")", "\n", "# TODO: why normal and not uniform?", "\n", "a", "=", "np", ".", "random", ".", "normal", "(", "0.0", ",", "1.0", ",", "flat_shape", ")", "\n", "u", ",", "_", ",", "v", "=", "np", ".", "linalg", ".", "svd", "(", "a", ",", "full_matrices", "=", "False", ")", "\n", "# pick the one with the correct shape", "\n", "q", "=", "u", "if", "u", ".", "shape", "==", "flat_shape", "else", "v", "\n", "q", "=", "q", ".", "reshape", "(", "shape", ")", "\n", "return", "q", ".", "astype", "(", "'float32'", ")", "\n", "", "weight_values", "=", "sample", "(", "(", "input_dim", ",", "output_dim", ")", ")", "\n", "\n", "", "elif", "initialization", "[", "0", "]", "==", "'uniform'", ":", "\n", "\n", "            ", "weight_values", "=", "np", ".", "random", ".", "uniform", "(", "\n", "low", "=", "-", "initialization", "[", "1", "]", ",", "\n", "high", "=", "initialization", "[", "1", "]", ",", "\n", "size", "=", "(", "input_dim", ",", "output_dim", ")", "\n", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n", "", "else", ":", "\n", "\n", "            ", "raise", "Exception", "(", "'Invalid initialization!'", ")", "\n", "\n", "", "weight_values", "*=", "gain", "\n", "\n", "weight", "=", "lib", ".", "param", "(", "\n", "name", "+", "'.W'", ",", "\n", "weight_values", "\n", ")", "\n", "\n", "if", "weightnorm", "==", "None", ":", "\n", "            ", "weightnorm", "=", "_default_weightnorm", "\n", "", "if", "weightnorm", ":", "\n", "            ", "norm_values", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "np", ".", "square", "(", "weight_values", ")", ",", "axis", "=", "0", ")", ")", "\n", "# norm_values = np.linalg.norm(weight_values, axis=0)", "\n", "\n", "target_norms", "=", "lib", ".", "param", "(", "\n", "name", "+", "'.g'", ",", "\n", "norm_values", "\n", ")", "\n", "\n", "with", "tf", ".", "name_scope", "(", "'weightnorm'", ")", "as", "scope", ":", "\n", "                ", "norms", "=", "tf", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "weight", ")", ",", "reduction_indices", "=", "[", "0", "]", ")", ")", "\n", "weight", "=", "weight", "*", "(", "target_norms", "/", "norms", ")", "\n", "\n", "# if 'Discriminator' in name:", "\n", "#     print \"WARNING weight constraint on {}\".format(name)", "\n", "#     weight = tf.nn.softsign(10.*weight)*.1", "\n", "\n", "", "", "if", "inputs", ".", "get_shape", "(", ")", ".", "ndims", "==", "2", ":", "\n", "            ", "result", "=", "tf", ".", "matmul", "(", "inputs", ",", "weight", ")", "\n", "", "else", ":", "\n", "            ", "reshaped_inputs", "=", "tf", ".", "reshape", "(", "inputs", ",", "[", "-", "1", ",", "input_dim", "]", ")", "\n", "result", "=", "tf", ".", "matmul", "(", "reshaped_inputs", ",", "weight", ")", "\n", "result", "=", "tf", ".", "reshape", "(", "result", ",", "tf", ".", "pack", "(", "tf", ".", "unpack", "(", "tf", ".", "shape", "(", "inputs", ")", ")", "[", ":", "-", "1", "]", "+", "[", "output_dim", "]", ")", ")", "\n", "\n", "", "if", "biases", ":", "\n", "            ", "result", "=", "tf", ".", "nn", ".", "bias_add", "(", "\n", "result", ",", "\n", "lib", ".", "param", "(", "\n", "name", "+", "'.b'", ",", "\n", "np", ".", "zeros", "(", "(", "output_dim", ",", ")", ",", "dtype", "=", "'float32'", ")", "\n", ")", "\n", ")", "\n", "\n", "", "return", "result", "", "", "", ""]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.snresnet.SNResNetProjectionDiscriminator.__init__": [[9, 23], ["chainer.Chain.__init__", "chainer.initializers.GlorotUniform", "snresnet.SNResNetProjectionDiscriminator.init_scope", "dis_models.resblocks.OptimizedBlock", "dis_models.resblocks.Block", "dis_models.resblocks.Block", "dis_models.resblocks.Block", "dis_models.resblocks.Block", "dis_models.resblocks.Block", "source.links.sn_linear.SNLinear", "source.links.sn_embed_id.SNEmbedID"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.resblocks.OptimizedBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ch", "=", "64", ",", "n_classes", "=", "0", ",", "activation", "=", "F", ".", "relu", ")", ":", "\n", "        ", "super", "(", "SNResNetProjectionDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "activation", "=", "activation", "\n", "initializer", "=", "chainer", ".", "initializers", ".", "GlorotUniform", "(", ")", "\n", "with", "self", ".", "init_scope", "(", ")", ":", "\n", "            ", "self", ".", "block1", "=", "OptimizedBlock", "(", "3", ",", "ch", ")", "\n", "self", ".", "block2", "=", "Block", "(", "ch", ",", "ch", "*", "2", ",", "activation", "=", "activation", ",", "downsample", "=", "True", ")", "\n", "self", ".", "block3", "=", "Block", "(", "ch", "*", "2", ",", "ch", "*", "4", ",", "activation", "=", "activation", ",", "downsample", "=", "True", ")", "\n", "self", ".", "block4", "=", "Block", "(", "ch", "*", "4", ",", "ch", "*", "8", ",", "activation", "=", "activation", ",", "downsample", "=", "True", ")", "\n", "self", ".", "block5", "=", "Block", "(", "ch", "*", "8", ",", "ch", "*", "16", ",", "activation", "=", "activation", ",", "downsample", "=", "True", ")", "\n", "self", ".", "block6", "=", "Block", "(", "ch", "*", "16", ",", "ch", "*", "16", ",", "activation", "=", "activation", ",", "downsample", "=", "False", ")", "\n", "self", ".", "l7", "=", "SNLinear", "(", "ch", "*", "16", ",", "1", ",", "initialW", "=", "initializer", ")", "\n", "if", "n_classes", ">", "0", ":", "\n", "                ", "self", ".", "l_y", "=", "SNEmbedID", "(", "n_classes", ",", "ch", "*", "16", ",", "initialW", "=", "initializer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.snresnet.SNResNetProjectionDiscriminator.__call__": [[24, 39], ["snresnet.SNResNetProjectionDiscriminator.block1", "snresnet.SNResNetProjectionDiscriminator.block2", "snresnet.SNResNetProjectionDiscriminator.block3", "snresnet.SNResNetProjectionDiscriminator.block4", "snresnet.SNResNetProjectionDiscriminator.block5", "snresnet.SNResNetProjectionDiscriminator.block6", "snresnet.SNResNetProjectionDiscriminator.activation", "chainer.functions.sum", "snresnet.SNResNetProjectionDiscriminator.l7", "snresnet.SNResNetProjectionDiscriminator.l_y", "chainer.functions.sum"], "methods", ["None"], ["", "", "", "def", "__call__", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "h", "=", "x", "\n", "h", "=", "self", ".", "block1", "(", "h", ")", "\n", "h", "=", "self", ".", "block2", "(", "h", ")", "\n", "h", "=", "self", ".", "block3", "(", "h", ")", "\n", "h", "=", "self", ".", "block4", "(", "h", ")", "\n", "h", "=", "self", ".", "block5", "(", "h", ")", "\n", "h", "=", "self", ".", "block6", "(", "h", ")", "\n", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "h", "=", "F", ".", "sum", "(", "h", ",", "axis", "=", "(", "2", ",", "3", ")", ")", "# Global pooling", "\n", "output", "=", "self", ".", "l7", "(", "h", ")", "\n", "if", "y", "is", "not", "None", ":", "\n", "            ", "w_y", "=", "self", ".", "l_y", "(", "y", ")", "\n", "output", "+=", "F", ".", "sum", "(", "w_y", "*", "h", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.snresnet.SNResNetConcatDiscriminator.__init__": [[42, 55], ["chainer.Chain.__init__", "chainer.initializers.GlorotUniform", "snresnet.SNResNetConcatDiscriminator.init_scope", "dis_models.resblocks.OptimizedBlock", "dis_models.resblocks.Block", "dis_models.resblocks.Block", "source.links.sn_embed_id.SNEmbedID", "dis_models.resblocks.Block", "dis_models.resblocks.Block", "dis_models.resblocks.Block", "source.links.sn_linear.SNLinear"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.resblocks.OptimizedBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ch", "=", "64", ",", "n_classes", "=", "0", ",", "activation", "=", "F", ".", "relu", ",", "dim_emb", "=", "128", ")", ":", "\n", "        ", "super", "(", "SNResNetConcatDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "activation", "=", "activation", "\n", "initializer", "=", "chainer", ".", "initializers", ".", "GlorotUniform", "(", ")", "\n", "with", "self", ".", "init_scope", "(", ")", ":", "\n", "            ", "self", ".", "block1", "=", "OptimizedBlock", "(", "3", ",", "ch", ")", "\n", "self", ".", "block2", "=", "Block", "(", "ch", ",", "ch", "*", "2", ",", "activation", "=", "activation", ",", "downsample", "=", "True", ")", "\n", "self", ".", "block3", "=", "Block", "(", "ch", "*", "2", ",", "ch", "*", "4", ",", "activation", "=", "activation", ",", "downsample", "=", "True", ")", "\n", "self", ".", "l_y", "=", "SNEmbedID", "(", "n_classes", ",", "dim_emb", ",", "initialW", "=", "initializer", ")", "\n", "self", ".", "block4", "=", "Block", "(", "ch", "*", "4", "+", "dim_emb", ",", "ch", "*", "8", ",", "activation", "=", "activation", ",", "downsample", "=", "True", ")", "\n", "self", ".", "block5", "=", "Block", "(", "ch", "*", "8", ",", "ch", "*", "16", ",", "activation", "=", "activation", ",", "downsample", "=", "True", ")", "\n", "self", ".", "block6", "=", "Block", "(", "ch", "*", "16", ",", "ch", "*", "16", ",", "activation", "=", "activation", ",", "downsample", "=", "False", ")", "\n", "self", ".", "l7", "=", "SNLinear", "(", "ch", "*", "16", ",", "1", ",", "initialW", "=", "initializer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.snresnet.SNResNetConcatDiscriminator.__call__": [[56, 75], ["snresnet.SNResNetConcatDiscriminator.block1", "snresnet.SNResNetConcatDiscriminator.block2", "snresnet.SNResNetConcatDiscriminator.block3", "snresnet.SNResNetConcatDiscriminator.block4", "snresnet.SNResNetConcatDiscriminator.block5", "snresnet.SNResNetConcatDiscriminator.block6", "snresnet.SNResNetConcatDiscriminator.activation", "chainer.functions.sum", "snresnet.SNResNetConcatDiscriminator.l7", "snresnet.SNResNetConcatDiscriminator.l_y", "chainer.functions.broadcast_to", "chainer.functions.concat", "chainer.functions.reshape"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "h", "=", "x", "\n", "h", "=", "self", ".", "block1", "(", "h", ")", "\n", "h", "=", "self", ".", "block2", "(", "h", ")", "\n", "h", "=", "self", ".", "block3", "(", "h", ")", "\n", "if", "y", "is", "not", "None", ":", "\n", "            ", "emb", "=", "self", ".", "l_y", "(", "y", ")", "\n", "H", ",", "W", "=", "h", ".", "shape", "[", "2", "]", ",", "h", ".", "shape", "[", "3", "]", "\n", "emb", "=", "F", ".", "broadcast_to", "(", "\n", "F", ".", "reshape", "(", "emb", ",", "(", "emb", ".", "shape", "[", "0", "]", ",", "emb", ".", "shape", "[", "1", "]", ",", "1", ",", "1", ")", ")", ",", "\n", "(", "emb", ".", "shape", "[", "0", "]", ",", "emb", ".", "shape", "[", "1", "]", ",", "H", ",", "W", ")", ")", "\n", "h", "=", "F", ".", "concat", "(", "[", "h", ",", "emb", "]", ",", "axis", "=", "1", ")", "\n", "", "h", "=", "self", ".", "block4", "(", "h", ")", "\n", "h", "=", "self", ".", "block5", "(", "h", ")", "\n", "h", "=", "self", ".", "block6", "(", "h", ")", "\n", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "h", "=", "F", ".", "sum", "(", "h", ",", "axis", "=", "(", "2", ",", "3", ")", ")", "# Global pooling", "\n", "output", "=", "self", ".", "l7", "(", "h", ")", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.snresnet_small.SNResNetProjectionDiscriminator.__init__": [[9, 23], ["chainer.Chain.__init__", "chainer.initializers.GlorotUniform", "snresnet_small.SNResNetProjectionDiscriminator.init_scope", "dis_models.resblocks.OptimizedBlock", "dis_models.resblocks.Block", "dis_models.resblocks.Block", "dis_models.resblocks.Block", "dis_models.resblocks.Block", "dis_models.resblocks.Block", "source.links.sn_linear.SNLinear", "source.links.sn_embed_id.SNEmbedID"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.resblocks.OptimizedBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ch", "=", "64", ",", "n_classes", "=", "0", ",", "activation", "=", "F", ".", "relu", ")", ":", "\n", "        ", "super", "(", "SNResNetProjectionDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "activation", "=", "activation", "\n", "initializer", "=", "chainer", ".", "initializers", ".", "GlorotUniform", "(", ")", "\n", "with", "self", ".", "init_scope", "(", ")", ":", "\n", "            ", "self", ".", "block1", "=", "OptimizedBlock", "(", "3", ",", "ch", ")", "\n", "self", ".", "block2", "=", "Block", "(", "ch", ",", "ch", "*", "2", ",", "activation", "=", "activation", ",", "downsample", "=", "True", ")", "\n", "self", ".", "block3", "=", "Block", "(", "ch", "*", "2", ",", "ch", "*", "4", ",", "activation", "=", "activation", ",", "downsample", "=", "True", ")", "\n", "self", ".", "block4", "=", "Block", "(", "ch", "*", "4", ",", "ch", "*", "4", ",", "activation", "=", "activation", ",", "downsample", "=", "True", ")", "\n", "self", ".", "block5", "=", "Block", "(", "ch", "*", "4", ",", "ch", "*", "8", ",", "activation", "=", "activation", ",", "downsample", "=", "True", ")", "\n", "self", ".", "block6", "=", "Block", "(", "ch", "*", "8", ",", "ch", "*", "8", ",", "activation", "=", "activation", ",", "downsample", "=", "False", ")", "\n", "self", ".", "l7", "=", "SNLinear", "(", "ch", "*", "8", ",", "1", ",", "initialW", "=", "initializer", ")", "\n", "if", "n_classes", ">", "0", ":", "\n", "                ", "self", ".", "l_y", "=", "SNEmbedID", "(", "n_classes", ",", "ch", "*", "8", ",", "initialW", "=", "initializer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.snresnet_small.SNResNetProjectionDiscriminator.__call__": [[24, 39], ["snresnet_small.SNResNetProjectionDiscriminator.block1", "snresnet_small.SNResNetProjectionDiscriminator.block2", "snresnet_small.SNResNetProjectionDiscriminator.block3", "snresnet_small.SNResNetProjectionDiscriminator.block4", "snresnet_small.SNResNetProjectionDiscriminator.block5", "snresnet_small.SNResNetProjectionDiscriminator.block6", "snresnet_small.SNResNetProjectionDiscriminator.activation", "chainer.functions.sum", "snresnet_small.SNResNetProjectionDiscriminator.l7", "snresnet_small.SNResNetProjectionDiscriminator.l_y", "chainer.functions.sum"], "methods", ["None"], ["", "", "", "def", "__call__", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "h", "=", "x", "\n", "h", "=", "self", ".", "block1", "(", "h", ")", "\n", "h", "=", "self", ".", "block2", "(", "h", ")", "\n", "h", "=", "self", ".", "block3", "(", "h", ")", "\n", "h", "=", "self", ".", "block4", "(", "h", ")", "\n", "h", "=", "self", ".", "block5", "(", "h", ")", "\n", "h", "=", "self", ".", "block6", "(", "h", ")", "\n", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "h", "=", "F", ".", "sum", "(", "h", ",", "axis", "=", "(", "2", ",", "3", ")", ")", "# Global pooling", "\n", "output", "=", "self", ".", "l7", "(", "h", ")", "\n", "if", "y", "is", "not", "None", ":", "\n", "            ", "w_y", "=", "self", ".", "l_y", "(", "y", ")", "\n", "output", "+=", "F", ".", "sum", "(", "w_y", "*", "h", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.snresnet_64.SNResNetProjectionDiscriminator.__init__": [[9, 22], ["chainer.Chain.__init__", "chainer.initializers.GlorotUniform", "snresnet_64.SNResNetProjectionDiscriminator.init_scope", "dis_models.resblocks.OptimizedBlock", "dis_models.resblocks.Block", "dis_models.resblocks.Block", "dis_models.resblocks.Block", "dis_models.resblocks.Block", "source.links.sn_linear.SNLinear", "source.links.sn_embed_id.SNEmbedID"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.resblocks.OptimizedBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ch", "=", "64", ",", "n_classes", "=", "0", ",", "activation", "=", "F", ".", "relu", ")", ":", "\n", "        ", "super", "(", "SNResNetProjectionDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "activation", "=", "activation", "\n", "initializer", "=", "chainer", ".", "initializers", ".", "GlorotUniform", "(", ")", "\n", "with", "self", ".", "init_scope", "(", ")", ":", "\n", "            ", "self", ".", "block1", "=", "OptimizedBlock", "(", "3", ",", "ch", ")", "\n", "self", ".", "block2", "=", "Block", "(", "ch", ",", "ch", "*", "2", ",", "activation", "=", "activation", ",", "downsample", "=", "True", ")", "\n", "self", ".", "block3", "=", "Block", "(", "ch", "*", "2", ",", "ch", "*", "4", ",", "activation", "=", "activation", ",", "downsample", "=", "True", ")", "\n", "self", ".", "block4", "=", "Block", "(", "ch", "*", "4", ",", "ch", "*", "8", ",", "activation", "=", "activation", ",", "downsample", "=", "True", ")", "\n", "self", ".", "block5", "=", "Block", "(", "ch", "*", "8", ",", "ch", "*", "16", ",", "activation", "=", "activation", ",", "downsample", "=", "True", ")", "\n", "self", ".", "l6", "=", "SNLinear", "(", "ch", "*", "16", ",", "1", ",", "initialW", "=", "initializer", ")", "\n", "if", "n_classes", ">", "0", ":", "\n", "                ", "self", ".", "l_y", "=", "SNEmbedID", "(", "n_classes", ",", "ch", "*", "16", ",", "initialW", "=", "initializer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.snresnet_64.SNResNetProjectionDiscriminator.__call__": [[23, 37], ["snresnet_64.SNResNetProjectionDiscriminator.block1", "snresnet_64.SNResNetProjectionDiscriminator.block2", "snresnet_64.SNResNetProjectionDiscriminator.block3", "snresnet_64.SNResNetProjectionDiscriminator.block4", "snresnet_64.SNResNetProjectionDiscriminator.block5", "snresnet_64.SNResNetProjectionDiscriminator.activation", "chainer.functions.sum", "snresnet_64.SNResNetProjectionDiscriminator.l6", "snresnet_64.SNResNetProjectionDiscriminator.l_y", "chainer.functions.sum"], "methods", ["None"], ["", "", "", "def", "__call__", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "h", "=", "x", "\n", "h", "=", "self", ".", "block1", "(", "h", ")", "\n", "h", "=", "self", ".", "block2", "(", "h", ")", "\n", "h", "=", "self", ".", "block3", "(", "h", ")", "\n", "h", "=", "self", ".", "block4", "(", "h", ")", "\n", "h", "=", "self", ".", "block5", "(", "h", ")", "\n", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "h", "=", "F", ".", "sum", "(", "h", ",", "axis", "=", "(", "2", ",", "3", ")", ")", "# Global pooling", "\n", "output", "=", "self", ".", "l6", "(", "h", ")", "\n", "if", "y", "is", "not", "None", ":", "\n", "            ", "w_y", "=", "self", ".", "l_y", "(", "y", ")", "\n", "output", "+=", "F", ".", "sum", "(", "w_y", "*", "h", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.snresnet_32.SNResNetProjectionDiscriminator.__init__": [[9, 20], ["chainer.Chain.__init__", "snresnet_32.SNResNetProjectionDiscriminator.init_scope", "dis_models.resblocks.OptimizedBlock", "dis_models.resblocks.Block", "dis_models.resblocks.Block", "dis_models.resblocks.Block", "source.links.sn_linear.SNLinear", "source.links.sn_embed_id.SNEmbedID", "chainer.initializers.GlorotUniform", "chainer.initializers.GlorotUniform"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.resblocks.OptimizedBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ch", "=", "128", ",", "n_classes", "=", "0", ",", "activation", "=", "F", ".", "relu", ")", ":", "\n", "        ", "super", "(", "SNResNetProjectionDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "activation", "=", "activation", "\n", "with", "self", ".", "init_scope", "(", ")", ":", "\n", "            ", "self", ".", "block1", "=", "OptimizedBlock", "(", "3", ",", "ch", ")", "\n", "self", ".", "block2", "=", "Block", "(", "ch", ",", "ch", ",", "activation", "=", "activation", ",", "downsample", "=", "True", ")", "\n", "self", ".", "block3", "=", "Block", "(", "ch", ",", "ch", ",", "activation", "=", "activation", ",", "downsample", "=", "False", ")", "\n", "self", ".", "block4", "=", "Block", "(", "ch", ",", "ch", ",", "activation", "=", "activation", ",", "downsample", "=", "False", ")", "\n", "self", ".", "l5", "=", "SNLinear", "(", "ch", ",", "1", ",", "initialW", "=", "chainer", ".", "initializers", ".", "GlorotUniform", "(", ")", ",", "nobias", "=", "True", ")", "\n", "if", "n_classes", ">", "0", ":", "\n", "                ", "self", ".", "l_y", "=", "SNEmbedID", "(", "n_classes", ",", "ch", ",", "initialW", "=", "chainer", ".", "initializers", ".", "GlorotUniform", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.snresnet_32.SNResNetProjectionDiscriminator.__call__": [[21, 35], ["snresnet_32.SNResNetProjectionDiscriminator.block1", "snresnet_32.SNResNetProjectionDiscriminator.block2", "snresnet_32.SNResNetProjectionDiscriminator.block3", "snresnet_32.SNResNetProjectionDiscriminator.block4", "snresnet_32.SNResNetProjectionDiscriminator.activation", "chainer.functions.sum", "snresnet_32.SNResNetProjectionDiscriminator.l5", "snresnet_32.SNResNetProjectionDiscriminator.l_y", "chainer.functions.sum"], "methods", ["None"], ["", "", "", "def", "__call__", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "h", "=", "x", "\n", "h", "=", "self", ".", "block1", "(", "h", ")", "\n", "h", "=", "self", ".", "block2", "(", "h", ")", "\n", "h", "=", "self", ".", "block3", "(", "h", ")", "\n", "h", "=", "self", ".", "block4", "(", "h", ")", "\n", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "# Global average pooling", "\n", "h", "=", "F", ".", "sum", "(", "h", ",", "axis", "=", "(", "2", ",", "3", ")", ")", "\n", "output", "=", "self", ".", "l5", "(", "h", ")", "\n", "if", "y", "is", "not", "None", ":", "\n", "            ", "w_y", "=", "self", ".", "l_y", "(", "y", ")", "\n", "output", "+=", "F", ".", "sum", "(", "w_y", "*", "h", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.snresnet_256.SNResNetProjectionDiscriminator.__init__": [[9, 24], ["chainer.Chain.__init__", "chainer.initializers.GlorotUniform", "snresnet_256.SNResNetProjectionDiscriminator.init_scope", "dis_models.resblocks.OptimizedBlock", "dis_models.resblocks.Block", "dis_models.resblocks.Block", "dis_models.resblocks.Block", "dis_models.resblocks.Block", "dis_models.resblocks.Block", "dis_models.resblocks.Block", "source.links.sn_linear.SNLinear", "source.links.sn_embed_id.SNEmbedID"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.resblocks.OptimizedBlock.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ch", "=", "64", ",", "n_classes", "=", "0", ",", "activation", "=", "F", ".", "relu", ")", ":", "\n", "        ", "super", "(", "SNResNetProjectionDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "activation", "=", "activation", "\n", "initializer", "=", "chainer", ".", "initializers", ".", "GlorotUniform", "(", ")", "\n", "with", "self", ".", "init_scope", "(", ")", ":", "\n", "            ", "self", ".", "block1", "=", "OptimizedBlock", "(", "3", ",", "ch", ")", "\n", "self", ".", "block2", "=", "Block", "(", "ch", ",", "ch", "*", "2", ",", "activation", "=", "activation", ",", "downsample", "=", "True", ")", "\n", "self", ".", "block3", "=", "Block", "(", "ch", "*", "2", ",", "ch", "*", "4", ",", "activation", "=", "activation", ",", "downsample", "=", "True", ")", "\n", "self", ".", "block4", "=", "Block", "(", "ch", "*", "4", ",", "ch", "*", "8", ",", "activation", "=", "activation", ",", "downsample", "=", "True", ")", "\n", "self", ".", "block5", "=", "Block", "(", "ch", "*", "8", ",", "ch", "*", "8", ",", "activation", "=", "activation", ",", "downsample", "=", "True", ")", "\n", "self", ".", "block6", "=", "Block", "(", "ch", "*", "8", ",", "ch", "*", "16", ",", "activation", "=", "activation", ",", "downsample", "=", "True", ")", "\n", "self", ".", "block7", "=", "Block", "(", "ch", "*", "16", ",", "ch", "*", "16", ",", "activation", "=", "activation", ",", "downsample", "=", "False", ")", "\n", "self", ".", "l8", "=", "SNLinear", "(", "ch", "*", "16", ",", "1", ",", "initialW", "=", "initializer", ")", "\n", "if", "n_classes", ">", "0", ":", "\n", "                ", "self", ".", "l_y", "=", "SNEmbedID", "(", "n_classes", ",", "ch", "*", "16", ",", "initialW", "=", "initializer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.snresnet_256.SNResNetProjectionDiscriminator.__call__": [[25, 41], ["snresnet_256.SNResNetProjectionDiscriminator.block1", "snresnet_256.SNResNetProjectionDiscriminator.block2", "snresnet_256.SNResNetProjectionDiscriminator.block3", "snresnet_256.SNResNetProjectionDiscriminator.block4", "snresnet_256.SNResNetProjectionDiscriminator.block5", "snresnet_256.SNResNetProjectionDiscriminator.block6", "snresnet_256.SNResNetProjectionDiscriminator.block7", "snresnet_256.SNResNetProjectionDiscriminator.activation", "chainer.functions.sum", "snresnet_256.SNResNetProjectionDiscriminator.l8", "snresnet_256.SNResNetProjectionDiscriminator.l_y", "chainer.functions.sum"], "methods", ["None"], ["", "", "", "def", "__call__", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "h", "=", "x", "\n", "h", "=", "self", ".", "block1", "(", "h", ")", "\n", "h", "=", "self", ".", "block2", "(", "h", ")", "\n", "h", "=", "self", ".", "block3", "(", "h", ")", "\n", "h", "=", "self", ".", "block4", "(", "h", ")", "\n", "h", "=", "self", ".", "block5", "(", "h", ")", "\n", "h", "=", "self", ".", "block6", "(", "h", ")", "\n", "h", "=", "self", ".", "block7", "(", "h", ")", "\n", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "h", "=", "F", ".", "sum", "(", "h", ",", "axis", "=", "(", "2", ",", "3", ")", ")", "\n", "output", "=", "self", ".", "l8", "(", "h", ")", "\n", "if", "y", "is", "not", "None", ":", "\n", "            ", "w_y", "=", "self", ".", "l_y", "(", "y", ")", "\n", "output", "+=", "F", ".", "sum", "(", "w_y", "*", "h", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.resblocks.Block.__init__": [[13, 27], ["chainer.Chain.__init__", "chainer.initializers.GlorotUniform", "chainer.initializers.GlorotUniform", "math.sqrt", "resblocks.Block.init_scope", "source.links.sn_convolution_2d.SNConvolution2D", "source.links.sn_convolution_2d.SNConvolution2D", "source.links.sn_convolution_2d.SNConvolution2D"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.resblocks.OptimizedBlock.__init__"], ["", "def", "upsample_conv", "(", "x", ",", "conv", ")", ":", "\n", "    ", "return", "conv", "(", "_upsample", "(", "x", ")", ")", "\n", "\n", "\n", "", "class", "Block", "(", "chainer", ".", "Chain", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "hidden_channels", "=", "None", ",", "ksize", "=", "3", ",", "pad", "=", "1", ",", "\n", "activation", "=", "F", ".", "relu", ",", "upsample", "=", "False", ",", "n_classes", "=", "0", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "initializer", "=", "chainer", ".", "initializers", ".", "GlorotUniform", "(", "math", ".", "sqrt", "(", "2", ")", ")", "\n", "initializer_sc", "=", "chainer", ".", "initializers", ".", "GlorotUniform", "(", ")", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "upsample", "=", "upsample", "\n", "self", ".", "learnable_sc", "=", "in_channels", "!=", "out_channels", "or", "upsample", "\n", "hidden_channels", "=", "out_channels", "if", "hidden_channels", "is", "None", "else", "hidden_channels", "\n", "self", ".", "n_classes", "=", "n_classes", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.resblocks.Block.residual": [[28, 37], ["resblocks.Block.activation", "resblocks.Block.c1", "resblocks.Block.activation", "resblocks.Block.c2", "resblocks._downsample"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.resblocks._downsample"], ["with", "self", ".", "init_scope", "(", ")", ":", "\n", "            ", "self", ".", "c1", "=", "L", ".", "Convolution2D", "(", "in_channels", ",", "hidden_channels", ",", "ksize", "=", "ksize", ",", "pad", "=", "pad", ",", "initialW", "=", "initializer", ")", "\n", "self", ".", "c2", "=", "L", ".", "Convolution2D", "(", "hidden_channels", ",", "out_channels", ",", "ksize", "=", "ksize", ",", "pad", "=", "pad", ",", "initialW", "=", "initializer", ")", "\n", "if", "n_classes", ">", "0", ":", "\n", "                ", "self", ".", "b1", "=", "CategoricalConditionalBatchNormalization", "(", "in_channels", ",", "n_cat", "=", "n_classes", ")", "\n", "self", ".", "b2", "=", "CategoricalConditionalBatchNormalization", "(", "hidden_channels", ",", "n_cat", "=", "n_classes", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "b1", "=", "L", ".", "BatchNormalization", "(", "in_channels", ")", "\n", "self", ".", "b2", "=", "L", ".", "BatchNormalization", "(", "hidden_channels", ")", "\n", "", "if", "self", ".", "learnable_sc", ":", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.resblocks.Block.shortcut": [[38, 47], ["resblocks.Block.c_sc", "resblocks._downsample"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.resblocks._downsample"], ["                ", "self", ".", "c_sc", "=", "L", ".", "Convolution2D", "(", "in_channels", ",", "out_channels", ",", "ksize", "=", "1", ",", "pad", "=", "0", ",", "initialW", "=", "initializer_sc", ")", "\n", "\n", "", "", "", "def", "residual", "(", "self", ",", "x", ",", "y", "=", "None", ",", "z", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "h", "=", "x", "\n", "h", "=", "self", ".", "b1", "(", "h", ",", "y", ",", "**", "kwargs", ")", "if", "y", "is", "not", "None", "else", "self", ".", "b1", "(", "h", ",", "**", "kwargs", ")", "\n", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "h", "=", "upsample_conv", "(", "h", ",", "self", ".", "c1", ")", "if", "self", ".", "upsample", "else", "self", ".", "c1", "(", "h", ")", "\n", "h", "=", "self", ".", "b2", "(", "h", ",", "y", ",", "**", "kwargs", ")", "if", "y", "is", "not", "None", "else", "self", ".", "b2", "(", "h", ",", "**", "kwargs", ")", "\n", "h", "=", "self", ".", "activation", "(", "h", ")", "\n", "h", "=", "self", ".", "c2", "(", "h", ")", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.resblocks.Block.__call__": [[48, 50], ["resblocks.Block.residual", "resblocks.Block.shortcut"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.resblocks.OptimizedBlock.residual", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.resblocks.OptimizedBlock.shortcut"], ["return", "h", "\n", "\n", "", "def", "shortcut", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.resblocks.OptimizedBlock.__init__": [[53, 62], ["chainer.Chain.__init__", "chainer.initializers.GlorotUniform", "chainer.initializers.GlorotUniform", "math.sqrt", "resblocks.OptimizedBlock.init_scope", "source.links.sn_convolution_2d.SNConvolution2D", "source.links.sn_convolution_2d.SNConvolution2D", "source.links.sn_convolution_2d.SNConvolution2D"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.resblocks.OptimizedBlock.__init__"], ["return", "x", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n", "", "", "def", "__call__", "(", "self", ",", "x", ",", "y", "=", "None", ",", "z", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "residual", "(", "x", ",", "y", ",", "z", ",", "**", "kwargs", ")", "+", "self", ".", "shortcut", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.resblocks.OptimizedBlock.residual": [[63, 70], ["resblocks.OptimizedBlock.c1", "resblocks.OptimizedBlock.activation", "resblocks.OptimizedBlock.c2", "resblocks._downsample"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.resblocks._downsample"], []], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.resblocks.OptimizedBlock.shortcut": [[71, 73], ["resblocks.OptimizedBlock.c_sc", "resblocks._downsample"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.resblocks._downsample"], []], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.resblocks.OptimizedBlock.__call__": [[74, 76], ["resblocks.OptimizedBlock.residual", "resblocks.OptimizedBlock.shortcut"], "methods", ["home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.resblocks.OptimizedBlock.residual", "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.resblocks.OptimizedBlock.shortcut"], []], "home.repos.pwc.inspect_result.MinkaiXu_Discriminator-Contrastive-Divergence.dis_models.resblocks._downsample": [[7, 10], ["chainer.functions.average_pooling_2d"], "function", ["None"], ["\n", "def", "_upsample", "(", "x", ")", ":", "\n", "    ", "h", ",", "w", "=", "x", ".", "shape", "[", "2", ":", "]", "\n", "return", "F", ".", "unpooling_2d", "(", "x", ",", "2", ",", "outsize", "=", "(", "h", "*", "2", ",", "w", "*", "2", ")", ")", "\n"]]}