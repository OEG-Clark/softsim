{"home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.filter_concept.load_pretrained_embeddings": [[9, 17], ["open", "line.strip().split", "line.strip"], "function", ["None"], ["def", "load_pretrained_embeddings", "(", "file", ")", ":", "\n", "    ", "embeddings_dict", "=", "{", "}", "\n", "with", "open", "(", "file", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "values", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "word", "=", "values", "[", "0", "]", "\n", "embeddings_dict", "[", "word", "]", "=", "line", "\n", "", "", "return", "embeddings_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.filter_concept.load_bert_vectors": [[29, 38], ["open", "csv.reader", "os.path.join", "float", "data.append"], "function", ["None"], ["def", "load_bert_vectors", "(", "path", ",", "noun", ")", ":", "\n", "    ", "data", "=", "[", "]", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "noun", "+", "'.csv'", ")", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "reader", "=", "csv", ".", "reader", "(", "f", ",", "delimiter", "=", "','", ")", "\n", "for", "line", "in", "reader", ":", "\n", "            ", "vec", "=", "[", "float", "(", "l", ")", "for", "l", "in", "line", "]", "\n", "if", "vec", "not", "in", "data", ":", "\n", "                ", "data", ".", "append", "(", "vec", ")", "\n", "", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.graph.RGCNUnaryDataset.__init__": [[63, 69], ["os.path.join", "os.path.join", "os.path.join", "os.path.abspath"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", ",", "type", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "type", "=", "type", "\n", "self", ".", "dir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "abspath", "(", "'.'", ")", ",", "'dataset'", ")", "\n", "self", ".", "dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dir", ",", "self", ".", "type", ")", "\n", "self", ".", "dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dir", ",", "self", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.graph.RGCNUnaryDataset.load": [[70, 110], ["graph._load_data", "numpy.unique", "print", "edges.transpose", "scipy.csr_matrix", "graph._bfs_relational", "list", "list.append", "range", "list", "numpy.logical_not", "edges.transpose", "numpy.ones", "degrees.astype", "set", "list.append", "numpy.isin", "numpy.isin", "numpy.unique", "numpy.reshape", "numpy.zeros", "len", "numpy.arange", "print", "len", "numpy.ones", "next", "set", "set.union", "len", "range"], "methods", ["home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.graph._load_data", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.graph._bfs_relational"], ["", "def", "load", "(", "self", ",", "bfs_level", "=", "2", ",", "relabel", "=", "False", ")", ":", "\n", "        ", "self", ".", "num_nodes", ",", "edges", ",", "self", ".", "num_rels", ",", "self", ".", "labels", ",", "labeled_nodes_idx", ",", "self", ".", "features", "=", "_load_data", "(", "self", ".", "name", ",", "self", ".", "dir", ")", "\n", "\n", "# bfs to reduce edges", "\n", "if", "bfs_level", ">", "0", ":", "\n", "            ", "print", "(", "\"removing nodes that are more than {} hops away\"", ".", "format", "(", "bfs_level", ")", ")", "\n", "row", ",", "col", ",", "edge_type", "=", "edges", ".", "transpose", "(", ")", "\n", "A", "=", "sp", ".", "csr_matrix", "(", "(", "np", ".", "ones", "(", "len", "(", "row", ")", ")", ",", "(", "row", ",", "col", ")", ")", ",", "shape", "=", "(", "self", ".", "num_nodes", ",", "self", ".", "num_nodes", ")", ")", "\n", "bfs_generator", "=", "_bfs_relational", "(", "A", ",", "labeled_nodes_idx", ")", "\n", "lvls", "=", "list", "(", ")", "\n", "lvls", ".", "append", "(", "set", "(", "labeled_nodes_idx", ")", ")", "\n", "for", "_", "in", "range", "(", "bfs_level", ")", ":", "\n", "                ", "lvls", ".", "append", "(", "next", "(", "bfs_generator", ")", ")", "\n", "", "to_delete", "=", "list", "(", "set", "(", "range", "(", "self", ".", "num_nodes", ")", ")", "-", "set", ".", "union", "(", "*", "lvls", ")", ")", "\n", "eid_to_delete", "=", "np", ".", "isin", "(", "row", ",", "to_delete", ")", "+", "np", ".", "isin", "(", "col", ",", "to_delete", ")", "\n", "eid_to_keep", "=", "np", ".", "logical_not", "(", "eid_to_delete", ")", "\n", "self", ".", "edge_src", "=", "row", "[", "eid_to_keep", "]", "\n", "self", ".", "edge_dst", "=", "col", "[", "eid_to_keep", "]", "\n", "self", ".", "edge_type", "=", "edge_type", "[", "eid_to_keep", "]", "\n", "\n", "if", "relabel", ":", "# False, so not run", "\n", "                ", "uniq_nodes", ",", "edges", "=", "np", ".", "unique", "(", "(", "self", ".", "edge_src", ",", "self", ".", "edge_dst", ")", ",", "return_inverse", "=", "True", ")", "\n", "self", ".", "edge_src", ",", "self", ".", "edge_dst", "=", "np", ".", "reshape", "(", "edges", ",", "(", "2", ",", "-", "1", ")", ")", "\n", "node_map", "=", "np", ".", "zeros", "(", "self", ".", "num_nodes", ",", "dtype", "=", "int", ")", "\n", "self", ".", "num_nodes", "=", "len", "(", "uniq_nodes", ")", "\n", "node_map", "[", "uniq_nodes", "]", "=", "np", ".", "arange", "(", "self", ".", "num_nodes", ")", "\n", "self", ".", "labels", "=", "self", ".", "labels", "[", "uniq_nodes", "]", "\n", "self", ".", "train_idx", "=", "node_map", "[", "self", ".", "train_idx", "]", "\n", "self", ".", "test_idx", "=", "node_map", "[", "self", ".", "test_idx", "]", "\n", "print", "(", "\"{} nodes left\"", ".", "format", "(", "self", ".", "num_nodes", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "edge_src", ",", "self", ".", "edge_dst", ",", "self", ".", "edge_type", "=", "edges", ".", "transpose", "(", ")", "\n", "\n", "# normalize by src degree, compute degrees according to edge_type", "\n", "", "_", ",", "inverse_index", ",", "count", "=", "np", ".", "unique", "(", "(", "self", ".", "edge_dst", ",", "self", ".", "edge_type", ")", ",", "axis", "=", "1", ",", "return_inverse", "=", "True", ",", "return_counts", "=", "True", ")", "\n", "degrees", "=", "count", "[", "inverse_index", "]", "#c_{i,r} for each relation type", "\n", "self", ".", "edge_norm", "=", "np", ".", "ones", "(", "len", "(", "self", ".", "edge_dst", ")", ",", "dtype", "=", "np", ".", "float32", ")", "/", "degrees", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# convert to pytorch label format", "\n", "self", ".", "num_classes", "=", "self", ".", "labels", ".", "shape", "[", "1", "]", "\n", "#self.labels = np.argmax(self.labels, axis=1)", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.graph.RGCNBinaryDataset.__init__": [[133, 137], ["os.path.join", "os.path.join", "os.path.abspath"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "dir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "abspath", "(", "'.'", ")", ",", "'binary_data'", ")", "\n", "self", ".", "dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dir", ",", "self", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.graph.RGCNBinaryDataset.load": [[138, 154], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "pandas.read_csv", "pandas.read_csv", "graph._read_dictionary", "graph._read_dictionary", "numpy.array", "len", "print", "len", "print", "print", "graph._read_triplets_as_list", "len"], "methods", ["home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.get_filter_emb_fold._read_dictionary", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.get_filter_emb_fold._read_dictionary", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.graph._read_triplets_as_list"], ["", "def", "load", "(", "self", ")", ":", "\n", "        ", "entity_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dir", ",", "'nodes.dict'", ")", "\n", "relation_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dir", ",", "'edges.dict'", ")", "\n", "data_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dir", ",", "'binary_template_triples.txt'", ")", "# all triples", "\n", "node_feature_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dir", ",", "'node_features.csv'", ")", "\n", "relation_feature_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dir", ",", "'relation_features.csv'", ")", "\n", "self", ".", "node_features", "=", "pd", ".", "read_csv", "(", "node_feature_path", ",", "sep", "=", "','", ",", "encoding", "=", "'utf-8'", ")", "\n", "self", ".", "relation_features", "=", "pd", ".", "read_csv", "(", "relation_feature_path", ",", "sep", "=", "','", ",", "encoding", "=", "'utf-8'", ")", "\n", "entity_dict", "=", "_read_dictionary", "(", "entity_path", ")", "\n", "relation_dict", "=", "_read_dictionary", "(", "relation_path", ")", "\n", "self", ".", "complete_data", "=", "np", ".", "array", "(", "_read_triplets_as_list", "(", "data_path", ",", "entity_dict", ",", "relation_dict", ")", ")", "# (n_id, r_id, n_id)", "\n", "self", ".", "num_nodes", "=", "len", "(", "entity_dict", ")", "\n", "print", "(", "\"# entities: {}\"", ".", "format", "(", "self", ".", "num_nodes", ")", ")", "\n", "self", ".", "num_rels", "=", "len", "(", "relation_dict", ")", "\n", "print", "(", "\"# relations: {}\"", ".", "format", "(", "self", ".", "num_rels", ")", ")", "\n", "print", "(", "\"# edges: {}\"", ".", "format", "(", "len", "(", "self", ".", "complete_data", ")", ")", ")", "# total number of edges", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.graph.load_unary": [[156, 160], ["graph.RGCNUnaryDataset", "graph.RGCNUnaryDataset.load"], "function", ["home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.graph.RGCNBinaryDataset.load"], ["", "", "def", "load_unary", "(", "dataset", ",", "feature_type", ",", "bfs_level", ",", "relabel", ")", ":", "\n", "    ", "data", "=", "RGCNUnaryDataset", "(", "dataset", ",", "feature_type", ")", "\n", "data", ".", "load", "(", "bfs_level", ",", "relabel", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.graph.load_binary": [[162, 166], ["graph.RGCNBinaryDataset", "graph.RGCNBinaryDataset.load"], "function", ["home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.graph.RGCNBinaryDataset.load"], ["", "def", "load_binary", "(", "dataset", ")", ":", "\n", "    ", "data", "=", "RGCNBinaryDataset", "(", "dataset", ")", "\n", "data", ".", "load", "(", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.graph._sp_row_vec_from_idx_list": [[168, 175], ["numpy.ones", "numpy.zeros", "list", "scipy.csr_matrix", "len", "len"], "function", ["None"], ["", "def", "_sp_row_vec_from_idx_list", "(", "idx_list", ",", "dim", ")", ":", "\n", "    ", "\"\"\"Create sparse vector of dimensionality dim from a list of indices.\"\"\"", "\n", "shape", "=", "(", "1", ",", "dim", ")", "\n", "data", "=", "np", ".", "ones", "(", "len", "(", "idx_list", ")", ")", "\n", "row_ind", "=", "np", ".", "zeros", "(", "len", "(", "idx_list", ")", ")", "\n", "col_ind", "=", "list", "(", "idx_list", ")", "\n", "return", "sp", ".", "csr_matrix", "(", "(", "data", ",", "(", "row_ind", ",", "col_ind", ")", ")", ",", "shape", "=", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.graph._get_neighbors": [[176, 182], ["graph._sp_row_vec_from_idx_list", "_sp_row_vec_from_idx_list.dot", "set", "list", "scipy.find"], "function", ["home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.graph._sp_row_vec_from_idx_list"], ["", "def", "_get_neighbors", "(", "adj", ",", "nodes", ")", ":", "\n", "    ", "\"\"\"Takes a set of nodes and a graph adjacency matrix and returns a set of neighbors.\"\"\"", "\n", "sp_nodes", "=", "_sp_row_vec_from_idx_list", "(", "list", "(", "nodes", ")", ",", "adj", ".", "shape", "[", "1", "]", ")", "\n", "sp_neighbors", "=", "sp_nodes", ".", "dot", "(", "adj", ")", "\n", "neighbors", "=", "set", "(", "sp", ".", "find", "(", "sp_neighbors", ")", "[", "1", "]", ")", "# convert to set of indices", "\n", "return", "neighbors", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.graph._bfs_relational": [[183, 204], ["set", "set", "set", "graph._get_neighbors", "set.union", "set.add"], "function", ["home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.graph._get_neighbors"], ["", "def", "_bfs_relational", "(", "adj", ",", "roots", ")", ":", "\n", "    ", "\"\"\"\n    BFS for graphs with multiple edge types. Returns list of level sets.\n    Each entry in list corresponds to relation specified by adj_list.\n    \"\"\"", "\n", "visited", "=", "set", "(", ")", "\n", "current_lvl", "=", "set", "(", "roots", ")", "\n", "\n", "next_lvl", "=", "set", "(", ")", "\n", "\n", "while", "current_lvl", ":", "\n", "\n", "        ", "for", "v", "in", "current_lvl", ":", "\n", "            ", "visited", ".", "add", "(", "v", ")", "\n", "\n", "", "next_lvl", "=", "_get_neighbors", "(", "adj", ",", "current_lvl", ")", "\n", "next_lvl", "-=", "visited", "# set difference", "\n", "\n", "yield", "next_lvl", "\n", "\n", "current_lvl", "=", "set", ".", "union", "(", "next_lvl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.graph._load_sparse_csr": [[206, 210], ["numpy.load", "scipy.csr_matrix"], "function", ["home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.graph.RGCNBinaryDataset.load"], ["", "", "def", "_load_sparse_csr", "(", "filename", ")", ":", "\n", "    ", "loader", "=", "np", ".", "load", "(", "filename", ")", "\n", "return", "sp", ".", "csr_matrix", "(", "(", "loader", "[", "'data'", "]", ",", "loader", "[", "'indices'", "]", ",", "loader", "[", "'indptr'", "]", ")", ",", "\n", "shape", "=", "loader", "[", "'shape'", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.graph._save_sparse_csr": [[212, 215], ["numpy.savez"], "function", ["None"], ["", "def", "_save_sparse_csr", "(", "filename", ",", "array", ")", ":", "\n", "    ", "np", ".", "savez", "(", "filename", ",", "data", "=", "array", ".", "data", ",", "indices", "=", "array", ".", "indices", ",", "\n", "indptr", "=", "array", ".", "indptr", ",", "shape", "=", "array", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.graph._load_data": [[217, 253], ["print", "os.path.join", "os.path.join", "os.path.join", "pandas.read_csv", "numpy.load", "all_edges[].item", "all_edges[].item", "print", "print", "print", "graph._load_sparse_csr", "list", "print", "len", "_load_sparse_csr.nonzero"], "function", ["home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.graph.RGCNBinaryDataset.load", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.graph._load_sparse_csr"], ["", "def", "_load_data", "(", "dataset_str", "=", "'wine'", ",", "dataset_path", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n\n    :param dataset_str:\n    :param rel_layers:\n    :param limit: If > 0, will only load this many adj. matrices\n        All adjacencies are preloaded and saved to disk,\n        but only a limited a then restored to memory.\n    :return:\n    \"\"\"", "\n", "\n", "print", "(", "'Loading dataset'", ",", "dataset_str", ")", "\n", "fea_file", "=", "'node_features.csv'", "\n", "feature_file", "=", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "fea_file", ")", "# node_features: word embedding + analogy space", "\n", "edge_file", "=", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "'edges_subset.npz'", ")", "# {edges: (s, t, r) / n: num_nodes / nrel : num_rels}", "\n", "labels_file", "=", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "'labels_subset.npz'", ")", "# n * l sparse matrix", "\n", "\n", "# load node features", "\n", "node_feature", "=", "pd", ".", "read_csv", "(", "feature_file", ",", "sep", "=", "','", ",", "encoding", "=", "'utf-8'", ")", "\n", "\n", "# load precomputed adjacency matrix and labels", "\n", "all_edges", "=", "np", ".", "load", "(", "edge_file", ")", "\n", "num_node", "=", "all_edges", "[", "'n'", "]", ".", "item", "(", ")", "\n", "edge_list", "=", "all_edges", "[", "'edges'", "]", "\n", "num_rel", "=", "all_edges", "[", "'nrel'", "]", ".", "item", "(", ")", "\n", "\n", "print", "(", "'Number of nodes: '", ",", "num_node", ")", "\n", "print", "(", "'Number of edges: '", ",", "len", "(", "edge_list", ")", ")", "\n", "print", "(", "'Number of relations: '", ",", "num_rel", ")", "\n", "\n", "labels", "=", "_load_sparse_csr", "(", "labels_file", ")", "\n", "labeled_nodes_idx", "=", "list", "(", "labels", ".", "nonzero", "(", ")", "[", "0", "]", ")", "\n", "\n", "print", "(", "'Number of classes: '", ",", "labels", ".", "shape", "[", "1", "]", ")", "\n", "\n", "return", "num_node", ",", "edge_list", ",", "num_rel", ",", "labels", ",", "labeled_nodes_idx", ",", "node_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.graph._read_dictionary": [[256, 263], ["open", "line.strip().split.strip().split", "int", "line.strip().split.strip"], "function", ["None"], ["", "def", "_read_dictionary", "(", "filename", ")", ":", "\n", "    ", "d", "=", "{", "}", "\n", "with", "open", "(", "filename", ",", "'r+'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "d", "[", "line", "[", "1", "]", "]", "=", "int", "(", "line", "[", "0", "]", ")", "\n", "", "", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.graph.read_dictionary": [[265, 272], ["open", "line.strip().split.strip().split", "line.strip().split.strip", "int"], "function", ["None"], ["", "def", "read_dictionary", "(", "filename", ")", ":", "\n", "    ", "d", "=", "{", "}", "\n", "with", "open", "(", "filename", ",", "'r+'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "d", "[", "int", "(", "line", "[", "0", "]", ")", "]", "=", "line", "[", "1", "]", "\n", "", "", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.graph._read_triplets": [[273, 278], ["open", "line.strip().split", "line.strip"], "function", ["None"], ["", "def", "_read_triplets", "(", "filename", ")", ":", "\n", "    ", "with", "open", "(", "filename", ",", "'r+'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "processed_line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "yield", "processed_line", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.graph._read_triplets_as_list": [[279, 287], ["graph._read_triplets", "l.append"], "function", ["home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.graph._read_triplets"], ["", "", "", "def", "_read_triplets_as_list", "(", "filename", ",", "entity_dict", ",", "relation_dict", ")", ":", "\n", "    ", "l", "=", "[", "]", "\n", "for", "triplet", "in", "_read_triplets", "(", "filename", ")", ":", "\n", "        ", "s", "=", "entity_dict", "[", "triplet", "[", "0", "]", "]", "\n", "r", "=", "relation_dict", "[", "triplet", "[", "1", "]", "]", "\n", "o", "=", "entity_dict", "[", "triplet", "[", "2", "]", "]", "\n", "l", ".", "append", "(", "[", "s", ",", "r", ",", "o", "]", ")", "\n", "", "return", "l", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.filtering_mv._read_dictionary": [[14, 21], ["open", "line.strip().split.strip().split", "int", "line.strip().split.strip"], "function", ["None"], ["", "def", "_read_dictionary", "(", "filename", ")", ":", "\n", "    ", "d", "=", "{", "}", "\n", "with", "open", "(", "filename", ",", "'r+'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "d", "[", "line", "[", "1", "]", "]", "=", "int", "(", "line", "[", "0", "]", ")", "\n", "", "", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.pytorchtools.EarlyStopping.__init__": [[8, 28], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "patience", "=", "7", ",", "verbose", "=", "False", ",", "delta", "=", "0", ",", "path", "=", "'checkpoint.pt'", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            patience (int): How long to wait after last time validation loss improved.\n                            Default: 7\n            verbose (bool): If True, prints a message for each validation loss improvement. \n                            Default: False\n            delta (float): Minimum change in the monitored quantity to qualify as an improvement.\n                            Default: 0\n            path (str): Path for the checkpoint to be saved to.\n                            Default: 'checkpoint.pt'\n        \"\"\"", "\n", "self", ".", "patience", "=", "patience", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "counter", "=", "0", "\n", "self", ".", "best_score", "=", "None", "\n", "self", ".", "early_stop", "=", "False", "\n", "self", ".", "val_loss_min", "=", "np", ".", "Inf", "\n", "self", ".", "delta", "=", "delta", "\n", "self", ".", "path", "=", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.pytorchtools.EarlyStopping.__call__": [[29, 46], ["pytorchtools.EarlyStopping.save_checkpoint", "print", "logging.info", "pytorchtools.EarlyStopping.save_checkpoint", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.pytorchtools.EarlyStopping.save_checkpoint", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.pytorchtools.EarlyStopping.save_checkpoint"], ["", "def", "__call__", "(", "self", ",", "val_loss", ",", "model", ")", ":", "\n", "\n", "        ", "score", "=", "-", "val_loss", "\n", "\n", "if", "self", ".", "best_score", "is", "None", ":", "\n", "            ", "self", ".", "best_score", "=", "score", "\n", "self", ".", "save_checkpoint", "(", "val_loss", ",", "model", ")", "\n", "", "elif", "score", "<", "self", ".", "best_score", "+", "self", ".", "delta", ":", "\n", "            ", "self", ".", "counter", "+=", "1", "\n", "print", "(", "'EarlyStopping counter: '", "+", "str", "(", "self", ".", "counter", ")", "+", "' out of '", "+", "str", "(", "self", ".", "patience", ")", ")", "\n", "logging", ".", "info", "(", "'EarlyStopping counter: '", "+", "str", "(", "self", ".", "counter", ")", "+", "' out of '", "+", "str", "(", "self", ".", "patience", ")", ")", "\n", "if", "self", ".", "counter", ">=", "self", ".", "patience", ":", "\n", "                ", "self", ".", "early_stop", "=", "True", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "best_score", "=", "score", "\n", "self", ".", "save_checkpoint", "(", "val_loss", ",", "model", ")", "\n", "self", ".", "counter", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.pytorchtools.EarlyStopping.save_checkpoint": [[47, 57], ["isinstance", "print", "logging.info", "torch.save", "torch.save", "model.module.state_dict", "model.state_dict", "str", "str", "round", "round", "str", "str", "round", "round"], "methods", ["None"], ["", "", "def", "save_checkpoint", "(", "self", ",", "val_loss", ",", "model", ")", ":", "\n", "        ", "'''Saves model when validation loss decrease.'''", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "'Validation loss decreased ('", "+", "str", "(", "round", "(", "self", ".", "val_loss_min", ",", "5", ")", ")", "+", "'-->'", "+", "str", "(", "round", "(", "val_loss", ",", "5", ")", ")", "+", "').  Saving model ...'", ")", "\n", "logging", ".", "info", "(", "'Validation loss decreased ('", "+", "str", "(", "round", "(", "self", ".", "val_loss_min", ",", "5", ")", ")", "+", "'-->'", "+", "str", "(", "round", "(", "val_loss", ",", "5", ")", ")", "+", "').  Saving model ...'", ")", "\n", "", "if", "isinstance", "(", "model", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "            ", "torch", ".", "save", "(", "model", ".", "module", ".", "state_dict", "(", ")", ",", "self", ".", "path", ")", "\n", "", "else", ":", "\n", "            ", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "self", ".", "path", ")", "\n", "", "self", ".", "val_loss_min", "=", "val_loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.data_preprocessing.train_test_idx": [[11, 239], ["pandas.read_csv", "os.path.exists", "print", "set", "dict", "open", "open.readlines", "open.close", "open", "open.readlines", "open.close", "sorted", "numpy.array", "os.path.exists", "len", "scipy.lil_matrix", "zip", "train_labels.tocsr().todense.tocsr().todense", "pandas.read_csv", "sorted", "scipy.lil_matrix", "zip", "print", "test_labels.tocsr.tocsr", "test_labels.tocsr.tocsr", "np.array.transpose", "numpy.unique", "str", "graph._read_dictionary", "dict", "train_nodes_label[].values.tolist", "open", "open.write", "open.close", "len", "line.strip().split", "line.strip().split", "np.array.append", "graph._read_dictionary", "dict", "zip", "open", "open.write", "open.close", "len", "lab.replace().split.replace().split", "str", "list", "sorted.index", "lab.replace().split.replace().split", "numpy.where", "numpy.array", "os.path.exists", "open", "csv.writer", "csv.writer.writerow", "csv.writer.writerows", "open.close", "pandas.read_csv", "numpy.ones", "degrees.astype", "set.add", "set.add", "np.array.append", "np.array.append", "set.add", "set.add", "np.array.append", "np.array.append", "lab.replace().split.replace().split", "len", "len", "train_labels.tocsr().todense.tocsr", "sorted.append", "set", "len", "len", "len", "word_embedding.word_embedding", "len", "line.strip", "line.strip", "len", "lab.replace().split.replace", "lab.replace().split.replace", "test_labels.tocsr.toarray().sum", "sklearn.decomposition.PCA", "sklearn.decomposition.PCA.fit_transform", "lab.replace().split.replace", "str", "test_labels.tocsr.toarray", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.get_filter_emb_fold._read_dictionary", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.get_filter_emb_fold._read_dictionary", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.word_embedding"], ["def", "train_test_idx", "(", "path", ",", "fold", ",", "ftype", ",", "dim", ")", ":", "\n", "    ", "train_path", "=", "path", "+", "'train/s'", "+", "str", "(", "fold", "+", "1", ")", "\n", "train_nodes_label", "=", "pd", ".", "read_csv", "(", "train_path", "+", "'/predicate_label.tsv'", ",", "sep", "=", "'\\t'", ",", "encoding", "=", "'utf-8'", ")", "\n", "node_dict_file", "=", "train_path", "+", "'/nodes.dict'", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "node_dict_file", ")", ":", "\n", "        ", "nodes_dict", "=", "_read_dictionary", "(", "node_dict_file", ")", "\n", "", "else", ":", "\n", "# node dict", "\n", "        ", "nodes_dict", "=", "dict", "(", ")", "\n", "nodes", "=", "train_nodes_label", "[", "'nodes'", "]", ".", "values", ".", "tolist", "(", ")", "\n", "nod_id", "=", "0", "\n", "node_id", "=", "''", "\n", "for", "n", "in", "nodes", ":", "\n", "            ", "if", "n", "not", "in", "nodes_dict", ":", "\n", "                ", "nodes_dict", "[", "n", "]", "=", "nod_id", "\n", "node_id", "+=", "str", "(", "nod_id", ")", "+", "'\\t'", "+", "n", "+", "'\\n'", "\n", "nod_id", "+=", "1", "\n", "", "", "f", "=", "open", "(", "node_dict_file", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "\n", "f", ".", "write", "(", "node_id", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "", "print", "(", "'Number of training nodes: '", ",", "len", "(", "nodes_dict", ")", ")", "\n", "\n", "node_id_con", "=", "set", "(", ")", "\n", "relation_dict", "=", "dict", "(", ")", "\n", "rid", "=", "1", "# 0 for self-relation, last id + 1 for relation to node \"top\"", "\n", "edge_list", "=", "[", "]", "\n", "\n", "# uni-edges", "\n", "f", "=", "open", "(", "train_path", "+", "'/binary_template_triples_uni.txt'", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "\n", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "triple", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "if", "triple", "[", "0", "]", "in", "nodes_dict", "and", "triple", "[", "2", "]", "in", "nodes_dict", ":", "\n", "            ", "if", "triple", "[", "1", "]", "not", "in", "relation_dict", ":", "\n", "                ", "relation_dict", "[", "triple", "[", "1", "]", "]", "=", "rid", "\n", "rid", "=", "rid", "+", "1", "\n", "", "src", "=", "nodes_dict", "[", "triple", "[", "0", "]", "]", "\n", "dst", "=", "nodes_dict", "[", "triple", "[", "2", "]", "]", "\n", "node_id_con", ".", "add", "(", "src", ")", "\n", "node_id_con", ".", "add", "(", "dst", ")", "\n", "edge_list", ".", "append", "(", "(", "src", ",", "dst", ",", "relation_dict", "[", "triple", "[", "1", "]", "]", ")", ")", "\n", "edge_list", ".", "append", "(", "(", "dst", ",", "src", ",", "relation_dict", "[", "triple", "[", "1", "]", "]", ")", ")", "\n", "\n", "# print('uni-edges: ', edge_list)", "\n", "# bi-edges", "\n", "", "", "f", "=", "open", "(", "train_path", "+", "'/binary_template_triples_bi.txt'", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "\n", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "triple", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "# if triple[0] in nodes_dict and triple[2] in nodes_dict:", "\n", "if", "triple", "[", "0", "]", "in", "node_id_con", "and", "triple", "[", "2", "]", "in", "node_id_con", ":", "\n", "            ", "if", "triple", "[", "1", "]", "not", "in", "relation_dict", ":", "\n", "                ", "relation_dict", "[", "triple", "[", "1", "]", "]", "=", "rid", "\n", "rid", "=", "rid", "+", "1", "\n", "", "src", "=", "nodes_dict", "[", "triple", "[", "0", "]", "]", "\n", "dst", "=", "nodes_dict", "[", "triple", "[", "2", "]", "]", "\n", "node_id_con", ".", "add", "(", "src", ")", "\n", "node_id_con", ".", "add", "(", "dst", ")", "\n", "edge_list", ".", "append", "(", "(", "src", ",", "dst", ",", "relation_dict", "[", "triple", "[", "1", "]", "]", ")", ")", "\n", "edge_list", ".", "append", "(", "(", "dst", ",", "src", ",", "relation_dict", "[", "triple", "[", "1", "]", "]", ")", ")", "\n", "\n", "# print('uni-edges + bi-edges: ', edge_list)", "\n", "# self-connection edge", "\n", "# for n in nodes_dict:", "\n", "", "", "for", "n", "in", "node_id_con", ":", "# the graph only includes nodes with edges", "\n", "        ", "edge_list", ".", "append", "(", "(", "n", ",", "n", ",", "0", ")", ")", "\n", "\n", "# sort indices by destination", "\n", "# edge_list = sorted(edge_list, key=lambda x: (x[0], x[1], x[2]))", "\n", "# for e in np.array(edge_list, dtype=np.int):", "\n", "#     print(e)", "\n", "", "edge_list", "=", "sorted", "(", "edge_list", ",", "key", "=", "lambda", "x", ":", "(", "x", "[", "1", "]", ",", "x", "[", "0", "]", ",", "x", "[", "2", "]", ")", ")", "\n", "edge_list", "=", "np", ".", "array", "(", "edge_list", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n", "# edge to node \"top\" for nodes without related edges", "\n", "# node_id_no_edge = set(nodes_dict.values()) - node_id_con", "\n", "# if len(node_id_no_edge) > 0:", "\n", "#     num_node += 1", "\n", "#     num_rel += 1", "\n", "#     top_id = len(nodes_dict)  # top_id for the nodes \"top\"", "\n", "#     for j in node_id_no_edge:", "\n", "#         edge_list.append((j, top_id, len(relation_dict)))", "\n", "\n", "# unary templates (node labels)", "\n", "label_dict_file", "=", "train_path", "+", "'/unary_templates.dict'", "\n", "if", "os", ".", "path", ".", "exists", "(", "label_dict_file", ")", ":", "\n", "        ", "label_dict", "=", "_read_dictionary", "(", "label_dict_file", ")", "\n", "", "else", ":", "\n", "        ", "label_dict", "=", "dict", "(", ")", "\n", "l_id", "=", "0", "\n", "label_id", "=", "''", "\n", "for", "nod", ",", "lab", "in", "zip", "(", "train_nodes_label", "[", "'nodes'", "]", ".", "values", ",", "train_nodes_label", "[", "'label'", "]", ".", "values", ")", ":", "\n", "            ", "if", "nod", "not", "in", "nodes_dict", ":", "\n", "                ", "continue", "\n", "", "lab", "=", "lab", ".", "replace", "(", "',TempateExpression'", ",", "'\\tTempateExpression'", ")", ".", "split", "(", "'\\t'", ")", "\n", "if", "len", "(", "lab", ")", ">", "1", ":", "\n", "                ", "for", "l", "in", "lab", ":", "\n", "                    ", "if", "l", "not", "in", "label_dict", ":", "\n", "                        ", "label_dict", "[", "l", "]", "=", "l_id", "\n", "label_id", "+=", "str", "(", "l_id", ")", "+", "'\\t'", "+", "l", "+", "'\\n'", "\n", "l_id", "=", "l_id", "+", "1", "\n", "", "", "", "else", ":", "\n", "                ", "if", "lab", "[", "0", "]", "not", "in", "label_dict", ":", "\n", "                    ", "label_dict", "[", "lab", "[", "0", "]", "]", "=", "l_id", "\n", "label_id", "+=", "str", "(", "l_id", ")", "+", "'\\t'", "+", "lab", "[", "0", "]", "+", "'\\n'", "\n", "l_id", "=", "l_id", "+", "1", "\n", "", "", "", "f", "=", "open", "(", "label_dict_file", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "\n", "f", ".", "write", "(", "label_id", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "", "num_node", "=", "len", "(", "nodes_dict", ")", "\n", "num_rel", "=", "len", "(", "relation_dict", ")", "+", "1", "\n", "train_labels", "=", "sp", ".", "lil_matrix", "(", "(", "num_node", ",", "len", "(", "label_dict", ")", ")", ")", "\n", "for", "nod", ",", "lab", "in", "zip", "(", "train_nodes_label", "[", "'nodes'", "]", ".", "values", ",", "train_nodes_label", "[", "'label'", "]", ".", "values", ")", ":", "\n", "        ", "if", "nod", "not", "in", "nodes_dict", ":", "\n", "            ", "continue", "\n", "", "nod_id", "=", "nodes_dict", "[", "nod", "]", "\n", "lab", "=", "lab", ".", "replace", "(", "',TempateExpression'", ",", "'\\tTempateExpression'", ")", ".", "split", "(", "'\\t'", ")", "\n", "if", "len", "(", "lab", ")", ">", "1", ":", "\n", "            ", "for", "l", "in", "lab", ":", "\n", "                ", "lab_id", "=", "label_dict", "[", "l", "]", "\n", "train_labels", "[", "nod_id", ",", "lab_id", "]", "=", "1", "\n", "", "", "else", ":", "\n", "            ", "lab_id", "=", "label_dict", "[", "lab", "[", "0", "]", "]", "\n", "train_labels", "[", "nod_id", ",", "lab_id", "]", "=", "1", "\n", "\n", "# for n in node_id_no_edge:", "\n", "#     train_labels[n, len(label_dict)] = 1", "\n", "\n", "", "", "train_labels", "=", "train_labels", ".", "tocsr", "(", ")", ".", "todense", "(", ")", "\n", "\n", "test_path", "=", "path", "+", "'test/s'", "+", "str", "(", "fold", "+", "1", ")", "\n", "test_nodes_label", "=", "pd", ".", "read_csv", "(", "test_path", "+", "'/predicate_label.tsv'", ",", "sep", "=", "'\\t'", ",", "encoding", "=", "'utf-8'", ")", "\n", "test_nodes", "=", "test_nodes_label", "[", "'nodes'", "]", "\n", "test_idx", "=", "[", "]", "\n", "for", "n", "in", "test_nodes", ":", "\n", "        ", "if", "n", "in", "nodes_dict", "and", "nodes_dict", "[", "n", "]", "in", "node_id_con", ":", "\n", "            ", "test_idx", ".", "append", "(", "nodes_dict", "[", "n", "]", ")", "\n", "", "", "test_idx", "=", "sorted", "(", "list", "(", "set", "(", "test_idx", ")", ")", ")", "\n", "\n", "test_labels", "=", "sp", ".", "lil_matrix", "(", "(", "len", "(", "test_idx", ")", ",", "len", "(", "label_dict", ")", ")", ")", "\n", "i", "=", "0", "\n", "for", "nod", ",", "lab", "in", "zip", "(", "test_nodes_label", "[", "'nodes'", "]", ".", "values", ",", "test_nodes_label", "[", "'label'", "]", ".", "values", ")", ":", "\n", "        ", "if", "nod", "not", "in", "nodes_dict", ":", "\n", "            ", "i", "+=", "1", "\n", "continue", "\n", "", "n_id", "=", "nodes_dict", "[", "nod", "]", "\n", "if", "n_id", "not", "in", "test_idx", ":", "\n", "            ", "i", "+=", "1", "\n", "continue", "\n", "", "j", "=", "test_idx", ".", "index", "(", "n_id", ")", "\n", "lab", "=", "lab", ".", "replace", "(", "',TempateExpression'", ",", "'\\tTempateExpression'", ")", ".", "split", "(", "'\\t'", ")", "\n", "if", "len", "(", "lab", ")", ">", "1", ":", "\n", "            ", "for", "l", "in", "lab", ":", "\n", "                ", "if", "l", "in", "label_dict", ":", "\n", "                    ", "lab_id", "=", "label_dict", "[", "l", "]", "\n", "test_labels", "[", "j", ",", "lab_id", "]", "=", "1", "\n", "# print(test_idx, nodes_dict[nod], j, test_labels[j])", "\n", "", "", "", "else", ":", "\n", "            ", "if", "lab", "[", "0", "]", "in", "label_dict", ":", "\n", "                ", "lab_id", "=", "label_dict", "[", "lab", "[", "0", "]", "]", "\n", "test_labels", "[", "j", ",", "lab_id", "]", "=", "1", "\n", "", "", "", "print", "(", "i", ",", "'test nodes not in training set'", ")", "\n", "\n", "test_labels", "=", "test_labels", ".", "tocsr", "(", ")", "\n", "\n", "## remove nodes that all the labels are 0", "\n", "idx", "=", "np", ".", "where", "(", "test_labels", ".", "toarray", "(", ")", ".", "sum", "(", "axis", "=", "1", ")", ">", "0", ")", "[", "0", "]", "\n", "test_labels", "=", "test_labels", "[", "idx", "]", "\n", "test_idx", "=", "np", ".", "array", "(", "test_idx", ")", "[", "idx", "]", "\n", "test_labels", "=", "test_labels", ".", "tocsr", "(", ")", "\n", "# print(test_labels.shape)", "\n", "\n", "# for i in range(len(test_idx)):", "\n", "#     print(test_idx[i], np.where(test_labels.toarray()[i]>0)[0])", "\n", "\n", "\n", "if", "ftype", "==", "'embedding'", ":", "\n", "        ", "feature_file", "=", "train_path", "+", "'/em_features.csv'", "\n", "", "elif", "ftype", "==", "'analogy'", ":", "\n", "        ", "feature_file", "=", "train_path", "+", "'/an_features_'", "+", "str", "(", "dim", ")", "+", "'.csv'", "\n", "", "elif", "ftype", "==", "'mv_mask'", ":", "\n", "        ", "feature_file", "=", "train_path", "+", "'/mask_avg_mv_features.csv'", "\n", "", "elif", "ftype", "==", "'mv_nomask'", ":", "\n", "        ", "feature_file", "=", "train_path", "+", "'/nomask_avg_mv_features.csv'", "\n", "", "elif", "ftype", "==", "'static'", ":", "\n", "        ", "feature_file", "=", "train_path", "+", "'/bert_static_features.csv'", "\n", "", "elif", "ftype", "==", "'rosv_mask'", ":", "\n", "        ", "feature_file", "=", "train_path", "+", "'/rosv_mask_avg_mv_features_'", "+", "str", "(", "dim", ")", "+", "'.csv'", "\n", "", "elif", "ftype", "==", "'rosv_nomask'", ":", "\n", "        ", "feature_file", "=", "train_path", "+", "'/rosv_nomask_avg_mv_features_'", "+", "str", "(", "dim", ")", "+", "'.csv'", "\n", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "feature_file", ")", ":", "\n", "        ", "if", "ftype", "==", "'embedding'", ":", "\n", "            ", "embedding_file", "=", "'dataset/GoogleNews-vectors-negative300.bin.gz'", "\n", "node_features", "=", "word_embedding", "(", "embedding_file", ",", "nodes_dict", ")", "\n", "", "elif", "ftype", "==", "'analogy'", ":", "\n", "            ", "pca", "=", "PCA", "(", "n_components", "=", "dim", ")", "\n", "node_features", "=", "pca", ".", "fit_transform", "(", "train_labels", ")", "\n", "", "f", "=", "open", "(", "feature_file", ",", "'w'", ",", "encoding", "=", "'utf-8'", ",", "newline", "=", "''", ")", "\n", "writer", "=", "csv", ".", "writer", "(", "f", ")", "\n", "writer", ".", "writerow", "(", "node_features", "[", "0", "]", ")", "\n", "writer", ".", "writerows", "(", "node_features", ")", "\n", "f", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "        ", "node_features", "=", "pd", ".", "read_csv", "(", "feature_file", ",", "sep", "=", "','", ",", "encoding", "=", "'utf-8'", ")", "\n", "\n", "# tmp = np.zeros((1, node_features.shape[1]))", "\n", "# tmp[0,-1] = 1", "\n", "# node_features = np.row_stack((node_features, tmp))", "\n", "# print(node_features)", "\n", "\n", "", "edge_src", ",", "edge_dst", ",", "edge_type", "=", "edge_list", ".", "transpose", "(", ")", "\n", "_", ",", "inverse_index", ",", "count", "=", "np", ".", "unique", "(", "(", "edge_dst", ",", "edge_type", ")", ",", "axis", "=", "1", ",", "return_inverse", "=", "True", ",", "\n", "return_counts", "=", "True", ")", "\n", "degrees", "=", "count", "[", "inverse_index", "]", "# c_{i,r} for each relation type", "\n", "edge_norm", "=", "np", ".", "ones", "(", "len", "(", "edge_dst", ")", ",", "dtype", "=", "np", ".", "float32", ")", "/", "degrees", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# for i in range(len(train_labels)):", "\n", "#     print(i, np.where(train_labels[i]>0)[1])", "\n", "return", "num_node", ",", "edge_list", ",", "edge_src", ",", "edge_dst", ",", "edge_type", ",", "edge_norm", ",", "num_rel", ",", "node_id_con", ",", "test_idx", ",", "train_labels", ",", "test_labels", ",", "node_features", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.data_preprocessing.load_whole_data": [[241, 420], ["pandas.read_csv", "pandas.read_csv", "pandas.concat", "os.path.exists", "print", "set", "dict", "open", "open.readlines", "open.close", "open", "open.readlines", "open.close", "open", "open.readlines", "open.close", "open", "open.readlines", "open.close", "sorted", "numpy.array", "os.path.exists", "len", "scipy.lil_matrix", "zip", "labels.tocsr().todense.tocsr().todense", "np.array.transpose", "numpy.unique", "graph._read_dictionary", "dict", "nodes_label[].values.tolist", "open", "open.write", "open.close", "len", "line.strip().split", "line.strip().split", "line.strip().split", "line.strip().split", "np.array.append", "graph._read_dictionary", "dict", "open", "open.write", "open.close", "len", "lab.replace().split.replace().split", "os.path.exists", "open", "csv.writer", "csv.writer.writerow", "csv.writer.writerows", "open.close", "pandas.read_csv", "numpy.ones", "degrees.astype", "set.add", "set.add", "np.array.append", "set.add", "set.add", "np.array.append", "np.array.append", "set.add", "set.add", "np.array.append", "set.add", "set.add", "np.array.append", "np.array.append", "lab.replace().split.replace().split", "len", "len", "labels.tocsr().todense.tocsr", "word_embedding.word_embedding", "len", "line.strip", "line.strip", "line.strip", "line.strip", "len", "lab.replace().split.replace", "sklearn.decomposition.PCA", "sklearn.decomposition.PCA.fit_transform", "lab.replace().split.replace", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.get_filter_emb_fold._read_dictionary", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.get_filter_emb_fold._read_dictionary", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.word_embedding"], ["", "def", "load_whole_data", "(", "path", ",", "ftype", ",", "dim", ")", ":", "\n", "    ", "train_path", "=", "path", "+", "'train/s1'", "\n", "test_path", "=", "path", "+", "'test/s1'", "\n", "train_nodes_label", "=", "pd", ".", "read_csv", "(", "train_path", "+", "'/predicate_label.tsv'", ",", "sep", "=", "'\\t'", ",", "encoding", "=", "'utf-8'", ")", "\n", "test_nodes_label", "=", "pd", ".", "read_csv", "(", "test_path", "+", "'/predicate_label.tsv'", ",", "sep", "=", "'\\t'", ",", "encoding", "=", "'utf-8'", ")", "\n", "nodes_label", "=", "pd", ".", "concat", "(", "[", "train_nodes_label", ",", "test_nodes_label", "]", ")", "# all nodes", "\n", "node_dict_file", "=", "train_path", "+", "'/all_nodes.dict'", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "node_dict_file", ")", ":", "\n", "        ", "nodes_dict", "=", "_read_dictionary", "(", "node_dict_file", ")", "\n", "", "else", ":", "\n", "# node dict", "\n", "        ", "nodes_dict", "=", "dict", "(", ")", "\n", "nodes", "=", "nodes_label", "[", "'nodes'", "]", ".", "values", ".", "tolist", "(", ")", "\n", "nod_id", "=", "0", "\n", "node_id", "=", "''", "\n", "for", "n", "in", "nodes", ":", "\n", "            ", "if", "n", "not", "in", "nodes_dict", ":", "\n", "                ", "nodes_dict", "[", "n", "]", "=", "nod_id", "\n", "node_id", "+=", "str", "(", "nod_id", ")", "+", "'\\t'", "+", "n", "+", "'\\n'", "\n", "nod_id", "+=", "1", "\n", "", "", "f", "=", "open", "(", "node_dict_file", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "\n", "f", ".", "write", "(", "node_id", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "", "print", "(", "'Number of training nodes: '", ",", "len", "(", "nodes_dict", ")", ")", "\n", "\n", "node_id_con", "=", "set", "(", ")", "# nodes connected with others", "\n", "relation_dict", "=", "dict", "(", ")", "\n", "rid", "=", "1", "# 0 for self-relation", "\n", "edge_list", "=", "[", "]", "\n", "\n", "# uni-edges for train data", "\n", "f", "=", "open", "(", "train_path", "+", "'/binary_template_triples_uni.txt'", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "\n", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "triple", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "if", "triple", "[", "0", "]", "in", "nodes_dict", "and", "triple", "[", "2", "]", "in", "nodes_dict", ":", "\n", "            ", "if", "triple", "[", "1", "]", "not", "in", "relation_dict", ":", "\n", "                ", "relation_dict", "[", "triple", "[", "1", "]", "]", "=", "rid", "\n", "rid", "=", "rid", "+", "1", "\n", "", "src", "=", "nodes_dict", "[", "triple", "[", "0", "]", "]", "\n", "dst", "=", "nodes_dict", "[", "triple", "[", "2", "]", "]", "\n", "node_id_con", ".", "add", "(", "src", ")", "\n", "node_id_con", ".", "add", "(", "dst", ")", "\n", "edge_list", ".", "append", "(", "(", "src", ",", "dst", ",", "relation_dict", "[", "triple", "[", "1", "]", "]", ")", ")", "\n", "\n", "# bi-edges for train data", "\n", "", "", "f", "=", "open", "(", "train_path", "+", "'/binary_template_triples_bi.txt'", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "\n", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "triple", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "if", "triple", "[", "0", "]", "in", "nodes_dict", "and", "triple", "[", "2", "]", "in", "nodes_dict", ":", "\n", "            ", "if", "triple", "[", "1", "]", "not", "in", "relation_dict", ":", "\n", "                ", "relation_dict", "[", "triple", "[", "1", "]", "]", "=", "rid", "\n", "rid", "=", "rid", "+", "1", "\n", "", "src", "=", "nodes_dict", "[", "triple", "[", "0", "]", "]", "\n", "dst", "=", "nodes_dict", "[", "triple", "[", "2", "]", "]", "\n", "node_id_con", ".", "add", "(", "src", ")", "\n", "node_id_con", ".", "add", "(", "dst", ")", "\n", "edge_list", ".", "append", "(", "(", "src", ",", "dst", ",", "relation_dict", "[", "triple", "[", "1", "]", "]", ")", ")", "\n", "edge_list", ".", "append", "(", "(", "dst", ",", "src", ",", "relation_dict", "[", "triple", "[", "1", "]", "]", ")", ")", "\n", "\n", "# uni-edges for test data", "\n", "", "", "f", "=", "open", "(", "test_path", "+", "'/binary_template_triples_uni.txt'", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "\n", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "triple", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "if", "triple", "[", "0", "]", "in", "nodes_dict", "and", "triple", "[", "2", "]", "in", "nodes_dict", ":", "\n", "            ", "if", "triple", "[", "1", "]", "not", "in", "relation_dict", ":", "\n", "                ", "relation_dict", "[", "triple", "[", "1", "]", "]", "=", "rid", "\n", "rid", "=", "rid", "+", "1", "\n", "", "src", "=", "nodes_dict", "[", "triple", "[", "0", "]", "]", "\n", "dst", "=", "nodes_dict", "[", "triple", "[", "2", "]", "]", "\n", "node_id_con", ".", "add", "(", "src", ")", "\n", "node_id_con", ".", "add", "(", "dst", ")", "\n", "edge_list", ".", "append", "(", "(", "src", ",", "dst", ",", "relation_dict", "[", "triple", "[", "1", "]", "]", ")", ")", "\n", "\n", "# bi-edges for test data", "\n", "", "", "f", "=", "open", "(", "test_path", "+", "'/binary_template_triples_bi.txt'", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "\n", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "triple", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "if", "triple", "[", "0", "]", "in", "nodes_dict", "and", "triple", "[", "2", "]", "in", "nodes_dict", ":", "\n", "            ", "if", "triple", "[", "1", "]", "not", "in", "relation_dict", ":", "\n", "                ", "relation_dict", "[", "triple", "[", "1", "]", "]", "=", "rid", "\n", "rid", "=", "rid", "+", "1", "\n", "", "src", "=", "nodes_dict", "[", "triple", "[", "0", "]", "]", "\n", "dst", "=", "nodes_dict", "[", "triple", "[", "2", "]", "]", "\n", "node_id_con", ".", "add", "(", "src", ")", "\n", "node_id_con", ".", "add", "(", "dst", ")", "\n", "edge_list", ".", "append", "(", "(", "src", ",", "dst", ",", "relation_dict", "[", "triple", "[", "1", "]", "]", ")", ")", "\n", "edge_list", ".", "append", "(", "(", "dst", ",", "src", ",", "relation_dict", "[", "triple", "[", "1", "]", "]", ")", ")", "\n", "\n", "# self-connection edge", "\n", "", "", "for", "n", "in", "node_id_con", ":", "# the graph only includes nodes with edges", "\n", "        ", "edge_list", ".", "append", "(", "(", "n", ",", "n", ",", "0", ")", ")", "\n", "\n", "", "edge_list", "=", "sorted", "(", "edge_list", ",", "key", "=", "lambda", "x", ":", "(", "x", "[", "1", "]", ",", "x", "[", "0", "]", ",", "x", "[", "2", "]", ")", ")", "\n", "edge_list", "=", "np", ".", "array", "(", "edge_list", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n", "# unary templates (node labels)", "\n", "label_dict_file", "=", "train_path", "+", "'/all_unary_templates.dict'", "\n", "if", "os", ".", "path", ".", "exists", "(", "label_dict_file", ")", ":", "\n", "        ", "label_dict", "=", "_read_dictionary", "(", "label_dict_file", ")", "\n", "", "else", ":", "\n", "        ", "label_dict", "=", "dict", "(", ")", "\n", "l_id", "=", "0", "\n", "label_id", "=", "''", "\n", "for", "lab", "in", "nodes_label", "[", "'label'", "]", ".", "values", ":", "\n", "            ", "lab", "=", "lab", ".", "replace", "(", "',TempateExpression'", ",", "'\\tTempateExpression'", ")", ".", "split", "(", "'\\t'", ")", "\n", "if", "len", "(", "lab", ")", ">", "1", ":", "\n", "                ", "for", "l", "in", "lab", ":", "\n", "                    ", "if", "l", "not", "in", "label_dict", ":", "\n", "                        ", "label_dict", "[", "l", "]", "=", "l_id", "\n", "label_id", "+=", "str", "(", "l_id", ")", "+", "'\\t'", "+", "l", "+", "'\\n'", "\n", "l_id", "=", "l_id", "+", "1", "\n", "", "", "", "else", ":", "\n", "                ", "if", "lab", "[", "0", "]", "not", "in", "label_dict", ":", "\n", "                    ", "label_dict", "[", "lab", "[", "0", "]", "]", "=", "l_id", "\n", "label_id", "+=", "str", "(", "l_id", ")", "+", "'\\t'", "+", "lab", "[", "0", "]", "+", "'\\n'", "\n", "l_id", "=", "l_id", "+", "1", "\n", "", "", "", "f", "=", "open", "(", "label_dict_file", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "\n", "f", ".", "write", "(", "label_id", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "", "num_node", "=", "len", "(", "nodes_dict", ")", "\n", "num_rel", "=", "len", "(", "relation_dict", ")", "+", "1", "\n", "labels", "=", "sp", ".", "lil_matrix", "(", "(", "num_node", ",", "len", "(", "label_dict", ")", ")", ")", "\n", "for", "nod", ",", "lab", "in", "zip", "(", "nodes_label", "[", "'nodes'", "]", ".", "values", ",", "nodes_label", "[", "'label'", "]", ".", "values", ")", ":", "\n", "        ", "if", "nod", "not", "in", "nodes_dict", ":", "\n", "            ", "continue", "\n", "", "nod_id", "=", "nodes_dict", "[", "nod", "]", "\n", "lab", "=", "lab", ".", "replace", "(", "',TempateExpression'", ",", "'\\tTempateExpression'", ")", ".", "split", "(", "'\\t'", ")", "\n", "if", "len", "(", "lab", ")", ">", "1", ":", "\n", "            ", "for", "l", "in", "lab", ":", "\n", "                ", "lab_id", "=", "label_dict", "[", "l", "]", "\n", "labels", "[", "nod_id", ",", "lab_id", "]", "=", "1", "\n", "", "", "else", ":", "\n", "            ", "lab_id", "=", "label_dict", "[", "lab", "[", "0", "]", "]", "\n", "labels", "[", "nod_id", ",", "lab_id", "]", "=", "1", "\n", "\n", "", "", "labels", "=", "labels", ".", "tocsr", "(", ")", ".", "todense", "(", ")", "\n", "\n", "if", "ftype", "==", "'embedding'", ":", "\n", "        ", "feature_file", "=", "train_path", "+", "'/all_em_features.csv'", "\n", "", "elif", "ftype", "==", "'analogy'", ":", "\n", "        ", "feature_file", "=", "train_path", "+", "'/all_an_features_'", "+", "str", "(", "dim", ")", "+", "'.csv'", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "feature_file", ")", ":", "\n", "        ", "if", "ftype", "==", "'embedding'", ":", "\n", "            ", "embedding_file", "=", "'dataset/GoogleNews-vectors-negative300.bin.gz'", "\n", "node_features", "=", "word_embedding", "(", "embedding_file", ",", "nodes_dict", ")", "\n", "", "elif", "ftype", "==", "'analogy'", ":", "\n", "            ", "pca", "=", "PCA", "(", "n_components", "=", "dim", ")", "\n", "node_features", "=", "pca", ".", "fit_transform", "(", "labels", ")", "\n", "", "f", "=", "open", "(", "feature_file", ",", "'w'", ",", "encoding", "=", "'utf-8'", ",", "newline", "=", "''", ")", "\n", "writer", "=", "csv", ".", "writer", "(", "f", ")", "\n", "writer", ".", "writerow", "(", "node_features", "[", "0", "]", ")", "\n", "writer", ".", "writerows", "(", "node_features", ")", "\n", "f", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "        ", "node_features", "=", "pd", ".", "read_csv", "(", "feature_file", ",", "sep", "=", "','", ",", "encoding", "=", "'utf-8'", ")", "\n", "\n", "", "edge_src", ",", "edge_dst", ",", "edge_type", "=", "edge_list", ".", "transpose", "(", ")", "\n", "_", ",", "inverse_index", ",", "count", "=", "np", ".", "unique", "(", "(", "edge_dst", ",", "edge_type", ")", ",", "axis", "=", "1", ",", "return_inverse", "=", "True", ",", "\n", "return_counts", "=", "True", ")", "\n", "degrees", "=", "count", "[", "inverse_index", "]", "# c_{i,r} for each relation type", "\n", "edge_norm", "=", "np", ".", "ones", "(", "len", "(", "edge_dst", ")", ",", "dtype", "=", "np", ".", "float32", ")", "/", "degrees", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "return", "num_node", ",", "edge_list", ",", "edge_src", ",", "edge_dst", ",", "edge_type", ",", "edge_norm", ",", "num_rel", ",", "node_id_con", ",", "labels", ",", "node_features", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.unary_classify.UnaryClassify.create_features": [[19, 24], ["torch.arange", "features.to.to.to"], "methods", ["None"], ["    ", "def", "create_features", "(", "self", ")", ":", "\n", "        ", "features", "=", "torch", ".", "arange", "(", "self", ".", "in_feat", ")", "\n", "if", "self", ".", "use_cuda", ":", "\n", "            ", "features", "=", "features", ".", "to", "(", "'cuda'", ")", "\n", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.unary_classify.UnaryClassify.build_input_layer": [[25, 28], ["layers.RGCNBasisLayer"], "methods", ["None"], ["", "def", "build_input_layer", "(", "self", ")", ":", "\n", "        ", "return", "RGCNLayer", "(", "self", ".", "in_feat", ",", "self", ".", "h_dim", ",", "self", ".", "num_rels", ",", "self", ".", "num_bases", ",", "\n", "activation", "=", "F", ".", "relu", ",", "is_input_layer", "=", "True", ",", "node_features", "=", "self", ".", "features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.unary_classify.UnaryClassify.build_hidden_layer": [[29, 32], ["layers.RGCNBasisLayer"], "methods", ["None"], ["", "def", "build_hidden_layer", "(", "self", ")", ":", "\n", "        ", "return", "RGCNLayer", "(", "self", ".", "h_dim", ",", "self", ".", "h_dim", ",", "self", ".", "num_rels", ",", "self", ".", "num_bases", ",", "dropout", "=", "self", ".", "dropout", ",", "\n", "activation", "=", "F", ".", "relu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.unary_classify.UnaryClassify.build_output_layer": [[33, 36], ["layers.RGCNBasisLayer"], "methods", ["None"], ["", "def", "build_output_layer", "(", "self", ")", ":", "\n", "        ", "return", "RGCNLayer", "(", "self", ".", "h_dim", ",", "self", ".", "out_dim", ",", "self", ".", "num_rels", ",", "self", ".", "num_bases", ",", "\n", "activation", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.unary_classify.similar_loss": [[39, 58], ["utils.find_same_etype", "len", "g.in_edges", "g.out_edges", "itertools.combinations", "torch.norm"], "function", ["home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.utils.find_same_etype"], ["", "", "def", "similar_loss", "(", "g", ",", "node_idx", ",", "logits", ",", "direction", "=", "'in'", ")", ":", "\n", "    ", "all_loss", "=", "0", "\n", "for", "i", "in", "node_idx", ":", "\n", "        ", "if", "direction", "==", "'in'", ":", "\n", "            ", "u", ",", "_", ",", "eid", "=", "g", ".", "in_edges", "(", "i", ",", "'all'", ")", "\n", "", "else", ":", "\n", "            ", "_", ",", "u", ",", "eid", "=", "g", ".", "out_edges", "(", "i", ",", "'all'", ")", "\n", "", "etype", "=", "g", ".", "edata", "[", "'type'", "]", "[", "eid", "]", "\n", "loss", "=", "0", "\n", "for", "idx", "in", "find_same_etype", "(", "etype", ")", ":", "\n", "            ", "sm_nodes", "=", "u", "[", "idx", "[", "1", "]", "]", "\n", "cnt", "=", "0", "\n", "l", "=", "0", "\n", "for", "n1", ",", "n2", "in", "combinations", "(", "sm_nodes", ",", "2", ")", ":", "\n", "                ", "cnt", "+=", "1", "\n", "l", "+=", "torch", ".", "norm", "(", "logits", "[", "n1", "]", "-", "logits", "[", "n2", "]", ",", "1", ")", "\n", "", "loss", "=", "l", "/", "cnt", "\n", "", "all_loss", "+=", "loss", "\n", "", "return", "all_loss", "/", "len", "(", "node_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.unary_classify.main": [[60, 228], ["utils.init_logging_path", "logging.basicConfig", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "range", "np.mean", "print", "open", "open.write", "open.close", "open", "open.write", "open.close", "open", "open.write", "open.close", "str", "logging.info", "data_preprocessing.train_test_idx", "list", "torch.from_numpy().long", "torch.from_numpy().unsqueeze", "torch.from_numpy().float", "dgl.DGLGraph", "g.to.add_nodes", "g.to.add_edges", "g.to.edata.update", "g.to.in_degrees().float().cpu().numpy", "torch.from_numpy", "g.to.ndata.update", "torch.from_numpy().float", "torch.from_numpy().float", "unary_classify.UnaryClassify", "torch.optim.Adam", "torch.nn.BCEWithLogitsLoss", "pytorchtools.EarlyStopping", "logging.info", "UnaryClassify.train", "range", "UnaryClassify.load_state_dict", "UnaryClassify.eval", "UnaryClassify.forward().cpu", "torch.sigmoid", "utils._select_threshold", "np.zeros", "utils.find_rules_ut", "utils.find_rules_ut", "utils.metrics", "result.append", "print", "np.array", "np.where", "torch.cuda.is_available", "edge_type.to.to", "edge_norm.to.to", "node_features.to.to", "g.to.to", "node_norm.to.to", "UnaryClassify.to", "torch.from_numpy().float.to", "torch.from_numpy().float.to", "UnaryClassify.parameters", "len", "sorted", "sorted", "torch.optim.Adam.zero_grad", "UnaryClassify.forward", "unary_classify.similar_loss", "unary_classify.similar_loss", "torch.nn.BCEWithLogitsLoss.", "loss.backward", "torch.nn.utils.clip_grad_norm_", "torch.optim.Adam.step", "UnaryClassify.eval", "unary_classify.similar_loss", "unary_classify.similar_loss", "torch.nn.BCEWithLogitsLoss.", "logging.info", "UnaryClassify.train", "pytorchtools.EarlyStopping.", "torch.load", "val_labels.cpu", "logits[].detach().cpu().numpy", "torch.from_numpy().float.cpu", "set", "set", "str", "str", "str", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "g.to.in_degrees().float().cpu", "np.isinf", "torch.from_numpy", "torch.from_numpy", "os.listdir", "str", "random.sample", "list", "logits[].cpu", "torch.from_numpy().float.cpu", "UnaryClassify.parameters", "logits[].cpu", "val_labels.cpu", "val_loss.item", "print", "UnaryClassify.forward", "np.where", "str", "str", "str", "str", "torch.from_numpy().float.sum", "np.array", "np.array", "torch.from_numpy().float.toarray", "list", "str", "logits[].detach().cpu", "g.to.in_degrees().float", "set", "set", "round", "logits[].detach().cpu().numpy", "str", "val_loss.item", "logits[].detach", "g.to.in_degrees", "str", "round", "logits[].detach().cpu", "range", "loss.item", "g.to.number_of_nodes", "logits[].detach"], "function", ["home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.init_logging_path", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.data_preprocessing.train_test_idx", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.utils._select_threshold", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.utils.find_rules_ut", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.utils.find_rules_ut", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.utils.metrics", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.model.BaseRGCN.forward", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.unary_classify_rosv.similar_loss", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.unary_classify_rosv.similar_loss", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.unary_classify_rosv.similar_loss", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.unary_classify_rosv.similar_loss", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.graph.RGCNBinaryDataset.load", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.model.BaseRGCN.forward"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "log_file_path", "=", "init_logging_path", "(", "'log'", ",", "'ut'", ",", "args", ".", "dataset", ")", "\n", "logging", ".", "basicConfig", "(", "filename", "=", "log_file_path", ",", "\n", "level", "=", "10", ",", "\n", "format", "=", "'%(asctime)s %(levelname)s %(message)s'", ",", "\n", "datefmt", "=", "'%m/%d/%Y %I:%M:%S %p'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "'result/'", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "'result/'", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "'rules/'", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "'rules/'", ")", "\n", "\n", "", "if", "args", ".", "dataset", "==", "'sumo'", ":", "\n", "        ", "folds", "=", "[", "3", "]", "\n", "", "else", ":", "\n", "        ", "folds", "=", "[", "10", "]", "\n", "", "for", "fold", "in", "folds", ":", "\n", "        ", "result", "=", "[", "]", "\n", "sigma", "=", "args", ".", "sigma", "\n", "beta", "=", "args", ".", "beta", "\n", "output", "=", "str", "(", "args", ")", "+", "'\\n'", "\n", "true_rules_out", "=", "''", "\n", "pred_rules_out", "=", "''", "\n", "for", "i", "in", "range", "(", "fold", ")", ":", "\n", "            ", "logging", ".", "info", "(", "\"fold \"", "+", "str", "(", "i", "+", "1", ")", ")", "\n", "path", "=", "'dataset/'", "+", "args", ".", "dataset", "+", "'/'", "+", "str", "(", "fold", ")", "+", "'_fold'", "+", "'/'", "\n", "num_node", ",", "edge_list", ",", "edge_src", ",", "edge_dst", ",", "edge_type", ",", "edge_norm", ",", "num_rel", ",", "train_idx", ",", "test_idx", ",", "train_label", ",", "test_label", ",", "node_features", "=", "train_test_idx", "(", "path", ",", "i", ",", "args", ".", "ftype", ",", "1024", ")", "\n", "\n", "tmp_label", "=", "train_label", "\n", "train_idx", "=", "list", "(", "train_idx", ")", "\n", "test_template_id", "=", "np", ".", "where", "(", "test_label", ".", "sum", "(", "axis", "=", "0", ")", ">", "0", ")", "[", "1", "]", "\n", "\n", "if", "test_label", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                ", "continue", "\n", "", "edge_type", "=", "torch", ".", "from_numpy", "(", "edge_type", ")", ".", "long", "(", ")", "\n", "edge_norm", "=", "torch", ".", "from_numpy", "(", "edge_norm", ")", ".", "unsqueeze", "(", "1", ")", "\n", "node_features", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "node_features", ")", ")", ".", "float", "(", ")", "\n", "\n", "# check cuda", "\n", "use_cuda", "=", "args", ".", "gpu", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "if", "use_cuda", ":", "\n", "#torch.cuda.set_device('gpu')", "\n", "                ", "edge_type", "=", "edge_type", ".", "to", "(", "'cuda'", ")", "\n", "edge_norm", "=", "edge_norm", ".", "to", "(", "'cuda'", ")", "\n", "node_features", "=", "node_features", ".", "to", "(", "'cuda'", ")", "\n", "\n", "# create multi-graph", "\n", "", "g", "=", "DGLGraph", "(", "multigraph", "=", "True", ")", "\n", "g", ".", "add_nodes", "(", "num_node", ")", "\n", "g", ".", "add_edges", "(", "edge_src", ",", "edge_dst", ")", "\n", "if", "use_cuda", ":", "\n", "                ", "g", "=", "g", ".", "to", "(", "'cuda'", ")", "\n", "", "g", ".", "edata", ".", "update", "(", "{", "'type'", ":", "edge_type", ",", "'norm'", ":", "edge_norm", "}", ")", "\n", "\n", "# node_norm for apply_func", "\n", "in_deg", "=", "g", ".", "in_degrees", "(", "range", "(", "g", ".", "number_of_nodes", "(", ")", ")", ")", ".", "float", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "norm", "=", "1.0", "/", "in_deg", "\n", "norm", "[", "np", ".", "isinf", "(", "norm", ")", "]", "=", "0", "\n", "node_norm", "=", "torch", ".", "from_numpy", "(", "norm", ")", "\n", "if", "use_cuda", ":", "\n", "                ", "node_norm", "=", "node_norm", ".", "to", "(", "'cuda'", ")", "\n", "", "g", ".", "ndata", ".", "update", "(", "{", "'norm'", ":", "node_norm", "}", ")", "\n", "\n", "in_feat", "=", "node_features", ".", "shape", "[", "1", "]", "\n", "num_classes", "=", "train_label", ".", "shape", "[", "1", "]", "\n", "\n", "train_label", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "train_label", ")", ")", ".", "float", "(", ")", "\n", "test_label", "=", "torch", ".", "from_numpy", "(", "test_label", ".", "toarray", "(", ")", ")", ".", "float", "(", ")", "\n", "# create model", "\n", "model", "=", "UnaryClassify", "(", "in_feat", ",", "\n", "args", ".", "n_hidden", ",", "\n", "num_classes", ",", "\n", "num_rel", ",", "\n", "num_bases", "=", "args", ".", "n_bases", ",", "\n", "num_hidden_layers", "=", "args", ".", "n_layers", "-", "2", ",", "\n", "dropout", "=", "args", ".", "dropout", ",", "\n", "use_cuda", "=", "use_cuda", ",", "\n", "features", "=", "node_features", ")", "\n", "if", "use_cuda", ":", "\n", "                ", "model", ".", "to", "(", "'cuda'", ")", "\n", "train_label", ".", "to", "(", "'cuda'", ")", "\n", "test_label", ".", "to", "(", "'cuda'", ")", "\n", "\n", "\n", "# optimizer", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "l2norm", ")", "\n", "criterion", "=", "torch", ".", "nn", ".", "BCEWithLogitsLoss", "(", "reduction", "=", "'mean'", ")", "#", "\n", "model_idx", "=", "len", "(", "os", ".", "listdir", "(", "'trained_model'", ")", ")", "+", "1", "\n", "model_name", "=", "'trained_model/checkpoint_'", "+", "str", "(", "model_idx", ")", "+", "'.pt'", "\n", "early_stopping", "=", "EarlyStopping", "(", "patience", "=", "50", ",", "verbose", "=", "True", ",", "path", "=", "model_name", ")", "\n", "\n", "if", "args", ".", "validation", ":", "\n", "                ", "val_idx", "=", "sorted", "(", "random", ".", "sample", "(", "list", "(", "train_idx", ")", ",", "num_node", "//", "5", ")", ")", "# 10% for validation", "\n", "train_idx", "=", "sorted", "(", "list", "(", "set", "(", "train_idx", ")", "-", "set", "(", "val_idx", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "val_idx", "=", "train_idx", "\n", "", "val_labels", "=", "train_label", "[", "val_idx", "]", "\n", "train_label", "=", "train_label", "[", "train_idx", "]", "\n", "logging", ".", "info", "(", "\"start training...\"", ")", "\n", "model", ".", "train", "(", ")", "\n", "for", "epoch", "in", "range", "(", "args", ".", "n_epochs", ")", ":", "\n", "                ", "optimizer", ".", "zero_grad", "(", ")", "\n", "logits", "=", "model", ".", "forward", "(", "g", ")", "\n", "# similar loss", "\n", "sim_loss_in", "=", "similar_loss", "(", "g", ",", "train_idx", ",", "logits", ",", "'in'", ")", "\n", "sim_loss_out", "=", "similar_loss", "(", "g", ",", "train_idx", ",", "logits", ",", "'out'", ")", "\n", "classify_loss", "=", "criterion", "(", "logits", "[", "train_idx", "]", ".", "cpu", "(", ")", ",", "train_label", ".", "cpu", "(", ")", ")", "# for multi-label classification", "\n", "loss", "=", "classify_loss", "+", "sigma", "*", "sim_loss_in", "+", "beta", "*", "sim_loss_out", "\n", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "grad_norm", ")", "# clip gradients", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "sim_loss_in", "=", "similar_loss", "(", "g", ",", "val_idx", ",", "logits", ",", "'in'", ")", "\n", "sim_loss_out", "=", "similar_loss", "(", "g", ",", "val_idx", ",", "logits", ",", "'out'", ")", "\n", "classify_loss", "=", "criterion", "(", "logits", "[", "val_idx", "]", ".", "cpu", "(", ")", ",", "val_labels", ".", "cpu", "(", ")", ")", "# for multi-label classification", "\n", "val_loss", "=", "classify_loss", "+", "sigma", "*", "sim_loss_in", "+", "beta", "*", "sim_loss_out", "\n", "#print(epoch+1, loss.item(), val_loss.item())", "\n", "logging", ".", "info", "(", "str", "(", "epoch", "+", "1", ")", "+", "', '", "+", "str", "(", "round", "(", "loss", ".", "item", "(", ")", ",", "5", ")", ")", "+", "', '", "+", "str", "(", "round", "(", "val_loss", ".", "item", "(", ")", ",", "5", ")", ")", ")", "\n", "model", ".", "train", "(", ")", "\n", "early_stopping", "(", "val_loss", ".", "item", "(", ")", ",", "model", ")", "\n", "if", "early_stopping", ".", "early_stop", ":", "\n", "                    ", "print", "(", "\"Stop. Model trained\"", ")", "\n", "break", "\n", "\n", "", "", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_name", ")", ")", "\n", "model", ".", "eval", "(", ")", "\n", "logits", "=", "model", ".", "forward", "(", "g", ")", ".", "cpu", "(", ")", "\n", "logits", "=", "F", ".", "sigmoid", "(", "logits", ")", "\n", "best_thred", ",", "_", "=", "_select_threshold", "(", "val_labels", ".", "cpu", "(", ")", ",", "logits", "[", "val_idx", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "labels_test_pre", "=", "np", ".", "zeros", "(", "test_label", ".", "shape", ")", "\n", "labels_test_pre", "[", "np", ".", "where", "(", "logits", "[", "test_idx", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ">", "best_thred", ")", "]", "=", "1", "\n", "\n", "test_rules", ",", "str_terule", "=", "find_rules_ut", "(", "path", ",", "i", ",", "test_idx", ",", "tmp_label", ",", "test_label", ".", "cpu", "(", ")", ",", "test_template_id", ")", "\n", "pred_rules", ",", "str_prerule", "=", "find_rules_ut", "(", "path", ",", "i", ",", "test_idx", ",", "tmp_label", ",", "labels_test_pre", ",", "test_template_id", ",", "pred", "=", "True", ")", "\n", "\n", "true_rules_out", "+=", "'fold '", "+", "str", "(", "i", ")", "+", "'\\n'", "\n", "true_rules_out", "+=", "str_terule", "\n", "pred_rules_out", "+=", "'fold '", "+", "str", "(", "i", ")", "+", "'\\n'", "\n", "pred_rules_out", "+=", "str_prerule", "\n", "\n", "test_precision", ",", "test_recall", ",", "test_f1", "=", "metrics", "(", "set", "(", "test_rules", ")", ",", "set", "(", "pred_rules", ")", ")", "\n", "\n", "result", ".", "append", "(", "[", "test_precision", ",", "test_recall", ",", "test_f1", "]", ")", "\n", "print", "(", "\"Test Precision: {:.4f} | Test Recall: {:.4f} | Test F1: {:.4f}\"", ".", "format", "(", "test_precision", ",", "test_recall", ",", "test_f1", ")", ")", "\n", "output", "+=", "\"Test Precision: {:.4f} | Test Recall: {:.4f} | Test F1: {:.4f} \\n\"", ".", "format", "(", "test_precision", ",", "test_recall", ",", "test_f1", ")", "\n", "\n", "if", "args", ".", "dataset", "==", "'sumo'", ":", "\n", "                ", "break", "\n", "", "", "mean_p", ",", "mean_r", ",", "mean_f1", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "result", ")", ",", "axis", "=", "0", ")", "\n", "\n", "print", "(", "\"Mean values over \"", "+", "str", "(", "fold", ")", "+", "\" fold: Precision: {:.4f} | Recall: {:.4f} | F1: {:.4f}\"", ".", "format", "(", "mean_p", ",", "mean_r", ",", "mean_f1", ")", ")", "\n", "output", "+=", "\"Mean values over \"", "+", "str", "(", "fold", ")", "+", "\" fold: Precision: {:.4f} | Recall: {:.4f} | F1: {:.4f}\\n\\n\\n\\n\"", ".", "format", "(", "mean_p", ",", "mean_r", ",", "mean_f1", ")", "\n", "\n", "file_name", "=", "args", ".", "ftype", "+", "'_'", "+", "args", ".", "dataset", "+", "'_'", "+", "str", "(", "fold", ")", "+", "'.txt'", "\n", "\n", "f", "=", "open", "(", "'result/'", "+", "file_name", ",", "'a+'", ",", "encoding", "=", "'utf-8'", ")", "\n", "f", ".", "write", "(", "output", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "f", "=", "open", "(", "'rules/true_'", "+", "file_name", ",", "'a+'", ",", "encoding", "=", "'utf-8'", ")", "\n", "f", ".", "write", "(", "true_rules_out", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "f", "=", "open", "(", "'rules/pred_'", "+", "file_name", ",", "'a+'", ",", "encoding", "=", "'utf-8'", ")", "\n", "f", ".", "write", "(", "pred_rules_out", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.get_emb_fold.load_pretrained_embeddings": [[17, 26], ["open", "line.strip().split", "numpy.asarray", "line.strip"], "function", ["None"], ["def", "load_pretrained_embeddings", "(", "file", ")", ":", "\n", "    ", "embeddings_dict", "=", "{", "}", "\n", "with", "open", "(", "file", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "values", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "word", "=", "values", "[", "0", "]", "\n", "vector", "=", "np", ".", "asarray", "(", "values", "[", "1", ":", "]", ",", "\"float\"", ")", "\n", "embeddings_dict", "[", "word", "]", "=", "vector", "\n", "", "", "return", "embeddings_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.get_emb_fold.word_embedding": [[31, 40], ["get_emb_fold.load_pretrained_embeddings", "node_embeding.append", "nodes_keep.append"], "function", ["home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.load_pretrained_embeddings"], ["", "def", "word_embedding", "(", "embeding_file", ",", "nodes_dict", ")", ":", "\n", "    ", "nodes_keep", "=", "[", "]", "\n", "embeddings", "=", "load_pretrained_embeddings", "(", "embeding_file", ")", "\n", "node_embeding", "=", "[", "]", "\n", "for", "nod", "in", "nodes_dict", ":", "\n", "        ", "if", "nod", "in", "embeddings", ":", "\n", "            ", "node_embeding", ".", "append", "(", "embeddings", "[", "nod", "]", ")", "\n", "nodes_keep", ".", "append", "(", "nod", ")", "\n", "", "", "return", "node_embeding", ",", "nodes_keep", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.get_emb_fold._read_dictionary": [[43, 50], ["open", "line.strip().split.strip().split", "int", "line.strip().split.strip"], "function", ["None"], ["", "def", "_read_dictionary", "(", "filename", ")", ":", "\n", "    ", "d", "=", "{", "}", "\n", "with", "open", "(", "filename", ",", "'r+'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "d", "[", "line", "[", "1", "]", "]", "=", "int", "(", "line", "[", "0", "]", ")", "\n", "", "", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.get_emb_fold.main": [[52, 97], ["range", "get_emb_fold._read_dictionary", "get_emb_fold.word_embedding", "print", "open", "csv.writer", "csv.writer.writerow", "csv.writer.writerows", "open.close", "open", "sklearn.decomposition.PCA", "sklearn.decomposition.PCA.fit_transform", "print", "csv.writer", "csv.writer.writerow", "csv.writer.writerows", "open.close", "open", "open.close", "str", "len", "feature_file.replace", "numpy.array", "open.write", "str", "str"], "function", ["home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.get_filter_emb_fold._read_dictionary", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.word_embedding"], ["", "def", "main", "(", ")", ":", "\n", "    ", "datasets", "=", "[", "'sumo'", "]", "#['wine', 'economy', 'olympics', 'transport']", "\n", "fold", "=", "3", "\n", "\n", "embedding_files", "=", "[", "'avg_mv_mask.txt'", ",", "'avg_mv_nomask.txt'", ",", "'static.txt'", "]", "\n", "for", "embedding_file", "in", "embedding_files", ":", "\n", "        ", "for", "dataset", "in", "datasets", ":", "\n", "            ", "for", "i", "in", "range", "(", "fold", ")", ":", "\n", "                ", "path", "=", "'dataset/'", "+", "dataset", "+", "'/'", "+", "str", "(", "fold", ")", "+", "'_fold'", "+", "'/'", "\n", "train_path", "=", "path", "+", "'train/s'", "+", "str", "(", "i", "+", "1", ")", "\n", "node_dict_file", "=", "train_path", "+", "'/nodes.dict'", "\n", "if", "'nomask'", "in", "embedding_file", ":", "\n", "                    ", "feature_file", "=", "train_path", "+", "'/nomask_avg_mv_features.csv'", "\n", "", "elif", "'static'", "in", "embedding_file", ":", "\n", "                    ", "feature_file", "=", "train_path", "+", "'/bert_static_features.csv'", "\n", "", "else", ":", "\n", "                    ", "feature_file", "=", "train_path", "+", "'/mask_avg_mv_features.csv'", "\n", "\n", "", "nodes_dict", "=", "_read_dictionary", "(", "node_dict_file", ")", "\n", "node_features", ",", "nodes_keep", "=", "word_embedding", "(", "'dataset/'", "+", "embedding_file", ",", "nodes_dict", ")", "\n", "print", "(", "len", "(", "node_features", "[", "0", "]", ")", ")", "\n", "f", "=", "open", "(", "feature_file", ",", "'w'", ",", "encoding", "=", "'utf-8'", ",", "newline", "=", "''", ")", "\n", "writer", "=", "csv", ".", "writer", "(", "f", ")", "\n", "writer", ".", "writerow", "(", "node_features", "[", "0", "]", ")", "\n", "writer", ".", "writerows", "(", "node_features", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "\n", "f", "=", "open", "(", "feature_file", ".", "replace", "(", "'.csv'", ",", "'_300.csv'", ")", ",", "'w'", ",", "encoding", "=", "'utf-8'", ",", "newline", "=", "''", ")", "\n", "pca", "=", "PCA", "(", "n_components", "=", "300", ",", "svd_solver", "=", "'randomized'", ")", "\n", "node_features", "=", "pca", ".", "fit_transform", "(", "np", ".", "array", "(", "node_features", ")", ")", "\n", "print", "(", "node_features", ".", "shape", "[", "1", "]", ")", "\n", "writer", "=", "csv", ".", "writer", "(", "f", ")", "\n", "writer", ".", "writerow", "(", "node_features", "[", "0", "]", ")", "\n", "writer", ".", "writerows", "(", "node_features", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "f", "=", "open", "(", "train_path", "+", "'/nodes.dict'", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "\n", "i", "=", "0", "\n", "for", "n", "in", "nodes_keep", ":", "\n", "                    ", "f", ".", "write", "(", "str", "(", "i", ")", "+", "'\\t'", "+", "n", "+", "'\\n'", ")", "\n", "i", "+=", "1", "\n", "", "f", ".", "close", "(", ")", "\n", "\n", "break", "\n", "", "", "", "", "main", "(", ")", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.unary_classify_rosv.UnaryClassify.create_features": [[19, 24], ["torch.arange", "features.to.to.to"], "methods", ["None"], ["    ", "def", "create_features", "(", "self", ")", ":", "\n", "        ", "features", "=", "torch", ".", "arange", "(", "self", ".", "in_feat", ")", "\n", "if", "self", ".", "use_cuda", ":", "\n", "            ", "features", "=", "features", ".", "to", "(", "'cuda'", ")", "\n", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.unary_classify_rosv.UnaryClassify.build_input_layer": [[25, 28], ["layers.RGCNBasisLayer"], "methods", ["None"], ["", "def", "build_input_layer", "(", "self", ")", ":", "\n", "        ", "return", "RGCNLayer", "(", "self", ".", "in_feat", ",", "self", ".", "h_dim", ",", "self", ".", "num_rels", ",", "self", ".", "num_bases", ",", "\n", "activation", "=", "F", ".", "relu", ",", "is_input_layer", "=", "True", ",", "node_features", "=", "self", ".", "features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.unary_classify_rosv.UnaryClassify.build_hidden_layer": [[29, 32], ["layers.RGCNBasisLayer"], "methods", ["None"], ["", "def", "build_hidden_layer", "(", "self", ")", ":", "\n", "        ", "return", "RGCNLayer", "(", "self", ".", "h_dim", ",", "self", ".", "h_dim", ",", "self", ".", "num_rels", ",", "self", ".", "num_bases", ",", "dropout", "=", "self", ".", "dropout", ",", "\n", "activation", "=", "F", ".", "relu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.unary_classify_rosv.UnaryClassify.build_output_layer": [[33, 36], ["layers.RGCNBasisLayer"], "methods", ["None"], ["", "def", "build_output_layer", "(", "self", ")", ":", "\n", "        ", "return", "RGCNLayer", "(", "self", ".", "h_dim", ",", "self", ".", "out_dim", ",", "self", ".", "num_rels", ",", "self", ".", "num_bases", ",", "\n", "activation", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.unary_classify_rosv.similar_loss": [[39, 58], ["utils.find_same_etype", "len", "g.in_edges", "g.out_edges", "itertools.combinations", "torch.norm"], "function", ["home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.utils.find_same_etype"], ["", "", "def", "similar_loss", "(", "g", ",", "node_idx", ",", "logits", ",", "direction", "=", "'in'", ")", ":", "\n", "    ", "all_loss", "=", "0", "\n", "for", "i", "in", "node_idx", ":", "\n", "        ", "if", "direction", "==", "'in'", ":", "\n", "            ", "u", ",", "_", ",", "eid", "=", "g", ".", "in_edges", "(", "i", ",", "'all'", ")", "\n", "", "else", ":", "\n", "            ", "_", ",", "u", ",", "eid", "=", "g", ".", "out_edges", "(", "i", ",", "'all'", ")", "\n", "", "etype", "=", "g", ".", "edata", "[", "'type'", "]", "[", "eid", "]", "\n", "loss", "=", "0", "\n", "for", "idx", "in", "find_same_etype", "(", "etype", ")", ":", "\n", "            ", "sm_nodes", "=", "u", "[", "idx", "[", "1", "]", "]", "\n", "cnt", "=", "0", "\n", "l", "=", "0", "\n", "for", "n1", ",", "n2", "in", "combinations", "(", "sm_nodes", ",", "2", ")", ":", "\n", "                ", "cnt", "+=", "1", "\n", "l", "+=", "torch", ".", "norm", "(", "logits", "[", "n1", "]", "-", "logits", "[", "n2", "]", ",", "1", ")", "\n", "", "loss", "=", "l", "/", "cnt", "\n", "", "all_loss", "+=", "loss", "\n", "", "return", "all_loss", "/", "len", "(", "node_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.unary_classify_rosv.main": [[66, 236], ["utils.init_logging_path", "logging.basicConfig", "random.randint", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "range", "np.mean", "print", "open", "open.write", "open.close", "open", "open.write", "open.close", "open", "open.write", "open.close", "str", "logging.info", "data_preprocessing.train_test_idx", "list", "torch.from_numpy().long", "torch.from_numpy().unsqueeze", "torch.from_numpy().float", "dgl.DGLGraph", "g.to.add_nodes", "g.to.add_edges", "g.to.edata.update", "g.to.in_degrees().float().cpu().numpy", "torch.from_numpy", "g.to.ndata.update", "torch.from_numpy().float", "torch.from_numpy().float", "unary_classify_rosv.UnaryClassify", "torch.optim.Adam", "torch.nn.BCEWithLogitsLoss", "pytorchtools.EarlyStopping", "logging.info", "UnaryClassify.train", "range", "UnaryClassify.load_state_dict", "UnaryClassify.eval", "UnaryClassify.forward().cpu", "torch.sigmoid", "utils._select_threshold", "np.zeros", "utils.find_rules_ut", "utils.find_rules_ut", "utils.metrics", "result.append", "print", "np.array", "np.where", "torch.cuda.is_available", "edge_type.to.to", "edge_norm.to.to", "node_features.to.to", "g.to.to", "node_norm.to.to", "UnaryClassify.to", "torch.from_numpy().float.to", "torch.from_numpy().float.to", "UnaryClassify.parameters", "len", "sorted", "sorted", "torch.optim.Adam.zero_grad", "UnaryClassify.forward", "unary_classify_rosv.similar_loss", "unary_classify_rosv.similar_loss", "torch.nn.BCEWithLogitsLoss.", "loss.backward", "torch.nn.utils.clip_grad_norm_", "torch.optim.Adam.step", "UnaryClassify.eval", "unary_classify_rosv.similar_loss", "unary_classify_rosv.similar_loss", "torch.nn.BCEWithLogitsLoss.", "logging.info", "UnaryClassify.train", "pytorchtools.EarlyStopping.", "torch.load", "val_labels.cpu", "logits[].detach().cpu().numpy", "torch.from_numpy().float.cpu", "set", "set", "str", "str", "str", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "g.to.in_degrees().float().cpu", "np.isinf", "torch.from_numpy", "torch.from_numpy", "os.listdir", "str", "random.sample", "list", "logits[].cpu", "torch.from_numpy().float.cpu", "UnaryClassify.parameters", "logits[].cpu", "val_labels.cpu", "val_loss.item", "print", "UnaryClassify.forward", "np.where", "str", "str", "str", "str", "torch.from_numpy().float.sum", "np.array", "np.array", "torch.from_numpy().float.toarray", "list", "str", "logits[].detach().cpu", "g.to.in_degrees().float", "set", "set", "round", "logits[].detach().cpu().numpy", "str", "val_loss.item", "logits[].detach", "g.to.in_degrees", "str", "round", "logits[].detach().cpu", "range", "loss.item", "g.to.number_of_nodes", "logits[].detach"], "function", ["home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.init_logging_path", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.data_preprocessing.train_test_idx", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.utils._select_threshold", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.utils.find_rules_ut", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.utils.find_rules_ut", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.utils.metrics", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.model.BaseRGCN.forward", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.unary_classify_rosv.similar_loss", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.unary_classify_rosv.similar_loss", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.unary_classify_rosv.similar_loss", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.unary_classify_rosv.similar_loss", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.graph.RGCNBinaryDataset.load", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.model.BaseRGCN.forward"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "log_file_path", "=", "init_logging_path", "(", "'log'", ",", "'ut'", ",", "args", ".", "dataset", ")", "\n", "logging", ".", "basicConfig", "(", "filename", "=", "log_file_path", ",", "\n", "level", "=", "10", ",", "\n", "format", "=", "'%(asctime)s %(levelname)s %(message)s'", ",", "\n", "datefmt", "=", "'%m/%d/%Y %I:%M:%S %p'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "'result/'", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "'result/'", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "'rules/'", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "'rules/'", ")", "\n", "\n", "", "if", "args", ".", "dataset", "==", "'sumo'", ":", "\n", "        ", "folds", "=", "[", "3", "]", "\n", "", "else", ":", "\n", "        ", "folds", "=", "[", "10", "]", "\n", "", "randint", "=", "random", ".", "randint", "(", "1", ",", "10000", ")", "\n", "for", "fold", "in", "folds", ":", "\n", "        ", "result", "=", "[", "]", "\n", "sigma", "=", "args", ".", "sigma", "\n", "beta", "=", "args", ".", "beta", "\n", "output", "=", "str", "(", "args", ")", "+", "'\\n'", "\n", "true_rules_out", "=", "''", "\n", "pred_rules_out", "=", "''", "\n", "for", "i", "in", "range", "(", "fold", ")", ":", "\n", "            ", "logging", ".", "info", "(", "\"fold \"", "+", "str", "(", "i", "+", "1", ")", ")", "\n", "path", "=", "'dataset/'", "+", "args", ".", "dataset", "+", "'/'", "+", "str", "(", "fold", ")", "+", "'_fold'", "+", "'/'", "\n", "num_node", ",", "edge_list", ",", "edge_src", ",", "edge_dst", ",", "edge_type", ",", "edge_norm", ",", "num_rel", ",", "train_idx", ",", "test_idx", ",", "train_label", ",", "test_label", ",", "node_features", "=", "train_test_idx", "(", "path", ",", "i", ",", "args", ".", "ftype", ",", "args", ".", "k", ")", "\n", "\n", "tmp_label", "=", "train_label", "\n", "train_idx", "=", "list", "(", "train_idx", ")", "\n", "test_template_id", "=", "np", ".", "where", "(", "test_label", ".", "sum", "(", "axis", "=", "0", ")", ">", "0", ")", "[", "1", "]", "\n", "#print(test_label.shape, test_template_id)", "\n", "\n", "if", "test_label", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                ", "continue", "\n", "", "edge_type", "=", "torch", ".", "from_numpy", "(", "edge_type", ")", ".", "long", "(", ")", "\n", "edge_norm", "=", "torch", ".", "from_numpy", "(", "edge_norm", ")", ".", "unsqueeze", "(", "1", ")", "\n", "node_features", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "node_features", ")", ")", ".", "float", "(", ")", "\n", "\n", "# check cuda", "\n", "use_cuda", "=", "args", ".", "gpu", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "if", "use_cuda", ":", "\n", "#torch.cuda.set_device('gpu')", "\n", "                ", "edge_type", "=", "edge_type", ".", "to", "(", "'cuda'", ")", "\n", "edge_norm", "=", "edge_norm", ".", "to", "(", "'cuda'", ")", "\n", "node_features", "=", "node_features", ".", "to", "(", "'cuda'", ")", "\n", "\n", "# create multi-graph", "\n", "", "g", "=", "DGLGraph", "(", "multigraph", "=", "True", ")", "\n", "g", ".", "add_nodes", "(", "num_node", ")", "\n", "g", ".", "add_edges", "(", "edge_src", ",", "edge_dst", ")", "\n", "if", "use_cuda", ":", "\n", "                ", "g", "=", "g", ".", "to", "(", "'cuda'", ")", "\n", "", "g", ".", "edata", ".", "update", "(", "{", "'type'", ":", "edge_type", ",", "'norm'", ":", "edge_norm", "}", ")", "\n", "\n", "# node_norm for apply_func", "\n", "in_deg", "=", "g", ".", "in_degrees", "(", "range", "(", "g", ".", "number_of_nodes", "(", ")", ")", ")", ".", "float", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "norm", "=", "1.0", "/", "in_deg", "\n", "norm", "[", "np", ".", "isinf", "(", "norm", ")", "]", "=", "0", "\n", "node_norm", "=", "torch", ".", "from_numpy", "(", "norm", ")", "\n", "if", "use_cuda", ":", "\n", "                ", "node_norm", "=", "node_norm", ".", "to", "(", "'cuda'", ")", "\n", "", "g", ".", "ndata", ".", "update", "(", "{", "'norm'", ":", "node_norm", "}", ")", "\n", "\n", "in_feat", "=", "node_features", ".", "shape", "[", "1", "]", "\n", "num_classes", "=", "train_label", ".", "shape", "[", "1", "]", "\n", "\n", "train_label", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "train_label", ")", ")", ".", "float", "(", ")", "\n", "test_label", "=", "torch", ".", "from_numpy", "(", "test_label", ".", "toarray", "(", ")", ")", ".", "float", "(", ")", "\n", "# create model", "\n", "model", "=", "UnaryClassify", "(", "in_feat", ",", "\n", "args", ".", "n_hidden", ",", "\n", "num_classes", ",", "\n", "num_rel", ",", "\n", "num_bases", "=", "args", ".", "n_bases", ",", "\n", "num_hidden_layers", "=", "args", ".", "n_layers", "-", "2", ",", "\n", "dropout", "=", "args", ".", "dropout", ",", "\n", "use_cuda", "=", "use_cuda", ",", "\n", "features", "=", "node_features", ")", "\n", "if", "use_cuda", ":", "\n", "                ", "model", ".", "to", "(", "'cuda'", ")", "\n", "train_label", ".", "to", "(", "'cuda'", ")", "\n", "test_label", ".", "to", "(", "'cuda'", ")", "\n", "\n", "\n", "# optimizer", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "l2norm", ")", "\n", "criterion", "=", "torch", ".", "nn", ".", "BCEWithLogitsLoss", "(", "reduction", "=", "'mean'", ")", "#", "\n", "model_idx", "=", "len", "(", "os", ".", "listdir", "(", "'trained_model'", ")", ")", "+", "1", "\n", "model_name", "=", "'trained_model/checkpoint_'", "+", "str", "(", "model_idx", "+", "randint", ")", "+", "'.pt'", "\n", "early_stopping", "=", "EarlyStopping", "(", "patience", "=", "30", ",", "verbose", "=", "False", ",", "path", "=", "model_name", ")", "\n", "\n", "if", "args", ".", "validation", ":", "\n", "                ", "val_idx", "=", "sorted", "(", "random", ".", "sample", "(", "list", "(", "train_idx", ")", ",", "num_node", "//", "5", ")", ")", "# 10% for validation", "\n", "train_idx", "=", "sorted", "(", "list", "(", "set", "(", "train_idx", ")", "-", "set", "(", "val_idx", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "val_idx", "=", "train_idx", "\n", "", "val_labels", "=", "train_label", "[", "val_idx", "]", "\n", "train_label", "=", "train_label", "[", "train_idx", "]", "\n", "logging", ".", "info", "(", "\"start training...\"", ")", "\n", "model", ".", "train", "(", ")", "\n", "for", "epoch", "in", "range", "(", "args", ".", "n_epochs", ")", ":", "\n", "                ", "optimizer", ".", "zero_grad", "(", ")", "\n", "logits", "=", "model", ".", "forward", "(", "g", ")", "\n", "# similar loss", "\n", "sim_loss_in", "=", "similar_loss", "(", "g", ",", "train_idx", ",", "logits", ",", "'in'", ")", "\n", "sim_loss_out", "=", "similar_loss", "(", "g", ",", "train_idx", ",", "logits", ",", "'out'", ")", "\n", "classify_loss", "=", "criterion", "(", "logits", "[", "train_idx", "]", ".", "cpu", "(", ")", ",", "train_label", ".", "cpu", "(", ")", ")", "# for multi-label classification", "\n", "loss", "=", "classify_loss", "+", "sigma", "*", "sim_loss_in", "+", "beta", "*", "sim_loss_out", "\n", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "grad_norm", ")", "# clip gradients", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "sim_loss_in", "=", "similar_loss", "(", "g", ",", "val_idx", ",", "logits", ",", "'in'", ")", "\n", "sim_loss_out", "=", "similar_loss", "(", "g", ",", "val_idx", ",", "logits", ",", "'out'", ")", "\n", "classify_loss", "=", "criterion", "(", "logits", "[", "val_idx", "]", ".", "cpu", "(", ")", ",", "val_labels", ".", "cpu", "(", ")", ")", "# for multi-label classification", "\n", "val_loss", "=", "classify_loss", "+", "sigma", "*", "sim_loss_in", "+", "beta", "*", "sim_loss_out", "\n", "#print(epoch+1, loss.item(), val_loss.item())", "\n", "logging", ".", "info", "(", "str", "(", "epoch", "+", "1", ")", "+", "', '", "+", "str", "(", "round", "(", "loss", ".", "item", "(", ")", ",", "5", ")", ")", "+", "', '", "+", "str", "(", "round", "(", "val_loss", ".", "item", "(", ")", ",", "5", ")", ")", ")", "\n", "model", ".", "train", "(", ")", "\n", "early_stopping", "(", "val_loss", ".", "item", "(", ")", ",", "model", ")", "\n", "if", "early_stopping", ".", "early_stop", ":", "\n", "                    ", "print", "(", "\"Stop. Model trained\"", ")", "\n", "break", "\n", "\n", "", "", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_name", ")", ")", "\n", "model", ".", "eval", "(", ")", "\n", "logits", "=", "model", ".", "forward", "(", "g", ")", ".", "cpu", "(", ")", "\n", "logits", "=", "F", ".", "sigmoid", "(", "logits", ")", "\n", "best_thred", ",", "_", "=", "_select_threshold", "(", "val_labels", ".", "cpu", "(", ")", ",", "logits", "[", "val_idx", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "labels_test_pre", "=", "np", ".", "zeros", "(", "test_label", ".", "shape", ")", "\n", "labels_test_pre", "[", "np", ".", "where", "(", "logits", "[", "test_idx", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ">", "best_thred", ")", "]", "=", "1", "\n", "\n", "test_rules", ",", "str_terule", "=", "find_rules_ut", "(", "path", ",", "i", ",", "test_idx", ",", "tmp_label", ",", "test_label", ".", "cpu", "(", ")", ",", "test_template_id", ")", "\n", "pred_rules", ",", "str_prerule", "=", "find_rules_ut", "(", "path", ",", "i", ",", "test_idx", ",", "tmp_label", ",", "labels_test_pre", ",", "test_template_id", ",", "pred", "=", "True", ")", "\n", "\n", "true_rules_out", "+=", "'fold '", "+", "str", "(", "i", ")", "+", "'\\n'", "\n", "true_rules_out", "+=", "str_terule", "\n", "pred_rules_out", "+=", "'fold '", "+", "str", "(", "i", ")", "+", "'\\n'", "\n", "pred_rules_out", "+=", "str_prerule", "\n", "\n", "test_precision", ",", "test_recall", ",", "test_f1", "=", "metrics", "(", "set", "(", "test_rules", ")", ",", "set", "(", "pred_rules", ")", ")", "\n", "\n", "result", ".", "append", "(", "[", "test_precision", ",", "test_recall", ",", "test_f1", "]", ")", "\n", "print", "(", "\"Test Precision: {:.4f} | Test Recall: {:.4f} | Test F1: {:.4f}\"", ".", "format", "(", "test_precision", ",", "test_recall", ",", "test_f1", ")", ")", "\n", "output", "+=", "\"Test Precision: {:.4f} | Test Recall: {:.4f} | Test F1: {:.4f} \\n\"", ".", "format", "(", "test_precision", ",", "test_recall", ",", "test_f1", ")", "\n", "\n", "if", "args", ".", "dataset", "==", "'sumo'", ":", "\n", "                ", "break", "\n", "", "", "mean_p", ",", "mean_r", ",", "mean_f1", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "result", ")", ",", "axis", "=", "0", ")", "\n", "\n", "print", "(", "\"Mean values over \"", "+", "str", "(", "fold", ")", "+", "\" fold: Precision: {:.4f} | Recall: {:.4f} | F1: {:.4f}\"", ".", "format", "(", "mean_p", ",", "mean_r", ",", "mean_f1", ")", ")", "\n", "output", "+=", "\"Mean values over \"", "+", "str", "(", "fold", ")", "+", "\" fold: Precision: {:.4f} | Recall: {:.4f} | F1: {:.4f}\\n\\n\\n\\n\"", ".", "format", "(", "mean_p", ",", "mean_r", ",", "mean_f1", ")", "\n", "\n", "file_name", "=", "args", ".", "ftype", "+", "'_'", "+", "args", ".", "dataset", "+", "'_'", "+", "str", "(", "fold", ")", "+", "'.txt'", "\n", "\n", "f", "=", "open", "(", "'result/'", "+", "file_name", ",", "'a+'", ",", "encoding", "=", "'utf-8'", ")", "\n", "f", ".", "write", "(", "output", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "f", "=", "open", "(", "'rules/true_'", "+", "file_name", ",", "'a+'", ",", "encoding", "=", "'utf-8'", ")", "\n", "f", ".", "write", "(", "true_rules_out", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "f", "=", "open", "(", "'rules/pred_'", "+", "file_name", ",", "'a+'", ",", "encoding", "=", "'utf-8'", ")", "\n", "f", ".", "write", "(", "pred_rules_out", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.layers.RGCNLayer.__init__": [[7, 30], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.init.kaiming_uniform", "torch.init.kaiming_uniform", "torch.Parameter", "torch.Parameter", "torch.init.kaiming_uniform", "torch.init.kaiming_uniform", "torch.Dropout", "torch.Dropout", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.model.BaseRGCN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_feat", ",", "out_feat", ",", "bias", "=", "None", ",", "activation", "=", "None", ",", "\n", "self_loop", "=", "False", ",", "dropout", "=", "0.0", ",", "node_features", "=", "None", ")", ":", "\n", "        ", "super", "(", "RGCNLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "self_loop", "=", "self_loop", "\n", "self", ".", "node_features", "=", "node_features", "\n", "\n", "if", "self", ".", "bias", "==", "True", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "out_feat", ")", ")", "\n", "#nn.init.xavier_uniform_(self.bias, gain=nn.init.calculate_gain('relu'))", "\n", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "bias", ")", "\n", "\n", "# weight for self loop", "\n", "", "if", "self", ".", "self_loop", ":", "\n", "            ", "self", ".", "loop_weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "in_feat", ",", "out_feat", ")", ")", "\n", "#nn.init.xavier_uniform_(self.loop_weight, gain=nn.init.calculate_gain('relu'))", "\n", "nn", ".", "init", ".", "kaiming_uniform", "(", "self", ".", "loop_weight", ")", "\n", "\n", "", "if", "dropout", ":", "\n", "            ", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "dropout", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.layers.RGCNLayer.propagate": [[32, 34], ["None"], "methods", ["None"], ["", "", "def", "propagate", "(", "self", ",", "g", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.layers.RGCNLayer.forward": [[35, 53], ["layers.RGCNLayer.propagate", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "layers.RGCNLayer.activation", "layers.RGCNLayer.dropout"], "methods", ["home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.layers.RGCNBlockLayer.propagate"], ["", "def", "forward", "(", "self", ",", "g", ")", ":", "\n", "        ", "if", "self", ".", "self_loop", ":", "\n", "            ", "loop_message", "=", "torch", ".", "mm", "(", "g", ".", "ndata", "[", "'h'", "]", ",", "self", ".", "loop_weight", ")", "# matrix multiplication", "\n", "if", "self", ".", "dropout", "is", "not", "None", ":", "\n", "                ", "loop_message", "=", "self", ".", "dropout", "(", "loop_message", ")", "\n", "\n", "", "", "self", ".", "propagate", "(", "g", ")", "\n", "\n", "# apply bias and activation", "\n", "node_repr", "=", "g", ".", "ndata", "[", "'h'", "]", "# 'h'-> node feature matrix, n*dim", "\n", "if", "self", ".", "bias", ":", "\n", "            ", "node_repr", "=", "node_repr", "+", "self", ".", "bias", "\n", "", "if", "self", ".", "self_loop", ":", "\n", "            ", "node_repr", "=", "node_repr", "+", "loop_message", "\n", "", "if", "self", ".", "activation", ":", "\n", "            ", "node_repr", "=", "self", ".", "activation", "(", "node_repr", ")", "\n", "\n", "", "g", ".", "ndata", "[", "'h'", "]", "=", "node_repr", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.layers.RGCNBasisLayer.__init__": [[56, 87], ["layers.RGCNLayer.__init__", "torch.Parameter", "torch.Parameter", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Parameter", "torch.Parameter", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "print", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain"], "methods", ["home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.model.BaseRGCN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_feat", ",", "out_feat", ",", "num_rels", ",", "num_bases", "=", "-", "1", ",", "bias", "=", "None", ",", "\n", "activation", "=", "None", ",", "is_input_layer", "=", "False", ",", "node_features", "=", "None", ",", "dropout", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "RGCNBasisLayer", ",", "self", ")", ".", "__init__", "(", "in_feat", ",", "out_feat", ",", "bias", ",", "activation", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "in_feat", "=", "in_feat", "\n", "self", ".", "out_feat", "=", "out_feat", "\n", "self", ".", "num_rels", "=", "num_rels", "\n", "self", ".", "num_bases", "=", "num_bases", "\n", "self", ".", "is_input_layer", "=", "is_input_layer", "\n", "if", "is_input_layer", ":", "\n", "            ", "if", "node_features", "is", "not", "None", ":", "\n", "                ", "self", ".", "node_features", "=", "node_features", "\n", "", "else", ":", "\n", "                ", "print", "(", "'Node features must be input.'", ")", "\n", "#print(self.node_features)", "\n", "\n", "", "", "if", "self", ".", "num_bases", "<=", "0", "or", "self", ".", "num_bases", ">", "self", ".", "num_rels", ":", "\n", "            ", "self", ".", "num_bases", "=", "self", ".", "num_rels", "\n", "\n", "# add basis weights, relation-specific weights", "\n", "", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "num_bases", ",", "self", ".", "in_feat", ",", "\n", "self", ".", "out_feat", ")", ")", "\n", "\n", "if", "self", ".", "num_bases", "<", "self", ".", "num_rels", ":", "\n", "# linear combination coefficients", "\n", "            ", "self", ".", "w_comp", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "num_rels", ",", "\n", "self", ".", "num_bases", ")", ")", "\n", "\n", "", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "weight", ",", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "'relu'", ")", ")", "\n", "if", "self", ".", "num_bases", "<", "self", ".", "num_rels", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "w_comp", ",", "\n", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "'relu'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.layers.RGCNBasisLayer.propagate": [[89, 115], ["g.update_all", "layers.RGCNBasisLayer.weight.view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "dgl.sum", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "h.unsqueeze", "edges.src[].unsqueeze"], "methods", ["None"], ["", "", "def", "propagate", "(", "self", ",", "g", ")", ":", "\n", "        ", "if", "self", ".", "num_bases", "<", "self", ".", "num_rels", ":", "\n", "# generate all weights from bases", "\n", "            ", "weight", "=", "self", ".", "weight", ".", "view", "(", "self", ".", "num_bases", ",", "\n", "self", ".", "in_feat", "*", "self", ".", "out_feat", ")", "\n", "weight", "=", "torch", ".", "matmul", "(", "self", ".", "w_comp", ",", "weight", ")", ".", "view", "(", "\n", "self", ".", "num_rels", ",", "self", ".", "in_feat", ",", "self", ".", "out_feat", ")", "\n", "", "else", ":", "\n", "            ", "weight", "=", "self", ".", "weight", "\n", "\n", "", "if", "self", ".", "is_input_layer", ":", "\n", "            ", "def", "msg_func", "(", "edges", ")", ":", "\n", "# for input layer, msg is computed from node_features", "\n", "                ", "w", "=", "weight", "[", "edges", ".", "data", "[", "'type'", "]", "]", "\n", "h", "=", "self", ".", "node_features", "[", "edges", ".", "src", "[", "'id'", "]", "]", "\n", "msg", "=", "torch", ".", "bmm", "(", "h", ".", "unsqueeze", "(", "1", ")", ",", "w", ")", ".", "squeeze", "(", ")", "\n", "msg", "=", "msg", "*", "edges", ".", "data", "[", "'norm'", "]", "\n", "return", "{", "'msg'", ":", "msg", "}", "\n", "", "", "else", ":", "\n", "            ", "def", "msg_func", "(", "edges", ")", ":", "\n", "                ", "w", "=", "weight", "[", "edges", ".", "data", "[", "'type'", "]", "]", "\n", "msg", "=", "torch", ".", "bmm", "(", "edges", ".", "src", "[", "'h'", "]", ".", "unsqueeze", "(", "1", ")", ",", "w", ")", ".", "squeeze", "(", ")", "\n", "msg", "=", "msg", "*", "edges", ".", "data", "[", "'norm'", "]", "\n", "return", "{", "'msg'", ":", "msg", "}", "\n", "\n", "", "", "g", ".", "update_all", "(", "msg_func", ",", "fn", ".", "sum", "(", "msg", "=", "'msg'", ",", "out", "=", "'h'", ")", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.layers.RGCNBasisLayer.apply_func": [[116, 118], ["nodes.data[].view"], "methods", ["None"], ["", "def", "apply_func", "(", "self", ",", "nodes", ")", ":", "\n", "        ", "return", "{", "'h'", ":", "nodes", ".", "data", "[", "'h'", "]", "*", "nodes", ".", "data", "[", "'norm'", "]", ".", "view", "(", "-", "1", ",", "1", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.layers.RGCNBlockLayer.__init__": [[120, 137], ["layers.RGCNLayer.__init__", "torch.Parameter", "torch.Parameter", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.init.calculate_gain", "torch.init.calculate_gain"], "methods", ["home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.model.BaseRGCN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_feat", ",", "out_feat", ",", "num_rels", ",", "num_bases", ",", "bias", "=", "None", ",", "\n", "activation", "=", "None", ",", "self_loop", "=", "False", ",", "dropout", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "RGCNBlockLayer", ",", "self", ")", ".", "__init__", "(", "in_feat", ",", "out_feat", ",", "bias", ",", "\n", "activation", ",", "self_loop", "=", "self_loop", ",", "\n", "dropout", "=", "dropout", ")", "\n", "self", ".", "num_rels", "=", "num_rels", "\n", "self", ".", "num_bases", "=", "num_bases", "\n", "assert", "self", ".", "num_bases", ">", "0", "\n", "\n", "self", ".", "out_feat", "=", "out_feat", "\n", "self", ".", "submat_in", "=", "in_feat", "//", "self", ".", "num_bases", "\n", "self", ".", "submat_out", "=", "out_feat", "//", "self", ".", "num_bases", "\n", "\n", "# assuming in_feat and out_feat are both divisible by num_bases", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "\n", "self", ".", "num_rels", ",", "self", ".", "num_bases", "*", "self", ".", "submat_in", "*", "self", ".", "submat_out", ")", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "weight", ",", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "'relu'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.layers.RGCNBlockLayer.msg_func": [[138, 146], ["layers.RGCNBlockLayer.weight[].view", "edges.src[].view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm"], "methods", ["None"], ["", "def", "msg_func", "(", "self", ",", "edges", ")", ":", "\n", "#print(edges.data['type'])", "\n", "\n", "        ", "weight", "=", "self", ".", "weight", "[", "edges", ".", "data", "[", "'type'", "]", "]", ".", "view", "(", "\n", "-", "1", ",", "self", ".", "submat_in", ",", "self", ".", "submat_out", ")", "\n", "node", "=", "edges", ".", "src", "[", "'h'", "]", ".", "view", "(", "-", "1", ",", "1", ",", "self", ".", "submat_in", ")", "\n", "msg", "=", "torch", ".", "bmm", "(", "node", ",", "weight", ")", ".", "view", "(", "-", "1", ",", "self", ".", "out_feat", ")", "\n", "return", "{", "'msg'", ":", "msg", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.layers.RGCNBlockLayer.propagate": [[147, 149], ["g.update_all", "dgl.sum"], "methods", ["None"], ["", "def", "propagate", "(", "self", ",", "g", ")", ":", "\n", "        ", "g", ".", "update_all", "(", "self", ".", "msg_func", ",", "fn", ".", "sum", "(", "msg", "=", "'msg'", ",", "out", "=", "'h'", ")", ",", "self", ".", "apply_func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.layers.RGCNBlockLayer.apply_func": [[150, 152], ["None"], "methods", ["None"], ["", "def", "apply_func", "(", "self", ",", "nodes", ")", ":", "\n", "        ", "return", "{", "'h'", ":", "nodes", ".", "data", "[", "'h'", "]", "*", "nodes", ".", "data", "[", "'norm'", "]", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.rosv_util.load_bert_vectors": [[14, 23], ["open", "csv.reader", "os.path.join", "float", "data.append"], "function", ["None"], ["def", "load_bert_vectors", "(", "path", ",", "noun", ")", ":", "\n", "    ", "data", "=", "[", "]", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "noun", "+", "'.csv'", ")", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "reader", "=", "csv", ".", "reader", "(", "f", ",", "delimiter", "=", "','", ")", "\n", "for", "line", "in", "reader", ":", "\n", "            ", "vec", "=", "[", "float", "(", "l", ")", "for", "l", "in", "line", "]", "\n", "if", "vec", "not", "in", "data", ":", "\n", "                ", "data", ".", "append", "(", "vec", ")", "\n", "", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.rosv_util.load_neighbors": [[25, 32], ["numpy.array", "open", "line.strip().split", "knn.append", "line.strip", "nn.split"], "function", ["None"], ["", "def", "load_neighbors", "(", "file_name", ",", "max_k", ")", ":", "\n", "    ", "knn", "=", "[", "]", "\n", "with", "open", "(", "file_name", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "noun", ",", "nn", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "knn", ".", "append", "(", "[", "noun", "]", "+", "nn", ".", "split", "(", "','", ")", "[", ":", "max_k", "]", ")", "\n", "", "", "return", "np", ".", "array", "(", "knn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.rosv_util.write_out": [[34, 37], ["open", "f.writelines"], "function", ["None"], ["", "def", "write_out", "(", "file_name", ",", "output", ")", ":", "\n", "    ", "with", "open", "(", "file_name", ",", "'a+'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "f", ".", "writelines", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.rosv_util.knn_train_data": [[39, 87], ["logging.info", "logging.info", "numpy.array", "numpy.array().astype", "faiss.IndexFlatL2.add", "logging.info", "range", "rosv_util.write_out", "logging.info", "rosv_util.load_bert_vectors", "np.array().astype.extend", "np.array.extend", "len", "faiss.normalize_L2", "faiss.IndexFlatIP", "faiss.IndexFlatL2", "faiss.IndexFlatL2.search", "logging.info", "os.listdir", "str", "numpy.array", "str", "len", "len", "numpy.where", "str", "numpy.delete"], "function", ["home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.filtering_baseline.write_out", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.load_bert_vectors"], ["", "", "def", "knn_train_data", "(", "train_samples", ",", "mv_path", ",", "max_k", ",", "out_file", ",", "chunk_size", "=", "10000", ",", "use_cosine", "=", "False", ")", ":", "\n", "    ", "logging", ".", "info", "(", "\"Start processing training samples\"", ")", "\n", "men_vec", "=", "[", "]", "\n", "nouns", "=", "[", "]", "\n", "for", "noun", "in", "train_samples", ":", "\n", "        ", "if", "noun", "+", "'.csv'", "not", "in", "os", ".", "listdir", "(", "mv_path", ")", ":", "\n", "            ", "continue", "\n", "", "vec", "=", "load_bert_vectors", "(", "mv_path", ",", "noun", ")", "\n", "men_vec", ".", "extend", "(", "vec", ")", "\n", "nouns", ".", "extend", "(", "[", "noun", "]", "*", "len", "(", "vec", ")", ")", "\n", "", "logging", ".", "info", "(", "\"Total number of training vector is \"", "+", "str", "(", "len", "(", "nouns", ")", ")", ")", "\n", "if", "len", "(", "men_vec", ")", "==", "0", ":", "\n", "        ", "return", "\n", "", "nouns", "=", "np", ".", "array", "(", "nouns", ")", "\n", "men_vec", "=", "np", ".", "array", "(", "men_vec", ")", ".", "astype", "(", "'float32'", ")", "\n", "dim", "=", "men_vec", ".", "shape", "[", "1", "]", "\n", "if", "use_cosine", ":", "\n", "        ", "normalize_L2", "(", "vec", ")", "\n", "index", "=", "faiss", ".", "IndexFlatIP", "(", "dim", ")", "\n", "", "else", ":", "\n", "        ", "index", "=", "faiss", ".", "IndexFlatL2", "(", "dim", ")", "\n", "", "index", ".", "add", "(", "men_vec", ")", "\n", "\n", "logging", ".", "info", "(", "\"Total number of index is \"", "+", "str", "(", "index", ".", "ntotal", ")", ")", "\n", "\n", "knn", "=", "''", "\n", "s", "=", "0", "\n", "n_i", "=", "0", "\n", "times", "=", "men_vec", ".", "shape", "[", "0", "]", "//", "chunk_size", "+", "1", "\n", "for", "tt", "in", "range", "(", "times", ")", ":", "\n", "        ", "if", "tt", "==", "times", "-", "1", ":", "\n", "            ", "e", "=", "s", "+", "men_vec", ".", "shape", "[", "0", "]", "%", "chunk_size", "\n", "", "else", ":", "\n", "            ", "e", "=", "s", "+", "chunk_size", "\n", "", "_", ",", "I", "=", "index", ".", "search", "(", "men_vec", "[", "s", ":", "e", "]", ",", "max_k", "+", "1", ")", "\n", "\n", "for", "i", "in", "I", ":", "\n", "            ", "noun_ii", "=", "np", ".", "where", "(", "i", "==", "n_i", ")", "[", "0", "]", "\n", "if", "noun_ii", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "                ", "knn", "+=", "nouns", "[", "n_i", "]", "+", "'\\t'", "+", "','", ".", "join", "(", "nouns", "[", "np", ".", "delete", "(", "i", ",", "noun_ii", "[", "0", "]", ")", "]", ")", "+", "'\\n'", "\n", "", "else", ":", "\n", "                ", "knn", "+=", "nouns", "[", "n_i", "]", "+", "'\\t'", "+", "','", ".", "join", "(", "nouns", "[", "i", "[", ":", "max_k", "]", "]", ")", "+", "'\\n'", "\n", "", "n_i", "+=", "1", "\n", "", "s", "=", "e", "\n", "logging", ".", "info", "(", "str", "(", "(", "tt", "+", "1", ")", "*", "chunk_size", "/", "nouns", ".", "shape", "[", "0", "]", ")", "+", "\" % training vectors processed.\"", ")", "\n", "\n", "", "write_out", "(", "out_file", ",", "knn", ")", "\n", "logging", ".", "info", "(", "\"knn for training samples were wrote out. \"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.rosv_util.knn_eval_data": [[89, 133], ["logging.info", "logging.info", "numpy.array", "numpy.array", "rosv_util.write_out", "logging.info", "rosv_util.load_bert_vectors", "np.array.extend", "np.array.extend", "rosv_util.load_bert_vectors", "copy.deepcopy", "numpy.append", "numpy.vstack().astype", "faiss.IndexFlatL2.add", "faiss.IndexFlatL2.search", "str", "logging.info", "numpy.array", "faiss.normalize_L2", "faiss.IndexFlatIP", "faiss.IndexFlatL2", "len", "len", "numpy.vstack", "numpy.where", "str", "len", "round", "numpy.array", "len", "numpy.delete"], "function", ["home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.filtering_baseline.write_out", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.load_bert_vectors", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.load_bert_vectors"], ["", "def", "knn_eval_data", "(", "train_samples", ",", "eval_samples", ",", "mv_path", ",", "max_k", ",", "out_file", ",", "use_cosine", "=", "False", ")", ":", "\n", "    ", "logging", ".", "info", "(", "\"Start processing evaluation samples\"", ")", "\n", "men_vec", "=", "[", "]", "\n", "nouns", "=", "[", "]", "\n", "for", "noun", "in", "train_samples", ":", "\n", "        ", "vec", "=", "load_bert_vectors", "(", "mv_path", ",", "noun", ")", "\n", "men_vec", ".", "extend", "(", "vec", ")", "\n", "nouns", ".", "extend", "(", "[", "noun", "]", "*", "len", "(", "vec", ")", ")", "\n", "", "logging", ".", "info", "(", "\"Total number of training vector is \"", "+", "str", "(", "len", "(", "nouns", ")", ")", ")", "\n", "\n", "nouns", "=", "np", ".", "array", "(", "nouns", ")", "\n", "men_vec", "=", "np", ".", "array", "(", "men_vec", ")", "\n", "dim", "=", "men_vec", ".", "shape", "[", "1", "]", "\n", "\n", "knn", "=", "''", "\n", "cnt", "=", "0", "\n", "for", "noun", "in", "eval_samples", ":", "\n", "        ", "cnt", "+=", "1", "\n", "if", "cnt", "%", "1000", "==", "0", ":", "\n", "            ", "logging", ".", "info", "(", "str", "(", "round", "(", "cnt", "/", "len", "(", "eval_samples", ")", "*", "100", ",", "2", ")", ")", "+", "\" % nouns processed.\"", ")", "\n", "", "vec", "=", "load_bert_vectors", "(", "mv_path", ",", "noun", ")", "\n", "nouns2", "=", "copy", ".", "deepcopy", "(", "nouns", ")", "\n", "nouns2", "=", "np", ".", "append", "(", "nouns2", ",", "np", ".", "array", "(", "[", "noun", "]", "*", "len", "(", "vec", ")", ")", ")", "\n", "\n", "vec", "=", "np", ".", "vstack", "(", "(", "men_vec", ",", "np", ".", "array", "(", "vec", ")", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "if", "use_cosine", ":", "\n", "            ", "normalize_L2", "(", "vec", ")", "\n", "index", "=", "faiss", ".", "IndexFlatIP", "(", "dim", ")", "\n", "", "else", ":", "\n", "            ", "index", "=", "faiss", ".", "IndexFlatL2", "(", "dim", ")", "\n", "", "index", ".", "add", "(", "vec", ")", "\n", "\n", "n_j", "=", "men_vec", ".", "shape", "[", "0", "]", "\n", "_", ",", "I", "=", "index", ".", "search", "(", "vec", "[", "men_vec", ".", "shape", "[", "0", "]", ":", "]", ",", "max_k", "+", "1", ")", "\n", "for", "i", "in", "I", ":", "\n", "            ", "noun_ii", "=", "np", ".", "where", "(", "i", "==", "n_j", ")", "[", "0", "]", "\n", "if", "noun_ii", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "                ", "knn", "+=", "noun", "+", "'\\t'", "+", "','", ".", "join", "(", "nouns2", "[", "np", ".", "delete", "(", "i", ",", "noun_ii", "[", "0", "]", ")", "]", ")", "+", "'\\n'", "\n", "", "else", ":", "\n", "                ", "knn", "+=", "noun", "+", "'\\t'", "+", "','", ".", "join", "(", "nouns2", "[", "i", "[", ":", "max_k", "]", "]", ")", "+", "'\\n'", "\n", "", "n_j", "+=", "1", "\n", "\n", "", "", "write_out", "(", "out_file", ",", "knn", ")", "\n", "logging", ".", "info", "(", "\"knn for evaluation samples were wrote out. \"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.rosv_util.load_remain_noun_id": [[135, 144], ["dict", "open", "line.strip().split", "int", "line.strip"], "function", ["None"], ["", "def", "load_remain_noun_id", "(", "file", ")", ":", "\n", "    ", "remain_noun_id", "=", "dict", "(", ")", "\n", "with", "open", "(", "file", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "tmp", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "noun", "=", "tmp", "[", "0", "]", "\n", "ids", "=", "[", "int", "(", "i", ")", "for", "i", "in", "tmp", "[", "1", ":", "]", "]", "\n", "remain_noun_id", "[", "noun", "]", "=", "ids", "\n", "", "", "return", "remain_noun_id", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.rosv_util.filtered_sample": [[146, 152], ["new_samples.append"], "function", ["None"], ["", "def", "filtered_sample", "(", "embedding_dict", ",", "samples", ")", ":", "\n", "    ", "new_samples", "=", "[", "]", "\n", "for", "noun", "in", "samples", ":", "\n", "        ", "if", "noun", "in", "embedding_dict", ":", "\n", "            ", "new_samples", ".", "append", "(", "noun", ")", "\n", "", "", "return", "new_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.rosv_util.filter_strategy_rosv": [[154, 176], ["range", "nouns.repeat().reshape", "numpy.where", "nouns.repeat", "remain_noun_id[].append"], "function", ["None"], ["", "def", "filter_strategy_rosv", "(", "knn", ")", ":", "\n", "    ", "nouns", "=", "knn", "[", ":", ",", "0", "]", "\n", "noun_start_id", "=", "{", "}", "\n", "old_noun", "=", "''", "\n", "for", "i", "in", "range", "(", "nouns", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "cur_noun", "=", "nouns", "[", "i", "]", "\n", "if", "old_noun", "==", "''", "or", "not", "cur_noun", "==", "old_noun", ":", "\n", "            ", "noun_start_id", "[", "cur_noun", "]", "=", "i", "\n", "old_noun", "=", "cur_noun", "\n", "\n", "", "", "k", "=", "knn", ".", "shape", "[", "1", "]", "-", "1", "\n", "target", "=", "nouns", ".", "repeat", "(", "k", ")", ".", "reshape", "(", "(", "-", "1", ",", "k", ")", ")", "\n", "score", "=", "(", "knn", "[", ":", ",", "1", ":", "]", "==", "target", ")", ".", "astype", "(", "np", ".", "int", ")", ".", "sum", "(", "axis", "=", "1", ")", "\n", "remain_idx", "=", "np", ".", "where", "(", "score", "<", "k", ")", "[", "0", "]", "\n", "remain_noun_id", "=", "{", "}", "\n", "for", "id", "in", "remain_idx", ":", "\n", "        ", "noun", "=", "nouns", "[", "id", "]", "\n", "if", "noun", "not", "in", "remain_noun_id", ":", "\n", "            ", "remain_noun_id", "[", "noun", "]", "=", "[", "id", "-", "noun_start_id", "[", "noun", "]", "]", "\n", "", "else", ":", "\n", "            ", "remain_noun_id", "[", "noun", "]", ".", "append", "(", "id", "-", "noun_start_id", "[", "noun", "]", ")", "\n", "", "", "return", "remain_noun_id", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.rosv_util.init_logging_path": [[178, 190], ["os.path.join", "os.path.exists", "os.listdir", "os.path.exists", "os.makedirs", "open", "os.utime", "open", "os.utime", "len", "len", "os.listdir", "os.listdir"], "function", ["None"], ["", "def", "init_logging_path", "(", "log_path", ",", "task_name", ",", "file_name", ")", ":", "\n", "    ", "dir_log", "=", "os", ".", "path", ".", "join", "(", "log_path", ",", "f\"{task_name}/{file_name}/\"", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "dir_log", ")", "and", "os", ".", "listdir", "(", "dir_log", ")", ":", "\n", "        ", "dir_log", "+=", "f'{file_name}_{len(os.listdir(dir_log))}.log'", "\n", "with", "open", "(", "dir_log", ",", "'w'", ")", ":", "\n", "             ", "os", ".", "utime", "(", "dir_log", ",", "None", ")", "\n", "", "", "if", "not", "os", ".", "path", ".", "exists", "(", "dir_log", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dir_log", ")", "\n", "dir_log", "+=", "f'{file_name}_{len(os.listdir(dir_log))}.log'", "\n", "with", "open", "(", "dir_log", ",", "'w'", ")", ":", "\n", "             ", "os", ".", "utime", "(", "dir_log", ",", "None", ")", "\n", "", "", "return", "dir_log", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.rosv_util.load_prop_instances": [[192, 201], ["open", "line.strip().split", "cns.split", "feature_concept[].append", "line.strip"], "function", ["None"], ["", "def", "load_prop_instances", "(", "file", ")", ":", "\n", "    ", "feature_concept", "=", "{", "}", "\n", "with", "open", "(", "file", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "id", ",", "f", ",", "cns", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "feature_concept", "[", "id", "+", "'__'", "+", "f", "]", "=", "[", "]", "\n", "for", "c", "in", "cns", ".", "split", "(", "', '", ")", ":", "\n", "                ", "feature_concept", "[", "id", "+", "'__'", "+", "f", "]", ".", "append", "(", "c", ")", "\n", "", "", "", "return", "feature_concept", "\n", "", ""]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.word_embedding.sep_by_uppercase": [[5, 12], ["re.sub", "str[].islower", "x.group"], "function", ["None"], ["def", "sep_by_uppercase", "(", "str", ")", ":", "\n", "    ", "pattern", "=", "\"[A-Z]\"", "\n", "new_str", "=", "re", ".", "sub", "(", "pattern", ",", "lambda", "x", ":", "\" \"", "+", "x", ".", "group", "(", "0", ")", ",", "str", ")", "\n", "if", "str", "[", "0", "]", ".", "islower", "(", ")", ":", "# first character is lowercase", "\n", "        ", "return", "new_str", "\n", "", "else", ":", "\n", "        ", "return", "new_str", "[", "1", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.word_embedding.word_embedding": [[13, 38], ["gensim.models.KeyedVectors.load_word2vec_format", "numpy.zeros", "nod.strip().split", "word_embedding.sep_by_uppercase", "len", "len", "nod.strip", "len", "words.split.split", "numpy.zeros", "numpy.mean", "words[].split", "numpy.array", "len", "words.split.index"], "function", ["home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.get_filter_emb_fold.sep_by_uppercase"], ["", "", "def", "word_embedding", "(", "embeding_file", ",", "nodes_dict", ")", ":", "\n", "    ", "dim", "=", "300", "\n", "embeddings", "=", "KeyedVectors", ".", "load_word2vec_format", "(", "embeding_file", ",", "binary", "=", "True", ")", "\n", "node_embeding", "=", "np", ".", "zeros", "(", "(", "len", "(", "nodes_dict", ")", ",", "dim", ")", ")", "# default value is 0", "\n", "for", "nod", "in", "nodes_dict", ":", "\n", "        ", "words", "=", "nod", ".", "strip", "(", ")", ".", "split", "(", "'#'", ")", "# [1][:-1]", "\n", "# print(words)", "\n", "if", "len", "(", "words", ")", "==", "1", ":", "\n", "            ", "words", "=", "words", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "[", ":", "-", "1", "]", "\n", "# print(words)", "\n", "", "else", ":", "\n", "            ", "words", "=", "words", "[", "1", "]", "[", ":", "-", "1", "]", "\n", "# print(words)", "\n", "", "words", "=", "sep_by_uppercase", "(", "words", ")", "\n", "if", "words", "in", "embeddings", ":", "\n", "            ", "node_embeding", "[", "nodes_dict", "[", "nod", "]", "]", "=", "embeddings", "[", "words", "]", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "words", ")", ">", "1", ":", "# multi-words", "\n", "                ", "words", "=", "words", ".", "split", "(", "' '", ")", "\n", "vectors", "=", "np", ".", "zeros", "(", "(", "len", "(", "words", ")", ",", "dim", ")", ")", "\n", "for", "w", "in", "words", ":", "\n", "                    ", "if", "w", "in", "embeddings", ":", "\n", "                        ", "vectors", "[", "words", ".", "index", "(", "w", ")", "]", "=", "embeddings", "[", "w", "]", "\n", "", "", "node_embeding", "[", "nodes_dict", "[", "nod", "]", "]", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "vectors", ")", ",", "axis", "=", "0", ")", "\n", "", "", "", "return", "node_embeding", "", "", ""]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.get_filter_emb_fold.sep_by_uppercase": [[7, 14], ["re.sub", "str[].islower", "x.group"], "function", ["None"], ["def", "sep_by_uppercase", "(", "str", ")", ":", "\n", "    ", "pattern", "=", "\"[A-Z]+\"", "\n", "new_str", "=", "re", ".", "sub", "(", "pattern", ",", "lambda", "x", ":", "\"_\"", "+", "x", ".", "group", "(", "0", ")", ",", "str", ")", "\n", "if", "str", "[", "0", "]", ".", "islower", "(", ")", ":", "# first character is lowercase", "\n", "        ", "return", "new_str", "\n", "", "else", ":", "\n", "        ", "return", "new_str", "[", "1", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.get_filter_emb_fold.load_pretrained_embeddings": [[16, 26], ["open", "line.strip().split", "numpy.asarray", "line.strip"], "function", ["None"], ["", "", "def", "load_pretrained_embeddings", "(", "file", ")", ":", "\n", "    ", "embeddings_dict", "=", "{", "}", "\n", "with", "open", "(", "file", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "values", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "#print(line, len(values))", "\n", "word", "=", "values", "[", "0", "]", "\n", "vector", "=", "np", ".", "asarray", "(", "values", "[", "1", ":", "]", ",", "\"float\"", ")", "\n", "embeddings_dict", "[", "word", "]", "=", "vector", "\n", "", "", "return", "embeddings_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.get_filter_emb_fold.word_embedding": [[28, 37], ["get_filter_emb_fold.load_pretrained_embeddings", "numpy.zeros", "len", "print"], "function", ["home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.load_pretrained_embeddings"], ["", "def", "word_embedding", "(", "embeding_file", ",", "nodes_dict", ")", ":", "\n", "    ", "embeddings", "=", "load_pretrained_embeddings", "(", "embeding_file", ")", "\n", "node_embeding", "=", "np", ".", "zeros", "(", "(", "len", "(", "nodes_dict", ")", ",", "1024", ")", ")", "# default value is 0", "\n", "for", "nod", "in", "nodes_dict", ":", "\n", "        ", "if", "nod", "in", "embeddings", ":", "\n", "            ", "node_embeding", "[", "nodes_dict", "[", "nod", "]", "]", "=", "embeddings", "[", "nod", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "nod", ",", "' not in embedding'", ")", "\n", "", "", "return", "node_embeding", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.get_filter_emb_fold._read_dictionary": [[40, 47], ["open", "line.strip().split.strip().split", "int", "line.strip().split.strip"], "function", ["None"], ["", "def", "_read_dictionary", "(", "filename", ")", ":", "\n", "    ", "d", "=", "{", "}", "\n", "with", "open", "(", "filename", ",", "'r+'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "d", "[", "line", "[", "1", "]", "]", "=", "int", "(", "line", "[", "0", "]", ")", "\n", "", "", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.get_filter_emb_fold.main": [[49, 77], ["os.path.join", "range", "print", "get_filter_emb_fold._read_dictionary", "get_filter_emb_fold.word_embedding", "open", "csv.writer", "csv.writer.writerow", "csv.writer.writerows", "open.close", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.get_filter_emb_fold._read_dictionary", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.word_embedding"], ["", "def", "main", "(", ")", ":", "\n", "    ", "datasets", "=", "[", "'wine'", ",", "'economy'", ",", "'olympics'", ",", "'transport'", ",", "'sumo'", "]", "\n", "for", "data", "in", "datasets", ":", "\n", "        ", "if", "data", "==", "'sumo'", ":", "\n", "            ", "fold", "=", "3", "\n", "", "else", ":", "\n", "            ", "fold", "=", "10", "\n", "\n", "", "for", "k", "in", "[", "5", ",", "10", ",", "20", ",", "50", ",", "100", "]", ":", "\n", "            ", "embedding_file", "=", "os", ".", "path", ".", "join", "(", "'avg_mv_remain/nomask_large_'", "+", "data", "+", "'_'", "+", "str", "(", "k", ")", "+", "'.txt'", ")", "\n", "for", "i", "in", "range", "(", "fold", ")", ":", "\n", "                ", "path", "=", "'dataset/'", "+", "data", "+", "'/'", "+", "str", "(", "fold", ")", "+", "'_fold'", "+", "'/'", "\n", "train_path", "=", "path", "+", "'train/s'", "+", "str", "(", "i", "+", "1", ")", "\n", "node_dict_file", "=", "train_path", "+", "'/nodes.dict'", "\n", "if", "'nomask'", "in", "embedding_file", ":", "\n", "                    ", "feature_file", "=", "train_path", "+", "'/rosv_nomask_avg_mv_features_'", "+", "str", "(", "k", ")", "+", "'.csv'", "\n", "", "else", ":", "\n", "                    ", "feature_file", "=", "train_path", "+", "'/rosv_mask_avg_mv_features_'", "+", "str", "(", "k", ")", "+", "'.csv'", "\n", "", "print", "(", "data", ",", "k", ",", "i", "+", "1", ")", "\n", "nodes_dict", "=", "_read_dictionary", "(", "node_dict_file", ")", "\n", "node_features", "=", "word_embedding", "(", "embedding_file", ",", "nodes_dict", ")", "\n", "f", "=", "open", "(", "feature_file", ",", "'w'", ",", "encoding", "=", "'utf-8'", ",", "newline", "=", "''", ")", "\n", "writer", "=", "csv", ".", "writer", "(", "f", ")", "\n", "writer", ".", "writerow", "(", "node_features", "[", "0", "]", ")", "\n", "writer", ".", "writerows", "(", "node_features", ")", "\n", "f", ".", "close", "(", ")", "\n", "if", "data", "==", "'sumo'", ":", "\n", "                    ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.model.BaseRGCN.__init__": [[5, 24], ["torch.Module.__init__", "model.BaseRGCN.build_model", "model.BaseRGCN.create_features"], "methods", ["home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.model.BaseRGCN.__init__", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.model.BaseRGCN.build_model", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.model.BaseRGCN.create_features"], ["    ", "def", "__init__", "(", "self", ",", "in_feat", ",", "h_dim", ",", "out_dim", ",", "num_rels", ",", "num_bases", "=", "-", "1", ",", "\n", "num_hidden_layers", "=", "1", ",", "dropout", "=", "0", ",", "use_cuda", "=", "False", ",", "features", "=", "None", ")", ":", "\n", "        ", "super", "(", "BaseRGCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_feat", "=", "in_feat", "\n", "self", ".", "h_dim", "=", "h_dim", "\n", "self", ".", "out_dim", "=", "out_dim", "\n", "self", ".", "num_rels", "=", "num_rels", "\n", "self", ".", "num_bases", "=", "num_bases", "\n", "self", ".", "num_hidden_layers", "=", "num_hidden_layers", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "use_cuda", "=", "use_cuda", "\n", "self", ".", "features", "=", "features", "\n", "\n", "# create rgcn layers", "\n", "self", ".", "build_model", "(", ")", "\n", "\n", "# create initial features", "\n", "if", "self", ".", "features", "is", "None", ":", "\n", "            ", "self", ".", "features", "=", "self", ".", "create_features", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.model.BaseRGCN.build_model": [[25, 40], ["torch.ModuleList", "torch.ModuleList", "model.BaseRGCN.build_input_layer", "range", "model.BaseRGCN.build_output_layer", "model.BaseRGCN.layers.append", "model.BaseRGCN.build_hidden_layer", "model.BaseRGCN.layers.append", "model.BaseRGCN.layers.append"], "methods", ["home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.model.BaseRGCN.build_input_layer", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.model.BaseRGCN.build_output_layer", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.model.BaseRGCN.build_hidden_layer"], ["", "", "def", "build_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "# i2h", "\n", "i2h", "=", "self", ".", "build_input_layer", "(", ")", "\n", "if", "i2h", "is", "not", "None", ":", "\n", "            ", "self", ".", "layers", ".", "append", "(", "i2h", ")", "\n", "\n", "# h2h", "\n", "", "for", "idx", "in", "range", "(", "self", ".", "num_hidden_layers", ")", ":", "\n", "            ", "h2h", "=", "self", ".", "build_hidden_layer", "(", ")", "\n", "self", ".", "layers", ".", "append", "(", "h2h", ")", "\n", "# h2o", "\n", "", "h2o", "=", "self", ".", "build_output_layer", "(", ")", "\n", "if", "h2o", "is", "not", "None", ":", "\n", "            ", "self", ".", "layers", ".", "append", "(", "h2o", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.model.BaseRGCN.create_features": [[42, 44], ["None"], "methods", ["None"], ["", "", "def", "create_features", "(", "self", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.model.BaseRGCN.build_input_layer": [[45, 47], ["None"], "methods", ["None"], ["", "def", "build_input_layer", "(", "self", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.model.BaseRGCN.build_hidden_layer": [[48, 50], ["None"], "methods", ["None"], ["", "def", "build_hidden_layer", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.model.BaseRGCN.build_output_layer": [[51, 53], ["None"], "methods", ["None"], ["", "def", "build_output_layer", "(", "self", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.model.BaseRGCN.forward": [[54, 62], ["g.ndata.pop", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "layer", "len", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "g", ")", ":", "\n", "        ", "if", "self", ".", "use_cuda", ":", "\n", "            ", "g", ".", "ndata", "[", "'id'", "]", "=", "torch", ".", "arange", "(", "len", "(", "g", ")", ")", ".", "to", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "            ", "g", ".", "ndata", "[", "'id'", "]", "=", "torch", ".", "arange", "(", "len", "(", "g", ")", ")", "\n", "", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "layer", "(", "g", ")", "\n", "", "return", "g", ".", "ndata", ".", "pop", "(", "'h'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.utils.init_logging_path": [[17, 29], ["os.path.join", "os.path.exists", "os.listdir", "os.path.exists", "os.makedirs", "open", "os.utime", "open", "os.utime", "len", "len", "os.listdir", "os.listdir"], "function", ["None"], ["def", "init_logging_path", "(", "log_path", ",", "task_name", ",", "file_name", ")", ":", "\n", "    ", "dir_log", "=", "os", ".", "path", ".", "join", "(", "log_path", ",", "f\"{task_name}/{file_name}/\"", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "dir_log", ")", "and", "os", ".", "listdir", "(", "dir_log", ")", ":", "\n", "        ", "dir_log", "+=", "f'{file_name}_{len(os.listdir(dir_log))}.log'", "\n", "with", "open", "(", "dir_log", ",", "'w'", ")", ":", "\n", "             ", "os", ".", "utime", "(", "dir_log", ",", "None", ")", "\n", "", "", "if", "not", "os", ".", "path", ".", "exists", "(", "dir_log", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dir_log", ")", "\n", "dir_log", "+=", "f'{file_name}_{len(os.listdir(dir_log))}.log'", "\n", "with", "open", "(", "dir_log", ",", "'w'", ")", ":", "\n", "             ", "os", ".", "utime", "(", "dir_log", ",", "None", ")", "\n", "", "", "return", "dir_log", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.utils.select_threshold_rules": [[31, 48], ["print", "numpy.unique", "type", "numpy.where", "numpy.where", "utils.find_rules_ut", "utils.find_rules_ut", "print", "numpy.ones_like", "len", "len", "utils.metrics", "y_true.numpy().sum", "y_true.numpy().sum", "set", "set", "set", "set", "y_true.numpy", "y_true.numpy"], "function", ["home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.utils.find_rules_ut", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.utils.find_rules_ut", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.utils.metrics"], ["", "def", "select_threshold_rules", "(", "y_true", ",", "y_prob", ",", "path", ",", "fold", ",", "idx", ",", "train_label", ")", ":", "\n", "    ", "print", "(", "type", "(", "y_true", ")", ",", "y_true", ".", "shape", ",", "np", ".", "where", "(", "y_true", ".", "numpy", "(", ")", ".", "sum", "(", "axis", "=", "0", ")", ">", "0", ")", ")", "\n", "interested_template_ids", "=", "np", ".", "where", "(", "y_true", ".", "numpy", "(", ")", ".", "sum", "(", "axis", "=", "0", ")", ">", "0", ")", "[", "1", "]", "\n", "thresholds", "=", "np", ".", "unique", "(", "y_prob", ")", "\n", "best_f1", "=", "-", "1", "\n", "best_th", "=", "-", "1", "\n", "for", "th", "in", "thresholds", ":", "\n", "        ", "y_pred", "=", "(", "y_prob", ">", "th", ")", "*", "np", ".", "ones_like", "(", "y_prob", ")", "\n", "true_rules", ",", "_", "=", "find_rules_ut", "(", "path", ",", "fold", ",", "idx", ",", "train_label", ",", "y_true", ",", "interested_template_ids", ")", "\n", "pred_rules", ",", "_", "=", "find_rules_ut", "(", "path", ",", "fold", ",", "idx", ",", "train_label", ",", "y_pred", ",", "interested_template_ids", ",", "pred", "=", "True", ")", "\n", "print", "(", "len", "(", "set", "(", "true_rules", ")", ")", ",", "len", "(", "set", "(", "pred_rules", ")", ")", ")", "\n", "f1", "=", "metrics", "(", "set", "(", "true_rules", ")", ",", "set", "(", "pred_rules", ")", ")", "[", "2", "]", "\n", "\n", "if", "best_f1", "<", "f1", ":", "\n", "            ", "best_f1", "=", "f1", "\n", "best_th", "=", "th", "\n", "", "", "return", "best_th", ",", "best_f1", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.utils.find_rules_ut_all": [[55, 79], ["graph.read_dictionary", "graph.read_dictionary", "tmp_name.replace", "rule.replace.replace", "numpy.where", "probality.reshape().argsort", "int", "probality.reshape"], "function", ["home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.graph.read_dictionary", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.graph.read_dictionary"], ["", "def", "find_rules_ut_all", "(", "path", ",", "train_label", ",", "probality", ",", "topk", ")", ":", "\n", "# print(pred)", "\n", "    ", "node_dict_file", "=", "path", "+", "'train/s1'", "+", "'/all_nodes.dict'", "# for all data", "\n", "template_dict_file", "=", "path", "+", "'train/s1'", "+", "'/all_unary_templates.dict'", "# for all data", "\n", "result", "=", "''", "\n", "\n", "node_dict", "=", "read_dictionary", "(", "node_dict_file", ")", "# {id: name}", "\n", "template_dict", "=", "read_dictionary", "(", "template_dict_file", ")", "# {id: template name}", "\n", "\n", "probality", "[", "np", ".", "where", "(", "train_label", "==", "1", ")", "]", "=", "0", "# ignore the true rules", "\n", "\n", "topk_idx", "=", "probality", ".", "reshape", "(", "-", "1", ")", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "[", "0", ":", "topk", "]", "\n", "\n", "for", "idx", "in", "topk_idx", ":", "\n", "        ", "n_id", "=", "idx", "//", "probality", ".", "shape", "[", "1", "]", "\n", "t_id", "=", "idx", "%", "probality", ".", "shape", "[", "1", "]", "\n", "if", "probality", "[", "n_id", ",", "t_id", "]", "<=", "0", ":", "\n", "            ", "break", "\n", "", "n_name", "=", "node_dict", "[", "n_id", "]", "\n", "tmp_name", "=", "template_dict", "[", "int", "(", "t_id", ")", "]", "\n", "rule", "=", "tmp_name", ".", "replace", "(", "'TempateExpression'", ",", "'ER'", ")", "\n", "rule", "=", "rule", ".", "replace", "(", "'?'", ",", "n_name", ")", "\n", "result", "+=", "rule", "+", "'\\n'", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.utils.find_rules_ut": [[83, 120], ["graph.read_dictionary", "graph.read_dictionary", "range", "numpy.where", "len", "str", "str", "numpy.where", "tmp_name.replace", "rule.replace.replace", "rules.append", "train_label.sum", "int"], "function", ["home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.graph.read_dictionary", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.graph.read_dictionary"], ["", "def", "find_rules_ut", "(", "path", ",", "fold", ",", "node_ids", ",", "train_label", ",", "template_ids", ",", "interested_template_ids", ",", "pred", "=", "False", ",", "easytask", "=", "False", ")", ":", "\n", "# print(pred)", "\n", "    ", "node_dict_file", "=", "path", "+", "'train/s'", "+", "str", "(", "fold", "+", "1", ")", "+", "'/nodes.dict'", "# for all data", "\n", "template_dict_file", "=", "path", "+", "'train/s'", "+", "str", "(", "fold", "+", "1", ")", "+", "'/unary_templates.dict'", "# for all data", "\n", "rules", "=", "[", "]", "\n", "result", "=", "''", "\n", "\n", "selected_templates", "=", "np", ".", "where", "(", "train_label", ".", "sum", "(", "axis", "=", "0", ")", ">", "2", ")", "[", "1", "]", "\n", "\n", "node_dict", "=", "read_dictionary", "(", "node_dict_file", ")", "# {id: name}", "\n", "template_dict", "=", "read_dictionary", "(", "template_dict_file", ")", "# {id: template name}", "\n", "\n", "for", "idx", "in", "range", "(", "len", "(", "node_ids", ")", ")", ":", "\n", "        ", "n_id", "=", "node_ids", "[", "idx", "]", "\n", "n_name", "=", "node_dict", "[", "n_id", "]", "\n", "# if pred:", "\n", "tmp_ids", "=", "np", ".", "where", "(", "template_ids", "[", "idx", "]", ">", "0", ")", "[", "0", "]", "\n", "# else:", "\n", "#     tmp_ids = template_ids[idx]", "\n", "if", "not", "tmp_ids", ".", "size", ":", "\n", "            ", "continue", "\n", "", "for", "id", "in", "tmp_ids", ":", "\n", "            ", "if", "easytask", ":", "\n", "                ", "t_id", "=", "selected_templates", "[", "id", "]", "\n", "", "else", ":", "\n", "                ", "t_id", "=", "id", "\n", "", "if", "train_label", "[", "n_id", ",", "t_id", "]", "==", "1", ":", "\n", "                ", "continue", "\n", "", "if", "pred", "and", "t_id", "not", "in", "interested_template_ids", ":", "\n", "                ", "continue", "\n", "", "tmp_name", "=", "template_dict", "[", "int", "(", "t_id", ")", "]", "\n", "rule", "=", "tmp_name", ".", "replace", "(", "'TempateExpression'", ",", "'ER'", ")", "\n", "rule", "=", "rule", ".", "replace", "(", "'?'", ",", "n_name", ")", "\n", "rules", ".", "append", "(", "rule", ")", "\n", "result", "+=", "rule", "+", "'\\n'", "\n", "\n", "", "", "return", "rules", ",", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.utils.find_rules_bt": [[125, 151], ["graph.read_dictionary", "graph.read_dictionary", "range", "len", "int", "int", "numpy.where"], "function", ["home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.graph.read_dictionary", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.graph.read_dictionary"], ["", "def", "find_rules_bt", "(", "dataset", ",", "type", ",", "triples", ",", "pred_templates", ",", "pred", "=", "False", ")", ":", "\n", "    ", "node_dict_file", "=", "'dataset/'", "+", "type", "+", "'/'", "+", "dataset", "+", "'/nodes.dict'", "\n", "template_dict_file", "=", "'dataset/'", "+", "type", "+", "'/'", "+", "dataset", "+", "'/edges.dict'", "\n", "result", "=", "''", "\n", "\n", "node_dict", "=", "read_dictionary", "(", "node_dict_file", ")", "# {id: name}", "\n", "template_dict", "=", "read_dictionary", "(", "template_dict_file", ")", "# {id: template name}", "\n", "s", "=", "triples", "[", ":", ",", "0", "]", "\n", "r", "=", "triples", "[", ":", ",", "1", "]", "\n", "t", "=", "triples", "[", ":", ",", "2", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "s", ")", ")", ":", "\n", "        ", "s_id", "=", "s", "[", "idx", "]", "\n", "t_id", "=", "t", "[", "idx", "]", "\n", "s_name", "=", "node_dict", "[", "int", "(", "s_id", ")", "]", "\n", "t_name", "=", "node_dict", "[", "int", "(", "t_id", ")", "]", "\n", "if", "pred", ":", "\n", "            ", "tmp_ids", "=", "np", ".", "where", "(", "pred_templates", "[", "idx", "]", ">", "0", ")", "[", "0", "]", "# for pred label", "\n", "if", "not", "tmp_ids", ".", "size", ":", "\n", "                ", "continue", "\n", "", "", "else", ":", "\n", "            ", "tmp_ids", "=", "r", "[", "idx", "]", "# for true label", "\n", "", "for", "tid", "in", "tmp_ids", ":", "\n", "            ", "tmp_name", "=", "template_dict", "[", "tid", "]", "\n", "result", "+=", "s_name", "+", "'\\t'", "+", "tmp_name", "[", ":", "-", "1", "]", "+", "'\\t'", "+", "t_name", "+", "'\\n'", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.utils.get_adj_and_degrees": [[158, 169], ["enumerate", "numpy.array", "adj_list[].append", "numpy.array", "range", "len"], "function", ["None"], ["", "def", "get_adj_and_degrees", "(", "num_nodes", ",", "triplets", ")", ":", "\n", "    ", "\"\"\" Get adjacency list and degrees of the graph\n    \"\"\"", "\n", "adj_list", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_nodes", ")", "]", "\n", "for", "i", ",", "triplet", "in", "enumerate", "(", "triplets", ")", ":", "# i can be regarded as edge_id", "\n", "        ", "adj_list", "[", "triplet", "[", "0", "]", "]", ".", "append", "(", "[", "i", ",", "triplet", "[", "2", "]", "]", ")", "\n", "#adj_list[triplet[2]].append([i, triplet[0]])", "\n", "\n", "", "degrees", "=", "np", ".", "array", "(", "[", "len", "(", "a", ")", "for", "a", "in", "adj_list", "]", ")", "# out degree", "\n", "adj_list", "=", "[", "np", ".", "array", "(", "a", ")", "for", "a", "in", "adj_list", "]", "\n", "return", "adj_list", ",", "degrees", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.utils.sample_edge_neighborhood": [[170, 211], ["numpy.zeros", "numpy.array", "numpy.array", "numpy.array", "range", "numpy.random.choice", "numpy.random.choice", "numpy.sum", "numpy.ones_like", "numpy.sum", "numpy.arange", "len", "numpy.random.choice", "numpy.arange", "numpy.random.choice", "range", "numpy.arange", "numpy.arange", "numpy.where"], "function", ["None"], ["", "def", "sample_edge_neighborhood", "(", "adj_list", ",", "degrees", ",", "n_triplets", ",", "sample_size", ")", ":", "\n", "    ", "\"\"\" Edge neighborhood sampling to reduce training graph size\n    \"\"\"", "\n", "#print(sample_size)", "\n", "edges", "=", "np", ".", "zeros", "(", "sample_size", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "#initialize", "\n", "sample_counts", "=", "np", ".", "array", "(", "[", "d", "for", "d", "in", "degrees", "]", ")", "# sample count for each node", "\n", "picked", "=", "np", ".", "array", "(", "[", "False", "for", "_", "in", "range", "(", "n_triplets", ")", "]", ")", "# num_triple * 1", "\n", "seen", "=", "np", ".", "array", "(", "[", "False", "for", "_", "in", "degrees", "]", ")", "# num_node * 1", "\n", "for", "i", "in", "range", "(", "0", ",", "sample_size", ")", ":", "\n", "        ", "weights", "=", "sample_counts", "*", "(", "~", "seen", ")", "\n", "if", "np", ".", "sum", "(", "weights", ")", "==", "0", ":", "\n", "            ", "weights", "=", "np", ".", "ones_like", "(", "weights", ")", "\n", "weights", "[", "np", ".", "where", "(", "sample_counts", "==", "0", ")", "]", "=", "0", "\n", "", "probabilities", "=", "(", "weights", ")", "/", "np", ".", "sum", "(", "weights", ")", "\n", "chosen_vertex", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "degrees", ".", "shape", "[", "0", "]", ")", ",", "\n", "p", "=", "probabilities", ")", "\n", "#print(chosen_vertex)", "\n", "while", "len", "(", "adj_list", "[", "chosen_vertex", "]", ")", "==", "0", ":", "\n", "            ", "chosen_vertex", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "degrees", ".", "shape", "[", "0", "]", ")", ",", "\n", "p", "=", "probabilities", ")", "\n", "", "chosen_adj_list", "=", "adj_list", "[", "chosen_vertex", "]", "\n", "seen", "[", "chosen_vertex", "]", "=", "True", "\n", "\n", "chosen_edge", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "chosen_adj_list", ".", "shape", "[", "0", "]", ")", ")", "\n", "chosen_edge", "=", "chosen_adj_list", "[", "chosen_edge", "]", "\n", "edge_number", "=", "chosen_edge", "[", "0", "]", "# can be regarded as edge_id", "\n", "\n", "while", "picked", "[", "edge_number", "]", ":", "# if edge has been choosed before, then choose again", "\n", "            ", "chosen_edge", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "chosen_adj_list", ".", "shape", "[", "0", "]", ")", ")", "\n", "chosen_edge", "=", "chosen_adj_list", "[", "chosen_edge", "]", "\n", "edge_number", "=", "chosen_edge", "[", "0", "]", "\n", "\n", "", "edges", "[", "i", "]", "=", "edge_number", "\n", "other_vertex", "=", "chosen_edge", "[", "1", "]", "\n", "picked", "[", "edge_number", "]", "=", "True", "\n", "sample_counts", "[", "chosen_vertex", "]", "-=", "1", "\n", "sample_counts", "[", "other_vertex", "]", "-=", "1", "\n", "seen", "[", "other_vertex", "]", "=", "True", "\n", "", "return", "edges", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.utils.generate_sampled_graph_and_labels": [[212, 249], ["utils.sample_edge_neighborhood", "sample_edge_neighborhood.transpose", "numpy.unique", "numpy.reshape", "numpy.stack().transpose", "utils.negative_sampling", "int", "numpy.random.choice", "print", "print", "utils.build_graph_from_triplets", "len", "len", "numpy.arange", "len", "numpy.stack", "len", "len"], "function", ["home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.utils.sample_edge_neighborhood", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.utils.negative_sampling", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.utils.build_graph_from_triplets"], ["", "def", "generate_sampled_graph_and_labels", "(", "triplets", ",", "sample_size", ",", "split_size", ",", "\n", "num_rels", ",", "adj_list", ",", "degrees", ",", "\n", "negative_rate", ")", ":", "\n", "    ", "\"\"\"Get training graph and signals\n    First perform edge neighborhood sampling on graph, then perform negative\n    sampling to generate negative samples\n    \"\"\"", "\n", "# perform edge neighbor sampling", "\n", "edges", "=", "sample_edge_neighborhood", "(", "adj_list", ",", "degrees", ",", "len", "(", "triplets", ")", ",", "\n", "sample_size", ")", "\n", "\n", "# relabel nodes to have consecutive node ids", "\n", "edges", "=", "triplets", "[", "edges", "]", "\n", "src", ",", "rel", ",", "dst", "=", "edges", ".", "transpose", "(", ")", "\n", "uniq_v", ",", "edges", "=", "np", ".", "unique", "(", "(", "src", ",", "dst", ")", ",", "return_inverse", "=", "True", ")", "\n", "src", ",", "dst", "=", "np", ".", "reshape", "(", "edges", ",", "(", "2", ",", "-", "1", ")", ")", "\n", "relabeled_edges", "=", "np", ".", "stack", "(", "(", "src", ",", "rel", ",", "dst", ")", ")", ".", "transpose", "(", ")", "\n", "\n", "# negative sampling", "\n", "samples", ",", "labels", "=", "negative_sampling", "(", "relabeled_edges", ",", "len", "(", "uniq_v", ")", ",", "\n", "negative_rate", ")", "\n", "\n", "# further split graph, only half of the edges will be used as graph", "\n", "# structure, while the rest half is used as unseen positive samples", "\n", "split_size", "=", "int", "(", "sample_size", "*", "split_size", ")", "\n", "graph_split_ids", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "sample_size", ")", ",", "\n", "size", "=", "split_size", ",", "replace", "=", "False", ")", "\n", "src", "=", "src", "[", "graph_split_ids", "]", "\n", "dst", "=", "dst", "[", "graph_split_ids", "]", "\n", "rel", "=", "rel", "[", "graph_split_ids", "]", "\n", "\n", "# build DGL graph", "\n", "print", "(", "\"# sampled nodes: {}\"", ".", "format", "(", "len", "(", "uniq_v", ")", ")", ")", "\n", "print", "(", "\"# sampled edges: {}\"", ".", "format", "(", "len", "(", "src", ")", "*", "2", ")", ")", "\n", "g", ",", "rel", ",", "norm", ",", "edge_norm", "=", "build_graph_from_triplets", "(", "len", "(", "uniq_v", ")", ",", "num_rels", ",", "\n", "(", "src", ",", "rel", ",", "dst", ")", ")", "\n", "return", "g", ",", "uniq_v", ",", "rel", ",", "norm", ",", "samples", ",", "labels", ",", "edge_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.utils.comp_deg_norm": [[250, 255], ["g.in_degrees().float().numpy", "g.in_degrees().float", "numpy.isinf", "g.in_degrees", "range", "g.number_of_nodes"], "function", ["None"], ["", "def", "comp_deg_norm", "(", "g", ")", ":", "\n", "    ", "in_deg", "=", "g", ".", "in_degrees", "(", "range", "(", "g", ".", "number_of_nodes", "(", ")", ")", ")", ".", "float", "(", ")", ".", "numpy", "(", ")", "\n", "norm", "=", "1.0", "/", "in_deg", "\n", "norm", "[", "np", ".", "isinf", "(", "norm", ")", "]", "=", "0", "\n", "return", "norm", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.utils.build_graph_from_triplets": [[256, 283], ["dgl.DGLGraph", "dgl.DGLGraph.add_nodes", "numpy.concatenate", "sorted", "numpy.array().transpose", "dgl.DGLGraph.add_edges", "utils.comp_deg_norm", "print", "numpy.unique", "numpy.concatenate", "numpy.concatenate", "zip", "numpy.ones", "degrees.astype", "numpy.array", "len", "len"], "function", ["home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.utils.comp_deg_norm"], ["", "def", "build_graph_from_triplets", "(", "num_nodes", ",", "num_rels", ",", "triplets", ")", ":", "\n", "    ", "\"\"\" Create a DGL graph.\n        some edges are binary, but others single\n        This function also generates edge type and normalization factor\n        (reciprocal of node incoming degree)\n    \"\"\"", "\n", "g", "=", "dgl", ".", "DGLGraph", "(", ")", "\n", "g", ".", "add_nodes", "(", "num_nodes", ")", "\n", "\n", "src", ",", "rel", ",", "dst", "=", "triplets", "\n", "src", ",", "dst", "=", "np", ".", "concatenate", "(", "(", "src", ",", "dst", ")", ")", ",", "np", ".", "concatenate", "(", "(", "dst", ",", "src", ")", ")", "\n", "rel", "=", "np", ".", "concatenate", "(", "(", "rel", ",", "rel", ")", ")", "\n", "edges", "=", "sorted", "(", "zip", "(", "dst", ",", "src", ",", "rel", ")", ")", "\n", "dst", ",", "src", ",", "rel", "=", "np", ".", "array", "(", "edges", ")", ".", "transpose", "(", ")", "\n", "g", ".", "add_edges", "(", "src", ",", "dst", ")", "\n", "\n", "#src, rel, dst = triplets", "\n", "#g.add_edges(src, dst)", "\n", "norm", "=", "comp_deg_norm", "(", "g", ")", "\n", "print", "(", "\"# nodes: {}, # edges: {}\"", ".", "format", "(", "num_nodes", ",", "len", "(", "src", ")", ")", ")", "\n", "\n", "# normalize by dst degree, compute degrees according to edge_type", "\n", "_", ",", "inverse_index", ",", "count", "=", "np", ".", "unique", "(", "(", "dst", ",", "rel", ")", ",", "axis", "=", "1", ",", "return_inverse", "=", "True", ",", "\n", "return_counts", "=", "True", ")", "\n", "degrees", "=", "count", "[", "inverse_index", "]", "# c_{i,r} for each relation type", "\n", "edge_norm", "=", "np", ".", "ones", "(", "len", "(", "dst", ")", ",", "dtype", "=", "np", ".", "float32", ")", "/", "degrees", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "g", ",", "rel", ",", "norm", ",", "edge_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.utils.build_test_graph": [[284, 288], ["edges.transpose", "print", "utils.build_graph_from_triplets"], "function", ["home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.utils.build_graph_from_triplets"], ["", "def", "build_test_graph", "(", "num_nodes", ",", "num_rels", ",", "edges", ")", ":", "\n", "    ", "src", ",", "rel", ",", "dst", "=", "edges", ".", "transpose", "(", ")", "\n", "print", "(", "\"Test graph:\"", ")", "\n", "return", "build_graph_from_triplets", "(", "num_nodes", ",", "num_rels", ",", "(", "src", ",", "rel", ",", "dst", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.utils.negative_sampling": [[289, 303], ["len", "numpy.tile", "numpy.zeros", "numpy.random.randint", "numpy.random.uniform", "numpy.concatenate"], "function", ["None"], ["", "def", "negative_sampling", "(", "pos_samples", ",", "num_entity", ",", "negative_rate", ")", ":", "\n", "    ", "size_of_batch", "=", "len", "(", "pos_samples", ")", "\n", "num_to_generate", "=", "size_of_batch", "*", "negative_rate", "\n", "neg_samples", "=", "np", ".", "tile", "(", "pos_samples", ",", "(", "negative_rate", ",", "1", ")", ")", "\n", "labels", "=", "np", ".", "zeros", "(", "size_of_batch", "*", "(", "negative_rate", "+", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "labels", "[", ":", "size_of_batch", "]", "=", "1", "\n", "values", "=", "np", ".", "random", ".", "randint", "(", "num_entity", ",", "size", "=", "num_to_generate", ")", "# node_id", "\n", "choices", "=", "np", ".", "random", ".", "uniform", "(", "size", "=", "num_to_generate", ")", "\n", "subj", "=", "choices", ">", "0.5", "\n", "obj", "=", "choices", "<=", "0.5", "\n", "neg_samples", "[", "subj", ",", "0", "]", "=", "values", "[", "subj", "]", "\n", "neg_samples", "[", "obj", ",", "2", "]", "=", "values", "[", "obj", "]", "\n", "\n", "return", "np", ".", "concatenate", "(", "(", "pos_samples", ",", "neg_samples", ")", ")", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.utils.sort_and_rank": [[310, 315], ["torch.sort", "torch.nonzero", "indices[].view", "target.view"], "function", ["None"], ["", "def", "sort_and_rank", "(", "score", ",", "target", ")", ":", "\n", "    ", "_", ",", "indices", "=", "torch", ".", "sort", "(", "score", ",", "dim", "=", "1", ",", "descending", "=", "True", ")", "\n", "indices", "=", "torch", ".", "nonzero", "(", "indices", "==", "target", ".", "view", "(", "-", "1", ",", "1", ")", ")", "\n", "indices", "=", "indices", "[", ":", ",", "1", "]", ".", "view", "(", "-", "1", ")", "\n", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.utils.perturb_and_get_rank": [[316, 342], ["range", "torch.cat", "min", "emb_ar.transpose().unsqueeze.transpose().unsqueeze", "embedding.transpose().unsqueeze", "torch.bmm", "torch.sum", "torch.sigmoid", "print", "ranks.append", "utils.sort_and_rank", "emb_ar.transpose().unsqueeze.transpose", "embedding.transpose"], "function", ["home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.utils.sort_and_rank"], ["", "def", "perturb_and_get_rank", "(", "embedding", ",", "w", ",", "a", ",", "r", ",", "b", ",", "num_entity", ",", "batch_size", "=", "100", ")", ":", "\n", "    ", "\"\"\" Perturb one element in the triplets\n    \"\"\"", "\n", "n_batch", "=", "(", "num_entity", "+", "batch_size", "-", "1", ")", "//", "batch_size", "\n", "ranks", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "n_batch", ")", ":", "\n", "#print(\"batch {} / {}\".format(idx, n_batch))", "\n", "        ", "batch_start", "=", "idx", "*", "batch_size", "\n", "batch_end", "=", "min", "(", "num_entity", ",", "(", "idx", "+", "1", ")", "*", "batch_size", ")", "\n", "batch_a", "=", "a", "[", "batch_start", ":", "batch_end", "]", "\n", "batch_r", "=", "r", "[", "batch_start", ":", "batch_end", "]", "\n", "emb_ar", "=", "embedding", "[", "batch_a", "]", "*", "w", "[", "batch_r", "]", "\n", "#print('embedding[batch_a] * w[batch_r]', emb_ar.shape)", "\n", "emb_ar", "=", "emb_ar", ".", "transpose", "(", "0", ",", "1", ")", ".", "unsqueeze", "(", "2", ")", "# size: D x E x 1", "\n", "#print('emb_ar.transpose(0, 1).unsqueeze(2)', emb_ar.shape)", "\n", "emb_c", "=", "embedding", ".", "transpose", "(", "0", ",", "1", ")", ".", "unsqueeze", "(", "1", ")", "# size: D x 1 x V", "\n", "#print('emb_c', emb_c.shape)", "\n", "# out-prod and reduce sum", "\n", "out_prod", "=", "torch", ".", "bmm", "(", "emb_ar", ",", "emb_c", ")", "# size D x E x V", "\n", "#print(out_prod.shape)", "\n", "score", "=", "torch", ".", "sum", "(", "out_prod", ",", "dim", "=", "0", ")", "# size E x V", "\n", "score", "=", "torch", ".", "sigmoid", "(", "score", ")", "\n", "print", "(", "'score'", ",", "score", ")", "\n", "target", "=", "b", "[", "batch_start", ":", "batch_end", "]", "\n", "ranks", ".", "append", "(", "sort_and_rank", "(", "score", ",", "target", ")", ")", "\n", "", "return", "torch", ".", "cat", "(", "ranks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.utils.evaluate": [[346, 373], ["torch.no_grad", "model.evaluate", "utils.perturb_and_get_rank", "utils.perturb_and_get_rank", "torch.cat", "torch.mean", "torch.mean.item", "torch.mean", "hit_n.append", "torch.cat.float", "torch.mean.item"], "function", ["home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.utils.evaluate", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.utils.perturb_and_get_rank", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.utils.perturb_and_get_rank"], ["", "def", "evaluate", "(", "test_graph", ",", "model", ",", "test_triplets", ",", "num_entity", ",", "hits", "=", "[", "]", ",", "eval_bz", "=", "100", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "embedding", ",", "w", "=", "model", ".", "evaluate", "(", "test_graph", ")", "\n", "s", "=", "test_triplets", "[", ":", ",", "0", "]", "\n", "r", "=", "test_triplets", "[", ":", ",", "1", "]", "\n", "o", "=", "test_triplets", "[", ":", ",", "2", "]", "\n", "\n", "#print(w[0])", "\n", "#print(w.detach().numpy().shape)", "\n", "#print(embedding[o])", "\n", "# perturb subject", "\n", "ranks_s", "=", "perturb_and_get_rank", "(", "embedding", ",", "w", ",", "o", ",", "r", ",", "s", ",", "num_entity", ",", "eval_bz", ")", "\n", "# perturb object", "\n", "ranks_o", "=", "perturb_and_get_rank", "(", "embedding", ",", "w", ",", "s", ",", "r", ",", "o", ",", "num_entity", ",", "eval_bz", ")", "\n", "\n", "ranks", "=", "torch", ".", "cat", "(", "[", "ranks_s", ",", "ranks_o", "]", ")", "\n", "ranks", "+=", "1", "# change to 1-indexed", "\n", "\n", "mrr", "=", "torch", ".", "mean", "(", "1.0", "/", "ranks", ".", "float", "(", ")", ")", "\n", "#print(\"MRR (raw): {:.6f}\".format(mrr.item()))", "\n", "\n", "hit_n", "=", "[", "]", "\n", "for", "hit", "in", "hits", ":", "\n", "            ", "avg_count", "=", "torch", ".", "mean", "(", "(", "ranks", "<=", "hit", ")", ".", "float", "(", ")", ")", "\n", "hit_n", ".", "append", "(", "avg_count", ".", "item", "(", ")", ")", "\n", "#print(\"Hits (raw) @ {}: {:.6f}\".format(hit, avg_count.item()))", "\n", "", "", "return", "mrr", ".", "item", "(", ")", ",", "hit_n", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.utils.compute_score": [[376, 405], ["torch.no_grad", "model.evaluate", "emb_s.transpose().unsqueeze.transpose().unsqueeze", "w.transpose().unsqueeze.transpose().unsqueeze", "torch.bmm", "mult_sr.transpose.transpose", "mult_sr.transpose.transpose", "emb_t.unsqueeze.unsqueeze", "torch.bmm", "products.squeeze.squeeze", "torch.sigmoid", "sklearn.preprocessing.label_binarize", "emb_s.transpose().unsqueeze.transpose", "w.transpose().unsqueeze.transpose", "numpy.arange", "w.transpose().unsqueeze.size"], "function", ["home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.utils.evaluate"], ["", "def", "compute_score", "(", "test_graph", ",", "model", ",", "test_triplets", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "embedding", ",", "w", "=", "model", ".", "evaluate", "(", "test_graph", ")", "\n", "s", "=", "test_triplets", "[", ":", ",", "0", "]", "\n", "r", "=", "test_triplets", "[", ":", ",", "1", "]", "\n", "t", "=", "test_triplets", "[", ":", ",", "2", "]", "\n", "\n", "emb_s", "=", "embedding", "[", "s", "]", "# num_node * num_fea", "\n", "emb_t", "=", "embedding", "[", "t", "]", "\n", "#print(w[0])", "\n", "#print(emb_t)", "\n", "\n", "emb_s", "=", "emb_s", ".", "transpose", "(", "0", ",", "1", ")", ".", "unsqueeze", "(", "2", ")", "# num_fea * num_node * 1", "\n", "w", "=", "w", ".", "transpose", "(", "0", ",", "1", ")", ".", "unsqueeze", "(", "1", ")", "# num_fea * 1 * num_rel", "\n", "mult_sr", "=", "torch", ".", "bmm", "(", "emb_s", ",", "w", ")", "# emb_s * w, size = num_fea * num_node * num_rel", "\n", "\n", "mult_sr", "=", "mult_sr", ".", "transpose", "(", "1", ",", "2", ")", "# num_fea * num_rel * num_node", "\n", "mult_sr", "=", "mult_sr", ".", "transpose", "(", "0", ",", "2", ")", "# num_node * num_rel * num_fea", "\n", "emb_t", "=", "emb_t", ".", "unsqueeze", "(", "2", ")", "# num_node * num_fea * 1", "\n", "\n", "products", "=", "torch", ".", "bmm", "(", "mult_sr", ",", "emb_t", ")", "# num_node * num_rel * 1", "\n", "products", "=", "products", ".", "squeeze", "(", "2", ")", "# num_node * num_rel", "\n", "score", "=", "torch", ".", "sigmoid", "(", "products", ")", "# num_node * num_rel", "\n", "\n", "\n", "y_true", "=", "label_binarize", "(", "r", ",", "classes", "=", "np", ".", "arange", "(", "w", ".", "size", "(", ")", "[", "2", "]", ")", ")", "# num_node * num_relss", "\n", "#print(y_true)", "\n", "#print(score)", "\n", "", "return", "score", ",", "y_true", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.utils.select_threshold": [[407, 417], ["range", "sorted", "best_thred.append", "set", "f1.append", "numpy.ones_like", "sklearn.metrics.f1_score", "int", "numpy.argmax", "numpy.array"], "function", ["None"], ["", "def", "select_threshold", "(", "y_true", ",", "y_prob", ",", "num_class", ")", ":", "\n", "    ", "best_thred", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_class", ")", ":", "\n", "        ", "thresholds", "=", "sorted", "(", "set", "(", "y_prob", "[", ":", ",", "i", "]", ")", ")", "\n", "f1", "=", "[", "]", "\n", "for", "th", "in", "thresholds", ":", "\n", "            ", "y_pred", "=", "(", "y_prob", "[", ":", ",", "i", "]", ">", "th", ")", "*", "np", ".", "ones_like", "(", "y_prob", "[", ":", ",", "i", "]", ")", "\n", "f1", ".", "append", "(", "f1_score", "(", "y_true", "[", ":", ",", "i", "]", ",", "y_pred", ",", "average", "=", "'micro'", ")", ")", "\n", "", "best_thred", ".", "append", "(", "thresholds", "[", "int", "(", "np", ".", "argmax", "(", "np", ".", "array", "(", "f1", ")", ")", ")", "]", ")", "\n", "", "return", "best_thred", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.utils._select_threshold": [[418, 431], ["print", "numpy.array", "f1.append", "max", "max", "range", "numpy.ones_like", "sklearn.metrics.f1_score", "int", "numpy.argmax", "numpy.array"], "function", ["None"], ["", "def", "_select_threshold", "(", "y_true", ",", "y_prob", ")", ":", "\n", "# print(y_true.shape)", "\n", "    ", "thresholds", "=", "np", ".", "array", "(", "range", "(", "1", ",", "1000", ")", ")", "/", "1000.0", "#sorted(set(y_prob.reshape(-1)))", "\n", "f1", "=", "[", "]", "\n", "for", "th", "in", "thresholds", ":", "\n", "        ", "y_pred", "=", "(", "y_prob", ">", "th", ")", "*", "np", ".", "ones_like", "(", "y_prob", ")", "\n", "#true_rules, _ = find_rules_ut(path, fold, idx, train_label, y_true, interested_template_ids)", "\n", "# pred_rules, _ = find_rules_ut(path, fold, idx, train_label, y_pred, interested_template_ids)", "\n", "# f1.append(metrics(set(true_rules), set(pred_rules))[2])", "\n", "f1", ".", "append", "(", "f1_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "'micro'", ")", ")", "\n", "", "best_thred", "=", "thresholds", "[", "int", "(", "np", ".", "argmax", "(", "np", ".", "array", "(", "f1", ")", ")", ")", "]", "\n", "print", "(", "max", "(", "f1", ")", ")", "\n", "return", "best_thred", ",", "max", "(", "f1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.utils.metrics": [[432, 446], ["len", "print", "test_rules.intersection", "len", "len", "len", "len", "set", "set", "set", "set"], "function", ["None"], ["", "def", "metrics", "(", "test_rules", ",", "pred_rules", ")", ":", "\n", "    ", "acc_num", "=", "len", "(", "test_rules", ".", "intersection", "(", "pred_rules", ")", ")", "\n", "\n", "# for r in range(len(set(test_rules))):", "\n", "#     if test_rules[r] in pred_rules:", "\n", "#         # print(test_rules[r])", "\n", "#         acc_num += 1", "\n", "\n", "precision", "=", "acc_num", "/", "(", "len", "(", "set", "(", "pred_rules", ")", ")", "+", "1e-10", ")", "\n", "recall", "=", "acc_num", "/", "(", "len", "(", "set", "(", "test_rules", ")", ")", "+", "1e-10", ")", "\n", "f1", "=", "2.0", "*", "precision", "*", "recall", "/", "(", "precision", "+", "recall", "+", "1e-10", ")", "\n", "print", "(", "acc_num", ",", "len", "(", "set", "(", "test_rules", ")", ")", ",", "len", "(", "set", "(", "pred_rules", ")", ")", ")", "\n", "#map = average_precision_score(test_rule_labels, pred_rule_labels)", "\n", "return", "precision", ",", "recall", ",", "f1", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.ontology_com.utils.find_same_etype": [[450, 457], ["collections.defaultdict", "enumerate", "tally[].append", "collections.defaultdict.items", "len", "int"], "function", ["None"], ["", "def", "find_same_etype", "(", "etype", ")", ":", "\n", "    ", "tally", "=", "defaultdict", "(", "list", ")", "\n", "for", "i", ",", "item", "in", "enumerate", "(", "etype", ")", ":", "\n", "        ", "tally", "[", "int", "(", "item", ")", "]", ".", "append", "(", "i", ")", "\n", "\n", "", "return", "(", "(", "key", ",", "locs", ")", "for", "key", ",", "locs", "in", "tally", ".", "items", "(", ")", "\n", "if", "len", "(", "locs", ")", ">", "1", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.extract_mv.extract_nomask.main": [[8, 172], ["os.path.join", "isinstance", "init_logging_path", "logging.basicConfig", "logging.info", "torch.cuda.is_available", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "os.listdir", "logging.info", "logging.info", "os.getcwd", "getopt.getopt", "option.split.split", "ValueError", "os.path.exists", "os.makedirs", "os.path.join", "os.path.join", "os.path.join", "logging.info", "tokenize_nomask", "extract_mv_nomask", "write_out", "write_out", "print", "sys.exit", "print", "sys.exit", "str", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "str", "logging.info", "file.split", "os.path.join", "len", "logging.info", "torch.mean", "torch.mean", "torch.mean", "torch.save", "torch.mean().cpu", "os.path.join", "torch.save", "str", "os.path.join", "range", "write_out", "os.path.join", "len", "os.listdir", "range", "torch.mean", "torch.mean", "embeddings[].cpu", "os.path.join", "range", "len", "write_out", "os.path.join", "bert_version.split", "bert_version.split", "bert_version.split", "os.listdir", "str", "torch.mean", "torch.mean", "os.path.join", "torch.save", "torch.mean", "os.path.join", "int", "round", "os.path.exists", "os.makedirs", "embeddings[].cpu", "os.path.join", "bert_version.split", "bert_version.split", "str", "str", "str", "str", "torch.mean.cpu().numpy", "str", "torch.mean.cpu().numpy", "str", "int", "len", "str", "torch.mean.cpu().numpy", "bert_version.split", "bert_version.split", "os.listdir", "torch.mean.cpu", "torch.mean.cpu().numpy", "torch.mean.cpu", "bert_version.split", "torch.mean.cpu", "torch.mean.cpu"], "function", ["home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.init_logging_path", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.extract_mv.utils.tokenize_nomask", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.extract_mv.utils.extract_mv_nomask", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.filtering_baseline.write_out", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.filtering_baseline.write_out", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.filtering_baseline.write_out", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.filtering_baseline.write_out"], ["def", "main", "(", "argv", ")", ":", "\n", "    ", "max_seq_length", "=", "128", "\n", "batch_size", "=", "5", "\n", "log_dir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "\"log/\"", ")", "\n", "\n", "logfile", "=", "'mv'", "\n", "input_dir", "=", "'../sents'", "# path of sentence files", "\n", "output_dir", "=", "'../out'", "\n", "bert_version", "=", "'roberta-base'", "#'bert-base-uncased'", "\n", "k", "=", "-", "1", "\n", "option", "=", "[", "'avg_each'", ",", "'mv_last'", "]", "# ['avg_all', 'avg_k', 'avg_each', 'avg_last', 'mv_last']", "\n", "\n", "try", ":", "\n", "        ", "opts", ",", "args", "=", "getopt", ".", "getopt", "(", "argv", ",", "\"hl:i:b:o:m:k:p:\"", ",", "[", "\"lfile=\"", ",", "\"idir=\"", ",", "\"batch_size=\"", ",", "\"odir=\"", ",", "\"model=\"", ",", "\"k=\"", ",", "\"option=\"", "]", ")", "\n", "", "except", "getopt", ".", "GetoptError", ":", "\n", "        ", "print", "(", "'extract_nomask_all.py -l <logfile> -i <input_dir> -b <batch_size> -o <output_dir> -m <bert_model> -k <first_k_layers> -p <option>'", ")", "\n", "sys", ".", "exit", "(", "2", ")", "\n", "", "for", "opt", ",", "arg", "in", "opts", ":", "\n", "        ", "if", "opt", "==", "'-h'", ":", "\n", "            ", "print", "(", "'extract_nomask_all.py -l <logfile> -i <input_dir> -b <batch_size> -o <output_dir> -m <bert_model>'", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "", "elif", "opt", "in", "(", "\"-l\"", ",", "\"--lfile\"", ")", ":", "\n", "            ", "logfile", "=", "arg", "\n", "", "elif", "opt", "in", "(", "\"-i\"", ",", "\"--idir\"", ")", ":", "# path of sentence files", "\n", "            ", "input_dir", "=", "arg", "\n", "", "elif", "opt", "in", "(", "\"-b\"", ",", "\"--batch_size\"", ")", ":", "\n", "            ", "batch_size", "=", "int", "(", "arg", ")", "\n", "", "elif", "opt", "in", "(", "\"-o\"", ",", "\"--odir\"", ")", ":", "# path to store mention vector files", "\n", "            ", "output_dir", "=", "arg", "\n", "", "elif", "opt", "in", "(", "\"-m\"", ",", "\"--model\"", ")", ":", "\n", "            ", "bert_version", "=", "arg", "\n", "", "elif", "opt", "in", "(", "\"-k\"", ",", "\"--k\"", ")", ":", "\n", "            ", "k", "=", "int", "(", "arg", ")", "\n", "", "elif", "opt", "in", "(", "\"-p\"", ",", "\"--option\"", ")", ":", "\n", "            ", "option", "=", "arg", "\n", "\n", "", "", "if", "isinstance", "(", "option", ",", "str", ")", ":", "\n", "        ", "option", "=", "option", ".", "split", "(", "','", ")", "\n", "# print(option, type(option))", "\n", "\n", "", "num_layer", "=", "12", "if", "'base'", "in", "bert_version", "else", "24", "\n", "if", "option", "==", "'avg_k'", "and", "k", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "'Please set the value of k when option is avg_k'", ")", "\n", "\n", "", "log_file_path", "=", "init_logging_path", "(", "log_dir", ",", "'extract_nomask_all'", ",", "logfile", ")", "\n", "logging", ".", "basicConfig", "(", "filename", "=", "log_file_path", ",", "\n", "level", "=", "10", ",", "\n", "format", "=", "'%(asctime)s %(levelname)s %(message)s'", ",", "\n", "datefmt", "=", "'%m/%d/%Y %I:%M:%S %p'", ",", "\n", ")", "\n", "\n", "logging", ".", "info", "(", "\"start logging: \"", "+", "log_file_path", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "\n", "", "usegpu", "=", "False", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "usegpu", "=", "True", "\n", "\n", "", "logging", ".", "info", "(", "'input dir is '", "+", "input_dir", ")", "\n", "logging", ".", "info", "(", "'output dir is '", "+", "output_dir", ")", "\n", "logging", ".", "info", "(", "'BERT version is '", "+", "bert_version", ")", "\n", "logging", ".", "info", "(", "'batch_size is '", "+", "str", "(", "batch_size", ")", ")", "\n", "\n", "# store avg vectors from each layer for each noun (24 lines in each file)", "\n", "if", "'avg_each'", "in", "option", ":", "\n", "        ", "avg_layer_dir", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "bert_version", ".", "split", "(", "'-'", ")", "[", "0", "]", "+", "'_nomask_avg_each_layer'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "avg_layer_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "avg_layer_dir", ")", "\n", "\n", "# store avg of first k layers", "\n", "", "", "if", "'avg_k'", "in", "option", ":", "\n", "        ", "avg_k_layer_dir", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "bert_version", ".", "split", "(", "'-'", ")", "[", "0", "]", "+", "'_nomask_avg_k_layers'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "avg_k_layer_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "avg_k_layer_dir", ")", "\n", "\n", "# store vectors from last layer for each noun, used for filtering", "\n", "", "", "if", "'mv_last'", "in", "option", ":", "\n", "        ", "mv_dir", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "bert_version", ".", "split", "(", "'-'", ")", "[", "0", "]", "+", "'_mv_nomask_last'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "mv_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "mv_dir", ")", "\n", "\n", "", "", "cnt", "=", "0", "\n", "avg_all_layers", "=", "''", "\n", "avg_k_layers", "=", "''", "\n", "if", "'avg_k'", "in", "option", "and", "k", "==", "-", "1", ":", "\n", "        ", "avg_k_layers", "=", "[", "''", "]", "*", "num_layer", "\n", "", "avg_last_layer", "=", "''", "\n", "logging", ".", "info", "(", "\"total number of words is \"", "+", "str", "(", "len", "(", "os", ".", "listdir", "(", "input_dir", ")", ")", ")", ")", "\n", "num_nosent", "=", "0", "\n", "for", "file", "in", "os", ".", "listdir", "(", "input_dir", ")", ":", "\n", "        ", "if", "cnt", "%", "1000", "==", "0", ":", "\n", "            ", "logging", ".", "info", "(", "str", "(", "round", "(", "cnt", "/", "len", "(", "os", ".", "listdir", "(", "input_dir", ")", ")", "*", "100", ",", "2", ")", ")", "+", "\" % processed\"", ")", "\n", "", "logging", ".", "info", "(", "'start extracting mention vectors using nomask model'", ")", "\n", "noun", "=", "file", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "if", "'avg_each'", "in", "option", "and", "noun", "+", "'.pt'", "in", "os", ".", "listdir", "(", "avg_layer_dir", ")", ":", "\n", "            ", "cnt", "+=", "1", "\n", "continue", "\n", "", "token_ids", ",", "input_mask", ",", "indices", "=", "tokenize_nomask", "(", "os", ".", "path", ".", "join", "(", "input_dir", ",", "file", ")", ",", "max_seq_length", ",", "bert_version", ")", "\n", "if", "len", "(", "token_ids", ")", "<", "1", ":", "\n", "            ", "logging", ".", "info", "(", "noun", "+", "\" has no sentence\"", ")", "\n", "num_nosent", "+=", "1", "\n", "cnt", "+=", "1", "\n", "continue", "\n", "", "embeddings", "=", "extract_mv_nomask", "(", "token_ids", ",", "input_mask", ",", "indices", ",", "bert_version", "=", "bert_version", ",", "batch_size", "=", "batch_size", ",", "usegpu", "=", "usegpu", ")", "# 24 * num_sent * 1024", "\n", "# print(embeddings.size())", "\n", "\n", "# avg of all layers", "\n", "if", "'avg_all'", "in", "option", ":", "\n", "            ", "avg_layer", "=", "torch", ".", "mean", "(", "embeddings", ",", "dim", "=", "0", ")", "# sent_n * dim", "\n", "avg_n", "=", "torch", ".", "mean", "(", "avg_layer", ",", "dim", "=", "0", ")", "\n", "avg_all_layers", "+=", "' '", ".", "join", "(", "[", "noun", "]", "+", "[", "str", "(", "v", ")", "for", "v", "in", "avg_n", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", ")", "+", "'\\n'", "\n", "\n", "# average of first k layers", "\n", "", "if", "'avg_k'", "in", "option", ":", "\n", "            ", "if", "k", "==", "-", "1", ":", "# avg for all first k layers iteratively", "\n", "                ", "for", "i", "in", "range", "(", "1", ",", "embeddings", ".", "shape", "[", "0", "]", "+", "1", ")", ":", "\n", "                    ", "avg_i", "=", "torch", ".", "mean", "(", "embeddings", "[", ":", "i", "]", ",", "dim", "=", "0", ")", "\n", "avg_n", "=", "torch", ".", "mean", "(", "avg_i", ",", "dim", "=", "0", ")", "\n", "avg_k_layers", "[", "i", "-", "1", "]", "+=", "' '", ".", "join", "(", "[", "noun", "]", "+", "[", "str", "(", "v", ")", "for", "v", "in", "avg_n", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", ")", "+", "'\\n'", "\n", "", "", "else", ":", "# avg for first k layers only", "\n", "                ", "avg_k", "=", "torch", ".", "mean", "(", "embeddings", "[", ":", "k", "]", ",", "dim", "=", "0", ")", "\n", "avg_n", "=", "torch", ".", "mean", "(", "avg_k", ",", "dim", "=", "0", ")", "\n", "avg_k_layers", "+=", "' '", ".", "join", "(", "[", "noun", "]", "+", "[", "str", "(", "v", ")", "for", "v", "in", "avg_n", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", ")", "+", "'\\n'", "\n", "\n", "# last hidden layer", "\n", "", "", "if", "'avg_last'", "in", "option", ":", "\n", "            ", "avg_n", "=", "torch", ".", "mean", "(", "embeddings", "[", "-", "1", "]", ",", "dim", "=", "0", ")", "\n", "avg_last_layer", "+=", "' '", ".", "join", "(", "[", "noun", "]", "+", "[", "str", "(", "v", ")", "for", "v", "in", "avg_n", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", ")", "+", "'\\n'", "\n", "\n", "", "if", "'mv_last'", "in", "option", ":", "\n", "            ", "torch", ".", "save", "(", "embeddings", "[", "-", "1", "]", ".", "cpu", "(", ")", ",", "os", ".", "path", ".", "join", "(", "mv_dir", ",", "noun", "+", "'.pt'", ")", ")", "\n", "# write_csv(os.path.join(mv_dir, noun + '.csv'), embeddings[-1].cpu().numpy())", "\n", "# store vectors from each layer for each noun, used for filtering", "\n", "", "elif", "'mv_each_layer'", "in", "option", ":", "\n", "            ", "for", "l", "in", "range", "(", "embeddings", ".", "shape", "[", "0", "]", ")", ":", "# number layer", "\n", "                ", "l_dir", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "bert_version", ".", "split", "(", "'-'", ")", "[", "0", "]", "+", "'_mv_nomask_'", "+", "str", "(", "l", "+", "1", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "l_dir", ")", ":", "\n", "                    ", "os", ".", "makedirs", "(", "l_dir", ")", "\n", "", "torch", ".", "save", "(", "embeddings", "[", "l", "]", ".", "cpu", "(", ")", ",", "os", ".", "path", ".", "join", "(", "l_dir", ",", "noun", "+", "'.pt'", ")", ")", "\n", "# write_csv(os.path.join(l_dir, noun + '.csv'), embeddings[l].cpu().numpy())", "\n", "\n", "# avg of each layer individually", "\n", "", "", "if", "'avg_each'", "in", "option", ":", "\n", "            ", "avg_each_layer", "=", "torch", ".", "mean", "(", "embeddings", ",", "dim", "=", "1", ")", ".", "cpu", "(", ")", "# average among all sentences, shape = (24 * 1024)", "\n", "nomask_out_file", "=", "os", ".", "path", ".", "join", "(", "avg_layer_dir", ",", "noun", "+", "'.pt'", ")", "\n", "torch", ".", "save", "(", "avg_each_layer", ",", "nomask_out_file", ")", "\n", "\n", "", "cnt", "+=", "1", "\n", "\n", "", "logging", ".", "info", "(", "str", "(", "num_nosent", ")", "+", "\" words have no sentence.\"", ")", "\n", "logging", ".", "info", "(", "'Done.'", ")", "\n", "\n", "if", "'avg_all'", "in", "option", "and", "avg_all_layers", ":", "\n", "        ", "write_out", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "bert_version", ".", "split", "(", "'-'", ")", "[", "0", "]", "+", "'_nomask_avg_all_layers.txt'", ")", ",", "avg_all_layers", ")", "\n", "", "if", "'avg_k'", "in", "option", "and", "avg_k_layers", ":", "\n", "        ", "if", "k", "==", "-", "1", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "avg_k_layers", ")", ")", ":", "\n", "                ", "write_out", "(", "os", ".", "path", ".", "join", "(", "avg_k_layer_dir", ",", "bert_version", ".", "split", "(", "'-'", ")", "[", "0", "]", "+", "'_nomask_avg_'", "+", "str", "(", "i", "+", "1", ")", "+", "'_layers.txt'", ")", ",", "avg_k_layers", "[", "i", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "write_out", "(", "os", ".", "path", ".", "join", "(", "avg_k_layer_dir", ",", "bert_version", ".", "split", "(", "'-'", ")", "[", "0", "]", "+", "'_nomask_avg_'", "+", "str", "(", "k", ")", "+", "'_layers.txt'", ")", ",", "avg_k_layers", ")", "\n", "", "", "if", "'avg_last'", "in", "option", "and", "avg_last_layer", ":", "\n", "        ", "write_out", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "bert_version", ".", "split", "(", "'-'", ")", "[", "0", "]", "+", "'_nomask_avg_last_layer.txt'", ")", ",", "avg_last_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.extract_mv.extract_mask.main": [[8, 115], ["os.path.join", "isinstance", "init_logging_path", "logging.basicConfig", "logging.info", "torch.cuda.is_available", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "os.listdir", "logging.info", "logging.info", "os.getcwd", "getopt.getopt", "option.split.split", "os.path.exists", "os.makedirs", "os.path.join", "logging.info", "tokenize_mask", "extract_mv_mask", "write_out", "print", "sys.exit", "print", "sys.exit", "os.path.exists", "os.makedirs", "str", "str", "logging.info", "file.split", "os.path.join", "len", "logging.info", "range", "torch.save", "torch.mean", "str", "os.path.join", "len", "os.listdir", "os.path.join", "torch.save", "embeddings[].cpu", "os.path.join", "bert_version.split", "os.listdir", "str", "os.path.exists", "os.makedirs", "embeddings[].cpu", "os.path.join", "int", "round", "str", "bert_version.split", "str", "bert_version.split", "torch.mean.cpu().numpy", "len", "os.listdir", "torch.mean.cpu"], "function", ["home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.init_logging_path", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.extract_mv.utils.tokenize_mask", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.extract_mv.utils.extract_mv_mask", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.filtering_baseline.write_out"], ["def", "main", "(", "argv", ")", ":", "\n", "    ", "max_seq_length", "=", "128", "\n", "batch_size", "=", "5", "\n", "log_dir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "\"log/\"", ")", "\n", "\n", "logfile", "=", "'mv'", "\n", "input_dir", "=", "'../sents'", "# path of sentence files", "\n", "output_dir", "=", "'../out'", "\n", "bert_version", "=", "'roberta-base'", "\n", "option", "=", "[", "'mv_last'", ",", "'avg_last'", "]", "\n", "\n", "try", ":", "\n", "        ", "opts", ",", "args", "=", "getopt", ".", "getopt", "(", "argv", ",", "\"hl:i:b:o:m:p:\"", ",", "[", "\"lfile=\"", ",", "\"idir=\"", ",", "\"batch_size=\"", ",", "\"odir=\"", ",", "\"model=\"", ",", "\"option=\"", "]", ")", "\n", "", "except", "getopt", ".", "GetoptError", ":", "\n", "        ", "print", "(", "'extract_mask.py -l <logfile> -i <input_dir> -b <batch_size> -o <output_dir> -m <bert_model> -p <option>'", ")", "\n", "sys", ".", "exit", "(", "2", ")", "\n", "", "for", "opt", ",", "arg", "in", "opts", ":", "\n", "        ", "if", "opt", "==", "'-h'", ":", "\n", "            ", "print", "(", "'extract_mask.py -l <logfile> -i <input_dir> -b <batch_size> -o <output_dir> -m <bert_model> -p <option>'", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "", "elif", "opt", "in", "(", "\"-l\"", ",", "\"--lfile\"", ")", ":", "\n", "            ", "logfile", "=", "arg", "\n", "", "elif", "opt", "in", "(", "\"-i\"", ",", "\"--idir\"", ")", ":", "# path of sentence files", "\n", "            ", "input_dir", "=", "arg", "\n", "", "elif", "opt", "in", "(", "\"-b\"", ",", "\"--batch_size\"", ")", ":", "\n", "            ", "batch_size", "=", "int", "(", "arg", ")", "\n", "", "elif", "opt", "in", "(", "\"-o\"", ",", "\"--odir\"", ")", ":", "# path to store mention vector files", "\n", "            ", "output_dir", "=", "arg", "\n", "", "elif", "opt", "in", "(", "\"-m\"", ",", "\"--model\"", ")", ":", "\n", "            ", "bert_version", "=", "arg", "\n", "", "elif", "opt", "in", "(", "\"-p\"", ",", "\"--option\"", ")", ":", "\n", "            ", "option", "=", "arg", "\n", "\n", "", "", "if", "isinstance", "(", "option", ",", "str", ")", ":", "\n", "        ", "option", "=", "option", ".", "split", "(", "','", ")", "\n", "\n", "", "log_file_path", "=", "init_logging_path", "(", "log_dir", ",", "'extract_mask'", ",", "logfile", ")", "\n", "logging", ".", "basicConfig", "(", "filename", "=", "log_file_path", ",", "\n", "level", "=", "10", ",", "\n", "format", "=", "'%(asctime)s %(levelname)s %(message)s'", ",", "\n", "datefmt", "=", "'%m/%d/%Y %I:%M:%S %p'", ",", "\n", ")", "\n", "\n", "logging", ".", "info", "(", "\"start logging: \"", "+", "log_file_path", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "\n", "", "if", "'mv_last'", "in", "option", ":", "\n", "        ", "mv_dir", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "bert_version", ".", "split", "(", "'-'", ")", "[", "0", "]", "+", "'_mv_mask_last'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "mv_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "mv_dir", ")", "\n", "\n", "", "", "usegpu", "=", "False", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "usegpu", "=", "True", "\n", "\n", "", "logging", ".", "info", "(", "'input dir is '", "+", "input_dir", ")", "\n", "logging", ".", "info", "(", "'output dir is '", "+", "output_dir", ")", "\n", "logging", ".", "info", "(", "'BERT version is '", "+", "bert_version", ")", "\n", "logging", ".", "info", "(", "'batch_size is '", "+", "str", "(", "batch_size", ")", ")", "\n", "\n", "cnt", "=", "0", "\n", "avg_last_layer", "=", "''", "\n", "logging", ".", "info", "(", "\"total number of words is \"", "+", "str", "(", "len", "(", "os", ".", "listdir", "(", "input_dir", ")", ")", ")", ")", "\n", "# print(len(os.listdir(input_dir)))", "\n", "num_nosent", "=", "0", "\n", "for", "file", "in", "os", ".", "listdir", "(", "input_dir", ")", ":", "\n", "        ", "if", "cnt", "%", "1000", "==", "0", ":", "\n", "            ", "logging", ".", "info", "(", "str", "(", "round", "(", "cnt", "/", "len", "(", "os", ".", "listdir", "(", "input_dir", ")", ")", "*", "100", ",", "2", ")", ")", "+", "\" % processed\"", ")", "\n", "", "logging", ".", "info", "(", "'start extracting mention vectors using mask model'", ")", "\n", "noun", "=", "file", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "if", "'mv_last'", "in", "option", "and", "noun", "+", "'.pt'", "in", "os", ".", "listdir", "(", "mv_dir", ")", ":", "\n", "            ", "cnt", "+=", "1", "\n", "continue", "\n", "", "token_ids", ",", "input_mask", ",", "indices", "=", "tokenize_mask", "(", "os", ".", "path", ".", "join", "(", "input_dir", ",", "file", ")", ",", "max_seq_length", ",", "bert_version", ")", "\n", "if", "len", "(", "token_ids", ")", "<", "1", ":", "\n", "            ", "logging", ".", "info", "(", "noun", "+", "\" has no sentence\"", ")", "\n", "num_nosent", "+=", "1", "\n", "cnt", "+=", "1", "\n", "continue", "\n", "", "embeddings", "=", "extract_mv_mask", "(", "token_ids", ",", "input_mask", ",", "indices", ",", "bert_version", "=", "bert_version", ",", "batch_size", "=", "batch_size", ",", "usegpu", "=", "usegpu", ")", "# 24 * num_sent * 1024", "\n", "\n", "\n", "# store vectors from each layer for each noun, used for filtering", "\n", "if", "'mv_each_layer'", "in", "option", ":", "\n", "            ", "for", "l", "in", "range", "(", "embeddings", ".", "shape", "[", "0", "]", ")", ":", "# number layer", "\n", "                ", "l_dir", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "bert_version", ".", "split", "(", "'-'", ")", "[", "0", "]", "+", "'_mv_mask_'", "+", "str", "(", "l", "+", "1", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "l_dir", ")", ":", "\n", "                    ", "os", ".", "makedirs", "(", "l_dir", ")", "\n", "# write_csv(os.path.join(l_dir, noun + '.csv'), embeddings[l].cpu().numpy())", "\n", "", "torch", ".", "save", "(", "embeddings", "[", "l", "]", ".", "cpu", "(", ")", ",", "os", ".", "path", ".", "join", "(", "l_dir", ",", "noun", "+", "'.pt'", ")", ")", "\n", "\n", "", "", "if", "'mv_last'", "in", "option", ":", "\n", "            ", "torch", ".", "save", "(", "embeddings", "[", "-", "1", "]", ".", "cpu", "(", ")", ",", "os", ".", "path", ".", "join", "(", "mv_dir", ",", "noun", "+", "'.pt'", ")", ",", "_use_new_zipfile_serialization", "=", "False", ")", "\n", "# write_csv(os.path.join(mv_dir, noun + '.csv'), embeddings[-1].cpu().numpy())", "\n", "\n", "", "if", "'avg_last'", "in", "option", ":", "\n", "# last hidden layer", "\n", "            ", "avg_n", "=", "torch", ".", "mean", "(", "embeddings", "[", "-", "1", "]", ",", "dim", "=", "0", ")", "\n", "avg_last_layer", "+=", "' '", ".", "join", "(", "[", "noun", "]", "+", "[", "str", "(", "v", ")", "for", "v", "in", "avg_n", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", ")", "+", "'\\n'", "\n", "", "cnt", "+=", "1", "\n", "", "logging", ".", "info", "(", "str", "(", "num_nosent", ")", "+", "\" words have no sentence.\"", ")", "\n", "logging", ".", "info", "(", "'Done.'", ")", "\n", "\n", "if", "'avg_last'", "in", "option", "and", "avg_last_layer", ":", "\n", "        ", "write_out", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "bert_version", ".", "split", "(", "'-'", ")", "[", "0", "]", "+", "'_mask_avg_last_layer.txt'", ")", ",", "avg_last_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.extract_mv.utils.init_logging_path": [[10, 22], ["os.path.join", "os.path.exists", "os.listdir", "os.path.exists", "os.makedirs", "open", "os.utime", "open", "os.utime", "len", "len", "os.listdir", "os.listdir"], "function", ["None"], ["import", "os", "\n", "from", "sklearn", ".", "metrics", "import", "f1_score", ",", "average_precision_score", "\n", "from", "sklearn", ".", "preprocessing", "import", "label_binarize", "\n", "from", "graph", "import", "read_dictionary", "\n", "from", "collections", "import", "defaultdict", "\n", "\n", "\n", "def", "init_logging_path", "(", "log_path", ",", "task_name", ",", "file_name", ")", ":", "\n", "    ", "dir_log", "=", "os", ".", "path", ".", "join", "(", "log_path", ",", "f\"{task_name}/{file_name}/\"", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "dir_log", ")", "and", "os", ".", "listdir", "(", "dir_log", ")", ":", "\n", "        ", "dir_log", "+=", "f'{file_name}_{len(os.listdir(dir_log))}.log'", "\n", "with", "open", "(", "dir_log", ",", "'w'", ")", ":", "\n", "             ", "os", ".", "utime", "(", "dir_log", ",", "None", ")", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.extract_mv.utils.tokenize_mask": [[24, 66], ["transformers.BertTokenizer.from_pretrained", "os.path.basename().split", "open", "bert_version.split", "transformers.RobertaTokenizer.from_pretrained", "line.strip().lower", "line.strip().lower.partition", "len", "indices.append", "RobertaTokenizer.from_pretrained.convert_tokens_to_ids", "token_ids.append", "input_mask.append", "bert_version.split", "os.path.basename", "str", "RobertaTokenizer.from_pretrained.tokenize", "RobertaTokenizer.from_pretrained.tokenize", "len", "line.strip", "len", "len"], "function", ["None"], ["        ", "os", ".", "makedirs", "(", "dir_log", ")", "\n", "dir_log", "+=", "f'{file_name}_{len(os.listdir(dir_log))}.log'", "\n", "with", "open", "(", "dir_log", ",", "'w'", ")", ":", "\n", "             ", "os", ".", "utime", "(", "dir_log", ",", "None", ")", "\n", "", "", "return", "dir_log", "\n", "\n", "\n", "", "def", "select_threshold_rules", "(", "y_true", ",", "y_prob", ",", "path", ",", "fold", ",", "idx", ",", "train_label", ")", ":", "\n", "    ", "print", "(", "type", "(", "y_true", ")", ",", "y_true", ".", "shape", ",", "np", ".", "where", "(", "y_true", ".", "numpy", "(", ")", ".", "sum", "(", "axis", "=", "0", ")", ">", "0", ")", ")", "\n", "interested_template_ids", "=", "np", ".", "where", "(", "y_true", ".", "numpy", "(", ")", ".", "sum", "(", "axis", "=", "0", ")", ">", "0", ")", "[", "1", "]", "\n", "thresholds", "=", "np", ".", "unique", "(", "y_prob", ")", "\n", "best_f1", "=", "-", "1", "\n", "best_th", "=", "-", "1", "\n", "for", "th", "in", "thresholds", ":", "\n", "        ", "y_pred", "=", "(", "y_prob", ">", "th", ")", "*", "np", ".", "ones_like", "(", "y_prob", ")", "\n", "true_rules", ",", "_", "=", "find_rules_ut", "(", "path", ",", "fold", ",", "idx", ",", "train_label", ",", "y_true", ",", "interested_template_ids", ")", "\n", "pred_rules", ",", "_", "=", "find_rules_ut", "(", "path", ",", "fold", ",", "idx", ",", "train_label", ",", "y_pred", ",", "interested_template_ids", ",", "pred", "=", "True", ")", "\n", "print", "(", "len", "(", "set", "(", "true_rules", ")", ")", ",", "len", "(", "set", "(", "pred_rules", ")", ")", ")", "\n", "f1", "=", "metrics", "(", "set", "(", "true_rules", ")", ",", "set", "(", "pred_rules", ")", ")", "[", "2", "]", "\n", "\n", "if", "best_f1", "<", "f1", ":", "\n", "            ", "best_f1", "=", "f1", "\n", "best_th", "=", "th", "\n", "", "", "return", "best_th", ",", "best_f1", "\n", "\n", "\n", "#######################################################################", "\n", "#", "\n", "# Utility function for finding predicted rules", "\n", "#", "\n", "#######################################################################", "\n", "", "def", "find_rules_ut_all", "(", "path", ",", "train_label", ",", "probality", ",", "topk", ")", ":", "\n", "# print(pred)", "\n", "    ", "node_dict_file", "=", "path", "+", "'train/s1'", "+", "'/all_nodes.dict'", "# for all data", "\n", "template_dict_file", "=", "path", "+", "'train/s1'", "+", "'/all_unary_templates.dict'", "# for all data", "\n", "result", "=", "''", "\n", "\n", "node_dict", "=", "read_dictionary", "(", "node_dict_file", ")", "# {id: name}", "\n", "template_dict", "=", "read_dictionary", "(", "template_dict_file", ")", "# {id: template name}", "\n", "\n", "probality", "[", "np", ".", "where", "(", "train_label", "==", "1", ")", "]", "=", "0", "# ignore the true rules", "\n", "\n", "topk_idx", "=", "probality", ".", "reshape", "(", "-", "1", ")", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "[", "0", ":", "topk", "]", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.extract_mv.utils.tokenize_nomask": [[68, 110], ["transformers.BertTokenizer.from_pretrained", "os.path.basename().split", "open", "bert_version.split", "transformers.RobertaTokenizer.from_pretrained", "line.strip().lower", "line.strip().lower.partition", "RobertaTokenizer.from_pretrained.tokenize", "indices.append", "RobertaTokenizer.from_pretrained.convert_tokens_to_ids", "token_ids.append", "input_mask.append", "bert_version.split", "os.path.basename", "str", "RobertaTokenizer.from_pretrained.tokenize", "len", "len", "RobertaTokenizer.from_pretrained.tokenize", "len", "line.strip", "len", "len"], "function", ["None"], ["for", "idx", "in", "topk_idx", ":", "\n", "        ", "n_id", "=", "idx", "//", "probality", ".", "shape", "[", "1", "]", "\n", "t_id", "=", "idx", "%", "probality", ".", "shape", "[", "1", "]", "\n", "if", "probality", "[", "n_id", ",", "t_id", "]", "<=", "0", ":", "\n", "            ", "break", "\n", "", "n_name", "=", "node_dict", "[", "n_id", "]", "\n", "tmp_name", "=", "template_dict", "[", "int", "(", "t_id", ")", "]", "\n", "rule", "=", "tmp_name", ".", "replace", "(", "'TempateExpression'", ",", "'ER'", ")", "\n", "rule", "=", "rule", ".", "replace", "(", "'?'", ",", "n_name", ")", "\n", "result", "+=", "rule", "+", "'\\n'", "\n", "", "return", "result", "\n", "\n", "## find rules for unary templates", "\n", "# dataset: wine, sumo, ...", "\n", "# template_ids: unary template ids", "\n", "", "def", "find_rules_ut", "(", "path", ",", "fold", ",", "node_ids", ",", "train_label", ",", "template_ids", ",", "interested_template_ids", ",", "pred", "=", "False", ",", "easytask", "=", "False", ")", ":", "\n", "# print(pred)", "\n", "    ", "node_dict_file", "=", "path", "+", "'train/s'", "+", "str", "(", "fold", "+", "1", ")", "+", "'/nodes.dict'", "# for all data", "\n", "template_dict_file", "=", "path", "+", "'train/s'", "+", "str", "(", "fold", "+", "1", ")", "+", "'/unary_templates.dict'", "# for all data", "\n", "rules", "=", "[", "]", "\n", "result", "=", "''", "\n", "\n", "selected_templates", "=", "np", ".", "where", "(", "train_label", ".", "sum", "(", "axis", "=", "0", ")", ">", "2", ")", "[", "1", "]", "\n", "\n", "node_dict", "=", "read_dictionary", "(", "node_dict_file", ")", "# {id: name}", "\n", "template_dict", "=", "read_dictionary", "(", "template_dict_file", ")", "# {id: template name}", "\n", "\n", "for", "idx", "in", "range", "(", "len", "(", "node_ids", ")", ")", ":", "\n", "        ", "n_id", "=", "node_ids", "[", "idx", "]", "\n", "n_name", "=", "node_dict", "[", "n_id", "]", "\n", "# if pred:", "\n", "tmp_ids", "=", "np", ".", "where", "(", "template_ids", "[", "idx", "]", ">", "0", ")", "[", "0", "]", "\n", "# else:", "\n", "#     tmp_ids = template_ids[idx]", "\n", "if", "not", "tmp_ids", ".", "size", ":", "\n", "            ", "continue", "\n", "", "for", "id", "in", "tmp_ids", ":", "\n", "            ", "if", "easytask", ":", "\n", "                ", "t_id", "=", "selected_templates", "[", "id", "]", "\n", "", "else", ":", "\n", "                ", "t_id", "=", "id", "\n", "", "if", "train_label", "[", "n_id", ",", "t_id", "]", "==", "1", ":", "\n", "                ", "continue", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.extract_mv.utils.extract_mv_mask": [[112, 171], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.utils.data.TensorDataset", "torch.utils.data.SequentialSampler", "torch.utils.data.DataLoader", "torch.empty", "tqdm.tqdm", "transformers.BertForMaskedLM.from_pretrained", "torch.cuda.device_count", "torch.nn.DataParallel.to", "isinstance", "isinstance", "len", "list", "range", "bert_version.split", "transformers.RobertaForMaskedLM.from_pretrained", "logging.info", "torch.nn.DataParallel", "token_id.to.to", "in_mask.to.to", "torch.no_grad", "range", "len", "len", "torch.cuda.empty_cache", "bert_version.split", "torch.nn.DataParallel.", "str"], "function", ["None"], ["                ", "continue", "\n", "", "tmp_name", "=", "template_dict", "[", "int", "(", "t_id", ")", "]", "\n", "rule", "=", "tmp_name", ".", "replace", "(", "'TempateExpression'", ",", "'ER'", ")", "\n", "rule", "=", "rule", ".", "replace", "(", "'?'", ",", "n_name", ")", "\n", "rules", ".", "append", "(", "rule", ")", "\n", "result", "+=", "rule", "+", "'\\n'", "\n", "\n", "", "", "return", "rules", ",", "result", "\n", "\n", "## find rules for binary templates", "\n", "# dataset: wine, economy,...", "\n", "# triples: test triples with id, i.e. (n_id, bt_id, n_id)", "\n", "# pred_templates: predicated bt_ids, note: there may be more than one bt id for each node pair", "\n", "", "def", "find_rules_bt", "(", "dataset", ",", "type", ",", "triples", ",", "pred_templates", ",", "pred", "=", "False", ")", ":", "\n", "    ", "node_dict_file", "=", "'dataset/'", "+", "type", "+", "'/'", "+", "dataset", "+", "'/nodes.dict'", "\n", "template_dict_file", "=", "'dataset/'", "+", "type", "+", "'/'", "+", "dataset", "+", "'/edges.dict'", "\n", "result", "=", "''", "\n", "\n", "node_dict", "=", "read_dictionary", "(", "node_dict_file", ")", "# {id: name}", "\n", "template_dict", "=", "read_dictionary", "(", "template_dict_file", ")", "# {id: template name}", "\n", "s", "=", "triples", "[", ":", ",", "0", "]", "\n", "r", "=", "triples", "[", ":", ",", "1", "]", "\n", "t", "=", "triples", "[", ":", ",", "2", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "s", ")", ")", ":", "\n", "        ", "s_id", "=", "s", "[", "idx", "]", "\n", "t_id", "=", "t", "[", "idx", "]", "\n", "s_name", "=", "node_dict", "[", "int", "(", "s_id", ")", "]", "\n", "t_name", "=", "node_dict", "[", "int", "(", "t_id", ")", "]", "\n", "if", "pred", ":", "\n", "            ", "tmp_ids", "=", "np", ".", "where", "(", "pred_templates", "[", "idx", "]", ">", "0", ")", "[", "0", "]", "# for pred label", "\n", "if", "not", "tmp_ids", ".", "size", ":", "\n", "                ", "continue", "\n", "", "", "else", ":", "\n", "            ", "tmp_ids", "=", "r", "[", "idx", "]", "# for true label", "\n", "", "for", "tid", "in", "tmp_ids", ":", "\n", "            ", "tmp_name", "=", "template_dict", "[", "tid", "]", "\n", "result", "+=", "s_name", "+", "'\\t'", "+", "tmp_name", "[", ":", "-", "1", "]", "+", "'\\t'", "+", "t_name", "+", "'\\n'", "\n", "\n", "", "", "return", "result", "\n", "\n", "#######################################################################", "\n", "#", "\n", "# Utility function for building training and testing graphs", "\n", "#", "\n", "#######################################################################", "\n", "\n", "", "def", "get_adj_and_degrees", "(", "num_nodes", ",", "triplets", ")", ":", "\n", "    ", "\"\"\" Get adjacency list and degrees of the graph\n    \"\"\"", "\n", "adj_list", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_nodes", ")", "]", "\n", "for", "i", ",", "triplet", "in", "enumerate", "(", "triplets", ")", ":", "# i can be regarded as edge_id", "\n", "        ", "adj_list", "[", "triplet", "[", "0", "]", "]", ".", "append", "(", "[", "i", ",", "triplet", "[", "2", "]", "]", ")", "\n", "#adj_list[triplet[2]].append([i, triplet[0]])", "\n", "\n", "", "degrees", "=", "np", ".", "array", "(", "[", "len", "(", "a", ")", "for", "a", "in", "adj_list", "]", ")", "# out degree", "\n", "adj_list", "=", "[", "np", ".", "array", "(", "a", ")", "for", "a", "in", "adj_list", "]", "\n", "return", "adj_list", ",", "degrees", "\n", "\n", "", "def", "sample_edge_neighborhood", "(", "adj_list", ",", "degrees", ",", "n_triplets", ",", "sample_size", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.extract_mv.utils.extract_mv_mask_last": [[173, 228], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.utils.data.TensorDataset", "torch.utils.data.SequentialSampler", "torch.utils.data.DataLoader", "torch.empty", "tqdm.tqdm", "transformers.BertForMaskedLM.from_pretrained", "torch.cuda.device_count", "torch.nn.DataParallel.to", "isinstance", "len", "list", "bert_version.split", "transformers.RobertaForMaskedLM.from_pretrained", "logging.info", "torch.nn.DataParallel", "token_id.to.to", "in_mask.to.to", "torch.no_grad", "range", "len", "bert_version.split", "str", "torch.nn.DataParallel."], "function", ["None"], ["#print(sample_size)", "\n", "edges", "=", "np", ".", "zeros", "(", "sample_size", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "#initialize", "\n", "sample_counts", "=", "np", ".", "array", "(", "[", "d", "for", "d", "in", "degrees", "]", ")", "# sample count for each node", "\n", "picked", "=", "np", ".", "array", "(", "[", "False", "for", "_", "in", "range", "(", "n_triplets", ")", "]", ")", "# num_triple * 1", "\n", "seen", "=", "np", ".", "array", "(", "[", "False", "for", "_", "in", "degrees", "]", ")", "# num_node * 1", "\n", "for", "i", "in", "range", "(", "0", ",", "sample_size", ")", ":", "\n", "        ", "weights", "=", "sample_counts", "*", "(", "~", "seen", ")", "\n", "if", "np", ".", "sum", "(", "weights", ")", "==", "0", ":", "\n", "            ", "weights", "=", "np", ".", "ones_like", "(", "weights", ")", "\n", "weights", "[", "np", ".", "where", "(", "sample_counts", "==", "0", ")", "]", "=", "0", "\n", "", "probabilities", "=", "(", "weights", ")", "/", "np", ".", "sum", "(", "weights", ")", "\n", "chosen_vertex", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "degrees", ".", "shape", "[", "0", "]", ")", ",", "\n", "p", "=", "probabilities", ")", "\n", "#print(chosen_vertex)", "\n", "while", "len", "(", "adj_list", "[", "chosen_vertex", "]", ")", "==", "0", ":", "\n", "            ", "chosen_vertex", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "degrees", ".", "shape", "[", "0", "]", ")", ",", "\n", "p", "=", "probabilities", ")", "\n", "", "chosen_adj_list", "=", "adj_list", "[", "chosen_vertex", "]", "\n", "seen", "[", "chosen_vertex", "]", "=", "True", "\n", "\n", "chosen_edge", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "chosen_adj_list", ".", "shape", "[", "0", "]", ")", ")", "\n", "chosen_edge", "=", "chosen_adj_list", "[", "chosen_edge", "]", "\n", "edge_number", "=", "chosen_edge", "[", "0", "]", "# can be regarded as edge_id", "\n", "\n", "while", "picked", "[", "edge_number", "]", ":", "# if edge has been choosed before, then choose again", "\n", "            ", "chosen_edge", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "chosen_adj_list", ".", "shape", "[", "0", "]", ")", ")", "\n", "chosen_edge", "=", "chosen_adj_list", "[", "chosen_edge", "]", "\n", "edge_number", "=", "chosen_edge", "[", "0", "]", "\n", "\n", "", "edges", "[", "i", "]", "=", "edge_number", "\n", "other_vertex", "=", "chosen_edge", "[", "1", "]", "\n", "picked", "[", "edge_number", "]", "=", "True", "\n", "sample_counts", "[", "chosen_vertex", "]", "-=", "1", "\n", "sample_counts", "[", "other_vertex", "]", "-=", "1", "\n", "seen", "[", "other_vertex", "]", "=", "True", "\n", "", "return", "edges", "\n", "\n", "", "def", "generate_sampled_graph_and_labels", "(", "triplets", ",", "sample_size", ",", "split_size", ",", "\n", "num_rels", ",", "adj_list", ",", "degrees", ",", "\n", "negative_rate", ")", ":", "\n", "    ", "\"\"\"Get training graph and signals\n    First perform edge neighborhood sampling on graph, then perform negative\n    sampling to generate negative samples\n    \"\"\"", "\n", "# perform edge neighbor sampling", "\n", "edges", "=", "sample_edge_neighborhood", "(", "adj_list", ",", "degrees", ",", "len", "(", "triplets", ")", ",", "\n", "sample_size", ")", "\n", "\n", "# relabel nodes to have consecutive node ids", "\n", "edges", "=", "triplets", "[", "edges", "]", "\n", "src", ",", "rel", ",", "dst", "=", "edges", ".", "transpose", "(", ")", "\n", "uniq_v", ",", "edges", "=", "np", ".", "unique", "(", "(", "src", ",", "dst", ")", ",", "return_inverse", "=", "True", ")", "\n", "src", ",", "dst", "=", "np", ".", "reshape", "(", "edges", ",", "(", "2", ",", "-", "1", ")", ")", "\n", "relabeled_edges", "=", "np", ".", "stack", "(", "(", "src", ",", "rel", ",", "dst", ")", ")", ".", "transpose", "(", ")", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.extract_mv.utils.extract_mv_nomask": [[230, 290], ["logging.info", "torch.tensor", "torch.tensor", "torch.tensor", "torch.utils.data.TensorDataset", "torch.utils.data.SequentialSampler", "torch.utils.data.DataLoader", "torch.empty", "tqdm.tqdm", "transformers.BertModel.from_pretrained", "torch.cuda.device_count", "torch.nn.DataParallel.to", "isinstance", "isinstance", "len", "range", "bert_version.split", "transformers.RobertaModel.from_pretrained", "torch.nn.DataParallel", "token_id.to.to", "in_mask.to.to", "torch.no_grad", "len", "torch.tensor", "range", "torch.cat.cpu", "torch.cuda.empty_cache", "bert_version.split", "torch.nn.DataParallel.", "torch.cat.to", "torch.cat", "torch.mean().view", "torch.mean"], "function", ["None"], ["# negative sampling", "\n", "samples", ",", "labels", "=", "negative_sampling", "(", "relabeled_edges", ",", "len", "(", "uniq_v", ")", ",", "\n", "negative_rate", ")", "\n", "\n", "# further split graph, only half of the edges will be used as graph", "\n", "# structure, while the rest half is used as unseen positive samples", "\n", "split_size", "=", "int", "(", "sample_size", "*", "split_size", ")", "\n", "graph_split_ids", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "sample_size", ")", ",", "\n", "size", "=", "split_size", ",", "replace", "=", "False", ")", "\n", "src", "=", "src", "[", "graph_split_ids", "]", "\n", "dst", "=", "dst", "[", "graph_split_ids", "]", "\n", "rel", "=", "rel", "[", "graph_split_ids", "]", "\n", "\n", "# build DGL graph", "\n", "print", "(", "\"# sampled nodes: {}\"", ".", "format", "(", "len", "(", "uniq_v", ")", ")", ")", "\n", "print", "(", "\"# sampled edges: {}\"", ".", "format", "(", "len", "(", "src", ")", "*", "2", ")", ")", "\n", "g", ",", "rel", ",", "norm", ",", "edge_norm", "=", "build_graph_from_triplets", "(", "len", "(", "uniq_v", ")", ",", "num_rels", ",", "\n", "(", "src", ",", "rel", ",", "dst", ")", ")", "\n", "return", "g", ",", "uniq_v", ",", "rel", ",", "norm", ",", "samples", ",", "labels", ",", "edge_norm", "\n", "\n", "", "def", "comp_deg_norm", "(", "g", ")", ":", "\n", "    ", "in_deg", "=", "g", ".", "in_degrees", "(", "range", "(", "g", ".", "number_of_nodes", "(", ")", ")", ")", ".", "float", "(", ")", ".", "numpy", "(", ")", "\n", "norm", "=", "1.0", "/", "in_deg", "\n", "norm", "[", "np", ".", "isinf", "(", "norm", ")", "]", "=", "0", "\n", "return", "norm", "\n", "\n", "", "def", "build_graph_from_triplets", "(", "num_nodes", ",", "num_rels", ",", "triplets", ")", ":", "\n", "    ", "\"\"\" Create a DGL graph.\n        some edges are binary, but others single\n        This function also generates edge type and normalization factor\n        (reciprocal of node incoming degree)\n    \"\"\"", "\n", "g", "=", "dgl", ".", "DGLGraph", "(", ")", "\n", "g", ".", "add_nodes", "(", "num_nodes", ")", "\n", "\n", "src", ",", "rel", ",", "dst", "=", "triplets", "\n", "src", ",", "dst", "=", "np", ".", "concatenate", "(", "(", "src", ",", "dst", ")", ")", ",", "np", ".", "concatenate", "(", "(", "dst", ",", "src", ")", ")", "\n", "rel", "=", "np", ".", "concatenate", "(", "(", "rel", ",", "rel", ")", ")", "\n", "edges", "=", "sorted", "(", "zip", "(", "dst", ",", "src", ",", "rel", ")", ")", "\n", "dst", ",", "src", ",", "rel", "=", "np", ".", "array", "(", "edges", ")", ".", "transpose", "(", ")", "\n", "g", ".", "add_edges", "(", "src", ",", "dst", ")", "\n", "\n", "#src, rel, dst = triplets", "\n", "#g.add_edges(src, dst)", "\n", "norm", "=", "comp_deg_norm", "(", "g", ")", "\n", "print", "(", "\"# nodes: {}, # edges: {}\"", ".", "format", "(", "num_nodes", ",", "len", "(", "src", ")", ")", ")", "\n", "\n", "# normalize by dst degree, compute degrees according to edge_type", "\n", "_", ",", "inverse_index", ",", "count", "=", "np", ".", "unique", "(", "(", "dst", ",", "rel", ")", ",", "axis", "=", "1", ",", "return_inverse", "=", "True", ",", "\n", "return_counts", "=", "True", ")", "\n", "degrees", "=", "count", "[", "inverse_index", "]", "# c_{i,r} for each relation type", "\n", "edge_norm", "=", "np", ".", "ones", "(", "len", "(", "dst", ")", ",", "dtype", "=", "np", ".", "float32", ")", "/", "degrees", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "g", ",", "rel", ",", "norm", ",", "edge_norm", "\n", "\n", "", "def", "build_test_graph", "(", "num_nodes", ",", "num_rels", ",", "edges", ")", ":", "\n", "    ", "src", ",", "rel", ",", "dst", "=", "edges", ".", "transpose", "(", ")", "\n", "print", "(", "\"Test graph:\"", ")", "\n", "return", "build_graph_from_triplets", "(", "num_nodes", ",", "num_rels", ",", "(", "src", ",", "rel", ",", "dst", ")", ")", "\n", "\n", "", "def", "negative_sampling", "(", "pos_samples", ",", "num_entity", ",", "negative_rate", ")", ":", "\n", "    ", "size_of_batch", "=", "len", "(", "pos_samples", ")", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.extract_mv.utils.write_out": [[292, 295], ["open", "f.write"], "function", ["None"], ["neg_samples", "=", "np", ".", "tile", "(", "pos_samples", ",", "(", "negative_rate", ",", "1", ")", ")", "\n", "labels", "=", "np", ".", "zeros", "(", "size_of_batch", "*", "(", "negative_rate", "+", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "labels", "[", ":", "size_of_batch", "]", "=", "1", "\n", "values", "=", "np", ".", "random", ".", "randint", "(", "num_entity", ",", "size", "=", "num_to_generate", ")", "# node_id", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.extract_mv.utils.write_csv": [[297, 301], ["open", "csv.writer", "csv.writer.writerows"], "function", ["None"], ["subj", "=", "choices", ">", "0.5", "\n", "obj", "=", "choices", "<=", "0.5", "\n", "neg_samples", "[", "subj", ",", "0", "]", "=", "values", "[", "subj", "]", "\n", "neg_samples", "[", "obj", ",", "2", "]", "=", "values", "[", "obj", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.run_svc_filter.get_word_embedding": [[14, 22], ["data.append", "labels.append"], "function", ["None"], ["def", "get_word_embedding", "(", "nouns", ",", "embeddings_dict", ",", "label", ")", ":", "\n", "    ", "data", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "for", "n", "in", "nouns", ":", "\n", "        ", "if", "n", "in", "embeddings_dict", ":", "\n", "            ", "data", ".", "append", "(", "embeddings_dict", "[", "n", "]", ")", "\n", "labels", ".", "append", "(", "label", ")", "\n", "", "", "return", "data", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.run_svc_filter.main": [[24, 176], ["print", "os.path.join", "os.path.join", "src.utils.init_logging_path", "logging.basicConfig", "logging.info", "logging.info", "logging.info", "os.path.join", "logging.info", "src.utils.load_prop_instances", "src.utils.load_prop_instances", "src.utils.load_prop_instances", "src.utils.load_prop_instances", "src.utils.load_prop_instances", "src.utils.load_prop_instances", "src.utils.load_pretrained_embeddings", "src.utils.write_csv", "src.utils.write_txt", "logging.info", "getopt.getopt", "os.path.abspath", "os.path.abspath", "os.path.join", "os.path.abspath", "os.path.exists", "os.makedirs", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "logging.info", "src.utils.load_pretrained_embeddings", "logging.info", "exit", "os.path.join", "os.path.join", "logging.info", "run_svc_filter.get_word_embedding", "run_svc_filter.get_word_embedding", "numpy.array", "numpy.array", "src.svm.test_svc", "results.append", "os.path.join", "os.path.join", "os.path.join", "print", "sys.exit", "print", "sys.exit", "os.path.exists", "os.path.exists", "os.getcwd", "os.path.join", "os.path.join", "logging.info", "run_svc_filter.get_word_embedding", "run_svc_filter.get_word_embedding", "numpy.array", "numpy.array", "run_svc_filter.get_word_embedding", "run_svc_filter.get_word_embedding", "numpy.array", "numpy.array", "src.svm.train_svc", "clf.decision_function", "sklearn.metrics.average_precision_score", "models_k.append", "ths_k.append", "map_k.append", "prop_list.append", "sum", "len", "os.path.abspath", "str", "str", "str", "str", "str", "str", "bool", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.init_logging_path", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.load_prop_instances", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.load_prop_instances", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.load_prop_instances", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.load_prop_instances", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.load_prop_instances", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.load_prop_instances", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.load_pretrained_embeddings", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.write_csv", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.write_txt", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.load_pretrained_embeddings", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.run_svc_filter.get_word_embedding", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.run_svc_filter.get_word_embedding", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.svm.test_svc", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.run_svc_filter.get_word_embedding", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.run_svc_filter.get_word_embedding", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.run_svc_filter.get_word_embedding", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.run_svc_filter.get_word_embedding", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.svm.train_svc"], ["", "def", "main", "(", "argv", ")", ":", "\n", "    ", "dataset", "=", "'glasgow'", "# mt40k", "\n", "use_mask", "=", "False", "\n", "max_sent_len", "=", "'64'", "\n", "candidate_k", "=", "[", "115", "]", "#, 10, 20, 50, 100, 110, 115]", "\n", "kernel", "=", "''", "\n", "cluster", "=", "'mean'", "\n", "\n", "try", ":", "\n", "        ", "opts", ",", "args", "=", "getopt", ".", "getopt", "(", "argv", ",", "\"hd:k:m:c:t:\"", ",", "[", "\"data=\"", ",", "\"kernel=\"", ",", "\"usemask=\"", ",", "\"tag=\"", "]", ")", "\n", "", "except", "getopt", ".", "GetoptError", ":", "\n", "        ", "print", "(", "\"python run_svr_filter.py -d <dataset> -k <kernel> -m <use_mask> -t <tag>\"", ")", "\n", "sys", ".", "exit", "(", "2", ")", "\n", "\n", "", "for", "opt", ",", "arg", "in", "opts", ":", "\n", "        ", "if", "opt", "==", "'-h'", ":", "\n", "            ", "print", "(", "\"python run_svr_filter.py -d <dataset> -k <kernel> -m <use_mask> -t <tag>\"", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "", "elif", "opt", "in", "(", "\"-d\"", ",", "\"--data\"", ")", ":", "\n", "            ", "dataset", "=", "arg", "\n", "", "elif", "opt", "in", "(", "\"-k\"", ",", "\"--kernel\"", ")", ":", "\n", "            ", "kernel", "=", "arg", "\n", "", "elif", "opt", "in", "(", "\"-m\"", ",", "\"--usemask\"", ")", ":", "\n", "            ", "use_mask", "=", "bool", "(", "arg", ")", "\n", "", "elif", "opt", "in", "(", "\"-t\"", ",", "\"--tag\"", ")", ":", "\n", "            ", "tag", "=", "arg", "\n", "", "", "print", "(", "use_mask", ")", "\n", "data_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "abspath", "(", "project_path", ")", ",", "'data'", ",", "dataset", ")", "\n", "avg_mv_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "abspath", "(", "project_path", ")", ",", "'data'", ",", "'avg_mv_remain'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "data_path", ")", "or", "not", "os", ".", "path", ".", "exists", "(", "avg_mv_path", ")", ":", "\n", "        ", "raise", "FileNotFoundError", "\n", "\n", "", "log_file_path", "=", "init_logging_path", "(", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "\"log/\"", ")", ",", "'run_svc_fb'", ",", "'run_svc_fb'", ")", "\n", "logging", ".", "basicConfig", "(", "filename", "=", "log_file_path", ",", "\n", "level", "=", "10", ",", "\n", "format", "=", "'%(asctime)s %(levelname)s %(message)s'", ",", "\n", "datefmt", "=", "'%m/%d/%Y %I:%M:%S %p'", ",", "\n", ")", "\n", "logging", ".", "info", "(", "\"start logging: \"", "+", "log_file_path", ")", "\n", "logging", ".", "info", "(", "\"dataset is \"", "+", "dataset", ")", "\n", "logging", ".", "info", "(", "\"data path is \"", "+", "data_path", ")", "\n", "\n", "result_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "abspath", "(", "project_path", ")", ",", "'result'", ",", "dataset", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "result_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "result_path", ")", "\n", "\n", "", "logging", ".", "info", "(", "\"loading data samples\"", ")", "\n", "pos_train", "=", "load_prop_instances", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "f'pos_train_data.txt'", ")", ")", "\n", "pos_valid", "=", "load_prop_instances", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "f\"pos_valid_data.txt\"", ")", ")", "\n", "pos_test", "=", "load_prop_instances", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "f\"pos_test_data.txt\"", ")", ")", "\n", "neg_train", "=", "load_prop_instances", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "f\"neg_train_data.txt\"", ")", ")", "\n", "neg_valid", "=", "load_prop_instances", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "f\"neg_valid_data.txt\"", ")", ")", "\n", "neg_test", "=", "load_prop_instances", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "f\"neg_test_data.txt\"", ")", ")", "\n", "\n", "\n", "best_map", "=", "-", "1", "\n", "best_models", "=", "None", "\n", "best_ths", "=", "None", "\n", "best_k", "=", "-", "1", "\n", "properties", "=", "None", "\n", "for", "k", "in", "candidate_k", ":", "\n", "        ", "logging", ".", "info", "(", "'k='", "+", "str", "(", "k", ")", ")", "\n", "models_k", "=", "[", "]", "\n", "ths_k", "=", "[", "]", "\n", "map_k", "=", "[", "]", "\n", "prop_list", "=", "[", "]", "\n", "if", "use_mask", ":", "\n", "            ", "mv_file", "=", "os", ".", "path", ".", "join", "(", "avg_mv_path", ",", "tag", "+", "'_avg_mv_mask_large_'", "+", "dataset", "+", "'_'", "+", "str", "(", "k", ")", "+", "'.txt'", ")", "\n", "", "else", ":", "\n", "            ", "mv_file", "=", "os", ".", "path", ".", "join", "(", "avg_mv_path", ",", "tag", "+", "'_avg_mv_nomask_large_'", "+", "dataset", "+", "'_'", "+", "str", "(", "k", ")", "+", "'.txt'", ")", "\n", "\n", "", "embeddings", "=", "load_pretrained_embeddings", "(", "mv_file", ")", "\n", "cnt", "=", "1", "\n", "for", "prop", "in", "pos_train", ":", "\n", "            ", "logging", ".", "info", "(", "str", "(", "cnt", ")", "+", "', '", "+", "prop", ")", "\n", "cnt", "+=", "1", "\n", "train_data", ",", "train_label", "=", "get_word_embedding", "(", "pos_train", "[", "prop", "]", ",", "embeddings", ",", "1", ")", "\n", "tmp", "=", "get_word_embedding", "(", "neg_train", "[", "prop", "]", ",", "embeddings", ",", "-", "1", ")", "\n", "train_data", "+=", "tmp", "[", "0", "]", "\n", "train_label", "+=", "tmp", "[", "1", "]", "\n", "\n", "train_data", "=", "np", ".", "array", "(", "train_data", ")", "\n", "train_label", "=", "np", ".", "array", "(", "train_label", ")", "\n", "\n", "valid_data", ",", "valid_label", "=", "get_word_embedding", "(", "pos_valid", "[", "prop", "]", ",", "embeddings", ",", "1", ")", "\n", "tmp", "=", "get_word_embedding", "(", "neg_valid", "[", "prop", "]", ",", "embeddings", ",", "-", "1", ")", "\n", "valid_data", "+=", "tmp", "[", "0", "]", "\n", "valid_label", "+=", "tmp", "[", "1", "]", "\n", "\n", "valid_data", "=", "np", ".", "array", "(", "valid_data", ")", "\n", "valid_label", "=", "np", ".", "array", "(", "valid_label", ")", "\n", "\n", "clf", ",", "th", "=", "train_svc", "(", "train_data", ",", "valid_data", ",", "train_label", ",", "valid_label", ",", "kernel", ")", "\n", "\n", "pre_score", "=", "clf", ".", "decision_function", "(", "valid_data", ")", "\n", "ap", "=", "average_precision_score", "(", "valid_label", ",", "pre_score", ")", "\n", "\n", "models_k", ".", "append", "(", "clf", ")", "\n", "ths_k", ".", "append", "(", "th", ")", "\n", "map_k", ".", "append", "(", "ap", ")", "\n", "prop_list", ".", "append", "(", "prop", ")", "\n", "\n", "", "map_k", "=", "sum", "(", "map_k", ")", "/", "len", "(", "map_k", ")", "\n", "\n", "if", "map_k", ">", "best_map", ":", "\n", "            ", "best_k", "=", "k", "\n", "best_map", "=", "map_k", "\n", "best_models", "=", "models_k", "\n", "best_ths", "=", "ths_k", "\n", "properties", "=", "prop_list", "\n", "\n", "", "", "if", "best_k", "==", "-", "1", ":", "\n", "        ", "logging", ".", "info", "(", "'Failed.'", ")", "\n", "exit", "(", ")", "\n", "\n", "", "results", "=", "[", "]", "\n", "i", "=", "0", "\n", "if", "use_mask", ":", "\n", "        ", "mv_file", "=", "os", ".", "path", ".", "join", "(", "avg_mv_path", ",", "tag", "+", "'_avg_mv_mask_large_'", "+", "dataset", "+", "'_'", "+", "str", "(", "best_k", ")", "+", "'.txt'", ")", "\n", "", "else", ":", "\n", "        ", "mv_file", "=", "os", ".", "path", ".", "join", "(", "avg_mv_path", ",", "tag", "+", "'_avg_mv_nomask_large_'", "+", "dataset", "+", "'_'", "+", "str", "(", "best_k", ")", "+", "'.txt'", ")", "\n", "\n", "", "embeddings", "=", "load_pretrained_embeddings", "(", "mv_file", ")", "\n", "\n", "for", "prop", "in", "properties", ":", "\n", "        ", "logging", ".", "info", "(", "str", "(", "i", "+", "1", ")", "+", "', '", "+", "prop", ")", "\n", "\n", "test_data", ",", "test_label", "=", "get_word_embedding", "(", "pos_test", "[", "prop", "]", ",", "embeddings", ",", "1", ")", "\n", "tmp", "=", "get_word_embedding", "(", "neg_test", "[", "prop", "]", ",", "embeddings", ",", "-", "1", ")", "\n", "test_data", "+=", "tmp", "[", "0", "]", "\n", "test_label", "+=", "tmp", "[", "1", "]", "\n", "\n", "test_data", "=", "np", ".", "array", "(", "test_data", ")", "\n", "test_label", "=", "np", ".", "array", "(", "test_label", ")", "\n", "\n", "rr", "=", "test_svc", "(", "test_data", ",", "test_label", ",", "best_models", "[", "i", "]", ",", "best_ths", "[", "i", "]", ")", "\n", "results", ".", "append", "(", "rr", ")", "\n", "i", "+=", "1", "\n", "\n", "", "if", "use_mask", ":", "\n", "        ", "csv_file", "=", "os", ".", "path", ".", "join", "(", "result_path", ",", "\n", "tag", "+", "'_mask_large_'", "+", "max_sent_len", "+", "'_'", "+", "kernel", "+", "'_'", "+", "str", "(", "best_k", ")", "+", "'.csv'", ")", "\n", "header", "=", "tag", "+", "', large, mask, best_k = '", "+", "str", "(", "best_k", ")", "+", "', '", "+", "kernel", "+", "'\\n'", "\n", "", "else", ":", "\n", "        ", "csv_file", "=", "os", ".", "path", ".", "join", "(", "result_path", ",", "\n", "tag", "+", "'_nomask_large_'", "+", "max_sent_len", "+", "'_'", "+", "kernel", "+", "'_'", "+", "str", "(", "best_k", ")", "+", "'.csv'", ")", "\n", "header", "=", "tag", "+", "', large, nomask, best_k = '", "+", "str", "(", "best_k", ")", "+", "', '", "+", "kernel", "+", "'\\n'", "\n", "\n", "", "write_csv", "(", "csv_file", ",", "properties", ",", "results", ")", "\n", "write_txt", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "abspath", "(", "project_path", ")", ",", "'result'", ",", "dataset", "+", "'.txt'", ")", ",", "results", ",", "header", ")", "\n", "\n", "logging", ".", "info", "(", "\"Done\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.svm.train_svc": [[10, 21], ["sklearn.svm.SVC", "sklearn.model_selection.GridSearchCV", "sklearn.model_selection.GridSearchCV.fit", "sklearn.model_selection.GridSearchCV.decision_function", "src.utils.get_best_threshold"], "function", ["home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.get_best_threshold"], ["def", "train_svc", "(", "train_data", ",", "valid_data", ",", "train_label", ",", "valid_label", ",", "kernel", "=", "'rbf'", ")", ":", "\n", "    ", "params", "=", "{", "'C'", ":", "[", "0.01", ",", "0.1", ",", "1", ",", "10", ",", "100", ",", "1000", "]", ",", "'gamma'", ":", "[", "'scale'", "]", "}", "\n", "svc", "=", "SVC", "(", "kernel", "=", "kernel", ",", "max_iter", "=", "10000", ")", "\n", "clf", "=", "GridSearchCV", "(", "svc", ",", "params", ",", "scoring", "=", "'average_precision'", ")", "\n", "\n", "clf", ".", "fit", "(", "train_data", ",", "train_label", ")", "\n", "\n", "valid_score", "=", "clf", ".", "decision_function", "(", "valid_data", ")", "\n", "th", ",", "_", "=", "get_best_threshold", "(", "valid_label", ",", "valid_score", ")", "\n", "\n", "return", "clf", ".", "best_estimator_", ",", "th", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.svm.test_svc": [[23, 32], ["clf.decision_function", "round", "src.utils.pre_rec_f1", "sklearn.metrics.average_precision_score", "numpy.zeros", "numpy.where"], "function", ["home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.pre_rec_f1"], ["", "def", "test_svc", "(", "test_data", ",", "test_label", ",", "clf", ",", "th", ")", ":", "\n", "    ", "pre_score", "=", "clf", ".", "decision_function", "(", "test_data", ")", "\n", "ap", "=", "round", "(", "average_precision_score", "(", "test_label", ",", "pre_score", ")", ",", "4", ")", "\n", "\n", "pre_label", "=", "np", ".", "zeros", "(", "test_label", ".", "shape", ",", "dtype", "=", "int", ")", "-", "1", "\n", "idx", "=", "np", ".", "where", "(", "pre_score", ">=", "th", ")", "[", "0", "]", "\n", "pre_label", "[", "idx", "]", "=", "1", "\n", "pre", ",", "rec", ",", "f1", "=", "pre_rec_f1", "(", "test_label", ",", "pre_label", ")", "\n", "return", "[", "ap", ",", "pre", ",", "rec", ",", "f1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.svm.reg_sper": [[34, 37], ["scipy.stats.spearmanr"], "function", ["None"], ["", "def", "reg_sper", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "sper", "=", "spearmanr", "(", "y_true", ",", "y_pred", ")", "[", "0", "]", "\n", "return", "sper", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.svm.reg_ken": [[39, 42], ["scipy.stats.kendalltau"], "function", ["None"], ["", "def", "reg_ken", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "ken", "=", "kendalltau", "(", "y_true", ",", "y_pred", ")", "[", "0", "]", "\n", "return", "ken", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.svm.train_svr": [[45, 51], ["sklearn.svm.SVR", "sklearn.model_selection.GridSearchCV", "sklearn.model_selection.GridSearchCV.fit", "sklearn.metrics.make_scorer"], "function", ["None"], ["def", "train_svr", "(", "train_data", ",", "train_label", ",", "kernel", "=", "'rbf'", ")", ":", "\n", "    ", "params", "=", "{", "'C'", ":", "[", "0.01", ",", "0.1", ",", "1", ",", "5", ",", "10", ",", "50", ",", "100", ",", "1000", "]", ",", "'gamma'", ":", "[", "'scale'", ",", "0.001", ",", "0.01", ",", "0.1", ",", "1", ",", "10", ",", "100", ",", "1000", "]", "}", "\n", "svr", "=", "SVR", "(", "kernel", "=", "kernel", ",", "degree", "=", "1", ",", "max_iter", "=", "10000", ")", "\n", "clf", "=", "GridSearchCV", "(", "svr", ",", "params", ",", "scoring", "=", "make_scorer", "(", "reg_sper", ")", ",", "cv", "=", "3", ")", "\n", "clf", ".", "fit", "(", "train_data", ",", "train_label", ")", "\n", "return", "clf", ".", "best_estimator_", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.svm.test_svr": [[53, 58], ["clf.predict", "round", "round", "scipy.stats.spearmanr", "scipy.stats.kendalltau"], "function", ["None"], ["", "def", "test_svr", "(", "test_data", ",", "test_label", ",", "clf", ")", ":", "\n", "    ", "pre_score", "=", "clf", ".", "predict", "(", "test_data", ")", "\n", "sper", "=", "round", "(", "spearmanr", "(", "test_label", ",", "pre_score", ")", "[", "0", "]", ",", "4", ")", "\n", "ken", "=", "round", "(", "kendalltau", "(", "test_label", ",", "pre_score", ")", "[", "0", "]", ",", "4", ")", "\n", "return", "[", "sper", ",", "ken", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.rosv_util.load_neighbors": [[13, 20], ["np.array", "open", "line.strip().split", "knn.append", "line.strip", "nn.split"], "function", ["None"], ["\n", "def", "load_bert_vectors", "(", "path", ",", "noun", ")", ":", "\n", "    ", "data", "=", "[", "]", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "noun", "+", "'.csv'", ")", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "reader", "=", "csv", ".", "reader", "(", "f", ",", "delimiter", "=", "','", ")", "\n", "for", "line", "in", "reader", ":", "\n", "            ", "vec", "=", "[", "float", "(", "l", ")", "for", "l", "in", "line", "]", "\n", "if", "vec", "not", "in", "data", ":", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.rosv_util.write_out": [[22, 25], ["open", "f.writelines"], "function", ["None"], ["", "", "", "return", "data", "\n", "\n", "\n", "", "def", "load_neighbors", "(", "file_name", ",", "max_k", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.rosv_util.knn_train_data": [[27, 74], ["logging.info", "logging.info", "np.array", "np.array().astype", "faiss.IndexFlatL2.add", "logging.info", "range", "rosv_util.write_out", "logging.info", "load_bert_vectors", "np.array().astype.extend", "np.array.extend", "faiss.normalize_L2", "faiss.IndexFlatIP", "faiss.normalize_L2", "faiss.IndexFlatL2", "faiss.IndexFlatL2.search", "logging.info", "str", "np.array", "str", "len", "len", "np.where", "str", "np.delete"], "function", ["home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.filtering_baseline.write_out", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.load_bert_vectors"], ["with", "open", "(", "file_name", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "noun", ",", "nn", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "knn", ".", "append", "(", "[", "noun", "]", "+", "nn", ".", "split", "(", "','", ")", "[", ":", "max_k", "]", ")", "\n", "", "", "return", "np", ".", "array", "(", "knn", ")", "\n", "\n", "\n", "", "def", "write_out", "(", "file_name", ",", "output", ")", ":", "\n", "    ", "with", "open", "(", "file_name", ",", "'a+'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "f", ".", "writelines", "(", "output", ")", "\n", "\n", "\n", "", "", "def", "knn_train_data", "(", "train_samples", ",", "mv_path", ",", "max_k", ",", "out_file", ",", "chunk_size", "=", "10000", ",", "use_cosine", "=", "False", ")", ":", "\n", "    ", "logging", ".", "info", "(", "\"Start processing training samples\"", ")", "\n", "men_vec", "=", "[", "]", "\n", "nouns", "=", "[", "]", "\n", "for", "noun", "in", "train_samples", ":", "\n", "        ", "if", "noun", "+", "'.csv'", "not", "in", "os", ".", "listdir", "(", "mv_path", ")", ":", "\n", "            ", "continue", "\n", "", "vec", "=", "load_bert_vectors", "(", "mv_path", ",", "noun", ")", "\n", "men_vec", ".", "extend", "(", "vec", ")", "\n", "nouns", ".", "extend", "(", "[", "noun", "]", "*", "len", "(", "vec", ")", ")", "\n", "", "logging", ".", "info", "(", "\"Total number of training vector is \"", "+", "str", "(", "len", "(", "nouns", ")", ")", ")", "\n", "if", "len", "(", "men_vec", ")", "==", "0", ":", "\n", "        ", "return", "\n", "", "nouns", "=", "np", ".", "array", "(", "nouns", ")", "\n", "men_vec", "=", "np", ".", "array", "(", "men_vec", ")", ".", "astype", "(", "'float32'", ")", "\n", "dim", "=", "men_vec", ".", "shape", "[", "1", "]", "\n", "if", "use_cosine", ":", "\n", "        ", "normalize_L2", "(", "vec", ")", "\n", "index", "=", "faiss", ".", "IndexFlatIP", "(", "dim", ")", "\n", "", "else", ":", "\n", "        ", "index", "=", "faiss", ".", "IndexFlatL2", "(", "dim", ")", "\n", "", "index", ".", "add", "(", "men_vec", ")", "\n", "\n", "logging", ".", "info", "(", "\"Total number of index is \"", "+", "str", "(", "index", ".", "ntotal", ")", ")", "\n", "\n", "knn", "=", "''", "\n", "s", "=", "0", "\n", "n_i", "=", "0", "\n", "times", "=", "men_vec", ".", "shape", "[", "0", "]", "//", "chunk_size", "+", "1", "\n", "for", "tt", "in", "range", "(", "times", ")", ":", "\n", "        ", "if", "tt", "==", "times", "-", "1", ":", "\n", "            ", "e", "=", "s", "+", "men_vec", ".", "shape", "[", "0", "]", "%", "chunk_size", "\n", "", "else", ":", "\n", "            ", "e", "=", "s", "+", "chunk_size", "\n", "", "_", ",", "I", "=", "index", ".", "search", "(", "men_vec", "[", "s", ":", "e", "]", ",", "max_k", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.rosv_util.knn_eval_data": [[76, 122], ["logging.info", "logging.info", "np.array", "np.array", "rosv_util.write_out", "logging.info", "load_bert_vectors", "np.array.extend", "np.array.extend", "load_bert_vectors", "copy.deepcopy", "np.append", "np.vstack().astype", "faiss.IndexFlatL2.add", "faiss.IndexFlatL2.search", "str", "logging.info", "np.array", "faiss.normalize_L2", "faiss.IndexFlatIP", "faiss.normalize_L2", "faiss.IndexFlatL2", "len", "len", "np.vstack", "np.where", "str", "len", "round", "np.array", "len", "np.delete"], "function", ["home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.filtering_baseline.write_out", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.load_bert_vectors", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.load_bert_vectors"], ["            ", "noun_ii", "=", "np", ".", "where", "(", "i", "==", "n_i", ")", "[", "0", "]", "\n", "if", "noun_ii", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "                ", "knn", "+=", "nouns", "[", "n_i", "]", "+", "'\\t'", "+", "','", ".", "join", "(", "nouns", "[", "np", ".", "delete", "(", "i", ",", "noun_ii", "[", "0", "]", ")", "]", ")", "+", "'\\n'", "\n", "", "else", ":", "\n", "                ", "knn", "+=", "nouns", "[", "n_i", "]", "+", "'\\t'", "+", "','", ".", "join", "(", "nouns", "[", "i", "[", ":", "max_k", "]", "]", ")", "+", "'\\n'", "\n", "", "n_i", "+=", "1", "\n", "", "s", "=", "e", "\n", "logging", ".", "info", "(", "str", "(", "(", "tt", "+", "1", ")", "*", "chunk_size", "/", "nouns", ".", "shape", "[", "0", "]", ")", "+", "\" % training vectors processed.\"", ")", "\n", "\n", "", "write_out", "(", "out_file", ",", "knn", ")", "\n", "logging", ".", "info", "(", "\"knn for training samples were wrote out. \"", ")", "\n", "\n", "\n", "", "def", "knn_eval_data", "(", "train_samples", ",", "eval_samples", ",", "mv_path", ",", "max_k", ",", "out_file", ",", "use_cosine", "=", "False", ")", ":", "\n", "    ", "logging", ".", "info", "(", "\"Start processing evaluation samples\"", ")", "\n", "men_vec", "=", "[", "]", "\n", "nouns", "=", "[", "]", "\n", "for", "noun", "in", "train_samples", ":", "\n", "        ", "vec", "=", "load_bert_vectors", "(", "mv_path", ",", "noun", ")", "\n", "men_vec", ".", "extend", "(", "vec", ")", "\n", "nouns", ".", "extend", "(", "[", "noun", "]", "*", "len", "(", "vec", ")", ")", "\n", "", "logging", ".", "info", "(", "\"Total number of training vector is \"", "+", "str", "(", "len", "(", "nouns", ")", ")", ")", "\n", "\n", "nouns", "=", "np", ".", "array", "(", "nouns", ")", "\n", "men_vec", "=", "np", ".", "array", "(", "men_vec", ")", "\n", "dim", "=", "men_vec", ".", "shape", "[", "1", "]", "\n", "\n", "knn", "=", "''", "\n", "cnt", "=", "0", "\n", "for", "noun", "in", "eval_samples", ":", "\n", "        ", "cnt", "+=", "1", "\n", "if", "cnt", "%", "1000", "==", "0", ":", "\n", "            ", "logging", ".", "info", "(", "str", "(", "round", "(", "cnt", "/", "len", "(", "eval_samples", ")", "*", "100", ",", "2", ")", ")", "+", "\" % nouns processed.\"", ")", "\n", "", "vec", "=", "load_bert_vectors", "(", "mv_path", ",", "noun", ")", "\n", "nouns2", "=", "copy", ".", "deepcopy", "(", "nouns", ")", "\n", "nouns2", "=", "np", ".", "append", "(", "nouns2", ",", "np", ".", "array", "(", "[", "noun", "]", "*", "len", "(", "vec", ")", ")", ")", "\n", "\n", "vec", "=", "np", ".", "vstack", "(", "(", "men_vec", ",", "np", ".", "array", "(", "vec", ")", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "if", "use_cosine", ":", "\n", "            ", "normalize_L2", "(", "vec", ")", "\n", "index", "=", "faiss", ".", "IndexFlatIP", "(", "dim", ")", "\n", "", "else", ":", "\n", "            ", "index", "=", "faiss", ".", "IndexFlatL2", "(", "dim", ")", "\n", "", "index", ".", "add", "(", "vec", ")", "\n", "\n", "n_j", "=", "men_vec", ".", "shape", "[", "0", "]", "\n", "_", ",", "I", "=", "index", ".", "search", "(", "vec", "[", "men_vec", ".", "shape", "[", "0", "]", ":", "]", ",", "max_k", "+", "1", ")", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.rosv_util.load_remain_noun_id": [[124, 133], ["dict", "open", "line.strip().split", "int", "line.strip"], "function", ["None"], ["            ", "noun_ii", "=", "np", ".", "where", "(", "i", "==", "n_j", ")", "[", "0", "]", "\n", "if", "noun_ii", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "                ", "knn", "+=", "noun", "+", "'\\t'", "+", "','", ".", "join", "(", "nouns2", "[", "np", ".", "delete", "(", "i", ",", "noun_ii", "[", "0", "]", ")", "]", ")", "+", "'\\n'", "\n", "", "else", ":", "\n", "                ", "knn", "+=", "noun", "+", "'\\t'", "+", "','", ".", "join", "(", "nouns2", "[", "i", "[", ":", "max_k", "]", "]", ")", "+", "'\\n'", "\n", "", "n_j", "+=", "1", "\n", "\n", "", "", "write_out", "(", "out_file", ",", "knn", ")", "\n", "logging", ".", "info", "(", "\"knn for evaluation samples were wrote out. \"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.rosv_util.filtered_sample": [[135, 141], ["new_samples.append"], "function", ["None"], ["", "def", "load_remain_noun_id", "(", "file", ")", ":", "\n", "    ", "remain_noun_id", "=", "dict", "(", ")", "\n", "with", "open", "(", "file", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "tmp", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "noun", "=", "tmp", "[", "0", "]", "\n", "ids", "=", "[", "int", "(", "i", ")", "for", "i", "in", "tmp", "[", "1", ":", "]", "]", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.rosv_util.filter_strategy_rosv": [[143, 165], ["range", "nouns.repeat().reshape", "np.where", "nouns.repeat", "remain_noun_id[].append"], "function", ["None"], ["", "", "return", "remain_noun_id", "\n", "\n", "\n", "", "def", "filtered_sample", "(", "embedding_dict", ",", "samples", ")", ":", "\n", "    ", "new_samples", "=", "[", "]", "\n", "for", "noun", "in", "samples", ":", "\n", "        ", "if", "noun", "in", "embedding_dict", ":", "\n", "            ", "new_samples", ".", "append", "(", "noun", ")", "\n", "", "", "return", "new_samples", "\n", "\n", "\n", "", "def", "filter_strategy_rosv", "(", "knn", ")", ":", "\n", "    ", "nouns", "=", "knn", "[", ":", ",", "0", "]", "\n", "noun_start_id", "=", "{", "}", "\n", "old_noun", "=", "''", "\n", "for", "i", "in", "range", "(", "nouns", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "cur_noun", "=", "nouns", "[", "i", "]", "\n", "if", "old_noun", "==", "''", "or", "not", "cur_noun", "==", "old_noun", ":", "\n", "            ", "noun_start_id", "[", "cur_noun", "]", "=", "i", "\n", "old_noun", "=", "cur_noun", "\n", "\n", "", "", "k", "=", "knn", ".", "shape", "[", "1", "]", "-", "1", "\n", "target", "=", "nouns", ".", "repeat", "(", "k", ")", ".", "reshape", "(", "(", "-", "1", ",", "k", ")", ")", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.run_svc.main": [[12, 138], ["os.path.join", "os.path.join", "src.utils.init_logging_path", "logging.basicConfig", "logging.info", "logging.info", "logging.info", "logging.info", "src.utils.load_prop_instances", "src.utils.load_prop_instances", "src.utils.load_prop_instances", "src.utils.load_prop_instances", "src.utils.load_prop_instances", "os.path.isfile", "logging.info", "src.utils.write_csv", "src.utils.write_txt", "os.getcwd", "getopt.getopt", "os.path.exists", "FileNotFoundError", "os.path.normpath().split", "os.path.abspath", "os.path.exists", "os.makedirs", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "src.utils.load_prop_instances", "src.utils.load_prop_instances", "src.utils.load_pretrained_embeddings", "logging.info", "print", "src.utils.word_embedding", "src.utils.word_embedding", "src.utils.word_embedding", "src.utils.word_embedding", "src.utils.word_embedding", "src.utils.word_embedding", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "src.svm.train_svc", "src.svm.test_svc", "results.append", "properties.append", "os.path.join", "os.path.join", "print", "sys.exit", "print", "sys.exit", "os.path.join", "os.path.join", "src.utils.load_pretrained_embeddings", "os.path.join", "os.path.abspath", "os.path.normpath", "os.path.join", "src.utils.load_pretrained_embeddings", "os.path.join", "os.path.join", "os.path.join", "src.utils.load_pretrained_embeddings", "str", "len", "len", "len", "len", "len", "len", "os.path.join", "src.utils.load_pretrained_embeddings", "os.path.join"], "function", ["home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.init_logging_path", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.load_prop_instances", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.load_prop_instances", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.load_prop_instances", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.load_prop_instances", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.load_prop_instances", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.write_csv", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.write_txt", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.load_prop_instances", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.load_prop_instances", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.load_pretrained_embeddings", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.word_embedding", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.word_embedding", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.word_embedding", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.word_embedding", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.word_embedding", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.word_embedding", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.svm.train_svc", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.svm.test_svc", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.load_pretrained_embeddings", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.load_pretrained_embeddings", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.load_pretrained_embeddings", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.load_pretrained_embeddings"], ["def", "main", "(", "argv", ")", ":", "\n", "    ", "log_dir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "\"log/\"", ")", "\n", "logfile", "=", "''", "\n", "\n", "vector_type", "=", "'static'", "\n", "max_sent_len", "=", "'64'", "\n", "use_mask", "=", "False", "\n", "data_path", "=", "''", "\n", "embed_path", "=", "''", "\n", "kernel", "=", "''", "\n", "\n", "try", ":", "\n", "        ", "opts", ",", "args", "=", "getopt", ".", "getopt", "(", "argv", ",", "\"hd:v:k:e:m\"", ",", "[", "\"data_dir=\"", ",", "\"vector_type=\"", ",", "\"kernel=\"", ",", "\"emb_dir=\"", "]", ")", "\n", "", "except", "getopt", ".", "GetoptError", ":", "\n", "        ", "print", "(", "\"run_svc.py -d <data_path> -v <vector_type> -m <use_mask> -k <kernel> -e <emb_path>\"", ")", "\n", "sys", ".", "exit", "(", "2", ")", "\n", "\n", "", "for", "opt", ",", "arg", "in", "opts", ":", "\n", "        ", "if", "opt", "==", "'-h'", ":", "\n", "            ", "print", "(", "\"python run_svc.py -d <data_path> -v <vector_type> -m <use_mask> -k <kernel> -e <emb_path>\"", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "", "elif", "opt", "in", "(", "\"-d\"", ",", "\"--data_dir\"", ")", ":", "\n", "            ", "data_path", "=", "arg", "\n", "", "elif", "opt", "in", "(", "\"-v\"", ",", "\"--vector_type\"", ")", ":", "\n", "            ", "vector_type", "=", "arg", "\n", "", "elif", "opt", "in", "(", "\"-k\"", ",", "\"--kernel\"", ")", ":", "\n", "            ", "kernel", "=", "arg", "\n", "", "elif", "opt", "in", "(", "\"-e\"", ",", "\"--emb_dir\"", ")", ":", "\n", "            ", "embed_path", "=", "arg", "\n", "", "elif", "opt", "==", "\"-m\"", ":", "\n", "            ", "use_mask", "=", "True", "\n", "\n", "", "", "if", "not", "os", ".", "path", ".", "exists", "(", "data_path", ")", ":", "\n", "        ", "raise", "FileNotFoundError", "(", "\"data path not exists\"", ")", "\n", "", "dataset", "=", "os", ".", "path", ".", "normpath", "(", "data_path", ")", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "\n", "result_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "abspath", "(", "project_path", ")", ",", "'result'", ",", "dataset", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "result_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "result_path", ")", "\n", "\n", "", "log_file_path", "=", "init_logging_path", "(", "log_dir", ",", "'extract_men_vec'", ",", "logfile", ")", "\n", "logging", ".", "basicConfig", "(", "filename", "=", "log_file_path", ",", "\n", "level", "=", "10", ",", "\n", "format", "=", "'%(asctime)s %(levelname)s %(message)s'", ",", "\n", "datefmt", "=", "'%m/%d/%Y %I:%M:%S %p'", ")", "\n", "\n", "logging", ".", "info", "(", "\"start logging: \"", "+", "log_file_path", ")", "\n", "logging", ".", "info", "(", "\"vector type is :\"", "+", "vector_type", ")", "\n", "logging", ".", "info", "(", "\"dataset is \"", "+", "dataset", ")", "\n", "logging", ".", "info", "(", "\"loading property and corresponding instances\"", ")", "\n", "\n", "pos_train", "=", "load_prop_instances", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "f'pos_train_data.txt'", ")", ")", "\n", "pos_test", "=", "load_prop_instances", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "f\"pos_test_data.txt\"", ")", ")", "\n", "neg_test", "=", "load_prop_instances", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "f\"neg_test_data.txt\"", ")", ")", "\n", "pos_valid", "=", "load_prop_instances", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "f\"pos_valid_data.txt\"", ")", ")", "\n", "neg_valid", "=", "load_prop_instances", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "f\"neg_valid_data.txt\"", ")", ")", "\n", "if", "vector_type", "in", "(", "'glove'", ",", "'word2vec'", ")", ":", "\n", "        ", "neg_train", "=", "load_prop_instances", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "f\"neg_train_data.txt\"", ")", ")", "\n", "", "else", ":", "\n", "        ", "neg_train", "=", "load_prop_instances", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "f\"neg_train_data.txt\"", ")", ")", "\n", "\n", "", "if", "os", ".", "path", ".", "isfile", "(", "embed_path", ")", ":", "\n", "        ", "embeddings", "=", "load_pretrained_embeddings", "(", "embed_path", ")", "\n", "", "else", ":", "\n", "        ", "if", "vector_type", "==", "'static'", ":", "\n", "            ", "embeddings", "=", "load_pretrained_embeddings", "(", "os", ".", "path", ".", "join", "(", "embed_path", ",", "'static_large.txt'", ")", ")", "\n", "", "elif", "vector_type", "==", "'glove'", ":", "\n", "            ", "embeddings", "=", "load_pretrained_embeddings", "(", "os", ".", "path", ".", "join", "(", "embed_path", ",", "'glove_wikipedia.txt'", ")", ")", "\n", "", "elif", "vector_type", "==", "'word2vec'", ":", "\n", "            ", "embeddings", "=", "load_pretrained_embeddings", "(", "os", ".", "path", ".", "join", "(", "embed_path", ",", "'word2vec_wikipedia.txt'", ")", ")", "\n", "", "elif", "vector_type", "==", "'avg_mention'", ":", "\n", "            ", "if", "use_mask", ":", "\n", "                ", "fn", "=", "'avg_mv_mask_large_'", "+", "max_sent_len", "+", "'.txt'", "\n", "", "else", ":", "\n", "                ", "fn", "=", "'avg_mv_nomask_large_'", "+", "max_sent_len", "+", "'.txt'", "\n", "", "embeddings", "=", "load_pretrained_embeddings", "(", "os", ".", "path", ".", "join", "(", "embed_path", ",", "fn", ")", ")", "\n", "\n", "", "", "logging", ".", "info", "(", "'start to train and test'", ")", "\n", "properties", "=", "[", "]", "\n", "results", "=", "[", "]", "\n", "cnt", "=", "1", "\n", "for", "prop", "in", "pos_train", ":", "\n", "        ", "logging", ".", "info", "(", "str", "(", "cnt", ")", "+", "', '", "+", "prop", ")", "\n", "print", "(", "cnt", ",", "prop", ")", "\n", "pos_train_data", "=", "word_embedding", "(", "embeddings", ",", "pos_train", "[", "prop", "]", ")", "\n", "neg_train_data", "=", "word_embedding", "(", "embeddings", ",", "neg_train", "[", "prop", "]", ")", "\n", "pos_test_data", "=", "word_embedding", "(", "embeddings", ",", "pos_test", "[", "prop", "]", ")", "\n", "neg_test_data", "=", "word_embedding", "(", "embeddings", ",", "neg_test", "[", "prop", "]", ")", "\n", "pos_valid_data", "=", "word_embedding", "(", "embeddings", ",", "pos_valid", "[", "prop", "]", ")", "\n", "neg_valid_data", "=", "word_embedding", "(", "embeddings", ",", "neg_valid", "[", "prop", "]", ")", "\n", "\n", "train_data", "=", "np", ".", "array", "(", "pos_train_data", "+", "neg_train_data", ")", "\n", "train_label", "=", "np", ".", "array", "(", "[", "1", "]", "*", "len", "(", "pos_train_data", ")", "+", "[", "-", "1", "]", "*", "len", "(", "neg_train_data", ")", ")", "\n", "test_data", "=", "np", ".", "array", "(", "pos_test_data", "+", "neg_test_data", ")", "\n", "test_label", "=", "np", ".", "array", "(", "[", "1", "]", "*", "len", "(", "pos_test_data", ")", "+", "[", "-", "1", "]", "*", "len", "(", "neg_test_data", ")", ")", "\n", "valid_data", "=", "np", ".", "array", "(", "pos_valid_data", "+", "neg_valid_data", ")", "\n", "valid_label", "=", "np", ".", "array", "(", "[", "1", "]", "*", "len", "(", "pos_valid_data", ")", "+", "[", "-", "1", "]", "*", "len", "(", "neg_valid_data", ")", ")", "\n", "del", "pos_train_data", "\n", "del", "neg_train_data", "\n", "del", "pos_test_data", "\n", "del", "neg_test_data", "\n", "del", "pos_valid_data", "\n", "del", "neg_valid_data", "\n", "\n", "clf", ",", "th", "=", "train_svc", "(", "train_data", ",", "valid_data", ",", "train_label", ",", "valid_label", ",", "kernel", ")", "\n", "rr", "=", "test_svc", "(", "test_data", ",", "test_label", ",", "clf", ",", "th", ")", "\n", "results", ".", "append", "(", "rr", ")", "\n", "properties", ".", "append", "(", "prop", ")", "\n", "cnt", "+=", "1", "\n", "\n", "", "if", "vector_type", "==", "'static'", ":", "\n", "        ", "csv_file", "=", "os", ".", "path", ".", "join", "(", "result_path", ",", "vector_type", "+", "\"_\"", "+", "kernel", "+", "'_large.csv'", ")", "\n", "header", "=", "'svc, '", "+", "vector_type", "+", "', '", "+", "kernel", "+", "',  bert-large-uncased\\n'", "\n", "", "elif", "vector_type", "==", "'avg_mention'", ":", "\n", "        ", "if", "use_mask", ":", "\n", "            ", "csv_file", "=", "os", ".", "path", ".", "join", "(", "result_path", ",", "vector_type", "+", "'_mask_large_'", "+", "max_sent_len", "+", "\"_\"", "+", "kernel", "+", "'.csv'", ")", "\n", "header", "=", "'svc, original, '", "+", "vector_type", "+", "', bert-large-uncased, use mask, max_sent_len = '", "+", "max_sent_len", "+", "', '", "+", "kernel", "+", "'\\n'", "\n", "", "else", ":", "\n", "            ", "csv_file", "=", "os", ".", "path", ".", "join", "(", "result_path", ",", "vector_type", "+", "'_nomask_large_'", "+", "max_sent_len", "+", "\"_\"", "+", "kernel", "+", "'.csv'", ")", "\n", "header", "=", "'svc, original, '", "+", "vector_type", "+", "', bert-large-uncased, no mask, max_sent_len = '", "+", "max_sent_len", "+", "\", \"", "+", "kernel", "+", "'\\n'", "\n", "", "", "else", ":", "\n", "        ", "csv_file", "=", "os", ".", "path", ".", "join", "(", "result_path", ",", "vector_type", "+", "\"_\"", "+", "kernel", "+", "'.csv'", ")", "\n", "header", "=", "'svc, '", "+", "vector_type", "+", "', '", "+", "kernel", "+", "'\\n'", "\n", "\n", "", "write_csv", "(", "csv_file", ",", "properties", ",", "results", ")", "\n", "write_txt", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "abspath", "(", "project_path", ")", ",", "'result'", ",", "dataset", "+", "'.txt'", ")", ",", "results", ",", "header", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.rosv_knn.main": [[9, 78], ["os.path.join", "init_logging_path", "logging.basicConfig", "logging.info", "logging.info", "knn_train_data", "knn_eval_data", "logging.info", "os.getcwd", "getopt.getopt", "os.path.exists", "FileNotFoundError", "os.path.normpath().split", "os.path.exists", "os.makedirs", "load_nouns", "load_nouns", "load_nouns", "os.path.join", "os.path.join", "print", "sys.exit", "print", "sys.exit", "os.path.join", "os.path.join", "os.path.join", "load_data", "load_data", "os.path.normpath", "os.path.join", "os.path.join", "str", "str", "int"], "function", ["home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.init_logging_path", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.rosv_util.knn_train_data", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.rosv_util.knn_eval_data", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.load_nouns", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.load_nouns", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.load_nouns", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.filtering_baseline.load_data", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.filtering_baseline.load_data"], ["def", "main", "(", "argv", ")", ":", "\n", "    ", "log_dir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "\"log/\"", ")", "\n", "logfile", "=", "''", "\n", "\n", "max_sent_len", "=", "'64'", "\n", "maxk", "=", "300", "\n", "use_mask", "=", "False", "\n", "data_path", "=", "''", "\n", "mv_path", "=", "''", "\n", "out_path", "=", "''", "\n", "\n", "try", ":", "\n", "        ", "opts", ",", "args", "=", "getopt", ".", "getopt", "(", "argv", ",", "\"hl:d:v:o:k:m\"", ",", "[", "\"lfile=\"", ",", "\"ddir=\"", ",", "\"vdir=\"", ",", "\"odir=\"", ",", "\"maxk=\"", "]", ")", "\n", "", "except", "getopt", ".", "GetoptError", ":", "\n", "        ", "print", "(", "'rosv_knn.py -l <logfile> -d <data_path> -v <men_vec_path> -o <output_path> -m <use mask>'", ")", "\n", "sys", ".", "exit", "(", "2", ")", "\n", "", "for", "opt", ",", "arg", "in", "opts", ":", "\n", "        ", "if", "opt", "==", "'-h'", ":", "\n", "            ", "print", "(", "'rosv_knn.py -l <logfile> -d <data_path> -v <men_vec_path> -o <output_path> -m <use mask>'", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "", "elif", "opt", "in", "(", "\"-l\"", ",", "\"--lfile\"", ")", ":", "\n", "            ", "logfile", "=", "arg", "\n", "", "elif", "opt", "in", "(", "\"-d\"", ",", "\"--ddir\"", ")", ":", "\n", "            ", "data_path", "=", "arg", "\n", "", "elif", "opt", "in", "(", "\"-v\"", ",", "\"--vdir\"", ")", ":", "\n", "            ", "mv_path", "=", "arg", "\n", "", "elif", "opt", "in", "(", "\"-o\"", ",", "\"--odir\"", ")", ":", "\n", "            ", "out_path", "=", "arg", "\n", "", "elif", "opt", "in", "(", "\"-k\"", ",", "\"--maxk\"", ")", ":", "\n", "            ", "maxk", "=", "int", "(", "arg", ")", "\n", "", "elif", "opt", "==", "\"-m\"", ":", "\n", "            ", "use_mask", "=", "True", "\n", "\n", "", "", "log_file_path", "=", "init_logging_path", "(", "log_dir", ",", "'knn'", ",", "logfile", ")", "\n", "logging", ".", "basicConfig", "(", "filename", "=", "log_file_path", ",", "\n", "level", "=", "10", ",", "\n", "format", "=", "'%(asctime)s %(levelname)s %(message)s'", ",", "\n", "datefmt", "=", "'%m/%d/%Y %I:%M:%S %p'", ",", "\n", ")", "\n", "\n", "logging", ".", "info", "(", "\"start logging: \"", "+", "log_file_path", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "data_path", ")", ":", "\n", "        ", "raise", "FileNotFoundError", "(", "\"data path not exists\"", ")", "\n", "\n", "", "dataset", "=", "os", ".", "path", ".", "normpath", "(", "data_path", ")", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "out_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "out_path", ")", "\n", "\n", "", "logging", ".", "info", "(", "\"loading samples...\"", ")", "\n", "\n", "if", "dataset", "in", "[", "'cslb'", ",", "'mcrae'", ",", "'wordnet'", ",", "'babelnet'", ",", "'morrow'", ",", "'abstract'", "]", ":", "\n", "        ", "train", "=", "load_nouns", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "'train_inst.txt'", ")", ")", "\n", "valid", "=", "load_nouns", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "'val_inst.txt'", ")", ")", "\n", "test", "=", "load_nouns", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "'test_inst.txt'", ")", ")", "\n", "", "elif", "dataset", "in", "[", "'glasgow'", ",", "'mt40k'", ",", "'anew'", ",", "'morrowA'", ",", "'morrowB'", "]", ":", "\n", "        ", "train", ",", "_", "=", "load_data", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "'train.txt'", ")", ")", "\n", "test", ",", "_", "=", "load_data", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "'test.txt'", ")", ")", "\n", "valid", "=", "[", "]", "\n", "\n", "", "if", "use_mask", ":", "\n", "        ", "out_file", "=", "os", ".", "path", ".", "join", "(", "out_path", ",", "'knn_mask_large_'", "+", "dataset", "+", "'_'", "+", "str", "(", "maxk", ")", "+", "'.txt'", ")", "\n", "", "else", ":", "\n", "        ", "out_file", "=", "os", ".", "path", ".", "join", "(", "out_path", ",", "'knn_nomask_large_'", "+", "dataset", "+", "'_'", "+", "str", "(", "maxk", ")", "+", "'.txt'", ")", "\n", "", "knn_train_data", "(", "train", ",", "mv_path", ",", "maxk", ",", "out_file", ")", "\n", "\n", "knn_eval_data", "(", "train", ",", "valid", "+", "test", ",", "mv_path", ",", "maxk", ",", "out_file", ")", "\n", "\n", "logging", ".", "info", "(", "\"Done.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.rosv_avg_mv.main": [[10, 99], ["os.path.join", "init_logging_path", "logging.basicConfig", "logging.info", "os.path.join", "logging.info", "logging.info", "load_nouns", "logging.info", "dict", "load_neighbors", "os.getcwd", "getopt.getopt", "os.path.exists", "FileNotFoundError", "os.path.abspath", "os.path.exists", "os.makedirs", "os.path.join", "load_bert_vectors", "np.array", "os.path.join", "os.path.join", "max", "logging.info", "filter_strategy_rosv", "logging.info", "dict", "logging.info", "print", "sys.exit", "print", "sys.exit", "os.path.abspath", "os.path.join", "os.path.join", "open", "str", "np.mean", "logging.info", "f.write", "str", "str", "str", "str", "random.sample", "list", "range", "str"], "function", ["home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.init_logging_path", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.load_nouns", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.rosv_util.load_neighbors", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.load_bert_vectors", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.rosv_util.filter_strategy_rosv"], ["def", "main", "(", "argv", ")", ":", "\n", "    ", "log_dir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "\"log/\"", ")", "\n", "logfile", "=", "''", "\n", "candidate_k", "=", "[", "5", ",", "10", ",", "20", ",", "50", ",", "100", ",", "110", ",", "115", "]", "\n", "max_sent_len", "=", "'64'", "\n", "use_mask", "=", "False", "\n", "knn_path", "=", "''", "\n", "mv_path", "=", "''", "\n", "dataset", "=", "''", "\n", "maxk", "=", "250", "\n", "\n", "try", ":", "\n", "        ", "opts", ",", "args", "=", "getopt", ".", "getopt", "(", "argv", ",", "\"hd:n:l:v:m\"", ",", "[", "\"data=\"", ",", "\"nndir=\"", ",", "\"lfile=\"", ",", "\"vdir\"", "]", ")", "\n", "", "except", "getopt", ".", "GetoptError", ":", "\n", "        ", "print", "(", "\n", "\"rosv_avg_mv.py -d <dataset> -n <knn_path> -m <use_mask> -l <logfile> -v <men_vec_path>\"", ")", "\n", "sys", ".", "exit", "(", "2", ")", "\n", "\n", "", "for", "opt", ",", "arg", "in", "opts", ":", "\n", "        ", "if", "opt", "==", "'-h'", ":", "\n", "            ", "print", "(", "\"rosv_avg_mv.py -d <dataset> -n <knn_path> -m <use_mask> -l <logfile> -v <men_vec_path>\"", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "", "elif", "opt", "in", "(", "\"-d\"", ",", "\"--data\"", ")", ":", "\n", "            ", "dataset", "=", "arg", "\n", "", "elif", "opt", "in", "(", "\"-n\"", ",", "\"--nndir\"", ")", ":", "\n", "            ", "knn_path", "=", "arg", "\n", "", "elif", "opt", "in", "(", "\"-l\"", ",", "\"--lfile\"", ")", ":", "\n", "            ", "logfile", "=", "arg", "\n", "", "elif", "opt", "in", "(", "\"-v\"", ",", "\"--vdir\"", ")", ":", "\n", "            ", "mv_path", "=", "arg", "\n", "", "elif", "opt", "==", "\"-m\"", ":", "\n", "            ", "use_mask", "=", "True", "\n", "\n", "", "", "log_file_path", "=", "init_logging_path", "(", "log_dir", ",", "'rosv_avg_mv'", ",", "logfile", ")", "\n", "logging", ".", "basicConfig", "(", "filename", "=", "log_file_path", ",", "\n", "level", "=", "10", ",", "\n", "format", "=", "'%(asctime)s %(levelname)s %(message)s'", ",", "\n", "datefmt", "=", "'%m/%d/%Y %I:%M:%S %p'", ",", "\n", ")", "\n", "\n", "logging", ".", "info", "(", "\"start logging: \"", "+", "log_file_path", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "knn_path", ")", ":", "\n", "        ", "raise", "FileNotFoundError", "(", "\"knn path not exists\"", ")", "\n", "\n", "", "out_mv_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "abspath", "(", "project_path", ")", ",", "'data'", ",", "'avg_mv_remain'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "out_mv_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "out_mv_path", ")", "\n", "\n", "", "logging", ".", "info", "(", "\"dataset: \"", "+", "dataset", ")", "\n", "logging", ".", "info", "(", "\"avgerage mention vectors after filtering are stored under \"", "+", "out_mv_path", ")", "\n", "\n", "nouns", "=", "load_nouns", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "abspath", "(", "project_path", ")", ",", "'data/dataset_nouns'", ",", "dataset", "+", "'.txt'", ")", ")", "\n", "\n", "logging", ".", "info", "(", "\"loading original vectors\"", ")", "\n", "org_vec", "=", "dict", "(", ")", "\n", "for", "n", "in", "nouns", ":", "\n", "        ", "vec", "=", "load_bert_vectors", "(", "mv_path", ",", "n", ")", "\n", "org_vec", "[", "n", "]", "=", "np", ".", "array", "(", "vec", ")", "\n", "\n", "", "if", "use_mask", ":", "\n", "        ", "knn_file", "=", "os", ".", "path", ".", "join", "(", "knn_path", ",", "'knn_mask_large_'", "+", "dataset", "+", "'_'", "+", "str", "(", "maxk", ")", "+", "'.txt'", ")", "\n", "", "else", ":", "\n", "        ", "knn_file", "=", "os", ".", "path", ".", "join", "(", "knn_path", ",", "'knn_nomask_large_'", "+", "dataset", "+", "'_'", "+", "str", "(", "maxk", ")", "+", "'.txt'", ")", "\n", "\n", "", "knn", "=", "load_neighbors", "(", "knn_file", ",", "max", "(", "candidate_k", ")", ")", "\n", "\n", "for", "k", "in", "candidate_k", ":", "\n", "        ", "logging", ".", "info", "(", "\"filtering for k = \"", "+", "str", "(", "k", ")", ")", "\n", "remain_noun_id", "=", "filter_strategy_rosv", "(", "knn", "[", ":", ",", ":", "k", "+", "1", "]", ")", "\n", "\n", "logging", ".", "info", "(", "\"start computing avgerage mention vectors\"", ")", "\n", "avg_vec", "=", "dict", "(", ")", "\n", "for", "n", "in", "nouns", ":", "\n", "            ", "if", "n", "in", "remain_noun_id", ":", "\n", "                ", "avg_vec", "[", "n", "]", "=", "np", ".", "mean", "(", "org_vec", "[", "n", "]", "[", "remain_noun_id", "[", "n", "]", "]", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "logging", ".", "info", "(", "n", "+", "' is filtered, replaced by a randomly selected vector'", ")", "\n", "avg_vec", "[", "n", "]", "=", "org_vec", "[", "n", "]", "[", "random", ".", "sample", "(", "list", "(", "range", "(", "org_vec", "[", "n", "]", ".", "shape", "[", "0", "]", ")", ")", ",", "1", ")", "[", "0", "]", "]", "\n", "\n", "", "", "if", "use_mask", ":", "\n", "            ", "mv_file", "=", "os", ".", "path", ".", "join", "(", "out_mv_path", ",", "'rosv_avg_mv_mask_large_'", "+", "dataset", "+", "'_'", "+", "str", "(", "k", ")", "+", "'.txt'", ")", "\n", "", "else", ":", "\n", "            ", "mv_file", "=", "os", ".", "path", ".", "join", "(", "out_mv_path", ",", "'rosv_avg_mv_nomask_large_'", "+", "dataset", "+", "'_'", "+", "str", "(", "k", ")", "+", "'.txt'", ")", "\n", "\n", "", "with", "open", "(", "mv_file", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "key", "in", "avg_vec", ":", "\n", "                ", "f", ".", "write", "(", "' '", ".", "join", "(", "[", "key", "]", "+", "[", "str", "(", "v", ")", "for", "v", "in", "avg_vec", "[", "key", "]", "]", ")", "+", "'\\n'", ")", "\n", "", "", "logging", ".", "info", "(", "\"avgerage mention vectors after filtering stored.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.load_data": [[8, 17], ["open", "numpy.array", "numpy.array", "line.strip().split", "X.append", "Y.append", "line.strip"], "function", ["None"], ["import", "torch", "\n", "import", "dgl", "\n", "import", "os", "\n", "from", "sklearn", ".", "metrics", "import", "f1_score", ",", "average_precision_score", "\n", "from", "sklearn", ".", "preprocessing", "import", "label_binarize", "\n", "from", "graph", "import", "read_dictionary", "\n", "from", "collections", "import", "defaultdict", "\n", "\n", "\n", "def", "init_logging_path", "(", "log_path", ",", "task_name", ",", "file_name", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.load_prop_instances": [[20, 29], ["open", "line.strip().split", "cns.split", "feature_concept[].append", "line.strip"], "function", ["None"], ["        ", "dir_log", "+=", "f'{file_name}_{len(os.listdir(dir_log))}.log'", "\n", "with", "open", "(", "dir_log", ",", "'w'", ")", ":", "\n", "             ", "os", ".", "utime", "(", "dir_log", ",", "None", ")", "\n", "", "", "if", "not", "os", ".", "path", ".", "exists", "(", "dir_log", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dir_log", ")", "\n", "dir_log", "+=", "f'{file_name}_{len(os.listdir(dir_log))}.log'", "\n", "with", "open", "(", "dir_log", ",", "'w'", ")", ":", "\n", "             ", "os", ".", "utime", "(", "dir_log", ",", "None", ")", "\n", "", "", "return", "dir_log", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.load_nouns": [[31, 37], ["open", "nouns.append", "line.strip().lower", "line.strip"], "function", ["None"], ["", "def", "select_threshold_rules", "(", "y_true", ",", "y_prob", ",", "path", ",", "fold", ",", "idx", ",", "train_label", ")", ":", "\n", "    ", "print", "(", "type", "(", "y_true", ")", ",", "y_true", ".", "shape", ",", "np", ".", "where", "(", "y_true", ".", "numpy", "(", ")", ".", "sum", "(", "axis", "=", "0", ")", ">", "0", ")", ")", "\n", "interested_template_ids", "=", "np", ".", "where", "(", "y_true", ".", "numpy", "(", ")", ".", "sum", "(", "axis", "=", "0", ")", ">", "0", ")", "[", "1", "]", "\n", "thresholds", "=", "np", ".", "unique", "(", "y_prob", ")", "\n", "best_f1", "=", "-", "1", "\n", "best_th", "=", "-", "1", "\n", "for", "th", "in", "thresholds", ":", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.load_pretrained_embeddings": [[39, 52], ["open", "line.strip().split", "values[].lower", "numpy.asarray", "line.strip", "re.match"], "function", ["None"], ["true_rules", ",", "_", "=", "find_rules_ut", "(", "path", ",", "fold", ",", "idx", ",", "train_label", ",", "y_true", ",", "interested_template_ids", ")", "\n", "pred_rules", ",", "_", "=", "find_rules_ut", "(", "path", ",", "fold", ",", "idx", ",", "train_label", ",", "y_pred", ",", "interested_template_ids", ",", "pred", "=", "True", ")", "\n", "print", "(", "len", "(", "set", "(", "true_rules", ")", ")", ",", "len", "(", "set", "(", "pred_rules", ")", ")", ")", "\n", "f1", "=", "metrics", "(", "set", "(", "true_rules", ")", ",", "set", "(", "pred_rules", ")", ")", "[", "2", "]", "\n", "\n", "if", "best_f1", "<", "f1", ":", "\n", "            ", "best_f1", "=", "f1", "\n", "best_th", "=", "th", "\n", "", "", "return", "best_th", ",", "best_f1", "\n", "\n", "\n", "#######################################################################", "\n", "#", "\n", "# Utility function for finding predicted rules", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.pre_rec_f1": [[54, 56], ["round", "round", "round", "sklearn.metrics.precision_score", "sklearn.metrics.recall_score", "sklearn.metrics.f1_score"], "function", ["None"], ["#######################################################################", "\n", "", "def", "find_rules_ut_all", "(", "path", ",", "train_label", ",", "probality", ",", "topk", ")", ":", "\n", "# print(pred)", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.word_embedding": [[58, 69], ["words_embeddings.append", "print", "words_embeddings.append", "print"], "function", ["None"], ["template_dict_file", "=", "path", "+", "'train/s1'", "+", "'/all_unary_templates.dict'", "# for all data", "\n", "result", "=", "''", "\n", "\n", "node_dict", "=", "read_dictionary", "(", "node_dict_file", ")", "# {id: name}", "\n", "template_dict", "=", "read_dictionary", "(", "template_dict_file", ")", "# {id: template name}", "\n", "\n", "probality", "[", "np", ".", "where", "(", "train_label", "==", "1", ")", "]", "=", "0", "# ignore the true rules", "\n", "\n", "topk_idx", "=", "probality", ".", "reshape", "(", "-", "1", ")", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "[", "0", ":", "topk", "]", "\n", "\n", "for", "idx", "in", "topk_idx", ":", "\n", "        ", "n_id", "=", "idx", "//", "probality", ".", "shape", "[", "1", "]", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.write_csv": [[71, 78], ["open", "csv.writer", "csv.writer.writerow", "range", "csv.writer.writerow", "len", "csv.writer.writerow", "numpy.round().tolist", "numpy.round", "numpy.mean", "numpy.array"], "function", ["None"], ["if", "probality", "[", "n_id", ",", "t_id", "]", "<=", "0", ":", "\n", "            ", "break", "\n", "", "n_name", "=", "node_dict", "[", "n_id", "]", "\n", "tmp_name", "=", "template_dict", "[", "int", "(", "t_id", ")", "]", "\n", "rule", "=", "tmp_name", ".", "replace", "(", "'TempateExpression'", ",", "'ER'", ")", "\n", "rule", "=", "rule", ".", "replace", "(", "'?'", ",", "n_name", ")", "\n", "result", "+=", "rule", "+", "'\\n'", "\n", "", "return", "result", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.write_txt": [[80, 87], ["open", "fout.writelines", "str", "numpy.round", "numpy.mean", "numpy.array"], "function", ["None"], ["## find rules for unary templates", "\n", "# dataset: wine, sumo, ...", "\n", "# template_ids: unary template ids", "\n", "", "def", "find_rules_ut", "(", "path", ",", "fold", ",", "node_ids", ",", "train_label", ",", "template_ids", ",", "interested_template_ids", ",", "pred", "=", "False", ",", "easytask", "=", "False", ")", ":", "\n", "# print(pred)", "\n", "    ", "node_dict_file", "=", "path", "+", "'train/s'", "+", "str", "(", "fold", "+", "1", ")", "+", "'/nodes.dict'", "# for all data", "\n", "template_dict_file", "=", "path", "+", "'train/s'", "+", "str", "(", "fold", "+", "1", ")", "+", "'/unary_templates.dict'", "# for all data", "\n", "rules", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.get_best_threshold": [[89, 105], ["set", "numpy.array", "sklearn.metrics.f1_score", "numpy.zeros", "numpy.array", "numpy.where", "numpy.where"], "function", ["None"], ["\n", "selected_templates", "=", "np", ".", "where", "(", "train_label", ".", "sum", "(", "axis", "=", "0", ")", ">", "2", ")", "[", "1", "]", "\n", "\n", "node_dict", "=", "read_dictionary", "(", "node_dict_file", ")", "# {id: name}", "\n", "template_dict", "=", "read_dictionary", "(", "template_dict_file", ")", "# {id: template name}", "\n", "\n", "for", "idx", "in", "range", "(", "len", "(", "node_ids", ")", ")", ":", "\n", "        ", "n_id", "=", "node_ids", "[", "idx", "]", "\n", "n_name", "=", "node_dict", "[", "n_id", "]", "\n", "# if pred:", "\n", "tmp_ids", "=", "np", ".", "where", "(", "template_ids", "[", "idx", "]", ">", "0", ")", "[", "0", "]", "\n", "# else:", "\n", "#     tmp_ids = template_ids[idx]", "\n", "if", "not", "tmp_ids", ".", "size", ":", "\n", "            ", "continue", "\n", "", "for", "id", "in", "tmp_ids", ":", "\n", "            ", "if", "easytask", ":", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.load_bert_vectors": [[107, 116], ["open", "csv.reader", "os.path.join", "float", "data.append"], "function", ["None"], ["", "else", ":", "\n", "                ", "t_id", "=", "id", "\n", "", "if", "train_label", "[", "n_id", ",", "t_id", "]", "==", "1", ":", "\n", "                ", "continue", "\n", "", "if", "pred", "and", "t_id", "not", "in", "interested_template_ids", ":", "\n", "                ", "continue", "\n", "", "tmp_name", "=", "template_dict", "[", "int", "(", "t_id", ")", "]", "\n", "rule", "=", "tmp_name", ".", "replace", "(", "'TempateExpression'", ",", "'ER'", ")", "\n", "rule", "=", "rule", ".", "replace", "(", "'?'", ",", "n_name", ")", "\n", "rules", ".", "append", "(", "rule", ")", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.init_logging_path": [[118, 130], ["os.path.join", "os.path.exists", "os.listdir", "os.path.exists", "os.makedirs", "open", "os.utime", "open", "os.utime", "len", "len", "os.listdir", "os.listdir"], "function", ["None"], ["\n", "", "", "return", "rules", ",", "result", "\n", "\n", "## find rules for binary templates", "\n", "# dataset: wine, economy,...", "\n", "# triples: test triples with id, i.e. (n_id, bt_id, n_id)", "\n", "# pred_templates: predicated bt_ids, note: there may be more than one bt id for each node pair", "\n", "", "def", "find_rules_bt", "(", "dataset", ",", "type", ",", "triples", ",", "pred_templates", ",", "pred", "=", "False", ")", ":", "\n", "    ", "node_dict_file", "=", "'dataset/'", "+", "type", "+", "'/'", "+", "dataset", "+", "'/nodes.dict'", "\n", "template_dict_file", "=", "'dataset/'", "+", "type", "+", "'/'", "+", "dataset", "+", "'/edges.dict'", "\n", "result", "=", "''", "\n", "\n", "node_dict", "=", "read_dictionary", "(", "node_dict_file", ")", "# {id: name}", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.filtering_baseline.make_path": [[14, 17], ["os.path.exists", "os.makedirs"], "function", ["None"], ["def", "make_path", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.filtering_baseline.write_out": [[25, 28], ["open", "f.writelines"], "function", ["None"], ["def", "write_out", "(", "file_name", ",", "output", ")", ":", "\n", "    ", "with", "open", "(", "file_name", ",", "'a+'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "f", ".", "writelines", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.filtering_baseline.get_centroid": [[30, 54], ["logging.info", "np.array().astype", "np.mean.reshape().astype", "np.mean", "np.array", "range", "np.mean.reshape", "faiss.Kmeans", "faiss.Kmeans.train", "faiss.Kmeans.index.search", "pred_label.reshape.reshape", "sklearn.metrics.silhouette_score", "np.argmax", "np.bincount"], "function", ["None"], ["", "", "def", "get_centroid", "(", "men_vec", ",", "method", "=", "'mean'", ")", ":", "\n", "    ", "logging", ".", "info", "(", "\"Compute clustering centroid\"", ")", "\n", "men_vec", "=", "np", ".", "array", "(", "men_vec", ")", ".", "astype", "(", "'float32'", ")", "\n", "dim", "=", "men_vec", ".", "shape", "[", "1", "]", "\n", "mean", "=", "None", "\n", "\n", "if", "method", "==", "'mean'", ":", "\n", "        ", "mean", "=", "np", ".", "mean", "(", "men_vec", ",", "axis", "=", "0", ")", "\n", "", "elif", "method", "==", "'clustering'", ":", "\n", "        ", "best_score", "=", "-", "1", "\n", "max_ncentriod", "=", "10", "#max(men_vec.shape[0] // 10, 3)", "\n", "for", "ncentriods", "in", "range", "(", "2", ",", "max_ncentriod", ")", ":", "\n", "            ", "kmeans", "=", "faiss", ".", "Kmeans", "(", "dim", ",", "ncentriods", ",", "niter", "=", "500", ")", "\n", "kmeans", ".", "train", "(", "men_vec", ")", "\n", "_", ",", "pred_label", "=", "kmeans", ".", "index", ".", "search", "(", "men_vec", ",", "1", ")", "\n", "pred_label", "=", "pred_label", ".", "reshape", "(", "-", "1", ")", "\n", "silhouette_avg", "=", "silhouette_score", "(", "men_vec", ",", "pred_label", ")", "\n", "#print(ncentriods, silhouette_avg)", "\n", "if", "silhouette_avg", ">", "best_score", ":", "\n", "                ", "best_score", "=", "silhouette_avg", "\n", "max_cluster_idx", "=", "np", ".", "argmax", "(", "np", ".", "bincount", "(", "pred_label", ")", ")", "\n", "mean", "=", "kmeans", ".", "centroids", "[", "max_cluster_idx", "]", "\n", "", "", "", "mean", "=", "mean", ".", "reshape", "(", "1", ",", "-", "1", ")", ".", "astype", "(", "'float32'", ")", "\n", "return", "mean", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.filtering_baseline.sort_mv": [[56, 70], ["logging.info", "np.array().astype", "faiss.IndexFlatL2.add", "logging.info", "faiss.IndexFlatL2.search", "faiss.normalize_L2", "faiss.IndexFlatIP", "faiss.IndexFlatL2", "np.array", "str"], "function", ["None"], ["", "def", "sort_mv", "(", "men_vec", ",", "mean", ",", "use_cosine", "=", "False", ")", ":", "\n", "    ", "logging", ".", "info", "(", "\"Sort the mention vectors for each sample based on the distance (close to far) to centroid and write out\"", ")", "\n", "men_vec", "=", "np", ".", "array", "(", "men_vec", ")", ".", "astype", "(", "'float32'", ")", "\n", "dim", "=", "men_vec", ".", "shape", "[", "1", "]", "\n", "if", "use_cosine", ":", "\n", "        ", "normalize_L2", "(", "men_vec", ")", "\n", "index", "=", "faiss", ".", "IndexFlatIP", "(", "dim", ")", "\n", "", "else", ":", "\n", "        ", "index", "=", "faiss", ".", "IndexFlatL2", "(", "dim", ")", "\n", "", "index", ".", "add", "(", "men_vec", ")", "\n", "logging", ".", "info", "(", "\"Total number of index is \"", "+", "str", "(", "index", ".", "ntotal", ")", ")", "\n", "\n", "_", ",", "I", "=", "index", ".", "search", "(", "mean", ",", "men_vec", ".", "shape", "[", "0", "]", ")", "# sorted index from close to far", "\n", "return", "I", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.filtering_baseline.load_data": [[72, 84], ["logging.info", "logging.info", "load_bert_vectors", "men_vec.extend", "list", "len", "range", "str", "len", "len"], "function", ["home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.load_bert_vectors"], ["", "def", "load_data", "(", "samples", ",", "mv_path", ",", "start_i", "=", "0", ")", ":", "\n", "    ", "logging", ".", "info", "(", "\"load in mention vectors for samples\"", ")", "\n", "men_vec", "=", "[", "]", "\n", "nouns_idx", "=", "{", "}", "\n", "i", "=", "start_i", "\n", "for", "noun", "in", "samples", ":", "\n", "        ", "vec", "=", "load_bert_vectors", "(", "mv_path", ",", "noun", ")", "\n", "men_vec", ".", "extend", "(", "vec", ")", "\n", "nouns_idx", "[", "noun", "]", "=", "list", "(", "range", "(", "i", ",", "i", "+", "len", "(", "vec", ")", ")", ")", "\n", "i", "+=", "len", "(", "vec", ")", "\n", "", "logging", ".", "info", "(", "\"Total number of training vector is \"", "+", "str", "(", "len", "(", "men_vec", ")", ")", ")", "\n", "return", "men_vec", ",", "nouns_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.filtering_baseline.main": [[86, 180], ["os.path.join", "print", "init_logging_path", "logging.basicConfig", "logging.info", "logging.info", "filtering_baseline.load_data", "len", "filtering_baseline.get_centroid", "filtering_baseline.load_data", "np.concatenate", "nouns_idx.update", "dict", "logging.info", "os.getcwd", "getopt.getopt", "os.path.normpath().split", "load_nouns", "load_nouns", "load_nouns", "filtering_baseline.sort_mv", "int", "print", "sys.exit", "print", "sys.exit", "print", "exit", "os.path.join", "os.path.join", "os.path.join", "filtering_baseline.load_data", "filtering_baseline.load_data", "np.array().astype", "np.mean", "os.path.join", "os.path.join", "open", "os.path.normpath", "os.path.join", "os.path.join", "len", "list", "f.write", "np.array", "random.sample", "np.array", "str", "str", "bool", "str"], "function", ["home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.init_logging_path", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.filtering_baseline.load_data", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.filtering_baseline.get_centroid", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.filtering_baseline.load_data", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.load_nouns", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.load_nouns", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.utils.load_nouns", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.filtering_baseline.sort_mv", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.filtering_baseline.load_data", "home.repos.pwc.inspect_result.lina-luck_rosv_ijcai21.rov.filtering_baseline.load_data"], ["", "def", "main", "(", "argv", ")", ":", "\n", "    ", "log_dir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "\"log/\"", ")", "\n", "logfile", "=", "''", "\n", "\n", "max_sent_len", "=", "'64'", "\n", "cluster", "=", "'mean'", "\n", "use_mask", "=", "False", "\n", "data_path", "=", "''", "\n", "mv_path", "=", "''", "\n", "candidate_k", "=", "[", "5", ",", "10", ",", "20", ",", "50", ",", "80", "]", "\n", "\n", "try", ":", "\n", "        ", "opts", ",", "args", "=", "getopt", ".", "getopt", "(", "argv", ",", "\"hl:d:v:m:c:\"", ",", "[", "\"lfile=\"", ",", "\"ddir=\"", ",", "\"vdir=\"", ",", "\"mask=\"", ",", "\"cluster=\"", "]", ")", "\n", "", "except", "getopt", ".", "GetoptError", ":", "\n", "        ", "print", "(", "'filtering_baseline1.py -l <logfile> -d <data_path> -v <men_vec_path> -m <use mask> -c <cluster method>'", ")", "\n", "sys", ".", "exit", "(", "2", ")", "\n", "", "for", "opt", ",", "arg", "in", "opts", ":", "\n", "        ", "if", "opt", "==", "'-h'", ":", "\n", "            ", "print", "(", "'filtering_baseline1.py -l <logfile> -d <data_path> -v <men_vec_path> -m <use mask> -c <cluster method>'", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "", "elif", "opt", "in", "(", "\"-l\"", ",", "\"--lfile\"", ")", ":", "\n", "            ", "logfile", "=", "arg", "\n", "", "elif", "opt", "in", "(", "\"-d\"", ",", "\"--ddir\"", ")", ":", "\n", "            ", "data_path", "=", "arg", "\n", "", "elif", "opt", "in", "(", "\"-v\"", ",", "\"--vdir\"", ")", ":", "\n", "            ", "mv_path", "=", "arg", "\n", "", "elif", "opt", "in", "(", "\"-m\"", ",", "\"--mask\"", ")", ":", "\n", "            ", "use_mask", "=", "bool", "(", "arg", ")", "\n", "", "elif", "opt", "in", "(", "\"-c\"", ",", "\"--cluster\"", ")", ":", "\n", "            ", "cluster", "=", "arg", "\n", "", "", "print", "(", "use_mask", ",", "cluster", ")", "\n", "\n", "log_file_path", "=", "init_logging_path", "(", "log_dir", ",", "'fb1'", ",", "logfile", ")", "\n", "logging", ".", "basicConfig", "(", "filename", "=", "log_file_path", ",", "\n", "level", "=", "10", ",", "\n", "format", "=", "'%(asctime)s %(levelname)s %(message)s'", ",", "\n", "datefmt", "=", "'%m/%d/%Y %I:%M:%S %p'", ",", "\n", ")", "\n", "\n", "logging", ".", "info", "(", "\"start logging: \"", "+", "log_file_path", ")", "\n", "\n", "dataset", "=", "os", ".", "path", ".", "normpath", "(", "data_path", ")", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "\n", "if", "cluster", "==", "'mean'", ":", "\n", "        ", "tag", "=", "'fb1'", "\n", "", "elif", "cluster", "==", "'clustering'", ":", "\n", "        ", "tag", "=", "'fb2'", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"wrong parameter for cluster\"", ")", "\n", "exit", "(", ")", "\n", "\n", "", "logging", ".", "info", "(", "\"loading samples...\"", ")", "\n", "\n", "if", "dataset", "in", "[", "'abstract'", ",", "'cslb'", ",", "'morrow'", ",", "'wordnet'", ",", "'babelnet'", "]", ":", "\n", "        ", "train", "=", "load_nouns", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "'train_inst.txt'", ")", ")", "\n", "valid", "=", "load_nouns", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "'val_inst.txt'", ")", ")", "\n", "test", "=", "load_nouns", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "'test_inst.txt'", ")", ")", "\n", "", "elif", "dataset", "in", "[", "'anew'", ",", "'glasgow'", "]", ":", "\n", "        ", "train", ",", "_", "=", "load_data", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "'train.txt'", ")", ")", "\n", "test", ",", "_", "=", "load_data", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "'test.txt'", ")", ")", "\n", "valid", "=", "[", "]", "\n", "\n", "", "men_vec", ",", "nouns_idx", "=", "load_data", "(", "train", ",", "mv_path", ")", "\n", "start_i", "=", "len", "(", "men_vec", ")", "\n", "mean", "=", "get_centroid", "(", "men_vec", ",", "cluster", ")", "\n", "men_vec1", ",", "nouns_idx1", "=", "load_data", "(", "valid", "+", "test", ",", "mv_path", ",", "start_i", ")", "\n", "men_vec", "=", "np", ".", "concatenate", "(", "(", "men_vec", ",", "np", ".", "array", "(", "men_vec1", ")", ".", "astype", "(", "\"float32\"", ")", ")", ")", "\n", "nouns_idx", ".", "update", "(", "nouns_idx1", ")", "\n", "del", "men_vec1", "\n", "del", "nouns_idx1", "\n", "sorted_idx", "=", "sort_mv", "(", "men_vec", ",", "mean", ")", "[", "0", "]", "\n", "\n", "avg_vec", "=", "dict", "(", ")", "\n", "logging", ".", "info", "(", "\"Compute filtered average mention vectors for each sample\"", ")", "\n", "for", "k", "in", "candidate_k", ":", "\n", "        ", "keep_num", "=", "int", "(", "men_vec", ".", "shape", "[", "0", "]", "*", "(", "k", "/", "100", ")", ")", "\n", "topk_idx", "=", "sorted_idx", "[", ":", "keep_num", "]", "\n", "\n", "for", "nn", "in", "nouns_idx", ":", "\n", "            ", "keep_id_n", "=", "[", "i", "for", "i", "in", "nouns_idx", "[", "nn", "]", "if", "i", "in", "topk_idx", "]", "\n", "if", "len", "(", "keep_id_n", ")", "==", "0", ":", "\n", "                ", "keep_id_n", "=", "list", "(", "random", ".", "sample", "(", "nouns_idx", "[", "nn", "]", ",", "1", ")", ")", "\n", "", "avg_vec", "[", "nn", "]", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "men_vec", ")", "[", "keep_id_n", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "if", "use_mask", ":", "\n", "            ", "mv_file", "=", "os", ".", "path", ".", "join", "(", "out_mv_path", ",", "tag", "+", "'_avg_mv_mask_large_'", "+", "dataset", "+", "'_'", "+", "\n", "str", "(", "k", ")", "+", "'.txt'", ")", "\n", "", "else", ":", "\n", "            ", "mv_file", "=", "os", ".", "path", ".", "join", "(", "out_mv_path", ",", "tag", "+", "'_avg_mv_nomask_large_'", "+", "dataset", "+", "'_'", "+", "\n", "str", "(", "k", ")", "+", "'.txt'", ")", "\n", "\n", "", "with", "open", "(", "mv_file", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "key", "in", "avg_vec", ":", "\n", "                ", "f", ".", "write", "(", "' '", ".", "join", "(", "[", "key", "]", "+", "[", "str", "(", "v", ")", "for", "v", "in", "avg_vec", "[", "key", "]", "]", ")", "+", "'\\n'", ")", "\n", "\n"]]}