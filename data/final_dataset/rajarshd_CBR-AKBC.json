{"home.repos.pwc.inspect_result.rajarshd_CBR-AKBC.code.cbr.CBR.__init__": [[27, 39], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "train_map", ",", "eval_map", ",", "entity_vocab", ",", "rev_entity_vocab", ",", "rel_vocab", ",", "rev_rel_vocab", ",", "eval_vocab", ",", "\n", "eval_rev_vocab", ",", "all_paths", ",", "rel_ent_map", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "eval_map", "=", "eval_map", "\n", "self", ".", "train_map", "=", "train_map", "\n", "self", ".", "all_zero_ctr", "=", "[", "]", "\n", "self", ".", "all_num_ret_nn", "=", "[", "]", "\n", "self", ".", "entity_vocab", ",", "self", ".", "rev_entity_vocab", ",", "self", ".", "rel_vocab", ",", "self", ".", "rev_rel_vocab", "=", "entity_vocab", ",", "rev_entity_vocab", ",", "rel_vocab", ",", "rev_rel_vocab", "\n", "self", ".", "eval_vocab", ",", "self", ".", "eval_rev_vocab", "=", "eval_vocab", ",", "eval_rev_vocab", "\n", "self", ".", "all_paths", "=", "all_paths", "\n", "self", ".", "rel_ent_map", "=", "rel_ent_map", "\n", "self", ".", "num_non_executable_programs", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_CBR-AKBC.code.cbr.CBR.set_nearest_neighbor_1_hop": [[40, 42], ["None"], "methods", ["None"], ["", "def", "set_nearest_neighbor_1_hop", "(", "self", ",", "nearest_neighbor_1_hop", ")", ":", "\n", "        ", "self", ".", "nearest_neighbor_1_hop", "=", "nearest_neighbor_1_hop", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_CBR-AKBC.code.cbr.CBR.calc_sim": [[43, 53], ["torch.index_select", "torch.matmul", "torch.t"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "calc_sim", "(", "adj_mat", ":", "Type", "[", "torch", ".", "Tensor", "]", ",", "query_entities", ":", "Type", "[", "torch", ".", "LongTensor", "]", ")", "->", "Type", "[", "torch", ".", "LongTensor", "]", ":", "\n", "        ", "\"\"\"\n        :param adj_mat: N X R\n        :param query_entities: b is a batch of indices of query entities\n        :return:\n        \"\"\"", "\n", "query_entities_vec", "=", "torch", ".", "index_select", "(", "adj_mat", ",", "dim", "=", "0", ",", "index", "=", "query_entities", ")", "\n", "sim", "=", "torch", ".", "matmul", "(", "query_entities_vec", ",", "torch", ".", "t", "(", "adj_mat", ")", ")", "\n", "return", "sim", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_CBR-AKBC.code.cbr.CBR.get_nearest_neighbor_inner_product": [[54, 73], ["cbr.CBR.nearest_neighbor_1_hop[].tolist", "len", "temp.append"], "methods", ["None"], ["", "def", "get_nearest_neighbor_inner_product", "(", "self", ",", "e1", ":", "str", ",", "r", ":", "str", ",", "k", ":", "Optional", "[", "int", "]", "=", "5", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "try", ":", "\n", "            ", "nearest_entities", "=", "[", "self", ".", "rev_entity_vocab", "[", "e", "]", "for", "e", "in", "\n", "self", ".", "nearest_neighbor_1_hop", "[", "self", ".", "eval_vocab", "[", "e1", "]", "]", ".", "tolist", "(", ")", "]", "\n", "# remove e1 from the set of k-nearest neighbors if it is there.", "\n", "nearest_entities", "=", "[", "nn", "for", "nn", "in", "nearest_entities", "if", "nn", "!=", "e1", "]", "\n", "# making sure, that the similar entities also have the query relation", "\n", "ctr", "=", "0", "\n", "temp", "=", "[", "]", "\n", "for", "nn", "in", "nearest_entities", ":", "\n", "                ", "if", "ctr", "==", "k", ":", "\n", "                    ", "break", "\n", "", "if", "len", "(", "self", ".", "train_map", "[", "nn", ",", "r", "]", ")", ">", "0", ":", "\n", "                    ", "temp", ".", "append", "(", "nn", ")", "\n", "ctr", "+=", "1", "\n", "", "", "nearest_entities", "=", "temp", "\n", "", "except", "KeyError", ":", "\n", "            ", "return", "None", "\n", "", "return", "nearest_entities", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_CBR-AKBC.code.cbr.CBR.get_programs": [[74, 85], ["enumerate", "all_programs.append"], "methods", ["None"], ["", "def", "get_programs", "(", "self", ",", "e", ":", "str", ",", "ans", ":", "str", ",", "all_paths_around_e", ":", "List", "[", "List", "[", "str", "]", "]", ")", ":", "\n", "        ", "\"\"\"\n        Given an entity and answer, get all paths? which end at that ans node in the subgraph surrounding e\n        \"\"\"", "\n", "all_programs", "=", "[", "]", "\n", "for", "path", "in", "all_paths_around_e", ":", "\n", "            ", "for", "l", ",", "(", "r", ",", "e_dash", ")", "in", "enumerate", "(", "path", ")", ":", "\n", "                ", "if", "e_dash", "==", "ans", ":", "\n", "# get the path till this point", "\n", "                    ", "all_programs", ".", "append", "(", "[", "x", "for", "(", "x", ",", "_", ")", "in", "path", "[", ":", "l", "+", "1", "]", "]", ")", "# we only need to keep the relations", "\n", "", "", "", "return", "all_programs", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_CBR-AKBC.code.cbr.CBR.get_programs_from_nearest_neighbors": [[86, 104], ["nn_func", "cbr.CBR.all_num_ret_nn.append", "cbr.CBR.all_zero_ctr.append", "cbr.CBR.all_num_ret_nn.append", "len", "len", "cbr.CBR.get_programs", "len"], "methods", ["home.repos.pwc.inspect_result.rajarshd_CBR-AKBC.code.cbr.CBR.get_programs"], ["", "def", "get_programs_from_nearest_neighbors", "(", "self", ",", "e1", ":", "str", ",", "r", ":", "str", ",", "nn_func", ":", "Callable", ",", "num_nn", ":", "Optional", "[", "int", "]", "=", "5", ")", ":", "\n", "        ", "all_programs", "=", "[", "]", "\n", "nearest_entities", "=", "nn_func", "(", "e1", ",", "r", ",", "k", "=", "num_nn", ")", "\n", "if", "nearest_entities", "is", "None", ":", "\n", "            ", "self", ".", "all_num_ret_nn", ".", "append", "(", "0", ")", "\n", "return", "None", "\n", "", "self", ".", "all_num_ret_nn", ".", "append", "(", "len", "(", "nearest_entities", ")", ")", "\n", "zero_ctr", "=", "0", "\n", "for", "e", "in", "nearest_entities", ":", "\n", "            ", "if", "len", "(", "self", ".", "train_map", "[", "(", "e", ",", "r", ")", "]", ")", ">", "0", ":", "\n", "                ", "paths_e", "=", "self", ".", "all_paths", "[", "e", "]", "# get the collected 3 hop paths around e", "\n", "nn_answers", "=", "self", ".", "train_map", "[", "(", "e", ",", "r", ")", "]", "\n", "for", "nn_ans", "in", "nn_answers", ":", "\n", "                    ", "all_programs", "+=", "self", ".", "get_programs", "(", "e", ",", "nn_ans", ",", "paths_e", ")", "\n", "", "", "elif", "len", "(", "self", ".", "train_map", "[", "(", "e", ",", "r", ")", "]", ")", "==", "0", ":", "\n", "                ", "zero_ctr", "+=", "1", "\n", "", "", "self", ".", "all_zero_ctr", ".", "append", "(", "zero_ctr", ")", "\n", "return", "all_programs", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_CBR-AKBC.code.cbr.CBR.rank_programs": [[105, 116], ["collections.defaultdict", "sorted", "collections.defaultdict.items", "tuple"], "methods", ["None"], ["", "def", "rank_programs", "(", "self", ",", "list_programs", ":", "List", "[", "str", "]", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "\"\"\"\n        Rank programs.\n        \"\"\"", "\n", "# Lets rank it simply by count:", "\n", "count_map", "=", "defaultdict", "(", "int", ")", "\n", "for", "p", "in", "list_programs", ":", "\n", "            ", "count_map", "[", "tuple", "(", "p", ")", "]", "+=", "1", "\n", "", "sorted_programs", "=", "sorted", "(", "count_map", ".", "items", "(", ")", ",", "key", "=", "lambda", "kv", ":", "-", "kv", "[", "1", "]", ")", "\n", "sorted_programs", "=", "[", "k", "for", "(", "k", ",", "v", ")", "in", "sorted_programs", "]", "\n", "return", "sorted_programs", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_CBR-AKBC.code.cbr.CBR.execute_one_program": [[117, 137], ["len", "len", "len", "numpy.random.choice().tolist", "cbr.CBR.execute_one_program", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.rajarshd_CBR-AKBC.code.cbr.CBR.execute_one_program"], ["", "def", "execute_one_program", "(", "self", ",", "e", ":", "str", ",", "path", ":", "List", "[", "str", "]", ",", "depth", ":", "int", ",", "max_branch", ":", "int", ")", ":", "\n", "        ", "\"\"\"\n        starts from an entity and executes the path by doing depth first search. If there are multiple edges with the same label, we consider\n        max_branch number.\n        \"\"\"", "\n", "if", "depth", "==", "len", "(", "path", ")", ":", "\n", "# reached end, return node", "\n", "            ", "return", "[", "e", "]", "\n", "", "next_rel", "=", "path", "[", "depth", "]", "\n", "next_entities", "=", "self", ".", "train_map", "[", "(", "e", ",", "path", "[", "depth", "]", ")", "]", "\n", "if", "len", "(", "next_entities", ")", "==", "0", ":", "\n", "# edge not present", "\n", "            ", "return", "[", "]", "\n", "", "if", "len", "(", "next_entities", ")", ">", "max_branch", ":", "\n", "# select max_branch random entities", "\n", "            ", "next_entities", "=", "np", ".", "random", ".", "choice", "(", "next_entities", ",", "max_branch", ",", "replace", "=", "False", ")", ".", "tolist", "(", ")", "\n", "", "answers", "=", "[", "]", "\n", "for", "e_next", "in", "next_entities", ":", "\n", "            ", "answers", "+=", "self", ".", "execute_one_program", "(", "e_next", ",", "path", ",", "depth", "+", "1", ",", "max_branch", ")", "\n", "", "return", "answers", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_CBR-AKBC.code.cbr.CBR.execute_programs": [[138, 157], ["cbr.CBR.num_non_executable_programs.append", "cbr.CBR.execute_one_program", "not_executed_paths.append"], "methods", ["home.repos.pwc.inspect_result.rajarshd_CBR-AKBC.code.cbr.CBR.execute_one_program"], ["", "def", "execute_programs", "(", "self", ",", "e", ":", "str", ",", "path_list", ":", "List", "[", "List", "[", "str", "]", "]", ",", "max_branch", ":", "Optional", "[", "int", "]", "=", "1000", ")", "->", "List", "[", "str", "]", ":", "\n", "\n", "        ", "all_answers", "=", "[", "]", "\n", "not_executed_paths", "=", "[", "]", "\n", "execution_fail_counter", "=", "0", "\n", "executed_path_counter", "=", "0", "\n", "for", "path", "in", "path_list", ":", "\n", "            ", "if", "executed_path_counter", "==", "self", ".", "args", ".", "max_num_programs", ":", "\n", "                ", "break", "\n", "", "ans", "=", "self", ".", "execute_one_program", "(", "e", ",", "path", ",", "depth", "=", "0", ",", "max_branch", "=", "max_branch", ")", "\n", "if", "ans", "==", "[", "]", ":", "\n", "                ", "not_executed_paths", ".", "append", "(", "path", ")", "\n", "execution_fail_counter", "+=", "1", "\n", "", "else", ":", "\n", "                ", "executed_path_counter", "+=", "1", "\n", "", "all_answers", "+=", "ans", "\n", "\n", "", "self", ".", "num_non_executable_programs", ".", "append", "(", "execution_fail_counter", ")", "\n", "return", "all_answers", ",", "not_executed_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_CBR-AKBC.code.cbr.CBR.rank_answers": [[158, 170], ["collections.defaultdict", "set", "sorted", "set.add", "collections.defaultdict.items"], "methods", ["None"], ["", "def", "rank_answers", "(", "self", ",", "list_answers", ":", "List", "[", "str", "]", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "\"\"\"\n        Different ways to re-rank answers\n        \"\"\"", "\n", "# 1. rank based on occurrence, i.e. how many paths did end up at this entity?", "\n", "count_map", "=", "defaultdict", "(", "int", ")", "\n", "uniq_entities", "=", "set", "(", ")", "\n", "for", "e", "in", "list_answers", ":", "\n", "            ", "count_map", "[", "e", "]", "+=", "1", "\n", "uniq_entities", ".", "add", "(", "e", ")", "\n", "", "sorted_entities_by_val", "=", "sorted", "(", "count_map", ".", "items", "(", ")", ",", "key", "=", "lambda", "kv", ":", "-", "kv", "[", "1", "]", ")", "\n", "return", "sorted_entities_by_val", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_CBR-AKBC.code.cbr.CBR.get_rank_in_list": [[171, 178], ["enumerate"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_rank_in_list", "(", "e", ",", "predicted_answers", ")", ":", "\n", "        ", "rank", "=", "0", "\n", "for", "i", ",", "e_to_check", "in", "enumerate", "(", "predicted_answers", ")", ":", "\n", "            ", "if", "e", "==", "e_to_check", ":", "\n", "                ", "return", "i", "+", "1", "\n", "", "", "return", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_CBR-AKBC.code.cbr.CBR.get_hits": [[179, 208], ["cbr.CBR.get_rank_in_list", "filtered_answers.append"], "methods", ["home.repos.pwc.inspect_result.rajarshd_CBR-AKBC.code.cbr.CBR.get_rank_in_list"], ["", "def", "get_hits", "(", "self", ",", "list_answers", ":", "List", "[", "str", "]", ",", "gold_answers", ":", "List", "[", "str", "]", ",", "query", ":", "Tuple", "[", "str", ",", "str", "]", ")", "->", "Tuple", "[", "float", ",", "float", ",", "float", ",", "float", "]", ":", "\n", "        ", "hits_1", "=", "0.0", "\n", "hits_3", "=", "0.0", "\n", "hits_5", "=", "0.0", "\n", "hits_10", "=", "0.0", "\n", "rr", "=", "0.0", "\n", "(", "e1", ",", "r", ")", "=", "query", "\n", "all_gold_answers", "=", "self", ".", "args", ".", "all_kg_map", "[", "(", "e1", ",", "r", ")", "]", "\n", "for", "gold_answer", "in", "gold_answers", ":", "\n", "# remove all other gold answers from prediction", "\n", "            ", "filtered_answers", "=", "[", "]", "\n", "for", "pred", "in", "list_answers", ":", "\n", "                ", "if", "pred", "in", "all_gold_answers", "and", "pred", "!=", "gold_answer", ":", "\n", "                    ", "continue", "\n", "", "else", ":", "\n", "                    ", "filtered_answers", ".", "append", "(", "pred", ")", "\n", "\n", "", "", "rank", "=", "CBR", ".", "get_rank_in_list", "(", "gold_answer", ",", "filtered_answers", ")", "\n", "if", "rank", ">", "0", ":", "\n", "                ", "if", "rank", "<=", "10", ":", "\n", "                    ", "hits_10", "+=", "1", "\n", "if", "rank", "<=", "5", ":", "\n", "                        ", "hits_5", "+=", "1", "\n", "if", "rank", "<=", "3", ":", "\n", "                            ", "hits_3", "+=", "1", "\n", "if", "rank", "<=", "1", ":", "\n", "                                ", "hits_1", "+=", "1", "\n", "", "", "", "", "rr", "+=", "1.0", "/", "rank", "\n", "", "", "return", "hits_10", ",", "hits_5", ",", "hits_3", ",", "hits_1", ",", "rr", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_CBR-AKBC.code.cbr.CBR.get_accuracy": [[209, 218], ["all_acc.append", "all_acc.append"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_accuracy", "(", "gold_answers", ":", "List", "[", "str", "]", ",", "list_answers", ":", "List", "[", "str", "]", ")", "->", "List", "[", "float", "]", ":", "\n", "        ", "all_acc", "=", "[", "]", "\n", "for", "gold_ans", "in", "gold_answers", ":", "\n", "            ", "if", "gold_ans", "in", "list_answers", ":", "\n", "                ", "all_acc", ".", "append", "(", "1.0", ")", "\n", "", "else", ":", "\n", "                ", "all_acc", ".", "append", "(", "0.0", ")", "\n", "", "", "return", "all_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_CBR-AKBC.code.cbr.CBR.do_symbolic_case_based_reasoning": [[219, 351], ["collections.defaultdict", "enumerate", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "tqdm.tqdm.tqdm", "code.data.data_utils.get_inv_relation", "len", "cbr.CBR.get_programs_from_nearest_neighbors", "cbr.CBR.rank_programs", "num_programs.append", "cbr.CBR.execute_programs", "cbr.CBR.rank_answers", "num_answers.append", "per_relation_scores.items", "os.path.join", "open", "logger.info", "open.write", "open.close", "collections.defaultdict.items", "wandb.log", "collections.defaultdict", "cbr.CBR.eval_map.items", "temp_train_e2_list.append", "all_acc.append", "temp.append", "len", "len", "len", "len", "cbr.CBR.get_accuracy", "cbr.CBR.get_hits", "len", "json.dumps", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "logger.info", "logger.info", "learnt_programs[].items", "logger.info", "len", "len", "len", "logger.info", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "temp_list.append", "len"], "methods", ["home.repos.pwc.inspect_result.rajarshd_CBR-AKBC.data.data_utils.get_inv_relation", "home.repos.pwc.inspect_result.rajarshd_CBR-AKBC.code.cbr.CBR.get_programs_from_nearest_neighbors", "home.repos.pwc.inspect_result.rajarshd_CBR-AKBC.code.cbr.CBR.rank_programs", "home.repos.pwc.inspect_result.rajarshd_CBR-AKBC.code.cbr.CBR.execute_programs", "home.repos.pwc.inspect_result.rajarshd_CBR-AKBC.code.cbr.CBR.rank_answers", "home.repos.pwc.inspect_result.rajarshd_CBR-AKBC.code.cbr.CBR.get_accuracy", "home.repos.pwc.inspect_result.rajarshd_CBR-AKBC.code.cbr.CBR.get_hits"], ["", "def", "do_symbolic_case_based_reasoning", "(", "self", ")", ":", "\n", "        ", "num_programs", "=", "[", "]", "\n", "num_answers", "=", "[", "]", "\n", "all_acc", "=", "[", "]", "\n", "non_zero_ctr", "=", "0", "\n", "hits_10", ",", "hits_5", ",", "hits_3", ",", "hits_1", ",", "mrr", "=", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", "\n", "per_relation_scores", "=", "{", "}", "# map of performance per relation", "\n", "per_relation_query_count", "=", "{", "}", "\n", "total_examples", "=", "0", "\n", "learnt_programs", "=", "defaultdict", "(", "lambda", ":", "defaultdict", "(", "int", ")", ")", "# for each query relation, a map of programs to count", "\n", "for", "_", ",", "(", "(", "e1", ",", "r", ")", ",", "e2_list", ")", "in", "enumerate", "(", "tqdm", "(", "(", "self", ".", "eval_map", ".", "items", "(", ")", ")", ")", ")", ":", "\n", "# if e2_list is in train list then remove them", "\n", "# Normally, this shouldnt happen at all, but this happens for Nell-995.", "\n", "            ", "orig_train_e2_list", "=", "self", ".", "train_map", "[", "(", "e1", ",", "r", ")", "]", "\n", "temp_train_e2_list", "=", "[", "]", "\n", "for", "e2", "in", "orig_train_e2_list", ":", "\n", "                ", "if", "e2", "in", "e2_list", ":", "\n", "                    ", "continue", "\n", "", "temp_train_e2_list", ".", "append", "(", "e2", ")", "\n", "", "self", ".", "train_map", "[", "(", "e1", ",", "r", ")", "]", "=", "temp_train_e2_list", "\n", "# also remove (e2, r^-1, e1)", "\n", "r_inv", "=", "get_inv_relation", "(", "r", ",", "args", ".", "dataset_name", ")", "\n", "temp_map", "=", "{", "}", "# map from (e2, r_inv) -> outgoing nodes", "\n", "for", "e2", "in", "e2_list", ":", "\n", "                ", "temp_map", "[", "(", "e2", ",", "r_inv", ")", "]", "=", "self", ".", "train_map", "[", "e2", ",", "r_inv", "]", "\n", "temp_list", "=", "[", "]", "\n", "for", "e1_dash", "in", "self", ".", "train_map", "[", "e2", ",", "r_inv", "]", ":", "\n", "                    ", "if", "e1_dash", "==", "e1", ":", "\n", "                        ", "continue", "\n", "", "else", ":", "\n", "                        ", "temp_list", ".", "append", "(", "e1_dash", ")", "\n", "", "", "self", ".", "train_map", "[", "e2", ",", "r_inv", "]", "=", "temp_list", "\n", "\n", "", "total_examples", "+=", "len", "(", "e2_list", ")", "\n", "all_programs", "=", "self", ".", "get_programs_from_nearest_neighbors", "(", "e1", ",", "r", ",", "self", ".", "get_nearest_neighbor_inner_product", ",", "\n", "num_nn", "=", "self", ".", "args", ".", "k_adj", ")", "\n", "\n", "if", "all_programs", "is", "None", "or", "len", "(", "all_programs", ")", "==", "0", ":", "\n", "                ", "all_acc", ".", "append", "(", "0.0", ")", "\n", "continue", "\n", "\n", "# filter the program if it is equal to the query relation", "\n", "", "temp", "=", "[", "]", "\n", "for", "p", "in", "all_programs", ":", "\n", "                ", "if", "len", "(", "p", ")", "==", "1", "and", "p", "[", "0", "]", "==", "r", ":", "\n", "                    ", "continue", "\n", "", "temp", ".", "append", "(", "p", ")", "\n", "", "all_programs", "=", "temp", "\n", "\n", "if", "len", "(", "all_programs", ")", ">", "0", ":", "\n", "                ", "non_zero_ctr", "+=", "len", "(", "e2_list", ")", "\n", "\n", "", "all_uniq_programs", "=", "self", ".", "rank_programs", "(", "all_programs", ")", "\n", "\n", "for", "u_p", "in", "all_uniq_programs", ":", "\n", "                ", "learnt_programs", "[", "r", "]", "[", "u_p", "]", "+=", "1", "\n", "\n", "", "num_programs", ".", "append", "(", "len", "(", "all_uniq_programs", ")", ")", "\n", "# Now execute the program", "\n", "answers", ",", "not_executed_programs", "=", "self", ".", "execute_programs", "(", "e1", ",", "all_uniq_programs", ")", "\n", "\n", "answers", "=", "self", ".", "rank_answers", "(", "answers", ")", "\n", "if", "len", "(", "answers", ")", ">", "0", ":", "\n", "                ", "acc", "=", "self", ".", "get_accuracy", "(", "e2_list", ",", "[", "k", "[", "0", "]", "for", "k", "in", "answers", "]", ")", "\n", "_10", ",", "_5", ",", "_3", ",", "_1", ",", "rr", "=", "self", ".", "get_hits", "(", "[", "k", "[", "0", "]", "for", "k", "in", "answers", "]", ",", "e2_list", ",", "query", "=", "(", "e1", ",", "r", ")", ")", "\n", "hits_10", "+=", "_10", "\n", "hits_5", "+=", "_5", "\n", "hits_3", "+=", "_3", "\n", "hits_1", "+=", "_1", "\n", "mrr", "+=", "rr", "\n", "if", "args", ".", "output_per_relation_scores", ":", "\n", "                    ", "if", "r", "not", "in", "per_relation_scores", ":", "\n", "                        ", "per_relation_scores", "[", "r", "]", "=", "{", "\"hits_1\"", ":", "0", ",", "\"hits_3\"", ":", "0", ",", "\"hits_5\"", ":", "0", ",", "\"hits_10\"", ":", "0", ",", "\"mrr\"", ":", "0", "}", "\n", "per_relation_query_count", "[", "r", "]", "=", "0", "\n", "", "per_relation_scores", "[", "r", "]", "[", "\"hits_1\"", "]", "+=", "_1", "\n", "per_relation_scores", "[", "r", "]", "[", "\"hits_3\"", "]", "+=", "_3", "\n", "per_relation_scores", "[", "r", "]", "[", "\"hits_5\"", "]", "+=", "_5", "\n", "per_relation_scores", "[", "r", "]", "[", "\"hits_10\"", "]", "+=", "_10", "\n", "per_relation_scores", "[", "r", "]", "[", "\"mrr\"", "]", "+=", "rr", "\n", "per_relation_query_count", "[", "r", "]", "+=", "len", "(", "e2_list", ")", "\n", "", "", "else", ":", "\n", "                ", "acc", "=", "[", "0.0", "]", "*", "len", "(", "e2_list", ")", "\n", "", "all_acc", "+=", "acc", "\n", "num_answers", ".", "append", "(", "len", "(", "answers", ")", ")", "\n", "# put it back", "\n", "self", ".", "train_map", "[", "(", "e1", ",", "r", ")", "]", "=", "orig_train_e2_list", "\n", "for", "e2", "in", "e2_list", ":", "\n", "                ", "self", ".", "train_map", "[", "(", "e2", ",", "r_inv", ")", "]", "=", "temp_map", "[", "(", "e2", ",", "r_inv", ")", "]", "\n", "\n", "", "", "if", "args", ".", "output_per_relation_scores", ":", "\n", "            ", "for", "r", ",", "r_scores", "in", "per_relation_scores", ".", "items", "(", ")", ":", "\n", "                ", "r_scores", "[", "\"hits_1\"", "]", "/=", "per_relation_query_count", "[", "r", "]", "\n", "r_scores", "[", "\"hits_3\"", "]", "/=", "per_relation_query_count", "[", "r", "]", "\n", "r_scores", "[", "\"hits_5\"", "]", "/=", "per_relation_query_count", "[", "r", "]", "\n", "r_scores", "[", "\"hits_10\"", "]", "/=", "per_relation_query_count", "[", "r", "]", "\n", "r_scores", "[", "\"mrr\"", "]", "/=", "per_relation_query_count", "[", "r", "]", "\n", "", "out_file_name", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\"per_relation_scores.json\"", ")", "\n", "fout", "=", "open", "(", "out_file_name", ",", "\"w\"", ")", "\n", "logger", ".", "info", "(", "\"Writing per-relation scores to {}\"", ".", "format", "(", "out_file_name", ")", ")", "\n", "fout", ".", "write", "(", "json", ".", "dumps", "(", "per_relation_scores", ",", "sort_keys", "=", "True", ",", "indent", "=", "4", ")", ")", "\n", "fout", ".", "close", "(", ")", "\n", "\n", "", "logger", ".", "info", "(", "\n", "\"Out of {} queries, atleast one program was returned for {} queries\"", ".", "format", "(", "total_examples", ",", "non_zero_ctr", ")", ")", "\n", "logger", ".", "info", "(", "\"Avg number of programs {:3.2f}\"", ".", "format", "(", "np", ".", "mean", "(", "num_programs", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"Avg number of answers after executing the programs: {}\"", ".", "format", "(", "np", ".", "mean", "(", "num_answers", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"Accuracy (Loose): {}\"", ".", "format", "(", "np", ".", "mean", "(", "all_acc", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"Hits@1 {}\"", ".", "format", "(", "hits_1", "/", "total_examples", ")", ")", "\n", "logger", ".", "info", "(", "\"Hits@3 {}\"", ".", "format", "(", "hits_3", "/", "total_examples", ")", ")", "\n", "logger", ".", "info", "(", "\"Hits@5 {}\"", ".", "format", "(", "hits_5", "/", "total_examples", ")", ")", "\n", "logger", ".", "info", "(", "\"Hits@10 {}\"", ".", "format", "(", "hits_10", "/", "total_examples", ")", ")", "\n", "logger", ".", "info", "(", "\"MRR {}\"", ".", "format", "(", "mrr", "/", "total_examples", ")", ")", "\n", "logger", ".", "info", "(", "\"Avg number of nn, that do not have the query relation: {}\"", ".", "format", "(", "\n", "np", ".", "mean", "(", "self", ".", "all_zero_ctr", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"Avg num of returned nearest neighbors: {:2.4f}\"", ".", "format", "(", "np", ".", "mean", "(", "self", ".", "all_num_ret_nn", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"Avg number of programs that do not execute per query: {:2.4f}\"", ".", "format", "(", "\n", "np", ".", "mean", "(", "self", ".", "num_non_executable_programs", ")", ")", ")", "\n", "if", "self", ".", "args", ".", "print_paths", ":", "\n", "            ", "for", "k", ",", "v", "in", "learnt_programs", ".", "items", "(", ")", ":", "\n", "                ", "logger", ".", "info", "(", "\"query: {}\"", ".", "format", "(", "k", ")", ")", "\n", "logger", ".", "info", "(", "\"=====\"", "*", "2", ")", "\n", "for", "rel", ",", "_", "in", "learnt_programs", "[", "k", "]", ".", "items", "(", ")", ":", "\n", "                    ", "logger", ".", "info", "(", "(", "rel", ",", "learnt_programs", "[", "k", "]", "[", "rel", "]", ")", ")", "\n", "", "logger", ".", "info", "(", "\"=====\"", "*", "2", ")", "\n", "", "", "if", "self", ".", "args", ".", "use_wandb", ":", "\n", "# Log all metrics", "\n", "            ", "wandb", ".", "log", "(", "{", "'hits_1'", ":", "hits_1", "/", "total_examples", ",", "'hits_3'", ":", "hits_3", "/", "total_examples", ",", "\n", "'hits_5'", ":", "hits_5", "/", "total_examples", ",", "'hits_10'", ":", "hits_10", "/", "total_examples", ",", "\n", "'mrr'", ":", "mrr", "/", "total_examples", ",", "'total_examples'", ":", "total_examples", ",", "'non_zero_ctr'", ":", "non_zero_ctr", ",", "\n", "'all_zero_ctr'", ":", "self", ".", "all_zero_ctr", ",", "'avg_num_nn'", ":", "np", ".", "mean", "(", "self", ".", "all_num_ret_nn", ")", ",", "\n", "'avg_num_prog'", ":", "np", ".", "mean", "(", "num_programs", ")", ",", "'avg_num_ans'", ":", "np", ".", "mean", "(", "num_answers", ")", ",", "\n", "'avg_num_failed_prog'", ":", "np", ".", "mean", "(", "self", ".", "num_non_executable_programs", ")", ",", "'acc_loose'", ":", "np", ".", "mean", "(", "all_acc", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_CBR-AKBC.code.cbr.main": [[353, 438], ["logger.info", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "logger.info", "code.data.data_utils.create_vocab", "logger.info", "code.data.data_utils.load_data", "logger.info", "code.data.data_utils.load_data", "logger.info", "code.data.data_utils.load_data", "code.data.data_utils.get_entities_group_by_relation", "code.data.data_utils.read_graph", "numpy.sqrt", "numpy.linalg.norm", "torch.from_numpy", "torch.device", "print", "logger.info", "adj_mat.to.to", "code.data.data_utils.get_unique_entities", "logger.info", "logger.info", "logger.info", "code.data.data_utils.load_data_all_triples", "cbr.CBR", "torch.LongTensor().to", "cbr.CBR.calc_sim", "numpy.argsort", "cbr.CBR.set_nearest_neighbor_1_hop", "logger.info", "cbr.CBR.do_symbolic_case_based_reasoning", "os.path.join", "os.path.join", "os.path.join", "open", "pickle.load", "numpy.finfo", "numpy.finfo", "np.linalg.norm.reshape", "json.dumps", "os.path.join", "torch.cuda.is_available", "torch.device.__str__", "torch.LongTensor().to.append", "vars", "torch.LongTensor", "symbolically_smart_agent.calc_sim.cpu"], "function", ["home.repos.pwc.inspect_result.rajarshd_CBR-AKBC.data.data_utils.create_vocab", "home.repos.pwc.inspect_result.rajarshd_CBR-AKBC.data.data_utils.load_data", "home.repos.pwc.inspect_result.rajarshd_CBR-AKBC.data.data_utils.load_data", "home.repos.pwc.inspect_result.rajarshd_CBR-AKBC.data.data_utils.load_data", "home.repos.pwc.inspect_result.rajarshd_CBR-AKBC.data.data_utils.get_entities_group_by_relation", "home.repos.pwc.inspect_result.rajarshd_CBR-AKBC.data.data_utils.read_graph", "home.repos.pwc.inspect_result.rajarshd_CBR-AKBC.data.data_utils.get_unique_entities", "home.repos.pwc.inspect_result.rajarshd_CBR-AKBC.data.data_utils.load_data_all_triples", "home.repos.pwc.inspect_result.rajarshd_CBR-AKBC.code.cbr.CBR.calc_sim", "home.repos.pwc.inspect_result.rajarshd_CBR-AKBC.code.cbr.CBR.set_nearest_neighbor_1_hop", "home.repos.pwc.inspect_result.rajarshd_CBR-AKBC.code.cbr.CBR.do_symbolic_case_based_reasoning"], ["", "", "", "def", "main", "(", "args", ")", ":", "\n", "    ", "dataset_name", "=", "args", ".", "dataset_name", "\n", "logger", ".", "info", "(", "\"==========={}============\"", ".", "format", "(", "dataset_name", ")", ")", "\n", "data_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "\"data\"", ",", "dataset_name", ")", "\n", "subgraph_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "\"subgraphs\"", ",", "dataset_name", ")", "\n", "kg_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"graph.txt\"", ")", "\n", "\n", "args", ".", "dev_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"dev.txt\"", ")", "\n", "args", ".", "test_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"test.txt\"", ")", "if", "not", "args", ".", "test_file_name", "else", "os", ".", "path", ".", "join", "(", "data_dir", ",", "args", ".", "test_file_name", ")", "\n", "if", "args", ".", "dataset_name", "==", "\"FB122\"", ":", "\n", "        ", "args", ".", "test_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"testI.txt\"", ")", "\n", "\n", "", "args", ".", "train_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"train.txt\"", ")", "\n", "\n", "logger", ".", "info", "(", "\"Loading subgraph around entities:\"", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "subgraph_dir", ",", "args", ".", "subgraph_file_name", ")", ",", "\"rb\"", ")", "as", "fin", ":", "\n", "        ", "all_paths", "=", "pickle", ".", "load", "(", "fin", ")", "\n", "\n", "", "entity_vocab", ",", "rev_entity_vocab", ",", "rel_vocab", ",", "rev_rel_vocab", "=", "create_vocab", "(", "kg_file", ")", "\n", "logger", ".", "info", "(", "\"Loading train map\"", ")", "\n", "train_map", "=", "load_data", "(", "kg_file", ")", "\n", "logger", ".", "info", "(", "\"Loading dev map\"", ")", "\n", "dev_map", "=", "load_data", "(", "args", ".", "dev_file", ")", "\n", "logger", ".", "info", "(", "\"Loading test map\"", ")", "\n", "test_map", "=", "load_data", "(", "args", ".", "test_file", ")", "\n", "eval_map", "=", "dev_map", "\n", "eval_file", "=", "args", ".", "dev_file", "\n", "if", "args", ".", "test", ":", "\n", "        ", "eval_map", "=", "test_map", "\n", "eval_file", "=", "args", ".", "test_file", "\n", "\n", "", "rel_ent_map", "=", "get_entities_group_by_relation", "(", "args", ".", "train_file", ")", "\n", "# Calculate nearest neighbors", "\n", "adj_mat", "=", "read_graph", "(", "kg_file", ",", "entity_vocab", ",", "rel_vocab", ")", "\n", "adj_mat", "=", "np", ".", "sqrt", "(", "adj_mat", ")", "\n", "l2norm", "=", "np", ".", "linalg", ".", "norm", "(", "adj_mat", ",", "axis", "=", "-", "1", ")", "\n", "l2norm", "[", "0", "]", "+=", "np", ".", "finfo", "(", "np", ".", "float", ")", ".", "eps", "# to encounter zero values. These 2 indx are PAD / NULL", "\n", "l2norm", "[", "1", "]", "+=", "np", ".", "finfo", "(", "np", ".", "float", ")", ".", "eps", "\n", "adj_mat", "=", "adj_mat", "/", "l2norm", ".", "reshape", "(", "l2norm", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "\n", "# Lets put this to GPU", "\n", "adj_mat", "=", "torch", ".", "from_numpy", "(", "adj_mat", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "print", "(", "device", ")", "\n", "logger", ".", "info", "(", "'Using device:'", ".", "format", "(", "device", ".", "__str__", "(", ")", ")", ")", "\n", "adj_mat", "=", "adj_mat", ".", "to", "(", "device", ")", "\n", "\n", "# get the unique entities in eval set, so that we can calculate similarity in advance.", "\n", "eval_entities", "=", "get_unique_entities", "(", "eval_file", ")", "\n", "eval_vocab", ",", "eval_rev_vocab", "=", "{", "}", ",", "{", "}", "\n", "query_ind", "=", "[", "]", "\n", "\n", "e_ctr", "=", "0", "\n", "for", "e", "in", "eval_entities", ":", "\n", "        ", "try", ":", "\n", "            ", "query_ind", ".", "append", "(", "entity_vocab", "[", "e", "]", ")", "\n", "", "except", "KeyError", ":", "\n", "            ", "continue", "\n", "", "eval_vocab", "[", "e", "]", "=", "e_ctr", "\n", "eval_rev_vocab", "[", "e_ctr", "]", "=", "e", "\n", "e_ctr", "+=", "1", "\n", "\n", "", "logger", ".", "info", "(", "\"=========Config:============\"", ")", "\n", "logger", ".", "info", "(", "json", ".", "dumps", "(", "vars", "(", "args", ")", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", ")", "\n", "\n", "logger", ".", "info", "(", "\"Loading combined train/dev/test map for filtered eval\"", ")", "\n", "all_kg_map", "=", "load_data_all_triples", "(", "args", ".", "train_file", ",", "args", ".", "dev_file", ",", "args", ".", "test_file", ")", "\n", "args", ".", "all_kg_map", "=", "all_kg_map", "\n", "\n", "symbolically_smart_agent", "=", "CBR", "(", "args", ",", "train_map", ",", "eval_map", ",", "entity_vocab", ",", "rev_entity_vocab", ",", "rel_vocab", ",", "\n", "rev_rel_vocab", ",", "eval_vocab", ",", "eval_rev_vocab", ",", "all_paths", ",", "rel_ent_map", ")", "\n", "\n", "query_ind", "=", "torch", ".", "LongTensor", "(", "query_ind", ")", ".", "to", "(", "device", ")", "\n", "# Calculate similarity", "\n", "sim", "=", "symbolically_smart_agent", ".", "calc_sim", "(", "adj_mat", ",", "\n", "query_ind", ")", "# n X N (n== size of dev_entities, N: size of all entities)", "\n", "\n", "nearest_neighbor_1_hop", "=", "np", ".", "argsort", "(", "-", "sim", ".", "cpu", "(", ")", ",", "axis", "=", "-", "1", ")", "\n", "symbolically_smart_agent", ".", "set_nearest_neighbor_1_hop", "(", "nearest_neighbor_1_hop", ")", "\n", "\n", "logger", ".", "info", "(", "\"Loaded...\"", ")", "\n", "\n", "symbolically_smart_agent", ".", "do_symbolic_case_based_reasoning", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_CBR-AKBC.data.data_utils.augment_kb_with_inv_edges": [[9, 30], ["tempfile.NamedTemporaryFile", "open", "open.close", "open", "tempfile.NamedTemporaryFile.close", "open.close", "tempfile.NamedTemporaryFile.write", "line.strip().split", "temp_list.append", "temp_list.append", "open.write", "line.strip", "line.strip"], "function", ["None"], ["def", "augment_kb_with_inv_edges", "(", "file_name", ":", "str", ")", "->", "None", ":", "\n", "# Create temporary file read/write", "\n", "    ", "t", "=", "tempfile", ".", "NamedTemporaryFile", "(", "mode", "=", "\"r+\"", ")", "\n", "# Open input file read-only", "\n", "i", "=", "open", "(", "file_name", ",", "'r'", ")", "\n", "\n", "# Copy input file to temporary file, modifying as we go", "\n", "temp_list", "=", "[", "]", "\n", "for", "line", "in", "i", ":", "\n", "        ", "t", ".", "write", "(", "line", ".", "strip", "(", ")", "+", "\"\\n\"", ")", "\n", "e1", ",", "r", ",", "e2", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "temp_list", ".", "append", "(", "(", "e1", ",", "r", ",", "e2", ")", ")", "\n", "temp_list", ".", "append", "(", "(", "e2", ",", "\"_\"", "+", "r", ",", "e1", ")", ")", "\n", "\n", "", "i", ".", "close", "(", ")", "# Close input file", "\n", "o", "=", "open", "(", "file_name", ",", "\"w\"", ")", "# Reopen input file writable", "\n", "# Overwriting original file with temporary file contents", "\n", "for", "(", "e1", ",", "r", ",", "e2", ")", "in", "temp_list", ":", "\n", "        ", "o", ".", "write", "(", "\"{}\\t{}\\t{}\\n\"", ".", "format", "(", "e1", ",", "r", ",", "e2", ")", ")", "\n", "", "t", ".", "close", "(", ")", "# Close temporary file, will cause it to be deleted", "\n", "o", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_CBR-AKBC.data.data_utils.create_adj_list": [[32, 40], ["collections.defaultdict", "open", "tqdm.tqdm", "enumerate", "line.strip.strip", "line.strip.split", "out_map[].append"], "function", ["None"], ["", "def", "create_adj_list", "(", "file_name", ":", "str", ")", "->", "DefaultDict", "[", "str", ",", "Tuple", "[", "str", ",", "str", "]", "]", ":", "\n", "    ", "out_map", "=", "defaultdict", "(", "list", ")", "\n", "fin", "=", "open", "(", "file_name", ")", "\n", "for", "line_ctr", ",", "line", "in", "tqdm", "(", "enumerate", "(", "fin", ")", ")", ":", "\n", "        ", "line", "=", "line", ".", "strip", "(", ")", "\n", "e1", ",", "r", ",", "e2", "=", "line", ".", "split", "(", "\"\\t\"", ")", "\n", "out_map", "[", "e1", "]", ".", "append", "(", "(", "r", ",", "e2", ")", ")", "\n", "", "return", "out_map", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_CBR-AKBC.data.data_utils.load_data": [[42, 52], ["collections.defaultdict", "open", "tqdm.tqdm", "line.strip.strip", "line.strip.split", "out_map[].append"], "function", ["None"], ["", "def", "load_data", "(", "file_name", ":", "str", ")", "->", "DefaultDict", "[", "Tuple", "[", "str", ",", "str", "]", ",", "list", "]", ":", "\n", "    ", "out_map", "=", "defaultdict", "(", "list", ")", "\n", "fin", "=", "open", "(", "file_name", ")", "\n", "\n", "for", "line", "in", "tqdm", "(", "fin", ")", ":", "\n", "        ", "line", "=", "line", ".", "strip", "(", ")", "\n", "e1", ",", "r", ",", "e2", "=", "line", ".", "split", "(", "\"\\t\"", ")", "\n", "out_map", "[", "(", "e1", ",", "r", ")", "]", ".", "append", "(", "e2", ")", "\n", "\n", "", "return", "out_map", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_CBR-AKBC.data.data_utils.load_data_all_triples": [[53, 69], ["collections.defaultdict", "open", "tqdm.tqdm", "line.strip.strip", "line.strip.split", "out_map[].append"], "function", ["None"], ["", "def", "load_data_all_triples", "(", "train_file", ":", "str", ",", "dev_file", ":", "str", ",", "test_file", ":", "str", ")", "->", "DefaultDict", "[", "Tuple", "[", "str", ",", "str", "]", ",", "list", "]", ":", "\n", "    ", "\"\"\"\n    Returns a map of all triples in the knowledge graph. Use this map only for filtering in evaluation.\n    :param train_file:\n    :param dev_file:\n    :param test_file:\n    :return:\n    \"\"\"", "\n", "out_map", "=", "defaultdict", "(", "list", ")", "\n", "for", "file_name", "in", "[", "train_file", ",", "dev_file", ",", "test_file", "]", ":", "\n", "        ", "fin", "=", "open", "(", "file_name", ")", "\n", "for", "line", "in", "tqdm", "(", "fin", ")", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", "\n", "e1", ",", "r", ",", "e2", "=", "line", ".", "split", "(", "\"\\t\"", ")", "\n", "out_map", "[", "(", "e1", ",", "r", ")", "]", ".", "append", "(", "e2", ")", "\n", "", "", "return", "out_map", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_CBR-AKBC.data.data_utils.create_vocab": [[72, 93], ["open", "tqdm.tqdm", "line.strip.strip", "line.strip.split"], "function", ["None"], ["", "def", "create_vocab", "(", "kg_file", ":", "str", ")", "->", "Tuple", "[", "Dict", "[", "str", ",", "int", "]", ",", "Dict", "[", "int", ",", "str", "]", ",", "Dict", "[", "str", ",", "int", "]", ",", "Dict", "[", "int", ",", "str", "]", "]", ":", "\n", "    ", "entity_vocab", ",", "rev_entity_vocab", "=", "{", "}", ",", "{", "}", "\n", "rel_vocab", ",", "rev_rel_vocab", "=", "{", "}", ",", "{", "}", "\n", "fin", "=", "open", "(", "kg_file", ")", "\n", "entity_ctr", ",", "rel_ctr", "=", "0", ",", "0", "\n", "for", "line", "in", "tqdm", "(", "fin", ")", ":", "\n", "        ", "line", "=", "line", ".", "strip", "(", ")", "\n", "e1", ",", "r", ",", "e2", "=", "line", ".", "split", "(", "\"\\t\"", ")", "\n", "if", "e1", "not", "in", "entity_vocab", ":", "\n", "            ", "entity_vocab", "[", "e1", "]", "=", "entity_ctr", "\n", "rev_entity_vocab", "[", "entity_ctr", "]", "=", "e1", "\n", "entity_ctr", "+=", "1", "\n", "", "if", "e2", "not", "in", "entity_vocab", ":", "\n", "            ", "entity_vocab", "[", "e2", "]", "=", "entity_ctr", "\n", "rev_entity_vocab", "[", "entity_ctr", "]", "=", "e2", "\n", "entity_ctr", "+=", "1", "\n", "", "if", "r", "not", "in", "rel_vocab", ":", "\n", "            ", "rel_vocab", "[", "r", "]", "=", "rel_ctr", "\n", "rev_rel_vocab", "[", "rel_ctr", "]", "=", "r", "\n", "rel_ctr", "+=", "1", "\n", "", "", "return", "entity_vocab", ",", "rev_entity_vocab", ",", "rel_vocab", ",", "rev_rel_vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_CBR-AKBC.data.data_utils.read_graph": [[95, 104], ["numpy.zeros", "open", "tqdm.tqdm", "line.strip.strip", "line.strip.split", "len", "len"], "function", ["None"], ["", "def", "read_graph", "(", "file_name", ":", "str", ",", "entity_vocab", ":", "Dict", "[", "str", ",", "int", "]", ",", "rel_vocab", ":", "Dict", "[", "str", ",", "int", "]", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "adj_mat", "=", "np", ".", "zeros", "(", "(", "len", "(", "entity_vocab", ")", ",", "len", "(", "rel_vocab", ")", ")", ")", "\n", "fin", "=", "open", "(", "file_name", ")", "\n", "for", "line", "in", "tqdm", "(", "fin", ")", ":", "\n", "        ", "line", "=", "line", ".", "strip", "(", ")", "\n", "e1", ",", "r", ",", "_", "=", "line", ".", "split", "(", "\"\\t\"", ")", "\n", "adj_mat", "[", "entity_vocab", "[", "e1", "]", ",", "rel_vocab", "[", "r", "]", "]", "=", "1", "\n", "\n", "", "return", "adj_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_CBR-AKBC.data.data_utils.load_mid2str": [[107, 119], ["collections.defaultdict", "open", "tqdm.tqdm", "line.strip.strip", "line.strip.split"], "function", ["None"], ["", "def", "load_mid2str", "(", "mid2str_file", ":", "str", ")", "->", "DefaultDict", "[", "str", ",", "str", "]", ":", "\n", "    ", "mid2str", "=", "defaultdict", "(", "str", ")", "\n", "with", "open", "(", "mid2str_file", ")", "as", "fin", ":", "\n", "        ", "for", "line", "in", "tqdm", "(", "fin", ")", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", "\n", "try", ":", "\n", "                ", "mid", ",", "ent_name", "=", "line", ".", "split", "(", "\"\\t\"", ")", "\n", "", "except", "ValueError", ":", "\n", "                ", "continue", "\n", "", "if", "mid", "not", "in", "mid2str", ":", "\n", "                ", "mid2str", "[", "mid", "]", "=", "ent_name", "\n", "", "", "", "return", "mid2str", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_CBR-AKBC.data.data_utils.get_unique_entities": [[121, 130], ["set", "open", "open.close", "line.strip().split", "set.add", "set.add", "line.strip"], "function", ["None"], ["", "def", "get_unique_entities", "(", "kg_file", ":", "str", ")", "->", "Set", "[", "str", "]", ":", "\n", "    ", "unique_entities", "=", "set", "(", ")", "\n", "fin", "=", "open", "(", "kg_file", ")", "\n", "for", "line", "in", "fin", ":", "\n", "        ", "e1", ",", "r", ",", "e2", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "unique_entities", ".", "add", "(", "e1", ")", "\n", "unique_entities", ".", "add", "(", "e2", ")", "\n", "", "fin", ".", "close", "(", ")", "\n", "return", "unique_entities", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_CBR-AKBC.data.data_utils.get_entities_group_by_relation": [[132, 139], ["collections.defaultdict", "open", "line.strip().split", "rel_to_ent_map[].append", "line.strip"], "function", ["None"], ["", "def", "get_entities_group_by_relation", "(", "file_name", ":", "str", ")", "->", "DefaultDict", "[", "str", ",", "List", "[", "str", "]", "]", ":", "\n", "    ", "rel_to_ent_map", "=", "defaultdict", "(", "list", ")", "\n", "fin", "=", "open", "(", "file_name", ")", "\n", "for", "line", "in", "fin", ":", "\n", "        ", "e1", ",", "r", ",", "e2", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "rel_to_ent_map", "[", "r", "]", ".", "append", "(", "e1", ")", "\n", "", "return", "rel_to_ent_map", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_CBR-AKBC.data.data_utils.get_inv_relation": [[141, 152], ["None"], "function", ["None"], ["", "def", "get_inv_relation", "(", "r", ":", "str", ",", "dataset_name", "=", "\"nell\"", ")", "->", "str", ":", "\n", "    ", "if", "dataset_name", "==", "\"nell\"", ":", "\n", "        ", "if", "r", "[", "-", "4", ":", "]", "==", "\"_inv\"", ":", "\n", "            ", "return", "r", "[", ":", "-", "4", "]", "\n", "", "else", ":", "\n", "            ", "return", "r", "+", "\"_inv\"", "\n", "", "", "else", ":", "\n", "        ", "if", "r", "[", ":", "2", "]", "==", "\"__\"", "or", "r", "[", ":", "2", "]", "==", "\"_/\"", ":", "\n", "            ", "return", "r", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "return", "\"_\"", "+", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_CBR-AKBC.data.data_utils.return_nearest_relation_str": [[154, 165], ["print"], "function", ["None"], ["", "", "", "def", "return_nearest_relation_str", "(", "sim_sorted_ind", ",", "rev_rel_vocab", ",", "rel", ",", "k", "=", "5", ")", ":", "\n", "    ", "\"\"\"\n    helper method to print nearest relations\n    :param sim_sorted_ind: sim matrix sorted wrt index\n    :param rev_rel_vocab:\n    :param rel: relation we want sim for\n    :return:\n    \"\"\"", "\n", "print", "(", "\"====Query rel: {}====\"", ".", "format", "(", "rev_rel_vocab", "[", "rel", "]", ")", ")", "\n", "nearest_rel_inds", "=", "sim_sorted_ind", "[", "rel", ",", ":", "k", "]", "\n", "return", "[", "rev_rel_vocab", "[", "i", "]", "for", "i", "in", "nearest_rel_inds", "]", "", "", ""]], "home.repos.pwc.inspect_result.rajarshd_CBR-AKBC.data.get_paths.get_paths": [[23, 60], ["set", "range", "range", "set.add", "numpy.random.choice", "path.append", "tuple", "len", "range", "data_utils.get_inv_relation", "len", "temp.append"], "function", ["home.repos.pwc.inspect_result.rajarshd_CBR-AKBC.data.data_utils.get_inv_relation"], ["def", "get_paths", "(", "args", ",", "train_adj_list", ",", "start_node", ",", "max_len", "=", "3", ")", ":", "\n", "    ", "\"\"\"\n    :param start_node:\n    :param K:\n    :param max_len:\n    :return:\n    \"\"\"", "\n", "\n", "all_paths", "=", "set", "(", ")", "\n", "for", "k", "in", "range", "(", "args", ".", "num_paths_to_collect", ")", ":", "\n", "        ", "path", "=", "[", "]", "\n", "prev_rel", "=", "None", "\n", "curr_node", "=", "start_node", "\n", "for", "l", "in", "range", "(", "max_len", ")", ":", "\n", "            ", "outgoing_edges", "=", "train_adj_list", "[", "curr_node", "]", "\n", "if", "args", ".", "ignore_sequential_inverse", ":", "\n", "# make sure we dont take inv of a prev edge", "\n", "                ", "if", "prev_rel", "is", "not", "None", ":", "\n", "                    ", "rev_prev_rel", "=", "get_inv_relation", "(", "prev_rel", ",", "args", ".", "dataset_name", ")", "\n", "temp", "=", "[", "]", "\n", "for", "oe", "in", "outgoing_edges", ":", "\n", "                        ", "if", "oe", "[", "0", "]", "==", "rev_prev_rel", ":", "\n", "                            ", "continue", "\n", "", "else", ":", "\n", "                            ", "temp", ".", "append", "(", "oe", ")", "\n", "", "", "outgoing_edges", "=", "temp", "\n", "", "", "if", "len", "(", "outgoing_edges", ")", "==", "0", ":", "\n", "                ", "break", "\n", "# pick one at random", "\n", "", "out_edge_idx", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "len", "(", "outgoing_edges", ")", ")", ")", "\n", "out_edge", "=", "outgoing_edges", "[", "out_edge_idx", "]", "\n", "path", ".", "append", "(", "out_edge", ")", "\n", "prev_rel", "=", "out_edge", "[", "0", "]", "\n", "curr_node", "=", "out_edge", "[", "1", "]", "# assign curr_node as the node of the selected edge", "\n", "", "all_paths", ".", "add", "(", "tuple", "(", "path", ")", ")", "\n", "\n", "", "return", "all_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.rajarshd_CBR-AKBC.data.get_paths.main": [[62, 94], ["logger.info", "os.path.join", "os.path.join", "logger.info", "os.path.join", "data_utils.get_unique_entities", "data_utils.create_adj_list", "time.time", "collections.defaultdict", "enumerate", "logger.info", "open", "logger.info", "pickle.dump", "open.close", "os.path.exists", "os.makedirs", "json.dumps", "tqdm.tqdm", "get_paths.get_paths", "str", "os.path.exists", "os.mkdir", "os.path.join", "vars", "wandb.log", "len", "time.time", "len"], "function", ["home.repos.pwc.inspect_result.rajarshd_CBR-AKBC.data.data_utils.get_unique_entities", "home.repos.pwc.inspect_result.rajarshd_CBR-AKBC.data.data_utils.create_adj_list", "home.repos.pwc.inspect_result.rajarshd_CBR-AKBC.data.get_paths.get_paths"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "logger", ".", "info", "(", "\"============={}================\"", ".", "format", "(", "args", ".", "dataset_name", ")", ")", "\n", "data_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "\"data\"", ",", "args", ".", "dataset_name", ")", "\n", "out_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "\"subgraphs\"", ",", "\"unique_paths\"", ",", "args", ".", "dataset_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "out_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "out_dir", ")", "\n", "", "args", ".", "ignore_sequential_inverse", "=", "(", "args", ".", "ignore_sequential_inverse", "==", "1", ")", "\n", "logger", ".", "info", "(", "json", ".", "dumps", "(", "vars", "(", "args", ")", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", ")", "\n", "\n", "kg_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"graph.txt\"", ")", "\n", "unique_entities", "=", "get_unique_entities", "(", "kg_file", ")", "\n", "train_adj_list", "=", "create_adj_list", "(", "kg_file", ")", "\n", "st_time", "=", "time", ".", "time", "(", ")", "\n", "paths_map", "=", "defaultdict", "(", "list", ")", "\n", "for", "ctr", ",", "e1", "in", "enumerate", "(", "tqdm", "(", "unique_entities", ")", ")", ":", "\n", "        ", "paths", "=", "get_paths", "(", "args", ",", "train_adj_list", ",", "e1", ")", "\n", "if", "paths", "is", "None", ":", "\n", "            ", "continue", "\n", "", "paths_map", "[", "e1", "]", "=", "paths", "\n", "if", "args", ".", "use_wandb", "and", "ctr", "%", "100", "==", "0", ":", "\n", "            ", "wandb", ".", "log", "(", "{", "\"progress\"", ":", "ctr", "/", "len", "(", "unique_entities", ")", "}", ")", "\n", "\n", "", "", "logger", ".", "info", "(", "\"Took {} seconds to collect paths for {} entities\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "st_time", ",", "len", "(", "paths_map", ")", ")", ")", "\n", "\n", "out_file_name", "=", "\"paths_\"", "+", "str", "(", "args", ".", "num_paths_to_collect", ")", "\n", "out_file_name", "+=", "\".pkl\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "out_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "out_dir", ")", "\n", "", "fout", "=", "open", "(", "os", ".", "path", ".", "join", "(", "out_dir", ",", "out_file_name", ")", ",", "\"wb\"", ")", "\n", "logger", ".", "info", "(", "\"Saving at {}\"", ".", "format", "(", "out_file_name", ")", ")", "\n", "pickle", ".", "dump", "(", "paths_map", ",", "fout", ")", "\n", "fout", ".", "close", "(", ")", "\n", "\n"]]}