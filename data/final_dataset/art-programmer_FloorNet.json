{"home.repos.pwc.inspect_result.art-programmer_FloorNet.None.IP.extractCorners": [[59, 212], ["enumerate", "enumerate", "utils.extractCornersFromHeatmaps", "enumerate", "enumerate", "pointOffsets.append", "len", "enumerate", "pointOrientationLinesMap.append", "enumerate", "len", "range", "copy.deepcopy", "min", "max", "min", "max", "enumerate", "len", "list", "tuple.remove", "tuple", "range", "len", "enumerate", "orientationPoints[].append", "list", "tuple.append", "tuple", "len", "[].append", "[].append", "pointNeighbors[].append", "pointNeighbors[].append", "lines.append", "orientationPoints[].append", "abs"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.extractCornersFromHeatmaps"], ["def", "extractCorners", "(", "heatmaps", ",", "threshold", ",", "gap", ",", "cornerType", "=", "'wall'", ",", "augment", "=", "False", ",", "gt", "=", "False", ")", ":", "\n", "  ", "if", "gt", ":", "\n", "    ", "orientationPoints", "=", "heatmaps", "\n", "", "else", ":", "\n", "    ", "orientationPoints", "=", "extractCornersFromHeatmaps", "(", "heatmaps", ",", "threshold", ")", "\n", "pass", "\n", "\n", "", "if", "cornerType", "==", "'wall'", ":", "\n", "    ", "cornerOrientations", "=", "[", "]", "\n", "for", "orientations", "in", "POINT_ORIENTATIONS", ":", "\n", "      ", "cornerOrientations", "+=", "orientations", "\n", "continue", "\n", "", "", "elif", "cornerType", "==", "'door'", ":", "\n", "    ", "cornerOrientations", "=", "POINT_ORIENTATIONS", "[", "0", "]", "\n", "", "else", ":", "\n", "    ", "cornerOrientations", "=", "POINT_ORIENTATIONS", "[", "1", "]", "\n", "pass", "\n", "#print(orientationPoints)", "\n", "", "if", "augment", ":", "\n", "    ", "orientationMap", "=", "{", "}", "\n", "for", "pointType", ",", "orientationOrientations", "in", "enumerate", "(", "POINT_ORIENTATIONS", ")", ":", "\n", "      ", "for", "orientation", ",", "orientations", "in", "enumerate", "(", "orientationOrientations", ")", ":", "\n", "        ", "orientationMap", "[", "orientations", "]", "=", "orientation", "\n", "continue", "\n", "", "continue", "\n", "\n", "", "for", "orientationIndex", ",", "corners", "in", "enumerate", "(", "orientationPoints", ")", ":", "\n", "      ", "if", "len", "(", "corners", ")", ">", "3", ":", "\n", "        ", "continue", "#skip aug", "\n", "", "pointType", "=", "orientationIndex", "//", "4", "\n", "if", "pointType", "in", "[", "2", "]", ":", "\n", "        ", "orientation", "=", "orientationIndex", "%", "4", "\n", "orientations", "=", "POINT_ORIENTATIONS", "[", "pointType", "]", "[", "orientation", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "orientations", ")", ")", ":", "\n", "          ", "newOrientations", "=", "list", "(", "orientations", ")", "\n", "newOrientations", ".", "remove", "(", "orientations", "[", "i", "]", ")", "\n", "newOrientations", "=", "tuple", "(", "newOrientations", ")", "\n", "if", "not", "newOrientations", "in", "orientationMap", ":", "\n", "            ", "continue", "\n", "", "newOrientation", "=", "orientationMap", "[", "newOrientations", "]", "\n", "for", "corner", "in", "corners", ":", "\n", "            ", "orientationPoints", "[", "(", "pointType", "-", "1", ")", "*", "4", "+", "newOrientation", "]", ".", "append", "(", "corner", "+", "(", "True", ",", ")", ")", "\n", "continue", "\n", "", "continue", "\n", "", "", "elif", "pointType", "in", "[", "1", "]", ":", "\n", "        ", "orientation", "=", "orientationIndex", "%", "4", "\n", "orientations", "=", "POINT_ORIENTATIONS", "[", "pointType", "]", "[", "orientation", "]", "\n", "for", "orientation", "in", "range", "(", "4", ")", ":", "\n", "          ", "if", "orientation", "in", "orientations", ":", "\n", "            ", "continue", "\n", "", "newOrientations", "=", "list", "(", "orientations", ")", "\n", "newOrientations", ".", "append", "(", "orientation", ")", "\n", "newOrientations", "=", "tuple", "(", "newOrientations", ")", "\n", "if", "not", "newOrientations", "in", "orientationMap", ":", "\n", "            ", "continue", "\n", "", "newOrientation", "=", "orientationMap", "[", "newOrientations", "]", "\n", "for", "corner", "in", "corners", ":", "\n", "            ", "orientationPoints", "[", "(", "pointType", "+", "1", ")", "*", "4", "+", "newOrientation", "]", ".", "append", "(", "corner", "+", "(", "True", ",", ")", ")", "\n", "continue", "\n", "", "continue", "\n", "", "pass", "\n", "", "continue", "\n", "", "pass", "\n", "#print(orientationPoints)", "\n", "", "pointOffset", "=", "0", "\n", "pointOffsets", "=", "[", "]", "\n", "points", "=", "[", "]", "\n", "pointOrientationLinesMap", "=", "[", "]", "\n", "for", "orientationIndex", ",", "corners", "in", "enumerate", "(", "orientationPoints", ")", ":", "\n", "    ", "pointOffsets", ".", "append", "(", "pointOffset", ")", "\n", "orientations", "=", "cornerOrientations", "[", "orientationIndex", "]", "\n", "for", "point", "in", "corners", ":", "\n", "      ", "orientationLines", "=", "{", "}", "\n", "for", "orientation", "in", "orientations", ":", "\n", "        ", "orientationLines", "[", "orientation", "]", "=", "[", "]", "\n", "continue", "\n", "", "pointOrientationLinesMap", ".", "append", "(", "orientationLines", ")", "\n", "continue", "\n", "\n", "", "pointOffset", "+=", "len", "(", "corners", ")", "\n", "\n", "if", "cornerType", "==", "'wall'", ":", "\n", "      ", "points", "+=", "[", "[", "corner", "[", "0", "]", "[", "0", "]", ",", "corner", "[", "0", "]", "[", "1", "]", ",", "orientationIndex", "//", "4", ",", "orientationIndex", "%", "4", "]", "for", "corner", "in", "corners", "]", "\n", "", "elif", "cornerType", "==", "'door'", ":", "\n", "      ", "points", "+=", "[", "[", "corner", "[", "0", "]", "[", "0", "]", ",", "corner", "[", "0", "]", "[", "1", "]", ",", "0", ",", "orientationIndex", "]", "for", "corner", "in", "corners", "]", "\n", "", "else", ":", "\n", "      ", "points", "+=", "[", "[", "corner", "[", "0", "]", "[", "0", "]", ",", "corner", "[", "0", "]", "[", "1", "]", ",", "1", ",", "orientationIndex", "]", "for", "corner", "in", "corners", "]", "\n", "pass", "\n", "", "continue", "\n", "\n", "", "augmentedPointMask", "=", "{", "}", "\n", "\n", "\n", "lines", "=", "[", "]", "\n", "pointNeighbors", "=", "[", "[", "]", "for", "point", "in", "points", "]", "\n", "\n", "for", "orientationIndex", ",", "corners", "in", "enumerate", "(", "orientationPoints", ")", ":", "\n", "    ", "orientations", "=", "cornerOrientations", "[", "orientationIndex", "]", "\n", "for", "orientation", "in", "orientations", ":", "\n", "      ", "if", "orientation", "not", "in", "[", "1", ",", "2", "]", ":", "\n", "        ", "continue", "\n", "", "oppositeOrientation", "=", "(", "orientation", "+", "2", ")", "%", "4", "\n", "lineDim", "=", "-", "1", "\n", "if", "orientation", "==", "0", "or", "orientation", "==", "2", ":", "\n", "        ", "lineDim", "=", "1", "\n", "", "else", ":", "\n", "        ", "lineDim", "=", "0", "\n", "pass", "\n", "\n", "", "for", "cornerIndex", ",", "corner", "in", "enumerate", "(", "corners", ")", ":", "\n", "        ", "pointIndex", "=", "pointOffsets", "[", "orientationIndex", "]", "+", "cornerIndex", "\n", "#print(corner)", "\n", "if", "len", "(", "corner", ")", ">", "3", ":", "\n", "          ", "augmentedPointMask", "[", "pointIndex", "]", "=", "True", "\n", "pass", "\n", "\n", "", "ranges", "=", "copy", ".", "deepcopy", "(", "ORIENTATION_RANGES", "[", "orientation", "]", ")", "\n", "\n", "ranges", "[", "lineDim", "]", "=", "min", "(", "ranges", "[", "lineDim", "]", ",", "corner", "[", "0", "]", "[", "lineDim", "]", ")", "\n", "ranges", "[", "lineDim", "+", "2", "]", "=", "max", "(", "ranges", "[", "lineDim", "+", "2", "]", ",", "corner", "[", "0", "]", "[", "lineDim", "]", ")", "\n", "ranges", "[", "1", "-", "lineDim", "]", "=", "min", "(", "ranges", "[", "1", "-", "lineDim", "]", ",", "corner", "[", "1", "]", "[", "1", "-", "lineDim", "]", "-", "gap", ")", "\n", "ranges", "[", "1", "-", "lineDim", "+", "2", "]", "=", "max", "(", "ranges", "[", "1", "-", "lineDim", "+", "2", "]", ",", "corner", "[", "2", "]", "[", "1", "-", "lineDim", "]", "+", "gap", ")", "\n", "\n", "for", "oppositeOrientationIndex", ",", "oppositeCorners", "in", "enumerate", "(", "orientationPoints", ")", ":", "\n", "          ", "if", "oppositeOrientation", "not", "in", "cornerOrientations", "[", "oppositeOrientationIndex", "]", ":", "\n", "            ", "continue", "\n", "", "for", "oppositeCornerIndex", ",", "oppositeCorner", "in", "enumerate", "(", "oppositeCorners", ")", ":", "\n", "            ", "if", "orientationIndex", "==", "oppositeOrientationIndex", "and", "oppositeCornerIndex", "==", "cornerIndex", ":", "\n", "              ", "continue", "\n", "\n", "", "oppositePointIndex", "=", "pointOffsets", "[", "oppositeOrientationIndex", "]", "+", "oppositeCornerIndex", "\n", "\n", "\n", "if", "oppositeCorner", "[", "0", "]", "[", "lineDim", "]", "<", "ranges", "[", "lineDim", "]", "or", "oppositeCorner", "[", "0", "]", "[", "lineDim", "]", ">", "ranges", "[", "lineDim", "+", "2", "]", "or", "ranges", "[", "1", "-", "lineDim", "]", ">", "oppositeCorner", "[", "2", "]", "[", "1", "-", "lineDim", "]", "or", "ranges", "[", "1", "-", "lineDim", "+", "2", "]", "<", "oppositeCorner", "[", "1", "]", "[", "1", "-", "lineDim", "]", ":", "\n", "              ", "continue", "\n", "\n", "\n", "", "if", "abs", "(", "oppositeCorner", "[", "0", "]", "[", "lineDim", "]", "-", "corner", "[", "0", "]", "[", "lineDim", "]", ")", "<", "LENGTH_THRESHOLDS", "[", "cornerType", "]", ":", "\n", "              ", "continue", "\n", "\n", "", "lineIndex", "=", "len", "(", "lines", ")", "\n", "pointOrientationLinesMap", "[", "pointIndex", "]", "[", "orientation", "]", ".", "append", "(", "lineIndex", ")", "\n", "pointOrientationLinesMap", "[", "oppositePointIndex", "]", "[", "oppositeOrientation", "]", ".", "append", "(", "lineIndex", ")", "\n", "pointNeighbors", "[", "pointIndex", "]", ".", "append", "(", "oppositePointIndex", ")", "\n", "pointNeighbors", "[", "oppositePointIndex", "]", ".", "append", "(", "pointIndex", ")", "\n", "\n", "lines", ".", "append", "(", "(", "pointIndex", ",", "oppositePointIndex", ")", ")", "\n", "continue", "\n", "", "continue", "\n", "", "continue", "\n", "", "continue", "\n", "", "continue", "\n", "", "return", "points", ",", "lines", ",", "pointOrientationLinesMap", ",", "pointNeighbors", ",", "augmentedPointMask", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.IP.augmentPoints": [[215, 303], ["enumerate", "enumerate", "enumerate", "enumerate", "range", "range", "len", "list", "tuple.remove", "tuple", "newPoints.append", "copy.deepcopy", "range", "enumerate", "list", "tuple.append", "tuple", "newPoints.append", "min", "max", "range", "abs", "max", "abs"], "function", ["None"], ["", "def", "augmentPoints", "(", "points", ",", "decreasingTypes", "=", "[", "2", "]", ",", "increasingTypes", "=", "[", "1", "]", ")", ":", "\n", "  ", "orientationMap", "=", "{", "}", "\n", "for", "pointType", ",", "orientationOrientations", "in", "enumerate", "(", "POINT_ORIENTATIONS", ")", ":", "\n", "    ", "for", "orientation", ",", "orientations", "in", "enumerate", "(", "orientationOrientations", ")", ":", "\n", "      ", "orientationMap", "[", "orientations", "]", "=", "orientation", "\n", "continue", "\n", "", "continue", "\n", "\n", "", "newPoints", "=", "[", "]", "\n", "for", "pointIndex", ",", "point", "in", "enumerate", "(", "points", ")", ":", "\n", "    ", "if", "point", "[", "2", "]", "not", "in", "decreasingTypes", ":", "\n", "      ", "continue", "\n", "", "orientations", "=", "POINT_ORIENTATIONS", "[", "point", "[", "2", "]", "]", "[", "point", "[", "3", "]", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "orientations", ")", ")", ":", "\n", "      ", "newOrientations", "=", "list", "(", "orientations", ")", "\n", "newOrientations", ".", "remove", "(", "orientations", "[", "i", "]", ")", "\n", "newOrientations", "=", "tuple", "(", "newOrientations", ")", "\n", "if", "not", "newOrientations", "in", "orientationMap", ":", "\n", "        ", "continue", "\n", "", "newOrientation", "=", "orientationMap", "[", "newOrientations", "]", "\n", "newPoints", ".", "append", "(", "[", "point", "[", "0", "]", ",", "point", "[", "1", "]", ",", "point", "[", "2", "]", "-", "1", ",", "newOrientation", "]", ")", "\n", "continue", "\n", "", "continue", "\n", "\n", "", "for", "pointIndex", ",", "point", "in", "enumerate", "(", "points", ")", ":", "\n", "    ", "if", "point", "[", "2", "]", "not", "in", "increasingTypes", ":", "\n", "      ", "continue", "\n", "", "orientations", "=", "POINT_ORIENTATIONS", "[", "point", "[", "2", "]", "]", "[", "point", "[", "3", "]", "]", "\n", "for", "orientation", "in", "range", "(", "4", ")", ":", "\n", "      ", "if", "orientation", "in", "orientations", ":", "\n", "        ", "continue", "\n", "\n", "", "oppositeOrientation", "=", "(", "orientation", "+", "2", ")", "%", "4", "\n", "ranges", "=", "copy", ".", "deepcopy", "(", "ORIENTATION_RANGES", "[", "orientation", "]", ")", "\n", "lineDim", "=", "-", "1", "\n", "if", "orientation", "==", "0", "or", "orientation", "==", "2", ":", "\n", "        ", "lineDim", "=", "1", "\n", "", "else", ":", "\n", "        ", "lineDim", "=", "0", "\n", "pass", "\n", "", "deltas", "=", "[", "0", ",", "0", "]", "\n", "\n", "if", "lineDim", "==", "1", ":", "\n", "        ", "deltas", "[", "0", "]", "=", "gap", "\n", "", "else", ":", "\n", "        ", "deltas", "[", "1", "]", "=", "gap", "\n", "pass", "\n", "\n", "", "for", "c", "in", "range", "(", "2", ")", ":", "\n", "        ", "ranges", "[", "c", "]", "=", "min", "(", "ranges", "[", "c", "]", ",", "point", "[", "c", "]", "-", "deltas", "[", "c", "]", ")", "\n", "ranges", "[", "c", "+", "2", "]", "=", "max", "(", "ranges", "[", "c", "+", "2", "]", ",", "point", "[", "c", "]", "+", "deltas", "[", "c", "]", ")", "\n", "continue", "\n", "\n", "", "hasNeighbor", "=", "False", "\n", "for", "neighborPointIndex", ",", "neighborPoint", "in", "enumerate", "(", "points", ")", ":", "\n", "        ", "if", "neighborPointIndex", "==", "pointIndex", ":", "\n", "          ", "continue", "\n", "\n", "", "neighborOrientations", "=", "POINT_ORIENTATIONS", "[", "neighborPoint", "[", "2", "]", "]", "[", "neighborPoint", "[", "3", "]", "]", "\n", "if", "oppositeOrientation", "not", "in", "neighborOrientations", ":", "\n", "          ", "continue", "\n", "\n", "", "inRange", "=", "True", "\n", "for", "c", "in", "range", "(", "2", ")", ":", "\n", "          ", "if", "neighborPoint", "[", "c", "]", "<", "ranges", "[", "c", "]", "or", "neighborPoint", "[", "c", "]", ">", "ranges", "[", "c", "+", "2", "]", ":", "\n", "            ", "inRange", "=", "False", "\n", "break", "\n", "", "continue", "\n", "\n", "", "if", "not", "inRange", "or", "abs", "(", "neighborPoint", "[", "lineDim", "]", "-", "point", "[", "lineDim", "]", ")", "<", "max", "(", "abs", "(", "neighborPoint", "[", "1", "-", "lineDim", "]", "-", "point", "[", "1", "-", "lineDim", "]", ")", ",", "1", ")", ":", "\n", "          ", "continue", "\n", "\n", "", "hasNeighbor", "=", "True", "\n", "break", "\n", "\n", "", "if", "not", "hasNeighbor", ":", "\n", "        ", "continue", "\n", "\n", "", "newOrientations", "=", "list", "(", "orientations", ")", "\n", "newOrientations", ".", "append", "(", "orientation", ")", "\n", "newOrientations", "=", "tuple", "(", "newOrientations", ")", "\n", "if", "not", "newOrientations", "in", "orientationMap", ":", "\n", "        ", "continue", "\n", "", "newOrientation", "=", "orientationMap", "[", "newOrientations", "]", "\n", "newPoints", ".", "append", "(", "[", "point", "[", "0", "]", ",", "point", "[", "1", "]", ",", "point", "[", "2", "]", "+", "1", ",", "newOrientation", "]", ")", "\n", "continue", "\n", "", "continue", "\n", "", "return", "points", "+", "newPoints", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.IP.filterWalls": [[306, 417], ["enumerate", "enumerate", "enumerate", "enumerate", "enumerate", "enumerate", "calcLineDim", "enumerate", "calcLineDim", "enumerate", "len", "range", "range", "[].append", "pointNeighbors[].append", "[].append", "len", "len", "len", "newWallPoints.append", "newWallLines.append", "len", "len", "len", "tuple", "len", "orientationNeighborMap.keys", "tuple", "orientationNeighborMap.keys"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim"], ["", "def", "filterWalls", "(", "wallPoints", ",", "wallLines", ")", ":", "\n", "  ", "orientationMap", "=", "{", "}", "\n", "for", "pointType", ",", "orientationOrientations", "in", "enumerate", "(", "POINT_ORIENTATIONS", ")", ":", "\n", "    ", "for", "orientation", ",", "orientations", "in", "enumerate", "(", "orientationOrientations", ")", ":", "\n", "      ", "orientationMap", "[", "orientations", "]", "=", "orientation", "\n", "continue", "\n", "", "continue", "\n", "\n", "#print(POINT_ORIENTATIONS)", "\n", "\n", "", "while", "True", ":", "\n", "    ", "pointOrientationNeighborsMap", "=", "{", "}", "\n", "for", "line", "in", "wallLines", ":", "\n", "      ", "lineDim", "=", "calcLineDim", "(", "wallPoints", ",", "line", ")", "\n", "for", "c", ",", "pointIndex", "in", "enumerate", "(", "line", ")", ":", "\n", "        ", "if", "lineDim", "==", "0", ":", "\n", "          ", "if", "c", "==", "0", ":", "\n", "            ", "orientation", "=", "1", "\n", "", "else", ":", "\n", "            ", "orientation", "=", "3", "\n", "", "", "else", ":", "\n", "          ", "if", "c", "==", "0", ":", "\n", "            ", "orientation", "=", "2", "\n", "", "else", ":", "\n", "            ", "orientation", "=", "0", "\n", "pass", "\n", "", "pass", "\n", "\n", "", "if", "pointIndex", "not", "in", "pointOrientationNeighborsMap", ":", "\n", "          ", "pointOrientationNeighborsMap", "[", "pointIndex", "]", "=", "{", "}", "\n", "pass", "\n", "", "if", "orientation", "not", "in", "pointOrientationNeighborsMap", "[", "pointIndex", "]", ":", "\n", "          ", "pointOrientationNeighborsMap", "[", "pointIndex", "]", "[", "orientation", "]", "=", "[", "]", "\n", "pass", "\n", "", "pointOrientationNeighborsMap", "[", "pointIndex", "]", "[", "orientation", "]", ".", "append", "(", "line", "[", "1", "-", "c", "]", ")", "\n", "continue", "\n", "", "continue", "\n", "\n", "\n", "", "invalidPointMask", "=", "{", "}", "\n", "for", "pointIndex", ",", "point", "in", "enumerate", "(", "wallPoints", ")", ":", "\n", "      ", "if", "pointIndex", "not", "in", "pointOrientationNeighborsMap", ":", "\n", "        ", "invalidPointMask", "[", "pointIndex", "]", "=", "True", "\n", "continue", "\n", "", "orientationNeighborMap", "=", "pointOrientationNeighborsMap", "[", "pointIndex", "]", "\n", "orientations", "=", "POINT_ORIENTATIONS", "[", "point", "[", "2", "]", "]", "[", "point", "[", "3", "]", "]", "\n", "if", "len", "(", "orientationNeighborMap", ")", "<", "len", "(", "orientations", ")", ":", "\n", "        ", "if", "len", "(", "orientationNeighborMap", ")", ">=", "2", "and", "tuple", "(", "orientationNeighborMap", ".", "keys", "(", ")", ")", "in", "orientationMap", ":", "\n", "          ", "newOrientation", "=", "orientationMap", "[", "tuple", "(", "orientationNeighborMap", ".", "keys", "(", ")", ")", "]", "\n", "wallPoints", "[", "pointIndex", "]", "[", "2", "]", "=", "len", "(", "orientationNeighborMap", ")", "-", "1", "\n", "wallPoints", "[", "pointIndex", "]", "[", "3", "]", "=", "newOrientation", "\n", "#print(orientationNeighborMap)", "\n", "#print('new', len(orientationNeighborMap), newOrientation)", "\n", "continue", "\n", "", "invalidPointMask", "[", "pointIndex", "]", "=", "True", "\n", "pass", "\n", "", "continue", "\n", "\n", "", "if", "len", "(", "invalidPointMask", ")", "==", "0", ":", "\n", "      ", "break", "\n", "\n", "", "newWallPoints", "=", "[", "]", "\n", "pointIndexMap", "=", "{", "}", "\n", "for", "pointIndex", ",", "point", "in", "enumerate", "(", "wallPoints", ")", ":", "\n", "      ", "if", "pointIndex", "not", "in", "invalidPointMask", ":", "\n", "        ", "pointIndexMap", "[", "pointIndex", "]", "=", "len", "(", "newWallPoints", ")", "\n", "newWallPoints", ".", "append", "(", "point", ")", "\n", "pass", "\n", "", "continue", "\n", "\n", "", "wallPoints", "=", "newWallPoints", "\n", "\n", "newWallLines", "=", "[", "]", "\n", "for", "lineIndex", ",", "line", "in", "enumerate", "(", "wallLines", ")", ":", "\n", "      ", "if", "line", "[", "0", "]", "in", "pointIndexMap", "and", "line", "[", "1", "]", "in", "pointIndexMap", ":", "\n", "        ", "newLine", "=", "(", "pointIndexMap", "[", "line", "[", "0", "]", "]", ",", "pointIndexMap", "[", "line", "[", "1", "]", "]", ")", "\n", "newWallLines", ".", "append", "(", "newLine", ")", "\n", "pass", "\n", "", "continue", "\n", "", "wallLines", "=", "newWallLines", "\n", "continue", "\n", "\n", "", "pointOrientationLinesMap", "=", "[", "{", "}", "for", "_", "in", "range", "(", "len", "(", "wallPoints", ")", ")", "]", "\n", "pointNeighbors", "=", "[", "[", "]", "for", "_", "in", "range", "(", "len", "(", "wallPoints", ")", ")", "]", "\n", "\n", "for", "lineIndex", ",", "line", "in", "enumerate", "(", "wallLines", ")", ":", "\n", "    ", "lineDim", "=", "calcLineDim", "(", "wallPoints", ",", "line", ")", "\n", "for", "c", ",", "pointIndex", "in", "enumerate", "(", "line", ")", ":", "\n", "      ", "if", "lineDim", "==", "0", ":", "\n", "        ", "if", "wallPoints", "[", "pointIndex", "]", "[", "lineDim", "]", "<", "wallPoints", "[", "line", "[", "1", "-", "c", "]", "]", "[", "lineDim", "]", ":", "\n", "          ", "orientation", "=", "1", "\n", "", "else", ":", "\n", "          ", "orientation", "=", "3", "\n", "pass", "\n", "", "", "else", ":", "\n", "        ", "if", "wallPoints", "[", "pointIndex", "]", "[", "lineDim", "]", "<", "wallPoints", "[", "line", "[", "1", "-", "c", "]", "]", "[", "lineDim", "]", ":", "\n", "          ", "orientation", "=", "2", "\n", "", "else", ":", "\n", "          ", "orientation", "=", "0", "\n", "pass", "\n", "", "pass", "\n", "\n", "", "if", "orientation", "not", "in", "pointOrientationLinesMap", "[", "pointIndex", "]", ":", "\n", "        ", "pointOrientationLinesMap", "[", "pointIndex", "]", "[", "orientation", "]", "=", "[", "]", "\n", "pass", "\n", "", "pointOrientationLinesMap", "[", "pointIndex", "]", "[", "orientation", "]", ".", "append", "(", "lineIndex", ")", "\n", "pointNeighbors", "[", "pointIndex", "]", ".", "append", "(", "line", "[", "1", "-", "c", "]", ")", "\n", "continue", "\n", "", "continue", "\n", "\n", "", "return", "wallPoints", ",", "wallLines", ",", "pointOrientationLinesMap", ",", "pointNeighbors", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.IP.writePoints": [[419, 432], ["points_file.close", "point_label_file.close", "open", "open", "points_file.write", "points_file.write", "points_file.write", "points_file.write", "point_label_file.write", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "function", ["None"], ["", "def", "writePoints", "(", "points", ",", "pointLabels", ",", "output_prefix", "=", "'test/'", ")", ":", "\n", "  ", "with", "open", "(", "output_prefix", "+", "'points_out.txt'", ",", "'w'", ")", "as", "points_file", ":", "\n", "    ", "for", "point", "in", "points", ":", "\n", "      ", "points_file", ".", "write", "(", "str", "(", "point", "[", "0", "]", "+", "1", ")", "+", "'\\t'", "+", "str", "(", "point", "[", "1", "]", "+", "1", ")", "+", "'\\t'", ")", "\n", "points_file", ".", "write", "(", "str", "(", "point", "[", "0", "]", "+", "1", ")", "+", "'\\t'", "+", "str", "(", "point", "[", "1", "]", "+", "1", ")", "+", "'\\t'", ")", "\n", "points_file", ".", "write", "(", "'point\\t'", ")", "\n", "points_file", ".", "write", "(", "str", "(", "point", "[", "2", "]", "+", "1", ")", "+", "'\\t'", "+", "str", "(", "point", "[", "3", "]", "+", "1", ")", "+", "'\\n'", ")", "\n", "", "", "points_file", ".", "close", "(", ")", "\n", "\n", "with", "open", "(", "output_prefix", "+", "'point_labels.txt'", ",", "'w'", ")", "as", "point_label_file", ":", "\n", "    ", "for", "point", "in", "pointLabels", ":", "\n", "      ", "point_label_file", ".", "write", "(", "str", "(", "point", "[", "0", "]", ")", "+", "'\\t'", "+", "str", "(", "point", "[", "1", "]", ")", "+", "'\\t'", "+", "str", "(", "point", "[", "2", "]", ")", "+", "'\\t'", "+", "str", "(", "point", "[", "3", "]", ")", "+", "'\\n'", ")", "\n", "", "", "point_label_file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.IP.writeDoors": [[434, 445], ["open", "enumerate", "doors_file.close", "doors_file.write", "doors_file.write", "doors_file.write", "doors_file.write", "str", "str", "str", "str", "str"], "function", ["None"], ["", "def", "writeDoors", "(", "points", ",", "lines", ",", "doorTypes", ",", "output_prefix", "=", "'test/'", ")", ":", "\n", "  ", "with", "open", "(", "output_prefix", "+", "'doors_out.txt'", ",", "'w'", ")", "as", "doors_file", ":", "\n", "    ", "for", "lineIndex", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "      ", "point_1", "=", "points", "[", "line", "[", "0", "]", "]", "\n", "point_2", "=", "points", "[", "line", "[", "1", "]", "]", "\n", "\n", "doors_file", ".", "write", "(", "str", "(", "point_1", "[", "0", "]", "+", "1", ")", "+", "'\\t'", "+", "str", "(", "point_1", "[", "1", "]", "+", "1", ")", "+", "'\\t'", ")", "\n", "doors_file", ".", "write", "(", "str", "(", "point_2", "[", "0", "]", "+", "1", ")", "+", "'\\t'", "+", "str", "(", "point_2", "[", "1", "]", "+", "1", ")", "+", "'\\t'", ")", "\n", "doors_file", ".", "write", "(", "'door\\t'", ")", "\n", "doors_file", ".", "write", "(", "str", "(", "doorTypes", "[", "lineIndex", "]", "+", "1", ")", "+", "'\\t1\\n'", ")", "\n", "", "doors_file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.IP.writeIcons": [[447, 467], ["open", "enumerate", "icons_file.close", "icons_file.write", "icons_file.write", "icons_file.write", "icons_file.write", "icons_file.write", "int", "int", "int", "int", "round", "round", "round", "round", "str", "str", "str", "str"], "function", ["None"], ["", "", "def", "writeIcons", "(", "points", ",", "icons", ",", "iconTypes", ",", "output_prefix", "=", "'test/'", ")", ":", "\n", "  ", "with", "open", "(", "output_prefix", "+", "'icons_out.txt'", ",", "'w'", ")", "as", "icons_file", ":", "\n", "    ", "for", "iconIndex", ",", "icon", "in", "enumerate", "(", "icons", ")", ":", "\n", "      ", "point_1", "=", "points", "[", "icon", "[", "0", "]", "]", "\n", "point_2", "=", "points", "[", "icon", "[", "1", "]", "]", "\n", "point_3", "=", "points", "[", "icon", "[", "2", "]", "]", "\n", "point_4", "=", "points", "[", "icon", "[", "3", "]", "]", "\n", "\n", "x_1", "=", "int", "(", "round", "(", "(", "point_1", "[", "0", "]", "+", "point_3", "[", "0", "]", ")", "//", "2", ")", ")", "+", "1", "\n", "x_2", "=", "int", "(", "round", "(", "(", "point_2", "[", "0", "]", "+", "point_4", "[", "0", "]", ")", "//", "2", ")", ")", "+", "1", "\n", "y_1", "=", "int", "(", "round", "(", "(", "point_1", "[", "1", "]", "+", "point_2", "[", "1", "]", ")", "//", "2", ")", ")", "+", "1", "\n", "y_2", "=", "int", "(", "round", "(", "(", "point_3", "[", "1", "]", "+", "point_4", "[", "1", "]", ")", "//", "2", ")", ")", "+", "1", "\n", "\n", "icons_file", ".", "write", "(", "str", "(", "x_1", ")", "+", "'\\t'", "+", "str", "(", "y_1", ")", "+", "'\\t'", ")", "\n", "icons_file", ".", "write", "(", "str", "(", "x_2", ")", "+", "'\\t'", "+", "str", "(", "y_2", ")", "+", "'\\t'", ")", "\n", "icons_file", ".", "write", "(", "iconNumberNameMap", "[", "iconTypes", "[", "iconIndex", "]", "]", "+", "'\\t'", ")", "\n", "#icons_file.write(str(iconNumberStyleMap[iconTypes[iconIndex]]) + '\\t')", "\n", "icons_file", ".", "write", "(", "'1\\t'", ")", "\n", "icons_file", ".", "write", "(", "'1\\n'", ")", "\n", "", "icons_file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.IP.adjustPoints": [[470, 551], ["enumerate", "range", "calcLineDim", "enumerate", "lineNeighbors.append", "len", "numpy.concatenate", "np.concatenate.min", "np.concatenate.max", "len", "calcLineDim", "calcLineDim", "neighbors.append", "range", "numpy.array", "pointGroup.append", "newLineGroup.append"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim"], ["", "", "def", "adjustPoints", "(", "points", ",", "lines", ")", ":", "\n", "  ", "lineNeighbors", "=", "[", "]", "\n", "for", "lineIndex", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "    ", "lineDim", "=", "calcLineDim", "(", "points", ",", "line", ")", "\n", "neighbors", "=", "[", "]", "\n", "for", "neighborLineIndex", ",", "neighborLine", "in", "enumerate", "(", "lines", ")", ":", "\n", "      ", "if", "neighborLineIndex", "<=", "lineIndex", ":", "\n", "        ", "continue", "\n", "", "neighborLineDim", "=", "calcLineDim", "(", "points", ",", "neighborLine", ")", "\n", "point_1", "=", "points", "[", "neighborLine", "[", "0", "]", "]", "\n", "point_2", "=", "points", "[", "neighborLine", "[", "1", "]", "]", "\n", "lineDimNeighbor", "=", "calcLineDim", "(", "points", ",", "neighborLine", ")", "\n", "\n", "if", "lineDimNeighbor", "!=", "lineDim", ":", "\n", "        ", "continue", "\n", "", "if", "neighborLine", "[", "0", "]", "!=", "line", "[", "0", "]", "and", "neighborLine", "[", "0", "]", "!=", "line", "[", "1", "]", "and", "neighborLine", "[", "1", "]", "!=", "line", "[", "0", "]", "and", "neighborLine", "[", "1", "]", "!=", "line", "[", "1", "]", ":", "\n", "        ", "continue", "\n", "", "neighbors", ".", "append", "(", "neighborLineIndex", ")", "\n", "continue", "\n", "", "lineNeighbors", ".", "append", "(", "neighbors", ")", "\n", "continue", "\n", "\n", "", "visitedLines", "=", "{", "}", "\n", "for", "lineIndex", "in", "range", "(", "len", "(", "lines", ")", ")", ":", "\n", "    ", "if", "lineIndex", "in", "visitedLines", ":", "\n", "      ", "continue", "\n", "", "lineGroup", "=", "[", "lineIndex", "]", "\n", "while", "True", ":", "\n", "      ", "newLineGroup", "=", "lineGroup", "\n", "hasChange", "=", "False", "\n", "for", "line", "in", "lineGroup", ":", "\n", "        ", "neighbors", "=", "lineNeighbors", "[", "line", "]", "\n", "for", "neighbor", "in", "neighbors", ":", "\n", "          ", "if", "neighbor", "not", "in", "newLineGroup", ":", "\n", "            ", "newLineGroup", ".", "append", "(", "neighbor", ")", "\n", "hasChange", "=", "True", "\n", "pass", "\n", "", "continue", "\n", "", "continue", "\n", "", "if", "not", "hasChange", ":", "\n", "        ", "break", "\n", "", "lineGroup", "=", "newLineGroup", "\n", "continue", "\n", "\n", "", "for", "line", "in", "lineGroup", ":", "\n", "      ", "visitedLines", "[", "line", "]", "=", "True", "\n", "continue", "\n", "\n", "#print([[points[pointIndex] for pointIndex in lines[lineIndex]] for lineIndex in lineGroup], calcLineDim(points, lines[lineGroup[0]]))", "\n", "\n", "", "pointGroup", "=", "[", "]", "\n", "for", "line", "in", "lineGroup", ":", "\n", "      ", "for", "index", "in", "range", "(", "2", ")", ":", "\n", "        ", "pointIndex", "=", "lines", "[", "line", "]", "[", "index", "]", "\n", "if", "pointIndex", "not", "in", "pointGroup", ":", "\n", "          ", "pointGroup", ".", "append", "(", "pointIndex", ")", "\n", "pass", "\n", "", "continue", "\n", "", "continue", "\n", "\n", "#lineDim = calcLineDim(points, lines[lineGroup[0]])", "\n", "", "xy", "=", "np", ".", "concatenate", "(", "[", "np", ".", "array", "(", "[", "points", "[", "pointIndex", "]", "[", ":", "2", "]", "for", "pointIndex", "in", "lines", "[", "lineIndex", "]", "]", ")", "for", "lineIndex", "in", "lineGroup", "]", ",", "axis", "=", "0", ")", "\n", "mins", "=", "xy", ".", "min", "(", "0", ")", "\n", "maxs", "=", "xy", ".", "max", "(", "0", ")", "\n", "if", "maxs", "[", "0", "]", "-", "mins", "[", "0", "]", ">", "maxs", "[", "1", "]", "-", "mins", "[", "1", "]", ":", "\n", "      ", "lineDim", "=", "0", "\n", "", "else", ":", "\n", "      ", "lineDim", "=", "1", "\n", "pass", "\n", "\n", "", "fixedValue", "=", "0", "\n", "for", "point", "in", "pointGroup", ":", "\n", "      ", "fixedValue", "+=", "points", "[", "point", "]", "[", "1", "-", "lineDim", "]", "\n", "continue", "\n", "", "fixedValue", "/=", "len", "(", "pointGroup", ")", "\n", "\n", "for", "point", "in", "pointGroup", ":", "\n", "      ", "points", "[", "point", "]", "[", "1", "-", "lineDim", "]", "=", "fixedValue", "\n", "continue", "\n", "", "continue", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.IP.mergePoints": [[553, 619], ["enumerate", "enumerate", "enumerate", "enumerate", "pointDistance", "list", "tuple", "enumerate", "len", "set", "enumerate", "abs", "abs", "tuple.remove", "tuple.remove", "tuple.remove", "tuple.remove", "enumerate", "enumerate", "len", "len", "tuple", "tuple", "set", "set", "set", "set"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.pointDistance"], ["", "def", "mergePoints", "(", "points", ",", "lines", ")", ":", "\n", "  ", "validPointMask", "=", "{", "}", "\n", "for", "line", "in", "lines", ":", "\n", "    ", "validPointMask", "[", "line", "[", "0", "]", "]", "=", "True", "\n", "validPointMask", "[", "line", "[", "1", "]", "]", "=", "True", "\n", "continue", "\n", "\n", "", "orientationMap", "=", "{", "}", "\n", "for", "pointType", ",", "orientationOrientations", "in", "enumerate", "(", "POINT_ORIENTATIONS", ")", ":", "\n", "    ", "for", "orientation", ",", "orientations", "in", "enumerate", "(", "orientationOrientations", ")", ":", "\n", "      ", "orientationMap", "[", "orientations", "]", "=", "(", "pointType", ",", "orientation", ")", "\n", "continue", "\n", "", "continue", "\n", "\n", "", "for", "pointIndex_1", ",", "point_1", "in", "enumerate", "(", "points", ")", ":", "\n", "    ", "if", "pointIndex_1", "not", "in", "validPointMask", ":", "\n", "      ", "continue", "\n", "", "for", "pointIndex_2", ",", "point_2", "in", "enumerate", "(", "points", ")", ":", "\n", "      ", "if", "pointIndex_2", "<=", "pointIndex_1", ":", "\n", "        ", "continue", "\n", "", "if", "pointIndex_2", "not", "in", "validPointMask", ":", "\n", "        ", "continue", "\n", "", "if", "pointDistance", "(", "point_1", "[", ":", "2", "]", ",", "point_2", "[", ":", "2", "]", ")", "<=", "DISTANCES", "[", "'point'", "]", ":", "\n", "        ", "orientations", "=", "list", "(", "POINT_ORIENTATIONS", "[", "point_1", "[", "2", "]", "]", "[", "point_1", "[", "3", "]", "]", "+", "POINT_ORIENTATIONS", "[", "point_2", "[", "2", "]", "]", "[", "point_2", "[", "3", "]", "]", ")", "\n", "if", "len", "(", "[", "line", "for", "line", "in", "lines", "if", "pointIndex_1", "in", "line", "and", "pointIndex_2", "in", "line", "]", ")", ">", "0", ":", "\n", "          ", "if", "abs", "(", "point_1", "[", "0", "]", "-", "point_2", "[", "0", "]", ")", ">", "abs", "(", "point_1", "[", "1", "]", "-", "point_2", "[", "1", "]", ")", ":", "\n", "            ", "orientations", ".", "remove", "(", "1", ")", "\n", "orientations", ".", "remove", "(", "3", ")", "\n", "", "else", ":", "\n", "            ", "orientations", ".", "remove", "(", "0", ")", "\n", "orientations", ".", "remove", "(", "2", ")", "\n", "pass", "\n", "", "pass", "\n", "", "orientations", "=", "tuple", "(", "set", "(", "orientations", ")", ")", "\n", "if", "orientations", "not", "in", "orientationMap", ":", "\n", "          ", "for", "lineIndex", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "if", "pointIndex_1", "in", "line", "and", "pointIndex_2", "in", "line", ":", "\n", "              ", "lines", "[", "lineIndex", "]", "=", "(", "-", "1", ",", "-", "1", ")", "\n", "pass", "\n", "", "continue", "\n", "\n", "", "lineIndices_1", "=", "[", "(", "lineIndex", ",", "tuple", "(", "set", "(", "line", ")", "-", "set", "(", "(", "pointIndex_1", ",", ")", ")", ")", "[", "0", "]", ")", "for", "lineIndex", ",", "line", "in", "enumerate", "(", "lines", ")", "if", "pointIndex_1", "in", "line", "and", "pointIndex_2", "not", "in", "line", "]", "\n", "lineIndices_2", "=", "[", "(", "lineIndex", ",", "tuple", "(", "set", "(", "line", ")", "-", "set", "(", "(", "pointIndex_2", ",", ")", ")", ")", "[", "0", "]", ")", "for", "lineIndex", ",", "line", "in", "enumerate", "(", "lines", ")", "if", "pointIndex_2", "in", "line", "and", "pointIndex_1", "not", "in", "line", "]", "\n", "if", "len", "(", "lineIndices_1", ")", "==", "1", "and", "len", "(", "lineIndices_2", ")", "==", "1", ":", "\n", "            ", "lineIndex_1", ",", "index_1", "=", "lineIndices_1", "[", "0", "]", "\n", "lineIndex_2", ",", "index_2", "=", "lineIndices_2", "[", "0", "]", "\n", "lines", "[", "lineIndex_1", "]", "=", "(", "index_1", ",", "index_2", ")", "\n", "lines", "[", "lineIndex_2", "]", "=", "(", "-", "1", ",", "-", "1", ")", "\n", "pass", "\n", "", "continue", "\n", "\n", "", "pointInfo", "=", "orientationMap", "[", "orientations", "]", "\n", "newPoint", "=", "[", "(", "point_1", "[", "0", "]", "+", "point_2", "[", "0", "]", ")", "//", "2", ",", "(", "point_1", "[", "1", "]", "+", "point_2", "[", "1", "]", ")", "//", "2", ",", "pointInfo", "[", "0", "]", ",", "pointInfo", "[", "1", "]", "]", "\n", "points", "[", "pointIndex_1", "]", "=", "newPoint", "\n", "for", "lineIndex", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "          ", "if", "pointIndex_2", "==", "line", "[", "0", "]", ":", "\n", "            ", "lines", "[", "lineIndex", "]", "=", "(", "pointIndex_1", ",", "line", "[", "1", "]", ")", "\n", "pass", "\n", "", "if", "pointIndex_2", "==", "line", "[", "1", "]", ":", "\n", "            ", "lines", "[", "lineIndex", "]", "=", "(", "line", "[", "0", "]", ",", "pointIndex_1", ")", "\n", "pass", "\n", "", "continue", "\n", "", "pass", "\n", "", "continue", "\n", "", "continue", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.IP.adjustDoorPoints": [[621, 632], ["enumerate", "calcLineDim", "range"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim"], ["", "def", "adjustDoorPoints", "(", "doorPoints", ",", "doorLines", ",", "wallPoints", ",", "wallLines", ",", "doorWallMap", ")", ":", "\n", "  ", "for", "doorLineIndex", ",", "doorLine", "in", "enumerate", "(", "doorLines", ")", ":", "\n", "    ", "lineDim", "=", "calcLineDim", "(", "doorPoints", ",", "doorLine", ")", "\n", "wallLine", "=", "wallLines", "[", "doorWallMap", "[", "doorLineIndex", "]", "]", "\n", "wallPoint_1", "=", "wallPoints", "[", "wallLine", "[", "0", "]", "]", "\n", "wallPoint_2", "=", "wallPoints", "[", "wallLine", "[", "1", "]", "]", "\n", "fixedValue", "=", "(", "wallPoint_1", "[", "1", "-", "lineDim", "]", "+", "wallPoint_2", "[", "1", "-", "lineDim", "]", ")", "//", "2", "\n", "for", "endPointIndex", "in", "range", "(", "2", ")", ":", "\n", "      ", "doorPoints", "[", "doorLine", "[", "endPointIndex", "]", "]", "[", "1", "-", "lineDim", "]", "=", "fixedValue", "\n", "continue", "\n", "", "continue", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.IP.findIconsFromLines": [[634, 698], ["pointOrientationNeighborsMap.items", "calcLineDim", "enumerate", "[].append", "int", "int", "int", "int", "icons.append"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim"], ["", "", "def", "findIconsFromLines", "(", "iconPoints", ",", "iconLines", ")", ":", "\n", "  ", "icons", "=", "[", "]", "\n", "pointOrientationNeighborsMap", "=", "{", "}", "\n", "for", "line", "in", "iconLines", ":", "\n", "    ", "lineDim", "=", "calcLineDim", "(", "iconPoints", ",", "line", ")", "\n", "for", "c", ",", "pointIndex", "in", "enumerate", "(", "line", ")", ":", "\n", "      ", "if", "lineDim", "==", "0", ":", "\n", "        ", "if", "c", "==", "0", ":", "\n", "          ", "orientation", "=", "1", "\n", "", "else", ":", "\n", "          ", "orientation", "=", "3", "\n", "", "", "else", ":", "\n", "        ", "if", "c", "==", "0", ":", "\n", "          ", "orientation", "=", "2", "\n", "", "else", ":", "\n", "          ", "orientation", "=", "0", "\n", "pass", "\n", "", "pass", "\n", "\n", "", "if", "pointIndex", "not", "in", "pointOrientationNeighborsMap", ":", "\n", "        ", "pointOrientationNeighborsMap", "[", "pointIndex", "]", "=", "{", "}", "\n", "pass", "\n", "", "if", "orientation", "not", "in", "pointOrientationNeighborsMap", "[", "pointIndex", "]", ":", "\n", "        ", "pointOrientationNeighborsMap", "[", "pointIndex", "]", "[", "orientation", "]", "=", "[", "]", "\n", "pass", "\n", "", "pointOrientationNeighborsMap", "[", "pointIndex", "]", "[", "orientation", "]", ".", "append", "(", "line", "[", "1", "-", "c", "]", ")", "\n", "continue", "\n", "", "continue", "\n", "\n", "", "for", "pointIndex", ",", "orientationNeighborMap", "in", "pointOrientationNeighborsMap", ".", "items", "(", ")", ":", "\n", "    ", "if", "1", "not", "in", "orientationNeighborMap", "or", "2", "not", "in", "orientationNeighborMap", ":", "\n", "      ", "continue", "\n", "", "for", "neighborIndex_1", "in", "orientationNeighborMap", "[", "1", "]", ":", "\n", "      ", "if", "2", "not", "in", "pointOrientationNeighborsMap", "[", "neighborIndex_1", "]", ":", "\n", "        ", "continue", "\n", "", "lastCornerCandiates", "=", "pointOrientationNeighborsMap", "[", "neighborIndex_1", "]", "[", "2", "]", "\n", "for", "neighborIndex_2", "in", "orientationNeighborMap", "[", "2", "]", ":", "\n", "        ", "if", "1", "not", "in", "pointOrientationNeighborsMap", "[", "neighborIndex_2", "]", ":", "\n", "          ", "continue", "\n", "", "for", "lastCornerIndex", "in", "pointOrientationNeighborsMap", "[", "neighborIndex_2", "]", "[", "1", "]", ":", "\n", "          ", "if", "lastCornerIndex", "not", "in", "lastCornerCandiates", ":", "\n", "            ", "continue", "\n", "\n", "", "point_1", "=", "iconPoints", "[", "pointIndex", "]", "\n", "point_2", "=", "iconPoints", "[", "neighborIndex_1", "]", "\n", "point_3", "=", "iconPoints", "[", "neighborIndex_2", "]", "\n", "point_4", "=", "iconPoints", "[", "lastCornerIndex", "]", "\n", "\n", "x_1", "=", "int", "(", "(", "point_1", "[", "0", "]", "+", "point_3", "[", "0", "]", ")", "//", "2", ")", "\n", "x_2", "=", "int", "(", "(", "point_2", "[", "0", "]", "+", "point_4", "[", "0", "]", ")", "//", "2", ")", "\n", "y_1", "=", "int", "(", "(", "point_1", "[", "1", "]", "+", "point_2", "[", "1", "]", ")", "//", "2", ")", "\n", "y_2", "=", "int", "(", "(", "point_3", "[", "1", "]", "+", "point_4", "[", "1", "]", ")", "//", "2", ")", "\n", "\n", "#if x_2 <= x_1 or y_2 <= y_1:", "\n", "#continue", "\n", "if", "(", "x_2", "-", "x_1", "+", "1", ")", "*", "(", "y_2", "-", "y_1", "+", "1", ")", "<=", "LENGTH_THRESHOLDS", "[", "'icon'", "]", "*", "LENGTH_THRESHOLDS", "[", "'icon'", "]", ":", "\n", "            ", "continue", "\n", "\n", "", "icons", ".", "append", "(", "(", "pointIndex", ",", "neighborIndex_1", ",", "neighborIndex_2", ",", "lastCornerIndex", ")", ")", "\n", "continue", "\n", "", "continue", "\n", "", "continue", "\n", "", "continue", "\n", "", "return", "icons", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.IP.findLineNeighbors": [[701, 780], ["enumerate", "enumerate", "calcLineDim", "enumerate", "enumerate", "enumerate", "range", "calcLineDim", "max", "min", "int", "int", "int", "int", "calcLineDim", "neighbors[].items", "neighbors.items", "len", "abs", "neighbors[].items", "[].pop", "[].pop"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim"], ["", "def", "findLineNeighbors", "(", "points", ",", "lines", ",", "labelVotesMap", ",", "gap", ")", ":", "\n", "  ", "lineNeighbors", "=", "[", "[", "{", "}", ",", "{", "}", "]", "for", "lineIndex", "in", "range", "(", "len", "(", "lines", ")", ")", "]", "\n", "for", "lineIndex", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "    ", "lineDim", "=", "calcLineDim", "(", "points", ",", "line", ")", "\n", "for", "neighborLineIndex", ",", "neighborLine", "in", "enumerate", "(", "lines", ")", ":", "\n", "      ", "if", "neighborLineIndex", "<=", "lineIndex", ":", "\n", "        ", "continue", "\n", "", "neighborLineDim", "=", "calcLineDim", "(", "points", ",", "neighborLine", ")", "\n", "if", "lineDim", "!=", "neighborLineDim", ":", "\n", "        ", "continue", "\n", "\n", "", "minValue", "=", "max", "(", "points", "[", "line", "[", "0", "]", "]", "[", "lineDim", "]", ",", "points", "[", "neighborLine", "[", "0", "]", "]", "[", "lineDim", "]", ")", "\n", "maxValue", "=", "min", "(", "points", "[", "line", "[", "1", "]", "]", "[", "lineDim", "]", ",", "points", "[", "neighborLine", "[", "1", "]", "]", "[", "lineDim", "]", ")", "\n", "if", "maxValue", "-", "minValue", "<", "gap", ":", "\n", "        ", "continue", "\n", "", "fixedValue_1", "=", "points", "[", "line", "[", "0", "]", "]", "[", "1", "-", "lineDim", "]", "\n", "fixedValue_2", "=", "points", "[", "neighborLine", "[", "0", "]", "]", "[", "1", "-", "lineDim", "]", "\n", "\n", "minValue", "=", "int", "(", "minValue", ")", "\n", "maxValue", "=", "int", "(", "maxValue", ")", "\n", "fixedValue_1", "=", "int", "(", "fixedValue_1", ")", "\n", "fixedValue_2", "=", "int", "(", "fixedValue_2", ")", "\n", "\n", "if", "abs", "(", "fixedValue_2", "-", "fixedValue_1", ")", "<", "gap", ":", "\n", "        ", "continue", "\n", "", "if", "lineDim", "==", "0", ":", "\n", "        ", "if", "fixedValue_1", "<", "fixedValue_2", ":", "\n", "          ", "region", "=", "(", "(", "minValue", ",", "fixedValue_1", ")", ",", "(", "maxValue", ",", "fixedValue_2", ")", ")", "\n", "lineNeighbors", "[", "lineIndex", "]", "[", "1", "]", "[", "neighborLineIndex", "]", "=", "region", "\n", "lineNeighbors", "[", "neighborLineIndex", "]", "[", "0", "]", "[", "lineIndex", "]", "=", "region", "\n", "", "else", ":", "\n", "          ", "region", "=", "(", "(", "minValue", ",", "fixedValue_2", ")", ",", "(", "maxValue", ",", "fixedValue_1", ")", ")", "\n", "lineNeighbors", "[", "lineIndex", "]", "[", "0", "]", "[", "neighborLineIndex", "]", "=", "region", "\n", "lineNeighbors", "[", "neighborLineIndex", "]", "[", "1", "]", "[", "lineIndex", "]", "=", "region", "\n", "", "", "else", ":", "\n", "        ", "if", "fixedValue_1", "<", "fixedValue_2", ":", "\n", "          ", "region", "=", "(", "(", "fixedValue_1", ",", "minValue", ")", ",", "(", "fixedValue_2", ",", "maxValue", ")", ")", "\n", "lineNeighbors", "[", "lineIndex", "]", "[", "0", "]", "[", "neighborLineIndex", "]", "=", "region", "\n", "lineNeighbors", "[", "neighborLineIndex", "]", "[", "1", "]", "[", "lineIndex", "]", "=", "region", "\n", "", "else", ":", "\n", "          ", "region", "=", "(", "(", "fixedValue_2", ",", "minValue", ")", ",", "(", "fixedValue_1", ",", "maxValue", ")", ")", "\n", "lineNeighbors", "[", "lineIndex", "]", "[", "1", "]", "[", "neighborLineIndex", "]", "=", "region", "\n", "lineNeighbors", "[", "neighborLineIndex", "]", "[", "0", "]", "[", "lineIndex", "]", "=", "region", "\n", "pass", "\n", "", "pass", "\n", "", "continue", "\n", "", "continue", "\n", "\n", "# remove neighbor pairs which are separated by another line", "\n", "", "while", "True", ":", "\n", "    ", "hasChange", "=", "False", "\n", "for", "lineIndex", ",", "neighbors", "in", "enumerate", "(", "lineNeighbors", ")", ":", "\n", "      ", "lineDim", "=", "calcLineDim", "(", "points", ",", "lines", "[", "lineIndex", "]", ")", "\n", "for", "neighbor_1", ",", "region_1", "in", "neighbors", "[", "1", "]", ".", "items", "(", ")", ":", "\n", "        ", "for", "neighbor_2", ",", "_", "in", "neighbors", "[", "0", "]", ".", "items", "(", ")", ":", "\n", "          ", "if", "neighbor_2", "not", "in", "lineNeighbors", "[", "neighbor_1", "]", "[", "0", "]", ":", "\n", "            ", "continue", "\n", "", "region_2", "=", "lineNeighbors", "[", "neighbor_1", "]", "[", "0", "]", "[", "neighbor_2", "]", "\n", "if", "region_1", "[", "0", "]", "[", "lineDim", "]", "<", "region_2", "[", "0", "]", "[", "lineDim", "]", "+", "gap", "and", "region_1", "[", "1", "]", "[", "lineDim", "]", ">", "region_2", "[", "1", "]", "[", "lineDim", "]", "-", "gap", ":", "\n", "            ", "lineNeighbors", "[", "neighbor_1", "]", "[", "0", "]", ".", "pop", "(", "neighbor_2", ")", "\n", "lineNeighbors", "[", "neighbor_2", "]", "[", "1", "]", ".", "pop", "(", "neighbor_1", ")", "\n", "hasChange", "=", "True", "\n", "pass", "\n", "", "continue", "\n", "", "continue", "\n", "", "continue", "\n", "", "if", "not", "hasChange", ":", "\n", "      ", "break", "\n", "\n", "\n", "", "", "for", "lineIndex", ",", "directionNeighbors", "in", "enumerate", "(", "lineNeighbors", ")", ":", "\n", "    ", "for", "direction", ",", "neighbors", "in", "enumerate", "(", "directionNeighbors", ")", ":", "\n", "      ", "for", "neighbor", ",", "region", "in", "neighbors", ".", "items", "(", ")", ":", "\n", "        ", "labelVotes", "=", "labelVotesMap", "[", ":", ",", "region", "[", "1", "]", "[", "1", "]", ",", "region", "[", "1", "]", "[", "0", "]", "]", "+", "labelVotesMap", "[", ":", ",", "region", "[", "0", "]", "[", "1", "]", ",", "region", "[", "0", "]", "[", "0", "]", "]", "-", "labelVotesMap", "[", ":", ",", "region", "[", "0", "]", "[", "1", "]", ",", "region", "[", "1", "]", "[", "0", "]", "]", "-", "labelVotesMap", "[", ":", ",", "region", "[", "1", "]", "[", "1", "]", ",", "region", "[", "0", "]", "[", "0", "]", "]", "\n", "neighbors", "[", "neighbor", "]", "=", "labelVotes", "\n", "continue", "\n", "", "continue", "\n", "", "continue", "\n", "", "return", "lineNeighbors", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.IP.findRectangleLineNeighbors": [[783, 841], ["enumerate", "enumerate", "range", "calcLineDim", "max", "min", "minDistanceLineNeighbors.items", "len", "len"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim"], ["", "def", "findRectangleLineNeighbors", "(", "rectanglePoints", ",", "rectangles", ",", "linePoints", ",", "lines", ",", "lineNeighbors", ",", "gap", ",", "distanceThreshold", ")", ":", "\n", "  ", "rectangleLineNeighbors", "=", "[", "{", "}", "for", "rectangleIndex", "in", "range", "(", "len", "(", "rectangles", ")", ")", "]", "\n", "minDistanceLineNeighbors", "=", "{", "}", "\n", "for", "rectangleIndex", ",", "rectangle", "in", "enumerate", "(", "rectangles", ")", ":", "\n", "    ", "for", "lineIndex", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "      ", "lineDim", "=", "calcLineDim", "(", "linePoints", ",", "line", ")", "\n", "\n", "minValue", "=", "max", "(", "rectanglePoints", "[", "rectangle", "[", "0", "]", "]", "[", "lineDim", "]", ",", "rectanglePoints", "[", "rectangle", "[", "2", "-", "lineDim", "]", "]", "[", "lineDim", "]", ",", "linePoints", "[", "line", "[", "0", "]", "]", "[", "lineDim", "]", ")", "\n", "maxValue", "=", "min", "(", "rectanglePoints", "[", "rectangle", "[", "1", "+", "lineDim", "]", "]", "[", "lineDim", "]", ",", "rectanglePoints", "[", "rectangle", "[", "3", "]", "]", "[", "lineDim", "]", ",", "linePoints", "[", "line", "[", "1", "]", "]", "[", "lineDim", "]", ")", "\n", "\n", "if", "maxValue", "-", "minValue", "<", "gap", ":", "\n", "        ", "continue", "\n", "\n", "", "rectangleFixedValue_1", "=", "(", "rectanglePoints", "[", "rectangle", "[", "0", "]", "]", "[", "1", "-", "lineDim", "]", "+", "rectanglePoints", "[", "rectangle", "[", "1", "+", "lineDim", "]", "]", "[", "1", "-", "lineDim", "]", ")", "//", "2", "\n", "rectangleFixedValue_2", "=", "(", "rectanglePoints", "[", "rectangle", "[", "2", "-", "lineDim", "]", "]", "[", "1", "-", "lineDim", "]", "+", "rectanglePoints", "[", "rectangle", "[", "3", "]", "]", "[", "1", "-", "lineDim", "]", ")", "//", "2", "\n", "lineFixedValue", "=", "(", "linePoints", "[", "line", "[", "0", "]", "]", "[", "1", "-", "lineDim", "]", "+", "linePoints", "[", "line", "[", "1", "]", "]", "[", "1", "-", "lineDim", "]", ")", "//", "2", "\n", "\n", "if", "lineFixedValue", "<", "rectangleFixedValue_2", "-", "gap", "and", "lineFixedValue", ">", "rectangleFixedValue_1", "+", "gap", ":", "\n", "        ", "continue", "\n", "\n", "", "if", "lineFixedValue", "<=", "rectangleFixedValue_1", "+", "gap", ":", "\n", "        ", "index", "=", "lineDim", "*", "2", "+", "0", "\n", "distance", "=", "rectangleFixedValue_1", "-", "lineFixedValue", "\n", "if", "index", "not", "in", "minDistanceLineNeighbors", "or", "distance", "<", "minDistanceLineNeighbors", "[", "index", "]", "[", "1", "]", ":", "\n", "          ", "minDistanceLineNeighbors", "[", "index", "]", "=", "(", "lineIndex", ",", "distance", ",", "1", "-", "lineDim", ")", "\n", "", "", "else", ":", "\n", "        ", "index", "=", "lineDim", "*", "2", "+", "1", "\n", "distance", "=", "lineFixedValue", "-", "rectangleFixedValue_2", "\n", "if", "index", "not", "in", "minDistanceLineNeighbors", "or", "distance", "<", "minDistanceLineNeighbors", "[", "index", "]", "[", "1", "]", ":", "\n", "          ", "minDistanceLineNeighbors", "[", "index", "]", "=", "(", "lineIndex", ",", "distance", ",", "lineDim", ")", "\n", "\n", "", "", "if", "lineFixedValue", "<", "rectangleFixedValue_1", "-", "distanceThreshold", "or", "lineFixedValue", ">", "rectangleFixedValue_2", "+", "distanceThreshold", ":", "\n", "        ", "continue", "\n", "\n", "", "if", "lineFixedValue", "<=", "rectangleFixedValue_1", "+", "gap", ":", "\n", "        ", "if", "lineDim", "==", "0", ":", "\n", "          ", "rectangleLineNeighbors", "[", "rectangleIndex", "]", "[", "lineIndex", "]", "=", "1", "\n", "", "else", ":", "\n", "          ", "rectangleLineNeighbors", "[", "rectangleIndex", "]", "[", "lineIndex", "]", "=", "0", "\n", "pass", "\n", "", "pass", "\n", "", "else", ":", "\n", "        ", "if", "lineDim", "==", "0", ":", "\n", "          ", "rectangleLineNeighbors", "[", "rectangleIndex", "]", "[", "lineIndex", "]", "=", "0", "\n", "", "else", ":", "\n", "          ", "rectangleLineNeighbors", "[", "rectangleIndex", "]", "[", "lineIndex", "]", "=", "1", "\n", "pass", "\n", "", "pass", "\n", "\n", "", "continue", "\n", "", "if", "len", "(", "rectangleLineNeighbors", "[", "rectangleIndex", "]", ")", "==", "0", "or", "True", ":", "\n", "      ", "for", "index", ",", "lineNeighbor", "in", "minDistanceLineNeighbors", ".", "items", "(", ")", ":", "\n", "        ", "rectangleLineNeighbors", "[", "rectangleIndex", "]", "[", "lineNeighbor", "[", "0", "]", "]", "=", "lineNeighbor", "[", "2", "]", "\n", "continue", "\n", "", "pass", "\n", "", "continue", "\n", "\n", "", "return", "rectangleLineNeighbors", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.IP.findLineMap": [[843, 871], ["enumerate", "calcLineDim", "enumerate", "range", "calcLineDim", "max", "min", "len", "abs", "float"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim"], ["", "def", "findLineMap", "(", "points", ",", "lines", ",", "points_2", ",", "lines_2", ",", "gap", ")", ":", "\n", "  ", "lineMap", "=", "[", "{", "}", "for", "lineIndex", "in", "range", "(", "len", "(", "lines", ")", ")", "]", "\n", "for", "lineIndex", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "    ", "lineDim", "=", "calcLineDim", "(", "points", ",", "line", ")", "\n", "for", "neighborLineIndex", ",", "neighborLine", "in", "enumerate", "(", "lines_2", ")", ":", "\n", "      ", "neighborLineDim", "=", "calcLineDim", "(", "points_2", ",", "neighborLine", ")", "\n", "if", "lineDim", "!=", "neighborLineDim", ":", "\n", "        ", "continue", "\n", "\n", "", "minValue", "=", "max", "(", "points", "[", "line", "[", "0", "]", "]", "[", "lineDim", "]", ",", "points_2", "[", "neighborLine", "[", "0", "]", "]", "[", "lineDim", "]", ")", "\n", "maxValue", "=", "min", "(", "points", "[", "line", "[", "1", "]", "]", "[", "lineDim", "]", ",", "points_2", "[", "neighborLine", "[", "1", "]", "]", "[", "lineDim", "]", ")", "\n", "if", "maxValue", "-", "minValue", "<", "gap", ":", "\n", "        ", "continue", "\n", "", "fixedValue_1", "=", "(", "points", "[", "line", "[", "0", "]", "]", "[", "1", "-", "lineDim", "]", "+", "points", "[", "line", "[", "1", "]", "]", "[", "1", "-", "lineDim", "]", ")", "//", "2", "\n", "fixedValue_2", "=", "(", "points_2", "[", "neighborLine", "[", "0", "]", "]", "[", "1", "-", "lineDim", "]", "+", "points_2", "[", "neighborLine", "[", "1", "]", "]", "[", "1", "-", "lineDim", "]", ")", "//", "2", "\n", "\n", "if", "abs", "(", "fixedValue_2", "-", "fixedValue_1", ")", ">", "gap", ":", "\n", "        ", "continue", "\n", "\n", "", "lineMinValue", "=", "points", "[", "line", "[", "0", "]", "]", "[", "lineDim", "]", "\n", "lineMaxValue", "=", "points", "[", "line", "[", "1", "]", "]", "[", "lineDim", "]", "\n", "ratio", "=", "float", "(", "maxValue", "-", "minValue", "+", "1", ")", "/", "(", "lineMaxValue", "-", "lineMinValue", "+", "1", ")", "\n", "\n", "lineMap", "[", "lineIndex", "]", "[", "neighborLineIndex", "]", "=", "ratio", "\n", "continue", "\n", "", "continue", "\n", "\n", "", "return", "lineMap", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.IP.findLineMapSingle": [[874, 906], ["enumerate", "calcLineDim", "max", "enumerate", "lineMap.append", "calcLineDim", "max", "min", "abs"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim"], ["", "def", "findLineMapSingle", "(", "points", ",", "lines", ",", "points_2", ",", "lines_2", ",", "gap", ")", ":", "\n", "  ", "lineMap", "=", "[", "]", "\n", "for", "lineIndex", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "    ", "lineDim", "=", "calcLineDim", "(", "points", ",", "line", ")", "\n", "minDistance", "=", "max", "(", "width", ",", "height", ")", "\n", "minDistanceLineIndex", "=", "-", "1", "\n", "for", "neighborLineIndex", ",", "neighborLine", "in", "enumerate", "(", "lines_2", ")", ":", "\n", "      ", "neighborLineDim", "=", "calcLineDim", "(", "points_2", ",", "neighborLine", ")", "\n", "if", "lineDim", "!=", "neighborLineDim", ":", "\n", "        ", "continue", "\n", "\n", "", "minValue", "=", "max", "(", "points", "[", "line", "[", "0", "]", "]", "[", "lineDim", "]", ",", "points_2", "[", "neighborLine", "[", "0", "]", "]", "[", "lineDim", "]", ")", "\n", "maxValue", "=", "min", "(", "points", "[", "line", "[", "1", "]", "]", "[", "lineDim", "]", ",", "points_2", "[", "neighborLine", "[", "1", "]", "]", "[", "lineDim", "]", ")", "\n", "if", "maxValue", "-", "minValue", "<", "gap", ":", "\n", "        ", "continue", "\n", "", "fixedValue_1", "=", "(", "points", "[", "line", "[", "0", "]", "]", "[", "1", "-", "lineDim", "]", "+", "points", "[", "line", "[", "1", "]", "]", "[", "1", "-", "lineDim", "]", ")", "//", "2", "\n", "fixedValue_2", "=", "(", "points_2", "[", "neighborLine", "[", "0", "]", "]", "[", "1", "-", "lineDim", "]", "+", "points_2", "[", "neighborLine", "[", "1", "]", "]", "[", "1", "-", "lineDim", "]", ")", "//", "2", "\n", "\n", "distance", "=", "abs", "(", "fixedValue_2", "-", "fixedValue_1", ")", "\n", "if", "distance", "<", "minDistance", ":", "\n", "        ", "minDistance", "=", "distance", "\n", "minDistanceLineIndex", "=", "neighborLineIndex", "\n", "pass", "\n", "", "continue", "\n", "\n", "#if abs(fixedValue_2 - fixedValue_1) > gap:", "\n", "#continue", "\n", "#print((lineIndex, minDistance, minDistanceLineIndex))", "\n", "", "lineMap", ".", "append", "(", "minDistanceLineIndex", ")", "\n", "continue", "\n", "\n", "", "return", "lineMap", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.IP.findConflictLinePairs": [[909, 965], ["enumerate", "calcLineDim", "int", "int", "int", "enumerate", "round", "min", "max", "calcLineDim", "int", "int", "int", "round", "min", "max", "conflictLinePairs.append", "conflictLinePairs.append", "conflictLinePairs.append", "min", "conflictLinePairs.append", "abs", "pointDistance", "pointDistance", "pointDistance", "pointDistance"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.pointDistance", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.pointDistance", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.pointDistance", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.pointDistance"], ["", "def", "findConflictLinePairs", "(", "points", ",", "lines", ",", "gap", ",", "distanceThreshold", ",", "considerEndPoints", "=", "False", ")", ":", "\n", "  ", "conflictLinePairs", "=", "[", "]", "\n", "for", "lineIndex_1", ",", "line_1", "in", "enumerate", "(", "lines", ")", ":", "\n", "    ", "lineDim_1", "=", "calcLineDim", "(", "points", ",", "line_1", ")", "\n", "point_1", "=", "points", "[", "line_1", "[", "0", "]", "]", "\n", "point_2", "=", "points", "[", "line_1", "[", "1", "]", "]", "\n", "fixedValue_1", "=", "int", "(", "round", "(", "(", "point_1", "[", "1", "-", "lineDim_1", "]", "+", "point_2", "[", "1", "-", "lineDim_1", "]", ")", "//", "2", ")", ")", "\n", "minValue_1", "=", "int", "(", "min", "(", "point_1", "[", "lineDim_1", "]", ",", "point_2", "[", "lineDim_1", "]", ")", ")", "\n", "maxValue_1", "=", "int", "(", "max", "(", "point_1", "[", "lineDim_1", "]", ",", "point_2", "[", "lineDim_1", "]", ")", ")", "\n", "\n", "for", "lineIndex_2", ",", "line_2", "in", "enumerate", "(", "lines", ")", ":", "\n", "      ", "if", "lineIndex_2", "<=", "lineIndex_1", ":", "\n", "        ", "continue", "\n", "\n", "", "lineDim_2", "=", "calcLineDim", "(", "points", ",", "line_2", ")", "\n", "point_1", "=", "points", "[", "line_2", "[", "0", "]", "]", "\n", "point_2", "=", "points", "[", "line_2", "[", "1", "]", "]", "\n", "\n", "if", "lineDim_2", "==", "lineDim_1", ":", "\n", "        ", "if", "line_1", "[", "0", "]", "==", "line_2", "[", "0", "]", "or", "line_1", "[", "1", "]", "==", "line_2", "[", "1", "]", ":", "\n", "          ", "conflictLinePairs", ".", "append", "(", "(", "lineIndex_1", ",", "lineIndex_2", ")", ")", "\n", "continue", "\n", "", "elif", "line_1", "[", "0", "]", "==", "line_2", "[", "1", "]", "or", "line_1", "[", "1", "]", "==", "line_2", "[", "0", "]", ":", "\n", "          ", "continue", "\n", "", "pass", "\n", "", "else", ":", "\n", "        ", "if", "(", "line_1", "[", "0", "]", "in", "line_2", "or", "line_1", "[", "1", "]", "in", "line_2", ")", ":", "\n", "          ", "continue", "\n", "", "pass", "\n", "\n", "", "if", "considerEndPoints", ":", "\n", "        ", "if", "min", "(", "[", "pointDistance", "(", "points", "[", "line_1", "[", "0", "]", "]", ",", "points", "[", "line_2", "[", "0", "]", "]", ")", ",", "pointDistance", "(", "points", "[", "line_1", "[", "0", "]", "]", ",", "points", "[", "line_2", "[", "1", "]", "]", ")", ",", "pointDistance", "(", "points", "[", "line_1", "[", "1", "]", "]", ",", "points", "[", "line_2", "[", "0", "]", "]", ")", ",", "pointDistance", "(", "points", "[", "line_1", "[", "1", "]", "]", ",", "points", "[", "line_2", "[", "1", "]", "]", ")", "]", ")", "<=", "gap", ":", "\n", "          ", "conflictLinePairs", ".", "append", "(", "(", "lineIndex_1", ",", "lineIndex_2", ")", ")", "\n", "continue", "\n", "", "pass", "\n", "\n", "", "fixedValue_2", "=", "int", "(", "round", "(", "(", "point_1", "[", "1", "-", "lineDim_2", "]", "+", "point_2", "[", "1", "-", "lineDim_2", "]", ")", "//", "2", ")", ")", "\n", "minValue_2", "=", "int", "(", "min", "(", "point_1", "[", "lineDim_2", "]", ",", "point_2", "[", "lineDim_2", "]", ")", ")", "\n", "maxValue_2", "=", "int", "(", "max", "(", "point_1", "[", "lineDim_2", "]", ",", "point_2", "[", "lineDim_2", "]", ")", ")", "\n", "\n", "if", "lineDim_1", "==", "lineDim_2", ":", "\n", "        ", "if", "abs", "(", "fixedValue_2", "-", "fixedValue_1", ")", ">=", "distanceThreshold", "or", "minValue_1", ">", "maxValue_2", "-", "gap", "or", "minValue_2", ">", "maxValue_1", "-", "gap", ":", "\n", "          ", "continue", "\n", "\n", "", "conflictLinePairs", ".", "append", "(", "(", "lineIndex_1", ",", "lineIndex_2", ")", ")", "\n", "#drawLines(output_prefix + 'lines_' + str(lineIndex_1) + \"_\" + str(lineIndex_2) + '.png', width, height, points, [line_1, line_2])", "\n", "", "else", ":", "\n", "        ", "if", "minValue_1", ">", "fixedValue_2", "-", "gap", "or", "maxValue_1", "<", "fixedValue_2", "+", "gap", "or", "minValue_2", ">", "fixedValue_1", "-", "gap", "or", "maxValue_2", "<", "fixedValue_1", "+", "gap", ":", "\n", "          ", "continue", "\n", "\n", "", "conflictLinePairs", ".", "append", "(", "(", "lineIndex_1", ",", "lineIndex_2", ")", ")", "\n", "pass", "\n", "", "continue", "\n", "", "continue", "\n", "\n", "", "return", "conflictLinePairs", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.IP.findConflictRectanglePairs": [[968, 999], ["enumerate", "enumerate", "range", "max", "min", "max", "min", "conflictRectanglePairs.append", "conflictRectanglePairs.append"], "function", ["None"], ["", "def", "findConflictRectanglePairs", "(", "points", ",", "rectangles", ",", "gap", ")", ":", "\n", "  ", "conflictRectanglePairs", "=", "[", "]", "\n", "for", "rectangleIndex_1", ",", "rectangle_1", "in", "enumerate", "(", "rectangles", ")", ":", "\n", "    ", "for", "rectangleIndex_2", ",", "rectangle_2", "in", "enumerate", "(", "rectangles", ")", ":", "\n", "      ", "if", "rectangleIndex_2", "<=", "rectangleIndex_1", ":", "\n", "        ", "continue", "\n", "\n", "", "conflict", "=", "False", "\n", "for", "cornerIndex", "in", "range", "(", "4", ")", ":", "\n", "        ", "if", "rectangle_1", "[", "cornerIndex", "]", "==", "rectangle_2", "[", "cornerIndex", "]", ":", "\n", "          ", "conflictRectanglePairs", ".", "append", "(", "(", "rectangleIndex_1", ",", "rectangleIndex_2", ")", ")", "\n", "conflict", "=", "True", "\n", "break", "\n", "", "continue", "\n", "\n", "", "if", "conflict", ":", "\n", "        ", "continue", "\n", "\n", "", "minX", "=", "max", "(", "(", "points", "[", "rectangle_1", "[", "0", "]", "]", "[", "0", "]", "+", "points", "[", "rectangle_1", "[", "2", "]", "]", "[", "0", "]", ")", "//", "2", ",", "(", "points", "[", "rectangle_2", "[", "0", "]", "]", "[", "0", "]", "+", "points", "[", "rectangle_2", "[", "2", "]", "]", "[", "0", "]", ")", "//", "2", ")", "\n", "maxX", "=", "min", "(", "(", "points", "[", "rectangle_1", "[", "1", "]", "]", "[", "0", "]", "+", "points", "[", "rectangle_1", "[", "3", "]", "]", "[", "0", "]", ")", "//", "2", ",", "(", "points", "[", "rectangle_2", "[", "1", "]", "]", "[", "0", "]", "+", "points", "[", "rectangle_2", "[", "3", "]", "]", "[", "0", "]", ")", "//", "2", ")", "\n", "if", "minX", ">", "maxX", "-", "gap", ":", "\n", "        ", "continue", "\n", "", "minY", "=", "max", "(", "(", "points", "[", "rectangle_1", "[", "0", "]", "]", "[", "1", "]", "+", "points", "[", "rectangle_1", "[", "1", "]", "]", "[", "1", "]", ")", "//", "2", ",", "(", "points", "[", "rectangle_2", "[", "0", "]", "]", "[", "1", "]", "+", "points", "[", "rectangle_2", "[", "1", "]", "]", "[", "1", "]", ")", "//", "2", ")", "\n", "maxY", "=", "min", "(", "(", "points", "[", "rectangle_1", "[", "2", "]", "]", "[", "1", "]", "+", "points", "[", "rectangle_1", "[", "3", "]", "]", "[", "1", "]", ")", "//", "2", ",", "(", "points", "[", "rectangle_2", "[", "2", "]", "]", "[", "1", "]", "+", "points", "[", "rectangle_2", "[", "3", "]", "]", "[", "1", "]", ")", "//", "2", ")", "\n", "if", "minY", ">", "maxY", "-", "gap", ":", "\n", "        ", "continue", "\n", "", "conflictRectanglePairs", ".", "append", "(", "(", "rectangleIndex_1", ",", "rectangleIndex_2", ")", ")", "\n", "continue", "\n", "", "continue", "\n", "\n", "", "return", "conflictRectanglePairs", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.IP.findConflictRectangleLinePairs": [[1002, 1032], ["enumerate", "enumerate", "calcLineDim", "conflictRectangleLinePairs.append", "max", "min", "min", "max", "max", "min", "max", "min", "min", "max", "max", "min"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim"], ["", "def", "findConflictRectangleLinePairs", "(", "rectanglePoints", ",", "rectangles", ",", "linePoints", ",", "lines", ",", "gap", ")", ":", "\n", "  ", "conflictRectangleLinePairs", "=", "[", "]", "\n", "for", "rectangleIndex", ",", "rectangle", "in", "enumerate", "(", "rectangles", ")", ":", "\n", "    ", "for", "lineIndex", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "      ", "lineDim", "=", "calcLineDim", "(", "linePoints", ",", "line", ")", "\n", "if", "lineDim", "==", "0", ":", "\n", "        ", "minX", "=", "max", "(", "rectanglePoints", "[", "rectangle", "[", "0", "]", "]", "[", "0", "]", ",", "rectanglePoints", "[", "rectangle", "[", "2", "]", "]", "[", "0", "]", ",", "linePoints", "[", "line", "[", "0", "]", "]", "[", "0", "]", ")", "\n", "maxX", "=", "min", "(", "rectanglePoints", "[", "rectangle", "[", "1", "]", "]", "[", "0", "]", ",", "rectanglePoints", "[", "rectangle", "[", "3", "]", "]", "[", "0", "]", ",", "linePoints", "[", "line", "[", "1", "]", "]", "[", "0", "]", ")", "\n", "if", "minX", ">", "maxX", "-", "gap", ":", "\n", "          ", "continue", "\n", "", "if", "max", "(", "rectanglePoints", "[", "rectangle", "[", "0", "]", "]", "[", "1", "]", ",", "rectanglePoints", "[", "rectangle", "[", "1", "]", "]", "[", "1", "]", ")", "+", "gap", ">", "min", "(", "linePoints", "[", "line", "[", "0", "]", "]", "[", "1", "]", ",", "linePoints", "[", "line", "[", "1", "]", "]", "[", "1", "]", ")", ":", "\n", "          ", "continue", "\n", "", "if", "min", "(", "rectanglePoints", "[", "rectangle", "[", "2", "]", "]", "[", "1", "]", ",", "rectanglePoints", "[", "rectangle", "[", "3", "]", "]", "[", "1", "]", ")", "-", "gap", "<", "max", "(", "linePoints", "[", "line", "[", "0", "]", "]", "[", "1", "]", ",", "linePoints", "[", "line", "[", "1", "]", "]", "[", "1", "]", ")", ":", "\n", "          ", "continue", "\n", "\n", "", "", "elif", "lineDim", "==", "1", ":", "\n", "        ", "minY", "=", "max", "(", "rectanglePoints", "[", "rectangle", "[", "0", "]", "]", "[", "1", "]", ",", "rectanglePoints", "[", "rectangle", "[", "1", "]", "]", "[", "1", "]", ",", "linePoints", "[", "line", "[", "0", "]", "]", "[", "1", "]", ")", "\n", "maxY", "=", "min", "(", "rectanglePoints", "[", "rectangle", "[", "2", "]", "]", "[", "1", "]", ",", "rectanglePoints", "[", "rectangle", "[", "3", "]", "]", "[", "1", "]", ",", "linePoints", "[", "line", "[", "1", "]", "]", "[", "1", "]", ")", "\n", "if", "minY", ">", "maxY", "-", "gap", ":", "\n", "          ", "continue", "\n", "", "if", "max", "(", "rectanglePoints", "[", "rectangle", "[", "0", "]", "]", "[", "0", "]", ",", "rectanglePoints", "[", "rectangle", "[", "2", "]", "]", "[", "0", "]", ")", "+", "gap", ">", "min", "(", "linePoints", "[", "line", "[", "0", "]", "]", "[", "0", "]", ",", "linePoints", "[", "line", "[", "1", "]", "]", "[", "0", "]", ")", ":", "\n", "          ", "continue", "\n", "", "if", "min", "(", "rectanglePoints", "[", "rectangle", "[", "1", "]", "]", "[", "0", "]", ",", "rectanglePoints", "[", "rectangle", "[", "3", "]", "]", "[", "0", "]", ")", "-", "gap", "<", "max", "(", "linePoints", "[", "line", "[", "0", "]", "]", "[", "0", "]", ",", "linePoints", "[", "line", "[", "1", "]", "]", "[", "0", "]", ")", ":", "\n", "          ", "continue", "\n", "\n", "", "", "conflictRectangleLinePairs", ".", "append", "(", "(", "rectangleIndex", ",", "lineIndex", ")", ")", "\n", "continue", "\n", "", "continue", "\n", "\n", "", "return", "conflictRectangleLinePairs", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.IP.findLinePointMap": [[1034, 1050], ["enumerate", "calcLineDim", "enumerate", "range", "lineMap[].append", "len", "abs"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim"], ["", "def", "findLinePointMap", "(", "points", ",", "lines", ",", "points_2", ",", "gap", ")", ":", "\n", "  ", "lineMap", "=", "[", "[", "]", "for", "lineIndex", "in", "range", "(", "len", "(", "lines", ")", ")", "]", "\n", "for", "lineIndex", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "    ", "lineDim", "=", "calcLineDim", "(", "points", ",", "line", ")", "\n", "fixedValue", "=", "(", "points", "[", "line", "[", "0", "]", "]", "[", "1", "-", "lineDim", "]", "+", "points", "[", "line", "[", "1", "]", "]", "[", "1", "-", "lineDim", "]", ")", "//", "2", "\n", "for", "neighborPointIndex", ",", "neighborPoint", "in", "enumerate", "(", "points_2", ")", ":", "\n", "      ", "if", "neighborPoint", "[", "lineDim", "]", "<", "points", "[", "line", "[", "0", "]", "]", "[", "lineDim", "]", "+", "gap", "or", "neighborPoint", "[", "lineDim", "]", ">", "points", "[", "line", "[", "1", "]", "]", "[", "lineDim", "]", "-", "gap", ":", "\n", "        ", "continue", "\n", "\n", "", "if", "abs", "(", "(", "neighborPoint", "[", "1", "-", "lineDim", "]", "+", "neighborPoint", "[", "1", "-", "lineDim", "]", ")", "//", "2", "-", "fixedValue", ")", ">", "gap", ":", "\n", "        ", "continue", "\n", "\n", "", "lineMap", "[", "lineIndex", "]", ".", "append", "(", "neighborPointIndex", ")", "\n", "continue", "\n", "", "continue", "\n", "", "return", "lineMap", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.IP.findCandidatesFromHeatmaps": [[1052, 1160], ["range", "numpy.ones", "cv2.dilate", "skimage.measure.label", "range", "cv2.erode", "regionMask.nonzero", "cv2.dilate.astype", "measure.label.min", "measure.label.max", "xs.min", "xs.max", "ys.min", "ys.max", "mask.sum", "range", "range", "mask.sum", "range", "range", "newIcons.append", "newDoorLines.append", "newDoorLines.append", "mask.sum", "range", "range", "mask.sum", "range", "range", "newDoorLines.append", "newDoorLines.append"], "function", ["None"], ["", "def", "findCandidatesFromHeatmaps", "(", "iconHeatmaps", ",", "iconPointOffset", ",", "doorPointOffset", ")", ":", "\n", "  ", "newIcons", "=", "[", "]", "\n", "newIconPoints", "=", "[", "]", "\n", "newDoorLines", "=", "[", "]", "\n", "newDoorPoints", "=", "[", "]", "\n", "for", "iconIndex", "in", "range", "(", "1", ",", "NUM_ICONS", "+", "2", ")", ":", "\n", "    ", "heatmap", "=", "iconHeatmaps", "[", ":", ",", ":", ",", "iconIndex", "]", ">", "0.5", "\n", "kernel", "=", "np", ".", "ones", "(", "(", "3", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "heatmap", "=", "cv2", ".", "dilate", "(", "cv2", ".", "erode", "(", "heatmap", ".", "astype", "(", "np", ".", "uint8", ")", ",", "kernel", ")", ",", "kernel", ")", "\n", "regions", "=", "measure", ".", "label", "(", "heatmap", ",", "background", "=", "0", ")", "\n", "for", "regionIndex", "in", "range", "(", "regions", ".", "min", "(", ")", "+", "1", ",", "regions", ".", "max", "(", ")", "+", "1", ")", ":", "\n", "      ", "regionMask", "=", "regions", "==", "regionIndex", "\n", "ys", ",", "xs", "=", "regionMask", ".", "nonzero", "(", ")", "\n", "minX", ",", "maxX", "=", "xs", ".", "min", "(", ")", ",", "xs", ".", "max", "(", ")", "\n", "minY", ",", "maxY", "=", "ys", ".", "min", "(", ")", ",", "ys", ".", "max", "(", ")", "\n", "if", "iconIndex", "<=", "NUM_ICONS", ":", "\n", "        ", "if", "maxX", "-", "minX", "<", "GAPS", "[", "'icon_extraction'", "]", "or", "maxY", "-", "minY", "<", "GAPS", "[", "'icon_extraction'", "]", ":", "\n", "          ", "continue", "\n", "", "mask", "=", "regionMask", "[", "minY", ":", "maxY", "+", "1", ",", "minX", ":", "maxX", "+", "1", "]", "\n", "sizeX", ",", "sizeY", "=", "maxX", "-", "minX", "+", "1", ",", "maxY", "-", "minY", "+", "1", "\n", "sumX", "=", "mask", ".", "sum", "(", "0", ")", "\n", "\n", "for", "x", "in", "range", "(", "sizeX", ")", ":", "\n", "          ", "if", "sumX", "[", "x", "]", "*", "2", ">=", "sizeY", ":", "\n", "            ", "break", "\n", "", "minX", "+=", "1", "\n", "continue", "\n", "\n", "", "for", "x", "in", "range", "(", "sizeX", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "          ", "if", "sumX", "[", "x", "]", "*", "2", ">=", "sizeY", ":", "\n", "            ", "break", "\n", "", "maxX", "-=", "1", "\n", "continue", "\n", "\n", "\n", "", "sumY", "=", "mask", ".", "sum", "(", "1", ")", "\n", "for", "y", "in", "range", "(", "sizeY", ")", ":", "\n", "          ", "if", "sumY", "[", "y", "]", "*", "2", ">=", "sizeX", ":", "\n", "            ", "break", "\n", "", "minY", "+=", "1", "\n", "continue", "\n", "\n", "", "for", "y", "in", "range", "(", "sizeY", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "          ", "if", "sumY", "[", "y", "]", "*", "2", ">=", "sizeX", ":", "\n", "            ", "break", "\n", "", "maxY", "-=", "1", "\n", "continue", "\n", "", "if", "(", "maxY", "-", "minY", "+", "1", ")", "*", "(", "maxX", "-", "minX", "+", "1", ")", "<=", "LENGTH_THRESHOLDS", "[", "'icon'", "]", "*", "LENGTH_THRESHOLDS", "[", "'icon'", "]", "*", "2", ":", "\n", "          ", "continue", "\n", "", "newIconPoints", "+=", "[", "[", "minX", ",", "minY", ",", "1", ",", "2", "]", ",", "[", "maxX", ",", "minY", ",", "1", ",", "3", "]", ",", "[", "minX", ",", "maxY", ",", "1", ",", "1", "]", ",", "[", "maxX", ",", "maxY", ",", "1", ",", "0", "]", "]", "\n", "newIcons", ".", "append", "(", "(", "iconPointOffset", ",", "iconPointOffset", "+", "1", ",", "iconPointOffset", "+", "2", ",", "iconPointOffset", "+", "3", ")", ")", "\n", "iconPointOffset", "+=", "4", "\n", "", "else", ":", "\n", "        ", "sizeX", ",", "sizeY", "=", "maxX", "-", "minX", "+", "1", ",", "maxY", "-", "minY", "+", "1", "\n", "if", "sizeX", ">=", "LENGTH_THRESHOLDS", "[", "'door'", "]", "and", "sizeY", "*", "2", "<=", "sizeX", ":", "\n", "          ", "newDoorPoints", "+=", "[", "[", "minX", ",", "(", "minY", "+", "maxY", ")", "//", "2", ",", "0", ",", "1", "]", ",", "[", "maxX", ",", "(", "minY", "+", "maxY", ")", "//", "2", ",", "0", ",", "3", "]", "]", "\n", "newDoorLines", ".", "append", "(", "(", "doorPointOffset", ",", "doorPointOffset", "+", "1", ")", ")", "\n", "doorPointOffset", "+=", "2", "\n", "", "elif", "sizeY", ">=", "LENGTH_THRESHOLDS", "[", "'door'", "]", "and", "sizeX", "*", "2", "<=", "sizeY", ":", "\n", "          ", "newDoorPoints", "+=", "[", "[", "(", "minX", "+", "maxX", ")", "//", "2", ",", "minY", ",", "0", ",", "2", "]", ",", "[", "(", "minX", "+", "maxX", ")", "//", "2", ",", "maxY", ",", "0", ",", "0", "]", "]", "\n", "newDoorLines", ".", "append", "(", "(", "doorPointOffset", ",", "doorPointOffset", "+", "1", ")", ")", "\n", "doorPointOffset", "+=", "2", "\n", "", "elif", "sizeX", ">=", "LENGTH_THRESHOLDS", "[", "'door'", "]", "and", "sizeY", ">=", "LENGTH_THRESHOLDS", "[", "'door'", "]", ":", "\n", "          ", "mask", "=", "regionMask", "[", "minY", ":", "maxY", "+", "1", ",", "minX", ":", "maxX", "+", "1", "]", "\n", "sumX", "=", "mask", ".", "sum", "(", "0", ")", "\n", "minOffset", ",", "maxOffset", "=", "0", ",", "0", "\n", "for", "x", "in", "range", "(", "sizeX", ")", ":", "\n", "            ", "if", "sumX", "[", "x", "]", "*", "2", ">=", "sizeY", ":", "\n", "              ", "break", "\n", "", "minOffset", "+=", "1", "\n", "continue", "\n", "\n", "", "for", "x", "in", "range", "(", "sizeX", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "            ", "if", "sumX", "[", "x", "]", "*", "2", ">=", "sizeY", ":", "\n", "              ", "break", "\n", "", "maxOffset", "+=", "1", "\n", "continue", "\n", "\n", "", "if", "(", "sizeX", "-", "minOffset", "-", "maxOffset", ")", "*", "2", "<=", "sizeY", "and", "sizeX", "-", "minOffset", "-", "maxOffset", ">", "0", ":", "\n", "            ", "newDoorPoints", "+=", "[", "[", "(", "minX", "+", "minOffset", "+", "maxX", "-", "maxOffset", ")", "//", "2", ",", "minY", ",", "0", ",", "2", "]", ",", "[", "(", "minX", "+", "minOffset", "+", "maxX", "-", "maxOffset", ")", "//", "2", ",", "maxY", ",", "0", ",", "0", "]", "]", "\n", "newDoorLines", ".", "append", "(", "(", "doorPointOffset", ",", "doorPointOffset", "+", "1", ")", ")", "\n", "doorPointOffset", "+=", "2", "\n", "pass", "\n", "\n", "", "sumY", "=", "mask", ".", "sum", "(", "1", ")", "\n", "minOffset", ",", "maxOffset", "=", "0", ",", "0", "\n", "for", "y", "in", "range", "(", "sizeY", ")", ":", "\n", "            ", "if", "sumY", "[", "y", "]", "*", "2", ">=", "sizeX", ":", "\n", "              ", "break", "\n", "", "minOffset", "+=", "1", "\n", "continue", "\n", "\n", "", "for", "y", "in", "range", "(", "sizeY", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "            ", "if", "sumY", "[", "y", "]", "*", "2", ">=", "sizeX", ":", "\n", "              ", "break", "\n", "", "maxOffset", "+=", "1", "\n", "continue", "\n", "\n", "", "if", "(", "sizeY", "-", "minOffset", "-", "maxOffset", ")", "*", "2", "<=", "sizeX", "and", "sizeY", "-", "minOffset", "-", "maxOffset", ">", "0", ":", "\n", "            ", "newDoorPoints", "+=", "[", "[", "minX", ",", "(", "minY", "+", "minOffset", "+", "maxY", "-", "maxOffset", ")", "//", "2", ",", "0", ",", "1", "]", ",", "[", "maxX", ",", "(", "minY", "+", "minOffset", "+", "maxY", "-", "maxOffset", ")", "//", "2", ",", "0", ",", "3", "]", "]", "\n", "newDoorLines", ".", "append", "(", "(", "doorPointOffset", ",", "doorPointOffset", "+", "1", ")", ")", "\n", "doorPointOffset", "+=", "2", "\n", "pass", "\n", "", "pass", "\n", "", "pass", "\n", "", "continue", "\n", "", "continue", "\n", "", "return", "newIcons", ",", "newIconPoints", ",", "newDoorLines", ",", "newDoorPoints", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.IP.sortLines": [[1162, 1169], ["enumerate", "calcLineDim"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim"], ["", "def", "sortLines", "(", "points", ",", "lines", ")", ":", "\n", "  ", "for", "lineIndex", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "    ", "lineDim", "=", "calcLineDim", "(", "points", ",", "line", ")", "\n", "if", "points", "[", "line", "[", "0", "]", "]", "[", "lineDim", "]", ">", "points", "[", "line", "[", "1", "]", "]", "[", "lineDim", "]", ":", "\n", "      ", "lines", "[", "lineIndex", "]", "=", "(", "line", "[", "1", "]", ",", "line", "[", "0", "]", ")", "\n", "pass", "\n", "", "continue", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.IP.reconstructFloorplan": [[1171, 1896], ["print", "IP.extractCorners", "IP.extractCorners", "IP.extractCorners", "IP.sortLines", "IP.sortLines", "print", "print", "drawPoints", "drawPointsSeparately", "drawLines", "drawLineMask", "numpy.zeros", "range", "numpy.cumsum", "IP.findIconsFromLines", "IP.findLineMap", "enumerate", "IP.findConflictLinePairs", "IP.findConflictLinePairs", "IP.findConflictRectanglePairs", "IP.findLineNeighbors", "IP.findRectangleLineNeighbors", "IP.findConflictRectangleLinePairs", "enumerate", "enumerate", "IP.filterWalls", "len", "len", "len", "len", "len", "len", "os.path.join", "os.path.join", "os.path.join", "numpy.cumsum", "IP.findCandidatesFromHeatmaps", "drawLines", "drawLines", "drawRectangles", "print", "print", "print", "print", "os.system", "enumerate", "exit", "print", "exit", "enumerate", "drawLines", "enumerate", "drawLines", "exit", "LpProblem", "range", "range", "LpAffineExpression", "range", "range", "range", "LpAffineExpression", "range", "enumerate", "enumerate", "pointIconsMap.items", "enumerate", "enumerate", "enumerate", "range", "enumerate", "enumerate", "enumerate", "enumerate", "enumerate", "enumerate", "IP.findLinePointMap", "enumerate", "LpProblem.solve", "print", "len", "len", "os.path.join", "os.path.join", "os.path.join", "len", "newDoorLines.append", "newDoorWallLineMap.append", "drawLines", "print", "print", "print", "print", "os.path.join", "os.path.join", "LpVariable", "LpVariable", "LpVariable", "LpVariable", "len", "i_types.append", "len", "range", "l_dir_labels.append", "range", "enumerate", "pointIconMap.items", "len", "range", "range", "enumerate", "len", "enumerate", "range", "LpAffineExpression", "numpy.array", "numpy.array", "calcLineDim", "int", "numpy.maximum().astype", "numpy.minimum().astype", "wallConfidences.append", "enumerate", "numpy.array", "numpy.array", "calcLineDim", "int", "numpy.maximum().astype", "numpy.minimum().astype", "int", "int", "int", "int", "range", "len", "LpAffineExpression", "range", "orientationLinesMap.items", "LpAffineExpression", "LpAffineExpression", "value", "enumerate", "drawLines", "enumerate", "IP.findLineMapSingle", "IP.adjustDoorPoints", "drawLines", "enumerate", "drawRectangles", "enumerate", "enumerate", "print", "str", "str", "str", "os.path.join", "len", "len", "print", "filteredWallLines.append", "print", "filteredWallLines.append", "range", "range", "range", "range", "range", "dir_labels.append", "len", "LpAffineExpression", "LpAffineExpression", "range", "len", "orientationLinesMap.items", "numpy.zeros", "neighbors.items", "np.zeros.sum", "range", "pointIconsMap[].append", "round", "min", "max", "round", "min", "max", "print", "print", "print", "exit", "iconHeatmaps[].sum", "LpAffineExpression", "len", "len", "filteredWallLines.append", "filteredWallTypes.append", "range", "filteredWallLabels.append", "print", "calcLineDim", "IP.adjustPoints", "IP.mergePoints", "IP.adjustPoints", "print", "filteredDoorLines.append", "filteredDoorTypes.append", "filteredIcons.append", "range", "print", "filteredIconTypes.append", "enumerate", "wallPointOrientationLinesMap[].items", "filteredWallPoints.append", "filteredWallPointLabels.append", "open", "result_file.write", "result_file.write", "enumerate", "enumerate", "enumerate", "result_file.close", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "LpVariable", "labels.append", "pointIconMap[].append", "int", "LpAffineExpression", "range", "str", "numpy.maximum", "numpy.minimum", "numpy.sum", "numpy.maximum", "numpy.minimum", "numpy.sum", "str", "str", "str", "str", "str", "range", "range", "[].keys", "[].keys", "len", "len", "len", "print", "print", "tuple", "print", "exit", "result_file.write", "result_file.write", "result_file.write", "result_file.write", "result_file.write", "result_file.write", "result_file.write", "int", "int", "int", "int", "result_file.write", "result_file.write", "result_file.write", "result_file.write", "result_file.write", "str", "str", "str", "str", "range", "LpVariable", "str", "str", "int", "LpAffineExpression", "str", "str", "str", "len", "numpy.array().astype().tolist", "range", "len", "str", "str", "len", "tuple.append", "str", "len", "str", "str", "str", "str", "str", "numpy.array().astype", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "int", "int", "numpy.array", "str", "int", "int", "round", "round", "int", "int", "int", "int", "round", "round", "str", "round", "round", "round", "round"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.extractCorners", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.extractCorners", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.extractCorners", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.sortLines", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.sortLines", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawPoints", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawPointsSeparately", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawLines", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawLineMask", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.findIconsFromLines", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.findLineMap", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.findConflictLinePairs", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.findConflictLinePairs", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.findConflictRectanglePairs", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.findLineNeighbors", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.findRectangleLineNeighbors", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.findConflictRectangleLinePairs", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.filterWalls", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.findCandidatesFromHeatmaps", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawLines", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawLines", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawRectangles", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawLines", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawLines", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.findLinePointMap", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawLines", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawLines", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.findLineMapSingle", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.adjustDoorPoints", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawLines", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawRectangles", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.adjustPoints", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.mergePoints", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.adjustPoints"], ["", "", "def", "reconstructFloorplan", "(", "wallCornerHeatmaps", ",", "doorCornerHeatmaps", ",", "iconCornerHeatmaps", ",", "iconHeatmaps", ",", "roomHeatmaps", ",", "output_prefix", "=", "'test/'", ",", "densityImage", "=", "None", ",", "gt_dict", "=", "None", ",", "gt", "=", "False", ",", "gap", "=", "-", "1", ",", "distanceThreshold", "=", "-", "1", ",", "lengthThreshold", "=", "-", "1", ",", "debug_prefix", "=", "'test'", ",", "heatmapValueThresholdWall", "=", "None", ",", "heatmapValueThresholdDoor", "=", "None", ",", "heatmapValueThresholdIcon", "=", "None", ",", "enableAugmentation", "=", "False", ")", ":", "\n", "  ", "print", "(", "'reconstruct'", ")", "\n", "\n", "wallPoints", "=", "[", "]", "\n", "iconPoints", "=", "[", "]", "\n", "doorPoints", "=", "[", "]", "\n", "\n", "numWallPoints", "=", "100", "\n", "numDoorPoints", "=", "100", "\n", "numIconPoints", "=", "100", "\n", "if", "heatmapValueThresholdWall", "is", "None", ":", "\n", "    ", "heatmapValueThresholdWall", "=", "0.5", "\n", "pass", "\n", "", "heatmapValueThresholdDoor", "=", "0.5", "\n", "heatmapValueThresholdIcon", "=", "0.5", "\n", "\n", "if", "gap", ">", "0", ":", "\n", "    ", "for", "k", "in", "GAPS", ":", "\n", "      ", "GAPS", "[", "k", "]", "=", "gap", "\n", "continue", "\n", "", "pass", "\n", "", "if", "distanceThreshold", ">", "0", ":", "\n", "    ", "for", "k", "in", "DISTANCES", ":", "\n", "      ", "DISTANCES", "[", "k", "]", "=", "distanceThreshold", "\n", "continue", "\n", "", "pass", "\n", "", "if", "lengthThreshold", ">", "0", ":", "\n", "    ", "for", "k", "in", "LENGTH_THRESHOLDS", ":", "\n", "      ", "LENGTH_THRESHOLDS", "[", "k", "]", "=", "lengthThreshold", "\n", "continue", "\n", "", "pass", "\n", "\n", "", "wallPoints", ",", "wallLines", ",", "wallPointOrientationLinesMap", ",", "wallPointNeighbors", ",", "augmentedPointMask", "=", "extractCorners", "(", "wallCornerHeatmaps", ",", "heatmapValueThresholdWall", ",", "gap", "=", "GAPS", "[", "'wall_extraction'", "]", ",", "augment", "=", "enableAugmentation", ",", "gt", "=", "gt", ")", "\n", "doorPoints", ",", "doorLines", ",", "doorPointOrientationLinesMap", ",", "doorPointNeighbors", ",", "_", "=", "extractCorners", "(", "doorCornerHeatmaps", ",", "heatmapValueThresholdDoor", ",", "gap", "=", "GAPS", "[", "'door_extraction'", "]", ",", "cornerType", "=", "'door'", ",", "gt", "=", "gt", ")", "\n", "iconPoints", ",", "iconLines", ",", "iconPointOrientationLinesMap", ",", "iconPointNeighbors", ",", "_", "=", "extractCorners", "(", "iconCornerHeatmaps", ",", "heatmapValueThresholdIcon", ",", "gap", "=", "GAPS", "[", "'icon_extraction'", "]", ",", "cornerType", "=", "'icon'", ",", "gt", "=", "gt", ")", "\n", "\n", "if", "not", "gt", ":", "\n", "    ", "for", "pointIndex", ",", "point", "in", "enumerate", "(", "wallPoints", ")", ":", "\n", "#print((pointIndex, np.array(point[:2]).astype(np.int32).tolist(), point[2], point[3]))", "\n", "      ", "continue", "\n", "\n", "", "wallPoints", ",", "wallLines", ",", "wallPointOrientationLinesMap", ",", "wallPointNeighbors", "=", "filterWalls", "(", "wallPoints", ",", "wallLines", ")", "\n", "pass", "\n", "\n", "\n", "", "sortLines", "(", "doorPoints", ",", "doorLines", ")", "\n", "sortLines", "(", "wallPoints", ",", "wallLines", ")", "\n", "\n", "print", "(", "'the number of points'", ",", "len", "(", "wallPoints", ")", ",", "len", "(", "doorPoints", ")", ",", "len", "(", "iconPoints", ")", ")", "\n", "print", "(", "'the number of lines'", ",", "len", "(", "wallLines", ")", ",", "len", "(", "doorLines", ")", ",", "len", "(", "iconLines", ")", ")", "\n", "\n", "\n", "drawPoints", "(", "os", ".", "path", ".", "join", "(", "debug_prefix", ",", "\"points.png\"", ")", ",", "width", ",", "height", ",", "wallPoints", ",", "densityImage", ",", "pointSize", "=", "3", ")", "\n", "drawPointsSeparately", "(", "os", ".", "path", ".", "join", "(", "debug_prefix", ",", "'points'", ")", ",", "width", ",", "height", ",", "wallPoints", ",", "densityImage", ",", "pointSize", "=", "3", ")", "\n", "drawLines", "(", "os", ".", "path", ".", "join", "(", "debug_prefix", ",", "'lines.png'", ")", ",", "width", ",", "height", ",", "wallPoints", ",", "wallLines", ",", "[", "]", ",", "None", ",", "1", ",", "lineColor", "=", "255", ")", "\n", "\n", "wallMask", "=", "drawLineMask", "(", "width", ",", "height", ",", "wallPoints", ",", "wallLines", ")", "\n", "\n", "labelVotesMap", "=", "np", ".", "zeros", "(", "(", "NUM_ROOMS", ",", "height", ",", "width", ")", ")", "\n", "#labelMap = np.zeros((NUM_LABELS, height, width))", "\n", "#semanticHeatmaps = np.concatenate([iconHeatmaps, roomHeatmaps], axis=2)", "\n", "for", "segmentIndex", "in", "range", "(", "NUM_ROOMS", ")", ":", "\n", "    ", "segmentation_img", "=", "roomHeatmaps", "[", ":", ",", ":", ",", "segmentIndex", "]", "\n", "#segmentation_img = (segmentation_img > 0.5).astype(np.float)", "\n", "labelVotesMap", "[", "segmentIndex", "]", "=", "segmentation_img", "\n", "#labelMap[segmentIndex] = segmentation_img", "\n", "continue", "\n", "\n", "", "labelVotesMap", "=", "np", ".", "cumsum", "(", "np", ".", "cumsum", "(", "labelVotesMap", ",", "axis", "=", "1", ")", ",", "axis", "=", "2", ")", "\n", "\n", "icons", "=", "findIconsFromLines", "(", "iconPoints", ",", "iconLines", ")", "\n", "\n", "if", "not", "gt", ":", "\n", "    ", "newIcons", ",", "newIconPoints", ",", "newDoorLines", ",", "newDoorPoints", "=", "findCandidatesFromHeatmaps", "(", "iconHeatmaps", ",", "len", "(", "iconPoints", ")", ",", "len", "(", "doorPoints", ")", ")", "\n", "\n", "icons", "+=", "newIcons", "\n", "iconPoints", "+=", "newIconPoints", "\n", "doorLines", "+=", "newDoorLines", "\n", "doorPoints", "+=", "newDoorPoints", "\n", "pass", "\n", "\n", "", "if", "True", ":", "\n", "    ", "drawLines", "(", "os", ".", "path", ".", "join", "(", "debug_prefix", ",", "'lines.png'", ")", ",", "width", ",", "height", ",", "wallPoints", ",", "wallLines", ",", "[", "]", ",", "None", ",", "2", ",", "lineColor", "=", "255", ")", "\n", "drawLines", "(", "os", ".", "path", ".", "join", "(", "debug_prefix", ",", "'doors.png'", ")", ",", "width", ",", "height", ",", "doorPoints", ",", "doorLines", ",", "[", "]", ",", "None", ",", "2", ",", "lineColor", "=", "255", ")", "\n", "drawRectangles", "(", "os", ".", "path", ".", "join", "(", "debug_prefix", ",", "'icons.png'", ")", ",", "width", ",", "height", ",", "iconPoints", ",", "icons", ",", "{", "}", ",", "2", ")", "\n", "print", "(", "'number of walls: '", "+", "str", "(", "len", "(", "wallLines", ")", ")", ")", "\n", "print", "(", "'number of doors: '", "+", "str", "(", "len", "(", "doorLines", ")", ")", ")", "\n", "print", "(", "'number of icons: '", "+", "str", "(", "len", "(", "icons", ")", ")", ")", "\n", "pass", "\n", "\n", "\n", "", "doorWallLineMap", "=", "findLineMap", "(", "doorPoints", ",", "doorLines", ",", "wallPoints", ",", "wallLines", ",", "gap", "=", "GAPS", "[", "'wall_door_neighbor'", "]", ")", "\n", "\n", "newDoorLines", "=", "[", "]", "\n", "newDoorWallLineMap", "=", "[", "]", "\n", "for", "lineIndex", ",", "walls", "in", "enumerate", "(", "doorWallLineMap", ")", ":", "\n", "    ", "if", "len", "(", "walls", ")", ">", "0", ":", "\n", "      ", "newDoorLines", ".", "append", "(", "doorLines", "[", "lineIndex", "]", ")", "\n", "newDoorWallLineMap", ".", "append", "(", "walls", ")", "\n", "pass", "\n", "", "continue", "\n", "", "doorLines", "=", "newDoorLines", "\n", "doorWallLineMap", "=", "newDoorWallLineMap", "\n", "\n", "\n", "conflictWallLinePairs", "=", "findConflictLinePairs", "(", "wallPoints", ",", "wallLines", ",", "gap", "=", "GAPS", "[", "'wall_conflict'", "]", ",", "distanceThreshold", "=", "DISTANCES", "[", "'wall'", "]", ",", "considerEndPoints", "=", "True", ")", "\n", "\n", "conflictDoorLinePairs", "=", "findConflictLinePairs", "(", "doorPoints", ",", "doorLines", ",", "gap", "=", "GAPS", "[", "'door_conflict'", "]", ",", "distanceThreshold", "=", "DISTANCES", "[", "'door'", "]", ")", "\n", "conflictIconPairs", "=", "findConflictRectanglePairs", "(", "iconPoints", ",", "icons", ",", "gap", "=", "GAPS", "[", "'icon_conflict'", "]", ")", "\n", "\n", "if", "False", ":", "\n", "    ", "print", "(", "wallLines", ")", "\n", "os", ".", "system", "(", "'mkdir '", "+", "debug_prefix", "+", "'/lines'", ")", "\n", "for", "lineIndex", ",", "line", "in", "enumerate", "(", "wallLines", ")", ":", "\n", "      ", "drawLines", "(", "os", ".", "path", ".", "join", "(", "debug_prefix", ",", "'lines/line_'", "+", "str", "(", "lineIndex", ")", "+", "'.png'", ")", ",", "width", ",", "height", ",", "wallPoints", ",", "[", "line", "]", ",", "[", "]", ",", "lineColor", "=", "255", ")", "\n", "continue", "\n", "", "exit", "(", "1", ")", "\n", "pass", "\n", "\n", "\n", "", "wallLineNeighbors", "=", "findLineNeighbors", "(", "wallPoints", ",", "wallLines", ",", "labelVotesMap", ",", "gap", "=", "GAPS", "[", "'wall_neighbor'", "]", ")", "\n", "\n", "iconWallLineNeighbors", "=", "findRectangleLineNeighbors", "(", "iconPoints", ",", "icons", ",", "wallPoints", ",", "wallLines", ",", "wallLineNeighbors", ",", "gap", "=", "GAPS", "[", "'wall_icon_neighbor'", "]", ",", "distanceThreshold", "=", "DISTANCES", "[", "'wall_icon'", "]", ")", "\n", "conflictIconWallPairs", "=", "findConflictRectangleLinePairs", "(", "iconPoints", ",", "icons", ",", "wallPoints", ",", "wallLines", ",", "gap", "=", "GAPS", "[", "'wall_icon_conflict'", "]", ")", "\n", "\n", "\n", "if", "False", ":", "\n", "    ", "print", "(", "conflictWallLinePairs", ")", "\n", "for", "wallIndex", "in", "[", "0", ",", "17", "]", ":", "\n", "      ", "print", "(", "wallLines", "[", "wallIndex", "]", ")", "\n", "print", "(", "[", "wallPoints", "[", "pointIndex", "]", "for", "pointIndex", "in", "wallLines", "[", "wallIndex", "]", "]", ")", "\n", "print", "(", "wallPointOrientationLinesMap", "[", "wallLines", "[", "wallIndex", "]", "[", "0", "]", "]", ")", "\n", "print", "(", "wallPointOrientationLinesMap", "[", "wallLines", "[", "wallIndex", "]", "[", "1", "]", "]", ")", "\n", "continue", "\n", "", "exit", "(", "1", ")", "\n", "pass", "\n", "\n", "\n", "", "exteriorLines", "=", "{", "}", "\n", "for", "lineIndex", ",", "neighbors", "in", "enumerate", "(", "wallLineNeighbors", ")", ":", "\n", "    ", "if", "len", "(", "neighbors", "[", "0", "]", ")", "==", "0", "and", "len", "(", "neighbors", "[", "1", "]", ")", ">", "0", ":", "\n", "      ", "exteriorLines", "[", "lineIndex", "]", "=", "0", "\n", "", "elif", "len", "(", "neighbors", "[", "0", "]", ")", ">", "0", "and", "len", "(", "neighbors", "[", "1", "]", ")", "==", "0", ":", "\n", "      ", "exteriorLines", "[", "lineIndex", "]", "=", "1", "\n", "pass", "\n", "", "continue", "\n", "#print(exteriorLines)", "\n", "\n", "", "if", "False", ":", "\n", "    ", "filteredWallLines", "=", "[", "]", "\n", "for", "lineIndex", ",", "neighbors", "in", "enumerate", "(", "wallLineNeighbors", ")", ":", "\n", "      ", "if", "len", "(", "neighbors", "[", "0", "]", ")", "==", "0", "and", "len", "(", "neighbors", "[", "1", "]", ")", ">", "0", ":", "\n", "        ", "print", "(", "lineIndex", ")", "\n", "filteredWallLines", ".", "append", "(", "wallLines", "[", "lineIndex", "]", ")", "\n", "pass", "\n", "", "continue", "\n", "", "drawLines", "(", "os", ".", "path", ".", "join", "(", "debug_prefix", ",", "'exterior_1.png'", ")", ",", "width", ",", "height", ",", "wallPoints", ",", "filteredWallLines", ",", "lineColor", "=", "255", ")", "\n", "\n", "filteredWallLines", "=", "[", "]", "\n", "for", "lineIndex", ",", "neighbors", "in", "enumerate", "(", "wallLineNeighbors", ")", ":", "\n", "      ", "if", "len", "(", "neighbors", "[", "0", "]", ")", ">", "0", "and", "len", "(", "neighbors", "[", "1", "]", ")", "==", "0", ":", "\n", "        ", "print", "(", "lineIndex", ")", "\n", "filteredWallLines", ".", "append", "(", "wallLines", "[", "lineIndex", "]", ")", "\n", "pass", "\n", "", "continue", "\n", "", "drawLines", "(", "os", ".", "path", ".", "join", "(", "debug_prefix", ",", "'exterior_2.png'", ")", ",", "width", ",", "height", ",", "wallPoints", ",", "filteredWallLines", ",", "lineColor", "=", "255", ")", "\n", "exit", "(", "1", ")", "\n", "pass", "\n", "\n", "", "if", "True", ":", "\n", "#model = Model(\"JunctionFilter\")", "\n", "    ", "model", "=", "LpProblem", "(", "\"JunctionFilter\"", ",", "LpMinimize", ")", "\n", "\n", "#add variables", "\n", "w_p", "=", "[", "LpVariable", "(", "cat", "=", "LpBinary", ",", "name", "=", "\"point_\"", "+", "str", "(", "pointIndex", ")", ")", "for", "pointIndex", "in", "range", "(", "len", "(", "wallPoints", ")", ")", "]", "\n", "w_l", "=", "[", "LpVariable", "(", "cat", "=", "LpBinary", ",", "name", "=", "\"line_\"", "+", "str", "(", "lineIndex", ")", ")", "for", "lineIndex", "in", "range", "(", "len", "(", "wallLines", ")", ")", "]", "\n", "\n", "d_l", "=", "[", "LpVariable", "(", "cat", "=", "LpBinary", ",", "name", "=", "\"door_line_\"", "+", "str", "(", "lineIndex", ")", ")", "for", "lineIndex", "in", "range", "(", "len", "(", "doorLines", ")", ")", "]", "\n", "\n", "i_r", "=", "[", "LpVariable", "(", "cat", "=", "LpBinary", ",", "name", "=", "\"icon_rectangle_\"", "+", "str", "(", "lineIndex", ")", ")", "for", "lineIndex", "in", "range", "(", "len", "(", "icons", ")", ")", "]", "\n", "\n", "i_types", "=", "[", "]", "\n", "for", "iconIndex", "in", "range", "(", "len", "(", "icons", ")", ")", ":", "\n", "      ", "i_types", ".", "append", "(", "[", "LpVariable", "(", "cat", "=", "LpBinary", ",", "name", "=", "\"icon_type_\"", "+", "str", "(", "iconIndex", ")", "+", "\"_\"", "+", "str", "(", "typeIndex", ")", ")", "for", "typeIndex", "in", "range", "(", "NUM_ICONS", ")", "]", ")", "\n", "continue", "\n", "\n", "", "l_dir_labels", "=", "[", "]", "\n", "for", "lineIndex", "in", "range", "(", "len", "(", "wallLines", ")", ")", ":", "\n", "      ", "dir_labels", "=", "[", "]", "\n", "for", "direction", "in", "range", "(", "2", ")", ":", "\n", "        ", "labels", "=", "[", "]", "\n", "for", "label", "in", "range", "(", "NUM_ROOMS", ")", ":", "\n", "          ", "labels", ".", "append", "(", "LpVariable", "(", "cat", "=", "LpBinary", ",", "name", "=", "\"line_\"", "+", "str", "(", "lineIndex", ")", "+", "\"_\"", "+", "str", "(", "direction", ")", "+", "\"_\"", "+", "str", "(", "label", ")", ")", ")", "\n", "", "dir_labels", ".", "append", "(", "labels", ")", "\n", "", "l_dir_labels", ".", "append", "(", "dir_labels", ")", "\n", "\n", "\n", "\n", "#model.update()", "\n", "#obj = QuadExpr()", "\n", "", "obj", "=", "LpAffineExpression", "(", ")", "\n", "\n", "if", "gt", ":", "\n", "      ", "for", "pointIndex", "in", "range", "(", "len", "(", "wallPoints", ")", ")", ":", "\n", "        ", "model", "+=", "(", "w_p", "[", "pointIndex", "]", "==", "1", ",", "'gt_point_active_'", "+", "str", "(", "pointIndex", ")", ")", "\n", "continue", "\n", "\n", "", "pointIconMap", "=", "{", "}", "\n", "for", "iconIndex", ",", "icon", "in", "enumerate", "(", "icons", ")", ":", "\n", "        ", "for", "pointIndex", "in", "icon", ":", "\n", "          ", "if", "pointIndex", "not", "in", "pointIconMap", ":", "\n", "            ", "pointIconMap", "[", "pointIndex", "]", "=", "[", "]", "\n", "pass", "\n", "", "pointIconMap", "[", "pointIndex", "]", ".", "append", "(", "iconIndex", ")", "\n", "continue", "\n", "", "continue", "\n", "", "for", "pointIndex", ",", "iconIndices", "in", "pointIconMap", ".", "items", "(", ")", ":", "\n", "        ", "break", "\n", "iconSum", "=", "LpAffineExpression", "(", ")", "\n", "for", "iconIndex", "in", "iconIndices", ":", "\n", "          ", "iconSum", "+=", "i_r", "[", "iconIndex", "]", "\n", "continue", "\n", "", "model", "+=", "(", "iconSum", "==", "1", ")", "\n", "continue", "\n", "", "pass", "\n", "\n", "## Semantic label one hot constraints", "\n", "", "for", "lineIndex", "in", "range", "(", "len", "(", "wallLines", ")", ")", ":", "\n", "      ", "for", "direction", "in", "range", "(", "2", ")", ":", "\n", "        ", "labelSum", "=", "LpAffineExpression", "(", ")", "\n", "for", "label", "in", "range", "(", "NUM_ROOMS", ")", ":", "\n", "          ", "labelSum", "+=", "l_dir_labels", "[", "lineIndex", "]", "[", "direction", "]", "[", "label", "]", "\n", "continue", "\n", "", "model", "+=", "(", "labelSum", "==", "w_l", "[", "lineIndex", "]", ",", "'label_sum_'", "+", "str", "(", "lineIndex", ")", "+", "'_'", "+", "str", "(", "direction", ")", ")", "\n", "continue", "\n", "", "continue", "\n", "\n", "## Opposite room constraints", "\n", "", "if", "False", ":", "\n", "      ", "oppositeRoomPairs", "=", "[", "(", "1", ",", "1", ")", ",", "(", "2", ",", "2", ")", ",", "(", "4", ",", "4", ")", ",", "(", "5", ",", "5", ")", ",", "(", "7", ",", "7", ")", ",", "(", "9", ",", "9", ")", "]", "\n", "for", "lineIndex", "in", "range", "(", "len", "(", "wallLines", ")", ")", ":", "\n", "        ", "for", "oppositeRoomPair", "in", "oppositeRoomPairs", ":", "\n", "          ", "model", "+=", "(", "l_dir_labels", "[", "lineIndex", "]", "[", "0", "]", "[", "oppositeRoomPair", "[", "0", "]", "]", "+", "l_dir_labels", "[", "lineIndex", "]", "[", "0", "]", "[", "oppositeRoomPair", "[", "1", "]", "]", "<=", "1", ")", "\n", "if", "oppositeRoomPair", "[", "0", "]", "!=", "oppositeRoomPair", "[", "1", "]", ":", "\n", "            ", "model", "+=", "(", "l_dir_labels", "[", "lineIndex", "]", "[", "0", "]", "[", "oppositeRoomPair", "[", "1", "]", "]", "+", "l_dir_labels", "[", "lineIndex", "]", "[", "0", "]", "[", "oppositeRoomPair", "[", "0", "]", "]", "<=", "1", ")", "\n", "pass", "\n", "", "continue", "\n", "", "continue", "\n", "", "pass", "\n", "\n", "## Loop constraints", "\n", "", "closeRooms", "=", "{", "}", "\n", "for", "label", "in", "range", "(", "NUM_ROOMS", ")", ":", "\n", "      ", "closeRooms", "[", "label", "]", "=", "True", "\n", "continue", "\n", "", "closeRooms", "[", "1", "]", "=", "False", "\n", "closeRooms", "[", "2", "]", "=", "False", "\n", "#closeRooms[3] = False", "\n", "closeRooms", "[", "8", "]", "=", "False", "\n", "closeRooms", "[", "9", "]", "=", "False", "\n", "\n", "for", "label", "in", "range", "(", "NUM_ROOMS", ")", ":", "\n", "      ", "if", "not", "closeRooms", "[", "label", "]", ":", "\n", "        ", "continue", "\n", "", "for", "pointIndex", ",", "orientationLinesMap", "in", "enumerate", "(", "wallPointOrientationLinesMap", ")", ":", "\n", "        ", "for", "orientation", ",", "lines", "in", "orientationLinesMap", ".", "items", "(", ")", ":", "\n", "          ", "direction", "=", "int", "(", "orientation", "in", "[", "1", ",", "2", "]", ")", "\n", "lineSum", "=", "LpAffineExpression", "(", ")", "\n", "for", "lineIndex", "in", "lines", ":", "\n", "            ", "lineSum", "+=", "l_dir_labels", "[", "lineIndex", "]", "[", "direction", "]", "[", "label", "]", "\n", "continue", "\n", "", "for", "nextOrientation", "in", "range", "(", "orientation", "+", "1", ",", "8", ")", ":", "\n", "            ", "if", "not", "(", "nextOrientation", "%", "4", ")", "in", "orientationLinesMap", ":", "\n", "              ", "continue", "\n", "", "nextLines", "=", "orientationLinesMap", "[", "nextOrientation", "%", "4", "]", "\n", "nextDirection", "=", "int", "(", "(", "nextOrientation", "%", "4", ")", "in", "[", "0", ",", "3", "]", ")", "\n", "nextLineSum", "=", "LpAffineExpression", "(", ")", "\n", "for", "nextLineIndex", "in", "nextLines", ":", "\n", "              ", "nextLineSum", "+=", "l_dir_labels", "[", "nextLineIndex", "]", "[", "nextDirection", "]", "[", "label", "]", "\n", "continue", "\n", "", "model", "+=", "(", "lineSum", "==", "nextLineSum", ")", "\n", "break", "\n", "", "continue", "\n", "", "continue", "\n", "", "continue", "\n", "\n", "\n", "## Exterior constraints", "\n", "", "exteriorLineSum", "=", "LpAffineExpression", "(", ")", "\n", "for", "lineIndex", "in", "range", "(", "len", "(", "wallLines", ")", ")", ":", "\n", "      ", "if", "lineIndex", "not", "in", "exteriorLines", ":", "\n", "        ", "continue", "\n", "#direction = exteriorLines[lineIndex]", "\n", "", "label", "=", "0", "\n", "model", "+=", "(", "l_dir_labels", "[", "lineIndex", "]", "[", "0", "]", "[", "label", "]", "+", "l_dir_labels", "[", "lineIndex", "]", "[", "1", "]", "[", "label", "]", "==", "w_l", "[", "lineIndex", "]", ",", "'exterior_wall_'", "+", "str", "(", "lineIndex", ")", ")", "\n", "exteriorLineSum", "+=", "w_l", "[", "lineIndex", "]", "\n", "continue", "\n", "", "model", "+=", "(", "exteriorLineSum", ">=", "1", ",", "'exterior_wall_sum'", ")", "\n", "\n", "\n", "## Wall line room semantic objectives", "\n", "for", "lineIndex", ",", "directionNeighbors", "in", "enumerate", "(", "wallLineNeighbors", ")", ":", "\n", "      ", "for", "direction", ",", "neighbors", "in", "enumerate", "(", "directionNeighbors", ")", ":", "\n", "        ", "labelVotesSum", "=", "np", ".", "zeros", "(", "NUM_ROOMS", ")", "\n", "for", "neighbor", ",", "labelVotes", "in", "neighbors", ".", "items", "(", ")", ":", "\n", "          ", "labelVotesSum", "+=", "labelVotes", "\n", "continue", "\n", "\n", "", "votesSum", "=", "labelVotesSum", ".", "sum", "(", ")", "\n", "if", "votesSum", "==", "0", ":", "\n", "          ", "continue", "\n", "", "labelVotesSum", "/=", "votesSum", "\n", "\n", "for", "label", "in", "range", "(", "NUM_ROOMS", ")", ":", "\n", "          ", "obj", "+=", "(", "l_dir_labels", "[", "lineIndex", "]", "[", "direction", "]", "[", "label", "]", "*", "(", "0.0", "-", "labelVotesSum", "[", "label", "]", ")", "*", "labelWeight", ")", "\n", "continue", "\n", "", "continue", "\n", "", "continue", "\n", "\n", "## Icon corner constraints (one icon corner belongs to at most one icon)", "\n", "", "pointIconsMap", "=", "{", "}", "\n", "for", "iconIndex", ",", "icon", "in", "enumerate", "(", "icons", ")", ":", "\n", "      ", "for", "cornerIndex", "in", "range", "(", "4", ")", ":", "\n", "        ", "pointIndex", "=", "icon", "[", "cornerIndex", "]", "\n", "if", "pointIndex", "not", "in", "pointIconsMap", ":", "\n", "          ", "pointIconsMap", "[", "pointIndex", "]", "=", "[", "]", "\n", "pass", "\n", "", "pointIconsMap", "[", "pointIndex", "]", ".", "append", "(", "iconIndex", ")", "\n", "continue", "\n", "", "continue", "\n", "\n", "", "for", "pointIndex", ",", "iconIndices", "in", "pointIconsMap", ".", "items", "(", ")", ":", "\n", "      ", "iconSum", "=", "LpAffineExpression", "(", ")", "\n", "for", "iconIndex", "in", "iconIndices", ":", "\n", "        ", "iconSum", "+=", "i_r", "[", "iconIndex", "]", "\n", "continue", "\n", "", "model", "+=", "(", "iconSum", "<=", "1", ")", "\n", "continue", "\n", "\n", "## Wall confidence objective", "\n", "", "wallLineConfidenceMap", "=", "roomHeatmaps", "[", ":", ",", ":", ",", "WALL_LABEL_OFFSET", "]", "\n", "#cv2.imwrite(output_prefix + 'confidence.png', (wallLineConfidenceMap * 255).astype(np.uint8))", "\n", "wallConfidences", "=", "[", "]", "\n", "for", "lineIndex", ",", "line", "in", "enumerate", "(", "wallLines", ")", ":", "\n", "      ", "point_1", "=", "np", ".", "array", "(", "wallPoints", "[", "line", "[", "0", "]", "]", "[", ":", "2", "]", ")", "\n", "point_2", "=", "np", ".", "array", "(", "wallPoints", "[", "line", "[", "1", "]", "]", "[", ":", "2", "]", ")", "\n", "lineDim", "=", "calcLineDim", "(", "wallPoints", ",", "line", ")", "\n", "\n", "fixedValue", "=", "int", "(", "round", "(", "(", "point_1", "[", "1", "-", "lineDim", "]", "+", "point_2", "[", "1", "-", "lineDim", "]", ")", "//", "2", ")", ")", "\n", "point_1", "[", "lineDim", "]", ",", "point_2", "[", "lineDim", "]", "=", "min", "(", "point_1", "[", "lineDim", "]", ",", "point_2", "[", "lineDim", "]", ")", ",", "max", "(", "point_1", "[", "lineDim", "]", ",", "point_2", "[", "lineDim", "]", ")", "\n", "\n", "point_1", "[", "1", "-", "lineDim", "]", "=", "fixedValue", "-", "wallLineWidth", "\n", "point_2", "[", "1", "-", "lineDim", "]", "=", "fixedValue", "+", "wallLineWidth", "\n", "\n", "point_1", "=", "np", ".", "maximum", "(", "point_1", ",", "0", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "point_2", "=", "np", ".", "minimum", "(", "point_2", ",", "sizes", "-", "1", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "wallLineConfidence", "=", "np", ".", "sum", "(", "wallLineConfidenceMap", "[", "point_1", "[", "1", "]", ":", "point_2", "[", "1", "]", "+", "1", ",", "point_1", "[", "0", "]", ":", "point_2", "[", "0", "]", "+", "1", "]", ")", "/", "(", "(", "point_2", "[", "1", "]", "+", "1", "-", "point_1", "[", "1", "]", ")", "*", "(", "point_2", "[", "0", "]", "+", "1", "-", "point_1", "[", "0", "]", ")", ")", "-", "0.5", "\n", "\n", "obj", "+=", "(", "-", "wallLineConfidence", "*", "w_l", "[", "lineIndex", "]", "*", "wallWeight", ")", "\n", "\n", "wallConfidences", ".", "append", "(", "wallLineConfidence", ")", "\n", "continue", "\n", "\n", "", "if", "not", "gt", ":", "\n", "      ", "for", "wallIndex", ",", "wallLine", "in", "enumerate", "(", "wallLines", ")", ":", "\n", "#print('wall confidence', wallIndex, [np.array(wallPoints[pointIndex][:2]).astype(np.int32).tolist() for pointIndex in wallLine], wallConfidences[wallIndex])", "\n", "        ", "continue", "\n", "", "pass", "\n", "\n", "\n", "## Door confidence objective", "\n", "", "doorLineConfidenceMap", "=", "iconHeatmaps", "[", ":", ",", ":", ",", "DOOR_LABEL_OFFSET", "]", "\n", "#cv2.imwrite(output_prefix + 'confidence.png', (doorLineConfidenceMap * 255).astype(np.uint8))", "\n", "#cv2.imwrite(output_prefix + 'segmentation.png', drawSegmentationImage(doorCornerHeatmaps))", "\n", "\n", "for", "lineIndex", ",", "line", "in", "enumerate", "(", "doorLines", ")", ":", "\n", "      ", "point_1", "=", "np", ".", "array", "(", "doorPoints", "[", "line", "[", "0", "]", "]", "[", ":", "2", "]", ")", "\n", "point_2", "=", "np", ".", "array", "(", "doorPoints", "[", "line", "[", "1", "]", "]", "[", ":", "2", "]", ")", "\n", "lineDim", "=", "calcLineDim", "(", "doorPoints", ",", "line", ")", "\n", "\n", "fixedValue", "=", "int", "(", "round", "(", "(", "point_1", "[", "1", "-", "lineDim", "]", "+", "point_2", "[", "1", "-", "lineDim", "]", ")", "//", "2", ")", ")", "\n", "\n", "#assert(point_1[lineDim] < point_2[lineDim], 'door line reversed')", "\n", "point_1", "[", "lineDim", "]", ",", "point_2", "[", "lineDim", "]", "=", "min", "(", "point_1", "[", "lineDim", "]", ",", "point_2", "[", "lineDim", "]", ")", ",", "max", "(", "point_1", "[", "lineDim", "]", ",", "point_2", "[", "lineDim", "]", ")", "\n", "\n", "point_1", "[", "1", "-", "lineDim", "]", "=", "fixedValue", "-", "doorLineWidth", "\n", "point_2", "[", "1", "-", "lineDim", "]", "=", "fixedValue", "+", "doorLineWidth", "\n", "\n", "point_1", "=", "np", ".", "maximum", "(", "point_1", ",", "0", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "point_2", "=", "np", ".", "minimum", "(", "point_2", ",", "sizes", "-", "1", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "if", "not", "gt", ":", "\n", "        ", "doorLineConfidence", "=", "np", ".", "sum", "(", "doorLineConfidenceMap", "[", "point_1", "[", "1", "]", ":", "point_2", "[", "1", "]", "+", "1", ",", "point_1", "[", "0", "]", ":", "point_2", "[", "0", "]", "+", "1", "]", ")", "/", "(", "(", "point_2", "[", "1", "]", "+", "1", "-", "point_1", "[", "1", "]", ")", "*", "(", "point_2", "[", "0", "]", "+", "1", "-", "point_1", "[", "0", "]", ")", ")", "\n", "\n", "if", "lineDim", "==", "0", ":", "\n", "          ", "doorPointConfidence", "=", "(", "doorCornerHeatmaps", "[", "point_1", "[", "1", "]", ",", "point_1", "[", "0", "]", ",", "3", "]", "+", "doorCornerHeatmaps", "[", "point_2", "[", "1", "]", ",", "point_2", "[", "0", "]", ",", "1", "]", ")", "/", "2", "\n", "", "else", ":", "\n", "          ", "doorPointConfidence", "=", "(", "doorCornerHeatmaps", "[", "point_1", "[", "1", "]", ",", "point_1", "[", "0", "]", ",", "0", "]", "+", "doorCornerHeatmaps", "[", "point_2", "[", "1", "]", ",", "point_2", "[", "0", "]", ",", "2", "]", ")", "/", "2", "\n", "pass", "\n", "", "doorConfidence", "=", "(", "doorLineConfidence", "+", "doorPointConfidence", ")", "*", "0.5", "-", "0.5", "\n", "#print('door confidence', doorConfidence)", "\n", "obj", "+=", "(", "-", "doorConfidence", "*", "d_l", "[", "lineIndex", "]", "*", "doorWeight", ")", "\n", "", "else", ":", "\n", "        ", "obj", "+=", "(", "-", "0.5", "*", "d_l", "[", "lineIndex", "]", "*", "doorWeight", ")", "\n", "pass", "\n", "", "continue", "\n", "\n", "## Icon confidence objective  ", "\n", "", "for", "iconIndex", ",", "icon", "in", "enumerate", "(", "icons", ")", ":", "\n", "      ", "point_1", "=", "iconPoints", "[", "icon", "[", "0", "]", "]", "\n", "point_2", "=", "iconPoints", "[", "icon", "[", "1", "]", "]", "\n", "point_3", "=", "iconPoints", "[", "icon", "[", "2", "]", "]", "\n", "point_4", "=", "iconPoints", "[", "icon", "[", "3", "]", "]", "\n", "\n", "x_1", "=", "int", "(", "(", "point_1", "[", "0", "]", "+", "point_3", "[", "0", "]", ")", "//", "2", ")", "\n", "x_2", "=", "int", "(", "(", "point_2", "[", "0", "]", "+", "point_4", "[", "0", "]", ")", "//", "2", ")", "\n", "y_1", "=", "int", "(", "(", "point_1", "[", "1", "]", "+", "point_2", "[", "1", "]", ")", "//", "2", ")", "\n", "y_2", "=", "int", "(", "(", "point_3", "[", "1", "]", "+", "point_4", "[", "1", "]", ")", "//", "2", ")", "\n", "\n", "iconArea", "=", "(", "x_2", "-", "x_1", "+", "1", ")", "*", "(", "y_2", "-", "y_1", "+", "1", ")", "\n", "\n", "if", "iconArea", "<=", "1e-4", ":", "\n", "        ", "print", "(", "icon", ")", "\n", "print", "(", "[", "iconPoints", "[", "pointIndex", "]", "for", "pointIndex", "in", "icon", "]", ")", "\n", "print", "(", "'zero size icon'", ")", "\n", "exit", "(", "1", ")", "\n", "pass", "\n", "\n", "", "iconTypeConfidence", "=", "iconHeatmaps", "[", "y_1", ":", "y_2", "+", "1", ",", "x_1", ":", "x_2", "+", "1", ",", ":", "NUM_ICONS", "+", "1", "]", ".", "sum", "(", "axis", "=", "(", "0", ",", "1", ")", ")", "/", "iconArea", "\n", "iconTypeConfidence", "=", "iconTypeConfidence", "[", "1", ":", "]", "-", "iconTypeConfidence", "[", "0", "]", "\n", "\n", "if", "not", "gt", ":", "\n", "        ", "iconPointConfidence", "=", "(", "iconCornerHeatmaps", "[", "int", "(", "round", "(", "point_1", "[", "1", "]", ")", ")", ",", "int", "(", "round", "(", "point_1", "[", "0", "]", ")", ")", ",", "2", "]", "+", "iconCornerHeatmaps", "[", "int", "(", "round", "(", "point_2", "[", "1", "]", ")", ")", ",", "int", "(", "round", "(", "point_2", "[", "0", "]", ")", ")", ",", "3", "]", "+", "iconCornerHeatmaps", "[", "int", "(", "round", "(", "point_3", "[", "1", "]", ")", ")", ",", "int", "(", "round", "(", "point_3", "[", "0", "]", ")", ")", ",", "1", "]", "+", "iconCornerHeatmaps", "[", "int", "(", "round", "(", "point_4", "[", "1", "]", ")", ")", ",", "int", "(", "round", "(", "point_4", "[", "0", "]", ")", ")", ",", "0", "]", ")", "//", "4", "-", "0.5", "\n", "iconConfidence", "=", "(", "iconTypeConfidence", "+", "iconPointConfidence", ")", "*", "0.5", "\n", "", "else", ":", "\n", "        ", "iconConfidence", "=", "iconTypeConfidence", "\n", "pass", "\n", "\n", "#print('icon confidence', iconConfidence)", "\n", "", "for", "typeIndex", "in", "range", "(", "NUM_ICONS", ")", ":", "\n", "        ", "obj", "+=", "(", "-", "i_types", "[", "iconIndex", "]", "[", "typeIndex", "]", "*", "(", "iconConfidence", "[", "typeIndex", "]", ")", "*", "iconTypeWeight", ")", "\n", "continue", "\n", "", "continue", "\n", "\n", "## Icon type one hot constraints", "\n", "", "for", "iconIndex", "in", "range", "(", "len", "(", "icons", ")", ")", ":", "\n", "      ", "typeSum", "=", "LpAffineExpression", "(", ")", "\n", "for", "typeIndex", "in", "range", "(", "NUM_ICONS", "-", "1", ")", ":", "\n", "        ", "typeSum", "+=", "i_types", "[", "iconIndex", "]", "[", "typeIndex", "]", "\n", "continue", "\n", "", "model", "+=", "(", "typeSum", "==", "i_r", "[", "iconIndex", "]", ")", "\n", "continue", "\n", "\n", "\n", "## Line sum constraints (each orientation has at most one wall line)", "\n", "", "for", "pointIndex", ",", "orientationLinesMap", "in", "enumerate", "(", "wallPointOrientationLinesMap", ")", ":", "\n", "      ", "for", "orientation", ",", "lines", "in", "orientationLinesMap", ".", "items", "(", ")", ":", "\n", "#if len(lines) > 1:", "\n", "#print(lines)", "\n", "        ", "lineSum", "=", "LpAffineExpression", "(", ")", "\n", "for", "lineIndex", "in", "lines", ":", "\n", "          ", "lineSum", "+=", "w_l", "[", "lineIndex", "]", "\n", "continue", "\n", "\n", "", "model", "+=", "(", "lineSum", "==", "w_p", "[", "pointIndex", "]", ",", "\"line_sum_\"", "+", "str", "(", "pointIndex", ")", "+", "\"_\"", "+", "str", "(", "orientation", ")", ")", "\n", "continue", "\n", "", "continue", "\n", "\n", "## Conflict constraints", "\n", "", "for", "index", ",", "conflictLinePair", "in", "enumerate", "(", "conflictWallLinePairs", ")", ":", "\n", "      ", "model", "+=", "(", "w_l", "[", "conflictLinePair", "[", "0", "]", "]", "+", "w_l", "[", "conflictLinePair", "[", "1", "]", "]", "<=", "1", ",", "'conflict_wall_line_pair_'", "+", "str", "(", "index", ")", ")", "\n", "continue", "\n", "\n", "", "for", "index", ",", "conflictLinePair", "in", "enumerate", "(", "conflictDoorLinePairs", ")", ":", "\n", "      ", "model", "+=", "(", "d_l", "[", "conflictLinePair", "[", "0", "]", "]", "+", "d_l", "[", "conflictLinePair", "[", "1", "]", "]", "<=", "1", ",", "'conflict_door_line_pair_'", "+", "str", "(", "index", ")", ")", "\n", "continue", "\n", "\n", "", "for", "index", ",", "conflictIconPair", "in", "enumerate", "(", "conflictIconPairs", ")", ":", "\n", "      ", "model", "+=", "(", "i_r", "[", "conflictIconPair", "[", "0", "]", "]", "+", "i_r", "[", "conflictIconPair", "[", "1", "]", "]", "<=", "1", ",", "'conflict_icon_pair_'", "+", "str", "(", "index", ")", ")", "\n", "continue", "\n", "\n", "", "for", "index", ",", "conflictLinePair", "in", "enumerate", "(", "conflictIconWallPairs", ")", ":", "\n", "      ", "model", "+=", "(", "i_r", "[", "conflictLinePair", "[", "0", "]", "]", "+", "w_l", "[", "conflictLinePair", "[", "1", "]", "]", "<=", "1", ",", "'conflict_icon_wall_pair_'", "+", "str", "(", "index", ")", ")", "\n", "continue", "\n", "\n", "\n", "## Door wall constraints (a door must sit on one and only one wall)", "\n", "", "for", "doorIndex", ",", "lines", "in", "enumerate", "(", "doorWallLineMap", ")", ":", "\n", "      ", "if", "len", "(", "lines", ")", "==", "0", ":", "\n", "        ", "model", "+=", "(", "d_l", "[", "doorIndex", "]", "==", "0", ",", "'door_not_on_walls_'", "+", "str", "(", "doorIndex", ")", ")", "\n", "continue", "\n", "", "lineSum", "=", "LpAffineExpression", "(", ")", "\n", "for", "lineIndex", "in", "lines", ":", "\n", "        ", "lineSum", "+=", "w_l", "[", "lineIndex", "]", "\n", "continue", "\n", "", "model", "+=", "(", "d_l", "[", "doorIndex", "]", "<=", "lineSum", ",", "'d_wall_line_sum_'", "+", "str", "(", "doorIndex", ")", ")", "\n", "continue", "\n", "\n", "", "doorWallPointMap", "=", "findLinePointMap", "(", "doorPoints", ",", "doorLines", ",", "wallPoints", ",", "gap", "=", "GAPS", "[", "'door_point_conflict'", "]", ")", "\n", "for", "doorIndex", ",", "points", "in", "enumerate", "(", "doorWallPointMap", ")", ":", "\n", "      ", "if", "len", "(", "points", ")", "==", "0", ":", "\n", "        ", "continue", "\n", "", "pointSum", "=", "LpAffineExpression", "(", ")", "\n", "for", "pointIndex", "in", "points", ":", "\n", "        ", "model", "+=", "(", "d_l", "[", "doorIndex", "]", "+", "w_p", "[", "pointIndex", "]", "<=", "1", ",", "'door_on_two_walls_'", "+", "str", "(", "doorIndex", ")", "+", "'_'", "+", "str", "(", "pointIndex", ")", ")", "\n", "continue", "\n", "", "continue", "\n", "\n", "", "if", "False", ":", "\n", "#model += (w_l[6] == 1)", "\n", "      ", "pass", "\n", "\n", "", "model", "+=", "obj", "\n", "model", ".", "solve", "(", ")", "\n", "\n", "#model.writeLP(debug_prefix + '/model.lp')", "\n", "print", "(", "'Optimization information'", ",", "LpStatus", "[", "model", ".", "status", "]", ",", "value", "(", "model", ".", "objective", ")", ")", "\n", "\n", "if", "LpStatus", "[", "model", ".", "status", "]", "==", "'Optimal'", ":", "\n", "      ", "filteredWallLines", "=", "[", "]", "\n", "filteredWallLabels", "=", "[", "]", "\n", "filteredWallTypes", "=", "[", "]", "\n", "wallPointLabels", "=", "[", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", "for", "pointIndex", "in", "range", "(", "len", "(", "wallPoints", ")", ")", "]", "\n", "\n", "for", "lineIndex", ",", "lineVar", "in", "enumerate", "(", "w_l", ")", ":", "\n", "        ", "if", "lineVar", ".", "varValue", "<", "0.5", ":", "\n", "          ", "continue", "\n", "", "filteredWallLines", ".", "append", "(", "wallLines", "[", "lineIndex", "]", ")", "\n", "\n", "filteredWallTypes", ".", "append", "(", "0", ")", "\n", "\n", "labels", "=", "[", "11", ",", "11", "]", "\n", "for", "direction", "in", "range", "(", "2", ")", ":", "\n", "          ", "for", "label", "in", "range", "(", "NUM_ROOMS", ")", ":", "\n", "            ", "if", "l_dir_labels", "[", "lineIndex", "]", "[", "direction", "]", "[", "label", "]", ".", "varValue", ">", "0.5", ":", "\n", "              ", "labels", "[", "direction", "]", "=", "label", "\n", "break", "\n", "", "continue", "\n", "", "continue", "\n", "\n", "", "filteredWallLabels", ".", "append", "(", "labels", ")", "\n", "print", "(", "'wall'", ",", "lineIndex", ",", "labels", ",", "[", "np", ".", "array", "(", "wallPoints", "[", "pointIndex", "]", "[", ":", "2", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", ".", "tolist", "(", ")", "for", "pointIndex", "in", "wallLines", "[", "lineIndex", "]", "]", ",", "wallLineNeighbors", "[", "lineIndex", "]", "[", "0", "]", ".", "keys", "(", ")", ",", "wallLineNeighbors", "[", "lineIndex", "]", "[", "1", "]", ".", "keys", "(", ")", ")", "\n", "line", "=", "wallLines", "[", "lineIndex", "]", "\n", "lineDim", "=", "calcLineDim", "(", "wallPoints", ",", "line", ")", "\n", "if", "lineDim", "==", "0", ":", "\n", "          ", "wallPointLabels", "[", "line", "[", "0", "]", "]", "[", "0", "]", "=", "labels", "[", "0", "]", "\n", "wallPointLabels", "[", "line", "[", "0", "]", "]", "[", "1", "]", "=", "labels", "[", "1", "]", "\n", "wallPointLabels", "[", "line", "[", "1", "]", "]", "[", "3", "]", "=", "labels", "[", "0", "]", "\n", "wallPointLabels", "[", "line", "[", "1", "]", "]", "[", "2", "]", "=", "labels", "[", "1", "]", "\n", "", "else", ":", "\n", "          ", "wallPointLabels", "[", "line", "[", "0", "]", "]", "[", "1", "]", "=", "labels", "[", "0", "]", "\n", "wallPointLabels", "[", "line", "[", "0", "]", "]", "[", "2", "]", "=", "labels", "[", "1", "]", "\n", "wallPointLabels", "[", "line", "[", "1", "]", "]", "[", "0", "]", "=", "labels", "[", "0", "]", "\n", "wallPointLabels", "[", "line", "[", "1", "]", "]", "[", "3", "]", "=", "labels", "[", "1", "]", "\n", "pass", "\n", "", "continue", "\n", "\n", "", "if", "not", "gt", ":", "\n", "        ", "adjustPoints", "(", "wallPoints", ",", "filteredWallLines", ")", "\n", "mergePoints", "(", "wallPoints", ",", "filteredWallLines", ")", "\n", "adjustPoints", "(", "wallPoints", ",", "filteredWallLines", ")", "\n", "filteredWallLabels", "=", "[", "filteredWallLabels", "[", "lineIndex", "]", "for", "lineIndex", "in", "range", "(", "len", "(", "filteredWallLines", ")", ")", "if", "filteredWallLines", "[", "lineIndex", "]", "[", "0", "]", "!=", "filteredWallLines", "[", "lineIndex", "]", "[", "1", "]", "]", "\n", "filteredWallLines", "=", "[", "line", "for", "line", "in", "filteredWallLines", "if", "line", "[", "0", "]", "!=", "line", "[", "1", "]", "]", "\n", "pass", "\n", "\n", "\n", "", "drawLines", "(", "output_prefix", "+", "'result_line.png'", ",", "width", ",", "height", ",", "wallPoints", ",", "filteredWallLines", ",", "filteredWallLabels", ",", "lineColor", "=", "255", ")", "\n", "#resultImage = drawLines('', width, height, wallPoints, filteredWallLines, filteredWallLabels, None, lineWidth=5, lineColor=255)", "\n", "\n", "filteredDoorLines", "=", "[", "]", "\n", "filteredDoorTypes", "=", "[", "]", "\n", "for", "lineIndex", ",", "lineVar", "in", "enumerate", "(", "d_l", ")", ":", "\n", "        ", "if", "lineVar", ".", "varValue", "<", "0.5", ":", "\n", "          ", "continue", "\n", "", "print", "(", "(", "'door'", ",", "lineIndex", ",", "[", "doorPoints", "[", "pointIndex", "]", "[", ":", "2", "]", "for", "pointIndex", "in", "doorLines", "[", "lineIndex", "]", "]", ")", ")", "\n", "filteredDoorLines", ".", "append", "(", "doorLines", "[", "lineIndex", "]", ")", "\n", "\n", "filteredDoorTypes", ".", "append", "(", "0", ")", "\n", "continue", "\n", "\n", "", "filteredDoorWallMap", "=", "findLineMapSingle", "(", "doorPoints", ",", "filteredDoorLines", ",", "wallPoints", ",", "filteredWallLines", ",", "gap", "=", "GAPS", "[", "'wall_door_neighbor'", "]", ")", "\n", "adjustDoorPoints", "(", "doorPoints", ",", "filteredDoorLines", ",", "wallPoints", ",", "filteredWallLines", ",", "filteredDoorWallMap", ")", "\n", "drawLines", "(", "output_prefix", "+", "'result_door.png'", ",", "width", ",", "height", ",", "doorPoints", ",", "filteredDoorLines", ",", "lineColor", "=", "255", ")", "\n", "\n", "filteredIcons", "=", "[", "]", "\n", "filteredIconTypes", "=", "[", "]", "\n", "for", "iconIndex", ",", "iconVar", "in", "enumerate", "(", "i_r", ")", ":", "\n", "        ", "if", "iconVar", ".", "varValue", "<", "0.5", ":", "\n", "          ", "continue", "\n", "\n", "", "filteredIcons", ".", "append", "(", "icons", "[", "iconIndex", "]", ")", "\n", "iconType", "=", "-", "1", "\n", "for", "typeIndex", "in", "range", "(", "NUM_ICONS", ")", ":", "\n", "          ", "if", "i_types", "[", "iconIndex", "]", "[", "typeIndex", "]", ".", "varValue", ">", "0.5", ":", "\n", "            ", "iconType", "=", "typeIndex", "\n", "break", "\n", "", "continue", "\n", "\n", "", "print", "(", "(", "'icon'", ",", "iconIndex", ",", "iconType", ",", "[", "iconPoints", "[", "pointIndex", "]", "[", ":", "2", "]", "for", "pointIndex", "in", "icons", "[", "iconIndex", "]", "]", ")", ")", "\n", "\n", "filteredIconTypes", ".", "append", "(", "iconType", ")", "\n", "continue", "\n", "\n", "#adjustPoints(iconPoints, filteredIconLines)", "\n", "#drawLines(output_prefix + 'lines_results_icon.png', width, height, iconPoints, filteredIconLines)", "\n", "", "drawRectangles", "(", "output_prefix", "+", "'result_icon.png'", ",", "width", ",", "height", ",", "iconPoints", ",", "filteredIcons", ",", "filteredIconTypes", ")", "\n", "\n", "#resultImage = drawLines('', width, height, doorPoints, filteredDoorLines, [], resultImage, lineWidth=3, lineColor=0)", "\n", "#resultImage = drawRectangles('', width, height, iconPoints, filteredIcons, filteredIconTypes, 2, resultImage)", "\n", "#cv2.imwrite(output_prefix + 'result.png', resultImage)", "\n", "\n", "filteredWallPoints", "=", "[", "]", "\n", "filteredWallPointLabels", "=", "[", "]", "\n", "orientationMap", "=", "{", "}", "\n", "for", "pointType", ",", "orientationOrientations", "in", "enumerate", "(", "POINT_ORIENTATIONS", ")", ":", "\n", "        ", "for", "orientation", ",", "orientations", "in", "enumerate", "(", "orientationOrientations", ")", ":", "\n", "          ", "orientationMap", "[", "orientations", "]", "=", "orientation", "\n", "\n", "", "", "for", "pointIndex", ",", "point", "in", "enumerate", "(", "wallPoints", ")", ":", "\n", "        ", "orientations", "=", "[", "]", "\n", "orientationLines", "=", "{", "}", "\n", "for", "orientation", ",", "lines", "in", "wallPointOrientationLinesMap", "[", "pointIndex", "]", ".", "items", "(", ")", ":", "\n", "          ", "orientationLine", "=", "-", "1", "\n", "for", "lineIndex", "in", "lines", ":", "\n", "            ", "if", "w_l", "[", "lineIndex", "]", ".", "varValue", ">", "0.5", ":", "\n", "              ", "orientations", ".", "append", "(", "orientation", ")", "\n", "orientationLines", "[", "orientation", "]", "=", "lineIndex", "\n", "break", "\n", "", "continue", "\n", "", "continue", "\n", "\n", "", "if", "len", "(", "orientations", ")", "==", "0", ":", "\n", "          ", "continue", "\n", "\n", "#print((pointIndex, orientationLines))", "\n", "\n", "", "if", "len", "(", "orientations", ")", "<", "len", "(", "wallPointOrientationLinesMap", "[", "pointIndex", "]", ")", ":", "\n", "          ", "print", "(", "'invalid point'", ",", "pointIndex", ",", "orientations", ",", "wallPointOrientationLinesMap", "[", "pointIndex", "]", ")", "\n", "print", "(", "wallPoints", "[", "pointIndex", "]", ")", "\n", "wallPoints", "[", "pointIndex", "]", "[", "2", "]", "=", "len", "(", "orientations", ")", "-", "1", "\n", "orientations", "=", "tuple", "(", "orientations", ")", "\n", "if", "orientations", "not", "in", "orientationMap", ":", "\n", "            ", "continue", "\n", "", "wallPoints", "[", "pointIndex", "]", "[", "3", "]", "=", "orientationMap", "[", "orientations", "]", "\n", "print", "(", "wallPoints", "[", "pointIndex", "]", ")", "\n", "exit", "(", "1", ")", "\n", "pass", "\n", "\n", "", "filteredWallPoints", ".", "append", "(", "wallPoints", "[", "pointIndex", "]", ")", "\n", "filteredWallPointLabels", ".", "append", "(", "wallPointLabels", "[", "pointIndex", "]", ")", "\n", "continue", "\n", "\n", "\n", "", "with", "open", "(", "output_prefix", "+", "'floorplan.txt'", ",", "'w'", ")", "as", "result_file", ":", "\n", "        ", "result_file", ".", "write", "(", "str", "(", "width", ")", "+", "'\\t'", "+", "str", "(", "height", ")", "+", "'\\n'", ")", "\n", "result_file", ".", "write", "(", "str", "(", "len", "(", "filteredWallLines", ")", ")", "+", "'\\n'", ")", "\n", "for", "wallIndex", ",", "wall", "in", "enumerate", "(", "filteredWallLines", ")", ":", "\n", "          ", "point_1", "=", "wallPoints", "[", "wall", "[", "0", "]", "]", "\n", "point_2", "=", "wallPoints", "[", "wall", "[", "1", "]", "]", "\n", "\n", "result_file", ".", "write", "(", "str", "(", "point_1", "[", "0", "]", ")", "+", "'\\t'", "+", "str", "(", "point_1", "[", "1", "]", ")", "+", "'\\t'", ")", "\n", "result_file", ".", "write", "(", "str", "(", "point_2", "[", "0", "]", ")", "+", "'\\t'", "+", "str", "(", "point_2", "[", "1", "]", ")", "+", "'\\t'", ")", "\n", "result_file", ".", "write", "(", "str", "(", "filteredWallLabels", "[", "wallIndex", "]", "[", "0", "]", ")", "+", "'\\t'", "+", "str", "(", "filteredWallLabels", "[", "wallIndex", "]", "[", "1", "]", ")", "+", "'\\n'", ")", "\n", "\n", "", "for", "doorIndex", ",", "door", "in", "enumerate", "(", "filteredDoorLines", ")", ":", "\n", "          ", "point_1", "=", "doorPoints", "[", "door", "[", "0", "]", "]", "\n", "point_2", "=", "doorPoints", "[", "door", "[", "1", "]", "]", "\n", "\n", "result_file", ".", "write", "(", "str", "(", "point_1", "[", "0", "]", ")", "+", "'\\t'", "+", "str", "(", "point_1", "[", "1", "]", ")", "+", "'\\t'", ")", "\n", "result_file", ".", "write", "(", "str", "(", "point_2", "[", "0", "]", ")", "+", "'\\t'", "+", "str", "(", "point_2", "[", "1", "]", ")", "+", "'\\t'", ")", "\n", "result_file", ".", "write", "(", "'door\\t'", ")", "\n", "result_file", ".", "write", "(", "str", "(", "filteredDoorTypes", "[", "doorIndex", "]", "+", "1", ")", "+", "'\\t1\\n'", ")", "\n", "\n", "", "for", "iconIndex", ",", "icon", "in", "enumerate", "(", "filteredIcons", ")", ":", "\n", "          ", "point_1", "=", "iconPoints", "[", "icon", "[", "0", "]", "]", "\n", "point_2", "=", "iconPoints", "[", "icon", "[", "1", "]", "]", "\n", "point_3", "=", "iconPoints", "[", "icon", "[", "2", "]", "]", "\n", "point_4", "=", "iconPoints", "[", "icon", "[", "3", "]", "]", "\n", "\n", "x_1", "=", "int", "(", "(", "point_1", "[", "0", "]", "+", "point_3", "[", "0", "]", ")", "//", "2", ")", "\n", "x_2", "=", "int", "(", "(", "point_2", "[", "0", "]", "+", "point_4", "[", "0", "]", ")", "//", "2", ")", "\n", "y_1", "=", "int", "(", "(", "point_1", "[", "1", "]", "+", "point_2", "[", "1", "]", ")", "//", "2", ")", "\n", "y_2", "=", "int", "(", "(", "point_3", "[", "1", "]", "+", "point_4", "[", "1", "]", ")", "//", "2", ")", "\n", "\n", "result_file", ".", "write", "(", "str", "(", "x_1", ")", "+", "'\\t'", "+", "str", "(", "y_1", ")", "+", "'\\t'", ")", "\n", "result_file", ".", "write", "(", "str", "(", "x_2", ")", "+", "'\\t'", "+", "str", "(", "y_2", ")", "+", "'\\t'", ")", "\n", "result_file", ".", "write", "(", "iconNumberNameMap", "[", "filteredIconTypes", "[", "iconIndex", "]", "]", "+", "'\\t'", ")", "\n", "#result_file.write(str(iconNumberStyleMap[filteredIconTypes[iconIndex]]) + '\\t')", "\n", "result_file", ".", "write", "(", "'1\\t'", ")", "\n", "result_file", ".", "write", "(", "'1\\n'", ")", "\n", "\n", "", "result_file", ".", "close", "(", ")", "\n", "\n", "\n", "# writePoints(filteredWallPoints, filteredWallPointLabels, output_prefix=output_prefix)", "\n", "\n", "# if len(filteredDoorLines) > 0:", "\n", "#   writeDoors(doorPoints, filteredDoorLines, filteredDoorTypes, output_prefix=output_prefix)", "\n", "#   pass", "\n", "# else:", "\n", "#   try:", "\n", "#     os.remove(output_prefix + 'doors_out.txt')", "\n", "#   except OSError:", "\n", "#     pass", "\n", "\n", "# if len(filteredIcons) > 0:", "\n", "#   writeIcons(iconPoints, filteredIcons, filteredIconTypes, output_prefix=output_prefix)", "\n", "#   pass", "\n", "# else:", "\n", "#   try:", "\n", "#     os.remove(output_prefix + 'icons_out.txt')", "\n", "#   except OSError:", "\n", "#     pass", "\n", "#   pass", "\n", "\n", "", "", "else", ":", "\n", "      ", "print", "(", "'infeasible'", ")", "\n", "#model.ComputeIIS()", "\n", "#model.write(\"test/model.ilp\")", "\n", "return", "{", "}", "\n", "pass", "\n", "\n", "", "", "result_dict", "=", "{", "'wall'", ":", "[", "wallPoints", ",", "filteredWallLines", ",", "filteredWallLabels", "]", ",", "'door'", ":", "[", "doorPoints", ",", "filteredDoorLines", ",", "[", "]", "]", ",", "'icon'", ":", "[", "iconPoints", ",", "filteredIcons", ",", "filteredIconTypes", "]", "}", "\n", "return", "result_dict", "\n", "", ""]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.evaluate.blockPrint": [[8, 11], ["open"], "function", ["None"], ["def", "blockPrint", "(", ")", ":", "\n", "    ", "return", "\n", "sys", ".", "stdout", "=", "open", "(", "os", ".", "devnull", ",", "'w'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.evaluate.enablePrint": [[13, 16], ["None"], "function", ["None"], ["", "def", "enablePrint", "(", ")", ":", "\n", "    ", "return", "\n", "sys", ".", "stdout", "=", "sys", ".", "__stdout__", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.evaluate.evaluate": [[17, 149], ["os.path.exists", "tf.reset_default_graph", "RecordReader.getDatasetVal", "RecordReader.getDatasetVal.make_one_shot_iterator", "dataset.make_one_shot_iterator.get_next", "train.build_graph", "train.build_loss", "tf.ConfigProto", "evaluate.evaluateBatch", "os.path.exists", "os.system", "os.mkdir", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "evaluate.evaluateBatch", "os.path.exists", "os.system", "filenames.append", "filenames.append", "filenames.append", "filenames.append", "filenames.append", "tf.Session", "sess.run", "tflearn.is_training", "tf.train.Saver", "CORNER_RANGES.keys", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.save", "numpy.save", "tf.global_variables", "tf.global_variables_initializer", "tf.train.Saver.restore", "tf.train.Saver.restore", "numpy.zeros", "xrange", "sess.run", "enumerate", "print", "print", "gt.iteritems", "pred.iteritems", "numpy.concatenate", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.RecordReader.getDatasetVal", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.build_graph", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.build_loss", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.evaluate.evaluateBatch", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.evaluate.evaluateBatch"], ["", "def", "evaluate", "(", "options", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "options", ".", "test_dir", ")", ":", "\n", "        ", "os", ".", "system", "(", "\"mkdir -p %s\"", "%", "options", ".", "test_dir", ")", "\n", "pass", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "options", ".", "test_dir", "+", "'/dummy'", ")", ":", "\n", "#os.rmdir(options.test_dir + '/dummy')", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "os", ".", "mkdir", "(", "options", ".", "test_dir", "+", "'/dummy'", ")", "\n", "pass", "\n", "\n", "", "if", "options", ".", "useCache", "==", "2", "and", "os", ".", "path", ".", "exists", "(", "options", ".", "test_dir", "+", "'/dummy/gt_dict.npy'", ")", "and", "os", ".", "path", ".", "exists", "(", "options", ".", "test_dir", "+", "'/dummy/pred_dict.npy'", ")", ":", "\n", "        ", "return", "\n", "\n", "", "if", "options", ".", "useCache", "==", "1", "and", "os", ".", "path", ".", "exists", "(", "options", ".", "test_dir", "+", "'/dummy/gt_dict.npy'", ")", "and", "os", ".", "path", ".", "exists", "(", "options", ".", "test_dir", "+", "'/dummy/pred_dict.npy'", ")", ":", "\n", "        ", "evaluateBatch", "(", "options", ")", "\n", "return", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "options", ".", "test_dir", ")", ":", "\n", "        ", "os", ".", "system", "(", "\"mkdir -p %s\"", "%", "options", ".", "test_dir", ")", "\n", "pass", "\n", "\n", "#print(options.checkpoint_dir)", "\n", "", "tf", ".", "reset_default_graph", "(", ")", "\n", "\n", "filenames", "=", "[", "]", "\n", "if", "'0'", "in", "options", ".", "dataset", ":", "\n", "        ", "filenames", ".", "append", "(", "'data/Syn_val.tfrecords'", ")", "\n", "", "if", "'1'", "in", "options", ".", "dataset", ":", "\n", "        ", "filenames", ".", "append", "(", "'data/Tango_val.tfrecords'", ")", "\n", "pass", "\n", "", "if", "'2'", "in", "options", ".", "dataset", ":", "\n", "        ", "filenames", ".", "append", "(", "'data/ScanNet_val.tfrecords'", ")", "\n", "pass", "\n", "", "if", "'3'", "in", "options", ".", "dataset", ":", "\n", "        ", "filenames", ".", "append", "(", "'data/Matterport_val.tfrecords'", ")", "\n", "pass", "\n", "", "if", "'4'", "in", "options", ".", "dataset", ":", "\n", "        ", "filenames", ".", "append", "(", "'data/SUNCG_val.tfrecords'", ")", "\n", "pass", "\n", "\n", "", "dataset", "=", "getDatasetVal", "(", "filenames", ",", "''", ",", "'4'", "in", "options", ".", "branches", ",", "options", ".", "batchSize", ")", "\n", "\n", "\n", "iterator", "=", "dataset", ".", "make_one_shot_iterator", "(", ")", "\n", "input_dict", ",", "gt_dict", "=", "iterator", ".", "get_next", "(", ")", "\n", "\n", "\n", "pred_dict", ",", "debug_dict", "=", "build_graph", "(", "options", ",", "input_dict", ")", "\n", "dataset_flag", "=", "input_dict", "[", "'flags'", "]", "[", "0", ",", "0", "]", "\n", "flags", "=", "input_dict", "[", "'flags'", "]", "[", ":", ",", "1", "]", "\n", "loss", ",", "loss_list", "=", "build_loss", "(", "options", ",", "pred_dict", ",", "gt_dict", ",", "dataset_flag", ",", "debug_dict", ",", "input_dict", "[", "'flags'", "]", ")", "\n", "\n", "var_to_restore", "=", "[", "v", "for", "v", "in", "tf", ".", "global_variables", "(", ")", "]", "\n", "\n", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "config", ".", "allow_soft_placement", "=", "True", "\n", "#config.log_device_placement=True", "\n", "\n", "statisticsSum", "=", "{", "k", ":", "[", "0.0", ",", "0.0", ",", "0.0", "]", "for", "k", "in", "[", "'wall'", ",", "'door'", ",", "'icon'", ",", "'room'", "]", "}", "\n", "\n", "numbers", "=", "{", "}", "\n", "\n", "with", "tf", ".", "Session", "(", "config", "=", "config", ")", "as", "sess", ":", "\n", "        ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "tflearn", ".", "is_training", "(", "False", ")", "\n", "#var_to_restore = [v for v in var_to_restore if 'pred_room' not in v.name]", "\n", "var_to_restore", "=", "[", "v", "for", "v", "in", "var_to_restore", "if", "'is_training'", "not", "in", "v", ".", "name", "]", "\n", "loader", "=", "tf", ".", "train", ".", "Saver", "(", "var_to_restore", ")", "\n", "if", "options", ".", "startIteration", "<=", "0", ":", "\n", "            ", "loader", ".", "restore", "(", "sess", ",", "\"%s/checkpoint.ckpt\"", "%", "(", "options", ".", "checkpoint_dir", ")", ")", "\n", "", "else", ":", "\n", "            ", "loader", ".", "restore", "(", "sess", ",", "\"%s/checkpoint_%d.ckpt\"", "%", "(", "options", ".", "checkpoint_dir", ",", "options", ".", "startIteration", ")", ")", "\n", "pass", "\n", "\n", "#if tf.train.checkpoint_exists(\"%s/%s.ckpt\"%(dumpdir,keyname)):", "\n", "#saver.restore(sess,\"%s/%s.ckpt\"%(dumpdir,keyname))", "\n", "#pass", "\n", "\n", "", "MOVING_AVERAGE_DECAY", "=", "1", "\n", "losses", "=", "[", "0.", ",", "0.", ",", "0.", "]", "\n", "acc", "=", "[", "1e-4", ",", "1e-4", ",", "1e-4", "]", "\n", "\n", "cornerCounters", "=", "{", "}", "\n", "for", "cornerType", "in", "CORNER_RANGES", ".", "keys", "(", ")", ":", "\n", "            ", "cornerCounters", "[", "cornerType", "]", "=", "np", ".", "zeros", "(", "3", ")", "\n", "pass", "\n", "\n", "", "globalCornerCounter", "=", "np", ".", "zeros", "(", "3", ")", "\n", "iconCounter", "=", "np", ".", "zeros", "(", "2", ")", "\n", "roomCounter", "=", "np", ".", "zeros", "(", "2", ")", "\n", "\n", "numImages", "=", "0", "\n", "try", ":", "\n", "            ", "for", "iteration", "in", "xrange", "(", "options", ".", "numTestingImages", ")", ":", "\n", "                ", "total_loss", ",", "losses", ",", "dataset", ",", "image_flags", ",", "gt", ",", "pred", ",", "debug", ",", "inp", "=", "sess", ".", "run", "(", "[", "loss", ",", "loss_list", ",", "dataset_flag", ",", "flags", ",", "gt_dict", ",", "pred_dict", ",", "debug_dict", ",", "input_dict", "]", ")", "\n", "\n", "for", "lossIndex", ",", "value", "in", "enumerate", "(", "losses", ")", ":", "\n", "                    ", "losses", "[", "lossIndex", "]", "=", "losses", "[", "lossIndex", "]", "*", "MOVING_AVERAGE_DECAY", "+", "value", "\n", "acc", "[", "lossIndex", "]", "=", "acc", "[", "lossIndex", "]", "*", "MOVING_AVERAGE_DECAY", "+", "1", "\n", "continue", "\n", "", "print", "(", "'testing'", ",", "losses", "[", "0", "]", "/", "acc", "[", "0", "]", ",", "losses", "[", "1", "]", "/", "acc", "[", "1", "]", ",", "losses", "[", "2", "]", "/", "acc", "[", "2", "]", ")", "\n", "\n", "gt", "=", "{", "'corner'", ":", "gt", "[", "'corner'", "]", ",", "'corner_values'", ":", "gt", "[", "'corner_values'", "]", ",", "'icon'", ":", "gt", "[", "'icon'", "]", ",", "'room'", ":", "gt", "[", "'room'", "]", ",", "'density'", ":", "debug", "[", "'x0_topdown'", "]", "[", ":", ",", ":", ",", ":", ",", "-", "1", "]", ",", "'image_path'", ":", "inp", "[", "'image_path'", "]", ",", "'num_corners'", ":", "gt", "[", "'num_corners'", "]", ",", "'image_flags'", ":", "image_flags", "}", "\n", "if", "iteration", "==", "0", ":", "\n", "                    ", "gtAll", "=", "gt", "\n", "predAll", "=", "pred", "\n", "", "else", ":", "\n", "                    ", "for", "k", ",", "v", "in", "gt", ".", "iteritems", "(", ")", ":", "\n", "                        ", "gtAll", "[", "k", "]", "=", "np", ".", "concatenate", "(", "[", "gtAll", "[", "k", "]", ",", "v", "]", ",", "axis", "=", "0", ")", "\n", "continue", "\n", "", "for", "k", ",", "v", "in", "pred", ".", "iteritems", "(", ")", ":", "\n", "                        ", "predAll", "[", "k", "]", "=", "np", ".", "concatenate", "(", "[", "predAll", "[", "k", "]", ",", "v", "]", ",", "axis", "=", "0", ")", "\n", "continue", "\n", "", "pass", "\n", "", "continue", "\n", "", "", "except", "tf", ".", "errors", ".", "OutOfRangeError", ":", "\n", "            ", "print", "(", "'Finish testing'", ")", "\n", "pass", "\n", "\n", "", "pass", "\n", "\n", "", "if", "options", ".", "useCache", "!=", "-", "1", ":", "\n", "        ", "np", ".", "save", "(", "options", ".", "test_dir", "+", "'/dummy/gt_dict.npy'", ",", "gtAll", ")", "\n", "np", ".", "save", "(", "options", ".", "test_dir", "+", "'/dummy/pred_dict.npy'", ",", "predAll", ")", "\n", "pass", "\n", "", "if", "options", ".", "useCache", "==", "-", "2", ":", "\n", "        ", "return", "\n", "\n", "", "evaluateBatch", "(", "options", ",", "gtAll", ",", "predAll", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.evaluate.evaluateBatch": [[150, 417], ["xrange", "print", "print", "numpy.save", "softmax", "sigmoid", "sigmoid", "sigmoid", "numpy.minimum().astype", "numpy.stack", "softmax", "softmax", "numpy.ones", "numpy.ones", "numpy.ones", "cv2.imwrite", "names.append", "print", "numpy.load", "numpy.load", "numpy.load", "numpy.concatenate", "numpy.minimum", "drawSegmentationImage", "cv2.imwrite", "drawSegmentationImage", "cv2.imwrite", "numpy.max", "plt.get_cmap", "plt.get_cmap.", "numpy.delete", "cv2.imwrite", "drawSegmentationImage", "cv2.imwrite", "drawSegmentationImage", "cv2.imwrite", "drawSegmentationImage", "cv2.imwrite", "drawSegmentationImage", "cv2.imwrite", "drawSegmentationImage", "cv2.imwrite", "drawSegmentationImage", "cv2.imwrite", "drawSegmentationImage", "cv2.imwrite", "drawSegmentationImage", "cv2.imwrite", "xrange", "getOrientationCorners", "QP.reconstructFloorplan", "QP.reconstructFloorplan", "QP.findMatches", "print", "print", "print", "QP.findMatches.iteritems", "statisticsSum.iteritems", "numpy.load", "numpy.load", "numpy.load", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "cv2.imwrite", "evaluate.blockPrint", "segmentation2Heatmaps", "segmentation2Heatmaps", "os.mkdir", "print", "resizeResult", "drawResultImageFinal", "cv2.imwrite", "resizeResult", "drawResultImageFinal", "cv2.imwrite", "writeRepresentation", "writeRepresentation", "cv2.imwrite", "cv2.imwrite", "exit", "drawResultImage", "cv2.imwrite", "cv2.imwrite", "drawResultImage", "cv2.imwrite", "cv2.imwrite", "evaluate.enablePrint", "len", "exit", "float", "max", "float", "max", "options.test_dir.replace", "numpy.load", "numpy.load", "numpy.load", "str", "cv2.dilate", "resizeResult", "drawResultImageFinal", "cv2.imwrite", "resizeResult", "drawResultImageFinal", "cv2.imwrite", "xrange", "print", "options.test_dir.replace().replace", "options.test_dir.replace().replace", "options.test_dir.replace", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "drawMaskImage", "numpy.ones", "QP.findMatches.iteritems", "options.test_dir.replace", "options.test_dir.replace", "options.test_dir.replace().replace", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "float", "max", "float", "max", "options.test_dir.replace", "options.test_dir.replace", "options.test_dir.replace"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.softmax", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.sigmoid", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.sigmoid", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.sigmoid", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.softmax", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.softmax", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.drawSegmentationImage", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.drawSegmentationImage", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.drawSegmentationImage", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.drawSegmentationImage", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.drawSegmentationImage", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.drawSegmentationImage", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.drawSegmentationImage", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.drawSegmentationImage", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.drawSegmentationImage", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.drawSegmentationImage", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.getOrientationCorners", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.reconstructFloorplan", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.reconstructFloorplan", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.findMatches", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.evaluate.blockPrint", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.segmentation2Heatmaps", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.segmentation2Heatmaps", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.resizeResult", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawResultImageFinal", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.resizeResult", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawResultImageFinal", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.writeRepresentation", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.writeRepresentation", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawResultImage", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawResultImage", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.evaluate.enablePrint", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.resizeResult", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawResultImageFinal", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.resizeResult", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawResultImageFinal", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.drawMaskImage"], ["", "def", "evaluateBatch", "(", "options", ",", "gt_dict", "=", "None", ",", "pred_dict", "=", "None", ")", ":", "\n", "    ", "datasetFlag", "=", "1", "\n", "if", "options", ".", "useCache", "!=", "-", "1", ":", "\n", "        ", "if", "options", ".", "loss", "!=", "'5'", ":", "\n", "            ", "gt_dict", "=", "np", ".", "load", "(", "options", ".", "test_dir", "+", "'/dummy/gt_dict.npy'", ")", "[", "(", ")", "]", "\n", "pred_dict", "=", "np", ".", "load", "(", "options", ".", "test_dir", "+", "'/dummy/pred_dict.npy'", ")", "[", "(", ")", "]", "\n", "", "else", ":", "\n", "            ", "gt_dict", "=", "np", ".", "load", "(", "options", ".", "test_dir", ".", "replace", "(", "'loss5'", ",", "'loss0'", ")", "+", "'/dummy/gt_dict.npy'", ")", "[", "(", ")", "]", "\n", "pred_wc", "=", "np", ".", "load", "(", "options", ".", "test_dir", ".", "replace", "(", "'loss5'", ",", "'loss0'", ")", "+", "'/dummy/pred_dict.npy'", ")", "[", "(", ")", "]", "[", "'corner'", "]", "[", ":", ",", ":", ",", ":", ",", ":", "NUM_WALL_CORNERS", "]", "\n", "pred_oc", "=", "np", ".", "load", "(", "options", ".", "test_dir", ".", "replace", "(", "'loss5'", ",", "'loss1'", ")", "+", "'/dummy/pred_dict.npy'", ")", "[", "(", ")", "]", "[", "'corner'", "]", "[", ":", ",", ":", ",", ":", ",", "NUM_WALL_CORNERS", ":", "NUM_WALL_CORNERS", "+", "4", "]", "\n", "pred_ic", "=", "np", ".", "load", "(", "options", ".", "test_dir", ".", "replace", "(", "'loss5'", ",", "'loss2'", ")", ".", "replace", "(", "'hybrid14'", ",", "'hybrid1'", ")", "+", "'/dummy/pred_dict.npy'", ")", "[", "(", ")", "]", "[", "'corner'", "]", "[", ":", ",", ":", ",", ":", ",", "NUM_WALL_CORNERS", "+", "4", ":", "NUM_WALL_CORNERS", "+", "8", "]", "\n", "pred_icon", "=", "np", ".", "load", "(", "options", ".", "test_dir", ".", "replace", "(", "'loss5'", ",", "'loss3'", ")", ".", "replace", "(", "'hybrid14'", ",", "'hybrid1'", ")", "+", "'/dummy/pred_dict.npy'", ")", "[", "(", ")", "]", "[", "'icon'", "]", "\n", "pred_room", "=", "np", ".", "load", "(", "options", ".", "test_dir", ".", "replace", "(", "'loss5'", ",", "'loss4'", ")", ".", "replace", "(", "'hybrid14'", ",", "'hybrid1'", ")", "+", "'/dummy/pred_dict.npy'", ")", "[", "(", ")", "]", "[", "'room'", "]", "\n", "pred_dict", "=", "{", "'corner'", ":", "np", ".", "concatenate", "(", "[", "pred_wc", ",", "pred_oc", ",", "pred_ic", "]", ",", "axis", "=", "-", "1", ")", ",", "'icon'", ":", "pred_icon", ",", "'room'", ":", "pred_room", "}", "\n", "", "pass", "\n", "\n", "", "if", "options", ".", "separateIconLoss", ":", "\n", "        ", "pred_icon_separate", "=", "softmax", "(", "np", ".", "load", "(", "options", ".", "test_dir", ".", "replace", "(", "'wsf'", ",", "'wsf_loss3'", ")", "+", "'/dummy/pred_dict.npy'", ")", "[", "(", ")", "]", "[", "'icon'", "]", ")", "\n", "pass", "\n", "#pred_dict['icon'] = np.load(options.test_dir.replace('wsf', 'wsf_loss3').replace('hybrid1', 'hybrid14').replace('dataset_1', '') + '/dummy/pred_dict.npy')[()]['icon']", "\n", "#pred_dict['corner'][:, :, :, NUM_WALL_CORNERS + 4:NUM_WALL_CORNERS + 8] = np.load(options.test_dir.replace('wsf', 'wsf_loss2') + '/dummy/pred_dict.npy')[()]['corner'][:, :, :, NUM_WALL_CORNERS + 4:NUM_WALL_CORNERS + 8]", "\n", "#pass", "\n", "\n", "", "if", "options", ".", "cornerLossType", "!=", "'mse'", ":", "\n", "        ", "threshold", "=", "np", ".", "ones", "(", "(", "HEIGHT", ",", "WIDTH", ",", "1", ")", ")", "*", "0.5", "\n", "", "else", ":", "\n", "        ", "threshold", "=", "np", ".", "ones", "(", "(", "HEIGHT", ",", "WIDTH", ",", "1", ")", ")", "*", "0.5", "# HEATMAP_SCALE / 2", "\n", "pass", "\n", "\n", "", "statisticsSum", "=", "{", "k", ":", "[", "0.0", ",", "0.0", ",", "0.0", "]", "for", "k", "in", "[", "'wall'", ",", "'door'", ",", "'icon'", ",", "'room'", ",", "'neighbor'", ",", "'neighbor_all'", "]", "}", "\n", "#print(pred_dict['corner'].max())", "\n", "pred_wc", "=", "pred_dict", "[", "'corner'", "]", "[", ":", ",", ":", ",", ":", ",", ":", "NUM_WALL_CORNERS", "]", "\n", "pred_oc", "=", "pred_dict", "[", "'corner'", "]", "[", ":", ",", ":", ",", ":", ",", "NUM_WALL_CORNERS", ":", "NUM_WALL_CORNERS", "+", "4", "]", "\n", "pred_ic", "=", "pred_dict", "[", "'corner'", "]", "[", ":", ",", ":", ",", ":", ",", "NUM_WALL_CORNERS", "+", "4", ":", "NUM_WALL_CORNERS", "+", "8", "]", "\n", "\n", "if", "options", ".", "branches", "!=", "'5'", ":", "\n", "        ", "pred_wc", "=", "sigmoid", "(", "pred_wc", ")", "\n", "pred_oc", "=", "sigmoid", "(", "pred_oc", ")", "\n", "pred_ic", "=", "sigmoid", "(", "pred_ic", ")", "\n", "", "else", ":", "\n", "        ", "threshold", "=", "np", ".", "ones", "(", "(", "HEIGHT", ",", "WIDTH", ",", "1", ")", ")", "*", "0.3", "\n", "pass", "\n", "\n", "", "gt_wc", "=", "gt_dict", "[", "'corner'", "]", "[", ":", ",", ":", ",", ":", ",", ":", "NUM_WALL_CORNERS", "]", "\n", "gt_oc", "=", "gt_dict", "[", "'corner'", "]", "[", ":", ",", ":", ",", ":", ",", "NUM_WALL_CORNERS", ":", "NUM_WALL_CORNERS", "+", "4", "]", "\n", "gt_ic", "=", "gt_dict", "[", "'corner'", "]", "[", ":", ",", ":", ",", ":", ",", "NUM_WALL_CORNERS", "+", "4", ":", "NUM_WALL_CORNERS", "+", "8", "]", "\n", "\n", "names", "=", "[", "]", "\n", "\n", "for", "batchIndex", "in", "xrange", "(", "gt_dict", "[", "'corner'", "]", ".", "shape", "[", "0", "]", ")", ":", "\n", "#if batchIndex == 0:", "\n", "#continue", "\n", "\n", "#if options.branches == '4' and gt_dict['image_flags'][batchIndex] == 0:", "\n", "        ", "if", "options", ".", "evaluateImage", "and", "gt_dict", "[", "'image_flags'", "]", "[", "batchIndex", "]", "==", "0", ":", "\n", "            ", "continue", "\n", "\n", "", "density", "=", "np", ".", "minimum", "(", "gt_dict", "[", "'density'", "]", "[", "batchIndex", "]", "*", "255", ",", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "density", "=", "np", ".", "stack", "(", "[", "density", ",", "density", ",", "density", "]", ",", "axis", "=", "2", ")", "\n", "\n", "pred_icon", "=", "softmax", "(", "pred_dict", "[", "'icon'", "]", "[", "batchIndex", "]", ")", "\n", "pred_room", "=", "softmax", "(", "pred_dict", "[", "'room'", "]", "[", "batchIndex", "]", ")", "\n", "if", "options", ".", "separateIconLoss", ":", "\n", "            ", "pred_icon", "[", ":", ",", ":", ",", ":", "-", "2", "]", "=", "pred_icon_separate", "[", "batchIndex", "]", "[", ":", ",", ":", ",", ":", "-", "2", "]", "\n", "#pred_icon = pred_icon_separate[batchIndex]", "\n", "pass", "\n", "\n", "", "if", "False", ":", "\n", "#print('batch index', batchIndex)", "\n", "            ", "cv2", ".", "imwrite", "(", "options", ".", "test_dir", "+", "'/'", "+", "str", "(", "batchIndex", ")", "+", "'_density.png'", ",", "density", ")", "\n", "#print('heatmap max value', pred_wc[batchIndex].max())", "\n", "\n", "if", "datasetFlag", "in", "[", "0", ",", "1", ",", "4", "]", ":", "\n", "                ", "cornerImage", "=", "drawSegmentationImage", "(", "np", ".", "concatenate", "(", "[", "threshold", ",", "pred_wc", "[", "batchIndex", "]", "]", ",", "axis", "=", "2", ")", ",", "blackIndex", "=", "0", ")", "\n", "cornerImage", "[", "cornerImage", "==", "0", "]", "=", "density", "[", "cornerImage", "==", "0", "]", "\n", "cv2", ".", "imwrite", "(", "options", ".", "test_dir", "+", "'/'", "+", "str", "(", "batchIndex", ")", "+", "'_corner_pred.png'", ",", "cornerImage", ")", "\n", "\n", "cornerImage", "=", "drawSegmentationImage", "(", "np", ".", "concatenate", "(", "[", "threshold", ",", "gt_wc", "[", "batchIndex", "]", "]", ",", "axis", "=", "2", ")", ",", "blackIndex", "=", "0", ")", "\n", "cornerImage", "[", "cornerImage", "==", "0", "]", "=", "density", "[", "cornerImage", "==", "0", "]", "\n", "cv2", ".", "imwrite", "(", "options", ".", "test_dir", "+", "'/'", "+", "str", "(", "batchIndex", ")", "+", "'_corner_gt.png'", ",", "cornerImage", ")", "\n", "pass", "\n", "\n", "\n", "", "if", "False", ":", "\n", "                ", "corner_heat", "=", "np", ".", "max", "(", "pred_wc", "[", "batchIndex", "]", ",", "axis", "=", "-", "1", ")", "\n", "#print('corner_shape', corner_heat.shape)", "\n", "cmap", "=", "plt", ".", "get_cmap", "(", "'jet'", ")", "\n", "corner_rgba_img", "=", "cmap", "(", "corner_heat", ")", "\n", "corner_rgb_img", "=", "np", ".", "delete", "(", "corner_rgba_img", ",", "3", ",", "2", ")", "\n", "#print('rgb_out', corner_rgb_img.shape, corner_rgb_img.max(), corner_rgb_img.min())", "\n", "corner_rgb_img", "=", "(", "corner_rgb_img", "*", "255", ")", ".", "round", "(", ")", ".", "astype", "(", "'uint8'", ")", "\n", "#print('rgb_out', corner_rgb_img.shape, corner_rgb_img.max())", "\n", "cv2", ".", "imwrite", "(", "options", ".", "test_dir", "+", "'/'", "+", "str", "(", "batchIndex", ")", "+", "'_corner_heatmap.png'", ",", "corner_rgb_img", ")", "\n", "pass", "\n", "\n", "", "if", "datasetFlag", "in", "[", "1", ",", "4", "]", ":", "\n", "                ", "cornerImage", "=", "drawSegmentationImage", "(", "np", ".", "concatenate", "(", "[", "threshold", ",", "pred_oc", "[", "batchIndex", "]", "]", ",", "axis", "=", "2", ")", ",", "blackIndex", "=", "0", ")", "\n", "cornerImage", "[", "cornerImage", "==", "0", "]", "=", "density", "[", "cornerImage", "==", "0", "]", "\n", "cv2", ".", "imwrite", "(", "options", ".", "test_dir", "+", "'/'", "+", "str", "(", "batchIndex", ")", "+", "'_opening_corner_pred.png'", ",", "cornerImage", ")", "\n", "\n", "cornerImage", "=", "drawSegmentationImage", "(", "np", ".", "concatenate", "(", "[", "threshold", ",", "pred_ic", "[", "batchIndex", "]", "]", ",", "axis", "=", "2", ")", ",", "blackIndex", "=", "0", ")", "\n", "cornerImage", "[", "cornerImage", "==", "0", "]", "=", "density", "[", "cornerImage", "==", "0", "]", "\n", "cv2", ".", "imwrite", "(", "options", ".", "test_dir", "+", "'/'", "+", "str", "(", "batchIndex", ")", "+", "'_icon_corner_pred.png'", ",", "cornerImage", ")", "\n", "\n", "\n", "cornerImage", "=", "drawSegmentationImage", "(", "np", ".", "concatenate", "(", "[", "threshold", ",", "gt_oc", "[", "batchIndex", "]", "]", ",", "axis", "=", "2", ")", ",", "blackIndex", "=", "0", ")", "\n", "cornerImage", "[", "cornerImage", "==", "0", "]", "=", "density", "[", "cornerImage", "==", "0", "]", "\n", "cv2", ".", "imwrite", "(", "options", ".", "test_dir", "+", "'/'", "+", "str", "(", "batchIndex", ")", "+", "'_opening_corner_gt.png'", ",", "cornerImage", ")", "\n", "\n", "cornerImage", "=", "drawSegmentationImage", "(", "np", ".", "concatenate", "(", "[", "threshold", ",", "gt_ic", "[", "batchIndex", "]", "]", ",", "axis", "=", "2", ")", ",", "blackIndex", "=", "0", ")", "\n", "cornerImage", "[", "cornerImage", "==", "0", "]", "=", "density", "[", "cornerImage", "==", "0", "]", "\n", "cv2", ".", "imwrite", "(", "options", ".", "test_dir", "+", "'/'", "+", "str", "(", "batchIndex", ")", "+", "'_icon_corner_gt.png'", ",", "cornerImage", ")", "\n", "pass", "\n", "\n", "\n", "", "if", "datasetFlag", "in", "[", "1", ",", "2", ",", "3", ",", "4", "]", ":", "\n", "                ", "icon_density", "=", "drawSegmentationImage", "(", "gt_dict", "[", "'icon'", "]", "[", "batchIndex", "]", ",", "blackIndex", "=", "0", ")", "\n", "icon_density", "[", "icon_density", "==", "0", "]", "=", "density", "[", "icon_density", "==", "0", "]", "\n", "cv2", ".", "imwrite", "(", "options", ".", "test_dir", "+", "'/'", "+", "str", "(", "batchIndex", ")", "+", "'_icon_gt.png'", ",", "icon_density", ")", "\n", "\n", "icon_density", "=", "drawSegmentationImage", "(", "pred_dict", "[", "'icon'", "]", "[", "batchIndex", "]", ",", "blackIndex", "=", "0", ")", "\n", "icon_density", "[", "icon_density", "==", "0", "]", "=", "density", "[", "icon_density", "==", "0", "]", "\n", "cv2", ".", "imwrite", "(", "options", ".", "test_dir", "+", "'/'", "+", "str", "(", "batchIndex", ")", "+", "'_icon_pred.png'", ",", "icon_density", ")", "\n", "pass", "\n", "\n", "", "if", "datasetFlag", "in", "[", "1", ",", "3", ",", "4", "]", ":", "\n", "                ", "room_density", "=", "drawSegmentationImage", "(", "gt_dict", "[", "'room'", "]", "[", "batchIndex", "]", ",", "blackIndex", "=", "0", ")", "\n", "room_density", "[", "room_density", "==", "0", "]", "=", "density", "[", "room_density", "==", "0", "]", "\n", "cv2", ".", "imwrite", "(", "options", ".", "test_dir", "+", "'/'", "+", "str", "(", "batchIndex", ")", "+", "'_room_gt.png'", ",", "room_density", ")", "\n", "\n", "room_density", "=", "drawSegmentationImage", "(", "pred_dict", "[", "'room'", "]", "[", "batchIndex", "]", ",", "blackIndex", "=", "0", ")", "\n", "room_density", "[", "room_density", "==", "0", "]", "=", "density", "[", "room_density", "==", "0", "]", "\n", "cv2", ".", "imwrite", "(", "options", ".", "test_dir", "+", "'/'", "+", "str", "(", "batchIndex", ")", "+", "'_room_pred.png'", ",", "room_density", ")", "\n", "pass", "\n", "\n", "\n", "", "if", "batchIndex", "==", "0", "and", "False", ":", "\n", "                ", "for", "c", "in", "xrange", "(", "22", ")", ":", "\n", "                    ", "cv2", ".", "imwrite", "(", "options", ".", "test_dir", "+", "'/mask_'", "+", "str", "(", "c", ")", "+", "'.png'", ",", "cv2", ".", "dilate", "(", "drawMaskImage", "(", "corner_segmentation", "[", "batchIndex", "]", "==", "c", ")", ",", "np", ".", "ones", "(", "(", "3", ",", "3", ")", ")", ",", "3", ")", ")", "\n", "continue", "\n", "", "continue", "\n", "\n", "\n", "", "", "if", "batchIndex", "<", "options", ".", "visualizeReconstruction", "or", "True", ":", "\n", "            ", "if", "options", ".", "debug", ">=", "0", "and", "batchIndex", "!=", "options", ".", "debug", ":", "\n", "                ", "continue", "\n", "", "names", ".", "append", "(", "(", "batchIndex", ",", "gt_dict", "[", "'image_path'", "]", "[", "batchIndex", "]", ")", ")", "\n", "print", "(", "batchIndex", ",", "'start reconstruction'", ",", "gt_dict", "[", "'image_path'", "]", "[", "batchIndex", "]", ")", "\n", "if", "True", ":", "\n", "                ", "if", "options", ".", "debug", "==", "-", "1", ":", "\n", "                    ", "blockPrint", "(", ")", "\n", "pass", "\n", "\n", "# gtHeatmaps = gt_dict['corner'][batchIndex]", "\n", "#result_gt = reconstructFloorplan(gtHeatmaps[:, :, :NUM_WALL_CORNERS], gtHeatmaps[:, :, NUM_WALL_CORNERS:NUM_WALL_CORNERS + 4], gtHeatmaps[:, :, NUM_WALL_CORNERS + 4:NUM_WALL_CORNERS + 8], segmentation2Heatmaps(gt_dict['icon'][batchIndex], NUM_ICONS), segmentation2Heatmaps(gt_dict['room'][batchIndex], NUM_ROOMS), density[:, :, 0], gt=True)", "\n", "", "orientationCorners", "=", "getOrientationCorners", "(", "gt_dict", "[", "'corner_values'", "]", "[", "batchIndex", "]", "[", ":", "gt_dict", "[", "'num_corners'", "]", "[", "batchIndex", "]", "]", ")", "\n", "result_gt", "=", "reconstructFloorplan", "(", "orientationCorners", "[", ":", "NUM_WALL_CORNERS", "]", ",", "orientationCorners", "[", "NUM_WALL_CORNERS", ":", "NUM_WALL_CORNERS", "+", "4", "]", ",", "orientationCorners", "[", "NUM_WALL_CORNERS", "+", "4", ":", "NUM_WALL_CORNERS", "+", "8", "]", ",", "segmentation2Heatmaps", "(", "gt_dict", "[", "'icon'", "]", "[", "batchIndex", "]", ",", "NUM_ICONS", ")", ",", "segmentation2Heatmaps", "(", "gt_dict", "[", "'room'", "]", "[", "batchIndex", "]", ",", "NUM_ROOMS", ")", ",", "density", "[", ":", ",", ":", ",", "0", "]", ",", "gt", "=", "True", ")", "\n", "\n", "#if batchIndex == 1:", "\n", "#exit(1)", "\n", "\n", "\n", "#pred_debug_dir = options.test_dir + '/' + str(batchIndex) + '_debug'", "\n", "pred_debug_dir", "=", "options", ".", "test_dir", "\n", "try", ":", "\n", "                    ", "os", ".", "mkdir", "(", "pred_debug_dir", ")", "\n", "pass", "\n", "", "except", "OSError", "as", "e", ":", "\n", "                    ", "pass", "\n", "\n", "", "result_pred", "=", "reconstructFloorplan", "(", "pred_wc", "[", "batchIndex", "]", ",", "pred_oc", "[", "batchIndex", "]", ",", "pred_ic", "[", "batchIndex", "]", ",", "pred_icon", ",", "pred_room", ",", "density", "[", ":", ",", ":", ",", "0", "]", ",", "gt_dict", "=", "result_gt", ",", "gt", "=", "False", ",", "debug_prefix", "=", "pred_debug_dir", ")", "\n", "\n", "if", "True", ":", "\n", "                    ", "try", ":", "\n", "                        ", "newWidth", "=", "newHeight", "=", "1000", "\n", "resizeResult", "(", "result_gt", ",", "newWidth", ",", "newHeight", ",", "WIDTH", ",", "HEIGHT", ")", "\n", "resultImageGT", "=", "drawResultImageFinal", "(", "newWidth", ",", "newHeight", ",", "result_gt", ")", "\n", "#cv2.imwrite(options.test_dir + '/' + str(batchIndex) + '_result_gt.png', resultImageGT)", "\n", "cv2", ".", "imwrite", "(", "options", ".", "test_dir", "+", "'/'", "+", "gt_dict", "[", "'image_path'", "]", "[", "batchIndex", "]", "+", "'_gt.png'", ",", "resultImageGT", ")", "\n", "\n", "resizeResult", "(", "result_pred", ",", "newWidth", ",", "newHeight", ",", "WIDTH", ",", "HEIGHT", ")", "\n", "resultImagePred", "=", "drawResultImageFinal", "(", "newWidth", ",", "newHeight", ",", "result_pred", ")", "\n", "cv2", ".", "imwrite", "(", "options", ".", "test_dir", "+", "'/'", "+", "gt_dict", "[", "'image_path'", "]", "[", "batchIndex", "]", "+", "'_pred.png'", ",", "resultImagePred", ")", "\n", "", "except", ":", "\n", "                        ", "continue", "\n", "", "continue", "\n", "\n", "", "if", "'wall'", "not", "in", "result_pred", "or", "'wall'", "not", "in", "result_gt", ":", "\n", "                    ", "print", "(", "'invalid result'", ")", "\n", "continue", "\n", "\n", "", "statistics", "=", "findMatches", "(", "result_pred", ",", "result_gt", ",", "distanceThreshold", "=", "10", ")", "\n", "\n", "if", "options", ".", "drawFinal", ":", "\n", "                    ", "newWidth", "=", "newHeight", "=", "1000", "\n", "resizeResult", "(", "result_gt", ",", "newWidth", ",", "newHeight", ",", "WIDTH", ",", "HEIGHT", ")", "\n", "resultImageGT", "=", "drawResultImageFinal", "(", "newWidth", ",", "newHeight", ",", "result_gt", ")", "\n", "cv2", ".", "imwrite", "(", "options", ".", "test_dir", "+", "'/'", "+", "str", "(", "batchIndex", ")", "+", "'_result_gt.png'", ",", "resultImageGT", ")", "\n", "\n", "resizeResult", "(", "result_pred", ",", "newWidth", ",", "newHeight", ",", "WIDTH", ",", "HEIGHT", ")", "\n", "resultImagePred", "=", "drawResultImageFinal", "(", "newWidth", ",", "newHeight", ",", "result_pred", ")", "\n", "cv2", ".", "imwrite", "(", "options", ".", "test_dir", "+", "'/'", "+", "str", "(", "batchIndex", ")", "+", "'_result_pred.png'", ",", "resultImagePred", ")", "\n", "\n", "writeRepresentation", "(", "'popup/data/floorplan_'", "+", "str", "(", "batchIndex", ")", "+", "'_gt.txt'", ",", "newWidth", ",", "newHeight", ",", "result_gt", ")", "\n", "writeRepresentation", "(", "'popup/data/floorplan_'", "+", "str", "(", "batchIndex", ")", "+", "'_pred.txt'", ",", "newWidth", ",", "newHeight", ",", "result_pred", ")", "\n", "cv2", ".", "imwrite", "(", "'popup/data/floorplan_'", "+", "str", "(", "batchIndex", ")", "+", "'_gt.png'", ",", "resultImageGT", ")", "\n", "cv2", ".", "imwrite", "(", "'popup/data/floorplan_'", "+", "str", "(", "batchIndex", ")", "+", "'_pred.png'", ",", "resultImagePred", ")", "\n", "exit", "(", "1", ")", "\n", "", "else", ":", "\n", "                    ", "resultImage", ",", "iconImage", "=", "drawResultImage", "(", "WIDTH", ",", "HEIGHT", ",", "result_gt", ")", "\n", "cv2", ".", "imwrite", "(", "options", ".", "test_dir", "+", "'/'", "+", "str", "(", "batchIndex", ")", "+", "'_reconstruction_wall_gt.png'", ",", "resultImage", ")", "\n", "iconImage", "[", "iconImage", "==", "0", "]", "=", "density", "[", "iconImage", "==", "0", "]", "\n", "cv2", ".", "imwrite", "(", "options", ".", "test_dir", "+", "'/'", "+", "str", "(", "batchIndex", ")", "+", "'_reconstruction_icon_gt.png'", ",", "iconImage", ")", "\n", "resultImage", ",", "iconImage", "=", "drawResultImage", "(", "WIDTH", ",", "HEIGHT", ",", "result_pred", ")", "\n", "cv2", ".", "imwrite", "(", "options", ".", "test_dir", "+", "'/'", "+", "str", "(", "batchIndex", ")", "+", "'_reconstruction_wall_pred.png'", ",", "resultImage", ")", "\n", "iconImage", "[", "iconImage", "==", "0", "]", "=", "density", "[", "iconImage", "==", "0", "]", "\n", "cv2", ".", "imwrite", "(", "options", ".", "test_dir", "+", "'/'", "+", "str", "(", "batchIndex", ")", "+", "'_reconstruction_icon_pred.png'", ",", "iconImage", ")", "\n", "pass", "\n", "\n", "\n", "", "if", "options", ".", "debug", "==", "-", "1", ":", "\n", "                    ", "enablePrint", "(", ")", "\n", "pass", "\n", "", "if", "len", "(", "result_pred", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "\n", "# print(result_pred)", "\n", "# print(result_pred['door'])", "\n", "# print('gt')", "\n", "# print(result_gt)", "\n", "# print(result_gt['door'])", "\n", "# exit(1)", "\n", "\n", "", "print", "(", "'find predictions among ground-truths'", ")", "\n", "#print(result_pred['wall'][2])", "\n", "#statistics = findMatches(result_pred, result_gt, distanceThreshold=10)", "\n", "#statistics = findMatches(result_gt, result_pred, distanceThreshold=10)", "\n", "\n", "#print('find ground-truths among predictions')", "\n", "#statistics = findMatches(result_gt, result_pred, distanceThreshold=10)", "\n", "#print(statistics)", "\n", "print", "(", "'statistics'", ",", "[", "(", "k", ",", "float", "(", "v", "[", "0", "]", ")", "/", "max", "(", "v", "[", "1", "]", ",", "1", ")", ",", "float", "(", "v", "[", "0", "]", ")", "/", "max", "(", "v", "[", "2", "]", ",", "1", ")", ")", "for", "k", ",", "v", "in", "statistics", ".", "iteritems", "(", ")", "]", ")", "\n", "#print('topology statistics', [(k, float(v[0]) / max(v[1], 1), float(v[0]) / max(v[2], 1)) for k, v in topologyStatistics.iteritems()])", "\n", "print", "(", "'finish reconstruction'", ",", "gt_dict", "[", "'image_path'", "]", "[", "batchIndex", "]", ")", "\n", "for", "k", ",", "v", "in", "statistics", ".", "iteritems", "(", ")", ":", "\n", "                    ", "if", "k", "in", "statisticsSum", ":", "\n", "                        ", "for", "c", "in", "xrange", "(", "3", ")", ":", "\n", "                            ", "statisticsSum", "[", "k", "]", "[", "c", "]", "+=", "v", "[", "c", "]", "\n", "continue", "\n", "", "", "else", ":", "\n", "                        ", "print", "(", "k", ",", "'not in'", ",", "statisticsSum", ")", "\n", "", "continue", "\n", "", "if", "options", ".", "debug", ">=", "0", ":", "\n", "                    ", "exit", "(", "1", ")", "\n", "pass", "\n", "", "pass", "\n", "\n", "# except Exception as e:", "\n", "#     #traceback.print_tb(e)", "\n", "#     print('exception-----------: ', e)", "\n", "#     #raise e", "\n", "", "", "continue", "\n", "", "print", "(", "names", ")", "\n", "print", "(", "'final statistics'", ",", "[", "(", "k", ",", "float", "(", "v", "[", "0", "]", ")", "/", "max", "(", "v", "[", "1", "]", ",", "1", ")", ",", "float", "(", "v", "[", "0", "]", ")", "/", "max", "(", "v", "[", "2", "]", ",", "1", ")", ")", "for", "k", ",", "v", "in", "statisticsSum", ".", "iteritems", "(", ")", "]", ")", "\n", "np", ".", "save", "(", "options", ".", "test_dir", "+", "'/numbers.npy'", ",", "statisticsSum", ")", "\n", "#print(statisticsSum)", "\n", "return", "\n", "", ""]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.findMatches": [[87, 476], ["gt_dict.iteritems", "xrange", "len", "len", "numpy.zeros", "enumerate", "numpy.matmul", "numpy.matmul", "enumerate", "floorplan_utils.drawWallMask", "skimage.measure.label", "cv2.imwrite", "measure.label.min", "numpy.zeros", "enumerate", "roomLabels.iteritems", "numpy.zeros", "numpy.zeros", "roomsInfo.append", "len", "enumerate", "np.zeros.transpose", "numpy.matmul", "np.zeros.transpose", "numpy.matmul", "len", "print", "enumerate", "len", "len", "len", "enumerate", "len", "len", "len", "utils.drawSegmentationImage", "floorplan_utils.calcLineDim", "numpy.round().astype", "xrange", "floorplan_utils.calcLineDim", "numpy.round().astype", "xrange", "len", "cv2.dilate", "rooms.append", "print", "correctSums.iteritems", "utils.calcIOUMask", "print", "exit", "len", "[].sum", "[].sum", "int", "[].sum", "[].sum", "int", "int", "print", "print", "print", "enumerate", "len", "len", "len", "enumerate", "enumerate", "sum", "sum", "enumerate", "lineIndexMap.append", "enumerate", "rectangleIndexMap.append", "xrange", "len", "adjacentRoomPairs.append", "xrange", "len", "neighborRoomPairs.append", "cv2.dilate.astype", "numpy.ones", "len", "len", "len", "len", "roomGT[].keys", "[].mean", "[].mean", "roomPred[].keys", "[].mean", "[].mean", "numpy.expand_dims", "numpy.expand_dims", "utils.calcIOUMask", "numpy.all", "numpy.all", "[].sum", "[].sum", "int", "int", "roomGT[].keys", "[].mean", "[].mean", "roomPred[].keys", "[].mean", "[].mean", "enumerate", "pointIndexMap.append", "enumerate", "enumerate", "matchedOrientations.iteritems", "len", "len", "print", "len", "print", "str", "numpy.round", "numpy.round", "utils.calcIOUMask", "numpy.arange", "numpy.all", "numpy.all", "numpy.all", "len", "print", "floorplan_utils.pointDistance", "adjacentRoomPair.append", "neighborRoomPair.append", "len", "numpy.all", "numpy.all", "floorplan_utils.pointDistance", "print", "len", "utils.calcIOU", "len", "roomGT[].max().nonzero", "roomGT[].max().nonzero", "roomPred[].max().nonzero", "roomPred[].max().nonzero", "roomGT[].max().nonzero", "roomGT[].max().nonzero", "roomPred[].max().nonzero", "roomPred[].max().nonzero", "floorplan_utils.pointDistance", "len", "matchedOrientations.iteritems", "floorplan_utils.pointDistance", "floorplan_utils.pointDistance", "floorplan_utils.pointDistance", "floorplan_utils.pointDistance", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "roomGT[].max", "roomGT[].max", "roomPred[].max", "roomPred[].max", "roomGT[].max", "roomGT[].max", "roomPred[].max", "roomPred[].max"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawWallMask", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.drawSegmentationImage", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.calcIOUMask", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.calcIOUMask", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.calcIOUMask", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.pointDistance", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.pointDistance", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.calcIOU", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.pointDistance", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.pointDistance", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.pointDistance", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.pointDistance", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.pointDistance"], ["def", "findMatches", "(", "pred_dict", ",", "gt_dict", ",", "distanceThreshold", ",", "width", "=", "256", ",", "height", "=", "256", ")", ":", "\n", "  ", "correctSums", "=", "{", "k", ":", "0.0", "for", "k", "in", "gt_dict", "}", "\n", "countsGT", "=", "{", "k", ":", "0.0", "for", "k", "in", "gt_dict", "}", "\n", "countsPred", "=", "{", "k", ":", "0.0", "for", "k", "in", "gt_dict", "}", "\n", "for", "objectType", ",", "objects", "in", "gt_dict", ".", "iteritems", "(", ")", ":", "\n", "    ", "if", "objectType", "not", "in", "pred_dict", ":", "\n", "      ", "print", "(", "objectType", "+", "' not in prediction'", ")", "\n", "continue", "\n", "\n", "", "pointsGT", "=", "objects", "[", "0", "]", "\n", "pointsPred", "=", "pred_dict", "[", "objectType", "]", "[", "0", "]", "\n", "if", "objectType", "==", "'wall'", ":", "\n", "      ", "validPointMaskGT", "=", "{", "}", "\n", "for", "line", "in", "objects", "[", "1", "]", ":", "\n", "        ", "validPointMaskGT", "[", "line", "[", "0", "]", "]", "=", "True", "\n", "validPointMaskGT", "[", "line", "[", "1", "]", "]", "=", "True", "\n", "continue", "\n", "", "validPointsGT", "=", "[", "pointsGT", "[", "pointIndex", "]", "for", "pointIndex", "in", "validPointMaskGT", "]", "\n", "\n", "#print([(pred_dict[objectType][0][line[0]][:2], pred_dict[objectType][0][line[1]][:2]) for line in pred_dict[objectType][1]])", "\n", "#exit(1)", "\n", "validPointMaskPred", "=", "{", "}", "\n", "for", "line", "in", "pred_dict", "[", "objectType", "]", "[", "1", "]", ":", "\n", "        ", "validPointMaskPred", "[", "line", "[", "0", "]", "]", "=", "True", "\n", "validPointMaskPred", "[", "line", "[", "1", "]", "]", "=", "True", "\n", "continue", "\n", "", "validPointsPred", "=", "[", "pointsPred", "[", "pointIndex", "]", "for", "pointIndex", "in", "validPointMaskPred", "]", "\n", "\n", "if", "True", ":", "\n", "# degree insensitive", "\n", "        ", "pointIndexMap", "=", "[", "]", "\n", "for", "pointIndexGT", ",", "pointGT", "in", "enumerate", "(", "validPointsGT", ")", ":", "\n", "          ", "matchedPointMask", "=", "{", "}", "\n", "for", "pointIndexPred", ",", "pointPred", "in", "enumerate", "(", "validPointsPred", ")", ":", "\n", "            ", "if", "pointPred", "[", "2", "]", "==", "pointGT", "[", "2", "]", "and", "pointPred", "[", "3", "]", "==", "pointGT", "[", "3", "]", "and", "pointDistance", "(", "pointPred", "[", "0", ":", "2", "]", ",", "pointGT", "[", "0", ":", "2", "]", ")", "<", "distanceThreshold", ":", "\n", "              ", "matchedPointMask", "[", "pointIndexPred", "]", "=", "True", "\n", "pass", "\n", "", "continue", "\n", "", "if", "len", "(", "matchedPointMask", ")", "==", "0", ":", "\n", "            ", "print", "(", "pointIndexGT", ",", "pointGT", ",", "'point not found'", ")", "\n", "pass", "\n", "", "pointIndexMap", ".", "append", "(", "matchedPointMask", ")", "\n", "continue", "\n", "\n", "", "correctSums", "[", "objectType", "]", "+=", "len", "(", "[", "indexMap", "for", "indexMap", "in", "pointIndexMap", "if", "len", "(", "indexMap", ")", ">", "0", "]", ")", "\n", "countsGT", "[", "objectType", "]", "+=", "len", "(", "validPointsGT", ")", "\n", "countsPred", "[", "objectType", "]", "+=", "len", "(", "validPointsPred", ")", "\n", "", "else", ":", "\n", "        ", "numMatches", "=", "0", "\n", "matchedMask", "=", "{", "}", "\n", "pointMatchMap", "=", "{", "}", "\n", "for", "pointIndexPred", ",", "pointPred", "in", "enumerate", "(", "validPointsPred", ")", ":", "\n", "          ", "minDistancePair", "=", "(", "10000", ",", "-", "1", ")", "\n", "for", "pointIndexGT", ",", "pointGT", "in", "enumerate", "(", "validPointsGT", ")", ":", "\n", "            ", "distance", "=", "pointDistance", "(", "pointPred", "[", "0", ":", "2", "]", ",", "pointGT", "[", "0", ":", "2", "]", ")", "\n", "if", "distance", "<", "minDistancePair", "[", "0", "]", ":", "\n", "              ", "minDistancePair", "=", "(", "distance", ",", "pointIndexGT", ")", "\n", "pass", "\n", "", "continue", "\n", "", "pointMatchMap", "[", "pointIndexPred", "]", "=", "minDistancePair", "[", "1", "]", "\n", "continue", "\n", "\n", "", "for", "pointIndexGT", ",", "pointGT", "in", "enumerate", "(", "validPointsGT", ")", ":", "\n", "          ", "matchedOrientations", "=", "{", "}", "\n", "for", "orientation", "in", "POINT_ORIENTATIONS", "[", "pointGT", "[", "2", "]", "]", "[", "pointGT", "[", "3", "]", "]", ":", "\n", "            ", "matchedOrientations", "[", "orientation", "]", "=", "False", "\n", "continue", "\n", "", "for", "pointIndexPred", ",", "pointPred", "in", "enumerate", "(", "validPointsPred", ")", ":", "\n", "            ", "if", "pointMatchMap", "[", "pointIndexPred", "]", "!=", "pointIndexGT", ":", "\n", "              ", "continue", "\n", "", "if", "pointDistance", "(", "pointPred", "[", "0", ":", "2", "]", ",", "pointGT", "[", "0", ":", "2", "]", ")", "<", "distanceThreshold", ":", "\n", "              ", "for", "orientation", "in", "POINT_ORIENTATIONS", "[", "pointPred", "[", "2", "]", "]", "[", "pointPred", "[", "3", "]", "]", ":", "\n", "                ", "if", "orientation", "in", "matchedOrientations", "and", "matchedOrientations", "[", "orientation", "]", "==", "False", ":", "\n", "                  ", "if", "(", "pointIndexPred", ",", "orientation", ")", "not", "in", "matchedMask", ":", "\n", "                    ", "matchedMask", "[", "(", "pointIndexPred", ",", "orientation", ")", "]", "=", "True", "\n", "matchedOrientations", "[", "orientation", "]", "=", "True", "\n", "pass", "\n", "", "pass", "\n", "", "continue", "\n", "", "pass", "\n", "", "continue", "\n", "", "for", "orientation", ",", "hasMatch", "in", "matchedOrientations", ".", "iteritems", "(", ")", ":", "\n", "            ", "if", "not", "hasMatch", ":", "\n", "              ", "print", "(", "pointIndexGT", ",", "pointGT", ",", "orientation", ",", "'point not found'", ")", "\n", "pass", "\n", "", "continue", "\n", "", "numMatches", "+=", "len", "(", "[", "orientation", "for", "orientation", ",", "value", "in", "matchedOrientations", ".", "iteritems", "(", ")", "if", "value", "==", "True", "]", ")", "\n", "continue", "\n", "\n", "", "correctSums", "[", "objectType", "]", "+=", "numMatches", "\n", "countsGT", "[", "objectType", "]", "+=", "sum", "(", "[", "point", "[", "2", "]", "+", "1", "for", "point", "in", "validPointsGT", "]", ")", "\n", "countsPred", "[", "objectType", "]", "+=", "sum", "(", "[", "point", "[", "2", "]", "+", "1", "for", "point", "in", "validPointsPred", "]", ")", "\n", "\n", "", "continue", "\n", "\n", "", "if", "objectType", "==", "'door'", ":", "\n", "      ", "linesGT", "=", "objects", "[", "1", "]", "\n", "linesPred", "=", "pred_dict", "[", "objectType", "]", "[", "1", "]", "\n", "lineIndexMap", "=", "[", "]", "\n", "for", "lineIndexGT", ",", "lineGT", "in", "enumerate", "(", "linesGT", ")", ":", "\n", "        ", "matchedLineMask", "=", "{", "}", "\n", "for", "lineIndexPred", ",", "linePred", "in", "enumerate", "(", "linesPred", ")", ":", "\n", "#if (linePred[0] in pointIndexMap[lineGT[0]] and linePred[1] in pointIndexMap[lineGT[1]]) or (linePred[1] in pointIndexMap[lineGT[0]] and linePred[0] in pointIndexMap[lineGT[1]]):", "\n", "          ", "if", "(", "pointDistance", "(", "pointsPred", "[", "linePred", "[", "0", "]", "]", ",", "pointsGT", "[", "lineGT", "[", "0", "]", "]", ")", "<", "distanceThreshold", "and", "pointDistance", "(", "pointsPred", "[", "linePred", "[", "1", "]", "]", ",", "pointsGT", "[", "lineGT", "[", "1", "]", "]", ")", "<", "distanceThreshold", ")", "or", "(", "pointDistance", "(", "pointsPred", "[", "linePred", "[", "0", "]", "]", ",", "pointsGT", "[", "lineGT", "[", "1", "]", "]", ")", "<", "distanceThreshold", "and", "pointDistance", "(", "pointsPred", "[", "linePred", "[", "1", "]", "]", ",", "pointsGT", "[", "lineGT", "[", "0", "]", "]", ")", "<", "distanceThreshold", ")", ":", "\n", "            ", "matchedLineMask", "[", "lineIndexPred", "]", "=", "True", "\n", "#print('match', lineGT, linePred)", "\n", "pass", "\n", "", "continue", "\n", "", "if", "len", "(", "matchedLineMask", ")", "==", "0", ":", "\n", "          ", "print", "(", "lineIndexGT", ",", "lineGT", ",", "[", "pointsGT", "[", "pointIndex", "]", "[", ":", "2", "]", "for", "pointIndex", "in", "lineGT", "]", ",", "'door not found'", ")", "\n", "pass", "\n", "", "lineIndexMap", ".", "append", "(", "matchedLineMask", ")", "\n", "continue", "\n", "\n", "", "correctSums", "[", "objectType", "]", "+=", "len", "(", "[", "indexMap", "for", "indexMap", "in", "lineIndexMap", "if", "len", "(", "indexMap", ")", ">", "0", "]", ")", "\n", "countsGT", "[", "objectType", "]", "+=", "len", "(", "linesGT", ")", "\n", "countsPred", "[", "objectType", "]", "+=", "len", "(", "linesPred", ")", "\n", "continue", "\n", "\n", "", "if", "objectType", "==", "'icon'", ":", "\n", "      ", "rectanglesGT", "=", "objects", "[", "1", "]", "\n", "rectanglesPred", "=", "pred_dict", "[", "objectType", "]", "[", "1", "]", "\n", "labelsGT", "=", "objects", "[", "2", "]", "\n", "labelsPred", "=", "pred_dict", "[", "objectType", "]", "[", "2", "]", "\n", "\n", "rectangleIndexMap", "=", "[", "]", "\n", "for", "indexGT", ",", "rectangleGT", "in", "enumerate", "(", "rectanglesGT", ")", ":", "\n", "        ", "matchedRectangleMask", "=", "{", "}", "\n", "for", "indexPred", ",", "rectanglePred", "in", "enumerate", "(", "rectanglesPred", ")", ":", "\n", "          ", "if", "labelsGT", "[", "indexGT", "]", "==", "labelsPred", "[", "indexPred", "]", "and", "calcIOU", "(", "[", "pointsPred", "[", "pointIndex", "]", "for", "pointIndex", "in", "rectanglePred", "]", ",", "[", "pointsGT", "[", "pointIndex", "]", "for", "pointIndex", "in", "rectangleGT", "]", ")", ">=", "0.3", ":", "\n", "            ", "matchedRectangleMask", "[", "indexPred", "]", "=", "True", "\n", "pass", "\n", "", "continue", "\n", "", "if", "len", "(", "matchedRectangleMask", ")", "==", "0", ":", "\n", "          ", "print", "(", "indexGT", ",", "rectangleGT", ",", "[", "pointsGT", "[", "pointIndex", "]", "[", ":", "2", "]", "for", "pointIndex", "in", "rectangleGT", "]", ",", "'icon not found'", ")", "\n", "pass", "\n", "", "rectangleIndexMap", ".", "append", "(", "matchedRectangleMask", ")", "\n", "continue", "\n", "\n", "", "correctSums", "[", "objectType", "]", "+=", "len", "(", "[", "indexMap", "for", "indexMap", "in", "rectangleIndexMap", "if", "len", "(", "indexMap", ")", ">", "0", "]", ")", "\n", "countsGT", "[", "objectType", "]", "+=", "len", "(", "rectanglesGT", ")", "\n", "countsPred", "[", "objectType", "]", "+=", "len", "(", "rectanglesPred", ")", "\n", "pass", "\n", "", "continue", "\n", "\n", "", "roomsInfo", "=", "[", "]", "\n", "wallLineWidth", "=", "3", "\n", "dicts", "=", "[", "gt_dict", ",", "pred_dict", "]", "\n", "for", "dictIndex", "in", "xrange", "(", "2", ")", ":", "\n", "    ", "wall_dict", "=", "dicts", "[", "dictIndex", "]", "[", "'wall'", "]", "\n", "wallMask", "=", "drawWallMask", "(", "[", "(", "wall_dict", "[", "0", "]", "[", "line", "[", "0", "]", "]", ",", "wall_dict", "[", "0", "]", "[", "line", "[", "1", "]", "]", ")", "for", "line", "in", "wall_dict", "[", "1", "]", "]", ",", "width", ",", "height", ",", "thickness", "=", "wallLineWidth", ")", "\n", "roomRegions", "=", "measure", ".", "label", "(", "1", "-", "wallMask", ",", "background", "=", "0", ")", "\n", "cv2", ".", "imwrite", "(", "'test/'", "+", "str", "(", "dictIndex", ")", "+", "'_segmentation_regions.png'", ",", "drawSegmentationImage", "(", "roomRegions", ")", ")", "\n", "backgroundIndex", "=", "roomRegions", ".", "min", "(", ")", "\n", "wallPoints", "=", "wall_dict", "[", "0", "]", "\n", "roomSegmentation", "=", "np", ".", "zeros", "(", "roomRegions", ".", "shape", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "roomLabels", "=", "{", "}", "\n", "adjacentRoomPairs", "=", "[", "]", "\n", "for", "wallIndex", ",", "wallLabels", "in", "enumerate", "(", "wall_dict", "[", "2", "]", ")", ":", "\n", "      ", "wallLine", "=", "wall_dict", "[", "1", "]", "[", "wallIndex", "]", "\n", "lineDim", "=", "calcLineDim", "(", "wallPoints", ",", "wallLine", ")", "\n", "center", "=", "np", ".", "round", "(", "(", "np", ".", "array", "(", "wallPoints", "[", "wallLine", "[", "0", "]", "]", "[", ":", "2", "]", ")", "+", "np", ".", "array", "(", "wallPoints", "[", "wallLine", "[", "1", "]", "]", "[", ":", "2", "]", ")", ")", "/", "2", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "adjacentRoomPair", "=", "[", "]", "\n", "for", "c", "in", "xrange", "(", "2", ")", ":", "\n", "        ", "direction", "=", "c", "*", "2", "-", "1", "\n", "if", "lineDim", "==", "1", ":", "\n", "          ", "direction", "*=", "-", "1", "\n", "pass", "\n", "", "point", "=", "center", "\n", "for", "offset", "in", "xrange", "(", "10", ")", ":", "\n", "          ", "point", "[", "1", "-", "lineDim", "]", "+=", "direction", "\n", "if", "point", "[", "1", "-", "lineDim", "]", "<", "0", "or", "point", "[", "1", "-", "lineDim", "]", ">=", "sizes", "[", "1", "-", "lineDim", "]", ":", "\n", "            ", "break", "\n", "", "roomIndex", "=", "roomRegions", "[", "point", "[", "1", "]", ",", "point", "[", "0", "]", "]", "\n", "if", "roomIndex", "!=", "backgroundIndex", ":", "\n", "#print(wallIndex, center.tolist(), point.tolist(), wallLabels[c])", "\n", "# if wallLabels[c] not in rooms:", "\n", "#   rooms[wallLabels[c]] = []", "\n", "#   pass", "\n", "            ", "mask", "=", "roomRegions", "==", "roomIndex", "\n", "roomSegmentation", "[", "mask", "]", "=", "wallLabels", "[", "c", "]", "\n", "#rooms[wallLabels[c]].append(cv2.dilate(mask.astype(np.uint8), np.ones((3, 3)), iterations=wallLineWidth))", "\n", "#roomRegions[mask] = backgroundIndex", "\n", "if", "roomIndex", "not", "in", "roomLabels", ":", "\n", "              ", "roomLabels", "[", "roomIndex", "]", "=", "{", "}", "\n", "pass", "\n", "", "roomLabels", "[", "roomIndex", "]", "[", "wallLabels", "[", "c", "]", "]", "=", "True", "\n", "adjacentRoomPair", ".", "append", "(", "roomIndex", ")", "\n", "break", "\n", "pass", "\n", "", "continue", "\n", "", "continue", "\n", "", "if", "len", "(", "adjacentRoomPair", ")", "==", "2", ":", "\n", "        ", "adjacentRoomPairs", ".", "append", "(", "adjacentRoomPair", ")", "\n", "pass", "\n", "", "continue", "\n", "\n", "", "neighborRoomPairs", "=", "[", "]", "\n", "door_dict", "=", "dicts", "[", "dictIndex", "]", "[", "'door'", "]", "\n", "for", "doorLine", "in", "door_dict", "[", "1", "]", ":", "\n", "      ", "lineDim", "=", "calcLineDim", "(", "door_dict", "[", "0", "]", ",", "doorLine", ")", "\n", "center", "=", "np", ".", "round", "(", "(", "np", ".", "array", "(", "door_dict", "[", "0", "]", "[", "doorLine", "[", "0", "]", "]", "[", ":", "2", "]", ")", "+", "np", ".", "array", "(", "door_dict", "[", "0", "]", "[", "doorLine", "[", "1", "]", "]", "[", ":", "2", "]", ")", ")", "/", "2", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "neighborRoomPair", "=", "[", "]", "\n", "for", "c", "in", "xrange", "(", "2", ")", ":", "\n", "        ", "direction", "=", "c", "*", "2", "-", "1", "\n", "point", "=", "center", "\n", "for", "offset", "in", "xrange", "(", "10", ")", ":", "\n", "          ", "point", "[", "1", "-", "lineDim", "]", "+=", "direction", "\n", "if", "point", "[", "lineDim", "]", "<", "0", "or", "point", "[", "lineDim", "]", ">=", "sizes", "[", "lineDim", "]", ":", "\n", "            ", "break", "\n", "", "roomIndex", "=", "roomRegions", "[", "point", "[", "1", "]", ",", "point", "[", "0", "]", "]", "\n", "if", "roomIndex", "!=", "backgroundIndex", ":", "\n", "            ", "neighborRoomPair", ".", "append", "(", "roomIndex", ")", "\n", "break", "\n", "pass", "\n", "", "continue", "\n", "", "continue", "\n", "", "if", "len", "(", "neighborRoomPair", ")", "==", "2", ":", "\n", "        ", "neighborRoomPairs", ".", "append", "(", "neighborRoomPair", ")", "\n", "pass", "\n", "", "continue", "\n", "\n", "", "rooms", "=", "[", "]", "\n", "indexMap", "=", "{", "}", "\n", "for", "roomIndex", ",", "labels", "in", "roomLabels", ".", "iteritems", "(", ")", ":", "\n", "      ", "indexMap", "[", "roomIndex", "]", "=", "len", "(", "rooms", ")", "\n", "mask", "=", "roomRegions", "==", "roomIndex", "\n", "mask", "=", "cv2", ".", "dilate", "(", "mask", ".", "astype", "(", "np", ".", "uint8", ")", ",", "np", ".", "ones", "(", "(", "3", ",", "3", ")", ")", ",", "iterations", "=", "wallLineWidth", ")", "\n", "if", "7", "in", "labels", "and", "2", "not", "in", "labels", ":", "\n", "        ", "labels", "[", "2", "]", "=", "True", "\n", "pass", "\n", "", "if", "5", "in", "labels", "and", "3", "not", "in", "labels", ":", "\n", "        ", "labels", "[", "3", "]", "=", "True", "\n", "pass", "\n", "", "if", "9", "in", "labels", "and", "1", "not", "in", "labels", ":", "\n", "        ", "labels", "[", "1", "]", "=", "True", "\n", "pass", "\n", "", "rooms", ".", "append", "(", "(", "mask", ",", "labels", ")", ")", "\n", "continue", "\n", "\n", "", "neighborRoomPairs", "=", "[", "(", "indexMap", "[", "neighborRoomPair", "[", "0", "]", "]", ",", "indexMap", "[", "neighborRoomPair", "[", "1", "]", "]", ")", "for", "neighborRoomPair", "in", "neighborRoomPairs", "]", "\n", "neighborMatrix", "=", "np", ".", "zeros", "(", "(", "len", "(", "rooms", ")", ",", "len", "(", "rooms", ")", ")", ")", "\n", "for", "neighborRoomPair", "in", "neighborRoomPairs", ":", "\n", "      ", "neighborMatrix", "[", "neighborRoomPair", "[", "0", "]", "]", "[", "neighborRoomPair", "[", "1", "]", "]", "=", "1", "\n", "neighborMatrix", "[", "neighborRoomPair", "[", "1", "]", "]", "[", "neighborRoomPair", "[", "0", "]", "]", "=", "1", "\n", "continue", "\n", "\n", "", "adjacentRoomPairs", "=", "[", "(", "indexMap", "[", "adjacentRoomPair", "[", "0", "]", "]", ",", "indexMap", "[", "adjacentRoomPair", "[", "1", "]", "]", ")", "for", "adjacentRoomPair", "in", "adjacentRoomPairs", "]", "\n", "adjacentMatrix", "=", "np", ".", "zeros", "(", "(", "len", "(", "rooms", ")", ",", "len", "(", "rooms", ")", ")", ")", "\n", "for", "adjacentRoomPair", "in", "adjacentRoomPairs", ":", "\n", "      ", "adjacentMatrix", "[", "adjacentRoomPair", "[", "0", "]", "]", "[", "adjacentRoomPair", "[", "1", "]", "]", "=", "1", "\n", "adjacentMatrix", "[", "adjacentRoomPair", "[", "1", "]", "]", "[", "adjacentRoomPair", "[", "0", "]", "]", "=", "1", "\n", "continue", "\n", "#exit(1)", "\n", "", "roomsInfo", ".", "append", "(", "[", "rooms", ",", "neighborMatrix", ",", "adjacentMatrix", "]", ")", "\n", "continue", "\n", "\n", "#gt_dict['room'] = zip(*roomsInfo[0][0])", "\n", "#pred_dict['room'] = zip(*roomsInfo[1][0])", "\n", "\n", "#countsPred['room'] = sum([len(roomsPred) for roomLabel, roomsPred in labelRooms[1].iteritems()])", "\n", "", "countsPred", "[", "'room'", "]", "=", "len", "(", "roomsInfo", "[", "1", "]", "[", "0", "]", ")", "\n", "countsGT", "[", "'room'", "]", "=", "len", "(", "roomsInfo", "[", "0", "]", "[", "0", "]", ")", "\n", "correctSums", "[", "'room'", "]", "=", "0.0", "\n", "for", "roomGT", "in", "roomsInfo", "[", "0", "]", "[", "0", "]", ":", "\n", "    ", "hasMatch", "=", "False", "\n", "for", "roomPred", "in", "roomsInfo", "[", "1", "]", "[", "0", "]", ":", "\n", "      ", "hasCommonLabel", "=", "False", "\n", "for", "labelGT", "in", "roomGT", "[", "1", "]", ":", "\n", "        ", "if", "labelGT", "in", "roomPred", "[", "1", "]", ":", "\n", "          ", "hasCommonLabel", "=", "True", "\n", "break", "\n", "", "continue", "\n", "# if 8 in roomGT[1]:", "\n", "#   print(roomPred[1], calcIOUMask(roomPred[0], roomGT[0]))", "\n", "#   pass", "\n", "", "if", "hasCommonLabel", "and", "calcIOUMask", "(", "roomPred", "[", "0", "]", ",", "roomGT", "[", "0", "]", ")", ">=", "0.5", ":", "\n", "        ", "correctSums", "[", "'room'", "]", "+=", "1", "\n", "hasMatch", "=", "True", "\n", "break", "\n", "", "continue", "\n", "", "if", "not", "hasMatch", ":", "\n", "      ", "print", "(", "roomGT", "[", "1", "]", ".", "keys", "(", ")", ",", "roomGT", "[", "0", "]", ".", "max", "(", "0", ")", ".", "nonzero", "(", ")", "[", "0", "]", ".", "mean", "(", ")", ",", "roomGT", "[", "0", "]", ".", "max", "(", "1", ")", ".", "nonzero", "(", ")", "[", "0", "]", ".", "mean", "(", ")", ",", "'room not found'", ")", "\n", "pass", "\n", "", "continue", "\n", "#print(labelRooms[1])", "\n", "", "statistics", "=", "{", "k", ":", "[", "v", ",", "countsGT", "[", "k", "]", ",", "countsPred", "[", "k", "]", "]", "for", "k", ",", "v", "in", "correctSums", ".", "iteritems", "(", ")", "}", "\n", "\n", "\n", "roomIndexMap", "=", "np", ".", "zeros", "(", "len", "(", "roomsInfo", "[", "1", "]", "[", "0", "]", ")", ")", "\n", "orderedRoomPred", "=", "{", "}", "\n", "for", "roomIndexPred", ",", "roomPred", "in", "enumerate", "(", "roomsInfo", "[", "1", "]", "[", "0", "]", ")", ":", "\n", "    ", "maxIOURoom", "=", "(", "0", ",", "-", "1", ")", "\n", "for", "roomIndexGT", ",", "roomGT", "in", "enumerate", "(", "roomsInfo", "[", "0", "]", "[", "0", "]", ")", ":", "\n", "      ", "IOU", "=", "calcIOUMask", "(", "roomPred", "[", "0", "]", ",", "roomGT", "[", "0", "]", ")", "\n", "if", "IOU", ">", "maxIOURoom", "[", "0", "]", ":", "\n", "        ", "maxIOURoom", "=", "(", "IOU", ",", "roomIndexGT", ")", "\n", "pass", "\n", "", "continue", "\n", "", "if", "maxIOURoom", "[", "1", "]", "<", "0", ":", "\n", "      ", "print", "(", "roomPred", "[", "1", "]", ".", "keys", "(", ")", ",", "roomPred", "[", "0", "]", ".", "max", "(", "0", ")", ".", "nonzero", "(", ")", "[", "0", "]", ".", "mean", "(", ")", ",", "roomPred", "[", "0", "]", ".", "max", "(", "1", ")", ".", "nonzero", "(", ")", "[", "0", "]", ".", "mean", "(", ")", ",", "'room has no match'", ")", "\n", "exit", "(", "1", ")", "\n", "pass", "\n", "", "roomIndexGT", "=", "maxIOURoom", "[", "1", "]", "\n", "roomIndexMap", "[", "roomIndexPred", "]", "=", "roomIndexGT", "\n", "if", "roomIndexGT", "not", "in", "orderedRoomPred", ":", "\n", "      ", "orderedRoomPred", "[", "roomIndexGT", "]", "=", "roomPred", "\n", "", "else", ":", "\n", "      ", "mask", "=", "orderedRoomPred", "[", "roomIndexGT", "]", "[", "0", "]", "+", "roomPred", "[", "0", "]", "\n", "roomLabels", "=", "{", "}", "\n", "for", "label", "in", "orderedRoomPred", "[", "roomIndexGT", "]", "[", "1", "]", ":", "\n", "        ", "roomLabels", "[", "label", "]", "=", "True", "\n", "continue", "\n", "", "for", "label", "in", "roomPred", "[", "1", "]", ":", "\n", "        ", "roomLabels", "[", "label", "]", "=", "True", "\n", "continue", "\n", "", "orderedRoomPred", "[", "roomIndexGT", "]", "=", "(", "mask", ",", "roomLabels", ")", "\n", "pass", "\n", "", "continue", "\n", "", "roomIndexMap", "=", "(", "np", ".", "expand_dims", "(", "roomIndexMap", ",", "-", "1", ")", "==", "np", ".", "expand_dims", "(", "np", ".", "arange", "(", "len", "(", "roomsInfo", "[", "0", "]", "[", "0", "]", ")", ",", "dtype", "=", "np", ".", "int32", ")", ",", "0", ")", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "# print('GT', [(roomIndexGT, roomGT[1].keys(), roomGT[0].max(0).nonzero()[0].mean(), roomGT[0].max(1).nonzero()[0].mean()) for roomIndexGT, roomGT in enumerate(roomsInfo[0][0])])", "\n", "# print('Pred', [(roomIndexPred, roomPred[1].keys(), roomPred[0].max(0).nonzero()[0].mean(), roomPred[0].max(1).nonzero()[0].mean()) for roomIndexPred, roomPred in enumerate(roomsInfo[1][0])])", "\n", "# print(roomsInfo[0][1], roomsInfo[0][2])", "\n", "# print(roomsInfo[1][1], roomsInfo[1][2])", "\n", "# print(roomIndexMap)", "\n", "roomsInfo", "[", "1", "]", "[", "1", "]", "=", "np", ".", "matmul", "(", "roomIndexMap", ".", "transpose", "(", ")", ",", "np", ".", "matmul", "(", "roomsInfo", "[", "1", "]", "[", "1", "]", ",", "roomIndexMap", ")", ")", "\n", "roomsInfo", "[", "1", "]", "[", "2", "]", "=", "np", ".", "matmul", "(", "roomIndexMap", ".", "transpose", "(", ")", ",", "np", ".", "matmul", "(", "roomsInfo", "[", "1", "]", "[", "2", "]", ",", "roomIndexMap", ")", ")", "\n", "#print(roomsInfo[1][1], roomsInfo[1][2])", "\n", "#print(roomsInfo[0][1], roomsInfo[0][2])", "\n", "# exit(1)", "\n", "\n", "topologyStatistics", "=", "{", "k", ":", "[", "0.0", ",", "0.0", ",", "0.0", "]", "for", "k", "in", "[", "'adjacent'", ",", "'neighbor'", ",", "'neighbor_foreground'", ",", "'adjacent_all'", ",", "'neighbor_all'", ",", "'neighbor_all_foreground'", ",", "'all'", ",", "'all_foreground'", "]", "}", "\n", "for", "k", "in", "[", "'adjacent_all'", ",", "'neighbor_all'", ",", "'all'", "]", ":", "\n", "    ", "topologyStatistics", "[", "k", "]", "[", "1", "]", "=", "topologyStatistics", "[", "k", "]", "[", "2", "]", "=", "len", "(", "roomsInfo", "[", "0", "]", "[", "0", "]", ")", "\n", "continue", "\n", "", "for", "k", "in", "[", "'neighbor_all_foreground'", ",", "'all_foreground'", "]", ":", "\n", "    ", "topologyStatistics", "[", "k", "]", "[", "1", "]", "=", "topologyStatistics", "[", "k", "]", "[", "2", "]", "=", "len", "(", "roomsInfo", "[", "0", "]", "[", "0", "]", ")", "-", "1", "\n", "continue", "\n", "\n", "", "for", "roomIndex", ",", "roomGT", "in", "enumerate", "(", "roomsInfo", "[", "0", "]", "[", "0", "]", ")", ":", "\n", "    ", "if", "roomIndex", "not", "in", "orderedRoomPred", ":", "\n", "      ", "continue", "\n", "", "roomPred", "=", "orderedRoomPred", "[", "roomIndex", "]", "\n", "hasCommonLabel", "=", "False", "\n", "for", "labelGT", "in", "roomGT", "[", "1", "]", ":", "\n", "      ", "if", "labelGT", "in", "roomPred", "[", "1", "]", ":", "\n", "        ", "hasCommonLabel", "=", "True", "\n", "break", "\n", "", "continue", "\n", "", "if", "hasCommonLabel", "and", "calcIOUMask", "(", "roomPred", "[", "0", "]", ",", "roomGT", "[", "0", "]", ")", ">=", "0.5", ":", "\n", "      ", "neighborMatchMask", "=", "roomsInfo", "[", "0", "]", "[", "1", "]", "[", "roomIndex", "]", "==", "roomsInfo", "[", "1", "]", "[", "1", "]", "[", "roomIndex", "]", "\n", "topologyStatistics", "[", "'neighbor'", "]", "[", "0", "]", "+=", "(", "neighborMatchMask", "*", "roomsInfo", "[", "0", "]", "[", "1", "]", "[", "roomIndex", "]", ")", ".", "sum", "(", ")", "\n", "topologyStatistics", "[", "'neighbor'", "]", "[", "1", "]", "+=", "roomsInfo", "[", "0", "]", "[", "1", "]", "[", "roomIndex", "]", ".", "sum", "(", ")", "\n", "topologyStatistics", "[", "'neighbor'", "]", "[", "2", "]", "+=", "roomsInfo", "[", "1", "]", "[", "1", "]", "[", "roomIndex", "]", ".", "sum", "(", ")", "\n", "topologyStatistics", "[", "'neighbor_all'", "]", "[", "0", "]", "+=", "int", "(", "np", ".", "all", "(", "neighborMatchMask", ")", ")", "\n", "\n", "adjacentMatchMask", "=", "roomsInfo", "[", "0", "]", "[", "2", "]", "[", "roomIndex", "]", "==", "roomsInfo", "[", "1", "]", "[", "2", "]", "[", "roomIndex", "]", "\n", "topologyStatistics", "[", "'adjacent'", "]", "[", "0", "]", "+=", "(", "adjacentMatchMask", "*", "roomsInfo", "[", "0", "]", "[", "2", "]", "[", "roomIndex", "]", ")", ".", "sum", "(", ")", "\n", "topologyStatistics", "[", "'adjacent'", "]", "[", "1", "]", "+=", "roomsInfo", "[", "0", "]", "[", "2", "]", "[", "roomIndex", "]", ".", "sum", "(", ")", "\n", "topologyStatistics", "[", "'adjacent'", "]", "[", "2", "]", "+=", "roomsInfo", "[", "1", "]", "[", "2", "]", "[", "roomIndex", "]", ".", "sum", "(", ")", "\n", "topologyStatistics", "[", "'adjacent_all'", "]", "[", "0", "]", "+=", "int", "(", "np", ".", "all", "(", "adjacentMatchMask", ")", ")", "\n", "\n", "topologyStatistics", "[", "'all'", "]", "[", "0", "]", "+=", "int", "(", "np", ".", "all", "(", "neighborMatchMask", ")", "and", "np", ".", "all", "(", "adjacentMatchMask", ")", ")", "\n", "\n", "if", "roomIndex", ">", "0", ":", "\n", "        ", "topologyStatistics", "[", "'neighbor_foreground'", "]", "[", "0", "]", "+=", "(", "neighborMatchMask", "[", "1", ":", "]", "*", "roomsInfo", "[", "0", "]", "[", "1", "]", "[", "roomIndex", "]", "[", "1", ":", "]", ")", ".", "sum", "(", ")", "\n", "topologyStatistics", "[", "'neighbor_foreground'", "]", "[", "1", "]", "+=", "roomsInfo", "[", "0", "]", "[", "1", "]", "[", "roomIndex", "]", "[", "1", ":", "]", ".", "sum", "(", ")", "\n", "topologyStatistics", "[", "'neighbor_foreground'", "]", "[", "2", "]", "+=", "roomsInfo", "[", "1", "]", "[", "1", "]", "[", "roomIndex", "]", "[", "1", ":", "]", ".", "sum", "(", ")", "\n", "topologyStatistics", "[", "'neighbor_all_foreground'", "]", "[", "0", "]", "+=", "int", "(", "np", ".", "all", "(", "neighborMatchMask", "[", "1", ":", "]", ")", ")", "\n", "topologyStatistics", "[", "'all_foreground'", "]", "[", "0", "]", "+=", "int", "(", "np", ".", "all", "(", "neighborMatchMask", "[", "1", ":", "]", ")", "and", "np", ".", "all", "(", "adjacentMatchMask", "[", "1", ":", "]", ")", ")", "\n", "pass", "\n", "", "", "else", ":", "\n", "      ", "print", "(", "'incorrect label'", ")", "\n", "print", "(", "roomGT", "[", "1", "]", ".", "keys", "(", ")", ",", "roomGT", "[", "0", "]", ".", "max", "(", "0", ")", ".", "nonzero", "(", ")", "[", "0", "]", ".", "mean", "(", ")", ",", "roomGT", "[", "0", "]", ".", "max", "(", "1", ")", ".", "nonzero", "(", ")", "[", "0", "]", ".", "mean", "(", ")", ")", "\n", "print", "(", "roomPred", "[", "1", "]", ".", "keys", "(", ")", ",", "roomPred", "[", "0", "]", ".", "max", "(", "0", ")", ".", "nonzero", "(", ")", "[", "0", "]", ".", "mean", "(", ")", ",", "roomPred", "[", "0", "]", ".", "max", "(", "1", ")", ".", "nonzero", "(", ")", "[", "0", "]", ".", "mean", "(", ")", ")", "\n", "pass", "\n", "", "continue", "\n", "#print(roomsInfo[0][1], roomsInfo[1][1], roomsInfo[0][2], roomsInfo[1][2])", "\n", "#print('topology', len(roomsInfo[0][0]), numMatchedRooms)", "\n", "\n", "#print(statistics['room'])", "\n", "\n", "#topologyStatistics = {k: topologyStatistics[k] for k in ['neighbor_foreground', 'neighbor', 'neighbor_all', 'neighbor_all_foreground']}", "\n", "\n", "", "for", "k", "in", "[", "'neighbor_foreground'", ",", "'neighbor_all_foreground'", "]", ":", "\n", "    ", "statistics", "[", "k", "[", ":", "-", "11", "]", "]", "=", "topologyStatistics", "[", "k", "]", "\n", "continue", "\n", "", "return", "statistics", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.extractCorners": [[478, 657], ["enumerate", "enumerate", "utils.extractCornersFromHeatmaps", "QP.myaugmenthack", "myaugmenthack.items", "print", "enumerate", "enumerate", "pointOffsets.append", "len", "orientationPoints[].extend", "len", "enumerate", "pointOrientationLinesMap.append", "enumerate", "len", "xrange", "copy.deepcopy", "min", "max", "min", "max", "enumerate", "len", "list", "tuple.remove", "tuple", "xrange", "len", "enumerate", "orientationPoints[].append", "list", "tuple.append", "tuple", "len", "[].append", "[].append", "pointNeighbors[].append", "pointNeighbors[].append", "lines.append", "orientationPoints[].append", "abs"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.extractCornersFromHeatmaps", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.myaugmenthack"], ["", "def", "extractCorners", "(", "heatmaps", ",", "threshold", ",", "gap", ",", "cornerType", "=", "'wall'", ",", "augment", "=", "False", ",", "h_points", "=", "False", ",", "gt", "=", "False", ")", ":", "\n", "  ", "if", "gt", ":", "\n", "    ", "orientationPoints", "=", "heatmaps", "\n", "", "else", ":", "\n", "    ", "orientationPoints", "=", "extractCornersFromHeatmaps", "(", "heatmaps", ",", "threshold", ")", "\n", "pass", "\n", "#print(orientationPoints[7])", "\n", "#print(orientationPoints[12])", "\n", "#exit(1)", "\n", "", "if", "cornerType", "==", "'wall'", ":", "\n", "    ", "cornerOrientations", "=", "[", "]", "\n", "for", "orientations", "in", "POINT_ORIENTATIONS", ":", "\n", "      ", "cornerOrientations", "+=", "orientations", "\n", "continue", "\n", "", "", "elif", "cornerType", "==", "'door'", ":", "\n", "    ", "cornerOrientations", "=", "POINT_ORIENTATIONS", "[", "0", "]", "\n", "", "else", ":", "\n", "    ", "cornerOrientations", "=", "POINT_ORIENTATIONS", "[", "1", "]", "\n", "pass", "\n", "#print(orientationPoints)", "\n", "", "if", "h_points", ":", "\n", "    ", "res", "=", "myaugmenthack", "(", "orientationPoints", ",", "cornerOrientations", ",", "cornerType", ",", "gap", ")", "\n", "totalAugmentedPts", "=", "0", "\n", "for", "k", ",", "v", "in", "res", ".", "items", "(", ")", ":", "\n", "      ", "orientationPoints", "[", "k", "]", ".", "extend", "(", "v", ")", "\n", "totalAugmentedPts", "+=", "len", "(", "v", ")", "\n", "", "print", "(", "\"total augmented points\"", ",", "totalAugmentedPts", ")", "\n", "\n", "", "if", "augment", ":", "\n", "    ", "orientationMap", "=", "{", "}", "\n", "for", "pointType", ",", "orientationOrientations", "in", "enumerate", "(", "POINT_ORIENTATIONS", ")", ":", "\n", "      ", "for", "orientation", ",", "orientations", "in", "enumerate", "(", "orientationOrientations", ")", ":", "\n", "        ", "orientationMap", "[", "orientations", "]", "=", "orientation", "\n", "continue", "\n", "", "continue", "\n", "\n", "", "for", "orientationIndex", ",", "corners", "in", "enumerate", "(", "orientationPoints", ")", ":", "\n", "      ", "if", "len", "(", "corners", ")", ">", "3", ":", "\n", "        ", "continue", "#skip aug", "\n", "", "pointType", "=", "orientationIndex", "/", "4", "\n", "if", "pointType", "in", "[", "2", "]", ":", "\n", "        ", "orientation", "=", "orientationIndex", "%", "4", "\n", "orientations", "=", "POINT_ORIENTATIONS", "[", "pointType", "]", "[", "orientation", "]", "\n", "for", "i", "in", "xrange", "(", "len", "(", "orientations", ")", ")", ":", "\n", "          ", "newOrientations", "=", "list", "(", "orientations", ")", "\n", "newOrientations", ".", "remove", "(", "orientations", "[", "i", "]", ")", "\n", "newOrientations", "=", "tuple", "(", "newOrientations", ")", "\n", "if", "not", "newOrientations", "in", "orientationMap", ":", "\n", "            ", "continue", "\n", "", "newOrientation", "=", "orientationMap", "[", "newOrientations", "]", "\n", "for", "corner", "in", "corners", ":", "\n", "            ", "orientationPoints", "[", "(", "pointType", "-", "1", ")", "*", "4", "+", "newOrientation", "]", ".", "append", "(", "corner", "+", "(", "True", ",", ")", ")", "\n", "continue", "\n", "", "continue", "\n", "", "", "elif", "pointType", "in", "[", "1", "]", ":", "\n", "        ", "orientation", "=", "orientationIndex", "%", "4", "\n", "orientations", "=", "POINT_ORIENTATIONS", "[", "pointType", "]", "[", "orientation", "]", "\n", "for", "orientation", "in", "xrange", "(", "4", ")", ":", "\n", "          ", "if", "orientation", "in", "orientations", ":", "\n", "            ", "continue", "\n", "", "newOrientations", "=", "list", "(", "orientations", ")", "\n", "newOrientations", ".", "append", "(", "orientation", ")", "\n", "newOrientations", "=", "tuple", "(", "newOrientations", ")", "\n", "if", "not", "newOrientations", "in", "orientationMap", ":", "\n", "            ", "continue", "\n", "", "newOrientation", "=", "orientationMap", "[", "newOrientations", "]", "\n", "for", "corner", "in", "corners", ":", "\n", "            ", "orientationPoints", "[", "(", "pointType", "+", "1", ")", "*", "4", "+", "newOrientation", "]", ".", "append", "(", "corner", "+", "(", "True", ",", ")", ")", "\n", "continue", "\n", "", "continue", "\n", "", "pass", "\n", "", "continue", "\n", "", "pass", "\n", "#print(orientationPoints)", "\n", "", "pointOffset", "=", "0", "\n", "pointOffsets", "=", "[", "]", "\n", "points", "=", "[", "]", "\n", "pointOrientationLinesMap", "=", "[", "]", "\n", "for", "orientationIndex", ",", "corners", "in", "enumerate", "(", "orientationPoints", ")", ":", "\n", "    ", "pointOffsets", ".", "append", "(", "pointOffset", ")", "\n", "orientations", "=", "cornerOrientations", "[", "orientationIndex", "]", "\n", "for", "point", "in", "corners", ":", "\n", "      ", "orientationLines", "=", "{", "}", "\n", "for", "orientation", "in", "orientations", ":", "\n", "        ", "orientationLines", "[", "orientation", "]", "=", "[", "]", "\n", "continue", "\n", "", "pointOrientationLinesMap", ".", "append", "(", "orientationLines", ")", "\n", "continue", "\n", "\n", "", "pointOffset", "+=", "len", "(", "corners", ")", "\n", "\n", "if", "cornerType", "==", "'wall'", ":", "\n", "      ", "points", "+=", "[", "[", "corner", "[", "0", "]", "[", "0", "]", ",", "corner", "[", "0", "]", "[", "1", "]", ",", "orientationIndex", "/", "4", ",", "orientationIndex", "%", "4", "]", "for", "corner", "in", "corners", "]", "\n", "", "elif", "cornerType", "==", "'door'", ":", "\n", "      ", "points", "+=", "[", "[", "corner", "[", "0", "]", "[", "0", "]", ",", "corner", "[", "0", "]", "[", "1", "]", ",", "0", ",", "orientationIndex", "]", "for", "corner", "in", "corners", "]", "\n", "", "else", ":", "\n", "      ", "points", "+=", "[", "[", "corner", "[", "0", "]", "[", "0", "]", ",", "corner", "[", "0", "]", "[", "1", "]", ",", "1", ",", "orientationIndex", "]", "for", "corner", "in", "corners", "]", "\n", "pass", "\n", "", "continue", "\n", "\n", "", "augmentedPointMask", "=", "{", "}", "\n", "\n", "\n", "lines", "=", "[", "]", "\n", "pointNeighbors", "=", "[", "[", "]", "for", "point", "in", "points", "]", "\n", "\n", "for", "orientationIndex", ",", "corners", "in", "enumerate", "(", "orientationPoints", ")", ":", "\n", "    ", "orientations", "=", "cornerOrientations", "[", "orientationIndex", "]", "\n", "for", "orientation", "in", "orientations", ":", "\n", "      ", "if", "orientation", "not", "in", "[", "1", ",", "2", "]", ":", "\n", "        ", "continue", "\n", "", "oppositeOrientation", "=", "(", "orientation", "+", "2", ")", "%", "4", "\n", "lineDim", "=", "-", "1", "\n", "if", "orientation", "==", "0", "or", "orientation", "==", "2", ":", "\n", "        ", "lineDim", "=", "1", "\n", "", "else", ":", "\n", "        ", "lineDim", "=", "0", "\n", "pass", "\n", "\n", "", "for", "cornerIndex", ",", "corner", "in", "enumerate", "(", "corners", ")", ":", "\n", "        ", "pointIndex", "=", "pointOffsets", "[", "orientationIndex", "]", "+", "cornerIndex", "\n", "#print(corner)", "\n", "if", "len", "(", "corner", ")", ">", "3", ":", "\n", "          ", "augmentedPointMask", "[", "pointIndex", "]", "=", "True", "\n", "pass", "\n", "\n", "", "ranges", "=", "copy", ".", "deepcopy", "(", "ORIENTATION_RANGES", "[", "orientation", "]", ")", "\n", "\n", "ranges", "[", "lineDim", "]", "=", "min", "(", "ranges", "[", "lineDim", "]", ",", "corner", "[", "0", "]", "[", "lineDim", "]", ")", "\n", "ranges", "[", "lineDim", "+", "2", "]", "=", "max", "(", "ranges", "[", "lineDim", "+", "2", "]", ",", "corner", "[", "0", "]", "[", "lineDim", "]", ")", "\n", "ranges", "[", "1", "-", "lineDim", "]", "=", "min", "(", "ranges", "[", "1", "-", "lineDim", "]", ",", "corner", "[", "1", "]", "[", "1", "-", "lineDim", "]", "-", "gap", ")", "\n", "ranges", "[", "1", "-", "lineDim", "+", "2", "]", "=", "max", "(", "ranges", "[", "1", "-", "lineDim", "+", "2", "]", ",", "corner", "[", "2", "]", "[", "1", "-", "lineDim", "]", "+", "gap", ")", "\n", "\n", "for", "oppositeOrientationIndex", ",", "oppositeCorners", "in", "enumerate", "(", "orientationPoints", ")", ":", "\n", "          ", "if", "oppositeOrientation", "not", "in", "cornerOrientations", "[", "oppositeOrientationIndex", "]", ":", "\n", "            ", "continue", "\n", "", "for", "oppositeCornerIndex", ",", "oppositeCorner", "in", "enumerate", "(", "oppositeCorners", ")", ":", "\n", "            ", "if", "orientationIndex", "==", "oppositeOrientationIndex", "and", "oppositeCornerIndex", "==", "cornerIndex", ":", "\n", "              ", "continue", "\n", "\n", "", "oppositePointIndex", "=", "pointOffsets", "[", "oppositeOrientationIndex", "]", "+", "oppositeCornerIndex", "\n", "\n", "\n", "if", "oppositeCorner", "[", "0", "]", "[", "lineDim", "]", "<", "ranges", "[", "lineDim", "]", "or", "oppositeCorner", "[", "0", "]", "[", "lineDim", "]", ">", "ranges", "[", "lineDim", "+", "2", "]", "or", "ranges", "[", "1", "-", "lineDim", "]", ">", "oppositeCorner", "[", "2", "]", "[", "1", "-", "lineDim", "]", "or", "ranges", "[", "1", "-", "lineDim", "+", "2", "]", "<", "oppositeCorner", "[", "1", "]", "[", "1", "-", "lineDim", "]", ":", "\n", "              ", "continue", "\n", "\n", "\n", "", "if", "abs", "(", "oppositeCorner", "[", "0", "]", "[", "lineDim", "]", "-", "corner", "[", "0", "]", "[", "lineDim", "]", ")", "<", "LENGTH_THRESHOLDS", "[", "cornerType", "]", ":", "\n", "              ", "continue", "\n", "\n", "", "lineIndex", "=", "len", "(", "lines", ")", "\n", "pointOrientationLinesMap", "[", "pointIndex", "]", "[", "orientation", "]", ".", "append", "(", "lineIndex", ")", "\n", "pointOrientationLinesMap", "[", "oppositePointIndex", "]", "[", "oppositeOrientation", "]", ".", "append", "(", "lineIndex", ")", "\n", "pointNeighbors", "[", "pointIndex", "]", ".", "append", "(", "oppositePointIndex", ")", "\n", "pointNeighbors", "[", "oppositePointIndex", "]", ".", "append", "(", "pointIndex", ")", "\n", "\n", "lines", ".", "append", "(", "(", "pointIndex", ",", "oppositePointIndex", ")", ")", "\n", "continue", "\n", "", "continue", "\n", "", "continue", "\n", "", "continue", "\n", "", "continue", "\n", "# pointType = orientationIndex / 4", "\n", "# orientation = orientationIndex % 4", "\n", "# orientations = POINT_ORIENTATIONS[pointType][orientation]", "\n", "# for i in xrange(len(orientations)):", "\n", "#   newOrientations = list(orientations)", "\n", "#   newOrientations.remove(orientations[i])", "\n", "#   newOrientations = tuple(newOrientations)", "\n", "#   if not newOrientations in orientationMap:", "\n", "#     continue", "\n", "#   newOrientation = orientationMap[newOrientations]", "\n", "#   for corner in corners:", "\n", "#     orientationPoints[(pointType - 1) * 4 + newOrientation].append(corner + (True, ))", "\n", "#     continue", "\n", "#   continue", "\n", "# continue", "\n", "#print('augs', len(augmentedPointMask))", "\n", "", "return", "points", ",", "lines", ",", "pointOrientationLinesMap", ",", "pointNeighbors", ",", "augmentedPointMask", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.myaugmenthack": [[658, 835], ["enumerate", "enumerate", "enumerate", "enumerate", "pointOffsets.append", "len", "enumerate", "enumerate", "pointOrientationLinesMap.append", "enumerate", "enumerate", "copy.deepcopy", "min", "max", "min", "max", "enumerate", "enumerate", "enumerate", "enumerate", "len", "[].append", "[].append", "pointNeighbors[].append", "pointNeighbors[].append", "lines.append", "enumerate", "abs", "set", "set", "set", "set", "set", "set", "print", "set", "set", "len", "print", "QP.myVerifyCompatibility", "QP.myVerifyCompatibility", "QP.myVerifyCompatibility", "QP.myVerifyCompatibility", "abs", "abs", "valid_fourth.append", "tuple", "print", "augmented_points[].append", "abs", "abs", "abs", "abs", "abs", "abs", "print", "augmented_points[].append", "abs", "abs"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.myVerifyCompatibility", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.myVerifyCompatibility", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.myVerifyCompatibility", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.myVerifyCompatibility"], ["", "def", "myaugmenthack", "(", "orientationPoints", ",", "cornerOrientations", ",", "cornerType", ",", "gap", ")", ":", "\n", "  ", "lines", "=", "[", "]", "\n", "pointOffset", "=", "0", "\n", "pointOffsets", "=", "[", "]", "\n", "points", "=", "[", "]", "\n", "pointOrientationLinesMap", "=", "[", "]", "\n", "for", "orientationIndex", ",", "corners", "in", "enumerate", "(", "orientationPoints", ")", ":", "\n", "    ", "pointOffsets", ".", "append", "(", "pointOffset", ")", "\n", "orientations", "=", "cornerOrientations", "[", "orientationIndex", "]", "\n", "for", "point", "in", "corners", ":", "\n", "      ", "orientationLines", "=", "{", "}", "\n", "for", "orientation", "in", "orientations", ":", "\n", "        ", "orientationLines", "[", "orientation", "]", "=", "[", "]", "\n", "continue", "\n", "", "pointOrientationLinesMap", ".", "append", "(", "orientationLines", ")", "\n", "continue", "\n", "\n", "", "pointOffset", "+=", "len", "(", "corners", ")", "\n", "\n", "if", "cornerType", "==", "'wall'", ":", "\n", "      ", "points", "+=", "[", "[", "corner", "[", "0", "]", "[", "0", "]", ",", "corner", "[", "0", "]", "[", "1", "]", ",", "orientationIndex", "/", "4", ",", "orientationIndex", "%", "4", "]", "for", "corner", "in", "corners", "]", "\n", "", "elif", "cornerType", "==", "'door'", ":", "\n", "      ", "points", "+=", "[", "[", "corner", "[", "0", "]", "[", "0", "]", ",", "corner", "[", "0", "]", "[", "1", "]", ",", "0", ",", "orientationIndex", "]", "for", "corner", "in", "corners", "]", "\n", "", "else", ":", "\n", "      ", "points", "+=", "[", "[", "corner", "[", "0", "]", "[", "0", "]", ",", "corner", "[", "0", "]", "[", "1", "]", ",", "1", ",", "orientationIndex", "]", "for", "corner", "in", "corners", "]", "\n", "pass", "\n", "", "continue", "\n", "\n", "", "augmentedPointMask", "=", "{", "}", "\n", "\n", "\n", "lines", "=", "[", "]", "\n", "pointNeighbors", "=", "[", "[", "]", "for", "point", "in", "points", "]", "\n", "\n", "for", "orientationIndex", ",", "corners", "in", "enumerate", "(", "orientationPoints", ")", ":", "\n", "    ", "orientations", "=", "cornerOrientations", "[", "orientationIndex", "]", "\n", "for", "orientation", "in", "orientations", ":", "\n", "      ", "if", "orientation", "not", "in", "[", "1", ",", "2", "]", ":", "\n", "        ", "continue", "\n", "", "oppositeOrientation", "=", "(", "orientation", "+", "2", ")", "%", "4", "\n", "lineDim", "=", "-", "1", "\n", "if", "orientation", "==", "0", "or", "orientation", "==", "2", ":", "\n", "        ", "lineDim", "=", "1", "\n", "", "else", ":", "\n", "        ", "lineDim", "=", "0", "\n", "pass", "\n", "\n", "", "for", "cornerIndex", ",", "corner", "in", "enumerate", "(", "corners", ")", ":", "\n", "        ", "pointIndex", "=", "pointOffsets", "[", "orientationIndex", "]", "+", "cornerIndex", "\n", "\n", "ranges", "=", "copy", ".", "deepcopy", "(", "ORIENTATION_RANGES", "[", "orientation", "]", ")", "\n", "\n", "ranges", "[", "lineDim", "]", "=", "min", "(", "ranges", "[", "lineDim", "]", ",", "corner", "[", "0", "]", "[", "lineDim", "]", ")", "\n", "ranges", "[", "lineDim", "+", "2", "]", "=", "max", "(", "ranges", "[", "lineDim", "+", "2", "]", ",", "corner", "[", "0", "]", "[", "lineDim", "]", ")", "\n", "ranges", "[", "1", "-", "lineDim", "]", "=", "min", "(", "ranges", "[", "1", "-", "lineDim", "]", ",", "corner", "[", "1", "]", "[", "1", "-", "lineDim", "]", "-", "gap", ")", "\n", "ranges", "[", "1", "-", "lineDim", "+", "2", "]", "=", "max", "(", "ranges", "[", "1", "-", "lineDim", "+", "2", "]", ",", "corner", "[", "2", "]", "[", "1", "-", "lineDim", "]", "+", "gap", ")", "\n", "\n", "for", "oppositeOrientationIndex", ",", "oppositeCorners", "in", "enumerate", "(", "orientationPoints", ")", ":", "\n", "          ", "if", "oppositeOrientation", "not", "in", "cornerOrientations", "[", "oppositeOrientationIndex", "]", ":", "\n", "            ", "continue", "\n", "", "for", "oppositeCornerIndex", ",", "oppositeCorner", "in", "enumerate", "(", "oppositeCorners", ")", ":", "\n", "            ", "if", "orientationIndex", "==", "oppositeOrientationIndex", "and", "oppositeCornerIndex", "==", "cornerIndex", ":", "\n", "              ", "continue", "\n", "\n", "", "oppositePointIndex", "=", "pointOffsets", "[", "oppositeOrientationIndex", "]", "+", "oppositeCornerIndex", "\n", "\n", "\n", "if", "oppositeCorner", "[", "0", "]", "[", "lineDim", "]", "<", "ranges", "[", "lineDim", "]", "or", "oppositeCorner", "[", "0", "]", "[", "lineDim", "]", ">", "ranges", "[", "lineDim", "+", "2", "]", "or", "ranges", "[", "1", "-", "lineDim", "]", ">", "oppositeCorner", "[", "2", "]", "[", "1", "-", "lineDim", "]", "or", "ranges", "[", "1", "-", "lineDim", "+", "2", "]", "<", "oppositeCorner", "[", "1", "]", "[", "1", "-", "lineDim", "]", ":", "\n", "              ", "continue", "\n", "\n", "\n", "", "if", "abs", "(", "oppositeCorner", "[", "0", "]", "[", "lineDim", "]", "-", "corner", "[", "0", "]", "[", "lineDim", "]", ")", "<", "LENGTH_THRESHOLDS", "[", "cornerType", "]", ":", "\n", "              ", "continue", "\n", "\n", "", "lineIndex", "=", "len", "(", "lines", ")", "\n", "pointOrientationLinesMap", "[", "pointIndex", "]", "[", "orientation", "]", ".", "append", "(", "lineIndex", ")", "\n", "pointOrientationLinesMap", "[", "oppositePointIndex", "]", "[", "oppositeOrientation", "]", ".", "append", "(", "lineIndex", ")", "\n", "pointNeighbors", "[", "pointIndex", "]", ".", "append", "(", "oppositePointIndex", ")", "\n", "pointNeighbors", "[", "oppositePointIndex", "]", ".", "append", "(", "pointIndex", ")", "\n", "\n", "lines", ".", "append", "(", "(", "pointIndex", ",", "oppositePointIndex", ")", ")", "\n", "continue", "\n", "", "continue", "\n", "", "continue", "\n", "", "continue", "\n", "", "continue", "\n", "", "augmented_points", "=", "{", "}", "\n", "# for orientationIndex, corners in enumerate(orientationPoints):", "\n", "#   augmented_points[orientationIndex] = []", "\n", "orientationMap", "=", "{", "}", "\n", "for", "pointType", ",", "orientationOrientations", "in", "enumerate", "(", "POINT_ORIENTATIONS", ")", ":", "\n", "    ", "for", "orientation", ",", "orientations", "in", "enumerate", "(", "orientationOrientations", ")", ":", "\n", "      ", "orientationMap", "[", "orientations", "]", "=", "pointType", "*", "4", "+", "orientation", "\n", "continue", "\n", "", "continue", "\n", "# for k,vs in enumerate(pointNeighbors):", "\n", "#   for v in vs:", "\n", "#     print(points[k], points[v])", "\n", "", "for", "orientationIndex1", ",", "corners1", "in", "enumerate", "(", "orientationPoints", ")", ":", "\n", "    ", "for", "cornerIndex1", ",", "corner1", "in", "enumerate", "(", "corners1", ")", ":", "\n", "      ", "pointIndex1", "=", "pointOffsets", "[", "orientationIndex1", "]", "+", "cornerIndex1", "\n", "point1", "=", "points", "[", "pointIndex1", "]", "\n", "for", "orientationIndex2", ",", "corners2", "in", "enumerate", "(", "orientationPoints", ")", ":", "\n", "        ", "for", "cornerIndex2", ",", "corner2", "in", "enumerate", "(", "corners2", ")", ":", "\n", "          ", "if", "orientationIndex2", "==", "orientationIndex1", "and", "cornerIndex2", "==", "cornerIndex1", ":", "\n", "            ", "continue", "\n", "", "pointIndex2", "=", "pointOffsets", "[", "orientationIndex2", "]", "+", "cornerIndex2", "\n", "point2", "=", "points", "[", "pointIndex2", "]", "\n", "for", "orientationIndex3", ",", "corners3", "in", "enumerate", "(", "orientationPoints", ")", ":", "\n", "            ", "for", "cornerIndex3", ",", "corner3", "in", "enumerate", "(", "corners3", ")", ":", "\n", "              ", "if", "orientationIndex3", "==", "orientationIndex1", "and", "cornerIndex3", "==", "cornerIndex1", ":", "\n", "                ", "continue", "\n", "", "if", "orientationIndex3", "==", "orientationIndex2", "and", "cornerIndex3", "==", "cornerIndex2", ":", "\n", "                ", "continue", "\n", "", "pointIndex3", "=", "pointOffsets", "[", "orientationIndex3", "]", "+", "cornerIndex3", "\n", "point3", "=", "points", "[", "pointIndex3", "]", "\n", "if", "pointIndex2", "in", "pointNeighbors", "[", "pointIndex1", "]", "and", "pointIndex3", "in", "pointNeighbors", "[", "pointIndex2", "]", ":", "\n", "                ", "if", "abs", "(", "point1", "[", "0", "]", "-", "point3", "[", "0", "]", ")", "<", "gap", "or", "abs", "(", "point1", "[", "1", "]", "-", "point3", "[", "1", "]", ")", "<", "gap", ":", "\n", "                  ", "continue", "\n", "", "fourthPoints", "=", "set", "(", "pointNeighbors", "[", "pointIndex1", "]", ")", "&", "set", "(", "pointNeighbors", "[", "pointIndex3", "]", ")", "\n", "valid_fourth", "=", "[", "]", "\n", "for", "point4", "in", "fourthPoints", ":", "\n", "                  ", "if", "abs", "(", "points", "[", "point4", "]", "[", "0", "]", "-", "point2", "[", "0", "]", ")", ">", "gap", "and", "abs", "(", "points", "[", "point4", "]", "[", "1", "]", "-", "point2", "[", "1", "]", ")", ">", "gap", ":", "\n", "                    ", "valid_fourth", ".", "append", "(", "point4", ")", "\n", "pass", "\n", "", "pass", "\n", "# usable_orientations = set(range(len(POINT_ORIENTATIONS[point1[2]])))", "\n", "# used_orientation = set([point1[3], point2[3], point3[3]])", "\n", "# fourth_orientation = usable_orientations - used_orientation", "\n", "", "pt2_has", "=", "set", "(", "POINT_ORIENTATIONS", "[", "point2", "[", "2", "]", "]", "[", "point2", "[", "3", "]", "]", ")", "\n", "oppositeOrientation2", "=", "set", "(", "[", "(", "orient", "+", "2", ")", "%", "4", "for", "orient", "in", "pt2_has", "]", ")", "\n", "\n", "pt1_has", "=", "set", "(", "POINT_ORIENTATIONS", "[", "point1", "[", "2", "]", "]", "[", "point1", "[", "3", "]", "]", ")", "\n", "oppositeOrientation1", "=", "set", "(", "[", "(", "orient", "+", "2", ")", "%", "4", "for", "orient", "in", "pt1_has", "]", ")", "\n", "# pt1_needed = oppositeOrientation1 - pt2_has", "\n", "\n", "pt3_has", "=", "set", "(", "POINT_ORIENTATIONS", "[", "point3", "[", "2", "]", "]", "[", "point3", "[", "3", "]", "]", ")", "\n", "oppositeOrientation3", "=", "set", "(", "[", "(", "orient", "+", "2", ")", "%", "4", "for", "orient", "in", "pt3_has", "]", ")", "\n", "# pt3_needed = oppositeOrientation3 - pt2_has", "\n", "newPoint_orientation", "=", "orientationMap", "[", "tuple", "(", "oppositeOrientation2", ")", "]", "\n", "print", "(", "'orient'", ",", "newPoint_orientation", ",", "oppositeOrientation2", ")", "\n", "if", "len", "(", "valid_fourth", ")", "==", "0", ":", "\n", "\n", "\n", "                  ", "print", "(", "'test orientation'", ",", "oppositeOrientation2", ",", "oppositeOrientation1", ",", "oppositeOrientation3", ")", "\n", "newPoint1", "=", "[", "point1", "[", "0", "]", ",", "point3", "[", "1", "]", ",", "newPoint_orientation", "/", "4", ",", "newPoint_orientation", "%", "4", "]", "\n", "newPoint2", "=", "[", "point3", "[", "0", "]", ",", "point1", "[", "1", "]", ",", "newPoint_orientation", "/", "4", ",", "newPoint_orientation", "%", "4", "]", "\n", "verify11", "=", "myVerifyCompatibility", "(", "oppositeOrientation1", ",", "oppositeOrientation2", ",", "point1", ",", "newPoint1", ",", "gap", ")", "\n", "verify31", "=", "myVerifyCompatibility", "(", "oppositeOrientation3", ",", "oppositeOrientation2", ",", "point3", ",", "newPoint1", ",", "gap", ")", "\n", "verify12", "=", "myVerifyCompatibility", "(", "oppositeOrientation1", ",", "oppositeOrientation2", ",", "point1", ",", "newPoint2", ",", "gap", ")", "\n", "verify32", "=", "myVerifyCompatibility", "(", "oppositeOrientation3", ",", "oppositeOrientation2", ",", "point3", ",", "newPoint2", ",", "gap", ")", "\n", "if", "abs", "(", "newPoint1", "[", "0", "]", "-", "point2", "[", "0", "]", ")", ">", "gap", "and", "abs", "(", "newPoint1", "[", "1", "]", "-", "point2", "[", "1", "]", ")", ">", "gap", "and", "verify11", "and", "verify31", ":", "\n", "                    ", "if", "newPoint_orientation", "not", "in", "augmented_points", ":", "\n", "                      ", "augmented_points", "[", "newPoint_orientation", "]", "=", "[", "]", "\n", "", "print", "(", "'case1'", ",", "newPoint1", ",", "point1", ",", "point2", ",", "point3", ",", "abs", "(", "newPoint1", "[", "0", "]", "-", "point2", "[", "0", "]", ")", ",", "abs", "(", "newPoint1", "[", "1", "]", "-", "point2", "[", "1", "]", ")", ")", "\n", "augmented_points", "[", "newPoint_orientation", "]", ".", "append", "(", "(", "(", "newPoint1", "[", "0", "]", ",", "newPoint1", "[", "1", "]", ")", ",", "(", "newPoint1", "[", "0", "]", "-", "gap", ",", "newPoint1", "[", "1", "]", "-", "gap", ")", ",", "(", "newPoint1", "[", "0", "]", "+", "gap", ",", "newPoint1", "[", "1", "]", "+", "gap", ")", ",", "True", ")", ")", "\n", "pass", "\n", "", "elif", "verify12", "and", "verify32", ":", "\n", "                    ", "if", "newPoint_orientation", "not", "in", "augmented_points", ":", "\n", "                      ", "augmented_points", "[", "newPoint_orientation", "]", "=", "[", "]", "\n", "pass", "\n", "", "print", "(", "'case2'", ",", "newPoint2", ",", "point1", ",", "point2", ",", "point3", ",", "abs", "(", "newPoint2", "[", "0", "]", "-", "point2", "[", "0", "]", ")", ",", "abs", "(", "newPoint2", "[", "1", "]", "-", "point2", "[", "1", "]", ")", ")", "\n", "augmented_points", "[", "newPoint_orientation", "]", ".", "append", "(", "(", "(", "newPoint2", "[", "0", "]", ",", "newPoint2", "[", "1", "]", ")", ",", "(", "newPoint2", "[", "0", "]", "-", "gap", ",", "newPoint2", "[", "1", "]", "-", "gap", ")", ",", "(", "newPoint2", "[", "0", "]", "+", "gap", ",", "newPoint2", "[", "1", "]", "+", "gap", ")", ",", "True", ")", ")", "\n", "pass", "\n", "\n", "\n", "", "pass", "\n", "", "pass", "\n", "", "continue", "\n", "", "continue", "\n", "", "continue", "\n", "", "continue", "\n", "", "continue", "\n", "", "continue", "\n", "", "pass", "\n", "\n", "return", "augmented_points", "\n", "", "def", "myVerifyCompatibility", "(", "orients1", ",", "orients2", ",", "pt1", ",", "pt2", ",", "gap", ")", ":", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.myVerifyCompatibility": [[835, 855], ["abs", "abs", "abs", "abs"], "function", ["None"], ["", "def", "myVerifyCompatibility", "(", "orients1", ",", "orients2", ",", "pt1", ",", "pt2", ",", "gap", ")", ":", "\n", "  ", "verification_set", "=", "orients1", "&", "orients2", "\n", "passed_verification", "=", "False", "\n", "for", "v", "in", "verification_set", ":", "\n", "    ", "if", "v", "==", "0", ":", "\n", "      ", "if", "pt2", "[", "1", "]", "-", "pt1", "[", "1", "]", ">", "0", "and", "abs", "(", "pt1", "[", "0", "]", "-", "pt2", "[", "0", "]", ")", "<", "gap", ":", "\n", "        ", "passed_verification", "=", "True", "\n", "", "", "if", "v", "==", "1", ":", "\n", "      ", "if", "pt2", "[", "0", "]", "-", "pt1", "[", "0", "]", "<", "0", "and", "abs", "(", "pt1", "[", "1", "]", "-", "pt2", "[", "1", "]", ")", "<", "gap", ":", "\n", "        ", "passed_verification", "=", "True", "\n", "", "pass", "\n", "", "if", "v", "==", "2", ":", "\n", "      ", "if", "pt2", "[", "1", "]", "-", "pt1", "[", "1", "]", "<", "0", "and", "abs", "(", "pt1", "[", "0", "]", "-", "pt2", "[", "0", "]", ")", "<", "gap", ":", "\n", "        ", "passed_verification", "=", "True", "\n", "", "pass", "\n", "", "if", "v", "==", "3", ":", "\n", "      ", "if", "pt2", "[", "0", "]", "-", "pt1", "[", "0", "]", ">", "0", "and", "abs", "(", "pt1", "[", "1", "]", "-", "pt2", "[", "1", "]", ")", "<", "gap", ":", "\n", "        ", "passed_verification", "=", "True", "\n", "", "pass", "\n", "", "", "return", "passed_verification", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.augmentPoints": [[856, 944], ["enumerate", "enumerate", "enumerate", "enumerate", "xrange", "xrange", "len", "list", "tuple.remove", "tuple", "newPoints.append", "copy.deepcopy", "xrange", "enumerate", "list", "tuple.append", "tuple", "newPoints.append", "min", "max", "xrange", "abs", "max", "abs"], "function", ["None"], ["", "def", "augmentPoints", "(", "points", ",", "decreasingTypes", "=", "[", "2", "]", ",", "increasingTypes", "=", "[", "1", "]", ")", ":", "\n", "  ", "orientationMap", "=", "{", "}", "\n", "for", "pointType", ",", "orientationOrientations", "in", "enumerate", "(", "POINT_ORIENTATIONS", ")", ":", "\n", "    ", "for", "orientation", ",", "orientations", "in", "enumerate", "(", "orientationOrientations", ")", ":", "\n", "      ", "orientationMap", "[", "orientations", "]", "=", "orientation", "\n", "continue", "\n", "", "continue", "\n", "\n", "", "newPoints", "=", "[", "]", "\n", "for", "pointIndex", ",", "point", "in", "enumerate", "(", "points", ")", ":", "\n", "    ", "if", "point", "[", "2", "]", "not", "in", "decreasingTypes", ":", "\n", "      ", "continue", "\n", "", "orientations", "=", "POINT_ORIENTATIONS", "[", "point", "[", "2", "]", "]", "[", "point", "[", "3", "]", "]", "\n", "for", "i", "in", "xrange", "(", "len", "(", "orientations", ")", ")", ":", "\n", "      ", "newOrientations", "=", "list", "(", "orientations", ")", "\n", "newOrientations", ".", "remove", "(", "orientations", "[", "i", "]", ")", "\n", "newOrientations", "=", "tuple", "(", "newOrientations", ")", "\n", "if", "not", "newOrientations", "in", "orientationMap", ":", "\n", "        ", "continue", "\n", "", "newOrientation", "=", "orientationMap", "[", "newOrientations", "]", "\n", "newPoints", ".", "append", "(", "[", "point", "[", "0", "]", ",", "point", "[", "1", "]", ",", "point", "[", "2", "]", "-", "1", ",", "newOrientation", "]", ")", "\n", "continue", "\n", "", "continue", "\n", "\n", "", "for", "pointIndex", ",", "point", "in", "enumerate", "(", "points", ")", ":", "\n", "    ", "if", "point", "[", "2", "]", "not", "in", "increasingTypes", ":", "\n", "      ", "continue", "\n", "", "orientations", "=", "POINT_ORIENTATIONS", "[", "point", "[", "2", "]", "]", "[", "point", "[", "3", "]", "]", "\n", "for", "orientation", "in", "xrange", "(", "4", ")", ":", "\n", "      ", "if", "orientation", "in", "orientations", ":", "\n", "        ", "continue", "\n", "\n", "", "oppositeOrientation", "=", "(", "orientation", "+", "2", ")", "%", "4", "\n", "ranges", "=", "copy", ".", "deepcopy", "(", "ORIENTATION_RANGES", "[", "orientation", "]", ")", "\n", "lineDim", "=", "-", "1", "\n", "if", "orientation", "==", "0", "or", "orientation", "==", "2", ":", "\n", "        ", "lineDim", "=", "1", "\n", "", "else", ":", "\n", "        ", "lineDim", "=", "0", "\n", "pass", "\n", "", "deltas", "=", "[", "0", ",", "0", "]", "\n", "\n", "if", "lineDim", "==", "1", ":", "\n", "        ", "deltas", "[", "0", "]", "=", "gap", "\n", "", "else", ":", "\n", "        ", "deltas", "[", "1", "]", "=", "gap", "\n", "pass", "\n", "\n", "", "for", "c", "in", "xrange", "(", "2", ")", ":", "\n", "        ", "ranges", "[", "c", "]", "=", "min", "(", "ranges", "[", "c", "]", ",", "point", "[", "c", "]", "-", "deltas", "[", "c", "]", ")", "\n", "ranges", "[", "c", "+", "2", "]", "=", "max", "(", "ranges", "[", "c", "+", "2", "]", ",", "point", "[", "c", "]", "+", "deltas", "[", "c", "]", ")", "\n", "continue", "\n", "\n", "", "hasNeighbor", "=", "False", "\n", "for", "neighborPointIndex", ",", "neighborPoint", "in", "enumerate", "(", "points", ")", ":", "\n", "        ", "if", "neighborPointIndex", "==", "pointIndex", ":", "\n", "          ", "continue", "\n", "\n", "", "neighborOrientations", "=", "POINT_ORIENTATIONS", "[", "neighborPoint", "[", "2", "]", "]", "[", "neighborPoint", "[", "3", "]", "]", "\n", "if", "oppositeOrientation", "not", "in", "neighborOrientations", ":", "\n", "          ", "continue", "\n", "\n", "", "inRange", "=", "True", "\n", "for", "c", "in", "xrange", "(", "2", ")", ":", "\n", "          ", "if", "neighborPoint", "[", "c", "]", "<", "ranges", "[", "c", "]", "or", "neighborPoint", "[", "c", "]", ">", "ranges", "[", "c", "+", "2", "]", ":", "\n", "            ", "inRange", "=", "False", "\n", "break", "\n", "", "continue", "\n", "\n", "", "if", "not", "inRange", "or", "abs", "(", "neighborPoint", "[", "lineDim", "]", "-", "point", "[", "lineDim", "]", ")", "<", "max", "(", "abs", "(", "neighborPoint", "[", "1", "-", "lineDim", "]", "-", "point", "[", "1", "-", "lineDim", "]", ")", ",", "1", ")", ":", "\n", "          ", "continue", "\n", "\n", "", "hasNeighbor", "=", "True", "\n", "break", "\n", "\n", "", "if", "not", "hasNeighbor", ":", "\n", "        ", "continue", "\n", "\n", "", "newOrientations", "=", "list", "(", "orientations", ")", "\n", "newOrientations", ".", "append", "(", "orientation", ")", "\n", "newOrientations", "=", "tuple", "(", "newOrientations", ")", "\n", "if", "not", "newOrientations", "in", "orientationMap", ":", "\n", "        ", "continue", "\n", "", "newOrientation", "=", "orientationMap", "[", "newOrientations", "]", "\n", "newPoints", ".", "append", "(", "[", "point", "[", "0", "]", ",", "point", "[", "1", "]", ",", "point", "[", "2", "]", "+", "1", ",", "newOrientation", "]", ")", "\n", "continue", "\n", "", "continue", "\n", "", "return", "points", "+", "newPoints", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.filterWalls": [[946, 1071], ["enumerate", "enumerate", "enumerate", "enumerate", "enumerate", "print", "enumerate", "floorplan_utils.calcLineDim", "enumerate", "floorplan_utils.calcLineDim", "enumerate", "len", "xrange", "xrange", "[].append", "pointNeighbors[].append", "[].append", "len", "len", "len", "newWallPoints.append", "newWallLines.append", "len", "len", "len", "tuple", "len", "orientationNeighborMap.keys", "tuple", "orientationNeighborMap.keys"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim"], ["", "def", "filterWalls", "(", "wallPoints", ",", "wallLines", ")", ":", "\n", "  ", "orientationMap", "=", "{", "}", "\n", "for", "pointType", ",", "orientationOrientations", "in", "enumerate", "(", "POINT_ORIENTATIONS", ")", ":", "\n", "    ", "for", "orientation", ",", "orientations", "in", "enumerate", "(", "orientationOrientations", ")", ":", "\n", "      ", "orientationMap", "[", "orientations", "]", "=", "orientation", "\n", "continue", "\n", "", "continue", "\n", "\n", "#print(POINT_ORIENTATIONS)", "\n", "\n", "", "while", "True", ":", "\n", "    ", "pointOrientationNeighborsMap", "=", "{", "}", "\n", "for", "line", "in", "wallLines", ":", "\n", "      ", "lineDim", "=", "calcLineDim", "(", "wallPoints", ",", "line", ")", "\n", "for", "c", ",", "pointIndex", "in", "enumerate", "(", "line", ")", ":", "\n", "        ", "if", "lineDim", "==", "0", ":", "\n", "          ", "if", "c", "==", "0", ":", "\n", "            ", "orientation", "=", "1", "\n", "", "else", ":", "\n", "            ", "orientation", "=", "3", "\n", "", "", "else", ":", "\n", "          ", "if", "c", "==", "0", ":", "\n", "            ", "orientation", "=", "2", "\n", "", "else", ":", "\n", "            ", "orientation", "=", "0", "\n", "pass", "\n", "", "pass", "\n", "\n", "", "if", "pointIndex", "not", "in", "pointOrientationNeighborsMap", ":", "\n", "          ", "pointOrientationNeighborsMap", "[", "pointIndex", "]", "=", "{", "}", "\n", "pass", "\n", "", "if", "orientation", "not", "in", "pointOrientationNeighborsMap", "[", "pointIndex", "]", ":", "\n", "          ", "pointOrientationNeighborsMap", "[", "pointIndex", "]", "[", "orientation", "]", "=", "[", "]", "\n", "pass", "\n", "", "pointOrientationNeighborsMap", "[", "pointIndex", "]", "[", "orientation", "]", ".", "append", "(", "line", "[", "1", "-", "c", "]", ")", "\n", "continue", "\n", "", "continue", "\n", "\n", "\n", "", "invalidPointMask", "=", "{", "}", "\n", "for", "pointIndex", ",", "point", "in", "enumerate", "(", "wallPoints", ")", ":", "\n", "      ", "if", "pointIndex", "not", "in", "pointOrientationNeighborsMap", ":", "\n", "        ", "invalidPointMask", "[", "pointIndex", "]", "=", "True", "\n", "continue", "\n", "", "orientationNeighborMap", "=", "pointOrientationNeighborsMap", "[", "pointIndex", "]", "\n", "orientations", "=", "POINT_ORIENTATIONS", "[", "point", "[", "2", "]", "]", "[", "point", "[", "3", "]", "]", "\n", "if", "len", "(", "orientationNeighborMap", ")", "<", "len", "(", "orientations", ")", ":", "\n", "        ", "if", "len", "(", "orientationNeighborMap", ")", ">=", "2", "and", "tuple", "(", "orientationNeighborMap", ".", "keys", "(", ")", ")", "in", "orientationMap", ":", "\n", "          ", "newOrientation", "=", "orientationMap", "[", "tuple", "(", "orientationNeighborMap", ".", "keys", "(", ")", ")", "]", "\n", "wallPoints", "[", "pointIndex", "]", "[", "2", "]", "=", "len", "(", "orientationNeighborMap", ")", "-", "1", "\n", "wallPoints", "[", "pointIndex", "]", "[", "3", "]", "=", "newOrientation", "\n", "#print(orientationNeighborMap)", "\n", "#print('new', len(orientationNeighborMap), newOrientation)", "\n", "continue", "\n", "", "invalidPointMask", "[", "pointIndex", "]", "=", "True", "\n", "pass", "\n", "", "continue", "\n", "\n", "", "if", "len", "(", "invalidPointMask", ")", "==", "0", ":", "\n", "      ", "break", "\n", "\n", "", "newWallPoints", "=", "[", "]", "\n", "pointIndexMap", "=", "{", "}", "\n", "for", "pointIndex", ",", "point", "in", "enumerate", "(", "wallPoints", ")", ":", "\n", "      ", "if", "pointIndex", "not", "in", "invalidPointMask", ":", "\n", "        ", "pointIndexMap", "[", "pointIndex", "]", "=", "len", "(", "newWallPoints", ")", "\n", "newWallPoints", ".", "append", "(", "point", ")", "\n", "pass", "\n", "", "continue", "\n", "\n", "", "print", "(", "pointIndexMap", ")", "\n", "# for pointIndex, point in enumerate(wallPoints):", "\n", "#   if pointIndex in pointOrientationNeighborsMap:", "\n", "#     print(pointIndex, point, pointOrientationNeighborsMap[pointIndex])", "\n", "#     pass", "\n", "#   continue", "\n", "\n", "#print(len(wallPoints), len(newWallPoints), len(wallLines))", "\n", "#print(invalidPointMask)", "\n", "#exit(1)", "\n", "\n", "wallPoints", "=", "newWallPoints", "\n", "\n", "newWallLines", "=", "[", "]", "\n", "for", "lineIndex", ",", "line", "in", "enumerate", "(", "wallLines", ")", ":", "\n", "      ", "if", "line", "[", "0", "]", "in", "pointIndexMap", "and", "line", "[", "1", "]", "in", "pointIndexMap", ":", "\n", "        ", "newLine", "=", "(", "pointIndexMap", "[", "line", "[", "0", "]", "]", ",", "pointIndexMap", "[", "line", "[", "1", "]", "]", ")", "\n", "newWallLines", ".", "append", "(", "newLine", ")", "\n", "pass", "\n", "", "continue", "\n", "", "wallLines", "=", "newWallLines", "\n", "continue", "\n", "\n", "", "pointOrientationLinesMap", "=", "[", "{", "}", "for", "_", "in", "xrange", "(", "len", "(", "wallPoints", ")", ")", "]", "\n", "pointNeighbors", "=", "[", "[", "]", "for", "_", "in", "xrange", "(", "len", "(", "wallPoints", ")", ")", "]", "\n", "\n", "#print(wallLines[76])", "\n", "#print(wallPoints[wallLines[76][0]], wallPoints[wallLines[76][1]])", "\n", "\n", "for", "lineIndex", ",", "line", "in", "enumerate", "(", "wallLines", ")", ":", "\n", "    ", "lineDim", "=", "calcLineDim", "(", "wallPoints", ",", "line", ")", "\n", "for", "c", ",", "pointIndex", "in", "enumerate", "(", "line", ")", ":", "\n", "      ", "if", "lineDim", "==", "0", ":", "\n", "        ", "if", "wallPoints", "[", "pointIndex", "]", "[", "lineDim", "]", "<", "wallPoints", "[", "line", "[", "1", "-", "c", "]", "]", "[", "lineDim", "]", ":", "\n", "          ", "orientation", "=", "1", "\n", "", "else", ":", "\n", "          ", "orientation", "=", "3", "\n", "pass", "\n", "", "", "else", ":", "\n", "        ", "if", "wallPoints", "[", "pointIndex", "]", "[", "lineDim", "]", "<", "wallPoints", "[", "line", "[", "1", "-", "c", "]", "]", "[", "lineDim", "]", ":", "\n", "          ", "orientation", "=", "2", "\n", "", "else", ":", "\n", "          ", "orientation", "=", "0", "\n", "pass", "\n", "", "pass", "\n", "\n", "", "if", "orientation", "not", "in", "pointOrientationLinesMap", "[", "pointIndex", "]", ":", "\n", "        ", "pointOrientationLinesMap", "[", "pointIndex", "]", "[", "orientation", "]", "=", "[", "]", "\n", "pass", "\n", "", "pointOrientationLinesMap", "[", "pointIndex", "]", "[", "orientation", "]", ".", "append", "(", "lineIndex", ")", "\n", "pointNeighbors", "[", "pointIndex", "]", ".", "append", "(", "line", "[", "1", "-", "c", "]", ")", "\n", "continue", "\n", "", "continue", "\n", "\n", "", "return", "wallPoints", ",", "wallLines", ",", "pointOrientationLinesMap", ",", "pointNeighbors", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.filterWallsDynamic": [[1073, 1204], ["enumerate", "enumerate", "floorplan_utils.drawLines", "floorplan_utils.drawPoints", "cv2.imwrite", "invalidPointMask.iteritems", "enumerate", "enumerate", "floorplan_utils.calcLineDim", "enumerate", "floorplan_utils.calcLineDim", "enumerate", "len", "floorplan_utils.drawPoints.copy", "floorplan_utils.drawPoints", "print", "floorplan_utils.drawLines", "cv2.imwrite", "xrange", "xrange", "[].append", "pointNeighbors[].append", "[].append", "numpy.array", "len", "newWallPoints.append", "newWallLines.append", "len", "len", "str", "numpy.array", "connectingLines.append", "numpy.array", "str", "str"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawLines", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawPoints", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawPoints", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawLines"], ["", "def", "filterWallsDynamic", "(", "wallPoints", ",", "wallLines", ")", ":", "\n", "  ", "iteration", "=", "0", "\n", "while", "True", ":", "\n", "    ", "pointOrientationNeighborsMap", "=", "{", "}", "\n", "for", "line", "in", "wallLines", ":", "\n", "      ", "lineDim", "=", "calcLineDim", "(", "wallPoints", ",", "line", ")", "\n", "#print(line, lineDim)", "\n", "\n", "for", "c", ",", "pointIndex", "in", "enumerate", "(", "line", ")", ":", "\n", "        ", "if", "lineDim", "==", "0", ":", "\n", "          ", "if", "c", "==", "0", ":", "\n", "            ", "orientation", "=", "1", "\n", "", "else", ":", "\n", "            ", "orientation", "=", "3", "\n", "", "", "else", ":", "\n", "          ", "if", "c", "==", "0", ":", "\n", "            ", "orientation", "=", "2", "\n", "", "else", ":", "\n", "            ", "orientation", "=", "0", "\n", "pass", "\n", "", "pass", "\n", "\n", "", "if", "pointIndex", "not", "in", "pointOrientationNeighborsMap", ":", "\n", "          ", "pointOrientationNeighborsMap", "[", "pointIndex", "]", "=", "{", "}", "\n", "pass", "\n", "", "if", "orientation", "not", "in", "pointOrientationNeighborsMap", "[", "pointIndex", "]", ":", "\n", "          ", "pointOrientationNeighborsMap", "[", "pointIndex", "]", "[", "orientation", "]", "=", "[", "]", "\n", "pass", "\n", "", "pointOrientationNeighborsMap", "[", "pointIndex", "]", "[", "orientation", "]", ".", "append", "(", "line", "[", "1", "-", "c", "]", ")", "\n", "continue", "\n", "", "continue", "\n", "\n", "#print(pointOrientationNeighborsMap[3])", "\n", "#print(pointOrientationNeighborsMap[8])", "\n", "#print(pointOrientationNeighborsMap[12])", "\n", "#exit(1)", "\n", "\n", "", "invalidPointMask", "=", "{", "}", "\n", "for", "pointIndex", ",", "point", "in", "enumerate", "(", "wallPoints", ")", ":", "\n", "      ", "if", "pointIndex", "not", "in", "pointOrientationNeighborsMap", ":", "\n", "        ", "invalidPointMask", "[", "pointIndex", "]", "=", "True", "\n", "continue", "\n", "", "orientationNeighborMap", "=", "pointOrientationNeighborsMap", "[", "pointIndex", "]", "\n", "orientations", "=", "POINT_ORIENTATIONS", "[", "point", "[", "2", "]", "]", "[", "point", "[", "3", "]", "]", "\n", "for", "orientation", "in", "orientations", ":", "\n", "        ", "if", "orientation", "not", "in", "orientationNeighborMap", ":", "\n", "          ", "invalidPointMask", "[", "pointIndex", "]", "=", "True", "\n", "break", "\n", "", "continue", "\n", "", "continue", "\n", "\n", "", "if", "len", "(", "invalidPointMask", ")", "==", "0", ":", "\n", "      ", "break", "\n", "\n", "", "image", "=", "drawLines", "(", "''", ",", "width", ",", "height", ",", "wallPoints", ",", "wallLines", ",", "[", "]", ",", "None", ",", "lineWidth", "=", "0", ",", "lineColor", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "128", "]", ")", ")", "\n", "image", "=", "drawPoints", "(", "''", ",", "width", ",", "height", ",", "wallPoints", ",", "image", ",", "pointSize", "=", "3", ",", "pointColor", "=", "255", ")", "\n", "cv2", ".", "imwrite", "(", "'test/walls/walls_'", "+", "str", "(", "iteration", ")", "+", "'.png'", ",", "image", ")", "\n", "for", "pointIndex", ",", "_", "in", "invalidPointMask", ".", "iteritems", "(", ")", ":", "\n", "      ", "newImage", "=", "image", ".", "copy", "(", ")", "\n", "newImage", "=", "drawPoints", "(", "''", ",", "width", ",", "height", ",", "[", "wallPoints", "[", "pointIndex", "]", "]", ",", "newImage", ",", "pointSize", "=", "3", ",", "pointColor", "=", "np", ".", "array", "(", "[", "255", ",", "0", ",", "255", "]", ")", ")", "\n", "connectingLines", "=", "[", "]", "\n", "for", "line", "in", "wallLines", ":", "\n", "        ", "if", "pointIndex", "in", "line", ":", "\n", "          ", "connectingLines", ".", "append", "(", "line", ")", "\n", "pass", "\n", "", "continue", "\n", "", "print", "(", "iteration", ",", "pointIndex", ",", "wallPoints", "[", "pointIndex", "]", ")", "\n", "newImage", "=", "drawLines", "(", "''", ",", "width", ",", "height", ",", "wallPoints", ",", "connectingLines", ",", "[", "]", ",", "newImage", ",", "1", ",", "lineColor", "=", "np", ".", "array", "(", "[", "255", ",", "0", ",", "0", "]", ")", ")", "\n", "cv2", ".", "imwrite", "(", "'test/walls/walls_'", "+", "str", "(", "iteration", ")", "+", "'_'", "+", "str", "(", "pointIndex", ")", "+", "'.png'", ",", "newImage", ")", "\n", "continue", "\n", "\n", "", "newWallPoints", "=", "[", "]", "\n", "pointIndexMap", "=", "{", "}", "\n", "for", "pointIndex", ",", "point", "in", "enumerate", "(", "wallPoints", ")", ":", "\n", "      ", "if", "pointIndex", "not", "in", "invalidPointMask", ":", "\n", "        ", "pointIndexMap", "[", "pointIndex", "]", "=", "len", "(", "newWallPoints", ")", "\n", "newWallPoints", ".", "append", "(", "point", ")", "\n", "pass", "\n", "", "continue", "\n", "\n", "# for pointIndex, point in enumerate(wallPoints):", "\n", "#   if pointIndex in pointOrientationNeighborsMap:", "\n", "#     print(pointIndex, point, pointOrientationNeighborsMap[pointIndex])", "\n", "#     pass", "\n", "#   continue", "\n", "\n", "#print(len(wallPoints), len(newWallPoints), len(wallLines))", "\n", "#print(invalidPointMask)", "\n", "#exit(1)", "\n", "\n", "", "wallPoints", "=", "newWallPoints", "\n", "\n", "newWallLines", "=", "[", "]", "\n", "for", "lineIndex", ",", "line", "in", "enumerate", "(", "wallLines", ")", ":", "\n", "      ", "if", "line", "[", "0", "]", "in", "pointIndexMap", "and", "line", "[", "1", "]", "in", "pointIndexMap", ":", "\n", "        ", "newLine", "=", "(", "pointIndexMap", "[", "line", "[", "0", "]", "]", ",", "pointIndexMap", "[", "line", "[", "1", "]", "]", ")", "\n", "newWallLines", ".", "append", "(", "newLine", ")", "\n", "pass", "\n", "", "continue", "\n", "", "wallLines", "=", "newWallLines", "\n", "iteration", "+=", "1", "\n", "continue", "\n", "\n", "", "pointOrientationLinesMap", "=", "[", "{", "}", "for", "_", "in", "xrange", "(", "len", "(", "wallPoints", ")", ")", "]", "\n", "pointNeighbors", "=", "[", "[", "]", "for", "_", "in", "xrange", "(", "len", "(", "wallPoints", ")", ")", "]", "\n", "\n", "for", "lineIndex", ",", "line", "in", "enumerate", "(", "wallLines", ")", ":", "\n", "    ", "lineDim", "=", "calcLineDim", "(", "wallPoints", ",", "line", ")", "\n", "for", "c", ",", "pointIndex", "in", "enumerate", "(", "line", ")", ":", "\n", "      ", "if", "lineDim", "==", "0", ":", "\n", "        ", "if", "c", "==", "0", ":", "\n", "          ", "orientation", "=", "1", "\n", "", "else", ":", "\n", "          ", "orientation", "=", "3", "\n", "", "", "else", ":", "\n", "        ", "if", "c", "==", "0", ":", "\n", "          ", "orientation", "=", "2", "\n", "", "else", ":", "\n", "          ", "orientation", "=", "0", "\n", "pass", "\n", "", "pass", "\n", "\n", "", "if", "orientation", "not", "in", "pointOrientationLinesMap", "[", "pointIndex", "]", ":", "\n", "        ", "pointOrientationLinesMap", "[", "pointIndex", "]", "[", "orientation", "]", "=", "[", "]", "\n", "pass", "\n", "", "pointOrientationLinesMap", "[", "pointIndex", "]", "[", "orientation", "]", ".", "append", "(", "lineIndex", ")", "\n", "pointNeighbors", "[", "pointIndex", "]", ".", "append", "(", "line", "[", "1", "-", "c", "]", ")", "\n", "continue", "\n", "", "continue", "\n", "\n", "", "return", "wallPoints", ",", "wallLines", ",", "pointOrientationLinesMap", ",", "pointNeighbors", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.writePoints": [[1206, 1219], ["points_file.close", "point_label_file.close", "open", "open", "points_file.write", "points_file.write", "points_file.write", "points_file.write", "point_label_file.write", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "function", ["None"], ["", "def", "writePoints", "(", "points", ",", "pointLabels", ")", ":", "\n", "  ", "with", "open", "(", "'test/points_out.txt'", ",", "'w'", ")", "as", "points_file", ":", "\n", "    ", "for", "point", "in", "points", ":", "\n", "      ", "points_file", ".", "write", "(", "str", "(", "point", "[", "0", "]", "+", "1", ")", "+", "'\\t'", "+", "str", "(", "point", "[", "1", "]", "+", "1", ")", "+", "'\\t'", ")", "\n", "points_file", ".", "write", "(", "str", "(", "point", "[", "0", "]", "+", "1", ")", "+", "'\\t'", "+", "str", "(", "point", "[", "1", "]", "+", "1", ")", "+", "'\\t'", ")", "\n", "points_file", ".", "write", "(", "'point\\t'", ")", "\n", "points_file", ".", "write", "(", "str", "(", "point", "[", "2", "]", "+", "1", ")", "+", "'\\t'", "+", "str", "(", "point", "[", "3", "]", "+", "1", ")", "+", "'\\n'", ")", "\n", "", "", "points_file", ".", "close", "(", ")", "\n", "\n", "with", "open", "(", "'test/point_labels.txt'", ",", "'w'", ")", "as", "point_label_file", ":", "\n", "    ", "for", "point", "in", "pointLabels", ":", "\n", "      ", "point_label_file", ".", "write", "(", "str", "(", "point", "[", "0", "]", ")", "+", "'\\t'", "+", "str", "(", "point", "[", "1", "]", ")", "+", "'\\t'", "+", "str", "(", "point", "[", "2", "]", ")", "+", "'\\t'", "+", "str", "(", "point", "[", "3", "]", ")", "+", "'\\n'", ")", "\n", "", "", "point_label_file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.writeDoors": [[1220, 1231], ["open", "enumerate", "doors_file.close", "doors_file.write", "doors_file.write", "doors_file.write", "doors_file.write", "str", "str", "str", "str", "str"], "function", ["None"], ["", "def", "writeDoors", "(", "points", ",", "lines", ",", "doorTypes", ")", ":", "\n", "  ", "with", "open", "(", "'test/doors_out.txt'", ",", "'w'", ")", "as", "doors_file", ":", "\n", "    ", "for", "lineIndex", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "      ", "point_1", "=", "points", "[", "line", "[", "0", "]", "]", "\n", "point_2", "=", "points", "[", "line", "[", "1", "]", "]", "\n", "\n", "doors_file", ".", "write", "(", "str", "(", "point_1", "[", "0", "]", "+", "1", ")", "+", "'\\t'", "+", "str", "(", "point_1", "[", "1", "]", "+", "1", ")", "+", "'\\t'", ")", "\n", "doors_file", ".", "write", "(", "str", "(", "point_2", "[", "0", "]", "+", "1", ")", "+", "'\\t'", "+", "str", "(", "point_2", "[", "1", "]", "+", "1", ")", "+", "'\\t'", ")", "\n", "doors_file", ".", "write", "(", "'door\\t'", ")", "\n", "doors_file", ".", "write", "(", "str", "(", "doorTypes", "[", "lineIndex", "]", "+", "1", ")", "+", "'\\t1\\n'", ")", "\n", "", "doors_file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.writeIcons": [[1232, 1252], ["open", "enumerate", "icons_file.close", "icons_file.write", "icons_file.write", "icons_file.write", "icons_file.write", "icons_file.write", "int", "int", "int", "int", "round", "round", "round", "round", "str", "str", "str", "str"], "function", ["None"], ["", "", "def", "writeIcons", "(", "points", ",", "icons", ",", "iconTypes", ")", ":", "\n", "  ", "with", "open", "(", "'test/icons_out.txt'", ",", "'w'", ")", "as", "icons_file", ":", "\n", "    ", "for", "iconIndex", ",", "icon", "in", "enumerate", "(", "icons", ")", ":", "\n", "      ", "point_1", "=", "points", "[", "icon", "[", "0", "]", "]", "\n", "point_2", "=", "points", "[", "icon", "[", "1", "]", "]", "\n", "point_3", "=", "points", "[", "icon", "[", "2", "]", "]", "\n", "point_4", "=", "points", "[", "icon", "[", "3", "]", "]", "\n", "\n", "x_1", "=", "int", "(", "round", "(", "(", "point_1", "[", "0", "]", "+", "point_3", "[", "0", "]", ")", "/", "2", ")", ")", "+", "1", "\n", "x_2", "=", "int", "(", "round", "(", "(", "point_2", "[", "0", "]", "+", "point_4", "[", "0", "]", ")", "/", "2", ")", ")", "+", "1", "\n", "y_1", "=", "int", "(", "round", "(", "(", "point_1", "[", "1", "]", "+", "point_2", "[", "1", "]", ")", "/", "2", ")", ")", "+", "1", "\n", "y_2", "=", "int", "(", "round", "(", "(", "point_3", "[", "1", "]", "+", "point_4", "[", "1", "]", ")", "/", "2", ")", ")", "+", "1", "\n", "\n", "icons_file", ".", "write", "(", "str", "(", "x_1", ")", "+", "'\\t'", "+", "str", "(", "y_1", ")", "+", "'\\t'", ")", "\n", "icons_file", ".", "write", "(", "str", "(", "x_2", ")", "+", "'\\t'", "+", "str", "(", "y_2", ")", "+", "'\\t'", ")", "\n", "icons_file", ".", "write", "(", "iconNumberNameMap", "[", "iconTypes", "[", "iconIndex", "]", "]", "+", "'\\t'", ")", "\n", "#icons_file.write(str(iconNumberStyleMap[iconTypes[iconIndex]]) + '\\t')", "\n", "icons_file", ".", "write", "(", "'1\\t'", ")", "\n", "icons_file", ".", "write", "(", "'1\\n'", ")", "\n", "", "icons_file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.adjustPoints": [[1254, 1335], ["enumerate", "xrange", "floorplan_utils.calcLineDim", "enumerate", "lineNeighbors.append", "len", "numpy.concatenate", "np.concatenate.min", "np.concatenate.max", "len", "floorplan_utils.calcLineDim", "floorplan_utils.calcLineDim", "neighbors.append", "xrange", "numpy.array", "pointGroup.append", "newLineGroup.append"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim"], ["", "", "def", "adjustPoints", "(", "points", ",", "lines", ")", ":", "\n", "  ", "lineNeighbors", "=", "[", "]", "\n", "for", "lineIndex", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "    ", "lineDim", "=", "calcLineDim", "(", "points", ",", "line", ")", "\n", "neighbors", "=", "[", "]", "\n", "for", "neighborLineIndex", ",", "neighborLine", "in", "enumerate", "(", "lines", ")", ":", "\n", "      ", "if", "neighborLineIndex", "<=", "lineIndex", ":", "\n", "        ", "continue", "\n", "", "neighborLineDim", "=", "calcLineDim", "(", "points", ",", "neighborLine", ")", "\n", "point_1", "=", "points", "[", "neighborLine", "[", "0", "]", "]", "\n", "point_2", "=", "points", "[", "neighborLine", "[", "1", "]", "]", "\n", "lineDimNeighbor", "=", "calcLineDim", "(", "points", ",", "neighborLine", ")", "\n", "\n", "if", "lineDimNeighbor", "!=", "lineDim", ":", "\n", "        ", "continue", "\n", "", "if", "neighborLine", "[", "0", "]", "!=", "line", "[", "0", "]", "and", "neighborLine", "[", "0", "]", "!=", "line", "[", "1", "]", "and", "neighborLine", "[", "1", "]", "!=", "line", "[", "0", "]", "and", "neighborLine", "[", "1", "]", "!=", "line", "[", "1", "]", ":", "\n", "        ", "continue", "\n", "", "neighbors", ".", "append", "(", "neighborLineIndex", ")", "\n", "continue", "\n", "", "lineNeighbors", ".", "append", "(", "neighbors", ")", "\n", "continue", "\n", "\n", "", "visitedLines", "=", "{", "}", "\n", "for", "lineIndex", "in", "xrange", "(", "len", "(", "lines", ")", ")", ":", "\n", "    ", "if", "lineIndex", "in", "visitedLines", ":", "\n", "      ", "continue", "\n", "", "lineGroup", "=", "[", "lineIndex", "]", "\n", "while", "True", ":", "\n", "      ", "newLineGroup", "=", "lineGroup", "\n", "hasChange", "=", "False", "\n", "for", "line", "in", "lineGroup", ":", "\n", "        ", "neighbors", "=", "lineNeighbors", "[", "line", "]", "\n", "for", "neighbor", "in", "neighbors", ":", "\n", "          ", "if", "neighbor", "not", "in", "newLineGroup", ":", "\n", "            ", "newLineGroup", ".", "append", "(", "neighbor", ")", "\n", "hasChange", "=", "True", "\n", "pass", "\n", "", "continue", "\n", "", "continue", "\n", "", "if", "not", "hasChange", ":", "\n", "        ", "break", "\n", "", "lineGroup", "=", "newLineGroup", "\n", "continue", "\n", "\n", "", "for", "line", "in", "lineGroup", ":", "\n", "      ", "visitedLines", "[", "line", "]", "=", "True", "\n", "continue", "\n", "\n", "#print([[points[pointIndex] for pointIndex in lines[lineIndex]] for lineIndex in lineGroup], calcLineDim(points, lines[lineGroup[0]]))", "\n", "\n", "", "pointGroup", "=", "[", "]", "\n", "for", "line", "in", "lineGroup", ":", "\n", "      ", "for", "index", "in", "xrange", "(", "2", ")", ":", "\n", "        ", "pointIndex", "=", "lines", "[", "line", "]", "[", "index", "]", "\n", "if", "pointIndex", "not", "in", "pointGroup", ":", "\n", "          ", "pointGroup", ".", "append", "(", "pointIndex", ")", "\n", "pass", "\n", "", "continue", "\n", "", "continue", "\n", "\n", "#lineDim = calcLineDim(points, lines[lineGroup[0]])", "\n", "", "xy", "=", "np", ".", "concatenate", "(", "[", "np", ".", "array", "(", "[", "points", "[", "pointIndex", "]", "[", ":", "2", "]", "for", "pointIndex", "in", "lines", "[", "lineIndex", "]", "]", ")", "for", "lineIndex", "in", "lineGroup", "]", ",", "axis", "=", "0", ")", "\n", "mins", "=", "xy", ".", "min", "(", "0", ")", "\n", "maxs", "=", "xy", ".", "max", "(", "0", ")", "\n", "if", "maxs", "[", "0", "]", "-", "mins", "[", "0", "]", ">", "maxs", "[", "1", "]", "-", "mins", "[", "1", "]", ":", "\n", "      ", "lineDim", "=", "0", "\n", "", "else", ":", "\n", "      ", "lineDim", "=", "1", "\n", "pass", "\n", "\n", "", "fixedValue", "=", "0", "\n", "for", "point", "in", "pointGroup", ":", "\n", "      ", "fixedValue", "+=", "points", "[", "point", "]", "[", "1", "-", "lineDim", "]", "\n", "continue", "\n", "", "fixedValue", "/=", "len", "(", "pointGroup", ")", "\n", "\n", "for", "point", "in", "pointGroup", ":", "\n", "      ", "points", "[", "point", "]", "[", "1", "-", "lineDim", "]", "=", "fixedValue", "\n", "continue", "\n", "", "continue", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.mergePoints": [[1336, 1402], ["enumerate", "enumerate", "enumerate", "enumerate", "floorplan_utils.pointDistance", "list", "tuple", "enumerate", "len", "set", "enumerate", "abs", "abs", "tuple.remove", "tuple.remove", "tuple.remove", "tuple.remove", "enumerate", "enumerate", "len", "len", "tuple", "tuple", "set", "set", "set", "set"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.pointDistance"], ["", "def", "mergePoints", "(", "points", ",", "lines", ")", ":", "\n", "  ", "validPointMask", "=", "{", "}", "\n", "for", "line", "in", "lines", ":", "\n", "    ", "validPointMask", "[", "line", "[", "0", "]", "]", "=", "True", "\n", "validPointMask", "[", "line", "[", "1", "]", "]", "=", "True", "\n", "continue", "\n", "\n", "", "orientationMap", "=", "{", "}", "\n", "for", "pointType", ",", "orientationOrientations", "in", "enumerate", "(", "POINT_ORIENTATIONS", ")", ":", "\n", "    ", "for", "orientation", ",", "orientations", "in", "enumerate", "(", "orientationOrientations", ")", ":", "\n", "      ", "orientationMap", "[", "orientations", "]", "=", "(", "pointType", ",", "orientation", ")", "\n", "continue", "\n", "", "continue", "\n", "\n", "", "for", "pointIndex_1", ",", "point_1", "in", "enumerate", "(", "points", ")", ":", "\n", "    ", "if", "pointIndex_1", "not", "in", "validPointMask", ":", "\n", "      ", "continue", "\n", "", "for", "pointIndex_2", ",", "point_2", "in", "enumerate", "(", "points", ")", ":", "\n", "      ", "if", "pointIndex_2", "<=", "pointIndex_1", ":", "\n", "        ", "continue", "\n", "", "if", "pointIndex_2", "not", "in", "validPointMask", ":", "\n", "        ", "continue", "\n", "", "if", "pointDistance", "(", "point_1", "[", ":", "2", "]", ",", "point_2", "[", ":", "2", "]", ")", "<=", "DISTANCES", "[", "'point'", "]", ":", "\n", "        ", "orientations", "=", "list", "(", "POINT_ORIENTATIONS", "[", "point_1", "[", "2", "]", "]", "[", "point_1", "[", "3", "]", "]", "+", "POINT_ORIENTATIONS", "[", "point_2", "[", "2", "]", "]", "[", "point_2", "[", "3", "]", "]", ")", "\n", "if", "len", "(", "[", "line", "for", "line", "in", "lines", "if", "pointIndex_1", "in", "line", "and", "pointIndex_2", "in", "line", "]", ")", ">", "0", ":", "\n", "          ", "if", "abs", "(", "point_1", "[", "0", "]", "-", "point_2", "[", "0", "]", ")", ">", "abs", "(", "point_1", "[", "1", "]", "-", "point_2", "[", "1", "]", ")", ":", "\n", "            ", "orientations", ".", "remove", "(", "1", ")", "\n", "orientations", ".", "remove", "(", "3", ")", "\n", "", "else", ":", "\n", "            ", "orientations", ".", "remove", "(", "0", ")", "\n", "orientations", ".", "remove", "(", "2", ")", "\n", "pass", "\n", "", "pass", "\n", "", "orientations", "=", "tuple", "(", "set", "(", "orientations", ")", ")", "\n", "if", "orientations", "not", "in", "orientationMap", ":", "\n", "          ", "for", "lineIndex", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "if", "pointIndex_1", "in", "line", "and", "pointIndex_2", "in", "line", ":", "\n", "              ", "lines", "[", "lineIndex", "]", "=", "(", "-", "1", ",", "-", "1", ")", "\n", "pass", "\n", "", "continue", "\n", "\n", "", "lineIndices_1", "=", "[", "(", "lineIndex", ",", "tuple", "(", "set", "(", "line", ")", "-", "set", "(", "(", "pointIndex_1", ",", ")", ")", ")", "[", "0", "]", ")", "for", "lineIndex", ",", "line", "in", "enumerate", "(", "lines", ")", "if", "pointIndex_1", "in", "line", "and", "pointIndex_2", "not", "in", "line", "]", "\n", "lineIndices_2", "=", "[", "(", "lineIndex", ",", "tuple", "(", "set", "(", "line", ")", "-", "set", "(", "(", "pointIndex_2", ",", ")", ")", ")", "[", "0", "]", ")", "for", "lineIndex", ",", "line", "in", "enumerate", "(", "lines", ")", "if", "pointIndex_2", "in", "line", "and", "pointIndex_1", "not", "in", "line", "]", "\n", "if", "len", "(", "lineIndices_1", ")", "==", "1", "and", "len", "(", "lineIndices_2", ")", "==", "1", ":", "\n", "            ", "lineIndex_1", ",", "index_1", "=", "lineIndices_1", "[", "0", "]", "\n", "lineIndex_2", ",", "index_2", "=", "lineIndices_2", "[", "0", "]", "\n", "lines", "[", "lineIndex_1", "]", "=", "(", "index_1", ",", "index_2", ")", "\n", "lines", "[", "lineIndex_2", "]", "=", "(", "-", "1", ",", "-", "1", ")", "\n", "pass", "\n", "", "continue", "\n", "\n", "", "pointInfo", "=", "orientationMap", "[", "orientations", "]", "\n", "newPoint", "=", "[", "(", "point_1", "[", "0", "]", "+", "point_2", "[", "0", "]", ")", "/", "2", ",", "(", "point_1", "[", "1", "]", "+", "point_2", "[", "1", "]", ")", "/", "2", ",", "pointInfo", "[", "0", "]", ",", "pointInfo", "[", "1", "]", "]", "\n", "points", "[", "pointIndex_1", "]", "=", "newPoint", "\n", "for", "lineIndex", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "          ", "if", "pointIndex_2", "==", "line", "[", "0", "]", ":", "\n", "            ", "lines", "[", "lineIndex", "]", "=", "(", "pointIndex_1", ",", "line", "[", "1", "]", ")", "\n", "pass", "\n", "", "if", "pointIndex_2", "==", "line", "[", "1", "]", ":", "\n", "            ", "lines", "[", "lineIndex", "]", "=", "(", "line", "[", "0", "]", ",", "pointIndex_1", ")", "\n", "pass", "\n", "", "continue", "\n", "", "pass", "\n", "", "continue", "\n", "", "continue", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.adjustDoorPoints": [[1403, 1414], ["enumerate", "floorplan_utils.calcLineDim", "xrange"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim"], ["", "def", "adjustDoorPoints", "(", "doorPoints", ",", "doorLines", ",", "wallPoints", ",", "wallLines", ",", "doorWallMap", ")", ":", "\n", "  ", "for", "doorLineIndex", ",", "doorLine", "in", "enumerate", "(", "doorLines", ")", ":", "\n", "    ", "lineDim", "=", "calcLineDim", "(", "doorPoints", ",", "doorLine", ")", "\n", "wallLine", "=", "wallLines", "[", "doorWallMap", "[", "doorLineIndex", "]", "]", "\n", "wallPoint_1", "=", "wallPoints", "[", "wallLine", "[", "0", "]", "]", "\n", "wallPoint_2", "=", "wallPoints", "[", "wallLine", "[", "1", "]", "]", "\n", "fixedValue", "=", "(", "wallPoint_1", "[", "1", "-", "lineDim", "]", "+", "wallPoint_2", "[", "1", "-", "lineDim", "]", ")", "/", "2", "\n", "for", "endPointIndex", "in", "xrange", "(", "2", ")", ":", "\n", "      ", "doorPoints", "[", "doorLine", "[", "endPointIndex", "]", "]", "[", "1", "-", "lineDim", "]", "=", "fixedValue", "\n", "continue", "\n", "", "continue", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.findIconsFromLines": [[1416, 1480], ["pointOrientationNeighborsMap.iteritems", "floorplan_utils.calcLineDim", "enumerate", "[].append", "int", "int", "int", "int", "icons.append"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim"], ["", "", "def", "findIconsFromLines", "(", "iconPoints", ",", "iconLines", ")", ":", "\n", "  ", "icons", "=", "[", "]", "\n", "pointOrientationNeighborsMap", "=", "{", "}", "\n", "for", "line", "in", "iconLines", ":", "\n", "    ", "lineDim", "=", "calcLineDim", "(", "iconPoints", ",", "line", ")", "\n", "for", "c", ",", "pointIndex", "in", "enumerate", "(", "line", ")", ":", "\n", "      ", "if", "lineDim", "==", "0", ":", "\n", "        ", "if", "c", "==", "0", ":", "\n", "          ", "orientation", "=", "1", "\n", "", "else", ":", "\n", "          ", "orientation", "=", "3", "\n", "", "", "else", ":", "\n", "        ", "if", "c", "==", "0", ":", "\n", "          ", "orientation", "=", "2", "\n", "", "else", ":", "\n", "          ", "orientation", "=", "0", "\n", "pass", "\n", "", "pass", "\n", "\n", "", "if", "pointIndex", "not", "in", "pointOrientationNeighborsMap", ":", "\n", "        ", "pointOrientationNeighborsMap", "[", "pointIndex", "]", "=", "{", "}", "\n", "pass", "\n", "", "if", "orientation", "not", "in", "pointOrientationNeighborsMap", "[", "pointIndex", "]", ":", "\n", "        ", "pointOrientationNeighborsMap", "[", "pointIndex", "]", "[", "orientation", "]", "=", "[", "]", "\n", "pass", "\n", "", "pointOrientationNeighborsMap", "[", "pointIndex", "]", "[", "orientation", "]", ".", "append", "(", "line", "[", "1", "-", "c", "]", ")", "\n", "continue", "\n", "", "continue", "\n", "\n", "", "for", "pointIndex", ",", "orientationNeighborMap", "in", "pointOrientationNeighborsMap", ".", "iteritems", "(", ")", ":", "\n", "    ", "if", "1", "not", "in", "orientationNeighborMap", "or", "2", "not", "in", "orientationNeighborMap", ":", "\n", "      ", "continue", "\n", "", "for", "neighborIndex_1", "in", "orientationNeighborMap", "[", "1", "]", ":", "\n", "      ", "if", "2", "not", "in", "pointOrientationNeighborsMap", "[", "neighborIndex_1", "]", ":", "\n", "        ", "continue", "\n", "", "lastCornerCandiates", "=", "pointOrientationNeighborsMap", "[", "neighborIndex_1", "]", "[", "2", "]", "\n", "for", "neighborIndex_2", "in", "orientationNeighborMap", "[", "2", "]", ":", "\n", "        ", "if", "1", "not", "in", "pointOrientationNeighborsMap", "[", "neighborIndex_2", "]", ":", "\n", "          ", "continue", "\n", "", "for", "lastCornerIndex", "in", "pointOrientationNeighborsMap", "[", "neighborIndex_2", "]", "[", "1", "]", ":", "\n", "          ", "if", "lastCornerIndex", "not", "in", "lastCornerCandiates", ":", "\n", "            ", "continue", "\n", "\n", "", "point_1", "=", "iconPoints", "[", "pointIndex", "]", "\n", "point_2", "=", "iconPoints", "[", "neighborIndex_1", "]", "\n", "point_3", "=", "iconPoints", "[", "neighborIndex_2", "]", "\n", "point_4", "=", "iconPoints", "[", "lastCornerIndex", "]", "\n", "\n", "x_1", "=", "int", "(", "(", "point_1", "[", "0", "]", "+", "point_3", "[", "0", "]", ")", "/", "2", ")", "\n", "x_2", "=", "int", "(", "(", "point_2", "[", "0", "]", "+", "point_4", "[", "0", "]", ")", "/", "2", ")", "\n", "y_1", "=", "int", "(", "(", "point_1", "[", "1", "]", "+", "point_2", "[", "1", "]", ")", "/", "2", ")", "\n", "y_2", "=", "int", "(", "(", "point_3", "[", "1", "]", "+", "point_4", "[", "1", "]", ")", "/", "2", ")", "\n", "\n", "#if x_2 <= x_1 or y_2 <= y_1:", "\n", "#continue", "\n", "if", "(", "x_2", "-", "x_1", "+", "1", ")", "*", "(", "y_2", "-", "y_1", "+", "1", ")", "<=", "LENGTH_THRESHOLDS", "[", "'icon'", "]", "*", "LENGTH_THRESHOLDS", "[", "'icon'", "]", ":", "\n", "            ", "continue", "\n", "\n", "", "icons", ".", "append", "(", "(", "pointIndex", ",", "neighborIndex_1", ",", "neighborIndex_2", ",", "lastCornerIndex", ")", ")", "\n", "continue", "\n", "", "continue", "\n", "", "continue", "\n", "", "continue", "\n", "", "return", "icons", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.findLineNeighbors": [[1482, 1561], ["enumerate", "enumerate", "floorplan_utils.calcLineDim", "enumerate", "enumerate", "enumerate", "xrange", "floorplan_utils.calcLineDim", "max", "min", "int", "int", "int", "int", "floorplan_utils.calcLineDim", "neighbors[].iteritems", "neighbors.iteritems", "len", "abs", "neighbors[].iteritems", "[].pop", "[].pop"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim"], ["", "def", "findLineNeighbors", "(", "points", ",", "lines", ",", "labelVotesMap", ",", "gap", ")", ":", "\n", "  ", "lineNeighbors", "=", "[", "[", "{", "}", ",", "{", "}", "]", "for", "lineIndex", "in", "xrange", "(", "len", "(", "lines", ")", ")", "]", "\n", "for", "lineIndex", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "    ", "lineDim", "=", "calcLineDim", "(", "points", ",", "line", ")", "\n", "for", "neighborLineIndex", ",", "neighborLine", "in", "enumerate", "(", "lines", ")", ":", "\n", "      ", "if", "neighborLineIndex", "<=", "lineIndex", ":", "\n", "        ", "continue", "\n", "", "neighborLineDim", "=", "calcLineDim", "(", "points", ",", "neighborLine", ")", "\n", "if", "lineDim", "!=", "neighborLineDim", ":", "\n", "        ", "continue", "\n", "\n", "", "minValue", "=", "max", "(", "points", "[", "line", "[", "0", "]", "]", "[", "lineDim", "]", ",", "points", "[", "neighborLine", "[", "0", "]", "]", "[", "lineDim", "]", ")", "\n", "maxValue", "=", "min", "(", "points", "[", "line", "[", "1", "]", "]", "[", "lineDim", "]", ",", "points", "[", "neighborLine", "[", "1", "]", "]", "[", "lineDim", "]", ")", "\n", "if", "maxValue", "-", "minValue", "<", "gap", ":", "\n", "        ", "continue", "\n", "", "fixedValue_1", "=", "points", "[", "line", "[", "0", "]", "]", "[", "1", "-", "lineDim", "]", "\n", "fixedValue_2", "=", "points", "[", "neighborLine", "[", "0", "]", "]", "[", "1", "-", "lineDim", "]", "\n", "\n", "minValue", "=", "int", "(", "minValue", ")", "\n", "maxValue", "=", "int", "(", "maxValue", ")", "\n", "fixedValue_1", "=", "int", "(", "fixedValue_1", ")", "\n", "fixedValue_2", "=", "int", "(", "fixedValue_2", ")", "\n", "\n", "if", "abs", "(", "fixedValue_2", "-", "fixedValue_1", ")", "<", "gap", ":", "\n", "        ", "continue", "\n", "", "if", "lineDim", "==", "0", ":", "\n", "        ", "if", "fixedValue_1", "<", "fixedValue_2", ":", "\n", "          ", "region", "=", "(", "(", "minValue", ",", "fixedValue_1", ")", ",", "(", "maxValue", ",", "fixedValue_2", ")", ")", "\n", "lineNeighbors", "[", "lineIndex", "]", "[", "1", "]", "[", "neighborLineIndex", "]", "=", "region", "\n", "lineNeighbors", "[", "neighborLineIndex", "]", "[", "0", "]", "[", "lineIndex", "]", "=", "region", "\n", "", "else", ":", "\n", "          ", "region", "=", "(", "(", "minValue", ",", "fixedValue_2", ")", ",", "(", "maxValue", ",", "fixedValue_1", ")", ")", "\n", "lineNeighbors", "[", "lineIndex", "]", "[", "0", "]", "[", "neighborLineIndex", "]", "=", "region", "\n", "lineNeighbors", "[", "neighborLineIndex", "]", "[", "1", "]", "[", "lineIndex", "]", "=", "region", "\n", "", "", "else", ":", "\n", "        ", "if", "fixedValue_1", "<", "fixedValue_2", ":", "\n", "          ", "region", "=", "(", "(", "fixedValue_1", ",", "minValue", ")", ",", "(", "fixedValue_2", ",", "maxValue", ")", ")", "\n", "lineNeighbors", "[", "lineIndex", "]", "[", "0", "]", "[", "neighborLineIndex", "]", "=", "region", "\n", "lineNeighbors", "[", "neighborLineIndex", "]", "[", "1", "]", "[", "lineIndex", "]", "=", "region", "\n", "", "else", ":", "\n", "          ", "region", "=", "(", "(", "fixedValue_2", ",", "minValue", ")", ",", "(", "fixedValue_1", ",", "maxValue", ")", ")", "\n", "lineNeighbors", "[", "lineIndex", "]", "[", "1", "]", "[", "neighborLineIndex", "]", "=", "region", "\n", "lineNeighbors", "[", "neighborLineIndex", "]", "[", "0", "]", "[", "lineIndex", "]", "=", "region", "\n", "pass", "\n", "", "pass", "\n", "", "continue", "\n", "", "continue", "\n", "\n", "# remove neighbor pairs which are separated by another line", "\n", "", "while", "True", ":", "\n", "    ", "hasChange", "=", "False", "\n", "for", "lineIndex", ",", "neighbors", "in", "enumerate", "(", "lineNeighbors", ")", ":", "\n", "      ", "lineDim", "=", "calcLineDim", "(", "points", ",", "lines", "[", "lineIndex", "]", ")", "\n", "for", "neighbor_1", ",", "region_1", "in", "neighbors", "[", "1", "]", ".", "iteritems", "(", ")", ":", "\n", "        ", "for", "neighbor_2", ",", "_", "in", "neighbors", "[", "0", "]", ".", "iteritems", "(", ")", ":", "\n", "          ", "if", "neighbor_2", "not", "in", "lineNeighbors", "[", "neighbor_1", "]", "[", "0", "]", ":", "\n", "            ", "continue", "\n", "", "region_2", "=", "lineNeighbors", "[", "neighbor_1", "]", "[", "0", "]", "[", "neighbor_2", "]", "\n", "if", "region_1", "[", "0", "]", "[", "lineDim", "]", "<", "region_2", "[", "0", "]", "[", "lineDim", "]", "+", "gap", "and", "region_1", "[", "1", "]", "[", "lineDim", "]", ">", "region_2", "[", "1", "]", "[", "lineDim", "]", "-", "gap", ":", "\n", "            ", "lineNeighbors", "[", "neighbor_1", "]", "[", "0", "]", ".", "pop", "(", "neighbor_2", ")", "\n", "lineNeighbors", "[", "neighbor_2", "]", "[", "1", "]", ".", "pop", "(", "neighbor_1", ")", "\n", "hasChange", "=", "True", "\n", "pass", "\n", "", "continue", "\n", "", "continue", "\n", "", "continue", "\n", "", "if", "not", "hasChange", ":", "\n", "      ", "break", "\n", "\n", "\n", "", "", "for", "lineIndex", ",", "directionNeighbors", "in", "enumerate", "(", "lineNeighbors", ")", ":", "\n", "    ", "for", "direction", ",", "neighbors", "in", "enumerate", "(", "directionNeighbors", ")", ":", "\n", "      ", "for", "neighbor", ",", "region", "in", "neighbors", ".", "iteritems", "(", ")", ":", "\n", "        ", "labelVotes", "=", "labelVotesMap", "[", ":", ",", "region", "[", "1", "]", "[", "1", "]", ",", "region", "[", "1", "]", "[", "0", "]", "]", "+", "labelVotesMap", "[", ":", ",", "region", "[", "0", "]", "[", "1", "]", ",", "region", "[", "0", "]", "[", "0", "]", "]", "-", "labelVotesMap", "[", ":", ",", "region", "[", "0", "]", "[", "1", "]", ",", "region", "[", "1", "]", "[", "0", "]", "]", "-", "labelVotesMap", "[", ":", ",", "region", "[", "1", "]", "[", "1", "]", ",", "region", "[", "0", "]", "[", "0", "]", "]", "\n", "neighbors", "[", "neighbor", "]", "=", "labelVotes", "\n", "continue", "\n", "", "continue", "\n", "", "continue", "\n", "", "return", "lineNeighbors", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.findRectangleLineNeighbors": [[1563, 1621], ["enumerate", "enumerate", "xrange", "floorplan_utils.calcLineDim", "max", "min", "minDistanceLineNeighbors.iteritems", "len", "len"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim"], ["", "def", "findRectangleLineNeighbors", "(", "rectanglePoints", ",", "rectangles", ",", "linePoints", ",", "lines", ",", "lineNeighbors", ",", "gap", ",", "distanceThreshold", ")", ":", "\n", "  ", "rectangleLineNeighbors", "=", "[", "{", "}", "for", "rectangleIndex", "in", "xrange", "(", "len", "(", "rectangles", ")", ")", "]", "\n", "minDistanceLineNeighbors", "=", "{", "}", "\n", "for", "rectangleIndex", ",", "rectangle", "in", "enumerate", "(", "rectangles", ")", ":", "\n", "    ", "for", "lineIndex", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "      ", "lineDim", "=", "calcLineDim", "(", "linePoints", ",", "line", ")", "\n", "\n", "minValue", "=", "max", "(", "rectanglePoints", "[", "rectangle", "[", "0", "]", "]", "[", "lineDim", "]", ",", "rectanglePoints", "[", "rectangle", "[", "2", "-", "lineDim", "]", "]", "[", "lineDim", "]", ",", "linePoints", "[", "line", "[", "0", "]", "]", "[", "lineDim", "]", ")", "\n", "maxValue", "=", "min", "(", "rectanglePoints", "[", "rectangle", "[", "1", "+", "lineDim", "]", "]", "[", "lineDim", "]", ",", "rectanglePoints", "[", "rectangle", "[", "3", "]", "]", "[", "lineDim", "]", ",", "linePoints", "[", "line", "[", "1", "]", "]", "[", "lineDim", "]", ")", "\n", "\n", "if", "maxValue", "-", "minValue", "<", "gap", ":", "\n", "        ", "continue", "\n", "\n", "", "rectangleFixedValue_1", "=", "(", "rectanglePoints", "[", "rectangle", "[", "0", "]", "]", "[", "1", "-", "lineDim", "]", "+", "rectanglePoints", "[", "rectangle", "[", "1", "+", "lineDim", "]", "]", "[", "1", "-", "lineDim", "]", ")", "/", "2", "\n", "rectangleFixedValue_2", "=", "(", "rectanglePoints", "[", "rectangle", "[", "2", "-", "lineDim", "]", "]", "[", "1", "-", "lineDim", "]", "+", "rectanglePoints", "[", "rectangle", "[", "3", "]", "]", "[", "1", "-", "lineDim", "]", ")", "/", "2", "\n", "lineFixedValue", "=", "(", "linePoints", "[", "line", "[", "0", "]", "]", "[", "1", "-", "lineDim", "]", "+", "linePoints", "[", "line", "[", "1", "]", "]", "[", "1", "-", "lineDim", "]", ")", "/", "2", "\n", "\n", "if", "lineFixedValue", "<", "rectangleFixedValue_2", "-", "gap", "and", "lineFixedValue", ">", "rectangleFixedValue_1", "+", "gap", ":", "\n", "        ", "continue", "\n", "\n", "", "if", "lineFixedValue", "<=", "rectangleFixedValue_1", "+", "gap", ":", "\n", "        ", "index", "=", "lineDim", "*", "2", "+", "0", "\n", "distance", "=", "rectangleFixedValue_1", "-", "lineFixedValue", "\n", "if", "index", "not", "in", "minDistanceLineNeighbors", "or", "distance", "<", "minDistanceLineNeighbors", "[", "index", "]", "[", "1", "]", ":", "\n", "          ", "minDistanceLineNeighbors", "[", "index", "]", "=", "(", "lineIndex", ",", "distance", ",", "1", "-", "lineDim", ")", "\n", "", "", "else", ":", "\n", "        ", "index", "=", "lineDim", "*", "2", "+", "1", "\n", "distance", "=", "lineFixedValue", "-", "rectangleFixedValue_2", "\n", "if", "index", "not", "in", "minDistanceLineNeighbors", "or", "distance", "<", "minDistanceLineNeighbors", "[", "index", "]", "[", "1", "]", ":", "\n", "          ", "minDistanceLineNeighbors", "[", "index", "]", "=", "(", "lineIndex", ",", "distance", ",", "lineDim", ")", "\n", "\n", "", "", "if", "lineFixedValue", "<", "rectangleFixedValue_1", "-", "distanceThreshold", "or", "lineFixedValue", ">", "rectangleFixedValue_2", "+", "distanceThreshold", ":", "\n", "        ", "continue", "\n", "\n", "", "if", "lineFixedValue", "<=", "rectangleFixedValue_1", "+", "gap", ":", "\n", "        ", "if", "lineDim", "==", "0", ":", "\n", "          ", "rectangleLineNeighbors", "[", "rectangleIndex", "]", "[", "lineIndex", "]", "=", "1", "\n", "", "else", ":", "\n", "          ", "rectangleLineNeighbors", "[", "rectangleIndex", "]", "[", "lineIndex", "]", "=", "0", "\n", "pass", "\n", "", "pass", "\n", "", "else", ":", "\n", "        ", "if", "lineDim", "==", "0", ":", "\n", "          ", "rectangleLineNeighbors", "[", "rectangleIndex", "]", "[", "lineIndex", "]", "=", "0", "\n", "", "else", ":", "\n", "          ", "rectangleLineNeighbors", "[", "rectangleIndex", "]", "[", "lineIndex", "]", "=", "1", "\n", "pass", "\n", "", "pass", "\n", "\n", "", "continue", "\n", "", "if", "len", "(", "rectangleLineNeighbors", "[", "rectangleIndex", "]", ")", "==", "0", "or", "True", ":", "\n", "      ", "for", "index", ",", "lineNeighbor", "in", "minDistanceLineNeighbors", ".", "iteritems", "(", ")", ":", "\n", "        ", "rectangleLineNeighbors", "[", "rectangleIndex", "]", "[", "lineNeighbor", "[", "0", "]", "]", "=", "lineNeighbor", "[", "2", "]", "\n", "continue", "\n", "", "pass", "\n", "", "continue", "\n", "\n", "", "return", "rectangleLineNeighbors", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.findLineMap": [[1623, 1651], ["enumerate", "floorplan_utils.calcLineDim", "enumerate", "xrange", "floorplan_utils.calcLineDim", "max", "min", "len", "abs", "float"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim"], ["", "def", "findLineMap", "(", "points", ",", "lines", ",", "points_2", ",", "lines_2", ",", "gap", ")", ":", "\n", "  ", "lineMap", "=", "[", "{", "}", "for", "lineIndex", "in", "xrange", "(", "len", "(", "lines", ")", ")", "]", "\n", "for", "lineIndex", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "    ", "lineDim", "=", "calcLineDim", "(", "points", ",", "line", ")", "\n", "for", "neighborLineIndex", ",", "neighborLine", "in", "enumerate", "(", "lines_2", ")", ":", "\n", "      ", "neighborLineDim", "=", "calcLineDim", "(", "points_2", ",", "neighborLine", ")", "\n", "if", "lineDim", "!=", "neighborLineDim", ":", "\n", "        ", "continue", "\n", "\n", "", "minValue", "=", "max", "(", "points", "[", "line", "[", "0", "]", "]", "[", "lineDim", "]", ",", "points_2", "[", "neighborLine", "[", "0", "]", "]", "[", "lineDim", "]", ")", "\n", "maxValue", "=", "min", "(", "points", "[", "line", "[", "1", "]", "]", "[", "lineDim", "]", ",", "points_2", "[", "neighborLine", "[", "1", "]", "]", "[", "lineDim", "]", ")", "\n", "if", "maxValue", "-", "minValue", "<", "gap", ":", "\n", "        ", "continue", "\n", "", "fixedValue_1", "=", "(", "points", "[", "line", "[", "0", "]", "]", "[", "1", "-", "lineDim", "]", "+", "points", "[", "line", "[", "1", "]", "]", "[", "1", "-", "lineDim", "]", ")", "/", "2", "\n", "fixedValue_2", "=", "(", "points_2", "[", "neighborLine", "[", "0", "]", "]", "[", "1", "-", "lineDim", "]", "+", "points_2", "[", "neighborLine", "[", "1", "]", "]", "[", "1", "-", "lineDim", "]", ")", "/", "2", "\n", "\n", "if", "abs", "(", "fixedValue_2", "-", "fixedValue_1", ")", ">", "gap", ":", "\n", "        ", "continue", "\n", "\n", "", "lineMinValue", "=", "points", "[", "line", "[", "0", "]", "]", "[", "lineDim", "]", "\n", "lineMaxValue", "=", "points", "[", "line", "[", "1", "]", "]", "[", "lineDim", "]", "\n", "ratio", "=", "float", "(", "maxValue", "-", "minValue", "+", "1", ")", "/", "(", "lineMaxValue", "-", "lineMinValue", "+", "1", ")", "\n", "\n", "lineMap", "[", "lineIndex", "]", "[", "neighborLineIndex", "]", "=", "ratio", "\n", "continue", "\n", "", "continue", "\n", "\n", "", "return", "lineMap", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.findLineMapSingle": [[1653, 1685], ["enumerate", "floorplan_utils.calcLineDim", "max", "enumerate", "lineMap.append", "floorplan_utils.calcLineDim", "max", "min", "abs"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim"], ["", "def", "findLineMapSingle", "(", "points", ",", "lines", ",", "points_2", ",", "lines_2", ",", "gap", ")", ":", "\n", "  ", "lineMap", "=", "[", "]", "\n", "for", "lineIndex", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "    ", "lineDim", "=", "calcLineDim", "(", "points", ",", "line", ")", "\n", "minDistance", "=", "max", "(", "width", ",", "height", ")", "\n", "minDistanceLineIndex", "=", "-", "1", "\n", "for", "neighborLineIndex", ",", "neighborLine", "in", "enumerate", "(", "lines_2", ")", ":", "\n", "      ", "neighborLineDim", "=", "calcLineDim", "(", "points_2", ",", "neighborLine", ")", "\n", "if", "lineDim", "!=", "neighborLineDim", ":", "\n", "        ", "continue", "\n", "\n", "", "minValue", "=", "max", "(", "points", "[", "line", "[", "0", "]", "]", "[", "lineDim", "]", ",", "points_2", "[", "neighborLine", "[", "0", "]", "]", "[", "lineDim", "]", ")", "\n", "maxValue", "=", "min", "(", "points", "[", "line", "[", "1", "]", "]", "[", "lineDim", "]", ",", "points_2", "[", "neighborLine", "[", "1", "]", "]", "[", "lineDim", "]", ")", "\n", "if", "maxValue", "-", "minValue", "<", "gap", ":", "\n", "        ", "continue", "\n", "", "fixedValue_1", "=", "(", "points", "[", "line", "[", "0", "]", "]", "[", "1", "-", "lineDim", "]", "+", "points", "[", "line", "[", "1", "]", "]", "[", "1", "-", "lineDim", "]", ")", "/", "2", "\n", "fixedValue_2", "=", "(", "points_2", "[", "neighborLine", "[", "0", "]", "]", "[", "1", "-", "lineDim", "]", "+", "points_2", "[", "neighborLine", "[", "1", "]", "]", "[", "1", "-", "lineDim", "]", ")", "/", "2", "\n", "\n", "distance", "=", "abs", "(", "fixedValue_2", "-", "fixedValue_1", ")", "\n", "if", "distance", "<", "minDistance", ":", "\n", "        ", "minDistance", "=", "distance", "\n", "minDistanceLineIndex", "=", "neighborLineIndex", "\n", "pass", "\n", "", "continue", "\n", "\n", "#if abs(fixedValue_2 - fixedValue_1) > gap:", "\n", "#continue", "\n", "#print((lineIndex, minDistance, minDistanceLineIndex))", "\n", "", "lineMap", ".", "append", "(", "minDistanceLineIndex", ")", "\n", "continue", "\n", "\n", "", "return", "lineMap", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.findConflictLinePairs": [[1687, 1759], ["enumerate", "floorplan_utils.calcLineDim", "int", "int", "int", "enumerate", "round", "min", "max", "floorplan_utils.calcLineDim", "int", "int", "int", "round", "min", "max", "conflictLinePairs.append", "conflictLinePairs.append", "conflictLinePairs.append", "min", "conflictLinePairs.append", "abs", "floorplan_utils.pointDistance", "floorplan_utils.pointDistance", "floorplan_utils.pointDistance", "floorplan_utils.pointDistance"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.pointDistance", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.pointDistance", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.pointDistance", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.pointDistance"], ["", "def", "findConflictLinePairs", "(", "points", ",", "lines", ",", "gap", ",", "distanceThreshold", ",", "considerEndPoints", "=", "False", ")", ":", "\n", "  ", "conflictLinePairs", "=", "[", "]", "\n", "for", "lineIndex_1", ",", "line_1", "in", "enumerate", "(", "lines", ")", ":", "\n", "    ", "lineDim_1", "=", "calcLineDim", "(", "points", ",", "line_1", ")", "\n", "point_1", "=", "points", "[", "line_1", "[", "0", "]", "]", "\n", "point_2", "=", "points", "[", "line_1", "[", "1", "]", "]", "\n", "fixedValue_1", "=", "int", "(", "round", "(", "(", "point_1", "[", "1", "-", "lineDim_1", "]", "+", "point_2", "[", "1", "-", "lineDim_1", "]", ")", "/", "2", ")", ")", "\n", "minValue_1", "=", "int", "(", "min", "(", "point_1", "[", "lineDim_1", "]", ",", "point_2", "[", "lineDim_1", "]", ")", ")", "\n", "maxValue_1", "=", "int", "(", "max", "(", "point_1", "[", "lineDim_1", "]", ",", "point_2", "[", "lineDim_1", "]", ")", ")", "\n", "\n", "for", "lineIndex_2", ",", "line_2", "in", "enumerate", "(", "lines", ")", ":", "\n", "      ", "if", "lineIndex_2", "<=", "lineIndex_1", ":", "\n", "        ", "continue", "\n", "\n", "", "lineDim_2", "=", "calcLineDim", "(", "points", ",", "line_2", ")", "\n", "point_1", "=", "points", "[", "line_2", "[", "0", "]", "]", "\n", "point_2", "=", "points", "[", "line_2", "[", "1", "]", "]", "\n", "\n", "if", "lineDim_2", "==", "lineDim_1", ":", "\n", "        ", "if", "line_1", "[", "0", "]", "==", "line_2", "[", "0", "]", "or", "line_1", "[", "1", "]", "==", "line_2", "[", "1", "]", ":", "\n", "          ", "conflictLinePairs", ".", "append", "(", "(", "lineIndex_1", ",", "lineIndex_2", ")", ")", "\n", "continue", "\n", "", "elif", "line_1", "[", "0", "]", "==", "line_2", "[", "1", "]", "or", "line_1", "[", "1", "]", "==", "line_2", "[", "0", "]", ":", "\n", "          ", "continue", "\n", "", "pass", "\n", "", "else", ":", "\n", "        ", "if", "(", "line_1", "[", "0", "]", "in", "line_2", "or", "line_1", "[", "1", "]", "in", "line_2", ")", ":", "\n", "          ", "continue", "\n", "", "pass", "\n", "\n", "", "if", "considerEndPoints", ":", "\n", "        ", "if", "min", "(", "[", "pointDistance", "(", "points", "[", "line_1", "[", "0", "]", "]", ",", "points", "[", "line_2", "[", "0", "]", "]", ")", ",", "pointDistance", "(", "points", "[", "line_1", "[", "0", "]", "]", ",", "points", "[", "line_2", "[", "1", "]", "]", ")", ",", "pointDistance", "(", "points", "[", "line_1", "[", "1", "]", "]", ",", "points", "[", "line_2", "[", "0", "]", "]", ")", ",", "pointDistance", "(", "points", "[", "line_1", "[", "1", "]", "]", ",", "points", "[", "line_2", "[", "1", "]", "]", ")", "]", ")", "<=", "gap", ":", "\n", "          ", "conflictLinePairs", ".", "append", "(", "(", "lineIndex_1", ",", "lineIndex_2", ")", ")", "\n", "continue", "\n", "", "pass", "\n", "\n", "", "fixedValue_2", "=", "int", "(", "round", "(", "(", "point_1", "[", "1", "-", "lineDim_2", "]", "+", "point_2", "[", "1", "-", "lineDim_2", "]", ")", "/", "2", ")", ")", "\n", "minValue_2", "=", "int", "(", "min", "(", "point_1", "[", "lineDim_2", "]", ",", "point_2", "[", "lineDim_2", "]", ")", ")", "\n", "maxValue_2", "=", "int", "(", "max", "(", "point_1", "[", "lineDim_2", "]", ",", "point_2", "[", "lineDim_2", "]", ")", ")", "\n", "\n", "# if lineIndex_1 == 3 and lineIndex_2 == 4:", "\n", "#   print(line_1)", "\n", "#   print(line_2)", "\n", "#   print(points[line_1[0]])", "\n", "#   print(points[line_1[1]])", "\n", "#   print(point_1)", "\n", "#   print(point_2)", "\n", "#   print((fixedValue_2, fixedValue_1, minValue_1, maxValue_2))", "\n", "#   exit(1)", "\n", "\n", "if", "lineDim_1", "==", "lineDim_2", ":", "\n", "        ", "if", "abs", "(", "fixedValue_2", "-", "fixedValue_1", ")", ">=", "distanceThreshold", "or", "minValue_1", ">", "maxValue_2", "-", "gap", "or", "minValue_2", ">", "maxValue_1", "-", "gap", ":", "\n", "          ", "continue", "\n", "\n", "#print('parallel', lineIndex_1, lineIndex_2)", "\n", "#print([points[pointIndex] for pointIndex in lines[lineIndex_1]], [points[pointIndex] for pointIndex in lines[lineIndex_2]])", "\n", "\n", "", "conflictLinePairs", ".", "append", "(", "(", "lineIndex_1", ",", "lineIndex_2", ")", ")", "\n", "#drawLines('test/lines_' + str(lineIndex_1) + \"_\" + str(lineIndex_2) + '.png', width, height, points, [line_1, line_2])", "\n", "", "else", ":", "\n", "        ", "if", "minValue_1", ">", "fixedValue_2", "-", "gap", "or", "maxValue_1", "<", "fixedValue_2", "+", "gap", "or", "minValue_2", ">", "fixedValue_1", "-", "gap", "or", "maxValue_2", "<", "fixedValue_1", "+", "gap", ":", "\n", "          ", "continue", "\n", "\n", "#print('vertical', lineIndex_1, lineIndex_2)", "\n", "#print([points[pointIndex] for pointIndex in lines[lineIndex_1]], [points[pointIndex] for pointIndex in lines[lineIndex_2]])", "\n", "\n", "", "conflictLinePairs", ".", "append", "(", "(", "lineIndex_1", ",", "lineIndex_2", ")", ")", "\n", "pass", "\n", "", "continue", "\n", "", "continue", "\n", "\n", "", "return", "conflictLinePairs", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.findConflictRectanglePairs": [[1761, 1792], ["enumerate", "enumerate", "xrange", "max", "min", "max", "min", "conflictRectanglePairs.append", "conflictRectanglePairs.append"], "function", ["None"], ["", "def", "findConflictRectanglePairs", "(", "points", ",", "rectangles", ",", "gap", ")", ":", "\n", "  ", "conflictRectanglePairs", "=", "[", "]", "\n", "for", "rectangleIndex_1", ",", "rectangle_1", "in", "enumerate", "(", "rectangles", ")", ":", "\n", "    ", "for", "rectangleIndex_2", ",", "rectangle_2", "in", "enumerate", "(", "rectangles", ")", ":", "\n", "      ", "if", "rectangleIndex_2", "<=", "rectangleIndex_1", ":", "\n", "        ", "continue", "\n", "\n", "", "conflict", "=", "False", "\n", "for", "cornerIndex", "in", "xrange", "(", "4", ")", ":", "\n", "        ", "if", "rectangle_1", "[", "cornerIndex", "]", "==", "rectangle_2", "[", "cornerIndex", "]", ":", "\n", "          ", "conflictRectanglePairs", ".", "append", "(", "(", "rectangleIndex_1", ",", "rectangleIndex_2", ")", ")", "\n", "conflict", "=", "True", "\n", "break", "\n", "", "continue", "\n", "\n", "", "if", "conflict", ":", "\n", "        ", "continue", "\n", "\n", "", "minX", "=", "max", "(", "(", "points", "[", "rectangle_1", "[", "0", "]", "]", "[", "0", "]", "+", "points", "[", "rectangle_1", "[", "2", "]", "]", "[", "0", "]", ")", "/", "2", ",", "(", "points", "[", "rectangle_2", "[", "0", "]", "]", "[", "0", "]", "+", "points", "[", "rectangle_2", "[", "2", "]", "]", "[", "0", "]", ")", "/", "2", ")", "\n", "maxX", "=", "min", "(", "(", "points", "[", "rectangle_1", "[", "1", "]", "]", "[", "0", "]", "+", "points", "[", "rectangle_1", "[", "3", "]", "]", "[", "0", "]", ")", "/", "2", ",", "(", "points", "[", "rectangle_2", "[", "1", "]", "]", "[", "0", "]", "+", "points", "[", "rectangle_2", "[", "3", "]", "]", "[", "0", "]", ")", "/", "2", ")", "\n", "if", "minX", ">", "maxX", "-", "gap", ":", "\n", "        ", "continue", "\n", "", "minY", "=", "max", "(", "(", "points", "[", "rectangle_1", "[", "0", "]", "]", "[", "1", "]", "+", "points", "[", "rectangle_1", "[", "1", "]", "]", "[", "1", "]", ")", "/", "2", ",", "(", "points", "[", "rectangle_2", "[", "0", "]", "]", "[", "1", "]", "+", "points", "[", "rectangle_2", "[", "1", "]", "]", "[", "1", "]", ")", "/", "2", ")", "\n", "maxY", "=", "min", "(", "(", "points", "[", "rectangle_1", "[", "2", "]", "]", "[", "1", "]", "+", "points", "[", "rectangle_1", "[", "3", "]", "]", "[", "1", "]", ")", "/", "2", ",", "(", "points", "[", "rectangle_2", "[", "2", "]", "]", "[", "1", "]", "+", "points", "[", "rectangle_2", "[", "3", "]", "]", "[", "1", "]", ")", "/", "2", ")", "\n", "if", "minY", ">", "maxY", "-", "gap", ":", "\n", "        ", "continue", "\n", "", "conflictRectanglePairs", ".", "append", "(", "(", "rectangleIndex_1", ",", "rectangleIndex_2", ")", ")", "\n", "continue", "\n", "", "continue", "\n", "\n", "", "return", "conflictRectanglePairs", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.findConflictRectangleLinePairs": [[1794, 1830], ["enumerate", "enumerate", "floorplan_utils.calcLineDim", "conflictRectangleLinePairs.append", "max", "min", "min", "max", "max", "min", "max", "min", "min", "max", "max", "min"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim"], ["", "def", "findConflictRectangleLinePairs", "(", "rectanglePoints", ",", "rectangles", ",", "linePoints", ",", "lines", ",", "gap", ")", ":", "\n", "  ", "conflictRectangleLinePairs", "=", "[", "]", "\n", "for", "rectangleIndex", ",", "rectangle", "in", "enumerate", "(", "rectangles", ")", ":", "\n", "    ", "for", "lineIndex", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "# for c in xrange(4):", "\n", "#   print(rectanglePoints[rectangle[c]])", "\n", "#   continue", "\n", "# for c in xrange(2):", "\n", "#   print(linePoints[line[c]])", "\n", "#   continue", "\n", "      ", "lineDim", "=", "calcLineDim", "(", "linePoints", ",", "line", ")", "\n", "if", "lineDim", "==", "0", ":", "\n", "        ", "minX", "=", "max", "(", "rectanglePoints", "[", "rectangle", "[", "0", "]", "]", "[", "0", "]", ",", "rectanglePoints", "[", "rectangle", "[", "2", "]", "]", "[", "0", "]", ",", "linePoints", "[", "line", "[", "0", "]", "]", "[", "0", "]", ")", "\n", "maxX", "=", "min", "(", "rectanglePoints", "[", "rectangle", "[", "1", "]", "]", "[", "0", "]", ",", "rectanglePoints", "[", "rectangle", "[", "3", "]", "]", "[", "0", "]", ",", "linePoints", "[", "line", "[", "1", "]", "]", "[", "0", "]", ")", "\n", "if", "minX", ">", "maxX", "-", "gap", ":", "\n", "          ", "continue", "\n", "", "if", "max", "(", "rectanglePoints", "[", "rectangle", "[", "0", "]", "]", "[", "1", "]", ",", "rectanglePoints", "[", "rectangle", "[", "1", "]", "]", "[", "1", "]", ")", "+", "gap", ">", "min", "(", "linePoints", "[", "line", "[", "0", "]", "]", "[", "1", "]", ",", "linePoints", "[", "line", "[", "1", "]", "]", "[", "1", "]", ")", ":", "\n", "          ", "continue", "\n", "", "if", "min", "(", "rectanglePoints", "[", "rectangle", "[", "2", "]", "]", "[", "1", "]", ",", "rectanglePoints", "[", "rectangle", "[", "3", "]", "]", "[", "1", "]", ")", "-", "gap", "<", "max", "(", "linePoints", "[", "line", "[", "0", "]", "]", "[", "1", "]", ",", "linePoints", "[", "line", "[", "1", "]", "]", "[", "1", "]", ")", ":", "\n", "          ", "continue", "\n", "\n", "", "", "elif", "lineDim", "==", "1", ":", "\n", "        ", "minY", "=", "max", "(", "rectanglePoints", "[", "rectangle", "[", "0", "]", "]", "[", "1", "]", ",", "rectanglePoints", "[", "rectangle", "[", "1", "]", "]", "[", "1", "]", ",", "linePoints", "[", "line", "[", "0", "]", "]", "[", "1", "]", ")", "\n", "maxY", "=", "min", "(", "rectanglePoints", "[", "rectangle", "[", "2", "]", "]", "[", "1", "]", ",", "rectanglePoints", "[", "rectangle", "[", "3", "]", "]", "[", "1", "]", ",", "linePoints", "[", "line", "[", "1", "]", "]", "[", "1", "]", ")", "\n", "if", "minY", ">", "maxY", "-", "gap", ":", "\n", "          ", "continue", "\n", "", "if", "max", "(", "rectanglePoints", "[", "rectangle", "[", "0", "]", "]", "[", "0", "]", ",", "rectanglePoints", "[", "rectangle", "[", "2", "]", "]", "[", "0", "]", ")", "+", "gap", ">", "min", "(", "linePoints", "[", "line", "[", "0", "]", "]", "[", "0", "]", ",", "linePoints", "[", "line", "[", "1", "]", "]", "[", "0", "]", ")", ":", "\n", "          ", "continue", "\n", "", "if", "min", "(", "rectanglePoints", "[", "rectangle", "[", "1", "]", "]", "[", "0", "]", ",", "rectanglePoints", "[", "rectangle", "[", "3", "]", "]", "[", "0", "]", ")", "-", "gap", "<", "max", "(", "linePoints", "[", "line", "[", "0", "]", "]", "[", "0", "]", ",", "linePoints", "[", "line", "[", "1", "]", "]", "[", "0", "]", ")", ":", "\n", "          ", "continue", "\n", "\n", "", "", "conflictRectangleLinePairs", ".", "append", "(", "(", "rectangleIndex", ",", "lineIndex", ")", ")", "\n", "continue", "\n", "", "continue", "\n", "\n", "", "return", "conflictRectangleLinePairs", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.findLinePointMap": [[1831, 1847], ["enumerate", "floorplan_utils.calcLineDim", "enumerate", "xrange", "lineMap[].append", "len", "abs"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim"], ["", "def", "findLinePointMap", "(", "points", ",", "lines", ",", "points_2", ",", "gap", ")", ":", "\n", "  ", "lineMap", "=", "[", "[", "]", "for", "lineIndex", "in", "xrange", "(", "len", "(", "lines", ")", ")", "]", "\n", "for", "lineIndex", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "    ", "lineDim", "=", "calcLineDim", "(", "points", ",", "line", ")", "\n", "fixedValue", "=", "(", "points", "[", "line", "[", "0", "]", "]", "[", "1", "-", "lineDim", "]", "+", "points", "[", "line", "[", "1", "]", "]", "[", "1", "-", "lineDim", "]", ")", "/", "2", "\n", "for", "neighborPointIndex", ",", "neighborPoint", "in", "enumerate", "(", "points_2", ")", ":", "\n", "      ", "if", "neighborPoint", "[", "lineDim", "]", "<", "points", "[", "line", "[", "0", "]", "]", "[", "lineDim", "]", "+", "gap", "or", "neighborPoint", "[", "lineDim", "]", ">", "points", "[", "line", "[", "1", "]", "]", "[", "lineDim", "]", "-", "gap", ":", "\n", "        ", "continue", "\n", "\n", "", "if", "abs", "(", "(", "neighborPoint", "[", "1", "-", "lineDim", "]", "+", "neighborPoint", "[", "1", "-", "lineDim", "]", ")", "/", "2", "-", "fixedValue", ")", ">", "gap", ":", "\n", "        ", "continue", "\n", "\n", "", "lineMap", "[", "lineIndex", "]", ".", "append", "(", "neighborPointIndex", ")", "\n", "continue", "\n", "", "continue", "\n", "", "return", "lineMap", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.scalePoints": [[1848, 1854], ["None"], "function", ["None"], ["", "def", "scalePoints", "(", "points", ",", "sampleDim", ")", ":", "\n", "  ", "for", "point", "in", "points", ":", "\n", "    ", "point", "[", "0", "]", "*=", "width", "/", "sampleDim", "\n", "point", "[", "1", "]", "*=", "height", "/", "sampleDim", "\n", "continue", "\n", "", "return", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.findCandidatesFromHeatmaps": [[1855, 1963], ["xrange", "numpy.ones", "cv2.dilate", "skimage.measure.label", "xrange", "cv2.erode", "regionMask.nonzero", "cv2.dilate.astype", "measure.label.min", "measure.label.max", "xs.min", "xs.max", "ys.min", "ys.max", "mask.sum", "xrange", "xrange", "mask.sum", "xrange", "xrange", "newIcons.append", "newDoorLines.append", "newDoorLines.append", "mask.sum", "xrange", "xrange", "mask.sum", "xrange", "xrange", "newDoorLines.append", "newDoorLines.append"], "function", ["None"], ["", "def", "findCandidatesFromHeatmaps", "(", "iconHeatmaps", ",", "iconPointOffset", ",", "doorPointOffset", ")", ":", "\n", "  ", "newIcons", "=", "[", "]", "\n", "newIconPoints", "=", "[", "]", "\n", "newDoorLines", "=", "[", "]", "\n", "newDoorPoints", "=", "[", "]", "\n", "for", "iconIndex", "in", "xrange", "(", "1", ",", "13", ")", ":", "\n", "    ", "heatmap", "=", "iconHeatmaps", "[", ":", ",", ":", ",", "iconIndex", "]", ">", "0.5", "\n", "kernel", "=", "np", ".", "ones", "(", "(", "3", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "heatmap", "=", "cv2", ".", "dilate", "(", "cv2", ".", "erode", "(", "heatmap", ".", "astype", "(", "np", ".", "uint8", ")", ",", "kernel", ")", ",", "kernel", ")", "\n", "regions", "=", "measure", ".", "label", "(", "heatmap", ",", "background", "=", "0", ")", "\n", "for", "regionIndex", "in", "xrange", "(", "regions", ".", "min", "(", ")", "+", "1", ",", "regions", ".", "max", "(", ")", "+", "1", ")", ":", "\n", "      ", "regionMask", "=", "regions", "==", "regionIndex", "\n", "ys", ",", "xs", "=", "regionMask", ".", "nonzero", "(", ")", "\n", "minX", ",", "maxX", "=", "xs", ".", "min", "(", ")", ",", "xs", ".", "max", "(", ")", "\n", "minY", ",", "maxY", "=", "ys", ".", "min", "(", ")", ",", "ys", ".", "max", "(", ")", "\n", "if", "iconIndex", "<=", "10", ":", "\n", "        ", "if", "maxX", "-", "minX", "<", "GAPS", "[", "'icon_extraction'", "]", "or", "maxY", "-", "minY", "<", "GAPS", "[", "'icon_extraction'", "]", ":", "\n", "          ", "continue", "\n", "", "mask", "=", "regionMask", "[", "minY", ":", "maxY", "+", "1", ",", "minX", ":", "maxX", "+", "1", "]", "\n", "sizeX", ",", "sizeY", "=", "maxX", "-", "minX", "+", "1", ",", "maxY", "-", "minY", "+", "1", "\n", "sumX", "=", "mask", ".", "sum", "(", "0", ")", "\n", "\n", "for", "x", "in", "xrange", "(", "sizeX", ")", ":", "\n", "          ", "if", "sumX", "[", "x", "]", "*", "2", ">=", "sizeY", ":", "\n", "            ", "break", "\n", "", "minX", "+=", "1", "\n", "continue", "\n", "\n", "", "for", "x", "in", "xrange", "(", "sizeX", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "          ", "if", "sumX", "[", "x", "]", "*", "2", ">=", "sizeY", ":", "\n", "            ", "break", "\n", "", "maxX", "-=", "1", "\n", "continue", "\n", "\n", "\n", "", "sumY", "=", "mask", ".", "sum", "(", "1", ")", "\n", "for", "y", "in", "xrange", "(", "sizeY", ")", ":", "\n", "          ", "if", "sumY", "[", "y", "]", "*", "2", ">=", "sizeX", ":", "\n", "            ", "break", "\n", "", "minY", "+=", "1", "\n", "continue", "\n", "\n", "", "for", "y", "in", "xrange", "(", "sizeY", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "          ", "if", "sumY", "[", "y", "]", "*", "2", ">=", "sizeX", ":", "\n", "            ", "break", "\n", "", "maxY", "-=", "1", "\n", "continue", "\n", "", "if", "(", "maxY", "-", "minY", "+", "1", ")", "*", "(", "maxX", "-", "minX", "+", "1", ")", "<=", "LENGTH_THRESHOLDS", "[", "'icon'", "]", "*", "LENGTH_THRESHOLDS", "[", "'icon'", "]", "*", "2", ":", "\n", "          ", "continue", "\n", "", "newIconPoints", "+=", "[", "[", "minX", ",", "minY", ",", "1", ",", "2", "]", ",", "[", "maxX", ",", "minY", ",", "1", ",", "3", "]", ",", "[", "minX", ",", "maxY", ",", "1", ",", "1", "]", ",", "[", "maxX", ",", "maxY", ",", "1", ",", "0", "]", "]", "\n", "newIcons", ".", "append", "(", "(", "iconPointOffset", ",", "iconPointOffset", "+", "1", ",", "iconPointOffset", "+", "2", ",", "iconPointOffset", "+", "3", ")", ")", "\n", "iconPointOffset", "+=", "4", "\n", "", "else", ":", "\n", "        ", "sizeX", ",", "sizeY", "=", "maxX", "-", "minX", "+", "1", ",", "maxY", "-", "minY", "+", "1", "\n", "if", "sizeX", ">=", "LENGTH_THRESHOLDS", "[", "'door'", "]", "and", "sizeY", "*", "2", "<=", "sizeX", ":", "\n", "          ", "newDoorPoints", "+=", "[", "[", "minX", ",", "(", "minY", "+", "maxY", ")", "/", "2", ",", "0", ",", "1", "]", ",", "[", "maxX", ",", "(", "minY", "+", "maxY", ")", "/", "2", ",", "0", ",", "3", "]", "]", "\n", "newDoorLines", ".", "append", "(", "(", "doorPointOffset", ",", "doorPointOffset", "+", "1", ")", ")", "\n", "doorPointOffset", "+=", "2", "\n", "", "elif", "sizeY", ">=", "LENGTH_THRESHOLDS", "[", "'door'", "]", "and", "sizeX", "*", "2", "<=", "sizeY", ":", "\n", "          ", "newDoorPoints", "+=", "[", "[", "(", "minX", "+", "maxX", ")", "/", "2", ",", "minY", ",", "0", ",", "2", "]", ",", "[", "(", "minX", "+", "maxX", ")", "/", "2", ",", "maxY", ",", "0", ",", "0", "]", "]", "\n", "newDoorLines", ".", "append", "(", "(", "doorPointOffset", ",", "doorPointOffset", "+", "1", ")", ")", "\n", "doorPointOffset", "+=", "2", "\n", "", "elif", "sizeX", ">=", "LENGTH_THRESHOLDS", "[", "'door'", "]", "and", "sizeY", ">=", "LENGTH_THRESHOLDS", "[", "'door'", "]", ":", "\n", "          ", "mask", "=", "regionMask", "[", "minY", ":", "maxY", "+", "1", ",", "minX", ":", "maxX", "+", "1", "]", "\n", "sumX", "=", "mask", ".", "sum", "(", "0", ")", "\n", "minOffset", ",", "maxOffset", "=", "0", ",", "0", "\n", "for", "x", "in", "xrange", "(", "sizeX", ")", ":", "\n", "            ", "if", "sumX", "[", "x", "]", "*", "2", ">=", "sizeY", ":", "\n", "              ", "break", "\n", "", "minOffset", "+=", "1", "\n", "continue", "\n", "\n", "", "for", "x", "in", "xrange", "(", "sizeX", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "            ", "if", "sumX", "[", "x", "]", "*", "2", ">=", "sizeY", ":", "\n", "              ", "break", "\n", "", "maxOffset", "+=", "1", "\n", "continue", "\n", "\n", "", "if", "(", "sizeX", "-", "minOffset", "-", "maxOffset", ")", "*", "2", "<=", "sizeY", "and", "sizeX", "-", "minOffset", "-", "maxOffset", ">", "0", ":", "\n", "            ", "newDoorPoints", "+=", "[", "[", "(", "minX", "+", "minOffset", "+", "maxX", "-", "maxOffset", ")", "/", "2", ",", "minY", ",", "0", ",", "2", "]", ",", "[", "(", "minX", "+", "minOffset", "+", "maxX", "-", "maxOffset", ")", "/", "2", ",", "maxY", ",", "0", ",", "0", "]", "]", "\n", "newDoorLines", ".", "append", "(", "(", "doorPointOffset", ",", "doorPointOffset", "+", "1", ")", ")", "\n", "doorPointOffset", "+=", "2", "\n", "pass", "\n", "\n", "", "sumY", "=", "mask", ".", "sum", "(", "1", ")", "\n", "minOffset", ",", "maxOffset", "=", "0", ",", "0", "\n", "for", "y", "in", "xrange", "(", "sizeY", ")", ":", "\n", "            ", "if", "sumY", "[", "y", "]", "*", "2", ">=", "sizeX", ":", "\n", "              ", "break", "\n", "", "minOffset", "+=", "1", "\n", "continue", "\n", "\n", "", "for", "y", "in", "xrange", "(", "sizeY", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "            ", "if", "sumY", "[", "y", "]", "*", "2", ">=", "sizeX", ":", "\n", "              ", "break", "\n", "", "maxOffset", "+=", "1", "\n", "continue", "\n", "\n", "", "if", "(", "sizeY", "-", "minOffset", "-", "maxOffset", ")", "*", "2", "<=", "sizeX", "and", "sizeY", "-", "minOffset", "-", "maxOffset", ">", "0", ":", "\n", "            ", "newDoorPoints", "+=", "[", "[", "minX", ",", "(", "minY", "+", "minOffset", "+", "maxY", "-", "maxOffset", ")", "/", "2", ",", "0", ",", "1", "]", ",", "[", "maxX", ",", "(", "minY", "+", "minOffset", "+", "maxY", "-", "maxOffset", ")", "/", "2", ",", "0", ",", "3", "]", "]", "\n", "newDoorLines", ".", "append", "(", "(", "doorPointOffset", ",", "doorPointOffset", "+", "1", ")", ")", "\n", "doorPointOffset", "+=", "2", "\n", "pass", "\n", "", "pass", "\n", "", "pass", "\n", "", "continue", "\n", "", "continue", "\n", "", "return", "newIcons", ",", "newIconPoints", ",", "newDoorLines", ",", "newDoorPoints", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.sortLines": [[1964, 1971], ["enumerate", "floorplan_utils.calcLineDim"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim"], ["", "def", "sortLines", "(", "points", ",", "lines", ")", ":", "\n", "  ", "for", "lineIndex", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "    ", "lineDim", "=", "calcLineDim", "(", "points", ",", "line", ")", "\n", "if", "points", "[", "line", "[", "0", "]", "]", "[", "lineDim", "]", ">", "points", "[", "line", "[", "1", "]", "]", "[", "lineDim", "]", ":", "\n", "      ", "lines", "[", "lineIndex", "]", "=", "(", "line", "[", "1", "]", ",", "line", "[", "0", "]", ")", "\n", "pass", "\n", "", "continue", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.reconstructFloorplan": [[1972, 3064], ["print", "QP.extractCorners", "QP.extractCorners", "QP.extractCorners", "floorplan_utils.sortLines", "floorplan_utils.sortLines", "print", "print", "floorplan_utils.drawLineMask", "print", "numpy.zeros", "xrange", "numpy.cumsum", "QP.findIconsFromLines", "QP.findLineMap", "enumerate", "QP.findConflictLinePairs", "QP.findConflictLinePairs", "QP.findConflictRectanglePairs", "QP.findLineNeighbors", "QP.findRectangleLineNeighbors", "QP.findConflictRectangleLinePairs", "enumerate", "enumerate", "QP.filterWalls", "len", "len", "len", "len", "len", "len", "floorplan_utils.drawPoints", "floorplan_utils.drawPointsSeparately", "floorplan_utils.drawLines", "floorplan_utils.drawPoints", "floorplan_utils.drawPointsSeparately", "floorplan_utils.drawLines", "QP.findMatches", "numpy.cumsum", "QP.findCandidatesFromHeatmaps", "floorplan_utils.drawLines", "floorplan_utils.drawLines", "floorplan_utils.drawRectangles", "print", "print", "print", "print", "os.system", "enumerate", "exit", "print", "exit", "enumerate", "floorplan_utils.drawLines", "enumerate", "floorplan_utils.drawLines", "exit", "Model", "xrange", "xrange", "QuadExpr", "xrange", "xrange", "xrange", "LinExpr", "xrange", "Model.addConstr", "enumerate", "enumerate", "enumerate", "pointIconsMap.iteritems", "enumerate", "enumerate", "xrange", "enumerate", "enumerate", "QP.findLinePointMap", "enumerate", "Model.setObjective", "Model.setParam", "Model.optimize", "Model.write", "print", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "len", "len", "os.path.join", "os.path.join", "os.path.join", "len", "newDoorLines.append", "newDoorWallLineMap.append", "floorplan_utils.drawLines", "print", "print", "print", "print", "os.path.join", "os.path.join", "Model.addVar", "Model.addVar", "Model.addVar", "Model.addVar", "len", "i_types.append", "len", "xrange", "l_dir_labels.append", "xrange", "enumerate", "pointIconMap.iteritems", "len", "xrange", "xrange", "enumerate", "len", "Model.addConstr", "enumerate", "xrange", "xrange", "LinExpr", "Model.addConstr", "enumerate", "enumerate", "enumerate", "numpy.array", "numpy.array", "floorplan_utils.calcLineDim", "int", "numpy.maximum().astype", "numpy.minimum().astype", "int", "int", "int", "int", "xrange", "len", "LinExpr", "xrange", "Model.addConstr", "LinExpr", "orientationLinesMap.iteritems", "Model.addConstr", "Model.addConstr", "Model.addConstr", "Model.addConstr", "LinExpr", "Model.addConstr", "LinExpr", "Model.setParam", "Model.optimize", "enumerate", "floorplan_utils.drawLines", "enumerate", "QP.findLineMapSingle", "QP.adjustDoorPoints", "floorplan_utils.drawLines", "enumerate", "floorplan_utils.drawRectangles", "enumerate", "enumerate", "QP.writePoints", "print", "print", "str", "str", "str", "os.path.join", "len", "len", "print", "filteredWallLines.append", "print", "filteredWallLines.append", "xrange", "xrange", "xrange", "xrange", "xrange", "dir_labels.append", "len", "Model.addConstr", "LinExpr", "Model.addConstr", "LinExpr", "xrange", "Model.addConstr", "len", "orientationLinesMap.iteritems", "numpy.zeros", "neighbors.iteritems", "np.zeros.sum", "xrange", "pointDoorsMap[].append", "pointIconsMap[].append", "floorplan_utils.calcLineDim", "int", "xrange", "numpy.array", "numpy.array", "floorplan_utils.calcLineDim", "int", "numpy.maximum().astype", "numpy.minimum().astype", "wallConfidences.append", "print", "round", "min", "max", "print", "print", "print", "exit", "iconHeatmaps[].sum", "LinExpr", "Model.addConstr", "len", "Model.addConstr", "len", "Model.addConstr", "filteredWallLines.append", "filteredWallTypes.append", "xrange", "filteredWallLabels.append", "print", "floorplan_utils.calcLineDim", "QP.adjustPoints", "QP.mergePoints", "QP.adjustPoints", "print", "filteredDoorLines.append", "filteredDoorTypes.append", "filteredIcons.append", "xrange", "print", "filteredIconTypes.append", "enumerate", "wallPointOrientationLinesMap[].iteritems", "filteredWallPoints.append", "filteredWallPointLabels.append", "open", "result_file.write", "result_file.write", "enumerate", "enumerate", "enumerate", "result_file.close", "len", "QP.writeDoors", "len", "QP.writeIcons", "print", "print", "numpy.array().astype().tolist", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "Model.addVar", "labels.append", "pointIconMap[].append", "Model.addConstr", "int", "LinExpr", "xrange", "round", "int", "round", "min", "max", "numpy.maximum", "numpy.minimum", "numpy.sum", "xrange", "xrange", "[].keys", "[].keys", "len", "len", "len", "print", "print", "tuple", "print", "exit", "result_file.write", "result_file.write", "result_file.write", "result_file.write", "result_file.write", "result_file.write", "result_file.write", "int", "int", "int", "int", "result_file.write", "result_file.write", "result_file.write", "result_file.write", "result_file.write", "os.remove", "os.remove", "str", "str", "str", "str", "str", "xrange", "Model.addVar", "str", "Model.addConstr", "int", "LinExpr", "Model.addConstr", "int", "min", "min", "roomHeatmaps[].sum", "min", "min", "roomHeatmaps[].sum", "numpy.maximum", "numpy.minimum", "numpy.sum", "numpy.array().astype().tolist", "str", "len", "numpy.array().astype().tolist", "xrange", "len", "str", "numpy.array().astype", "str", "round", "min", "max", "max", "max", "max", "len", "tuple.append", "str", "len", "str", "str", "str", "abs", "numpy.array().astype", "str", "numpy.array().astype", "str", "str", "str", "str", "str", "str", "str", "str", "numpy.array", "str", "str", "str", "str", "str", "str", "str", "str", "str", "numpy.array", "int", "int", "numpy.array", "str", "min", "min", "int", "int", "round", "round", "max", "max", "int", "int", "int", "int", "round", "round", "str", "round", "round", "round", "round"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.extractCorners", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.extractCorners", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.extractCorners", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.sortLines", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.sortLines", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawLineMask", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.findIconsFromLines", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.findLineMap", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.findConflictLinePairs", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.findConflictLinePairs", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.findConflictRectanglePairs", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.findLineNeighbors", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.findRectangleLineNeighbors", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.findConflictRectangleLinePairs", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.filterWalls", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawPoints", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawPointsSeparately", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawLines", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawPoints", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawPointsSeparately", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawLines", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.findMatches", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.findCandidatesFromHeatmaps", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawLines", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawLines", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawRectangles", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawLines", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawLines", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.findLinePointMap", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawLines", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawLines", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.findLineMapSingle", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.adjustDoorPoints", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawLines", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawRectangles", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.writePoints", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.adjustPoints", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.mergePoints", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.adjustPoints", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.writeDoors", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.writeIcons"], ["", "", "def", "reconstructFloorplan", "(", "wallCornerHeatmaps", ",", "doorCornerHeatmaps", ",", "iconCornerHeatmaps", ",", "iconHeatmaps", ",", "roomHeatmaps", ",", "densityImage", "=", "None", ",", "gt_dict", "=", "None", ",", "gt", "=", "False", ",", "gap", "=", "-", "1", ",", "distanceThreshold", "=", "-", "1", ",", "lengthThreshold", "=", "-", "1", ",", "debug_prefix", "=", "'test'", ",", "heatmapValueThresholdWall", "=", "None", ",", "heatmapValueThresholdDoor", "=", "None", ",", "heatmapValueThresholdIcon", "=", "None", ")", ":", "\n", "  ", "print", "(", "'reconstruct'", ")", "\n", "\n", "wallPoints", "=", "[", "]", "\n", "iconPoints", "=", "[", "]", "\n", "doorPoints", "=", "[", "]", "\n", "if", "withoutQP", ":", "\n", "    ", "numWallPoints", "=", "30", "\n", "numDoorPoints", "=", "30", "\n", "numIconPoints", "=", "30", "\n", "heatmapValueThresholdWall", "=", "0.5", "\n", "heatmapValueThresholdDoor", "=", "0.5", "\n", "heatmapValueThresholdIcon", "=", "0.5", "\n", "", "else", ":", "\n", "    ", "numWallPoints", "=", "100", "\n", "numDoorPoints", "=", "100", "\n", "numIconPoints", "=", "100", "\n", "if", "heatmapValueThresholdWall", "is", "None", ":", "\n", "      ", "heatmapValueThresholdWall", "=", "0.5", "\n", "\n", "", "heatmapValueThresholdDoor", "=", "0.5", "\n", "\n", "heatmapValueThresholdIcon", "=", "0.5", "\n", "pass", "\n", "\n", "", "if", "gap", ">", "0", ":", "\n", "    ", "for", "k", "in", "GAPS", ":", "\n", "      ", "GAPS", "[", "k", "]", "=", "gap", "\n", "continue", "\n", "", "pass", "\n", "", "if", "distanceThreshold", ">", "0", ":", "\n", "    ", "for", "k", "in", "DISTANCES", ":", "\n", "      ", "DISTANCES", "[", "k", "]", "=", "distanceThreshold", "\n", "continue", "\n", "", "pass", "\n", "", "if", "lengthThreshold", ">", "0", ":", "\n", "    ", "for", "k", "in", "LENGTH_THRESHOLDS", ":", "\n", "      ", "LENGTH_THRESHOLDS", "[", "k", "]", "=", "lengthThreshold", "\n", "continue", "\n", "", "pass", "\n", "", "enable_augment", "=", "not", "gt", "\n", "enable_augment", "=", "False", "\n", "wallPoints", ",", "wallLines", ",", "wallPointOrientationLinesMap", ",", "wallPointNeighbors", ",", "augmentedPointMask", "=", "extractCorners", "(", "wallCornerHeatmaps", ",", "heatmapValueThresholdWall", ",", "gap", "=", "GAPS", "[", "'wall_extraction'", "]", ",", "augment", "=", "enable_augment", ",", "h_points", "=", "enable_augment", ",", "gt", "=", "gt", ")", "\n", "doorPoints", ",", "doorLines", ",", "doorPointOrientationLinesMap", ",", "doorPointNeighbors", ",", "_", "=", "extractCorners", "(", "doorCornerHeatmaps", ",", "heatmapValueThresholdDoor", ",", "gap", "=", "GAPS", "[", "'door_extraction'", "]", ",", "cornerType", "=", "'door'", ",", "gt", "=", "gt", ")", "\n", "iconPoints", ",", "iconLines", ",", "iconPointOrientationLinesMap", ",", "iconPointNeighbors", ",", "_", "=", "extractCorners", "(", "iconCornerHeatmaps", ",", "heatmapValueThresholdIcon", ",", "gap", "=", "GAPS", "[", "'icon_extraction'", "]", ",", "cornerType", "=", "'icon'", ",", "gt", "=", "gt", ")", "\n", "\n", "if", "not", "gt", ":", "\n", "#print([[wallPoints[pointIndex] for pointIndex in wallLines[wallIndex]] for wallIndex in xrange(len(wallLines))])", "\n", "    ", "for", "pointIndex", ",", "point", "in", "enumerate", "(", "wallPoints", ")", ":", "\n", "      ", "print", "(", "(", "pointIndex", ",", "np", ".", "array", "(", "point", "[", ":", "2", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", ".", "tolist", "(", ")", ",", "point", "[", "2", "]", ",", "point", "[", "3", "]", ")", ")", "\n", "continue", "\n", "# print(wallPoints[19])", "\n", "# print(wallPointNeighbors[19])", "\n", "# print(wallPointOrientationLinesMap[19])", "\n", "\n", "", "wallPoints", ",", "wallLines", ",", "wallPointOrientationLinesMap", ",", "wallPointNeighbors", "=", "filterWalls", "(", "wallPoints", ",", "wallLines", ")", "\n", "#wallPoints, wallLines, wallPointOrientationLinesMap, wallPointNeighbors = filterWallsDynamic(wallPoints, wallLines)", "\n", "#print('after filtering')", "\n", "#print([[wallPoints[pointIndex] for pointIndex in wallLines[wallIndex]] for wallIndex in xrange(len(wallLines))])", "\n", "\n", "# for pointIndex, point in enumerate(wallPoints):", "\n", "#   print((pointIndex, np.array(point[:2]).astype(np.int32).tolist(), point[2], point[3]))", "\n", "#   continue", "\n", "# print(wallPoints[15])", "\n", "# print(wallPointNeighbors[15])", "\n", "# print(wallPointOrientationLinesMap[15])", "\n", "# exit(1)", "\n", "pass", "\n", "\n", "\n", "", "sortLines", "(", "doorPoints", ",", "doorLines", ")", "\n", "sortLines", "(", "wallPoints", ",", "wallLines", ")", "\n", "\n", "print", "(", "'the number of points'", ",", "len", "(", "wallPoints", ")", ",", "len", "(", "doorPoints", ")", ",", "len", "(", "iconPoints", ")", ")", "\n", "print", "(", "'the number of lines'", ",", "len", "(", "wallLines", ")", ",", "len", "(", "doorLines", ")", ",", "len", "(", "iconLines", ")", ")", "\n", "\n", "#print(wallPointNeighbors[26])", "\n", "#print(wallPointOrientationLinesMap[26])", "\n", "#exit(1)", "\n", "\n", "if", "True", ":", "\n", "#densityImg = cv2.imread('test/predict_density.png', 0)", "\n", "    ", "drawPoints", "(", "os", ".", "path", ".", "join", "(", "debug_prefix", ",", "\"points.png\"", ")", ",", "width", ",", "height", ",", "wallPoints", ",", "densityImage", ",", "pointSize", "=", "3", ")", "\n", "drawPointsSeparately", "(", "os", ".", "path", ".", "join", "(", "debug_prefix", ",", "'points'", ")", ",", "width", ",", "height", ",", "wallPoints", ",", "densityImage", ",", "pointSize", "=", "3", ")", "\n", "drawLines", "(", "os", ".", "path", ".", "join", "(", "debug_prefix", ",", "'lines.png'", ")", ",", "width", ",", "height", ",", "wallPoints", ",", "wallLines", ",", "[", "]", ",", "None", ",", "1", ",", "lineColor", "=", "255", ")", "\n", "", "else", ":", "\n", "    ", "drawPoints", "(", "os", ".", "path", ".", "join", "(", "debug_prefix", ",", "'points.png'", ")", ",", "width", ",", "height", ",", "wallPoints", ")", "\n", "drawPointsSeparately", "(", "os", ".", "path", ".", "join", "(", "debug_prefix", ",", "'points'", ")", ",", "wallPoints", ")", "\n", "drawLines", "(", "os", ".", "path", ".", "join", "(", "debug_prefix", ",", "'lines.png'", ")", ",", "width", ",", "height", ",", "wallPoints", ",", "wallLines", ",", "[", "]", ",", "None", ",", "2", ",", "lineColor", "=", "255", ")", "\n", "pass", "\n", "\n", "", "if", "gt_dict", "!=", "None", "and", "False", ":", "\n", "    ", "findMatches", "(", "{", "'wall'", ":", "[", "wallPoints", ",", "wallLines", ",", "[", "]", "]", "}", ",", "gt_dict", ",", "distanceThreshold", "=", "DISTANCES", "[", "'wall'", "]", ")", "\n", "pass", "\n", "\n", "", "wallMask", "=", "drawLineMask", "(", "width", ",", "height", ",", "wallPoints", ",", "wallLines", ")", "\n", "print", "(", "'gt'", ",", "gt", ")", "\n", "\n", "labelVotesMap", "=", "np", ".", "zeros", "(", "(", "NUM_FINAL_ROOMS", ",", "height", ",", "width", ")", ")", "\n", "#labelMap = np.zeros((NUM_LABELS, height, width))", "\n", "#semanticHeatmaps = np.concatenate([iconHeatmaps, roomHeatmaps], axis=2)", "\n", "for", "segmentIndex", "in", "xrange", "(", "NUM_FINAL_ROOMS", ")", ":", "\n", "    ", "segmentation_img", "=", "roomHeatmaps", "[", ":", ",", ":", ",", "segmentIndex", "]", "\n", "#segmentation_img = (segmentation_img > 0.5).astype(np.float)", "\n", "labelVotesMap", "[", "segmentIndex", "]", "=", "segmentation_img", "\n", "#labelMap[segmentIndex] = segmentation_img", "\n", "continue", "\n", "\n", "", "labelVotesMap", "=", "np", ".", "cumsum", "(", "np", ".", "cumsum", "(", "labelVotesMap", ",", "axis", "=", "1", ")", ",", "axis", "=", "2", ")", "\n", "\n", "#doorLines, doorPointOrientationLinesMap, doorPointNeighbors = calcPointInfo(doorPoints, gap, True)", "\n", "#icons = findIcons(iconPoints, GAP, False)", "\n", "icons", "=", "findIconsFromLines", "(", "iconPoints", ",", "iconLines", ")", "\n", "\n", "if", "not", "gt", ":", "\n", "    ", "newIcons", ",", "newIconPoints", ",", "newDoorLines", ",", "newDoorPoints", "=", "findCandidatesFromHeatmaps", "(", "iconHeatmaps", ",", "len", "(", "iconPoints", ")", ",", "len", "(", "doorPoints", ")", ")", "\n", "\n", "icons", "+=", "newIcons", "\n", "iconPoints", "+=", "newIconPoints", "\n", "doorLines", "+=", "newDoorLines", "\n", "doorPoints", "+=", "newDoorPoints", "\n", "pass", "\n", "\n", "# print([(doorPoints[line[0]][:2], doorPoints[line[1]][:2]) for line in newDoorLines])", "\n", "# print([(iconPoints[icon[0]][:2], iconPoints[icon[1]][:2], iconPoints[icon[2]][:2], iconPoints[icon[3]][:2]) for icon in newIcons])", "\n", "# print('num icons', len(icons), len(newIcons))", "\n", "# if len(newIcons) > 10:", "\n", "#   exit(1)", "\n", "#   pass", "\n", "\n", "\n", "#print([(doorPoints[line[0]][:2], doorPoints[line[1]][:2]) for line in newDoorLines])", "\n", "#print([(iconPoints[icon[0]][:2], iconPoints[icon[1]][:2], iconPoints[icon[2]][:2], iconPoints[icon[3]][:2]) for icon in newIcons])", "\n", "#print([(iconPoints[icon[0]][:2], iconPoints[icon[1]][:2], iconPoints[icon[2]][:2], iconPoints[icon[3]][:2]) for icon in icons[:10]])", "\n", "#exit(1)", "\n", "\n", "\n", "#icons = [icons[0]]", "\n", "#iconLines, iconPointOrientationLinesMap, iconPointNeighbors = calcPointInfo(iconPoints, gap, True)", "\n", "\n", "", "if", "True", ":", "\n", "    ", "drawLines", "(", "os", ".", "path", ".", "join", "(", "debug_prefix", ",", "'lines.png'", ")", ",", "width", ",", "height", ",", "wallPoints", ",", "wallLines", ",", "[", "]", ",", "None", ",", "2", ",", "lineColor", "=", "255", ")", "\n", "drawLines", "(", "os", ".", "path", ".", "join", "(", "debug_prefix", ",", "'doors.png'", ")", ",", "width", ",", "height", ",", "doorPoints", ",", "doorLines", ",", "[", "]", ",", "None", ",", "2", ",", "lineColor", "=", "255", ")", "\n", "drawRectangles", "(", "os", ".", "path", ".", "join", "(", "debug_prefix", ",", "'icons.png'", ")", ",", "width", ",", "height", ",", "iconPoints", ",", "icons", ",", "{", "}", ",", "2", ")", "\n", "print", "(", "'number of walls: '", "+", "str", "(", "len", "(", "wallLines", ")", ")", ")", "\n", "print", "(", "'number of doors: '", "+", "str", "(", "len", "(", "doorLines", ")", ")", ")", "\n", "print", "(", "'number of icons: '", "+", "str", "(", "len", "(", "icons", ")", ")", ")", "\n", "pass", "\n", "\n", "\n", "", "doorWallLineMap", "=", "findLineMap", "(", "doorPoints", ",", "doorLines", ",", "wallPoints", ",", "wallLines", ",", "gap", "=", "GAPS", "[", "'wall_door_neighbor'", "]", ")", "\n", "\n", "newDoorLines", "=", "[", "]", "\n", "newDoorWallLineMap", "=", "[", "]", "\n", "for", "lineIndex", ",", "walls", "in", "enumerate", "(", "doorWallLineMap", ")", ":", "\n", "    ", "if", "len", "(", "walls", ")", ">", "0", ":", "\n", "      ", "newDoorLines", ".", "append", "(", "doorLines", "[", "lineIndex", "]", ")", "\n", "newDoorWallLineMap", ".", "append", "(", "walls", ")", "\n", "pass", "\n", "", "continue", "\n", "", "doorLines", "=", "newDoorLines", "\n", "doorWallLineMap", "=", "newDoorWallLineMap", "\n", "\n", "\n", "#print(len(wallLines))", "\n", "conflictWallLinePairs", "=", "findConflictLinePairs", "(", "wallPoints", ",", "wallLines", ",", "gap", "=", "GAPS", "[", "'wall_conflict'", "]", ",", "distanceThreshold", "=", "DISTANCES", "[", "'wall'", "]", ",", "considerEndPoints", "=", "True", ")", "\n", "#print(len(wallLines))", "\n", "\n", "# print([(pointIndex, wallPoints[pointIndex]) for pointIndex in xrange(len(wallPoints))])", "\n", "# print(wallPointNeighbors[15])", "\n", "# print([(lineIndex, wallLine) for lineIndex, wallLine in enumerate(wallLines)])", "\n", "\n", "\n", "conflictDoorLinePairs", "=", "findConflictLinePairs", "(", "doorPoints", ",", "doorLines", ",", "gap", "=", "GAPS", "[", "'door_conflict'", "]", ",", "distanceThreshold", "=", "DISTANCES", "[", "'door'", "]", ")", "\n", "conflictIconPairs", "=", "findConflictRectanglePairs", "(", "iconPoints", ",", "icons", ",", "gap", "=", "GAPS", "[", "'icon_conflict'", "]", ")", "\n", "#print(conflictIconPairs)", "\n", "#print([[[np.array(iconPoints[pointIndex][:2]).astype(np.int32).tolist() for pointIndex in icons[iconIndex]] for iconIndex in iconPair] for iconPair in conflictIconPairs])", "\n", "#print([(iconIndex, [np.array(iconPoints[pointIndex][:2]).astype(np.int32).tolist() for pointIndex in icons[iconIndex]]) for iconIndex in xrange(len(icons))])", "\n", "#exit(1)", "\n", "\n", "\n", "\n", "if", "False", ":", "\n", "# for lineIndex, line in enumerate(doorLines):", "\n", "#   drawLines('test/doors/line_' + str(lineIndex) + '.png', width, height, doorPoints, [line])", "\n", "#   continue", "\n", "\n", "    ", "print", "(", "wallLines", ")", "\n", "\n", "os", ".", "system", "(", "'mkdir '", "+", "debug_prefix", "+", "'/lines'", ")", "\n", "for", "lineIndex", ",", "line", "in", "enumerate", "(", "wallLines", ")", ":", "\n", "      ", "drawLines", "(", "os", ".", "path", ".", "join", "(", "debug_prefix", ",", "'lines/line_'", "+", "str", "(", "lineIndex", ")", "+", "'.png'", ")", ",", "width", ",", "height", ",", "wallPoints", ",", "[", "line", "]", ",", "[", "]", ",", "lineColor", "=", "255", ")", "\n", "continue", "\n", "", "exit", "(", "1", ")", "\n", "pass", "\n", "\n", "\n", "", "wallLineNeighbors", "=", "findLineNeighbors", "(", "wallPoints", ",", "wallLines", ",", "labelVotesMap", ",", "gap", "=", "GAPS", "[", "'wall_neighbor'", "]", ")", "\n", "\n", "iconWallLineNeighbors", "=", "findRectangleLineNeighbors", "(", "iconPoints", ",", "icons", ",", "wallPoints", ",", "wallLines", ",", "wallLineNeighbors", ",", "gap", "=", "GAPS", "[", "'wall_icon_neighbor'", "]", ",", "distanceThreshold", "=", "DISTANCES", "[", "'wall_icon'", "]", ")", "\n", "conflictIconWallPairs", "=", "findConflictRectangleLinePairs", "(", "iconPoints", ",", "icons", ",", "wallPoints", ",", "wallLines", ",", "gap", "=", "GAPS", "[", "'wall_icon_conflict'", "]", ")", "\n", "\n", "\n", "# print(wallLineNeighbors[18])", "\n", "# print(wallLineNeighbors[35])", "\n", "# print([pair for pair in conflictWallLinePairs if 35 in pair])", "\n", "# exit(1)", "\n", "\n", "if", "False", ":", "\n", "    ", "print", "(", "conflictWallLinePairs", ")", "\n", "#for wallIndex in [0, 1, 29, 48, 34, 59, 37, 61]:", "\n", "for", "wallIndex", "in", "[", "0", ",", "17", "]", ":", "\n", "      ", "print", "(", "wallLines", "[", "wallIndex", "]", ")", "\n", "print", "(", "[", "wallPoints", "[", "pointIndex", "]", "for", "pointIndex", "in", "wallLines", "[", "wallIndex", "]", "]", ")", "\n", "print", "(", "wallPointOrientationLinesMap", "[", "wallLines", "[", "wallIndex", "]", "[", "0", "]", "]", ")", "\n", "print", "(", "wallPointOrientationLinesMap", "[", "wallLines", "[", "wallIndex", "]", "[", "1", "]", "]", ")", "\n", "continue", "\n", "", "exit", "(", "1", ")", "\n", "pass", "\n", "\n", "\n", "", "exteriorLines", "=", "{", "}", "\n", "for", "lineIndex", ",", "neighbors", "in", "enumerate", "(", "wallLineNeighbors", ")", ":", "\n", "    ", "if", "len", "(", "neighbors", "[", "0", "]", ")", "==", "0", "and", "len", "(", "neighbors", "[", "1", "]", ")", ">", "0", ":", "\n", "      ", "exteriorLines", "[", "lineIndex", "]", "=", "0", "\n", "", "elif", "len", "(", "neighbors", "[", "0", "]", ")", ">", "0", "and", "len", "(", "neighbors", "[", "1", "]", ")", "==", "0", ":", "\n", "      ", "exteriorLines", "[", "lineIndex", "]", "=", "1", "\n", "pass", "\n", "", "continue", "\n", "\n", "#print(exteriorLines)", "\n", "#exit(1)", "\n", "\n", "", "if", "False", ":", "\n", "# for i in xrange(2):", "\n", "#   print(wallLineNeighbors[43][i].keys())", "\n", "#   print(wallLineNeighbors[81][i].keys())", "\n", "#   print(wallLineNeighbors[84][i].keys())", "\n", "# exit(1)", "\n", "    ", "filteredWallLines", "=", "[", "]", "\n", "for", "lineIndex", ",", "neighbors", "in", "enumerate", "(", "wallLineNeighbors", ")", ":", "\n", "      ", "if", "len", "(", "neighbors", "[", "0", "]", ")", "==", "0", "and", "len", "(", "neighbors", "[", "1", "]", ")", ">", "0", ":", "\n", "        ", "print", "(", "lineIndex", ")", "\n", "filteredWallLines", ".", "append", "(", "wallLines", "[", "lineIndex", "]", ")", "\n", "pass", "\n", "", "continue", "\n", "", "drawLines", "(", "os", ".", "path", ".", "join", "(", "debug_prefix", ",", "'exterior_1.png'", ")", ",", "width", ",", "height", ",", "wallPoints", ",", "filteredWallLines", ",", "lineColor", "=", "255", ")", "\n", "\n", "filteredWallLines", "=", "[", "]", "\n", "for", "lineIndex", ",", "neighbors", "in", "enumerate", "(", "wallLineNeighbors", ")", ":", "\n", "      ", "if", "len", "(", "neighbors", "[", "0", "]", ")", ">", "0", "and", "len", "(", "neighbors", "[", "1", "]", ")", "==", "0", ":", "\n", "        ", "print", "(", "lineIndex", ")", "\n", "filteredWallLines", ".", "append", "(", "wallLines", "[", "lineIndex", "]", ")", "\n", "pass", "\n", "", "continue", "\n", "", "drawLines", "(", "os", ".", "path", ".", "join", "(", "debug_prefix", ",", "'exterior_2.png'", ")", ",", "width", ",", "height", ",", "wallPoints", ",", "filteredWallLines", ",", "lineColor", "=", "255", ")", "\n", "exit", "(", "1", ")", "\n", "pass", "\n", "\n", "\n", "\n", "", "try", ":", "\n", "#if True:", "\n", "    ", "model", "=", "Model", "(", "\"JunctionFilter\"", ")", "\n", "\n", "#add variables", "\n", "w_p", "=", "[", "model", ".", "addVar", "(", "vtype", "=", "GRB", ".", "BINARY", ",", "name", "=", "\"point_\"", "+", "str", "(", "pointIndex", ")", ")", "for", "pointIndex", "in", "xrange", "(", "len", "(", "wallPoints", ")", ")", "]", "\n", "w_l", "=", "[", "model", ".", "addVar", "(", "vtype", "=", "GRB", ".", "BINARY", ",", "name", "=", "\"line_\"", "+", "str", "(", "lineIndex", ")", ")", "for", "lineIndex", "in", "xrange", "(", "len", "(", "wallLines", ")", ")", "]", "\n", "\n", "d_l", "=", "[", "model", ".", "addVar", "(", "vtype", "=", "GRB", ".", "BINARY", ",", "name", "=", "\"door_line_\"", "+", "str", "(", "lineIndex", ")", ")", "for", "lineIndex", "in", "xrange", "(", "len", "(", "doorLines", ")", ")", "]", "\n", "\n", "i_r", "=", "[", "model", ".", "addVar", "(", "vtype", "=", "GRB", ".", "BINARY", ",", "name", "=", "\"icon_rectangle_\"", "+", "str", "(", "lineIndex", ")", ")", "for", "lineIndex", "in", "xrange", "(", "len", "(", "icons", ")", ")", "]", "\n", "\n", "i_types", "=", "[", "]", "\n", "for", "iconIndex", "in", "xrange", "(", "len", "(", "icons", ")", ")", ":", "\n", "      ", "i_types", ".", "append", "(", "[", "model", ".", "addVar", "(", "vtype", "=", "GRB", ".", "BINARY", ",", "name", "=", "\"icon_type_\"", "+", "str", "(", "iconIndex", ")", "+", "\"_\"", "+", "str", "(", "typeIndex", ")", ")", "for", "typeIndex", "in", "xrange", "(", "NUM_FINAL_ICONS", ")", "]", ")", "\n", "continue", "\n", "\n", "", "l_dir_labels", "=", "[", "]", "\n", "for", "lineIndex", "in", "xrange", "(", "len", "(", "wallLines", ")", ")", ":", "\n", "      ", "dir_labels", "=", "[", "]", "\n", "for", "direction", "in", "xrange", "(", "2", ")", ":", "\n", "        ", "labels", "=", "[", "]", "\n", "for", "label", "in", "xrange", "(", "NUM_FINAL_ROOMS", ")", ":", "\n", "          ", "labels", ".", "append", "(", "model", ".", "addVar", "(", "vtype", "=", "GRB", ".", "BINARY", ",", "name", "=", "\"line_\"", "+", "str", "(", "lineIndex", ")", "+", "\"_\"", "+", "str", "(", "direction", ")", "+", "\"_\"", "+", "str", "(", "label", ")", ")", ")", "\n", "", "dir_labels", ".", "append", "(", "labels", ")", "\n", "", "l_dir_labels", ".", "append", "(", "dir_labels", ")", "\n", "\n", "\n", "\n", "#model.update()", "\n", "", "obj", "=", "QuadExpr", "(", ")", "\n", "\n", "if", "gt", ":", "\n", "      ", "for", "pointIndex", "in", "xrange", "(", "len", "(", "wallPoints", ")", ")", ":", "\n", "        ", "model", ".", "addConstr", "(", "w_p", "[", "pointIndex", "]", "==", "1", ",", "'gt_point_active_'", "+", "str", "(", "pointIndex", ")", ")", "\n", "continue", "\n", "\n", "", "pointIconMap", "=", "{", "}", "\n", "for", "iconIndex", ",", "icon", "in", "enumerate", "(", "icons", ")", ":", "\n", "        ", "for", "pointIndex", "in", "icon", ":", "\n", "          ", "if", "pointIndex", "not", "in", "pointIconMap", ":", "\n", "            ", "pointIconMap", "[", "pointIndex", "]", "=", "[", "]", "\n", "pass", "\n", "", "pointIconMap", "[", "pointIndex", "]", ".", "append", "(", "iconIndex", ")", "\n", "continue", "\n", "", "continue", "\n", "", "for", "pointIndex", ",", "iconIndices", "in", "pointIconMap", ".", "iteritems", "(", ")", ":", "\n", "        ", "break", "\n", "iconSum", "=", "LinExpr", "(", ")", "\n", "for", "iconIndex", "in", "iconIndices", ":", "\n", "          ", "iconSum", "+=", "i_r", "[", "iconIndex", "]", "\n", "continue", "\n", "", "model", ".", "addConstr", "(", "iconSum", "==", "1", ")", "\n", "continue", "\n", "", "pass", "\n", "\n", "\n", "#label sum constraints", "\n", "", "for", "lineIndex", "in", "xrange", "(", "len", "(", "wallLines", ")", ")", ":", "\n", "      ", "for", "direction", "in", "xrange", "(", "2", ")", ":", "\n", "        ", "labelSum", "=", "LinExpr", "(", ")", "\n", "for", "label", "in", "xrange", "(", "NUM_FINAL_ROOMS", ")", ":", "\n", "          ", "labelSum", "+=", "l_dir_labels", "[", "lineIndex", "]", "[", "direction", "]", "[", "label", "]", "\n", "continue", "\n", "", "model", ".", "addConstr", "(", "labelSum", "==", "w_l", "[", "lineIndex", "]", ",", "'label_sum'", ")", "\n", "continue", "\n", "", "continue", "\n", "\n", "\n", "#opposite room constraints", "\n", "", "if", "False", ":", "\n", "      ", "oppositeRoomPairs", "=", "[", "(", "1", ",", "1", ")", ",", "(", "2", ",", "2", ")", ",", "(", "4", ",", "4", ")", ",", "(", "5", ",", "5", ")", ",", "(", "7", ",", "7", ")", ",", "(", "9", ",", "9", ")", "]", "\n", "for", "lineIndex", "in", "xrange", "(", "len", "(", "wallLines", ")", ")", ":", "\n", "        ", "for", "oppositeRoomPair", "in", "oppositeRoomPairs", ":", "\n", "          ", "model", ".", "addConstr", "(", "l_dir_labels", "[", "lineIndex", "]", "[", "0", "]", "[", "oppositeRoomPair", "[", "0", "]", "]", "+", "l_dir_labels", "[", "lineIndex", "]", "[", "0", "]", "[", "oppositeRoomPair", "[", "1", "]", "]", "<=", "1", ")", "\n", "if", "oppositeRoomPair", "[", "0", "]", "!=", "oppositeRoomPair", "[", "1", "]", ":", "\n", "            ", "model", ".", "addConstr", "(", "l_dir_labels", "[", "lineIndex", "]", "[", "0", "]", "[", "oppositeRoomPair", "[", "1", "]", "]", "+", "l_dir_labels", "[", "lineIndex", "]", "[", "0", "]", "[", "oppositeRoomPair", "[", "0", "]", "]", "<=", "1", ")", "\n", "pass", "\n", "", "continue", "\n", "", "continue", "\n", "", "pass", "\n", "\n", "#loop constraints", "\n", "", "closeRooms", "=", "{", "}", "\n", "for", "label", "in", "xrange", "(", "NUM_FINAL_ROOMS", ")", ":", "\n", "      ", "closeRooms", "[", "label", "]", "=", "True", "\n", "continue", "\n", "", "closeRooms", "[", "1", "]", "=", "False", "\n", "closeRooms", "[", "2", "]", "=", "False", "\n", "#closeRooms[3] = False", "\n", "closeRooms", "[", "8", "]", "=", "False", "\n", "closeRooms", "[", "9", "]", "=", "False", "\n", "\n", "for", "label", "in", "xrange", "(", "NUM_FINAL_ROOMS", ")", ":", "\n", "      ", "if", "not", "closeRooms", "[", "label", "]", ":", "\n", "        ", "continue", "\n", "", "for", "pointIndex", ",", "orientationLinesMap", "in", "enumerate", "(", "wallPointOrientationLinesMap", ")", ":", "\n", "        ", "for", "orientation", ",", "lines", "in", "orientationLinesMap", ".", "iteritems", "(", ")", ":", "\n", "          ", "direction", "=", "int", "(", "orientation", "in", "[", "1", ",", "2", "]", ")", "\n", "lineSum", "=", "LinExpr", "(", ")", "\n", "for", "lineIndex", "in", "lines", ":", "\n", "            ", "lineSum", "+=", "l_dir_labels", "[", "lineIndex", "]", "[", "direction", "]", "[", "label", "]", "\n", "continue", "\n", "", "for", "nextOrientation", "in", "xrange", "(", "orientation", "+", "1", ",", "8", ")", ":", "\n", "            ", "if", "not", "(", "nextOrientation", "%", "4", ")", "in", "orientationLinesMap", ":", "\n", "              ", "continue", "\n", "", "nextLines", "=", "orientationLinesMap", "[", "nextOrientation", "%", "4", "]", "\n", "nextDirection", "=", "int", "(", "(", "nextOrientation", "%", "4", ")", "in", "[", "0", ",", "3", "]", ")", "\n", "nextLineSum", "=", "LinExpr", "(", ")", "\n", "for", "nextLineIndex", "in", "nextLines", ":", "\n", "              ", "nextLineSum", "+=", "l_dir_labels", "[", "nextLineIndex", "]", "[", "nextDirection", "]", "[", "label", "]", "\n", "continue", "\n", "", "model", ".", "addConstr", "(", "lineSum", "==", "nextLineSum", ")", "\n", "break", "\n", "", "continue", "\n", "", "continue", "\n", "", "continue", "\n", "\n", "\n", "#exterior constraints", "\n", "", "exteriorLineSum", "=", "LinExpr", "(", ")", "\n", "for", "lineIndex", "in", "xrange", "(", "len", "(", "wallLines", ")", ")", ":", "\n", "      ", "if", "lineIndex", "not", "in", "exteriorLines", ":", "\n", "        ", "continue", "\n", "#direction = exteriorLines[lineIndex]", "\n", "", "label", "=", "0", "\n", "model", ".", "addConstr", "(", "l_dir_labels", "[", "lineIndex", "]", "[", "0", "]", "[", "label", "]", "+", "l_dir_labels", "[", "lineIndex", "]", "[", "1", "]", "[", "label", "]", "==", "w_l", "[", "lineIndex", "]", ",", "'exterior_wall'", ")", "\n", "exteriorLineSum", "+=", "w_l", "[", "lineIndex", "]", "\n", "continue", "\n", "", "model", ".", "addConstr", "(", "exteriorLineSum", ">=", "1", ",", "'exterior_wall_sum'", ")", "\n", "\n", "\n", "#line label constraints and objectives", "\n", "for", "lineIndex", ",", "directionNeighbors", "in", "enumerate", "(", "wallLineNeighbors", ")", ":", "\n", "      ", "for", "direction", ",", "neighbors", "in", "enumerate", "(", "directionNeighbors", ")", ":", "\n", "        ", "labelVotesSum", "=", "np", ".", "zeros", "(", "NUM_FINAL_ROOMS", ")", "\n", "for", "neighbor", ",", "labelVotes", "in", "neighbors", ".", "iteritems", "(", ")", ":", "\n", "          ", "labelVotesSum", "+=", "labelVotes", "\n", "continue", "\n", "\n", "", "votesSum", "=", "labelVotesSum", ".", "sum", "(", ")", "\n", "if", "votesSum", "==", "0", ":", "\n", "          ", "continue", "\n", "", "labelVotesSum", "/=", "votesSum", "\n", "\n", "\n", "for", "label", "in", "xrange", "(", "NUM_FINAL_ROOMS", ")", ":", "\n", "          ", "obj", "+=", "l_dir_labels", "[", "lineIndex", "]", "[", "direction", "]", "[", "label", "]", "*", "(", "0.0", "-", "labelVotesSum", "[", "label", "]", ")", "*", "labelWeight", "\n", "continue", "\n", "", "continue", "\n", "", "continue", "\n", "\n", "\n", "# if not gt:", "\n", "#   print(wallLineNeighbors[47][1])", "\n", "#   print(wallLineNeighbors[140][1])", "\n", "#   print(wallLineNeighbors[67][0])", "\n", "#   print(wallLineNeighbors[128][0])", "\n", "#   pass", "\n", "\n", "\n", "# for pointIndex in xrange(len(wallPoints)):", "\n", "#   if pointIndex not in augmentedPointMask:", "\n", "#     obj += (1 - w_p[pointIndex]) * junctionWeight #* len(wallPointOrientationLinesMap[pointIndex])", "\n", "#   else:", "\n", "#     obj += w_p[pointIndex] * augmentedJunctionWeight #* len(wallPointOrientationLinesMap[pointIndex])", "\n", "#   continue", "\n", "\n", "\n", "#door endpoint constraints", "\n", "", "pointDoorsMap", "=", "{", "}", "\n", "for", "doorIndex", ",", "line", "in", "enumerate", "(", "doorLines", ")", ":", "\n", "      ", "for", "endpointIndex", "in", "xrange", "(", "2", ")", ":", "\n", "        ", "pointIndex", "=", "line", "[", "endpointIndex", "]", "\n", "if", "pointIndex", "not", "in", "pointDoorsMap", ":", "\n", "          ", "pointDoorsMap", "[", "pointIndex", "]", "=", "[", "]", "\n", "pass", "\n", "", "pointDoorsMap", "[", "pointIndex", "]", ".", "append", "(", "doorIndex", ")", "\n", "continue", "\n", "", "continue", "\n", "\n", "\n", "\n", "# confidence insensitive objectives", "\n", "# for pointIndex, doorIndices in pointDoorsMap.iteritems():", "\n", "#   doorSum = LinExpr(0)", "\n", "#   for doorIndex in doorIndices:", "\n", "#     doorSum += d_l[doorIndex]", "\n", "#     continue", "\n", "#   obj += (1 - doorSum) * doorWeight", "\n", "#   #model.addConstr(doorSum <= 1, \"door_line_sum_\" + str(pointIndex) + \"_\" + str(orientation))", "\n", "#   continue", "\n", "\n", "\n", "\n", "\n", "#icon corner constraints", "\n", "", "pointIconsMap", "=", "{", "}", "\n", "for", "iconIndex", ",", "icon", "in", "enumerate", "(", "icons", ")", ":", "\n", "      ", "for", "cornerIndex", "in", "xrange", "(", "4", ")", ":", "\n", "        ", "pointIndex", "=", "icon", "[", "cornerIndex", "]", "\n", "if", "pointIndex", "not", "in", "pointIconsMap", ":", "\n", "          ", "pointIconsMap", "[", "pointIndex", "]", "=", "[", "]", "\n", "pass", "\n", "", "pointIconsMap", "[", "pointIndex", "]", ".", "append", "(", "iconIndex", ")", "\n", "continue", "\n", "", "continue", "\n", "\n", "", "for", "pointIndex", ",", "iconIndices", "in", "pointIconsMap", ".", "iteritems", "(", ")", ":", "\n", "      ", "iconSum", "=", "LinExpr", "(", "0", ")", "\n", "for", "iconIndex", "in", "iconIndices", ":", "\n", "        ", "iconSum", "+=", "i_r", "[", "iconIndex", "]", "\n", "continue", "\n", "#obj += (1 - iconSum) * iconWeight", "\n", "#print(iconIndices)", "\n", "", "model", ".", "addConstr", "(", "iconSum", "<=", "1", ")", "\n", "continue", "\n", "\n", "#exit(1)", "\n", "#print(pointIconsMap)", "\n", "\n", "\n", "#gapWeight = 1", "\n", "#pixelEvidenceWeight = 1", "\n", "\n", "\n", "", "if", "False", ":", "\n", "      ", "for", "lineIndex", ",", "line", "in", "enumerate", "(", "wallLines", ")", ":", "\n", "        ", "point", "=", "wallPoints", "[", "line", "[", "0", "]", "]", "\n", "neighborPoint", "=", "wallPoints", "[", "line", "[", "1", "]", "]", "\n", "lineDim", "=", "calcLineDim", "(", "wallPoints", ",", "line", ")", "\n", "#wallCost = (abs(neighborPoint[1 - lineDim] - point[1 - lineDim]) / GAP - 0.5) * gapWeight", "\n", "#obj += w_l[lineIndex] * wallCost * wallWeight", "\n", "\n", "fixedValue", "=", "int", "(", "round", "(", "(", "neighborPoint", "[", "1", "-", "lineDim", "]", "+", "point", "[", "1", "-", "lineDim", "]", ")", "/", "2", ")", ")", "\n", "\n", "# wallEvidenceSums = [0, 0]", "\n", "# for delta in xrange(int(abs(neighborPoint[lineDim] - point[lineDim]) + 1)):", "\n", "#   intermediatePoint = [0, 0]", "\n", "#   intermediatePoint[lineDim] = int(min(neighborPoint[lineDim], point[lineDim]) + delta)", "\n", "#   intermediatePoint[1 - lineDim] = fixedValue", "\n", "#   for typeIndex in xrange(NUM_WALL_TYPES):", "\n", "#     wallEvidenceSums[typeIndex] += labelMap[WALL_LABEL_OFFSET + typeIndex][min(max(intermediatePoint[1], 0), height - 1)][min(max(intermediatePoint[0], 0), width - 1)]", "\n", "#     continue", "\n", "#   continue", "\n", "# wallEvidenceSum = wallEvidenceSums[0] + wallEvidenceSums[1]", "\n", "# wallEvidenceSum /= maxDim", "\n", "\n", "wallEvidenceSum", "=", "0.0", "\n", "count", "=", "0", "\n", "\n", "for", "delta", "in", "xrange", "(", "int", "(", "round", "(", "abs", "(", "neighborPoint", "[", "lineDim", "]", "-", "point", "[", "lineDim", "]", ")", ")", ")", "+", "1", ")", ":", "\n", "          ", "intermediatePoint", "=", "[", "0", ",", "0", "]", "\n", "intermediatePoint", "[", "lineDim", "]", "=", "int", "(", "min", "(", "neighborPoint", "[", "lineDim", "]", ",", "point", "[", "lineDim", "]", ")", "+", "delta", ")", "\n", "intermediatePoint", "[", "1", "-", "lineDim", "]", "=", "fixedValue", "\n", "if", "lineDim", "==", "0", ":", "\n", "            ", "fixedValue_1", "=", "min", "(", "max", "(", "intermediatePoint", "[", "1", "]", "-", "wallLineWidth", ",", "0", ")", ",", "height", "-", "1", ")", "\n", "fixedValue_2", "=", "min", "(", "max", "(", "intermediatePoint", "[", "1", "]", "+", "wallLineWidth", "+", "1", ",", "0", ")", ",", "height", "-", "1", ")", "\n", "wallEvidenceSum", "+=", "roomHeatmaps", "[", "fixedValue_1", ":", "fixedValue_2", ",", "min", "(", "max", "(", "intermediatePoint", "[", "0", "]", ",", "0", ")", ",", "width", "-", "1", ")", ",", "WALL_LABEL_OFFSET", "]", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "            ", "fixedValue_1", "=", "min", "(", "max", "(", "intermediatePoint", "[", "0", "]", "-", "wallLineWidth", ",", "0", ")", ",", "width", "-", "1", ")", "\n", "fixedValue_2", "=", "min", "(", "max", "(", "intermediatePoint", "[", "0", "]", "+", "wallLineWidth", "+", "1", ",", "0", ")", ",", "width", "-", "1", ")", "\n", "wallEvidenceSum", "+=", "roomHeatmaps", "[", "min", "(", "max", "(", "intermediatePoint", "[", "1", "]", ",", "0", ")", ",", "height", "-", "1", ")", ",", "fixedValue_1", ":", "fixedValue_2", ",", "WALL_LABEL_OFFSET", "]", ".", "sum", "(", ")", "\n", "pass", "\n", "", "count", "+=", "fixedValue_2", "-", "fixedValue_1", "\n", "continue", "\n", "", "wallEvidenceSum", "/=", "count", "\n", "#print(lineIndex, wallEvidenceSum, [wallPoints[pointIndex] for pointIndex in wallLines[lineIndex]])", "\n", "obj", "+=", "-", "wallEvidenceSum", "*", "w_l", "[", "lineIndex", "]", "*", "wallWeight", "\n", "continue", "\n", "", "", "else", ":", "\n", "      ", "wallLineConfidenceMap", "=", "roomHeatmaps", "[", ":", ",", ":", ",", "WALL_LABEL_OFFSET", "]", "\n", "wallConfidences", "=", "[", "]", "\n", "for", "lineIndex", ",", "line", "in", "enumerate", "(", "wallLines", ")", ":", "\n", "        ", "point_1", "=", "np", ".", "array", "(", "wallPoints", "[", "line", "[", "0", "]", "]", "[", ":", "2", "]", ")", "\n", "point_2", "=", "np", ".", "array", "(", "wallPoints", "[", "line", "[", "1", "]", "]", "[", ":", "2", "]", ")", "\n", "lineDim", "=", "calcLineDim", "(", "wallPoints", ",", "line", ")", "\n", "\n", "fixedValue", "=", "int", "(", "round", "(", "(", "point_1", "[", "1", "-", "lineDim", "]", "+", "point_2", "[", "1", "-", "lineDim", "]", ")", "/", "2", ")", ")", "\n", "point_1", "[", "lineDim", "]", ",", "point_2", "[", "lineDim", "]", "=", "min", "(", "point_1", "[", "lineDim", "]", ",", "point_2", "[", "lineDim", "]", ")", ",", "max", "(", "point_1", "[", "lineDim", "]", ",", "point_2", "[", "lineDim", "]", ")", "\n", "\n", "point_1", "[", "1", "-", "lineDim", "]", "=", "fixedValue", "-", "wallLineWidth", "\n", "point_2", "[", "1", "-", "lineDim", "]", "=", "fixedValue", "+", "wallLineWidth", "\n", "\n", "\n", "point_1", "=", "np", ".", "maximum", "(", "point_1", ",", "0", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "point_2", "=", "np", ".", "minimum", "(", "point_2", ",", "sizes", "-", "1", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "wallLineConfidence", "=", "np", ".", "sum", "(", "wallLineConfidenceMap", "[", "point_1", "[", "1", "]", ":", "point_2", "[", "1", "]", "+", "1", ",", "point_1", "[", "0", "]", ":", "point_2", "[", "0", "]", "+", "1", "]", ")", "/", "(", "(", "point_2", "[", "1", "]", "+", "1", "-", "point_1", "[", "1", "]", ")", "*", "(", "point_2", "[", "0", "]", "+", "1", "-", "point_1", "[", "0", "]", ")", ")", "-", "0.5", "\n", "\n", "obj", "+=", "-", "wallLineConfidence", "*", "w_l", "[", "lineIndex", "]", "*", "wallWeight", "\n", "\n", "wallConfidences", ".", "append", "(", "wallLineConfidence", ")", "\n", "continue", "\n", "", "pass", "\n", "\n", "", "if", "not", "gt", ":", "\n", "      ", "for", "wallIndex", ",", "wallLine", "in", "enumerate", "(", "wallLines", ")", ":", "\n", "        ", "print", "(", "wallIndex", ",", "[", "np", ".", "array", "(", "wallPoints", "[", "pointIndex", "]", "[", ":", "2", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", ".", "tolist", "(", ")", "for", "pointIndex", "in", "wallLine", "]", ",", "wallConfidences", "[", "wallIndex", "]", ")", "\n", "continue", "\n", "#model.addConstr(w_l[28] == 1)", "\n", "", "pass", "\n", "\n", "\n", "", "doorLineConfidenceMap", "=", "iconHeatmaps", "[", ":", ",", ":", ",", "DOOR_LABEL_OFFSET", "]", "+", "iconHeatmaps", "[", ":", ",", ":", ",", "DOOR_LABEL_OFFSET", "+", "1", "]", "\n", "for", "lineIndex", ",", "line", "in", "enumerate", "(", "doorLines", ")", ":", "\n", "#obj += -d_l[lineIndex] * doorWeight * abs(neighborPoint[lineDim] - point[lineDim] + 1) / maxDim", "\n", "#continue", "\n", "      ", "point_1", "=", "np", ".", "array", "(", "doorPoints", "[", "line", "[", "0", "]", "]", "[", ":", "2", "]", ")", "\n", "point_2", "=", "np", ".", "array", "(", "doorPoints", "[", "line", "[", "1", "]", "]", "[", ":", "2", "]", ")", "\n", "lineDim", "=", "calcLineDim", "(", "doorPoints", ",", "line", ")", "\n", "\n", "#doorCost = (abs(neighborPoint[1 - lineDim] - point[1 - lineDim]) / gap - 1) * gapWeight", "\n", "#obj += d_l[lineIndex] * doorCost * doorWeight", "\n", "fixedValue", "=", "int", "(", "round", "(", "(", "point_1", "[", "1", "-", "lineDim", "]", "+", "point_2", "[", "1", "-", "lineDim", "]", ")", "/", "2", ")", ")", "\n", "\n", "#assert(point_1[lineDim] < point_2[lineDim], 'door line reversed')", "\n", "point_1", "[", "lineDim", "]", ",", "point_2", "[", "lineDim", "]", "=", "min", "(", "point_1", "[", "lineDim", "]", ",", "point_2", "[", "lineDim", "]", ")", ",", "max", "(", "point_1", "[", "lineDim", "]", ",", "point_2", "[", "lineDim", "]", ")", "\n", "\n", "point_1", "[", "1", "-", "lineDim", "]", "=", "fixedValue", "-", "doorLineWidth", "\n", "point_2", "[", "1", "-", "lineDim", "]", "=", "fixedValue", "+", "doorLineWidth", "\n", "\n", "point_1", "=", "np", ".", "maximum", "(", "point_1", ",", "0", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "point_2", "=", "np", ".", "minimum", "(", "point_2", ",", "sizes", "-", "1", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "if", "not", "gt", ":", "\n", "        ", "doorLineConfidence", "=", "np", ".", "sum", "(", "doorLineConfidenceMap", "[", "point_1", "[", "1", "]", ":", "point_2", "[", "1", "]", "+", "1", ",", "point_1", "[", "0", "]", ":", "point_2", "[", "0", "]", "+", "1", "]", ")", "/", "(", "(", "point_2", "[", "1", "]", "+", "1", "-", "point_1", "[", "1", "]", ")", "*", "(", "point_2", "[", "0", "]", "+", "1", "-", "point_1", "[", "0", "]", ")", ")", "\n", "\n", "if", "lineDim", "==", "0", ":", "\n", "          ", "doorPointConfidence", "=", "(", "doorCornerHeatmaps", "[", "point_1", "[", "1", "]", ",", "point_1", "[", "0", "]", ",", "3", "]", "+", "doorCornerHeatmaps", "[", "point_2", "[", "1", "]", ",", "point_2", "[", "0", "]", ",", "1", "]", ")", "/", "2", "\n", "", "else", ":", "\n", "          ", "doorPointConfidence", "=", "(", "doorCornerHeatmaps", "[", "point_1", "[", "1", "]", ",", "point_1", "[", "0", "]", ",", "0", "]", "+", "doorCornerHeatmaps", "[", "point_2", "[", "1", "]", ",", "point_2", "[", "0", "]", ",", "2", "]", ")", "/", "2", "\n", "pass", "\n", "", "doorConfidence", "=", "(", "doorLineConfidence", "+", "doorPointConfidence", ")", "/", "2", "-", "0.5", "\n", "obj", "+=", "-", "doorConfidence", "*", "d_l", "[", "lineIndex", "]", "*", "doorWeight", "\n", "", "else", ":", "\n", "        ", "obj", "+=", "-", "0.5", "*", "d_l", "[", "lineIndex", "]", "*", "doorWeight", "\n", "pass", "\n", "\n", "#doorEvidenceSums = [0 for typeIndex in xrange(NUM_DOOR_TYPES)]", "\n", "#doorEvidenceSum = 0", "\n", "# for delta in xrange(int(abs(neighborPoint[lineDim] - point[lineDim]) + 1)):", "\n", "#   intermediatePoint = [0, 0]", "\n", "#   intermediatePoint[lineDim] = int(min(neighborPoint[lineDim], point[lineDim]) + delta)", "\n", "#   intermediatePoint[1 - lineDim] = fixedValue", "\n", "\n", "#   doorEvidenceSum += np.sum(labelMap[DOOR_LABEL_OFFSET:DOOR_LABEL_OFFSET + NUM_DOOR_TYPES, min(max(intermediatePoint[1], 0), height - 1), min(max(intermediatePoint[0], 0), width - 1)])", "\n", "#   continue", "\n", "# doorEvidenceSum /= maxDim", "\n", "\n", "#print(point_1.tolist(), point_2.tolist(), doorConfidence)", "\n", "\n", "#print(('door confidence', lineIndex, [np.array(doorPoints[pointIndex][:2]).astype(np.int32).tolist() for pointIndex in doorLines[lineIndex]]))", "\n", "\n", "\n", "", "continue", "\n", "\n", "\n", "", "for", "iconIndex", ",", "icon", "in", "enumerate", "(", "icons", ")", ":", "\n", "      ", "point_1", "=", "iconPoints", "[", "icon", "[", "0", "]", "]", "\n", "point_2", "=", "iconPoints", "[", "icon", "[", "1", "]", "]", "\n", "point_3", "=", "iconPoints", "[", "icon", "[", "2", "]", "]", "\n", "point_4", "=", "iconPoints", "[", "icon", "[", "3", "]", "]", "\n", "\n", "x_1", "=", "int", "(", "(", "point_1", "[", "0", "]", "+", "point_3", "[", "0", "]", ")", "/", "2", ")", "\n", "x_2", "=", "int", "(", "(", "point_2", "[", "0", "]", "+", "point_4", "[", "0", "]", ")", "/", "2", ")", "\n", "y_1", "=", "int", "(", "(", "point_1", "[", "1", "]", "+", "point_2", "[", "1", "]", ")", "/", "2", ")", "\n", "y_2", "=", "int", "(", "(", "point_3", "[", "1", "]", "+", "point_4", "[", "1", "]", ")", "/", "2", ")", "\n", "\n", "iconArea", "=", "(", "x_2", "-", "x_1", "+", "1", ")", "*", "(", "y_2", "-", "y_1", "+", "1", ")", "\n", "#iconEvidenceSums = labelVotesMap[ICON_LABEL_OFFSET:ICON_LABEL_OFFSET + NUM_FINAL_ICONS, y_2, x_2] + labelVotesMap[ICON_LABEL_OFFSET:ICON_LABEL_OFFSET + NUM_FINAL_ICONS, y_1, x_1] - labelVotesMap[ICON_LABEL_OFFSET:ICON_LABEL_OFFSET + NUM_FINAL_ICONS, y_2, x_1] - labelVotesMap[ICON_LABEL_OFFSET:ICON_LABEL_OFFSET + NUM_FINAL_ICONS, y_1, x_2]", "\n", "\n", "# for typeIndex in xrange(NUM_FINAL_ICONS):", "\n", "#   iconRatio = iconEvidenceSums[typeIndex] / iconArea", "\n", "#   if iconRatio < 0.5 and False:", "\n", "#     model.addConstr(i_types[iconIndex][typeIndex] == 0)", "\n", "#   else:", "\n", "#     obj += i_types[iconIndex][typeIndex] * (0 - iconEvidenceSums[typeIndex] / iconArea) * iconTypeWeight", "\n", "#   continue", "\n", "# continue", "\n", "\n", "if", "iconArea", "<=", "1e-4", ":", "\n", "        ", "print", "(", "icon", ")", "\n", "print", "(", "[", "iconPoints", "[", "pointIndex", "]", "for", "pointIndex", "in", "icon", "]", ")", "\n", "print", "(", "'zero size icon'", ")", "\n", "exit", "(", "1", ")", "\n", "pass", "\n", "\n", "", "iconTypeConfidence", "=", "iconHeatmaps", "[", "y_1", ":", "y_2", "+", "1", ",", "x_1", ":", "x_2", "+", "1", ",", ":", "NUM_FINAL_ICONS", "+", "1", "]", ".", "sum", "(", "axis", "=", "(", "0", ",", "1", ")", ")", "/", "iconArea", "\n", "iconTypeConfidence", "[", "1", "]", "+=", "iconTypeConfidence", "[", "8", "]", "\n", "iconTypeConfidence", "[", "6", "]", "+=", "iconTypeConfidence", "[", "9", "]", "\n", "iconTypeConfidence", "[", "8", "]", "=", "0", "\n", "iconTypeConfidence", "[", "9", "]", "=", "0", "\n", "iconTypeConfidence", "=", "iconTypeConfidence", "[", "1", ":", "]", "-", "iconTypeConfidence", "[", "0", "]", "\n", "\n", "if", "not", "gt", ":", "\n", "#iconPointConfidence = (iconCornerHeatmaps[y_1, x_1, 2] + iconCornerHeatmaps[y_1, x_2, 3] + iconCornerHeatmaps[y_2, x_1, 1] + iconCornerHeatmaps[y_2, x_2, 0]) / 4 - 0.5", "\n", "        ", "iconPointConfidence", "=", "(", "iconCornerHeatmaps", "[", "int", "(", "round", "(", "point_1", "[", "1", "]", ")", ")", ",", "int", "(", "round", "(", "point_1", "[", "0", "]", ")", ")", ",", "2", "]", "+", "iconCornerHeatmaps", "[", "int", "(", "round", "(", "point_2", "[", "1", "]", ")", ")", ",", "int", "(", "round", "(", "point_2", "[", "0", "]", ")", ")", ",", "3", "]", "+", "iconCornerHeatmaps", "[", "int", "(", "round", "(", "point_3", "[", "1", "]", ")", ")", ",", "int", "(", "round", "(", "point_3", "[", "0", "]", ")", ")", ",", "1", "]", "+", "iconCornerHeatmaps", "[", "int", "(", "round", "(", "point_4", "[", "1", "]", ")", ")", ",", "int", "(", "round", "(", "point_4", "[", "0", "]", ")", ")", ",", "0", "]", ")", "/", "4", "-", "0.5", "\n", "iconConfidence", "=", "(", "iconTypeConfidence", "+", "iconPointConfidence", ")", "/", "2", "\n", "", "else", ":", "\n", "        ", "iconConfidence", "=", "iconTypeConfidence", "\n", "pass", "\n", "\n", "#iconTypeConfidence[1:] = 0", "\n", "#iconTypeConfidence[0] = 0", "\n", "", "for", "typeIndex", "in", "xrange", "(", "NUM_FINAL_ICONS", ")", ":", "\n", "        ", "obj", "+=", "-", "i_types", "[", "iconIndex", "]", "[", "typeIndex", "]", "*", "(", "iconConfidence", "[", "typeIndex", "]", ")", "*", "iconTypeWeight", "\n", "continue", "\n", "\n", "#print('icon confidence', iconIndex, x_1, y_1, x_2, y_2, iconTypeConfidence.argmax(), iconTypeConfidence[iconTypeConfidence.argmax()], iconConfidence[iconTypeConfidence.argmax()])", "\n", "", "continue", "\n", "\n", "#if not gt:", "\n", "#exit(1)", "\n", "\n", "", "for", "iconIndex", "in", "xrange", "(", "len", "(", "icons", ")", ")", ":", "\n", "      ", "typeSum", "=", "LinExpr", "(", "0", ")", "\n", "for", "typeIndex", "in", "xrange", "(", "NUM_FINAL_ICONS", "-", "1", ")", ":", "\n", "        ", "typeSum", "+=", "i_types", "[", "iconIndex", "]", "[", "typeIndex", "]", "\n", "continue", "\n", "", "model", ".", "addConstr", "(", "typeSum", "==", "i_r", "[", "iconIndex", "]", ")", "\n", "continue", "\n", "\n", "\n", "#line sum constraints and objectives", "\n", "", "for", "pointIndex", ",", "orientationLinesMap", "in", "enumerate", "(", "wallPointOrientationLinesMap", ")", ":", "\n", "      ", "pointLineSum", "=", "LinExpr", "(", "0", ")", "\n", "for", "orientation", ",", "lines", "in", "orientationLinesMap", ".", "iteritems", "(", ")", ":", "\n", "#if len(lines) > 1:", "\n", "#print(lines)", "\n", "        ", "lineSum", "=", "LinExpr", "(", "0", ")", "\n", "for", "lineIndex", "in", "lines", ":", "\n", "          ", "lineSum", "+=", "w_l", "[", "lineIndex", "]", "\n", "continue", "\n", "\n", "", "model", ".", "addConstr", "(", "lineSum", "==", "w_p", "[", "pointIndex", "]", ",", "\"line_sum_\"", "+", "str", "(", "pointIndex", ")", "+", "\"_\"", "+", "str", "(", "orientation", ")", ")", "\n", "#obj += (w_p[pointIndex] - lineSum) * junctionLineWeight", "\n", "#obj += (1 - lineSum) * junctionWeight", "\n", "pointLineSum", "+=", "lineSum", "\n", "continue", "\n", "\n", "#if wallPoints[pointIndex][2] > 0:", "\n", "#model.addConstr(pointLineSum >= wallPoints[pointIndex][2] * w_p[pointIndex], 'point line sum')", "\n", "#model.addConstr(pointLineSum >= 2 * w_p[pointIndex], 'point line sum')", "\n", "#pass", "\n", "\n", "", "continue", "\n", "\n", "\n", "# #close points constraints", "\n", "# for pointIndex, point in enumerate(wallPoints):", "\n", "#   for neighborPointIndex, neighborPoint in enumerate(wallPoints):", "\n", "#     if neighborPointIndex <= pointIndex:", "\n", "#       continue", "\n", "#     distance = pow(pow(point[0] - neighborPoint[0], 2) + pow(point[1] - neighborPoint[1], 2), 0.5)", "\n", "#     if distance < DISTANCES['point'] and neighborPointIndex not in wallPointNeighbors[pointIndex]:", "\n", "#       #print('close point', pointIndex, neighborPointIndex)", "\n", "#       #obj += p[pointIndex] * p[neighborPointIndex] * closePointWeight", "\n", "#       model.addConstr(w_p[pointIndex] + w_p[neighborPointIndex] <= 1, 'close point')", "\n", "#       pass", "\n", "#     continue", "\n", "#   continue", "\n", "\n", "\n", "# print('conflict')", "\n", "# conflictLines = [0, ]", "\n", "# for conflictLinePair in conflictWallLinePairs:", "\n", "#   if conflictLinePair[0] == 0:", "\n", "#     conflictLines.append(conflictLinePair[1])", "\n", "#     pass", "\n", "#   for c in xrange(2):", "\n", "#     if conflictLinePair[c] in [1, 29, 48, 34, 59, 37, 61] and conflictLinePair[1 - c] not in conflictLines:", "\n", "#       print(conflictLinePair)", "\n", "#       pass", "\n", "#     if conflictLinePair[c] in [1, 29, 48, 34, 59, 37, 61] and conflictLinePair[1 - c] in [1, 29, 48, 34, 59, 37, 61]:", "\n", "#       print(conflictLinePair)", "\n", "#       pass", "\n", "#     continue", "\n", "#   continue", "\n", "# drawLines('test/lines/line_0_combined.png', width, height, wallPoints, [wallLines[lineIndex] for lineIndex in [1, 29, 48, 34, 59, 37, 61]], [], None, 2, lineColor=255)", "\n", "# exit(1)", "\n", "\n", "\n", "#conflict pair constraints", "\n", "\n", "# ratio_1 = 0.47", "\n", "# ratio_2 = 0.5", "\n", "#print('ratio', int(round(len(conflictWallLinePairs) * ratio_1)), int(round(len(conflictWallLinePairs) * ratio_2)), len(conflictWallLinePairs))", "\n", "# conflictWallLinePairs = conflictWallLinePairs[int(round(len(conflictWallLinePairs) * ratio_1)):int(round(len(conflictWallLinePairs) * ratio_2))]", "\n", "\n", "\n", "#print(len(conflictWallLinePairs))", "\n", "#conflictWallLinePairs = conflictWallLinePairs[135:136] + conflictWallLinePairs[240:]", "\n", "#conflictWallLinePairs = []", "\n", "#print(conflictWallLinePairs[135:136])", "\n", "#exit(1)", "\n", "\n", "\n", "", "for", "conflictLinePair", "in", "conflictWallLinePairs", ":", "\n", "      ", "model", ".", "addConstr", "(", "w_l", "[", "conflictLinePair", "[", "0", "]", "]", "+", "w_l", "[", "conflictLinePair", "[", "1", "]", "]", "<=", "1", ",", "'conflict_wall_line_pair'", ")", "\n", "continue", "\n", "\n", "", "for", "conflictLinePair", "in", "conflictDoorLinePairs", ":", "\n", "      ", "model", ".", "addConstr", "(", "d_l", "[", "conflictLinePair", "[", "0", "]", "]", "+", "d_l", "[", "conflictLinePair", "[", "1", "]", "]", "<=", "1", ",", "'conflict_door_line_pair'", ")", "\n", "continue", "\n", "\n", "", "for", "conflictIconPair", "in", "conflictIconPairs", ":", "\n", "      ", "model", ".", "addConstr", "(", "i_r", "[", "conflictIconPair", "[", "0", "]", "]", "+", "i_r", "[", "conflictIconPair", "[", "1", "]", "]", "<=", "1", ",", "'conflict_icon_pair'", ")", "\n", "continue", "\n", "\n", "", "for", "conflictLinePair", "in", "conflictIconWallPairs", ":", "\n", "      ", "model", ".", "addConstr", "(", "i_r", "[", "conflictLinePair", "[", "0", "]", "]", "+", "w_l", "[", "conflictLinePair", "[", "1", "]", "]", "<=", "1", ",", "'conflict_icon_wall_pair'", ")", "\n", "continue", "\n", "\n", "\n", "#door wall line map constraints", "\n", "", "for", "doorIndex", ",", "lines", "in", "enumerate", "(", "doorWallLineMap", ")", ":", "\n", "      ", "if", "len", "(", "lines", ")", "==", "0", ":", "\n", "        ", "model", ".", "addConstr", "(", "d_l", "[", "doorIndex", "]", "==", "0", ",", "'door_not_on_walls'", ")", "\n", "continue", "\n", "", "lineSum", "=", "LinExpr", "(", "0", ")", "\n", "for", "lineIndex", "in", "lines", ":", "\n", "        ", "lineSum", "+=", "w_l", "[", "lineIndex", "]", "\n", "continue", "\n", "", "model", ".", "addConstr", "(", "d_l", "[", "doorIndex", "]", "<=", "lineSum", ",", "'d<=line_sum'", ")", "\n", "continue", "\n", "\n", "", "doorWallPointMap", "=", "findLinePointMap", "(", "doorPoints", ",", "doorLines", ",", "wallPoints", ",", "gap", "=", "GAPS", "[", "'door_point_conflict'", "]", ")", "\n", "for", "doorIndex", ",", "points", "in", "enumerate", "(", "doorWallPointMap", ")", ":", "\n", "      ", "if", "len", "(", "points", ")", "==", "0", ":", "\n", "        ", "continue", "\n", "#print('door', [doorPoints[pointIndex] for pointIndex in doorLines[doorIndex][:2]])", "\n", "#print([wallPoints[pointIndex][:2] for pointIndex in points])", "\n", "", "pointSum", "=", "LinExpr", "(", "0", ")", "\n", "for", "pointIndex", "in", "points", ":", "\n", "        ", "model", ".", "addConstr", "(", "d_l", "[", "doorIndex", "]", "+", "w_p", "[", "pointIndex", "]", "<=", "1", ",", "'door_on_two_walls'", ")", "\n", "continue", "\n", "", "continue", "\n", "#exit(1)", "\n", "\n", "\n", "", "if", "not", "gt", ":", "\n", "# print(wallLines[91])", "\n", "#print(wallPointOrientationLinesMap[24])", "\n", "#print(wallPointNeighbors[24])", "\n", "#exit(1)", "\n", "\n", "#print(conflictWallLinePairs)", "\n", "\n", "#1, 29, 48, 34, 59, 37, 61", "\n", "#model.addConstr(w_l[13] == 0)", "\n", "#model.addConstr(w_p[7] == 1)", "\n", "#model.addConstr(w_l[55] == 1)", "\n", "#model.addConstr(w_l[63] == 1)", "\n", "\n", "#model.addConstr(w_l[45] == 0)", "\n", "\n", "# for wallIndex in [44, 57, 60]:", "\n", "#   model.addConstr(w_l[wallIndex] == 1)", "\n", "#   continue", "\n", "\n", "#model.addConstr(d_l[3] == 1)", "\n", "#print(wallLines[90])", "\n", "#print(wallLines[62])", "\n", "#print(wallLines[73])", "\n", "#print(wallLines[107])", "\n", "#print(wallLines[111])", "\n", "#print(wallPointOrientationLinesMap[wallLines[0][0]])", "\n", "#print(wallPointOrientationLinesMap[wallLines[111][1]])", "\n", "#print(wallPointOrientationLinesMap[25])", "\n", "#print(wallLines[])", "\n", "#exit(1)", "\n", "#model.addConstr(d_l[8] == 1)", "\n", "#model.addConstr(i_types[8][1] == 1)", "\n", "#model.addConstr(l_dir_labels[39][1][7] == 1)", "\n", "#exit(1)", "\n", "      ", "pass", "\n", "\n", "\n", "", "model", ".", "setObjective", "(", "obj", ",", "GRB", ".", "MINIMIZE", ")", "\n", "#model.update()", "\n", "model", ".", "setParam", "(", "'TimeLimit'", ",", "120", ")", "\n", "model", ".", "optimize", "(", ")", "\n", "\n", "\n", "if", "model", ".", "status", "==", "GRB", ".", "Status", ".", "INF_OR_UNBD", ":", "\n", "# Turn presolve off to determine whether model is infeasible", "\n", "# or unbounded", "\n", "      ", "model", ".", "setParam", "(", "GRB", ".", "Param", ".", "Presolve", ",", "0", ")", "\n", "model", ".", "optimize", "(", ")", "\n", "\n", "", "model", ".", "write", "(", "'test/model.lp'", ")", "\n", "#print(model.status)", "\n", "if", "model", ".", "status", "==", "GRB", ".", "Status", ".", "OPTIMAL", ":", "\n", "      ", "filteredWallLines", "=", "[", "]", "\n", "filteredWallLabels", "=", "[", "]", "\n", "filteredWallTypes", "=", "[", "]", "\n", "wallPointLabels", "=", "[", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", "for", "pointIndex", "in", "xrange", "(", "len", "(", "wallPoints", ")", ")", "]", "\n", "\n", "for", "lineIndex", ",", "lineVar", "in", "enumerate", "(", "w_l", ")", ":", "\n", "        ", "if", "lineVar", ".", "x", "<", "0.5", ":", "\n", "          ", "continue", "\n", "", "filteredWallLines", ".", "append", "(", "wallLines", "[", "lineIndex", "]", ")", "\n", "\n", "filteredWallTypes", ".", "append", "(", "0", ")", "\n", "\n", "labels", "=", "[", "11", ",", "11", "]", "\n", "for", "direction", "in", "xrange", "(", "2", ")", ":", "\n", "          ", "for", "label", "in", "xrange", "(", "NUM_FINAL_ROOMS", ")", ":", "\n", "            ", "if", "l_dir_labels", "[", "lineIndex", "]", "[", "direction", "]", "[", "label", "]", ".", "x", ">", "0.5", ":", "\n", "              ", "labels", "[", "direction", "]", "=", "label", "\n", "break", "\n", "", "continue", "\n", "", "continue", "\n", "\n", "", "filteredWallLabels", ".", "append", "(", "labels", ")", "\n", "print", "(", "'wall'", ",", "lineIndex", ",", "labels", ",", "[", "np", ".", "array", "(", "wallPoints", "[", "pointIndex", "]", "[", ":", "2", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", ".", "tolist", "(", ")", "for", "pointIndex", "in", "wallLines", "[", "lineIndex", "]", "]", ",", "wallLineNeighbors", "[", "lineIndex", "]", "[", "0", "]", ".", "keys", "(", ")", ",", "wallLineNeighbors", "[", "lineIndex", "]", "[", "1", "]", ".", "keys", "(", ")", ")", "\n", "line", "=", "wallLines", "[", "lineIndex", "]", "\n", "lineDim", "=", "calcLineDim", "(", "wallPoints", ",", "line", ")", "\n", "if", "lineDim", "==", "0", ":", "\n", "          ", "wallPointLabels", "[", "line", "[", "0", "]", "]", "[", "0", "]", "=", "labels", "[", "0", "]", "\n", "wallPointLabels", "[", "line", "[", "0", "]", "]", "[", "1", "]", "=", "labels", "[", "1", "]", "\n", "wallPointLabels", "[", "line", "[", "1", "]", "]", "[", "3", "]", "=", "labels", "[", "0", "]", "\n", "wallPointLabels", "[", "line", "[", "1", "]", "]", "[", "2", "]", "=", "labels", "[", "1", "]", "\n", "", "else", ":", "\n", "          ", "wallPointLabels", "[", "line", "[", "0", "]", "]", "[", "1", "]", "=", "labels", "[", "0", "]", "\n", "wallPointLabels", "[", "line", "[", "0", "]", "]", "[", "2", "]", "=", "labels", "[", "1", "]", "\n", "wallPointLabels", "[", "line", "[", "1", "]", "]", "[", "0", "]", "=", "labels", "[", "0", "]", "\n", "wallPointLabels", "[", "line", "[", "1", "]", "]", "[", "3", "]", "=", "labels", "[", "1", "]", "\n", "pass", "\n", "", "continue", "\n", "\n", "\n", "#if not gt:", "\n", "#print([(lineIndex, [np.array(wallPoints[pointIndex][:2]).astype(np.int32).tolist() for pointIndex in wallLine]) for lineIndex, wallLine in enumerate(filteredWallLines)])", "\n", "#exit(1)", "\n", "\n", "", "if", "not", "gt", ":", "\n", "        ", "adjustPoints", "(", "wallPoints", ",", "filteredWallLines", ")", "\n", "mergePoints", "(", "wallPoints", ",", "filteredWallLines", ")", "\n", "adjustPoints", "(", "wallPoints", ",", "filteredWallLines", ")", "\n", "filteredWallLabels", "=", "[", "filteredWallLabels", "[", "lineIndex", "]", "for", "lineIndex", "in", "xrange", "(", "len", "(", "filteredWallLines", ")", ")", "if", "filteredWallLines", "[", "lineIndex", "]", "[", "0", "]", "!=", "filteredWallLines", "[", "lineIndex", "]", "[", "1", "]", "]", "\n", "filteredWallLines", "=", "[", "line", "for", "line", "in", "filteredWallLines", "if", "line", "[", "0", "]", "!=", "line", "[", "1", "]", "]", "\n", "pass", "\n", "\n", "\n", "", "drawLines", "(", "'test/result_line.png'", ",", "width", ",", "height", ",", "wallPoints", ",", "filteredWallLines", ",", "filteredWallLabels", ",", "lineColor", "=", "255", ")", "\n", "#resultImage = drawLines('', width, height, wallPoints, filteredWallLines, filteredWallLabels, None, lineWidth=5, lineColor=255)", "\n", "\n", "filteredDoorLines", "=", "[", "]", "\n", "filteredDoorTypes", "=", "[", "]", "\n", "for", "lineIndex", ",", "lineVar", "in", "enumerate", "(", "d_l", ")", ":", "\n", "        ", "if", "lineVar", ".", "x", "<", "0.5", ":", "\n", "          ", "continue", "\n", "", "print", "(", "(", "'door'", ",", "lineIndex", ",", "[", "doorPoints", "[", "pointIndex", "]", "[", ":", "2", "]", "for", "pointIndex", "in", "doorLines", "[", "lineIndex", "]", "]", ")", ")", "\n", "filteredDoorLines", ".", "append", "(", "doorLines", "[", "lineIndex", "]", ")", "\n", "\n", "filteredDoorTypes", ".", "append", "(", "0", ")", "\n", "continue", "\n", "\n", "", "filteredDoorWallMap", "=", "findLineMapSingle", "(", "doorPoints", ",", "filteredDoorLines", ",", "wallPoints", ",", "filteredWallLines", ",", "gap", "=", "GAPS", "[", "'wall_door_neighbor'", "]", ")", "\n", "adjustDoorPoints", "(", "doorPoints", ",", "filteredDoorLines", ",", "wallPoints", ",", "filteredWallLines", ",", "filteredDoorWallMap", ")", "\n", "drawLines", "(", "'test/result_door.png'", ",", "width", ",", "height", ",", "doorPoints", ",", "filteredDoorLines", ",", "lineColor", "=", "255", ")", "\n", "\n", "filteredIcons", "=", "[", "]", "\n", "filteredIconTypes", "=", "[", "]", "\n", "for", "iconIndex", ",", "iconVar", "in", "enumerate", "(", "i_r", ")", ":", "\n", "        ", "if", "iconVar", ".", "x", "<", "0.5", ":", "\n", "          ", "continue", "\n", "\n", "", "filteredIcons", ".", "append", "(", "icons", "[", "iconIndex", "]", ")", "\n", "iconType", "=", "-", "1", "\n", "for", "typeIndex", "in", "xrange", "(", "NUM_FINAL_ICONS", ")", ":", "\n", "          ", "if", "i_types", "[", "iconIndex", "]", "[", "typeIndex", "]", ".", "x", ">", "0.5", ":", "\n", "            ", "iconType", "=", "typeIndex", "\n", "break", "\n", "", "continue", "\n", "\n", "", "print", "(", "(", "'icon'", ",", "iconIndex", ",", "iconType", ",", "[", "iconPoints", "[", "pointIndex", "]", "[", ":", "2", "]", "for", "pointIndex", "in", "icons", "[", "iconIndex", "]", "]", ")", ")", "\n", "\n", "filteredIconTypes", ".", "append", "(", "iconType", ")", "\n", "continue", "\n", "\n", "\n", "\n", "# print(icons)", "\n", "# print(conflictIconWallPairs)", "\n", "# print(filteredIcons)", "\n", "# exit(1)", "\n", "\n", "#adjustPoints(iconPoints, filteredIconLines)", "\n", "#drawLines('test/lines_results_icon.png', width, height, iconPoints, filteredIconLines)", "\n", "", "drawRectangles", "(", "'test/result_icon.png'", ",", "width", ",", "height", ",", "iconPoints", ",", "filteredIcons", ",", "filteredIconTypes", ")", "\n", "\n", "\n", "#resultImage = drawLines('', width, height, doorPoints, filteredDoorLines, [], resultImage, lineWidth=3, lineColor=0)", "\n", "#resultImage = drawRectangles('', width, height, iconPoints, filteredIcons, filteredIconTypes, 2, resultImage)", "\n", "#cv2.imwrite('test/result.png', resultImage)", "\n", "\n", "\n", "filteredWallPoints", "=", "[", "]", "\n", "filteredWallPointLabels", "=", "[", "]", "\n", "orientationMap", "=", "{", "}", "\n", "for", "pointType", ",", "orientationOrientations", "in", "enumerate", "(", "POINT_ORIENTATIONS", ")", ":", "\n", "        ", "for", "orientation", ",", "orientations", "in", "enumerate", "(", "orientationOrientations", ")", ":", "\n", "          ", "orientationMap", "[", "orientations", "]", "=", "orientation", "\n", "\n", "", "", "for", "pointIndex", ",", "point", "in", "enumerate", "(", "wallPoints", ")", ":", "\n", "#if w_p[pointIndex].x < 0.5:", "\n", "#continue", "\n", "\n", "        ", "orientations", "=", "[", "]", "\n", "orientationLines", "=", "{", "}", "\n", "for", "orientation", ",", "lines", "in", "wallPointOrientationLinesMap", "[", "pointIndex", "]", ".", "iteritems", "(", ")", ":", "\n", "          ", "orientationLine", "=", "-", "1", "\n", "for", "lineIndex", "in", "lines", ":", "\n", "            ", "if", "w_l", "[", "lineIndex", "]", ".", "x", ">", "0.5", ":", "\n", "              ", "orientations", ".", "append", "(", "orientation", ")", "\n", "orientationLines", "[", "orientation", "]", "=", "lineIndex", "\n", "break", "\n", "", "continue", "\n", "", "continue", "\n", "\n", "", "if", "len", "(", "orientations", ")", "==", "0", ":", "\n", "          ", "continue", "\n", "\n", "#print((pointIndex, orientationLines))", "\n", "\n", "", "if", "len", "(", "orientations", ")", "<", "len", "(", "wallPointOrientationLinesMap", "[", "pointIndex", "]", ")", ":", "\n", "          ", "print", "(", "'invalid point'", ",", "pointIndex", ",", "orientations", ",", "wallPointOrientationLinesMap", "[", "pointIndex", "]", ")", "\n", "print", "(", "wallPoints", "[", "pointIndex", "]", ")", "\n", "wallPoints", "[", "pointIndex", "]", "[", "2", "]", "=", "len", "(", "orientations", ")", "-", "1", "\n", "orientations", "=", "tuple", "(", "orientations", ")", "\n", "if", "orientations", "not", "in", "orientationMap", ":", "\n", "            ", "continue", "\n", "", "wallPoints", "[", "pointIndex", "]", "[", "3", "]", "=", "orientationMap", "[", "orientations", "]", "\n", "print", "(", "wallPoints", "[", "pointIndex", "]", ")", "\n", "exit", "(", "1", ")", "\n", "pass", "\n", "\n", "", "filteredWallPoints", ".", "append", "(", "wallPoints", "[", "pointIndex", "]", ")", "\n", "filteredWallPointLabels", ".", "append", "(", "wallPointLabels", "[", "pointIndex", "]", ")", "\n", "continue", "\n", "\n", "\n", "", "writePoints", "(", "filteredWallPoints", ",", "filteredWallPointLabels", ")", "\n", "\n", "\n", "with", "open", "(", "'test/floorplan.txt'", ",", "'w'", ")", "as", "result_file", ":", "\n", "        ", "result_file", ".", "write", "(", "str", "(", "width", ")", "+", "'\\t'", "+", "str", "(", "height", ")", "+", "'\\n'", ")", "\n", "result_file", ".", "write", "(", "str", "(", "len", "(", "filteredWallLines", ")", ")", "+", "'\\n'", ")", "\n", "for", "wallIndex", ",", "wall", "in", "enumerate", "(", "filteredWallLines", ")", ":", "\n", "          ", "point_1", "=", "wallPoints", "[", "wall", "[", "0", "]", "]", "\n", "point_2", "=", "wallPoints", "[", "wall", "[", "1", "]", "]", "\n", "\n", "result_file", ".", "write", "(", "str", "(", "point_1", "[", "0", "]", ")", "+", "'\\t'", "+", "str", "(", "point_1", "[", "1", "]", ")", "+", "'\\t'", ")", "\n", "result_file", ".", "write", "(", "str", "(", "point_2", "[", "0", "]", ")", "+", "'\\t'", "+", "str", "(", "point_2", "[", "1", "]", ")", "+", "'\\t'", ")", "\n", "result_file", ".", "write", "(", "str", "(", "filteredWallLabels", "[", "wallIndex", "]", "[", "0", "]", ")", "+", "'\\t'", "+", "str", "(", "filteredWallLabels", "[", "wallIndex", "]", "[", "1", "]", ")", "+", "'\\n'", ")", "\n", "\n", "", "for", "doorIndex", ",", "door", "in", "enumerate", "(", "filteredDoorLines", ")", ":", "\n", "          ", "point_1", "=", "doorPoints", "[", "door", "[", "0", "]", "]", "\n", "point_2", "=", "doorPoints", "[", "door", "[", "1", "]", "]", "\n", "\n", "result_file", ".", "write", "(", "str", "(", "point_1", "[", "0", "]", ")", "+", "'\\t'", "+", "str", "(", "point_1", "[", "1", "]", ")", "+", "'\\t'", ")", "\n", "result_file", ".", "write", "(", "str", "(", "point_2", "[", "0", "]", ")", "+", "'\\t'", "+", "str", "(", "point_2", "[", "1", "]", ")", "+", "'\\t'", ")", "\n", "result_file", ".", "write", "(", "'door\\t'", ")", "\n", "result_file", ".", "write", "(", "str", "(", "filteredDoorTypes", "[", "doorIndex", "]", "+", "1", ")", "+", "'\\t1\\n'", ")", "\n", "\n", "", "for", "iconIndex", ",", "icon", "in", "enumerate", "(", "filteredIcons", ")", ":", "\n", "          ", "point_1", "=", "iconPoints", "[", "icon", "[", "0", "]", "]", "\n", "point_2", "=", "iconPoints", "[", "icon", "[", "1", "]", "]", "\n", "point_3", "=", "iconPoints", "[", "icon", "[", "2", "]", "]", "\n", "point_4", "=", "iconPoints", "[", "icon", "[", "3", "]", "]", "\n", "\n", "x_1", "=", "int", "(", "(", "point_1", "[", "0", "]", "+", "point_3", "[", "0", "]", ")", "/", "2", ")", "\n", "x_2", "=", "int", "(", "(", "point_2", "[", "0", "]", "+", "point_4", "[", "0", "]", ")", "/", "2", ")", "\n", "y_1", "=", "int", "(", "(", "point_1", "[", "1", "]", "+", "point_2", "[", "1", "]", ")", "/", "2", ")", "\n", "y_2", "=", "int", "(", "(", "point_3", "[", "1", "]", "+", "point_4", "[", "1", "]", ")", "/", "2", ")", "\n", "\n", "result_file", ".", "write", "(", "str", "(", "x_1", ")", "+", "'\\t'", "+", "str", "(", "y_1", ")", "+", "'\\t'", ")", "\n", "result_file", ".", "write", "(", "str", "(", "x_2", ")", "+", "'\\t'", "+", "str", "(", "y_2", ")", "+", "'\\t'", ")", "\n", "result_file", ".", "write", "(", "iconNumberNameMap", "[", "filteredIconTypes", "[", "iconIndex", "]", "]", "+", "'\\t'", ")", "\n", "#result_file.write(str(iconNumberStyleMap[filteredIconTypes[iconIndex]]) + '\\t')", "\n", "result_file", ".", "write", "(", "'1\\t'", ")", "\n", "result_file", ".", "write", "(", "'1\\n'", ")", "\n", "\n", "", "result_file", ".", "close", "(", ")", "\n", "\n", "\n", "", "if", "len", "(", "filteredDoorLines", ")", ">", "0", ":", "\n", "        ", "writeDoors", "(", "doorPoints", ",", "filteredDoorLines", ",", "filteredDoorTypes", ")", "\n", "pass", "\n", "", "else", ":", "\n", "        ", "try", ":", "\n", "          ", "os", ".", "remove", "(", "'test/doors_out.txt'", ")", "\n", "", "except", "OSError", ":", "\n", "          ", "pass", "\n", "\n", "", "", "if", "len", "(", "filteredIcons", ")", ">", "0", ":", "\n", "        ", "writeIcons", "(", "iconPoints", ",", "filteredIcons", ",", "filteredIconTypes", ")", "\n", "pass", "\n", "", "else", ":", "\n", "        ", "try", ":", "\n", "          ", "os", ".", "remove", "(", "'test/icons_out.txt'", ")", "\n", "", "except", "OSError", ":", "\n", "          ", "pass", "\n", "", "pass", "\n", "\n", "\n", "\n", "", "", "elif", "model", ".", "status", "!=", "GRB", ".", "Status", ".", "INFEASIBLE", ":", "\n", "      ", "print", "(", "'Optimization was stopped with status %d'", "%", "model", ".", "status", ")", "\n", "return", "{", "}", "\n", "", "else", ":", "\n", "      ", "print", "(", "'infeasible'", ")", "\n", "#model.ComputeIIS()", "\n", "#model.write(\"test/model.ilp\")", "\n", "return", "{", "}", "\n", "pass", "\n", "\n", "", "", "except", "GurobiError", "as", "e", ":", "\n", "    ", "print", "(", "'Error code '", "+", "str", "(", "e", ".", "errno", ")", "+", "\": \"", "+", "str", "(", "e", ")", ")", "\n", "return", "{", "}", "\n", "pass", "\n", "", "except", "AttributeError", ":", "\n", "    ", "print", "(", "'Encountered an attribute error'", ")", "\n", "return", "{", "}", "\n", "pass", "\n", "\n", "", "result_dict", "=", "{", "'wall'", ":", "[", "wallPoints", ",", "filteredWallLines", ",", "filteredWallLabels", "]", ",", "'door'", ":", "[", "doorPoints", ",", "filteredDoorLines", ",", "[", "]", "]", ",", "'icon'", ":", "[", "iconPoints", ",", "filteredIcons", ",", "filteredIconTypes", "]", "}", "\n", "return", "result_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.RecordWriterTango.PntMapper.__init__": [[113, 118], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "start", ",", "size", ",", "newstart", ",", "newsize", ")", ":", "\n", "        ", "self", ".", "start", "=", "start", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "newsize", "=", "newsize", "\n", "self", ".", "newstart", "=", "newstart", "\n", "", "def", "map_pnts", "(", "self", ",", "x", ",", "y", ")", ":", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.RecordWriterTango.PntMapper.map_pnts": [[118, 121], ["None"], "methods", ["None"], ["", "def", "map_pnts", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "#        print(self.size)", "\n", "        ", "return", "(", "x", "-", "self", ".", "start", "[", "0", "]", ")", "/", "(", "self", ".", "size", "[", "0", "]", "-", "1", ")", "*", "(", "self", ".", "newsize", "[", "0", "]", "-", "1", ")", "+", "self", ".", "newstart", "[", "0", "]", ",", "(", "y", "-", "self", ".", "start", "[", "1", "]", ")", "/", "(", "self", ".", "size", "[", "1", "]", "-", "1", ")", "*", "(", "self", ".", "newsize", "[", "1", "]", "-", "1", ")", "+", "self", ".", "newstart", "[", "1", "]", "\n", "", "", "def", "pnts_to_heatmap_transformation_matrix", "(", "pnts", ",", "is_binary", ",", "label", ",", "transform", "=", "None", ",", "img", "=", "None", ",", "bd_box", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.RecordWriterTango.RecordWriterTango.__init__": [[176, 212], ["RecordWriterTango.RecordWriterTango.loadImagePaths", "len", "RecordWriterTango.RecordWriterTango.loadLabelMap", "floorplan_utils.getRoomLabelMap", "tensorflow.python_io.TFRecordWriter", "RecordWriterTango.RecordWriterTango.writer.close", "os.path.basename().rstrip", "os.path.basename().rstrip", "os.path.basename().rstrip", "os.path.basename().rstrip", "RecordWriterTango.RecordWriterTango.writeExample", "os.path.basename", "os.path.basename", "os.path.basename", "os.path.basename", "int", "int"], "methods", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.RecordWriterTango.RecordWriterTango.loadImagePaths", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.RecordWriterTango.RecordWriterTango.loadLabelMap", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.getRoomLabelMap", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.RecordWriterTango.RecordWriterTango.writeExample"], ["    ", "def", "__init__", "(", "self", ",", "options", ")", ":", "\n", "#super(RecordWriterTango, self).__init__()", "\n", "        ", "self", ".", "dataPath", "=", "'data/'", "\n", "self", ".", "stopped", "=", "False", "\n", "self", ".", "split", "=", "options", ".", "task", "\n", "self", ".", "imagePaths", "=", "self", ".", "loadImagePaths", "(", ")", "\n", "\n", "self", ".", "numImages", "=", "len", "(", "self", ".", "imagePaths", ")", "\n", "self", ".", "numPoints", "=", "options", ".", "numPoints", "\n", "self", ".", "numInputChannels", "=", "options", ".", "numInputChannels", "\n", "\n", "self", ".", "labelMap", "=", "self", ".", "loadLabelMap", "(", ")", "\n", "self", ".", "gap", "=", "3", "\n", "\n", "self", ".", "roomLabelMap", "=", "getRoomLabelMap", "(", ")", "\n", "\n", "# numTrainingImages = int(round(self.numImages * 0.9))", "\n", "# if options.task == 'train':", "\n", "#     self.imagePaths = self.imagePaths[:numTrainingImages]", "\n", "# else:", "\n", "#     self.imagePaths = self.imagePaths[numTrainingImages:]", "\n", "#     pass", "\n", "\n", "if", "options", ".", "task", "==", "'train'", ":", "\n", "            ", "self", ".", "imagePaths", "=", "[", "imagePath", "for", "imagePath", "in", "self", ".", "imagePaths", "if", "int", "(", "imagePath", "[", "5", ":", "]", ")", "not", "in", "TEST_INDICES", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "imagePaths", "=", "[", "imagePath", "for", "imagePath", "in", "self", ".", "imagePaths", "if", "int", "(", "imagePath", "[", "5", ":", "]", ")", "in", "TEST_INDICES", "]", "\n", "pass", "\n", "\n", "", "filename", "=", "os", ".", "path", ".", "basename", "(", "__file__", ")", ".", "rstrip", "(", "'.py'", ")", "[", "12", ":", "]", "\n", "self", ".", "writer", "=", "tf", ".", "python_io", ".", "TFRecordWriter", "(", "'data/'", "+", "filename", "+", "'_'", "+", "options", ".", "task", "+", "'.tfrecords'", ")", "\n", "for", "imagePath", "in", "self", ".", "imagePaths", ":", "\n", "            ", "self", ".", "writeExample", "(", "imagePath", ")", "\n", "continue", "\n", "", "self", ".", "writer", ".", "close", "(", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.RecordWriterTango.RecordWriterTango.getNumBatchesTesting": [[213, 217], ["None"], "methods", ["None"], ["", "def", "getNumBatchesTesting", "(", "self", ")", ":", "\n", "#print(self.numBatches)", "\n", "#print(self.numBatchesTraining)", "\n", "        ", "return", "self", ".", "numBatches", "-", "self", ".", "numBatchesTraining", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.RecordWriterTango.RecordWriterTango.loadImagePaths": [[218, 233], ["os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "list", "glob.glob", "len", "scene_ids.append", "print"], "methods", ["None"], ["", "def", "loadImagePaths", "(", "self", ")", ":", "\n", "        ", "scene_ids", "=", "[", "]", "\n", "for", "scene_id", "in", "os", ".", "listdir", "(", "ROOT_FOLDER", ")", ":", "\n", "            ", "annotation_filename", "=", "ROOT_FOLDER", "+", "scene_id", "+", "'/annotation/floorplan.txt'", "\n", "exists1", "=", "os", ".", "path", ".", "exists", "(", "annotation_filename", ")", "\n", "filename_glob", "=", "ROOT_FOLDER", "+", "scene_id", "+", "'/'", "+", "'dataset/mesh/*.obj'", "\n", "filename", "=", "list", "(", "glob", ".", "glob", "(", "filename_glob", ")", ")", "\n", "exists2", "=", "len", "(", "filename", ")", ">", "0", "\n", "if", "exists1", "and", "exists2", ":", "\n", "                ", "scene_ids", ".", "append", "(", "scene_id", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "scene_id", ")", "\n", "pass", "\n", "", "continue", "\n", "", "return", "scene_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.RecordWriterTango.RecordWriterTango.loadLabelMap": [[234, 262], ["floorplan_utils.getRoomLabelMap", "floorplan_utils.getIconLabelMap", "print", "exit", "print", "exit"], "methods", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.getRoomLabelMap", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.getIconLabelMap"], ["", "def", "loadLabelMap", "(", "self", ")", ":", "\n", "        ", "roomMap", "=", "getRoomLabelMap", "(", ")", "\n", "\n", "iconMap", "=", "getIconLabelMap", "(", ")", "\n", "\n", "# iconMap['washing_basin'] = iconMap['washbasin']", "\n", "# iconMap['sofa'] = 6", "\n", "# iconMap['chair'] = 5", "\n", "# iconMap['TV'] = iconMap['tv']", "\n", "#for icon in ['cooking_counter', 'bathtub', 'toilet', 'washing_basin', 'sofa', 'cabinet', 'bed', 'table', 'desk', 'refrigerator', 'TV', 'entrance', 'chair']:", "\n", "\n", "labelMap", "=", "{", "}", "\n", "for", "icon", "in", "[", "'cooking_counter'", ",", "'bathtub'", ",", "'toilet'", ",", "'washing_basin'", ",", "'sofa'", ",", "'cabinet'", ",", "'bed'", ",", "'table'", ",", "'desk'", ",", "'refrigerator'", ",", "'TV'", ",", "'entrance'", ",", "'chair'", "]", ":", "\n", "            ", "if", "icon", "not", "in", "iconMap", ":", "\n", "                ", "print", "(", "icon", ")", "\n", "exit", "(", "1", ")", "\n", "", "labelMap", "[", "icon", "]", "=", "(", "'icons'", ",", "iconMap", "[", "icon", "]", ")", "\n", "continue", "\n", "", "for", "room", "in", "[", "'living_room'", ",", "'kitchen'", ",", "'bedroom'", ",", "'bathroom'", ",", "'office'", ",", "'closet'", ",", "'balcony'", ",", "'corridor'", ",", "'dining_room'", ",", "'stairs'", "]", ":", "\n", "            ", "if", "room", "not", "in", "roomMap", ":", "\n", "                ", "print", "(", "room", ")", "\n", "exit", "(", "1", ")", "\n", "", "labelMap", "[", "room", "]", "=", "(", "'rooms'", ",", "roomMap", "[", "room", "]", ")", "\n", "continue", "\n", "\n", "", "labelMap", "[", "'door'", "]", "=", "11", "\n", "labelMap", "[", "'window'", "]", "=", "12", "\n", "return", "labelMap", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.RecordWriterTango.RecordWriterTango.writeExample": [[263, 510], ["RecordWriterTango.load_pnt", "numpy.array", "torchfile.load", "RecordWriterTango.getZRotationMatrix", "xrange", "numpy.concatenate", "numpy.tensordot", "numpy.tensordot.min", "numpy.tensordot.max", "[].max", "numpy.clip", "numpy.zeros", "RecordWriterTango.RecordWriterTango.projectIndices", "numpy.zeros", "skimage.measure.label", "floorplan_utils.lines2Corners", "enumerate", "skimage.measure.label.min", "numpy.zeros", "semantics.iteritems", "xrange", "numpy.zeros", "numpy.array", "len", "print", "tensorflow.train.Example", "RecordWriterTango.RecordWriterTango.writer.write", "list", "xrange", "numpy.concatenate", "numpy.arange", "numpy.concatenate", "numpy.round().astype", "numpy.concatenate", "max", "open", "cv2.line", "numpy.concatenate.append", "cv2.line", "cv2.line", "skimage.measure.label.min", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "numpy.load().reshape", "numpy.load().reshape", "enumerate", "numpy.zeros", "cv2.imwrite", "cv2.imwrite", "cv2.imwrite", "cv2.imwrite", "cv2.imwrite", "exit", "tensorflow.train.Example.SerializeToString", "glob.glob", "numpy.zeros", "numpy.arange", "numpy.random.shuffle", "min", "line.split.split.split", "floorplan_utils.calcLineDirection", "enumerate", "skimage.measure.label.max", "print", "print", "numpy.concatenate", "sum", "utils.drawDensityImage", "utils.drawDensityImage", "utils.drawSegmentationImage", "utils.drawSegmentationImage", "utils.drawSegmentationImage", "cv2.imwrite", "cv2.imwrite", "exit", "numpy.concatenate", "tensorflow.train.Features", "max", "numpy.ones", "numpy.round", "numpy.arange().reshape", "round", "walls.append", "int", "int", "int", "int", "int", "int", "numpy.concatenate.append", "int", "int", "int", "int", "int", "int", "int", "int", "cv2.rectangle", "numpy.concatenate.append", "numpy.concatenate.append", "numpy.concatenate.append", "numpy.concatenate.append", "skimage.measure.label.max", "numpy.load", "numpy.load", "zip", "cv2.resize", "image_features[].append", "utils.getDensity", "utils.getDensityFromIndices", "cv2.imread", "cv2.imread", "numpy.abs", "doors.append", "round", "round", "round", "round", "floorplan_utils.calcLineDirection", "round", "round", "round", "round", "round", "round", "round", "round", "round", "round", "print", "exit", "print", "exit", "cv2.resize.reshape().mean().reshape", "numpy.zeros", "numpy.random.choice", "numpy.arange", "windows.append", "semantics[].append", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "RecordWriterTango._bytes_feature", "RecordWriterTango._float_feature", "RecordWriterTango._int64_feature", "RecordWriterTango._int64_feature", "RecordWriterTango._int64_feature", "RecordWriterTango._bytes_feature", "RecordWriterTango._bytes_feature", "RecordWriterTango._float_feature", "RecordWriterTango._int64_feature", "RecordWriterTango.RecordWriterTango.writeExample.transformPoint"], "methods", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.RecordWriterTango.load_pnt", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.RecordWriterTango.getZRotationMatrix", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.projectIndices", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.lines2Corners", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDirection", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.drawDensityImage", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.drawDensityImage", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.drawSegmentationImage", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.drawSegmentationImage", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.drawSegmentationImage", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.getDensity", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.getDensityFromIndices", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDirection", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.RecordWriterTango._bytes_feature", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.RecordWriterTango._float_feature", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.RecordWriterTango._int64_feature", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.RecordWriterTango._int64_feature", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.RecordWriterTango._int64_feature", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.RecordWriterTango._bytes_feature", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.RecordWriterTango._bytes_feature", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.RecordWriterTango._float_feature", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.RecordWriterTango._int64_feature"], ["", "def", "writeExample", "(", "self", ",", "scene_id", ")", ":", "\n", "        ", "filename_glob", "=", "ROOT_FOLDER", "+", "scene_id", "+", "'/'", "+", "'dataset/mesh/*.obj'", "\n", "filename", "=", "list", "(", "glob", ".", "glob", "(", "filename_glob", ")", ")", "[", "0", "]", "\n", "points", "=", "load_pnt", "(", "filename", ")", "\n", "points", "=", "np", ".", "array", "(", "points", ")", "\n", "\n", "\n", "#segmentation = segmentation[sampledInds[:NUM_POINTS]]", "\n", "filename", "=", "ROOT_FOLDER", "+", "scene_id", "+", "'/annotation/metadata.t7'", "\n", "metadata", "=", "torchfile", ".", "load", "(", "filename", ")", "\n", "topDownViewTransformation", "=", "metadata", "[", "\"topDownTransformation\"", "]", "\n", "\n", "#degree = metadata[\"topDownViewAngle\"]", "\n", "rotMat", "=", "getZRotationMatrix", "(", "-", "metadata", "[", "\"topDownViewAngle\"", "]", ")", "\n", "#print(rotMat, topDownViewTransformation)", "\n", "#exit(1)", "\n", "\n", "#XYZ_rotated = np.transpose(np.dot(rotMat, np.transpose(points[:, :3])))", "\n", "#XYZ = np.tensordot(np.concatenate([points[:, :3], np.ones((points.shape[0], 1))], axis=1), topDownViewTransformation, axes=((1), (1)))", "\n", "#XYZ[:, 2] = points[:, 2]", "\n", "\n", "#ratio_1 = (XYZ[:, 0].max() - XYZ[:, 0].min()) / (XYZ_rotated[:, 0].max() - XYZ_rotated[:, 0].min())", "\n", "#ratio_2 = (XYZ[:, 1].max() - XYZ[:, 1].min()) / (XYZ_rotated[:, 1].max() - XYZ_rotated[:, 1].min())", "\n", "\n", "#XYZ[2, 2] *= np.sqrt(ratio_1 * ratio_2)", "\n", "\n", "#ratio = pow(np.abs(rotMat[0][0] / topDownViewTransformation[0][0] * rotMat[1][0] / topDownViewTransformation[1][0] * rotMat[0][1] / topDownViewTransformation[0][1] * rotMat[1][1] / topDownViewTransformation[1][1]), 0.25)", "\n", "ratio", "=", "0", "\n", "for", "i", "in", "xrange", "(", "2", ")", ":", "\n", "            ", "for", "j", "in", "xrange", "(", "2", ")", ":", "\n", "                ", "if", "rotMat", "[", "i", "]", "[", "j", "]", "!=", "0", ":", "\n", "                    ", "ratio", "=", "max", "(", "ratio", ",", "np", ".", "abs", "(", "topDownViewTransformation", "[", "i", "]", "[", "j", "]", "/", "rotMat", "[", "i", "]", "[", "j", "]", ")", ")", "\n", "pass", "\n", "", "continue", "\n", "", "continue", "\n", "\n", "", "globalTransformation", "=", "topDownViewTransformation", "\n", "globalTransformation", "[", "2", ",", "2", "]", "=", "ratio", "\n", "globalTransformation", "[", "2", ",", "3", "]", "=", "0", "\n", "globalTransformation", "=", "np", ".", "concatenate", "(", "[", "globalTransformation", ",", "np", ".", "zeros", "(", "(", "1", ",", "4", ")", ")", "]", ",", "axis", "=", "0", ")", "\n", "globalTransformation", "[", "3", ",", "3", "]", "=", "1", "\n", "\n", "\n", "XYZ", "=", "np", ".", "tensordot", "(", "np", ".", "concatenate", "(", "[", "points", "[", ":", ",", ":", "3", "]", ",", "np", ".", "ones", "(", "(", "points", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "]", ",", "axis", "=", "1", ")", ",", "globalTransformation", ",", "axes", "=", "(", "(", "1", ")", ",", "(", "1", ")", ")", ")", "\n", "XYZ", "=", "XYZ", "[", ":", ",", ":", "3", "]", "/", "XYZ", "[", ":", ",", "3", ":", "]", "\n", "\n", "\n", "mins", "=", "XYZ", ".", "min", "(", "0", ",", "keepdims", "=", "True", ")", "\n", "maxs", "=", "XYZ", ".", "max", "(", "0", ",", "keepdims", "=", "True", ")", "\n", "maxRange", "=", "(", "maxs", "-", "mins", ")", "[", ":", ",", ":", "2", "]", ".", "max", "(", ")", "\n", "padding", "=", "maxRange", "*", "0.05", "\n", "mins", "=", "(", "maxs", "+", "mins", ")", "/", "2", "-", "maxRange", "/", "2", "\n", "mins", "-=", "padding", "\n", "maxRange", "+=", "padding", "*", "2", "\n", "minXY", "=", "mins", "[", ":", ",", ":", "2", "]", "\n", "\n", "#XYZ[:, :2] = (XYZ[:, :2] - minXY) / maxRange", "\n", "XYZ", "=", "(", "XYZ", "-", "mins", ")", "/", "maxRange", "\n", "points", "[", ":", ",", ":", "3", "]", "=", "XYZ", "\n", "\n", "originalWidth", "=", "700.", "\n", "\n", "if", "points", ".", "shape", "[", "0", "]", "<", "NUM_POINTS", ":", "\n", "            ", "indices", "=", "np", ".", "arange", "(", "points", ".", "shape", "[", "0", "]", ")", "\n", "points", "=", "np", ".", "concatenate", "(", "[", "points", ",", "points", "[", "np", ".", "random", ".", "choice", "(", "indices", ",", "NUM_POINTS", "-", "points", ".", "shape", "[", "0", "]", ")", "]", "]", ",", "axis", "=", "0", ")", "\n", "", "elif", "points", ".", "shape", "[", "0", "]", ">", "NUM_POINTS", ":", "\n", "            ", "sampledInds", "=", "np", ".", "arange", "(", "points", ".", "shape", "[", "0", "]", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "sampledInds", ")", "\n", "points", "=", "points", "[", "sampledInds", "[", ":", "NUM_POINTS", "]", "]", "\n", "pass", "\n", "\n", "", "points", "[", ":", ",", "3", ":", "]", "=", "points", "[", ":", ",", "3", ":", "]", "/", "255", "-", "0.5", "\n", "\n", "coordinates", "=", "np", ".", "clip", "(", "np", ".", "round", "(", "points", "[", ":", ",", ":", "2", "]", "*", "HEIGHT", ")", ".", "astype", "(", "np", ".", "int32", ")", ",", "0", ",", "HEIGHT", "-", "1", ")", "\n", "\n", "self", ".", "indicesMaps", "=", "np", ".", "zeros", "(", "(", "NUM_POINTS", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "self", ".", "projectIndices", "(", "np", ".", "concatenate", "(", "[", "coordinates", ",", "np", ".", "arange", "(", "NUM_POINTS", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "]", ",", "axis", "=", "1", ")", ",", "0", ",", "WIDTH", ",", "0", ",", "HEIGHT", ")", "\n", "\n", "\n", "filename", "=", "ROOT_FOLDER", "+", "scene_id", "+", "'/annotation/floorplan.txt'", "\n", "walls", "=", "[", "]", "\n", "doors", "=", "[", "]", "\n", "windows", "=", "[", "]", "\n", "semantics", "=", "{", "}", "\n", "def", "transformPoint", "(", "v", ",", "c", ")", ":", "\n", "            ", "return", "max", "(", "min", "(", "round", "(", "(", "float", "(", "v", ")", "-", "minXY", "[", "0", ",", "c", "]", ")", "/", "maxRange", "*", "WIDTH", ")", ",", "WIDTH", "-", "1", ")", ",", "0", ")", "\n", "\n", "", "with", "open", "(", "filename", ")", "as", "info_file", ":", "\n", "            ", "line_index", "=", "0", "\n", "for", "line", "in", "info_file", ":", "\n", "                ", "line", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "if", "line", "[", "4", "]", "==", "'wall'", ":", "\n", "                    ", "walls", ".", "append", "(", "(", "(", "transformPoint", "(", "line", "[", "0", "]", ",", "0", ")", ",", "transformPoint", "(", "line", "[", "1", "]", ",", "1", ")", ")", ",", "(", "transformPoint", "(", "line", "[", "2", "]", ",", "0", ")", ",", "transformPoint", "(", "line", "[", "3", "]", ",", "1", ")", ")", ")", ")", "\n", "", "elif", "line", "[", "4", "]", "==", "'door'", ":", "\n", "                    ", "doors", ".", "append", "(", "(", "(", "transformPoint", "(", "line", "[", "0", "]", ",", "0", ")", ",", "transformPoint", "(", "line", "[", "1", "]", ",", "1", ")", ")", ",", "(", "transformPoint", "(", "line", "[", "2", "]", ",", "0", ")", ",", "transformPoint", "(", "line", "[", "3", "]", ",", "1", ")", ")", ")", ")", "\n", "", "elif", "line", "[", "4", "]", "==", "'window'", ":", "\n", "                    ", "windows", ".", "append", "(", "(", "(", "transformPoint", "(", "line", "[", "0", "]", ",", "0", ")", ",", "transformPoint", "(", "line", "[", "1", "]", ",", "1", ")", ")", ",", "(", "transformPoint", "(", "line", "[", "2", "]", ",", "0", ")", ",", "transformPoint", "(", "line", "[", "3", "]", ",", "1", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "                    ", "if", "line", "[", "4", "]", "not", "in", "semantics", ":", "\n", "                        ", "semantics", "[", "line", "[", "4", "]", "]", "=", "[", "]", "\n", "pass", "\n", "", "semantics", "[", "line", "[", "4", "]", "]", ".", "append", "(", "(", "(", "transformPoint", "(", "line", "[", "0", "]", ",", "0", ")", ",", "transformPoint", "(", "line", "[", "1", "]", ",", "1", ")", ")", ",", "(", "transformPoint", "(", "line", "[", "2", "]", ",", "0", ")", ",", "transformPoint", "(", "line", "[", "3", "]", ",", "1", ")", ")", ")", ")", "\n", "pass", "\n", "", "continue", "\n", "", "pass", "\n", "\n", "\n", "", "roomSegmentation", "=", "np", ".", "zeros", "(", "(", "HEIGHT", ",", "WIDTH", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "line", "in", "walls", ":", "\n", "            ", "cv2", ".", "line", "(", "roomSegmentation", ",", "(", "int", "(", "round", "(", "line", "[", "0", "]", "[", "0", "]", ")", ")", ",", "int", "(", "round", "(", "line", "[", "0", "]", "[", "1", "]", ")", ")", ")", ",", "(", "int", "(", "round", "(", "line", "[", "1", "]", "[", "0", "]", ")", ")", ",", "int", "(", "round", "(", "line", "[", "1", "]", "[", "1", "]", ")", ")", ")", ",", "color", "=", "15", "+", "calcLineDirection", "(", "line", ")", ",", "thickness", "=", "self", ".", "gap", ")", "\n", "#cv2.line(roomSegmentation, (int(round(line[0][0])), int(round(line[0][1]))), (int(round(line[1][0])), int(round(line[1][1]))), color = 15, thickness=self.gap)", "\n", "continue", "\n", "\n", "", "rooms", "=", "measure", ".", "label", "(", "roomSegmentation", "==", "0", ",", "background", "=", "0", ")", "\n", "\n", "\n", "corners", "=", "lines2Corners", "(", "walls", ",", "gap", "=", "self", ".", "gap", ")", "\n", "#corner_gt = np.zeros((HEIGHT, WIDTH), dtype=np.uint8)", "\n", "corner_gt", "=", "[", "]", "\n", "for", "corner", "in", "corners", ":", "\n", "#corner_gt[int(round(corner[0][1])), int(round(corner[0][0]))] = corner[1] + 1", "\n", "            ", "corner_gt", ".", "append", "(", "(", "int", "(", "round", "(", "corner", "[", "0", "]", "[", "0", "]", ")", ")", ",", "int", "(", "round", "(", "corner", "[", "0", "]", "[", "1", "]", ")", ")", ",", "corner", "[", "1", "]", "+", "1", ")", ")", "\n", "continue", "\n", "\n", "", "openingCornerMap", "=", "[", "[", "3", ",", "1", "]", ",", "[", "0", ",", "2", "]", "]", "\n", "for", "openingType", ",", "openings", "in", "enumerate", "(", "[", "doors", ",", "windows", "]", ")", ":", "\n", "            ", "for", "opening", "in", "openings", ":", "\n", "                ", "direction", "=", "calcLineDirection", "(", "opening", ")", "\n", "for", "cornerIndex", ",", "corner", "in", "enumerate", "(", "opening", ")", ":", "\n", "#corner_gt[int(round(corner[1])), int(round(corner[0]))] = 14 + openingCornerMap[direction][cornerIndex]", "\n", "                    ", "corner_gt", ".", "append", "(", "(", "int", "(", "round", "(", "corner", "[", "0", "]", ")", ")", ",", "int", "(", "round", "(", "corner", "[", "1", "]", ")", ")", ",", "14", "+", "openingCornerMap", "[", "direction", "]", "[", "cornerIndex", "]", ")", ")", "\n", "continue", "\n", "", "continue", "\n", "", "continue", "\n", "\n", "\n", "", "wallIndex", "=", "rooms", ".", "min", "(", ")", "\n", "for", "pixel", "in", "[", "(", "0", ",", "0", ")", ",", "(", "0", ",", "HEIGHT", "-", "1", ")", ",", "(", "WIDTH", "-", "1", ",", "0", ")", ",", "(", "WIDTH", "-", "1", ",", "HEIGHT", "-", "1", ")", "]", ":", "\n", "            ", "backgroundIndex", "=", "rooms", "[", "pixel", "[", "1", "]", "]", "[", "pixel", "[", "0", "]", "]", "\n", "if", "backgroundIndex", "!=", "wallIndex", ":", "\n", "                ", "break", "\n", "", "continue", "\n", "\n", "", "iconSegmentation", "=", "np", ".", "zeros", "(", "(", "HEIGHT", ",", "WIDTH", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "line", "in", "doors", ":", "\n", "            ", "cv2", ".", "line", "(", "iconSegmentation", ",", "(", "int", "(", "round", "(", "line", "[", "0", "]", "[", "0", "]", ")", ")", ",", "int", "(", "round", "(", "line", "[", "0", "]", "[", "1", "]", ")", ")", ")", ",", "(", "int", "(", "round", "(", "line", "[", "1", "]", "[", "0", "]", ")", ")", ",", "int", "(", "round", "(", "line", "[", "1", "]", "[", "1", "]", ")", ")", ")", ",", "color", "=", "self", ".", "labelMap", "[", "'door'", "]", ",", "thickness", "=", "self", ".", "gap", "-", "1", ")", "\n", "continue", "\n", "", "for", "line", "in", "windows", ":", "\n", "            ", "cv2", ".", "line", "(", "iconSegmentation", ",", "(", "int", "(", "round", "(", "line", "[", "0", "]", "[", "0", "]", ")", ")", ",", "int", "(", "round", "(", "line", "[", "0", "]", "[", "1", "]", ")", ")", ")", ",", "(", "int", "(", "round", "(", "line", "[", "1", "]", "[", "0", "]", ")", ")", ",", "int", "(", "round", "(", "line", "[", "1", "]", "[", "1", "]", ")", ")", ")", ",", "color", "=", "self", ".", "labelMap", "[", "'window'", "]", ",", "thickness", "=", "self", ".", "gap", "-", "1", ")", "\n", "continue", "\n", "\n", "", "roomLabelMap", "=", "{", "}", "\n", "for", "semantic", ",", "items", "in", "semantics", ".", "iteritems", "(", ")", ":", "\n", "            ", "group", ",", "label", "=", "self", ".", "labelMap", "[", "semantic", "]", "\n", "for", "corners", "in", "items", ":", "\n", "                ", "if", "group", "==", "'icons'", ":", "\n", "                    ", "if", "label", "==", "0", ":", "\n", "                        ", "continue", "\n", "", "cv2", ".", "rectangle", "(", "iconSegmentation", ",", "(", "int", "(", "round", "(", "corners", "[", "0", "]", "[", "0", "]", ")", ")", ",", "int", "(", "round", "(", "corners", "[", "0", "]", "[", "1", "]", ")", ")", ")", ",", "(", "int", "(", "round", "(", "corners", "[", "1", "]", "[", "0", "]", ")", ")", ",", "int", "(", "round", "(", "corners", "[", "1", "]", "[", "1", "]", ")", ")", ")", ",", "color", "=", "label", ",", "thickness", "=", "-", "1", ")", "\n", "# corner_gt[int(round(corners[0][1])), int(round(corners[0][0]))] = 18 + 2", "\n", "# corner_gt[int(round(corners[1][1])), int(round(corners[0][0]))] = 18 + 1", "\n", "# corner_gt[int(round(corners[0][1])), int(round(corners[1][0]))] = 18 + 3", "\n", "# corner_gt[int(round(corners[1][1])), int(round(corners[1][0]))] = 18 + 0", "\n", "corner_gt", ".", "append", "(", "(", "int", "(", "round", "(", "corners", "[", "0", "]", "[", "0", "]", ")", ")", ",", "int", "(", "round", "(", "corners", "[", "0", "]", "[", "1", "]", ")", ")", ",", "18", "+", "2", ")", ")", "\n", "corner_gt", ".", "append", "(", "(", "int", "(", "round", "(", "corners", "[", "0", "]", "[", "0", "]", ")", ")", ",", "int", "(", "round", "(", "corners", "[", "1", "]", "[", "1", "]", ")", ")", ",", "18", "+", "1", ")", ")", "\n", "corner_gt", ".", "append", "(", "(", "int", "(", "round", "(", "corners", "[", "1", "]", "[", "0", "]", ")", ")", ",", "int", "(", "round", "(", "corners", "[", "0", "]", "[", "1", "]", ")", ")", ",", "18", "+", "3", ")", ")", "\n", "corner_gt", ".", "append", "(", "(", "int", "(", "round", "(", "corners", "[", "1", "]", "[", "0", "]", ")", ")", ",", "int", "(", "round", "(", "corners", "[", "1", "]", "[", "1", "]", ")", ")", ",", "18", "+", "0", ")", ")", "\n", "", "else", ":", "\n", "                    ", "roomIndex", "=", "rooms", "[", "int", "(", "round", "(", "(", "corners", "[", "0", "]", "[", "1", "]", "+", "corners", "[", "1", "]", "[", "1", "]", ")", "/", "2", ")", ")", "]", "[", "int", "(", "round", "(", "(", "corners", "[", "0", "]", "[", "0", "]", "+", "corners", "[", "1", "]", "[", "0", "]", ")", "/", "2", ")", ")", "]", "\n", "if", "roomIndex", "==", "wallIndex", "or", "roomIndex", "==", "backgroundIndex", ":", "\n", "                        ", "print", "(", "'label on background'", ")", "\n", "exit", "(", "1", ")", "\n", "pass", "\n", "", "if", "roomIndex", "in", "roomLabelMap", ":", "\n", "                        ", "print", "(", "'room has more than one labels'", ",", "label", ")", "\n", "exit", "(", "1", ")", "\n", "pass", "\n", "", "roomLabelMap", "[", "roomIndex", "]", "=", "label", "\n", "roomSegmentation", "[", "rooms", "==", "roomIndex", "]", "=", "label", "\n", "pass", "\n", "", "continue", "\n", "", "continue", "\n", "", "for", "roomIndex", "in", "xrange", "(", "rooms", ".", "min", "(", ")", ",", "rooms", ".", "max", "(", ")", "+", "1", ")", ":", "\n", "            ", "if", "roomIndex", "==", "wallIndex", "or", "roomIndex", "==", "backgroundIndex", ":", "\n", "                ", "continue", "\n", "", "if", "roomIndex", "not", "in", "roomLabelMap", ":", "\n", "                ", "print", "(", "'room has no label'", ")", "\n", "print", "(", "roomIndex", ",", "rooms", ".", "max", "(", ")", ")", "\n", "pass", "\n", "", "continue", "\n", "", "flags", "=", "np", ".", "zeros", "(", "2", ",", "np", ".", "int64", ")", "\n", "flags", "[", "0", "]", "=", "1", "\n", "\n", "corner_feature_file", "=", "ROOT_FOLDER", "+", "scene_id", "+", "'/corner_acc.npy'", "\n", "icon_feature_file", "=", "ROOT_FOLDER", "+", "scene_id", "+", "'/topdown_acc.npy'", "\n", "image_features", "=", "[", "[", "]", ",", "[", "]", "]", "\n", "if", "os", ".", "path", ".", "exists", "(", "corner_feature_file", ")", "and", "os", ".", "path", ".", "exists", "(", "icon_feature_file", ")", ":", "\n", "            ", "flags", "[", "1", "]", "=", "1", "\n", "corner_feature", "=", "np", ".", "load", "(", "corner_feature_file", ")", ".", "reshape", "(", "(", "HEIGHT", ",", "WIDTH", ",", "-", "1", ")", ")", "\n", "icon_feature", "=", "np", ".", "load", "(", "icon_feature_file", ")", ".", "reshape", "(", "(", "HEIGHT", ",", "WIDTH", ",", "-", "1", ")", ")", "\n", "for", "featureIndex", ",", "feature", "in", "enumerate", "(", "[", "corner_feature", ",", "icon_feature", "]", ")", ":", "\n", "                ", "for", "size", ",", "numChannels", "in", "zip", "(", "SIZES", ",", "NUM_CHANNELS", ")", "[", "1", ":", "]", ":", "\n", "                    ", "feature", "=", "cv2", ".", "resize", "(", "feature", ",", "(", "size", ",", "size", ")", ")", "\n", "image_features", "[", "featureIndex", "]", ".", "append", "(", "feature", ".", "reshape", "(", "(", "size", ",", "size", ",", "numChannels", ",", "-", "1", ")", ")", ".", "mean", "(", "-", "1", ")", ".", "reshape", "(", "-", "1", ")", ")", "\n", "continue", "\n", "", "image_features", "[", "featureIndex", "]", "=", "np", ".", "concatenate", "(", "image_features", "[", "featureIndex", "]", ",", "axis", "=", "0", ")", "\n", "continue", "\n", "", "image_features", "=", "image_features", "[", "0", "]", "+", "image_features", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "image_features", "=", "np", ".", "zeros", "(", "sum", "(", "[", "size", "*", "size", "*", "numChannels", "for", "size", ",", "numChannels", "in", "zip", "(", "SIZES", ",", "NUM_CHANNELS", ")", "[", "1", ":", "]", "]", ")", ")", "\n", "pass", "\n", "\n", "", "if", "False", ":", "\n", "            ", "cv2", ".", "imwrite", "(", "'test/density.png'", ",", "drawDensityImage", "(", "getDensity", "(", "points", ",", "HEIGHT", ",", "WIDTH", ")", ")", ")", "\n", "cv2", ".", "imwrite", "(", "'test/density_indices.png'", ",", "drawDensityImage", "(", "getDensityFromIndices", "(", "self", ".", "indicesMaps", ",", "HEIGHT", ",", "WIDTH", ")", ")", ")", "\n", "cv2", ".", "imwrite", "(", "'test/icon_segmentation.png'", ",", "drawSegmentationImage", "(", "iconSegmentation", ")", ")", "\n", "cv2", ".", "imwrite", "(", "'test/room_segmentation.png'", ",", "drawSegmentationImage", "(", "roomSegmentation", ")", ")", "\n", "cv2", ".", "imwrite", "(", "'test/corner_segmentation.png'", ",", "drawSegmentationImage", "(", "corner_gt", ",", "blackIndex", "=", "0", ")", ")", "\n", "if", "flags", "[", "1", "]", ":", "\n", "                ", "cv2", ".", "imwrite", "(", "'test/topdown_corner.png'", ",", "cv2", ".", "imread", "(", "ROOT_FOLDER", "+", "scene_id", "+", "'/corner_pred.png'", ")", ")", "\n", "cv2", ".", "imwrite", "(", "'test/topdown_icon.png'", ",", "cv2", ".", "imread", "(", "ROOT_FOLDER", "+", "scene_id", "+", "'/topdown_pred_nonzero.png'", ")", ")", "\n", "exit", "(", "1", ")", "\n", "pass", "\n", "", "pass", "\n", "\n", "", "corner_gt", "=", "np", ".", "array", "(", "corner_gt", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "numCorners", "=", "len", "(", "corner_gt", ")", "\n", "print", "(", "'num corners'", ",", "numCorners", ")", "\n", "if", "numCorners", ">", "MAX_NUM_CORNERS", ":", "\n", "            ", "exit", "(", "1", ")", "\n", "", "elif", "numCorners", "<", "MAX_NUM_CORNERS", ":", "\n", "            ", "corner_gt", "=", "np", ".", "concatenate", "(", "[", "corner_gt", ",", "np", ".", "zeros", "(", "(", "MAX_NUM_CORNERS", "-", "numCorners", ",", "3", ")", ",", "dtype", "=", "np", ".", "int64", ")", "]", ",", "axis", "=", "0", ")", "\n", "pass", "\n", "\n", "", "example", "=", "tf", ".", "train", ".", "Example", "(", "features", "=", "tf", ".", "train", ".", "Features", "(", "feature", "=", "{", "\n", "'image_path'", ":", "_bytes_feature", "(", "scene_id", ")", ",", "\n", "'points'", ":", "_float_feature", "(", "points", ".", "reshape", "(", "-", "1", ")", ")", ",", "\n", "'point_indices'", ":", "_int64_feature", "(", "self", ".", "indicesMaps", ".", "reshape", "(", "-", "1", ")", ")", ",", "\n", "'corner'", ":", "_int64_feature", "(", "corner_gt", ".", "reshape", "(", "-", "1", ")", ")", ",", "\n", "'num_corners'", ":", "_int64_feature", "(", "[", "numCorners", "]", ")", ",", "\n", "'icon'", ":", "_bytes_feature", "(", "iconSegmentation", ".", "tostring", "(", ")", ")", ",", "\n", "'room'", ":", "_bytes_feature", "(", "roomSegmentation", ".", "tostring", "(", ")", ")", ",", "\n", "'image'", ":", "_float_feature", "(", "image_features", ".", "reshape", "(", "-", "1", ")", ")", ",", "\n", "'flags'", ":", "_int64_feature", "(", "flags", ")", ",", "\n", "}", ")", ")", "\n", "self", ".", "writer", ".", "write", "(", "example", ".", "SerializeToString", "(", ")", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.RecordWriterTango.RecordWriterTango.projectSegmentation": [[512, 542], ["numpy.unique", "zip", "segments.tolist", "counts.tolist", "len", "max", "int", "RecordWriterTango.RecordWriterTango.projectSegmentation", "RecordWriterTango.RecordWriterTango.projectSegmentation", "int", "RecordWriterTango.RecordWriterTango.projectSegmentation", "RecordWriterTango.RecordWriterTango.projectSegmentation"], "methods", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.RecordWriterTango.RecordWriterTango.projectSegmentation", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.RecordWriterTango.RecordWriterTango.projectSegmentation", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.RecordWriterTango.RecordWriterTango.projectSegmentation", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.RecordWriterTango.RecordWriterTango.projectSegmentation"], ["", "def", "projectSegmentation", "(", "self", ",", "pointSegmentation", ",", "min_x", ",", "max_x", ",", "min_y", ",", "max_y", ")", ":", "\n", "        ", "if", "max_x", "-", "min_x", "==", "1", "and", "max_y", "-", "min_y", "==", "1", ":", "\n", "            ", "segments", ",", "counts", "=", "np", ".", "unique", "(", "pointSegmentation", "[", ":", ",", "2", "]", ",", "return_counts", "=", "True", ")", "\n", "segmentList", "=", "zip", "(", "segments", ".", "tolist", "(", ")", ",", "counts", ".", "tolist", "(", ")", ")", "\n", "segmentList", "=", "[", "segment", "for", "segment", "in", "segmentList", "if", "segment", "[", "0", "]", "not", "in", "[", "0", ",", "2", "]", "]", "\n", "label", "=", "0", "\n", "if", "2", "in", "segments", ":", "\n", "                ", "label", "=", "2", "\n", "pass", "\n", "", "if", "len", "(", "segmentList", ")", ">", "0", ":", "\n", "                ", "segment", "=", "max", "(", "segmentList", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "if", "segment", "[", "1", "]", ">", "0", ":", "\n", "                    ", "label", "=", "segment", "[", "0", "]", "\n", "pass", "\n", "", "pass", "\n", "", "self", ".", "segmentation", "[", "min_y", "]", "[", "min_x", "]", "=", "label", "\n", "", "elif", "max_x", "-", "min_x", ">=", "max_y", "-", "min_y", ":", "\n", "            ", "middle_x", "=", "int", "(", "(", "max_x", "+", "min_x", "+", "1", ")", "/", "2", ")", "\n", "mask_1", "=", "pointSegmentation", "[", ":", ",", "1", "]", "<", "middle_x", "\n", "self", ".", "projectSegmentation", "(", "pointSegmentation", "[", "mask_1", "]", ",", "min_x", ",", "middle_x", ",", "min_y", ",", "max_y", ")", "\n", "mask_2", "=", "pointSegmentation", "[", ":", ",", "1", "]", ">=", "middle_x", "\n", "self", ".", "projectSegmentation", "(", "pointSegmentation", "[", "mask_2", "]", ",", "middle_x", ",", "max_x", ",", "min_y", ",", "max_y", ")", "\n", "", "else", ":", "\n", "            ", "middle_y", "=", "int", "(", "(", "max_y", "+", "min_y", "+", "1", ")", "/", "2", ")", "\n", "mask_1", "=", "pointSegmentation", "[", ":", ",", "0", "]", "<", "middle_y", "\n", "self", ".", "projectSegmentation", "(", "pointSegmentation", "[", "mask_1", "]", ",", "min_x", ",", "max_x", ",", "min_y", ",", "middle_y", ")", "\n", "mask_2", "=", "pointSegmentation", "[", ":", ",", "0", "]", ">=", "middle_y", "\n", "self", ".", "projectSegmentation", "(", "pointSegmentation", "[", "mask_2", "]", ",", "min_x", ",", "max_x", ",", "middle_y", ",", "max_y", ")", "\n", "pass", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.RecordWriterTango.RecordWriterTango.projectIndices": [[544, 569], ["int", "RecordWriterTango.RecordWriterTango.projectIndices", "RecordWriterTango.RecordWriterTango.projectIndices", "int", "RecordWriterTango.RecordWriterTango.projectIndices", "RecordWriterTango.RecordWriterTango.projectIndices"], "methods", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.projectIndices", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.projectIndices", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.projectIndices", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.projectIndices"], ["", "def", "projectIndices", "(", "self", ",", "pointSegmentation", ",", "min_x", ",", "max_x", ",", "min_y", ",", "max_y", ")", ":", "\n", "# for strideIndex in xrange(6):", "\n", "#     stride = pow(2, strideIndex)", "\n", "#     if max_x - min_x == stride and max_y - min_y == stride:", "\n", "#         self.indicesMaps[strideIndex][pointSegmentation[:, 2]] = min_y / stride * WIDTH / stride + min_x / stride + self.batchIndex * (HEIGHT / stride * WIDTH / stride)", "\n", "#         pass", "\n", "#     continue", "\n", "\n", "        ", "if", "max_x", "-", "min_x", "==", "1", "and", "max_y", "-", "min_y", "==", "1", ":", "\n", "            ", "self", ".", "indicesMaps", "[", "pointSegmentation", "[", ":", ",", "2", "]", "]", "=", "min_y", "*", "WIDTH", "+", "min_x", "\n", "return", "\n", "", "elif", "max_x", "-", "min_x", ">=", "max_y", "-", "min_y", ":", "\n", "            ", "middle_x", "=", "int", "(", "(", "max_x", "+", "min_x", "+", "1", ")", "/", "2", ")", "\n", "mask_1", "=", "pointSegmentation", "[", ":", ",", "0", "]", "<", "middle_x", "\n", "self", ".", "projectIndices", "(", "pointSegmentation", "[", "mask_1", "]", ",", "min_x", ",", "middle_x", ",", "min_y", ",", "max_y", ")", "\n", "mask_2", "=", "pointSegmentation", "[", ":", ",", "0", "]", ">=", "middle_x", "\n", "self", ".", "projectIndices", "(", "pointSegmentation", "[", "mask_2", "]", ",", "middle_x", ",", "max_x", ",", "min_y", ",", "max_y", ")", "\n", "", "else", ":", "\n", "            ", "middle_y", "=", "int", "(", "(", "max_y", "+", "min_y", "+", "1", ")", "/", "2", ")", "\n", "mask_1", "=", "pointSegmentation", "[", ":", ",", "1", "]", "<", "middle_y", "\n", "self", ".", "projectIndices", "(", "pointSegmentation", "[", "mask_1", "]", ",", "min_x", ",", "max_x", ",", "min_y", ",", "middle_y", ")", "\n", "mask_2", "=", "pointSegmentation", "[", ":", ",", "1", "]", ">=", "middle_y", "\n", "self", ".", "projectIndices", "(", "pointSegmentation", "[", "mask_2", "]", ",", "min_x", ",", "max_x", ",", "middle_y", ",", "max_y", ")", "\n", "pass", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.RecordWriterTango._bytes_feature": [[45, 47], ["tensorflow.train.Feature", "tensorflow.train.BytesList"], "function", ["None"], ["def", "_bytes_feature", "(", "value", ")", ":", "\n", "    ", "return", "tf", ".", "train", ".", "Feature", "(", "bytes_list", "=", "tf", ".", "train", ".", "BytesList", "(", "value", "=", "[", "value", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.RecordWriterTango._int64_feature": [[48, 50], ["tensorflow.train.Feature", "tensorflow.train.Int64List"], "function", ["None"], ["", "def", "_int64_feature", "(", "value", ")", ":", "\n", "    ", "return", "tf", ".", "train", ".", "Feature", "(", "int64_list", "=", "tf", ".", "train", ".", "Int64List", "(", "value", "=", "value", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.RecordWriterTango._float_feature": [[51, 53], ["tensorflow.train.Feature", "tensorflow.train.FloatList"], "function", ["None"], ["", "def", "_float_feature", "(", "value", ")", ":", "\n", "    ", "return", "tf", ".", "train", ".", "Feature", "(", "float_list", "=", "tf", ".", "train", ".", "FloatList", "(", "value", "=", "value", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.RecordWriterTango.load_pnt": [[54, 111], ["pnt_file.replace", "os.path.exists", "os.path.exists", "print", "open", "open", "line.split", "line.split", "len", "all_pnts.append", "pnt_file.replace.split", "values[].strip", "cv2.imread", "float", "float", "float", "float", "float", "len", "str", "float", "float", "float", "float", "float", "float", "int", "int", "min", "min", "color.astype", "numpy.round", "numpy.round"], "function", ["None"], ["", "def", "load_pnt", "(", "pnt_file", ")", ":", "\n", "    ", "all_pnts", "=", "[", "]", "\n", "texture_file", "=", "pnt_file", ".", "replace", "(", "'.obj'", ",", "'.mtl'", ")", "\n", "texture_exists", "=", "os", ".", "path", ".", "exists", "(", "texture_file", ")", "\n", "print", "(", "pnt_file", ",", "texture_exists", ")", "\n", "if", "texture_exists", ":", "\n", "        ", "with", "open", "(", "texture_file", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "values", "=", "line", ".", "split", "(", "' '", ")", "\n", "if", "values", "[", "0", "]", "==", "'map_Kd'", ":", "\n", "                    ", "paths", "=", "texture_file", ".", "split", "(", "'/'", ")", "\n", "paths", "[", "-", "1", "]", "=", "values", "[", "1", "]", ".", "strip", "(", ")", "\n", "image_file", "=", "'/'", ".", "join", "(", "paths", ")", "\n", "#print(image_file)", "\n", "texture", "=", "cv2", ".", "imread", "(", "image_file", ")", "\n", "texture_width", "=", "texture", ".", "shape", "[", "1", "]", "\n", "texture_height", "=", "texture", ".", "shape", "[", "0", "]", "\n", "pass", "\n", "", "continue", "\n", "", "pass", "\n", "", "pass", "\n", "\n", "", "with", "open", "(", "pnt_file", ")", "as", "f", ":", "\n", "        ", "vertex_index", "=", "0", "\n", "for", "line", "in", "f", ":", "\n", "            ", "eles", "=", "line", ".", "split", "(", ")", "\n", "if", "len", "(", "eles", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "if", "eles", "[", "0", "]", "==", "\"v\"", ":", "\n", "                ", "if", "texture_exists", ":", "\n", "                    ", "pnt", "=", "[", "float", "(", "eles", "[", "1", "]", ")", ",", "float", "(", "eles", "[", "2", "]", ")", ",", "float", "(", "eles", "[", "3", "]", ")", "]", "\n", "", "else", ":", "\n", "                    ", "assert", "len", "(", "eles", ")", ">=", "7", ",", "str", "(", "vertex_index", ")", "+", "line", "\n", "pnt", "=", "[", "float", "(", "eles", "[", "1", "]", ")", ",", "float", "(", "eles", "[", "2", "]", ")", ",", "float", "(", "eles", "[", "3", "]", ")", ",", "float", "(", "eles", "[", "4", "]", ")", ",", "float", "(", "eles", "[", "5", "]", ")", ",", "float", "(", "eles", "[", "6", "]", ")", "]", "\n", "pass", "\n", "", "all_pnts", ".", "append", "(", "pnt", ")", "\n", "", "elif", "eles", "[", "0", "]", "==", "'vt'", "and", "texture_exists", ":", "\n", "                ", "u", "=", "float", "(", "eles", "[", "1", "]", ")", "\n", "v", "=", "float", "(", "eles", "[", "2", "]", ")", "\n", "if", "u", "<", "0", "or", "u", ">", "1", "or", "v", "<", "0", "or", "v", ">", "1", ":", "\n", "                    ", "color", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "", "else", ":", "\n", "                    ", "u", "=", "int", "(", "min", "(", "np", ".", "round", "(", "u", "*", "texture_width", ")", ",", "texture_width", "-", "1", ")", ")", "\n", "v", "=", "int", "(", "min", "(", "np", ".", "round", "(", "(", "1", "-", "v", ")", "*", "texture_height", ")", ",", "texture_height", "-", "1", ")", ")", "\n", "color", "=", "texture", "[", "v", "]", "[", "u", "]", "\n", "color", "=", "color", ".", "astype", "(", "np", ".", "float32", ")", "/", "255", "\n", "pass", "\n", "", "all_pnts", "[", "vertex_index", "]", "+=", "[", "color", "[", "2", "]", ",", "color", "[", "1", "]", ",", "color", "[", "0", "]", "]", "\n", "vertex_index", "+=", "1", "\n", "pass", "\n", "", "continue", "\n", "", "pass", "\n", "#if texture_exists:", "\n", "#writePointCloud('test/pointcloud.ply', all_pnts)", "\n", "#exit(1)", "\n", "# print(all_pnts)", "\n", "", "return", "all_pnts", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.RecordWriterTango.pnts_to_heatmap_transformation_matrix": [[121, 169], ["math.ceil", "math.ceil", "math.ceil", "math.ceil", "max", "RecordWriterTango.PntMapper", "isinstance", "numpy.array", "numpy.ones", "numpy.transpose", "prj_pnts[].max", "prj_pnts[].min", "prj_pnts[].max", "prj_pnts[].min", "numpy.zeros", "RecordWriterTango.PntMapper.map_pnts", "isinstance", "numpy.array", "numpy.dot", "numpy.transpose", "print", "int", "int", "int", "int", "round", "round", "round", "round"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.RecordWriterTango.PntMapper.map_pnts"], ["", "", "def", "pnts_to_heatmap_transformation_matrix", "(", "pnts", ",", "is_binary", ",", "label", ",", "transform", "=", "None", ",", "img", "=", "None", ",", "bd_box", "=", "None", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "pnts", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "pnts", "=", "np", ".", "array", "(", "pnts", ")", "\n", "", "if", "pnts", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "        ", "return", "None", "\n", "", "if", "transform", "is", "not", "None", ":", "\n", "        ", "if", "not", "isinstance", "(", "transform", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "transform", "=", "np", ".", "array", "(", "transform", ")", "\n", "", "aug_pnts", "=", "np", ".", "ones", "(", "(", "pnts", ".", "shape", "[", "0", "]", ",", "6", ")", ")", "\n", "aug_pnts", "[", ":", ",", ":", "-", "1", "]", "=", "pnts", "\n", "prj_pnts", "=", "np", ".", "transpose", "(", "np", ".", "dot", "(", "transform", ",", "np", ".", "transpose", "(", "aug_pnts", ",", "(", "1", ",", "0", ")", ")", ")", ",", "(", "1", ",", "0", ")", ")", "\n", "prj_pnts", "/=", "prj_pnts", "[", ":", ",", "-", "1", "]", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "", "else", ":", "\n", "        ", "prj_pnts", "=", "pnts", "\n", "", "if", "bd_box", "==", "None", ":", "\n", "        ", "x_max", "=", "prj_pnts", "[", ":", ",", "0", "]", ".", "max", "(", ")", "\n", "x_min", "=", "prj_pnts", "[", ":", ",", "0", "]", ".", "min", "(", ")", "\n", "y_max", "=", "prj_pnts", "[", ":", ",", "1", "]", ".", "max", "(", ")", "\n", "y_min", "=", "prj_pnts", "[", ":", ",", "1", "]", ".", "min", "(", ")", "\n", "", "else", ":", "\n", "        ", "x_min", "=", "bd_box", "[", "0", "]", "\n", "y_min", "=", "bd_box", "[", "1", "]", "\n", "x_max", "=", "bd_box", "[", "2", "]", "\n", "y_max", "=", "bd_box", "[", "3", "]", "\n", "#print(x_min, y_min, x_max, y_max)", "\n", "", "x_size", "=", "math", ".", "ceil", "(", "x_max", "-", "x_min", "+", "1", ")", "\n", "y_size", "=", "math", ".", "ceil", "(", "y_max", "-", "y_min", "+", "1", ")", "\n", "\n", "#print(x_min, y_min, x_size, y_size)", "\n", "mx_size", "=", "max", "(", "x_size", ",", "y_size", ")", "\n", "\n", "pnt_mapper", "=", "PntMapper", "(", "(", "x_min", ",", "y_min", ")", ",", "(", "x_size", ",", "y_size", ")", ",", "(", "0", ",", "0", ")", ",", "(", "HEIGHT", ",", "WIDTH", ")", ")", "\n", "if", "img", "is", "None", ":", "\n", "        ", "img", "=", "np", ".", "zeros", "(", "(", "HEIGHT", ",", "WIDTH", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "for", "pnt", "in", "prj_pnts", ":", "\n", "#        print(pnt)", "\n", "        ", "m_pnt", "=", "pnt_mapper", ".", "map_pnts", "(", "pnt", "[", "0", "]", ",", "pnt", "[", "1", "]", ")", "\n", "#if len(pnts) < 30:", "\n", "#    print(pnt, m_pnt, (x_min, y_min, x_max, y_max))", "\n", "try", ":", "\n", "            ", "if", "is_binary", ":", "\n", "                ", "img", "[", "int", "(", "round", "(", "m_pnt", "[", "1", "]", ")", ")", ",", "int", "(", "round", "(", "m_pnt", "[", "0", "]", ")", ")", "]", "=", "label", "\n", "", "else", ":", "\n", "                ", "img", "[", "int", "(", "round", "(", "m_pnt", "[", "1", "]", ")", ")", ",", "int", "(", "round", "(", "m_pnt", "[", "0", "]", ")", ")", "]", "+=", "1", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "pnt", ",", "m_pnt", ",", "e", ")", "\n", "raise", "e", "\n", "", "", "return", "img", ",", "(", "x_min", ",", "y_min", ",", "x_max", ",", "y_max", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.RecordWriterTango.getZRotationMatrix": [[170, 174], ["numpy.array", "math.cos", "math.cos", "math.sin", "math.sin", "math.sin", "math.sin", "math.cos", "math.cos"], "function", ["None"], ["", "def", "getZRotationMatrix", "(", "deg", ")", ":", "\n", "    ", "return", "np", ".", "array", "(", "[", "[", "math", ".", "cos", "(", "deg", ")", ",", "-", "math", ".", "sin", "(", "deg", ")", ",", "0", "]", ",", "\n", "[", "-", "math", ".", "sin", "(", "deg", ")", ",", "-", "math", ".", "cos", "(", "deg", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.mergeFeatures": [[44, 50], ["tensorflow.add_n", "tensorflow.concat"], "function", ["None"], ["def", "mergeFeatures", "(", "features", ")", ":", "\n", "    ", "if", "True", ":", "\n", "        ", "return", "tf", ".", "add_n", "(", "features", ")", "\n", "", "else", ":", "\n", "        ", "return", "tf", ".", "concat", "(", "features", ",", "axis", "=", "-", "1", ")", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.dumpOutputs": [[51, 57], ["utils.sigmoid", "numpy.transpose", "numpy.save"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.sigmoid"], ["", "", "def", "dumpOutputs", "(", "corners", ",", "semantics", "=", "None", ")", ":", "\n", "    ", "corners", "=", "sigmoid", "(", "corners", ")", "\n", "corners", "=", "np", ".", "transpose", "(", "corners", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "#print(corners.shape)", "\n", "np", ".", "save", "(", "'output/corners.npy'", ",", "corners", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.build_graph_pointnet": [[60, 138], ["tensorflow.device", "tflearn.config.init_training_mode", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.conv2d", "tflearn.layers.max_pool_2d", "tensorflow.tile", "tensorflow.concat", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.maximum", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.unsorted_segment_max", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.unsorted_segment_sum", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.range", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "len", "len"], "function", ["None"], ["", "def", "build_graph_pointnet", "(", "options", ",", "input_dict", ")", ":", "\n", "    ", "nChannels", "=", "[", "7", ",", "64", ",", "64", ",", "64", ",", "128", ",", "1024", "]", "\n", "sizes", "=", "[", "HEIGHT", ",", "HEIGHT", "//", "2", ",", "HEIGHT", "//", "4", ",", "HEIGHT", "//", "8", ",", "HEIGHT", "//", "16", ",", "HEIGHT", "//", "32", "]", "\n", "\n", "with", "tf", ".", "device", "(", "'/gpu:%s'", "%", "options", ".", "gpu_id", "[", "0", "]", ")", ":", "\n", "        ", "tflearn", ".", "config", ".", "init_training_mode", "(", ")", "\n", "\n", "\n", "#tflearn.init_graph(seed=1029,num_cores=2,gpu_memory_fraction=1.0,soft_placement=True)", "\n", "#tf.set_random_seed(1029)", "\n", "pointcloud_inp", "=", "input_dict", "[", "'points'", "]", "\n", "pointcloud_indices_inp", "=", "input_dict", "[", "'point_indices'", "]", "\n", "pointcloud_indices_inp", "+=", "tf", ".", "expand_dims", "(", "tf", ".", "range", "(", "options", ".", "batchSize", ")", "*", "sizes", "[", "0", "]", "*", "sizes", "[", "0", "]", ",", "-", "1", ")", "\n", "# batchIndexOffsets = []", "\n", "# for c in xrange(6):", "\n", "#     batchIndexOffsets.append(tf.range(options.batchSize) * sizes[c] * sizes[c])", "\n", "#     continue", "\n", "# batchIndexOffsets = tf.expand_dims(tf.stack(batchIndexOffsets, axis=1), -1)", "\n", "\n", "# indices_maps = tf.unstack(pointcloud_indices_inp + batchIndexOffsets, axis=1)", "\n", "\n", "x0", "=", "tf", ".", "expand_dims", "(", "pointcloud_inp", ",", "-", "1", ")", "\n", "x1", "=", "slim", ".", "conv2d", "(", "x0", ",", "nChannels", "[", "1", "]", ",", "(", "1", ",", "nChannels", "[", "0", "]", ")", ",", "stride", "=", "1", ",", "activation_fn", "=", "nn", ".", "relu", ",", "padding", "=", "'valid'", ",", "normalizer_fn", "=", "bn_func", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ")", "\n", "\n", "x2", "=", "slim", ".", "conv2d", "(", "x1", ",", "nChannels", "[", "2", "]", ",", "(", "1", ",", "1", ")", ",", "stride", "=", "1", ",", "activation_fn", "=", "nn", ".", "relu", ",", "normalizer_fn", "=", "bn_func", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ")", "\n", "\n", "x3", "=", "slim", ".", "conv2d", "(", "x2", ",", "nChannels", "[", "3", "]", ",", "(", "1", ",", "1", ")", ",", "stride", "=", "1", ",", "activation_fn", "=", "nn", ".", "relu", ",", "normalizer_fn", "=", "bn_func", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ")", "\n", "\n", "x4", "=", "slim", ".", "conv2d", "(", "x3", ",", "nChannels", "[", "4", "]", ",", "(", "1", ",", "1", ")", ",", "stride", "=", "1", ",", "activation_fn", "=", "nn", ".", "relu", ",", "normalizer_fn", "=", "bn_func", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ")", "\n", "\n", "x5", "=", "slim", ".", "conv2d", "(", "x4", ",", "nChannels", "[", "5", "]", ",", "(", "1", ",", "1", ")", ",", "stride", "=", "1", ",", "activation_fn", "=", "nn", ".", "relu", ",", "normalizer_fn", "=", "bn_func", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ")", "\n", "\n", "x_fc_topdown", "=", "tflearn", ".", "layers", ".", "max_pool_2d", "(", "x5", ",", "(", "options", ".", "numPoints", ",", "1", ")", ",", "strides", "=", "1", ",", "padding", "=", "'valid'", ")", "\n", "\n", "x_fc", "=", "x_fc_topdown", "\n", "\n", "# x_fc = tf.reshape(x_fc, (options.batchSize, -1))", "\n", "# x_fc = slim.fully_connected(x_fc, 256, activation_fn=nn.relu, normalizer_fn=bn_func, weights_regularizer=slim.l2_regularizer(1e-5))", "\n", "# x_fc = slim.fully_connected(x_fc, nChannels[5], activation_fn=nn.relu, normalizer_fn=bn_func, weights_regularizer=slim.l2_regularizer(1e-5))", "\n", "# x_fc = tf.reshape(x_fc, (options.batchSize, 1, 1, -1))", "\n", "\n", "x_fc_up", "=", "tf", ".", "tile", "(", "x_fc", ",", "(", "1", ",", "options", ".", "numPoints", ",", "1", ",", "1", ")", ")", "\n", "\n", "x_fc_up", "=", "tf", ".", "concat", "(", "[", "x_fc_up", ",", "x3", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "x5_up", "=", "slim", ".", "conv2d", "(", "x_fc_up", ",", "512", ",", "(", "1", ",", "1", ")", ",", "stride", "=", "1", ",", "activation_fn", "=", "nn", ".", "relu", ",", "normalizer_fn", "=", "bn_func", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ")", "\n", "x4_up", "=", "slim", ".", "conv2d", "(", "x5_up", ",", "256", ",", "(", "1", ",", "1", ")", ",", "stride", "=", "1", ",", "activation_fn", "=", "nn", ".", "relu", ",", "normalizer_fn", "=", "bn_func", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ")", "\n", "x3_up", "=", "slim", ".", "conv2d", "(", "x4_up", ",", "128", ",", "(", "1", ",", "1", ")", ",", "stride", "=", "1", ",", "activation_fn", "=", "nn", ".", "relu", ",", "normalizer_fn", "=", "bn_func", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ")", "\n", "x2_up", "=", "slim", ".", "conv2d", "(", "x3_up", ",", "128", ",", "(", "1", ",", "1", ")", ",", "stride", "=", "1", ",", "activation_fn", "=", "nn", ".", "relu", ",", "normalizer_fn", "=", "bn_func", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ")", "\n", "\n", "#x2_up = tf.unsorted_segment_sum(tf.reshape(x2_up, (-1, 128)), tf.reshape(pointcloud_indices_inp, (-1, )), num_segments=options.batchSize * sizes[0] * sizes[0]) / options.sumScale", "\n", "x2_up", "=", "tf", ".", "maximum", "(", "tf", ".", "unsorted_segment_max", "(", "tf", ".", "reshape", "(", "x2_up", ",", "(", "-", "1", ",", "128", ")", ")", ",", "tf", ".", "reshape", "(", "pointcloud_indices_inp", ",", "(", "-", "1", ",", ")", ")", ",", "num_segments", "=", "options", ".", "batchSize", "*", "sizes", "[", "0", "]", "*", "sizes", "[", "0", "]", ",", "name", "=", "\"project\"", ")", ",", "0", ")", "\n", "x2_up", "=", "tf", ".", "reshape", "(", "x2_up", ",", "(", "options", ".", "batchSize", ",", "sizes", "[", "0", "]", ",", "sizes", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "x1_up", "=", "x2_up", "\n", "#x1_up = slim.conv2d(x2_up, nChannels[1], (3, 3), stride=1, activation_fn=nn.relu, normalizer_fn=bn_func, weights_regularizer=slim.l2_regularizer(1e-5))", "\n", "#x0_topdown = tf.reshape(x0_topdown, (options.batchSize, sizes[0], sizes[0], -1))", "\n", "\n", "if", "False", ":", "\n", "            ", "pred_corner", "=", "slim", ".", "conv2d", "(", "x1_up", ",", "64", ",", "[", "3", ",", "3", "]", ",", "stride", "=", "1", ",", "activation_fn", "=", "nn", ".", "relu", ",", "normalizer_fn", "=", "bn_func", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ",", "scope", "=", "'pred_corner'", ")", "\n", "pred_icon", "=", "slim", ".", "conv2d", "(", "x1_up", ",", "64", ",", "[", "3", ",", "3", "]", ",", "stride", "=", "1", ",", "activation_fn", "=", "nn", ".", "relu", ",", "normalizer_fn", "=", "bn_func", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ",", "scope", "=", "'pred_icon'", ")", "\n", "pred_room", "=", "slim", ".", "conv2d", "(", "x1_up", ",", "64", ",", "[", "3", ",", "3", "]", ",", "stride", "=", "1", ",", "activation_fn", "=", "nn", ".", "relu", ",", "normalizer_fn", "=", "bn_func", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ",", "scope", "=", "'pred_room'", ")", "\n", "\n", "pred_corner", "=", "slim", ".", "conv2d", "(", "pred_corner", ",", "NUM_CORNERS", ",", "(", "1", ",", "1", ")", ",", "stride", "=", "1", ",", "activation_fn", "=", "None", ",", "normalizer_fn", "=", "None", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ")", "\n", "pred_icon", "=", "slim", ".", "conv2d", "(", "pred_icon", ",", "NUM_ICONS", ",", "(", "1", ",", "1", ")", ",", "stride", "=", "1", ",", "activation_fn", "=", "None", ",", "normalizer_fn", "=", "None", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ")", "\n", "pred_room", "=", "slim", ".", "conv2d", "(", "pred_room", ",", "NUM_ROOMS", ",", "(", "1", ",", "1", ")", ",", "stride", "=", "1", ",", "activation_fn", "=", "None", ",", "normalizer_fn", "=", "None", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ")", "\n", "", "else", ":", "\n", "            ", "pred_corner", "=", "slim", ".", "conv2d", "(", "x1_up", ",", "NUM_CORNERS", ",", "[", "3", ",", "3", "]", ",", "stride", "=", "1", ",", "activation_fn", "=", "None", ",", "normalizer_fn", "=", "None", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ",", "scope", "=", "'pred_corner'", ")", "\n", "pred_icon", "=", "slim", ".", "conv2d", "(", "x1_up", ",", "NUM_ICONS", ",", "[", "3", ",", "3", "]", ",", "stride", "=", "1", ",", "activation_fn", "=", "None", ",", "normalizer_fn", "=", "None", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ",", "scope", "=", "'pred_icon'", ")", "\n", "pred_room", "=", "slim", ".", "conv2d", "(", "x1_up", ",", "NUM_ROOMS", ",", "[", "3", ",", "3", "]", ",", "stride", "=", "1", ",", "activation_fn", "=", "None", ",", "normalizer_fn", "=", "None", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ",", "scope", "=", "'pred_room'", ")", "\n", "pass", "\n", "\n", "", "pred_dict", "=", "{", "'corner'", ":", "pred_corner", ",", "'icon'", ":", "pred_icon", ",", "'room'", ":", "pred_room", "}", "\n", "x0_topdown", "=", "tf", ".", "unsorted_segment_sum", "(", "tf", ".", "reshape", "(", "x0", ",", "(", "-", "1", ",", "NUM_CHANNELS", "[", "0", "]", ")", ")", ",", "tf", ".", "reshape", "(", "pointcloud_indices_inp", ",", "(", "-", "1", ",", ")", ")", ",", "num_segments", "=", "options", ".", "batchSize", "/", "len", "(", "options", ".", "gpu_id", ")", "*", "SIZES", "[", "0", "]", "*", "SIZES", "[", "0", "]", ")", "/", "options", ".", "sumScale", "\n", "x0_topdown", "=", "tf", ".", "reshape", "(", "x0_topdown", ",", "(", "options", ".", "batchSize", "/", "len", "(", "options", ".", "gpu_id", ")", ",", "SIZES", "[", "0", "]", ",", "SIZES", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "debug_dict", "=", "{", "'x0_topdown'", ":", "x0_topdown", "}", "\n", "pass", "\n", "\n", "", "return", "pred_dict", ",", "debug_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.build_graph_image": [[139, 206], ["zip", "len", "pred.items", "de.items", "tensorflow.split", "tensorflow.device", "tensorflow.variable_scope", "tensorflow.arg_scope", "tensorflow.conv2d_transpose", "train.mergeFeatures", "tensorflow.conv2d_transpose", "train.mergeFeatures", "tensorflow.conv2d_transpose", "train.mergeFeatures", "tensorflow.conv2d_transpose", "train.mergeFeatures", "pred_dicts.append", "debug_dicts.append", "tensorflow.concat", "tensorflow.concat", "len", "image_features_all.iteritems", "tensorflow.conv2d_transpose", "tensorflow.conv2d_transpose", "tensorflow.conv2d_transpose", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.conv2d_transpose", "tensorflow.conv2d_transpose", "tensorflow.conv2d_transpose", "tensorflow.zeros", "image_features_all.iteritems", "int", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.mergeFeatures", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.mergeFeatures", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.mergeFeatures", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.mergeFeatures"], ["", "def", "build_graph_image", "(", "options", ",", "input_dict", ")", ":", "\n", "    ", "image_features_all", "=", "input_dict", "[", "'image_features'", "]", "\n", "if", "len", "(", "options", ".", "gpu_id", ")", ">", "1", ":", "\n", "        ", "img_features", "=", "[", "tf", ".", "split", "(", "features", ",", "len", "(", "options", ".", "gpu_id", ")", ",", "axis", "=", "0", ")", "for", "k", ",", "features", "in", "image_features_all", ".", "iteritems", "(", ")", "]", "\n", "", "else", ":", "\n", "        ", "img_features", "=", "[", "[", "features", "for", "k", ",", "features", "in", "image_features_all", ".", "iteritems", "(", ")", "]", "]", "\n", "pass", "\n", "#pointcloud_inp = tf.placeholder(tf.float32,shape=(options.batchSize, options.numPoints, options.numInputChannels),name='pointcloud_inp')", "\n", "#pointcloud_indices_inp = tf.placeholder(tf.int32,shape=(options.batchSize, 6, options.numPoints),name='pointcloud_indices_inp')", "\n", "\n", "", "pred_dicts", "=", "[", "]", "\n", "debug_dicts", "=", "[", "]", "\n", "\n", "reused", "=", "False", "\n", "for", "i", ",", "img_feature", "in", "zip", "(", "options", ".", "gpu_id", ",", "img_features", ")", ":", "\n", "        ", "with", "tf", ".", "device", "(", "'/gpu:%s'", "%", "int", "(", "i", ")", ")", ",", "tf", ".", "variable_scope", "(", "'floorplan_net'", ",", "reuse", "=", "reused", ")", ",", "slim", ".", "arg_scope", "(", "[", "slim", ".", "model_variable", ",", "slim", ".", "variable", "]", ",", "device", "=", "'/cpu:0'", ")", ":", "\n", "            ", "x5_up", "=", "img_feature", "[", "4", "]", "\n", "\n", "x4_up", "=", "slim", ".", "conv2d_transpose", "(", "x5_up", ",", "NUM_CHANNELS", "[", "4", "]", ",", "[", "5", ",", "5", "]", ",", "stride", "=", "2", ",", "activation_fn", "=", "nn", ".", "relu", ",", "normalizer_fn", "=", "bn_func", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ")", "\n", "\n", "x4_up", "=", "mergeFeatures", "(", "[", "x4_up", ",", "img_feature", "[", "3", "]", "]", ")", "\n", "\n", "x3_up", "=", "slim", ".", "conv2d_transpose", "(", "x4_up", ",", "NUM_CHANNELS", "[", "3", "]", ",", "[", "5", ",", "5", "]", ",", "stride", "=", "2", ",", "activation_fn", "=", "nn", ".", "relu", ",", "normalizer_fn", "=", "bn_func", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ")", "\n", "#print(x3_up)", "\n", "\n", "x3_up", "=", "mergeFeatures", "(", "[", "x3_up", ",", "img_feature", "[", "2", "]", "]", ")", "\n", "\n", "x2_up", "=", "slim", ".", "conv2d_transpose", "(", "x3_up", ",", "NUM_CHANNELS", "[", "2", "]", ",", "[", "5", ",", "5", "]", ",", "stride", "=", "2", ",", "activation_fn", "=", "nn", ".", "relu", ",", "normalizer_fn", "=", "bn_func", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ")", "\n", "\n", "x2_up", "=", "mergeFeatures", "(", "[", "x2_up", ",", "img_feature", "[", "1", "]", "]", ")", "\n", "\n", "x1_up", "=", "slim", ".", "conv2d_transpose", "(", "x2_up", ",", "NUM_CHANNELS", "[", "1", "]", ",", "[", "5", ",", "5", "]", ",", "stride", "=", "2", ",", "activation_fn", "=", "nn", ".", "relu", ",", "normalizer_fn", "=", "bn_func", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ")", "\n", "\n", "x1_up", "=", "mergeFeatures", "(", "[", "x1_up", ",", "img_feature", "[", "0", "]", "]", ")", "\n", "\n", "if", "True", ":", "\n", "                ", "pred_corner", "=", "slim", ".", "conv2d_transpose", "(", "x1_up", ",", "NUM_CHANNELS", "[", "1", "]", ",", "[", "5", ",", "5", "]", ",", "stride", "=", "2", ",", "activation_fn", "=", "nn", ".", "relu", ",", "normalizer_fn", "=", "bn_func", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ",", "scope", "=", "'pred_corner'", ")", "\n", "pred_icon", "=", "slim", ".", "conv2d_transpose", "(", "x1_up", ",", "NUM_CHANNELS", "[", "1", "]", ",", "[", "5", ",", "5", "]", ",", "stride", "=", "2", ",", "activation_fn", "=", "nn", ".", "relu", ",", "normalizer_fn", "=", "bn_func", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ",", "scope", "=", "'pred_icon'", ")", "\n", "pred_room", "=", "slim", ".", "conv2d_transpose", "(", "x1_up", ",", "NUM_CHANNELS", "[", "1", "]", ",", "[", "5", ",", "5", "]", ",", "stride", "=", "2", ",", "activation_fn", "=", "nn", ".", "relu", ",", "normalizer_fn", "=", "bn_func", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ",", "scope", "=", "'pred_room'", ")", "\n", "\n", "pred_corner", "=", "slim", ".", "conv2d", "(", "pred_corner", ",", "NUM_CORNERS", ",", "(", "1", ",", "1", ")", ",", "stride", "=", "1", ",", "activation_fn", "=", "None", ",", "normalizer_fn", "=", "None", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ")", "\n", "pred_icon", "=", "slim", ".", "conv2d", "(", "pred_icon", ",", "NUM_ICONS", ",", "(", "1", ",", "1", ")", ",", "stride", "=", "1", ",", "activation_fn", "=", "None", ",", "normalizer_fn", "=", "None", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ")", "\n", "pred_room", "=", "slim", ".", "conv2d", "(", "pred_room", ",", "NUM_ROOMS", ",", "(", "1", ",", "1", ")", ",", "stride", "=", "1", ",", "activation_fn", "=", "None", ",", "normalizer_fn", "=", "None", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ")", "\n", "", "else", ":", "\n", "                ", "pred_corner", "=", "slim", ".", "conv2d_transpose", "(", "x1_up", ",", "NUM_CORNERS", ",", "[", "5", ",", "5", "]", ",", "stride", "=", "2", ",", "activation_fn", "=", "None", ",", "normalizer_fn", "=", "bn_func", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ",", "scope", "=", "'pred_corner'", ")", "\n", "pred_icon", "=", "slim", ".", "conv2d_transpose", "(", "x1_up", ",", "NUM_ICONS", ",", "[", "5", ",", "5", "]", ",", "stride", "=", "2", ",", "activation_fn", "=", "None", ",", "normalizer_fn", "=", "bn_func", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ",", "scope", "=", "'pred_icon'", ")", "\n", "pred_room", "=", "slim", ".", "conv2d_transpose", "(", "x1_up", ",", "NUM_ROOMS", ",", "[", "5", ",", "5", "]", ",", "stride", "=", "2", ",", "activation_fn", "=", "None", ",", "normalizer_fn", "=", "bn_func", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ",", "scope", "=", "'pred_room'", ")", "\n", "pass", "\n", "\n", "", "pred_dict", "=", "{", "'corner'", ":", "pred_corner", ",", "'icon'", ":", "pred_icon", ",", "'room'", ":", "pred_room", "}", "\n", "debug_dict", "=", "{", "'x0_topdown'", ":", "tf", ".", "zeros", "(", "(", "options", ".", "batchSize", ",", "HEIGHT", ",", "WIDTH", ",", "options", ".", "numInputChannels", ")", ")", "}", "\n", "\n", "pred_dicts", ".", "append", "(", "pred_dict", ")", "\n", "debug_dicts", ".", "append", "(", "debug_dict", ")", "\n", "pass", "\n", "", "continue", "\n", "\n", "", "pred_dict", "=", "pred_dicts", "[", "0", "]", "\n", "for", "pred", "in", "pred_dicts", "[", "1", ":", "]", ":", "\n", "        ", "for", "k", ",", "v", "in", "pred", ".", "items", "(", ")", ":", "\n", "            ", "pred_dict", "[", "k", "]", "=", "tf", ".", "concat", "(", "[", "pred_dict", "[", "k", "]", ",", "v", "]", ",", "axis", "=", "0", ")", "\n", "", "", "debug_dict", "=", "debug_dicts", "[", "0", "]", "\n", "for", "de", "in", "debug_dicts", "[", "1", ":", "]", ":", "\n", "        ", "for", "k", ",", "v", "in", "de", ".", "items", "(", ")", ":", "\n", "            ", "debug_dict", "[", "k", "]", "=", "tf", ".", "concat", "(", "[", "debug_dict", "[", "k", "]", ",", "v", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "return", "pred_dict", ",", "debug_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.build_graph": [[208, 577], ["set", "set", "zip", "train.build_graph_pointnet", "train.build_graph_image", "len", "tensorflow.split", "tensorflow.split", "pred.items", "de.items", "len", "len", "len", "tensorflow.device", "tensorflow.variable_scope", "tensorflow.arg_scope", "tensorflow.set_random_seed", "getCoarseIndicesMapsBatch", "xrange", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.reshape", "tensorflow.conv2d_transpose", "train.mergeFeatures", "tensorflow.conv2d_transpose", "train.mergeFeatures", "tensorflow.conv2d_transpose", "train.mergeFeatures", "tensorflow.conv2d_transpose", "train.mergeFeatures", "pred_dicts.append", "debug_dicts.append", "tensorflow.concat", "tensorflow.concat", "tensorflow.split", "xrange", "tensorflow.cast", "tf.expand_dims.append", "tensorflow.stack", "tensorflow.unsorted_segment_sum", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.reshape", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.reshape", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.reshape", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.reshape", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.reshape", "tensorflow.conv2d", "tflearn.layers.max_pool_2d", "tflearn.layers.max_pool_2d", "tensorflow.tile", "train.mergeFeatures", "tensorflow.concat", "tensorflow.conv2d", "train.mergeFeatures", "tensorflow.conv2d", "tensorflow.maximum", "tensorflow.reshape", "train.mergeFeatures", "tensorflow.conv2d", "tensorflow.maximum", "tensorflow.reshape", "train.mergeFeatures", "tensorflow.conv2d", "tensorflow.maximum", "tensorflow.reshape", "train.mergeFeatures", "tensorflow.conv2d", "tensorflow.maximum", "tensorflow.reshape", "train.mergeFeatures", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.conv2d_transpose", "tensorflow.conv2d_transpose", "tensorflow.conv2d_transpose", "len", "image_features_all.iteritems", "len", "int", "tensorflow.nn.dropout", "tensorflow.round", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.maximum", "tensorflow.reshape", "train.mergeFeatures", "train.mergeFeatures", "tensorflow.maximum", "tensorflow.reshape", "train.mergeFeatures", "train.mergeFeatures", "tensorflow.maximum", "tensorflow.reshape", "train.mergeFeatures", "train.mergeFeatures", "tensorflow.maximum", "tensorflow.reshape", "train.mergeFeatures", "train.mergeFeatures", "tensorflow.maximum", "tensorflow.reshape", "train.mergeFeatures", "train.mergeFeatures", "train.mergeFeatures", "tensorflow.tile", "tensorflow.tile", "tensorflow.l2_regularizer", "tensorflow.reshape", "train.mergeFeatures", "tensorflow.unsorted_segment_max", "train.mergeFeatures", "tensorflow.l2_regularizer", "tensorflow.reshape", "train.mergeFeatures", "tensorflow.unsorted_segment_max", "train.mergeFeatures", "tensorflow.l2_regularizer", "tensorflow.reshape", "train.mergeFeatures", "tensorflow.unsorted_segment_max", "train.mergeFeatures", "tensorflow.l2_regularizer", "tensorflow.reshape", "train.mergeFeatures", "tensorflow.unsorted_segment_max", "train.mergeFeatures", "tensorflow.conv2d_transpose", "tensorflow.conv2d_transpose", "tensorflow.conv2d_transpose", "tensorflow.conv2d_transpose", "tensorflow.conv2d_transpose", "tensorflow.conv2d_transpose", "image_features_all.iteritems", "len", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.unsorted_segment_sum", "min", "tensorflow.unsorted_segment_max", "tensorflow.l2_regularizer", "tensorflow.gather", "tensorflow.l2_regularizer", "tensorflow.unsorted_segment_sum", "min", "tensorflow.unsorted_segment_max", "tensorflow.l2_regularizer", "tensorflow.gather", "tensorflow.l2_regularizer", "tensorflow.unsorted_segment_sum", "min", "tensorflow.unsorted_segment_max", "tensorflow.l2_regularizer", "tensorflow.gather", "tensorflow.l2_regularizer", "tensorflow.unsorted_segment_sum", "min", "tensorflow.unsorted_segment_max", "tensorflow.l2_regularizer", "tensorflow.gather", "tensorflow.l2_regularizer", "tensorflow.unsorted_segment_sum", "min", "tensorflow.unsorted_segment_max", "tensorflow.l2_regularizer", "tensorflow.gather", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.gather", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.l2_regularizer", "tensorflow.gather", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.l2_regularizer", "tensorflow.gather", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.l2_regularizer", "tensorflow.gather", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.nn.dropout", "numpy.arange", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "len", "tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "len", "tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "len", "tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "len", "tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "len", "tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.reshape", "tensorflow.expand_dims", "len", "tensorflow.reshape", "tensorflow.expand_dims", "len", "tensorflow.reshape", "tensorflow.expand_dims", "len", "tensorflow.reshape", "tensorflow.expand_dims", "len", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.l2_regularizer", "tensorflow.cast", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.build_graph_pointnet", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.build_graph_image", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.augmentation_tf.getCoarseIndicesMapsBatch", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.mergeFeatures", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.mergeFeatures", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.mergeFeatures", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.mergeFeatures", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.mergeFeatures", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.mergeFeatures", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.mergeFeatures", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.mergeFeatures", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.mergeFeatures", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.mergeFeatures", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.mergeFeatures", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.mergeFeatures", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.mergeFeatures", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.mergeFeatures", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.mergeFeatures", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.mergeFeatures", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.mergeFeatures", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.mergeFeatures", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.mergeFeatures", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.mergeFeatures", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.mergeFeatures", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.mergeFeatures", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.mergeFeatures", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.mergeFeatures", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.mergeFeatures", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.mergeFeatures", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.mergeFeatures", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.mergeFeatures", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.mergeFeatures"], ["", "def", "build_graph", "(", "options", ",", "input_dict", ")", ":", "\n", "\n", "    ", "branches_options", "=", "set", "(", "options", ".", "branches", ")", "\n", "simple_option", "=", "set", "(", "[", "'0'", ",", "'6'", ",", "'7'", "]", ")", "\n", "if", "(", "simple_option", "|", "branches_options", ")", "==", "simple_option", ":", "\n", "        ", "return", "build_graph_pointnet", "(", "options", ",", "input_dict", ")", "\n", "\n", "", "if", "options", ".", "branches", "==", "'4'", ":", "\n", "        ", "return", "build_graph_image", "(", "options", ",", "input_dict", ")", "\n", "\n", "", "pointcloud_inp_all", "=", "input_dict", "[", "'points'", "]", "\n", "pointcloud_indices_inp_all", "=", "input_dict", "[", "'point_indices'", "]", "\n", "\n", "\n", "if", "len", "(", "options", ".", "gpu_id", ")", ">", "1", ":", "\n", "        ", "pointcloud_inps", "=", "tf", ".", "split", "(", "pointcloud_inp_all", ",", "len", "(", "options", ".", "gpu_id", ")", ",", "axis", "=", "0", ")", "\n", "pointcloud_indices_inps", "=", "tf", ".", "split", "(", "pointcloud_indices_inp_all", ",", "len", "(", "options", ".", "gpu_id", ")", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "pointcloud_inps", "=", "[", "pointcloud_inp_all", "]", "\n", "pointcloud_indices_inps", "=", "[", "pointcloud_indices_inp_all", "]", "\n", "pass", "\n", "#print(pointcloud_inps)", "\n", "#print(pointcloud_inps[0])", "\n", "", "if", "'4'", "in", "options", ".", "branches", ":", "\n", "        ", "image_features_all", "=", "input_dict", "[", "'image_features'", "]", "\n", "if", "len", "(", "options", ".", "gpu_id", ")", ">", "1", ":", "\n", "            ", "img_features", "=", "[", "tf", ".", "split", "(", "features", ",", "len", "(", "options", ".", "gpu_id", ")", ",", "axis", "=", "0", ")", "for", "k", ",", "features", "in", "image_features_all", ".", "iteritems", "(", ")", "]", "\n", "", "else", ":", "\n", "            ", "img_features", "=", "[", "[", "features", "for", "k", ",", "features", "in", "image_features_all", ".", "iteritems", "(", ")", "]", "]", "\n", "pass", "\n", "", "", "else", ":", "\n", "        ", "img_features", "=", "[", "None", "for", "_", "in", "xrange", "(", "len", "(", "options", ".", "gpu_id", ")", ")", "]", "\n", "pass", "\n", "\n", "#pointcloud_inp = tf.placeholder(tf.float32,shape=(options.batchSize, options.numPoints, options.numInputChannels),name='pointcloud_inp')", "\n", "#pointcloud_indices_inp = tf.placeholder(tf.int32,shape=(options.batchSize, 6, options.numPoints),name='pointcloud_indices_inp')", "\n", "\n", "", "pred_dicts", "=", "[", "]", "\n", "debug_dicts", "=", "[", "]", "\n", "reused", "=", "False", "\n", "for", "i", ",", "pointcloud_inp", ",", "pointcloud_indices_inp", ",", "img_feature", "in", "zip", "(", "options", ".", "gpu_id", ",", "pointcloud_inps", ",", "pointcloud_indices_inps", ",", "img_features", ")", ":", "\n", "#for i in range(1):", "\n", "        ", "with", "tf", ".", "device", "(", "'/gpu:%s'", "%", "int", "(", "i", ")", ")", ",", "tf", ".", "variable_scope", "(", "'floorplan_net'", ",", "reuse", "=", "reused", ")", ",", "slim", ".", "arg_scope", "(", "[", "slim", ".", "model_variable", ",", "slim", ".", "variable", "]", ",", "device", "=", "'/cpu:0'", ")", ":", "\n", "\n", "# if True:", "\n", "#     pointcloud_inp = input_dict['points']", "\n", "#     pointcloud_indices_inp = input_dict['point_indices']", "\n", "#     if '4' in options.branches:", "\n", "#         img_feature = input_dict['image_features']", "\n", "#         pass", "\n", "#     with tf.device('/gpu:0'):", "\n", "\n", "            ", "reused", "=", "True", "\n", "debug_dict", "=", "{", "}", "\n", "tf", ".", "set_random_seed", "(", "1029", ")", "\n", "#tflearn.init_graph(seed=1029,num_cores=2,gpu_memory_fraction=1.0,soft_placement=False, log_device=True)", "\n", "\n", "if", "'d'", "in", "options", ".", "augmentation", ":", "\n", "#keep_prob = tf.random_uniform([1], minval=0.5, maxval=1.0)[0]", "\n", "                ", "keep_prob", "=", "0.5", "\n", "pointcloud_inp", "=", "tf", ".", "nn", ".", "dropout", "(", "pointcloud_inp", ",", "keep_prob", ",", "noise_shape", "=", "[", "options", ".", "batchSize", ",", "NUM_POINTS", ",", "1", "]", ")", "*", "keep_prob", "\n", "pointcloud_indices_inp", "=", "tf", ".", "cast", "(", "tf", ".", "round", "(", "tf", ".", "nn", ".", "dropout", "(", "tf", ".", "cast", "(", "pointcloud_indices_inp", ",", "np", ".", "float32", ")", ",", "keep_prob", ")", "*", "keep_prob", ")", ",", "tf", ".", "int32", ")", "\n", "pass", "\n", "\n", "", "pointcloud_indices_inp", "=", "getCoarseIndicesMapsBatch", "(", "pointcloud_indices_inp", ",", "WIDTH", ",", "HEIGHT", ")", "\n", "batchIndexOffsets", "=", "[", "]", "\n", "for", "c", "in", "xrange", "(", "6", ")", ":", "\n", "                ", "batchIndexOffsets", ".", "append", "(", "(", "np", ".", "arange", "(", "options", ".", "batchSize", "/", "len", "(", "options", ".", "gpu_id", ")", ",", "dtype", "=", "np", ".", "int32", ")", ")", "*", "SIZES", "[", "c", "]", "*", "SIZES", "[", "c", "]", ")", "\n", "continue", "\n", "", "batchIndexOffsets", "=", "tf", ".", "expand_dims", "(", "tf", ".", "stack", "(", "batchIndexOffsets", ",", "axis", "=", "0", ")", ",", "-", "1", ")", "\n", "\n", "#print(pointcloud_indices_inp, batchIndexOffsets)", "\n", "#exit(1)", "\n", "\n", "indices_maps", "=", "pointcloud_indices_inp", "+", "batchIndexOffsets", "\n", "\n", "\n", "x0", "=", "tf", ".", "expand_dims", "(", "pointcloud_inp", ",", "-", "1", ")", "\n", "\n", "x0_topdown", "=", "tf", ".", "unsorted_segment_sum", "(", "tf", ".", "reshape", "(", "x0", ",", "(", "-", "1", ",", "NUM_CHANNELS", "[", "0", "]", ")", ")", ",", "tf", ".", "reshape", "(", "indices_maps", "[", "0", "]", ",", "(", "-", "1", ",", ")", ")", ",", "num_segments", "=", "options", ".", "batchSize", "/", "len", "(", "options", ".", "gpu_id", ")", "*", "SIZES", "[", "0", "]", "*", "SIZES", "[", "0", "]", ")", "/", "options", ".", "sumScale", "\n", "x0_topdown", "=", "tf", ".", "reshape", "(", "x0_topdown", ",", "(", "options", ".", "batchSize", "/", "len", "(", "options", ".", "gpu_id", ")", ",", "SIZES", "[", "0", "]", ",", "SIZES", "[", "0", "]", ",", "-", "1", ")", ")", "\n", "x0_down", "=", "x0_topdown", "\n", "\n", "if", "options", ".", "branches", "==", "'1'", ":", "\n", "                ", "x1_down", "=", "slim", ".", "conv2d", "(", "x0_down", ",", "NUM_CHANNELS", "[", "1", "]", ",", "(", "3", ",", "3", ")", ",", "stride", "=", "2", ",", "activation_fn", "=", "nn", ".", "relu", ",", "normalizer_fn", "=", "bn_func", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ")", "\n", "x2_down", "=", "slim", ".", "conv2d", "(", "x1_down", ",", "NUM_CHANNELS", "[", "2", "]", ",", "(", "3", ",", "3", ")", ",", "stride", "=", "2", ",", "activation_fn", "=", "nn", ".", "relu", ",", "normalizer_fn", "=", "bn_func", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ")", "\n", "x3_down", "=", "slim", ".", "conv2d", "(", "x2_down", ",", "NUM_CHANNELS", "[", "3", "]", ",", "(", "3", ",", "3", ")", ",", "stride", "=", "2", ",", "activation_fn", "=", "nn", ".", "relu", ",", "normalizer_fn", "=", "bn_func", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ")", "\n", "x4_down", "=", "slim", ".", "conv2d", "(", "x3_down", ",", "NUM_CHANNELS", "[", "4", "]", ",", "(", "3", ",", "3", ")", ",", "stride", "=", "2", ",", "activation_fn", "=", "nn", ".", "relu", ",", "normalizer_fn", "=", "bn_func", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ")", "\n", "x5_down", "=", "slim", ".", "conv2d", "(", "x4_down", ",", "NUM_CHANNELS", "[", "5", "]", ",", "(", "3", ",", "3", ")", ",", "stride", "=", "2", ",", "activation_fn", "=", "nn", ".", "relu", ",", "normalizer_fn", "=", "bn_func", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ")", "\n", "x5_up", "=", "x5_down", "\n", "", "else", ":", "\n", "                ", "x1", "=", "slim", ".", "conv2d", "(", "x0", ",", "NUM_CHANNELS", "[", "1", "]", ",", "(", "1", ",", "NUM_CHANNELS", "[", "0", "]", ")", ",", "stride", "=", "1", ",", "activation_fn", "=", "nn", ".", "relu", ",", "padding", "=", "'valid'", ",", "normalizer_fn", "=", "bn_func", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ")", "\n", "if", "options", ".", "poolingTypes", "[", "0", "]", "==", "'s'", ":", "\n", "                    ", "x1_topdown", "=", "tf", ".", "unsorted_segment_sum", "(", "tf", ".", "reshape", "(", "x1", ",", "(", "-", "1", ",", "NUM_CHANNELS", "[", "1", "]", ")", ")", ",", "tf", ".", "reshape", "(", "indices_maps", "[", "1", "]", ",", "(", "-", "1", ",", ")", ")", ",", "num_segments", "=", "options", ".", "batchSize", "/", "len", "(", "options", ".", "gpu_id", ")", "*", "SIZES", "[", "1", "]", "*", "SIZES", "[", "1", "]", ")", "/", "min", "(", "options", ".", "sumScale", "*", "4", ",", "(", "options", ".", "sumScale", "-", "1", ")", "*", "10000", "+", "1", ")", "\n", "", "else", ":", "\n", "                    ", "x1_topdown", "=", "tf", ".", "maximum", "(", "tf", ".", "unsorted_segment_max", "(", "tf", ".", "reshape", "(", "x1", ",", "(", "-", "1", ",", "NUM_CHANNELS", "[", "1", "]", ")", ")", ",", "tf", ".", "reshape", "(", "indices_maps", "[", "1", "]", ",", "(", "-", "1", ",", ")", ")", ",", "num_segments", "=", "options", ".", "batchSize", "/", "len", "(", "options", ".", "gpu_id", ")", "*", "SIZES", "[", "1", "]", "*", "SIZES", "[", "1", "]", ")", ",", "0", ")", "\n", "pass", "\n", "\n", "", "x1_topdown", "=", "tf", ".", "reshape", "(", "x1_topdown", ",", "(", "options", ".", "batchSize", "/", "len", "(", "options", ".", "gpu_id", ")", ",", "SIZES", "[", "1", "]", ",", "SIZES", "[", "1", "]", ",", "-", "1", ")", ")", "\n", "x1_down", "=", "slim", ".", "conv2d", "(", "x0_down", ",", "NUM_CHANNELS", "[", "1", "]", ",", "(", "3", ",", "3", ")", ",", "stride", "=", "2", ",", "activation_fn", "=", "nn", ".", "relu", ",", "normalizer_fn", "=", "bn_func", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ")", "\n", "if", "'2'", "in", "options", ".", "branches", ":", "\n", "                    ", "x1_unproject", "=", "tf", ".", "reshape", "(", "tf", ".", "gather", "(", "tf", ".", "reshape", "(", "x1_down", ",", "(", "-", "1", ",", "NUM_CHANNELS", "[", "1", "]", ")", ")", ",", "indices_maps", "[", "1", "]", ",", "validate_indices", "=", "False", ")", ",", "(", "options", ".", "batchSize", "/", "len", "(", "options", ".", "gpu_id", ")", ",", "options", ".", "numPoints", ",", "-", "1", ")", ")", "\n", "x1", "=", "mergeFeatures", "(", "[", "x1", ",", "tf", ".", "expand_dims", "(", "x1_unproject", ",", "2", ")", "]", ")", "\n", "pass", "\n", "\n", "", "if", "'0'", "in", "options", ".", "branches", ":", "\n", "                    ", "x1_down", "=", "mergeFeatures", "(", "[", "x1_topdown", ",", "x1_down", "]", ")", "\n", "pass", "\n", "\n", "\n", "", "x2", "=", "slim", ".", "conv2d", "(", "x1", ",", "NUM_CHANNELS", "[", "2", "]", ",", "(", "1", ",", "1", ")", ",", "stride", "=", "1", ",", "activation_fn", "=", "nn", ".", "relu", ",", "normalizer_fn", "=", "bn_func", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ")", "\n", "if", "options", ".", "poolingTypes", "[", "1", "]", "==", "'s'", ":", "\n", "                    ", "x2_topdown", "=", "tf", ".", "unsorted_segment_sum", "(", "tf", ".", "reshape", "(", "x2", ",", "(", "-", "1", ",", "NUM_CHANNELS", "[", "2", "]", ")", ")", ",", "tf", ".", "reshape", "(", "indices_maps", "[", "2", "]", ",", "(", "-", "1", ",", ")", ")", ",", "num_segments", "=", "options", ".", "batchSize", "/", "len", "(", "options", ".", "gpu_id", ")", "*", "SIZES", "[", "2", "]", "*", "SIZES", "[", "2", "]", ")", "/", "min", "(", "options", ".", "sumScale", "*", "16", ",", "(", "options", ".", "sumScale", "-", "1", ")", "*", "10000", "+", "1", ")", "\n", "", "else", ":", "\n", "                    ", "x2_topdown", "=", "tf", ".", "maximum", "(", "tf", ".", "unsorted_segment_max", "(", "tf", ".", "reshape", "(", "x2", ",", "(", "-", "1", ",", "NUM_CHANNELS", "[", "2", "]", ")", ")", ",", "tf", ".", "reshape", "(", "indices_maps", "[", "2", "]", ",", "(", "-", "1", ",", ")", ")", ",", "num_segments", "=", "options", ".", "batchSize", "/", "len", "(", "options", ".", "gpu_id", ")", "*", "SIZES", "[", "2", "]", "*", "SIZES", "[", "2", "]", ")", ",", "0", ")", "\n", "pass", "\n", "\n", "", "x2_topdown", "=", "tf", ".", "reshape", "(", "x2_topdown", ",", "(", "options", ".", "batchSize", "/", "len", "(", "options", ".", "gpu_id", ")", ",", "SIZES", "[", "2", "]", ",", "SIZES", "[", "2", "]", ",", "-", "1", ")", ")", "\n", "x2_down", "=", "slim", ".", "conv2d", "(", "x1_down", ",", "NUM_CHANNELS", "[", "2", "]", ",", "(", "3", ",", "3", ")", ",", "stride", "=", "2", ",", "activation_fn", "=", "nn", ".", "relu", ",", "normalizer_fn", "=", "bn_func", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ")", "\n", "if", "'2'", "in", "options", ".", "branches", ":", "\n", "                    ", "x2_unproject", "=", "tf", ".", "reshape", "(", "tf", ".", "gather", "(", "tf", ".", "reshape", "(", "x2_down", ",", "(", "-", "1", ",", "NUM_CHANNELS", "[", "2", "]", ")", ")", ",", "indices_maps", "[", "2", "]", ",", "validate_indices", "=", "False", ")", ",", "(", "options", ".", "batchSize", "/", "len", "(", "options", ".", "gpu_id", ")", ",", "options", ".", "numPoints", ",", "-", "1", ")", ")", "\n", "x2", "=", "mergeFeatures", "(", "[", "x2", ",", "tf", ".", "expand_dims", "(", "x2_unproject", ",", "2", ")", "]", ")", "\n", "pass", "\n", "", "if", "'0'", "in", "options", ".", "branches", ":", "\n", "                    ", "x2_down", "=", "mergeFeatures", "(", "[", "x2_topdown", ",", "x2_down", "]", ")", "\n", "pass", "\n", "\n", "\n", "", "x3", "=", "slim", ".", "conv2d", "(", "x2", ",", "NUM_CHANNELS", "[", "3", "]", ",", "(", "1", ",", "1", ")", ",", "stride", "=", "1", ",", "activation_fn", "=", "nn", ".", "relu", ",", "normalizer_fn", "=", "bn_func", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ")", "\n", "if", "options", ".", "poolingTypes", "[", "2", "]", "==", "'s'", ":", "\n", "                    ", "x3_topdown", "=", "tf", ".", "unsorted_segment_sum", "(", "tf", ".", "reshape", "(", "x3", ",", "(", "-", "1", ",", "NUM_CHANNELS", "[", "3", "]", ")", ")", ",", "tf", ".", "reshape", "(", "indices_maps", "[", "3", "]", ",", "(", "-", "1", ",", ")", ")", ",", "num_segments", "=", "options", ".", "batchSize", "/", "len", "(", "options", ".", "gpu_id", ")", "*", "SIZES", "[", "3", "]", "*", "SIZES", "[", "3", "]", ")", "/", "min", "(", "options", ".", "sumScale", "*", "64", ",", "(", "options", ".", "sumScale", "-", "1", ")", "*", "10000", "+", "1", ")", "\n", "", "else", ":", "\n", "                    ", "x3_topdown", "=", "tf", ".", "maximum", "(", "tf", ".", "unsorted_segment_max", "(", "tf", ".", "reshape", "(", "x3", ",", "(", "-", "1", ",", "NUM_CHANNELS", "[", "3", "]", ")", ")", ",", "tf", ".", "reshape", "(", "indices_maps", "[", "3", "]", ",", "(", "-", "1", ",", ")", ")", ",", "num_segments", "=", "options", ".", "batchSize", "/", "len", "(", "options", ".", "gpu_id", ")", "*", "SIZES", "[", "3", "]", "*", "SIZES", "[", "3", "]", ")", ",", "0", ")", "\n", "pass", "\n", "\n", "", "x3_topdown", "=", "tf", ".", "reshape", "(", "x3_topdown", ",", "(", "options", ".", "batchSize", "/", "len", "(", "options", ".", "gpu_id", ")", ",", "SIZES", "[", "3", "]", ",", "SIZES", "[", "3", "]", ",", "-", "1", ")", ")", "\n", "x3_down", "=", "slim", ".", "conv2d", "(", "x2_down", ",", "NUM_CHANNELS", "[", "3", "]", ",", "(", "3", ",", "3", ")", ",", "stride", "=", "2", ",", "activation_fn", "=", "nn", ".", "relu", ",", "normalizer_fn", "=", "bn_func", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ")", "\n", "if", "'2'", "in", "options", ".", "branches", ":", "\n", "                    ", "x3_unproject", "=", "tf", ".", "reshape", "(", "tf", ".", "gather", "(", "tf", ".", "reshape", "(", "x3_down", ",", "(", "-", "1", ",", "NUM_CHANNELS", "[", "3", "]", ")", ")", ",", "indices_maps", "[", "3", "]", ",", "validate_indices", "=", "False", ")", ",", "(", "options", ".", "batchSize", "/", "len", "(", "options", ".", "gpu_id", ")", ",", "options", ".", "numPoints", ",", "-", "1", ")", ")", "\n", "x3", "=", "mergeFeatures", "(", "[", "x3", ",", "tf", ".", "expand_dims", "(", "x3_unproject", ",", "2", ")", "]", ")", "\n", "pass", "\n", "\n", "", "if", "'0'", "in", "options", ".", "branches", ":", "\n", "                    ", "x3_down", "=", "mergeFeatures", "(", "[", "x3_topdown", ",", "x3_down", "]", ")", "\n", "pass", "\n", "\n", "\n", "", "x4", "=", "slim", ".", "conv2d", "(", "x3", ",", "NUM_CHANNELS", "[", "4", "]", ",", "(", "1", ",", "1", ")", ",", "stride", "=", "1", ",", "activation_fn", "=", "nn", ".", "relu", ",", "normalizer_fn", "=", "bn_func", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ")", "\n", "if", "options", ".", "poolingTypes", "[", "3", "]", "==", "'s'", ":", "\n", "                     ", "x4_topdown", "=", "tf", ".", "unsorted_segment_sum", "(", "tf", ".", "reshape", "(", "x4", ",", "(", "-", "1", ",", "NUM_CHANNELS", "[", "4", "]", ")", ")", ",", "tf", ".", "reshape", "(", "indices_maps", "[", "4", "]", ",", "(", "-", "1", ",", ")", ")", ",", "num_segments", "=", "options", ".", "batchSize", "/", "len", "(", "options", ".", "gpu_id", ")", "*", "SIZES", "[", "4", "]", "*", "SIZES", "[", "4", "]", ")", "/", "min", "(", "options", ".", "sumScale", "*", "256", ",", "(", "options", ".", "sumScale", "-", "1", ")", "*", "10000", "+", "1", ")", "\n", "", "else", ":", "\n", "                    ", "x4_topdown", "=", "tf", ".", "maximum", "(", "tf", ".", "unsorted_segment_max", "(", "tf", ".", "reshape", "(", "x4", ",", "(", "-", "1", ",", "NUM_CHANNELS", "[", "4", "]", ")", ")", ",", "tf", ".", "reshape", "(", "indices_maps", "[", "4", "]", ",", "(", "-", "1", ",", ")", ")", ",", "num_segments", "=", "options", ".", "batchSize", "/", "len", "(", "options", ".", "gpu_id", ")", "*", "SIZES", "[", "4", "]", "*", "SIZES", "[", "4", "]", ")", ",", "0", ")", "\n", "pass", "\n", "", "x4_topdown", "=", "tf", ".", "reshape", "(", "x4_topdown", ",", "(", "options", ".", "batchSize", "/", "len", "(", "options", ".", "gpu_id", ")", ",", "SIZES", "[", "4", "]", ",", "SIZES", "[", "4", "]", ",", "-", "1", ")", ")", "\n", "x4_down", "=", "slim", ".", "conv2d", "(", "x3_down", ",", "NUM_CHANNELS", "[", "4", "]", ",", "(", "3", ",", "3", ")", ",", "stride", "=", "2", ",", "activation_fn", "=", "nn", ".", "relu", ",", "normalizer_fn", "=", "bn_func", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ")", "\n", "if", "'2'", "in", "options", ".", "branches", ":", "\n", "                    ", "x4_unproject", "=", "tf", ".", "reshape", "(", "tf", ".", "gather", "(", "tf", ".", "reshape", "(", "x4_down", ",", "(", "-", "1", ",", "NUM_CHANNELS", "[", "4", "]", ")", ")", ",", "indices_maps", "[", "4", "]", ",", "validate_indices", "=", "False", ")", ",", "(", "options", ".", "batchSize", "/", "len", "(", "options", ".", "gpu_id", ")", ",", "options", ".", "numPoints", ",", "-", "1", ")", ")", "\n", "x4", "=", "mergeFeatures", "(", "[", "x4", ",", "tf", ".", "expand_dims", "(", "x4_unproject", ",", "2", ")", "]", ")", "\n", "pass", "\n", "", "if", "'0'", "in", "options", ".", "branches", ":", "\n", "                    ", "x4_down", "=", "mergeFeatures", "(", "[", "x4_topdown", ",", "x4_down", "]", ")", "\n", "pass", "\n", "\n", "\n", "", "x5", "=", "slim", ".", "conv2d", "(", "x4", ",", "NUM_CHANNELS", "[", "5", "]", ",", "(", "1", ",", "1", ")", ",", "stride", "=", "1", ",", "activation_fn", "=", "nn", ".", "relu", ",", "normalizer_fn", "=", "bn_func", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ")", "\n", "if", "options", ".", "poolingTypes", "[", "4", "]", "==", "'s'", ":", "\n", "                    ", "x5_topdown", "=", "tf", ".", "unsorted_segment_sum", "(", "tf", ".", "reshape", "(", "x5", ",", "(", "-", "1", ",", "NUM_CHANNELS", "[", "5", "]", ")", ")", ",", "tf", ".", "reshape", "(", "indices_maps", "[", "5", "]", ",", "(", "-", "1", ",", ")", ")", ",", "num_segments", "=", "options", ".", "batchSize", "/", "len", "(", "options", ".", "gpu_id", ")", "*", "SIZES", "[", "5", "]", "*", "SIZES", "[", "5", "]", ")", "/", "min", "(", "options", ".", "sumScale", "*", "1024", ",", "(", "options", ".", "sumScale", "-", "1", ")", "*", "10000", "+", "1", ")", "\n", "", "else", ":", "\n", "                    ", "x5_topdown", "=", "tf", ".", "maximum", "(", "tf", ".", "unsorted_segment_max", "(", "tf", ".", "reshape", "(", "x5", ",", "(", "-", "1", ",", "NUM_CHANNELS", "[", "5", "]", ")", ")", ",", "tf", ".", "reshape", "(", "indices_maps", "[", "5", "]", ",", "(", "-", "1", ",", ")", ")", ",", "num_segments", "=", "options", ".", "batchSize", "/", "len", "(", "options", ".", "gpu_id", ")", "*", "SIZES", "[", "5", "]", "*", "SIZES", "[", "5", "]", ")", ",", "0", ")", "\n", "pass", "\n", "", "x5_topdown", "=", "tf", ".", "reshape", "(", "x5_topdown", ",", "(", "options", ".", "batchSize", "/", "len", "(", "options", ".", "gpu_id", ")", ",", "SIZES", "[", "5", "]", ",", "SIZES", "[", "5", "]", ",", "-", "1", ")", ")", "\n", "x5_down", "=", "slim", ".", "conv2d", "(", "x4_down", ",", "NUM_CHANNELS", "[", "5", "]", ",", "(", "3", ",", "3", ")", ",", "stride", "=", "2", ",", "activation_fn", "=", "nn", ".", "relu", ",", "normalizer_fn", "=", "bn_func", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ")", "\n", "if", "'2'", "in", "options", ".", "branches", ":", "\n", "                    ", "x5_unproject", "=", "tf", ".", "reshape", "(", "tf", ".", "gather", "(", "tf", ".", "reshape", "(", "x5_down", ",", "(", "-", "1", ",", "NUM_CHANNELS", "[", "5", "]", ")", ")", ",", "indices_maps", "[", "5", "]", ",", "validate_indices", "=", "False", ")", ",", "(", "options", ".", "batchSize", "/", "len", "(", "options", ".", "gpu_id", ")", ",", "options", ".", "numPoints", ",", "-", "1", ")", ")", "\n", "x5", "=", "mergeFeatures", "(", "[", "x5", ",", "tf", ".", "expand_dims", "(", "x5_unproject", ",", "2", ")", "]", ")", "\n", "pass", "\n", "", "if", "'0'", "in", "options", ".", "branches", ":", "\n", "                    ", "x5_down", "=", "mergeFeatures", "(", "[", "x5_topdown", ",", "x5_down", "]", ")", "\n", "pass", "\n", "\n", "\n", "", "x_fc_topdown", "=", "tflearn", ".", "layers", ".", "max_pool_2d", "(", "x5", ",", "(", "options", ".", "numPoints", ",", "1", ")", ",", "strides", "=", "1", ",", "padding", "=", "'valid'", ")", "\n", "\n", "x_fc_down", "=", "tflearn", ".", "layers", ".", "max_pool_2d", "(", "x5_down", ",", "(", "SIZES", "[", "5", "]", ",", "SIZES", "[", "5", "]", ")", ",", "strides", "=", "1", ",", "padding", "=", "'valid'", ")", "\n", "if", "'0'", "in", "options", ".", "branches", ":", "\n", "                    ", "x_fc_down", "=", "mergeFeatures", "(", "[", "x_fc_topdown", ",", "x_fc_down", "]", ")", "\n", "pass", "\n", "\n", "# no fully connected layer in the middle", "\n", "#x_fc = tf.reshape(x_fc, (options.batchSize/len(options.gpu_id), -1))", "\n", "#x_fc = slim.fully_connected(x_fc, 256, activation_fn=nn.relu, normalizer_fn=bn_func, weights_regularizer=slim.l2_regularizer(1e-5))", "\n", "#x_fc = slim.fully_connected(x_fc, NUM_CHANNELS[5], activation_fn=nn.relu, normalizer_fn=bn_func, weights_regularizer=slim.l2_regularizer(1e-5))", "\n", "#x_fc = tf.reshape(x_fc, (options.batchSize/len(options.gpu_id), 1, 1, -1))", "\n", "\n", "", "x_fc_up", "=", "tf", ".", "tile", "(", "x_fc_down", ",", "(", "1", ",", "SIZES", "[", "5", "]", ",", "SIZES", "[", "5", "]", ",", "1", ")", ")", "\n", "x5_up", "=", "mergeFeatures", "(", "[", "x_fc_up", ",", "x5_down", "]", ")", "\n", "pass", "\n", "\n", "\n", "", "if", "'3'", "in", "options", ".", "branches", ":", "\n", "                ", "if", "'0'", "in", "options", ".", "branches", ":", "\n", "                    ", "x_fc", "=", "tf", ".", "tile", "(", "x_fc_down", ",", "(", "1", ",", "options", ".", "numPoints", ",", "1", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "                    ", "x_fc", "=", "tf", ".", "tile", "(", "x_fc_topdown", ",", "(", "1", ",", "options", ".", "numPoints", ",", "1", ",", "1", ")", ")", "\n", "pass", "\n", "# merge local point features and global point features", "\n", "", "x_fc", "=", "tf", ".", "concat", "(", "[", "x_fc", ",", "x3", "]", ",", "axis", "=", "-", "1", ")", "\n", "x5", "=", "slim", ".", "conv2d", "(", "x_fc", ",", "NUM_CHANNELS", "[", "5", "]", ",", "(", "1", ",", "1", ")", ",", "stride", "=", "1", ",", "activation_fn", "=", "nn", ".", "relu", ",", "normalizer_fn", "=", "bn_func", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ")", "\n", "\n", "pass", "\n", "", "if", "'4'", "in", "options", ".", "branches", ":", "\n", "                ", "x5_up", "=", "mergeFeatures", "(", "[", "x5_up", ",", "img_feature", "[", "4", "]", "]", ")", "\n", "pass", "\n", "\n", "\n", "", "x4_up", "=", "slim", ".", "conv2d_transpose", "(", "x5_up", ",", "NUM_CHANNELS", "[", "4", "]", ",", "[", "5", ",", "5", "]", ",", "stride", "=", "2", ",", "activation_fn", "=", "nn", ".", "relu", ",", "normalizer_fn", "=", "bn_func", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ")", "\n", "x4_up", "=", "mergeFeatures", "(", "[", "x4_up", ",", "x4_down", "]", ")", "\n", "\n", "if", "'3'", "in", "options", ".", "branches", ":", "\n", "                ", "x4", "=", "slim", ".", "conv2d", "(", "x5", ",", "NUM_CHANNELS", "[", "4", "]", ",", "(", "1", ",", "1", ")", ",", "stride", "=", "1", ",", "activation_fn", "=", "nn", ".", "relu", ",", "normalizer_fn", "=", "bn_func", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ")", "\n", "if", "'2'", "in", "options", ".", "branches", ":", "\n", "                    ", "x4_up_unproject", "=", "tf", ".", "reshape", "(", "tf", ".", "gather", "(", "tf", ".", "reshape", "(", "x4_up", ",", "(", "-", "1", ",", "NUM_CHANNELS", "[", "4", "]", ")", ")", ",", "indices_maps", "[", "4", "]", ",", "validate_indices", "=", "False", ")", ",", "(", "options", ".", "batchSize", "/", "len", "(", "options", ".", "gpu_id", ")", ",", "options", ".", "numPoints", ",", "-", "1", ")", ")", "\n", "#x4 = tf.add(x4, tf.expand_dims(x4_up_unproject, 2))", "\n", "x4", "=", "mergeFeatures", "(", "[", "x4", ",", "tf", ".", "expand_dims", "(", "x4_up_unproject", ",", "2", ")", "]", ")", "\n", "pass", "\n", "\n", "", "x4_up_topdown", "=", "tf", ".", "maximum", "(", "tf", ".", "unsorted_segment_max", "(", "tf", ".", "reshape", "(", "x4", ",", "(", "-", "1", ",", "NUM_CHANNELS", "[", "4", "]", ")", ")", ",", "tf", ".", "reshape", "(", "indices_maps", "[", "4", "]", ",", "(", "-", "1", ",", ")", ")", ",", "num_segments", "=", "options", ".", "batchSize", "/", "len", "(", "options", ".", "gpu_id", ")", "*", "SIZES", "[", "4", "]", "*", "SIZES", "[", "4", "]", ")", ",", "0", ")", "\n", "x4_up_topdown", "=", "tf", ".", "reshape", "(", "x4_up_topdown", ",", "(", "options", ".", "batchSize", "/", "len", "(", "options", ".", "gpu_id", ")", ",", "SIZES", "[", "4", "]", ",", "SIZES", "[", "4", "]", ",", "-", "1", ")", ")", "\n", "if", "'0'", "in", "options", ".", "branches", ":", "\n", "                    ", "x4_up", "=", "mergeFeatures", "(", "[", "x4_up", ",", "x4_up_topdown", "]", ")", "\n", "pass", "\n", "", "pass", "\n", "", "if", "'4'", "in", "options", ".", "branches", ":", "\n", "                ", "x4_up", "=", "mergeFeatures", "(", "[", "x4_up", ",", "img_feature", "[", "3", "]", "]", ")", "\n", "pass", "\n", "\n", "\n", "", "x3_up", "=", "slim", ".", "conv2d_transpose", "(", "x4_up", ",", "NUM_CHANNELS", "[", "3", "]", ",", "[", "5", ",", "5", "]", ",", "stride", "=", "2", ",", "activation_fn", "=", "nn", ".", "relu", ",", "normalizer_fn", "=", "bn_func", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ")", "\n", "#print(x3_up)", "\n", "x3_up", "=", "mergeFeatures", "(", "[", "x3_up", ",", "x3_down", "]", ")", "\n", "\n", "# if '4' in options.branches:", "\n", "#     img_SIZES = tf.constant([32, 32], dtype='int32')", "\n", "#     resized_image = tf.image.resize_images(img_feature, img_SIZES)", "\n", "#     x3_up = mergeFeatures([x3_up, resized_image])", "\n", "#     pass", "\n", "\n", "if", "'3'", "in", "options", ".", "branches", ":", "\n", "                ", "x3", "=", "slim", ".", "conv2d", "(", "x4", ",", "NUM_CHANNELS", "[", "3", "]", ",", "(", "1", ",", "1", ")", ",", "stride", "=", "1", ",", "activation_fn", "=", "nn", ".", "relu", ",", "normalizer_fn", "=", "bn_func", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ")", "\n", "\n", "if", "'2'", "in", "options", ".", "branches", ":", "\n", "                    ", "x3_up_unproject", "=", "tf", ".", "reshape", "(", "tf", ".", "gather", "(", "tf", ".", "reshape", "(", "x3_up", ",", "(", "-", "1", ",", "NUM_CHANNELS", "[", "3", "]", ")", ")", ",", "indices_maps", "[", "3", "]", ",", "validate_indices", "=", "False", ")", ",", "(", "options", ".", "batchSize", "/", "len", "(", "options", ".", "gpu_id", ")", ",", "options", ".", "numPoints", ",", "-", "1", ")", ")", "\n", "#x3 = tf.add(x3, tf.expand_dims(x3_up_unproject, 2))", "\n", "x3", "=", "mergeFeatures", "(", "[", "x3", ",", "tf", ".", "expand_dims", "(", "x3_up_unproject", ",", "2", ")", "]", ")", "\n", "pass", "\n", "\n", "", "x3_up_topdown", "=", "tf", ".", "maximum", "(", "tf", ".", "unsorted_segment_max", "(", "tf", ".", "reshape", "(", "x3", ",", "(", "-", "1", ",", "NUM_CHANNELS", "[", "3", "]", ")", ")", ",", "tf", ".", "reshape", "(", "indices_maps", "[", "3", "]", ",", "(", "-", "1", ",", ")", ")", ",", "num_segments", "=", "options", ".", "batchSize", "/", "len", "(", "options", ".", "gpu_id", ")", "*", "SIZES", "[", "3", "]", "*", "SIZES", "[", "3", "]", ")", ",", "0", ")", "\n", "x3_up_topdown", "=", "tf", ".", "reshape", "(", "x3_up_topdown", ",", "(", "options", ".", "batchSize", "/", "len", "(", "options", ".", "gpu_id", ")", ",", "SIZES", "[", "3", "]", ",", "SIZES", "[", "3", "]", ",", "-", "1", ")", ")", "\n", "if", "'0'", "in", "options", ".", "branches", ":", "\n", "                    ", "x3_up", "=", "mergeFeatures", "(", "[", "x3_up", ",", "x3_up_topdown", "]", ")", "\n", "pass", "\n", "", "pass", "\n", "", "if", "'4'", "in", "options", ".", "branches", ":", "\n", "                ", "x3_up", "=", "mergeFeatures", "(", "[", "x3_up", ",", "img_feature", "[", "2", "]", "]", ")", "\n", "pass", "\n", "\n", "\n", "", "x2_up", "=", "slim", ".", "conv2d_transpose", "(", "x3_up", ",", "NUM_CHANNELS", "[", "2", "]", ",", "[", "5", ",", "5", "]", ",", "stride", "=", "2", ",", "activation_fn", "=", "nn", ".", "relu", ",", "normalizer_fn", "=", "bn_func", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ")", "\n", "x2_up", "=", "mergeFeatures", "(", "[", "x2_up", ",", "x2_down", "]", ")", "\n", "\n", "if", "'3'", "in", "options", ".", "branches", ":", "\n", "                ", "x2", "=", "slim", ".", "conv2d", "(", "x3", ",", "NUM_CHANNELS", "[", "2", "]", ",", "(", "1", ",", "1", ")", ",", "stride", "=", "1", ",", "activation_fn", "=", "nn", ".", "relu", ",", "normalizer_fn", "=", "bn_func", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ")", "\n", "\n", "if", "'2'", "in", "options", ".", "branches", ":", "\n", "                    ", "x2_up_unproject", "=", "tf", ".", "reshape", "(", "tf", ".", "gather", "(", "tf", ".", "reshape", "(", "x2_up", ",", "(", "-", "1", ",", "NUM_CHANNELS", "[", "2", "]", ")", ")", ",", "indices_maps", "[", "2", "]", ",", "validate_indices", "=", "False", ")", ",", "(", "options", ".", "batchSize", "/", "len", "(", "options", ".", "gpu_id", ")", ",", "options", ".", "numPoints", ",", "-", "1", ")", ")", "\n", "#x2 = tf.add(x2, tf.expand_dims(x2_up_unproject, 2))", "\n", "x2", "=", "mergeFeatures", "(", "[", "x2", ",", "tf", ".", "expand_dims", "(", "x2_up_unproject", ",", "2", ")", "]", ")", "\n", "pass", "\n", "\n", "", "x2_up_topdown", "=", "tf", ".", "maximum", "(", "tf", ".", "unsorted_segment_max", "(", "tf", ".", "reshape", "(", "x2", ",", "(", "-", "1", ",", "NUM_CHANNELS", "[", "2", "]", ")", ")", ",", "tf", ".", "reshape", "(", "indices_maps", "[", "2", "]", ",", "(", "-", "1", ",", ")", ")", ",", "num_segments", "=", "options", ".", "batchSize", "/", "len", "(", "options", ".", "gpu_id", ")", "*", "SIZES", "[", "2", "]", "*", "SIZES", "[", "2", "]", ")", ",", "0", ")", "\n", "x2_up_topdown", "=", "tf", ".", "reshape", "(", "x2_up_topdown", ",", "(", "options", ".", "batchSize", "/", "len", "(", "options", ".", "gpu_id", ")", ",", "SIZES", "[", "2", "]", ",", "SIZES", "[", "2", "]", ",", "-", "1", ")", ")", "\n", "if", "'0'", "in", "options", ".", "branches", ":", "\n", "                    ", "x2_up", "=", "mergeFeatures", "(", "[", "x2_up", ",", "x2_up_topdown", "]", ")", "\n", "pass", "\n", "", "pass", "\n", "", "if", "'4'", "in", "options", ".", "branches", ":", "\n", "                ", "x2_up", "=", "mergeFeatures", "(", "[", "x2_up", ",", "img_feature", "[", "1", "]", "]", ")", "\n", "pass", "\n", "\n", "\n", "", "x1_up", "=", "slim", ".", "conv2d_transpose", "(", "x2_up", ",", "NUM_CHANNELS", "[", "1", "]", ",", "[", "5", ",", "5", "]", ",", "stride", "=", "2", ",", "activation_fn", "=", "nn", ".", "relu", ",", "normalizer_fn", "=", "bn_func", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ")", "\n", "#print(x1_up.shape)", "\n", "#print(x1_down.shape)", "\n", "x1_up", "=", "mergeFeatures", "(", "[", "x1_up", ",", "x1_down", "]", ")", "\n", "\n", "if", "'3'", "in", "options", ".", "branches", ":", "\n", "                ", "x1", "=", "slim", ".", "conv2d", "(", "x2", ",", "NUM_CHANNELS", "[", "1", "]", ",", "(", "1", ",", "1", ")", ",", "stride", "=", "1", ",", "activation_fn", "=", "nn", ".", "relu", ",", "normalizer_fn", "=", "bn_func", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ")", "\n", "\n", "if", "'2'", "in", "options", ".", "branches", ":", "\n", "                    ", "x1_up_unproject", "=", "tf", ".", "reshape", "(", "tf", ".", "gather", "(", "tf", ".", "reshape", "(", "x1_up", ",", "(", "-", "1", ",", "NUM_CHANNELS", "[", "1", "]", ")", ")", ",", "indices_maps", "[", "1", "]", ",", "validate_indices", "=", "False", ")", ",", "(", "options", ".", "batchSize", "/", "len", "(", "options", ".", "gpu_id", ")", ",", "options", ".", "numPoints", ",", "-", "1", ")", ")", "\n", "#print(x1_up_unproject.shape)", "\n", "#x1 = tf.add(x1, tf.expand_dims(x1_up_unproject, 2))", "\n", "x1", "=", "mergeFeatures", "(", "[", "x1", ",", "tf", ".", "expand_dims", "(", "x1_up_unproject", ",", "2", ")", "]", ")", "\n", "pass", "\n", "\n", "", "x1_up_topdown", "=", "tf", ".", "maximum", "(", "tf", ".", "unsorted_segment_max", "(", "tf", ".", "reshape", "(", "x1", ",", "(", "-", "1", ",", "NUM_CHANNELS", "[", "1", "]", ")", ")", ",", "tf", ".", "reshape", "(", "indices_maps", "[", "1", "]", ",", "(", "-", "1", ",", ")", ")", ",", "num_segments", "=", "options", ".", "batchSize", "/", "len", "(", "options", ".", "gpu_id", ")", "*", "SIZES", "[", "1", "]", "*", "SIZES", "[", "1", "]", ")", ",", "0", ")", "\n", "x1_up_topdown", "=", "tf", ".", "reshape", "(", "x1_up_topdown", ",", "(", "options", ".", "batchSize", "/", "len", "(", "options", ".", "gpu_id", ")", ",", "SIZES", "[", "1", "]", ",", "SIZES", "[", "1", "]", ",", "-", "1", ")", ")", "\n", "if", "'1'", "not", "in", "options", ".", "branches", ":", "\n", "                    ", "x1_up", "=", "x1_up_topdown", "\n", "", "else", ":", "\n", "#print(x1_up_topdown)", "\n", "                    ", "x1_up", "=", "mergeFeatures", "(", "[", "x1_up", ",", "x1_up_topdown", "]", ")", "\n", "pass", "\n", "", "pass", "\n", "", "if", "'4'", "in", "options", ".", "branches", ":", "\n", "                ", "x1_up", "=", "mergeFeatures", "(", "[", "x1_up", ",", "img_feature", "[", "0", "]", "]", ")", "\n", "pass", "\n", "\n", "#print(x1_up)", "\n", "#print(NUM_ROOMS)", "\n", "", "if", "options", ".", "outputLayers", "in", "[", "'two'", ",", "'nobn'", "]", ":", "\n", "                ", "if", "options", ".", "outputLayers", "==", "'two'", ":", "\n", "                    ", "pred_corner", "=", "slim", ".", "conv2d_transpose", "(", "x1_up", ",", "NUM_CHANNELS", "[", "1", "]", ",", "[", "5", ",", "5", "]", ",", "stride", "=", "2", ",", "activation_fn", "=", "nn", ".", "relu", ",", "normalizer_fn", "=", "bn_func", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ",", "scope", "=", "'pred_corner'", ")", "\n", "pred_icon", "=", "slim", ".", "conv2d_transpose", "(", "x1_up", ",", "NUM_CHANNELS", "[", "1", "]", ",", "[", "5", ",", "5", "]", ",", "stride", "=", "2", ",", "activation_fn", "=", "nn", ".", "relu", ",", "normalizer_fn", "=", "bn_func", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ",", "scope", "=", "'pred_icon'", ")", "\n", "pred_room", "=", "slim", ".", "conv2d_transpose", "(", "x1_up", ",", "NUM_CHANNELS", "[", "1", "]", ",", "[", "5", ",", "5", "]", ",", "stride", "=", "2", ",", "activation_fn", "=", "nn", ".", "relu", ",", "normalizer_fn", "=", "bn_func", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ",", "scope", "=", "'pred_room'", ")", "\n", "", "else", ":", "\n", "                    ", "pred_corner", "=", "slim", ".", "conv2d_transpose", "(", "x1_up", ",", "NUM_CHANNELS", "[", "1", "]", ",", "[", "5", ",", "5", "]", ",", "stride", "=", "2", ",", "activation_fn", "=", "nn", ".", "relu", ",", "normalizer_fn", "=", "None", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ",", "scope", "=", "'pred_corner'", ")", "\n", "pred_icon", "=", "slim", ".", "conv2d_transpose", "(", "x1_up", ",", "NUM_CHANNELS", "[", "1", "]", ",", "[", "5", ",", "5", "]", ",", "stride", "=", "2", ",", "activation_fn", "=", "nn", ".", "relu", ",", "normalizer_fn", "=", "None", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ",", "scope", "=", "'pred_icon'", ")", "\n", "pred_room", "=", "slim", ".", "conv2d_transpose", "(", "x1_up", ",", "NUM_CHANNELS", "[", "1", "]", ",", "[", "5", ",", "5", "]", ",", "stride", "=", "2", ",", "activation_fn", "=", "nn", ".", "relu", ",", "normalizer_fn", "=", "None", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ",", "scope", "=", "'pred_room'", ")", "\n", "pass", "\n", "\n", "", "pred_corner", "=", "slim", ".", "conv2d", "(", "pred_corner", ",", "NUM_CORNERS", ",", "(", "1", ",", "1", ")", ",", "stride", "=", "1", ",", "activation_fn", "=", "None", ",", "normalizer_fn", "=", "None", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ")", "\n", "pred_icon", "=", "slim", ".", "conv2d", "(", "pred_icon", ",", "NUM_ICONS", ",", "(", "1", ",", "1", ")", ",", "stride", "=", "1", ",", "activation_fn", "=", "None", ",", "normalizer_fn", "=", "None", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ")", "\n", "pred_room", "=", "slim", ".", "conv2d", "(", "pred_room", ",", "NUM_ROOMS", ",", "(", "1", ",", "1", ")", ",", "stride", "=", "1", ",", "activation_fn", "=", "None", ",", "normalizer_fn", "=", "None", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ")", "\n", "", "else", ":", "\n", "                ", "pred_corner", "=", "slim", ".", "conv2d_transpose", "(", "x1_up", ",", "NUM_CORNERS", ",", "[", "5", ",", "5", "]", ",", "stride", "=", "2", ",", "activation_fn", "=", "None", ",", "normalizer_fn", "=", "bn_func", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ",", "scope", "=", "'pred_corner'", ")", "\n", "pred_icon", "=", "slim", ".", "conv2d_transpose", "(", "x1_up", ",", "NUM_ICONS", ",", "[", "5", ",", "5", "]", ",", "stride", "=", "2", ",", "activation_fn", "=", "None", ",", "normalizer_fn", "=", "bn_func", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ",", "scope", "=", "'pred_icon'", ")", "\n", "pred_room", "=", "slim", ".", "conv2d_transpose", "(", "x1_up", ",", "NUM_ROOMS", ",", "[", "5", ",", "5", "]", ",", "stride", "=", "2", ",", "activation_fn", "=", "None", ",", "normalizer_fn", "=", "bn_func", ",", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "1e-5", ")", ",", "scope", "=", "'pred_room'", ")", "\n", "pass", "\n", "\n", "\n", "", "pred_dict", "=", "{", "'corner'", ":", "pred_corner", ",", "'icon'", ":", "pred_icon", ",", "'room'", ":", "pred_room", "}", "\n", "debug_dict", "[", "'x0_topdown'", "]", "=", "x0_topdown", "\n", "\n", "# x1_topdown = tf.unsorted_segment_sum(tf.reshape(x0, (-1, NUM_CHANNELS[0])), tf.reshape(indices_maps[1], (-1, )), num_segments=options.batchSize/len(options.gpu_id) * SIZES[1] * SIZES[1]) / (options.sumScale * 4)", "\n", "# x1_topdown = tf.reshape(x1_topdown, (options.batchSize/len(options.gpu_id), SIZES[1], SIZES[1], -1))", "\n", "# debug_dict['x1_topdown'] = x1_topdown", "\n", "\n", "# x2_topdown = tf.unsorted_segment_sum(tf.reshape(x0, (-1, NUM_CHANNELS[0])), tf.reshape(indices_maps[2], (-1, )), num_segments=options.batchSize/len(options.gpu_id) * SIZES[2] * SIZES[2]) / (options.sumScale * 16)", "\n", "# x2_topdown = tf.reshape(x2_topdown, (options.batchSize/len(options.gpu_id), SIZES[2], SIZES[2], -1))", "\n", "# debug_dict['x2_topdown'] = x2_topdown", "\n", "# debug_dict['x1_up'] = x1_up", "\n", "#debug_dict['resized_image'] = resized_image", "\n", "\n", "pred_dicts", ".", "append", "(", "pred_dict", ")", "\n", "debug_dicts", ".", "append", "(", "debug_dict", ")", "\n", "pass", "\n", "", "continue", "\n", "\n", "", "pred_dict", "=", "pred_dicts", "[", "0", "]", "\n", "for", "pred", "in", "pred_dicts", "[", "1", ":", "]", ":", "\n", "        ", "for", "k", ",", "v", "in", "pred", ".", "items", "(", ")", ":", "\n", "            ", "pred_dict", "[", "k", "]", "=", "tf", ".", "concat", "(", "[", "pred_dict", "[", "k", "]", ",", "v", "]", ",", "axis", "=", "0", ")", "\n", "", "", "debug_dict", "=", "debug_dicts", "[", "0", "]", "\n", "for", "de", "in", "debug_dicts", "[", "1", ":", "]", ":", "\n", "        ", "for", "k", ",", "v", "in", "de", ".", "items", "(", ")", ":", "\n", "            ", "debug_dict", "[", "k", "]", "=", "tf", ".", "concat", "(", "[", "debug_dict", "[", "k", "]", ",", "v", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "return", "pred_dict", ",", "debug_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.build_loss": [[579, 725], ["tensorflow.device", "tensorflow.stack", "tensorflow.stack", "tensorflow.stack", "xrange", "tensorflow.concat", "tensorflow.minimum", "tensorflow.minimum", "tensorflow.minimum", "tensorflow.stack", "utils.disk", "tensorflow.constant", "tensorflow.reshape", "tensorflow.nn.depthwise_conv2d", "tensorflow.cast", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "loss_list.append", "loss_list.append", "loss_list.append", "tensorflow.ones", "tensorflow.zeros", "tensorflow.ones", "tensorflow.zeros", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.one_hot", "utils.gaussian.reshape", "tensorflow.tile", "tensorflow.reduce_mean", "tensorflow.losses.sparse_softmax_cross_entropy", "tensorflow.losses.sparse_softmax_cross_entropy", "tensorflow.reduce_mean", "tensorflow.reduce_sum", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.add_n", "tensorflow.concat", "tensorflow.ones", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.ones", "tensorflow.zeros", "tensorflow.ones", "tensorflow.ones", "tensorflow.ones", "tensorflow.ones", "tensorflow.zeros", "tensorflow.ones", "tensorflow.zeros", "tensorflow.ones", "tensorflow.ones", "str", "tf.concat.append", "tf.concat.append", "tensorflow.sparse_to_dense", "tensorflow.losses.sparse_softmax_cross_entropy", "utils.gaussian", "utils.gaussian.max", "tensorflow.constant", "tensorflow.reshape", "tensorflow.nn.depthwise_conv2d", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.losses.sigmoid_cross_entropy", "tensorflow.losses.sparse_softmax_cross_entropy", "tensorflow.losses.sparse_softmax_cross_entropy", "tensorflow.get_collection", "tensorflow.ones", "tensorflow.zeros", "tensorflow.stack", "xrange", "utils.gaussian.reshape", "tensorflow.tile", "tensorflow.squared_difference", "tensorflow.losses.sigmoid_cross_entropy", "tensorflow.maximum", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.ones", "tensorflow.zeros", "tensorflow.maximum", "tensorflow.maximum", "tensorflow.maximum", "tensorflow.maximum", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.disk", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.gaussian"], ["", "def", "build_loss", "(", "options", ",", "pred_dict", ",", "gt_dict", ",", "dataset_flag", ",", "debug_dict", ",", "flags", "=", "None", ")", ":", "\n", "\n", "    ", "with", "tf", ".", "device", "(", "'/gpu:0'", ")", ":", "\n", "\n", "        ", "corner_valid_masks", "=", "tf", ".", "stack", "(", "[", "tf", ".", "concat", "(", "[", "tf", ".", "ones", "(", "NUM_WALL_CORNERS", ")", ",", "tf", ".", "zeros", "(", "NUM_CORNERS", "-", "NUM_WALL_CORNERS", ")", "]", ",", "axis", "=", "0", ")", ",", "\n", "tf", ".", "ones", "(", "NUM_CORNERS", ")", ",", "\n", "#tf.concat([tf.ones(NUM_WALL_CORNERS), tf.zeros(NUM_CORNERS - NUM_WALL_CORNERS)], axis=0),", "\n", "tf", ".", "zeros", "(", "NUM_CORNERS", ")", ",", "\n", "tf", ".", "zeros", "(", "NUM_CORNERS", ")", ",", "\n", "tf", ".", "ones", "(", "NUM_CORNERS", ")", "]", ",", "axis", "=", "0", ")", "\n", "\n", "icon_valid_masks", "=", "tf", ".", "stack", "(", "[", "tf", ".", "zeros", "(", "NUM_ICONS", ")", ",", "\n", "tf", ".", "ones", "(", "NUM_ICONS", ")", ",", "\n", "#tf.zeros(NUM_ICONS),", "\n", "tf", ".", "ones", "(", "NUM_ICONS", ")", ",", "\n", "tf", ".", "ones", "(", "NUM_ICONS", ")", ",", "\n", "tf", ".", "ones", "(", "NUM_ICONS", ")", "]", ",", "axis", "=", "0", ")", "\n", "\n", "room_valid_masks", "=", "tf", ".", "stack", "(", "[", "tf", ".", "zeros", "(", "NUM_ROOMS", ")", ",", "\n", "tf", ".", "ones", "(", "NUM_ROOMS", ")", ",", "\n", "#tf.zeros(NUM_ROOMS),", "\n", "tf", ".", "zeros", "(", "NUM_ROOMS", ")", ",", "\n", "tf", ".", "ones", "(", "NUM_ROOMS", ")", ",", "\n", "tf", ".", "ones", "(", "NUM_ROOMS", ")", "]", ",", "axis", "=", "0", ")", "\n", "\n", "corner_valid_masks_bound", "=", "[", "]", "\n", "for", "lossType", "in", "xrange", "(", "3", ")", ":", "\n", "            ", "if", "lossType", "==", "0", ":", "\n", "                ", "numChannels", "=", "NUM_WALL_CORNERS", "\n", "", "else", ":", "\n", "                ", "numChannels", "=", "4", "\n", "pass", "\n", "", "if", "str", "(", "lossType", ")", "in", "options", ".", "loss", ":", "\n", "                ", "corner_valid_masks_bound", ".", "append", "(", "tf", ".", "ones", "(", "numChannels", ")", ")", "\n", "", "else", ":", "\n", "                ", "corner_valid_masks_bound", ".", "append", "(", "tf", ".", "zeros", "(", "numChannels", ")", ")", "\n", "pass", "\n", "", "continue", "\n", "", "corner_valid_masks_bound", "=", "tf", ".", "concat", "(", "corner_valid_masks_bound", ",", "axis", "=", "0", ")", "\n", "if", "'3'", "in", "options", ".", "loss", ":", "\n", "            ", "icon_valid_masks_bound", "=", "tf", ".", "ones", "(", "NUM_ICONS", ")", "\n", "", "else", ":", "\n", "            ", "icon_valid_masks_bound", "=", "tf", ".", "zeros", "(", "NUM_ICONS", ")", "\n", "pass", "\n", "", "if", "'4'", "in", "options", ".", "loss", ":", "\n", "            ", "room_valid_masks_bound", "=", "tf", ".", "ones", "(", "NUM_ROOMS", ")", "\n", "", "else", ":", "\n", "            ", "room_valid_masks_bound", "=", "tf", ".", "zeros", "(", "NUM_ROOMS", ")", "\n", "pass", "\n", "\n", "", "corner_valid_masks", "=", "tf", ".", "minimum", "(", "corner_valid_masks", ",", "tf", ".", "expand_dims", "(", "corner_valid_masks_bound", ",", "0", ")", ")", "\n", "icon_valid_masks", "=", "tf", ".", "minimum", "(", "icon_valid_masks", ",", "tf", ".", "expand_dims", "(", "icon_valid_masks_bound", ",", "0", ")", ")", "\n", "room_valid_masks", "=", "tf", ".", "minimum", "(", "room_valid_masks", ",", "tf", ".", "expand_dims", "(", "room_valid_masks_bound", ",", "0", ")", ")", "\n", "\n", "\n", "corners", "=", "gt_dict", "[", "'corner'", "]", "\n", "cornerSegmentation", "=", "tf", ".", "stack", "(", "[", "tf", ".", "sparse_to_dense", "(", "tf", ".", "stack", "(", "[", "corners", "[", "batchIndex", ",", ":", ",", "1", "]", ",", "corners", "[", "batchIndex", ",", ":", ",", "0", "]", "]", ",", "axis", "=", "1", ")", ",", "(", "HEIGHT", ",", "WIDTH", ")", ",", "corners", "[", "batchIndex", ",", ":", ",", "2", "]", ",", "validate_indices", "=", "False", ")", "for", "batchIndex", "in", "xrange", "(", "options", ".", "batchSize", ")", "]", ",", "axis", "=", "0", ")", "\n", "cornerHeatmaps", "=", "tf", ".", "one_hot", "(", "cornerSegmentation", ",", "depth", "=", "NUM_CORNERS", "+", "1", ",", "axis", "=", "-", "1", ")", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "\n", "\n", "# cornerHeatmaps = tf.one_hot(cornerSegmentation, depth=NUM_CORNERS, axis=-1)", "\n", "# kernel = tf.tile(tf.expand_dims(tf.constant(disk(11)), -1), [1, 1, NUM_CORNERS])", "\n", "# cornerHeatmaps = tf.nn.dilation2d(tf.expand_dims(cornerHeatmaps, 0), kernel, [1, 1, 1, 1], [1, 1, 1, 1], 'SAME')[0]", "\n", "\n", "icon_gt", "=", "gt_dict", "[", "'icon'", "]", "\n", "room_gt", "=", "gt_dict", "[", "'room'", "]", "\n", "\n", "\n", "kernel_size", "=", "options", ".", "kernelSize", "\n", "\n", "neighbor_kernel_array", "=", "disk", "(", "kernel_size", ")", "\n", "neighbor_kernel", "=", "tf", ".", "constant", "(", "neighbor_kernel_array", ".", "reshape", "(", "-", "1", ")", ",", "shape", "=", "neighbor_kernel_array", ".", "shape", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "neighbor_kernel", "=", "tf", ".", "reshape", "(", "neighbor_kernel", ",", "[", "kernel_size", ",", "kernel_size", ",", "1", ",", "1", "]", ")", "\n", "cornerHeatmaps", "=", "tf", ".", "nn", ".", "depthwise_conv2d", "(", "cornerHeatmaps", ",", "tf", ".", "tile", "(", "neighbor_kernel", ",", "[", "1", ",", "1", ",", "NUM_CORNERS", ",", "1", "]", ")", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "corner_gt", "=", "tf", ".", "cast", "(", "cornerHeatmaps", ">", "0.5", ",", "tf", ".", "float32", ")", "\n", "gt_dict", "[", "'corner_values'", "]", "=", "gt_dict", "[", "'corner'", "]", "\n", "gt_dict", "[", "'corner'", "]", "=", "corner_gt", "\n", "\n", "if", "options", ".", "cornerLossType", "==", "'softmax'", ":", "\n", "            ", "corner_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "losses", ".", "sparse_softmax_cross_entropy", "(", "logits", "=", "pred_dict", "[", "'corner'", "]", ",", "labels", "=", "corner_gt", ",", "weights", "=", "tf", ".", "maximum", "(", "tf", ".", "cast", "(", "corner_gt", ">", "0", ",", "tf", ".", "float32", ")", "*", "100", ",", "1", ")", ")", ",", "axis", "=", "[", "0", ",", "1", ",", "2", "]", ")", "\n", "", "elif", "options", ".", "cornerLossType", "==", "'mse'", ":", "\n", "#pred_corner = tf.sigmoid(pred_dict['corner'])", "\n", "#pred_corner = pred_corner * HEATMAP_SCALE", "\n", "            ", "kernel_size", "=", "11", "\n", "#kernel_size = 5", "\n", "neighbor_kernel_array", "=", "gaussian", "(", "kernel_size", ")", "\n", "#neighbor_kernel_array = disk(kernel_size)", "\n", "neighbor_kernel_array", "/=", "neighbor_kernel_array", ".", "max", "(", ")", "\n", "#print(neighbor_kernel_array)", "\n", "#exit(1)", "\n", "neighbor_kernel", "=", "tf", ".", "constant", "(", "neighbor_kernel_array", ".", "reshape", "(", "-", "1", ")", ",", "shape", "=", "neighbor_kernel_array", ".", "shape", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "neighbor_kernel", "=", "tf", ".", "reshape", "(", "neighbor_kernel", ",", "[", "kernel_size", ",", "kernel_size", ",", "1", ",", "1", "]", ")", "\n", "#heatmaps = 1 - tf.nn.max_pool(1 - heatmaps, ksize=[1, 3, 3, 1], strides=[1, 1, 1, 1], padding='SAME')", "\n", "corner_gt", "=", "tf", ".", "nn", ".", "depthwise_conv2d", "(", "cornerHeatmaps", ",", "tf", ".", "tile", "(", "neighbor_kernel", ",", "[", "1", ",", "1", ",", "NUM_CORNERS", ",", "1", "]", ")", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "#corner_gt = tf.minimum(corner_gt * HEATMAP_SCALE, HEATMAP_SCALE)", "\n", "#print(pred_dict['corner'].shape, corner_gt.shape)", "\n", "#exit(1)", "\n", "corner_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "squared_difference", "(", "pred_dict", "[", "'corner'", "]", ",", "corner_gt", ")", ",", "axis", "=", "[", "0", ",", "1", ",", "2", "]", ")", "\n", "#pred_dict['corner'] /= HEATMAP_SCALE", "\n", "", "else", ":", "\n", "# kernel_size = 11", "\n", "# neighbor_kernel_array = disk(kernel_size)", "\n", "# neighbor_kernel = tf.constant(neighbor_kernel_array.reshape(-1), shape=neighbor_kernel_array.shape, dtype=tf.float32)", "\n", "# neighbor_kernel = tf.reshape(neighbor_kernel, [kernel_size, kernel_size, 1, 1])", "\n", "# heatmaps = tf.nn.depthwise_conv2d(heatmaps, tf.tile(neighbor_kernel, [1, 1, NUM_CORNERS, 1]), strides=[1, 1, 1, 1], padding='SAME')", "\n", "# heatmaps = tf.cast(heatmaps > 0.5, np.float32)", "\n", "#tune weight to 5", "\n", "\n", "            ", "corner_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "losses", ".", "sigmoid_cross_entropy", "(", "logits", "=", "pred_dict", "[", "'corner'", "]", ",", "multi_class_labels", "=", "corner_gt", ",", "weights", "=", "tf", ".", "maximum", "(", "tf", ".", "cast", "(", "corner_gt", ">", "0.5", ",", "tf", ".", "float32", ")", "*", "5", ",", "1", ")", ",", "reduction", "=", "tf", ".", "losses", ".", "Reduction", ".", "NONE", ")", ",", "axis", "=", "[", "0", ",", "1", ",", "2", "]", ")", "\n", "pass", "\n", "\n", "\n", "#dataset_flag = flags[0][0]", "\n", "", "corner_loss", "=", "tf", ".", "reduce_mean", "(", "corner_loss", "*", "corner_valid_masks", "[", "dataset_flag", "]", ")", "\n", "\n", "icon_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "losses", ".", "sparse_softmax_cross_entropy", "(", "logits", "=", "pred_dict", "[", "'icon'", "]", ",", "labels", "=", "icon_gt", ",", "weights", "=", "tf", ".", "maximum", "(", "tf", ".", "cast", "(", "icon_gt", ">", "0", ",", "tf", ".", "float32", ")", "*", "options", ".", "iconPositiveWeight", ",", "1", ")", ",", "reduction", "=", "tf", ".", "losses", ".", "Reduction", ".", "NONE", ")", ",", "axis", "=", "[", "0", ",", "1", ",", "2", "]", ")", "\n", "icon_loss", "=", "tf", ".", "reduce_mean", "(", "icon_loss", "*", "icon_valid_masks", "[", "dataset_flag", "]", ")", "\n", "room_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "losses", ".", "sparse_softmax_cross_entropy", "(", "logits", "=", "pred_dict", "[", "'room'", "]", ",", "labels", "=", "room_gt", ",", "reduction", "=", "tf", ".", "losses", ".", "Reduction", ".", "NONE", ")", ",", "axis", "=", "[", "0", ",", "1", ",", "2", "]", ")", "\n", "room_loss", "=", "tf", ".", "reduce_mean", "(", "room_loss", "*", "room_valid_masks", "[", "dataset_flag", "]", ")", "\n", "#room_loss = tf.reduce_mean(tf.squared_difference(tf.squeeze(pred_room), tf.cast(segmentation_gt, tf.float32)))", "\n", "\n", "if", "options", ".", "branches", "==", "'4'", ":", "\n", "            ", "corner_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "losses", ".", "sigmoid_cross_entropy", "(", "logits", "=", "pred_dict", "[", "'corner'", "]", ",", "multi_class_labels", "=", "corner_gt", ",", "weights", "=", "tf", ".", "maximum", "(", "tf", ".", "cast", "(", "corner_gt", ">", "0.5", ",", "tf", ".", "float32", ")", "*", "5", ",", "1", ")", ",", "reduction", "=", "tf", ".", "losses", ".", "Reduction", ".", "NONE", ")", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "corner_loss", "=", "tf", ".", "reduce_sum", "(", "corner_loss", "*", "tf", ".", "cast", "(", "flags", "[", ":", ",", "1", "]", ",", "tf", ".", "float32", ")", ")", "\n", "\n", "icon_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "losses", ".", "sparse_softmax_cross_entropy", "(", "logits", "=", "pred_dict", "[", "'icon'", "]", ",", "labels", "=", "icon_gt", ",", "weights", "=", "tf", ".", "maximum", "(", "tf", ".", "cast", "(", "icon_gt", ">", "0", ",", "tf", ".", "float32", ")", "*", "10", ",", "1", ")", ",", "reduction", "=", "tf", ".", "losses", ".", "Reduction", ".", "NONE", ")", ",", "axis", "=", "[", "1", ",", "2", "]", ")", "\n", "icon_loss", "=", "tf", ".", "reduce_mean", "(", "icon_loss", "*", "tf", ".", "cast", "(", "flags", "[", ":", ",", "1", "]", ",", "tf", ".", "float32", ")", ")", "\n", "\n", "room_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "losses", ".", "sparse_softmax_cross_entropy", "(", "logits", "=", "pred_dict", "[", "'room'", "]", ",", "labels", "=", "room_gt", ",", "reduction", "=", "tf", ".", "losses", ".", "Reduction", ".", "NONE", ")", ",", "axis", "=", "[", "1", ",", "2", "]", ")", "\n", "room_loss", "=", "tf", ".", "reduce_mean", "(", "room_loss", "*", "tf", ".", "cast", "(", "flags", "[", ":", ",", "1", "]", ",", "tf", ".", "float32", ")", ")", "\n", "pass", "\n", "\n", "\n", "#corner_loss *= options.cornerLossWeight", "\n", "", "l2_loss", "=", "tf", ".", "add_n", "(", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "REGULARIZATION_LOSSES", ")", ")", "*", "0", "\n", "loss", "=", "corner_loss", "*", "options", ".", "cornerLossWeight", "+", "icon_loss", "*", "options", ".", "iconLossWeight", "+", "room_loss", "+", "l2_loss", "\n", "loss_list", "=", "[", "]", "\n", "#losses.append(tf.cond(tf.equal(dataset_inp, 0), lambda: corner_loss, lambda: tf.constant(0.0)))", "\n", "#losses.append(tf.cond(tf.equal(dataset_inp, 1), lambda: corner_loss, lambda: tf.constant(0.0)))", "\n", "loss_list", ".", "append", "(", "corner_loss", ")", "\n", "loss_list", ".", "append", "(", "icon_loss", ")", "\n", "loss_list", ".", "append", "(", "room_loss", ")", "\n", "\n", "#debug_dict['room_mask'] = room_valid_masks[dataset_flag]", "\n", "pass", "\n", "\n", "", "return", "loss", ",", "loss_list", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.train": [[727, 975], ["RecordReader.getDatasetVal", "tensorflow.placeholder", "tensorflow.data.Iterator.from_string_handle", "tf.data.Iterator.from_string_handle.get_next", "RecordReader.getDatasetTrain.make_one_shot_iterator", "RecordReader.getDatasetVal.make_initializable_iterator", "train.build_graph", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.summary.scalar", "enumerate", "tensorflow.summary.merge_all", "tensorflow.ConfigProto", "tensorflow.train.Saver", "os.path.exists", "os.system", "os.path.exists", "os.system", "os.path.exists", "os.system", "filenames_train.append", "filenames_train.append", "filenames_train.append", "filenames_train.append", "filenames_train.append", "RecordReaderSlice.getDatasetTrain", "RecordReader.getDatasetTrain", "train.build_loss", "train.build_loss", "tensorflow.device", "tensorflow.Variable", "tf.Variable.assign", "tensorflow.summary.FileWriter", "tensorflow.summary.FileWriter", "writers_train.append", "writers_val.append", "tensorflow.summary.scalar", "numpy.ones", "tensorflow.RunMetadata", "tensorflow.RunOptions", "tensorflow.Session", "sess.run", "sess.run", "sess.run", "tflearn.is_training", "time.time", "sess.run", "tensorflow.train.AdamOptimizer", "tensorflow.global_variables", "dataset_train.make_one_shot_iterator.string_handle", "dataset_val.make_initializable_iterator.string_handle", "tensorflow.global_variables_initializer", "os.path.exists", "print", "tensorflow.train.Saver", "sess.run", "print", "sess.run", "numpy.random.seed", "sess.run", "print", "tf.train.Saver.save", "print", "str", "tf.train.Saver.restore", "tf.train.Saver.restore", "os.path.exists", "tensorflow.train.Saver", "tf.train.Saver.restore", "sess.run", "xrange", "xrange", "tf.train.Saver.save", "tf.Variable.assign", "tensorflow.train.Saver", "tf.train.Saver.restore", "sess.run", "print", "xrange", "tensorflow.python.client.timeline.Timeline", "timeline.Timeline.generate_chrome_trace_format", "exit", "time.time", "enumerate", "print", "writers_train[].add_summary", "print", "enumerate", "print", "writers_val[].add_summary", "print", "tensorflow.train.Saver", "tf.train.Saver.restore", "sess.run", "time.time", "sess.run", "print", "open", "f.write", "sess.run", "train.visualizeBatch", "sess.run", "sess.run", "train.visualizeBatch", "sess.run", "tf.Variable.assign", "tensorflow.train.Saver", "tf.train.Saver.restore", "options.checkpoint_dir.replace", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.RecordReader.getDatasetVal", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.build_graph", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.RecordReader.getDatasetTrain", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.RecordReader.getDatasetTrain", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.build_loss", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.build_loss", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.visualizeBatch", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.visualizeBatch"], ["", "def", "train", "(", "options", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "options", ".", "checkpoint_dir", ")", ":", "\n", "        ", "os", ".", "system", "(", "\"mkdir -p %s\"", "%", "options", ".", "checkpoint_dir", ")", "\n", "pass", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "options", ".", "test_dir", ")", ":", "\n", "        ", "os", ".", "system", "(", "\"mkdir -p %s\"", "%", "options", ".", "test_dir", ")", "\n", "pass", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "options", ".", "log_dir", ")", ":", "\n", "        ", "os", ".", "system", "(", "\"mkdir -p %s\"", "%", "options", ".", "log_dir", ")", "\n", "pass", "\n", "\n", "", "filenames_train", "=", "[", "]", "\n", "if", "'0'", "in", "options", ".", "hybrid", ":", "\n", "        ", "filenames_train", ".", "append", "(", "'data/Syn_train.tfrecords'", ")", "\n", "", "if", "'1'", "in", "options", ".", "hybrid", ":", "\n", "        ", "filenames_train", ".", "append", "(", "'data/Tango_train.tfrecords'", ")", "\n", "pass", "\n", "", "if", "'2'", "in", "options", ".", "hybrid", ":", "\n", "        ", "filenames_train", ".", "append", "(", "'data/ScanNet_train.tfrecords'", ")", "\n", "pass", "\n", "", "if", "'3'", "in", "options", ".", "hybrid", ":", "\n", "        ", "filenames_train", ".", "append", "(", "'data/Matterport_train.tfrecords'", ")", "\n", "pass", "\n", "", "if", "'4'", "in", "options", ".", "hybrid", ":", "\n", "        ", "filenames_train", ".", "append", "(", "'data/SUNCG_train.tfrecords'", ")", "\n", "pass", "\n", "", "if", "options", ".", "slice", ":", "\n", "        ", "import", "RecordReaderSlice", "\n", "dataset_train", "=", "RecordReaderSlice", ".", "getDatasetTrain", "(", "filenames_train", ",", "options", ".", "augmentation", ",", "'4'", "in", "options", ".", "branches", ",", "options", ".", "batchSize", ")", "\n", "", "else", ":", "\n", "        ", "dataset_train", "=", "getDatasetTrain", "(", "filenames_train", ",", "options", ".", "augmentation", ",", "'4'", "in", "options", ".", "branches", ",", "options", ".", "batchSize", ")", "\n", "", "filenames_val", "=", "[", "'data/Tango_val.tfrecords'", "]", "\n", "dataset_val", "=", "getDatasetVal", "(", "filenames_val", ",", "''", ",", "'4'", "in", "options", ".", "branches", ",", "options", ".", "batchSize", ")", "\n", "#dataset_val = dataset_train", "\n", "\n", "handle", "=", "tf", ".", "placeholder", "(", "tf", ".", "string", ",", "shape", "=", "[", "]", ")", "\n", "iterator", "=", "tf", ".", "data", ".", "Iterator", ".", "from_string_handle", "(", "handle", ",", "dataset_train", ".", "output_types", ",", "dataset_train", ".", "output_shapes", ")", "\n", "\n", "input_dict", ",", "gt_dict", "=", "iterator", ".", "get_next", "(", ")", "\n", "\n", "iterator_train", "=", "dataset_train", ".", "make_one_shot_iterator", "(", ")", "\n", "iterator_val", "=", "dataset_val", ".", "make_initializable_iterator", "(", ")", "\n", "\n", "pred_dict", ",", "debug_dict", "=", "build_graph", "(", "options", ",", "input_dict", ")", "\n", "dataset_flag", "=", "input_dict", "[", "'flags'", "]", "[", "0", ",", "0", "]", "\n", "if", "'4'", "in", "options", ".", "branches", ":", "\n", "        ", "loss", ",", "loss_list", "=", "build_loss", "(", "options", ",", "pred_dict", ",", "gt_dict", ",", "dataset_flag", ",", "debug_dict", ",", "input_dict", "[", "'flags'", "]", ")", "\n", "", "else", ":", "\n", "        ", "loss", ",", "loss_list", "=", "build_loss", "(", "options", ",", "pred_dict", ",", "gt_dict", ",", "dataset_flag", ",", "debug_dict", ")", "\n", "pass", "\n", "\n", "#training_flag = tf.placeholder(tf.bool, shape=[], name='training_flag')", "\n", "\n", "\n", "#with tf.variable_scope('statistics'):", "\n", "", "with", "tf", ".", "device", "(", "'/cpu:0'", ")", ":", "\n", "#batchno = tf.Variable(0, dtype=tf.int32)", "\n", "        ", "batchno", "=", "tf", ".", "Variable", "(", "0", ",", "dtype", "=", "tf", ".", "int32", ",", "trainable", "=", "False", ",", "name", "=", "'batchno'", ")", "\n", "batchnoinc", "=", "batchno", ".", "assign", "(", "batchno", "+", "1", ")", "\n", "#optimizer = tf.train.AdamOptimizer(3e-3).minimize(loss, global_step=batchno, colocate_gradients_with_ops=True)", "\n", "pass", "\n", "\n", "", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "3e-3", ")", ".", "minimize", "(", "loss", ",", "global_step", "=", "batchno", ")", "\n", "\n", "#tf.train.write_graph(tf.get_default_graph(), options.log_dir, 'train.pbtxt')", "\n", "writers_train", "=", "[", "]", "\n", "writers_val", "=", "[", "]", "\n", "for", "dataset", "in", "'01234'", ":", "\n", "        ", "train_writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "options", ".", "log_dir", "+", "'/train_'", "+", "dataset", ")", "\n", "val_writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "options", ".", "log_dir", "+", "'/val_'", "+", "dataset", ")", "\n", "writers_train", ".", "append", "(", "train_writer", ")", "\n", "writers_val", ".", "append", "(", "val_writer", ")", "\n", "continue", "\n", "\n", "", "tf", ".", "summary", ".", "scalar", "(", "'loss'", ",", "loss", ")", "\n", "for", "index", ",", "l", "in", "enumerate", "(", "loss_list", ")", ":", "\n", "        ", "tf", ".", "summary", ".", "scalar", "(", "'loss_'", "+", "str", "(", "index", ")", ",", "l", ")", "\n", "continue", "\n", "", "summary_op", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "\n", "var_to_restore", "=", "[", "v", "for", "v", "in", "tf", ".", "global_variables", "(", ")", "]", "\n", "\n", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "config", ".", "allow_soft_placement", "=", "True", "\n", "#config.log_device_placement=True", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "\n", "threshold", "=", "np", ".", "ones", "(", "(", "HEIGHT", ",", "WIDTH", ",", "1", ")", ")", "*", "0.5", "#HEATMAP_SCALE / 2", "\n", "\n", "profileTime", "=", "False", "\n", "if", "profileTime", ":", "\n", "        ", "run_metadata", "=", "tf", ".", "RunMetadata", "(", ")", "\n", "run_options", "=", "tf", ".", "RunOptions", "(", "trace_level", "=", "tf", ".", "RunOptions", ".", "FULL_TRACE", ")", "\n", "pass", "\n", "\n", "", "validation_losses", "=", "[", "]", "\n", "with", "tf", ".", "Session", "(", "config", "=", "config", ")", "as", "sess", ":", "\n", "        ", "handle_train", "=", "sess", ".", "run", "(", "iterator_train", ".", "string_handle", "(", ")", ")", "\n", "handle_val", "=", "sess", ".", "run", "(", "iterator_val", ".", "string_handle", "(", ")", ")", "\n", "\n", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "tflearn", ".", "is_training", "(", "True", ")", "\n", "#if tf.train.checkpoint_exists(\"%s/checkpoint.ckpt\"%(options.checkpoint_dir)):", "\n", "if", "options", ".", "restore", "==", "1", "and", "os", ".", "path", ".", "exists", "(", "'%s/checkpoint.ckpt.index'", "%", "(", "options", ".", "checkpoint_dir", ")", ")", ":", "\n", "#restore the same model from checkpoint", "\n", "            ", "print", "(", "'restore'", ")", "\n", "loader", "=", "tf", ".", "train", ".", "Saver", "(", "var_to_restore", ")", "\n", "if", "options", ".", "startIteration", "<=", "0", ":", "\n", "                ", "loader", ".", "restore", "(", "sess", ",", "'%s/checkpoint.ckpt'", "%", "(", "options", ".", "checkpoint_dir", ")", ")", "\n", "", "else", ":", "\n", "                ", "loader", ".", "restore", "(", "sess", ",", "\"%s/checkpoint_%d.ckpt\"", "%", "(", "options", ".", "checkpoint_dir", ",", "options", ".", "startIteration", ")", ")", "\n", "pass", "\n", "", "bno", "=", "sess", ".", "run", "(", "batchno", ")", "\n", "print", "(", "bno", ")", "\n", "", "elif", "options", ".", "restore", "==", "2", "and", "os", ".", "path", ".", "exists", "(", "'%s/checkpoint.ckpt.index'", "%", "(", "options", ".", "checkpoint_dir", ")", ")", ":", "\n", "#restore the same model from checkpoint but reset batchno to 1", "\n", "            ", "loader", "=", "tf", ".", "train", ".", "Saver", "(", "var_to_restore", ")", "\n", "loader", ".", "restore", "(", "sess", ",", "'%s/checkpoint.ckpt'", "%", "(", "options", ".", "checkpoint_dir", ")", ")", "\n", "sess", ".", "run", "(", "batchno", ".", "assign", "(", "1", ")", ")", "\n", "", "elif", "options", ".", "restore", "==", "3", ":", "\n", "            ", "loader", "=", "tf", ".", "train", ".", "Saver", "(", "var_to_restore", ")", "\n", "loader", ".", "restore", "(", "sess", ",", "'%s/checkpoint_%d.ckpt'", "%", "(", "options", ".", "checkpoint_dir", ",", "options", ".", "startIteration", ")", ")", "\n", "bno", "=", "sess", ".", "run", "(", "batchno", ")", "\n", "print", "(", "bno", ")", "\n", "", "elif", "options", ".", "restore", "==", "4", ":", "\n", "#fine-tune another model", "\n", "#var_to_restore = [v for v in var_to_restore if 'res4b22_relu_non_plane' not in v.name]", "\n", "            ", "loader", "=", "tf", ".", "train", ".", "Saver", "(", "var_to_restore", ")", "\n", "loader", ".", "restore", "(", "sess", ",", "'%s/checkpoint.ckpt'", "%", "(", "options", ".", "checkpoint_dir", ".", "replace", "(", "'hybrid1'", ",", "'hybrid4'", ")", ")", ")", "\n", "sess", ".", "run", "(", "batchno", ".", "assign", "(", "1", ")", ")", "\n", "", "elif", "options", ".", "restore", "==", "5", ":", "\n", "            ", "var_to_restore", "=", "[", "v", "for", "v", "in", "var_to_restore", "if", "'pred_'", "not", "in", "v", ".", "name", "]", "\n", "loader", "=", "tf", ".", "train", ".", "Saver", "(", "var_to_restore", ")", "\n", "loader", ".", "restore", "(", "sess", ",", "'%s/checkpoint.ckpt'", "%", "(", "options", ".", "checkpoint_dir", ")", ")", "\n", "pass", "\n", "\n", "#if tf.train.checkpoint_exists(\"%s/%s.ckpt\"%(dumpdir,keyname)):", "\n", "#saver.restore(sess,\"%s/%s.ckpt\"%(dumpdir,keyname))", "\n", "#pass", "\n", "\n", "", "MOVING_AVERAGE_DECAY", "=", "0.99", "\n", "train_losses", "=", "[", "0.", ",", "0.", ",", "0.", "]", "\n", "train_acc", "=", "[", "1e-4", ",", "1e-4", ",", "1e-4", "]", "\n", "val_losses", "=", "[", "0.", ",", "0.", ",", "0.", "]", "\n", "val_acc", "=", "[", "1e-4", ",", "1e-4", ",", "1e-4", "]", "\n", "\n", "lastsave", "=", "time", ".", "time", "(", ")", "\n", "bno", "=", "sess", ".", "run", "(", "batchno", ")", "\n", "\n", "#coord = tf.train.Coordinator()", "\n", "#threads = tf.train.start_queue_runners(sess=sess, coord=coord)", "\n", "while", "bno", "<", "options", ".", "numIterations", "*", "(", "6.0", "/", "options", ".", "batchSize", ")", ":", "\n", "#while bno<64:", "\n", "            ", "try", ":", "\n", "                ", "if", "profileTime", ":", "\n", "                    ", "for", "iteration", "in", "xrange", "(", "5", ")", ":", "\n", "                        ", "t0", "=", "time", ".", "time", "(", ")", "\n", "# if options.slice:", "\n", "#     mydebug = tf.get_collection(\"mydebug\")[0]", "\n", "#     _, total_loss, losses, summary_str, dataset, gt, pred, debug, mydebug_out = sess.run([optimizer, loss, loss_list, summary_op, dataset_flag, gt_dict, pred_dict, debug_dict, mydebug], feed_dict={handle: handle_train}, run_metadata=run_metadata, options=run_options)", "\n", "# else:", "\n", "_", ",", "total_loss", ",", "losses", ",", "summary_str", ",", "dataset", ",", "gt", ",", "pred", ",", "debug", "=", "sess", ".", "run", "(", "[", "optimizer", ",", "loss", ",", "loss_list", ",", "summary_op", ",", "dataset_flag", ",", "gt_dict", ",", "pred_dict", ",", "debug_dict", "]", ",", "feed_dict", "=", "{", "handle", ":", "handle_train", "}", ",", "run_metadata", "=", "run_metadata", ",", "options", "=", "run_options", ")", "\n", "print", "(", "'time'", ",", "time", ".", "time", "(", ")", "-", "t0", ")", "\n", "continue", "\n", "\n", "", "tl", "=", "timeline", ".", "Timeline", "(", "run_metadata", ".", "step_stats", ")", "\n", "ctf", "=", "tl", ".", "generate_chrome_trace_format", "(", ")", "\n", "with", "open", "(", "'test/timeline.json'", ",", "'w'", ")", "as", "f", ":", "\n", "                        ", "f", ".", "write", "(", "ctf", ")", "\n", "pass", "\n", "", "exit", "(", "1", ")", "\n", "pass", "\n", "\n", "", "for", "iteration", "in", "xrange", "(", "500", ")", ":", "\n", "                    ", "t0", "=", "time", ".", "time", "(", ")", "\n", "if", "iteration", "==", "250", "and", "options", ".", "visualize", ":", "\n", "                        ", "_", ",", "total_loss", ",", "losses", ",", "summary_str", ",", "dataset", ",", "gt", ",", "pred", ",", "debug", "=", "sess", ".", "run", "(", "[", "optimizer", ",", "loss", ",", "loss_list", ",", "summary_op", ",", "dataset_flag", ",", "gt_dict", ",", "pred_dict", ",", "debug_dict", "]", ",", "feed_dict", "=", "{", "handle", ":", "handle_train", "}", ")", "\n", "\n", "visualizeBatch", "(", "options", ",", "'train'", ",", "pred", ",", "{", "'corner'", ":", "gt", "[", "'corner'", "]", ",", "'icon'", ":", "gt", "[", "'icon'", "]", ",", "'room'", ":", "gt", "[", "'room'", "]", ",", "'density'", ":", "debug", "[", "'x0_topdown'", "]", "[", ":", ",", ":", ",", ":", ",", "-", "1", "]", "}", ",", "dataset", ")", "\n", "# print(dataset)", "\n", "# print(losses)", "\n", "# print(gt['room'].dtype, gt['icon'].dtype)", "\n", "# print(gt['room'][0].min(), gt['room'][0].max())", "\n", "# print(pred['room'][0].min(), pred['room'][0].max())", "\n", "# print(gt['icon'][0].min(), gt['icon'][0].max())", "\n", "# print(pred['icon'][0].min(), pred['icon'][0].max())", "\n", "# exit(1)", "\n", "", "else", ":", "\n", "                        ", "_", ",", "total_loss", ",", "losses", ",", "summary_str", ",", "dataset", "=", "sess", ".", "run", "(", "[", "optimizer", ",", "loss", ",", "loss_list", ",", "summary_op", ",", "dataset_flag", "]", ",", "feed_dict", "=", "{", "handle", ":", "handle_train", "}", ")", "\n", "pass", "\n", "\n", "", "for", "lossIndex", ",", "value", "in", "enumerate", "(", "losses", ")", ":", "\n", "                        ", "train_losses", "[", "lossIndex", "]", "=", "train_losses", "[", "lossIndex", "]", "*", "MOVING_AVERAGE_DECAY", "+", "value", "\n", "train_acc", "[", "lossIndex", "]", "=", "train_acc", "[", "lossIndex", "]", "*", "MOVING_AVERAGE_DECAY", "+", "1", "\n", "continue", "\n", "#print(bno + iteration, 't', train_losses[0] / train_acc[0], train_losses[1] / train_acc[1], train_losses[2] / train_acc[2], 'v', val_losses[0] / val_acc[0], val_losses[1] / val_acc[1], val_losses[2] / val_acc[2], time.time() - t0)", "\n", "#print('dataset', dataset)", "\n", "", "print", "(", "'%d: t %02f %02f %02f, v %02f %02f %02f %02f'", "%", "(", "bno", "+", "iteration", ",", "train_losses", "[", "0", "]", "/", "train_acc", "[", "0", "]", ",", "train_losses", "[", "1", "]", "/", "train_acc", "[", "1", "]", ",", "train_losses", "[", "2", "]", "/", "train_acc", "[", "2", "]", ",", "val_losses", "[", "0", "]", "/", "val_acc", "[", "0", "]", ",", "val_losses", "[", "1", "]", "/", "val_acc", "[", "1", "]", ",", "val_losses", "[", "2", "]", "/", "val_acc", "[", "2", "]", ",", "time", ".", "time", "(", ")", "-", "t0", ")", ")", "\n", "writers_train", "[", "dataset", "]", ".", "add_summary", "(", "summary_str", ",", "bno", "+", "iteration", ")", "\n", "continue", "\n", "", "", "except", "tf", ".", "errors", ".", "OutOfRangeError", ":", "\n", "                ", "print", "(", "'Trained 1000 iterations'", ")", "\n", "pass", "\n", "\n", "\n", "", "bno", "=", "sess", ".", "run", "(", "batchno", ")", "\n", "np", ".", "random", ".", "seed", "(", "bno", ")", "\n", "\n", "sess", ".", "run", "(", "iterator_val", ".", "initializer", ")", "\n", "try", ":", "\n", "#validation_loss = []", "\n", "                ", "for", "iteration", "in", "xrange", "(", "10", ")", ":", "\n", "                    ", "if", "iteration", "==", "0", "and", "options", ".", "visualize", ":", "\n", "                        ", "total_loss", ",", "losses", ",", "summary_str", ",", "dataset", ",", "gt", ",", "pred", ",", "debug", "=", "sess", ".", "run", "(", "[", "loss", ",", "loss_list", ",", "summary_op", ",", "dataset_flag", ",", "gt_dict", ",", "pred_dict", ",", "debug_dict", "]", ",", "feed_dict", "=", "{", "handle", ":", "handle_val", "}", ")", "\n", "visualizeBatch", "(", "options", ",", "'val'", ",", "pred", ",", "{", "'corner'", ":", "gt", "[", "'corner'", "]", ",", "'icon'", ":", "gt", "[", "'icon'", "]", ",", "'room'", ":", "gt", "[", "'room'", "]", ",", "'density'", ":", "debug", "[", "'x0_topdown'", "]", "[", ":", ",", ":", ",", ":", ",", "-", "1", "]", "}", ",", "dataset", ")", "\n", "", "else", ":", "\n", "                        ", "total_loss", ",", "losses", ",", "summary_str", ",", "dataset", "=", "sess", ".", "run", "(", "[", "loss", ",", "loss_list", ",", "summary_op", ",", "dataset_flag", "]", ",", "feed_dict", "=", "{", "handle", ":", "handle_val", "}", ")", "\n", "pass", "\n", "", "for", "lossIndex", ",", "value", "in", "enumerate", "(", "losses", ")", ":", "\n", "                        ", "val_losses", "[", "lossIndex", "]", "=", "val_losses", "[", "lossIndex", "]", "*", "MOVING_AVERAGE_DECAY", "+", "value", "\n", "val_acc", "[", "lossIndex", "]", "=", "val_acc", "[", "lossIndex", "]", "*", "MOVING_AVERAGE_DECAY", "+", "1", "\n", "continue", "\n", "", "print", "(", "'validation'", ",", "'t'", ",", "train_losses", "[", "0", "]", "/", "train_acc", "[", "0", "]", ",", "train_losses", "[", "1", "]", "/", "train_acc", "[", "1", "]", ",", "train_losses", "[", "2", "]", "/", "train_acc", "[", "2", "]", ",", "'v'", ",", "val_losses", "[", "0", "]", "/", "val_acc", "[", "0", "]", ",", "val_losses", "[", "1", "]", "/", "val_acc", "[", "1", "]", ",", "val_losses", "[", "2", "]", "/", "val_acc", "[", "2", "]", ")", "\n", "writers_val", "[", "dataset", "]", ".", "add_summary", "(", "summary_str", ",", "bno", "+", "iteration", ")", "\n", "#validation_loss.append(total_loss)", "\n", "continue", "\n", "", "", "except", "tf", ".", "errors", ".", "OutOfRangeError", ":", "\n", "                ", "print", "(", "'Finish validation'", ")", "\n", "pass", "\n", "", "pass", "\n", "\n", "# validation_losses.append(val_losses[0] / val_acc[0] + val_losses[1] / val_acc[1] + val_losses[2] / val_acc[2])", "\n", "# if len(validation_losses) >= 3 and validation_losses[-1] > validation_losses[-2] and validation_losses[-2] > validation_losses[-3]:", "\n", "#     print('validation losses', validation_losses)", "\n", "#     exit(1)", "\n", "#     pass", "\n", "\n", "print", "(", "'save snapshot'", ")", "\n", "saver", ".", "save", "(", "sess", ",", "\"%s/checkpoint.ckpt\"", "%", "(", "options", ".", "checkpoint_dir", ")", ")", "\n", "if", "bno", "%", "10000", "==", "0", ":", "\n", "                ", "saver", ".", "save", "(", "sess", ",", "\"%s/checkpoint_%d.ckpt\"", "%", "(", "options", ".", "checkpoint_dir", ",", "bno", ")", ")", "\n", "pass", "\n", "\n", "", "print", "(", "bno", ",", "'t'", ",", "train_losses", "[", "0", "]", "/", "train_acc", "[", "0", "]", ",", "train_losses", "[", "1", "]", "/", "train_acc", "[", "1", "]", ",", "train_losses", "[", "2", "]", "/", "train_acc", "[", "2", "]", ",", "'v'", ",", "val_losses", "[", "0", "]", "/", "val_acc", "[", "0", "]", ",", "val_losses", "[", "1", "]", "/", "val_acc", "[", "1", "]", ",", "val_losses", "[", "2", "]", "/", "val_acc", "[", "2", "]", ")", "\n", "continue", "\n", "", "pass", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.test": [[977, 1158], ["tensorflow.reset_default_graph", "RecordReader.getDatasetVal", "RecordReader.getDatasetVal.make_one_shot_iterator", "dataset.make_one_shot_iterator.get_next", "train.build_graph", "train.build_loss", "tensorflow.ConfigProto", "print", "os.path.exists", "os.system", "os.path.exists", "print", "filenames.append", "filenames.append", "filenames.append", "filenames.append", "filenames.append", "tensorflow.Session", "sess.run", "tflearn.is_training", "tensorflow.train.Saver", "CORNER_RANGES.keys", "numpy.zeros", "numpy.zeros", "numpy.zeros", "cornerCounters.iteritems", "print", "print", "print", "numpy.save", "numpy.load", "tensorflow.global_variables", "tensorflow.global_variables_initializer", "tf.train.Saver.restore", "tf.train.Saver.restore", "numpy.zeros", "xrange", "print", "sess.run", "enumerate", "print", "utils.sigmoid", "xrange", "train.visualizeBatch", "visualizeBatch.iteritems", "print", "numbers.iteritems", "numbers.iteritems", "CORNER_RANGES.iteritems", "utils.evaluateCorners", "utils.evaluateSegmentation", "utils.evaluateSegmentation", "statisticsSum.iteritems", "utils.extractCornersFromHeatmaps", "utils.evaluateCorners", "numpy.argmax", "numpy.argmax", "str", "xrange", "float", "max", "float", "max", "utils.extractCornersFromHeatmaps", "utils.extractCornersFromHeatmaps"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.RecordReader.getDatasetVal", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.build_graph", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.build_loss", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.sigmoid", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.visualizeBatch", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.evaluateCorners", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.evaluateSegmentation", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.evaluateSegmentation", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.extractCornersFromHeatmaps", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.evaluateCorners", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.extractCornersFromHeatmaps", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.extractCornersFromHeatmaps"], ["", "def", "test", "(", "options", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "options", ".", "test_dir", ")", ":", "\n", "        ", "os", ".", "system", "(", "\"mkdir -p %s\"", "%", "options", ".", "test_dir", ")", "\n", "pass", "\n", "\n", "", "if", "options", ".", "useCache", "==", "1", "and", "os", ".", "path", ".", "exists", "(", "options", ".", "test_dir", "+", "'/network_numbers.npy'", ")", ":", "\n", "        ", "numbers", "=", "np", ".", "load", "(", "options", ".", "test_dir", "+", "'/network_numbers.npy'", ")", "[", "(", ")", "]", "\n", "print", "(", "[", "(", "k", ",", "v", "[", "0", "]", "/", "v", "[", "1", "]", ",", "v", "[", "0", "]", "/", "v", "[", "2", "]", ")", "for", "k", ",", "v", "in", "numbers", ".", "iteritems", "(", ")", "]", ")", "\n", "#print(numbers)", "\n", "return", "numbers", "\n", "\n", "\n", "#print(options.checkpoint_dir)", "\n", "", "tf", ".", "reset_default_graph", "(", ")", "\n", "\n", "filenames", "=", "[", "]", "\n", "if", "'0'", "in", "options", ".", "dataset", ":", "\n", "        ", "filenames", ".", "append", "(", "'data/Syn_val.tfrecords'", ")", "\n", "", "if", "'1'", "in", "options", ".", "dataset", ":", "\n", "        ", "filenames", ".", "append", "(", "'data/Tango_val.tfrecords'", ")", "\n", "pass", "\n", "", "if", "'2'", "in", "options", ".", "dataset", ":", "\n", "        ", "filenames", ".", "append", "(", "'data/ScanNet_val.tfrecords'", ")", "\n", "pass", "\n", "", "if", "'3'", "in", "options", ".", "dataset", ":", "\n", "        ", "filenames", ".", "append", "(", "'data/Matterport_val.tfrecords'", ")", "\n", "pass", "\n", "", "if", "'4'", "in", "options", ".", "dataset", ":", "\n", "        ", "filenames", ".", "append", "(", "'data/SUNCG_val.tfrecords'", ")", "\n", "pass", "\n", "\n", "", "dataset", "=", "getDatasetVal", "(", "filenames", ",", "''", ",", "'4'", "in", "options", ".", "branches", ",", "options", ".", "batchSize", ")", "\n", "\n", "\n", "iterator", "=", "dataset", ".", "make_one_shot_iterator", "(", ")", "\n", "input_dict", ",", "gt_dict", "=", "iterator", ".", "get_next", "(", ")", "\n", "\n", "\n", "pred_dict", ",", "debug_dict", "=", "build_graph", "(", "options", ",", "input_dict", ")", "\n", "dataset_flag", "=", "input_dict", "[", "'flags'", "]", "[", "0", ",", "0", "]", "\n", "flags", "=", "input_dict", "[", "'flags'", "]", "[", ":", ",", "1", "]", "\n", "loss", ",", "loss_list", "=", "build_loss", "(", "options", ",", "pred_dict", ",", "gt_dict", ",", "dataset_flag", ",", "debug_dict", ")", "\n", "\n", "\n", "var_to_restore", "=", "[", "v", "for", "v", "in", "tf", ".", "global_variables", "(", ")", "]", "\n", "\n", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "config", ".", "allow_soft_placement", "=", "True", "\n", "#config.log_device_placement=True", "\n", "\n", "statisticsSum", "=", "{", "k", ":", "[", "0.0", ",", "0.0", ",", "0.0", "]", "for", "k", "in", "[", "'wall'", ",", "'door'", ",", "'icon'", ",", "'room'", "]", "}", "\n", "\n", "numbers", "=", "{", "}", "\n", "\n", "with", "tf", ".", "Session", "(", "config", "=", "config", ")", "as", "sess", ":", "\n", "        ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "tflearn", ".", "is_training", "(", "False", ")", "\n", "#var_to_restore = [v for v in var_to_restore if 'pred_room' not in v.name]", "\n", "var_to_restore", "=", "[", "v", "for", "v", "in", "var_to_restore", "if", "'is_training'", "not", "in", "v", ".", "name", "]", "\n", "loader", "=", "tf", ".", "train", ".", "Saver", "(", "var_to_restore", ")", "\n", "if", "options", ".", "startIteration", "<=", "0", ":", "\n", "            ", "loader", ".", "restore", "(", "sess", ",", "\"%s/checkpoint.ckpt\"", "%", "(", "options", ".", "checkpoint_dir", ")", ")", "\n", "", "else", ":", "\n", "            ", "loader", ".", "restore", "(", "sess", ",", "\"%s/checkpoint_%d.ckpt\"", "%", "(", "options", ".", "checkpoint_dir", ",", "options", ".", "startIteration", ")", ")", "\n", "pass", "\n", "#if tf.train.checkpoint_exists(\"%s/%s.ckpt\"%(dumpdir,keyname)):", "\n", "#saver.restore(sess,\"%s/%s.ckpt\"%(dumpdir,keyname))", "\n", "#pass", "\n", "\n", "", "MOVING_AVERAGE_DECAY", "=", "1", "\n", "losses", "=", "[", "0.", ",", "0.", ",", "0.", "]", "\n", "acc", "=", "[", "1e-4", ",", "1e-4", ",", "1e-4", "]", "\n", "\n", "cornerCounters", "=", "{", "}", "\n", "for", "cornerType", "in", "CORNER_RANGES", ".", "keys", "(", ")", ":", "\n", "            ", "cornerCounters", "[", "cornerType", "]", "=", "np", ".", "zeros", "(", "3", ")", "\n", "pass", "\n", "\n", "", "globalCornerCounter", "=", "np", ".", "zeros", "(", "3", ")", "\n", "iconCounter", "=", "np", ".", "zeros", "(", "2", ")", "\n", "roomCounter", "=", "np", ".", "zeros", "(", "2", ")", "\n", "\n", "numImages", "=", "0", "\n", "try", ":", "\n", "            ", "for", "iteration", "in", "xrange", "(", "options", ".", "numTestingImages", ")", ":", "\n", "                ", "total_loss", ",", "losses", ",", "dataset", ",", "image_flags", ",", "gt", ",", "pred", ",", "debug", ",", "inp", "=", "sess", ".", "run", "(", "[", "loss", ",", "loss_list", ",", "dataset_flag", ",", "flags", ",", "gt_dict", ",", "pred_dict", ",", "debug_dict", ",", "input_dict", "]", ")", "\n", "\n", "for", "lossIndex", ",", "value", "in", "enumerate", "(", "losses", ")", ":", "\n", "                    ", "losses", "[", "lossIndex", "]", "=", "losses", "[", "lossIndex", "]", "*", "MOVING_AVERAGE_DECAY", "+", "value", "\n", "acc", "[", "lossIndex", "]", "=", "acc", "[", "lossIndex", "]", "*", "MOVING_AVERAGE_DECAY", "+", "1", "\n", "continue", "\n", "", "print", "(", "'testing'", ",", "losses", "[", "0", "]", "/", "acc", "[", "0", "]", ",", "losses", "[", "1", "]", "/", "acc", "[", "1", "]", ",", "losses", "[", "2", "]", "/", "acc", "[", "2", "]", ")", "\n", "\n", "# print(iteration, inp['image_path'][0])", "\n", "# if iteration == 7:", "\n", "#     cv2.imwrite('test/density.png', drawDensityImage(getDensity(inp['points'][0], HEIGHT, WIDTH)))", "\n", "#     cv2.imwrite('test/density_indices.png', drawDensityImage(getDensityFromIndices(inp['point_indices'][0], HEIGHT, WIDTH)))", "\n", "#     exit(1)", "\n", "pred_c", "=", "sigmoid", "(", "pred", "[", "'corner'", "]", ")", "\n", "for", "batchIndex", "in", "xrange", "(", "options", ".", "batchSize", ")", ":", "\n", "                    ", "if", "options", ".", "branches", "==", "'4'", "and", "image_flags", "[", "batchIndex", "]", "<", "0.5", ":", "\n", "                        ", "continue", "\n", "#print(inp['image_path'][batchIndex])", "\n", "\n", "", "cornerHeatmapsGT", "=", "gt", "[", "'corner'", "]", "[", "batchIndex", "]", "\n", "cornerHeatmapsPred", "=", "pred_c", "[", "batchIndex", "]", "\n", "for", "cornerType", ",", "ranges", "in", "CORNER_RANGES", ".", "iteritems", "(", ")", ":", "\n", "                        ", "if", "options", ".", "cornerLossType", "==", "\"mse\"", ":", "\n", "                            ", "cornersPred", "=", "extractCornersFromHeatmaps", "(", "cornerHeatmapsPred", "[", ":", ",", ":", ",", "ranges", "[", "0", "]", ":", "ranges", "[", "1", "]", "]", ",", "heatmapThreshold", "=", "0.5", ",", "returnRanges", "=", "False", ")", "\n", "", "else", ":", "\n", "                            ", "cornersPred", "=", "extractCornersFromHeatmaps", "(", "cornerHeatmapsPred", "[", ":", ",", ":", ",", "ranges", "[", "0", "]", ":", "ranges", "[", "1", "]", "]", ",", "returnRanges", "=", "False", ")", "\n", "pass", "\n", "", "cornersGT", "=", "extractCornersFromHeatmaps", "(", "cornerHeatmapsGT", "[", ":", ",", ":", ",", "ranges", "[", "0", "]", ":", "ranges", "[", "1", "]", "]", ",", "heatmapThreshold", "=", "0.5", ",", "returnRanges", "=", "False", ")", "\n", "\n", "cornerStatistics", "=", "evaluateCorners", "(", "cornersPred", ",", "cornersGT", ")", "\n", "cornerCounters", "[", "cornerType", "]", "+=", "cornerStatistics", "\n", "continue", "\n", "\n", "", "globalCornersPred", "=", "[", "]", "\n", "for", "corners", "in", "cornersPred", ":", "\n", "                        ", "globalCornersPred", "+=", "corners", "\n", "continue", "\n", "", "globalCornersGT", "=", "[", "]", "\n", "for", "corners", "in", "cornersGT", ":", "\n", "                        ", "globalCornersGT", "+=", "corners", "\n", "continue", "\n", "", "globalCornerStatistics", "=", "evaluateCorners", "(", "[", "globalCornersPred", "]", ",", "[", "globalCornersGT", "]", ")", "\n", "globalCornerCounter", "+=", "globalCornerStatistics", "\n", "\n", "iconStatistics", "=", "evaluateSegmentation", "(", "np", ".", "argmax", "(", "pred", "[", "'icon'", "]", "[", "batchIndex", "]", ",", "axis", "=", "-", "1", ")", ",", "gt", "[", "'icon'", "]", "[", "batchIndex", "]", ")", "\n", "iconCounter", "+=", "iconStatistics", "\n", "\n", "roomStatistics", "=", "evaluateSegmentation", "(", "np", ".", "argmax", "(", "pred", "[", "'room'", "]", "[", "batchIndex", "]", ",", "axis", "=", "-", "1", ")", ",", "gt", "[", "'room'", "]", "[", "batchIndex", "]", ")", "\n", "roomCounter", "+=", "roomStatistics", "\n", "\n", "numImages", "+=", "1", "\n", "\n", "continue", "\n", "\n", "", "statistics", "=", "visualizeBatch", "(", "options", ",", "'test_'", "+", "str", "(", "iteration", ")", ",", "pred", ",", "{", "'corner'", ":", "gt", "[", "'corner'", "]", ",", "'icon'", ":", "gt", "[", "'icon'", "]", ",", "'room'", ":", "gt", "[", "'room'", "]", ",", "'density'", ":", "debug", "[", "'x0_topdown'", "]", "[", ":", ",", ":", ",", ":", ",", "-", "1", "]", ",", "'image_path'", ":", "inp", "[", "'image_path'", "]", "}", ",", "dataset", ",", "savePredictions", "=", "False", ")", "\n", "\n", "for", "k", ",", "v", "in", "statistics", ".", "iteritems", "(", ")", ":", "\n", "                    ", "if", "k", "in", "statisticsSum", ":", "\n", "                        ", "for", "c", "in", "xrange", "(", "3", ")", ":", "\n", "                            ", "statisticsSum", "[", "k", "]", "[", "c", "]", "+=", "v", "[", "c", "]", "\n", "continue", "\n", "", "", "continue", "\n", "", "continue", "\n", "", "", "except", "tf", ".", "errors", ".", "OutOfRangeError", ":", "\n", "            ", "print", "(", "'Finish testing'", ")", "\n", "pass", "\n", "\n", "", "for", "cornerType", ",", "cornerCounter", "in", "cornerCounters", ".", "iteritems", "(", ")", ":", "\n", "            ", "print", "(", "cornerType", "+", "' corner recall and precision'", ",", "cornerCounter", "[", "0", "]", "/", "cornerCounter", "[", "1", "]", ",", "cornerCounter", "[", "0", "]", "/", "cornerCounter", "[", "2", "]", ")", "\n", "continue", "\n", "#print('corner (type insensitive) recall and precision', globalCornerCounter[0] / globalCornerCounter[1], globalCornerCounter[0] / globalCornerCounter[2])", "\n", "", "print", "(", "(", "'room accuracy and mean IOU'", ",", "roomCounter", "[", "0", "]", "/", "numImages", ",", "roomCounter", "[", "1", "]", "/", "numImages", ")", ")", "\n", "print", "(", "(", "'icon accuracy and mean IOU'", ",", "iconCounter", "[", "0", "]", "/", "numImages", ",", "iconCounter", "[", "1", "]", "/", "numImages", ")", ")", "\n", "print", "(", "'precision and recall'", ",", "[", "(", "k", ",", "float", "(", "v", "[", "0", "]", ")", "/", "max", "(", "v", "[", "1", "]", ",", "1", ")", ",", "float", "(", "v", "[", "0", "]", ")", "/", "max", "(", "v", "[", "2", "]", ",", "1", ")", ")", "for", "k", ",", "v", "in", "statisticsSum", ".", "iteritems", "(", ")", "]", ")", "\n", "#print(DATASETS[int(options.dataset[datasetIndex])], val_losses[0] / val_acc[0], val_losses[1] / val_acc[1], val_losses[2] / val_acc[2])", "\n", "\n", "# numbers['wall_corner'] = (cornerCounters['wall'][0] / cornerCounters['wall'][1], cornerCounters['wall'][0] / cornerCounters['wall'][2])", "\n", "# numbers['opening_corner'] = (cornerCounters['opening'][0] / cornerCounters['opening'][1], cornerCounters['opening'][0] / cornerCounters['opening'][2])", "\n", "# numbers['icon_corner'] = (cornerCounters['icon'][0] / cornerCounters['icon'][1], cornerCounters['icon'][0] / cornerCounters['icon'][2])", "\n", "# numbers['icon'] = (iconCounter[0] / numImages, iconCounter[1]/ numImages)", "\n", "# numbers['room'] = (roomCounter[0] / numImages, roomCounter[1]/ numImages)", "\n", "numbers", "[", "'wall_corner'", "]", "=", "(", "cornerCounters", "[", "'wall'", "]", "[", "0", "]", ",", "cornerCounters", "[", "'wall'", "]", "[", "1", "]", ",", "cornerCounters", "[", "'wall'", "]", "[", "2", "]", ")", "\n", "numbers", "[", "'opening_corner'", "]", "=", "(", "cornerCounters", "[", "'opening'", "]", "[", "0", "]", ",", "cornerCounters", "[", "'opening'", "]", "[", "1", "]", ",", "cornerCounters", "[", "'opening'", "]", "[", "2", "]", ")", "\n", "numbers", "[", "'icon_corner'", "]", "=", "(", "cornerCounters", "[", "'icon'", "]", "[", "0", "]", ",", "cornerCounters", "[", "'icon'", "]", "[", "1", "]", ",", "cornerCounters", "[", "'icon'", "]", "[", "2", "]", ")", "\n", "numbers", "[", "'icon'", "]", "=", "(", "iconCounter", "[", "0", "]", ",", "numImages", ",", "numImages", ")", "\n", "numbers", "[", "'room'", "]", "=", "(", "roomCounter", "[", "0", "]", ",", "numImages", ",", "numImages", ")", "\n", "pass", "\n", "\n", "\n", "", "if", "options", ".", "useCache", "!=", "-", "1", ":", "\n", "        ", "np", ".", "save", "(", "options", ".", "test_dir", "+", "'/network_numbers.npy'", ",", "numbers", ")", "\n", "pass", "\n", "", "print", "(", "[", "(", "k", ",", "v", "[", "0", "]", "/", "v", "[", "1", "]", ",", "v", "[", "0", "]", "/", "v", "[", "2", "]", ")", "for", "k", ",", "v", "in", "numbers", ".", "iteritems", "(", ")", "]", ")", "\n", "\n", "return", "numbers", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.visualizeBatch": [[1159, 1323], ["os.path.exists", "utils.sigmoid", "utils.sigmoid", "utils.sigmoid", "xrange", "os.mkdir", "print", "numpy.save", "numpy.save", "exit", "numpy.minimum().astype", "numpy.stack", "numpy.ones", "numpy.ones", "utils.drawSegmentationImage", "cv2.imwrite", "utils.drawSegmentationImage", "cv2.imwrite", "numpy.max", "plt.get_cmap", "plt.get_cmap.", "numpy.delete", "cv2.imwrite", "utils.drawSegmentationImage", "cv2.imwrite", "utils.drawSegmentationImage", "cv2.imwrite", "utils.drawSegmentationImage", "cv2.imwrite", "utils.drawSegmentationImage", "cv2.imwrite", "utils.drawSegmentationImage", "cv2.imwrite", "utils.drawSegmentationImage", "cv2.imwrite", "utils.drawSegmentationImage", "cv2.imwrite", "utils.drawSegmentationImage", "cv2.imwrite", "xrange", "print", "numpy.minimum", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "cv2.imwrite", "utils.segmentation2Heatmaps", "xrange", "reconstructFloorplan", "drawResultImage", "cv2.imwrite", "reconstructFloorplan", "drawResultImage", "cv2.imwrite", "print", "findMatches", "print", "print", "findMatches.iteritems", "cv2.dilate", "cv2.dilate", "utils.segmentation2Heatmaps", "utils.segmentation2Heatmaps", "os.mkdir", "utils.sigmoid", "utils.sigmoid", "len", "xrange", "print", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "utils.drawMaskImage", "numpy.ones", "numpy.ones", "str", "str", "str", "str", "findMatches.iteritems", "print", "float", "max", "float", "max"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.sigmoid", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.sigmoid", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.sigmoid", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.drawSegmentationImage", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.drawSegmentationImage", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.drawSegmentationImage", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.drawSegmentationImage", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.drawSegmentationImage", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.drawSegmentationImage", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.drawSegmentationImage", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.drawSegmentationImage", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.drawSegmentationImage", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.drawSegmentationImage", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.segmentation2Heatmaps", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.reconstructFloorplan", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawResultImage", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.reconstructFloorplan", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawResultImage", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.QP.findMatches", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.segmentation2Heatmaps", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.segmentation2Heatmaps", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.sigmoid", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.sigmoid", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.drawMaskImage"], ["", "def", "visualizeBatch", "(", "options", ",", "prefix", ",", "pred_dict", ",", "gt_dict", ",", "datasetFlag", ",", "savePredictions", "=", "False", ")", ":", "\n", "# To update the modified time for options.test_dir", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "options", ".", "test_dir", "+", "'/dummy'", ")", ":", "\n", "#os.rmdir(options.test_dir + '/dummy')", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "os", ".", "mkdir", "(", "options", ".", "test_dir", "+", "'/dummy'", ")", "\n", "pass", "\n", "\n", "", "if", "savePredictions", ":", "\n", "        ", "print", "(", "'save'", ")", "\n", "np", ".", "save", "(", "options", ".", "test_dir", "+", "'/dummy/gt_dict.npy'", ",", "gt_dict", ")", "\n", "np", ".", "save", "(", "options", ".", "test_dir", "+", "'/dummy/pred_dict.npy'", ",", "pred_dict", ")", "\n", "exit", "(", "1", ")", "\n", "pass", "\n", "\n", "", "if", "options", ".", "cornerLossType", "!=", "'mse'", ":", "\n", "        ", "threshold", "=", "np", ".", "ones", "(", "(", "HEIGHT", ",", "WIDTH", ",", "1", ")", ")", "*", "0.5", "\n", "", "else", ":", "\n", "        ", "threshold", "=", "np", ".", "ones", "(", "(", "HEIGHT", ",", "WIDTH", ",", "1", ")", ")", "*", "0.5", "# HEATMAP_SCALE / 2", "\n", "pass", "\n", "\n", "", "statisticsSum", "=", "{", "k", ":", "[", "0.0", ",", "0.0", ",", "0.0", "]", "for", "k", "in", "gt_dict", "}", "\n", "#print(pred_dict['corner'].max())", "\n", "pred_wc", "=", "pred_dict", "[", "'corner'", "]", "[", ":", ",", ":", ",", ":", ",", ":", "NUM_WALL_CORNERS", "]", "\n", "pred_oc", "=", "pred_dict", "[", "'corner'", "]", "[", ":", ",", ":", ",", ":", ",", "NUM_WALL_CORNERS", ":", "NUM_WALL_CORNERS", "+", "4", "]", "\n", "pred_ic", "=", "pred_dict", "[", "'corner'", "]", "[", ":", ",", ":", ",", ":", ",", "NUM_WALL_CORNERS", "+", "4", ":", "NUM_WALL_CORNERS", "+", "8", "]", "\n", "\n", "pred_wc", "=", "sigmoid", "(", "pred_wc", ")", "\n", "pred_oc", "=", "sigmoid", "(", "pred_oc", ")", "\n", "pred_ic", "=", "sigmoid", "(", "pred_ic", ")", "\n", "\n", "gt_wc", "=", "gt_dict", "[", "'corner'", "]", "[", ":", ",", ":", ",", ":", ",", ":", "NUM_WALL_CORNERS", "]", "\n", "gt_oc", "=", "gt_dict", "[", "'corner'", "]", "[", ":", ",", ":", ",", ":", ",", "NUM_WALL_CORNERS", ":", "NUM_WALL_CORNERS", "+", "4", "]", "\n", "gt_ic", "=", "gt_dict", "[", "'corner'", "]", "[", ":", ",", ":", ",", ":", ",", "NUM_WALL_CORNERS", "+", "4", ":", "NUM_WALL_CORNERS", "+", "8", "]", "\n", "\n", "for", "batchIndex", "in", "xrange", "(", "options", ".", "batchSize", ")", ":", "\n", "#print('batch index', batchIndex)", "\n", "        ", "density", "=", "np", ".", "minimum", "(", "gt_dict", "[", "'density'", "]", "[", "batchIndex", "]", "*", "255", ",", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "density", "=", "np", ".", "stack", "(", "[", "density", ",", "density", ",", "density", "]", ",", "axis", "=", "2", ")", "\n", "#print('heatmap max value', pred_wc[batchIndex].max())", "\n", "if", "datasetFlag", "in", "[", "0", ",", "1", ",", "4", "]", ":", "\n", "            ", "cornerImage", "=", "drawSegmentationImage", "(", "np", ".", "concatenate", "(", "[", "threshold", ",", "pred_wc", "[", "batchIndex", "]", "]", ",", "axis", "=", "2", ")", ",", "blackIndex", "=", "0", ")", "\n", "cornerImage", "[", "cornerImage", "==", "0", "]", "=", "density", "[", "cornerImage", "==", "0", "]", "\n", "cv2", ".", "imwrite", "(", "options", ".", "test_dir", "+", "'/'", "+", "prefix", "+", "'_'", "+", "str", "(", "batchIndex", ")", "+", "'_corner_pred.png'", ",", "cornerImage", ")", "\n", "\n", "cornerImage", "=", "drawSegmentationImage", "(", "np", ".", "concatenate", "(", "[", "threshold", ",", "gt_wc", "[", "batchIndex", "]", "]", ",", "axis", "=", "2", ")", ",", "blackIndex", "=", "0", ")", "\n", "cornerImage", "[", "cornerImage", "==", "0", "]", "=", "density", "[", "cornerImage", "==", "0", "]", "\n", "cv2", ".", "imwrite", "(", "options", ".", "test_dir", "+", "'/'", "+", "prefix", "+", "'_'", "+", "str", "(", "batchIndex", ")", "+", "'_corner_gt.png'", ",", "cornerImage", ")", "\n", "pass", "\n", "\n", "\n", "", "if", "False", ":", "\n", "            ", "corner_heat", "=", "np", ".", "max", "(", "pred_wc", "[", "batchIndex", "]", ",", "axis", "=", "-", "1", ")", "\n", "#print('corner_shape', corner_heat.shape)", "\n", "cmap", "=", "plt", ".", "get_cmap", "(", "'jet'", ")", "\n", "corner_rgba_img", "=", "cmap", "(", "corner_heat", ")", "\n", "corner_rgb_img", "=", "np", ".", "delete", "(", "corner_rgba_img", ",", "3", ",", "2", ")", "\n", "#print('rgb_out', corner_rgb_img.shape, corner_rgb_img.max(), corner_rgb_img.min())", "\n", "corner_rgb_img", "=", "(", "corner_rgb_img", "*", "255", ")", ".", "round", "(", ")", ".", "astype", "(", "'uint8'", ")", "\n", "#print('rgb_out', corner_rgb_img.shape, corner_rgb_img.max())", "\n", "cv2", ".", "imwrite", "(", "options", ".", "test_dir", "+", "'/'", "+", "prefix", "+", "'_'", "+", "str", "(", "batchIndex", ")", "+", "'_corner_heatmap.png'", ",", "corner_rgb_img", ")", "\n", "pass", "\n", "\n", "", "if", "datasetFlag", "in", "[", "1", ",", "4", "]", ":", "\n", "            ", "cornerImage", "=", "drawSegmentationImage", "(", "np", ".", "concatenate", "(", "[", "threshold", ",", "pred_oc", "[", "batchIndex", "]", "]", ",", "axis", "=", "2", ")", ",", "blackIndex", "=", "0", ")", "\n", "cornerImage", "[", "cornerImage", "==", "0", "]", "=", "density", "[", "cornerImage", "==", "0", "]", "\n", "cv2", ".", "imwrite", "(", "options", ".", "test_dir", "+", "'/'", "+", "prefix", "+", "'_'", "+", "str", "(", "batchIndex", ")", "+", "'_opening_corner_pred.png'", ",", "cornerImage", ")", "\n", "\n", "cornerImage", "=", "drawSegmentationImage", "(", "np", ".", "concatenate", "(", "[", "threshold", ",", "pred_ic", "[", "batchIndex", "]", "]", ",", "axis", "=", "2", ")", ",", "blackIndex", "=", "0", ")", "\n", "cornerImage", "[", "cornerImage", "==", "0", "]", "=", "density", "[", "cornerImage", "==", "0", "]", "\n", "cv2", ".", "imwrite", "(", "options", ".", "test_dir", "+", "'/'", "+", "prefix", "+", "'_'", "+", "str", "(", "batchIndex", ")", "+", "'_icon_corner_pred.png'", ",", "cornerImage", ")", "\n", "\n", "\n", "cornerImage", "=", "drawSegmentationImage", "(", "np", ".", "concatenate", "(", "[", "threshold", ",", "gt_oc", "[", "batchIndex", "]", "]", ",", "axis", "=", "2", ")", ",", "blackIndex", "=", "0", ")", "\n", "cornerImage", "[", "cornerImage", "==", "0", "]", "=", "density", "[", "cornerImage", "==", "0", "]", "\n", "cv2", ".", "imwrite", "(", "options", ".", "test_dir", "+", "'/'", "+", "prefix", "+", "'_'", "+", "str", "(", "batchIndex", ")", "+", "'_opening_corner_gt.png'", ",", "cornerImage", ")", "\n", "\n", "cornerImage", "=", "drawSegmentationImage", "(", "np", ".", "concatenate", "(", "[", "threshold", ",", "gt_ic", "[", "batchIndex", "]", "]", ",", "axis", "=", "2", ")", ",", "blackIndex", "=", "0", ")", "\n", "cornerImage", "[", "cornerImage", "==", "0", "]", "=", "density", "[", "cornerImage", "==", "0", "]", "\n", "cv2", ".", "imwrite", "(", "options", ".", "test_dir", "+", "'/'", "+", "prefix", "+", "'_'", "+", "str", "(", "batchIndex", ")", "+", "'_icon_corner_gt.png'", ",", "cornerImage", ")", "\n", "pass", "\n", "\n", "\n", "", "if", "datasetFlag", "in", "[", "1", ",", "2", ",", "3", ",", "4", "]", ":", "\n", "            ", "icon_density", "=", "drawSegmentationImage", "(", "gt_dict", "[", "'icon'", "]", "[", "batchIndex", "]", ",", "blackIndex", "=", "0", ")", "\n", "icon_density", "[", "icon_density", "==", "0", "]", "=", "density", "[", "icon_density", "==", "0", "]", "\n", "cv2", ".", "imwrite", "(", "options", ".", "test_dir", "+", "'/'", "+", "prefix", "+", "'_'", "+", "str", "(", "batchIndex", ")", "+", "'_icon_gt.png'", ",", "icon_density", ")", "\n", "\n", "icon_density", "=", "drawSegmentationImage", "(", "pred_dict", "[", "'icon'", "]", "[", "batchIndex", "]", ",", "blackIndex", "=", "0", ")", "\n", "icon_density", "[", "icon_density", "==", "0", "]", "=", "density", "[", "icon_density", "==", "0", "]", "\n", "cv2", ".", "imwrite", "(", "options", ".", "test_dir", "+", "'/'", "+", "prefix", "+", "'_'", "+", "str", "(", "batchIndex", ")", "+", "'_icon_pred.png'", ",", "icon_density", ")", "\n", "pass", "\n", "\n", "", "if", "datasetFlag", "in", "[", "1", ",", "3", ",", "4", "]", ":", "\n", "            ", "room_density", "=", "drawSegmentationImage", "(", "gt_dict", "[", "'room'", "]", "[", "batchIndex", "]", ",", "blackIndex", "=", "0", ")", "\n", "room_density", "[", "room_density", "==", "0", "]", "=", "density", "[", "room_density", "==", "0", "]", "\n", "cv2", ".", "imwrite", "(", "options", ".", "test_dir", "+", "'/'", "+", "prefix", "+", "'_'", "+", "str", "(", "batchIndex", ")", "+", "'_room_gt.png'", ",", "room_density", ")", "\n", "\n", "room_density", "=", "drawSegmentationImage", "(", "pred_dict", "[", "'room'", "]", "[", "batchIndex", "]", ",", "blackIndex", "=", "0", ")", "\n", "room_density", "[", "room_density", "==", "0", "]", "=", "density", "[", "room_density", "==", "0", "]", "\n", "cv2", ".", "imwrite", "(", "options", ".", "test_dir", "+", "'/'", "+", "prefix", "+", "'_'", "+", "str", "(", "batchIndex", ")", "+", "'_room_pred.png'", ",", "room_density", ")", "\n", "pass", "\n", "\n", "\n", "", "if", "batchIndex", "==", "0", "and", "False", ":", "\n", "            ", "for", "c", "in", "xrange", "(", "22", ")", ":", "\n", "                ", "cv2", ".", "imwrite", "(", "options", ".", "test_dir", "+", "'/mask_'", "+", "str", "(", "c", ")", "+", "'.png'", ",", "cv2", ".", "dilate", "(", "drawMaskImage", "(", "corner_segmentation", "[", "batchIndex", "]", "==", "c", ")", ",", "np", ".", "ones", "(", "(", "3", ",", "3", ")", ")", ",", "3", ")", ")", "\n", "continue", "\n", "", "continue", "\n", "\n", "", "if", "batchIndex", "<", "options", ".", "visualizeReconstruction", ":", "\n", "#if batchIndex != 1:", "\n", "#continue", "\n", "            ", "print", "(", "'reconstruct'", ")", "\n", "try", ":", "\n", "                ", "from", "QP", "import", "reconstructFloorplan", ",", "findMatches", "\n", "gtHeatmaps", "=", "segmentation2Heatmaps", "(", "gt_c", "-", "1", ",", "NUM_CORNERS", ")", "\n", "for", "heatmapIndex", "in", "xrange", "(", "gtHeatmaps", ".", "shape", "[", "-", "1", "]", ")", ":", "\n", "                    ", "gtHeatmaps", "[", ":", ",", ":", ",", "heatmapIndex", "]", "=", "cv2", ".", "dilate", "(", "gtHeatmaps", "[", ":", ",", ":", ",", "heatmapIndex", "]", ",", "np", ".", "ones", "(", "(", "3", ",", "3", ")", ")", ",", "7", ")", "\n", "continue", "\n", "", "result_gt", "=", "reconstructFloorplan", "(", "gtHeatmaps", "[", ":", ",", ":", ",", ":", "NUM_WALL_CORNERS", "]", ",", "gtHeatmaps", "[", ":", ",", ":", ",", "NUM_WALL_CORNERS", ":", "NUM_WALL_CORNERS", "+", "4", "]", ",", "gtHeatmaps", "[", ":", ",", ":", ",", "NUM_WALL_CORNERS", "+", "4", ":", "NUM_WALL_CORNERS", "+", "8", "]", ",", "segmentation2Heatmaps", "(", "gt_dict", "[", "'icon'", "]", "[", "batchIndex", "]", ",", "NUM_ICONS", ")", ",", "segmentation2Heatmaps", "(", "gt_dict", "[", "'room'", "]", "[", "batchIndex", "]", ",", "NUM_ROOMS", ")", ",", "density", "[", ":", ",", ":", ",", "0", "]", ",", "gt", "=", "True", ")", "\n", "resultImage", "=", "drawResultImage", "(", "WIDTH", ",", "HEIGHT", ",", "result_gt", ")", "\n", "cv2", ".", "imwrite", "(", "options", ".", "test_dir", "+", "'/'", "+", "prefix", "+", "'_'", "+", "str", "(", "batchIndex", ")", "+", "'_reconstruction_gt.png'", ",", "resultImage", ")", "\n", "#if batchIndex == 1:", "\n", "#exit(1)", "\n", "pred_debug_dir", "=", "options", ".", "test_dir", "+", "'/'", "+", "prefix", "+", "'_'", "+", "str", "(", "batchIndex", ")", "+", "'_debug'", "\n", "try", ":", "\n", "                    ", "os", ".", "mkdir", "(", "pred_debug_dir", ")", "\n", "pass", "\n", "", "except", "OSError", "as", "e", ":", "\n", "                    ", "pass", "\n", "", "result_pred", "=", "reconstructFloorplan", "(", "pred_wc", "[", "batchIndex", "]", ",", "pred_oc", "[", "batchIndex", "]", ",", "pred_ic", "[", "batchIndex", "]", ",", "sigmoid", "(", "pred_dict", "[", "'icon'", "]", "[", "batchIndex", "]", ")", ",", "sigmoid", "(", "pred_dict", "[", "'room'", "]", "[", "batchIndex", "]", ")", ",", "density", "[", ":", ",", ":", ",", "0", "]", ",", "gt_dict", "=", "gt_dict", ",", "gap", "=", "5", ",", "distanceThreshold", "=", "5", ",", "lengthThreshold", "=", "10", ",", "gt", "=", "False", ",", "debug_prefix", "=", "pred_debug_dir", ")", "\n", "#print(result_pred)", "\n", "if", "len", "(", "result_pred", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "resultImage", "=", "drawResultImage", "(", "WIDTH", ",", "HEIGHT", ",", "result_pred", ")", "\n", "cv2", ".", "imwrite", "(", "options", ".", "test_dir", "+", "'/'", "+", "prefix", "+", "'_'", "+", "str", "(", "batchIndex", ")", "+", "'_reconstruction_pred.png'", ",", "resultImage", ")", "\n", "\n", "print", "(", "'find predictions among ground-truths'", ")", "\n", "statistics", "=", "findMatches", "(", "result_pred", ",", "result_gt", ",", "distanceThreshold", "=", "10", ")", "\n", "print", "(", "statistics", ")", "\n", "print", "(", "'statistics'", ",", "[", "(", "k", ",", "float", "(", "v", "[", "0", "]", ")", "/", "max", "(", "v", "[", "1", "]", ",", "1", ")", ",", "float", "(", "v", "[", "0", "]", ")", "/", "max", "(", "v", "[", "2", "]", ",", "1", ")", ")", "for", "k", ",", "v", "in", "statistics", ".", "iteritems", "(", ")", "]", ")", "\n", "\n", "for", "k", ",", "v", "in", "statistics", ".", "iteritems", "(", ")", ":", "\n", "                    ", "for", "c", "in", "xrange", "(", "3", ")", ":", "\n", "                        ", "if", "c", "in", "statisticsSum", ":", "\n", "                            ", "statisticsSum", "[", "k", "]", "[", "c", "]", "+=", "v", "[", "c", "]", "\n", "", "else", ":", "\n", "                            ", "print", "(", "c", ",", "'not in'", ",", "statisticsSum", ")", "\n", "", "continue", "\n", "", "continue", "\n", "\n", "#print('find ground-truths among predictions')", "\n", "#findMatches(result_gt, result_pred, distanceThreshold=10)", "\n", "#exit(1)", "\n", "", "pass", "\n", "", "except", "Exception", "as", "e", ":", "\n", "#traceback.print_tb(e)", "\n", "                ", "print", "(", "'exception-----------: '", ",", "e", ")", "\n", "#raise e", "\n", "", "", "continue", "\n", "#exit(1)", "\n", "", "return", "statisticsSum", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.parse_args": [[1327, 1444], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "train.addArgs"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.parse_args", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.addArgs"], ["", "def", "parse_args", "(", ")", ":", "\n", "    ", "\"\"\"\n    Parse input arguments\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Planenet'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "dest", "=", "'gpu_id'", ",", "\n", "help", "=", "'GPU device id to use [0]'", ",", "\n", "default", "=", "'0'", ",", "type", "=", "str", ")", "\n", "#task: [train, test, predict]", "\n", "parser", ".", "add_argument", "(", "'--task'", ",", "dest", "=", "'task'", ",", "\n", "help", "=", "'task type: [train, test, predict]'", ",", "\n", "default", "=", "'train'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--restore'", ",", "dest", "=", "'restore'", ",", "\n", "help", "=", "'how to restore the model'", ",", "\n", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--batchSize'", ",", "dest", "=", "'batchSize'", ",", "\n", "help", "=", "'batch size'", ",", "\n", "default", "=", "6", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "dest", "=", "'dataset'", ",", "\n", "help", "=", "'dataset name for test/predict'", ",", "\n", "default", "=", "'1'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--slice'", ",", "dest", "=", "'slice'", ",", "help", "=", "'whether or not to use the slice version.'", ",", "\n", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--numTestingImages'", ",", "dest", "=", "'numTestingImages'", ",", "\n", "help", "=", "'the number of images to test/predict'", ",", "\n", "default", "=", "20", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--fineTuningCheckpoint'", ",", "dest", "=", "'fineTuningCheckpoint'", ",", "\n", "help", "=", "'specify the model for fine-tuning'", ",", "\n", "default", "=", "'checkpoint/floornet_hybrid4_branch0123_wsf'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--suffix'", ",", "dest", "=", "'suffix'", ",", "\n", "help", "=", "'add a suffix to keyname to distinguish experiments'", ",", "\n", "default", "=", "''", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--l2Weight'", ",", "dest", "=", "'l2Weight'", ",", "\n", "help", "=", "'L2 regulation weight'", ",", "\n", "default", "=", "5e-4", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--LR'", ",", "dest", "=", "'LR'", ",", "\n", "help", "=", "'learning rate'", ",", "\n", "default", "=", "3e-5", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--hybrid'", ",", "dest", "=", "'hybrid'", ",", "\n", "help", "=", "'hybrid training'", ",", "\n", "default", "=", "'1'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--branches'", ",", "help", "=", "'active branches of the network: 0: PointNet, 1: top-down, 2: bottom-up, 3: PointNet segmentation, 4: Image Features, 5: Image Features with Joint training, 6: Additional Layers Before Pred (0, 01, 012, 0123, 01234, 1, 02*, 013)'", ",", "\n", "default", "=", "'0123'", ",", "type", "=", "str", ")", "\n", "#parser.add_argument('--batch_norm', help='add batch normalization to network', action='store_true')", "\n", "\n", "parser", ".", "add_argument", "(", "'--cornerLossType'", ",", "dest", "=", "'cornerLossType'", ",", "\n", "help", "=", "'corner loss type'", ",", "\n", "default", "=", "'sigmoid'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--loss'", ",", "\n", "help", "=", "'loss type needed. [wall corner loss, door corner loss, icon corner loss, icon segmentation, room segmentation]'", ",", "\n", "default", "=", "'01234'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--cornerLossWeight'", ",", "dest", "=", "'cornerLossWeight'", ",", "\n", "help", "=", "'corner loss weight'", ",", "\n", "default", "=", "10", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--augmentation'", ",", "dest", "=", "'augmentation'", ",", "\n", "help", "=", "'augmentation (wsfd)'", ",", "\n", "default", "=", "'wsf'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--numPoints'", ",", "dest", "=", "'numPoints'", ",", "\n", "help", "=", "'number of points'", ",", "\n", "default", "=", "50000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--numInputChannels'", ",", "dest", "=", "'numInputChannels'", ",", "\n", "help", "=", "'number of input channels'", ",", "\n", "default", "=", "7", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--sumScale'", ",", "dest", "=", "'sumScale'", ",", "\n", "help", "=", "'avoid segment sum results to be too large'", ",", "\n", "default", "=", "10", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--visualizeReconstruction'", ",", "dest", "=", "'visualizeReconstruction'", ",", "\n", "help", "=", "'whether to visualize flooplan reconstruction or not'", ",", "\n", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--numFinalChannels'", ",", "dest", "=", "'numFinalChannels'", ",", "help", "=", "'the number of final channels'", ",", "default", "=", "256", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--numIterations'", ",", "dest", "=", "'numIterations'", ",", "help", "=", "'the number of iterations'", ",", "default", "=", "10000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--startIteration'", ",", "dest", "=", "'startIteration'", ",", "help", "=", "'the index of iteration to start'", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--useCache'", ",", "dest", "=", "'useCache'", ",", "\n", "help", "=", "'whether to cache or not'", ",", "\n", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--debug'", ",", "dest", "=", "'debug'", ",", "\n", "help", "=", "'debug index'", ",", "\n", "default", "=", "-", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--outputLayers'", ",", "dest", "=", "'outputLayers'", ",", "\n", "help", "=", "'output layers'", ",", "\n", "default", "=", "'two'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--kernelSize'", ",", "dest", "=", "'kernelSize'", ",", "\n", "help", "=", "'corner kernel size'", ",", "\n", "default", "=", "11", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--iconLossWeight'", ",", "dest", "=", "'iconLossWeight'", ",", "\n", "help", "=", "'icon loss weight'", ",", "\n", "default", "=", "1", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--poolingTypes'", ",", "dest", "=", "'poolingTypes'", ",", "\n", "help", "=", "'pooling types'", ",", "\n", "default", "=", "'sssmm'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--visualize'", ",", "dest", "=", "'visualize'", ",", "\n", "help", "=", "'visualize during training'", ",", "\n", "action", "=", "'store_false'", ")", "\n", "parser", ".", "add_argument", "(", "'--iconPositiveWeight'", ",", "dest", "=", "'iconPositiveWeight'", ",", "\n", "help", "=", "'icon positive weight'", ",", "\n", "default", "=", "10", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--prefix'", ",", "dest", "=", "'prefix'", ",", "\n", "help", "=", "'prefix'", ",", "\n", "default", "=", "'floornet'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--drawFinal'", ",", "dest", "=", "'drawFinal'", ",", "\n", "help", "=", "'draw final'", ",", "\n", "action", "=", "'store_false'", ")", "\n", "parser", ".", "add_argument", "(", "'--separateIconLoss'", ",", "dest", "=", "'separateIconLoss'", ",", "\n", "help", "=", "'separate loss for icon'", ",", "\n", "action", "=", "'store_false'", ")", "\n", "parser", ".", "add_argument", "(", "'--evaluateImage'", ",", "dest", "=", "'evaluateImage'", ",", "\n", "help", "=", "'evaluate image'", ",", "\n", "action", "=", "'store_true'", ")", "\n", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "#args.keyname = os.path.basename(__file__).rstrip('.py')", "\n", "#args.keyname = args.keyname.replace('train_', '')", "\n", "#layers where deep supervision happens", "\n", "addArgs", "(", "args", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.train.addArgs": [[1446, 1513], ["str", "str", "str", "str", "str", "str", "str", "str", "str"], "function", ["None"], ["", "def", "addArgs", "(", "args", ")", ":", "\n", "#args.keyname = 'floornet'", "\n", "    ", "args", ".", "keyname", "=", "args", ".", "prefix", "\n", "\n", "args", ".", "keyname", "+=", "'_hybrid'", "+", "args", ".", "hybrid", "\n", "args", ".", "keyname", "+=", "'_branch'", "+", "args", ".", "branches", "\n", "if", "args", ".", "cornerLossType", "!=", "'sigmoid'", ":", "\n", "        ", "args", ".", "keyname", "+=", "'_'", "+", "args", ".", "cornerLossType", "\n", "pass", "\n", "\n", "", "if", "args", ".", "augmentation", "!=", "''", ":", "\n", "        ", "args", ".", "keyname", "+=", "'_'", "+", "args", ".", "augmentation", "\n", "pass", "\n", "\n", "", "if", "args", ".", "numPoints", "!=", "50000", ":", "\n", "        ", "args", ".", "keyname", "+=", "'_'", "+", "str", "(", "args", ".", "numPoints", ")", "\n", "pass", "\n", "", "if", "args", ".", "loss", "!=", "'01234'", ":", "\n", "        ", "args", ".", "keyname", "+=", "'_loss'", "+", "str", "(", "args", ".", "loss", ")", "\n", "pass", "\n", "\n", "", "if", "args", ".", "numFinalChannels", "!=", "256", ":", "\n", "        ", "args", ".", "keyname", "+=", "'_'", "+", "str", "(", "args", ".", "numFinalChannels", ")", "\n", "NUM_CHANNELS", "[", "-", "1", "]", "=", "args", ".", "numFinalChannels", "\n", "pass", "\n", "# if args.numIterations != 10000:", "\n", "#     args.keyname += '_' + str(args.numIterations)", "\n", "#     pass", "\n", "", "if", "args", ".", "outputLayers", "!=", "'two'", ":", "\n", "        ", "args", ".", "keyname", "+=", "'_'", "+", "str", "(", "args", ".", "outputLayers", ")", "\n", "pass", "\n", "\n", "", "if", "args", ".", "kernelSize", "!=", "11", ":", "\n", "        ", "args", ".", "keyname", "+=", "'_'", "+", "str", "(", "args", ".", "kernelSize", ")", "\n", "pass", "\n", "\n", "", "if", "args", ".", "iconLossWeight", "!=", "1", ":", "\n", "        ", "args", ".", "keyname", "+=", "'_'", "+", "str", "(", "args", ".", "iconLossWeight", ")", "\n", "pass", "\n", "\n", "", "if", "args", ".", "sumScale", "!=", "10", ":", "\n", "        ", "args", ".", "keyname", "+=", "'_'", "+", "str", "(", "args", ".", "sumScale", ")", "\n", "pass", "\n", "\n", "", "if", "args", ".", "poolingTypes", "!=", "'sssmm'", ":", "\n", "        ", "args", ".", "keyname", "+=", "'_'", "+", "str", "(", "args", ".", "poolingTypes", ")", "\n", "pass", "\n", "\n", "", "if", "args", ".", "iconPositiveWeight", "!=", "10", ":", "\n", "        ", "args", ".", "keyname", "+=", "'_'", "+", "str", "(", "args", ".", "iconPositiveWeight", ")", "\n", "pass", "\n", "", "if", "args", ".", "slice", ":", "\n", "        ", "args", ".", "keyname", "+=", "'_slice'", "\n", "pass", "\n", "# if args.batch_norm:", "\n", "#     args.keyname += '_batchnorm'", "\n", "", "args", ".", "checkpoint_dir", "=", "'checkpoint/'", "+", "args", ".", "keyname", "\n", "args", ".", "log_dir", "=", "'log/'", "+", "args", ".", "keyname", "\n", "args", ".", "test_dir", "=", "'test/'", "+", "args", ".", "keyname", "\n", "if", "args", ".", "task", "==", "'test'", ":", "\n", "        ", "args", ".", "test_dir", "+=", "'/dataset_'", "+", "args", ".", "dataset", "\n", "args", ".", "batchSize", "=", "1", "\n", "pass", "\n", "", "if", "args", ".", "task", "==", "'predict'", ":", "\n", "        ", "args", ".", "predict_dir", "=", "'predict/'", "+", "args", ".", "keyname", "+", "'_'", "+", "args", ".", "dataset", "\n", "pass", "\n", "", "args", ".", "dump_dir", "=", "'dump/'", "+", "args", ".", "keyname", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.getOrientationRanges": [[29, 32], ["None"], "function", ["None"], ["def", "getOrientationRanges", "(", "width", ",", "height", ")", ":", "\n", "    ", "orientationRanges", "=", "[", "[", "width", ",", "0", ",", "0", ",", "0", "]", ",", "[", "width", ",", "height", ",", "width", ",", "0", "]", ",", "[", "width", ",", "height", ",", "0", ",", "height", "]", ",", "[", "0", ",", "height", ",", "0", ",", "0", "]", "]", "\n", "return", "orientationRanges", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.getIconNames": [[33, 40], ["floorplan_utils.getIconLabelMap", "getIconLabelMap.iteritems", "iconNames.append"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.getIconLabelMap"], ["", "def", "getIconNames", "(", ")", ":", "\n", "    ", "iconNames", "=", "[", "]", "\n", "iconLabelMap", "=", "getIconLabelMap", "(", ")", "\n", "for", "iconName", ",", "_", "in", "iconLabelMap", ".", "iteritems", "(", ")", ":", "\n", "        ", "iconNames", ".", "append", "(", "iconName", ")", "\n", "continue", "\n", "", "return", "iconNames", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.getRoomLabelMap": [[41, 60], ["None"], "function", ["None"], ["", "def", "getRoomLabelMap", "(", ")", ":", "\n", "    ", "labelMap", "=", "{", "}", "\n", "labelMap", "[", "'living_room'", "]", "=", "1", "\n", "labelMap", "[", "'kitchen'", "]", "=", "2", "\n", "labelMap", "[", "'bedroom'", "]", "=", "3", "\n", "labelMap", "[", "'bathroom'", "]", "=", "4", "\n", "labelMap", "[", "'restroom'", "]", "=", "4", "\n", "labelMap", "[", "'office'", "]", "=", "3", "\n", "labelMap", "[", "'closet'", "]", "=", "6", "\n", "labelMap", "[", "'balcony'", "]", "=", "7", "\n", "labelMap", "[", "'corridor'", "]", "=", "8", "\n", "labelMap", "[", "'dining_room'", "]", "=", "9", "\n", "labelMap", "[", "'laundry_room'", "]", "=", "10", "\n", "labelMap", "[", "'garage'", "]", "=", "11", "\n", "labelMap", "[", "'recreation_room'", "]", "=", "12", "\n", "labelMap", "[", "'stairs'", "]", "=", "13", "\n", "labelMap", "[", "'other'", "]", "=", "14", "\n", "labelMap", "[", "'wall'", "]", "=", "15", "\n", "return", "labelMap", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.getLabelRoomMap": [[61, 72], ["None"], "function", ["None"], ["", "def", "getLabelRoomMap", "(", ")", ":", "\n", "    ", "labelMap", "=", "{", "}", "\n", "labelMap", "[", "1", "]", "=", "'living room'", "\n", "labelMap", "[", "2", "]", "=", "'kitchen'", "\n", "labelMap", "[", "3", "]", "=", "'bedroom'", "\n", "labelMap", "[", "4", "]", "=", "'bathroom'", "\n", "labelMap", "[", "6", "]", "=", "'closet'", "\n", "labelMap", "[", "7", "]", "=", "'balcony'", "\n", "labelMap", "[", "8", "]", "=", "'corridor'", "\n", "labelMap", "[", "9", "]", "=", "'dining room'", "\n", "return", "labelMap", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.getIconLabelMap": [[73, 91], ["None"], "function", ["None"], ["", "def", "getIconLabelMap", "(", ")", ":", "\n", "    ", "labelMap", "=", "{", "}", "\n", "labelMap", "[", "'cooking_counter'", "]", "=", "1", "\n", "labelMap", "[", "'bathtub'", "]", "=", "2", "\n", "labelMap", "[", "'toilet'", "]", "=", "3", "\n", "labelMap", "[", "'washing_basin'", "]", "=", "4", "\n", "labelMap", "[", "'sofa'", "]", "=", "5", "\n", "labelMap", "[", "'cabinet'", "]", "=", "6", "\n", "labelMap", "[", "'bed'", "]", "=", "7", "\n", "labelMap", "[", "'table'", "]", "=", "8", "\n", "labelMap", "[", "'desk'", "]", "=", "8", "\n", "labelMap", "[", "'refrigerator'", "]", "=", "9", "\n", "labelMap", "[", "'TV'", "]", "=", "0", "\n", "labelMap", "[", "'entrance'", "]", "=", "0", "\n", "labelMap", "[", "'chair'", "]", "=", "0", "\n", "labelMap", "[", "'door'", "]", "=", "11", "\n", "labelMap", "[", "'window'", "]", "=", "12", "\n", "return", "labelMap", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.getLabelIconMap": [[92, 104], ["None"], "function", ["None"], ["", "def", "getLabelIconMap", "(", ")", ":", "\n", "    ", "labelMap", "=", "{", "}", "\n", "labelMap", "[", "1", "]", "=", "'cooking_counter'", "\n", "labelMap", "[", "2", "]", "=", "'bathtub'", "\n", "labelMap", "[", "3", "]", "=", "'toilet'", "\n", "labelMap", "[", "4", "]", "=", "'washing_basin'", "\n", "labelMap", "[", "5", "]", "=", "'sofa'", "\n", "labelMap", "[", "6", "]", "=", "'cabinet'", "\n", "labelMap", "[", "7", "]", "=", "'bed'", "\n", "labelMap", "[", "8", "]", "=", "'table'", "\n", "labelMap", "[", "9", "]", "=", "'refrigerator'", "\n", "return", "labelMap", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.getLabelMapNYU40": [[105, 148], ["None"], "function", ["None"], ["", "def", "getLabelMapNYU40", "(", ")", ":", "\n", "    ", "labelMap", "=", "{", "}", "\n", "labelMap", "[", "1", "]", "=", "'wall'", "\n", "labelMap", "[", "2", "]", "=", "'floor'", "\n", "labelMap", "[", "3", "]", "=", "'cabinet'", "\n", "labelMap", "[", "4", "]", "=", "'bed'", "\n", "labelMap", "[", "5", "]", "=", "'chair'", "\n", "labelMap", "[", "6", "]", "=", "'sofa'", "\n", "labelMap", "[", "7", "]", "=", "'table'", "\n", "labelMap", "[", "8", "]", "=", "'door'", "\n", "labelMap", "[", "9", "]", "=", "'window'", "\n", "labelMap", "[", "10", "]", "=", "'bookshelf'", "\n", "labelMap", "[", "11", "]", "=", "'picture'", "\n", "labelMap", "[", "12", "]", "=", "'cooking_counter'", "\n", "labelMap", "[", "13", "]", "=", "'blinds'", "\n", "labelMap", "[", "14", "]", "=", "'desk'", "\n", "labelMap", "[", "15", "]", "=", "'shelf'", "\n", "labelMap", "[", "16", "]", "=", "'curtain'", "\n", "labelMap", "[", "17", "]", "=", "'dresser'", "\n", "labelMap", "[", "18", "]", "=", "'pillow'", "\n", "labelMap", "[", "19", "]", "=", "'mirror'", "\n", "labelMap", "[", "20", "]", "=", "'entrance'", "#mat", "\n", "labelMap", "[", "21", "]", "=", "'clothes'", "\n", "labelMap", "[", "22", "]", "=", "'ceiling'", "\n", "labelMap", "[", "23", "]", "=", "'book'", "\n", "labelMap", "[", "24", "]", "=", "'refrigerator'", "\n", "labelMap", "[", "25", "]", "=", "'TV'", "\n", "labelMap", "[", "26", "]", "=", "'paper'", "\n", "labelMap", "[", "27", "]", "=", "'towel'", "\n", "labelMap", "[", "28", "]", "=", "'shower_curtain'", "\n", "labelMap", "[", "29", "]", "=", "'box'", "\n", "labelMap", "[", "30", "]", "=", "'whiteboard'", "\n", "labelMap", "[", "31", "]", "=", "'person'", "\n", "labelMap", "[", "32", "]", "=", "'nightstand'", "\n", "labelMap", "[", "33", "]", "=", "'toilet'", "\n", "labelMap", "[", "34", "]", "=", "'washing_basin'", "\n", "labelMap", "[", "35", "]", "=", "'lamp'", "\n", "labelMap", "[", "36", "]", "=", "'bathtub'", "\n", "labelMap", "[", "37", "]", "=", "'bag'", "\n", "labelMap", "[", "38", "]", "=", "'otherprop'", "\n", "labelMap", "[", "39", "]", "=", "'otherstructure'", "\n", "labelMap", "[", "40", "]", "=", "'unannotated'", "\n", "return", "labelMap", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.getNYUScanNetMap": [[149, 192], ["numpy.zeros"], "function", ["None"], ["", "def", "getNYUScanNetMap", "(", ")", ":", "\n", "    ", "labelMap", "=", "np", ".", "zeros", "(", "41", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "labelMap", "[", "1", "]", "=", "1", "\n", "labelMap", "[", "2", "]", "=", "2", "\n", "labelMap", "[", "3", "]", "=", "19", "\n", "labelMap", "[", "4", "]", "=", "6", "\n", "labelMap", "[", "5", "]", "=", "3", "\n", "labelMap", "[", "6", "]", "=", "8", "\n", "labelMap", "[", "7", "]", "=", "4", "\n", "labelMap", "[", "8", "]", "=", "14", "\n", "labelMap", "[", "9", "]", "=", "15", "\n", "labelMap", "[", "10", "]", "=", "7", "\n", "labelMap", "[", "11", "]", "=", "18", "\n", "labelMap", "[", "12", "]", "=", "13", "\n", "labelMap", "[", "13", "]", "=", "12", "#20 Blinds", "\n", "labelMap", "[", "14", "]", "=", "5", "\n", "labelMap", "[", "15", "]", "=", "7", "\n", "labelMap", "[", "16", "]", "=", "12", "\n", "labelMap", "[", "17", "]", "=", "19", "\n", "labelMap", "[", "18", "]", "=", "20", "\n", "labelMap", "[", "19", "]", "=", "20", "\n", "labelMap", "[", "20", "]", "=", "20", "\n", "labelMap", "[", "21", "]", "=", "20", "\n", "labelMap", "[", "22", "]", "=", "1", "\n", "labelMap", "[", "23", "]", "=", "20", "\n", "labelMap", "[", "24", "]", "=", "17", "\n", "labelMap", "[", "25", "]", "=", "20", "\n", "labelMap", "[", "26", "]", "=", "20", "\n", "labelMap", "[", "27", "]", "=", "20", "\n", "labelMap", "[", "28", "]", "=", "16", "\n", "labelMap", "[", "29", "]", "=", "20", "\n", "labelMap", "[", "30", "]", "=", "20", "\n", "labelMap", "[", "31", "]", "=", "20", "\n", "labelMap", "[", "32", "]", "=", "20", "\n", "labelMap", "[", "33", "]", "=", "11", "\n", "labelMap", "[", "34", "]", "=", "9", "\n", "labelMap", "[", "35", "]", "=", "20", "\n", "labelMap", "[", "36", "]", "=", "10", "\n", "labelMap", "[", "37", "]", "=", "20", "\n", "labelMap", "[", "38", "]", "=", "20", "\n", "labelMap", "[", "39", "]", "=", "20", "\n", "labelMap", "[", "40", "]", "=", "0", "\n", "return", "labelMap", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.getMatterportClassMap": [[193, 227], ["None"], "function", ["None"], ["", "def", "getMatterportClassMap", "(", ")", ":", "\n", "    ", "classMap", "=", "{", "\n", "'a'", ":", "1", ",", "\n", "'b'", ":", "2", ",", "\n", "'c'", ":", "3", ",", "\n", "'d'", ":", "4", ",", "\n", "'e'", ":", "5", ",", "\n", "'f'", ":", "6", ",", "\n", "'g'", ":", "7", ",", "\n", "'h'", ":", "8", ",", "\n", "'i'", ":", "9", ",", "\n", "'j'", ":", "10", ",", "\n", "'k'", ":", "11", ",", "\n", "'l'", ":", "12", ",", "\n", "'m'", ":", "13", ",", "\n", "'n'", ":", "14", ",", "\n", "'o'", ":", "15", ",", "\n", "'p'", ":", "16", ",", "\n", "'r'", ":", "17", ",", "\n", "'s'", ":", "18", ",", "\n", "'t'", ":", "19", ",", "\n", "'u'", ":", "20", ",", "\n", "'v'", ":", "21", ",", "\n", "'w'", ":", "22", ",", "\n", "'x'", ":", "23", ",", "\n", "'y'", ":", "24", ",", "\n", "'z'", ":", "25", ",", "\n", "'B'", ":", "26", ",", "\n", "'C'", ":", "27", ",", "\n", "'D'", ":", "28", ",", "\n", "'S'", ":", "29", ",", "\n", "'Z'", ":", "30", "\n", "}", "\n", "return", "classMap", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim": [[228, 236], ["abs", "abs"], "function", ["None"], ["", "def", "calcLineDim", "(", "points", ",", "line", ")", ":", "\n", "  ", "point_1", "=", "points", "[", "line", "[", "0", "]", "]", "\n", "point_2", "=", "points", "[", "line", "[", "1", "]", "]", "\n", "if", "abs", "(", "point_2", "[", "0", "]", "-", "point_1", "[", "0", "]", ")", ">", "abs", "(", "point_2", "[", "1", "]", "-", "point_1", "[", "1", "]", ")", ":", "\n", "    ", "lineDim", "=", "0", "\n", "", "else", ":", "\n", "    ", "lineDim", "=", "1", "\n", "", "return", "lineDim", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDirection": [[237, 239], ["int", "abs", "abs"], "function", ["None"], ["", "def", "calcLineDirection", "(", "line", ")", ":", "\n", "    ", "return", "int", "(", "abs", "(", "line", "[", "0", "]", "[", "0", "]", "-", "line", "[", "1", "]", "[", "0", "]", ")", "<", "abs", "(", "line", "[", "0", "]", "[", "1", "]", "-", "line", "[", "1", "]", "[", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDirectionPoints": [[240, 250], ["isinstance", "isinstance", "floorplan_utils.calcLineDirection"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDirection"], ["", "def", "calcLineDirectionPoints", "(", "points", ",", "line", ")", ":", "\n", "  ", "point_1", "=", "points", "[", "line", "[", "0", "]", "]", "\n", "point_2", "=", "points", "[", "line", "[", "1", "]", "]", "\n", "if", "isinstance", "(", "point_1", "[", "0", "]", ",", "tuple", ")", ":", "\n", "      ", "point_1", "=", "point_1", "[", "0", "]", "\n", "pass", "\n", "", "if", "isinstance", "(", "point_2", "[", "0", "]", ",", "tuple", ")", ":", "\n", "      ", "point_2", "=", "point_2", "[", "0", "]", "\n", "pass", "\n", "", "return", "calcLineDirection", "(", "(", "point_1", ",", "point_2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.pointDistance": [[251, 254], ["max", "abs", "abs"], "function", ["None"], ["", "def", "pointDistance", "(", "point_1", ",", "point_2", ")", ":", "\n", "#return np.sqrt(pow(point_1[0] - point_2[0], 2) + pow(point_1[1] - point_2[1], 2))", "\n", "    ", "return", "max", "(", "abs", "(", "point_1", "[", "0", "]", "-", "point_2", "[", "0", "]", ")", ",", "abs", "(", "point_1", "[", "1", "]", "-", "point_2", "[", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.sortLines": [[255, 266], ["floorplan_utils.calcLineDirection", "newLines.append", "newLines.append"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDirection"], ["", "def", "sortLines", "(", "lines", ")", ":", "\n", "    ", "newLines", "=", "[", "]", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "direction", "=", "calcLineDirection", "(", "line", ")", "\n", "if", "line", "[", "0", "]", "[", "direction", "]", "<", "line", "[", "1", "]", "[", "direction", "]", ":", "\n", "            ", "newLines", ".", "append", "(", "(", "line", "[", "0", "]", ",", "line", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "newLines", ".", "append", "(", "(", "line", "[", "1", "]", ",", "line", "[", "0", "]", ")", ")", "\n", "pass", "\n", "", "continue", "\n", "", "return", "newLines", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.lineRange": [[267, 273], ["floorplan_utils.calcLineDirection", "min", "max"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDirection"], ["", "def", "lineRange", "(", "line", ")", ":", "\n", "    ", "direction", "=", "calcLineDirection", "(", "line", ")", "\n", "fixedValue", "=", "(", "line", "[", "0", "]", "[", "1", "-", "direction", "]", "+", "line", "[", "1", "]", "[", "1", "-", "direction", "]", ")", "/", "2", "\n", "minValue", "=", "min", "(", "line", "[", "0", "]", "[", "direction", "]", ",", "line", "[", "1", "]", "[", "direction", "]", ")", "\n", "maxValue", "=", "max", "(", "line", "[", "0", "]", "[", "direction", "]", ",", "line", "[", "1", "]", "[", "direction", "]", ")", "\n", "return", "direction", ",", "fixedValue", ",", "minValue", ",", "maxValue", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.findConnections": [[274, 311], ["xrange", "floorplan_utils.lineRange", "floorplan_utils.lineRange", "xrange", "abs", "abs", "abs", "abs", "min", "min", "floorplan_utils.pointDistance", "max", "max"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.lineRange", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.lineRange", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.pointDistance"], ["", "def", "findConnections", "(", "line_1", ",", "line_2", ",", "gap", ")", ":", "\n", "    ", "connection_1", "=", "-", "1", "\n", "connection_2", "=", "-", "1", "\n", "pointConnected", "=", "False", "\n", "for", "c_1", "in", "xrange", "(", "2", ")", ":", "\n", "        ", "if", "pointConnected", ":", "\n", "            ", "break", "\n", "", "for", "c_2", "in", "xrange", "(", "2", ")", ":", "\n", "            ", "if", "pointDistance", "(", "line_1", "[", "c_1", "]", ",", "line_2", "[", "c_2", "]", ")", ">", "gap", ":", "\n", "                ", "continue", "\n", "\n", "", "connection_1", "=", "c_1", "\n", "connection_2", "=", "c_2", "\n", "connectionPoint", "=", "(", "(", "line_1", "[", "c_1", "]", "[", "0", "]", "+", "line_2", "[", "c_2", "]", "[", "0", "]", ")", "/", "2", ",", "(", "line_1", "[", "c_1", "]", "[", "1", "]", "+", "line_2", "[", "c_2", "]", "[", "1", "]", ")", "/", "2", ")", "\n", "pointConnected", "=", "True", "\n", "break", "\n", "", "continue", "\n", "", "if", "pointConnected", ":", "\n", "        ", "return", "[", "connection_1", ",", "connection_2", "]", ",", "connectionPoint", "\n", "", "direction_1", ",", "fixedValue_1", ",", "min_1", ",", "max_1", "=", "lineRange", "(", "line_1", ")", "\n", "direction_2", ",", "fixedValue_2", ",", "min_2", ",", "max_2", "=", "lineRange", "(", "line_2", ")", "\n", "if", "direction_1", "==", "direction_2", ":", "\n", "        ", "return", "[", "-", "1", ",", "-", "1", "]", ",", "(", "0", ",", "0", ")", "\n", "\n", "#print(fixedValue_1, min_1, max_1, fixedValue_2, min_2, max_2)", "\n", "", "if", "min", "(", "fixedValue_1", ",", "max_2", ")", "<", "max", "(", "fixedValue_1", ",", "min_2", ")", "-", "gap", "or", "min", "(", "fixedValue_2", ",", "max_1", ")", "<", "max", "(", "fixedValue_2", ",", "min_1", ")", "-", "gap", ":", "\n", "        ", "return", "[", "-", "1", ",", "-", "1", "]", ",", "(", "0", ",", "0", ")", "\n", "\n", "", "if", "abs", "(", "min_1", "-", "fixedValue_2", ")", "<=", "gap", ":", "\n", "        ", "return", "[", "0", ",", "2", "]", ",", "(", "fixedValue_2", ",", "fixedValue_1", ")", "\n", "", "if", "abs", "(", "max_1", "-", "fixedValue_2", ")", "<=", "gap", ":", "\n", "        ", "return", "[", "1", ",", "2", "]", ",", "(", "fixedValue_2", ",", "fixedValue_1", ")", "\n", "", "if", "abs", "(", "min_2", "-", "fixedValue_1", ")", "<=", "gap", ":", "\n", "        ", "return", "[", "2", ",", "0", "]", ",", "(", "fixedValue_2", ",", "fixedValue_1", ")", "\n", "", "if", "abs", "(", "max_2", "-", "fixedValue_1", ")", "<=", "gap", ":", "\n", "        ", "return", "[", "2", ",", "1", "]", ",", "(", "fixedValue_2", ",", "fixedValue_1", ")", "\n", "", "return", "[", "2", ",", "2", "]", ",", "(", "fixedValue_2", ",", "fixedValue_1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.lines2Corners": [[312, 372], ["xrange", "enumerate", "len", "lineConnections.append", "enumerate", "enumerate", "floorplan_utils.findConnections", "xrange", "corners.append", "floorplan_utils.calcLineDirection", "floorplan_utils.calcLineDirection", "print", "exit", "floorplan_utils.calcLineDirection", "print", "singularCorners.append", "print", "singularCorners.append", "print", "exit", "tuple"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.findConnections", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDirection", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDirection", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDirection"], ["", "def", "lines2Corners", "(", "lines", ",", "gap", ",", "getSingularCorners", "=", "False", ")", ":", "\n", "    ", "corners", "=", "[", "]", "\n", "lineConnections", "=", "[", "]", "\n", "for", "_", "in", "xrange", "(", "len", "(", "lines", ")", ")", ":", "\n", "        ", "lineConnections", ".", "append", "(", "{", "}", ")", "\n", "continue", "\n", "\n", "", "connectionCornerMap", "=", "{", "}", "\n", "connectionCornerMap", "[", "(", "1", ",", "1", ")", "]", "=", "4", "\n", "connectionCornerMap", "[", "(", "0", ",", "1", ")", "]", "=", "5", "\n", "connectionCornerMap", "[", "(", "0", ",", "0", ")", "]", "=", "6", "\n", "connectionCornerMap", "[", "(", "1", ",", "0", ")", "]", "=", "7", "\n", "connectionCornerMap", "[", "(", "2", ",", "0", ")", "]", "=", "8", "\n", "connectionCornerMap", "[", "(", "1", ",", "2", ")", "]", "=", "9", "\n", "connectionCornerMap", "[", "(", "2", ",", "1", ")", "]", "=", "10", "\n", "connectionCornerMap", "[", "(", "0", ",", "2", ")", "]", "=", "11", "\n", "connectionCornerMap", "[", "(", "2", ",", "2", ")", "]", "=", "12", "\n", "corners", "=", "[", "]", "\n", "for", "lineIndex_1", ",", "line_1", "in", "enumerate", "(", "lines", ")", ":", "\n", "        ", "for", "lineIndex_2", ",", "line_2", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "if", "lineIndex_2", "==", "lineIndex_1", ":", "\n", "                ", "continue", "\n", "", "connections", ",", "connectionPoint", "=", "findConnections", "(", "line_1", ",", "line_2", ",", "gap", "=", "gap", ")", "\n", "if", "connections", "[", "0", "]", "==", "-", "1", "and", "connections", "[", "1", "]", "==", "-", "1", ":", "\n", "                ", "continue", "\n", "", "if", "calcLineDirection", "(", "line_1", ")", "==", "calcLineDirection", "(", "line_2", ")", ":", "\n", "                ", "print", "(", "'overlap'", ",", "line_1", ",", "line_2", ",", "connections", ")", "\n", "exit", "(", "1", ")", "\n", "pass", "\n", "", "if", "calcLineDirection", "(", "line_1", ")", "==", "1", ":", "\n", "                ", "continue", "\n", "\n", "", "indices", "=", "[", "lineIndex_1", ",", "lineIndex_2", "]", "\n", "#print(lineIndex_1, lineIndex_2, connections)", "\n", "for", "c", "in", "xrange", "(", "2", ")", ":", "\n", "                ", "if", "connections", "[", "c", "]", "in", "[", "0", ",", "1", "]", "and", "connections", "[", "c", "]", "in", "lineConnections", "[", "indices", "[", "c", "]", "]", ":", "\n", "                    ", "print", "(", "'duplicate corner'", ",", "line_1", ",", "line_2", ",", "connections", ")", "\n", "exit", "(", "1", ")", "\n", "pass", "\n", "", "lineConnections", "[", "indices", "[", "c", "]", "]", "[", "connections", "[", "c", "]", "]", "=", "True", "\n", "continue", "\n", "", "corners", ".", "append", "(", "(", "connectionPoint", ",", "connectionCornerMap", "[", "tuple", "(", "connections", ")", "]", ")", ")", "\n", "continue", "\n", "", "continue", "\n", "\n", "", "if", "getSingularCorners", ":", "\n", "        ", "singularCorners", "=", "[", "]", "\n", "for", "lineIndex", ",", "connections", "in", "enumerate", "(", "lineConnections", ")", ":", "\n", "            ", "if", "0", "not", "in", "connections", ":", "\n", "                ", "print", "(", "'single corner'", ",", "lines", "[", "lineIndex", "]", ",", "connections", ")", "\n", "singularCorners", ".", "append", "(", "(", "lineIndex", ",", "0", ")", ")", "\n", "pass", "\n", "", "if", "1", "not", "in", "connections", ":", "\n", "                ", "print", "(", "'single corner'", ",", "lines", "[", "lineIndex", "]", ",", "connections", ")", "\n", "singularCorners", ".", "append", "(", "(", "lineIndex", ",", "1", ")", ")", "\n", "pass", "\n", "", "continue", "\n", "", "return", "corners", ",", "singularCorners", "\n", "\n", "", "return", "corners", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawWallMask": [[373, 387], ["numpy.full", "enumerate", "numpy.zeros", "wallMask.astype.astype", "cv2.line", "cv2.line", "int", "int", "int", "int", "int", "int", "int", "int"], "function", ["None"], ["", "def", "drawWallMask", "(", "walls", ",", "width", ",", "height", ",", "thickness", "=", "3", ",", "indexed", "=", "False", ")", ":", "\n", "    ", "if", "indexed", ":", "\n", "        ", "wallMask", "=", "np", ".", "full", "(", "(", "height", ",", "width", ")", ",", "-", "1", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "wallIndex", ",", "wall", "in", "enumerate", "(", "walls", ")", ":", "\n", "            ", "cv2", ".", "line", "(", "wallMask", ",", "(", "int", "(", "wall", "[", "0", "]", "[", "0", "]", ")", ",", "int", "(", "wall", "[", "0", "]", "[", "1", "]", ")", ")", ",", "(", "int", "(", "wall", "[", "1", "]", "[", "0", "]", ")", ",", "int", "(", "wall", "[", "1", "]", "[", "1", "]", ")", ")", ",", "color", "=", "wallIndex", ",", "thickness", "=", "thickness", ")", "\n", "continue", "\n", "", "", "else", ":", "\n", "        ", "wallMask", "=", "np", ".", "zeros", "(", "(", "height", ",", "width", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "wall", "in", "walls", ":", "\n", "            ", "cv2", ".", "line", "(", "wallMask", ",", "(", "int", "(", "wall", "[", "0", "]", "[", "0", "]", ")", ",", "int", "(", "wall", "[", "0", "]", "[", "1", "]", ")", ")", ",", "(", "int", "(", "wall", "[", "1", "]", "[", "0", "]", ")", ",", "int", "(", "wall", "[", "1", "]", "[", "1", "]", ")", ")", ",", "color", "=", "1", ",", "thickness", "=", "thickness", ")", "\n", "continue", "\n", "", "wallMask", "=", "wallMask", ".", "astype", "(", "np", ".", "bool", ")", "\n", "pass", "\n", "", "return", "wallMask", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.mergeLines": [[388, 397], ["floorplan_utils.lineRange", "floorplan_utils.lineRange", "min", "max", "min", "max"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.lineRange", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.lineRange"], ["", "def", "mergeLines", "(", "line_1", ",", "line_2", ")", ":", "\n", "    ", "direction_1", ",", "fixedValue_1", ",", "min_1", ",", "max_1", "=", "lineRange", "(", "line_1", ")", "\n", "direction_2", ",", "fixedValue_2", ",", "min_2", ",", "max_2", "=", "lineRange", "(", "line_2", ")", "\n", "fixedValue", "=", "(", "fixedValue_1", "+", "fixedValue_2", ")", "/", "2", "\n", "if", "direction_1", "==", "0", ":", "\n", "        ", "return", "[", "[", "min", "(", "min_1", ",", "min_2", ")", ",", "fixedValue", "]", ",", "[", "max", "(", "max_1", ",", "max_2", ")", ",", "fixedValue", "]", "]", "\n", "", "else", ":", "\n", "        ", "return", "[", "[", "fixedValue", ",", "min", "(", "min_1", ",", "min_2", ")", "]", ",", "[", "fixedValue", ",", "max", "(", "max_1", ",", "max_2", ")", "]", "]", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.findIntersection": [[398, 406], ["floorplan_utils.lineRange", "floorplan_utils.lineRange"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.lineRange", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.lineRange"], ["", "def", "findIntersection", "(", "line_1", ",", "line_2", ")", ":", "\n", "    ", "direction_1", ",", "fixedValue_1", ",", "min_1", ",", "max_1", "=", "lineRange", "(", "line_1", ")", "\n", "direction_2", ",", "fixedValue_2", ",", "min_2", ",", "max_2", "=", "lineRange", "(", "line_2", ")", "\n", "if", "direction_1", "==", "0", ":", "\n", "        ", "return", "(", "fixedValue_2", ",", "fixedValue_1", ")", "\n", "", "else", ":", "\n", "        ", "return", "(", "fixedValue_1", ",", "fixedValue_2", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.extendLine": [[407, 414], ["floorplan_utils.lineRange", "min", "max", "min", "max"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.lineRange"], ["", "def", "extendLine", "(", "line", ",", "point", ")", ":", "\n", "    ", "direction", ",", "fixedValue", ",", "min_value", ",", "max_value", "=", "lineRange", "(", "line", ")", "\n", "if", "direction", "==", "0", ":", "\n", "        ", "return", "(", "(", "min", "(", "min_value", ",", "point", "[", "direction", "]", ")", ",", "fixedValue", ")", ",", "(", "max", "(", "max_value", ",", "point", "[", "direction", "]", ")", ",", "fixedValue", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "(", "(", "fixedValue", ",", "min", "(", "min_value", ",", "point", "[", "direction", "]", ")", ")", ",", "(", "fixedValue", ",", "max", "(", "max_value", ",", "point", "[", "direction", "]", ")", ")", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.divideWalls": [[415, 426], ["floorplan_utils.calcLineDirection", "horizontalWalls.append", "verticalWalls.append"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDirection"], ["", "def", "divideWalls", "(", "walls", ")", ":", "\n", "    ", "horizontalWalls", "=", "[", "]", "\n", "verticalWalls", "=", "[", "]", "\n", "for", "wall", "in", "walls", ":", "\n", "        ", "if", "calcLineDirection", "(", "wall", ")", "==", "0", ":", "\n", "            ", "horizontalWalls", ".", "append", "(", "wall", ")", "\n", "", "else", ":", "\n", "            ", "verticalWalls", ".", "append", "(", "wall", ")", "\n", "pass", "\n", "", "continue", "\n", "", "return", "horizontalWalls", ",", "verticalWalls", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.connectWalls": [[428, 613], ["numpy.zeros", "xrange", "np.logical_or.astype", "np.logical_or.copy", "floorplan_utils.divideWalls", "cv2.dilate", "skimage.measure.label", "zip", "floorplan_utils.drawWallMask", "np.logical_or.copy", "cv2.dilate", "skimage.measure.label", "xrange", "floorplan_utils.drawWallMask", "np.logical_or.copy", "cv2.dilate", "skimage.measure.label", "xrange", "floorplan_utils.drawWallMask", "numpy.ones", "copy.deepcopy", "xrange", "sorted", "numpy.ones", "numpy.unique().tolist", "floorplan_utils.divideWalls", "enumerate", "numpy.ones", "numpy.unique().tolist", "floorplan_utils.calcLineDirection", "floorplan_utils.calcLineDirection", "numpy.logical_or", "numpy.unique().tolist", "floorplan_utils.lineRange", "floorplan_utils.lineRange", "measure.label.min", "measure.label.max", "np.unique().tolist.remove", "mask.nonzero", "floorplan_utils.calcLineDirection", "measure.label.min", "measure.label.max", "np.unique().tolist.remove", "len", "floorplan_utils.findIntersection", "floorplan_utils.extendLine", "floorplan_utils.extendLine", "measure.label.min", "measure.label.max", "np.unique().tolist.remove", "len", "numpy.unique", "len", "len", "len", "min", "max", "copy.deepcopy.append", "numpy.unique", "numpy.roll", "numpy.unique", "abs", "len", "floorplan_utils.mergeLines", "copy.deepcopy.append", "sorted.append", "sorted.append", "xs.min", "ys.min", "xs.max", "ys.max"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.divideWalls", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawWallMask", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawWallMask", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawWallMask", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.divideWalls", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDirection", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDirection", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.lineRange", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.lineRange", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDirection", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.findIntersection", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.extendLine", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.extendLine", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.mergeLines"], ["", "def", "connectWalls", "(", "walls", ",", "roomSegmentation", ",", "gap", "=", "3", ")", ":", "\n", "    ", "width", "=", "roomSegmentation", ".", "shape", "[", "1", "]", "\n", "height", "=", "roomSegmentation", ".", "shape", "[", "0", "]", "\n", "roomBoundary", "=", "np", ".", "zeros", "(", "roomSegmentation", ".", "shape", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "for", "direction", "in", "xrange", "(", "2", ")", ":", "\n", "        ", "for", "shift", "in", "[", "-", "1", ",", "1", "]", ":", "\n", "            ", "roomBoundary", "=", "np", ".", "logical_or", "(", "roomBoundary", ",", "roomSegmentation", "!=", "np", ".", "roll", "(", "roomSegmentation", ",", "shift", ",", "axis", "=", "direction", ")", ")", "\n", "continue", "\n", "", "continue", "\n", "", "roomBoundary", "=", "roomBoundary", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "roomBoundary", "[", "0", "]", "=", "roomBoundary", "[", "-", "1", "]", "=", "roomBoundary", "[", ":", ",", "0", "]", "=", "roomBoundary", "[", ":", ",", "-", "1", "]", "=", "0", "\n", "\n", "uncoveredBoundary", "=", "roomBoundary", ".", "copy", "(", ")", "\n", "wallGroups", "=", "divideWalls", "(", "walls", ")", "\n", "wallMasks", "=", "[", "drawWallMask", "(", "walls", ",", "width", ",", "height", ",", "indexed", "=", "True", ",", "thickness", "=", "gap", "*", "2", ")", "for", "walls", "in", "wallGroups", "]", "\n", "\n", "uncoveredBoundary", "[", "wallMasks", "[", "0", "]", ">=", "0", "]", "=", "0", "\n", "uncoveredBoundary", "[", "wallMasks", "[", "1", "]", ">=", "0", "]", "=", "0", "\n", "uncoveredBoundary", "=", "cv2", ".", "dilate", "(", "uncoveredBoundary", ",", "np", ".", "ones", "(", "(", "3", ",", "3", ")", ")", ",", "iterations", "=", "gap", ")", "\n", "components", "=", "measure", ".", "label", "(", "uncoveredBoundary", ",", "background", "=", "0", ")", "\n", "\n", "connectedWalls", "=", "[", "]", "\n", "\n", "for", "walls", ",", "wallMask", "in", "zip", "(", "wallGroups", ",", "wallMasks", ")", ":", "\n", "\n", "        ", "newWalls", "=", "copy", ".", "deepcopy", "(", "walls", ")", "\n", "invalidWallIndices", "=", "[", "]", "\n", "for", "label", "in", "xrange", "(", "components", ".", "min", "(", ")", "+", "1", ",", "components", ".", "max", "(", ")", "+", "1", ")", ":", "\n", "            ", "mask", "=", "components", "==", "label", "\n", "wallIndices", "=", "np", ".", "unique", "(", "wallMask", "[", "mask", "]", ")", ".", "tolist", "(", ")", "\n", "if", "-", "1", "in", "wallIndices", ":", "\n", "                ", "wallIndices", ".", "remove", "(", "-", "1", ")", "\n", "pass", "\n", "", "if", "len", "(", "wallIndices", ")", "!=", "2", ":", "\n", "                ", "continue", "\n", "\n", "", "wall_1", "=", "newWalls", "[", "wallIndices", "[", "0", "]", "]", "\n", "wall_2", "=", "newWalls", "[", "wallIndices", "[", "1", "]", "]", "\n", "\n", "direction_1", ",", "fixedValue_1", ",", "min_1", ",", "max_1", "=", "lineRange", "(", "wall_1", ")", "\n", "direction_2", ",", "fixedValue_2", ",", "min_2", ",", "max_2", "=", "lineRange", "(", "wall_2", ")", "\n", "\n", "if", "direction_1", "==", "direction_2", ":", "\n", "                ", "if", "abs", "(", "fixedValue_1", "-", "fixedValue_2", ")", "<", "gap", ":", "\n", "                    ", "newWallIndex", "=", "len", "(", "newWalls", ")", "\n", "wallMask", "[", "wallMask", "==", "wallIndices", "[", "0", "]", "]", "=", "newWallIndex", "\n", "wallMask", "[", "wallMask", "==", "wallIndices", "[", "1", "]", "]", "=", "newWallIndex", "\n", "newWall", "=", "mergeLines", "(", "wall_1", ",", "wall_2", ")", "\n", "newWalls", ".", "append", "(", "newWall", ")", "\n", "invalidWallIndices", ".", "append", "(", "wallIndices", "[", "0", "]", ")", "\n", "invalidWallIndices", ".", "append", "(", "wallIndices", "[", "1", "]", ")", "\n", "pass", "\n", "", "pass", "\n", "#     else:", "\n", "#         print(wall_1, wall_2)", "\n", "#         ys, xs = mask.nonzero()", "\n", "#         newWall = [[xs.min(), ys.min()], [xs.max(), ys.max()]]", "\n", "#         newWallDirection = calcLineDirection(newWall)", "\n", "#         if newWallDirection != direction_1 and newWall[1][1 - newWallDirection] - newWall[0][1 - newWallDirection] < gap * 2 + 1:", "\n", "#             fixedValue = (newWall[1][1 - newWallDirection] + newWall[0][1 - newWallDirection]) / 2", "\n", "#             newWall[1][1 - newWallDirection] = newWall[0][1 - newWallDirection] = fixedValue", "\n", "#             newWalls.append(newWall)", "\n", "#             pass", "\n", "#         pass", "\n", "# else:", "\n", "#     assert(False)", "\n", "#     intersectionPoint = findIntersection(wall_1, wall_2)", "\n", "#     newWalls[wallIndices[0]] = extendLine(wall_1, intersectionPoint)", "\n", "#     newWalls[wallIndices[1]] = extendLine(wall_2, intersectionPoint)", "\n", "#     pass", "\n", "", "continue", "\n", "\n", "#print(invalidWallIndices)", "\n", "", "invalidWallIndices", "=", "sorted", "(", "invalidWallIndices", ",", "key", "=", "lambda", "x", ":", "-", "x", ")", "\n", "for", "index", "in", "invalidWallIndices", ":", "\n", "            ", "del", "newWalls", "[", "index", "]", "\n", "continue", "\n", "", "connectedWalls", "+=", "newWalls", "\n", "continue", "\n", "\n", "", "newWalls", "=", "connectedWalls", "\n", "wallMask", "=", "drawWallMask", "(", "newWalls", ",", "width", ",", "height", ",", "indexed", "=", "True", ",", "thickness", "=", "gap", "*", "2", ")", "\n", "uncoveredBoundary", "=", "roomBoundary", ".", "copy", "(", ")", "\n", "uncoveredBoundary", "[", "wallMask", ">=", "0", "]", "=", "0", "\n", "uncoveredBoundary", "=", "cv2", ".", "dilate", "(", "uncoveredBoundary", ",", "np", ".", "ones", "(", "(", "3", ",", "3", ")", ")", ",", "iterations", "=", "gap", ")", "\n", "components", "=", "measure", ".", "label", "(", "uncoveredBoundary", ",", "background", "=", "0", ")", "\n", "\n", "#cv2.imwrite('test/segmentation.png', drawSegmentationImage(components))", "\n", "\n", "for", "label", "in", "xrange", "(", "components", ".", "min", "(", ")", "+", "1", ",", "components", ".", "max", "(", ")", "+", "1", ")", ":", "\n", "        ", "mask", "=", "components", "==", "label", "\n", "#cv2.imwrite('test/mask_' + str(label) + '.png', drawMaskImage(mask))", "\n", "wallIndices", "=", "np", ".", "unique", "(", "wallMask", "[", "mask", "]", ")", ".", "tolist", "(", ")", "\n", "if", "-", "1", "in", "wallIndices", ":", "\n", "            ", "wallIndices", ".", "remove", "(", "-", "1", ")", "\n", "pass", "\n", "\n", "", "lines", "=", "[", "newWalls", "[", "index", "]", "for", "index", "in", "wallIndices", "]", "\n", "#cv2.imwrite('test/mask_' + str(label) + '_segment.png', drawMaskImage(mask))", "\n", "#cv2.imwrite('test/mask_' + str(label) + '.png', drawMaskImage(drawWallMask(lines, width, height)))", "\n", "\n", "horizontalLines", ",", "verticalLines", "=", "divideWalls", "(", "lines", ")", "\n", "if", "len", "(", "horizontalLines", ")", ">", "0", "and", "len", "(", "verticalLines", ")", ">", "0", ":", "\n", "            ", "continue", "\n", "#print(label, wallIndices, len(horizontalLines), len(verticalLines))", "\n", "", "for", "direction", ",", "lines", "in", "enumerate", "(", "[", "horizontalLines", ",", "verticalLines", "]", ")", ":", "\n", "            ", "if", "len", "(", "lines", ")", "<", "2", ":", "\n", "                ", "continue", "\n", "#wall_1 = lines[0]", "\n", "#wall_2 = lines[1]", "\n", "#print(wall_1, wall_2)", "\n", "#direction_1, fixedValue_1, min_1, max_1 = lineRange(wall_1)", "\n", "#direction_2, fixedValue_2, min_2, max_2 = lineRange(wall_2)", "\n", "#values = [line[direction] for line in lines]", "\n", "\n", "#print(wall_1, wall_2)", "\n", "", "ys", ",", "xs", "=", "mask", ".", "nonzero", "(", ")", "\n", "newWall", "=", "[", "[", "xs", ".", "min", "(", ")", ",", "ys", ".", "min", "(", ")", "]", ",", "[", "xs", ".", "max", "(", ")", ",", "ys", ".", "max", "(", ")", "]", "]", "\n", "newWallDirection", "=", "calcLineDirection", "(", "newWall", ")", "\n", "#print(label, wallIndices, newWallDirection, direction, newWall[1][1 - newWallDirection] - newWall[0][1 - newWallDirection])", "\n", "if", "newWallDirection", "!=", "direction", "and", "newWall", "[", "1", "]", "[", "1", "-", "newWallDirection", "]", "-", "newWall", "[", "0", "]", "[", "1", "-", "newWallDirection", "]", "<=", "(", "gap", "*", "2", "+", "2", ")", "*", "2", ":", "\n", "                ", "fixedValue", "=", "(", "newWall", "[", "1", "]", "[", "1", "-", "newWallDirection", "]", "+", "newWall", "[", "0", "]", "[", "1", "-", "newWallDirection", "]", ")", "/", "2", "\n", "newWall", "[", "1", "]", "[", "1", "-", "newWallDirection", "]", "=", "newWall", "[", "0", "]", "[", "1", "-", "newWallDirection", "]", "=", "fixedValue", "\n", "values", "=", "[", "line", "[", "0", "]", "[", "newWallDirection", "]", "for", "line", "in", "lines", "]", "+", "[", "line", "[", "1", "]", "[", "newWallDirection", "]", "for", "line", "in", "lines", "]", "\n", "min_value", "=", "min", "(", "values", ")", "\n", "max_value", "=", "max", "(", "values", ")", "\n", "newWall", "[", "0", "]", "[", "newWallDirection", "]", "=", "min_value", "\n", "newWall", "[", "1", "]", "[", "newWallDirection", "]", "=", "max_value", "\n", "\n", "newWalls", ".", "append", "(", "newWall", ")", "\n", "#print('new orthogonal wall', newWall)", "\n", "pass", "\n", "\n", "", "continue", "\n", "", "continue", "\n", "\n", "", "wallMask", "=", "drawWallMask", "(", "newWalls", ",", "width", ",", "height", ",", "indexed", "=", "True", ",", "thickness", "=", "gap", "*", "2", ")", "\n", "uncoveredBoundary", "=", "roomBoundary", ".", "copy", "(", ")", "\n", "uncoveredBoundary", "[", "wallMask", ">=", "0", "]", "=", "0", "\n", "uncoveredBoundary", "=", "cv2", ".", "dilate", "(", "uncoveredBoundary", ",", "np", ".", "ones", "(", "(", "3", ",", "3", ")", ")", ",", "iterations", "=", "gap", ")", "\n", "components", "=", "measure", ".", "label", "(", "uncoveredBoundary", ",", "background", "=", "0", ")", "\n", "\n", "for", "label", "in", "xrange", "(", "components", ".", "min", "(", ")", "+", "1", ",", "components", ".", "max", "(", ")", "+", "1", ")", ":", "\n", "        ", "mask", "=", "components", "==", "label", "\n", "wallIndices", "=", "np", ".", "unique", "(", "wallMask", "[", "mask", "]", ")", ".", "tolist", "(", ")", "\n", "if", "-", "1", "in", "wallIndices", ":", "\n", "            ", "wallIndices", ".", "remove", "(", "-", "1", ")", "\n", "pass", "\n", "", "if", "len", "(", "wallIndices", ")", "!=", "2", ":", "\n", "            ", "continue", "\n", "\n", "", "wall_1", "=", "newWalls", "[", "wallIndices", "[", "0", "]", "]", "\n", "wall_2", "=", "newWalls", "[", "wallIndices", "[", "1", "]", "]", "\n", "\n", "#print(wall_1, wall_2)", "\n", "\n", "direction_1", "=", "calcLineDirection", "(", "wall_1", ")", "\n", "direction_2", "=", "calcLineDirection", "(", "wall_2", ")", "\n", "\n", "if", "direction_1", "!=", "direction_2", ":", "\n", "            ", "intersectionPoint", "=", "findIntersection", "(", "wall_1", ",", "wall_2", ")", "\n", "newWalls", "[", "wallIndices", "[", "0", "]", "]", "=", "extendLine", "(", "wall_1", ",", "intersectionPoint", ")", "\n", "newWalls", "[", "wallIndices", "[", "1", "]", "]", "=", "extendLine", "(", "wall_2", ",", "intersectionPoint", ")", "\n", "pass", "\n", "", "continue", "\n", "\n", "# try:", "\n", "#     _, singularCorners = lines2Corners(newWalls, gap=gap, getSingularCorners=True)", "\n", "#     for _, singularCorner_1 in enumerate(singularCorners):", "\n", "#         for singularCorner_2 in singularCorners[_ + 1:]:", "\n", "#             wall_1 = newWalls[singularCorner_1[0]]", "\n", "#             wall_2 = newWalls[singularCorner_2[0]]", "\n", "#             corner_1 = wall_1[singularCorner_1[1]]", "\n", "#             corner_2 = wall_2[singularCorner_2[1]]", "\n", "#             if pointDistance(corner_1, corner_2) < (gap * 2 + 1) * 2:", "\n", "#                 intersectionPoint = findIntersection(wall_1, wall_2)", "\n", "#                 newWalls[singularCorner_1[0]] = extendLine(wall_1, intersectionPoint)", "\n", "#                 newWalls[singularCorner_2[0]] = extendLine(wall_2, intersectionPoint)", "\n", "#                 pass", "\n", "#             continue", "\n", "#         continue", "\n", "# except:", "\n", "#     pass", "\n", "\n", "", "return", "newWalls", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.extractLines": [[614, 629], ["skimage.measure.label", "xrange", "mask.nonzero", "floorplan_utils.calcLineDirection", "lines.append", "measure.label.min", "measure.label.max", "xs.min", "ys.min", "xs.max", "ys.max", "abs", "abs"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDirection"], ["", "def", "extractLines", "(", "lineMask", ",", "lengthThreshold", "=", "11", ",", "widthThreshold", "=", "5", ")", ":", "\n", "    ", "lines", "=", "[", "]", "\n", "components", "=", "measure", ".", "label", "(", "lineMask", ",", "background", "=", "0", ")", "\n", "for", "label", "in", "xrange", "(", "components", ".", "min", "(", ")", "+", "1", ",", "components", ".", "max", "(", ")", "+", "1", ")", ":", "\n", "        ", "mask", "=", "components", "==", "label", "\n", "ys", ",", "xs", "=", "mask", ".", "nonzero", "(", ")", "\n", "line", "=", "[", "[", "xs", ".", "min", "(", ")", ",", "ys", ".", "min", "(", ")", "]", ",", "[", "xs", ".", "max", "(", ")", ",", "ys", ".", "max", "(", ")", "]", "]", "\n", "direction", "=", "calcLineDirection", "(", "line", ")", "\n", "if", "abs", "(", "line", "[", "1", "]", "[", "1", "-", "direction", "]", "-", "line", "[", "0", "]", "[", "1", "-", "direction", "]", ")", ">", "widthThreshold", "or", "abs", "(", "line", "[", "1", "]", "[", "direction", "]", "-", "line", "[", "0", "]", "[", "direction", "]", ")", "<", "lengthThreshold", ":", "\n", "            ", "continue", "\n", "", "fixedValue", "=", "(", "line", "[", "1", "]", "[", "1", "-", "direction", "]", "+", "line", "[", "0", "]", "[", "1", "-", "direction", "]", ")", "/", "2", "\n", "line", "[", "1", "]", "[", "1", "-", "direction", "]", "=", "line", "[", "0", "]", "[", "1", "-", "direction", "]", "=", "fixedValue", "\n", "lines", ".", "append", "(", "line", ")", "\n", "continue", "\n", "", "return", "lines", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawPoints": [[631, 657], ["utils.ColorPalette().getColorMap", "numpy.all", "numpy.equal", "numpy.zeros", "cv2.imwrite", "utils.ColorPalette", "numpy.tile", "numpy.expand_dims", "max", "min", "max", "min", "int", "int", "int", "int", "round", "round", "round", "round"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.ColorPalette.getColorMap"], ["", "def", "drawPoints", "(", "filename", ",", "width", ",", "height", ",", "points", ",", "backgroundImage", "=", "None", ",", "pointSize", "=", "5", ",", "pointColor", "=", "None", ")", ":", "\n", "  ", "colorMap", "=", "ColorPalette", "(", "NUM_CORNERS", ")", ".", "getColorMap", "(", ")", "\n", "if", "np", ".", "all", "(", "np", ".", "equal", "(", "backgroundImage", ",", "None", ")", ")", ":", "\n", "    ", "image", "=", "np", ".", "zeros", "(", "(", "height", ",", "width", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "", "else", ":", "\n", "    ", "if", "backgroundImage", ".", "ndim", "==", "2", ":", "\n", "      ", "image", "=", "np", ".", "tile", "(", "np", ".", "expand_dims", "(", "backgroundImage", ",", "-", "1", ")", ",", "[", "1", ",", "1", ",", "3", "]", ")", "\n", "", "else", ":", "\n", "      ", "image", "=", "backgroundImage", "\n", "pass", "\n", "", "", "pass", "\n", "no_point_color", "=", "pointColor", "is", "None", "\n", "for", "point", "in", "points", ":", "\n", "    ", "if", "no_point_color", ":", "\n", "        ", "pointColor", "=", "colorMap", "[", "point", "[", "2", "]", "*", "4", "+", "point", "[", "3", "]", "]", "\n", "pass", "\n", "#print('used', pointColor)", "\n", "#print('color', point[2] , point[3])", "\n", "", "image", "[", "max", "(", "int", "(", "round", "(", "point", "[", "1", "]", ")", ")", "-", "pointSize", ",", "0", ")", ":", "min", "(", "int", "(", "round", "(", "point", "[", "1", "]", ")", ")", "+", "pointSize", ",", "height", ")", ",", "max", "(", "int", "(", "round", "(", "point", "[", "0", "]", ")", ")", "-", "pointSize", ",", "0", ")", ":", "min", "(", "int", "(", "round", "(", "point", "[", "0", "]", ")", ")", "+", "pointSize", ",", "width", ")", "]", "=", "pointColor", "\n", "continue", "\n", "\n", "", "if", "filename", "!=", "''", ":", "\n", "    ", "cv2", ".", "imwrite", "(", "filename", ",", "image", ")", "\n", "return", "\n", "", "else", ":", "\n", "    ", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawPointsSeparately": [[658, 672], ["numpy.all", "xrange", "numpy.equal", "numpy.zeros", "numpy.tile", "cv2.imwrite", "numpy.expand_dims", "max", "min", "max", "min", "int", "str", "int", "int", "int", "int", "round", "round", "round", "round"], "function", ["None"], ["", "", "def", "drawPointsSeparately", "(", "path", ",", "width", ",", "height", ",", "points", ",", "backgroundImage", "=", "None", ",", "pointSize", "=", "5", ")", ":", "\n", "  ", "if", "np", ".", "all", "(", "np", ".", "equal", "(", "backgroundImage", ",", "None", ")", ")", ":", "\n", "    ", "image", "=", "np", ".", "zeros", "(", "(", "height", ",", "width", ",", "13", ")", ",", "np", ".", "uint8", ")", "\n", "", "else", ":", "\n", "    ", "image", "=", "np", ".", "tile", "(", "np", ".", "expand_dims", "(", "backgroundImage", ",", "-", "1", ")", ",", "[", "1", ",", "1", ",", "13", "]", ")", "\n", "pass", "\n", "\n", "", "for", "point", "in", "points", ":", "\n", "    ", "image", "[", "max", "(", "int", "(", "round", "(", "point", "[", "1", "]", ")", ")", "-", "pointSize", ",", "0", ")", ":", "min", "(", "int", "(", "round", "(", "point", "[", "1", "]", ")", ")", "+", "pointSize", ",", "height", ")", ",", "max", "(", "int", "(", "round", "(", "point", "[", "0", "]", ")", ")", "-", "pointSize", ",", "0", ")", ":", "min", "(", "int", "(", "round", "(", "point", "[", "0", "]", ")", ")", "+", "pointSize", ",", "width", ")", ",", "int", "(", "point", "[", "2", "]", "*", "4", "+", "point", "[", "3", "]", ")", "]", "=", "255", "\n", "continue", "\n", "", "for", "channel", "in", "xrange", "(", "13", ")", ":", "\n", "    ", "cv2", ".", "imwrite", "(", "path", "+", "'_'", "+", "str", "(", "channel", ")", "+", "'.png'", ",", "image", "[", ":", ",", ":", ",", "channel", "]", ")", "\n", "continue", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawLineMask": [[673, 691], ["numpy.zeros", "enumerate", "floorplan_utils.calcLineDirectionPoints", "int", "int", "int", "round", "min", "max", "max", "min", "max", "min"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDirectionPoints"], ["", "def", "drawLineMask", "(", "width", ",", "height", ",", "points", ",", "lines", ",", "lineWidth", "=", "5", ",", "backgroundImage", "=", "None", ")", ":", "\n", "  ", "lineMask", "=", "np", ".", "zeros", "(", "(", "height", ",", "width", ")", ")", "\n", "\n", "for", "lineIndex", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "    ", "point_1", "=", "points", "[", "line", "[", "0", "]", "]", "\n", "point_2", "=", "points", "[", "line", "[", "1", "]", "]", "\n", "direction", "=", "calcLineDirectionPoints", "(", "points", ",", "line", ")", "\n", "\n", "fixedValue", "=", "int", "(", "round", "(", "(", "point_1", "[", "1", "-", "direction", "]", "+", "point_2", "[", "1", "-", "direction", "]", ")", "/", "2", ")", ")", "\n", "minValue", "=", "int", "(", "min", "(", "point_1", "[", "direction", "]", ",", "point_2", "[", "direction", "]", ")", ")", "\n", "maxValue", "=", "int", "(", "max", "(", "point_1", "[", "direction", "]", ",", "point_2", "[", "direction", "]", ")", ")", "\n", "if", "direction", "==", "0", ":", "\n", "      ", "lineMask", "[", "max", "(", "fixedValue", "-", "lineWidth", ",", "0", ")", ":", "min", "(", "fixedValue", "+", "lineWidth", "+", "1", ",", "height", ")", ",", "minValue", ":", "maxValue", "+", "1", "]", "=", "1", "\n", "", "else", ":", "\n", "      ", "lineMask", "[", "minValue", ":", "maxValue", "+", "1", ",", "max", "(", "fixedValue", "-", "lineWidth", ",", "0", ")", ":", "min", "(", "fixedValue", "+", "lineWidth", "+", "1", ",", "width", ")", "]", "=", "1", "\n", "pass", "\n", "", "continue", "\n", "", "return", "lineMask", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawLines": [[694, 744], ["utils.ColorPalette().getColorMap", "enumerate", "floorplan_utils.calcLineDirectionPoints", "int", "int", "int", "cv2.imwrite", "utils.ColorPalette", "numpy.ones", "numpy.stack", "round", "round", "round", "len", "numpy.any", "len", "min", "max", "xrange", "xrange", "numpy.random.rand", "max", "min", "max", "min", "max", "min", "max", "min", "max", "min", "max", "min"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.ColorPalette.getColorMap", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDirectionPoints"], ["", "def", "drawLines", "(", "filename", ",", "width", ",", "height", ",", "points", ",", "lines", ",", "lineLabels", "=", "[", "]", ",", "backgroundImage", "=", "None", ",", "lineWidth", "=", "5", ",", "lineColor", "=", "None", ")", ":", "\n", "  ", "colorMap", "=", "ColorPalette", "(", "len", "(", "lines", ")", ")", ".", "getColorMap", "(", ")", "\n", "if", "backgroundImage", "is", "None", ":", "\n", "    ", "image", "=", "np", ".", "ones", "(", "(", "height", ",", "width", ",", "3", ")", ",", "np", ".", "uint8", ")", "*", "0", "\n", "", "else", ":", "\n", "    ", "if", "backgroundImage", ".", "ndim", "==", "2", ":", "\n", "      ", "image", "=", "np", ".", "stack", "(", "[", "backgroundImage", ",", "backgroundImage", ",", "backgroundImage", "]", ",", "axis", "=", "2", ")", "\n", "", "else", ":", "\n", "      ", "image", "=", "backgroundImage", "\n", "pass", "\n", "", "pass", "\n", "\n", "", "for", "lineIndex", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "    ", "point_1", "=", "points", "[", "line", "[", "0", "]", "]", "\n", "point_2", "=", "points", "[", "line", "[", "1", "]", "]", "\n", "direction", "=", "calcLineDirectionPoints", "(", "points", ",", "line", ")", "\n", "\n", "\n", "fixedValue", "=", "int", "(", "round", "(", "(", "point_1", "[", "1", "-", "direction", "]", "+", "point_2", "[", "1", "-", "direction", "]", ")", "/", "2", ")", ")", "\n", "minValue", "=", "int", "(", "round", "(", "min", "(", "point_1", "[", "direction", "]", ",", "point_2", "[", "direction", "]", ")", ")", ")", "\n", "maxValue", "=", "int", "(", "round", "(", "max", "(", "point_1", "[", "direction", "]", ",", "point_2", "[", "direction", "]", ")", ")", ")", "\n", "if", "len", "(", "lineLabels", ")", "==", "0", ":", "\n", "      ", "if", "np", ".", "any", "(", "lineColor", "==", "None", ")", ":", "\n", "        ", "lineColor", "=", "np", ".", "random", ".", "rand", "(", "3", ")", "*", "255", "\n", "pass", "\n", "", "if", "direction", "==", "0", ":", "\n", "        ", "image", "[", "max", "(", "fixedValue", "-", "lineWidth", ",", "0", ")", ":", "min", "(", "fixedValue", "+", "lineWidth", "+", "1", ",", "height", ")", ",", "minValue", ":", "maxValue", "+", "1", ",", ":", "]", "=", "lineColor", "\n", "", "else", ":", "\n", "        ", "image", "[", "minValue", ":", "maxValue", "+", "1", ",", "max", "(", "fixedValue", "-", "lineWidth", ",", "0", ")", ":", "min", "(", "fixedValue", "+", "lineWidth", "+", "1", ",", "width", ")", ",", ":", "]", "=", "lineColor", "\n", "", "", "else", ":", "\n", "      ", "labels", "=", "lineLabels", "[", "lineIndex", "]", "\n", "isExterior", "=", "False", "\n", "if", "direction", "==", "0", ":", "\n", "        ", "for", "c", "in", "xrange", "(", "3", ")", ":", "\n", "          ", "image", "[", "max", "(", "fixedValue", "-", "lineWidth", ",", "0", ")", ":", "min", "(", "fixedValue", ",", "height", ")", ",", "minValue", ":", "maxValue", ",", "c", "]", "=", "colorMap", "[", "labels", "[", "0", "]", "]", "[", "c", "]", "\n", "image", "[", "max", "(", "fixedValue", ",", "0", ")", ":", "min", "(", "fixedValue", "+", "lineWidth", "+", "1", ",", "height", ")", ",", "minValue", ":", "maxValue", ",", "c", "]", "=", "colorMap", "[", "labels", "[", "1", "]", "]", "[", "c", "]", "\n", "continue", "\n", "", "", "else", ":", "\n", "        ", "for", "c", "in", "xrange", "(", "3", ")", ":", "\n", "          ", "image", "[", "minValue", ":", "maxValue", ",", "max", "(", "fixedValue", "-", "lineWidth", ",", "0", ")", ":", "min", "(", "fixedValue", ",", "width", ")", ",", "c", "]", "=", "colorMap", "[", "labels", "[", "1", "]", "]", "[", "c", "]", "\n", "image", "[", "minValue", ":", "maxValue", ",", "max", "(", "fixedValue", ",", "0", ")", ":", "min", "(", "fixedValue", "+", "lineWidth", "+", "1", ",", "width", ")", ",", "c", "]", "=", "colorMap", "[", "labels", "[", "0", "]", "]", "[", "c", "]", "\n", "continue", "\n", "", "pass", "\n", "", "pass", "\n", "", "continue", "\n", "\n", "", "if", "filename", "==", "''", ":", "\n", "    ", "return", "image", "\n", "", "else", ":", "\n", "    ", "cv2", ".", "imwrite", "(", "filename", ",", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawRectangles": [[746, 794], ["utils.ColorPalette().getColorMap", "enumerate", "int", "int", "int", "int", "cv2.rectangle", "cv2.imwrite", "utils.ColorPalette", "numpy.ones", "len", "round", "round", "round", "round", "tuple", "numpy.random.rand", "color.tolist"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.ColorPalette.getColorMap"], ["", "", "def", "drawRectangles", "(", "filename", ",", "width", ",", "height", ",", "points", ",", "rectangles", ",", "labels", ",", "lineWidth", "=", "2", ",", "backgroundImage", "=", "None", ",", "rectangleColor", "=", "None", ")", ":", "\n", "  ", "colorMap", "=", "ColorPalette", "(", "NUM_ICONS", ")", ".", "getColorMap", "(", ")", "\n", "if", "backgroundImage", "is", "None", ":", "\n", "    ", "image", "=", "np", ".", "ones", "(", "(", "height", ",", "width", ",", "3", ")", ",", "np", ".", "uint8", ")", "*", "0", "\n", "", "else", ":", "\n", "    ", "image", "=", "backgroundImage", "\n", "pass", "\n", "\n", "", "for", "rectangleIndex", ",", "rectangle", "in", "enumerate", "(", "rectangles", ")", ":", "\n", "    ", "point_1", "=", "points", "[", "rectangle", "[", "0", "]", "]", "\n", "point_2", "=", "points", "[", "rectangle", "[", "1", "]", "]", "\n", "point_3", "=", "points", "[", "rectangle", "[", "2", "]", "]", "\n", "point_4", "=", "points", "[", "rectangle", "[", "3", "]", "]", "\n", "\n", "\n", "if", "len", "(", "labels", ")", "==", "0", ":", "\n", "      ", "if", "rectangleColor", "is", "None", ":", "\n", "        ", "color", "=", "np", ".", "random", ".", "rand", "(", "3", ")", "*", "255", "\n", "", "else", ":", "\n", "        ", "color", "=", "rectangleColor", "\n", "", "", "else", ":", "\n", "      ", "color", "=", "colorMap", "[", "labels", "[", "rectangleIndex", "]", "]", "\n", "pass", "\n", "\n", "", "x_1", "=", "int", "(", "round", "(", "(", "point_1", "[", "0", "]", "+", "point_3", "[", "0", "]", ")", "/", "2", ")", ")", "\n", "x_2", "=", "int", "(", "round", "(", "(", "point_2", "[", "0", "]", "+", "point_4", "[", "0", "]", ")", "/", "2", ")", ")", "\n", "y_1", "=", "int", "(", "round", "(", "(", "point_1", "[", "1", "]", "+", "point_2", "[", "1", "]", ")", "/", "2", ")", ")", "\n", "y_2", "=", "int", "(", "round", "(", "(", "point_3", "[", "1", "]", "+", "point_4", "[", "1", "]", ")", "/", "2", ")", ")", "\n", "\n", "cv2", ".", "rectangle", "(", "image", ",", "(", "x_1", ",", "y_1", ")", ",", "(", "x_2", ",", "y_2", ")", ",", "color", "=", "tuple", "(", "color", ".", "tolist", "(", ")", ")", ",", "thickness", "=", "2", ")", "\n", "\n", "# point_1 = (int(point_1[0]), int(point_1[1]))", "\n", "# point_2 = (int(point_2[0]), int(point_2[1]))", "\n", "# point_3 = (int(point_3[0]), int(point_3[1]))", "\n", "# point_4 = (int(point_4[0]), int(point_4[1]))", "\n", "\n", "# image[max(point_1[1] - lineWidth, 0):min(point_1[1] + lineWidth, height), point_1[0]:point_2[0] + 1, :] = color", "\n", "# image[max(point_3[1] - lineWidth, 0):min(point_3[1] + lineWidth, height), point_3[0]:point_4[0] + 1, :] = color", "\n", "# image[point_1[1]:point_3[1] + 1, max(point_1[0] - lineWidth, 0):min(point_1[0] + lineWidth, width), :] = color", "\n", "# image[point_2[1]:point_4[1] + 1, max(point_2[0] - lineWidth, 0):min(point_2[0] + lineWidth, width), :] = color", "\n", "\n", "continue", "\n", "\n", "", "if", "filename", "==", "''", ":", "\n", "    ", "return", "image", "\n", "", "else", ":", "\n", "    ", "cv2", ".", "imwrite", "(", "filename", ",", "image", ")", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawResultImage": [[796, 801], ["floorplan_utils.drawLines", "floorplan_utils.drawLines", "floorplan_utils.drawRectangles"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawLines", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawLines", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawRectangles"], ["", "", "def", "drawResultImage", "(", "width", ",", "height", ",", "result", ")", ":", "\n", "    ", "resultImage", "=", "drawLines", "(", "''", ",", "width", ",", "height", ",", "result", "[", "'wall'", "]", "[", "0", "]", ",", "result", "[", "'wall'", "]", "[", "1", "]", ",", "result", "[", "'wall'", "]", "[", "2", "]", ",", "None", ",", "lineWidth", "=", "3", ")", "\n", "resultImage", "=", "drawLines", "(", "''", ",", "width", ",", "height", ",", "result", "[", "'door'", "]", "[", "0", "]", ",", "result", "[", "'door'", "]", "[", "1", "]", ",", "[", "]", ",", "resultImage", ",", "lineWidth", "=", "2", ",", "lineColor", "=", "0", ")", "\n", "iconImage", "=", "drawRectangles", "(", "''", ",", "width", ",", "height", ",", "result", "[", "'icon'", "]", "[", "0", "]", ",", "result", "[", "'icon'", "]", "[", "1", "]", ",", "result", "[", "'icon'", "]", "[", "2", "]", ",", "lineWidth", "=", "2", ")", "\n", "return", "resultImage", ",", "iconImage", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.resizeResult": [[802, 808], ["float", "float", "float", "float", "float", "float"], "function", ["None"], ["", "def", "resizeResult", "(", "result", ",", "width", ",", "height", ",", "oriWidth", "=", "256", ",", "oriHeight", "=", "256", ")", ":", "\n", "    ", "result", "[", "'wall'", "]", "[", "0", "]", "=", "[", "[", "float", "(", "point", "[", "0", "]", ")", "/", "oriWidth", "*", "width", ",", "float", "(", "point", "[", "1", "]", ")", "/", "oriHeight", "*", "height", ",", "point", "[", "2", "]", ",", "point", "[", "3", "]", "]", "for", "point", "in", "result", "[", "'wall'", "]", "[", "0", "]", "]", "\n", "result", "[", "'door'", "]", "[", "0", "]", "=", "[", "[", "float", "(", "point", "[", "0", "]", ")", "/", "oriWidth", "*", "width", ",", "float", "(", "point", "[", "1", "]", ")", "/", "oriHeight", "*", "height", ",", "point", "[", "2", "]", ",", "point", "[", "3", "]", "]", "for", "point", "in", "result", "[", "'door'", "]", "[", "0", "]", "]", "\n", "result", "[", "'icon'", "]", "[", "0", "]", "=", "[", "[", "float", "(", "point", "[", "0", "]", ")", "/", "oriWidth", "*", "width", ",", "float", "(", "point", "[", "1", "]", ")", "/", "oriHeight", "*", "height", ",", "point", "[", "2", "]", ",", "point", "[", "3", "]", "]", "for", "point", "in", "result", "[", "'icon'", "]", "[", "0", "]", "]", "\n", "#result['room'][0] = [(cv2.resize(mask, (width, height), interpolation=cv2.INTER_NEAREST) > 0).astype(np.uint8) for mask in result['room'][0]]", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawResultImageFinal": [[809, 1085], ["numpy.array", "numpy.array", "numpy.concatenate().astype", "floorplan_utils.getLabelRoomMap", "numpy.zeros", "floorplan_utils.drawWallMask", "skimage.measure.label", "measure.label.min", "numpy.array", "enumerate", "roomLabels.iteritems", "colorMap[].reshape", "tuple", "floorplan_utils.getLabelIconMap", "enumerate", "print", "floorplan_utils.calcLineDim", "numpy.round().astype", "xrange", "len", "cv2.dilate", "rooms.append", "min", "numpy.zeros", "cv2.erode", "numpy.array().astype", "numpy.array().astype", "floorplan_utils.calcLineDim", "xrange", "zip", "cv2.imread", "int", "int", "int", "int", "numpy.array", "float", "enumerate", "print", "cv2.resize", "iconPos.append", "min", "cv2.dilate.nonzero", "print", "cv2.getTextSize", "print", "floorplan_utils.findBestTextLabelCenter", "print", "numpy.concatenate", "xrange", "cv2.dilate.astype", "numpy.ones", "numpy.ones", "cv2.circle", "cv2.circle", "int", "min", "cv2.line", "point.copy", "point.copy", "cv2.line", "round", "round", "round", "round", "floorplan_utils.calcLineDim", "numpy.round().astype", "numpy.array", "numpy.array", "numpy.dot", "floorplan_utils.rotateImage", "print", "xs.mean", "ys.mean", "cv2.putText", "numpy.round", "cv2.dilate.astype", "cv2.erode.astype", "numpy.array", "numpy.array", "abs", "abs", "xs.mean", "ys.mean", "sys.stderr.write", "numpy.full", "np.zeros.reshape", "int", "int", "int", "int", "numpy.round", "numpy.dot", "print", "abs", "print", "floorplan_utils.rotateImage", "print", "print", "numpy.array", "numpy.array", "numpy.array", "print", "print", "print", "floorplan_utils.rotateImage", "numpy.array", "numpy.array", "floorplan_utils.rotateImage", "print", "print", "floorplan_utils.rotateImage"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.getLabelRoomMap", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawWallMask", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.getLabelIconMap", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.findBestTextLabelCenter", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.rotateImage", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.rotateImage", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.rotateImage", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.rotateImage", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.rotateImage"], ["", "def", "drawResultImageFinal", "(", "width", ",", "height", ",", "result", ")", ":", "\n", "    ", "colorMap", "=", "np", ".", "array", "(", "[", "(", "224", ",", "255", ",", "192", ")", ",", "(", "255", ",", "160", ",", "96", ")", ",", "(", "255", ",", "224", ",", "128", ")", ",", "(", "192", ",", "255", ",", "255", ")", ",", "(", "192", ",", "255", ",", "255", ")", ",", "(", "192", ",", "255", ",", "255", ")", ",", "(", "192", ",", "192", ",", "224", ")", ",", "(", "224", ",", "255", ",", "192", ")", ",", "(", "255", ",", "224", ",", "224", ")", ",", "(", "224", ",", "224", ",", "224", ")", "]", ")", "\n", "borderColorMap", "=", "np", ".", "array", "(", "[", "(", "128", ",", "192", ",", "64", ")", ",", "(", "192", ",", "64", ",", "64", ")", ",", "(", "192", ",", "128", ",", "64", ")", ",", "(", "0", ",", "128", ",", "192", ")", ",", "(", "0", ",", "128", ",", "192", ")", ",", "(", "0", ",", "128", ",", "192", ")", ",", "(", "128", ",", "64", ",", "160", ")", ",", "(", "128", ",", "192", ",", "64", ")", ",", "(", "192", ",", "64", ",", "0", ")", ",", "(", "255", ",", "255", ",", "255", ")", "]", ")", "\n", "colorMap", "=", "np", ".", "concatenate", "(", "[", "np", ".", "full", "(", "shape", "=", "(", "1", ",", "3", ")", ",", "fill_value", "=", "0", ")", ",", "colorMap", ",", "borderColorMap", "]", ",", "axis", "=", "0", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "colorMap", "=", "colorMap", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "\n", "labelRoomMap", "=", "getLabelRoomMap", "(", ")", "\n", "\n", "roomSegmentation", "=", "np", ".", "zeros", "(", "(", "height", ",", "width", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "roomsInfo", "=", "[", "]", "\n", "wall_dict", "=", "result", "[", "'wall'", "]", "\n", "wallMask", "=", "drawWallMask", "(", "[", "(", "wall_dict", "[", "0", "]", "[", "line", "[", "0", "]", "]", ",", "wall_dict", "[", "0", "]", "[", "line", "[", "1", "]", "]", ")", "for", "line", "in", "wall_dict", "[", "1", "]", "]", ",", "width", ",", "height", ",", "thickness", "=", "3", ")", "\n", "roomRegions", "=", "measure", ".", "label", "(", "1", "-", "wallMask", ",", "background", "=", "0", ")", "\n", "#cv2.imwrite('test/' + str(dictIndex) + '_segmentation_regions.png', drawSegmentationImage(roomRegions))", "\n", "backgroundIndex", "=", "roomRegions", ".", "min", "(", ")", "\n", "wallPoints", "=", "wall_dict", "[", "0", "]", "\n", "roomLabels", "=", "{", "}", "\n", "sizes", "=", "np", ".", "array", "(", "[", "width", ",", "height", "]", ")", "\n", "for", "wallIndex", ",", "wallLabels", "in", "enumerate", "(", "wall_dict", "[", "2", "]", ")", ":", "\n", "        ", "wallLine", "=", "wall_dict", "[", "1", "]", "[", "wallIndex", "]", "\n", "lineDim", "=", "calcLineDim", "(", "wallPoints", ",", "wallLine", ")", "\n", "#print('wall', wallIndex, wallPoints[wallLine[0]][:2], wallPoints[wallLine[1]][:2])", "\n", "center", "=", "np", ".", "round", "(", "(", "np", ".", "array", "(", "wallPoints", "[", "wallLine", "[", "0", "]", "]", "[", ":", "2", "]", ")", "+", "np", ".", "array", "(", "wallPoints", "[", "wallLine", "[", "1", "]", "]", "[", ":", "2", "]", ")", ")", "/", "2", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "for", "c", "in", "xrange", "(", "2", ")", ":", "\n", "            ", "direction", "=", "c", "*", "2", "-", "1", "\n", "if", "lineDim", "==", "1", ":", "\n", "                ", "direction", "*=", "-", "1", "\n", "pass", "\n", "", "point", "=", "center", "\n", "for", "offset", "in", "xrange", "(", "10", ")", ":", "\n", "                ", "point", "[", "1", "-", "lineDim", "]", "+=", "direction", "\n", "if", "point", "[", "lineDim", "]", "<", "0", "or", "point", "[", "lineDim", "]", ">=", "sizes", "[", "lineDim", "]", ":", "\n", "                    ", "break", "\n", "", "roomIndex", "=", "roomRegions", "[", "point", "[", "1", "]", ",", "point", "[", "0", "]", "]", "\n", "if", "roomIndex", "!=", "backgroundIndex", ":", "\n", "#print(roomIndex, wallLabels[c], wallLabels, point.tolist())", "\n", "#mask = roomRegions == roomIndex", "\n", "#mask = cv2.dilate(mask.astype(np.uint8), np.ones((3, 3)), iterations=1)", "\n", "#roomSegmentation[mask] = wallLabels[c]", "\n", "#rooms[wallLabels[c]].append(cv2.dilate(mask.astype(np.uint8), np.ones((3, 3)), iterations=wallLineWidth))", "\n", "#roomRegions[mask] = backgroundIndex", "\n", "                    ", "if", "roomIndex", "not", "in", "roomLabels", ":", "\n", "                        ", "roomLabels", "[", "roomIndex", "]", "=", "{", "}", "\n", "pass", "\n", "", "roomLabels", "[", "roomIndex", "]", "[", "wallLabels", "[", "c", "]", "]", "=", "True", "\n", "break", "\n", "", "continue", "\n", "", "continue", "\n", "", "continue", "\n", "\n", "\n", "", "rooms", "=", "[", "]", "\n", "indexMap", "=", "{", "}", "\n", "for", "roomIndex", ",", "labels", "in", "roomLabels", ".", "iteritems", "(", ")", ":", "\n", "#print(roomIndex, labels)", "\n", "        ", "if", "roomIndex", "==", "roomRegions", "[", "0", "]", "[", "0", "]", ":", "\n", "            ", "continue", "\n", "", "indexMap", "[", "roomIndex", "]", "=", "len", "(", "rooms", ")", "\n", "mask", "=", "roomRegions", "==", "roomIndex", "\n", "mask", "=", "cv2", ".", "dilate", "(", "mask", ".", "astype", "(", "np", ".", "uint8", ")", ",", "np", ".", "ones", "(", "(", "3", ",", "3", ")", ")", ",", "iterations", "=", "3", ")", "\n", "\n", "# if 7 in labels and 2 not in labels:", "\n", "#     labels[2] = True", "\n", "#     pass", "\n", "# if 5 in labels and 3 not in labels:", "\n", "#     labels[3] = True", "\n", "#     pass", "\n", "# if 9 in labels and 1 not in labels:", "\n", "#     labels[1] = True", "\n", "#     pass", "\n", "rooms", ".", "append", "(", "(", "mask", ",", "labels", ")", ")", "\n", "continue", "\n", "\n", "", "wallLineWidth", "=", "5", "\n", "# foregroundMask = roomSegmentation > 0", "\n", "# foregroundMask = cv2.dilate(foregroundMask, np.ones((3, 3)), iterations=wallLineWidth)", "\n", "# roomSegmentation[foregroundMask] =", "\n", "for", "mask", ",", "labels", "in", "rooms", ":", "\n", "        ", "label", "=", "min", "(", "[", "label", "for", "label", "in", "labels", "]", ")", "\n", "if", "label", "<", "0", ":", "\n", "            ", "continue", "\n", "", "kernel", "=", "np", ".", "zeros", "(", "(", "3", ",", "3", ")", ")", "\n", "kernel", "[", "1", ":", ",", "1", ":", "]", "=", "1", "\n", "#mask = cv2.erode(mask.astype(np.uint8), kernel.astype(np.uint8), iterations=1)", "\n", "erodedMask", "=", "cv2", ".", "erode", "(", "mask", ",", "np", ".", "ones", "(", "(", "3", ",", "3", ")", ")", ",", "iterations", "=", "wallLineWidth", ")", "\n", "roomSegmentation", "[", "mask", ".", "astype", "(", "np", ".", "bool", ")", "]", "=", "label", "+", "10", "\n", "roomSegmentation", "[", "erodedMask", ".", "astype", "(", "np", ".", "bool", ")", "]", "=", "label", "\n", "\n", "continue", "\n", "", "image", "=", "colorMap", "[", "roomSegmentation", ".", "reshape", "(", "-", "1", ")", "]", ".", "reshape", "(", "(", "height", ",", "width", ",", "3", ")", ")", "\n", "\n", "pointColor", "=", "tuple", "(", "(", "np", ".", "array", "(", "[", "0.3", ",", "0.3", ",", "0.9", "]", ")", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", ".", "tolist", "(", ")", ")", "\n", "for", "wallLine", "in", "result", "[", "'wall'", "]", "[", "1", "]", ":", "\n", "        ", "for", "pointIndex", "in", "wallLine", ":", "\n", "            ", "point", "=", "result", "[", "'wall'", "]", "[", "0", "]", "[", "pointIndex", "]", "\n", "cv2", ".", "circle", "(", "image", ",", "(", "int", "(", "point", "[", "0", "]", ")", ",", "int", "(", "point", "[", "1", "]", ")", ")", ",", "color", "=", "pointColor", ",", "radius", "=", "8", ",", "thickness", "=", "-", "1", ")", "\n", "cv2", ".", "circle", "(", "image", ",", "(", "int", "(", "point", "[", "0", "]", ")", ",", "int", "(", "point", "[", "1", "]", ")", ")", ",", "color", "=", "(", "255", ",", "255", ",", "255", ")", ",", "radius", "=", "4", ",", "thickness", "=", "-", "1", ")", "\n", "continue", "\n", "", "continue", "\n", "\n", "", "lineSegmentLength", "=", "20.0", "\n", "for", "doorLine", "in", "result", "[", "'door'", "]", "[", "1", "]", ":", "\n", "        ", "point_1", "=", "np", ".", "array", "(", "result", "[", "'door'", "]", "[", "0", "]", "[", "doorLine", "[", "0", "]", "]", "[", ":", "2", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "point_2", "=", "np", ".", "array", "(", "result", "[", "'door'", "]", "[", "0", "]", "[", "doorLine", "[", "1", "]", "]", "[", ":", "2", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "lineDim", "=", "calcLineDim", "(", "result", "[", "'door'", "]", "[", "0", "]", ",", "doorLine", ")", "\n", "for", "i", "in", "xrange", "(", "int", "(", "abs", "(", "point_1", "[", "lineDim", "]", "-", "point_2", "[", "lineDim", "]", ")", "/", "lineSegmentLength", "+", "1", ")", ")", ":", "\n", "            ", "ratio", "=", "i", "*", "lineSegmentLength", "/", "abs", "(", "point_1", "[", "lineDim", "]", "-", "point_2", "[", "lineDim", "]", ")", "\n", "if", "ratio", ">=", "1", ":", "\n", "                ", "break", "\n", "", "startPoint", "=", "point_1", "+", "ratio", "*", "(", "point_2", "-", "point_1", ")", "\n", "ratio", "=", "(", "i", "+", "0.5", ")", "*", "lineSegmentLength", "/", "abs", "(", "point_1", "[", "lineDim", "]", "-", "point_2", "[", "lineDim", "]", ")", "\n", "ratio", "=", "min", "(", "ratio", ",", "1", ")", "\n", "endPoint", "=", "point_1", "+", "ratio", "*", "(", "point_2", "-", "point_1", ")", "\n", "cv2", ".", "line", "(", "image", ",", "(", "startPoint", "[", "0", "]", ",", "startPoint", "[", "1", "]", ")", ",", "(", "endPoint", "[", "0", "]", ",", "endPoint", "[", "1", "]", ")", ",", "color", "=", "(", "0", ",", "0", ",", "0", ")", ",", "thickness", "=", "4", ")", "\n", "continue", "\n", "", "for", "point", "in", "[", "point_1", ",", "point_2", "]", ":", "\n", "            ", "startPoint", "=", "point", ".", "copy", "(", ")", "\n", "startPoint", "[", "1", "-", "lineDim", "]", "+=", "lineSegmentLength", "/", "2", "\n", "endPoint", "=", "point", ".", "copy", "(", ")", "\n", "endPoint", "[", "1", "-", "lineDim", "]", "-=", "lineSegmentLength", "/", "2", "\n", "cv2", ".", "line", "(", "image", ",", "(", "startPoint", "[", "0", "]", ",", "startPoint", "[", "1", "]", ")", ",", "(", "endPoint", "[", "0", "]", ",", "endPoint", "[", "1", "]", ")", ",", "color", "=", "(", "0", ",", "0", ",", "0", ")", ",", "thickness", "=", "2", ")", "\n", "continue", "\n", "", "continue", "\n", "\n", "\n", "\n", "", "labelIconMap", "=", "getLabelIconMap", "(", ")", "\n", "iconPos", "=", "[", "]", "\n", "for", "iconIndex", ",", "(", "icon", ",", "label", ")", "in", "enumerate", "(", "zip", "(", "result", "[", "'icon'", "]", "[", "1", "]", ",", "result", "[", "'icon'", "]", "[", "2", "]", ")", ")", ":", "\n", "        ", "name", "=", "labelIconMap", "[", "label", "+", "1", "]", "\n", "iconImage", "=", "cv2", ".", "imread", "(", "'icons/'", "+", "name", "+", "'.jpg'", ")", "\n", "\n", "points", "=", "[", "result", "[", "'icon'", "]", "[", "0", "]", "[", "pointIndex", "]", "for", "pointIndex", "in", "icon", "]", "\n", "x_1", "=", "int", "(", "round", "(", "(", "points", "[", "0", "]", "[", "0", "]", "+", "points", "[", "2", "]", "[", "0", "]", ")", "/", "2", ")", ")", "\n", "x_2", "=", "int", "(", "round", "(", "(", "points", "[", "1", "]", "[", "0", "]", "+", "points", "[", "3", "]", "[", "0", "]", ")", "/", "2", ")", ")", "\n", "y_1", "=", "int", "(", "round", "(", "(", "points", "[", "0", "]", "[", "1", "]", "+", "points", "[", "1", "]", "[", "1", "]", ")", "/", "2", ")", ")", "\n", "y_2", "=", "int", "(", "round", "(", "(", "points", "[", "2", "]", "[", "1", "]", "+", "points", "[", "3", "]", "[", "1", "]", ")", "/", "2", ")", ")", "\n", "\n", "iconSize", "=", "iconImage", ".", "shape", "#(y, x)", "\n", "#print('icon_size', iconSize)", "\n", "icon_is_landscape", "=", "iconSize", "[", "1", "]", ">", "iconSize", "[", "0", "]", "\n", "\n", "slot_size", "=", "(", "x_2", "-", "x_1", "+", "1", ",", "y_2", "-", "y_1", "+", "1", ")", "\n", "slot_center", "=", "np", ".", "array", "(", "(", "x_1", "+", "slot_size", "[", "0", "]", "/", "2", ",", "y_1", "+", "slot_size", "[", "1", "]", "/", "2", ")", ")", "\n", "slot_is_landscape", "=", "slot_size", "[", "0", "]", ">", "slot_size", "[", "1", "]", "\n", "\n", "min_dist", "=", "float", "(", "'inf'", ")", "\n", "line", "=", "None", "\n", "close_line_dim", "=", "0", "\n", "for", "wallIndex", ",", "wallLabels", "in", "enumerate", "(", "wall_dict", "[", "2", "]", ")", ":", "\n", "            ", "wallLine", "=", "wall_dict", "[", "1", "]", "[", "wallIndex", "]", "\n", "lineDim", "=", "calcLineDim", "(", "wallPoints", ",", "wallLine", ")", "\n", "center", "=", "np", ".", "round", "(", "(", "np", ".", "array", "(", "wallPoints", "[", "wallLine", "[", "0", "]", "]", "[", ":", "2", "]", ")", "+", "np", ".", "array", "(", "wallPoints", "[", "wallLine", "[", "1", "]", "]", "[", ":", "2", "]", ")", ")", "/", "2", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "point1", "=", "np", ".", "array", "(", "wallPoints", "[", "wallLine", "[", "0", "]", "]", "[", ":", "2", "]", ")", "\n", "point2", "=", "np", ".", "array", "(", "wallPoints", "[", "wallLine", "[", "1", "]", "]", "[", ":", "2", "]", ")", "\n", "n", "=", "point2", "-", "point1", "\n", "dist", "=", "np", ".", "dot", "(", "(", "point1", "-", "slot_center", ")", "-", "np", ".", "dot", "(", "(", "point1", "-", "slot_center", ")", ",", "n", ")", ",", "n", ")", "\n", "#print('indices', wallIndex, wallLabels, wallLine)", "\n", "#       print('points', wallPoints[wallLine[0]], wallPoints[wallLine[1]])", "\n", "#       pass", "\n", "\n", "if", "dist", "<", "5", ":", "\n", "                ", "min_dist", "=", "dist", "\n", "line", "=", "(", "point1", ",", "point2", ")", "\n", "close_line_dim", "=", "lineDim", "\n", "pass", "\n", "", "pass", "\n", "\n", "#sys.stderr.write(\"{}, {}, {}, {}, {}\\n\".format(y_1, y_2, x_1, x_2, iconImage.shape))", "\n", "", "print", "(", "'has line: '", ",", "line", ",", "name", ",", "close_line_dim", ")", "\n", "if", "name", "==", "\"toilet\"", ":", "\n", "            ", "if", "line", "is", "not", "None", ":", "\n", "                ", "if", "close_line_dim", "==", "0", ":", "#x", "\n", "                    ", "y_pos", "=", "(", "line", "[", "0", "]", "[", "1", "]", "+", "line", "[", "1", "]", "[", "1", "]", ")", "/", "2", "\n", "if", "y_pos", ">", "y_2", ":", "#toilet is below", "\n", "                        ", "print", "(", "'first case rot'", ")", "\n", "iconImage", "=", "rotateImage", "(", "iconImage", ",", "2", ")", "\n", "", "elif", "y_pos", "<", "y_1", ":", "# toilet is above", "\n", "                        ", "pass", "# do nothing", "\n", "", "else", ":", "\n", "                        ", "print", "(", "\"bad case\"", ",", "x_1", ",", "x_2", ",", "y_1", ",", "y_2", ",", "line", ")", "\n", "pass", "\n", "", "", "else", ":", "#y", "\n", "                    ", "x_pos", "=", "(", "line", "[", "0", "]", "[", "0", "]", "+", "line", "[", "1", "]", "[", "0", "]", ")", "/", "2", "\n", "print", "(", "'here'", ",", "x_pos", ",", "x_1", ",", "x_2", ")", "\n", "if", "x_pos", ">", "x_2", ":", "#toilet is to the left", "\n", "                        ", "pass", "# do nothing", "\n", "", "elif", "x_pos", "<", "x_1", ":", "# toilet is to the right", "\n", "                        ", "print", "(", "slot_is_landscape", ",", "icon_is_landscape", ")", "\n", "if", "slot_is_landscape", ":", "\n", "                            ", "iconImage", "=", "rotateImage", "(", "iconImage", ",", "2", ")", "\n", "", "pass", "# do nothing", "\n", "", "else", ":", "\n", "                        ", "print", "(", "\"bad case\"", ",", "x_1", ",", "x_2", ",", "y_1", ",", "y_2", ",", "line", ")", "\n", "pass", "\n", "", "", "pass", "\n", "", "", "elif", "name", "==", "\"washing_basin\"", ":", "\n", "            ", "if", "line", "is", "not", "None", ":", "\n", "                ", "if", "close_line_dim", "==", "0", ":", "#x", "\n", "\n", "                    ", "y_pos", "=", "(", "line", "[", "0", "]", "[", "1", "]", "+", "line", "[", "1", "]", "[", "1", "]", ")", "/", "2", "\n", "print", "(", "y_pos", ",", "y_1", ",", "y_2", ",", "'y'", ")", "\n", "if", "y_pos", ">", "y_2", ":", "#toilet is below", "\n", "                        ", "iconImage", "=", "rotateImage", "(", "iconImage", ",", "2", ")", "\n", "pass", "\n", "", "elif", "y_pos", "<", "y_1", ":", "# toilet is above", "\n", "                        ", "pass", "# do nothing", "\n", "", "else", ":", "\n", "                        ", "print", "(", "\"bad case\"", ",", "x_1", ",", "x_2", ",", "y_1", ",", "y_2", ",", "line", ")", "\n", "pass", "\n", "", "", "else", ":", "#y", "\n", "                    ", "x_pos", "=", "(", "line", "[", "0", "]", "[", "0", "]", "+", "line", "[", "1", "]", "[", "0", "]", ")", "/", "2", "\n", "print", "(", "x_pos", ",", "x_1", ",", "x_2", ",", "'x'", ")", "\n", "if", "x_pos", ">", "x_2", ":", "#toilet is to the left", "\n", "                        ", "pass", "# do nothing", "\n", "", "elif", "x_pos", "<", "x_1", ":", "# toilet is to the right", "\n", "                        ", "if", "not", "slot_is_landscape", ":", "\n", "                            ", "iconImage", "=", "rotateImage", "(", "iconImage", ",", "2", ")", "\n", "pass", "# do nothing", "\n", "", "pass", "\n", "", "else", ":", "\n", "                        ", "print", "(", "\"bad case\"", ",", "x_1", ",", "x_2", ",", "y_1", ",", "y_2", ",", "line", ")", "\n", "pass", "\n", "", "pass", "\n", "", "pass", "\n", "", "pass", "\n", "", "pass", "\n", "if", "slot_is_landscape", "!=", "icon_is_landscape", ":", "\n", "            ", "iconImage", "=", "rotateImage", "(", "iconImage", ",", "1", ")", "\n", "\n", "\n", "", "iconImage", "=", "cv2", ".", "resize", "(", "iconImage", ",", "slot_size", ")", "\n", "\n", "\n", "image", "[", "y_1", ":", "y_2", "+", "1", ",", "x_1", ":", "x_2", "+", "1", "]", "=", "iconImage", "\n", "if", "name", "==", "\"washing_basin\"", ":", "\n", "            ", "print", "(", "'basin pose'", ",", "[", "x_1", ",", "y_1", ",", "x_2", ",", "y_2", "]", ")", "\n", "", "iconPos", ".", "append", "(", "[", "x_1", ",", "y_1", ",", "x_2", ",", "y_2", "]", ")", "\n", "continue", "\n", "\n", "", "fontSize", "=", "0.7", "\n", "for", "mask", ",", "labels", "in", "rooms", ":", "\n", "        ", "label", "=", "min", "(", "[", "label", "for", "label", "in", "labels", "]", ")", "\n", "if", "label", "<=", "0", ":", "\n", "            ", "continue", "\n", "", "ys", ",", "xs", "=", "mask", ".", "nonzero", "(", ")", "\n", "print", "(", "xs", ".", "mean", "(", ")", ",", "ys", ".", "mean", "(", ")", ",", "label", ")", "\n", "\n", "#label_half_size_x = int(fontSize * len(labelRoomMap[label]) / 2 * 20)", "\n", "#label_half_size_y = int(fontSize / 2 * 20)", "\n", "ret", ",", "baseline", "=", "cv2", ".", "getTextSize", "(", "labelRoomMap", "[", "label", "]", ",", "fontFace", "=", "cv2", ".", "FONT_HERSHEY_TRIPLEX", ",", "fontScale", "=", "fontSize", ",", "thickness", "=", "1", ")", "\n", "print", "(", "labelRoomMap", "[", "label", "]", ")", "\n", "#print('ret', ret)", "\n", "center", "=", "findBestTextLabelCenter", "(", "iconPos", ",", "xs", ",", "ys", ",", "ret", "[", "0", "]", "/", "2", ",", "ret", "[", "1", "]", "/", "2", ")", "\n", "print", "(", "'comp'", ",", "[", "xs", ".", "mean", "(", ")", ",", "ys", ".", "mean", "(", ")", "]", ",", "center", ")", "\n", "#center = np.round([xs.mean(), ys.mean()]).astype(np.int32)", "\n", "if", "center", "is", "not", "None", ":", "\n", "            ", "cv2", ".", "putText", "(", "image", ",", "labelRoomMap", "[", "label", "]", ",", "(", "center", "[", "0", "]", "-", "ret", "[", "0", "]", "/", "2", ",", "center", "[", "1", "]", "+", "ret", "[", "1", "]", "/", "2", ")", ",", "fontFace", "=", "cv2", ".", "FONT_HERSHEY_TRIPLEX", ",", "fontScale", "=", "fontSize", ",", "color", "=", "(", "0", ",", "0", ",", "0", ")", ",", "thickness", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "if", "label", "!=", "4", ":", "\n", "                ", "import", "sys", "\n", "sys", ".", "stderr", ".", "write", "(", "\"panic! I cannot find valid position to put label in room: {}, {}\\n\"", ".", "format", "(", "label", ",", "labelRoomMap", "[", "label", "]", ")", ")", "\n", "", "", "continue", "\n", "", "print", "(", "'end draw'", ")", "\n", "#cv2.imwrite('test/result.png', image)", "\n", "#exit(1)", "\n", "#cv2.imwrite('test/region.png', drawSegmentationImage(roomRegions))", "\n", "# for regionIndex in xrange(roomRegions.max() + 1):", "\n", "#     cv2.imwrite('test/mask_' + str(regionIndex) + '.png', drawMaskImage(roomRegions == regionIndex))", "\n", "#     continue", "\n", "#resultImage = drawLines('', width, height, result['wall'][0], result['wall'][1], result['wall'][2], None, lineWidth=3)", "\n", "#resultImage = drawLines('', width, height, result['door'][0], result['door'][1], [], resultImage, lineWidth=2, lineColor=0)", "\n", "#iconImage = drawRectangles('', width, height, result['icon'][0], result['icon'][1], result['icon'][2], lineWidth=2)", "\n", "return", "image", "\n", "", "def", "findBestTextLabelCenter", "(", "icon_pos", ",", "xs", ",", "ys", ",", "label_half_size_x", ",", "label_half_size_y", ")", ":", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.findBestTextLabelCenter": [[1085, 1135], ["numpy.array", "numpy.array", "numpy.array().transpose", "np.array().transpose.min", "np.array().transpose.max", "numpy.array", "print", "numpy.logical_and", "numpy.all", "numpy.tile", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.any", "numpy.logical_not", "numpy.logical_and", "numpy.linalg.norm", "numpy.argmin", "len", "xs.mean", "ys.mean", "numpy.array"], "function", ["None"], ["", "def", "findBestTextLabelCenter", "(", "icon_pos", ",", "xs", ",", "ys", ",", "label_half_size_x", ",", "label_half_size_y", ")", ":", "\n", "    ", "center", "=", "np", ".", "array", "(", "[", "xs", ".", "mean", "(", ")", ",", "ys", ".", "mean", "(", ")", "]", ")", "\n", "icon_pos", "=", "np", ".", "array", "(", "icon_pos", ")", "\n", "room_points", "=", "np", ".", "array", "(", "[", "xs", ",", "ys", "]", ")", ".", "transpose", "(", ")", "\n", "min_point", "=", "room_points", ".", "min", "(", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "max_point", "=", "room_points", ".", "max", "(", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "size", "=", "np", ".", "array", "(", "[", "label_half_size_x", ",", "label_half_size_y", "]", ")", "\n", "print", "(", "'size'", ",", "size", ")", "\n", "avail_min_point", "=", "min_point", "+", "size", "\n", "avail_max_point", "=", "max_point", "-", "size", "\n", "\n", "avail_points", "=", "np", ".", "logical_and", "(", "room_points", ">", "avail_min_point", ",", "room_points", "<", "avail_max_point", ")", "\n", "avail_points", "=", "np", ".", "all", "(", "avail_points", ",", "axis", "=", "1", ")", "\n", "\n", "room_points_aug", "=", "np", ".", "tile", "(", "room_points", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", ",", "[", "1", ",", "1", ",", "icon_pos", ".", "shape", "[", "0", "]", "]", ")", "\n", "\n", "room_points_gt_tl_x", "=", "room_points_aug", "[", ":", ",", "0", ",", ":", "]", ">", "icon_pos", "[", ":", ",", "0", "]", "-", "size", "[", "0", "]", "-", "5", "\n", "room_points_lt_br_x", "=", "room_points_aug", "[", ":", ",", "0", ",", ":", "]", "<", "icon_pos", "[", ":", ",", "2", "]", "+", "size", "[", "0", "]", "+", "5", "\n", "\n", "room_points_gt_tl_y", "=", "room_points_aug", "[", ":", ",", "1", ",", ":", "]", ">", "icon_pos", "[", ":", ",", "1", "]", "-", "size", "[", "1", "]", "-", "5", "\n", "room_points_lt_br_y", "=", "room_points_aug", "[", ":", ",", "1", ",", ":", "]", "<", "icon_pos", "[", ":", ",", "3", "]", "+", "size", "[", "1", "]", "+", "5", "\n", "\n", "room_points_in_square", "=", "np", ".", "logical_and", "(", "room_points_gt_tl_x", ",", "room_points_lt_br_x", ")", "\n", "room_points_in_square", "=", "np", ".", "logical_and", "(", "room_points_in_square", ",", "room_points_gt_tl_y", ")", "\n", "room_points_in_square", "=", "np", ".", "logical_and", "(", "room_points_in_square", ",", "room_points_lt_br_y", ")", "\n", "\n", "#room_points_in_square = np.all(room_points_in_square, axis=1)", "\n", "room_points_in_square", "=", "np", ".", "any", "(", "room_points_in_square", ",", "axis", "=", "1", ")", "\n", "\n", "room_points_not_in_square", "=", "np", ".", "logical_not", "(", "room_points_in_square", ")", "\n", "\n", "good_points_mask", "=", "np", ".", "logical_and", "(", "avail_points", ",", "room_points_not_in_square", ")", "\n", "good_points", "=", "room_points", "[", "good_points_mask", "]", "\n", "good_points_center_dist", "=", "np", ".", "linalg", ".", "norm", "(", "good_points", "-", "center", ",", "axis", "=", "1", ")", "\n", "#good_points_center_dist = np.sum(np.abs(good_points - center), axis=1)", "\n", "#print('icon_pos')", "\n", "#print(icon_pos)", "\n", "#print('goodpoints')", "\n", "#print(center)", "\n", "#print(good_points)", "\n", "#print(good_points_center_dist)", "\n", "if", "len", "(", "good_points", ")", "==", "0", ":", "\n", "#print('give up')", "\n", "        ", "return", "None", "\n", "#return np.round(center).astype(np.int32)", "\n", "", "best_point_idx", "=", "np", ".", "argmin", "(", "good_points_center_dist", ",", "axis", "=", "0", ")", "\n", "#print('cost', good_points_center_dist[best_point_idx])", "\n", "#print('best points')", "\n", "#print(good_points[best_point_idx])", "\n", "return", "good_points", "[", "best_point_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.rotateImage": [[1136, 1146], ["numpy.flip", "image.transpose", "numpy.flip", "numpy.flip", "numpy.flip", "image.transpose"], "function", ["None"], ["", "def", "rotateImage", "(", "image", ",", "orientation", ")", ":", "\n", "    ", "if", "orientation", "==", "0", ":", "\n", "        ", "return", "image", "\n", "", "elif", "orientation", "==", "1", ":", "\n", "        ", "return", "np", ".", "flip", "(", "image", ".", "transpose", "(", "(", "1", ",", "0", ",", "2", ")", ")", ",", "axis", "=", "0", ")", "\n", "", "elif", "orientation", "==", "2", ":", "\n", "        ", "return", "np", ".", "flip", "(", "np", ".", "flip", "(", "image", ",", "axis", "=", "1", ")", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "flip", "(", "image", ".", "transpose", "(", "1", ",", "0", ",", "2", ")", ",", "axis", "=", "1", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.projectIndices": [[1147, 1165], ["int", "utils.projectIndices", "utils.projectIndices", "int", "utils.projectIndices", "utils.projectIndices"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.projectIndices", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.projectIndices", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.projectIndices", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.projectIndices"], ["", "def", "projectIndices", "(", "pointIndices", ",", "pointSegmentation", ",", "min_x", ",", "max_x", ",", "min_y", ",", "max_y", ")", ":", "\n", "    ", "if", "max_x", "-", "min_x", "==", "1", "and", "max_y", "-", "min_y", "==", "1", ":", "\n", "        ", "pointIndices", "[", "pointSegmentation", "[", ":", ",", "2", "]", "]", "=", "min_y", "*", "WIDTH", "+", "min_x", "\n", "return", "\n", "", "elif", "max_x", "-", "min_x", ">=", "max_y", "-", "min_y", ":", "\n", "        ", "middle_x", "=", "int", "(", "(", "max_x", "+", "min_x", "+", "1", ")", "/", "2", ")", "\n", "mask_1", "=", "pointSegmentation", "[", ":", ",", "0", "]", "<", "middle_x", "\n", "projectIndices", "(", "pointIndices", ",", "pointSegmentation", "[", "mask_1", "]", ",", "min_x", ",", "middle_x", ",", "min_y", ",", "max_y", ")", "\n", "mask_2", "=", "pointSegmentation", "[", ":", ",", "0", "]", ">=", "middle_x", "\n", "projectIndices", "(", "pointIndices", ",", "pointSegmentation", "[", "mask_2", "]", ",", "middle_x", ",", "max_x", ",", "min_y", ",", "max_y", ")", "\n", "", "else", ":", "\n", "        ", "middle_y", "=", "int", "(", "(", "max_y", "+", "min_y", "+", "1", ")", "/", "2", ")", "\n", "mask_1", "=", "pointSegmentation", "[", ":", ",", "1", "]", "<", "middle_y", "\n", "projectIndices", "(", "pointIndices", ",", "pointSegmentation", "[", "mask_1", "]", ",", "min_x", ",", "max_x", ",", "min_y", ",", "middle_y", ")", "\n", "mask_2", "=", "pointSegmentation", "[", ":", ",", "1", "]", ">=", "middle_y", "\n", "projectIndices", "(", "pointIndices", ",", "pointSegmentation", "[", "mask_2", "]", ",", "min_x", ",", "max_x", ",", "middle_y", ",", "max_y", ")", "\n", "pass", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.drawCornerSegmentation": [[1166, 1172], ["numpy.zeros", "max", "min", "max", "min"], "function", ["None"], ["", "def", "drawCornerSegmentation", "(", "corners", ",", "radius", "=", "1", ",", "width", "=", "WIDTH", ",", "height", "=", "HEIGHT", ")", ":", "\n", "    ", "cornerSegmentation", "=", "np", ".", "zeros", "(", "(", "height", ",", "width", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "for", "corner", "in", "corners", ":", "\n", "        ", "cornerSegmentation", "[", "max", "(", "corner", "[", "1", "]", "-", "radius", "+", "1", ",", "0", ")", ":", "min", "(", "corner", "[", "1", "]", "+", "radius", ",", "height", "-", "1", ")", ",", "max", "(", "corner", "[", "0", "]", "-", "radius", "+", "1", ",", "0", ")", ":", "min", "(", "corner", "[", "0", "]", "+", "radius", ",", "width", "-", "1", ")", "]", "=", "corner", "[", "2", "]", "\n", "continue", "\n", "", "return", "cornerSegmentation", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.getOrientationCorners": [[1173, 1179], ["orientationCorners[].append", "xrange"], "function", ["None"], ["", "def", "getOrientationCorners", "(", "corners", ",", "cornerSize", "=", "3", ")", ":", "\n", "    ", "orientationCorners", "=", "[", "[", "]", "for", "_", "in", "xrange", "(", "NUM_CORNERS", ")", "]", "\n", "for", "corner", "in", "corners", ":", "\n", "        ", "orientationCorners", "[", "corner", "[", "2", "]", "-", "1", "]", ".", "append", "(", "(", "(", "corner", "[", "0", "]", ",", "corner", "[", "1", "]", ")", ",", "(", "corner", "[", "0", "]", "-", "cornerSize", ",", "corner", "[", "1", "]", "-", "cornerSize", ")", ",", "(", "corner", "[", "0", "]", "+", "cornerSize", ",", "corner", "[", "1", "]", "+", "cornerSize", ")", ")", ")", "\n", "continue", "\n", "", "return", "orientationCorners", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.getGTPrimitives": [[1180, 1183], ["None"], "function", ["None"], ["", "def", "getGTPrimitives", "(", "gt_dict", ")", ":", "\n", "    ", "result_dict", "=", "{", "'wall'", ":", "[", "wallPoints", ",", "filteredWallLines", ",", "filteredWallLabels", "]", ",", "'door'", ":", "[", "doorPoints", ",", "filteredDoorLines", ",", "[", "]", "]", ",", "'icon'", ":", "[", "iconPoints", ",", "filteredIcons", ",", "filteredIconTypes", "]", "}", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.writeRepresentation": [[1184, 1219], ["floorplan_utils.getLabelIconMap", "open", "f.write", "f.write", "zip", "zip", "f.close", "floorplan_utils.calcLineDim", "f.write", "floorplan_utils.calcLineDim", "f.write", "numpy.array().astype", "np.array().astype.min", "np.array().astype.max", "f.write", "str", "str", "len", "numpy.array", "str", "str", "str", "int", "str", "str", "str", "int", "int", "str", "str", "str", "int", "str", "int", "int", "str", "int", "str", "int", "str", "int", "str", "int", "str", "int", "int"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.getLabelIconMap", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.floorplan_utils.calcLineDim"], ["", "def", "writeRepresentation", "(", "filename", ",", "width", ",", "height", ",", "result_dict", ")", ":", "\n", "    ", "labelMap", "=", "[", "11", ",", "1", ",", "2", ",", "3", ",", "4", ",", "3", ",", "6", ",", "7", ",", "8", ",", "2", ",", "]", "\n", "labelIconMap", "=", "getLabelIconMap", "(", ")", "\n", "with", "open", "(", "filename", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "str", "(", "width", ")", "+", "'\\t'", "+", "str", "(", "height", ")", "+", "'\\n'", ")", "\n", "f", ".", "write", "(", "str", "(", "len", "(", "result_dict", "[", "'wall'", "]", "[", "1", "]", ")", ")", "+", "'\\n'", ")", "\n", "for", "wallLine", ",", "wallLabels", "in", "zip", "(", "result_dict", "[", "'wall'", "]", "[", "1", "]", ",", "result_dict", "[", "'wall'", "]", "[", "2", "]", ")", ":", "\n", "            ", "point_1", "=", "result_dict", "[", "'wall'", "]", "[", "0", "]", "[", "wallLine", "[", "0", "]", "]", "\n", "point_2", "=", "result_dict", "[", "'wall'", "]", "[", "0", "]", "[", "wallLine", "[", "1", "]", "]", "\n", "lineDim", "=", "calcLineDim", "(", "result_dict", "[", "'wall'", "]", "[", "0", "]", ",", "wallLine", ")", "\n", "if", "point_1", "[", "lineDim", "]", ">", "point_2", "[", "lineDim", "]", ":", "\n", "                ", "point_1", "[", "lineDim", "]", ",", "point_2", "[", "lineDim", "]", "=", "point_2", "[", "lineDim", "]", ",", "point_1", "[", "lineDim", "]", "\n", "pass", "\n", "", "f", ".", "write", "(", "str", "(", "int", "(", "point_1", "[", "0", "]", ")", ")", "+", "'\\t'", "+", "str", "(", "int", "(", "point_1", "[", "1", "]", ")", ")", "+", "'\\t'", "+", "str", "(", "int", "(", "point_2", "[", "0", "]", ")", ")", "+", "'\\t'", "+", "str", "(", "int", "(", "point_2", "[", "1", "]", ")", ")", "+", "'\\t'", "+", "str", "(", "labelMap", "[", "wallLabels", "[", "0", "]", "]", ")", "+", "'\\t'", "+", "str", "(", "labelMap", "[", "wallLabels", "[", "1", "]", "]", ")", "+", "'\\n'", ")", "\n", "continue", "\n", "", "for", "doorLine", "in", "result_dict", "[", "'door'", "]", "[", "1", "]", ":", "\n", "            ", "point_1", "=", "result_dict", "[", "'door'", "]", "[", "0", "]", "[", "doorLine", "[", "0", "]", "]", "\n", "point_2", "=", "result_dict", "[", "'door'", "]", "[", "0", "]", "[", "doorLine", "[", "1", "]", "]", "\n", "lineDim", "=", "calcLineDim", "(", "result_dict", "[", "'door'", "]", "[", "0", "]", ",", "doorLine", ")", "\n", "if", "point_1", "[", "lineDim", "]", ">", "point_2", "[", "lineDim", "]", ":", "\n", "                ", "point_1", "[", "lineDim", "]", ",", "point_2", "[", "lineDim", "]", "=", "point_2", "[", "lineDim", "]", ",", "point_1", "[", "lineDim", "]", "\n", "pass", "\n", "", "f", ".", "write", "(", "str", "(", "int", "(", "point_1", "[", "0", "]", ")", ")", "+", "'\\t'", "+", "str", "(", "int", "(", "point_1", "[", "1", "]", ")", ")", "+", "'\\t'", "+", "str", "(", "int", "(", "point_2", "[", "0", "]", ")", ")", "+", "'\\t'", "+", "str", "(", "int", "(", "point_2", "[", "1", "]", ")", ")", "+", "'\\tdoor\\t1\\t1\\n'", ")", "\n", "continue", "\n", "#print(len(result_dict['icon'][1]))", "\n", "", "for", "icon", ",", "iconLabel", "in", "zip", "(", "result_dict", "[", "'icon'", "]", "[", "1", "]", ",", "result_dict", "[", "'icon'", "]", "[", "2", "]", ")", ":", "\n", "#print(iconLabel, labelIconMap[iconLabel + 1])", "\n", "            ", "points", "=", "np", ".", "array", "(", "[", "result_dict", "[", "'icon'", "]", "[", "0", "]", "[", "pointIndex", "]", "[", ":", "2", "]", "for", "pointIndex", "in", "icon", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "mins", "=", "points", ".", "min", "(", "0", ")", "\n", "maxs", "=", "points", ".", "max", "(", "0", ")", "\n", "f", ".", "write", "(", "str", "(", "int", "(", "mins", "[", "0", "]", ")", ")", "+", "'\\t'", "+", "str", "(", "int", "(", "mins", "[", "1", "]", ")", ")", "+", "'\\t'", "+", "str", "(", "int", "(", "maxs", "[", "0", "]", ")", ")", "+", "'\\t'", "+", "str", "(", "int", "(", "maxs", "[", "1", "]", ")", ")", "+", "'\\t'", "+", "labelIconMap", "[", "iconLabel", "+", "1", "]", "+", "'\\t1\\t1\\n'", ")", "\n", "continue", "\n", "", "f", ".", "close", "(", ")", "\n", "pass", "\n", "", "return", "\n", "", ""]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.RecordReader.parse_fn": [[18, 119], ["tensorflow.reshape", "tensorflow.cast", "tensorflow.cast", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.stack", "tensorflow.cast", "tensorflow.cast", "tensorflow.minimum", "tensorflow.reshape", "tensorflow.concat", "tensorflow.parse_single_example", "tensorflow.parse_single_example", "tensorflow.reshape", "tensorflow.decode_raw", "tensorflow.decode_raw", "enumerate", "tensorflow.cond", "augmentation_tf.augmentScaling", "augmentation_tf.augmentFlipping", "tensorflow.squeeze", "tensorflow.squeeze", "tensorflow.concat", "tensorflow.stack", "tensorflow.cast", "tensorflow.reshape", "tensorflow.logical_or", "tensorflow.one_hot", "tensorflow.ones", "zip", "tensorflow.equal", "tensorflow.equal", "augmentation_tf.augmentWarping", "tensorflow.zeros", "tensorflow.sparse_to_dense", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.stack", "sum", "tensorflow.shape", "zip"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.augmentation_tf.augmentScaling", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.augmentation_tf.augmentFlipping", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.augmentation_tf.augmentWarping"], ["def", "parse_fn", "(", "example", ",", "augmentation", ",", "readImageFeatures", "=", "False", ",", "convertCorners", "=", "False", ",", "kernelSize", "=", "11", ")", ":", "\n", "    ", "if", "readImageFeatures", ":", "\n", "        ", "features", "=", "tf", ".", "parse_single_example", "(", "\n", "example", ",", "\n", "# Defaults are not specified since both keys are required.", "\n", "features", "=", "{", "\n", "'image_path'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "string", ")", ",", "\n", "'points'", ":", "tf", ".", "FixedLenFeature", "(", "[", "NUM_POINTS", "*", "(", "NUM_INPUT_CHANNELS", "-", "1", ")", "]", ",", "tf", ".", "float32", ")", ",", "\n", "'point_indices'", ":", "tf", ".", "FixedLenFeature", "(", "[", "NUM_POINTS", "]", ",", "tf", ".", "int64", ")", ",", "\n", "'corner'", ":", "tf", ".", "FixedLenFeature", "(", "[", "MAX_NUM_CORNERS", "*", "3", "]", ",", "tf", ".", "int64", ")", ",", "\n", "'num_corners'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", ",", "\n", "'icon'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "string", ")", ",", "\n", "'room'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "string", ")", ",", "\n", "'image'", ":", "tf", ".", "FixedLenFeature", "(", "sum", "(", "[", "size", "*", "size", "*", "numChannels", "for", "size", ",", "numChannels", "in", "zip", "(", "SIZES", ",", "NUM_CHANNELS", ")", "[", "1", ":", "]", "]", ")", ",", "tf", ".", "float32", ")", ",", "\n", "'flags'", ":", "tf", ".", "FixedLenFeature", "(", "[", "2", "]", ",", "tf", ".", "int64", ")", ",", "\n", "}", ")", "\n", "", "else", ":", "\n", "        ", "features", "=", "tf", ".", "parse_single_example", "(", "\n", "example", ",", "\n", "# Defaults are not specified since both keys are required.", "\n", "features", "=", "{", "\n", "'image_path'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "string", ")", ",", "\n", "'points'", ":", "tf", ".", "FixedLenFeature", "(", "[", "NUM_POINTS", "*", "(", "NUM_INPUT_CHANNELS", "-", "1", ")", "]", ",", "tf", ".", "float32", ")", ",", "\n", "'point_indices'", ":", "tf", ".", "FixedLenFeature", "(", "[", "NUM_POINTS", "]", ",", "tf", ".", "int64", ")", ",", "\n", "'corner'", ":", "tf", ".", "FixedLenFeature", "(", "[", "MAX_NUM_CORNERS", "*", "3", "]", ",", "tf", ".", "int64", ")", ",", "\n", "'num_corners'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", ",", "\n", "'icon'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "string", ")", ",", "\n", "'room'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "string", ")", ",", "\n", "'flags'", ":", "tf", ".", "FixedLenFeature", "(", "[", "2", "]", ",", "tf", ".", "int64", ")", ",", "\n", "}", ")", "\n", "pass", "\n", "\n", "", "points", "=", "tf", ".", "reshape", "(", "features", "[", "'points'", "]", ",", "(", "NUM_POINTS", ",", "NUM_INPUT_CHANNELS", "-", "1", ")", ")", "\n", "point_indices", "=", "tf", ".", "cast", "(", "features", "[", "'point_indices'", "]", ",", "tf", ".", "int32", ")", "\n", "#point_indices = features['point_indices']", "\n", "\n", "corners", "=", "tf", ".", "cast", "(", "tf", ".", "reshape", "(", "features", "[", "'corner'", "]", ",", "[", "MAX_NUM_CORNERS", ",", "3", "]", ")", ",", "tf", ".", "int32", ")", "\n", "numCorners", "=", "features", "[", "'num_corners'", "]", "\n", "corners", "=", "corners", "[", ":", "numCorners", "]", "\n", "iconSegmentation", "=", "tf", ".", "reshape", "(", "tf", ".", "decode_raw", "(", "features", "[", "'icon'", "]", ",", "tf", ".", "uint8", ")", ",", "(", "HEIGHT", ",", "WIDTH", ",", "1", ")", ")", "\n", "roomSegmentation", "=", "tf", ".", "reshape", "(", "tf", ".", "decode_raw", "(", "features", "[", "'room'", "]", ",", "tf", ".", "uint8", ")", ",", "(", "HEIGHT", ",", "WIDTH", ",", "1", ")", ")", "\n", "heatmaps", "=", "tf", ".", "stack", "(", "[", "iconSegmentation", ",", "roomSegmentation", "]", ",", "axis", "=", "0", ")", "\n", "\n", "if", "readImageFeatures", ":", "\n", "        ", "imageFeature", "=", "features", "[", "'image'", "]", "\n", "imageFeatures", "=", "{", "}", "\n", "offset", "=", "0", "\n", "for", "index", ",", "(", "size", ",", "numChannels", ")", "in", "enumerate", "(", "zip", "(", "SIZES", ",", "NUM_CHANNELS", ")", "[", "1", ":", "]", ")", ":", "\n", "            ", "imageFeatures", "[", "index", "]", "=", "tf", ".", "reshape", "(", "imageFeature", "[", "offset", ":", "offset", "+", "size", "*", "size", "*", "numChannels", "]", ",", "(", "size", ",", "size", ",", "numChannels", ")", ")", "\n", "offset", "+=", "size", "*", "size", "*", "numChannels", "\n", "continue", "\n", "", "", "else", ":", "\n", "        ", "imageFeatures", "=", "{", "}", "\n", "pass", "\n", "\n", "", "flags", "=", "features", "[", "'flags'", "]", "\n", "if", "'w'", "in", "augmentation", ":", "\n", "        ", "point_indices", ",", "corners", ",", "heatmaps", "=", "tf", ".", "cond", "(", "tf", ".", "logical_or", "(", "tf", ".", "equal", "(", "flags", "[", "0", "]", ",", "0", ")", ",", "tf", ".", "equal", "(", "flags", "[", "0", "]", ",", "4", ")", ")", ",", "lambda", ":", "augmentWarping", "(", "point_indices", ",", "corners", ",", "heatmaps", ",", "gridStride", "=", "32", ",", "randomScale", "=", "2", ")", ",", "lambda", ":", "(", "point_indices", ",", "corners", ",", "heatmaps", ")", ")", "\n", "#point_indices, corners, heatmaps = augmentWarping(point_indices, corners, heatmaps, gridStride=32, randomScale=4)", "\n", "pass", "\n", "", "if", "'s'", "in", "augmentation", ":", "\n", "        ", "points", ",", "point_indices", ",", "corners", ",", "heatmaps", ",", "imageFeatures", "=", "augmentScaling", "(", "points", ",", "point_indices", ",", "corners", ",", "heatmaps", ",", "imageFeatures", ")", "\n", "pass", "\n", "", "if", "'f'", "in", "augmentation", ":", "\n", "        ", "points", ",", "point_indices", ",", "corners", ",", "heatmaps", ",", "imageFeatures", "=", "augmentFlipping", "(", "points", ",", "point_indices", ",", "corners", ",", "heatmaps", ",", "imageFeatures", ")", "\n", "pass", "\n", "\n", "", "iconSegmentation", "=", "tf", ".", "cast", "(", "tf", ".", "squeeze", "(", "heatmaps", "[", "0", "]", ")", ",", "tf", ".", "int32", ")", "\n", "roomSegmentation", "=", "tf", ".", "cast", "(", "tf", ".", "squeeze", "(", "heatmaps", "[", "1", "]", ")", ",", "tf", ".", "int32", ")", "\n", "\n", "roomSegmentation", "=", "tf", ".", "minimum", "(", "roomSegmentation", ",", "NUM_ROOMS", "-", "1", ")", "\n", "\n", "# point_indices_stack = getCoarseIndicesMaps(point_indices, WIDTH, HEIGHT, 0)", "\n", "\n", "corners", "=", "tf", ".", "reshape", "(", "tf", ".", "concat", "(", "[", "corners", ",", "tf", ".", "zeros", "(", "(", "MAX_NUM_CORNERS", "-", "tf", ".", "shape", "(", "corners", ")", "[", "0", "]", ",", "3", ")", ",", "dtype", "=", "tf", ".", "int32", ")", "]", ",", "axis", "=", "0", ")", ",", "(", "MAX_NUM_CORNERS", ",", "3", ")", ")", "\n", "if", "convertCorners", ":", "\n", "        ", "cornerSegmentation", "=", "tf", ".", "stack", "(", "[", "tf", ".", "sparse_to_dense", "(", "tf", ".", "stack", "(", "[", "corners", "[", ":", ",", "1", "]", ",", "corners", "[", ":", ",", "0", "]", "]", ",", "axis", "=", "1", ")", ",", "(", "HEIGHT", ",", "WIDTH", ")", ",", "corners", "[", ":", ",", "2", "]", ",", "validate_indices", "=", "False", ")", "]", ",", "axis", "=", "0", ")", "\n", "cornerHeatmaps", "=", "tf", ".", "one_hot", "(", "cornerSegmentation", ",", "depth", "=", "NUM_CORNERS", "+", "1", ",", "axis", "=", "-", "1", ")", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "\n", "#kernel_size = kernelSize", "\n", "#neighbor_kernel_array = disk(kernel_size)", "\n", "#neighbor_kernel = tf.constant(neighbor_kernel_array.reshape(-1), shape=neighbor_kernel_array.shape, dtype=tf.float32)", "\n", "#neighbor_kernel = tf.reshape(neighbor_kernel, [kernel_size, kernel_size, 1, 1])", "\n", "#cornerHeatmaps = tf.nn.depthwise_conv2d(cornerHeatmaps, tf.tile(neighbor_kernel, [1, 1, NUM_CORNERS, 1]), strides=[1, 1, 1, 1], padding='SAME')", "\n", "corners", "=", "tf", ".", "cast", "(", "cornerHeatmaps", ">", "0.5", ",", "tf", ".", "float32", ")", "\n", "\n", "# cornerSegmentation = tf.sparse_to_dense(tf.stack([corners[:, 1], corners[:, 0]], axis=1), (HEIGHT, WIDTH), corners[:, 2], validate_indices=False)", "\n", "# cornerHeatmaps = tf.one_hot(cornerSegmentation, depth=NUM_CORNERS, axis=-1)", "\n", "# kernel = tf.tile(tf.expand_dims(tf.constant(disk(11)), -1), [1, 1, NUM_CORNERS])", "\n", "# cornerHeatmaps = tf.nn.dilation2d(tf.expand_dims(cornerHeatmaps, 0), kernel, [1, 1, 1, 1], [1, 1, 1, 1], 'SAME')[0]", "\n", "\n", "", "imagePath", "=", "features", "[", "'image_path'", "]", "\n", "\n", "points", "=", "tf", ".", "concat", "(", "[", "points", ",", "tf", ".", "ones", "(", "(", "NUM_POINTS", ",", "1", ")", ")", "]", ",", "axis", "=", "1", ")", "\n", "\n", "if", "readImageFeatures", ":", "\n", "        ", "input_dict", "=", "{", "'points'", ":", "points", ",", "'point_indices'", ":", "point_indices", ",", "'image_features'", ":", "imageFeatures", ",", "'image_path'", ":", "imagePath", ",", "'flags'", ":", "flags", "}", "\n", "", "else", ":", "\n", "        ", "input_dict", "=", "{", "'points'", ":", "points", ",", "'point_indices'", ":", "point_indices", ",", "'image_path'", ":", "imagePath", ",", "'flags'", ":", "flags", "}", "\n", "pass", "\n", "", "gt_dict", "=", "{", "'corner'", ":", "corners", ",", "'icon'", ":", "iconSegmentation", ",", "'room'", ":", "roomSegmentation", ",", "'num_corners'", ":", "numCorners", "}", "\n", "return", "input_dict", ",", "gt_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.RecordReader.getDatasetTrain": [[200, 205], ["len", "tensorflow.data.TFRecordDataset().repeat().map().batch().prefetch", "tensorflow.data.Dataset.from_tensor_slices().interleave().batch().prefetch().shuffle", "tensorflow.data.TFRecordDataset().repeat().map().batch", "tensorflow.data.Dataset.from_tensor_slices().interleave().batch().prefetch", "len", "tensorflow.data.TFRecordDataset().repeat().map", "tensorflow.data.Dataset.from_tensor_slices().interleave().batch", "len", "functools.partial", "tensorflow.data.TFRecordDataset().repeat", "tensorflow.data.Dataset.from_tensor_slices().interleave", "tensorflow.data.TFRecordDataset", "tensorflow.data.Dataset.from_tensor_slices", "tensorflow.data.TFRecordDataset().repeat().map", "len", "functools.partial", "tensorflow.data.TFRecordDataset().repeat", "tensorflow.data.TFRecordDataset"], "function", ["None"], ["", "def", "getDatasetTrain", "(", "filenames", ",", "augmentation", ",", "readImageFeatures", ",", "batchSize", ")", ":", "\n", "    ", "if", "len", "(", "filenames", ")", "==", "1", ":", "\n", "        ", "return", "tf", ".", "data", ".", "TFRecordDataset", "(", "filenames", "[", "0", "]", ")", ".", "repeat", "(", ")", ".", "map", "(", "functools", ".", "partial", "(", "parse_fn", ",", "augmentation", "=", "augmentation", ",", "readImageFeatures", "=", "readImageFeatures", ")", ",", "num_parallel_calls", "=", "NUM_THREADS", ")", ".", "batch", "(", "batchSize", ")", ".", "prefetch", "(", "1", ")", "\n", "", "else", ":", "\n", "        ", "return", "tf", ".", "data", ".", "Dataset", ".", "from_tensor_slices", "(", "filenames", ")", ".", "interleave", "(", "lambda", "x", ":", "tf", ".", "data", ".", "TFRecordDataset", "(", "x", ")", ".", "repeat", "(", ")", ".", "map", "(", "functools", ".", "partial", "(", "parse_fn", ",", "augmentation", "=", "augmentation", ")", ",", "num_parallel_calls", "=", "NUM_THREADS", ")", ",", "cycle_length", "=", "len", "(", "filenames", ")", ",", "block_length", "=", "batchSize", ")", ".", "batch", "(", "batchSize", ")", ".", "prefetch", "(", "100", "/", "len", "(", "filenames", ")", ")", ".", "shuffle", "(", "100", "/", "len", "(", "filenames", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.RecordReader.getDatasetVal": [[207, 213], ["len", "tensorflow.data.TFRecordDataset().repeat().map().batch().prefetch", "tensorflow.data.Dataset.from_tensor_slices().interleave().apply().prefetch", "tensorflow.data.TFRecordDataset().repeat().map().batch", "tensorflow.data.Dataset.from_tensor_slices().interleave().apply", "tensorflow.contrib.data.batch_and_drop_remainder", "tensorflow.data.TFRecordDataset().repeat().map", "tensorflow.data.Dataset.from_tensor_slices().interleave", "functools.partial", "tensorflow.data.TFRecordDataset().repeat", "tensorflow.data.Dataset.from_tensor_slices", "tensorflow.data.TFRecordDataset().map", "len", "functools.partial", "tensorflow.data.TFRecordDataset", "tensorflow.data.TFRecordDataset"], "function", ["None"], ["", "", "def", "getDatasetVal", "(", "filenames", ",", "augmentation", ",", "readImageFeatures", ",", "batchSize", ")", ":", "\n", "#return tf.data.Dataset.from_tensor_slices(filenames).interleave(lambda x: tf.data.TFRecordDataset(x).map(functools.partial(parse_fn, augmentation=augmentation, readImageFeatures=readImageFeatures), num_parallel_calls=NUM_THREADS), cycle_length=len(filenames), block_length=batchSize).apply(tf.contrib.data.batch_and_drop_remainder(batchSize)).prefetch(1)", "\n", "    ", "if", "len", "(", "filenames", ")", "==", "1", ":", "\n", "        ", "return", "tf", ".", "data", ".", "TFRecordDataset", "(", "filenames", "[", "0", "]", ")", ".", "repeat", "(", ")", ".", "map", "(", "functools", ".", "partial", "(", "parse_fn", ",", "augmentation", "=", "augmentation", ",", "readImageFeatures", "=", "readImageFeatures", ")", ",", "num_parallel_calls", "=", "NUM_THREADS", ")", ".", "batch", "(", "batchSize", ")", ".", "prefetch", "(", "1", ")", "\n", "", "else", ":", "\n", "        ", "return", "tf", ".", "data", ".", "Dataset", ".", "from_tensor_slices", "(", "filenames", ")", ".", "interleave", "(", "lambda", "x", ":", "tf", ".", "data", ".", "TFRecordDataset", "(", "x", ")", ".", "map", "(", "functools", ".", "partial", "(", "parse_fn", ",", "augmentation", "=", "augmentation", ",", "readImageFeatures", "=", "readImageFeatures", ")", ",", "num_parallel_calls", "=", "NUM_THREADS", ")", ",", "cycle_length", "=", "len", "(", "filenames", ")", ",", "block_length", "=", "batchSize", ")", ".", "apply", "(", "tf", ".", "contrib", ".", "data", ".", "batch_and_drop_remainder", "(", "batchSize", ")", ")", ".", "prefetch", "(", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.augmentation_tf.warpIndices": [[7, 42], ["tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.gather_nd", "tensorflow.gather_nd", "tensorflow.gather_nd", "tensorflow.gather_nd", "tensorflow.gather_nd", "tensorflow.gather_nd", "tensorflow.gather_nd", "tensorflow.gather_nd", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.cast", "float", "tensorflow.cast", "float", "tensorflow.cast", "tensorflow.cast", "tensorflow.round", "tensorflow.round"], "function", ["None"], ["def", "warpIndices", "(", "xs", ",", "ys", ",", "gridStride", ",", "gridWidth", ",", "gridHeight", ",", "width", ",", "height", ",", "gridXsTarget", ",", "gridYsTarget", ")", ":", "\n", "    ", "numPoints", "=", "xs", ".", "shape", "[", "0", "]", "\n", "\n", "minXs", "=", "xs", "/", "gridStride", "\n", "minYs", "=", "ys", "/", "gridStride", "\n", "maxXs", "=", "xs", "/", "gridStride", "+", "1", "\n", "maxYs", "=", "ys", "/", "gridStride", "+", "1", "\n", "\n", "topLeft", "=", "tf", ".", "expand_dims", "(", "minYs", "*", "gridWidth", "+", "minXs", ",", "-", "1", ")", "\n", "topRight", "=", "tf", ".", "expand_dims", "(", "minYs", "*", "gridWidth", "+", "maxXs", ",", "-", "1", ")", "\n", "bottomLeft", "=", "tf", ".", "expand_dims", "(", "maxYs", "*", "gridWidth", "+", "minXs", ",", "-", "1", ")", "\n", "bottomRight", "=", "tf", ".", "expand_dims", "(", "maxYs", "*", "gridWidth", "+", "maxXs", ",", "-", "1", ")", "\n", "\n", "topLeftXsTarget", "=", "tf", ".", "gather_nd", "(", "gridXsTarget", ",", "topLeft", ")", "\n", "topLeftYsTarget", "=", "tf", ".", "gather_nd", "(", "gridYsTarget", ",", "topLeft", ")", "\n", "topRightXsTarget", "=", "tf", ".", "gather_nd", "(", "gridXsTarget", ",", "topRight", ")", "\n", "topRightYsTarget", "=", "tf", ".", "gather_nd", "(", "gridYsTarget", ",", "topRight", ")", "\n", "bottomLeftXsTarget", "=", "tf", ".", "gather_nd", "(", "gridXsTarget", ",", "bottomLeft", ")", "\n", "bottomLeftYsTarget", "=", "tf", ".", "gather_nd", "(", "gridYsTarget", ",", "bottomLeft", ")", "\n", "bottomRightXsTarget", "=", "tf", ".", "gather_nd", "(", "gridXsTarget", ",", "bottomRight", ")", "\n", "bottomRightYsTarget", "=", "tf", ".", "gather_nd", "(", "gridYsTarget", ",", "bottomRight", ")", "\n", "\n", "ratioX", "=", "tf", ".", "cast", "(", "xs", "-", "minXs", "*", "gridStride", ",", "tf", ".", "float32", ")", "/", "float", "(", "gridStride", ")", "\n", "ratioY", "=", "tf", ".", "cast", "(", "ys", "-", "minYs", "*", "gridStride", ",", "tf", ".", "float32", ")", "/", "float", "(", "gridStride", ")", "\n", "topLeftRatio", "=", "(", "1", "-", "ratioX", ")", "*", "(", "1", "-", "ratioY", ")", "\n", "topRightRatio", "=", "ratioX", "*", "(", "1", "-", "ratioY", ")", "\n", "bottomLeftRatio", "=", "(", "1", "-", "ratioX", ")", "*", "ratioY", "\n", "bottomRightRatio", "=", "ratioX", "*", "ratioY", "\n", "\n", "xsTarget", "=", "topLeftXsTarget", "*", "topLeftRatio", "+", "topRightXsTarget", "*", "topRightRatio", "+", "bottomLeftXsTarget", "*", "bottomLeftRatio", "+", "bottomRightXsTarget", "*", "bottomRightRatio", "\n", "ysTarget", "=", "topLeftYsTarget", "*", "topLeftRatio", "+", "topRightYsTarget", "*", "topRightRatio", "+", "bottomLeftYsTarget", "*", "bottomLeftRatio", "+", "bottomRightYsTarget", "*", "bottomRightRatio", "\n", "\n", "xsTarget", "=", "tf", ".", "clip_by_value", "(", "tf", ".", "cast", "(", "tf", ".", "round", "(", "xsTarget", ")", ",", "tf", ".", "int32", ")", ",", "0", ",", "width", "-", "1", ")", "\n", "ysTarget", "=", "tf", ".", "clip_by_value", "(", "tf", ".", "cast", "(", "tf", ".", "round", "(", "ysTarget", ")", ",", "tf", ".", "int32", ")", ",", "0", ",", "height", "-", "1", ")", "\n", "return", "xsTarget", ",", "ysTarget", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.augmentation_tf.scaleIndices": [[43, 49], ["tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.cast", "tensorflow.cast", "tensorflow.round", "tensorflow.round", "tensorflow.cast", "tensorflow.cast"], "function", ["None"], ["", "def", "scaleIndices", "(", "xs", ",", "ys", ",", "min_x", ",", "min_y", ",", "max_x", ",", "max_y", ",", "width", ",", "height", ")", ":", "\n", "    ", "xsTarget", "=", "(", "tf", ".", "cast", "(", "xs", ",", "tf", ".", "float32", ")", "-", "min_x", ")", "/", "(", "max_x", "-", "min_x", "+", "1", ")", "*", "width", "\n", "ysTarget", "=", "(", "tf", ".", "cast", "(", "ys", ",", "tf", ".", "float32", ")", "-", "min_y", ")", "/", "(", "max_y", "-", "min_y", "+", "1", ")", "*", "height", "\n", "xsTarget", "=", "tf", ".", "clip_by_value", "(", "tf", ".", "cast", "(", "tf", ".", "round", "(", "xsTarget", ")", ",", "tf", ".", "int32", ")", ",", "0", ",", "width", "-", "1", ")", "\n", "ysTarget", "=", "tf", ".", "clip_by_value", "(", "tf", ".", "cast", "(", "tf", ".", "round", "(", "ysTarget", ")", ",", "tf", ".", "int32", ")", ",", "0", ",", "height", "-", "1", ")", "\n", "return", "xsTarget", ",", "ysTarget", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.augmentation_tf.getCoarseIndicesMaps": [[51, 64], ["xrange", "tensorflow.stack", "pow", "tf.stack.append", "tf.stack.append"], "function", ["None"], ["", "def", "getCoarseIndicesMaps", "(", "indicesMap", ",", "width", "=", "256", ",", "height", "=", "256", ",", "batchIndex", "=", "0", ")", ":", "\n", "    ", "indicesMaps", "=", "[", "]", "\n", "for", "strideIndex", "in", "xrange", "(", "6", ")", ":", "\n", "        ", "stride", "=", "pow", "(", "2", ",", "strideIndex", ")", "\n", "if", "strideIndex", "==", "0", ":", "\n", "            ", "indicesMaps", ".", "append", "(", "indicesMap", "+", "batchIndex", "*", "width", "*", "height", ")", "\n", "", "else", ":", "\n", "            ", "indicesMaps", ".", "append", "(", "indicesMap", "/", "(", "width", "*", "stride", ")", "*", "(", "width", "/", "stride", ")", "+", "indicesMap", "%", "width", "/", "stride", "+", "batchIndex", "*", "width", "/", "stride", "*", "height", "/", "stride", ")", "\n", "pass", "\n", "#print(indicesMaps)", "\n", "", "continue", "\n", "", "indicesMaps", "=", "tf", ".", "stack", "(", "indicesMaps", ",", "axis", "=", "0", ")", "\n", "return", "indicesMaps", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.augmentation_tf.getCoarseIndicesMapsBatch": [[66, 79], ["xrange", "tensorflow.stack", "pow", "tf.stack.append", "tf.stack.append"], "function", ["None"], ["", "def", "getCoarseIndicesMapsBatch", "(", "indicesMap", ",", "width", "=", "256", ",", "height", "=", "256", ")", ":", "\n", "    ", "indicesMaps", "=", "[", "]", "\n", "for", "strideIndex", "in", "xrange", "(", "6", ")", ":", "\n", "        ", "stride", "=", "pow", "(", "2", ",", "strideIndex", ")", "\n", "if", "strideIndex", "==", "0", ":", "\n", "            ", "indicesMaps", ".", "append", "(", "indicesMap", ")", "\n", "", "else", ":", "\n", "            ", "indicesMaps", ".", "append", "(", "indicesMap", "/", "(", "width", "*", "stride", ")", "*", "(", "width", "/", "stride", ")", "+", "indicesMap", "%", "width", "/", "stride", ")", "\n", "pass", "\n", "#print(indicesMaps)", "\n", "", "continue", "\n", "", "indicesMaps", "=", "tf", ".", "stack", "(", "indicesMaps", ",", "axis", "=", "0", ")", "\n", "return", "indicesMaps", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.augmentation_tf.augmentWarping": [[81, 101], ["int", "int", "tensorflow.reshape", "tensorflow.reshape", "augmentation_tf.warpIndices", "augmentation_tf.warpIndices", "tensorflow.stack", "tensorflow.tile", "tensorflow.tile", "tensorflow.cast", "tensorflow.random_normal", "tensorflow.cast", "tensorflow.random_normal", "tensorflow.clip_by_value", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.clip_by_value", "tensorflow.range", "tensorflow.range"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.augmentation_tf.warpIndices", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.augmentation_tf.warpIndices"], ["", "def", "augmentWarping", "(", "pointcloudIndices", ",", "corners", ",", "heatmaps", ",", "gridStride", "=", "16", ",", "randomScale", "=", "4", ")", ":", "\n", "    ", "width", "=", "WIDTH", "\n", "height", "=", "HEIGHT", "\n", "gridWidth", "=", "int", "(", "width", "/", "gridStride", "+", "1", ")", "\n", "gridHeight", "=", "int", "(", "height", "/", "gridStride", "+", "1", ")", "\n", "\n", "gridXs", "=", "tf", ".", "reshape", "(", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "tf", ".", "range", "(", "gridWidth", ")", "*", "gridStride", ",", "0", ")", ",", "[", "gridHeight", ",", "1", "]", ")", ",", "[", "-", "1", "]", ")", "\n", "gridYs", "=", "tf", ".", "reshape", "(", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "tf", ".", "range", "(", "gridHeight", ")", "*", "gridStride", ",", "-", "1", ")", ",", "[", "1", ",", "gridWidth", "]", ")", ",", "[", "-", "1", "]", ")", "\n", "\n", "gridXsTarget", "=", "tf", ".", "cast", "(", "gridXs", ",", "tf", ".", "float32", ")", "+", "tf", ".", "random_normal", "(", "stddev", "=", "randomScale", ",", "shape", "=", "[", "gridHeight", "*", "gridWidth", "]", ")", "\n", "gridYsTarget", "=", "tf", ".", "cast", "(", "gridYs", ",", "tf", ".", "float32", ")", "+", "tf", ".", "random_normal", "(", "stddev", "=", "randomScale", ",", "shape", "=", "[", "gridHeight", "*", "gridWidth", "]", ")", "\n", "\n", "xsTarget", ",", "ysTarget", "=", "warpIndices", "(", "pointcloudIndices", "%", "width", ",", "pointcloudIndices", "/", "width", ",", "gridStride", ",", "gridWidth", ",", "gridHeight", ",", "width", ",", "height", ",", "gridXsTarget", ",", "gridYsTarget", ")", "\n", "\n", "newPointcloudIndices", "=", "tf", ".", "clip_by_value", "(", "ysTarget", ",", "0", ",", "height", "-", "1", ")", "*", "width", "+", "tf", ".", "clip_by_value", "(", "xsTarget", ",", "0", ",", "width", "-", "1", ")", "\n", "\n", "xsTarget", ",", "ysTarget", "=", "warpIndices", "(", "corners", "[", ":", ",", "0", "]", ",", "corners", "[", ":", ",", "1", "]", ",", "gridStride", ",", "gridWidth", ",", "gridHeight", ",", "width", ",", "height", ",", "gridXsTarget", ",", "gridYsTarget", ")", "\n", "newCorners", "=", "tf", ".", "stack", "(", "[", "xsTarget", ",", "ysTarget", ",", "corners", "[", ":", ",", "2", "]", "]", ",", "axis", "=", "1", ")", "\n", "\n", "return", "newPointcloudIndices", ",", "newCorners", ",", "heatmaps", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.augmentation_tf.augmentScaling": [[102, 135], ["tensorflow.constant", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.image.resize_nearest_neighbor", "tensorflow.image.resize_image_with_crop_or_pad", "tensorflow.cast", "tensorflow.cast", "tensorflow.stack", "tensorflow.logical_and", "tensorflow.boolean_mask", "enumerate", "tensorflow.random_uniform", "tensorflow.cast", "tensorflow.cast", "tensorflow.round", "tensorflow.round", "tensorflow.logical_and", "tensorflow.logical_and", "tensorflow.round", "tensorflow.round", "tensorflow.cast", "tensorflow.greater_equal", "tensorflow.greater_equal", "tensorflow.less", "tensorflow.less", "zip", "tensorflow.round", "tensorflow.image.resize_image_with_crop_or_pad", "tensorflow.image.resize_nearest_neighbor", "tensorflow.cast", "tensorflow.cast", "tensorflow.expand_dims", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.round", "tensorflow.constant"], "function", ["None"], ["", "def", "augmentScaling", "(", "pointcloud", ",", "pointcloudIndices", ",", "corners", ",", "heatmaps", ",", "imageFeatures", ")", ":", "\n", "    ", "width", "=", "WIDTH", "\n", "height", "=", "HEIGHT", "\n", "xs", "=", "pointcloudIndices", "%", "width", "\n", "ys", "=", "pointcloudIndices", "/", "width", "\n", "\n", "imageSize", "=", "tf", ".", "constant", "(", "(", "height", ",", "width", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "#randomScale = pow(2.0, tf.random.uniform([1]) - 1)", "\n", "randomScale", "=", "tf", ".", "random_uniform", "(", "shape", "=", "[", "1", "]", ",", "minval", "=", "0.5", ",", "maxval", "=", "1.5", ")", "[", "0", "]", "\n", "xsTarget", "=", "tf", ".", "clip_by_value", "(", "tf", ".", "cast", "(", "tf", ".", "round", "(", "(", "tf", ".", "cast", "(", "xs", ",", "tf", ".", "float32", ")", "-", "width", "/", "2", ")", "*", "randomScale", "+", "width", "/", "2", ")", ",", "tf", ".", "int32", ")", ",", "0", ",", "width", "-", "1", ")", "\n", "ysTarget", "=", "tf", ".", "clip_by_value", "(", "tf", ".", "cast", "(", "tf", ".", "round", "(", "(", "tf", ".", "cast", "(", "ys", ",", "tf", ".", "float32", ")", "-", "height", "/", "2", ")", "*", "randomScale", "+", "height", "/", "2", ")", ",", "tf", ".", "int32", ")", ",", "0", ",", "height", "-", "1", ")", "\n", "\n", "\n", "newPointcloudIndices", "=", "ysTarget", "*", "width", "+", "xsTarget", "\n", "\n", "pointcloud", "=", "(", "pointcloud", "-", "0.5", ")", "*", "randomScale", "+", "0.5", "\n", "\n", "newHeatmaps", "=", "tf", ".", "image", ".", "resize_nearest_neighbor", "(", "heatmaps", ",", "size", "=", "tf", ".", "cast", "(", "tf", ".", "round", "(", "imageSize", "*", "randomScale", ")", ",", "tf", ".", "int32", ")", ")", "\n", "newHeatmaps", "=", "tf", ".", "image", ".", "resize_image_with_crop_or_pad", "(", "newHeatmaps", ",", "height", ",", "width", ")", "\n", "\n", "xsTarget", "=", "tf", ".", "cast", "(", "tf", ".", "round", "(", "(", "tf", ".", "cast", "(", "corners", "[", ":", ",", "0", "]", ",", "tf", ".", "float32", ")", "-", "width", "/", "2", ")", "*", "randomScale", "+", "width", "/", "2", ")", ",", "tf", ".", "int32", ")", "\n", "ysTarget", "=", "tf", ".", "cast", "(", "tf", ".", "round", "(", "(", "tf", ".", "cast", "(", "corners", "[", ":", ",", "1", "]", ",", "tf", ".", "float32", ")", "-", "height", "/", "2", ")", "*", "randomScale", "+", "height", "/", "2", ")", ",", "tf", ".", "int32", ")", "\n", "newCorners", "=", "tf", ".", "stack", "(", "[", "xsTarget", ",", "ysTarget", ",", "corners", "[", ":", ",", "2", "]", "]", ",", "axis", "=", "1", ")", "\n", "validMask", "=", "tf", ".", "logical_and", "(", "tf", ".", "logical_and", "(", "tf", ".", "greater_equal", "(", "newCorners", "[", ":", ",", "0", "]", ",", "0", ")", ",", "tf", ".", "greater_equal", "(", "newCorners", "[", ":", ",", "1", "]", ",", "0", ")", ")", ",", "tf", ".", "logical_and", "(", "tf", ".", "less", "(", "newCorners", "[", ":", ",", "0", "]", ",", "WIDTH", ")", ",", "tf", ".", "less", "(", "newCorners", "[", ":", ",", "1", "]", ",", "HEIGHT", ")", ")", ")", "\n", "newCorners", "=", "tf", ".", "boolean_mask", "(", "newCorners", ",", "validMask", ")", "\n", "\n", "for", "index", ",", "(", "featureSize", ",", "numChannels", ")", "in", "enumerate", "(", "zip", "(", "SIZES", ",", "NUM_CHANNELS", ")", "[", "1", ":", "]", ")", ":", "\n", "        ", "if", "index", "in", "imageFeatures", ":", "\n", "            ", "imageFeatures", "[", "index", "]", "=", "tf", ".", "image", ".", "resize_image_with_crop_or_pad", "(", "tf", ".", "image", ".", "resize_nearest_neighbor", "(", "tf", ".", "expand_dims", "(", "imageFeatures", "[", "index", "]", ",", "0", ")", ",", "size", "=", "tf", ".", "cast", "(", "tf", ".", "round", "(", "tf", ".", "constant", "(", "(", "featureSize", ",", "featureSize", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "*", "randomScale", ")", ",", "tf", ".", "int32", ")", ")", ",", "featureSize", ",", "featureSize", ")", "[", "0", "]", "\n", "pass", "\n", "", "continue", "\n", "\n", "", "return", "pointcloud", ",", "newPointcloudIndices", ",", "newCorners", ",", "newHeatmaps", ",", "imageFeatures", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.augmentation_tf.augmentFlipping": [[137, 173], ["tensorflow.cast", "tensorflow.cond", "tensorflow.cond", "tensorflow.cond", "tensorflow.cond", "tensorflow.cond", "tensorflow.cond", "tensorflow.cond", "tensorflow.cond", "enumerate", "tensorflow.constant", "tensorflow.constant", "tensorflow.equal", "tensorflow.equal", "tensorflow.equal", "tensorflow.equal", "tensorflow.random_uniform", "tensorflow.concat", "tensorflow.stack", "tensorflow.concat", "tensorflow.stack", "zip", "tensorflow.cond", "tensorflow.cond", "tensorflow.equal", "tensorflow.gather_nd", "tensorflow.gather_nd"], "function", ["None"], ["", "def", "augmentFlipping", "(", "pointcloud", ",", "pointcloudIndices", ",", "corners", ",", "heatmaps", ",", "imageFeatures", ")", ":", "\n", "    ", "width", "=", "WIDTH", "\n", "height", "=", "HEIGHT", "\n", "\n", "orientation", "=", "tf", ".", "cast", "(", "tf", ".", "random_uniform", "(", "shape", "=", "[", "1", "]", ",", "maxval", "=", "4", ")", "[", "0", "]", ",", "tf", ".", "int32", ")", "\n", "\n", "#if orientation == 0:", "\n", "#return pointcloud, pointcloudIndices, newCorners, heatmaps", "\n", "\n", "xsTarget", "=", "pointcloudIndices", "%", "width", "\n", "ysTarget", "=", "pointcloudIndices", "/", "width", "\n", "\n", "reverseChannelsY", "=", "tf", ".", "constant", "(", "[", "-", "1", ",", "2", ",", "1", ",", "0", ",", "3", ",", "7", ",", "6", ",", "5", ",", "4", ",", "10", ",", "9", ",", "8", ",", "11", ",", "12", ",", "15", ",", "14", ",", "13", ",", "16", ",", "20", ",", "19", ",", "18", ",", "17", "]", ",", "dtype", "=", "tf", ".", "int32", ")", "+", "1", "\n", "reverseChannelsX", "=", "tf", ".", "constant", "(", "[", "-", "1", ",", "0", ",", "3", ",", "2", ",", "1", ",", "5", ",", "4", ",", "7", ",", "6", ",", "8", ",", "11", ",", "10", ",", "9", ",", "12", ",", "13", ",", "16", ",", "15", ",", "14", ",", "18", ",", "17", ",", "20", ",", "19", "]", ",", "dtype", "=", "tf", ".", "int32", ")", "+", "1", "\n", "\n", "xsTarget", "=", "tf", ".", "cond", "(", "orientation", ">=", "2", ",", "lambda", ":", "width", "-", "1", "-", "xsTarget", ",", "lambda", ":", "xsTarget", ")", "\n", "pointcloud", "=", "tf", ".", "cond", "(", "orientation", ">=", "2", ",", "lambda", ":", "tf", ".", "concat", "(", "[", "1", "-", "pointcloud", "[", ":", ",", "0", ":", "1", "]", ",", "pointcloud", "[", ":", ",", "1", ":", "]", "]", ",", "axis", "=", "1", ")", ",", "lambda", ":", "pointcloud", ")", "\n", "heatmaps", "=", "tf", ".", "cond", "(", "orientation", ">=", "2", ",", "lambda", ":", "heatmaps", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ",", "lambda", ":", "heatmaps", ")", "\n", "corners", "=", "tf", ".", "cond", "(", "orientation", ">=", "2", ",", "lambda", ":", "tf", ".", "stack", "(", "[", "width", "-", "1", "-", "corners", "[", ":", ",", "0", "]", ",", "corners", "[", ":", ",", "1", "]", ",", "tf", ".", "gather_nd", "(", "reverseChannelsX", ",", "corners", "[", ":", ",", "2", ":", "3", "]", ")", "]", ",", "axis", "=", "1", ")", ",", "lambda", ":", "corners", ")", "\n", "\n", "ysTarget", "=", "tf", ".", "cond", "(", "tf", ".", "equal", "(", "orientation", "%", "2", ",", "1", ")", ",", "lambda", ":", "height", "-", "1", "-", "ysTarget", ",", "lambda", ":", "ysTarget", ")", "\n", "pointcloud", "=", "tf", ".", "cond", "(", "tf", ".", "equal", "(", "orientation", "%", "2", ",", "1", ")", ",", "lambda", ":", "tf", ".", "concat", "(", "[", "pointcloud", "[", ":", ",", ":", "1", "]", ",", "1", "-", "pointcloud", "[", ":", ",", "1", ":", "2", "]", ",", "pointcloud", "[", ":", ",", "2", ":", "]", "]", ",", "axis", "=", "1", ")", ",", "lambda", ":", "pointcloud", ")", "\n", "heatmaps", "=", "tf", ".", "cond", "(", "tf", ".", "equal", "(", "orientation", "%", "2", ",", "1", ")", ",", "lambda", ":", "heatmaps", "[", ":", ",", ":", ":", "-", "1", "]", ",", "lambda", ":", "heatmaps", ")", "\n", "corners", "=", "tf", ".", "cond", "(", "tf", ".", "equal", "(", "orientation", "%", "2", ",", "1", ")", ",", "lambda", ":", "tf", ".", "stack", "(", "[", "corners", "[", ":", ",", "0", "]", ",", "height", "-", "1", "-", "corners", "[", ":", ",", "1", "]", ",", "tf", ".", "gather_nd", "(", "reverseChannelsY", ",", "corners", "[", ":", ",", "2", ":", "3", "]", ")", "]", ",", "axis", "=", "1", ")", ",", "lambda", ":", "corners", ")", "\n", "\n", "\n", "for", "index", ",", "(", "size", ",", "numChannels", ")", "in", "enumerate", "(", "zip", "(", "SIZES", ",", "NUM_CHANNELS", ")", "[", "1", ":", "]", ")", ":", "\n", "        ", "if", "index", "in", "imageFeatures", ":", "\n", "            ", "imageFeatures", "[", "index", "]", "=", "tf", ".", "cond", "(", "orientation", ">=", "2", ",", "lambda", ":", "imageFeatures", "[", "index", "]", "[", ":", ",", ":", ":", "-", "1", "]", ",", "lambda", ":", "imageFeatures", "[", "index", "]", ")", "\n", "imageFeatures", "[", "index", "]", "=", "tf", ".", "cond", "(", "tf", ".", "equal", "(", "orientation", "%", "2", ",", "1", ")", ",", "lambda", ":", "imageFeatures", "[", "index", "]", "[", ":", ":", "-", "1", "]", ",", "lambda", ":", "imageFeatures", "[", "index", "]", ")", "\n", "pass", "\n", "", "continue", "\n", "\n", "", "newPointcloudIndices", "=", "ysTarget", "*", "width", "+", "xsTarget", "\n", "\n", "return", "pointcloud", ",", "newPointcloudIndices", ",", "corners", ",", "heatmaps", ",", "imageFeatures", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.augmentation_tf.augmentDropping": [[175, 196], ["tensorflow.range", "int", "tensorflow.random.choice", "tensorflow.ones", "tensorflow.random.choice", "tensorflow.random.random"], "function", ["None"], ["", "def", "augmentDropping", "(", "pointcloud", ",", "pointcloud_indices", ",", "changeIndices", ")", ":", "\n", "    ", "p", "=", "tf", ".", "random", ".", "random", "(", ")", "*", "0.5", "+", "0.5", "\n", "indices", "=", "tf", ".", "range", "(", "pointcloud", ".", "shape", "[", "0", "]", ",", "dtype", "=", "'int32'", ")", "\n", "out_shape", "=", "int", "(", "pointcloud", ".", "shape", "[", "0", "]", "*", "p", ")", "\n", "chosen_indices", "=", "tf", ".", "random", ".", "choice", "(", "indices", ",", "(", "out_shape", ",", ")", ",", "replace", "=", "True", ")", "\n", "rest_mask", "=", "tf", ".", "ones", "(", "indices", ".", "shape", ",", "dtype", "=", "tf", ".", "bool", ")", "\n", "rest_mask", "[", "chosen_indices", "]", "=", "0", "\n", "rest_indices", "=", "indices", "[", "rest_mask", "]", "\n", "#rest_indices = tf.array(list(set(indices) - set(chosen_indices)))", "\n", "#rest = pointcloud[rest_indices]", "\n", "\n", "#rest_chosen_indices = tf.random.choice(rest_indices, (pointcloud.shape[0] - out_shape, ), replace=True)", "\n", "#rest_chosen = rest[rest_chosen_indices]", "\n", "#aug_pointcloud = pointcloud[chosen_indices] = rest_chosen", "\n", "\n", "rest_indices", "=", "tf", ".", "random", ".", "choice", "(", "rest_indices", ",", "chosen_indices", ".", "shape", "[", "0", "]", ",", "replace", "=", "True", ")", "\n", "pointcloud", "[", "chosen_indices", "]", "=", "pointcloud", "[", "rest_indices", "]", "\n", "if", "changeIndices", ":", "\n", "        ", "pointcloud_indices", "[", "chosen_indices", "]", "=", "pointcloud_indices", "[", "rest_indices", "]", "\n", "pass", "\n", "", "return", "pointcloud", ",", "pointcloud_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.augmentation_tf.augment": [[199, 277], ["tensorflow.zeros", "xrange", "tensorflow.concatenate", "augmentation_tf.getCoarseIndicesMaps", "enumerate", "tensorflow.array", "tensorflow.range", "tensorflow.random.shuffle", "tensorflow.concatenate", "xrange", "augmentation_tf.augmentWarping", "augmentation_tf.augmentScaling", "augmentation_tf.augmentFlipping", "augmentation_tf.augmentDropping", "augmentation_tf.augmentDropping", "newHeatmapBatches[].append", "tensorflow.ones", "len"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.augmentation_tf.getCoarseIndicesMaps", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.augmentation_tf.augmentWarping", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.augmentation_tf.augmentScaling", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.augmentation_tf.augmentFlipping", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.augmentation_tf.augmentDropping", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.augmentation_tf.augmentDropping"], ["", "def", "augment", "(", "pointcloud_inp", ",", "pointcloud_indices_0_inp", ",", "heatmapBatches", ",", "augmentation", ",", "numPoints", "=", "50000", ",", "numInputChannels", "=", "7", ")", ":", "\n", "    ", "pointcloud_indices_inp", "=", "tf", ".", "zeros", "(", "(", "FETCH_BATCH_SIZE", ",", "6", ",", "NUM_POINTS", ")", ",", "dtype", "=", "'int32'", ")", "\n", "newHeatmapBatches", "=", "[", "[", "]", "for", "heatmapIndex", "in", "xrange", "(", "len", "(", "heatmapBatches", ")", ")", "]", "\n", "\n", "for", "imageIndex", "in", "xrange", "(", "pointcloud_inp", ".", "shape", "[", "0", "]", ")", ":", "\n", "# pointcloud = pointcloud_inp[imageIndex]", "\n", "# pointcloud_indices_0 = pointcloud_indices_0_inp[imageIndex]", "\n", "# corner = corner_gt[imageIndex]", "\n", "# icon = icon_gt[imageIndex]", "\n", "# room = room_gt[imageIndex]", "\n", "# feature = feature_inp[imageIndex]", "\n", "# if 'w' in augmentation:", "\n", "#     pointcloud_indices_0, [corner, icon, room, feature] = augmentWarping(pointcloud_indices_0, [corner, icon, room, feature], gridStride=32., randomScale=4)", "\n", "#     pass", "\n", "# if 's' in augmentation:", "\n", "#     pointcloud_indices_0, [corner, icon, room, feature] = augmentScaling(pointcloud_indices_0, [corner, icon, room, feature], randomScale=0)", "\n", "#     pass", "\n", "# if 'f' in augmentation:", "\n", "#     pointcloud_indices_0, [corner, icon, room, feature] = augmentFlipping(pointcloud_indices_0, [corner, icon, room, feature])", "\n", "#     pass", "\n", "# if 'd' in augmentation:", "\n", "#     pointcloud, pointcloud_indices_0 = augmentDropping(pointcloud, pointcloud_indices_0, changeIndices=True)", "\n", "#     pass", "\n", "# if 'p' in augmentation:", "\n", "#     pointcloud, pointcloud_indices_0 = augmentDropping(pointcloud, pointcloud_indices_0, changeIndices=False)", "\n", "#     pass", "\n", "\n", "# pointcloud_inp[imageIndex] = pointcloud", "\n", "# pointcloud_indices_inp[imageIndex] = getCoarseIndicesMaps(pointcloud_indices_0, WIDTH, HEIGHT, 0)", "\n", "# corner_gt[imageIndex] = corner", "\n", "# icon_gt[imageIndex] = icon", "\n", "# room_gt[imageIndex] = room", "\n", "# feature_inp[imageIndex] = feature", "\n", "\n", "\n", "        ", "newHeatmaps", "=", "[", "heatmapBatch", "[", "imageIndex", "]", "for", "heatmapBatch", "in", "heatmapBatches", "]", "\n", "if", "'w'", "in", "augmentation", ":", "\n", "            ", "pointcloud_indices_0_inp", "[", "imageIndex", "]", ",", "newHeatmaps", "=", "augmentWarping", "(", "pointcloud_indices_0_inp", "[", "imageIndex", "]", ",", "newHeatmaps", ",", "gridStride", "=", "32", ",", "randomScale", "=", "4", ")", "\n", "pass", "\n", "", "if", "'s'", "in", "augmentation", ":", "\n", "            ", "pointcloud_inp", "[", "imageIndex", "]", ",", "pointcloud_indices_0_inp", "[", "imageIndex", "]", ",", "newHeatmaps", "=", "augmentScaling", "(", "pointcloud_inp", "[", "imageIndex", "]", ",", "pointcloud_indices_0_inp", "[", "imageIndex", "]", ",", "newHeatmaps", ")", "\n", "pass", "\n", "", "if", "'f'", "in", "augmentation", ":", "\n", "            ", "pointcloud_inp", "[", "imageIndex", "]", ",", "pointcloud_indices_0_inp", "[", "imageIndex", "]", ",", "newHeatmaps", "=", "augmentFlipping", "(", "pointcloud_inp", "[", "imageIndex", "]", ",", "pointcloud_indices_0_inp", "[", "imageIndex", "]", ",", "newHeatmaps", ")", "\n", "pass", "\n", "", "if", "'d'", "in", "augmentation", ":", "\n", "            ", "pointcloud_inp", "[", "imageIndex", "]", ",", "pointcloud_indices_0_inp", "[", "imageIndex", "]", "=", "augmentDropping", "(", "pointcloud_inp", "[", "imageIndex", "]", ",", "pointcloud_indices_0_inp", "[", "imageIndex", "]", ",", "changeIndices", "=", "True", ")", "\n", "pass", "\n", "", "if", "'p'", "in", "augmentation", ":", "\n", "            ", "pointcloud_inp", "[", "imageIndex", "]", ",", "pointcloud_indices_0_inp", "[", "imageIndex", "]", "=", "augmentDropping", "(", "pointcloud_inp", "[", "imageIndex", "]", ",", "pointcloud_indices_0_inp", "[", "imageIndex", "]", ",", "changeIndices", "=", "False", ")", "\n", "pass", "\n", "\n", "#print(pointcloud_indices_0_inp[imageIndex].shape, pointcloud_indices_inp[imageIndex].shape)", "\n", "", "pointcloud_indices_inp", "[", "imageIndex", "]", "=", "getCoarseIndicesMaps", "(", "pointcloud_indices_0_inp", "[", "imageIndex", "]", ",", "WIDTH", ",", "HEIGHT", ",", "0", ")", "\n", "for", "heatmapIndex", ",", "newHeatmap", "in", "enumerate", "(", "newHeatmaps", ")", ":", "\n", "            ", "newHeatmapBatches", "[", "heatmapIndex", "]", ".", "append", "(", "newHeatmap", ")", "\n", "continue", "\n", "", "continue", "\n", "", "newHeatmapBatches", "=", "[", "tf", ".", "array", "(", "newHeatmapBatch", ")", "for", "newHeatmapBatch", "in", "newHeatmapBatches", "]", "\n", "pointcloud_inp", "=", "tf", ".", "concatenate", "(", "[", "pointcloud_inp", ",", "tf", ".", "ones", "(", "(", "FETCH_BATCH_SIZE", ",", "NUM_POINTS", ",", "1", ")", ")", "]", ",", "axis", "=", "2", ")", "\n", "#print(pointcloud_itf.shape)", "\n", "#writePointCloud('test/pointcloud.ply', pointcloud_inp[0, :, :6])", "\n", "#exit(1)", "\n", "\n", "if", "numPoints", "<", "pointcloud_itf", ".", "shape", "[", "1", "]", ":", "\n", "        ", "sampledInds", "=", "tf", ".", "range", "(", "pointcloud_itf", ".", "shape", "[", "1", "]", ")", "\n", "tf", ".", "random", ".", "shuffle", "(", "sampledInds", ")", "\n", "sampledInds", "=", "sampledInds", "[", ":", "numPoints", "]", "\n", "pointcloud_inp", "=", "pointcloud_inp", "[", ":", ",", "sampledInds", "]", "\n", "pointcloud_indices_inp", "=", "pointcloud_indices_inp", "[", ":", ",", ":", ",", "sampledInds", "]", "\n", "pass", "\n", "\n", "", "if", "numInputChannels", "==", "4", ":", "\n", "        ", "pointcloud_inp", "=", "tf", ".", "concatenate", "(", "[", "pointcloud_inp", "[", ":", ",", ":", ",", ":", "3", "]", ",", "pointcloud_inp", "[", ":", ",", ":", ",", "6", ":", "]", "]", ",", "axis", "=", "2", ")", "\n", "pass", "\n", "\n", "\n", "", "return", "pointcloud_inp", ",", "pointcloud_indices_inp", ",", "newHeatmapBatches", "\n", "", ""]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.ColorPalette.__init__": [[9, 59], ["numpy.random.seed", "numpy.array", "numpy.maximum", "numpy.concatenate", "numpy.random.randint"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "numColors", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "1", ")", "\n", "#self.colorMap = np.random.randint(255, size = (numColors, 3), dtype=np.uint8)", "\n", "#self.colorMap[0] = 0", "\n", "#self.colorMap[0] = np.maximum(self.colorMap[0], 1)", "\n", "\n", "# [128, 128, 128],", "\n", "# [0, 0, 255],", "\n", "# [64, 128, 192],", "\n", "# [0, 128, 0],", "\n", "# [192, 0, 0],", "\n", "# [128, 0, 128],", "\n", "# [128, 128, 192],", "\n", "# [128, 192, 192],", "\n", "# [0, 128, 0],", "\n", "# [0, 0, 128],", "\n", "# [128, 128, 0],", "\n", "# [0, 128, 128]", "\n", "\n", "self", ".", "colorMap", "=", "np", ".", "array", "(", "[", "[", "255", ",", "0", ",", "0", "]", ",", "\n", "[", "50", ",", "150", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "255", "]", ",", "\n", "[", "80", ",", "128", ",", "255", "]", ",", "\n", "[", "255", ",", "230", ",", "180", "]", ",", "\n", "[", "255", ",", "0", ",", "255", "]", ",", "\n", "[", "0", ",", "255", ",", "255", "]", ",", "\n", "[", "255", ",", "255", ",", "0", "]", ",", "\n", "[", "0", ",", "255", ",", "0", "]", ",", "\n", "[", "200", ",", "255", ",", "255", "]", ",", "\n", "[", "255", ",", "200", ",", "255", "]", ",", "\n", "[", "100", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "100", ",", "0", "]", ",", "\n", "[", "128", ",", "128", ",", "80", "]", ",", "\n", "[", "0", ",", "50", ",", "128", "]", ",", "\n", "[", "0", ",", "100", ",", "100", "]", ",", "\n", "[", "0", ",", "255", ",", "128", "]", ",", "\n", "[", "0", ",", "128", ",", "255", "]", ",", "\n", "[", "255", ",", "0", ",", "128", "]", ",", "\n", "[", "128", ",", "0", ",", "255", "]", ",", "\n", "[", "255", ",", "128", ",", "0", "]", ",", "\n", "[", "128", ",", "255", ",", "0", "]", ",", "\n", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "self", ".", "colorMap", "=", "np", ".", "maximum", "(", "self", ".", "colorMap", ",", "1", ")", "\n", "\n", "if", "numColors", ">", "self", ".", "colorMap", ".", "shape", "[", "0", "]", ":", "\n", "            ", "self", ".", "colorMap", "=", "np", ".", "concatenate", "(", "[", "self", ".", "colorMap", ",", "np", ".", "random", ".", "randint", "(", "255", ",", "size", "=", "(", "numColors", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "]", ",", "axis", "=", "0", ")", "\n", "pass", "\n", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.ColorPalette.getColorMap": [[60, 62], ["None"], "methods", ["None"], ["", "def", "getColorMap", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "colorMap", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.ColorPalette.getColor": [[63, 69], ["numpy.random.randint"], "methods", ["None"], ["", "def", "getColor", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "index", ">=", "colorMap", ".", "shape", "[", "0", "]", ":", "\n", "            ", "return", "np", ".", "random", ".", "randint", "(", "255", ",", "size", "=", "(", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "colorMap", "[", "index", "]", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.sigmoid": [[70, 72], ["numpy.exp"], "function", ["None"], ["", "", "", "def", "sigmoid", "(", "values", ")", ":", "\n", "    ", "return", "1", "/", "(", "1", "+", "np", ".", "exp", "(", "-", "values", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.softmax": [[73, 76], ["numpy.exp", "numpy.sum"], "function", ["None"], ["", "def", "softmax", "(", "values", ")", ":", "\n", "    ", "values_exp", "=", "np", ".", "exp", "(", "values", ")", "\n", "return", "values_exp", "/", "np", ".", "sum", "(", "values_exp", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.drawDensityImage": [[79, 88], ["numpy.minimum", "numpy.round().astype", "numpy.stack", "density.max", "numpy.round"], "function", ["None"], ["", "def", "drawDensityImage", "(", "density", ",", "maxDensity", "=", "-", "1", ",", "nChannels", "=", "1", ")", ":", "\n", "    ", "if", "maxDensity", "<", "0", ":", "\n", "        ", "maxDensity", "=", "density", ".", "max", "(", ")", "/", "2", "\n", "pass", "\n", "", "densityImage", "=", "np", ".", "minimum", "(", "np", ".", "round", "(", "density", "/", "maxDensity", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", ",", "255", ")", "\n", "if", "nChannels", "==", "3", ":", "\n", "        ", "densityImage", "=", "np", ".", "stack", "(", "[", "densityImage", ",", "densityImage", ",", "densityImage", "]", ",", "axis", "=", "2", ")", "\n", "pass", "\n", "", "return", "densityImage", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.drawSegmentationImage": [[90, 110], ["utils.ColorPalette.getColorMap", "np.argmax.astype", "randomColor[].reshape", "max", "max", "numpy.argmax", "utils.ColorPalette", "segmentations.max", "np.argmax.reshape"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.ColorPalette.getColorMap"], ["", "def", "drawSegmentationImage", "(", "segmentations", ",", "numColors", "=", "42", ",", "blackIndex", "=", "-", "1", ")", ":", "\n", "    ", "if", "segmentations", ".", "ndim", "==", "2", ":", "\n", "        ", "numColors", "=", "max", "(", "numColors", ",", "segmentations", ".", "max", "(", ")", "+", "2", ")", "\n", "", "else", ":", "\n", "        ", "numColors", "=", "max", "(", "numColors", ",", "segmentations", ".", "shape", "[", "2", "]", "+", "2", ")", "\n", "pass", "\n", "", "randomColor", "=", "ColorPalette", "(", "numColors", ")", ".", "getColorMap", "(", ")", "\n", "if", "blackIndex", ">=", "0", ":", "\n", "        ", "randomColor", "[", "blackIndex", "]", "=", "0", "\n", "pass", "\n", "", "width", "=", "segmentations", ".", "shape", "[", "1", "]", "\n", "height", "=", "segmentations", ".", "shape", "[", "0", "]", "\n", "if", "segmentations", ".", "ndim", "==", "3", ":", "\n", "#segmentation = (np.argmax(segmentations, 2) + 1) * (np.max(segmentations, 2) > 0.5)", "\n", "        ", "segmentation", "=", "np", ".", "argmax", "(", "segmentations", ",", "2", ")", "\n", "", "else", ":", "\n", "        ", "segmentation", "=", "segmentations", "\n", "pass", "\n", "", "segmentation", "=", "segmentation", ".", "astype", "(", "np", ".", "int", ")", "\n", "return", "randomColor", "[", "segmentation", ".", "reshape", "(", "-", "1", ")", "]", ".", "reshape", "(", "(", "height", ",", "width", ",", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.drawMaskImage": [[111, 113], ["numpy.clip().astype", "numpy.clip"], "function", ["None"], ["", "def", "drawMaskImage", "(", "mask", ")", ":", "\n", "    ", "return", "(", "np", ".", "clip", "(", "mask", "*", "255", ",", "0", ",", "255", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.projectIndices": [[116, 134], ["int", "utils.projectIndices", "utils.projectIndices", "int", "utils.projectIndices", "utils.projectIndices"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.projectIndices", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.projectIndices", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.projectIndices", "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.projectIndices"], ["", "def", "projectIndices", "(", "indicesMap", ",", "pointSegmentation", ",", "min_x", ",", "max_x", ",", "min_y", ",", "max_y", ",", "width", ")", ":", "\n", "    ", "if", "max_x", "-", "min_x", "==", "1", "and", "max_y", "-", "min_y", "==", "1", ":", "\n", "        ", "indicesMap", "[", "pointSegmentation", "[", ":", ",", "2", "]", "]", "=", "min_y", "*", "width", "+", "min_x", "\n", "return", "\n", "", "elif", "max_x", "-", "min_x", ">=", "max_y", "-", "min_y", ":", "\n", "        ", "middle_x", "=", "int", "(", "(", "max_x", "+", "min_x", "+", "1", ")", "/", "2", ")", "\n", "mask_1", "=", "pointSegmentation", "[", ":", ",", "0", "]", "<", "middle_x", "\n", "projectIndices", "(", "indicesMap", ",", "pointSegmentation", "[", "mask_1", "]", ",", "min_x", ",", "middle_x", ",", "min_y", ",", "max_y", ",", "width", ")", "\n", "mask_2", "=", "pointSegmentation", "[", ":", ",", "0", "]", ">=", "middle_x", "\n", "projectIndices", "(", "indicesMap", ",", "pointSegmentation", "[", "mask_2", "]", ",", "middle_x", ",", "max_x", ",", "min_y", ",", "max_y", ",", "width", ")", "\n", "", "else", ":", "\n", "        ", "middle_y", "=", "int", "(", "(", "max_y", "+", "min_y", "+", "1", ")", "/", "2", ")", "\n", "mask_1", "=", "pointSegmentation", "[", ":", ",", "1", "]", "<", "middle_y", "\n", "projectIndices", "(", "indicesMap", ",", "pointSegmentation", "[", "mask_1", "]", ",", "min_x", ",", "max_x", ",", "min_y", ",", "middle_y", ",", "width", ")", "\n", "mask_2", "=", "pointSegmentation", "[", ":", ",", "1", "]", ">=", "middle_y", "\n", "projectIndices", "(", "indicesMap", ",", "pointSegmentation", "[", "mask_2", "]", ",", "min_x", ",", "max_x", ",", "middle_y", ",", "max_y", ",", "width", ")", "\n", "pass", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.extractCornersFromHeatmaps": [[137, 161], ["xrange", "measure.label", "xrange", "orientationPoints.append", "measure.label.min", "measure.label.max", "points.append", "points.append", "xs.mean", "ys.mean", "xs.mean", "ys.mean", "xs.min", "ys.min", "xs.max", "ys.max"], "function", ["None"], ["", "def", "extractCornersFromHeatmaps", "(", "heatmaps", ",", "heatmapThreshold", "=", "0.5", ",", "numPixelsThreshold", "=", "5", ",", "returnRanges", "=", "True", ")", ":", "\n", "    ", "from", "skimage", "import", "measure", "\n", "heatmaps", "=", "(", "heatmaps", ">", "heatmapThreshold", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "orientationPoints", "=", "[", "]", "\n", "#kernel = np.ones((3, 3), np.float32)", "\n", "for", "heatmapIndex", "in", "xrange", "(", "0", ",", "heatmaps", ".", "shape", "[", "-", "1", "]", ")", ":", "\n", "        ", "heatmap", "=", "heatmaps", "[", ":", ",", ":", ",", "heatmapIndex", "]", "\n", "#heatmap = cv2.dilate(cv2.erode(heatmap, kernel), kernel)", "\n", "components", "=", "measure", ".", "label", "(", "heatmap", ",", "background", "=", "0", ")", "\n", "points", "=", "[", "]", "\n", "for", "componentIndex", "in", "xrange", "(", "components", ".", "min", "(", ")", "+", "1", ",", "components", ".", "max", "(", ")", "+", "1", ")", ":", "\n", "            ", "ys", ",", "xs", "=", "(", "components", "==", "componentIndex", ")", ".", "nonzero", "(", ")", "\n", "if", "ys", ".", "shape", "[", "0", "]", "<=", "numPixelsThreshold", ":", "\n", "                ", "continue", "\n", "#print(heatmapIndex, xs.shape, ys.shape, componentIndex)", "\n", "", "if", "returnRanges", ":", "\n", "                ", "points", ".", "append", "(", "(", "(", "xs", ".", "mean", "(", ")", ",", "ys", ".", "mean", "(", ")", ")", ",", "(", "xs", ".", "min", "(", ")", ",", "ys", ".", "min", "(", ")", ")", ",", "(", "xs", ".", "max", "(", ")", ",", "ys", ".", "max", "(", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "points", ".", "append", "(", "(", "xs", ".", "mean", "(", ")", ",", "ys", ".", "mean", "(", ")", ")", ")", "\n", "pass", "\n", "", "continue", "\n", "", "orientationPoints", ".", "append", "(", "points", ")", "\n", "continue", "\n", "", "return", "orientationPoints", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.extractCornersFromSegmentation": [[163, 178], ["xrange", "measure.label", "xrange", "orientationPoints.append", "points.append", "measure.label.min", "measure.label.max", "xs.mean", "ys.mean"], "function", ["None"], ["", "def", "extractCornersFromSegmentation", "(", "segmentation", ",", "cornerTypeRange", "=", "[", "0", ",", "13", "]", ")", ":", "\n", "    ", "from", "skimage", "import", "measure", "\n", "orientationPoints", "=", "[", "]", "\n", "for", "heatmapIndex", "in", "xrange", "(", "cornerTypeRange", "[", "0", "]", ",", "cornerTypeRange", "[", "1", "]", ")", ":", "\n", "        ", "heatmap", "=", "segmentation", "==", "heatmapIndex", "\n", "#heatmap = cv2.dilate(cv2.erode(heatmap, kernel), kernel)", "\n", "components", "=", "measure", ".", "label", "(", "heatmap", ",", "background", "=", "0", ")", "\n", "points", "=", "[", "]", "\n", "for", "componentIndex", "in", "xrange", "(", "components", ".", "min", "(", ")", "+", "1", ",", "components", ".", "max", "(", ")", "+", "1", ")", ":", "\n", "            ", "ys", ",", "xs", "=", "(", "components", "==", "componentIndex", ")", ".", "nonzero", "(", ")", "\n", "points", ".", "append", "(", "(", "xs", ".", "mean", "(", ")", ",", "ys", ".", "mean", "(", ")", ")", ")", "\n", "continue", "\n", "", "orientationPoints", ".", "append", "(", "points", ")", "\n", "continue", "\n", "", "return", "orientationPoints", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.getSegmentationFromCorners": [[180, 188], ["numpy.zeros", "enumerate", "int", "int", "round", "round"], "function", ["None"], ["", "def", "getSegmentationFromCorners", "(", "width", ",", "height", ",", "orientationCorners", ")", ":", "\n", "    ", "segmentation", "=", "np", ".", "zeros", "(", "(", "height", ",", "width", ")", ")", "\n", "for", "orientation", ",", "corners", "in", "enumerate", "(", "orientationCorners", ")", ":", "\n", "        ", "for", "corner", "in", "corners", ":", "\n", "            ", "segmentation", "[", "int", "(", "round", "(", "corner", "[", "1", "]", ")", ")", "]", "[", "int", "(", "round", "(", "corner", "[", "0", "]", ")", ")", "]", "=", "orientation", "+", "1", "\n", "continue", "\n", "", "continue", "\n", "", "return", "segmentation", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.evaluateCorners": [[190, 206], ["enumerate", "numpy.array", "numpy.array", "numpy.array", "numpy.linalg.norm", "numpy.expand_dims", "numpy.expand_dims", "np.linalg.norm.min"], "function", ["None"], ["", "def", "evaluateCorners", "(", "cornersPred", ",", "cornersGT", ",", "distanceThreshold", "=", "15", ")", ":", "\n", "    ", "numGT", "=", "0", "\n", "numPred", "=", "0", "\n", "numMatches", "=", "0", "\n", "for", "cornerType", ",", "gt_c", "in", "enumerate", "(", "cornersGT", ")", ":", "\n", "        ", "pred_c", "=", "cornersPred", "[", "cornerType", "]", "\n", "gt_c", "=", "np", ".", "array", "(", "gt_c", ")", "\n", "pred_c", "=", "np", ".", "array", "(", "pred_c", ")", "\n", "numGT", "+=", "gt_c", ".", "shape", "[", "0", "]", "\n", "numPred", "+=", "pred_c", ".", "shape", "[", "0", "]", "\n", "if", "gt_c", ".", "shape", "[", "0", "]", "==", "0", "or", "pred_c", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "continue", "\n", "", "diff", "=", "np", ".", "linalg", ".", "norm", "(", "np", ".", "expand_dims", "(", "gt_c", ",", "1", ")", "-", "np", ".", "expand_dims", "(", "pred_c", ",", "0", ")", ",", "axis", "=", "2", ")", "\n", "numMatches", "+=", "(", "diff", ".", "min", "(", "axis", "=", "1", ")", "<", "distanceThreshold", ")", ".", "sum", "(", ")", "\n", "continue", "\n", "", "return", "np", ".", "array", "(", "[", "numMatches", ",", "numGT", ",", "numPred", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.evaluateSegmentation": [[209, 237], ["xrange", "numpy.array", "float", "max", "numpy.logical_or", "np.logical_or.sum", "numpy.logical_and", "correctMask[].sum", "nonemptyMask.sum", "float", "np.logical_and.sum"], "function", ["None"], ["", "def", "evaluateSegmentation", "(", "segmentationPred", ",", "segmentationGT", ",", "numSegments", "=", "12", ")", ":", "\n", "#print(\"hack in evaluate! remove this!\")", "\n", "#print(segmentationGT.shape)", "\n", "#segmentationGT = segmentationGT.transpose(1, 0)", "\n", "    ", "height", "=", "segmentationPred", ".", "shape", "[", "0", "]", "\n", "width", "=", "segmentationPred", ".", "shape", "[", "1", "]", "\n", "nonemptyMask", "=", "segmentationGT", ">", "0", "\n", "correctMask", "=", "segmentationPred", "==", "segmentationGT", "\n", "#accuracy = float(correctMask.sum()) / (width * height)", "\n", "accuracy", "=", "float", "(", "correctMask", "[", "nonemptyMask", "]", ".", "sum", "(", ")", ")", "/", "max", "(", "nonemptyMask", ".", "sum", "(", ")", ",", "1", ")", "\n", "#(width * height)", "\n", "\n", "sumIOU", "=", "0.", "\n", "numIOU", "=", "0", "\n", "for", "segmentIndex", "in", "xrange", "(", "numSegments", ")", ":", "\n", "        ", "gt_s", "=", "segmentationGT", "==", "segmentIndex", "\n", "pred_s", "=", "segmentationPred", "==", "segmentIndex", "\n", "union", "=", "np", ".", "logical_or", "(", "pred_s", ",", "gt_s", ")", "\n", "unionSum", "=", "union", ".", "sum", "(", ")", "\n", "if", "unionSum", "==", "0", ":", "\n", "            ", "continue", "\n", "", "intersection", "=", "np", ".", "logical_and", "(", "pred_s", ",", "gt_s", ")", "\n", "IOU", "=", "float", "(", "intersection", ".", "sum", "(", ")", ")", "/", "unionSum", "\n", "sumIOU", "+=", "IOU", "\n", "numIOU", "+=", "1", "\n", "continue", "\n", "", "meanIOU", "=", "sumIOU", "/", "numIOU", "\n", "return", "np", ".", "array", "(", "[", "accuracy", ",", "meanIOU", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.evaluateDetection": [[238, 259], ["xrange", "gt_s.sum", "pred_s.sum", "float", "numpy.logical_or().sum", "numpy.logical_and().sum", "numpy.logical_or", "numpy.logical_and"], "function", ["None"], ["", "def", "evaluateDetection", "(", "segmentationPred", ",", "segmentationGT", ",", "numSegments", "=", "12", ",", "IOUThreshold", "=", "0.5", ")", ":", "\n", "    ", "from", "skimage", "import", "measure", "\n", "numGT", "=", "0", "\n", "numPred", "=", "0", "\n", "numMatches", "=", "0", "\n", "\n", "for", "segmentIndex", "in", "xrange", "(", "numSegments", ")", ":", "\n", "        ", "gt_s", "=", "segmentationGT", "==", "segmentIndex", "\n", "if", "gt_s", ".", "sum", "(", ")", ">", "0", ":", "\n", "           ", "numGT", "+=", "1", "\n", "pass", "\n", "", "pred_s", "=", "segmentationPred", "==", "segmentIndex", "\n", "if", "pred_s", ".", "sum", "(", ")", ">", "0", ":", "\n", "           ", "numPred", "+=", "1", "\n", "pass", "\n", "", "IOU", "=", "float", "(", "np", ".", "logical_and", "(", "pred_s", ",", "gt_s", ")", ".", "sum", "(", ")", ")", "/", "np", ".", "logical_or", "(", "pred_s", ",", "gt_s", ")", ".", "sum", "(", ")", "\n", "if", "IOU", ">", "IOUThreshold", ":", "\n", "            ", "numMatches", "+=", "1", "\n", "pass", "\n", "", "continue", "\n", "", "return", "(", "numMatches", ",", "numGT", ",", "numPred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.fitPlane": [[260, 265], ["numpy.linalg.solve", "numpy.ones", "numpy.linalg.lstsq", "numpy.ones"], "function", ["None"], ["", "def", "fitPlane", "(", "points", ")", ":", "\n", "    ", "if", "points", ".", "shape", "[", "0", "]", "==", "points", ".", "shape", "[", "1", "]", ":", "\n", "        ", "return", "np", ".", "linalg", ".", "solve", "(", "points", ",", "np", ".", "ones", "(", "points", ".", "shape", "[", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "linalg", ".", "lstsq", "(", "points", ",", "np", ".", "ones", "(", "points", ".", "shape", "[", "0", "]", ")", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.rotatePoints": [[266, 303], ["numpy.arange", "numpy.random.shuffle", "numpy.unique().tolist", "numpy.zeros", "numpy.zeros", "numpy.deg2rad", "numpy.zeros", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.matmul", "numpy.arctan2", "numpy.maximum", "numpy.sin", "numpy.unique", "utils.fitPlane", "numpy.argmax", "numpy.rad2deg", "numpy.argmax", "numpy.abs", "int", "int", "numpy.round", "numpy.round"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.fitPlane"], ["", "", "def", "rotatePoints", "(", "points", ",", "segmentation", ",", "numSampledPoints", "=", "10000", ")", ":", "\n", "    ", "sampledInds", "=", "np", ".", "arange", "(", "points", ".", "shape", "[", "0", "]", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "sampledInds", ")", "\n", "sampledPoints", "=", "points", "[", "sampledInds", "[", ":", "numSampledPoints", "]", "]", "\n", "sampledSegmentation", "=", "segmentation", "[", "sampledInds", "[", ":", "numSampledPoints", "]", "]", "\n", "segments", "=", "np", ".", "unique", "(", "sampledSegmentation", ")", ".", "tolist", "(", ")", "\n", "binSize", "=", "3", "\n", "numAngleBins", "=", "90", "//", "3", "+", "1", "\n", "angleSums", "=", "np", ".", "zeros", "(", "numAngleBins", ")", "\n", "angleCounts", "=", "np", ".", "zeros", "(", "numAngleBins", ")", "\n", "for", "segmentIndex", "in", "segments", ":", "\n", "        ", "segmentPoints", "=", "sampledPoints", "[", "sampledSegmentation", "==", "segmentIndex", "]", "\n", "if", "segmentPoints", ".", "shape", "[", "0", "]", "<", "3", ":", "\n", "            ", "continue", "\n", "", "try", ":", "\n", "            ", "plane", "=", "fitPlane", "(", "segmentPoints", ")", "\n", "", "except", ":", "\n", "            ", "continue", "\n", "", "if", "np", ".", "argmax", "(", "np", ".", "abs", "(", "plane", ")", ")", "==", "2", ":", "\n", "            ", "continue", "\n", "", "angle", "=", "np", ".", "arctan2", "(", "plane", "[", "0", "]", ",", "plane", "[", "1", "]", ")", "\n", "angle", "=", "np", ".", "rad2deg", "(", "angle", ")", "%", "90", "\n", "numPoints", "=", "segmentPoints", ".", "shape", "[", "0", "]", "\n", "angleSums", "[", "int", "(", "np", ".", "round", "(", "angle", "/", "3", ")", ")", "]", "+=", "angle", "*", "numPoints", "\n", "angleCounts", "[", "int", "(", "np", ".", "round", "(", "angle", "/", "3", ")", ")", "]", "+=", "numPoints", "\n", "continue", "\n", "", "angles", "=", "angleSums", "/", "np", ".", "maximum", "(", "angleCounts", ",", "1", ")", "\n", "angle", "=", "angles", "[", "np", ".", "argmax", "(", "angleCounts", ")", "]", "\n", "angle", "=", "np", ".", "deg2rad", "(", "angle", ")", "\n", "rotationMatrix", "=", "np", ".", "zeros", "(", "(", "2", ",", "2", ")", ")", "\n", "rotationMatrix", "[", "0", "]", "[", "0", "]", "=", "np", ".", "cos", "(", "angle", ")", "\n", "rotationMatrix", "[", "0", "]", "[", "1", "]", "=", "np", ".", "sin", "(", "angle", ")", "\n", "rotationMatrix", "[", "1", "]", "[", "0", "]", "=", "-", "np", ".", "sin", "(", "angle", ")", "\n", "rotationMatrix", "[", "1", "]", "[", "1", "]", "=", "np", ".", "cos", "(", "angle", ")", "\n", "\n", "points", "[", ":", ",", ":", "2", "]", "=", "np", ".", "matmul", "(", "points", "[", ":", ",", ":", "2", "]", ",", "rotationMatrix", ")", "\n", "return", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.rotatePointsWithMatrix": [[304, 344], ["numpy.arange", "numpy.random.shuffle", "numpy.unique().tolist", "isinstance", "numpy.zeros", "numpy.zeros", "numpy.deg2rad", "numpy.zeros", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.matmul", "numpy.arctan2", "numpy.maximum", "numpy.sin", "numpy.unique", "utils.fitPlane", "numpy.argmax", "numpy.rad2deg", "numpy.argmax", "numpy.abs", "int", "int", "numpy.round", "numpy.round"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.fitPlane"], ["", "def", "rotatePointsWithMatrix", "(", "points", ",", "segmentation", ",", "numSampledPoints", "=", "10000", ")", ":", "\n", "    ", "sampledInds", "=", "np", ".", "arange", "(", "points", ".", "shape", "[", "0", "]", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "sampledInds", ")", "\n", "sampledPoints", "=", "points", "[", "sampledInds", "[", ":", "numSampledPoints", "]", "]", "\n", "sampledSegmentation", "=", "segmentation", "[", "sampledInds", "[", ":", "numSampledPoints", "]", "]", "\n", "segments", "=", "np", ".", "unique", "(", "sampledSegmentation", ")", ".", "tolist", "(", ")", "\n", "binSize", "=", "3", "\n", "numAngleBins", "=", "90", "//", "3", "+", "1", "\n", "#print(\"rotate!\", numAngleBins, flush=True)", "\n", "assert", "isinstance", "(", "numAngleBins", ",", "int", ")", ",", "numAngleBins", "\n", "\n", "angleSums", "=", "np", ".", "zeros", "(", "numAngleBins", ")", "\n", "angleCounts", "=", "np", ".", "zeros", "(", "numAngleBins", ")", "\n", "for", "segmentIndex", "in", "segments", ":", "\n", "        ", "segmentPoints", "=", "sampledPoints", "[", "sampledSegmentation", "==", "segmentIndex", "]", "\n", "if", "segmentPoints", ".", "shape", "[", "0", "]", "<", "3", ":", "\n", "            ", "continue", "\n", "", "try", ":", "\n", "            ", "plane", "=", "fitPlane", "(", "segmentPoints", ")", "\n", "", "except", ":", "\n", "            ", "continue", "\n", "", "if", "np", ".", "argmax", "(", "np", ".", "abs", "(", "plane", ")", ")", "==", "2", ":", "\n", "            ", "continue", "\n", "", "angle", "=", "np", ".", "arctan2", "(", "plane", "[", "0", "]", ",", "plane", "[", "1", "]", ")", "\n", "angle", "=", "np", ".", "rad2deg", "(", "angle", ")", "%", "90", "\n", "numPoints", "=", "segmentPoints", ".", "shape", "[", "0", "]", "\n", "angleSums", "[", "int", "(", "np", ".", "round", "(", "angle", "/", "3", ")", ")", "]", "+=", "angle", "*", "numPoints", "\n", "angleCounts", "[", "int", "(", "np", ".", "round", "(", "angle", "/", "3", ")", ")", "]", "+=", "numPoints", "\n", "continue", "\n", "", "angles", "=", "angleSums", "/", "np", ".", "maximum", "(", "angleCounts", ",", "1", ")", "\n", "angle", "=", "angles", "[", "np", ".", "argmax", "(", "angleCounts", ")", "]", "\n", "angle", "=", "np", ".", "deg2rad", "(", "angle", ")", "\n", "rotationMatrix", "=", "np", ".", "zeros", "(", "(", "2", ",", "2", ")", ")", "\n", "rotationMatrix", "[", "0", "]", "[", "0", "]", "=", "np", ".", "cos", "(", "angle", ")", "\n", "rotationMatrix", "[", "0", "]", "[", "1", "]", "=", "np", ".", "sin", "(", "angle", ")", "\n", "rotationMatrix", "[", "1", "]", "[", "0", "]", "=", "-", "np", ".", "sin", "(", "angle", ")", "\n", "rotationMatrix", "[", "1", "]", "[", "1", "]", "=", "np", ".", "cos", "(", "angle", ")", "\n", "\n", "points", "[", ":", ",", ":", "2", "]", "=", "np", ".", "matmul", "(", "points", "[", ":", ",", ":", "2", "]", ",", "rotationMatrix", ")", "\n", "return", "points", ",", "rotationMatrix", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.drawTopDownView": [[346, 368], ["np.minimum.min", "np.minimum.max", "ranges.max", "numpy.minimum", "numpy.zeros", "print", "min", "numpy.minimum().astype", "np.minimum().astype.max", "np.minimum().astype.max", "numpy.minimum"], "function", ["None"], ["", "def", "drawTopDownView", "(", "points", ",", "width", ",", "height", ")", ":", "\n", "    ", "coordinates", "=", "points", "[", ":", ",", ":", "2", "]", "\n", "mins", "=", "coordinates", ".", "min", "(", "0", ",", "keepdims", "=", "True", ")", "\n", "maxs", "=", "coordinates", ".", "max", "(", "0", ",", "keepdims", "=", "True", ")", "\n", "ranges", "=", "maxs", "-", "mins", "\n", "padding", "=", "ranges", "*", "0.05", "\n", "mins", "-=", "padding", "\n", "ranges", "+=", "padding", "*", "2", "\n", "\n", "maxRange", "=", "ranges", ".", "max", "(", ")", "\n", "mins", "=", "(", "maxs", "+", "mins", ")", "/", "2", "-", "maxRange", "/", "2", "\n", "\n", "coordinates", "=", "(", "(", "coordinates", "-", "mins", ")", "/", "ranges", "*", "height", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "coordinates", "=", "np", ".", "minimum", "(", "coordinates", ",", "height", "-", "1", ")", "\n", "image", "=", "np", ".", "zeros", "(", "(", "height", ",", "width", ")", ")", "\n", "for", "coordinate", "in", "coordinates", ":", "\n", "        ", "image", "[", "coordinate", "[", "1", "]", "]", "[", "coordinate", "[", "0", "]", "]", "+=", "1", "\n", "continue", "\n", "", "print", "(", "image", ".", "max", "(", ")", ")", "\n", "image", "/=", "min", "(", "image", ".", "max", "(", ")", ",", "300", ")", "\n", "image", "=", "(", "np", ".", "minimum", "(", "image", "*", "255", ",", "255", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.writePointCloud": [[369, 398], ["open", "str", "f.write", "f.close", "len", "enumerate", "f.write", "f.write", "f.write", "str", "str", "int"], "function", ["None"], ["", "def", "writePointCloud", "(", "filename", ",", "pointCloud", ")", ":", "\n", "    ", "with", "open", "(", "filename", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "header", "=", "\"\"\"ply\nformat ascii 1.0\nelement vertex \"\"\"", "\n", "header", "+=", "str", "(", "len", "(", "pointCloud", ")", ")", "\n", "header", "+=", "\"\"\"\nproperty float x\nproperty float y\nproperty float z\nproperty uchar red                                     { start of vertex color }\nproperty uchar green\nproperty uchar blue\nend_header\n\"\"\"", "\n", "f", ".", "write", "(", "header", ")", "\n", "for", "point", "in", "pointCloud", ":", "\n", "            ", "for", "valueIndex", ",", "value", "in", "enumerate", "(", "point", ")", ":", "\n", "                ", "if", "valueIndex", "<", "3", ":", "\n", "                    ", "f", ".", "write", "(", "str", "(", "value", ")", "+", "' '", ")", "\n", "", "else", ":", "\n", "                    ", "f", ".", "write", "(", "str", "(", "int", "(", "value", "*", "255", ")", ")", "+", "' '", ")", "\n", "pass", "\n", "", "continue", "\n", "", "f", ".", "write", "(", "'\\n'", ")", "\n", "continue", "\n", "", "f", ".", "close", "(", ")", "\n", "pass", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.getDensity": [[414, 431], ["numpy.array().reshape", "numpy.round().astype", "numpy.minimum", "numpy.zeros", "numpy.maximum", "numpy.array", "numpy.round"], "function", ["None"], ["", "def", "getDensity", "(", "points", ",", "width", "=", "256", ",", "height", "=", "256", ")", ":", "\n", "    ", "imageSizes", "=", "np", ".", "array", "(", "[", "width", ",", "height", "]", ")", ".", "reshape", "(", "(", "-", "1", ",", "2", ")", ")", "\n", "# mins = points.min(0, keepdims=True)", "\n", "# maxs = points.max(0, keepdims=True)", "\n", "# maxRange = (maxs - mins)[:, :2].max()", "\n", "# padding = maxRange * 0.05", "\n", "# mins = (maxs + mins) / 2 - maxRange / 2", "\n", "# mins -= padding", "\n", "# maxRange += padding * 2", "\n", "# coordinates = np.round((points - mins) / maxRange * imageSizes).astype(np.int32)", "\n", "coordinates", "=", "np", ".", "round", "(", "points", "[", ":", ",", ":", "2", "]", "*", "imageSizes", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "coordinates", "=", "np", ".", "minimum", "(", "np", ".", "maximum", "(", "coordinates", ",", "0", ")", ",", "imageSizes", "-", "1", ")", "\n", "density", "=", "np", ".", "zeros", "(", "(", "height", ",", "width", ")", ")", "\n", "for", "uv", "in", "coordinates", ":", "\n", "        ", "density", "[", "uv", "[", "1", "]", ",", "uv", "[", "0", "]", "]", "+=", "1", "\n", "continue", "\n", "", "return", "density", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.getDensityFromIndices": [[432, 439], ["numpy.zeros"], "function", ["None"], ["", "def", "getDensityFromIndices", "(", "indices", ",", "width", "=", "256", ",", "height", "=", "256", ")", ":", "\n", "    ", "density", "=", "np", ".", "zeros", "(", "(", "height", ",", "width", ")", ")", "\n", "for", "index", "in", "indices", ":", "\n", "#print(index, index / width, index % width)", "\n", "        ", "density", "[", "index", "/", "width", ",", "index", "%", "width", "]", "+=", "1", "\n", "continue", "\n", "", "return", "density", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.drawCornerImages": [[440, 470], ["utils.ColorPalette.getColorMap", "np.argmax.astype().reshape", "print", "max", "max", "numpy.argmax", "numpy.unique", "ColorPalette().getColorMap.copy", "colorMap[].reshape", "cv2.dilate", "images.append", "utils.ColorPalette", "np.argmax.astype", "numpy.ones", "segmentations.max"], "function", ["home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.ColorPalette.getColorMap"], ["", "def", "drawCornerImages", "(", "segmentations", ",", "numColors", "=", "42", ",", "blackIndex", "=", "0", ")", ":", "\n", "    ", "if", "segmentations", ".", "ndim", "==", "2", ":", "\n", "        ", "numColors", "=", "max", "(", "numColors", ",", "segmentations", ".", "max", "(", ")", "+", "2", ")", "\n", "", "else", ":", "\n", "        ", "numColors", "=", "max", "(", "numColors", ",", "segmentations", ".", "shape", "[", "2", "]", "+", "2", ")", "\n", "pass", "\n", "", "randomColor", "=", "ColorPalette", "(", "numColors", ")", ".", "getColorMap", "(", ")", "\n", "if", "blackIndex", ">=", "0", ":", "\n", "        ", "randomColor", "[", "blackIndex", "]", "=", "0", "\n", "pass", "\n", "", "width", "=", "segmentations", ".", "shape", "[", "1", "]", "\n", "height", "=", "segmentations", ".", "shape", "[", "0", "]", "\n", "if", "segmentations", ".", "ndim", "==", "3", ":", "\n", "#segmentation = (np.argmax(segmentations, 2) + 1) * (np.max(segmentations, 2) > 0.5)", "\n", "        ", "segmentation", "=", "np", ".", "argmax", "(", "segmentations", ",", "2", ")", "\n", "", "else", ":", "\n", "        ", "segmentation", "=", "segmentations", "\n", "pass", "\n", "", "segmentation", "=", "segmentation", ".", "astype", "(", "np", ".", "int32", ")", ".", "reshape", "(", "-", "1", ")", "\n", "images", "=", "[", "]", "\n", "print", "(", "np", ".", "unique", "(", "segmentation", ")", ")", "\n", "for", "segment", "in", "[", "(", "1", ",", "14", ")", ",", "(", "14", ",", "18", ")", ",", "(", "18", ",", "22", ")", "]", ":", "\n", "        ", "colorMap", "=", "randomColor", ".", "copy", "(", ")", "\n", "colorMap", "[", ":", "segment", "[", "0", "]", "]", "=", "0", "\n", "colorMap", "[", "segment", "[", "1", "]", ":", "]", "=", "0", "\n", "image", "=", "colorMap", "[", "segmentation", "]", ".", "reshape", "(", "(", "height", ",", "width", ",", "3", ")", ")", "\n", "image", "=", "cv2", ".", "dilate", "(", "image", ",", "np", ".", "ones", "(", "(", "3", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", ",", "iterations", "=", "3", ")", "\n", "images", ".", "append", "(", "image", ")", "\n", "continue", "\n", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.segmentation2Heatmaps": [[471, 477], ["numpy.arange().reshape", "numpy.arange", "numpy.expand_dims"], "function", ["None"], ["", "def", "segmentation2Heatmaps", "(", "segmentation", ",", "numLabels", ")", ":", "\n", "    ", "width", "=", "segmentation", ".", "shape", "[", "1", "]", "\n", "height", "=", "segmentation", ".", "shape", "[", "0", "]", "\n", "labels", "=", "np", ".", "arange", "(", "numLabels", ",", "dtype", "=", "np", ".", "int32", ")", ".", "reshape", "(", "(", "1", ",", "1", ",", "-", "1", ")", ")", "\n", "heatmaps", "=", "(", "np", ".", "expand_dims", "(", "segmentation", ",", "-", "1", ")", "==", "labels", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "heatmaps", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.heatmaps2Segmentation": [[478, 480], ["numpy.argmax"], "function", ["None"], ["", "def", "heatmaps2Segmentation", "(", "heatmaps", ")", ":", "\n", "    ", "return", "np", ".", "argmax", "(", "heatmaps", ",", "axis", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.calcIOU": [[481, 504], ["max", "min", "max", "min", "float", "int", "int", "int", "int", "round", "round", "round", "round", "int", "int", "int", "int", "round", "round", "round", "round"], "function", ["None"], ["", "def", "calcIOU", "(", "rectangle_1", ",", "rectangle_2", ")", ":", "\n", "# mins_1 = rectangle_1.min(0)", "\n", "# maxs_1 = rectangle_1.max(0)", "\n", "# area_1 = (maxs_1[0] - mins_1[0] + 1) * (maxs_1[1] - mins_1[1] + 1)", "\n", "# mins_2 = rectangle_2.min(0)", "\n", "# maxs_2 = rectangle_2.max(0)", "\n", "# area_2 = (maxs_2[0] - mins_2[0] + 1) * (maxs_2[1] - mins_2[1] + 1)", "\n", "# intersection = (min(maxs_1[0], maxs_2[0]) - max(mins_1[0], mins_2[0]) + 1) * (min(maxs_1[1], maxs_2[1]) - max(mins_1[1], mins_2[1]) + 1)", "\n", "\n", "    ", "rectangles", "=", "[", "rectangle_1", ",", "rectangle_2", "]", "\n", "\n", "x_1", "=", "max", "(", "[", "int", "(", "round", "(", "(", "rectangle", "[", "0", "]", "[", "0", "]", "+", "rectangle", "[", "2", "]", "[", "0", "]", ")", "/", "2", ")", ")", "for", "rectangle", "in", "rectangles", "]", ")", "\n", "x_2", "=", "min", "(", "[", "int", "(", "round", "(", "(", "rectangle", "[", "1", "]", "[", "0", "]", "+", "rectangle", "[", "3", "]", "[", "0", "]", ")", "/", "2", ")", ")", "for", "rectangle", "in", "rectangles", "]", ")", "\n", "y_1", "=", "max", "(", "[", "int", "(", "round", "(", "(", "rectangle", "[", "0", "]", "[", "1", "]", "+", "rectangle", "[", "1", "]", "[", "1", "]", ")", "/", "2", ")", ")", "for", "rectangle", "in", "rectangles", "]", ")", "\n", "y_2", "=", "min", "(", "[", "int", "(", "round", "(", "(", "rectangle", "[", "2", "]", "[", "1", "]", "+", "rectangle", "[", "3", "]", "[", "1", "]", ")", "/", "2", ")", ")", "for", "rectangle", "in", "rectangles", "]", ")", "\n", "if", "x_1", ">=", "x_2", "or", "y_1", ">=", "y_2", ":", "\n", "        ", "return", "0", "\n", "", "intersection", "=", "(", "x_2", "-", "x_1", "+", "1", ")", "*", "(", "y_2", "-", "y_1", "+", "1", ")", "\n", "\n", "area_1", ",", "area_2", "=", "(", "(", "int", "(", "round", "(", "(", "rectangle", "[", "1", "]", "[", "0", "]", "+", "rectangle", "[", "3", "]", "[", "0", "]", ")", "/", "2", ")", ")", "-", "int", "(", "round", "(", "(", "rectangle", "[", "0", "]", "[", "0", "]", "+", "rectangle", "[", "2", "]", "[", "0", "]", ")", "/", "2", ")", ")", "+", "1", ")", "*", "(", "int", "(", "round", "(", "(", "rectangle", "[", "2", "]", "[", "1", "]", "+", "rectangle", "[", "3", "]", "[", "1", "]", ")", "/", "2", ")", ")", "-", "int", "(", "round", "(", "(", "rectangle", "[", "0", "]", "[", "1", "]", "+", "rectangle", "[", "1", "]", "[", "1", "]", ")", "/", "2", ")", ")", "+", "1", ")", "for", "rectangle", "in", "rectangles", ")", "\n", "\n", "union", "=", "area_1", "+", "area_2", "-", "intersection", "\n", "return", "float", "(", "intersection", ")", "/", "union", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.calcIOUMask": [[505, 509], ["float", "max", "mask_1.sum", "mask_2.sum"], "function", ["None"], ["", "def", "calcIOUMask", "(", "mask_1", ",", "mask_2", ")", ":", "\n", "    ", "intersection", "=", "(", "mask_1", "*", "mask_2", ")", ".", "sum", "(", ")", "\n", "union", "=", "mask_1", ".", "sum", "(", ")", "+", "mask_2", ".", "sum", "(", ")", "-", "intersection", "\n", "return", "float", "(", "intersection", ")", "/", "max", "(", "union", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.gaussian": [[511, 525], ["numpy.arange", "numpy.meshgrid", "numpy.exp", "numpy.sum"], "function", ["None"], ["", "def", "gaussian", "(", "k", "=", "5", ",", "sig", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    creates gaussian kernel with side length l and a sigma of sig\nv    \"\"\"", "\n", "if", "sig", "==", "0", ":", "\n", "        ", "sig", "=", "0.3", "*", "(", "(", "k", "-", "1", ")", "*", "0.5", "-", "1", ")", "+", "0.8", "\n", "pass", "\n", "\n", "", "ax", "=", "np", ".", "arange", "(", "-", "k", "//", "2", "+", "1.", ",", "k", "//", "2", "+", "1.", ")", "\n", "xx", ",", "yy", "=", "np", ".", "meshgrid", "(", "ax", ",", "ax", ")", "\n", "\n", "kernel", "=", "np", ".", "exp", "(", "-", "(", "xx", "**", "2", "+", "yy", "**", "2", ")", "/", "(", "2.", "*", "sig", "**", "2", ")", ")", "\n", "\n", "return", "kernel", "/", "np", ".", "sum", "(", "kernel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.art-programmer_FloorNet.None.utils.disk": [[526, 536], ["numpy.arange", "numpy.meshgrid", "numpy.sqrt", "pow", "pow"], "function", ["None"], ["", "def", "disk", "(", "k", ")", ":", "\n", "    ", "\"\"\"\n    creates gaussian kernel with side length l and a sigma of sig\n    \"\"\"", "\n", "ax", "=", "np", ".", "arange", "(", "-", "k", "//", "2", "+", "1.", ",", "k", "//", "2", "+", "1.", ")", "\n", "xx", ",", "yy", "=", "np", ".", "meshgrid", "(", "ax", ",", "ax", ")", "\n", "\n", "kernel", "=", "(", "np", ".", "sqrt", "(", "pow", "(", "xx", ",", "2", ")", "+", "pow", "(", "yy", ",", "2", ")", ")", "<=", "(", "k", "-", "1", ")", "/", "2", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "return", "kernel", "\n", "\n"]]}