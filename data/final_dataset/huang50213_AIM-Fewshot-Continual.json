{"home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.sib.ClassifierSIB.__init__": [[38, 55], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "networks.FeatExemplarAvgBlock", "networks.LinearDiag", "networks.dni_linear", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.experiment.experiment.experiment.__init__"], ["def", "__init__", "(", "self", ",", "nKnovel", ",", "nFeat", ",", "q_steps", ")", ":", "\n", "        ", "super", "(", "ClassifierSIB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "nKnovel", "=", "nKnovel", "\n", "self", ".", "nFeat", "=", "nFeat", "\n", "self", ".", "q_steps", "=", "q_steps", "\n", "\n", "# bias & scale of classifier p(y | x, theta)", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "1", ")", ".", "fill_", "(", "0", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "scale_cls", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "1", ")", ".", "fill_", "(", "10", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n", "# init_net lambda(d_t^l)", "\n", "self", ".", "favgblock", "=", "FeatExemplarAvgBlock", "(", "self", ".", "nFeat", ")", "\n", "self", ".", "wnLayerFavg", "=", "LinearDiag", "(", "self", ".", "nFeat", ")", "\n", "\n", "# grad_net (aka decoupled network interface) phi(x_t)", "\n", "self", ".", "dni", "=", "dni_linear", "(", "self", ".", "nKnovel", ",", "dni_hidden_size", "=", "self", ".", "nKnovel", "*", "8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.sib.ClassifierSIB.apply_classification_weights": [[56, 75], ["torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "sib.ClassifierSIB.bias.view", "torch.normalize.transpose", "torch.normalize.dim", "torch.normalize.dim"], "methods", ["None"], ["", "def", "apply_classification_weights", "(", "self", ",", "features", ",", "cls_weights", ")", ":", "\n", "        ", "\"\"\"\n        Given feature and weights, computing negative log-likelihoods of nKnovel classes\n        (B x n x nFeat, B x nKnovel x nFeat) -> B x n x nKnovel\n\n        :param features: features of query set.\n        :type features: torch.FloatTensor\n        :param cls_weights: generated weights.\n        :type cls_weights: torch.FloatTensor\n        :return: classification scores\n        :rtype: torch.FloatTensor\n        \"\"\"", "\n", "features", "=", "F", ".", "normalize", "(", "features", ",", "p", "=", "2", ",", "dim", "=", "features", ".", "dim", "(", ")", "-", "1", ",", "eps", "=", "1e-12", ")", "\n", "cls_weights", "=", "F", ".", "normalize", "(", "cls_weights", ",", "p", "=", "2", ",", "dim", "=", "cls_weights", ".", "dim", "(", ")", "-", "1", ",", "eps", "=", "1e-12", ")", "\n", "\n", "\n", "cls_scores", "=", "self", ".", "scale_cls", "*", "torch", ".", "baddbmm", "(", "self", ".", "bias", ".", "view", "(", "1", ",", "1", ",", "1", ")", ",", "features", ",", "cls_weights", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "\n", "return", "cls_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.sib.ClassifierSIB.init_theta": [[76, 91], ["sib.ClassifierSIB.favgblock", "theta.view.view.size", "theta.view.view.view", "sib.ClassifierSIB.wnLayerFavg", "theta.view.view.view"], "methods", ["None"], ["", "def", "init_theta", "(", "self", ",", "features_supp", ",", "labels_supp_1hot", ")", ":", "\n", "        ", "\"\"\"\n        Compute theta^0 from support set using classwise feature averaging.\n\n        :param features_supp: support features, B x nSupp x nFeat.\n        :type features_supp: torch.FloatTensor\n        :param labels_supp_1hot: one-hot representation of labels in support set.\n        :return: theta^0, B * nKnovel x nFeat\n        \"\"\"", "\n", "theta", "=", "self", ".", "favgblock", "(", "features_supp", ",", "labels_supp_1hot", ")", "# B x nKnovel x nFeat", "\n", "batch_size", ",", "nKnovel", ",", "num_channels", "=", "theta", ".", "size", "(", ")", "\n", "theta", "=", "theta", ".", "view", "(", "batch_size", "*", "nKnovel", ",", "num_channels", ")", "\n", "theta", "=", "self", ".", "wnLayerFavg", "(", "theta", ")", "# weight each feature differently", "\n", "theta", "=", "theta", ".", "view", "(", "-", "1", ",", "nKnovel", ",", "num_channels", ")", "\n", "return", "theta", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.sib.ClassifierSIB.refine_theta": [[92, 120], ["range", "features_query.size", "sib.ClassifierSIB.apply_classification_weights", "cls_scores.view.view.view", "sib.ClassifierSIB.dni", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.classifier.Classifier.apply_classification_weights"], ["", "def", "refine_theta", "(", "self", ",", "theta", ",", "features_query", ",", "lr", "=", "1e-3", ")", ":", "\n", "        ", "\"\"\"\n        Compute theta^k using synthetic gradient descent on x_t.\n\n        :param theta: theta^0\n        :type theta: torch.FloatTensor\n        :param features_query: feat(x_t)\n        :type features_query: torch.FloatTensor\n        :param float lr: learning rate\n        :return: theta^k\n        :rtype: torch.FloatTensor\n        \"\"\"", "\n", "batch_size", ",", "num_examples", "=", "features_query", ".", "size", "(", ")", "[", ":", "2", "]", "\n", "new_batch_dim", "=", "batch_size", "*", "num_examples", "\n", "\n", "for", "t", "in", "range", "(", "self", ".", "q_steps", ")", ":", "\n", "            ", "cls_scores", "=", "self", ".", "apply_classification_weights", "(", "features_query", ",", "theta", ")", "\n", "cls_scores", "=", "cls_scores", ".", "view", "(", "new_batch_dim", ",", "-", "1", ")", "# B * n x nKnovel", "\n", "grad_logit", "=", "self", ".", "dni", "(", "cls_scores", ")", "# B * n x nKnovel", "\n", "grad", "=", "torch", ".", "autograd", ".", "grad", "(", "[", "cls_scores", "]", ",", "[", "theta", "]", ",", "\n", "grad_outputs", "=", "[", "grad_logit", "]", ",", "\n", "create_graph", "=", "True", ",", "retain_graph", "=", "True", ",", "\n", "only_inputs", "=", "True", ")", "[", "0", "]", "# B x nKnovel x nFeat", "\n", "\n", "# perform synthetic GD", "\n", "theta", "=", "theta", "-", "lr", "*", "grad", "\n", "\n", "", "return", "theta", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.sib.ClassifierSIB.get_classification_weights": [[121, 142], ["torch.normalize", "torch.normalize", "torch.normalize", "sib.ClassifierSIB.init_theta", "sib.ClassifierSIB.refine_theta", "torch.normalize.dim"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.sib.ClassifierSIB.init_theta", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.sib.ClassifierSIB.refine_theta"], ["", "def", "get_classification_weights", "(", "self", ",", "features_supp", ",", "labels_supp_1hot", ",", "features_query", ",", "lr", ")", ":", "\n", "        ", "\"\"\"\n        Obtain weights for the query set using features_supp, labels_supp and features_query.\n        features_supp, labels_supp --> self.init_theta\n        features_query --> self.refine_theta\n\n        :features_supp: feat(x_t^l)\n        :type features_supp: torch.FloatTensor\n        :labels_supp_1hot: one-hot representation of support labels\n        :type labels_supp: torch.FloatTensor\n        :features_query: feat(x_t)\n        :type features_query: torch.FloatTensor\n        :lr float: learning rate of synthetic GD\n        :return: weights for query set\n        :rtype: torch.FloatTensor\n        \"\"\"", "\n", "features_supp", "=", "F", ".", "normalize", "(", "features_supp", ",", "p", "=", "2", ",", "dim", "=", "features_supp", ".", "dim", "(", ")", "-", "1", ",", "eps", "=", "1e-12", ")", "\n", "weight_novel", "=", "self", ".", "init_theta", "(", "features_supp", ",", "labels_supp_1hot", ")", "\n", "weight_novel", "=", "self", ".", "refine_theta", "(", "weight_novel", ",", "features_query", ",", "lr", ")", "\n", "\n", "return", "weight_novel", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.sib.ClassifierSIB.forward": [[144, 164], ["networks.label_to_1hot", "sib.ClassifierSIB.get_classification_weights", "sib.ClassifierSIB.apply_classification_weights"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.networks.label_to_1hot", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.classifier.Classifier.get_classification_weights", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.classifier.Classifier.apply_classification_weights"], ["", "def", "forward", "(", "self", ",", "features_supp", ",", "labels_supp", ",", "features_query", ",", "lr", ")", ":", "\n", "        ", "\"\"\"\n        Compute classification scores.\n        :labels_supp_1hot: one-hot representation of support labels\n\n        :features_supp: B x nKnovel*nExamplar x nFeat\n        :type features_supp: torch.FloatTensor\n        :labels_supp: B x nknovel*nExamplar in [0, nKnovel-1]\n        :type labels_supp: torch.FloatTensor\n        :features_query: B x nKnovel*nTest x nFeat\n        :type features_query: torch.FloatTensor\n        :lr float: learning rate of synthetic GD\n        :return: classification scores\n        :rtype: torch.FloatTensor\n        \"\"\"", "\n", "labels_supp_1hot", "=", "label_to_1hot", "(", "labels_supp", ",", "self", ".", "nKnovel", ")", "\n", "cls_weights", "=", "self", ".", "get_classification_weights", "(", "features_supp", ",", "labels_supp_1hot", ",", "features_query", ",", "lr", ")", "\n", "cls_scores", "=", "self", ".", "apply_classification_weights", "(", "features_query", ",", "cls_weights", ")", "\n", "\n", "return", "cls_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.plot_acc_active.set_size": [[29, 61], ["None"], "function", ["None"], ["def", "set_size", "(", "width", ",", "fraction", "=", "1", ")", ":", "\n", "    ", "\"\"\" Set aesthetic figure dimensions to avoid scaling in latex.\n\n    Parameters\n    ----------\n    width: float\n            Width in pts\n    fraction: float\n            Fraction of the width which you wish the figure to occupy\n\n    Returns\n    -------\n    fig_dim: tuple\n            Dimensions of figure in inches\n    \"\"\"", "\n", "# Width of figure", "\n", "fig_width_pt", "=", "width", "*", "fraction", "\n", "\n", "# Convert from pt to inches", "\n", "inches_per_pt", "=", "1", "/", "72.27", "\n", "\n", "# Golden ratio to set aesthetic figure height", "\n", "golden_ratio", "=", "(", "5", "**", ".5", "-", "0.5", ")", "/", "2", "\n", "\n", "# Figure width in inches", "\n", "fig_width_in", "=", "fig_width_pt", "*", "inches_per_pt", "\n", "# Figure height in inches", "\n", "fig_height_in", "=", "fig_width_in", "*", "golden_ratio", "\n", "\n", "fig_dim", "=", "(", "fig_width_in", ",", "fig_height_in", ")", "\n", "\n", "return", "fig_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.networks.ConvBlock.__init__": [[24, 35], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "networks.ConvBlock.layers.add_module", "networks.ConvBlock.layers.add_module", "networks.ConvBlock.layers.add_module", "networks.ConvBlock.layers.add_module", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.experiment.experiment.experiment.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ")", ":", "\n", "        ", "super", "(", "ConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "layers", ".", "add_module", "(", "'Conv'", ",", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "layers", ".", "add_module", "(", "'BatchNorm'", ",", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ")", "\n", "\n", "self", ".", "layers", ".", "add_module", "(", "'ReLU'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "layers", ".", "add_module", "(", "\n", "'MaxPool'", ",", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.networks.ConvBlock.forward": [[36, 39], ["networks.ConvBlock.layers"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "layers", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.networks.ConvNet_4_64.__init__": [[41, 59], ["torch.Module.__init__", "conv_blocks.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "networks.ConvNet_4_64.modules", "networks.ConvBlock", "conv_blocks.append", "isinstance", "networks.ConvBlock", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.experiment.experiment.experiment.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inputW", "=", "80", ",", "inputH", "=", "80", ")", ":", "\n", "        ", "super", "(", "ConvNet_4_64", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "conv_blocks", "=", "[", "]", "\n", "## 4 blocks, each block conv + bn + relu + maxpool, with filter 64", "\n", "conv_blocks", ".", "append", "(", "ConvBlock", "(", "3", ",", "64", ")", ")", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "conv_blocks", ".", "append", "(", "ConvBlock", "(", "64", ",", "64", ")", ")", "\n", "\n", "", "self", ".", "conv_blocks", "=", "nn", ".", "Sequential", "(", "*", "conv_blocks", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.networks.ConvNet_4_64.forward": [[60, 64], ["networks.ConvNet_4_64.conv_blocks", "out.view.view.view", "out.view.view.size"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv_blocks", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.networks.LinearClassifier.__init__": [[67, 71], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.experiment.experiment.experiment.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nKnovel", ",", "nFeat", ")", ":", "\n", "        ", "super", "(", "LinearClassifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "nFeat", ",", "nKnovel", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.networks.LinearClassifier.forward": [[71, 74], ["networks.LinearClassifier.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "linear", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.networks.BasicBlock.__init__": [[78, 95], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.experiment.experiment.experiment.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "droprate", "=", "dropRate", "\n", "if", "self", ".", "droprate", ">", "0", ":", "\n", "            ", "self", ".", "dropoutLayer", "=", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "droprate", ")", "\n", "", "self", ".", "equalInOut", "=", "(", "in_planes", "==", "out_planes", ")", "\n", "self", ".", "convShortcut", "=", "(", "not", "self", ".", "equalInOut", ")", "and", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "0", ",", "bias", "=", "False", ")", "or", "None", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.networks.BasicBlock.forward": [[95, 111], ["networks.BasicBlock.conv1", "networks.BasicBlock.conv2", "networks.BasicBlock.relu1", "networks.BasicBlock.relu1", "networks.BasicBlock.dropoutLayer", "networks.BasicBlock.relu2", "networks.BasicBlock.bn1", "networks.BasicBlock.bn1", "networks.BasicBlock.bn2", "networks.BasicBlock.convShortcut"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "self", ".", "equalInOut", ":", "\n", "            ", "x", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "\n", "", "out", "=", "out", "if", "self", ".", "equalInOut", "else", "x", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "if", "self", ".", "droprate", ">", "0", ":", "\n", "            ", "out", "=", "self", ".", "dropoutLayer", "(", "out", ")", "\n", "", "out", "=", "self", ".", "conv2", "(", "self", ".", "relu2", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "\n", "if", "not", "self", ".", "equalInOut", ":", "\n", "            ", "return", "self", ".", "convShortcut", "(", "x", ")", "+", "out", "\n", "", "else", ":", "\n", "            ", "return", "x", "+", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.networks.NetworkBlock.__init__": [[114, 117], ["torch.Module.__init__", "networks.NetworkBlock._make_layer"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.experiment.experiment.experiment.__init__", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.networks.NetworkBlock._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "nb_layers", ",", "in_planes", ",", "out_planes", ",", "block", ",", "stride", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "NetworkBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer", "=", "self", ".", "_make_layer", "(", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.networks.NetworkBlock._make_layer": [[118, 125], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "nb_layers", ")", ":", "\n", "            ", "in_plances_arg", "=", "i", "==", "0", "and", "in_planes", "or", "out_planes", "\n", "stride_arg", "=", "i", "==", "0", "and", "stride", "or", "1", "\n", "layers", ".", "append", "(", "block", "(", "in_plances_arg", ",", "out_planes", ",", "stride_arg", ",", "dropRate", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.networks.NetworkBlock.forward": [[126, 128], ["networks.NetworkBlock.layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "layer", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.networks.WideResNet.__init__": [[131, 161], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "networks.NetworkBlock", "networks.NetworkBlock", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "networks.WideResNet.modules", "networks.NetworkBlock", "networks.NetworkBlock", "torch.ReLU", "torch.ReLU", "torch.ReLU", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.experiment.experiment.experiment.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", "=", "28", ",", "widen_factor", "=", "10", ",", "dropRate", "=", "0.0", ",", "userelu", "=", "True", ",", "isCifar", "=", "False", ")", ":", "\n", "        ", "super", "(", "WideResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nChannels", "=", "[", "16", ",", "16", "*", "widen_factor", ",", "32", "*", "widen_factor", ",", "64", "*", "widen_factor", "]", "\n", "assert", "(", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ")", "\n", "n", "=", "(", "depth", "-", "4", ")", "//", "6", "\n", "block", "=", "BasicBlock", "\n", "# 1st conv before any network block", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "nChannels", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "# 1st block", "\n", "self", ".", "block1", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "0", "]", ",", "nChannels", "[", "1", "]", ",", "block", ",", "1", ",", "dropRate", ")", "if", "isCifar", "else", "NetworkBlock", "(", "n", ",", "nChannels", "[", "0", "]", ",", "nChannels", "[", "1", "]", ",", "block", ",", "2", ",", "dropRate", ")", "\n", "# 2nd block", "\n", "\n", "self", ".", "block2", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "1", "]", ",", "nChannels", "[", "2", "]", ",", "block", ",", "2", ",", "dropRate", ")", "\n", "# 3rd block", "\n", "self", ".", "block3", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "2", "]", ",", "nChannels", "[", "3", "]", ",", "block", ",", "2", ",", "dropRate", ")", "\n", "\n", "# global average pooling and classifier", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nChannels", "[", "3", "]", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "if", "userelu", "else", "None", "\n", "self", ".", "nChannels", "=", "nChannels", "[", "3", "]", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.networks.WideResNet.forward": [[162, 176], ["networks.WideResNet.conv1", "networks.WideResNet.block1", "networks.WideResNet.block2", "networks.WideResNet.block3", "networks.WideResNet.bn1", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "networks.WideResNet.view", "networks.WideResNet.relu", "networks.WideResNet.size"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "block1", "(", "out", ")", "\n", "out", "=", "self", ".", "block2", "(", "out", ")", "\n", "out", "=", "self", ".", "block3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "\n", "if", "self", ".", "relu", "is", "not", "None", ":", "\n", "            ", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "out", ".", "size", "(", "3", ")", ")", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "self", ".", "nChannels", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.networks.dni_linear.__init__": [[187, 200], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.experiment.experiment.experiment.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dims", ",", "dni_hidden_size", "=", "1024", ")", ":", "\n", "        ", "super", "(", "dni_linear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "input_dims", ",", "dni_hidden_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "dni_hidden_size", ")", "\n", ")", "\n", "self", ".", "layer2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "dni_hidden_size", ",", "dni_hidden_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "dni_hidden_size", ")", "\n", ")", "\n", "self", ".", "layer3", "=", "nn", ".", "Linear", "(", "dni_hidden_size", ",", "input_dims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.networks.dni_linear.forward": [[201, 206], ["networks.dni_linear.layer1", "networks.dni_linear.layer2", "networks.dni_linear.layer3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "layer1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.networks.LinearDiag.__init__": [[211, 221], ["torch.Module.__init__", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.Parameter", "torch.Parameter", "torch.Parameter", "networks.LinearDiag.register_parameter", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.experiment.experiment.experiment.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "LinearDiag", ",", "self", ")", ".", "__init__", "(", ")", "\n", "weight", "=", "torch", ".", "FloatTensor", "(", "num_features", ")", ".", "fill_", "(", "1", ")", "# initialize to the identity transform", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "weight", ",", "requires_grad", "=", "True", ")", "\n", "\n", "if", "bias", ":", "\n", "            ", "bias", "=", "torch", ".", "FloatTensor", "(", "num_features", ")", ".", "fill_", "(", "0", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "bias", ",", "requires_grad", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.networks.LinearDiag.forward": [[222, 228], ["networks.LinearDiag.weight.expand_as", "X.dim", "X.size", "networks.LinearDiag.weight.size", "networks.LinearDiag.bias.expand_as"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "assert", "(", "X", ".", "dim", "(", ")", "==", "2", "and", "X", ".", "size", "(", "1", ")", "==", "self", ".", "weight", ".", "size", "(", "0", ")", ")", "\n", "out", "=", "X", "*", "self", ".", "weight", ".", "expand_as", "(", "X", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "out", "=", "out", "+", "self", ".", "bias", ".", "expand_as", "(", "out", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.networks.FeatExemplarAvgBlock.__init__": [[231, 233], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.experiment.experiment.experiment.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nFeat", ")", ":", "\n", "        ", "super", "(", "FeatExemplarAvgBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.networks.FeatExemplarAvgBlock.forward": [[234, 241], ["labels_train.transpose", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "weight_novel.div.div.div", "labels_train.transpose.sum().expand_as", "labels_train.transpose.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features_train", ",", "labels_train", ")", ":", "\n", "        ", "labels_train_transposed", "=", "labels_train", ".", "transpose", "(", "1", ",", "2", ")", "\n", "# B x nK x nT @ B x nT x nC = B x nK x nC", "\n", "weight_novel", "=", "torch", ".", "bmm", "(", "labels_train_transposed", ",", "features_train", ")", "\n", "weight_novel", "=", "weight_novel", ".", "div", "(", "\n", "labels_train_transposed", ".", "sum", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", ".", "expand_as", "(", "weight_novel", ")", ")", "\n", "return", "weight_novel", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.networks.label_to_1hot": [[178, 184], ["label.size", "range", "torch.cat().float", "torch.cat().float", "torch.cat().float", "labels.append", "torch.cat", "torch.cat", "torch.cat"], "function", ["None"], ["", "", "def", "label_to_1hot", "(", "label", ",", "K", ")", ":", "\n", "    ", "B", ",", "N", "=", "label", ".", "size", "(", ")", "\n", "labels", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "K", ")", ":", "\n", "        ", "labels", ".", "append", "(", "(", "label", "==", "i", ")", ".", "unsqueeze", "(", "2", ")", ")", "\n", "", "return", "torch", ".", "cat", "(", "labels", ",", "-", "1", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.networks.get_featnet": [[243, 255], ["networks.WideResNet", "ValueError", "eval"], "function", ["None"], ["", "", "def", "get_featnet", "(", "architecture", ",", "inputW", "=", "80", ",", "inputH", "=", "80", ")", ":", "\n", "# if cifar dataset, the last 2 blocks of WRN should be without stride", "\n", "    ", "isCifar", "=", "(", "inputW", "==", "32", ")", "or", "(", "inputH", "==", "32", ")", "\n", "if", "architecture", "==", "'WRN_28_10'", ":", "\n", "        ", "net", "=", "WideResNet", "(", "28", ",", "10", ",", "isCifar", "=", "isCifar", ")", "\n", "return", "net", ",", "net", ".", "nChannels", "\n", "\n", "", "elif", "architecture", "==", "'ConvNet_4_64'", ":", "\n", "        ", "return", "eval", "(", "architecture", ")", "(", "inputW", ",", "inputH", ")", ",", "64", "*", "(", "inputH", "/", "2", "**", "4", ")", "*", "(", "inputW", "/", "2", "**", "4", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'No such feature net available!'", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.AIM.blocked_grad.forward": [[18, 22], ["ctx.save_for_backward"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ",", "mask", ")", ":", "\n", "        ", "ctx", ".", "save_for_backward", "(", "x", ",", "mask", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.AIM.blocked_grad.backward": [[23, 27], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "x", ",", "mask", "=", "ctx", ".", "saved_tensors", "\n", "return", "grad_output", "*", "mask", ",", "mask", "*", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.AIM.GroupLinearLayer.__init__": [[31, 38], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "math.sqrt", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "math.sqrt", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.experiment.experiment.experiment.__init__"], ["    ", "def", "__init__", "(", "self", ",", "din", ",", "dout", ",", "num_blocks", ",", "topk", "=", "None", ")", ":", "\n", "        ", "super", "(", "GroupLinearLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "topk", "is", "None", ":", "\n", "            ", "self", ".", "w", "=", "nn", ".", "Parameter", "(", "math", ".", "sqrt", "(", "2.", "/", "din", ")", "*", "torch", ".", "randn", "(", "num_blocks", ",", "din", ",", "dout", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "w", "=", "nn", ".", "Parameter", "(", "math", ".", "sqrt", "(", "2.", "/", "(", "din", "*", "topk", ")", ")", "*", "torch", ".", "randn", "(", "num_blocks", ",", "din", ",", "dout", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.AIM.GroupLinearLayer.forward": [[39, 43], ["torch.bmm.permute", "torch.bmm.permute", "torch.bmm.permute", "torch.bmm.permute", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm.permute", "torch.bmm.permute", "torch.bmm.permute", "torch.bmm.permute"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "x", "=", "torch", ".", "bmm", "(", "x", ",", "self", ".", "w", ")", "\n", "return", "x", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.AIM.AIM.__init__": [[46, 71], ["torch.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "AIM.GroupLinearLayer", "AIM.GroupLinearLayer", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "AIM.AIM.modules", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "isinstance", "m.weight.data.normal_", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.experiment.experiment.experiment.__init__"], ["    ", "def", "__init__", "(", "self", ",", "out_class", ",", "input_size", ",", "hidden_size", ",", "num_units", ",", "topk", ",", "input_key_size", "=", "64", ",", "input_value_size", "=", "400", ",", "input_query_size", "=", "64", ",", "\n", "num_input_heads", "=", "1", ",", "input_dropout", "=", "0.1", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "out_class", "=", "out_class", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "num_units", "=", "num_units", "\n", "self", ".", "key_size", "=", "input_key_size", "\n", "self", ".", "topk", "=", "topk", "\n", "self", ".", "num_input_heads", "=", "num_input_heads", "\n", "self", ".", "input_key_size", "=", "input_key_size", "\n", "self", ".", "input_query_size", "=", "input_query_size", "\n", "self", ".", "input_value_size", "=", "input_value_size", "\n", "\n", "self", ".", "hs", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "num_units", ",", "self", ".", "hidden_size", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n", "self", ".", "key", "=", "nn", ".", "Linear", "(", "input_size", ",", "num_input_heads", "*", "input_key_size", ")", "\n", "self", ".", "value", "=", "nn", ".", "Linear", "(", "input_size", ",", "num_input_heads", "*", "input_value_size", ")", "\n", "self", ".", "hs_value", "=", "GroupLinearLayer", "(", "input_size", ",", "input_value_size", ",", "self", ".", "num_units", ")", "\n", "self", ".", "query", "=", "GroupLinearLayer", "(", "hidden_size", ",", "input_query_size", "*", "num_input_heads", ",", "self", ".", "num_units", ")", "\n", "self", ".", "input_dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "input_dropout", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "(", "m", ".", "in_features", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.AIM.AIM.transpose_for_scores": [[72, 76], ["x.view.view.view", "x.view.view.permute", "x.view.view.size"], "methods", ["None"], ["", "", "", "def", "transpose_for_scores", "(", "self", ",", "x", ",", "num_attention_heads", ",", "attention_head_size", ")", ":", "\n", "        ", "new_x_shape", "=", "x", ".", "size", "(", ")", "[", ":", "-", "1", "]", "+", "(", "num_attention_heads", ",", "attention_head_size", ")", "\n", "x", "=", "x", ".", "view", "(", "*", "new_x_shape", ")", "\n", "return", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.AIM.AIM.input_attention_mask": [[77, 127], ["torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "AIM.AIM.key", "AIM.AIM.query", "AIM.AIM.hs_value", "hs_value_layer.reshape().permute.reshape().permute.reshape().permute", "AIM.AIM.transpose_for_scores", "AIM.AIM.transpose_for_scores", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "numpy.arange", "numpy.repeat", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "h.unsqueeze", "torch.cat.unsqueeze().repeat().reshape", "torch.cat.unsqueeze().repeat().reshape", "torch.cat.unsqueeze().repeat().reshape", "torch.cat.unsqueeze().repeat().reshape", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "math.sqrt", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "attention_scores[].reshape", "hs_value_layer[].reshape", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "hs_value_layer.reshape().permute.reshape().permute.reshape", "AIM.AIM.transpose", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "hs_value_layer.reshape().permute.reshape().permute.size", "torch.cat.unsqueeze().repeat", "torch.cat.unsqueeze().repeat", "torch.cat.unsqueeze().repeat", "torch.cat.unsqueeze().repeat", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.topk.view", "torch.topk.view", "torch.topk.view", "torch.topk.view", "torch.topk.indices.view", "torch.topk.indices.view", "torch.topk.indices.view", "torch.topk.indices.view", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.zeros().cuda.to", "torch.zeros().cuda.to", "torch.zeros().cuda.to", "torch.zeros().cuda.to", "torch.zeros().cuda.to", "torch.zeros().cuda.to", "torch.zeros().cuda.to", "torch.zeros().cuda.to"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.aim.AIM.transpose_for_scores", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.aim.AIM.transpose_for_scores"], ["", "def", "input_attention_mask", "(", "self", ",", "x", ",", "h", ",", "eval", "=", "False", ",", "stochastic", "=", "None", ",", "mech_choice", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Input : x (batch_size, 2, input_size) [The null input is appended along the first dimension]\n                h (batch_size, num_units, hidden_size)\n        Output: inputs (list of size num_units with each element of shape (batch_size, input_value_size))\n                mask_ binary array of shape (batch_size, num_units) where 1 indicates active and 0 indicates inactive\n        \"\"\"", "\n", "\n", "size", "=", "x", ".", "size", "(", ")", "\n", "null_input", "=", "torch", ".", "zeros", "(", "size", "[", "0", "]", ",", "1", ",", "size", "[", "2", "]", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "null_input", ")", ",", "dim", "=", "1", ")", "\n", "key_layer", "=", "self", ".", "key", "(", "x", ")", "\n", "query_layer", "=", "self", ".", "query", "(", "h", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n", "hs_value_layer", "=", "self", ".", "hs_value", "(", "x", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "self", ".", "num_units", ",", "1", ")", ".", "reshape", "(", "x", ".", "size", "(", "0", ")", "*", "2", ",", "self", ".", "num_units", ",", "x", ".", "size", "(", "-", "1", ")", ")", ")", "# B*2 X num units X inval dim", "\n", "hs_value_layer", "=", "hs_value_layer", ".", "reshape", "(", "x", ".", "size", "(", "0", ")", ",", "2", ",", "self", ".", "num_units", ",", "self", ".", "input_value_size", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "# B X num units X 2 X inval dim", "\n", "\n", "key_layer", "=", "self", ".", "transpose_for_scores", "(", "key_layer", ",", "self", ".", "num_input_heads", ",", "self", ".", "input_key_size", ")", "\n", "query_layer", "=", "self", ".", "transpose_for_scores", "(", "query_layer", ",", "self", ".", "num_input_heads", ",", "self", ".", "input_query_size", ")", "\n", "\n", "attention_scores", "=", "torch", ".", "matmul", "(", "query_layer", ",", "key_layer", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", "/", "math", ".", "sqrt", "(", "self", ".", "input_key_size", ")", "\n", "attention_scores", "=", "torch", ".", "mean", "(", "attention_scores", ",", "dim", "=", "1", ")", "\n", "mask_", "=", "torch", ".", "zeros", "(", "x", ".", "size", "(", "0", ")", ",", "self", ".", "num_units", ")", ".", "cuda", "(", ")", "\n", "\n", "attention_scores", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "(", "attention_scores", ")", "\n", "not_null_scores", "=", "attention_scores", "[", ":", ",", ":", ",", "0", "]", "\n", "\n", "# hard threshold", "\n", "if", "stochastic", "is", "None", ":", "\n", "            ", "topk1", "=", "torch", ".", "topk", "(", "not_null_scores", ",", "self", ".", "topk", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "topk1", "=", "torch", ".", "topk", "(", "not_null_scores", ",", "mech_choice", ",", "dim", "=", "1", ")", ".", "indices", "[", ":", ",", "stochastic", "]", "\n", "", "row_index", "=", "np", ".", "arange", "(", "x", ".", "size", "(", "0", ")", ")", "\n", "row_index", "=", "np", ".", "repeat", "(", "row_index", ",", "self", ".", "topk", ")", "\n", "if", "stochastic", ":", "\n", "            ", "mask_", "[", "row_index", ",", "topk1", ".", "view", "(", "-", "1", ")", "]", "=", "1", "\n", "", "else", ":", "\n", "            ", "mask_", "[", "row_index", ",", "topk1", ".", "indices", ".", "view", "(", "-", "1", ")", "]", "=", "1", "\n", "\n", "", "hs_value", "=", "torch", ".", "einsum", "(", "'ijk,ijkl->ijl'", ",", "attention_scores", "[", "mask_", ".", "to", "(", "torch", ".", "bool", ")", "]", ".", "reshape", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ",", "2", ")", ",", "hs_value_layer", "[", "mask_", ".", "to", "(", "torch", ".", "bool", ")", "]", ".", "reshape", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ",", "2", ",", "hs_value_layer", ".", "size", "(", "3", ")", ")", ")", "\n", "\n", "\n", "# soft threshold", "\n", "# if stochastic is None:", "\n", "#     mask_[not_null_scores>0.5] = 1", "\n", "# else:", "\n", "#     mask_[not_null_scores>0.5 - random.uniform(0,0.3)] = 1", "\n", "# hs_value = torch.einsum('ijk,ijkl->ijl', attention_scores*mask_.to(torch.bool).unsqueeze(-1), hs_value_layer*mask_.to(torch.bool).unsqueeze(-1).unsqueeze(-1)) ", "\n", "\n", "return", "hs_value", ",", "mask_", ",", "not_null_scores", ",", "attention_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.AIM.AIM.forward": [[129, 145], ["AIM.AIM.input_attention_mask", "hs_value.sum"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.AIM.AIM.input_attention_mask"], ["", "def", "forward", "(", "self", ",", "x", ",", "return_score", "=", "False", ",", "stochastic", "=", "None", ",", "eval", "=", "False", ",", "mech_choice", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Input : x (batch_size, 1 , input_size)\n                hs (batch_size, num_units, hidden_size)\n                cs (batch_size, num_units, hidden_size)\n        Output: new hs, cs for LSTM\n                new hs for GRU\n        \"\"\"", "\n", "\n", "hs_value", ",", "mask", ",", "score", ",", "att_score", "=", "self", ".", "input_attention_mask", "(", "x", ",", "self", ".", "hs", ",", "eval", ",", "stochastic", ",", "mech_choice", ")", "\n", "out", "=", "hs_value", ".", "sum", "(", "dim", "=", "1", ")", "# B X in_dim", "\n", "\n", "if", "return_score", ":", "\n", "            ", "return", "out", ",", "score", ",", "mask", ",", "att_score", "\n", "", "else", ":", "\n", "            ", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.dataset.dataset_setting": [[18, 78], ["torchvision.Normalize", "torchvision.Compose", "torchvision.Compose", "torchvision.Normalize", "torchvision.Compose", "torchvision.Compose", "ValueError", "torchvision.RandomCrop", "torchvision.ColorJitter", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.CenterCrop", "torchvision.ToTensor", "numpy.asarray", "numpy.asarray", "torchvision.RandomCrop", "torchvision.ColorJitter", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.ToTensor", "numpy.asarray", "numpy.asarray"], "function", ["None"], ["def", "dataset_setting", "(", "dataset", ",", "nSupport", ")", ":", "\n", "    ", "\"\"\"\n    Return dataset setting\n\n    :param string dataset: name of dataset\n    :param int nSupport: number of support examples\n    \"\"\"", "\n", "if", "dataset", "==", "'miniImageNet'", ":", "\n", "        ", "mean", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "120.39586422", ",", "115.59361427", ",", "104.54012653", "]", "]", "\n", "std", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "70.68188272", ",", "68.27635443", ",", "72.54505529", "]", "]", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "mean", ",", "std", "=", "std", ")", "\n", "trainTransform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "RandomCrop", "(", "80", ",", "padding", "=", "8", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "lambda", "x", ":", "np", ".", "asarray", "(", "x", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "\n", "valTransform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "CenterCrop", "(", "80", ")", ",", "\n", "lambda", "x", ":", "np", ".", "asarray", "(", "x", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "]", ")", "\n", "\n", "inputW", ",", "inputH", ",", "nbCls", "=", "80", ",", "80", ",", "64", "\n", "\n", "trainDir", "=", "'./data/Mini-ImageNet/train/'", "\n", "valDir", "=", "'./data/Mini-ImageNet/val/'", "\n", "testDir", "=", "'./data/Mini-ImageNet/test/'", "\n", "episodeJson", "=", "'./data/Mini-ImageNet/val1000Episode_5_way_1_shot.json'", "if", "nSupport", "==", "1", "else", "'./data/Mini-ImageNet/val1000Episode_5_way_5_shot.json'", "\n", "\n", "", "elif", "dataset", "==", "'Cifar'", ":", "\n", "        ", "mean", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "129.37731888", ",", "124.10583864", ",", "112.47758569", "]", "]", "\n", "std", "=", "[", "x", "/", "255.0", "for", "x", "in", "[", "68.20947949", ",", "65.43124043", ",", "70.45866994", "]", "]", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "mean", ",", "std", "=", "std", ")", "\n", "trainTransform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "lambda", "x", ":", "np", ".", "asarray", "(", "x", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "\n", "valTransform", "=", "transforms", ".", "Compose", "(", "[", "lambda", "x", ":", "np", ".", "asarray", "(", "x", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "]", ")", "\n", "inputW", ",", "inputH", ",", "nbCls", "=", "32", ",", "32", ",", "64", "\n", "\n", "trainDir", "=", "'./data/cifar-fs/train/'", "\n", "valDir", "=", "'./data/cifar-fs/val/'", "\n", "testDir", "=", "'./data/cifar-fs/test/'", "\n", "episodeJson", "=", "'./data/cifar-fs/val1000Episode_5_way_1_shot.json'", "if", "nSupport", "==", "1", "else", "'./data/cifar-fs/val1000Episode_5_way_5_shot.json'", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Do not support other datasets yet.'", ")", "\n", "\n", "", "return", "trainTransform", ",", "valTransform", ",", "inputW", ",", "inputH", ",", "trainDir", ",", "valDir", ",", "testDir", ",", "episodeJson", ",", "nbCls", "\n", "", ""]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.train_feat.ClassifierEval.__init__": [[54, 63], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.experiment.experiment.experiment.__init__"], ["def", "__init__", "(", "self", ",", "nKnovel", ",", "nFeat", ")", ":", "\n", "        ", "super", "(", "ClassifierEval", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "nKnovel", "=", "nKnovel", "\n", "self", ".", "nFeat", "=", "nFeat", "\n", "\n", "# bias & scale of classifier", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "1", ")", ".", "fill_", "(", "0", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "scale_cls", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "1", ")", ".", "fill_", "(", "10", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.train_feat.ClassifierEval.apply_classification_weights": [[64, 73], ["torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "train_feat.ClassifierEval.bias.view", "torch.normalize.transpose", "torch.normalize.dim", "torch.normalize.dim"], "methods", ["None"], ["", "def", "apply_classification_weights", "(", "self", ",", "features", ",", "cls_weights", ")", ":", "\n", "        ", "'''\n        (B x n x nFeat, B x nKnovel x nFeat) -> B x n x nKnovel\n        (B x n x nFeat, B x nKnovel*nExamplar x nFeat) -> B x n x nKnovel*nExamplar if init_type is nn\n        '''", "\n", "features", "=", "F", ".", "normalize", "(", "features", ",", "p", "=", "2", ",", "dim", "=", "features", ".", "dim", "(", ")", "-", "1", ",", "eps", "=", "1e-12", ")", "\n", "cls_weights", "=", "F", ".", "normalize", "(", "cls_weights", ",", "p", "=", "2", ",", "dim", "=", "cls_weights", ".", "dim", "(", ")", "-", "1", ",", "eps", "=", "1e-12", ")", "\n", "cls_scores", "=", "self", ".", "scale_cls", "*", "torch", ".", "baddbmm", "(", "1.0", ",", "self", ".", "bias", ".", "view", "(", "1", ",", "1", ",", "1", ")", ",", "1.0", ",", "features", ",", "cls_weights", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "return", "cls_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.train_feat.ClassifierEval.forward": [[74, 85], ["features_supp.size", "features_supp.view().mean", "train_feat.ClassifierEval.apply_classification_weights", "features_supp.view"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.classifier.Classifier.apply_classification_weights"], ["", "def", "forward", "(", "self", ",", "features_supp", ",", "features_query", ")", ":", "\n", "        ", "'''\n        features_supp: (B, nKnovel * nExamplar, nFeat)\n        features_query: (B, nKnovel * nTest, nFeat)\n        '''", "\n", "B", "=", "features_supp", ".", "size", "(", "0", ")", "\n", "\n", "weight", "=", "features_supp", ".", "view", "(", "B", ",", "self", ".", "nKnovel", ",", "-", "1", ",", "self", ".", "nFeat", ")", ".", "mean", "(", "2", ")", "\n", "cls_scores", "=", "self", ".", "apply_classification_weights", "(", "features_query", ",", "weight", ")", "\n", "\n", "return", "cls_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.train_feat.ClassifierTrain.__init__": [[88, 107], ["torch.Module.__init__", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "numpy.sqrt", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.experiment.experiment.experiment.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nCls", ",", "nFeat", "=", "640", ",", "scaleCls", "=", "10.", ")", ":", "\n", "        ", "super", "(", "ClassifierTrain", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "scaleCls", "=", "scaleCls", "\n", "self", ".", "nFeat", "=", "nFeat", "\n", "self", ".", "nCls", "=", "nCls", "\n", "\n", "# weights of base categories", "\n", "self", ".", "weight", "=", "torch", ".", "FloatTensor", "(", "nFeat", ",", "nCls", ")", ".", "normal_", "(", "0.0", ",", "np", ".", "sqrt", "(", "2.0", "/", "nFeat", ")", ")", "# Dimension nFeat * nCls", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "self", ".", "weight", ",", "requires_grad", "=", "True", ")", "\n", "\n", "# bias", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "1", ",", "nCls", ")", ".", "fill_", "(", "0", ")", ",", "requires_grad", "=", "True", ")", "# Dimension 1 * nCls", "\n", "\n", "# Scale of cls (Heat Parameter)", "\n", "self", ".", "scaleCls", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "1", ")", ".", "fill_", "(", "scaleCls", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n", "# Method", "\n", "self", ".", "applyWeight", "=", "self", ".", "applyWeightCosine", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.train_feat.ClassifierTrain.getWeight": [[108, 110], ["None"], "methods", ["None"], ["", "def", "getWeight", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "scaleCls", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.train_feat.ClassifierTrain.applyWeightCosine": [[111, 119], ["torch.normalize.size", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm"], "methods", ["None"], ["", "def", "applyWeightCosine", "(", "self", ",", "feature", ",", "weight", ",", "bias", ",", "scaleCls", ")", ":", "\n", "        ", "batchSize", ",", "nFeat", "=", "feature", ".", "size", "(", ")", "\n", "\n", "feature", "=", "F", ".", "normalize", "(", "feature", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "eps", "=", "1e-12", ")", "## Attention: normalized along 2nd dimension!!!", "\n", "weight", "=", "F", ".", "normalize", "(", "weight", ",", "p", "=", "2", ",", "dim", "=", "0", ",", "eps", "=", "1e-12", ")", "## Attention: normalized along 1st dimension!!!", "\n", "\n", "clsScore", "=", "scaleCls", "*", "(", "torch", ".", "mm", "(", "feature", ",", "weight", ")", ")", "#+ bias)", "\n", "return", "clsScore", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.train_feat.ClassifierTrain.forward": [[120, 124], ["train_feat.ClassifierTrain.getWeight", "train_feat.ClassifierTrain.applyWeight"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.train_feat.ClassifierTrain.getWeight"], ["", "def", "forward", "(", "self", ",", "feature", ")", ":", "\n", "        ", "weight", ",", "bias", ",", "scaleCls", "=", "self", ".", "getWeight", "(", ")", "\n", "clsScore", "=", "self", ".", "applyWeight", "(", "feature", ",", "weight", ",", "bias", ",", "scaleCls", ")", "\n", "return", "clsScore", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.train_feat.BaseTrainer.__init__": [[128, 164], ["networks.get_featnet", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "os.path.isdir", "os.mkdir", "train_feat.ClassifierTrain", "train_feat.ClassifierEval", "train_feat.ClassifierTrain", "train_feat.ClassifierEval", "AIM.AIM.AIM", "train_feat.BaseTrainer.netFeat.cuda", "train_feat.BaseTrainer.netClassifier.cuda", "train_feat.BaseTrainer.netClassifierVal.cuda", "int", "int", "int", "train_feat.BaseTrainer.netAIM.cuda"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.networks.get_featnet", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.util.mkdir"], ["    ", "def", "__init__", "(", "self", ",", "trainLoader", ",", "valLoader", ",", "nbCls", ",", "nClsEpisode", ",", "nFeat", ",", "\n", "outDir", ",", "milestones", "=", "[", "50", "]", ",", "inputW", "=", "80", ",", "inputH", "=", "80", ",", "cuda", "=", "False", ",", "model", "=", "'WRN_28_10'", ",", "args", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "trainLoader", "=", "trainLoader", "\n", "self", ".", "valLoader", "=", "valLoader", "\n", "self", ".", "outDir", "=", "outDir", "\n", "self", ".", "milestones", "=", "milestones", "\n", "self", ".", "useAIM", "=", "args", ".", "useAIM", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "self", ".", "outDir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "self", ".", "outDir", ")", "\n", "\n", "# Define model", "\n", "", "self", ".", "netFeat", ",", "nFeat", "=", "get_featnet", "(", "model", ",", "inputW", ",", "inputH", ")", "\n", "if", "self", ".", "useAIM", ":", "\n", "            ", "self", ".", "netClassifier", "=", "ClassifierTrain", "(", "nbCls", ",", "args", ".", "in_value", ")", "\n", "self", ".", "netClassifierVal", "=", "ClassifierEval", "(", "nClsEpisode", ",", "args", ".", "in_value", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "netClassifier", "=", "ClassifierTrain", "(", "nbCls", ",", "int", "(", "nFeat", ")", ")", "\n", "self", ".", "netClassifierVal", "=", "ClassifierEval", "(", "nClsEpisode", ",", "int", "(", "nFeat", ")", ")", "\n", "\n", "# AIM model", "\n", "", "if", "self", ".", "useAIM", ":", "\n", "            ", "self", ".", "netAIM", "=", "AIM", "(", "args", ".", "nClsEpisode", ",", "int", "(", "nFeat", ")", ",", "args", ".", "rim_hidden", ",", "args", ".", "rim_units", ",", "args", ".", "topk", ",", "input_key_size", "=", "args", ".", "in_key", ",", "input_value_size", "=", "args", ".", "in_value", ",", "input_query_size", "=", "args", ".", "in_query", ",", "\n", "num_input_heads", "=", "args", ".", "in_heads", ",", "input_dropout", "=", "args", ".", "in_dropout", ")", "\n", "\n", "# GPU setting", "\n", "", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "cuda", "else", "'cpu'", ")", "\n", "if", "cuda", ":", "\n", "            ", "self", ".", "netFeat", ".", "cuda", "(", ")", "\n", "if", "self", ".", "useAIM", ":", "\n", "                ", "self", ".", "netAIM", ".", "cuda", "(", ")", "\n", "", "self", ".", "netClassifier", ".", "cuda", "(", ")", "\n", "self", ".", "netClassifierVal", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "bestAcc", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.train_feat.BaseTrainer.LrWarmUp": [[165, 265], ["print", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "train_feat.BaseTrainer.netFeat.train", "train_feat.BaseTrainer.netClassifier.train", "utils.outils.AverageMeter", "utils.outils.AverageMeter", "utils.outils.AverageMeter", "enumerate", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "train_feat.BaseTrainer.test", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "itertools.chain", "train_feat.BaseTrainer.netAIM.parameters", "itertools.chain", "utils.utils.to_device", "utils.utils.to_device", "train_feat.BaseTrainer.optimizer.zero_grad", "train_feat.BaseTrainer.netFeat", "train_feat.BaseTrainer.netClassifier", "train_feat.BaseTrainer.criterion", "train_feat.BaseTrainer.backward", "train_feat.BaseTrainer.optimizer.step", "utils.outils.accuracy", "utils.outils.AverageMeter.update", "utils.outils.AverageMeter.update", "utils.outils.AverageMeter.update", "utils.outils.progress_bar", "itertools.chain", "train_feat.BaseTrainer.netAIM.parameters", "itertools.chain", "train_feat.BaseTrainer.optimizer_aim.zero_grad", "rng.choice().tolist", "train_feat.BaseTrainer.netAIM", "train_feat.BaseTrainer.optimizer_aim.step", "train_feat.BaseTrainer.item", "acc1[].item", "acc5[].item", "len", "float", "float", "train_feat.BaseTrainer.unsqueeze", "utils.utils.to_device.size", "utils.utils.to_device.size", "utils.utils.to_device.size", "train_feat.BaseTrainer.netFeat.parameters", "train_feat.BaseTrainer.netClassifier.parameters", "train_feat.BaseTrainer.netFeat.parameters", "train_feat.BaseTrainer.netClassifier.parameters", "rng.choice", "train_feat.BaseTrainer.netFeat.parameters", "train_feat.BaseTrainer.netClassifier.parameters", "train_feat.BaseTrainer.netFeat.parameters", "train_feat.BaseTrainer.netClassifier.parameters"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.algorithm.Algorithm.train", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.algorithm.Algorithm.train", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.train_feat.BaseTrainer.test", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.parameters", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.to_device", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.to_device", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.zero_grad", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.aim.blocked_grad.backward", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.outils.accuracy", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.ProgressBar.update", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.ProgressBar.update", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.ProgressBar.update", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.outils.progress_bar", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.parameters", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.zero_grad", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.parameters", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.parameters", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.parameters", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.parameters", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.parameters", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.parameters", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.parameters", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.parameters"], ["", "def", "LrWarmUp", "(", "self", ",", "totalIter", ",", "lr", ",", "lr_hs", ")", ":", "\n", "        ", "msg", "=", "'\\nLearning rate warming up'", "\n", "print", "(", "msg", ")", "\n", "if", "self", ".", "useAIM", ":", "\n", "            ", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "itertools", ".", "chain", "(", "*", "[", "self", ".", "netFeat", ".", "parameters", "(", ")", ",", "\n", "self", ".", "netClassifier", ".", "parameters", "(", ")", "]", ")", ",", "\n", "1e-7", ",", "\n", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "5e-4", ",", "\n", "nesterov", "=", "True", ")", "\n", "self", ".", "optimizer_aim", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "self", ".", "netAIM", ".", "parameters", "(", ")", ",", "\n", "1e-7", "*", "5e0", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "itertools", ".", "chain", "(", "*", "[", "self", ".", "netFeat", ".", "parameters", "(", ")", ",", "\n", "self", ".", "netClassifier", ".", "parameters", "(", ")", "]", ")", ",", "\n", "1e-7", ",", "\n", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "5e-4", ",", "\n", "nesterov", "=", "True", ")", "\n", "\n", "", "nbIter", "=", "0", "\n", "lrUpdate", "=", "lr", "\n", "lrUpdate_hs", "=", "lr_hs", "\n", "valTop1", "=", "0", "\n", "\n", "while", "nbIter", "<", "totalIter", ":", "\n", "            ", "self", ".", "netFeat", ".", "train", "(", ")", "\n", "self", ".", "netClassifier", ".", "train", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "for", "batchIdx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "self", ".", "trainLoader", ")", ":", "\n", "                ", "nbIter", "+=", "1", "\n", "if", "nbIter", "==", "totalIter", ":", "\n", "                    ", "break", "\n", "\n", "", "lrUpdate", "=", "nbIter", "/", "float", "(", "totalIter", ")", "*", "lr", "\n", "for", "g", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "                    ", "g", "[", "'lr'", "]", "=", "lrUpdate", "\n", "", "lrUpdate_hs", "=", "nbIter", "/", "float", "(", "totalIter", ")", "*", "lr_hs", "\n", "if", "self", ".", "useAIM", ":", "\n", "                    ", "for", "g", "in", "self", ".", "optimizer_aim", ".", "param_groups", ":", "\n", "                        ", "g", "[", "'lr'", "]", "=", "lrUpdate_hs", "\n", "\n", "", "", "inputs", "=", "to_device", "(", "inputs", ",", "self", ".", "device", ")", "\n", "targets", "=", "to_device", "(", "targets", ",", "self", ".", "device", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "outputs", "=", "self", ".", "netFeat", "(", "inputs", ")", "\n", "if", "self", ".", "useAIM", ":", "\n", "                    ", "self", ".", "optimizer_aim", ".", "zero_grad", "(", ")", "\n", "rnd_idx", "=", "rng", ".", "choice", "(", "mech_choice", ",", "size", "=", "self", ".", "netAIM", ".", "topk", ",", "replace", "=", "False", ")", ".", "tolist", "(", ")", "\n", "outputs", "=", "self", ".", "netAIM", "(", "outputs", ".", "unsqueeze", "(", "1", ")", ",", "stochastic", "=", "rnd_idx", ",", "mech_choice", "=", "mech_choice", ")", "\n", "", "outputs", "=", "self", ".", "netClassifier", "(", "outputs", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "outputs", ",", "targets", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "if", "self", ".", "useAIM", ":", "\n", "                    ", "self", ".", "optimizer_aim", ".", "step", "(", ")", "\n", "\n", "", "acc1", ",", "acc5", "=", "accuracy", "(", "outputs", ",", "targets", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "\n", "msg", "=", "'Loss: {:.3f} | Lr : {:.5f} | Top1: {:.3f}% | Top5: {:.3f}%'", ".", "format", "(", "\n", "losses", ".", "avg", ",", "lrUpdate", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ")", "\n", "progress_bar", "(", "batchIdx", ",", "len", "(", "self", ".", "trainLoader", ")", ",", "msg", ")", "\n", "\n", "", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "valTop1", "=", "self", ".", "test", "(", "0", ")", "\n", "\n", "", "if", "self", ".", "useAIM", ":", "\n", "            ", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "itertools", ".", "chain", "(", "*", "[", "self", ".", "netFeat", ".", "parameters", "(", ")", ",", "self", ".", "netClassifier", ".", "parameters", "(", ")", "]", ")", ",", "\n", "lrUpdate", ",", "\n", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "5e-4", ",", "\n", "nesterov", "=", "True", ")", "\n", "self", ".", "optimizer_aim", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "self", ".", "netAIM", ".", "parameters", "(", ")", ",", "\n", "lrUpdate", "*", "5e0", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "itertools", ".", "chain", "(", "*", "[", "self", ".", "netFeat", ".", "parameters", "(", ")", ",", "\n", "self", ".", "netClassifier", ".", "parameters", "(", ")", "]", ")", ",", "\n", "lrUpdate", ",", "\n", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "5e-4", ",", "\n", "nesterov", "=", "True", ")", "\n", "\n", "", "self", ".", "lrScheduler", "=", "MultiStepLR", "(", "self", ".", "optimizer", ",", "milestones", "=", "self", ".", "milestones", ",", "gamma", "=", "0.1", ")", "\n", "if", "self", ".", "useAIM", ":", "\n", "            ", "self", ".", "lrScheduler_hs", "=", "MultiStepLR", "(", "self", ".", "optimizer_aim", ",", "milestones", "=", "self", ".", "milestones", ",", "gamma", "=", "0.1", ")", "\n", "", "return", "valTop1", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.train_feat.BaseTrainer.train": [[266, 305], ["print", "train_feat.BaseTrainer.netFeat.train", "train_feat.BaseTrainer.netClassifier.train", "utils.outils.AverageMeter", "utils.outils.AverageMeter", "utils.outils.AverageMeter", "enumerate", "train_feat.BaseTrainer.netAIM.train", "utils.utils.to_device", "utils.utils.to_device", "train_feat.BaseTrainer.optimizer.zero_grad", "train_feat.BaseTrainer.netFeat", "train_feat.BaseTrainer.netClassifier", "train_feat.BaseTrainer.criterion", "train_feat.BaseTrainer.backward", "train_feat.BaseTrainer.optimizer.step", "utils.outils.accuracy", "utils.outils.AverageMeter.update", "utils.outils.AverageMeter.update", "utils.outils.AverageMeter.update", "utils.outils.progress_bar", "train_feat.BaseTrainer.optimizer_aim.zero_grad", "rng.choice().tolist", "train_feat.BaseTrainer.netAIM", "train_feat.BaseTrainer.optimizer_aim.step", "train_feat.BaseTrainer.item", "acc1[].item", "acc5[].item", "len", "train_feat.BaseTrainer.unsqueeze", "utils.utils.to_device.size", "utils.utils.to_device.size", "utils.utils.to_device.size", "rng.choice"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.algorithm.Algorithm.train", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.algorithm.Algorithm.train", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.algorithm.Algorithm.train", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.to_device", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.to_device", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.zero_grad", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.aim.blocked_grad.backward", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.outils.accuracy", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.ProgressBar.update", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.ProgressBar.update", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.ProgressBar.update", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.outils.progress_bar", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.zero_grad"], ["", "def", "train", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "msg", "=", "'\\nTrain at Epoch: {:d}'", ".", "format", "(", "epoch", ")", "\n", "print", "(", "msg", ")", "\n", "\n", "self", ".", "netFeat", ".", "train", "(", ")", "\n", "self", ".", "netClassifier", ".", "train", "(", ")", "\n", "if", "self", ".", "useAIM", ":", "\n", "            ", "self", ".", "netAIM", ".", "train", "(", ")", "\n", "", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "for", "batchIdx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "self", ".", "trainLoader", ")", ":", "\n", "\n", "            ", "inputs", "=", "to_device", "(", "inputs", ",", "self", ".", "device", ")", "\n", "targets", "=", "to_device", "(", "targets", ",", "self", ".", "device", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "outputs", "=", "self", ".", "netFeat", "(", "inputs", ")", "\n", "if", "self", ".", "useAIM", ":", "\n", "                ", "self", ".", "optimizer_aim", ".", "zero_grad", "(", ")", "\n", "rnd_idx", "=", "rng", ".", "choice", "(", "mech_choice", ",", "size", "=", "self", ".", "netAIM", ".", "topk", ",", "replace", "=", "False", ")", ".", "tolist", "(", ")", "\n", "outputs", "=", "self", ".", "netAIM", "(", "outputs", ".", "unsqueeze", "(", "1", ")", ",", "stochastic", "=", "rnd_idx", ",", "mech_choice", "=", "mech_choice", ")", "\n", "", "outputs", "=", "self", ".", "netClassifier", "(", "outputs", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "outputs", ",", "targets", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "if", "self", ".", "useAIM", ":", "\n", "                ", "self", ".", "optimizer_aim", ".", "step", "(", ")", "\n", "\n", "", "acc1", ",", "acc5", "=", "accuracy", "(", "outputs", ",", "targets", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "\n", "msg", "=", "'Loss: {:.3f} | Top1: {:.3f}% | Top5: {:.3f}%'", ".", "format", "(", "losses", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ")", "\n", "progress_bar", "(", "batchIdx", ",", "len", "(", "self", ".", "trainLoader", ")", ",", "msg", ")", "\n", "\n", "", "return", "losses", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.train_feat.BaseTrainer.test": [[306, 352], ["print", "train_feat.BaseTrainer.netFeat.eval", "train_feat.BaseTrainer.netClassifierVal.eval", "utils.outils.AverageMeter", "enumerate", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "print", "train_feat.BaseTrainer.netAIM.eval", "utils.utils.to_device", "train_feat.BaseTrainer.netClassifierVal", "clsScore.view.view.view", "utils.outils.accuracy", "utils.outils.AverageMeter.update", "utils.outils.progress_bar", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "train_feat.BaseTrainer.netFeat.state_dict", "os.path.join", "train_feat.BaseTrainer.netClassifier.state_dict", "os.path.join", "data[].squeeze", "data[].squeeze", "data[].squeeze", "data[].squeeze", "train_feat.BaseTrainer.netFeat", "train_feat.BaseTrainer.netFeat", "SupportFeat.unsqueeze", "QueryFeat.unsqueeze", "acc1[].item", "len", "train_feat.BaseTrainer.netFeat.state_dict", "os.path.join", "train_feat.BaseTrainer.netClassifier.state_dict", "os.path.join", "train_feat.BaseTrainer.netAIM", "train_feat.BaseTrainer.netAIM", "QueryFeat.size", "clsScore.view.view.size", "SupportFeat.unsqueeze", "QueryFeat.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.to_device", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.outils.accuracy", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.ProgressBar.update", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.outils.progress_bar", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save"], ["", "def", "test", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "msg", "=", "'\\nTest at Epoch: {:d}'", ".", "format", "(", "epoch", ")", "\n", "print", "(", "msg", ")", "\n", "\n", "self", ".", "netFeat", ".", "eval", "(", ")", "\n", "self", ".", "netClassifierVal", ".", "eval", "(", ")", "\n", "if", "self", ".", "useAIM", ":", "\n", "            ", "self", ".", "netAIM", ".", "eval", "(", ")", "\n", "\n", "", "top1", "=", "AverageMeter", "(", ")", "\n", "\n", "for", "batchIdx", ",", "data", "in", "enumerate", "(", "self", ".", "valLoader", ")", ":", "\n", "            ", "data", "=", "to_device", "(", "data", ",", "self", ".", "device", ")", "\n", "\n", "SupportTensor", ",", "SupportLabel", ",", "QueryTensor", ",", "QueryLabel", "=", "data", "[", "'SupportTensor'", "]", ".", "squeeze", "(", "0", ")", ",", "data", "[", "'SupportLabel'", "]", ".", "squeeze", "(", "0", ")", ",", "data", "[", "'QueryTensor'", "]", ".", "squeeze", "(", "0", ")", ",", "data", "[", "'QueryLabel'", "]", ".", "squeeze", "(", "0", ")", "\n", "\n", "SupportFeat", ",", "QueryFeat", "=", "self", ".", "netFeat", "(", "SupportTensor", ")", ",", "self", ".", "netFeat", "(", "QueryTensor", ")", "\n", "if", "self", ".", "useAIM", ":", "\n", "                ", "SupportFeat", ",", "QueryFeat", "=", "self", ".", "netAIM", "(", "SupportFeat", ".", "unsqueeze", "(", "1", ")", ")", ",", "self", ".", "netAIM", "(", "QueryFeat", ".", "unsqueeze", "(", "1", ")", ")", "\n", "", "SupportFeat", ",", "QueryFeat", "=", "SupportFeat", ".", "unsqueeze", "(", "0", ")", ",", "QueryFeat", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "clsScore", "=", "self", ".", "netClassifierVal", "(", "SupportFeat", ",", "QueryFeat", ")", "\n", "clsScore", "=", "clsScore", ".", "view", "(", "QueryFeat", ".", "size", "(", ")", "[", "1", "]", ",", "-", "1", ")", "\n", "\n", "acc1", "=", "accuracy", "(", "clsScore", ",", "QueryLabel", ",", "topk", "=", "(", "1", ",", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ".", "item", "(", ")", ",", "clsScore", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "msg", "=", "'Top1: {:.3f}%'", ".", "format", "(", "top1", ".", "avg", ")", "\n", "progress_bar", "(", "batchIdx", ",", "len", "(", "self", ".", "valLoader", ")", ",", "msg", ")", "\n", "\n", "## Save checkpoint.", "\n", "", "acc", "=", "top1", ".", "avg", "\n", "if", "acc", ">", "self", ".", "bestAcc", ":", "\n", "            ", "print", "(", "'Saving Best'", ")", "\n", "torch", ".", "save", "(", "self", ".", "netFeat", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "self", ".", "outDir", ",", "'netFeatBest.pth'", ")", ")", "\n", "torch", ".", "save", "(", "self", ".", "netClassifier", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "self", ".", "outDir", ",", "'netClsBest.pth'", ")", ")", "\n", "self", ".", "bestAcc", "=", "acc", "\n", "\n", "", "print", "(", "'Saving Last'", ")", "\n", "torch", ".", "save", "(", "self", ".", "netFeat", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "self", ".", "outDir", ",", "'netFeatLast.pth'", ")", ")", "\n", "torch", ".", "save", "(", "self", ".", "netClassifier", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "self", ".", "outDir", ",", "'netClsLast.pth'", ")", ")", "\n", "\n", "msg", "=", "'Best Performance: {:.3f}'", ".", "format", "(", "self", ".", "bestAcc", ")", "\n", "print", "(", "msg", ")", "\n", "return", "top1", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.clue.CLUE.__init__": [[43, 97], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "clue.CLUE.netFeat.load_state_dict", "clue.CLUE.logger.info", "clue.CLUE.netRIM.load_state_dict", "clue.CLUE.logger.info", "clue.CLUE.load_ckpt", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.algorithm.Algorithm.load_ckpt"], ["def", "__init__", "(", "self", ",", "args", ",", "logger", ",", "netFeat", ",", "netClass", ",", "netRIM", ",", "optimizer", ",", "optimizerRIM", ",", "criterion", ",", "criterionRIM", ")", ":", "\n", "        ", "self", ".", "netFeat", "=", "netFeat", "\n", "self", ".", "netClass", "=", "netClass", "\n", "self", ".", "netRIM", "=", "netRIM", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "optimizerRIM", "=", "optimizerRIM", "\n", "self", ".", "criterion", "=", "criterion", "\n", "self", ".", "criterionRIM", "=", "criterionRIM", "\n", "\n", "self", ".", "nbIter", "=", "args", ".", "nbIter", "\n", "self", ".", "tStep", "=", "args", ".", "tStep", "\n", "self", ".", "aStep", "=", "args", ".", "aStep", "\n", "self", ".", "outDir", "=", "args", ".", "outDir", "\n", "self", ".", "nFeat", "=", "args", ".", "nFeat", "\n", "self", ".", "nUnit", "=", "args", ".", "rim_units", "\n", "self", ".", "nHidden", "=", "args", ".", "rim_hidden", "\n", "self", ".", "batchSize", "=", "args", ".", "batchSize", "\n", "self", ".", "nEpisode", "=", "args", ".", "nEpisode", "\n", "self", ".", "momentum", "=", "args", ".", "momentum", "\n", "self", ".", "weightDecay", "=", "args", ".", "weightDecay", "\n", "\n", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "args", ".", "cuda", "else", "'cpu'", ")", "\n", "\n", "# Load pretrained model", "\n", "if", "args", ".", "resumeFeatPth", ":", "\n", "            ", "if", "args", ".", "cuda", ":", "\n", "                ", "param", "=", "torch", ".", "load", "(", "args", ".", "resumeFeatPth", ")", "\n", "", "else", ":", "\n", "                ", "param", "=", "torch", ".", "load", "(", "args", ".", "resumeFeatPth", ",", "map_location", "=", "'cpu'", ")", "\n", "", "self", ".", "netFeat", ".", "load_state_dict", "(", "param", ")", "\n", "msg", "=", "'\\nLoading netFeat from {}'", ".", "format", "(", "args", ".", "resumeFeatPth", ")", "\n", "self", ".", "logger", ".", "info", "(", "msg", ")", "\n", "", "if", "args", ".", "resumeRIMPth", ":", "\n", "            ", "if", "args", ".", "cuda", ":", "\n", "                ", "param", "=", "torch", ".", "load", "(", "args", ".", "resumeRIMPth", ")", "\n", "", "else", ":", "\n", "                ", "param", "=", "torch", ".", "load", "(", "args", ".", "resumeRIMPth", ",", "map_location", "=", "'cpu'", ")", "\n", "", "self", ".", "netRIM", ".", "load_state_dict", "(", "param", ")", "\n", "msg", "=", "'\\nLoading netRIM from {}'", ".", "format", "(", "args", ".", "resumeRIMPth", ")", "\n", "self", ".", "logger", ".", "info", "(", "msg", ")", "\n", "# if args.resumeClassPth:", "\n", "#     if args.cuda:", "\n", "#         param = torch.load(args.resumeClassPth)", "\n", "#     else:", "\n", "#         param = torch.load(args.resumeClassPth, map_location='cpu')", "\n", "#     self.netClass.load_state_dict(param)", "\n", "#     msg = '\\nLoading netClass from {}'.format(args.resumeClassPth)", "\n", "#     self.logger.info(msg)", "\n", "", "self", ".", "hs", "=", "torch", ".", "randn", "(", "self", ".", "nUnit", ",", "self", ".", "nHidden", ")", ".", "cuda", "(", ")", "\n", "self", ".", "cs", "=", "torch", ".", "randn", "(", "self", ".", "nUnit", ",", "self", ".", "nHidden", ")", ".", "cuda", "(", ")", "\n", "if", "args", ".", "test", ":", "\n", "            ", "self", ".", "load_ckpt", "(", "args", ".", "ckptPth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.clue.CLUE.load_ckpt": [[99, 129], ["torch.load", "torch.load", "torch.load", "torch.load", "clue.CLUE.netFeat.load_state_dict", "clue.CLUE.netClass.load_state_dict", "clue.CLUE.netRIM.load_state_dict", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "clue.CLUE.logger.info", "clue.CLUE.netFeat.parameters", "clue.CLUE.netRIM.parameters", "clue.CLUE.netClass.parameters"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.parameters", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.parameters", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.parameters"], ["", "", "def", "load_ckpt", "(", "self", ",", "ckptPth", ")", ":", "\n", "        ", "\"\"\"\n        Load checkpoint from ckptPth.\n\n        :param ckptPth: the path to the ckpt\n        :type ckptPth: string\n        \"\"\"", "\n", "param", "=", "torch", ".", "load", "(", "ckptPth", ")", "\n", "self", ".", "netFeat", ".", "load_state_dict", "(", "param", "[", "'netFeat'", "]", ")", "\n", "self", ".", "netClass", ".", "load_state_dict", "(", "param", "[", "'netClass'", "]", ")", "\n", "self", ".", "netRIM", ".", "load_state_dict", "(", "param", "[", "'netRIM'", "]", ")", "\n", "tStep", "=", "param", "[", "'tStep'", "]", "\n", "aStep", "=", "param", "[", "'aStep'", "]", "\n", "self", ".", "hs", "=", "param", "[", "'hs'", "]", "\n", "self", ".", "cs", "=", "param", "[", "'cs'", "]", "\n", "lr", "=", "param", "[", "'lr'", "]", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "[", "\n", "{", "\"params\"", ":", "self", ".", "netFeat", ".", "parameters", "(", ")", "}", ",", "\n", "# {\"params\": self.netRIM.parameters()},", "\n", "{", "\"params\"", ":", "self", ".", "netRIM", ".", "parameters", "(", ")", ",", "\"lr\"", ":", "0.005", "}", ",", "\n", "{", "\"params\"", ":", "self", ".", "netClass", ".", "parameters", "(", ")", "}", ",", "\n", "]", ",", "\n", "# itertools.chain(*[self.netClass.parameters(),self.netFeat.parameters(),self.netRIM.parameters()]),", "\n", "lr", ",", "\n", "momentum", "=", "self", ".", "momentum", ",", "\n", "weight_decay", "=", "self", ".", "weightDecay", ",", "\n", "nesterov", "=", "True", ")", "\n", "msg", "=", "'\\nLoading networks from {}'", ".", "format", "(", "ckptPth", ")", "\n", "self", ".", "logger", ".", "info", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.clue.CLUE.validate": [[132, 205], ["utils.outils.AverageMeter", "clue.CLUE.netFeat.eval", "clue.CLUE.netRIM.train", "clue.CLUE.netClass.train", "range", "utils.outils.getCi", "clue.CLUE.logger.info", "clue.CLUE.logger.info", "utils.utils.to_device", "clue.CLUE.netFeat().view", "clue.CLUE.netFeat().view", "clue.CLUE.netClass", "clsScore.view.view.view", "QueryLabel.view.view.view", "utils.outils.accuracy", "utils.outils.AverageMeter.update", "utils.outils.progress_bar", "episodeAccLog.append", "len", "clue.CLUE.logger.info", "iter", "ValueError", "iter.getEpisode", "next", "data[].squeeze", "data[].squeeze", "data[].squeeze", "data[].squeeze", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "SupportLabel.unsqueeze.unsqueeze.unsqueeze", "clue.CLUE.detach", "acc1[].item", "acc1[].item", "clue.CLUE.netFeat", "clue.CLUE.netFeat"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.algorithm.Algorithm.train", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.algorithm.Algorithm.train", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.outils.getCi", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.to_device", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.outils.accuracy", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.ProgressBar.update", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.outils.progress_bar", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.dataloader.EpisodeSampler_feat.getEpisode"], ["", "def", "validate", "(", "self", ",", "valLoader", ",", "lr", "=", "None", ",", "mode", "=", "'val'", ")", ":", "\n", "        ", "\"\"\"\n        Run one epoch on val-set.\n\n        :param valLoader: the dataloader of val-set\n        :type valLoader: class `ValLoader`\n        :param float lr: learning rate for synthetic GD\n        :param string mode: 'val' or 'train'\n        \"\"\"", "\n", "if", "mode", "==", "'test'", ":", "\n", "            ", "nEpisode", "=", "self", ".", "nEpisode", "\n", "self", ".", "logger", ".", "info", "(", "'\\n\\nTest mode: randomly sample {:d} episodes...'", ".", "format", "(", "nEpisode", ")", ")", "\n", "", "elif", "mode", "==", "'val'", ":", "\n", "            ", "nEpisode", "=", "len", "(", "valLoader", ")", "\n", "self", ".", "logger", ".", "info", "(", "'\\n\\nValidation mode: pre-defined {:d} episodes...'", ".", "format", "(", "nEpisode", ")", ")", "\n", "valLoader", "=", "iter", "(", "valLoader", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'mode is wrong!'", ")", "\n", "\n", "", "episodeAccLog", "=", "[", "]", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "\n", "self", ".", "netFeat", ".", "eval", "(", ")", "\n", "# self.netFeat.train()", "\n", "self", ".", "netRIM", ".", "train", "(", ")", "\n", "self", ".", "netClass", ".", "train", "(", ")", "\n", "#self.netSIB.eval() # set train mode, since updating bn helps to estimate better gradient", "\n", "\n", "if", "lr", "is", "None", ":", "\n", "            ", "lr", "=", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "\n", "#for batchIdx, data in enumerate(valLoader):", "\n", "", "for", "batchIdx", "in", "range", "(", "nEpisode", ")", ":", "\n", "            ", "data", "=", "valLoader", ".", "getEpisode", "(", ")", "if", "mode", "==", "'test'", "else", "next", "(", "valLoader", ")", "\n", "data", "=", "to_device", "(", "data", ",", "self", ".", "device", ")", "\n", "\n", "SupportTensor", ",", "SupportLabel", ",", "QueryTensor", ",", "QueryLabel", "=", "data", "[", "'SupportTensor'", "]", ".", "squeeze", "(", "0", ")", ",", "data", "[", "'SupportLabel'", "]", ".", "squeeze", "(", "0", ")", ",", "data", "[", "'QueryTensor'", "]", ".", "squeeze", "(", "0", ")", ",", "data", "[", "'QueryLabel'", "]", ".", "squeeze", "(", "0", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "SupportLabel", "=", "SupportLabel", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "# if batchIdx==0:", "\n", "#     self.hs, self.cs = self.hs.unsqueeze(0).repeat(QueryTensor.shape[0], 1, 1), \\", "\n", "#         self.cs.unsqueeze(0).repeat(QueryTensor.shape[0], 1, 1)", "\n", "\n", "# QUERY", "\n", "# QueryFeat = self.netFeat(QueryTensor).view(self.batchSize, -1, self.nFeat)", "\n", "# self.hs, self.cs, gradFeat = self.netRIM(QueryFeat.permute(1,0,2).detach(), self.hs.detach(), self.cs.detach())", "\n", "# params = self.netFeat.transUpdate(QueryFeat.squeeze(0), gradFeat, lr=lr)", "\n", "\n", "# QueryFeat = self.netFeat(QueryTensor, params).view(self.batchSize, -1, self.nFeat)", "\n", "# SupportFeat = self.netFeat(SupportTensor, params).view(self.batchSize, -1, self.nFeat)", "\n", "", "QueryFeat", "=", "self", ".", "netFeat", "(", "QueryTensor", ")", ".", "view", "(", "self", ".", "batchSize", ",", "-", "1", ",", "self", ".", "nFeat", ")", "\n", "SupportFeat", "=", "self", ".", "netFeat", "(", "SupportTensor", ")", ".", "view", "(", "self", ".", "batchSize", ",", "-", "1", ",", "self", ".", "nFeat", ")", "\n", "clsScore", "=", "self", ".", "netClass", "(", "SupportFeat", ".", "detach", "(", ")", ",", "QueryFeat", ",", "SupportLabel", ")", "\n", "clsScore", "=", "clsScore", ".", "view", "(", "QueryFeat", ".", "shape", "[", "0", "]", "*", "QueryFeat", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", "QueryLabel", "=", "QueryLabel", ".", "view", "(", "-", "1", ")", "\n", "\n", "acc1", "=", "accuracy", "(", "clsScore", ",", "QueryLabel", ",", "topk", "=", "(", "1", ",", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ".", "item", "(", ")", ",", "clsScore", ".", "shape", "[", "0", "]", ")", "\n", "\n", "msg", "=", "'Top1: {:.3f}%'", ".", "format", "(", "top1", ".", "avg", ")", "\n", "progress_bar", "(", "batchIdx", ",", "nEpisode", ",", "msg", ")", "\n", "episodeAccLog", ".", "append", "(", "acc1", "[", "0", "]", ".", "item", "(", ")", ")", "\n", "\n", "# Take average over batch across hidden and cell states", "\n", "# self.hs, self.cs = torch.mean(self.hs, dim=0), torch.mean(self.cs, dim=0)            ", "\n", "\n", "", "mean", ",", "ci95", "=", "getCi", "(", "episodeAccLog", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Final Perf with 95% confidence intervals: {:.3f}%, {:.3f}%'", ".", "format", "(", "mean", ",", "ci95", ")", ")", "\n", "return", "mean", ",", "ci95", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.clue.CLUE.train": [[207, 357], ["clue.CLUE.validate", "clue.CLUE.logger.info", "clue.CLUE.netFeat.eval", "clue.CLUE.netClass.train", "clue.CLUE.netRIM.train", "utils.outils.AverageMeter", "utils.outils.AverageMeter", "range", "trainLoader.getBatch", "utils.utils.to_device", "clue.CLUE.netFeat().view", "clue.CLUE.netFeat().view", "clue.CLUE.netClass", "clsScore.view.view.view", "QueryLabel.view.view.view", "clue.CLUE.criterion", "clue.CLUE.optimizer.zero_grad", "clue.CLUE.backward", "clue.CLUE.optimizer.step", "utils.outils.accuracy", "utils.outils.AverageMeter.update", "utils.outils.AverageMeter.update", "utils.outils.progress_bar", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "clue.CLUE.detach", "clue.CLUE.detach", "acc1[].item", "clue.CLUE.item", "clue.CLUE.validate", "clue.CLUE.logger.info", "torch.save", "torch.save", "torch.save", "torch.save", "clue.CLUE.logger.info", "history[].append", "history[].append", "history[].append", "utils.outils.AverageMeter", "utils.outils.AverageMeter", "SupportTensor.reshape", "QueryTensor.reshape", "clue.CLUE.netFeat", "clue.CLUE.netFeat", "clue.CLUE.logger.info", "clue.CLUE.logger.info", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "os.path.join", "clue.CLUE.netFeat.state_dict", "clue.CLUE.netClass.state_dict", "clue.CLUE.netRIM.state_dict", "clue.CLUE.netFeat.state_dict", "clue.CLUE.netClass.state_dict", "clue.CLUE.netRIM.state_dict"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.algorithm.Algorithm.validate", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.algorithm.Algorithm.train", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.algorithm.Algorithm.train", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.dataloader.BatchSampler_feat.getBatch", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.to_device", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.zero_grad", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.aim.blocked_grad.backward", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.outils.accuracy", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.ProgressBar.update", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.ProgressBar.update", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.outils.progress_bar", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.algorithm.Algorithm.validate", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save"], ["", "def", "train", "(", "self", ",", "trainLoader", ",", "valLoader", ",", "lr", "=", "None", ",", "coeffGrad", "=", "0.0", ")", ":", "\n", "        ", "\"\"\"\n        Run one epoch on train-set.\n\n        :param trainLoader: the dataloader of train-set\n        :type trainLoader: class `TrainLoader`\n        :param valLoader: the dataloader of val-set\n        :type valLoader: class `ValLoader`\n        :param float lr: learning rate for synthetic GD\n        :param float coeffGrad: deprecated\n        \"\"\"", "\n", "bestAcc", ",", "ci", "=", "self", ".", "validate", "(", "valLoader", ",", "lr", "=", "lr", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Acc improved over validation set from 0% ---> {:.3f} +- {:.3f}%'", ".", "format", "(", "bestAcc", ",", "ci", ")", ")", "\n", "\n", "self", ".", "netFeat", ".", "eval", "(", ")", "\n", "# self.netFeat.train()", "\n", "self", ".", "netClass", ".", "train", "(", ")", "\n", "self", ".", "netRIM", ".", "train", "(", ")", "\n", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "history", "=", "{", "'trainLoss'", ":", "[", "]", ",", "'trainAcc'", ":", "[", "]", ",", "'valAcc'", ":", "[", "]", "}", "\n", "\n", "for", "episode", "in", "range", "(", "self", ".", "nbIter", ")", ":", "\n", "            ", "data", "=", "trainLoader", ".", "getBatch", "(", ")", "\n", "data", "=", "to_device", "(", "data", ",", "self", ".", "device", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "SupportTensor", ",", "SupportLabel", ",", "QueryTensor", ",", "QueryLabel", "=", "data", "[", "'SupportTensor'", "]", ",", "data", "[", "'SupportLabel'", "]", ",", "data", "[", "'QueryTensor'", "]", ",", "data", "[", "'QueryLabel'", "]", "\n", "nC", ",", "nH", ",", "nW", "=", "SupportTensor", ".", "shape", "[", "2", ":", "]", "\n", "SupportTensor", ",", "QueryTensor", "=", "SupportTensor", ".", "reshape", "(", "-", "1", ",", "nC", ",", "nH", ",", "nW", ")", ",", "QueryTensor", ".", "reshape", "(", "-", "1", ",", "nC", ",", "nH", ",", "nW", ")", "\n", "", "if", "lr", "is", "None", ":", "\n", "                ", "lr", "=", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "\n", "", "'''\n            # Duplicate averaged hidden and cell states across batch dim of support\n            # Query Set training\n            # for _ in range(self.tStep):\n            # for _ in range(self.aStep): # transductive learning using causal information\n            # SupportFeat, QueryFeat = self.netFeat(SupportTensor, params=featParams), self.netFeat(QueryTensor, params=featParams)\n            self.hs, self.cs = self.hs.unsqueeze(0).repeat(SupportTensor.shape[0], 1, 1), \\\n                 self.cs.unsqueeze(0).repeat(SupportTensor.shape[0], 1, 1)\n            \n            SupportFeat = self.netFeat(SupportTensor).view(self.batchSize, -1, self.nFeat)\n            SupportFeat.retain_grad()\n            clsScore = self.netClass(SupportFeat.detach(), SupportFeat, SupportLabel).view(SupportFeat.shape[0] * SupportFeat.shape[1], -1)\n            loss = self.criterion(clsScore, SupportLabel.view(-1))\n            # print('l296:', 'loss', loss.item(), 'clsScore', clsScore.sum().item(), 'SupportLabel', SupportLabel.sum().item())\n            self.optimizer.zero_grad()\n            loss.backward()\n\n            self.hs, self.cs, gradFeat = self.netRIM(SupportFeat.permute(1,0,2).detach(), self.hs.detach(), self.cs.detach())\n            lossRIM = self.criterionRIM(gradFeat, SupportFeat.grad.squeeze(0))\n            # print('l302:', 'lossRIM', lossRIM.item(), 'gradFeat', gradFeat.sum().item(), 'supportFeat.grad', SupportFeat.grad.squeeze(0).sum().item())\n            lossRIM.backward()            \n            # print('rimlinear', torch.sum(self.netRIM.gradFeatLinear.weight).cpu().item(), 'rimlinear_grad', torch.sum(self.netRIM.gradFeatLinear.weight.grad).cpu().item())\n            self.optimizerRIM.step()\n            # Take average over batch across hidden and cell states\n            self.hs, self.cs = torch.mean(self.hs, dim=0), torch.mean(self.cs, dim=0)   \n            # Duplicate averaged hidden and cell states across batch dim of query\n            self.hs, self.cs = self.hs.unsqueeze(0).repeat(QueryTensor.shape[0], 1, 1), \\\n                 self.cs.unsqueeze(0).repeat(QueryTensor.shape[0], 1, 1)\n            \n            # QUERY\n            QueryFeat = self.netFeat(QueryTensor).view(self.batchSize, -1, self.nFeat)\n            # if (QueryFeat!=QueryFeat).any():\n            #     import pdb; pdb.set_trace()\n            self.hs, self.cs, gradFeat = self.netRIM(QueryFeat.permute(1,0,2).detach(), self.hs.detach(), self.cs.detach())\n            params = self.netFeat.transUpdate(QueryFeat.squeeze(0), gradFeat.detach(), lr=lr)\n            # self.netFeat.set_params(params)\n            '''", "\n", "\n", "# self.netFeat.transUpdate(SupportFeat.squeeze(0), gradFeat, lr=lr)", "\n", "SupportFeat", "=", "self", ".", "netFeat", "(", "SupportTensor", ")", ".", "view", "(", "self", ".", "batchSize", ",", "-", "1", ",", "self", ".", "nFeat", ")", "\n", "QueryFeat", "=", "self", ".", "netFeat", "(", "QueryTensor", ")", ".", "view", "(", "self", ".", "batchSize", ",", "-", "1", ",", "self", ".", "nFeat", ")", "\n", "# SupportFeat = self.netFeat(SupportTensor, params).view(self.batchSize, -1, self.nFeat)", "\n", "# QueryFeat = self.netFeat(QueryTensor, params).view(self.batchSize, -1, self.nFeat)", "\n", "# QueryFeat.retain_grad()", "\n", "clsScore", "=", "self", ".", "netClass", "(", "SupportFeat", ".", "detach", "(", ")", ",", "QueryFeat", ".", "detach", "(", ")", ",", "SupportLabel", ")", "\n", "clsScore", "=", "clsScore", ".", "view", "(", "QueryFeat", ".", "shape", "[", "0", "]", "*", "QueryFeat", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", "QueryLabel", "=", "QueryLabel", ".", "view", "(", "-", "1", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "clsScore", ",", "QueryLabel", ")", "\n", "# print('l340:', 'loss', loss.item(), 'clsScore', clsScore.sum().item(), 'QueryLbel', QueryLabel.sum().item())", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "# lossRIM = self.criterionRIM(gradFeat, QueryFeat.grad.squeeze(0).detach())", "\n", "# lossRIM.backward()", "\n", "# print('l345', 'lossRIM', lossRIM.item(), 'gradFeat', gradFeat.sum().item(), 'QueryFeat.grad', QueryFeat.grad.squeeze(0).sum().item())", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "# self.optimizerRIM.step()", "\n", "# SupportFeat = self.netFeat(SupportTensor).view(self.batchSize, -1, self.nFeat)", "\n", "# clsScore = self.netClass.trans_inference(SupportFeat.detach(), QueryFeat, SupportLabel, gradClass)", "\n", "# self.netFeat.set_params(featParams)", "\n", "# print('rimlinear', self.netRIM.gradFeatLinear.weight, 'rimlinear_grad', self.netRIM.gradFeatLinear.weight.grad)", "\n", "# print('key', self.netRIM.key.weight, 'key_grad', self.netRIM.key.weight.grad)", "\n", "# print('rimlinear', torch.sum(self.netRIM.gradFeatLinear.weight).cpu().item(), 'rimlinear_grad', torch.sum(self.netRIM.gradFeatLinear.weight.grad).cpu().item())", "\n", "\n", "# Take average over batch across hidden and cell states", "\n", "# self.hs, self.cs = torch.mean(self.hs, dim=0), torch.mean(self.cs, dim=0)   ", "\n", "\n", "acc1", "=", "accuracy", "(", "clsScore", ",", "QueryLabel", ",", "topk", "=", "(", "1", ",", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ".", "item", "(", ")", ",", "clsScore", ".", "shape", "[", "0", "]", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "QueryFeat", ".", "shape", "[", "1", "]", ")", "\n", "msg", "=", "'Loss: {:.3f} | Top1: {:.3f}% '", ".", "format", "(", "losses", ".", "avg", ",", "top1", ".", "avg", ")", "\n", "progress_bar", "(", "episode", ",", "self", ".", "nbIter", ",", "msg", ")", "\n", "\n", "if", "episode", "%", "1000", "==", "999", ":", "\n", "                ", "acc", ",", "_", "=", "self", ".", "validate", "(", "valLoader", ",", "lr", "=", "lr", ")", "\n", "\n", "if", "acc", ">", "bestAcc", ":", "\n", "                    ", "msg", "=", "'Acc improved over validation set from {:.3f}% ---> {:.3f}%'", ".", "format", "(", "bestAcc", ",", "acc", ")", "\n", "self", ".", "logger", ".", "info", "(", "msg", ")", "\n", "hs", ",", "cs", "=", "torch", ".", "mean", "(", "self", ".", "hs", ",", "dim", "=", "0", ")", ",", "torch", ".", "mean", "(", "self", ".", "cs", ",", "dim", "=", "0", ")", "\n", "bestAcc", "=", "acc", "\n", "self", ".", "logger", ".", "info", "(", "'Saving Best'", ")", "\n", "torch", ".", "save", "(", "{", "\n", "'lr'", ":", "lr", ",", "\n", "'netFeat'", ":", "self", ".", "netFeat", ".", "state_dict", "(", ")", ",", "\n", "'netClass'", ":", "self", ".", "netClass", ".", "state_dict", "(", ")", ",", "\n", "'netRIM'", ":", "self", ".", "netRIM", ".", "state_dict", "(", ")", ",", "\n", "'tStep'", ":", "self", ".", "tStep", ",", "\n", "'aStep'", ":", "self", ".", "aStep", ",", "\n", "'hs'", ":", "self", ".", "hs", ",", "\n", "'cs'", ":", "self", ".", "cs", ",", "\n", "}", ",", "os", ".", "path", ".", "join", "(", "self", ".", "outDir", ",", "'netCLUEBest.pth'", ")", ")", "\n", "\n", "", "self", ".", "logger", ".", "info", "(", "'Saving Last'", ")", "\n", "torch", ".", "save", "(", "{", "\n", "'lr'", ":", "lr", ",", "\n", "'netFeat'", ":", "self", ".", "netFeat", ".", "state_dict", "(", ")", ",", "\n", "'netClass'", ":", "self", ".", "netClass", ".", "state_dict", "(", ")", ",", "\n", "'netRIM'", ":", "self", ".", "netRIM", ".", "state_dict", "(", ")", ",", "\n", "'tStep'", ":", "self", ".", "tStep", ",", "\n", "'aStep'", ":", "self", ".", "aStep", ",", "\n", "'hs'", ":", "self", ".", "hs", ",", "\n", "'cs'", ":", "self", ".", "cs", ",", "\n", "}", ",", "os", ".", "path", ".", "join", "(", "self", ".", "outDir", ",", "'netCLUELast.pth'", ")", ")", "\n", "\n", "msg", "=", "'Iter {:d}, Train Loss {:.3f}, Train Acc {:.3f}%, Val Acc {:.3f}%'", ".", "format", "(", "\n", "episode", ",", "losses", ".", "avg", ",", "top1", ".", "avg", ",", "acc", ")", "\n", "self", ".", "logger", ".", "info", "(", "msg", ")", "\n", "history", "[", "'trainLoss'", "]", ".", "append", "(", "losses", ".", "avg", ")", "\n", "history", "[", "'trainAcc'", "]", ".", "append", "(", "top1", ".", "avg", ")", "\n", "history", "[", "'valAcc'", "]", ".", "append", "(", "acc", ")", "\n", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "\n", "", "", "return", "bestAcc", ",", "acc", ",", "history", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.plot_acc_stochastic.set_size": [[29, 61], ["None"], "function", ["None"], ["def", "set_size", "(", "width", ",", "fraction", "=", "1", ")", ":", "\n", "    ", "\"\"\" Set aesthetic figure dimensions to avoid scaling in latex.\n\n    Parameters\n    ----------\n    width: float\n            Width in pts\n    fraction: float\n            Fraction of the width which you wish the figure to occupy\n\n    Returns\n    -------\n    fig_dim: tuple\n            Dimensions of figure in inches\n    \"\"\"", "\n", "# Width of figure", "\n", "fig_width_pt", "=", "width", "*", "fraction", "\n", "\n", "# Convert from pt to inches", "\n", "inches_per_pt", "=", "1", "/", "72.27", "\n", "\n", "# Golden ratio to set aesthetic figure height", "\n", "golden_ratio", "=", "(", "5", "**", ".5", "-", "0.5", ")", "/", "2", "\n", "\n", "# Figure width in inches", "\n", "fig_width_in", "=", "fig_width_pt", "*", "inches_per_pt", "\n", "# Figure height in inches", "\n", "fig_height_in", "=", "fig_width_in", "*", "golden_ratio", "\n", "\n", "fig_dim", "=", "(", "fig_width_in", ",", "fig_height_in", ")", "\n", "\n", "return", "fig_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.dataloader.EpisodeSampler.__init__": [[44, 60], ["os.listdir", "floatType", "intType", "floatType", "intType", "floatType"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "imgDir", ",", "nClsEpisode", ",", "nSupport", ",", "nQuery", ",", "transform", ",", "useGPU", ",", "inputW", ",", "inputH", ")", ":", "\n", "        ", "self", ".", "imgDir", "=", "imgDir", "\n", "self", ".", "clsList", "=", "os", ".", "listdir", "(", "imgDir", ")", "\n", "self", ".", "nClsEpisode", "=", "nClsEpisode", "\n", "self", ".", "nSupport", "=", "nSupport", "\n", "self", ".", "nQuery", "=", "nQuery", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "floatType", "=", "torch", ".", "cuda", ".", "FloatTensor", "if", "useGPU", "else", "torch", ".", "FloatTensor", "\n", "intType", "=", "torch", ".", "cuda", ".", "LongTensor", "if", "useGPU", "else", "torch", ".", "LongTensor", "\n", "\n", "self", ".", "tensorSupport", "=", "floatType", "(", "nClsEpisode", "*", "nSupport", ",", "3", ",", "inputW", ",", "inputH", ")", "\n", "self", ".", "labelSupport", "=", "intType", "(", "nClsEpisode", "*", "nSupport", ")", "\n", "self", ".", "tensorQuery", "=", "floatType", "(", "nClsEpisode", "*", "nQuery", ",", "3", ",", "inputW", ",", "inputH", ")", "\n", "self", ".", "labelQuery", "=", "intType", "(", "nClsEpisode", "*", "nQuery", ")", "\n", "self", ".", "imgTensor", "=", "floatType", "(", "3", ",", "inputW", ",", "inputH", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.dataloader.EpisodeSampler.getEpisode": [[61, 104], ["range", "numpy.random.choice", "enumerate", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "os.path.join", "os.listdir", "numpy.random.choice", "range", "range", "os.path.join", "dataloader.PilLoaderRGB", "dataloader.EpisodeSampler.imgTensor.copy_", "os.path.join", "dataloader.PilLoaderRGB", "dataloader.EpisodeSampler.imgTensor.copy_", "dataloader.EpisodeSampler.transform", "dataloader.EpisodeSampler.transform"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.dataloader.PilLoaderRGB", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.dataloader.PilLoaderRGB"], ["", "def", "getEpisode", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return an episode\n\n        :return dict: {'SupportTensor': 1 x nSupport x 3 x H x W,\n                       'SupportLabel': 1 x nSupport,\n                       'QueryTensor': 1 x nQuery x 3 x H x W,\n                       'QueryLabel': 1 x nQuery}\n        \"\"\"", "\n", "# labels {0, ..., nClsEpisode-1}", "\n", "for", "i", "in", "range", "(", "self", ".", "nClsEpisode", ")", ":", "\n", "            ", "self", ".", "labelSupport", "[", "i", "*", "self", ".", "nSupport", ":", "(", "i", "+", "1", ")", "*", "self", ".", "nSupport", "]", "=", "i", "\n", "self", ".", "labelQuery", "[", "i", "*", "self", ".", "nQuery", ":", "(", "i", "+", "1", ")", "*", "self", ".", "nQuery", "]", "=", "i", "\n", "\n", "# select nClsEpisode from clsList", "\n", "", "clsEpisode", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "clsList", ",", "self", ".", "nClsEpisode", ",", "replace", "=", "False", ")", "\n", "for", "i", ",", "cls", "in", "enumerate", "(", "clsEpisode", ")", ":", "\n", "            ", "clsPath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "imgDir", ",", "cls", ")", "\n", "imgList", "=", "os", ".", "listdir", "(", "clsPath", ")", "\n", "\n", "# in total nQuery+nSupport images from each class", "\n", "imgCls", "=", "np", ".", "random", ".", "choice", "(", "imgList", ",", "self", ".", "nQuery", "+", "self", ".", "nSupport", ",", "replace", "=", "False", ")", "\n", "\n", "for", "j", "in", "range", "(", "self", ".", "nSupport", ")", ":", "\n", "                ", "img", "=", "imgCls", "[", "j", "]", "\n", "imgPath", "=", "os", ".", "path", ".", "join", "(", "clsPath", ",", "img", ")", "\n", "I", "=", "PilLoaderRGB", "(", "imgPath", ")", "\n", "self", ".", "tensorSupport", "[", "i", "*", "self", ".", "nSupport", "+", "j", "]", "=", "self", ".", "imgTensor", ".", "copy_", "(", "self", ".", "transform", "(", "I", ")", ")", "\n", "\n", "", "for", "j", "in", "range", "(", "self", ".", "nQuery", ")", ":", "\n", "                ", "img", "=", "imgCls", "[", "j", "+", "self", ".", "nSupport", "]", "\n", "imgPath", "=", "os", ".", "path", ".", "join", "(", "clsPath", ",", "img", ")", "\n", "I", "=", "PilLoaderRGB", "(", "imgPath", ")", "\n", "self", ".", "tensorQuery", "[", "i", "*", "self", ".", "nQuery", "+", "j", "]", "=", "self", ".", "imgTensor", ".", "copy_", "(", "self", ".", "transform", "(", "I", ")", ")", "\n", "\n", "## Random permutation. Though this is not necessary in our approach", "\n", "", "", "permSupport", "=", "torch", ".", "randperm", "(", "self", ".", "nClsEpisode", "*", "self", ".", "nSupport", ")", "\n", "permQuery", "=", "torch", ".", "randperm", "(", "self", ".", "nClsEpisode", "*", "self", ".", "nQuery", ")", "\n", "\n", "return", "{", "'SupportTensor'", ":", "self", ".", "tensorSupport", "[", "permSupport", "]", ",", "\n", "'SupportLabel'", ":", "self", ".", "labelSupport", "[", "permSupport", "]", ",", "\n", "'QueryTensor'", ":", "self", ".", "tensorQuery", "[", "permQuery", "]", ",", "\n", "'QueryLabel'", ":", "self", ".", "labelQuery", "[", "permQuery", "]", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.dataloader.EpisodeSampler_feat.__init__": [[119, 134], ["os.listdir", "floatType", "intType", "floatType", "intType", "floatType"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "featDir", ",", "nClsEpisode", ",", "nSupport", ",", "nQuery", ",", "useGPU", ",", "nFeat", ")", ":", "\n", "        ", "self", ".", "featDir", "=", "featDir", "\n", "self", ".", "clsList", "=", "os", ".", "listdir", "(", "featDir", ")", "\n", "self", ".", "nClsEpisode", "=", "nClsEpisode", "\n", "self", ".", "nSupport", "=", "nSupport", "\n", "self", ".", "nQuery", "=", "nQuery", "\n", "\n", "floatType", "=", "torch", ".", "cuda", ".", "FloatTensor", "if", "useGPU", "else", "torch", ".", "FloatTensor", "\n", "intType", "=", "torch", ".", "cuda", ".", "LongTensor", "if", "useGPU", "else", "torch", ".", "LongTensor", "\n", "\n", "self", ".", "tensorSupport", "=", "floatType", "(", "nClsEpisode", "*", "nSupport", ",", "nFeat", ")", "\n", "self", ".", "labelSupport", "=", "intType", "(", "nClsEpisode", "*", "nSupport", ")", "\n", "self", ".", "tensorQuery", "=", "floatType", "(", "nClsEpisode", "*", "nQuery", ",", "nFeat", ")", "\n", "self", ".", "labelQuery", "=", "intType", "(", "nClsEpisode", "*", "nQuery", ")", "\n", "self", ".", "featTensor", "=", "floatType", "(", "nFeat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.dataloader.EpisodeSampler_feat.getEpisode": [[135, 180], ["range", "numpy.random.choice", "enumerate", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "os.path.join", "os.listdir", "numpy.random.choice", "range", "range", "os.path.join", "pickle.load", "dataloader.EpisodeSampler_feat.featTensor.copy_", "os.path.join", "pickle.load", "dataloader.EpisodeSampler_feat.featTensor.copy_", "open", "open"], "methods", ["None"], ["", "def", "getEpisode", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return an episode\n\n        :return dict: {'SupportTensor': 1 x nSupport x nFeat,\n                       'SupportLabel': 1 x nSupport,\n                       'QueryTensor': 1 x nQuery x nFeat,\n                       'QueryLabel': 1 x nQuery}\n        \"\"\"", "\n", "# labels {0, ..., nClsEpisode-1}", "\n", "for", "i", "in", "range", "(", "self", ".", "nClsEpisode", ")", ":", "\n", "            ", "self", ".", "labelSupport", "[", "i", "*", "self", ".", "nSupport", ":", "(", "i", "+", "1", ")", "*", "self", ".", "nSupport", "]", "=", "i", "\n", "self", ".", "labelQuery", "[", "i", "*", "self", ".", "nQuery", ":", "(", "i", "+", "1", ")", "*", "self", ".", "nQuery", "]", "=", "i", "\n", "\n", "# select nClsEpisode from clsList", "\n", "", "clsEpisode", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "clsList", ",", "self", ".", "nClsEpisode", ",", "replace", "=", "False", ")", "\n", "for", "i", ",", "cls", "in", "enumerate", "(", "clsEpisode", ")", ":", "\n", "            ", "clsPath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "featDir", ",", "cls", ")", "\n", "featList", "=", "os", ".", "listdir", "(", "clsPath", ")", "\n", "\n", "# in total nQuery+nSupport images from each class", "\n", "featCls", "=", "np", ".", "random", ".", "choice", "(", "featList", ",", "self", ".", "nQuery", "+", "self", ".", "nSupport", ",", "replace", "=", "False", ")", "\n", "\n", "for", "j", "in", "range", "(", "self", ".", "nSupport", ")", ":", "\n", "                ", "feat", "=", "featCls", "[", "j", "]", "\n", "featPath", "=", "os", ".", "path", ".", "join", "(", "clsPath", ",", "feat", ")", "\n", "F", "=", "pickle", ".", "load", "(", "open", "(", "featPath", ",", "'rb'", ")", ")", "\n", "self", ".", "tensorSupport", "[", "i", "*", "self", ".", "nSupport", "+", "j", "]", "=", "self", ".", "featTensor", ".", "copy_", "(", "F", ")", "\n", "# I = PilLoaderRGB(imgPath)", "\n", "# self.tensorSupport[i * self.nSupport + j] = self.imgTensor.copy_(self.transform(I))", "\n", "\n", "", "for", "j", "in", "range", "(", "self", ".", "nQuery", ")", ":", "\n", "                ", "feat", "=", "featCls", "[", "j", "+", "self", ".", "nSupport", "]", "\n", "featPath", "=", "os", ".", "path", ".", "join", "(", "clsPath", ",", "feat", ")", "\n", "F", "=", "pickle", ".", "load", "(", "open", "(", "featPath", ",", "'rb'", ")", ")", "\n", "self", ".", "tensorSupport", "[", "i", "*", "self", ".", "nQuery", "+", "j", "]", "=", "self", ".", "featTensor", ".", "copy_", "(", "F", ")", "\n", "\n", "## Random permutation. Though this is not necessary in our approach", "\n", "", "", "permSupport", "=", "torch", ".", "randperm", "(", "self", ".", "nClsEpisode", "*", "self", ".", "nSupport", ")", "\n", "permQuery", "=", "torch", ".", "randperm", "(", "self", ".", "nClsEpisode", "*", "self", ".", "nQuery", ")", "\n", "\n", "return", "{", "'SupportTensor'", ":", "self", ".", "tensorSupport", "[", "permSupport", "]", ",", "\n", "'SupportLabel'", ":", "self", ".", "labelSupport", "[", "permSupport", "]", ",", "\n", "'QueryTensor'", ":", "self", ".", "tensorQuery", "[", "permQuery", "]", ",", "\n", "'QueryLabel'", ":", "self", ".", "labelQuery", "[", "permQuery", "]", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.dataloader.BatchSampler.__init__": [[198, 211], ["dataloader.EpisodeSampler", "floatType", "intType", "floatType", "intType"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "imgDir", ",", "nClsEpisode", ",", "nSupport", ",", "nQuery", ",", "transform", ",", "useGPU", ",", "inputW", ",", "inputH", ",", "batchSize", ")", ":", "\n", "        ", "self", ".", "episodeSampler", "=", "EpisodeSampler", "(", "imgDir", ",", "nClsEpisode", ",", "nSupport", ",", "nQuery", ",", "\n", "transform", ",", "useGPU", ",", "inputW", ",", "inputH", ")", "\n", "\n", "floatType", "=", "torch", ".", "cuda", ".", "FloatTensor", "if", "useGPU", "else", "torch", ".", "FloatTensor", "\n", "intType", "=", "torch", ".", "cuda", ".", "LongTensor", "if", "useGPU", "else", "torch", ".", "LongTensor", "\n", "\n", "self", ".", "tensorSupport", "=", "floatType", "(", "batchSize", ",", "nClsEpisode", "*", "nSupport", ",", "3", ",", "inputW", ",", "inputH", ")", "\n", "self", ".", "labelSupport", "=", "intType", "(", "batchSize", ",", "nClsEpisode", "*", "nSupport", ")", "\n", "self", ".", "tensorQuery", "=", "floatType", "(", "batchSize", ",", "nClsEpisode", "*", "nQuery", ",", "3", ",", "inputW", ",", "inputH", ")", "\n", "self", ".", "labelQuery", "=", "intType", "(", "batchSize", ",", "nClsEpisode", "*", "nQuery", ")", "\n", "\n", "self", ".", "batchSize", "=", "batchSize", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.dataloader.BatchSampler.getBatch": [[212, 232], ["range", "dataloader.BatchSampler.episodeSampler.getEpisode"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.dataloader.EpisodeSampler_feat.getEpisode"], ["", "def", "getBatch", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return an episode\n\n        :return dict: {'SupportTensor': B x nSupport x 3 x H x W,\n                       'SupportLabel': B x nSupport,\n                       'QueryTensor': B x nQuery x 3 x H x W,\n                       'QueryLabel': B x nQuery}\n        \"\"\"", "\n", "for", "i", "in", "range", "(", "self", ".", "batchSize", ")", ":", "\n", "            ", "episode", "=", "self", ".", "episodeSampler", ".", "getEpisode", "(", ")", "\n", "self", ".", "tensorSupport", "[", "i", "]", "=", "episode", "[", "'SupportTensor'", "]", "\n", "self", ".", "labelSupport", "[", "i", "]", "=", "episode", "[", "'SupportLabel'", "]", "\n", "self", ".", "tensorQuery", "[", "i", "]", "=", "episode", "[", "'QueryTensor'", "]", "\n", "self", ".", "labelQuery", "[", "i", "]", "=", "episode", "[", "'QueryLabel'", "]", "\n", "\n", "", "return", "{", "'SupportTensor'", ":", "self", ".", "tensorSupport", ",", "\n", "'SupportLabel'", ":", "self", ".", "labelSupport", ",", "\n", "'QueryTensor'", ":", "self", ".", "tensorQuery", ",", "\n", "'QueryLabel'", ":", "self", ".", "labelQuery", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.dataloader.BatchSampler_feat.__init__": [[250, 263], ["dataloader.EpisodeSampler_feat", "floatType", "intType", "floatType", "intType"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "featDir", ",", "nClsEpisode", ",", "nSupport", ",", "nQuery", ",", "transform", ",", "useGPU", ",", "inputW", ",", "inputH", ",", "batchSize", ")", ":", "\n", "        ", "self", ".", "episodeSampler", "=", "EpisodeSampler_feat", "(", "featDir", ",", "nClsEpisode", ",", "nSupport", ",", "nQuery", ",", "\n", "transform", ",", "useGPU", ",", "inputW", ",", "inputH", ")", "\n", "\n", "floatType", "=", "torch", ".", "cuda", ".", "FloatTensor", "if", "useGPU", "else", "torch", ".", "FloatTensor", "\n", "intType", "=", "torch", ".", "cuda", ".", "LongTensor", "if", "useGPU", "else", "torch", ".", "LongTensor", "\n", "\n", "self", ".", "tensorSupport", "=", "floatType", "(", "batchSize", ",", "nClsEpisode", "*", "nSupport", ",", "3", ",", "inputW", ",", "inputH", ")", "\n", "self", ".", "labelSupport", "=", "intType", "(", "batchSize", ",", "nClsEpisode", "*", "nSupport", ")", "\n", "self", ".", "tensorQuery", "=", "floatType", "(", "batchSize", ",", "nClsEpisode", "*", "nQuery", ",", "3", ",", "inputW", ",", "inputH", ")", "\n", "self", ".", "labelQuery", "=", "intType", "(", "batchSize", ",", "nClsEpisode", "*", "nQuery", ")", "\n", "\n", "self", ".", "batchSize", "=", "batchSize", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.dataloader.BatchSampler_feat.getBatch": [[264, 284], ["range", "dataloader.BatchSampler_feat.episodeSampler.getEpisode"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.dataloader.EpisodeSampler_feat.getEpisode"], ["", "def", "getBatch", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return an episode\n\n        :return dict: {'SupportTensor': B x nSupport x 3 x H x W,\n                       'SupportLabel': B x nSupport,\n                       'QueryTensor': B x nQuery x 3 x H x W,\n                       'QueryLabel': B x nQuery}\n        \"\"\"", "\n", "for", "i", "in", "range", "(", "self", ".", "batchSize", ")", ":", "\n", "            ", "episode", "=", "self", ".", "episodeSampler", ".", "getEpisode", "(", ")", "\n", "self", ".", "tensorSupport", "[", "i", "]", "=", "episode", "[", "'SupportTensor'", "]", "\n", "self", ".", "labelSupport", "[", "i", "]", "=", "episode", "[", "'SupportLabel'", "]", "\n", "self", ".", "tensorQuery", "[", "i", "]", "=", "episode", "[", "'QueryTensor'", "]", "\n", "self", ".", "labelQuery", "[", "i", "]", "=", "episode", "[", "'QueryLabel'", "]", "\n", "\n", "", "return", "{", "'SupportTensor'", ":", "self", ".", "tensorSupport", ",", "\n", "'SupportLabel'", ":", "self", ".", "labelSupport", ",", "\n", "'QueryTensor'", ":", "self", ".", "tensorQuery", ",", "\n", "'QueryLabel'", ":", "self", ".", "labelQuery", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.dataloader.ValImageFolder.__init__": [[298, 320], ["len", "len", "len", "len", "floatType", "intType", "floatType", "intType", "floatType", "range", "open", "json.load"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "episodeJson", ",", "imgDir", ",", "inputW", ",", "inputH", ",", "valTransform", ",", "useGPU", ")", ":", "\n", "        ", "with", "open", "(", "episodeJson", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "self", ".", "episodeInfo", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "self", ".", "imgDir", "=", "imgDir", "\n", "self", ".", "nEpisode", "=", "len", "(", "self", ".", "episodeInfo", ")", "\n", "self", ".", "nClsEpisode", "=", "len", "(", "self", ".", "episodeInfo", "[", "0", "]", "[", "'Support'", "]", ")", "\n", "self", ".", "nSupport", "=", "len", "(", "self", ".", "episodeInfo", "[", "0", "]", "[", "'Support'", "]", "[", "0", "]", ")", "\n", "self", ".", "nQuery", "=", "len", "(", "self", ".", "episodeInfo", "[", "0", "]", "[", "'Query'", "]", "[", "0", "]", ")", "\n", "self", ".", "transform", "=", "valTransform", "\n", "floatType", "=", "torch", ".", "cuda", ".", "FloatTensor", "if", "useGPU", "else", "torch", ".", "FloatTensor", "\n", "intType", "=", "torch", ".", "cuda", ".", "LongTensor", "if", "useGPU", "else", "torch", ".", "LongTensor", "\n", "\n", "self", ".", "tensorSupport", "=", "floatType", "(", "self", ".", "nClsEpisode", "*", "self", ".", "nSupport", ",", "3", ",", "inputW", ",", "inputH", ")", "\n", "self", ".", "labelSupport", "=", "intType", "(", "self", ".", "nClsEpisode", "*", "self", ".", "nSupport", ")", "\n", "self", ".", "tensorQuery", "=", "floatType", "(", "self", ".", "nClsEpisode", "*", "self", ".", "nQuery", ",", "3", ",", "inputW", ",", "inputH", ")", "\n", "self", ".", "labelQuery", "=", "intType", "(", "self", ".", "nClsEpisode", "*", "self", ".", "nQuery", ")", "\n", "\n", "self", ".", "imgTensor", "=", "floatType", "(", "3", ",", "inputW", ",", "inputH", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "nClsEpisode", ")", ":", "\n", "            ", "self", ".", "labelSupport", "[", "i", "*", "self", ".", "nSupport", ":", "(", "i", "+", "1", ")", "*", "self", ".", "nSupport", "]", "=", "i", "\n", "self", ".", "labelQuery", "[", "i", "*", "self", ".", "nQuery", ":", "(", "i", "+", "1", ")", "*", "self", ".", "nQuery", "]", "=", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.dataloader.ValImageFolder.__getitem__": [[322, 347], ["range", "range", "range", "os.path.join", "dataloader.PilLoaderRGB", "dataloader.ValImageFolder.imgTensor.copy_", "os.path.join", "dataloader.PilLoaderRGB", "dataloader.ValImageFolder.imgTensor.copy_", "dataloader.ValImageFolder.transform", "dataloader.ValImageFolder.transform"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.dataloader.PilLoaderRGB", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.dataloader.PilLoaderRGB"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Return an episode\n\n        :param int index: index of data example\n        :return dict: {'SupportTensor': 1 x nSupport x 3 x H x W,\n                       'SupportLabel': 1 x nSupport,\n                       'QueryTensor': 1 x nQuery x 3 x H x W,\n                       'QueryLabel': 1 x nQuery}\n        \"\"\"", "\n", "for", "i", "in", "range", "(", "self", ".", "nClsEpisode", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "self", ".", "nSupport", ")", ":", "\n", "                ", "imgPath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "imgDir", ",", "self", ".", "episodeInfo", "[", "index", "]", "[", "'Support'", "]", "[", "i", "]", "[", "j", "]", ")", "\n", "I", "=", "PilLoaderRGB", "(", "imgPath", ")", "\n", "self", ".", "tensorSupport", "[", "i", "*", "self", ".", "nSupport", "+", "j", "]", "=", "self", ".", "imgTensor", ".", "copy_", "(", "self", ".", "transform", "(", "I", ")", ")", "\n", "\n", "", "for", "j", "in", "range", "(", "self", ".", "nQuery", ")", ":", "\n", "                ", "imgPath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "imgDir", ",", "self", ".", "episodeInfo", "[", "index", "]", "[", "'Query'", "]", "[", "i", "]", "[", "j", "]", ")", "\n", "I", "=", "PilLoaderRGB", "(", "imgPath", ")", "\n", "self", ".", "tensorQuery", "[", "i", "*", "self", ".", "nQuery", "+", "j", "]", "=", "self", ".", "imgTensor", ".", "copy_", "(", "self", ".", "transform", "(", "I", ")", ")", "\n", "\n", "", "", "return", "{", "'SupportTensor'", ":", "self", ".", "tensorSupport", ",", "\n", "'SupportLabel'", ":", "self", ".", "labelSupport", ",", "\n", "'QueryTensor'", ":", "self", ".", "tensorQuery", ",", "\n", "'QueryLabel'", ":", "self", ".", "labelQuery", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.dataloader.ValImageFolder.__len__": [[349, 354], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Number of episodes\n        \"\"\"", "\n", "return", "self", ".", "nEpisode", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.dataloader.ValAIMImageFolder.__init__": [[368, 390], ["len", "len", "len", "len", "floatType", "intType", "floatType", "intType", "floatType", "range", "open", "json.load"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "episodeJson", ",", "imgDir", ",", "inputW", ",", "inputH", ",", "valTransform", ",", "useGPU", ")", ":", "\n", "        ", "with", "open", "(", "episodeJson", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "self", ".", "episodeInfo", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "self", ".", "imgDir", "=", "imgDir", "\n", "self", ".", "nEpisode", "=", "len", "(", "self", ".", "episodeInfo", ")", "\n", "self", ".", "nClsEpisode", "=", "len", "(", "self", ".", "episodeInfo", "[", "0", "]", "[", "'Support'", "]", ")", "\n", "self", ".", "nSupport", "=", "len", "(", "self", ".", "episodeInfo", "[", "0", "]", "[", "'Support'", "]", "[", "0", "]", ")", "\n", "self", ".", "nQuery", "=", "len", "(", "self", ".", "episodeInfo", "[", "0", "]", "[", "'Query'", "]", "[", "0", "]", ")", "\n", "self", ".", "transform", "=", "valTransform", "\n", "floatType", "=", "torch", ".", "cuda", ".", "FloatTensor", "if", "useGPU", "else", "torch", ".", "FloatTensor", "\n", "intType", "=", "torch", ".", "cuda", ".", "LongTensor", "if", "useGPU", "else", "torch", ".", "LongTensor", "\n", "\n", "self", ".", "tensorSupport", "=", "floatType", "(", "self", ".", "nClsEpisode", "*", "self", ".", "nSupport", ",", "3", ",", "inputW", ",", "inputH", ")", "\n", "self", ".", "labelSupport", "=", "intType", "(", "self", ".", "nClsEpisode", "*", "self", ".", "nSupport", ")", "\n", "self", ".", "tensorQuery", "=", "floatType", "(", "self", ".", "nClsEpisode", "*", "self", ".", "nQuery", ",", "3", ",", "inputW", ",", "inputH", ")", "\n", "self", ".", "labelQuery", "=", "intType", "(", "self", ".", "nClsEpisode", "*", "self", ".", "nQuery", ")", "\n", "\n", "self", ".", "imgTensor", "=", "floatType", "(", "3", ",", "inputW", ",", "inputH", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "nClsEpisode", ")", ":", "\n", "            ", "self", ".", "labelSupport", "[", "i", "*", "self", ".", "nSupport", ":", "(", "i", "+", "1", ")", "*", "self", ".", "nSupport", "]", "=", "i", "\n", "self", ".", "labelQuery", "[", "i", "*", "self", ".", "nQuery", ":", "(", "i", "+", "1", ")", "*", "self", ".", "nQuery", "]", "=", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.dataloader.ValAIMImageFolder.__getitem__": [[392, 420], ["range", "range", "range", "labelName.append", "os.path.join", "dataloader.PilLoaderRGB", "dataloader.ValAIMImageFolder.imgTensor.copy_", "os.path.join", "dataloader.PilLoaderRGB", "dataloader.ValAIMImageFolder.imgTensor.copy_", "dataloader.ValAIMImageFolder.transform", "dataloader.ValAIMImageFolder.transform", "[].split"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.dataloader.PilLoaderRGB", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.dataloader.PilLoaderRGB"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Return an episode\n\n        :param int index: index of data example\n        :return dict: {'SupportTensor': 1 x nSupport x 3 x H x W,\n                       'SupportLabel': 1 x nSupport,\n                       'QueryTensor': 1 x nQuery x 3 x H x W,\n                       'QueryLabel': 1 x nQuery}\n        \"\"\"", "\n", "labelName", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "nClsEpisode", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "self", ".", "nSupport", ")", ":", "\n", "                ", "imgPath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "imgDir", ",", "self", ".", "episodeInfo", "[", "index", "]", "[", "'Support'", "]", "[", "i", "]", "[", "j", "]", ")", "\n", "I", "=", "PilLoaderRGB", "(", "imgPath", ")", "\n", "self", ".", "tensorSupport", "[", "i", "*", "self", ".", "nSupport", "+", "j", "]", "=", "self", ".", "imgTensor", ".", "copy_", "(", "self", ".", "transform", "(", "I", ")", ")", "\n", "\n", "", "for", "j", "in", "range", "(", "self", ".", "nQuery", ")", ":", "\n", "                ", "imgPath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "imgDir", ",", "self", ".", "episodeInfo", "[", "index", "]", "[", "'Query'", "]", "[", "i", "]", "[", "j", "]", ")", "\n", "I", "=", "PilLoaderRGB", "(", "imgPath", ")", "\n", "self", ".", "tensorQuery", "[", "i", "*", "self", ".", "nQuery", "+", "j", "]", "=", "self", ".", "imgTensor", ".", "copy_", "(", "self", ".", "transform", "(", "I", ")", ")", "\n", "", "labelName", ".", "append", "(", "self", ".", "episodeInfo", "[", "index", "]", "[", "'Query'", "]", "[", "i", "]", "[", "j", "]", ".", "split", "(", "'/'", ")", "[", "0", "]", ")", "\n", "\n", "", "return", "{", "'SupportTensor'", ":", "self", ".", "tensorSupport", ",", "\n", "'SupportLabel'", ":", "self", ".", "labelSupport", ",", "\n", "'QueryTensor'", ":", "self", ".", "tensorQuery", ",", "\n", "'QueryLabel'", ":", "self", ".", "labelQuery", ",", "\n", "'LabelName'", ":", "labelName", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.dataloader.ValAIMImageFolder.__len__": [[422, 427], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Number of episodes\n        \"\"\"", "\n", "return", "self", ".", "nEpisode", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.dataloader.PilLoaderRGB": [[26, 28], ["PIL.open().convert", "PIL.open"], "function", ["None"], ["def", "PilLoaderRGB", "(", "imgPath", ")", ":", "\n", "    ", "return", "Image", ".", "open", "(", "imgPath", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.dataloader.ValLoader": [[429, 434], ["torch.DataLoader", "dataloader.ValImageFolder"], "function", ["None"], ["", "", "def", "ValLoader", "(", "episodeJson", ",", "imgDir", ",", "inputW", ",", "inputH", ",", "valTransform", ",", "useGPU", ")", ":", "\n", "    ", "dataloader", "=", "data", ".", "DataLoader", "(", "ValImageFolder", "(", "episodeJson", ",", "imgDir", ",", "inputW", ",", "inputH", ",", "\n", "valTransform", ",", "useGPU", ")", ",", "\n", "shuffle", "=", "False", ")", "\n", "return", "dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.dataloader.TrainLoader": [[436, 440], ["torch.DataLoader", "torchvision.datasets.ImageFolder"], "function", ["None"], ["", "def", "TrainLoader", "(", "batchSize", ",", "imgDir", ",", "trainTransform", ")", ":", "\n", "    ", "dataloader", "=", "data", ".", "DataLoader", "(", "ImageFolder", "(", "imgDir", ",", "trainTransform", ")", ",", "\n", "batch_size", "=", "batchSize", ",", "shuffle", "=", "True", ",", "drop_last", "=", "True", ")", "\n", "return", "dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.dataloader.ValAIMLoader": [[441, 446], ["torch.DataLoader", "dataloader.ValAIMImageFolder"], "function", ["None"], ["", "def", "ValAIMLoader", "(", "episodeJson", ",", "imgDir", ",", "inputW", ",", "inputH", ",", "valTransform", ",", "useGPU", ")", ":", "\n", "    ", "dataloader", "=", "data", ".", "DataLoader", "(", "ValAIMImageFolder", "(", "episodeJson", ",", "imgDir", ",", "inputW", ",", "inputH", ",", "\n", "valTransform", ",", "useGPU", ")", ",", "\n", "shuffle", "=", "False", ")", "\n", "return", "dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.algorithm.Algorithm.__init__": [[121, 157], ["torch.device", "torch.device", "torch.device", "torch.device", "algorithm.Algorithm.netFeat.load_state_dict", "algorithm.Algorithm.logger.info", "algorithm.Algorithm.load_ckpt", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.algorithm.Algorithm.load_ckpt"], ["def", "__init__", "(", "self", ",", "args", ",", "logger", ",", "netFeat", ",", "netSIB", ",", "netAIM", ",", "optimizer", ",", "optimizer_aim", ",", "optimizer_hs", ",", "criterion", ")", ":", "\n", "        ", "self", ".", "netFeat", "=", "netFeat", "\n", "self", ".", "netSIB", "=", "netSIB", "\n", "self", ".", "netAIM", "=", "netAIM", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "optimizer_aim", "=", "optimizer_aim", "\n", "self", ".", "optimizer_hs", "=", "optimizer_hs", "\n", "self", ".", "criterion", "=", "criterion", "\n", "self", ".", "useAIM", "=", "args", ".", "useAIM", "\n", "self", ".", "testAdd", "=", "args", ".", "testAdd", "\n", "\n", "self", ".", "nbIter", "=", "args", ".", "nbIter", "\n", "self", ".", "nStep", "=", "args", ".", "nStep", "\n", "self", ".", "aStep", "=", "args", ".", "aStep", "\n", "self", ".", "outDir", "=", "args", ".", "outDir", "\n", "self", ".", "nFeat", "=", "args", ".", "nFeat", "\n", "self", ".", "batchSize", "=", "args", ".", "batchSize", "\n", "self", ".", "nEpisode", "=", "args", ".", "nEpisode", "\n", "self", ".", "momentum", "=", "args", ".", "momentum", "\n", "self", ".", "weightDecay", "=", "args", ".", "weightDecay", "\n", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "args", ".", "cuda", "else", "'cpu'", ")", "\n", "\n", "# Load pretrained model", "\n", "if", "args", ".", "resumeFeatPth", ":", "\n", "            ", "if", "args", ".", "cuda", ":", "\n", "                ", "param", "=", "torch", ".", "load", "(", "args", ".", "resumeFeatPth", ")", "\n", "", "else", ":", "\n", "                ", "param", "=", "torch", ".", "load", "(", "args", ".", "resumeFeatPth", ",", "map_location", "=", "'cpu'", ")", "\n", "", "self", ".", "netFeat", ".", "load_state_dict", "(", "param", ")", "\n", "msg", "=", "'\\nLoading netFeat from {}'", ".", "format", "(", "args", ".", "resumeFeatPth", ")", "\n", "self", ".", "logger", ".", "info", "(", "msg", ")", "\n", "\n", "", "if", "args", ".", "test", ":", "\n", "            ", "self", ".", "load_ckpt", "(", "args", ".", "ckptPth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.algorithm.Algorithm.load_ckpt": [[159, 185], ["torch.load", "torch.load", "torch.load", "torch.load", "algorithm.Algorithm.netFeat.load_state_dict", "algorithm.Algorithm.netAIM.load_state_dict", "algorithm.Algorithm.netSIB.load_state_dict", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "algorithm.Algorithm.logger.info", "itertools.chain", "algorithm.Algorithm.netAIM.parameters", "algorithm.Algorithm.netAIM.parameters", "algorithm.Algorithm.netSIB.parameters"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.parameters", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.parameters", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.parameters"], ["", "", "def", "load_ckpt", "(", "self", ",", "ckptPth", ")", ":", "\n", "        ", "\"\"\"\n        Load checkpoint from ckptPth.\n\n        :param ckptPth: the path to the ckpt\n        :type ckptPth: string\n        \"\"\"", "\n", "param", "=", "torch", ".", "load", "(", "ckptPth", ")", "\n", "self", ".", "netFeat", ".", "load_state_dict", "(", "param", "[", "'netFeat'", "]", ")", "\n", "self", ".", "netAIM", ".", "load_state_dict", "(", "param", "[", "'netAIM'", "]", ")", "\n", "self", ".", "netAIM", ".", "hs", "=", "param", "[", "'netAIM_hs'", "]", "\n", "self", ".", "netSIB", ".", "load_state_dict", "(", "param", "[", "'SIB'", "]", ")", "\n", "lr", "=", "param", "[", "'lr'", "]", "\n", "lr_hs", "=", "param", "[", "'lr_hs'", "]", "\n", "lr_aim", "=", "param", "[", "'lr_aim'", "]", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "itertools", ".", "chain", "(", "*", "[", "self", ".", "netSIB", ".", "parameters", "(", ")", "]", ")", ",", "\n", "lr", ",", "\n", "momentum", "=", "self", ".", "momentum", ",", "\n", "weight_decay", "=", "self", ".", "weightDecay", ",", "\n", "nesterov", "=", "True", ")", "\n", "self", ".", "optimizer_hs", "=", "torch", ".", "optim", ".", "SGD", "(", "self", ".", "netAIM", ".", "parameters", "(", ")", ",", "\n", "lr_hs", ")", "\n", "self", ".", "optimizer_aim", "=", "torch", ".", "optim", ".", "SGD", "(", "self", ".", "netAIM", ".", "parameters", "(", ")", ",", "\n", "lr_aim", ")", "\n", "msg", "=", "'\\nLoading networks from {}'", ".", "format", "(", "ckptPth", ")", "\n", "self", ".", "logger", ".", "info", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.algorithm.Algorithm.compute_grad_loss": [[187, 209], ["algorithm.Algorithm.compute_grad_loss.require_nonleaf_grad"], "methods", ["None"], ["", "def", "compute_grad_loss", "(", "self", ",", "clsScore", ",", "QueryLabel", ")", ":", "\n", "        ", "\"\"\"\n        Compute the loss between true gradients and synthetic gradients.\n        \"\"\"", "\n", "# register hooks", "\n", "def", "require_nonleaf_grad", "(", "v", ")", ":", "\n", "            ", "def", "hook", "(", "g", ")", ":", "\n", "                ", "v", ".", "grad_nonleaf", "=", "g", "\n", "", "h", "=", "v", ".", "register_hook", "(", "hook", ")", "\n", "return", "h", "\n", "", "handle", "=", "require_nonleaf_grad", "(", "clsScore", ")", "\n", "\n", "loss", "=", "self", ".", "criterion", "(", "clsScore", ",", "QueryLabel", ")", "\n", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "# need to backward again", "\n", "\n", "# remove hook", "\n", "handle", ".", "remove", "(", ")", "\n", "\n", "gradLogit", "=", "self", ".", "netSIB", ".", "dni", "(", "clsScore", ")", "# B * n x nKnovel", "\n", "gradLoss", "=", "F", ".", "mse_loss", "(", "gradLogit", ",", "clsScore", ".", "grad_nonleaf", ".", "detach", "(", ")", ")", "\n", "\n", "return", "loss", ",", "gradLoss", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.algorithm.Algorithm.validate": [[211, 316], ["utils.outils.AverageMeter", "algorithm.Algorithm.netFeat.eval", "algorithm.Algorithm.netAIM.train", "range", "utils.outils.getCi", "algorithm.Algorithm.logger.info", "algorithm.Algorithm.logger.info", "collections.OrderedDict", "collections.OrderedDict", "utils.utils.to_device", "algorithm.Algorithm.netSIB", "clsScore.view.view.view", "QueryLabel.view.view.view", "utils.outils.accuracy", "utils.outils.AverageMeter.update", "utils.outils.progress_bar", "episodeAccLog.append", "len", "algorithm.Algorithm.logger.info", "iter", "ValueError", "iter.getEpisode", "next", "data[].squeeze", "data[].squeeze", "data[].squeeze", "data[].squeeze", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "copy.deepcopy", "copy.deepcopy.train", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "range", "copy.deepcopy", "copy.deepcopy.train", "SupportFeat.unsqueeze", "QueryFeat.unsqueeze", "SupportLabel.unsqueeze", "acc1[].item", "acc1[].item", "algorithm.Algorithm.netFeat", "algorithm.Algorithm.netFeat", "copy.deepcopy.parameters", "torch.optim.SGD.zero_grad", "torch.optim.SGD.zero_grad", "copy.deepcopy.", "algorithm.Algorithm.netSIB", "clsScore.view.view.view", "SupportLabel.view", "algorithm.Algorithm.criterion", "algorithm.Algorithm.backward", "torch.optim.SGD.step", "torch.optim.SGD.step", "copy.deepcopy.", "copy.deepcopy.", "SupportFeat.unsqueeze", "copy.deepcopy.unsqueeze", "SupportLabel.unsqueeze", "copy.deepcopy.unsqueeze", "SupportFeat.unsqueeze", "QueryFeat.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.algorithm.Algorithm.train", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.outils.getCi", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.to_device", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.outils.accuracy", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.ProgressBar.update", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.outils.progress_bar", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.dataloader.EpisodeSampler_feat.getEpisode", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.algorithm.Algorithm.train", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.algorithm.Algorithm.train", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.parameters", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.zero_grad", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.zero_grad", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.aim.blocked_grad.backward"], ["", "def", "validate", "(", "self", ",", "valLoader", ",", "lr", "=", "None", ",", "mode", "=", "'val'", ")", ":", "\n", "        ", "\"\"\"\n        Run one epoch on val-set.\n\n        :param valLoader: the dataloader of val-set\n        :type valLoader: class `ValLoader`\n        :param float lr: learning rate for synthetic GD\n        :param string mode: 'val' or 'train'\n        \"\"\"", "\n", "if", "mode", "==", "'test'", ":", "\n", "            ", "nEpisode", "=", "self", ".", "nEpisode", "\n", "self", ".", "logger", ".", "info", "(", "'\\n\\nTest mode: randomly sample {:d} episodes...'", ".", "format", "(", "nEpisode", ")", ")", "\n", "", "elif", "mode", "==", "'val'", ":", "\n", "            ", "nEpisode", "=", "len", "(", "valLoader", ")", "\n", "self", ".", "logger", ".", "info", "(", "'\\n\\nValidation mode: pre-defined {:d} episodes...'", ".", "format", "(", "nEpisode", ")", ")", "\n", "valLoader", "=", "iter", "(", "valLoader", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'mode is wrong!'", ")", "\n", "\n", "", "episodeAccLog", "=", "[", "]", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "\n", "self", ".", "netFeat", ".", "eval", "(", ")", "\n", "self", ".", "netAIM", ".", "train", "(", ")", "\n", "#self.netSIB.eval() # set train mode, since updating bn helps to estimate better gradient", "\n", "\n", "if", "lr", "is", "None", ":", "\n", "            ", "lr", "=", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "\n", "", "if", "mode", "==", "'val'", ":", "\n", "            ", "causal_plot_score", "=", "OrderedDict", "(", ")", "\n", "causal_plot_mask", "=", "OrderedDict", "(", ")", "\n", "\n", "", "for", "batchIdx", "in", "range", "(", "nEpisode", ")", ":", "\n", "            ", "data", "=", "valLoader", ".", "getEpisode", "(", ")", "if", "mode", "==", "'test'", "else", "next", "(", "valLoader", ")", "\n", "data", "=", "to_device", "(", "data", ",", "self", ".", "device", ")", "\n", "\n", "SupportTensor", ",", "SupportLabel", ",", "QueryTensor", ",", "QueryLabel", "=", "data", "[", "'SupportTensor'", "]", ".", "squeeze", "(", "0", ")", ",", "data", "[", "'SupportLabel'", "]", ".", "squeeze", "(", "0", ")", ",", "data", "[", "'QueryTensor'", "]", ".", "squeeze", "(", "0", ")", ",", "data", "[", "'QueryLabel'", "]", ".", "squeeze", "(", "0", ")", "\n", "if", "mode", "==", "'val'", ":", "\n", "                ", "LabelName", "=", "data", "[", "'LabelName'", "]", "\n", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "SupportFeat", ",", "QueryFeat", "=", "self", ".", "netFeat", "(", "SupportTensor", ")", ",", "self", ".", "netFeat", "(", "QueryTensor", ")", "\n", "# Adapt AIMs to test task", "\n", "", "if", "self", ".", "useAIM", "and", "not", "self", ".", "testAdd", ":", "\n", "\n", "                ", "netAIM", "=", "copy", ".", "deepcopy", "(", "self", ".", "netAIM", ")", "\n", "netAIM", ".", "train", "(", ")", "\n", "optimizer_hs", "=", "torch", ".", "optim", ".", "SGD", "(", "netAIM", ".", "parameters", "(", ")", ",", "\n", "self", ".", "optimizer_hs", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "aStep", ")", ":", "\n", "                    ", "optimizer_hs", ".", "zero_grad", "(", ")", "\n", "SupportFeat_AIM", "=", "netAIM", "(", "SupportFeat", ".", "unsqueeze", "(", "1", ")", ")", "\n", "clsScore", "=", "self", ".", "netSIB", "(", "SupportFeat_AIM", ".", "unsqueeze", "(", "0", ")", ",", "SupportLabel", ".", "unsqueeze", "(", "0", ")", ",", "SupportFeat_AIM", ".", "unsqueeze", "(", "0", ")", ",", "lr", ")", "\n", "clsScore", "=", "clsScore", ".", "view", "(", "SupportFeat_AIM", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "SupportLabel_hs", "=", "SupportLabel", ".", "view", "(", "-", "1", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "clsScore", ",", "SupportLabel_hs", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer_hs", ".", "step", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "netAIM", "=", "copy", ".", "deepcopy", "(", "self", ".", "netAIM", ")", "\n", "netAIM", ".", "train", "(", ")", "\n", "# Infer using adapted AIMs", "\n", "", "if", "self", ".", "useAIM", ":", "\n", "                ", "SupportFeat", ",", "QueryFeat", "=", "netAIM", "(", "SupportFeat", ".", "unsqueeze", "(", "1", ")", ")", ",", "netAIM", "(", "QueryFeat", ".", "unsqueeze", "(", "1", ")", ",", "return_score", "=", "False", ")", "\n", "", "SupportFeat", ",", "QueryFeat", ",", "SupportLabel", "=", "SupportFeat", ".", "unsqueeze", "(", "0", ")", ",", "QueryFeat", ".", "unsqueeze", "(", "0", ")", ",", "SupportLabel", ".", "unsqueeze", "(", "0", ")", "\n", "clsScore", "=", "self", ".", "netSIB", "(", "SupportFeat", ",", "SupportLabel", ",", "QueryFeat", ",", "lr", ")", "\n", "clsScore", "=", "clsScore", ".", "view", "(", "QueryFeat", ".", "shape", "[", "0", "]", "*", "QueryFeat", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", "QueryLabel", "=", "QueryLabel", ".", "view", "(", "-", "1", ")", "\n", "acc1", "=", "accuracy", "(", "clsScore", ",", "QueryLabel", ",", "topk", "=", "(", "1", ",", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ".", "item", "(", ")", ",", "clsScore", ".", "shape", "[", "0", "]", ")", "\n", "\n", "msg", "=", "'Top1: {:.3f}%'", ".", "format", "(", "top1", ".", "avg", ")", "\n", "progress_bar", "(", "batchIdx", ",", "nEpisode", ",", "msg", ")", "\n", "episodeAccLog", ".", "append", "(", "acc1", "[", "0", "]", ".", "item", "(", ")", ")", "\n", "'''\n            if mode == 'val' and self.useAIM:\n                nQuery = int(QueryLabel.size(0) / len(LabelName))\n                for i in range(5):\n                    if LabelName[i][0] in causal_plot_score:\n                        causal_plot_score[LabelName[i][0]] = (causal_plot_score[LabelName[i][0]] + score[i*nQuery:i*nQuery+nQuery].mean(dim=0).detach().cpu().numpy()) / 2.\n                        causal_plot_mask[LabelName[i][0]] = (causal_plot_mask[LabelName[i][0]] + mask[i*nQuery:i*nQuery+nQuery].mean(dim=0).detach().cpu().numpy()) / 2.\n                    else:\n                        causal_plot_score[LabelName[i][0]] = score[i*nQuery:i*nQuery+nQuery].mean(dim=0).detach().cpu().numpy()\n                        causal_plot_mask[LabelName[i][0]] = mask[i*nQuery:i*nQuery+nQuery].mean(dim=0).detach().cpu().numpy()\n            '''", "\n", "", "'''\n        if mode == 'val' and self.useAIM:\n            ims.append(tuple(causal_plot_score.values()))\n            masks.append(tuple(causal_plot_mask.values()))\n            labels.append(tuple(causal_plot_score.keys()))\n        '''", "\n", "mean", ",", "ci95", "=", "getCi", "(", "episodeAccLog", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Final Perf with 95% confidence intervals: {:.3f}%, {:.3f}%'", ".", "format", "(", "mean", ",", "ci95", ")", ")", "\n", "'''\n        if self.useAIM:\n            scores.append(score[0,:].cpu().data.numpy())\n            att_scores.append(att_score[0,:,0].cpu().data.numpy())\n        '''", "\n", "\n", "return", "mean", ",", "ci95", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.algorithm.Algorithm.train": [[318, 554], ["algorithm.Algorithm.validate", "algorithm.Algorithm.logger.info", "algorithm.Algorithm.netSIB.train", "algorithm.Algorithm.netAIM.train", "algorithm.Algorithm.netFeat.eval", "utils.outils.AverageMeter", "utils.outils.AverageMeter", "range", "trainLoader.getBatch", "utils.utils.to_device", "algorithm.Algorithm.optimizer_aim.zero_grad", "algorithm.Algorithm.optimizer.zero_grad", "algorithm.Algorithm.optimizer.zero_grad", "algorithm.Algorithm.optimizer_aim.zero_grad", "algorithm.Algorithm.netSIB", "clsScore.view.view.view", "QueryLabel.view.view.view", "algorithm.Algorithm.criterion", "algorithm.Algorithm.backward", "algorithm.Algorithm.optimizer.step", "algorithm.Algorithm.optimizer_aim.step", "utils.outils.accuracy", "utils.outils.AverageMeter.update", "utils.outils.AverageMeter.update", "utils.outils.progress_bar", "matplotlib.clf", "matplotlib.clf", "matplotlib.clf", "seaborn.heatmap", "seaborn.heatmap.set_title", "matplotlib.xlabel", "matplotlib.xlabel", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.ylabel", "matplotlib.ylabel", "matplotlib.tight_layout", "matplotlib.tight_layout", "matplotlib.tight_layout", "matplotlib.clf", "matplotlib.clf", "matplotlib.clf", "seaborn.heatmap", "seaborn.heatmap.set_title", "matplotlib.xlabel", "matplotlib.xlabel", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.ylabel", "matplotlib.ylabel", "matplotlib.tight_layout", "matplotlib.tight_layout", "matplotlib.tight_layout", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "algorithm.Algorithm.netFeat", "algorithm.Algorithm.netFeat", "range", "algorithm.Algorithm.unsqueeze", "algorithm.Algorithm.unsqueeze", "acc1[].item", "algorithm.Algorithm.item", "algorithm.Algorithm.validate", "algorithm.Algorithm.logger.info", "torch.save", "torch.save", "torch.save", "torch.save", "algorithm.Algorithm.logger.info", "history[].append", "history[].append", "history[].append", "utils.outils.AverageMeter", "utils.outils.AverageMeter", "SupportTensor.reshape", "QueryTensor.reshape", "algorithm.Algorithm.optimizer_hs.zero_grad", "algorithm.Algorithm.netSIB", "clsScore.view.view.view", "SupportLabel.view", "algorithm.Algorithm.criterion", "algorithm.Algorithm.backward", "algorithm.Algorithm.optimizer_hs.step", "rng.choice().tolist", "algorithm.Algorithm.logger.info", "algorithm.Algorithm.logger.info", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "rng.choice().tolist", "algorithm.Algorithm.netAIM", "algorithm.Algorithm.netAIM", "algorithm.Algorithm.unsqueeze", "algorithm.Algorithm.unsqueeze", "algorithm.Algorithm.netAIM", "algorithm.Algorithm.netAIM", "algorithm.Algorithm.netAIM", "algorithm.Algorithm.netAIM", "os.path.join", "algorithm.Algorithm.netFeat.state_dict", "algorithm.Algorithm.netAIM.state_dict", "algorithm.Algorithm.netSIB.state_dict", "algorithm.Algorithm.unsqueeze", "algorithm.Algorithm.unsqueeze", "rng.choice", "algorithm.Algorithm.unsqueeze", "algorithm.Algorithm.unsqueeze", "algorithm.Algorithm.unsqueeze", "algorithm.Algorithm.unsqueeze", "algorithm.Algorithm.netFeat.state_dict", "algorithm.Algorithm.netAIM.state_dict", "algorithm.Algorithm.netSIB.state_dict", "rng.choice"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.algorithm.Algorithm.validate", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.algorithm.Algorithm.train", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.algorithm.Algorithm.train", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.dataloader.BatchSampler_feat.getBatch", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.to_device", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.zero_grad", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.zero_grad", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.zero_grad", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.zero_grad", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.aim.blocked_grad.backward", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.outils.accuracy", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.ProgressBar.update", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.ProgressBar.update", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.outils.progress_bar", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.algorithm.Algorithm.validate", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.zero_grad", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.aim.blocked_grad.backward", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save"], ["", "def", "train", "(", "self", ",", "trainLoader", ",", "valLoader", ",", "lr", "=", "None", ",", "coeffGrad", "=", "0.0", ")", ":", "\n", "        ", "\"\"\"\n        Run one epoch on train-set.\n\n        :param trainLoader: the dataloader of train-set\n        :type trainLoader: class `TrainLoader`\n        :param valLoader: the dataloader of val-set\n        :type valLoader: class `ValLoader`\n        :param float lr: learning rate for synthetic GD\n        :param float coeffGrad: deprecated\n        \"\"\"", "\n", "bestAcc", ",", "ci", "=", "self", ".", "validate", "(", "valLoader", ",", "lr", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Acc improved over validation set from 0% ---> {:.3f} +- {:.3f}%'", ".", "format", "(", "bestAcc", ",", "ci", ")", ")", "\n", "\n", "self", ".", "netSIB", ".", "train", "(", ")", "\n", "self", ".", "netAIM", ".", "train", "(", ")", "\n", "self", ".", "netFeat", ".", "eval", "(", ")", "\n", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "history", "=", "{", "'trainLoss'", ":", "[", "]", ",", "'trainAcc'", ":", "[", "]", ",", "'valAcc'", ":", "[", "]", "}", "\n", "\n", "stochastic", "=", "True", "\n", "# stochastic = False", "\n", "mech_choice", "=", "10", "\n", "for", "episode", "in", "range", "(", "self", ".", "nbIter", ")", ":", "\n", "            ", "data", "=", "trainLoader", ".", "getBatch", "(", ")", "\n", "data", "=", "to_device", "(", "data", ",", "self", ".", "device", ")", "\n", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "SupportTensor", ",", "SupportLabel", ",", "QueryTensor", ",", "QueryLabel", "=", "data", "[", "'SupportTensor'", "]", ",", "data", "[", "'SupportLabel'", "]", ",", "data", "[", "'QueryTensor'", "]", ",", "data", "[", "'QueryLabel'", "]", "\n", "nC", ",", "nH", ",", "nW", "=", "SupportTensor", ".", "shape", "[", "2", ":", "]", "\n", "\n", "SupportFeat", "=", "self", ".", "netFeat", "(", "SupportTensor", ".", "reshape", "(", "-", "1", ",", "nC", ",", "nH", ",", "nW", ")", ")", "\n", "QueryFeat", "=", "self", ".", "netFeat", "(", "QueryTensor", ".", "reshape", "(", "-", "1", ",", "nC", ",", "nH", ",", "nW", ")", ")", "\n", "\n", "", "if", "lr", "is", "None", ":", "\n", "                ", "lr", "=", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "# Train hidden state of AIM", "\n", "", "self", ".", "optimizer_aim", ".", "zero_grad", "(", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "self", ".", "useAIM", "and", "not", "self", ".", "testAdd", ":", "\n", "                ", "for", "i", "in", "range", "(", "self", ".", "aStep", ")", ":", "\n", "                    ", "self", ".", "optimizer_hs", ".", "zero_grad", "(", ")", "\n", "if", "stochastic", "==", "True", ":", "\n", "                        ", "rnd_idx", "=", "rng", ".", "choice", "(", "mech_choice", ",", "size", "=", "self", ".", "netAIM", ".", "topk", ",", "replace", "=", "False", ")", ".", "tolist", "(", ")", "\n", "SupportFeat_AIM", "=", "self", ".", "netAIM", "(", "SupportFeat", ".", "unsqueeze", "(", "1", ")", ",", "stochastic", "=", "rnd_idx", ",", "mech_choice", "=", "mech_choice", ")", "\n", "", "else", ":", "\n", "                        ", "SupportFeat_AIM", "=", "self", ".", "netAIM", "(", "SupportFeat", ".", "unsqueeze", "(", "1", ")", ")", "\n", "", "clsScore", "=", "self", ".", "netSIB", "(", "SupportFeat_AIM", ".", "unsqueeze", "(", "0", ")", ",", "SupportLabel", ",", "SupportFeat_AIM", ".", "unsqueeze", "(", "0", ")", ",", "lr", ")", "\n", "clsScore", "=", "clsScore", ".", "view", "(", "SupportFeat_AIM", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "SupportLabel_hs", "=", "SupportLabel", ".", "view", "(", "-", "1", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "clsScore", ",", "SupportLabel_hs", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer_hs", ".", "step", "(", ")", "\n", "# Train the rest of the network", "\n", "", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "self", ".", "optimizer_aim", ".", "zero_grad", "(", ")", "\n", "if", "self", ".", "useAIM", ":", "\n", "                ", "if", "stochastic", "==", "True", ":", "\n", "                    ", "rnd_idx", "=", "rng", ".", "choice", "(", "mech_choice", ",", "size", "=", "self", ".", "netAIM", ".", "topk", ",", "replace", "=", "False", ")", ".", "tolist", "(", ")", "\n", "SupportFeat", ",", "QueryFeat", "=", "self", ".", "netAIM", "(", "SupportFeat", ".", "unsqueeze", "(", "1", ")", ",", "stochastic", "=", "rnd_idx", ",", "mech_choice", "=", "mech_choice", ")", ",", "self", ".", "netAIM", "(", "QueryFeat", ".", "unsqueeze", "(", "1", ")", ",", "stochastic", "=", "rnd_idx", ",", "mech_choice", "=", "mech_choice", ")", "\n", "", "else", ":", "\n", "                    ", "SupportFeat", ",", "QueryFeat", "=", "self", ".", "netAIM", "(", "SupportFeat", ".", "unsqueeze", "(", "1", ")", ")", ",", "self", ".", "netAIM", "(", "QueryFeat", ".", "unsqueeze", "(", "1", ")", ")", "\n", "", "", "clsScore", "=", "self", ".", "netSIB", "(", "SupportFeat", ".", "unsqueeze", "(", "0", ")", ",", "SupportLabel", ",", "QueryFeat", ".", "unsqueeze", "(", "0", ")", ",", "lr", ")", "\n", "clsScore", "=", "clsScore", ".", "view", "(", "QueryFeat", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "QueryLabel", "=", "QueryLabel", ".", "view", "(", "-", "1", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "clsScore", ",", "QueryLabel", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "optimizer_aim", ".", "step", "(", ")", "\n", "\n", "acc1", "=", "accuracy", "(", "clsScore", ",", "QueryLabel", ",", "topk", "=", "(", "1", ",", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ".", "item", "(", ")", ",", "clsScore", ".", "shape", "[", "0", "]", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "QueryFeat", ".", "shape", "[", "1", "]", ")", "\n", "msg", "=", "'Loss: {:.3f} | Top1: {:.3f}% '", ".", "format", "(", "losses", ".", "avg", ",", "top1", ".", "avg", ")", "\n", "progress_bar", "(", "episode", ",", "self", ".", "nbIter", ",", "msg", ")", "\n", "\n", "if", "episode", "%", "1000", "==", "999", ":", "\n", "                ", "acc", ",", "_", "=", "self", ".", "validate", "(", "valLoader", ",", "lr", ")", "\n", "\n", "if", "acc", ">", "bestAcc", ":", "\n", "                    ", "msg", "=", "'Acc improved over validation set from {:.3f}% ---> {:.3f}%'", ".", "format", "(", "bestAcc", ",", "acc", ")", "\n", "self", ".", "logger", ".", "info", "(", "msg", ")", "\n", "\n", "bestAcc", "=", "acc", "\n", "self", ".", "logger", ".", "info", "(", "'Saving Best'", ")", "\n", "torch", ".", "save", "(", "{", "\n", "'lr'", ":", "lr", ",", "\n", "'lr_hs'", ":", "self", ".", "optimizer_hs", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "\n", "'lr_aim'", ":", "self", ".", "optimizer_aim", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "\n", "'netFeat'", ":", "self", ".", "netFeat", ".", "state_dict", "(", ")", ",", "\n", "'netAIM'", ":", "self", ".", "netAIM", ".", "state_dict", "(", ")", ",", "\n", "'netAIM_hs'", ":", "self", ".", "netAIM", ".", "hs", ",", "\n", "'SIB'", ":", "self", ".", "netSIB", ".", "state_dict", "(", ")", ",", "\n", "'nbStep'", ":", "self", ".", "nStep", ",", "\n", "}", ",", "os", ".", "path", ".", "join", "(", "self", ".", "outDir", ",", "'netSIBBest.pth'", ")", ")", "\n", "\n", "", "self", ".", "logger", ".", "info", "(", "'Saving Last'", ")", "\n", "torch", ".", "save", "(", "{", "\n", "'lr'", ":", "lr", ",", "\n", "'lr_hs'", ":", "self", ".", "optimizer_hs", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "\n", "'lr_aim'", ":", "self", ".", "optimizer_aim", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "\n", "'netFeat'", ":", "self", ".", "netFeat", ".", "state_dict", "(", ")", ",", "\n", "'netAIM'", ":", "self", ".", "netAIM", ".", "state_dict", "(", ")", ",", "\n", "'netAIM_hs'", ":", "self", ".", "netAIM", ".", "hs", ",", "\n", "'SIB'", ":", "self", ".", "netSIB", ".", "state_dict", "(", ")", ",", "\n", "'nbStep'", ":", "self", ".", "nStep", ",", "\n", "}", ",", "os", ".", "path", ".", "join", "(", "self", ".", "outDir", ",", "'netSIBLast.pth'", ")", ")", "\n", "\n", "msg", "=", "'Iter {:d}, Train Loss {:.3f}, Train Acc {:.3f}%, Val Acc {:.3f}%'", ".", "format", "(", "\n", "episode", ",", "losses", ".", "avg", ",", "top1", ".", "avg", ",", "acc", ")", "\n", "self", ".", "logger", ".", "info", "(", "msg", ")", "\n", "history", "[", "'trainLoss'", "]", ".", "append", "(", "losses", ".", "avg", ")", "\n", "history", "[", "'trainAcc'", "]", ".", "append", "(", "top1", ".", "avg", ")", "\n", "history", "[", "'valAcc'", "]", ".", "append", "(", "acc", ")", "\n", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "", "", "def", "update_frame_ims", "(", "i", ")", ":", "\n", "            ", "plt", ".", "clf", "(", ")", "\n", "ax", "=", "sns", ".", "heatmap", "(", "ims", "[", "i", "]", ",", "yticklabels", "=", "labels", "[", "i", "]", ",", "square", "=", "True", ",", "cbar_kws", "=", "{", "\"shrink\"", ":", "0.5", "}", ")", "\n", "ax", ".", "set_title", "(", "\"Epoch: {}\"", ".", "format", "(", "i", ")", ")", "\n", "plt", ".", "xlabel", "(", "'Mechanisms'", ")", "\n", "plt", ".", "ylabel", "(", "'Class'", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "", "def", "update_frame_mask", "(", "i", ")", ":", "\n", "            ", "plt", ".", "clf", "(", ")", "\n", "ax", "=", "sns", ".", "heatmap", "(", "masks", "[", "i", "]", ",", "yticklabels", "=", "labels", "[", "i", "]", ",", "square", "=", "True", ",", "cbar_kws", "=", "{", "\"shrink\"", ":", "0.5", "}", ")", "\n", "ax", ".", "set_title", "(", "\"Epoch: {}\"", ".", "format", "(", "i", ")", ")", "\n", "plt", ".", "xlabel", "(", "'Mechanisms'", ")", "\n", "plt", ".", "ylabel", "(", "'Class'", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "", "'''\n        if self.useAIM:\n            global labels\n            labels = [tuple(s if s != \"maple_tree\" else \"maple tree\" for s in tup) for tup in labels] # bug with latex renderer\n            plt_name = \"mini_wrn_5shot\"\n\n            ## Scores\n            # write animation frames\n            fig_scr = plt.figure()\n            anim = animation.FuncAnimation(fig_scr, update_frame_ims, frames=len(ims)-1, interval=50)\n            FFMpegWriter = animation.writers['ffmpeg']\n            writer = FFMpegWriter(fps=15, bitrate=5000)\n            anim.save(\"plots/score-{}.mp4\".format(plt_name), writer=writer)\n            \n            # Attention scores\n            # plt.figure()\n            plt.figure(10, figsize=set_size(width * 0.5))\n            plt.clf()\n            plt.plot(att_scores)\n            plt.title('Attention Scores')\n            plt.xlabel('Epoch')\n            plt.ylabel('Score')\n            plt.savefig('plots/att_score-epoch_{}.pdf'.format(plt_name), bbox_inches='tight')\n            # plt.figure()\n            plt.figure(11, figsize=set_size(width * 0.5))\n            plt.clf()\n            plt.plot(scores)\n            plt.title('Softmax Scores')\n            plt.xlabel('Epoch')\n            plt.ylabel('Score')\n            plt.tight_layout()\n            plt.savefig('plots/score-epoch_{}.pdf'.format(plt_name), bbox_inches='tight')\n            \n            # Difference in AIMs Activation\n            plt.figure()\n            plt.clf()\n            ax = sns.heatmap(np.asarray(ims[-1]) - np.asarray(ims[0]), yticklabels=labels[0], square=True, cbar_kws={\"shrink\": 0.5})\n            ax.set_title(\"Difference in AIMs Attention Weight\")\n            plt.xlabel('Mechanisms')\n            plt.ylabel('Class')\n            plt.tight_layout()\n            plt.savefig('plots/score-diff_{}.pdf'.format(plt_name), bbox_inches='tight')\n            # First\n            plt.figure()\n            plt.clf()\n            ax = sns.heatmap(np.asarray(ims[0]), yticklabels=labels[0], square=True, cbar_kws={\"shrink\": 0.5})\n            ax.set_title(\"AIMs Attention Weight (Epoch 0)\")\n            plt.xlabel('Mechanisms')\n            plt.ylabel('Class')\n            plt.tight_layout()\n            plt.savefig('plots/score-first_{}.pdf'.format(plt_name), bbox_inches='tight')\n            # Last\n            plt.figure()\n            plt.clf()\n            ax = sns.heatmap(np.asarray(ims[-1]), yticklabels=labels[0], square=True, cbar_kws={\"shrink\": 0.5})\n            ax.set_title(\"AIMs Attention Weight (Epoch 49)\")\n            plt.xlabel('Mechanisms')\n            plt.ylabel('Class')\n            plt.tight_layout()\n            plt.savefig('plots/score-last_{}.pdf'.format(plt_name), bbox_inches='tight')\n\n            ## Masks\n            # write animation frames\n            fig_msk = plt.figure()\n            anim = animation.FuncAnimation(fig_msk, update_frame_mask, frames=len(masks)-1, interval=50)\n            FFMpegWriter = animation.writers['ffmpeg']\n            writer = FFMpegWriter(fps=15, bitrate=5000)\n            anim.save(\"plots/mask-{}.mp4\".format(plt_name), writer=writer)\n            \n            # Difference in AIMs Activation\n            plt.figure()\n            plt.clf()\n            ax = sns.heatmap(np.asarray(masks[-1]) - np.asarray(masks[0]), yticklabels=labels[0], square=True, cbar_kws={\"shrink\": 0.5})\n            ax.set_title(\"Difference in AIMs Attention Weight\")\n            plt.xlabel('Mechanisms')\n            plt.ylabel('Class')\n            plt.tight_layout()\n            plt.savefig('plots/mask-diff_{}.pdf'.format(plt_name), bbox_inches='tight')\n            # First\n            plt.figure()\n            plt.clf()\n            ax = sns.heatmap(np.asarray(masks[0]), yticklabels=labels[0], square=True, cbar_kws={\"shrink\": 0.5})\n            ax.set_title(\"AIMs Attention Weight (Epoch 0)\")\n            plt.xlabel('Mechanisms')\n            plt.ylabel('Class')\n            plt.tight_layout()\n            plt.savefig('plots/mask-first_{}.pdf'.format(plt_name), bbox_inches='tight')\n            # Last\n            plt.figure()\n            plt.clf()\n            ax = sns.heatmap(np.asarray(masks[-1]), yticklabels=labels[0], square=True, cbar_kws={\"shrink\": 0.5})\n            ax.set_title(\"AIMs Attention Weight (Epoch 49)\")\n            plt.xlabel('Mechanisms')\n            plt.ylabel('Class')\n            plt.tight_layout()\n            plt.savefig('plots/mask-last_{}.pdf'.format(plt_name), bbox_inches='tight')\n        '''", "\n", "\n", "return", "bestAcc", ",", "acc", ",", "history", "\n", "", "", ""]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.algorithm.set_size": [[57, 89], ["None"], "function", ["None"], ["def", "set_size", "(", "width", ",", "fraction", "=", "1", ")", ":", "\n", "    ", "\"\"\" Set aesthetic figure dimensions to avoid scaling in latex.\n\n    Parameters\n    ----------\n    width: float\n            Width in pts\n    fraction: float\n            Fraction of the width which you wish the figure to occupy\n\n    Returns\n    -------\n    fig_dim: tuple\n            Dimensions of figure in inches\n    \"\"\"", "\n", "# Width of figure", "\n", "fig_width_pt", "=", "width", "*", "fraction", "\n", "\n", "# Convert from pt to inches", "\n", "inches_per_pt", "=", "1", "/", "72.27", "\n", "\n", "# Golden ratio to set aesthetic figure height", "\n", "golden_ratio", "=", "(", "5", "**", ".5", "-", "0.5", ")", "/", "2", "\n", "\n", "# Figure width in inches", "\n", "fig_width_in", "=", "fig_width_pt", "*", "inches_per_pt", "\n", "# Figure height in inches", "\n", "fig_height_in", "=", "fig_width_in", "*", "golden_ratio", "\n", "\n", "fig_dim", "=", "(", "fig_width_in", ",", "fig_height_in", ")", "\n", "\n", "return", "fig_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.classifier.Classifier.__init__": [[35, 48], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "networks.FeatExemplarAvgBlock", "networks.LinearDiag", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.experiment.experiment.experiment.__init__"], ["def", "__init__", "(", "self", ",", "nKnovel", ",", "nFeat", ")", ":", "\n", "        ", "super", "(", "Classifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "nKnovel", "=", "nKnovel", "\n", "self", ".", "nFeat", "=", "nFeat", "\n", "\n", "# bias & scale of classifier p(y | x, phi)", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "1", ")", ".", "fill_", "(", "0", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "scale_cls", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "1", ")", ".", "fill_", "(", "10", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n", "# init_net lambda(d_t^l)", "\n", "self", ".", "favgblock", "=", "FeatExemplarAvgBlock", "(", "self", ".", "nFeat", ")", "\n", "self", ".", "wnLayerFavg", "=", "LinearDiag", "(", "self", ".", "nFeat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.classifier.Classifier.apply_classification_weights": [[52, 69], ["torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "torch.baddbmm", "classifier.Classifier.bias.view", "torch.normalize.transpose", "torch.normalize.dim", "torch.normalize.dim"], "methods", ["None"], ["", "def", "apply_classification_weights", "(", "self", ",", "features", ",", "cls_weights", ")", ":", "\n", "        ", "\"\"\"\n        Given feature and weights, computing negative log-likelihoods of nKnovel classes\n        (B x n x nFeat, B x nKnovel x nFeat) -> B x n x nKnovel\n\n        :param features: features of query set.\n        :type features: torch.FloatTensor\n        :param cls_weights: generated weights.\n        :type cls_weights: torch.FloatTensor\n        :return: classification scores\n        :rtype: torch.FloatTensor\n        \"\"\"", "\n", "features", "=", "F", ".", "normalize", "(", "features", ",", "p", "=", "2", ",", "dim", "=", "features", ".", "dim", "(", ")", "-", "1", ",", "eps", "=", "1e-12", ")", "\n", "cls_weights", "=", "F", ".", "normalize", "(", "cls_weights", ",", "p", "=", "2", ",", "dim", "=", "cls_weights", ".", "dim", "(", ")", "-", "1", ",", "eps", "=", "1e-12", ")", "\n", "cls_scores", "=", "self", ".", "scale_cls", "*", "torch", ".", "baddbmm", "(", "1.0", ",", "self", ".", "bias", ".", "view", "(", "1", ",", "1", ",", "1", ")", ",", "1.0", ",", "\n", "features", ",", "cls_weights", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "return", "cls_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.classifier.Classifier.init_phi": [[70, 85], ["classifier.Classifier.favgblock", "phi.view.view.size", "phi.view.view.view", "classifier.Classifier.wnLayerFavg", "phi.view.view.view"], "methods", ["None"], ["", "def", "init_phi", "(", "self", ",", "features_supp", ",", "labels_supp_1hot", ")", ":", "\n", "        ", "\"\"\"\n        Compute phi^0 from support set using classwise feature averaging.\n\n        :param features_supp: support features, B x nSupp x nFeat.\n        :type features_supp: torch.FloatTensor\n        :param labels_supp_1hot: one-hot representation of labels in support set.\n        :return: phi^0, B * nKnovel x nFeat\n        \"\"\"", "\n", "phi", "=", "self", ".", "favgblock", "(", "features_supp", ",", "labels_supp_1hot", ")", "# B x nKnovel x nFeat", "\n", "batch_size", ",", "nKnovel", ",", "num_channels", "=", "phi", ".", "size", "(", ")", "\n", "phi", "=", "phi", ".", "view", "(", "batch_size", "*", "nKnovel", ",", "num_channels", ")", "\n", "phi", "=", "self", ".", "wnLayerFavg", "(", "phi", ")", "# weight each feature differently", "\n", "phi", "=", "phi", ".", "view", "(", "-", "1", ",", "nKnovel", ",", "num_channels", ")", "\n", "return", "phi", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.classifier.Classifier.transUpdate": [[86, 126], ["networks.label_to_1hot", "classifier.Classifier.init_phi", "classifier.Classifier.apply_classification_weights", "cls_scores.view.view.view", "features.size", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.networks.label_to_1hot", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.classifier.Classifier.init_phi", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.classifier.Classifier.apply_classification_weights"], ["", "def", "transUpdate", "(", "self", ",", "features_supp", ",", "features", ",", "labels_supp", ",", "grad_logit", ",", "lr", "=", "1e-3", ",", "retain_graph", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Update phi using synthetic gradient descent from RIMs.\n\n        :param features_supp: support features used for parameter init\n        :type features_sup: torch.FloatTensor\n        :param features: features to be classified (usually query features)\n        :type features: torch.FloatTensor\n        :param labels_supp: support labels used for parameter init\n        :type labels_supp: torch.FloatTensor\n        :param grad_logit: gradient generated for Jacobian-vector product\n        :type grad_logit: torch.FloatTensor\n        :param lr: learning rate used for gradient descent\n        :type lr: float\n        :return: phi\n        :rtype: torch.FloatTensor\n        \"\"\"", "\n", "labels_supp_1hot", "=", "label_to_1hot", "(", "labels_supp", ",", "self", ".", "nKnovel", ")", "\n", "phi", "=", "self", ".", "init_phi", "(", "features_supp", ",", "labels_supp_1hot", ")", "\n", "\n", "batch_size", ",", "num_examples", "=", "features", ".", "size", "(", ")", "[", ":", "2", "]", "\n", "new_batch_dim", "=", "batch_size", "*", "num_examples", "\n", "cls_scores", "=", "self", ".", "apply_classification_weights", "(", "features", ",", "phi", ")", "\n", "cls_scores", "=", "cls_scores", ".", "view", "(", "new_batch_dim", ",", "-", "1", ")", "# B * n x nKnovel", "\n", "# grad_logit = self.dni(cls_scores) # B * n x nKnovel", "\n", "# TODO: directly propagate gradient to variables that generate phi", "\n", "grad", "=", "torch", ".", "autograd", ".", "grad", "(", "[", "cls_scores", "]", ",", "[", "phi", "]", ",", "\n", "grad_outputs", "=", "[", "grad_logit", "]", ",", "\n", "create_graph", "=", "True", ",", "retain_graph", "=", "retain_graph", ",", "\n", "only_inputs", "=", "True", ")", "[", "0", "]", "# B x nKnovel x nFeat", "\n", "# grad = torch.autograd.grad([cls_scores], [phi],", "\n", "#                             grad_outputs=[grad_logit],", "\n", "#                             create_graph=True, retain_graph=retain_graph,", "\n", "#                             only_inputs=True)[0] # B x nKnovel x nFeat", "\n", "\n", "# perform synthetic GD", "\n", "phi", "=", "phi", "-", "lr", "*", "grad", "\n", "# phi.data -= lr * grad", "\n", "\n", "return", "phi", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.classifier.Classifier.trans_inference": [[128, 164], ["networks.label_to_1hot", "classifier.Classifier.init_phi", "classifier.Classifier.apply_classification_weights", "classifier.Classifier.view", "classifier.Classifier.apply_classification_weights", "features.size", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.networks.label_to_1hot", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.classifier.Classifier.init_phi", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.classifier.Classifier.apply_classification_weights", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.classifier.Classifier.apply_classification_weights"], ["", "def", "trans_inference", "(", "self", ",", "features_supp", ",", "features", ",", "labels_supp", ",", "grad_logit", ",", "lr", "=", "1e-3", ",", "retain_graph", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Update phi using synthetic gradient descent from RIMs.\n\n        :param features_supp: support features used for parameter init\n        :type features_sup: torch.FloatTensor\n        :param features: features to be classified (usually query features)\n        :type features: torch.FloatTensor\n        :param labels_supp: support labels used for parameter init\n        :type labels_supp: torch.FloatTensor\n        :param grad_logit: gradient generated for Jacobian-vector product\n        :type grad_logit: torch.FloatTensor\n        :param lr: learning rate used for gradient descent\n        :type lr: float\n        :return: phi\n        :rtype: torch.FloatTensor\n        \"\"\"", "\n", "labels_supp_1hot", "=", "label_to_1hot", "(", "labels_supp", ",", "self", ".", "nKnovel", ")", "\n", "phi", "=", "self", ".", "init_phi", "(", "features_supp", ",", "labels_supp_1hot", ")", "\n", "\n", "batch_size", ",", "num_examples", "=", "features", ".", "size", "(", ")", "[", ":", "2", "]", "\n", "new_batch_dim", "=", "batch_size", "*", "num_examples", "\n", "cls_scores", "=", "self", ".", "apply_classification_weights", "(", "features", ",", "phi", ")", "\n", "cls_scores", "=", "cls_scores", ".", "view", "(", "new_batch_dim", ",", "-", "1", ")", "# B * n x nKnovel", "\n", "# TODO: directly propagate gradient to variables that generate phi", "\n", "grad", "=", "torch", ".", "autograd", ".", "grad", "(", "[", "cls_scores", "]", ",", "[", "phi", "]", ",", "\n", "grad_outputs", "=", "[", "grad_logit", "]", ",", "\n", "create_graph", "=", "True", ",", "retain_graph", "=", "retain_graph", ",", "\n", "only_inputs", "=", "True", ")", "[", "0", "]", "# B x nKnovel x nFeat", "\n", "\n", "# perform synthetic GD", "\n", "phi", "=", "phi", "-", "lr", "*", "grad", "\n", "# phi.data -= lr * grad", "\n", "cls_scores", "=", "self", ".", "apply_classification_weights", "(", "features", ",", "phi", ")", "\n", "\n", "return", "cls_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.classifier.Classifier.get_classification_weights": [[165, 186], ["torch.normalize", "torch.normalize", "torch.normalize", "classifier.Classifier.init_phi", "torch.normalize.dim"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.classifier.Classifier.init_phi"], ["", "def", "get_classification_weights", "(", "self", ",", "features_supp", ",", "labels_supp_1hot", ")", ":", "\n", "        ", "\"\"\"\n        Obtain weights for the query set using features_supp, labels_supp and features_query.\n        features_supp, labels_supp --> self.init_phi\n        features_query --> self.refine_phi\n\n        :features_supp: feat(x_t^l)\n        :type features_supp: torch.FloatTensor\n        :labels_supp_1hot: one-hot representation of support labels\n        :type labels_supp: torch.FloatTensor\n        :features_query: feat(x_t)\n        :type features_query: torch.FloatTensor\n        :lr float: learning rate of synthetic GD\n        :return: weights for query set\n        :rtype: torch.FloatTensor\n        \"\"\"", "\n", "features_supp", "=", "F", ".", "normalize", "(", "features_supp", ",", "p", "=", "2", ",", "dim", "=", "features_supp", ".", "dim", "(", ")", "-", "1", ",", "eps", "=", "1e-12", ")", "\n", "\n", "weight_novel", "=", "self", ".", "init_phi", "(", "features_supp", ",", "labels_supp_1hot", ")", "\n", "\n", "return", "weight_novel", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.classifier.Classifier.forward": [[188, 210], ["networks.label_to_1hot", "classifier.Classifier.get_classification_weights", "classifier.Classifier.apply_classification_weights"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.networks.label_to_1hot", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.classifier.Classifier.get_classification_weights", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Fewshot.classifier.Classifier.apply_classification_weights"], ["", "def", "forward", "(", "self", ",", "features_supp", ",", "features_query", ",", "labels_supp", ")", ":", "\n", "        ", "\"\"\"\n        Compute classification scores.\n        :labels_supp_1hot: one-hot representation of support labels\n\n        :features_supp: B x nKnovel*nExamplar x nFeat\n        :type features_supp: torch.FloatTensor\n        :labels_supp: B x nknovel*nExamplar in [0, nKnovel-1]\n        :type labels_supp: torch.FloatTensor\n        :features_query: B x nKnovel*nTest x nFeat\n        :type features_query: torch.FloatTensor\n        :return: classification scores\n        :rtype: torch.FloatTensor\n        \"\"\"", "\n", "labels_supp_1hot", "=", "label_to_1hot", "(", "labels_supp", ",", "self", ".", "nKnovel", ")", "\n", "cls_weights", "=", "self", ".", "get_classification_weights", "(", "features_supp", ",", "labels_supp_1hot", ")", "\n", "# if features_query == None: # learn using support set", "\n", "#     cls_scores = self.apply_classification_weights(features_supp, cls_weights)", "\n", "# else:", "\n", "cls_scores", "=", "self", ".", "apply_classification_weights", "(", "features_query", ",", "cls_weights", ")", "\n", "\n", "return", "cls_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.config.create_dirs": [[22, 37], ["print", "exit", "os.path.exists", "os.makedirs"], "function", ["None"], ["def", "create_dirs", "(", "dirs", ")", ":", "\n", "    ", "\"\"\"\n    Create directories given by a list if these directories are not found\n\n    :param list dirs: directories\n    :return exit_code: 0:success -1:failed\n    \"\"\"", "\n", "try", ":", "\n", "        ", "for", "dir_", "in", "dirs", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "dir_", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "dir_", ")", "\n", "", "", "return", "0", "\n", "", "except", "Exception", "as", "err", ":", "\n", "        ", "print", "(", "\"Creating directories error: {0}\"", ".", "format", "(", "err", ")", ")", "\n", "exit", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.config.get_config_from_json": [[39, 53], ["easydict.EasyDict", "open", "json.load"], "function", ["None"], ["", "", "def", "get_config_from_json", "(", "json_file", ")", ":", "\n", "    ", "\"\"\"\n    Get the config from a json file\n\n    :param string json_file: json configuration file\n    :return: EasyDict config\n    \"\"\"", "\n", "# parse the configurations from the config json file provided", "\n", "with", "open", "(", "json_file", ",", "'r'", ")", "as", "config_file", ":", "\n", "        ", "config_dict", "=", "json", ".", "load", "(", "config_file", ")", "\n", "\n", "# convert the dictionary to a namespace using bunch lib", "\n", "", "config", "=", "EasyDict", "(", "config_dict", ")", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.config.get_config_from_yaml": [[55, 68], ["easydict.EasyDict", "open", "yaml.load"], "function", ["None"], ["", "def", "get_config_from_yaml", "(", "yaml_file", ")", ":", "\n", "    ", "\"\"\"\n    Get the config from a yaml file\n\n    :param string yaml_file: yaml configuration file\n    :return: EasyDict config\n    \"\"\"", "\n", "with", "open", "(", "yaml_file", ")", "as", "fp", ":", "\n", "        ", "config_dict", "=", "yaml", ".", "load", "(", "fp", ")", "\n", "\n", "# convert the dictionary to a namespace using bunch lib", "\n", "", "config", "=", "EasyDict", "(", "config_dict", ")", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.config.get_args": [[70, 113], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "def", "get_args", "(", ")", ":", "\n", "    ", "\"\"\"\n    Create argparser for frequent configurations.\n\n    :return: argparser object\n    \"\"\"", "\n", "argparser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "__doc__", ")", "\n", "argparser", ".", "add_argument", "(", "\n", "'-c'", ",", "'--config'", ",", "\n", "metavar", "=", "'C'", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'The Configuration file'", ")", "\n", "argparser", ".", "add_argument", "(", "\n", "'-k'", ",", "'--steps'", ",", "\n", "default", "=", "3", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'The number of SIB steps'", ")", "\n", "argparser", ".", "add_argument", "(", "\n", "'-s'", ",", "'--seed'", ",", "\n", "default", "=", "100", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'The random seed'", ")", "\n", "argparser", ".", "add_argument", "(", "\n", "'--gpu'", ",", "\n", "default", "=", "0", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'GPU id'", ")", "\n", "argparser", ".", "add_argument", "(", "\n", "'--ckpt'", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'The path to ckpt'", ")", "\n", "argparser", ".", "add_argument", "(", "\n", "'--useAIM'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "'whether to use Attentive Independent Mechanisms'", ")", "\n", "argparser", ".", "add_argument", "(", "\n", "'--testAdd'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "'check if performance gain is from linear linear added between classifier and feature extractor'", ")", "\n", "args", "=", "argparser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.config.get_config": [[115, 150], ["config.get_args", "config_file.endswith", "os.path.join", "os.path.join", "os.path.join", "config.create_dirs", "config.get_config_from_json", "config_file.endswith", "config.get_config_from_yaml", "Exception", "[].replace", "[].split", "str().split", "str", "datetime.datetime.now"], "function", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.config_bak.get_args", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.config_bak.create_dirs", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.config_bak.get_config_from_json", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.config_bak.get_config_from_yaml"], ["", "def", "get_config", "(", ")", ":", "\n", "    ", "\"\"\"\n    Create experimental config from argparse and config file.\n\n    :return: Configuration EasyDict\n    \"\"\"", "\n", "# read manual args", "\n", "args", "=", "get_args", "(", ")", "\n", "config_file", "=", "args", ".", "config", "\n", "\n", "# load experimental configuration", "\n", "if", "config_file", ".", "endswith", "(", "'json'", ")", ":", "\n", "        ", "config", "=", "get_config_from_json", "(", "config_file", ")", "\n", "", "elif", "config_file", ".", "endswith", "(", "'yaml'", ")", ":", "\n", "        ", "config", "=", "get_config_from_yaml", "(", "config_file", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\"Only .json and .yaml are supported!\"", ")", "\n", "\n", "# reset config from args", "\n", "", "config", ".", "nStep", "=", "args", ".", "steps", "\n", "config", ".", "seed", "=", "args", ".", "seed", "\n", "config", ".", "gpu", "=", "args", ".", "gpu", "\n", "config", ".", "test", "=", "False", "if", "args", ".", "ckpt", "is", "None", "else", "True", "\n", "config", ".", "ckptPth", "=", "args", ".", "ckpt", "\n", "config", ".", "useAIM", "=", "args", ".", "useAIM", "\n", "config", ".", "testAdd", "=", "args", ".", "testAdd", "\n", "\n", "# create directories", "\n", "config", ".", "cacheDir", "=", "os", ".", "path", ".", "join", "(", "\"cache\"", ",", "'{}_{}shot_K{}_seed{}_{}'", ".", "format", "(", "\n", "config", ".", "expName", ",", "config", ".", "nSupport", ",", "config", ".", "nStep", ",", "config", ".", "seed", ",", "str", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", ".", "split", "(", "\" \"", ")", "[", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", ".", "replace", "(", "\":\"", ",", "\"-\"", ")", ")", ")", "\n", "config", ".", "logDir", "=", "os", ".", "path", ".", "join", "(", "config", ".", "cacheDir", ",", "'logs'", ")", "\n", "config", ".", "outDir", "=", "os", ".", "path", ".", "join", "(", "config", ".", "cacheDir", ",", "'outputs'", ")", "\n", "create_dirs", "(", "[", "config", ".", "cacheDir", ",", "config", ".", "logDir", ",", "config", ".", "outDir", "]", ")", "\n", "\n", "return", "config", "", "", ""]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.config_bak.create_dirs": [[21, 36], ["print", "exit", "os.path.exists", "os.makedirs"], "function", ["None"], ["def", "create_dirs", "(", "dirs", ")", ":", "\n", "    ", "\"\"\"\n    Create directories given by a list if these directories are not found\n\n    :param list dirs: directories\n    :return exit_code: 0:success -1:failed\n    \"\"\"", "\n", "try", ":", "\n", "        ", "for", "dir_", "in", "dirs", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "dir_", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "dir_", ")", "\n", "", "", "return", "0", "\n", "", "except", "Exception", "as", "err", ":", "\n", "        ", "print", "(", "\"Creating directories error: {0}\"", ".", "format", "(", "err", ")", ")", "\n", "exit", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.config_bak.get_config_from_json": [[38, 52], ["easydict.EasyDict", "open", "json.load"], "function", ["None"], ["", "", "def", "get_config_from_json", "(", "json_file", ")", ":", "\n", "    ", "\"\"\"\n    Get the config from a json file\n\n    :param string json_file: json configuration file\n    :return: EasyDict config\n    \"\"\"", "\n", "# parse the configurations from the config json file provided", "\n", "with", "open", "(", "json_file", ",", "'r'", ")", "as", "config_file", ":", "\n", "        ", "config_dict", "=", "json", ".", "load", "(", "config_file", ")", "\n", "\n", "# convert the dictionary to a namespace using bunch lib", "\n", "", "config", "=", "EasyDict", "(", "config_dict", ")", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.config_bak.get_config_from_yaml": [[54, 67], ["easydict.EasyDict", "open", "yaml.load"], "function", ["None"], ["", "def", "get_config_from_yaml", "(", "yaml_file", ")", ":", "\n", "    ", "\"\"\"\n    Get the config from a yaml file\n\n    :param string yaml_file: yaml configuration file\n    :return: EasyDict config\n    \"\"\"", "\n", "with", "open", "(", "yaml_file", ")", "as", "fp", ":", "\n", "        ", "config_dict", "=", "yaml", ".", "load", "(", "fp", ")", "\n", "\n", "# convert the dictionary to a namespace using bunch lib", "\n", "", "config", "=", "EasyDict", "(", "config_dict", ")", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.config_bak.get_args": [[69, 102], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "def", "get_args", "(", ")", ":", "\n", "    ", "\"\"\"\n    Create argparser for frequent configurations.\n\n    :return: argparser object\n    \"\"\"", "\n", "argparser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "__doc__", ")", "\n", "argparser", ".", "add_argument", "(", "\n", "'-c'", ",", "'--config'", ",", "\n", "metavar", "=", "'C'", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'The Configuration file'", ")", "\n", "argparser", ".", "add_argument", "(", "\n", "'-s'", ",", "'--seed'", ",", "\n", "default", "=", "100", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'The random seed'", ")", "\n", "argparser", ".", "add_argument", "(", "\n", "'--gpu'", ",", "\n", "default", "=", "0", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'GPU id'", ")", "\n", "argparser", ".", "add_argument", "(", "\n", "'--ckpt'", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'The path to ckpt'", ")", "\n", "argparser", ".", "add_argument", "(", "\n", "'--display_port'", ",", "\n", "default", "=", "8097", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'Display port for visdom'", ")", "\n", "args", "=", "argparser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.config_bak.get_config": [[104, 138], ["config_bak.get_args", "config_file.endswith", "config_bak.get_config_from_json", "config_file.endswith", "os.path.join", "os.path.join", "os.path.join", "config_bak.create_dirs", "config_bak.get_config_from_yaml", "Exception"], "function", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.config_bak.get_args", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.config_bak.get_config_from_json", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.config_bak.create_dirs", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.config_bak.get_config_from_yaml"], ["", "def", "get_config", "(", ")", ":", "\n", "    ", "\"\"\"\n    Create experimental config from argparse and config file.\n\n    :return: Configuration EasyDict\n    \"\"\"", "\n", "# read manual args", "\n", "args", "=", "get_args", "(", ")", "\n", "config_file", "=", "args", ".", "config", "\n", "\n", "# load experimental configuration", "\n", "if", "config_file", ".", "endswith", "(", "'json'", ")", ":", "\n", "        ", "config", "=", "get_config_from_json", "(", "config_file", ")", "\n", "", "elif", "config_file", ".", "endswith", "(", "'yaml'", ")", ":", "\n", "        ", "config", "=", "get_config_from_yaml", "(", "config_file", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\"Only .json and .yaml are supported!\"", ")", "\n", "\n", "# reset config from args", "\n", "", "config", ".", "seed", "=", "args", ".", "seed", "\n", "config", ".", "gpu", "=", "args", ".", "gpu", "\n", "config", ".", "test", "=", "False", "if", "args", ".", "ckpt", "is", "None", "else", "True", "\n", "config", ".", "ckptPth", "=", "args", ".", "ckpt", "\n", "config", ".", "display_port", "=", "args", ".", "display_port", "\n", "\n", "# create directories", "\n", "if", "config", ".", "createCache", ":", "\n", "        ", "config", ".", "cacheDir", "=", "os", ".", "path", ".", "join", "(", "\"cache\"", ",", "'{}_{}shot_K{}_{}_seed{}'", ".", "format", "(", "\n", "config", ".", "expName", ",", "config", ".", "nSupport", ",", "config", ".", "aStep", ",", "config", ".", "tStep", ",", "config", ".", "seed", ")", ")", "\n", "config", ".", "logDir", "=", "os", ".", "path", ".", "join", "(", "config", ".", "cacheDir", ",", "'logs'", ")", "\n", "config", ".", "outDir", "=", "os", ".", "path", ".", "join", "(", "config", ".", "cacheDir", ",", "'outputs'", ")", "\n", "create_dirs", "(", "[", "config", ".", "cacheDir", ",", "config", ".", "logDir", ",", "config", ".", "outDir", "]", ")", "\n", "\n", "", "return", "config", "\n", "", ""]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.outils.AverageMeter.__init__": [[32, 34], ["outils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.outils.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.outils.AverageMeter.reset": [[35, 40], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.outils.AverageMeter.update": [[41, 46], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.outils.getCi": [[48, 55], ["numpy.mean", "numpy.std", "numpy.sqrt", "len"], "function", ["None"], ["", "", "def", "getCi", "(", "accLog", ")", ":", "\n", "\n", "    ", "mean", "=", "np", ".", "mean", "(", "accLog", ")", "\n", "std", "=", "np", ".", "std", "(", "accLog", ")", "\n", "ci95", "=", "1.96", "*", "std", "/", "np", ".", "sqrt", "(", "len", "(", "accLog", ")", ")", "\n", "\n", "return", "mean", ",", "ci95", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.outils.accuracy": [[57, 72], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "max", "output.topk", "pred.t.t", "pred.t.eq", "target.size", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", ")", "[", "0", "]", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.outils.get_mean_and_std": [[74, 87], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "print", "torch.zeros.div_", "torch.zeros.div_", "range", "len", "len", "inputs[].mean", "inputs[].std"], "function", ["None"], ["", "", "def", "get_mean_and_std", "(", "dataset", ")", ":", "\n", "    ", "'''Compute the mean and std value of dataset.'''", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "mean", "=", "torch", ".", "zeros", "(", "3", ")", "\n", "std", "=", "torch", ".", "zeros", "(", "3", ")", "\n", "print", "(", "'==> Computing mean and std..'", ")", "\n", "for", "inputs", ",", "targets", "in", "dataloader", ":", "\n", "        ", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "mean", "[", "i", "]", "+=", "inputs", "[", ":", ",", "i", ",", ":", ",", ":", "]", ".", "mean", "(", ")", "\n", "std", "[", "i", "]", "+=", "inputs", "[", ":", ",", "i", ",", ":", ",", ":", "]", ".", "std", "(", ")", "\n", "", "", "mean", ".", "div_", "(", "len", "(", "dataset", ")", ")", "\n", "std", ".", "div_", "(", "len", "(", "dataset", ")", ")", "\n", "return", "mean", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.outils.init_params": [[89, 103], ["net.modules", "isinstance", "torch.kaiming_normal", "isinstance", "torch.constant", "torch.constant", "torch.constant", "isinstance", "torch.normal", "torch.constant"], "function", ["None"], ["", "def", "init_params", "(", "net", ")", ":", "\n", "    ", "'''Init layer parameters.'''", "\n", "for", "m", "in", "net", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "init", ".", "kaiming_normal", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "if", "m", ".", "bias", ":", "\n", "                ", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "init", ".", "constant", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "init", ".", "normal", "(", "m", ".", "weight", ",", "std", "=", "1e-3", ")", "\n", "if", "m", ".", "bias", ":", "\n", "                ", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.outils.progress_bar": [[113, 155], ["int", "sys.stdout.write", "range", "sys.stdout.write", "range", "sys.stdout.write", "time.time", "L.append", "L.append", "sys.stdout.write", "range", "range", "sys.stdout.write", "sys.stdout.flush", "time.time", "int", "sys.stdout.write", "sys.stdout.write", "L.append", "sys.stdout.write", "sys.stdout.write", "sys.stdout.write", "sys.stdout.write", "outils.format_time", "outils.format_time", "len", "int", "int"], "function", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.ProgressBar.format_time", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.ProgressBar.format_time"], ["def", "progress_bar", "(", "current", ",", "total", ",", "msg", "=", "None", ")", ":", "\n", "    ", "global", "last_time", ",", "begin_time", "\n", "if", "current", "==", "0", ":", "\n", "        ", "begin_time", "=", "time", ".", "time", "(", ")", "# Reset for new bar.", "\n", "\n", "", "cur_len", "=", "int", "(", "TOTAL_BAR_LENGTH", "*", "current", "/", "total", ")", "\n", "rest_len", "=", "int", "(", "TOTAL_BAR_LENGTH", "-", "cur_len", ")", "-", "1", "\n", "\n", "sys", ".", "stdout", ".", "write", "(", "' ['", ")", "\n", "for", "i", "in", "range", "(", "cur_len", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'='", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "'>'", ")", "\n", "for", "i", "in", "range", "(", "rest_len", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'.'", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "']'", ")", "\n", "\n", "cur_time", "=", "time", ".", "time", "(", ")", "\n", "step_time", "=", "cur_time", "-", "last_time", "\n", "last_time", "=", "cur_time", "\n", "tot_time", "=", "cur_time", "-", "begin_time", "\n", "\n", "L", "=", "[", "]", "\n", "L", ".", "append", "(", "'  Step: %s'", "%", "format_time", "(", "step_time", ")", ")", "\n", "L", ".", "append", "(", "' | Tot: %s'", "%", "format_time", "(", "tot_time", ")", ")", "\n", "if", "msg", ":", "\n", "        ", "L", ".", "append", "(", "' | '", "+", "msg", ")", "\n", "\n", "", "msg", "=", "''", ".", "join", "(", "L", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "msg", ")", "\n", "for", "i", "in", "range", "(", "term_width", "-", "int", "(", "TOTAL_BAR_LENGTH", ")", "-", "len", "(", "msg", ")", "-", "3", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "' '", ")", "\n", "\n", "# Go back to the center of the bar.", "\n", "", "for", "i", "in", "range", "(", "term_width", "-", "int", "(", "TOTAL_BAR_LENGTH", "/", "2", ")", "+", "2", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\b'", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "' %d/%d '", "%", "(", "current", "+", "1", ",", "total", ")", ")", "\n", "\n", "if", "current", "<", "total", "-", "1", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\r'", ")", "\n", "", "else", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\n'", ")", "\n", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.outils.format_time": [[157, 188], ["int", "int", "int", "int", "int", "str", "str", "str", "str", "str"], "function", ["None"], ["", "def", "format_time", "(", "seconds", ")", ":", "\n", "    ", "days", "=", "int", "(", "seconds", "/", "3600", "/", "24", ")", "\n", "seconds", "=", "seconds", "-", "days", "*", "3600", "*", "24", "\n", "hours", "=", "int", "(", "seconds", "/", "3600", ")", "\n", "seconds", "=", "seconds", "-", "hours", "*", "3600", "\n", "minutes", "=", "int", "(", "seconds", "/", "60", ")", "\n", "seconds", "=", "seconds", "-", "minutes", "*", "60", "\n", "secondsf", "=", "int", "(", "seconds", ")", "\n", "seconds", "=", "seconds", "-", "secondsf", "\n", "millis", "=", "int", "(", "seconds", "*", "1000", ")", "\n", "\n", "f", "=", "''", "\n", "i", "=", "1", "\n", "if", "days", ">", "0", ":", "\n", "        ", "f", "+=", "str", "(", "days", ")", "+", "'D'", "\n", "i", "+=", "1", "\n", "", "if", "hours", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "hours", ")", "+", "'h'", "\n", "i", "+=", "1", "\n", "", "if", "minutes", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "minutes", ")", "+", "'m'", "\n", "i", "+=", "1", "\n", "", "if", "secondsf", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "secondsf", ")", "+", "'s'", "\n", "i", "+=", "1", "\n", "", "if", "millis", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "millis", ")", "+", "'ms'", "\n", "i", "+=", "1", "\n", "", "if", "f", "==", "''", ":", "\n", "        ", "f", "=", "'0ms'", "\n", "", "return", "f", "\n", "", ""]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.set_random_seed": [[26, 31], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed_all"], "function", ["None"], ["def", "set_random_seed", "(", "seed", "=", "3", ")", ":", "\n", "    ", "pyrandom", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.to_device": [[33, 44], ["torch.is_tensor", "input.to", "isinstance", "isinstance", "isinstance", "utils.to_device", "TypeError", "input.items", "utils.to_device"], "function", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.to_device", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.to_device"], ["", "def", "to_device", "(", "input", ",", "device", ")", ":", "\n", "    ", "if", "torch", ".", "is_tensor", "(", "input", ")", ":", "\n", "        ", "return", "input", ".", "to", "(", "device", "=", "device", ")", "\n", "", "elif", "isinstance", "(", "input", ",", "str", ")", ":", "\n", "        ", "return", "input", "\n", "", "elif", "isinstance", "(", "input", ",", "collections", ".", "Mapping", ")", ":", "\n", "        ", "return", "{", "k", ":", "to_device", "(", "sample", ",", "device", "=", "device", ")", "for", "k", ",", "sample", "in", "input", ".", "items", "(", ")", "}", "\n", "", "elif", "isinstance", "(", "input", ",", "collections", ".", "Sequence", ")", ":", "\n", "        ", "return", "[", "to_device", "(", "sample", ",", "device", "=", "device", ")", "for", "sample", "in", "input", "]", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\"Input must contain tensor, dict or list, found {type(input)}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.fast_hist": [[46, 51], ["numpy.bincount().reshape", "numpy.bincount", "label_true[].astype"], "function", ["None"], ["", "", "def", "fast_hist", "(", "label_pred", ",", "label_true", ",", "n_class", ")", ":", "\n", "    ", "mask", "=", "(", "label_true", ">=", "0", ")", "&", "(", "label_true", "<", "n_class", ")", "\n", "return", "np", ".", "bincount", "(", "\n", "n_class", "*", "label_true", "[", "mask", "]", ".", "astype", "(", "int", ")", "+", "label_pred", "[", "mask", "]", ",", "\n", "minlength", "=", "n_class", "**", "2", ")", ".", "reshape", "(", "n_class", ",", "n_class", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.convert_state_dict": [[53, 65], ["collections.OrderedDict", "state_dict.items"], "function", ["None"], ["", "def", "convert_state_dict", "(", "state_dict", ")", ":", "\n", "    ", "\"\"\"\n    Converts a state dict saved from a dataParallel module to normal\n    module state_dict inplace\n\n    :param dict state_dict: is the loaded DataParallel model_state\n    \"\"\"", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "name", "=", "k", "[", "7", ":", "]", "# remove `module.`", "\n", "new_state_dict", "[", "name", "]", "=", "v", "\n", "", "return", "new_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.get_logger": [[67, 84], ["logging.getLogger", "logging.getLogger.setLevel", "logging.Formatter", "[].replace", "ts.replace().replace.replace().replace", "os.path.join", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging.getLogger.addHandler", "ts.replace().replace.replace", "str().split", "str", "datetime.datetime.now"], "function", ["None"], ["", "def", "get_logger", "(", "logdir", ",", "name", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "\"%(asctime)s %(levelname)s %(message)s\"", ")", "\n", "\n", "ts", "=", "str", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", ".", "split", "(", "\".\"", ")", "[", "0", "]", ".", "replace", "(", "\" \"", ",", "\"_\"", ")", "\n", "ts", "=", "ts", ".", "replace", "(", "\":\"", ",", "\"_\"", ")", ".", "replace", "(", "\"-\"", ",", "\"_\"", ")", "\n", "file_path", "=", "os", ".", "path", ".", "join", "(", "logdir", ",", "\"run_{}.log\"", ".", "format", "(", "ts", ")", ")", "\n", "file_hdlr", "=", "logging", ".", "FileHandler", "(", "file_path", ")", "\n", "file_hdlr", ".", "setFormatter", "(", "formatter", ")", "\n", "\n", "strm_hdlr", "=", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", "\n", "strm_hdlr", ".", "setFormatter", "(", "formatter", ")", "\n", "\n", "logger", ".", "addHandler", "(", "file_hdlr", ")", "\n", "logger", ".", "addHandler", "(", "strm_hdlr", ")", "\n", "return", "logger", "\n", "", ""]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.replay.Replay.__init__": [[5, 17], ["torch.Module.__init__", "dict", "replay.Replay.register_buffer", "replay.Replay.register_buffer", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.experiment.experiment.experiment.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "buffer_size", "=", "300", ")", ":", "\n", "        ", "super", "(", "Replay", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "buffer_size", "=", "buffer_size", "\n", "self", ".", "class_num_dict", "=", "dict", "(", ")", "\n", "\n", "# create the queue", "\n", "self", ".", "register_buffer", "(", "\"queue_data\"", ",", "torch", ".", "zeros", "(", "torch", ".", "Size", "(", "[", "buffer_size", "]", ")", "+", "input_size", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"queue_target\"", ",", "torch", ".", "zeros", "(", "torch", ".", "Size", "(", "[", "buffer_size", "]", ")", ")", ")", "\n", "self", ".", "queue_ptr", "=", "0", "\n", "self", ".", "queue_used", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.replay.Replay._dequeue_and_enqueue": [[18, 33], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "int"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_dequeue_and_enqueue", "(", "self", ",", "data", ",", "target", ")", ":", "\n", "        ", "batch_size", "=", "data", ".", "shape", "[", "0", "]", "\n", "\n", "if", "self", ".", "queue_used", "+", "batch_size", "<=", "self", ".", "buffer_size", ":", "\n", "            ", "self", ".", "queue_data", "[", "self", ".", "queue_ptr", ":", "self", ".", "queue_ptr", "+", "batch_size", "]", "=", "data", "\n", "\n", "", "ptr", "=", "int", "(", "self", ".", "queue_ptr", ")", "\n", "assert", "self", ".", "K", "%", "batch_size", "==", "0", "# for simplicity", "\n", "\n", "# replace the keys at ptr (dequeue and enqueue)", "\n", "self", ".", "queue", "[", ":", ",", "ptr", ":", "ptr", "+", "batch_size", "]", "=", "keys", ".", "T", "\n", "ptr", "=", "(", "ptr", "+", "batch_size", ")", "%", "self", ".", "K", "# move pointer", "\n", "\n", "self", ".", "queue_ptr", "[", "0", "]", "=", "ptr", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.replay.Replay._batch_shuffle_ddp": [[34, 61], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "concat_all_gather", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.randperm().cuda.view", "torch.randperm().cuda.view", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_batch_shuffle_ddp", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Batch shuffle, for making use of BatchNorm.\n        *** Only support DistributedDataParallel (DDP) model. ***\n        \"\"\"", "\n", "# gather from all gpus", "\n", "batch_size_this", "=", "x", ".", "shape", "[", "0", "]", "\n", "x_gather", "=", "concat_all_gather", "(", "x", ")", "\n", "batch_size_all", "=", "x_gather", ".", "shape", "[", "0", "]", "\n", "\n", "num_gpus", "=", "batch_size_all", "//", "batch_size_this", "\n", "\n", "# random shuffle index", "\n", "idx_shuffle", "=", "torch", ".", "randperm", "(", "batch_size_all", ")", ".", "cuda", "(", ")", "\n", "\n", "# broadcast to all gpus", "\n", "torch", ".", "distributed", ".", "broadcast", "(", "idx_shuffle", ",", "src", "=", "0", ")", "\n", "\n", "# index for restoring", "\n", "idx_unshuffle", "=", "torch", ".", "argsort", "(", "idx_shuffle", ")", "\n", "\n", "# shuffled index for this gpu", "\n", "gpu_idx", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "idx_this", "=", "idx_shuffle", ".", "view", "(", "num_gpus", ",", "-", "1", ")", "[", "gpu_idx", "]", "\n", "\n", "return", "x_gather", "[", "idx_this", "]", ",", "idx_unshuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.replay.Replay._batch_unshuffle_ddp": [[62, 80], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "concat_all_gather", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "idx_unshuffle.view"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_batch_unshuffle_ddp", "(", "self", ",", "x", ",", "idx_unshuffle", ")", ":", "\n", "        ", "\"\"\"\n        Undo batch shuffle.\n        *** Only support DistributedDataParallel (DDP) model. ***\n        \"\"\"", "\n", "# gather from all gpus", "\n", "batch_size_this", "=", "x", ".", "shape", "[", "0", "]", "\n", "x_gather", "=", "concat_all_gather", "(", "x", ")", "\n", "batch_size_all", "=", "x_gather", ".", "shape", "[", "0", "]", "\n", "\n", "num_gpus", "=", "batch_size_all", "//", "batch_size_this", "\n", "\n", "# restored index for this gpu", "\n", "gpu_idx", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "idx_this", "=", "idx_unshuffle", ".", "view", "(", "num_gpus", ",", "-", "1", ")", "[", "gpu_idx", "]", "\n", "\n", "return", "x_gather", "[", "idx_this", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.replay.Replay.forward": [[81, 127], ["replay.Replay.encoder_q", "torch.functional.normalize", "torch.functional.normalize", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "replay.Replay._dequeue_and_enqueue", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "replay.Replay._momentum_update_key_encoder", "replay.Replay._batch_shuffle_ddp", "replay.Replay.encoder_k", "torch.functional.normalize", "torch.functional.normalize", "replay.Replay._batch_unshuffle_ddp", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "replay.Replay.queue.clone().detach", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "replay.Replay.queue.clone"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.replay.Replay._dequeue_and_enqueue", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.replay.Replay._batch_shuffle_ddp", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.replay.Replay._batch_unshuffle_ddp"], ["", "def", "forward", "(", "self", ",", "im_q", ",", "im_k", ")", ":", "\n", "        ", "\"\"\"\n        Input:\n            im_q: a batch of query images\n            im_k: a batch of key images\n        Output:\n            logits, targets\n        \"\"\"", "\n", "\n", "# compute query features", "\n", "q", "=", "self", ".", "encoder_q", "(", "im_q", ")", "# queries: NxC", "\n", "q", "=", "nn", ".", "functional", ".", "normalize", "(", "q", ",", "dim", "=", "1", ")", "\n", "\n", "# compute key features", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "# no gradient to keys", "\n", "            ", "self", ".", "_momentum_update_key_encoder", "(", ")", "# update the key encoder", "\n", "\n", "# shuffle for making use of BN", "\n", "im_k", ",", "idx_unshuffle", "=", "self", ".", "_batch_shuffle_ddp", "(", "im_k", ")", "\n", "\n", "k", "=", "self", ".", "encoder_k", "(", "im_k", ")", "# keys: NxC", "\n", "k", "=", "nn", ".", "functional", ".", "normalize", "(", "k", ",", "dim", "=", "1", ")", "\n", "\n", "# undo shuffle", "\n", "k", "=", "self", ".", "_batch_unshuffle_ddp", "(", "k", ",", "idx_unshuffle", ")", "\n", "\n", "# compute logits", "\n", "# Einstein sum is more intuitive", "\n", "# positive logits: Nx1", "\n", "", "l_pos", "=", "torch", ".", "einsum", "(", "'nc,nc->n'", ",", "[", "q", ",", "k", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "# negative logits: NxK", "\n", "l_neg", "=", "torch", ".", "einsum", "(", "'nc,ck->nk'", ",", "[", "q", ",", "self", ".", "queue", ".", "clone", "(", ")", ".", "detach", "(", ")", "]", ")", "\n", "\n", "# logits: Nx(1+K)", "\n", "logits", "=", "torch", ".", "cat", "(", "[", "l_pos", ",", "l_neg", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# apply temperature", "\n", "logits", "/=", "self", ".", "T", "\n", "\n", "# labels: positive key indicators", "\n", "labels", "=", "torch", ".", "zeros", "(", "logits", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "\n", "# dequeue and enqueue", "\n", "self", ".", "_dequeue_and_enqueue", "(", "k", ")", "\n", "\n", "return", "logits", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.colorer.add_coloring_to_emit_windows": [[8, 78], ["property", "setattr", "ctypes.windll.kernel32.GetStdHandle", "ctypes.windll.kernel32.GetStdHandle", "ctypes.windll.kernel32.SetConsoleTextAttribute", "args[]._set_color", "fn", "args[]._set_color"], "function", ["None"], ["def", "add_coloring_to_emit_windows", "(", "fn", ")", ":", "\n", "# add methods we need to the class", "\n", "    ", "def", "_out_handle", "(", "self", ")", ":", "\n", "        ", "import", "ctypes", "\n", "return", "ctypes", ".", "windll", ".", "kernel32", ".", "GetStdHandle", "(", "self", ".", "STD_OUTPUT_HANDLE", ")", "\n", "\n", "", "out_handle", "=", "property", "(", "_out_handle", ")", "\n", "\n", "def", "_set_color", "(", "self", ",", "code", ")", ":", "\n", "        ", "import", "ctypes", "\n", "# Constants from the Windows API", "\n", "self", ".", "STD_OUTPUT_HANDLE", "=", "-", "11", "\n", "hdl", "=", "ctypes", ".", "windll", ".", "kernel32", ".", "GetStdHandle", "(", "self", ".", "STD_OUTPUT_HANDLE", ")", "\n", "ctypes", ".", "windll", ".", "kernel32", ".", "SetConsoleTextAttribute", "(", "hdl", ",", "code", ")", "\n", "\n", "", "setattr", "(", "logging", ".", "StreamHandler", ",", "'_set_color'", ",", "_set_color", ")", "\n", "\n", "def", "new", "(", "*", "args", ")", ":", "\n", "        ", "FOREGROUND_BLUE", "=", "0x0001", "# text color contains blue.", "\n", "FOREGROUND_GREEN", "=", "0x0002", "# text color contains green.", "\n", "FOREGROUND_RED", "=", "0x0004", "# text color contains red.", "\n", "FOREGROUND_INTENSITY", "=", "0x0008", "# text color is intensified.", "\n", "FOREGROUND_WHITE", "=", "FOREGROUND_BLUE", "|", "FOREGROUND_GREEN", "|", "FOREGROUND_RED", "\n", "# winbase.h", "\n", "STD_INPUT_HANDLE", "=", "-", "10", "\n", "STD_OUTPUT_HANDLE", "=", "-", "11", "\n", "STD_ERROR_HANDLE", "=", "-", "12", "\n", "\n", "# wincon.h", "\n", "FOREGROUND_BLACK", "=", "0x0000", "\n", "FOREGROUND_BLUE", "=", "0x0001", "\n", "FOREGROUND_GREEN", "=", "0x0002", "\n", "FOREGROUND_CYAN", "=", "0x0003", "\n", "FOREGROUND_RED", "=", "0x0004", "\n", "FOREGROUND_MAGENTA", "=", "0x0005", "\n", "FOREGROUND_YELLOW", "=", "0x0006", "\n", "FOREGROUND_GREY", "=", "0x0007", "\n", "FOREGROUND_INTENSITY", "=", "0x0008", "# foreground color is intensified.", "\n", "\n", "BACKGROUND_BLACK", "=", "0x0000", "\n", "BACKGROUND_BLUE", "=", "0x0010", "\n", "BACKGROUND_GREEN", "=", "0x0020", "\n", "BACKGROUND_CYAN", "=", "0x0030", "\n", "BACKGROUND_RED", "=", "0x0040", "\n", "BACKGROUND_MAGENTA", "=", "0x0050", "\n", "BACKGROUND_YELLOW", "=", "0x0060", "\n", "BACKGROUND_GREY", "=", "0x0070", "\n", "BACKGROUND_INTENSITY", "=", "0x0080", "# background color is intensified.", "\n", "\n", "levelno", "=", "args", "[", "1", "]", ".", "levelno", "\n", "if", "(", "levelno", ">=", "50", ")", ":", "\n", "            ", "color", "=", "BACKGROUND_YELLOW", "|", "FOREGROUND_RED", "|", "FOREGROUND_INTENSITY", "|", "BACKGROUND_INTENSITY", "\n", "", "elif", "(", "levelno", ">=", "40", ")", ":", "\n", "            ", "color", "=", "FOREGROUND_RED", "|", "FOREGROUND_INTENSITY", "\n", "", "elif", "(", "levelno", ">=", "30", ")", ":", "\n", "            ", "color", "=", "FOREGROUND_YELLOW", "|", "FOREGROUND_INTENSITY", "\n", "", "elif", "(", "levelno", ">=", "20", ")", ":", "\n", "            ", "color", "=", "FOREGROUND_GREEN", "\n", "", "elif", "(", "levelno", ">=", "10", ")", ":", "\n", "            ", "color", "=", "FOREGROUND_MAGENTA", "\n", "", "else", ":", "\n", "            ", "color", "=", "FOREGROUND_WHITE", "\n", "", "args", "[", "0", "]", ".", "_set_color", "(", "color", ")", "\n", "\n", "ret", "=", "fn", "(", "*", "args", ")", "\n", "args", "[", "0", "]", ".", "_set_color", "(", "FOREGROUND_WHITE", ")", "\n", "# print \"after\"", "\n", "return", "ret", "\n", "\n", "", "return", "new", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.colorer.add_coloring_to_emit_ansi": [[80, 101], ["fn"], "function", ["None"], ["", "def", "add_coloring_to_emit_ansi", "(", "fn", ")", ":", "\n", "# add methods we need to the class", "\n", "    ", "def", "new", "(", "*", "args", ")", ":", "\n", "        ", "levelno", "=", "args", "[", "1", "]", ".", "levelno", "\n", "if", "(", "levelno", ">=", "50", ")", ":", "\n", "            ", "color", "=", "'\\x1b[31m'", "# red", "\n", "", "elif", "(", "levelno", ">=", "40", ")", ":", "\n", "            ", "color", "=", "'\\x1b[31m'", "# red", "\n", "", "elif", "(", "levelno", ">=", "30", ")", ":", "\n", "            ", "color", "=", "'\\x1b[33m'", "# yellow", "\n", "", "elif", "(", "levelno", ">=", "20", ")", ":", "\n", "            ", "color", "=", "'\\x1b[32m'", "# green", "\n", "", "elif", "(", "levelno", ">=", "10", ")", ":", "\n", "            ", "color", "=", "'\\x1b[35m'", "# pink", "\n", "", "else", ":", "\n", "            ", "color", "=", "'\\x1b[0m'", "# normal", "\n", "", "args", "[", "1", "]", ".", "msg", "=", "color", "+", "args", "[", "1", "]", ".", "msg", "+", "'\\x1b[0m'", "# normal", "\n", "# print \"after\"", "\n", "return", "fn", "(", "*", "args", ")", "\n", "\n", "", "return", "new", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.ProgressBar.__init__": [[16, 22], ["os.popen().read().split", "os.popen().read().split", "os.popen().read().split", "os.popen().read().split", "int", "time.time", "os.popen().read", "os.popen().read", "os.popen().read", "os.popen().read", "os.popen", "os.popen", "os.popen", "os.popen"], "methods", ["None"], ["import", "sys", "\n", "import", "torch", "\n", "import", "logging", "\n", "import", "datetime", "\n", "import", "collections", "\n", "import", "numpy", "as", "np", "\n", "from", "collections", "import", "OrderedDict", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.ProgressBar.update": [[23, 66], ["int", "sys.stdout.write", "range", "sys.stdout.write", "range", "sys.stdout.write", "time.time", "L.append", "L.append", "sys.stdout.write", "range", "range", "sys.stdout.write", "sys.stdout.flush", "time.time", "int", "sys.stdout.write", "sys.stdout.write", "L.append", "sys.stdout.write", "sys.stdout.write", "sys.stdout.write", "sys.stdout.write", "float", "float", "float", "utils.ProgressBar.format_time", "utils.ProgressBar.format_time", "len", "int", "int"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.ProgressBar.format_time", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.ProgressBar.format_time"], ["import", "random", "as", "pyrandom", "\n", "\n", "\n", "def", "set_random_seed", "(", "seed", "=", "3", ")", ":", "\n", "    ", "pyrandom", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "\n", "\n", "", "def", "to_device", "(", "input", ",", "device", ")", ":", "\n", "    ", "if", "torch", ".", "is_tensor", "(", "input", ")", ":", "\n", "        ", "return", "input", ".", "to", "(", "device", "=", "device", ")", "\n", "", "elif", "isinstance", "(", "input", ",", "str", ")", ":", "\n", "        ", "return", "input", "\n", "", "elif", "isinstance", "(", "input", ",", "collections", ".", "Mapping", ")", ":", "\n", "        ", "return", "{", "k", ":", "to_device", "(", "sample", ",", "device", "=", "device", ")", "for", "k", ",", "sample", "in", "input", ".", "items", "(", ")", "}", "\n", "", "elif", "isinstance", "(", "input", ",", "collections", ".", "Sequence", ")", ":", "\n", "        ", "return", "[", "to_device", "(", "sample", ",", "device", "=", "device", ")", "for", "sample", "in", "input", "]", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\"Input must contain tensor, dict or list, found {type(input)}\"", ")", "\n", "\n", "\n", "", "", "def", "fast_hist", "(", "label_pred", ",", "label_true", ",", "n_class", ")", ":", "\n", "    ", "mask", "=", "(", "label_true", ">=", "0", ")", "&", "(", "label_true", "<", "n_class", ")", "\n", "return", "np", ".", "bincount", "(", "\n", "n_class", "*", "label_true", "[", "mask", "]", ".", "astype", "(", "int", ")", "+", "label_pred", "[", "mask", "]", ",", "\n", "minlength", "=", "n_class", "**", "2", ")", ".", "reshape", "(", "n_class", ",", "n_class", ")", "\n", "\n", "\n", "", "def", "convert_state_dict", "(", "state_dict", ")", ":", "\n", "    ", "\"\"\"\n    Converts a state dict saved from a dataParallel module to normal\n    module state_dict inplace\n\n    :param dict state_dict: is the loaded DataParallel model_state\n    \"\"\"", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "name", "=", "k", "[", "7", ":", "]", "# remove `module.`", "\n", "new_state_dict", "[", "name", "]", "=", "v", "\n", "", "return", "new_state_dict", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.ProgressBar.format_time": [[67, 98], ["int", "int", "int", "int", "int", "str", "str", "str", "str", "str"], "methods", ["None"], ["", "def", "get_logger", "(", "logdir", ",", "name", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "\"%(asctime)s %(levelname)s %(message)s\"", ")", "\n", "\n", "ts", "=", "str", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", ".", "split", "(", "\".\"", ")", "[", "0", "]", ".", "replace", "(", "\" \"", ",", "\"_\"", ")", "\n", "ts", "=", "ts", ".", "replace", "(", "\":\"", ",", "\"_\"", ")", ".", "replace", "(", "\"-\"", ",", "\"_\"", ")", "\n", "file_path", "=", "os", ".", "path", ".", "join", "(", "logdir", ",", "\"run_{}.log\"", ".", "format", "(", "ts", ")", ")", "\n", "file_hdlr", "=", "logging", ".", "FileHandler", "(", "file_path", ")", "\n", "file_hdlr", ".", "setFormatter", "(", "formatter", ")", "\n", "\n", "strm_hdlr", "=", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", "\n", "strm_hdlr", ".", "setFormatter", "(", "formatter", ")", "\n", "\n", "logger", ".", "addHandler", "(", "file_hdlr", ")", "\n", "logger", ".", "addHandler", "(", "strm_hdlr", ")", "\n", "return", "logger", "\n", "", ""]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.set_seed": [[99, 103], ["torch.manual_seed", "torch.cuda.manual_seed_all", "numpy.random.seed"], "function", ["None"], []], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.freeze_layers": [[104, 125], ["maml.named_parameters", "maml.net.named_parameters", "range", "maml.named_parameters", "list", "frozen_layers.append", "filter", "print", "print", "maml.named_parameters", "str", "str"], "function", ["None"], []], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.log_accuracy": [[126, 137], ["print", "torch.no_grad", "img.to.to", "target.to.to", "maml.net", "logits_q.squeeze.squeeze", "torch.nn.functional.softmax().argmax", "str", "torch.eq().sum().item", "len", "torch.nn.functional.softmax", "len", "torch.eq().sum", "torch.eq"], "function", ["None"], []], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.iterator_sorter": [[139, 173], ["list", "numpy.random.shuffle", "numpy.array", "numpy.copy", "list", "print", "enumerate", "numpy.argsort", "numpy.array", "range", "range", "len", "numpy.random.shuffle", "numpy.place", "numpy.place"], "function", ["None"], []], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.iterator_sorter_omni": [[175, 177], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.remove_classes": [[179, 194], ["numpy.array", "numpy.zeros_like", "numpy.nonzero", "numpy.array"], "function", ["None"], []], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.remove_classes_omni": [[196, 211], ["numpy.array", "numpy.zeros_like", "numpy.nonzero", "numpy.array"], "function", ["None"], []], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.check_integrity": [[213, 225], ["hashlib.md5", "hashlib.md5.hexdigest", "os.path.isfile", "os.path.isfile", "open", "iter", "hashlib.md5.update", "f.read"], "function", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.ProgressBar.update"], []], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.download_url": [[227, 254], ["os.path.expanduser", "os.path.expanduser", "os.path.join", "os.path.join", "os.makedirs", "os.makedirs", "os.path.isfile", "os.path.isfile", "utils.check_integrity", "print", "print", "urllib.request.urlretrieve", "url.replace.replace", "print", "urllib.request.urlretrieve"], "function", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.utils.check_integrity"], []], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.list_dir": [[256, 275], ["os.path.expanduser", "os.path.expanduser", "list", "filter", "os.listdir", "os.listdir", "os.path.join", "os.path.join", "os.path.isdir", "os.path.isdir", "os.path.join", "os.path.join"], "function", ["None"], []], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.list_files": [[277, 298], ["os.path.expanduser", "os.path.expanduser", "list", "filter", "os.listdir", "os.listdir", "os.path.join", "os.path.join", "os.path.isfile", "os.path.isfile", "p.endswith", "os.path.join", "os.path.join"], "function", ["None"], []], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.resize_image": [[300, 312], ["numpy.zeros", "range", "range", "numpy.array"], "function", ["None"], []], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.data.get_cifarfs.download_file": [[24, 37], ["requests.get", "open", "tqdm.tqdm", "requests.get.iter_content", "int", "tqdm.tqdm.update", "f.write", "len"], "function", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleImagenet.get", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.ProgressBar.update"], ["def", "download_file", "(", "url", ",", "filename", ")", ":", "\n", "    ", "\"\"\"\n    Helper method handling downloading large files from `url` to `filename`. Returns a pointer to `filename`.\n    \"\"\"", "\n", "chunkSize", "=", "1024", "\n", "r", "=", "requests", ".", "get", "(", "url", ",", "stream", "=", "True", ")", "\n", "with", "open", "(", "filename", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pbar", "=", "tqdm", "(", "unit", "=", "\"B\"", ",", "total", "=", "int", "(", "r", ".", "headers", "[", "'Content-Length'", "]", ")", ")", "\n", "for", "chunk", "in", "r", ".", "iter_content", "(", "chunk_size", "=", "chunkSize", ")", ":", "\n", "            ", "if", "chunk", ":", "# filter out keep-alive new chunks", "\n", "                ", "pbar", ".", "update", "(", "len", "(", "chunk", ")", ")", "\n", "f", ".", "write", "(", "chunk", ")", "\n", "", "", "", "return", "filename", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.__init__": [[14, 34], ["os.path.join", "dominate.document", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "dominate.tags.meta", "str"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "web_dir", ",", "title", ",", "refresh", "=", "0", ")", ":", "\n", "        ", "\"\"\"Initialize the HTML classes\n\n        Parameters:\n            web_dir (str) -- a directory that stores the webpage. HTML file will be created at <web_dir>/index.html; images will be saved at <web_dir/images/\n            title (str)   -- the webpage name\n            refresh (int) -- how often the website refresh itself; if 0; no refreshing\n        \"\"\"", "\n", "self", ".", "title", "=", "title", "\n", "self", ".", "web_dir", "=", "web_dir", "\n", "self", ".", "img_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "web_dir", ",", "'images'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "web_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "web_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "img_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "img_dir", ")", "\n", "\n", "", "self", ".", "doc", "=", "dominate", ".", "document", "(", "title", "=", "title", ")", "\n", "if", "refresh", ">", "0", ":", "\n", "            ", "with", "self", ".", "doc", ".", "head", ":", "\n", "                ", "meta", "(", "http_equiv", "=", "\"refresh\"", ",", "content", "=", "str", "(", "refresh", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.get_image_dir": [[35, 38], ["None"], "methods", ["None"], ["", "", "", "def", "get_image_dir", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the directory that stores images\"\"\"", "\n", "return", "self", ".", "img_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.add_header": [[39, 47], ["dominate.tags.h3"], "methods", ["None"], ["", "def", "add_header", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Insert a header to the HTML file\n\n        Parameters:\n            text (str) -- the header text\n        \"\"\"", "\n", "with", "self", ".", "doc", ":", "\n", "            ", "h3", "(", "text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.add_images": [[48, 67], ["dominate.tags.table", "html.HTML.doc.add", "dominate.tags.tr", "zip", "dominate.tags.td", "dominate.tags.p", "dominate.tags.br", "dominate.tags.p", "dominate.tags.a", "dominate.tags.img", "os.path.join", "os.path.join"], "methods", ["None"], ["", "", "def", "add_images", "(", "self", ",", "ims", ",", "txts", ",", "links", ",", "width", "=", "400", ")", ":", "\n", "        ", "\"\"\"add images to the HTML file\n\n        Parameters:\n            ims (str list)   -- a list of image paths\n            txts (str list)  -- a list of image names shown on the website\n            links (str list) --  a list of hyperref links; when you click an image, it will redirect you to a new page\n        \"\"\"", "\n", "self", ".", "t", "=", "table", "(", "border", "=", "1", ",", "style", "=", "\"table-layout: fixed;\"", ")", "# Insert a table", "\n", "self", ".", "doc", ".", "add", "(", "self", ".", "t", ")", "\n", "with", "self", ".", "t", ":", "\n", "            ", "with", "tr", "(", ")", ":", "\n", "                ", "for", "im", ",", "txt", ",", "link", "in", "zip", "(", "ims", ",", "txts", ",", "links", ")", ":", "\n", "                    ", "with", "td", "(", "style", "=", "\"word-wrap: break-word;\"", ",", "halign", "=", "\"center\"", ",", "valign", "=", "\"top\"", ")", ":", "\n", "                        ", "with", "p", "(", ")", ":", "\n", "                            ", "with", "a", "(", "href", "=", "os", ".", "path", ".", "join", "(", "'images'", ",", "link", ")", ")", ":", "\n", "                                ", "img", "(", "style", "=", "\"width:%dpx\"", "%", "width", ",", "src", "=", "os", ".", "path", ".", "join", "(", "'images'", ",", "im", ")", ")", "\n", "", "br", "(", ")", "\n", "p", "(", "txt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save": [[68, 74], ["open", "open.write", "open.close", "html.HTML.doc.render"], "methods", ["None"], ["", "", "", "", "", "", "def", "save", "(", "self", ")", ":", "\n", "        ", "\"\"\"save the current content to the HMTL file\"\"\"", "\n", "html_file", "=", "'%s/index.html'", "%", "self", ".", "web_dir", "\n", "f", "=", "open", "(", "html_file", ",", "'wt'", ")", "\n", "f", ".", "write", "(", "self", ".", "doc", ".", "render", "(", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.visualizer.Visualizer.__init__": [[28, 53], ["visdom.Visdom", "visualizer.Visualizer.vis.check_connection", "visualizer.Visualizer.create_visdom_connections"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.visualizer.Visualizer.create_visdom_connections"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "\"\"\"Initialize the Visualizer class\n\n        Parameters:\n            opt -- stores all the experiment flags; needs to be a subclass of BaseOptions\n        Step 1: Cache the training/test options\n        Step 2: connect to a visdom server\n        Step 3: create an HTML object for saveing HTML filters\n        Step 4: create a logging file to store training losses\n        \"\"\"", "\n", "self", ".", "opt", "=", "opt", "# cache the option", "\n", "self", ".", "display_id", "=", "opt", ".", "display_id", "\n", "# self.use_html = isTrain and not opt.no_html", "\n", "# self.win_size = opt.display_winsize", "\n", "# self.name = opt.name", "\n", "self", ".", "port", "=", "opt", ".", "display_port", "\n", "# self.saved = False", "\n", "# self.vix = Visdom(port=8096)", "\n", "if", "self", ".", "display_id", ">", "0", ":", "# connect to a visdom server given <display_port> and <display_server>", "\n", "            ", "import", "visdom", "\n", "self", ".", "ncols", "=", "opt", ".", "display_ncols", "\n", "self", ".", "vis", "=", "visdom", ".", "Visdom", "(", "port", "=", "opt", ".", "display_port", ")", "\n", "# self.vis = visdom.Visdom(server=opt.display_server, port=opt.display_port)", "\n", "if", "not", "self", ".", "vis", ".", "check_connection", "(", ")", ":", "\n", "                ", "self", ".", "create_visdom_connections", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.visualizer.Visualizer.create_visdom_connections": [[70, 242], ["print", "print", "subprocess.Popen", "matplotlib.close"], "methods", ["None"], ["", "", "", "def", "create_visdom_connections", "(", "self", ")", ":", "\n", "        ", "\"\"\"If the program could not connect to Visdom server, this function will start a new server at port < self.port > \"\"\"", "\n", "cmd", "=", "sys", ".", "executable", "+", "' -m visdom.server -p %d &>/dev/null &'", "%", "self", ".", "port", "\n", "print", "(", "'\\n\\nCould not connect to Visdom server. \\n Trying to start a server....'", ")", "\n", "print", "(", "'Command: %s'", "%", "cmd", ")", "\n", "Popen", "(", "cmd", ",", "shell", "=", "True", ",", "stdout", "=", "PIPE", ",", "stderr", "=", "PIPE", ")", "\n", "\n", "# def plot_current_losses(self, epoch, counter_ratio, loss1, test_loss):", "\n", "#     \"\"\"display the current losses on visdom display: dictionary of error labels and values", "\n", "\n", "#     Parameters:", "\n", "#         epoch (int)           -- current epoch", "\n", "#         counter_ratio (float) -- progress (percentage) in the current epoch, between 0 to 1", "\n", "#         losses (OrderedDict)  -- training losses stored in the format of (name, float) pairs", "\n", "#     \"\"\"", "\n", "#     if not hasattr(self, 'plot_data'):", "\n", "#         self.plot_data = {'X': [], 'Y': [], 'GG': [],  'legend': ['Train Loss','Test Loss']}", "\n", "#         # self.plot_data = {'X': [], 'Y': [], 'legend': ['Train Loss']}", "\n", "#     # pdb.set_trace()", "\n", "#     self.plot_data['X'].append(epoch + counter_ratio)", "\n", "#     if self.opt.network ==\"MAML\":", "\n", "#         self.plot_data['Y'].append(np.array([float(loss1[2]), float(test_loss)]))", "\n", "#     else:", "\n", "#         self.plot_data['Y'].append(np.array([float(loss1), float(test_loss)]))", "\n", "#     # pdb.set_trace()", "\n", "#     # self.plot_data['Y'].append(np.array([loss]))", "\n", "\n", "#     # pdb.set_trace()", "\n", "#     # try:", "\n", "#     if len(self.plot_data['Y']) == 1:", "\n", "#         self.vis.line(", "\n", "#             X=np.stack([np.array(self.plot_data['X'])] * len(self.plot_data['legend']), 1),", "\n", "#             Y=np.array(self.plot_data['Y']),", "\n", "#             opts={", "\n", "#                 'title': self.opt.network + 'Net' + ' loss over time',", "\n", "#                 'legend': self.plot_data['legend'],", "\n", "#                 'xlabel': 'epoch',", "\n", "#                 'ylabel': 'loss'},", "\n", "#             win=self.display_id)", "\n", "#     else:", "\n", "#         self.vis.line(", "\n", "#             X=np.stack([np.array(self.plot_data['X'])] * len(self.plot_data['legend']), 1).squeeze(),", "\n", "#             Y=np.array(self.plot_data['Y']).squeeze(),", "\n", "#             opts={", "\n", "#                 'title': self.name + ' loss over time',", "\n", "#                 'legend': self.plot_data['legend'],", "\n", "#                 'xlabel': 'epoch',", "\n", "#                 'ylabel': 'loss'},", "\n", "#             win=self.display_id)", "\n", "#     # pdb.set_trace()", "\n", "#     if float(loss1[1]) != 0:", "\n", "#         self.plot_data['GG'].append(np.array(float(loss1[1])))", "\n", "#         if self.opt.KL_loss:", "\n", "#             title = 'Gradient Gen Loss over time (KL)'", "\n", "#         else:", "\n", "#             title = 'Gradient Gen Loss over time (MSE)'", "\n", "#         self.vis.line(", "\n", "#             X=np.array(self.plot_data['X']), ", "\n", "#             Y=np.array(self.plot_data['GG']),", "\n", "#             opts={", "\n", "#             'title': title,", "\n", "#             'xlabel': 'epoch',", "\n", "#             'ylabel': 'loss'},", "\n", "#             win=self.display_id+50)", "\n", "\n", "#     # except VisdomExceptionBase:", "\n", "#     #     self.create_visdom_connections()", "\n", "\n", "# def plot_dataset_performance(self, epoch, counter_ratio, rmse, mae, me_rate, perf):", "\n", "#     if not 'Z' in self.plot_data:", "\n", "#         self.plot_data['Z'] = []", "\n", "#         self.plot_data['legend2'] = ['rmse', 'absolute me', 'me_rate']", "\n", "#     self.plot_data['Z'].append(np.array([float(rmse), float(mae), float(me_rate)]))", "\n", "\n", "#     if len(self.plot_data['Z']) == 1:", "\n", "#         name = self.opt.network + 'Net' + ' plubic set performance ('", "\n", "#         name += self.opt.public + ')  '", "\n", "#         name += '(%.2f/%.2f/%.2f)' % (perf[0][0], perf[1][0], perf[2][0])", "\n", "#         self.vis.line(", "\n", "#             X=np.stack([np.array(self.plot_data['X'])] *", "\n", "#                        len(self.plot_data['legend2']), 1),", "\n", "#             Y=np.array(self.plot_data['Z']),", "\n", "#             opts={", "\n", "#                 'title': name,", "\n", "#                 'legend': self.plot_data['legend2'],", "\n", "#                 'xlabel': 'epoch',", "\n", "#                 'ylabel': 'loss'},", "\n", "#             win=self.display_id+6)", "\n", "#     else:", "\n", "#         name = self.opt.network + 'Net' + ' plubic set performance ('", "\n", "#         name += self.opt.public + ')  '", "\n", "#         name += '(%.2f/%.2f/%.2f)' % (perf[0][0], perf[1][0], perf[2][0])", "\n", "#         self.vis.line(", "\n", "#             X=np.stack([np.array(self.plot_data['X'])] *", "\n", "#                        len(self.plot_data['legend2']), 1).squeeze(),", "\n", "#             Y=np.array(self.plot_data['Z']).squeeze(),", "\n", "#             opts={", "\n", "#                 'title': name,", "\n", "#                 'legend': self.plot_data['legend2'],", "\n", "#                 'xlabel': 'epoch',", "\n", "#                 'ylabel': 'loss'},", "\n", "#             win=self.display_id+6)", "\n", "#     # pdb.set_trace()", "\n", "\n", "# # losses: same format as |losses| of plot_current_losses", "\n", "# def print_current_losses(self, epoch, iters, loss, test_loss, dat):", "\n", "#     \"\"\"print current losses on console; also save the losses to the disk", "\n", "\n", "#     Parameters:", "\n", "#         epoch (int) -- current epoch", "\n", "#         iters (int) -- current training iteration during this epoch (reset to 0 at the end of every epoch)", "\n", "#         losses (OrderedDict) -- training losses stored in the format of (name, float) pairs", "\n", "#         t_comp (float) -- computational time per data point (normalized by batch_size)", "\n", "#         t_data (float) -- data loading time per data point (normalized by batch_size)", "\n", "#     \"\"\"", "\n", "#     message = '(epoch: %d, iters: %d) ' % (epoch, iters)", "\n", "#     if self.opt.network == \"MAML\":", "\n", "#         message += 'Loss: %.3e/%.3f/%.3f/%.3f  ' % (", "\n", "#             float(loss[0]), float(loss[1]), float(loss[2]), float(test_loss))", "\n", "#         # message += 'MSELoss: %.3e ' % float(loss[0])", "\n", "#         # message += 'OrdLoss: %.3f ' % float(loss[1])", "\n", "#     else:", "\n", "#         message += 'Loss: %.3e/%.3f  ' % (float(loss), float(test_loss))", "\n", "#         # message += 'Train Loss: %.3f ' % float(loss)", "\n", "#     message += 'Performance: %.3f/%.3f/%.3f                 ' % (float(dat[0]), float(dat[1]), float(dat[2]))", "\n", "\n", "#     print(message,'\\t\\t\\r', end='')  # print the message", "\n", "#     with open(self.log_name, \"a\") as log_file:", "\n", "#         log_file.write('%s\\n' % message)  # save the message", "\n", "\n", "# def plot_current_results(self, results, true_rPPG, epoch, use_debug_port, i, dataset_size):", "\n", "#     # pdb.set_trace()", "\n", "#     if(results.size(0) == 60):", "\n", "#         t = np.linspace(0, self.opt.win_size/30, self.opt.win_size, endpoint=False)", "\n", "#         t1 = t = t.reshape((1, self.opt.win_size))", "\n", "#     else:", "\n", "#         # pdb.set_trace()", "\n", "#         t = np.fft.rfftfreq(60, 1/float(30))*60", "\n", "#         # pdb.set_trace()", "\n", "#         t = t.reshape((1, t.size))", "\n", "#         t1 = np.linspace(0, self.opt.win_size/30, self.opt.win_size, endpoint=False)", "\n", "#         t1 = t1.reshape((1, self.opt.win_size))", "\n", "#     results = results.squeeze()", "\n", "#     true_rPPG = true_rPPG.squeeze()", "\n", "#     results = results.unsqueeze(0)", "\n", "#     true_rPPG = true_rPPG.unsqueeze(0)", "\n", "#     results = results.detach().numpy()", "\n", "#     true_rPPG = true_rPPG.detach().numpy()", "\n", "#     # pdb.set_trace()", "\n", "\n", "#     f1, axs1 = plt.subplots(2, 1, constrained_layout=True)", "\n", "#     f1.suptitle('rPPG results (epoch:%d)(iter: %d)' % (epoch, i))", "\n", "#     # print(real_B)", "\n", "#     axs1[0].plot(t, results, 'bo')", "\n", "#     axs1[0].set_title('prediction')", "\n", "\n", "#     axs1[1].plot(t, true_rPPG, 'ro')", "\n", "#     axs1[1].set_title('ground truth')", "\n", "\n", "# pdb.set_trace()", "\n", "\n", "\n", "# if not self.isTrain:", "\n", "#     self.vis.matplot(f1)", "\n", "# elif use_debug_port == 1:", "\n", "#     self.vis.matplot(f1, win=3)", "\n", "# elif use_debug_port == 0:", "\n", "#     self.vis.matplot(f1, win=2)", "\n", "# else:", "\n", "#     self.vis.matplot(f1, win=4)", "\n", "\n", "plt", ".", "close", "(", "'all'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.visualizer.Visualizer.plot_ori_recon": [[244, 249], ["torchvision.utils.make_grid", "torchvision.utils.make_grid", "torch.stack().cpu", "visualizer.Visualizer.vis.images", "torch.stack", "dict"], "methods", ["None"], ["", "def", "plot_ori_recon", "(", "self", ",", "original", ",", "recon", ",", "name", ",", "win", ",", "nrow", "=", "10", ")", ":", "\n", "        ", "img", "=", "make_grid", "(", "original", ",", "normalize", "=", "True", ")", "\n", "recon", "=", "make_grid", "(", "recon", ",", "normalize", "=", "True", ")", "\n", "images", "=", "torch", ".", "stack", "(", "[", "img", ",", "recon", "]", ",", "dim", "=", "0", ")", ".", "cpu", "(", ")", "\n", "self", ".", "vis", ".", "images", "(", "images", ",", "opts", "=", "dict", "(", "title", "=", "name", ")", ",", "nrow", "=", "nrow", ",", "win", "=", "self", ".", "opt", ".", "display_id", "+", "win", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.visualizer.Visualizer.plot_causal_feat": [[250, 257], ["torchvision.utils.make_grid", "torchvision.utils.make_grid", "torch.stack().cpu", "visualizer.Visualizer.vis.images", "torchvision.utils.make_grid", "range", "torch.stack", "dict", "cfeat.size"], "methods", ["None"], ["", "def", "plot_causal_feat", "(", "self", ",", "original", ",", "recon", ",", "cfeat", ",", "name", ",", "win", ",", "nrow", "=", "1", ")", ":", "\n", "        ", "img", "=", "make_grid", "(", "original", ",", "normalize", "=", "True", ",", "nrow", "=", "1", ")", "\n", "recon", "=", "make_grid", "(", "recon", ",", "normalize", "=", "True", ",", "nrow", "=", "1", ")", "\n", "# cfeat = make_grid(cfeat.view(-1, *(cfeat.size()[2:])), normalize=True)", "\n", "cfeat", "=", "[", "make_grid", "(", "cfeat", "[", ":", ",", "i", "]", ",", "normalize", "=", "True", ",", "nrow", "=", "1", ")", "for", "i", "in", "range", "(", "cfeat", ".", "size", "(", "1", ")", ")", "]", "\n", "images", "=", "torch", ".", "stack", "(", "[", "img", ",", "recon", ",", "*", "cfeat", "]", ",", "dim", "=", "0", ")", ".", "cpu", "(", ")", "\n", "self", ".", "vis", ".", "images", "(", "images", ",", "opts", "=", "dict", "(", "title", "=", "name", ")", ",", "nrow", "=", "nrow", ",", "win", "=", "self", ".", "opt", ".", "display_id", "+", "win", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.util.tensor2im": [[9, 28], ["np.tile.astype", "isinstance", "isinstance", "image_tensor[].cpu().float().numpy", "numpy.tile", "image_tensor[].cpu().float", "numpy.transpose", "image_tensor[].cpu"], "function", ["None"], ["def", "tensor2im", "(", "input_image", ",", "imtype", "=", "np", ".", "uint8", ")", ":", "\n", "    ", "\"\"\"\"Converts a Tensor array into a numpy image array.\n\n    Parameters:\n        input_image (tensor) --  the input image tensor array\n        imtype (type)        --  the desired type of the converted numpy array\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "input_image", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "if", "isinstance", "(", "input_image", ",", "torch", ".", "Tensor", ")", ":", "# get the data from a variable", "\n", "            ", "image_tensor", "=", "input_image", ".", "data", "\n", "", "else", ":", "\n", "            ", "return", "input_image", "\n", "", "image_numpy", "=", "image_tensor", "[", "0", "]", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "numpy", "(", ")", "# convert it into a numpy array", "\n", "if", "image_numpy", ".", "shape", "[", "0", "]", "==", "1", ":", "# grayscale to RGB", "\n", "            ", "image_numpy", "=", "np", ".", "tile", "(", "image_numpy", ",", "(", "3", ",", "1", ",", "1", ")", ")", "\n", "", "image_numpy", "=", "(", "np", ".", "transpose", "(", "image_numpy", ",", "(", "1", ",", "2", ",", "0", ")", ")", "+", "1", ")", "/", "2.0", "*", "255.0", "# post-processing: tranpose and scaling", "\n", "", "else", ":", "# if it is a numpy array, do nothing", "\n", "        ", "image_numpy", "=", "input_image", "\n", "", "return", "image_numpy", ".", "astype", "(", "imtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.util.diagnose_network": [[30, 47], ["net.parameters", "print", "print", "torch.mean", "torch.abs"], "function", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.parameters"], ["", "def", "diagnose_network", "(", "net", ",", "name", "=", "'network'", ")", ":", "\n", "    ", "\"\"\"Calculate and print the mean of average absolute(gradients)\n\n    Parameters:\n        net (torch network) -- Torch network\n        name (str) -- the name of the network\n    \"\"\"", "\n", "mean", "=", "0.0", "\n", "count", "=", "0", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "if", "param", ".", "grad", "is", "not", "None", ":", "\n", "            ", "mean", "+=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "param", ".", "grad", ".", "data", ")", ")", "\n", "count", "+=", "1", "\n", "", "", "if", "count", ">", "0", ":", "\n", "        ", "mean", "=", "mean", "/", "count", "\n", "", "print", "(", "name", ")", "\n", "print", "(", "mean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.util.save_image": [[49, 58], ["PIL.Image.fromarray", "Image.fromarray.save"], "function", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save"], ["", "def", "save_image", "(", "image_numpy", ",", "image_path", ")", ":", "\n", "    ", "\"\"\"Save a numpy image to the disk\n\n    Parameters:\n        image_numpy (numpy array) -- input numpy array\n        image_path (str)          -- the path of the image\n    \"\"\"", "\n", "image_pil", "=", "Image", ".", "fromarray", "(", "image_numpy", ")", "\n", "image_pil", ".", "save", "(", "image_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.util.print_numpy": [[60, 74], ["x.flatten.astype", "print", "x.flatten.flatten", "print", "numpy.mean", "numpy.min", "numpy.max", "numpy.median", "numpy.std"], "function", ["None"], ["", "def", "print_numpy", "(", "x", ",", "val", "=", "True", ",", "shp", "=", "False", ")", ":", "\n", "    ", "\"\"\"Print the mean, min, max, median, std, and size of a numpy array\n\n    Parameters:\n        val (bool) -- if print the values of the numpy array\n        shp (bool) -- if print the shape of the numpy array\n    \"\"\"", "\n", "x", "=", "x", ".", "astype", "(", "np", ".", "float64", ")", "\n", "if", "shp", ":", "\n", "        ", "print", "(", "'shape,'", ",", "x", ".", "shape", ")", "\n", "", "if", "val", ":", "\n", "        ", "x", "=", "x", ".", "flatten", "(", ")", "\n", "print", "(", "'mean = %3.3f, min = %3.3f, max = %3.3f, median = %3.3f, std=%3.3f'", "%", "(", "\n", "np", ".", "mean", "(", "x", ")", ",", "np", ".", "min", "(", "x", ")", ",", "np", ".", "max", "(", "x", ")", ",", "np", ".", "median", "(", "x", ")", ",", "np", ".", "std", "(", "x", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.util.mkdirs": [[76, 87], ["isinstance", "util.mkdir", "isinstance", "util.mkdir"], "function", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.util.mkdir", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.util.mkdir"], ["", "", "def", "mkdirs", "(", "paths", ")", ":", "\n", "    ", "\"\"\"create empty directories if they don't exist\n\n    Parameters:\n        paths (str list) -- a list of directory paths\n    \"\"\"", "\n", "if", "isinstance", "(", "paths", ",", "list", ")", "and", "not", "isinstance", "(", "paths", ",", "str", ")", ":", "\n", "        ", "for", "path", "in", "paths", ":", "\n", "            ", "mkdir", "(", "path", ")", "\n", "", "", "else", ":", "\n", "        ", "mkdir", "(", "paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.util.mkdir": [[89, 97], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "", "def", "mkdir", "(", "path", ")", ":", "\n", "    ", "\"\"\"create a single empty directory if it didn't exist\n\n    Parameters:\n        path (str) -- a single directory path\n    \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Continual.evaluate_classification.main": [[23, 362], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "random.seed", "range", "print", "datasets.DatasetFactory.get_dataset", "datasets.DatasetFactory.get_dataset", "datasets.SamplerFactory.get_sampler", "frozen_layers.append", "frozen_layers.extend", "list", "range", "float", "print", "range", "range", "list", "numpy.random.choice().tolist", "ts.SamplerFactory.get_sampler.sample_tasks", "print", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "temp_result.append", "print", "print", "print", "numpy.random.choice().tolist", "ts.SamplerFactory.get_sampler.sample_tasks", "print", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "final_results_all.append", "print", "print", "print", "str", "range", "list", "iterators_sorted.append", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "lr_all.append", "print", "str", "iterators_sorted.append", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.load", "torch.load", "torch.load", "learner.Learner.to", "learner.Learner.named_parameters", "learner.Learner.named_parameters", "print", "print", "list", "list", "list", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "utils.ProgressBar", "enumerate", "print", "print", "print", "str", "range", "numpy.random.choice", "ts.SamplerFactory.get_sampler.sample_task", "print", "torch.load", "torch.load", "torch.load", "learner.Learner.to", "learner.Learner.named_parameters", "learner.Learner.named_parameters", "print", "list", "list", "list", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "utils.ProgressBar", "enumerate", "print", "print", "str", "scipy.stats.mode", "numpy.random.choice", "ts.SamplerFactory.get_sampler.sample_task", "model.ModelFactory.get_model", "model.Learner", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "map", "filter", "filter", "print", "learner.Learner.parameters", "print", "range", "utils.ProgressBar.update", "range", "str", "model.ModelFactory.get_model", "model.Learner", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "map", "filter", "filter", "print", "learner.Learner.parameters", "print", "range", "utils.ProgressBar.update", "range", "str", "str", "learner.Learner.parameters", "learner.Learner.parameters", "torch.no_grad", "torch.no_grad", "torch.no_grad", "img.to.to", "seen_targets[].to.to", "learner.Learner.", "logits_q.squeeze.argmax", "torch.eq().sum().item", "torch.eq().sum().item", "torch.eq().sum().item", "img.to.size", "str", "range", "list", "learner.Learner.parameters", "learner.Learner.named_parameters", "len", "img.to.to", "seen_targets[].to.to", "learner.Learner.", "logits_q.squeeze.argmax", "torch.eq().sum().item", "torch.eq().sum().item", "torch.eq().sum().item", "img.to.size", "seen_data[].to", "seen_targets[].to", "learner.Learner.", "logits_q.squeeze.squeeze", "logits_q.squeeze.argmax", "torch.eq().sum().item", "torch.eq().sum().item", "torch.eq().sum().item", "img.to.size", "float", "float", "str", "learner.Learner.parameters", "learner.Learner.parameters", "range", "list", "learner.Learner.parameters", "learner.Learner.named_parameters", "len", "img.to.to", "seen_targets[].to.to", "learner.Learner.", "logits_q.squeeze.squeeze", "logits_q.squeeze.argmax", "torch.eq().sum().item", "torch.eq().sum().item", "torch.eq().sum().item", "img.to.size", "seen_data[].to", "seen_targets[].to", "learner.Learner.", "logits_q.squeeze.squeeze", "logits_q.squeeze.argmax", "torch.eq().sum().item", "torch.eq().sum().item", "torch.eq().sum().item", "img.to.size", "float", "float", "torch.Parameter", "filter", "str", "img.to.to", "y.to.to", "learner.Learner.", "torch.optim.Adam.zero_grad", "torch.nn.functional.cross_entropy", "F.cross_entropy.backward", "torch.optim.Adam.step", "float", "torch.Parameter", "filter", "str", "img.to.to", "y.to.to", "learner.Learner.", "maml.argmax", "torch.optim.Adam.zero_grad", "torch.nn.functional.cross_entropy", "F.cross_entropy.backward", "torch.optim.Adam.step", "float", "torch.ones_like", "torch.ones_like", "torch.ones_like", "len", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.Parameter", "torch.eq().sum", "torch.eq().sum", "torch.eq().sum", "float", "learner.Learner.named_parameters", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.eq().sum", "torch.eq().sum", "torch.eq().sum", "torch.eq().sum", "torch.eq().sum", "torch.eq().sum", "torch.ones_like", "torch.ones_like", "torch.ones_like", "len", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.Parameter", "learner.Learner.named_parameters", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.eq().sum", "torch.eq().sum", "torch.eq().sum", "torch.eq().sum", "torch.eq().sum", "torch.eq().sum", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "img.to.cpu", "y.to.cpu", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "img.to.cpu", "y.to.cpu", "torch.eq", "torch.eq", "torch.eq", "img.to.cpu", "y.to.cpu", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "img.to.cpu", "y.to.cpu", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq"], "function", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.datasetfactory.DatasetFactory.get_dataset", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.datasetfactory.DatasetFactory.get_dataset", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SamplerFactory.get_sampler", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.ImagenetSampler.sample_tasks", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.ImagenetSampler.sample_tasks", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.ImagenetSampler.sample_task", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.ImagenetSampler.sample_task", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.modelfactory.ModelFactory.get_model", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.parameters", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.ProgressBar.update", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.modelfactory.ModelFactory.get_model", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.parameters", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.ProgressBar.update", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.parameters", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.parameters", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.parameters", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.parameters", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.parameters", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.parameters", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.zero_grad", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.aim.blocked_grad.backward", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.zero_grad", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.aim.blocked_grad.backward"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "\n", "total_clases", "=", "10", "\n", "\n", "frozen_layers", "=", "[", "]", "\n", "for", "temp", "in", "range", "(", "args", ".", "rln", "*", "2", ")", ":", "\n", "        ", "frozen_layers", ".", "append", "(", "\"vars.\"", "+", "str", "(", "temp", ")", ")", "\n", "", "if", "args", ".", "treatment", "==", "'ANML+AIM'", ":", "\n", "        ", "frozen_layers", ".", "extend", "(", "[", "\"vars.28\"", ",", "\"vars.29\"", "]", ")", "\n", "\n", "", "print", "(", "\"Frozen layers = %s\"", ",", "\" \"", ".", "join", "(", "frozen_layers", ")", ")", "\n", "\n", "final_results_all", "=", "[", "]", "\n", "temp_result", "=", "[", "]", "\n", "total_clases", "=", "args", ".", "schedule", "\n", "\n", "if", "args", ".", "dataset", "==", "'omniglot'", ":", "\n", "        ", "classes", "=", "list", "(", "range", "(", "650", ")", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'cifar100'", ":", "\n", "        ", "classes", "=", "list", "(", "range", "(", "70", ",", "100", ")", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'imagenet'", ":", "\n", "        ", "classes", "=", "list", "(", "range", "(", "64", ",", "84", ")", ")", "\n", "", "dataset", "=", "df", ".", "DatasetFactory", ".", "get_dataset", "(", "args", ".", "dataset", ",", "background", "=", "True", ",", "train", "=", "True", ",", "all", "=", "True", ")", "\n", "dataset_test", "=", "df", ".", "DatasetFactory", ".", "get_dataset", "(", "args", ".", "dataset", ",", "background", "=", "True", ",", "train", "=", "False", ",", "all", "=", "True", ")", "\n", "sampler", "=", "ts", ".", "SamplerFactory", ".", "get_sampler", "(", "args", ".", "dataset", ",", "classes", ",", "dataset", ",", "dataset_test", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "for", "tot_class", "in", "total_clases", ":", "\n", "        ", "lr_list", "=", "[", "0.001", ",", "0.0006", ",", "0.0004", ",", "0.00035", ",", "0.0003", ",", "0.00025", ",", "0.0002", ",", "0.00015", ",", "0.0001", ",", "0.00009", ",", "0.00008", ",", "0.00006", ",", "0.00003", ",", "0.00001", "]", "\n", "lr_all", "=", "[", "]", "\n", "for", "lr_search", "in", "range", "(", "args", ".", "runs", ")", ":", "\n", "\n", "            ", "keep", "=", "np", ".", "random", ".", "choice", "(", "classes", ",", "tot_class", ",", "replace", "=", "False", ")", ".", "tolist", "(", ")", "\n", "iterators_sorted", "=", "[", "]", "\n", "for", "t", "in", "keep", ":", "\n", "                ", "iterators_sorted", ".", "append", "(", "sampler", ".", "sample_task", "(", "[", "t", "]", ")", ")", "\n", "", "iterator", "=", "sampler", ".", "sample_tasks", "(", "keep", ",", "not", "args", ".", "test", ")", "\n", "\n", "print", "(", "args", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "                ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "", "results_mem_size", "=", "{", "}", "\n", "\n", "for", "mem_size", "in", "[", "args", ".", "memory", "]", ":", "\n", "                ", "max_acc", "=", "-", "10", "\n", "max_lr", "=", "-", "10", "\n", "for", "lr", "in", "lr_list", ":", "\n", "\n", "                    ", "print", "(", "lr", ")", "\n", "maml", "=", "torch", ".", "load", "(", "args", ".", "model", ",", "map_location", "=", "'cpu'", ")", "\n", "maml", ".", "treatment", "=", "args", ".", "treatment", "\n", "\n", "if", "args", ".", "scratch", ":", "\n", "                        ", "config", "=", "mf", ".", "ModelFactory", ".", "get_model", "(", "args", ".", "treatment", ",", "args", ".", "dataset", ")", "\n", "maml", "=", "learner", ".", "Learner", "(", "config", ")", "\n", "# maml = MetaLearingClassification(args, config).to(device).net", "\n", "\n", "", "maml", "=", "maml", ".", "to", "(", "device", ")", "\n", "\n", "for", "name", ",", "param", "in", "maml", ".", "named_parameters", "(", ")", ":", "\n", "                        ", "param", ".", "learn", "=", "True", "\n", "\n", "", "for", "name", ",", "param", "in", "maml", ".", "named_parameters", "(", ")", ":", "\n", "                        ", "if", "name", "in", "frozen_layers", ":", "\n", "                            ", "param", ".", "learn", "=", "False", "\n", "\n", "", "else", ":", "\n", "                            ", "if", "args", ".", "reset", ":", "\n", "                                ", "w", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones_like", "(", "param", ")", ")", "\n", "if", "len", "(", "w", ".", "shape", ")", ">", "1", ":", "\n", "                                    ", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "w", ")", "\n", "", "else", ":", "\n", "                                    ", "w", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros_like", "(", "param", ")", ")", "\n", "", "param", ".", "data", "=", "w", "\n", "param", ".", "learn", "=", "True", "\n", "\n", "", "", "", "if", "args", ".", "treatment", "==", "'OML'", ":", "\n", "                        ", "weights2reset", "=", "[", "\"vars_14\"", "]", "\n", "#biases2reset = [\"vars_15\"]", "\n", "", "else", ":", "\n", "                        ", "weight", "=", "maml", ".", "parameters", "(", ")", "[", "26", "]", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "weight", ")", "\n", "weight", "=", "maml", ".", "parameters", "(", ")", "[", "27", "]", "\n", "torch", ".", "nn", ".", "init", ".", "zeros_", "(", "weight", ")", "\n", "\n", "", "filter_list", "=", "[", "\"vars.{0}\"", ".", "format", "(", "v", ")", "for", "v", "in", "range", "(", "6", ")", "]", "\n", "\n", "print", "(", "\"Filter list = %s\"", "%", "\",\"", ".", "join", "(", "filter_list", ")", ")", "\n", "\n", "list_of_names", "=", "list", "(", "\n", "map", "(", "lambda", "x", ":", "x", "[", "1", "]", ",", "list", "(", "filter", "(", "lambda", "x", ":", "x", "[", "0", "]", "not", "in", "filter_list", ",", "maml", ".", "named_parameters", "(", ")", ")", ")", ")", ")", "\n", "\n", "list_of_params", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", ".", "learn", ",", "maml", ".", "parameters", "(", ")", ")", ")", "\n", "list_of_names", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "[", "1", "]", ".", "learn", ",", "maml", ".", "named_parameters", "(", ")", ")", ")", "\n", "\n", "if", "args", ".", "scratch", "or", "args", ".", "no_freeze", ":", "\n", "                        ", "print", "(", "\"Empty filter list\"", ")", "\n", "list_of_params", "=", "maml", ".", "parameters", "(", ")", "\n", "\n", "", "for", "x", "in", "list_of_names", ":", "\n", "                        ", "print", "(", "\"Unfrozen layer = %s\"", "%", "str", "(", "x", "[", "0", "]", ")", ")", "\n", "", "opt", "=", "torch", ".", "optim", ".", "Adam", "(", "list_of_params", ",", "lr", "=", "lr", ")", "\n", "\n", "pbar", "=", "utils", ".", "ProgressBar", "(", ")", "\n", "seen_data", "=", "None", "\n", "seen_targets", "=", "None", "\n", "for", "j", ",", "it", "in", "enumerate", "(", "iterators_sorted", ")", ":", "\n", "                        ", "for", "_", "in", "range", "(", "args", ".", "epoch", ")", ":", "\n", "                            ", "i", "=", "0", "\n", "for", "img", ",", "y", "in", "it", ":", "\n", "                                ", "img", "=", "img", ".", "to", "(", "device", ")", "\n", "y", "=", "y", ".", "to", "(", "device", ")", "\n", "\n", "logits", "=", "maml", "(", "img", ",", "meta_train", "=", "False", ",", "iterations", "=", "1", ",", "bn_training", "=", "False", ")", "\n", "pred_q", "=", "(", "logits", ")", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "\n", "opt", ".", "zero_grad", "(", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "logits", ",", "y", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "opt", ".", "step", "(", ")", "\n", "try", ":", "\n", "                                    ", "seen_data", "=", "torch", ".", "cat", "(", "[", "seen_data", ",", "img", ".", "cpu", "(", ")", "]", ",", "dim", "=", "0", ")", "\n", "", "except", ":", "\n", "                                    ", "seen_data", "=", "img", ".", "cpu", "(", ")", "\n", "", "try", ":", "\n", "                                    ", "seen_targets", "=", "torch", ".", "cat", "(", "[", "seen_targets", ",", "y", ".", "cpu", "(", ")", "]", ",", "dim", "=", "0", ")", "\n", "", "except", ":", "\n", "                                    ", "seen_targets", "=", "y", ".", "cpu", "(", ")", "\n", "", "i", "+=", "1", "\n", "if", "i", "==", "30", ":", "\n", "                                    ", "break", "\n", "", "", "", "pbar", ".", "update", "(", "j", ",", "len", "(", "iterators_sorted", ")", ")", "\n", "", "batch_size", "=", "i", "\n", "\n", "print", "(", "\"Result after one epoch for LR = %f\"", "%", "lr", ")", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "if", "args", ".", "test", ":", "\n", "                        ", "for", "img", ",", "target", "in", "iterator", ":", "\n", "                            ", "img", "=", "img", ".", "to", "(", "device", ")", "\n", "target", "=", "target", ".", "to", "(", "device", ")", "\n", "logits_q", "=", "maml", "(", "img", ",", "meta_train", "=", "False", ",", "iterations", "=", "1", ",", "bn_training", "=", "False", ")", "\n", "logits_q", "=", "logits_q", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "pred_q", "=", "(", "logits_q", ")", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "\n", "correct", "+=", "torch", ".", "eq", "(", "pred_q", ",", "target", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "total", "+=", "img", ".", "size", "(", "0", ")", "\n", "", "", "else", ":", "\n", "                        ", "for", "i", "in", "range", "(", "tot_class", ")", ":", "\n", "                            ", "img", "=", "seen_data", "[", "i", "*", "batch_size", ":", "(", "(", "i", "+", "1", ")", "*", "batch_size", ")", "]", ".", "to", "(", "device", ")", "\n", "target", "=", "seen_targets", "[", "i", "*", "batch_size", ":", "(", "(", "i", "+", "1", ")", "*", "batch_size", ")", "]", ".", "to", "(", "device", ")", "\n", "logits_q", "=", "maml", "(", "img", ",", "meta_train", "=", "False", ",", "iterations", "=", "1", ",", "bn_training", "=", "False", ")", "\n", "logits_q", "=", "logits_q", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "pred_q", "=", "(", "logits_q", ")", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "\n", "correct", "+=", "torch", ".", "eq", "(", "pred_q", ",", "target", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "total", "+=", "img", ".", "size", "(", "0", ")", "\n", "\n", "", "", "print", "(", "str", "(", "correct", "/", "float", "(", "total", ")", ")", ")", "\n", "if", "(", "correct", "/", "float", "(", "total", ")", ">", "max_acc", ")", ":", "\n", "                        ", "max_acc", "=", "correct", "/", "float", "(", "total", ")", "\n", "max_lr", "=", "lr", "\n", "\n", "", "", "lr_all", ".", "append", "(", "max_lr", ")", "\n", "results_mem_size", "[", "mem_size", "]", "=", "(", "max_acc", ",", "max_lr", ")", "\n", "print", "(", "\"Final Max Result = %s\"", "%", "str", "(", "max_acc", ")", ")", "\n", "", "temp_result", ".", "append", "(", "(", "tot_class", ",", "results_mem_size", ")", ")", "\n", "print", "(", "\"A=  \"", ",", "results_mem_size", ")", "\n", "print", "(", "\"Temp Results = %s\"", "%", "str", "(", "results_mem_size", ")", ")", "\n", "print", "(", "\"LR RESULTS = \"", ",", "temp_result", ")", "\n", "\n", "", "best_lr", "=", "float", "(", "stats", ".", "mode", "(", "lr_all", ")", "[", "0", "]", "[", "0", "]", ")", "\n", "print", "(", "\"BEST LR %s= \"", "%", "str", "(", "best_lr", ")", ")", "\n", "\n", "for", "aoo", "in", "range", "(", "args", ".", "runs", ")", ":", "\n", "\n", "            ", "keep", "=", "np", ".", "random", ".", "choice", "(", "classes", ",", "tot_class", ",", "replace", "=", "False", ")", ".", "tolist", "(", ")", "\n", "iterators_sorted", "=", "[", "]", "\n", "for", "t", "in", "keep", ":", "\n", "                ", "iterators_sorted", ".", "append", "(", "sampler", ".", "sample_task", "(", "[", "t", "]", ")", ")", "\n", "", "iterator", "=", "sampler", ".", "sample_tasks", "(", "keep", ",", "not", "args", ".", "test", ")", "\n", "\n", "print", "(", "args", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "                ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "", "results_mem_size", "=", "{", "}", "\n", "\n", "for", "mem_size", "in", "[", "args", ".", "memory", "]", ":", "\n", "                ", "max_acc", "=", "-", "10", "\n", "max_lr", "=", "-", "10", "\n", "\n", "lr", "=", "best_lr", "\n", "\n", "maml", "=", "torch", ".", "load", "(", "args", ".", "model", ",", "map_location", "=", "'cpu'", ")", "\n", "maml", ".", "treatment", "=", "args", ".", "treatment", "\n", "\n", "if", "args", ".", "scratch", ":", "\n", "                    ", "config", "=", "mf", ".", "ModelFactory", ".", "get_model", "(", "\"MRCL\"", ",", "args", ".", "dataset", ")", "\n", "maml", "=", "learner", ".", "Learner", "(", "config", ")", "\n", "\n", "", "maml", "=", "maml", ".", "to", "(", "device", ")", "\n", "\n", "for", "name", ",", "param", "in", "maml", ".", "named_parameters", "(", ")", ":", "\n", "                    ", "param", ".", "learn", "=", "True", "\n", "\n", "", "for", "name", ",", "param", "in", "maml", ".", "named_parameters", "(", ")", ":", "\n", "                    ", "if", "name", "in", "frozen_layers", ":", "\n", "                        ", "param", ".", "learn", "=", "False", "\n", "", "else", ":", "\n", "                        ", "if", "args", ".", "reset", ":", "\n", "                            ", "w", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones_like", "(", "param", ")", ")", "\n", "if", "len", "(", "w", ".", "shape", ")", ">", "1", ":", "\n", "                                ", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "w", ")", "\n", "", "else", ":", "\n", "                                ", "w", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros_like", "(", "param", ")", ")", "\n", "", "param", ".", "data", "=", "w", "\n", "param", ".", "learn", "=", "True", "\n", "\n", "", "", "", "if", "args", ".", "treatment", "==", "\"OML\"", ":", "\n", "                    ", "weights2reset", "=", "[", "\"vars_14\"", "]", "\n", "#biases2reset = [\"vars_15\"]", "\n", "", "else", ":", "\n", "                    ", "weight", "=", "maml", ".", "parameters", "(", ")", "[", "26", "]", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "weight", ")", "\n", "weight", "=", "maml", ".", "parameters", "(", ")", "[", "27", "]", "\n", "torch", ".", "nn", ".", "init", ".", "zeros_", "(", "weight", ")", "\n", "\n", "", "correct", "=", "0", "\n", "total", "=", "0", "\n", "for", "img", ",", "target", "in", "iterator", ":", "\n", "                    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "                        ", "img", "=", "img", ".", "to", "(", "device", ")", "\n", "target", "=", "target", ".", "to", "(", "device", ")", "\n", "logits_q", "=", "maml", "(", "img", ",", "meta_train", "=", "False", ",", "iterations", "=", "1", ",", "bn_training", "=", "False", ")", "\n", "pred_q", "=", "(", "logits_q", ")", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "correct", "+=", "torch", ".", "eq", "(", "pred_q", ",", "target", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "total", "+=", "img", ".", "size", "(", "0", ")", "\n", "\n", "\n", "", "", "print", "(", "\"Pre-epoch accuracy %s\"", "%", "str", "(", "correct", "/", "float", "(", "total", ")", ")", ")", "\n", "\n", "filter_list", "=", "[", "\"vars.{0}\"", ".", "format", "(", "v", ")", "for", "v", "in", "range", "(", "6", ")", "]", "\n", "\n", "print", "(", "\"Filter list = %s\"", "%", "\",\"", ".", "join", "(", "filter_list", ")", ")", "\n", "\n", "list_of_names", "=", "list", "(", "\n", "map", "(", "lambda", "x", ":", "x", "[", "1", "]", ",", "list", "(", "filter", "(", "lambda", "x", ":", "x", "[", "0", "]", "not", "in", "filter_list", ",", "maml", ".", "named_parameters", "(", ")", ")", ")", ")", ")", "\n", "\n", "list_of_params", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", ".", "learn", ",", "maml", ".", "parameters", "(", ")", ")", ")", "\n", "list_of_names", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "[", "1", "]", ".", "learn", ",", "maml", ".", "named_parameters", "(", ")", ")", ")", "\n", "if", "args", ".", "scratch", "or", "args", ".", "no_freeze", ":", "\n", "                    ", "print", "(", "\"Empty filter list\"", ")", "\n", "list_of_params", "=", "maml", ".", "parameters", "(", ")", "\n", "\n", "", "for", "x", "in", "list_of_names", ":", "\n", "                    ", "print", "(", "\"Unfrozen layer = %s\"", "%", "str", "(", "x", "[", "0", "]", ")", ")", "\n", "", "opt", "=", "torch", ".", "optim", ".", "Adam", "(", "list_of_params", ",", "lr", "=", "lr", ")", "\n", "\n", "pbar", "=", "utils", ".", "ProgressBar", "(", ")", "\n", "seen_data", "=", "None", "\n", "seen_targets", "=", "None", "\n", "for", "j", ",", "it", "in", "enumerate", "(", "iterators_sorted", ")", ":", "\n", "                    ", "for", "_", "in", "range", "(", "0", ",", "args", ".", "epoch", ")", ":", "\n", "                        ", "i", "=", "0", "\n", "for", "img", ",", "y", "in", "it", ":", "\n", "                            ", "img", "=", "img", ".", "to", "(", "device", ")", "\n", "y", "=", "y", ".", "to", "(", "device", ")", "\n", "pred", "=", "maml", "(", "img", ",", "meta_train", "=", "False", ",", "iterations", "=", "1", ",", "bn_training", "=", "False", ")", "\n", "opt", ".", "zero_grad", "(", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "pred", ",", "y", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "opt", ".", "step", "(", ")", "\n", "try", ":", "\n", "                                ", "seen_data", "=", "torch", ".", "cat", "(", "[", "seen_data", ",", "img", ".", "cpu", "(", ")", "]", ",", "dim", "=", "0", ")", "\n", "", "except", ":", "\n", "                                ", "seen_data", "=", "img", ".", "cpu", "(", ")", "\n", "", "try", ":", "\n", "                                ", "seen_targets", "=", "torch", ".", "cat", "(", "[", "seen_targets", ",", "y", ".", "cpu", "(", ")", "]", ",", "dim", "=", "0", ")", "\n", "", "except", ":", "\n", "                                ", "seen_targets", "=", "y", ".", "cpu", "(", ")", "\n", "", "i", "+=", "1", "\n", "if", "i", "==", "30", ":", "\n", "                                ", "break", "\n", "", "", "", "pbar", ".", "update", "(", "j", ",", "len", "(", "iterators_sorted", ")", ")", "\n", "", "batch_size", "=", "i", "\n", "\n", "print", "(", "\"Result after one epoch for LR = %f\"", "%", "lr", ")", "\n", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "if", "args", ".", "test", ":", "\n", "                    ", "for", "img", ",", "target", "in", "iterator", ":", "\n", "                        ", "img", "=", "img", ".", "to", "(", "device", ")", "\n", "target", "=", "target", ".", "to", "(", "device", ")", "\n", "logits_q", "=", "maml", "(", "img", ",", "meta_train", "=", "False", ",", "iterations", "=", "1", ",", "bn_training", "=", "False", ")", "\n", "\n", "pred_q", "=", "(", "logits_q", ")", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "\n", "correct", "+=", "torch", ".", "eq", "(", "pred_q", ",", "target", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "total", "+=", "img", ".", "size", "(", "0", ")", "\n", "", "", "else", ":", "\n", "                    ", "for", "i", "in", "range", "(", "tot_class", ")", ":", "\n", "                        ", "img", "=", "seen_data", "[", "i", "*", "batch_size", ":", "(", "(", "i", "+", "1", ")", "*", "batch_size", ")", "]", ".", "to", "(", "device", ")", "\n", "target", "=", "seen_targets", "[", "i", "*", "batch_size", ":", "(", "(", "i", "+", "1", ")", "*", "batch_size", ")", "]", ".", "to", "(", "device", ")", "\n", "logits_q", "=", "maml", "(", "img", ",", "meta_train", "=", "False", ",", "iterations", "=", "1", ",", "bn_training", "=", "False", ")", "\n", "logits_q", "=", "logits_q", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "pred_q", "=", "(", "logits_q", ")", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "\n", "correct", "+=", "torch", ".", "eq", "(", "pred_q", ",", "target", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "total", "+=", "img", ".", "size", "(", "0", ")", "\n", "\n", "", "", "print", "(", "str", "(", "correct", "/", "float", "(", "total", ")", ")", ")", "\n", "if", "(", "correct", "/", "float", "(", "total", ")", ">", "max_acc", ")", ":", "\n", "                    ", "max_acc", "=", "correct", "/", "float", "(", "total", ")", "\n", "max_lr", "=", "lr", "\n", "\n", "", "lr_list", "=", "[", "max_lr", "]", "\n", "results_mem_size", "[", "mem_size", "]", "=", "(", "max_acc", ",", "max_lr", ")", "\n", "print", "(", "\"Final Max Result = %s\"", "%", "str", "(", "max_acc", ")", ")", "\n", "", "final_results_all", ".", "append", "(", "(", "tot_class", ",", "results_mem_size", ")", ")", "\n", "print", "(", "\"A=  \"", ",", "results_mem_size", ")", "\n", "print", "(", "\"Final results = %s\"", ",", "str", "(", "results_mem_size", ")", ")", "\n", "print", "(", "\"FINAL RESULTS = \"", ",", "final_results_all", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Continual.mrcl_classification.main": [[16, 75], ["utils.set_seed", "datasets.DatasetFactory.get_dataset", "datasets.DatasetFactory.get_dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "datasets.SamplerFactory.get_sampler", "model.ModelFactory.get_model", "torch.cuda.is_available", "torch.cuda.is_available", "model.meta_learner.MetaLearingClassification().to", "maml.to.to", "utils.freeze_layers", "range", "list", "torch.device", "torch.device", "torch.device", "torch.device", "torch.load", "torch.load", "range", "numpy.random.choice", "ts.SamplerFactory.get_sampler.get_complete_iterator", "maml.to.", "range", "list", "model.meta_learner.MetaLearingClassification", "len", "d_traj_iterators.append", "maml.to.reset_classifer", "print", "torch.save", "torch.save", "utils.log_accuracy", "utils.log_accuracy", "range", "list", "ts.SamplerFactory.get_sampler.sample_task", "range", "maml.to.net.parameters", "torch.load.parameters", "str", "str"], "function", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.set_seed", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.datasetfactory.DatasetFactory.get_dataset", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.datasetfactory.DatasetFactory.get_dataset", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SamplerFactory.get_sampler", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.modelfactory.ModelFactory.get_model", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.freeze_layers", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.ImagenetSampler.get_complete_iterator", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.meta_learner.MetaLearingClassification.reset_classifer", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.Visualize.html.HTML.save", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.log_accuracy", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.log_accuracy", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.ImagenetSampler.sample_task", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.parameters", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.parameters"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "utils", ".", "set_seed", "(", "args", ".", "seed", ")", "\n", "\n", "if", "args", ".", "dataset", "==", "'omniglot'", ":", "\n", "        ", "args", ".", "classes", "=", "list", "(", "range", "(", "963", ")", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'cifar100'", ":", "\n", "        ", "args", ".", "classes", "=", "list", "(", "range", "(", "70", ")", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'imagenet'", ":", "\n", "        ", "args", ".", "classes", "=", "list", "(", "range", "(", "64", ")", ")", "\n", "\n", "", "dataset", "=", "df", ".", "DatasetFactory", ".", "get_dataset", "(", "args", ".", "dataset", ",", "background", "=", "True", ",", "train", "=", "True", ",", "all", "=", "True", ")", "\n", "dataset_test", "=", "df", ".", "DatasetFactory", ".", "get_dataset", "(", "args", ".", "dataset", ",", "background", "=", "True", ",", "train", "=", "False", ",", "all", "=", "True", ")", "\n", "\n", "iterator_train", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "5", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "1", ")", "\n", "iterator_test", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset_test", ",", "batch_size", "=", "5", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "1", ")", "\n", "\n", "sampler", "=", "ts", ".", "SamplerFactory", ".", "get_sampler", "(", "args", ".", "dataset", ",", "args", ".", "classes", ",", "dataset", ",", "dataset_test", ")", "\n", "\n", "config", "=", "mf", ".", "ModelFactory", ".", "get_model", "(", "args", ".", "treatment", ",", "args", ".", "dataset", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "", "maml", "=", "MetaLearingClassification", "(", "args", ",", "config", ",", "args", ".", "treatment", ")", ".", "to", "(", "device", ")", "\n", "\n", "if", "args", ".", "checkpoint", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "saved_model", ",", "map_location", "=", "'cpu'", ")", "\n", "\n", "for", "idx", "in", "range", "(", "len", "(", "checkpoint", ")", ")", ":", "\n", "            ", "maml", ".", "net", ".", "parameters", "(", ")", "[", "idx", "]", ".", "data", "=", "checkpoint", ".", "parameters", "(", ")", "[", "idx", "]", ".", "data", "\n", "\n", "", "", "maml", "=", "maml", ".", "to", "(", "device", ")", "\n", "\n", "utils", ".", "freeze_layers", "(", "args", ".", "rln", ",", "maml", ",", "args", ".", "treatment", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "for", "step", "in", "range", "(", "args", ".", "steps", ")", ":", "\n", "\n", "        ", "t1", "=", "np", ".", "random", ".", "choice", "(", "args", ".", "classes", ",", "args", ".", "tasks", ",", "replace", "=", "False", ")", "\n", "\n", "d_traj_iterators", "=", "[", "]", "\n", "for", "t", "in", "t1", ":", "\n", "            ", "d_traj_iterators", ".", "append", "(", "sampler", ".", "sample_task", "(", "[", "t", "]", ")", ")", "\n", "maml", ".", "reset_classifer", "(", "t", ")", "\n", "\n", "", "d_rand_iterator", "=", "sampler", ".", "get_complete_iterator", "(", ")", "\n", "accs", ",", "loss", "=", "maml", "(", "d_traj_iterators", ",", "d_rand_iterator", ")", "\n", "\n", "if", "step", "%", "40", "==", "0", ":", "\n", "            ", "print", "(", "'step: %d / %d   training acc %s'", "%", "(", "step", ",", "args", ".", "steps", ",", "str", "(", "accs", ")", ")", ")", "\n", "", "if", "step", "%", "100", "==", "0", "or", "step", "==", "args", ".", "steps", "-", "1", ":", "\n", "            ", "torch", ".", "save", "(", "maml", ".", "net", ",", "'_'", ".", "join", "(", "[", "args", ".", "dataset", ",", "args", ".", "treatment", ",", "str", "(", "step", "//", "10000", "*", "10000", ")", "+", "'.net'", "]", ")", ")", "\n", "", "if", "step", "%", "2000", "==", "0", "and", "step", "!=", "0", ":", "\n", "            ", "utils", ".", "log_accuracy", "(", "maml", ",", "iterator_test", ",", "device", ",", "step", ")", "\n", "utils", ".", "log_accuracy", "(", "maml", ",", "iterator_train", ",", "device", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.datasetfactory.DatasetFactory.__init__": [[8, 10], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.datasetfactory.DatasetFactory.get_dataset": [[11, 52], ["torchvision.Compose", "datasets.Omniglot", "datasets.Omniglot", "datasets.Omniglot", "datasets.Omniglot", "torchvision.Normalize", "torchvision.Resize", "torchvision.ToTensor", "torchvision.Compose", "torchvision.Compose", "torchvision.datasets.CIFAR100", "torchvision.datasets.CIFAR100", "print", "datasets.MiniImagenet", "datasets.MiniImagenet", "datasets.MiniImagenet", "datasets.MiniImagenet", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.ToTensor"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_dataset", "(", "name", ",", "train", "=", "True", ",", "path", "=", "None", ",", "background", "=", "True", ",", "all", "=", "False", ",", "element_per_class", "=", "600", ")", ":", "\n", "\n", "        ", "if", "name", "==", "\"omniglot\"", ":", "\n", "            ", "train_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "Resize", "(", "(", "84", ",", "84", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "if", "path", "is", "None", ":", "\n", "                ", "return", "om", ".", "Omniglot", "(", "\"../data/omni\"", ",", "background", "=", "background", ",", "download", "=", "True", ",", "train", "=", "train", ",", "\n", "transform", "=", "train_transform", ",", "all", "=", "all", ")", "\n", "", "else", ":", "\n", "                ", "return", "om", ".", "Omniglot", "(", "path", ",", "download", "=", "True", ",", "background", "=", "train", ",", "transform", "=", "train_transform", ")", "\n", "\n", "", "", "elif", "name", "==", "\"cifar100\"", ":", "\n", "            ", "normalize", "=", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", "\n", "if", "train", ":", "\n", "                ", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "", "else", ":", "\n", "                ", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "", "if", "path", "is", "None", ":", "\n", "                ", "return", "CIFAR100", "(", "\"/DATA/data_cifar100/\"", ",", "train", "=", "train", ",", "transform", "=", "train_transform", ")", "\n", "", "else", ":", "\n", "                ", "return", "CIFAR100", "(", "path", ",", "train", "=", "train", ",", "transform", "=", "train_transform", ")", "\n", "\n", "", "", "elif", "name", "==", "\"imagenet\"", ":", "\n", "            ", "if", "path", "is", "None", ":", "\n", "                ", "return", "mi", ".", "MiniImagenet", "(", "\"/DATA/miniimagenet/\"", ",", "'train'", "if", "train", "else", "'test'", ",", "elem_per_class", "=", "element_per_class", ",", "test", "=", "not", "train", ")", "\n", "", "else", ":", "\n", "                ", "return", "mi", ".", "MiniImagenet", "(", "path", ",", "'train'", "if", "train", "else", "'test'", ",", "elem_per_class", "=", "element_per_class", ",", "test", "=", "not", "train", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "\"Unsupported Dataset\"", ")", "\n", "assert", "False", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SamplerFactory.__init__": [[11, 13], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SamplerFactory.get_sampler": [[14, 28], ["print", "task_sampler.OmniglotSampler", "task_sampler.SineSampler", "task_sampler.SineBaselineSampler", "task_sampler.CIFAR100Sampler", "task_sampler.ImagenetSampler"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_sampler", "(", "dataset", ",", "tasks", ",", "trainset", ",", "testset", "=", "None", ",", "capacity", "=", "None", ")", ":", "\n", "        ", "print", "(", "dataset", ")", "\n", "if", "\"omni\"", "in", "dataset", ":", "\n", "            ", "return", "OmniglotSampler", "(", "tasks", ",", "trainset", ",", "testset", ")", "\n", "", "elif", "\"Sin\"", "==", "dataset", ":", "\n", "            ", "return", "SineSampler", "(", "tasks", ",", "capacity", "=", "capacity", ")", "\n", "", "elif", "\"SinBaseline\"", "in", "dataset", ":", "\n", "# assert(False)", "\n", "            ", "return", "SineBaselineSampler", "(", "tasks", ",", "capacity", "=", "capacity", ")", "\n", "", "elif", "\"cifar\"", "in", "dataset", ":", "\n", "            ", "return", "CIFAR100Sampler", "(", "tasks", ",", "trainset", ",", "testset", ")", "\n", "", "elif", "\"imagenet\"", "in", "dataset", ":", "\n", "            ", "return", "ImagenetSampler", "(", "tasks", ",", "trainset", ",", "testset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SineSampler.__init__": [[32, 39], ["task_sampler.SampleSine", "task_sampler.SineSampler.task_sampler.add_complete_iteraetor"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleImagenet.add_complete_iteraetor"], ["    ", "def", "__init__", "(", "self", ",", "tasks", ",", "capacity", ")", ":", "\n", "        ", "self", ".", "capacity", "=", "capacity", "\n", "self", ".", "tasks", "=", "tasks", "\n", "self", ".", "task_sampler", "=", "SampleSine", "(", "capacity", ")", "\n", "self", ".", "task_sampler", ".", "add_complete_iteraetor", "(", "self", ".", "tasks", ")", "\n", "self", ".", "sample_batch", "=", "self", ".", "task_sampler", ".", "sample_batch", "\n", "self", ".", "sample_trajectory", "=", "self", ".", "task_sampler", ".", "sample_trajectory", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SineSampler.get_complete_iterator": [[40, 42], ["None"], "methods", ["None"], ["", "def", "get_complete_iterator", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "task_sampler", ".", "complete_iterator", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SineSampler.sample_random": [[43, 45], ["task_sampler.SineSampler.task_sampler.get", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleImagenet.get"], ["", "def", "sample_random", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "task_sampler", ".", "get", "(", "[", "np", ".", "random", ".", "choice", "(", "self", ".", "tasks", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SineSampler.filter_upto": [[46, 48], ["task_sampler.SineSampler.task_sampler.filter_upto"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleImagenet.filter_upto"], ["", "def", "filter_upto", "(", "self", ",", "task", ")", ":", "\n", "        ", "return", "self", ".", "task_sampler", ".", "filter_upto", "(", "task", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SineSampler.sample_task": [[49, 51], ["task_sampler.SineSampler.task_sampler.get"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleImagenet.get"], ["", "def", "sample_task", "(", "self", ",", "t", ")", ":", "\n", "        ", "return", "self", ".", "task_sampler", ".", "get", "(", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SineSampler.sample_tasks": [[52, 54], ["task_sampler.SineSampler.task_sampler.get_task_trainset"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleImagenet.get_task_trainset"], ["", "def", "sample_tasks", "(", "self", ",", "t", ")", ":", "\n", "        ", "return", "self", ".", "task_sampler", ".", "get_task_trainset", "(", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SineBaselineSampler.__init__": [[58, 65], ["task_sampler.SampleSineBaseline", "task_sampler.SineBaselineSampler.task_sampler.add_complete_iteraetor"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleImagenet.add_complete_iteraetor"], ["    ", "def", "__init__", "(", "self", ",", "tasks", ",", "capacity", ")", ":", "\n", "        ", "self", ".", "capacity", "=", "capacity", "\n", "self", ".", "tasks", "=", "tasks", "\n", "self", ".", "task_sampler", "=", "SampleSineBaseline", "(", "capacity", ")", "\n", "self", ".", "task_sampler", ".", "add_complete_iteraetor", "(", "self", ".", "tasks", ")", "\n", "self", ".", "sample_batch", "=", "self", ".", "task_sampler", ".", "sample_batch", "\n", "self", ".", "sample_trajectory", "=", "self", ".", "task_sampler", ".", "sample_trajectory", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SineBaselineSampler.get_complete_iterator": [[66, 68], ["None"], "methods", ["None"], ["", "def", "get_complete_iterator", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "task_sampler", ".", "complete_iterator", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SineBaselineSampler.sample_random": [[69, 71], ["task_sampler.SineBaselineSampler.task_sampler.get", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleImagenet.get"], ["", "def", "sample_random", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "task_sampler", ".", "get", "(", "[", "np", ".", "random", ".", "choice", "(", "self", ".", "tasks", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SineBaselineSampler.filter_upto": [[72, 74], ["task_sampler.SineBaselineSampler.task_sampler.filter_upto"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleImagenet.filter_upto"], ["", "def", "filter_upto", "(", "self", ",", "task", ")", ":", "\n", "        ", "return", "self", ".", "task_sampler", ".", "filter_upto", "(", "task", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SineBaselineSampler.sample_task": [[75, 77], ["task_sampler.SineBaselineSampler.task_sampler.get"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleImagenet.get"], ["", "def", "sample_task", "(", "self", ",", "t", ")", ":", "\n", "        ", "return", "self", ".", "task_sampler", ".", "get", "(", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SineBaselineSampler.sample_tasks": [[78, 80], ["task_sampler.SineBaselineSampler.task_sampler.get_task_trainset"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleImagenet.get_task_trainset"], ["", "def", "sample_tasks", "(", "self", ",", "t", ")", ":", "\n", "        ", "return", "self", ".", "task_sampler", ".", "get_task_trainset", "(", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleSineBaseline.__init__": [[84, 88], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "capacity", ")", ":", "\n", "        ", "self", ".", "task_iterators", "=", "[", "]", "\n", "self", ".", "iterators", "=", "{", "}", "\n", "self", ".", "capacity", "=", "capacity", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleSineBaseline.add_complete_iteraetor": [[89, 91], ["None"], "methods", ["None"], ["", "def", "add_complete_iteraetor", "(", "self", ",", "tasks", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleSineBaseline.add_task_iterator": [[92, 105], ["logger.info", "numpy.random.rand", "numpy.random.rand", "numpy.random.rand", "numpy.random.rand"], "methods", ["None"], ["", "def", "add_task_iterator", "(", "self", ",", "task", ")", ":", "\n", "\n", "        ", "amplitude", "=", "(", "np", ".", "random", ".", "rand", "(", ")", "+", "0.02", ")", "*", "(", "5", ")", "\n", "phase", "=", "np", ".", "random", ".", "rand", "(", ")", "*", "np", ".", "pi", "\n", "decay", "=", "np", ".", "random", ".", "rand", "(", ")", "*", "0.4", "\n", "frequency", "=", "np", ".", "random", ".", "rand", "(", ")", "*", "2", "+", "1.0", "\n", "\n", "self", ".", "iterators", "[", "task", "]", "=", "{", "'id'", ":", "task", ",", "'phase'", ":", "phase", ",", "'amplitude'", ":", "amplitude", ",", "'decay'", ":", "decay", ",", "\n", "'frequency'", ":", "frequency", "}", "\n", "\n", "logger", ".", "info", "(", "\"Task %d has been added to the list with phase %f and amp %f\"", ",", "task", ",", "phase", ",", "amplitude", ")", "\n", "\n", "return", "self", ".", "iterators", "[", "task", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleSineBaseline.get": [[106, 112], ["task_sampler.SampleSineBaseline.add_task_iterator"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleImagenet.add_task_iterator"], ["", "def", "get", "(", "self", ",", "tasks", ")", ":", "\n", "        ", "for", "task", "in", "tasks", ":", "\n", "            ", "if", "task", "in", "self", ".", "iterators", ":", "\n", "                ", "return", "self", ".", "iterators", "[", "task", "]", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "add_task_iterator", "(", "task", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleSineBaseline.sample_batch": [[113, 128], ["numpy.zeros", "numpy.zeros", "int", "numpy.sin", "torch.tensor().float", "torch.tensor().float", "numpy.random.rand", "len", "float", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "", "", "def", "sample_batch", "(", "self", ",", "task", ",", "task_id", ",", "samples", "=", "10", ")", ":", "\n", "\n", "        ", "x_samples", "=", "np", ".", "random", ".", "rand", "(", "samples", ")", "*", "10", "-", "5", "\n", "\n", "x", "=", "np", ".", "zeros", "(", "(", "samples", ",", "11", ")", ")", "\n", "x", "[", ":", ",", "10", "]", "=", "x_samples", "\n", "\n", "x", "[", ":", ",", "task_id", "%", "10", "]", "=", "1", "\n", "\n", "targets", "=", "np", ".", "zeros", "(", "(", "len", "(", "x_samples", ")", ",", "2", ")", ")", "\n", "targets", "[", ":", ",", "0", "]", "=", "task", "[", "'amplitude'", "]", "*", "np", ".", "sin", "(", "x_samples", "+", "task", "[", "'phase'", "]", ")", "\n", "\n", "targets", "[", ":", ",", "1", "]", "=", "int", "(", "float", "(", "task_id", ")", "/", "10", ")", "\n", "\n", "return", "torch", ".", "tensor", "(", "x", ")", ".", "float", "(", ")", ",", "torch", ".", "tensor", "(", "targets", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleSineBaseline.sample_trajectory": [[129, 142], ["range", "xs.append", "ys.append", "torch.tensor().float", "torch.tensor().float", "float", "numpy.sin", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "sample_trajectory", "(", "self", ",", "task", ",", "len", ",", "test", "=", "False", ")", ":", "\n", "        ", "xs", "=", "[", "]", "\n", "ys", "=", "[", "]", "\n", "\n", "for", "t", "in", "range", "(", "0", ",", "len", ")", ":", "\n", "            ", "x", "=", "float", "(", "t", ")", "/", "20", "\n", "\n", "y", "=", "task", "[", "'amplitude'", "]", "*", "np", ".", "e", "**", "(", "-", "x", "*", "task", "[", "'decay'", "]", ")", "*", "np", ".", "sin", "(", "\n", "2", "*", "np", ".", "pi", "*", "x", "/", "task", "[", "'frequency'", "]", "+", "task", "[", "'phase'", "]", ")", "\n", "xs", ".", "append", "(", "x", ")", "\n", "ys", ".", "append", "(", "y", ")", "\n", "\n", "", "return", "torch", ".", "tensor", "(", "xs", ")", ".", "float", "(", ")", ",", "torch", ".", "tensor", "(", "ys", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleSine.__init__": [[147, 151], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "capacity", ")", ":", "\n", "        ", "self", ".", "task_iterators", "=", "[", "]", "\n", "self", ".", "iterators", "=", "{", "}", "\n", "self", ".", "capacity", "=", "capacity", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleSine.add_complete_iteraetor": [[152, 154], ["None"], "methods", ["None"], ["", "def", "add_complete_iteraetor", "(", "self", ",", "tasks", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleSine.add_task_iterator": [[155, 168], ["numpy.random.rand", "numpy.random.rand", "numpy.random.rand", "numpy.random.rand"], "methods", ["None"], ["", "def", "add_task_iterator", "(", "self", ",", "task", ")", ":", "\n", "\n", "        ", "amplitude", "=", "(", "np", ".", "random", ".", "rand", "(", ")", "+", "0.02", ")", "*", "(", "5", ")", "\n", "phase", "=", "np", ".", "random", ".", "rand", "(", ")", "*", "np", ".", "pi", "\n", "decay", "=", "np", ".", "random", ".", "rand", "(", ")", "*", "0.4", "\n", "frequency", "=", "np", ".", "random", ".", "rand", "(", ")", "*", "2", "+", "1.0", "\n", "\n", "self", ".", "iterators", "[", "task", "]", "=", "{", "'id'", ":", "task", ",", "'phase'", ":", "phase", ",", "'amplitude'", ":", "amplitude", ",", "'decay'", ":", "decay", ",", "\n", "'frequency'", ":", "frequency", "}", "\n", "\n", "# logger.info(\"Task %d has been added to the list with phase %f and amp %f\", task, phase, amplitude)", "\n", "\n", "return", "self", ".", "iterators", "[", "task", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleSine.get": [[171, 177], ["task_sampler.SampleSine.add_task_iterator"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleImagenet.add_task_iterator"], ["", "def", "get", "(", "self", ",", "tasks", ")", ":", "\n", "        ", "for", "task", "in", "tasks", ":", "\n", "            ", "if", "task", "in", "self", ".", "iterators", ":", "\n", "                ", "return", "self", ".", "iterators", "[", "task", "]", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "add_task_iterator", "(", "task", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleSine.sample_batch": [[178, 192], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.sin", "torch.tensor().float", "torch.tensor().float", "numpy.random.rand", "len", "len", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "", "", "def", "sample_batch", "(", "self", ",", "task", ",", "task_id", ",", "samples", "=", "10", ")", ":", "\n", "\n", "        ", "x_samples", "=", "np", ".", "random", ".", "rand", "(", "samples", ")", "*", "10", "-", "5", "\n", "x", "=", "np", ".", "zeros", "(", "(", "len", "(", "x_samples", ")", ",", "2", ")", ")", "\n", "\n", "x", "=", "np", ".", "zeros", "(", "(", "samples", ",", "self", ".", "capacity", ")", ")", "\n", "x", "[", ":", ",", "self", ".", "capacity", "-", "1", "]", "=", "x_samples", "\n", "assert", "(", "task_id", "<=", "self", ".", "capacity", "-", "1", ")", "\n", "x", "[", ":", ",", "task_id", "]", "=", "1", "\n", "\n", "targets", "=", "np", ".", "zeros", "(", "(", "len", "(", "x_samples", ")", ",", "2", ")", ")", "\n", "targets", "[", ":", ",", "0", "]", "=", "task", "[", "'amplitude'", "]", "*", "np", ".", "sin", "(", "x_samples", "+", "task", "[", "'phase'", "]", ")", "\n", "targets", "[", ":", ",", "1", "]", "=", "0", "\n", "return", "torch", ".", "tensor", "(", "x", ")", ".", "float", "(", ")", ",", "torch", ".", "tensor", "(", "targets", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleSine.sample_trajectory": [[193, 206], ["range", "xs.append", "ys.append", "torch.tensor().float", "torch.tensor().float", "float", "numpy.sin", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "sample_trajectory", "(", "self", ",", "task", ",", "len", ",", "test", "=", "False", ")", ":", "\n", "        ", "xs", "=", "[", "]", "\n", "ys", "=", "[", "]", "\n", "\n", "for", "t", "in", "range", "(", "0", ",", "len", ")", ":", "\n", "            ", "x", "=", "float", "(", "t", ")", "/", "20", "\n", "\n", "y", "=", "task", "[", "'amplitude'", "]", "*", "np", ".", "e", "**", "(", "-", "x", "*", "task", "[", "'decay'", "]", ")", "*", "np", ".", "sin", "(", "\n", "2", "*", "np", ".", "pi", "*", "x", "/", "task", "[", "'frequency'", "]", "+", "task", "[", "'phase'", "]", ")", "\n", "xs", ".", "append", "(", "x", ")", "\n", "ys", ".", "append", "(", "y", ")", "\n", "\n", "", "return", "torch", ".", "tensor", "(", "xs", ")", ".", "float", "(", ")", ",", "torch", ".", "tensor", "(", "ys", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.OmniglotSampler.__init__": [[210, 214], ["task_sampler.SampleOmni", "task_sampler.OmniglotSampler.task_sampler.add_complete_iteraetor"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleImagenet.add_complete_iteraetor"], ["    ", "def", "__init__", "(", "self", ",", "tasks", ",", "trainset", ",", "testset", ")", ":", "\n", "        ", "self", ".", "tasks", "=", "tasks", "\n", "self", ".", "task_sampler", "=", "SampleOmni", "(", "trainset", ",", "testset", ")", "\n", "self", ".", "task_sampler", ".", "add_complete_iteraetor", "(", "self", ".", "tasks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.OmniglotSampler.get_complete_iterator": [[215, 217], ["None"], "methods", ["None"], ["", "def", "get_complete_iterator", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "task_sampler", ".", "complete_iterator", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.OmniglotSampler.get_another_complete_iterator": [[218, 220], ["None"], "methods", ["None"], ["", "def", "get_another_complete_iterator", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "task_sampler", ".", "another_complete_iterator", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.OmniglotSampler.sample_random": [[221, 223], ["task_sampler.OmniglotSampler.task_sampler.get", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleImagenet.get"], ["", "def", "sample_random", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "task_sampler", ".", "get", "(", "[", "np", ".", "random", ".", "choice", "(", "self", ".", "tasks", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.OmniglotSampler.filter_upto": [[224, 226], ["task_sampler.OmniglotSampler.task_sampler.filter_upto"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleImagenet.filter_upto"], ["", "def", "filter_upto", "(", "self", ",", "task", ")", ":", "\n", "        ", "return", "self", ".", "task_sampler", ".", "filter_upto", "(", "task", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.OmniglotSampler.sample_task": [[227, 229], ["task_sampler.OmniglotSampler.task_sampler.get"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleImagenet.get"], ["", "def", "sample_task", "(", "self", ",", "t", ",", "train", "=", "True", ")", ":", "\n", "        ", "return", "self", ".", "task_sampler", ".", "get", "(", "t", ",", "train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.OmniglotSampler.sample_tasks": [[230, 237], ["task_sampler.OmniglotSampler.task_sampler.get_task_trainset", "torch.utils.data.DataLoader"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleImagenet.get_task_trainset"], ["", "def", "sample_tasks", "(", "self", ",", "t", ",", "train", "=", "False", ")", ":", "\n", "# assert(false)", "\n", "        ", "dataset", "=", "self", ".", "task_sampler", ".", "get_task_trainset", "(", "t", ",", "train", ")", "\n", "train_iterator", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "1", ")", "\n", "return", "train_iterator", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleOmni.__init__": [[241, 247], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "trainset", ",", "testset", ")", ":", "\n", "        ", "self", ".", "task_iterators", "=", "[", "]", "\n", "self", ".", "trainset", "=", "trainset", "\n", "self", ".", "testset", "=", "testset", "\n", "self", ".", "iterators", "=", "{", "}", "\n", "self", ".", "test_iterators", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleOmni.add_complete_iteraetor": [[248, 262], ["task_sampler.SampleOmni.get_task_trainset", "torch.utils.data.DataLoader", "logger.info", "torch.utils.data.DataLoader", "len"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleImagenet.get_task_trainset"], ["", "def", "add_complete_iteraetor", "(", "self", ",", "tasks", ")", ":", "\n", "        ", "dataset", "=", "self", ".", "get_task_trainset", "(", "tasks", ",", "True", ")", "\n", "# dataset = self.get_task_testset(tasks)", "\n", "train_iterator", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "\n", "batch_size", "=", "64", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "1", ")", "\n", "self", ".", "complete_iterator", "=", "train_iterator", "\n", "logger", ".", "info", "(", "\"Len of complete iterator = %d\"", ",", "len", "(", "self", ".", "complete_iterator", ")", "*", "64", ")", "\n", "\n", "train_iterator2", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "1", ")", "\n", "\n", "self", ".", "another_complete_iterator", "=", "train_iterator2", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleOmni.add_task_iterator": [[263, 272], ["task_sampler.SampleOmni.get_task_trainset", "torch.utils.data.DataLoader", "print"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleImagenet.get_task_trainset"], ["", "def", "add_task_iterator", "(", "self", ",", "task", ",", "train", ")", ":", "\n", "        ", "dataset", "=", "self", ".", "get_task_trainset", "(", "[", "task", "]", ",", "train", ")", "\n", "\n", "train_iterator", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "1", ")", "\n", "self", ".", "iterators", "[", "task", "]", "=", "train_iterator", "\n", "print", "(", "\"Task %d has been added to the list\"", "%", "task", ")", "\n", "return", "train_iterator", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleOmni.get": [[273, 286], ["task_sampler.SampleOmni.add_task_iterator", "task_sampler.SampleOmni.add_task_iterator"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleImagenet.add_task_iterator", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleImagenet.add_task_iterator"], ["", "def", "get", "(", "self", ",", "tasks", ",", "train", ")", ":", "\n", "        ", "if", "train", ":", "\n", "            ", "for", "task", "in", "tasks", ":", "\n", "                ", "if", "task", "in", "self", ".", "iterators", ":", "\n", "                    ", "return", "self", ".", "iterators", "[", "task", "]", "\n", "", "else", ":", "\n", "                    ", "return", "self", ".", "add_task_iterator", "(", "task", ",", "True", ")", "\n", "", "", "", "else", ":", "\n", "            ", "for", "task", "in", "tasks", ":", "\n", "                ", "if", "tasks", "in", "self", ".", "test_iterators", ":", "\n", "                    ", "return", "self", ".", "test_iterators", "[", "task", "]", "\n", "", "else", ":", "\n", "                    ", "return", "self", ".", "add_task_iterator", "(", "task", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleOmni.get_task_trainset": [[287, 305], ["numpy.array", "numpy.zeros_like", "numpy.nonzero", "copy.deepcopy", "copy.deepcopy"], "methods", ["None"], ["", "", "", "", "def", "get_task_trainset", "(", "self", ",", "task", ",", "train", ")", ":", "\n", "\n", "        ", "if", "train", ":", "\n", "            ", "trainset", "=", "copy", ".", "deepcopy", "(", "self", ".", "trainset", ")", "\n", "", "else", ":", "\n", "            ", "trainset", "=", "copy", ".", "deepcopy", "(", "self", ".", "testset", ")", "\n", "", "class_labels", "=", "np", ".", "array", "(", "[", "x", "[", "1", "]", "for", "x", "in", "trainset", ".", "_flat_character_images", "]", ")", "\n", "\n", "indices", "=", "np", ".", "zeros_like", "(", "class_labels", ")", "\n", "for", "a", "in", "task", ":", "\n", "            ", "indices", "=", "indices", "+", "(", "class_labels", "==", "a", ")", ".", "astype", "(", "int", ")", "\n", "", "indices", "=", "np", ".", "nonzero", "(", "indices", ")", "\n", "\n", "trainset", ".", "_flat_character_images", "=", "[", "trainset", ".", "_flat_character_images", "[", "i", "]", "for", "i", "in", "indices", "[", "0", "]", "]", "\n", "trainset", ".", "data", "=", "[", "trainset", ".", "data", "[", "i", "]", "for", "i", "in", "indices", "[", "0", "]", "]", "\n", "trainset", ".", "targets", "=", "[", "trainset", ".", "targets", "[", "i", "]", "for", "i", "in", "indices", "[", "0", "]", "]", "\n", "\n", "return", "trainset", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleOmni.get_task_testset": [[306, 321], ["copy.deepcopy", "numpy.array", "numpy.zeros_like", "numpy.nonzero"], "methods", ["None"], ["", "def", "get_task_testset", "(", "self", ",", "task", ")", ":", "\n", "\n", "        ", "trainset", "=", "copy", ".", "deepcopy", "(", "self", ".", "testset", ")", "\n", "class_labels", "=", "np", ".", "array", "(", "[", "x", "[", "1", "]", "for", "x", "in", "trainset", ".", "_flat_character_images", "]", ")", "\n", "\n", "indices", "=", "np", ".", "zeros_like", "(", "class_labels", ")", "\n", "for", "a", "in", "task", ":", "\n", "            ", "indices", "=", "indices", "+", "(", "class_labels", "==", "a", ")", ".", "astype", "(", "int", ")", "\n", "", "indices", "=", "np", ".", "nonzero", "(", "indices", ")", "\n", "\n", "trainset", ".", "_flat_character_images", "=", "[", "trainset", ".", "_flat_character_images", "[", "i", "]", "for", "i", "in", "indices", "[", "0", "]", "]", "\n", "trainset", ".", "data", "=", "[", "trainset", ".", "data", "[", "i", "]", "for", "i", "in", "indices", "[", "0", "]", "]", "\n", "trainset", ".", "targets", "=", "[", "trainset", ".", "targets", "[", "i", "]", "for", "i", "in", "indices", "[", "0", "]", "]", "\n", "\n", "return", "trainset", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleOmni.filter_upto": [[322, 328], ["copy.deepcopy"], "methods", ["None"], ["", "def", "filter_upto", "(", "self", ",", "task", ")", ":", "\n", "\n", "        ", "trainset", "=", "copy", ".", "deepcopy", "(", "self", ".", "trainset", ")", "\n", "trainset", ".", "data", "=", "trainset", ".", "data", "[", "trainset", ".", "data", "[", "'target'", "]", "<=", "task", "]", "\n", "\n", "return", "trainset", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.CIFAR100Sampler.__init__": [[332, 336], ["task_sampler.SampleCIFAR100", "task_sampler.CIFAR100Sampler.task_sampler.add_complete_iteraetor"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleImagenet.add_complete_iteraetor"], ["    ", "def", "__init__", "(", "self", ",", "tasks", ",", "trainset", ",", "testset", ")", ":", "\n", "        ", "self", ".", "tasks", "=", "tasks", "\n", "self", ".", "task_sampler", "=", "SampleCIFAR100", "(", "trainset", ",", "testset", ")", "\n", "self", ".", "task_sampler", ".", "add_complete_iteraetor", "(", "self", ".", "tasks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.CIFAR100Sampler.get_complete_iterator": [[337, 339], ["None"], "methods", ["None"], ["", "def", "get_complete_iterator", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "task_sampler", ".", "complete_iterator", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.CIFAR100Sampler.get_another_complete_iterator": [[340, 342], ["None"], "methods", ["None"], ["", "def", "get_another_complete_iterator", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "task_sampler", ".", "another_complete_iterator", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.CIFAR100Sampler.sample_random": [[343, 345], ["task_sampler.CIFAR100Sampler.task_sampler.get", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleImagenet.get"], ["", "def", "sample_random", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "task_sampler", ".", "get", "(", "[", "np", ".", "random", ".", "choice", "(", "self", ".", "tasks", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.CIFAR100Sampler.filter_upto": [[346, 348], ["task_sampler.CIFAR100Sampler.task_sampler.filter_upto"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleImagenet.filter_upto"], ["", "def", "filter_upto", "(", "self", ",", "task", ")", ":", "\n", "        ", "return", "self", ".", "task_sampler", ".", "filter_upto", "(", "task", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.CIFAR100Sampler.sample_task": [[349, 352], ["task_sampler.CIFAR100Sampler.task_sampler.get", "task_sampler.CIFAR100Sampler.shuffle_iterator"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleImagenet.get", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.CIFAR100Sampler.shuffle_iterator"], ["", "def", "sample_task", "(", "self", ",", "t", ",", "train", "=", "True", ")", ":", "\n", "        ", "train_iterator", "=", "self", ".", "task_sampler", ".", "get", "(", "t", ",", "train", ")", "\n", "return", "self", ".", "shuffle_iterator", "(", "train_iterator", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.CIFAR100Sampler.sample_tasks": [[353, 360], ["task_sampler.CIFAR100Sampler.task_sampler.get_task_trainset", "torch.utils.data.DataLoader", "task_sampler.CIFAR100Sampler.shuffle_iterator"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleImagenet.get_task_trainset", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.CIFAR100Sampler.shuffle_iterator"], ["", "def", "sample_tasks", "(", "self", ",", "t", ",", "train", "=", "False", ")", ":", "\n", "# assert(false)", "\n", "        ", "dataset", "=", "self", ".", "task_sampler", ".", "get_task_trainset", "(", "t", ",", "train", ")", "\n", "train_iterator", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "\n", "batch_size", "=", "128", ",", "\n", "shuffle", "=", "False", ",", "num_workers", "=", "1", ")", "\n", "return", "self", ".", "shuffle_iterator", "(", "train_iterator", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.CIFAR100Sampler.shuffle_iterator": [[361, 367], ["numpy.arange", "numpy.random.shuffle", "len", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "shuffle_iterator", "(", "self", ",", "iterator", ")", ":", "\n", "        ", "indices", "=", "np", ".", "arange", "(", "len", "(", "iterator", ".", "dataset", ".", "targets", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "indices", ")", "\n", "iterator", ".", "dataset", ".", "data", "=", "np", ".", "array", "(", "iterator", ".", "dataset", ".", "data", ")", "[", "indices", "]", "\n", "iterator", ".", "dataset", ".", "targets", "=", "np", ".", "array", "(", "iterator", ".", "dataset", ".", "targets", ")", "[", "indices", "]", "\n", "return", "iterator", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleCIFAR100.__init__": [[371, 377], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "trainset", ",", "testset", ")", ":", "\n", "        ", "self", ".", "task_iterators", "=", "[", "]", "\n", "self", ".", "trainset", "=", "trainset", "\n", "self", ".", "testset", "=", "testset", "\n", "self", ".", "iterators", "=", "{", "}", "\n", "self", ".", "test_iterators", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleCIFAR100.add_complete_iteraetor": [[378, 392], ["task_sampler.SampleCIFAR100.get_task_trainset", "torch.utils.data.DataLoader", "logger.info", "torch.utils.data.DataLoader", "len"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleImagenet.get_task_trainset"], ["", "def", "add_complete_iteraetor", "(", "self", ",", "tasks", ")", ":", "\n", "        ", "dataset", "=", "self", ".", "get_task_trainset", "(", "tasks", ",", "True", ")", "\n", "# dataset = self.get_task_testset(tasks)", "\n", "train_iterator", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "\n", "batch_size", "=", "64", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "1", ")", "\n", "self", ".", "complete_iterator", "=", "train_iterator", "\n", "logger", ".", "info", "(", "\"Len of complete iterator = %d\"", ",", "len", "(", "self", ".", "complete_iterator", ")", "*", "64", ")", "\n", "\n", "train_iterator2", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ",", "num_workers", "=", "1", ")", "\n", "\n", "self", ".", "another_complete_iterator", "=", "train_iterator2", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleCIFAR100.add_task_iterator": [[393, 402], ["task_sampler.SampleCIFAR100.get_task_trainset", "torch.utils.data.DataLoader", "print"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleImagenet.get_task_trainset"], ["", "def", "add_task_iterator", "(", "self", ",", "task", ",", "train", ")", ":", "\n", "        ", "dataset", "=", "self", ".", "get_task_trainset", "(", "[", "task", "]", ",", "train", ")", "\n", "\n", "train_iterator", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ",", "num_workers", "=", "1", ")", "\n", "self", ".", "iterators", "[", "task", "]", "=", "train_iterator", "\n", "print", "(", "\"Task %d has been added to the list\"", "%", "task", ")", "\n", "return", "train_iterator", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleCIFAR100.get": [[403, 416], ["task_sampler.SampleCIFAR100.add_task_iterator", "task_sampler.SampleCIFAR100.add_task_iterator"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleImagenet.add_task_iterator", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleImagenet.add_task_iterator"], ["", "def", "get", "(", "self", ",", "tasks", ",", "train", ")", ":", "\n", "        ", "if", "train", ":", "\n", "            ", "for", "task", "in", "tasks", ":", "\n", "                ", "if", "task", "in", "self", ".", "iterators", ":", "\n", "                    ", "return", "self", ".", "iterators", "[", "task", "]", "\n", "", "else", ":", "\n", "                    ", "return", "self", ".", "add_task_iterator", "(", "task", ",", "True", ")", "\n", "", "", "", "else", ":", "\n", "            ", "for", "task", "in", "tasks", ":", "\n", "                ", "if", "tasks", "in", "self", ".", "test_iterators", ":", "\n", "                    ", "return", "self", ".", "test_iterators", "[", "task", "]", "\n", "", "else", ":", "\n", "                    ", "return", "self", ".", "add_task_iterator", "(", "task", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleCIFAR100.get_task_trainset": [[417, 433], ["numpy.array", "numpy.zeros_like", "numpy.nonzero", "copy.deepcopy", "copy.deepcopy"], "methods", ["None"], ["", "", "", "", "def", "get_task_trainset", "(", "self", ",", "task", ",", "train", ")", ":", "\n", "\n", "        ", "if", "train", ":", "\n", "            ", "trainset", "=", "copy", ".", "deepcopy", "(", "self", ".", "trainset", ")", "\n", "", "else", ":", "\n", "            ", "trainset", "=", "copy", ".", "deepcopy", "(", "self", ".", "testset", ")", "\n", "", "class_labels", "=", "np", ".", "array", "(", "trainset", ".", "targets", ")", "\n", "\n", "indices", "=", "np", ".", "zeros_like", "(", "class_labels", ")", "\n", "for", "a", "in", "task", ":", "\n", "            ", "indices", "=", "indices", "+", "(", "class_labels", "==", "a", ")", ".", "astype", "(", "int", ")", "\n", "", "indices", "=", "np", ".", "nonzero", "(", "indices", ")", "\n", "\n", "trainset", ".", "data", "=", "[", "trainset", ".", "data", "[", "i", "]", "for", "i", "in", "indices", "[", "0", "]", "]", "\n", "trainset", ".", "targets", "=", "[", "trainset", ".", "targets", "[", "i", "]", "for", "i", "in", "indices", "[", "0", "]", "]", "\n", "return", "trainset", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleCIFAR100.get_task_testset": [[434, 449], ["copy.deepcopy", "numpy.array", "numpy.zeros_like", "numpy.nonzero"], "methods", ["None"], ["", "def", "get_task_testset", "(", "self", ",", "task", ")", ":", "\n", "\n", "        ", "trainset", "=", "copy", ".", "deepcopy", "(", "self", ".", "testset", ")", "\n", "class_labels", "=", "np", ".", "array", "(", "[", "x", "[", "1", "]", "for", "x", "in", "trainset", ".", "_flat_character_images", "]", ")", "\n", "\n", "indices", "=", "np", ".", "zeros_like", "(", "class_labels", ")", "\n", "for", "a", "in", "task", ":", "\n", "            ", "indices", "=", "indices", "+", "(", "class_labels", "==", "a", ")", ".", "astype", "(", "int", ")", "\n", "", "indices", "=", "np", ".", "nonzero", "(", "indices", ")", "\n", "\n", "trainset", ".", "_flat_character_images", "=", "[", "trainset", ".", "_flat_character_images", "[", "i", "]", "for", "i", "in", "indices", "[", "0", "]", "]", "\n", "trainset", ".", "data", "=", "[", "trainset", ".", "data", "[", "i", "]", "for", "i", "in", "indices", "[", "0", "]", "]", "\n", "trainset", ".", "targets", "=", "[", "trainset", ".", "targets", "[", "i", "]", "for", "i", "in", "indices", "[", "0", "]", "]", "\n", "\n", "return", "trainset", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleCIFAR100.filter_upto": [[450, 456], ["copy.deepcopy"], "methods", ["None"], ["", "def", "filter_upto", "(", "self", ",", "task", ")", ":", "\n", "\n", "        ", "trainset", "=", "copy", ".", "deepcopy", "(", "self", ".", "trainset", ")", "\n", "trainset", ".", "data", "=", "trainset", ".", "data", "[", "trainset", ".", "data", "[", "'target'", "]", "<=", "task", "]", "\n", "\n", "return", "trainset", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.ImagenetSampler.__init__": [[459, 463], ["task_sampler.SampleImagenet", "task_sampler.ImagenetSampler.task_sampler.add_complete_iteraetor", "list", "range", "int", "len"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleImagenet.add_complete_iteraetor"], ["    ", "def", "__init__", "(", "self", ",", "tasks", ",", "trainset", ",", "testset", ")", ":", "\n", "        ", "self", ".", "tasks", "=", "tasks", "\n", "self", ".", "task_sampler", "=", "SampleImagenet", "(", "trainset", ",", "testset", ")", "\n", "self", ".", "task_sampler", ".", "add_complete_iteraetor", "(", "list", "(", "range", "(", "0", ",", "int", "(", "len", "(", "self", ".", "tasks", ")", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.ImagenetSampler.get_complete_iterator": [[464, 466], ["None"], "methods", ["None"], ["", "def", "get_complete_iterator", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "task_sampler", ".", "complete_iterator", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.ImagenetSampler.get_another_complete_iterator": [[467, 469], ["None"], "methods", ["None"], ["", "def", "get_another_complete_iterator", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "task_sampler", ".", "another_complete_iterator", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.ImagenetSampler.sample_random": [[470, 472], ["task_sampler.ImagenetSampler.task_sampler.get", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleImagenet.get"], ["", "def", "sample_random", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "task_sampler", ".", "get", "(", "[", "np", ".", "random", ".", "choice", "(", "self", ".", "tasks", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.ImagenetSampler.filter_upto": [[473, 475], ["task_sampler.ImagenetSampler.task_sampler.filter_upto"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleImagenet.filter_upto"], ["", "def", "filter_upto", "(", "self", ",", "task", ")", ":", "\n", "        ", "return", "self", ".", "task_sampler", ".", "filter_upto", "(", "task", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.ImagenetSampler.sample_task": [[476, 478], ["task_sampler.ImagenetSampler.task_sampler.get"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleImagenet.get"], ["", "def", "sample_task", "(", "self", ",", "t", ",", "train", "=", "True", ")", ":", "\n", "        ", "return", "self", ".", "task_sampler", ".", "get", "(", "t", ",", "train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.ImagenetSampler.sample_tasks": [[479, 486], ["task_sampler.ImagenetSampler.task_sampler.get_task_trainset", "torch.utils.data.DataLoader"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleImagenet.get_task_trainset"], ["", "def", "sample_tasks", "(", "self", ",", "t", ",", "train", "=", "False", ")", ":", "\n", "# assert(false)", "\n", "        ", "dataset", "=", "self", ".", "task_sampler", ".", "get_task_trainset", "(", "t", ",", "train", ")", "\n", "train_iterator", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "1", ")", "\n", "return", "train_iterator", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleImagenet.__init__": [[489, 495], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "trainset", ",", "testset", ")", ":", "\n", "        ", "self", ".", "task_iterators", "=", "[", "]", "\n", "self", ".", "trainset", "=", "trainset", "\n", "self", ".", "testset", "=", "testset", "\n", "self", ".", "iterators", "=", "{", "}", "\n", "self", ".", "test_iterators", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleImagenet.add_complete_iteraetor": [[496, 510], ["task_sampler.SampleImagenet.get_task_trainset", "torch.utils.data.DataLoader", "logger.info", "torch.utils.data.DataLoader", "len"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleImagenet.get_task_trainset"], ["", "def", "add_complete_iteraetor", "(", "self", ",", "tasks", ")", ":", "\n", "        ", "dataset", "=", "self", ".", "get_task_trainset", "(", "tasks", ",", "True", ")", "\n", "# dataset = self.get_task_testset(tasks)", "\n", "train_iterator", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "\n", "batch_size", "=", "64", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "1", ")", "\n", "self", ".", "complete_iterator", "=", "train_iterator", "\n", "logger", ".", "info", "(", "\"Len of complete iterator = %d\"", ",", "len", "(", "self", ".", "complete_iterator", ")", "*", "256", ")", "\n", "\n", "train_iterator2", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "1", ")", "\n", "\n", "self", ".", "another_complete_iterator", "=", "train_iterator2", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleImagenet.add_task_iterator": [[511, 520], ["task_sampler.SampleImagenet.get_task_trainset", "torch.utils.data.DataLoader", "print"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleImagenet.get_task_trainset"], ["", "def", "add_task_iterator", "(", "self", ",", "task", ",", "train", ")", ":", "\n", "        ", "dataset", "=", "self", ".", "get_task_trainset", "(", "[", "task", "]", ",", "train", ")", "\n", "\n", "train_iterator", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "1", ")", "\n", "self", ".", "iterators", "[", "task", "]", "=", "train_iterator", "\n", "print", "(", "\"Task %d has been added to the list\"", "%", "task", ")", "\n", "return", "train_iterator", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleImagenet.get": [[521, 534], ["task_sampler.SampleImagenet.add_task_iterator", "task_sampler.SampleImagenet.add_task_iterator"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleImagenet.add_task_iterator", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleImagenet.add_task_iterator"], ["", "def", "get", "(", "self", ",", "tasks", ",", "train", ")", ":", "\n", "        ", "if", "train", ":", "\n", "            ", "for", "task", "in", "tasks", ":", "\n", "                ", "if", "task", "in", "self", ".", "iterators", ":", "\n", "                    ", "return", "self", ".", "iterators", "[", "task", "]", "\n", "", "else", ":", "\n", "                    ", "return", "self", ".", "add_task_iterator", "(", "task", ",", "True", ")", "\n", "", "", "", "else", ":", "\n", "            ", "for", "task", "in", "tasks", ":", "\n", "                ", "if", "tasks", "in", "self", ".", "test_iterators", ":", "\n", "                    ", "return", "self", ".", "test_iterators", "[", "task", "]", "\n", "", "else", ":", "\n", "                    ", "return", "self", ".", "add_task_iterator", "(", "task", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleImagenet.get_task_trainset": [[535, 560], ["copy.deepcopy", "copy.deepcopy", "data_temp.append", "labels_temp.append"], "methods", ["None"], ["", "", "", "", "def", "get_task_trainset", "(", "self", ",", "task", ",", "train", ")", ":", "\n", "\n", "        ", "if", "train", ":", "\n", "            ", "trainset", "=", "copy", ".", "deepcopy", "(", "self", ".", "trainset", ")", "\n", "", "else", ":", "\n", "            ", "trainset", "=", "copy", ".", "deepcopy", "(", "self", ".", "testset", ")", "\n", "\n", "# class_labels = np.array([x[1] for x in trainset._flat_character_images])", "\n", "\n", "# indices = np.zeros_like(class_labels)", "\n", "", "data_temp", "=", "[", "]", "\n", "labels_temp", "=", "[", "]", "\n", "for", "a", "in", "task", ":", "\n", "            ", "data_temp", ".", "append", "(", "trainset", ".", "data", "[", "a", "]", ")", "\n", "labels_temp", ".", "append", "(", "trainset", ".", "labels", "[", "a", "]", ")", "\n", "# labels_temp.append(trainset.)", "\n", "# indices = indices + (class_labels == a).astype(int)", "\n", "# indices = np.nonzero(indices)", "\n", "#", "\n", "# trainset._flat_character_images = [trainset._flat_character_images[i] for i in indices[0]]", "\n", "", "trainset", ".", "data", "=", "data_temp", "\n", "trainset", ".", "labels", "=", "labels_temp", "\n", "# trainset.targets = [trainset.targets[i] for i in indices[0]]", "\n", "\n", "return", "trainset", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleImagenet.get_task_testset": [[561, 576], ["copy.deepcopy", "numpy.array", "numpy.zeros_like", "numpy.nonzero"], "methods", ["None"], ["", "def", "get_task_testset", "(", "self", ",", "task", ")", ":", "\n", "\n", "        ", "trainset", "=", "copy", ".", "deepcopy", "(", "self", ".", "testset", ")", "\n", "class_labels", "=", "np", ".", "array", "(", "[", "x", "[", "1", "]", "for", "x", "in", "trainset", ".", "_flat_character_images", "]", ")", "\n", "\n", "indices", "=", "np", ".", "zeros_like", "(", "class_labels", ")", "\n", "for", "a", "in", "task", ":", "\n", "            ", "indices", "=", "indices", "+", "(", "class_labels", "==", "a", ")", ".", "astype", "(", "int", ")", "\n", "", "indices", "=", "np", ".", "nonzero", "(", "indices", ")", "\n", "\n", "trainset", ".", "_flat_character_images", "=", "[", "trainset", ".", "_flat_character_images", "[", "i", "]", "for", "i", "in", "indices", "[", "0", "]", "]", "\n", "trainset", ".", "data", "=", "[", "trainset", ".", "data", "[", "i", "]", "for", "i", "in", "indices", "[", "0", "]", "]", "\n", "trainset", ".", "targets", "=", "[", "trainset", ".", "targets", "[", "i", "]", "for", "i", "in", "indices", "[", "0", "]", "]", "\n", "\n", "return", "trainset", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleImagenet.filter_upto": [[577, 583], ["copy.deepcopy"], "methods", ["None"], ["", "def", "filter_upto", "(", "self", ",", "task", ")", ":", "\n", "\n", "        ", "trainset", "=", "copy", ".", "deepcopy", "(", "self", ".", "trainset", ")", "\n", "trainset", ".", "data", "=", "trainset", ".", "data", "[", "trainset", ".", "data", "[", "'target'", "]", "<=", "task", "]", "\n", "\n", "return", "trainset", "", "", "", ""]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.miniimagenet.MiniImagenet.__init__": [[25, 92], ["list", "os.path.join", "miniimagenet.MiniImagenet.loadCSV", "enumerate", "random.seed", "len", "print", "range", "torchvision.transforms.transforms.Compose", "torchvision.transforms.transforms.Compose", "os.path.join", "miniimagenet.MiniImagenet.items", "miniimagenet.MiniImagenet.data.append", "miniimagenet.MiniImagenet.labels.append", "torchvision.transforms.transforms.Resize", "torchvision.transforms.transforms.RandomHorizontalFlip", "torchvision.transforms.transforms.ToTensor", "torchvision.transforms.transforms.Normalize", "torchvision.transforms.transforms.Resize", "torchvision.transforms.transforms.ToTensor", "torchvision.transforms.transforms.Normalize", "PIL.Image.open().convert", "PIL.Image.open().convert", "int", "int", "PIL.Image.open", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.miniimagenet.MiniImagenet.loadCSV"], ["def", "__init__", "(", "self", ",", "root", ",", "mode", ",", "resize", "=", "84", ",", "startidx", "=", "0", ",", "memorize", "=", "False", ",", "elem_per_class", "=", "600", ",", "test", "=", "False", ",", "classes", "=", "list", "(", "range", "(", "1000", ")", ")", ",", "seed", "=", "10", ")", ":", "\n", "        ", "\"\"\"\n\n        :param root: root path of mini-imagenet\n        :param mode: train, val or test\n        :param batchsz: batch size of sets, not batch of imgs\n        :param n_way:\n        :param k_shot:\n        :param k_query: num of qeruy imgs per class\n        :param resize: resize to\n        :param startidx: start to index label from startidx\n        \"\"\"", "\n", "\n", "\n", "self", ".", "resize", "=", "resize", "# resize to", "\n", "self", ".", "startidx", "=", "startidx", "# index label not from 0, but from startidx", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "memorize", "=", "memorize", "\n", "\n", "# if test:", "\n", "#     self.elem_per_class = 600 - elem_per_class", "\n", "# else:", "\n", "self", ".", "elem_per_class", "=", "elem_per_class", "\n", "\n", "if", "not", "test", ":", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "lambda", "x", ":", "Image", ".", "open", "(", "x", ")", ".", "convert", "(", "'RGB'", ")", ",", "\n", "transforms", ".", "Resize", "(", "(", "self", ".", "resize", ",", "self", ".", "resize", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "# transforms.RandomRotation(5),", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "lambda", "x", ":", "Image", ".", "open", "(", "x", ")", ".", "convert", "(", "'RGB'", ")", ",", "\n", "transforms", ".", "Resize", "(", "(", "self", ".", "resize", ",", "self", ".", "resize", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", "\n", "]", ")", "\n", "\n", "", "self", ".", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'images'", ")", "# image path", "\n", "#csvdata = self.loadCSV(os.path.join(root, mode + '.csv'))  # csv path", "\n", "csvdata", "=", "self", ".", "loadCSV", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'traintest.csv'", ")", ")", "# csv path", "\n", "self", ".", "data", "=", "[", "]", "\n", "self", ".", "labels", "=", "[", "]", "\n", "self", ".", "img2label", "=", "{", "}", "\n", "cur_class", "=", "0", "\n", "for", "i", ",", "(", "k", ",", "v", ")", "in", "enumerate", "(", "csvdata", ".", "items", "(", ")", ")", ":", "\n", "# print(classes)", "\n", "\n", "            ", "if", "i", "in", "classes", ":", "\n", "# print(i)", "\n", "# print(len(v))", "\n", "                ", "if", "test", ":", "\n", "                    ", "v", "=", "v", "[", "int", "(", "elem_per_class", "*", "0.9", ")", ":", "]", "\n", "", "else", ":", "\n", "                    ", "v", "=", "v", "[", ":", "int", "(", "elem_per_class", "*", "0.9", ")", "]", "\n", "", "self", ".", "data", ".", "append", "(", "v", ")", "# [[img1, img2, ...], [img111, ...]]", "\n", "self", ".", "img2label", "[", "k", "]", "=", "i", "+", "self", ".", "startidx", "# {\"img_name[:9]\":label}", "\n", "self", ".", "labels", ".", "append", "(", "i", ")", "\n", "cur_class", "+=", "1", "\n", "\n", "# from random import shuffle", "\n", "", "", "import", "random", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "# random.shuffle(self.data)", "\n", "self", ".", "cls_num", "=", "len", "(", "self", ".", "data", ")", "\n", "print", "(", "\"Total classes = \"", ",", "self", ".", "cls_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.miniimagenet.MiniImagenet.loadCSV": [[95, 114], ["open", "csv.reader", "next", "enumerate", "dictLabels.keys", "dictLabels[].append"], "methods", ["None"], ["", "def", "loadCSV", "(", "self", ",", "csvf", ")", ":", "\n", "        ", "\"\"\"\n        return a dict saving the information of csv\n        :param splitFile: csv file name\n        :return: {label:[file1, file2 ...]}\n        \"\"\"", "\n", "dictLabels", "=", "{", "}", "\n", "with", "open", "(", "csvf", ")", "as", "csvfile", ":", "\n", "            ", "csvreader", "=", "csv", ".", "reader", "(", "csvfile", ",", "delimiter", "=", "','", ")", "\n", "next", "(", "csvreader", ",", "None", ")", "# skip (filename, label)", "\n", "for", "i", ",", "row", "in", "enumerate", "(", "csvreader", ")", ":", "\n", "                ", "filename", "=", "row", "[", "0", "]", "\n", "label", "=", "row", "[", "1", "]", "\n", "# append filename to current label", "\n", "if", "label", "in", "dictLabels", ".", "keys", "(", ")", ":", "\n", "                    ", "dictLabels", "[", "label", "]", ".", "append", "(", "filename", ")", "\n", "", "else", ":", "\n", "                    ", "dictLabels", "[", "label", "]", "=", "[", "filename", "]", "\n", "", "", "", "return", "dictLabels", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.miniimagenet.MiniImagenet.__getitem__": [[116, 129], ["int", "miniimagenet.MiniImagenet.transform", "len", "os.path.join", "len"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        index means index of sets, 0<= index <= batchsz-1\n        :param index:\n        :return:\n        \"\"\"", "\n", "outer_index", "=", "int", "(", "index", "/", "len", "(", "self", ".", "data", "[", "0", "]", ")", ")", "\n", "inner_index", "=", "index", "%", "len", "(", "self", ".", "data", "[", "0", "]", ")", "\n", "\n", "image", "=", "self", ".", "transform", "(", "os", ".", "path", ".", "join", "(", "self", ".", "path", ",", "self", ".", "data", "[", "outer_index", "]", "[", "inner_index", "]", ")", ")", "\n", "label", "=", "self", ".", "labels", "[", "outer_index", "]", "\n", "\n", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.miniimagenet.MiniImagenet.__len__": [[130, 136], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "# as we have built up to batchsz of sets, you can sample some small batch size of sets.", "\n", "        ", "length", "=", "0", "\n", "for", "x", "in", "self", ".", "data", ":", "\n", "            ", "length", "+=", "len", "(", "x", ")", "\n", "", "return", "length", "\n", "# return self.batchsz", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.omniglot.Omniglot.__init__": [[36, 87], ["os.path.join", "os.path.join", "utils.list_dir", "sum", "sum", "range", "print", "os.path.expanduser", "omniglot.Omniglot.download", "omniglot.Omniglot._check_integrity", "RuntimeError", "omniglot.Omniglot._get_target_folder", "int", "print", "numpy.max", "enumerate", "range", "range", "os.path.join", "utils.list_files", "len", "omniglot.Omniglot.data2.append", "omniglot.Omniglot.targets2.append", "omniglot.Omniglot.new_flat.append", "omniglot.Omniglot.data2.append", "omniglot.Omniglot.targets2.append", "omniglot.Omniglot.new_flat.append", "utils.list_dir", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.utils.list_dir", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.omniglot.Omniglot.download", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.omniglot.Omniglot._check_integrity", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.omniglot.Omniglot._get_target_folder", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.utils.list_files", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.utils.list_dir"], ["def", "__init__", "(", "self", ",", "root", ",", "background", "=", "True", ",", "\n", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "\n", "download", "=", "False", ",", "train", "=", "True", ",", "all", "=", "False", ")", ":", "\n", "        ", "self", ".", "root", "=", "join", "(", "os", ".", "path", ".", "expanduser", "(", "root", ")", ",", "self", ".", "folder", ")", "\n", "self", ".", "background", "=", "background", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "images_cached", "=", "{", "}", "\n", "\n", "if", "download", ":", "\n", "            ", "self", ".", "download", "(", ")", "\n", "\n", "", "if", "not", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Dataset not found or corrupted.'", "+", "\n", "' You can use download=True to download it'", ")", "\n", "\n", "", "self", ".", "target_folder", "=", "join", "(", "self", ".", "root", ",", "self", ".", "_get_target_folder", "(", ")", ")", "\n", "self", ".", "_alphabets", "=", "list_dir", "(", "self", ".", "target_folder", ")", "\n", "self", ".", "_characters", "=", "sum", "(", "[", "[", "join", "(", "a", ",", "c", ")", "for", "c", "in", "list_dir", "(", "join", "(", "self", ".", "target_folder", ",", "a", ")", ")", "]", "\n", "for", "a", "in", "self", ".", "_alphabets", "]", ",", "[", "]", ")", "\n", "self", ".", "_character_images", "=", "[", "[", "(", "image", ",", "idx", ")", "for", "image", "in", "list_files", "(", "join", "(", "self", ".", "target_folder", ",", "character", ")", ",", "'.png'", ")", "]", "\n", "for", "idx", ",", "character", "in", "enumerate", "(", "self", ".", "_characters", ")", "]", "\n", "self", ".", "_flat_character_images", "=", "sum", "(", "self", ".", "_character_images", ",", "[", "]", ")", "\n", "self", ".", "data", "=", "[", "x", "[", "0", "]", "for", "x", "in", "self", ".", "_flat_character_images", "]", "\n", "self", ".", "targets", "=", "[", "x", "[", "1", "]", "for", "x", "in", "self", ".", "_flat_character_images", "]", "\n", "self", ".", "data2", "=", "[", "]", "\n", "self", ".", "targets2", "=", "[", "]", "\n", "self", ".", "new_flat", "=", "[", "]", "\n", "for", "a", "in", "range", "(", "int", "(", "len", "(", "self", ".", "targets", ")", "/", "20", ")", ")", ":", "\n", "            ", "start", "=", "a", "*", "20", "\n", "if", "train", ":", "\n", "                ", "for", "b", "in", "range", "(", "start", ",", "start", "+", "15", ")", ":", "\n", "                    ", "self", ".", "data2", ".", "append", "(", "self", ".", "data", "[", "b", "]", ")", "\n", "self", ".", "targets2", ".", "append", "(", "self", ".", "targets", "[", "b", "]", ")", "\n", "self", ".", "new_flat", ".", "append", "(", "self", ".", "_flat_character_images", "[", "b", "]", ")", "\n", "# print(self.targets[start+b])", "\n", "", "", "else", ":", "\n", "                ", "for", "b", "in", "range", "(", "start", "+", "15", ",", "start", "+", "20", ")", ":", "#(start + 15, start + 20):", "\n", "                    ", "self", ".", "data2", ".", "append", "(", "self", ".", "data", "[", "b", "]", ")", "\n", "self", ".", "targets2", ".", "append", "(", "self", ".", "targets", "[", "b", "]", ")", "\n", "self", ".", "new_flat", ".", "append", "(", "self", ".", "_flat_character_images", "[", "b", "]", ")", "\n", "\n", "", "", "", "if", "all", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "self", ".", "_flat_character_images", "=", "self", ".", "new_flat", "\n", "self", ".", "targets", "=", "self", ".", "targets2", "\n", "print", "(", "self", ".", "targets", "[", "0", ":", "30", "]", ")", "\n", "self", ".", "data", "=", "self", ".", "data2", "\n", "\n", "", "print", "(", "\"Total classes = \"", ",", "np", ".", "max", "(", "self", ".", "targets", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.omniglot.Omniglot.__len__": [[88, 90], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.omniglot.Omniglot.__getitem__": [[91, 120], ["os.path.join", "PIL.Image.open().convert", "omniglot.Omniglot.resize", "numpy.array", "torchvision.Normalize", "torchvision.Compose", "omniglot.Omniglot.target_transform", "omniglot.Omniglot.transform", "PIL.Image.open", "torchvision.ToTensor"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n        Returns:\n            tuple: (image, target) where target is index of the target character class.\n        \"\"\"", "\n", "image_name", "=", "self", ".", "data", "[", "index", "]", "\n", "character_class", "=", "self", ".", "targets", "[", "index", "]", "\n", "image_path", "=", "join", "(", "self", ".", "target_folder", ",", "self", ".", "_characters", "[", "character_class", "]", ",", "image_name", ")", "\n", "\n", "if", "image_path", "not", "in", "self", ".", "images_cached", ":", "\n", "\n", "            ", "image", "=", "Image", ".", "open", "(", "image_path", ",", "mode", "=", "'r'", ")", ".", "convert", "(", "'RGB'", ")", "#L", "\n", "image", "=", "image", ".", "resize", "(", "(", "28", ",", "28", ")", ",", "resample", "=", "Image", ".", "LANCZOS", ")", "\n", "image", "=", "np", ".", "array", "(", "image", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.92206", "*", "256", ",", "0.92206", "*", "256", ",", "0.92206", "*", "256", "]", ",", "std", "=", "[", "0.08426", "*", "256", "*", "256", ",", "0.08426", "*", "256", "*", "256", ",", "0.08426", "*", "256", "*", "256", "]", ")", "# adjust means and std of input data ", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "normalize", "]", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "                ", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "\n", "", "self", ".", "images_cached", "[", "image_path", "]", "=", "image", "\n", "", "else", ":", "\n", "            ", "image", "=", "self", ".", "images_cached", "[", "image_path", "]", "\n", "\n", "", "if", "self", ".", "target_transform", ":", "\n", "            ", "character_class", "=", "self", ".", "target_transform", "(", "character_class", ")", "\n", "\n", "", "return", "image", ",", "character_class", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.omniglot.Omniglot._cache_data": [[121, 123], ["None"], "methods", ["None"], ["", "def", "_cache_data", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.omniglot.Omniglot._check_integrity": [[124, 129], ["omniglot.Omniglot._get_target_folder", "utils.check_integrity", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.omniglot.Omniglot._get_target_folder", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.utils.check_integrity"], ["", "def", "_check_integrity", "(", "self", ")", ":", "\n", "        ", "zip_filename", "=", "self", ".", "_get_target_folder", "(", ")", "\n", "if", "not", "check_integrity", "(", "join", "(", "self", ".", "root", ",", "zip_filename", "+", "'.zip'", ")", ",", "self", ".", "zips_md5", "[", "zip_filename", "]", ")", ":", "\n", "            ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.omniglot.Omniglot.download": [[130, 144], ["omniglot.Omniglot._check_integrity", "omniglot.Omniglot._get_target_folder", "utils.download_url", "print", "print", "zipfile.ZipFile", "zip_file.extractall", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.omniglot.Omniglot._check_integrity", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.omniglot.Omniglot._get_target_folder", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.utils.download_url"], ["", "def", "download", "(", "self", ")", ":", "\n", "        ", "import", "zipfile", "\n", "\n", "if", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "print", "(", "'Files already downloaded and verified'", ")", "\n", "return", "\n", "\n", "", "filename", "=", "self", ".", "_get_target_folder", "(", ")", "\n", "zip_filename", "=", "filename", "+", "'.zip'", "\n", "url", "=", "self", ".", "download_url_prefix", "+", "'/'", "+", "zip_filename", "\n", "download_url", "(", "url", ",", "self", ".", "root", ",", "zip_filename", ",", "self", ".", "zips_md5", "[", "filename", "]", ")", "\n", "print", "(", "'Extracting downloaded file: '", "+", "join", "(", "self", ".", "root", ",", "zip_filename", ")", ")", "\n", "with", "zipfile", ".", "ZipFile", "(", "join", "(", "self", ".", "root", ",", "zip_filename", ")", ",", "'r'", ")", "as", "zip_file", ":", "\n", "            ", "zip_file", ".", "extractall", "(", "self", ".", "root", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.omniglot.Omniglot._get_target_folder": [[145, 147], ["None"], "methods", ["None"], ["", "", "def", "_get_target_folder", "(", "self", ")", ":", "\n", "        ", "return", "'images_background'", "if", "self", ".", "background", "else", "'images_evaluation'", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.utils.gen_bar_updater": [[9, 19], ["torch.utils.model_zoo.tqdm", "torch.utils.model_zoo.tqdm.update"], "function", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.ProgressBar.update"], ["#   or in the \"license\" file accompanying this file. This file is distributed", "\n", "#   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either", "\n", "#   express or implied. See the License for the specific language governing", "\n", "#   permissions and limitations under the License.", "\n", "# ==============================================================================", "\n", "\n", "import", "os", "\n", "import", "sys", "\n", "import", "torch", "\n", "import", "logging", "\n", "import", "datetime", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.utils.check_integrity": [[21, 35], ["hashlib.md5", "hashlib.md5.hexdigest", "os.path.isfile", "os.path.isfile", "open", "iter", "hashlib.md5.update", "f.read"], "function", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.ProgressBar.update"], ["import", "numpy", "as", "np", "\n", "from", "collections", "import", "OrderedDict", "\n", "import", "random", "as", "pyrandom", "\n", "\n", "\n", "def", "set_random_seed", "(", "seed", "=", "3", ")", ":", "\n", "    ", "pyrandom", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "\n", "\n", "", "def", "to_device", "(", "input", ",", "device", ")", ":", "\n", "    ", "if", "torch", ".", "is_tensor", "(", "input", ")", ":", "\n", "        ", "return", "input", ".", "to", "(", "device", "=", "device", ")", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.utils.makedir_exist_ok": [[37, 48], ["os.makedirs", "os.makedirs"], "function", ["None"], ["        ", "return", "input", "\n", "", "elif", "isinstance", "(", "input", ",", "collections", ".", "Mapping", ")", ":", "\n", "        ", "return", "{", "k", ":", "to_device", "(", "sample", ",", "device", "=", "device", ")", "for", "k", ",", "sample", "in", "input", ".", "items", "(", ")", "}", "\n", "", "elif", "isinstance", "(", "input", ",", "collections", ".", "Sequence", ")", ":", "\n", "        ", "return", "[", "to_device", "(", "sample", ",", "device", "=", "device", ")", "for", "sample", "in", "input", "]", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\"Input must contain tensor, dict or list, found {type(input)}\"", ")", "\n", "\n", "\n", "", "", "def", "fast_hist", "(", "label_pred", ",", "label_true", ",", "n_class", ")", ":", "\n", "    ", "mask", "=", "(", "label_true", ">=", "0", ")", "&", "(", "label_true", "<", "n_class", ")", "\n", "return", "np", ".", "bincount", "(", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.utils.download_url": [[50, 85], ["os.path.expanduser", "os.path.expanduser", "os.path.join", "os.path.join", "utils.makedir_exist_ok", "os.path.basename", "os.path.basename", "os.path.isfile", "os.path.isfile", "utils.check_integrity", "print", "print", "urllib.request.urlretrieve", "utils.gen_bar_updater", "url.replace.replace", "print", "urllib.request.urlretrieve", "utils.gen_bar_updater"], "function", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.utils.makedir_exist_ok", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.utils.check_integrity", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.utils.gen_bar_updater", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.utils.gen_bar_updater"], ["minlength", "=", "n_class", "**", "2", ")", ".", "reshape", "(", "n_class", ",", "n_class", ")", "\n", "\n", "\n", "", "def", "convert_state_dict", "(", "state_dict", ")", ":", "\n", "    ", "\"\"\"\n    Converts a state dict saved from a dataParallel module to normal\n    module state_dict inplace\n\n    :param dict state_dict: is the loaded DataParallel model_state\n    \"\"\"", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "name", "=", "k", "[", "7", ":", "]", "# remove `module.`", "\n", "new_state_dict", "[", "name", "]", "=", "v", "\n", "", "return", "new_state_dict", "\n", "\n", "\n", "", "def", "get_logger", "(", "logdir", ",", "name", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "\"%(asctime)s %(levelname)s %(message)s\"", ")", "\n", "\n", "ts", "=", "str", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", ".", "split", "(", "\".\"", ")", "[", "0", "]", ".", "replace", "(", "\" \"", ",", "\"_\"", ")", "\n", "ts", "=", "ts", ".", "replace", "(", "\":\"", ",", "\"_\"", ")", ".", "replace", "(", "\"-\"", ",", "\"_\"", ")", "\n", "file_path", "=", "os", ".", "path", ".", "join", "(", "logdir", ",", "\"run_{}.log\"", ".", "format", "(", "ts", ")", ")", "\n", "file_hdlr", "=", "logging", ".", "FileHandler", "(", "file_path", ")", "\n", "file_hdlr", ".", "setFormatter", "(", "formatter", ")", "\n", "\n", "strm_hdlr", "=", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", "\n", "strm_hdlr", ".", "setFormatter", "(", "formatter", ")", "\n", "\n", "logger", ".", "addHandler", "(", "file_hdlr", ")", "\n", "logger", ".", "addHandler", "(", "strm_hdlr", ")", "\n", "return", "logger", "\n", "", ""]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.utils.list_dir": [[88, 107], ["os.path.expanduser", "os.path.expanduser", "list", "filter", "os.listdir", "os.listdir", "os.path.join", "os.path.join", "os.path.isdir", "os.path.isdir", "os.path.join", "os.path.join"], "function", ["None"], []], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.utils.list_files": [[109, 130], ["os.path.expanduser", "os.path.expanduser", "list", "filter", "os.listdir", "os.listdir", "os.path.join", "os.path.join", "os.path.isfile", "os.path.isfile", "p.endswith", "os.path.join", "os.path.join"], "function", ["None"], []], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.utils.download_file_from_google_drive": [[132, 164], ["os.path.expanduser", "os.path.expanduser", "os.path.join", "os.path.join", "utils.makedir_exist_ok", "os.path.isfile", "os.path.isfile", "utils.check_integrity", "print", "requests.Session", "requests.Session.get", "utils._get_confirm_token", "utils._save_response_content", "requests.Session.get"], "function", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.utils.makedir_exist_ok", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.utils.check_integrity", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleImagenet.get", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.utils._get_confirm_token", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.utils._save_response_content", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.task_sampler.SampleImagenet.get"], []], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.utils._get_confirm_token": [[166, 172], ["response.cookies.items", "key.startswith"], "function", ["None"], []], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.datasets.utils._save_response_content": [[174, 184], ["open", "torch.utils.model_zoo.tqdm", "response.iter_content", "torch.utils.model_zoo.tqdm.close", "f.write", "len", "torch.utils.model_zoo.tqdm.update"], "function", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.utils.utils.ProgressBar.update"], []], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.meta_learner.MetaLearingClassification.__init__": [[19, 34], ["torch.nn.Module.__init__", "model.Learner", "torch.optim.Adam", "meta_learner.MetaLearingClassification.net.parameters"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.experiment.experiment.experiment.__init__", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.parameters"], ["def", "__init__", "(", "self", ",", "args", ",", "config", ",", "treatment", ")", ":", "\n", "\n", "        ", "super", "(", "MetaLearingClassification", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "update_lr", "=", "args", ".", "update_lr", "\n", "self", ".", "meta_lr", "=", "args", ".", "meta_lr", "\n", "self", ".", "update_step", "=", "args", ".", "update_step", "\n", "self", ".", "treatment", "=", "treatment", "\n", "\n", "self", ".", "net", "=", "Learner", ".", "Learner", "(", "config", ",", "treatment", ")", "\n", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "net", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "meta_lr", ")", "\n", "self", ".", "meta_iteration", "=", "0", "\n", "self", ".", "inputNM", "=", "True", "\n", "self", ".", "nodeNM", "=", "False", "\n", "self", ".", "layers_to_fix", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.meta_learner.MetaLearingClassification.reset_classifer": [[35, 42], ["torch.nn.init.normal_", "weight[].unsqueeze", "meta_learner.MetaLearingClassification.net.parameters", "meta_learner.MetaLearingClassification.net.parameters"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.parameters", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.parameters"], ["", "def", "reset_classifer", "(", "self", ",", "class_to_reset", ")", ":", "\n", "        ", "if", "self", ".", "treatment", "==", "'OML'", ":", "\n", "            ", "weight", "=", "self", ".", "net", ".", "parameters", "(", ")", "[", "14", "]", "\n", "", "else", ":", "\n", "            ", "weight", "=", "self", ".", "net", ".", "parameters", "(", ")", "[", "26", "]", "\n", "#torch.nn.init.kaiming_normal_(weight[class_to_reset].unsqueeze(0))", "\n", "", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "weight", "[", "class_to_reset", "]", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.meta_learner.MetaLearingClassification.inner_update": [[43, 60], ["meta_learner.MetaLearingClassification.net", "torch.nn.functional.cross_entropy", "torch.autograd.grad", "isinstance", "zip", "meta_learner.MetaLearingClassification.net.parameters", "list", "list", "meta_learner.MetaLearingClassification.net.parameters", "map", "map", "zip", "zip"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.parameters", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.parameters"], ["", "def", "inner_update", "(", "self", ",", "x", ",", "fast_weights", ",", "y", ",", "bn_training", ")", ":", "\n", "        ", "logits", "=", "self", ".", "net", "(", "x", ",", "fast_weights", ",", "bn_training", "=", "bn_training", ",", "meta_train", "=", "True", ",", "iterations", "=", "1", ")", "\n", "\n", "if", "fast_weights", "is", "None", ":", "\n", "            ", "fast_weights", "=", "self", ".", "net", ".", "parameters", "(", ")", "\n", "\n", "", "loss", "=", "F", ".", "cross_entropy", "(", "logits", ",", "y", ")", "\n", "grad", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "fast_weights", ",", "allow_unused", "=", "True", ")", "\n", "\n", "if", "isinstance", "(", "self", ".", "update_lr", ",", "list", ")", ":", "\n", "            ", "fast_weights", "=", "list", "(", "map", "(", "lambda", "p", ":", "p", "[", "1", "]", "-", "p", "[", "2", "]", "*", "p", "[", "0", "]", "if", "p", "[", "1", "]", ".", "learn", "and", "p", "[", "0", "]", "is", "not", "None", "else", "p", "[", "1", "]", ",", "zip", "(", "grad", ",", "fast_weights", ",", "self", ".", "update_lr", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "fast_weights", "=", "list", "(", "map", "(", "lambda", "p", ":", "p", "[", "1", "]", "-", "self", ".", "update_lr", "*", "p", "[", "0", "]", "if", "p", "[", "1", "]", ".", "learn", "and", "p", "[", "0", "]", "is", "not", "None", "else", "p", "[", "1", "]", ",", "zip", "(", "grad", ",", "fast_weights", ")", ")", ")", "\n", "\n", "", "for", "params_old", ",", "params_new", "in", "zip", "(", "self", ".", "net", ".", "parameters", "(", ")", ",", "fast_weights", ")", ":", "\n", "            ", "params_new", ".", "learn", "=", "params_old", ".", "learn", "\n", "", "return", "fast_weights", ",", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.meta_learner.MetaLearingClassification.meta_loss": [[61, 65], ["meta_learner.MetaLearingClassification.net", "torch.nn.functional.cross_entropy"], "methods", ["None"], ["", "def", "meta_loss", "(", "self", ",", "x", ",", "fast_weights", ",", "y", ",", "bn_training", ")", ":", "\n", "        ", "logits", "=", "self", ".", "net", "(", "x", ",", "fast_weights", ",", "bn_training", "=", "bn_training", ",", "meta_train", "=", "True", ",", "iterations", "=", "1", ")", "\n", "loss_q", "=", "F", ".", "cross_entropy", "(", "logits", ",", "y", ")", "\n", "return", "loss_q", ",", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.meta_learner.MetaLearingClassification.eval_accuracy": [[66, 70], ["torch.nn.functional.softmax().argmax", "torch.eq().sum().item", "torch.nn.functional.softmax", "torch.eq().sum", "torch.eq"], "methods", ["None"], ["", "def", "eval_accuracy", "(", "self", ",", "logits", ",", "y", ")", ":", "\n", "        ", "pred_q", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "correct", "=", "torch", ".", "eq", "(", "pred_q", ",", "y", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "return", "correct", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.meta_learner.MetaLearingClassification.forward": [[71, 135], ["iter().next", "meta_learner.MetaLearingClassification.meta_loss", "meta_learner.MetaLearingClassification.net.zero_grad", "meta_learner.MetaLearingClassification.optimizer.step", "len", "enumerate", "enumerate", "torch.cat.cuda", "torch.cat.cuda", "torch.no_grad", "torch.nn.functional.softmax().argmax", "logits.argmax", "torch.eq().sum().item", "list", "torch.autograd.grad", "range", "meta_loss.backward", "meta_learner.MetaLearingClassification.inner_update", "torch.nn.functional.softmax().argmax", "logits.argmax", "iter", "range", "meta_learner.MetaLearingClassification.net.parameters", "len", "data.cuda", "targets.cuda", "torch.cat", "torch.cat", "torch.nn.functional.softmax", "torch.eq().sum", "meta_learner.MetaLearingClassification.net.parameters", "torch.nn.functional.softmax", "torch.eq", "meta_learner.MetaLearingClassification.net.parameters", "meta_learner.MetaLearingClassification.net.parameters"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.meta_learner.MetaLearingClassification.meta_loss", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.zero_grad", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.aim.blocked_grad.backward", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.meta_learner.MetaLearingClassification.inner_update", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.parameters", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.parameters", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.parameters", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.parameters"], ["", "def", "forward", "(", "self", ",", "d_traj_iterators", ",", "d_rand_iterator", ")", ":", "\n", "        ", "\"\"\"\n        :param x_traj:   Input data of sampled trajectory\n        :param y_traj:   Ground truth of the sampled trajectory\n        :param x_rand:   Input data of the random batch of data\n        :param y_rand:   Ground truth of the random batch of data\n        :return:\n        \"\"\"", "\n", "for", "it", "in", "d_traj_iterators", ":", "\n", "            ", "i", "=", "0", "\n", "for", "batch_idx", ",", "(", "data", ",", "targets", ")", "in", "enumerate", "(", "it", ")", ":", "\n", "                ", "data", ",", "targets", "=", "data", ".", "cuda", "(", ")", ",", "targets", ".", "cuda", "(", ")", "\n", "fast_weights", ",", "logits", "=", "self", ".", "inner_update", "(", "data", ",", "None", "if", "i", "==", "0", "and", "batch_idx", "==", "0", "else", "fast_weights", ",", "targets", ",", "False", ")", "\n", "i", "+=", "1", "\n", "pred_q", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "pred_q", "=", "logits", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "if", "i", "==", "self", ".", "update_step", ":", "\n", "                    ", "break", "\n", "\n", "", "", "", "x_rand", ",", "y_rand", "=", "iter", "(", "d_rand_iterator", ")", ".", "next", "(", ")", "\n", "for", "it", "in", "d_traj_iterators", ":", "\n", "            ", "i", "=", "0", "\n", "for", "batch_idx", ",", "(", "data", ",", "targets", ")", "in", "enumerate", "(", "it", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "x_rand", "=", "torch", ".", "cat", "(", "[", "x_rand", ",", "data", "]", ",", "dim", "=", "0", ")", "\n", "y_rand", "=", "torch", ".", "cat", "(", "[", "y_rand", ",", "targets", "]", ",", "dim", "=", "0", ")", "\n", "", "except", ":", "\n", "                    ", "x_rand", "=", "data", "\n", "y_rand", "=", "targets", "\n", "", "i", "+=", "1", "\n", "if", "i", "==", "self", ".", "update_step", ":", "\n", "                    ", "break", "\n", "", "", "", "x_rand", ",", "y_rand", "=", "x_rand", ".", "cuda", "(", ")", ",", "y_rand", ".", "cuda", "(", ")", "\n", "meta_loss", ",", "logits", "=", "self", ".", "meta_loss", "(", "x_rand", ",", "fast_weights", ",", "y_rand", ",", "False", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "pred_q", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "pred_q", "=", "logits", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "classification_accuracy", "=", "torch", ".", "eq", "(", "pred_q", ",", "y_rand", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "self", ".", "net", ".", "zero_grad", "(", ")", "\n", "\n", "NM_reset", "=", "False", "\n", "\n", "if", "NM_reset", ":", "\n", "\n", "            ", "layers_to_reset", "=", "list", "(", "range", "(", "14", ",", "28", ")", ")", "\n", "grads", "=", "torch", ".", "autograd", ".", "grad", "(", "meta_loss", ",", "self", ".", "net", ".", "parameters", "(", ")", ")", "\n", "\n", "for", "idx", "in", "range", "(", "len", "(", "self", ".", "net", ".", "parameters", "(", ")", ")", ")", ":", "\n", "                ", "if", "idx", "in", "layers_to_reset", ":", "\n", "                    ", "self", ".", "net", ".", "parameters", "(", ")", "[", "idx", "]", ".", "grad", "=", "None", "\n", "", "else", ":", "\n", "                    ", "self", ".", "net", ".", "parameters", "(", ")", "[", "idx", "]", ".", "grad", "=", "grads", "[", "idx", "]", "\n", "", "", "", "else", ":", "\n", "            ", "meta_loss", ".", "backward", "(", ")", "\n", "\n", "", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "classification_accuracy", "/=", "len", "(", "x_rand", ")", "\n", "\n", "self", ".", "meta_iteration", "+=", "1", "\n", "\n", "return", "classification_accuracy", ",", "meta_loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.aim.blocked_grad.forward": [[13, 17], ["ctx.save_for_backward"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ",", "mask", ")", ":", "\n", "        ", "ctx", ".", "save_for_backward", "(", "x", ",", "mask", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.aim.blocked_grad.backward": [[18, 22], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "x", ",", "mask", "=", "ctx", ".", "saved_tensors", "\n", "return", "grad_output", "*", "mask", ",", "mask", "*", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.aim.AIM.__init__": [[25, 37], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.experiment.experiment.experiment.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "num_units", ",", "topk", ",", "\n", "input_key_size", "=", "64", ",", "input_value_size", "=", "400", ",", "input_query_size", "=", "64", ",", "num_input_heads", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "num_units", "=", "num_units", "\n", "self", ".", "key_size", "=", "input_key_size", "\n", "self", ".", "topk", "=", "topk", "\n", "self", ".", "num_input_heads", "=", "num_input_heads", "\n", "self", ".", "input_key_size", "=", "input_key_size", "\n", "self", ".", "input_query_size", "=", "input_query_size", "\n", "self", ".", "input_value_size", "=", "input_value_size", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.aim.AIM.create_parameters": [[38, 53], ["torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "math.sqrt", "math.sqrt", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "math.sqrt", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["None"], ["", "def", "create_parameters", "(", "self", ")", ":", "\n", "        ", "hs", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "num_units", ",", "self", ".", "hidden_size", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "True", ")", "\n", "hs_weight", "=", "nn", ".", "Parameter", "(", "math", ".", "sqrt", "(", "2.", "/", "self", ".", "input_size", ")", "*", "torch", ".", "randn", "(", "self", ".", "num_units", ",", "self", ".", "input_size", ",", "self", ".", "input_value_size", ")", ")", "\n", "query_weight", "=", "nn", ".", "Parameter", "(", "math", ".", "sqrt", "(", "2.", "/", "self", ".", "hidden_size", ")", "*", "torch", ".", "randn", "(", "self", ".", "num_units", ",", "self", ".", "hidden_size", ",", "self", ".", "input_query_size", "*", "self", ".", "num_input_heads", ")", ")", "\n", "key_weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "num_input_heads", "*", "self", ".", "input_key_size", ",", "self", ".", "input_size", ")", ")", "\n", "key_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "num_input_heads", "*", "self", ".", "input_key_size", ")", ")", "\n", "#value_weight = nn.Parameter(torch.randn(self.num_input_heads * self.input_value_size, self.input_size))", "\n", "#value_bias = nn.Parameter(torch.randn(self.num_input_heads * self.input_value_size))", "\n", "\n", "nn", ".", "init", ".", "normal_", "(", "key_weight", ",", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "self", ".", "input_size", ")", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "key_bias", ")", "\n", "#nn.init.kaiming_normal_(value_weight)", "\n", "#nn.init.uniform_(value_bias, -1 / math.sqrt(self.input_size), 1 / math.sqrt(self.input_size))", "\n", "\n", "return", "[", "hs", ",", "hs_weight", ",", "query_weight", ",", "key_weight", ",", "key_bias", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.aim.AIM.grouplinearlayer": [[54, 58], ["torch.bmm.permute", "torch.bmm.permute", "torch.bmm.permute", "torch.bmm.permute", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm.permute", "torch.bmm.permute", "torch.bmm.permute", "torch.bmm.permute"], "methods", ["None"], ["", "def", "grouplinearlayer", "(", "self", ",", "input", ",", "weight", ")", ":", "\n", "        ", "input", "=", "input", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "input", "=", "torch", ".", "bmm", "(", "input", ",", "weight", ")", "\n", "return", "input", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.aim.AIM.transpose_for_scores": [[59, 63], ["x.view.view.view", "x.view.view.permute", "x.view.view.size"], "methods", ["None"], ["", "def", "transpose_for_scores", "(", "self", ",", "x", ",", "num_attention_heads", ",", "attention_head_size", ")", ":", "\n", "        ", "new_x_shape", "=", "x", ".", "size", "(", ")", "[", ":", "-", "1", "]", "+", "(", "num_attention_heads", ",", "attention_head_size", ")", "\n", "x", "=", "x", ".", "view", "(", "*", "new_x_shape", ")", "\n", "return", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.aim.AIM.aim_forward_w_null": [[64, 112], ["torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.zeros().float().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "aim.AIM.grouplinearlayer", "aim.AIM.grouplinearlayer", "hs_value_layer.reshape().permute.reshape().permute.reshape().permute", "aim.AIM.transpose_for_scores", "aim.AIM.transpose_for_scores", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "numpy.arange", "numpy.repeat", "hs.unsqueeze", "torch.cat.unsqueeze().repeat().reshape", "torch.cat.unsqueeze().repeat().reshape", "torch.cat.unsqueeze().repeat().reshape", "torch.cat.unsqueeze().repeat().reshape", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "math.sqrt", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum.sum", "torch.einsum.sum", "torch.einsum.sum", "torch.einsum.sum", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "hs_value_layer.reshape().permute.reshape().permute.reshape", "aim.AIM.transpose", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "attention_scores[].reshape", "hs_value_layer[].reshape", "torch.mean.reshape", "torch.mean.reshape", "torch.mean.reshape", "torch.mean.reshape", "hs_value_layer.reshape().permute.reshape().permute.reshape", "torch.cat.unsqueeze().repeat", "torch.cat.unsqueeze().repeat", "torch.cat.unsqueeze().repeat", "torch.cat.unsqueeze().repeat", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "hs_value_layer.reshape().permute.reshape().permute.size", "hs_value_layer.reshape().permute.reshape().permute.size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.topk.view", "torch.topk.view", "torch.topk.view", "torch.topk.view", "torch.topk.indices.view", "torch.topk.indices.view", "torch.topk.indices.view", "torch.topk.indices.view", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.zeros().cuda.to", "torch.zeros().cuda.to", "torch.zeros().cuda.to", "torch.zeros().cuda.to", "torch.zeros().cuda.to", "torch.zeros().cuda.to", "torch.zeros().cuda.to", "torch.zeros().cuda.to"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.aim.AIM.grouplinearlayer", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.aim.AIM.grouplinearlayer", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.aim.AIM.transpose_for_scores", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.aim.AIM.transpose_for_scores"], ["", "def", "aim_forward_w_null", "(", "self", ",", "input", ",", "hs", ",", "hs_weight", ",", "query_weight", ",", "key_weight", ",", "key_bias", ",", "stochastic", "=", "None", ",", "mech_choice", "=", "None", ",", "threshold", "=", "True", ")", ":", "\n", "        ", "input", "=", "input", ".", "unsqueeze", "(", "1", ")", "\n", "size", "=", "input", ".", "size", "(", ")", "\n", "null_input", "=", "torch", ".", "zeros", "(", "size", "[", "0", "]", ",", "1", ",", "size", "[", "2", "]", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "input", "=", "torch", ".", "cat", "(", "(", "input", ",", "null_input", ")", ",", "dim", "=", "1", ")", "\n", "key_layer", "=", "F", ".", "linear", "(", "input", ",", "key_weight", ",", "key_bias", ")", "\n", "query_layer", "=", "self", ".", "grouplinearlayer", "(", "hs", ".", "unsqueeze", "(", "0", ")", ",", "query_weight", ")", "\n", "\n", "hs_value_layer", "=", "self", ".", "grouplinearlayer", "(", "input", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "self", ".", "num_units", ",", "1", ")", ".", "reshape", "(", "size", "[", "0", "]", "*", "2", ",", "self", ".", "num_units", ",", "size", "[", "-", "1", "]", ")", ",", "hs_weight", ")", "# B*2 X num units X inval dim", "\n", "hs_value_layer", "=", "hs_value_layer", ".", "reshape", "(", "size", "[", "0", "]", ",", "2", ",", "self", ".", "num_units", ",", "self", ".", "input_value_size", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "# B X num units X 2 X inval dim", "\n", "\n", "key_layer", "=", "self", ".", "transpose_for_scores", "(", "key_layer", ",", "self", ".", "num_input_heads", ",", "self", ".", "input_key_size", ")", "\n", "query_layer", "=", "self", ".", "transpose_for_scores", "(", "query_layer", ",", "self", ".", "num_input_heads", ",", "self", ".", "input_query_size", ")", "\n", "#key_layer = F.normalize(key_layer, p=2, dim=-1, eps=1e-12)", "\n", "#query_layer = F.normalize(query_layer, p=2, dim=-1, eps=1e-12)", "\n", "\n", "attention_scores", "=", "torch", ".", "matmul", "(", "query_layer", ",", "key_layer", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", "/", "math", ".", "sqrt", "(", "self", ".", "input_key_size", ")", "\n", "attention_scores", "=", "torch", ".", "mean", "(", "attention_scores", ",", "dim", "=", "1", ")", "\n", "mask_", "=", "torch", ".", "zeros", "(", "size", "[", "0", "]", ",", "self", ".", "num_units", ")", ".", "cuda", "(", ")", "\n", "\n", "attention_scores", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "(", "attention_scores", ")", "\n", "#attention_scores = nn.Sigmoid()(attention_scores)", "\n", "not_null_scores", "=", "attention_scores", "[", ":", ",", ":", ",", "0", "]", "\n", "\n", "# hard threshold", "\n", "if", "stochastic", "is", "None", ":", "\n", "            ", "topk1", "=", "torch", ".", "topk", "(", "not_null_scores", ",", "self", ".", "topk", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "topk1", "=", "torch", ".", "topk", "(", "not_null_scores", ",", "mech_choice", ",", "dim", "=", "1", ")", ".", "indices", "[", ":", ",", "stochastic", "]", "\n", "", "row_index", "=", "np", ".", "arange", "(", "size", "[", "0", "]", ")", "\n", "row_index", "=", "np", ".", "repeat", "(", "row_index", ",", "self", ".", "topk", ")", "\n", "if", "stochastic", ":", "\n", "            ", "mask_", "[", "row_index", ",", "topk1", ".", "view", "(", "-", "1", ")", "]", "=", "1", "\n", "", "else", ":", "\n", "            ", "mask_", "[", "row_index", ",", "topk1", ".", "indices", ".", "view", "(", "-", "1", ")", "]", "=", "1", "\n", "", "if", "threshold", ":", "\n", "            ", "hs_value", "=", "torch", ".", "einsum", "(", "'ijk,ijkl->ijl'", ",", "\n", "attention_scores", "[", "mask_", ".", "to", "(", "torch", ".", "bool", ")", "]", ".", "reshape", "(", "size", "[", "0", "]", ",", "-", "1", ",", "2", ")", ",", "\n", "hs_value_layer", "[", "mask_", ".", "to", "(", "torch", ".", "bool", ")", "]", ".", "reshape", "(", "size", "[", "0", "]", ",", "-", "1", ",", "2", ",", "hs_value_layer", ".", "size", "(", "3", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "hs_value", "=", "torch", ".", "einsum", "(", "'ijk,ijkl->ijl'", ",", "\n", "attention_scores", ".", "reshape", "(", "size", "[", "0", "]", ",", "-", "1", ",", "2", ")", ",", "\n", "hs_value_layer", ".", "reshape", "(", "size", "[", "0", "]", ",", "-", "1", ",", "2", ",", "hs_value_layer", ".", "size", "(", "3", ")", ")", ")", "\n", "\n", "#hs_value = hs_value.sum(dim=1)", "\n", "#hs_value = F.normalize(hs_value, p=2, dim=hs_value.dim() - 1, eps=1e-12)", "\n", "#return hs_value, mask_, not_null_scores, attention_scores", "\n", "", "return", "hs_value", ".", "sum", "(", "dim", "=", "1", ")", ",", "attention_scores", ",", "mask_", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.aim.AIM.aim_forward": [[113, 164], ["input.unsqueeze.unsqueeze.unsqueeze", "input.unsqueeze.unsqueeze.size", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "aim.AIM.grouplinearlayer", "aim.AIM.grouplinearlayer", "hs_value_layer.reshape().permute.reshape().permute.reshape().permute", "aim.AIM.transpose_for_scores", "aim.AIM.transpose_for_scores", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "numpy.arange", "numpy.repeat", "hs.unsqueeze", "input.unsqueeze.unsqueeze.unsqueeze().repeat().reshape", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "math.sqrt", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum.sum", "torch.einsum.sum", "torch.einsum.sum", "torch.einsum.sum", "hs_value_layer.reshape().permute.reshape().permute.reshape", "aim.AIM.transpose", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "attention_scores[].reshape", "hs_value_layer[].reshape", "torch.mean.reshape", "torch.mean.reshape", "torch.mean.reshape", "torch.mean.reshape", "hs_value_layer.reshape().permute.reshape().permute.reshape", "input.unsqueeze.unsqueeze.unsqueeze().repeat", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "hs_value_layer.reshape().permute.reshape().permute.size", "hs_value_layer.reshape().permute.reshape().permute.size", "torch.topk.view", "torch.topk.view", "torch.topk.view", "torch.topk.view", "torch.topk.indices.view", "torch.topk.indices.view", "torch.topk.indices.view", "torch.topk.indices.view", "input.unsqueeze.unsqueeze.unsqueeze", "torch.zeros().cuda.to", "torch.zeros().cuda.to", "torch.zeros().cuda.to", "torch.zeros().cuda.to", "torch.zeros().cuda.to", "torch.zeros().cuda.to", "torch.zeros().cuda.to", "torch.zeros().cuda.to"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.aim.AIM.grouplinearlayer", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.aim.AIM.grouplinearlayer", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.aim.AIM.transpose_for_scores", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.aim.AIM.transpose_for_scores"], ["", "def", "aim_forward", "(", "self", ",", "input", ",", "hs", ",", "hs_weight", ",", "query_weight", ",", "key_weight", ",", "key_bias", ",", "stochastic", "=", "None", ",", "mech_choice", "=", "None", ",", "threshold", "=", "True", ")", ":", "\n", "        ", "input", "=", "input", ".", "unsqueeze", "(", "1", ")", "\n", "size", "=", "input", ".", "size", "(", ")", "\n", "key_layer", "=", "F", ".", "linear", "(", "input", ",", "key_weight", ",", "key_bias", ")", "\n", "query_layer", "=", "self", ".", "grouplinearlayer", "(", "hs", ".", "unsqueeze", "(", "0", ")", ",", "query_weight", ")", "\n", "\n", "hs_value_layer", "=", "self", ".", "grouplinearlayer", "(", "input", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "self", ".", "num_units", ",", "1", ")", ".", "reshape", "(", "size", "[", "0", "]", ",", "self", ".", "num_units", ",", "size", "[", "-", "1", "]", ")", ",", "hs_weight", ")", "# B*2 X num units X inval dim", "\n", "hs_value_layer", "=", "hs_value_layer", ".", "reshape", "(", "size", "[", "0", "]", ",", "1", ",", "self", ".", "num_units", ",", "self", ".", "input_value_size", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "# B X num units X 2 X inval dim", "\n", "\n", "key_layer", "=", "self", ".", "transpose_for_scores", "(", "key_layer", ",", "self", ".", "num_input_heads", ",", "self", ".", "input_key_size", ")", "\n", "query_layer", "=", "self", ".", "transpose_for_scores", "(", "query_layer", ",", "self", ".", "num_input_heads", ",", "self", ".", "input_query_size", ")", "\n", "#key_layer = F.normalize(key_layer, p=2, dim=-1, eps=1e-12)", "\n", "#query_layer = F.normalize(query_layer, p=2, dim=-1, eps=1e-12)", "\n", "\n", "attention_scores", "=", "torch", ".", "matmul", "(", "query_layer", ",", "key_layer", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", "/", "math", ".", "sqrt", "(", "self", ".", "input_key_size", ")", "\n", "attention_scores", "=", "torch", ".", "mean", "(", "attention_scores", ",", "dim", "=", "1", ")", "\n", "mask_", "=", "torch", ".", "zeros", "(", "size", "[", "0", "]", ",", "self", ".", "num_units", ")", ".", "cuda", "(", ")", "\n", "\n", "#attention_scores = nn.Softmax(dim = -1)(attention_scores)", "\n", "#attention_scores = nn.Sigmoid()(attention_scores)", "\n", "not_null_scores", "=", "attention_scores", "[", ":", ",", ":", ",", "0", "]", "\n", "\n", "# hard threshold", "\n", "if", "stochastic", "is", "None", ":", "\n", "            ", "topk1", "=", "torch", ".", "topk", "(", "not_null_scores", ",", "self", ".", "topk", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "topk1", "=", "torch", ".", "topk", "(", "not_null_scores", ",", "mech_choice", ",", "dim", "=", "1", ")", ".", "indices", "[", ":", ",", "stochastic", "]", "\n", "", "row_index", "=", "np", ".", "arange", "(", "size", "[", "0", "]", ")", "\n", "row_index", "=", "np", ".", "repeat", "(", "row_index", ",", "self", ".", "topk", ")", "\n", "if", "stochastic", ":", "\n", "            ", "mask_", "[", "row_index", ",", "topk1", ".", "view", "(", "-", "1", ")", "]", "=", "1", "\n", "", "else", ":", "\n", "            ", "mask_", "[", "row_index", ",", "topk1", ".", "indices", ".", "view", "(", "-", "1", ")", "]", "=", "1", "\n", "", "if", "threshold", ":", "\n", "            ", "hs_value", "=", "torch", ".", "einsum", "(", "'ijk,ijkl->ijl'", ",", "\n", "attention_scores", "[", "mask_", ".", "to", "(", "torch", ".", "bool", ")", "]", ".", "reshape", "(", "size", "[", "0", "]", ",", "-", "1", ",", "1", ")", ",", "\n", "hs_value_layer", "[", "mask_", ".", "to", "(", "torch", ".", "bool", ")", "]", ".", "reshape", "(", "size", "[", "0", "]", ",", "-", "1", ",", "1", ",", "hs_value_layer", ".", "size", "(", "3", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "hs_value", "=", "torch", ".", "einsum", "(", "'ijk,ijkl->ijl'", ",", "\n", "attention_scores", ".", "reshape", "(", "size", "[", "0", "]", ",", "-", "1", ",", "1", ")", ",", "\n", "hs_value_layer", ".", "reshape", "(", "size", "[", "0", "]", ",", "-", "1", ",", "1", ",", "hs_value_layer", ".", "size", "(", "3", ")", ")", ")", "\n", "\n", "#hs_value = hs_value.sum(dim=1)", "\n", "#hs_value = F.normalize(hs_value, p=2, dim=hs_value.dim() - 1, eps=1e-12)", "\n", "#return hs_value, mask_, not_null_scores, attention_scores", "\n", "\n", "#grad_mask = torch.ones(size=(self.topk,)).cuda()", "\n", "#grad_mask[:3] = 0", "\n", "#grad_mask.unsqueeze(0).repeat(size[0], 1)", "\n", "#hs_value = blocked_grad.apply(hs_value, grad_mask.unsqueeze(-1))", "\n", "", "return", "hs_value", ".", "sum", "(", "dim", "=", "1", ")", ",", "attention_scores", ",", "topk1", "\n", "", "", ""]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.modelfactory.ModelFactory.__init__": [[2, 4], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.modelfactory.ModelFactory.get_model": [[5, 159], ["print"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_model", "(", "model_type", ",", "dataset", ",", "in_channels", "=", "6", ",", "num_actions", "=", "6", ",", "width", "=", "300", ")", ":", "\n", "        ", "if", "dataset", "==", "\"omniglot\"", ":", "\n", "            ", "nm_channels", "=", "112", "\n", "channels", "=", "256", "\n", "size_of_representation", "=", "2304", "\n", "size_of_interpreter", "=", "1008", "\n", "if", "model_type", "==", "\"ANML+AIM\"", ":", "\n", "                ", "nm_channels", "=", "112", "\n", "channels", "=", "256", "\n", "size_of_representation", "=", "2304", "\n", "size_of_interpreter", "=", "1008", "\n", "return", "[", "\n", "# =============== Separate network neuromodulation =======================", "\n", "(", "'conv1_nm'", ",", "[", "nm_channels", ",", "3", ",", "3", ",", "3", ",", "1", ",", "0", "]", ")", ",", "\n", "(", "'bn1_nm'", ",", "[", "nm_channels", "]", ")", ",", "\n", "(", "'conv2_nm'", ",", "[", "nm_channels", ",", "nm_channels", ",", "3", ",", "3", ",", "1", ",", "0", "]", ")", ",", "\n", "(", "'bn2_nm'", ",", "[", "nm_channels", "]", ")", ",", "\n", "(", "'conv3_nm'", ",", "[", "nm_channels", ",", "nm_channels", ",", "3", ",", "3", ",", "1", ",", "0", "]", ")", ",", "\n", "(", "'bn3_nm'", ",", "[", "nm_channels", "]", ")", ",", "\n", "(", "'nm_to_fc'", ",", "[", "size_of_representation", ",", "size_of_interpreter", "]", ")", ",", "\n", "# =============== Prediction network ===============================", "\n", "(", "'conv1'", ",", "[", "channels", ",", "3", ",", "3", ",", "3", ",", "1", ",", "0", "]", ")", ",", "\n", "(", "'bn1'", ",", "[", "channels", "]", ")", ",", "\n", "(", "'conv2'", ",", "[", "channels", ",", "channels", ",", "3", ",", "3", ",", "1", ",", "0", "]", ")", ",", "\n", "(", "'bn2'", ",", "[", "channels", "]", ")", ",", "\n", "(", "'conv3'", ",", "[", "channels", ",", "channels", ",", "3", ",", "3", ",", "1", ",", "0", "]", ")", ",", "\n", "(", "'bn3'", ",", "[", "channels", "]", ")", ",", "\n", "(", "'fc'", ",", "[", "1000", ",", "size_of_representation", "//", "2", "]", ")", ",", "\n", "(", "'linear'", ",", "[", "size_of_representation", "//", "2", ",", "size_of_representation", "]", ")", ",", "\n", "(", "'aim'", ",", "[", "size_of_representation", "//", "2", ",", "128", ",", "64", ",", "128", ",", "size_of_representation", "//", "2", ",", "128", "]", ")", "\n", "]", "\n", "", "elif", "model_type", "==", "\"OML+AIM\"", ":", "\n", "                ", "return", "[", "\n", "# =============== slow weight =======================", "\n", "(", "'conv1_nm'", ",", "[", "nm_channels", ",", "3", ",", "3", ",", "3", ",", "1", ",", "0", "]", ")", ",", "\n", "(", "'bn1_nm'", ",", "[", "nm_channels", "]", ")", ",", "\n", "(", "'conv2_nm'", ",", "[", "nm_channels", ",", "nm_channels", ",", "3", ",", "3", ",", "1", ",", "0", "]", ")", ",", "\n", "(", "'bn2_nm'", ",", "[", "nm_channels", "]", ")", ",", "\n", "(", "'conv3_nm'", ",", "[", "nm_channels", ",", "nm_channels", ",", "3", ",", "3", ",", "1", ",", "0", "]", ")", ",", "\n", "(", "'bn3_nm'", ",", "[", "nm_channels", "]", ")", ",", "\n", "(", "'conv4_nm'", ",", "[", "nm_channels", ",", "nm_channels", ",", "3", ",", "3", ",", "1", ",", "0", "]", ")", ",", "\n", "(", "'bn4_nm'", ",", "[", "nm_channels", "]", ")", ",", "\n", "(", "'conv5_nm'", ",", "[", "nm_channels", ",", "nm_channels", ",", "3", ",", "3", ",", "1", ",", "0", "]", ")", ",", "\n", "(", "'bn5_nm'", ",", "[", "nm_channels", "]", ")", ",", "\n", "(", "'conv6_nm'", ",", "[", "nm_channels", ",", "nm_channels", ",", "3", ",", "3", ",", "1", ",", "0", "]", ")", ",", "\n", "(", "'bn6_nm'", ",", "[", "nm_channels", "]", ")", ",", "\n", "(", "'nm_to_fc'", ",", "[", "size_of_interpreter", "//", "2", ",", "size_of_interpreter", "]", ")", ",", "\n", "# =============== fast weight =======================", "\n", "(", "'fc'", ",", "[", "1000", ",", "size_of_interpreter", "//", "2", "]", ")", ",", "\n", "(", "'aim'", ",", "[", "size_of_interpreter", "//", "2", ",", "128", ",", "64", ",", "128", ",", "size_of_interpreter", "//", "2", ",", "128", "]", ")", ",", "\n", "# [input_size, hidden_size, num_units, input_key_size, input_value_size, input_query_size]", "\n", "]", "\n", "", "", "elif", "dataset", "==", "\"cifar100\"", ":", "\n", "            ", "nm_channels", "=", "112", "\n", "channels", "=", "256", "\n", "size_of_representation", "=", "1024", "\n", "size_of_interpreter", "=", "1792", "\n", "if", "model_type", "==", "\"ANML+AIM\"", ":", "\n", "                ", "size_of_representation", "=", "4096", "\n", "size_of_interpreter", "=", "1792", "\n", "return", "[", "\n", "# =============== slow weight =======================", "\n", "(", "'conv1_nm'", ",", "[", "nm_channels", ",", "3", ",", "3", ",", "3", ",", "1", ",", "0", "]", ")", ",", "\n", "(", "'bn1_nm'", ",", "[", "nm_channels", "]", ")", ",", "\n", "(", "'conv2_nm'", ",", "[", "nm_channels", ",", "nm_channels", ",", "3", ",", "3", ",", "1", ",", "0", "]", ")", ",", "\n", "(", "'bn2_nm'", ",", "[", "nm_channels", "]", ")", ",", "\n", "(", "'conv3_nm'", ",", "[", "nm_channels", ",", "nm_channels", ",", "3", ",", "3", ",", "1", ",", "0", "]", ")", ",", "\n", "(", "'bn3_nm'", ",", "[", "nm_channels", "]", ")", ",", "\n", "(", "'nm_to_fc'", ",", "[", "size_of_representation", ",", "size_of_interpreter", "]", ")", ",", "\n", "# =============== fast weight =======================", "\n", "(", "'conv1'", ",", "[", "channels", ",", "3", ",", "3", ",", "3", ",", "1", ",", "0", "]", ")", ",", "\n", "(", "'bn1'", ",", "[", "channels", "]", ")", ",", "\n", "(", "'conv2'", ",", "[", "channels", ",", "channels", ",", "3", ",", "3", ",", "1", ",", "0", "]", ")", ",", "\n", "(", "'bn2'", ",", "[", "channels", "]", ")", ",", "\n", "(", "'conv3'", ",", "[", "channels", ",", "channels", ",", "3", ",", "3", ",", "1", ",", "0", "]", ")", ",", "\n", "(", "'bn3'", ",", "[", "channels", "]", ")", ",", "\n", "(", "'fc'", ",", "[", "100", ",", "size_of_representation", "//", "4", "]", ")", ",", "\n", "(", "'linear'", ",", "[", "size_of_representation", "//", "4", ",", "size_of_representation", "]", ")", ",", "\n", "(", "'aim'", ",", "[", "size_of_representation", "//", "4", ",", "128", ",", "64", ",", "128", ",", "size_of_representation", "//", "4", ",", "128", "]", ")", ",", "\n", "]", "\n", "", "elif", "model_type", "==", "\"OML+AIM\"", ":", "\n", "                ", "return", "[", "\n", "# =============== slow weight =======================", "\n", "(", "'conv1_nm'", ",", "[", "nm_channels", ",", "3", ",", "3", ",", "3", ",", "1", ",", "0", "]", ")", ",", "\n", "(", "'bn1_nm'", ",", "[", "nm_channels", "]", ")", ",", "\n", "(", "'conv2_nm'", ",", "[", "nm_channels", ",", "nm_channels", ",", "3", ",", "3", ",", "1", ",", "0", "]", ")", ",", "\n", "(", "'bn2_nm'", ",", "[", "nm_channels", "]", ")", ",", "\n", "(", "'conv3_nm'", ",", "[", "nm_channels", ",", "nm_channels", ",", "3", ",", "3", ",", "1", ",", "0", "]", ")", ",", "\n", "(", "'bn3_nm'", ",", "[", "nm_channels", "]", ")", ",", "\n", "(", "'conv4_nm'", ",", "[", "nm_channels", ",", "nm_channels", ",", "3", ",", "3", ",", "1", ",", "0", "]", ")", ",", "\n", "(", "'bn4_nm'", ",", "[", "nm_channels", "]", ")", ",", "\n", "(", "'conv5_nm'", ",", "[", "nm_channels", ",", "nm_channels", ",", "3", ",", "3", ",", "1", ",", "0", "]", ")", ",", "\n", "(", "'bn5_nm'", ",", "[", "nm_channels", "]", ")", ",", "\n", "(", "'conv6_nm'", ",", "[", "nm_channels", ",", "nm_channels", ",", "3", ",", "3", ",", "1", ",", "0", "]", ")", ",", "\n", "(", "'bn6_nm'", ",", "[", "nm_channels", "]", ")", ",", "\n", "(", "'nm_to_fc'", ",", "[", "size_of_interpreter", "//", "2", ",", "size_of_interpreter", "]", ")", ",", "\n", "# =============== fast weight =======================", "\n", "(", "'fc'", ",", "[", "100", ",", "size_of_interpreter", "//", "2", "]", ")", ",", "\n", "(", "'aim'", ",", "[", "size_of_interpreter", "//", "2", ",", "128", ",", "64", ",", "128", ",", "size_of_interpreter", "//", "2", ",", "128", "]", ")", ",", "\n", "# [input_size, hidden_size, num_units, input_key_size, input_value_size, input_query_size]", "\n", "]", "\n", "", "", "elif", "dataset", "==", "\"imagenet\"", ":", "\n", "            ", "nm_channels", "=", "112", "\n", "channels", "=", "256", "\n", "size_of_representation", "=", "2304", "\n", "size_of_interpreter", "=", "2800", "\n", "if", "model_type", "==", "\"ANML+AIM\"", ":", "\n", "                ", "size_of_representation", "=", "16384", "\n", "size_of_interpreter", "=", "7168", "\n", "return", "[", "\n", "# =============== slow weight =======================", "\n", "(", "'conv1_nm'", ",", "[", "nm_channels", ",", "3", ",", "3", ",", "3", ",", "1", ",", "0", "]", ")", ",", "\n", "(", "'bn1_nm'", ",", "[", "nm_channels", "]", ")", ",", "\n", "(", "'conv2_nm'", ",", "[", "nm_channels", ",", "nm_channels", ",", "3", ",", "3", ",", "1", ",", "0", "]", ")", ",", "\n", "(", "'bn2_nm'", ",", "[", "nm_channels", "]", ")", ",", "\n", "(", "'conv3_nm'", ",", "[", "nm_channels", ",", "nm_channels", ",", "3", ",", "3", ",", "1", ",", "0", "]", ")", ",", "\n", "(", "'bn3_nm'", ",", "[", "nm_channels", "]", ")", ",", "\n", "(", "'nm_to_fc'", ",", "[", "size_of_representation", ",", "size_of_interpreter", "]", ")", ",", "\n", "# =============== fast weight =======================", "\n", "(", "'conv1'", ",", "[", "channels", ",", "3", ",", "3", ",", "3", ",", "1", ",", "0", "]", ")", ",", "\n", "(", "'bn1'", ",", "[", "channels", "]", ")", ",", "\n", "(", "'conv2'", ",", "[", "channels", ",", "channels", ",", "3", ",", "3", ",", "1", ",", "0", "]", ")", ",", "\n", "(", "'bn2'", ",", "[", "channels", "]", ")", ",", "\n", "(", "'conv3'", ",", "[", "channels", ",", "channels", ",", "3", ",", "3", ",", "1", ",", "0", "]", ")", ",", "\n", "(", "'bn3'", ",", "[", "channels", "]", ")", ",", "\n", "(", "'fc'", ",", "[", "84", ",", "size_of_representation", "//", "16", "]", ")", ",", "\n", "(", "'linear'", ",", "[", "size_of_representation", "//", "16", ",", "size_of_representation", "]", ")", ",", "\n", "(", "'aim'", ",", "[", "size_of_representation", "//", "16", ",", "128", ",", "64", ",", "128", ",", "size_of_representation", "//", "16", ",", "128", "]", ")", ",", "\n", "]", "\n", "", "elif", "model_type", "==", "\"OML+AIM\"", ":", "\n", "                ", "return", "[", "\n", "# =============== slow weight =======================", "\n", "(", "'conv1_nm'", ",", "[", "nm_channels", ",", "3", ",", "3", ",", "3", ",", "1", ",", "0", "]", ")", ",", "\n", "(", "'bn1_nm'", ",", "[", "nm_channels", "]", ")", ",", "\n", "(", "'conv2_nm'", ",", "[", "nm_channels", ",", "nm_channels", ",", "3", ",", "3", ",", "1", ",", "0", "]", ")", ",", "\n", "(", "'bn2_nm'", ",", "[", "nm_channels", "]", ")", ",", "\n", "(", "'conv3_nm'", ",", "[", "nm_channels", ",", "nm_channels", ",", "3", ",", "3", ",", "1", ",", "0", "]", ")", ",", "\n", "(", "'bn3_nm'", ",", "[", "nm_channels", "]", ")", ",", "\n", "(", "'conv4_nm'", ",", "[", "nm_channels", ",", "nm_channels", ",", "3", ",", "3", ",", "1", ",", "0", "]", ")", ",", "\n", "(", "'bn4_nm'", ",", "[", "nm_channels", "]", ")", ",", "\n", "(", "'conv5_nm'", ",", "[", "nm_channels", ",", "nm_channels", ",", "3", ",", "3", ",", "1", ",", "0", "]", ")", ",", "\n", "(", "'bn5_nm'", ",", "[", "nm_channels", "]", ")", ",", "\n", "(", "'conv6_nm'", ",", "[", "nm_channels", ",", "nm_channels", ",", "3", ",", "3", ",", "1", ",", "0", "]", ")", ",", "\n", "(", "'bn6_nm'", ",", "[", "nm_channels", "]", ")", ",", "\n", "(", "'nm_to_fc'", ",", "[", "size_of_interpreter", "//", "2", ",", "size_of_interpreter", "]", ")", ",", "\n", "# =============== fast weight =======================", "\n", "(", "'fc'", ",", "[", "84", ",", "size_of_interpreter", "//", "2", "]", ")", ",", "\n", "(", "'aim'", ",", "[", "size_of_interpreter", "//", "2", ",", "128", ",", "32", ",", "128", ",", "size_of_interpreter", "//", "2", ",", "128", "]", ")", ",", "\n", "# [input_size, hidden_size, num_units, input_key_size, input_value_size, input_query_size]", "\n", "]", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "\"Unsupported model; either implement the model in model/ModelFactory or choose a different model\"", ")", "\n", "assert", "(", "False", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.__init__": [[33, 102], ["torch.nn.Module.__init__", "torch.nn.ParameterList", "torch.nn.ParameterList", "enumerate", "torch.nn.Parameter", "torch.nn.init.kaiming_normal_", "learner.Learner.vars.append", "learner.Learner.vars.append", "torch.ones", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.init.kaiming_normal_", "learner.Learner.vars.append", "learner.Learner.vars.append", "torch.zeros", "torch.ones", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.init.kaiming_normal_", "learner.Learner.vars.append", "learner.Learner.vars.append", "torch.zeros", "torch.ones", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.init.kaiming_normal_", "learner.Learner.vars.append", "learner.Learner.vars.append", "torch.zeros", "torch.ones", "torch.nn.Parameter", "aim.AIM", "learner.Learner.vars.extend", "torch.zeros", "learner.Learner.aim.create_parameters", "torch.nn.Parameter", "learner.Learner.vars.append", "learner.Learner.vars.append", "torch.nn.Parameter", "torch.nn.Parameter", "learner.Learner.vars_bn.extend", "torch.ones", "torch.nn.Parameter", "torch.zeros", "torch.ones", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.experiment.experiment.experiment.__init__", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.aim.AIM.create_parameters"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "treatment", ")", ":", "\n", "        ", "\"\"\"\n        :param config: network config file, type:list of (string, list)\n        :param imgc: 1 or 3\n        :param imgsz:  28 or 84\n        \"\"\"", "\n", "super", "(", "Learner", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "treatment", "=", "treatment", "\n", "self", ".", "vars", "=", "nn", ".", "ParameterList", "(", ")", "\n", "self", ".", "vars_bn", "=", "nn", ".", "ParameterList", "(", ")", "\n", "self", ".", "aim", "=", "None", "\n", "for", "i", ",", "(", "name", ",", "param", ")", "in", "enumerate", "(", "self", ".", "config", ")", ":", "\n", "            ", "if", "'conv'", "in", "name", ":", "\n", "# [ch_out, ch_in, kernelsz, kernelsz]", "\n", "                ", "w", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "*", "param", "[", ":", "4", "]", ")", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "w", ")", "\n", "self", ".", "vars", ".", "append", "(", "w", ")", "\n", "# [ch_out]", "\n", "self", ".", "vars", ".", "append", "(", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "param", "[", "0", "]", ")", ")", ")", "\n", "\n", "", "elif", "name", "is", "'convt2d'", ":", "\n", "# [ch_in, ch_out, kernelsz, kernelsz, stride, padding]", "\n", "                ", "w", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "*", "param", "[", ":", "4", "]", ")", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "w", ")", "\n", "self", ".", "vars", ".", "append", "(", "w", ")", "\n", "# [ch_in, ch_out]", "\n", "self", ".", "vars", ".", "append", "(", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "param", "[", "1", "]", ")", ")", ")", "\n", "\n", "", "elif", "'linear'", "in", "name", "or", "'nm_to'", "in", "name", ":", "\n", "# [ch_out, ch_in]", "\n", "                ", "w", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "*", "param", ")", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "w", ")", "\n", "self", ".", "vars", ".", "append", "(", "w", ")", "\n", "# [ch_out]", "\n", "self", ".", "vars", ".", "append", "(", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "param", "[", "0", "]", ")", ")", ")", "\n", "\n", "", "elif", "name", "==", "'fc'", ":", "\n", "                ", "w", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "*", "param", ")", ")", "\n", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "w", ")", "\n", "self", ".", "vars", ".", "append", "(", "w", ")", "\n", "self", ".", "vars", ".", "append", "(", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "param", "[", "0", "]", ")", ")", ")", "\n", "", "elif", "name", "==", "'aim'", ":", "\n", "                ", "self", ".", "aim", "=", "AIM", "(", "param", "[", "0", "]", ",", "param", "[", "1", "]", ",", "param", "[", "2", "]", ",", "TOPK", ",", "param", "[", "3", "]", ",", "param", "[", "4", "]", ",", "param", "[", "5", "]", ",", "1", ")", "\n", "self", ".", "vars", ".", "extend", "(", "self", ".", "aim", ".", "create_parameters", "(", ")", ")", "\n", "", "elif", "name", "is", "'cat'", ":", "\n", "                ", "pass", "\n", "", "elif", "name", "is", "'cat_start'", ":", "\n", "                ", "pass", "\n", "", "elif", "name", "is", "\"rep\"", ":", "\n", "                ", "pass", "\n", "", "elif", "'bn'", "in", "name", ":", "\n", "# [ch_out]", "\n", "                ", "w", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "param", "[", "0", "]", ")", ")", "\n", "self", ".", "vars", ".", "append", "(", "w", ")", "\n", "# [ch_out]", "\n", "self", ".", "vars", ".", "append", "(", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "param", "[", "0", "]", ")", ")", ")", "\n", "\n", "# must set requires_grad=False", "\n", "running_mean", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "param", "[", "0", "]", ")", ",", "requires_grad", "=", "False", ")", "\n", "running_var", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "param", "[", "0", "]", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "vars_bn", ".", "extend", "(", "[", "running_mean", ",", "running_var", "]", ")", "\n", "\n", "", "elif", "name", "in", "[", "'tanh'", ",", "'relu'", ",", "'upsample'", ",", "'avg_pool2d'", ",", "'max_pool2d'", ",", "\n", "'flatten'", ",", "'reshape'", ",", "'leakyrelu'", ",", "'sigmoid'", "]", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.extra_repr": [[103, 142], ["str", "tuple"], "methods", ["None"], ["", "", "", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "info", "=", "''", "\n", "for", "name", ",", "param", "in", "self", ".", "config", ":", "\n", "            ", "if", "name", "is", "'conv2d'", ":", "\n", "                ", "tmp", "=", "'conv2d:(ch_in:%d, ch_out:%d, k:%dx%d, stride:%d, padding:%d)'", "%", "(", "param", "[", "1", "]", ",", "param", "[", "0", "]", ",", "param", "[", "2", "]", ",", "param", "[", "3", "]", ",", "param", "[", "4", "]", ",", "param", "[", "5", "]", ",", ")", "\n", "info", "+=", "tmp", "+", "'\\n'", "\n", "", "elif", "name", "is", "'convt2d'", ":", "\n", "                ", "tmp", "=", "'convTranspose2d:(ch_in:%d, ch_out:%d, k:%dx%d, stride:%d, padding:%d)'", "%", "(", "param", "[", "0", "]", ",", "param", "[", "1", "]", ",", "param", "[", "2", "]", ",", "param", "[", "3", "]", ",", "param", "[", "4", "]", ",", "param", "[", "5", "]", ",", ")", "\n", "info", "+=", "tmp", "+", "'\\n'", "\n", "", "elif", "name", "is", "'linear'", ":", "\n", "                ", "tmp", "=", "'linear:(in:%d, out:%d)'", "%", "(", "param", "[", "1", "]", ",", "param", "[", "0", "]", ")", "\n", "info", "+=", "tmp", "+", "'\\n'", "\n", "", "elif", "name", "is", "'leakyrelu'", ":", "\n", "                ", "tmp", "=", "'leakyrelu:(slope:%f)'", "%", "(", "param", "[", "0", "]", ")", "\n", "info", "+=", "tmp", "+", "'\\n'", "\n", "", "elif", "name", "is", "'cat'", ":", "\n", "                ", "tmp", "=", "'cat'", "\n", "info", "+=", "tmp", "+", "\"\\n\"", "\n", "", "elif", "name", "is", "'cat_start'", ":", "\n", "                ", "tmp", "=", "'cat_start'", "\n", "info", "+=", "tmp", "+", "\"\\n\"", "\n", "", "elif", "name", "is", "'rep'", ":", "\n", "                ", "tmp", "=", "'rep'", "\n", "info", "+=", "tmp", "+", "\"\\n\"", "\n", "", "elif", "name", "is", "'avg_pool2d'", ":", "\n", "                ", "tmp", "=", "'avg_pool2d:(k:%d, stride:%d, padding:%d)'", "%", "(", "param", "[", "0", "]", ",", "param", "[", "1", "]", ",", "param", "[", "2", "]", ")", "\n", "info", "+=", "tmp", "+", "'\\n'", "\n", "", "elif", "name", "is", "'max_pool2d'", ":", "\n", "                ", "tmp", "=", "'max_pool2d:(k:%d, stride:%d, padding:%d)'", "%", "(", "param", "[", "0", "]", ",", "param", "[", "1", "]", ",", "param", "[", "2", "]", ")", "\n", "info", "+=", "tmp", "+", "'\\n'", "\n", "", "elif", "name", "in", "[", "'flatten'", ",", "'tanh'", ",", "'relu'", ",", "'upsample'", ",", "'reshape'", ",", "'sigmoid'", ",", "'use_logits'", ",", "'bn'", "]", ":", "\n", "                ", "tmp", "=", "name", "+", "':'", "+", "str", "(", "tuple", "(", "param", ")", ")", "\n", "info", "+=", "tmp", "+", "'\\n'", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n", "", "", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.forward": [[143, 302], ["x.size", "learner.conv2d", "torch.nn.functional.batch_norm", "torch.nn.functional.relu", "learner.maxpool", "learner.conv2d", "torch.nn.functional.batch_norm", "torch.nn.functional.relu", "learner.maxpool", "learner.conv2d", "torch.nn.functional.batch_norm", "torch.nn.functional.relu", "maxpool.view", "torch.nn.functional.sigmoid().view", "learner.conv2d", "torch.nn.functional.batch_norm", "torch.nn.functional.relu", "learner.maxpool", "learner.conv2d", "torch.nn.functional.batch_norm", "torch.nn.functional.relu", "learner.maxpool", "learner.conv2d", "torch.nn.functional.batch_norm", "torch.nn.functional.relu", "torch.nn.functional.normalize.view", "torch.nn.functional.linear", "torch.nn.functional.linear", "learner.conv2d", "torch.nn.functional.batch_norm", "torch.nn.functional.relu", "learner.conv2d", "torch.nn.functional.batch_norm", "torch.nn.functional.relu", "learner.conv2d", "torch.nn.functional.batch_norm", "torch.nn.functional.relu", "learner.conv2d", "torch.nn.functional.batch_norm", "torch.nn.functional.relu", "learner.conv2d", "torch.nn.functional.batch_norm", "torch.nn.functional.relu", "learner.conv2d", "torch.nn.functional.batch_norm", "torch.nn.functional.relu", "learner.avgpool", "torch.nn.functional.normalize.view", "torch.nn.functional.linear", "x.size", "learner.maxpool", "maxpool.size", "maxpool.size", "learner.maxpool", "torch.nn.functional.normalize.size", "learner.Learner.aim.aim_forward", "torch.nn.functional.normalize", "learner.maxpool", "learner.maxpool", "learner.maxpool", "learner.maxpool", "learner.maxpool", "torch.nn.functional.normalize.size", "torch.nn.functional.normalize.view", "torch.nn.functional.relu", "learner.Learner.aim.aim_forward", "torch.nn.functional.normalize", "x.size", "torch.nn.functional.sigmoid", "numpy.random.default_rng", "numpy.random.default_rng.choice().tolist", "torch.nn.functional.normalize.size", "torch.nn.functional.linear", "numpy.random.default_rng", "numpy.random.default_rng.choice().tolist", "torch.nn.functional.linear", "numpy.random.default_rng.choice", "torch.nn.functional.normalize.dim", "numpy.random.default_rng.choice", "torch.nn.functional.normalize.dim"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.conv2d", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.maxpool", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.conv2d", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.maxpool", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.conv2d", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.conv2d", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.maxpool", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.conv2d", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.maxpool", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.conv2d", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.conv2d", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.conv2d", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.conv2d", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.conv2d", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.conv2d", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.conv2d", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.avgpool", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.maxpool", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.maxpool", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.aim.AIM.aim_forward", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.maxpool", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.maxpool", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.maxpool", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.maxpool", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.maxpool", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.aim.AIM.aim_forward"], ["", "def", "forward", "(", "self", ",", "x", ",", "vars", "=", "None", ",", "bn_training", "=", "True", ",", "meta_train", "=", "False", ",", "iterations", "=", "None", ",", "return_aim", "=", "False", ")", ":", "\n", "        ", "if", "x", ".", "size", "(", "-", "1", ")", "==", "28", ":", "\n", "            ", "dataset", "=", "'omniglot'", "\n", "", "elif", "x", ".", "size", "(", "-", "1", ")", "==", "32", ":", "\n", "            ", "dataset", "=", "'cifar100'", "\n", "", "elif", "x", ".", "size", "(", "-", "1", ")", "==", "84", ":", "\n", "            ", "dataset", "=", "'imagenet'", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "if", "vars", "is", "None", ":", "\n", "            ", "vars", "=", "self", ".", "vars", "\n", "", "if", "self", ".", "treatment", "==", "'ANML+AIM'", ":", "\n", "# =========== NEUROMODULATORY NETWORK ===========", "\n", "            ", "data", "=", "x", "\n", "nm_data", "=", "x", "\n", "w", ",", "b", "=", "vars", "[", "0", "]", ",", "vars", "[", "1", "]", "\n", "nm_data", "=", "conv2d", "(", "nm_data", ",", "w", ",", "b", ",", "1", ")", "\n", "w", ",", "b", "=", "vars", "[", "2", "]", ",", "vars", "[", "3", "]", "\n", "running_mean", ",", "running_var", "=", "self", ".", "vars_bn", "[", "0", "]", ",", "self", ".", "vars_bn", "[", "1", "]", "\n", "nm_data", "=", "F", ".", "batch_norm", "(", "nm_data", ",", "running_mean", ",", "running_var", ",", "weight", "=", "w", ",", "bias", "=", "b", ",", "training", "=", "bn_training", ")", "\n", "nm_data", "=", "F", ".", "relu", "(", "nm_data", ")", "\n", "nm_data", "=", "maxpool", "(", "nm_data", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "w", ",", "b", "=", "vars", "[", "4", "]", ",", "vars", "[", "5", "]", "\n", "nm_data", "=", "conv2d", "(", "nm_data", ",", "w", ",", "b", ",", "1", ")", "\n", "w", ",", "b", "=", "vars", "[", "6", "]", ",", "vars", "[", "7", "]", "\n", "running_mean", ",", "running_var", "=", "self", ".", "vars_bn", "[", "2", "]", ",", "self", ".", "vars_bn", "[", "3", "]", "\n", "nm_data", "=", "F", ".", "batch_norm", "(", "nm_data", ",", "running_mean", ",", "running_var", ",", "weight", "=", "w", ",", "bias", "=", "b", ",", "training", "=", "bn_training", ")", "\n", "nm_data", "=", "F", ".", "relu", "(", "nm_data", ")", "\n", "nm_data", "=", "maxpool", "(", "nm_data", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "w", ",", "b", "=", "vars", "[", "8", "]", ",", "vars", "[", "9", "]", "\n", "nm_data", "=", "conv2d", "(", "nm_data", ",", "w", ",", "b", ",", "1", ")", "\n", "w", ",", "b", "=", "vars", "[", "10", "]", ",", "vars", "[", "11", "]", "\n", "running_mean", ",", "running_var", "=", "self", ".", "vars_bn", "[", "4", "]", ",", "self", ".", "vars_bn", "[", "5", "]", "\n", "nm_data", "=", "F", ".", "batch_norm", "(", "nm_data", ",", "running_mean", ",", "running_var", ",", "weight", "=", "w", ",", "bias", "=", "b", ",", "training", "=", "bn_training", ")", "\n", "nm_data", "=", "F", ".", "relu", "(", "nm_data", ")", "\n", "if", "dataset", "==", "'imagenet'", ":", "\n", "                ", "nm_data", "=", "maxpool", "(", "nm_data", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "", "nm_data", "=", "nm_data", ".", "view", "(", "nm_data", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "w", ",", "b", "=", "vars", "[", "12", "]", ",", "vars", "[", "13", "]", "\n", "fc_mask", "=", "F", ".", "sigmoid", "(", "F", ".", "linear", "(", "nm_data", ",", "w", ",", "b", ")", ")", ".", "view", "(", "nm_data", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "# =========== PREDICTION NETWORK ===========", "\n", "w", ",", "b", "=", "vars", "[", "14", "]", ",", "vars", "[", "15", "]", "\n", "data", "=", "conv2d", "(", "data", ",", "w", ",", "b", ",", "1", ")", "\n", "w", ",", "b", "=", "vars", "[", "16", "]", ",", "vars", "[", "17", "]", "\n", "running_mean", ",", "running_var", "=", "self", ".", "vars_bn", "[", "6", "]", ",", "self", ".", "vars_bn", "[", "7", "]", "\n", "data", "=", "F", ".", "batch_norm", "(", "data", ",", "running_mean", ",", "running_var", ",", "weight", "=", "w", ",", "bias", "=", "b", ",", "training", "=", "bn_training", ")", "\n", "data", "=", "F", ".", "relu", "(", "data", ")", "\n", "data", "=", "maxpool", "(", "data", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "w", ",", "b", "=", "vars", "[", "18", "]", ",", "vars", "[", "19", "]", "\n", "data", "=", "conv2d", "(", "data", ",", "w", ",", "b", ",", "1", ")", "\n", "w", ",", "b", "=", "vars", "[", "20", "]", ",", "vars", "[", "21", "]", "\n", "running_mean", ",", "running_var", "=", "self", ".", "vars_bn", "[", "8", "]", ",", "self", ".", "vars_bn", "[", "9", "]", "\n", "data", "=", "F", ".", "batch_norm", "(", "data", ",", "running_mean", ",", "running_var", ",", "weight", "=", "w", ",", "bias", "=", "b", ",", "training", "=", "bn_training", ")", "\n", "data", "=", "F", ".", "relu", "(", "data", ")", "\n", "data", "=", "maxpool", "(", "data", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "w", ",", "b", "=", "vars", "[", "22", "]", ",", "vars", "[", "23", "]", "\n", "data", "=", "conv2d", "(", "data", ",", "w", ",", "b", ",", "1", ")", "\n", "w", ",", "b", ",", "=", "vars", "[", "24", "]", ",", "vars", "[", "25", "]", "\n", "running_mean", ",", "running_var", "=", "self", ".", "vars_bn", "[", "10", "]", ",", "self", ".", "vars_bn", "[", "11", "]", "\n", "data", "=", "F", ".", "batch_norm", "(", "data", ",", "running_mean", ",", "running_var", ",", "weight", "=", "w", ",", "bias", "=", "b", ",", "training", "=", "bn_training", ")", "\n", "data", "=", "F", ".", "relu", "(", "data", ")", "\n", "if", "dataset", "==", "'imagenet'", ":", "\n", "                ", "data", "=", "maxpool", "(", "data", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "", "data", "=", "data", ".", "view", "(", "data", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "data", "=", "data", "*", "fc_mask", "\n", "w", ",", "b", "=", "vars", "[", "28", "]", ",", "vars", "[", "29", "]", "\n", "data", "=", "F", ".", "linear", "(", "data", ",", "w", ",", "b", ")", "\n", "if", "self", ".", "aim", "is", "not", "None", ":", "\n", "                ", "rnd_idx", ",", "mech_choice", "=", "None", ",", "None", "\n", "if", "meta_train", ":", "\n", "                    ", "mech_choice", "=", "TOPK", "+", "2", "\n", "rng", "=", "default_rng", "(", ")", "\n", "rnd_idx", "=", "rng", ".", "choice", "(", "mech_choice", ",", "size", "=", "self", ".", "aim", ".", "topk", ",", "replace", "=", "False", ")", ".", "tolist", "(", ")", "\n", "", "data", ",", "logits", ",", "chosen", "=", "self", ".", "aim", ".", "aim_forward", "(", "data", ",", "vars", "[", "30", "]", ",", "vars", "[", "31", "]", ",", "vars", "[", "32", "]", ",", "vars", "[", "33", "]", ",", "vars", "[", "34", "]", ",", "\n", "stochastic", "=", "rnd_idx", ",", "mech_choice", "=", "mech_choice", ",", "threshold", "=", "True", ")", "\n", "data", "=", "F", ".", "normalize", "(", "data", ",", "p", "=", "2", ",", "dim", "=", "data", ".", "dim", "(", ")", "-", "1", ",", "eps", "=", "1e-12", ")", "\n", "", "w", ",", "b", "=", "vars", "[", "26", "]", ",", "vars", "[", "27", "]", "\n", "data", "=", "F", ".", "linear", "(", "data", ",", "w", ",", "b", ")", "\n", "", "else", ":", "\n", "# =========== NEUROMODULATORY NETWORK ===========", "\n", "            ", "data", "=", "x", "\n", "\n", "w", ",", "b", "=", "vars", "[", "0", "]", ",", "vars", "[", "1", "]", "\n", "data", "=", "conv2d", "(", "data", ",", "w", ",", "b", ",", "1", ",", "1", ")", "\n", "w", ",", "b", "=", "vars", "[", "2", "]", ",", "vars", "[", "3", "]", "\n", "running_mean", ",", "running_var", "=", "self", ".", "vars_bn", "[", "0", "]", ",", "self", ".", "vars_bn", "[", "1", "]", "\n", "data", "=", "F", ".", "batch_norm", "(", "data", ",", "running_mean", ",", "running_var", ",", "weight", "=", "w", ",", "bias", "=", "b", ",", "training", "=", "bn_training", ")", "\n", "data", "=", "F", ".", "relu", "(", "data", ")", "\n", "if", "dataset", "==", "'imagenet'", ":", "\n", "                ", "data", "=", "maxpool", "(", "data", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "", "w", ",", "b", "=", "vars", "[", "4", "]", ",", "vars", "[", "5", "]", "\n", "data", "=", "conv2d", "(", "data", ",", "w", ",", "b", ",", "1", ",", "1", ")", "\n", "w", ",", "b", "=", "vars", "[", "6", "]", ",", "vars", "[", "7", "]", "\n", "running_mean", ",", "running_var", "=", "self", ".", "vars_bn", "[", "2", "]", ",", "self", ".", "vars_bn", "[", "3", "]", "\n", "data", "=", "F", ".", "batch_norm", "(", "data", ",", "running_mean", ",", "running_var", ",", "weight", "=", "w", ",", "bias", "=", "b", ",", "training", "=", "bn_training", ")", "\n", "data", "=", "F", ".", "relu", "(", "data", ")", "\n", "if", "dataset", "!=", "'imagenet'", ":", "\n", "                ", "data", "=", "maxpool", "(", "data", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "", "w", ",", "b", "=", "vars", "[", "8", "]", ",", "vars", "[", "9", "]", "\n", "data", "=", "conv2d", "(", "data", ",", "w", ",", "b", ",", "1", ",", "1", ")", "\n", "w", ",", "b", "=", "vars", "[", "10", "]", ",", "vars", "[", "11", "]", "\n", "running_mean", ",", "running_var", "=", "self", ".", "vars_bn", "[", "4", "]", ",", "self", ".", "vars_bn", "[", "5", "]", "\n", "data", "=", "F", ".", "batch_norm", "(", "data", ",", "running_mean", ",", "running_var", ",", "weight", "=", "w", ",", "bias", "=", "b", ",", "training", "=", "bn_training", ")", "\n", "data", "=", "F", ".", "relu", "(", "data", ")", "\n", "if", "dataset", "==", "'imagenet'", ":", "\n", "                ", "data", "=", "maxpool", "(", "data", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "", "w", ",", "b", "=", "vars", "[", "12", "]", ",", "vars", "[", "13", "]", "\n", "data", "=", "conv2d", "(", "data", ",", "w", ",", "b", ",", "1", ",", "1", ")", "\n", "w", ",", "b", "=", "vars", "[", "14", "]", ",", "vars", "[", "15", "]", "\n", "running_mean", ",", "running_var", "=", "self", ".", "vars_bn", "[", "6", "]", ",", "self", ".", "vars_bn", "[", "7", "]", "\n", "data", "=", "F", ".", "batch_norm", "(", "data", ",", "running_mean", ",", "running_var", ",", "weight", "=", "w", ",", "bias", "=", "b", ",", "training", "=", "bn_training", ")", "\n", "data", "=", "F", ".", "relu", "(", "data", ")", "\n", "if", "dataset", "!=", "'imagenet'", ":", "\n", "                ", "data", "=", "maxpool", "(", "data", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "", "w", ",", "b", "=", "vars", "[", "16", "]", ",", "vars", "[", "17", "]", "\n", "data", "=", "conv2d", "(", "data", ",", "w", ",", "b", ",", "1", ",", "1", ")", "\n", "w", ",", "b", "=", "vars", "[", "18", "]", ",", "vars", "[", "19", "]", "\n", "running_mean", ",", "running_var", "=", "self", ".", "vars_bn", "[", "8", "]", ",", "self", ".", "vars_bn", "[", "9", "]", "\n", "data", "=", "F", ".", "batch_norm", "(", "data", ",", "running_mean", ",", "running_var", ",", "weight", "=", "w", ",", "bias", "=", "b", ",", "training", "=", "bn_training", ")", "\n", "data", "=", "F", ".", "relu", "(", "data", ")", "\n", "if", "dataset", "==", "'imagenet'", ":", "\n", "                ", "data", "=", "maxpool", "(", "data", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "", "w", ",", "b", "=", "vars", "[", "20", "]", ",", "vars", "[", "21", "]", "\n", "data", "=", "conv2d", "(", "data", ",", "w", ",", "b", ",", "1", ",", "1", ")", "\n", "w", ",", "b", "=", "vars", "[", "22", "]", ",", "vars", "[", "23", "]", "\n", "running_mean", ",", "running_var", "=", "self", ".", "vars_bn", "[", "10", "]", ",", "self", ".", "vars_bn", "[", "11", "]", "\n", "data", "=", "F", ".", "batch_norm", "(", "data", ",", "running_mean", ",", "running_var", ",", "weight", "=", "w", ",", "bias", "=", "b", ",", "training", "=", "bn_training", ")", "\n", "data", "=", "F", ".", "relu", "(", "data", ")", "\n", "data", "=", "avgpool", "(", "data", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "data", "=", "data", ".", "view", "(", "data", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "# =========== PREDICTION NETWORK ===========", "\n", "\n", "if", "self", ".", "aim", "is", "not", "None", ":", "\n", "                ", "data", "=", "data", ".", "view", "(", "data", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "w", ",", "b", "=", "vars", "[", "24", "]", ",", "vars", "[", "25", "]", "\n", "data", "=", "F", ".", "relu", "(", "F", ".", "linear", "(", "data", ",", "w", ",", "b", ")", ")", "\n", "\n", "rnd_idx", ",", "mech_choice", "=", "None", ",", "None", "\n", "if", "meta_train", ":", "\n", "                    ", "mech_choice", "=", "TOPK", "+", "2", "\n", "rng", "=", "default_rng", "(", ")", "\n", "rnd_idx", "=", "rng", ".", "choice", "(", "mech_choice", ",", "size", "=", "self", ".", "aim", ".", "topk", ",", "replace", "=", "False", ")", ".", "tolist", "(", ")", "\n", "", "data", ",", "logits", ",", "chosen", "=", "self", ".", "aim", ".", "aim_forward", "(", "data", ",", "vars", "[", "28", "]", ",", "vars", "[", "29", "]", ",", "vars", "[", "30", "]", ",", "vars", "[", "31", "]", ",", "vars", "[", "32", "]", ",", "\n", "stochastic", "=", "rnd_idx", ",", "mech_choice", "=", "mech_choice", ",", "threshold", "=", "True", ")", "\n", "data", "=", "F", ".", "normalize", "(", "data", ",", "p", "=", "2", ",", "dim", "=", "data", ".", "dim", "(", ")", "-", "1", ",", "eps", "=", "1e-12", ")", "\n", "\n", "", "w", ",", "b", "=", "vars", "[", "26", "]", ",", "vars", "[", "27", "]", "\n", "data", "=", "F", ".", "linear", "(", "data", ",", "w", ",", "b", ")", "\n", "\n", "", "if", "return_aim", ":", "\n", "            ", "return", "data", ",", "logits", ",", "chosen", "\n", "", "else", ":", "\n", "            ", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.zero_grad": [[303, 317], ["torch.no_grad", "p.grad.zero_", "p.grad.zero_"], "methods", ["None"], ["", "", "def", "zero_grad", "(", "self", ",", "vars", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param vars:\n        :return:\n        \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "vars", "is", "None", ":", "\n", "                ", "for", "p", "in", "self", ".", "vars", ":", "\n", "                    ", "if", "p", ".", "grad", "is", "not", "None", ":", "\n", "                        ", "p", ".", "grad", ".", "zero_", "(", ")", "\n", "", "", "", "else", ":", "\n", "                ", "for", "p", "in", "vars", ":", "\n", "                    ", "if", "p", ".", "grad", "is", "not", "None", ":", "\n", "                        ", "p", ".", "grad", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.Learner.parameters": [[318, 324], ["None"], "methods", ["None"], ["", "", "", "", "", "def", "parameters", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        override this function since initial parameters will return with a generator.\n        :return:\n        \"\"\"", "\n", "return", "self", ".", "vars", "\n", "", "", ""]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.batchnorm": [[14, 21], ["torch.zeros", "torch.ones", "torch.nn.functional.batch_norm", "numpy.prod", "numpy.prod", "numpy.array", "numpy.array", "input.data.size", "input.data.size"], "function", ["None"], ["def", "batchnorm", "(", "input", ",", "weight", "=", "None", ",", "bias", "=", "None", ",", "running_mean", "=", "None", ",", "running_var", "=", "None", ",", "training", "=", "True", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ")", ":", "\n", "    ", "''' momentum = 1 restricts stats to the current mini-batch '''", "\n", "# This hack only works when momentum is 1 and avoids needing to track running stats", "\n", "# by substuting dummy variables", "\n", "running_mean", "=", "torch", ".", "zeros", "(", "np", ".", "prod", "(", "np", ".", "array", "(", "input", ".", "data", ".", "size", "(", ")", "[", "1", "]", ")", ")", ")", "\n", "running_var", "=", "torch", ".", "ones", "(", "np", ".", "prod", "(", "np", ".", "array", "(", "input", ".", "data", ".", "size", "(", ")", "[", "1", "]", ")", ")", ")", "\n", "return", "F", ".", "batch_norm", "(", "input", ",", "running_mean", ",", "running_var", ",", "weight", ",", "bias", ",", "training", ",", "momentum", ",", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.maxpool": [[22, 24], ["torch.nn.functional.max_pool2d"], "function", ["None"], ["", "def", "maxpool", "(", "input", ",", "kernel_size", ",", "stride", "=", "None", ")", ":", "\n", "    ", "return", "F", ".", "max_pool2d", "(", "input", ",", "kernel_size", ",", "stride", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.avgpool": [[25, 27], ["torch.nn.functional.avg_pool2d"], "function", ["None"], ["", "def", "avgpool", "(", "input", ",", "kernel_size", ",", "stride", "=", "None", ")", ":", "\n", "    ", "return", "F", ".", "avg_pool2d", "(", "input", ",", "kernel_size", ",", "stride", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.conv2d": [[28, 30], ["torch.nn.functional.conv2d"], "function", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.model.learner.conv2d"], ["", "def", "conv2d", "(", "input", ",", "weight", ",", "bias", "=", "None", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ")", ":", "\n", "    ", "return", "F", ".", "conv2d", "(", "input", ",", "weight", ",", "bias", ",", "stride", ",", "padding", ",", "dilation", ",", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.experiment.experiment.experiment.__init__": [[19, 78], ["vars", "print", "datetime.datetime.now().strftime", "os.path.exists", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logger.addHandler", "logging.handlers.logging.StreamHandler", "logging.handlers.logging.StreamHandler.setLevel", "logging.handlers.logging.StreamHandler.setFormatter", "logger.addHandler", "logger.setLevel", "experiment.experiment.store_json", "subprocess.check_output().decode", "subprocess.check_output", "subprocess.check_output", "subprocess.check_output", "subprocess.check_output().decode", "os.path.exists", "os.makedirs", "logging.Formatter", "logging.Formatter", "subprocess.check_output", "subprocess.check_output", "subprocess.check_output", "subprocess.check_output().decode", "datetime.datetime.now", "os.makedirs", "str", "os.makedirs", "str", "subprocess.check_output", "subprocess.check_output", "os.path.exists", "str", "subprocess.check_output", "str"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.experiment.experiment.experiment.store_json"], ["def", "__init__", "(", "self", ",", "name", ",", "args", ",", "output_dir", "=", "\"../\"", ",", "commit_changes", "=", "False", ")", ":", "\n", "        ", "import", "sys", "\n", "self", ".", "command_args", "=", "\"python \"", "+", "\" \"", ".", "join", "(", "sys", ".", "argv", ")", "\n", "if", "commit_changes", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "git_hash", "=", "subprocess", ".", "check_output", "(", "[", "'git'", ",", "'rev-parse'", ",", "'HEAD'", "]", ")", ".", "decode", "(", "\"utf-8\"", ")", "\n", "subprocess", ".", "check_output", "(", "[", "'git'", ",", "'add'", ",", "'-u'", "]", ")", "\n", "subprocess", ".", "check_output", "(", "[", "'git'", ",", "'add'", ",", "'-A'", "]", ")", "\n", "subprocess", ".", "check_output", "(", "[", "'git'", ",", "'commit'", ",", "'-m'", ",", "'running experiment '", "+", "name", "]", ")", "\n", "self", ".", "git_hash", "=", "subprocess", ".", "check_output", "(", "[", "'git'", ",", "'rev-parse'", ",", "'HEAD'", "]", ")", ".", "decode", "(", "\"utf-8\"", ")", "\n", "", "except", ":", "\n", "                ", "subprocess", ".", "check_output", "(", "[", "'git'", ",", "'init'", "]", ")", "\n", "subprocess", ".", "check_output", "(", "[", "'git'", ",", "'add'", ",", "'-A'", "]", ")", "\n", "subprocess", ".", "check_output", "(", "[", "'git'", ",", "'commit'", ",", "'-m'", ",", "'running experiment '", "+", "name", "]", ")", "\n", "self", ".", "git_hash", "=", "subprocess", ".", "check_output", "(", "[", "'git'", ",", "'rev-parse'", ",", "'HEAD'", "]", ")", ".", "decode", "(", "\"utf-8\"", ")", "\n", "# self.git_hash = \"Not a Git Repo\"", "\n", "# logger.info(\"Git hash for current experiment : %s\", self.git_hash)", "\n", "", "", "if", "not", "args", "is", "None", ":", "\n", "            ", "self", ".", "name", "=", "name", "\n", "self", ".", "params", "=", "vars", "(", "args", ")", "\n", "print", "(", "self", ".", "params", ")", "\n", "self", ".", "results", "=", "{", "}", "\n", "self", ".", "dir", "=", "output_dir", "\n", "\n", "root_folder", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%d%B%Y\"", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", "+", "root_folder", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "os", ".", "makedirs", "(", "output_dir", "+", "root_folder", ")", "\n", "", "except", ":", "\n", "                    ", "assert", "(", "os", ".", "path", ".", "exists", "(", "output_dir", "+", "root_folder", ")", ")", "\n", "\n", "", "", "self", ".", "root_folder", "=", "output_dir", "+", "root_folder", "\n", "self", ".", "full_path", "=", "self", ".", "root_folder", "+", "\"/\"", "+", "self", ".", "name", "\n", "\n", "ver", "=", "0", "\n", "\n", "while", "os", ".", "path", ".", "exists", "(", "self", ".", "full_path", "+", "\"_\"", "+", "str", "(", "ver", ")", ")", ":", "\n", "                ", "ver", "+=", "1", "\n", "", "try", ":", "\n", "                ", "os", ".", "makedirs", "(", "self", ".", "full_path", "+", "\"_\"", "+", "str", "(", "ver", ")", ")", "\n", "", "except", ":", "\n", "                ", "os", ".", "makedirs", "(", "self", ".", "full_path", "+", "\"_\"", "+", "str", "(", "ver", ")", "+", "\"_race_condition\"", ")", "\n", "", "self", ".", "path", "=", "self", ".", "full_path", "+", "\"_\"", "+", "str", "(", "ver", ")", "+", "\"/\"", "\n", "# logger.info(\"Experiment result directory\", self.path)", "\n", "self", ".", "results", "[", "\"Temp Results\"", "]", "=", "[", "[", "1", ",", "2", ",", "3", ",", "4", "]", ",", "[", "5", ",", "6", ",", "2", ",", "6", "]", "]", "\n", "fh", "=", "logging", ".", "FileHandler", "(", "self", ".", "path", "+", "\"log.txt\"", ")", "\n", "\n", "fh", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "fh", ".", "setFormatter", "(", "logging", ".", "Formatter", "(", "'%(name)-12s: %(levelname)-8s %(message)s'", ")", ")", "\n", "logger", ".", "addHandler", "(", "fh", ")", "\n", "\n", "ch", "=", "logging", ".", "handlers", ".", "logging", ".", "StreamHandler", "(", ")", "\n", "ch", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "ch", ".", "setFormatter", "(", "logging", ".", "Formatter", "(", "'%(name)-12s: %(levelname)-8s %(message)s'", ")", ")", "\n", "logger", ".", "addHandler", "(", "ch", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "\n", "self", ".", "store_json", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.experiment.experiment.experiment.is_jsonable": [[79, 85], ["json.dumps"], "methods", ["None"], ["", "", "def", "is_jsonable", "(", "self", ",", "x", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "json", ".", "dumps", "(", "x", ")", "\n", "return", "True", "\n", "", "except", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.experiment.experiment.experiment.add_result": [[86, 90], ["experiment.experiment.is_jsonable", "experiment.experiment.is_jsonable"], "methods", ["home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.experiment.experiment.experiment.is_jsonable", "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.experiment.experiment.experiment.is_jsonable"], ["", "", "def", "add_result", "(", "self", ",", "key", ",", "value", ")", ":", "\n", "        ", "assert", "(", "self", ".", "is_jsonable", "(", "key", ")", ")", "\n", "assert", "(", "self", ".", "is_jsonable", "(", "value", ")", ")", "\n", "self", ".", "results", "[", "key", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.experiment.experiment.experiment.store_json": [[91, 95], ["open", "json.dump", "outfile.write"], "methods", ["None"], ["", "def", "store_json", "(", "self", ")", ":", "\n", "        ", "with", "open", "(", "self", ".", "path", "+", "\"metadata.json\"", ",", "'w'", ")", "as", "outfile", ":", "\n", "            ", "json", ".", "dump", "(", "self", ".", "__dict__", ",", "outfile", ",", "indent", "=", "4", ",", "separators", "=", "(", "','", ",", "': '", ")", ",", "sort_keys", "=", "True", ")", "\n", "outfile", ".", "write", "(", "\"\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.huang50213_AIM-Fewshot-Continual.experiment.experiment.experiment.get_json": [[96, 98], ["json.dumps"], "methods", ["None"], ["", "", "def", "get_json", "(", "self", ")", ":", "\n", "        ", "return", "json", ".", "dumps", "(", "self", ".", "__dict__", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", "\n", "\n"]]}