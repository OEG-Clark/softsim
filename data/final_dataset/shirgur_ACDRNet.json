{"home.repos.pwc.inspect_result.shirgur_ACDRNet.None.train.train_epoch": [[19, 92], ["model.train", "tqdm.tqdm", "enumerate", "image.to.to", "mask.to.to", "model", "loss_masks_agg.append", "loss_balloon_agg.append", "loss_curve_agg.append", "loss_dist_agg.append", "optimizer.zero_grad", "loss.backward", "optimizer.step", "numpy.mean", "numpy.mean", "tqdm.tqdm.set_description", "summary.add_scalar", "summary.add_scalar", "summary.add_scalar", "summary.add_scalar", "summary.add_scalar", "summary.add_scalar", "summary.add_scalar", "summary.add_scalar", "summary.visualize_image", "torch.mse_loss", "models.loss_functions.curvature_loss", "models.loss_functions.dist_loss", "len", "sum", "utils.metrices.get_iou", "utils.metrices.get_ap_scores", "loss.item", "loss_ac.item", "sum().item", "sum().item", "sum().item", "sum().item", "numpy.mean", "numpy.mean", "mask.to.unsqueeze", "pred_masks[].squeeze", "range", "range", "sum", "pred_masks[].gt", "mask.to.byte", "len", "len", "len", "range", "range", "range", "range", "sum", "sum", "loss.item", "loss_ac.item", "sum", "sum", "sum", "sum", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.shirgur_ACDRNet.utils.summaries.TensorboardSummary.add_scalar", "home.repos.pwc.inspect_result.shirgur_ACDRNet.utils.summaries.TensorboardSummary.add_scalar", "home.repos.pwc.inspect_result.shirgur_ACDRNet.utils.summaries.TensorboardSummary.add_scalar", "home.repos.pwc.inspect_result.shirgur_ACDRNet.utils.summaries.TensorboardSummary.add_scalar", "home.repos.pwc.inspect_result.shirgur_ACDRNet.utils.summaries.TensorboardSummary.add_scalar", "home.repos.pwc.inspect_result.shirgur_ACDRNet.utils.summaries.TensorboardSummary.add_scalar", "home.repos.pwc.inspect_result.shirgur_ACDRNet.utils.summaries.TensorboardSummary.add_scalar", "home.repos.pwc.inspect_result.shirgur_ACDRNet.utils.summaries.TensorboardSummary.add_scalar", "home.repos.pwc.inspect_result.shirgur_ACDRNet.utils.summaries.TensorboardSummary.visualize_image", "home.repos.pwc.inspect_result.shirgur_ACDRNet.models.loss_functions.curvature_loss", "home.repos.pwc.inspect_result.shirgur_ACDRNet.models.loss_functions.dist_loss", "home.repos.pwc.inspect_result.shirgur_ACDRNet.utils.metrices.get_iou", "home.repos.pwc.inspect_result.shirgur_ACDRNet.utils.metrices.get_ap_scores"], ["def", "train_epoch", "(", "model", ",", "optimizer", ",", "data_loader", ",", "epoch", ",", "args", ",", "summary", ",", "device", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "iterator", "=", "tqdm", "(", "data_loader", ")", "\n", "\n", "for", "i", ",", "(", "image", ",", "mask", ")", "in", "enumerate", "(", "iterator", ")", ":", "\n", "\n", "        ", "image", "=", "image", ".", "to", "(", "device", ")", "\n", "mask", "=", "mask", ".", "to", "(", "device", ")", "\n", "\n", "pred_masks", ",", "pred_nodes", "=", "model", "(", "image", ",", "args", ".", "iter", ")", "\n", "\n", "start_index", "=", "0", "\n", "\n", "loss_masks", "=", "[", "F", ".", "mse_loss", "(", "pred_masks", "[", "k", "]", ".", "squeeze", "(", "1", ")", ",", "mask", ")", "for", "k", "in", "range", "(", "start_index", ",", "len", "(", "pred_masks", ")", ")", "]", "\n", "loss_balloon", "=", "[", "(", "1", "-", "pred_masks", "[", "k", "]", ")", ".", "mean", "(", ")", "for", "k", "in", "range", "(", "len", "(", "pred_masks", ")", ")", "]", "\n", "loss_curve", "=", "[", "curvature_loss", "(", "nodes", ")", "for", "nodes", "in", "pred_nodes", "]", "\n", "loss_dist", "=", "[", "dist_loss", "(", "nodes", ")", "for", "nodes", "in", "pred_nodes", "]", "\n", "\n", "loss_masks_agg", "=", "[", "]", "\n", "loss_balloon_agg", "=", "[", "]", "\n", "loss_curve_agg", "=", "[", "]", "\n", "loss_dist_agg", "=", "[", "]", "\n", "\n", "loss_masks_agg", ".", "append", "(", "loss_masks", "[", "-", "1", "]", ")", "\n", "loss_balloon_agg", ".", "append", "(", "args", ".", "lmd_balloon", "*", "loss_balloon", "[", "-", "1", "]", ")", "\n", "loss_curve_agg", ".", "append", "(", "args", ".", "lmd_curve", "*", "loss_curve", "[", "-", "1", "]", ")", "\n", "loss_dist_agg", ".", "append", "(", "args", ".", "lmd_dist", "*", "loss_dist", "[", "-", "1", "]", ")", "\n", "\n", "if", "len", "(", "loss_masks", ")", ">", "2", ":", "\n", "            ", "loss_masks_agg", "+=", "[", "loss_masks", "[", "j", "+", "start_index", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "loss_masks", "[", "start_index", ":", "-", "1", "]", ")", ")", "]", "\n", "loss_balloon_agg", "+=", "[", "args", ".", "lmd_balloon", "*", "loss_balloon", "[", "j", "+", "start_index", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "loss_masks", "[", "start_index", ":", "-", "1", "]", ")", ")", "]", "\n", "loss_curve_agg", "+=", "[", "args", ".", "lmd_curve", "*", "loss_curve", "[", "j", "+", "start_index", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "loss_masks", "[", "start_index", ":", "-", "1", "]", ")", ")", "]", "\n", "loss_dist_agg", "+=", "[", "args", ".", "lmd_dist", "*", "loss_dist", "[", "j", "+", "start_index", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "loss_masks", "[", "start_index", ":", "-", "1", "]", ")", ")", "]", "\n", "\n", "", "loss_ac", "=", "sum", "(", "loss_masks_agg", ")", "+", "sum", "(", "loss_balloon_agg", ")", "+", "sum", "(", "loss_dist_agg", ")", "+", "sum", "(", "loss_curve_agg", ")", "\n", "loss", "=", "loss_ac", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# Metrices", "\n", "iou_ac", "=", "np", ".", "mean", "(", "get_iou", "(", "pred_masks", "[", "-", "1", "]", ".", "gt", "(", "0.5", ")", ",", "mask", ".", "byte", "(", ")", ")", ")", "\n", "ap_ac", "=", "np", ".", "mean", "(", "get_ap_scores", "(", "pred_masks", "[", "-", "1", "]", ",", "mask", ")", ")", "\n", "\n", "iterator", ".", "set_description", "(", "\n", "'(train | {}) Epoch [{epoch}/{epochs}] :: Loss {loss:.4f} | Loss AC {loss_ac:.4f}'", ".", "format", "(", "\n", "args", ".", "checkname", "+", "'_'", "+", "args", ".", "exp", ",", "\n", "epoch", "=", "epoch", "+", "1", ",", "\n", "epochs", "=", "args", ".", "epochs", ",", "\n", "loss", "=", "loss", ".", "item", "(", ")", ",", "\n", "loss_ac", "=", "loss_ac", ".", "item", "(", ")", ")", ")", "\n", "\n", "global_step", "=", "epoch", "*", "len", "(", "data_loader", ")", "+", "i", "\n", "summary", ".", "add_scalar", "(", "'train/loss'", ",", "loss", ".", "item", "(", ")", ",", "global_step", ")", "\n", "summary", ".", "add_scalar", "(", "'train/loss_ac'", ",", "loss_ac", ".", "item", "(", ")", ",", "global_step", ")", "\n", "summary", ".", "add_scalar", "(", "'train/loss_masks_agg'", ",", "sum", "(", "loss_masks_agg", ")", ".", "item", "(", ")", ",", "global_step", ")", "\n", "summary", ".", "add_scalar", "(", "'train/loss_ballon_agg'", ",", "sum", "(", "loss_balloon_agg", ")", ".", "item", "(", ")", ",", "global_step", ")", "\n", "summary", ".", "add_scalar", "(", "'train/loss_curv_agg'", ",", "sum", "(", "loss_curve_agg", ")", ".", "item", "(", ")", ",", "global_step", ")", "\n", "summary", ".", "add_scalar", "(", "'train/loss_dist_agg'", ",", "sum", "(", "loss_dist_agg", ")", ".", "item", "(", ")", ",", "global_step", ")", "\n", "summary", ".", "add_scalar", "(", "'train/iou_ac'", ",", "np", ".", "mean", "(", "iou_ac", ")", ",", "global_step", ")", "\n", "summary", ".", "add_scalar", "(", "'train/ap_ac'", ",", "np", ".", "mean", "(", "ap_ac", ")", ",", "global_step", ")", "\n", "\n", "summary", ".", "visualize_image", "(", "'train'", ",", "\n", "image", ",", "\n", "mask", ".", "unsqueeze", "(", "1", ")", ",", "\n", "pred_masks", "[", "-", "1", "]", ",", "\n", "pred_masks", "[", "0", "]", ",", "\n", "global_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.None.train.val_epoch": [[94, 143], ["model.eval", "tqdm.tqdm", "enumerate", "image.to.to", "mask.to.to", "model", "torch.interpolate", "torch.mse_loss", "utils.metrices.get_iou", "utils.metrices.get_ap_scores", "tqdm.tqdm.set_description", "summary.add_scalar", "summary.add_scalar", "summary.add_scalar", "numpy.argwhere().flatten().tolist", "summary.visualize_image", "numpy.mean", "numpy.mean", "F.interpolate.squeeze", "F.interpolate.gt", "mask.to.byte", "F.mse_loss.item", "numpy.mean", "numpy.mean", "summary.visualize_image", "len", "numpy.argwhere().flatten", "mask.to.unsqueeze", "F.mse_loss.item", "mask.to.unsqueeze", "numpy.argwhere", "numpy.array"], "function", ["home.repos.pwc.inspect_result.shirgur_ACDRNet.utils.metrices.get_iou", "home.repos.pwc.inspect_result.shirgur_ACDRNet.utils.metrices.get_ap_scores", "home.repos.pwc.inspect_result.shirgur_ACDRNet.utils.summaries.TensorboardSummary.add_scalar", "home.repos.pwc.inspect_result.shirgur_ACDRNet.utils.summaries.TensorboardSummary.add_scalar", "home.repos.pwc.inspect_result.shirgur_ACDRNet.utils.summaries.TensorboardSummary.add_scalar", "home.repos.pwc.inspect_result.shirgur_ACDRNet.utils.summaries.TensorboardSummary.visualize_image", "home.repos.pwc.inspect_result.shirgur_ACDRNet.utils.summaries.TensorboardSummary.visualize_image"], ["", "", "def", "val_epoch", "(", "model", ",", "data_loader", ",", "epoch", ",", "args", ",", "summary", ",", "device", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "iterator", "=", "tqdm", "(", "data_loader", ")", "\n", "\n", "mIoU_ac", ",", "mAP_ac", ",", "mF1_ac", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "i", ",", "(", "image", ",", "mask", ")", "in", "enumerate", "(", "iterator", ")", ":", "\n", "        ", "image", "=", "image", ".", "to", "(", "device", ")", "\n", "mask", "=", "mask", ".", "to", "(", "device", ")", "\n", "\n", "pred_mask_ac", "=", "model", "(", "image", ",", "args", ".", "iter", ")", "\n", "pred_mask_ac", "=", "F", ".", "interpolate", "(", "pred_mask_ac", ",", "size", "=", "mask", ".", "shape", "[", "1", ":", "]", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "loss_masks_ac", "=", "F", ".", "mse_loss", "(", "pred_mask_ac", ".", "squeeze", "(", "1", ")", ",", "mask", ")", "\n", "\n", "# Metrices", "\n", "iou_ac", "=", "get_iou", "(", "pred_mask_ac", ".", "gt", "(", "0.2", ")", ",", "mask", ".", "byte", "(", ")", ")", "\n", "ap_ac", "=", "get_ap_scores", "(", "pred_mask_ac", ",", "mask", ")", "\n", "mIoU_ac", "+=", "iou_ac", "\n", "mAP_ac", "+=", "ap_ac", "\n", "\n", "iterator", ".", "set_description", "(", "\n", "'(val   | {}) Epoch [{epoch}/{epochs}] :: Loss AC {loss_ac:.4f}'", ".", "format", "(", "\n", "args", ".", "checkname", "+", "'_'", "+", "args", ".", "exp", ",", "\n", "epoch", "=", "epoch", "+", "1", ",", "\n", "epochs", "=", "args", ".", "epochs", ",", "\n", "loss_ac", "=", "loss_masks_ac", ".", "item", "(", ")", ")", ")", "\n", "\n", "global_step", "=", "(", "epoch", "//", "args", ".", "eval_rate", ")", "*", "len", "(", "data_loader", ")", "+", "i", "\n", "summary", ".", "add_scalar", "(", "'val/loss_ac'", ",", "loss_masks_ac", ".", "item", "(", ")", ",", "global_step", ")", "\n", "summary", ".", "add_scalar", "(", "'val/iou_ac'", ",", "np", ".", "mean", "(", "iou_ac", ")", ",", "global_step", ")", "\n", "summary", ".", "add_scalar", "(", "'val/ap_ac'", ",", "np", ".", "mean", "(", "ap_ac", ")", ",", "global_step", ")", "\n", "\n", "ind", "=", "np", ".", "argwhere", "(", "np", ".", "array", "(", "iou_ac", ")", "<", "0.5", ")", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "\n", "summary", ".", "visualize_image", "(", "'val'", ",", "\n", "image", ",", "\n", "mask", ".", "unsqueeze", "(", "1", ")", "[", "ind", "]", ",", "\n", "pred_mask_ac", "[", "ind", "]", ",", "\n", "pred_mask_ac", "[", "ind", "]", ",", "\n", "global_step", ")", "\n", "if", "ind", ":", "\n", "            ", "summary", ".", "visualize_image", "(", "'val_BAD'", ",", "\n", "image", "[", "ind", "]", ",", "\n", "mask", ".", "unsqueeze", "(", "1", ")", "[", "ind", "]", ",", "\n", "pred_mask_ac", "[", "ind", "]", ",", "\n", "pred_mask_ac", "[", "ind", "]", ",", "\n", "global_step", ")", "\n", "\n", "", "", "return", "np", ".", "mean", "(", "mIoU_ac", ")", ",", "np", ".", "mean", "(", "mAP_ac", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.utils.metrices.get_f1_scores": [[10, 21], ["zip", "pred.data.cpu().numpy().reshape.data.cpu().numpy().reshape", "tgt.data.cpu().numpy().reshape.data.cpu().numpy().reshape", "f1.append", "sklearn.metrics.f1_score", "pred.data.cpu().numpy().reshape.data.cpu().numpy", "tgt.data.cpu().numpy().reshape.data.cpu().numpy", "pred.data.cpu().numpy().reshape.data.cpu", "tgt.data.cpu().numpy().reshape.data.cpu"], "function", ["None"], ["def", "get_f1_scores", "(", "predict", ",", "target", ",", "ignore_index", "=", "-", "1", ")", ":", "\n", "    ", "f1", "=", "[", "]", "\n", "for", "pred", ",", "tgt", "in", "zip", "(", "predict", ",", "target", ")", ":", "\n", "# Tensor process", "\n", "        ", "pred", "=", "pred", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "-", "1", ")", "\n", "tgt", "=", "tgt", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "-", "1", ")", "\n", "p", "=", "pred", "[", "tgt", "!=", "ignore_index", "]", "\n", "t", "=", "tgt", "[", "tgt", "!=", "ignore_index", "]", "\n", "f1", ".", "append", "(", "f1_score", "(", "t", ",", "p", ")", ")", "\n", "\n", "", "return", "f1", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.utils.metrices.get_ap_scores": [[23, 35], ["zip", "pred.data.cpu().numpy().reshape.data.cpu().numpy().reshape", "tgt.data.cpu().numpy().reshape.data.cpu().numpy().reshape", "ap.append", "sklearn.metrics.average_precision_score", "pred.data.cpu().numpy().reshape.data.cpu().numpy", "tgt.data.cpu().numpy().reshape.data.cpu().numpy", "pred.data.cpu().numpy().reshape.data.cpu", "tgt.data.cpu().numpy().reshape.data.cpu"], "function", ["None"], ["", "def", "get_ap_scores", "(", "predict", ",", "target", ",", "ignore_index", "=", "-", "1", ")", ":", "\n", "    ", "ap", "=", "[", "]", "\n", "for", "pred", ",", "tgt", "in", "zip", "(", "predict", ",", "target", ")", ":", "\n", "# Tensor process", "\n", "        ", "pred", "=", "pred", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "-", "1", ")", "\n", "tgt", "=", "tgt", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "-", "1", ")", "\n", "p", "=", "pred", "[", "tgt", "!=", "ignore_index", "]", "\n", "t", "=", "tgt", "[", "tgt", "!=", "ignore_index", "]", "\n", "\n", "ap", ".", "append", "(", "average_precision_score", "(", "t", ",", "p", ")", ")", "\n", "\n", "", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.utils.metrices.get_iou": [[37, 46], ["outputs.squeeze.squeeze", "iou.cpu().tolist", "iou.cpu"], "function", ["None"], ["", "def", "get_iou", "(", "outputs", ",", "labels", ")", ":", "\n", "    ", "outputs", "=", "outputs", ".", "squeeze", "(", "1", ")", "\n", "\n", "intersection", "=", "(", "outputs", "&", "labels", ")", ".", "float", "(", ")", ".", "sum", "(", "(", "1", ",", "2", ")", ")", "\n", "union", "=", "(", "outputs", "|", "labels", ")", ".", "float", "(", ")", ".", "sum", "(", "(", "1", ",", "2", ")", ")", "\n", "\n", "iou", "=", "(", "intersection", "+", "SMOOTH", ")", "/", "(", "union", "+", "SMOOTH", ")", "\n", "\n", "return", "iou", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.utils.metrices.WCov_metric": [[48, 53], ["float", "float", "numpy.count_nonzero", "numpy.count_nonzero"], "function", ["None"], ["", "def", "WCov_metric", "(", "X", ",", "Y", ")", ":", "\n", "    ", "A1", "=", "float", "(", "np", ".", "count_nonzero", "(", "X", ")", ")", "\n", "A2", "=", "float", "(", "np", ".", "count_nonzero", "(", "Y", ")", ")", "\n", "if", "A1", ">=", "A2", ":", "return", "A2", "/", "A1", "\n", "if", "A2", ">", "A1", ":", "return", "A1", "/", "A2", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.utils.metrices.FBound_metric": [[55, 62], ["metrices.db_eval_boundary", "metrices.db_eval_boundary", "metrices.db_eval_boundary", "metrices.db_eval_boundary", "metrices.db_eval_boundary"], "function", ["home.repos.pwc.inspect_result.shirgur_ACDRNet.utils.metrices.db_eval_boundary", "home.repos.pwc.inspect_result.shirgur_ACDRNet.utils.metrices.db_eval_boundary", "home.repos.pwc.inspect_result.shirgur_ACDRNet.utils.metrices.db_eval_boundary", "home.repos.pwc.inspect_result.shirgur_ACDRNet.utils.metrices.db_eval_boundary", "home.repos.pwc.inspect_result.shirgur_ACDRNet.utils.metrices.db_eval_boundary"], ["", "def", "FBound_metric", "(", "X", ",", "Y", ")", ":", "\n", "    ", "tmp1", "=", "db_eval_boundary", "(", "X", ",", "Y", ",", "1", ")", "[", "0", "]", "\n", "tmp2", "=", "db_eval_boundary", "(", "X", ",", "Y", ",", "2", ")", "[", "0", "]", "\n", "tmp3", "=", "db_eval_boundary", "(", "X", ",", "Y", ",", "3", ")", "[", "0", "]", "\n", "tmp4", "=", "db_eval_boundary", "(", "X", ",", "Y", ",", "4", ")", "[", "0", "]", "\n", "tmp5", "=", "db_eval_boundary", "(", "X", ",", "Y", ",", "5", ")", "[", "0", "]", "\n", "return", "(", "tmp1", "+", "tmp2", "+", "tmp3", "+", "tmp4", "+", "tmp5", ")", "/", "5.0", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.utils.metrices.db_eval_boundary": [[64, 118], ["metrices.seg2bmap", "metrices.seg2bmap", "skimage.morphology.binary_dilation", "skimage.morphology.binary_dilation", "numpy.sum", "numpy.sum", "numpy.ceil", "skimage.morphology.disk", "skimage.morphology.disk", "numpy.sum", "numpy.sum", "numpy.atleast_3d", "numpy.linalg.norm", "numpy.sum", "float", "numpy.sum", "float"], "function", ["home.repos.pwc.inspect_result.shirgur_ACDRNet.utils.metrices.seg2bmap", "home.repos.pwc.inspect_result.shirgur_ACDRNet.utils.metrices.seg2bmap"], ["", "def", "db_eval_boundary", "(", "foreground_mask", ",", "gt_mask", ",", "bound_th", ")", ":", "\n", "    ", "\"\"\"\n    Compute mean,recall and decay from per-frame evaluation.\n    Calculates precision/recall for boundaries between foreground_mask and\n    gt_mask using morphological operators to speed it up.\n    Arguments:\n        foreground_mask (ndarray): binary segmentation image.\n        gt_mask         (ndarray): binary annotated image.\n    Returns:\n        F (float): boundaries F-measure\n        P (float): boundaries precision\n        R (float): boundaries recall\n    \"\"\"", "\n", "assert", "np", ".", "atleast_3d", "(", "foreground_mask", ")", ".", "shape", "[", "2", "]", "==", "1", "\n", "\n", "bound_pix", "=", "bound_th", "if", "bound_th", ">=", "1", "else", "np", ".", "ceil", "(", "bound_th", "*", "np", ".", "linalg", ".", "norm", "(", "foreground_mask", ".", "shape", ")", ")", "\n", "\n", "# Get the pixel boundaries of both masks", "\n", "fg_boundary", "=", "seg2bmap", "(", "foreground_mask", ")", ";", "\n", "gt_boundary", "=", "seg2bmap", "(", "gt_mask", ")", ";", "\n", "\n", "fg_dil", "=", "binary_dilation", "(", "fg_boundary", ",", "disk", "(", "bound_pix", ")", ")", "\n", "gt_dil", "=", "binary_dilation", "(", "gt_boundary", ",", "disk", "(", "bound_pix", ")", ")", "\n", "\n", "# Get the intersection", "\n", "gt_match", "=", "gt_boundary", "*", "fg_dil", "\n", "fg_match", "=", "fg_boundary", "*", "gt_dil", "\n", "\n", "# Area of the intersection", "\n", "n_fg", "=", "np", ".", "sum", "(", "fg_boundary", ")", "\n", "n_gt", "=", "np", ".", "sum", "(", "gt_boundary", ")", "\n", "\n", "# % Compute precision and recall", "\n", "if", "n_fg", "==", "0", "and", "n_gt", ">", "0", ":", "\n", "        ", "precision", "=", "1", "\n", "recall", "=", "0", "\n", "", "elif", "n_fg", ">", "0", "and", "n_gt", "==", "0", ":", "\n", "        ", "precision", "=", "0", "\n", "recall", "=", "1", "\n", "", "elif", "n_fg", "==", "0", "and", "n_gt", "==", "0", ":", "\n", "        ", "precision", "=", "1", "\n", "recall", "=", "1", "\n", "", "else", ":", "\n", "        ", "precision", "=", "np", ".", "sum", "(", "fg_match", ")", "/", "float", "(", "n_fg", ")", "\n", "recall", "=", "np", ".", "sum", "(", "gt_match", ")", "/", "float", "(", "n_gt", ")", "\n", "\n", "# Compute F measure", "\n", "", "if", "precision", "+", "recall", "==", "0", ":", "\n", "        ", "F", "=", "0", "\n", "", "else", ":", "\n", "        ", "F", "=", "2", "*", "precision", "*", "recall", "/", "(", "precision", "+", "recall", ")", ";", "\n", "\n", "", "return", "F", ",", "precision", ",", "recall", ",", "np", ".", "sum", "(", "fg_match", ")", ",", "n_fg", ",", "np", ".", "sum", "(", "gt_match", ")", ",", "n_gt", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.utils.metrices.seg2bmap": [[120, 175], ["seg.astype.astype", "numpy.zeros_like", "numpy.zeros_like", "numpy.zeros_like", "float", "float", "float", "float", "numpy.zeros", "range", "range", "numpy.atleast_3d", "abs", "numpy.floor", "numpy.floor"], "function", ["None"], ["", "def", "seg2bmap", "(", "seg", ",", "width", "=", "None", ",", "height", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    From a segmentation, compute a binary boundary map with 1 pixel wide\n    boundaries.  The boundary pixels are offset by 1/2 pixel towards the\n    origin from the actual segment boundary.\n    Arguments:\n        seg     : Segments labeled from 1..k.\n        width     : Width of desired bmap  <= seg.shape[1]\n        height  :   Height of desired bmap <= seg.shape[0]\n    Returns:\n        bmap (ndarray): Binary boundary map.\n     David Martin <dmartin@eecs.berkeley.edu>\n     January 2003\n    \"\"\"", "\n", "seg", "=", "seg", ".", "astype", "(", "np", ".", "bool", ")", "\n", "seg", "[", "seg", ">", "0", "]", "=", "1", "\n", "\n", "assert", "np", ".", "atleast_3d", "(", "seg", ")", ".", "shape", "[", "2", "]", "==", "1", "\n", "\n", "width", "=", "seg", ".", "shape", "[", "1", "]", "if", "width", "is", "None", "else", "width", "\n", "height", "=", "seg", ".", "shape", "[", "0", "]", "if", "height", "is", "None", "else", "height", "\n", "\n", "h", ",", "w", "=", "seg", ".", "shape", "[", ":", "2", "]", "\n", "\n", "ar1", "=", "float", "(", "width", ")", "/", "float", "(", "height", ")", "\n", "ar2", "=", "float", "(", "w", ")", "/", "float", "(", "h", ")", "\n", "\n", "assert", "not", "(", "width", ">", "w", "|", "height", ">", "h", "|", "abs", "(", "ar1", "-", "ar2", ")", ">", "0.01", ")", ",", "'Can'", "'t convert %dx%d seg to %dx%d bmap.'", "%", "(", "w", ",", "h", ",", "width", ",", "height", ")", "\n", "\n", "e", "=", "np", ".", "zeros_like", "(", "seg", ")", "\n", "s", "=", "np", ".", "zeros_like", "(", "seg", ")", "\n", "se", "=", "np", ".", "zeros_like", "(", "seg", ")", "\n", "\n", "e", "[", ":", ",", ":", "-", "1", "]", "=", "seg", "[", ":", ",", "1", ":", "]", "\n", "s", "[", ":", "-", "1", ",", ":", "]", "=", "seg", "[", "1", ":", ",", ":", "]", "\n", "se", "[", ":", "-", "1", ",", ":", "-", "1", "]", "=", "seg", "[", "1", ":", ",", "1", ":", "]", "\n", "\n", "b", "=", "seg", "^", "e", "|", "seg", "^", "s", "|", "seg", "^", "se", "\n", "b", "[", "-", "1", ",", ":", "]", "=", "seg", "[", "-", "1", ",", ":", "]", "^", "e", "[", "-", "1", ",", ":", "]", "\n", "b", "[", ":", ",", "-", "1", "]", "=", "seg", "[", ":", ",", "-", "1", "]", "^", "s", "[", ":", ",", "-", "1", "]", "\n", "b", "[", "-", "1", ",", "-", "1", "]", "=", "0", "\n", "\n", "if", "w", "==", "width", "and", "h", "==", "height", ":", "\n", "        ", "bmap", "=", "b", "\n", "", "else", ":", "\n", "        ", "bmap", "=", "np", ".", "zeros", "(", "(", "height", ",", "width", ")", ")", "\n", "for", "x", "in", "range", "(", "w", ")", ":", "\n", "            ", "for", "y", "in", "range", "(", "h", ")", ":", "\n", "                ", "if", "b", "[", "y", ",", "x", "]", ":", "\n", "                    ", "j", "=", "1", "+", "np", ".", "floor", "(", "(", "y", "-", "1", ")", "+", "height", "/", "h", ")", "\n", "i", "=", "1", "+", "np", ".", "floor", "(", "(", "x", "-", "1", ")", "+", "width", "/", "h", ")", "\n", "bmap", "[", "j", ",", "i", "]", "=", "1", "\n", "\n", "", "", "", "", "return", "bmap", "\n", "", ""]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.utils.summaries.TensorboardSummary.__init__": [[7, 10], ["torch.utils.tensorboard.SummaryWriter", "os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "directory", ")", ":", "\n", "        ", "self", ".", "directory", "=", "directory", "\n", "self", ".", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "directory", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.utils.summaries.TensorboardSummary.add_scalar": [[11, 13], ["summaries.TensorboardSummary.writer.add_scalar"], "methods", ["home.repos.pwc.inspect_result.shirgur_ACDRNet.utils.summaries.TensorboardSummary.add_scalar"], ["", "def", "add_scalar", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "self", ".", "writer", ".", "add_scalar", "(", "*", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.utils.summaries.TensorboardSummary.visualize_image": [[14, 26], ["torchvision.utils.make_grid", "summaries.TensorboardSummary.writer.add_image", "torchvision.utils.make_grid", "summaries.TensorboardSummary.writer.add_image", "torchvision.utils.make_grid", "summaries.TensorboardSummary.writer.add_image", "torchvision.utils.make_grid", "summaries.TensorboardSummary.writer.add_image", "image_tgt[].clone().cpu", "mask_gt[].clone().cpu", "mask_ac[].clone().cpu", "mask_ac_0[].clone().cpu", "image_tgt[].clone", "mask_gt[].clone", "mask_ac[].clone", "mask_ac_0[].clone"], "methods", ["None"], ["", "def", "visualize_image", "(", "self", ",", "label", ",", "image_tgt", ",", "mask_gt", ",", "mask_ac", ",", "mask_ac_0", ",", "global_step", ")", ":", "\n", "        ", "grid_image", "=", "make_grid", "(", "image_tgt", "[", ":", "3", ",", ":", ",", ":", ",", ":", "]", ".", "clone", "(", ")", ".", "cpu", "(", ")", ".", "data", ",", "3", ",", "normalize", "=", "True", ")", "\n", "self", ".", "writer", ".", "add_image", "(", "'{}/Image'", ".", "format", "(", "label", ")", ",", "grid_image", ",", "global_step", ")", "\n", "\n", "grid_image", "=", "make_grid", "(", "mask_gt", "[", ":", "3", ",", ":", ",", ":", ",", ":", "]", ".", "clone", "(", ")", ".", "cpu", "(", ")", ".", "data", ",", "3", ",", "normalize", "=", "True", ")", "\n", "self", ".", "writer", ".", "add_image", "(", "'{}/Mask GT'", ".", "format", "(", "label", ")", ",", "grid_image", ",", "global_step", ")", "\n", "\n", "grid_image", "=", "make_grid", "(", "mask_ac", "[", ":", "3", ",", ":", ",", ":", ",", ":", "]", ".", "clone", "(", ")", ".", "cpu", "(", ")", ".", "data", ",", "3", ",", "normalize", "=", "True", ")", "\n", "self", ".", "writer", ".", "add_image", "(", "'{}/Mask AC - Last'", ".", "format", "(", "label", ")", ",", "grid_image", ",", "global_step", ")", "\n", "\n", "grid_image", "=", "make_grid", "(", "mask_ac_0", "[", ":", "3", ",", ":", ",", ":", ",", ":", "]", ".", "clone", "(", ")", ".", "cpu", "(", ")", ".", "data", ",", "3", ",", "normalize", "=", "True", ")", "\n", "self", ".", "writer", ".", "add_image", "(", "'{}/Mask Dec'", ".", "format", "(", "label", ")", ",", "grid_image", ",", "global_step", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.utils.topology.get_circle": [[7, 26], ["numpy.array", "scipy.spatial.Delaunay().simplices.copy", "[].to().repeat", "[].to().repeat().type", "[].to", "[].to().repeat", "range", "scipy.spatial.Delaunay", "math.floor", "math.floor", "[].to", "torch.Tensor", "math.cos", "math.sin", "torch.Tensor"], "function", ["None"], ["def", "get_circle", "(", "batch_size", ",", "masks_size", ",", "num_points", ",", "device", ")", ":", "\n", "    ", "half_dim", "=", "masks_size", "/", "2", "\n", "half_width", "=", "half_dim", "\n", "half_height", "=", "half_dim", "\n", "\n", "vert", "=", "np", ".", "array", "(", "[", "[", "\n", "half_width", "+", "math", ".", "floor", "(", "math", ".", "cos", "(", "2", "*", "math", ".", "pi", "/", "num_points", "*", "x", ")", "*", "10", ")", ",", "\n", "half_height", "+", "math", ".", "floor", "(", "math", ".", "sin", "(", "2", "*", "math", ".", "pi", "/", "num_points", "*", "x", ")", "*", "10", ")", "]", "\n", "for", "x", "in", "range", "(", "0", ",", "num_points", ")", "]", ")", "\n", "vert", "=", "(", "vert", "-", "half_dim", ")", "/", "half_dim", "\n", "\n", "tri", "=", "Delaunay", "(", "vert", ")", ".", "simplices", ".", "copy", "(", ")", "\n", "\n", "vert", "=", "torch", ".", "Tensor", "(", "vert", ")", "[", "None", ",", "None", ",", "...", "]", ".", "to", "(", "device", ")", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ",", "1", ")", "\n", "face", "=", "torch", ".", "Tensor", "(", "tri", ")", "[", "None", ",", "None", ",", "...", "]", ".", "to", "(", "device", ")", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ",", "1", ")", ".", "type", "(", "torch", ".", "int32", ")", "\n", "\n", "vert", "[", ":", ",", ":", ",", ":", ",", "1", "]", "=", "-", "vert", "[", ":", ",", ":", ",", ":", ",", "1", "]", "\n", "\n", "return", "vert", ",", "face", "\n", "", ""]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.utils.saver.Saver.__init__": [[11, 24], ["os.path.join", "sorted", "os.path.join", "glob.glob", "os.path.exists", "os.makedirs", "open", "json.dump", "os.path.join", "int", "str", "os.path.join", "saver.Saver.runs[].split"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "directory", "=", "os", ".", "path", ".", "join", "(", "'run'", ",", "args", ".", "train_dataset", ",", "args", ".", "checkname", ")", "\n", "self", ".", "runs", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "directory", ",", "'experiment_*'", ")", ")", ")", "\n", "run_id", "=", "int", "(", "self", ".", "runs", "[", "-", "1", "]", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", "+", "1", "if", "self", ".", "runs", "else", "0", "\n", "\n", "self", ".", "experiment_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "directory", ",", "'experiment_{}'", ".", "format", "(", "str", "(", "run_id", ")", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "experiment_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "experiment_dir", ")", "\n", "\n", "# Save args", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "experiment_dir", ",", "'commandline_args.txt'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "args", ".", "__dict__", ",", "f", ",", "indent", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.utils.saver.Saver.save_checkpoint": [[25, 53], ["os.path.join", "torch.save", "shutil.copyfile", "os.path.join", "open", "f.write", "max", "shutil.copyfile", "os.path.join", "str", "os.path.join", "os.path.exists", "shutil.copyfile", "os.path.join", "run.split", "os.path.join", "str", "open", "float", "previous_miou.append", "f.readline"], "methods", ["None"], ["", "", "def", "save_checkpoint", "(", "self", ",", "state", ",", "is_best", ",", "filename", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "        ", "\"\"\"Saves checkpoint to disk\"\"\"", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "experiment_dir", ",", "filename", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "shutil", ".", "copyfile", "(", "filename", ",", "os", ".", "path", ".", "join", "(", "self", ".", "directory", ",", "'model_last.pth.tar'", ")", ")", "\n", "if", "is_best", ":", "\n", "            ", "best_pred", "=", "state", "[", "'best_pred'", "]", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "experiment_dir", ",", "'best_pred.txt'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "str", "(", "best_pred", ")", ")", "\n", "", "if", "self", ".", "runs", ":", "\n", "                ", "previous_miou", "=", "[", "0.0", "]", "\n", "for", "run", "in", "self", ".", "runs", ":", "\n", "                    ", "run_id", "=", "run", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "directory", ",", "'experiment_{}'", ".", "format", "(", "str", "(", "run_id", ")", ")", ",", "'best_pred.txt'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "                        ", "try", ":", "\n", "                            ", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "                                ", "miou", "=", "float", "(", "f", ".", "readline", "(", ")", ")", "\n", "previous_miou", ".", "append", "(", "miou", ")", "\n", "", "", "except", ":", "\n", "                            ", "pass", "\n", "", "", "else", ":", "\n", "                        ", "continue", "\n", "", "", "max_miou", "=", "max", "(", "previous_miou", ")", "\n", "if", "best_pred", ">", "max_miou", ":", "\n", "                    ", "shutil", ".", "copyfile", "(", "filename", ",", "os", ".", "path", ".", "join", "(", "self", ".", "directory", ",", "'model_best.pth.tar'", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "shutil", ".", "copyfile", "(", "filename", ",", "os", ".", "path", ".", "join", "(", "self", ".", "directory", ",", "'model_best.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.utils.saver.Saver.save_experiment_config": [[54, 65], ["os.path.join", "open", "collections.OrderedDict", "collections.OrderedDict.items", "open.close", "open.write", "str"], "methods", ["None"], ["", "", "", "def", "save_experiment_config", "(", "self", ")", ":", "\n", "        ", "logfile", "=", "os", ".", "path", ".", "join", "(", "self", ".", "experiment_dir", ",", "'parameters.txt'", ")", "\n", "log_file", "=", "open", "(", "logfile", ",", "'w'", ")", "\n", "p", "=", "OrderedDict", "(", ")", "\n", "p", "[", "'train_dataset'", "]", "=", "self", ".", "args", ".", "train_dataset", "\n", "p", "[", "'lr'", "]", "=", "self", ".", "args", ".", "lr", "\n", "p", "[", "'epochs'", "]", "=", "self", ".", "args", ".", "epochs", "\n", "\n", "for", "key", ",", "val", "in", "p", ".", "items", "(", ")", ":", "\n", "            ", "log_file", ".", "write", "(", "key", "+", "':'", "+", "str", "(", "val", ")", "+", "'\\n'", ")", "\n", "", "log_file", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.models.networks.CircleNet.__init__": [[15, 40], ["torch.nn.Module.__init__", "neural_renderer.Renderer", "backbones.resnet.resnet50", "backbones.resnet.Decoder", "backbones.unet.Encoder", "backbones.unet.Decoder"], "methods", ["home.repos.pwc.inspect_result.shirgur_ACDRNet.data.cityscapes_instances.CityscapesInstances_comp.__init__", "home.repos.pwc.inspect_result.shirgur_ACDRNet.backbones.resnet.resnet50"], ["    ", "def", "__init__", "(", "self", ",", "\n", "args", ")", ":", "\n", "        ", "super", "(", "CircleNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_nudes", "=", "args", ".", "num_nodes", "\n", "self", ".", "dec_dim", "=", "args", ".", "dec_dim", "\n", "self", ".", "dec_size", "=", "args", ".", "dec_size", "\n", "self", ".", "image_size", "=", "args", ".", "image_size", "\n", "self", ".", "stages", "=", "args", ".", "stages", "\n", "\n", "if", "args", ".", "arch", "==", "'resnet'", ":", "\n", "            ", "kwargs", "=", "{", "'stages'", ":", "self", ".", "stages", "}", "\n", "res_dims", "=", "[", "256", ",", "512", ",", "1024", ",", "2048", "]", "\n", "self", ".", "backbone", "=", "resnet_encoder", "(", "pretrained", "=", "True", ",", "**", "kwargs", ")", "\n", "dec_skip_dims", "=", "[", "res_dims", "[", "i", "]", "for", "i", "in", "self", ".", "stages", "]", "[", ":", ":", "-", "1", "]", "\n", "self", ".", "disp", "=", "resnet_decoder", "(", "dec_skip_dims", ",", "2", ",", "self", ".", "dec_dim", ",", "self", ".", "dec_size", ",", "drop", "=", "args", ".", "drop", ")", "\n", "", "elif", "args", ".", "arch", "==", "'unet'", ":", "\n", "            ", "self", ".", "backbone", "=", "unet_encoder", "(", "args", ".", "enc_dim", ",", "drop", "=", "args", ".", "drop", ")", "\n", "self", ".", "disp", "=", "unet_decoder", "(", "self", ".", "backbone", ".", "dims", ",", "drop", "=", "args", ".", "drop", ")", "\n", "\n", "", "self", ".", "texture_size", "=", "2", "\n", "self", ".", "camera_distance", "=", "1", "\n", "self", ".", "elevation", "=", "0", "\n", "self", ".", "azimuth", "=", "0", "\n", "self", ".", "renderer", "=", "nr", ".", "Renderer", "(", "camera_mode", "=", "'look_at'", ",", "image_size", "=", "self", ".", "image_size", ",", "light_intensity_ambient", "=", "1", ",", "\n", "light_intensity_directional", "=", "1", ",", "perspective", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.models.networks.CircleNet.forward": [[41, 78], ["networks.CircleNet.backbone", "utils.topology.get_circle", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "range", "networks.CircleNet.disp", "torch.grid_sample().transpose", "torch.grid_sample().transpose", "torch.grid_sample().transpose", "torch.grid_sample().transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze().to", "torch.squeeze().to", "torch.squeeze().to", "torch.squeeze().to", "networks.CircleNet.renderer().unsqueeze", "output_masks.append", "output_points.append", "torch.interpolate", "torch.interpolate", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "networks.CircleNet.renderer"], "methods", ["home.repos.pwc.inspect_result.shirgur_ACDRNet.utils.topology.get_circle"], ["", "def", "forward", "(", "self", ",", "x", ",", "iter", "=", "3", ")", ":", "\n", "        ", "features", "=", "self", ".", "backbone", "(", "x", ")", "\n", "\n", "nodes", ",", "faces", "=", "get_circle", "(", "x", ".", "shape", "[", "0", "]", ",", "self", ".", "dec_size", ",", "self", ".", "num_nudes", ",", "x", ".", "device", ")", "\n", "\n", "output_masks", "=", "[", "]", "\n", "output_points", "=", "[", "]", "\n", "\n", "disp", "=", "torch", ".", "tanh", "(", "self", ".", "disp", "(", "features", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "iter", ")", ":", "\n", "            ", "if", "disp", ".", "shape", "[", "2", ":", "]", "!=", "x", ".", "shape", "[", "2", ":", "]", ":", "\n", "                ", "disp", "=", "F", ".", "interpolate", "(", "disp", ",", "size", "=", "x", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "", "nodes", "[", "...", ",", "1", "]", "=", "nodes", "[", "...", ",", "1", "]", "*", "-", "1", "\n", "# Sample and move", "\n", "Pxx", "=", "F", ".", "grid_sample", "(", "disp", "[", ":", ",", "0", ":", "1", "]", ",", "nodes", ")", ".", "transpose", "(", "3", ",", "2", ")", "\n", "Pyy", "=", "F", ".", "grid_sample", "(", "disp", "[", ":", ",", "1", ":", "2", "]", ",", "nodes", ")", ".", "transpose", "(", "3", ",", "2", ")", "\n", "dP", "=", "torch", ".", "cat", "(", "(", "Pxx", ",", "Pyy", ")", ",", "-", "1", ")", "\n", "nodes", "=", "nodes", "+", "dP", "\n", "nodes", "[", "...", ",", "1", "]", "=", "nodes", "[", "...", ",", "1", "]", "*", "-", "1", "\n", "\n", "# Render mask", "\n", "z", "=", "torch", ".", "ones", "(", "(", "nodes", ".", "shape", "[", "0", "]", ",", "1", ",", "nodes", ".", "shape", "[", "2", "]", ",", "1", ")", ")", ".", "to", "(", "nodes", ".", "device", ")", "\n", "P3d", "=", "torch", ".", "cat", "(", "(", "nodes", ",", "z", ")", ",", "3", ")", "\n", "P3d", "=", "torch", ".", "squeeze", "(", "P3d", ",", "dim", "=", "1", ")", "\n", "faces", "=", "torch", ".", "squeeze", "(", "faces", ",", "dim", "=", "1", ")", ".", "to", "(", "nodes", ".", "device", ")", "\n", "mask", "=", "self", ".", "renderer", "(", "P3d", ",", "faces", ",", "mode", "=", "'silhouettes'", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "# Stack outputs", "\n", "output_masks", ".", "append", "(", "mask", ")", "\n", "output_points", ".", "append", "(", "nodes", ")", "\n", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "return", "output_masks", ",", "output_points", "\n", "", "else", ":", "\n", "            ", "return", "output_masks", "[", "-", "1", "]", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.models.loss_functions.dist_loss": [[4, 11], ["P.roll", "torch.sum().mean", "torch.sum"], "function", ["None"], ["def", "dist_loss", "(", "points", ")", ":", "\n", "    ", "P", "=", "points", "\n", "Pb", "=", "P", ".", "roll", "(", "1", ",", "dims", "=", "2", ")", "\n", "\n", "D", "=", "(", "P", "-", "Pb", ")", "**", "2", "\n", "\n", "return", "torch", ".", "sum", "(", "D", ",", "dim", "=", "[", "-", "2", ",", "-", "1", "]", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.models.loss_functions.curvature_loss": [[13, 21], ["P.roll", "P.roll", "torch.norm().mean", "torch.norm"], "function", ["None"], ["", "def", "curvature_loss", "(", "points", ")", ":", "\n", "    ", "P", "=", "points", "\n", "Pf", "=", "P", ".", "roll", "(", "-", "1", ",", "dims", "=", "2", ")", "\n", "Pb", "=", "P", ".", "roll", "(", "1", ",", "dims", "=", "2", ")", "\n", "\n", "K", "=", "Pf", "+", "Pb", "-", "2", "*", "P", "\n", "\n", "return", "torch", ".", "norm", "(", "K", ",", "dim", "=", "-", "1", ")", ".", "mean", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.backbones.unet.EmbeddingBlock.__init__": [[10, 19], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.shirgur_ACDRNet.data.cityscapes_instances.CityscapesInstances_comp.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "drop", "=", "0", ")", ":", "\n", "        ", "super", "(", "EmbeddingBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Dropout2d", "(", "drop", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_channels", ",", "out_channels", ",", "kernel_size", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Dropout2d", "(", "drop", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.backbones.unet.EmbeddingBlock.forward": [[21, 23], ["unet.EmbeddingBlock.block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "block", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.backbones.unet.DownBlock.__init__": [[26, 40], ["torch.Module.__init__", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.shirgur_ACDRNet.data.cityscapes_instances.CityscapesInstances_comp.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "drop", "=", "0", ")", ":", "\n", "        ", "super", "(", "DownBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "padding", "=", "int", "(", "(", "kernel_size", "-", "1", ")", "/", "2", ")", "\n", "\n", "self", ".", "block_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "padding", ")", ",", "\n", "nn", ".", "Dropout2d", "(", "drop", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "padding", ")", ",", "\n", "nn", ".", "Dropout2d", "(", "drop", ")", "\n", ")", "\n", "self", ".", "block_mp", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.backbones.unet.DownBlock.forward": [[42, 46], ["unet.DownBlock.block_conv", "unet.DownBlock.block_mp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x_in", ")", ":", "\n", "        ", "x1", "=", "self", ".", "block_conv", "(", "x_in", ")", "\n", "x1_pool", "=", "self", ".", "block_mp", "(", "x1", ")", "\n", "return", "x1", ",", "x1_pool", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.backbones.unet.UpBlock.__init__": [[49, 61], ["torch.Module.__init__", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.shirgur_ACDRNet.data.cityscapes_instances.CityscapesInstances_comp.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "drop", "=", "0", ",", "act", "=", "None", ")", ":", "\n", "        ", "super", "(", "UpBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "act", "=", "act", "\n", "padding", "=", "int", "(", "(", "kernel_size", "-", "1", ")", "/", "2", ")", "\n", "\n", "self", ".", "block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "padding", ")", ",", "\n", "nn", ".", "Dropout2d", "(", "drop", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "padding", ")", ",", "\n", "nn", ".", "Dropout2d", "(", "drop", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.backbones.unet.UpBlock.forward": [[63, 71], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet.UpBlock.block", "getattr"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x_in", ",", "x_up", ")", ":", "\n", "        ", "x_cat", "=", "torch", ".", "cat", "(", "(", "x_in", ",", "x_up", ")", ",", "1", ")", "\n", "x", "=", "self", ".", "block", "(", "x_cat", ")", "\n", "\n", "if", "self", ".", "act", "is", "not", "None", ":", "\n", "            ", "x", "=", "getattr", "(", "F", ",", "self", ".", "act", ")", "(", "x", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.backbones.unet.Encoder.__init__": [[74, 80], ["torch.Module.__init__", "unet.DownBlock", "unet.DownBlock", "unet.DownBlock"], "methods", ["home.repos.pwc.inspect_result.shirgur_ACDRNet.data.cityscapes_instances.CityscapesInstances_comp.__init__"], ["    ", "def", "__init__", "(", "self", ",", "enc_dim", ",", "drop", "=", "0", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dims", "=", "[", "enc_dim", "//", "4", ",", "enc_dim", "//", "2", ",", "enc_dim", ",", "enc_dim", "]", "\n", "self", ".", "down1", "=", "DownBlock", "(", "3", ",", "self", ".", "dims", "[", "-", "4", "]", ",", "drop", "=", "drop", ")", "\n", "self", ".", "down2", "=", "DownBlock", "(", "self", ".", "dims", "[", "-", "4", "]", ",", "self", ".", "dims", "[", "-", "3", "]", ",", "drop", "=", "drop", ")", "\n", "self", ".", "down3", "=", "DownBlock", "(", "self", ".", "dims", "[", "-", "3", "]", ",", "self", ".", "dims", "[", "-", "2", "]", ",", "drop", "=", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.backbones.unet.Encoder.forward": [[81, 86], ["unet.Encoder.down1", "unet.Encoder.down2", "unet.Encoder.down3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x_in", ")", ":", "\n", "        ", "(", "x1", ",", "x1_pool", ")", "=", "self", ".", "down1", "(", "x_in", ")", "\n", "(", "x2", ",", "x2_pool", ")", "=", "self", ".", "down2", "(", "x1_pool", ")", "\n", "(", "x3", ",", "x3_pool", ")", "=", "self", ".", "down3", "(", "x2_pool", ")", "\n", "return", "x1", ",", "x2", ",", "x3", ",", "x3_pool", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.backbones.unet.Decoder.__init__": [[89, 95], ["torch.Module.__init__", "unet.EmbeddingBlock", "unet.UpBlock", "unet.UpBlock", "unet.UpBlock"], "methods", ["home.repos.pwc.inspect_result.shirgur_ACDRNet.data.cityscapes_instances.CityscapesInstances_comp.__init__"], ["    ", "def", "__init__", "(", "self", ",", "res_dims", ",", "drop", "=", "0", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embedding", "=", "EmbeddingBlock", "(", "res_dims", "[", "-", "1", "]", ",", "res_dims", "[", "-", "1", "]", ",", "drop", "=", "drop", ")", "\n", "self", ".", "up3", "=", "UpBlock", "(", "2", "*", "res_dims", "[", "-", "1", "]", ",", "res_dims", "[", "-", "2", "]", ",", "act", "=", "'relu'", ",", "drop", "=", "drop", ")", "\n", "self", ".", "up2", "=", "UpBlock", "(", "2", "*", "res_dims", "[", "-", "2", "]", ",", "res_dims", "[", "-", "3", "]", ",", "act", "=", "'relu'", ",", "drop", "=", "drop", ")", "\n", "self", ".", "up1", "=", "UpBlock", "(", "2", "*", "res_dims", "[", "-", "3", "]", ",", "2", ",", "act", "=", "None", ",", "drop", "=", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.backbones.unet.Decoder.forward": [[96, 105], ["unet.Decoder.embedding", "unet.Decoder.up3", "unet.Decoder.up2", "unet.Decoder.up1", "type"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ")", ":", "\n", "        ", "assert", "type", "(", "features", ")", "in", "(", "tuple", ",", "list", ")", ",", "'x must be a list'", "\n", "\n", "x_emb", "=", "self", ".", "embedding", "(", "features", "[", "-", "1", "]", ")", "\n", "x", "=", "self", ".", "up3", "(", "x_emb", ",", "features", "[", "-", "1", "]", ")", "\n", "x", "=", "self", ".", "up2", "(", "x", ",", "features", "[", "-", "2", "]", ")", "\n", "x", "=", "self", ".", "up1", "(", "x", ",", "features", "[", "-", "3", "]", ")", "\n", "\n", "return", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.backbones.resnet.Decoder.__init__": [[22, 83], ["torch.Module.__init__", "len", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Dropout", "torch.Dropout", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "resnet.Decoder.skips.append", "resnet.Decoder.upsamplings.append", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.shirgur_ACDRNet.data.cityscapes_instances.CityscapesInstances_comp.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "input_dims", ",", "\n", "output_dim", ",", "\n", "base_dim", ",", "\n", "output_size", ",", "\n", "drop", "=", "0.2", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_dims", "=", "input_dims", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "base_dim", "=", "base_dim", "\n", "self", ".", "num_stages", "=", "len", "(", "input_dims", ")", "\n", "self", ".", "output_size", "=", "output_size", "\n", "\n", "self", ".", "upsamplings", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "skips", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "self", ".", "first", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "input_dims", "[", "0", "]", ",", "self", ".", "input_dims", "[", "0", "]", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "Dropout", "(", "drop", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "input_dims", "[", "0", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "self", ".", "input_dims", "[", "0", "]", ",", "self", ".", "input_dims", "[", "0", "]", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "input_dims", "[", "0", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "\n", "output_up_dim", "=", "self", ".", "input_dims", "[", "1", "]", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "num_stages", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "input_dec_dim", "=", "self", ".", "input_dims", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "input_dec_dim", "=", "self", ".", "input_dims", "[", "i", "]", "+", "base_dim", "\n", "\n", "", "if", "i", "==", "self", ".", "num_stages", "-", "1", ":", "\n", "                ", "output_up_dim", "=", "self", ".", "input_dims", "[", "i", "]", "//", "2", "\n", "", "else", ":", "\n", "                ", "output_up_dim", "=", "self", ".", "input_dims", "[", "i", "+", "1", "]", "\n", "\n", "", "conv_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_dec_dim", ",", "output_up_dim", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "output_up_dim", ",", "output_up_dim", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "output_up_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "skip", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "input_dims", "[", "i", "]", ",", "base_dim", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "base_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "skips", ".", "append", "(", "skip", ")", "\n", "self", ".", "upsamplings", ".", "append", "(", "conv_block", ")", "\n", "\n", "", "self", ".", "prediction", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Upsample", "(", "size", "=", "(", "output_size", ",", "output_size", ")", ",", "mode", "=", "'bilinear'", ")", ",", "\n", "nn", ".", "Conv2d", "(", "output_up_dim", ",", "output_up_dim", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "output_up_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "output_up_dim", ",", "self", ".", "output_dim", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "output_dim", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.backbones.resnet.Decoder.forward": [[85, 103], ["resnet.Decoder.first", "range", "resnet.Decoder.prediction", "type", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "F.interpolate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ")", ":", "\n", "        ", "assert", "type", "(", "features", ")", "is", "list", ",", "'x must be a list'", "\n", "\n", "x", "=", "features", "[", "0", "]", "\n", "x", "=", "self", ".", "first", "(", "x", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_stages", ")", ":", "\n", "            ", "if", "i", ">", "0", ":", "\n", "                ", "if", "x", ".", "shape", "[", "2", ":", "]", "!=", "features", "[", "i", "]", ".", "shape", "[", "2", ":", "]", ":", "\n", "                    ", "x", "=", "F", ".", "interpolate", "(", "x", ",", "size", "=", "features", "[", "i", "]", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", "\n", "", "skip", "=", "self", ".", "skips", "[", "i", "]", "(", "features", "[", "i", "]", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "skip", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "x", "=", "self", ".", "upsamplings", "[", "i", "]", "(", "x", ")", "\n", "\n", "", "output", "=", "self", ".", "prediction", "(", "x", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.backbones.resnet.BasicBlock.__init__": [[119, 136], ["torch.Module.__init__", "resnet.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.shirgur_ACDRNet.data.cityscapes_instances.CityscapesInstances_comp.__init__", "home.repos.pwc.inspect_result.shirgur_ACDRNet.backbones.resnet.conv3x3", "home.repos.pwc.inspect_result.shirgur_ACDRNet.backbones.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.backbones.resnet.BasicBlock.forward": [[137, 154], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.backbones.resnet.Bottleneck.__init__": [[159, 175], ["torch.Module.__init__", "resnet.conv1x1", "norm_layer", "resnet.conv3x3", "norm_layer", "resnet.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.shirgur_ACDRNet.data.cityscapes_instances.CityscapesInstances_comp.__init__", "home.repos.pwc.inspect_result.shirgur_ACDRNet.backbones.resnet.conv1x1", "home.repos.pwc.inspect_result.shirgur_ACDRNet.backbones.resnet.conv3x3", "home.repos.pwc.inspect_result.shirgur_ACDRNet.backbones.resnet.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.backbones.resnet.Bottleneck.forward": [[176, 197], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.backbones.resnet.ResNet.__init__": [[201, 250], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet.modules", "len", "ValueError", "isinstance", "resnet.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.shirgur_ACDRNet.data.cityscapes_instances.CityscapesInstances_comp.__init__", "home.repos.pwc.inspect_result.shirgur_ACDRNet.backbones.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.shirgur_ACDRNet.backbones.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.shirgur_ACDRNet.backbones.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.shirgur_ACDRNet.backbones.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "zero_init_residual", "=", "False", ",", "\n", "groups", "=", "1", ",", "width_per_group", "=", "64", ",", "replace_stride_with_dilation", "=", "None", ",", "\n", "norm_layer", "=", "None", ",", "stages", "=", "(", "0", ",", "1", ",", "2", ",", "3", ")", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stages", "=", "stages", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.backbones.resnet.ResNet._make_layer": [[251, 274], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.shirgur_ACDRNet.backbones.resnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ")", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.backbones.resnet.ResNet.forward": [[275, 299], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "stages.append", "stages.append", "stages.append", "stages.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "stages", "=", "[", "]", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "if", "0", "in", "self", ".", "stages", ":", "\n", "            ", "stages", ".", "append", "(", "x", ")", "\n", "", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "if", "1", "in", "self", ".", "stages", ":", "\n", "            ", "stages", ".", "append", "(", "x", ")", "\n", "", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "if", "2", "in", "self", ".", "stages", ":", "\n", "            ", "stages", ".", "append", "(", "x", ")", "\n", "", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "if", "3", "in", "self", ".", "stages", ":", "\n", "            ", "stages", ".", "append", "(", "x", ")", "\n", "\n", "", "if", "not", "stages", ":", "\n", "            ", "return", "[", "x", "]", "\n", "", "else", ":", "\n", "            ", "return", "stages", "[", ":", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.backbones.resnet.conv3x3": [[105, 109], ["torch.Conv2d"], "function", ["None"], ["", "", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.backbones.resnet.conv1x1": [[111, 114], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.backbones.resnet._resnet": [[301, 308], ["resnet.ResNet", "torchvision.models.utils.load_state_dict_from_url", "ResNet.load_state_dict"], "function", ["None"], ["", "", "", "def", "_resnet", "(", "arch", ",", "block", ",", "layers", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "arch", "]", ",", "\n", "progress", "=", "progress", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.backbones.resnet.resnet18": [[310, 319], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.shirgur_ACDRNet.backbones.resnet._resnet"], ["", "def", "resnet18", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet18'", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.backbones.resnet.resnet34": [[321, 330], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.shirgur_ACDRNet.backbones.resnet._resnet"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet34'", ",", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.backbones.resnet.resnet50": [[332, 341], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.shirgur_ACDRNet.backbones.resnet._resnet"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet50'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.backbones.resnet.resnet101": [[343, 352], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.shirgur_ACDRNet.backbones.resnet._resnet"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet101'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.backbones.resnet.resnet152": [[354, 363], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.shirgur_ACDRNet.backbones.resnet._resnet"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet152'", ",", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.backbones.resnet.resnext50_32x4d": [[365, 376], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.shirgur_ACDRNet.backbones.resnet._resnet"], ["", "def", "resnext50_32x4d", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNeXt-50 32x4d model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "4", "\n", "return", "_resnet", "(", "'resnext50_32x4d'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.backbones.resnet.resnext101_32x8d": [[378, 389], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.shirgur_ACDRNet.backbones.resnet._resnet"], ["", "def", "resnext101_32x8d", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNeXt-101 32x8d model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "8", "\n", "return", "_resnet", "(", "'resnext101_32x8d'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.Compose.__init__": [[43, 45], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.Compose.__call__": [[46, 50], ["t"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "img", ",", "mask", "=", "t", "(", "img", ",", "mask", ")", "\n", "", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.ToTensor.__call__": [[53, 58], ["torch.from_numpy().permute().float", "torch.from_numpy().float", "torch.from_numpy().permute", "torch.from_numpy", "numpy.array", "torch.from_numpy", "numpy.array"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "# return F.to_tensor(img), F.to_tensor(mask)", "\n", "        ", "img", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "img", ")", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "float", "(", ")", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "mask", ")", ")", ".", "float", "(", ")", "\n", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.ToPILImage.__init__": [[61, 63], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mode", "=", "None", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.ToPILImage.__call__": [[64, 66], ["torchvision.transforms.functional.to_pil_image", "torchvision.transforms.functional.to_pil_image"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "return", "F", ".", "to_pil_image", "(", "img", ",", "self", ".", "mode", ")", ",", "F", ".", "to_pil_image", "(", "mask", ",", "self", ".", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.Normalize.__init__": [[69, 73], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ",", "inplace", "=", "False", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "self", ".", "inplace", "=", "inplace", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.Normalize.__call__": [[74, 76], ["torchvision.transforms.functional.normalize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "return", "F", ".", "normalize", "(", "img", ",", "self", ".", "mean", ",", "self", ".", "std", ",", "self", ".", "inplace", ")", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.NormalizeInstance.__call__": [[79, 85], ["img.reshape().mean().unsqueeze().unsqueeze", "img.reshape().std().unsqueeze().unsqueeze", "img.reshape().mean().unsqueeze", "img.reshape().std().unsqueeze", "img.reshape().mean", "img.reshape().std", "img.reshape", "img.reshape"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "img", "=", "img", "/", "255", "\n", "mean", "=", "img", ".", "reshape", "(", "3", ",", "-", "1", ")", ".", "mean", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "std", "=", "img", ".", "reshape", "(", "3", ",", "-", "1", ")", ".", "std", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "norm_img", "=", "(", "img", "-", "mean", ")", "/", "(", "std", "+", "1e-8", ")", "\n", "return", "norm_img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.Resize.__init__": [[88, 93], ["isinstance", "isinstance", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "interpolation", "=", "Image", ".", "BILINEAR", ",", "do_mask", "=", "True", ")", ":", "\n", "        ", "assert", "isinstance", "(", "size", ",", "int", ")", "or", "(", "isinstance", "(", "size", ",", "Iterable", ")", "and", "len", "(", "size", ")", "==", "2", ")", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "self", ".", "do_mask", "=", "do_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.Resize.__call__": [[94, 99], ["torchvision.transforms.functional.resize", "torchvision.transforms.functional.resize", "torchvision.transforms.functional.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "if", "self", ".", "do_mask", ":", "\n", "            ", "return", "F", ".", "resize", "(", "img", ",", "self", ".", "size", ",", "self", ".", "interpolation", ")", ",", "F", ".", "resize", "(", "mask", ",", "self", ".", "size", ",", "Image", ".", "NEAREST", ")", "\n", "", "else", ":", "\n", "            ", "return", "F", ".", "resize", "(", "img", ",", "self", ".", "size", ",", "self", ".", "interpolation", ")", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.CenterCrop.__init__": [[102, 107], ["isinstance", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.CenterCrop.__call__": [[108, 110], ["torchvision.transforms.functional.center_crop", "torchvision.transforms.functional.center_crop"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "return", "F", ".", "center_crop", "(", "img", ",", "self", ".", "size", ")", ",", "F", ".", "center_crop", "(", "mask", ",", "self", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.Pad.__init__": [[113, 124], ["isinstance", "isinstance", "isinstance", "ValueError", "len", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "padding", ",", "fill", "=", "0", ",", "padding_mode", "=", "'constant'", ")", ":", "\n", "        ", "assert", "isinstance", "(", "padding", ",", "(", "numbers", ".", "Number", ",", "tuple", ")", ")", "\n", "assert", "isinstance", "(", "fill", ",", "(", "numbers", ".", "Number", ",", "str", ",", "tuple", ")", ")", "\n", "assert", "padding_mode", "in", "[", "'constant'", ",", "'edge'", ",", "'reflect'", ",", "'symmetric'", "]", "\n", "if", "isinstance", "(", "padding", ",", "Sequence", ")", "and", "len", "(", "padding", ")", "not", "in", "[", "2", ",", "4", "]", ":", "\n", "            ", "raise", "ValueError", "(", "\"Padding must be an int or a 2, or 4 element tuple, not a \"", "+", "\n", "\"{} element tuple\"", ".", "format", "(", "len", "(", "padding", ")", ")", ")", "\n", "\n", "", "self", ".", "padding", "=", "padding", "\n", "self", ".", "fill", "=", "fill", "\n", "self", ".", "padding_mode", "=", "padding_mode", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.Pad.__call__": [[125, 128], ["torchvision.transforms.functional.pad", "torchvision.transforms.functional.pad"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "return", "F", ".", "pad", "(", "img", ",", "self", ".", "padding", ",", "self", ".", "fill", ",", "self", ".", "padding_mode", ")", ",", "F", ".", "pad", "(", "mask", ",", "self", ".", "padding", ",", "self", ".", "fill", ",", "self", ".", "padding_mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.Lambda.__init__": [[131, 134], ["callable", "repr", "type"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "lambd", ")", ":", "\n", "        ", "assert", "callable", "(", "lambd", ")", ",", "repr", "(", "type", "(", "lambd", ")", ".", "__name__", ")", "+", "\" object is not callable\"", "\n", "self", ".", "lambd", "=", "lambd", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.Lambda.__call__": [[135, 137], ["transforms.Lambda.lambd", "transforms.Lambda.lambd"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "return", "self", ".", "lambd", "(", "img", ")", ",", "self", ".", "lambd", "(", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.Lambda_image.__init__": [[140, 143], ["callable", "repr", "type"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "lambd", ")", ":", "\n", "        ", "assert", "callable", "(", "lambd", ")", ",", "repr", "(", "type", "(", "lambd", ")", ".", "__name__", ")", "+", "\" object is not callable\"", "\n", "self", ".", "lambd", "=", "lambd", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.Lambda_image.__call__": [[144, 146], ["transforms.Lambda_image.lambd"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "return", "self", ".", "lambd", "(", "img", ")", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.RandomTransforms.__init__": [[149, 152], ["isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "assert", "isinstance", "(", "transforms", ",", "(", "list", ",", "tuple", ")", ")", "\n", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.RandomTransforms.__call__": [[153, 155], ["NotImplementedError"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.RandomApply.__init__": [[158, 161], ["transforms.RandomTransforms.__init__"], "methods", ["home.repos.pwc.inspect_result.shirgur_ACDRNet.data.cityscapes_instances.CityscapesInstances_comp.__init__"], ["    ", "def", "__init__", "(", "self", ",", "transforms", ",", "p", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "RandomApply", ",", "self", ")", ".", "__init__", "(", "transforms", ")", "\n", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.RandomApply.__call__": [[162, 168], ["random.random", "t"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "if", "self", ".", "p", "<", "random", ".", "random", "(", ")", ":", "\n", "            ", "return", "img", ",", "mask", "\n", "", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "img", ",", "mask", "=", "t", "(", "img", ",", "mask", ")", "\n", "", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.RandomOrder.__call__": [[171, 177], ["list", "random.shuffle", "range", "len"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "order", "=", "list", "(", "range", "(", "len", "(", "self", ".", "transforms", ")", ")", ")", "\n", "random", ".", "shuffle", "(", "order", ")", "\n", "for", "i", "in", "order", ":", "\n", "            ", "img", ",", "mask", "=", "self", ".", "transforms", "[", "i", "]", "(", "img", ",", "mask", ")", "\n", "", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.RandomChoice.__call__": [[180, 183], ["random.choice", "random.choice."], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "t", "=", "random", ".", "choice", "(", "self", ".", "transforms", ")", "\n", "return", "t", "(", "img", ",", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.RandomCrop.__init__": [[186, 195], ["isinstance", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "padding", "=", "None", ",", "pad_if_needed", "=", "False", ",", "fill", "=", "0", ",", "padding_mode", "=", "'constant'", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "", "self", ".", "padding", "=", "padding", "\n", "self", ".", "pad_if_needed", "=", "pad_if_needed", "\n", "self", ".", "fill", "=", "fill", "\n", "self", ".", "padding_mode", "=", "padding_mode", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.RandomCrop.get_params": [[196, 206], ["random.randint", "random.randint"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_params", "(", "img", ",", "output_size", ")", ":", "\n", "        ", "w", ",", "h", "=", "img", ".", "size", "\n", "th", ",", "tw", "=", "output_size", "\n", "if", "w", "==", "tw", "and", "h", "==", "th", ":", "\n", "            ", "return", "0", ",", "0", ",", "h", ",", "w", "\n", "\n", "", "i", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "th", ")", "\n", "j", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "tw", ")", "\n", "return", "i", ",", "j", ",", "th", ",", "tw", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.RandomCrop.__call__": [[207, 221], ["transforms.RandomCrop.get_params", "torchvision.transforms.functional.pad", "torchvision.transforms.functional.pad", "torchvision.transforms.functional.pad", "torchvision.transforms.functional.crop", "torchvision.transforms.functional.crop"], "methods", ["home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.RandomAffineFromSet.get_params"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "if", "self", ".", "padding", "is", "not", "None", ":", "\n", "            ", "img", "=", "F", ".", "pad", "(", "img", ",", "self", ".", "padding", ",", "self", ".", "fill", ",", "self", ".", "padding_mode", ")", "\n", "\n", "# pad the width if needed", "\n", "", "if", "self", ".", "pad_if_needed", "and", "img", ".", "size", "[", "0", "]", "<", "self", ".", "size", "[", "1", "]", ":", "\n", "            ", "img", "=", "F", ".", "pad", "(", "img", ",", "(", "self", ".", "size", "[", "1", "]", "-", "img", ".", "size", "[", "0", "]", ",", "0", ")", ",", "self", ".", "fill", ",", "self", ".", "padding_mode", ")", "\n", "# pad the height if needed", "\n", "", "if", "self", ".", "pad_if_needed", "and", "img", ".", "size", "[", "1", "]", "<", "self", ".", "size", "[", "0", "]", ":", "\n", "            ", "img", "=", "F", ".", "pad", "(", "img", ",", "(", "0", ",", "self", ".", "size", "[", "0", "]", "-", "img", ".", "size", "[", "1", "]", ")", ",", "self", ".", "fill", ",", "self", ".", "padding_mode", ")", "\n", "\n", "", "i", ",", "j", ",", "h", ",", "w", "=", "self", ".", "get_params", "(", "img", ",", "self", ".", "size", ")", "\n", "\n", "return", "F", ".", "crop", "(", "img", ",", "i", ",", "j", ",", "h", ",", "w", ")", ",", "F", ".", "crop", "(", "mask", ",", "i", ",", "j", ",", "h", ",", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.RandomHorizontalFlip.__init__": [[224, 226], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "p", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.RandomHorizontalFlip.__call__": [[227, 231], ["random.random", "torchvision.transforms.functional.hflip", "torchvision.transforms.functional.hflip"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p", ":", "\n", "            ", "return", "F", ".", "hflip", "(", "img", ")", ",", "F", ".", "hflip", "(", "mask", ")", "\n", "", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.RandomVerticalFlip.__init__": [[234, 236], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "p", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.RandomVerticalFlip.__call__": [[237, 241], ["random.random", "torchvision.transforms.functional.vflip", "torchvision.transforms.functional.vflip"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p", ":", "\n", "            ", "return", "F", ".", "vflip", "(", "img", ")", ",", "F", ".", "vflip", "(", "mask", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.RandomPerspective.__init__": [[244, 248], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "distortion_scale", "=", "0.5", ",", "p", "=", "0.5", ",", "interpolation", "=", "Image", ".", "BICUBIC", ")", ":", "\n", "        ", "self", ".", "p", "=", "p", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "self", ".", "distortion_scale", "=", "distortion_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.RandomPerspective.__call__": [[249, 259], ["torchvision.transforms.functional._is_pil_image", "TypeError", "random.random", "transforms.RandomPerspective.get_params", "torchvision.transforms.functional.perspective", "torchvision.transforms.functional.perspective", "type"], "methods", ["home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.RandomAffineFromSet.get_params"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "if", "not", "F", ".", "_is_pil_image", "(", "img", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'img should be PIL Image. Got {}'", ".", "format", "(", "type", "(", "img", ")", ")", ")", "\n", "\n", "", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p", ":", "\n", "            ", "width", ",", "height", "=", "img", ".", "size", "\n", "startpoints", ",", "endpoints", "=", "self", ".", "get_params", "(", "width", ",", "height", ",", "self", ".", "distortion_scale", ")", "\n", "return", "F", ".", "perspective", "(", "img", ",", "startpoints", ",", "endpoints", ",", "self", ".", "interpolation", ")", ",", "F", ".", "perspective", "(", "mask", ",", "startpoints", ",", "endpoints", ",", "Image", ".", "NEAREST", ")", "\n", "", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.RandomPerspective.get_params": [[260, 275], ["int", "int", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "random.randint", "int", "int", "int", "int", "int", "int", "int", "int"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_params", "(", "width", ",", "height", ",", "distortion_scale", ")", ":", "\n", "        ", "half_height", "=", "int", "(", "height", "/", "2", ")", "\n", "half_width", "=", "int", "(", "width", "/", "2", ")", "\n", "topleft", "=", "(", "random", ".", "randint", "(", "0", ",", "int", "(", "distortion_scale", "*", "half_width", ")", ")", ",", "\n", "random", ".", "randint", "(", "0", ",", "int", "(", "distortion_scale", "*", "half_height", ")", ")", ")", "\n", "topright", "=", "(", "random", ".", "randint", "(", "width", "-", "int", "(", "distortion_scale", "*", "half_width", ")", "-", "1", ",", "width", "-", "1", ")", ",", "\n", "random", ".", "randint", "(", "0", ",", "int", "(", "distortion_scale", "*", "half_height", ")", ")", ")", "\n", "botright", "=", "(", "random", ".", "randint", "(", "width", "-", "int", "(", "distortion_scale", "*", "half_width", ")", "-", "1", ",", "width", "-", "1", ")", ",", "\n", "random", ".", "randint", "(", "height", "-", "int", "(", "distortion_scale", "*", "half_height", ")", "-", "1", ",", "height", "-", "1", ")", ")", "\n", "botleft", "=", "(", "random", ".", "randint", "(", "0", ",", "int", "(", "distortion_scale", "*", "half_width", ")", ")", ",", "\n", "random", ".", "randint", "(", "height", "-", "int", "(", "distortion_scale", "*", "half_height", ")", "-", "1", ",", "height", "-", "1", ")", ")", "\n", "startpoints", "=", "[", "(", "0", ",", "0", ")", ",", "(", "width", "-", "1", ",", "0", ")", ",", "(", "width", "-", "1", ",", "height", "-", "1", ")", ",", "(", "0", ",", "height", "-", "1", ")", "]", "\n", "endpoints", "=", "[", "topleft", ",", "topright", ",", "botright", ",", "botleft", "]", "\n", "return", "startpoints", ",", "endpoints", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.RandomResizedCrop.__init__": [[278, 289], ["isinstance", "warnings.warn"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "scale", "=", "(", "0.08", ",", "1.0", ")", ",", "ratio", "=", "(", "3.", "/", "4.", ",", "4.", "/", "3.", ")", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "tuple", ")", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "(", "size", ",", "size", ")", "\n", "", "if", "(", "scale", "[", "0", "]", ">", "scale", "[", "1", "]", ")", "or", "(", "ratio", "[", "0", "]", ">", "ratio", "[", "1", "]", ")", ":", "\n", "            ", "warnings", ".", "warn", "(", "\"range should be of kind (min, max)\"", ")", "\n", "\n", "", "self", ".", "interpolation", "=", "interpolation", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "ratio", "=", "ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.RandomResizedCrop.get_params": [[290, 321], ["range", "math.exp", "int", "int", "min", "random.uniform", "math.log", "math.log", "random.uniform", "round", "round", "random.randint", "random.randint", "min", "max", "math.sqrt", "math.sqrt", "max"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_params", "(", "img", ",", "scale", ",", "ratio", ")", ":", "\n", "        ", "area", "=", "img", ".", "size", "[", "0", "]", "*", "img", ".", "size", "[", "1", "]", "\n", "\n", "for", "attempt", "in", "range", "(", "10", ")", ":", "\n", "            ", "target_area", "=", "random", ".", "uniform", "(", "*", "scale", ")", "*", "area", "\n", "log_ratio", "=", "(", "math", ".", "log", "(", "ratio", "[", "0", "]", ")", ",", "math", ".", "log", "(", "ratio", "[", "1", "]", ")", ")", "\n", "aspect_ratio", "=", "math", ".", "exp", "(", "random", ".", "uniform", "(", "*", "log_ratio", ")", ")", "\n", "\n", "w", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "*", "aspect_ratio", ")", ")", ")", "\n", "h", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "/", "aspect_ratio", ")", ")", ")", "\n", "\n", "if", "w", "<=", "img", ".", "size", "[", "0", "]", "and", "h", "<=", "img", ".", "size", "[", "1", "]", ":", "\n", "                ", "i", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "[", "1", "]", "-", "h", ")", "\n", "j", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "[", "0", "]", "-", "w", ")", "\n", "return", "i", ",", "j", ",", "h", ",", "w", "\n", "\n", "# Fallback to central crop", "\n", "", "", "in_ratio", "=", "img", ".", "size", "[", "0", "]", "/", "img", ".", "size", "[", "1", "]", "\n", "if", "(", "in_ratio", "<", "min", "(", "ratio", ")", ")", ":", "\n", "            ", "w", "=", "img", ".", "size", "[", "0", "]", "\n", "h", "=", "w", "/", "min", "(", "ratio", ")", "\n", "", "elif", "(", "in_ratio", ">", "max", "(", "ratio", ")", ")", ":", "\n", "            ", "h", "=", "img", ".", "size", "[", "1", "]", "\n", "w", "=", "h", "*", "max", "(", "ratio", ")", "\n", "", "else", ":", "# whole image", "\n", "            ", "w", "=", "img", ".", "size", "[", "0", "]", "\n", "h", "=", "img", ".", "size", "[", "1", "]", "\n", "", "i", "=", "(", "img", ".", "size", "[", "1", "]", "-", "h", ")", "//", "2", "\n", "j", "=", "(", "img", ".", "size", "[", "0", "]", "-", "w", ")", "//", "2", "\n", "return", "i", ",", "j", ",", "h", ",", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.RandomResizedCrop.__call__": [[322, 326], ["transforms.RandomResizedCrop.get_params", "torchvision.transforms.functional.resized_crop", "torchvision.transforms.functional.resized_crop"], "methods", ["home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.RandomAffineFromSet.get_params"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "i", ",", "j", ",", "h", ",", "w", "=", "self", ".", "get_params", "(", "img", ",", "self", ".", "scale", ",", "self", ".", "ratio", ")", "\n", "return", "F", ".", "resized_crop", "(", "img", ",", "i", ",", "j", ",", "h", ",", "w", ",", "self", ".", "size", ",", "self", ".", "interpolation", ")", ",", "F", ".", "resized_crop", "(", "mask", ",", "i", ",", "j", ",", "h", ",", "w", ",", "self", ".", "size", ",", "Image", ".", "NEAREST", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.FiveCrop.__init__": [[329, 336], ["isinstance", "int", "int", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "assert", "len", "(", "size", ")", "==", "2", ",", "\"Please provide only two dimensions (h, w) for size.\"", "\n", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.FiveCrop.__call__": [[337, 339], ["torchvision.transforms.functional.five_crop", "torchvision.transforms.functional.five_crop"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "return", "F", ".", "five_crop", "(", "img", ",", "self", ".", "size", ")", ",", "F", ".", "five_crop", "(", "mask", ",", "self", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.TenCrop.__init__": [[342, 350], ["isinstance", "int", "int", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "vertical_flip", "=", "False", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "assert", "len", "(", "size", ")", "==", "2", ",", "\"Please provide only two dimensions (h, w) for size.\"", "\n", "self", ".", "size", "=", "size", "\n", "", "self", ".", "vertical_flip", "=", "vertical_flip", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.TenCrop.__call__": [[351, 353], ["torchvision.transforms.functional.ten_crop", "torchvision.transforms.functional.ten_crop"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "return", "F", ".", "ten_crop", "(", "img", ",", "self", ".", "size", ",", "self", ".", "vertical_flip", ")", ",", "F", ".", "ten_crop", "(", "mask", ",", "self", ".", "size", ",", "self", ".", "vertical_flip", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.ColorJitter.__init__": [[356, 362], ["transforms.ColorJitter._check_input", "transforms.ColorJitter._check_input", "transforms.ColorJitter._check_input", "transforms.ColorJitter._check_input"], "methods", ["home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.ColorJitter._check_input", "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.ColorJitter._check_input", "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.ColorJitter._check_input", "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.ColorJitter._check_input"], ["    ", "def", "__init__", "(", "self", ",", "brightness", "=", "0", ",", "contrast", "=", "0", ",", "saturation", "=", "0", ",", "hue", "=", "0", ")", ":", "\n", "        ", "self", ".", "brightness", "=", "self", ".", "_check_input", "(", "brightness", ",", "'brightness'", ")", "\n", "self", ".", "contrast", "=", "self", ".", "_check_input", "(", "contrast", ",", "'contrast'", ")", "\n", "self", ".", "saturation", "=", "self", ".", "_check_input", "(", "saturation", ",", "'saturation'", ")", "\n", "self", ".", "hue", "=", "self", ".", "_check_input", "(", "hue", ",", "'hue'", ",", "center", "=", "0", ",", "bound", "=", "(", "-", "0.5", ",", "0.5", ")", ",", "\n", "clip_first_on_zero", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.ColorJitter._check_input": [[363, 381], ["isinstance", "float", "ValueError", "max", "isinstance", "TypeError", "len", "ValueError"], "methods", ["None"], ["", "def", "_check_input", "(", "self", ",", "value", ",", "name", ",", "center", "=", "1", ",", "bound", "=", "(", "0", ",", "float", "(", "'inf'", ")", ")", ",", "clip_first_on_zero", "=", "True", ")", ":", "\n", "        ", "if", "isinstance", "(", "value", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "if", "value", "<", "0", ":", "\n", "                ", "raise", "ValueError", "(", "\"If {} is a single number, it must be non negative.\"", ".", "format", "(", "name", ")", ")", "\n", "", "value", "=", "[", "center", "-", "value", ",", "center", "+", "value", "]", "\n", "if", "clip_first_on_zero", ":", "\n", "                ", "value", "[", "0", "]", "=", "max", "(", "value", "[", "0", "]", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "value", ",", "(", "tuple", ",", "list", ")", ")", "and", "len", "(", "value", ")", "==", "2", ":", "\n", "            ", "if", "not", "bound", "[", "0", "]", "<=", "value", "[", "0", "]", "<=", "value", "[", "1", "]", "<=", "bound", "[", "1", "]", ":", "\n", "                ", "raise", "ValueError", "(", "\"{} values should be between {}\"", ".", "format", "(", "name", ",", "bound", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"{} should be a single number or a list/tuple with lenght 2.\"", ".", "format", "(", "name", ")", ")", "\n", "\n", "# if value is 0 or (1., 1.) for brightness/contrast/saturation", "\n", "# or (0., 0.) for hue, do nothing", "\n", "", "if", "value", "[", "0", "]", "==", "value", "[", "1", "]", "==", "center", ":", "\n", "            ", "value", "=", "None", "\n", "", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.ColorJitter.get_params": [[382, 406], ["random.shuffle", "transforms.Compose", "random.uniform", "transforms.append", "random.uniform", "transforms.append", "random.uniform", "transforms.append", "random.uniform", "transforms.append", "transforms.Lambda_image", "transforms.Lambda_image", "transforms.Lambda_image", "transforms.Lambda_image", "torchvision.transforms.functional.adjust_brightness", "torchvision.transforms.functional.adjust_contrast", "torchvision.transforms.functional.adjust_saturation", "torchvision.transforms.functional.adjust_hue"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_params", "(", "brightness", ",", "contrast", ",", "saturation", ",", "hue", ")", ":", "\n", "        ", "transforms", "=", "[", "]", "\n", "\n", "if", "brightness", "is", "not", "None", ":", "\n", "            ", "brightness_factor", "=", "random", ".", "uniform", "(", "brightness", "[", "0", "]", ",", "brightness", "[", "1", "]", ")", "\n", "transforms", ".", "append", "(", "Lambda_image", "(", "lambda", "img", ":", "F", ".", "adjust_brightness", "(", "img", ",", "brightness_factor", ")", ")", ")", "\n", "\n", "", "if", "contrast", "is", "not", "None", ":", "\n", "            ", "contrast_factor", "=", "random", ".", "uniform", "(", "contrast", "[", "0", "]", ",", "contrast", "[", "1", "]", ")", "\n", "transforms", ".", "append", "(", "Lambda_image", "(", "lambda", "img", ":", "F", ".", "adjust_contrast", "(", "img", ",", "contrast_factor", ")", ")", ")", "\n", "\n", "", "if", "saturation", "is", "not", "None", ":", "\n", "            ", "saturation_factor", "=", "random", ".", "uniform", "(", "saturation", "[", "0", "]", ",", "saturation", "[", "1", "]", ")", "\n", "transforms", ".", "append", "(", "Lambda_image", "(", "lambda", "img", ":", "F", ".", "adjust_saturation", "(", "img", ",", "saturation_factor", ")", ")", ")", "\n", "\n", "", "if", "hue", "is", "not", "None", ":", "\n", "            ", "hue_factor", "=", "random", ".", "uniform", "(", "hue", "[", "0", "]", ",", "hue", "[", "1", "]", ")", "\n", "transforms", ".", "append", "(", "Lambda_image", "(", "lambda", "img", ":", "F", ".", "adjust_hue", "(", "img", ",", "hue_factor", ")", ")", ")", "\n", "\n", "", "random", ".", "shuffle", "(", "transforms", ")", "\n", "transform", "=", "Compose", "(", "transforms", ")", "\n", "\n", "return", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.ColorJitter.__call__": [[407, 411], ["transforms.ColorJitter.get_params", "transforms.ColorJitter."], "methods", ["home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.RandomAffineFromSet.get_params"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "transform", "=", "self", ".", "get_params", "(", "self", ".", "brightness", ",", "self", ".", "contrast", ",", "\n", "self", ".", "saturation", ",", "self", ".", "hue", ")", "\n", "return", "transform", "(", "img", ",", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.RandomRotation.__init__": [[414, 427], ["isinstance", "ValueError", "len", "ValueError"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "degrees", ",", "resample", "=", "False", ",", "expand", "=", "False", ",", "center", "=", "None", ")", ":", "\n", "        ", "if", "isinstance", "(", "degrees", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "if", "degrees", "<", "0", ":", "\n", "                ", "raise", "ValueError", "(", "\"If degrees is a single number, it must be positive.\"", ")", "\n", "", "self", ".", "degrees", "=", "(", "-", "degrees", ",", "degrees", ")", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "degrees", ")", "!=", "2", ":", "\n", "                ", "raise", "ValueError", "(", "\"If degrees is a sequence, it must be of len 2.\"", ")", "\n", "", "self", ".", "degrees", "=", "degrees", "\n", "\n", "", "self", ".", "resample", "=", "resample", "\n", "self", ".", "expand", "=", "expand", "\n", "self", ".", "center", "=", "center", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.RandomRotation.get_params": [[428, 433], ["random.uniform"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_params", "(", "degrees", ")", ":", "\n", "        ", "angle", "=", "random", ".", "uniform", "(", "degrees", "[", "0", "]", ",", "degrees", "[", "1", "]", ")", "\n", "\n", "return", "angle", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.RandomRotation.__call__": [[434, 439], ["transforms.RandomRotation.get_params", "torchvision.transforms.functional.rotate", "torchvision.transforms.functional.rotate"], "methods", ["home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.RandomAffineFromSet.get_params"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "angle", "=", "self", ".", "get_params", "(", "self", ".", "degrees", ")", "\n", "\n", "return", "F", ".", "rotate", "(", "img", ",", "angle", ",", "Image", ".", "BILINEAR", ",", "self", ".", "expand", ",", "self", ".", "center", ")", ",", "F", ".", "rotate", "(", "mask", ",", "angle", ",", "Image", ".", "NEAREST", ",", "self", ".", "expand", ",", "self", ".", "center", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.RandomRotationFromSet.__init__": [[442, 447], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "degrees", "=", "[", "0", ",", "15", ",", "60", ",", "90", ",", "135", ",", "180", ",", "225", ",", "270", "]", ",", "resample", "=", "False", ",", "expand", "=", "False", ",", "center", "=", "None", ")", ":", "\n", "        ", "self", ".", "degrees", "=", "degrees", "\n", "self", ".", "resample", "=", "resample", "\n", "self", ".", "expand", "=", "expand", "\n", "self", ".", "center", "=", "center", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.RandomRotationFromSet.__call__": [[448, 453], ["random.choice", "torchvision.transforms.functional.rotate", "torchvision.transforms.functional.rotate"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "angle", "=", "random", ".", "choice", "(", "self", ".", "degrees", ")", "\n", "\n", "return", "F", ".", "rotate", "(", "img", ",", "angle", ",", "Image", ".", "BILINEAR", ",", "self", ".", "expand", ",", "self", ".", "center", ")", ",", "F", ".", "rotate", "(", "mask", ",", "angle", ",", "Image", ".", "NEAREST", ",", "self", ".", "expand", ",", "self", ".", "center", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.RandomAffine.__init__": [[456, 496], ["isinstance", "isinstance", "ValueError", "isinstance", "isinstance", "isinstance", "len", "len", "ValueError", "len", "ValueError", "ValueError", "isinstance", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "degrees", ",", "translate", "=", "None", ",", "scale", "=", "None", ",", "shear", "=", "None", ",", "resample", "=", "False", ",", "fillcolor", "=", "0", ")", ":", "\n", "        ", "if", "isinstance", "(", "degrees", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "if", "degrees", "<", "0", ":", "\n", "                ", "raise", "ValueError", "(", "\"If degrees is a single number, it must be positive.\"", ")", "\n", "", "self", ".", "degrees", "=", "(", "-", "degrees", ",", "degrees", ")", "\n", "", "else", ":", "\n", "            ", "assert", "isinstance", "(", "degrees", ",", "(", "tuple", ",", "list", ")", ")", "and", "len", "(", "degrees", ")", "==", "2", ",", "\"degrees should be a list or tuple and it must be of length 2.\"", "\n", "self", ".", "degrees", "=", "degrees", "\n", "\n", "", "if", "translate", "is", "not", "None", ":", "\n", "            ", "assert", "isinstance", "(", "translate", ",", "(", "tuple", ",", "list", ")", ")", "and", "len", "(", "translate", ")", "==", "2", ",", "\"translate should be a list or tuple and it must be of length 2.\"", "\n", "for", "t", "in", "translate", ":", "\n", "                ", "if", "not", "(", "0.0", "<=", "t", "<=", "1.0", ")", ":", "\n", "                    ", "raise", "ValueError", "(", "\"translation values should be between 0 and 1\"", ")", "\n", "", "", "", "self", ".", "translate", "=", "translate", "\n", "\n", "if", "scale", "is", "not", "None", ":", "\n", "            ", "assert", "isinstance", "(", "scale", ",", "(", "tuple", ",", "list", ")", ")", "and", "len", "(", "scale", ")", "==", "2", ",", "\"scale should be a list or tuple and it must be of length 2.\"", "\n", "for", "s", "in", "scale", ":", "\n", "                ", "if", "s", "<=", "0", ":", "\n", "                    ", "raise", "ValueError", "(", "\"scale values should be positive\"", ")", "\n", "", "", "", "self", ".", "scale", "=", "scale", "\n", "\n", "if", "shear", "is", "not", "None", ":", "\n", "            ", "if", "isinstance", "(", "shear", ",", "numbers", ".", "Number", ")", ":", "\n", "                ", "if", "shear", "<", "0", ":", "\n", "                    ", "raise", "ValueError", "(", "\"If shear is a single number, it must be positive.\"", ")", "\n", "", "self", ".", "shear", "=", "(", "-", "shear", ",", "shear", ")", "\n", "", "else", ":", "\n", "                ", "assert", "isinstance", "(", "shear", ",", "(", "tuple", ",", "list", ")", ")", "and", "len", "(", "shear", ")", "==", "2", ",", "\"shear should be a list or tuple and it must be of length 2.\"", "\n", "self", ".", "shear", "=", "shear", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "shear", "=", "shear", "\n", "\n", "", "self", ".", "resample", "=", "resample", "\n", "self", ".", "fillcolor", "=", "fillcolor", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.RandomAffine.get_params": [[497, 519], ["random.uniform", "random.uniform", "random.uniform", "numpy.round", "numpy.round", "random.uniform", "random.uniform"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_params", "(", "degrees", ",", "translate", ",", "scale_ranges", ",", "shears", ",", "img_size", ")", ":", "\n", "        ", "angle", "=", "random", ".", "uniform", "(", "degrees", "[", "0", "]", ",", "degrees", "[", "1", "]", ")", "\n", "if", "translate", "is", "not", "None", ":", "\n", "            ", "max_dx", "=", "translate", "[", "0", "]", "*", "img_size", "[", "0", "]", "\n", "max_dy", "=", "translate", "[", "1", "]", "*", "img_size", "[", "1", "]", "\n", "translations", "=", "(", "np", ".", "round", "(", "random", ".", "uniform", "(", "-", "max_dx", ",", "max_dx", ")", ")", ",", "\n", "np", ".", "round", "(", "random", ".", "uniform", "(", "-", "max_dy", ",", "max_dy", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "translations", "=", "(", "0", ",", "0", ")", "\n", "\n", "", "if", "scale_ranges", "is", "not", "None", ":", "\n", "            ", "scale", "=", "random", ".", "uniform", "(", "scale_ranges", "[", "0", "]", ",", "scale_ranges", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "scale", "=", "1.0", "\n", "\n", "", "if", "shears", "is", "not", "None", ":", "\n", "            ", "shear", "=", "random", ".", "uniform", "(", "shears", "[", "0", "]", ",", "shears", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "shear", "=", "0.0", "\n", "\n", "", "return", "angle", ",", "translations", ",", "scale", ",", "shear", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.RandomAffine.__call__": [[520, 524], ["transforms.RandomAffine.get_params", "torchvision.transforms.functional.affine", "torchvision.transforms.functional.affine"], "methods", ["home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.RandomAffineFromSet.get_params"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "ret", "=", "self", ".", "get_params", "(", "self", ".", "degrees", ",", "self", ".", "translate", ",", "self", ".", "scale", ",", "self", ".", "shear", ",", "img", ".", "size", ")", "\n", "return", "F", ".", "affine", "(", "img", ",", "*", "ret", ",", "resample", "=", "Image", ".", "BILINEAR", ",", "fillcolor", "=", "self", ".", "fillcolor", ")", ",", "F", ".", "affine", "(", "mask", ",", "*", "ret", ",", "resample", "=", "Image", ".", "NEAREST", ",", "fillcolor", "=", "self", ".", "fillcolor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.RandomAffineFromSet.__init__": [[527, 562], ["isinstance", "isinstance", "isinstance", "isinstance", "len", "ValueError", "len", "ValueError", "ValueError", "isinstance", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "degrees", ",", "translate", "=", "None", ",", "scale", "=", "None", ",", "shear", "=", "None", ",", "resample", "=", "False", ",", "fillcolor", "=", "0", ")", ":", "\n", "        ", "assert", "isinstance", "(", "degrees", ",", "(", "tuple", ",", "list", ")", ")", ",", "\"degrees should be a list or tuple.\"", "\n", "self", ".", "degrees", "=", "degrees", "\n", "\n", "if", "translate", "is", "not", "None", ":", "\n", "            ", "assert", "isinstance", "(", "translate", ",", "(", "tuple", ",", "list", ")", ")", "and", "len", "(", "translate", ")", "==", "2", ",", "\"translate should be a list or tuple and it must be of length 2.\"", "\n", "for", "t", "in", "translate", ":", "\n", "                ", "if", "not", "(", "0.0", "<=", "t", "<=", "1.0", ")", ":", "\n", "                    ", "raise", "ValueError", "(", "\"translation values should be between 0 and 1\"", ")", "\n", "", "", "", "self", ".", "translate", "=", "translate", "\n", "\n", "if", "scale", "is", "not", "None", ":", "\n", "            ", "assert", "isinstance", "(", "scale", ",", "(", "tuple", ",", "list", ")", ")", "and", "len", "(", "scale", ")", "==", "2", ",", "\"scale should be a list or tuple and it must be of length 2.\"", "\n", "for", "s", "in", "scale", ":", "\n", "                ", "if", "s", "<=", "0", ":", "\n", "                    ", "raise", "ValueError", "(", "\"scale values should be positive\"", ")", "\n", "", "", "", "self", ".", "scale", "=", "scale", "\n", "\n", "if", "shear", "is", "not", "None", ":", "\n", "            ", "if", "isinstance", "(", "shear", ",", "numbers", ".", "Number", ")", ":", "\n", "                ", "if", "shear", "<", "0", ":", "\n", "                    ", "raise", "ValueError", "(", "\"If shear is a single number, it must be positive.\"", ")", "\n", "", "self", ".", "shear", "=", "(", "-", "shear", ",", "shear", ")", "\n", "", "else", ":", "\n", "                ", "assert", "isinstance", "(", "shear", ",", "(", "tuple", ",", "list", ")", ")", "and", "len", "(", "shear", ")", "==", "2", ",", "\"shear should be a list or tuple and it must be of length 2.\"", "\n", "self", ".", "shear", "=", "shear", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "shear", "=", "shear", "\n", "\n", "", "self", ".", "resample", "=", "resample", "\n", "self", ".", "fillcolor", "=", "fillcolor", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.RandomAffineFromSet.get_params": [[563, 585], ["random.choice", "random.uniform", "random.uniform", "numpy.round", "numpy.round", "random.uniform", "random.uniform"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_params", "(", "degrees", ",", "translate", ",", "scale_ranges", ",", "shears", ",", "img_size", ")", ":", "\n", "        ", "angle", "=", "random", ".", "choice", "(", "degrees", ")", "\n", "if", "translate", "is", "not", "None", ":", "\n", "            ", "max_dx", "=", "translate", "[", "0", "]", "*", "img_size", "[", "0", "]", "\n", "max_dy", "=", "translate", "[", "1", "]", "*", "img_size", "[", "1", "]", "\n", "translations", "=", "(", "np", ".", "round", "(", "random", ".", "uniform", "(", "-", "max_dx", ",", "max_dx", ")", ")", ",", "\n", "np", ".", "round", "(", "random", ".", "uniform", "(", "-", "max_dy", ",", "max_dy", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "translations", "=", "(", "0", ",", "0", ")", "\n", "\n", "", "if", "scale_ranges", "is", "not", "None", ":", "\n", "            ", "scale", "=", "random", ".", "uniform", "(", "scale_ranges", "[", "0", "]", ",", "scale_ranges", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "scale", "=", "1.0", "\n", "\n", "", "if", "shears", "is", "not", "None", ":", "\n", "            ", "shear", "=", "random", ".", "uniform", "(", "shears", "[", "0", "]", ",", "shears", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "shear", "=", "0.0", "\n", "\n", "", "return", "angle", ",", "translations", ",", "scale", ",", "shear", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.RandomAffineFromSet.__call__": [[586, 590], ["transforms.RandomAffineFromSet.get_params", "torchvision.transforms.functional.affine", "torchvision.transforms.functional.affine"], "methods", ["home.repos.pwc.inspect_result.shirgur_ACDRNet.data.transforms.RandomAffineFromSet.get_params"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "ret", "=", "self", ".", "get_params", "(", "self", ".", "degrees", ",", "self", ".", "translate", ",", "self", ".", "scale", ",", "self", ".", "shear", ",", "img", ".", "size", ")", "\n", "return", "F", ".", "affine", "(", "img", ",", "*", "ret", ",", "resample", "=", "Image", ".", "BILINEAR", ",", "fillcolor", "=", "self", ".", "fillcolor", ")", ",", "F", ".", "affine", "(", "mask", ",", "*", "ret", ",", "resample", "=", "Image", ".", "NEAREST", ",", "fillcolor", "=", "self", ".", "fillcolor", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.buildings.BuildingsDataset.__init__": [[7, 29], ["os.path.join", "os.path.join", "os.listdir", "buildings.BuildingsDataset.img_list.sort", "os.listdir", "buildings.BuildingsDataset.mask_list.sort"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "data_path", ",", "\n", "ann", "=", "'train'", ",", "\n", "transformations", "=", "None", ",", "\n", "train_size", "=", "100", ",", "\n", "test_size", "=", "68", ")", ":", "\n", "        ", "self", ".", "img_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'images'", ")", "\n", "self", ".", "mask_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'masks'", ")", "\n", "self", ".", "transformations", "=", "transformations", "\n", "self", ".", "ann", "=", "ann", "\n", "\n", "self", ".", "img_list", "=", "os", ".", "listdir", "(", "self", ".", "img_path", ")", "\n", "self", ".", "img_list", ".", "sort", "(", ")", "\n", "self", ".", "mask_list", "=", "os", ".", "listdir", "(", "self", ".", "mask_path", ")", "\n", "self", ".", "mask_list", ".", "sort", "(", ")", "\n", "\n", "if", "self", ".", "ann", "==", "'train'", ":", "\n", "            ", "self", ".", "img_list", "=", "self", ".", "img_list", "[", "0", ":", "train_size", "]", "\n", "self", ".", "mask_list", "=", "self", ".", "mask_list", "[", "0", ":", "train_size", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "img_list", "=", "self", ".", "img_list", "[", "train_size", ":", "train_size", "+", "test_size", "]", "\n", "self", ".", "mask_list", "=", "self", ".", "mask_list", "[", "train_size", ":", "train_size", "+", "test_size", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.buildings.BuildingsDataset.__len__": [[30, 32], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.buildings.BuildingsDataset.__getitem__": [[33, 44], ["imageio.imread", "imageio.imread", "buildings.BuildingsDataset.transformations"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "img_file", "=", "self", ".", "img_list", "[", "item", "]", "\n", "mask_file", "=", "self", ".", "mask_list", "[", "item", "]", "\n", "\n", "image", "=", "imread", "(", "self", ".", "img_path", "+", "'/'", "+", "img_file", ")", "\n", "mask", "=", "imread", "(", "self", ".", "mask_path", "+", "'/'", "+", "mask_file", ")", "\n", "\n", "if", "self", ".", "transformations", "is", "not", "None", ":", "\n", "            ", "image", ",", "mask", "=", "self", ".", "transformations", "(", "image", ",", "mask", ")", "\n", "\n", "", "return", "image", ",", "mask", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.cityscapes_instances.CityscapesInstances.__init__": [[13, 33], ["torch.utils.data.Dataset.__init__", "print", "json.load", "len", "open", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.shirgur_ACDRNet.data.cityscapes_instances.CityscapesInstances_comp.__init__"], ["def", "__init__", "(", "self", ",", "\n", "data_inst_path", ",", "\n", "ann_file", ",", "\n", "class_name", ",", "\n", "transformations", "=", "None", ",", "\n", "loops", "=", "100", ")", ":", "\n", "        ", "super", "(", "CityscapesInstances", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data_inst_path", "=", "data_inst_path", "\n", "self", ".", "ann_file", "=", "ann_file", "\n", "self", ".", "class_name", "=", "class_name", "\n", "self", ".", "transformations", "=", "transformations", "\n", "self", ".", "loops", "=", "loops", "\n", "\n", "print", "(", "'loading \\\"{}\\\" annotations into memory...'", ".", "format", "(", "ann_file", ")", ")", "\n", "self", ".", "data", "=", "json", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "data_inst_path", ",", "ann_file", ",", "'all_classes_instances.json'", ")", ",", "'r'", ")", ")", "\n", "self", ".", "images", "=", "None", "\n", "\n", "self", ".", "data_length", "=", "len", "(", "self", ".", "data", "[", "'data'", "]", "[", "self", ".", "class_name", "]", ")", "\n", "\n", "self", ".", "calsses", "=", "self", ".", "data", "[", "'classes_names'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.cityscapes_instances.CityscapesInstances._poly2mask": [[34, 49], ["isinstance", "pycocotools.decode", "pycocotools.frPyObjects", "pycocotools.merge", "isinstance", "pycocotools.frPyObjects"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_poly2mask", "(", "mask_ann", ",", "img_h", ",", "img_w", ")", ":", "\n", "        ", "if", "isinstance", "(", "mask_ann", ",", "list", ")", ":", "\n", "# polygon -- a single object might consist of multiple parts", "\n", "# we merge all parts into one mask rle code", "\n", "            ", "rles", "=", "maskUtils", ".", "frPyObjects", "(", "mask_ann", ",", "img_h", ",", "img_w", ")", "\n", "rle", "=", "maskUtils", ".", "merge", "(", "rles", ")", "\n", "", "elif", "isinstance", "(", "mask_ann", "[", "'counts'", "]", ",", "list", ")", ":", "\n", "# uncompressed RLE", "\n", "            ", "rle", "=", "maskUtils", ".", "frPyObjects", "(", "mask_ann", ",", "img_h", ",", "img_w", ")", "\n", "", "else", ":", "\n", "# rle", "\n", "            ", "rle", "=", "mask_ann", "\n", "", "mask", "=", "maskUtils", ".", "decode", "(", "rle", ")", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.cityscapes_instances.CityscapesInstances.__len__": [[50, 52], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data_length", "*", "self", ".", "loops", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.cityscapes_instances.CityscapesInstances.__getitem__": [[53, 68], ["cityscapes_instances.CityscapesInstances._poly2mask", "numpy.maximum", "h5py.File", "numpy.array().astype", "cityscapes_instances.CityscapesInstances.transformations", "os.path.join", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.shirgur_ACDRNet.data.cityscapes_instances.CityscapesInstances_comp._poly2mask"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "item", "=", "item", "%", "self", ".", "data_length", "\n", "if", "self", ".", "images", "is", "None", ":", "\n", "            ", "self", ".", "images", "=", "h5py", ".", "File", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_inst_path", ",", "'all_images.hdf5'", ")", ",", "'r'", ")", "\n", "", "ann", "=", "self", ".", "data", "[", "'data'", "]", "[", "self", ".", "class_name", "]", "[", "item", "]", "\n", "mask", "=", "self", ".", "_poly2mask", "(", "ann", "[", "'segmentation'", "]", ",", "ann", "[", "'img'", "]", "[", "'height'", "]", ",", "ann", "[", "'img'", "]", "[", "'width'", "]", ")", "\n", "bbox", "=", "np", ".", "maximum", "(", "0", ",", "np", ".", "array", "(", "ann", "[", "'bbox'", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", ")", "\n", "\n", "instance_image", "=", "self", ".", "images", "[", "ann", "[", "'img'", "]", "[", "'file_name'", "]", "]", "[", "bbox", "[", "1", "]", ":", "bbox", "[", "1", "]", "+", "bbox", "[", "3", "]", ",", "bbox", "[", "0", "]", ":", "bbox", "[", "0", "]", "+", "bbox", "[", "2", "]", "]", "\n", "instance_mask", "=", "mask", "[", "bbox", "[", "1", "]", ":", "bbox", "[", "1", "]", "+", "bbox", "[", "3", "]", ",", "bbox", "[", "0", "]", ":", "bbox", "[", "0", "]", "+", "bbox", "[", "2", "]", "]", "\n", "\n", "if", "self", ".", "transformations", "is", "not", "None", ":", "\n", "            ", "instance_image", ",", "instance_mask", "=", "self", ".", "transformations", "(", "instance_image", ",", "instance_mask", ")", "\n", "\n", "", "return", "instance_image", ",", "instance_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.cityscapes_instances.CityscapesInstances_comp.__init__": [[74, 95], ["torch.utils.data.Dataset.__init__", "print", "json.load", "len", "numpy.zeros", "open", "len", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.shirgur_ACDRNet.data.cityscapes_instances.CityscapesInstances_comp.__init__"], ["def", "__init__", "(", "self", ",", "\n", "data_inst_path", ",", "\n", "ann_file", ",", "\n", "class_name", ",", "\n", "transformations", "=", "None", ",", "\n", "loops", "=", "100", ")", ":", "\n", "        ", "super", "(", "CityscapesInstances_comp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data_inst_path", "=", "data_inst_path", "\n", "self", ".", "ann_file", "=", "ann_file", "\n", "self", ".", "class_name", "=", "class_name", "\n", "self", ".", "transformations", "=", "transformations", "\n", "self", ".", "loops", "=", "loops", "\n", "\n", "print", "(", "'loading \\\"{}\\\" annotations into memory...'", ".", "format", "(", "ann_file", ")", ")", "\n", "self", ".", "data", "=", "json", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "data_inst_path", ",", "ann_file", ",", "'all_classes_instances.json'", ")", ",", "'r'", ")", ")", "\n", "self", ".", "images", "=", "None", "\n", "\n", "self", ".", "data_length", "=", "len", "(", "self", ".", "data", "[", "'data'", "]", "[", "self", ".", "class_name", "]", ")", "\n", "\n", "self", ".", "calsses", "=", "self", ".", "data", "[", "'classes_names'", "]", "\n", "self", ".", "flag", "=", "np", ".", "zeros", "(", "len", "(", "self", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.cityscapes_instances.CityscapesInstances_comp._poly2mask": [[96, 111], ["isinstance", "pycocotools.decode", "pycocotools.frPyObjects", "pycocotools.merge", "isinstance", "pycocotools.frPyObjects"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_poly2mask", "(", "mask_ann", ",", "img_h", ",", "img_w", ")", ":", "\n", "        ", "if", "isinstance", "(", "mask_ann", ",", "list", ")", ":", "\n", "# polygon -- a single object might consist of multiple parts", "\n", "# we merge all parts into one mask rle code", "\n", "            ", "rles", "=", "maskUtils", ".", "frPyObjects", "(", "mask_ann", ",", "img_h", ",", "img_w", ")", "\n", "rle", "=", "maskUtils", ".", "merge", "(", "rles", ")", "\n", "", "elif", "isinstance", "(", "mask_ann", "[", "'counts'", "]", ",", "list", ")", ":", "\n", "# uncompressed RLE", "\n", "            ", "rle", "=", "maskUtils", ".", "frPyObjects", "(", "mask_ann", ",", "img_h", ",", "img_w", ")", "\n", "", "else", ":", "\n", "# rle", "\n", "            ", "rle", "=", "mask_ann", "\n", "", "mask", "=", "maskUtils", ".", "decode", "(", "rle", ")", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.cityscapes_instances.CityscapesInstances_comp.__len__": [[112, 114], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data_length", "*", "self", ".", "loops", "\n", "\n"]], "home.repos.pwc.inspect_result.shirgur_ACDRNet.data.cityscapes_instances.CityscapesInstances_comp.__getitem__": [[115, 135], ["numpy.random.randint", "cityscapes_instances.CityscapesInstances_comp._poly2mask", "numpy.array().astype", "h5py.File", "len", "cityscapes_instances.CityscapesInstances_comp.transformations", "os.path.join", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.shirgur_ACDRNet.data.cityscapes_instances.CityscapesInstances_comp._poly2mask"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "item", "=", "item", "%", "self", ".", "data_length", "\n", "if", "self", ".", "images", "is", "None", ":", "\n", "            ", "self", ".", "images", "=", "h5py", ".", "File", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_inst_path", ",", "'all_images.hdf5'", ")", ",", "'r'", ")", "\n", "", "ann", "=", "self", ".", "data", "[", "'data'", "]", "[", "self", ".", "class_name", "]", "[", "item", "]", "\n", "polygons", "=", "ann", "[", "'segmentation'", "]", "\n", "comp_bbox", "=", "ann", "[", "'comp_bbox'", "]", "\n", "i", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "polygons", ")", ")", "\n", "p", "=", "polygons", "[", "i", "]", "\n", "bb", "=", "comp_bbox", "[", "i", "]", "\n", "mask", "=", "self", ".", "_poly2mask", "(", "[", "p", "]", ",", "ann", "[", "'img'", "]", "[", "'height'", "]", ",", "ann", "[", "'img'", "]", "[", "'width'", "]", ")", "\n", "bbox", "=", "np", ".", "array", "(", "bb", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "instance_image", "=", "self", ".", "images", "[", "ann", "[", "'img'", "]", "[", "'file_name'", "]", "]", "[", "bbox", "[", "1", "]", ":", "bbox", "[", "1", "]", "+", "bbox", "[", "3", "]", ",", "bbox", "[", "0", "]", ":", "bbox", "[", "0", "]", "+", "bbox", "[", "2", "]", "]", "\n", "instance_mask", "=", "mask", "[", "bbox", "[", "1", "]", ":", "bbox", "[", "1", "]", "+", "bbox", "[", "3", "]", ",", "bbox", "[", "0", "]", ":", "bbox", "[", "0", "]", "+", "bbox", "[", "2", "]", "]", "\n", "\n", "if", "self", ".", "transformations", "is", "not", "None", ":", "\n", "            ", "instance_image", ",", "instance_mask", "=", "self", ".", "transformations", "(", "instance_image", ",", "instance_mask", ")", "\n", "\n", "", "return", "instance_image", ",", "instance_mask", "\n", "", "", ""]]}