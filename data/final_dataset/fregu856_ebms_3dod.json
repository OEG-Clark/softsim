{"home.repos.pwc.inspect_result.fregu856_ebms_3dod.3dod.eval.single_test": [[17, 94], ["model.eval", "mmcv.ProgressBar", "enumerate", "mmcv.mkdir_or_exist", "len", "model", "len", "range", "numpy.array", "mmcv.ProgressBar.update", "tools.get_start_result_anno", "zip", "annos.append", "numpy.minimum", "numpy.maximum", "anno[].append", "anno[].append", "anno[].append", "anno[].append", "anno[].append", "anno[].append", "anno[].append", "anno[].append", "anno[].append", "annos.append", "annos.append", "os.path.join", "open", "open.close", "tools.empty_result_anno", "range", "os.path.join", "numpy.stack", "os.path.join", "open", "open.close", "tools.empty_result_anno", "open", "zip", "kitti.get_start_result_anno.items", "int", "template.format", "open.write"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.get_start_result_anno", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.empty_result_anno", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.empty_result_anno"], ["def", "single_test", "(", "model", ",", "data_loader", ",", "saveto", "=", "None", ",", "class_names", "=", "[", "'Car'", "]", ")", ":", "\n", "    ", "template", "=", "'{} '", "+", "' '", ".", "join", "(", "[", "'{:.4f}'", "for", "_", "in", "range", "(", "15", ")", "]", ")", "+", "'\\n'", "\n", "if", "saveto", "is", "not", "None", ":", "\n", "        ", "mmcv", ".", "mkdir_or_exist", "(", "saveto", ")", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "annos", "=", "[", "]", "\n", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "data_loader", ".", "dataset", ")", ")", "\n", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "# with torch.no_grad():", "\n", "        ", "results", "=", "model", "(", "return_loss", "=", "False", ",", "**", "data", ")", "\n", "image_shape", "=", "(", "375", ",", "1242", ")", "\n", "for", "re", "in", "results", ":", "\n", "            ", "img_idx", "=", "re", "[", "'image_idx'", "]", "\n", "if", "re", "[", "'bbox'", "]", "is", "not", "None", ":", "\n", "                ", "box2d", "=", "re", "[", "'bbox'", "]", "\n", "box3d", "=", "re", "[", "'box3d_camera'", "]", "\n", "labels", "=", "re", "[", "'label_preds'", "]", "\n", "scores", "=", "re", "[", "'scores'", "]", "\n", "alphas", "=", "re", "[", "'alphas'", "]", "\n", "anno", "=", "kitti", ".", "get_start_result_anno", "(", ")", "\n", "num_example", "=", "0", "\n", "for", "bbox2d", ",", "bbox3d", ",", "label", ",", "score", ",", "alpha", "in", "zip", "(", "box2d", ",", "box3d", ",", "labels", ",", "scores", ",", "alphas", ")", ":", "\n", "                    ", "if", "bbox2d", "[", "0", "]", ">", "image_shape", "[", "1", "]", "or", "bbox2d", "[", "1", "]", ">", "image_shape", "[", "0", "]", ":", "\n", "                        ", "continue", "\n", "", "if", "bbox2d", "[", "2", "]", "<", "0", "or", "bbox2d", "[", "3", "]", "<", "0", ":", "\n", "                        ", "continue", "\n", "", "bbox2d", "[", "2", ":", "]", "=", "np", ".", "minimum", "(", "bbox2d", "[", "2", ":", "]", ",", "image_shape", "[", ":", ":", "-", "1", "]", ")", "\n", "bbox2d", "[", ":", "2", "]", "=", "np", ".", "maximum", "(", "bbox2d", "[", ":", "2", "]", ",", "[", "0", ",", "0", "]", ")", "\n", "anno", "[", "\"name\"", "]", ".", "append", "(", "class_names", "[", "int", "(", "label", ")", "]", ")", "\n", "anno", "[", "\"truncated\"", "]", ".", "append", "(", "0.0", ")", "\n", "anno", "[", "\"occluded\"", "]", ".", "append", "(", "0", ")", "\n", "# anno[\"alpha\"].append(-10)", "\n", "anno", "[", "\"alpha\"", "]", ".", "append", "(", "alpha", ")", "\n", "anno", "[", "\"bbox\"", "]", ".", "append", "(", "bbox2d", ")", "\n", "# anno[\"dimensions\"].append(np.array([-1,-1,-1]))", "\n", "anno", "[", "\"dimensions\"", "]", ".", "append", "(", "bbox3d", "[", "[", "3", ",", "4", ",", "5", "]", "]", ")", "\n", "# anno[\"location\"].append(np.array([-1000,-1000,-1000]))", "\n", "anno", "[", "\"location\"", "]", ".", "append", "(", "bbox3d", "[", ":", "3", "]", ")", "\n", "# anno[\"rotation_y\"].append(-10)", "\n", "anno", "[", "\"rotation_y\"", "]", ".", "append", "(", "bbox3d", "[", "6", "]", ")", "\n", "anno", "[", "\"score\"", "]", ".", "append", "(", "score", ")", "\n", "num_example", "+=", "1", "\n", "", "if", "num_example", "!=", "0", ":", "\n", "                    ", "if", "saveto", "is", "not", "None", ":", "\n", "                        ", "of_path", "=", "os", ".", "path", ".", "join", "(", "saveto", ",", "'%06d.txt'", "%", "img_idx", ")", "\n", "with", "open", "(", "of_path", ",", "'w+'", ")", "as", "f", ":", "\n", "                            ", "for", "name", ",", "bbox", ",", "dim", ",", "loc", ",", "ry", ",", "score", ",", "alpha", "in", "zip", "(", "anno", "[", "'name'", "]", ",", "anno", "[", "\"bbox\"", "]", ",", "anno", "[", "\"dimensions\"", "]", ",", "anno", "[", "\"location\"", "]", ",", "anno", "[", "\"rotation_y\"", "]", ",", "anno", "[", "\"score\"", "]", ",", "anno", "[", "\"alpha\"", "]", ")", ":", "\n", "                                ", "line", "=", "template", ".", "format", "(", "name", ",", "0", ",", "0", ",", "alpha", ",", "*", "bbox", ",", "*", "dim", "[", "[", "1", ",", "2", ",", "0", "]", "]", ",", "*", "loc", ",", "ry", ",", "score", ")", "\n", "f", ".", "write", "(", "line", ")", "\n", "\n", "", "", "", "anno", "=", "{", "n", ":", "np", ".", "stack", "(", "v", ")", "for", "n", ",", "v", "in", "anno", ".", "items", "(", ")", "}", "\n", "annos", ".", "append", "(", "anno", ")", "\n", "", "else", ":", "\n", "                    ", "if", "saveto", "is", "not", "None", ":", "\n", "                        ", "of_path", "=", "os", ".", "path", ".", "join", "(", "saveto", ",", "'%06d.txt'", "%", "img_idx", ")", "\n", "f", "=", "open", "(", "of_path", ",", "'w+'", ")", "\n", "f", ".", "close", "(", ")", "\n", "", "annos", ".", "append", "(", "kitti", ".", "empty_result_anno", "(", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "saveto", "is", "not", "None", ":", "\n", "                    ", "of_path", "=", "os", ".", "path", ".", "join", "(", "saveto", ",", "'%06d.txt'", "%", "img_idx", ")", "\n", "f", "=", "open", "(", "of_path", ",", "'w+'", ")", "\n", "f", ".", "close", "(", ")", "\n", "", "annos", ".", "append", "(", "kitti", ".", "empty_result_anno", "(", ")", ")", "\n", "\n", "", "num_example", "=", "annos", "[", "-", "1", "]", "[", "\"name\"", "]", ".", "shape", "[", "0", "]", "\n", "annos", "[", "-", "1", "]", "[", "\"image_idx\"", "]", "=", "np", ".", "array", "(", "\n", "[", "img_idx", "]", "*", "num_example", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n", "", "batch_size", "=", "len", "(", "results", ")", "\n", "for", "_", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "prog_bar", ".", "update", "(", ")", "\n", "\n", "", "", "return", "annos", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.3dod.eval._data_func": [[96, 99], ["dict", "mmcv.parallel.scatter", "mmcv.parallel.collate"], "function", ["None"], ["", "def", "_data_func", "(", "data", ",", "device_id", ")", ":", "\n", "    ", "data", "=", "scatter", "(", "collate", "(", "[", "data", "]", ",", "samples_per_gpu", "=", "1", ")", ",", "[", "device_id", "]", ")", "[", "0", "]", "\n", "return", "dict", "(", "return_loss", "=", "False", ",", "rescale", "=", "True", ",", "**", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.3dod.eval.parse_args": [[101, 122], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.3dod.test.parse_args"], ["", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'MMDet test detector'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'test config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'checkpoint'", ",", "help", "=", "'checkpoint file'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--gpus'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "'GPU number used for testing'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--proc_per_gpu'", ",", "\n", "default", "=", "1", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'Number of processes per GPU'", ")", "\n", "parser", ".", "add_argument", "(", "'--out'", ",", "help", "=", "'output result file'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--eval'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "choices", "=", "[", "'proposal'", ",", "'proposal_fast'", ",", "'bbox'", ",", "'segm'", ",", "'keypoints'", "]", ",", "\n", "help", "=", "'eval types'", ")", "\n", "parser", ".", "add_argument", "(", "'--show'", ",", "action", "=", "'store_true'", ",", "help", "=", "'show results'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.3dod.eval.main": [[124, 153], ["eval.parse_args", "mmcv.Config.fromfile", "mmdet.datasets.utils.get_dataset", "tools.get_label_annos", "mmdet.core.evaluation.kitti_eval.get_official_eval_result", "print", "mmdet.models.build_detector", "mmcv.parallel.MMDataParallel", "tools.train_utils.load_params_from_file2", "mmdet.datasets.build_dataloader", "eval.single_test"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.3dod.test.parse_args", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.utils.get_dataset", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.get_label_annos", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.get_official_eval_result", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.models.builder.build_detector", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.train_utils.__init__.load_params_from_file2", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.loader.build_loader.build_dataloader", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.3dod.test.single_test"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "cfg", "=", "mmcv", ".", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "cfg", ".", "model", ".", "pretrained", "=", "None", "\n", "\n", "dataset", "=", "utils", ".", "get_dataset", "(", "cfg", ".", "data", ".", "val", ")", "\n", "class_names", "=", "cfg", ".", "data", ".", "val", ".", "class_names", "\n", "\n", "if", "args", ".", "gpus", "==", "1", ":", "\n", "        ", "model", "=", "build_detector", "(", "\n", "cfg", ".", "model", ",", "train_cfg", "=", "None", ",", "test_cfg", "=", "cfg", ".", "test_cfg", ",", "full_cfg", "=", "cfg", ")", "\n", "#load_checkpoint(model, args.checkpoint)", "\n", "model", "=", "MMDataParallel", "(", "model", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "load_params_from_file2", "(", "model", ",", "args", ".", "checkpoint", ")", "\n", "data_loader", "=", "build_dataloader", "(", "\n", "dataset", ",", "\n", "1", ",", "\n", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "num_gpus", "=", "1", ",", "\n", "shuffle", "=", "False", ",", "\n", "dist", "=", "False", ")", "\n", "outputs", "=", "single_test", "(", "model", ",", "data_loader", ",", "args", ".", "out", ",", "class_names", ")", "\n", "", "else", ":", "\n", "        ", "NotImplementedError", "\n", "# kitti evaluation", "\n", "", "gt_annos", "=", "kitti", ".", "get_label_annos", "(", "dataset", ".", "label_prefix", ",", "dataset", ".", "sample_ids", ")", "\n", "result", "=", "get_official_eval_result", "(", "gt_annos", ",", "outputs", ",", "current_classes", "=", "class_names", ")", "\n", "print", "(", "result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.3dod.viz_video.draw_geometries_dark_background": [[14, 23], ["open3d.Visualizer", "open3d.Visualizer.create_window", "open3d.Visualizer.get_render_option", "numpy.asarray", "open3d.Visualizer.run", "open3d.Visualizer.destroy_window", "open3d.Visualizer.add_geometry"], "function", ["None"], ["def", "draw_geometries_dark_background", "(", "geometries", ")", ":", "\n", "    ", "vis", "=", "open3d", ".", "Visualizer", "(", ")", "\n", "vis", ".", "create_window", "(", ")", "\n", "opt", "=", "vis", ".", "get_render_option", "(", ")", "\n", "opt", ".", "background_color", "=", "np", ".", "asarray", "(", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "for", "geometry", "in", "geometries", ":", "\n", "        ", "vis", ".", "add_geometry", "(", "geometry", ")", "\n", "", "vis", ".", "run", "(", ")", "\n", "vis", ".", "destroy_window", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.3dod.viz_video.draw_geometries_light_background": [[24, 31], ["open3d.Visualizer", "open3d.Visualizer.create_window", "open3d.Visualizer.run", "open3d.Visualizer.destroy_window", "open3d.Visualizer.add_geometry"], "function", ["None"], ["", "def", "draw_geometries_light_background", "(", "geometries", ")", ":", "\n", "    ", "vis", "=", "open3d", ".", "Visualizer", "(", ")", "\n", "vis", ".", "create_window", "(", ")", "\n", "for", "geometry", "in", "geometries", ":", "\n", "        ", "vis", ".", "add_geometry", "(", "geometry", ")", "\n", "", "vis", ".", "run", "(", ")", "\n", "vis", ".", "destroy_window", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.3dod.viz_video.create3Dbbox": [[32, 202], ["numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.linalg.norm", "open3d.create_mesh_cylinder", "open3d.create_mesh_cylinder.compute_vertex_normals", "numpy.eye", "open3d.create_mesh_cylinder.transform", "open3d.create_mesh_cylinder.paint_uniform_color", "numpy.linalg.norm", "open3d.create_mesh_cylinder", "open3d.create_mesh_cylinder.compute_vertex_normals", "numpy.eye", "open3d.create_mesh_cylinder.transform", "open3d.create_mesh_cylinder.paint_uniform_color", "numpy.linalg.norm", "open3d.create_mesh_cylinder", "open3d.create_mesh_cylinder.compute_vertex_normals", "numpy.eye", "open3d.create_mesh_cylinder.transform", "open3d.create_mesh_cylinder.paint_uniform_color", "numpy.linalg.norm", "open3d.create_mesh_cylinder", "open3d.create_mesh_cylinder.compute_vertex_normals", "numpy.eye", "open3d.create_mesh_cylinder.transform", "open3d.create_mesh_cylinder.paint_uniform_color", "numpy.linalg.norm", "open3d.create_mesh_cylinder", "open3d.create_mesh_cylinder.compute_vertex_normals", "numpy.eye", "open3d.create_mesh_cylinder.transform", "open3d.create_mesh_cylinder.paint_uniform_color", "numpy.linalg.norm", "open3d.create_mesh_cylinder", "open3d.create_mesh_cylinder.compute_vertex_normals", "numpy.eye", "open3d.create_mesh_cylinder.transform", "open3d.create_mesh_cylinder.paint_uniform_color", "numpy.linalg.norm", "open3d.create_mesh_cylinder", "open3d.create_mesh_cylinder.compute_vertex_normals", "numpy.eye", "open3d.create_mesh_cylinder.transform", "open3d.create_mesh_cylinder.paint_uniform_color", "numpy.linalg.norm", "open3d.create_mesh_cylinder", "open3d.create_mesh_cylinder.compute_vertex_normals", "numpy.eye", "open3d.create_mesh_cylinder.transform", "open3d.create_mesh_cylinder.paint_uniform_color", "numpy.linalg.norm", "open3d.create_mesh_cylinder", "open3d.create_mesh_cylinder.compute_vertex_normals", "numpy.eye", "numpy.dot", "open3d.create_mesh_cylinder.transform", "open3d.create_mesh_cylinder.paint_uniform_color", "numpy.linalg.norm", "open3d.create_mesh_cylinder", "open3d.create_mesh_cylinder.compute_vertex_normals", "numpy.eye", "numpy.dot", "open3d.create_mesh_cylinder.transform", "open3d.create_mesh_cylinder.paint_uniform_color", "numpy.linalg.norm", "open3d.create_mesh_cylinder", "open3d.create_mesh_cylinder.compute_vertex_normals", "numpy.eye", "numpy.dot", "open3d.create_mesh_cylinder.transform", "open3d.create_mesh_cylinder.paint_uniform_color", "numpy.linalg.norm", "open3d.create_mesh_cylinder", "open3d.create_mesh_cylinder.compute_vertex_normals", "numpy.eye", "numpy.dot", "open3d.create_mesh_cylinder.transform", "open3d.create_mesh_cylinder.paint_uniform_color", "numpy.linalg.norm", "open3d.create_mesh_cylinder", "open3d.create_mesh_cylinder.compute_vertex_normals", "numpy.eye", "open3d.create_mesh_cylinder.transform", "open3d.create_mesh_cylinder.paint_uniform_color", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.asarray().flatten", "numpy.asarray().flatten", "numpy.asarray().flatten", "numpy.asarray().flatten", "numpy.asarray().flatten", "numpy.asarray().flatten", "numpy.asarray().flatten", "numpy.asarray().flatten", "numpy.asarray().flatten", "numpy.asarray().flatten", "numpy.asarray().flatten", "numpy.asarray().flatten", "numpy.asarray().flatten", "numpy.asarray().flatten", "numpy.asarray().flatten", "numpy.asarray().flatten", "numpy.asarray().flatten", "numpy.asarray().flatten", "numpy.asarray().flatten", "numpy.asarray().flatten", "math.cos", "math.sin", "math.cos", "math.cos", "math.sin", "math.cos", "math.cos", "math.sin", "math.cos", "math.sin", "math.sin", "math.sin", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray"], "function", ["None"], ["", "def", "create3Dbbox", "(", "center", ",", "h", ",", "w", ",", "l", ",", "r_y", ",", "type", "=", "\"pred\"", ")", ":", "\n", "    ", "if", "type", "==", "\"pred\"", ":", "\n", "        ", "color", "=", "[", "1", ",", "0.75", ",", "0", "]", "# (normalized RGB)", "\n", "front_color", "=", "[", "1", ",", "0", ",", "0", "]", "# (normalized RGB)", "\n", "", "else", ":", "# (if type == \"gt\":)", "\n", "        ", "color", "=", "[", "1", ",", "0", ",", "0.75", "]", "# (normalized RGB)", "\n", "front_color", "=", "[", "0", ",", "0.9", ",", "1", "]", "# (normalized RGB)", "\n", "\n", "", "Rmat", "=", "np", ".", "asarray", "(", "[", "[", "math", ".", "cos", "(", "r_y", ")", ",", "0", ",", "math", ".", "sin", "(", "r_y", ")", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "math", ".", "sin", "(", "r_y", ")", ",", "0", ",", "math", ".", "cos", "(", "r_y", ")", "]", "]", ",", "\n", "dtype", "=", "'float32'", ")", "\n", "\n", "Rmat_90", "=", "np", ".", "asarray", "(", "[", "[", "math", ".", "cos", "(", "r_y", "+", "np", ".", "pi", "/", "2", ")", ",", "0", ",", "math", ".", "sin", "(", "r_y", "+", "np", ".", "pi", "/", "2", ")", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "math", ".", "sin", "(", "r_y", "+", "np", ".", "pi", "/", "2", ")", ",", "0", ",", "math", ".", "cos", "(", "r_y", "+", "np", ".", "pi", "/", "2", ")", "]", "]", ",", "\n", "dtype", "=", "'float32'", ")", "\n", "\n", "Rmat_90_x", "=", "np", ".", "asarray", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "math", ".", "cos", "(", "np", ".", "pi", "/", "2", ")", ",", "math", ".", "sin", "(", "np", ".", "pi", "/", "2", ")", "]", ",", "\n", "[", "0", ",", "-", "math", ".", "sin", "(", "np", ".", "pi", "/", "2", ")", ",", "math", ".", "cos", "(", "np", ".", "pi", "/", "2", ")", "]", "]", ",", "\n", "dtype", "=", "'float32'", ")", "\n", "\n", "p0", "=", "center", "+", "np", ".", "dot", "(", "Rmat", ",", "np", ".", "asarray", "(", "[", "l", "/", "2.0", ",", "0", ",", "w", "/", "2.0", "]", ",", "dtype", "=", "'float32'", ")", ".", "flatten", "(", ")", ")", "\n", "p1", "=", "center", "+", "np", ".", "dot", "(", "Rmat", ",", "np", ".", "asarray", "(", "[", "-", "l", "/", "2.0", ",", "0", ",", "w", "/", "2.0", "]", ",", "dtype", "=", "'float32'", ")", ".", "flatten", "(", ")", ")", "\n", "p2", "=", "center", "+", "np", ".", "dot", "(", "Rmat", ",", "np", ".", "asarray", "(", "[", "-", "l", "/", "2.0", ",", "0", ",", "-", "w", "/", "2.0", "]", ",", "dtype", "=", "'float32'", ")", ".", "flatten", "(", ")", ")", "\n", "p3", "=", "center", "+", "np", ".", "dot", "(", "Rmat", ",", "np", ".", "asarray", "(", "[", "l", "/", "2.0", ",", "0", ",", "-", "w", "/", "2.0", "]", ",", "dtype", "=", "'float32'", ")", ".", "flatten", "(", ")", ")", "\n", "p4", "=", "center", "+", "np", ".", "dot", "(", "Rmat", ",", "np", ".", "asarray", "(", "[", "l", "/", "2.0", ",", "-", "h", ",", "w", "/", "2.0", "]", ",", "dtype", "=", "'float32'", ")", ".", "flatten", "(", ")", ")", "\n", "p5", "=", "center", "+", "np", ".", "dot", "(", "Rmat", ",", "np", ".", "asarray", "(", "[", "-", "l", "/", "2.0", ",", "-", "h", ",", "w", "/", "2.0", "]", ",", "dtype", "=", "'float32'", ")", ".", "flatten", "(", ")", ")", "\n", "p6", "=", "center", "+", "np", ".", "dot", "(", "Rmat", ",", "np", ".", "asarray", "(", "[", "-", "l", "/", "2.0", ",", "-", "h", ",", "-", "w", "/", "2.0", "]", ",", "dtype", "=", "'float32'", ")", ".", "flatten", "(", ")", ")", "\n", "p7", "=", "center", "+", "np", ".", "dot", "(", "Rmat", ",", "np", ".", "asarray", "(", "[", "l", "/", "2.0", ",", "-", "h", ",", "-", "w", "/", "2.0", "]", ",", "dtype", "=", "'float32'", ")", ".", "flatten", "(", ")", ")", "\n", "\n", "p0_3", "=", "center", "+", "np", ".", "dot", "(", "Rmat", ",", "np", ".", "asarray", "(", "[", "l", "/", "2.0", ",", "0", ",", "0", "]", ",", "dtype", "=", "'float32'", ")", ".", "flatten", "(", ")", ")", "\n", "p1_2", "=", "center", "+", "np", ".", "dot", "(", "Rmat", ",", "np", ".", "asarray", "(", "[", "-", "l", "/", "2.0", ",", "0", ",", "0", "]", ",", "dtype", "=", "'float32'", ")", ".", "flatten", "(", ")", ")", "\n", "p4_7", "=", "center", "+", "np", ".", "dot", "(", "Rmat", ",", "np", ".", "asarray", "(", "[", "l", "/", "2.0", ",", "-", "h", ",", "0", "]", ",", "dtype", "=", "'float32'", ")", ".", "flatten", "(", ")", ")", "\n", "p5_6", "=", "center", "+", "np", ".", "dot", "(", "Rmat", ",", "np", ".", "asarray", "(", "[", "-", "l", "/", "2.0", ",", "-", "h", ",", "0", "]", ",", "dtype", "=", "'float32'", ")", ".", "flatten", "(", ")", ")", "\n", "p0_1", "=", "center", "+", "np", ".", "dot", "(", "Rmat", ",", "np", ".", "asarray", "(", "[", "0", ",", "0", ",", "w", "/", "2.0", "]", ",", "dtype", "=", "'float32'", ")", ".", "flatten", "(", ")", ")", "\n", "p3_2", "=", "center", "+", "np", ".", "dot", "(", "Rmat", ",", "np", ".", "asarray", "(", "[", "0", ",", "0", ",", "-", "w", "/", "2.0", "]", ",", "dtype", "=", "'float32'", ")", ".", "flatten", "(", ")", ")", "\n", "p4_5", "=", "center", "+", "np", ".", "dot", "(", "Rmat", ",", "np", ".", "asarray", "(", "[", "0", ",", "-", "h", ",", "w", "/", "2.0", "]", ",", "dtype", "=", "'float32'", ")", ".", "flatten", "(", ")", ")", "\n", "p7_6", "=", "center", "+", "np", ".", "dot", "(", "Rmat", ",", "np", ".", "asarray", "(", "[", "0", ",", "-", "h", ",", "-", "w", "/", "2.0", "]", ",", "dtype", "=", "'float32'", ")", ".", "flatten", "(", ")", ")", "\n", "p0_4", "=", "center", "+", "np", ".", "dot", "(", "Rmat", ",", "np", ".", "asarray", "(", "[", "l", "/", "2.0", ",", "-", "h", "/", "2.0", ",", "w", "/", "2.0", "]", ",", "dtype", "=", "'float32'", ")", ".", "flatten", "(", ")", ")", "\n", "p3_7", "=", "center", "+", "np", ".", "dot", "(", "Rmat", ",", "np", ".", "asarray", "(", "[", "l", "/", "2.0", ",", "-", "h", "/", "2.0", ",", "-", "w", "/", "2.0", "]", ",", "dtype", "=", "'float32'", ")", ".", "flatten", "(", ")", ")", "\n", "p1_5", "=", "center", "+", "np", ".", "dot", "(", "Rmat", ",", "np", ".", "asarray", "(", "[", "-", "l", "/", "2.0", ",", "-", "h", "/", "2.0", ",", "w", "/", "2.0", "]", ",", "dtype", "=", "'float32'", ")", ".", "flatten", "(", ")", ")", "\n", "p2_6", "=", "center", "+", "np", ".", "dot", "(", "Rmat", ",", "np", ".", "asarray", "(", "[", "-", "l", "/", "2.0", ",", "-", "h", "/", "2.0", ",", "-", "w", "/", "2.0", "]", ",", "dtype", "=", "'float32'", ")", ".", "flatten", "(", ")", ")", "\n", "p0_1_3_2", "=", "center", "\n", "\n", "length_0_3", "=", "np", ".", "linalg", ".", "norm", "(", "p0", "-", "p3", ")", "\n", "cylinder_0_3", "=", "open3d", ".", "create_mesh_cylinder", "(", "radius", "=", "0.025", ",", "height", "=", "length_0_3", ")", "\n", "cylinder_0_3", ".", "compute_vertex_normals", "(", ")", "\n", "transform_0_3", "=", "np", ".", "eye", "(", "4", ")", "\n", "transform_0_3", "[", "0", ":", "3", ",", "0", ":", "3", "]", "=", "Rmat", "\n", "transform_0_3", "[", "0", ":", "3", ",", "3", "]", "=", "p0_3", "\n", "cylinder_0_3", ".", "transform", "(", "transform_0_3", ")", "\n", "cylinder_0_3", ".", "paint_uniform_color", "(", "front_color", ")", "\n", "\n", "length_1_2", "=", "np", ".", "linalg", ".", "norm", "(", "p1", "-", "p2", ")", "\n", "cylinder_1_2", "=", "open3d", ".", "create_mesh_cylinder", "(", "radius", "=", "0.025", ",", "height", "=", "length_1_2", ")", "\n", "cylinder_1_2", ".", "compute_vertex_normals", "(", ")", "\n", "transform_1_2", "=", "np", ".", "eye", "(", "4", ")", "\n", "transform_1_2", "[", "0", ":", "3", ",", "0", ":", "3", "]", "=", "Rmat", "\n", "transform_1_2", "[", "0", ":", "3", ",", "3", "]", "=", "p1_2", "\n", "cylinder_1_2", ".", "transform", "(", "transform_1_2", ")", "\n", "cylinder_1_2", ".", "paint_uniform_color", "(", "color", ")", "\n", "\n", "length_4_7", "=", "np", ".", "linalg", ".", "norm", "(", "p4", "-", "p7", ")", "\n", "cylinder_4_7", "=", "open3d", ".", "create_mesh_cylinder", "(", "radius", "=", "0.025", ",", "height", "=", "length_4_7", ")", "\n", "cylinder_4_7", ".", "compute_vertex_normals", "(", ")", "\n", "transform_4_7", "=", "np", ".", "eye", "(", "4", ")", "\n", "transform_4_7", "[", "0", ":", "3", ",", "0", ":", "3", "]", "=", "Rmat", "\n", "transform_4_7", "[", "0", ":", "3", ",", "3", "]", "=", "p4_7", "\n", "cylinder_4_7", ".", "transform", "(", "transform_4_7", ")", "\n", "cylinder_4_7", ".", "paint_uniform_color", "(", "front_color", ")", "\n", "\n", "length_5_6", "=", "np", ".", "linalg", ".", "norm", "(", "p5", "-", "p6", ")", "\n", "cylinder_5_6", "=", "open3d", ".", "create_mesh_cylinder", "(", "radius", "=", "0.025", ",", "height", "=", "length_5_6", ")", "\n", "cylinder_5_6", ".", "compute_vertex_normals", "(", ")", "\n", "transform_5_6", "=", "np", ".", "eye", "(", "4", ")", "\n", "transform_5_6", "[", "0", ":", "3", ",", "0", ":", "3", "]", "=", "Rmat", "\n", "transform_5_6", "[", "0", ":", "3", ",", "3", "]", "=", "p5_6", "\n", "cylinder_5_6", ".", "transform", "(", "transform_5_6", ")", "\n", "cylinder_5_6", ".", "paint_uniform_color", "(", "color", ")", "\n", "\n", "# #", "\n", "\n", "length_0_1", "=", "np", ".", "linalg", ".", "norm", "(", "p0", "-", "p1", ")", "\n", "cylinder_0_1", "=", "open3d", ".", "create_mesh_cylinder", "(", "radius", "=", "0.025", ",", "height", "=", "length_0_1", ")", "\n", "cylinder_0_1", ".", "compute_vertex_normals", "(", ")", "\n", "transform_0_1", "=", "np", ".", "eye", "(", "4", ")", "\n", "transform_0_1", "[", "0", ":", "3", ",", "0", ":", "3", "]", "=", "Rmat_90", "\n", "transform_0_1", "[", "0", ":", "3", ",", "3", "]", "=", "p0_1", "\n", "cylinder_0_1", ".", "transform", "(", "transform_0_1", ")", "\n", "cylinder_0_1", ".", "paint_uniform_color", "(", "color", ")", "\n", "\n", "length_3_2", "=", "np", ".", "linalg", ".", "norm", "(", "p3", "-", "p2", ")", "\n", "cylinder_3_2", "=", "open3d", ".", "create_mesh_cylinder", "(", "radius", "=", "0.025", ",", "height", "=", "length_3_2", ")", "\n", "cylinder_3_2", ".", "compute_vertex_normals", "(", ")", "\n", "transform_3_2", "=", "np", ".", "eye", "(", "4", ")", "\n", "transform_3_2", "[", "0", ":", "3", ",", "0", ":", "3", "]", "=", "Rmat_90", "\n", "transform_3_2", "[", "0", ":", "3", ",", "3", "]", "=", "p3_2", "\n", "cylinder_3_2", ".", "transform", "(", "transform_3_2", ")", "\n", "cylinder_3_2", ".", "paint_uniform_color", "(", "color", ")", "\n", "\n", "length_4_5", "=", "np", ".", "linalg", ".", "norm", "(", "p4", "-", "p5", ")", "\n", "cylinder_4_5", "=", "open3d", ".", "create_mesh_cylinder", "(", "radius", "=", "0.025", ",", "height", "=", "length_4_5", ")", "\n", "cylinder_4_5", ".", "compute_vertex_normals", "(", ")", "\n", "transform_4_5", "=", "np", ".", "eye", "(", "4", ")", "\n", "transform_4_5", "[", "0", ":", "3", ",", "0", ":", "3", "]", "=", "Rmat_90", "\n", "transform_4_5", "[", "0", ":", "3", ",", "3", "]", "=", "p4_5", "\n", "cylinder_4_5", ".", "transform", "(", "transform_4_5", ")", "\n", "cylinder_4_5", ".", "paint_uniform_color", "(", "color", ")", "\n", "\n", "length_7_6", "=", "np", ".", "linalg", ".", "norm", "(", "p7", "-", "p6", ")", "\n", "cylinder_7_6", "=", "open3d", ".", "create_mesh_cylinder", "(", "radius", "=", "0.025", ",", "height", "=", "length_7_6", ")", "\n", "cylinder_7_6", ".", "compute_vertex_normals", "(", ")", "\n", "transform_7_6", "=", "np", ".", "eye", "(", "4", ")", "\n", "transform_7_6", "[", "0", ":", "3", ",", "0", ":", "3", "]", "=", "Rmat_90", "\n", "transform_7_6", "[", "0", ":", "3", ",", "3", "]", "=", "p7_6", "\n", "cylinder_7_6", ".", "transform", "(", "transform_7_6", ")", "\n", "cylinder_7_6", ".", "paint_uniform_color", "(", "color", ")", "\n", "\n", "# #", "\n", "\n", "length_0_4", "=", "np", ".", "linalg", ".", "norm", "(", "p0", "-", "p4", ")", "\n", "cylinder_0_4", "=", "open3d", ".", "create_mesh_cylinder", "(", "radius", "=", "0.025", ",", "height", "=", "length_0_4", ")", "\n", "cylinder_0_4", ".", "compute_vertex_normals", "(", ")", "\n", "transform_0_4", "=", "np", ".", "eye", "(", "4", ")", "\n", "transform_0_4", "[", "0", ":", "3", ",", "0", ":", "3", "]", "=", "np", ".", "dot", "(", "Rmat", ",", "Rmat_90_x", ")", "\n", "transform_0_4", "[", "0", ":", "3", ",", "3", "]", "=", "p0_4", "\n", "cylinder_0_4", ".", "transform", "(", "transform_0_4", ")", "\n", "cylinder_0_4", ".", "paint_uniform_color", "(", "front_color", ")", "\n", "\n", "length_3_7", "=", "np", ".", "linalg", ".", "norm", "(", "p3", "-", "p7", ")", "\n", "cylinder_3_7", "=", "open3d", ".", "create_mesh_cylinder", "(", "radius", "=", "0.025", ",", "height", "=", "length_3_7", ")", "\n", "cylinder_3_7", ".", "compute_vertex_normals", "(", ")", "\n", "transform_3_7", "=", "np", ".", "eye", "(", "4", ")", "\n", "transform_3_7", "[", "0", ":", "3", ",", "0", ":", "3", "]", "=", "np", ".", "dot", "(", "Rmat", ",", "Rmat_90_x", ")", "\n", "transform_3_7", "[", "0", ":", "3", ",", "3", "]", "=", "p3_7", "\n", "cylinder_3_7", ".", "transform", "(", "transform_3_7", ")", "\n", "cylinder_3_7", ".", "paint_uniform_color", "(", "front_color", ")", "\n", "\n", "length_1_5", "=", "np", ".", "linalg", ".", "norm", "(", "p1", "-", "p5", ")", "\n", "cylinder_1_5", "=", "open3d", ".", "create_mesh_cylinder", "(", "radius", "=", "0.025", ",", "height", "=", "length_1_5", ")", "\n", "cylinder_1_5", ".", "compute_vertex_normals", "(", ")", "\n", "transform_1_5", "=", "np", ".", "eye", "(", "4", ")", "\n", "transform_1_5", "[", "0", ":", "3", ",", "0", ":", "3", "]", "=", "np", ".", "dot", "(", "Rmat", ",", "Rmat_90_x", ")", "\n", "transform_1_5", "[", "0", ":", "3", ",", "3", "]", "=", "p1_5", "\n", "cylinder_1_5", ".", "transform", "(", "transform_1_5", ")", "\n", "cylinder_1_5", ".", "paint_uniform_color", "(", "color", ")", "\n", "\n", "length_2_6", "=", "np", ".", "linalg", ".", "norm", "(", "p2", "-", "p6", ")", "\n", "cylinder_2_6", "=", "open3d", ".", "create_mesh_cylinder", "(", "radius", "=", "0.025", ",", "height", "=", "length_2_6", ")", "\n", "cylinder_2_6", ".", "compute_vertex_normals", "(", ")", "\n", "transform_2_6", "=", "np", ".", "eye", "(", "4", ")", "\n", "transform_2_6", "[", "0", ":", "3", ",", "0", ":", "3", "]", "=", "np", ".", "dot", "(", "Rmat", ",", "Rmat_90_x", ")", "\n", "transform_2_6", "[", "0", ":", "3", ",", "3", "]", "=", "p2_6", "\n", "cylinder_2_6", ".", "transform", "(", "transform_2_6", ")", "\n", "cylinder_2_6", ".", "paint_uniform_color", "(", "color", ")", "\n", "\n", "# #", "\n", "\n", "length_0_1_3_2", "=", "np", ".", "linalg", ".", "norm", "(", "p0_1", "-", "p3_2", ")", "\n", "cylinder_0_1_3_2", "=", "open3d", ".", "create_mesh_cylinder", "(", "radius", "=", "0.025", ",", "height", "=", "length_0_1_3_2", ")", "\n", "cylinder_0_1_3_2", ".", "compute_vertex_normals", "(", ")", "\n", "transform_0_1_3_2", "=", "np", ".", "eye", "(", "4", ")", "\n", "transform_0_1_3_2", "[", "0", ":", "3", ",", "0", ":", "3", "]", "=", "Rmat", "\n", "transform_0_1_3_2", "[", "0", ":", "3", ",", "3", "]", "=", "p0_1_3_2", "\n", "cylinder_0_1_3_2", ".", "transform", "(", "transform_0_1_3_2", ")", "\n", "cylinder_0_1_3_2", ".", "paint_uniform_color", "(", "color", ")", "\n", "\n", "return", "[", "cylinder_0_1_3_2", ",", "cylinder_0_3", ",", "cylinder_1_2", ",", "cylinder_4_7", ",", "cylinder_5_6", ",", "cylinder_0_1", ",", "cylinder_3_2", ",", "cylinder_4_5", ",", "cylinder_7_6", ",", "cylinder_0_4", ",", "cylinder_3_7", ",", "cylinder_1_5", ",", "cylinder_2_6", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.3dod.viz_video.create3Dbbox_poly": [[203, 233], ["numpy.asarray", "numpy.array", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.asarray().flatten", "numpy.asarray().flatten", "numpy.asarray().flatten", "numpy.asarray().flatten", "numpy.asarray().flatten", "numpy.asarray().flatten", "numpy.asarray().flatten", "numpy.asarray().flatten", "math.cos", "math.sin", "math.cos", "math.sin", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray"], "function", ["None"], ["", "def", "create3Dbbox_poly", "(", "center", ",", "h", ",", "w", ",", "l", ",", "r_y", ",", "P2_mat", ",", "type", "=", "\"pred\"", ")", ":", "\n", "    ", "if", "type", "==", "\"pred\"", ":", "\n", "        ", "color", "=", "[", "0", ",", "190", ",", "255", "]", "# (BGR)", "\n", "front_color", "=", "[", "0", ",", "0", ",", "255", "]", "# (BGR)", "\n", "", "else", ":", "# (if type == \"gt\":)", "\n", "        ", "color", "=", "[", "190", ",", "0", ",", "255", "]", "# (BGR)", "\n", "front_color", "=", "[", "255", ",", "230", ",", "0", "]", "# (BGR)", "\n", "\n", "", "poly", "=", "{", "}", "\n", "\n", "Rmat", "=", "np", ".", "asarray", "(", "[", "[", "math", ".", "cos", "(", "r_y", ")", ",", "0", ",", "math", ".", "sin", "(", "r_y", ")", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "math", ".", "sin", "(", "r_y", ")", ",", "0", ",", "math", ".", "cos", "(", "r_y", ")", "]", "]", ",", "\n", "dtype", "=", "'float32'", ")", "\n", "\n", "p0", "=", "center", "+", "np", ".", "dot", "(", "Rmat", ",", "np", ".", "asarray", "(", "[", "l", "/", "2.0", ",", "0", ",", "w", "/", "2.0", "]", ",", "dtype", "=", "'float32'", ")", ".", "flatten", "(", ")", ")", "\n", "p1", "=", "center", "+", "np", ".", "dot", "(", "Rmat", ",", "np", ".", "asarray", "(", "[", "-", "l", "/", "2.0", ",", "0", ",", "w", "/", "2.0", "]", ",", "dtype", "=", "'float32'", ")", ".", "flatten", "(", ")", ")", "\n", "p2", "=", "center", "+", "np", ".", "dot", "(", "Rmat", ",", "np", ".", "asarray", "(", "[", "-", "l", "/", "2.0", ",", "0", ",", "-", "w", "/", "2.0", "]", ",", "dtype", "=", "'float32'", ")", ".", "flatten", "(", ")", ")", "\n", "p3", "=", "center", "+", "np", ".", "dot", "(", "Rmat", ",", "np", ".", "asarray", "(", "[", "l", "/", "2.0", ",", "0", ",", "-", "w", "/", "2.0", "]", ",", "dtype", "=", "'float32'", ")", ".", "flatten", "(", ")", ")", "\n", "p4", "=", "center", "+", "np", ".", "dot", "(", "Rmat", ",", "np", ".", "asarray", "(", "[", "l", "/", "2.0", ",", "-", "h", ",", "w", "/", "2.0", "]", ",", "dtype", "=", "'float32'", ")", ".", "flatten", "(", ")", ")", "\n", "p5", "=", "center", "+", "np", ".", "dot", "(", "Rmat", ",", "np", ".", "asarray", "(", "[", "-", "l", "/", "2.0", ",", "-", "h", ",", "w", "/", "2.0", "]", ",", "dtype", "=", "'float32'", ")", ".", "flatten", "(", ")", ")", "\n", "p6", "=", "center", "+", "np", ".", "dot", "(", "Rmat", ",", "np", ".", "asarray", "(", "[", "-", "l", "/", "2.0", ",", "-", "h", ",", "-", "w", "/", "2.0", "]", ",", "dtype", "=", "'float32'", ")", ".", "flatten", "(", ")", ")", "\n", "p7", "=", "center", "+", "np", ".", "dot", "(", "Rmat", ",", "np", ".", "asarray", "(", "[", "l", "/", "2.0", ",", "-", "h", ",", "-", "w", "/", "2.0", "]", ",", "dtype", "=", "'float32'", ")", ".", "flatten", "(", ")", ")", "\n", "\n", "poly", "[", "'points'", "]", "=", "np", ".", "array", "(", "[", "p0", ",", "p1", ",", "p2", ",", "p3", ",", "p4", ",", "p5", ",", "p6", ",", "p7", "]", ")", "\n", "poly", "[", "'lines'", "]", "=", "[", "[", "0", ",", "3", ",", "7", ",", "4", ",", "0", "]", ",", "[", "1", ",", "2", ",", "6", ",", "5", ",", "1", "]", ",", "[", "0", ",", "1", "]", ",", "[", "2", ",", "3", "]", ",", "[", "6", ",", "7", "]", ",", "[", "4", ",", "5", "]", "]", "# (0 -> 3 -> 7 -> 4 -> 0, 1 -> 2 -> 6 -> 5 -> 1, etc.)", "\n", "poly", "[", "'colors'", "]", "=", "[", "front_color", ",", "color", ",", "color", ",", "color", ",", "color", ",", "color", "]", "\n", "poly", "[", "'P0_mat'", "]", "=", "P2_mat", "\n", "\n", "return", "poly", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.3dod.viz_video.draw_3d_polys": [[234, 252], ["numpy.copy", "enumerate", "numpy.vstack", "numpy.dot", "enumerate", "cv2.polylines", "numpy.array", "numpy.int32", "numpy.ones"], "function", ["None"], ["", "def", "draw_3d_polys", "(", "img", ",", "polys", ")", ":", "\n", "    ", "img", "=", "np", ".", "copy", "(", "img", ")", "\n", "for", "poly", "in", "polys", ":", "\n", "        ", "for", "n", ",", "line", "in", "enumerate", "(", "poly", "[", "'lines'", "]", ")", ":", "\n", "            ", "if", "'colors'", "in", "poly", ":", "\n", "                ", "bg", "=", "poly", "[", "'colors'", "]", "[", "n", "]", "\n", "", "else", ":", "\n", "                ", "bg", "=", "np", ".", "array", "(", "[", "255", ",", "0", ",", "0", "]", ",", "dtype", "=", "'float64'", ")", "\n", "\n", "", "p3d", "=", "np", ".", "vstack", "(", "(", "poly", "[", "'points'", "]", "[", "line", "]", ".", "T", ",", "np", ".", "ones", "(", "(", "1", ",", "poly", "[", "'points'", "]", "[", "line", "]", ".", "shape", "[", "0", "]", ")", ")", ")", ")", "\n", "p2d", "=", "np", ".", "dot", "(", "poly", "[", "'P0_mat'", "]", ",", "p3d", ")", "\n", "\n", "for", "m", ",", "p", "in", "enumerate", "(", "p2d", "[", "2", ",", ":", "]", ")", ":", "\n", "                ", "p2d", "[", ":", ",", "m", "]", "=", "p2d", "[", ":", ",", "m", "]", "/", "p", "\n", "\n", "", "cv2", ".", "polylines", "(", "img", ",", "np", ".", "int32", "(", "[", "p2d", "[", ":", "2", ",", ":", "]", ".", "T", "]", ")", ",", "False", ",", "bg", ",", "lineType", "=", "cv2", ".", "LINE_AA", ",", "thickness", "=", "2", ")", "\n", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.3dod.train.parse_args": [[18, 44], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.3dod.test.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a detector'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'train config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'--work_dir'", ",", "help", "=", "'the dir to save logs and models'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--validate'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to evaluate the checkpoint during training'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--gpus'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1", ",", "\n", "help", "=", "'number of gpus to use '", "\n", "'(only applicable to non-distributed training)'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'random seed'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--launcher'", ",", "\n", "choices", "=", "[", "'none'", ",", "'pytorch'", ",", "'slurm'", ",", "'mpi'", "]", ",", "\n", "default", "=", "'none'", ",", "\n", "help", "=", "'job launcher'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--max_ckpt_save_num'", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.3dod.train.main": [[47, 133], ["train.parse_args", "mmcv.Config.fromfile", "pathlib.Path().mkdir", "tools.env.get_root_logger", "tools.env.get_root_logger.info", "mmdet.models.build_detector", "mmdet.datasets.get_dataset", "tools.train_utils.optimization.build_optimizer", "mmdet.datasets.build_dataloader", "tools.train_utils.optimization.build_scheduler", "tools.env.get_root_logger.info", "tools.train_utils.train_model", "tools.env.get_root_logger.info", "tools.env.init_dist", "tools.env.get_root_logger.info", "tools.env.set_random_seed", "mmcv.parallel.MMDistributedDataParallel().cuda", "mmcv.parallel.MMDataParallel().cuda", "tools.train_utils.load_params_from_file", "tools.train_utils.load_params_from_file2", "pathlib.Path", "len", "mmcv.parallel.MMDistributedDataParallel", "mmcv.parallel.MMDataParallel", "range"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.3dod.test.parse_args", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.env.get_root_logger", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.models.builder.build_detector", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.utils.get_dataset", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.__init__.build_optimizer", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.loader.build_loader.build_dataloader", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.__init__.build_scheduler", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.train_utils.__init__.train_model", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.env.init_dist", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.env.set_random_seed", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.train_utils.__init__.load_params_from_file", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.train_utils.__init__.load_params_from_file2"], ["", "def", "main", "(", ")", ":", "\n", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "cfg", "=", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "\n", "if", "args", ".", "work_dir", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "work_dir", "=", "args", ".", "work_dir", "\n", "\n", "", "pathlib", ".", "Path", "(", "cfg", ".", "work_dir", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "cfg", ".", "gpus", "=", "args", ".", "gpus", "\n", "\n", "# init distributed env first, since logger depends on the dist info.", "\n", "if", "args", ".", "launcher", "==", "'none'", ":", "\n", "        ", "distributed", "=", "False", "\n", "", "else", ":", "\n", "        ", "distributed", "=", "True", "\n", "init_dist", "(", "args", ".", "launcher", ",", "**", "cfg", ".", "dist_params", ")", "\n", "\n", "# init logger before other steps", "\n", "", "logger", "=", "get_root_logger", "(", "cfg", ".", "work_dir", ")", "\n", "\n", "logger", ".", "info", "(", "'Distributed training: {}'", ".", "format", "(", "distributed", ")", ")", "\n", "\n", "# set random seeds", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "logger", ".", "info", "(", "'Set random seed to {}'", ".", "format", "(", "args", ".", "seed", ")", ")", "\n", "set_random_seed", "(", "args", ".", "seed", ")", "\n", "\n", "", "model", "=", "build_detector", "(", "\n", "cfg", ".", "model", ",", "train_cfg", "=", "cfg", ".", "train_cfg", ",", "test_cfg", "=", "cfg", ".", "test_cfg", ",", "full_cfg", "=", "cfg", ")", "\n", "\n", "if", "distributed", ":", "\n", "        ", "model", "=", "MMDistributedDataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "MMDataParallel", "(", "model", ",", "device_ids", "=", "range", "(", "cfg", ".", "gpus", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "", "if", "cfg", ".", "SA_SSD_pretrained", ":", "\n", "        ", "load_params_from_file", "(", "model", ",", "\"/root/ebms_3dod/3dod/epoch_50.pth\"", ")", "\n", "\n", "", "train_dataset", "=", "get_dataset", "(", "cfg", ".", "data", ".", "train", ")", "\n", "\n", "optimizer", "=", "build_optimizer", "(", "model", ",", "cfg", ".", "optimizer", ")", "\n", "\n", "train_loader", "=", "build_dataloader", "(", "\n", "train_dataset", ",", "\n", "cfg", ".", "data", ".", "imgs_per_gpu", ",", "\n", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "dist", "=", "distributed", ")", "\n", "\n", "start_epoch", "=", "it", "=", "0", "\n", "last_epoch", "=", "-", "1", "\n", "\n", "if", "cfg", ".", "resume_from", "is", "not", "None", ":", "\n", "        ", "load_params_from_file2", "(", "model", ",", "cfg", ".", "work_dir", "+", "\"/checkpoint_epoch_%d.pth\"", "%", "cfg", ".", "resume_from", ")", "\n", "\n", "start_epoch", "=", "it", "=", "cfg", ".", "resume_from", "\n", "last_epoch", "=", "cfg", ".", "resume_from", "-", "1", "\n", "\n", "", "lr_scheduler", ",", "lr_warmup_scheduler", "=", "build_scheduler", "(", "\n", "optimizer", ",", "total_iters_each_epoch", "=", "len", "(", "train_loader", ")", ",", "total_epochs", "=", "cfg", ".", "total_epochs", ",", "\n", "last_epoch", "=", "last_epoch", ",", "optim_cfg", "=", "cfg", ".", "optimizer", ",", "lr_cfg", "=", "cfg", ".", "lr_config", "\n", ")", "\n", "# -----------------------start training---------------------------", "\n", "logger", ".", "info", "(", "'**********************Start training**********************'", ")", "\n", "\n", "train_model", "(", "\n", "model", ",", "\n", "optimizer", ",", "\n", "train_loader", ",", "\n", "lr_scheduler", "=", "lr_scheduler", ",", "\n", "optim_cfg", "=", "cfg", ".", "optimizer", ",", "\n", "start_epoch", "=", "start_epoch", ",", "\n", "total_epochs", "=", "cfg", ".", "total_epochs", ",", "\n", "start_iter", "=", "it", ",", "\n", "rank", "=", "args", ".", "local_rank", ",", "\n", "logger", "=", "logger", ",", "\n", "ckpt_save_dir", "=", "cfg", ".", "work_dir", ",", "\n", "lr_warmup_scheduler", "=", "lr_warmup_scheduler", ",", "\n", "ckpt_save_interval", "=", "cfg", ".", "checkpoint_config", ".", "interval", ",", "\n", "max_ckpt_save_num", "=", "args", ".", "max_ckpt_save_num", ",", "\n", "log_interval", "=", "cfg", ".", "log_config", ".", "interval", "\n", ")", "\n", "\n", "logger", ".", "info", "(", "'**********************End training**********************'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.3dod.test.single_test": [[17, 94], ["model.eval", "mmcv.ProgressBar", "enumerate", "mmcv.mkdir_or_exist", "len", "len", "range", "torch.no_grad", "torch.no_grad", "model", "numpy.array", "mmcv.ProgressBar.update", "tools.get_start_result_anno", "zip", "annos.append", "numpy.minimum", "numpy.maximum", "anno[].append", "anno[].append", "anno[].append", "anno[].append", "anno[].append", "anno[].append", "anno[].append", "anno[].append", "anno[].append", "annos.append", "annos.append", "os.path.join", "open", "open.close", "tools.empty_result_anno", "range", "os.path.join", "numpy.stack", "os.path.join", "open", "open.close", "tools.empty_result_anno", "open", "zip", "kitti.get_start_result_anno.items", "int", "template.format", "open.write"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.get_start_result_anno", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.empty_result_anno", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.empty_result_anno"], ["def", "single_test", "(", "model", ",", "data_loader", ",", "saveto", "=", "None", ",", "class_names", "=", "[", "'Car'", "]", ")", ":", "\n", "    ", "template", "=", "'{} '", "+", "' '", ".", "join", "(", "[", "'{:.4f}'", "for", "_", "in", "range", "(", "15", ")", "]", ")", "+", "'\\n'", "\n", "if", "saveto", "is", "not", "None", ":", "\n", "        ", "mmcv", ".", "mkdir_or_exist", "(", "saveto", ")", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "annos", "=", "[", "]", "\n", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "data_loader", ".", "dataset", ")", ")", "\n", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "results", "=", "model", "(", "return_loss", "=", "False", ",", "**", "data", ")", "\n", "", "image_shape", "=", "(", "375", ",", "1242", ")", "\n", "for", "re", "in", "results", ":", "\n", "            ", "img_idx", "=", "re", "[", "'image_idx'", "]", "\n", "if", "re", "[", "'bbox'", "]", "is", "not", "None", ":", "\n", "                ", "box2d", "=", "re", "[", "'bbox'", "]", "\n", "box3d", "=", "re", "[", "'box3d_camera'", "]", "\n", "labels", "=", "re", "[", "'label_preds'", "]", "\n", "scores", "=", "re", "[", "'scores'", "]", "\n", "alphas", "=", "re", "[", "'alphas'", "]", "\n", "anno", "=", "kitti", ".", "get_start_result_anno", "(", ")", "\n", "num_example", "=", "0", "\n", "for", "bbox2d", ",", "bbox3d", ",", "label", ",", "score", ",", "alpha", "in", "zip", "(", "box2d", ",", "box3d", ",", "labels", ",", "scores", ",", "alphas", ")", ":", "\n", "                    ", "if", "bbox2d", "[", "0", "]", ">", "image_shape", "[", "1", "]", "or", "bbox2d", "[", "1", "]", ">", "image_shape", "[", "0", "]", ":", "\n", "                        ", "continue", "\n", "", "if", "bbox2d", "[", "2", "]", "<", "0", "or", "bbox2d", "[", "3", "]", "<", "0", ":", "\n", "                        ", "continue", "\n", "", "bbox2d", "[", "2", ":", "]", "=", "np", ".", "minimum", "(", "bbox2d", "[", "2", ":", "]", ",", "image_shape", "[", ":", ":", "-", "1", "]", ")", "\n", "bbox2d", "[", ":", "2", "]", "=", "np", ".", "maximum", "(", "bbox2d", "[", ":", "2", "]", ",", "[", "0", ",", "0", "]", ")", "\n", "anno", "[", "\"name\"", "]", ".", "append", "(", "class_names", "[", "int", "(", "label", ")", "]", ")", "\n", "anno", "[", "\"truncated\"", "]", ".", "append", "(", "0.0", ")", "\n", "anno", "[", "\"occluded\"", "]", ".", "append", "(", "0", ")", "\n", "# anno[\"alpha\"].append(-10)", "\n", "anno", "[", "\"alpha\"", "]", ".", "append", "(", "alpha", ")", "\n", "anno", "[", "\"bbox\"", "]", ".", "append", "(", "bbox2d", ")", "\n", "# anno[\"dimensions\"].append(np.array([-1,-1,-1]))", "\n", "anno", "[", "\"dimensions\"", "]", ".", "append", "(", "bbox3d", "[", "[", "3", ",", "4", ",", "5", "]", "]", ")", "\n", "# anno[\"location\"].append(np.array([-1000,-1000,-1000]))", "\n", "anno", "[", "\"location\"", "]", ".", "append", "(", "bbox3d", "[", ":", "3", "]", ")", "\n", "# anno[\"rotation_y\"].append(-10)", "\n", "anno", "[", "\"rotation_y\"", "]", ".", "append", "(", "bbox3d", "[", "6", "]", ")", "\n", "anno", "[", "\"score\"", "]", ".", "append", "(", "score", ")", "\n", "num_example", "+=", "1", "\n", "", "if", "num_example", "!=", "0", ":", "\n", "                    ", "if", "saveto", "is", "not", "None", ":", "\n", "                        ", "of_path", "=", "os", ".", "path", ".", "join", "(", "saveto", ",", "'%06d.txt'", "%", "img_idx", ")", "\n", "with", "open", "(", "of_path", ",", "'w+'", ")", "as", "f", ":", "\n", "                            ", "for", "name", ",", "bbox", ",", "dim", ",", "loc", ",", "ry", ",", "score", ",", "alpha", "in", "zip", "(", "anno", "[", "'name'", "]", ",", "anno", "[", "\"bbox\"", "]", ",", "anno", "[", "\"dimensions\"", "]", ",", "anno", "[", "\"location\"", "]", ",", "anno", "[", "\"rotation_y\"", "]", ",", "anno", "[", "\"score\"", "]", ",", "anno", "[", "\"alpha\"", "]", ")", ":", "\n", "                                ", "line", "=", "template", ".", "format", "(", "name", ",", "0", ",", "0", ",", "alpha", ",", "*", "bbox", ",", "*", "dim", "[", "[", "1", ",", "2", ",", "0", "]", "]", ",", "*", "loc", ",", "ry", ",", "score", ")", "\n", "f", ".", "write", "(", "line", ")", "\n", "\n", "", "", "", "anno", "=", "{", "n", ":", "np", ".", "stack", "(", "v", ")", "for", "n", ",", "v", "in", "anno", ".", "items", "(", ")", "}", "\n", "annos", ".", "append", "(", "anno", ")", "\n", "", "else", ":", "\n", "                    ", "if", "saveto", "is", "not", "None", ":", "\n", "                        ", "of_path", "=", "os", ".", "path", ".", "join", "(", "saveto", ",", "'%06d.txt'", "%", "img_idx", ")", "\n", "f", "=", "open", "(", "of_path", ",", "'w+'", ")", "\n", "f", ".", "close", "(", ")", "\n", "", "annos", ".", "append", "(", "kitti", ".", "empty_result_anno", "(", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "saveto", "is", "not", "None", ":", "\n", "                    ", "of_path", "=", "os", ".", "path", ".", "join", "(", "saveto", ",", "'%06d.txt'", "%", "img_idx", ")", "\n", "f", "=", "open", "(", "of_path", ",", "'w+'", ")", "\n", "f", ".", "close", "(", ")", "\n", "", "annos", ".", "append", "(", "kitti", ".", "empty_result_anno", "(", ")", ")", "\n", "\n", "", "num_example", "=", "annos", "[", "-", "1", "]", "[", "\"name\"", "]", ".", "shape", "[", "0", "]", "\n", "annos", "[", "-", "1", "]", "[", "\"image_idx\"", "]", "=", "np", ".", "array", "(", "\n", "[", "img_idx", "]", "*", "num_example", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n", "", "batch_size", "=", "len", "(", "results", ")", "\n", "for", "_", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "prog_bar", ".", "update", "(", ")", "\n", "\n", "", "", "return", "annos", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.3dod.test._data_func": [[96, 99], ["dict", "mmcv.parallel.scatter", "mmcv.parallel.collate"], "function", ["None"], ["", "def", "_data_func", "(", "data", ",", "device_id", ")", ":", "\n", "    ", "data", "=", "scatter", "(", "collate", "(", "[", "data", "]", ",", "samples_per_gpu", "=", "1", ")", ",", "[", "device_id", "]", ")", "[", "0", "]", "\n", "return", "dict", "(", "return_loss", "=", "False", ",", "rescale", "=", "True", ",", "**", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.3dod.test.parse_args": [[101, 122], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.3dod.test.parse_args"], ["", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'MMDet test detector'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'test config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'checkpoint'", ",", "help", "=", "'checkpoint file'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--gpus'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "'GPU number used for testing'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--proc_per_gpu'", ",", "\n", "default", "=", "1", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'Number of processes per GPU'", ")", "\n", "parser", ".", "add_argument", "(", "'--out'", ",", "help", "=", "'output result file'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--eval'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "choices", "=", "[", "'proposal'", ",", "'proposal_fast'", ",", "'bbox'", ",", "'segm'", ",", "'keypoints'", "]", ",", "\n", "help", "=", "'eval types'", ")", "\n", "parser", ".", "add_argument", "(", "'--show'", ",", "action", "=", "'store_true'", ",", "help", "=", "'show results'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.3dod.test.main": [[124, 153], ["test.parse_args", "mmcv.Config.fromfile", "mmdet.datasets.utils.get_dataset", "tools.get_label_annos", "mmdet.core.evaluation.kitti_eval.get_official_eval_result", "print", "mmdet.models.build_detector", "mmcv.parallel.MMDataParallel", "tools.train_utils.load_params_from_file", "mmdet.datasets.build_dataloader", "test.single_test"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.3dod.test.parse_args", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.utils.get_dataset", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.get_label_annos", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.get_official_eval_result", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.models.builder.build_detector", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.train_utils.__init__.load_params_from_file", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.loader.build_loader.build_dataloader", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.3dod.test.single_test"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "cfg", "=", "mmcv", ".", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "cfg", ".", "model", ".", "pretrained", "=", "None", "\n", "\n", "dataset", "=", "utils", ".", "get_dataset", "(", "cfg", ".", "data", ".", "val", ")", "\n", "class_names", "=", "cfg", ".", "data", ".", "val", ".", "class_names", "\n", "\n", "if", "args", ".", "gpus", "==", "1", ":", "\n", "        ", "model", "=", "build_detector", "(", "\n", "cfg", ".", "model", ",", "train_cfg", "=", "None", ",", "test_cfg", "=", "cfg", ".", "test_cfg", ",", "full_cfg", "=", "cfg", ")", "\n", "#load_checkpoint(model, args.checkpoint)", "\n", "model", "=", "MMDataParallel", "(", "model", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "load_params_from_file", "(", "model", ",", "args", ".", "checkpoint", ")", "\n", "data_loader", "=", "build_dataloader", "(", "\n", "dataset", ",", "\n", "1", ",", "\n", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "num_gpus", "=", "1", ",", "\n", "shuffle", "=", "False", ",", "\n", "dist", "=", "False", ")", "\n", "outputs", "=", "single_test", "(", "model", ",", "data_loader", ",", "args", ".", "out", ",", "class_names", ")", "\n", "", "else", ":", "\n", "        ", "NotImplementedError", "\n", "# kitti evaluation", "\n", "", "gt_annos", "=", "kitti", ".", "get_label_annos", "(", "dataset", ".", "label_prefix", ",", "dataset", ".", "sample_ids", ")", "\n", "result", "=", "get_official_eval_result", "(", "gt_annos", ",", "outputs", ",", "current_classes", "=", "class_names", ")", "\n", "print", "(", "result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.3dod.create_data._read_imageset_file": [[10, 14], ["open", "f.readlines", "int"], "function", ["None"], ["def", "_read_imageset_file", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "return", "[", "int", "(", "line", ")", "for", "line", "in", "lines", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.3dod.create_data._calculate_num_points_in_gt": [[16, 48], ["numpy.fromfile().reshape", "len", "numpy.concatenate", "mmdet.core.bbox3d.geometry.box_camera_to_lidar", "mmdet.core.bbox3d.geometry.points_in_rbbox", "mmdet.core.bbox3d.geometry.points_in_rbbox.sum", "numpy.concatenate", "np.concatenate.astype", "str", "mmdet.core.bbox3d.geometry.remove_outside_points", "len", "numpy.fromfile", "pathlib.Path", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.box_camera_to_lidar", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.points_in_rbbox", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.remove_outside_points"], ["", "def", "_calculate_num_points_in_gt", "(", "data_path", ",", "infos", ",", "relative_path", ",", "remove_outside", "=", "True", ",", "num_features", "=", "4", ")", ":", "\n", "    ", "for", "info", "in", "infos", ":", "\n", "        ", "if", "relative_path", ":", "\n", "            ", "v_path", "=", "str", "(", "pathlib", ".", "Path", "(", "data_path", ")", "/", "info", "[", "\"velodyne_path\"", "]", ")", "\n", "", "else", ":", "\n", "            ", "v_path", "=", "info", "[", "\"velodyne_path\"", "]", "\n", "", "points_v", "=", "np", ".", "fromfile", "(", "\n", "v_path", ",", "dtype", "=", "np", ".", "float32", ",", "count", "=", "-", "1", ")", ".", "reshape", "(", "[", "-", "1", ",", "num_features", "]", ")", "\n", "rect", "=", "info", "[", "'calib/R0_rect'", "]", "\n", "Trv2c", "=", "info", "[", "'calib/Tr_velo_to_cam'", "]", "\n", "P2", "=", "info", "[", "'calib/P2'", "]", "\n", "if", "remove_outside", ":", "\n", "            ", "points_v", "=", "remove_outside_points", "(", "points_v", ",", "rect", ",", "Trv2c", ",", "P2", ",", "\n", "info", "[", "\"img_shape\"", "]", ")", "\n", "\n", "# points_v = points_v[points_v[:, 0] > 0]", "\n", "", "annos", "=", "info", "[", "'annos'", "]", "\n", "num_obj", "=", "len", "(", "[", "n", "for", "n", "in", "annos", "[", "'name'", "]", "if", "n", "!=", "'DontCare'", "]", ")", "\n", "# annos = kitti.filter_kitti_anno(annos, ['DontCare'])", "\n", "dims", "=", "annos", "[", "'dimensions'", "]", "[", ":", "num_obj", "]", "\n", "loc", "=", "annos", "[", "'location'", "]", "[", ":", "num_obj", "]", "\n", "rots", "=", "annos", "[", "'rotation_y'", "]", "[", ":", "num_obj", "]", "\n", "gt_boxes_camera", "=", "np", ".", "concatenate", "(", "\n", "[", "loc", ",", "dims", ",", "rots", "[", "...", ",", "np", ".", "newaxis", "]", "]", ",", "axis", "=", "1", ")", "\n", "gt_boxes_lidar", "=", "box_camera_to_lidar", "(", "\n", "gt_boxes_camera", ",", "rect", ",", "Trv2c", ")", "\n", "indices", "=", "points_in_rbbox", "(", "points_v", "[", ":", ",", ":", "3", "]", ",", "gt_boxes_lidar", ")", "\n", "num_points_in_gt", "=", "indices", ".", "sum", "(", "0", ")", "\n", "num_ignored", "=", "len", "(", "annos", "[", "'dimensions'", "]", ")", "-", "num_obj", "\n", "num_points_in_gt", "=", "np", ".", "concatenate", "(", "\n", "[", "num_points_in_gt", ",", "-", "np", ".", "ones", "(", "[", "num_ignored", "]", ")", "]", ")", "\n", "annos", "[", "\"num_points_in_gt\"", "]", "=", "num_points_in_gt", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.3dod.create_data.create_kitti_info_file": [[50, 105], ["create_data._read_imageset_file", "create_data._read_imageset_file", "create_data._read_imageset_file", "create_data._read_imageset_file", "print", "tools.get_kitti_image_info", "create_data._calculate_num_points_in_gt", "print", "tools.get_kitti_image_info", "create_data._calculate_num_points_in_gt", "print", "print", "tools.get_kitti_image_info", "print", "os.join", "os.join", "os.join", "os.join", "pathlib.Path", "pathlib.Path", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.create_data._read_imageset_file", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.create_data._read_imageset_file", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.create_data._read_imageset_file", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.create_data._read_imageset_file", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.get_kitti_image_info", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.create_data._calculate_num_points_in_gt", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.get_kitti_image_info", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.create_data._calculate_num_points_in_gt", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.get_kitti_image_info"], ["", "", "def", "create_kitti_info_file", "(", "data_path", ",", "\n", "save_path", "=", "None", ",", "\n", "relative_path", "=", "True", ")", ":", "\n", "    ", "train_img_ids", "=", "_read_imageset_file", "(", "osp", ".", "join", "(", "data_path", ",", "\"ImageSets/train.txt\"", ")", ")", "\n", "val_img_ids", "=", "_read_imageset_file", "(", "osp", ".", "join", "(", "data_path", ",", "\"ImageSets/val.txt\"", ")", ")", "\n", "trainval_img_ids", "=", "_read_imageset_file", "(", "osp", ".", "join", "(", "data_path", ",", "\"ImageSets/trainval.txt\"", ")", ")", "\n", "test_img_ids", "=", "_read_imageset_file", "(", "osp", ".", "join", "(", "data_path", ",", "\"ImageSets/test.txt\"", ")", ")", "\n", "\n", "print", "(", "\"Generate info. this may take several minutes.\"", ")", "\n", "if", "save_path", "is", "None", ":", "\n", "        ", "save_path", "=", "pathlib", ".", "Path", "(", "data_path", ")", "\n", "", "else", ":", "\n", "        ", "save_path", "=", "pathlib", ".", "Path", "(", "save_path", ")", "\n", "", "kitti_infos_train", "=", "kitti", ".", "get_kitti_image_info", "(", "\n", "data_path", ",", "\n", "training", "=", "True", ",", "\n", "velodyne", "=", "True", ",", "\n", "calib", "=", "True", ",", "\n", "image_ids", "=", "train_img_ids", ",", "\n", "relative_path", "=", "relative_path", ")", "\n", "_calculate_num_points_in_gt", "(", "data_path", ",", "kitti_infos_train", ",", "relative_path", ")", "\n", "filename", "=", "save_path", "/", "'kitti_infos_train.pkl'", "\n", "print", "(", "f\"Kitti info train file is saved to {filename}\"", ")", "\n", "with", "open", "(", "filename", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "kitti_infos_train", ",", "f", ")", "\n", "", "kitti_infos_val", "=", "kitti", ".", "get_kitti_image_info", "(", "\n", "data_path", ",", "\n", "training", "=", "True", ",", "\n", "velodyne", "=", "True", ",", "\n", "calib", "=", "True", ",", "\n", "image_ids", "=", "val_img_ids", ",", "\n", "relative_path", "=", "relative_path", ")", "\n", "_calculate_num_points_in_gt", "(", "data_path", ",", "kitti_infos_val", ",", "relative_path", ")", "\n", "filename", "=", "save_path", "/", "'kitti_infos_val.pkl'", "\n", "print", "(", "f\"Kitti info val file is saved to {filename}\"", ")", "\n", "with", "open", "(", "filename", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "kitti_infos_val", ",", "f", ")", "\n", "\n", "", "filename", "=", "save_path", "/", "'kitti_infos_trainval.pkl'", "\n", "print", "(", "f\"Kitti info trainval file is saved to {filename}\"", ")", "\n", "with", "open", "(", "filename", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "kitti_infos_train", "+", "kitti_infos_val", ",", "f", ")", "\n", "\n", "", "kitti_infos_test", "=", "kitti", ".", "get_kitti_image_info", "(", "\n", "data_path", ",", "\n", "training", "=", "False", ",", "\n", "label_info", "=", "False", ",", "\n", "velodyne", "=", "True", ",", "\n", "calib", "=", "True", ",", "\n", "image_ids", "=", "test_img_ids", ",", "\n", "relative_path", "=", "relative_path", ")", "\n", "filename", "=", "save_path", "/", "'kitti_infos_test.pkl'", "\n", "print", "(", "f\"Kitti info test file is saved to {filename}\"", ")", "\n", "with", "open", "(", "filename", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "kitti_infos_test", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.3dod.create_data._create_reduced_point_cloud": [[107, 141], ["tqdm.tqdm", "open", "pickle.load", "numpy.fromfile().reshape", "mmdet.core.bbox3d.geometry.remove_outside_points", "pathlib.Path", "str", "open", "mmdet.core.bbox3d.geometry.remove_outside_points.tofile", "numpy.fromfile", "str", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.remove_outside_points"], ["", "", "def", "_create_reduced_point_cloud", "(", "data_path", ",", "\n", "info_path", ",", "\n", "save_path", "=", "None", ",", "\n", "back", "=", "False", ")", ":", "\n", "    ", "with", "open", "(", "info_path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "kitti_infos", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "for", "info", "in", "prog_bar", "(", "kitti_infos", ")", ":", "\n", "        ", "v_path", "=", "info", "[", "'velodyne_path'", "]", "\n", "v_path", "=", "pathlib", ".", "Path", "(", "data_path", ")", "/", "v_path", "\n", "points_v", "=", "np", ".", "fromfile", "(", "\n", "str", "(", "v_path", ")", ",", "dtype", "=", "np", ".", "float32", ",", "count", "=", "-", "1", ")", ".", "reshape", "(", "[", "-", "1", ",", "4", "]", ")", "\n", "rect", "=", "info", "[", "'calib/R0_rect'", "]", "\n", "P2", "=", "info", "[", "'calib/P2'", "]", "\n", "Trv2c", "=", "info", "[", "'calib/Tr_velo_to_cam'", "]", "\n", "# first remove z < 0 points", "\n", "# keep = points_v[:, -1] > 0", "\n", "# points_v = points_v[keep]", "\n", "# then remove outside.", "\n", "if", "back", ":", "\n", "            ", "points_v", "[", ":", ",", "0", "]", "=", "-", "points_v", "[", ":", ",", "0", "]", "\n", "", "points_v", "=", "remove_outside_points", "(", "points_v", ",", "rect", ",", "Trv2c", ",", "P2", ",", "\n", "info", "[", "\"img_shape\"", "]", ")", "\n", "\n", "if", "save_path", "is", "None", ":", "\n", "            ", "save_filename", "=", "v_path", ".", "parent", ".", "parent", "/", "(", "v_path", ".", "parent", ".", "stem", "+", "\"_reduced\"", ")", "/", "v_path", ".", "name", "\n", "# save_filename = str(v_path) + '_reduced'", "\n", "if", "back", ":", "\n", "                ", "save_filename", "+=", "\"_back\"", "\n", "", "", "else", ":", "\n", "            ", "save_filename", "=", "str", "(", "pathlib", ".", "Path", "(", "save_path", ")", "/", "v_path", ".", "name", ")", "\n", "if", "back", ":", "\n", "                ", "save_filename", "+=", "\"_back\"", "\n", "", "", "with", "open", "(", "save_filename", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "points_v", ".", "tofile", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.3dod.create_data.create_reduced_point_cloud": [[143, 166], ["create_data._create_reduced_point_cloud", "create_data._create_reduced_point_cloud", "create_data._create_reduced_point_cloud", "create_data._create_reduced_point_cloud", "create_data._create_reduced_point_cloud", "create_data._create_reduced_point_cloud", "pathlib.Path", "pathlib.Path", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.create_data._create_reduced_point_cloud", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.create_data._create_reduced_point_cloud", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.create_data._create_reduced_point_cloud", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.create_data._create_reduced_point_cloud", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.create_data._create_reduced_point_cloud", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.create_data._create_reduced_point_cloud"], ["", "", "", "def", "create_reduced_point_cloud", "(", "data_path", ",", "\n", "train_info_path", "=", "None", ",", "\n", "val_info_path", "=", "None", ",", "\n", "test_info_path", "=", "None", ",", "\n", "save_path", "=", "None", ",", "\n", "with_back", "=", "False", ")", ":", "\n", "    ", "if", "train_info_path", "is", "None", ":", "\n", "        ", "train_info_path", "=", "pathlib", ".", "Path", "(", "data_path", ")", "/", "'kitti_infos_train.pkl'", "\n", "", "if", "val_info_path", "is", "None", ":", "\n", "        ", "val_info_path", "=", "pathlib", ".", "Path", "(", "data_path", ")", "/", "'kitti_infos_val.pkl'", "\n", "", "if", "test_info_path", "is", "None", ":", "\n", "        ", "test_info_path", "=", "pathlib", ".", "Path", "(", "data_path", ")", "/", "'kitti_infos_test.pkl'", "\n", "\n", "", "_create_reduced_point_cloud", "(", "data_path", ",", "train_info_path", ",", "save_path", ")", "\n", "_create_reduced_point_cloud", "(", "data_path", ",", "val_info_path", ",", "save_path", ")", "\n", "_create_reduced_point_cloud", "(", "data_path", ",", "test_info_path", ",", "save_path", ")", "\n", "if", "with_back", ":", "\n", "        ", "_create_reduced_point_cloud", "(", "\n", "data_path", ",", "train_info_path", ",", "save_path", ",", "back", "=", "True", ")", "\n", "_create_reduced_point_cloud", "(", "\n", "data_path", ",", "val_info_path", ",", "save_path", ",", "back", "=", "True", ")", "\n", "_create_reduced_point_cloud", "(", "\n", "data_path", ",", "test_info_path", ",", "save_path", ",", "back", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.3dod.create_data.create_groundtruth_database": [[168, 271], ["pathlib.Path", "pathlib.Path.mkdir", "tqdm.tqdm", "all_db_infos.items", "pathlib.Path", "open", "pickle.load", "list", "list.pop", "numpy.fromfile().reshape", "numpy.sum", "mmdet.core.bbox3d.geometry.box_camera_to_lidar", "numpy.full", "mmdet.core.bbox3d.geometry.points_in_rbbox", "range", "print", "open", "pickle.dump", "tools.get_classes", "list.index", "str", "mmdet.core.bbox3d.geometry.remove_outside_points", "tools.anno_to_rbboxes", "numpy.arange", "numpy.fromfile", "open", "gt_points.tofile", "all_db_infos[].append", "str", "str", "len"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.box_camera_to_lidar", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.points_in_rbbox", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.get_classes", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.remove_outside_points", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.anno_to_rbboxes"], ["", "", "def", "create_groundtruth_database", "(", "data_path", ",", "\n", "info_path", "=", "None", ",", "\n", "used_classes", "=", "None", ",", "\n", "database_save_path", "=", "None", ",", "\n", "db_info_save_path", "=", "None", ",", "\n", "relative_path", "=", "True", ",", "\n", "lidar_only", "=", "False", ",", "\n", "bev_only", "=", "False", ",", "\n", "coors_range", "=", "None", ")", ":", "\n", "    ", "root_path", "=", "pathlib", ".", "Path", "(", "data_path", ")", "\n", "if", "info_path", "is", "None", ":", "\n", "        ", "info_path", "=", "root_path", "/", "'kitti_infos_train.pkl'", "\n", "", "if", "database_save_path", "is", "None", ":", "\n", "        ", "database_save_path", "=", "root_path", "/", "'gt_database'", "\n", "", "else", ":", "\n", "        ", "database_save_path", "=", "pathlib", ".", "Path", "(", "database_save_path", ")", "\n", "", "if", "db_info_save_path", "is", "None", ":", "\n", "        ", "db_info_save_path", "=", "root_path", "/", "\"kitti_dbinfos_train.pkl\"", "\n", "", "database_save_path", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "info_path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "kitti_infos", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "all_db_infos", "=", "{", "}", "\n", "if", "used_classes", "is", "None", ":", "\n", "        ", "used_classes", "=", "list", "(", "kitti", ".", "get_classes", "(", ")", ")", "\n", "used_classes", ".", "pop", "(", "used_classes", ".", "index", "(", "'DontCare'", ")", ")", "\n", "", "for", "name", "in", "used_classes", ":", "\n", "        ", "all_db_infos", "[", "name", "]", "=", "[", "]", "\n", "", "group_counter", "=", "0", "\n", "for", "info", "in", "prog_bar", "(", "kitti_infos", ")", ":", "\n", "        ", "velodyne_path", "=", "info", "[", "'velodyne_path'", "]", "\n", "if", "relative_path", ":", "\n", "            ", "velodyne_path", "=", "str", "(", "root_path", "/", "velodyne_path", ")", "\n", "", "num_features", "=", "4", "\n", "if", "'pointcloud_num_features'", "in", "info", ":", "\n", "            ", "num_features", "=", "info", "[", "'pointcloud_num_features'", "]", "\n", "", "points", "=", "np", ".", "fromfile", "(", "\n", "velodyne_path", ",", "dtype", "=", "np", ".", "float32", ",", "count", "=", "-", "1", ")", ".", "reshape", "(", "[", "-", "1", ",", "num_features", "]", ")", "\n", "\n", "image_idx", "=", "info", "[", "\"image_idx\"", "]", "\n", "rect", "=", "info", "[", "'calib/R0_rect'", "]", "\n", "P2", "=", "info", "[", "'calib/P2'", "]", "\n", "Trv2c", "=", "info", "[", "'calib/Tr_velo_to_cam'", "]", "\n", "if", "not", "lidar_only", ":", "\n", "            ", "points", "=", "remove_outside_points", "(", "points", ",", "rect", ",", "Trv2c", ",", "P2", ",", "\n", "info", "[", "\"img_shape\"", "]", ")", "\n", "\n", "", "annos", "=", "info", "[", "\"annos\"", "]", "\n", "names", "=", "annos", "[", "\"name\"", "]", "\n", "bboxes", "=", "annos", "[", "\"bbox\"", "]", "\n", "difficulty", "=", "annos", "[", "\"difficulty\"", "]", "\n", "gt_idxes", "=", "annos", "[", "\"index\"", "]", "\n", "num_obj", "=", "np", ".", "sum", "(", "annos", "[", "\"index\"", "]", ">=", "0", ")", "\n", "rbbox_cam", "=", "kitti", ".", "anno_to_rbboxes", "(", "annos", ")", "[", ":", "num_obj", "]", "\n", "rbbox_lidar", "=", "box_camera_to_lidar", "(", "rbbox_cam", ",", "rect", ",", "Trv2c", ")", "\n", "if", "bev_only", ":", "# set z and h to limits", "\n", "            ", "assert", "coors_range", "is", "not", "None", "\n", "rbbox_lidar", "[", ":", ",", "2", "]", "=", "coors_range", "[", "2", "]", "\n", "rbbox_lidar", "[", ":", ",", "5", "]", "=", "coors_range", "[", "5", "]", "-", "coors_range", "[", "2", "]", "\n", "\n", "", "group_dict", "=", "{", "}", "\n", "group_ids", "=", "np", ".", "full", "(", "[", "bboxes", ".", "shape", "[", "0", "]", "]", ",", "-", "1", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "if", "\"group_ids\"", "in", "annos", ":", "\n", "            ", "group_ids", "=", "annos", "[", "\"group_ids\"", "]", "\n", "", "else", ":", "\n", "            ", "group_ids", "=", "np", ".", "arange", "(", "bboxes", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "", "point_indices", "=", "points_in_rbbox", "(", "points", ",", "rbbox_lidar", ")", "\n", "for", "i", "in", "range", "(", "num_obj", ")", ":", "\n", "            ", "filename", "=", "f\"{image_idx}_{names[i]}_{gt_idxes[i]}.bin\"", "\n", "filepath", "=", "database_save_path", "/", "filename", "\n", "gt_points", "=", "points", "[", "point_indices", "[", ":", ",", "i", "]", "]", "\n", "\n", "gt_points", "[", ":", ",", ":", "3", "]", "-=", "rbbox_lidar", "[", "i", ",", ":", "3", "]", "\n", "with", "open", "(", "filepath", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "gt_points", ".", "tofile", "(", "f", ")", "\n", "", "if", "names", "[", "i", "]", "in", "used_classes", ":", "\n", "                ", "if", "relative_path", ":", "\n", "                    ", "db_path", "=", "str", "(", "database_save_path", ".", "stem", "+", "\"/\"", "+", "filename", ")", "\n", "", "else", ":", "\n", "                    ", "db_path", "=", "str", "(", "filepath", ")", "\n", "", "db_info", "=", "{", "\n", "\"name\"", ":", "names", "[", "i", "]", ",", "\n", "\"path\"", ":", "db_path", ",", "\n", "\"image_idx\"", ":", "image_idx", ",", "\n", "\"gt_idx\"", ":", "gt_idxes", "[", "i", "]", ",", "\n", "\"box3d_lidar\"", ":", "rbbox_lidar", "[", "i", "]", ",", "\n", "\"num_points_in_gt\"", ":", "gt_points", ".", "shape", "[", "0", "]", ",", "\n", "\"difficulty\"", ":", "difficulty", "[", "i", "]", ",", "\n", "}", "\n", "\n", "local_group_id", "=", "group_ids", "[", "i", "]", "\n", "# if local_group_id >= 0:", "\n", "if", "local_group_id", "not", "in", "group_dict", ":", "\n", "                    ", "group_dict", "[", "local_group_id", "]", "=", "group_counter", "\n", "group_counter", "+=", "1", "\n", "", "db_info", "[", "\"group_id\"", "]", "=", "group_dict", "[", "local_group_id", "]", "\n", "if", "\"score\"", "in", "annos", ":", "\n", "                    ", "db_info", "[", "\"score\"", "]", "=", "annos", "[", "\"score\"", "]", "[", "i", "]", "\n", "", "all_db_infos", "[", "names", "[", "i", "]", "]", ".", "append", "(", "db_info", ")", "\n", "", "", "", "for", "k", ",", "v", "in", "all_db_infos", ".", "items", "(", ")", ":", "\n", "        ", "print", "(", "f\"load {len(v)} {k} database infos\"", ")", "\n", "\n", "", "with", "open", "(", "db_info_save_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "all_db_infos", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.custom.CustomDataset.__init__": [[35, 98], ["custom.CustomDataset.load_annotations", "mmcv.is_list_of", "transforms.ImageTransform", "transforms.BboxTransform", "transforms.MaskTransform", "transforms.Numpy2Tensor", "custom.CustomDataset.load_proposals", "custom.CustomDataset._filter_imgs", "isinstance", "custom.CustomDataset._set_group_flag"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.xml_style.XMLDataset.load_annotations", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti_utils.load_proposals", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.coco.CocoDataset._filter_imgs", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti.KittiLiDAR._set_group_flag"], ["def", "__init__", "(", "self", ",", "\n", "ann_file", ",", "\n", "img_prefix", ",", "\n", "img_scale", ",", "\n", "img_norm_cfg", ",", "\n", "size_divisor", "=", "None", ",", "\n", "proposal_file", "=", "None", ",", "\n", "num_max_proposals", "=", "1000", ",", "\n", "flip_ratio", "=", "0", ",", "\n", "with_mask", "=", "True", ",", "\n", "with_crowd", "=", "True", ",", "\n", "with_label", "=", "True", ",", "\n", "test_mode", "=", "False", ")", ":", "\n", "# prefix of images path", "\n", "        ", "self", ".", "img_prefix", "=", "img_prefix", "\n", "\n", "# load annotations (and proposals)", "\n", "self", ".", "img_infos", "=", "self", ".", "load_annotations", "(", "ann_file", ")", "\n", "if", "proposal_file", "is", "not", "None", ":", "\n", "            ", "self", ".", "proposals", "=", "self", ".", "load_proposals", "(", "proposal_file", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "proposals", "=", "None", "\n", "# filter images with no annotation during training", "\n", "", "if", "not", "test_mode", ":", "\n", "            ", "valid_inds", "=", "self", ".", "_filter_imgs", "(", ")", "\n", "self", ".", "img_infos", "=", "[", "self", ".", "img_infos", "[", "i", "]", "for", "i", "in", "valid_inds", "]", "\n", "if", "self", ".", "proposals", "is", "not", "None", ":", "\n", "                ", "self", ".", "proposals", "=", "[", "self", ".", "proposals", "[", "i", "]", "for", "i", "in", "valid_inds", "]", "\n", "# (long_edge, short_edge) or [(long1, short1), (long2, short2), ...]", "\n", "", "", "self", ".", "img_scales", "=", "img_scale", "if", "isinstance", "(", "img_scale", ",", "\n", "list", ")", "else", "[", "img_scale", "]", "\n", "assert", "mmcv", ".", "is_list_of", "(", "self", ".", "img_scales", ",", "tuple", ")", "\n", "# normalization configs", "\n", "self", ".", "img_norm_cfg", "=", "img_norm_cfg", "\n", "\n", "# max proposals per image", "\n", "self", ".", "num_max_proposals", "=", "num_max_proposals", "\n", "# flip ratio", "\n", "self", ".", "flip_ratio", "=", "flip_ratio", "\n", "assert", "flip_ratio", ">=", "0", "and", "flip_ratio", "<=", "1", "\n", "# padding border to ensure the image size can be divided by", "\n", "# size_divisor (used for FPN)", "\n", "self", ".", "size_divisor", "=", "size_divisor", "\n", "\n", "# with mask or not (reserved field, takes no effect)", "\n", "self", ".", "with_mask", "=", "with_mask", "\n", "# some datasets provide bbox annotations as ignore/crowd/difficult,", "\n", "# if `with_crowd` is True, then these info is returned.", "\n", "self", ".", "with_crowd", "=", "with_crowd", "\n", "# with label is False for RPN", "\n", "self", ".", "with_label", "=", "with_label", "\n", "# in test mode or not", "\n", "self", ".", "test_mode", "=", "test_mode", "\n", "\n", "# set group flag for the sampler", "\n", "if", "not", "self", ".", "test_mode", ":", "\n", "            ", "self", ".", "_set_group_flag", "(", ")", "\n", "# transforms", "\n", "", "self", ".", "img_transform", "=", "ImageTransform", "(", "\n", "size_divisor", "=", "self", ".", "size_divisor", ",", "**", "self", ".", "img_norm_cfg", ")", "\n", "self", ".", "bbox_transform", "=", "BboxTransform", "(", ")", "\n", "self", ".", "mask_transform", "=", "MaskTransform", "(", ")", "\n", "self", ".", "numpy2tensor", "=", "Numpy2Tensor", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.custom.CustomDataset.__len__": [[99, 101], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_infos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.custom.CustomDataset.load_annotations": [[102, 104], ["mmcv.load"], "methods", ["None"], ["", "def", "load_annotations", "(", "self", ",", "ann_file", ")", ":", "\n", "        ", "return", "mmcv", ".", "load", "(", "ann_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.custom.CustomDataset.load_proposals": [[105, 107], ["mmcv.load"], "methods", ["None"], ["", "def", "load_proposals", "(", "self", ",", "proposal_file", ")", ":", "\n", "        ", "return", "mmcv", ".", "load", "(", "proposal_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.custom.CustomDataset.get_ann_info": [[108, 110], ["None"], "methods", ["None"], ["", "def", "get_ann_info", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "img_infos", "[", "idx", "]", "[", "'ann'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.custom.CustomDataset._filter_imgs": [[111, 118], ["enumerate", "min", "valid_inds.append"], "methods", ["None"], ["", "def", "_filter_imgs", "(", "self", ",", "min_size", "=", "32", ")", ":", "\n", "        ", "\"\"\"Filter images too small.\"\"\"", "\n", "valid_inds", "=", "[", "]", "\n", "for", "i", ",", "img_info", "in", "enumerate", "(", "self", ".", "img_infos", ")", ":", "\n", "            ", "if", "min", "(", "img_info", "[", "'width'", "]", ",", "img_info", "[", "'height'", "]", ")", ">=", "min_size", ":", "\n", "                ", "valid_inds", ".", "append", "(", "i", ")", "\n", "", "", "return", "valid_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.custom.CustomDataset._set_group_flag": [[119, 130], ["numpy.zeros", "range", "len", "len"], "methods", ["None"], ["", "def", "_set_group_flag", "(", "self", ")", ":", "\n", "        ", "\"\"\"Set flag according to image aspect ratio.\n\n        Images with aspect ratio greater than 1 will be set as group 1,\n        otherwise group 0.\n        \"\"\"", "\n", "self", ".", "flag", "=", "np", ".", "zeros", "(", "len", "(", "self", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "            ", "img_info", "=", "self", ".", "img_infos", "[", "i", "]", "\n", "if", "img_info", "[", "'width'", "]", "/", "img_info", "[", "'height'", "]", ">", "1", ":", "\n", "                ", "self", ".", "flag", "[", "i", "]", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.custom.CustomDataset._rand_another": [[131, 134], ["numpy.random.choice", "numpy.where"], "methods", ["None"], ["", "", "", "def", "_rand_another", "(", "self", ",", "idx", ")", ":", "\n", "        ", "pool", "=", "np", ".", "where", "(", "self", ".", "flag", "==", "self", ".", "flag", "[", "idx", "]", ")", "[", "0", "]", "\n", "return", "np", ".", "random", ".", "choice", "(", "pool", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.custom.CustomDataset.__getitem__": [[135, 144], ["custom.CustomDataset.prepare_test_img", "custom.CustomDataset.prepare_train_img", "custom.CustomDataset._rand_another"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti.KittiVideo.prepare_test_img", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti.KittiLiDAR.prepare_train_img", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti.KittiLiDAR._rand_another"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "test_mode", ":", "\n", "            ", "return", "self", ".", "prepare_test_img", "(", "idx", ")", "\n", "", "while", "True", ":", "\n", "            ", "data", "=", "self", ".", "prepare_train_img", "(", "idx", ")", "\n", "if", "data", "is", "None", ":", "\n", "                ", "idx", "=", "self", ".", "_rand_another", "(", "idx", ")", "\n", "continue", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.custom.CustomDataset.prepare_train_img": [[145, 217], ["mmcv.imread", "custom.CustomDataset.get_ann_info", "utils.random_scale", "custom.CustomDataset.img_transform", "custom.CustomDataset.bbox_transform", "dict", "dict", "os.join", "len", "custom.CustomDataset.bbox_transform", "custom.CustomDataset.bbox_transform", "custom.CustomDataset.mask_transform", "mmcv.parallel.DataContainer", "mmcv.parallel.DataContainer", "mmcv.parallel.DataContainer", "mmcv.parallel.DataContainer", "len", "AssertionError", "numpy.random.rand", "numpy.hstack", "mmcv.parallel.DataContainer", "mmcv.parallel.DataContainer", "mmcv.parallel.DataContainer", "utils.to_tensor", "utils.to_tensor", "utils.to_tensor", "utils.to_tensor", "utils.to_tensor"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.xml_style.XMLDataset.get_ann_info", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.utils.random_scale", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.utils.to_tensor", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.utils.to_tensor", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.utils.to_tensor", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.utils.to_tensor", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.utils.to_tensor"], ["", "", "def", "prepare_train_img", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img_info", "=", "self", ".", "img_infos", "[", "idx", "]", "\n", "# load image", "\n", "img", "=", "mmcv", ".", "imread", "(", "osp", ".", "join", "(", "self", ".", "img_prefix", ",", "img_info", "[", "'filename'", "]", ")", ")", "\n", "# load proposals if necessary", "\n", "if", "self", ".", "proposals", "is", "not", "None", ":", "\n", "            ", "proposals", "=", "self", ".", "proposals", "[", "idx", "]", "[", ":", "self", ".", "num_max_proposals", "]", "\n", "# TODO: Handle empty proposals properly. Currently images with", "\n", "# no proposals are just ignored, but they can be used for", "\n", "# training in concept.", "\n", "if", "len", "(", "proposals", ")", "==", "0", ":", "\n", "                ", "return", "None", "\n", "", "if", "not", "(", "proposals", ".", "shape", "[", "1", "]", "==", "4", "or", "proposals", ".", "shape", "[", "1", "]", "==", "5", ")", ":", "\n", "                ", "raise", "AssertionError", "(", "\n", "'proposals should have shapes (n, 4) or (n, 5), '", "\n", "'but found {}'", ".", "format", "(", "proposals", ".", "shape", ")", ")", "\n", "", "if", "proposals", ".", "shape", "[", "1", "]", "==", "5", ":", "\n", "                ", "scores", "=", "proposals", "[", ":", ",", "4", ",", "None", "]", "\n", "proposals", "=", "proposals", "[", ":", ",", ":", "4", "]", "\n", "", "else", ":", "\n", "                ", "scores", "=", "None", "\n", "\n", "", "", "ann", "=", "self", ".", "get_ann_info", "(", "idx", ")", "\n", "gt_bboxes", "=", "ann", "[", "'bboxes'", "]", "\n", "gt_labels", "=", "ann", "[", "'labels'", "]", "\n", "if", "self", ".", "with_crowd", ":", "\n", "            ", "gt_bboxes_ignore", "=", "ann", "[", "'bboxes_ignore'", "]", "\n", "\n", "# skip the image if there is no valid gt bbox", "\n", "", "if", "len", "(", "gt_bboxes", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "\n", "# apply transforms", "\n", "", "flip", "=", "True", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "self", ".", "flip_ratio", "else", "False", "\n", "img_scale", "=", "random_scale", "(", "self", ".", "img_scales", ")", "# sample a scale", "\n", "img", ",", "img_shape", ",", "pad_shape", ",", "scale_factor", "=", "self", ".", "img_transform", "(", "\n", "img", ",", "img_scale", ",", "flip", ")", "\n", "if", "self", ".", "proposals", "is", "not", "None", ":", "\n", "            ", "proposals", "=", "self", ".", "bbox_transform", "(", "proposals", ",", "img_shape", ",", "scale_factor", ",", "\n", "flip", ")", "\n", "proposals", "=", "np", ".", "hstack", "(", "\n", "[", "proposals", ",", "scores", "]", ")", "if", "scores", "is", "not", "None", "else", "proposals", "\n", "", "gt_bboxes", "=", "self", ".", "bbox_transform", "(", "gt_bboxes", ",", "img_shape", ",", "scale_factor", ",", "\n", "flip", ")", "\n", "if", "self", ".", "with_crowd", ":", "\n", "            ", "gt_bboxes_ignore", "=", "self", ".", "bbox_transform", "(", "gt_bboxes_ignore", ",", "img_shape", ",", "\n", "scale_factor", ",", "flip", ")", "\n", "", "if", "self", ".", "with_mask", ":", "\n", "            ", "gt_masks", "=", "self", ".", "mask_transform", "(", "ann", "[", "'masks'", "]", ",", "pad_shape", ",", "\n", "scale_factor", ",", "flip", ")", "\n", "\n", "", "ori_shape", "=", "(", "img_info", "[", "'height'", "]", ",", "img_info", "[", "'width'", "]", ",", "3", ")", "\n", "img_meta", "=", "dict", "(", "\n", "ori_shape", "=", "ori_shape", ",", "\n", "img_shape", "=", "img_shape", ",", "\n", "pad_shape", "=", "pad_shape", ",", "\n", "scale_factor", "=", "scale_factor", ",", "\n", "flip", "=", "flip", ")", "\n", "\n", "data", "=", "dict", "(", "\n", "img", "=", "DC", "(", "to_tensor", "(", "img", ")", ",", "stack", "=", "True", ")", ",", "\n", "img_meta", "=", "DC", "(", "img_meta", ",", "cpu_only", "=", "True", ")", ",", "\n", "gt_bboxes", "=", "DC", "(", "to_tensor", "(", "gt_bboxes", ")", ")", ")", "\n", "if", "self", ".", "proposals", "is", "not", "None", ":", "\n", "            ", "data", "[", "'proposals'", "]", "=", "DC", "(", "to_tensor", "(", "proposals", ")", ")", "\n", "", "if", "self", ".", "with_label", ":", "\n", "            ", "data", "[", "'gt_labels'", "]", "=", "DC", "(", "to_tensor", "(", "gt_labels", ")", ")", "\n", "", "if", "self", ".", "with_crowd", ":", "\n", "            ", "data", "[", "'gt_bboxes_ignore'", "]", "=", "DC", "(", "to_tensor", "(", "gt_bboxes_ignore", ")", ")", "\n", "", "if", "self", ".", "with_mask", ":", "\n", "            ", "data", "[", "'gt_masks'", "]", "=", "DC", "(", "gt_masks", ",", "cpu_only", "=", "True", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.custom.CustomDataset.prepare_test_img": [[218, 275], ["mmcv.imread", "dict", "os.join", "custom.CustomDataset.img_transform", "utils.to_tensor", "dict", "custom.CustomDataset.prepare_test_img.prepare_single"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.utils.to_tensor"], ["", "def", "prepare_test_img", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"Prepare an image for testing (multi-scale and flipping)\"\"\"", "\n", "img_info", "=", "self", ".", "img_infos", "[", "idx", "]", "\n", "img", "=", "mmcv", ".", "imread", "(", "osp", ".", "join", "(", "self", ".", "img_prefix", ",", "img_info", "[", "'filename'", "]", ")", ")", "\n", "if", "self", ".", "proposals", "is", "not", "None", ":", "\n", "            ", "proposal", "=", "self", ".", "proposals", "[", "idx", "]", "[", ":", "self", ".", "num_max_proposals", "]", "\n", "if", "not", "(", "proposal", ".", "shape", "[", "1", "]", "==", "4", "or", "proposal", ".", "shape", "[", "1", "]", "==", "5", ")", ":", "\n", "                ", "raise", "AssertionError", "(", "\n", "'proposals should have shapes (n, 4) or (n, 5), '", "\n", "'but found {}'", ".", "format", "(", "proposal", ".", "shape", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "proposal", "=", "None", "\n", "\n", "", "def", "prepare_single", "(", "img", ",", "scale", ",", "flip", ",", "proposal", "=", "None", ")", ":", "\n", "            ", "_img", ",", "img_shape", ",", "pad_shape", ",", "scale_factor", "=", "self", ".", "img_transform", "(", "\n", "img", ",", "scale", ",", "flip", ")", "\n", "_img", "=", "to_tensor", "(", "_img", ")", "\n", "_img_meta", "=", "dict", "(", "\n", "ori_shape", "=", "(", "img_info", "[", "'height'", "]", ",", "img_info", "[", "'width'", "]", ",", "3", ")", ",", "\n", "img_shape", "=", "img_shape", ",", "\n", "pad_shape", "=", "pad_shape", ",", "\n", "scale_factor", "=", "scale_factor", ",", "\n", "flip", "=", "flip", ")", "\n", "if", "proposal", "is", "not", "None", ":", "\n", "                ", "if", "proposal", ".", "shape", "[", "1", "]", "==", "5", ":", "\n", "                    ", "score", "=", "proposal", "[", ":", ",", "4", ",", "None", "]", "\n", "proposal", "=", "proposal", "[", ":", ",", ":", "4", "]", "\n", "", "else", ":", "\n", "                    ", "score", "=", "None", "\n", "", "_proposal", "=", "self", ".", "bbox_transform", "(", "proposal", ",", "img_shape", ",", "\n", "scale_factor", ",", "flip", ")", "\n", "_proposal", "=", "np", ".", "hstack", "(", "\n", "[", "_proposal", ",", "score", "]", ")", "if", "score", "is", "not", "None", "else", "_proposal", "\n", "_proposal", "=", "to_tensor", "(", "_proposal", ")", "\n", "", "else", ":", "\n", "                ", "_proposal", "=", "None", "\n", "", "return", "_img", ",", "_img_meta", ",", "_proposal", "\n", "\n", "", "imgs", "=", "[", "]", "\n", "img_metas", "=", "[", "]", "\n", "proposals", "=", "[", "]", "\n", "for", "scale", "in", "self", ".", "img_scales", ":", "\n", "            ", "_img", ",", "_img_meta", ",", "_proposal", "=", "prepare_single", "(", "\n", "img", ",", "scale", ",", "False", ",", "proposal", ")", "\n", "imgs", ".", "append", "(", "_img", ")", "\n", "img_metas", ".", "append", "(", "DC", "(", "_img_meta", ",", "cpu_only", "=", "True", ")", ")", "\n", "proposals", ".", "append", "(", "_proposal", ")", "\n", "if", "self", ".", "flip_ratio", ">", "0", ":", "\n", "                ", "_img", ",", "_img_meta", ",", "_proposal", "=", "prepare_single", "(", "\n", "img", ",", "scale", ",", "True", ",", "proposal", ")", "\n", "imgs", ".", "append", "(", "_img", ")", "\n", "img_metas", ".", "append", "(", "DC", "(", "_img_meta", ",", "cpu_only", "=", "True", ")", ")", "\n", "proposals", ".", "append", "(", "_proposal", ")", "\n", "", "", "data", "=", "dict", "(", "img", "=", "imgs", ",", "img_meta", "=", "img_metas", ")", "\n", "if", "self", ".", "proposals", "is", "not", "None", ":", "\n", "            ", "data", "[", "'proposals'", "]", "=", "proposals", "\n", "", "return", "data", "", "", "", ""]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.transforms.ImageTransform.__init__": [[18, 27], ["numpy.array", "numpy.array"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "mean", "=", "(", "0", ",", "0", ",", "0", ")", ",", "\n", "std", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n", "to_rgb", "=", "True", ",", "\n", "size_divisor", "=", "None", ")", ":", "\n", "        ", "self", ".", "mean", "=", "np", ".", "array", "(", "mean", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "std", "=", "np", ".", "array", "(", "std", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "to_rgb", "=", "to_rgb", "\n", "self", ".", "size_divisor", "=", "size_divisor", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.transforms.ImageTransform.__call__": [[28, 41], ["mmcv.imrescale", "mmcv.imnormalize", "mmcv.impad_to_multiple.transpose", "mmcv.imflip", "mmcv.impad_to_multiple"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "scale", ",", "flip", "=", "False", ")", ":", "\n", "        ", "img", ",", "scale_factor", "=", "mmcv", ".", "imrescale", "(", "img", ",", "scale", ",", "return_scale", "=", "True", ")", "\n", "img_shape", "=", "img", ".", "shape", "\n", "img", "=", "mmcv", ".", "imnormalize", "(", "img", ",", "self", ".", "mean", ",", "self", ".", "std", ",", "self", ".", "to_rgb", ")", "\n", "if", "flip", ":", "\n", "            ", "img", "=", "mmcv", ".", "imflip", "(", "img", ")", "\n", "", "if", "self", ".", "size_divisor", "is", "not", "None", ":", "\n", "            ", "img", "=", "mmcv", ".", "impad_to_multiple", "(", "img", ",", "self", ".", "size_divisor", ")", "\n", "pad_shape", "=", "img", ".", "shape", "\n", "", "else", ":", "\n", "            ", "pad_shape", "=", "img_shape", "\n", "", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "return", "img", ",", "img_shape", ",", "pad_shape", ",", "scale_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.transforms.BboxTransform.__init__": [[66, 68], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "max_num_gts", "=", "None", ")", ":", "\n", "        ", "self", ".", "max_num_gts", "=", "max_num_gts", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.transforms.BboxTransform.__call__": [[69, 82], ["numpy.clip", "numpy.clip", "transforms.bbox_flip", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.transforms.bbox_flip"], ["", "def", "__call__", "(", "self", ",", "bboxes", ",", "img_shape", ",", "scale_factor", ",", "flip", "=", "False", ")", ":", "\n", "        ", "gt_bboxes", "=", "bboxes", "*", "scale_factor", "\n", "if", "flip", ":", "\n", "            ", "gt_bboxes", "=", "bbox_flip", "(", "gt_bboxes", ",", "img_shape", ")", "\n", "", "gt_bboxes", "[", ":", ",", "0", ":", ":", "2", "]", "=", "np", ".", "clip", "(", "gt_bboxes", "[", ":", ",", "0", ":", ":", "2", "]", ",", "0", ",", "img_shape", "[", "1", "]", ")", "\n", "gt_bboxes", "[", ":", ",", "1", ":", ":", "2", "]", "=", "np", ".", "clip", "(", "gt_bboxes", "[", ":", ",", "1", ":", ":", "2", "]", ",", "0", ",", "img_shape", "[", "0", "]", ")", "\n", "if", "self", ".", "max_num_gts", "is", "None", ":", "\n", "            ", "return", "gt_bboxes", "\n", "", "else", ":", "\n", "            ", "num_gts", "=", "gt_bboxes", ".", "shape", "[", "0", "]", "\n", "padded_bboxes", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_num_gts", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "padded_bboxes", "[", ":", "num_gts", ",", ":", "]", "=", "gt_bboxes", "\n", "return", "padded_bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.transforms.MaskTransform.__call__": [[92, 104], ["numpy.stack", "mmcv.imrescale", "mmcv.impad"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "masks", ",", "pad_shape", ",", "scale_factor", ",", "flip", "=", "False", ")", ":", "\n", "        ", "masks", "=", "[", "\n", "mmcv", ".", "imrescale", "(", "mask", ",", "scale_factor", ",", "interpolation", "=", "'nearest'", ")", "\n", "for", "mask", "in", "masks", "\n", "]", "\n", "if", "flip", ":", "\n", "            ", "masks", "=", "[", "mask", "[", ":", ",", ":", ":", "-", "1", "]", "for", "mask", "in", "masks", "]", "\n", "", "padded_masks", "=", "[", "\n", "mmcv", ".", "impad", "(", "mask", ",", "pad_shape", "[", ":", "2", "]", ",", "pad_val", "=", "0", ")", "for", "mask", "in", "masks", "\n", "]", "\n", "padded_masks", "=", "np", ".", "stack", "(", "padded_masks", ",", "axis", "=", "0", ")", "\n", "return", "padded_masks", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.transforms.Numpy2Tensor.__init__": [[108, 110], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.transforms.Numpy2Tensor.__call__": [[111, 116], ["len", "torch.from_numpy", "tuple", "torch.from_numpy", "numpy.array"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "if", "len", "(", "args", ")", "==", "1", ":", "\n", "            ", "return", "torch", ".", "from_numpy", "(", "args", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "tuple", "(", "[", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "array", ")", ")", "for", "array", "in", "args", "]", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.transforms.bbox_flip": [[43, 56], ["bboxes.copy"], "function", ["None"], ["", "", "def", "bbox_flip", "(", "bboxes", ",", "img_shape", ")", ":", "\n", "    ", "\"\"\"Flip bboxes horizontally.\n\n    Args:\n        bboxes(ndarray): shape (..., 4*k)\n        img_shape(tuple): (height, width)\n    \"\"\"", "\n", "assert", "bboxes", ".", "shape", "[", "-", "1", "]", "%", "4", "==", "0", "\n", "w", "=", "img_shape", "[", "1", "]", "\n", "flipped", "=", "bboxes", ".", "copy", "(", ")", "\n", "flipped", "[", "...", ",", "0", ":", ":", "4", "]", "=", "w", "-", "bboxes", "[", "...", ",", "2", ":", ":", "4", "]", "-", "1", "\n", "flipped", "[", "...", ",", "2", ":", ":", "4", "]", "=", "w", "-", "bboxes", "[", "...", ",", "0", ":", ":", "4", "]", "-", "1", "\n", "return", "flipped", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.coco.CocoDataset.load_annotations": [[9, 23], ["pycocotools.coco.COCO", "coco.CocoDataset.coco.getCatIds", "coco.CocoDataset.coco.getImgIds", "img_infos.append", "enumerate", "coco.CocoDataset.coco.loadImgs"], "methods", ["None"], ["    ", "def", "load_annotations", "(", "self", ",", "ann_file", ")", ":", "\n", "        ", "self", ".", "coco", "=", "COCO", "(", "ann_file", ")", "\n", "self", ".", "cat_ids", "=", "self", ".", "coco", ".", "getCatIds", "(", ")", "\n", "self", ".", "cat2label", "=", "{", "\n", "cat_id", ":", "i", "+", "1", "\n", "for", "i", ",", "cat_id", "in", "enumerate", "(", "self", ".", "cat_ids", ")", "\n", "}", "\n", "self", ".", "img_ids", "=", "self", ".", "coco", ".", "getImgIds", "(", ")", "\n", "img_infos", "=", "[", "]", "\n", "for", "i", "in", "self", ".", "img_ids", ":", "\n", "            ", "info", "=", "self", ".", "coco", ".", "loadImgs", "(", "[", "i", "]", ")", "[", "0", "]", "\n", "info", "[", "'filename'", "]", "=", "info", "[", "'file_name'", "]", "\n", "img_infos", ".", "append", "(", "info", ")", "\n", "", "return", "img_infos", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.coco.CocoDataset.get_ann_info": [[24, 29], ["coco.CocoDataset.coco.getAnnIds", "coco.CocoDataset.coco.loadAnns", "coco.CocoDataset._parse_ann_info"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.coco.CocoDataset._parse_ann_info"], ["", "def", "get_ann_info", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img_id", "=", "self", ".", "img_infos", "[", "idx", "]", "[", "'id'", "]", "\n", "ann_ids", "=", "self", ".", "coco", ".", "getAnnIds", "(", "imgIds", "=", "[", "img_id", "]", ")", "\n", "ann_info", "=", "self", ".", "coco", ".", "loadAnns", "(", "ann_ids", ")", "\n", "return", "self", ".", "_parse_ann_info", "(", "ann_info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.coco.CocoDataset._filter_imgs": [[30, 40], ["set", "enumerate", "min", "valid_inds.append", "coco.CocoDataset.coco.anns.values"], "methods", ["None"], ["", "def", "_filter_imgs", "(", "self", ",", "min_size", "=", "32", ")", ":", "\n", "        ", "\"\"\"Filter images too small or without ground truths.\"\"\"", "\n", "valid_inds", "=", "[", "]", "\n", "ids_with_ann", "=", "set", "(", "_", "[", "'image_id'", "]", "for", "_", "in", "self", ".", "coco", ".", "anns", ".", "values", "(", ")", ")", "\n", "for", "i", ",", "img_info", "in", "enumerate", "(", "self", ".", "img_infos", ")", ":", "\n", "            ", "if", "self", ".", "img_ids", "[", "i", "]", "not", "in", "ids_with_ann", ":", "\n", "                ", "continue", "\n", "", "if", "min", "(", "img_info", "[", "'width'", "]", ",", "img_info", "[", "'height'", "]", ")", ">=", "min_size", ":", "\n", "                ", "valid_inds", ".", "append", "(", "i", ")", "\n", "", "", "return", "valid_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.coco.CocoDataset._parse_ann_info": [[41, 104], ["enumerate", "dict", "dict.get", "numpy.array", "numpy.array", "numpy.zeros", "numpy.array", "numpy.array", "numpy.zeros", "numpy.zeros.append", "numpy.zeros.append", "numpy.array.append", "gt_masks.append", "gt_mask_polys.append", "gt_poly_lens.extend", "coco.CocoDataset.coco.annToMask", "len", "len"], "methods", ["None"], ["", "def", "_parse_ann_info", "(", "self", ",", "ann_info", ",", "with_mask", "=", "True", ")", ":", "\n", "        ", "\"\"\"Parse bbox and mask annotation.\n\n        Args:\n            ann_info (list[dict]): Annotation info of an image.\n            with_mask (bool): Whether to parse mask annotations.\n\n        Returns:\n            dict: A dict containing the following keys: bboxes, bboxes_ignore,\n                labels, masks, mask_polys, poly_lens.\n        \"\"\"", "\n", "gt_bboxes", "=", "[", "]", "\n", "gt_labels", "=", "[", "]", "\n", "gt_bboxes_ignore", "=", "[", "]", "\n", "# Two formats are provided.", "\n", "# 1. mask: a binary map of the same size of the image.", "\n", "# 2. polys: each mask consists of one or several polys, each poly is a", "\n", "# list of float.", "\n", "if", "with_mask", ":", "\n", "            ", "gt_masks", "=", "[", "]", "\n", "gt_mask_polys", "=", "[", "]", "\n", "gt_poly_lens", "=", "[", "]", "\n", "", "for", "i", ",", "ann", "in", "enumerate", "(", "ann_info", ")", ":", "\n", "            ", "if", "ann", ".", "get", "(", "'ignore'", ",", "False", ")", ":", "\n", "                ", "continue", "\n", "", "x1", ",", "y1", ",", "w", ",", "h", "=", "ann", "[", "'bbox'", "]", "\n", "if", "ann", "[", "'area'", "]", "<=", "0", "or", "w", "<", "1", "or", "h", "<", "1", ":", "\n", "                ", "continue", "\n", "", "bbox", "=", "[", "x1", ",", "y1", ",", "x1", "+", "w", "-", "1", ",", "y1", "+", "h", "-", "1", "]", "\n", "if", "ann", "[", "'iscrowd'", "]", ":", "\n", "                ", "gt_bboxes_ignore", ".", "append", "(", "bbox", ")", "\n", "", "else", ":", "\n", "                ", "gt_bboxes", ".", "append", "(", "bbox", ")", "\n", "gt_labels", ".", "append", "(", "self", ".", "cat2label", "[", "ann", "[", "'category_id'", "]", "]", ")", "\n", "", "if", "with_mask", ":", "\n", "                ", "gt_masks", ".", "append", "(", "self", ".", "coco", ".", "annToMask", "(", "ann", ")", ")", "\n", "mask_polys", "=", "[", "\n", "p", "for", "p", "in", "ann", "[", "'segmentation'", "]", "if", "len", "(", "p", ")", ">=", "6", "\n", "]", "# valid polygons have >= 3 points (6 coordinates)", "\n", "poly_lens", "=", "[", "len", "(", "p", ")", "for", "p", "in", "mask_polys", "]", "\n", "gt_mask_polys", ".", "append", "(", "mask_polys", ")", "\n", "gt_poly_lens", ".", "extend", "(", "poly_lens", ")", "\n", "", "", "if", "gt_bboxes", ":", "\n", "            ", "gt_bboxes", "=", "np", ".", "array", "(", "gt_bboxes", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "gt_labels", "=", "np", ".", "array", "(", "gt_labels", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "", "else", ":", "\n", "            ", "gt_bboxes", "=", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "gt_labels", "=", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n", "", "if", "gt_bboxes_ignore", ":", "\n", "            ", "gt_bboxes_ignore", "=", "np", ".", "array", "(", "gt_bboxes_ignore", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "            ", "gt_bboxes_ignore", "=", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "", "ann", "=", "dict", "(", "\n", "bboxes", "=", "gt_bboxes", ",", "labels", "=", "gt_labels", ",", "bboxes_ignore", "=", "gt_bboxes_ignore", ")", "\n", "\n", "if", "with_mask", ":", "\n", "            ", "ann", "[", "'masks'", "]", "=", "gt_masks", "\n", "# poly format is not used in the current implementation", "\n", "ann", "[", "'mask_polys'", "]", "=", "gt_mask_polys", "\n", "ann", "[", "'poly_lens'", "]", "=", "gt_poly_lens", "\n", "", "return", "ann", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti_utils.Object3d.__init__": [[9, 38], ["label_file_line.split", "int", "numpy.array", "numpy.array().astype", "float", "numpy.array"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "label_file_line", ")", ":", "\n", "        ", "data", "=", "label_file_line", ".", "split", "(", "' '", ")", "\n", "data", "[", "1", ":", "]", "=", "[", "float", "(", "x", ")", "for", "x", "in", "data", "[", "1", ":", "]", "]", "\n", "\n", "# extract label, truncation, occlusion", "\n", "self", ".", "type", "=", "data", "[", "0", "]", "# 'Car', 'Pedestrian', ...", "\n", "self", ".", "truncation", "=", "data", "[", "1", "]", "# truncated pixel ratio [0..1]", "\n", "self", ".", "occlusion", "=", "int", "(", "data", "[", "2", "]", ")", "# 0=visible, 1=partly occluded, 2=fully occluded, 3=unknown", "\n", "self", ".", "alpha", "=", "data", "[", "3", "]", "# object observation angle [-pi..pi]", "\n", "\n", "# extract 2d bounding box in 0-based coordinates", "\n", "self", ".", "xmin", "=", "data", "[", "4", "]", "# left", "\n", "self", ".", "ymin", "=", "data", "[", "5", "]", "# top", "\n", "self", ".", "xmax", "=", "data", "[", "6", "]", "# right", "\n", "self", ".", "ymax", "=", "data", "[", "7", "]", "# bottom", "\n", "self", ".", "box2d", "=", "np", ".", "array", "(", "[", "self", ".", "xmin", ",", "self", ".", "ymin", ",", "self", ".", "xmax", ",", "self", ".", "ymax", "]", ")", "\n", "\n", "# extract 3d bounding box information", "\n", "self", ".", "h", "=", "data", "[", "8", "]", "# box height", "\n", "self", ".", "w", "=", "data", "[", "9", "]", "# box width", "\n", "self", ".", "l", "=", "data", "[", "10", "]", "# box length (in meters)", "\n", "self", ".", "t", "=", "(", "data", "[", "11", "]", ",", "data", "[", "12", "]", ",", "data", "[", "13", "]", ")", "# location (x,y,z) in camera coord.", "\n", "self", ".", "ry", "=", "data", "[", "14", "]", "# yaw angle (around Y-axis in camera coordinates) [-pi..pi]", "\n", "try", ":", "\n", "            ", "self", ".", "score", "=", "data", "[", "15", "]", "\n", "", "except", ":", "\n", "            ", "self", ".", "score", "=", "1.", "\n", "", "self", ".", "box3d", "=", "np", ".", "array", "(", "\n", "[", "data", "[", "11", "]", ",", "data", "[", "12", "]", ",", "data", "[", "13", "]", ",", "data", "[", "9", "]", ",", "data", "[", "10", "]", ",", "data", "[", "8", "]", ",", "data", "[", "14", "]", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "def", "print_object", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti_utils.Object3d.print_object": [[38, 47], ["print", "print", "print", "print"], "methods", ["None"], ["", "def", "print_object", "(", "self", ")", ":", "\n", "        ", "print", "(", "'Type, truncation, occlusion, alpha: %s, %d, %d, %f'", "%", "(", "self", ".", "type", ",", "self", ".", "truncation", ",", "self", ".", "occlusion", ",", "self", ".", "alpha", ")", ")", "\n", "print", "(", "'2d bbox (x0,y0,x1,y1): %f, %f, %f, %f'", "%", "(", "self", ".", "xmin", ",", "self", ".", "ymin", ",", "self", ".", "xmax", ",", "self", ".", "ymax", ")", ")", "\n", "print", "(", "'3d bbox h,w,l: %f, %f, %f'", "%", "(", "self", ".", "h", ",", "self", ".", "w", ",", "self", ".", "l", ")", ")", "\n", "print", "(", "'3d bbox location, ry: (%f, %f, %f), %f'", "%", "(", "self", ".", "t", "[", "0", "]", ",", "self", ".", "t", "[", "1", "]", ",", "self", ".", "t", "[", "2", "]", ",", "self", ".", "ry", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti_utils.Calibration.__init__": [[75, 108], ["numpy.reshape", "numpy.reshape", "numpy.reshape", "numpy.zeros_like", "numpy.transpose", "numpy.dot", "numpy.reshape", "kitti_utils.Calibration.read_calib_from_video", "kitti_utils.Calibration.read_calib_file", "numpy.transpose"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti_utils.Calibration.read_calib_from_video", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti_utils.Calibration.read_calib_file"], ["def", "__init__", "(", "self", ",", "calib_filepath", ",", "from_video", "=", "False", ")", ":", "\n", "        ", "if", "from_video", ":", "\n", "            ", "calibs", "=", "self", ".", "read_calib_from_video", "(", "calib_filepath", ")", "\n", "", "else", ":", "\n", "            ", "calibs", "=", "self", ".", "read_calib_file", "(", "calib_filepath", ")", "\n", "# Projection matrix from rect camera coord to image2 coord", "\n", "", "self", ".", "P2", "=", "calibs", "[", "'P2'", "]", "\n", "self", ".", "P2", "=", "np", ".", "reshape", "(", "self", ".", "P2", ",", "[", "3", ",", "4", "]", ")", "\n", "\n", "# Projection matrix from rect camera coord to image3 coord", "\n", "self", ".", "P3", "=", "calibs", "[", "'P3'", "]", "\n", "self", ".", "P3", "=", "np", ".", "reshape", "(", "self", ".", "P3", ",", "[", "3", ",", "4", "]", ")", "\n", "\n", "# Rigid transform from Velodyne coord to reference camera coord", "\n", "self", ".", "V2C", "=", "calibs", "[", "'Tr_velo_to_cam'", "]", "\n", "self", ".", "V2C", "=", "np", ".", "reshape", "(", "self", ".", "V2C", ",", "[", "3", ",", "4", "]", ")", "\n", "\n", "self", ".", "C2V", "=", "np", ".", "zeros_like", "(", "self", ".", "V2C", ")", "# 3x4", "\n", "self", ".", "C2V", "[", "0", ":", "3", ",", "0", ":", "3", "]", "=", "np", ".", "transpose", "(", "self", ".", "V2C", "[", "0", ":", "3", ",", "0", ":", "3", "]", ")", "\n", "self", ".", "C2V", "[", "0", ":", "3", ",", "3", "]", "=", "np", ".", "dot", "(", "-", "np", ".", "transpose", "(", "self", ".", "V2C", "[", "0", ":", "3", ",", "0", ":", "3", "]", ")", ",", "self", ".", "V2C", "[", "0", ":", "3", ",", "3", "]", ")", "\n", "\n", "# Rotation from reference camera coord to rect camera coord", "\n", "self", ".", "R0", "=", "calibs", "[", "'R0_rect'", "]", "\n", "self", ".", "R0", "=", "np", ".", "reshape", "(", "self", ".", "R0", ",", "[", "3", ",", "3", "]", ")", "\n", "\n", "# Camera intrinsics and extrinsics", "\n", "self", ".", "c_u", "=", "self", ".", "P2", "[", "0", ",", "2", "]", "\n", "self", ".", "c_v", "=", "self", ".", "P2", "[", "1", ",", "2", "]", "\n", "self", ".", "f_u", "=", "self", ".", "P2", "[", "0", ",", "0", "]", "\n", "self", ".", "f_v", "=", "self", ".", "P2", "[", "1", ",", "1", "]", "\n", "self", ".", "b_x", "=", "self", ".", "P2", "[", "0", ",", "3", "]", "/", "(", "-", "self", ".", "f_u", ")", "# relative", "\n", "self", ".", "b_y", "=", "self", ".", "P2", "[", "1", ",", "3", "]", "/", "(", "-", "self", ".", "f_v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti_utils.Calibration.read_calib_file": [[109, 127], ["open", "f.readlines", "line.rstrip.rstrip.rstrip", "line.rstrip.rstrip.split", "len", "numpy.array", "float", "value.split"], "methods", ["None"], ["", "def", "read_calib_file", "(", "self", ",", "filepath", ")", ":", "\n", "        ", "''' Read in a calibration file and parse into a dictionary.\n        Ref: https://github.com/utiasSTARS/pykitti/blob/master/pykitti/utils.py\n        '''", "\n", "data", "=", "{", "}", "\n", "with", "open", "(", "filepath", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "line", "=", "line", ".", "rstrip", "(", ")", "\n", "if", "len", "(", "line", ")", "==", "0", ":", "continue", "\n", "key", ",", "value", "=", "line", ".", "split", "(", "':'", ",", "1", ")", "\n", "# The only non-float values in these files are dates, which", "\n", "# we don't care about anyway", "\n", "try", ":", "\n", "                    ", "data", "[", "key", "]", "=", "np", ".", "array", "(", "[", "float", "(", "x", ")", "for", "x", "in", "value", ".", "split", "(", ")", "]", ")", "\n", "", "except", "ValueError", ":", "\n", "                    ", "pass", "\n", "\n", "", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti_utils.Calibration.read_calib_from_video": [[128, 143], ["kitti_utils.Calibration.read_calib_file", "kitti_utils.Calibration.read_calib_file", "numpy.zeros", "numpy.reshape", "numpy.reshape", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti_utils.Calibration.read_calib_file", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti_utils.Calibration.read_calib_file"], ["", "def", "read_calib_from_video", "(", "self", ",", "calib_root_dir", ")", ":", "\n", "        ", "''' Read calibration for camera 2 from video calib files.\n            there are calib_cam_to_cam and calib_velo_to_cam under the calib_root_dir\n        '''", "\n", "data", "=", "{", "}", "\n", "cam2cam", "=", "self", ".", "read_calib_file", "(", "os", ".", "path", ".", "join", "(", "calib_root_dir", ",", "'calib_cam_to_cam.txt'", ")", ")", "\n", "velo2cam", "=", "self", ".", "read_calib_file", "(", "os", ".", "path", ".", "join", "(", "calib_root_dir", ",", "'calib_velo_to_cam.txt'", ")", ")", "\n", "Tr_velo_to_cam", "=", "np", ".", "zeros", "(", "(", "3", ",", "4", ")", ")", "\n", "Tr_velo_to_cam", "[", "0", ":", "3", ",", "0", ":", "3", "]", "=", "np", ".", "reshape", "(", "velo2cam", "[", "'R'", "]", ",", "[", "3", ",", "3", "]", ")", "\n", "Tr_velo_to_cam", "[", ":", ",", "3", "]", "=", "velo2cam", "[", "'T'", "]", "\n", "data", "[", "'Tr_velo_to_cam'", "]", "=", "np", ".", "reshape", "(", "Tr_velo_to_cam", ",", "[", "12", "]", ")", "\n", "data", "[", "'R0_rect'", "]", "=", "cam2cam", "[", "'R_rect_00'", "]", "\n", "data", "[", "'P2'", "]", "=", "cam2cam", "[", "'P_rect_02'", "]", "\n", "data", "[", "'P3'", "]", "=", "cam2cam", "[", "'P_rect_03'", "]", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti_utils.read_lidar": [[144, 148], ["numpy.fromfile().reshape", "numpy.fromfile"], "function", ["None"], ["", "", "def", "read_lidar", "(", "bin_path", ")", ":", "\n", "    ", "\"\"\"Load PointCloud data from pcd file.\"\"\"", "\n", "obj", "=", "np", ".", "fromfile", "(", "bin_path", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti_utils.read_label": [[149, 153], ["line.rstrip", "kitti_utils.Object3d", "open"], "function", ["None"], ["", "def", "read_label", "(", "label_filename", ")", ":", "\n", "    ", "lines", "=", "[", "line", ".", "rstrip", "(", ")", "for", "line", "in", "open", "(", "label_filename", ")", "]", "\n", "objects", "=", "[", "Object3d", "(", "line", ")", "for", "line", "in", "lines", "]", "\n", "return", "objects", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti_utils.cart2hom": [[154, 161], ["list", "numpy.concatenate", "numpy.ones"], "function", ["None"], ["", "def", "cart2hom", "(", "pts_3d", ")", ":", "\n", "    ", "''' Input: nx3 points in Cartesian\n        Oupput: nx4 points in Homogeneous by pending 1\n    '''", "\n", "n", "=", "list", "(", "pts_3d", ".", "shape", "[", "0", ":", "-", "1", "]", ")", "\n", "pts_3d_hom", "=", "np", ".", "concatenate", "(", "[", "pts_3d", ",", "np", ".", "ones", "(", "n", "+", "[", "1", "]", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "return", "pts_3d_hom", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti_utils.project_velo_to_ref": [[165, 168], ["kitti_utils.cart2hom"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti_utils.cart2hom"], ["", "def", "project_velo_to_ref", "(", "pts_3d_velo", ",", "calib", ")", ":", "\n", "    ", "pts_3d_velo", "=", "cart2hom", "(", "pts_3d_velo", ")", "# nx4", "\n", "return", "pts_3d_velo", "@", "calib", ".", "V2C", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti_utils.project_ref_to_velo": [[169, 172], ["kitti_utils.cart2hom"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti_utils.cart2hom"], ["", "def", "project_ref_to_velo", "(", "pts_3d_ref", ",", "calib", ")", ":", "\n", "    ", "pts_3d_ref", "=", "cart2hom", "(", "pts_3d_ref", ")", "# nx4", "\n", "return", "pts_3d_ref", "@", "calib", ".", "C2V", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti_utils.project_rect_to_ref": [[173, 176], ["numpy.linalg.inv"], "function", ["None"], ["", "def", "project_rect_to_ref", "(", "pts_3d_rect", ",", "calib", ")", ":", "\n", "    ", "''' Input and Output are nx3 points '''", "\n", "return", "pts_3d_rect", "@", "np", ".", "linalg", ".", "inv", "(", "calib", ".", "R0", ")", ".", "T", "\n", "#return np.transpose(np.dot(np.linalg.inv(calib.R0), np.transpose(pts_3d_rect)))", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti_utils.project_ref_to_rect": [[178, 181], ["None"], "function", ["None"], ["", "def", "project_ref_to_rect", "(", "pts_3d_ref", ",", "calib", ")", ":", "\n", "    ", "''' Input and Output are nx3 points '''", "\n", "return", "pts_3d_ref", "@", "calib", ".", "R0", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti_utils.project_velo_to_rect": [[182, 185], ["kitti_utils.project_velo_to_ref", "kitti_utils.project_ref_to_rect"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti_utils.project_velo_to_ref", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti_utils.project_ref_to_rect"], ["", "def", "project_velo_to_rect", "(", "pts_3d_velo", ",", "calib", ")", ":", "\n", "    ", "pts_3d_ref", "=", "project_velo_to_ref", "(", "pts_3d_velo", ",", "calib", ")", "\n", "return", "project_ref_to_rect", "(", "pts_3d_ref", ",", "calib", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti_utils.project_rect_to_velo": [[186, 192], ["kitti_utils.project_rect_to_ref", "kitti_utils.project_ref_to_velo"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti_utils.project_rect_to_ref", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti_utils.project_ref_to_velo"], ["", "def", "project_rect_to_velo", "(", "pts_3d_rect", ",", "calib", ")", ":", "\n", "    ", "''' Input: nx3 points in rect camera coord.\n        Output: nx3 points in velodyne coord.\n    '''", "\n", "pts_3d_ref", "=", "project_rect_to_ref", "(", "pts_3d_rect", ",", "calib", ")", "\n", "return", "project_ref_to_velo", "(", "pts_3d_ref", ",", "calib", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti_utils.project_rect_to_image": [[196, 205], ["kitti_utils.cart2hom"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti_utils.cart2hom"], ["", "def", "project_rect_to_image", "(", "pts_3d_rect", ",", "calib", ")", ":", "\n", "    ", "''' Input: nx3 points in rect camera coord.\n        Output: nx2 points in image2 coord.\n    '''", "\n", "pts_3d_rect", "=", "cart2hom", "(", "pts_3d_rect", ")", "\n", "pts_2d", "=", "pts_3d_rect", "@", "calib", ".", "P2", ".", "T", "\n", "pts_2d", "[", "...", ",", "0", "]", "/=", "pts_2d", "[", "...", ",", "2", "]", "\n", "pts_2d", "[", "...", ",", "1", "]", "/=", "pts_2d", "[", "...", ",", "2", "]", "\n", "return", "pts_2d", "[", "...", ",", "0", ":", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti_utils.project_velo_to_image": [[206, 212], ["kitti_utils.project_velo_to_rect", "kitti_utils.project_rect_to_image"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti_utils.project_velo_to_rect", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti_utils.project_rect_to_image"], ["", "def", "project_velo_to_image", "(", "pts_3d_velo", ",", "calib", ")", ":", "\n", "    ", "''' Input: nx3 points in velodyne coord.\n        Output: nx2 points in image2 coord.\n    '''", "\n", "pts_3d_rect", "=", "project_velo_to_rect", "(", "pts_3d_velo", ",", "calib", ")", "\n", "return", "project_rect_to_image", "(", "pts_3d_rect", ",", "calib", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti_utils.project_rect_to_right": [[213, 222], ["kitti_utils.cart2hom"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti_utils.cart2hom"], ["", "def", "project_rect_to_right", "(", "pts_3d_rect", ",", "calib", ")", ":", "\n", "    ", "''' Input: nx3 points in rect camera coord.\n        Output: nx2 points in image2 coord.\n    '''", "\n", "pts_3d_rect", "=", "cart2hom", "(", "pts_3d_rect", ")", "\n", "pts_2d", "=", "pts_3d_rect", "@", "calib", ".", "P3", ".", "T", "\n", "pts_2d", "[", "...", ",", "0", "]", "/=", "pts_2d", "[", "...", ",", "2", "]", "\n", "pts_2d", "[", "...", ",", "1", "]", "/=", "pts_2d", "[", "...", ",", "2", "]", "\n", "return", "pts_2d", "[", "...", ",", "0", ":", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti_utils.project_velo_to_right": [[223, 229], ["kitti_utils.project_velo_to_rect", "kitti_utils.project_rect_to_right"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti_utils.project_velo_to_rect", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti_utils.project_rect_to_right"], ["", "def", "project_velo_to_right", "(", "pts_3d_velo", ",", "calib", ")", ":", "\n", "    ", "''' Input: nx3 points in velodyne coord.\n        Output: nx2 points in image2 coord.\n    '''", "\n", "pts_3d_rect", "=", "project_velo_to_rect", "(", "pts_3d_velo", ",", "calib", ")", "\n", "return", "project_rect_to_right", "(", "pts_3d_rect", ",", "calib", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti_utils.project_image_to_rect": [[233, 246], ["numpy.zeros"], "function", ["None"], ["", "def", "project_image_to_rect", "(", "uv_depth", ",", "calib", ")", ":", "\n", "    ", "''' Input: nx3 first two channels are uv, 3rd channel\n               is depth in rect camera coord.\n        Output: nx3 points in rect camera coord.\n    '''", "\n", "n", "=", "uv_depth", ".", "shape", "[", "0", "]", "\n", "x", "=", "(", "(", "uv_depth", "[", ":", ",", "0", "]", "-", "calib", ".", "c_u", ")", "*", "uv_depth", "[", ":", ",", "2", "]", ")", "/", "calib", ".", "f_u", "+", "calib", ".", "b_x", "\n", "y", "=", "(", "(", "uv_depth", "[", ":", ",", "1", "]", "-", "calib", ".", "c_v", ")", "*", "uv_depth", "[", ":", ",", "2", "]", ")", "/", "calib", ".", "f_v", "+", "calib", ".", "b_y", "\n", "pts_3d_rect", "=", "np", ".", "zeros", "(", "(", "n", ",", "3", ")", ")", "\n", "pts_3d_rect", "[", ":", ",", "0", "]", "=", "x", "\n", "pts_3d_rect", "[", ":", ",", "1", "]", "=", "y", "\n", "pts_3d_rect", "[", ":", ",", "2", "]", "=", "uv_depth", "[", ":", ",", "2", "]", "\n", "return", "pts_3d_rect", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti_utils.project_image_to_velo": [[247, 250], ["kitti_utils.project_image_to_rect", "kitti_utils.project_rect_to_velo"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti_utils.project_image_to_rect", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti_utils.project_rect_to_velo"], ["", "def", "project_image_to_velo", "(", "uv_depth", ",", "calib", ")", ":", "\n", "    ", "pts_3d_rect", "=", "project_image_to_rect", "(", "uv_depth", ",", "calib", ")", "\n", "return", "project_rect_to_velo", "(", "pts_3d_rect", ",", "calib", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti_utils.get_lidar_in_image_fov": [[252, 264], ["kitti_utils.project_velo_to_image"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti_utils.project_velo_to_image"], ["", "def", "get_lidar_in_image_fov", "(", "pc_velo", ",", "calib", ",", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", ",", "\n", "return_more", "=", "False", ",", "clip_distance", "=", "2.0", ")", ":", "\n", "    ", "''' Filter lidar points, keep those in image FOV '''", "\n", "pts_2d", "=", "project_velo_to_image", "(", "pc_velo", "[", ":", ",", ":", "3", "]", ",", "calib", ")", "\n", "fov_inds", "=", "(", "pts_2d", "[", ":", ",", "0", "]", "<", "xmax", ")", "&", "(", "pts_2d", "[", ":", ",", "0", "]", ">=", "xmin", ")", "&", "(", "pts_2d", "[", ":", ",", "1", "]", "<", "ymax", ")", "&", "(", "pts_2d", "[", ":", ",", "1", "]", ">=", "ymin", ")", "\n", "fov_inds", "=", "fov_inds", "&", "(", "pc_velo", "[", ":", ",", "0", "]", ">", "clip_distance", ")", "\n", "imgfov_pc_velo", "=", "pc_velo", "[", "fov_inds", ",", ":", "]", "\n", "if", "return_more", ":", "\n", "        ", "return", "imgfov_pc_velo", ",", "pts_2d", ",", "fov_inds", "\n", "", "else", ":", "\n", "        ", "return", "imgfov_pc_velo", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti_utils.draw_projected_boxes3d": [[265, 292], ["boxes3d.astype.astype", "range", "cv2.line", "cv2.line", "cv2.line"], "function", ["None"], ["", "", "def", "draw_projected_boxes3d", "(", "image", ",", "boxes3d", ",", "color", ",", "thickness", "=", "2", ")", ":", "\n", "    ", "''' Draw 3d bounding box in image\n        qs: (8,3) array of vertices for the 3d box in following order:\n            1 -------- 0\n           /|         /|\n          2 -------- 3 .\n          | |        | |\n          . 5 -------- 4\n          |/         |/\n          6 -------- 7\n    '''", "\n", "boxes3d", "=", "boxes3d", ".", "astype", "(", "np", ".", "int32", ")", "\n", "for", "qs", "in", "boxes3d", ":", "\n", "# import random", "\n", "# color = random.choice(colors)", "\n", "        ", "for", "k", "in", "range", "(", "0", ",", "4", ")", ":", "\n", "# Ref: http://docs.enthought.com/mayavi/mayavi/auto/mlab_helper_functions.html", "\n", "           ", "i", ",", "j", "=", "k", ",", "(", "k", "+", "1", ")", "%", "4", "\n", "# use LINE_AA for opencv3", "\n", "cv2", ".", "line", "(", "image", ",", "(", "qs", "[", "i", ",", "0", "]", ",", "qs", "[", "i", ",", "1", "]", ")", ",", "(", "qs", "[", "j", ",", "0", "]", ",", "qs", "[", "j", ",", "1", "]", ")", ",", "color", ",", "thickness", ",", "cv2", ".", "LINE_AA", ")", "\n", "\n", "i", ",", "j", "=", "k", "+", "4", ",", "(", "k", "+", "1", ")", "%", "4", "+", "4", "\n", "cv2", ".", "line", "(", "image", ",", "(", "qs", "[", "i", ",", "0", "]", ",", "qs", "[", "i", ",", "1", "]", ")", ",", "(", "qs", "[", "j", ",", "0", "]", ",", "qs", "[", "j", ",", "1", "]", ")", ",", "color", ",", "thickness", ",", "cv2", ".", "LINE_AA", ")", "\n", "\n", "i", ",", "j", "=", "k", ",", "k", "+", "4", "\n", "cv2", ".", "line", "(", "image", ",", "(", "qs", "[", "i", ",", "0", "]", ",", "qs", "[", "i", ",", "1", "]", ")", ",", "(", "qs", "[", "j", ",", "0", "]", ",", "qs", "[", "j", ",", "1", "]", ")", ",", "color", ",", "thickness", ",", "cv2", ".", "LINE_AA", ")", "\n", "", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti_utils.load_proposals": [[293, 308], ["dict", "open", "line.rstrip().split", "int", "numpy.vstack", "os.path.basename().rstrip", "dict.items", "line.rstrip", "dict.keys", "d[].append", "os.path.basename", "int", "numpy.array", "numpy.array", "float", "float", "range", "range"], "function", ["None"], ["", "def", "load_proposals", "(", "proosal_file", ",", "cls", "=", "'Car'", ")", ":", "\n", "    ", "det_id2str", "=", "{", "1", ":", "'Pedestrian'", ",", "2", ":", "'Car'", ",", "3", ":", "'Cyclist'", "}", "\n", "d", "=", "dict", "(", ")", "\n", "for", "line", "in", "open", "(", "proosal_file", ",", "'r'", ")", ":", "\n", "        ", "t", "=", "line", ".", "rstrip", "(", ")", ".", "split", "(", "\" \"", ")", "\n", "id", "=", "int", "(", "os", ".", "path", ".", "basename", "(", "t", "[", "0", "]", ")", ".", "rstrip", "(", "'.png'", ")", ")", "\n", "if", "det_id2str", "[", "int", "(", "t", "[", "1", "]", ")", "]", "==", "cls", ":", "\n", "            ", "if", "id", "in", "d", ".", "keys", "(", ")", ":", "\n", "                    ", "d", "[", "id", "]", ".", "append", "(", "np", ".", "array", "(", "[", "float", "(", "t", "[", "i", "]", ")", "for", "i", "in", "range", "(", "2", ",", "7", ")", "]", ",", "dtype", "=", "np", ".", "float32", ")", ")", "\n", "", "else", ":", "\n", "                ", "d", "[", "id", "]", "=", "[", "np", ".", "array", "(", "[", "float", "(", "t", "[", "i", "]", ")", "for", "i", "in", "range", "(", "2", ",", "7", ")", "]", ",", "dtype", "=", "np", ".", "float32", ")", "]", "\n", "", "", "else", ":", "\n", "            ", "continue", "\n", "", "", "d", "=", "{", "k", ":", "np", ".", "vstack", "(", "v", ")", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", "}", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti_utils.draw_lidar": [[309, 333], ["mlab.points3d", "mlab.view", "mlab.figure", "mlab.points3d", "numpy.array", "mlab.plot3d", "mlab.plot3d", "mlab.plot3d", "mlab.show"], "function", ["None"], ["", "def", "draw_lidar", "(", "pc", ",", "fig", "=", "None", ",", "color", "=", "None", ",", "scale", "=", "1.", ",", "axis", "=", "True", ",", "show", "=", "False", ")", ":", "\n", "    ", "import", "mayavi", ".", "mlab", "as", "mlab", "\n", "if", "fig", "is", "None", ":", "fig", "=", "mlab", ".", "figure", "(", "figure", "=", "None", ",", "bgcolor", "=", "(", "0", ",", "0", ",", "0", ")", ",", "fgcolor", "=", "None", ",", "engine", "=", "None", ",", "size", "=", "(", "1000", ",", "500", ")", ")", "\n", "''' Draw lidar points. simplest set up. '''", "\n", "if", "color", "is", "None", ":", "color", "=", "pc", "[", ":", ",", "2", "]", "\n", "# draw points", "\n", "mlab", ".", "points3d", "(", "pc", "[", ":", ",", "0", "]", ",", "pc", "[", ":", ",", "1", "]", ",", "pc", "[", ":", ",", "2", "]", ",", "color", ",", "color", "=", "None", ",", "mode", "=", "'point'", ",", "colormap", "=", "'gnuplot'", ",", "scale_factor", "=", "scale", ",", "\n", "figure", "=", "fig", ")", "\n", "if", "axis", ":", "\n", "# draw origin", "\n", "        ", "mlab", ".", "points3d", "(", "0", ",", "0", ",", "0", ",", "color", "=", "(", "1", ",", "1", ",", "1", ")", ",", "mode", "=", "'sphere'", ",", "scale_factor", "=", "0.2", ")", "\n", "# draw axis", "\n", "axes", "=", "np", ".", "array", "(", "[", "\n", "[", "2.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "0.", ",", "2.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "0.", ",", "0.", ",", "2.", ",", "0.", "]", ",", "\n", "]", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "mlab", ".", "plot3d", "(", "[", "0", ",", "axes", "[", "0", ",", "0", "]", "]", ",", "[", "0", ",", "axes", "[", "0", ",", "1", "]", "]", ",", "[", "0", ",", "axes", "[", "0", ",", "2", "]", "]", ",", "color", "=", "(", "1", ",", "0", ",", "0", ")", ",", "tube_radius", "=", "None", ",", "figure", "=", "fig", ")", "\n", "mlab", ".", "plot3d", "(", "[", "0", ",", "axes", "[", "1", ",", "0", "]", "]", ",", "[", "0", ",", "axes", "[", "1", ",", "1", "]", "]", ",", "[", "0", ",", "axes", "[", "1", ",", "2", "]", "]", ",", "color", "=", "(", "0", ",", "1", ",", "0", ")", ",", "tube_radius", "=", "None", ",", "figure", "=", "fig", ")", "\n", "mlab", ".", "plot3d", "(", "[", "0", ",", "axes", "[", "2", ",", "0", "]", "]", ",", "[", "0", ",", "axes", "[", "2", ",", "1", "]", "]", ",", "[", "0", ",", "axes", "[", "2", ",", "2", "]", "]", ",", "color", "=", "(", "0", ",", "0", ",", "1", ")", ",", "tube_radius", "=", "None", ",", "figure", "=", "fig", ")", "\n", "", "mlab", ".", "view", "(", "azimuth", "=", "180", ",", "elevation", "=", "70", ",", "focalpoint", "=", "[", "15", ",", "0", ",", "0", "]", ",", "distance", "=", "50.0", ",", "figure", "=", "fig", ")", "\n", "if", "show", ":", "\n", "        ", "mlab", ".", "show", "(", ")", "\n", "", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti_utils.draw_gt_boxes3d": [[334, 372], ["len", "range", "mlab.view", "range", "mlab.show", "mlab.text3d", "mlab.text3d", "mlab.plot3d", "mlab.plot3d", "mlab.plot3d"], "function", ["None"], ["", "def", "draw_gt_boxes3d", "(", "gt_boxes3d", ",", "fig", ",", "color", "=", "(", "1", ",", "1", ",", "1", ")", ",", "line_width", "=", "1", ",", "draw_text", "=", "False", ",", "scores", "=", "None", ",", "text_scale", "=", "(", "1", ",", "1", ",", "1", ")", ",", "color_list", "=", "None", ",", "show", "=", "False", ")", ":", "\n", "    ", "''' Draw 3D bounding boxes\n    Args:\n        gt_boxes3d: numpy array (n,8,3) for XYZs of the box corners\n        fig: mayavi figure handler\n        color: RGB value tuple in range (0,1), box line color\n        line_width: box line width\n        draw_text: boolean, if true, write box indices beside boxes\n        text_scale: three number tuple\n        color_list: a list of RGB tuple, if not None, overwrite color.\n    Returns:\n        fig: updated fig\n    '''", "\n", "import", "mayavi", ".", "mlab", "as", "mlab", "\n", "num", "=", "len", "(", "gt_boxes3d", ")", "\n", "for", "n", "in", "range", "(", "num", ")", ":", "\n", "        ", "b", "=", "gt_boxes3d", "[", "n", "]", "\n", "if", "color_list", "is", "not", "None", ":", "\n", "            ", "color", "=", "color_list", "[", "n", "]", "\n", "", "if", "draw_text", ":", "mlab", ".", "text3d", "(", "b", "[", "4", ",", "0", "]", ",", "b", "[", "4", ",", "1", "]", ",", "b", "[", "4", ",", "2", "]", ",", "'%d'", "%", "n", ",", "scale", "=", "text_scale", ",", "color", "=", "color", ",", "figure", "=", "fig", ")", "\n", "\n", "if", "scores", "is", "not", "None", ":", "mlab", ".", "text3d", "(", "b", "[", "4", ",", "0", "]", ",", "b", "[", "4", ",", "1", "]", ",", "b", "[", "4", ",", "2", "]", ",", "'%02f'", "%", "scores", "[", "n", "]", ",", "scale", "=", "(", ".25", ",", ".25", ",", ".25", ")", ",", "color", "=", "color", ",", "figure", "=", "fig", ")", "\n", "\n", "for", "k", "in", "range", "(", "0", ",", "4", ")", ":", "\n", "#http://docs.enthought.com/mayavi/mayavi/auto/mlab_helper_functions.html", "\n", "            ", "i", ",", "j", "=", "k", ",", "(", "k", "+", "1", ")", "%", "4", "\n", "mlab", ".", "plot3d", "(", "[", "b", "[", "i", ",", "0", "]", ",", "b", "[", "j", ",", "0", "]", "]", ",", "[", "b", "[", "i", ",", "1", "]", ",", "b", "[", "j", ",", "1", "]", "]", ",", "[", "b", "[", "i", ",", "2", "]", ",", "b", "[", "j", ",", "2", "]", "]", ",", "color", "=", "color", ",", "tube_radius", "=", "None", ",", "line_width", "=", "line_width", ",", "figure", "=", "fig", ")", "\n", "\n", "i", ",", "j", "=", "k", "+", "4", ",", "(", "k", "+", "1", ")", "%", "4", "+", "4", "\n", "mlab", ".", "plot3d", "(", "[", "b", "[", "i", ",", "0", "]", ",", "b", "[", "j", ",", "0", "]", "]", ",", "[", "b", "[", "i", ",", "1", "]", ",", "b", "[", "j", ",", "1", "]", "]", ",", "[", "b", "[", "i", ",", "2", "]", ",", "b", "[", "j", ",", "2", "]", "]", ",", "color", "=", "color", ",", "tube_radius", "=", "None", ",", "line_width", "=", "line_width", ",", "figure", "=", "fig", ")", "\n", "\n", "i", ",", "j", "=", "k", ",", "k", "+", "4", "\n", "mlab", ".", "plot3d", "(", "[", "b", "[", "i", ",", "0", "]", ",", "b", "[", "j", ",", "0", "]", "]", ",", "[", "b", "[", "i", ",", "1", "]", ",", "b", "[", "j", ",", "1", "]", "]", ",", "[", "b", "[", "i", ",", "2", "]", ",", "b", "[", "j", ",", "2", "]", "]", ",", "color", "=", "color", ",", "tube_radius", "=", "None", ",", "line_width", "=", "line_width", ",", "figure", "=", "fig", ")", "\n", "\n", "", "", "mlab", ".", "view", "(", "azimuth", "=", "180", ",", "elevation", "=", "70", ",", "focalpoint", "=", "[", "0", ",", "0", ",", "0", "]", ",", "distance", "=", "62.0", ",", "figure", "=", "fig", ")", "\n", "if", "show", ":", "\n", "        ", "mlab", ".", "show", "(", ")", "\n", "", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.xml_style.XMLDataset.__init__": [[12, 15], ["custom.CustomDataset.__init__", "enumerate"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "XMLDataset", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "cat2label", "=", "{", "cat", ":", "i", "+", "1", "for", "i", ",", "cat", "in", "enumerate", "(", "self", ".", "CLASSES", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.xml_style.XMLDataset.load_annotations": [[16, 31], ["mmcv.list_from_file", "os.join", "xml.parse", "xml.parse.getroot", "ET.parse.getroot.find", "int", "int", "img_infos.append", "dict", "tree.getroot.find.find", "tree.getroot.find.find"], "methods", ["None"], ["", "def", "load_annotations", "(", "self", ",", "ann_file", ")", ":", "\n", "        ", "img_infos", "=", "[", "]", "\n", "img_ids", "=", "mmcv", ".", "list_from_file", "(", "ann_file", ")", "\n", "for", "img_id", "in", "img_ids", ":", "\n", "            ", "filename", "=", "'JPEGImages/{}.jpg'", ".", "format", "(", "img_id", ")", "\n", "xml_path", "=", "osp", ".", "join", "(", "self", ".", "img_prefix", ",", "'Annotations'", ",", "\n", "'{}.xml'", ".", "format", "(", "img_id", ")", ")", "\n", "tree", "=", "ET", ".", "parse", "(", "xml_path", ")", "\n", "root", "=", "tree", ".", "getroot", "(", ")", "\n", "size", "=", "root", ".", "find", "(", "'size'", ")", "\n", "width", "=", "int", "(", "size", ".", "find", "(", "'width'", ")", ".", "text", ")", "\n", "height", "=", "int", "(", "size", ".", "find", "(", "'height'", ")", ".", "text", ")", "\n", "img_infos", ".", "append", "(", "\n", "dict", "(", "id", "=", "img_id", ",", "filename", "=", "filename", ",", "width", "=", "width", ",", "height", "=", "height", ")", ")", "\n", "", "return", "img_infos", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.xml_style.XMLDataset.get_ann_info": [[32, 77], ["os.join", "xml.parse", "xml.parse.getroot", "ET.parse.getroot.findall", "dict", "int", "obj.find", "numpy.zeros", "numpy.zeros", "numpy.array", "numpy.zeros", "numpy.zeros", "numpy.array", "obj.find", "int", "int", "int", "int", "numpy.zeros.append", "numpy.array.append", "numpy.zeros.append", "numpy.array.append", "numpy.array", "numpy.array", "numpy.zeros.astype", "numpy.array.astype", "numpy.zeros.astype", "numpy.array.astype", "obj.find", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find.find"], "methods", ["None"], ["", "def", "get_ann_info", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img_id", "=", "self", ".", "img_infos", "[", "idx", "]", "[", "'id'", "]", "\n", "xml_path", "=", "osp", ".", "join", "(", "self", ".", "img_prefix", ",", "'Annotations'", ",", "\n", "'{}.xml'", ".", "format", "(", "img_id", ")", ")", "\n", "tree", "=", "ET", ".", "parse", "(", "xml_path", ")", "\n", "root", "=", "tree", ".", "getroot", "(", ")", "\n", "bboxes", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "bboxes_ignore", "=", "[", "]", "\n", "labels_ignore", "=", "[", "]", "\n", "for", "obj", "in", "root", ".", "findall", "(", "'object'", ")", ":", "\n", "            ", "name", "=", "obj", ".", "find", "(", "'name'", ")", ".", "text", "\n", "label", "=", "self", ".", "cat2label", "[", "name", "]", "\n", "difficult", "=", "int", "(", "obj", ".", "find", "(", "'difficult'", ")", ".", "text", ")", "\n", "bnd_box", "=", "obj", ".", "find", "(", "'bndbox'", ")", "\n", "bbox", "=", "[", "\n", "int", "(", "bnd_box", ".", "find", "(", "'xmin'", ")", ".", "text", ")", ",", "\n", "int", "(", "bnd_box", ".", "find", "(", "'ymin'", ")", ".", "text", ")", ",", "\n", "int", "(", "bnd_box", ".", "find", "(", "'xmax'", ")", ".", "text", ")", ",", "\n", "int", "(", "bnd_box", ".", "find", "(", "'ymax'", ")", ".", "text", ")", "\n", "]", "\n", "if", "difficult", ":", "\n", "                ", "bboxes_ignore", ".", "append", "(", "bbox", ")", "\n", "labels_ignore", ".", "append", "(", "label", ")", "\n", "", "else", ":", "\n", "                ", "bboxes", ".", "append", "(", "bbox", ")", "\n", "labels", ".", "append", "(", "label", ")", "\n", "", "", "if", "not", "bboxes", ":", "\n", "            ", "bboxes", "=", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ")", "\n", "labels", "=", "np", ".", "zeros", "(", "(", "0", ",", ")", ")", "\n", "", "else", ":", "\n", "            ", "bboxes", "=", "np", ".", "array", "(", "bboxes", ",", "ndmin", "=", "2", ")", "-", "1", "\n", "labels", "=", "np", ".", "array", "(", "labels", ")", "\n", "", "if", "not", "bboxes_ignore", ":", "\n", "            ", "bboxes_ignore", "=", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ")", "\n", "labels_ignore", "=", "np", ".", "zeros", "(", "(", "0", ",", ")", ")", "\n", "", "else", ":", "\n", "            ", "bboxes_ignore", "=", "np", ".", "array", "(", "bboxes_ignore", ",", "ndmin", "=", "2", ")", "-", "1", "\n", "labels_ignore", "=", "np", ".", "array", "(", "labels_ignore", ")", "\n", "", "ann", "=", "dict", "(", "\n", "bboxes", "=", "bboxes", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "labels", "=", "labels", ".", "astype", "(", "np", ".", "int64", ")", ",", "\n", "bboxes_ignore", "=", "bboxes_ignore", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "labels_ignore", "=", "labels_ignore", ".", "astype", "(", "np", ".", "int64", ")", ")", "\n", "return", "ann", "", "", "", ""]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti.KittiLiDAR.__init__": [[19, 86], ["mmcv.is_list_of", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "mmdet.datasets.transforms.ImageTransform", "isinstance", "open", "list", "kitti.KittiLiDAR._set_group_flag", "anchor_generator", "anchor_generator.reshape", "mmdet.core.bbox3d.geometry.rbbox2d_to_near_bbox", "map", "f.read().splitlines", "f.read"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti.KittiLiDAR._set_group_flag", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.rbbox2d_to_near_bbox"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "ann_file", ",", "\n", "img_prefix", ",", "\n", "img_norm_cfg", ",", "\n", "img_scale", "=", "(", "1242", ",", "375", ")", ",", "\n", "size_divisor", "=", "32", ",", "\n", "proposal_file", "=", "None", ",", "\n", "flip_ratio", "=", "0.5", ",", "\n", "with_point", "=", "False", ",", "\n", "with_mask", "=", "False", ",", "\n", "with_label", "=", "True", ",", "\n", "class_names", "=", "[", "'Car'", ",", "'Van'", "]", ",", "\n", "augmentor", "=", "None", ",", "\n", "generator", "=", "None", ",", "\n", "anchor_generator", "=", "None", ",", "\n", "anchor_area_threshold", "=", "1", ",", "\n", "target_encoder", "=", "None", ",", "\n", "out_size_factor", "=", "2", ",", "\n", "test_mode", "=", "False", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "img_scales", "=", "img_scale", "if", "isinstance", "(", "img_scale", ",", "\n", "list", ")", "else", "[", "img_scale", "]", "\n", "assert", "mmcv", ".", "is_list_of", "(", "self", ".", "img_scales", ",", "tuple", ")", "\n", "# normalization configs", "\n", "self", ".", "img_norm_cfg", "=", "img_norm_cfg", "\n", "\n", "# flip ratio", "\n", "self", ".", "flip_ratio", "=", "flip_ratio", "\n", "\n", "# size_divisor (used for FPN)", "\n", "self", ".", "size_divisor", "=", "size_divisor", "\n", "self", ".", "class_names", "=", "class_names", "\n", "self", ".", "test_mode", "=", "test_mode", "\n", "self", ".", "with_label", "=", "with_label", "\n", "self", ".", "with_mask", "=", "with_mask", "\n", "self", ".", "with_point", "=", "with_point", "\n", "self", ".", "img_prefix", "=", "osp", ".", "join", "(", "root", ",", "'image_2'", ")", "\n", "self", ".", "right_prefix", "=", "osp", ".", "join", "(", "root", ",", "'image_3'", ")", "\n", "self", ".", "lidar_prefix", "=", "osp", ".", "join", "(", "root", ",", "'velodyne_reduced'", ")", "\n", "self", ".", "calib_prefix", "=", "osp", ".", "join", "(", "root", ",", "'calib'", ")", "\n", "self", ".", "label_prefix", "=", "osp", ".", "join", "(", "root", ",", "'label_2'", ")", "\n", "\n", "with", "open", "(", "ann_file", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "self", ".", "sample_ids", "=", "list", "(", "map", "(", "int", ",", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", ")", ")", "\n", "\n", "", "if", "not", "self", ".", "test_mode", ":", "\n", "            ", "self", ".", "_set_group_flag", "(", ")", "\n", "\n", "# transforms", "\n", "", "self", ".", "img_transform", "=", "ImageTransform", "(", "\n", "size_divisor", "=", "self", ".", "size_divisor", ",", "**", "self", ".", "img_norm_cfg", ")", "\n", "\n", "# voxel", "\n", "self", ".", "augmentor", "=", "augmentor", "\n", "self", ".", "generator", "=", "generator", "\n", "self", ".", "target_encoder", "=", "target_encoder", "\n", "self", ".", "out_size_factor", "=", "out_size_factor", "\n", "self", ".", "anchor_area_threshold", "=", "anchor_area_threshold", "\n", "# anchor", "\n", "if", "anchor_generator", "is", "not", "None", ":", "\n", "            ", "feature_map_size", "=", "self", ".", "generator", ".", "grid_size", "[", ":", "2", "]", "//", "self", ".", "out_size_factor", "\n", "feature_map_size", "=", "[", "*", "feature_map_size", ",", "1", "]", "[", ":", ":", "-", "1", "]", "\n", "anchors", "=", "anchor_generator", "(", "feature_map_size", ")", "\n", "self", ".", "anchors", "=", "anchors", ".", "reshape", "(", "[", "-", "1", ",", "7", "]", ")", "\n", "self", ".", "anchors_bv", "=", "rbbox2d_to_near_bbox", "(", "\n", "self", ".", "anchors", "[", ":", ",", "[", "0", ",", "1", ",", "3", ",", "4", ",", "6", "]", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "anchors", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti.KittiLiDAR._set_group_flag": [[87, 96], ["numpy.zeros", "range", "len", "len"], "methods", ["None"], ["", "", "def", "_set_group_flag", "(", "self", ")", ":", "\n", "        ", "\"\"\"Set flag according to image aspect ratio.\n\n        Images with aspect ratio greater than 1 will be set as group 1,\n        otherwise group 0.\n        \"\"\"", "\n", "self", ".", "flag", "=", "np", ".", "zeros", "(", "len", "(", "self", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "            ", "self", ".", "flag", "[", "i", "]", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti.KittiLiDAR.__len__": [[97, 99], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sample_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti.KittiLiDAR._rand_another": [[100, 103], ["numpy.random.choice", "numpy.where"], "methods", ["None"], ["", "def", "_rand_another", "(", "self", ",", "idx", ")", ":", "\n", "        ", "pool", "=", "np", ".", "where", "(", "self", ".", "flag", "==", "self", ".", "flag", "[", "idx", "]", ")", "[", "0", "]", "\n", "return", "np", ".", "random", ".", "choice", "(", "pool", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti.KittiLiDAR.__getitem__": [[104, 113], ["kitti.KittiLiDAR.prepare_test_img", "kitti.KittiLiDAR.prepare_train_img", "kitti.KittiLiDAR._rand_another"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti.KittiVideo.prepare_test_img", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti.KittiLiDAR.prepare_train_img", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti.KittiLiDAR._rand_another"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "test_mode", ":", "\n", "            ", "return", "self", ".", "prepare_test_img", "(", "idx", ")", "\n", "", "while", "True", ":", "\n", "            ", "data", "=", "self", ".", "prepare_train_img", "(", "idx", ")", "\n", "if", "data", "is", "None", ":", "\n", "                ", "idx", "=", "self", ".", "_rand_another", "(", "idx", ")", "\n", "continue", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti.KittiLiDAR.prepare_train_img": [[114, 233], ["mmcv.imread", "kitti.KittiLiDAR.img_transform", "mmdet.datasets.kitti_utils.read_label", "mmdet.datasets.kitti_utils.Calibration", "numpy.array", "dict", "dict", "isinstance", "mmdet.core.bbox3d.geometry.limit_period", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "len", "mmdet.datasets.kitti_utils.project_rect_to_velo", "mmcv.parallel.DataContainer", "mmdet.datasets.kitti_utils.read_lidar", "kitti.KittiLiDAR.augmentor.sample_all", "numpy.concatenate", "mmdet.core.bbox3d.geometry.points_in_rbbox", "numpy.concatenate", "numpy.array", "kitti.KittiLiDAR.augmentor.noise_per_object_", "kitti.KittiLiDAR.augmentor.random_flip", "kitti.KittiLiDAR.augmentor.global_rotation", "kitti.KittiLiDAR.augmentor.global_scaling", "mmdet.ops.points_op.points_op_cpu.points_bound_kernel", "numpy.ones().astype", "mmcv.parallel.DataContainer", "mmcv.parallel.DataContainer", "mmcv.parallel.DataContainer", "mmdet.core.bbox3d.geometry.filter_gt_box_outside_range", "len", "mmcv.parallel.DataContainer", "mmcv.parallel.DataContainer", "mmdet.datasets.utils.to_tensor", "mmcv.parallel.DataContainer", "mmdet.datasets.utils.to_tensor", "os.join", "os.join", "len", "len", "mmdet.datasets.utils.to_tensor", "mmdet.datasets.utils.to_tensor", "mmdet.datasets.utils.to_tensor", "mmdet.core.bbox3d.geometry.sparse_sum_for_anchors_mask", "dense_voxel_map.cumsum.cumsum.cumsum", "dense_voxel_map.cumsum.cumsum.cumsum", "mmdet.core.bbox3d.geometry.fused_get_anchors_area", "mmcv.parallel.DataContainer", "mmdet.datasets.utils.to_tensor", "mmdet.datasets.utils.to_tensor", "kitti.KittiLiDAR.anchors.astype", "numpy.logical_not", "range", "range", "numpy.ones", "voxels.astype", "tuple", "mmdet.datasets.utils.to_tensor", "mmdet.core.bbox3d.geometry.points_in_rbbox.any", "len", "len", "kitti.KittiLiDAR.class_names.index", "numpy.array", "len", "anchors_mask.astype", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti_utils.read_label", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.limit_period", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti_utils.project_rect_to_velo", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti_utils.read_lidar", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.point_cloud.point_augmentor.PointAugmentor.sample_all", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.points_in_rbbox", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.point_cloud.point_augmentor.PointAugmentor.noise_per_object_", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.point_cloud.point_augmentor.PointAugmentor.random_flip", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.point_cloud.point_augmentor.PointAugmentor.global_rotation", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.point_cloud.point_augmentor.PointAugmentor.global_scaling", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.filter_gt_box_outside_range", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.utils.to_tensor", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.utils.to_tensor", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.utils.to_tensor", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.utils.to_tensor", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.utils.to_tensor", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.sparse_sum_for_anchors_mask", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.fused_get_anchors_area", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.utils.to_tensor", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.utils.to_tensor", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.utils.to_tensor"], ["", "", "def", "prepare_train_img", "(", "self", ",", "idx", ")", ":", "\n", "        ", "sample_id", "=", "self", ".", "sample_ids", "[", "idx", "]", "\n", "\n", "# load image", "\n", "img", "=", "mmcv", ".", "imread", "(", "osp", ".", "join", "(", "self", ".", "img_prefix", ",", "'%06d.png'", "%", "sample_id", ")", ")", "\n", "\n", "img", ",", "img_shape", ",", "pad_shape", ",", "scale_factor", "=", "self", ".", "img_transform", "(", "img", ",", "1", ",", "False", ")", "\n", "\n", "objects", "=", "read_label", "(", "osp", ".", "join", "(", "self", ".", "label_prefix", ",", "'%06d.txt'", "%", "sample_id", ")", ")", "\n", "calib", "=", "Calibration", "(", "osp", ".", "join", "(", "self", ".", "calib_prefix", ",", "'%06d.txt'", "%", "sample_id", ")", ")", "\n", "\n", "gt_bboxes", "=", "[", "object", ".", "box3d", "for", "object", "in", "objects", "if", "object", ".", "type", "not", "in", "[", "\"DontCare\"", "]", "]", "\n", "gt_bboxes", "=", "np", ".", "array", "(", "gt_bboxes", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "gt_types", "=", "[", "object", ".", "type", "for", "object", "in", "objects", "if", "object", ".", "type", "not", "in", "[", "\"DontCare\"", "]", "]", "\n", "\n", "\n", "# transfer from cam to lidar coordinates", "\n", "if", "len", "(", "gt_bboxes", ")", "!=", "0", ":", "\n", "            ", "gt_bboxes", "[", ":", ",", ":", "3", "]", "=", "project_rect_to_velo", "(", "gt_bboxes", "[", ":", ",", ":", "3", "]", ",", "calib", ")", "\n", "\n", "", "img_meta", "=", "dict", "(", "\n", "img_shape", "=", "img_shape", ",", "\n", "sample_idx", "=", "sample_id", ",", "\n", "calib", "=", "calib", "\n", ")", "\n", "\n", "data", "=", "dict", "(", "\n", "img", "=", "to_tensor", "(", "img", ")", ",", "\n", "img_meta", "=", "DC", "(", "img_meta", ",", "cpu_only", "=", "True", ")", "\n", ")", "\n", "\n", "if", "self", ".", "anchors", "is", "not", "None", ":", "\n", "            ", "data", "[", "'anchors'", "]", "=", "DC", "(", "to_tensor", "(", "self", ".", "anchors", ".", "astype", "(", "np", ".", "float32", ")", ")", ")", "\n", "\n", "", "if", "self", ".", "with_mask", ":", "\n", "            ", "NotImplemented", "\n", "\n", "", "if", "self", ".", "with_point", ":", "\n", "            ", "points", "=", "read_lidar", "(", "osp", ".", "join", "(", "self", ".", "lidar_prefix", ",", "'%06d.bin'", "%", "sample_id", ")", ")", "\n", "\n", "", "if", "self", ".", "augmentor", "is", "not", "None", "and", "self", ".", "test_mode", "is", "False", ":", "\n", "            ", "sampled_gt_boxes", ",", "sampled_gt_types", ",", "sampled_points", "=", "self", ".", "augmentor", ".", "sample_all", "(", "gt_bboxes", ",", "gt_types", ")", "\n", "assert", "sampled_points", ".", "dtype", "==", "np", ".", "float32", "\n", "gt_bboxes", "=", "np", ".", "concatenate", "(", "[", "gt_bboxes", ",", "sampled_gt_boxes", "]", ")", "\n", "gt_types", "=", "gt_types", "+", "sampled_gt_types", "\n", "assert", "len", "(", "gt_types", ")", "==", "len", "(", "gt_bboxes", ")", "\n", "\n", "# to avoid overlapping point (option)", "\n", "masks", "=", "points_in_rbbox", "(", "points", ",", "sampled_gt_boxes", ")", "\n", "#masks = points_op_cpu.points_in_bbox3d_np(points[:,:3], sampled_gt_boxes)", "\n", "\n", "points", "=", "points", "[", "np", ".", "logical_not", "(", "masks", ".", "any", "(", "-", "1", ")", ")", "]", "\n", "\n", "# paste sampled points to the scene", "\n", "points", "=", "np", ".", "concatenate", "(", "[", "sampled_points", ",", "points", "]", ",", "axis", "=", "0", ")", "\n", "\n", "# select the interest classes", "\n", "selected", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "gt_types", ")", ")", "if", "gt_types", "[", "i", "]", "in", "self", ".", "class_names", "]", "\n", "gt_bboxes", "=", "gt_bboxes", "[", "selected", ",", ":", "]", "\n", "gt_types", "=", "[", "gt_types", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "gt_types", ")", ")", "if", "gt_types", "[", "i", "]", "in", "self", ".", "class_names", "]", "\n", "\n", "# force van to have same label as car", "\n", "gt_types", "=", "[", "'Car'", "if", "n", "==", "'Van'", "else", "n", "for", "n", "in", "gt_types", "]", "\n", "gt_labels", "=", "np", ".", "array", "(", "[", "self", ".", "class_names", ".", "index", "(", "n", ")", "+", "1", "for", "n", "in", "gt_types", "]", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n", "self", ".", "augmentor", ".", "noise_per_object_", "(", "gt_bboxes", ",", "points", ",", "num_try", "=", "100", ")", "\n", "gt_bboxes", ",", "points", "=", "self", ".", "augmentor", ".", "random_flip", "(", "gt_bboxes", ",", "points", ")", "\n", "gt_bboxes", ",", "points", "=", "self", ".", "augmentor", ".", "global_rotation", "(", "gt_bboxes", ",", "points", ")", "\n", "gt_bboxes", ",", "points", "=", "self", ".", "augmentor", ".", "global_scaling", "(", "gt_bboxes", ",", "points", ")", "\n", "\n", "", "if", "isinstance", "(", "self", ".", "generator", ",", "VoxelGenerator", ")", ":", "\n", "#voxels, coordinates, num_points = self.generator.generate(points)", "\n", "            ", "voxel_size", "=", "self", ".", "generator", ".", "voxel_size", "\n", "pc_range", "=", "self", ".", "generator", ".", "point_cloud_range", "\n", "grid_size", "=", "self", ".", "generator", ".", "grid_size", "\n", "\n", "keep", "=", "points_op_cpu", ".", "points_bound_kernel", "(", "points", ",", "pc_range", "[", ":", "3", "]", ",", "pc_range", "[", "3", ":", "]", ")", "\n", "voxels", "=", "points", "[", "keep", ",", ":", "]", "\n", "coordinates", "=", "(", "(", "voxels", "[", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "-", "np", ".", "array", "(", "pc_range", "[", "[", "2", ",", "1", ",", "0", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", ")", "/", "np", ".", "array", "(", "\n", "voxel_size", "[", ":", ":", "-", "1", "]", ",", "dtype", "=", "np", ".", "float32", ")", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "num_points", "=", "np", ".", "ones", "(", "len", "(", "keep", ")", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "data", "[", "'voxels'", "]", "=", "DC", "(", "to_tensor", "(", "voxels", ".", "astype", "(", "np", ".", "float32", ")", ")", ")", "\n", "data", "[", "'coordinates'", "]", "=", "DC", "(", "to_tensor", "(", "coordinates", ")", ")", "\n", "data", "[", "'num_points'", "]", "=", "DC", "(", "to_tensor", "(", "num_points", ")", ")", "\n", "\n", "if", "self", ".", "anchor_area_threshold", ">=", "0", "and", "self", ".", "anchors", "is", "not", "None", ":", "\n", "                ", "dense_voxel_map", "=", "sparse_sum_for_anchors_mask", "(", "\n", "coordinates", ",", "tuple", "(", "grid_size", "[", ":", ":", "-", "1", "]", "[", "1", ":", "]", ")", ")", "\n", "dense_voxel_map", "=", "dense_voxel_map", ".", "cumsum", "(", "0", ")", "\n", "dense_voxel_map", "=", "dense_voxel_map", ".", "cumsum", "(", "1", ")", "\n", "anchors_area", "=", "fused_get_anchors_area", "(", "\n", "dense_voxel_map", ",", "self", ".", "anchors_bv", ",", "voxel_size", ",", "pc_range", ",", "grid_size", ")", "\n", "anchors_mask", "=", "anchors_area", ">", "self", ".", "anchor_area_threshold", "\n", "data", "[", "'anchors_mask'", "]", "=", "DC", "(", "to_tensor", "(", "anchors_mask", ".", "astype", "(", "np", ".", "uint8", ")", ")", ")", "\n", "\n", "# filter gt_bbox out of range", "\n", "", "bv_range", "=", "self", ".", "generator", ".", "point_cloud_range", "[", "[", "0", ",", "1", ",", "3", ",", "4", "]", "]", "\n", "mask", "=", "filter_gt_box_outside_range", "(", "gt_bboxes", ",", "bv_range", ")", "\n", "gt_bboxes", "=", "gt_bboxes", "[", "mask", "]", "\n", "gt_labels", "=", "gt_labels", "[", "mask", "]", "\n", "\n", "", "else", ":", "\n", "            ", "NotImplementedError", "\n", "\n", "# skip the image if there is no valid gt bbox", "\n", "", "if", "len", "(", "gt_bboxes", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "\n", "# limit rad to [-pi, pi]", "\n", "", "gt_bboxes", "[", ":", ",", "6", "]", "=", "limit_period", "(", "\n", "gt_bboxes", "[", ":", ",", "6", "]", ",", "offset", "=", "0.5", ",", "period", "=", "2", "*", "np", ".", "pi", ")", "\n", "\n", "if", "self", ".", "with_label", ":", "\n", "            ", "data", "[", "'gt_labels'", "]", "=", "DC", "(", "to_tensor", "(", "gt_labels", ")", ")", "\n", "data", "[", "'gt_bboxes'", "]", "=", "DC", "(", "to_tensor", "(", "gt_bboxes", ")", ")", "\n", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti.KittiLiDAR.prepare_test_img": [[234, 315], ["mmcv.imread", "kitti.KittiLiDAR.img_transform", "mmdet.datasets.kitti_utils.Calibration", "dict", "dict", "isinstance", "os.join", "os.join", "os.join", "os.join", "mmdet.datasets.kitti_utils.read_label", "mmcv.parallel.DataContainer", "mmdet.datasets.kitti_utils.read_lidar", "mmdet.ops.points_op.points_op_cpu.points_bound_kernel", "numpy.ones().astype", "mmcv.parallel.DataContainer", "mmcv.parallel.DataContainer", "mmcv.parallel.DataContainer", "mmcv.parallel.DataContainer", "mmcv.parallel.DataContainer", "mmcv.parallel.DataContainer", "mmcv.parallel.DataContainer", "os.join", "os.join", "len", "numpy.array", "numpy.ones", "mmdet.datasets.kitti_utils.project_rect_to_velo", "mmdet.datasets.utils.to_tensor", "mmcv.parallel.DataContainer", "mmdet.datasets.utils.to_tensor", "os.join", "os.join", "mmdet.datasets.utils.to_tensor", "mmdet.datasets.utils.to_tensor", "mmdet.datasets.utils.to_tensor", "mmdet.core.bbox3d.geometry.sparse_sum_for_anchors_mask", "dense_voxel_map.cumsum.cumsum.cumsum", "dense_voxel_map.cumsum.cumsum.cumsum", "mmdet.core.bbox3d.geometry.fused_get_anchors_area", "mmcv.parallel.DataContainer", "mmdet.datasets.utils.to_tensor", "mmdet.datasets.utils.to_tensor", "len", "kitti.KittiLiDAR.anchors.astype", "numpy.ones", "voxels.astype", "tuple", "mmdet.datasets.utils.to_tensor", "numpy.array", "len", "anchors_mask.astype", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti_utils.read_label", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti_utils.read_lidar", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti_utils.project_rect_to_velo", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.utils.to_tensor", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.utils.to_tensor", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.utils.to_tensor", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.utils.to_tensor", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.utils.to_tensor", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.sparse_sum_for_anchors_mask", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.fused_get_anchors_area", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.utils.to_tensor", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.utils.to_tensor", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.utils.to_tensor"], ["", "def", "prepare_test_img", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"Prepare an image for testing (multi-scale and flipping)\"\"\"", "\n", "sample_id", "=", "self", ".", "sample_ids", "[", "idx", "]", "\n", "\n", "# load image", "\n", "img", "=", "mmcv", ".", "imread", "(", "osp", ".", "join", "(", "self", ".", "img_prefix", ",", "'%06d.png'", "%", "sample_id", ")", ")", "\n", "img", ",", "img_shape", ",", "pad_shape", ",", "scale_factor", "=", "self", ".", "img_transform", "(", "\n", "img", ",", "1", ",", "False", ")", "\n", "\n", "calib", "=", "Calibration", "(", "osp", ".", "join", "(", "self", ".", "calib_prefix", ",", "'%06d.txt'", "%", "sample_id", ")", ")", "\n", "\n", "if", "self", ".", "with_label", ":", "\n", "            ", "objects", "=", "read_label", "(", "osp", ".", "join", "(", "self", ".", "label_prefix", ",", "'%06d.txt'", "%", "sample_id", ")", ")", "\n", "gt_bboxes", "=", "[", "object", ".", "box3d", "for", "object", "in", "objects", "if", "object", ".", "type", "in", "self", ".", "class_name", "]", "\n", "\n", "if", "len", "(", "gt_bboxes", ")", "!=", "0", ":", "\n", "                ", "gt_bboxes", "=", "np", ".", "array", "(", "gt_bboxes", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "gt_labels", "=", "np", ".", "ones", "(", "len", "(", "gt_bboxes", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "# transfer from cam to lidar coordinates", "\n", "gt_bboxes", "[", ":", ",", ":", "3", "]", "=", "project_rect_to_velo", "(", "gt_bboxes", "[", ":", ",", ":", "3", "]", ",", "calib", ")", "\n", "", "else", ":", "\n", "                ", "gt_bboxes", "=", "None", "\n", "gt_labels", "=", "None", "\n", "\n", "", "", "img_meta", "=", "dict", "(", "\n", "img_shape", "=", "img_shape", ",", "\n", "sample_idx", "=", "sample_id", ",", "\n", "calib", "=", "calib", "\n", ")", "\n", "\n", "data", "=", "dict", "(", "\n", "img", "=", "to_tensor", "(", "img", ")", ",", "\n", "img_meta", "=", "DC", "(", "img_meta", ",", "cpu_only", "=", "True", ")", "\n", ")", "\n", "\n", "if", "self", ".", "anchors", "is", "not", "None", ":", "\n", "            ", "data", "[", "'anchors'", "]", "=", "DC", "(", "to_tensor", "(", "self", ".", "anchors", ".", "astype", "(", "np", ".", "float32", ")", ")", ")", "\n", "\n", "", "if", "self", ".", "with_mask", ":", "\n", "            ", "NotImplemented", "\n", "\n", "", "if", "self", ".", "with_point", ":", "\n", "            ", "points", "=", "read_lidar", "(", "osp", ".", "join", "(", "self", ".", "lidar_prefix", ",", "'%06d.bin'", "%", "sample_id", ")", ")", "\n", "\n", "\n", "", "if", "isinstance", "(", "self", ".", "generator", ",", "VoxelGenerator", ")", ":", "\n", "#voxels, coordinates, num_points = self.generator.generate(points)", "\n", "\n", "            ", "voxel_size", "=", "self", ".", "generator", ".", "voxel_size", "\n", "pc_range", "=", "self", ".", "generator", ".", "point_cloud_range", "\n", "grid_size", "=", "self", ".", "generator", ".", "grid_size", "\n", "\n", "keep", "=", "points_op_cpu", ".", "points_bound_kernel", "(", "points", ",", "pc_range", "[", ":", "3", "]", ",", "pc_range", "[", "3", ":", "]", ")", "\n", "voxels", "=", "points", "[", "keep", ",", ":", "]", "\n", "coordinates", "=", "(", "(", "voxels", "[", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "-", "np", ".", "array", "(", "pc_range", "[", "[", "2", ",", "1", ",", "0", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", ")", "/", "np", ".", "array", "(", "\n", "voxel_size", "[", ":", ":", "-", "1", "]", ",", "dtype", "=", "np", ".", "float32", ")", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "num_points", "=", "np", ".", "ones", "(", "len", "(", "keep", ")", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "data", "[", "'voxels'", "]", "=", "DC", "(", "to_tensor", "(", "voxels", ".", "astype", "(", "np", ".", "float32", ")", ")", ")", "\n", "data", "[", "'coordinates'", "]", "=", "DC", "(", "to_tensor", "(", "coordinates", ")", ")", "\n", "data", "[", "'num_points'", "]", "=", "DC", "(", "to_tensor", "(", "num_points", ")", ")", "\n", "\n", "if", "self", ".", "anchor_area_threshold", ">=", "0", "and", "self", ".", "anchors", "is", "not", "None", ":", "\n", "                ", "dense_voxel_map", "=", "sparse_sum_for_anchors_mask", "(", "\n", "coordinates", ",", "tuple", "(", "grid_size", "[", ":", ":", "-", "1", "]", "[", "1", ":", "]", ")", ")", "\n", "dense_voxel_map", "=", "dense_voxel_map", ".", "cumsum", "(", "0", ")", "\n", "dense_voxel_map", "=", "dense_voxel_map", ".", "cumsum", "(", "1", ")", "\n", "anchors_area", "=", "fused_get_anchors_area", "(", "\n", "dense_voxel_map", ",", "self", ".", "anchors_bv", ",", "voxel_size", ",", "pc_range", ",", "grid_size", ")", "\n", "anchors_mask", "=", "anchors_area", ">", "self", ".", "anchor_area_threshold", "\n", "data", "[", "'anchors_mask'", "]", "=", "DC", "(", "to_tensor", "(", "anchors_mask", ".", "astype", "(", "np", ".", "uint8", ")", ")", ")", "\n", "\n", "", "", "if", "self", ".", "with_label", ":", "\n", "            ", "data", "[", "'gt_labels'", "]", "=", "DC", "(", "to_tensor", "(", "gt_labels", ")", ",", "cpu_only", "=", "True", ")", "\n", "data", "[", "'gt_bboxes'", "]", "=", "DC", "(", "to_tensor", "(", "gt_bboxes", ")", ",", "cpu_only", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "data", "[", "'gt_labels'", "]", "=", "DC", "(", "None", ",", "cpu_only", "=", "True", ")", "\n", "data", "[", "'gt_bboxes'", "]", "=", "DC", "(", "None", ",", "cpu_only", "=", "True", ")", "\n", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti.KittiVideo.__init__": [[377, 393], ["kitti.KittiLiDAR.__init__", "mmdet.datasets.kitti_utils.Calibration", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "sorted", "sorted", "sorted", "list", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "map", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.path.splitext", "os.path.splitext", "os.path.splitext", "os.path.splitext", "os.listdir", "os.listdir", "os.listdir", "os.listdir"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["def", "__init__", "(", "self", ",", "img_dir", ",", "lidar_dir", ",", "calib_dir", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "KittiVideo", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "# self.calib = Calibration(os.path.join(self.root, calib_dir), from_video=True)", "\n", "self", ".", "calib", "=", "Calibration", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "calib_dir", ")", ")", "\n", "self", ".", "img_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "img_dir", ")", "\n", "self", ".", "lidar_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "lidar_dir", ")", "\n", "self", ".", "img_filenames", "=", "sorted", "(", "[", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "filename", ")", "for", "filename", "in", "os", ".", "listdir", "(", "self", ".", "img_dir", ")", "]", ")", "\n", "\n", "self", ".", "lidar_filenames", "=", "sorted", "(", "[", "os", ".", "path", ".", "join", "(", "self", ".", "lidar_dir", ",", "filename", ")", "for", "filename", "in", "os", ".", "listdir", "(", "self", ".", "lidar_dir", ")", "]", ")", "\n", "\n", "sample_ids", "=", "sorted", "(", "[", "os", ".", "path", ".", "splitext", "(", "filename", ")", "[", "0", "]", "for", "filename", "in", "os", ".", "listdir", "(", "self", ".", "img_dir", ")", "]", ")", "\n", "self", ".", "sample_ids", "=", "list", "(", "map", "(", "int", ",", "sample_ids", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti.KittiVideo.prepare_test_img": [[394, 454], ["mmcv.imread", "kitti.KittiVideo.img_transform", "dict", "dict", "isinstance", "mmcv.parallel.DataContainer", "mmcv.parallel.DataContainer", "mmcv.parallel.DataContainer", "mmdet.datasets.kitti_utils.read_lidar", "mmdet.ops.points_op.points_op_cpu.points_bound_kernel", "numpy.ones().astype", "mmcv.parallel.DataContainer", "mmcv.parallel.DataContainer", "mmcv.parallel.DataContainer", "mmdet.datasets.utils.to_tensor", "mmcv.parallel.DataContainer", "mmdet.datasets.utils.to_tensor", "mmdet.datasets.utils.to_tensor", "mmdet.datasets.utils.to_tensor", "mmdet.datasets.utils.to_tensor", "mmdet.core.bbox3d.geometry.sparse_sum_for_anchors_mask", "dense_voxel_map.cumsum.cumsum.cumsum", "dense_voxel_map.cumsum.cumsum.cumsum", "mmdet.core.bbox3d.geometry.fused_get_anchors_area", "mmcv.parallel.DataContainer", "kitti.KittiVideo.anchors.astype", "numpy.ones", "voxels.astype", "tuple", "mmdet.datasets.utils.to_tensor", "numpy.array", "len", "anchors_mask.astype", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti_utils.read_lidar", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.utils.to_tensor", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.utils.to_tensor", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.utils.to_tensor", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.utils.to_tensor", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.utils.to_tensor", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.sparse_sum_for_anchors_mask", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.fused_get_anchors_area", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.utils.to_tensor"], ["", "def", "prepare_test_img", "(", "self", ",", "idx", ")", ":", "\n", "        ", "sample_id", "=", "self", ".", "sample_ids", "[", "idx", "]", "\n", "\n", "# load image", "\n", "img", "=", "img", "=", "mmcv", ".", "imread", "(", "self", ".", "img_filenames", "[", "idx", "]", ")", "\n", "img", ",", "img_shape", ",", "pad_shape", ",", "scale_factor", "=", "self", ".", "img_transform", "(", "\n", "img", ",", "1", ",", "False", ")", "\n", "\n", "img_meta", "=", "dict", "(", "\n", "img_shape", "=", "img_shape", ",", "\n", "sample_idx", "=", "sample_id", ",", "\n", "calib", "=", "self", ".", "calib", "\n", ")", "\n", "\n", "data", "=", "dict", "(", "\n", "img", "=", "to_tensor", "(", "img", ")", ",", "\n", "img_meta", "=", "DC", "(", "img_meta", ",", "cpu_only", "=", "True", ")", "\n", ")", "\n", "\n", "if", "self", ".", "anchors", "is", "not", "None", ":", "\n", "            ", "data", "[", "'anchors'", "]", "=", "DC", "(", "to_tensor", "(", "self", ".", "anchors", ".", "astype", "(", "np", ".", "float32", ")", ")", ")", "\n", "\n", "", "if", "self", ".", "with_mask", ":", "\n", "            ", "NotImplemented", "\n", "\n", "", "if", "self", ".", "with_point", ":", "\n", "            ", "points", "=", "read_lidar", "(", "self", ".", "lidar_filenames", "[", "idx", "]", ")", "\n", "\n", "\n", "", "if", "isinstance", "(", "self", ".", "generator", ",", "VoxelGenerator", ")", ":", "\n", "#voxels, coordinates, num_points = self.generator.generate(points)", "\n", "\n", "            ", "voxel_size", "=", "self", ".", "generator", ".", "voxel_size", "\n", "pc_range", "=", "self", ".", "generator", ".", "point_cloud_range", "\n", "grid_size", "=", "self", ".", "generator", ".", "grid_size", "\n", "\n", "keep", "=", "points_op_cpu", ".", "points_bound_kernel", "(", "points", ",", "pc_range", "[", ":", "3", "]", ",", "pc_range", "[", "3", ":", "]", ")", "\n", "voxels", "=", "points", "[", "keep", ",", ":", "]", "\n", "coordinates", "=", "(", "(", "voxels", "[", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "-", "np", ".", "array", "(", "pc_range", "[", "[", "2", ",", "1", ",", "0", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", ")", "/", "np", ".", "array", "(", "\n", "voxel_size", "[", ":", ":", "-", "1", "]", ",", "dtype", "=", "np", ".", "float32", ")", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "num_points", "=", "np", ".", "ones", "(", "len", "(", "keep", ")", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "data", "[", "'voxels'", "]", "=", "DC", "(", "to_tensor", "(", "voxels", ".", "astype", "(", "np", ".", "float32", ")", ")", ")", "\n", "data", "[", "'coordinates'", "]", "=", "DC", "(", "to_tensor", "(", "coordinates", ")", ")", "\n", "data", "[", "'num_points'", "]", "=", "DC", "(", "to_tensor", "(", "num_points", ")", ")", "\n", "\n", "if", "self", ".", "anchor_area_threshold", ">=", "0", "and", "self", ".", "anchors", "is", "not", "None", ":", "\n", "                ", "dense_voxel_map", "=", "sparse_sum_for_anchors_mask", "(", "\n", "coordinates", ",", "tuple", "(", "grid_size", "[", ":", ":", "-", "1", "]", "[", "1", ":", "]", ")", ")", "\n", "dense_voxel_map", "=", "dense_voxel_map", ".", "cumsum", "(", "0", ")", "\n", "dense_voxel_map", "=", "dense_voxel_map", ".", "cumsum", "(", "1", ")", "\n", "anchors_area", "=", "fused_get_anchors_area", "(", "\n", "dense_voxel_map", ",", "self", ".", "anchors_bv", ",", "voxel_size", ",", "pc_range", ",", "grid_size", ")", "\n", "anchors_mask", "=", "anchors_area", ">", "self", ".", "anchor_area_threshold", "\n", "data", "[", "'anchors_mask'", "]", "=", "DC", "(", "to_tensor", "(", "anchors_mask", ".", "astype", "(", "np", ".", "uint8", ")", ")", ")", "\n", "\n", "", "", "data", "[", "'gt_labels'", "]", "=", "DC", "(", "None", ",", "cpu_only", "=", "True", ")", "\n", "data", "[", "'gt_bboxes'", "]", "=", "DC", "(", "None", ",", "cpu_only", "=", "True", ")", "\n", "\n", "return", "data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.concat_dataset.ConcatDataset.__init__": [[10, 21], ["torch.utils.data.dataset.ConcatDataset.__init__", "hasattr", "range", "numpy.concatenate", "len", "flags.append"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["def", "__init__", "(", "self", ",", "datasets", ")", ":", "\n", "        ", "\"\"\"\n        flag: Images with aspect ratio greater than 1 will be set as group 1,\n              otherwise group 0.\n        \"\"\"", "\n", "super", "(", "ConcatDataset", ",", "self", ")", ".", "__init__", "(", "datasets", ")", "\n", "if", "hasattr", "(", "datasets", "[", "0", "]", ",", "'flag'", ")", ":", "\n", "            ", "flags", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "datasets", ")", ")", ":", "\n", "                ", "flags", ".", "append", "(", "datasets", "[", "i", "]", ".", "flag", ")", "\n", "", "self", ".", "flag", "=", "np", ".", "concatenate", "(", "flags", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.utils.to_tensor": [[16, 37], ["isinstance", "isinstance", "torch.from_numpy", "isinstance", "isinstance", "mmcv.is_str", "utils.to_tensor", "torch.LongTensor", "isinstance", "torch.FloatTensor", "TypeError", "type"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.utils.to_tensor"], ["def", "to_tensor", "(", "data", ")", ":", "\n", "    ", "\"\"\"Convert objects of various python types to :obj:`torch.Tensor`.\n\n    Supported types are: :class:`numpy.ndarray`, :class:`torch.Tensor`,\n    :class:`Sequence`, :class:`int` and :class:`float`.\n    \"\"\"", "\n", "if", "isinstance", "(", "data", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "data", "\n", "", "elif", "isinstance", "(", "data", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "torch", ".", "from_numpy", "(", "data", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "Sequence", ")", "and", "not", "mmcv", ".", "is_str", "(", "data", ")", ":", "\n", "        ", "return", "[", "to_tensor", "(", "d", ")", "for", "d", "in", "data", "]", "\n", "", "elif", "isinstance", "(", "data", ",", "int", ")", ":", "\n", "        ", "return", "torch", ".", "LongTensor", "(", "[", "data", "]", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "float", ")", ":", "\n", "        ", "return", "torch", ".", "FloatTensor", "(", "[", "data", "]", ")", "\n", "", "elif", "data", "is", "None", ":", "\n", "        ", "return", "data", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "'type {} cannot be converted to tensor.'", ".", "format", "(", "\n", "type", "(", "data", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.utils.random_scale": [[39, 71], ["len", "numpy.random.randint", "numpy.random.randint", "ValueError", "max", "min", "min", "min", "numpy.random.randint", "max", "max", "numpy.random.randint"], "function", ["None"], ["", "", "def", "random_scale", "(", "img_scales", ",", "mode", "=", "'range'", ")", ":", "\n", "    ", "\"\"\"Randomly select a scale from a list of scales or scale ranges.\n\n    Args:\n        img_scales (list[tuple]): Image scale or scale range.\n        mode (str): \"range\" or \"value\".\n\n    Returns:\n        tuple: Sampled image scale.\n    \"\"\"", "\n", "num_scales", "=", "len", "(", "img_scales", ")", "\n", "if", "num_scales", "==", "1", ":", "# fixed scale is specified", "\n", "        ", "img_scale", "=", "img_scales", "[", "0", "]", "\n", "", "elif", "num_scales", "==", "2", ":", "# randomly sample a scale", "\n", "        ", "if", "mode", "==", "'range'", ":", "\n", "            ", "img_scale_long", "=", "[", "max", "(", "s", ")", "for", "s", "in", "img_scales", "]", "\n", "img_scale_short", "=", "[", "min", "(", "s", ")", "for", "s", "in", "img_scales", "]", "\n", "long_edge", "=", "np", ".", "random", ".", "randint", "(", "\n", "min", "(", "img_scale_long", ")", ",", "\n", "max", "(", "img_scale_long", ")", "+", "1", ")", "\n", "short_edge", "=", "np", ".", "random", ".", "randint", "(", "\n", "min", "(", "img_scale_short", ")", ",", "\n", "max", "(", "img_scale_short", ")", "+", "1", ")", "\n", "img_scale", "=", "(", "long_edge", ",", "short_edge", ")", "\n", "", "elif", "mode", "==", "'value'", ":", "\n", "            ", "img_scale", "=", "img_scales", "[", "np", ".", "random", ".", "randint", "(", "num_scales", ")", "]", "\n", "", "", "else", ":", "\n", "        ", "if", "mode", "!=", "'value'", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Only \"value\" mode supports more than 2 image scales'", ")", "\n", "", "img_scale", "=", "img_scales", "[", "np", ".", "random", ".", "randint", "(", "num_scales", ")", "]", "\n", "", "return", "img_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.utils.show_ann": [[73, 78], ["matplotlib.imshow", "matplotlib.axis", "coco.showAnns", "matplotlib.show", "mmcv.bgr2rgb"], "function", ["None"], ["", "def", "show_ann", "(", "coco", ",", "img", ",", "ann_info", ")", ":", "\n", "    ", "plt", ".", "imshow", "(", "mmcv", ".", "bgr2rgb", "(", "img", ")", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "coco", ".", "showAnns", "(", "ann_info", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.utils.get_dataset": [[80, 145], ["isinstance", "isinstance", "range", "len", "data_cfg.keys", "isinstance", "len", "len", "mmcv.runner.obj_from_dict", "mmcv.runner.obj_from_dict", "mmcv.runner.obj_from_dict", "mmcv.runner.obj_from_dict", "copy.deepcopy", "mmcv.runner.obj_from_dict", "dsets.append", "len", "concat_dataset.ConcatDataset", "data_cfg.keys", "data_cfg.keys", "data_cfg.keys", "data_cfg.keys"], "function", ["None"], ["", "def", "get_dataset", "(", "data_cfg", ")", ":", "\n", "\n", "    ", "if", "isinstance", "(", "data_cfg", "[", "'ann_file'", "]", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "ann_files", "=", "data_cfg", "[", "'ann_file'", "]", "\n", "num_dset", "=", "len", "(", "ann_files", ")", "\n", "", "else", ":", "\n", "        ", "ann_files", "=", "[", "data_cfg", "[", "'ann_file'", "]", "]", "\n", "num_dset", "=", "1", "\n", "\n", "", "if", "'proposal_file'", "in", "data_cfg", ".", "keys", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "data_cfg", "[", "'proposal_file'", "]", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "proposal_files", "=", "data_cfg", "[", "'proposal_file'", "]", "\n", "", "else", ":", "\n", "            ", "proposal_files", "=", "[", "data_cfg", "[", "'proposal_file'", "]", "]", "\n", "", "", "else", ":", "\n", "        ", "proposal_files", "=", "[", "None", "]", "*", "num_dset", "\n", "", "assert", "len", "(", "proposal_files", ")", "==", "num_dset", "\n", "\n", "if", "isinstance", "(", "data_cfg", "[", "'img_prefix'", "]", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "img_prefixes", "=", "data_cfg", "[", "'img_prefix'", "]", "\n", "", "else", ":", "\n", "        ", "img_prefixes", "=", "[", "data_cfg", "[", "'img_prefix'", "]", "]", "*", "num_dset", "\n", "", "assert", "len", "(", "img_prefixes", ")", "==", "num_dset", "\n", "\n", "if", "'generator'", "in", "data_cfg", ".", "keys", "(", ")", "and", "data_cfg", "[", "'generator'", "]", "is", "not", "None", ":", "\n", "        ", "generator", "=", "obj_from_dict", "(", "data_cfg", "[", "'generator'", "]", ",", "voxel_generator", ")", "\n", "", "else", ":", "\n", "        ", "generator", "=", "None", "\n", "\n", "", "if", "'augmentor'", "in", "data_cfg", ".", "keys", "(", ")", "and", "data_cfg", "[", "'augmentor'", "]", "is", "not", "None", ":", "\n", "        ", "augmentor", "=", "obj_from_dict", "(", "data_cfg", "[", "'augmentor'", "]", ",", "point_augmentor", ")", "\n", "", "else", ":", "\n", "        ", "augmentor", "=", "None", "\n", "\n", "", "if", "'anchor_generator'", "in", "data_cfg", ".", "keys", "(", ")", "and", "data_cfg", "[", "'anchor_generator'", "]", "is", "not", "None", ":", "\n", "        ", "anchor_generator", "=", "obj_from_dict", "(", "data_cfg", "[", "'anchor_generator'", "]", ",", "anchor3d_generator", ")", "\n", "", "else", ":", "\n", "        ", "anchor_generator", "=", "None", "\n", "\n", "", "if", "'target_encoder'", "in", "data_cfg", ".", "keys", "(", ")", "and", "data_cfg", "[", "'target_encoder'", "]", "is", "not", "None", ":", "\n", "        ", "target_encoder", "=", "obj_from_dict", "(", "data_cfg", "[", "'target_encoder'", "]", ",", "bbox3d_target", ")", "\n", "", "else", ":", "\n", "        ", "target_encoder", "=", "None", "\n", "\n", "", "dsets", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_dset", ")", ":", "\n", "        ", "data_info", "=", "copy", ".", "deepcopy", "(", "data_cfg", ")", "\n", "data_info", "[", "'ann_file'", "]", "=", "ann_files", "[", "i", "]", "\n", "data_info", "[", "'proposal_file'", "]", "=", "proposal_files", "[", "i", "]", "\n", "data_info", "[", "'img_prefix'", "]", "=", "img_prefixes", "[", "i", "]", "\n", "if", "generator", "is", "not", "None", ":", "\n", "            ", "data_info", "[", "'generator'", "]", "=", "generator", "\n", "", "if", "anchor_generator", "is", "not", "None", ":", "\n", "            ", "data_info", "[", "'anchor_generator'", "]", "=", "anchor_generator", "\n", "", "if", "augmentor", "is", "not", "None", ":", "\n", "            ", "data_info", "[", "'augmentor'", "]", "=", "augmentor", "\n", "", "if", "target_encoder", "is", "not", "None", ":", "\n", "            ", "data_info", "[", "'target_encoder'", "]", "=", "target_encoder", "\n", "", "dset", "=", "obj_from_dict", "(", "data_info", ",", "datasets", ")", "\n", "dsets", ".", "append", "(", "dset", ")", "\n", "", "if", "len", "(", "dsets", ")", ">", "1", ":", "\n", "        ", "dset", "=", "ConcatDataset", "(", "dsets", ")", "\n", "", "else", ":", "\n", "        ", "dset", "=", "dsets", "[", "0", "]", "\n", "", "return", "dset", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.voc.VOCDataset.__init__": [[11, 19], ["xml_style.XMLDataset.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "VOCDataset", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "if", "'VOC2007'", "in", "self", ".", "img_prefix", ":", "\n", "            ", "self", ".", "year", "=", "2007", "\n", "", "elif", "'VOC2012'", "in", "self", ".", "img_prefix", ":", "\n", "            ", "self", ".", "year", "=", "2012", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Cannot infer dataset year from img_prefix'", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.loader.sampler.GroupSampler.__init__": [[13, 23], ["hasattr", "dataset.flag.astype", "numpy.bincount", "enumerate", "int", "numpy.ceil"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "samples_per_gpu", "=", "1", ")", ":", "\n", "        ", "assert", "hasattr", "(", "dataset", ",", "'flag'", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "samples_per_gpu", "=", "samples_per_gpu", "\n", "self", ".", "flag", "=", "dataset", ".", "flag", ".", "astype", "(", "np", ".", "int64", ")", "\n", "self", ".", "group_sizes", "=", "np", ".", "bincount", "(", "self", ".", "flag", ")", "\n", "self", ".", "num_samples", "=", "0", "\n", "for", "i", ",", "size", "in", "enumerate", "(", "self", ".", "group_sizes", ")", ":", "\n", "            ", "self", ".", "num_samples", "+=", "int", "(", "np", ".", "ceil", "(", "\n", "size", "/", "self", ".", "samples_per_gpu", ")", ")", "*", "self", ".", "samples_per_gpu", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.loader.sampler.GroupSampler.__iter__": [[24, 46], ["enumerate", "numpy.concatenate", "numpy.concatenate", "torch.from_numpy().long", "iter", "numpy.random.shuffle", "numpy.concatenate", "torch.from_numpy().long.append", "len", "numpy.where", "len", "len", "numpy.random.permutation", "torch.from_numpy", "int", "range", "numpy.ceil", "len"], "methods", ["None"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "indices", "=", "[", "]", "\n", "for", "i", ",", "size", "in", "enumerate", "(", "self", ".", "group_sizes", ")", ":", "\n", "            ", "if", "size", "==", "0", ":", "\n", "                ", "continue", "\n", "", "indice", "=", "np", ".", "where", "(", "self", ".", "flag", "==", "i", ")", "[", "0", "]", "\n", "assert", "len", "(", "indice", ")", "==", "size", "\n", "np", ".", "random", ".", "shuffle", "(", "indice", ")", "\n", "num_extra", "=", "int", "(", "np", ".", "ceil", "(", "size", "/", "self", ".", "samples_per_gpu", ")", "\n", ")", "*", "self", ".", "samples_per_gpu", "-", "len", "(", "indice", ")", "\n", "indice", "=", "np", ".", "concatenate", "(", "[", "indice", ",", "indice", "[", ":", "num_extra", "]", "]", ")", "\n", "indices", ".", "append", "(", "indice", ")", "\n", "", "indices", "=", "np", ".", "concatenate", "(", "indices", ")", "\n", "indices", "=", "[", "\n", "indices", "[", "i", "*", "self", ".", "samples_per_gpu", ":", "(", "i", "+", "1", ")", "*", "self", ".", "samples_per_gpu", "]", "\n", "for", "i", "in", "np", ".", "random", ".", "permutation", "(", "\n", "range", "(", "len", "(", "indices", ")", "//", "self", ".", "samples_per_gpu", ")", ")", "\n", "]", "\n", "indices", "=", "np", ".", "concatenate", "(", "indices", ")", "\n", "indices", "=", "torch", ".", "from_numpy", "(", "indices", ")", ".", "long", "(", ")", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "num_samples", "\n", "return", "iter", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.loader.sampler.GroupSampler.__len__": [[47, 49], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.loader.sampler.DistributedGroupSampler.__init__": [[66, 91], ["hasattr", "numpy.bincount", "enumerate", "torch.distributed.get_world_size", "torch.distributed.get_rank", "int", "math.ceil"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "dataset", ",", "\n", "samples_per_gpu", "=", "1", ",", "\n", "num_replicas", "=", "None", ",", "\n", "rank", "=", "None", ")", ":", "\n", "        ", "if", "num_replicas", "is", "None", ":", "\n", "            ", "num_replicas", "=", "get_world_size", "(", ")", "\n", "", "if", "rank", "is", "None", ":", "\n", "            ", "rank", "=", "get_rank", "(", ")", "\n", "", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "samples_per_gpu", "=", "samples_per_gpu", "\n", "self", ".", "num_replicas", "=", "num_replicas", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "epoch", "=", "0", "\n", "\n", "assert", "hasattr", "(", "self", ".", "dataset", ",", "'flag'", ")", "\n", "self", ".", "flag", "=", "self", ".", "dataset", ".", "flag", "\n", "self", ".", "group_sizes", "=", "np", ".", "bincount", "(", "self", ".", "flag", ")", "\n", "\n", "self", ".", "num_samples", "=", "0", "\n", "for", "i", ",", "j", "in", "enumerate", "(", "self", ".", "group_sizes", ")", ":", "\n", "            ", "self", ".", "num_samples", "+=", "int", "(", "\n", "math", ".", "ceil", "(", "self", ".", "group_sizes", "[", "i", "]", "*", "1.0", "/", "self", ".", "samples_per_gpu", "/", "\n", "self", ".", "num_replicas", ")", ")", "*", "self", ".", "samples_per_gpu", "\n", "", "self", ".", "total_size", "=", "self", ".", "num_samples", "*", "self", ".", "num_replicas", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.loader.sampler.DistributedGroupSampler.__iter__": [[92, 127], ["torch.Generator", "torch.Generator.manual_seed", "enumerate", "iter", "len", "len", "indice[].tolist", "list", "range", "numpy.where", "len", "len", "torch.randperm", "int", "len", "list", "math.ceil", "torch.randperm", "int"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "# deterministically shuffle based on epoch", "\n", "        ", "g", "=", "torch", ".", "Generator", "(", ")", "\n", "g", ".", "manual_seed", "(", "self", ".", "epoch", ")", "\n", "\n", "indices", "=", "[", "]", "\n", "for", "i", ",", "size", "in", "enumerate", "(", "self", ".", "group_sizes", ")", ":", "\n", "            ", "if", "size", ">", "0", ":", "\n", "                ", "indice", "=", "np", ".", "where", "(", "self", ".", "flag", "==", "i", ")", "[", "0", "]", "\n", "assert", "len", "(", "indice", ")", "==", "size", "\n", "indice", "=", "indice", "[", "list", "(", "torch", ".", "randperm", "(", "int", "(", "size", ")", ",", "\n", "generator", "=", "g", ")", ")", "]", ".", "tolist", "(", ")", "\n", "extra", "=", "int", "(", "\n", "math", ".", "ceil", "(", "\n", "size", "*", "1.0", "/", "self", ".", "samples_per_gpu", "/", "self", ".", "num_replicas", ")", "\n", ")", "*", "self", ".", "samples_per_gpu", "*", "self", ".", "num_replicas", "-", "len", "(", "indice", ")", "\n", "indice", "+=", "indice", "[", ":", "extra", "]", "\n", "indices", "+=", "indice", "\n", "\n", "", "", "assert", "len", "(", "indices", ")", "==", "self", ".", "total_size", "\n", "\n", "indices", "=", "[", "\n", "indices", "[", "j", "]", "for", "i", "in", "list", "(", "\n", "torch", ".", "randperm", "(", "\n", "len", "(", "indices", ")", "//", "self", ".", "samples_per_gpu", ",", "generator", "=", "g", ")", ")", "\n", "for", "j", "in", "range", "(", "i", "*", "self", ".", "samples_per_gpu", ",", "(", "i", "+", "1", ")", "*", "\n", "self", ".", "samples_per_gpu", ")", "\n", "]", "\n", "\n", "# subsample", "\n", "offset", "=", "self", ".", "num_samples", "*", "self", ".", "rank", "\n", "indices", "=", "indices", "[", "offset", ":", "offset", "+", "self", ".", "num_samples", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "num_samples", "\n", "\n", "return", "iter", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.loader.sampler.DistributedGroupSampler.__len__": [[128, 130], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.loader.sampler.DistributedGroupSampler.set_epoch": [[131, 133], ["None"], "methods", ["None"], ["", "def", "set_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "epoch", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.loader.build_loader.build_dataloader": [[14, 44], ["torch.utils.data.DataLoader", "mmcv.runner.get_dist_info", "sampler.DistributedGroupSampler", "kwargs.get", "sampler.GroupSampler", "functools.partial"], "function", ["None"], ["def", "build_dataloader", "(", "dataset", ",", "\n", "imgs_per_gpu", ",", "\n", "workers_per_gpu", ",", "\n", "num_gpus", "=", "1", ",", "\n", "dist", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "if", "dist", ":", "\n", "        ", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "sampler", "=", "DistributedGroupSampler", "(", "dataset", ",", "imgs_per_gpu", ",", "world_size", ",", "\n", "rank", ")", "\n", "batch_size", "=", "imgs_per_gpu", "\n", "num_workers", "=", "workers_per_gpu", "\n", "", "else", ":", "\n", "        ", "if", "not", "kwargs", ".", "get", "(", "'shuffle'", ",", "True", ")", ":", "\n", "            ", "sampler", "=", "None", "\n", "", "else", ":", "\n", "            ", "sampler", "=", "GroupSampler", "(", "dataset", ",", "imgs_per_gpu", ")", "\n", "", "batch_size", "=", "num_gpus", "*", "imgs_per_gpu", "\n", "num_workers", "=", "num_gpus", "*", "workers_per_gpu", "\n", "\n", "", "data_loader", "=", "DataLoader", "(", "\n", "dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "sampler", "=", "sampler", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "collate_fn", "=", "partial", "(", "collate", ",", "samples_per_gpu", "=", "imgs_per_gpu", ")", ",", "\n", "pin_memory", "=", "False", ",", "\n", "**", "kwargs", ")", "\n", "\n", "return", "data_loader", "\n", "", ""]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.iou3d.iou3d_utils.RotateIou2dSimilarity.__call__": [[151, 153], ["iou3d_utils.boxes_iou_bev"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.iou3d.iou3d_utils.boxes_iou_bev"], ["def", "__call__", "(", "self", ",", "boxes1", ",", "boxes2", ")", ":", "\n", "        ", "return", "boxes_iou_bev", "(", "boxes1", ",", "boxes2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.iou3d.iou3d_utils.RotateIou3dSimilarity.__call__": [[159, 161], ["iou3d_utils.boxes_iou3d_gpu"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.iou3d.iou3d_utils.boxes_iou3d_gpu"], ["def", "__call__", "(", "self", ",", "boxes1", ",", "boxes2", ")", ":", "\n", "        ", "return", "boxes_iou3d_gpu", "(", "boxes1", ",", "boxes2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.iou3d.iou3d_utils.NearestIouSimilarity.__call__": [[170, 184], ["iou3d_utils.boxes3d_to_near_torch", "iou3d_utils.boxes3d_to_near_torch", "iou3d_utils.boxes_iou"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.iou3d.iou3d_utils.boxes3d_to_near_torch", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.iou3d.iou3d_utils.boxes3d_to_near_torch", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.iou3d.iou3d_utils.boxes_iou"], ["def", "__call__", "(", "self", ",", "boxes1", ",", "boxes2", ")", ":", "\n", "        ", "\"\"\"Compute matrix of (negated) sq distances.\n\n        Args:\n          boxlist1: BoxList holding N boxes.\n          boxlist2: BoxList holding M boxes.\n\n        Returns:\n          A tensor with shape [N, M] representing negated pairwise squared distance.\n        \"\"\"", "\n", "\n", "boxes1_near", "=", "boxes3d_to_near_torch", "(", "boxes1", ")", "\n", "boxes2_near", "=", "boxes3d_to_near_torch", "(", "boxes2", ")", "\n", "return", "boxes_iou", "(", "boxes1_near", ",", "boxes2_near", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.iou3d.iou3d_utils.limit_period": [[5, 7], ["torch.floor", "math.pi"], "function", ["None"], ["def", "limit_period", "(", "val", ",", "offset", "=", "0.5", ",", "period", "=", "math", ".", "pi", ")", ":", "\n", "    ", "return", "val", "-", "torch", ".", "floor", "(", "val", "/", "period", "+", "offset", ")", "*", "period", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.iou3d.iou3d_utils.boxes3d_to_near_torch": [[8, 23], ["torch.abs", "torch.where", "torch.cat", "iou3d_utils.limit_period"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.limit_period"], ["", "def", "boxes3d_to_near_torch", "(", "boxes3d", ")", ":", "\n", "    ", "rboxes", "=", "boxes3d", "[", ":", ",", "[", "0", ",", "1", ",", "3", ",", "4", ",", "6", "]", "]", "\n", "\"\"\"convert rotated bbox to nearest 'standing' or 'lying' bbox.\n    Args:\n        rboxes: [N, 5(x, y, xdim, ydim, rad)] rotated bboxes\n    Returns:\n        boxes_near: [N, 4(xmin, ymin, xmax, ymax)] nearest boxes\n    \"\"\"", "\n", "rots", "=", "rboxes", "[", "...", ",", "-", "1", "]", "\n", "rots_0_pi_div_2", "=", "torch", ".", "abs", "(", "limit_period", "(", "rots", ",", "0.5", ",", "math", ".", "pi", ")", ")", "\n", "cond", "=", "(", "rots_0_pi_div_2", ">", "math", ".", "pi", "/", "4", ")", "[", "...", ",", "None", "]", "\n", "boxes_center", "=", "torch", ".", "where", "(", "cond", ",", "rboxes", "[", ":", ",", "[", "0", ",", "1", ",", "3", ",", "2", "]", "]", ",", "rboxes", "[", ":", ",", ":", "4", "]", ")", "\n", "boxes_near", "=", "torch", ".", "cat", "(", "[", "boxes_center", "[", ":", ",", ":", "2", "]", "-", "boxes_center", "[", ":", ",", "2", ":", "]", "/", "2", ",", "boxes_center", "[", ":", ",", ":", "2", "]", "+", "boxes_center", "[", ":", ",", "2", ":", "]", "/", "2", "]", ",", "dim", "=", "-", "1", ")", "\n", "return", "boxes_near", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.iou3d.iou3d_utils.boxes_iou": [[24, 46], ["bboxes1.size", "bboxes2.size", "torch.max", "torch.min", "bboxes1.new"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.OptimWrapper.new"], ["", "def", "boxes_iou", "(", "bboxes1", ",", "bboxes2", ",", "mode", "=", "'iou'", ",", "eps", "=", "0.0", ")", ":", "\n", "    ", "assert", "mode", "in", "[", "'iou'", ",", "'iof'", "]", "\n", "\n", "rows", "=", "bboxes1", ".", "size", "(", "0", ")", "\n", "cols", "=", "bboxes2", ".", "size", "(", "0", ")", "\n", "\n", "if", "rows", "*", "cols", "==", "0", ":", "\n", "        ", "return", "bboxes1", ".", "new", "(", "rows", ",", "cols", ")", "\n", "\n", "", "lt", "=", "torch", ".", "max", "(", "bboxes1", "[", ":", ",", "None", ",", ":", "2", "]", ",", "bboxes2", "[", ":", ",", ":", "2", "]", ")", "# [rows, cols, 2]", "\n", "rb", "=", "torch", ".", "min", "(", "bboxes1", "[", ":", ",", "None", ",", "2", ":", "]", ",", "bboxes2", "[", ":", ",", "2", ":", "]", ")", "# [rows, cols, 2]", "\n", "wh", "=", "(", "rb", "-", "lt", "+", "eps", ")", ".", "clamp", "(", "min", "=", "0", ")", "# [rows, cols, 2]", "\n", "overlap", "=", "wh", "[", ":", ",", ":", ",", "0", "]", "*", "wh", "[", ":", ",", ":", ",", "1", "]", "\n", "area1", "=", "(", "bboxes1", "[", ":", ",", "2", "]", "-", "bboxes1", "[", ":", ",", "0", "]", "+", "eps", ")", "*", "(", "\n", "bboxes1", "[", ":", ",", "3", "]", "-", "bboxes1", "[", ":", ",", "1", "]", "+", "eps", ")", "\n", "if", "mode", "==", "'iou'", ":", "\n", "        ", "area2", "=", "(", "bboxes2", "[", ":", ",", "2", "]", "-", "bboxes2", "[", ":", ",", "0", "]", "+", "eps", ")", "*", "(", "\n", "bboxes2", "[", ":", ",", "3", "]", "-", "bboxes2", "[", ":", ",", "1", "]", "+", "eps", ")", "\n", "ious", "=", "overlap", "/", "(", "area1", "[", ":", ",", "None", "]", "+", "area2", "-", "overlap", ")", "\n", "", "else", ":", "\n", "        ", "ious", "=", "overlap", "/", "(", "area1", "[", ":", ",", "None", "]", ")", "\n", "", "return", "ious", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.iou3d.iou3d_utils.boxes3d_to_bev_torch": [[4, 18], ["boxes3d.new", "torch.Size"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.OptimWrapper.new"], ["\n", "def", "limit_period", "(", "val", ",", "offset", "=", "0.5", ",", "period", "=", "math", ".", "pi", ")", ":", "\n", "    ", "return", "val", "-", "torch", ".", "floor", "(", "val", "/", "period", "+", "offset", ")", "*", "period", "\n", "\n", "", "def", "boxes3d_to_near_torch", "(", "boxes3d", ")", ":", "\n", "    ", "rboxes", "=", "boxes3d", "[", ":", ",", "[", "0", ",", "1", ",", "3", ",", "4", ",", "6", "]", "]", "\n", "\"\"\"convert rotated bbox to nearest 'standing' or 'lying' bbox.\n    Args:\n        rboxes: [N, 5(x, y, xdim, ydim, rad)] rotated bboxes\n    Returns:\n        boxes_near: [N, 4(xmin, ymin, xmax, ymax)] nearest boxes\n    \"\"\"", "\n", "rots", "=", "rboxes", "[", "...", ",", "-", "1", "]", "\n", "rots_0_pi_div_2", "=", "torch", ".", "abs", "(", "limit_period", "(", "rots", ",", "0.5", ",", "math", ".", "pi", ")", ")", "\n", "cond", "=", "(", "rots_0_pi_div_2", ">", "math", ".", "pi", "/", "4", ")", "[", "...", ",", "None", "]", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.iou3d.iou3d_utils.boxes_iou_bev": [[62, 77], ["iou3d_utils.boxes3d_to_bev_torch", "iou3d_utils.boxes3d_to_bev_torch", "torch.cuda.FloatTensor().zero_", "mmdet.boxes_iou_bev_gpu", "boxes3d_to_bev_torch.contiguous", "boxes3d_to_bev_torch.contiguous", "torch.cuda.FloatTensor", "torch.Size"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.iou3d.iou3d_utils.boxes3d_to_bev_torch", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.iou3d.iou3d_utils.boxes3d_to_bev_torch"], ["", "def", "boxes_iou_bev", "(", "boxes_a", ",", "boxes_b", ")", ":", "\n", "    ", "\"\"\"\n    :param boxes_a: (M, 5)\n    :param boxes_b: (N, 5)\n    :return:\n        ans_iou: (M, N)\n    \"\"\"", "\n", "boxes_a_bev", "=", "boxes3d_to_bev_torch", "(", "boxes_a", ")", "\n", "boxes_b_bev", "=", "boxes3d_to_bev_torch", "(", "boxes_b", ")", "\n", "\n", "ans_iou", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "torch", ".", "Size", "(", "(", "boxes_a_bev", ".", "shape", "[", "0", "]", ",", "boxes_b_bev", ".", "shape", "[", "0", "]", ")", ")", ")", ".", "zero_", "(", ")", "\n", "\n", "iou3d_cuda", ".", "boxes_iou_bev_gpu", "(", "boxes_a_bev", ".", "contiguous", "(", ")", ",", "boxes_b_bev", ".", "contiguous", "(", ")", ",", "ans_iou", ")", "\n", "\n", "return", "ans_iou", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.iou3d.iou3d_utils.boxes_iou3d_gpu": [[19, 52], ["iou3d_utils.boxes3d_to_bev_torch", "iou3d_utils.boxes3d_to_bev_torch", "torch.cuda.FloatTensor().zero_", "iou3d_cuda.boxes_overlap_bev_gpu", "boxes_a[].view", "boxes_b[].view", "torch.max", "torch.min", "torch.clamp", "boxes3d_to_bev_torch.contiguous", "boxes3d_to_bev_torch.contiguous", "torch.clamp", "torch.cuda.FloatTensor", "torch.Size"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.iou3d.iou3d_utils.boxes3d_to_bev_torch", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.iou3d.iou3d_utils.boxes3d_to_bev_torch"], ["boxes_center", "=", "torch", ".", "where", "(", "cond", ",", "rboxes", "[", ":", ",", "[", "0", ",", "1", ",", "3", ",", "2", "]", "]", ",", "rboxes", "[", ":", ",", ":", "4", "]", ")", "\n", "boxes_near", "=", "torch", ".", "cat", "(", "[", "boxes_center", "[", ":", ",", ":", "2", "]", "-", "boxes_center", "[", ":", ",", "2", ":", "]", "/", "2", ",", "boxes_center", "[", ":", ",", ":", "2", "]", "+", "boxes_center", "[", ":", ",", "2", ":", "]", "/", "2", "]", ",", "dim", "=", "-", "1", ")", "\n", "return", "boxes_near", "\n", "\n", "", "def", "boxes_iou", "(", "bboxes1", ",", "bboxes2", ",", "mode", "=", "'iou'", ",", "eps", "=", "0.0", ")", ":", "\n", "    ", "assert", "mode", "in", "[", "'iou'", ",", "'iof'", "]", "\n", "\n", "rows", "=", "bboxes1", ".", "size", "(", "0", ")", "\n", "cols", "=", "bboxes2", ".", "size", "(", "0", ")", "\n", "\n", "if", "rows", "*", "cols", "==", "0", ":", "\n", "        ", "return", "bboxes1", ".", "new", "(", "rows", ",", "cols", ")", "\n", "\n", "", "lt", "=", "torch", ".", "max", "(", "bboxes1", "[", ":", ",", "None", ",", ":", "2", "]", ",", "bboxes2", "[", ":", ",", ":", "2", "]", ")", "# [rows, cols, 2]", "\n", "rb", "=", "torch", ".", "min", "(", "bboxes1", "[", ":", ",", "None", ",", "2", ":", "]", ",", "bboxes2", "[", ":", ",", "2", ":", "]", ")", "# [rows, cols, 2]", "\n", "wh", "=", "(", "rb", "-", "lt", "+", "eps", ")", ".", "clamp", "(", "min", "=", "0", ")", "# [rows, cols, 2]", "\n", "overlap", "=", "wh", "[", ":", ",", ":", ",", "0", "]", "*", "wh", "[", ":", ",", ":", ",", "1", "]", "\n", "area1", "=", "(", "bboxes1", "[", ":", ",", "2", "]", "-", "bboxes1", "[", ":", ",", "0", "]", "+", "eps", ")", "*", "(", "\n", "bboxes1", "[", ":", ",", "3", "]", "-", "bboxes1", "[", ":", ",", "1", "]", "+", "eps", ")", "\n", "if", "mode", "==", "'iou'", ":", "\n", "        ", "area2", "=", "(", "bboxes2", "[", ":", ",", "2", "]", "-", "bboxes2", "[", ":", ",", "0", "]", "+", "eps", ")", "*", "(", "\n", "bboxes2", "[", ":", ",", "3", "]", "-", "bboxes2", "[", ":", ",", "1", "]", "+", "eps", ")", "\n", "ious", "=", "overlap", "/", "(", "area1", "[", ":", ",", "None", "]", "+", "area2", "-", "overlap", ")", "\n", "", "else", ":", "\n", "        ", "ious", "=", "overlap", "/", "(", "area1", "[", ":", ",", "None", "]", ")", "\n", "", "return", "ious", "\n", "\n", "", "def", "boxes3d_to_bev_torch", "(", "boxes3d", ")", ":", "\n", "    ", "\"\"\"\n    :param boxes3d: (N, 7) [x, y, z, h, w, l, ry]\n    :return:\n        boxes_bev: (N, 5) [x1, y1, x2, y2, ry]\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.iou3d.iou3d_utils.nms_gpu": [[114, 129], ["boxes[].contiguous", "torch.LongTensor", "mmdet.nms_gpu", "order[].contiguous", "scores.sort", "boxes[].contiguous.size", "keep[].cuda"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.nms_gpu"], ["", "def", "nms_gpu", "(", "boxes", ",", "scores", ",", "thresh", ")", ":", "\n", "    ", "\"\"\"\n    :param boxes: (N, 5) [x1, y1, x2, y2, ry]\n    :param scores: (N)\n    :param thresh:\n    :return:\n    \"\"\"", "\n", "# areas = (x2 - x1) * (y2 - y1)", "\n", "order", "=", "scores", ".", "sort", "(", "0", ",", "descending", "=", "True", ")", "[", "1", "]", "\n", "\n", "boxes", "=", "boxes", "[", "order", "]", ".", "contiguous", "(", ")", "\n", "\n", "keep", "=", "torch", ".", "LongTensor", "(", "boxes", ".", "size", "(", "0", ")", ")", "\n", "num_out", "=", "iou3d_cuda", ".", "nms_gpu", "(", "boxes", ",", "keep", ",", "thresh", ")", "\n", "return", "order", "[", "keep", "[", ":", "num_out", "]", ".", "cuda", "(", ")", "]", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.iou3d.iou3d_utils.nms_normal_gpu": [[130, 145], ["boxes[].contiguous", "torch.LongTensor", "mmdet.nms_normal_gpu", "order[].contiguous", "scores.sort", "boxes[].contiguous.size", "keep[].cuda"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.iou3d.iou3d_utils.nms_normal_gpu"], ["", "def", "nms_normal_gpu", "(", "boxes", ",", "scores", ",", "thresh", ")", ":", "\n", "    ", "\"\"\"\n    :param boxes: (N, 5) [x1, y1, x2, y2, ry]\n    :param scores: (N)\n    :param thresh:\n    :return:\n    \"\"\"", "\n", "# areas = (x2 - x1) * (y2 - y1)", "\n", "order", "=", "scores", ".", "sort", "(", "0", ",", "descending", "=", "True", ")", "[", "1", "]", "\n", "\n", "boxes", "=", "boxes", "[", "order", "]", ".", "contiguous", "(", ")", "\n", "\n", "keep", "=", "torch", ".", "LongTensor", "(", "boxes", ".", "size", "(", "0", ")", ")", "\n", "num_out", "=", "iou3d_cuda", ".", "nms_normal_gpu", "(", "boxes", ",", "keep", ",", "thresh", ")", "\n", "return", "order", "[", "keep", "[", ":", "num_out", "]", ".", "cuda", "(", ")", "]", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.pointnet2.pointnet2_utils.ThreeNN.forward": [[11, 32], ["unknown.is_contiguous", "known.is_contiguous", "unknown.size", "known.size", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.IntTensor", "torch.cuda.IntTensor", "torch.cuda.IntTensor", "torch.cuda.IntTensor", "mmdet.three_nn_wrapper", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "unknown", ":", "torch", ".", "Tensor", ",", "known", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        Find the three nearest neighbors of unknown in known\n        :param ctx:\n        :param unknown: (N, 3)\n        :param known: (M, 3)\n        :return:\n            dist: (N, 3) l2 distance to the three nearest neighbors\n            idx: (N, 3) index of 3 nearest neighbors\n        \"\"\"", "\n", "assert", "unknown", ".", "is_contiguous", "(", ")", "\n", "assert", "known", ".", "is_contiguous", "(", ")", "\n", "\n", "N", ",", "_", "=", "unknown", ".", "size", "(", ")", "\n", "m", "=", "known", ".", "size", "(", "0", ")", "\n", "dist2", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "N", ",", "3", ")", "\n", "idx", "=", "torch", ".", "cuda", ".", "IntTensor", "(", "N", ",", "3", ")", "\n", "\n", "pointnet2", ".", "three_nn_wrapper", "(", "N", ",", "m", ",", "unknown", ",", "known", ",", "dist2", ",", "idx", ")", "\n", "return", "torch", ".", "sqrt", "(", "dist2", ")", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.pointnet2.pointnet2_utils.ThreeNN.backward": [[33, 36], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "a", "=", "None", ",", "b", "=", "None", ")", ":", "\n", "        ", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.pointnet2.pointnet2_utils.ThreeInterpolate.forward": [[43, 65], ["features.is_contiguous", "idx.is_contiguous", "weight.is_contiguous", "features.size", "idx.size", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "mmdet.three_interpolate_wrapper"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "features", ":", "torch", ".", "Tensor", ",", "idx", ":", "torch", ".", "Tensor", ",", "weight", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Performs weight linear interpolation on 3 features\n        :param ctx:\n        :param features: (M, C) Features descriptors to be interpolated from\n        :param idx: (n, 3) three nearest neighbors of the target features in features\n        :param weight: (n, 3) weights\n        :return:\n            output: (N, C) tensor of the interpolated features\n        \"\"\"", "\n", "assert", "features", ".", "is_contiguous", "(", ")", "\n", "assert", "idx", ".", "is_contiguous", "(", ")", "\n", "assert", "weight", ".", "is_contiguous", "(", ")", "\n", "\n", "m", ",", "c", "=", "features", ".", "size", "(", ")", "\n", "n", "=", "idx", ".", "size", "(", "0", ")", "\n", "ctx", ".", "three_interpolate_for_backward", "=", "(", "idx", ",", "weight", ",", "m", ")", "\n", "output", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "n", ",", "c", ")", "\n", "\n", "pointnet2", ".", "three_interpolate_wrapper", "(", "c", ",", "m", ",", "n", ",", "features", ",", "idx", ",", "weight", ",", "output", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.pointnet2.pointnet2_utils.ThreeInterpolate.backward": [[66, 84], ["grad_out.size", "torch.autograd.Variable", "torch.autograd.Variable", "grad_out.data.contiguous", "mmdet.three_interpolate_grad_wrapper", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_out", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        :param ctx:\n        :param grad_out: (N, C) tensor with gradients of outputs\n        :return:\n            grad_features: (M, C) tensor with gradients of features\n            None:\n            None:\n        \"\"\"", "\n", "idx", ",", "weight", ",", "m", "=", "ctx", ".", "three_interpolate_for_backward", "\n", "n", ",", "c", "=", "grad_out", ".", "size", "(", ")", "\n", "\n", "grad_features", "=", "Variable", "(", "torch", ".", "cuda", ".", "FloatTensor", "(", "m", ",", "c", ")", ".", "zero_", "(", ")", ")", "\n", "grad_out_data", "=", "grad_out", ".", "data", ".", "contiguous", "(", ")", "\n", "\n", "pointnet2", ".", "three_interpolate_grad_wrapper", "(", "c", ",", "n", ",", "m", ",", "grad_out_data", ",", "idx", ",", "weight", ",", "grad_features", ".", "data", ")", "\n", "return", "grad_features", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.points_op.setup.get_pybind_include.__init__": [[10, 12], ["None"], "methods", ["None"], ["]", ",", "\n", "extra_compile_args", "=", "{", "'cxx'", ":", "[", "'-g'", "]", ",", "\n", "'nvcc'", ":", "[", "'-O2'", "]", "}", ")", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.points_op.setup.get_pybind_include.__str__": [[13, 16], ["pybind11.get_include"], "methods", ["None"], ["]", ",", "\n", "cmdclass", "=", "{", "'build_ext'", ":", "BuildExtension", "}", ")", "\n", ""]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.points_op.__init__.pts_in_boxes3d": [[5, 12], ["len", "len", "torch.IntTensor().fill_", "torch.FloatTensor().fill_", "mmdet.ops.points_op.points_op_cpu.pts_in_boxes3d", "pts.contiguous", "boxes3d.contiguous", "torch.IntTensor", "torch.FloatTensor"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.points_op.__init__.pts_in_boxes3d"], []], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.points_op.points_ops._points_to_voxel_reverse_kernel": [[4, 51], ["numba.jit", "numpy.round().astype", "numpy.zeros", "range", "range", "numpy.round", "numpy.floor"], "function", ["None"], ["@", "numba", ".", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "_points_to_voxel_reverse_kernel", "(", "points", ",", "\n", "voxel_size", ",", "\n", "coors_range", ",", "\n", "num_points_per_voxel", ",", "\n", "coor_to_voxelidx", ",", "\n", "voxels", ",", "\n", "coors", ",", "\n", "max_points", "=", "35", ",", "\n", "max_voxels", "=", "20000", ")", ":", "\n", "# put all computations to one loop.", "\n", "# we shouldn't create large array in main jit code, otherwise", "\n", "# reduce performance", "\n", "    ", "N", "=", "points", ".", "shape", "[", "0", "]", "\n", "# ndim = points.shape[1] - 1", "\n", "ndim", "=", "3", "\n", "ndim_minus_1", "=", "ndim", "-", "1", "\n", "grid_size", "=", "(", "coors_range", "[", "3", ":", "]", "-", "coors_range", "[", ":", "3", "]", ")", "/", "voxel_size", "\n", "# np.round(grid_size)", "\n", "# grid_size = np.round(grid_size).astype(np.int64)(np.int32)", "\n", "grid_size", "=", "np", ".", "round", "(", "grid_size", ",", "0", ",", "grid_size", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "coor", "=", "np", ".", "zeros", "(", "shape", "=", "(", "3", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "voxel_num", "=", "0", "\n", "failed", "=", "False", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "failed", "=", "False", "\n", "for", "j", "in", "range", "(", "ndim", ")", ":", "\n", "            ", "c", "=", "np", ".", "floor", "(", "(", "points", "[", "i", ",", "j", "]", "-", "coors_range", "[", "j", "]", ")", "/", "voxel_size", "[", "j", "]", ")", "\n", "if", "c", "<", "0", "or", "c", ">=", "grid_size", "[", "j", "]", ":", "\n", "                ", "failed", "=", "True", "\n", "break", "\n", "", "coor", "[", "ndim_minus_1", "-", "j", "]", "=", "c", "\n", "", "if", "failed", ":", "\n", "            ", "continue", "\n", "", "voxelidx", "=", "coor_to_voxelidx", "[", "coor", "[", "0", "]", ",", "coor", "[", "1", "]", ",", "coor", "[", "2", "]", "]", "\n", "if", "voxelidx", "==", "-", "1", ":", "\n", "            ", "voxelidx", "=", "voxel_num", "\n", "if", "voxel_num", ">=", "max_voxels", ":", "\n", "                ", "break", "\n", "", "voxel_num", "+=", "1", "\n", "coor_to_voxelidx", "[", "coor", "[", "0", "]", ",", "coor", "[", "1", "]", ",", "coor", "[", "2", "]", "]", "=", "voxelidx", "\n", "coors", "[", "voxelidx", "]", "=", "coor", "\n", "", "num", "=", "num_points_per_voxel", "[", "voxelidx", "]", "\n", "if", "num", "<", "max_points", ":", "\n", "            ", "voxels", "[", "voxelidx", ",", "num", "]", "=", "points", "[", "i", "]", "\n", "num_points_per_voxel", "[", "voxelidx", "]", "+=", "1", "\n", "", "", "return", "voxel_num", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.points_op.points_ops._points_to_voxel_kernel": [[52, 102], ["numba.jit", "numpy.round().astype", "numpy.zeros", "range", "range", "numpy.round", "numpy.floor"], "function", ["None"], ["", "@", "numba", ".", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "_points_to_voxel_kernel", "(", "points", ",", "\n", "voxel_size", ",", "\n", "coors_range", ",", "\n", "num_points_per_voxel", ",", "\n", "coor_to_voxelidx", ",", "\n", "voxels", ",", "\n", "coors", ",", "\n", "max_points", "=", "35", ",", "\n", "max_voxels", "=", "20000", ")", ":", "\n", "# need mutex if write in cuda, but numba.cuda don't support mutex.", "\n", "# in addition, pytorch don't support cuda in dataloader(tensorflow support this).", "\n", "# put all computations to one loop.", "\n", "# we shouldn't create large array in main jit code, otherwise", "\n", "# decrease performance", "\n", "    ", "N", "=", "points", ".", "shape", "[", "0", "]", "\n", "# ndim = points.shape[1] - 1", "\n", "ndim", "=", "3", "\n", "grid_size", "=", "(", "coors_range", "[", "3", ":", "]", "-", "coors_range", "[", ":", "3", "]", ")", "/", "voxel_size", "\n", "# grid_size = np.round(grid_size).astype(np.int64)(np.int32)", "\n", "grid_size", "=", "np", ".", "round", "(", "grid_size", ",", "0", ",", "grid_size", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "lower_bound", "=", "coors_range", "[", ":", "3", "]", "\n", "upper_bound", "=", "coors_range", "[", "3", ":", "]", "\n", "coor", "=", "np", ".", "zeros", "(", "shape", "=", "(", "3", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "voxel_num", "=", "0", "\n", "failed", "=", "False", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "failed", "=", "False", "\n", "for", "j", "in", "range", "(", "ndim", ")", ":", "\n", "            ", "c", "=", "np", ".", "floor", "(", "(", "points", "[", "i", ",", "j", "]", "-", "coors_range", "[", "j", "]", ")", "/", "voxel_size", "[", "j", "]", ")", "\n", "if", "c", "<", "0", "or", "c", ">=", "grid_size", "[", "j", "]", ":", "\n", "                ", "failed", "=", "True", "\n", "break", "\n", "", "coor", "[", "j", "]", "=", "c", "\n", "", "if", "failed", ":", "\n", "            ", "continue", "\n", "", "voxelidx", "=", "coor_to_voxelidx", "[", "coor", "[", "0", "]", ",", "coor", "[", "1", "]", ",", "coor", "[", "2", "]", "]", "\n", "if", "voxelidx", "==", "-", "1", ":", "\n", "            ", "voxelidx", "=", "voxel_num", "\n", "if", "voxel_num", ">=", "max_voxels", ":", "\n", "                ", "break", "\n", "", "voxel_num", "+=", "1", "\n", "coor_to_voxelidx", "[", "coor", "[", "0", "]", ",", "coor", "[", "1", "]", ",", "coor", "[", "2", "]", "]", "=", "voxelidx", "\n", "coors", "[", "voxelidx", "]", "=", "coor", "\n", "", "num", "=", "num_points_per_voxel", "[", "voxelidx", "]", "\n", "if", "num", "<", "max_points", ":", "\n", "            ", "voxels", "[", "voxelidx", ",", "num", "]", "=", "points", "[", "i", "]", "\n", "num_points_per_voxel", "[", "voxelidx", "]", "+=", "1", "\n", "", "", "return", "voxel_num", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.points_op.points_ops.points_to_voxel": [[104, 165], ["tuple", "numpy.zeros", "numpy.zeros", "numpy.zeros", "isinstance", "numpy.array", "isinstance", "numpy.array", "numpy.round().astype().tolist", "numpy.ones", "points_ops._points_to_voxel_reverse_kernel", "points_ops._points_to_voxel_kernel", "numpy.round().astype", "numpy.round"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.points_op.points_ops._points_to_voxel_reverse_kernel", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.points_op.points_ops._points_to_voxel_kernel"], ["", "def", "points_to_voxel", "(", "points", ",", "\n", "voxel_size", ",", "\n", "coors_range", ",", "\n", "max_points", "=", "35", ",", "\n", "reverse_index", "=", "True", ",", "\n", "max_voxels", "=", "20000", ")", ":", "\n", "    ", "\"\"\"convert kitti points(N, >=3) to voxels. This version calculate\n    everything in one loop. now it takes only 4.2ms(complete point cloud)\n    with jit and 3.2ghz cpu.(don't calculate other features)\n    Note: this function in ubuntu seems faster than windows 10.\n\n    Args:\n        points: [N, ndim] float tensor. points[:, :3] contain xyz points and\n            points[:, 3:] contain other information such as reflectivity.\n        voxel_size: [3] list/tuple or array, float. xyz, indicate voxel size\n        coors_range: [6] list/tuple or array, float. indicate voxel range.\n            format: xyzxyz, minmax\n        max_points: int. indicate maximum points contained in a voxel.\n        reverse_index: boolean. indicate whether return reversed coordinates.\n            if points has xyz format and reverse_index is True, output\n            coordinates will be zyx format, but points in features always\n            xyz format.\n        max_voxels: int. indicate maximum voxels this function create.\n            for second, 20000 is a good choice. you should shuffle points\n            before call this function because max_voxels may drop some points.\n\n    Returns:\n        voxels: [M, max_points, ndim] float tensor. only contain points.\n        coordinates: [M, 3] int32 tensor.\n        num_points_per_voxel: [M] int32 tensor.\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "voxel_size", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "voxel_size", "=", "np", ".", "array", "(", "voxel_size", ",", "dtype", "=", "points", ".", "dtype", ")", "\n", "", "if", "not", "isinstance", "(", "coors_range", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "coors_range", "=", "np", ".", "array", "(", "coors_range", ",", "dtype", "=", "points", ".", "dtype", ")", "\n", "", "voxelmap_shape", "=", "(", "coors_range", "[", "3", ":", "]", "-", "coors_range", "[", ":", "3", "]", ")", "/", "voxel_size", "\n", "voxelmap_shape", "=", "tuple", "(", "np", ".", "round", "(", "voxelmap_shape", ")", ".", "astype", "(", "np", ".", "int32", ")", ".", "tolist", "(", ")", ")", "\n", "if", "reverse_index", ":", "\n", "        ", "voxelmap_shape", "=", "voxelmap_shape", "[", ":", ":", "-", "1", "]", "\n", "# don't create large array in jit(nopython=True) code.", "\n", "", "num_points_per_voxel", "=", "np", ".", "zeros", "(", "shape", "=", "(", "max_voxels", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "coor_to_voxelidx", "=", "-", "np", ".", "ones", "(", "shape", "=", "voxelmap_shape", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "voxels", "=", "np", ".", "zeros", "(", "\n", "shape", "=", "(", "max_voxels", ",", "max_points", ",", "points", ".", "shape", "[", "-", "1", "]", ")", ",", "dtype", "=", "points", ".", "dtype", ")", "\n", "coors", "=", "np", ".", "zeros", "(", "shape", "=", "(", "max_voxels", ",", "3", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "if", "reverse_index", ":", "\n", "        ", "voxel_num", "=", "_points_to_voxel_reverse_kernel", "(", "\n", "points", ",", "voxel_size", ",", "coors_range", ",", "num_points_per_voxel", ",", "\n", "coor_to_voxelidx", ",", "voxels", ",", "coors", ",", "max_points", ",", "max_voxels", ")", "\n", "\n", "", "else", ":", "\n", "        ", "voxel_num", "=", "_points_to_voxel_kernel", "(", "\n", "points", ",", "voxel_size", ",", "coors_range", ",", "num_points_per_voxel", ",", "\n", "coor_to_voxelidx", ",", "voxels", ",", "coors", ",", "max_points", ",", "max_voxels", ")", "\n", "\n", "", "coors", "=", "coors", "[", ":", "voxel_num", "]", "\n", "voxels", "=", "voxels", "[", ":", "voxel_num", "]", "\n", "num_points_per_voxel", "=", "num_points_per_voxel", "[", ":", "voxel_num", "]", "\n", "# voxels[:, :, -3:] = voxels[:, :, :3] - \\", "\n", "#     voxels[:, :, :3].sum(axis=1, keepdims=True)/num_points_per_voxel.reshape(-1, 1, 1)", "\n", "return", "voxels", ",", "coors", ",", "num_points_per_voxel", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.points_op.points_ops.bound_points_jit": [[167, 183], ["numba.jit", "numpy.zeros", "range", "range"], "function", ["None"], ["", "@", "numba", ".", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "bound_points_jit", "(", "points", ",", "upper_bound", ",", "lower_bound", ")", ":", "\n", "# to use nopython=True, np.bool is not supported. so you need", "\n", "# convert result to np.bool after this function.", "\n", "    ", "N", "=", "points", ".", "shape", "[", "0", "]", "\n", "ndim", "=", "points", ".", "shape", "[", "1", "]", "\n", "keep_indices", "=", "np", ".", "zeros", "(", "(", "N", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "success", "=", "0", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "success", "=", "1", "\n", "for", "j", "in", "range", "(", "ndim", "-", "1", ")", ":", "\n", "            ", "if", "points", "[", "i", ",", "j", "]", "<", "lower_bound", "[", "j", "]", "or", "points", "[", "i", ",", "j", "]", ">=", "upper_bound", "[", "j", "]", ":", "\n", "                ", "success", "=", "0", "\n", "break", "\n", "", "", "keep_indices", "[", "i", "]", "=", "success", "\n", "", "return", "keep_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.models.builder._build_module": [[13, 16], ["isinstance", "mmcv.runner.obj_from_dict"], "function", ["None"], ["def", "_build_module", "(", "cfg", ",", "parrent", "=", "None", ",", "default_args", "=", "None", ")", ":", "\n", "    ", "return", "cfg", "if", "isinstance", "(", "cfg", ",", "nn", ".", "Module", ")", "else", "obj_from_dict", "(", "\n", "cfg", ",", "parrent", ",", "default_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.models.builder.build": [[18, 24], ["isinstance", "torch.nn.Sequential", "builder._build_module", "builder._build_module", "backbones", "necks", "rpn_heads", "roi_extractors", "bbox_heads", "mask_heads", "single_stage_heads"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.models.builder._build_module", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.models.builder._build_module"], ["", "def", "build", "(", "cfg", ",", "parrent", "=", "None", ",", "default_args", "=", "None", ")", ":", "\n", "    ", "if", "isinstance", "(", "cfg", ",", "list", ")", ":", "\n", "        ", "modules", "=", "[", "_build_module", "(", "cfg_", ",", "parrent", ",", "default_args", ")", "for", "cfg_", "in", "cfg", "]", "\n", "return", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "", "else", ":", "\n", "        ", "return", "_build_module", "(", "cfg", ",", "parrent", ",", "default_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.models.builder.build_backbone": [[26, 28], ["builder.build"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.models.builder.build"], ["", "", "def", "build_backbone", "(", "cfg", ")", ":", "\n", "    ", "return", "build", "(", "cfg", ",", "backbones", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.models.builder.build_neck": [[30, 32], ["builder.build"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.models.builder.build"], ["", "def", "build_neck", "(", "cfg", ")", ":", "\n", "    ", "return", "build", "(", "cfg", ",", "necks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.models.builder.build_rpn_head": [[34, 36], ["builder.build"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.models.builder.build"], ["", "def", "build_rpn_head", "(", "cfg", ")", ":", "\n", "    ", "return", "build", "(", "cfg", ",", "rpn_heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.models.builder.build_roi_extractor": [[38, 40], ["builder.build"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.models.builder.build"], ["", "def", "build_roi_extractor", "(", "cfg", ")", ":", "\n", "    ", "return", "build", "(", "cfg", ",", "roi_extractors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.models.builder.build_bbox_head": [[42, 44], ["builder.build"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.models.builder.build"], ["", "def", "build_bbox_head", "(", "cfg", ")", ":", "\n", "    ", "return", "build", "(", "cfg", ",", "bbox_heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.models.builder.build_mask_head": [[46, 48], ["builder.build"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.models.builder.build"], ["", "def", "build_mask_head", "(", "cfg", ")", ":", "\n", "    ", "return", "build", "(", "cfg", ",", "mask_heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.models.builder.build_single_stage_head": [[50, 52], ["builder.build"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.models.builder.build"], ["", "def", "build_single_stage_head", "(", "cfg", ")", ":", "\n", "    ", "return", "build", "(", "cfg", ",", "single_stage_heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.models.builder.build_detector": [[54, 57], ["builder.build", "dict"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.models.builder.build"], ["", "def", "build_detector", "(", "cfg", ",", "train_cfg", "=", "None", ",", "test_cfg", "=", "None", ",", "full_cfg", "=", "None", ")", ":", "\n", "    ", "from", ".", "import", "detectors", "\n", "return", "build", "(", "cfg", ",", "detectors", ",", "dict", "(", "train_cfg", "=", "train_cfg", ",", "test_cfg", "=", "test_cfg", ",", "full_cfg", "=", "full_cfg", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.norm.build_norm_layer": [[6, 18], ["cfg.copy", "cfg.copy.setdefault", "cfg.copy.pop", "isinstance", "KeyError"], "function", ["None"], ["def", "build_norm_layer", "(", "cfg", ",", "num_features", ")", ":", "\n", "    ", "assert", "isinstance", "(", "cfg", ",", "dict", ")", "and", "'type'", "in", "cfg", "\n", "cfg_", "=", "cfg", ".", "copy", "(", ")", "\n", "cfg_", ".", "setdefault", "(", "'eps'", ",", "1e-5", ")", "\n", "layer_type", "=", "cfg_", ".", "pop", "(", "'type'", ")", "\n", "\n", "if", "layer_type", "not", "in", "norm_cfg", ":", "\n", "        ", "raise", "KeyError", "(", "'Unrecognized norm type {}'", ".", "format", "(", "layer_type", ")", ")", "\n", "", "elif", "norm_cfg", "[", "layer_type", "]", "is", "None", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "return", "norm_cfg", "[", "layer_type", "]", "(", "num_features", ",", "**", "cfg_", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.sequential.Sequential.__init__": [[35, 49], ["super().__init__", "kwargs.items", "isinstance", "args[].items", "enumerate", "sequential.Sequential.add_module", "len", "sequential.Sequential.add_module", "sequential.Sequential.add_module", "ValueError", "ValueError", "str"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Sequential", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "len", "(", "args", ")", "==", "1", "and", "isinstance", "(", "args", "[", "0", "]", ",", "OrderedDict", ")", ":", "\n", "            ", "for", "key", ",", "module", "in", "args", "[", "0", "]", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "add_module", "(", "key", ",", "module", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "idx", ",", "module", "in", "enumerate", "(", "args", ")", ":", "\n", "                ", "self", ".", "add_module", "(", "str", "(", "idx", ")", ",", "module", ")", "\n", "", "", "for", "name", ",", "module", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "sys", ".", "version_info", "<", "(", "3", ",", "6", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"kwargs only supported in py36+\"", ")", "\n", "", "if", "name", "in", "self", ".", "_modules", ":", "\n", "                ", "raise", "ValueError", "(", "\"name exists.\"", ")", "\n", "", "self", ".", "add_module", "(", "name", ",", "module", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.sequential.Sequential.__getitem__": [[50, 59], ["iter", "range", "next", "IndexError", "len", "sequential.Sequential._modules.values", "next", "len", "len"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "not", "(", "-", "len", "(", "self", ")", "<=", "idx", "<", "len", "(", "self", ")", ")", ":", "\n", "            ", "raise", "IndexError", "(", "'index {} is out of range'", ".", "format", "(", "idx", ")", ")", "\n", "", "if", "idx", "<", "0", ":", "\n", "            ", "idx", "+=", "len", "(", "self", ")", "\n", "", "it", "=", "iter", "(", "self", ".", "_modules", ".", "values", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "idx", ")", ":", "\n", "            ", "next", "(", "it", ")", "\n", "", "return", "next", "(", "it", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.sequential.Sequential.__len__": [[60, 62], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.sequential.Sequential.add": [[63, 69], ["sequential.Sequential.add_module", "str", "len", "KeyError"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "module", ",", "name", "=", "None", ")", ":", "\n", "        ", "if", "name", "is", "None", ":", "\n", "            ", "name", "=", "str", "(", "len", "(", "self", ".", "_modules", ")", ")", "\n", "if", "name", "in", "self", ".", "_modules", ":", "\n", "                ", "raise", "KeyError", "(", "\"name exists\"", ")", "\n", "", "", "self", ".", "add_module", "(", "name", ",", "module", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.sequential.Sequential.forward": [[70, 77], ["sequential.Sequential._modules.values", "module"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# i = 0", "\n", "        ", "for", "module", "in", "self", ".", "_modules", ".", "values", "(", ")", ":", "\n", "# print(i)", "\n", "            ", "input", "=", "module", "(", "input", ")", "\n", "# i += 1", "\n", "", "return", "input", "", "", "", ""]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.conv_module.ConvModule.__init__": [[10, 64], ["torch.Module.__init__", "torch.Conv2d", "conv_module.ConvModule.init_weights", "warnings.warn", "norm.build_norm_layer", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.learning_schedules_fastai.FakeOptim.__init__", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.roi_extractors.single_level.SingleRoIExtractor.init_weights", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.norm.build_norm_layer"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "True", ",", "\n", "normalize", "=", "None", ",", "\n", "activation", "=", "'relu'", ",", "\n", "inplace", "=", "True", ",", "\n", "activate_last", "=", "True", ")", ":", "\n", "        ", "super", "(", "ConvModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "with_norm", "=", "normalize", "is", "not", "None", "\n", "self", ".", "with_activatation", "=", "activation", "is", "not", "None", "\n", "self", ".", "with_bias", "=", "bias", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "activate_last", "=", "activate_last", "\n", "\n", "if", "self", ".", "with_norm", "and", "self", ".", "with_bias", ":", "\n", "            ", "warnings", ".", "warn", "(", "'ConvModule has norm and bias at the same time'", ")", "\n", "\n", "", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "dilation", ",", "\n", "groups", ",", "\n", "bias", "=", "bias", ")", "\n", "\n", "self", ".", "in_channels", "=", "self", ".", "conv", ".", "in_channels", "\n", "self", ".", "out_channels", "=", "self", ".", "conv", ".", "out_channels", "\n", "self", ".", "kernel_size", "=", "self", ".", "conv", ".", "kernel_size", "\n", "self", ".", "stride", "=", "self", ".", "conv", ".", "stride", "\n", "self", ".", "padding", "=", "self", ".", "conv", ".", "padding", "\n", "self", ".", "dilation", "=", "self", ".", "conv", ".", "dilation", "\n", "self", ".", "transposed", "=", "self", ".", "conv", ".", "transposed", "\n", "self", ".", "output_padding", "=", "self", ".", "conv", ".", "output_padding", "\n", "self", ".", "groups", "=", "self", ".", "conv", ".", "groups", "\n", "\n", "if", "self", ".", "with_norm", ":", "\n", "            ", "norm_channels", "=", "out_channels", "if", "self", ".", "activate_last", "else", "in_channels", "\n", "self", ".", "norm", "=", "build_norm_layer", "(", "normalize", ",", "norm_channels", ")", "\n", "\n", "", "if", "self", ".", "with_activatation", ":", "\n", "            ", "assert", "activation", "in", "[", "'relu'", "]", ",", "'Only ReLU supported.'", "\n", "if", "self", ".", "activation", "==", "'relu'", ":", "\n", "                ", "self", ".", "activate", "=", "nn", ".", "ReLU", "(", "inplace", "=", "inplace", ")", "\n", "\n", "# Default using msra init", "\n", "", "", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.conv_module.ConvModule.init_weights": [[65, 70], ["mmcv.cnn.kaiming_init", "mmcv.cnn.constant_init"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.weight_init.kaiming_init"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "nonlinearity", "=", "'relu'", "if", "self", ".", "activation", "is", "None", "else", "self", ".", "activation", "\n", "kaiming_init", "(", "self", ".", "conv", ",", "nonlinearity", "=", "nonlinearity", ")", "\n", "if", "self", ".", "with_norm", ":", "\n", "            ", "constant_init", "(", "self", ".", "norm", ",", "1", ",", "bias", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.conv_module.ConvModule.forward": [[71, 85], ["conv_module.ConvModule.conv", "conv_module.ConvModule.conv", "conv_module.ConvModule.norm", "conv_module.ConvModule.activate", "conv_module.ConvModule.norm", "conv_module.ConvModule.activate"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "activate", "=", "True", ",", "norm", "=", "True", ")", ":", "\n", "        ", "if", "self", ".", "activate_last", ":", "\n", "            ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "norm", "and", "self", ".", "with_norm", ":", "\n", "                ", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "", "if", "activate", "and", "self", ".", "with_activatation", ":", "\n", "                ", "x", "=", "self", ".", "activate", "(", "x", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "norm", "and", "self", ".", "with_norm", ":", "\n", "                ", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "", "if", "activate", "and", "self", ".", "with_activatation", ":", "\n", "                ", "x", "=", "self", ".", "activate", "(", "x", ")", "\n", "", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.empty.Empty.__init__": [[5, 7], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Empty", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.empty.Empty.forward": [[8, 14], ["len", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "len", "(", "args", ")", "==", "1", ":", "\n", "            ", "return", "args", "[", "0", "]", "\n", "", "elif", "len", "(", "args", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "", "return", "args", "", "", "", ""]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.weight_init.xavier_init": [[5, 13], ["hasattr", "torch.init.xavier_uniform_", "torch.init.xavier_normal_", "torch.init.constant_"], "function", ["None"], ["def", "xavier_init", "(", "module", ",", "gain", "=", "1", ",", "bias", "=", "0", ",", "distribution", "=", "'normal'", ")", ":", "\n", "    ", "assert", "distribution", "in", "[", "'uniform'", ",", "'normal'", "]", "\n", "if", "distribution", "==", "'uniform'", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_uniform_", "(", "module", ".", "weight", ",", "gain", "=", "gain", ")", "\n", "", "else", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_normal_", "(", "module", ".", "weight", ",", "gain", "=", "gain", ")", "\n", "", "if", "hasattr", "(", "module", ",", "'bias'", ")", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.weight_init.normal_init": [[15, 19], ["torch.init.normal_", "hasattr", "torch.init.constant_"], "function", ["None"], ["", "", "def", "normal_init", "(", "module", ",", "mean", "=", "0", ",", "std", "=", "1", ",", "bias", "=", "0", ")", ":", "\n", "    ", "nn", ".", "init", ".", "normal_", "(", "module", ".", "weight", ",", "mean", ",", "std", ")", "\n", "if", "hasattr", "(", "module", ",", "'bias'", ")", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.weight_init.uniform_init": [[21, 25], ["torch.init.uniform_", "hasattr", "torch.init.constant_"], "function", ["None"], ["", "", "def", "uniform_init", "(", "module", ",", "a", "=", "0", ",", "b", "=", "1", ",", "bias", "=", "0", ")", ":", "\n", "    ", "nn", ".", "init", ".", "uniform_", "(", "module", ".", "weight", ",", "a", ",", "b", ")", "\n", "if", "hasattr", "(", "module", ",", "'bias'", ")", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.weight_init.kaiming_init": [[27, 41], ["hasattr", "torch.init.kaiming_uniform_", "torch.init.kaiming_normal_", "torch.init.constant_"], "function", ["None"], ["", "", "def", "kaiming_init", "(", "module", ",", "\n", "mode", "=", "'fan_out'", ",", "\n", "nonlinearity", "=", "'relu'", ",", "\n", "bias", "=", "0", ",", "\n", "distribution", "=", "'normal'", ")", ":", "\n", "    ", "assert", "distribution", "in", "[", "'uniform'", ",", "'normal'", "]", "\n", "if", "distribution", "==", "'uniform'", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "\n", "module", ".", "weight", ",", "mode", "=", "mode", ",", "nonlinearity", "=", "nonlinearity", ")", "\n", "", "else", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "\n", "module", ".", "weight", ",", "mode", "=", "mode", ",", "nonlinearity", "=", "nonlinearity", ")", "\n", "", "if", "hasattr", "(", "module", ",", "'bias'", ")", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.weight_init.bias_init_with_prob": [[43, 47], ["float", "numpy.log"], "function", ["None"], ["", "", "def", "bias_init_with_prob", "(", "prior_prob", ")", ":", "\n", "    ", "\"\"\" initialize conv/fc bias value according to giving probablity\"\"\"", "\n", "bias_init", "=", "float", "(", "-", "np", ".", "log", "(", "(", "1", "-", "prior_prob", ")", "/", "prior_prob", ")", ")", "\n", "return", "bias_init", "\n", "", ""]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.__init__.get_paddings_indicator": [[10, 30], ["torch.unsqueeze", "torch.arange().view", "len", "torch.unsqueeze.int", "torch.arange"], "function", ["None"], []], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.__init__.get_pos_to_kw_map": [[31, 40], ["inspect.signature", "inspect.signature.parameters.items"], "function", ["None"], []], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.__init__.change_default_args": [[41, 55], ["__init__.get_pos_to_kw_map", "kwargs.items", "super().__init__", "get_pos_to_kw_map.items", "len"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.__init__.get_pos_to_kw_map", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.learning_schedules_fastai.FakeOptim.__init__"], []], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.__init__.one_hot": [[56, 61], ["torch.zeros", "torch.zeros.scatter_", "tensor.unsqueeze().long", "list", "tensor.unsqueeze"], "function", ["None"], []], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.dist_utils.DistOptimizerHook.__init__": [[46, 50], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "grad_clip", "=", "None", ",", "coalesce", "=", "True", ",", "bucket_size_mb", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "grad_clip", "=", "grad_clip", "\n", "self", ".", "coalesce", "=", "coalesce", "\n", "self", ".", "bucket_size_mb", "=", "bucket_size_mb", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.dist_utils.DistOptimizerHook.after_train_iter": [[51, 58], ["runner.optimizer.zero_grad", "runner.outputs[].backward", "dist_utils.allreduce_grads", "runner.optimizer.step", "dist_utils.DistOptimizerHook.clip_grads", "runner.model.parameters"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.OptimWrapper.zero_grad", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.pointnet2.pointnet2_utils.ThreeInterpolate.backward", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.dist_utils.allreduce_grads", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.learning_schedules_fastai.LRSchedulerStep.step"], ["", "def", "after_train_iter", "(", "self", ",", "runner", ")", ":", "\n", "        ", "runner", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "runner", ".", "outputs", "[", "'loss'", "]", ".", "backward", "(", ")", "\n", "allreduce_grads", "(", "runner", ".", "model", ",", "self", ".", "coalesce", ",", "self", ".", "bucket_size_mb", ")", "\n", "if", "self", ".", "grad_clip", "is", "not", "None", ":", "\n", "            ", "self", ".", "clip_grads", "(", "runner", ".", "model", ".", "parameters", "(", ")", ")", "\n", "", "runner", ".", "optimizer", ".", "step", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.dist_utils._allreduce_coalesced": [[9, 29], ["torch._utils._take_tensors", "collections.OrderedDict", "buckets.values.values", "torch._utils._flatten_dense_tensors", "torch.all_reduce", "torch._utils._flatten_dense_tensors.div_", "zip", "tensor.type", "buckets[].append", "torch._utils._unflatten_dense_tensors", "tensor.copy_"], "function", ["None"], ["def", "_allreduce_coalesced", "(", "tensors", ",", "world_size", ",", "bucket_size_mb", "=", "-", "1", ")", ":", "\n", "    ", "if", "bucket_size_mb", ">", "0", ":", "\n", "        ", "bucket_size_bytes", "=", "bucket_size_mb", "*", "1024", "*", "1024", "\n", "buckets", "=", "_take_tensors", "(", "tensors", ",", "bucket_size_bytes", ")", "\n", "", "else", ":", "\n", "        ", "buckets", "=", "OrderedDict", "(", ")", "\n", "for", "tensor", "in", "tensors", ":", "\n", "            ", "tp", "=", "tensor", ".", "type", "(", ")", "\n", "if", "tp", "not", "in", "buckets", ":", "\n", "                ", "buckets", "[", "tp", "]", "=", "[", "]", "\n", "", "buckets", "[", "tp", "]", ".", "append", "(", "tensor", ")", "\n", "", "buckets", "=", "buckets", ".", "values", "(", ")", "\n", "\n", "", "for", "bucket", "in", "buckets", ":", "\n", "        ", "flat_tensors", "=", "_flatten_dense_tensors", "(", "bucket", ")", "\n", "dist", ".", "all_reduce", "(", "flat_tensors", ")", "\n", "flat_tensors", ".", "div_", "(", "world_size", ")", "\n", "for", "tensor", ",", "synced", "in", "zip", "(", "\n", "bucket", ",", "_unflatten_dense_tensors", "(", "flat_tensors", ",", "bucket", ")", ")", ":", "\n", "            ", "tensor", ".", "copy_", "(", "synced", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.dist_utils.allreduce_grads": [[31, 42], ["torch.get_world_size", "dist_utils._allreduce_coalesced", "model.parameters", "torch.all_reduce", "tensor.div_"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.dist_utils._allreduce_coalesced"], ["", "", "", "def", "allreduce_grads", "(", "model", ",", "coalesce", "=", "True", ",", "bucket_size_mb", "=", "-", "1", ")", ":", "\n", "    ", "grads", "=", "[", "\n", "param", ".", "grad", ".", "data", "for", "param", "in", "model", ".", "parameters", "(", ")", "\n", "if", "param", ".", "requires_grad", "and", "param", ".", "grad", "is", "not", "None", "\n", "]", "\n", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "if", "coalesce", ":", "\n", "        ", "_allreduce_coalesced", "(", "grads", ",", "world_size", ",", "bucket_size_mb", ")", "\n", "", "else", ":", "\n", "        ", "for", "tensor", "in", "grads", ":", "\n", "            ", "dist", ".", "all_reduce", "(", "tensor", ".", "div_", "(", "world_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.misc.TimeCatcher.__init__": [[40, 43], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "show", "=", "True", ",", "cuda", "=", "True", ")", ":", "\n", "        ", "self", ".", "show", "=", "show", "\n", "self", ".", "cuda", "=", "cuda", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.misc.TimeCatcher.__enter__": [[44, 49], ["time.time", "torch.cuda.synchronize"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "cuda", ":", "\n", "            ", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "", "self", ".", "start", "=", "time", ".", "time", "(", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.misc.TimeCatcher.__exit__": [[50, 57], ["time.time", "torch.cuda.synchronize", "print"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "type", ",", "value", ",", "traceback", ")", ":", "\n", "        ", "if", "self", ".", "cuda", ":", "\n", "            ", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "", "self", ".", "end", "=", "time", ".", "time", "(", ")", "\n", "ms", "=", "(", "self", ".", "end", "-", "self", ".", "start", ")", "*", "1000", "\n", "if", "self", ".", "show", ":", "\n", "            ", "print", "(", "\"%.5f ms\"", "%", "ms", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.misc.tensor2imgs": [[8, 19], ["tensor.size", "numpy.array", "numpy.array", "range", "tensor[].cpu().numpy().transpose", "mmcv.imdenormalize().astype", "imgs.append", "numpy.ascontiguousarray", "tensor[].cpu().numpy", "mmcv.imdenormalize", "tensor[].cpu"], "function", ["None"], ["def", "tensor2imgs", "(", "tensor", ",", "mean", "=", "(", "0", ",", "0", ",", "0", ")", ",", "std", "=", "(", "1", ",", "1", ",", "1", ")", ",", "to_rgb", "=", "True", ")", ":", "\n", "    ", "num_imgs", "=", "tensor", ".", "size", "(", "0", ")", "\n", "mean", "=", "np", ".", "array", "(", "mean", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "std", "=", "np", ".", "array", "(", "std", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "imgs", "=", "[", "]", "\n", "for", "img_id", "in", "range", "(", "num_imgs", ")", ":", "\n", "        ", "img", "=", "tensor", "[", "img_id", ",", "...", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "img", "=", "mmcv", ".", "imdenormalize", "(", "\n", "img", ",", "mean", ",", "std", ",", "to_bgr", "=", "to_rgb", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "imgs", ".", "append", "(", "np", ".", "ascontiguousarray", "(", "img", ")", ")", "\n", "", "return", "imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.misc.multi_apply": [[21, 25], ["six.moves.map", "tuple", "functools.partial", "six.moves.map", "six.moves.zip"], "function", ["None"], ["", "def", "multi_apply", "(", "func", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "pfunc", "=", "partial", "(", "func", ",", "**", "kwargs", ")", "if", "kwargs", "else", "func", "\n", "map_results", "=", "map", "(", "pfunc", ",", "*", "args", ")", "\n", "return", "tuple", "(", "map", "(", "list", ",", "zip", "(", "*", "map_results", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.misc.unmap": [[27, 38], ["data.dim", "data.new_full", "data.new_full", "data.size"], "function", ["None"], ["", "def", "unmap", "(", "data", ",", "count", ",", "inds", ",", "fill", "=", "0", ")", ":", "\n", "    ", "\"\"\" Unmap a subset of item (data) back to the original set of items (of\n    size count) \"\"\"", "\n", "if", "data", ".", "dim", "(", ")", "==", "1", ":", "\n", "        ", "ret", "=", "data", ".", "new_full", "(", "(", "count", ",", ")", ",", "fill", ")", "\n", "ret", "[", "inds", "]", "=", "data", "\n", "", "else", ":", "\n", "        ", "new_size", "=", "(", "count", ",", ")", "+", "data", ".", "size", "(", ")", "[", "1", ":", "]", "\n", "ret", "=", "data", ".", "new_full", "(", "new_size", ",", "fill", ")", "\n", "ret", "[", "inds", ",", ":", "]", "=", "data", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.necks.rpn.RPNBase.__init__": [[7, 93], ["torch.nn.Module.__init__", "range", "enumerate", "torch.nn.ModuleList", "torch.nn.ModuleList", "len", "len", "len", "len", "len", "len", "len", "len", "len", "must_equal_list.append", "rpn.RPNBase._make_layer", "blocks.append", "utils.change_default_args", "utils.change_default_args", "utils.change_default_args", "utils.change_default_args", "utils.change_default_args", "deblocks.append", "numpy.prod", "numpy.round().astype", "torch.nn.Sequential", "numpy.round().astype", "torch.nn.Sequential", "ConvTranspose2d", "BatchNorm2d", "torch.nn.ReLU", "Conv2d", "BatchNorm2d", "torch.nn.ReLU", "numpy.round", "numpy.round"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.learning_schedules_fastai.FakeOptim.__init__", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.necks.cmn.SpMiddleFHD._make_layer", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.__init__.change_default_args", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.__init__.change_default_args", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.__init__.change_default_args", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.__init__.change_default_args", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.__init__.change_default_args"], ["    ", "def", "__init__", "(", "self", ",", "\n", "use_norm", "=", "True", ",", "\n", "layer_nums", "=", "(", "3", ",", "5", ",", "5", ")", ",", "\n", "layer_strides", "=", "(", "2", ",", "2", ",", "2", ")", ",", "\n", "num_filters", "=", "(", "128", ",", "128", ",", "256", ")", ",", "\n", "upsample_strides", "=", "(", "1", ",", "2", ",", "4", ")", ",", "\n", "num_upsample_filters", "=", "(", "256", ",", "256", ",", "256", ")", ",", "\n", "num_input_features", "=", "128", ")", ":", "\n", "\n", "        ", "\"\"\"upsample_strides support float: [0.25, 0.5, 1]\n        if upsample_strides < 1, conv2d will be used instead of convtranspose2d.\n        \"\"\"", "\n", "super", "(", "RPNBase", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_layer_strides", "=", "layer_strides", "\n", "self", ".", "_num_filters", "=", "num_filters", "\n", "self", ".", "_layer_nums", "=", "layer_nums", "\n", "self", ".", "_upsample_strides", "=", "upsample_strides", "\n", "self", ".", "_num_upsample_filters", "=", "num_upsample_filters", "\n", "self", ".", "_num_input_features", "=", "num_input_features", "\n", "self", ".", "_use_norm", "=", "use_norm", "\n", "\n", "assert", "len", "(", "layer_strides", ")", "==", "len", "(", "layer_nums", ")", "\n", "assert", "len", "(", "num_filters", ")", "==", "len", "(", "layer_nums", ")", "\n", "assert", "len", "(", "num_upsample_filters", ")", "==", "len", "(", "upsample_strides", ")", "\n", "self", ".", "_upsample_start_idx", "=", "len", "(", "layer_nums", ")", "-", "len", "(", "upsample_strides", ")", "\n", "must_equal_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "upsample_strides", ")", ")", ":", "\n", "            ", "must_equal_list", ".", "append", "(", "upsample_strides", "[", "i", "]", "/", "np", ".", "prod", "(", "\n", "layer_strides", "[", ":", "i", "+", "self", ".", "_upsample_start_idx", "+", "1", "]", ")", ")", "\n", "", "for", "val", "in", "must_equal_list", ":", "\n", "            ", "assert", "val", "==", "must_equal_list", "[", "0", "]", "\n", "\n", "", "if", "use_norm", ":", "\n", "            ", "BatchNorm2d", "=", "change_default_args", "(", "\n", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", "(", "nn", ".", "BatchNorm2d", ")", "\n", "Conv2d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "nn", ".", "Conv2d", ")", "\n", "ConvTranspose2d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "\n", "nn", ".", "ConvTranspose2d", ")", "\n", "", "else", ":", "\n", "            ", "BatchNorm2d", "=", "Empty", "\n", "Conv2d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "nn", ".", "Conv2d", ")", "\n", "ConvTranspose2d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "\n", "nn", ".", "ConvTranspose2d", ")", "\n", "\n", "", "in_filters", "=", "[", "num_input_features", ",", "*", "num_filters", "[", ":", "-", "1", "]", "]", "\n", "blocks", "=", "[", "]", "\n", "deblocks", "=", "[", "]", "\n", "\n", "for", "i", ",", "layer_num", "in", "enumerate", "(", "layer_nums", ")", ":", "\n", "            ", "block", ",", "num_out_filters", "=", "self", ".", "_make_layer", "(", "\n", "in_filters", "[", "i", "]", ",", "\n", "num_filters", "[", "i", "]", ",", "\n", "layer_num", ",", "\n", "stride", "=", "layer_strides", "[", "i", "]", ")", "\n", "blocks", ".", "append", "(", "block", ")", "\n", "if", "i", "-", "self", ".", "_upsample_start_idx", ">=", "0", ":", "\n", "                ", "stride", "=", "upsample_strides", "[", "i", "-", "self", ".", "_upsample_start_idx", "]", "\n", "if", "stride", ">=", "1", ":", "\n", "                    ", "stride", "=", "np", ".", "round", "(", "stride", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "deblock", "=", "nn", ".", "Sequential", "(", "\n", "ConvTranspose2d", "(", "\n", "num_out_filters", ",", "\n", "num_upsample_filters", "[", "i", "-", "self", ".", "_upsample_start_idx", "]", ",", "\n", "stride", ",", "\n", "stride", "=", "stride", ")", ",", "\n", "BatchNorm2d", "(", "\n", "num_upsample_filters", "[", "i", "-", "self", ".", "_upsample_start_idx", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "stride", "=", "np", ".", "round", "(", "1", "/", "stride", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "deblock", "=", "nn", ".", "Sequential", "(", "\n", "Conv2d", "(", "\n", "num_out_filters", ",", "\n", "num_upsample_filters", "[", "i", "-", "self", ".", "_upsample_start_idx", "]", ",", "\n", "stride", ",", "\n", "stride", "=", "stride", ")", ",", "\n", "BatchNorm2d", "(", "\n", "num_upsample_filters", "[", "i", "-", "self", ".", "_upsample_start_idx", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "", "deblocks", ".", "append", "(", "deblock", ")", "\n", "\n", "", "", "self", ".", "_num_out_filters", "=", "num_out_filters", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "blocks", ")", "\n", "self", ".", "deblocks", "=", "nn", ".", "ModuleList", "(", "deblocks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.necks.rpn.RPNBase.downsample_factor": [[94, 100], ["numpy.prod", "len"], "methods", ["None"], ["", "@", "property", "\n", "def", "downsample_factor", "(", "self", ")", ":", "\n", "        ", "factor", "=", "np", ".", "prod", "(", "self", ".", "_layer_strides", ")", "\n", "if", "len", "(", "self", ".", "_upsample_strides", ")", ">", "0", ":", "\n", "            ", "factor", "/=", "self", ".", "_upsample_strides", "[", "-", "1", "]", "\n", "", "return", "factor", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.necks.rpn.RPNBase._make_layer": [[101, 103], ["None"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "inplanes", ",", "planes", ",", "num_blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.necks.rpn.RPNBase.forward": [[104, 117], ["range", "len", "stage_outputs.append", "len", "torch.cat", "ups.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "ups", "=", "[", "]", "\n", "stage_outputs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "blocks", ")", ")", ":", "\n", "            ", "x", "=", "self", ".", "blocks", "[", "i", "]", "(", "x", ")", "\n", "stage_outputs", ".", "append", "(", "x", ")", "\n", "if", "i", "-", "self", ".", "_upsample_start_idx", ">=", "0", ":", "\n", "                ", "ups", ".", "append", "(", "self", ".", "deblocks", "[", "i", "-", "self", ".", "_upsample_start_idx", "]", "(", "x", ")", ")", "\n", "\n", "", "", "if", "len", "(", "ups", ")", ">", "0", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "ups", ",", "dim", "=", "1", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.necks.rpn.RPN._make_layer": [[119, 144], ["utils.Sequential", "range", "torch.nn.ZeroPad2d", "Conv2d", "BatchNorm2d", "torch.nn.ReLU", "utils.Sequential.add", "utils.Sequential.add", "utils.Sequential.add", "utils.change_default_args", "utils.change_default_args", "utils.change_default_args", "utils.change_default_args", "utils.change_default_args", "Conv2d", "BatchNorm2d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.sequential.Sequential.add", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.sequential.Sequential.add", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.sequential.Sequential.add", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.__init__.change_default_args", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.__init__.change_default_args", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.__init__.change_default_args", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.__init__.change_default_args", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.__init__.change_default_args"], ["    ", "def", "_make_layer", "(", "self", ",", "inplanes", ",", "planes", ",", "num_blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "if", "self", ".", "_use_norm", ":", "\n", "            ", "BatchNorm2d", "=", "change_default_args", "(", "\n", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", "(", "nn", ".", "BatchNorm2d", ")", "\n", "Conv2d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "nn", ".", "Conv2d", ")", "\n", "ConvTranspose2d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "\n", "nn", ".", "ConvTranspose2d", ")", "\n", "", "else", ":", "\n", "            ", "BatchNorm2d", "=", "Empty", "\n", "Conv2d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "nn", ".", "Conv2d", ")", "\n", "ConvTranspose2d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "\n", "nn", ".", "ConvTranspose2d", ")", "\n", "\n", "", "block", "=", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "1", ")", ",", "\n", "Conv2d", "(", "inplanes", ",", "planes", ",", "3", ",", "stride", "=", "stride", ")", ",", "\n", "BatchNorm2d", "(", "planes", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "for", "j", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "block", ".", "add", "(", "Conv2d", "(", "planes", ",", "planes", ",", "3", ",", "padding", "=", "1", ")", ")", "\n", "block", ".", "add", "(", "BatchNorm2d", "(", "planes", ")", ")", "\n", "block", ".", "add", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "", "return", "block", ",", "planes", "", "", "", ""]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.necks.fpn.FPN.__init__": [[9, 85], ["torch.Module.__init__", "isinstance", "len", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "utils.ConvModule", "utils.ConvModule", "fpn.FPN.lateral_convs.append", "fpn.FPN.fpn_convs.append", "range", "len", "utils.ConvModule", "fpn.FPN.fpn_convs.append"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "num_outs", ",", "\n", "start_level", "=", "0", ",", "\n", "end_level", "=", "-", "1", ",", "\n", "add_extra_convs", "=", "False", ",", "\n", "normalize", "=", "None", ",", "\n", "activation", "=", "None", ")", ":", "\n", "        ", "super", "(", "FPN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "isinstance", "(", "in_channels", ",", "list", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "num_ins", "=", "len", "(", "in_channels", ")", "\n", "self", ".", "num_outs", "=", "num_outs", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "with_bias", "=", "normalize", "is", "None", "\n", "\n", "if", "end_level", "==", "-", "1", ":", "\n", "            ", "self", ".", "backbone_end_level", "=", "self", ".", "num_ins", "\n", "assert", "num_outs", ">=", "self", ".", "num_ins", "-", "start_level", "\n", "", "else", ":", "\n", "# if end_level < inputs, no extra level is allowed", "\n", "            ", "self", ".", "backbone_end_level", "=", "end_level", "\n", "assert", "end_level", "<=", "len", "(", "in_channels", ")", "\n", "assert", "num_outs", "==", "end_level", "-", "start_level", "\n", "", "self", ".", "start_level", "=", "start_level", "\n", "self", ".", "end_level", "=", "end_level", "\n", "self", ".", "add_extra_convs", "=", "add_extra_convs", "\n", "\n", "self", ".", "lateral_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "fpn_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "start_level", ",", "self", ".", "backbone_end_level", ")", ":", "\n", "            ", "l_conv", "=", "ConvModule", "(", "\n", "in_channels", "[", "i", "]", ",", "\n", "out_channels", ",", "\n", "1", ",", "\n", "normalize", "=", "normalize", ",", "\n", "bias", "=", "self", ".", "with_bias", ",", "\n", "activation", "=", "self", ".", "activation", ",", "\n", "inplace", "=", "False", ")", "\n", "fpn_conv", "=", "ConvModule", "(", "\n", "out_channels", ",", "\n", "out_channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "normalize", "=", "normalize", ",", "\n", "bias", "=", "self", ".", "with_bias", ",", "\n", "activation", "=", "self", ".", "activation", ",", "\n", "inplace", "=", "False", ")", "\n", "\n", "self", ".", "lateral_convs", ".", "append", "(", "l_conv", ")", "\n", "self", ".", "fpn_convs", ".", "append", "(", "fpn_conv", ")", "\n", "\n", "# lvl_id = i - self.start_level", "\n", "# setattr(self, 'lateral_conv{}'.format(lvl_id), l_conv)", "\n", "# setattr(self, 'fpn_conv{}'.format(lvl_id), fpn_conv)", "\n", "\n", "# add extra conv layers (e.g., RetinaNet)", "\n", "", "extra_levels", "=", "num_outs", "-", "self", ".", "backbone_end_level", "+", "self", ".", "start_level", "\n", "if", "add_extra_convs", "and", "extra_levels", ">=", "1", ":", "\n", "            ", "for", "i", "in", "range", "(", "extra_levels", ")", ":", "\n", "                ", "in_channels", "=", "(", "self", ".", "in_channels", "[", "self", ".", "backbone_end_level", "-", "1", "]", "\n", "if", "i", "==", "0", "else", "out_channels", ")", "\n", "extra_fpn_conv", "=", "ConvModule", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "3", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "\n", "normalize", "=", "normalize", ",", "\n", "bias", "=", "self", ".", "with_bias", ",", "\n", "activation", "=", "self", ".", "activation", ",", "\n", "inplace", "=", "False", ")", "\n", "self", ".", "fpn_convs", ".", "append", "(", "extra_fpn_conv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.necks.fpn.FPN.init_weights": [[87, 91], ["fpn.FPN.modules", "isinstance", "utils.xavier_init"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.weight_init.xavier_init"], ["", "", "", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "xavier_init", "(", "m", ",", "distribution", "=", "'uniform'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.necks.fpn.FPN.forward": [[92, 127], ["len", "range", "tuple", "len", "len", "lateral_conv", "torch.interpolate", "torch.interpolate", "len", "enumerate", "range", "range", "outs.append", "range", "outs.append", "outs.append", "torch.max_pool2d", "torch.max_pool2d"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "assert", "len", "(", "inputs", ")", "==", "len", "(", "self", ".", "in_channels", ")", "\n", "\n", "# build laterals", "\n", "laterals", "=", "[", "\n", "lateral_conv", "(", "inputs", "[", "i", "+", "self", ".", "start_level", "]", ")", "\n", "for", "i", ",", "lateral_conv", "in", "enumerate", "(", "self", ".", "lateral_convs", ")", "\n", "]", "\n", "\n", "# build top-down path", "\n", "used_backbone_levels", "=", "len", "(", "laterals", ")", "\n", "for", "i", "in", "range", "(", "used_backbone_levels", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "            ", "laterals", "[", "i", "-", "1", "]", "+=", "F", ".", "interpolate", "(", "\n", "laterals", "[", "i", "]", ",", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", "\n", "# build outputs", "\n", "# part 1: from original levels", "\n", "", "outs", "=", "[", "\n", "self", ".", "fpn_convs", "[", "i", "]", "(", "laterals", "[", "i", "]", ")", "for", "i", "in", "range", "(", "used_backbone_levels", ")", "\n", "]", "\n", "# part 2: add extra levels", "\n", "if", "self", ".", "num_outs", ">", "len", "(", "outs", ")", ":", "\n", "# use max pool to get more levels on top of outputs", "\n", "# (e.g., Faster R-CNN, Mask R-CNN)", "\n", "            ", "if", "not", "self", ".", "add_extra_convs", ":", "\n", "                ", "for", "i", "in", "range", "(", "self", ".", "num_outs", "-", "used_backbone_levels", ")", ":", "\n", "                    ", "outs", ".", "append", "(", "F", ".", "max_pool2d", "(", "outs", "[", "-", "1", "]", ",", "1", ",", "stride", "=", "2", ")", ")", "\n", "# add conv layers on top of original feature maps (RetinaNet)", "\n", "", "", "else", ":", "\n", "                ", "orig", "=", "inputs", "[", "self", ".", "backbone_end_level", "-", "1", "]", "\n", "outs", ".", "append", "(", "self", ".", "fpn_convs", "[", "used_backbone_levels", "]", "(", "orig", ")", ")", "\n", "for", "i", "in", "range", "(", "used_backbone_levels", "+", "1", ",", "self", ".", "num_outs", ")", ":", "\n", "# BUG: we should add relu before each extra conv", "\n", "                    ", "outs", ".", "append", "(", "self", ".", "fpn_convs", "[", "i", "]", "(", "outs", "[", "-", "1", "]", ")", ")", "\n", "", "", "", "return", "tuple", "(", "outs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.necks.cmn.SpMiddleFHD.__init__": [[13, 26], ["torch.nn.Module.__init__", "print", "cmn.VxNet", "cmn.BEVNet"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "output_shape", ",", "\n", "num_input_features", "=", "4", ",", "\n", "num_hidden_features", "=", "128", ",", "\n", ")", ":", "\n", "\n", "        ", "super", "(", "SpMiddleFHD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "print", "(", "output_shape", ")", "\n", "self", ".", "sparse_shape", "=", "output_shape", "\n", "\n", "self", ".", "backbone", "=", "VxNet", "(", "num_input_features", ")", "\n", "self", ".", "fcn", "=", "BEVNet", "(", "in_features", "=", "num_hidden_features", ",", "num_filters", "=", "256", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.necks.cmn.SpMiddleFHD._make_layer": [[28, 40], ["utils.Sequential", "range", "torch.nn.ZeroPad2d", "torch.nn.ZeroPad2d", "conv2d", "bachnorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "utils.Sequential.add", "utils.Sequential.add", "utils.Sequential.add", "conv2d", "bachnorm2d", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.sequential.Sequential.add", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.sequential.Sequential.add", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.sequential.Sequential.add"], ["", "def", "_make_layer", "(", "self", ",", "conv2d", ",", "bachnorm2d", ",", "inplanes", ",", "planes", ",", "num_blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "block", "=", "Sequential", "(", "\n", "nn", ".", "ZeroPad2d", "(", "1", ")", ",", "\n", "conv2d", "(", "inplanes", ",", "planes", ",", "3", ",", "stride", "=", "stride", ")", ",", "\n", "bachnorm2d", "(", "planes", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "for", "j", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "block", ".", "add", "(", "conv2d", "(", "planes", ",", "planes", ",", "3", ",", "padding", "=", "1", ")", ")", "\n", "block", ".", "add", "(", "bachnorm2d", "(", "planes", ")", ")", "\n", "block", ".", "add", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "", "return", "block", ",", "planes", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.necks.cmn.SpMiddleFHD.build_aux_target": [[41, 68], ["list", "list", "range", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "len", "gt_boxes3d[].cpu", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "nxyz[].cpu", "mmdet.ops.pts_in_boxes3d", "[].byte", "torch.cat().cuda.append", "torch.cat().cuda.append", "torch.cat().cuda.append", "torch.cat().cuda.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "pts_in_flag.max"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.points_op.__init__.pts_in_boxes3d"], ["", "def", "build_aux_target", "(", "self", ",", "nxyz", ",", "gt_boxes3d", ",", "enlarge", "=", "1.0", ")", ":", "\n", "        ", "center_offsets", "=", "list", "(", ")", "\n", "pts_labels", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "gt_boxes3d", ")", ")", ":", "\n", "            ", "boxes3d", "=", "gt_boxes3d", "[", "i", "]", ".", "cpu", "(", ")", "\n", "idx", "=", "torch", ".", "nonzero", "(", "nxyz", "[", ":", ",", "0", "]", "==", "i", ")", ".", "view", "(", "-", "1", ")", "\n", "new_xyz", "=", "nxyz", "[", "idx", ",", "1", ":", "]", ".", "cpu", "(", ")", "\n", "\n", "boxes3d", "[", ":", ",", "3", ":", "6", "]", "*=", "enlarge", "\n", "\n", "pts_in_flag", ",", "center_offset", "=", "pts_in_boxes3d", "(", "new_xyz", ",", "boxes3d", ")", "\n", "pts_label", "=", "pts_in_flag", ".", "max", "(", "0", ")", "[", "0", "]", ".", "byte", "(", ")", "\n", "\n", "# import mayavi.mlab as mlab", "\n", "# from mmdet.datasets.kitti_utils import draw_lidar, draw_gt_boxes3d", "\n", "# f = draw_lidar((new_xyz).numpy(), show=False)", "\n", "# pts = new_xyz[pts_label].numpy()", "\n", "# mlab.points3d(pts[:, 0], pts[:, 1], pts[:, 2], color=(1, 1, 1), scale_factor=0.25, figure=f)", "\n", "# f = draw_gt_boxes3d(center_to_corner_box3d(boxes3d.numpy()), f, draw_text=False, show=True)", "\n", "\n", "pts_labels", ".", "append", "(", "pts_label", ")", "\n", "center_offsets", ".", "append", "(", "center_offset", ")", "\n", "\n", "", "center_offsets", "=", "torch", ".", "cat", "(", "center_offsets", ")", ".", "cuda", "(", ")", "\n", "pts_labels", "=", "torch", ".", "cat", "(", "pts_labels", ")", ".", "cuda", "(", ")", "\n", "\n", "return", "pts_labels", ",", "center_offsets", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.necks.cmn.SpMiddleFHD.aux_loss": [[69, 97], ["len", "cmn.SpMiddleFHD.build_aux_target", "pts_labels.float", "pos.sum", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "mmdet.core.loss.losses.weighted_sigmoid_focal_loss", "mmdet.core.loss.losses.weighted_smoothl1", "dict", "point_cls.view"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.necks.cmn.SpMiddleFHD.build_aux_target", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.loss.losses.weighted_sigmoid_focal_loss", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.loss.losses.weighted_smoothl1"], ["", "def", "aux_loss", "(", "self", ",", "points", ",", "point_cls", ",", "point_reg", ",", "gt_bboxes", ")", ":", "\n", "\n", "        ", "N", "=", "len", "(", "gt_bboxes", ")", "\n", "\n", "pts_labels", ",", "center_targets", "=", "self", ".", "build_aux_target", "(", "points", ",", "gt_bboxes", ")", "\n", "\n", "rpn_cls_target", "=", "pts_labels", ".", "float", "(", ")", "\n", "pos", "=", "(", "pts_labels", ">", "0", ")", ".", "float", "(", ")", "\n", "neg", "=", "(", "pts_labels", "==", "0", ")", ".", "float", "(", ")", "\n", "\n", "pos_normalizer", "=", "pos", ".", "sum", "(", ")", "\n", "pos_normalizer", "=", "torch", ".", "clamp", "(", "pos_normalizer", ",", "min", "=", "1.0", ")", "\n", "\n", "cls_weights", "=", "pos", "+", "neg", "\n", "cls_weights", "=", "cls_weights", "/", "pos_normalizer", "\n", "\n", "reg_weights", "=", "pos", "\n", "reg_weights", "=", "reg_weights", "/", "pos_normalizer", "\n", "\n", "aux_loss_cls", "=", "weighted_sigmoid_focal_loss", "(", "point_cls", ".", "view", "(", "-", "1", ")", ",", "rpn_cls_target", ",", "weight", "=", "cls_weights", ",", "avg_factor", "=", "1.", ")", "\n", "aux_loss_cls", "/=", "N", "\n", "\n", "aux_loss_reg", "=", "weighted_smoothl1", "(", "point_reg", ",", "center_targets", ",", "beta", "=", "1", "/", "9.", ",", "weight", "=", "reg_weights", "[", "...", ",", "None", "]", ",", "avg_factor", "=", "1.", ")", "\n", "aux_loss_reg", "/=", "N", "\n", "\n", "return", "dict", "(", "\n", "aux_loss_cls", "=", "aux_loss_cls", ",", "\n", "aux_loss_reg", "=", "aux_loss_reg", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.necks.cmn.SpMiddleFHD.forward": [[99, 119], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "coors.int.int.int", "spconv.SparseConvTensor", "cmn.SpMiddleFHD.backbone", "cmn.SpMiddleFHD.dense", "cmn.SpMiddleFHD.view", "cmn.SpMiddleFHD.fcn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "voxel_features", ",", "coors", ",", "batch_size", ",", "is_test", "=", "False", ")", ":", "\n", "\n", "        ", "points_mean", "=", "torch", ".", "zeros_like", "(", "voxel_features", ")", "\n", "points_mean", "[", ":", ",", "0", "]", "=", "coors", "[", ":", ",", "0", "]", "\n", "points_mean", "[", ":", ",", "1", ":", "]", "=", "voxel_features", "[", ":", ",", ":", "3", "]", "\n", "\n", "coors", "=", "coors", ".", "int", "(", ")", "\n", "x", "=", "spconv", ".", "SparseConvTensor", "(", "voxel_features", ",", "coors", ",", "self", ".", "sparse_shape", ",", "batch_size", ")", "\n", "x", ",", "point_misc", "=", "self", ".", "backbone", "(", "x", ",", "points_mean", ",", "is_test", ")", "\n", "\n", "x", "=", "x", ".", "dense", "(", ")", "\n", "N", ",", "C", ",", "D", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "view", "(", "N", ",", "C", "*", "D", ",", "H", ",", "W", ")", "\n", "\n", "x", "=", "self", ".", "fcn", "(", "x", ")", "\n", "\n", "if", "is_test", ":", "\n", "            ", "return", "x", "\n", "\n", "", "return", "x", ",", "point_misc", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.necks.cmn.VxNet.__init__": [[177, 199], ["torch.nn.Module.__init__", "cmn.double_conv", "cmn.stride_conv", "cmn.double_conv", "cmn.stride_conv", "cmn.triple_conv", "cmn.stride_conv", "cmn.triple_conv", "spconv.SparseSequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "spconv.SparseConv3d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.learning_schedules_fastai.FakeOptim.__init__", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.necks.cmn.double_conv", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.necks.cmn.stride_conv", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.necks.cmn.double_conv", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.necks.cmn.stride_conv", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.necks.cmn.triple_conv", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.necks.cmn.stride_conv", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.necks.cmn.triple_conv"], ["    ", "def", "__init__", "(", "self", ",", "num_input_features", ")", ":", "\n", "        ", "super", "(", "VxNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv0", "=", "double_conv", "(", "num_input_features", ",", "16", ",", "'subm0'", ")", "\n", "self", ".", "down0", "=", "stride_conv", "(", "16", ",", "32", ",", "'down0'", ")", "\n", "\n", "self", ".", "conv1", "=", "double_conv", "(", "32", ",", "32", ",", "'subm1'", ")", "\n", "self", ".", "down1", "=", "stride_conv", "(", "32", ",", "64", ",", "'down1'", ")", "\n", "\n", "self", ".", "conv2", "=", "triple_conv", "(", "64", ",", "64", ",", "'subm2'", ")", "\n", "self", ".", "down2", "=", "stride_conv", "(", "64", ",", "64", ",", "'down2'", ")", "\n", "\n", "self", ".", "conv3", "=", "triple_conv", "(", "64", ",", "64", ",", "'subm3'", ")", "# middle line", "\n", "\n", "self", ".", "extra_conv", "=", "spconv", ".", "SparseSequential", "(", "\n", "spconv", ".", "SparseConv3d", "(", "64", ",", "64", ",", "(", "1", ",", "1", ",", "1", ")", ",", "(", "1", ",", "1", ",", "1", ")", ",", "bias", "=", "False", ")", ",", "# shape no change", "\n", "nn", ".", "BatchNorm1d", "(", "64", ",", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "point_fc", "=", "nn", ".", "Linear", "(", "160", ",", "64", ",", "bias", "=", "False", ")", "\n", "self", ".", "point_cls", "=", "nn", ".", "Linear", "(", "64", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "point_reg", "=", "nn", ".", "Linear", "(", "64", ",", "3", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.necks.cmn.VxNet.forward": [[201, 234], ["cmn.VxNet.conv0", "cmn.VxNet.down0", "cmn.VxNet.conv1", "cmn.VxNet.down1", "cmn.VxNet.conv2", "cmn.VxNet.down2", "cmn.VxNet.conv3", "cmn.VxNet.extra_conv", "cmn.VxNet.point_fc", "cmn.VxNet.point_cls", "cmn.VxNet.point_reg", "mmdet.core.tensor2points", "cmn.nearest_neighbor_interpolate", "mmdet.core.tensor2points", "cmn.nearest_neighbor_interpolate", "mmdet.core.tensor2points", "cmn.nearest_neighbor_interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.transforms.tensor2points", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.necks.cmn.nearest_neighbor_interpolate", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.transforms.tensor2points", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.necks.cmn.nearest_neighbor_interpolate", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.transforms.tensor2points", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.necks.cmn.nearest_neighbor_interpolate"], ["", "def", "forward", "(", "self", ",", "x", ",", "points_mean", ",", "is_test", "=", "False", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "conv0", "(", "x", ")", "\n", "x", "=", "self", ".", "down0", "(", "x", ")", "# sp", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "# 2x sub", "\n", "\n", "if", "not", "is_test", ":", "\n", "            ", "vx_feat", ",", "vx_nxyz", "=", "tensor2points", "(", "x", ",", "voxel_size", "=", "(", ".1", ",", ".1", ",", ".2", ")", ")", "\n", "p1", "=", "nearest_neighbor_interpolate", "(", "points_mean", ",", "vx_nxyz", ",", "vx_feat", ")", "\n", "\n", "", "x", "=", "self", ".", "down1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "\n", "if", "not", "is_test", ":", "\n", "            ", "vx_feat", ",", "vx_nxyz", "=", "tensor2points", "(", "x", ",", "voxel_size", "=", "(", ".2", ",", ".2", ",", ".4", ")", ")", "\n", "p2", "=", "nearest_neighbor_interpolate", "(", "points_mean", ",", "vx_nxyz", ",", "vx_feat", ")", "\n", "\n", "", "x", "=", "self", ".", "down2", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "\n", "if", "not", "is_test", ":", "\n", "            ", "vx_feat", ",", "vx_nxyz", "=", "tensor2points", "(", "x", ",", "voxel_size", "=", "(", ".4", ",", ".4", ",", ".8", ")", ")", "\n", "p3", "=", "nearest_neighbor_interpolate", "(", "points_mean", ",", "vx_nxyz", ",", "vx_feat", ")", "\n", "\n", "", "out", "=", "self", ".", "extra_conv", "(", "x", ")", "\n", "\n", "if", "is_test", ":", "\n", "            ", "return", "out", ",", "None", "\n", "\n", "", "pointwise", "=", "self", ".", "point_fc", "(", "torch", ".", "cat", "(", "[", "p1", ",", "p2", ",", "p3", "]", ",", "dim", "=", "-", "1", ")", ")", "\n", "point_cls", "=", "self", ".", "point_cls", "(", "pointwise", ")", "\n", "point_reg", "=", "self", ".", "point_reg", "(", "pointwise", ")", "\n", "return", "out", ",", "(", "points_mean", ",", "point_cls", ",", "point_reg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.necks.cmn.BEVNet.__init__": [[236, 265], ["torch.nn.Module.__init__", "Conv2d", "BatchNorm2d", "Conv2d", "BatchNorm2d", "Conv2d", "BatchNorm2d", "Conv2d", "BatchNorm2d", "Conv2d", "BatchNorm2d", "Conv2d", "BatchNorm2d", "Conv2d", "BatchNorm2d", "Conv2d", "BatchNorm2d", "utils.change_default_args", "utils.change_default_args"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.learning_schedules_fastai.FakeOptim.__init__", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.__init__.change_default_args", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.__init__.change_default_args"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "num_filters", "=", "256", ")", ":", "\n", "        ", "super", "(", "BEVNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "BatchNorm2d", "=", "change_default_args", "(", "\n", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", "(", "nn", ".", "BatchNorm2d", ")", "\n", "Conv2d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "nn", ".", "Conv2d", ")", "\n", "\n", "self", ".", "conv0", "=", "Conv2d", "(", "in_features", ",", "num_filters", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn0", "=", "BatchNorm2d", "(", "num_filters", ")", "\n", "\n", "self", ".", "conv1", "=", "Conv2d", "(", "num_filters", ",", "num_filters", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "num_filters", ")", "\n", "\n", "self", ".", "conv2", "=", "Conv2d", "(", "num_filters", ",", "num_filters", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn2", "=", "BatchNorm2d", "(", "num_filters", ")", "\n", "\n", "self", ".", "conv3", "=", "Conv2d", "(", "num_filters", ",", "num_filters", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn3", "=", "BatchNorm2d", "(", "num_filters", ")", "\n", "\n", "self", ".", "conv4", "=", "Conv2d", "(", "num_filters", ",", "num_filters", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn4", "=", "BatchNorm2d", "(", "num_filters", ")", "\n", "\n", "self", ".", "conv5", "=", "Conv2d", "(", "num_filters", ",", "num_filters", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn5", "=", "BatchNorm2d", "(", "num_filters", ")", "\n", "\n", "self", ".", "conv6", "=", "Conv2d", "(", "num_filters", ",", "num_filters", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn6", "=", "BatchNorm2d", "(", "num_filters", ")", "\n", "\n", "self", ".", "conv7", "=", "Conv2d", "(", "num_filters", ",", "num_filters", ",", "1", ")", "\n", "self", ".", "bn7", "=", "BatchNorm2d", "(", "num_filters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.necks.cmn.BEVNet.forward": [[266, 285], ["cmn.BEVNet.conv0", "torch.relu", "torch.relu", "cmn.BEVNet.conv1", "torch.relu", "torch.relu", "cmn.BEVNet.conv2", "torch.relu", "torch.relu", "cmn.BEVNet.conv3", "torch.relu", "torch.relu", "cmn.BEVNet.conv4", "torch.relu", "torch.relu", "cmn.BEVNet.conv5", "torch.relu", "torch.relu", "cmn.BEVNet.conv6", "torch.relu", "torch.relu", "torch.relu.clone", "cmn.BEVNet.conv7", "torch.relu", "torch.relu", "cmn.BEVNet.bn0", "cmn.BEVNet.bn1", "cmn.BEVNet.bn2", "cmn.BEVNet.bn3", "cmn.BEVNet.bn4", "cmn.BEVNet.bn5", "cmn.BEVNet.bn6", "cmn.BEVNet.bn7"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv0", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn0", "(", "x", ")", ",", "inplace", "=", "True", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ",", "inplace", "=", "True", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "x", ")", ",", "inplace", "=", "True", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "x", ")", ",", "inplace", "=", "True", ")", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn4", "(", "x", ")", ",", "inplace", "=", "True", ")", "\n", "x", "=", "self", ".", "conv5", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn5", "(", "x", ")", ",", "inplace", "=", "True", ")", "\n", "x", "=", "self", ".", "conv6", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn6", "(", "x", ")", ",", "inplace", "=", "True", ")", "\n", "conv6", "=", "x", ".", "clone", "(", ")", "\n", "x", "=", "self", ".", "conv7", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn7", "(", "x", ")", ",", "inplace", "=", "True", ")", "\n", "return", "x", ",", "conv6", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.necks.cmn.single_conv": [[121, 126], ["spconv.SparseSequential", "spconv.SubMConv3d", "torch.nn.BatchNorm1d", "torch.nn.ReLU"], "function", ["None"], ["", "", "def", "single_conv", "(", "in_channels", ",", "out_channels", ",", "indice_key", "=", "None", ")", ":", "\n", "    ", "return", "spconv", ".", "SparseSequential", "(", "\n", "spconv", ".", "SubMConv3d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ",", "indice_key", "=", "indice_key", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "out_channels", ",", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.necks.cmn.double_conv": [[128, 136], ["spconv.SparseSequential", "spconv.SubMConv3d", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "spconv.SubMConv3d", "torch.nn.BatchNorm1d", "torch.nn.ReLU"], "function", ["None"], ["", "def", "double_conv", "(", "in_channels", ",", "out_channels", ",", "indice_key", "=", "None", ")", ":", "\n", "    ", "return", "spconv", ".", "SparseSequential", "(", "\n", "spconv", ".", "SubMConv3d", "(", "in_channels", ",", "out_channels", ",", "3", ",", "bias", "=", "False", ",", "indice_key", "=", "indice_key", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "out_channels", ",", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "spconv", ".", "SubMConv3d", "(", "out_channels", ",", "out_channels", ",", "3", ",", "bias", "=", "False", ",", "indice_key", "=", "indice_key", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "out_channels", ",", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.necks.cmn.triple_conv": [[138, 149], ["spconv.SparseSequential", "spconv.SubMConv3d", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "spconv.SubMConv3d", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "spconv.SubMConv3d", "torch.nn.BatchNorm1d", "torch.nn.ReLU"], "function", ["None"], ["", "def", "triple_conv", "(", "in_channels", ",", "out_channels", ",", "indice_key", "=", "None", ")", ":", "\n", "    ", "return", "spconv", ".", "SparseSequential", "(", "\n", "spconv", ".", "SubMConv3d", "(", "in_channels", ",", "out_channels", ",", "3", ",", "bias", "=", "False", ",", "indice_key", "=", "indice_key", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "out_channels", ",", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "spconv", ".", "SubMConv3d", "(", "out_channels", ",", "out_channels", ",", "3", ",", "bias", "=", "False", ",", "indice_key", "=", "indice_key", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "out_channels", ",", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "spconv", ".", "SubMConv3d", "(", "out_channels", ",", "out_channels", ",", "3", ",", "bias", "=", "False", ",", "indice_key", "=", "indice_key", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "out_channels", ",", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.necks.cmn.stride_conv": [[151, 156], ["spconv.SparseSequential", "spconv.SparseConv3d", "torch.nn.BatchNorm1d", "torch.nn.ReLU"], "function", ["None"], ["", "def", "stride_conv", "(", "in_channels", ",", "out_channels", ",", "indice_key", "=", "None", ")", ":", "\n", "    ", "return", "spconv", ".", "SparseSequential", "(", "\n", "spconv", ".", "SparseConv3d", "(", "in_channels", ",", "out_channels", ",", "3", ",", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "indice_key", "=", "indice_key", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "out_channels", ",", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.necks.cmn.nearest_neighbor_interpolate": [[158, 173], ["mmdet.ops.pointnet2.pointnet2_utils.three_nn", "torch.sum", "torch.sum", "mmdet.ops.pointnet2.pointnet2_utils.three_interpolate"], "function", ["None"], ["", "def", "nearest_neighbor_interpolate", "(", "unknown", ",", "known", ",", "known_feats", ")", ":", "\n", "    ", "\"\"\"\n    :param pts: (n, 4) tensor of the bxyz positions of the unknown features\n    :param ctr: (m, 4) tensor of the bxyz positions of the known features\n    :param ctr_feats: (m, C) tensor of features to be propigated\n    :return:\n        new_features: (n, C) tensor of the features of the unknown features\n    \"\"\"", "\n", "dist", ",", "idx", "=", "pointnet2_utils", ".", "three_nn", "(", "unknown", ",", "known", ")", "\n", "dist_recip", "=", "1.0", "/", "(", "dist", "+", "1e-8", ")", "\n", "norm", "=", "torch", ".", "sum", "(", "dist_recip", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "weight", "=", "dist_recip", "/", "norm", "\n", "interpolated_feats", "=", "pointnet2_utils", ".", "three_interpolate", "(", "known_feats", ",", "idx", ",", "weight", ")", "\n", "\n", "return", "interpolated_feats", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.mask_heads.fcn_mask_head.FCNMaskHead.__init__": [[13, 70], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "range", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "ValueError", "fcn_mask_head.FCNMaskHead.convs.append", "utils.ConvModule", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Upsample", "torch.Upsample"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_convs", "=", "4", ",", "\n", "roi_feat_size", "=", "14", ",", "\n", "in_channels", "=", "256", ",", "\n", "conv_kernel_size", "=", "3", ",", "\n", "conv_out_channels", "=", "256", ",", "\n", "upsample_method", "=", "'deconv'", ",", "\n", "upsample_ratio", "=", "2", ",", "\n", "num_classes", "=", "81", ",", "\n", "class_agnostic", "=", "False", ",", "\n", "normalize", "=", "None", ")", ":", "\n", "        ", "super", "(", "FCNMaskHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "upsample_method", "not", "in", "[", "None", ",", "'deconv'", ",", "'nearest'", ",", "'bilinear'", "]", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Invalid upsample method {}, accepted methods '", "\n", "'are \"deconv\", \"nearest\", \"bilinear\"'", ".", "format", "(", "upsample_method", ")", ")", "\n", "", "self", ".", "num_convs", "=", "num_convs", "\n", "self", ".", "roi_feat_size", "=", "roi_feat_size", "# WARN: not used and reserved", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "conv_kernel_size", "=", "conv_kernel_size", "\n", "self", ".", "conv_out_channels", "=", "conv_out_channels", "\n", "self", ".", "upsample_method", "=", "upsample_method", "\n", "self", ".", "upsample_ratio", "=", "upsample_ratio", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "class_agnostic", "=", "class_agnostic", "\n", "self", ".", "normalize", "=", "normalize", "\n", "self", ".", "with_bias", "=", "normalize", "is", "None", "\n", "\n", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_convs", ")", ":", "\n", "            ", "in_channels", "=", "(", "self", ".", "in_channels", "\n", "if", "i", "==", "0", "else", "self", ".", "conv_out_channels", ")", "\n", "padding", "=", "(", "self", ".", "conv_kernel_size", "-", "1", ")", "//", "2", "\n", "self", ".", "convs", ".", "append", "(", "\n", "ConvModule", "(", "\n", "in_channels", ",", "\n", "self", ".", "conv_out_channels", ",", "\n", "3", ",", "\n", "padding", "=", "padding", ",", "\n", "normalize", "=", "normalize", ",", "\n", "bias", "=", "self", ".", "with_bias", ")", ")", "\n", "", "if", "self", ".", "upsample_method", "is", "None", ":", "\n", "            ", "self", ".", "upsample", "=", "None", "\n", "", "elif", "self", ".", "upsample_method", "==", "'deconv'", ":", "\n", "            ", "self", ".", "upsample", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "self", ".", "conv_out_channels", ",", "\n", "self", ".", "conv_out_channels", ",", "\n", "self", ".", "upsample_ratio", ",", "\n", "stride", "=", "self", ".", "upsample_ratio", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "\n", "scale_factor", "=", "self", ".", "upsample_ratio", ",", "mode", "=", "self", ".", "upsample_method", ")", "\n", "\n", "", "out_channels", "=", "1", "if", "self", ".", "class_agnostic", "else", "self", ".", "num_classes", "\n", "self", ".", "conv_logits", "=", "nn", ".", "Conv2d", "(", "self", ".", "conv_out_channels", ",", "out_channels", ",", "1", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "debug_imgs", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.mask_heads.fcn_mask_head.FCNMaskHead.init_weights": [[71, 78], ["torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "[", "self", ".", "upsample", ",", "self", ".", "conv_logits", "]", ":", "\n", "            ", "if", "m", "is", "None", ":", "\n", "                ", "continue", "\n", "", "nn", ".", "init", ".", "kaiming_normal_", "(", "\n", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.mask_heads.fcn_mask_head.FCNMaskHead.forward": [[79, 88], ["fcn_mask_head.FCNMaskHead.conv_logits", "conv", "fcn_mask_head.FCNMaskHead.upsample", "fcn_mask_head.FCNMaskHead.relu"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "conv", "in", "self", ".", "convs", ":", "\n", "            ", "x", "=", "conv", "(", "x", ")", "\n", "", "if", "self", ".", "upsample", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "if", "self", ".", "upsample_method", "==", "'deconv'", ":", "\n", "                ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "", "", "mask_pred", "=", "self", ".", "conv_logits", "(", "x", ")", "\n", "return", "mask_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.mask_heads.fcn_mask_head.FCNMaskHead.get_target": [[89, 97], ["mmdet.core.mask_target"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.mask.mask_target.mask_target"], ["", "def", "get_target", "(", "self", ",", "sampling_results", ",", "gt_masks", ",", "rcnn_train_cfg", ")", ":", "\n", "        ", "pos_proposals", "=", "[", "res", ".", "pos_bboxes", "for", "res", "in", "sampling_results", "]", "\n", "pos_assigned_gt_inds", "=", "[", "\n", "res", ".", "pos_assigned_gt_inds", "for", "res", "in", "sampling_results", "\n", "]", "\n", "mask_targets", "=", "mask_target", "(", "pos_proposals", ",", "pos_assigned_gt_inds", ",", "\n", "gt_masks", ",", "rcnn_train_cfg", ")", "\n", "return", "mask_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.mask_heads.fcn_mask_head.FCNMaskHead.loss": [[98, 103], ["dict", "mmdet.core.mask_cross_entropy"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.loss.losses.mask_cross_entropy"], ["", "def", "loss", "(", "self", ",", "mask_pred", ",", "mask_targets", ",", "labels", ")", ":", "\n", "        ", "loss", "=", "dict", "(", ")", "\n", "loss_mask", "=", "mask_cross_entropy", "(", "mask_pred", ",", "mask_targets", ",", "labels", ")", "\n", "loss", "[", "'loss_mask'", "]", "=", "loss_mask", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.mask_heads.fcn_mask_head.FCNMaskHead.get_seg_masks": [[104, 158], ["isinstance", "isinstance", "range", "mask_pred.sigmoid().cpu().numpy.sigmoid().cpu().numpy.sigmoid().cpu().numpy", "det_bboxes.cpu().numpy", "det_labels.cpu().numpy", "numpy.round().astype", "numpy.round().astype", "max", "max", "numpy.zeros", "mmcv.imresize", "cls_segms[].append", "range", "pycocotools.encode", "mask_pred.sigmoid().cpu().numpy.sigmoid().cpu().numpy.sigmoid().cpu", "det_bboxes.cpu", "det_labels.cpu", "numpy.round", "numpy.round", "numpy.array", "mask_pred.sigmoid().cpu().numpy.sigmoid().cpu().numpy.sigmoid"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.box_coders.BoxCoder.encode"], ["", "def", "get_seg_masks", "(", "self", ",", "mask_pred", ",", "det_bboxes", ",", "det_labels", ",", "rcnn_test_cfg", ",", "\n", "ori_shape", ",", "scale_factor", ",", "rescale", ")", ":", "\n", "        ", "\"\"\"Get segmentation masks from mask_pred and bboxes.\n\n        Args:\n            mask_pred (Tensor or ndarray): shape (n, #class+1, h, w).\n                For single-scale testing, mask_pred is the direct output of\n                model, whose type is Tensor, while for multi-scale testing,\n                it will be converted to numpy array outside of this method.\n            det_bboxes (Tensor): shape (n, 4/5)\n            det_labels (Tensor): shape (n, )\n            img_shape (Tensor): shape (3, )\n            rcnn_test_cfg (dict): rcnn testing config\n            ori_shape: original image size\n\n        Returns:\n            list[list]: encoded masks\n        \"\"\"", "\n", "if", "isinstance", "(", "mask_pred", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "mask_pred", "=", "mask_pred", ".", "sigmoid", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "assert", "isinstance", "(", "mask_pred", ",", "np", ".", "ndarray", ")", "\n", "\n", "cls_segms", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_classes", "-", "1", ")", "]", "\n", "bboxes", "=", "det_bboxes", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", ":", ",", ":", "4", "]", "\n", "labels", "=", "det_labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "+", "1", "\n", "\n", "if", "rescale", ":", "\n", "            ", "img_h", ",", "img_w", "=", "ori_shape", "[", ":", "2", "]", "\n", "", "else", ":", "\n", "            ", "img_h", "=", "np", ".", "round", "(", "ori_shape", "[", "0", "]", "*", "scale_factor", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "img_w", "=", "np", ".", "round", "(", "ori_shape", "[", "1", "]", "*", "scale_factor", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "scale_factor", "=", "1.0", "\n", "\n", "", "for", "i", "in", "range", "(", "bboxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "bbox", "=", "(", "bboxes", "[", "i", ",", ":", "]", "/", "scale_factor", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "label", "=", "labels", "[", "i", "]", "\n", "w", "=", "max", "(", "bbox", "[", "2", "]", "-", "bbox", "[", "0", "]", "+", "1", ",", "1", ")", "\n", "h", "=", "max", "(", "bbox", "[", "3", "]", "-", "bbox", "[", "1", "]", "+", "1", ",", "1", ")", "\n", "\n", "if", "not", "self", ".", "class_agnostic", ":", "\n", "                ", "mask_pred_", "=", "mask_pred", "[", "i", ",", "label", ",", ":", ",", ":", "]", "\n", "", "else", ":", "\n", "                ", "mask_pred_", "=", "mask_pred", "[", "i", ",", "0", ",", ":", ",", ":", "]", "\n", "", "im_mask", "=", "np", ".", "zeros", "(", "(", "img_h", ",", "img_w", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "bbox_mask", "=", "mmcv", ".", "imresize", "(", "mask_pred_", ",", "(", "w", ",", "h", ")", ")", "\n", "bbox_mask", "=", "(", "bbox_mask", ">", "rcnn_test_cfg", ".", "mask_thr_binary", ")", ".", "astype", "(", "\n", "np", ".", "uint8", ")", "\n", "im_mask", "[", "bbox", "[", "1", "]", ":", "bbox", "[", "1", "]", "+", "h", ",", "bbox", "[", "0", "]", ":", "bbox", "[", "0", "]", "+", "w", "]", "=", "bbox_mask", "\n", "rle", "=", "mask_util", ".", "encode", "(", "\n", "np", ".", "array", "(", "im_mask", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", ",", "order", "=", "'F'", ")", ")", "[", "0", "]", "\n", "cls_segms", "[", "label", "-", "1", "]", ".", "append", "(", "rle", ")", "\n", "\n", "", "return", "cls_segms", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.rpn_heads.rpn_head.RPNHead.__init__": [[34, 58], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "feat_channels", "=", "256", ",", "\n", "num_anchors", "=", "2", ",", "\n", "target_means", "=", "(", ".0", ",", ".0", ",", ".0", ",", ".0", ")", ",", "\n", "target_stds", "=", "(", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ")", ",", "\n", "use_sigmoid_cls", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", "RPNHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "feat_channels", "=", "feat_channels", "\n", "self", ".", "target_means", "=", "target_means", "\n", "self", ".", "target_stds", "=", "target_stds", "\n", "self", ".", "use_sigmoid_cls", "=", "use_sigmoid_cls", "\n", "\n", "self", ".", "rpn_conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "feat_channels", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "num_anchors", "=", "num_anchors", "\n", "out_channels", "=", "(", "self", ".", "num_anchors", "\n", "if", "self", ".", "use_sigmoid_cls", "else", "self", ".", "num_anchors", "*", "2", ")", "\n", "self", ".", "rpn_cls", "=", "nn", ".", "Conv2d", "(", "feat_channels", ",", "out_channels", ",", "1", ")", "\n", "self", ".", "rpn_reg", "=", "nn", ".", "Conv2d", "(", "feat_channels", ",", "self", ".", "num_anchors", "*", "7", ",", "1", ")", "\n", "self", ".", "rpn_dir", "=", "nn", ".", "Conv2d", "(", "feat_channels", ",", "self", ".", "num_anchors", "*", "2", ",", "1", ")", "\n", "self", ".", "debug_imgs", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.rpn_heads.rpn_head.RPNHead.init_weights": [[59, 64], ["utils.normal_init", "utils.normal_init", "utils.normal_init", "utils.normal_init"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.weight_init.normal_init", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.weight_init.normal_init", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.weight_init.normal_init", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.weight_init.normal_init"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "normal_init", "(", "self", ".", "rpn_conv", ",", "std", "=", "0.01", ")", "\n", "normal_init", "(", "self", ".", "rpn_dir", ",", "std", "=", "0.01", ")", "\n", "normal_init", "(", "self", ".", "rpn_cls", ",", "std", "=", "0.01", ")", "\n", "normal_init", "(", "self", ".", "rpn_reg", ",", "std", "=", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.rpn_heads.rpn_head.RPNHead.forward": [[65, 71], ["rpn_head.RPNHead.relu", "rpn_head.RPNHead.rpn_cls", "rpn_head.RPNHead.rpn_reg", "rpn_head.RPNHead.rpn_dir", "rpn_head.RPNHead.rpn_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "rpn_feat", "=", "self", ".", "relu", "(", "self", ".", "rpn_conv", "(", "x", ")", ")", "\n", "rpn_cls_score", "=", "self", ".", "rpn_cls", "(", "rpn_feat", ")", "\n", "rpn_bbox_pred", "=", "self", ".", "rpn_reg", "(", "rpn_feat", ")", "\n", "rpn_dir_pred", "=", "self", ".", "rpn_dir", "(", "rpn_feat", ")", "\n", "return", "rpn_cls_score", ",", "rpn_bbox_pred", ",", "rpn_dir_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.rpn_heads.rpn_head.RPNHead.loss_single": [[72, 111], ["labels.contiguous().view.contiguous().view.contiguous().view", "label_weights.contiguous().view.contiguous().view.contiguous().view", "criterion", "bbox_targets.contiguous().view.contiguous().view.contiguous().view", "bbox_weights.contiguous().view.contiguous().view.contiguous().view", "rpn_bbox_pred.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "mmdet.core.add_sin_difference", "mmdet.core.weighted_smoothl1", "rpn_dir_pred.permute().contiguous().view", "mmdet.core.weighted_cross_entropy", "rpn_cls_score.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "rpn_cls_score.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "labels.contiguous().view.contiguous().view.contiguous", "label_weights.contiguous().view.contiguous().view.contiguous", "bbox_targets.contiguous().view.contiguous().view.contiguous", "bbox_weights.contiguous().view.contiguous().view.contiguous", "rpn_bbox_pred.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "rpn_dir_pred.permute().contiguous", "rpn_cls_score.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "rpn_cls_score.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "rpn_bbox_pred.permute().contiguous().view.permute().contiguous().view.permute", "rpn_dir_pred.permute", "rpn_cls_score.permute().contiguous().view.permute().contiguous().view.permute", "rpn_cls_score.permute().contiguous().view.permute().contiguous().view.permute"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.transforms.add_sin_difference", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.loss.losses.weighted_smoothl1", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.loss.losses.weighted_cross_entropy"], ["", "def", "loss_single", "(", "self", ",", "rpn_cls_score", ",", "rpn_bbox_pred", ",", "rpn_dir_pred", ",", "labels", ",", "label_weights", ",", "\n", "bbox_targets", ",", "bbox_weights", ",", "dir_labels", ",", "dir_weights", ",", "num_total_samples", ",", "cfg", ")", ":", "\n", "\n", "# classification loss", "\n", "        ", "labels", "=", "labels", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "label_weights", "=", "label_weights", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "if", "self", ".", "use_sigmoid_cls", ":", "\n", "            ", "rpn_cls_score", "=", "rpn_cls_score", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "#criterion = weighted_binary_cross_entropy", "\n", "criterion", "=", "weighted_sigmoid_focal_loss", "\n", "", "else", ":", "\n", "            ", "rpn_cls_score", "=", "rpn_cls_score", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "2", ")", "\n", "criterion", "=", "weighted_cross_entropy", "\n", "\n", "", "loss_cls", "=", "criterion", "(", "\n", "rpn_cls_score", ",", "labels", ",", "label_weights", ",", "avg_factor", "=", "num_total_samples", ")", "\n", "\n", "# regression loss", "\n", "bbox_targets", "=", "bbox_targets", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "7", ")", "\n", "bbox_weights", "=", "bbox_weights", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "7", ")", "\n", "rpn_bbox_pred", "=", "rpn_bbox_pred", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "7", ")", "\n", "rpn_bbox_pred", ",", "bbox_targets", "=", "add_sin_difference", "(", "rpn_bbox_pred", ",", "bbox_targets", ")", "\n", "\n", "loss_reg", "=", "weighted_smoothl1", "(", "\n", "rpn_bbox_pred", ",", "\n", "bbox_targets", ",", "\n", "bbox_weights", ",", "\n", "beta", "=", "cfg", ".", "smoothl1_beta", ",", "\n", "avg_factor", "=", "num_total_samples", ")", "\n", "\n", "# direction loss", "\n", "dir_logits", "=", "rpn_dir_pred", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "2", ")", "\n", "loss_dir", "=", "weighted_cross_entropy", "(", "dir_logits", ",", "dir_labels", ",", "dir_weights", ",", "avg_factor", "=", "num_total_samples", ")", "\n", "\n", "loss_reg", "*=", "2", "\n", "loss_dir", "*=", ".2", "\n", "\n", "return", "loss_cls", ",", "loss_reg", ",", "loss_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.rpn_heads.rpn_head.RPNHead.loss": [[112, 137], ["mmdet.core.multi_apply", "sum", "sum", "rpn_head.RPNHead.loss_single", "dict", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "max", "max", "inds.numel", "inds.numel"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.misc.multi_apply", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.retina_head.RetinaHead.loss_single"], ["", "def", "loss", "(", "self", ",", "rpn_cls_scores", ",", "rpn_bbox_preds", ",", "rpn_dir_preds", ",", "gt_bboxes", ",", "gt_labels", ",", "anchors", ",", "anchors_mask", ",", "cfg", ")", ":", "\n", "\n", "        ", "cls_reg_targets", "=", "multi_apply", "(", "anchor_target", ",", "\n", "anchors", ",", "anchors_mask", ",", "gt_bboxes", ",", "gt_labels", ",", "target_means", "=", "self", ".", "target_means", ",", "target_stds", "=", "self", ".", "target_stds", ",", "cfg", "=", "cfg", ",", "sampling", "=", "False", ")", "\n", "\n", "(", "labels_list", ",", "label_weights_list", ",", "bbox_targets_list", ",", "bbox_weights_list", ",", "dir_labels_list", ",", "dir_weights_list", ",", "\n", "pos_inds_list", ",", "neg_inds_list", ")", "=", "cls_reg_targets", "\n", "\n", "num_pos", "=", "sum", "(", "[", "max", "(", "inds", ".", "numel", "(", ")", ",", "1", ")", "for", "inds", "in", "pos_inds_list", "]", ")", "\n", "num_neg", "=", "sum", "(", "[", "max", "(", "inds", ".", "numel", "(", ")", ",", "1", ")", "for", "inds", "in", "neg_inds_list", "]", ")", "\n", "\n", "losses_cls", ",", "losses_reg", ",", "losses_dir", "=", "self", ".", "loss_single", "(", "\n", "rpn_cls_scores", ",", "\n", "rpn_bbox_preds", ",", "\n", "rpn_dir_preds", ",", "\n", "torch", ".", "cat", "(", "labels_list", ")", ",", "\n", "torch", ".", "cat", "(", "label_weights_list", ")", ",", "\n", "torch", ".", "cat", "(", "bbox_targets_list", ")", ",", "\n", "torch", ".", "cat", "(", "bbox_weights_list", ")", ",", "\n", "torch", ".", "cat", "(", "dir_labels_list", ")", ",", "\n", "torch", ".", "cat", "(", "dir_weights_list", ")", ",", "\n", "#num_total_samples=num_pos + num_neg,", "\n", "num_total_samples", "=", "num_pos", ",", "\n", "cfg", "=", "cfg", ")", "\n", "return", "dict", "(", "loss_rpn_cls", "=", "losses_cls", ",", "loss_rpn_reg", "=", "losses_reg", ",", "loss_rpn_dir", "=", "losses_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.rpn_heads.rpn_head.RPNHead.get_proposals": [[138, 157], ["len", "range", "rpn_cls_scores[].detach", "rpn_bbox_preds[].detach", "rpn_dir_preds[].detach", "rpn_head.RPNHead._get_proposals_single", "proposal_list.append"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.rpn_heads.rpn_head.RPNHead._get_proposals_single"], ["", "def", "get_proposals", "(", "self", ",", "rpn_cls_scores", ",", "rpn_bbox_preds", ",", "rpn_dir_preds", ",", "anchors", ",", "anchors_mask", ",", "img_meta", ",", "cfg", ")", ":", "\n", "        ", "num_imgs", "=", "len", "(", "img_meta", ")", "\n", "\n", "proposal_list", "=", "[", "]", "\n", "for", "img_id", "in", "range", "(", "num_imgs", ")", ":", "\n", "            ", "rpn_cls_score", "=", "rpn_cls_scores", "[", "img_id", "]", ".", "detach", "(", ")", "\n", "rpn_bbox_pred", "=", "rpn_bbox_preds", "[", "img_id", "]", ".", "detach", "(", ")", "\n", "rpn_dir_pred", "=", "rpn_dir_preds", "[", "img_id", "]", ".", "detach", "(", ")", "\n", "anchor", "=", "anchors", "[", "img_id", "]", "\n", "anchor_mask", "=", "anchors_mask", "[", "img_id", "]", "\n", "proposals", "=", "self", ".", "_get_proposals_single", "(", "\n", "rpn_cls_score", ",", "\n", "rpn_bbox_pred", ",", "\n", "rpn_dir_pred", ",", "\n", "anchor", ",", "\n", "anchor_mask", ",", "\n", "img_meta", "[", "img_id", "]", ",", "cfg", ")", "\n", "proposal_list", ".", "append", "(", "proposals", ")", "\n", "", "return", "proposal_list", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.rpn_heads.rpn_head.RPNHead._get_proposals_single": [[158, 233], ["rpn_bbox_pred.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "rpn_cls_score.permute().contiguous().view.sigmoid.sort", "mmdet.core.delta2rbbox3d", "mmdet.ops.iou3d.iou3d_utils.nms_gpu", "rpn_cls_score.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "rpn_cls_score.permute().contiguous().view.permute().contiguous().view.sigmoid", "rpn_cls_score.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "mmdet.ops.iou3d.iou3d_utils.boxes3d_to_bev_torch", "dir_label.byte", "torch.softmax", "torch.softmax", "torch.softmax", "rpn_bbox_pred.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "rpn_dir_pred.view", "rpn_cls_score.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "rpn_cls_score.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "rpn_bbox_pred.permute().contiguous().view.permute().contiguous().view.permute", "rpn_cls_score.permute().contiguous().view.permute().contiguous().view.permute", "rpn_cls_score.permute().contiguous().view.permute().contiguous().view.permute"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.transforms.delta2rbbox3d", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.nms_gpu", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.iou3d.iou3d_utils.boxes3d_to_bev_torch"], ["", "def", "_get_proposals_single", "(", "self", ",", "rpn_cls_score", ",", "rpn_bbox_pred", ",", "rpn_dir_pred", ",", "anchors", ",", "anchor_mask", ",", "img_meta", ",", "cfg", ")", ":", "\n", "\n", "        ", "if", "self", ".", "use_sigmoid_cls", ":", "\n", "            ", "rpn_cls_score", "=", "rpn_cls_score", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "scores", "=", "rpn_cls_score", ".", "sigmoid", "(", ")", "\n", "", "else", ":", "\n", "            ", "rpn_cls_score", "=", "rpn_cls_score", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "2", ")", "\n", "scores", "=", "F", ".", "softmax", "(", "rpn_cls_score", ",", "dim", "=", "1", ")", "[", ":", ",", "1", "]", "\n", "\n", "", "rpn_bbox_pred", "=", "rpn_bbox_pred", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "7", ")", "\n", "\n", "rpn_dir_label", "=", "torch", ".", "max", "(", "rpn_dir_pred", ".", "view", "(", "-", "1", ",", "2", ")", ",", "dim", "=", "-", "1", ")", "[", "1", "]", "\n", "\n", "scores", "=", "scores", "[", "anchor_mask", "]", "\n", "rpn_bbox_pred", "=", "rpn_bbox_pred", "[", "anchor_mask", "]", "\n", "dir_label", "=", "rpn_dir_label", "[", "anchor_mask", "]", "\n", "anchors", "=", "anchors", "[", "anchor_mask", "]", "\n", "\n", "#####################################", "\n", "# borrow from bbox_head, for expriments", "\n", "\n", "# select = scores > .3", "\n", "#", "\n", "# bbox_pred = rpn_bbox_pred[select, :]", "\n", "# anchors = anchors[select, :]", "\n", "# scores = scores[select]", "\n", "#", "\n", "# if scores.numel() == 0:", "\n", "#     return bbox_pred, scores", "\n", "#", "\n", "# bboxes = delta2rbbox3d(anchors, bbox_pred, self.target_means,", "\n", "#                        self.target_stds)", "\n", "#", "\n", "# keep = nms_gpu(", "\n", "#     boxes3d_to_bev_torch(bboxes), scores, .1)", "\n", "\n", "# bboxes = bboxes.cpu().numpy()", "\n", "# scores = scores.cpu().numpy()", "\n", "# from mmdet.models.single_stage_heads.ssd_rotate_head import rotate_nms", "\n", "# keep = rotate_nms(bboxes[:, [0, 1, 3, 4, 6]], scores, iou_threshold=.01)", "\n", "\n", "# det_bboxes = bboxes[keep, :]", "\n", "# det_scores = scores[keep]", "\n", "#", "\n", "# return (det_bboxes, det_scores)", "\n", "\n", "#####################################", "\n", "\n", "_", ",", "order", "=", "scores", ".", "sort", "(", "0", ",", "descending", "=", "True", ")", "\n", "\n", "if", "cfg", ".", "nms_pre", ">", "0", ":", "\n", "            ", "order", "=", "order", "[", ":", "cfg", ".", "nms_pre", "]", "\n", "rpn_bbox_pred", "=", "rpn_bbox_pred", "[", "order", ",", ":", "]", "\n", "anchors", "=", "anchors", "[", "order", ",", ":", "]", "\n", "scores", "=", "scores", "[", "order", "]", "\n", "dir_label", "=", "dir_label", "[", "order", "]", "\n", "\n", "", "proposals", "=", "delta2rbbox3d", "(", "anchors", ",", "rpn_bbox_pred", ",", "self", ".", "target_means", ",", "\n", "self", ".", "target_stds", ")", "\n", "\n", "keep", "=", "nms_gpu", "(", "\n", "boxes3d_to_bev_torch", "(", "proposals", ")", ",", "scores", ",", "cfg", ".", "nms_thr", ")", "\n", "\n", "proposals", "=", "proposals", "[", "keep", ",", ":", "]", "\n", "scores", "=", "scores", "[", "keep", "]", "\n", "dir_label", "=", "dir_label", "[", "keep", "]", "\n", "\n", "proposals", "=", "proposals", "[", ":", "cfg", ".", "nms_post", ",", ":", "]", "\n", "scores", "=", "scores", "[", ":", "cfg", ".", "nms_post", "]", "\n", "dir_label", "=", "dir_label", "[", ":", "cfg", ".", "nms_post", "]", "\n", "\n", "opp_labels", "=", "(", "proposals", "[", "...", ",", "-", "1", "]", ">", "0", ")", "^", "dir_label", ".", "byte", "(", ")", "\n", "proposals", "[", "opp_labels", ",", "-", "1", "]", "+=", "np", ".", "pi", "\n", "\n", "return", "proposals", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.base.BaseDetector.__init__": [[16, 18], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BaseDetector", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.base.BaseDetector.with_neck": [[19, 22], ["hasattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "with_neck", "(", "self", ")", ":", "\n", "        ", "return", "hasattr", "(", "self", ",", "'neck'", ")", "and", "self", ".", "neck", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.base.BaseDetector.with_bbox": [[23, 26], ["hasattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "with_bbox", "(", "self", ")", ":", "\n", "        ", "return", "hasattr", "(", "self", ",", "'bbox_head'", ")", "and", "self", ".", "bbox_head", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.base.BaseDetector.with_mask": [[27, 30], ["hasattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "with_mask", "(", "self", ")", ":", "\n", "        ", "return", "hasattr", "(", "self", ",", "'mask_head'", ")", "and", "self", ".", "mask_head", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.base.BaseDetector.extract_feat": [[31, 34], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "extract_feat", "(", "self", ",", "imgs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.base.BaseDetector.extract_feats": [[35, 39], ["isinstance", "base.BaseDetector.extract_feat"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.rpn.RPN.extract_feat"], ["", "def", "extract_feats", "(", "self", ",", "imgs", ")", ":", "\n", "        ", "assert", "isinstance", "(", "imgs", ",", "list", ")", "\n", "for", "img", "in", "imgs", ":", "\n", "            ", "yield", "self", ".", "extract_feat", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.base.BaseDetector.forward_train": [[40, 43], ["None"], "methods", ["None"], ["", "", "@", "abstractmethod", "\n", "def", "forward_train", "(", "self", ",", "imgs", ",", "img_metas", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.base.BaseDetector.simple_test": [[44, 47], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "simple_test", "(", "self", ",", "img", ",", "img_meta", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.base.BaseDetector.aug_test": [[48, 51], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "aug_test", "(", "self", ",", "imgs", ",", "img_metas", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.base.BaseDetector.init_weights": [[52, 56], ["logging.getLogger", "logging.getLogger.info"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "if", "pretrained", "is", "not", "None", ":", "\n", "            ", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "logger", ".", "info", "(", "'load model from: {}'", ".", "format", "(", "pretrained", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.base.BaseDetector.forward_test": [[57, 76], ["len", "imgs[].size", "len", "ValueError", "base.BaseDetector.simple_test", "base.BaseDetector.aug_test", "isinstance", "TypeError", "len", "len", "type"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.rpn.RPN.simple_test", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.rpn.RPN.aug_test"], ["", "", "def", "forward_test", "(", "self", ",", "imgs", ",", "img_metas", ",", "**", "kwargs", ")", ":", "\n", "        ", "for", "var", ",", "name", "in", "[", "(", "imgs", ",", "'imgs'", ")", ",", "(", "img_metas", ",", "'img_metas'", ")", "]", ":", "\n", "            ", "if", "not", "isinstance", "(", "var", ",", "list", ")", ":", "\n", "                ", "raise", "TypeError", "(", "'{} must be a list, but got {}'", ".", "format", "(", "\n", "name", ",", "type", "(", "var", ")", ")", ")", "\n", "\n", "", "", "num_augs", "=", "len", "(", "imgs", ")", "\n", "if", "num_augs", "!=", "len", "(", "img_metas", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'num of augmentations ({}) != num of image meta ({})'", ".", "format", "(", "\n", "len", "(", "imgs", ")", ",", "len", "(", "img_metas", ")", ")", ")", "\n", "# TODO: remove the restriction of imgs_per_gpu == 1 when prepared", "\n", "", "imgs_per_gpu", "=", "imgs", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "assert", "imgs_per_gpu", "==", "1", "\n", "\n", "if", "num_augs", "==", "1", ":", "\n", "            ", "return", "self", ".", "simple_test", "(", "imgs", "[", "0", "]", ",", "img_metas", "[", "0", "]", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "aug_test", "(", "imgs", ",", "img_metas", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.base.BaseDetector.forward": [[77, 82], ["base.BaseDetector.forward_train", "base.BaseDetector.forward_test"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.pointpillars.PointPillars.forward_train", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.pointpillars.PointPillars.forward_test"], ["", "", "def", "forward", "(", "self", ",", "img", ",", "img_meta", ",", "return_loss", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "return_loss", ":", "\n", "            ", "return", "self", ".", "forward_train", "(", "img", ",", "img_meta", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "forward_test", "(", "img", ",", "img_meta", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.base.BaseDetector.show_result": [[83, 117], ["mmdet.core.tensor2imgs", "isinstance", "zip", "len", "len", "mmdet.core.get_classes", "isinstance", "numpy.concatenate", "numpy.vstack", "mmcv.imshow_det_bboxes", "TypeError", "numpy.full", "enumerate", "type"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.misc.tensor2imgs", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.get_classes"], ["", "", "def", "show_result", "(", "self", ",", "\n", "data", ",", "\n", "result", ",", "\n", "img_norm_cfg", ",", "\n", "dataset", "=", "'coco'", ",", "\n", "score_thr", "=", "0.3", ")", ":", "\n", "        ", "img_tensor", "=", "data", "[", "'img'", "]", "[", "0", "]", "\n", "img_metas", "=", "data", "[", "'img_meta'", "]", "[", "0", "]", ".", "data", "[", "0", "]", "\n", "imgs", "=", "tensor2imgs", "(", "img_tensor", ",", "**", "img_norm_cfg", ")", "\n", "assert", "len", "(", "imgs", ")", "==", "len", "(", "img_metas", ")", "\n", "\n", "if", "isinstance", "(", "dataset", ",", "str", ")", ":", "\n", "            ", "class_names", "=", "get_classes", "(", "dataset", ")", "\n", "", "elif", "isinstance", "(", "dataset", ",", "list", ")", ":", "\n", "            ", "class_names", "=", "dataset", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "'dataset must be a valid dataset name or a list'", "\n", "' of class names, not {}'", ".", "format", "(", "type", "(", "dataset", ")", ")", ")", "\n", "\n", "", "for", "img", ",", "img_meta", "in", "zip", "(", "imgs", ",", "img_metas", ")", ":", "\n", "            ", "h", ",", "w", ",", "_", "=", "img_meta", "[", "'img_shape'", "]", "\n", "img_show", "=", "img", "[", ":", "h", ",", ":", "w", ",", ":", "]", "\n", "labels", "=", "[", "\n", "np", ".", "full", "(", "bbox", ".", "shape", "[", "0", "]", ",", "i", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "i", ",", "bbox", "in", "enumerate", "(", "result", ")", "\n", "]", "\n", "labels", "=", "np", ".", "concatenate", "(", "labels", ")", "\n", "bboxes", "=", "np", ".", "vstack", "(", "result", ")", "\n", "mmcv", ".", "imshow_det_bboxes", "(", "\n", "img_show", ",", "\n", "bboxes", ",", "\n", "labels", ",", "\n", "class_names", "=", "class_names", ",", "\n", "score_thr", "=", "score_thr", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.rpn.RPN.__init__": [[11, 25], ["base.BaseDetector.__init__", "builder.build_backbone", "builder.build_rpn_head", "rpn.RPN.init_weights", "builder.build_neck"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.learning_schedules_fastai.FakeOptim.__init__", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.models.builder.build_backbone", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.models.builder.build_rpn_head", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.roi_extractors.single_level.SingleRoIExtractor.init_weights", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.models.builder.build_neck"], ["num_filters", "=", "(", "128", ",", "128", ",", "256", ")", ",", "\n", "upsample_strides", "=", "(", "1", ",", "2", ",", "4", ")", ",", "\n", "num_upsample_filters", "=", "(", "256", ",", "256", ",", "256", ")", ",", "\n", "num_input_features", "=", "128", ")", ":", "\n", "\n", "        ", "\"\"\"upsample_strides support float: [0.25, 0.5, 1]\n        if upsample_strides < 1, conv2d will be used instead of convtranspose2d.\n        \"\"\"", "\n", "super", "(", "RPNBase", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_layer_strides", "=", "layer_strides", "\n", "self", ".", "_num_filters", "=", "num_filters", "\n", "self", ".", "_layer_nums", "=", "layer_nums", "\n", "self", ".", "_upsample_strides", "=", "upsample_strides", "\n", "self", ".", "_num_upsample_filters", "=", "num_upsample_filters", "\n", "self", ".", "_num_input_features", "=", "num_input_features", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.rpn.RPN.init_weights": [[26, 32], ["super().init_weights", "rpn.RPN.backbone.init_weights", "rpn.RPN.rpn_head.init_weights", "rpn.RPN.neck.init_weights"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.roi_extractors.single_level.SingleRoIExtractor.init_weights", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.roi_extractors.single_level.SingleRoIExtractor.init_weights", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.roi_extractors.single_level.SingleRoIExtractor.init_weights", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.roi_extractors.single_level.SingleRoIExtractor.init_weights"], ["self", ".", "_use_norm", "=", "use_norm", "\n", "\n", "assert", "len", "(", "layer_strides", ")", "==", "len", "(", "layer_nums", ")", "\n", "assert", "len", "(", "num_filters", ")", "==", "len", "(", "layer_nums", ")", "\n", "assert", "len", "(", "num_upsample_filters", ")", "==", "len", "(", "upsample_strides", ")", "\n", "self", ".", "_upsample_start_idx", "=", "len", "(", "layer_nums", ")", "-", "len", "(", "upsample_strides", ")", "\n", "must_equal_list", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.rpn.RPN.extract_feat": [[33, 38], ["rpn.RPN.backbone", "rpn.RPN.neck"], "methods", ["None"], ["for", "i", "in", "range", "(", "len", "(", "upsample_strides", ")", ")", ":", "\n", "            ", "must_equal_list", ".", "append", "(", "upsample_strides", "[", "i", "]", "/", "np", ".", "prod", "(", "\n", "layer_strides", "[", ":", "i", "+", "self", ".", "_upsample_start_idx", "+", "1", "]", ")", ")", "\n", "", "for", "val", "in", "must_equal_list", ":", "\n", "            ", "assert", "val", "==", "must_equal_list", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.rpn.RPN.forward_train": [[39, 49], ["rpn.RPN.train_cfg.rpn.get", "rpn.RPN.extract_feat", "rpn.RPN.rpn_head", "rpn.RPN.rpn_head.loss", "mmdet.core.tensor2imgs"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.rpn.RPN.extract_feat", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox_heads.bbox_head.BBoxHead.loss", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.misc.tensor2imgs"], ["", "if", "use_norm", ":", "\n", "            ", "BatchNorm2d", "=", "change_default_args", "(", "\n", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", "(", "nn", ".", "BatchNorm2d", ")", "\n", "Conv2d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "nn", ".", "Conv2d", ")", "\n", "ConvTranspose2d", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "\n", "nn", ".", "ConvTranspose2d", ")", "\n", "", "else", ":", "\n", "            ", "BatchNorm2d", "=", "Empty", "\n", "Conv2d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "nn", ".", "Conv2d", ")", "\n", "ConvTranspose2d", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "\n", "nn", ".", "ConvTranspose2d", ")", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.rpn.RPN.simple_test": [[50, 58], ["rpn.RPN.extract_feat", "rpn.RPN.simple_test_rpn", "proposal_list[].cpu().numpy", "zip", "proposal_list[].cpu"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.rpn.RPN.extract_feat", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.test_mixins.RPNTestMixin.simple_test_rpn"], ["\n", "", "in_filters", "=", "[", "num_input_features", ",", "*", "num_filters", "[", ":", "-", "1", "]", "]", "\n", "blocks", "=", "[", "]", "\n", "deblocks", "=", "[", "]", "\n", "\n", "for", "i", ",", "layer_num", "in", "enumerate", "(", "layer_nums", ")", ":", "\n", "            ", "block", ",", "num_out_filters", "=", "self", ".", "_make_layer", "(", "\n", "in_filters", "[", "i", "]", ",", "\n", "num_filters", "[", "i", "]", ",", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.rpn.RPN.aug_test": [[59, 71], ["rpn.RPN.aug_test_rpn", "proposal_list[].cpu().numpy", "rpn.RPN.extract_feats", "zip", "mmdet.core.bbox_mapping", "proposal_list[].cpu"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.test_mixins.RPNTestMixin.aug_test_rpn", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.base.BaseDetector.extract_feats", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.transforms.bbox_mapping"], ["layer_num", ",", "\n", "stride", "=", "layer_strides", "[", "i", "]", ")", "\n", "blocks", ".", "append", "(", "block", ")", "\n", "if", "i", "-", "self", ".", "_upsample_start_idx", ">=", "0", ":", "\n", "                ", "stride", "=", "upsample_strides", "[", "i", "-", "self", ".", "_upsample_start_idx", "]", "\n", "if", "stride", ">=", "1", ":", "\n", "                    ", "stride", "=", "np", ".", "round", "(", "stride", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "deblock", "=", "nn", ".", "Sequential", "(", "\n", "ConvTranspose2d", "(", "\n", "num_out_filters", ",", "\n", "num_upsample_filters", "[", "i", "-", "self", ".", "_upsample_start_idx", "]", ",", "\n", "stride", ",", "\n", "stride", "=", "stride", ")", ",", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.rpn.RPN.show_result": [[72, 86], ["mmdet.core.tensor2imgs", "zip", "len", "len", "mmcv.imshow_bboxes"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.misc.tensor2imgs"], ["BatchNorm2d", "(", "\n", "num_upsample_filters", "[", "i", "-", "self", ".", "_upsample_start_idx", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "stride", "=", "np", ".", "round", "(", "1", "/", "stride", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "deblock", "=", "nn", ".", "Sequential", "(", "\n", "Conv2d", "(", "\n", "num_out_filters", ",", "\n", "num_upsample_filters", "[", "i", "-", "self", ".", "_upsample_start_idx", "]", ",", "\n", "stride", ",", "\n", "stride", "=", "stride", ")", ",", "\n", "BatchNorm2d", "(", "\n", "num_upsample_filters", "[", "i", "-", "self", ".", "_upsample_start_idx", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.single_stage.SingleStageDetector.__init__": [[179, 242], ["base.BaseDetector.__init__", "builder.build_backbone", "single_stage.SingleStageDetector.init_weights", "builder.build_neck", "builder.build_single_stage_head", "builder.build_single_stage_head", "functools.partial", "single_stage.SingleStageDetector.backbone.parameters", "single_stage.make_fc", "single_stage.make_fc", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "single_stage.SingleStageDetector.neck.parameters", "single_stage.SingleStageDetector.rpn_head.parameters", "single_stage.SingleStageDetector.extra_head.parameters", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.learning_schedules_fastai.FakeOptim.__init__", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.models.builder.build_backbone", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.roi_extractors.single_level.SingleRoIExtractor.init_weights", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.models.builder.build_neck", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.models.builder.build_single_stage_head", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.models.builder.build_single_stage_head", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.single_stage.make_fc", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.single_stage.make_fc"], ["    ", "def", "__init__", "(", "self", ",", "\n", "backbone", ",", "\n", "neck", "=", "None", ",", "\n", "bbox_head", "=", "None", ",", "\n", "extra_head", "=", "None", ",", "\n", "train_cfg", "=", "None", ",", "\n", "test_cfg", "=", "None", ",", "\n", "pretrained", "=", "None", ",", "\n", "full_cfg", "=", "None", ")", ":", "\n", "        ", "super", "(", "SingleStageDetector", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "backbone", "=", "builder", ".", "build_backbone", "(", "backbone", ")", "\n", "\n", "if", "full_cfg", "is", "not", "None", ":", "\n", "            ", "if", "full_cfg", ".", "SA_SSD_fixed", ":", "\n", "                ", "for", "p", "in", "self", ".", "backbone", ".", "parameters", "(", ")", ":", "\n", "                    ", "p", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "", "if", "neck", "is", "not", "None", ":", "\n", "            ", "self", ".", "neck", "=", "builder", ".", "build_neck", "(", "neck", ")", "\n", "\n", "if", "full_cfg", "is", "not", "None", ":", "\n", "                ", "if", "full_cfg", ".", "SA_SSD_fixed", ":", "\n", "                    ", "for", "p", "in", "self", ".", "neck", ".", "parameters", "(", ")", ":", "\n", "                        ", "p", ".", "requires_grad", "=", "False", "\n", "", "", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "if", "bbox_head", "is", "not", "None", ":", "\n", "            ", "self", ".", "rpn_head", "=", "builder", ".", "build_single_stage_head", "(", "bbox_head", ")", "\n", "\n", "if", "full_cfg", "is", "not", "None", ":", "\n", "                ", "if", "full_cfg", ".", "SA_SSD_fixed", ":", "\n", "                    ", "for", "p", "in", "self", ".", "rpn_head", ".", "parameters", "(", ")", ":", "\n", "                        ", "p", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "", "", "if", "extra_head", "is", "not", "None", ":", "\n", "            ", "self", ".", "extra_head", "=", "builder", ".", "build_single_stage_head", "(", "extra_head", ")", "\n", "\n", "self", ".", "grid_offsets", "=", "self", ".", "extra_head", ".", "grid_offsets", "\n", "self", ".", "featmap_stride", "=", "self", ".", "extra_head", ".", "featmap_stride", "\n", "self", ".", "gen_grid_fn", "=", "partial", "(", "gen_sample_grid", ",", "grid_offsets", "=", "self", ".", "grid_offsets", ",", "spatial_scale", "=", "(", "1.0", "/", "self", ".", "featmap_stride", ")", ")", "\n", "\n", "if", "full_cfg", "is", "not", "None", ":", "\n", "                ", "if", "full_cfg", ".", "SA_SSD_fixed", ":", "\n", "                    ", "for", "p", "in", "self", ".", "extra_head", ".", "parameters", "(", ")", ":", "\n", "                        ", "p", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "", "", "self", ".", "train_cfg", "=", "train_cfg", "\n", "self", ".", "test_cfg", "=", "test_cfg", "\n", "self", ".", "full_cfg", "=", "full_cfg", "\n", "\n", "self", ".", "num_samples", "=", "8", "\n", "\n", "self", ".", "init_weights", "(", "pretrained", ")", "\n", "\n", "if", "full_cfg", "is", "not", "None", ":", "\n", "            ", "if", "full_cfg", ".", "USE_EBM", ":", "\n", "                ", "self", ".", "ebm_fc1", "=", "make_fc", "(", "7168", ",", "1024", ")", "\n", "self", ".", "ebm_fc2", "=", "make_fc", "(", "1024", ",", "1024", ")", "\n", "self", ".", "ebm_fc3", "=", "nn", ".", "Linear", "(", "1024", ",", "1", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "ebm_fc3", ".", "weight", ",", "std", "=", "0.001", ")", "\n", "for", "l", "in", "[", "self", ".", "ebm_fc3", "]", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "l", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.single_stage.SingleStageDetector.with_rpn": [[243, 246], ["hasattr"], "methods", ["None"], ["", "", "", "", "@", "property", "\n", "def", "with_rpn", "(", "self", ")", ":", "\n", "        ", "return", "hasattr", "(", "self", ",", "'rpn_head'", ")", "and", "self", ".", "rpn_head", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.single_stage.SingleStageDetector.init_weights": [[247, 251], ["isinstance", "logging.getLogger", "mmcv.runner.load_checkpoint"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "if", "isinstance", "(", "pretrained", ",", "str", ")", ":", "\n", "            ", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "load_checkpoint", "(", "self", ",", "pretrained", ",", "strict", "=", "False", ",", "logger", "=", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.single_stage.SingleStageDetector.merge_second_batch": [[252, 275], ["batch_args.items", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "coors.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "", "def", "merge_second_batch", "(", "self", ",", "batch_args", ")", ":", "\n", "        ", "ret", "=", "{", "}", "\n", "for", "key", ",", "elems", "in", "batch_args", ".", "items", "(", ")", ":", "\n", "            ", "if", "key", "in", "[", "\n", "'voxels'", ",", "'num_points'", ",", "\n", "]", ":", "\n", "                ", "ret", "[", "key", "]", "=", "torch", ".", "cat", "(", "elems", ",", "dim", "=", "0", ")", "\n", "", "elif", "key", "==", "'coordinates'", ":", "\n", "                ", "coors", "=", "[", "]", "\n", "for", "i", ",", "coor", "in", "enumerate", "(", "elems", ")", ":", "\n", "                    ", "coor_pad", "=", "F", ".", "pad", "(", "\n", "coor", ",", "[", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "mode", "=", "'constant'", ",", "\n", "value", "=", "i", ")", "\n", "coors", ".", "append", "(", "coor_pad", ")", "\n", "", "ret", "[", "key", "]", "=", "torch", ".", "cat", "(", "coors", ",", "dim", "=", "0", ")", "\n", "", "elif", "key", "in", "[", "\n", "'img_meta'", ",", "'gt_labels'", ",", "'gt_bboxes'", ",", "\n", "]", ":", "\n", "                ", "ret", "[", "key", "]", "=", "elems", "\n", "", "else", ":", "\n", "                ", "ret", "[", "key", "]", "=", "torch", ".", "stack", "(", "elems", ",", "dim", "=", "0", ")", "\n", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.single_stage.SingleStageDetector.forward_train": [[276, 537], ["len", "single_stage.SingleStageDetector.merge_second_batch", "single_stage.SingleStageDetector.backbone", "single_stage.SingleStageDetector.neck", "dict", "print", "single_stage.SingleStageDetector.neck.aux_loss", "dict.update", "single_stage.SingleStageDetector.rpn_head", "single_stage.SingleStageDetector.rpn_head.get_guided_anchors", "single_stage.SingleStageDetector.extra_head", "single_stage.SingleStageDetector.rpn_head.loss", "dict.update", "single_stage.SingleStageDetector.extra_head.loss", "dict.update", "print", "print", "print", "print", "len", "range", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "single_stage.SingleStageDetector.ebm_fc3", "fs.squeeze.squeeze.squeeze", "y_samples_fs.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "q_y_samples.view.view.view", "print", "print", "print", "print", "print", "print", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dict.update", "conv6.size", "len", "[].size", "[].size", "single_stage.sample_gmm_centered", "y_samples_zero.cuda.cuda.cuda", "q_y_samples.view.view.cuda", "single_stage.wrapToPi", "y_samples.view.view.view", "q_y_samples.view.view.view", "y_samples_list.append", "q_y_samples_list.append", "q_ys_list.append", "single_stage.SingleStageDetector.gen_grid_fn", "ys_pixel_xs.permute().contiguous.permute().contiguous.permute().contiguous", "ys_pixel_ys.permute().contiguous.permute().contiguous.permute().contiguous", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "single_stage.SingleStageDetector.gen_grid_fn", "y_samples_pixel_xs.permute().contiguous.permute().contiguous.permute().contiguous", "y_samples_pixel_ys.permute().contiguous.permute().contiguous.permute().contiguous", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "conv6[].unsqueeze", "conv6[].unsqueeze.expand", "single_stage.bilinear_interpolate_torch_gridsample", "bilinear_interpolate_torch_gridsample.view", "ys_features_list.append", "conv6[].unsqueeze.expand", "single_stage.bilinear_interpolate_torch_gridsample", "bilinear_interpolate_torch_gridsample.view", "y_samples_features_list.append", "single_stage.SingleStageDetector.ebm_fc1", "single_stage.SingleStageDetector.ebm_fc2", "ys_fs.size", "y_samples_fs.view.view.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "q_y_samples.view.view.size", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "dict", "ys_list[].unsqueeze", "y_samples_zero.cuda.cuda.unsqueeze", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "q_y_samples.view.view.unsqueeze", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "bilinear_interpolate_torch_gridsample.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "bilinear_interpolate_torch_gridsample.size", "bilinear_interpolate_torch_gridsample.view.size", "bilinear_interpolate_torch_gridsample.view.size", "exp_vals_0.unsqueeze", "ys_pixel_xs.permute().contiguous.permute().contiguous.permute", "ys_pixel_ys.permute().contiguous.permute().contiguous.permute", "ys_pixel_xs.permute().contiguous.permute().contiguous.unsqueeze", "ys_pixel_ys.permute().contiguous.permute().contiguous.unsqueeze", "y_samples_pixel_xs.permute().contiguous.permute().contiguous.permute", "y_samples_pixel_ys.permute().contiguous.permute().contiguous.permute", "y_samples_pixel_xs.permute().contiguous.permute().contiguous.unsqueeze", "y_samples_pixel_ys.permute().contiguous.permute().contiguous.unsqueeze", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "y_samples.view.view.size", "y_samples.view.view.size", "ys_list[].size", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.pointpillars.PointPillars.merge_second_batch", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.necks.cmn.SpMiddleFHD.aux_loss", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.ssd_rotate_head.SSDRotateHead.get_guided_anchors", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox_heads.bbox_head.BBoxHead.loss", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox_heads.bbox_head.BBoxHead.loss", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.single_stage.sample_gmm_centered", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.single_stage.wrapToPi", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.ssd_rotate_head.bilinear_interpolate_torch_gridsample", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.ssd_rotate_head.bilinear_interpolate_torch_gridsample"], ["", "def", "forward_train", "(", "self", ",", "img", ",", "img_meta", ",", "**", "kwargs", ")", ":", "\n", "# (img has shape: (batch_size, 3, 384, 1248))", "\n", "# (img_meta is a list of batch_size elements, example element: {'img_shape': (375, 1242, 3), 'sample_idx': 3132, 'calib': <mmdet.datasets.kitti_utils.Calibration object at 0x7fc3c16ad898>})", "\n", "# (kwargs is a dict containing the keys \"anchors\", \"voxels\", \"coordinates\", \"num_points\", \"anchors_mask\", \"gt_labels\", \"gt_bboxes\")", "\n", "# # (kwargs[\"anchors\"] etc is a list of batch_size tensors)", "\n", "\n", "# print (img.size())", "\n", "# print (len(img_meta))", "\n", "\n", "        ", "batch_size", "=", "len", "(", "img_meta", ")", "\n", "\n", "ret", "=", "self", ".", "merge_second_batch", "(", "kwargs", ")", "\n", "# (ret[\"voxels\"] has shape: (num_voxels, 4)) (num_voxels is different for different examples) (for batch_size = 2, num_voxels is typically 35000 - 45000)", "\n", "# (ret[\"coordinates\"] has shape: (num_voxels, 4))", "\n", "# print (ret[\"voxels\"].size())", "\n", "# print (ret[\"coordinates\"].size())", "\n", "\n", "vx", "=", "self", ".", "backbone", "(", "ret", "[", "'voxels'", "]", ",", "ret", "[", "'num_points'", "]", ")", "\n", "# (vx has shape: (num_voxels, 4)) (vx is just identical to ret[\"voxels\"]? seems so)", "\n", "# print (vx.size())", "\n", "\n", "(", "x", ",", "conv6", ")", ",", "point_misc", "=", "self", ".", "neck", "(", "vx", ",", "ret", "[", "'coordinates'", "]", ",", "batch_size", ")", "\n", "# (x has shape: (batch_size, 256, 200, 176))", "\n", "# (conv6 has shape: (batch_size, 256, 200, 176))", "\n", "# (point_misc is a list of 3 tensors)", "\n", "# print (x.size())", "\n", "# print (conv6.size())", "\n", "\n", "losses", "=", "dict", "(", ")", "\n", "\n", "if", "not", "self", ".", "full_cfg", ".", "SA_SSD_fixed", ":", "\n", "            ", "aux_loss", "=", "self", ".", "neck", ".", "aux_loss", "(", "*", "point_misc", ",", "gt_bboxes", "=", "ret", "[", "'gt_bboxes'", "]", ")", "\n", "losses", ".", "update", "(", "aux_loss", ")", "\n", "\n", "# RPN forward and loss", "\n", "", "if", "self", ".", "with_rpn", ":", "\n", "            ", "rpn_outs", "=", "self", ".", "rpn_head", "(", "x", ")", "\n", "# (rpn_outs is a list of 3 elements)", "\n", "# (rpn_outs[0] has shape: (batch_size, 200, 176, 14)) (14 = 7*num_anchor_per_loc) (x, y, z, h, w, l, theta)", "\n", "# (rpn_outs[1] has shape: (batch_size, 200, 176, 2)) (2 = 1*num_anchor_per_loc) (conf_score) (just one class (Car))", "\n", "# (rpn_outs[2] has shape: (batch_size, 200, 176, 4)) (4 = 2*num_anchor_per_loc) (classification of heading directon (forward or backward))", "\n", "# print (len(rpn_outs))", "\n", "# print (rpn_outs[0].size())", "\n", "# print (rpn_outs[1].size())", "\n", "# print (rpn_outs[2].size())", "\n", "\n", "if", "not", "self", ".", "full_cfg", ".", "SA_SSD_fixed", ":", "\n", "                ", "rpn_loss_inputs", "=", "rpn_outs", "+", "(", "ret", "[", "'gt_bboxes'", "]", ",", "ret", "[", "'gt_labels'", "]", ",", "ret", "[", "'anchors'", "]", ",", "ret", "[", "'anchors_mask'", "]", ",", "self", ".", "train_cfg", ".", "rpn", ")", "\n", "rpn_losses", "=", "self", ".", "rpn_head", ".", "loss", "(", "*", "rpn_loss_inputs", ")", "\n", "losses", ".", "update", "(", "rpn_losses", ")", "\n", "\n", "", "guided_anchors", "=", "self", ".", "rpn_head", ".", "get_guided_anchors", "(", "*", "rpn_outs", ",", "ret", "[", "'anchors'", "]", ",", "ret", "[", "'anchors_mask'", "]", ",", "ret", "[", "'gt_bboxes'", "]", ",", "thr", "=", "0.1", ")", "\n", "# (guided_anchors is a list of batch_size tensors)", "\n", "# (guided_anchors[i] has shape: (num_guided_anchors_in_pc_i, 7))", "\n", "# # (num_guided_anchors_in_pc_i is different for different i:s and for different examples) (typically, num_guided_anchors_in_pc_i is ~ 10000 - 25000)", "\n", "# # (these are the predicted bboxes (with residuals added to the anchors) with conf_score > 0.1?)", "\n", "# print (len(guided_anchors))", "\n", "# print (guided_anchors[0].size())", "\n", "# print (guided_anchors[1].size())", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "# bbox head forward and loss", "\n", "", "if", "self", ".", "extra_head", ":", "\n", "            ", "bbox_score", "=", "self", ".", "extra_head", "(", "conv6", ",", "guided_anchors", ")", "\n", "# print (bbox_score.size())", "\n", "# (bbox_score has shape: (num_guided_anchors_in_batch))", "\n", "# # (num_guided_anchors_in_batch = num_guided_anchors_in_pc_0 + num_guided_anchors_in_pc_1 + ... + num_guided_anchors_in_pc_{batch_size - 1})", "\n", "\n", "if", "not", "self", ".", "full_cfg", ".", "SA_SSD_fixed", ":", "\n", "                ", "refine_loss_inputs", "=", "(", "bbox_score", ",", "ret", "[", "'gt_bboxes'", "]", ",", "ret", "[", "'gt_labels'", "]", ",", "guided_anchors", ",", "self", ".", "train_cfg", ".", "extra", ")", "\n", "refine_losses", "=", "self", ".", "extra_head", ".", "loss", "(", "*", "refine_loss_inputs", ")", "\n", "losses", ".", "update", "(", "refine_losses", ")", "\n", "\n", "", "", "if", "self", ".", "full_cfg", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "full_cfg", ".", "USE_EBM", ":", "\n", "# print (\"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\")", "\n", "# (conv6 has shape: (batch_size, 256, 200, 176))", "\n", "\n", "# (ret[\"gt_bboxes\"] is a list of batch_size tensors)", "\n", "# (ret[\"gt_bboxes\"][i] has shape: (num_gt_bboxes_i, 7)) (num_gt_bboxes_i can be different for different i:s and for different batches)", "\n", "\n", "                ", "print", "(", "conv6", ".", "size", "(", ")", ")", "\n", "print", "(", "len", "(", "ret", "[", "'gt_bboxes'", "]", ")", ")", "\n", "print", "(", "ret", "[", "'gt_bboxes'", "]", "[", "0", "]", ".", "size", "(", ")", ")", "\n", "print", "(", "ret", "[", "'gt_bboxes'", "]", "[", "1", "]", ".", "size", "(", ")", ")", "\n", "\n", "batch_size", "=", "len", "(", "ret", "[", "'gt_bboxes'", "]", ")", "\n", "\n", "ys_list", "=", "ret", "[", "\"gt_bboxes\"", "]", "\n", "y_samples_list", "=", "[", "]", "\n", "q_y_samples_list", "=", "[", "]", "\n", "q_ys_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "# (ys_list[i] has shape: (num_gt_bboxes_i, 7))", "\n", "# print (ys_list[i].size())", "\n", "\n", "                    ", "y_samples_zero", ",", "q_y_samples", ",", "q_ys", "=", "sample_gmm_centered", "(", "stds", ",", "num_samples", "=", "self", ".", "num_samples", ")", "\n", "y_samples_zero", "=", "y_samples_zero", ".", "cuda", "(", ")", "# (shape: (num_samples, 7))", "\n", "q_y_samples", "=", "q_y_samples", ".", "cuda", "(", ")", "# (shape: (num_samples))", "\n", "y_samples", "=", "ys_list", "[", "i", "]", ".", "unsqueeze", "(", "1", ")", "+", "y_samples_zero", ".", "unsqueeze", "(", "0", ")", "# (shape: (num_gt_bboxes_i, num_samples, 7))", "\n", "y_samples", "[", ":", ",", ":", ",", "3", ":", "6", "]", "=", "min_hwl", "+", "F", ".", "relu", "(", "y_samples", "[", ":", ",", ":", ",", "3", ":", "6", "]", "-", "min_hwl", ")", "\n", "y_samples", "[", ":", ",", ":", ",", "6", "]", "=", "wrapToPi", "(", "y_samples", "[", ":", ",", ":", ",", "6", "]", ")", "\n", "q_y_samples", "=", "q_y_samples", ".", "unsqueeze", "(", "0", ")", "*", "torch", ".", "ones", "(", "y_samples", ".", "size", "(", "0", ")", ",", "y_samples", ".", "size", "(", "1", ")", ")", ".", "cuda", "(", ")", "# (shape: (num_gt_bboxes_i, num_samples))", "\n", "q_ys", "=", "q_ys", "[", "0", "]", "*", "torch", ".", "ones", "(", "ys_list", "[", "i", "]", ".", "size", "(", "0", ")", ")", ".", "cuda", "(", ")", "# (shape: (num_gt_bboxes_i))", "\n", "\n", "# print (ys_list[i][0])", "\n", "# print (y_samples_list[i][0, 0:5])", "\n", "\n", "y_samples", "=", "y_samples", ".", "view", "(", "-", "1", ",", "7", ")", "# (shape: (num_gt_bboxes_i*num_samples, 7)))", "\n", "q_y_samples", "=", "q_y_samples", ".", "view", "(", "-", "1", ")", "# (shape: (num_gt_bboxes_i*num_samples)))", "\n", "\n", "y_samples_list", ".", "append", "(", "y_samples", ")", "\n", "q_y_samples_list", ".", "append", "(", "q_y_samples", ")", "\n", "q_ys_list", ".", "append", "(", "q_ys", ")", "\n", "\n", "# print (y_samples_list[i].size())", "\n", "# print (q_y_samples_list[i].size())", "\n", "# print (q_ys_list[i].size())", "\n", "# print (\"%%%%%\")", "\n", "\n", "", "ys_features_list", "=", "[", "]", "\n", "y_samples_features_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "# (conv6 has shape: (batch_size, 256, 200, 176))", "\n", "# (ys_list[i] has shape: (num_gt_bboxes_i, 7))", "\n", "# (y_samples_list[i] has shape: (num_gt_bboxes_i*num_samples, 7))", "\n", "# print (conv6.size())", "\n", "# print (ys_list[i].size())", "\n", "# print (y_samples_list[i].size())", "\n", "\n", "                    ", "(", "ys_pixel_xs", ",", "ys_pixel_ys", ")", "=", "self", ".", "gen_grid_fn", "(", "ys_list", "[", "i", "]", "[", ":", ",", "[", "0", ",", "1", ",", "3", ",", "4", ",", "6", "]", "]", ")", "\n", "# (both have shape: (4, 7, num_gt_bboxes_i))", "\n", "# print (ys_pixel_xs.size())", "\n", "# print (ys_pixel_ys.size())", "\n", "ys_pixel_xs", "=", "ys_pixel_xs", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "# (shape: (num_gt_bboxes_i, 4, 7))", "\n", "ys_pixel_ys", "=", "ys_pixel_ys", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "# (shape: (num_gt_bboxes_i, 4, 7))", "\n", "# print (ys_pixel_xs.size())", "\n", "# print (ys_pixel_ys.size())", "\n", "ys_pixel_coords", "=", "torch", ".", "cat", "(", "[", "ys_pixel_xs", ".", "unsqueeze", "(", "3", ")", ",", "ys_pixel_ys", ".", "unsqueeze", "(", "3", ")", "]", ",", "3", ")", "\n", "# (shape: (num_gt_bboxes_i, 4, 7, 2))", "\n", "# print (ys_pixel_coords.size())", "\n", "\n", "(", "y_samples_pixel_xs", ",", "y_samples_pixel_ys", ")", "=", "self", ".", "gen_grid_fn", "(", "y_samples_list", "[", "i", "]", "[", ":", ",", "[", "0", ",", "1", ",", "3", ",", "4", ",", "6", "]", "]", ")", "\n", "# (both have shape: (4, 7, num_gt_bboxes_i*num_samples))", "\n", "# print (y_samples_pixel_xs.size())", "\n", "# print (y_samples_pixel_ys.size())", "\n", "y_samples_pixel_xs", "=", "y_samples_pixel_xs", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "# (shape: (num_gt_bboxes_i*num_samples, 4, 7))", "\n", "y_samples_pixel_ys", "=", "y_samples_pixel_ys", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "# (shape: (num_gt_bboxes_i*num_samples, 4, 7))", "\n", "# print (y_samples_pixel_xs.size())", "\n", "# print (y_samples_pixel_ys.size())", "\n", "y_samples_pixel_coords", "=", "torch", ".", "cat", "(", "[", "y_samples_pixel_xs", ".", "unsqueeze", "(", "3", ")", ",", "y_samples_pixel_ys", ".", "unsqueeze", "(", "3", ")", "]", ",", "3", ")", "\n", "# (shape: (num_gt_bboxes_i*num_samples, 4, 7, 2))", "\n", "# print (y_samples_pixel_coords.size())", "\n", "\n", "conv6_i", "=", "conv6", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", "# (shape: (1, 256, 200, 176))", "\n", "# print (conv6_i.size())", "\n", "conv6_i_ys", "=", "conv6_i", ".", "expand", "(", "ys_pixel_coords", ".", "size", "(", "0", ")", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "# (shape: (num_gt_bboxes_i, 256, 200, 176))", "\n", "# print (conv6_i_ys.size())", "\n", "ys_feature_maps", "=", "bilinear_interpolate_torch_gridsample", "(", "conv6_i_ys", ",", "ys_pixel_coords", ")", "\n", "# (shape: (num_gt_bboxes_i, 256, 4, 7))", "\n", "# print (ys_feature_maps.size())", "\n", "ys_features", "=", "ys_feature_maps", ".", "view", "(", "ys_feature_maps", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "# (shape: (num_gt_bboxes_i, 7168)) (7168 = 256*4*7)", "\n", "# print (ys_features.size())", "\n", "ys_features_list", ".", "append", "(", "ys_features", ")", "\n", "\n", "conv6_i_y_samples", "=", "conv6_i", ".", "expand", "(", "y_samples_pixel_coords", ".", "size", "(", "0", ")", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "# (shape: (num_gt_bboxes_i*num_samples, 256, 200, 176))", "\n", "# print (conv6_i_y_samples.size())", "\n", "y_samples_feature_maps", "=", "bilinear_interpolate_torch_gridsample", "(", "conv6_i_y_samples", ",", "y_samples_pixel_coords", ")", "\n", "# (shape: (num_gt_bboxes_i*num_samples, 256, 4, 7))", "\n", "# print (y_samples_feature_maps.size())", "\n", "y_samples_features", "=", "y_samples_feature_maps", ".", "view", "(", "y_samples_feature_maps", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "# (shape: (num_gt_bboxes_i*num_samples, 7168)) (7168 = 256*4*7)", "\n", "# print (y_samples_features.size())", "\n", "y_samples_features_list", ".", "append", "(", "y_samples_features", ")", "\n", "\n", "# print (ys_features_list[0].size())", "\n", "# print (ys_features_list[1].size())", "\n", "", "ys_features", "=", "torch", ".", "cat", "(", "ys_features_list", ",", "0", ")", "\n", "# (shape: (num_gt_bboxes_in_batch, 7168))", "\n", "# print (ys_features.size())", "\n", "\n", "# print (y_samples_features_list[0].size())", "\n", "# print (y_samples_features_list[1].size())", "\n", "y_samples_features", "=", "torch", ".", "cat", "(", "y_samples_features_list", ",", "0", ")", "\n", "# (shape: (num_gt_bboxes_in_batch*num_samples, 7168))", "\n", "# print (y_samples_features.size())", "\n", "\n", "features", "=", "torch", ".", "cat", "(", "[", "ys_features", ",", "y_samples_features", "]", ",", "0", ")", "\n", "# (shape: (num_gt_bboxes_in_batch + num_gt_bboxes_in_batch*num_samples, 7168))", "\n", "# print (features.size())", "\n", "\n", "features", "=", "F", ".", "relu", "(", "self", ".", "ebm_fc1", "(", "features", ")", ")", "# (shape: (num_gt_bboxes_in_batch + num_gt_bboxes_in_batch*num_samples, 1024))", "\n", "# print (features.size())", "\n", "features", "=", "F", ".", "relu", "(", "self", ".", "ebm_fc2", "(", "features", ")", ")", "# (shape: (num_gt_bboxes_in_batch + num_gt_bboxes_in_batch*num_samples, 1024))", "\n", "# print (features.size())", "\n", "\n", "fs", "=", "self", ".", "ebm_fc3", "(", "features", ")", "# (shape: (num_gt_bboxes_in_batch + num_gt_bboxes_in_batch*num_samples, 1))", "\n", "# print (fs.size())", "\n", "fs", "=", "fs", ".", "squeeze", "(", "1", ")", "# (shape: (num_gt_bboxes_in_batch + num_gt_bboxes_in_batch*num_samples))", "\n", "# print (fs.size())", "\n", "\n", "ys_fs", "=", "fs", "[", "0", ":", "ys_features", ".", "size", "(", "0", ")", "]", "\n", "# (shape: (num_gt_bboxes_in_batch))", "\n", "# print (ys_fs.size())", "\n", "\n", "y_samples_fs", "=", "fs", "[", "ys_features", ".", "size", "(", "0", ")", ":", "]", "\n", "# (shape: (num_gt_bboxes_in_batch*num_samples))", "\n", "# print (y_samples_fs.size())", "\n", "\n", "y_samples_fs", "=", "y_samples_fs", ".", "view", "(", "-", "1", ",", "self", ".", "num_samples", ")", "\n", "# (shape: (num_gt_bboxes_in_batch, num_samples))", "\n", "# print (y_samples_fs.size())", "\n", "\n", "q_ys", "=", "torch", ".", "cat", "(", "q_ys_list", ",", "0", ")", "\n", "# (shape: (num_gt_bboxes_in_batch))", "\n", "# print (q_ys.size())", "\n", "\n", "q_y_samples", "=", "torch", ".", "cat", "(", "q_y_samples_list", ",", "0", ")", "\n", "# (shape: (num_gt_bboxes_in_batch*num_samples))", "\n", "# print (q_y_samples.size())", "\n", "\n", "q_y_samples", "=", "q_y_samples", ".", "view", "(", "-", "1", ",", "self", ".", "num_samples", ")", "\n", "# (shape: (num_gt_bboxes_in_batch, num_samples))", "\n", "# print (q_y_samples.size())", "\n", "\n", "# print (\"//////////////////\")", "\n", "# (ys_fs has shape: (num_gt_bboxes_in_batch))", "\n", "# (y_samples_fs has shape: (num_gt_bboxes_in_batch, num_samples))", "\n", "# (q_ys has shape: (num_gt_bboxes_in_batch))", "\n", "# (q_y_samples has shape: (num_gt_bboxes_in_batch, num_samples))", "\n", "\n", "print", "(", "ys_fs", ".", "size", "(", ")", ")", "\n", "print", "(", "y_samples_fs", ".", "size", "(", ")", ")", "\n", "print", "(", "q_ys", ".", "size", "(", ")", ")", "\n", "print", "(", "q_y_samples", ".", "size", "(", ")", ")", "\n", "\n", "# print (ys_fs[0])", "\n", "# print (y_samples_fs[0])", "\n", "# print (q_ys)", "\n", "# print (q_y_samples[0])", "\n", "\n", "print", "(", "\"ys_fs - mean: %f, max: %f, min: %f\"", "%", "(", "torch", ".", "mean", "(", "ys_fs", ")", ".", "item", "(", ")", ",", "torch", ".", "max", "(", "ys_fs", ")", ".", "item", "(", ")", ",", "torch", ".", "min", "(", "ys_fs", ")", ".", "item", "(", ")", ")", ")", "\n", "print", "(", "\"y_samples_fs - mean: %f, max: %f, min: %f\"", "%", "(", "torch", ".", "mean", "(", "y_samples_fs", ")", ".", "item", "(", ")", ",", "torch", ".", "max", "(", "y_samples_fs", ")", ".", "item", "(", ")", ",", "torch", ".", "min", "(", "y_samples_fs", ")", ".", "item", "(", ")", ")", ")", "\n", "\n", "f_samples", "=", "y_samples_fs", "# (shape: (num_gt_bboxes_in_batch, num_samples))", "\n", "p_N_samples", "=", "q_y_samples", "# (shape: (num_gt_bboxes_in_batch, num_samples))", "\n", "f_0", "=", "ys_fs", "# (shape: (num_gt_bboxes_in_batch))", "\n", "p_N_0", "=", "q_ys", "# (shape: (num_gt_bboxes_in_batch))", "\n", "exp_vals_0", "=", "f_0", "-", "torch", ".", "log", "(", "p_N_0", "+", "0.0", ")", "# (shape: (num_gt_bboxes_in_batch))", "\n", "exp_vals_samples", "=", "f_samples", "-", "torch", ".", "log", "(", "p_N_samples", "+", "0.0", ")", "# (shape: (num_gt_bboxes_in_batch, num_samples))", "\n", "exp_vals", "=", "torch", ".", "cat", "(", "[", "exp_vals_0", ".", "unsqueeze", "(", "1", ")", ",", "exp_vals_samples", "]", ",", "dim", "=", "1", ")", "# (shape: (num_gt_bboxes_in_batch, 1+num_samples))", "\n", "ebm_loss", "=", "-", "torch", ".", "mean", "(", "exp_vals_0", "-", "torch", ".", "logsumexp", "(", "exp_vals", ",", "dim", "=", "1", ")", ")", "\n", "losses", ".", "update", "(", "dict", "(", "loss_ebm", "=", "ebm_loss", ",", ")", ")", "\n", "\n", "", "", "print", "(", "\"{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}\"", ")", "\n", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.single_stage.SingleStageDetector.forward_test": [[538, 886], ["print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "len", "single_stage.SingleStageDetector.merge_second_batch", "single_stage.SingleStageDetector.backbone", "single_stage.SingleStageDetector.neck", "single_stage.SingleStageDetector.rpn_head.forward", "single_stage.SingleStageDetector.rpn_head.get_guided_anchors", "single_stage.SingleStageDetector.extra_head", "range", "range", "mmdet.core.kitti_bbox2results", "single_stage.SingleStageDetector.extra_head.get_rescore_bboxes_ebm_guided", "single_stage.SingleStageDetector.extra_head.get_rescore_bboxes", "len", "bboxes.append", "len", "print", "range", "det_bboxes.append", "zip", "len", "range", "range", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "bboxes_i.size", "det_bboxes.append", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "bboxes_i.clone().detach", "single_stage.SingleStageDetector.gen_grid_fn", "ys_pixel_xs.permute().contiguous.permute().contiguous.permute().contiguous", "ys_pixel_ys.permute().contiguous.permute().contiguous.permute().contiguous", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "conv6[].unsqueeze", "conv6[].unsqueeze.expand", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "single_stage.SingleStageDetector.ebm_fc3", "fs.squeeze.squeeze.squeeze", "bboxes_i.detach().cpu().numpy", "single_stage.SingleStageDetector.gen_grid_fn", "ys_pixel_xs.permute().contiguous.permute().contiguous.permute().contiguous", "ys_pixel_ys.permute().contiguous.permute().contiguous.permute().contiguous", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "conv6[].unsqueeze", "conv6[].unsqueeze.expand", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.cat.view", "ys_features_list.append", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "single_stage.SingleStageDetector.ebm_fc3", "fs.squeeze.squeeze.squeeze", "fs_list.append", "bboxes_i.detach().cpu().numpy", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "conv6[].unsqueeze.expand.size", "single_stage.bilinear_interpolate_torch_gridsample", "int", "range", "ys_feature_maps_list.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "single_stage.SingleStageDetector.ebm_fc1", "single_stage.SingleStageDetector.ebm_fc2", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "single_stage.SingleStageDetector.gen_grid_fn", "ys_pixel_xs.permute().contiguous.permute().contiguous.permute().contiguous", "ys_pixel_ys.permute().contiguous.permute().contiguous.permute().contiguous", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "conv6[].unsqueeze", "conv6[].unsqueeze.expand", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "single_stage.SingleStageDetector.ebm_fc3", "new_fs.squeeze.squeeze.squeeze", "refinement_failed.unsqueeze.unsqueeze.unsqueeze", "refinement_failed.unsqueeze.unsqueeze.float", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "conv6[].unsqueeze.expand.size", "single_stage.bilinear_interpolate_torch_gridsample", "int", "range", "ys_feature_maps_list.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "single_stage.SingleStageDetector.ebm_fc1", "single_stage.SingleStageDetector.ebm_fc2", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "bboxes_i.clone", "ys_pixel_xs.permute().contiguous.permute().contiguous.permute", "ys_pixel_ys.permute().contiguous.permute().contiguous.permute", "ys_pixel_xs.permute().contiguous.permute().contiguous.unsqueeze", "ys_pixel_ys.permute().contiguous.permute().contiguous.unsqueeze", "math.floor", "ys_feature_maps_list.append", "single_stage.bilinear_interpolate_torch_gridsample", "fs.squeeze.squeeze.sum", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "conv6[].unsqueeze.expand.size", "single_stage.bilinear_interpolate_torch_gridsample", "int", "range", "ys_feature_maps_list.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "single_stage.SingleStageDetector.ebm_fc1", "single_stage.SingleStageDetector.ebm_fc2", "refinement_failed.unsqueeze.unsqueeze.float", "bboxes_i.detach().cpu", "ys_pixel_xs.permute().contiguous.permute().contiguous.permute", "ys_pixel_ys.permute().contiguous.permute().contiguous.permute", "ys_pixel_xs.permute().contiguous.permute().contiguous.unsqueeze", "ys_pixel_ys.permute().contiguous.permute().contiguous.unsqueeze", "math.floor", "ys_feature_maps_list.append", "single_stage.bilinear_interpolate_torch_gridsample", "bboxes_i.detach().cpu", "bboxes_i.size", "single_stage.bilinear_interpolate_torch_gridsample", "ys_pixel_xs.permute().contiguous.permute().contiguous.permute", "ys_pixel_ys.permute().contiguous.permute().contiguous.permute", "ys_pixel_xs.permute().contiguous.permute().contiguous.unsqueeze", "ys_pixel_ys.permute().contiguous.permute().contiguous.unsqueeze", "math.floor", "ys_feature_maps_list.append", "single_stage.bilinear_interpolate_torch_gridsample", "single_stage.bilinear_interpolate_torch_gridsample", "conv6[].unsqueeze.expand.size", "single_stage.bilinear_interpolate_torch_gridsample", "bboxes_i.detach", "conv6[].unsqueeze.expand.size", "bboxes_i.detach", "conv6[].unsqueeze.expand.size"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.pointpillars.PointPillars.merge_second_batch", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.roi_extractors.single_level.SingleRoIExtractor.forward", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.ssd_rotate_head.SSDRotateHead.get_guided_anchors", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.transforms.kitti_bbox2results", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.ssd_rotate_head.PSWarpHead.get_rescore_bboxes_ebm_guided", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.ssd_rotate_head.PSWarpHead.get_rescore_bboxes", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.ssd_rotate_head.bilinear_interpolate_torch_gridsample", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.ssd_rotate_head.bilinear_interpolate_torch_gridsample", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.ssd_rotate_head.bilinear_interpolate_torch_gridsample", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.ssd_rotate_head.bilinear_interpolate_torch_gridsample", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.ssd_rotate_head.bilinear_interpolate_torch_gridsample", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.ssd_rotate_head.bilinear_interpolate_torch_gridsample", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.ssd_rotate_head.bilinear_interpolate_torch_gridsample", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.ssd_rotate_head.bilinear_interpolate_torch_gridsample", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.ssd_rotate_head.bilinear_interpolate_torch_gridsample"], ["", "def", "forward_test", "(", "self", ",", "img", ",", "img_meta", ",", "**", "kwargs", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "batch_size", "=", "len", "(", "img_meta", ")", "# (batch_size = 1)", "\n", "# print (batch_size)", "\n", "\n", "ret", "=", "self", ".", "merge_second_batch", "(", "kwargs", ")", "\n", "# (ret[\"voxels\"] has shape: (num_voxels, 4)) (num_voxels is different for different examples) (for batch_size = 2, num_voxels is typically 35000 - 45000)", "\n", "# (ret[\"coordinates\"] has shape: (num_voxels, 4))", "\n", "# print (ret[\"voxels\"].size())", "\n", "# print (ret[\"coordinates\"].size())", "\n", "\n", "vx", "=", "self", ".", "backbone", "(", "ret", "[", "'voxels'", "]", ",", "ret", "[", "'num_points'", "]", ")", "\n", "# (vx has shape: (num_voxels, 4)) (vx is just identical to ret[\"voxels\"]? seems so)", "\n", "# print (vx.size())", "\n", "\n", "(", "x", ",", "conv6", ")", "=", "self", ".", "neck", "(", "vx", ",", "ret", "[", "'coordinates'", "]", ",", "batch_size", ",", "is_test", "=", "True", ")", "\n", "# (x has shape: (batch_size, 256, 200, 176))", "\n", "# (conv6 has shape: (batch_size, 256, 200, 176))", "\n", "# print (x.size())", "\n", "# print (conv6.size())", "\n", "\n", "rpn_outs", "=", "self", ".", "rpn_head", ".", "forward", "(", "x", ")", "\n", "# (rpn_outs is a list of 3 elements)", "\n", "# (rpn_outs[0] has shape: (batch_size, 200, 176, 14)) (14 = 7*num_anchor_per_loc) (x, y, z, h, w, l, theta)", "\n", "# (rpn_outs[1] has shape: (batch_size, 200, 176, 2)) (2 = 1*num_anchor_per_loc) (conf_score) (just one class (Car))", "\n", "# (rpn_outs[2] has shape: (batch_size, 200, 176, 4)) (4 = 2*num_anchor_per_loc) (classification of heading directon (forward or backward))", "\n", "# print (len(rpn_outs))", "\n", "# print (rpn_outs[0].size())", "\n", "# print (rpn_outs[1].size())", "\n", "# print (rpn_outs[2].size())", "\n", "\n", "guided_anchors", "=", "self", ".", "rpn_head", ".", "get_guided_anchors", "(", "*", "rpn_outs", ",", "ret", "[", "'anchors'", "]", ",", "ret", "[", "'anchors_mask'", "]", ",", "None", ",", "thr", "=", ".1", ")", "\n", "# (guided_anchors is a list of batch_size tensors)", "\n", "# (guided_anchors[i] has shape: (num_guided_anchors_in_pc_i, 7))", "\n", "# # (num_guided_anchors_in_pc_i is different for different i:s and for different examples)", "\n", "# # (these are the predicted bboxes (with residuals added to the anchors) with conf_score > 0.1?)", "\n", "# print (len(guided_anchors))", "\n", "# print (guided_anchors[0].size())", "\n", "\n", "bbox_score", ",", "guided_anchors", "=", "self", ".", "extra_head", "(", "conv6", ",", "guided_anchors", ",", "is_test", "=", "True", ")", "\n", "# (bbox_score is a list of batch_size tensors)", "\n", "# # (bbox_score[i] has shape: (num_guided_anchors_in_pc_i))", "\n", "# (guided_anchors is a list of batch_size tensors)", "\n", "# # (guided_anchors[i] has shape: (num_guided_anchors_in_pc_i, 7))", "\n", "# print (len(bbox_score))", "\n", "# print (bbox_score[0].size())", "\n", "# print (bbox_score[0])", "\n", "# print (len(guided_anchors))", "\n", "# print (guided_anchors[0].size())", "\n", "\n", "if", "self", ".", "full_cfg", "is", "not", "None", ":", "\n", "                ", "if", "self", ".", "full_cfg", ".", "USE_EBM", "and", "(", "self", ".", "test_cfg", ".", "extra", ".", "EBM_guided", "or", "self", ".", "test_cfg", ".", "extra", ".", "EBM_refine", ")", ":", "\n", "# print (\"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\")", "\n", "# (conv6 has shape: (batch_size, 256, 200, 176))", "\n", "# (guided_anchors is a list of batch_size tensors)", "\n", "# (guided_anchors[i] has shape: (num_guided_anchors_in_pc_i, 7))", "\n", "\n", "                    ", "batch_size", "=", "len", "(", "guided_anchors", ")", "\n", "\n", "ys_list", "=", "guided_anchors", "\n", "\n", "ys_features_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "# (conv6 has shape: (batch_size, 256, 200, 176))", "\n", "# (ys_list[i] has shape: (num_guided_anchors_in_pc_i, 7))", "\n", "# print (conv6.size())", "\n", "# print (ys_list[i].size())", "\n", "\n", "                        ", "(", "ys_pixel_xs", ",", "ys_pixel_ys", ")", "=", "self", ".", "gen_grid_fn", "(", "ys_list", "[", "i", "]", "[", ":", ",", "[", "0", ",", "1", ",", "3", ",", "4", ",", "6", "]", "]", ")", "\n", "# (both have shape: (4, 7, num_guided_anchors_in_pc_i))", "\n", "# print (ys_pixel_xs.size())", "\n", "# print (ys_pixel_ys.size())", "\n", "ys_pixel_xs", "=", "ys_pixel_xs", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "# (shape: (num_guided_anchors_in_pc_i, 4, 7))", "\n", "ys_pixel_ys", "=", "ys_pixel_ys", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "# (shape: (num_guided_anchors_in_pc_i, 4, 7))", "\n", "# print (ys_pixel_xs.size())", "\n", "# print (ys_pixel_ys.size())", "\n", "ys_pixel_coords", "=", "torch", ".", "cat", "(", "[", "ys_pixel_xs", ".", "unsqueeze", "(", "3", ")", ",", "ys_pixel_ys", ".", "unsqueeze", "(", "3", ")", "]", ",", "3", ")", "\n", "# (shape: (num_guided_anchors_in_pc_i, 4, 7, 2))", "\n", "# print (ys_pixel_coords.size())", "\n", "\n", "conv6_i", "=", "conv6", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", "# (shape: (1, 256, 200, 176))", "\n", "# print (conv6_i.size())", "\n", "conv6_i_ys", "=", "conv6_i", ".", "expand", "(", "ys_pixel_coords", ".", "size", "(", "0", ")", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "# (shape: (num_guided_anchors_in_pc_i, 256, 200, 176))", "\n", "# print (conv6_i_ys.size())", "\n", "\n", "if", "conv6_i_ys", ".", "size", "(", "0", ")", "<", "150", ":", "\n", "                            ", "ys_feature_maps", "=", "bilinear_interpolate_torch_gridsample", "(", "conv6_i_ys", ",", "ys_pixel_coords", ")", "\n", "# (shape: (num_guided_anchors_in_pc_i, 256, 4, 7))", "\n", "# print (ys_feature_maps.size())", "\n", "", "else", ":", "\n", "                            ", "num_iters", "=", "int", "(", "math", ".", "floor", "(", "conv6_i_ys", ".", "size", "(", "0", ")", "/", "150.0", ")", ")", "\n", "ys_feature_maps_list", "=", "[", "]", "\n", "for", "iter", "in", "range", "(", "num_iters", ")", ":", "\n", "                                ", "ys_feature_maps_list", ".", "append", "(", "bilinear_interpolate_torch_gridsample", "(", "conv6_i_ys", "[", "(", "150", "*", "iter", ")", ":", "(", "150", "*", "(", "iter", "+", "1", ")", ")", "]", ",", "ys_pixel_coords", "[", "(", "150", "*", "iter", ")", ":", "(", "150", "*", "(", "iter", "+", "1", ")", ")", "]", ")", ")", "\n", "", "ys_feature_maps_list", ".", "append", "(", "bilinear_interpolate_torch_gridsample", "(", "conv6_i_ys", "[", "(", "150", "*", "num_iters", ")", ":", "]", ",", "ys_pixel_coords", "[", "(", "150", "*", "num_iters", ")", ":", "]", ")", ")", "\n", "ys_feature_maps", "=", "torch", ".", "cat", "(", "ys_feature_maps_list", ",", "0", ")", "\n", "# (shape: (num_guided_anchors_in_pc_i, 256, 4, 7))", "\n", "\n", "", "ys_features", "=", "ys_feature_maps", ".", "view", "(", "ys_feature_maps", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "# (shape: (num_guided_anchors_in_pc_i, 7168)) (7168 = 256*4*7)", "\n", "# print (ys_features.size())", "\n", "ys_features_list", ".", "append", "(", "ys_features", ")", "\n", "\n", "", "fs_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "                        ", "features", "=", "F", ".", "relu", "(", "self", ".", "ebm_fc1", "(", "ys_features_list", "[", "i", "]", ")", ")", "# (shape: (num_guided_anchors_in_pc_i, 1024))", "\n", "# print (features.size())", "\n", "features", "=", "F", ".", "relu", "(", "self", ".", "ebm_fc2", "(", "features", ")", ")", "# (shape: (num_guided_anchors_in_pc_i, 1024))", "\n", "# print (features.size())", "\n", "\n", "fs", "=", "self", ".", "ebm_fc3", "(", "features", ")", "# (shape: (num_guided_anchors_in_pc_i, 1))", "\n", "# print (fs.size())", "\n", "fs", "=", "fs", ".", "squeeze", "(", "1", ")", "# (shape: (num_guided_anchors_in_pc_i))", "\n", "# print (fs.size())", "\n", "\n", "fs_list", ".", "append", "(", "fs", ")", "\n", "\n", "# (fs_list is a list of batch_size tensors)", "\n", "# # (fs_list[i] has shape: (num_guided_anchors_in_pc_i))", "\n", "# print (len(fs_list))", "\n", "# print (fs_list[0].size())", "\n", "# print (fs_list[0])", "\n", "\n", "", "", "", "if", "self", ".", "test_cfg", ".", "extra", ".", "EBM_guided", ":", "\n", "                ", "det_bboxes", ",", "det_scores", ",", "det_fs", "=", "self", ".", "extra_head", ".", "get_rescore_bboxes_ebm_guided", "(", "\n", "guided_anchors", ",", "bbox_score", ",", "fs_list", ",", "img_meta", ",", "self", ".", "test_cfg", ".", "extra", ")", "\n", "", "else", ":", "\n", "                ", "det_bboxes", ",", "det_scores", "=", "self", ".", "extra_head", ".", "get_rescore_bboxes", "(", "\n", "guided_anchors", ",", "bbox_score", ",", "img_meta", ",", "self", ".", "test_cfg", ".", "extra", ")", "\n", "# (det_scores is a list of batch_size numpy arrays)", "\n", "# # (det_scores[i] has shape: (num_detections_i)) (num_detections_i <= num_guided_anchors_in_pc_i)", "\n", "# (det_fs is a list of batch_size numpy arrays)", "\n", "# # (det_fs[i] has shape: (num_detections_i))", "\n", "# (det_bboxes is a list of batch_size numpy arrays)", "\n", "# # (det_bboxes[i] has shape: (num_detections_i, 7))", "\n", "# print (len(det_scores))", "\n", "# print (det_scores[0].shape)", "\n", "# print (len(det_bboxes))", "\n", "# print (det_bboxes[0].shape)", "\n", "\n", "# print (\" \")", "\n", "# print (\"fs before refinement:\")", "\n", "# print (det_fs.detach().cpu().numpy())", "\n", "# print (\"bboxes before refinement:\")", "\n", "# print (det_bboxes[0])", "\n", "# print (\"%%%%%%%%%%%%%%%%%%%%%%\")", "\n", "# (end of \"with torch.no_grad():\"\") ####################################", "\n", "\n", "", "", "if", "self", ".", "test_cfg", ".", "extra", ".", "EBM_refine", ":", "\n", "# (det_bboxes is a list of batch_size numpy arrays)", "\n", "# # (det_bboxes[i] has shape: (num_detections_i, 7))", "\n", "# (conv6 has shape: (batch_size, 256, 200, 176))", "\n", "# (batch_size == 1)", "\n", "# print (conv6.size())", "\n", "\n", "            ", "bboxes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "det_bboxes", ")", ")", ":", "\n", "                ", "bboxes", ".", "append", "(", "torch", ".", "from_numpy", "(", "det_bboxes", "[", "i", "]", ")", ".", "cuda", "(", ")", ")", "\n", "# (bboxes is a list of batch_size tensors)", "\n", "# # (bboxes[i] has shape: (num_detections_i, 7))", "\n", "# print (len(bboxes))", "\n", "# print (bboxes[0].size())", "\n", "\n", "", "conv6", ".", "requires_grad", "=", "True", "\n", "\n", "det_bboxes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "bboxes", ")", ")", ":", "\n", "# (conv6 has shape: (batch_size, 256, 200, 176))", "\n", "# (bboxes[i] has shape: (num_detections_i, 7))", "\n", "# print (conv6.size())", "\n", "# print (bboxes[i].size())", "\n", "\n", "                ", "bboxes_i", "=", "bboxes", "[", "i", "]", "# (shape: (num_detections_i, 7))", "\n", "if", "bboxes_i", ".", "size", "(", "0", ")", "==", "0", ":", "\n", "                    ", "det_bboxes", ".", "append", "(", "bboxes_i", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "continue", "\n", "\n", "", "step_sizes", "=", "0.0001", "*", "torch", ".", "ones", "(", "bboxes_i", ".", "size", "(", "0", ")", ",", "1", ")", ".", "cuda", "(", ")", "# (shape: (num_detections_i, 1))", "\n", "print", "(", "self", ".", "test_cfg", ".", "extra", ".", "EBM_refine_steps", ")", "\n", "for", "step", "in", "range", "(", "self", ".", "test_cfg", ".", "extra", ".", "EBM_refine_steps", ")", ":", "\n", "# print (step_sizes)", "\n", "\n", "                    ", "bboxes_init", "=", "bboxes_i", ".", "clone", "(", ")", ".", "detach", "(", ")", "# (shape: (num_detections_i, 7))", "\n", "\n", "bboxes_init", ".", "requires_grad", "=", "True", "\n", "\n", "# print (bboxes_init[0])", "\n", "# print (bboxes_init.size())", "\n", "\n", "############################################################", "\n", "############################################################", "\n", "############################################################", "\n", "############################################################", "\n", "############################################################", "\n", "(", "ys_pixel_xs", ",", "ys_pixel_ys", ")", "=", "self", ".", "gen_grid_fn", "(", "bboxes_init", "[", ":", ",", "[", "0", ",", "1", ",", "3", ",", "4", ",", "6", "]", "]", ")", "\n", "# (both have shape: (4, 7, num_detections_i))", "\n", "# print (ys_pixel_xs.size())", "\n", "# print (ys_pixel_ys.size())", "\n", "ys_pixel_xs", "=", "ys_pixel_xs", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "# (shape: (num_detections_i, 4, 7))", "\n", "ys_pixel_ys", "=", "ys_pixel_ys", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "# (shape: (num_detections_i, 4, 7))", "\n", "# print (ys_pixel_xs.size())", "\n", "# print (ys_pixel_ys.size())", "\n", "ys_pixel_coords", "=", "torch", ".", "cat", "(", "[", "ys_pixel_xs", ".", "unsqueeze", "(", "3", ")", ",", "ys_pixel_ys", ".", "unsqueeze", "(", "3", ")", "]", ",", "3", ")", "\n", "# (shape: (num_detections_i, 4, 7, 2))", "\n", "# print (ys_pixel_coords.size())", "\n", "#", "\n", "conv6_i", "=", "conv6", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", "# (shape: (1, 256, 200, 176))", "\n", "# print (conv6_i.size())", "\n", "conv6_i_ys", "=", "conv6_i", ".", "expand", "(", "ys_pixel_coords", ".", "size", "(", "0", ")", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "# (shape: (num_detections_i, 256, 200, 176))", "\n", "# print (conv6_i_ys.size())", "\n", "#", "\n", "if", "conv6_i_ys", ".", "size", "(", "0", ")", "<", "150", ":", "\n", "                        ", "ys_feature_maps", "=", "bilinear_interpolate_torch_gridsample", "(", "conv6_i_ys", ",", "ys_pixel_coords", ")", "\n", "# (shape: (num_detections_i, 256, 4, 7))", "\n", "# print (ys_feature_maps.size())", "\n", "", "else", ":", "\n", "                        ", "num_iters", "=", "int", "(", "math", ".", "floor", "(", "conv6_i_ys", ".", "size", "(", "0", ")", "/", "150.0", ")", ")", "\n", "ys_feature_maps_list", "=", "[", "]", "\n", "for", "iter", "in", "range", "(", "num_iters", ")", ":", "\n", "                            ", "ys_feature_maps_list", ".", "append", "(", "bilinear_interpolate_torch_gridsample", "(", "conv6_i_ys", "[", "(", "150", "*", "iter", ")", ":", "(", "150", "*", "(", "iter", "+", "1", ")", ")", "]", ",", "ys_pixel_coords", "[", "(", "150", "*", "iter", ")", ":", "(", "150", "*", "(", "iter", "+", "1", ")", ")", "]", ")", ")", "\n", "", "ys_feature_maps_list", ".", "append", "(", "bilinear_interpolate_torch_gridsample", "(", "conv6_i_ys", "[", "(", "150", "*", "num_iters", ")", ":", "]", ",", "ys_pixel_coords", "[", "(", "150", "*", "num_iters", ")", ":", "]", ")", ")", "\n", "ys_feature_maps", "=", "torch", ".", "cat", "(", "ys_feature_maps_list", ",", "0", ")", "\n", "# (shape: (num_detections_i, 256, 4, 7))", "\n", "#", "\n", "", "ys_features", "=", "ys_feature_maps", ".", "view", "(", "ys_feature_maps", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "# (shape: (num_detections_i, 7168)) (7168 = 256*4*7)", "\n", "# print (ys_features.size())", "\n", "#", "\n", "features", "=", "F", ".", "relu", "(", "self", ".", "ebm_fc1", "(", "ys_features", ")", ")", "# (shape: (num_detections_i, 1024))", "\n", "# print (features.size())", "\n", "features", "=", "F", ".", "relu", "(", "self", ".", "ebm_fc2", "(", "features", ")", ")", "# (shape: (num_detections_i, 1024))", "\n", "# print (features.size())", "\n", "#", "\n", "fs", "=", "self", ".", "ebm_fc3", "(", "features", ")", "# (shape: (num_detections_i, 1))", "\n", "# print (fs.size())", "\n", "fs", "=", "fs", ".", "squeeze", "(", "1", ")", "# (shape: (num_detections_i))", "\n", "# print (fs.size())", "\n", "# print (fs)", "\n", "############################################################", "\n", "############################################################", "\n", "############################################################", "\n", "############################################################", "\n", "############################################################", "\n", "\n", "# fs.backward(gradient = torch.ones_like(fs))", "\n", "#", "\n", "grad_bboxes_init", "=", "torch", ".", "autograd", ".", "grad", "(", "fs", ".", "sum", "(", ")", ",", "bboxes_init", ",", "create_graph", "=", "True", ")", "[", "0", "]", "\n", "# (shape: (num_detections_i, 7)) (same as bboxes_init)", "\n", "# print (grad_bboxes_init.size())", "\n", "\n", "# bboxes_refined = bboxes_init + 0.0001*bboxes_init.grad", "\n", "#", "\n", "bboxes_refined", "=", "bboxes_init", "+", "step_sizes", "*", "grad_bboxes_init", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "############################################################", "\n", "############################################################", "\n", "############################################################", "\n", "############################################################", "\n", "############################################################", "\n", "                        ", "(", "ys_pixel_xs", ",", "ys_pixel_ys", ")", "=", "self", ".", "gen_grid_fn", "(", "bboxes_refined", "[", ":", ",", "[", "0", ",", "1", ",", "3", ",", "4", ",", "6", "]", "]", ")", "\n", "# (both have shape: (4, 7, num_detections_i))", "\n", "# print (ys_pixel_xs.size())", "\n", "# print (ys_pixel_ys.size())", "\n", "ys_pixel_xs", "=", "ys_pixel_xs", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "# (shape: (num_detections_i, 4, 7))", "\n", "ys_pixel_ys", "=", "ys_pixel_ys", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "# (shape: (num_detections_i, 4, 7))", "\n", "# print (ys_pixel_xs.size())", "\n", "# print (ys_pixel_ys.size())", "\n", "ys_pixel_coords", "=", "torch", ".", "cat", "(", "[", "ys_pixel_xs", ".", "unsqueeze", "(", "3", ")", ",", "ys_pixel_ys", ".", "unsqueeze", "(", "3", ")", "]", ",", "3", ")", "\n", "# (shape: (num_detections_i, 4, 7, 2))", "\n", "# print (ys_pixel_coords.size())", "\n", "#", "\n", "conv6_i", "=", "conv6", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", "# (shape: (1, 256, 200, 176))", "\n", "# print (conv6_i.size())", "\n", "conv6_i_ys", "=", "conv6_i", ".", "expand", "(", "ys_pixel_coords", ".", "size", "(", "0", ")", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "# (shape: (num_detections_i, 256, 200, 176))", "\n", "# print (conv6_i_ys.size())", "\n", "#", "\n", "if", "conv6_i_ys", ".", "size", "(", "0", ")", "<", "150", ":", "\n", "                            ", "ys_feature_maps", "=", "bilinear_interpolate_torch_gridsample", "(", "conv6_i_ys", ",", "ys_pixel_coords", ")", "\n", "# (shape: (num_detections_i, 256, 4, 7))", "\n", "# print (ys_feature_maps.size())", "\n", "", "else", ":", "\n", "                            ", "num_iters", "=", "int", "(", "math", ".", "floor", "(", "conv6_i_ys", ".", "size", "(", "0", ")", "/", "150.0", ")", ")", "\n", "ys_feature_maps_list", "=", "[", "]", "\n", "for", "iter", "in", "range", "(", "num_iters", ")", ":", "\n", "                                ", "ys_feature_maps_list", ".", "append", "(", "bilinear_interpolate_torch_gridsample", "(", "conv6_i_ys", "[", "(", "150", "*", "iter", ")", ":", "(", "150", "*", "(", "iter", "+", "1", ")", ")", "]", ",", "ys_pixel_coords", "[", "(", "150", "*", "iter", ")", ":", "(", "150", "*", "(", "iter", "+", "1", ")", ")", "]", ")", ")", "\n", "", "ys_feature_maps_list", ".", "append", "(", "bilinear_interpolate_torch_gridsample", "(", "conv6_i_ys", "[", "(", "150", "*", "num_iters", ")", ":", "]", ",", "ys_pixel_coords", "[", "(", "150", "*", "num_iters", ")", ":", "]", ")", ")", "\n", "ys_feature_maps", "=", "torch", ".", "cat", "(", "ys_feature_maps_list", ",", "0", ")", "\n", "# (shape: (num_detections_i, 256, 4, 7))", "\n", "#", "\n", "", "ys_features", "=", "ys_feature_maps", ".", "view", "(", "ys_feature_maps", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "# (shape: (num_detections_i, 7168)) (7168 = 256*4*7)", "\n", "# print (ys_features.size())", "\n", "#", "\n", "features", "=", "F", ".", "relu", "(", "self", ".", "ebm_fc1", "(", "ys_features", ")", ")", "# (shape: (num_detections_i, 1024))", "\n", "# print (features.size())", "\n", "features", "=", "F", ".", "relu", "(", "self", ".", "ebm_fc2", "(", "features", ")", ")", "# (shape: (num_detections_i, 1024))", "\n", "# print (features.size())", "\n", "#", "\n", "new_fs", "=", "self", ".", "ebm_fc3", "(", "features", ")", "# (shape: (num_detections_i, 1))", "\n", "# print (new_fs.size())", "\n", "new_fs", "=", "new_fs", ".", "squeeze", "(", "1", ")", "# (shape: (num_detections_i))", "\n", "# print (new_fs.size())", "\n", "# print (new_fs)", "\n", "############################################################", "\n", "############################################################", "\n", "############################################################", "\n", "############################################################", "\n", "############################################################", "\n", "\n", "refinement_failed", "=", "(", "new_fs", "<", "fs", ")", "# (shape: (num_detections_i))", "\n", "# print (refinement_failed)", "\n", "# print (refinement_failed.size())", "\n", "refinement_failed", "=", "refinement_failed", ".", "unsqueeze", "(", "1", ")", "# (shape: (num_detections_i, 1))", "\n", "r_f", "=", "refinement_failed", ".", "float", "(", ")", "\n", "\n", "bboxes_i", "=", "r_f", "*", "bboxes_init", "+", "(", "1.0", "-", "r_f", ")", "*", "bboxes_refined", "\n", "\n", "step_sizes", "=", "(", "1.0", "-", "r_f", ")", "*", "step_sizes", "+", "r_f", "*", "0.5", "*", "step_sizes", "\n", "\n", "if", "step", "==", "self", ".", "test_cfg", ".", "extra", ".", "EBM_refine_steps", "-", "1", ":", "# (in final step)", "\n", "                            ", "refinement_failed", "=", "(", "new_fs", "<", "fs", ")", "# (shape: (num_detections_i))", "\n", "# print (refinement_failed)", "\n", "# print (refinement_failed.size())", "\n", "r_f", "=", "refinement_failed", ".", "float", "(", ")", "\n", "final_fs", "=", "r_f", "*", "fs", "+", "(", "1.0", "-", "r_f", ")", "*", "new_fs", "\n", "\n", "# print (\"###\")", "\n", "# print (\"###\")", "\n", "# print (\"###\")", "\n", "# print (\"fs after refinement:\")", "\n", "# print (final_fs.detach().cpu().numpy())", "\n", "\n", "# print (\"***********************\")", "\n", "\n", "", "", "", "det_bboxes", ".", "append", "(", "bboxes_i", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "# print (\"bboxes after refinement:\")", "\n", "# print (det_bboxes[0])", "\n", "\n", "", "", "results", "=", "[", "kitti_bbox2results", "(", "*", "param", ")", "for", "param", "in", "zip", "(", "det_bboxes", ",", "det_scores", ",", "img_meta", ")", "]", "\n", "\n", "print", "(", "\"{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}\"", ")", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.single_stage.SingleStageDetector20.__init__": [[893, 965], ["base.BaseDetector.__init__", "builder.build_backbone", "print", "single_stage.SingleStageDetector20.init_weights", "builder.build_neck", "builder.build_single_stage_head", "builder.build_single_stage_head", "functools.partial", "single_stage.SingleStageDetector20.backbone.parameters", "single_stage.make_fc", "single_stage.make_fc", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "single_stage.SingleStageDetector20.neck.parameters", "single_stage.SingleStageDetector20.rpn_head.parameters", "single_stage.SingleStageDetector20.extra_head.parameters", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.learning_schedules_fastai.FakeOptim.__init__", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.models.builder.build_backbone", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.roi_extractors.single_level.SingleRoIExtractor.init_weights", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.models.builder.build_neck", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.models.builder.build_single_stage_head", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.models.builder.build_single_stage_head", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.single_stage.make_fc", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.single_stage.make_fc"], ["    ", "def", "__init__", "(", "self", ",", "\n", "backbone", ",", "\n", "neck", "=", "None", ",", "\n", "bbox_head", "=", "None", ",", "\n", "extra_head", "=", "None", ",", "\n", "train_cfg", "=", "None", ",", "\n", "test_cfg", "=", "None", ",", "\n", "pretrained", "=", "None", ",", "\n", "full_cfg", "=", "None", ")", ":", "\n", "        ", "super", "(", "SingleStageDetector20", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "backbone", "=", "builder", ".", "build_backbone", "(", "backbone", ")", "\n", "\n", "if", "full_cfg", "is", "not", "None", ":", "\n", "            ", "if", "full_cfg", ".", "SA_SSD_fixed", ":", "\n", "                ", "for", "p", "in", "self", ".", "backbone", ".", "parameters", "(", ")", ":", "\n", "                    ", "p", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "", "if", "neck", "is", "not", "None", ":", "\n", "            ", "self", ".", "neck", "=", "builder", ".", "build_neck", "(", "neck", ")", "\n", "\n", "if", "full_cfg", "is", "not", "None", ":", "\n", "                ", "if", "full_cfg", ".", "SA_SSD_fixed", ":", "\n", "                    ", "for", "p", "in", "self", ".", "neck", ".", "parameters", "(", ")", ":", "\n", "                        ", "p", ".", "requires_grad", "=", "False", "\n", "", "", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "if", "bbox_head", "is", "not", "None", ":", "\n", "            ", "self", ".", "rpn_head", "=", "builder", ".", "build_single_stage_head", "(", "bbox_head", ")", "\n", "\n", "if", "full_cfg", "is", "not", "None", ":", "\n", "                ", "if", "full_cfg", ".", "SA_SSD_fixed", ":", "\n", "                    ", "for", "p", "in", "self", ".", "rpn_head", ".", "parameters", "(", ")", ":", "\n", "                        ", "p", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "", "", "if", "extra_head", "is", "not", "None", ":", "\n", "            ", "self", ".", "extra_head", "=", "builder", ".", "build_single_stage_head", "(", "extra_head", ")", "\n", "\n", "self", ".", "grid_offsets", "=", "self", ".", "extra_head", ".", "grid_offsets", "\n", "self", ".", "featmap_stride", "=", "self", ".", "extra_head", ".", "featmap_stride", "\n", "self", ".", "gen_grid_fn", "=", "partial", "(", "gen_sample_grid", ",", "grid_offsets", "=", "self", ".", "grid_offsets", ",", "spatial_scale", "=", "(", "1.0", "/", "self", ".", "featmap_stride", ")", ")", "\n", "\n", "if", "full_cfg", "is", "not", "None", ":", "\n", "                ", "if", "full_cfg", ".", "SA_SSD_fixed", ":", "\n", "                    ", "for", "p", "in", "self", ".", "extra_head", ".", "parameters", "(", ")", ":", "\n", "                        ", "p", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "", "", "self", ".", "train_cfg", "=", "train_cfg", "\n", "self", ".", "test_cfg", "=", "test_cfg", "\n", "self", ".", "full_cfg", "=", "full_cfg", "\n", "\n", "self", ".", "num_samples", "=", "128", "\n", "\n", "self", ".", "stds", "=", "stds8", "\n", "print", "(", "self", ".", "stds", ")", "\n", "\n", "self", ".", "init_weights", "(", "pretrained", ")", "\n", "\n", "if", "full_cfg", "is", "not", "None", ":", "\n", "            ", "if", "full_cfg", ".", "USE_EBM", ":", "\n", "                ", "self", ".", "ebm_fc1", "=", "make_fc", "(", "7168", "+", "16", "+", "16", ",", "1024", ")", "\n", "self", ".", "ebm_fc2", "=", "make_fc", "(", "1024", ",", "1024", ")", "\n", "self", ".", "ebm_fc3", "=", "nn", ".", "Linear", "(", "1024", ",", "1", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "ebm_fc3", ".", "weight", ",", "std", "=", "0.001", ")", "\n", "for", "l", "in", "[", "self", ".", "ebm_fc3", "]", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "l", ".", "bias", ",", "0", ")", "\n", "\n", "", "self", ".", "z_fc1", "=", "nn", ".", "Linear", "(", "1", ",", "16", ")", "\n", "self", ".", "z_fc2", "=", "nn", ".", "Linear", "(", "16", ",", "16", ")", "\n", "\n", "self", ".", "h_fc1", "=", "nn", ".", "Linear", "(", "1", ",", "16", ")", "\n", "self", ".", "h_fc2", "=", "nn", ".", "Linear", "(", "16", ",", "16", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.single_stage.SingleStageDetector20.with_rpn": [[966, 969], ["hasattr"], "methods", ["None"], ["", "", "", "@", "property", "\n", "def", "with_rpn", "(", "self", ")", ":", "\n", "        ", "return", "hasattr", "(", "self", ",", "'rpn_head'", ")", "and", "self", ".", "rpn_head", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.single_stage.SingleStageDetector20.init_weights": [[970, 974], ["isinstance", "logging.getLogger", "mmcv.runner.load_checkpoint"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "if", "isinstance", "(", "pretrained", ",", "str", ")", ":", "\n", "            ", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "load_checkpoint", "(", "self", ",", "pretrained", ",", "strict", "=", "False", ",", "logger", "=", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.single_stage.SingleStageDetector20.merge_second_batch": [[975, 998], ["batch_args.items", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "coors.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "", "def", "merge_second_batch", "(", "self", ",", "batch_args", ")", ":", "\n", "        ", "ret", "=", "{", "}", "\n", "for", "key", ",", "elems", "in", "batch_args", ".", "items", "(", ")", ":", "\n", "            ", "if", "key", "in", "[", "\n", "'voxels'", ",", "'num_points'", ",", "\n", "]", ":", "\n", "                ", "ret", "[", "key", "]", "=", "torch", ".", "cat", "(", "elems", ",", "dim", "=", "0", ")", "\n", "", "elif", "key", "==", "'coordinates'", ":", "\n", "                ", "coors", "=", "[", "]", "\n", "for", "i", ",", "coor", "in", "enumerate", "(", "elems", ")", ":", "\n", "                    ", "coor_pad", "=", "F", ".", "pad", "(", "\n", "coor", ",", "[", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "mode", "=", "'constant'", ",", "\n", "value", "=", "i", ")", "\n", "coors", ".", "append", "(", "coor_pad", ")", "\n", "", "ret", "[", "key", "]", "=", "torch", ".", "cat", "(", "coors", ",", "dim", "=", "0", ")", "\n", "", "elif", "key", "in", "[", "\n", "'img_meta'", ",", "'gt_labels'", ",", "'gt_bboxes'", ",", "\n", "]", ":", "\n", "                ", "ret", "[", "key", "]", "=", "elems", "\n", "", "else", ":", "\n", "                ", "ret", "[", "key", "]", "=", "torch", ".", "stack", "(", "elems", ",", "dim", "=", "0", ")", "\n", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.single_stage.SingleStageDetector20.forward_train": [[999, 1275], ["len", "single_stage.SingleStageDetector20.merge_second_batch", "single_stage.SingleStageDetector20.backbone", "single_stage.SingleStageDetector20.neck", "dict", "print", "single_stage.SingleStageDetector20.neck.aux_loss", "dict.update", "single_stage.SingleStageDetector20.rpn_head", "single_stage.SingleStageDetector20.rpn_head.get_guided_anchors", "single_stage.SingleStageDetector20.extra_head", "single_stage.SingleStageDetector20.rpn_head.loss", "dict.update", "single_stage.SingleStageDetector20.extra_head.loss", "dict.update", "print", "print", "print", "print", "len", "range", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "print", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "print", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "single_stage.SingleStageDetector20.ebm_fc3", "fs.squeeze.squeeze.squeeze", "y_samples_fs.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "q_y_samples.cuda.cuda.view", "print", "print", "print", "print", "print", "print", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dict.update", "conv6.size", "len", "[].size", "[].size", "single_stage.sample_gmm_centered", "y_samples_zero.cuda.cuda.cuda", "q_y_samples.cuda.cuda.cuda", "single_stage.wrapToPi", "y_samples_list.append", "q_y_samples_list.append", "q_ys_list.append", "single_stage.SingleStageDetector20.gen_grid_fn", "ys_pixel_xs.permute().contiguous.permute().contiguous.permute().contiguous", "ys_pixel_ys.permute().contiguous.permute().contiguous.permute().contiguous", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "conv6[].unsqueeze", "conv6[].unsqueeze.expand", "single_stage.bilinear_interpolate_torch_gridsample", "bilinear_interpolate_torch_gridsample.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ys_features_list.append", "range", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "single_stage.SingleStageDetector20.ebm_fc1", "single_stage.SingleStageDetector20.ebm_fc2", "ys_fs.size", "y_samples_fs.view.view.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "q_y_samples.cuda.cuda.size", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "dict", "ys_list[].unsqueeze", "y_samples_zero.cuda.cuda.unsqueeze", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "q_y_samples.cuda.cuda.unsqueeze", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "bilinear_interpolate_torch_gridsample.size", "single_stage.SingleStageDetector20.z_fc1", "single_stage.SingleStageDetector20.z_fc2", "single_stage.SingleStageDetector20.h_fc1", "single_stage.SingleStageDetector20.h_fc2", "y_samples_list[].size", "single_stage.SingleStageDetector20.gen_grid_fn", "y_samples_pixel_xs.permute().contiguous.permute().contiguous.permute().contiguous", "y_samples_pixel_ys.permute().contiguous.permute().contiguous.permute().contiguous", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "conv6[].unsqueeze.expand", "single_stage.bilinear_interpolate_torch_gridsample", "bilinear_interpolate_torch_gridsample.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "y_samples_features_list.append", "q_y_samples_list_long.append", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "exp_vals_0.unsqueeze", "ys_pixel_xs.permute().contiguous.permute().contiguous.permute", "ys_pixel_ys.permute().contiguous.permute().contiguous.permute", "ys_pixel_xs.permute().contiguous.permute().contiguous.unsqueeze", "ys_pixel_ys.permute().contiguous.permute().contiguous.unsqueeze", "[].unsqueeze", "[].unsqueeze", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "bilinear_interpolate_torch_gridsample.size", "single_stage.SingleStageDetector20.z_fc1", "single_stage.SingleStageDetector20.z_fc2", "single_stage.SingleStageDetector20.h_fc1", "single_stage.SingleStageDetector20.h_fc2", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "y_samples_pixel_xs.permute().contiguous.permute().contiguous.permute", "y_samples_pixel_ys.permute().contiguous.permute().contiguous.permute", "y_samples_pixel_xs.permute().contiguous.permute().contiguous.unsqueeze", "y_samples_pixel_ys.permute().contiguous.permute().contiguous.unsqueeze", "[].unsqueeze", "[].unsqueeze", "y_samples.size", "y_samples.size", "ys_list[].size", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.pointpillars.PointPillars.merge_second_batch", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.necks.cmn.SpMiddleFHD.aux_loss", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.ssd_rotate_head.SSDRotateHead.get_guided_anchors", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox_heads.bbox_head.BBoxHead.loss", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox_heads.bbox_head.BBoxHead.loss", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.single_stage.sample_gmm_centered", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.single_stage.wrapToPi", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.ssd_rotate_head.bilinear_interpolate_torch_gridsample", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.ssd_rotate_head.bilinear_interpolate_torch_gridsample"], ["", "def", "forward_train", "(", "self", ",", "img", ",", "img_meta", ",", "**", "kwargs", ")", ":", "\n", "# (img has shape: (batch_size, 3, 384, 1248))", "\n", "# (img_meta is a list of batch_size elements, example element: {'img_shape': (375, 1242, 3), 'sample_idx': 3132, 'calib': <mmdet.datasets.kitti_utils.Calibration object at 0x7fc3c16ad898>})", "\n", "# (kwargs is a dict containing the keys \"anchors\", \"voxels\", \"coordinates\", \"num_points\", \"anchors_mask\", \"gt_labels\", \"gt_bboxes\")", "\n", "# # (kwargs[\"anchors\"] etc is a list of batch_size tensors)", "\n", "\n", "# print (img.size())", "\n", "# print (len(img_meta))", "\n", "\n", "        ", "batch_size", "=", "len", "(", "img_meta", ")", "\n", "\n", "ret", "=", "self", ".", "merge_second_batch", "(", "kwargs", ")", "\n", "# (ret[\"voxels\"] has shape: (num_voxels, 4)) (num_voxels is different for different examples) (for batch_size = 2, num_voxels is typically 35000 - 45000)", "\n", "# (ret[\"coordinates\"] has shape: (num_voxels, 4))", "\n", "# print (ret[\"voxels\"].size())", "\n", "# print (ret[\"coordinates\"].size())", "\n", "\n", "vx", "=", "self", ".", "backbone", "(", "ret", "[", "'voxels'", "]", ",", "ret", "[", "'num_points'", "]", ")", "\n", "# (vx has shape: (num_voxels, 4)) (vx is just identical to ret[\"voxels\"]? seems so)", "\n", "# print (vx.size())", "\n", "\n", "(", "x", ",", "conv6", ")", ",", "point_misc", "=", "self", ".", "neck", "(", "vx", ",", "ret", "[", "'coordinates'", "]", ",", "batch_size", ")", "\n", "# (x has shape: (batch_size, 256, 200, 176))", "\n", "# (conv6 has shape: (batch_size, 256, 200, 176))", "\n", "# (point_misc is a list of 3 tensors)", "\n", "# print (x.size())", "\n", "# print (conv6.size())", "\n", "\n", "losses", "=", "dict", "(", ")", "\n", "\n", "if", "not", "self", ".", "full_cfg", ".", "SA_SSD_fixed", ":", "\n", "            ", "aux_loss", "=", "self", ".", "neck", ".", "aux_loss", "(", "*", "point_misc", ",", "gt_bboxes", "=", "ret", "[", "'gt_bboxes'", "]", ")", "\n", "losses", ".", "update", "(", "aux_loss", ")", "\n", "\n", "# RPN forward and loss", "\n", "", "if", "self", ".", "with_rpn", ":", "\n", "            ", "rpn_outs", "=", "self", ".", "rpn_head", "(", "x", ")", "\n", "# (rpn_outs is a list of 3 elements)", "\n", "# (rpn_outs[0] has shape: (batch_size, 200, 176, 14)) (14 = 7*num_anchor_per_loc) (x, y, z, h, w, l, theta)", "\n", "# (rpn_outs[1] has shape: (batch_size, 200, 176, 2)) (2 = 1*num_anchor_per_loc) (conf_score) (just one class (Car))", "\n", "# (rpn_outs[2] has shape: (batch_size, 200, 176, 4)) (4 = 2*num_anchor_per_loc) (classification of heading directon (forward or backward))", "\n", "# print (len(rpn_outs))", "\n", "# print (rpn_outs[0].size())", "\n", "# print (rpn_outs[1].size())", "\n", "# print (rpn_outs[2].size())", "\n", "\n", "if", "not", "self", ".", "full_cfg", ".", "SA_SSD_fixed", ":", "\n", "                ", "rpn_loss_inputs", "=", "rpn_outs", "+", "(", "ret", "[", "'gt_bboxes'", "]", ",", "ret", "[", "'gt_labels'", "]", ",", "ret", "[", "'anchors'", "]", ",", "ret", "[", "'anchors_mask'", "]", ",", "self", ".", "train_cfg", ".", "rpn", ")", "\n", "rpn_losses", "=", "self", ".", "rpn_head", ".", "loss", "(", "*", "rpn_loss_inputs", ")", "\n", "losses", ".", "update", "(", "rpn_losses", ")", "\n", "\n", "", "guided_anchors", "=", "self", ".", "rpn_head", ".", "get_guided_anchors", "(", "*", "rpn_outs", ",", "ret", "[", "'anchors'", "]", ",", "ret", "[", "'anchors_mask'", "]", ",", "ret", "[", "'gt_bboxes'", "]", ",", "thr", "=", "0.1", ")", "\n", "# (guided_anchors is a list of batch_size tensors)", "\n", "# (guided_anchors[i] has shape: (num_guided_anchors_in_pc_i, 7))", "\n", "# # (num_guided_anchors_in_pc_i is different for different i:s and for different examples) (typically, num_guided_anchors_in_pc_i is ~ 10000 - 25000)", "\n", "# # (these are the predicted bboxes (with residuals added to the anchors) with conf_score > 0.1?)", "\n", "# print (len(guided_anchors))", "\n", "# print (guided_anchors[0].size())", "\n", "# print (guided_anchors[1].size())", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "# bbox head forward and loss", "\n", "", "if", "self", ".", "extra_head", ":", "\n", "            ", "bbox_score", "=", "self", ".", "extra_head", "(", "conv6", ",", "guided_anchors", ")", "\n", "# print (bbox_score.size())", "\n", "# (bbox_score has shape: (num_guided_anchors_in_batch))", "\n", "# # (num_guided_anchors_in_batch = num_guided_anchors_in_pc_0 + num_guided_anchors_in_pc_1 + ... + num_guided_anchors_in_pc_{batch_size - 1})", "\n", "\n", "if", "not", "self", ".", "full_cfg", ".", "SA_SSD_fixed", ":", "\n", "                ", "refine_loss_inputs", "=", "(", "bbox_score", ",", "ret", "[", "'gt_bboxes'", "]", ",", "ret", "[", "'gt_labels'", "]", ",", "guided_anchors", ",", "self", ".", "train_cfg", ".", "extra", ")", "\n", "refine_losses", "=", "self", ".", "extra_head", ".", "loss", "(", "*", "refine_loss_inputs", ")", "\n", "losses", ".", "update", "(", "refine_losses", ")", "\n", "\n", "", "", "if", "self", ".", "full_cfg", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "full_cfg", ".", "USE_EBM", ":", "\n", "# print (\"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\")", "\n", "# (conv6 has shape: (batch_size, 256, 200, 176))", "\n", "\n", "# (ret[\"gt_bboxes\"] is a list of batch_size tensors)", "\n", "# (ret[\"gt_bboxes\"][i] has shape: (num_gt_bboxes_i, 7)) (num_gt_bboxes_i can be different for different i:s and for different batches)", "\n", "\n", "                ", "print", "(", "conv6", ".", "size", "(", ")", ")", "\n", "print", "(", "len", "(", "ret", "[", "'gt_bboxes'", "]", ")", ")", "\n", "print", "(", "ret", "[", "'gt_bboxes'", "]", "[", "0", "]", ".", "size", "(", ")", ")", "\n", "print", "(", "ret", "[", "'gt_bboxes'", "]", "[", "1", "]", ".", "size", "(", ")", ")", "\n", "\n", "batch_size", "=", "len", "(", "ret", "[", "'gt_bboxes'", "]", ")", "\n", "\n", "ys_list", "=", "ret", "[", "\"gt_bboxes\"", "]", "\n", "y_samples_list", "=", "[", "]", "\n", "q_y_samples_list", "=", "[", "]", "\n", "q_ys_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "# (ys_list[i] has shape: (num_gt_bboxes_i, 7))", "\n", "# print (ys_list[i].size())", "\n", "\n", "                    ", "y_samples_zero", ",", "q_y_samples", ",", "q_ys", "=", "sample_gmm_centered", "(", "self", ".", "stds", ",", "num_samples", "=", "self", ".", "num_samples", ")", "\n", "y_samples_zero", "=", "y_samples_zero", ".", "cuda", "(", ")", "# (shape: (num_samples, 7))", "\n", "q_y_samples", "=", "q_y_samples", ".", "cuda", "(", ")", "# (shape: (num_samples))", "\n", "y_samples", "=", "ys_list", "[", "i", "]", ".", "unsqueeze", "(", "1", ")", "+", "y_samples_zero", ".", "unsqueeze", "(", "0", ")", "# (shape: (num_gt_bboxes_i, num_samples, 7))", "\n", "y_samples", "[", ":", ",", ":", ",", "3", ":", "6", "]", "=", "min_hwl", "+", "F", ".", "relu", "(", "y_samples", "[", ":", ",", ":", ",", "3", ":", "6", "]", "-", "min_hwl", ")", "\n", "y_samples", "[", ":", ",", ":", ",", "6", "]", "=", "wrapToPi", "(", "y_samples", "[", ":", ",", ":", ",", "6", "]", ")", "\n", "q_y_samples", "=", "q_y_samples", ".", "unsqueeze", "(", "0", ")", "*", "torch", ".", "ones", "(", "y_samples", ".", "size", "(", "0", ")", ",", "y_samples", ".", "size", "(", "1", ")", ")", ".", "cuda", "(", ")", "# (shape: (num_gt_bboxes_i, num_samples))", "\n", "q_ys", "=", "q_ys", "[", "0", "]", "*", "torch", ".", "ones", "(", "ys_list", "[", "i", "]", ".", "size", "(", "0", ")", ")", ".", "cuda", "(", ")", "# (shape: (num_gt_bboxes_i))", "\n", "\n", "# print (ys_list[i][0])", "\n", "# print (y_samples_list[i][0, 0:5])", "\n", "\n", "y_samples_list", ".", "append", "(", "y_samples", ")", "\n", "q_y_samples_list", ".", "append", "(", "q_y_samples", ")", "\n", "q_ys_list", ".", "append", "(", "q_ys", ")", "\n", "\n", "# print (y_samples_list[i].size())", "\n", "# print (q_y_samples_list[i].size())", "\n", "# print (q_ys_list[i].size())", "\n", "# print (\"%%%%%\")", "\n", "\n", "", "ys_features_list", "=", "[", "]", "\n", "y_samples_features_list", "=", "[", "]", "\n", "q_y_samples_list_long", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "# (conv6 has shape: (batch_size, 256, 200, 176))", "\n", "# (ys_list[i] has shape: (num_gt_bboxes_i, 7))", "\n", "# (y_samples_list[i] has shape: (num_gt_bboxes_i, num_samples, 7))", "\n", "# print (conv6.size())", "\n", "# print (ys_list[i].size())", "\n", "# print (y_samples_list[i].size())", "\n", "\n", "                    ", "(", "ys_pixel_xs", ",", "ys_pixel_ys", ")", "=", "self", ".", "gen_grid_fn", "(", "ys_list", "[", "i", "]", "[", ":", ",", "[", "0", ",", "1", ",", "3", ",", "4", ",", "6", "]", "]", ")", "\n", "# (both have shape: (4, 7, num_gt_bboxes_i))", "\n", "# print (ys_pixel_xs.size())", "\n", "# print (ys_pixel_ys.size())", "\n", "ys_pixel_xs", "=", "ys_pixel_xs", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "# (shape: (num_gt_bboxes_i, 4, 7))", "\n", "ys_pixel_ys", "=", "ys_pixel_ys", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "# (shape: (num_gt_bboxes_i, 4, 7))", "\n", "# print (ys_pixel_xs.size())", "\n", "# print (ys_pixel_ys.size())", "\n", "ys_pixel_coords", "=", "torch", ".", "cat", "(", "[", "ys_pixel_xs", ".", "unsqueeze", "(", "3", ")", ",", "ys_pixel_ys", ".", "unsqueeze", "(", "3", ")", "]", ",", "3", ")", "\n", "# (shape: (num_gt_bboxes_i, 4, 7, 2))", "\n", "# print (ys_pixel_coords.size())", "\n", "\n", "conv6_i", "=", "conv6", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", "# (shape: (1, 256, 200, 176))", "\n", "# print (conv6_i.size())", "\n", "conv6_i_ys", "=", "conv6_i", ".", "expand", "(", "ys_pixel_coords", ".", "size", "(", "0", ")", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "# (shape: (num_gt_bboxes_i, 256, 200, 176))", "\n", "# print (conv6_i_ys.size())", "\n", "ys_feature_maps", "=", "bilinear_interpolate_torch_gridsample", "(", "conv6_i_ys", ",", "ys_pixel_coords", ")", "\n", "# (shape: (num_gt_bboxes_i, 256, 4, 7))", "\n", "# print (ys_feature_maps.size())", "\n", "ys_features", "=", "ys_feature_maps", ".", "view", "(", "ys_feature_maps", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "# (shape: (num_gt_bboxes_i, 7168)) (7168 = 256*4*7)", "\n", "# print (ys_features.size())", "\n", "z_feature", "=", "F", ".", "relu", "(", "self", ".", "z_fc1", "(", "ys_list", "[", "i", "]", "[", ":", ",", "2", "]", ".", "unsqueeze", "(", "1", ")", ")", ")", "# (shape: (num_gt_bboxes_i, 16))", "\n", "z_feature", "=", "F", ".", "relu", "(", "self", ".", "z_fc2", "(", "z_feature", ")", ")", "# (shape: (num_gt_bboxes_i, 16))", "\n", "# print (z_feature.size())", "\n", "h_feature", "=", "F", ".", "relu", "(", "self", ".", "h_fc1", "(", "ys_list", "[", "i", "]", "[", ":", ",", "5", "]", ".", "unsqueeze", "(", "1", ")", ")", ")", "# (shape: (num_gt_bboxes_i, 16))", "\n", "h_feature", "=", "F", ".", "relu", "(", "self", ".", "h_fc2", "(", "h_feature", ")", ")", "# (shape: (num_gt_bboxes_i, 16))", "\n", "# print (h_feature.size())", "\n", "ys_features", "=", "torch", ".", "cat", "(", "[", "ys_features", ",", "z_feature", ",", "h_feature", "]", ",", "1", ")", "# (shape: (num_gt_bboxes_i, 7168+16+16))", "\n", "# print (ys_features.size())", "\n", "ys_features_list", ".", "append", "(", "ys_features", ")", "\n", "\n", "for", "k", "in", "range", "(", "y_samples_list", "[", "i", "]", ".", "size", "(", "0", ")", ")", ":", "\n", "                        ", "(", "y_samples_pixel_xs", ",", "y_samples_pixel_ys", ")", "=", "self", ".", "gen_grid_fn", "(", "y_samples_list", "[", "i", "]", "[", "k", ",", ":", ",", "[", "0", ",", "1", ",", "3", ",", "4", ",", "6", "]", "]", ")", "\n", "# (both have shape: (4, 7, num_samples))", "\n", "# print (y_samples_pixel_xs.size())", "\n", "# print (y_samples_pixel_ys.size())", "\n", "y_samples_pixel_xs", "=", "y_samples_pixel_xs", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "# (shape: (num_samples, 4, 7))", "\n", "y_samples_pixel_ys", "=", "y_samples_pixel_ys", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "# (shape: (num_samples, 4, 7))", "\n", "# print (y_samples_pixel_xs.size())", "\n", "# print (y_samples_pixel_ys.size())", "\n", "y_samples_pixel_coords", "=", "torch", ".", "cat", "(", "[", "y_samples_pixel_xs", ".", "unsqueeze", "(", "3", ")", ",", "y_samples_pixel_ys", ".", "unsqueeze", "(", "3", ")", "]", ",", "3", ")", "\n", "# (shape: (num_samples, 4, 7, 2))", "\n", "# print (y_samples_pixel_coords.size())", "\n", "\n", "conv6_i_y_samples", "=", "conv6_i", ".", "expand", "(", "y_samples_pixel_coords", ".", "size", "(", "0", ")", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "# (shape: (num_samples, 256, 200, 176))", "\n", "# print (conv6_i_y_samples.size())", "\n", "y_samples_feature_maps", "=", "bilinear_interpolate_torch_gridsample", "(", "conv6_i_y_samples", ",", "y_samples_pixel_coords", ")", "\n", "# (shape: (num_samples, 256, 4, 7))", "\n", "# print (y_samples_feature_maps.size())", "\n", "y_samples_features", "=", "y_samples_feature_maps", ".", "view", "(", "y_samples_feature_maps", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "# (shape: (num_samples, 7168)) (7168 = 256*4*7)", "\n", "# print (y_samples_features.size())", "\n", "z_feature", "=", "F", ".", "relu", "(", "self", ".", "z_fc1", "(", "y_samples_list", "[", "i", "]", "[", "k", ",", ":", ",", "2", "]", ".", "unsqueeze", "(", "1", ")", ")", ")", "# (shape: (num_samples, 16))", "\n", "z_feature", "=", "F", ".", "relu", "(", "self", ".", "z_fc2", "(", "z_feature", ")", ")", "# (shape: (num_samples, 16))", "\n", "# print (z_feature.size())", "\n", "h_feature", "=", "F", ".", "relu", "(", "self", ".", "h_fc1", "(", "y_samples_list", "[", "i", "]", "[", "k", ",", ":", ",", "5", "]", ".", "unsqueeze", "(", "1", ")", ")", ")", "# (shape: (num_samples, 16))", "\n", "h_feature", "=", "F", ".", "relu", "(", "self", ".", "h_fc2", "(", "h_feature", ")", ")", "# (shape: (num_samples, 16))", "\n", "# print (h_feature.size())", "\n", "y_samples_features", "=", "torch", ".", "cat", "(", "[", "y_samples_features", ",", "z_feature", ",", "h_feature", "]", ",", "1", ")", "# (shape: (num_samples, 7168+16+16))", "\n", "# print (y_samples_features.size())", "\n", "y_samples_features_list", ".", "append", "(", "y_samples_features", ")", "\n", "\n", "q_y_samples_list_long", ".", "append", "(", "q_y_samples_list", "[", "i", "]", "[", "k", "]", ")", "\n", "\n", "# print (ys_features_list[0].size())", "\n", "# print (ys_features_list[1].size())", "\n", "", "", "ys_features", "=", "torch", ".", "cat", "(", "ys_features_list", ",", "0", ")", "\n", "# (shape: (num_gt_bboxes_in_batch, 7168+16+16))", "\n", "print", "(", "ys_features", ".", "size", "(", ")", ")", "\n", "\n", "y_samples_features", "=", "torch", ".", "cat", "(", "y_samples_features_list", ",", "0", ")", "\n", "# (shape: (num_gt_bboxes_in_batch*num_samples, 7168+16+16))", "\n", "print", "(", "y_samples_features", ".", "size", "(", ")", ")", "\n", "\n", "features", "=", "torch", ".", "cat", "(", "[", "ys_features", ",", "y_samples_features", "]", ",", "0", ")", "\n", "# (shape: (num_gt_bboxes_in_batch + num_gt_bboxes_in_batch*num_samples, 7168+16+16))", "\n", "# print (features.size())", "\n", "\n", "features", "=", "F", ".", "relu", "(", "self", ".", "ebm_fc1", "(", "features", ")", ")", "# (shape: (num_gt_bboxes_in_batch + num_gt_bboxes_in_batch*num_samples, 1024))", "\n", "# print (features.size())", "\n", "features", "=", "F", ".", "relu", "(", "self", ".", "ebm_fc2", "(", "features", ")", ")", "# (shape: (num_gt_bboxes_in_batch + num_gt_bboxes_in_batch*num_samples, 1024))", "\n", "# print (features.size())", "\n", "\n", "fs", "=", "self", ".", "ebm_fc3", "(", "features", ")", "# (shape: (num_gt_bboxes_in_batch + num_gt_bboxes_in_batch*num_samples, 1))", "\n", "# print (fs.size())", "\n", "fs", "=", "fs", ".", "squeeze", "(", "1", ")", "# (shape: (num_gt_bboxes_in_batch + num_gt_bboxes_in_batch*num_samples))", "\n", "# print (fs.size())", "\n", "\n", "ys_fs", "=", "fs", "[", "0", ":", "ys_features", ".", "size", "(", "0", ")", "]", "\n", "# (shape: (num_gt_bboxes_in_batch))", "\n", "# print (ys_fs.size())", "\n", "\n", "y_samples_fs", "=", "fs", "[", "ys_features", ".", "size", "(", "0", ")", ":", "]", "\n", "# (shape: (num_gt_bboxes_in_batch*num_samples))", "\n", "# print (y_samples_fs.size())", "\n", "\n", "y_samples_fs", "=", "y_samples_fs", ".", "view", "(", "-", "1", ",", "self", ".", "num_samples", ")", "\n", "# (shape: (num_gt_bboxes_in_batch, num_samples))", "\n", "# print (y_samples_fs.size())", "\n", "\n", "q_ys", "=", "torch", ".", "cat", "(", "q_ys_list", ",", "0", ")", "\n", "# (shape: (num_gt_bboxes_in_batch))", "\n", "# print (q_ys.size())", "\n", "\n", "q_y_samples", "=", "torch", ".", "cat", "(", "q_y_samples_list_long", ",", "0", ")", "\n", "# (shape: (num_gt_bboxes_in_batch*num_samples))", "\n", "# print (q_y_samples.size())", "\n", "\n", "q_y_samples", "=", "q_y_samples", ".", "view", "(", "-", "1", ",", "self", ".", "num_samples", ")", "\n", "# (shape: (num_gt_bboxes_in_batch, num_samples))", "\n", "# print (q_y_samples.size())", "\n", "\n", "# print (\"//////////////////\")", "\n", "# (ys_fs has shape: (num_gt_bboxes_in_batch))", "\n", "# (y_samples_fs has shape: (num_gt_bboxes_in_batch, num_samples))", "\n", "# (q_ys has shape: (num_gt_bboxes_in_batch))", "\n", "# (q_y_samples has shape: (num_gt_bboxes_in_batch, num_samples))", "\n", "\n", "print", "(", "ys_fs", ".", "size", "(", ")", ")", "\n", "print", "(", "y_samples_fs", ".", "size", "(", ")", ")", "\n", "print", "(", "q_ys", ".", "size", "(", ")", ")", "\n", "print", "(", "q_y_samples", ".", "size", "(", ")", ")", "\n", "\n", "# print (ys_fs[0])", "\n", "# print (y_samples_fs[0])", "\n", "# print (q_ys)", "\n", "# print (q_y_samples[0])", "\n", "\n", "print", "(", "\"ys_fs - mean: %f, max: %f, min: %f\"", "%", "(", "torch", ".", "mean", "(", "ys_fs", ")", ".", "item", "(", ")", ",", "torch", ".", "max", "(", "ys_fs", ")", ".", "item", "(", ")", ",", "torch", ".", "min", "(", "ys_fs", ")", ".", "item", "(", ")", ")", ")", "\n", "print", "(", "\"y_samples_fs - mean: %f, max: %f, min: %f\"", "%", "(", "torch", ".", "mean", "(", "y_samples_fs", ")", ".", "item", "(", ")", ",", "torch", ".", "max", "(", "y_samples_fs", ")", ".", "item", "(", ")", ",", "torch", ".", "min", "(", "y_samples_fs", ")", ".", "item", "(", ")", ")", ")", "\n", "\n", "f_samples", "=", "y_samples_fs", "# (shape: (num_gt_bboxes_in_batch, num_samples))", "\n", "p_N_samples", "=", "q_y_samples", "# (shape: (num_gt_bboxes_in_batch, num_samples))", "\n", "f_0", "=", "ys_fs", "# (shape: (num_gt_bboxes_in_batch))", "\n", "p_N_0", "=", "q_ys", "# (shape: (num_gt_bboxes_in_batch))", "\n", "exp_vals_0", "=", "f_0", "-", "torch", ".", "log", "(", "p_N_0", "+", "0.0", ")", "# (shape: (num_gt_bboxes_in_batch))", "\n", "exp_vals_samples", "=", "f_samples", "-", "torch", ".", "log", "(", "p_N_samples", "+", "0.0", ")", "# (shape: (num_gt_bboxes_in_batch, num_samples))", "\n", "exp_vals", "=", "torch", ".", "cat", "(", "[", "exp_vals_0", ".", "unsqueeze", "(", "1", ")", ",", "exp_vals_samples", "]", ",", "dim", "=", "1", ")", "# (shape: (num_gt_bboxes_in_batch, 1+num_samples))", "\n", "ebm_loss", "=", "-", "torch", ".", "mean", "(", "exp_vals_0", "-", "torch", ".", "logsumexp", "(", "exp_vals", ",", "dim", "=", "1", ")", ")", "\n", "losses", ".", "update", "(", "dict", "(", "loss_ebm", "=", "ebm_loss", ",", ")", ")", "\n", "\n", "", "", "print", "(", "\"{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}\"", ")", "\n", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.single_stage.SingleStageDetector20.forward_test": [[1276, 1685], ["print", "print", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "len", "single_stage.SingleStageDetector20.merge_second_batch", "single_stage.SingleStageDetector20.backbone", "single_stage.SingleStageDetector20.neck", "single_stage.SingleStageDetector20.rpn_head.forward", "single_stage.SingleStageDetector20.rpn_head.get_guided_anchors", "single_stage.SingleStageDetector20.extra_head", "print", "print", "print", "print", "print", "print", "print", "print", "print", "range", "range", "mmdet.core.kitti_bbox2results", "len", "bbox_score[].size", "len", "guided_anchors[].size", "single_stage.SingleStageDetector20.extra_head.get_rescore_bboxes_ebm_guided", "single_stage.SingleStageDetector20.extra_head.get_rescore_bboxes", "print", "print", "len", "bboxes.append", "len", "print", "print", "range", "det_bboxes.append", "zip", "det_fs.detach().cpu().numpy", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "bboxes_i.size", "det_bboxes.append", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "bboxes_i.clone().detach", "single_stage.SingleStageDetector20.gen_grid_fn", "ys_pixel_xs.permute().contiguous.permute().contiguous.permute().contiguous", "ys_pixel_ys.permute().contiguous.permute().contiguous.permute().contiguous", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "conv6[].unsqueeze", "conv6[].unsqueeze.expand", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "single_stage.SingleStageDetector20.ebm_fc3", "fs.squeeze.squeeze.squeeze", "bboxes_i.detach().cpu().numpy", "bboxes_i.detach().cpu().numpy", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "conv6[].unsqueeze.expand.size", "single_stage.bilinear_interpolate_torch_gridsample", "int", "range", "ys_feature_maps_list.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "single_stage.SingleStageDetector20.z_fc1", "single_stage.SingleStageDetector20.z_fc2", "single_stage.SingleStageDetector20.h_fc1", "single_stage.SingleStageDetector20.h_fc2", "single_stage.SingleStageDetector20.ebm_fc1", "single_stage.SingleStageDetector20.ebm_fc2", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "single_stage.SingleStageDetector20.gen_grid_fn", "ys_pixel_xs.permute().contiguous.permute().contiguous.permute().contiguous", "ys_pixel_ys.permute().contiguous.permute().contiguous.permute().contiguous", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "conv6[].unsqueeze", "conv6[].unsqueeze.expand", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "single_stage.SingleStageDetector20.ebm_fc3", "new_fs.squeeze.squeeze.squeeze", "refinement_failed.unsqueeze.unsqueeze.unsqueeze", "refinement_failed.unsqueeze.unsqueeze.float", "det_fs.detach().cpu", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "bboxes_i.clone", "ys_pixel_xs.permute().contiguous.permute().contiguous.permute", "ys_pixel_ys.permute().contiguous.permute().contiguous.permute", "ys_pixel_xs.permute().contiguous.permute().contiguous.unsqueeze", "ys_pixel_ys.permute().contiguous.permute().contiguous.unsqueeze", "math.floor", "ys_feature_maps_list.append", "single_stage.bilinear_interpolate_torch_gridsample", "bboxes_init[].unsqueeze", "bboxes_init[].unsqueeze", "fs.squeeze.squeeze.sum", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "conv6[].unsqueeze.expand.size", "single_stage.bilinear_interpolate_torch_gridsample", "int", "range", "ys_feature_maps_list.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "single_stage.SingleStageDetector20.z_fc1", "single_stage.SingleStageDetector20.z_fc2", "single_stage.SingleStageDetector20.h_fc1", "single_stage.SingleStageDetector20.h_fc2", "single_stage.SingleStageDetector20.ebm_fc1", "single_stage.SingleStageDetector20.ebm_fc2", "refinement_failed.unsqueeze.unsqueeze.float", "print", "print", "print", "print", "print", "bboxes_i.detach().cpu", "bboxes_i.detach().cpu", "bboxes_i.size", "single_stage.bilinear_interpolate_torch_gridsample", "ys_pixel_xs.permute().contiguous.permute().contiguous.permute", "ys_pixel_ys.permute().contiguous.permute().contiguous.permute", "ys_pixel_xs.permute().contiguous.permute().contiguous.unsqueeze", "ys_pixel_ys.permute().contiguous.permute().contiguous.unsqueeze", "math.floor", "ys_feature_maps_list.append", "single_stage.bilinear_interpolate_torch_gridsample", "bboxes_refined[].unsqueeze", "bboxes_refined[].unsqueeze", "final_fs.detach().cpu().numpy", "det_fs.detach", "conv6[].unsqueeze.expand.size", "single_stage.bilinear_interpolate_torch_gridsample", "bboxes_i.detach", "bboxes_i.detach", "conv6[].unsqueeze.expand.size", "final_fs.detach().cpu", "final_fs.detach"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.pointpillars.PointPillars.merge_second_batch", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.roi_extractors.single_level.SingleRoIExtractor.forward", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.ssd_rotate_head.SSDRotateHead.get_guided_anchors", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.transforms.kitti_bbox2results", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.ssd_rotate_head.PSWarpHead.get_rescore_bboxes_ebm_guided", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.ssd_rotate_head.PSWarpHead.get_rescore_bboxes", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.ssd_rotate_head.bilinear_interpolate_torch_gridsample", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.ssd_rotate_head.bilinear_interpolate_torch_gridsample", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.ssd_rotate_head.bilinear_interpolate_torch_gridsample", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.ssd_rotate_head.bilinear_interpolate_torch_gridsample", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.ssd_rotate_head.bilinear_interpolate_torch_gridsample", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.ssd_rotate_head.bilinear_interpolate_torch_gridsample"], ["", "def", "forward_test", "(", "self", ",", "img", ",", "img_meta", ",", "**", "kwargs", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "batch_size", "=", "len", "(", "img_meta", ")", "# (batch_size = 1)", "\n", "# print (batch_size)", "\n", "\n", "ret", "=", "self", ".", "merge_second_batch", "(", "kwargs", ")", "\n", "# (ret[\"voxels\"] has shape: (num_voxels, 4)) (num_voxels is different for different examples) (for batch_size = 2, num_voxels is typically 35000 - 45000)", "\n", "# (ret[\"coordinates\"] has shape: (num_voxels, 4))", "\n", "# print (ret[\"voxels\"].size())", "\n", "# print (ret[\"coordinates\"].size())", "\n", "\n", "vx", "=", "self", ".", "backbone", "(", "ret", "[", "'voxels'", "]", ",", "ret", "[", "'num_points'", "]", ")", "\n", "# (vx has shape: (num_voxels, 4)) (vx is just identical to ret[\"voxels\"]? seems so)", "\n", "# print (vx.size())", "\n", "\n", "(", "x", ",", "conv6", ")", "=", "self", ".", "neck", "(", "vx", ",", "ret", "[", "'coordinates'", "]", ",", "batch_size", ",", "is_test", "=", "True", ")", "\n", "# (x has shape: (batch_size, 256, 200, 176))", "\n", "# (conv6 has shape: (batch_size, 256, 200, 176))", "\n", "# print (x.size())", "\n", "# print (conv6.size())", "\n", "\n", "rpn_outs", "=", "self", ".", "rpn_head", ".", "forward", "(", "x", ")", "\n", "# (rpn_outs is a list of 3 elements)", "\n", "# (rpn_outs[0] has shape: (batch_size, 200, 176, 14)) (14 = 7*num_anchor_per_loc) (x, y, z, h, w, l, theta)", "\n", "# (rpn_outs[1] has shape: (batch_size, 200, 176, 2)) (2 = 1*num_anchor_per_loc) (conf_score) (just one class (Car))", "\n", "# (rpn_outs[2] has shape: (batch_size, 200, 176, 4)) (4 = 2*num_anchor_per_loc) (classification of heading directon (forward or backward))", "\n", "# print (len(rpn_outs))", "\n", "# print (rpn_outs[0].size())", "\n", "# print (rpn_outs[1].size())", "\n", "# print (rpn_outs[2].size())", "\n", "\n", "guided_anchors", "=", "self", ".", "rpn_head", ".", "get_guided_anchors", "(", "*", "rpn_outs", ",", "ret", "[", "'anchors'", "]", ",", "ret", "[", "'anchors_mask'", "]", ",", "None", ",", "thr", "=", ".1", ")", "\n", "# (guided_anchors is a list of batch_size tensors)", "\n", "# (guided_anchors[i] has shape: (num_guided_anchors_in_pc_i, 7))", "\n", "# # (num_guided_anchors_in_pc_i is different for different i:s and for different examples)", "\n", "# # (these are the predicted bboxes (with residuals added to the anchors) with conf_score > 0.1?)", "\n", "# print (len(guided_anchors))", "\n", "# print (guided_anchors[0].size())", "\n", "\n", "bbox_score", ",", "guided_anchors", "=", "self", ".", "extra_head", "(", "conv6", ",", "guided_anchors", ",", "is_test", "=", "True", ")", "\n", "# (bbox_score is a list of batch_size tensors)", "\n", "# # (bbox_score[i] has shape: (num_guided_anchors_in_pc_i))", "\n", "# (guided_anchors is a list of batch_size tensors)", "\n", "# # (guided_anchors[i] has shape: (num_guided_anchors_in_pc_i, 7))", "\n", "print", "(", "\" \"", ")", "\n", "print", "(", "len", "(", "bbox_score", ")", ")", "\n", "print", "(", "bbox_score", "[", "0", "]", ".", "size", "(", ")", ")", "\n", "# print (bbox_score[0])", "\n", "print", "(", "len", "(", "guided_anchors", ")", ")", "\n", "print", "(", "guided_anchors", "[", "0", "]", ".", "size", "(", ")", ")", "\n", "\n", "# if self.full_cfg is not None:", "\n", "#     if self.full_cfg.USE_EBM and (self.test_cfg.extra.EBM_guided or self.test_cfg.extra.EBM_refine):", "\n", "#         # print (\"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\")", "\n", "#         # (conv6 has shape: (batch_size, 256, 200, 176))", "\n", "#         # (guided_anchors is a list of batch_size tensors)", "\n", "#         # (guided_anchors[i] has shape: (num_guided_anchors_in_pc_i, 7))", "\n", "#", "\n", "#         batch_size = len(guided_anchors)", "\n", "#", "\n", "#         ys_list = guided_anchors", "\n", "#", "\n", "#         ys_features_list = []", "\n", "#         for i in range(batch_size):", "\n", "#             # (conv6 has shape: (batch_size, 256, 200, 176))", "\n", "#             # (ys_list[i] has shape: (num_guided_anchors_in_pc_i, 7))", "\n", "#             # print (conv6.size())", "\n", "#             # print (ys_list[i].size())", "\n", "#", "\n", "#             if ys_list[i].size(0) == 0:", "\n", "#                 ys_features_list.append(None)", "\n", "#                 continue", "\n", "#", "\n", "#             (ys_pixel_xs, ys_pixel_ys) = self.gen_grid_fn(ys_list[i][:, [0, 1, 3, 4, 6]])", "\n", "#             # (both have shape: (4, 7, num_guided_anchors_in_pc_i))", "\n", "#             # print (ys_pixel_xs.size())", "\n", "#             # print (ys_pixel_ys.size())", "\n", "#             ys_pixel_xs = ys_pixel_xs.permute(2, 0, 1).contiguous() # (shape: (num_guided_anchors_in_pc_i, 4, 7))", "\n", "#             ys_pixel_ys = ys_pixel_ys.permute(2, 0, 1).contiguous() # (shape: (num_guided_anchors_in_pc_i, 4, 7))", "\n", "#             # print (ys_pixel_xs.size())", "\n", "#             # print (ys_pixel_ys.size())", "\n", "#             ys_pixel_coords = torch.cat([ys_pixel_xs.unsqueeze(3), ys_pixel_ys.unsqueeze(3)], 3)", "\n", "#             # (shape: (num_guided_anchors_in_pc_i, 4, 7, 2))", "\n", "#             # print (ys_pixel_coords.size())", "\n", "#", "\n", "#             conv6_i = conv6[i].unsqueeze(0) # (shape: (1, 256, 200, 176))", "\n", "#             # print (conv6_i.size())", "\n", "#             conv6_i_ys = conv6_i.expand(ys_pixel_coords.size(0), -1, -1, -1)", "\n", "#             # (shape: (num_guided_anchors_in_pc_i, 256, 200, 176))", "\n", "#             # print (conv6_i_ys.size())", "\n", "#", "\n", "#             if conv6_i_ys.size(0) < 150:", "\n", "#                 ys_feature_maps = bilinear_interpolate_torch_gridsample(conv6_i_ys, ys_pixel_coords)", "\n", "#                 # (shape: (num_guided_anchors_in_pc_i, 256, 4, 7))", "\n", "#                 # print (ys_feature_maps.size())", "\n", "#             else:", "\n", "#                 num_iters = int(math.floor(conv6_i_ys.size(0)/150.0))", "\n", "#                 ys_feature_maps_list = []", "\n", "#                 for iter in range(num_iters):", "\n", "#                     ys_feature_maps_list.append(bilinear_interpolate_torch_gridsample(conv6_i_ys[(150*iter):(150*(iter+1))], ys_pixel_coords[(150*iter):(150*(iter+1))]))", "\n", "#                 ys_feature_maps_list.append(bilinear_interpolate_torch_gridsample(conv6_i_ys[(150*num_iters):], ys_pixel_coords[(150*num_iters):]))", "\n", "#                 ys_feature_maps = torch.cat(ys_feature_maps_list, 0)", "\n", "#                 # (shape: (num_guided_anchors_in_pc_i, 256, 4, 7))", "\n", "#", "\n", "#             ys_features = ys_feature_maps.view(ys_feature_maps.size(0), -1)", "\n", "#             # (shape: (num_guided_anchors_in_pc_i, 7168)) (7168 = 256*4*7)", "\n", "#             # print (ys_features.size())", "\n", "#             z_feature = F.relu(self.z_fc1(ys_list[i][:, 2].unsqueeze(1))) # (shape: (num_guided_anchors_in_pc_i, 16))", "\n", "#             z_feature = F.relu(self.z_fc2(z_feature)) # (shape: (num_guided_anchors_in_pc_i, 16))", "\n", "#             # print (z_feature.size())", "\n", "#             h_feature = F.relu(self.h_fc1(ys_list[i][:, 5].unsqueeze(1))) # (shape: (num_guided_anchors_in_pc_i, 16))", "\n", "#             h_feature = F.relu(self.h_fc2(h_feature)) # (shape: (num_guided_anchors_in_pc_i, 16))", "\n", "#             # print (h_feature.size())", "\n", "#             ys_features = torch.cat([ys_features, z_feature, h_feature], 1) # (shape: (num_guided_anchors_in_pc_i, 7168+16+16))", "\n", "#             # print (ys_features.size())", "\n", "#             ys_features_list.append(ys_features)", "\n", "#", "\n", "#         fs_list = []", "\n", "#         for i in range(batch_size):", "\n", "#             if ys_features_list[i] is None:", "\n", "#                 fs_list.append(None)", "\n", "#                 continue", "\n", "#", "\n", "#             features = F.relu(self.ebm_fc1(ys_features_list[i])) # (shape: (num_guided_anchors_in_pc_i, 1024))", "\n", "#             # print (features.size())", "\n", "#             features = F.relu(self.ebm_fc2(features)) # (shape: (num_guided_anchors_in_pc_i, 1024))", "\n", "#             # print (features.size())", "\n", "#", "\n", "#             fs = self.ebm_fc3(features) # (shape: (num_guided_anchors_in_pc_i, 1))", "\n", "#             # print (fs.size())", "\n", "#             fs = fs.squeeze(1) # (shape: (num_guided_anchors_in_pc_i))", "\n", "#             # print (fs.size())", "\n", "#", "\n", "#             fs_list.append(fs)", "\n", "#", "\n", "#     # (fs_list is a list of batch_size tensors)", "\n", "#     # # (fs_list[i] has shape: (num_guided_anchors_in_pc_i))", "\n", "#     # print (\" \")", "\n", "#     # print (len(fs_list))", "\n", "#     # print (fs_list[0].size())", "\n", "#     # print (fs_list[0])", "\n", "\n", "if", "self", ".", "test_cfg", ".", "extra", ".", "EBM_guided", ":", "\n", "                ", "det_bboxes", ",", "det_scores", ",", "det_fs", "=", "self", ".", "extra_head", ".", "get_rescore_bboxes_ebm_guided", "(", "\n", "guided_anchors", ",", "bbox_score", ",", "fs_list", ",", "img_meta", ",", "self", ".", "test_cfg", ".", "extra", ")", "\n", "", "else", ":", "\n", "                ", "det_bboxes", ",", "det_scores", "=", "self", ".", "extra_head", ".", "get_rescore_bboxes", "(", "\n", "guided_anchors", ",", "bbox_score", ",", "img_meta", ",", "self", ".", "test_cfg", ".", "extra", ")", "\n", "det_fs", "=", "None", "\n", "# (det_scores is a list of batch_size numpy arrays)", "\n", "# # (det_scores[i] has shape: (num_detections_i)) (num_detections_i <= num_guided_anchors_in_pc_i)", "\n", "# (det_fs is a list of batch_size numpy arrays)", "\n", "# # (det_fs[i] has shape: (num_detections_i))", "\n", "# (det_bboxes is a list of batch_size numpy arrays)", "\n", "# # (det_bboxes[i] has shape: (num_detections_i, 7))", "\n", "# print (len(det_scores))", "\n", "# print (det_scores[0].shape)", "\n", "# print (len(det_bboxes))", "\n", "# print (det_bboxes[0].shape)", "\n", "\n", "", "print", "(", "\" \"", ")", "\n", "print", "(", "\"fs before refinement:\"", ")", "\n", "if", "det_fs", "is", "not", "None", ":", "\n", "                ", "print", "(", "det_fs", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "det_fs", ")", "\n", "", "print", "(", "\"bboxes before refinement:\"", ")", "\n", "print", "(", "det_bboxes", "[", "0", "]", ")", "\n", "# print (\"%%%%%%%%%%%%%%%%%%%%%%\")", "\n", "# (end of \"with torch.no_grad():\"\") ####################################", "\n", "\n", "", "if", "self", ".", "test_cfg", ".", "extra", ".", "EBM_refine", ":", "\n", "# (det_bboxes is a list of batch_size numpy arrays)", "\n", "# # (det_bboxes[i] has shape: (num_detections_i, 7))", "\n", "# (conv6 has shape: (batch_size, 256, 200, 176))", "\n", "# (batch_size == 1)", "\n", "# print (conv6.size())", "\n", "\n", "            ", "bboxes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "det_bboxes", ")", ")", ":", "\n", "                ", "bboxes", ".", "append", "(", "torch", ".", "from_numpy", "(", "det_bboxes", "[", "i", "]", ")", ".", "cuda", "(", ")", ")", "\n", "# (bboxes is a list of batch_size tensors)", "\n", "# # (bboxes[i] has shape: (num_detections_i, 7))", "\n", "# print (len(bboxes))", "\n", "# print (bboxes[0].size())", "\n", "\n", "", "conv6", ".", "requires_grad", "=", "True", "\n", "\n", "det_bboxes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "bboxes", ")", ")", ":", "\n", "# (conv6 has shape: (batch_size, 256, 200, 176))", "\n", "# (bboxes[i] has shape: (num_detections_i, 7))", "\n", "# print (conv6.size())", "\n", "# print (bboxes[i].size())", "\n", "\n", "                ", "bboxes_i", "=", "bboxes", "[", "i", "]", "# (shape: (num_detections_i, 7))", "\n", "if", "bboxes_i", ".", "size", "(", "0", ")", "==", "0", ":", "\n", "                    ", "det_bboxes", ".", "append", "(", "bboxes_i", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "continue", "\n", "\n", "", "step_sizes", "=", "0.0002", "*", "torch", ".", "ones", "(", "bboxes_i", ".", "size", "(", "0", ")", ",", "1", ")", ".", "cuda", "(", ")", "# (shape: (num_detections_i, 1))", "\n", "print", "(", "self", ".", "test_cfg", ".", "extra", ".", "EBM_refine_steps", ")", "\n", "print", "(", "step_sizes", ")", "\n", "for", "step", "in", "range", "(", "self", ".", "test_cfg", ".", "extra", ".", "EBM_refine_steps", ")", ":", "\n", "# print (step_sizes)", "\n", "\n", "                    ", "bboxes_init", "=", "bboxes_i", ".", "clone", "(", ")", ".", "detach", "(", ")", "# (shape: (num_detections_i, 7))", "\n", "\n", "bboxes_init", ".", "requires_grad", "=", "True", "\n", "\n", "# print (bboxes_init[0])", "\n", "# print (bboxes_init.size())", "\n", "\n", "############################################################", "\n", "############################################################", "\n", "############################################################", "\n", "############################################################", "\n", "############################################################", "\n", "(", "ys_pixel_xs", ",", "ys_pixel_ys", ")", "=", "self", ".", "gen_grid_fn", "(", "bboxes_init", "[", ":", ",", "[", "0", ",", "1", ",", "3", ",", "4", ",", "6", "]", "]", ")", "\n", "# (both have shape: (4, 7, num_detections_i))", "\n", "# print (ys_pixel_xs.size())", "\n", "# print (ys_pixel_ys.size())", "\n", "ys_pixel_xs", "=", "ys_pixel_xs", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "# (shape: (num_detections_i, 4, 7))", "\n", "ys_pixel_ys", "=", "ys_pixel_ys", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "# (shape: (num_detections_i, 4, 7))", "\n", "# print (ys_pixel_xs.size())", "\n", "# print (ys_pixel_ys.size())", "\n", "ys_pixel_coords", "=", "torch", ".", "cat", "(", "[", "ys_pixel_xs", ".", "unsqueeze", "(", "3", ")", ",", "ys_pixel_ys", ".", "unsqueeze", "(", "3", ")", "]", ",", "3", ")", "\n", "# (shape: (num_detections_i, 4, 7, 2))", "\n", "# print (ys_pixel_coords.size())", "\n", "#", "\n", "conv6_i", "=", "conv6", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", "# (shape: (1, 256, 200, 176))", "\n", "# print (conv6_i.size())", "\n", "conv6_i_ys", "=", "conv6_i", ".", "expand", "(", "ys_pixel_coords", ".", "size", "(", "0", ")", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "# (shape: (num_detections_i, 256, 200, 176))", "\n", "# print (conv6_i_ys.size())", "\n", "#", "\n", "if", "conv6_i_ys", ".", "size", "(", "0", ")", "<", "150", ":", "\n", "                        ", "ys_feature_maps", "=", "bilinear_interpolate_torch_gridsample", "(", "conv6_i_ys", ",", "ys_pixel_coords", ")", "\n", "# (shape: (num_detections_i, 256, 4, 7))", "\n", "# print (ys_feature_maps.size())", "\n", "", "else", ":", "\n", "                        ", "num_iters", "=", "int", "(", "math", ".", "floor", "(", "conv6_i_ys", ".", "size", "(", "0", ")", "/", "150.0", ")", ")", "\n", "ys_feature_maps_list", "=", "[", "]", "\n", "for", "iter", "in", "range", "(", "num_iters", ")", ":", "\n", "                            ", "ys_feature_maps_list", ".", "append", "(", "bilinear_interpolate_torch_gridsample", "(", "conv6_i_ys", "[", "(", "150", "*", "iter", ")", ":", "(", "150", "*", "(", "iter", "+", "1", ")", ")", "]", ",", "ys_pixel_coords", "[", "(", "150", "*", "iter", ")", ":", "(", "150", "*", "(", "iter", "+", "1", ")", ")", "]", ")", ")", "\n", "", "ys_feature_maps_list", ".", "append", "(", "bilinear_interpolate_torch_gridsample", "(", "conv6_i_ys", "[", "(", "150", "*", "num_iters", ")", ":", "]", ",", "ys_pixel_coords", "[", "(", "150", "*", "num_iters", ")", ":", "]", ")", ")", "\n", "ys_feature_maps", "=", "torch", ".", "cat", "(", "ys_feature_maps_list", ",", "0", ")", "\n", "# (shape: (num_detections_i, 256, 4, 7))", "\n", "#", "\n", "", "ys_features", "=", "ys_feature_maps", ".", "view", "(", "ys_feature_maps", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "# (shape: (num_detections_i, 7168)) (7168 = 256*4*7)", "\n", "# print (ys_features.size())", "\n", "z_feature", "=", "F", ".", "relu", "(", "self", ".", "z_fc1", "(", "bboxes_init", "[", ":", ",", "2", "]", ".", "unsqueeze", "(", "1", ")", ")", ")", "# (shape: (num_detections_i, 16))", "\n", "z_feature", "=", "F", ".", "relu", "(", "self", ".", "z_fc2", "(", "z_feature", ")", ")", "# (shape: (num_detections_i, 16))", "\n", "# print (z_feature.size())", "\n", "h_feature", "=", "F", ".", "relu", "(", "self", ".", "h_fc1", "(", "bboxes_init", "[", ":", ",", "5", "]", ".", "unsqueeze", "(", "1", ")", ")", ")", "# (shape: (num_detections_i, 16))", "\n", "h_feature", "=", "F", ".", "relu", "(", "self", ".", "h_fc2", "(", "h_feature", ")", ")", "# (shape: (num_detections_i, 16))", "\n", "# print (h_feature.size())", "\n", "ys_features", "=", "torch", ".", "cat", "(", "[", "ys_features", ",", "z_feature", ",", "h_feature", "]", ",", "1", ")", "# (shape: (num_detections_i, 7168+16+16))", "\n", "# print (ys_features.size())", "\n", "#", "\n", "features", "=", "F", ".", "relu", "(", "self", ".", "ebm_fc1", "(", "ys_features", ")", ")", "# (shape: (num_detections_i, 1024))", "\n", "# print (features.size())", "\n", "features", "=", "F", ".", "relu", "(", "self", ".", "ebm_fc2", "(", "features", ")", ")", "# (shape: (num_detections_i, 1024))", "\n", "# print (features.size())", "\n", "#", "\n", "fs", "=", "self", ".", "ebm_fc3", "(", "features", ")", "# (shape: (num_detections_i, 1))", "\n", "# print (fs.size())", "\n", "fs", "=", "fs", ".", "squeeze", "(", "1", ")", "# (shape: (num_detections_i))", "\n", "# print (fs.size())", "\n", "# print (fs)", "\n", "############################################################", "\n", "############################################################", "\n", "############################################################", "\n", "############################################################", "\n", "############################################################", "\n", "\n", "grad_bboxes_init", "=", "torch", ".", "autograd", ".", "grad", "(", "fs", ".", "sum", "(", ")", ",", "bboxes_init", ",", "create_graph", "=", "True", ")", "[", "0", "]", "\n", "# (shape: (num_detections_i, 7)) (same as bboxes_init)", "\n", "# print (grad_bboxes_init.size())", "\n", "\n", "bboxes_refined", "=", "bboxes_init", "+", "step_sizes", "*", "grad_bboxes_init", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "############################################################", "\n", "############################################################", "\n", "############################################################", "\n", "############################################################", "\n", "############################################################", "\n", "                        ", "(", "ys_pixel_xs", ",", "ys_pixel_ys", ")", "=", "self", ".", "gen_grid_fn", "(", "bboxes_refined", "[", ":", ",", "[", "0", ",", "1", ",", "3", ",", "4", ",", "6", "]", "]", ")", "\n", "# (both have shape: (4, 7, num_detections_i))", "\n", "# print (ys_pixel_xs.size())", "\n", "# print (ys_pixel_ys.size())", "\n", "ys_pixel_xs", "=", "ys_pixel_xs", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "# (shape: (num_detections_i, 4, 7))", "\n", "ys_pixel_ys", "=", "ys_pixel_ys", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "# (shape: (num_detections_i, 4, 7))", "\n", "# print (ys_pixel_xs.size())", "\n", "# print (ys_pixel_ys.size())", "\n", "ys_pixel_coords", "=", "torch", ".", "cat", "(", "[", "ys_pixel_xs", ".", "unsqueeze", "(", "3", ")", ",", "ys_pixel_ys", ".", "unsqueeze", "(", "3", ")", "]", ",", "3", ")", "\n", "# (shape: (num_detections_i, 4, 7, 2))", "\n", "# print (ys_pixel_coords.size())", "\n", "#", "\n", "conv6_i", "=", "conv6", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", "# (shape: (1, 256, 200, 176))", "\n", "# print (conv6_i.size())", "\n", "conv6_i_ys", "=", "conv6_i", ".", "expand", "(", "ys_pixel_coords", ".", "size", "(", "0", ")", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "# (shape: (num_detections_i, 256, 200, 176))", "\n", "# print (conv6_i_ys.size())", "\n", "#", "\n", "if", "conv6_i_ys", ".", "size", "(", "0", ")", "<", "150", ":", "\n", "                            ", "ys_feature_maps", "=", "bilinear_interpolate_torch_gridsample", "(", "conv6_i_ys", ",", "ys_pixel_coords", ")", "\n", "# (shape: (num_detections_i, 256, 4, 7))", "\n", "# print (ys_feature_maps.size())", "\n", "", "else", ":", "\n", "                            ", "num_iters", "=", "int", "(", "math", ".", "floor", "(", "conv6_i_ys", ".", "size", "(", "0", ")", "/", "150.0", ")", ")", "\n", "ys_feature_maps_list", "=", "[", "]", "\n", "for", "iter", "in", "range", "(", "num_iters", ")", ":", "\n", "                                ", "ys_feature_maps_list", ".", "append", "(", "bilinear_interpolate_torch_gridsample", "(", "conv6_i_ys", "[", "(", "150", "*", "iter", ")", ":", "(", "150", "*", "(", "iter", "+", "1", ")", ")", "]", ",", "ys_pixel_coords", "[", "(", "150", "*", "iter", ")", ":", "(", "150", "*", "(", "iter", "+", "1", ")", ")", "]", ")", ")", "\n", "", "ys_feature_maps_list", ".", "append", "(", "bilinear_interpolate_torch_gridsample", "(", "conv6_i_ys", "[", "(", "150", "*", "num_iters", ")", ":", "]", ",", "ys_pixel_coords", "[", "(", "150", "*", "num_iters", ")", ":", "]", ")", ")", "\n", "ys_feature_maps", "=", "torch", ".", "cat", "(", "ys_feature_maps_list", ",", "0", ")", "\n", "# (shape: (num_detections_i, 256, 4, 7))", "\n", "#", "\n", "", "ys_features", "=", "ys_feature_maps", ".", "view", "(", "ys_feature_maps", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "# (shape: (num_detections_i, 7168)) (7168 = 256*4*7)", "\n", "# print (ys_features.size())", "\n", "z_feature", "=", "F", ".", "relu", "(", "self", ".", "z_fc1", "(", "bboxes_refined", "[", ":", ",", "2", "]", ".", "unsqueeze", "(", "1", ")", ")", ")", "# (shape: (num_detections_i, 16))", "\n", "z_feature", "=", "F", ".", "relu", "(", "self", ".", "z_fc2", "(", "z_feature", ")", ")", "# (shape: (num_detections_i, 16))", "\n", "# print (z_feature.size())", "\n", "h_feature", "=", "F", ".", "relu", "(", "self", ".", "h_fc1", "(", "bboxes_refined", "[", ":", ",", "5", "]", ".", "unsqueeze", "(", "1", ")", ")", ")", "# (shape: (num_detections_i, 16))", "\n", "h_feature", "=", "F", ".", "relu", "(", "self", ".", "h_fc2", "(", "h_feature", ")", ")", "# (shape: (num_detections_i, 16))", "\n", "# print (h_feature.size())", "\n", "ys_features", "=", "torch", ".", "cat", "(", "[", "ys_features", ",", "z_feature", ",", "h_feature", "]", ",", "1", ")", "# (shape: (num_detections_i, 7168+16+16))", "\n", "# print (ys_features.size())", "\n", "#", "\n", "features", "=", "F", ".", "relu", "(", "self", ".", "ebm_fc1", "(", "ys_features", ")", ")", "# (shape: (num_detections_i, 1024))", "\n", "# print (features.size())", "\n", "features", "=", "F", ".", "relu", "(", "self", ".", "ebm_fc2", "(", "features", ")", ")", "# (shape: (num_detections_i, 1024))", "\n", "# print (features.size())", "\n", "#", "\n", "new_fs", "=", "self", ".", "ebm_fc3", "(", "features", ")", "# (shape: (num_detections_i, 1))", "\n", "# print (new_fs.size())", "\n", "new_fs", "=", "new_fs", ".", "squeeze", "(", "1", ")", "# (shape: (num_detections_i))", "\n", "# print (new_fs.size())", "\n", "# print (new_fs)", "\n", "############################################################", "\n", "############################################################", "\n", "############################################################", "\n", "############################################################", "\n", "############################################################", "\n", "\n", "refinement_failed", "=", "(", "new_fs", "<", "fs", ")", "# (shape: (num_detections_i))", "\n", "# print (refinement_failed)", "\n", "# print (refinement_failed.size())", "\n", "refinement_failed", "=", "refinement_failed", ".", "unsqueeze", "(", "1", ")", "# (shape: (num_detections_i, 1))", "\n", "r_f", "=", "refinement_failed", ".", "float", "(", ")", "\n", "\n", "bboxes_i", "=", "r_f", "*", "bboxes_init", "+", "(", "1.0", "-", "r_f", ")", "*", "bboxes_refined", "\n", "\n", "step_sizes", "=", "(", "1.0", "-", "r_f", ")", "*", "step_sizes", "+", "r_f", "*", "0.5", "*", "step_sizes", "\n", "\n", "if", "step", "==", "self", ".", "test_cfg", ".", "extra", ".", "EBM_refine_steps", "-", "1", ":", "# (in final step)", "\n", "                            ", "refinement_failed", "=", "(", "new_fs", "<", "fs", ")", "# (shape: (num_detections_i))", "\n", "# print (refinement_failed)", "\n", "# print (refinement_failed.size())", "\n", "r_f", "=", "refinement_failed", ".", "float", "(", ")", "\n", "final_fs", "=", "r_f", "*", "fs", "+", "(", "1.0", "-", "r_f", ")", "*", "new_fs", "\n", "\n", "print", "(", "\"###\"", ")", "\n", "print", "(", "\"###\"", ")", "\n", "print", "(", "\"###\"", ")", "\n", "print", "(", "\"fs after refinement:\"", ")", "\n", "print", "(", "final_fs", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "", "", "det_bboxes", ".", "append", "(", "bboxes_i", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "", "print", "(", "\"bboxes after refinement:\"", ")", "\n", "print", "(", "det_bboxes", "[", "0", "]", ")", "\n", "\n", "#################################################################################", "\n", "# uncomment these lines to save the predictions when running on a test sequence:", "\n", "#################################################################################", "\n", "# sample_idx = img_meta[0][\"sample_idx\"]", "\n", "# import pickle", "\n", "# # with open(\"preds0011/%d.pkl\" % sample_idx, \"wb\") as file:", "\n", "# # with open(\"preds0002/%d.pkl\" % sample_idx, \"wb\") as file:", "\n", "# # with open(\"preds0007/%d.pkl\" % sample_idx, \"wb\") as file:", "\n", "# # with open(\"preds0001/%d.pkl\" % sample_idx, \"wb\") as file:", "\n", "# # with open(\"preds0000/%d.pkl\" % sample_idx, \"wb\") as file:", "\n", "# # with open(\"preds0003/%d.pkl\" % sample_idx, \"wb\") as file:", "\n", "# # with open(\"preds0004/%d.pkl\" % sample_idx, \"wb\") as file:", "\n", "# # with open(\"preds0005/%d.pkl\" % sample_idx, \"wb\") as file:", "\n", "# # with open(\"preds0006/%d.pkl\" % sample_idx, \"wb\") as file:", "\n", "# # with open(\"preds0008/%d.pkl\" % sample_idx, \"wb\") as file:", "\n", "# # with open(\"preds0009/%d.pkl\" % sample_idx, \"wb\") as file:", "\n", "# # with open(\"preds0010/%d.pkl\" % sample_idx, \"wb\") as file:", "\n", "# # with open(\"preds0012/%d.pkl\" % sample_idx, \"wb\") as file:", "\n", "# # with open(\"preds0013/%d.pkl\" % sample_idx, \"wb\") as file:", "\n", "# # with open(\"preds0014/%d.pkl\" % sample_idx, \"wb\") as file:", "\n", "# # with open(\"preds0015/%d.pkl\" % sample_idx, \"wb\") as file:", "\n", "# # with open(\"preds0016/%d.pkl\" % sample_idx, \"wb\") as file:", "\n", "# # with open(\"preds0017/%d.pkl\" % sample_idx, \"wb\") as file:", "\n", "# # with open(\"preds0018/%d.pkl\" % sample_idx, \"wb\") as file:", "\n", "# with open(\"preds0027/%d.pkl\" % sample_idx, \"wb\") as file:", "\n", "#     pickle.dump(det_bboxes[0], file, protocol=2) # (protocol=2 is needed to be able to open this file with python2)", "\n", "########################################################################", "\n", "\n", "results", "=", "[", "kitti_bbox2results", "(", "*", "param", ")", "for", "param", "in", "zip", "(", "det_bboxes", ",", "det_scores", ",", "img_meta", ")", "]", "\n", "\n", "print", "(", "\"{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}\"", ")", "\n", "\n", "return", "results", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.single_stage.gauss_density_centered": [[19, 21], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "math.sqrt"], "function", ["None"], ["def", "gauss_density_centered", "(", "x", ",", "std", ")", ":", "\n", "    ", "return", "torch", ".", "exp", "(", "-", "0.5", "*", "(", "x", "/", "std", ")", "**", "2", ")", "/", "(", "math", ".", "sqrt", "(", "2", "*", "math", ".", "pi", ")", "*", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.single_stage.gmm_density_centered": [[22, 31], ["gauss_density_centered().prod().mean", "x.unsqueeze.dim", "x.unsqueeze.unsqueeze", "std.dim", "ValueError", "gauss_density_centered().prod", "x.unsqueeze.dim", "std.dim", "single_stage.gauss_density_centered"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.single_stage.gauss_density_centered"], ["", "def", "gmm_density_centered", "(", "x", ",", "std", ")", ":", "\n", "    ", "\"\"\"\n    Assumes dim=-1 is the component dimension and dim=-2 is feature dimension. Rest are sample dimension.\n    \"\"\"", "\n", "if", "x", ".", "dim", "(", ")", "==", "std", ".", "dim", "(", ")", "-", "1", ":", "\n", "        ", "x", "=", "x", ".", "unsqueeze", "(", "-", "1", ")", "\n", "", "elif", "not", "(", "x", ".", "dim", "(", ")", "==", "std", ".", "dim", "(", ")", "and", "x", ".", "shape", "[", "-", "1", "]", "==", "1", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'Last dimension must be the gmm stds.'", ")", "\n", "", "return", "gauss_density_centered", "(", "x", ",", "std", ")", ".", "prod", "(", "-", "2", ")", ".", "mean", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.single_stage.sample_gmm_centered": [[32, 49], ["std.view.view", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "std[].t", "single_stage.gmm_density_centered", "single_stage.gmm_density_centered", "std.view.numel", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.single_stage.gmm_density_centered", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.single_stage.gmm_density_centered"], ["", "def", "sample_gmm_centered", "(", "std", ",", "num_samples", "=", "1", ")", ":", "\n", "    ", "num_components", "=", "std", ".", "shape", "[", "-", "1", "]", "\n", "num_dims", "=", "std", ".", "numel", "(", ")", "//", "num_components", "\n", "\n", "std", "=", "std", ".", "view", "(", "1", ",", "num_dims", ",", "num_components", ")", "\n", "\n", "# Sample component ids", "\n", "k", "=", "torch", ".", "randint", "(", "num_components", ",", "(", "num_samples", ",", ")", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "std_samp", "=", "std", "[", "0", ",", ":", ",", "k", "]", ".", "t", "(", ")", "\n", "\n", "# Sample", "\n", "x_centered", "=", "std_samp", "*", "torch", ".", "randn", "(", "num_samples", ",", "num_dims", ")", "\n", "prob_dens", "=", "gmm_density_centered", "(", "x_centered", ",", "std", ")", "\n", "\n", "prob_dens_zero", "=", "gmm_density_centered", "(", "torch", ".", "zeros_like", "(", "x_centered", ")", ",", "std", ")", "\n", "\n", "return", "x_centered", ",", "prob_dens", ",", "prob_dens_zero", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.single_stage.sample_gmm_centered2": [[50, 67], ["std.view.view", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "std[].t", "single_stage.gmm_density_centered", "single_stage.gmm_density_centered", "std.view.numel", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.single_stage.gmm_density_centered", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.single_stage.gmm_density_centered"], ["", "def", "sample_gmm_centered2", "(", "beta", ",", "std", ",", "num_samples", "=", "1", ")", ":", "\n", "    ", "num_components", "=", "std", ".", "shape", "[", "-", "1", "]", "\n", "num_dims", "=", "std", ".", "numel", "(", ")", "//", "num_components", "\n", "\n", "std", "=", "std", ".", "view", "(", "1", ",", "num_dims", ",", "num_components", ")", "\n", "\n", "# Sample component ids", "\n", "k", "=", "torch", ".", "randint", "(", "num_components", ",", "(", "num_samples", ",", ")", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "std_samp", "=", "std", "[", "0", ",", ":", ",", "k", "]", ".", "t", "(", ")", "\n", "\n", "# Sample", "\n", "x_centered", "=", "beta", "*", "std_samp", "*", "torch", ".", "randn", "(", "num_samples", ",", "num_dims", ")", "\n", "prob_dens", "=", "gmm_density_centered", "(", "x_centered", ",", "std", ")", "\n", "\n", "prob_dens_zero", "=", "gmm_density_centered", "(", "torch", ".", "zeros_like", "(", "x_centered", ")", ",", "std", ")", "\n", "\n", "return", "x_centered", ",", "prob_dens", ",", "prob_dens_zero", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.single_stage.wrapToPi": [[113, 115], ["None"], "function", ["None"], ["def", "wrapToPi", "(", "a", ")", ":", "\n", "    ", "return", "(", "a", "+", "np", ".", "pi", ")", "%", "(", "2", "*", "np", ".", "pi", ")", "-", "np", ".", "pi", "\n", "################################################################################", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.single_stage.gen_sample_grid": [[123, 153], ["torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "xg.unsqueeze_().expand.unsqueeze_().expand", "yg.unsqueeze_().expand.unsqueeze_().expand", "rg.unsqueeze_().expand.unsqueeze_().expand", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "xx.unsqueeze_().expand.unsqueeze_().expand", "yy.unsqueeze_().expand.unsqueeze_().expand", "torch.linspace().type_as().view", "torch.linspace().type_as().view", "torch.linspace().type_as().view", "torch.linspace().type_as().view", "torch.linspace().type_as().view", "torch.linspace().type_as().view", "torch.linspace().type_as().view", "torch.linspace().type_as().view", "torch.linspace().type_as().view", "torch.linspace().type_as().view", "xg.unsqueeze_().expand.unsqueeze_", "yg.unsqueeze_().expand.unsqueeze_", "rg.unsqueeze_().expand.unsqueeze_", "xx.unsqueeze_().expand.unsqueeze_", "yy.unsqueeze_().expand.unsqueeze_", "x.permute().contiguous", "y.permute().contiguous", "torch.linspace().type_as", "torch.linspace().type_as", "torch.linspace().type_as", "torch.linspace().type_as", "torch.linspace().type_as", "torch.linspace().type_as", "torch.linspace().type_as", "torch.linspace().type_as", "torch.linspace().type_as", "torch.linspace().type_as", "x.permute", "y.permute", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace"], "function", ["None"], ["def", "gen_sample_grid", "(", "box", ",", "window_size", "=", "(", "4", ",", "7", ")", ",", "grid_offsets", "=", "(", "0", ",", "0", ")", ",", "spatial_scale", "=", "1.", ")", ":", "\n", "# (this function is taken directly from models/single_stage_heads/ssd_rotate_head.py)", "\n", "\n", "# print (spatial_scale)", "\n", "\n", "    ", "N", "=", "box", ".", "shape", "[", "0", "]", "\n", "win", "=", "window_size", "[", "0", "]", "*", "window_size", "[", "1", "]", "\n", "xg", ",", "yg", ",", "wg", ",", "lg", ",", "rg", "=", "torch", ".", "split", "(", "box", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "\n", "xg", "=", "xg", ".", "unsqueeze_", "(", "-", "1", ")", ".", "expand", "(", "N", ",", "*", "window_size", ")", "\n", "yg", "=", "yg", ".", "unsqueeze_", "(", "-", "1", ")", ".", "expand", "(", "N", ",", "*", "window_size", ")", "\n", "rg", "=", "rg", ".", "unsqueeze_", "(", "-", "1", ")", ".", "expand", "(", "N", ",", "*", "window_size", ")", "\n", "\n", "cosTheta", "=", "torch", ".", "cos", "(", "rg", ")", "\n", "sinTheta", "=", "torch", ".", "sin", "(", "rg", ")", "\n", "\n", "xx", "=", "torch", ".", "linspace", "(", "-", ".5", ",", ".5", ",", "window_size", "[", "0", "]", ")", ".", "type_as", "(", "box", ")", ".", "view", "(", "1", ",", "-", "1", ")", "*", "wg", "\n", "yy", "=", "torch", ".", "linspace", "(", "-", ".5", ",", ".5", ",", "window_size", "[", "1", "]", ")", ".", "type_as", "(", "box", ")", ".", "view", "(", "1", ",", "-", "1", ")", "*", "lg", "\n", "\n", "xx", "=", "xx", ".", "unsqueeze_", "(", "-", "1", ")", ".", "expand", "(", "N", ",", "*", "window_size", ")", "\n", "yy", "=", "yy", ".", "unsqueeze_", "(", "1", ")", ".", "expand", "(", "N", ",", "*", "window_size", ")", "\n", "\n", "x", "=", "(", "xx", "*", "cosTheta", "+", "yy", "*", "sinTheta", "+", "xg", ")", "\n", "y", "=", "(", "yy", "*", "cosTheta", "-", "xx", "*", "sinTheta", "+", "yg", ")", "\n", "\n", "x", "=", "(", "x", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", "+", "grid_offsets", "[", "0", "]", ")", "*", "spatial_scale", "\n", "y", "=", "(", "y", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", "+", "grid_offsets", "[", "1", "]", ")", "*", "spatial_scale", "\n", "\n", "# return x.view(win, -1), y.view(win, -1)", "\n", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.single_stage.bilinear_interpolate_torch_gridsample": [[154, 165], ["torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample"], "function", ["None"], ["", "def", "bilinear_interpolate_torch_gridsample", "(", "input", ",", "grid", ")", ":", "\n", "# (input has shape: (N, C, H_in, W_in))", "\n", "# (grid has shape: (N, H_out, W_out, 2))", "\n", "\n", "    ", "N", ",", "C", ",", "H", ",", "W", "=", "input", ".", "shape", "\n", "\n", "grid", "[", ":", ",", ":", ",", ":", ",", "0", "]", "=", "(", "grid", "[", ":", ",", ":", ",", ":", ",", "0", "]", "/", "(", "W", "-", "1", ")", ")", "# normalize to between  0 and 1", "\n", "grid", "[", ":", ",", ":", ",", ":", ",", "1", "]", "=", "(", "grid", "[", ":", ",", ":", ",", ":", ",", "1", "]", "/", "(", "H", "-", "1", ")", ")", "# normalize to between  0 and 1", "\n", "grid", "=", "grid", "*", "2", "-", "1", "# normalize to between -1 and 1", "\n", "\n", "return", "torch", ".", "nn", ".", "functional", ".", "grid_sample", "(", "input", ",", "grid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.single_stage.make_fc": [[166, 171], ["torch.Linear", "torch.init.kaiming_uniform_", "torch.init.constant_"], "function", ["None"], ["", "def", "make_fc", "(", "dim_in", ",", "hidden_dim", ")", ":", "\n", "    ", "fc", "=", "nn", ".", "Linear", "(", "dim_in", ",", "hidden_dim", ")", "\n", "nn", ".", "init", ".", "kaiming_uniform_", "(", "fc", ".", "weight", ",", "a", "=", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "fc", ".", "bias", ",", "0", ")", "\n", "return", "fc", "\n", "################################################################################", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.test_mixins.RPNTestMixin.simple_test_rpn": [[8, 13], ["test_mixins.RPNTestMixin.rpn_head", "test_mixins.RPNTestMixin.rpn_head.get_proposals"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.rpn_heads.rpn_head.RPNHead.get_proposals"], ["    ", "def", "simple_test_rpn", "(", "self", ",", "x", ",", "img_meta", ",", "rpn_test_cfg", ")", ":", "\n", "        ", "rpn_outs", "=", "self", ".", "rpn_head", "(", "x", ")", "\n", "proposal_inputs", "=", "rpn_outs", "+", "(", "img_meta", ",", "rpn_test_cfg", ")", "\n", "proposal_list", "=", "self", ".", "rpn_head", ".", "get_proposals", "(", "*", "proposal_inputs", ")", "\n", "return", "proposal_list", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.test_mixins.RPNTestMixin.aug_test_rpn": [[14, 27], ["len", "zip", "test_mixins.RPNTestMixin.simple_test_rpn", "enumerate", "mmdet.core.merge_aug_proposals", "range", "aug_proposals[].append", "zip"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.test_mixins.RPNTestMixin.simple_test_rpn", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.merge_augs.merge_aug_proposals"], ["", "def", "aug_test_rpn", "(", "self", ",", "feats", ",", "img_metas", ",", "rpn_test_cfg", ")", ":", "\n", "        ", "imgs_per_gpu", "=", "len", "(", "img_metas", "[", "0", "]", ")", "\n", "aug_proposals", "=", "[", "[", "]", "for", "_", "in", "range", "(", "imgs_per_gpu", ")", "]", "\n", "for", "x", ",", "img_meta", "in", "zip", "(", "feats", ",", "img_metas", ")", ":", "\n", "            ", "proposal_list", "=", "self", ".", "simple_test_rpn", "(", "x", ",", "img_meta", ",", "rpn_test_cfg", ")", "\n", "for", "i", ",", "proposals", "in", "enumerate", "(", "proposal_list", ")", ":", "\n", "                ", "aug_proposals", "[", "i", "]", ".", "append", "(", "proposals", ")", "\n", "# after merging, proposals will be rescaled to the original image size", "\n", "", "", "merged_proposals", "=", "[", "\n", "merge_aug_proposals", "(", "proposals", ",", "img_meta", ",", "rpn_test_cfg", ")", "\n", "for", "proposals", ",", "img_meta", "in", "zip", "(", "aug_proposals", ",", "img_metas", ")", "\n", "]", "\n", "return", "merged_proposals", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.test_mixins.BBoxTestMixin.simple_test_bboxes": [[31, 53], ["mmdet.core.bbox2roi", "test_mixins.BBoxTestMixin.bbox_roi_extractor", "test_mixins.BBoxTestMixin.bbox_head", "test_mixins.BBoxTestMixin.bbox_head.get_det_bboxes_nms", "len"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.transforms.bbox2roi"], ["    ", "def", "simple_test_bboxes", "(", "self", ",", "\n", "x", ",", "\n", "img_meta", ",", "\n", "proposals", ",", "\n", "rcnn_test_cfg", ",", "\n", "rescale", "=", "False", ")", ":", "\n", "        ", "\"\"\"Test only det bboxes without augmentation.\"\"\"", "\n", "rois", "=", "bbox2roi", "(", "proposals", ")", "\n", "roi_feats", "=", "self", ".", "bbox_roi_extractor", "(", "\n", "x", "[", ":", "len", "(", "self", ".", "bbox_roi_extractor", ".", "featmap_strides", ")", "]", ",", "rois", ")", "\n", "cls_score", ",", "bbox_pred", "=", "self", ".", "bbox_head", "(", "roi_feats", ")", "\n", "img_shape", "=", "img_meta", "[", "0", "]", "[", "'img_shape'", "]", "\n", "scale_factor", "=", "img_meta", "[", "0", "]", "[", "'scale_factor'", "]", "\n", "det_bboxes", ",", "det_labels", "=", "self", ".", "bbox_head", ".", "get_det_bboxes_nms", "(", "\n", "rois", ",", "\n", "cls_score", ",", "\n", "bbox_pred", ",", "\n", "img_shape", ",", "\n", "scale_factor", ",", "\n", "rescale", "=", "rescale", ",", "\n", "cfg", "=", "rcnn_test_cfg", ")", "\n", "return", "det_bboxes", ",", "det_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.test_mixins.BBoxTestMixin.aug_test_bboxes": [[54, 87], ["zip", "mmdet.core.merge_aug_bboxes", "multiclass_nms", "mmdet.core.bbox_mapping", "mmdet.core.bbox2roi", "test_mixins.BBoxTestMixin.bbox_roi_extractor", "test_mixins.BBoxTestMixin.bbox_head", "test_mixins.BBoxTestMixin.bbox_head.get_det_bboxes_nms", "aug_bboxes.append", "aug_scores.append", "len"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.merge_augs.merge_aug_bboxes", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.transforms.bbox_mapping", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.transforms.bbox2roi"], ["", "def", "aug_test_bboxes", "(", "self", ",", "feats", ",", "img_metas", ",", "proposal_list", ",", "rcnn_test_cfg", ")", ":", "\n", "        ", "aug_bboxes", "=", "[", "]", "\n", "aug_scores", "=", "[", "]", "\n", "for", "x", ",", "img_meta", "in", "zip", "(", "feats", ",", "img_metas", ")", ":", "\n", "# only one image in the batch", "\n", "            ", "img_shape", "=", "img_meta", "[", "0", "]", "[", "'img_shape'", "]", "\n", "scale_factor", "=", "img_meta", "[", "0", "]", "[", "'scale_factor'", "]", "\n", "flip", "=", "img_meta", "[", "0", "]", "[", "'flip'", "]", "\n", "# TODO more flexible", "\n", "proposals", "=", "bbox_mapping", "(", "proposal_list", "[", "0", "]", "[", ":", ",", ":", "4", "]", ",", "img_shape", ",", "\n", "scale_factor", ",", "flip", ")", "\n", "rois", "=", "bbox2roi", "(", "[", "proposals", "]", ")", "\n", "# recompute feature maps to save GPU memory", "\n", "roi_feats", "=", "self", ".", "bbox_roi_extractor", "(", "\n", "x", "[", ":", "len", "(", "self", ".", "bbox_roi_extractor", ".", "featmap_strides", ")", "]", ",", "rois", ")", "\n", "cls_score", ",", "bbox_pred", "=", "self", ".", "bbox_head", "(", "roi_feats", ")", "\n", "bboxes", ",", "scores", "=", "self", ".", "bbox_head", ".", "get_det_bboxes_nms", "(", "\n", "rois", ",", "\n", "cls_score", ",", "\n", "bbox_pred", ",", "\n", "img_shape", ",", "\n", "scale_factor", ",", "\n", "rescale", "=", "False", ",", "\n", "cfg", "=", "None", ")", "\n", "aug_bboxes", ".", "append", "(", "bboxes", ")", "\n", "aug_scores", ".", "append", "(", "scores", ")", "\n", "# after merging, bboxes will be rescaled to the original image size", "\n", "", "merged_bboxes", ",", "merged_scores", "=", "merge_aug_bboxes", "(", "\n", "aug_bboxes", ",", "aug_scores", ",", "img_metas", ",", "rcnn_test_cfg", ")", "\n", "det_bboxes", ",", "det_labels", "=", "multiclass_nms", "(", "\n", "merged_bboxes", ",", "merged_scores", ",", "rcnn_test_cfg", ".", "score_thr", ",", "\n", "rcnn_test_cfg", ".", "nms", ",", "rcnn_test_cfg", ".", "max_per_img", ")", "\n", "return", "det_bboxes", ",", "det_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.test_mixins.MaskTestMixin.simple_test_mask": [[90, 114], ["mmdet.core.bbox2roi", "test_mixins.MaskTestMixin.mask_roi_extractor", "test_mixins.MaskTestMixin.mask_head", "test_mixins.MaskTestMixin.mask_head.get_seg_masks", "range", "len"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.transforms.bbox2roi", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.mask_heads.fcn_mask_head.FCNMaskHead.get_seg_masks"], ["    ", "def", "simple_test_mask", "(", "self", ",", "\n", "x", ",", "\n", "img_meta", ",", "\n", "det_bboxes", ",", "\n", "det_labels", ",", "\n", "rescale", "=", "False", ")", ":", "\n", "# image shape of the first image in the batch (only one)", "\n", "        ", "ori_shape", "=", "img_meta", "[", "0", "]", "[", "'ori_shape'", "]", "\n", "scale_factor", "=", "img_meta", "[", "0", "]", "[", "'scale_factor'", "]", "\n", "if", "det_bboxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "segm_result", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "mask_head", ".", "num_classes", "-", "1", ")", "]", "\n", "", "else", ":", "\n", "# if det_bboxes is rescaled to the original image size, we need to", "\n", "# rescale it back to the testing scale to obtain RoIs.", "\n", "            ", "_bboxes", "=", "(", "det_bboxes", "[", ":", ",", ":", "4", "]", "*", "scale_factor", "\n", "if", "rescale", "else", "det_bboxes", ")", "\n", "mask_rois", "=", "bbox2roi", "(", "[", "_bboxes", "]", ")", "\n", "mask_feats", "=", "self", ".", "mask_roi_extractor", "(", "\n", "x", "[", ":", "len", "(", "self", ".", "mask_roi_extractor", ".", "featmap_strides", ")", "]", ",", "mask_rois", ")", "\n", "mask_pred", "=", "self", ".", "mask_head", "(", "mask_feats", ")", "\n", "segm_result", "=", "self", ".", "mask_head", ".", "get_seg_masks", "(", "\n", "mask_pred", ",", "_bboxes", ",", "det_labels", ",", "self", ".", "test_cfg", ".", "rcnn", ",", "ori_shape", ",", "\n", "scale_factor", ",", "rescale", ")", "\n", "", "return", "segm_result", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.test_mixins.MaskTestMixin.aug_test_mask": [[115, 146], ["zip", "mmdet.core.merge_aug_masks", "test_mixins.MaskTestMixin.mask_head.get_seg_masks", "mmdet.core.bbox_mapping", "mmdet.core.bbox2roi", "test_mixins.MaskTestMixin.mask_roi_extractor", "test_mixins.MaskTestMixin.mask_head", "aug_masks.append", "range", "test_mixins.MaskTestMixin.sigmoid().cpu().numpy", "len", "test_mixins.MaskTestMixin.sigmoid().cpu", "test_mixins.MaskTestMixin.sigmoid"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.merge_augs.merge_aug_masks", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.mask_heads.fcn_mask_head.FCNMaskHead.get_seg_masks", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.transforms.bbox_mapping", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.transforms.bbox2roi"], ["", "def", "aug_test_mask", "(", "self", ",", "feats", ",", "img_metas", ",", "det_bboxes", ",", "det_labels", ")", ":", "\n", "        ", "if", "det_bboxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "segm_result", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "mask_head", ".", "num_classes", "-", "1", ")", "]", "\n", "", "else", ":", "\n", "            ", "aug_masks", "=", "[", "]", "\n", "for", "x", ",", "img_meta", "in", "zip", "(", "feats", ",", "img_metas", ")", ":", "\n", "                ", "img_shape", "=", "img_meta", "[", "0", "]", "[", "'img_shape'", "]", "\n", "scale_factor", "=", "img_meta", "[", "0", "]", "[", "'scale_factor'", "]", "\n", "flip", "=", "img_meta", "[", "0", "]", "[", "'flip'", "]", "\n", "_bboxes", "=", "bbox_mapping", "(", "det_bboxes", "[", ":", ",", ":", "4", "]", ",", "img_shape", ",", "\n", "scale_factor", ",", "flip", ")", "\n", "mask_rois", "=", "bbox2roi", "(", "[", "_bboxes", "]", ")", "\n", "mask_feats", "=", "self", ".", "mask_roi_extractor", "(", "\n", "x", "[", ":", "len", "(", "self", ".", "mask_roi_extractor", ".", "featmap_strides", ")", "]", ",", "\n", "mask_rois", ")", "\n", "mask_pred", "=", "self", ".", "mask_head", "(", "mask_feats", ")", "\n", "# convert to numpy array to save memory", "\n", "aug_masks", ".", "append", "(", "mask_pred", ".", "sigmoid", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "merged_masks", "=", "merge_aug_masks", "(", "aug_masks", ",", "img_metas", ",", "\n", "self", ".", "test_cfg", ".", "rcnn", ")", "\n", "\n", "ori_shape", "=", "img_metas", "[", "0", "]", "[", "0", "]", "[", "'ori_shape'", "]", "\n", "segm_result", "=", "self", ".", "mask_head", ".", "get_seg_masks", "(", "\n", "merged_masks", ",", "\n", "det_bboxes", ",", "\n", "det_labels", ",", "\n", "self", ".", "test_cfg", ".", "rcnn", ",", "\n", "ori_shape", ",", "\n", "scale_factor", "=", "1.0", ",", "\n", "rescale", "=", "False", ")", "\n", "", "return", "segm_result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.pointpillars.PointPillars.__init__": [[10, 34], ["base.BaseDetector.__init__", "builder.build_backbone", "builder.build_neck", "builder.build_single_stage_head", "pointpillars.PointPillars.init_weights", "builder.build_rpn_head", "builder.build_bbox_head"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.learning_schedules_fastai.FakeOptim.__init__", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.models.builder.build_backbone", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.models.builder.build_neck", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.models.builder.build_single_stage_head", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.roi_extractors.single_level.SingleRoIExtractor.init_weights", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.models.builder.build_rpn_head", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.models.builder.build_bbox_head"], ["    ", "def", "__init__", "(", "self", ",", "\n", "backbone", ",", "\n", "neck", ",", "\n", "rpn_head", "=", "None", ",", "\n", "bbox_head", "=", "None", ",", "\n", "rcnn_head", "=", "None", ",", "\n", "train_cfg", "=", "None", ",", "\n", "test_cfg", "=", "None", ",", "\n", "pretrained", "=", "None", ")", ":", "\n", "        ", "super", "(", "PointPillars", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "backbone", "=", "builder", ".", "build_backbone", "(", "backbone", ")", "\n", "self", ".", "neck", "=", "builder", ".", "build_neck", "(", "neck", ")", "\n", "self", ".", "bbox_head", "=", "builder", ".", "build_single_stage_head", "(", "bbox_head", ")", "\n", "\n", "if", "rpn_head", "is", "not", "None", ":", "\n", "            ", "self", ".", "rpn_head", "=", "builder", ".", "build_rpn_head", "(", "rpn_head", ")", "\n", "\n", "", "self", ".", "train_cfg", "=", "train_cfg", "\n", "self", ".", "test_cfg", "=", "test_cfg", "\n", "\n", "if", "rcnn_head", "is", "not", "None", ":", "\n", "            ", "self", ".", "rcnn_head", "=", "builder", ".", "build_bbox_head", "(", "rcnn_head", ")", "\n", "\n", "", "self", ".", "init_weights", "(", "pretrained", "=", "pretrained", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.pointpillars.PointPillars.with_rpn": [[35, 38], ["hasattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "with_rpn", "(", "self", ")", ":", "\n", "        ", "return", "hasattr", "(", "self", ",", "'rpn_head'", ")", "and", "self", ".", "rpn_head", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.pointpillars.PointPillars.init_weights": [[39, 43], ["isinstance", "logging.getLogger", "mmcv.runner.load_checkpoint"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "if", "isinstance", "(", "pretrained", ",", "str", ")", ":", "\n", "            ", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "load_checkpoint", "(", "self", ",", "pretrained", ",", "strict", "=", "False", ",", "logger", "=", "logger", ")", "\n", "", "", "def", "freeze_layers", "(", "self", ",", "model", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.pointpillars.PointPillars.freeze_layers": [[43, 46], ["model.parameters"], "methods", ["None"], ["", "", "def", "freeze_layers", "(", "self", ",", "model", ")", ":", "\n", "        ", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.pointpillars.PointPillars.merge_second_batch": [[47, 70], ["batch_args.items", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.pad", "torch.pad", "coors.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "", "def", "merge_second_batch", "(", "self", ",", "batch_args", ")", ":", "\n", "        ", "ret", "=", "{", "}", "\n", "for", "key", ",", "elems", "in", "batch_args", ".", "items", "(", ")", ":", "\n", "            ", "if", "key", "in", "[", "\n", "'voxels'", ",", "'num_points'", ",", "\n", "]", ":", "\n", "                ", "ret", "[", "key", "]", "=", "torch", ".", "cat", "(", "elems", ",", "dim", "=", "0", ")", "\n", "", "elif", "key", "==", "'coordinates'", ":", "\n", "                ", "coors", "=", "[", "]", "\n", "for", "i", ",", "coor", "in", "enumerate", "(", "elems", ")", ":", "\n", "                    ", "coor_pad", "=", "F", ".", "pad", "(", "\n", "coor", ",", "[", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "mode", "=", "'constant'", ",", "\n", "value", "=", "i", ")", "\n", "coors", ".", "append", "(", "coor_pad", ")", "\n", "", "ret", "[", "key", "]", "=", "torch", ".", "cat", "(", "coors", ",", "dim", "=", "0", ")", "\n", "", "elif", "key", "in", "[", "\n", "'img_meta'", ",", "'gt_labels'", ",", "'gt_bboxes'", ",", "\n", "]", ":", "\n", "                ", "ret", "[", "key", "]", "=", "elems", "\n", "", "else", ":", "\n", "                ", "ret", "[", "key", "]", "=", "torch", ".", "stack", "(", "elems", ",", "dim", "=", "0", ")", "\n", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.pointpillars.PointPillars.forward_train": [[71, 88], ["len", "pointpillars.PointPillars.merge_second_batch", "dict", "pointpillars.PointPillars.backbone", "pointpillars.PointPillars.neck", "pointpillars.PointPillars.bbox_head", "pointpillars.PointPillars.bbox_head.loss", "dict.update"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.pointpillars.PointPillars.merge_second_batch", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox_heads.bbox_head.BBoxHead.loss"], ["", "def", "forward_train", "(", "self", ",", "img", ",", "img_meta", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "batch_size", "=", "len", "(", "img_meta", ")", "\n", "ret", "=", "self", ".", "merge_second_batch", "(", "kwargs", ")", "\n", "\n", "losses", "=", "dict", "(", ")", "\n", "\n", "canvas", "=", "self", ".", "backbone", "(", "ret", "[", "'voxels'", "]", ",", "ret", "[", "'coordinates'", "]", ",", "ret", "[", "'num_points'", "]", ",", "batch_size", ")", "\n", "\n", "x", "=", "self", ".", "neck", "(", "canvas", ")", "\n", "\n", "bbox_outs", "=", "self", ".", "bbox_head", "(", "x", ")", "\n", "bbox_loss_inputs", "=", "bbox_outs", "+", "(", "ret", "[", "'gt_bboxes'", "]", ",", "ret", "[", "'gt_labels'", "]", ",", "ret", "[", "'anchors'", "]", ",", "ret", "[", "'anchors_mask'", "]", ",", "self", ".", "train_cfg", ")", "\n", "bbox_losses", "=", "self", ".", "bbox_head", ".", "loss", "(", "*", "bbox_loss_inputs", ")", "\n", "losses", ".", "update", "(", "bbox_losses", ")", "\n", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.pointpillars.PointPillars.forward_test": [[89, 100], ["len", "pointpillars.PointPillars.merge_second_batch", "pointpillars.PointPillars.backbone", "pointpillars.PointPillars.neck", "pointpillars.PointPillars.bbox_head.forward", "pointpillars.PointPillars.bbox_head.get_det_bboxes_nms"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.detectors.pointpillars.PointPillars.merge_second_batch", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.roi_extractors.single_level.SingleRoIExtractor.forward"], ["", "def", "forward_test", "(", "self", ",", "img", ",", "img_meta", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "batch_size", "=", "len", "(", "img_meta", ")", "\n", "ret", "=", "self", ".", "merge_second_batch", "(", "kwargs", ")", "\n", "canvas", "=", "self", ".", "backbone", "(", "ret", "[", "'voxels'", "]", ",", "ret", "[", "'coordinates'", "]", ",", "ret", "[", "'num_points'", "]", ",", "batch_size", ")", "\n", "x", "=", "self", ".", "neck", "(", "canvas", ")", "\n", "\n", "rpn_outs", "=", "self", ".", "bbox_head", ".", "forward", "(", "x", ")", "\n", "proposal_inputs", "=", "rpn_outs", "+", "(", "ret", "[", "'anchors'", "]", ",", "ret", "[", "'anchors_mask'", "]", ",", "img_meta", ",", "self", ".", "test_cfg", ")", "\n", "\n", "return", "self", ".", "bbox_head", ".", "get_det_bboxes_nms", "(", "*", "proposal_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.backbones.pillar.PFNLayer.__init__": [[8, 29], ["torch.nn.Module.__init__", "Linear", "BatchNorm1d", "utils.change_default_args", "utils.change_default_args", "utils.change_default_args"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.learning_schedules_fastai.FakeOptim.__init__", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.__init__.change_default_args", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.__init__.change_default_args", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.__init__.change_default_args"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "use_norm", "=", "True", ",", "\n", "last_layer", "=", "False", ")", ":", "\n", "        ", "super", "(", "PFNLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "'PFNLayer'", "\n", "self", ".", "last_vfe", "=", "last_layer", "\n", "if", "not", "self", ".", "last_vfe", ":", "\n", "            ", "out_channels", "=", "out_channels", "//", "2", "\n", "", "self", ".", "units", "=", "out_channels", "\n", "\n", "if", "use_norm", ":", "\n", "            ", "BatchNorm1d", "=", "change_default_args", "(", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", "(", "nn", ".", "BatchNorm1d", ")", "\n", "Linear", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "nn", ".", "Linear", ")", "\n", "", "else", ":", "\n", "            ", "BatchNorm1d", "=", "Empty", "\n", "Linear", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "nn", ".", "Linear", ")", "\n", "\n", "", "self", ".", "linear", "=", "Linear", "(", "in_channels", ",", "self", ".", "units", ")", "\n", "self", ".", "norm", "=", "BatchNorm1d", "(", "self", ".", "units", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.backbones.pillar.PFNLayer.forward": [[30, 43], ["pillar.PFNLayer.linear", "pillar.PFNLayer.norm().permute().contiguous", "torch.nn.functional.relu", "torch.max", "x_max.repeat", "torch.cat", "pillar.PFNLayer.norm().permute", "pillar.PFNLayer.norm", "torch.nn.functional.relu.permute().contiguous", "torch.nn.functional.relu.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "linear", "(", "inputs", ")", "\n", "x", "=", "self", ".", "norm", "(", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x_max", "=", "torch", ".", "max", "(", "x", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "\n", "if", "self", ".", "last_vfe", ":", "\n", "            ", "return", "x_max", "\n", "", "else", ":", "\n", "            ", "x_repeat", "=", "x_max", ".", "repeat", "(", "1", ",", "inputs", ".", "shape", "[", "1", "]", ",", "1", ")", "\n", "x_concatenated", "=", "torch", ".", "cat", "(", "[", "x", ",", "x_repeat", "]", ",", "dim", "=", "2", ")", "\n", "return", "x_concatenated", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.backbones.pillar.PillarFeatureNet.__init__": [[46, 84], ["torch.nn.Module.__init__", "range", "torch.nn.ModuleList", "int", "int", "pillar.PointPillarsScatter", "len", "list", "pfn_layers.append", "len", "pillar.PFNLayer", "len"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_input_features", "=", "4", ",", "\n", "use_norm", "=", "True", ",", "\n", "num_filters", "=", "(", "64", ",", ")", ",", "\n", "with_distance", "=", "False", ",", "\n", "voxel_size", "=", "(", "0.2", ",", "0.2", ",", "4", ")", ",", "\n", "pc_range", "=", "(", "0", ",", "-", "40", ",", "-", "3", ",", "70.4", ",", "40", ",", "1", ")", "\n", ")", ":", "\n", "        ", "super", "(", "PillarFeatureNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "'PillarFeatureNet'", "\n", "assert", "len", "(", "num_filters", ")", ">", "0", "\n", "num_input_features", "+=", "5", "\n", "if", "with_distance", ":", "\n", "            ", "num_input_features", "+=", "1", "\n", "", "self", ".", "_with_distance", "=", "with_distance", "\n", "\n", "# Create PillarFeatureNet layers", "\n", "num_filters", "=", "[", "num_input_features", "]", "+", "list", "(", "num_filters", ")", "\n", "pfn_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "num_filters", ")", "-", "1", ")", ":", "\n", "            ", "in_filters", "=", "num_filters", "[", "i", "]", "\n", "out_filters", "=", "num_filters", "[", "i", "+", "1", "]", "\n", "if", "i", "<", "len", "(", "num_filters", ")", "-", "2", ":", "\n", "                ", "last_layer", "=", "False", "\n", "", "else", ":", "\n", "                ", "last_layer", "=", "True", "\n", "", "pfn_layers", ".", "append", "(", "PFNLayer", "(", "in_filters", ",", "out_filters", ",", "use_norm", ",", "last_layer", "=", "last_layer", ")", ")", "\n", "", "self", ".", "pfn_layers", "=", "nn", ".", "ModuleList", "(", "pfn_layers", ")", "\n", "\n", "# Need pillar (voxel) size and x/y offset in order to calculate pillar offset", "\n", "self", ".", "vx", "=", "voxel_size", "[", "0", "]", "\n", "self", ".", "vy", "=", "voxel_size", "[", "1", "]", "\n", "self", ".", "x_offset", "=", "self", ".", "vx", "/", "2", "+", "pc_range", "[", "0", "]", "\n", "self", ".", "y_offset", "=", "self", ".", "vy", "/", "2", "+", "pc_range", "[", "1", "]", "\n", "\n", "nx", "=", "int", "(", "(", "pc_range", "[", "3", "]", "-", "pc_range", "[", "0", "]", ")", "/", "self", ".", "vx", ")", "\n", "ny", "=", "int", "(", "(", "pc_range", "[", "4", "]", "-", "pc_range", "[", "1", "]", ")", "/", "self", ".", "vy", ")", "\n", "self", ".", "scatter", "=", "PointPillarsScatter", "(", "nx", ",", "ny", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.backbones.pillar.PillarFeatureNet.forward": [[85, 115], ["torch.zeros_like", "torch.cat", "utils.get_paddings_indicator", "torch.unsqueeze().type_as", "pillar.PillarFeatureNet.scatter", "features[].sum", "num_voxels.type_as().view", "torch.norm", "features_ls.append", "pfn", "pfn.squeeze", "torch.unsqueeze", "num_voxels.type_as", "coors[].float().unsqueeze", "coors[].float().unsqueeze", "coors[].float", "coors[].float"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.__init__.get_paddings_indicator"], ["", "def", "forward", "(", "self", ",", "features", ",", "coors", ",", "num_voxels", ",", "batch_size", ")", ":", "\n", "\n", "# Find distance of x, y, and z from cluster center", "\n", "        ", "points_mean", "=", "features", "[", ":", ",", ":", ",", ":", "3", "]", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "/", "num_voxels", ".", "type_as", "(", "features", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "\n", "f_cluster", "=", "features", "[", ":", ",", ":", ",", ":", "3", "]", "-", "points_mean", "\n", "\n", "# Find distance of x, y, and z from pillar center", "\n", "f_center", "=", "torch", ".", "zeros_like", "(", "features", "[", ":", ",", ":", ",", ":", "2", "]", ")", "\n", "f_center", "[", ":", ",", ":", ",", "0", "]", "=", "features", "[", ":", ",", ":", ",", "0", "]", "-", "(", "coors", "[", ":", ",", "3", "]", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", "*", "self", ".", "vx", "+", "self", ".", "x_offset", ")", "\n", "f_center", "[", ":", ",", ":", ",", "1", "]", "=", "features", "[", ":", ",", ":", ",", "1", "]", "-", "(", "coors", "[", ":", ",", "2", "]", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", "*", "self", ".", "vy", "+", "self", ".", "y_offset", ")", "\n", "\n", "# Combine together feature decorations", "\n", "features_ls", "=", "[", "features", ",", "f_cluster", ",", "f_center", "]", "\n", "if", "self", ".", "_with_distance", ":", "\n", "            ", "points_dist", "=", "torch", ".", "norm", "(", "features", "[", ":", ",", ":", ",", ":", "3", "]", ",", "2", ",", "2", ",", "keepdim", "=", "True", ")", "\n", "features_ls", ".", "append", "(", "points_dist", ")", "\n", "", "features", "=", "torch", ".", "cat", "(", "features_ls", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# The feature decorations were calculated without regard to whether pillar was empty. Need to ensure that", "\n", "# empty pillars remain set to zeros.", "\n", "voxel_count", "=", "features", ".", "shape", "[", "1", "]", "\n", "mask", "=", "get_paddings_indicator", "(", "num_voxels", ",", "voxel_count", ",", "axis", "=", "0", ")", "\n", "mask", "=", "torch", ".", "unsqueeze", "(", "mask", ",", "-", "1", ")", ".", "type_as", "(", "features", ")", "\n", "features", "*=", "mask", "\n", "\n", "# Forward pass through PFNLayers", "\n", "for", "pfn", "in", "self", ".", "pfn_layers", ":", "\n", "            ", "features", "=", "pfn", "(", "features", ")", "\n", "\n", "", "return", "self", ".", "scatter", "(", "features", ".", "squeeze", "(", ")", ",", "coors", ",", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.backbones.pillar.PointPillarsScatter.__init__": [[118, 133], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "nx", ",", "ny", ",", "\n", "num_input_features", "=", "64", ")", ":", "\n", "        ", "\"\"\"\n        Point Pillar's Scatter.\n        Converts learned features from dense tensor to sparse pseudo image. This replaces SECOND's\n        second.pytorch.voxelnet.SparseMiddleExtractor.\n        :param output_shape: ([int]: 4). Required output shape of features.\n        :param num_input_features: <int>. Number of input features.\n        \"\"\"", "\n", "super", "(", "PointPillarsScatter", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "'PointPillarsScatter'", "\n", "self", ".", "nx", "=", "nx", "\n", "self", ".", "ny", "=", "ny", "\n", "self", ".", "nchannels", "=", "num_input_features", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.backbones.pillar.PointPillarsScatter.forward": [[134, 163], ["range", "torch.stack", "batch_canvas.view.view.view", "torch.zeros", "indices.type.type.type", "voxels.t.t.t", "batch_canvas.view.view.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "voxel_features", ",", "coords", ",", "batch_size", ")", ":", "\n", "# batch_canvas will be the final output.", "\n", "        ", "batch_canvas", "=", "[", "]", "\n", "for", "batch_itt", "in", "range", "(", "batch_size", ")", ":", "\n", "# Create the canvas for this sample", "\n", "            ", "canvas", "=", "torch", ".", "zeros", "(", "self", ".", "nchannels", ",", "self", ".", "nx", "*", "self", ".", "ny", ",", "dtype", "=", "voxel_features", ".", "dtype", ",", "\n", "device", "=", "voxel_features", ".", "device", ")", "\n", "\n", "# Only include non-empty pillars", "\n", "batch_mask", "=", "coords", "[", ":", ",", "0", "]", "==", "batch_itt", "\n", "this_coords", "=", "coords", "[", "batch_mask", ",", ":", "]", "\n", "indices", "=", "this_coords", "[", ":", ",", "2", "]", "*", "self", ".", "nx", "+", "this_coords", "[", ":", ",", "3", "]", "\n", "indices", "=", "indices", ".", "type", "(", "torch", ".", "long", ")", "\n", "voxels", "=", "voxel_features", "[", "batch_mask", ",", ":", "]", "\n", "voxels", "=", "voxels", ".", "t", "(", ")", "\n", "\n", "# Now scatter the blob back to the canvas.", "\n", "canvas", "[", ":", ",", "indices", "]", "=", "voxels", "\n", "\n", "# Append to a list for later stacking.", "\n", "batch_canvas", ".", "append", "(", "canvas", ")", "\n", "\n", "# Stack to 3-dim tensor (batch-size, nchannels, nrows*ncols)", "\n", "", "batch_canvas", "=", "torch", ".", "stack", "(", "batch_canvas", ",", "0", ")", "\n", "\n", "# Undo the column stacking to final 4-dim tensor", "\n", "batch_canvas", "=", "batch_canvas", ".", "view", "(", "batch_size", ",", "self", ".", "nchannels", ",", "self", ".", "ny", ",", "self", ".", "nx", ")", "\n", "\n", "return", "batch_canvas", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.backbones.vxnet.VFELayer.__init__": [[8, 21], ["torch.nn.Module.__init__", "int", "Linear", "BatchNorm1d", "utils.change_default_args", "utils.change_default_args", "utils.change_default_args"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.learning_schedules_fastai.FakeOptim.__init__", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.__init__.change_default_args", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.__init__.change_default_args", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.__init__.change_default_args"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "use_norm", "=", "True", ",", "name", "=", "'vfe'", ")", ":", "\n", "        ", "super", "(", "VFELayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "units", "=", "int", "(", "out_channels", "/", "2", ")", "\n", "if", "use_norm", ":", "\n", "            ", "BatchNorm1d", "=", "change_default_args", "(", "\n", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", "(", "nn", ".", "BatchNorm1d", ")", "\n", "Linear", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "nn", ".", "Linear", ")", "\n", "", "else", ":", "\n", "            ", "BatchNorm1d", "=", "Empty", "\n", "Linear", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "nn", ".", "Linear", ")", "\n", "", "self", ".", "linear", "=", "Linear", "(", "in_channels", ",", "self", ".", "units", ")", "\n", "self", ".", "norm", "=", "BatchNorm1d", "(", "self", ".", "units", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.backbones.vxnet.VFELayer.forward": [[22, 38], ["vxnet.VFELayer.linear", "vxnet.VFELayer.norm().permute().contiguous", "torch.nn.functional.relu", "aggregated.repeat", "torch.cat", "torch.max", "vxnet.VFELayer.norm().permute", "vxnet.VFELayer.norm", "vxnet.VFELayer.permute().contiguous", "vxnet.VFELayer.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "# [K, T, 7] tensordot [7, units] = [K, T, units]", "\n", "        ", "voxel_count", "=", "inputs", ".", "shape", "[", "1", "]", "\n", "x", "=", "self", ".", "linear", "(", "inputs", ")", "\n", "x", "=", "self", ".", "norm", "(", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", ")", ".", "permute", "(", "0", ",", "2", ",", "\n", "1", ")", ".", "contiguous", "(", ")", "\n", "pointwise", "=", "F", ".", "relu", "(", "x", ")", "\n", "# [K, T, units]", "\n", "\n", "aggregated", "=", "torch", ".", "max", "(", "pointwise", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "# [K, 1, units]", "\n", "repeated", "=", "aggregated", ".", "repeat", "(", "1", ",", "voxel_count", ",", "1", ")", "\n", "\n", "concatenated", "=", "torch", ".", "cat", "(", "[", "pointwise", ",", "repeated", "]", ",", "dim", "=", "2", ")", "\n", "# [K, T, 2 * units]", "\n", "return", "concatenated", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.backbones.vxnet.VoxelFeatNet.__init__": [[40, 66], ["torch.nn.Module.__init__", "vxnet.VFELayer", "vxnet.VFELayer", "Linear", "BatchNorm1d", "len", "utils.change_default_args", "utils.change_default_args", "utils.change_default_args"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.learning_schedules_fastai.FakeOptim.__init__", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.__init__.change_default_args", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.__init__.change_default_args", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.__init__.change_default_args"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_input_features", "=", "4", ",", "\n", "use_norm", "=", "True", ",", "\n", "num_filters", "=", "[", "32", ",", "128", "]", ",", "\n", "with_distance", "=", "False", ",", "\n", "name", "=", "'VoxelFeatureExtractor'", ")", ":", "\n", "        ", "super", "(", "VoxelFeatNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "if", "use_norm", ":", "\n", "            ", "BatchNorm1d", "=", "change_default_args", "(", "\n", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", "(", "nn", ".", "BatchNorm1d", ")", "\n", "Linear", "=", "change_default_args", "(", "bias", "=", "False", ")", "(", "nn", ".", "Linear", ")", "\n", "", "else", ":", "\n", "            ", "BatchNorm1d", "=", "Empty", "\n", "Linear", "=", "change_default_args", "(", "bias", "=", "True", ")", "(", "nn", ".", "Linear", ")", "\n", "", "assert", "len", "(", "num_filters", ")", "==", "2", "\n", "num_input_features", "+=", "3", "# add mean features", "\n", "if", "with_distance", ":", "\n", "            ", "num_input_features", "+=", "1", "\n", "", "self", ".", "_with_distance", "=", "with_distance", "\n", "self", ".", "vfe1", "=", "VFELayer", "(", "num_input_features", ",", "num_filters", "[", "0", "]", ",", "use_norm", ")", "\n", "self", ".", "vfe2", "=", "VFELayer", "(", "num_filters", "[", "0", "]", ",", "num_filters", "[", "1", "]", ",", "use_norm", ")", "\n", "self", ".", "linear", "=", "Linear", "(", "num_filters", "[", "1", "]", ",", "num_filters", "[", "1", "]", ")", "\n", "# var_torch_init(self.linear.weight)", "\n", "# var_torch_init(self.linear.bias)", "\n", "self", ".", "norm", "=", "BatchNorm1d", "(", "num_filters", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.backbones.vxnet.VoxelFeatNet.init_weights": [[67, 69], ["None"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.backbones.vxnet.VoxelFeatNet.forward": [[70, 98], ["utils.get_paddings_indicator", "torch.unsqueeze().type_as", "vxnet.VoxelFeatNet.vfe1", "vxnet.VoxelFeatNet.vfe2", "vxnet.VoxelFeatNet.linear", "vxnet.VoxelFeatNet.norm().permute().contiguous", "torch.nn.functional.relu", "features[].sum", "num_voxels.type_as().view", "torch.norm", "torch.cat", "torch.cat", "torch.max", "torch.unsqueeze", "vxnet.VoxelFeatNet.norm().permute", "num_voxels.type_as", "vxnet.VoxelFeatNet.norm", "torch.nn.functional.relu.permute().contiguous", "torch.nn.functional.relu.permute"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.__init__.get_paddings_indicator"], ["", "def", "forward", "(", "self", ",", "features", ",", "num_voxels", ")", ":", "\n", "# features: [concated_num_points, num_voxel_size, 3(4)]", "\n", "# num_voxels: [concated_num_points]", "\n", "        ", "points_mean", "=", "features", "[", ":", ",", ":", ",", ":", "3", "]", ".", "sum", "(", "\n", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "/", "num_voxels", ".", "type_as", "(", "features", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "\n", "features_relative", "=", "features", "[", ":", ",", ":", ",", ":", "3", "]", "-", "points_mean", "\n", "if", "self", ".", "_with_distance", ":", "\n", "            ", "points_dist", "=", "torch", ".", "norm", "(", "features", "[", ":", ",", ":", ",", ":", "3", "]", ",", "2", ",", "2", ",", "keepdim", "=", "True", ")", "\n", "features", "=", "torch", ".", "cat", "(", "\n", "[", "features", ",", "features_relative", ",", "points_dist", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "features", "=", "torch", ".", "cat", "(", "[", "features", ",", "features_relative", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "voxel_count", "=", "features", ".", "shape", "[", "1", "]", "\n", "mask", "=", "get_paddings_indicator", "(", "num_voxels", ",", "voxel_count", ",", "axis", "=", "0", ")", "\n", "mask", "=", "torch", ".", "unsqueeze", "(", "mask", ",", "-", "1", ")", ".", "type_as", "(", "features", ")", "\n", "# mask = features.max(dim=2, keepdim=True)[0] != 0", "\n", "x", "=", "self", ".", "vfe1", "(", "features", ")", "\n", "x", "*=", "mask", "\n", "x", "=", "self", ".", "vfe2", "(", "x", ")", "\n", "x", "*=", "mask", "\n", "x", "=", "self", ".", "linear", "(", "x", ")", "\n", "x", "=", "self", ".", "norm", "(", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", ")", ".", "permute", "(", "0", ",", "2", ",", "\n", "1", ")", ".", "contiguous", "(", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "*=", "mask", "\n", "# x: [concated_num_points, num_voxel_size, 128]", "\n", "voxelwise", "=", "torch", ".", "max", "(", "x", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "return", "voxelwise", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.backbones.vxnet.SimpleVoxel.__init__": [[100, 109], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_input_features", "=", "4", ",", "\n", "use_norm", "=", "True", ",", "\n", "num_filters", "=", "[", "32", ",", "128", "]", ",", "\n", "with_distance", "=", "False", ",", "\n", "name", "=", "'VoxelFeatureExtractor'", ")", ":", "\n", "        ", "super", "(", "SimpleVoxel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "num_input_features", "=", "num_input_features", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.backbones.vxnet.SimpleVoxel.forward": [[110, 117], ["points_mean.contiguous", "features[].sum", "num_voxels.type_as().view", "num_voxels.type_as"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ",", "num_voxels", ")", ":", "\n", "        ", "return", "features", "\n", "# features: [concated_num_points, num_voxel_size, 3(4)]", "\n", "# num_voxels: [concated_num_points]", "\n", "points_mean", "=", "features", "[", ":", ",", ":", ",", ":", "self", ".", "num_input_features", "]", ".", "sum", "(", "\n", "dim", "=", "1", ",", "keepdim", "=", "False", ")", "/", "num_voxels", ".", "type_as", "(", "features", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "return", "points_mean", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.backbones.resnet.BasicBlock.__init__": [[25, 43], ["torch.Module.__init__", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.learning_schedules_fastai.FakeOptim.__init__", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.backbones.resnet.conv3x3", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.backbones.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "downsample", "=", "None", ",", "\n", "style", "=", "'pytorch'", ",", "\n", "with_cp", "=", "False", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ",", "dilation", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "dilation", "=", "dilation", "\n", "assert", "not", "with_cp", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.backbones.resnet.BasicBlock.forward": [[44, 61], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.backbones.resnet.Bottleneck.__init__": [[66, 107], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["def", "__init__", "(", "self", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "downsample", "=", "None", ",", "\n", "style", "=", "'pytorch'", ",", "\n", "with_cp", "=", "False", ")", ":", "\n", "        ", "\"\"\"Bottleneck block.\n        If style is \"pytorch\", the stride-two layer is the 3x3 conv layer,\n        if it is \"caffe\", the stride-two layer is the first 1x1 conv layer.\n        \"\"\"", "\n", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "style", "in", "[", "'pytorch'", ",", "'caffe'", "]", "\n", "if", "style", "==", "'pytorch'", ":", "\n", "            ", "conv1_stride", "=", "1", "\n", "conv2_stride", "=", "stride", "\n", "", "else", ":", "\n", "            ", "conv1_stride", "=", "stride", "\n", "conv2_stride", "=", "1", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "conv1_stride", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "planes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "conv2_stride", ",", "\n", "padding", "=", "dilation", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "False", ")", "\n", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "\n", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "with_cp", "=", "with_cp", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.backbones.resnet.Bottleneck.forward": [[108, 139], ["resnet.Bottleneck.relu", "resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "torch.checkpoint", "torch.checkpoint", "resnet.Bottleneck.forward._inner_forward"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "def", "_inner_forward", "(", "x", ")", ":", "\n", "            ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "                ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "\n", "return", "out", "\n", "\n", "", "if", "self", ".", "with_cp", "and", "x", ".", "requires_grad", ":", "\n", "            ", "out", "=", "cp", ".", "checkpoint", "(", "_inner_forward", ",", "x", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "_inner_forward", "(", "x", ")", "\n", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.backbones.resnet.ResNet.__init__": [[208, 262], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "enumerate", "KeyError", "len", "len", "max", "resnet.make_res_layer", "resnet.ResNet.add_module", "resnet.ResNet.res_layers.append", "len"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.learning_schedules_fastai.FakeOptim.__init__", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.backbones.resnet.make_res_layer"], ["def", "__init__", "(", "self", ",", "\n", "depth", ",", "\n", "num_stages", "=", "4", ",", "\n", "strides", "=", "(", "1", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "out_indices", "=", "(", "0", ",", "1", ",", "2", ",", "3", ")", ",", "\n", "style", "=", "'pytorch'", ",", "\n", "frozen_stages", "=", "-", "1", ",", "\n", "bn_eval", "=", "True", ",", "\n", "bn_frozen", "=", "False", ",", "\n", "with_cp", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "depth", "not", "in", "self", ".", "arch_settings", ":", "\n", "            ", "raise", "KeyError", "(", "'invalid depth {} for resnet'", ".", "format", "(", "depth", ")", ")", "\n", "", "assert", "num_stages", ">=", "1", "and", "num_stages", "<=", "4", "\n", "block", ",", "stage_blocks", "=", "self", ".", "arch_settings", "[", "depth", "]", "\n", "stage_blocks", "=", "stage_blocks", "[", ":", "num_stages", "]", "\n", "assert", "len", "(", "strides", ")", "==", "len", "(", "dilations", ")", "==", "num_stages", "\n", "assert", "max", "(", "out_indices", ")", "<", "num_stages", "\n", "\n", "self", ".", "out_indices", "=", "out_indices", "\n", "self", ".", "style", "=", "style", "\n", "self", ".", "frozen_stages", "=", "frozen_stages", "\n", "self", ".", "bn_eval", "=", "bn_eval", "\n", "self", ".", "bn_frozen", "=", "bn_frozen", "\n", "self", ".", "with_cp", "=", "with_cp", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "res_layers", "=", "[", "]", "\n", "for", "i", ",", "num_blocks", "in", "enumerate", "(", "stage_blocks", ")", ":", "\n", "            ", "stride", "=", "strides", "[", "i", "]", "\n", "dilation", "=", "dilations", "[", "i", "]", "\n", "planes", "=", "64", "*", "2", "**", "i", "\n", "res_layer", "=", "make_res_layer", "(", "\n", "block", ",", "\n", "self", ".", "inplanes", ",", "\n", "planes", ",", "\n", "num_blocks", ",", "\n", "stride", "=", "stride", ",", "\n", "dilation", "=", "dilation", ",", "\n", "style", "=", "self", ".", "style", ",", "\n", "with_cp", "=", "with_cp", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "layer_name", "=", "'layer{}'", ".", "format", "(", "i", "+", "1", ")", "\n", "self", ".", "add_module", "(", "layer_name", ",", "res_layer", ")", "\n", "self", ".", "res_layers", ".", "append", "(", "layer_name", ")", "\n", "\n", "", "self", ".", "feat_dim", "=", "block", ".", "expansion", "*", "64", "*", "2", "**", "(", "len", "(", "stage_blocks", ")", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.backbones.resnet.ResNet.init_weights": [[263, 275], ["isinstance", "logging.getLogger", "mmcv.runner.load_checkpoint", "resnet.ResNet.modules", "TypeError", "isinstance", "mmcv.cnn.kaiming_init", "isinstance", "mmcv.cnn.constant_init"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.weight_init.kaiming_init"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "if", "isinstance", "(", "pretrained", ",", "str", ")", ":", "\n", "            ", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "load_checkpoint", "(", "self", ",", "pretrained", ",", "strict", "=", "False", ",", "logger", "=", "logger", ")", "\n", "", "elif", "pretrained", "is", "None", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                    ", "kaiming_init", "(", "m", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "constant_init", "(", "m", ",", "1", ")", "\n", "", "", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "'pretrained must be a str or None'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.backbones.resnet.ResNet.forward": [[276, 291], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "enumerate", "getattr", "getattr.", "len", "tuple", "outs.append"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "outs", "=", "[", "]", "\n", "for", "i", ",", "layer_name", "in", "enumerate", "(", "self", ".", "res_layers", ")", ":", "\n", "            ", "res_layer", "=", "getattr", "(", "self", ",", "layer_name", ")", "\n", "x", "=", "res_layer", "(", "x", ")", "\n", "if", "i", "in", "self", ".", "out_indices", ":", "\n", "                ", "outs", ".", "append", "(", "x", ")", "\n", "", "", "if", "len", "(", "outs", ")", "==", "1", ":", "\n", "            ", "return", "outs", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "return", "tuple", "(", "outs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.backbones.resnet.ResNet.train": [[292, 314], ["super().train", "resnet.ResNet.modules", "resnet.ResNet.conv1.parameters", "resnet.ResNet.bn1.parameters", "resnet.ResNet.bn1.eval", "range", "isinstance", "getattr", "getattr.eval", "getattr.parameters", "m.eval", "m.parameters"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.backbones.resnet.ResNet.train"], ["", "", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "train", "(", "mode", ")", "\n", "if", "self", ".", "bn_eval", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "m", ".", "eval", "(", ")", "\n", "if", "self", ".", "bn_frozen", ":", "\n", "                        ", "for", "params", "in", "m", ".", "parameters", "(", ")", ":", "\n", "                            ", "params", ".", "requires_grad", "=", "False", "\n", "", "", "", "", "", "if", "mode", "and", "self", ".", "frozen_stages", ">=", "0", ":", "\n", "            ", "for", "param", "in", "self", ".", "conv1", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "", "for", "param", "in", "self", ".", "bn1", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "bn1", ".", "eval", "(", ")", "\n", "self", ".", "bn1", ".", "weight", ".", "requires_grad", "=", "False", "\n", "self", ".", "bn1", ".", "bias", ".", "requires_grad", "=", "False", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "frozen_stages", "+", "1", ")", ":", "\n", "                ", "mod", "=", "getattr", "(", "self", ",", "'layer{}'", ".", "format", "(", "i", ")", ")", "\n", "mod", ".", "eval", "(", ")", "\n", "for", "param", "in", "mod", ".", "parameters", "(", ")", ":", "\n", "                    ", "param", ".", "requires_grad", "=", "False", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.backbones.resnet.conv3x3": [[10, 20], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.backbones.resnet.make_res_layer": [[141, 177], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.BatchNorm2d", "block"], "function", ["None"], ["", "", "def", "make_res_layer", "(", "block", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "blocks", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "style", "=", "'pytorch'", ",", "\n", "with_cp", "=", "False", ")", ":", "\n", "    ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "        ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "inplanes", ",", "\n", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "stride", ",", "\n", "dilation", ",", "\n", "downsample", ",", "\n", "style", "=", "style", ",", "\n", "with_cp", "=", "with_cp", ")", ")", "\n", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "        ", "layers", ".", "append", "(", "\n", "block", "(", "inplanes", ",", "planes", ",", "1", ",", "dilation", ",", "style", "=", "style", ",", "with_cp", "=", "with_cp", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.retina_head.RetinaHead.__init__": [[36, 95], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "int", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "list", "numpy.array", "retina_head.RetinaHead.anchor_generators.append", "retina_head.RetinaHead.cls_convs.append", "retina_head.RetinaHead.reg_convs.append", "mmdet.core.AnchorGenerator", "len", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "range"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "num_classes", ",", "\n", "stacked_convs", "=", "4", ",", "\n", "feat_channels", "=", "256", ",", "\n", "octave_base_scale", "=", "4", ",", "\n", "scales_per_octave", "=", "3", ",", "\n", "anchor_ratios", "=", "[", "0.5", ",", "1.0", ",", "2.0", "]", ",", "\n", "anchor_strides", "=", "[", "8", ",", "16", ",", "32", ",", "64", ",", "128", "]", ",", "\n", "anchor_base_sizes", "=", "None", ",", "\n", "target_means", "=", "(", ".0", ",", ".0", ",", ".0", ",", ".0", ")", ",", "\n", "target_stds", "=", "(", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ")", ")", ":", "\n", "        ", "super", "(", "RetinaHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "octave_base_scale", "=", "octave_base_scale", "\n", "self", ".", "scales_per_octave", "=", "scales_per_octave", "\n", "self", ".", "anchor_ratios", "=", "anchor_ratios", "\n", "self", ".", "anchor_strides", "=", "anchor_strides", "\n", "self", ".", "anchor_base_sizes", "=", "list", "(", "\n", "anchor_strides", ")", "if", "anchor_base_sizes", "is", "None", "else", "anchor_base_sizes", "\n", "self", ".", "target_means", "=", "target_means", "\n", "self", ".", "target_stds", "=", "target_stds", "\n", "\n", "self", ".", "anchor_generators", "=", "[", "]", "\n", "for", "anchor_base", "in", "self", ".", "anchor_base_sizes", ":", "\n", "            ", "octave_scales", "=", "np", ".", "array", "(", "\n", "[", "2", "**", "(", "i", "/", "scales_per_octave", ")", "for", "i", "in", "range", "(", "scales_per_octave", ")", "]", ")", "\n", "anchor_scales", "=", "octave_scales", "*", "octave_base_scale", "\n", "self", ".", "anchor_generators", ".", "append", "(", "\n", "AnchorGenerator", "(", "anchor_base", ",", "anchor_scales", ",", "anchor_ratios", ")", ")", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "num_anchors", "=", "int", "(", "\n", "len", "(", "self", ".", "anchor_ratios", ")", "*", "self", ".", "scales_per_octave", ")", "\n", "self", ".", "cls_out_channels", "=", "self", ".", "num_classes", "-", "1", "\n", "self", ".", "bbox_pred_dim", "=", "4", "\n", "\n", "self", ".", "stacked_convs", "=", "stacked_convs", "\n", "self", ".", "cls_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "reg_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "stacked_convs", ")", ":", "\n", "            ", "chn", "=", "in_channels", "if", "i", "==", "0", "else", "feat_channels", "\n", "self", ".", "cls_convs", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "chn", ",", "feat_channels", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ")", "\n", "self", ".", "reg_convs", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "chn", ",", "feat_channels", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ")", "\n", "", "self", ".", "retina_cls", "=", "nn", ".", "Conv2d", "(", "\n", "feat_channels", ",", "\n", "self", ".", "num_anchors", "*", "self", ".", "cls_out_channels", ",", "\n", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ")", "\n", "self", ".", "retina_reg", "=", "nn", ".", "Conv2d", "(", "\n", "feat_channels", ",", "\n", "self", ".", "num_anchors", "*", "self", ".", "bbox_pred_dim", ",", "\n", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ")", "\n", "self", ".", "debug_imgs", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.retina_head.RetinaHead.init_weights": [[96, 104], ["utils.bias_init_with_prob", "utils.normal_init", "utils.normal_init", "utils.normal_init", "utils.normal_init"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.weight_init.bias_init_with_prob", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.weight_init.normal_init", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.weight_init.normal_init", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.weight_init.normal_init", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.weight_init.normal_init"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "cls_convs", ":", "\n", "            ", "normal_init", "(", "m", ",", "std", "=", "0.01", ")", "\n", "", "for", "m", "in", "self", ".", "reg_convs", ":", "\n", "            ", "normal_init", "(", "m", ",", "std", "=", "0.01", ")", "\n", "", "bias_cls", "=", "bias_init_with_prob", "(", "0.01", ")", "\n", "normal_init", "(", "self", ".", "retina_cls", ",", "std", "=", "0.01", ",", "bias", "=", "bias_cls", ")", "\n", "normal_init", "(", "self", ".", "retina_reg", ",", "std", "=", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.retina_head.RetinaHead.forward_single": [[105, 115], ["retina_head.RetinaHead.retina_cls", "retina_head.RetinaHead.retina_reg", "retina_head.RetinaHead.relu", "retina_head.RetinaHead.relu", "cls_conv", "reg_conv"], "methods", ["None"], ["", "def", "forward_single", "(", "self", ",", "x", ")", ":", "\n", "        ", "cls_feat", "=", "x", "\n", "reg_feat", "=", "x", "\n", "for", "cls_conv", "in", "self", ".", "cls_convs", ":", "\n", "            ", "cls_feat", "=", "self", ".", "relu", "(", "cls_conv", "(", "cls_feat", ")", ")", "\n", "", "for", "reg_conv", "in", "self", ".", "reg_convs", ":", "\n", "            ", "reg_feat", "=", "self", ".", "relu", "(", "reg_conv", "(", "reg_feat", ")", ")", "\n", "", "cls_score", "=", "self", ".", "retina_cls", "(", "cls_feat", ")", "\n", "bbox_pred", "=", "self", ".", "retina_reg", "(", "reg_feat", ")", "\n", "return", "cls_score", ",", "bbox_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.retina_head.RetinaHead.forward": [[116, 118], ["mmdet.core.multi_apply"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.misc.multi_apply"], ["", "def", "forward", "(", "self", ",", "feats", ")", ":", "\n", "        ", "return", "multi_apply", "(", "self", ".", "forward_single", ",", "feats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.retina_head.RetinaHead.get_anchors": [[119, 157], ["len", "len", "range", "enumerate", "retina_head.RetinaHead.anchor_generators[].grid_anchors", "multi_level_anchors.append", "range", "valid_flag_list.append", "range", "min", "min", "retina_head.RetinaHead.anchor_generators[].valid_flags", "multi_level_flags.append", "int", "int", "numpy.ceil", "numpy.ceil"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.anchor.anchor_generator.AnchorGenerator.grid_anchors", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.anchor.anchor_generator.AnchorGenerator.valid_flags"], ["", "def", "get_anchors", "(", "self", ",", "featmap_sizes", ",", "img_metas", ")", ":", "\n", "        ", "\"\"\"Get anchors according to feature map sizes.\n\n        Args:\n            featmap_sizes (list[tuple]): Multi-level feature map sizes.\n            img_metas (list[dict]): Image meta info.\n\n        Returns:\n            tuple: anchors of each image, valid flags of each image\n        \"\"\"", "\n", "num_imgs", "=", "len", "(", "img_metas", ")", "\n", "num_levels", "=", "len", "(", "featmap_sizes", ")", "\n", "\n", "# since feature map sizes of all images are the same, we only compute", "\n", "# anchors for one time", "\n", "multi_level_anchors", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_levels", ")", ":", "\n", "            ", "anchors", "=", "self", ".", "anchor_generators", "[", "i", "]", ".", "grid_anchors", "(", "\n", "featmap_sizes", "[", "i", "]", ",", "self", ".", "anchor_strides", "[", "i", "]", ")", "\n", "multi_level_anchors", ".", "append", "(", "anchors", ")", "\n", "", "anchor_list", "=", "[", "multi_level_anchors", "for", "_", "in", "range", "(", "num_imgs", ")", "]", "\n", "\n", "# for each image, we compute valid flags of multi level anchors", "\n", "valid_flag_list", "=", "[", "]", "\n", "for", "img_id", ",", "img_meta", "in", "enumerate", "(", "img_metas", ")", ":", "\n", "            ", "multi_level_flags", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_levels", ")", ":", "\n", "                ", "anchor_stride", "=", "self", ".", "anchor_strides", "[", "i", "]", "\n", "feat_h", ",", "feat_w", "=", "featmap_sizes", "[", "i", "]", "\n", "h", ",", "w", ",", "_", "=", "img_meta", "[", "'pad_shape'", "]", "\n", "valid_feat_h", "=", "min", "(", "int", "(", "np", ".", "ceil", "(", "h", "/", "anchor_stride", ")", ")", ",", "feat_h", ")", "\n", "valid_feat_w", "=", "min", "(", "int", "(", "np", ".", "ceil", "(", "w", "/", "anchor_stride", ")", ")", ",", "feat_w", ")", "\n", "flags", "=", "self", ".", "anchor_generators", "[", "i", "]", ".", "valid_flags", "(", "\n", "(", "feat_h", ",", "feat_w", ")", ",", "(", "valid_feat_h", ",", "valid_feat_w", ")", ")", "\n", "multi_level_flags", ".", "append", "(", "flags", ")", "\n", "", "valid_flag_list", ".", "append", "(", "multi_level_flags", ")", "\n", "\n", "", "return", "anchor_list", ",", "valid_flag_list", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.retina_head.RetinaHead.loss_single": [[158, 184], ["labels.contiguous().view.contiguous().view.contiguous().view", "label_weights.contiguous().view.contiguous().view.contiguous().view", "cls_score.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "mmdet.core.weighted_sigmoid_focal_loss", "bbox_targets.contiguous().view.contiguous().view.contiguous().view", "bbox_weights.contiguous().view.contiguous().view.contiguous().view", "bbox_pred.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "mmdet.core.weighted_smoothl1", "labels.contiguous().view.contiguous().view.contiguous", "label_weights.contiguous().view.contiguous().view.contiguous", "cls_score.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "bbox_targets.contiguous().view.contiguous().view.contiguous", "bbox_weights.contiguous().view.contiguous().view.contiguous", "bbox_pred.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "cls_score.permute().contiguous().view.permute().contiguous().view.permute", "bbox_pred.permute().contiguous().view.permute().contiguous().view.permute"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.loss.losses.weighted_sigmoid_focal_loss", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.loss.losses.weighted_smoothl1"], ["", "def", "loss_single", "(", "self", ",", "cls_score", ",", "bbox_pred", ",", "labels", ",", "label_weights", ",", "\n", "bbox_targets", ",", "bbox_weights", ",", "num_pos_samples", ",", "cfg", ")", ":", "\n", "# classification loss", "\n", "        ", "labels", "=", "labels", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "self", ".", "cls_out_channels", ")", "\n", "label_weights", "=", "label_weights", ".", "contiguous", "(", ")", ".", "view", "(", "\n", "-", "1", ",", "self", ".", "cls_out_channels", ")", "\n", "cls_score", "=", "cls_score", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "\n", "-", "1", ",", "self", ".", "cls_out_channels", ")", "\n", "loss_cls", "=", "weighted_sigmoid_focal_loss", "(", "\n", "cls_score", ",", "\n", "labels", ",", "\n", "label_weights", ",", "\n", "cfg", ".", "gamma", ",", "\n", "cfg", ".", "alpha", ",", "\n", "avg_factor", "=", "num_pos_samples", ")", "\n", "# regression loss", "\n", "bbox_targets", "=", "bbox_targets", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "4", ")", "\n", "bbox_weights", "=", "bbox_weights", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "4", ")", "\n", "bbox_pred", "=", "bbox_pred", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "4", ")", "\n", "loss_reg", "=", "weighted_smoothl1", "(", "\n", "bbox_pred", ",", "\n", "bbox_targets", ",", "\n", "bbox_weights", ",", "\n", "beta", "=", "cfg", ".", "smoothl1_beta", ",", "\n", "avg_factor", "=", "num_pos_samples", ")", "\n", "return", "loss_cls", ",", "loss_reg", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.retina_head.RetinaHead.loss": [[185, 219], ["retina_head.RetinaHead.get_anchors", "mmdet.core.anchor_target", "mmdet.core.multi_apply", "dict", "len", "len", "featmap.size"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.retina_head.RetinaHead.get_anchors", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.anchor.anchor_target.anchor_target", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.misc.multi_apply"], ["", "def", "loss", "(", "self", ",", "cls_scores", ",", "bbox_preds", ",", "gt_bboxes", ",", "gt_labels", ",", "img_metas", ",", "\n", "cfg", ")", ":", "\n", "        ", "featmap_sizes", "=", "[", "featmap", ".", "size", "(", ")", "[", "-", "2", ":", "]", "for", "featmap", "in", "cls_scores", "]", "\n", "assert", "len", "(", "featmap_sizes", ")", "==", "len", "(", "self", ".", "anchor_generators", ")", "\n", "\n", "anchor_list", ",", "valid_flag_list", "=", "self", ".", "get_anchors", "(", "\n", "featmap_sizes", ",", "img_metas", ")", "\n", "cls_reg_targets", "=", "anchor_target", "(", "\n", "anchor_list", ",", "\n", "valid_flag_list", ",", "\n", "gt_bboxes", ",", "\n", "img_metas", ",", "\n", "self", ".", "target_means", ",", "\n", "self", ".", "target_stds", ",", "\n", "cfg", ",", "\n", "gt_labels_list", "=", "gt_labels", ",", "\n", "cls_out_channels", "=", "self", ".", "cls_out_channels", ",", "\n", "sampling", "=", "False", ")", "\n", "if", "cls_reg_targets", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "(", "labels_list", ",", "label_weights_list", ",", "bbox_targets_list", ",", "bbox_weights_list", ",", "\n", "num_total_pos", ",", "num_total_neg", ")", "=", "cls_reg_targets", "\n", "\n", "losses_cls", ",", "losses_reg", "=", "multi_apply", "(", "\n", "self", ".", "loss_single", ",", "\n", "cls_scores", ",", "\n", "bbox_preds", ",", "\n", "labels_list", ",", "\n", "label_weights_list", ",", "\n", "bbox_targets_list", ",", "\n", "bbox_weights_list", ",", "\n", "num_pos_samples", "=", "num_total_pos", ",", "\n", "cfg", "=", "cfg", ")", "\n", "return", "dict", "(", "loss_cls", "=", "losses_cls", ",", "loss_reg", "=", "losses_reg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.retina_head.RetinaHead.get_det_bboxes": [[220, 250], ["len", "range", "len", "len", "retina_head.RetinaHead.anchor_generators[].grid_anchors", "len", "retina_head.RetinaHead._get_det_bboxes_single", "result_list.append", "range", "[].detach", "[].detach", "cls_scores[].size", "range", "range"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.anchor.anchor_generator.AnchorGenerator.grid_anchors", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.retina_head.RetinaHead._get_det_bboxes_single"], ["", "def", "get_det_bboxes", "(", "self", ",", "\n", "cls_scores", ",", "\n", "bbox_preds", ",", "\n", "img_metas", ",", "\n", "cfg", ",", "\n", "rescale", "=", "False", ")", ":", "\n", "        ", "assert", "len", "(", "cls_scores", ")", "==", "len", "(", "bbox_preds", ")", "\n", "num_levels", "=", "len", "(", "cls_scores", ")", "\n", "\n", "mlvl_anchors", "=", "[", "\n", "self", ".", "anchor_generators", "[", "i", "]", ".", "grid_anchors", "(", "cls_scores", "[", "i", "]", ".", "size", "(", ")", "[", "-", "2", ":", "]", ",", "\n", "self", ".", "anchor_strides", "[", "i", "]", ")", "\n", "for", "i", "in", "range", "(", "num_levels", ")", "\n", "]", "\n", "\n", "result_list", "=", "[", "]", "\n", "for", "img_id", "in", "range", "(", "len", "(", "img_metas", ")", ")", ":", "\n", "            ", "cls_score_list", "=", "[", "\n", "cls_scores", "[", "i", "]", "[", "img_id", "]", ".", "detach", "(", ")", "for", "i", "in", "range", "(", "num_levels", ")", "\n", "]", "\n", "bbox_pred_list", "=", "[", "\n", "bbox_preds", "[", "i", "]", "[", "img_id", "]", ".", "detach", "(", ")", "for", "i", "in", "range", "(", "num_levels", ")", "\n", "]", "\n", "img_shape", "=", "img_metas", "[", "img_id", "]", "[", "'img_shape'", "]", "\n", "scale_factor", "=", "img_metas", "[", "img_id", "]", "[", "'scale_factor'", "]", "\n", "results", "=", "self", ".", "_get_det_bboxes_single", "(", "\n", "cls_score_list", ",", "bbox_pred_list", ",", "mlvl_anchors", ",", "img_shape", ",", "\n", "scale_factor", ",", "cfg", ",", "rescale", ")", "\n", "result_list", ".", "append", "(", "results", ")", "\n", "", "return", "result_list", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.retina_head.RetinaHead._get_det_bboxes_single": [[251, 288], ["zip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.new_zeros", "torch.cat.new_zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "multiclass_nms", "len", "len", "len", "cls_score.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "cls_score.permute().contiguous().view.permute().contiguous().view.sigmoid", "bbox_pred.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "mmdet.core.delta2bbox", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "cls_score.permute().contiguous().view.sigmoid.max", "maxscores.topk", "cls_score.permute().contiguous().view.permute().contiguous().view.size", "bbox_pred.permute().contiguous().view.permute().contiguous().view.size", "cls_score.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "bbox_pred.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "cls_score.permute().contiguous().view.permute().contiguous().view.permute", "bbox_pred.permute().contiguous().view.permute().contiguous().view.permute"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.transforms.delta2bbox"], ["", "def", "_get_det_bboxes_single", "(", "self", ",", "\n", "cls_scores", ",", "\n", "bbox_preds", ",", "\n", "mlvl_anchors", ",", "\n", "img_shape", ",", "\n", "scale_factor", ",", "\n", "cfg", ",", "\n", "rescale", "=", "False", ")", ":", "\n", "        ", "assert", "len", "(", "cls_scores", ")", "==", "len", "(", "bbox_preds", ")", "==", "len", "(", "mlvl_anchors", ")", "\n", "mlvl_proposals", "=", "[", "]", "\n", "mlvl_scores", "=", "[", "]", "\n", "for", "cls_score", ",", "bbox_pred", ",", "anchors", "in", "zip", "(", "cls_scores", ",", "bbox_preds", ",", "\n", "mlvl_anchors", ")", ":", "\n", "            ", "assert", "cls_score", ".", "size", "(", ")", "[", "-", "2", ":", "]", "==", "bbox_pred", ".", "size", "(", ")", "[", "-", "2", ":", "]", "\n", "cls_score", "=", "cls_score", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", ".", "view", "(", "\n", "-", "1", ",", "self", ".", "cls_out_channels", ")", "\n", "scores", "=", "cls_score", ".", "sigmoid", "(", ")", "\n", "bbox_pred", "=", "bbox_pred", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "4", ")", "\n", "proposals", "=", "delta2bbox", "(", "anchors", ",", "bbox_pred", ",", "self", ".", "target_means", ",", "\n", "self", ".", "target_stds", ",", "img_shape", ")", "\n", "if", "cfg", ".", "nms_pre", ">", "0", "and", "scores", ".", "shape", "[", "0", "]", ">", "cfg", ".", "nms_pre", ":", "\n", "                ", "maxscores", ",", "_", "=", "scores", ".", "max", "(", "dim", "=", "1", ")", "\n", "_", ",", "topk_inds", "=", "maxscores", ".", "topk", "(", "cfg", ".", "nms_pre", ")", "\n", "proposals", "=", "proposals", "[", "topk_inds", ",", ":", "]", "\n", "scores", "=", "scores", "[", "topk_inds", ",", ":", "]", "\n", "", "mlvl_proposals", ".", "append", "(", "proposals", ")", "\n", "mlvl_scores", ".", "append", "(", "scores", ")", "\n", "", "mlvl_proposals", "=", "torch", ".", "cat", "(", "mlvl_proposals", ")", "\n", "if", "rescale", ":", "\n", "            ", "mlvl_proposals", "/=", "scale_factor", "\n", "", "mlvl_scores", "=", "torch", ".", "cat", "(", "mlvl_scores", ")", "\n", "padding", "=", "mlvl_scores", ".", "new_zeros", "(", "mlvl_scores", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "mlvl_scores", "=", "torch", ".", "cat", "(", "[", "padding", ",", "mlvl_scores", "]", ",", "dim", "=", "1", ")", "\n", "det_bboxes", ",", "det_labels", "=", "multiclass_nms", "(", "mlvl_proposals", ",", "mlvl_scores", ",", "\n", "cfg", ".", "score_thr", ",", "cfg", ".", "nms", ",", "\n", "cfg", ".", "max_per_img", ")", "\n", "return", "det_bboxes", ",", "det_labels", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.ssd_rotate_head.SSDRotateHead.__init__": [[95, 127], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "getattr", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_class", "=", "1", ",", "\n", "num_output_filters", "=", "768", ",", "\n", "num_anchor_per_loc", "=", "2", ",", "\n", "use_sigmoid_cls", "=", "True", ",", "\n", "encode_rad_error_by_sin", "=", "True", ",", "\n", "use_direction_classifier", "=", "True", ",", "\n", "box_coder", "=", "'GroundBox3dCoder'", ",", "\n", "box_code_size", "=", "7", ",", "\n", ")", ":", "\n", "        ", "super", "(", "SSDRotateHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_num_class", "=", "num_class", "\n", "self", ".", "_num_anchor_per_loc", "=", "num_anchor_per_loc", "\n", "self", ".", "_use_direction_classifier", "=", "use_direction_classifier", "\n", "self", ".", "_use_sigmoid_cls", "=", "use_sigmoid_cls", "\n", "self", ".", "_encode_rad_error_by_sin", "=", "encode_rad_error_by_sin", "\n", "self", ".", "_use_direction_classifier", "=", "use_direction_classifier", "\n", "self", ".", "_box_coder", "=", "getattr", "(", "boxCoders", ",", "box_coder", ")", "(", ")", "\n", "self", ".", "_box_code_size", "=", "box_code_size", "\n", "self", ".", "_num_output_filters", "=", "num_output_filters", "\n", "\n", "if", "use_sigmoid_cls", ":", "\n", "            ", "num_cls", "=", "num_anchor_per_loc", "*", "num_class", "\n", "", "else", ":", "\n", "            ", "num_cls", "=", "num_anchor_per_loc", "*", "(", "num_class", "+", "1", ")", "\n", "\n", "", "self", ".", "conv_cls", "=", "nn", ".", "Conv2d", "(", "num_output_filters", ",", "num_cls", ",", "1", ")", "\n", "self", ".", "conv_box", "=", "nn", ".", "Conv2d", "(", "\n", "num_output_filters", ",", "num_anchor_per_loc", "*", "box_code_size", ",", "1", ")", "\n", "if", "use_direction_classifier", ":", "\n", "            ", "self", ".", "conv_dir_cls", "=", "nn", ".", "Conv2d", "(", "\n", "num_output_filters", ",", "num_anchor_per_loc", "*", "2", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.ssd_rotate_head.SSDRotateHead.add_sin_difference": [[128, 135], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin"], "methods", ["None"], ["", "", "def", "add_sin_difference", "(", "self", ",", "boxes1", ",", "boxes2", ")", ":", "\n", "        ", "rad_pred_encoding", "=", "torch", ".", "sin", "(", "boxes1", "[", "...", ",", "-", "1", ":", "]", ")", "*", "torch", ".", "cos", "(", "\n", "boxes2", "[", "...", ",", "-", "1", ":", "]", ")", "\n", "rad_tg_encoding", "=", "torch", ".", "cos", "(", "boxes1", "[", "...", ",", "-", "1", ":", "]", ")", "*", "torch", ".", "sin", "(", "boxes2", "[", "...", ",", "-", "1", ":", "]", ")", "\n", "boxes1", "=", "torch", ".", "cat", "(", "(", "boxes1", "[", "...", ",", ":", "-", "1", "]", ",", "rad_pred_encoding", ")", ",", "dim", "=", "-", "1", ")", "\n", "boxes2", "=", "torch", ".", "cat", "(", "(", "boxes2", "[", "...", ",", ":", "-", "1", "]", ",", "rad_tg_encoding", ")", ",", "dim", "=", "-", "1", ")", "\n", "return", "boxes1", ",", "boxes2", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.ssd_rotate_head.SSDRotateHead.get_direction_target": [[136, 145], ["anchors.view.view.view", "mmdet.models.utils.one_hot"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.__init__.one_hot"], ["", "def", "get_direction_target", "(", "self", ",", "anchors", ",", "reg_targets", ",", "use_one_hot", "=", "True", ")", ":", "\n", "        ", "batch_size", "=", "reg_targets", ".", "shape", "[", "0", "]", "\n", "anchors", "=", "anchors", ".", "view", "(", "batch_size", ",", "-", "1", ",", "7", ")", "\n", "rot_gt", "=", "reg_targets", "[", "...", ",", "-", "1", "]", "+", "anchors", "[", "...", ",", "-", "1", "]", "\n", "dir_cls_targets", "=", "(", "rot_gt", ">", "0", ")", ".", "long", "(", ")", "\n", "if", "use_one_hot", ":", "\n", "            ", "dir_cls_targets", "=", "one_hot", "(", "\n", "dir_cls_targets", ",", "2", ",", "dtype", "=", "anchors", ".", "dtype", ")", "\n", "", "return", "dir_cls_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.ssd_rotate_head.SSDRotateHead.prepare_loss_weights": [[146, 182], ["positives.type", "negatives.type", "cared.type().sum", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "positives.sum().type", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "positives.type", "positives.sum().type", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "cared.type", "positives.sum", "torch.stack().type", "torch.stack().type", "torch.stack().type", "torch.stack().type", "torch.stack().type", "torch.stack().type", "torch.stack().type", "torch.stack().type", "torch.stack().type", "torch.stack().type.sum", "torch.stack().type.sum", "torch.stack().type.sum", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "ValueError", "positives.sum", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "def", "prepare_loss_weights", "(", "self", ",", "labels", ",", "\n", "pos_cls_weight", "=", "1.0", ",", "\n", "neg_cls_weight", "=", "1.0", ",", "\n", "loss_norm_type", "=", "'NormByNumPositives'", ",", "\n", "dtype", "=", "torch", ".", "float32", ")", ":", "\n", "        ", "\"\"\"get cls_weights and reg_weights from labels.\n        \"\"\"", "\n", "cared", "=", "labels", ">=", "0", "\n", "# cared: [N, num_anchors]", "\n", "positives", "=", "labels", ">", "0", "\n", "negatives", "=", "labels", "==", "0", "\n", "negative_cls_weights", "=", "negatives", ".", "type", "(", "dtype", ")", "*", "neg_cls_weight", "\n", "cls_weights", "=", "negative_cls_weights", "+", "pos_cls_weight", "*", "positives", ".", "type", "(", "dtype", ")", "\n", "reg_weights", "=", "positives", ".", "type", "(", "dtype", ")", "\n", "if", "loss_norm_type", "==", "'NormByNumExamples'", ":", "\n", "            ", "num_examples", "=", "cared", ".", "type", "(", "dtype", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", "\n", "num_examples", "=", "torch", ".", "clamp", "(", "num_examples", ",", "min", "=", "1.0", ")", "\n", "cls_weights", "/=", "num_examples", "\n", "bbox_normalizer", "=", "positives", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "type", "(", "dtype", ")", "\n", "reg_weights", "/=", "torch", ".", "clamp", "(", "bbox_normalizer", ",", "min", "=", "1.0", ")", "\n", "", "elif", "loss_norm_type", "==", "'NormByNumPositives'", ":", "# for focal loss", "\n", "            ", "pos_normalizer", "=", "positives", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "type", "(", "dtype", ")", "\n", "reg_weights", "/=", "torch", ".", "clamp", "(", "pos_normalizer", ",", "min", "=", "1.0", ")", "\n", "cls_weights", "/=", "torch", ".", "clamp", "(", "pos_normalizer", ",", "min", "=", "1.0", ")", "\n", "", "elif", "loss_norm_type", "==", "'NormByNumPosNeg'", ":", "\n", "            ", "pos_neg", "=", "torch", ".", "stack", "(", "(", "positives", ",", "negatives", ")", ",", "dim", "=", "-", "1", ")", ".", "type", "(", "dtype", ")", "\n", "normalizer", "=", "pos_neg", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", "# [N, 1, 2]", "\n", "cls_normalizer", "=", "(", "pos_neg", "*", "normalizer", ")", ".", "sum", "(", "-", "1", ")", "# [N, M]", "\n", "cls_normalizer", "=", "torch", ".", "clamp", "(", "cls_normalizer", ",", "min", "=", "1.0", ")", "\n", "# cls_normalizer will be pos_or_neg_weight/num_pos_or_neg", "\n", "normalizer", "=", "torch", ".", "clamp", "(", "normalizer", ",", "min", "=", "1.0", ")", "\n", "reg_weights", "/=", "normalizer", "[", ":", ",", "0", ":", "1", ",", "0", "]", "\n", "cls_weights", "/=", "cls_normalizer", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"unknown loss norm type.\"", ")", "\n", "", "return", "cls_weights", ",", "reg_weights", ",", "cared", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.ssd_rotate_head.SSDRotateHead.create_loss": [[183, 213], ["int", "box_preds.view.view.view", "mmdet.models.utils.one_hot", "mmdet.core.loss.losses.weighted_smoothl1", "mmdet.core.loss.losses.weighted_sigmoid_focal_loss", "cls_preds.view.view.view", "cls_preds.view.view.view", "ssd_rotate_head.SSDRotateHead.add_sin_difference"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.__init__.one_hot", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.loss.losses.weighted_smoothl1", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.loss.losses.weighted_sigmoid_focal_loss", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.transforms.add_sin_difference"], ["", "def", "create_loss", "(", "self", ",", "\n", "box_preds", ",", "\n", "cls_preds", ",", "\n", "cls_targets", ",", "\n", "cls_weights", ",", "\n", "reg_targets", ",", "\n", "reg_weights", ",", "\n", "num_class", ",", "\n", "use_sigmoid_cls", "=", "True", ",", "\n", "encode_rad_error_by_sin", "=", "True", ",", "\n", "box_code_size", "=", "7", ")", ":", "\n", "        ", "batch_size", "=", "int", "(", "box_preds", ".", "shape", "[", "0", "]", ")", "\n", "box_preds", "=", "box_preds", ".", "view", "(", "batch_size", ",", "-", "1", ",", "box_code_size", ")", "\n", "if", "use_sigmoid_cls", ":", "\n", "            ", "cls_preds", "=", "cls_preds", ".", "view", "(", "batch_size", ",", "-", "1", ",", "num_class", ")", "\n", "", "else", ":", "\n", "            ", "cls_preds", "=", "cls_preds", ".", "view", "(", "batch_size", ",", "-", "1", ",", "num_class", "+", "1", ")", "\n", "", "one_hot_targets", "=", "one_hot", "(", "\n", "cls_targets", ",", "depth", "=", "num_class", "+", "1", ",", "dtype", "=", "box_preds", ".", "dtype", ")", "\n", "if", "use_sigmoid_cls", ":", "\n", "            ", "one_hot_targets", "=", "one_hot_targets", "[", "...", ",", "1", ":", "]", "\n", "", "if", "encode_rad_error_by_sin", ":", "\n", "            ", "box_preds", ",", "reg_targets", "=", "self", ".", "add_sin_difference", "(", "box_preds", ",", "reg_targets", ")", "\n", "\n", "", "loc_losses", "=", "weighted_smoothl1", "(", "box_preds", ",", "reg_targets", ",", "beta", "=", "1", "/", "9.", ",", "weight", "=", "reg_weights", "[", "...", ",", "None", "]", ",", "avg_factor", "=", "1.", ")", "\n", "cls_losses", "=", "weighted_sigmoid_focal_loss", "(", "cls_preds", ",", "one_hot_targets", ",", "weight", "=", "cls_weights", "[", "...", ",", "None", "]", ",", "avg_factor", "=", "1.", ")", "\n", "\n", "return", "loc_losses", ",", "cls_losses", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.ssd_rotate_head.SSDRotateHead.forward": [[214, 226], ["ssd_rotate_head.SSDRotateHead.conv_box", "ssd_rotate_head.SSDRotateHead.conv_cls", "box_preds.permute().contiguous.permute().contiguous.permute().contiguous", "cls_preds.permute().contiguous.permute().contiguous.permute().contiguous", "ssd_rotate_head.SSDRotateHead.conv_dir_cls", "dir_cls_preds.permute().contiguous.permute().contiguous.permute().contiguous", "box_preds.permute().contiguous.permute().contiguous.permute", "cls_preds.permute().contiguous.permute().contiguous.permute", "dir_cls_preds.permute().contiguous.permute().contiguous.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "box_preds", "=", "self", ".", "conv_box", "(", "x", ")", "\n", "cls_preds", "=", "self", ".", "conv_cls", "(", "x", ")", "\n", "# [N, C, y(H), x(W)]", "\n", "box_preds", "=", "box_preds", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "cls_preds", "=", "cls_preds", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "if", "self", ".", "_use_direction_classifier", ":", "\n", "            ", "dir_cls_preds", "=", "self", ".", "conv_dir_cls", "(", "x", ")", "\n", "dir_cls_preds", "=", "dir_cls_preds", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "", "return", "box_preds", ",", "cls_preds", ",", "dir_cls_preds", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.ssd_rotate_head.SSDRotateHead.loss": [[227, 283], ["mmdet.core.utils.misc.multi_apply", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "ssd_rotate_head.SSDRotateHead.prepare_loss_weights", "ssd_rotate_head.SSDRotateHead.create_loss", "dict", "cared.type_as", "ssd_rotate_head.SSDRotateHead.get_direction_target().view", "dir_cls_preds.view", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "mmdet.core.loss.losses.weighted_cross_entropy", "weights.sum", "getattr", "ssd_rotate_head.SSDRotateHead.get_direction_target", "weights.view"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.misc.multi_apply", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.ssd_rotate_head.SSDRotateHead.prepare_loss_weights", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.ssd_rotate_head.SSDRotateHead.create_loss", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.loss.losses.weighted_cross_entropy", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.anchor.anchor_target.get_direction_target"], ["", "def", "loss", "(", "self", ",", "box_preds", ",", "cls_preds", ",", "dir_cls_preds", ",", "gt_bboxes", ",", "gt_labels", ",", "anchors", ",", "anchors_mask", ",", "cfg", ")", ":", "\n", "\n", "        ", "batch_size", "=", "box_preds", ".", "shape", "[", "0", "]", "\n", "\n", "labels", ",", "targets", ",", "ious", "=", "multi_apply", "(", "create_target_torch", ",", "\n", "anchors", ",", "gt_bboxes", ",", "\n", "anchors_mask", ",", "gt_labels", ",", "\n", "similarity_fn", "=", "getattr", "(", "iou3d_utils", ",", "cfg", ".", "assigner", ".", "similarity_fn", ")", "(", ")", ",", "\n", "box_encoding_fn", "=", "second_box_encode", ",", "\n", "matched_threshold", "=", "cfg", ".", "assigner", ".", "pos_iou_thr", ",", "\n", "unmatched_threshold", "=", "cfg", ".", "assigner", ".", "neg_iou_thr", ",", "\n", "box_code_size", "=", "self", ".", "_box_code_size", ")", "\n", "\n", "\n", "labels", "=", "torch", ".", "stack", "(", "labels", ",", ")", "\n", "targets", "=", "torch", ".", "stack", "(", "targets", ")", "\n", "\n", "cls_weights", ",", "reg_weights", ",", "cared", "=", "self", ".", "prepare_loss_weights", "(", "labels", ")", "\n", "\n", "cls_targets", "=", "labels", "*", "cared", ".", "type_as", "(", "labels", ")", "\n", "\n", "loc_loss", ",", "cls_loss", "=", "self", ".", "create_loss", "(", "\n", "box_preds", "=", "box_preds", ",", "\n", "cls_preds", "=", "cls_preds", ",", "\n", "cls_targets", "=", "cls_targets", ",", "\n", "cls_weights", "=", "cls_weights", ",", "\n", "reg_targets", "=", "targets", ",", "\n", "reg_weights", "=", "reg_weights", ",", "\n", "num_class", "=", "self", ".", "_num_class", ",", "\n", "encode_rad_error_by_sin", "=", "self", ".", "_encode_rad_error_by_sin", ",", "\n", "use_sigmoid_cls", "=", "self", ".", "_use_sigmoid_cls", ",", "\n", "box_code_size", "=", "self", ".", "_box_code_size", ",", "\n", ")", "\n", "\n", "loc_loss_reduced", "=", "loc_loss", "/", "batch_size", "\n", "loc_loss_reduced", "*=", "2", "\n", "\n", "cls_loss_reduced", "=", "cls_loss", "/", "batch_size", "\n", "cls_loss_reduced", "*=", "1", "\n", "\n", "loss", "=", "loc_loss_reduced", "+", "cls_loss_reduced", "\n", "\n", "if", "self", ".", "_use_direction_classifier", ":", "\n", "            ", "dir_labels", "=", "self", ".", "get_direction_target", "(", "anchors", ",", "targets", ",", "use_one_hot", "=", "False", ")", ".", "view", "(", "-", "1", ")", "\n", "dir_logits", "=", "dir_cls_preds", ".", "view", "(", "-", "1", ",", "2", ")", "\n", "weights", "=", "(", "labels", ">", "0", ")", ".", "type_as", "(", "dir_logits", ")", "\n", "weights", "/=", "torch", ".", "clamp", "(", "weights", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", ",", "min", "=", "1.0", ")", "\n", "dir_loss", "=", "weighted_cross_entropy", "(", "dir_logits", ",", "dir_labels", ",", "\n", "weight", "=", "weights", ".", "view", "(", "-", "1", ")", ",", "\n", "avg_factor", "=", "1.", ")", "\n", "\n", "dir_loss_reduced", "=", "dir_loss", "/", "batch_size", "\n", "dir_loss_reduced", "*=", ".2", "\n", "loss", "+=", "dir_loss_reduced", "\n", "\n", "", "return", "dict", "(", "rpn_loc_loss", "=", "loc_loss_reduced", ",", "rpn_cls_loss", "=", "cls_loss_reduced", ",", "rpn_dir_loss", "=", "dir_loss_reduced", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.ssd_rotate_head.SSDRotateHead.get_guided_anchors": [[284, 331], ["torch.cat.view", "torch.cat.view", "torch.cat.view", "anchors_mask.view", "cls_preds.view", "ssd_rotate_head.second_box_decode", "zip", "dir_cls_preds.view", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "new_boxes.append", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.softmax", "torch.softmax", "torch.softmax", "dir_labels.byte"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.box_coders.second_box_decode"], ["", "def", "get_guided_anchors", "(", "self", ",", "box_preds", ",", "cls_preds", ",", "dir_cls_preds", ",", "anchors", ",", "anchors_mask", ",", "gt_bboxes", ",", "thr", "=", ".1", ")", ":", "\n", "        ", "batch_size", "=", "box_preds", ".", "shape", "[", "0", "]", "\n", "\n", "batch_box_preds", "=", "box_preds", ".", "view", "(", "batch_size", ",", "-", "1", ",", "self", ".", "_box_code_size", ")", "\n", "batch_anchors_mask", "=", "anchors_mask", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "batch_cls_preds", "=", "cls_preds", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "batch_box_preds", "=", "second_box_decode", "(", "batch_box_preds", ",", "anchors", ")", "\n", "\n", "if", "self", ".", "_use_direction_classifier", ":", "\n", "            ", "batch_dir_preds", "=", "dir_cls_preds", ".", "view", "(", "batch_size", ",", "-", "1", ",", "2", ")", "\n", "\n", "", "new_boxes", "=", "[", "]", "\n", "if", "gt_bboxes", "is", "None", ":", "\n", "            ", "gt_bboxes", "=", "[", "None", "]", "*", "batch_size", "\n", "\n", "", "for", "box_preds", ",", "cls_preds", ",", "dir_preds", ",", "a_mask", ",", "gt_boxes", "in", "zip", "(", "\n", "batch_box_preds", ",", "batch_cls_preds", ",", "batch_dir_preds", ",", "batch_anchors_mask", ",", "gt_bboxes", "\n", ")", ":", "\n", "            ", "box_preds", "=", "box_preds", "[", "a_mask", "]", "\n", "cls_preds", "=", "cls_preds", "[", "a_mask", "]", "\n", "dir_preds", "=", "dir_preds", "[", "a_mask", "]", "\n", "\n", "if", "self", ".", "_use_direction_classifier", ":", "\n", "                ", "dir_labels", "=", "torch", ".", "max", "(", "dir_preds", ",", "dim", "=", "-", "1", ")", "[", "1", "]", "\n", "\n", "", "if", "self", ".", "_use_sigmoid_cls", ":", "\n", "                ", "total_scores", "=", "torch", ".", "sigmoid", "(", "cls_preds", ")", "\n", "", "else", ":", "\n", "                ", "total_scores", "=", "F", ".", "softmax", "(", "cls_preds", ",", "dim", "=", "-", "1", ")", "[", "...", ",", "1", ":", "]", "\n", "\n", "", "top_scores", "=", "torch", ".", "squeeze", "(", "total_scores", ",", "-", "1", ")", "\n", "\n", "selected", "=", "top_scores", ">", "thr", "\n", "\n", "box_preds", "=", "box_preds", "[", "selected", "]", "\n", "\n", "if", "self", ".", "_use_direction_classifier", ":", "\n", "                ", "dir_labels", "=", "dir_labels", "[", "selected", "]", "\n", "opp_labels", "=", "(", "box_preds", "[", "...", ",", "-", "1", "]", ">", "0", ")", "^", "dir_labels", ".", "byte", "(", ")", "\n", "box_preds", "[", "opp_labels", ",", "-", "1", "]", "+=", "np", ".", "pi", "\n", "\n", "# add ground-truth", "\n", "", "if", "gt_boxes", "is", "not", "None", ":", "\n", "                ", "box_preds", "=", "torch", ".", "cat", "(", "[", "gt_boxes", ",", "box_preds", "]", ",", "0", ")", "\n", "\n", "", "new_boxes", ".", "append", "(", "box_preds", ")", "\n", "", "return", "new_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.ssd_rotate_head.PSWarpHead.__init__": [[382, 398], ["torch.Module.__init__", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "grid_offsets", ",", "featmap_stride", ",", "in_channels", ",", "num_class", "=", "1", ",", "num_parts", "=", "49", ")", ":", "\n", "        ", "super", "(", "PSWarpHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_num_class", "=", "num_class", "\n", "out_channels", "=", "num_class", "*", "num_parts", "\n", "\n", "self", ".", "gen_grid_fn", "=", "partial", "(", "gen_sample_grid", ",", "grid_offsets", "=", "grid_offsets", ",", "spatial_scale", "=", "1", "/", "featmap_stride", ")", "\n", "\n", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "3", ",", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ",", "eps", "=", "1e-3", ",", "momentum", "=", "0.01", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_channels", ",", "out_channels", ",", "1", ",", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", ")", "\n", "\n", "self", ".", "grid_offsets", "=", "grid_offsets", "\n", "self", ".", "featmap_stride", "=", "featmap_stride", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.ssd_rotate_head.PSWarpHead.forward": [[399, 455], ["ssd_rotate_head.PSWarpHead.convs", "list", "enumerate", "ssd_rotate_head.PSWarpHead.gen_grid_fn", "ssd_rotate_head.bilinear_interpolate_torch_gridsample", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "torch.mean().view", "list.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "list.append", "torch.empty().type_as", "torch.empty().type_as", "torch.empty().type_as", "torch.empty().type_as", "torch.empty().type_as", "torch.empty().type_as", "torch.empty().type_as", "torch.empty().type_as", "torch.empty().type_as", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.ssd_rotate_head.bilinear_interpolate_torch_gridsample"], ["", "def", "forward", "(", "self", ",", "x", ",", "guided_anchors", ",", "is_test", "=", "False", ")", ":", "\n", "# print (\"-------------------- PSWarpHead START ------------------------------\")", "\n", "\n", "# (x has shape: (batch_size, 256, 200, 176))", "\n", "# (guided_anchors is a list of batch_size tensors)", "\n", "# (guided_anchors[i] has shape: (num_guided_anchors_in_pc_i, 7))", "\n", "# # (num_guided_anchors_in_pc_i is different for different i:s and for different examples) (typically, num_guided_anchors_in_pc_i is ~ 10000 - 25000)", "\n", "# print (x.size())", "\n", "# print (len(guided_anchors))", "\n", "# print (guided_anchors[0].size())", "\n", "# print (guided_anchors[1].size())", "\n", "\n", "        ", "x", "=", "self", ".", "convs", "(", "x", ")", "\n", "# (x has shape: (batch_size, 28, 200, 176)) (28 = num_class*num_parts = 1*28)", "\n", "# print (x.size())", "\n", "\n", "bbox_scores", "=", "list", "(", ")", "\n", "for", "i", ",", "ga", "in", "enumerate", "(", "guided_anchors", ")", ":", "\n", "# print (i)", "\n", "# (ga has shape: (num_guided_anchors_in_pc_i, 7))", "\n", "# print (ga.size())", "\n", "\n", "            ", "if", "len", "(", "ga", ")", "==", "0", ":", "\n", "                ", "bbox_scores", ".", "append", "(", "torch", ".", "empty", "(", "0", ")", ".", "type_as", "(", "x", ")", ")", "\n", "continue", "\n", "", "(", "xs", ",", "ys", ")", "=", "self", ".", "gen_grid_fn", "(", "ga", "[", ":", ",", "[", "0", ",", "1", ",", "3", ",", "4", ",", "6", "]", "]", ")", "\n", "# (xs has shape: (28, num_guided_anchors_in_pc_i))", "\n", "# (ys has shape: (28, num_guided_anchors_in_pc_i))", "\n", "# print (xs.size())", "\n", "# print (ys.size())", "\n", "\n", "# print (ga[0])", "\n", "# print (xs[:, 0])", "\n", "# print (ys[:, 0])", "\n", "\n", "im", "=", "x", "[", "i", "]", "\n", "# (im has shape: (28, 200, 176))", "\n", "# print (im.size())", "\n", "\n", "out", "=", "bilinear_interpolate_torch_gridsample", "(", "im", ",", "xs", ",", "ys", ")", "\n", "# (out has shape: (28, 1, num_guided_anchors_in_pc_i, 1))", "\n", "# print (out.size())", "\n", "# print (\"#####\")", "\n", "\n", "score", "=", "torch", ".", "mean", "(", "out", ",", "0", ")", ".", "view", "(", "-", "1", ")", "\n", "# (score has shape: (num_guided_anchors_in_pc_i))", "\n", "# print (score.size())", "\n", "\n", "bbox_scores", ".", "append", "(", "score", ")", "\n", "\n", "# print (\"-------------------- PSWarpHead END ------------------------------\")", "\n", "\n", "", "if", "is_test", ":", "\n", "            ", "return", "bbox_scores", ",", "guided_anchors", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "cat", "(", "bbox_scores", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.ssd_rotate_head.PSWarpHead.loss": [[457, 492], ["len", "mmdet.core.utils.misc.multi_apply", "torch.cat().unsqueeze_", "torch.cat().unsqueeze_", "torch.cat().unsqueeze_", "torch.cat().unsqueeze_", "torch.cat().unsqueeze_", "torch.cat().unsqueeze_", "torch.cat().unsqueeze_", "torch.cat().unsqueeze_", "torch.cat().unsqueeze_", "negatives.type", "positives.sum().type", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "cls_preds.view.view.view", "mmdet.core.loss.losses.weighted_sigmoid_focal_loss", "dict", "positives.type", "cared.type_as", "cls_targets.float", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "positives.sum", "getattr"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.misc.multi_apply", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.loss.losses.weighted_sigmoid_focal_loss"], ["", "", "def", "loss", "(", "self", ",", "cls_preds", ",", "gt_bboxes", ",", "gt_labels", ",", "anchors", ",", "cfg", ")", ":", "\n", "\n", "        ", "batch_size", "=", "len", "(", "anchors", ")", "\n", "\n", "labels", ",", "targets", ",", "ious", "=", "multi_apply", "(", "create_target_torch", ",", "\n", "anchors", ",", "gt_bboxes", ",", "\n", "(", "None", ",", ")", "*", "batch_size", ",", "gt_labels", ",", "\n", "similarity_fn", "=", "getattr", "(", "iou3d_utils", ",", "cfg", ".", "assigner", ".", "similarity_fn", ")", "(", ")", ",", "\n", "box_encoding_fn", "=", "second_box_encode", ",", "\n", "matched_threshold", "=", "cfg", ".", "assigner", ".", "pos_iou_thr", ",", "\n", "unmatched_threshold", "=", "cfg", ".", "assigner", ".", "neg_iou_thr", ")", "\n", "\n", "labels", "=", "torch", ".", "cat", "(", "labels", ",", ")", ".", "unsqueeze_", "(", "1", ")", "\n", "\n", "# soft_label = torch.clamp(2 * ious - 0.5, 0, 1)", "\n", "# labels = soft_label * labels.float()", "\n", "\n", "cared", "=", "labels", ">=", "0", "\n", "positives", "=", "labels", ">", "0", "\n", "negatives", "=", "labels", "==", "0", "\n", "negative_cls_weights", "=", "negatives", ".", "type", "(", "torch", ".", "float32", ")", "\n", "cls_weights", "=", "negative_cls_weights", "+", "positives", ".", "type", "(", "torch", ".", "float32", ")", "\n", "\n", "pos_normalizer", "=", "positives", ".", "sum", "(", ")", ".", "type", "(", "torch", ".", "float32", ")", "\n", "cls_weights", "/=", "torch", ".", "clamp", "(", "pos_normalizer", ",", "min", "=", "1.0", ")", "\n", "\n", "cls_targets", "=", "labels", "*", "cared", ".", "type_as", "(", "labels", ")", "\n", "cls_preds", "=", "cls_preds", ".", "view", "(", "-", "1", ",", "self", ".", "_num_class", ")", "\n", "\n", "cls_losses", "=", "weighted_sigmoid_focal_loss", "(", "cls_preds", ",", "cls_targets", ".", "float", "(", ")", ",", "weight", "=", "cls_weights", ",", "avg_factor", "=", "1.", ")", "\n", "\n", "cls_loss_reduced", "=", "cls_losses", "/", "batch_size", "\n", "\n", "return", "dict", "(", "loss_cls", "=", "cls_loss_reduced", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.ssd_rotate_head.PSWarpHead.get_rescore_bboxes": [[493, 527], ["list", "list", "range", "len", "bbox_pred.view.view.view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "mmdet.ops.iou3d.iou3d_utils.boxes3d_to_bev_torch", "mmdet.core.post_processing.bbox_nms.rotate_nms_torch", "list.append", "list.append", "list.append", "list.append", "torch.sigmoid().view.numel", "torch.sigmoid().view.numel", "torch.sigmoid().view.numel", "list.append", "list.append", "bbox_pred.view.view.detach().cpu().numpy", "torch.sigmoid().view.detach().cpu().numpy", "torch.sigmoid().view.detach().cpu().numpy", "torch.sigmoid().view.detach().cpu().numpy", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "bbox_pred.view.view.detach().cpu().numpy", "torch.sigmoid().view.detach().cpu().numpy", "torch.sigmoid().view.detach().cpu().numpy", "torch.sigmoid().view.detach().cpu().numpy", "bbox_pred.view.view.detach().cpu", "torch.sigmoid().view.detach().cpu", "torch.sigmoid().view.detach().cpu", "torch.sigmoid().view.detach().cpu", "bbox_pred.view.view.detach().cpu", "torch.sigmoid().view.detach().cpu", "torch.sigmoid().view.detach().cpu", "torch.sigmoid().view.detach().cpu", "bbox_pred.view.view.detach", "torch.sigmoid().view.detach", "torch.sigmoid().view.detach", "torch.sigmoid().view.detach", "bbox_pred.view.view.detach", "torch.sigmoid().view.detach", "torch.sigmoid().view.detach", "torch.sigmoid().view.detach"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.iou3d.iou3d_utils.boxes3d_to_bev_torch", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.bbox_nms.rotate_nms_torch"], ["", "def", "get_rescore_bboxes", "(", "self", ",", "guided_anchors", ",", "cls_scores", ",", "img_metas", ",", "cfg", ")", ":", "\n", "        ", "det_bboxes", "=", "list", "(", ")", "\n", "det_scores", "=", "list", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "img_metas", ")", ")", ":", "\n", "            ", "bbox_pred", "=", "guided_anchors", "[", "i", "]", "\n", "scores", "=", "cls_scores", "[", "i", "]", "\n", "\n", "if", "scores", ".", "numel", "==", "0", ":", "\n", "                ", "det_bboxes", ".", "append", "(", "None", ")", "\n", "det_scores", ".", "append", "(", "None", ")", "\n", "\n", "", "bbox_pred", "=", "bbox_pred", ".", "view", "(", "-", "1", ",", "7", ")", "\n", "scores", "=", "torch", ".", "sigmoid", "(", "scores", ")", ".", "view", "(", "-", "1", ")", "\n", "select", "=", "scores", ">", "cfg", ".", "score_thr", "\n", "\n", "bbox_pred", "=", "bbox_pred", "[", "select", ",", ":", "]", "\n", "scores", "=", "scores", "[", "select", "]", "\n", "\n", "if", "scores", ".", "numel", "(", ")", "==", "0", ":", "\n", "                ", "det_bboxes", ".", "append", "(", "bbox_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "det_scores", ".", "append", "(", "scores", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "continue", "\n", "\n", "", "boxes_for_nms", "=", "boxes3d_to_bev_torch", "(", "bbox_pred", ")", "\n", "keep", "=", "rotate_nms_torch", "(", "boxes_for_nms", ",", "scores", ",", "iou_threshold", "=", "cfg", ".", "nms", ".", "iou_thr", ")", "\n", "\n", "bbox_pred", "=", "bbox_pred", "[", "keep", ",", ":", "]", "\n", "scores", "=", "scores", "[", "keep", "]", "\n", "\n", "det_bboxes", ".", "append", "(", "bbox_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "det_scores", ".", "append", "(", "scores", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "return", "det_bboxes", ",", "det_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.ssd_rotate_head.PSWarpHead.get_rescore_bboxes_ebm_guided": [[528, 574], ["list", "list", "list", "range", "len", "bbox_pred.view.view.view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "mmdet.ops.iou3d.iou3d_utils.boxes3d_to_bev_torch", "mmdet.core.post_processing.bbox_nms.rotate_nms_torch", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "torch.sigmoid().view.numel", "torch.sigmoid().view.numel", "torch.sigmoid().view.numel", "list.append", "list.append", "list.append", "bbox_pred.view.view.detach().cpu().numpy", "torch.sigmoid().view.detach().cpu().numpy", "torch.sigmoid().view.detach().cpu().numpy", "torch.sigmoid().view.detach().cpu().numpy", "fs.detach().cpu().numpy", "bbox_pred.view.view.detach().cpu().numpy", "torch.sigmoid().view.detach().cpu().numpy", "torch.sigmoid().view.detach().cpu().numpy", "torch.sigmoid().view.detach().cpu().numpy", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "bbox_pred.view.view.detach().cpu().numpy", "torch.sigmoid().view.detach().cpu().numpy", "torch.sigmoid().view.detach().cpu().numpy", "torch.sigmoid().view.detach().cpu().numpy", "fs.detach().cpu().numpy", "bbox_pred.view.view.detach().cpu", "torch.sigmoid().view.detach().cpu", "torch.sigmoid().view.detach().cpu", "torch.sigmoid().view.detach().cpu", "fs.detach().cpu", "bbox_pred.view.view.detach().cpu", "torch.sigmoid().view.detach().cpu", "torch.sigmoid().view.detach().cpu", "torch.sigmoid().view.detach().cpu", "bbox_pred.view.view.detach().cpu", "torch.sigmoid().view.detach().cpu", "torch.sigmoid().view.detach().cpu", "torch.sigmoid().view.detach().cpu", "fs.detach().cpu", "bbox_pred.view.view.detach", "torch.sigmoid().view.detach", "torch.sigmoid().view.detach", "torch.sigmoid().view.detach", "fs.detach", "bbox_pred.view.view.detach", "torch.sigmoid().view.detach", "torch.sigmoid().view.detach", "torch.sigmoid().view.detach", "bbox_pred.view.view.detach", "torch.sigmoid().view.detach", "torch.sigmoid().view.detach", "torch.sigmoid().view.detach", "fs.detach"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.iou3d.iou3d_utils.boxes3d_to_bev_torch", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.bbox_nms.rotate_nms_torch"], ["", "def", "get_rescore_bboxes_ebm_guided", "(", "self", ",", "guided_anchors", ",", "cls_scores", ",", "fs_list", ",", "img_metas", ",", "cfg", ")", ":", "\n", "        ", "det_bboxes", "=", "list", "(", ")", "\n", "det_scores", "=", "list", "(", ")", "\n", "det_fs", "=", "list", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "img_metas", ")", ")", ":", "\n", "            ", "bbox_pred", "=", "guided_anchors", "[", "i", "]", "\n", "scores", "=", "cls_scores", "[", "i", "]", "\n", "fs", "=", "fs_list", "[", "i", "]", "\n", "\n", "if", "fs", "is", "None", ":", "\n", "                ", "det_bboxes", ".", "append", "(", "bbox_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "det_scores", ".", "append", "(", "scores", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "continue", "\n", "\n", "", "if", "scores", ".", "numel", "==", "0", ":", "\n", "                ", "det_bboxes", ".", "append", "(", "None", ")", "\n", "det_scores", ".", "append", "(", "None", ")", "\n", "det_fs", ".", "append", "(", "None", ")", "\n", "\n", "", "bbox_pred", "=", "bbox_pred", ".", "view", "(", "-", "1", ",", "7", ")", "\n", "scores", "=", "torch", ".", "sigmoid", "(", "scores", ")", ".", "view", "(", "-", "1", ")", "\n", "select", "=", "scores", ">", "cfg", ".", "score_thr", "\n", "\n", "bbox_pred", "=", "bbox_pred", "[", "select", ",", ":", "]", "\n", "scores", "=", "scores", "[", "select", "]", "\n", "fs", "=", "fs", "[", "select", "]", "\n", "\n", "if", "scores", ".", "numel", "(", ")", "==", "0", ":", "\n", "                ", "det_bboxes", ".", "append", "(", "bbox_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "det_scores", ".", "append", "(", "scores", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "det_fs", ".", "append", "(", "fs", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "continue", "\n", "\n", "", "boxes_for_nms", "=", "boxes3d_to_bev_torch", "(", "bbox_pred", ")", "\n", "keep", "=", "rotate_nms_torch", "(", "boxes_for_nms", ",", "fs", ",", "iou_threshold", "=", "cfg", ".", "nms", ".", "iou_thr", ")", "\n", "\n", "bbox_pred", "=", "bbox_pred", "[", "keep", ",", ":", "]", "\n", "scores", "=", "scores", "[", "keep", "]", "\n", "fs", "=", "fs", "[", "keep", "]", "\n", "\n", "det_bboxes", ".", "append", "(", "bbox_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "det_scores", ".", "append", "(", "scores", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "det_fs", ".", "append", "(", "fs", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "return", "det_bboxes", ",", "det_scores", ",", "fs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.ssd_rotate_head.second_box_encode": [[15, 52], ["torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "function", ["None"], ["def", "second_box_encode", "(", "boxes", ",", "anchors", ",", "encode_angle_to_vector", "=", "False", ",", "smooth_dim", "=", "False", ")", ":", "\n", "    ", "\"\"\"box encode for VoxelNet in lidar\n    Args:\n        boxes ([N, 7] Tensor): normal boxes: x, y, z, w, l, h, r\n        anchors ([N, 7] Tensor): anchors\n        encode_angle_to_vector: bool. increase aos performance,\n            decrease other performance.\n    \"\"\"", "\n", "# need to convert boxes to z-center format", "\n", "xa", ",", "ya", ",", "za", ",", "wa", ",", "la", ",", "ha", ",", "ra", "=", "torch", ".", "split", "(", "anchors", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "xg", ",", "yg", ",", "zg", ",", "wg", ",", "lg", ",", "hg", ",", "rg", "=", "torch", ".", "split", "(", "boxes", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "zg", "=", "zg", "+", "hg", "/", "2", "\n", "za", "=", "za", "+", "ha", "/", "2", "\n", "diagonal", "=", "torch", ".", "sqrt", "(", "la", "**", "2", "+", "wa", "**", "2", ")", "# 4.3", "\n", "xt", "=", "(", "xg", "-", "xa", ")", "/", "diagonal", "\n", "yt", "=", "(", "yg", "-", "ya", ")", "/", "diagonal", "\n", "zt", "=", "(", "zg", "-", "za", ")", "/", "ha", "# 1.6", "\n", "\n", "if", "smooth_dim", ":", "\n", "        ", "lt", "=", "lg", "/", "la", "-", "1", "\n", "wt", "=", "wg", "/", "wa", "-", "1", "\n", "ht", "=", "hg", "/", "ha", "-", "1", "\n", "", "else", ":", "\n", "        ", "lt", "=", "torch", ".", "log", "(", "lg", "/", "la", ")", "\n", "wt", "=", "torch", ".", "log", "(", "wg", "/", "wa", ")", "\n", "ht", "=", "torch", ".", "log", "(", "hg", "/", "ha", ")", "\n", "", "if", "encode_angle_to_vector", ":", "\n", "        ", "rgx", "=", "torch", ".", "cos", "(", "rg", ")", "\n", "rgy", "=", "torch", ".", "sin", "(", "rg", ")", "\n", "rax", "=", "torch", ".", "cos", "(", "ra", ")", "\n", "ray", "=", "torch", ".", "sin", "(", "ra", ")", "\n", "rtx", "=", "rgx", "-", "rax", "\n", "rty", "=", "rgy", "-", "ray", "\n", "return", "torch", ".", "cat", "(", "[", "xt", ",", "yt", ",", "zt", ",", "wt", ",", "lt", ",", "ht", ",", "rtx", ",", "rty", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "rt", "=", "rg", "-", "ra", "\n", "return", "torch", ".", "cat", "(", "[", "xt", ",", "yt", ",", "zt", ",", "wt", ",", "lt", ",", "ht", ",", "rt", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.ssd_rotate_head.second_box_decode": [[53, 92], ["torch.split", "torch.split", "torch.split", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.cat", "torch.cat", "torch.cat", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.atan2", "torch.atan2", "torch.atan2", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "function", ["None"], ["", "", "def", "second_box_decode", "(", "box_encodings", ",", "anchors", ",", "encode_angle_to_vector", "=", "False", ",", "smooth_dim", "=", "False", ")", ":", "\n", "    ", "\"\"\"box decode for VoxelNet in lidar\n    Args:\n        boxes ([N, 7] Tensor): normal boxes: x, y, z, w, l, h, r\n        anchors ([N, 7] Tensor): anchors\n    \"\"\"", "\n", "xa", ",", "ya", ",", "za", ",", "wa", ",", "la", ",", "ha", ",", "ra", "=", "torch", ".", "split", "(", "anchors", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "if", "encode_angle_to_vector", ":", "\n", "        ", "xt", ",", "yt", ",", "zt", ",", "wt", ",", "lt", ",", "ht", ",", "rtx", ",", "rty", "=", "torch", ".", "split", "(", "\n", "box_encodings", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "xt", ",", "yt", ",", "zt", ",", "wt", ",", "lt", ",", "ht", ",", "rt", "=", "torch", ".", "split", "(", "box_encodings", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# xt, yt, zt, wt, lt, ht, rt = torch.split(box_encodings, 1, dim=-1)", "\n", "", "za", "=", "za", "+", "ha", "/", "2", "\n", "diagonal", "=", "torch", ".", "sqrt", "(", "la", "**", "2", "+", "wa", "**", "2", ")", "\n", "xg", "=", "xt", "*", "diagonal", "+", "xa", "\n", "yg", "=", "yt", "*", "diagonal", "+", "ya", "\n", "zg", "=", "zt", "*", "ha", "+", "za", "\n", "\n", "if", "smooth_dim", ":", "\n", "        ", "lg", "=", "(", "lt", "+", "1", ")", "*", "la", "\n", "wg", "=", "(", "wt", "+", "1", ")", "*", "wa", "\n", "hg", "=", "(", "ht", "+", "1", ")", "*", "ha", "\n", "", "else", ":", "\n", "\n", "        ", "lg", "=", "torch", ".", "exp", "(", "lt", ")", "*", "la", "\n", "wg", "=", "torch", ".", "exp", "(", "wt", ")", "*", "wa", "\n", "hg", "=", "torch", ".", "exp", "(", "ht", ")", "*", "ha", "\n", "", "if", "encode_angle_to_vector", ":", "\n", "        ", "rax", "=", "torch", ".", "cos", "(", "ra", ")", "\n", "ray", "=", "torch", ".", "sin", "(", "ra", ")", "\n", "rgx", "=", "rtx", "+", "rax", "\n", "rgy", "=", "rty", "+", "ray", "\n", "rg", "=", "torch", ".", "atan2", "(", "rgy", ",", "rgx", ")", "\n", "", "else", ":", "\n", "        ", "rg", "=", "rt", "+", "ra", "\n", "", "zg", "=", "zg", "-", "hg", "/", "2", "\n", "return", "torch", ".", "cat", "(", "[", "xg", ",", "yg", ",", "zg", ",", "wg", ",", "lg", ",", "hg", ",", "rg", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.ssd_rotate_head.gen_sample_grid": [[332, 359], ["torch.split", "torch.split", "torch.split", "xg.unsqueeze_().expand.unsqueeze_().expand", "yg.unsqueeze_().expand.unsqueeze_().expand", "rg.unsqueeze_().expand.unsqueeze_().expand", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "xx.unsqueeze_().expand.unsqueeze_().expand", "yy.unsqueeze_().expand.unsqueeze_().expand", "torch.linspace().type_as().view", "torch.linspace().type_as().view", "torch.linspace().type_as().view", "torch.linspace().type_as().view", "torch.linspace().type_as().view", "torch.linspace().type_as().view", "x.view", "y.view", "xg.unsqueeze_().expand.unsqueeze_", "yg.unsqueeze_().expand.unsqueeze_", "rg.unsqueeze_().expand.unsqueeze_", "xx.unsqueeze_().expand.unsqueeze_", "yy.unsqueeze_().expand.unsqueeze_", "x.permute().contiguous", "y.permute().contiguous", "torch.linspace().type_as", "torch.linspace().type_as", "torch.linspace().type_as", "torch.linspace().type_as", "torch.linspace().type_as", "torch.linspace().type_as", "x.permute", "y.permute", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace"], "function", ["None"], ["", "", "def", "gen_sample_grid", "(", "box", ",", "window_size", "=", "(", "4", ",", "7", ")", ",", "grid_offsets", "=", "(", "0", ",", "0", ")", ",", "spatial_scale", "=", "1.", ")", ":", "\n", "# print (spatial_scale)", "\n", "\n", "    ", "N", "=", "box", ".", "shape", "[", "0", "]", "\n", "win", "=", "window_size", "[", "0", "]", "*", "window_size", "[", "1", "]", "\n", "xg", ",", "yg", ",", "wg", ",", "lg", ",", "rg", "=", "torch", ".", "split", "(", "box", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "\n", "xg", "=", "xg", ".", "unsqueeze_", "(", "-", "1", ")", ".", "expand", "(", "N", ",", "*", "window_size", ")", "\n", "yg", "=", "yg", ".", "unsqueeze_", "(", "-", "1", ")", ".", "expand", "(", "N", ",", "*", "window_size", ")", "\n", "rg", "=", "rg", ".", "unsqueeze_", "(", "-", "1", ")", ".", "expand", "(", "N", ",", "*", "window_size", ")", "\n", "\n", "cosTheta", "=", "torch", ".", "cos", "(", "rg", ")", "\n", "sinTheta", "=", "torch", ".", "sin", "(", "rg", ")", "\n", "\n", "xx", "=", "torch", ".", "linspace", "(", "-", ".5", ",", ".5", ",", "window_size", "[", "0", "]", ")", ".", "type_as", "(", "box", ")", ".", "view", "(", "1", ",", "-", "1", ")", "*", "wg", "\n", "yy", "=", "torch", ".", "linspace", "(", "-", ".5", ",", ".5", ",", "window_size", "[", "1", "]", ")", ".", "type_as", "(", "box", ")", ".", "view", "(", "1", ",", "-", "1", ")", "*", "lg", "\n", "\n", "xx", "=", "xx", ".", "unsqueeze_", "(", "-", "1", ")", ".", "expand", "(", "N", ",", "*", "window_size", ")", "\n", "yy", "=", "yy", ".", "unsqueeze_", "(", "1", ")", ".", "expand", "(", "N", ",", "*", "window_size", ")", "\n", "\n", "x", "=", "(", "xx", "*", "cosTheta", "+", "yy", "*", "sinTheta", "+", "xg", ")", "\n", "y", "=", "(", "yy", "*", "cosTheta", "-", "xx", "*", "sinTheta", "+", "yg", ")", "\n", "\n", "x", "=", "(", "x", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", "+", "grid_offsets", "[", "0", "]", ")", "*", "spatial_scale", "\n", "y", "=", "(", "y", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", "+", "grid_offsets", "[", "1", "]", ")", "*", "spatial_scale", "\n", "\n", "return", "x", ".", "view", "(", "win", ",", "-", "1", ")", ",", "y", ".", "view", "(", "win", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.single_stage_heads.ssd_rotate_head.bilinear_interpolate_torch_gridsample": [[360, 380], ["image.unsqueeze.unsqueeze", "samples_x.unsqueeze.unsqueeze", "samples_x.unsqueeze.unsqueeze", "samples_y.unsqueeze.unsqueeze", "samples_y.unsqueeze.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample"], "function", ["None"], ["", "def", "bilinear_interpolate_torch_gridsample", "(", "image", ",", "samples_x", ",", "samples_y", ")", ":", "\n", "    ", "C", ",", "H", ",", "W", "=", "image", ".", "shape", "\n", "image", "=", "image", ".", "unsqueeze", "(", "1", ")", "# change to:  C x 1 x H x W", "\n", "\n", "samples_x", "=", "samples_x", ".", "unsqueeze", "(", "2", ")", "\n", "samples_x", "=", "samples_x", ".", "unsqueeze", "(", "3", ")", "\n", "samples_y", "=", "samples_y", ".", "unsqueeze", "(", "2", ")", "\n", "samples_y", "=", "samples_y", ".", "unsqueeze", "(", "3", ")", "\n", "\n", "samples", "=", "torch", ".", "cat", "(", "[", "samples_x", ",", "samples_y", "]", ",", "3", ")", "\n", "samples", "[", ":", ",", ":", ",", ":", ",", "0", "]", "=", "(", "samples", "[", ":", ",", ":", ",", ":", ",", "0", "]", "/", "(", "W", "-", "1", ")", ")", "# normalize to between  0 and 1", "\n", "samples", "[", ":", ",", ":", ",", ":", ",", "1", "]", "=", "(", "samples", "[", ":", ",", ":", ",", ":", ",", "1", "]", "/", "(", "H", "-", "1", ")", ")", "# normalize to between  0 and 1", "\n", "samples", "=", "samples", "*", "2", "-", "1", "# normalize to between -1 and 1", "\n", "\n", "# print (\"[[[[[[[START]]]]]]]\")", "\n", "# print (image.size())", "\n", "# print (samples.size())", "\n", "# print (\"[[[[[[[END]]]]]]]\")", "\n", "\n", "return", "torch", ".", "nn", ".", "functional", ".", "grid_sample", "(", "image", ",", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox_heads.convfc_bbox_head.ConvFCBBoxHead.__init__": [[14, 78], ["bbox_head.BBoxHead.__init__", "convfc_bbox_head.ConvFCBBoxHead._add_conv_fc_branch", "convfc_bbox_head.ConvFCBBoxHead._add_conv_fc_branch", "convfc_bbox_head.ConvFCBBoxHead._add_conv_fc_branch", "torch.ReLU", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.learning_schedules_fastai.FakeOptim.__init__", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox_heads.convfc_bbox_head.ConvFCBBoxHead._add_conv_fc_branch", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox_heads.convfc_bbox_head.ConvFCBBoxHead._add_conv_fc_branch", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox_heads.convfc_bbox_head.ConvFCBBoxHead._add_conv_fc_branch"], ["def", "__init__", "(", "self", ",", "\n", "num_shared_convs", "=", "0", ",", "\n", "num_shared_fcs", "=", "0", ",", "\n", "num_cls_convs", "=", "0", ",", "\n", "num_cls_fcs", "=", "0", ",", "\n", "num_reg_convs", "=", "0", ",", "\n", "num_reg_fcs", "=", "0", ",", "\n", "conv_out_channels", "=", "256", ",", "\n", "fc_out_channels", "=", "1024", ",", "\n", "normalize", "=", "None", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ConvFCBBoxHead", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "assert", "(", "num_shared_convs", "+", "num_shared_fcs", "+", "num_cls_convs", "+", "num_cls_fcs", "\n", "+", "num_reg_convs", "+", "num_reg_fcs", ">", "0", ")", "\n", "if", "num_cls_convs", ">", "0", "or", "num_reg_convs", ">", "0", ":", "\n", "            ", "assert", "num_shared_fcs", "==", "0", "\n", "", "if", "not", "self", ".", "with_cls", ":", "\n", "            ", "assert", "num_cls_convs", "==", "0", "and", "num_cls_fcs", "==", "0", "\n", "", "if", "not", "self", ".", "with_reg", ":", "\n", "            ", "assert", "num_reg_convs", "==", "0", "and", "num_reg_fcs", "==", "0", "\n", "\n", "", "self", ".", "num_shared_convs", "=", "num_shared_convs", "\n", "self", ".", "num_shared_fcs", "=", "num_shared_fcs", "\n", "self", ".", "num_cls_convs", "=", "num_cls_convs", "\n", "self", ".", "num_cls_fcs", "=", "num_cls_fcs", "\n", "self", ".", "num_reg_convs", "=", "num_reg_convs", "\n", "self", ".", "num_reg_fcs", "=", "num_reg_fcs", "\n", "self", ".", "conv_out_channels", "=", "conv_out_channels", "\n", "self", ".", "fc_out_channels", "=", "fc_out_channels", "\n", "self", ".", "normalize", "=", "normalize", "\n", "self", ".", "with_bias", "=", "normalize", "is", "None", "\n", "# add shared convs and fcs", "\n", "self", ".", "shared_convs", ",", "self", ".", "shared_fcs", ",", "last_layer_dim", "=", "self", ".", "_add_conv_fc_branch", "(", "\n", "self", ".", "num_shared_convs", ",", "self", ".", "num_shared_fcs", ",", "self", ".", "in_channels", ",", "\n", "True", ")", "\n", "\n", "self", ".", "shared_out_channels", "=", "last_layer_dim", "\n", "\n", "# add cls specific branch", "\n", "self", ".", "cls_convs", ",", "self", ".", "cls_fcs", ",", "self", ".", "cls_last_dim", "=", "self", ".", "_add_conv_fc_branch", "(", "\n", "self", ".", "num_cls_convs", ",", "self", ".", "num_cls_fcs", ",", "self", ".", "shared_out_channels", ")", "\n", "\n", "# add reg specific branch", "\n", "self", ".", "reg_convs", ",", "self", ".", "reg_fcs", ",", "self", ".", "reg_last_dim", "=", "self", ".", "_add_conv_fc_branch", "(", "\n", "self", ".", "num_reg_convs", ",", "self", ".", "num_reg_fcs", ",", "self", ".", "shared_out_channels", ")", "\n", "\n", "if", "self", ".", "num_shared_fcs", "==", "0", "and", "not", "self", ".", "with_avg_pool", ":", "\n", "            ", "if", "self", ".", "num_cls_fcs", "==", "0", ":", "\n", "                ", "self", ".", "cls_last_dim", "*=", "(", "self", ".", "roi_feat_size", "*", "self", ".", "roi_feat_size", ")", "\n", "", "if", "self", ".", "num_reg_fcs", "==", "0", ":", "\n", "                ", "self", ".", "reg_last_dim", "*=", "(", "self", ".", "roi_feat_size", "*", "self", ".", "roi_feat_size", ")", "\n", "\n", "", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "# reconstruct fc_cls and fc_reg since input channels are changed", "\n", "if", "self", ".", "with_cls", ":", "\n", "            ", "self", ".", "fc_cls", "=", "nn", ".", "Linear", "(", "self", ".", "cls_last_dim", ",", "self", ".", "num_classes", ")", "\n", "", "if", "self", ".", "with_reg", ":", "\n", "            ", "out_dim_reg", "=", "(", "7", "if", "self", ".", "reg_class_agnostic", "else", "\n", "7", "*", "self", ".", "num_classes", ")", "\n", "self", ".", "fc_reg", "=", "nn", ".", "Linear", "(", "self", ".", "reg_last_dim", ",", "out_dim_reg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox_heads.convfc_bbox_head.ConvFCBBoxHead._add_conv_fc_branch": [[79, 119], ["torch.ModuleList", "torch.ModuleList", "range", "range", "torch.ModuleList.append", "torch.ModuleList.append", "utils.ConvModule", "torch.Linear"], "methods", ["None"], ["", "", "def", "_add_conv_fc_branch", "(", "self", ",", "\n", "num_branch_convs", ",", "\n", "num_branch_fcs", ",", "\n", "in_channels", ",", "\n", "is_shared", "=", "False", ")", ":", "\n", "        ", "\"\"\"Add shared or separable branch\n\n        convs -> avg pool (optional) -> fcs\n        \"\"\"", "\n", "last_layer_dim", "=", "in_channels", "\n", "# add branch specific conv layers", "\n", "branch_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "if", "num_branch_convs", ">", "0", ":", "\n", "            ", "for", "i", "in", "range", "(", "num_branch_convs", ")", ":", "\n", "                ", "conv_in_channels", "=", "(", "last_layer_dim", "\n", "if", "i", "==", "0", "else", "self", ".", "conv_out_channels", ")", "\n", "branch_convs", ".", "append", "(", "\n", "ConvModule", "(", "\n", "conv_in_channels", ",", "\n", "self", ".", "conv_out_channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "normalize", "=", "self", ".", "normalize", ",", "\n", "bias", "=", "self", ".", "with_bias", ")", ")", "\n", "", "last_layer_dim", "=", "self", ".", "conv_out_channels", "\n", "# add branch specific fc layers", "\n", "", "branch_fcs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "if", "num_branch_fcs", ">", "0", ":", "\n", "# for shared branch, only consider self.with_avg_pool", "\n", "# for separated branches, also consider self.num_shared_fcs", "\n", "            ", "if", "(", "is_shared", "\n", "or", "self", ".", "num_shared_fcs", "==", "0", ")", "and", "not", "self", ".", "with_avg_pool", ":", "\n", "                ", "last_layer_dim", "*=", "(", "self", ".", "roi_feat_size", "*", "self", ".", "roi_feat_size", ")", "\n", "", "for", "i", "in", "range", "(", "num_branch_fcs", ")", ":", "\n", "                ", "fc_in_channels", "=", "(", "last_layer_dim", "\n", "if", "i", "==", "0", "else", "self", ".", "fc_out_channels", ")", "\n", "branch_fcs", ".", "append", "(", "\n", "nn", ".", "Linear", "(", "fc_in_channels", ",", "self", ".", "fc_out_channels", ")", ")", "\n", "", "last_layer_dim", "=", "self", ".", "fc_out_channels", "\n", "", "return", "branch_convs", ",", "branch_fcs", ",", "last_layer_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox_heads.convfc_bbox_head.ConvFCBBoxHead.init_weights": [[120, 127], ["super().init_weights", "module_list.modules", "isinstance", "torch.init.xavier_uniform_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.roi_extractors.single_level.SingleRoIExtractor.init_weights"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "super", "(", "ConvFCBBoxHead", ",", "self", ")", ".", "init_weights", "(", ")", "\n", "for", "module_list", "in", "[", "self", ".", "shared_fcs", ",", "self", ".", "cls_fcs", ",", "self", ".", "reg_fcs", "]", ":", "\n", "            ", "for", "m", "in", "module_list", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox_heads.convfc_bbox_head.ConvFCBBoxHead.forward": [[128, 166], ["convfc_bbox_head.ConvFCBBoxHead.view", "conv", "convfc_bbox_head.ConvFCBBoxHead.dim", "convfc_bbox_head.ConvFCBBoxHead.view", "convfc_bbox_head.ConvFCBBoxHead.relu", "conv", "convfc_bbox_head.ConvFCBBoxHead.dim", "convfc_bbox_head.ConvFCBBoxHead.view", "convfc_bbox_head.ConvFCBBoxHead.relu", "convfc_bbox_head.ConvFCBBoxHead.fc_cls", "convfc_bbox_head.ConvFCBBoxHead.fc_reg", "conv", "convfc_bbox_head.ConvFCBBoxHead.avg_pool", "convfc_bbox_head.ConvFCBBoxHead.size", "convfc_bbox_head.ConvFCBBoxHead.relu", "convfc_bbox_head.ConvFCBBoxHead.avg_pool", "convfc_bbox_head.ConvFCBBoxHead.size", "fc", "convfc_bbox_head.ConvFCBBoxHead.avg_pool", "convfc_bbox_head.ConvFCBBoxHead.size", "fc", "fc"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# shared part", "\n", "        ", "if", "self", ".", "num_shared_convs", ">", "0", ":", "\n", "            ", "for", "conv", "in", "self", ".", "shared_convs", ":", "\n", "                ", "x", "=", "conv", "(", "x", ")", "\n", "\n", "", "", "if", "self", ".", "num_shared_fcs", ">", "0", ":", "\n", "            ", "if", "self", ".", "with_avg_pool", ":", "\n", "                ", "x", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "for", "fc", "in", "self", ".", "shared_fcs", ":", "\n", "                ", "x", "=", "self", ".", "relu", "(", "fc", "(", "x", ")", ")", "\n", "\n", "# separate branches", "\n", "", "", "x_cls", "=", "x", "\n", "x_reg", "=", "x", "\n", "\n", "for", "conv", "in", "self", ".", "cls_convs", ":", "\n", "            ", "x_cls", "=", "conv", "(", "x_cls", ")", "\n", "", "if", "x_cls", ".", "dim", "(", ")", ">", "2", ":", "\n", "            ", "if", "self", ".", "with_avg_pool", ":", "\n", "                ", "x_cls", "=", "self", ".", "avg_pool", "(", "x_cls", ")", "\n", "", "x_cls", "=", "x_cls", ".", "view", "(", "x_cls", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "", "for", "fc", "in", "self", ".", "cls_fcs", ":", "\n", "            ", "x_cls", "=", "self", ".", "relu", "(", "fc", "(", "x_cls", ")", ")", "\n", "\n", "", "for", "conv", "in", "self", ".", "reg_convs", ":", "\n", "            ", "x_reg", "=", "conv", "(", "x_reg", ")", "\n", "", "if", "x_reg", ".", "dim", "(", ")", ">", "2", ":", "\n", "            ", "if", "self", ".", "with_avg_pool", ":", "\n", "                ", "x_reg", "=", "self", ".", "avg_pool", "(", "x_reg", ")", "\n", "", "x_reg", "=", "x_reg", ".", "view", "(", "x_reg", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "", "for", "fc", "in", "self", ".", "reg_fcs", ":", "\n", "            ", "x_reg", "=", "self", ".", "relu", "(", "fc", "(", "x_reg", ")", ")", "\n", "\n", "", "cls_score", "=", "self", ".", "fc_cls", "(", "x_cls", ")", "if", "self", ".", "with_cls", "else", "None", "\n", "bbox_pred", "=", "self", ".", "fc_reg", "(", "x_reg", ")", "if", "self", ".", "with_reg", "else", "None", "\n", "return", "cls_score", ",", "bbox_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox_heads.convfc_bbox_head.SharedFCBBoxHead.__init__": [[170, 194], ["bbox_head.BBoxHead.__init__", "isinstance", "torch.Linear", "torch.ReLU", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", "=", "256", ",", "\n", "fc_out_channels", "=", "1024", ",", "\n", "roi_feat_size", "=", "(", "7", ",", "7", ")", ",", "\n", "num_classes", "=", "1", ",", "\n", "reg_dim", "=", "7", ",", "\n", "reg_class_agnostic", "=", "True", ")", ":", "\n", "\n", "        ", "super", "(", "SharedFCBBoxHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "reg_class_agnostic", "=", "reg_class_agnostic", "\n", "if", "isinstance", "(", "roi_feat_size", ",", "tuple", ")", ":", "\n", "            ", "fc_in_channels", "=", "in_channels", "*", "roi_feat_size", "[", "0", "]", "*", "roi_feat_size", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "fc_in_channels", "=", "in_channels", "*", "roi_feat_size", "*", "roi_feat_size", "\n", "\n", "", "self", ".", "shared_fc", "=", "nn", ".", "Linear", "(", "fc_in_channels", ",", "fc_out_channels", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "# reconstruct fc_cls and fc_reg since input channels are changed", "\n", "if", "self", ".", "with_cls", ":", "\n", "            ", "self", ".", "fc_cls", "=", "nn", ".", "Linear", "(", "fc_out_channels", ",", "self", ".", "num_classes", ")", "\n", "", "if", "self", ".", "with_reg", ":", "\n", "            ", "out_dim_reg", "=", "(", "reg_dim", "if", "self", ".", "reg_class_agnostic", "else", "\n", "reg_dim", "*", "self", ".", "num_classes", ")", "\n", "self", ".", "fc_reg", "=", "nn", ".", "Linear", "(", "fc_out_channels", ",", "out_dim_reg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox_heads.convfc_bbox_head.SharedFCBBoxHead.forward": [[195, 201], ["convfc_bbox_head.SharedFCBBoxHead.view", "convfc_bbox_head.SharedFCBBoxHead.relu", "convfc_bbox_head.SharedFCBBoxHead.fc_cls", "convfc_bbox_head.SharedFCBBoxHead.fc_reg", "convfc_bbox_head.SharedFCBBoxHead.size", "convfc_bbox_head.SharedFCBBoxHead.shared_fc"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "relu", "(", "self", ".", "shared_fc", "(", "x", ")", ")", "\n", "cls_score", "=", "self", ".", "fc_cls", "(", "x", ")", "\n", "bbox_pred", "=", "self", ".", "fc_reg", "(", "x", ")", "\n", "return", "cls_score", ",", "bbox_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox_heads.bbox_head.BBoxHead.__init__": [[13, 47], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["def", "__init__", "(", "self", ",", "\n", "with_avg_pool", "=", "False", ",", "\n", "with_cls", "=", "True", ",", "\n", "with_reg", "=", "True", ",", "\n", "roi_feat_size", "=", "7", ",", "\n", "in_channels", "=", "256", ",", "\n", "num_classes", "=", "81", ",", "\n", "target_means", "=", "[", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "target_stds", "=", "[", "0.1", ",", "0.1", ",", "0.2", ",", "0.2", "]", ",", "\n", "reg_class_agnostic", "=", "False", ")", ":", "\n", "        ", "super", "(", "BBoxHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "with_cls", "or", "with_reg", "\n", "self", ".", "with_avg_pool", "=", "with_avg_pool", "\n", "self", ".", "with_cls", "=", "with_cls", "\n", "self", ".", "with_reg", "=", "with_reg", "\n", "self", ".", "roi_feat_size", "=", "roi_feat_size", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "target_means", "=", "target_means", "\n", "self", ".", "target_stds", "=", "target_stds", "\n", "self", ".", "reg_class_agnostic", "=", "reg_class_agnostic", "\n", "\n", "in_channels", "=", "self", ".", "in_channels", "\n", "if", "self", ".", "with_avg_pool", ":", "\n", "            ", "self", ".", "avg_pool", "=", "nn", ".", "AvgPool2d", "(", "roi_feat_size", ")", "\n", "", "else", ":", "\n", "            ", "in_channels", "*=", "(", "self", ".", "roi_feat_size", "*", "self", ".", "roi_feat_size", ")", "\n", "", "if", "self", ".", "with_cls", ":", "\n", "            ", "self", ".", "fc_cls", "=", "nn", ".", "Linear", "(", "in_channels", ",", "num_classes", ")", "\n", "", "if", "self", ".", "with_reg", ":", "\n", "            ", "out_dim_reg", "=", "7", "if", "reg_class_agnostic", "else", "7", "*", "num_classes", "\n", "self", ".", "fc_reg", "=", "nn", ".", "Linear", "(", "in_channels", ",", "out_dim_reg", ")", "\n", "", "self", ".", "debug_imgs", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox_heads.bbox_head.BBoxHead.init_weights": [[48, 55], ["torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "with_cls", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "self", ".", "fc_cls", ".", "weight", ",", "0", ",", "0.01", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "fc_cls", ".", "bias", ",", "0", ")", "\n", "", "if", "self", ".", "with_reg", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "self", ".", "fc_reg", ".", "weight", ",", "0", ",", "0.001", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "fc_reg", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox_heads.bbox_head.BBoxHead.forward": [[56, 63], ["bbox_head.BBoxHead.view", "bbox_head.BBoxHead.avg_pool", "bbox_head.BBoxHead.size", "bbox_head.BBoxHead.fc_cls", "bbox_head.BBoxHead.fc_reg"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "with_avg_pool", ":", "\n", "            ", "x", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "cls_score", "=", "self", ".", "fc_cls", "(", "x", ")", "if", "self", ".", "with_cls", "else", "None", "\n", "bbox_pred", "=", "self", ".", "fc_reg", "(", "x", ")", "if", "self", ".", "with_reg", "else", "None", "\n", "return", "cls_score", ",", "bbox_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox_heads.bbox_head.BBoxHead.get_target": [[64, 81], ["mmdet.core.bbox_target", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.bbox_target.bbox_target"], ["", "def", "get_target", "(", "self", ",", "sampling_results", ",", "rcnn_train_cfg", ")", ":", "\n", "        ", "pos_proposals", "=", "[", "res", ".", "pos_bboxes", "for", "res", "in", "sampling_results", "]", "\n", "neg_proposals", "=", "[", "res", ".", "neg_bboxes", "for", "res", "in", "sampling_results", "]", "\n", "pos_gt_bboxes", "=", "[", "res", ".", "pos_gt_bboxes", "for", "res", "in", "sampling_results", "]", "\n", "pos_gt_labels", "=", "[", "res", ".", "pos_gt_labels", "for", "res", "in", "sampling_results", "]", "\n", "reg_classes", "=", "1", "if", "self", ".", "reg_class_agnostic", "else", "self", ".", "num_classes", "\n", "cls_reg_targets", "=", "bbox_target", "(", "\n", "pos_proposals", ",", "\n", "neg_proposals", ",", "\n", "pos_gt_bboxes", ",", "\n", "pos_gt_labels", ",", "\n", "rcnn_train_cfg", ",", "\n", "reg_classes", ",", "\n", "target_means", "=", "self", ".", "target_means", ",", "\n", "target_stds", "=", "self", ".", "target_stds", ")", "\n", "iou_targets", "=", "torch", ".", "cat", "(", "[", "res", ".", "overs", "for", "res", "in", "sampling_results", "]", ")", "\n", "return", "cls_reg_targets", "+", "(", "iou_targets", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox_heads.bbox_head.BBoxHead.loss": [[82, 101], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "dict", "labels.float", "mmdet.core.weighted_binary_cross_entropy", "mmdet.core.add_sin_difference", "mmdet.core.weighted_smoothl1", "cls_score.view", "bbox_targets.size"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.loss.losses.weighted_binary_cross_entropy", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.transforms.add_sin_difference", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.loss.losses.weighted_smoothl1"], ["", "def", "loss", "(", "self", ",", "cls_score", ",", "bbox_pred", ",", "labels", ",", "label_weights", ",", "bbox_targets", ",", "\n", "bbox_weights", ",", "iou_targets", ")", ":", "\n", "        ", "soft_label", "=", "torch", ".", "clamp", "(", "2", "*", "iou_targets", "-", "0.5", ",", "0", ",", "1", ")", "\n", "labels", "=", "soft_label", "*", "labels", ".", "float", "(", ")", "\n", "\n", "losses", "=", "dict", "(", ")", "\n", "if", "cls_score", "is", "not", "None", ":", "\n", "            ", "losses", "[", "'loss_cls'", "]", "=", "weighted_binary_cross_entropy", "(", "\n", "cls_score", ".", "view", "(", "-", "1", ")", ",", "labels", ",", "label_weights", ")", "\n", "\n", "", "if", "bbox_pred", "is", "not", "None", ":", "\n", "            ", "bbox_pred", ",", "bbox_targets", "=", "add_sin_difference", "(", "bbox_pred", ",", "bbox_targets", ")", "\n", "losses", "[", "'loss_reg'", "]", "=", "weighted_smoothl1", "(", "\n", "bbox_pred", ",", "\n", "bbox_targets", ",", "\n", "bbox_weights", ",", "\n", "avg_factor", "=", "bbox_targets", ".", "size", "(", "0", ")", ")", "\n", "\n", "", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox_heads.bbox_head.BBoxHead.get_det_bboxes": [[102, 148], ["list", "list", "range", "len", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "mmdet.ops.iou3d.iou3d_utils.boxes3d_to_bev_torch", "mmdet.core.post_processing.bbox_nms.rotate_nms_torch", "list.append", "list.append", "torch.sigmoid().view.numel", "torch.sigmoid().view.numel", "list.append", "list.append", "mmdet.core.delta2rbbox3d", "mmdet.core.delta2rbbox3d.detach().cpu().numpy", "torch.sigmoid().view.detach().cpu().numpy", "torch.sigmoid().view.detach().cpu().numpy", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "mmdet.core.delta2rbbox3d.detach().cpu", "torch.sigmoid().view.detach().cpu", "torch.sigmoid().view.detach().cpu", "mmdet.core.delta2rbbox3d.detach", "torch.sigmoid().view.detach", "torch.sigmoid().view.detach"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.iou3d.iou3d_utils.boxes3d_to_bev_torch", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.bbox_nms.rotate_nms_torch", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.transforms.delta2rbbox3d"], ["", "def", "get_det_bboxes", "(", "self", ",", "\n", "rois", ",", "\n", "cls_scores", ",", "\n", "bbox_preds", ",", "\n", "img_metas", ",", "\n", "cfg", ")", ":", "\n", "\n", "        ", "det_bboxes", "=", "list", "(", ")", "\n", "det_scores", "=", "list", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "img_metas", ")", ")", ":", "\n", "            ", "inds", "=", "torch", ".", "nonzero", "(", "rois", "[", ":", ",", "0", "]", "==", "i", ")", ".", "squeeze", "(", ")", "\n", "roi", "=", "rois", "[", "inds", ",", "1", ":", "]", "\n", "scores", "=", "cls_scores", "[", "inds", ",", ":", "]", "\n", "\n", "if", "bbox_preds", "is", "not", "None", ":", "\n", "                ", "bbox_pred", "=", "bbox_preds", "[", "inds", ",", ":", "]", "\n", "", "else", ":", "\n", "                ", "bbox_pred", "=", "roi", "\n", "\n", "", "scores", "=", "torch", ".", "sigmoid", "(", "scores", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "select", "=", "scores", ">", "cfg", ".", "score_thr", "\n", "bbox_pred", "=", "bbox_pred", "[", "select", ",", ":", "]", "\n", "roi", "=", "roi", "[", "select", ",", ":", "]", "\n", "scores", "=", "scores", "[", "select", "]", "\n", "\n", "if", "scores", ".", "numel", "(", ")", "==", "0", ":", "\n", "                ", "det_bboxes", ".", "append", "(", "bbox_pred", ")", "\n", "det_scores", ".", "append", "(", "scores", ")", "\n", "continue", "\n", "\n", "", "if", "bbox_preds", "is", "not", "None", ":", "\n", "                ", "bbox_pred", "=", "delta2rbbox3d", "(", "roi", ",", "bbox_pred", ",", "self", ".", "target_means", ",", "\n", "self", ".", "target_stds", ")", "\n", "\n", "", "boxes_for_nms", "=", "boxes3d_to_bev_torch", "(", "bbox_pred", ")", "\n", "keep", "=", "rotate_nms_torch", "(", "boxes_for_nms", ",", "scores", ",", "iou_threshold", "=", "cfg", ".", "nms", ".", "iou_thr", ")", "\n", "\n", "bbox_pred", "=", "bbox_pred", "[", "keep", ",", ":", "]", "\n", "scores", "=", "scores", "[", "keep", "]", "\n", "\n", "det_bboxes", ".", "append", "(", "bbox_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "det_scores", ".", "append", "(", "scores", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "return", "det_bboxes", ",", "det_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox_heads.bbox_head.BBoxHead.refine_bboxes": [[149, 183], ["range", "len", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze.numel", "torch.nonzero().squeeze.numel", "mmdet.core.delta2rbbox3d", "pos_is_gts_.new_ones", "bboxes_list.append", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "len"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.transforms.delta2rbbox3d"], ["", "def", "refine_bboxes", "(", "self", ",", "rois", ",", "labels", ",", "bbox_preds", ",", "pos_is_gts", ",", "img_metas", ")", ":", "\n", "        ", "\"\"\"Refine bboxes during training.\n\n        Args:\n            rois (Tensor): Shape (n*bs, 5), where n is image number per GPU,\n                and bs is the sampled RoIs per image.\n            labels (Tensor): Shape (n*bs, ).\n            bbox_preds (Tensor): Shape (n*bs, 4) or (n*bs, 4*#class).\n            pos_is_gts (list[Tensor]): Flags indicating if each positive bbox\n                is a gt bbox.\n            img_metas (list[dict]): Meta info of each image.\n\n        Returns:\n            list[Tensor]: Refined bboxes of each image in a mini-batch.\n        \"\"\"", "\n", "\n", "bboxes_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "img_metas", ")", ")", ":", "\n", "            ", "inds", "=", "torch", ".", "nonzero", "(", "rois", "[", ":", ",", "0", "]", "==", "i", ")", ".", "squeeze", "(", ")", "\n", "num_rois", "=", "inds", ".", "numel", "(", ")", "\n", "bboxes_", "=", "rois", "[", "inds", ",", "1", ":", "]", "\n", "\n", "bbox_pred_", "=", "bbox_preds", "[", "inds", "]", "\n", "pos_is_gts_", "=", "pos_is_gts", "[", "i", "]", "\n", "\n", "bboxes", "=", "delta2rbbox3d", "(", "bboxes_", ",", "bbox_pred_", ",", "self", ".", "target_means", ",", "self", ".", "target_stds", ")", "\n", "# filter gt bboxes", "\n", "pos_keep", "=", "1", "-", "pos_is_gts_", "\n", "keep_inds", "=", "pos_is_gts_", ".", "new_ones", "(", "num_rois", ")", "\n", "keep_inds", "[", ":", "len", "(", "pos_is_gts_", ")", "]", "=", "pos_keep", "\n", "\n", "bboxes_list", ".", "append", "(", "bboxes", "[", "keep_inds", "]", ")", "\n", "\n", "", "return", "bboxes_list", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.roi_extractors.single_level.SingleRoIExtractor.__init__": [[21, 31], ["torch.Module.__init__", "single_level.SingleRoIExtractor.build_roi_layers"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.learning_schedules_fastai.FakeOptim.__init__", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.roi_extractors.single_level.SingleRoIExtractor.build_roi_layers"], ["def", "__init__", "(", "self", ",", "\n", "roi_layer", ",", "\n", "out_channels", ",", "\n", "featmap_strides", ",", "\n", "finest_scale", "=", "56", ")", ":", "\n", "        ", "super", "(", "SingleRoIExtractor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "roi_layers", "=", "self", ".", "build_roi_layers", "(", "roi_layer", ",", "featmap_strides", ")", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "featmap_strides", "=", "featmap_strides", "\n", "self", ".", "finest_scale", "=", "finest_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.roi_extractors.single_level.SingleRoIExtractor.num_inputs": [[32, 36], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_inputs", "(", "self", ")", ":", "\n", "        ", "\"\"\"int: Input feature map levels.\"\"\"", "\n", "return", "len", "(", "self", ".", "featmap_strides", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.roi_extractors.single_level.SingleRoIExtractor.init_weights": [[37, 39], ["None"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.roi_extractors.single_level.SingleRoIExtractor.build_roi_layers": [[40, 48], ["layer_cfg.copy", "layer_cfg.copy.pop", "hasattr", "getattr", "torch.ModuleList", "torch.ModuleList", "getattr."], "methods", ["None"], ["", "def", "build_roi_layers", "(", "self", ",", "layer_cfg", ",", "featmap_strides", ")", ":", "\n", "        ", "cfg", "=", "layer_cfg", ".", "copy", "(", ")", "\n", "layer_type", "=", "cfg", ".", "pop", "(", "'type'", ")", "\n", "assert", "hasattr", "(", "ops", ",", "layer_type", ")", "\n", "layer_cls", "=", "getattr", "(", "ops", ",", "layer_type", ")", "\n", "roi_layers", "=", "nn", ".", "ModuleList", "(", "\n", "[", "layer_cls", "(", "spatial_scale", "=", "1", "/", "s", ",", "**", "cfg", ")", "for", "s", "in", "featmap_strides", "]", ")", "\n", "return", "roi_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.roi_extractors.single_level.SingleRoIExtractor.map_roi_levels": [[49, 69], ["torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "target_lvls.clamp().long.clamp().long.clamp().long", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "target_lvls.clamp().long.clamp().long.clamp"], "methods", ["None"], ["", "def", "map_roi_levels", "(", "self", ",", "rois", ",", "num_levels", ")", ":", "\n", "        ", "\"\"\"Map rois to corresponding feature levels by scales.\n\n        - scale < finest_scale: level 0\n        - finest_scale <= scale < finest_scale * 2: level 1\n        - finest_scale * 2 <= scale < finest_scale * 4: level 2\n        - scale >= finest_scale * 4: level 3\n\n        Args:\n            rois (Tensor): Input RoIs, shape (k, 5).\n            num_levels (int): Total level number.\n\n        Returns:\n            Tensor: Level index (0-based) of each RoI, shape (k, )\n        \"\"\"", "\n", "scale", "=", "torch", ".", "sqrt", "(", "\n", "(", "rois", "[", ":", ",", "3", "]", "-", "rois", "[", ":", ",", "1", "]", "+", "1", ")", "*", "(", "rois", "[", ":", ",", "4", "]", "-", "rois", "[", ":", ",", "2", "]", "+", "1", ")", ")", "\n", "target_lvls", "=", "torch", ".", "floor", "(", "torch", ".", "log2", "(", "scale", "/", "self", ".", "finest_scale", "+", "1e-6", ")", ")", "\n", "target_lvls", "=", "target_lvls", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "num_levels", "-", "1", ")", ".", "long", "(", ")", "\n", "return", "target_lvls", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.roi_extractors.single_level.SingleRoIExtractor.forward": [[70, 86], ["len", "single_level.SingleRoIExtractor.map_roi_levels", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "range", "len", "inds.any", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "rois.size"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.roi_extractors.single_level.SingleRoIExtractor.map_roi_levels"], ["", "def", "forward", "(", "self", ",", "feats", ",", "rois", ")", ":", "\n", "        ", "if", "len", "(", "feats", ")", "==", "1", ":", "\n", "            ", "return", "self", ".", "roi_layers", "[", "0", "]", "(", "feats", "[", "0", "]", ",", "rois", ")", "\n", "\n", "", "out_size", "=", "self", ".", "roi_layers", "[", "0", "]", ".", "out_size", "\n", "num_levels", "=", "len", "(", "feats", ")", "\n", "target_lvls", "=", "self", ".", "map_roi_levels", "(", "rois", ",", "num_levels", ")", "\n", "roi_feats", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "rois", ".", "size", "(", ")", "[", "0", "]", ",", "self", ".", "out_channels", ",", "\n", "out_size", ",", "out_size", ")", ".", "fill_", "(", "0", ")", "\n", "for", "i", "in", "range", "(", "num_levels", ")", ":", "\n", "            ", "inds", "=", "target_lvls", "==", "i", "\n", "if", "inds", ".", "any", "(", ")", ":", "\n", "                ", "rois_", "=", "rois", "[", "inds", ",", ":", "]", "\n", "roi_feats_t", "=", "self", ".", "roi_layers", "[", "i", "]", "(", "feats", "[", "i", "]", ",", "rois_", ")", "\n", "roi_feats", "[", "inds", "]", "+=", "roi_feats_t", "\n", "", "", "return", "roi_feats", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.merge_augs.merge_aug_proposals": [[7, 37], ["zip", "torch.cat", "nms", "scores.sort", "min", "proposals.clone", "mmdet.core.bbox.transforms.bbox_mapping_back", "recovered_proposals.append"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.transforms.bbox_mapping_back"], ["def", "merge_aug_proposals", "(", "aug_proposals", ",", "img_metas", ",", "rpn_test_cfg", ")", ":", "\n", "    ", "\"\"\"Merge augmented proposals (multiscale, flip, etc.)\n\n    Args:\n        aug_proposals (list[Tensor]): proposals from different testing\n            schemes, shape (n, 5). Note that they are not rescaled to the\n            original image size.\n        img_metas (list[dict]): image info including \"shape_scale\" and \"flip\".\n        rpn_test_cfg (dict): rpn test config.\n\n    Returns:\n        Tensor: shape (n, 4), proposals corresponding to original image scale.\n    \"\"\"", "\n", "recovered_proposals", "=", "[", "]", "\n", "for", "proposals", ",", "img_info", "in", "zip", "(", "aug_proposals", ",", "img_metas", ")", ":", "\n", "        ", "img_shape", "=", "img_info", "[", "'img_shape'", "]", "\n", "scale_factor", "=", "img_info", "[", "'scale_factor'", "]", "\n", "flip", "=", "img_info", "[", "'flip'", "]", "\n", "_proposals", "=", "proposals", ".", "clone", "(", ")", "\n", "_proposals", "[", ":", ",", ":", "4", "]", "=", "bbox_mapping_back", "(", "_proposals", "[", ":", ",", ":", "4", "]", ",", "img_shape", ",", "\n", "scale_factor", ",", "flip", ")", "\n", "recovered_proposals", ".", "append", "(", "_proposals", ")", "\n", "", "aug_proposals", "=", "torch", ".", "cat", "(", "recovered_proposals", ",", "dim", "=", "0", ")", "\n", "merged_proposals", ",", "_", "=", "nms", "(", "aug_proposals", ",", "rpn_test_cfg", ".", "nms_thr", ")", "\n", "scores", "=", "merged_proposals", "[", ":", ",", "4", "]", "\n", "_", ",", "order", "=", "scores", ".", "sort", "(", "0", ",", "descending", "=", "True", ")", "\n", "num", "=", "min", "(", "rpn_test_cfg", ".", "max_num", ",", "merged_proposals", ".", "shape", "[", "0", "]", ")", "\n", "order", "=", "order", "[", ":", "num", "]", "\n", "merged_proposals", "=", "merged_proposals", "[", "order", ",", ":", "]", "\n", "return", "merged_proposals", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.merge_augs.merge_aug_bboxes": [[39, 64], ["zip", "torch.stack().mean", "mmdet.core.bbox.transforms.bbox_mapping_back", "recovered_bboxes.append", "torch.stack().mean", "torch.stack", "torch.stack"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.transforms.bbox_mapping_back"], ["", "def", "merge_aug_bboxes", "(", "aug_bboxes", ",", "aug_scores", ",", "img_metas", ",", "rcnn_test_cfg", ")", ":", "\n", "    ", "\"\"\"Merge augmented detection bboxes and scores.\n\n    Args:\n        aug_bboxes (list[Tensor]): shape (n, 4*#class)\n        aug_scores (list[Tensor] or None): shape (n, #class)\n        img_shapes (list[Tensor]): shape (3, ).\n        rcnn_test_cfg (dict): rcnn test config.\n\n    Returns:\n        tuple: (bboxes, scores)\n    \"\"\"", "\n", "recovered_bboxes", "=", "[", "]", "\n", "for", "bboxes", ",", "img_info", "in", "zip", "(", "aug_bboxes", ",", "img_metas", ")", ":", "\n", "        ", "img_shape", "=", "img_info", "[", "0", "]", "[", "'img_shape'", "]", "\n", "scale_factor", "=", "img_info", "[", "0", "]", "[", "'scale_factor'", "]", "\n", "flip", "=", "img_info", "[", "0", "]", "[", "'flip'", "]", "\n", "bboxes", "=", "bbox_mapping_back", "(", "bboxes", ",", "img_shape", ",", "scale_factor", ",", "flip", ")", "\n", "recovered_bboxes", ".", "append", "(", "bboxes", ")", "\n", "", "bboxes", "=", "torch", ".", "stack", "(", "recovered_bboxes", ")", ".", "mean", "(", "dim", "=", "0", ")", "\n", "if", "aug_scores", "is", "None", ":", "\n", "        ", "return", "bboxes", "\n", "", "else", ":", "\n", "        ", "scores", "=", "torch", ".", "stack", "(", "aug_scores", ")", ".", "mean", "(", "dim", "=", "0", ")", "\n", "return", "bboxes", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.merge_augs.merge_aug_scores": [[66, 72], ["isinstance", "torch.mean", "numpy.mean", "torch.stack"], "function", ["None"], ["", "", "def", "merge_aug_scores", "(", "aug_scores", ")", ":", "\n", "    ", "\"\"\"Merge augmented bbox scores.\"\"\"", "\n", "if", "isinstance", "(", "aug_scores", "[", "0", "]", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "aug_scores", ")", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "mean", "(", "aug_scores", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.merge_augs.merge_aug_masks": [[74, 95], ["numpy.mean", "numpy.average", "zip", "numpy.array", "numpy.array"], "function", ["None"], ["", "", "def", "merge_aug_masks", "(", "aug_masks", ",", "img_metas", ",", "rcnn_test_cfg", ",", "weights", "=", "None", ")", ":", "\n", "    ", "\"\"\"Merge augmented mask prediction.\n\n    Args:\n        aug_masks (list[ndarray]): shape (n, #class, h, w)\n        img_shapes (list[ndarray]): shape (3, ).\n        rcnn_test_cfg (dict): rcnn test config.\n\n    Returns:\n        tuple: (bboxes, scores)\n    \"\"\"", "\n", "recovered_masks", "=", "[", "\n", "mask", "if", "not", "img_info", "[", "0", "]", "[", "'flip'", "]", "else", "mask", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "for", "mask", ",", "img_info", "in", "zip", "(", "aug_masks", ",", "img_metas", ")", "\n", "]", "\n", "if", "weights", "is", "None", ":", "\n", "        ", "merged_masks", "=", "np", ".", "mean", "(", "recovered_masks", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "merged_masks", "=", "np", ".", "average", "(", "\n", "np", ".", "array", "(", "recovered_masks", ")", ",", "axis", "=", "0", ",", "weights", "=", "np", ".", "array", "(", "weights", ")", ")", "\n", "", "return", "merged_masks", "\n", "", ""]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.iou_device": [[8, 20], ["numba.cuda.jit", "max", "min", "max", "min", "max", "max"], "function", ["None"], ["@", "cuda", ".", "jit", "(", "'(float32[:], float32[:])'", ",", "device", "=", "True", ",", "inline", "=", "True", ")", "\n", "def", "iou_device", "(", "a", ",", "b", ")", ":", "\n", "    ", "left", "=", "max", "(", "a", "[", "0", "]", ",", "b", "[", "0", "]", ")", "\n", "right", "=", "min", "(", "a", "[", "2", "]", ",", "b", "[", "2", "]", ")", "\n", "top", "=", "max", "(", "a", "[", "1", "]", ",", "b", "[", "1", "]", ")", "\n", "bottom", "=", "min", "(", "a", "[", "3", "]", ",", "b", "[", "3", "]", ")", "\n", "width", "=", "max", "(", "right", "-", "left", "+", "1", ",", "0.", ")", "\n", "height", "=", "max", "(", "bottom", "-", "top", "+", "1", ",", "0.", ")", "\n", "interS", "=", "width", "*", "height", "\n", "Sa", "=", "(", "a", "[", "2", "]", "-", "a", "[", "0", "]", "+", "1", ")", "*", "(", "a", "[", "3", "]", "-", "a", "[", "1", "]", "+", "1", ")", "\n", "Sb", "=", "(", "b", "[", "2", "]", "-", "b", "[", "0", "]", "+", "1", ")", "*", "(", "b", "[", "3", "]", "-", "b", "[", "1", "]", "+", "1", ")", "\n", "return", "interS", "/", "(", "Sa", "+", "Sb", "-", "interS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.nms_kernel_v2": [[22, 55], ["numba.cuda.jit", "min", "min", "numba.cuda.shared.array", "numba.cuda.syncthreads", "range", "rotate_nms_gpu.iou_device"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.iou_device"], ["", "@", "cuda", ".", "jit", "(", "'(int64, float32, float32[:, :], uint64[:])'", ")", "\n", "def", "nms_kernel_v2", "(", "n_boxes", ",", "nms_overlap_thresh", ",", "dev_boxes", ",", "dev_mask", ")", ":", "\n", "    ", "threadsPerBlock", "=", "8", "*", "8", "\n", "row_start", "=", "cuda", ".", "blockIdx", ".", "y", "\n", "col_start", "=", "cuda", ".", "blockIdx", ".", "x", "\n", "tx", "=", "cuda", ".", "threadIdx", ".", "x", "\n", "row_size", "=", "min", "(", "n_boxes", "-", "row_start", "*", "threadsPerBlock", ",", "threadsPerBlock", ")", "\n", "col_size", "=", "min", "(", "n_boxes", "-", "col_start", "*", "threadsPerBlock", ",", "threadsPerBlock", ")", "\n", "block_boxes", "=", "cuda", ".", "shared", ".", "array", "(", "\n", "shape", "=", "(", "threadsPerBlock", ",", "5", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "dev_box_idx", "=", "threadsPerBlock", "*", "col_start", "+", "tx", "\n", "if", "(", "tx", "<", "col_size", ")", ":", "\n", "        ", "block_boxes", "[", "tx", ",", "0", "]", "=", "dev_boxes", "[", "dev_box_idx", ",", "0", "]", "\n", "block_boxes", "[", "tx", ",", "1", "]", "=", "dev_boxes", "[", "dev_box_idx", ",", "1", "]", "\n", "block_boxes", "[", "tx", ",", "2", "]", "=", "dev_boxes", "[", "dev_box_idx", ",", "2", "]", "\n", "block_boxes", "[", "tx", ",", "3", "]", "=", "dev_boxes", "[", "dev_box_idx", ",", "3", "]", "\n", "block_boxes", "[", "tx", ",", "4", "]", "=", "dev_boxes", "[", "dev_box_idx", ",", "4", "]", "\n", "", "cuda", ".", "syncthreads", "(", ")", "\n", "if", "(", "cuda", ".", "threadIdx", ".", "x", "<", "row_size", ")", ":", "\n", "        ", "cur_box_idx", "=", "threadsPerBlock", "*", "row_start", "+", "cuda", ".", "threadIdx", ".", "x", "\n", "# cur_box = dev_boxes + cur_box_idx * 5;", "\n", "i", "=", "0", "\n", "t", "=", "0", "\n", "start", "=", "0", "\n", "if", "(", "row_start", "==", "col_start", ")", ":", "\n", "            ", "start", "=", "tx", "+", "1", "\n", "", "for", "i", "in", "range", "(", "start", ",", "col_size", ")", ":", "\n", "            ", "if", "(", "iou_device", "(", "dev_boxes", "[", "cur_box_idx", "]", ",", "block_boxes", "[", "i", "]", ")", ">", "\n", "nms_overlap_thresh", ")", ":", "\n", "                ", "t", "|=", "1", "<<", "i", "\n", "", "", "col_blocks", "=", "(", "(", "n_boxes", ")", "//", "(", "threadsPerBlock", ")", "+", "(", "\n", "(", "n_boxes", ")", "%", "(", "threadsPerBlock", ")", ">", "0", ")", ")", "\n", "dev_mask", "[", "cur_box_idx", "*", "col_blocks", "+", "col_start", "]", "=", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.nms_kernel": [[57, 89], ["numba.cuda.jit", "min", "min", "numba.cuda.shared.array", "numba.cuda.syncthreads", "range", "rotate_nms_gpu.iou_device"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.iou_device"], ["", "", "@", "cuda", ".", "jit", "(", "'(int64, float32, float32[:], uint64[:])'", ")", "\n", "def", "nms_kernel", "(", "n_boxes", ",", "nms_overlap_thresh", ",", "dev_boxes", ",", "dev_mask", ")", ":", "\n", "    ", "threadsPerBlock", "=", "8", "*", "8", "\n", "row_start", "=", "cuda", ".", "blockIdx", ".", "y", "\n", "col_start", "=", "cuda", ".", "blockIdx", ".", "x", "\n", "tx", "=", "cuda", ".", "threadIdx", ".", "x", "\n", "row_size", "=", "min", "(", "n_boxes", "-", "row_start", "*", "threadsPerBlock", ",", "threadsPerBlock", ")", "\n", "col_size", "=", "min", "(", "n_boxes", "-", "col_start", "*", "threadsPerBlock", ",", "threadsPerBlock", ")", "\n", "block_boxes", "=", "cuda", ".", "shared", ".", "array", "(", "shape", "=", "(", "64", "*", "5", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "dev_box_idx", "=", "threadsPerBlock", "*", "col_start", "+", "tx", "\n", "if", "(", "tx", "<", "col_size", ")", ":", "\n", "        ", "block_boxes", "[", "tx", "*", "5", "+", "0", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "5", "+", "0", "]", "\n", "block_boxes", "[", "tx", "*", "5", "+", "1", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "5", "+", "1", "]", "\n", "block_boxes", "[", "tx", "*", "5", "+", "2", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "5", "+", "2", "]", "\n", "block_boxes", "[", "tx", "*", "5", "+", "3", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "5", "+", "3", "]", "\n", "block_boxes", "[", "tx", "*", "5", "+", "4", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "5", "+", "4", "]", "\n", "", "cuda", ".", "syncthreads", "(", ")", "\n", "if", "(", "tx", "<", "row_size", ")", ":", "\n", "        ", "cur_box_idx", "=", "threadsPerBlock", "*", "row_start", "+", "tx", "\n", "# cur_box = dev_boxes + cur_box_idx * 5;", "\n", "t", "=", "0", "\n", "start", "=", "0", "\n", "if", "(", "row_start", "==", "col_start", ")", ":", "\n", "            ", "start", "=", "tx", "+", "1", "\n", "", "for", "i", "in", "range", "(", "start", ",", "col_size", ")", ":", "\n", "            ", "iou", "=", "iou_device", "(", "dev_boxes", "[", "cur_box_idx", "*", "5", ":", "cur_box_idx", "*", "5", "+", "4", "]", ",", "\n", "block_boxes", "[", "i", "*", "5", ":", "i", "*", "5", "+", "4", "]", ")", "\n", "if", "(", "iou", ">", "nms_overlap_thresh", ")", ":", "\n", "                ", "t", "|=", "1", "<<", "i", "\n", "", "", "col_blocks", "=", "(", "(", "n_boxes", ")", "//", "(", "threadsPerBlock", ")", "+", "(", "\n", "(", "n_boxes", ")", "%", "(", "threadsPerBlock", ")", ">", "0", ")", ")", "\n", "dev_mask", "[", "cur_box_idx", "*", "col_blocks", "+", "col_start", "]", "=", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.div_up": [[91, 94], ["numba.jit"], "function", ["None"], ["", "", "@", "numba", ".", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "div_up", "(", "m", ",", "n", ")", ":", "\n", "    ", "return", "m", "//", "n", "+", "(", "m", "%", "n", ">", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.nms_postprocess": [[96, 114], ["numba.jit", "rotate_nms_gpu.div_up", "numpy.zeros", "range", "numpy.array", "range"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.div_up"], ["", "@", "numba", ".", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "nms_postprocess", "(", "keep_out", ",", "mask_host", ",", "boxes_num", ")", ":", "\n", "    ", "threadsPerBlock", "=", "8", "*", "8", "\n", "col_blocks", "=", "div_up", "(", "boxes_num", ",", "threadsPerBlock", ")", "\n", "remv", "=", "np", ".", "zeros", "(", "(", "col_blocks", ")", ",", "dtype", "=", "np", ".", "uint64", ")", "\n", "num_to_keep", "=", "0", "\n", "for", "i", "in", "range", "(", "boxes_num", ")", ":", "\n", "        ", "nblock", "=", "i", "//", "threadsPerBlock", "\n", "inblock", "=", "i", "%", "threadsPerBlock", "\n", "mask", "=", "np", ".", "array", "(", "1", "<<", "inblock", ",", "dtype", "=", "np", ".", "uint64", ")", "\n", "if", "not", "(", "remv", "[", "nblock", "]", "&", "mask", ")", ":", "\n", "            ", "keep_out", "[", "num_to_keep", "]", "=", "i", "\n", "num_to_keep", "+=", "1", "\n", "# unsigned long long *p = &mask_host[0] + i * col_blocks;", "\n", "for", "j", "in", "range", "(", "nblock", ",", "col_blocks", ")", ":", "\n", "                ", "remv", "[", "j", "]", "|=", "mask_host", "[", "i", "*", "col_blocks", "+", "j", "]", "\n", "# remv[j] |= p[j];", "\n", "", "", "", "return", "num_to_keep", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.nms_gpu": [[116, 151], ["numpy.zeros", "[].astype", "rotate_nms_gpu.div_up", "numba.cuda.select_device", "numpy.zeros", "numba.cuda.stream", "rotate_nms_gpu.nms_postprocess", "list", "rotate_nms_gpu.div_up", "rotate_nms_gpu.div_up", "cuda.stream.auto_synchronize", "numba.cuda.to_device", "numba.cuda.to_device", "cuda.to_device.copy_to_host", "boxes_host.reshape", "scores.argsort"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.div_up", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.nms_postprocess", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.div_up", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.div_up"], ["", "def", "nms_gpu", "(", "dets", ",", "nms_overlap_thresh", ",", "device_id", "=", "0", ")", ":", "\n", "    ", "\"\"\"nms in gpu. \n    \n    Args:\n        dets ([type]): [description]\n        nms_overlap_thresh ([type]): [description]\n        device_id ([type], optional): Defaults to 0. [description]\n    \n    Returns:\n        [type]: [description]\n    \"\"\"", "\n", "\n", "boxes_num", "=", "dets", ".", "shape", "[", "0", "]", "\n", "keep_out", "=", "np", ".", "zeros", "(", "[", "boxes_num", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "scores", "=", "dets", "[", ":", ",", "4", "]", "\n", "order", "=", "scores", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", ".", "astype", "(", "np", ".", "int32", ")", "\n", "boxes_host", "=", "dets", "[", "order", ",", ":", "]", "\n", "\n", "threadsPerBlock", "=", "8", "*", "8", "\n", "col_blocks", "=", "div_up", "(", "boxes_num", ",", "threadsPerBlock", ")", "\n", "cuda", ".", "select_device", "(", "device_id", ")", "\n", "mask_host", "=", "np", ".", "zeros", "(", "(", "boxes_num", "*", "col_blocks", ",", ")", ",", "dtype", "=", "np", ".", "uint64", ")", "\n", "blockspergrid", "=", "(", "div_up", "(", "boxes_num", ",", "threadsPerBlock", ")", ",", "\n", "div_up", "(", "boxes_num", ",", "threadsPerBlock", ")", ")", "\n", "stream", "=", "cuda", ".", "stream", "(", ")", "\n", "with", "stream", ".", "auto_synchronize", "(", ")", ":", "\n", "        ", "boxes_dev", "=", "cuda", ".", "to_device", "(", "boxes_host", ".", "reshape", "(", "[", "-", "1", "]", ")", ",", "stream", ")", "\n", "mask_dev", "=", "cuda", ".", "to_device", "(", "mask_host", ",", "stream", ")", "\n", "nms_kernel", "[", "blockspergrid", ",", "threadsPerBlock", ",", "stream", "]", "(", "\n", "boxes_num", ",", "nms_overlap_thresh", ",", "boxes_dev", ",", "mask_dev", ")", "\n", "mask_dev", ".", "copy_to_host", "(", "mask_host", ",", "stream", "=", "stream", ")", "\n", "# stream.synchronize()", "\n", "", "num_out", "=", "nms_postprocess", "(", "keep_out", ",", "mask_host", ",", "boxes_num", ")", "\n", "keep", "=", "keep_out", "[", ":", "num_out", "]", "\n", "return", "list", "(", "order", "[", "keep", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.trangle_area": [[153, 157], ["numba.cuda.jit"], "function", ["None"], ["", "@", "cuda", ".", "jit", "(", "'(float32[:], float32[:], float32[:])'", ",", "device", "=", "True", ",", "inline", "=", "True", ")", "\n", "def", "trangle_area", "(", "a", ",", "b", ",", "c", ")", ":", "\n", "    ", "return", "(", "\n", "(", "a", "[", "0", "]", "-", "c", "[", "0", "]", ")", "*", "(", "b", "[", "1", "]", "-", "c", "[", "1", "]", ")", "-", "(", "a", "[", "1", "]", "-", "c", "[", "1", "]", ")", "*", "(", "b", "[", "0", "]", "-", "c", "[", "0", "]", ")", ")", "/", "2.0", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.area": [[159, 167], ["numba.cuda.jit", "range", "abs", "rotate_nms_gpu.trangle_area"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.trangle_area"], ["", "@", "cuda", ".", "jit", "(", "'(float32[:], int32)'", ",", "device", "=", "True", ",", "inline", "=", "True", ")", "\n", "def", "area", "(", "int_pts", ",", "num_of_inter", ")", ":", "\n", "    ", "area_val", "=", "0.0", "\n", "for", "i", "in", "range", "(", "num_of_inter", "-", "2", ")", ":", "\n", "        ", "area_val", "+=", "abs", "(", "\n", "trangle_area", "(", "int_pts", "[", ":", "2", "]", ",", "int_pts", "[", "2", "*", "i", "+", "2", ":", "2", "*", "i", "+", "4", "]", ",", "\n", "int_pts", "[", "2", "*", "i", "+", "4", ":", "2", "*", "i", "+", "6", "]", ")", ")", "\n", "", "return", "area_val", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.sort_vertex_in_convex_polygon": [[169, 207], ["numba.cuda.jit", "numba.cuda.local.array", "range", "numba.cuda.local.array", "numba.cuda.local.array", "range", "range", "math.sqrt"], "function", ["None"], ["", "@", "cuda", ".", "jit", "(", "'(float32[:], int32)'", ",", "device", "=", "True", ",", "inline", "=", "True", ")", "\n", "def", "sort_vertex_in_convex_polygon", "(", "int_pts", ",", "num_of_inter", ")", ":", "\n", "    ", "if", "num_of_inter", ">", "0", ":", "\n", "        ", "center", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "center", "[", ":", "]", "=", "0.0", "\n", "for", "i", "in", "range", "(", "num_of_inter", ")", ":", "\n", "            ", "center", "[", "0", "]", "+=", "int_pts", "[", "2", "*", "i", "]", "\n", "center", "[", "1", "]", "+=", "int_pts", "[", "2", "*", "i", "+", "1", "]", "\n", "", "center", "[", "0", "]", "/=", "num_of_inter", "\n", "center", "[", "1", "]", "/=", "num_of_inter", "\n", "v", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "vs", "=", "cuda", ".", "local", ".", "array", "(", "(", "16", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "num_of_inter", ")", ":", "\n", "            ", "v", "[", "0", "]", "=", "int_pts", "[", "2", "*", "i", "]", "-", "center", "[", "0", "]", "\n", "v", "[", "1", "]", "=", "int_pts", "[", "2", "*", "i", "+", "1", "]", "-", "center", "[", "1", "]", "\n", "d", "=", "math", ".", "sqrt", "(", "v", "[", "0", "]", "*", "v", "[", "0", "]", "+", "v", "[", "1", "]", "*", "v", "[", "1", "]", ")", "\n", "v", "[", "0", "]", "=", "v", "[", "0", "]", "/", "d", "\n", "v", "[", "1", "]", "=", "v", "[", "1", "]", "/", "d", "\n", "if", "v", "[", "1", "]", "<", "0", ":", "\n", "                ", "v", "[", "0", "]", "=", "-", "2", "-", "v", "[", "0", "]", "\n", "", "vs", "[", "i", "]", "=", "v", "[", "0", "]", "\n", "", "j", "=", "0", "\n", "temp", "=", "0", "\n", "for", "i", "in", "range", "(", "1", ",", "num_of_inter", ")", ":", "\n", "            ", "if", "vs", "[", "i", "-", "1", "]", ">", "vs", "[", "i", "]", ":", "\n", "                ", "temp", "=", "vs", "[", "i", "]", "\n", "tx", "=", "int_pts", "[", "2", "*", "i", "]", "\n", "ty", "=", "int_pts", "[", "2", "*", "i", "+", "1", "]", "\n", "j", "=", "i", "\n", "while", "j", ">", "0", "and", "vs", "[", "j", "-", "1", "]", ">", "temp", ":", "\n", "                    ", "vs", "[", "j", "]", "=", "vs", "[", "j", "-", "1", "]", "\n", "int_pts", "[", "j", "*", "2", "]", "=", "int_pts", "[", "j", "*", "2", "-", "2", "]", "\n", "int_pts", "[", "j", "*", "2", "+", "1", "]", "=", "int_pts", "[", "j", "*", "2", "-", "1", "]", "\n", "j", "-=", "1", "\n", "\n", "", "vs", "[", "j", "]", "=", "temp", "\n", "int_pts", "[", "j", "*", "2", "]", "=", "tx", "\n", "int_pts", "[", "j", "*", "2", "+", "1", "]", "=", "ty", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.line_segment_intersection": [[209, 253], ["numba.cuda.jit", "numba.cuda.local.array", "numba.cuda.local.array", "numba.cuda.local.array", "numba.cuda.local.array"], "function", ["None"], ["", "", "", "", "@", "cuda", ".", "jit", "(", "\n", "'(float32[:], float32[:], int32, int32, float32[:])'", ",", "\n", "device", "=", "True", ",", "\n", "inline", "=", "True", ")", "\n", "def", "line_segment_intersection", "(", "pts1", ",", "pts2", ",", "i", ",", "j", ",", "temp_pts", ")", ":", "\n", "    ", "A", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "B", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "C", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "D", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "\n", "A", "[", "0", "]", "=", "pts1", "[", "2", "*", "i", "]", "\n", "A", "[", "1", "]", "=", "pts1", "[", "2", "*", "i", "+", "1", "]", "\n", "\n", "B", "[", "0", "]", "=", "pts1", "[", "2", "*", "(", "(", "i", "+", "1", ")", "%", "4", ")", "]", "\n", "B", "[", "1", "]", "=", "pts1", "[", "2", "*", "(", "(", "i", "+", "1", ")", "%", "4", ")", "+", "1", "]", "\n", "\n", "C", "[", "0", "]", "=", "pts2", "[", "2", "*", "j", "]", "\n", "C", "[", "1", "]", "=", "pts2", "[", "2", "*", "j", "+", "1", "]", "\n", "\n", "D", "[", "0", "]", "=", "pts2", "[", "2", "*", "(", "(", "j", "+", "1", ")", "%", "4", ")", "]", "\n", "D", "[", "1", "]", "=", "pts2", "[", "2", "*", "(", "(", "j", "+", "1", ")", "%", "4", ")", "+", "1", "]", "\n", "BA0", "=", "B", "[", "0", "]", "-", "A", "[", "0", "]", "\n", "BA1", "=", "B", "[", "1", "]", "-", "A", "[", "1", "]", "\n", "DA0", "=", "D", "[", "0", "]", "-", "A", "[", "0", "]", "\n", "CA0", "=", "C", "[", "0", "]", "-", "A", "[", "0", "]", "\n", "DA1", "=", "D", "[", "1", "]", "-", "A", "[", "1", "]", "\n", "CA1", "=", "C", "[", "1", "]", "-", "A", "[", "1", "]", "\n", "acd", "=", "DA1", "*", "CA0", ">", "CA1", "*", "DA0", "\n", "bcd", "=", "(", "D", "[", "1", "]", "-", "B", "[", "1", "]", ")", "*", "(", "C", "[", "0", "]", "-", "B", "[", "0", "]", ")", ">", "(", "C", "[", "1", "]", "-", "B", "[", "1", "]", ")", "*", "(", "D", "[", "0", "]", "-", "B", "[", "0", "]", ")", "\n", "if", "acd", "!=", "bcd", ":", "\n", "        ", "abc", "=", "CA1", "*", "BA0", ">", "BA1", "*", "CA0", "\n", "abd", "=", "DA1", "*", "BA0", ">", "BA1", "*", "DA0", "\n", "if", "abc", "!=", "abd", ":", "\n", "            ", "DC0", "=", "D", "[", "0", "]", "-", "C", "[", "0", "]", "\n", "DC1", "=", "D", "[", "1", "]", "-", "C", "[", "1", "]", "\n", "ABBA", "=", "A", "[", "0", "]", "*", "B", "[", "1", "]", "-", "B", "[", "0", "]", "*", "A", "[", "1", "]", "\n", "CDDC", "=", "C", "[", "0", "]", "*", "D", "[", "1", "]", "-", "D", "[", "0", "]", "*", "C", "[", "1", "]", "\n", "DH", "=", "BA1", "*", "DC0", "-", "BA0", "*", "DC1", "\n", "Dx", "=", "ABBA", "*", "DC0", "-", "BA0", "*", "CDDC", "\n", "Dy", "=", "ABBA", "*", "DC1", "-", "BA1", "*", "CDDC", "\n", "temp_pts", "[", "0", "]", "=", "Dx", "/", "DH", "\n", "temp_pts", "[", "1", "]", "=", "Dy", "/", "DH", "\n", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.line_segment_intersection_v1": [[255, 295], ["numba.cuda.jit", "numba.cuda.local.array", "numba.cuda.local.array", "numba.cuda.local.array", "numba.cuda.local.array", "rotate_nms_gpu.trangle_area", "rotate_nms_gpu.trangle_area", "rotate_nms_gpu.trangle_area"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.trangle_area", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.trangle_area", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.trangle_area"], ["", "@", "cuda", ".", "jit", "(", "\n", "'(float32[:], float32[:], int32, int32, float32[:])'", ",", "\n", "device", "=", "True", ",", "\n", "inline", "=", "True", ")", "\n", "def", "line_segment_intersection_v1", "(", "pts1", ",", "pts2", ",", "i", ",", "j", ",", "temp_pts", ")", ":", "\n", "    ", "a", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "b", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "c", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "d", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "\n", "a", "[", "0", "]", "=", "pts1", "[", "2", "*", "i", "]", "\n", "a", "[", "1", "]", "=", "pts1", "[", "2", "*", "i", "+", "1", "]", "\n", "\n", "b", "[", "0", "]", "=", "pts1", "[", "2", "*", "(", "(", "i", "+", "1", ")", "%", "4", ")", "]", "\n", "b", "[", "1", "]", "=", "pts1", "[", "2", "*", "(", "(", "i", "+", "1", ")", "%", "4", ")", "+", "1", "]", "\n", "\n", "c", "[", "0", "]", "=", "pts2", "[", "2", "*", "j", "]", "\n", "c", "[", "1", "]", "=", "pts2", "[", "2", "*", "j", "+", "1", "]", "\n", "\n", "d", "[", "0", "]", "=", "pts2", "[", "2", "*", "(", "(", "j", "+", "1", ")", "%", "4", ")", "]", "\n", "d", "[", "1", "]", "=", "pts2", "[", "2", "*", "(", "(", "j", "+", "1", ")", "%", "4", ")", "+", "1", "]", "\n", "\n", "area_abc", "=", "trangle_area", "(", "a", ",", "b", ",", "c", ")", "\n", "area_abd", "=", "trangle_area", "(", "a", ",", "b", ",", "d", ")", "\n", "\n", "if", "area_abc", "*", "area_abd", ">=", "0", ":", "\n", "        ", "return", "False", "\n", "\n", "", "area_cda", "=", "trangle_area", "(", "c", ",", "d", ",", "a", ")", "\n", "area_cdb", "=", "area_cda", "+", "area_abc", "-", "area_abd", "\n", "\n", "if", "area_cda", "*", "area_cdb", ">=", "0", ":", "\n", "        ", "return", "False", "\n", "", "t", "=", "area_cda", "/", "(", "area_abd", "-", "area_abc", ")", "\n", "\n", "dx", "=", "t", "*", "(", "b", "[", "0", "]", "-", "a", "[", "0", "]", ")", "\n", "dy", "=", "t", "*", "(", "b", "[", "1", "]", "-", "a", "[", "1", "]", ")", "\n", "temp_pts", "[", "0", "]", "=", "a", "[", "0", "]", "+", "dx", "\n", "temp_pts", "[", "1", "]", "=", "a", "[", "1", "]", "+", "dy", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.point_in_quadrilateral": [[297, 314], ["numba.cuda.jit"], "function", ["None"], ["", "@", "cuda", ".", "jit", "(", "'(float32, float32, float32[:])'", ",", "device", "=", "True", ",", "inline", "=", "True", ")", "\n", "def", "point_in_quadrilateral", "(", "pt_x", ",", "pt_y", ",", "corners", ")", ":", "\n", "    ", "ab0", "=", "corners", "[", "2", "]", "-", "corners", "[", "0", "]", "\n", "ab1", "=", "corners", "[", "3", "]", "-", "corners", "[", "1", "]", "\n", "\n", "ad0", "=", "corners", "[", "6", "]", "-", "corners", "[", "0", "]", "\n", "ad1", "=", "corners", "[", "7", "]", "-", "corners", "[", "1", "]", "\n", "\n", "ap0", "=", "pt_x", "-", "corners", "[", "0", "]", "\n", "ap1", "=", "pt_y", "-", "corners", "[", "1", "]", "\n", "\n", "abab", "=", "ab0", "*", "ab0", "+", "ab1", "*", "ab1", "\n", "abap", "=", "ab0", "*", "ap0", "+", "ab1", "*", "ap1", "\n", "adad", "=", "ad0", "*", "ad0", "+", "ad1", "*", "ad1", "\n", "adap", "=", "ad0", "*", "ap0", "+", "ad1", "*", "ap1", "\n", "\n", "return", "abab", ">=", "abap", "and", "abap", ">=", "0", "and", "adad", ">=", "adap", "and", "adap", ">=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.quadrilateral_intersection": [[316, 338], ["numba.cuda.jit", "range", "numba.cuda.local.array", "range", "rotate_nms_gpu.point_in_quadrilateral", "rotate_nms_gpu.point_in_quadrilateral", "range", "rotate_nms_gpu.line_segment_intersection"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.point_in_quadrilateral", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.point_in_quadrilateral", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.line_segment_intersection"], ["", "@", "cuda", ".", "jit", "(", "'(float32[:], float32[:], float32[:])'", ",", "device", "=", "True", ",", "inline", "=", "True", ")", "\n", "def", "quadrilateral_intersection", "(", "pts1", ",", "pts2", ",", "int_pts", ")", ":", "\n", "    ", "num_of_inter", "=", "0", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "        ", "if", "point_in_quadrilateral", "(", "pts1", "[", "2", "*", "i", "]", ",", "pts1", "[", "2", "*", "i", "+", "1", "]", ",", "pts2", ")", ":", "\n", "            ", "int_pts", "[", "num_of_inter", "*", "2", "]", "=", "pts1", "[", "2", "*", "i", "]", "\n", "int_pts", "[", "num_of_inter", "*", "2", "+", "1", "]", "=", "pts1", "[", "2", "*", "i", "+", "1", "]", "\n", "num_of_inter", "+=", "1", "\n", "", "if", "point_in_quadrilateral", "(", "pts2", "[", "2", "*", "i", "]", ",", "pts2", "[", "2", "*", "i", "+", "1", "]", ",", "pts1", ")", ":", "\n", "            ", "int_pts", "[", "num_of_inter", "*", "2", "]", "=", "pts2", "[", "2", "*", "i", "]", "\n", "int_pts", "[", "num_of_inter", "*", "2", "+", "1", "]", "=", "pts2", "[", "2", "*", "i", "+", "1", "]", "\n", "num_of_inter", "+=", "1", "\n", "", "", "temp_pts", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "4", ")", ":", "\n", "            ", "has_pts", "=", "line_segment_intersection", "(", "pts1", ",", "pts2", ",", "i", ",", "j", ",", "temp_pts", ")", "\n", "if", "has_pts", ":", "\n", "                ", "int_pts", "[", "num_of_inter", "*", "2", "]", "=", "temp_pts", "[", "0", "]", "\n", "int_pts", "[", "num_of_inter", "*", "2", "+", "1", "]", "=", "temp_pts", "[", "1", "]", "\n", "num_of_inter", "+=", "1", "\n", "\n", "", "", "", "return", "num_of_inter", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.rbbox_to_corners": [[340, 364], ["numba.cuda.jit", "math.cos", "math.sin", "numba.cuda.local.array", "numba.cuda.local.array", "range"], "function", ["None"], ["", "@", "cuda", ".", "jit", "(", "'(float32[:], float32[:])'", ",", "device", "=", "True", ",", "inline", "=", "True", ")", "\n", "def", "rbbox_to_corners", "(", "corners", ",", "rbbox", ")", ":", "\n", "# generate clockwise corners and rotate it clockwise", "\n", "    ", "angle", "=", "rbbox", "[", "4", "]", "\n", "a_cos", "=", "math", ".", "cos", "(", "angle", ")", "\n", "a_sin", "=", "math", ".", "sin", "(", "angle", ")", "\n", "center_x", "=", "rbbox", "[", "0", "]", "\n", "center_y", "=", "rbbox", "[", "1", "]", "\n", "x_d", "=", "rbbox", "[", "2", "]", "\n", "y_d", "=", "rbbox", "[", "3", "]", "\n", "corners_x", "=", "cuda", ".", "local", ".", "array", "(", "(", "4", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "corners_y", "=", "cuda", ".", "local", ".", "array", "(", "(", "4", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "corners_x", "[", "0", "]", "=", "-", "x_d", "/", "2", "\n", "corners_x", "[", "1", "]", "=", "-", "x_d", "/", "2", "\n", "corners_x", "[", "2", "]", "=", "x_d", "/", "2", "\n", "corners_x", "[", "3", "]", "=", "x_d", "/", "2", "\n", "corners_y", "[", "0", "]", "=", "-", "y_d", "/", "2", "\n", "corners_y", "[", "1", "]", "=", "y_d", "/", "2", "\n", "corners_y", "[", "2", "]", "=", "y_d", "/", "2", "\n", "corners_y", "[", "3", "]", "=", "-", "y_d", "/", "2", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "        ", "corners", "[", "2", "*", "i", "]", "=", "a_cos", "*", "corners_x", "[", "i", "]", "+", "a_sin", "*", "corners_y", "[", "i", "]", "+", "center_x", "\n", "corners", "[", "2", "*", "i", "+", "\n", "1", "]", "=", "-", "a_sin", "*", "corners_x", "[", "i", "]", "+", "a_cos", "*", "corners_y", "[", "i", "]", "+", "center_y", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.inter": [[366, 381], ["numba.cuda.jit", "numba.cuda.local.array", "numba.cuda.local.array", "numba.cuda.local.array", "rotate_nms_gpu.rbbox_to_corners", "rotate_nms_gpu.rbbox_to_corners", "rotate_nms_gpu.quadrilateral_intersection", "rotate_nms_gpu.sort_vertex_in_convex_polygon", "rotate_nms_gpu.area"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.rbbox_to_corners", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.rbbox_to_corners", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.quadrilateral_intersection", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.sort_vertex_in_convex_polygon", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.area"], ["", "", "@", "cuda", ".", "jit", "(", "'(float32[:], float32[:])'", ",", "device", "=", "True", ",", "inline", "=", "True", ")", "\n", "def", "inter", "(", "rbbox1", ",", "rbbox2", ")", ":", "\n", "    ", "corners1", "=", "cuda", ".", "local", ".", "array", "(", "(", "8", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "corners2", "=", "cuda", ".", "local", ".", "array", "(", "(", "8", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "intersection_corners", "=", "cuda", ".", "local", ".", "array", "(", "(", "16", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "\n", "rbbox_to_corners", "(", "corners1", ",", "rbbox1", ")", "\n", "rbbox_to_corners", "(", "corners2", ",", "rbbox2", ")", "\n", "\n", "num_intersection", "=", "quadrilateral_intersection", "(", "corners1", ",", "corners2", ",", "\n", "intersection_corners", ")", "\n", "sort_vertex_in_convex_polygon", "(", "intersection_corners", ",", "num_intersection", ")", "\n", "# print(intersection_corners.reshape([-1, 2])[:num_intersection])", "\n", "\n", "return", "area", "(", "intersection_corners", ",", "num_intersection", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.devRotateIoU": [[383, 389], ["numba.cuda.jit", "rotate_nms_gpu.inter"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.inter"], ["", "@", "cuda", ".", "jit", "(", "'(float32[:], float32[:])'", ",", "device", "=", "True", ",", "inline", "=", "True", ")", "\n", "def", "devRotateIoU", "(", "rbox1", ",", "rbox2", ")", ":", "\n", "    ", "area1", "=", "rbox1", "[", "2", "]", "*", "rbox1", "[", "3", "]", "\n", "area2", "=", "rbox2", "[", "2", "]", "*", "rbox2", "[", "3", "]", "\n", "area_inter", "=", "inter", "(", "rbox1", ",", "rbox2", ")", "\n", "return", "area_inter", "/", "(", "area1", "+", "area2", "-", "area_inter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.rotate_nms_kernel": [[391, 425], ["numba.cuda.jit", "min", "min", "numba.cuda.shared.array", "numba.cuda.syncthreads", "range", "rotate_nms_gpu.devRotateIoU"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.devRotateIoU"], ["", "@", "cuda", ".", "jit", "(", "'(int64, float32, float32[:], uint64[:])'", ")", "\n", "def", "rotate_nms_kernel", "(", "n_boxes", ",", "nms_overlap_thresh", ",", "dev_boxes", ",", "dev_mask", ")", ":", "\n", "    ", "threadsPerBlock", "=", "8", "*", "8", "\n", "row_start", "=", "cuda", ".", "blockIdx", ".", "y", "\n", "col_start", "=", "cuda", ".", "blockIdx", ".", "x", "\n", "tx", "=", "cuda", ".", "threadIdx", ".", "x", "\n", "row_size", "=", "min", "(", "n_boxes", "-", "row_start", "*", "threadsPerBlock", ",", "threadsPerBlock", ")", "\n", "col_size", "=", "min", "(", "n_boxes", "-", "col_start", "*", "threadsPerBlock", ",", "threadsPerBlock", ")", "\n", "block_boxes", "=", "cuda", ".", "shared", ".", "array", "(", "shape", "=", "(", "64", "*", "6", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "dev_box_idx", "=", "threadsPerBlock", "*", "col_start", "+", "tx", "\n", "if", "(", "tx", "<", "col_size", ")", ":", "\n", "        ", "block_boxes", "[", "tx", "*", "6", "+", "0", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "6", "+", "0", "]", "\n", "block_boxes", "[", "tx", "*", "6", "+", "1", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "6", "+", "1", "]", "\n", "block_boxes", "[", "tx", "*", "6", "+", "2", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "6", "+", "2", "]", "\n", "block_boxes", "[", "tx", "*", "6", "+", "3", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "6", "+", "3", "]", "\n", "block_boxes", "[", "tx", "*", "6", "+", "4", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "6", "+", "4", "]", "\n", "block_boxes", "[", "tx", "*", "6", "+", "5", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "6", "+", "5", "]", "\n", "", "cuda", ".", "syncthreads", "(", ")", "\n", "if", "(", "tx", "<", "row_size", ")", ":", "\n", "        ", "cur_box_idx", "=", "threadsPerBlock", "*", "row_start", "+", "tx", "\n", "# cur_box = dev_boxes + cur_box_idx * 5;", "\n", "t", "=", "0", "\n", "start", "=", "0", "\n", "if", "(", "row_start", "==", "col_start", ")", ":", "\n", "            ", "start", "=", "tx", "+", "1", "\n", "", "for", "i", "in", "range", "(", "start", ",", "col_size", ")", ":", "\n", "            ", "iou", "=", "devRotateIoU", "(", "dev_boxes", "[", "cur_box_idx", "*", "6", ":", "cur_box_idx", "*", "6", "+", "5", "]", ",", "\n", "block_boxes", "[", "i", "*", "6", ":", "i", "*", "6", "+", "5", "]", ")", "\n", "# print('iou', iou, cur_box_idx, i)", "\n", "if", "(", "iou", ">", "nms_overlap_thresh", ")", ":", "\n", "                ", "t", "|=", "1", "<<", "i", "\n", "", "", "col_blocks", "=", "(", "(", "n_boxes", ")", "//", "(", "threadsPerBlock", ")", "+", "(", "\n", "(", "n_boxes", ")", "%", "(", "threadsPerBlock", ")", ">", "0", ")", ")", "\n", "dev_mask", "[", "cur_box_idx", "*", "col_blocks", "+", "col_start", "]", "=", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.rotate_nms_gpu": [[427, 463], ["dets.astype.astype", "numpy.zeros", "[].astype", "rotate_nms_gpu.div_up", "numba.cuda.select_device", "numpy.zeros", "numba.cuda.stream", "rotate_nms_gpu.nms_postprocess", "list", "rotate_nms_gpu.div_up", "rotate_nms_gpu.div_up", "cuda.stream.auto_synchronize", "numba.cuda.to_device", "numba.cuda.to_device", "cuda.to_device.copy_to_host", "boxes_host.reshape", "scores.argsort"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.div_up", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.nms_postprocess", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.div_up", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.div_up"], ["", "", "def", "rotate_nms_gpu", "(", "dets", ",", "nms_overlap_thresh", ",", "device_id", "=", "0", ")", ":", "\n", "    ", "\"\"\"nms in gpu. WARNING: this function can provide right result \n    but its performance isn't be tested\n    \n    Args:\n        dets ([type]): [description]\n        nms_overlap_thresh ([type]): [description]\n        device_id ([type], optional): Defaults to 0. [description]\n    \n    Returns:\n        [type]: [description]\n    \"\"\"", "\n", "dets", "=", "dets", ".", "astype", "(", "np", ".", "float32", ")", "\n", "boxes_num", "=", "dets", ".", "shape", "[", "0", "]", "\n", "keep_out", "=", "np", ".", "zeros", "(", "[", "boxes_num", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "scores", "=", "dets", "[", ":", ",", "5", "]", "\n", "order", "=", "scores", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", ".", "astype", "(", "np", ".", "int32", ")", "\n", "boxes_host", "=", "dets", "[", "order", ",", ":", "]", "\n", "\n", "threadsPerBlock", "=", "8", "*", "8", "\n", "col_blocks", "=", "div_up", "(", "boxes_num", ",", "threadsPerBlock", ")", "\n", "cuda", ".", "select_device", "(", "device_id", ")", "\n", "# mask_host shape: boxes_num * col_blocks * sizeof(np.uint64)", "\n", "mask_host", "=", "np", ".", "zeros", "(", "(", "boxes_num", "*", "col_blocks", ",", ")", ",", "dtype", "=", "np", ".", "uint64", ")", "\n", "blockspergrid", "=", "(", "div_up", "(", "boxes_num", ",", "threadsPerBlock", ")", ",", "\n", "div_up", "(", "boxes_num", ",", "threadsPerBlock", ")", ")", "\n", "stream", "=", "cuda", ".", "stream", "(", ")", "\n", "with", "stream", ".", "auto_synchronize", "(", ")", ":", "\n", "        ", "boxes_dev", "=", "cuda", ".", "to_device", "(", "boxes_host", ".", "reshape", "(", "[", "-", "1", "]", ")", ",", "stream", ")", "\n", "mask_dev", "=", "cuda", ".", "to_device", "(", "mask_host", ",", "stream", ")", "\n", "rotate_nms_kernel", "[", "blockspergrid", ",", "threadsPerBlock", ",", "stream", "]", "(", "\n", "boxes_num", ",", "nms_overlap_thresh", ",", "boxes_dev", ",", "mask_dev", ")", "\n", "mask_dev", ".", "copy_to_host", "(", "mask_host", ",", "stream", "=", "stream", ")", "\n", "", "num_out", "=", "nms_postprocess", "(", "keep_out", ",", "mask_host", ",", "boxes_num", ")", "\n", "keep", "=", "keep_out", "[", ":", "num_out", "]", "\n", "return", "list", "(", "order", "[", "keep", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.rotate_iou_kernel": [[465, 496], ["numba.cuda.jit", "min", "min", "numba.cuda.shared.array", "numba.cuda.shared.array", "numba.cuda.syncthreads", "range", "rotate_nms_gpu.devRotateIoU"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.devRotateIoU"], ["", "@", "cuda", ".", "jit", "(", "'(int64, int64, float32[:], float32[:], float32[:])'", ",", "fastmath", "=", "False", ")", "\n", "def", "rotate_iou_kernel", "(", "N", ",", "K", ",", "dev_boxes", ",", "dev_query_boxes", ",", "dev_iou", ")", ":", "\n", "    ", "threadsPerBlock", "=", "8", "*", "8", "\n", "row_start", "=", "cuda", ".", "blockIdx", ".", "x", "\n", "col_start", "=", "cuda", ".", "blockIdx", ".", "y", "\n", "tx", "=", "cuda", ".", "threadIdx", ".", "x", "\n", "row_size", "=", "min", "(", "N", "-", "row_start", "*", "threadsPerBlock", ",", "threadsPerBlock", ")", "\n", "col_size", "=", "min", "(", "K", "-", "col_start", "*", "threadsPerBlock", ",", "threadsPerBlock", ")", "\n", "block_boxes", "=", "cuda", ".", "shared", ".", "array", "(", "shape", "=", "(", "64", "*", "5", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "block_qboxes", "=", "cuda", ".", "shared", ".", "array", "(", "shape", "=", "(", "64", "*", "5", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "\n", "dev_query_box_idx", "=", "threadsPerBlock", "*", "col_start", "+", "tx", "\n", "dev_box_idx", "=", "threadsPerBlock", "*", "row_start", "+", "tx", "\n", "if", "(", "tx", "<", "col_size", ")", ":", "\n", "        ", "block_qboxes", "[", "tx", "*", "5", "+", "0", "]", "=", "dev_query_boxes", "[", "dev_query_box_idx", "*", "5", "+", "0", "]", "\n", "block_qboxes", "[", "tx", "*", "5", "+", "1", "]", "=", "dev_query_boxes", "[", "dev_query_box_idx", "*", "5", "+", "1", "]", "\n", "block_qboxes", "[", "tx", "*", "5", "+", "2", "]", "=", "dev_query_boxes", "[", "dev_query_box_idx", "*", "5", "+", "2", "]", "\n", "block_qboxes", "[", "tx", "*", "5", "+", "3", "]", "=", "dev_query_boxes", "[", "dev_query_box_idx", "*", "5", "+", "3", "]", "\n", "block_qboxes", "[", "tx", "*", "5", "+", "4", "]", "=", "dev_query_boxes", "[", "dev_query_box_idx", "*", "5", "+", "4", "]", "\n", "", "if", "(", "tx", "<", "row_size", ")", ":", "\n", "        ", "block_boxes", "[", "tx", "*", "5", "+", "0", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "5", "+", "0", "]", "\n", "block_boxes", "[", "tx", "*", "5", "+", "1", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "5", "+", "1", "]", "\n", "block_boxes", "[", "tx", "*", "5", "+", "2", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "5", "+", "2", "]", "\n", "block_boxes", "[", "tx", "*", "5", "+", "3", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "5", "+", "3", "]", "\n", "block_boxes", "[", "tx", "*", "5", "+", "4", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "5", "+", "4", "]", "\n", "", "cuda", ".", "syncthreads", "(", ")", "\n", "if", "tx", "<", "row_size", ":", "\n", "        ", "for", "i", "in", "range", "(", "col_size", ")", ":", "\n", "            ", "offset", "=", "row_start", "*", "threadsPerBlock", "*", "K", "+", "col_start", "*", "threadsPerBlock", "+", "tx", "*", "K", "+", "i", "\n", "dev_iou", "[", "offset", "]", "=", "devRotateIoU", "(", "block_qboxes", "[", "i", "*", "5", ":", "i", "*", "5", "+", "5", "]", ",", "\n", "block_boxes", "[", "tx", "*", "5", ":", "tx", "*", "5", "+", "5", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.rotate_iou_gpu": [[498, 534], ["boxes.astype.astype", "query_boxes.astype.astype", "numpy.zeros", "numba.cuda.select_device", "numba.cuda.stream", "np.zeros.astype", "rotate_nms_gpu.div_up", "rotate_nms_gpu.div_up", "cuda.stream.auto_synchronize", "numba.cuda.to_device", "numba.cuda.to_device", "numba.cuda.to_device", "cuda.to_device.copy_to_host", "boxes.astype.reshape", "query_boxes.astype.reshape", "np.zeros.reshape", "np.zeros.reshape"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.div_up", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.div_up"], ["", "", "", "def", "rotate_iou_gpu", "(", "boxes", ",", "query_boxes", ",", "device_id", "=", "0", ")", ":", "\n", "    ", "\"\"\"rotated box iou running in gpu. 500x faster than cpu version\n    (take 5ms in one example with numba.cuda code).\n    convert from [this project](\n        https://github.com/hongzhenwang/RRPN-revise/tree/master/lib/rotation).\n    \n    Args:\n        boxes (float tensor: [N, 5]): rbboxes. format: centers, dims, \n            angles(clockwise when positive)\n        query_boxes (float tensor: [K, 5]): [description]\n        device_id (int, optional): Defaults to 0. [description]\n    \n    Returns:\n        [type]: [description]\n    \"\"\"", "\n", "box_dtype", "=", "boxes", ".", "dtype", "\n", "boxes", "=", "boxes", ".", "astype", "(", "np", ".", "float32", ")", "\n", "query_boxes", "=", "query_boxes", ".", "astype", "(", "np", ".", "float32", ")", "\n", "N", "=", "boxes", ".", "shape", "[", "0", "]", "\n", "K", "=", "query_boxes", ".", "shape", "[", "0", "]", "\n", "iou", "=", "np", ".", "zeros", "(", "(", "N", ",", "K", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "N", "==", "0", "or", "K", "==", "0", ":", "\n", "        ", "return", "iou", "\n", "", "threadsPerBlock", "=", "8", "*", "8", "\n", "cuda", ".", "select_device", "(", "device_id", ")", "\n", "blockspergrid", "=", "(", "div_up", "(", "N", ",", "threadsPerBlock", ")", ",", "div_up", "(", "K", ",", "threadsPerBlock", ")", ")", "\n", "\n", "stream", "=", "cuda", ".", "stream", "(", ")", "\n", "with", "stream", ".", "auto_synchronize", "(", ")", ":", "\n", "        ", "boxes_dev", "=", "cuda", ".", "to_device", "(", "boxes", ".", "reshape", "(", "[", "-", "1", "]", ")", ",", "stream", ")", "\n", "query_boxes_dev", "=", "cuda", ".", "to_device", "(", "query_boxes", ".", "reshape", "(", "[", "-", "1", "]", ")", ",", "stream", ")", "\n", "iou_dev", "=", "cuda", ".", "to_device", "(", "iou", ".", "reshape", "(", "[", "-", "1", "]", ")", ",", "stream", ")", "\n", "rotate_iou_kernel", "[", "blockspergrid", ",", "threadsPerBlock", ",", "stream", "]", "(", "\n", "N", ",", "K", ",", "boxes_dev", ",", "query_boxes_dev", ",", "iou_dev", ")", "\n", "iou_dev", ".", "copy_to_host", "(", "iou", ".", "reshape", "(", "[", "-", "1", "]", ")", ",", "stream", "=", "stream", ")", "\n", "", "return", "iou", ".", "astype", "(", "boxes", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.devRotateIoUEval": [[536, 549], ["numba.cuda.jit", "rotate_nms_gpu.inter"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.inter"], ["", "@", "cuda", ".", "jit", "(", "'(float32[:], float32[:], int32)'", ",", "device", "=", "True", ",", "inline", "=", "True", ")", "\n", "def", "devRotateIoUEval", "(", "rbox1", ",", "rbox2", ",", "criterion", "=", "-", "1", ")", ":", "\n", "    ", "area1", "=", "rbox1", "[", "2", "]", "*", "rbox1", "[", "3", "]", "\n", "area2", "=", "rbox2", "[", "2", "]", "*", "rbox2", "[", "3", "]", "\n", "area_inter", "=", "inter", "(", "rbox1", ",", "rbox2", ")", "\n", "if", "criterion", "==", "-", "1", ":", "\n", "        ", "return", "area_inter", "/", "(", "area1", "+", "area2", "-", "area_inter", ")", "\n", "", "elif", "criterion", "==", "0", ":", "\n", "        ", "return", "area_inter", "/", "area1", "\n", "", "elif", "criterion", "==", "1", ":", "\n", "        ", "return", "area_inter", "/", "area2", "\n", "", "else", ":", "\n", "        ", "return", "area_inter", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.rotate_iou_kernel_eval": [[551, 590], ["numba.cuda.jit", "min", "min", "numba.cuda.shared.array", "numba.cuda.shared.array", "numba.cuda.syncthreads", "range", "rotate_nms_gpu.devRotateIoUEval"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.devRotateIoUEval"], ["", "", "@", "cuda", ".", "jit", "(", "\n", "'(int64, int64, float32[:], float32[:], float32[:], int32)'", ",", "\n", "fastmath", "=", "False", ")", "\n", "def", "rotate_iou_kernel_eval", "(", "N", ",", "\n", "K", ",", "\n", "dev_boxes", ",", "\n", "dev_query_boxes", ",", "\n", "dev_iou", ",", "\n", "criterion", "=", "-", "1", ")", ":", "\n", "    ", "threadsPerBlock", "=", "8", "*", "8", "\n", "row_start", "=", "cuda", ".", "blockIdx", ".", "x", "\n", "col_start", "=", "cuda", ".", "blockIdx", ".", "y", "\n", "tx", "=", "cuda", ".", "threadIdx", ".", "x", "\n", "row_size", "=", "min", "(", "N", "-", "row_start", "*", "threadsPerBlock", ",", "threadsPerBlock", ")", "\n", "col_size", "=", "min", "(", "K", "-", "col_start", "*", "threadsPerBlock", ",", "threadsPerBlock", ")", "\n", "block_boxes", "=", "cuda", ".", "shared", ".", "array", "(", "shape", "=", "(", "64", "*", "5", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "block_qboxes", "=", "cuda", ".", "shared", ".", "array", "(", "shape", "=", "(", "64", "*", "5", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "\n", "dev_query_box_idx", "=", "threadsPerBlock", "*", "col_start", "+", "tx", "\n", "dev_box_idx", "=", "threadsPerBlock", "*", "row_start", "+", "tx", "\n", "if", "(", "tx", "<", "col_size", ")", ":", "\n", "        ", "block_qboxes", "[", "tx", "*", "5", "+", "0", "]", "=", "dev_query_boxes", "[", "dev_query_box_idx", "*", "5", "+", "0", "]", "\n", "block_qboxes", "[", "tx", "*", "5", "+", "1", "]", "=", "dev_query_boxes", "[", "dev_query_box_idx", "*", "5", "+", "1", "]", "\n", "block_qboxes", "[", "tx", "*", "5", "+", "2", "]", "=", "dev_query_boxes", "[", "dev_query_box_idx", "*", "5", "+", "2", "]", "\n", "block_qboxes", "[", "tx", "*", "5", "+", "3", "]", "=", "dev_query_boxes", "[", "dev_query_box_idx", "*", "5", "+", "3", "]", "\n", "block_qboxes", "[", "tx", "*", "5", "+", "4", "]", "=", "dev_query_boxes", "[", "dev_query_box_idx", "*", "5", "+", "4", "]", "\n", "", "if", "(", "tx", "<", "row_size", ")", ":", "\n", "        ", "block_boxes", "[", "tx", "*", "5", "+", "0", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "5", "+", "0", "]", "\n", "block_boxes", "[", "tx", "*", "5", "+", "1", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "5", "+", "1", "]", "\n", "block_boxes", "[", "tx", "*", "5", "+", "2", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "5", "+", "2", "]", "\n", "block_boxes", "[", "tx", "*", "5", "+", "3", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "5", "+", "3", "]", "\n", "block_boxes", "[", "tx", "*", "5", "+", "4", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "5", "+", "4", "]", "\n", "", "cuda", ".", "syncthreads", "(", ")", "\n", "if", "tx", "<", "row_size", ":", "\n", "        ", "for", "i", "in", "range", "(", "col_size", ")", ":", "\n", "            ", "offset", "=", "row_start", "*", "threadsPerBlock", "*", "K", "+", "col_start", "*", "threadsPerBlock", "+", "tx", "*", "K", "+", "i", "\n", "dev_iou", "[", "offset", "]", "=", "devRotateIoUEval", "(", "block_qboxes", "[", "i", "*", "5", ":", "i", "*", "5", "+", "5", "]", ",", "\n", "block_boxes", "[", "tx", "*", "5", ":", "tx", "*", "5", "+", "5", "]", ",", "\n", "criterion", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.rotate_iou_gpu_eval": [[592, 628], ["boxes.astype.astype", "query_boxes.astype.astype", "numpy.zeros", "numba.cuda.select_device", "numba.cuda.stream", "np.zeros.astype", "rotate_nms_gpu.div_up", "rotate_nms_gpu.div_up", "cuda.stream.auto_synchronize", "numba.cuda.to_device", "numba.cuda.to_device", "numba.cuda.to_device", "cuda.to_device.copy_to_host", "boxes.astype.reshape", "query_boxes.astype.reshape", "np.zeros.reshape", "np.zeros.reshape"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.div_up", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.div_up"], ["", "", "", "def", "rotate_iou_gpu_eval", "(", "boxes", ",", "query_boxes", ",", "criterion", "=", "-", "1", ",", "device_id", "=", "0", ")", ":", "\n", "    ", "\"\"\"rotated box iou running in gpu. 500x faster than cpu version\n    (take 5ms in one example with numba.cuda code).\n    convert from [this project](\n        https://github.com/hongzhenwang/RRPN-revise/tree/master/lib/rotation).\n    \n    Args:\n        boxes (float tensor: [N, 5]): rbboxes. format: centers, dims, \n            angles(clockwise when positive)\n        query_boxes (float tensor: [K, 5]): [description]\n        device_id (int, optional): Defaults to 0. [description]\n    \n    Returns:\n        [type]: [description]\n    \"\"\"", "\n", "box_dtype", "=", "boxes", ".", "dtype", "\n", "boxes", "=", "boxes", ".", "astype", "(", "np", ".", "float32", ")", "\n", "query_boxes", "=", "query_boxes", ".", "astype", "(", "np", ".", "float32", ")", "\n", "N", "=", "boxes", ".", "shape", "[", "0", "]", "\n", "K", "=", "query_boxes", ".", "shape", "[", "0", "]", "\n", "iou", "=", "np", ".", "zeros", "(", "(", "N", ",", "K", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "N", "==", "0", "or", "K", "==", "0", ":", "\n", "        ", "return", "iou", "\n", "", "threadsPerBlock", "=", "8", "*", "8", "\n", "cuda", ".", "select_device", "(", "device_id", ")", "\n", "blockspergrid", "=", "(", "div_up", "(", "N", ",", "threadsPerBlock", ")", ",", "div_up", "(", "K", ",", "threadsPerBlock", ")", ")", "\n", "\n", "stream", "=", "cuda", ".", "stream", "(", ")", "\n", "with", "stream", ".", "auto_synchronize", "(", ")", ":", "\n", "        ", "boxes_dev", "=", "cuda", ".", "to_device", "(", "boxes", ".", "reshape", "(", "[", "-", "1", "]", ")", ",", "stream", ")", "\n", "query_boxes_dev", "=", "cuda", ".", "to_device", "(", "query_boxes", ".", "reshape", "(", "[", "-", "1", "]", ")", ",", "stream", ")", "\n", "iou_dev", "=", "cuda", ".", "to_device", "(", "iou", ".", "reshape", "(", "[", "-", "1", "]", ")", ",", "stream", ")", "\n", "rotate_iou_kernel_eval", "[", "blockspergrid", ",", "threadsPerBlock", ",", "stream", "]", "(", "\n", "N", ",", "K", ",", "boxes_dev", ",", "query_boxes_dev", ",", "iou_dev", ",", "criterion", ")", "\n", "iou_dev", ".", "copy_to_host", "(", "iou", ".", "reshape", "(", "[", "-", "1", "]", ")", ",", "stream", "=", "stream", ")", "\n", "", "return", "iou", ".", "astype", "(", "boxes", ".", "dtype", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.bbox_nms.rotate_nms_torch": [[4, 28], ["min", "torch.topk", "len", "torch.empty", "mmdet.ops.iou3d.iou3d_utils.nms_gpu"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.nms_gpu"], ["def", "rotate_nms_torch", "(", "rbboxes", ",", "\n", "scores", ",", "\n", "pre_max_size", "=", "None", ",", "\n", "post_max_size", "=", "None", ",", "\n", "iou_threshold", "=", "0.5", ")", ":", "\n", "    ", "if", "pre_max_size", "is", "not", "None", ":", "\n", "        ", "num_keeped_scores", "=", "scores", ".", "shape", "[", "0", "]", "\n", "pre_max_size", "=", "min", "(", "num_keeped_scores", ",", "pre_max_size", ")", "\n", "scores", ",", "indices", "=", "torch", ".", "topk", "(", "scores", ",", "k", "=", "pre_max_size", ")", "\n", "rbboxes", "=", "rbboxes", "[", "indices", "]", "\n", "\n", "", "if", "len", "(", "rbboxes", ")", "==", "0", ":", "\n", "        ", "keep", "=", "torch", ".", "empty", "(", "(", "0", ",", ")", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "", "else", ":", "\n", "        ", "ret", "=", "nms_gpu", "(", "rbboxes", ",", "scores", ",", "iou_threshold", ")", "\n", "keep", "=", "ret", "[", ":", "post_max_size", "]", "\n", "\n", "", "if", "keep", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "        ", "return", "None", "\n", "\n", "", "if", "pre_max_size", "is", "not", "None", ":", "\n", "        ", "return", "indices", "[", "keep", "]", "\n", "", "else", ":", "\n", "        ", "return", "keep", "", "", "", ""]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.point_cloud.voxel_generator.VoxelGenerator.__init__": [[5, 21], ["numpy.array", "numpy.array", "numpy.round().astype", "numpy.round"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "voxel_size", ",", "\n", "point_cloud_range", ",", "\n", "max_num_points", ",", "\n", "max_voxels", "=", "20000", ")", ":", "\n", "        ", "point_cloud_range", "=", "np", ".", "array", "(", "point_cloud_range", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# [0, -40, -3, 70.4, 40, 1]", "\n", "voxel_size", "=", "np", ".", "array", "(", "voxel_size", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "grid_size", "=", "(", "\n", "point_cloud_range", "[", "3", ":", "]", "-", "point_cloud_range", "[", ":", "3", "]", ")", "/", "voxel_size", "\n", "grid_size", "=", "np", ".", "round", "(", "grid_size", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "self", ".", "_voxel_size", "=", "voxel_size", "\n", "self", ".", "_point_cloud_range", "=", "point_cloud_range", "\n", "self", ".", "_max_num_points", "=", "max_num_points", "\n", "self", ".", "_max_voxels", "=", "max_voxels", "\n", "self", ".", "_grid_size", "=", "grid_size", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.point_cloud.voxel_generator.VoxelGenerator.generate": [[22, 26], ["mmdet.ops.points_op.points_to_voxel"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.points_op.points_ops.points_to_voxel"], ["", "def", "generate", "(", "self", ",", "points", ")", ":", "\n", "        ", "return", "points_to_voxel", "(", "\n", "points", ",", "self", ".", "_voxel_size", ",", "self", ".", "_point_cloud_range", ",", "\n", "self", ".", "_max_num_points", ",", "True", ",", "self", ".", "_max_voxels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.point_cloud.voxel_generator.VoxelGenerator.voxel_size": [[27, 30], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "voxel_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_voxel_size", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.point_cloud.voxel_generator.VoxelGenerator.max_num_points_per_voxel": [[31, 34], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "max_num_points_per_voxel", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_max_num_points", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.point_cloud.voxel_generator.VoxelGenerator.point_cloud_range": [[35, 38], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "point_cloud_range", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_point_cloud_range", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.point_cloud.voxel_generator.VoxelGenerator.grid_size": [[39, 42], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "grid_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_grid_size", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.point_cloud.point_augmentor.BatchSampler.__init__": [[103, 115], ["numpy.arange", "len", "len", "numpy.random.shuffle"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "sampled_list", ",", "name", "=", "None", ",", "epoch", "=", "None", ",", "shuffle", "=", "True", ",", "drop_reminder", "=", "False", ")", ":", "\n", "        ", "self", ".", "_sampled_list", "=", "sampled_list", "\n", "self", ".", "_indices", "=", "np", ".", "arange", "(", "len", "(", "sampled_list", ")", ")", "\n", "if", "shuffle", ":", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "self", ".", "_indices", ")", "\n", "", "self", ".", "_idx", "=", "0", "\n", "self", ".", "_example_num", "=", "len", "(", "sampled_list", ")", "\n", "self", ".", "_name", "=", "name", "\n", "self", ".", "_shuffle", "=", "shuffle", "\n", "self", ".", "_epoch", "=", "epoch", "\n", "self", ".", "_epoch_counter", "=", "0", "\n", "self", ".", "_drop_reminder", "=", "drop_reminder", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.point_cloud.point_augmentor.BatchSampler._sample": [[116, 124], ["point_augmentor.BatchSampler._indices[].copy", "point_augmentor.BatchSampler._reset"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.point_cloud.point_augmentor.BatchSampler._reset"], ["", "def", "_sample", "(", "self", ",", "num", ")", ":", "\n", "        ", "if", "self", ".", "_idx", "+", "num", ">=", "self", ".", "_example_num", ":", "\n", "            ", "ret", "=", "self", ".", "_indices", "[", "self", ".", "_idx", ":", "]", ".", "copy", "(", ")", "\n", "self", ".", "_reset", "(", ")", "\n", "", "else", ":", "\n", "            ", "ret", "=", "self", ".", "_indices", "[", "self", ".", "_idx", ":", "self", ".", "_idx", "+", "num", "]", "\n", "self", ".", "_idx", "+=", "num", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.point_cloud.point_augmentor.BatchSampler._reset": [[125, 131], ["print", "numpy.random.shuffle"], "methods", ["None"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_name", "is", "not", "None", ":", "\n", "            ", "print", "(", "\"reset\"", ",", "self", ".", "_name", ")", "\n", "", "if", "self", ".", "_shuffle", ":", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "self", ".", "_indices", ")", "\n", "", "self", ".", "_idx", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.point_cloud.point_augmentor.BatchSampler.sample": [[132, 135], ["point_augmentor.BatchSampler._sample"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.point_cloud.point_augmentor.BatchSampler._sample"], ["", "def", "sample", "(", "self", ",", "num", ")", ":", "\n", "        ", "indices", "=", "self", ".", "_sample", "(", "num", ")", "\n", "return", "[", "self", ".", "_sampled_list", "[", "i", "]", "for", "i", "in", "indices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.point_cloud.point_augmentor.PointAugmentor.__init__": [[138, 184], ["list", "open", "pickle.load", "print", "print", "print", "point_augmentor.PointAugmentor._samplers.append", "point_augmentor.BatchSampler", "filtered_infos.append", "len", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root_path", ",", "info_path", ",", "sample_classes", ",", "min_num_points", ",", "sample_max_num", ",", "removed_difficulties", ",", "\n", "gt_rot_range", "=", "None", ",", "global_rot_range", "=", "None", ",", "\n", "center_noise_std", "=", "None", ",", "scale_range", "=", "None", ")", ":", "\n", "\n", "        ", "with", "open", "(", "info_path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "db_infos_all", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "self", ".", "_samplers", "=", "list", "(", ")", "\n", "for", "sample_class", "in", "sample_classes", ":", "\n", "            ", "db_infos", "=", "db_infos_all", "[", "sample_class", "]", "\n", "print", "(", "f\"load {len(db_infos)} {sample_class} database infos\"", ")", "\n", "\n", "filtered_infos", "=", "[", "]", "\n", "for", "info", "in", "db_infos", ":", "\n", "                ", "if", "info", "[", "\"num_points_in_gt\"", "]", ">=", "min_num_points", ":", "\n", "                    ", "filtered_infos", ".", "append", "(", "info", ")", "\n", "", "", "db_infos", "=", "filtered_infos", "\n", "\n", "new_db_infos", "=", "[", "\n", "info", "for", "info", "in", "db_infos", "\n", "if", "info", "[", "\"difficulty\"", "]", "not", "in", "removed_difficulties", "\n", "]", "\n", "\n", "print", "(", "\"After filter database:\"", ")", "\n", "print", "(", "f\"load {len(new_db_infos)} {sample_class} database infos\"", ")", "\n", "\n", "self", ".", "_samplers", ".", "append", "(", "BatchSampler", "(", "new_db_infos", ",", "sample_class", ")", ")", "\n", "\n", "", "self", ".", "root_path", "=", "root_path", "\n", "# self._db_infos = new_db_infos", "\n", "self", ".", "_sample_classes", "=", "sample_classes", "\n", "self", ".", "_sample_max_num", "=", "sample_max_num", "\n", "# self._sampler = BatchSampler(self._db_infos, sample_class)", "\n", "\n", "self", ".", "_global_rot_range", "=", "global_rot_range", "\n", "self", ".", "_gt_rot_range", "=", "gt_rot_range", "\n", "self", ".", "_center_noise_std", "=", "center_noise_std", "\n", "self", ".", "_min_scale", "=", "scale_range", "[", "0", "]", "\n", "self", ".", "_max_scale", "=", "scale_range", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.point_cloud.point_augmentor.PointAugmentor.sample_all": [[185, 231], ["enumerate", "int", "len", "numpy.concatenate", "point_augmentor.PointAugmentor.sample", "len", "numpy.concatenate", "numpy.fromfile", "s_points.reshape.reshape.reshape", "s_points_list.append", "sampled_gt_types.append", "numpy.concatenate.astype", "numpy.concatenate", "numpy.empty", "numpy.empty", "numpy.sum", "len", "numpy.stack", "str", "pathlib.Path"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.sampling.BBoxSampler.sample"], ["", "def", "sample_all", "(", "self", ",", "gt_boxes", ",", "gt_types", ")", ":", "\n", "        ", "avoid_coll_boxes", "=", "gt_boxes", "\n", "\n", "sampled", "=", "[", "]", "\n", "sampled_gt_boxes", "=", "[", "]", "\n", "\n", "for", "i", ",", "class_name", "in", "enumerate", "(", "self", ".", "_sample_classes", ")", ":", "\n", "            ", "sampled_num_per_class", "=", "int", "(", "self", ".", "_sample_max_num", "-", "np", ".", "sum", "(", "[", "n", "==", "class_name", "for", "n", "in", "gt_types", "]", ")", ")", "\n", "if", "sampled_num_per_class", ">", "0", ":", "\n", "                ", "sampled_cls", "=", "self", ".", "sample", "(", "avoid_coll_boxes", ",", "sampled_num_per_class", ",", "i", ")", "\n", "", "else", ":", "\n", "                ", "sampled_cls", "=", "[", "]", "\n", "\n", "", "sampled", "+=", "sampled_cls", "\n", "\n", "if", "len", "(", "sampled_cls", ")", ">", "0", ":", "\n", "                ", "if", "len", "(", "sampled_cls", ")", "==", "1", ":", "\n", "                    ", "sampled_gt_box", "=", "sampled_cls", "[", "0", "]", "[", "\"box3d_lidar\"", "]", "[", "\n", "np", ".", "newaxis", ",", "...", "]", "\n", "", "else", ":", "\n", "                    ", "sampled_gt_box", "=", "np", ".", "stack", "(", "\n", "[", "s", "[", "\"box3d_lidar\"", "]", "for", "s", "in", "sampled_cls", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "sampled_gt_boxes", "+=", "[", "sampled_gt_box", "]", "\n", "avoid_coll_boxes", "=", "np", ".", "concatenate", "(", "\n", "[", "avoid_coll_boxes", ",", "sampled_gt_box", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "if", "len", "(", "sampled", ")", ">", "0", ":", "\n", "            ", "sampled_gt_boxes", "=", "np", ".", "concatenate", "(", "sampled_gt_boxes", ",", "axis", "=", "0", ")", "\n", "#num_sampled = len(sampled)", "\n", "s_points_list", "=", "[", "]", "\n", "sampled_gt_types", "=", "[", "]", "\n", "for", "info", "in", "sampled", ":", "\n", "                ", "s_points", "=", "np", ".", "fromfile", "(", "\n", "str", "(", "pathlib", ".", "Path", "(", "self", ".", "root_path", ")", "/", "info", "[", "\"path\"", "]", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "s_points", "=", "s_points", ".", "reshape", "(", "[", "-", "1", ",", "4", "]", ")", "\n", "\n", "s_points", "[", ":", ",", ":", "3", "]", "+=", "info", "[", "\"box3d_lidar\"", "]", "[", ":", "3", "]", "\n", "s_points_list", ".", "append", "(", "s_points", ")", "\n", "sampled_gt_types", ".", "append", "(", "info", "[", "'name'", "]", ")", "\n", "\n", "", "return", "sampled_gt_boxes", ".", "astype", "(", "np", ".", "float32", ")", ",", "sampled_gt_types", ",", "np", ".", "concatenate", "(", "s_points_list", ",", "axis", "=", "0", ")", "\n", "\n", "", "else", ":", "\n", "            ", "return", "np", ".", "empty", "(", "(", "0", ",", "7", ")", ",", "dtype", "=", "np", ".", "float32", ")", ",", "[", "]", ",", "np", ".", "empty", "(", "(", "0", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.point_cloud.point_augmentor.PointAugmentor.sample": [[232, 262], ["point_augmentor.PointAugmentor._samplers[].sample", "copy.deepcopy", "len", "mmdet.core.bbox3d.geometry.center_to_corner_box2d", "numpy.stack", "numpy.concatenate().copy", "mmdet.core.bbox3d.geometry.center_to_corner_box2d", "numpy.concatenate", "mmdet.core.bbox3d.geometry.box_collision_test", "numpy.arange", "range", "coll_mat[].any", "numpy.concatenate", "valid_samples.append"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.sampling.BBoxSampler.sample", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.center_to_corner_box2d", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.center_to_corner_box2d", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.box_collision_test"], ["", "", "def", "sample", "(", "self", ",", "gt_boxes", ",", "num", ",", "i", ")", ":", "\n", "        ", "sampled", "=", "self", ".", "_samplers", "[", "i", "]", ".", "sample", "(", "num", ")", "\n", "sampled", "=", "copy", ".", "deepcopy", "(", "sampled", ")", "\n", "num_gt", "=", "gt_boxes", ".", "shape", "[", "0", "]", "\n", "num_sampled", "=", "len", "(", "sampled", ")", "\n", "gt_boxes_bv", "=", "center_to_corner_box2d", "(", "\n", "gt_boxes", "[", ":", ",", "0", ":", "2", "]", ",", "gt_boxes", "[", ":", ",", "3", ":", "5", "]", ",", "gt_boxes", "[", ":", ",", "6", "]", ")", "\n", "\n", "sp_boxes", "=", "np", ".", "stack", "(", "[", "i", "[", "\"box3d_lidar\"", "]", "for", "i", "in", "sampled", "]", ",", "axis", "=", "0", ")", "\n", "\n", "boxes", "=", "np", ".", "concatenate", "(", "[", "gt_boxes", ",", "sp_boxes", "]", ",", "axis", "=", "0", ")", ".", "copy", "(", ")", "\n", "\n", "sp_boxes_new", "=", "boxes", "[", "gt_boxes", ".", "shape", "[", "0", "]", ":", "]", "\n", "sp_boxes_bv", "=", "center_to_corner_box2d", "(", "\n", "sp_boxes_new", "[", ":", ",", "0", ":", "2", "]", ",", "sp_boxes_new", "[", ":", ",", "3", ":", "5", "]", ",", "sp_boxes_new", "[", ":", ",", "6", "]", ")", "\n", "\n", "total_bv", "=", "np", ".", "concatenate", "(", "[", "gt_boxes_bv", ",", "sp_boxes_bv", "]", ",", "axis", "=", "0", ")", "\n", "\n", "coll_mat", "=", "box_collision_test", "(", "total_bv", ",", "total_bv", ")", "\n", "diag", "=", "np", ".", "arange", "(", "total_bv", ".", "shape", "[", "0", "]", ")", "\n", "coll_mat", "[", "diag", ",", "diag", "]", "=", "False", "\n", "\n", "valid_samples", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_gt", ",", "num_gt", "+", "num_sampled", ")", ":", "\n", "            ", "if", "coll_mat", "[", "i", "]", ".", "any", "(", ")", ":", "\n", "                ", "coll_mat", "[", "i", "]", "=", "False", "\n", "coll_mat", "[", ":", ",", "i", "]", "=", "False", "\n", "", "else", ":", "\n", "                ", "valid_samples", ".", "append", "(", "sampled", "[", "i", "-", "num_gt", "]", ")", "\n", "", "", "return", "valid_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.point_cloud.point_augmentor.PointAugmentor.random_flip": [[263, 271], ["numpy.random.choice"], "methods", ["None"], ["", "def", "random_flip", "(", "self", ",", "gt_boxes", ",", "points", ",", "probability", "=", "0.5", ")", ":", "\n", "        ", "enable", "=", "np", ".", "random", ".", "choice", "(", "\n", "[", "False", ",", "True", "]", ",", "replace", "=", "False", ",", "p", "=", "[", "1", "-", "probability", ",", "probability", "]", ")", "\n", "if", "enable", ":", "\n", "            ", "gt_boxes", "[", ":", ",", "1", "]", "=", "-", "gt_boxes", "[", ":", ",", "1", "]", "\n", "gt_boxes", "[", ":", ",", "6", "]", "=", "-", "gt_boxes", "[", ":", ",", "6", "]", "+", "np", ".", "pi", "\n", "points", "[", ":", ",", "1", "]", "=", "-", "points", "[", ":", ",", "1", "]", "\n", "", "return", "gt_boxes", ",", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.point_cloud.point_augmentor.PointAugmentor.global_rotation": [[272, 281], ["numpy.random.uniform", "mmdet.core.bbox3d.geometry.rotation_points_single_angle", "mmdet.core.bbox3d.geometry.rotation_points_single_angle"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.rotation_points_single_angle", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.rotation_points_single_angle"], ["", "def", "global_rotation", "(", "self", ",", "gt_boxes", ",", "points", ")", ":", "\n", "        ", "noise_rotation", "=", "np", ".", "random", ".", "uniform", "(", "self", ".", "_global_rot_range", "[", "0", "]", ",", "self", ".", "_global_rot_range", "[", "1", "]", ")", "\n", "points", "[", ":", ",", ":", "3", "]", "=", "rotation_points_single_angle", "(", "\n", "points", "[", ":", ",", ":", "3", "]", ",", "noise_rotation", ",", "axis", "=", "2", ")", "\n", "gt_boxes", "[", ":", ",", ":", "3", "]", "=", "rotation_points_single_angle", "(", "\n", "gt_boxes", "[", ":", ",", ":", "3", "]", ",", "noise_rotation", ",", "axis", "=", "2", ")", "\n", "gt_boxes", "[", ":", ",", "6", "]", "+=", "noise_rotation", "\n", "return", "gt_boxes", ",", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.point_cloud.point_augmentor.PointAugmentor.global_scaling": [[282, 287], ["numpy.random.uniform"], "methods", ["None"], ["", "def", "global_scaling", "(", "self", ",", "gt_boxes", ",", "points", ")", ":", "\n", "        ", "noise_scale", "=", "np", ".", "random", ".", "uniform", "(", "self", ".", "_min_scale", ",", "self", ".", "_max_scale", ")", "\n", "points", "[", ":", ",", ":", "3", "]", "*=", "noise_scale", "\n", "gt_boxes", "[", ":", ",", ":", "6", "]", "*=", "noise_scale", "\n", "return", "gt_boxes", ",", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.point_cloud.point_augmentor.PointAugmentor.noise_per_object_": [[289, 328], ["numpy.array", "numpy.random.normal", "numpy.random.uniform", "mmdet.core.bbox3d.geometry.center_to_corner_box3d", "point_augmentor.noise_per_box", "point_augmentor.select_transform", "point_augmentor.select_transform", "mmdet.core.bbox3d.geometry.corner_to_surfaces_3d_jit", "point_augmentor.box3d_transform_", "numpy.ones", "mmdet.core.bbox3d.geometry.points_in_convex_polygon_3d_jit", "point_augmentor.points_transform_"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.center_to_corner_box3d", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.point_cloud.point_augmentor.noise_per_box", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.point_cloud.point_augmentor.select_transform", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.point_cloud.point_augmentor.select_transform", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.corner_to_surfaces_3d_jit", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.point_cloud.point_augmentor.box3d_transform_", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.points_in_convex_polygon_3d_jit", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.point_cloud.point_augmentor.points_transform_"], ["", "def", "noise_per_object_", "(", "self", ",", "\n", "gt_boxes", ",", "\n", "points", "=", "None", ",", "\n", "valid_mask", "=", "None", ",", "\n", "num_try", "=", "100", ")", ":", "\n", "        ", "\"\"\"random rotate or remove each groundtrutn independently.\n        use kitti viewer to test this function points_transform_\n\n        Args:\n            gt_boxes: [N, 7], gt box in lidar.points_transform_\n            points: [M, 4], point cloud in lidar.\n        \"\"\"", "\n", "num_boxes", "=", "gt_boxes", ".", "shape", "[", "0", "]", "\n", "\n", "if", "valid_mask", "is", "None", ":", "\n", "            ", "valid_mask", "=", "np", ".", "ones", "(", "(", "num_boxes", ",", ")", ",", "dtype", "=", "np", ".", "bool_", ")", "\n", "", "center_noise_std", "=", "np", ".", "array", "(", "self", ".", "_center_noise_std", ",", "dtype", "=", "gt_boxes", ".", "dtype", ")", "\n", "loc_noises", "=", "np", ".", "random", ".", "normal", "(", "\n", "scale", "=", "center_noise_std", ",", "size", "=", "[", "num_boxes", ",", "num_try", ",", "3", "]", ")", "\n", "\n", "rot_noises", "=", "np", ".", "random", ".", "uniform", "(", "\n", "self", ".", "_global_rot_range", "[", "0", "]", ",", "self", ".", "_global_rot_range", "[", "1", "]", ",", "size", "=", "[", "num_boxes", ",", "num_try", "]", ")", "\n", "\n", "origin", "=", "[", "0.5", ",", "0.5", ",", "0", "]", "\n", "gt_box_corners", "=", "center_to_corner_box3d", "(", "gt_boxes", ",", "origin", "=", "origin", ",", "axis", "=", "2", ")", "\n", "\n", "selected_noise", "=", "noise_per_box", "(", "gt_boxes", "[", ":", ",", "[", "0", ",", "1", ",", "3", ",", "4", ",", "6", "]", "]", ",", "\n", "valid_mask", ",", "loc_noises", ",", "rot_noises", ")", "\n", "\n", "loc_transforms", "=", "select_transform", "(", "loc_noises", ",", "selected_noise", ")", "\n", "rot_transforms", "=", "select_transform", "(", "rot_noises", ",", "selected_noise", ")", "\n", "surfaces", "=", "corner_to_surfaces_3d_jit", "(", "gt_box_corners", ")", "\n", "\n", "if", "points", "is", "not", "None", ":", "\n", "            ", "point_masks", "=", "points_in_convex_polygon_3d_jit", "(", "points", "[", ":", ",", ":", "3", "]", ",", "surfaces", ")", "\n", "points_transform_", "(", "points", ",", "gt_boxes", "[", ":", ",", ":", "3", "]", ",", "point_masks", ",", "loc_transforms", ",", "\n", "rot_transforms", ",", "valid_mask", ")", "\n", "\n", "", "box3d_transform_", "(", "gt_boxes", ",", "loc_transforms", ",", "rot_transforms", ",", "valid_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.point_cloud.point_augmentor.select_transform": [[15, 22], ["numpy.zeros", "range"], "function", ["None"], ["def", "select_transform", "(", "transform", ",", "indices", ")", ":", "\n", "    ", "result", "=", "np", ".", "zeros", "(", "\n", "(", "transform", ".", "shape", "[", "0", "]", ",", "*", "transform", ".", "shape", "[", "2", ":", "]", ")", ",", "dtype", "=", "transform", ".", "dtype", ")", "\n", "for", "i", "in", "range", "(", "transform", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "if", "indices", "[", "i", "]", "!=", "-", "1", ":", "\n", "            ", "result", "[", "i", "]", "=", "transform", "[", "i", ",", "indices", "[", "i", "]", "]", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.point_cloud.point_augmentor.rotation_matrix_3d_": [[23, 43], ["numpy.sin", "numpy.cos", "numpy.eye"], "function", ["None"], ["", "@", "numba", ".", "njit", "\n", "def", "rotation_matrix_3d_", "(", "rot_mat_T", ",", "angle", ",", "axis", ")", ":", "\n", "    ", "rot_sin", "=", "np", ".", "sin", "(", "angle", ")", "\n", "rot_cos", "=", "np", ".", "cos", "(", "angle", ")", "\n", "rot_mat_T", "[", ":", "]", "=", "np", ".", "eye", "(", "3", ")", "\n", "if", "axis", "==", "1", ":", "\n", "        ", "rot_mat_T", "[", "0", ",", "0", "]", "=", "rot_cos", "\n", "rot_mat_T", "[", "0", ",", "2", "]", "=", "-", "rot_sin", "\n", "rot_mat_T", "[", "2", ",", "0", "]", "=", "rot_sin", "\n", "rot_mat_T", "[", "2", ",", "2", "]", "=", "rot_cos", "\n", "", "elif", "axis", "==", "2", "or", "axis", "==", "-", "1", ":", "\n", "        ", "rot_mat_T", "[", "0", ",", "0", "]", "=", "rot_cos", "\n", "rot_mat_T", "[", "0", ",", "1", "]", "=", "-", "rot_sin", "\n", "rot_mat_T", "[", "1", ",", "0", "]", "=", "rot_sin", "\n", "rot_mat_T", "[", "1", ",", "1", "]", "=", "rot_cos", "\n", "", "elif", "axis", "==", "0", ":", "\n", "        ", "rot_mat_T", "[", "1", ",", "1", "]", "=", "rot_cos", "\n", "rot_mat_T", "[", "1", ",", "2", "]", "=", "-", "rot_sin", "\n", "rot_mat_T", "[", "2", ",", "1", "]", "=", "rot_sin", "\n", "rot_mat_T", "[", "2", ",", "2", "]", "=", "rot_cos", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.point_cloud.point_augmentor.points_transform_": [[44, 61], ["numpy.zeros", "range", "range", "point_augmentor.rotation_matrix_3d_", "range"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.point_cloud.point_augmentor.rotation_matrix_3d_"], ["", "", "@", "numba", ".", "njit", "\n", "def", "points_transform_", "(", "points", ",", "centers", ",", "point_masks", ",", "loc_transform", ",", "\n", "rot_transform", ",", "valid_mask", ")", ":", "\n", "    ", "num_box", "=", "centers", ".", "shape", "[", "0", "]", "\n", "num_points", "=", "points", ".", "shape", "[", "0", "]", "\n", "rot_mat_T", "=", "np", ".", "zeros", "(", "(", "num_box", ",", "3", ",", "3", ")", ",", "dtype", "=", "points", ".", "dtype", ")", "\n", "for", "i", "in", "range", "(", "num_box", ")", ":", "\n", "        ", "rotation_matrix_3d_", "(", "rot_mat_T", "[", "i", "]", ",", "rot_transform", "[", "i", "]", ",", "2", ")", "\n", "", "for", "i", "in", "range", "(", "num_points", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "num_box", ")", ":", "\n", "            ", "if", "valid_mask", "[", "j", "]", ":", "\n", "                ", "if", "point_masks", "[", "i", ",", "j", "]", "==", "1", ":", "\n", "                    ", "points", "[", "i", ",", ":", "3", "]", "-=", "centers", "[", "j", ",", ":", "3", "]", "\n", "points", "[", "i", ":", "i", "+", "1", ",", ":", "3", "]", "=", "points", "[", "i", ":", "i", "+", "1", ",", ":", "3", "]", "@", "rot_mat_T", "[", "j", "]", "\n", "points", "[", "i", ",", ":", "3", "]", "+=", "centers", "[", "j", ",", ":", "3", "]", "\n", "points", "[", "i", ",", ":", "3", "]", "+=", "loc_transform", "[", "j", "]", "\n", "break", "# only apply first box's transform", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.point_cloud.point_augmentor.box3d_transform_": [[62, 69], ["range"], "function", ["None"], ["", "", "", "", "", "@", "numba", ".", "njit", "\n", "def", "box3d_transform_", "(", "boxes", ",", "loc_transform", ",", "rot_transform", ",", "valid_mask", ")", ":", "\n", "    ", "num_box", "=", "boxes", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "num_box", ")", ":", "\n", "        ", "if", "valid_mask", "[", "i", "]", ":", "\n", "            ", "boxes", "[", "i", ",", ":", "3", "]", "+=", "loc_transform", "[", "i", "]", "\n", "boxes", "[", "i", ",", "6", "]", "+=", "rot_transform", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.point_cloud.point_augmentor.noise_per_box": [[71, 101], ["mmdet.core.bbox3d.geometry.box2d_to_corner_jit", "numpy.zeros", "numpy.zeros", "range", "numpy.ones", "range", "mmdet.core.bbox3d.geometry.rotation_box2d_jit", "mmdet.core.bbox3d.geometry.box_collision_test", "np.zeros.reshape", "mmdet.core.bbox3d.geometry.box_collision_test.any"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.box2d_to_corner_jit", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.rotation_box2d_jit", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.box_collision_test"], ["", "", "", "@", "numba", ".", "njit", "\n", "def", "noise_per_box", "(", "boxes", ",", "valid_mask", ",", "loc_noises", ",", "rot_noises", ")", ":", "\n", "# boxes: [N, 5]", "\n", "# valid_mask: [N]", "\n", "# loc_noises: [N, M, 3]", "\n", "# rot_noises: [N, M]", "\n", "    ", "num_boxes", "=", "boxes", ".", "shape", "[", "0", "]", "\n", "num_tests", "=", "loc_noises", ".", "shape", "[", "1", "]", "\n", "box_corners", "=", "box2d_to_corner_jit", "(", "boxes", ")", "\n", "current_corners", "=", "np", ".", "zeros", "(", "(", "4", ",", "2", ")", ",", "dtype", "=", "boxes", ".", "dtype", ")", "\n", "rot_mat_T", "=", "np", ".", "zeros", "(", "(", "2", ",", "2", ")", ",", "dtype", "=", "boxes", ".", "dtype", ")", "\n", "success_mask", "=", "-", "np", ".", "ones", "(", "(", "num_boxes", ",", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "# print(valid_mask)", "\n", "for", "i", "in", "range", "(", "num_boxes", ")", ":", "\n", "        ", "if", "valid_mask", "[", "i", "]", ":", "\n", "            ", "for", "j", "in", "range", "(", "num_tests", ")", ":", "\n", "                ", "current_corners", "[", ":", "]", "=", "box_corners", "[", "i", "]", "\n", "current_corners", "-=", "boxes", "[", "i", ",", ":", "2", "]", "\n", "rotation_box2d_jit", "(", "current_corners", ",", "rot_noises", "[", "i", ",", "j", "]", ",", "\n", "rot_mat_T", ")", "\n", "current_corners", "+=", "boxes", "[", "i", ",", ":", "2", "]", "+", "loc_noises", "[", "i", ",", "j", ",", ":", "2", "]", "\n", "coll_mat", "=", "box_collision_test", "(", "\n", "current_corners", ".", "reshape", "(", "1", ",", "4", ",", "2", ")", ",", "box_corners", ")", "\n", "coll_mat", "[", "0", ",", "i", "]", "=", "False", "\n", "# print(coll_mat)", "\n", "if", "not", "coll_mat", ".", "any", "(", ")", ":", "\n", "                    ", "success_mask", "[", "i", "]", "=", "j", "\n", "box_corners", "[", "i", "]", "=", "current_corners", "\n", "break", "\n", "", "", "", "", "return", "success_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.target_ops.unmap": [[5, 20], ["len", "len", "numpy.empty", "np.empty.fill", "numpy.empty", "np.empty.fill"], "function", ["None"], ["def", "unmap", "(", "data", ",", "count", ",", "inds", ",", "fill", "=", "0", ")", ":", "\n", "    ", "\"\"\"Unmap a subset of item (data) back to the original set of items (of\n    size count)\"\"\"", "\n", "if", "count", "==", "len", "(", "inds", ")", ":", "\n", "        ", "return", "data", "\n", "\n", "", "if", "len", "(", "data", ".", "shape", ")", "==", "1", ":", "\n", "        ", "ret", "=", "np", ".", "empty", "(", "(", "count", ",", ")", ",", "dtype", "=", "data", ".", "dtype", ")", "\n", "ret", ".", "fill", "(", "fill", ")", "\n", "ret", "[", "inds", "]", "=", "data", "\n", "", "else", ":", "\n", "        ", "ret", "=", "np", ".", "empty", "(", "(", "count", ",", ")", "+", "data", ".", "shape", "[", "1", ":", "]", ",", "dtype", "=", "data", ".", "dtype", ")", "\n", "ret", ".", "fill", "(", "fill", ")", "\n", "ret", "[", "inds", ",", ":", "]", "=", "data", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.target_ops.create_target_np": [[22, 136], ["numpy.empty", "numpy.empty", "unmap.fill", "np.empty.fill", "numpy.zeros", "numpy.zeros", "len", "numpy.ones", "similarity_fn", "similarity_fn.argmax", "similarity_fn.argmax", "numpy.arange", "numpy.where", "int", "box_encoding_fn", "numpy.sum", "numpy.maximum", "target_ops.unmap", "target_ops.unmap", "numpy.where", "isinstance", "isinstance", "len", "numpy.where", "numpy.where", "len", "numpy.choice", "numpy.sum", "len", "len", "numpy.where", "len", "numpy.arange", "numpy.arange", "numpy.randint", "len", "len"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.anchor.anchor_target.unmap", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.anchor.anchor_target.unmap"], ["", "def", "create_target_np", "(", "all_anchors", ",", "\n", "gt_boxes", ",", "\n", "anchors_mask", ",", "\n", "gt_classes", ",", "\n", "similarity_fn", ",", "\n", "box_encoding_fn", ",", "\n", "matched_threshold", "=", "0.6", ",", "\n", "unmatched_threshold", "=", "0.45", ",", "\n", "positive_fraction", "=", "None", ",", "\n", "rpn_batch_size", "=", "300", ",", "\n", "norm_by_num_examples", "=", "False", ",", "\n", "box_code_size", "=", "7", ")", ":", "\n", "    ", "total_anchors", "=", "all_anchors", ".", "shape", "[", "0", "]", "\n", "if", "anchors_mask", "is", "not", "None", ":", "\n", "        ", "inds_inside", "=", "np", ".", "where", "(", "anchors_mask", ")", "[", "0", "]", "# prune_anchor_fn(all_anchors)", "\n", "anchors", "=", "all_anchors", "[", "inds_inside", ",", ":", "]", "\n", "if", "not", "isinstance", "(", "matched_threshold", ",", "float", ")", ":", "\n", "            ", "matched_threshold", "=", "matched_threshold", "[", "inds_inside", "]", "\n", "", "if", "not", "isinstance", "(", "unmatched_threshold", ",", "float", ")", ":", "\n", "            ", "unmatched_threshold", "=", "unmatched_threshold", "[", "inds_inside", "]", "\n", "", "", "else", ":", "\n", "        ", "anchors", "=", "all_anchors", "\n", "inds_inside", "=", "None", "\n", "", "num_inside", "=", "len", "(", "inds_inside", ")", "if", "inds_inside", "is", "not", "None", "else", "total_anchors", "\n", "\n", "if", "gt_classes", "is", "None", ":", "\n", "        ", "gt_classes", "=", "np", ".", "ones", "(", "[", "gt_boxes", ".", "shape", "[", "0", "]", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "# Compute anchor labels:", "\n", "# label=1 is positive, 0 is negative, -1 is don't care (ignore)", "\n", "", "labels", "=", "np", ".", "empty", "(", "(", "num_inside", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "gt_ids", "=", "np", ".", "empty", "(", "(", "num_inside", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "labels", ".", "fill", "(", "-", "1", ")", "\n", "gt_ids", ".", "fill", "(", "-", "1", ")", "\n", "if", "len", "(", "gt_boxes", ")", ">", "0", "and", "anchors", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "# Compute overlaps between the anchors and the gt boxes overlaps", "\n", "        ", "anchor_by_gt_overlap", "=", "similarity_fn", "(", "anchors", ",", "gt_boxes", ")", "\n", "# Map from anchor to gt box that has highest overlap", "\n", "anchor_to_gt_argmax", "=", "anchor_by_gt_overlap", ".", "argmax", "(", "axis", "=", "1", ")", "\n", "# For each anchor, amount of overlap with most overlapping gt box", "\n", "anchor_to_gt_max", "=", "anchor_by_gt_overlap", "[", "np", ".", "arange", "(", "num_inside", ")", ",", "\n", "anchor_to_gt_argmax", "]", "#", "\n", "# Map from gt box to an anchor that has highest overlap", "\n", "gt_to_anchor_argmax", "=", "anchor_by_gt_overlap", ".", "argmax", "(", "axis", "=", "0", ")", "\n", "# For each gt box, amount of overlap with most overlapping anchor", "\n", "gt_to_anchor_max", "=", "anchor_by_gt_overlap", "[", "\n", "gt_to_anchor_argmax", ",", "\n", "np", ".", "arange", "(", "anchor_by_gt_overlap", ".", "shape", "[", "1", "]", ")", "]", "\n", "# must remove gt which doesn't match any anchor.", "\n", "empty_gt_mask", "=", "gt_to_anchor_max", "==", "0", "\n", "gt_to_anchor_max", "[", "empty_gt_mask", "]", "=", "-", "1", "\n", "# Find all anchors that share the max overlap amount", "\n", "# (this includes many ties)", "\n", "anchors_with_max_overlap", "=", "np", ".", "where", "(", "\n", "anchor_by_gt_overlap", "==", "gt_to_anchor_max", ")", "[", "0", "]", "\n", "# Fg label: for each gt use anchors with highest overlap", "\n", "# (including ties)", "\n", "gt_inds_force", "=", "anchor_to_gt_argmax", "[", "anchors_with_max_overlap", "]", "\n", "labels", "[", "anchors_with_max_overlap", "]", "=", "gt_classes", "[", "gt_inds_force", "]", "\n", "gt_ids", "[", "anchors_with_max_overlap", "]", "=", "gt_inds_force", "\n", "# Fg label: above threshold IOU", "\n", "pos_inds", "=", "anchor_to_gt_max", ">=", "matched_threshold", "\n", "gt_inds", "=", "anchor_to_gt_argmax", "[", "pos_inds", "]", "\n", "labels", "[", "pos_inds", "]", "=", "gt_classes", "[", "gt_inds", "]", "\n", "gt_ids", "[", "pos_inds", "]", "=", "gt_inds", "\n", "bg_inds", "=", "np", ".", "where", "(", "anchor_to_gt_max", "<", "unmatched_threshold", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "bg_inds", "=", "np", ".", "arange", "(", "num_inside", ")", "\n", "", "fg_inds", "=", "np", ".", "where", "(", "labels", ">", "0", ")", "[", "0", "]", "\n", "\n", "# subsample positive labels if we have too many", "\n", "if", "positive_fraction", "is", "not", "None", ":", "\n", "        ", "num_fg", "=", "int", "(", "positive_fraction", "*", "rpn_batch_size", ")", "\n", "if", "len", "(", "fg_inds", ")", ">", "num_fg", ":", "\n", "            ", "disable_inds", "=", "npr", ".", "choice", "(", "\n", "fg_inds", ",", "size", "=", "(", "len", "(", "fg_inds", ")", "-", "num_fg", ")", ",", "replace", "=", "False", ")", "\n", "labels", "[", "disable_inds", "]", "=", "-", "1", "\n", "fg_inds", "=", "np", ".", "where", "(", "labels", ">", "0", ")", "[", "0", "]", "\n", "\n", "# subsample negative labels if we have too many", "\n", "# (samples with replacement, but since the set of bg inds is large most", "\n", "# samples will not have repeats)", "\n", "", "num_bg", "=", "rpn_batch_size", "-", "np", ".", "sum", "(", "labels", ">", "0", ")", "\n", "# print(num_fg, num_bg, len(bg_inds) )", "\n", "if", "len", "(", "bg_inds", ")", ">", "num_bg", ":", "\n", "            ", "enable_inds", "=", "bg_inds", "[", "npr", ".", "randint", "(", "len", "(", "bg_inds", ")", ",", "size", "=", "num_bg", ")", "]", "\n", "labels", "[", "enable_inds", "]", "=", "0", "\n", "", "", "else", ":", "\n", "        ", "if", "len", "(", "gt_boxes", ")", "==", "0", "or", "anchors", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "labels", "[", ":", "]", "=", "0", "\n", "", "else", ":", "\n", "            ", "labels", "[", "bg_inds", "]", "=", "0", "\n", "# re-enable anchors_with_max_overlap", "\n", "labels", "[", "anchors_with_max_overlap", "]", "=", "gt_classes", "[", "gt_inds_force", "]", "\n", "", "", "bbox_targets", "=", "np", ".", "zeros", "(", "\n", "(", "num_inside", ",", "box_code_size", ")", ",", "dtype", "=", "all_anchors", ".", "dtype", ")", "\n", "if", "len", "(", "gt_boxes", ")", ">", "0", "and", "anchors", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "        ", "bbox_targets", "[", "fg_inds", ",", ":", "]", "=", "box_encoding_fn", "(", "\n", "gt_boxes", "[", "anchor_to_gt_argmax", "[", "fg_inds", "]", ",", ":", "]", ",", "anchors", "[", "fg_inds", ",", ":", "]", ")", "\n", "", "bbox_outside_weights", "=", "np", ".", "zeros", "(", "(", "num_inside", ",", ")", ",", "dtype", "=", "all_anchors", ".", "dtype", ")", "\n", "\n", "# uniform weighting of examples (given non-uniform sampling)", "\n", "if", "norm_by_num_examples", ":", "\n", "        ", "num_examples", "=", "np", ".", "sum", "(", "labels", ">=", "0", ")", "# neg + pos", "\n", "num_examples", "=", "np", ".", "maximum", "(", "1.0", ",", "num_examples", ")", "\n", "bbox_outside_weights", "[", "labels", ">", "0", "]", "=", "1.0", "/", "num_examples", "\n", "", "else", ":", "\n", "        ", "bbox_outside_weights", "[", "labels", ">", "0", "]", "=", "1.0", "\n", "\n", "# Map up to original set of anchors", "\n", "", "if", "inds_inside", "is", "not", "None", ":", "\n", "        ", "labels", "=", "unmap", "(", "labels", ",", "total_anchors", ",", "inds_inside", ",", "fill", "=", "-", "1", ")", "\n", "bbox_targets", "=", "unmap", "(", "bbox_targets", ",", "total_anchors", ",", "inds_inside", ",", "fill", "=", "0", ")", "\n", "\n", "", "return", "(", "labels", ",", "bbox_targets", ",", "anchor_to_gt_max", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.target_ops.create_target_torch": [[138, 272], ["torch.empty().fill_", "torch.empty().fill_", "torch.zeros", "torch.zeros", "len", "torch.ones", "similarity_fn", "similarity_fn.argmax", "similarity_fn.argmax", "torch.arange", "torch.nonzero", "int", "box_encoding_fn", "torch.sum", "numpy.maximum", "target_ops.create_target_torch._unmap"], "function", ["None"], ["", "def", "create_target_torch", "(", "all_anchors", ",", "\n", "gt_boxes", ",", "\n", "anchor_mask", ",", "\n", "gt_classes", ",", "\n", "similarity_fn", ",", "\n", "box_encoding_fn", ",", "\n", "matched_threshold", "=", "0.6", ",", "\n", "unmatched_threshold", "=", "0.45", ",", "\n", "positive_fraction", "=", "None", ",", "\n", "rpn_batch_size", "=", "300", ",", "\n", "norm_by_num_examples", "=", "False", ",", "\n", "box_code_size", "=", "7", ")", ":", "\n", "\n", "    ", "def", "_unmap", "(", "data", ",", "count", ",", "inds", ",", "fill", "=", "0", ")", ":", "\n", "        ", "\"\"\" Unmap a subset of item (data) back to the original set of items (of\n        size count) \"\"\"", "\n", "if", "data", ".", "dim", "(", ")", "==", "1", ":", "\n", "            ", "ret", "=", "data", ".", "new_full", "(", "(", "count", ",", ")", ",", "fill", ")", "\n", "ret", "[", "inds", "]", "=", "data", "\n", "", "else", ":", "\n", "            ", "new_size", "=", "(", "count", ",", ")", "+", "data", ".", "size", "(", ")", "[", "1", ":", "]", "\n", "ret", "=", "data", ".", "new_full", "(", "new_size", ",", "fill", ")", "\n", "ret", "[", "inds", ",", ":", "]", "=", "data", "\n", "", "return", "ret", "\n", "\n", "", "total_anchors", "=", "all_anchors", ".", "shape", "[", "0", "]", "\n", "if", "anchor_mask", "is", "not", "None", ":", "\n", "#inds_inside = np.where(anchors_mask)[0]  # prune_anchor_fn(all_anchors)", "\n", "        ", "anchors", "=", "all_anchors", "[", "anchor_mask", ",", ":", "]", "\n", "if", "not", "isinstance", "(", "matched_threshold", ",", "float", ")", ":", "\n", "            ", "matched_threshold", "=", "matched_threshold", "[", "anchor_mask", "]", "\n", "", "if", "not", "isinstance", "(", "unmatched_threshold", ",", "float", ")", ":", "\n", "            ", "unmatched_threshold", "=", "unmatched_threshold", "[", "anchor_mask", "]", "\n", "", "", "else", ":", "\n", "        ", "anchors", "=", "all_anchors", "\n", "#inds_inside = None", "\n", "", "num_inside", "=", "len", "(", "torch", ".", "nonzero", "(", "anchor_mask", ")", ")", "if", "anchor_mask", "is", "not", "None", "else", "total_anchors", "\n", "\n", "if", "gt_classes", "is", "None", ":", "\n", "        ", "gt_classes", "=", "torch", ".", "ones", "(", "[", "gt_boxes", ".", "shape", "[", "0", "]", "]", ",", "dtype", "=", "torch", ".", "int64", ",", "device", "=", "gt_boxes", ".", "device", ")", "\n", "# Compute anchor labels:", "\n", "# label=1 is positive, 0 is negative, -1 is don't care (ignore)", "\n", "", "labels", "=", "torch", ".", "empty", "(", "(", "num_inside", ",", ")", ",", "dtype", "=", "torch", ".", "int64", ",", "device", "=", "gt_boxes", ".", "device", ")", ".", "fill_", "(", "-", "1", ")", "\n", "gt_ids", "=", "torch", ".", "empty", "(", "(", "num_inside", ",", ")", ",", "dtype", "=", "torch", ".", "int64", ",", "device", "=", "gt_boxes", ".", "device", ")", ".", "fill_", "(", "-", "1", ")", "\n", "\n", "if", "len", "(", "gt_boxes", ")", ">", "0", "and", "anchors", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "# Compute overlaps between the anchors and the gt boxes overlaps", "\n", "        ", "anchor_by_gt_overlap", "=", "similarity_fn", "(", "anchors", ",", "gt_boxes", ")", "\n", "# Map from anchor to gt box that has highest overlap", "\n", "anchor_to_gt_argmax", "=", "anchor_by_gt_overlap", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "# For each anchor, amount of overlap with most overlapping gt box", "\n", "anchor_to_gt_max", "=", "anchor_by_gt_overlap", "[", "torch", ".", "arange", "(", "num_inside", ")", ",", "\n", "anchor_to_gt_argmax", "]", "#", "\n", "# Map from gt box to an anchor that has highest overlap", "\n", "gt_to_anchor_argmax", "=", "anchor_by_gt_overlap", ".", "argmax", "(", "dim", "=", "0", ")", "\n", "# For each gt box, amount of overlap with most overlapping anchor", "\n", "gt_to_anchor_max", "=", "anchor_by_gt_overlap", "[", "\n", "gt_to_anchor_argmax", ",", "\n", "torch", ".", "arange", "(", "anchor_by_gt_overlap", ".", "shape", "[", "1", "]", ")", "]", "\n", "# must remove gt which doesn't match any anchor.", "\n", "empty_gt_mask", "=", "gt_to_anchor_max", "==", "0", "\n", "gt_to_anchor_max", "[", "empty_gt_mask", "]", "=", "-", "1", "\n", "# Find all anchors that share the max overlap amount", "\n", "# (this includes many ties)", "\n", "\n", "anchors_with_max_overlap", "=", "torch", ".", "nonzero", "(", "\n", "anchor_by_gt_overlap", "==", "gt_to_anchor_max", ")", "[", ":", ",", "0", "]", "\n", "# Fg label: for each gt use anchors with highest overlap", "\n", "# (including ties)", "\n", "gt_inds_force", "=", "anchor_to_gt_argmax", "[", "anchors_with_max_overlap", "]", "\n", "labels", "[", "anchors_with_max_overlap", "]", "=", "gt_classes", "[", "gt_inds_force", "]", "\n", "gt_ids", "[", "anchors_with_max_overlap", "]", "=", "gt_inds_force", "\n", "# Fg label: above threshold IOU", "\n", "pos_inds", "=", "anchor_to_gt_max", ">=", "matched_threshold", "\n", "gt_inds", "=", "anchor_to_gt_argmax", "[", "pos_inds", "]", "\n", "labels", "[", "pos_inds", "]", "=", "gt_classes", "[", "gt_inds", "]", "\n", "gt_ids", "[", "pos_inds", "]", "=", "gt_inds", "\n", "#bg_inds = np.where(anchor_to_gt_max < unmatched_threshold)[0]", "\n", "bg_inds", "=", "torch", ".", "nonzero", "(", "anchor_to_gt_max", "<", "unmatched_threshold", ")", "[", ":", ",", "0", "]", "\n", "", "else", ":", "\n", "        ", "bg_inds", "=", "torch", ".", "arange", "(", "num_inside", ")", "\n", "\n", "#fg_inds = np.where(labels > 0)[0]", "\n", "", "fg_inds", "=", "torch", ".", "nonzero", "(", "labels", ">", "0", ")", "[", ":", ",", "0", "]", "\n", "\n", "# subsample positive labels if we have too many", "\n", "if", "positive_fraction", "is", "not", "None", ":", "\n", "        ", "num_fg", "=", "int", "(", "positive_fraction", "*", "rpn_batch_size", ")", "\n", "if", "len", "(", "fg_inds", ")", ">", "num_fg", ":", "\n", "            ", "disable_inds", "=", "npr", ".", "choice", "(", "\n", "fg_inds", ",", "size", "=", "(", "len", "(", "fg_inds", ")", "-", "num_fg", ")", ",", "replace", "=", "False", ")", "\n", "labels", "[", "disable_inds", "]", "=", "-", "1", "\n", "#fg_inds = np.where(labels > 0)[0]", "\n", "fg_inds", "=", "torch", ".", "where", "(", "labels", ">", "0", ")", "[", ":", ",", "0", "]", "\n", "\n", "# subsample negative labels if we have too many", "\n", "# (samples with replacement, but since the set of bg inds is large most", "\n", "# samples will not have repeats)", "\n", "", "num_bg", "=", "rpn_batch_size", "-", "np", ".", "sum", "(", "labels", ">", "0", ")", "\n", "# print(num_fg, num_bg, len(bg_inds) )", "\n", "if", "len", "(", "bg_inds", ")", ">", "num_bg", ":", "\n", "            ", "enable_inds", "=", "bg_inds", "[", "npr", ".", "randint", "(", "len", "(", "bg_inds", ")", ",", "size", "=", "num_bg", ")", "]", "\n", "labels", "[", "enable_inds", "]", "=", "0", "\n", "", "", "else", ":", "\n", "        ", "if", "len", "(", "gt_boxes", ")", "==", "0", "or", "anchors", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "labels", "[", ":", "]", "=", "0", "\n", "", "else", ":", "\n", "            ", "labels", "[", "bg_inds", "]", "=", "0", "\n", "# re-enable anchors_with_max_overlap", "\n", "labels", "[", "anchors_with_max_overlap", "]", "=", "gt_classes", "[", "gt_inds_force", "]", "\n", "\n", "", "", "bbox_targets", "=", "torch", ".", "zeros", "(", "\n", "(", "num_inside", ",", "box_code_size", ")", ",", "dtype", "=", "all_anchors", ".", "dtype", ",", "device", "=", "gt_boxes", ".", "device", ")", "\n", "\n", "if", "len", "(", "gt_boxes", ")", ">", "0", "and", "anchors", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "        ", "bbox_targets", "[", "fg_inds", ",", ":", "]", "=", "box_encoding_fn", "(", "\n", "gt_boxes", "[", "anchor_to_gt_argmax", "[", "fg_inds", "]", ",", ":", "]", ",", "anchors", "[", "fg_inds", ",", ":", "]", ")", "\n", "\n", "", "bbox_outside_weights", "=", "torch", ".", "zeros", "(", "(", "num_inside", ",", ")", ",", "dtype", "=", "all_anchors", ".", "dtype", ",", "device", "=", "gt_boxes", ".", "device", ")", "\n", "\n", "# uniform weighting of examples (given non-uniform sampling)", "\n", "if", "norm_by_num_examples", ":", "\n", "        ", "num_examples", "=", "torch", ".", "sum", "(", "labels", ">=", "0", ")", "# neg + pos", "\n", "num_examples", "=", "np", ".", "maximum", "(", "1.0", ",", "num_examples", ")", "\n", "bbox_outside_weights", "[", "labels", ">", "0", "]", "=", "1.0", "/", "num_examples", "\n", "", "else", ":", "\n", "        ", "bbox_outside_weights", "[", "labels", ">", "0", "]", "=", "1.0", "\n", "\n", "# Map up to original set of anchors", "\n", "", "if", "anchor_mask", "is", "not", "None", ":", "\n", "        ", "labels", "=", "_unmap", "(", "labels", ",", "total_anchors", ",", "anchor_mask", ",", "fill", "=", "-", "1", ")", "\n", "bbox_targets", "=", "_unmap", "(", "bbox_targets", ",", "total_anchors", ",", "anchor_mask", ",", "fill", "=", "0", ")", "\n", "\n", "", "return", "(", "labels", ",", "bbox_targets", ",", "anchor_to_gt_max", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.get_frustum": [[4, 22], ["numpy.array", "numpy.concatenate", "numpy.concatenate", "numpy.array", "numpy.array", "numpy.array"], "function", ["None"], ["def", "get_frustum", "(", "bbox_image", ",", "C", ",", "near_clip", "=", "0.001", ",", "far_clip", "=", "100", ")", ":", "\n", "    ", "fku", "=", "C", "[", "0", ",", "0", "]", "\n", "fkv", "=", "-", "C", "[", "1", ",", "1", "]", "\n", "u0v0", "=", "C", "[", "0", ":", "2", ",", "2", "]", "\n", "z_points", "=", "np", ".", "array", "(", "\n", "[", "near_clip", "]", "*", "4", "+", "[", "far_clip", "]", "*", "4", ",", "dtype", "=", "C", ".", "dtype", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "b", "=", "bbox_image", "\n", "box_corners", "=", "np", ".", "array", "(", "\n", "[", "[", "b", "[", "0", "]", ",", "b", "[", "1", "]", "]", ",", "[", "b", "[", "0", "]", ",", "b", "[", "3", "]", "]", ",", "[", "b", "[", "2", "]", ",", "b", "[", "3", "]", "]", ",", "[", "b", "[", "2", "]", ",", "b", "[", "1", "]", "]", "]", ",", "\n", "dtype", "=", "C", ".", "dtype", ")", "\n", "near_box_corners", "=", "(", "box_corners", "-", "u0v0", ")", "/", "np", ".", "array", "(", "\n", "[", "fku", "/", "near_clip", ",", "-", "fkv", "/", "near_clip", "]", ",", "dtype", "=", "C", ".", "dtype", ")", "\n", "far_box_corners", "=", "(", "box_corners", "-", "u0v0", ")", "/", "np", ".", "array", "(", "\n", "[", "fku", "/", "far_clip", ",", "-", "fkv", "/", "far_clip", "]", ",", "dtype", "=", "C", ".", "dtype", ")", "\n", "ret_xy", "=", "np", ".", "concatenate", "(", "\n", "[", "near_box_corners", ",", "far_box_corners", "]", ",", "axis", "=", "0", ")", "# [8, 2]", "\n", "ret_xyz", "=", "np", ".", "concatenate", "(", "[", "ret_xy", ",", "z_points", "]", ",", "axis", "=", "1", ")", "\n", "return", "ret_xyz", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.projection_matrix_to_CRT_kitti": [[23, 35], ["numpy.linalg.inv", "numpy.linalg.qr", "numpy.linalg.inv", "numpy.linalg.inv"], "function", ["None"], ["", "def", "projection_matrix_to_CRT_kitti", "(", "proj", ")", ":", "\n", "# P = C @ [R|T]", "\n", "# C is upper triangular matrix, so we need to inverse CR and use QR", "\n", "# stable for all kitti camera projection matrix", "\n", "    ", "CR", "=", "proj", "[", "0", ":", "3", ",", "0", ":", "3", "]", "\n", "CT", "=", "proj", "[", "0", ":", "3", ",", "3", "]", "\n", "RinvCinv", "=", "np", ".", "linalg", ".", "inv", "(", "CR", ")", "\n", "Rinv", ",", "Cinv", "=", "np", ".", "linalg", ".", "qr", "(", "RinvCinv", ")", "\n", "C", "=", "np", ".", "linalg", ".", "inv", "(", "Cinv", ")", "\n", "R", "=", "np", ".", "linalg", ".", "inv", "(", "Rinv", ")", "\n", "T", "=", "Cinv", "@", "CT", "\n", "return", "C", ",", "R", ",", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.box_camera_to_lidar": [[36, 42], ["geometry.camera_to_lidar", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.camera_to_lidar"], ["", "def", "box_camera_to_lidar", "(", "data", ",", "r_rect", ",", "velo2cam", ")", ":", "\n", "    ", "xyz", "=", "data", "[", ":", ",", "0", ":", "3", "]", "\n", "l", ",", "h", ",", "w", "=", "data", "[", ":", ",", "3", ":", "4", "]", ",", "data", "[", ":", ",", "4", ":", "5", "]", ",", "data", "[", ":", ",", "5", ":", "6", "]", "\n", "r", "=", "data", "[", ":", ",", "6", ":", "7", "]", "\n", "xyz_lidar", "=", "camera_to_lidar", "(", "xyz", ",", "r_rect", ",", "velo2cam", ")", "\n", "return", "np", ".", "concatenate", "(", "[", "xyz_lidar", ",", "w", ",", "l", ",", "h", ",", "r", "]", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.camera_to_lidar": [[43, 49], ["list", "numpy.concatenate", "numpy.linalg.inv", "numpy.ones"], "function", ["None"], ["", "def", "camera_to_lidar", "(", "points", ",", "r_rect", ",", "velo2cam", ")", ":", "\n", "    ", "points_shape", "=", "list", "(", "points", ".", "shape", "[", "0", ":", "-", "1", "]", ")", "\n", "if", "points", ".", "shape", "[", "-", "1", "]", "==", "3", ":", "\n", "        ", "points", "=", "np", ".", "concatenate", "(", "[", "points", ",", "np", ".", "ones", "(", "points_shape", "+", "[", "1", "]", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "lidar_points", "=", "points", "@", "np", ".", "linalg", ".", "inv", "(", "(", "r_rect", "@", "velo2cam", ")", ".", "T", ")", "\n", "return", "lidar_points", "[", "...", ",", ":", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.remove_outside_points": [[50, 62], ["geometry.projection_matrix_to_CRT_kitti", "geometry.get_frustum", "geometry.camera_to_lidar", "geometry.corner_to_surfaces_3d_jit", "geometry.points_in_convex_polygon_3d_jit", "numpy.linalg.inv", "points_in_convex_polygon_3d_jit.reshape"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.projection_matrix_to_CRT_kitti", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.get_frustum", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.camera_to_lidar", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.corner_to_surfaces_3d_jit", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.points_in_convex_polygon_3d_jit"], ["", "def", "remove_outside_points", "(", "points", ",", "rect", ",", "Trv2c", ",", "P2", ",", "image_shape", ")", ":", "\n", "# 5x faster than remove_outside_points_v1(2ms vs 10ms)", "\n", "    ", "C", ",", "R", ",", "T", "=", "projection_matrix_to_CRT_kitti", "(", "P2", ")", "\n", "image_bbox", "=", "[", "0", ",", "0", ",", "image_shape", "[", "1", "]", ",", "image_shape", "[", "0", "]", "]", "\n", "frustum", "=", "get_frustum", "(", "image_bbox", ",", "C", ")", "\n", "frustum", "-=", "T", "\n", "frustum", "=", "np", ".", "linalg", ".", "inv", "(", "R", ")", "@", "frustum", ".", "T", "\n", "frustum", "=", "camera_to_lidar", "(", "frustum", ".", "T", ",", "rect", ",", "Trv2c", ")", "\n", "frustum_surfaces", "=", "corner_to_surfaces_3d_jit", "(", "frustum", "[", "np", ".", "newaxis", ",", "...", "]", ")", "\n", "indices", "=", "points_in_convex_polygon_3d_jit", "(", "points", "[", ":", ",", ":", "3", "]", ",", "frustum_surfaces", ")", "\n", "points", "=", "points", "[", "indices", ".", "reshape", "(", "[", "-", "1", "]", ")", "]", "\n", "return", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.points_in_rbbox": [[63, 75], ["geometry.center_to_corner_box3d", "geometry.corner_to_surfaces_3d", "geometry.points_in_convex_polygon_3d_jit"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.center_to_corner_box3d", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.corner_to_surfaces_3d", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.points_in_convex_polygon_3d_jit"], ["", "def", "points_in_rbbox", "(", "points", ",", "rbbox", ",", "lidar", "=", "True", ")", ":", "\n", "    ", "if", "lidar", ":", "\n", "        ", "h_axis", "=", "2", "\n", "origin", "=", "[", "0.5", ",", "0.5", ",", "0", "]", "\n", "", "else", ":", "\n", "        ", "origin", "=", "[", "0.5", ",", "1.0", ",", "0.5", "]", "\n", "h_axis", "=", "1", "\n", "", "rbbox_corners", "=", "center_to_corner_box3d", "(", "\n", "rbbox", ",", "origin", "=", "origin", ",", "axis", "=", "h_axis", ")", "\n", "surfaces", "=", "corner_to_surfaces_3d", "(", "rbbox_corners", ")", "\n", "indices", "=", "points_in_convex_polygon_3d_jit", "(", "points", "[", ":", ",", ":", "3", "]", ",", "surfaces", ")", "\n", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.corner_to_surfaces_3d": [[76, 96], ["numba.jit", "numpy.array().transpose", "numpy.array"], "function", ["None"], ["", "@", "numba", ".", "jit", "(", "nopython", "=", "False", ")", "\n", "def", "corner_to_surfaces_3d", "(", "corners", ")", ":", "\n", "    ", "\"\"\"convert 3d box corners from corner function above\n    to surfaces that normal vectors all direct to internal.\n\n    Args:\n        corners (float array, [N, 8, 3]): 3d box corners.\n    Returns:\n        surfaces (float array, [N, 6, 4, 3]):\n    \"\"\"", "\n", "# box_corners: [N, 8, 3], must from corner functions in this module", "\n", "surfaces", "=", "np", ".", "array", "(", "[", "\n", "[", "corners", "[", ":", ",", "0", "]", ",", "corners", "[", ":", ",", "1", "]", ",", "corners", "[", ":", ",", "2", "]", ",", "corners", "[", ":", ",", "3", "]", "]", ",", "\n", "[", "corners", "[", ":", ",", "7", "]", ",", "corners", "[", ":", ",", "6", "]", ",", "corners", "[", ":", ",", "5", "]", ",", "corners", "[", ":", ",", "4", "]", "]", ",", "\n", "[", "corners", "[", ":", ",", "0", "]", ",", "corners", "[", ":", ",", "3", "]", ",", "corners", "[", ":", ",", "7", "]", ",", "corners", "[", ":", ",", "4", "]", "]", ",", "\n", "[", "corners", "[", ":", ",", "1", "]", ",", "corners", "[", ":", ",", "5", "]", ",", "corners", "[", ":", ",", "6", "]", ",", "corners", "[", ":", ",", "2", "]", "]", ",", "\n", "[", "corners", "[", ":", ",", "0", "]", ",", "corners", "[", ":", ",", "4", "]", ",", "corners", "[", ":", ",", "5", "]", ",", "corners", "[", ":", ",", "1", "]", "]", ",", "\n", "[", "corners", "[", ":", ",", "3", "]", ",", "corners", "[", ":", ",", "2", "]", ",", "corners", "[", ":", ",", "6", "]", ",", "corners", "[", ":", ",", "7", "]", "]", ",", "\n", "]", ")", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", ",", "3", "]", ")", "\n", "return", "surfaces", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.is_line_segment_intersection_jit": [[97, 127], ["numpy.zeros", "range", "range"], "function", ["None"], ["", "@", "numba", ".", "njit", "\n", "def", "is_line_segment_intersection_jit", "(", "lines1", ",", "lines2", ")", ":", "\n", "    ", "\"\"\"check if line segments1 and line segments2 have cross point\n\n    Args:\n        lines1 (float, [N, 2, 2]): [description]\n        lines2 (float, [M, 2, 2]): [description]\n\n    Returns:\n        [type]: [description]\n    \"\"\"", "\n", "\n", "# Return true if line segments AB and CD intersect", "\n", "N", "=", "lines1", ".", "shape", "[", "0", "]", "\n", "M", "=", "lines2", ".", "shape", "[", "0", "]", "\n", "ret", "=", "np", ".", "zeros", "(", "(", "N", ",", "M", ")", ",", "dtype", "=", "np", ".", "bool_", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "M", ")", ":", "\n", "            ", "A", "=", "lines1", "[", "i", ",", "0", "]", "\n", "B", "=", "lines1", "[", "i", ",", "1", "]", "\n", "C", "=", "lines2", "[", "j", ",", "0", "]", "\n", "D", "=", "lines2", "[", "j", ",", "1", "]", "\n", "acd", "=", "(", "D", "[", "1", "]", "-", "A", "[", "1", "]", ")", "*", "(", "C", "[", "0", "]", "-", "A", "[", "0", "]", ")", ">", "(", "C", "[", "1", "]", "-", "A", "[", "1", "]", ")", "*", "(", "D", "[", "0", "]", "-", "A", "[", "0", "]", ")", "\n", "bcd", "=", "(", "D", "[", "1", "]", "-", "B", "[", "1", "]", ")", "*", "(", "C", "[", "0", "]", "-", "B", "[", "0", "]", ")", ">", "(", "C", "[", "1", "]", "-", "B", "[", "1", "]", ")", "*", "(", "D", "[", "0", "]", "-", "B", "[", "0", "]", ")", "\n", "if", "acd", "!=", "bcd", ":", "\n", "                ", "abc", "=", "(", "C", "[", "1", "]", "-", "A", "[", "1", "]", ")", "*", "(", "B", "[", "0", "]", "-", "A", "[", "0", "]", ")", ">", "(", "B", "[", "1", "]", "-", "A", "[", "1", "]", ")", "*", "(", "C", "[", "0", "]", "-", "A", "[", "0", "]", ")", "\n", "abd", "=", "(", "D", "[", "1", "]", "-", "A", "[", "1", "]", ")", "*", "(", "B", "[", "0", "]", "-", "A", "[", "0", "]", ")", ">", "(", "B", "[", "1", "]", "-", "A", "[", "1", "]", ")", "*", "(", "D", "[", "0", "]", "-", "A", "[", "0", "]", ")", "\n", "if", "abc", "!=", "abd", ":", "\n", "                    ", "ret", "[", "i", ",", "j", "]", "=", "True", "\n", "", "", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.line_segment_intersection": [[129, 156], ["None"], "function", ["None"], ["", "@", "numba", ".", "njit", "\n", "def", "line_segment_intersection", "(", "line1", ",", "line2", ",", "intersection", ")", ":", "\n", "    ", "A", "=", "line1", "[", "0", "]", "\n", "B", "=", "line1", "[", "1", "]", "\n", "C", "=", "line2", "[", "0", "]", "\n", "D", "=", "line2", "[", "1", "]", "\n", "BA0", "=", "B", "[", "0", "]", "-", "A", "[", "0", "]", "\n", "BA1", "=", "B", "[", "1", "]", "-", "A", "[", "1", "]", "\n", "DA0", "=", "D", "[", "0", "]", "-", "A", "[", "0", "]", "\n", "CA0", "=", "C", "[", "0", "]", "-", "A", "[", "0", "]", "\n", "DA1", "=", "D", "[", "1", "]", "-", "A", "[", "1", "]", "\n", "CA1", "=", "C", "[", "1", "]", "-", "A", "[", "1", "]", "\n", "acd", "=", "DA1", "*", "CA0", ">", "CA1", "*", "DA0", "\n", "bcd", "=", "(", "D", "[", "1", "]", "-", "B", "[", "1", "]", ")", "*", "(", "C", "[", "0", "]", "-", "B", "[", "0", "]", ")", ">", "(", "C", "[", "1", "]", "-", "B", "[", "1", "]", ")", "*", "(", "D", "[", "0", "]", "-", "B", "[", "0", "]", ")", "\n", "if", "acd", "!=", "bcd", ":", "\n", "        ", "abc", "=", "CA1", "*", "BA0", ">", "BA1", "*", "CA0", "\n", "abd", "=", "DA1", "*", "BA0", ">", "BA1", "*", "DA0", "\n", "if", "abc", "!=", "abd", ":", "\n", "            ", "DC0", "=", "D", "[", "0", "]", "-", "C", "[", "0", "]", "\n", "DC1", "=", "D", "[", "1", "]", "-", "C", "[", "1", "]", "\n", "ABBA", "=", "A", "[", "0", "]", "*", "B", "[", "1", "]", "-", "B", "[", "0", "]", "*", "A", "[", "1", "]", "\n", "CDDC", "=", "C", "[", "0", "]", "*", "D", "[", "1", "]", "-", "D", "[", "0", "]", "*", "C", "[", "1", "]", "\n", "DH", "=", "BA1", "*", "DC0", "-", "BA0", "*", "DC1", "\n", "intersection", "[", "0", "]", "=", "(", "ABBA", "*", "DC0", "-", "BA0", "*", "CDDC", ")", "/", "DH", "\n", "intersection", "[", "1", "]", "=", "(", "ABBA", "*", "DC1", "-", "BA1", "*", "CDDC", ")", "/", "DH", "\n", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry._ccw": [[158, 161], ["None"], "function", ["None"], ["", "def", "_ccw", "(", "A", ",", "B", ",", "C", ")", ":", "\n", "    ", "return", "(", "C", "[", "...", ",", "1", "]", "-", "A", "[", "...", ",", "1", "]", ")", "*", "(", "B", "[", "...", ",", "0", "]", "-", "A", "[", "...", ",", "0", "]", ")", ">", "(", "\n", "B", "[", "...", ",", "1", "]", "-", "A", "[", "...", ",", "1", "]", ")", "*", "(", "C", "[", "...", ",", "0", "]", "-", "A", "[", "...", ",", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.is_line_segment_cross": [[163, 174], ["numpy.logical_and", "geometry._ccw", "geometry._ccw", "geometry._ccw", "geometry._ccw"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry._ccw", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry._ccw", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry._ccw", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry._ccw"], ["", "def", "is_line_segment_cross", "(", "lines1", ",", "lines2", ")", ":", "\n", "# 10x slower than jit version with 1000-1000 random lines input.", "\n", "# lines1, [N, 2, 2]", "\n", "# lines2, [M, 2, 2]", "\n", "    ", "A", "=", "lines1", "[", ":", ",", "0", ",", ":", "]", "[", ":", ",", "np", ".", "newaxis", ",", ":", "]", "\n", "B", "=", "lines1", "[", ":", ",", "1", ",", ":", "]", "[", ":", ",", "np", ".", "newaxis", ",", ":", "]", "\n", "C", "=", "lines2", "[", ":", ",", "0", ",", ":", "]", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", "\n", "D", "=", "lines2", "[", ":", ",", "1", ",", ":", "]", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", "\n", "return", "np", ".", "logical_and", "(", "\n", "_ccw", "(", "A", ",", "C", ",", "D", ")", "!=", "_ccw", "(", "B", ",", "C", ",", "D", ")", ",", "\n", "_ccw", "(", "A", ",", "B", ",", "C", ")", "!=", "_ccw", "(", "A", ",", "B", ",", "D", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.surface_equ_3d_jit": [[176, 187], ["numba.jit", "numpy.cross", "numpy.einsum"], "function", ["None"], ["", "@", "numba", ".", "jit", "(", "nopython", "=", "False", ")", "\n", "def", "surface_equ_3d_jit", "(", "polygon_surfaces", ")", ":", "\n", "# return [a, b, c], d in ax+by+cz+d=0", "\n", "# polygon_surfaces: [num_polygon, num_surfaces, num_points_of_polygon, 3]", "\n", "    ", "surface_vec", "=", "polygon_surfaces", "[", ":", ",", ":", ",", ":", "2", ",", ":", "]", "-", "polygon_surfaces", "[", ":", ",", ":", ",", "1", ":", "3", ",", ":", "]", "\n", "# normal_vec: [..., 3]", "\n", "normal_vec", "=", "np", ".", "cross", "(", "surface_vec", "[", ":", ",", ":", ",", "0", ",", ":", "]", ",", "surface_vec", "[", ":", ",", ":", ",", "1", ",", ":", "]", ")", "\n", "# print(normal_vec.shape, points[..., 0, :].shape)", "\n", "# d = -np.inner(normal_vec, points[..., 0, :])", "\n", "d", "=", "np", ".", "einsum", "(", "'aij, aij->ai'", ",", "normal_vec", ",", "polygon_surfaces", "[", ":", ",", ":", ",", "0", ",", ":", "]", ")", "\n", "return", "normal_vec", ",", "-", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.points_in_convex_polygon_3d_jit": [[189, 227], ["numba.jit", "geometry.surface_equ_3d_jit", "numpy.ones", "range", "numpy.full", "range", "range"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.surface_equ_3d_jit"], ["", "@", "numba", ".", "jit", "(", "nopython", "=", "False", ")", "\n", "def", "points_in_convex_polygon_3d_jit", "(", "points", ",", "\n", "polygon_surfaces", ",", "\n", "num_surfaces", "=", "None", ")", ":", "\n", "    ", "\"\"\"check points is in 3d convex polygons.\n    Args:\n        points: [num_points, 3] array.\n        polygon_surfaces: [num_polygon, max_num_surfaces,\n            max_num_points_of_surface, 3]\n            array. all surfaces' normal vector must direct to internal.\n            max_num_points_of_surface must at least 3.\n        num_surfaces: [num_polygon] array. indicate how many surfaces\n            a polygon contain\n    Returns:\n        [num_points, num_polygon] bool array.\n    \"\"\"", "\n", "max_num_surfaces", ",", "max_num_points_of_surface", "=", "polygon_surfaces", ".", "shape", "[", "1", ":", "3", "]", "\n", "num_points", "=", "points", ".", "shape", "[", "0", "]", "\n", "num_polygons", "=", "polygon_surfaces", ".", "shape", "[", "0", "]", "\n", "if", "num_surfaces", "is", "None", ":", "\n", "        ", "num_surfaces", "=", "np", ".", "full", "(", "(", "num_polygons", ",", ")", ",", "9999999", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "", "normal_vec", ",", "d", "=", "surface_equ_3d_jit", "(", "polygon_surfaces", "[", ":", ",", ":", ",", ":", "3", ",", ":", "]", ")", "\n", "# normal_vec: [num_polygon, max_num_surfaces, 3]", "\n", "# d: [num_polygon, max_num_surfaces]", "\n", "ret", "=", "np", ".", "ones", "(", "(", "num_points", ",", "num_polygons", ")", ",", "dtype", "=", "np", ".", "bool_", ")", "\n", "sign", "=", "0.0", "\n", "for", "i", "in", "range", "(", "num_points", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "num_polygons", ")", ":", "\n", "            ", "for", "k", "in", "range", "(", "max_num_surfaces", ")", ":", "\n", "                ", "if", "k", ">", "num_surfaces", "[", "j", "]", ":", "\n", "                    ", "break", "\n", "", "sign", "=", "points", "[", "i", ",", "0", "]", "*", "normal_vec", "[", "j", ",", "k", ",", "0", "]", "+", "points", "[", "i", ",", "1", "]", "*", "normal_vec", "[", "j", ",", "k", ",", "1", "]", "+", "points", "[", "i", ",", "2", "]", "*", "normal_vec", "[", "j", ",", "k", ",", "2", "]", "+", "d", "[", "j", ",", "k", "]", "\n", "if", "sign", ">=", "0", ":", "\n", "                    ", "ret", "[", "i", ",", "j", "]", "=", "False", "\n", "break", "\n", "", "", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.points_in_convex_polygon_jit": [[229, 264], ["numpy.zeros", "range", "range", "range", "list", "list", "range", "range"], "function", ["None"], ["", "@", "numba", ".", "jit", "\n", "def", "points_in_convex_polygon_jit", "(", "points", ",", "polygon", ",", "clockwise", "=", "True", ")", ":", "\n", "    ", "\"\"\"check points is in 2d convex polygons. True when point in polygon\n    Args:\n        points: [num_points, 2] array.\n        polygon: [num_polygon, num_points_of_polygon, 2] array.\n        clockwise: bool. indicate polygon is clockwise.\n    Returns:\n        [num_points, num_polygon] bool array.\n    \"\"\"", "\n", "# first convert polygon to directed lines", "\n", "num_points_of_polygon", "=", "polygon", ".", "shape", "[", "1", "]", "\n", "num_points", "=", "points", ".", "shape", "[", "0", "]", "\n", "num_polygons", "=", "polygon", ".", "shape", "[", "0", "]", "\n", "if", "clockwise", ":", "\n", "        ", "vec1", "=", "polygon", "-", "polygon", "[", ":", ",", "[", "num_points_of_polygon", "-", "1", "]", "+", "\n", "list", "(", "range", "(", "num_points_of_polygon", "-", "1", ")", ")", ",", ":", "]", "\n", "", "else", ":", "\n", "        ", "vec1", "=", "polygon", "[", ":", ",", "[", "num_points_of_polygon", "-", "1", "]", "+", "\n", "list", "(", "range", "(", "num_points_of_polygon", "-", "1", ")", ")", ",", ":", "]", "-", "polygon", "\n", "# vec1: [num_polygon, num_points_of_polygon, 2]", "\n", "", "ret", "=", "np", ".", "zeros", "(", "(", "num_points", ",", "num_polygons", ")", ",", "dtype", "=", "np", ".", "bool_", ")", "\n", "success", "=", "True", "\n", "cross", "=", "0.0", "\n", "for", "i", "in", "range", "(", "num_points", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "num_polygons", ")", ":", "\n", "            ", "success", "=", "True", "\n", "for", "k", "in", "range", "(", "num_points_of_polygon", ")", ":", "\n", "                ", "cross", "=", "vec1", "[", "j", ",", "k", ",", "1", "]", "*", "(", "polygon", "[", "j", ",", "k", ",", "0", "]", "-", "points", "[", "i", ",", "0", "]", ")", "\n", "cross", "-=", "vec1", "[", "j", ",", "k", ",", "0", "]", "*", "(", "polygon", "[", "j", ",", "k", ",", "1", "]", "-", "points", "[", "i", ",", "1", "]", ")", "\n", "if", "cross", ">=", "0", ":", "\n", "                    ", "success", "=", "False", "\n", "break", "\n", "", "", "ret", "[", "i", ",", "j", "]", "=", "success", "\n", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.points_in_convex_polygon": [[266, 287], ["numpy.cross", "numpy.all", "list", "range"], "function", ["None"], ["", "def", "points_in_convex_polygon", "(", "points", ",", "polygon", ",", "clockwise", "=", "True", ")", ":", "\n", "    ", "\"\"\"check points is in convex polygons. may run 2x faster when write in\n    cython(don't need to calculate all cross-product between edge and point)\n    Args:\n        points: [num_points, 2] array.\n        polygon: [num_polygon, num_points_of_polygon, 2] array.\n        clockwise: bool. indicate polygon is clockwise.\n    Returns:\n        [num_points, num_polygon] bool array.\n    \"\"\"", "\n", "# first convert polygon to directed lines", "\n", "num_lines", "=", "polygon", ".", "shape", "[", "1", "]", "\n", "polygon_next", "=", "polygon", "[", ":", ",", "[", "num_lines", "-", "1", "]", "+", "list", "(", "range", "(", "num_lines", "-", "1", ")", ")", ",", ":", "]", "\n", "if", "clockwise", ":", "\n", "        ", "vec1", "=", "(", "polygon", "-", "polygon_next", ")", "[", "np", ".", "newaxis", ",", "...", "]", "\n", "", "else", ":", "\n", "        ", "vec1", "=", "(", "polygon_next", "-", "polygon", ")", "[", "np", ".", "newaxis", ",", "...", "]", "\n", "", "vec2", "=", "polygon", "[", "np", ".", "newaxis", ",", "...", "]", "-", "points", "[", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", ":", "]", "\n", "# [num_points, num_polygon, num_points_of_polygon, 2]", "\n", "cross", "=", "np", ".", "cross", "(", "vec1", ",", "vec2", ")", "\n", "return", "np", ".", "all", "(", "cross", ">", "0", ",", "axis", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.corners_nd": [[289, 321], ["int", "numpy.stack().astype", "numpy.array", "dims.reshape", "np.stack().astype.reshape", "numpy.stack", "numpy.unravel_index", "numpy.arange"], "function", ["None"], ["", "def", "corners_nd", "(", "dims", ",", "origin", "=", "0.5", ")", ":", "\n", "    ", "\"\"\"generate relative box corners based on length per dim and\n    origin point.\n\n    Args:\n        dims (float array, shape=[N, ndim]): array of length per dim\n        origin (list or array or float): origin point relate to smallest point.\n\n    Returns:\n        float array, shape=[N, 2 ** ndim, ndim]: returned corners.\n        point layout example: (2d) x0y0, x0y1, x1y0, x1y1;\n            (3d) x0y0z0, x0y0z1, x0y1z0, x0y1z1, x1y0z0, x1y0z1, x1y1z0, x1y1z1\n            where x0 < x1, y0 < y1, z0 < z1\n    \"\"\"", "\n", "ndim", "=", "int", "(", "dims", ".", "shape", "[", "1", "]", ")", "\n", "corners_norm", "=", "np", ".", "stack", "(", "\n", "np", ".", "unravel_index", "(", "np", ".", "arange", "(", "2", "**", "ndim", ")", ",", "[", "2", "]", "*", "ndim", ")", ",", "axis", "=", "1", ")", ".", "astype", "(", "\n", "dims", ".", "dtype", ")", "\n", "# now corners_norm has format: (2d) x0y0, x0y1, x1y0, x1y1", "\n", "# (3d) x0y0z0, x0y0z1, x0y1z0, x0y1z1, x1y0z0, x1y0z1, x1y1z0, x1y1z1", "\n", "# so need to convert to a format which is convenient to do other computing.", "\n", "# for 2d boxes, format is clockwise start with minimum point", "\n", "# for 3d boxes, please draw lines by your hand.", "\n", "if", "ndim", "==", "2", ":", "\n", "# generate clockwise box corners", "\n", "        ", "corners_norm", "=", "corners_norm", "[", "[", "0", ",", "1", ",", "3", ",", "2", "]", "]", "\n", "", "elif", "ndim", "==", "3", ":", "\n", "        ", "corners_norm", "=", "corners_norm", "[", "[", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ",", "7", ",", "6", "]", "]", "\n", "", "corners_norm", "=", "corners_norm", "-", "np", ".", "array", "(", "origin", ",", "dtype", "=", "dims", ".", "dtype", ")", "\n", "corners", "=", "dims", ".", "reshape", "(", "[", "-", "1", ",", "1", ",", "ndim", "]", ")", "*", "corners_norm", ".", "reshape", "(", "\n", "[", "1", ",", "2", "**", "ndim", ",", "ndim", "]", ")", "\n", "return", "corners", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.rotation_2d": [[323, 337], ["numpy.sin", "numpy.cos", "numpy.stack", "numpy.einsum"], "function", ["None"], ["", "def", "rotation_2d", "(", "points", ",", "angles", ")", ":", "\n", "    ", "\"\"\"rotation 2d points based on origin point clockwise when angle positive.\n\n    Args:\n        points (float array, shape=[N, point_size, 2]): points to be rotated.\n        angles (float array, shape=[N]): rotation angle.\n\n    Returns:\n        float array: same shape as points\n    \"\"\"", "\n", "rot_sin", "=", "np", ".", "sin", "(", "angles", ")", "\n", "rot_cos", "=", "np", ".", "cos", "(", "angles", ")", "\n", "rot_mat_T", "=", "np", ".", "stack", "(", "[", "[", "rot_cos", ",", "-", "rot_sin", "]", ",", "[", "rot_sin", ",", "rot_cos", "]", "]", ")", "\n", "return", "np", ".", "einsum", "(", "'aij,jka->aik'", ",", "points", ",", "rot_mat_T", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.rotation_3d_in_axis": [[338, 357], ["numpy.sin", "numpy.cos", "numpy.ones_like", "numpy.zeros_like", "numpy.einsum", "numpy.stack", "numpy.stack", "numpy.stack", "ValueError"], "function", ["None"], ["", "def", "rotation_3d_in_axis", "(", "points", ",", "angles", ",", "axis", "=", "0", ")", ":", "\n", "# points: [N, point_size, 3]", "\n", "    ", "rot_sin", "=", "np", ".", "sin", "(", "angles", ")", "\n", "rot_cos", "=", "np", ".", "cos", "(", "angles", ")", "\n", "ones", "=", "np", ".", "ones_like", "(", "rot_cos", ")", "\n", "zeros", "=", "np", ".", "zeros_like", "(", "rot_cos", ")", "\n", "if", "axis", "==", "1", ":", "\n", "        ", "rot_mat_T", "=", "np", ".", "stack", "(", "[", "[", "rot_cos", ",", "zeros", ",", "-", "rot_sin", "]", ",", "[", "zeros", ",", "ones", ",", "zeros", "]", ",", "\n", "[", "rot_sin", ",", "zeros", ",", "rot_cos", "]", "]", ")", "\n", "", "elif", "axis", "==", "2", "or", "axis", "==", "-", "1", ":", "\n", "        ", "rot_mat_T", "=", "np", ".", "stack", "(", "[", "[", "rot_cos", ",", "-", "rot_sin", ",", "zeros", "]", ",", "\n", "[", "rot_sin", ",", "rot_cos", ",", "zeros", "]", ",", "[", "zeros", ",", "zeros", ",", "ones", "]", "]", ")", "\n", "", "elif", "axis", "==", "0", ":", "\n", "        ", "rot_mat_T", "=", "np", ".", "stack", "(", "[", "[", "zeros", ",", "rot_cos", ",", "-", "rot_sin", "]", ",", "\n", "[", "zeros", ",", "rot_sin", ",", "rot_cos", "]", ",", "[", "ones", ",", "zeros", ",", "zeros", "]", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"axis should in range\"", ")", "\n", "\n", "", "return", "np", ".", "einsum", "(", "'aij,jka->aik'", ",", "points", ",", "rot_mat_T", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.center_to_corner_box2d": [[358, 379], ["geometry.corners_nd", "centers.reshape", "geometry.rotation_2d"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.corners_nd", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.rotation_2d"], ["", "def", "center_to_corner_box2d", "(", "centers", ",", "dims", ",", "angles", "=", "None", ",", "origin", "=", "0.5", ")", ":", "\n", "    ", "\"\"\"convert kitti locations, dimensions and angles to corners.\n    format: center(xy), dims(xy), angles(clockwise when positive)\n\n    Args:\n        centers (float array, shape=[N, 2]): locations in kitti label file.\n        dims (float array, shape=[N, 2]): dimensions in kitti label file.\n        angles (float array, shape=[N]): rotation_y in kitti label file.\n\n    Returns:\n        [type]: [description]\n    \"\"\"", "\n", "# 'length' in kitti format is in x axis.", "\n", "# xyz(hwl)(kitti label file)<->xyz(lhw)(camera)<->z(-x)(-y)(wlh)(lidar)", "\n", "# center in kitti format is [0.5, 1.0, 0.5] in xyz.", "\n", "corners", "=", "corners_nd", "(", "dims", ",", "origin", "=", "origin", ")", "\n", "# corners: [N, 4, 2]", "\n", "if", "angles", "is", "not", "None", ":", "\n", "        ", "corners", "=", "rotation_2d", "(", "corners", ",", "angles", ")", "\n", "", "corners", "+=", "centers", ".", "reshape", "(", "[", "-", "1", ",", "1", ",", "2", "]", ")", "\n", "return", "corners", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.center_to_corner_box3d": [[380, 402], ["geometry.corners_nd", "geometry.rotation_3d_in_axis", "centers[].reshape"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.corners_nd", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.rotation_3d_in_axis"], ["", "def", "center_to_corner_box3d", "(", "centers", ",", "\n", "origin", "=", "[", "0.5", ",", "0.5", ",", "0", "]", ",", "\n", "axis", "=", "2", ")", ":", "\n", "    ", "\"\"\"convert kitti locations, dimensions and angles to corners\n\n    Args:\n        centers (float array, shape=[N, 3]): locations in kitti label file.\n        dims (float array, shape=[N, 3]): dimensions in kitti label file.\n        angles (float array, shape=[N]): rotation_y in kitti label file.\n        origin (list or array or float): origin point relate to smallest point.\n            use [0.5, 1.0, 0.5] in camera and [0.5, 0.5, 0] in lidar.\n        axis (int): rotation axis. 1 for camera and 2 for lidar.\n    Returns:\n        [type]: [description]\n    \"\"\"", "\n", "# 'length' in kitti format is in x axis.", "\n", "# yzx(hwl)(kitti label file)<->xyz(lhw)(camera)<->z(-x)(-y)(wlh)(lidar)", "\n", "# center in kitti format is [0.5, 1.0, 0.5] in xyz.", "\n", "corners", "=", "corners_nd", "(", "centers", "[", ":", ",", "3", ":", "6", "]", ",", "origin", "=", "origin", ")", "\n", "corners", "=", "rotation_3d_in_axis", "(", "corners", ",", "centers", "[", ":", ",", "-", "1", "]", ",", "axis", "=", "axis", ")", "\n", "corners", "+=", "centers", "[", ":", ",", ":", "3", "]", ".", "reshape", "(", "[", "-", "1", ",", "1", ",", "3", "]", ")", "\n", "return", "corners", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.limit_period": [[404, 406], ["numpy.floor", "numpy.np.pi"], "function", ["None"], ["", "def", "limit_period", "(", "val", ",", "offset", "=", "0.5", ",", "period", "=", "np", ".", "pi", ")", ":", "\n", "    ", "return", "val", "-", "np", ".", "floor", "(", "val", "/", "period", "+", "offset", ")", "*", "period", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.center_to_minmax_2d": [[408, 413], ["geometry.center_to_corner_box2d", "corners[].reshape", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.center_to_corner_box2d"], ["", "def", "center_to_minmax_2d", "(", "centers", ",", "dims", ",", "origin", "=", "0.5", ")", ":", "\n", "    ", "if", "origin", "==", "0.5", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "[", "centers", "-", "dims", "/", "2", ",", "centers", "+", "dims", "/", "2", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "corners", "=", "center_to_corner_box2d", "(", "centers", ",", "dims", ",", "origin", "=", "origin", ")", "\n", "return", "corners", "[", ":", ",", "[", "0", ",", "2", "]", "]", ".", "reshape", "(", "[", "-", "1", ",", "4", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.rbbox2d_to_near_bbox": [[414, 427], ["numpy.abs", "numpy.where", "geometry.center_to_minmax_2d", "geometry.limit_period"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.center_to_minmax_2d", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.limit_period"], ["", "def", "rbbox2d_to_near_bbox", "(", "rbboxes", ")", ":", "\n", "    ", "\"\"\"convert rotated bbox to nearest 'standing' or 'lying' bbox.\n    Args:\n        rbboxes: [N, 5(x, y, xdim, ydim, rad)] rotated bboxes\n    Returns:\n        bboxes: [N, 4(xmin, ymin, xmax, ymax)] bboxes\n    \"\"\"", "\n", "rots", "=", "rbboxes", "[", "...", ",", "-", "1", "]", "\n", "rots_0_pi_div_2", "=", "np", ".", "abs", "(", "limit_period", "(", "rots", ",", "0.5", ",", "np", ".", "pi", ")", ")", "\n", "cond", "=", "(", "rots_0_pi_div_2", ">", "np", ".", "pi", "/", "4", ")", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "bboxes_center", "=", "np", ".", "where", "(", "cond", ",", "rbboxes", "[", ":", ",", "[", "0", ",", "1", ",", "3", ",", "2", "]", "]", ",", "rbboxes", "[", ":", ",", ":", "4", "]", ")", "\n", "bboxes", "=", "center_to_minmax_2d", "(", "bboxes_center", "[", ":", ",", ":", "2", "]", ",", "bboxes_center", "[", ":", ",", "2", ":", "]", ")", "\n", "return", "bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.iou_jit": [[428, 458], ["numba.jit", "numpy.zeros", "range", "range", "min", "max", "min", "max"], "function", ["None"], ["", "@", "numba", ".", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "iou_jit", "(", "boxes", ",", "query_boxes", ",", "eps", "=", "0.0", ")", ":", "\n", "    ", "\"\"\"calculate box iou. note that jit version runs 2x faster than cython in\n    my machine!\n    Parameters\n    ----------\n    boxes: (N, 4) ndarray of float\n    query_boxes: (K, 4) ndarray of float\n    Returns\n    -------\n    overlaps: (N, K) ndarray of overlap between boxes and query_boxes\n    \"\"\"", "\n", "N", "=", "boxes", ".", "shape", "[", "0", "]", "\n", "K", "=", "query_boxes", ".", "shape", "[", "0", "]", "\n", "overlaps", "=", "np", ".", "zeros", "(", "(", "N", ",", "K", ")", ",", "dtype", "=", "boxes", ".", "dtype", ")", "\n", "for", "k", "in", "range", "(", "K", ")", ":", "\n", "        ", "box_area", "=", "(", "(", "query_boxes", "[", "k", ",", "2", "]", "-", "query_boxes", "[", "k", ",", "0", "]", "+", "eps", ")", "*", "\n", "(", "query_boxes", "[", "k", ",", "3", "]", "-", "query_boxes", "[", "k", ",", "1", "]", "+", "eps", ")", ")", "\n", "for", "n", "in", "range", "(", "N", ")", ":", "\n", "            ", "iw", "=", "(", "min", "(", "boxes", "[", "n", ",", "2", "]", ",", "query_boxes", "[", "k", ",", "2", "]", ")", "-", "\n", "max", "(", "boxes", "[", "n", ",", "0", "]", ",", "query_boxes", "[", "k", ",", "0", "]", ")", "+", "eps", ")", "\n", "if", "iw", ">", "0", ":", "\n", "                ", "ih", "=", "(", "min", "(", "boxes", "[", "n", ",", "3", "]", ",", "query_boxes", "[", "k", ",", "3", "]", ")", "-", "\n", "max", "(", "boxes", "[", "n", ",", "1", "]", ",", "query_boxes", "[", "k", ",", "1", "]", ")", "+", "eps", ")", "\n", "if", "ih", ">", "0", ":", "\n", "                    ", "ua", "=", "(", "\n", "(", "boxes", "[", "n", ",", "2", "]", "-", "boxes", "[", "n", ",", "0", "]", "+", "eps", ")", "*", "\n", "(", "boxes", "[", "n", ",", "3", "]", "-", "boxes", "[", "n", ",", "1", "]", "+", "eps", ")", "+", "box_area", "-", "iw", "*", "ih", ")", "\n", "overlaps", "[", "n", ",", "k", "]", "=", "iw", "*", "ih", "/", "ua", "\n", "", "", "", "", "return", "overlaps", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.distance_similarity": [[459, 484], ["numba.jit", "numpy.zeros", "range", "range", "numpy.abs", "numpy.abs", "numpy.sum", "min", "numpy.abs", "numpy.sin"], "function", ["None"], ["", "@", "numba", ".", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "distance_similarity", "(", "points", ",", "\n", "qpoints", ",", "\n", "dist_norm", ",", "\n", "with_rotation", "=", "False", ",", "\n", "rot_alpha", "=", "0.5", ")", ":", "\n", "    ", "N", "=", "points", ".", "shape", "[", "0", "]", "\n", "K", "=", "qpoints", ".", "shape", "[", "0", "]", "\n", "dists", "=", "np", ".", "zeros", "(", "(", "N", ",", "K", ")", ",", "dtype", "=", "points", ".", "dtype", ")", "\n", "rot_alpha_1", "=", "1", "-", "rot_alpha", "\n", "for", "k", "in", "range", "(", "K", ")", ":", "\n", "        ", "for", "n", "in", "range", "(", "N", ")", ":", "\n", "            ", "if", "np", ".", "abs", "(", "points", "[", "n", ",", "0", "]", "-", "qpoints", "[", "k", ",", "0", "]", ")", "<=", "dist_norm", ":", "\n", "                ", "if", "np", ".", "abs", "(", "points", "[", "n", ",", "1", "]", "-", "qpoints", "[", "k", ",", "1", "]", ")", "<=", "dist_norm", ":", "\n", "                    ", "dist", "=", "np", ".", "sum", "(", "(", "points", "[", "n", ",", ":", "2", "]", "-", "qpoints", "[", "k", ",", ":", "2", "]", ")", "**", "2", ")", "\n", "dist_normed", "=", "min", "(", "dist", "/", "dist_norm", ",", "dist_norm", ")", "\n", "if", "with_rotation", ":", "\n", "                        ", "dist_rot", "=", "np", ".", "abs", "(", "\n", "np", ".", "sin", "(", "points", "[", "n", ",", "-", "1", "]", "-", "qpoints", "[", "k", ",", "-", "1", "]", ")", ")", "\n", "dists", "[", "\n", "n", ",", "\n", "k", "]", "=", "1", "-", "rot_alpha_1", "*", "dist_normed", "-", "rot_alpha", "*", "dist_rot", "\n", "", "else", ":", "\n", "                        ", "dists", "[", "n", ",", "k", "]", "=", "1", "-", "dist_normed", "\n", "", "", "", "", "", "return", "dists", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.rotation_points_single_angle": [[485, 505], ["numpy.sin", "numpy.cos", "numpy.array", "numpy.array", "numpy.array", "ValueError"], "function", ["None"], ["", "def", "rotation_points_single_angle", "(", "points", ",", "angle", ",", "axis", "=", "0", ")", ":", "\n", "# points: [N, 3]", "\n", "    ", "rot_sin", "=", "np", ".", "sin", "(", "angle", ")", "\n", "rot_cos", "=", "np", ".", "cos", "(", "angle", ")", "\n", "if", "axis", "==", "1", ":", "\n", "        ", "rot_mat_T", "=", "np", ".", "array", "(", "\n", "[", "[", "rot_cos", ",", "0", ",", "-", "rot_sin", "]", ",", "[", "0", ",", "1", ",", "0", "]", ",", "[", "rot_sin", ",", "0", ",", "rot_cos", "]", "]", ",", "\n", "dtype", "=", "points", ".", "dtype", ")", "\n", "", "elif", "axis", "==", "2", "or", "axis", "==", "-", "1", ":", "\n", "        ", "rot_mat_T", "=", "np", ".", "array", "(", "\n", "[", "[", "rot_cos", ",", "-", "rot_sin", ",", "0", "]", ",", "[", "rot_sin", ",", "rot_cos", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", ",", "\n", "dtype", "=", "points", ".", "dtype", ")", "\n", "", "elif", "axis", "==", "0", ":", "\n", "        ", "rot_mat_T", "=", "np", ".", "array", "(", "\n", "[", "[", "1", ",", "0", ",", "0", "]", ",", "[", "0", ",", "rot_cos", ",", "-", "rot_sin", "]", ",", "[", "0", ",", "rot_sin", ",", "rot_cos", "]", "]", ",", "\n", "dtype", "=", "points", ".", "dtype", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"axis should in range\"", ")", "\n", "\n", "", "return", "points", "@", "rot_mat_T", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.corner_to_standup_nd_jit": [[506, 517], ["numpy.zeros", "range", "range", "range", "numpy.min", "numpy.max"], "function", ["None"], ["", "@", "numba", ".", "njit", "\n", "def", "corner_to_standup_nd_jit", "(", "boxes_corner", ")", ":", "\n", "    ", "num_boxes", "=", "boxes_corner", ".", "shape", "[", "0", "]", "\n", "ndim", "=", "boxes_corner", ".", "shape", "[", "-", "1", "]", "\n", "result", "=", "np", ".", "zeros", "(", "(", "num_boxes", ",", "ndim", "*", "2", ")", ",", "dtype", "=", "boxes_corner", ".", "dtype", ")", "\n", "for", "i", "in", "range", "(", "num_boxes", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "ndim", ")", ":", "\n", "            ", "result", "[", "i", ",", "j", "]", "=", "np", ".", "min", "(", "boxes_corner", "[", "i", ",", ":", ",", "j", "]", ")", "\n", "", "for", "j", "in", "range", "(", "ndim", ")", ":", "\n", "            ", "result", "[", "i", ",", "j", "+", "ndim", "]", "=", "np", ".", "max", "(", "boxes_corner", "[", "i", ",", ":", ",", "j", "]", ")", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.box2d_to_corner_jit": [[518, 539], ["numba.jit", "numpy.zeros", "numpy.array", "numpy.zeros", "numpy.zeros", "range", "np.zeros.reshape", "numpy.sin", "numpy.cos", "boxes.reshape"], "function", ["None"], ["", "@", "numba", ".", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "box2d_to_corner_jit", "(", "boxes", ")", ":", "\n", "    ", "num_box", "=", "boxes", ".", "shape", "[", "0", "]", "\n", "corners_norm", "=", "np", ".", "zeros", "(", "(", "4", ",", "2", ")", ",", "dtype", "=", "boxes", ".", "dtype", ")", "\n", "corners_norm", "[", "1", ",", "1", "]", "=", "1.0", "\n", "corners_norm", "[", "2", "]", "=", "1.0", "\n", "corners_norm", "[", "3", ",", "0", "]", "=", "1.0", "\n", "corners_norm", "-=", "np", ".", "array", "(", "[", "0.5", ",", "0.5", "]", ",", "dtype", "=", "boxes", ".", "dtype", ")", "\n", "corners", "=", "boxes", ".", "reshape", "(", "num_box", ",", "1", ",", "5", ")", "[", ":", ",", ":", ",", "2", ":", "4", "]", "*", "corners_norm", ".", "reshape", "(", "\n", "1", ",", "4", ",", "2", ")", "\n", "rot_mat_T", "=", "np", ".", "zeros", "(", "(", "2", ",", "2", ")", ",", "dtype", "=", "boxes", ".", "dtype", ")", "\n", "box_corners", "=", "np", ".", "zeros", "(", "(", "num_box", ",", "4", ",", "2", ")", ",", "dtype", "=", "boxes", ".", "dtype", ")", "\n", "for", "i", "in", "range", "(", "num_box", ")", ":", "\n", "        ", "rot_sin", "=", "np", ".", "sin", "(", "boxes", "[", "i", ",", "-", "1", "]", ")", "\n", "rot_cos", "=", "np", ".", "cos", "(", "boxes", "[", "i", ",", "-", "1", "]", ")", "\n", "rot_mat_T", "[", "0", ",", "0", "]", "=", "rot_cos", "\n", "rot_mat_T", "[", "0", ",", "1", "]", "=", "-", "rot_sin", "\n", "rot_mat_T", "[", "1", ",", "0", "]", "=", "rot_sin", "\n", "rot_mat_T", "[", "1", ",", "1", "]", "=", "rot_cos", "\n", "box_corners", "[", "i", "]", "=", "corners", "[", "i", "]", "@", "rot_mat_T", "+", "boxes", "[", "i", ",", ":", "2", "]", "\n", "", "return", "box_corners", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.minmax_to_corner_2d": [[540, 545], ["geometry.center_to_corner_box2d"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.center_to_corner_box2d"], ["", "def", "minmax_to_corner_2d", "(", "minmax_box", ")", ":", "\n", "    ", "ndim", "=", "minmax_box", ".", "shape", "[", "-", "1", "]", "//", "2", "\n", "center", "=", "minmax_box", "[", "...", ",", ":", "ndim", "]", "\n", "dims", "=", "minmax_box", "[", "...", ",", "ndim", ":", "]", "-", "center", "\n", "return", "center_to_corner_box2d", "(", "center", ",", "dims", ",", "origin", "=", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.filter_gt_box_outside_range": [[546, 560], ["geometry.center_to_corner_box2d", "geometry.minmax_to_corner_2d", "geometry.points_in_convex_polygon_jit", "numpy.any", "center_to_corner_box2d.reshape", "points_in_convex_polygon_jit.reshape", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.center_to_corner_box2d", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.minmax_to_corner_2d", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.points_in_convex_polygon_jit"], ["", "def", "filter_gt_box_outside_range", "(", "gt_boxes", ",", "limit_range", ")", ":", "\n", "    ", "\"\"\"remove gtbox outside training range.\n    this function should be applied after other prep functions\n    Args:\n        gt_boxes ([type]): [description]\n        limit_range ([type]): [description]\n    \"\"\"", "\n", "gt_boxes_bv", "=", "center_to_corner_box2d", "(", "\n", "gt_boxes", "[", ":", ",", "[", "0", ",", "1", "]", "]", ",", "gt_boxes", "[", ":", ",", "[", "3", ",", "3", "+", "1", "]", "]", ",", "gt_boxes", "[", ":", ",", "6", "]", ")", "\n", "bounding_box", "=", "minmax_to_corner_2d", "(", "\n", "np", ".", "asarray", "(", "limit_range", ")", "[", "np", ".", "newaxis", ",", "...", "]", ")", "\n", "ret", "=", "points_in_convex_polygon_jit", "(", "\n", "gt_boxes_bv", ".", "reshape", "(", "-", "1", ",", "2", ")", ",", "bounding_box", ")", "\n", "return", "np", ".", "any", "(", "ret", ".", "reshape", "(", "-", "1", ",", "4", ")", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.corner_to_surfaces_3d_jit": [[561, 582], ["numba.jit", "numpy.zeros", "numpy.array().reshape", "range", "range", "numpy.array", "range"], "function", ["None"], ["", "@", "numba", ".", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "corner_to_surfaces_3d_jit", "(", "corners", ")", ":", "\n", "    ", "\"\"\"convert 3d box corners from corner function above\n    to surfaces that normal vectors all direct to internal.\n\n    Args:\n        corners (float array, [N, 8, 3]): 3d box corners.\n    Returns:\n        surfaces (float array, [N, 6, 4, 3]):\n    \"\"\"", "\n", "# box_corners: [N, 8, 3], must from corner functions in this module", "\n", "num_boxes", "=", "corners", ".", "shape", "[", "0", "]", "\n", "surfaces", "=", "np", ".", "zeros", "(", "(", "num_boxes", ",", "6", ",", "4", ",", "3", ")", ",", "dtype", "=", "corners", ".", "dtype", ")", "\n", "corner_idxes", "=", "np", ".", "array", "(", "[", "\n", "0", ",", "1", ",", "2", ",", "3", ",", "7", ",", "6", ",", "5", ",", "4", ",", "0", ",", "3", ",", "7", ",", "4", ",", "1", ",", "5", ",", "6", ",", "2", ",", "0", ",", "4", ",", "5", ",", "1", ",", "3", ",", "2", ",", "6", ",", "7", "\n", "]", ")", ".", "reshape", "(", "6", ",", "4", ")", "\n", "for", "i", "in", "range", "(", "num_boxes", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "6", ")", ":", "\n", "            ", "for", "k", "in", "range", "(", "4", ")", ":", "\n", "                ", "surfaces", "[", "i", ",", "j", ",", "k", "]", "=", "corners", "[", "i", ",", "corner_idxes", "[", "j", ",", "k", "]", "]", "\n", "", "", "", "return", "surfaces", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.rotation_box2d_jit": [[583, 592], ["numpy.sin", "numpy.cos"], "function", ["None"], ["", "@", "numba", ".", "njit", "\n", "def", "rotation_box2d_jit", "(", "corners", ",", "angle", ",", "rot_mat_T", ")", ":", "\n", "    ", "rot_sin", "=", "np", ".", "sin", "(", "angle", ")", "\n", "rot_cos", "=", "np", ".", "cos", "(", "angle", ")", "\n", "rot_mat_T", "[", "0", ",", "0", "]", "=", "rot_cos", "\n", "rot_mat_T", "[", "0", ",", "1", "]", "=", "-", "rot_sin", "\n", "rot_mat_T", "[", "1", ",", "0", "]", "=", "rot_sin", "\n", "rot_mat_T", "[", "1", ",", "1", "]", "=", "rot_cos", "\n", "corners", "[", ":", "]", "=", "corners", "@", "rot_mat_T", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.box_collision_test": [[593, 674], ["numba.jit", "numpy.zeros", "numpy.array", "numpy.stack", "numpy.stack", "geometry.corner_to_standup_nd_jit", "geometry.corner_to_standup_nd_jit", "range", "range", "min", "max", "min", "max", "range", "range", "range", "range", "range", "range"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.corner_to_standup_nd_jit", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.corner_to_standup_nd_jit"], ["", "@", "numba", ".", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "box_collision_test", "(", "boxes", ",", "qboxes", ",", "clockwise", "=", "True", ")", ":", "\n", "    ", "N", "=", "boxes", ".", "shape", "[", "0", "]", "\n", "K", "=", "qboxes", ".", "shape", "[", "0", "]", "\n", "ret", "=", "np", ".", "zeros", "(", "(", "N", ",", "K", ")", ",", "dtype", "=", "np", ".", "bool_", ")", "\n", "slices", "=", "np", ".", "array", "(", "[", "1", ",", "2", ",", "3", ",", "0", "]", ")", "\n", "lines_boxes", "=", "np", ".", "stack", "(", "\n", "(", "boxes", ",", "boxes", "[", ":", ",", "slices", ",", ":", "]", ")", ",", "axis", "=", "2", ")", "# [N, 4, 2(line), 2(xy)]", "\n", "lines_qboxes", "=", "np", ".", "stack", "(", "(", "qboxes", ",", "qboxes", "[", ":", ",", "slices", ",", ":", "]", ")", ",", "axis", "=", "2", ")", "\n", "# vec = np.zeros((2,), dtype=boxes.dtype)", "\n", "boxes_standup", "=", "corner_to_standup_nd_jit", "(", "boxes", ")", "\n", "qboxes_standup", "=", "corner_to_standup_nd_jit", "(", "qboxes", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "K", ")", ":", "\n", "# calculate standup first", "\n", "            ", "iw", "=", "(", "min", "(", "boxes_standup", "[", "i", ",", "2", "]", ",", "qboxes_standup", "[", "j", ",", "2", "]", ")", "-", "max", "(", "\n", "boxes_standup", "[", "i", ",", "0", "]", ",", "qboxes_standup", "[", "j", ",", "0", "]", ")", ")", "\n", "if", "iw", ">", "0", ":", "\n", "                ", "ih", "=", "(", "min", "(", "boxes_standup", "[", "i", ",", "3", "]", ",", "qboxes_standup", "[", "j", ",", "3", "]", ")", "-", "max", "(", "\n", "boxes_standup", "[", "i", ",", "1", "]", ",", "qboxes_standup", "[", "j", ",", "1", "]", ")", ")", "\n", "if", "ih", ">", "0", ":", "\n", "                    ", "for", "k", "in", "range", "(", "4", ")", ":", "\n", "                        ", "for", "l", "in", "range", "(", "4", ")", ":", "\n", "                            ", "A", "=", "lines_boxes", "[", "i", ",", "k", ",", "0", "]", "\n", "B", "=", "lines_boxes", "[", "i", ",", "k", ",", "1", "]", "\n", "C", "=", "lines_qboxes", "[", "j", ",", "l", ",", "0", "]", "\n", "D", "=", "lines_qboxes", "[", "j", ",", "l", ",", "1", "]", "\n", "acd", "=", "(", "D", "[", "1", "]", "-", "A", "[", "1", "]", ")", "*", "(", "C", "[", "0", "]", "-", "A", "[", "0", "]", ")", ">", "(", "\n", "C", "[", "1", "]", "-", "A", "[", "1", "]", ")", "*", "(", "D", "[", "0", "]", "-", "A", "[", "0", "]", ")", "\n", "bcd", "=", "(", "D", "[", "1", "]", "-", "B", "[", "1", "]", ")", "*", "(", "C", "[", "0", "]", "-", "B", "[", "0", "]", ")", ">", "(", "\n", "C", "[", "1", "]", "-", "B", "[", "1", "]", ")", "*", "(", "D", "[", "0", "]", "-", "B", "[", "0", "]", ")", "\n", "if", "acd", "!=", "bcd", ":", "\n", "                                ", "abc", "=", "(", "C", "[", "1", "]", "-", "A", "[", "1", "]", ")", "*", "(", "B", "[", "0", "]", "-", "A", "[", "0", "]", ")", ">", "(", "\n", "B", "[", "1", "]", "-", "A", "[", "1", "]", ")", "*", "(", "C", "[", "0", "]", "-", "A", "[", "0", "]", ")", "\n", "abd", "=", "(", "D", "[", "1", "]", "-", "A", "[", "1", "]", ")", "*", "(", "B", "[", "0", "]", "-", "A", "[", "0", "]", ")", ">", "(", "\n", "B", "[", "1", "]", "-", "A", "[", "1", "]", ")", "*", "(", "D", "[", "0", "]", "-", "A", "[", "0", "]", ")", "\n", "if", "abc", "!=", "abd", ":", "\n", "                                    ", "ret", "[", "i", ",", "j", "]", "=", "True", "# collision.", "\n", "break", "\n", "", "", "", "if", "ret", "[", "i", ",", "j", "]", "is", "True", ":", "\n", "                            ", "break", "\n", "", "", "if", "ret", "[", "i", ",", "j", "]", "is", "False", ":", "\n", "# now check complete overlap.", "\n", "# box overlap qbox:", "\n", "                        ", "box_overlap_qbox", "=", "True", "\n", "for", "l", "in", "range", "(", "4", ")", ":", "# point l in qboxes", "\n", "                            ", "for", "k", "in", "range", "(", "4", ")", ":", "# corner k in boxes", "\n", "                                ", "vec", "=", "boxes", "[", "i", ",", "k", "]", "-", "boxes", "[", "i", ",", "(", "k", "+", "1", ")", "%", "4", "]", "\n", "if", "clockwise", ":", "\n", "                                    ", "vec", "=", "-", "vec", "\n", "", "cross", "=", "vec", "[", "1", "]", "*", "(", "\n", "boxes", "[", "i", ",", "k", ",", "0", "]", "-", "qboxes", "[", "j", ",", "l", ",", "0", "]", ")", "\n", "cross", "-=", "vec", "[", "0", "]", "*", "(", "\n", "boxes", "[", "i", ",", "k", ",", "1", "]", "-", "qboxes", "[", "j", ",", "l", ",", "1", "]", ")", "\n", "if", "cross", ">=", "0", ":", "\n", "                                    ", "box_overlap_qbox", "=", "False", "\n", "break", "\n", "", "", "if", "box_overlap_qbox", "is", "False", ":", "\n", "                                ", "break", "\n", "\n", "", "", "if", "box_overlap_qbox", "is", "False", ":", "\n", "                            ", "qbox_overlap_box", "=", "True", "\n", "for", "l", "in", "range", "(", "4", ")", ":", "# point l in boxes", "\n", "                                ", "for", "k", "in", "range", "(", "4", ")", ":", "# corner k in qboxes", "\n", "                                    ", "vec", "=", "qboxes", "[", "j", ",", "k", "]", "-", "qboxes", "[", "j", ",", "(", "k", "+", "1", ")", "%", "4", "]", "\n", "if", "clockwise", ":", "\n", "                                        ", "vec", "=", "-", "vec", "\n", "", "cross", "=", "vec", "[", "1", "]", "*", "(", "\n", "qboxes", "[", "j", ",", "k", ",", "0", "]", "-", "boxes", "[", "i", ",", "l", ",", "0", "]", ")", "\n", "cross", "-=", "vec", "[", "0", "]", "*", "(", "\n", "qboxes", "[", "j", ",", "k", ",", "1", "]", "-", "boxes", "[", "i", ",", "l", ",", "1", "]", ")", "\n", "if", "cross", ">=", "0", ":", "#", "\n", "                                        ", "qbox_overlap_box", "=", "False", "\n", "break", "\n", "", "", "if", "qbox_overlap_box", "is", "False", ":", "\n", "                                    ", "break", "\n", "", "", "if", "qbox_overlap_box", ":", "\n", "                                ", "ret", "[", "i", ",", "j", "]", "=", "True", "# collision.", "\n", "", "", "else", ":", "\n", "                            ", "ret", "[", "i", ",", "j", "]", "=", "True", "# collision.", "\n", "", "", "", "", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.sparse_sum_for_anchors_mask": [[675, 682], ["numba.jit", "numpy.zeros", "range"], "function", ["None"], ["", "@", "numba", ".", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "sparse_sum_for_anchors_mask", "(", "coors", ",", "shape", ")", ":", "\n", "    ", "ret", "=", "np", ".", "zeros", "(", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "coors", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "ret", "[", "coors", "[", "i", ",", "1", "]", ",", "coors", "[", "i", ",", "2", "]", "]", "+=", "1", "\n", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.fused_get_anchors_area": [[684, 711], ["numba.jit", "numpy.zeros", "numpy.zeros", "range", "numpy.floor", "numpy.floor", "numpy.floor", "numpy.floor", "max", "max", "min", "min"], "function", ["None"], ["", "@", "numba", ".", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "fused_get_anchors_area", "(", "dense_map", ",", "anchors_bv", ",", "stride", ",", "offset", ",", "\n", "grid_size", ")", ":", "\n", "    ", "anchor_coor", "=", "np", ".", "zeros", "(", "anchors_bv", ".", "shape", "[", "1", ":", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "grid_size_x", "=", "grid_size", "[", "0", "]", "-", "1", "\n", "grid_size_y", "=", "grid_size", "[", "1", "]", "-", "1", "\n", "N", "=", "anchors_bv", ".", "shape", "[", "0", "]", "\n", "ret", "=", "np", ".", "zeros", "(", "(", "N", ")", ",", "dtype", "=", "dense_map", ".", "dtype", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "anchor_coor", "[", "0", "]", "=", "np", ".", "floor", "(", "\n", "(", "anchors_bv", "[", "i", ",", "0", "]", "-", "offset", "[", "0", "]", ")", "/", "stride", "[", "0", "]", ")", "\n", "anchor_coor", "[", "1", "]", "=", "np", ".", "floor", "(", "\n", "(", "anchors_bv", "[", "i", ",", "1", "]", "-", "offset", "[", "1", "]", ")", "/", "stride", "[", "1", "]", ")", "\n", "anchor_coor", "[", "2", "]", "=", "np", ".", "floor", "(", "\n", "(", "anchors_bv", "[", "i", ",", "2", "]", "-", "offset", "[", "0", "]", ")", "/", "stride", "[", "0", "]", ")", "\n", "anchor_coor", "[", "3", "]", "=", "np", ".", "floor", "(", "\n", "(", "anchors_bv", "[", "i", ",", "3", "]", "-", "offset", "[", "1", "]", ")", "/", "stride", "[", "1", "]", ")", "\n", "anchor_coor", "[", "0", "]", "=", "max", "(", "anchor_coor", "[", "0", "]", ",", "0", ")", "\n", "anchor_coor", "[", "1", "]", "=", "max", "(", "anchor_coor", "[", "1", "]", ",", "0", ")", "\n", "anchor_coor", "[", "2", "]", "=", "min", "(", "anchor_coor", "[", "2", "]", ",", "grid_size_x", ")", "\n", "anchor_coor", "[", "3", "]", "=", "min", "(", "anchor_coor", "[", "3", "]", ",", "grid_size_y", ")", "\n", "ID", "=", "dense_map", "[", "anchor_coor", "[", "3", "]", ",", "anchor_coor", "[", "2", "]", "]", "\n", "IA", "=", "dense_map", "[", "anchor_coor", "[", "1", "]", ",", "anchor_coor", "[", "0", "]", "]", "\n", "IB", "=", "dense_map", "[", "anchor_coor", "[", "3", "]", ",", "anchor_coor", "[", "0", "]", "]", "\n", "IC", "=", "dense_map", "[", "anchor_coor", "[", "1", "]", ",", "anchor_coor", "[", "2", "]", "]", "\n", "ret", "[", "i", "]", "=", "ID", "-", "IB", "-", "IC", "+", "IA", "\n", "", "return", "ret", "", "", ""]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.box_coders.BoxCoder.code_size": [[152, 154], ["None"], "methods", ["None"], ["def", "code_size", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.box_coders.BoxCoder.encode": [[155, 157], ["box_coders.BoxCoder._encode"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.box_coders.BoxCornerCoder._encode"], ["", "def", "encode", "(", "self", ",", "boxes", ",", "anchors", ")", ":", "\n", "        ", "return", "self", ".", "_encode", "(", "boxes", ",", "anchors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.box_coders.BoxCoder.decode": [[158, 160], ["box_coders.BoxCoder._decode"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.box_coders.BoxCornerCoder._decode"], ["", "def", "decode", "(", "self", ",", "rel_codes", ",", "anchors", ")", ":", "\n", "        ", "return", "self", ".", "_decode", "(", "rel_codes", ",", "anchors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.box_coders.BoxCoder._encode": [[161, 164], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "_encode", "(", "self", ",", "boxes", ",", "anchors", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.box_coders.BoxCoder._decode": [[165, 168], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "_decode", "(", "self", ",", "rel_codes", ",", "anchors", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.box_coders.GroundBox3dCoder.__init__": [[171, 175], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "linear_dim", "=", "False", ",", "vec_encode", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear_dim", "=", "linear_dim", "\n", "self", ".", "vec_encode", "=", "vec_encode", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.box_coders.GroundBox3dCoder.code_size": [[176, 179], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "code_size", "(", "self", ")", ":", "\n", "        ", "return", "8", "if", "self", ".", "vec_encode", "else", "7", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.box_coders.GroundBox3dCoder._encode": [[180, 182], ["box_coders.second_box_encode"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.box_coders.second_box_encode"], ["", "def", "_encode", "(", "self", ",", "boxes", ",", "anchors", ")", ":", "\n", "        ", "return", "second_box_encode", "(", "boxes", ",", "anchors", ",", "self", ".", "vec_encode", ",", "self", ".", "linear_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.box_coders.GroundBox3dCoder._decode": [[183, 185], ["box_coders.second_box_decode"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.box_coders.second_box_decode"], ["", "def", "_decode", "(", "self", ",", "encodings", ",", "anchors", ")", ":", "\n", "        ", "return", "second_box_decode", "(", "encodings", ",", "anchors", ",", "self", ".", "vec_encode", ",", "self", ".", "linear_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.box_coders.BevBoxCoder.__init__": [[191, 197], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["def", "__init__", "(", "self", ",", "linear_dim", "=", "False", ",", "vec_encode", "=", "False", ",", "z_fixed", "=", "-", "1.0", ",", "h_fixed", "=", "2.0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear_dim", "=", "linear_dim", "\n", "self", ".", "z_fixed", "=", "z_fixed", "\n", "self", ".", "h_fixed", "=", "h_fixed", "\n", "self", ".", "vec_encode", "=", "vec_encode", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.box_coders.BevBoxCoder.code_size": [[198, 201], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "code_size", "(", "self", ")", ":", "\n", "        ", "return", "6", "if", "self", ".", "vec_encode", "else", "5", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.box_coders.BevBoxCoder._encode": [[202, 206], ["box_coders.bev_box_encode"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.box_coders.bev_box_encode"], ["", "def", "_encode", "(", "self", ",", "boxes", ",", "anchors", ")", ":", "\n", "        ", "anchors", "=", "anchors", "[", "...", ",", "[", "0", ",", "1", ",", "3", ",", "4", ",", "6", "]", "]", "\n", "boxes", "=", "boxes", "[", "...", ",", "[", "0", ",", "1", ",", "3", ",", "4", ",", "6", "]", "]", "\n", "return", "bev_box_encode", "(", "boxes", ",", "anchors", ",", "self", ".", "vec_encode", ",", "self", ".", "linear_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.box_coders.BevBoxCoder._decode": [[207, 213], ["box_coders.bev_box_decode", "numpy.full", "numpy.full", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.box_coders.bev_box_decode"], ["", "def", "_decode", "(", "self", ",", "encodings", ",", "anchors", ")", ":", "\n", "        ", "anchors", "=", "anchors", "[", "...", ",", "[", "0", ",", "1", ",", "3", ",", "4", ",", "6", "]", "]", "\n", "ret", "=", "bev_box_decode", "(", "encodings", ",", "anchors", ",", "self", ".", "vec_encode", ",", "self", ".", "linear_dim", ")", "\n", "z_fixed", "=", "np", ".", "full", "(", "[", "*", "ret", ".", "shape", "[", ":", "-", "1", "]", ",", "1", "]", ",", "self", ".", "z_fixed", ",", "dtype", "=", "ret", ".", "dtype", ")", "\n", "h_fixed", "=", "np", ".", "full", "(", "[", "*", "ret", ".", "shape", "[", ":", "-", "1", "]", ",", "1", "]", ",", "self", ".", "h_fixed", ",", "dtype", "=", "ret", ".", "dtype", ")", "\n", "return", "np", ".", "concatenate", "(", "[", "ret", "[", "...", ",", ":", "2", "]", ",", "z_fixed", ",", "ret", "[", "...", ",", "2", ":", "4", "]", ",", "h_fixed", ",", "ret", "[", "...", ",", "4", ":", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.box_coders.BoxCornerCoder.__init__": [[216, 218], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", ")", ":", "\n", "        ", "super", "(", "BoxCornerCoder", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.box_coders.BoxCornerCoder.code_size": [[219, 222], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "code_size", "(", "self", ")", ":", "\n", "        ", "return", "24", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.box_coders.BoxCornerCoder._encode": [[223, 230], ["len", "mmdet.core.bbox3d.geometry.center_to_corner_box3d", "mmdet.core.bbox3d.geometry.center_to_corner_box3d", "offset.reshape", "len", "len"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.center_to_corner_box3d", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.center_to_corner_box3d"], ["", "def", "_encode", "(", "self", ",", "boxes", ",", "anchors", ")", ":", "\n", "        ", "assert", "len", "(", "boxes", ")", "==", "len", "(", "anchors", ")", "\n", "N", "=", "len", "(", "boxes", ")", "\n", "boxes", "=", "center_to_corner_box3d", "(", "boxes", ")", "\n", "anchors", "=", "center_to_corner_box3d", "(", "anchors", ")", "\n", "offset", "=", "boxes", "-", "anchors", "\n", "return", "offset", ".", "reshape", "(", "N", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.box_coders.BoxCornerCoder._decode": [[231, 233], ["None"], "methods", ["None"], ["", "def", "_decode", "(", "self", ",", "encodings", ",", "anchors", ")", ":", "\n", "        ", "NotImplementedError", "", "", "", ""]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.box_coders.second_box_encode": [[7, 44], ["numpy.split", "numpy.split", "numpy.sqrt", "numpy.log", "numpy.log", "numpy.log", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.concatenate", "numpy.concatenate"], "function", ["None"], ["def", "second_box_encode", "(", "boxes", ",", "anchors", ",", "encode_angle_to_vector", "=", "False", ",", "smooth_dim", "=", "False", ")", ":", "\n", "    ", "\"\"\"box encode for VoxelNet in lidar\n    Args:\n        boxes ([N, 7] Tensor): normal boxes: x, y, z, w, l, h, r\n        anchors ([N, 7] Tensor): anchors\n        encode_angle_to_vector: bool. increase aos performance,\n            decrease other performance.\n    \"\"\"", "\n", "# need to convert boxes to z-center format", "\n", "xa", ",", "ya", ",", "za", ",", "wa", ",", "la", ",", "ha", ",", "ra", "=", "np", ".", "split", "(", "anchors", ",", "7", ",", "axis", "=", "-", "1", ")", "\n", "xg", ",", "yg", ",", "zg", ",", "wg", ",", "lg", ",", "hg", ",", "rg", "=", "np", ".", "split", "(", "boxes", ",", "7", ",", "axis", "=", "-", "1", ")", "\n", "zg", "=", "zg", "+", "hg", "/", "2", "\n", "za", "=", "za", "+", "ha", "/", "2", "\n", "diagonal", "=", "np", ".", "sqrt", "(", "la", "**", "2", "+", "wa", "**", "2", ")", "# 4.3", "\n", "xt", "=", "(", "xg", "-", "xa", ")", "/", "diagonal", "\n", "yt", "=", "(", "yg", "-", "ya", ")", "/", "diagonal", "\n", "\n", "zt", "=", "(", "zg", "-", "za", ")", "/", "ha", "# 1.6", "\n", "if", "smooth_dim", ":", "\n", "        ", "lt", "=", "lg", "/", "la", "-", "1", "\n", "wt", "=", "wg", "/", "wa", "-", "1", "\n", "ht", "=", "hg", "/", "ha", "-", "1", "\n", "", "else", ":", "\n", "        ", "lt", "=", "np", ".", "log", "(", "lg", "/", "la", ")", "\n", "wt", "=", "np", ".", "log", "(", "wg", "/", "wa", ")", "\n", "ht", "=", "np", ".", "log", "(", "hg", "/", "ha", ")", "\n", "", "if", "encode_angle_to_vector", ":", "\n", "        ", "rgx", "=", "np", ".", "cos", "(", "rg", ")", "\n", "rgy", "=", "np", ".", "sin", "(", "rg", ")", "\n", "rax", "=", "np", ".", "cos", "(", "ra", ")", "\n", "ray", "=", "np", ".", "sin", "(", "ra", ")", "\n", "rtx", "=", "rgx", "-", "rax", "\n", "rty", "=", "rgy", "-", "ray", "\n", "return", "np", ".", "concatenate", "(", "[", "xt", ",", "yt", ",", "zt", ",", "wt", ",", "lt", ",", "ht", ",", "rtx", ",", "rty", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "rt", "=", "rg", "-", "ra", "\n", "return", "np", ".", "concatenate", "(", "[", "xt", ",", "yt", ",", "zt", ",", "wt", ",", "lt", ",", "ht", ",", "rt", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.box_coders.second_box_decode": [[45, 84], ["torch.split", "torch.sqrt", "torch.cat", "torch.split", "torch.split", "torch.cos", "torch.sin", "torch.atan2", "torch.exp", "torch.exp", "torch.exp"], "function", ["None"], ["", "", "def", "second_box_decode", "(", "box_encodings", ",", "anchors", ",", "encode_angle_to_vector", "=", "False", ",", "smooth_dim", "=", "False", ")", ":", "\n", "    ", "\"\"\"box decode for VoxelNet in lidar\n    Args:\n        boxes ([N, 7] Tensor): normal boxes: x, y, z, w, l, h, r\n        anchors ([N, 7] Tensor): anchors\n    \"\"\"", "\n", "xa", ",", "ya", ",", "za", ",", "wa", ",", "la", ",", "ha", ",", "ra", "=", "torch", ".", "split", "(", "anchors", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "if", "encode_angle_to_vector", ":", "\n", "        ", "xt", ",", "yt", ",", "zt", ",", "wt", ",", "lt", ",", "ht", ",", "rtx", ",", "rty", "=", "torch", ".", "split", "(", "\n", "box_encodings", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "else", ":", "\n", "        ", "xt", ",", "yt", ",", "zt", ",", "wt", ",", "lt", ",", "ht", ",", "rt", "=", "torch", ".", "split", "(", "box_encodings", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# xt, yt, zt, wt, lt, ht, rt = torch.split(box_encodings, 1, dim=-1)", "\n", "", "za", "=", "za", "+", "ha", "/", "2", "\n", "diagonal", "=", "torch", ".", "sqrt", "(", "la", "**", "2", "+", "wa", "**", "2", ")", "\n", "xg", "=", "xt", "*", "diagonal", "+", "xa", "\n", "yg", "=", "yt", "*", "diagonal", "+", "ya", "\n", "zg", "=", "zt", "*", "ha", "+", "za", "\n", "if", "smooth_dim", ":", "\n", "        ", "lg", "=", "(", "lt", "+", "1", ")", "*", "la", "\n", "wg", "=", "(", "wt", "+", "1", ")", "*", "wa", "\n", "hg", "=", "(", "ht", "+", "1", ")", "*", "ha", "\n", "", "else", ":", "\n", "\n", "        ", "lg", "=", "torch", ".", "exp", "(", "lt", ")", "*", "la", "\n", "wg", "=", "torch", ".", "exp", "(", "wt", ")", "*", "wa", "\n", "hg", "=", "torch", ".", "exp", "(", "ht", ")", "*", "ha", "\n", "", "if", "encode_angle_to_vector", ":", "\n", "        ", "rax", "=", "torch", ".", "cos", "(", "ra", ")", "\n", "ray", "=", "torch", ".", "sin", "(", "ra", ")", "\n", "rgx", "=", "rtx", "+", "rax", "\n", "rgy", "=", "rty", "+", "ray", "\n", "rg", "=", "torch", ".", "atan2", "(", "rgy", ",", "rgx", ")", "\n", "", "else", ":", "\n", "        ", "rg", "=", "rt", "+", "ra", "\n", "", "zg", "=", "zg", "-", "hg", "/", "2", "\n", "return", "torch", ".", "cat", "(", "[", "xg", ",", "yg", ",", "zg", ",", "wg", ",", "lg", ",", "hg", ",", "rg", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.box_coders.bev_box_encode": [[85, 116], ["numpy.split", "numpy.split", "numpy.sqrt", "numpy.log", "numpy.log", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.concatenate", "numpy.concatenate"], "function", ["None"], ["", "def", "bev_box_encode", "(", "boxes", ",", "anchors", ",", "encode_angle_to_vector", "=", "False", ",", "smooth_dim", "=", "False", ")", ":", "\n", "    ", "\"\"\"box encode for VoxelNet in lidar\n    Args:\n        boxes ([N, 7] Tensor): normal boxes: x, y, z, w, l, h, r\n        anchors ([N, 7] Tensor): anchors\n        encode_angle_to_vector: bool. increase aos performance,\n            decrease other performance.\n    \"\"\"", "\n", "# need to convert boxes to z-center format", "\n", "xa", ",", "ya", ",", "wa", ",", "la", ",", "ra", "=", "np", ".", "split", "(", "anchors", ",", "5", ",", "axis", "=", "-", "1", ")", "\n", "xg", ",", "yg", ",", "wg", ",", "lg", ",", "rg", "=", "np", ".", "split", "(", "boxes", ",", "5", ",", "axis", "=", "-", "1", ")", "\n", "diagonal", "=", "np", ".", "sqrt", "(", "la", "**", "2", "+", "wa", "**", "2", ")", "# 4.3", "\n", "xt", "=", "(", "xg", "-", "xa", ")", "/", "diagonal", "\n", "yt", "=", "(", "yg", "-", "ya", ")", "/", "diagonal", "\n", "if", "smooth_dim", ":", "\n", "        ", "lt", "=", "lg", "/", "la", "-", "1", "\n", "wt", "=", "wg", "/", "wa", "-", "1", "\n", "", "else", ":", "\n", "        ", "lt", "=", "np", ".", "log", "(", "lg", "/", "la", ")", "\n", "wt", "=", "np", ".", "log", "(", "wg", "/", "wa", ")", "\n", "", "if", "encode_angle_to_vector", ":", "\n", "        ", "rgx", "=", "np", ".", "cos", "(", "rg", ")", "\n", "rgy", "=", "np", ".", "sin", "(", "rg", ")", "\n", "rax", "=", "np", ".", "cos", "(", "ra", ")", "\n", "ray", "=", "np", ".", "sin", "(", "ra", ")", "\n", "rtx", "=", "rgx", "-", "rax", "\n", "rty", "=", "rgy", "-", "ray", "\n", "return", "np", ".", "concatenate", "(", "[", "xt", ",", "yt", ",", "wt", ",", "lt", ",", "rtx", ",", "rty", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "rt", "=", "rg", "-", "ra", "\n", "return", "np", ".", "concatenate", "(", "[", "xt", ",", "yt", ",", "wt", ",", "lt", ",", "rt", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.box_coders.bev_box_decode": [[117, 147], ["numpy.split", "numpy.sqrt", "numpy.concatenate", "numpy.split", "numpy.split", "numpy.cos", "numpy.sin", "numpy.arctan2", "numpy.exp", "numpy.exp"], "function", ["None"], ["", "", "def", "bev_box_decode", "(", "box_encodings", ",", "anchors", ",", "encode_angle_to_vector", "=", "False", ",", "smooth_dim", "=", "False", ")", ":", "\n", "    ", "\"\"\"box decode for VoxelNet in lidar\n    Args:\n        boxes ([N, 7] Tensor): normal boxes: x, y, z, w, l, h, r\n        anchors ([N, 7] Tensor): anchors\n    \"\"\"", "\n", "# need to convert box_encodings to z-bottom format", "\n", "xa", ",", "ya", ",", "wa", ",", "la", ",", "ra", "=", "np", ".", "split", "(", "anchors", ",", "5", ",", "axis", "=", "-", "1", ")", "\n", "if", "encode_angle_to_vector", ":", "\n", "        ", "xt", ",", "yt", ",", "wt", ",", "lt", ",", "rtx", ",", "rty", "=", "np", ".", "split", "(", "box_encodings", ",", "6", ",", "axis", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "xt", ",", "yt", ",", "wt", ",", "lt", ",", "rt", "=", "np", ".", "split", "(", "box_encodings", ",", "5", ",", "axis", "=", "-", "1", ")", "\n", "", "diagonal", "=", "np", ".", "sqrt", "(", "la", "**", "2", "+", "wa", "**", "2", ")", "\n", "xg", "=", "xt", "*", "diagonal", "+", "xa", "\n", "yg", "=", "yt", "*", "diagonal", "+", "ya", "\n", "if", "smooth_dim", ":", "\n", "        ", "lg", "=", "(", "lt", "+", "1", ")", "*", "la", "\n", "wg", "=", "(", "wt", "+", "1", ")", "*", "wa", "\n", "", "else", ":", "\n", "        ", "lg", "=", "np", ".", "exp", "(", "lt", ")", "*", "la", "\n", "wg", "=", "np", ".", "exp", "(", "wt", ")", "*", "wa", "\n", "", "if", "encode_angle_to_vector", ":", "\n", "        ", "rax", "=", "np", ".", "cos", "(", "ra", ")", "\n", "ray", "=", "np", ".", "sin", "(", "ra", ")", "\n", "rgx", "=", "rtx", "+", "rax", "\n", "rgy", "=", "rty", "+", "ray", "\n", "rg", "=", "np", ".", "arctan2", "(", "rgy", ",", "rgx", ")", "\n", "", "else", ":", "\n", "        ", "rg", "=", "rt", "+", "ra", "\n", "", "return", "np", ".", "concatenate", "(", "[", "xg", ",", "yg", ",", "wg", ",", "lg", ",", "rg", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.bbox3d_target.TargetEncoder.__init__": [[6, 12], ["getattr", "getattr"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "box_coders", ",", "\n", "region_similarity", ")", ":", "\n", "\n", "        ", "self", ".", "_similarity_fn", "=", "getattr", "(", "regionSimilarity", ",", "region_similarity", ")", "(", ")", "\n", "self", ".", "_box_coder", "=", "getattr", "(", "boxCoders", ",", "box_coders", ")", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.bbox3d_target.TargetEncoder.box_coder": [[13, 16], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "box_coder", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_box_coder", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.bbox3d_target.TargetEncoder.assign": [[17, 41], ["mmdet.core.bbox3d.target_ops.create_target_np"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.target_ops.create_target_np"], ["", "def", "assign", "(", "self", ",", "\n", "anchors", ",", "\n", "gt_boxes", ",", "\n", "anchors_mask", "=", "None", ",", "\n", "gt_classes", "=", "None", ",", "\n", "pos_iou_thr", "=", "0.6", ",", "\n", "neg_iou_thr", "=", "0.45", ",", "\n", "positive_fraction", "=", "None", ",", "\n", "sample_size", "=", "512", ",", "\n", ")", ":", "\n", "\n", "        ", "return", "create_target_np", "(", "\n", "anchors", ",", "\n", "gt_boxes", ",", "\n", "anchors_mask", ",", "\n", "gt_classes", ",", "\n", "similarity_fn", "=", "self", ".", "_similarity_fn", ",", "\n", "box_encoding_fn", "=", "self", ".", "_box_coder", ".", "encode", ",", "\n", "matched_threshold", "=", "pos_iou_thr", ",", "\n", "unmatched_threshold", "=", "neg_iou_thr", ",", "\n", "positive_fraction", "=", "positive_fraction", ",", "\n", "rpn_batch_size", "=", "sample_size", ",", "\n", "norm_by_num_examples", "=", "False", ",", "\n", "box_code_size", "=", "self", ".", "box_coder", ".", "code_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.region_similarity.RotateIou2dSimilarity.__call__": [[56, 60], ["mmdet.core.post_processing.rotate_nms_gpu.rotate_iou_gpu"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.rotate_iou_gpu"], ["def", "__call__", "(", "self", ",", "boxes1", ",", "boxes2", ")", ":", "\n", "        ", "boxes1_rbv", "=", "boxes1", "[", ":", ",", "[", "0", ",", "1", ",", "3", ",", "4", ",", "6", "]", "]", "\n", "boxes2_rbv", "=", "boxes2", "[", ":", ",", "[", "0", ",", "1", ",", "3", ",", "4", ",", "6", "]", "]", "\n", "return", "rotate_iou_gpu", "(", "boxes1_rbv", ",", "boxes2_rbv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.region_similarity.RotateIou3dSimilarity.__call__": [[66, 72], ["mmdet.core.post_processing.rotate_nms_gpu.rotate_iou_gpu_eval", "region_similarity.d3_box_overlap_kernel"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.rotate_iou_gpu_eval", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.d3_box_overlap_kernel"], ["def", "__call__", "(", "self", ",", "boxes1", ",", "boxes2", ")", ":", "\n", "        ", "boxes1_rbv", "=", "boxes1", "[", ":", ",", "[", "0", ",", "1", ",", "3", ",", "4", ",", "6", "]", "]", "\n", "boxes2_rbv", "=", "boxes2", "[", ":", ",", "[", "0", ",", "1", ",", "3", ",", "4", ",", "6", "]", "]", "\n", "rinc", "=", "rotate_iou_gpu_eval", "(", "boxes1_rbv", ",", "boxes2_rbv", ",", "criterion", "=", "2", ")", "\n", "d3_box_overlap_kernel", "(", "boxes1", ",", "boxes2", ",", "rinc", ")", "\n", "return", "rinc", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.region_similarity.NearestIouSimilarity.__call__": [[80, 96], ["mmdet.core.bbox3d.geometry.rbbox2d_to_near_bbox", "mmdet.core.bbox3d.geometry.rbbox2d_to_near_bbox", "mmdet.core.bbox3d.geometry.iou_jit"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.rbbox2d_to_near_bbox", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.rbbox2d_to_near_bbox", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.iou_jit"], ["def", "__call__", "(", "self", ",", "boxes1", ",", "boxes2", ")", ":", "\n", "        ", "\"\"\"Compute matrix of (negated) sq distances.\n\n        Args:\n          boxlist1: BoxList holding N boxes.\n          boxlist2: BoxList holding M boxes.\n\n        Returns:\n          A tensor with shape [N, M] representing negated pairwise squared distance.\n        \"\"\"", "\n", "boxes1_rbv", "=", "boxes1", "[", ":", ",", "[", "0", ",", "1", ",", "3", ",", "4", ",", "6", "]", "]", "\n", "boxes2_rbv", "=", "boxes2", "[", ":", ",", "[", "0", ",", "1", ",", "3", ",", "4", ",", "6", "]", "]", "\n", "boxes1_bv", "=", "rbbox2d_to_near_bbox", "(", "boxes1_rbv", ")", "\n", "boxes2_bv", "=", "rbbox2d_to_near_bbox", "(", "boxes2_rbv", ")", "\n", "ret", "=", "iou_jit", "(", "boxes1_bv", ",", "boxes2_bv", ",", "eps", "=", "0.0", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.region_similarity.DistanceSimilarity.__init__": [[105, 109], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "distance_norm", ",", "with_rotation", "=", "False", ",", "rotation_alpha", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "_distance_norm", "=", "distance_norm", "\n", "self", ".", "_with_rotation", "=", "with_rotation", "\n", "self", ".", "_rotation_alpha", "=", "rotation_alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.region_similarity.DistanceSimilarity.__call__": [[110, 128], ["mmdet.core.bbox3d.geometry.distance_similarity"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.distance_similarity"], ["", "def", "__call__", "(", "self", ",", "boxes1", ",", "boxes2", ")", ":", "\n", "        ", "\"\"\"Compute matrix of (negated) sq distances.\n\n        Args:\n          boxlist1: BoxList holding N boxes.\n          boxlist2: BoxList holding M boxes.\n\n        Returns:\n          A tensor with shape [N, M] representing negated pairwise squared distance.\n        \"\"\"", "\n", "boxes1_rbv", "=", "boxes1", "[", ":", ",", "[", "0", ",", "1", ",", "3", ",", "4", ",", "6", "]", "]", "\n", "boxes2_rbv", "=", "boxes2", "[", ":", ",", "[", "0", ",", "1", ",", "3", ",", "4", ",", "6", "]", "]", "\n", "return", "distance_similarity", "(", "\n", "boxes1_rbv", "[", "...", ",", "[", "0", ",", "1", ",", "-", "1", "]", "]", ",", "\n", "boxes2_rbv", "[", "...", ",", "[", "0", ",", "1", ",", "-", "1", "]", "]", ",", "\n", "dist_norm", "=", "self", ".", "_distance_norm", ",", "\n", "with_rotation", "=", "self", ".", "_with_rotation", ",", "\n", "rot_alpha", "=", "self", ".", "_rotation_alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.region_similarity.d3_box_overlap_kernel": [[26, 50], ["numba.jit", "range", "range", "min", "max"], "function", ["None"], ["@", "numba", ".", "jit", "(", "nopython", "=", "True", ",", "parallel", "=", "True", ")", "\n", "def", "d3_box_overlap_kernel", "(", "boxes", ",", "qboxes", ",", "rinc", ",", "criterion", "=", "-", "1", ")", ":", "\n", "    ", "N", ",", "K", "=", "boxes", ".", "shape", "[", "0", "]", ",", "qboxes", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "K", ")", ":", "\n", "            ", "if", "rinc", "[", "i", ",", "j", "]", ">", "0", ":", "\n", "                ", "iw", "=", "(", "min", "(", "boxes", "[", "i", ",", "2", "]", ",", "qboxes", "[", "j", ",", "2", "]", ")", "-", "max", "(", "\n", "boxes", "[", "i", ",", "2", "]", "-", "boxes", "[", "i", ",", "5", "]", ",", "qboxes", "[", "j", ",", "2", "]", "-", "qboxes", "[", "j", ",", "5", "]", ")", ")", "\n", "\n", "if", "iw", ">", "0", ":", "\n", "                    ", "area1", "=", "boxes", "[", "i", ",", "3", "]", "*", "boxes", "[", "i", ",", "4", "]", "*", "boxes", "[", "i", ",", "5", "]", "\n", "area2", "=", "qboxes", "[", "j", ",", "3", "]", "*", "qboxes", "[", "j", ",", "4", "]", "*", "qboxes", "[", "j", ",", "5", "]", "\n", "inc", "=", "iw", "*", "rinc", "[", "i", ",", "j", "]", "\n", "if", "criterion", "==", "-", "1", ":", "\n", "                        ", "ua", "=", "(", "area1", "+", "area2", "-", "inc", ")", "\n", "", "elif", "criterion", "==", "0", ":", "\n", "                        ", "ua", "=", "area1", "\n", "", "elif", "criterion", "==", "1", ":", "\n", "                        ", "ua", "=", "area2", "\n", "", "else", ":", "\n", "                        ", "ua", "=", "1.0", "\n", "", "rinc", "[", "i", ",", "j", "]", "=", "inc", "/", "ua", "\n", "", "else", ":", "\n", "                    ", "rinc", "[", "i", ",", "j", "]", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.mask.mask_target.mask_target": [[6, 13], ["map", "torch.cat", "list", "range", "len"], "function", ["None"], ["def", "mask_target", "(", "pos_proposals_list", ",", "pos_assigned_gt_inds_list", ",", "gt_masks_list", ",", "\n", "cfg", ")", ":", "\n", "    ", "cfg_list", "=", "[", "cfg", "for", "_", "in", "range", "(", "len", "(", "pos_proposals_list", ")", ")", "]", "\n", "mask_targets", "=", "map", "(", "mask_target_single", ",", "pos_proposals_list", ",", "\n", "pos_assigned_gt_inds_list", ",", "gt_masks_list", ",", "cfg_list", ")", "\n", "mask_targets", "=", "torch", ".", "cat", "(", "list", "(", "mask_targets", ")", ")", "\n", "return", "mask_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.mask.mask_target.mask_target_single": [[15, 37], ["pos_proposals.size", "pos_proposals.cpu().numpy", "pos_assigned_gt_inds.cpu().numpy.cpu().numpy", "range", "torch.from_numpy().float().to", "pos_proposals.new_zeros", "proposals_np[].astype", "numpy.maximum", "numpy.maximum", "mmcv.imresize", "pos_proposals.new_zeros.append", "pos_proposals.cpu", "pos_assigned_gt_inds.cpu().numpy.cpu", "torch.from_numpy().float", "torch.from_numpy", "numpy.stack"], "function", ["None"], ["", "def", "mask_target_single", "(", "pos_proposals", ",", "pos_assigned_gt_inds", ",", "gt_masks", ",", "cfg", ")", ":", "\n", "    ", "mask_size", "=", "cfg", ".", "mask_size", "\n", "num_pos", "=", "pos_proposals", ".", "size", "(", "0", ")", "\n", "mask_targets", "=", "[", "]", "\n", "if", "num_pos", ">", "0", ":", "\n", "        ", "proposals_np", "=", "pos_proposals", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pos_assigned_gt_inds", "=", "pos_assigned_gt_inds", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "i", "in", "range", "(", "num_pos", ")", ":", "\n", "            ", "gt_mask", "=", "gt_masks", "[", "pos_assigned_gt_inds", "[", "i", "]", "]", "\n", "bbox", "=", "proposals_np", "[", "i", ",", ":", "]", ".", "astype", "(", "np", ".", "int32", ")", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "bbox", "\n", "w", "=", "np", ".", "maximum", "(", "x2", "-", "x1", "+", "1", ",", "1", ")", "\n", "h", "=", "np", ".", "maximum", "(", "y2", "-", "y1", "+", "1", ",", "1", ")", "\n", "# mask is uint8 both before and after resizing", "\n", "target", "=", "mmcv", ".", "imresize", "(", "gt_mask", "[", "y1", ":", "y1", "+", "h", ",", "x1", ":", "x1", "+", "w", "]", ",", "\n", "(", "mask_size", ",", "mask_size", ")", ")", "\n", "mask_targets", ".", "append", "(", "target", ")", "\n", "", "mask_targets", "=", "torch", ".", "from_numpy", "(", "np", ".", "stack", "(", "mask_targets", ")", ")", ".", "float", "(", ")", ".", "to", "(", "\n", "pos_proposals", ".", "device", ")", "\n", "", "else", ":", "\n", "        ", "mask_targets", "=", "pos_proposals", ".", "new_zeros", "(", "(", "0", ",", "mask_size", ",", "mask_size", ")", ")", "\n", "", "return", "mask_targets", "\n", "", ""]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.mask.utils.split_combined_polys": [[4, 31], ["range", "len", "poly_lens[].tolist", "polys_per_mask[].tolist", "mmcv.slice_list", "mmcv.slice_list", "mask_polys_list.append"], "function", ["None"], ["import", "mmcv", "\n", "from", "mmcv", ".", "runner", "import", "obj_from_dict", "\n", "import", "torch", "\n", "from", "collections", "import", "defaultdict", "\n", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "import", "numpy", "as", "np", "\n", "from", ".", "concat_dataset", "import", "ConcatDataset", "\n", "from", ".", ".", "import", "datasets", "\n", "from", "mmdet", ".", "core", ".", "point_cloud", "import", "voxel_generator", "\n", "from", "mmdet", ".", "core", ".", "point_cloud", "import", "point_augmentor", "\n", "from", "mmdet", ".", "core", ".", "bbox3d", "import", "bbox3d_target", "\n", "from", "mmdet", ".", "core", ".", "anchor", "import", "anchor3d_generator", "\n", "def", "to_tensor", "(", "data", ")", ":", "\n", "    ", "\"\"\"Convert objects of various python types to :obj:`torch.Tensor`.\n\n    Supported types are: :class:`numpy.ndarray`, :class:`torch.Tensor`,\n    :class:`Sequence`, :class:`int` and :class:`float`.\n    \"\"\"", "\n", "if", "isinstance", "(", "data", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "data", "\n", "", "elif", "isinstance", "(", "data", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "torch", ".", "from_numpy", "(", "data", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "Sequence", ")", "and", "not", "mmcv", ".", "is_str", "(", "data", ")", ":", "\n", "        ", "return", "[", "to_tensor", "(", "d", ")", "for", "d", "in", "data", "]", "\n", "", "elif", "isinstance", "(", "data", ",", "int", ")", ":", "\n", "        ", "return", "torch", ".", "LongTensor", "(", "[", "data", "]", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "float", ")", ":", "\n", "        ", "return", "torch", ".", "FloatTensor", "(", "[", "data", "]", ")", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.anchor.anchor3d_generator.AnchorGeneratorStride.__init__": [[82, 93], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "sizes", "=", "[", "1.6", ",", "3.9", ",", "1.56", "]", ",", "\n", "anchor_strides", "=", "[", "0.4", ",", "0.4", ",", "1.0", "]", ",", "\n", "anchor_offsets", "=", "[", "0.2", ",", "-", "39.8", ",", "-", "1.78", "]", ",", "\n", "rotations", "=", "[", "0", ",", "np", ".", "pi", "/", "2", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", ":", "\n", "        ", "self", ".", "_sizes", "=", "sizes", "\n", "self", ".", "_anchor_strides", "=", "anchor_strides", "\n", "self", ".", "_anchor_offsets", "=", "anchor_offsets", "\n", "self", ".", "_rotations", "=", "rotations", "\n", "self", ".", "_dtype", "=", "dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.anchor.anchor3d_generator.AnchorGeneratorStride.num_anchors_per_localization": [[94, 99], ["len", "numpy.array().reshape", "numpy.array"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_anchors_per_localization", "(", "self", ")", ":", "\n", "        ", "num_rot", "=", "len", "(", "self", ".", "_rotations", ")", "\n", "num_size", "=", "np", ".", "array", "(", "self", ".", "_sizes", ")", ".", "reshape", "(", "[", "-", "1", ",", "3", "]", ")", ".", "shape", "[", "0", "]", "\n", "return", "num_rot", "*", "num_size", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.anchor.anchor3d_generator.AnchorGeneratorStride.__call__": [[100, 104], ["anchor3d_generator.create_anchors_3d_stride"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.anchor.anchor3d_generator.create_anchors_3d_stride"], ["", "def", "__call__", "(", "self", ",", "feature_map_size", ")", ":", "\n", "        ", "return", "create_anchors_3d_stride", "(", "\n", "feature_map_size", ",", "self", ".", "_sizes", ",", "self", ".", "_anchor_strides", ",", "\n", "self", ".", "_anchor_offsets", ",", "self", ".", "_rotations", ",", "self", ".", "_dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.anchor.anchor3d_generator.AnchorGeneratorRange.__init__": [[106, 115], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "anchor_ranges", ",", "\n", "sizes", "=", "[", "1.6", ",", "3.9", ",", "1.56", "]", ",", "\n", "rotations", "=", "[", "0", ",", "np", ".", "pi", "/", "2", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", ":", "\n", "        ", "self", ".", "_sizes", "=", "sizes", "\n", "self", ".", "_anchor_ranges", "=", "anchor_ranges", "\n", "self", ".", "_rotations", "=", "rotations", "\n", "self", ".", "_dtype", "=", "dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.anchor.anchor3d_generator.AnchorGeneratorRange.num_anchors_per_localization": [[116, 121], ["len", "numpy.array().reshape", "numpy.array"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_anchors_per_localization", "(", "self", ")", ":", "\n", "        ", "num_rot", "=", "len", "(", "self", ".", "_rotations", ")", "\n", "num_size", "=", "np", ".", "array", "(", "self", ".", "_sizes", ")", ".", "reshape", "(", "[", "-", "1", ",", "3", "]", ")", ".", "shape", "[", "0", "]", "\n", "return", "num_rot", "*", "num_size", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.anchor.anchor3d_generator.AnchorGeneratorRange.__call__": [[122, 126], ["anchor3d_generator.create_anchors_3d_range"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.anchor.anchor3d_generator.create_anchors_3d_range"], ["", "def", "__call__", "(", "self", ",", "feature_map_size", ")", ":", "\n", "        ", "return", "create_anchors_3d_range", "(", "\n", "feature_map_size", ",", "self", ".", "_anchor_ranges", ",", "self", ".", "_sizes", ",", "\n", "self", ".", "_rotations", ",", "self", ".", "_dtype", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.anchor.anchor3d_generator.create_anchors_3d_stride": [[3, 42], ["numpy.arange", "numpy.arange", "numpy.arange", "numpy.reshape", "numpy.array", "numpy.meshgrid", "int", "range", "numpy.reshape", "list", "numpy.tile", "np.meshgrid.insert", "numpy.concatenate", "numpy.transpose", "numpy.array", "len", "numpy.tile"], "function", ["None"], ["def", "create_anchors_3d_stride", "(", "feature_size", ",", "\n", "sizes", "=", "[", "1.6", ",", "3.9", ",", "1.56", "]", ",", "\n", "anchor_strides", "=", "[", "0.4", ",", "0.4", ",", "0.0", "]", ",", "\n", "anchor_offsets", "=", "[", "0.2", ",", "-", "39.8", ",", "-", "1.78", "]", ",", "\n", "rotations", "=", "[", "0", ",", "np", ".", "pi", "/", "2", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        feature_size: list [D, H, W](zyx)\n        sizes: [N, 3] list of list or array, size of anchors, xyz\n\n    Returns:\n        anchors: [*feature_size, num_sizes, num_rots, 7] tensor.\n    \"\"\"", "\n", "# almost 2x faster than v1", "\n", "x_stride", ",", "y_stride", ",", "z_stride", "=", "anchor_strides", "\n", "x_offset", ",", "y_offset", ",", "z_offset", "=", "anchor_offsets", "\n", "z_centers", "=", "np", ".", "arange", "(", "feature_size", "[", "0", "]", ",", "dtype", "=", "dtype", ")", "\n", "y_centers", "=", "np", ".", "arange", "(", "feature_size", "[", "1", "]", ",", "dtype", "=", "dtype", ")", "\n", "x_centers", "=", "np", ".", "arange", "(", "feature_size", "[", "2", "]", ",", "dtype", "=", "dtype", ")", "\n", "z_centers", "=", "z_centers", "*", "z_stride", "+", "z_offset", "\n", "y_centers", "=", "y_centers", "*", "y_stride", "+", "y_offset", "\n", "x_centers", "=", "x_centers", "*", "x_stride", "+", "x_offset", "\n", "sizes", "=", "np", ".", "reshape", "(", "np", ".", "array", "(", "sizes", ",", "dtype", "=", "dtype", ")", ",", "[", "-", "1", ",", "3", "]", ")", "\n", "rotations", "=", "np", ".", "array", "(", "rotations", ",", "dtype", "=", "dtype", ")", "\n", "rets", "=", "np", ".", "meshgrid", "(", "\n", "x_centers", ",", "y_centers", ",", "z_centers", ",", "rotations", ",", "indexing", "=", "'ij'", ")", "\n", "tile_shape", "=", "[", "1", "]", "*", "5", "\n", "tile_shape", "[", "-", "2", "]", "=", "int", "(", "sizes", ".", "shape", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "rets", ")", ")", ":", "\n", "        ", "rets", "[", "i", "]", "=", "np", ".", "tile", "(", "rets", "[", "i", "]", "[", "...", ",", "np", ".", "newaxis", ",", ":", "]", ",", "tile_shape", ")", "\n", "rets", "[", "i", "]", "=", "rets", "[", "i", "]", "[", "...", ",", "np", ".", "newaxis", "]", "# for concat", "\n", "", "sizes", "=", "np", ".", "reshape", "(", "sizes", ",", "[", "1", ",", "1", ",", "1", ",", "-", "1", ",", "1", ",", "3", "]", ")", "\n", "tile_size_shape", "=", "list", "(", "rets", "[", "0", "]", ".", "shape", ")", "\n", "tile_size_shape", "[", "3", "]", "=", "1", "\n", "sizes", "=", "np", ".", "tile", "(", "sizes", ",", "tile_size_shape", ")", "\n", "rets", ".", "insert", "(", "3", ",", "sizes", ")", "\n", "ret", "=", "np", ".", "concatenate", "(", "rets", ",", "axis", "=", "-", "1", ")", "\n", "return", "np", ".", "transpose", "(", "ret", ",", "[", "2", ",", "1", ",", "0", ",", "3", ",", "4", ",", "5", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.anchor.anchor3d_generator.create_anchors_3d_range": [[44, 80], ["numpy.array", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.reshape", "numpy.array", "numpy.meshgrid", "int", "range", "numpy.reshape", "list", "numpy.tile", "np.meshgrid.insert", "numpy.concatenate", "numpy.transpose", "numpy.array", "len", "numpy.tile"], "function", ["None"], ["", "def", "create_anchors_3d_range", "(", "feature_size", ",", "\n", "anchor_range", ",", "\n", "sizes", "=", "[", "1.6", ",", "3.9", ",", "1.56", "]", ",", "\n", "rotations", "=", "[", "0", ",", "np", ".", "pi", "/", "2", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        feature_size: list [D, H, W](zyx)\n        sizes: [N, 3] list of list or array, size of anchors, xyz\n\n    Returns:\n        anchors: [*feature_size, num_sizes, num_rots, 7] tensor.\n    \"\"\"", "\n", "anchor_range", "=", "np", ".", "array", "(", "anchor_range", ",", "dtype", ")", "\n", "z_centers", "=", "np", ".", "linspace", "(", "\n", "anchor_range", "[", "2", "]", ",", "anchor_range", "[", "5", "]", ",", "feature_size", "[", "0", "]", ",", "dtype", "=", "dtype", ")", "\n", "y_centers", "=", "np", ".", "linspace", "(", "\n", "anchor_range", "[", "1", "]", ",", "anchor_range", "[", "4", "]", ",", "feature_size", "[", "1", "]", ",", "dtype", "=", "dtype", ")", "\n", "x_centers", "=", "np", ".", "linspace", "(", "\n", "anchor_range", "[", "0", "]", ",", "anchor_range", "[", "3", "]", ",", "feature_size", "[", "2", "]", ",", "dtype", "=", "dtype", ")", "\n", "sizes", "=", "np", ".", "reshape", "(", "np", ".", "array", "(", "sizes", ",", "dtype", "=", "dtype", ")", ",", "[", "-", "1", ",", "3", "]", ")", "\n", "rotations", "=", "np", ".", "array", "(", "rotations", ",", "dtype", "=", "dtype", ")", "\n", "rets", "=", "np", ".", "meshgrid", "(", "\n", "x_centers", ",", "y_centers", ",", "z_centers", ",", "rotations", ",", "indexing", "=", "'ij'", ")", "\n", "tile_shape", "=", "[", "1", "]", "*", "5", "\n", "tile_shape", "[", "-", "2", "]", "=", "int", "(", "sizes", ".", "shape", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "rets", ")", ")", ":", "\n", "        ", "rets", "[", "i", "]", "=", "np", ".", "tile", "(", "rets", "[", "i", "]", "[", "...", ",", "np", ".", "newaxis", ",", ":", "]", ",", "tile_shape", ")", "\n", "rets", "[", "i", "]", "=", "rets", "[", "i", "]", "[", "...", ",", "np", ".", "newaxis", "]", "# for concat", "\n", "", "sizes", "=", "np", ".", "reshape", "(", "sizes", ",", "[", "1", ",", "1", ",", "1", ",", "-", "1", ",", "1", ",", "3", "]", ")", "\n", "tile_size_shape", "=", "list", "(", "rets", "[", "0", "]", ".", "shape", ")", "\n", "tile_size_shape", "[", "3", "]", "=", "1", "\n", "sizes", "=", "np", ".", "tile", "(", "sizes", ",", "tile_size_shape", ")", "\n", "rets", ".", "insert", "(", "3", ",", "sizes", ")", "\n", "ret", "=", "np", ".", "concatenate", "(", "rets", ",", "axis", "=", "-", "1", ")", "\n", "return", "np", ".", "transpose", "(", "ret", ",", "[", "2", ",", "1", ",", "0", ",", "3", ",", "4", ",", "5", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.anchor.anchor_generator.AnchorGenerator.__init__": [[6, 12], ["torch.Tensor", "torch.Tensor", "anchor_generator.AnchorGenerator.gen_base_anchors"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.anchor.anchor_generator.AnchorGenerator.gen_base_anchors"], ["    ", "def", "__init__", "(", "self", ",", "base_size", ",", "scales", ",", "ratios", ",", "scale_major", "=", "True", ")", ":", "\n", "        ", "self", ".", "base_size", "=", "base_size", "\n", "self", ".", "scales", "=", "torch", ".", "Tensor", "(", "scales", ")", "\n", "self", ".", "ratios", "=", "torch", ".", "Tensor", "(", "ratios", ")", "\n", "self", ".", "scale_major", "=", "scale_major", "\n", "self", ".", "base_anchors", "=", "self", ".", "gen_base_anchors", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.anchor.anchor_generator.AnchorGenerator.num_base_anchors": [[13, 16], ["anchor_generator.AnchorGenerator.base_anchors.size"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_base_anchors", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "base_anchors", ".", "size", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.anchor.anchor_generator.AnchorGenerator.gen_base_anchors": [[17, 43], ["torch.Tensor", "torch.sqrt", "torch.stack().round", "torch.stack"], "methods", ["None"], ["", "def", "gen_base_anchors", "(", "self", ")", ":", "\n", "        ", "base_anchor", "=", "torch", ".", "Tensor", "(", "\n", "[", "0", ",", "0", ",", "self", ".", "base_size", "-", "1", ",", "self", ".", "base_size", "-", "1", "]", ")", "\n", "\n", "w", "=", "base_anchor", "[", "2", "]", "-", "base_anchor", "[", "0", "]", "+", "1", "\n", "h", "=", "base_anchor", "[", "3", "]", "-", "base_anchor", "[", "1", "]", "+", "1", "\n", "x_ctr", "=", "base_anchor", "[", "0", "]", "+", "0.5", "*", "(", "w", "-", "1", ")", "\n", "y_ctr", "=", "base_anchor", "[", "1", "]", "+", "0.5", "*", "(", "h", "-", "1", ")", "\n", "\n", "h_ratios", "=", "torch", ".", "sqrt", "(", "self", ".", "ratios", ")", "\n", "w_ratios", "=", "1", "/", "h_ratios", "\n", "if", "self", ".", "scale_major", ":", "\n", "            ", "ws", "=", "(", "w", "*", "w_ratios", "[", ":", ",", "None", "]", "*", "self", ".", "scales", "[", "None", ",", ":", "]", ")", ".", "view", "(", "-", "1", ")", "\n", "hs", "=", "(", "h", "*", "h_ratios", "[", ":", ",", "None", "]", "*", "self", ".", "scales", "[", "None", ",", ":", "]", ")", ".", "view", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "ws", "=", "(", "w", "*", "self", ".", "scales", "[", ":", ",", "None", "]", "*", "w_ratios", "[", "None", ",", ":", "]", ")", ".", "view", "(", "-", "1", ")", "\n", "hs", "=", "(", "h", "*", "self", ".", "scales", "[", ":", ",", "None", "]", "*", "h_ratios", "[", "None", ",", ":", "]", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "", "base_anchors", "=", "torch", ".", "stack", "(", "\n", "[", "\n", "x_ctr", "-", "0.5", "*", "(", "ws", "-", "1", ")", ",", "y_ctr", "-", "0.5", "*", "(", "hs", "-", "1", ")", ",", "\n", "x_ctr", "+", "0.5", "*", "(", "ws", "-", "1", ")", ",", "y_ctr", "+", "0.5", "*", "(", "hs", "-", "1", ")", "\n", "]", ",", "\n", "dim", "=", "-", "1", ")", ".", "round", "(", ")", "\n", "\n", "return", "base_anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.anchor.anchor_generator.AnchorGenerator._meshgrid": [[44, 51], ["x.repeat", "y.view().repeat().view", "len", "y.view().repeat", "len", "y.view"], "methods", ["None"], ["", "def", "_meshgrid", "(", "self", ",", "x", ",", "y", ",", "row_major", "=", "True", ")", ":", "\n", "        ", "xx", "=", "x", ".", "repeat", "(", "len", "(", "y", ")", ")", "\n", "yy", "=", "y", ".", "view", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "len", "(", "x", ")", ")", ".", "view", "(", "-", "1", ")", "\n", "if", "row_major", ":", "\n", "            ", "return", "xx", ",", "yy", "\n", "", "else", ":", "\n", "            ", "return", "yy", ",", "xx", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.anchor.anchor_generator.AnchorGenerator.grid_anchors": [[52, 70], ["anchor_generator.AnchorGenerator.base_anchors.to", "anchor_generator.AnchorGenerator._meshgrid", "torch.stack", "shifts.type_as.type_as.type_as", "all_anchors.view.view.view", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.anchor.anchor_generator.AnchorGenerator._meshgrid"], ["", "", "def", "grid_anchors", "(", "self", ",", "featmap_size", ",", "stride", "=", "16", ",", "device", "=", "'cuda'", ")", ":", "\n", "        ", "base_anchors", "=", "self", ".", "base_anchors", ".", "to", "(", "device", ")", "\n", "\n", "feat_h", ",", "feat_w", "=", "featmap_size", "\n", "shift_x", "=", "torch", ".", "arange", "(", "0", ",", "feat_w", ",", "device", "=", "device", ")", "*", "stride", "\n", "shift_y", "=", "torch", ".", "arange", "(", "0", ",", "feat_h", ",", "device", "=", "device", ")", "*", "stride", "\n", "shift_xx", ",", "shift_yy", "=", "self", ".", "_meshgrid", "(", "shift_x", ",", "shift_y", ")", "\n", "shifts", "=", "torch", ".", "stack", "(", "[", "shift_xx", ",", "shift_yy", ",", "shift_xx", ",", "shift_yy", "]", ",", "dim", "=", "-", "1", ")", "\n", "shifts", "=", "shifts", ".", "type_as", "(", "base_anchors", ")", "\n", "# first feat_w elements correspond to the first row of shifts", "\n", "# add A anchors (1, A, 4) to K shifts (K, 1, 4) to get", "\n", "# shifted anchors (K, A, 4), reshape to (K*A, 4)", "\n", "\n", "all_anchors", "=", "base_anchors", "[", "None", ",", ":", ",", ":", "]", "+", "shifts", "[", ":", ",", "None", ",", ":", "]", "\n", "all_anchors", "=", "all_anchors", ".", "view", "(", "-", "1", ",", "4", ")", "\n", "# first A rows correspond to A anchors of (0, 0) in feature map,", "\n", "# then (0, 1), (0, 2), ...", "\n", "return", "all_anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.anchor.anchor_generator.AnchorGenerator.valid_flags": [[71, 84], ["torch.zeros", "torch.zeros", "anchor_generator.AnchorGenerator._meshgrid", "valid[].expand().contiguous().view", "valid[].expand().contiguous", "valid[].expand", "valid[].expand().contiguous().view.size"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.anchor.anchor_generator.AnchorGenerator._meshgrid"], ["", "def", "valid_flags", "(", "self", ",", "featmap_size", ",", "valid_size", ",", "device", "=", "'cuda'", ")", ":", "\n", "        ", "feat_h", ",", "feat_w", "=", "featmap_size", "\n", "valid_h", ",", "valid_w", "=", "valid_size", "\n", "assert", "valid_h", "<=", "feat_h", "and", "valid_w", "<=", "feat_w", "\n", "valid_x", "=", "torch", ".", "zeros", "(", "feat_w", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "device", ")", "\n", "valid_y", "=", "torch", ".", "zeros", "(", "feat_h", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "device", ")", "\n", "valid_x", "[", ":", "valid_w", "]", "=", "1", "\n", "valid_y", "[", ":", "valid_h", "]", "=", "1", "\n", "valid_xx", ",", "valid_yy", "=", "self", ".", "_meshgrid", "(", "valid_x", ",", "valid_y", ")", "\n", "valid", "=", "valid_xx", "&", "valid_yy", "\n", "valid", "=", "valid", "[", ":", ",", "None", "]", ".", "expand", "(", "\n", "valid", ".", "size", "(", "0", ")", ",", "self", ".", "num_base_anchors", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "return", "valid", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.anchor.anchor_target.anchor_target": [[4, 74], ["torch.zeros_like", "torch.zeros_like", "anchors.new_zeros", "anchors.new_zeros", "anchors.new_zeros", "anchor_target.unmap", "anchor_target.unmap", "anchor_target.unmap", "anchor_target.unmap", "anchor_target.get_direction_target", "anchor_target.unmap", "bbox.assign_and_sample", "bbox.BBoxAssigner", "bbox.BBoxAssigner.assign", "torch.nonzero().squeeze().unique", "torch.nonzero().squeeze().unique", "anchors.new_zeros", "bbox.SamplingResult", "len", "bbox.rbbox3d2delta", "len", "anchor_target.expand_binary_labels", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero", "torch.nonzero"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.anchor.anchor_target.unmap", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.anchor.anchor_target.unmap", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.anchor.anchor_target.unmap", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.anchor.anchor_target.unmap", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.anchor.anchor_target.get_direction_target", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.anchor.anchor_target.unmap", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.sampling.assign_and_sample", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.assignment.BBoxAssigner.assign", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.transforms.rbbox3d2delta", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.anchor.anchor_target.expand_binary_labels"], ["def", "anchor_target", "(", "flat_anchors", ",", "\n", "inside_flags", ",", "\n", "gt_bboxes", ",", "\n", "gt_labels", ",", "\n", "target_means", ",", "\n", "target_stds", ",", "\n", "cfg", ",", "\n", "cls_out_channels", "=", "1", ",", "\n", "sampling", "=", "True", ")", ":", "\n", "\n", "# assign gt and sample anchors", "\n", "\n", "    ", "anchors", "=", "flat_anchors", "[", "inside_flags", "]", "\n", "\n", "if", "sampling", ":", "\n", "        ", "assign_result", ",", "sampling_result", "=", "assign_and_sample", "(", "\n", "anchors", ",", "gt_bboxes", ",", "None", ",", "None", ",", "cfg", ")", "\n", "", "else", ":", "\n", "        ", "bbox_assigner", "=", "BBoxAssigner", "(", "**", "cfg", ".", "assigner", ")", "\n", "assign_result", "=", "bbox_assigner", ".", "assign", "(", "anchors", ",", "gt_bboxes", ",", "None", ",", "gt_labels", ")", "\n", "pos_inds", "=", "torch", ".", "nonzero", "(", "\n", "assign_result", ".", "gt_inds", ">", "0", ")", ".", "squeeze", "(", "-", "1", ")", ".", "unique", "(", ")", "\n", "neg_inds", "=", "torch", ".", "nonzero", "(", "\n", "assign_result", ".", "gt_inds", "==", "0", ")", ".", "squeeze", "(", "-", "1", ")", ".", "unique", "(", ")", "\n", "gt_flags", "=", "anchors", ".", "new_zeros", "(", "anchors", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "sampling_result", "=", "SamplingResult", "(", "pos_inds", ",", "neg_inds", ",", "anchors", ",", "\n", "gt_bboxes", ",", "assign_result", ",", "gt_flags", ")", "\n", "\n", "", "num_valid_anchors", "=", "anchors", ".", "shape", "[", "0", "]", "\n", "bbox_targets", "=", "torch", ".", "zeros_like", "(", "anchors", ")", "\n", "bbox_weights", "=", "torch", ".", "zeros_like", "(", "anchors", ")", "\n", "labels", "=", "anchors", ".", "new_zeros", "(", "num_valid_anchors", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "label_weights", "=", "anchors", ".", "new_zeros", "(", "num_valid_anchors", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "dir_weights", "=", "anchors", ".", "new_zeros", "(", "num_valid_anchors", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n", "pos_inds", "=", "sampling_result", ".", "pos_inds", "\n", "neg_inds", "=", "sampling_result", ".", "neg_inds", "\n", "if", "len", "(", "pos_inds", ")", ">", "0", ":", "\n", "        ", "pos_bbox_targets", "=", "rbbox3d2delta", "(", "sampling_result", ".", "pos_bboxes", ",", "\n", "sampling_result", ".", "pos_gt_bboxes", ",", "\n", "target_means", ",", "target_stds", ")", "\n", "bbox_targets", "[", "pos_inds", ",", ":", "]", "=", "pos_bbox_targets", "\n", "bbox_weights", "[", "pos_inds", ",", ":", "]", "=", "1.0", "\n", "dir_weights", "[", "pos_inds", "]", "=", "1.", "\n", "if", "gt_labels", "is", "None", ":", "\n", "            ", "labels", "[", "pos_inds", "]", "=", "1", "\n", "", "else", ":", "\n", "            ", "labels", "[", "pos_inds", "]", "=", "gt_labels", "[", "sampling_result", ".", "pos_assigned_gt_inds", "]", "\n", "", "if", "cfg", ".", "pos_weight", "<=", "0", ":", "\n", "            ", "label_weights", "[", "pos_inds", "]", "=", "1.0", "\n", "", "else", ":", "\n", "            ", "label_weights", "[", "pos_inds", "]", "=", "cfg", ".", "pos_weight", "\n", "", "", "if", "len", "(", "neg_inds", ")", ">", "0", ":", "\n", "        ", "label_weights", "[", "neg_inds", "]", "=", "1.0", "\n", "\n", "# map up to original set of anchors", "\n", "", "num_total_anchors", "=", "flat_anchors", ".", "shape", "[", "0", "]", "\n", "labels", "=", "unmap", "(", "labels", ",", "num_total_anchors", ",", "inside_flags", ")", "\n", "label_weights", "=", "unmap", "(", "label_weights", ",", "num_total_anchors", ",", "inside_flags", ")", "\n", "if", "cls_out_channels", ">", "1", ":", "\n", "        ", "labels", ",", "label_weights", "=", "expand_binary_labels", "(", "labels", ",", "label_weights", ",", "\n", "cls_out_channels", ")", "\n", "", "bbox_targets", "=", "unmap", "(", "bbox_targets", ",", "num_total_anchors", ",", "inside_flags", ")", "\n", "bbox_weights", "=", "unmap", "(", "bbox_weights", ",", "num_total_anchors", ",", "inside_flags", ")", "\n", "\n", "dir_labels", "=", "get_direction_target", "(", "flat_anchors", ",", "bbox_targets", ")", "\n", "dir_weights", "=", "unmap", "(", "dir_weights", ",", "num_total_anchors", ",", "inside_flags", ")", "\n", "\n", "return", "(", "labels", ",", "label_weights", ",", "bbox_targets", ",", "bbox_weights", ",", "dir_labels", ",", "dir_weights", ",", "pos_inds", ",", "\n", "neg_inds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.anchor.anchor_target.expand_binary_labels": [[76, 85], ["labels.new_full", "torch.nonzero().squeeze", "label_weights.view().expand", "torch.nonzero().squeeze.numel", "label_weights.size", "labels.size", "torch.nonzero", "label_weights.view"], "function", ["None"], ["", "def", "expand_binary_labels", "(", "labels", ",", "label_weights", ",", "cls_out_channels", ")", ":", "\n", "    ", "bin_labels", "=", "labels", ".", "new_full", "(", "\n", "(", "labels", ".", "size", "(", "0", ")", ",", "cls_out_channels", ")", ",", "0", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "inds", "=", "torch", ".", "nonzero", "(", "labels", ">=", "1", ")", ".", "squeeze", "(", ")", "\n", "if", "inds", ".", "numel", "(", ")", ">", "0", ":", "\n", "        ", "bin_labels", "[", "inds", ",", "labels", "[", "inds", "]", "-", "1", "]", "=", "1", "\n", "", "bin_label_weights", "=", "label_weights", ".", "view", "(", "-", "1", ",", "1", ")", ".", "expand", "(", "\n", "label_weights", ".", "size", "(", "0", ")", ",", "cls_out_channels", ")", "\n", "return", "bin_labels", ",", "bin_label_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.anchor.anchor_target.get_direction_target": [[86, 91], ["anchors.view.view"], "function", ["None"], ["", "def", "get_direction_target", "(", "anchors", ",", "reg_targets", ")", ":", "\n", "    ", "anchors", "=", "anchors", ".", "view", "(", "-", "1", ",", "7", ")", "\n", "rot_gt", "=", "reg_targets", "[", ":", ",", "-", "1", "]", "+", "anchors", "[", ":", ",", "-", "1", "]", "\n", "dir_cls_targets", "=", "(", "rot_gt", ">", "0", ")", ".", "long", "(", ")", "\n", "return", "dir_cls_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.anchor.anchor_target.anchor_inside_flags": [[92, 104], ["None"], "function", ["None"], ["", "def", "anchor_inside_flags", "(", "flat_anchors", ",", "valid_flags", ",", "img_shape", ",", "\n", "allowed_border", "=", "0", ")", ":", "\n", "    ", "img_h", ",", "img_w", "=", "img_shape", "[", ":", "2", "]", "\n", "if", "allowed_border", ">=", "0", ":", "\n", "        ", "inside_flags", "=", "valid_flags", "&", "(", "flat_anchors", "[", ":", ",", "0", "]", ">=", "-", "allowed_border", ")", "&", "(", "flat_anchors", "[", ":", ",", "1", "]", ">=", "-", "allowed_border", ")", "&", "(", "flat_anchors", "[", ":", ",", "2", "]", "<", "img_w", "+", "allowed_border", ")", "&", "(", "flat_anchors", "[", ":", ",", "3", "]", "<", "img_h", "+", "allowed_border", ")", "\n", "", "else", ":", "\n", "        ", "inside_flags", "=", "valid_flags", "\n", "", "return", "inside_flags", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.anchor.anchor_target.unmap": [[106, 117], ["data.dim", "data.new_full", "data.new_full", "data.size"], "function", ["None"], ["", "def", "unmap", "(", "data", ",", "count", ",", "inds", ",", "fill", "=", "0", ")", ":", "\n", "    ", "\"\"\" Unmap a subset of item (data) back to the original set of items (of\n    size count) \"\"\"", "\n", "if", "data", ".", "dim", "(", ")", "==", "1", ":", "\n", "        ", "ret", "=", "data", ".", "new_full", "(", "(", "count", ",", ")", ",", "fill", ")", "\n", "ret", "[", "inds", "]", "=", "data", "\n", "", "else", ":", "\n", "        ", "new_size", "=", "(", "count", ",", ")", "+", "data", ".", "size", "(", ")", "[", "1", ":", "]", "\n", "ret", "=", "data", ".", "new_full", "(", "new_size", ",", "fill", ")", "\n", "ret", "[", "inds", ",", ":", "]", "=", "data", "\n", "", "return", "ret", "\n", "", ""]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.mean_ap.average_precision": [[9, 54], ["numpy.zeros", "numpy.zeros", "numpy.ones", "numpy.hstack", "numpy.hstack", "range", "range", "numpy.maximum", "numpy.sum", "range", "ValueError", "numpy.where", "numpy.arange", "precs.max"], "function", ["None"], ["def", "average_precision", "(", "recalls", ",", "precisions", ",", "mode", "=", "'area'", ")", ":", "\n", "    ", "\"\"\"Calculate average precision (for single or multiple scales).\n\n    Args:\n        recalls (ndarray): shape (num_scales, num_dets) or (num_dets, )\n        precisions (ndarray): shape (num_scales, num_dets) or (num_dets, )\n        mode (str): 'area' or '11points', 'area' means calculating the area\n            under precision-recall curve, '11points' means calculating\n            the average precision of recalls at [0, 0.1, ..., 1]\n\n    Returns:\n        float or ndarray: calculated average precision\n    \"\"\"", "\n", "no_scale", "=", "False", "\n", "if", "recalls", ".", "ndim", "==", "1", ":", "\n", "        ", "no_scale", "=", "True", "\n", "recalls", "=", "recalls", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "precisions", "=", "precisions", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "", "assert", "recalls", ".", "shape", "==", "precisions", ".", "shape", "and", "recalls", ".", "ndim", "==", "2", "\n", "num_scales", "=", "recalls", ".", "shape", "[", "0", "]", "\n", "ap", "=", "np", ".", "zeros", "(", "num_scales", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "mode", "==", "'area'", ":", "\n", "        ", "zeros", "=", "np", ".", "zeros", "(", "(", "num_scales", ",", "1", ")", ",", "dtype", "=", "recalls", ".", "dtype", ")", "\n", "ones", "=", "np", ".", "ones", "(", "(", "num_scales", ",", "1", ")", ",", "dtype", "=", "recalls", ".", "dtype", ")", "\n", "mrec", "=", "np", ".", "hstack", "(", "(", "zeros", ",", "recalls", ",", "ones", ")", ")", "\n", "mpre", "=", "np", ".", "hstack", "(", "(", "zeros", ",", "precisions", ",", "zeros", ")", ")", "\n", "for", "i", "in", "range", "(", "mpre", ".", "shape", "[", "1", "]", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "            ", "mpre", "[", ":", ",", "i", "-", "1", "]", "=", "np", ".", "maximum", "(", "mpre", "[", ":", ",", "i", "-", "1", "]", ",", "mpre", "[", ":", ",", "i", "]", ")", "\n", "", "for", "i", "in", "range", "(", "num_scales", ")", ":", "\n", "            ", "ind", "=", "np", ".", "where", "(", "mrec", "[", "i", ",", "1", ":", "]", "!=", "mrec", "[", "i", ",", ":", "-", "1", "]", ")", "[", "0", "]", "\n", "ap", "[", "i", "]", "=", "np", ".", "sum", "(", "\n", "(", "mrec", "[", "i", ",", "ind", "+", "1", "]", "-", "mrec", "[", "i", ",", "ind", "]", ")", "*", "mpre", "[", "i", ",", "ind", "+", "1", "]", ")", "\n", "", "", "elif", "mode", "==", "'11points'", ":", "\n", "        ", "for", "i", "in", "range", "(", "num_scales", ")", ":", "\n", "            ", "for", "thr", "in", "np", ".", "arange", "(", "0", ",", "1", "+", "1e-3", ",", "0.1", ")", ":", "\n", "                ", "precs", "=", "precisions", "[", "i", ",", "recalls", "[", "i", ",", ":", "]", ">=", "thr", "]", "\n", "prec", "=", "precs", ".", "max", "(", ")", "if", "precs", ".", "size", ">", "0", "else", "0", "\n", "ap", "[", "i", "]", "+=", "prec", "\n", "", "ap", "/=", "11", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "'Unrecognized mode, only \"area\" and \"11points\" are supported'", ")", "\n", "", "if", "no_scale", ":", "\n", "        ", "ap", "=", "ap", "[", "0", "]", "\n", "", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.mean_ap.tpfp_imagenet": [[56, 135], ["len", "numpy.zeros", "numpy.zeros", "bbox_overlaps.bbox_overlaps", "numpy.minimum", "numpy.argsort", "enumerate", "numpy.zeros", "enumerate", "numpy.zeros_like", "range"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.geometry.bbox_overlaps"], ["", "def", "tpfp_imagenet", "(", "det_bboxes", ",", "\n", "gt_bboxes", ",", "\n", "gt_ignore", ",", "\n", "default_iou_thr", ",", "\n", "area_ranges", "=", "None", ")", ":", "\n", "    ", "\"\"\"Check if detected bboxes are true positive or false positive.\n\n    Args:\n        det_bbox (ndarray): the detected bbox\n        gt_bboxes (ndarray): ground truth bboxes of this image\n        gt_ignore (ndarray): indicate if gts are ignored for evaluation or not\n        default_iou_thr (float): the iou thresholds for medium and large bboxes\n        area_ranges (list or None): gt bbox area ranges\n\n    Returns:\n        tuple: two arrays (tp, fp) whose elements are 0 and 1\n    \"\"\"", "\n", "num_dets", "=", "det_bboxes", ".", "shape", "[", "0", "]", "\n", "num_gts", "=", "gt_bboxes", ".", "shape", "[", "0", "]", "\n", "if", "area_ranges", "is", "None", ":", "\n", "        ", "area_ranges", "=", "[", "(", "None", ",", "None", ")", "]", "\n", "", "num_scales", "=", "len", "(", "area_ranges", ")", "\n", "# tp and fp are of shape (num_scales, num_gts), each row is tp or fp", "\n", "# of a certain scale.", "\n", "tp", "=", "np", ".", "zeros", "(", "(", "num_scales", ",", "num_dets", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "fp", "=", "np", ".", "zeros", "(", "(", "num_scales", ",", "num_dets", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "gt_bboxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "        ", "if", "area_ranges", "==", "[", "(", "None", ",", "None", ")", "]", ":", "\n", "            ", "fp", "[", "...", "]", "=", "1", "\n", "", "else", ":", "\n", "            ", "det_areas", "=", "(", "det_bboxes", "[", ":", ",", "2", "]", "-", "det_bboxes", "[", ":", ",", "0", "]", "+", "1", ")", "*", "(", "\n", "det_bboxes", "[", ":", ",", "3", "]", "-", "det_bboxes", "[", ":", ",", "1", "]", "+", "1", ")", "\n", "for", "i", ",", "(", "min_area", ",", "max_area", ")", "in", "enumerate", "(", "area_ranges", ")", ":", "\n", "                ", "fp", "[", "i", ",", "(", "det_areas", ">=", "min_area", ")", "&", "(", "det_areas", "<", "max_area", ")", "]", "=", "1", "\n", "", "", "return", "tp", ",", "fp", "\n", "", "ious", "=", "bbox_overlaps", "(", "det_bboxes", ",", "gt_bboxes", "-", "1", ")", "\n", "gt_w", "=", "gt_bboxes", "[", ":", ",", "2", "]", "-", "gt_bboxes", "[", ":", ",", "0", "]", "+", "1", "\n", "gt_h", "=", "gt_bboxes", "[", ":", ",", "3", "]", "-", "gt_bboxes", "[", ":", ",", "1", "]", "+", "1", "\n", "iou_thrs", "=", "np", ".", "minimum", "(", "(", "gt_w", "*", "gt_h", ")", "/", "(", "(", "gt_w", "+", "10.0", ")", "*", "(", "gt_h", "+", "10.0", ")", ")", ",", "\n", "default_iou_thr", ")", "\n", "# sort all detections by scores in descending order", "\n", "sort_inds", "=", "np", ".", "argsort", "(", "-", "det_bboxes", "[", ":", ",", "-", "1", "]", ")", "\n", "for", "k", ",", "(", "min_area", ",", "max_area", ")", "in", "enumerate", "(", "area_ranges", ")", ":", "\n", "        ", "gt_covered", "=", "np", ".", "zeros", "(", "num_gts", ",", "dtype", "=", "bool", ")", "\n", "# if no area range is specified, gt_area_ignore is all False", "\n", "if", "min_area", "is", "None", ":", "\n", "            ", "gt_area_ignore", "=", "np", ".", "zeros_like", "(", "gt_ignore", ",", "dtype", "=", "bool", ")", "\n", "", "else", ":", "\n", "            ", "gt_areas", "=", "gt_w", "*", "gt_h", "\n", "gt_area_ignore", "=", "(", "gt_areas", "<", "min_area", ")", "|", "(", "gt_areas", ">=", "max_area", ")", "\n", "", "for", "i", "in", "sort_inds", ":", "\n", "            ", "max_iou", "=", "-", "1", "\n", "matched_gt", "=", "-", "1", "\n", "# find best overlapped available gt", "\n", "for", "j", "in", "range", "(", "num_gts", ")", ":", "\n", "# different from PASCAL VOC: allow finding other gts if the", "\n", "# best overlaped ones are already matched by other det bboxes", "\n", "                ", "if", "gt_covered", "[", "j", "]", ":", "\n", "                    ", "continue", "\n", "", "elif", "ious", "[", "i", ",", "j", "]", ">=", "iou_thrs", "[", "j", "]", "and", "ious", "[", "i", ",", "j", "]", ">", "max_iou", ":", "\n", "                    ", "max_iou", "=", "ious", "[", "i", ",", "j", "]", "\n", "matched_gt", "=", "j", "\n", "# there are 4 cases for a det bbox:", "\n", "# 1. it matches a gt, tp = 1, fp = 0", "\n", "# 2. it matches an ignored gt, tp = 0, fp = 0", "\n", "# 3. it matches no gt and within area range, tp = 0, fp = 1", "\n", "# 4. it matches no gt but is beyond area range, tp = 0, fp = 0", "\n", "", "", "if", "matched_gt", ">=", "0", ":", "\n", "                ", "gt_covered", "[", "matched_gt", "]", "=", "1", "\n", "if", "not", "(", "gt_ignore", "[", "matched_gt", "]", "or", "gt_area_ignore", "[", "matched_gt", "]", ")", ":", "\n", "                    ", "tp", "[", "k", ",", "i", "]", "=", "1", "\n", "", "", "elif", "min_area", "is", "None", ":", "\n", "                ", "fp", "[", "k", ",", "i", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "bbox", "=", "det_bboxes", "[", "i", ",", ":", "4", "]", "\n", "area", "=", "(", "bbox", "[", "2", "]", "-", "bbox", "[", "0", "]", "+", "1", ")", "*", "(", "bbox", "[", "3", "]", "-", "bbox", "[", "1", "]", "+", "1", ")", "\n", "if", "area", ">=", "min_area", "and", "area", "<", "max_area", ":", "\n", "                    ", "fp", "[", "k", ",", "i", "]", "=", "1", "\n", "", "", "", "", "return", "tp", ",", "fp", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.mean_ap.tpfp_default": [[137, 200], ["len", "numpy.zeros", "numpy.zeros", "bbox_overlaps.bbox_overlaps", "bbox_overlaps.bbox_overlaps.max", "bbox_overlaps.bbox_overlaps.argmax", "numpy.argsort", "enumerate", "numpy.zeros", "enumerate", "numpy.zeros_like"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.geometry.bbox_overlaps"], ["", "def", "tpfp_default", "(", "det_bboxes", ",", "gt_bboxes", ",", "gt_ignore", ",", "iou_thr", ",", "area_ranges", "=", "None", ")", ":", "\n", "    ", "\"\"\"Check if detected bboxes are true positive or false positive.\n\n    Args:\n        det_bbox (ndarray): the detected bbox\n        gt_bboxes (ndarray): ground truth bboxes of this image\n        gt_ignore (ndarray): indicate if gts are ignored for evaluation or not\n        iou_thr (float): the iou thresholds\n\n    Returns:\n        tuple: (tp, fp), two arrays whose elements are 0 and 1\n    \"\"\"", "\n", "num_dets", "=", "det_bboxes", ".", "shape", "[", "0", "]", "\n", "num_gts", "=", "gt_bboxes", ".", "shape", "[", "0", "]", "\n", "if", "area_ranges", "is", "None", ":", "\n", "        ", "area_ranges", "=", "[", "(", "None", ",", "None", ")", "]", "\n", "", "num_scales", "=", "len", "(", "area_ranges", ")", "\n", "# tp and fp are of shape (num_scales, num_gts), each row is tp or fp of", "\n", "# a certain scale", "\n", "tp", "=", "np", ".", "zeros", "(", "(", "num_scales", ",", "num_dets", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "fp", "=", "np", ".", "zeros", "(", "(", "num_scales", ",", "num_dets", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# if there is no gt bboxes in this image, then all det bboxes", "\n", "# within area range are false positives", "\n", "if", "gt_bboxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "        ", "if", "area_ranges", "==", "[", "(", "None", ",", "None", ")", "]", ":", "\n", "            ", "fp", "[", "...", "]", "=", "1", "\n", "", "else", ":", "\n", "            ", "det_areas", "=", "(", "det_bboxes", "[", ":", ",", "2", "]", "-", "det_bboxes", "[", ":", ",", "0", "]", "+", "1", ")", "*", "(", "\n", "det_bboxes", "[", ":", ",", "3", "]", "-", "det_bboxes", "[", ":", ",", "1", "]", "+", "1", ")", "\n", "for", "i", ",", "(", "min_area", ",", "max_area", ")", "in", "enumerate", "(", "area_ranges", ")", ":", "\n", "                ", "fp", "[", "i", ",", "(", "det_areas", ">=", "min_area", ")", "&", "(", "det_areas", "<", "max_area", ")", "]", "=", "1", "\n", "", "", "return", "tp", ",", "fp", "\n", "", "ious", "=", "bbox_overlaps", "(", "det_bboxes", ",", "gt_bboxes", ")", "\n", "ious_max", "=", "ious", ".", "max", "(", "axis", "=", "1", ")", "\n", "ious_argmax", "=", "ious", ".", "argmax", "(", "axis", "=", "1", ")", "\n", "sort_inds", "=", "np", ".", "argsort", "(", "-", "det_bboxes", "[", ":", ",", "-", "1", "]", ")", "\n", "for", "k", ",", "(", "min_area", ",", "max_area", ")", "in", "enumerate", "(", "area_ranges", ")", ":", "\n", "        ", "gt_covered", "=", "np", ".", "zeros", "(", "num_gts", ",", "dtype", "=", "bool", ")", "\n", "# if no area range is specified, gt_area_ignore is all False", "\n", "if", "min_area", "is", "None", ":", "\n", "            ", "gt_area_ignore", "=", "np", ".", "zeros_like", "(", "gt_ignore", ",", "dtype", "=", "bool", ")", "\n", "", "else", ":", "\n", "            ", "gt_areas", "=", "(", "gt_bboxes", "[", ":", ",", "2", "]", "-", "gt_bboxes", "[", ":", ",", "0", "]", "+", "1", ")", "*", "(", "\n", "gt_bboxes", "[", ":", ",", "3", "]", "-", "gt_bboxes", "[", ":", ",", "1", "]", "+", "1", ")", "\n", "gt_area_ignore", "=", "(", "gt_areas", "<", "min_area", ")", "|", "(", "gt_areas", ">=", "max_area", ")", "\n", "", "for", "i", "in", "sort_inds", ":", "\n", "            ", "if", "ious_max", "[", "i", "]", ">=", "iou_thr", ":", "\n", "                ", "matched_gt", "=", "ious_argmax", "[", "i", "]", "\n", "if", "not", "(", "gt_ignore", "[", "matched_gt", "]", "or", "gt_area_ignore", "[", "matched_gt", "]", ")", ":", "\n", "                    ", "if", "not", "gt_covered", "[", "matched_gt", "]", ":", "\n", "                        ", "gt_covered", "[", "matched_gt", "]", "=", "True", "\n", "tp", "[", "k", ",", "i", "]", "=", "1", "\n", "", "else", ":", "\n", "                        ", "fp", "[", "k", ",", "i", "]", "=", "1", "\n", "# otherwise ignore this detected bbox, tp = 0, fp = 0", "\n", "", "", "", "elif", "min_area", "is", "None", ":", "\n", "                ", "fp", "[", "k", ",", "i", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "bbox", "=", "det_bboxes", "[", "i", ",", ":", "4", "]", "\n", "area", "=", "(", "bbox", "[", "2", "]", "-", "bbox", "[", "0", "]", "+", "1", ")", "*", "(", "bbox", "[", "3", "]", "-", "bbox", "[", "1", "]", "+", "1", ")", "\n", "if", "area", ">=", "min_area", "and", "area", "<", "max_area", ":", "\n", "                    ", "fp", "[", "k", ",", "i", "]", "=", "1", "\n", "", "", "", "", "return", "tp", ",", "fp", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.mean_ap.get_cls_results": [[202, 218], ["range", "len", "cls_gts.append", "cls_gt_ignore.append", "cls_gt_ignore.append", "numpy.zeros"], "function", ["None"], ["", "def", "get_cls_results", "(", "det_results", ",", "gt_bboxes", ",", "gt_labels", ",", "gt_ignore", ",", "class_id", ")", ":", "\n", "    ", "\"\"\"Get det results and gt information of a certain class.\"\"\"", "\n", "cls_dets", "=", "[", "det", "[", "class_id", "]", "\n", "for", "det", "in", "det_results", "]", "# det bboxes of this class", "\n", "cls_gts", "=", "[", "]", "# gt bboxes of this class", "\n", "cls_gt_ignore", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "gt_bboxes", ")", ")", ":", "\n", "        ", "gt_bbox", "=", "gt_bboxes", "[", "j", "]", "\n", "cls_inds", "=", "(", "gt_labels", "[", "j", "]", "==", "class_id", "+", "1", ")", "\n", "cls_gt", "=", "gt_bbox", "[", "cls_inds", ",", ":", "]", "if", "gt_bbox", ".", "shape", "[", "0", "]", ">", "0", "else", "gt_bbox", "\n", "cls_gts", ".", "append", "(", "cls_gt", ")", "\n", "if", "gt_ignore", "is", "None", ":", "\n", "            ", "cls_gt_ignore", ".", "append", "(", "np", ".", "zeros", "(", "cls_gt", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "int32", ")", ")", "\n", "", "else", ":", "\n", "            ", "cls_gt_ignore", ".", "append", "(", "gt_ignore", "[", "j", "]", "[", "cls_inds", "]", ")", "\n", "", "", "return", "cls_dets", ",", "cls_gts", ",", "cls_gt_ignore", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.mean_ap.eval_map": [[220, 330], ["len", "range", "len", "len", "len", "range", "len", "mean_ap.get_cls_results", "tuple", "numpy.zeros", "enumerate", "numpy.vstack", "numpy.argsort", "numpy.cumsum", "numpy.cumsum", "mean_ap.average_precision", "eval_results.append", "numpy.vstack", "numpy.vstack", "mean_ap.print_map_summary", "len", "len", "len", "tpfp_func", "zip", "numpy.hstack", "numpy.hstack", "numpy.finfo", "numpy.maximum", "numpy.maximum", "num_gts.item.item", "numpy.array().mean().item", "len", "len", "range", "numpy.sum", "enumerate", "numpy.any", "all_ap[].mean", "range", "aps.append", "len", "numpy.logical_not", "numpy.sum", "numpy.array().mean", "numpy.array", "numpy.logical_not"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.mean_ap.get_cls_results", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.mean_ap.average_precision", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.mean_ap.print_map_summary"], ["", "def", "eval_map", "(", "det_results", ",", "\n", "gt_bboxes", ",", "\n", "gt_labels", ",", "\n", "gt_ignore", "=", "None", ",", "\n", "scale_ranges", "=", "None", ",", "\n", "iou_thr", "=", "0.5", ",", "\n", "dataset", "=", "None", ",", "\n", "print_summary", "=", "True", ")", ":", "\n", "    ", "\"\"\"Evaluate mAP of a dataset.\n\n    Args:\n        det_results (list): a list of list, [[cls1_det, cls2_det, ...], ...]\n        gt_bboxes (list): ground truth bboxes of each image, a list of K*4\n            array.\n        gt_labels (list): ground truth labels of each image, a list of K array\n        gt_ignore (list): gt ignore indicators of each image, a list of K array\n        scale_ranges (list, optional): [(min1, max1), (min2, max2), ...]\n        iou_thr (float): IoU threshold\n        dataset (None or str or list): dataset name or dataset classes, there\n            are minor differences in metrics for different datsets, e.g.\n            \"voc07\", \"imagenet_det\", etc.\n        print_summary (bool): whether to print the mAP summary\n\n    Returns:\n        tuple: (mAP, [dict, dict, ...])\n    \"\"\"", "\n", "assert", "len", "(", "det_results", ")", "==", "len", "(", "gt_bboxes", ")", "==", "len", "(", "gt_labels", ")", "\n", "if", "gt_ignore", "is", "not", "None", ":", "\n", "        ", "assert", "len", "(", "gt_ignore", ")", "==", "len", "(", "gt_labels", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "gt_ignore", ")", ")", ":", "\n", "            ", "assert", "len", "(", "gt_labels", "[", "i", "]", ")", "==", "len", "(", "gt_ignore", "[", "i", "]", ")", "\n", "", "", "area_ranges", "=", "(", "[", "(", "rg", "[", "0", "]", "**", "2", ",", "rg", "[", "1", "]", "**", "2", ")", "for", "rg", "in", "scale_ranges", "]", "\n", "if", "scale_ranges", "is", "not", "None", "else", "None", ")", "\n", "num_scales", "=", "len", "(", "scale_ranges", ")", "if", "scale_ranges", "is", "not", "None", "else", "1", "\n", "eval_results", "=", "[", "]", "\n", "num_classes", "=", "len", "(", "det_results", "[", "0", "]", ")", "# positive class num", "\n", "gt_labels", "=", "[", "\n", "label", "if", "label", ".", "ndim", "==", "1", "else", "label", "[", ":", ",", "0", "]", "for", "label", "in", "gt_labels", "\n", "]", "\n", "for", "i", "in", "range", "(", "num_classes", ")", ":", "\n", "# get gt and det bboxes of this class", "\n", "        ", "cls_dets", ",", "cls_gts", ",", "cls_gt_ignore", "=", "get_cls_results", "(", "\n", "det_results", ",", "gt_bboxes", ",", "gt_labels", ",", "gt_ignore", ",", "i", ")", "\n", "# calculate tp and fp for each image", "\n", "tpfp_func", "=", "(", "tpfp_imagenet", "\n", "if", "dataset", "in", "[", "'det'", ",", "'vid'", "]", "else", "tpfp_default", ")", "\n", "tpfp", "=", "[", "\n", "tpfp_func", "(", "cls_dets", "[", "j", "]", ",", "cls_gts", "[", "j", "]", ",", "cls_gt_ignore", "[", "j", "]", ",", "iou_thr", ",", "\n", "area_ranges", ")", "for", "j", "in", "range", "(", "len", "(", "cls_dets", ")", ")", "\n", "]", "\n", "tp", ",", "fp", "=", "tuple", "(", "zip", "(", "*", "tpfp", ")", ")", "\n", "# calculate gt number of each scale, gts ignored or beyond scale", "\n", "# are not counted", "\n", "num_gts", "=", "np", ".", "zeros", "(", "num_scales", ",", "dtype", "=", "int", ")", "\n", "for", "j", ",", "bbox", "in", "enumerate", "(", "cls_gts", ")", ":", "\n", "            ", "if", "area_ranges", "is", "None", ":", "\n", "                ", "num_gts", "[", "0", "]", "+=", "np", ".", "sum", "(", "np", ".", "logical_not", "(", "cls_gt_ignore", "[", "j", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "gt_areas", "=", "(", "bbox", "[", ":", ",", "2", "]", "-", "bbox", "[", ":", ",", "0", "]", "+", "1", ")", "*", "(", "\n", "bbox", "[", ":", ",", "3", "]", "-", "bbox", "[", ":", ",", "1", "]", "+", "1", ")", "\n", "for", "k", ",", "(", "min_area", ",", "max_area", ")", "in", "enumerate", "(", "area_ranges", ")", ":", "\n", "                    ", "num_gts", "[", "k", "]", "+=", "np", ".", "sum", "(", "\n", "np", ".", "logical_not", "(", "cls_gt_ignore", "[", "j", "]", ")", "&", "\n", "(", "gt_areas", ">=", "min_area", ")", "&", "(", "gt_areas", "<", "max_area", ")", ")", "\n", "# sort all det bboxes by score, also sort tp and fp", "\n", "", "", "", "cls_dets", "=", "np", ".", "vstack", "(", "cls_dets", ")", "\n", "num_dets", "=", "cls_dets", ".", "shape", "[", "0", "]", "\n", "sort_inds", "=", "np", ".", "argsort", "(", "-", "cls_dets", "[", ":", ",", "-", "1", "]", ")", "\n", "tp", "=", "np", ".", "hstack", "(", "tp", ")", "[", ":", ",", "sort_inds", "]", "\n", "fp", "=", "np", ".", "hstack", "(", "fp", ")", "[", ":", ",", "sort_inds", "]", "\n", "# calculate recall and precision with tp and fp", "\n", "tp", "=", "np", ".", "cumsum", "(", "tp", ",", "axis", "=", "1", ")", "\n", "fp", "=", "np", ".", "cumsum", "(", "fp", ",", "axis", "=", "1", ")", "\n", "eps", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "eps", "\n", "recalls", "=", "tp", "/", "np", ".", "maximum", "(", "num_gts", "[", ":", ",", "np", ".", "newaxis", "]", ",", "eps", ")", "\n", "precisions", "=", "tp", "/", "np", ".", "maximum", "(", "(", "tp", "+", "fp", ")", ",", "eps", ")", "\n", "# calculate AP", "\n", "if", "scale_ranges", "is", "None", ":", "\n", "            ", "recalls", "=", "recalls", "[", "0", ",", ":", "]", "\n", "precisions", "=", "precisions", "[", "0", ",", ":", "]", "\n", "num_gts", "=", "num_gts", ".", "item", "(", ")", "\n", "", "mode", "=", "'area'", "if", "dataset", "!=", "'voc07'", "else", "'11points'", "\n", "ap", "=", "average_precision", "(", "recalls", ",", "precisions", ",", "mode", ")", "\n", "eval_results", ".", "append", "(", "{", "\n", "'num_gts'", ":", "num_gts", ",", "\n", "'num_dets'", ":", "num_dets", ",", "\n", "'recall'", ":", "recalls", ",", "\n", "'precision'", ":", "precisions", ",", "\n", "'ap'", ":", "ap", "\n", "}", ")", "\n", "", "if", "scale_ranges", "is", "not", "None", ":", "\n", "# shape (num_classes, num_scales)", "\n", "        ", "all_ap", "=", "np", ".", "vstack", "(", "[", "cls_result", "[", "'ap'", "]", "for", "cls_result", "in", "eval_results", "]", ")", "\n", "all_num_gts", "=", "np", ".", "vstack", "(", "\n", "[", "cls_result", "[", "'num_gts'", "]", "for", "cls_result", "in", "eval_results", "]", ")", "\n", "mean_ap", "=", "[", "\n", "all_ap", "[", "all_num_gts", "[", ":", ",", "i", "]", ">", "0", ",", "i", "]", ".", "mean", "(", ")", "\n", "if", "np", ".", "any", "(", "all_num_gts", "[", ":", ",", "i", "]", ">", "0", ")", "else", "0.0", "\n", "for", "i", "in", "range", "(", "num_scales", ")", "\n", "]", "\n", "", "else", ":", "\n", "        ", "aps", "=", "[", "]", "\n", "for", "cls_result", "in", "eval_results", ":", "\n", "            ", "if", "cls_result", "[", "'num_gts'", "]", ">", "0", ":", "\n", "                ", "aps", ".", "append", "(", "cls_result", "[", "'ap'", "]", ")", "\n", "", "", "mean_ap", "=", "np", ".", "array", "(", "aps", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "if", "aps", "else", "0.0", "\n", "", "if", "print_summary", ":", "\n", "        ", "print_map_summary", "(", "mean_ap", ",", "eval_results", ",", "dataset", ")", "\n", "\n", "", "return", "mean_ap", ",", "eval_results", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.mean_ap.print_map_summary": [[332, 379], ["len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "range", "isinstance", "len", "mmcv.is_str", "isinstance", "range", "table_data.append", "terminaltables.AsciiTable", "print", "str", "class_names.get_classes", "table_data.append", "numpy.array", "numpy.array", "range"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.get_classes"], ["", "def", "print_map_summary", "(", "mean_ap", ",", "results", ",", "dataset", "=", "None", ")", ":", "\n", "    ", "\"\"\"Print mAP and results of each class.\n\n    Args:\n        mean_ap(float): calculated from `eval_map`\n        results(list): calculated from `eval_map`\n        dataset(None or str or list): dataset name or dataset classes.\n    \"\"\"", "\n", "num_scales", "=", "len", "(", "results", "[", "0", "]", "[", "'ap'", "]", ")", "if", "isinstance", "(", "results", "[", "0", "]", "[", "'ap'", "]", ",", "\n", "np", ".", "ndarray", ")", "else", "1", "\n", "num_classes", "=", "len", "(", "results", ")", "\n", "\n", "recalls", "=", "np", ".", "zeros", "(", "(", "num_scales", ",", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "precisions", "=", "np", ".", "zeros", "(", "(", "num_scales", ",", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "aps", "=", "np", ".", "zeros", "(", "(", "num_scales", ",", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "num_gts", "=", "np", ".", "zeros", "(", "(", "num_scales", ",", "num_classes", ")", ",", "dtype", "=", "int", ")", "\n", "for", "i", ",", "cls_result", "in", "enumerate", "(", "results", ")", ":", "\n", "        ", "if", "cls_result", "[", "'recall'", "]", ".", "size", ">", "0", ":", "\n", "            ", "recalls", "[", ":", ",", "i", "]", "=", "np", ".", "array", "(", "cls_result", "[", "'recall'", "]", ",", "ndmin", "=", "2", ")", "[", ":", ",", "-", "1", "]", "\n", "precisions", "[", ":", ",", "i", "]", "=", "np", ".", "array", "(", "\n", "cls_result", "[", "'precision'", "]", ",", "ndmin", "=", "2", ")", "[", ":", ",", "-", "1", "]", "\n", "", "aps", "[", ":", ",", "i", "]", "=", "cls_result", "[", "'ap'", "]", "\n", "num_gts", "[", ":", ",", "i", "]", "=", "cls_result", "[", "'num_gts'", "]", "\n", "\n", "", "if", "dataset", "is", "None", ":", "\n", "        ", "label_names", "=", "[", "str", "(", "i", ")", "for", "i", "in", "range", "(", "1", ",", "num_classes", "+", "1", ")", "]", "\n", "", "elif", "mmcv", ".", "is_str", "(", "dataset", ")", ":", "\n", "        ", "label_names", "=", "get_classes", "(", "dataset", ")", "\n", "", "else", ":", "\n", "        ", "label_names", "=", "dataset", "\n", "\n", "", "if", "not", "isinstance", "(", "mean_ap", ",", "list", ")", ":", "\n", "        ", "mean_ap", "=", "[", "mean_ap", "]", "\n", "", "header", "=", "[", "'class'", ",", "'gts'", ",", "'dets'", ",", "'recall'", ",", "'precision'", ",", "'ap'", "]", "\n", "for", "i", "in", "range", "(", "num_scales", ")", ":", "\n", "        ", "table_data", "=", "[", "header", "]", "\n", "for", "j", "in", "range", "(", "num_classes", ")", ":", "\n", "            ", "row_data", "=", "[", "\n", "label_names", "[", "j", "]", ",", "num_gts", "[", "i", ",", "j", "]", ",", "results", "[", "j", "]", "[", "'num_dets'", "]", ",", "\n", "'{:.3f}'", ".", "format", "(", "recalls", "[", "i", ",", "j", "]", ")", ",", "'{:.3f}'", ".", "format", "(", "\n", "precisions", "[", "i", ",", "j", "]", ")", ",", "'{:.3f}'", ".", "format", "(", "aps", "[", "i", ",", "j", "]", ")", "\n", "]", "\n", "table_data", ".", "append", "(", "row_data", ")", "\n", "", "table_data", ".", "append", "(", "[", "'mAP'", ",", "''", ",", "''", ",", "''", ",", "''", ",", "'{:.3f}'", ".", "format", "(", "mean_ap", "[", "i", "]", ")", "]", ")", "\n", "table", "=", "AsciiTable", "(", "table_data", ")", "\n", "table", ".", "inner_footing_row_border", "=", "True", "\n", "print", "(", "table", ".", "table", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.get_mAP": [[10, 15], ["range", "len"], "function", ["None"], ["def", "get_mAP", "(", "prec", ")", ":", "\n", "    ", "sums", "=", "0", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "prec", ")", ",", "4", ")", ":", "\n", "        ", "sums", "+=", "prec", "[", "i", "]", "\n", "", "return", "sums", "/", "11", "*", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.get_thresholds": [[17, 37], ["scores.sort", "enumerate", "thresholds.append", "len", "len"], "function", ["None"], ["", "@", "numba", ".", "jit", "\n", "def", "get_thresholds", "(", "scores", ":", "np", ".", "ndarray", ",", "num_gt", ",", "num_sample_pts", "=", "41", ")", ":", "\n", "    ", "scores", ".", "sort", "(", ")", "\n", "scores", "=", "scores", "[", ":", ":", "-", "1", "]", "\n", "current_recall", "=", "0", "\n", "thresholds", "=", "[", "]", "\n", "for", "i", ",", "score", "in", "enumerate", "(", "scores", ")", ":", "\n", "        ", "l_recall", "=", "(", "i", "+", "1", ")", "/", "num_gt", "\n", "if", "i", "<", "(", "len", "(", "scores", ")", "-", "1", ")", ":", "\n", "            ", "r_recall", "=", "(", "i", "+", "2", ")", "/", "num_gt", "\n", "", "else", ":", "\n", "            ", "r_recall", "=", "l_recall", "\n", "", "if", "(", "(", "(", "r_recall", "-", "current_recall", ")", "<", "(", "current_recall", "-", "l_recall", ")", ")", "\n", "and", "(", "i", "<", "(", "len", "(", "scores", ")", "-", "1", ")", ")", ")", ":", "\n", "            ", "continue", "\n", "# recall = l_recall", "\n", "", "thresholds", ".", "append", "(", "score", ")", "\n", "current_recall", "+=", "1", "/", "(", "num_sample_pts", "-", "1.0", ")", "\n", "# print(len(thresholds), len(scores), num_gt)", "\n", "", "return", "thresholds", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.clean_data": [[39, 93], ["CLASS_NAMES[].lower", "len", "len", "range", "range", "[].lower", "abs", "ignored_gt.append", "dc_bboxes.append", "[].lower", "ignored_dt.append", "ignored_gt.append", "ignored_gt.append", "ignored_dt.append", "ignored_dt.append"], "function", ["None"], ["", "def", "clean_data", "(", "gt_anno", ",", "dt_anno", ",", "current_class", ",", "difficulty", ")", ":", "\n", "    ", "CLASS_NAMES", "=", "[", "'car'", ",", "'pedestrian'", ",", "'cyclist'", ",", "'van'", ",", "'person_sitting'", ",", "'car'", ",", "'tractor'", ",", "'trailer'", "]", "\n", "MIN_HEIGHT", "=", "[", "40", ",", "25", ",", "25", "]", "\n", "MAX_OCCLUSION", "=", "[", "0", ",", "1", ",", "2", "]", "\n", "MAX_TRUNCATION", "=", "[", "0.15", ",", "0.3", ",", "0.5", "]", "\n", "dc_bboxes", ",", "ignored_gt", ",", "ignored_dt", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "current_cls_name", "=", "CLASS_NAMES", "[", "current_class", "]", ".", "lower", "(", ")", "\n", "num_gt", "=", "len", "(", "gt_anno", "[", "\"name\"", "]", ")", "\n", "num_dt", "=", "len", "(", "dt_anno", "[", "\"name\"", "]", ")", "\n", "num_valid_gt", "=", "0", "\n", "for", "i", "in", "range", "(", "num_gt", ")", ":", "\n", "        ", "bbox", "=", "gt_anno", "[", "\"bbox\"", "]", "[", "i", "]", "\n", "gt_name", "=", "gt_anno", "[", "\"name\"", "]", "[", "i", "]", ".", "lower", "(", ")", "\n", "height", "=", "bbox", "[", "3", "]", "-", "bbox", "[", "1", "]", "\n", "valid_class", "=", "-", "1", "\n", "if", "(", "gt_name", "==", "current_cls_name", ")", ":", "\n", "            ", "valid_class", "=", "1", "\n", "", "elif", "(", "current_cls_name", "==", "\"Pedestrian\"", ".", "lower", "(", ")", "\n", "and", "\"Person_sitting\"", ".", "lower", "(", ")", "==", "gt_name", ")", ":", "\n", "            ", "valid_class", "=", "0", "\n", "", "elif", "(", "current_cls_name", "==", "\"Car\"", ".", "lower", "(", ")", "and", "\"Van\"", ".", "lower", "(", ")", "==", "gt_name", ")", ":", "\n", "            ", "valid_class", "=", "0", "\n", "", "else", ":", "\n", "            ", "valid_class", "=", "-", "1", "\n", "", "ignore", "=", "False", "\n", "if", "(", "(", "gt_anno", "[", "\"occluded\"", "]", "[", "i", "]", ">", "MAX_OCCLUSION", "[", "difficulty", "]", ")", "\n", "or", "(", "gt_anno", "[", "\"truncated\"", "]", "[", "i", "]", ">", "MAX_TRUNCATION", "[", "difficulty", "]", ")", "\n", "or", "(", "height", "<=", "MIN_HEIGHT", "[", "difficulty", "]", ")", ")", ":", "\n", "# if gt_anno[\"difficulty\"][i] > difficulty or gt_anno[\"difficulty\"][i] == -1:", "\n", "            ", "ignore", "=", "True", "\n", "", "if", "valid_class", "==", "1", "and", "not", "ignore", ":", "\n", "            ", "ignored_gt", ".", "append", "(", "0", ")", "\n", "num_valid_gt", "+=", "1", "\n", "", "elif", "(", "valid_class", "==", "0", "or", "(", "ignore", "and", "(", "valid_class", "==", "1", ")", ")", ")", ":", "\n", "            ", "ignored_gt", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "ignored_gt", ".", "append", "(", "-", "1", ")", "\n", "# for i in range(num_gt):", "\n", "", "if", "gt_anno", "[", "\"name\"", "]", "[", "i", "]", "==", "\"DontCare\"", ":", "\n", "            ", "dc_bboxes", ".", "append", "(", "gt_anno", "[", "\"bbox\"", "]", "[", "i", "]", ")", "\n", "", "", "for", "i", "in", "range", "(", "num_dt", ")", ":", "\n", "        ", "if", "(", "dt_anno", "[", "\"name\"", "]", "[", "i", "]", ".", "lower", "(", ")", "==", "current_cls_name", ")", ":", "\n", "            ", "valid_class", "=", "1", "\n", "", "else", ":", "\n", "            ", "valid_class", "=", "-", "1", "\n", "", "height", "=", "abs", "(", "dt_anno", "[", "\"bbox\"", "]", "[", "i", ",", "3", "]", "-", "dt_anno", "[", "\"bbox\"", "]", "[", "i", ",", "1", "]", ")", "\n", "if", "height", "<", "MIN_HEIGHT", "[", "difficulty", "]", ":", "\n", "            ", "ignored_dt", ".", "append", "(", "1", ")", "\n", "", "elif", "valid_class", "==", "1", ":", "\n", "            ", "ignored_dt", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "            ", "ignored_dt", ".", "append", "(", "-", "1", ")", "\n", "\n", "", "", "return", "num_valid_gt", ",", "ignored_gt", ",", "ignored_dt", ",", "dc_bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.image_box_overlap": [[95, 123], ["numba.jit", "numpy.zeros", "range", "range", "min", "max", "min", "max"], "function", ["None"], ["", "@", "numba", ".", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "image_box_overlap", "(", "boxes", ",", "query_boxes", ",", "criterion", "=", "-", "1", ")", ":", "\n", "    ", "N", "=", "boxes", ".", "shape", "[", "0", "]", "\n", "K", "=", "query_boxes", ".", "shape", "[", "0", "]", "\n", "overlaps", "=", "np", ".", "zeros", "(", "(", "N", ",", "K", ")", ",", "dtype", "=", "boxes", ".", "dtype", ")", "\n", "for", "k", "in", "range", "(", "K", ")", ":", "\n", "        ", "qbox_area", "=", "(", "(", "query_boxes", "[", "k", ",", "2", "]", "-", "query_boxes", "[", "k", ",", "0", "]", ")", "*", "\n", "(", "query_boxes", "[", "k", ",", "3", "]", "-", "query_boxes", "[", "k", ",", "1", "]", ")", ")", "\n", "for", "n", "in", "range", "(", "N", ")", ":", "\n", "            ", "iw", "=", "(", "min", "(", "boxes", "[", "n", ",", "2", "]", ",", "query_boxes", "[", "k", ",", "2", "]", ")", "-", "\n", "max", "(", "boxes", "[", "n", ",", "0", "]", ",", "query_boxes", "[", "k", ",", "0", "]", ")", ")", "\n", "if", "iw", ">", "0", ":", "\n", "                ", "ih", "=", "(", "min", "(", "boxes", "[", "n", ",", "3", "]", ",", "query_boxes", "[", "k", ",", "3", "]", ")", "-", "\n", "max", "(", "boxes", "[", "n", ",", "1", "]", ",", "query_boxes", "[", "k", ",", "1", "]", ")", ")", "\n", "if", "ih", ">", "0", ":", "\n", "                    ", "if", "criterion", "==", "-", "1", ":", "\n", "                        ", "ua", "=", "(", "\n", "(", "boxes", "[", "n", ",", "2", "]", "-", "boxes", "[", "n", ",", "0", "]", ")", "*", "\n", "(", "boxes", "[", "n", ",", "3", "]", "-", "boxes", "[", "n", ",", "1", "]", ")", "+", "qbox_area", "-", "iw", "*", "ih", ")", "\n", "", "elif", "criterion", "==", "0", ":", "\n", "                        ", "ua", "=", "(", "(", "boxes", "[", "n", ",", "2", "]", "-", "boxes", "[", "n", ",", "0", "]", ")", "*", "\n", "(", "boxes", "[", "n", ",", "3", "]", "-", "boxes", "[", "n", ",", "1", "]", ")", ")", "\n", "", "elif", "criterion", "==", "1", ":", "\n", "                        ", "ua", "=", "qbox_area", "\n", "", "else", ":", "\n", "                        ", "ua", "=", "1.0", "\n", "", "overlaps", "[", "n", ",", "k", "]", "=", "iw", "*", "ih", "/", "ua", "\n", "", "", "", "", "return", "overlaps", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.bev_box_overlap": [[125, 128], ["mmdet.core.post_processing.rotate_nms_gpu.rotate_iou_gpu_eval"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.rotate_iou_gpu_eval"], ["", "def", "bev_box_overlap", "(", "boxes", ",", "qboxes", ",", "criterion", "=", "-", "1", ")", ":", "\n", "    ", "riou", "=", "rotate_iou_gpu_eval", "(", "boxes", ",", "qboxes", ",", "criterion", ")", "\n", "return", "riou", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.d3_box_overlap_kernel": [[130, 155], ["numba.jit", "range", "range", "min", "max"], "function", ["None"], ["", "@", "numba", ".", "jit", "(", "nopython", "=", "True", ",", "parallel", "=", "True", ")", "\n", "def", "d3_box_overlap_kernel", "(", "boxes", ",", "qboxes", ",", "rinc", ",", "criterion", "=", "-", "1", ")", ":", "\n", "# ONLY support overlap in CAMERA, not lider.", "\n", "    ", "N", ",", "K", "=", "boxes", ".", "shape", "[", "0", "]", ",", "qboxes", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "K", ")", ":", "\n", "            ", "if", "rinc", "[", "i", ",", "j", "]", ">", "0", ":", "\n", "                ", "iw", "=", "(", "min", "(", "boxes", "[", "i", ",", "1", "]", ",", "qboxes", "[", "j", ",", "1", "]", ")", "-", "max", "(", "\n", "boxes", "[", "i", ",", "1", "]", "-", "boxes", "[", "i", ",", "4", "]", ",", "qboxes", "[", "j", ",", "1", "]", "-", "qboxes", "[", "j", ",", "4", "]", ")", ")", "\n", "\n", "if", "iw", ">", "0", ":", "\n", "                    ", "area1", "=", "boxes", "[", "i", ",", "3", "]", "*", "boxes", "[", "i", ",", "4", "]", "*", "boxes", "[", "i", ",", "5", "]", "\n", "area2", "=", "qboxes", "[", "j", ",", "3", "]", "*", "qboxes", "[", "j", ",", "4", "]", "*", "qboxes", "[", "j", ",", "5", "]", "\n", "inc", "=", "iw", "*", "rinc", "[", "i", ",", "j", "]", "\n", "if", "criterion", "==", "-", "1", ":", "\n", "                        ", "ua", "=", "(", "area1", "+", "area2", "-", "inc", ")", "\n", "", "elif", "criterion", "==", "0", ":", "\n", "                        ", "ua", "=", "area1", "\n", "", "elif", "criterion", "==", "1", ":", "\n", "                        ", "ua", "=", "area2", "\n", "", "else", ":", "\n", "                        ", "ua", "=", "1.0", "\n", "", "rinc", "[", "i", ",", "j", "]", "=", "inc", "/", "ua", "\n", "", "else", ":", "\n", "                    ", "rinc", "[", "i", ",", "j", "]", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.d3_box_overlap": [[157, 162], ["mmdet.core.post_processing.rotate_nms_gpu.rotate_iou_gpu_eval", "kitti_eval.d3_box_overlap_kernel"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.post_processing.rotate_nms_gpu.rotate_iou_gpu_eval", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.d3_box_overlap_kernel"], ["", "", "", "", "", "def", "d3_box_overlap", "(", "boxes", ",", "qboxes", ",", "criterion", "=", "-", "1", ")", ":", "\n", "    ", "rinc", "=", "rotate_iou_gpu_eval", "(", "boxes", "[", ":", ",", "[", "0", ",", "2", ",", "3", ",", "5", ",", "6", "]", "]", ",", "\n", "qboxes", "[", ":", ",", "[", "0", ",", "2", ",", "3", ",", "5", ",", "6", "]", "]", ",", "2", ")", "\n", "d3_box_overlap_kernel", "(", "boxes", ",", "qboxes", ",", "rinc", ",", "criterion", ")", "\n", "return", "rinc", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.compute_statistics_jit": [[164, 284], ["numba.jit", "numpy.zeros", "numpy.zeros", "range", "range", "range", "range", "kitti_eval.image_box_overlap", "range", "numpy.zeros", "range", "range", "numpy.sum", "numpy.cos"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.image_box_overlap"], ["", "@", "numba", ".", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "compute_statistics_jit", "(", "overlaps", ",", "\n", "gt_datas", ",", "\n", "dt_datas", ",", "\n", "ignored_gt", ",", "\n", "ignored_det", ",", "\n", "dc_bboxes", ",", "\n", "metric", ",", "\n", "min_overlap", ",", "\n", "thresh", "=", "0", ",", "\n", "compute_fp", "=", "False", ",", "\n", "compute_aos", "=", "False", ")", ":", "\n", "\n", "    ", "det_size", "=", "dt_datas", ".", "shape", "[", "0", "]", "\n", "gt_size", "=", "gt_datas", ".", "shape", "[", "0", "]", "\n", "dt_scores", "=", "dt_datas", "[", ":", ",", "-", "1", "]", "\n", "dt_alphas", "=", "dt_datas", "[", ":", ",", "4", "]", "\n", "gt_alphas", "=", "gt_datas", "[", ":", ",", "4", "]", "\n", "dt_bboxes", "=", "dt_datas", "[", ":", ",", ":", "4", "]", "\n", "# gt_bboxes = gt_datas[:, :4]", "\n", "\n", "assigned_detection", "=", "[", "False", "]", "*", "det_size", "\n", "ignored_threshold", "=", "[", "False", "]", "*", "det_size", "\n", "if", "compute_fp", ":", "\n", "        ", "for", "i", "in", "range", "(", "det_size", ")", ":", "\n", "            ", "if", "(", "dt_scores", "[", "i", "]", "<", "thresh", ")", ":", "\n", "                ", "ignored_threshold", "[", "i", "]", "=", "True", "\n", "", "", "", "NO_DETECTION", "=", "-", "10000000", "\n", "tp", ",", "fp", ",", "fn", ",", "similarity", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "# thresholds = [0.0]", "\n", "# delta = [0.0]", "\n", "thresholds", "=", "np", ".", "zeros", "(", "(", "gt_size", ",", ")", ")", "\n", "thresh_idx", "=", "0", "\n", "delta", "=", "np", ".", "zeros", "(", "(", "gt_size", ",", ")", ")", "\n", "delta_idx", "=", "0", "\n", "for", "i", "in", "range", "(", "gt_size", ")", ":", "\n", "        ", "if", "ignored_gt", "[", "i", "]", "==", "-", "1", ":", "\n", "            ", "continue", "\n", "", "det_idx", "=", "-", "1", "\n", "valid_detection", "=", "NO_DETECTION", "\n", "max_overlap", "=", "0", "\n", "assigned_ignored_det", "=", "False", "\n", "\n", "for", "j", "in", "range", "(", "det_size", ")", ":", "\n", "            ", "if", "(", "ignored_det", "[", "j", "]", "==", "-", "1", ")", ":", "\n", "                ", "continue", "\n", "", "if", "(", "assigned_detection", "[", "j", "]", ")", ":", "\n", "                ", "continue", "\n", "", "if", "(", "ignored_threshold", "[", "j", "]", ")", ":", "\n", "                ", "continue", "\n", "", "overlap", "=", "overlaps", "[", "j", ",", "i", "]", "\n", "dt_score", "=", "dt_scores", "[", "j", "]", "\n", "if", "(", "not", "compute_fp", "and", "(", "overlap", ">", "min_overlap", ")", "\n", "and", "dt_score", ">", "valid_detection", ")", ":", "\n", "                ", "det_idx", "=", "j", "\n", "valid_detection", "=", "dt_score", "\n", "", "elif", "(", "compute_fp", "and", "(", "overlap", ">", "min_overlap", ")", "\n", "and", "(", "overlap", ">", "max_overlap", "or", "assigned_ignored_det", ")", "\n", "and", "ignored_det", "[", "j", "]", "==", "0", ")", ":", "\n", "                ", "max_overlap", "=", "overlap", "\n", "det_idx", "=", "j", "\n", "valid_detection", "=", "1", "\n", "assigned_ignored_det", "=", "False", "\n", "", "elif", "(", "compute_fp", "and", "(", "overlap", ">", "min_overlap", ")", "\n", "and", "(", "valid_detection", "==", "NO_DETECTION", ")", "\n", "and", "ignored_det", "[", "j", "]", "==", "1", ")", ":", "\n", "                ", "det_idx", "=", "j", "\n", "valid_detection", "=", "1", "\n", "assigned_ignored_det", "=", "True", "\n", "\n", "", "", "if", "(", "valid_detection", "==", "NO_DETECTION", ")", "and", "ignored_gt", "[", "i", "]", "==", "0", ":", "\n", "            ", "fn", "+=", "1", "\n", "", "elif", "(", "(", "valid_detection", "!=", "NO_DETECTION", ")", "\n", "and", "(", "ignored_gt", "[", "i", "]", "==", "1", "or", "ignored_det", "[", "det_idx", "]", "==", "1", ")", ")", ":", "\n", "            ", "assigned_detection", "[", "det_idx", "]", "=", "True", "\n", "", "elif", "valid_detection", "!=", "NO_DETECTION", ":", "\n", "# only a tp add a threshold.", "\n", "            ", "tp", "+=", "1", "\n", "# thresholds.append(dt_scores[det_idx])", "\n", "thresholds", "[", "thresh_idx", "]", "=", "dt_scores", "[", "det_idx", "]", "\n", "thresh_idx", "+=", "1", "\n", "if", "compute_aos", ":", "\n", "# delta.append(gt_alphas[i] - dt_alphas[det_idx])", "\n", "                ", "delta", "[", "delta_idx", "]", "=", "gt_alphas", "[", "i", "]", "-", "dt_alphas", "[", "det_idx", "]", "\n", "delta_idx", "+=", "1", "\n", "\n", "", "assigned_detection", "[", "det_idx", "]", "=", "True", "\n", "", "", "if", "compute_fp", ":", "\n", "        ", "for", "i", "in", "range", "(", "det_size", ")", ":", "\n", "            ", "if", "(", "not", "(", "assigned_detection", "[", "i", "]", "or", "ignored_det", "[", "i", "]", "==", "-", "1", "\n", "or", "ignored_det", "[", "i", "]", "==", "1", "or", "ignored_threshold", "[", "i", "]", ")", ")", ":", "\n", "                ", "fp", "+=", "1", "\n", "", "", "nstuff", "=", "0", "\n", "if", "metric", "==", "0", ":", "\n", "            ", "overlaps_dt_dc", "=", "image_box_overlap", "(", "dt_bboxes", ",", "dc_bboxes", ",", "0", ")", "\n", "for", "i", "in", "range", "(", "dc_bboxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "det_size", ")", ":", "\n", "                    ", "if", "(", "assigned_detection", "[", "j", "]", ")", ":", "\n", "                        ", "continue", "\n", "", "if", "(", "ignored_det", "[", "j", "]", "==", "-", "1", "or", "ignored_det", "[", "j", "]", "==", "1", ")", ":", "\n", "                        ", "continue", "\n", "", "if", "(", "ignored_threshold", "[", "j", "]", ")", ":", "\n", "                        ", "continue", "\n", "", "if", "overlaps_dt_dc", "[", "j", ",", "i", "]", ">", "min_overlap", ":", "\n", "                        ", "assigned_detection", "[", "j", "]", "=", "True", "\n", "nstuff", "+=", "1", "\n", "", "", "", "", "fp", "-=", "nstuff", "\n", "if", "compute_aos", ":", "\n", "            ", "tmp", "=", "np", ".", "zeros", "(", "(", "fp", "+", "delta_idx", ",", ")", ")", "\n", "# tmp = [0] * fp", "\n", "for", "i", "in", "range", "(", "delta_idx", ")", ":", "\n", "                ", "tmp", "[", "i", "+", "fp", "]", "=", "(", "1.0", "+", "np", ".", "cos", "(", "delta", "[", "i", "]", ")", ")", "/", "2.0", "\n", "# tmp.append((1.0 + np.cos(delta[i])) / 2.0)", "\n", "# assert len(tmp) == fp + tp", "\n", "# assert len(delta) == tp", "\n", "", "if", "tp", ">", "0", "or", "fp", ">", "0", ":", "\n", "                ", "similarity", "=", "np", ".", "sum", "(", "tmp", ")", "\n", "", "else", ":", "\n", "                ", "similarity", "=", "-", "1", "\n", "", "", "", "return", "tp", ",", "fp", ",", "fn", ",", "similarity", ",", "thresholds", "[", ":", "thresh_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.get_split_parts": [[286, 293], ["None"], "function", ["None"], ["", "def", "get_split_parts", "(", "num", ",", "num_part", ")", ":", "\n", "    ", "same_part", "=", "num", "//", "num_part", "\n", "remain_num", "=", "num", "%", "num_part", "\n", "if", "remain_num", "==", "0", ":", "\n", "        ", "return", "[", "same_part", "]", "*", "num_part", "\n", "", "else", ":", "\n", "        ", "return", "[", "same_part", "]", "*", "num_part", "+", "[", "remain_num", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.fused_compute_statistics": [[295, 343], ["numba.jit", "range", "enumerate", "kitti_eval.compute_statistics_jit"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.compute_statistics_jit"], ["", "", "@", "numba", ".", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "fused_compute_statistics", "(", "overlaps", ",", "\n", "pr", ",", "\n", "gt_nums", ",", "\n", "dt_nums", ",", "\n", "dc_nums", ",", "\n", "gt_datas", ",", "\n", "dt_datas", ",", "\n", "dontcares", ",", "\n", "ignored_gts", ",", "\n", "ignored_dets", ",", "\n", "metric", ",", "\n", "min_overlap", ",", "\n", "thresholds", ",", "\n", "compute_aos", "=", "False", ")", ":", "\n", "    ", "gt_num", "=", "0", "\n", "dt_num", "=", "0", "\n", "dc_num", "=", "0", "\n", "for", "i", "in", "range", "(", "gt_nums", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "for", "t", ",", "thresh", "in", "enumerate", "(", "thresholds", ")", ":", "\n", "            ", "overlap", "=", "overlaps", "[", "dt_num", ":", "dt_num", "+", "dt_nums", "[", "i", "]", ",", "gt_num", ":", "\n", "gt_num", "+", "gt_nums", "[", "i", "]", "]", "\n", "\n", "gt_data", "=", "gt_datas", "[", "gt_num", ":", "gt_num", "+", "gt_nums", "[", "i", "]", "]", "\n", "dt_data", "=", "dt_datas", "[", "dt_num", ":", "dt_num", "+", "dt_nums", "[", "i", "]", "]", "\n", "ignored_gt", "=", "ignored_gts", "[", "gt_num", ":", "gt_num", "+", "gt_nums", "[", "i", "]", "]", "\n", "ignored_det", "=", "ignored_dets", "[", "dt_num", ":", "dt_num", "+", "dt_nums", "[", "i", "]", "]", "\n", "dontcare", "=", "dontcares", "[", "dc_num", ":", "dc_num", "+", "dc_nums", "[", "i", "]", "]", "\n", "tp", ",", "fp", ",", "fn", ",", "similarity", ",", "_", "=", "compute_statistics_jit", "(", "\n", "overlap", ",", "\n", "gt_data", ",", "\n", "dt_data", ",", "\n", "ignored_gt", ",", "\n", "ignored_det", ",", "\n", "dontcare", ",", "\n", "metric", ",", "\n", "min_overlap", "=", "min_overlap", ",", "\n", "thresh", "=", "thresh", ",", "\n", "compute_fp", "=", "True", ",", "\n", "compute_aos", "=", "compute_aos", ")", "\n", "pr", "[", "t", ",", "0", "]", "+=", "tp", "\n", "pr", "[", "t", ",", "1", "]", "+=", "fp", "\n", "pr", "[", "t", ",", "2", "]", "+=", "fn", "\n", "if", "similarity", "!=", "-", "1", ":", "\n", "                ", "pr", "[", "t", ",", "3", "]", "+=", "similarity", "\n", "", "", "gt_num", "+=", "gt_nums", "[", "i", "]", "\n", "dt_num", "+=", "dt_nums", "[", "i", "]", "\n", "dc_num", "+=", "dc_nums", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.calculate_iou_partly": [[345, 420], ["numpy.stack", "numpy.stack", "len", "kitti_eval.get_split_parts", "enumerate", "len", "len", "parted_overlaps.append", "range", "len", "len", "numpy.concatenate", "numpy.concatenate", "kitti_eval.image_box_overlap", "overlaps.append", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "bev_box_overlap().astype", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "d3_box_overlap().astype", "ValueError", "kitti_eval.bev_box_overlap", "kitti_eval.d3_box_overlap"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.get_split_parts", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.image_box_overlap", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.bev_box_overlap", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.d3_box_overlap"], ["", "", "def", "calculate_iou_partly", "(", "gt_annos", ",", "dt_annos", ",", "metric", ",", "num_parts", "=", "50", ")", ":", "\n", "    ", "\"\"\"fast iou algorithm. this function can be used independently to\n    do result analysis. Must be used in CAMERA coordinate system.\n    Args:\n        gt_annos: dict, must from get_label_annos() in kitti_common.py\n        dt_annos: dict, must from get_label_annos() in kitti_common.py\n        metric: eval type. 0: bbox, 1: bev, 2: 3d\n        num_parts: int. a parameter for fast calculate algorithm\n    \"\"\"", "\n", "assert", "len", "(", "gt_annos", ")", "==", "len", "(", "dt_annos", ")", "\n", "total_dt_num", "=", "np", ".", "stack", "(", "[", "len", "(", "a", "[", "\"name\"", "]", ")", "for", "a", "in", "dt_annos", "]", ",", "0", ")", "\n", "total_gt_num", "=", "np", ".", "stack", "(", "[", "len", "(", "a", "[", "\"name\"", "]", ")", "for", "a", "in", "gt_annos", "]", ",", "0", ")", "\n", "num_examples", "=", "len", "(", "gt_annos", ")", "\n", "split_parts", "=", "get_split_parts", "(", "num_examples", ",", "num_parts", ")", "\n", "parted_overlaps", "=", "[", "]", "\n", "example_idx", "=", "0", "\n", "\n", "for", "num_part", "in", "split_parts", ":", "\n", "        ", "gt_annos_part", "=", "gt_annos", "[", "example_idx", ":", "example_idx", "+", "num_part", "]", "\n", "dt_annos_part", "=", "dt_annos", "[", "example_idx", ":", "example_idx", "+", "num_part", "]", "\n", "if", "metric", "==", "0", ":", "\n", "            ", "gt_boxes", "=", "np", ".", "concatenate", "(", "[", "a", "[", "\"bbox\"", "]", "for", "a", "in", "gt_annos_part", "]", ",", "0", ")", "\n", "dt_boxes", "=", "np", ".", "concatenate", "(", "[", "a", "[", "\"bbox\"", "]", "for", "a", "in", "dt_annos_part", "]", ",", "0", ")", "\n", "overlap_part", "=", "image_box_overlap", "(", "gt_boxes", ",", "dt_boxes", ")", "\n", "", "elif", "metric", "==", "1", ":", "\n", "            ", "loc", "=", "np", ".", "concatenate", "(", "\n", "[", "a", "[", "\"location\"", "]", "[", ":", ",", "[", "0", ",", "2", "]", "]", "for", "a", "in", "gt_annos_part", "]", ",", "0", ")", "\n", "dims", "=", "np", ".", "concatenate", "(", "\n", "[", "a", "[", "\"dimensions\"", "]", "[", ":", ",", "[", "0", ",", "2", "]", "]", "for", "a", "in", "gt_annos_part", "]", ",", "0", ")", "\n", "rots", "=", "np", ".", "concatenate", "(", "[", "a", "[", "\"rotation_y\"", "]", "for", "a", "in", "gt_annos_part", "]", ",", "0", ")", "\n", "gt_boxes", "=", "np", ".", "concatenate", "(", "\n", "[", "loc", ",", "dims", ",", "rots", "[", "...", ",", "np", ".", "newaxis", "]", "]", ",", "axis", "=", "1", ")", "\n", "loc", "=", "np", ".", "concatenate", "(", "\n", "[", "a", "[", "\"location\"", "]", "[", ":", ",", "[", "0", ",", "2", "]", "]", "for", "a", "in", "dt_annos_part", "]", ",", "0", ")", "\n", "dims", "=", "np", ".", "concatenate", "(", "\n", "[", "a", "[", "\"dimensions\"", "]", "[", ":", ",", "[", "0", ",", "2", "]", "]", "for", "a", "in", "dt_annos_part", "]", ",", "0", ")", "\n", "rots", "=", "np", ".", "concatenate", "(", "[", "a", "[", "\"rotation_y\"", "]", "for", "a", "in", "dt_annos_part", "]", ",", "0", ")", "\n", "dt_boxes", "=", "np", ".", "concatenate", "(", "\n", "[", "loc", ",", "dims", ",", "rots", "[", "...", ",", "np", ".", "newaxis", "]", "]", ",", "axis", "=", "1", ")", "\n", "overlap_part", "=", "bev_box_overlap", "(", "gt_boxes", ",", "dt_boxes", ")", ".", "astype", "(", "\n", "np", ".", "float64", ")", "\n", "", "elif", "metric", "==", "2", ":", "\n", "            ", "loc", "=", "np", ".", "concatenate", "(", "[", "a", "[", "\"location\"", "]", "for", "a", "in", "gt_annos_part", "]", ",", "0", ")", "\n", "dims", "=", "np", ".", "concatenate", "(", "[", "a", "[", "\"dimensions\"", "]", "for", "a", "in", "gt_annos_part", "]", ",", "0", ")", "\n", "rots", "=", "np", ".", "concatenate", "(", "[", "a", "[", "\"rotation_y\"", "]", "for", "a", "in", "gt_annos_part", "]", ",", "0", ")", "\n", "gt_boxes", "=", "np", ".", "concatenate", "(", "\n", "[", "loc", ",", "dims", ",", "rots", "[", "...", ",", "np", ".", "newaxis", "]", "]", ",", "axis", "=", "1", ")", "\n", "loc", "=", "np", ".", "concatenate", "(", "[", "a", "[", "\"location\"", "]", "for", "a", "in", "dt_annos_part", "]", ",", "0", ")", "\n", "dims", "=", "np", ".", "concatenate", "(", "[", "a", "[", "\"dimensions\"", "]", "for", "a", "in", "dt_annos_part", "]", ",", "0", ")", "\n", "rots", "=", "np", ".", "concatenate", "(", "[", "a", "[", "\"rotation_y\"", "]", "for", "a", "in", "dt_annos_part", "]", ",", "0", ")", "\n", "dt_boxes", "=", "np", ".", "concatenate", "(", "\n", "[", "loc", ",", "dims", ",", "rots", "[", "...", ",", "np", ".", "newaxis", "]", "]", ",", "axis", "=", "1", ")", "\n", "overlap_part", "=", "d3_box_overlap", "(", "gt_boxes", ",", "dt_boxes", ")", ".", "astype", "(", "\n", "np", ".", "float64", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"unknown metric\"", ")", "\n", "", "parted_overlaps", ".", "append", "(", "overlap_part", ")", "\n", "example_idx", "+=", "num_part", "\n", "", "overlaps", "=", "[", "]", "\n", "example_idx", "=", "0", "\n", "for", "j", ",", "num_part", "in", "enumerate", "(", "split_parts", ")", ":", "\n", "        ", "gt_annos_part", "=", "gt_annos", "[", "example_idx", ":", "example_idx", "+", "num_part", "]", "\n", "dt_annos_part", "=", "dt_annos", "[", "example_idx", ":", "example_idx", "+", "num_part", "]", "\n", "gt_num_idx", ",", "dt_num_idx", "=", "0", ",", "0", "\n", "for", "i", "in", "range", "(", "num_part", ")", ":", "\n", "            ", "gt_box_num", "=", "total_gt_num", "[", "example_idx", "+", "i", "]", "\n", "dt_box_num", "=", "total_dt_num", "[", "example_idx", "+", "i", "]", "\n", "overlaps", ".", "append", "(", "\n", "parted_overlaps", "[", "j", "]", "[", "gt_num_idx", ":", "gt_num_idx", "+", "gt_box_num", ",", "\n", "dt_num_idx", ":", "dt_num_idx", "+", "dt_box_num", "]", ")", "\n", "gt_num_idx", "+=", "gt_box_num", "\n", "dt_num_idx", "+=", "dt_box_num", "\n", "", "example_idx", "+=", "num_part", "\n", "\n", "", "return", "overlaps", ",", "parted_overlaps", ",", "total_gt_num", ",", "total_dt_num", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval._prepare_data": [[422, 451], ["range", "numpy.stack", "len", "kitti_eval.clean_data", "ignored_gts.append", "ignored_dets.append", "np.stack.append", "dontcares.append", "numpy.concatenate", "numpy.concatenate", "gt_datas_list.append", "dt_datas_list.append", "numpy.array", "numpy.array", "len", "numpy.zeros().astype", "numpy.stack().astype", "numpy.zeros", "numpy.stack"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.clean_data"], ["", "def", "_prepare_data", "(", "gt_annos", ",", "dt_annos", ",", "current_class", ",", "difficulty", ")", ":", "\n", "    ", "gt_datas_list", "=", "[", "]", "\n", "dt_datas_list", "=", "[", "]", "\n", "total_dc_num", "=", "[", "]", "\n", "ignored_gts", ",", "ignored_dets", ",", "dontcares", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "total_num_valid_gt", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "gt_annos", ")", ")", ":", "\n", "        ", "rets", "=", "clean_data", "(", "gt_annos", "[", "i", "]", ",", "dt_annos", "[", "i", "]", ",", "current_class", ",", "difficulty", ")", "\n", "num_valid_gt", ",", "ignored_gt", ",", "ignored_det", ",", "dc_bboxes", "=", "rets", "\n", "ignored_gts", ".", "append", "(", "np", ".", "array", "(", "ignored_gt", ",", "dtype", "=", "np", ".", "int64", ")", ")", "\n", "ignored_dets", ".", "append", "(", "np", ".", "array", "(", "ignored_det", ",", "dtype", "=", "np", ".", "int64", ")", ")", "\n", "if", "len", "(", "dc_bboxes", ")", "==", "0", ":", "\n", "            ", "dc_bboxes", "=", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "", "else", ":", "\n", "            ", "dc_bboxes", "=", "np", ".", "stack", "(", "dc_bboxes", ",", "0", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "", "total_dc_num", ".", "append", "(", "dc_bboxes", ".", "shape", "[", "0", "]", ")", "\n", "dontcares", ".", "append", "(", "dc_bboxes", ")", "\n", "total_num_valid_gt", "+=", "num_valid_gt", "\n", "gt_datas", "=", "np", ".", "concatenate", "(", "\n", "[", "gt_annos", "[", "i", "]", "[", "\"bbox\"", "]", ",", "gt_annos", "[", "i", "]", "[", "\"alpha\"", "]", "[", "...", ",", "np", ".", "newaxis", "]", "]", ",", "1", ")", "\n", "dt_datas", "=", "np", ".", "concatenate", "(", "[", "\n", "dt_annos", "[", "i", "]", "[", "\"bbox\"", "]", ",", "dt_annos", "[", "i", "]", "[", "\"alpha\"", "]", "[", "...", ",", "np", ".", "newaxis", "]", ",", "\n", "dt_annos", "[", "i", "]", "[", "\"score\"", "]", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "]", ",", "1", ")", "\n", "gt_datas_list", ".", "append", "(", "gt_datas", ")", "\n", "dt_datas_list", ".", "append", "(", "dt_datas", ")", "\n", "", "total_dc_num", "=", "np", ".", "stack", "(", "total_dc_num", ",", "axis", "=", "0", ")", "\n", "return", "(", "gt_datas_list", ",", "dt_datas_list", ",", "ignored_gts", ",", "ignored_dets", ",", "dontcares", ",", "\n", "total_dc_num", ",", "total_num_valid_gt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.eval_class": [[453, 547], ["len", "kitti_eval.get_split_parts", "kitti_eval.calculate_iou_partly", "kitti_eval._prepare_data", "range", "numpy.array", "kitti_eval.get_thresholds", "numpy.array", "numpy.zeros", "enumerate", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "range", "len", "len", "len", "kitti_eval.compute_statistics_jit", "np.array.tolist", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "kitti_eval.fused_compute_statistics", "len", "len", "numpy.max", "numpy.max", "len", "numpy.max"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.get_split_parts", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.calculate_iou_partly", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval._prepare_data", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.get_thresholds", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.compute_statistics_jit", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.fused_compute_statistics"], ["", "def", "eval_class", "(", "gt_annos", ",", "\n", "dt_annos", ",", "\n", "current_class", ",", "\n", "difficulty", ",", "\n", "metric", ",", "\n", "min_overlap", ",", "\n", "compute_aos", "=", "False", ",", "\n", "num_parts", "=", "50", ")", ":", "\n", "    ", "\"\"\"Kitti eval. Only support 2d/bev/3d/aos eval for now.\n    Args:\n        gt_annos: dict, must from get_label_annos() in kitti_common.py\n        dt_annos: dict, must from get_label_annos() in kitti_common.py\n        current_class: int, 0: car, 1: pedestrian, 2: cyclist\n        difficulty: int. eval difficulty, 0: easy, 1: normal, 2: hard\n        metric: eval type. 0: bbox, 1: bev, 2: 3d\n        min_overlap: float, min overlap. official:\n            [[0.7, 0.5, 0.5], [0.7, 0.5, 0.5], [0.7, 0.5, 0.5]]\n            format: [metric, class]. choose one from matrix above.\n        num_parts: int. a parameter for fast calculate algorithm\n\n    Returns:\n        dict of recall, precision and aos\n    \"\"\"", "\n", "assert", "len", "(", "gt_annos", ")", "==", "len", "(", "dt_annos", ")", "\n", "num_examples", "=", "len", "(", "gt_annos", ")", "\n", "split_parts", "=", "get_split_parts", "(", "num_examples", ",", "num_parts", ")", "\n", "thresholdss", "=", "[", "]", "\n", "rets", "=", "calculate_iou_partly", "(", "dt_annos", ",", "gt_annos", ",", "metric", ",", "num_parts", ")", "\n", "overlaps", ",", "parted_overlaps", ",", "total_dt_num", ",", "total_gt_num", "=", "rets", "\n", "rets", "=", "_prepare_data", "(", "gt_annos", ",", "dt_annos", ",", "current_class", ",", "difficulty", ")", "\n", "(", "gt_datas_list", ",", "dt_datas_list", ",", "ignored_gts", ",", "ignored_dets", ",", "dontcares", ",", "\n", "total_dc_num", ",", "total_num_valid_gt", ")", "=", "rets", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "gt_annos", ")", ")", ":", "\n", "        ", "rets", "=", "compute_statistics_jit", "(", "\n", "overlaps", "[", "i", "]", ",", "\n", "gt_datas_list", "[", "i", "]", ",", "\n", "dt_datas_list", "[", "i", "]", ",", "\n", "ignored_gts", "[", "i", "]", ",", "\n", "ignored_dets", "[", "i", "]", ",", "\n", "dontcares", "[", "i", "]", ",", "\n", "metric", ",", "\n", "min_overlap", "=", "min_overlap", ",", "\n", "thresh", "=", "0.0", ",", "\n", "compute_fp", "=", "False", ")", "\n", "tp", ",", "fp", ",", "fn", ",", "similarity", ",", "thresholds", "=", "rets", "\n", "thresholdss", "+=", "thresholds", ".", "tolist", "(", ")", "\n", "", "thresholdss", "=", "np", ".", "array", "(", "thresholdss", ")", "\n", "thresholds", "=", "get_thresholds", "(", "thresholdss", ",", "total_num_valid_gt", ")", "\n", "thresholds", "=", "np", ".", "array", "(", "thresholds", ")", "\n", "pr", "=", "np", ".", "zeros", "(", "[", "len", "(", "thresholds", ")", ",", "4", "]", ")", "\n", "idx", "=", "0", "\n", "for", "j", ",", "num_part", "in", "enumerate", "(", "split_parts", ")", ":", "\n", "        ", "gt_datas_part", "=", "np", ".", "concatenate", "(", "gt_datas_list", "[", "idx", ":", "idx", "+", "num_part", "]", ",", "0", ")", "\n", "dt_datas_part", "=", "np", ".", "concatenate", "(", "dt_datas_list", "[", "idx", ":", "idx", "+", "num_part", "]", ",", "0", ")", "\n", "dc_datas_part", "=", "np", ".", "concatenate", "(", "dontcares", "[", "idx", ":", "idx", "+", "num_part", "]", ",", "0", ")", "\n", "ignored_dets_part", "=", "np", ".", "concatenate", "(", "ignored_dets", "[", "idx", ":", "idx", "+", "num_part", "]", ",", "0", ")", "\n", "ignored_gts_part", "=", "np", ".", "concatenate", "(", "ignored_gts", "[", "idx", ":", "idx", "+", "num_part", "]", ",", "0", ")", "\n", "fused_compute_statistics", "(", "\n", "parted_overlaps", "[", "j", "]", ",", "\n", "pr", ",", "\n", "total_gt_num", "[", "idx", ":", "idx", "+", "num_part", "]", ",", "\n", "total_dt_num", "[", "idx", ":", "idx", "+", "num_part", "]", ",", "\n", "total_dc_num", "[", "idx", ":", "idx", "+", "num_part", "]", ",", "\n", "gt_datas_part", ",", "\n", "dt_datas_part", ",", "\n", "dc_datas_part", ",", "\n", "ignored_gts_part", ",", "\n", "ignored_dets_part", ",", "\n", "metric", ",", "\n", "min_overlap", "=", "min_overlap", ",", "\n", "thresholds", "=", "thresholds", ",", "\n", "compute_aos", "=", "compute_aos", ")", "\n", "idx", "+=", "num_part", "\n", "", "N_SAMPLE_PTS", "=", "41", "\n", "precision", "=", "np", ".", "zeros", "(", "[", "N_SAMPLE_PTS", "]", ")", "\n", "recall", "=", "np", ".", "zeros", "(", "[", "N_SAMPLE_PTS", "]", ")", "\n", "aos", "=", "np", ".", "zeros", "(", "[", "N_SAMPLE_PTS", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "thresholds", ")", ")", ":", "\n", "        ", "recall", "[", "i", "]", "=", "pr", "[", "i", ",", "0", "]", "/", "(", "pr", "[", "i", ",", "0", "]", "+", "pr", "[", "i", ",", "2", "]", ")", "\n", "precision", "[", "i", "]", "=", "pr", "[", "i", ",", "0", "]", "/", "(", "pr", "[", "i", ",", "0", "]", "+", "pr", "[", "i", ",", "1", "]", ")", "\n", "if", "compute_aos", ":", "\n", "            ", "aos", "[", "i", "]", "=", "pr", "[", "i", ",", "3", "]", "/", "(", "pr", "[", "i", ",", "0", "]", "+", "pr", "[", "i", ",", "1", "]", ")", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "thresholds", ")", ")", ":", "\n", "        ", "precision", "[", "i", "]", "=", "np", ".", "max", "(", "precision", "[", "i", ":", "]", ")", "\n", "recall", "[", "i", "]", "=", "np", ".", "max", "(", "recall", "[", "i", ":", "]", ")", "\n", "if", "compute_aos", ":", "\n", "            ", "aos", "[", "i", "]", "=", "np", ".", "max", "(", "aos", "[", "i", ":", "]", ")", "\n", "", "", "ret_dict", "=", "{", "\n", "\"recall\"", ":", "recall", ",", "\n", "\"precision\"", ":", "precision", ",", "\n", "\"orientation\"", ":", "aos", ",", "\n", "}", "\n", "return", "ret_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.eval_class_v3": [[549, 657], ["len", "kitti_eval.get_split_parts", "kitti_eval.calculate_iou_partly", "len", "len", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "len", "len", "enumerate", "kitti_eval._prepare_data", "enumerate", "range", "numpy.array", "kitti_eval.get_thresholds", "numpy.array", "numpy.zeros", "enumerate", "range", "range", "len", "kitti_eval.compute_statistics_jit", "np.array.tolist", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "kitti_eval.fused_compute_statistics", "len", "len", "numpy.max", "numpy.max", "len", "numpy.max"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.get_split_parts", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.calculate_iou_partly", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval._prepare_data", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.get_thresholds", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.compute_statistics_jit", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.fused_compute_statistics"], ["", "def", "eval_class_v3", "(", "gt_annos", ",", "\n", "dt_annos", ",", "\n", "current_classes", ",", "\n", "difficultys", ",", "\n", "metric", ",", "\n", "min_overlaps", ",", "\n", "compute_aos", "=", "False", ",", "\n", "num_parts", "=", "50", ")", ":", "\n", "    ", "\"\"\"Kitti eval. support 2d/bev/3d/aos eval. support 0.5:0.05:0.95 coco AP.\n    Args:\n        gt_annos: dict, must from get_label_annos() in kitti_common.py\n        dt_annos: dict, must from get_label_annos() in kitti_common.py\n        current_class: int, 0: car, 1: pedestrian, 2: cyclist\n        difficulty: int. eval difficulty, 0: easy, 1: normal, 2: hard\n        metric: eval type. 0: bbox, 1: bev, 2: 3d\n        min_overlap: float, min overlap. official:\n            [[0.7, 0.5, 0.5], [0.7, 0.5, 0.5], [0.7, 0.5, 0.5]]\n            format: [metric, class]. choose one from matrix above.\n        num_parts: int. a parameter for fast calculate algorithm\n\n    Returns:\n        dict of recall, precision and aos\n    \"\"\"", "\n", "assert", "len", "(", "gt_annos", ")", "==", "len", "(", "dt_annos", ")", "\n", "num_examples", "=", "len", "(", "gt_annos", ")", "\n", "split_parts", "=", "get_split_parts", "(", "num_examples", ",", "num_parts", ")", "\n", "\n", "rets", "=", "calculate_iou_partly", "(", "dt_annos", ",", "gt_annos", ",", "metric", ",", "num_parts", ")", "\n", "overlaps", ",", "parted_overlaps", ",", "total_dt_num", ",", "total_gt_num", "=", "rets", "\n", "N_SAMPLE_PTS", "=", "41", "\n", "num_minoverlap", "=", "len", "(", "min_overlaps", ")", "\n", "num_class", "=", "len", "(", "current_classes", ")", "\n", "num_difficulty", "=", "len", "(", "difficultys", ")", "\n", "precision", "=", "np", ".", "zeros", "(", "\n", "[", "num_class", ",", "num_difficulty", ",", "num_minoverlap", ",", "N_SAMPLE_PTS", "]", ")", "\n", "recall", "=", "np", ".", "zeros", "(", "\n", "[", "num_class", ",", "num_difficulty", ",", "num_minoverlap", ",", "N_SAMPLE_PTS", "]", ")", "\n", "aos", "=", "np", ".", "zeros", "(", "[", "num_class", ",", "num_difficulty", ",", "num_minoverlap", ",", "N_SAMPLE_PTS", "]", ")", "\n", "for", "m", ",", "current_class", "in", "enumerate", "(", "current_classes", ")", ":", "\n", "        ", "for", "l", ",", "difficulty", "in", "enumerate", "(", "difficultys", ")", ":", "\n", "            ", "rets", "=", "_prepare_data", "(", "gt_annos", ",", "dt_annos", ",", "current_class", ",", "difficulty", ")", "\n", "(", "gt_datas_list", ",", "dt_datas_list", ",", "ignored_gts", ",", "ignored_dets", ",", "\n", "dontcares", ",", "total_dc_num", ",", "total_num_valid_gt", ")", "=", "rets", "\n", "for", "k", ",", "min_overlap", "in", "enumerate", "(", "min_overlaps", "[", ":", ",", "metric", ",", "m", "]", ")", ":", "\n", "                ", "thresholdss", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "gt_annos", ")", ")", ":", "\n", "                    ", "rets", "=", "compute_statistics_jit", "(", "\n", "overlaps", "[", "i", "]", ",", "\n", "gt_datas_list", "[", "i", "]", ",", "\n", "dt_datas_list", "[", "i", "]", ",", "\n", "ignored_gts", "[", "i", "]", ",", "\n", "ignored_dets", "[", "i", "]", ",", "\n", "dontcares", "[", "i", "]", ",", "\n", "metric", ",", "\n", "min_overlap", "=", "min_overlap", ",", "\n", "thresh", "=", "0.0", ",", "\n", "compute_fp", "=", "False", ")", "\n", "tp", ",", "fp", ",", "fn", ",", "similarity", ",", "thresholds", "=", "rets", "\n", "thresholdss", "+=", "thresholds", ".", "tolist", "(", ")", "\n", "", "thresholdss", "=", "np", ".", "array", "(", "thresholdss", ")", "\n", "thresholds", "=", "get_thresholds", "(", "thresholdss", ",", "total_num_valid_gt", ")", "\n", "thresholds", "=", "np", ".", "array", "(", "thresholds", ")", "\n", "pr", "=", "np", ".", "zeros", "(", "[", "len", "(", "thresholds", ")", ",", "4", "]", ")", "\n", "idx", "=", "0", "\n", "for", "j", ",", "num_part", "in", "enumerate", "(", "split_parts", ")", ":", "\n", "                    ", "gt_datas_part", "=", "np", ".", "concatenate", "(", "\n", "gt_datas_list", "[", "idx", ":", "idx", "+", "num_part", "]", ",", "0", ")", "\n", "dt_datas_part", "=", "np", ".", "concatenate", "(", "\n", "dt_datas_list", "[", "idx", ":", "idx", "+", "num_part", "]", ",", "0", ")", "\n", "dc_datas_part", "=", "np", ".", "concatenate", "(", "\n", "dontcares", "[", "idx", ":", "idx", "+", "num_part", "]", ",", "0", ")", "\n", "ignored_dets_part", "=", "np", ".", "concatenate", "(", "\n", "ignored_dets", "[", "idx", ":", "idx", "+", "num_part", "]", ",", "0", ")", "\n", "ignored_gts_part", "=", "np", ".", "concatenate", "(", "\n", "ignored_gts", "[", "idx", ":", "idx", "+", "num_part", "]", ",", "0", ")", "\n", "fused_compute_statistics", "(", "\n", "parted_overlaps", "[", "j", "]", ",", "\n", "pr", ",", "\n", "total_gt_num", "[", "idx", ":", "idx", "+", "num_part", "]", ",", "\n", "total_dt_num", "[", "idx", ":", "idx", "+", "num_part", "]", ",", "\n", "total_dc_num", "[", "idx", ":", "idx", "+", "num_part", "]", ",", "\n", "gt_datas_part", ",", "\n", "dt_datas_part", ",", "\n", "dc_datas_part", ",", "\n", "ignored_gts_part", ",", "\n", "ignored_dets_part", ",", "\n", "metric", ",", "\n", "min_overlap", "=", "min_overlap", ",", "\n", "thresholds", "=", "thresholds", ",", "\n", "compute_aos", "=", "compute_aos", ")", "\n", "idx", "+=", "num_part", "\n", "", "for", "i", "in", "range", "(", "len", "(", "thresholds", ")", ")", ":", "\n", "                    ", "recall", "[", "m", ",", "l", ",", "k", ",", "i", "]", "=", "pr", "[", "i", ",", "0", "]", "/", "(", "pr", "[", "i", ",", "0", "]", "+", "pr", "[", "i", ",", "2", "]", ")", "\n", "precision", "[", "m", ",", "l", ",", "k", ",", "i", "]", "=", "pr", "[", "i", ",", "0", "]", "/", "(", "pr", "[", "i", ",", "0", "]", "+", "pr", "[", "i", ",", "1", "]", ")", "\n", "if", "compute_aos", ":", "\n", "                        ", "aos", "[", "m", ",", "l", ",", "k", ",", "i", "]", "=", "pr", "[", "i", ",", "3", "]", "/", "(", "pr", "[", "i", ",", "0", "]", "+", "pr", "[", "i", ",", "1", "]", ")", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "thresholds", ")", ")", ":", "\n", "                    ", "precision", "[", "m", ",", "l", ",", "k", ",", "i", "]", "=", "np", ".", "max", "(", "\n", "precision", "[", "m", ",", "l", ",", "k", ",", "i", ":", "]", ",", "axis", "=", "-", "1", ")", "\n", "recall", "[", "m", ",", "l", ",", "k", ",", "i", "]", "=", "np", ".", "max", "(", "recall", "[", "m", ",", "l", ",", "k", ",", "i", ":", "]", ",", "axis", "=", "-", "1", ")", "\n", "if", "compute_aos", ":", "\n", "                        ", "aos", "[", "m", ",", "l", ",", "k", ",", "i", "]", "=", "np", ".", "max", "(", "aos", "[", "m", ",", "l", ",", "k", ",", "i", ":", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "", "", "", "", "ret_dict", "=", "{", "\n", "\"recall\"", ":", "recall", ",", "\n", "\"precision\"", ":", "precision", ",", "\n", "\"orientation\"", ":", "aos", ",", "\n", "}", "\n", "return", "ret_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.do_eval": [[659, 681], ["range", "range", "range", "kitti_eval.eval_class", "mAP_bbox.append", "kitti_eval.eval_class", "mAP_bev.append", "kitti_eval.eval_class", "mAP_3d.append", "kitti_eval.get_mAP", "mAP_aos.append", "kitti_eval.get_mAP", "kitti_eval.get_mAP", "kitti_eval.get_mAP"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.eval_class", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.eval_class", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.eval_class", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.get_mAP", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.get_mAP", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.get_mAP", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.get_mAP"], ["", "def", "do_eval", "(", "gt_annos", ",", "dt_annos", ",", "current_class", ",", "min_overlaps", ",", "\n", "compute_aos", "=", "False", ")", ":", "\n", "\n", "    ", "mAP_bbox", "=", "[", "]", "\n", "mAP_aos", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "# i=difficulty", "\n", "        ", "ret", "=", "eval_class", "(", "gt_annos", ",", "dt_annos", ",", "current_class", ",", "i", ",", "0", ",", "\n", "min_overlaps", "[", "0", "]", ",", "compute_aos", ")", "\n", "mAP_bbox", ".", "append", "(", "get_mAP", "(", "ret", "[", "\"precision\"", "]", ")", ")", "\n", "if", "compute_aos", ":", "\n", "            ", "mAP_aos", ".", "append", "(", "get_mAP", "(", "ret", "[", "\"orientation\"", "]", ")", ")", "\n", "", "", "mAP_bev", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "        ", "ret", "=", "eval_class", "(", "gt_annos", ",", "dt_annos", ",", "current_class", ",", "i", ",", "1", ",", "\n", "min_overlaps", "[", "1", "]", ")", "\n", "mAP_bev", ".", "append", "(", "get_mAP", "(", "ret", "[", "\"precision\"", "]", ")", ")", "\n", "", "mAP_3d", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "        ", "ret", "=", "eval_class", "(", "gt_annos", ",", "dt_annos", ",", "current_class", ",", "i", ",", "2", ",", "\n", "min_overlaps", "[", "2", "]", ")", "\n", "mAP_3d", ".", "append", "(", "get_mAP", "(", "ret", "[", "\"precision\"", "]", ")", ")", "\n", "", "return", "mAP_bbox", ",", "mAP_bev", ",", "mAP_3d", ",", "mAP_aos", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.get_mAP_v2": [[683, 688], ["range"], "function", ["None"], ["", "def", "get_mAP_v2", "(", "prec", ")", ":", "\n", "    ", "sums", "=", "0", "\n", "for", "i", "in", "range", "(", "0", ",", "prec", ".", "shape", "[", "-", "1", "]", ")", ":", "\n", "        ", "sums", "=", "sums", "+", "prec", "[", "...", ",", "i", "]", "\n", "", "return", "sums", "/", "41", "*", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.do_eval_v2": [[690, 711], ["kitti_eval.eval_class_v3", "kitti_eval.get_mAP_v2", "kitti_eval.eval_class_v3", "kitti_eval.get_mAP_v2", "kitti_eval.eval_class_v3", "kitti_eval.get_mAP_v2", "kitti_eval.get_mAP_v2"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.eval_class_v3", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.get_mAP_v2", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.eval_class_v3", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.get_mAP_v2", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.eval_class_v3", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.get_mAP_v2", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.get_mAP_v2"], ["", "def", "do_eval_v2", "(", "gt_annos", ",", "\n", "dt_annos", ",", "\n", "current_classes", ",", "\n", "min_overlaps", ",", "\n", "compute_aos", "=", "False", ",", "\n", "difficultys", "=", "[", "0", ",", "1", ",", "2", "]", ")", ":", "\n", "# min_overlaps: [num_minoverlap, metric, num_class]", "\n", "    ", "ret", "=", "eval_class_v3", "(", "gt_annos", ",", "dt_annos", ",", "current_classes", ",", "difficultys", ",", "0", ",", "\n", "min_overlaps", ",", "compute_aos", ")", "\n", "# ret: [num_class, num_diff, num_minoverlap, num_sample_points]", "\n", "mAP_bbox", "=", "get_mAP_v2", "(", "ret", "[", "\"precision\"", "]", ")", "\n", "mAP_aos", "=", "None", "\n", "if", "compute_aos", ":", "\n", "        ", "mAP_aos", "=", "get_mAP_v2", "(", "ret", "[", "\"orientation\"", "]", ")", "\n", "", "ret", "=", "eval_class_v3", "(", "gt_annos", ",", "dt_annos", ",", "current_classes", ",", "difficultys", ",", "1", ",", "\n", "min_overlaps", ")", "\n", "mAP_bev", "=", "get_mAP_v2", "(", "ret", "[", "\"precision\"", "]", ")", "\n", "ret", "=", "eval_class_v3", "(", "gt_annos", ",", "dt_annos", ",", "current_classes", ",", "difficultys", ",", "2", ",", "\n", "min_overlaps", ")", "\n", "mAP_3d", "=", "get_mAP_v2", "(", "ret", "[", "\"precision\"", "]", ")", "\n", "return", "mAP_bbox", ",", "mAP_bev", ",", "mAP_3d", ",", "mAP_aos", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.do_coco_style_eval": [[713, 729], ["numpy.zeros", "range", "kitti_eval.do_eval_v2", "mAP_bbox.mean.mean", "mAP_bev.mean.mean", "mAP_3d.mean.mean", "range", "mAP_aos.mean.mean", "numpy.linspace"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.do_eval_v2"], ["", "def", "do_coco_style_eval", "(", "gt_annos", ",", "dt_annos", ",", "current_classes", ",", "overlap_ranges", ",", "\n", "compute_aos", ")", ":", "\n", "# overlap_ranges: [range, metric, num_class]", "\n", "    ", "min_overlaps", "=", "np", ".", "zeros", "(", "[", "10", ",", "*", "overlap_ranges", ".", "shape", "[", "1", ":", "]", "]", ")", "\n", "for", "i", "in", "range", "(", "overlap_ranges", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "overlap_ranges", ".", "shape", "[", "2", "]", ")", ":", "\n", "            ", "min_overlaps", "[", ":", ",", "i", ",", "j", "]", "=", "np", ".", "linspace", "(", "*", "overlap_ranges", "[", ":", ",", "i", ",", "j", "]", ")", "\n", "", "", "mAP_bbox", ",", "mAP_bev", ",", "mAP_3d", ",", "mAP_aos", "=", "do_eval_v2", "(", "\n", "gt_annos", ",", "dt_annos", ",", "current_classes", ",", "min_overlaps", ",", "compute_aos", ")", "\n", "# ret: [num_class, num_diff, num_minoverlap]", "\n", "mAP_bbox", "=", "mAP_bbox", ".", "mean", "(", "-", "1", ")", "\n", "mAP_bev", "=", "mAP_bev", ".", "mean", "(", "-", "1", ")", "\n", "mAP_3d", "=", "mAP_3d", ".", "mean", "(", "-", "1", ")", "\n", "if", "mAP_aos", "is", "not", "None", ":", "\n", "        ", "mAP_aos", "=", "mAP_aos", ".", "mean", "(", "-", "1", ")", "\n", "", "return", "mAP_bbox", ",", "mAP_bev", ",", "mAP_3d", ",", "mAP_aos", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.print_str": [[731, 738], ["sysio.StringIO.truncate", "sysio.StringIO.seek", "print", "sysio.StringIO.getvalue", "io.StringIO"], "function", ["None"], ["", "def", "print_str", "(", "value", ",", "*", "arg", ",", "sstream", "=", "None", ")", ":", "\n", "    ", "if", "sstream", "is", "None", ":", "\n", "        ", "sstream", "=", "sysio", ".", "StringIO", "(", ")", "\n", "", "sstream", ".", "truncate", "(", "0", ")", "\n", "sstream", ".", "seek", "(", "0", ")", "\n", "print", "(", "value", ",", "*", "arg", ",", "file", "=", "sstream", ")", "\n", "return", "sstream", ".", "getvalue", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.get_official_eval_result_v1": [[740, 789], ["numpy.array", "numpy.array", "isinstance", "kitti_eval.do_eval", "kitti_eval.print_str", "kitti_eval.print_str", "kitti_eval.print_str", "kitti_eval.print_str", "class_to_name.items", "kitti_eval.print_str"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.do_eval", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.print_str", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.print_str", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.print_str", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.print_str", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.print_str"], ["", "def", "get_official_eval_result_v1", "(", "gt_annos", ",", "dt_annos", ",", "current_class", ")", ":", "\n", "    ", "mAP_0_7", "=", "np", ".", "array", "(", "[", "[", "0.7", ",", "0.5", ",", "0.5", ",", "0.7", ",", "0.5", "]", ",", "[", "0.7", ",", "0.5", ",", "0.5", ",", "0.7", ",", "0.5", "]", ",", "\n", "[", "0.7", ",", "0.5", ",", "0.5", ",", "0.7", ",", "0.5", "]", "]", ")", "\n", "mAP_0_5", "=", "np", ".", "array", "(", "[", "[", "0.7", ",", "0.5", ",", "0.5", ",", "0.7", ",", "\n", "0.5", "]", ",", "[", "0.5", ",", "0.25", ",", "0.25", ",", "0.5", ",", "0.25", "]", ",", "\n", "[", "0.5", ",", "0.25", ",", "0.25", ",", "0.5", ",", "0.25", "]", "]", ")", "\n", "mAP_list", "=", "[", "mAP_0_7", ",", "mAP_0_5", "]", "\n", "class_to_name", "=", "{", "\n", "0", ":", "'Car'", ",", "\n", "1", ":", "'Pedestrian'", ",", "\n", "2", ":", "'Cyclist'", ",", "\n", "3", ":", "'Van'", ",", "\n", "4", ":", "'Person_sitting'", ",", "\n", "}", "\n", "name_to_class", "=", "{", "v", ":", "n", "for", "n", ",", "v", "in", "class_to_name", ".", "items", "(", ")", "}", "\n", "if", "isinstance", "(", "current_class", ",", "str", ")", ":", "\n", "        ", "current_class", "=", "name_to_class", "[", "current_class", "]", "\n", "", "result", "=", "''", "\n", "# check whether alpha is valid", "\n", "compute_aos", "=", "False", "\n", "for", "anno", "in", "dt_annos", ":", "\n", "        ", "if", "anno", "[", "'alpha'", "]", ".", "shape", "[", "0", "]", "!=", "0", ":", "\n", "            ", "if", "anno", "[", "'alpha'", "]", "[", "0", "]", "!=", "-", "10", ":", "\n", "                ", "compute_aos", "=", "True", "\n", "", "break", "\n", "", "", "for", "mAP", "in", "mAP_list", ":", "\n", "# mAP threshold matrix: [num_minoverlap, metric, class]", "\n", "        ", "mAPbbox", ",", "mAPbev", ",", "mAP3d", ",", "mAPaos", "=", "do_eval", "(", "\n", "gt_annos", ",", "dt_annos", ",", "current_class", ",", "mAP", "[", ":", ",", "current_class", "]", ",", "\n", "compute_aos", ")", "\n", "# mAP: [num_class, num_diff, num_minoverlap]", "\n", "result", "+=", "print_str", "(", "\n", "(", "f\"{class_to_name[current_class]} \"", "\n", "\"AP@{:.2f}, {:.2f}, {:.2f}:\"", ".", "format", "(", "*", "mAP", "[", ":", ",", "current_class", "]", ")", ")", ")", "\n", "result", "+=", "print_str", "(", "(", "f\"bbox AP:{mAPbbox[0]:.2f}, \"", "\n", "f\"{mAPbbox[1]:.2f}, \"", "\n", "f\"{mAPbbox[2]:.2f}\"", ")", ")", "\n", "result", "+=", "print_str", "(", "(", "f\"bev  AP:{mAPbev[0]:.2f}, \"", "\n", "f\"{mAPbev[1]:.2f}, \"", "\n", "f\"{mAPbev[2]:.2f}\"", ")", ")", "\n", "result", "+=", "print_str", "(", "(", "f\"3d   AP:{mAP3d[0]:.2f}, \"", "\n", "f\"{mAP3d[1]:.2f}, \"", "\n", "f\"{mAP3d[2]:.2f}\"", ")", ")", "\n", "if", "compute_aos", ":", "\n", "            ", "result", "+=", "print_str", "(", "(", "f\"aos  AP:{mAPaos[0]:.2f}, \"", "\n", "f\"{mAPaos[1]:.2f}, \"", "\n", "f\"{mAPaos[2]:.2f}\"", ")", ")", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.get_official_eval_result": [[853, 930], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.stack", "print", "print", "kitti_eval.do_eval_v2", "enumerate", "isinstance", "isinstance", "range", "class_to_name.items", "current_classes_int.append", "current_classes_int.append", "kitti_eval.print_str", "kitti_eval.print_str", "kitti_eval.print_str", "kitti_eval.print_str", "kitti_eval.print_str"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.do_eval_v2", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.print_str", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.print_str", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.print_str", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.print_str", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.print_str"], ["", "def", "get_official_eval_result", "(", "gt_annos", ",", "dt_annos", ",", "current_classes", ",", "difficultys", "=", "[", "0", ",", "1", ",", "2", "]", ")", ":", "\n", "    ", "overlap_0_9", "=", "np", ".", "array", "(", "[", "[", "0.9", ",", "0.5", ",", "0.5", ",", "0.7", ",", "\n", "0.5", ",", "0.7", ",", "0.7", ",", "0.7", "]", ",", "[", "0.9", ",", "0.5", ",", "0.5", ",", "0.7", ",", "0.5", ",", "0.7", ",", "0.7", ",", "0.7", "]", ",", "\n", "[", "0.9", ",", "0.5", ",", "0.5", ",", "0.7", ",", "0.5", ",", "0.7", ",", "0.7", ",", "0.7", "]", "]", ")", "\n", "overlap_0_85", "=", "np", ".", "array", "(", "[", "[", "0.85", ",", "0.5", ",", "0.5", ",", "0.7", ",", "\n", "0.5", ",", "0.7", ",", "0.7", ",", "0.7", "]", ",", "[", "0.85", ",", "0.5", ",", "0.5", ",", "0.7", ",", "0.5", ",", "0.7", ",", "0.7", ",", "0.7", "]", ",", "\n", "[", "0.85", ",", "0.5", ",", "0.5", ",", "0.7", ",", "0.5", ",", "0.7", ",", "0.7", ",", "0.7", "]", "]", ")", "\n", "overlap_0_8", "=", "np", ".", "array", "(", "[", "[", "0.8", ",", "0.5", ",", "0.5", ",", "0.7", ",", "\n", "0.5", ",", "0.7", ",", "0.7", ",", "0.7", "]", ",", "[", "0.8", ",", "0.5", ",", "0.5", ",", "0.7", ",", "0.5", ",", "0.7", ",", "0.7", ",", "0.7", "]", ",", "\n", "[", "0.8", ",", "0.5", ",", "0.5", ",", "0.7", ",", "0.5", ",", "0.7", ",", "0.7", ",", "0.7", "]", "]", ")", "\n", "overlap_0_75", "=", "np", ".", "array", "(", "[", "[", "0.75", ",", "0.5", ",", "0.5", ",", "0.7", ",", "\n", "0.5", ",", "0.7", ",", "0.7", ",", "0.7", "]", ",", "[", "0.75", ",", "0.5", ",", "0.5", ",", "0.7", ",", "0.5", ",", "0.7", ",", "0.7", ",", "0.7", "]", ",", "\n", "[", "0.75", ",", "0.5", ",", "0.5", ",", "0.7", ",", "0.5", ",", "0.7", ",", "0.7", ",", "0.7", "]", "]", ")", "\n", "overlap_0_7", "=", "np", ".", "array", "(", "[", "[", "0.7", ",", "0.5", ",", "0.5", ",", "0.7", ",", "\n", "0.5", ",", "0.7", ",", "0.7", ",", "0.7", "]", ",", "[", "0.7", ",", "0.5", ",", "0.5", ",", "0.7", ",", "0.5", ",", "0.7", ",", "0.7", ",", "0.7", "]", ",", "\n", "[", "0.7", ",", "0.5", ",", "0.5", ",", "0.7", ",", "0.5", ",", "0.7", ",", "0.7", ",", "0.7", "]", "]", ")", "\n", "overlap_0_5", "=", "np", ".", "array", "(", "[", "[", "0.7", ",", "0.5", ",", "0.5", ",", "0.7", ",", "\n", "0.5", ",", "0.5", ",", "0.5", ",", "0.5", "]", ",", "[", "0.5", ",", "0.25", ",", "0.25", ",", "0.5", ",", "0.25", ",", "0.5", ",", "0.5", ",", "0.5", "]", ",", "\n", "[", "0.5", ",", "0.25", ",", "0.25", ",", "0.5", ",", "0.25", ",", "0.5", ",", "0.5", ",", "0.5", "]", "]", ")", "\n", "min_overlaps", "=", "np", ".", "stack", "(", "[", "overlap_0_9", ",", "overlap_0_85", ",", "overlap_0_8", ",", "overlap_0_75", ",", "overlap_0_7", ",", "overlap_0_5", "]", ",", "axis", "=", "0", ")", "# [2, 3, 5]", "\n", "class_to_name", "=", "{", "\n", "0", ":", "'Car'", ",", "\n", "1", ":", "'Pedestrian'", ",", "\n", "2", ":", "'Cyclist'", ",", "\n", "3", ":", "'Van'", ",", "\n", "4", ":", "'Person_sitting'", ",", "\n", "5", ":", "'car'", ",", "\n", "6", ":", "'tractor'", ",", "\n", "7", ":", "'trailer'", ",", "\n", "}", "\n", "name_to_class", "=", "{", "v", ":", "n", "for", "n", ",", "v", "in", "class_to_name", ".", "items", "(", ")", "}", "\n", "if", "not", "isinstance", "(", "current_classes", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "current_classes", "=", "[", "current_classes", "]", "\n", "", "current_classes_int", "=", "[", "]", "\n", "for", "curcls", "in", "current_classes", ":", "\n", "        ", "if", "isinstance", "(", "curcls", ",", "str", ")", ":", "\n", "            ", "current_classes_int", ".", "append", "(", "name_to_class", "[", "curcls", "]", ")", "\n", "", "else", ":", "\n", "            ", "current_classes_int", ".", "append", "(", "curcls", ")", "\n", "", "", "current_classes", "=", "current_classes_int", "\n", "min_overlaps", "=", "min_overlaps", "[", ":", ",", ":", ",", "current_classes", "]", "\n", "\n", "print", "(", "min_overlaps", ")", "\n", "print", "(", "min_overlaps", ".", "shape", ")", "\n", "\n", "result", "=", "''", "\n", "# check whether alpha is valid", "\n", "compute_aos", "=", "False", "\n", "for", "anno", "in", "dt_annos", ":", "\n", "        ", "if", "anno", "[", "'alpha'", "]", ".", "shape", "[", "0", "]", "!=", "0", ":", "\n", "            ", "if", "anno", "[", "'alpha'", "]", "[", "0", "]", "!=", "-", "10", ":", "\n", "                ", "compute_aos", "=", "True", "\n", "", "break", "\n", "", "", "mAPbbox", ",", "mAPbev", ",", "mAP3d", ",", "mAPaos", "=", "do_eval_v2", "(", "\n", "gt_annos", ",", "dt_annos", ",", "current_classes", ",", "min_overlaps", ",", "compute_aos", ",", "difficultys", ")", "\n", "for", "j", ",", "curcls", "in", "enumerate", "(", "current_classes", ")", ":", "\n", "# mAP threshold array: [num_minoverlap, metric, class]", "\n", "# mAP result: [num_class, num_diff, num_minoverlap]", "\n", "        ", "for", "i", "in", "range", "(", "min_overlaps", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "result", "+=", "print_str", "(", "\n", "(", "f\"{class_to_name[curcls]} \"", "\n", "\"AP@{:.2f}, {:.2f}, {:.2f}:\"", ".", "format", "(", "*", "min_overlaps", "[", "i", ",", ":", ",", "j", "]", ")", ")", ")", "\n", "result", "+=", "print_str", "(", "(", "f\"bbox AP:{mAPbbox[j, 0, i]:.2f}, \"", "\n", "f\"{mAPbbox[j, 1, i]:.2f}, \"", "\n", "f\"{mAPbbox[j, 2, i]:.2f}\"", ")", ")", "\n", "result", "+=", "print_str", "(", "(", "f\"bev  AP:{mAPbev[j, 0, i]:.2f}, \"", "\n", "f\"{mAPbev[j, 1, i]:.2f}, \"", "\n", "f\"{mAPbev[j, 2, i]:.2f}\"", ")", ")", "\n", "result", "+=", "print_str", "(", "(", "f\"3d   AP:{mAP3d[j, 0, i]:.2f}, \"", "\n", "f\"{mAP3d[j, 1, i]:.2f}, \"", "\n", "f\"{mAP3d[j, 2, i]:.2f}\"", ")", ")", "\n", "if", "compute_aos", ":", "\n", "                ", "result", "+=", "print_str", "(", "(", "f\"aos  AP:{mAPaos[j, 0, i]:.2f}, \"", "\n", "f\"{mAPaos[j, 1, i]:.2f}, \"", "\n", "f\"{mAPaos[j, 2, i]:.2f}\"", ")", ")", "\n", "\n", "", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.get_coco_eval_result": [[931, 1009], ["numpy.zeros", "enumerate", "kitti_eval.do_coco_style_eval", "enumerate", "isinstance", "isinstance", "kitti_eval.print_str", "kitti_eval.print_str", "kitti_eval.print_str", "kitti_eval.print_str", "class_to_name.items", "current_classes_int.append", "current_classes_int.append", "len", "numpy.array", "numpy.array", "kitti_eval.print_str"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.do_coco_style_eval", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.print_str", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.print_str", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.print_str", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.print_str", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.print_str"], ["", "def", "get_coco_eval_result", "(", "gt_annos", ",", "dt_annos", ",", "current_classes", ")", ":", "\n", "    ", "class_to_name", "=", "{", "\n", "0", ":", "'Car'", ",", "\n", "1", ":", "'Pedestrian'", ",", "\n", "2", ":", "'Cyclist'", ",", "\n", "3", ":", "'Van'", ",", "\n", "4", ":", "'Person_sitting'", ",", "\n", "5", ":", "'car'", ",", "\n", "6", ":", "'tractor'", ",", "\n", "7", ":", "'trailer'", ",", "\n", "}", "\n", "class_to_range", "=", "{", "\n", "0", ":", "[", "0.5", ",", "1.0", ",", "0.05", "]", ",", "\n", "1", ":", "[", "0.25", ",", "0.75", ",", "0.05", "]", ",", "\n", "2", ":", "[", "0.25", ",", "0.75", ",", "0.05", "]", ",", "\n", "3", ":", "[", "0.5", ",", "1.0", ",", "0.05", "]", ",", "\n", "4", ":", "[", "0.25", ",", "0.75", ",", "0.05", "]", ",", "\n", "5", ":", "[", "0.5", ",", "1.0", ",", "0.05", "]", ",", "\n", "6", ":", "[", "0.5", ",", "1.0", ",", "0.05", "]", ",", "\n", "7", ":", "[", "0.5", ",", "1.0", ",", "0.05", "]", ",", "\n", "}", "\n", "class_to_range", "=", "{", "\n", "0", ":", "[", "0.5", ",", "0.95", ",", "10", "]", ",", "\n", "1", ":", "[", "0.25", ",", "0.7", ",", "10", "]", ",", "\n", "2", ":", "[", "0.25", ",", "0.7", ",", "10", "]", ",", "\n", "3", ":", "[", "0.5", ",", "0.95", ",", "10", "]", ",", "\n", "4", ":", "[", "0.25", ",", "0.7", ",", "10", "]", ",", "\n", "5", ":", "[", "0.5", ",", "0.95", ",", "10", "]", ",", "\n", "6", ":", "[", "0.5", ",", "0.95", ",", "10", "]", ",", "\n", "7", ":", "[", "0.5", ",", "0.95", ",", "10", "]", ",", "\n", "\n", "}", "\n", "\n", "name_to_class", "=", "{", "v", ":", "n", "for", "n", ",", "v", "in", "class_to_name", ".", "items", "(", ")", "}", "\n", "if", "not", "isinstance", "(", "current_classes", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "current_classes", "=", "[", "current_classes", "]", "\n", "", "current_classes_int", "=", "[", "]", "\n", "for", "curcls", "in", "current_classes", ":", "\n", "        ", "if", "isinstance", "(", "curcls", ",", "str", ")", ":", "\n", "            ", "current_classes_int", ".", "append", "(", "name_to_class", "[", "curcls", "]", ")", "\n", "", "else", ":", "\n", "            ", "current_classes_int", ".", "append", "(", "curcls", ")", "\n", "", "", "current_classes", "=", "current_classes_int", "\n", "overlap_ranges", "=", "np", ".", "zeros", "(", "[", "3", ",", "3", ",", "len", "(", "current_classes", ")", "]", ")", "\n", "for", "i", ",", "curcls", "in", "enumerate", "(", "current_classes", ")", ":", "\n", "        ", "overlap_ranges", "[", ":", ",", ":", ",", "i", "]", "=", "np", ".", "array", "(", "class_to_range", "[", "curcls", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "", "result", "=", "''", "\n", "# check whether alpha is valid", "\n", "compute_aos", "=", "False", "\n", "for", "anno", "in", "dt_annos", ":", "\n", "        ", "if", "anno", "[", "'alpha'", "]", ".", "shape", "[", "0", "]", "!=", "0", ":", "\n", "            ", "if", "anno", "[", "'alpha'", "]", "[", "0", "]", "!=", "-", "10", ":", "\n", "                ", "compute_aos", "=", "True", "\n", "", "break", "\n", "", "", "mAPbbox", ",", "mAPbev", ",", "mAP3d", ",", "mAPaos", "=", "do_coco_style_eval", "(", "\n", "gt_annos", ",", "dt_annos", ",", "current_classes", ",", "overlap_ranges", ",", "compute_aos", ")", "\n", "for", "j", ",", "curcls", "in", "enumerate", "(", "current_classes", ")", ":", "\n", "# mAP threshold array: [num_minoverlap, metric, class]", "\n", "# mAP result: [num_class, num_diff, num_minoverlap]", "\n", "        ", "o_range", "=", "np", ".", "array", "(", "class_to_range", "[", "curcls", "]", ")", "[", "[", "0", ",", "2", ",", "1", "]", "]", "\n", "o_range", "[", "1", "]", "=", "(", "o_range", "[", "2", "]", "-", "o_range", "[", "0", "]", ")", "/", "(", "o_range", "[", "1", "]", "-", "1", ")", "\n", "result", "+=", "print_str", "(", "\n", "(", "f\"{class_to_name[curcls]} \"", "\n", "\"coco AP@{:.2f}:{:.2f}:{:.2f}:\"", ".", "format", "(", "*", "o_range", ")", ")", ")", "\n", "result", "+=", "print_str", "(", "(", "f\"bbox AP:{mAPbbox[j, 0]:.2f}, \"", "\n", "f\"{mAPbbox[j, 1]:.2f}, \"", "\n", "f\"{mAPbbox[j, 2]:.2f}\"", ")", ")", "\n", "result", "+=", "print_str", "(", "(", "f\"bev  AP:{mAPbev[j, 0]:.2f}, \"", "\n", "f\"{mAPbev[j, 1]:.2f}, \"", "\n", "f\"{mAPbev[j, 2]:.2f}\"", ")", ")", "\n", "result", "+=", "print_str", "(", "(", "f\"3d   AP:{mAP3d[j, 0]:.2f}, \"", "\n", "f\"{mAP3d[j, 1]:.2f}, \"", "\n", "f\"{mAP3d[j, 2]:.2f}\"", ")", ")", "\n", "if", "compute_aos", ":", "\n", "            ", "result", "+=", "print_str", "(", "(", "f\"aos  AP:{mAPaos[j, 0]:.2f}, \"", "\n", "f\"{mAPaos[j, 1]:.2f}, \"", "\n", "f\"{mAPaos[j, 2]:.2f}\"", ")", ")", "\n", "", "", "return", "result", "\n", "", ""]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.recall._recalls": [[7, 38], ["sum", "numpy.zeros", "enumerate", "numpy.fliplr", "numpy.zeros", "enumerate", "numpy.zeros", "range", "numpy.sort", "[].copy", "numpy.zeros", "range", "numpy.hstack", "float", "numpy.hstack", "[].copy.argmax", "max_ious.argmax", "numpy.arange"], "function", ["None"], ["def", "_recalls", "(", "all_ious", ",", "proposal_nums", ",", "thrs", ")", ":", "\n", "\n", "    ", "img_num", "=", "all_ious", ".", "shape", "[", "0", "]", "\n", "total_gt_num", "=", "sum", "(", "[", "ious", ".", "shape", "[", "0", "]", "for", "ious", "in", "all_ious", "]", ")", "\n", "\n", "_ious", "=", "np", ".", "zeros", "(", "(", "proposal_nums", ".", "size", ",", "total_gt_num", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", ",", "proposal_num", "in", "enumerate", "(", "proposal_nums", ")", ":", "\n", "        ", "tmp_ious", "=", "np", ".", "zeros", "(", "0", ")", "\n", "for", "i", "in", "range", "(", "img_num", ")", ":", "\n", "            ", "ious", "=", "all_ious", "[", "i", "]", "[", ":", ",", ":", "proposal_num", "]", ".", "copy", "(", ")", "\n", "gt_ious", "=", "np", ".", "zeros", "(", "(", "ious", ".", "shape", "[", "0", "]", ")", ")", "\n", "if", "ious", ".", "size", "==", "0", ":", "\n", "                ", "tmp_ious", "=", "np", ".", "hstack", "(", "(", "tmp_ious", ",", "gt_ious", ")", ")", "\n", "continue", "\n", "", "for", "j", "in", "range", "(", "ious", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "gt_max_overlaps", "=", "ious", ".", "argmax", "(", "axis", "=", "1", ")", "\n", "max_ious", "=", "ious", "[", "np", ".", "arange", "(", "0", ",", "ious", ".", "shape", "[", "0", "]", ")", ",", "gt_max_overlaps", "]", "\n", "gt_idx", "=", "max_ious", ".", "argmax", "(", ")", "\n", "gt_ious", "[", "j", "]", "=", "max_ious", "[", "gt_idx", "]", "\n", "box_idx", "=", "gt_max_overlaps", "[", "gt_idx", "]", "\n", "ious", "[", "gt_idx", ",", ":", "]", "=", "-", "1", "\n", "ious", "[", ":", ",", "box_idx", "]", "=", "-", "1", "\n", "", "tmp_ious", "=", "np", ".", "hstack", "(", "(", "tmp_ious", ",", "gt_ious", ")", ")", "\n", "", "_ious", "[", "k", ",", ":", "]", "=", "tmp_ious", "\n", "\n", "", "_ious", "=", "np", ".", "fliplr", "(", "np", ".", "sort", "(", "_ious", ",", "axis", "=", "1", ")", ")", "\n", "recalls", "=", "np", ".", "zeros", "(", "(", "proposal_nums", ".", "size", ",", "thrs", ".", "size", ")", ")", "\n", "for", "i", ",", "thr", "in", "enumerate", "(", "thrs", ")", ":", "\n", "        ", "recalls", "[", ":", ",", "i", "]", "=", "(", "_ious", ">=", "thr", ")", ".", "sum", "(", "axis", "=", "1", ")", "/", "float", "(", "total_gt_num", ")", "\n", "\n", "", "return", "recalls", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.recall.set_recall_param": [[40, 60], ["isinstance", "numpy.array", "isinstance", "numpy.array", "isinstance", "numpy.array", "numpy.array", "isinstance", "numpy.array"], "function", ["None"], ["", "def", "set_recall_param", "(", "proposal_nums", ",", "iou_thrs", ")", ":", "\n", "    ", "\"\"\"Check proposal_nums and iou_thrs and set correct format.\n    \"\"\"", "\n", "if", "isinstance", "(", "proposal_nums", ",", "list", ")", ":", "\n", "        ", "_proposal_nums", "=", "np", ".", "array", "(", "proposal_nums", ")", "\n", "", "elif", "isinstance", "(", "proposal_nums", ",", "int", ")", ":", "\n", "        ", "_proposal_nums", "=", "np", ".", "array", "(", "[", "proposal_nums", "]", ")", "\n", "", "else", ":", "\n", "        ", "_proposal_nums", "=", "proposal_nums", "\n", "\n", "", "if", "iou_thrs", "is", "None", ":", "\n", "        ", "_iou_thrs", "=", "np", ".", "array", "(", "[", "0.5", "]", ")", "\n", "", "elif", "isinstance", "(", "iou_thrs", ",", "list", ")", ":", "\n", "        ", "_iou_thrs", "=", "np", ".", "array", "(", "iou_thrs", ")", "\n", "", "elif", "isinstance", "(", "iou_thrs", ",", "float", ")", ":", "\n", "        ", "_iou_thrs", "=", "np", ".", "array", "(", "[", "iou_thrs", "]", ")", "\n", "", "else", ":", "\n", "        ", "_iou_thrs", "=", "iou_thrs", "\n", "\n", "", "return", "_proposal_nums", ",", "_iou_thrs", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.recall.eval_recalls": [[62, 103], ["len", "recall.set_recall_param", "range", "numpy.array", "recall._recalls", "len", "min", "np.array.append", "recall.print_recall_summary", "numpy.zeros", "bbox_overlaps.bbox_overlaps", "numpy.argsort"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.recall.set_recall_param", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.recall._recalls", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.recall.print_recall_summary", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.geometry.bbox_overlaps"], ["", "def", "eval_recalls", "(", "gts", ",", "\n", "proposals", ",", "\n", "proposal_nums", "=", "None", ",", "\n", "iou_thrs", "=", "None", ",", "\n", "print_summary", "=", "True", ")", ":", "\n", "    ", "\"\"\"Calculate recalls.\n\n    Args:\n        gts(list or ndarray): a list of arrays of shape (n, 4)\n        proposals(list or ndarray): a list of arrays of shape (k, 4) or (k, 5)\n        proposal_nums(int or list of int or ndarray): top N proposals\n        thrs(float or list or ndarray): iou thresholds\n\n    Returns:\n        ndarray: recalls of different ious and proposal nums\n    \"\"\"", "\n", "\n", "img_num", "=", "len", "(", "gts", ")", "\n", "assert", "img_num", "==", "len", "(", "proposals", ")", "\n", "\n", "proposal_nums", ",", "iou_thrs", "=", "set_recall_param", "(", "proposal_nums", ",", "iou_thrs", ")", "\n", "\n", "all_ious", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "img_num", ")", ":", "\n", "        ", "if", "proposals", "[", "i", "]", ".", "ndim", "==", "2", "and", "proposals", "[", "i", "]", ".", "shape", "[", "1", "]", "==", "5", ":", "\n", "            ", "scores", "=", "proposals", "[", "i", "]", "[", ":", ",", "4", "]", "\n", "sort_idx", "=", "np", ".", "argsort", "(", "scores", ")", "[", ":", ":", "-", "1", "]", "\n", "img_proposal", "=", "proposals", "[", "i", "]", "[", "sort_idx", ",", ":", "]", "\n", "", "else", ":", "\n", "            ", "img_proposal", "=", "proposals", "[", "i", "]", "\n", "", "prop_num", "=", "min", "(", "img_proposal", ".", "shape", "[", "0", "]", ",", "proposal_nums", "[", "-", "1", "]", ")", "\n", "if", "gts", "[", "i", "]", "is", "None", "or", "gts", "[", "i", "]", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "ious", "=", "np", ".", "zeros", "(", "(", "0", ",", "img_proposal", ".", "shape", "[", "0", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "            ", "ious", "=", "bbox_overlaps", "(", "gts", "[", "i", "]", ",", "img_proposal", "[", ":", "prop_num", ",", ":", "4", "]", ")", "\n", "", "all_ious", ".", "append", "(", "ious", ")", "\n", "", "all_ious", "=", "np", ".", "array", "(", "all_ious", ")", "\n", "recalls", "=", "_recalls", "(", "all_ious", ",", "proposal_nums", ",", "iou_thrs", ")", "\n", "if", "print_summary", ":", "\n", "        ", "print_recall_summary", "(", "recalls", ",", "proposal_nums", ",", "iou_thrs", ")", "\n", "", "return", "recalls", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.recall.print_recall_summary": [[105, 136], ["numpy.array", "numpy.array", "enumerate", "terminaltables.AsciiTable", "print", "numpy.arange", "numpy.arange", "iou_thrs[].tolist", "row.insert", "table_data.append", "recalls[].tolist"], "function", ["None"], ["", "def", "print_recall_summary", "(", "recalls", ",", "\n", "proposal_nums", ",", "\n", "iou_thrs", ",", "\n", "row_idxs", "=", "None", ",", "\n", "col_idxs", "=", "None", ")", ":", "\n", "    ", "\"\"\"Print recalls in a table.\n\n    Args:\n        recalls(ndarray): calculated from `bbox_recalls`\n        proposal_nums(ndarray or list): top N proposals\n        iou_thrs(ndarray or list): iou thresholds\n        row_idxs(ndarray): which rows(proposal nums) to print\n        col_idxs(ndarray): which cols(iou thresholds) to print\n    \"\"\"", "\n", "proposal_nums", "=", "np", ".", "array", "(", "proposal_nums", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "iou_thrs", "=", "np", ".", "array", "(", "iou_thrs", ")", "\n", "if", "row_idxs", "is", "None", ":", "\n", "        ", "row_idxs", "=", "np", ".", "arange", "(", "proposal_nums", ".", "size", ")", "\n", "", "if", "col_idxs", "is", "None", ":", "\n", "        ", "col_idxs", "=", "np", ".", "arange", "(", "iou_thrs", ".", "size", ")", "\n", "", "row_header", "=", "[", "''", "]", "+", "iou_thrs", "[", "col_idxs", "]", ".", "tolist", "(", ")", "\n", "table_data", "=", "[", "row_header", "]", "\n", "for", "i", ",", "num", "in", "enumerate", "(", "proposal_nums", "[", "row_idxs", "]", ")", ":", "\n", "        ", "row", "=", "[", "\n", "'{:.3f}'", ".", "format", "(", "val", ")", "\n", "for", "val", "in", "recalls", "[", "row_idxs", "[", "i", "]", ",", "col_idxs", "]", ".", "tolist", "(", ")", "\n", "]", "\n", "row", ".", "insert", "(", "0", ",", "num", ")", "\n", "table_data", ".", "append", "(", "row", ")", "\n", "", "table", "=", "AsciiTable", "(", "table_data", ")", "\n", "print", "(", "table", ".", "table", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.recall.plot_num_recall": [[138, 161], ["isinstance", "isinstance", "plt.figure", "plt.plot", "plt.xlabel", "plt.ylabel", "plt.axis", "plt.figure.show", "proposal_nums.tolist", "recalls.tolist", "proposal_nums.max"], "function", ["None"], ["", "def", "plot_num_recall", "(", "recalls", ",", "proposal_nums", ")", ":", "\n", "    ", "\"\"\"Plot Proposal_num-Recalls curve.\n\n    Args:\n        recalls(ndarray or list): shape (k,)\n        proposal_nums(ndarray or list): same shape as `recalls`\n    \"\"\"", "\n", "if", "isinstance", "(", "proposal_nums", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "_proposal_nums", "=", "proposal_nums", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "        ", "_proposal_nums", "=", "proposal_nums", "\n", "", "if", "isinstance", "(", "recalls", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "_recalls", "=", "recalls", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "        ", "_recalls", "=", "recalls", "\n", "\n", "", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "f", "=", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "plot", "(", "[", "0", "]", "+", "_proposal_nums", ",", "[", "0", "]", "+", "_recalls", ")", "\n", "plt", ".", "xlabel", "(", "'Proposal num'", ")", "\n", "plt", ".", "ylabel", "(", "'Recall'", ")", "\n", "plt", ".", "axis", "(", "[", "0", ",", "proposal_nums", ".", "max", "(", ")", ",", "0", ",", "1", "]", ")", "\n", "f", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.recall.plot_iou_recall": [[163, 186], ["isinstance", "isinstance", "plt.figure", "plt.plot", "plt.xlabel", "plt.ylabel", "plt.axis", "plt.figure.show", "iou_thrs.tolist", "recalls.tolist", "iou_thrs.min"], "function", ["None"], ["", "def", "plot_iou_recall", "(", "recalls", ",", "iou_thrs", ")", ":", "\n", "    ", "\"\"\"Plot IoU-Recalls curve.\n\n    Args:\n        recalls(ndarray or list): shape (k,)\n        iou_thrs(ndarray or list): same shape as `recalls`\n    \"\"\"", "\n", "if", "isinstance", "(", "iou_thrs", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "_iou_thrs", "=", "iou_thrs", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "        ", "_iou_thrs", "=", "iou_thrs", "\n", "", "if", "isinstance", "(", "recalls", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "_recalls", "=", "recalls", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "        ", "_recalls", "=", "recalls", "\n", "\n", "", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "f", "=", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "plot", "(", "_iou_thrs", "+", "[", "1.0", "]", ",", "_recalls", "+", "[", "0.", "]", ")", "\n", "plt", ".", "xlabel", "(", "'IoU'", ")", "\n", "plt", ".", "ylabel", "(", "'Recall'", ")", "\n", "plt", ".", "axis", "(", "[", "iou_thrs", ".", "min", "(", ")", ",", "1", ",", "0", ",", "1", "]", ")", "\n", "f", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.coco_utils.coco_eval": [[9, 39], ["mmcv.is_str", "isinstance", "result_file.endswith", "pycocotools.coco.COCO.loadRes", "pycocotools.coco.COCO.getImgIds", "pycocotools.coco.COCO", "coco_utils.fast_eval_recall", "enumerate", "pycocotools.cocoeval.COCOeval", "pycocotools.cocoeval.COCOeval.evaluate", "pycocotools.cocoeval.COCOeval.accumulate", "pycocotools.cocoeval.COCOeval.summarize", "numpy.array", "print", "list"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.coco_utils.fast_eval_recall", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.eval_hooks.KittiEvalmAPHook.evaluate"], ["def", "coco_eval", "(", "result_file", ",", "result_types", ",", "coco", ",", "max_dets", "=", "(", "100", ",", "300", ",", "1000", ")", ")", ":", "\n", "    ", "for", "res_type", "in", "result_types", ":", "\n", "        ", "assert", "res_type", "in", "[", "\n", "'proposal'", ",", "'proposal_fast'", ",", "'bbox'", ",", "'segm'", ",", "'keypoints'", "\n", "]", "\n", "\n", "", "if", "mmcv", ".", "is_str", "(", "coco", ")", ":", "\n", "        ", "coco", "=", "COCO", "(", "coco", ")", "\n", "", "assert", "isinstance", "(", "coco", ",", "COCO", ")", "\n", "\n", "if", "result_types", "==", "[", "'proposal_fast'", "]", ":", "\n", "        ", "ar", "=", "fast_eval_recall", "(", "result_file", ",", "coco", ",", "np", ".", "array", "(", "max_dets", ")", ")", "\n", "for", "i", ",", "num", "in", "enumerate", "(", "max_dets", ")", ":", "\n", "            ", "print", "(", "'AR@{}\\t= {:.4f}'", ".", "format", "(", "num", ",", "ar", "[", "i", "]", ")", ")", "\n", "", "return", "\n", "\n", "", "assert", "result_file", ".", "endswith", "(", "'.json'", ")", "\n", "coco_dets", "=", "coco", ".", "loadRes", "(", "result_file", ")", "\n", "\n", "img_ids", "=", "coco", ".", "getImgIds", "(", ")", "\n", "for", "res_type", "in", "result_types", ":", "\n", "        ", "iou_type", "=", "'bbox'", "if", "res_type", "==", "'proposal'", "else", "res_type", "\n", "cocoEval", "=", "COCOeval", "(", "coco", ",", "coco_dets", ",", "iou_type", ")", "\n", "cocoEval", ".", "params", ".", "imgIds", "=", "img_ids", "\n", "if", "res_type", "==", "'proposal'", ":", "\n", "            ", "cocoEval", ".", "params", ".", "useCats", "=", "0", "\n", "cocoEval", ".", "params", ".", "maxDets", "=", "list", "(", "max_dets", ")", "\n", "", "cocoEval", ".", "evaluate", "(", ")", "\n", "cocoEval", ".", "accumulate", "(", ")", "\n", "cocoEval", ".", "summarize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.coco_utils.fast_eval_recall": [[41, 76], ["numpy.arange", "mmcv.is_str", "coco.getImgIds", "range", "recall.eval_recalls", "recall.eval_recalls.mean", "mmcv.load.endswith", "mmcv.load", "len", "coco.getAnnIds", "coco.loadAnns", "numpy.array", "gt_bboxes.append", "isinstance", "TypeError", "len", "gt_bboxes.append", "np.zeros.append", "numpy.zeros", "numpy.zeros", "ann.get", "type"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.recall.eval_recalls"], ["", "", "def", "fast_eval_recall", "(", "results", ",", "\n", "coco", ",", "\n", "max_dets", ",", "\n", "iou_thrs", "=", "np", ".", "arange", "(", "0.5", ",", "0.96", ",", "0.05", ")", ")", ":", "\n", "    ", "if", "mmcv", ".", "is_str", "(", "results", ")", ":", "\n", "        ", "assert", "results", ".", "endswith", "(", "'.pkl'", ")", "\n", "results", "=", "mmcv", ".", "load", "(", "results", ")", "\n", "", "elif", "not", "isinstance", "(", "results", ",", "list", ")", ":", "\n", "        ", "raise", "TypeError", "(", "\n", "'results must be a list of numpy arrays or a filename, not {}'", ".", "\n", "format", "(", "type", "(", "results", ")", ")", ")", "\n", "\n", "", "gt_bboxes", "=", "[", "]", "\n", "img_ids", "=", "coco", ".", "getImgIds", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "img_ids", ")", ")", ":", "\n", "        ", "ann_ids", "=", "coco", ".", "getAnnIds", "(", "imgIds", "=", "img_ids", "[", "i", "]", ")", "\n", "ann_info", "=", "coco", ".", "loadAnns", "(", "ann_ids", ")", "\n", "if", "len", "(", "ann_info", ")", "==", "0", ":", "\n", "            ", "gt_bboxes", ".", "append", "(", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ")", ")", "\n", "continue", "\n", "", "bboxes", "=", "[", "]", "\n", "for", "ann", "in", "ann_info", ":", "\n", "            ", "if", "ann", ".", "get", "(", "'ignore'", ",", "False", ")", "or", "ann", "[", "'iscrowd'", "]", ":", "\n", "                ", "continue", "\n", "", "x1", ",", "y1", ",", "w", ",", "h", "=", "ann", "[", "'bbox'", "]", "\n", "bboxes", ".", "append", "(", "[", "x1", ",", "y1", ",", "x1", "+", "w", "-", "1", ",", "y1", "+", "h", "-", "1", "]", ")", "\n", "", "bboxes", "=", "np", ".", "array", "(", "bboxes", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "bboxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "bboxes", "=", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ")", "\n", "", "gt_bboxes", ".", "append", "(", "bboxes", ")", "\n", "\n", "", "recalls", "=", "eval_recalls", "(", "\n", "gt_bboxes", ",", "results", ",", "max_dets", ",", "iou_thrs", ",", "print_summary", "=", "False", ")", "\n", "ar", "=", "recalls", ".", "mean", "(", "axis", "=", "1", ")", "\n", "return", "ar", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.coco_utils.xyxy2xywh": [[78, 85], ["bbox.tolist"], "function", ["None"], ["", "def", "xyxy2xywh", "(", "bbox", ")", ":", "\n", "    ", "_bbox", "=", "bbox", ".", "tolist", "(", ")", "\n", "return", "[", "\n", "_bbox", "[", "0", "]", ",", "\n", "_bbox", "[", "1", "]", ",", "\n", "_bbox", "[", "2", "]", "-", "_bbox", "[", "0", "]", "+", "1", ",", "\n", "_bbox", "[", "3", "]", "-", "_bbox", "[", "1", "]", "+", "1", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.coco_utils.proposal2json": [[88, 101], ["range", "len", "range", "dict", "coco_utils.xyxy2xywh", "float", "json_results.append"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.coco_utils.xyxy2xywh"], ["", "def", "proposal2json", "(", "dataset", ",", "results", ")", ":", "\n", "    ", "json_results", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "dataset", ")", ")", ":", "\n", "        ", "img_id", "=", "dataset", ".", "img_ids", "[", "idx", "]", "\n", "bboxes", "=", "results", "[", "idx", "]", "\n", "for", "i", "in", "range", "(", "bboxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "data", "=", "dict", "(", ")", "\n", "data", "[", "'image_id'", "]", "=", "img_id", "\n", "data", "[", "'bbox'", "]", "=", "xyxy2xywh", "(", "bboxes", "[", "i", "]", ")", "\n", "data", "[", "'score'", "]", "=", "float", "(", "bboxes", "[", "i", "]", "[", "4", "]", ")", "\n", "data", "[", "'category_id'", "]", "=", "1", "\n", "json_results", ".", "append", "(", "data", ")", "\n", "", "", "return", "json_results", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.coco_utils.det2json": [[103, 118], ["range", "len", "range", "len", "range", "dict", "coco_utils.xyxy2xywh", "float", "json_results.append"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.coco_utils.xyxy2xywh"], ["", "def", "det2json", "(", "dataset", ",", "results", ")", ":", "\n", "    ", "json_results", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "dataset", ")", ")", ":", "\n", "        ", "img_id", "=", "dataset", ".", "img_ids", "[", "idx", "]", "\n", "result", "=", "results", "[", "idx", "]", "\n", "for", "label", "in", "range", "(", "len", "(", "result", ")", ")", ":", "\n", "            ", "bboxes", "=", "result", "[", "label", "]", "\n", "for", "i", "in", "range", "(", "bboxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "data", "=", "dict", "(", ")", "\n", "data", "[", "'image_id'", "]", "=", "img_id", "\n", "data", "[", "'bbox'", "]", "=", "xyxy2xywh", "(", "bboxes", "[", "i", "]", ")", "\n", "data", "[", "'score'", "]", "=", "float", "(", "bboxes", "[", "i", "]", "[", "4", "]", ")", "\n", "data", "[", "'category_id'", "]", "=", "dataset", ".", "cat_ids", "[", "label", "]", "\n", "json_results", ".", "append", "(", "data", ")", "\n", "", "", "", "return", "json_results", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.coco_utils.segm2json": [[120, 138], ["range", "len", "range", "len", "range", "dict", "coco_utils.xyxy2xywh", "float", "[].decode", "json_results.append"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.coco_utils.xyxy2xywh", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.box_coders.BoxCoder.decode"], ["", "def", "segm2json", "(", "dataset", ",", "results", ")", ":", "\n", "    ", "json_results", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "dataset", ")", ")", ":", "\n", "        ", "img_id", "=", "dataset", ".", "img_ids", "[", "idx", "]", "\n", "det", ",", "seg", "=", "results", "[", "idx", "]", "\n", "for", "label", "in", "range", "(", "len", "(", "det", ")", ")", ":", "\n", "            ", "bboxes", "=", "det", "[", "label", "]", "\n", "segms", "=", "seg", "[", "label", "]", "\n", "for", "i", "in", "range", "(", "bboxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "data", "=", "dict", "(", ")", "\n", "data", "[", "'image_id'", "]", "=", "img_id", "\n", "data", "[", "'bbox'", "]", "=", "xyxy2xywh", "(", "bboxes", "[", "i", "]", ")", "\n", "data", "[", "'score'", "]", "=", "float", "(", "bboxes", "[", "i", "]", "[", "4", "]", ")", "\n", "data", "[", "'category_id'", "]", "=", "dataset", ".", "cat_ids", "[", "label", "]", "\n", "segms", "[", "i", "]", "[", "'counts'", "]", "=", "segms", "[", "i", "]", "[", "'counts'", "]", ".", "decode", "(", ")", "\n", "data", "[", "'segmentation'", "]", "=", "segms", "[", "i", "]", "\n", "json_results", ".", "append", "(", "data", ")", "\n", "", "", "", "return", "json_results", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.coco_utils.results2json": [[140, 150], ["isinstance", "mmcv.dump", "coco_utils.det2json", "isinstance", "coco_utils.segm2json", "isinstance", "coco_utils.proposal2json", "TypeError"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.coco_utils.det2json", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.coco_utils.segm2json", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.coco_utils.proposal2json"], ["", "def", "results2json", "(", "dataset", ",", "results", ",", "out_file", ")", ":", "\n", "    ", "if", "isinstance", "(", "results", "[", "0", "]", ",", "list", ")", ":", "\n", "        ", "json_results", "=", "det2json", "(", "dataset", ",", "results", ")", "\n", "", "elif", "isinstance", "(", "results", "[", "0", "]", ",", "tuple", ")", ":", "\n", "        ", "json_results", "=", "segm2json", "(", "dataset", ",", "results", ")", "\n", "", "elif", "isinstance", "(", "results", "[", "0", "]", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "json_results", "=", "proposal2json", "(", "dataset", ",", "results", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "'invalid type of results'", ")", "\n", "", "mmcv", ".", "dump", "(", "json_results", ",", "out_file", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.bbox_overlaps.bbox_overlaps": [[4, 50], ["bboxes1.astype.astype", "bboxes2.astype.astype", "numpy.zeros", "range", "numpy.zeros", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum"], "function", ["None"], ["def", "bbox_overlaps", "(", "bboxes1", ",", "bboxes2", ",", "mode", "=", "'iou'", ")", ":", "\n", "    ", "\"\"\"Calculate the ious between each bbox of bboxes1 and bboxes2.\n\n    Args:\n        bboxes1(ndarray): shape (n, 4)\n        bboxes2(ndarray): shape (k, 4)\n        mode(str): iou (intersection over union) or iof (intersection\n            over foreground)\n\n    Returns:\n        ious(ndarray): shape (n, k)\n    \"\"\"", "\n", "\n", "assert", "mode", "in", "[", "'iou'", ",", "'iof'", "]", "\n", "\n", "bboxes1", "=", "bboxes1", ".", "astype", "(", "np", ".", "float32", ")", "\n", "bboxes2", "=", "bboxes2", ".", "astype", "(", "np", ".", "float32", ")", "\n", "rows", "=", "bboxes1", ".", "shape", "[", "0", "]", "\n", "cols", "=", "bboxes2", ".", "shape", "[", "0", "]", "\n", "ious", "=", "np", ".", "zeros", "(", "(", "rows", ",", "cols", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "rows", "*", "cols", "==", "0", ":", "\n", "        ", "return", "ious", "\n", "", "exchange", "=", "False", "\n", "if", "bboxes1", ".", "shape", "[", "0", "]", ">", "bboxes2", ".", "shape", "[", "0", "]", ":", "\n", "        ", "bboxes1", ",", "bboxes2", "=", "bboxes2", ",", "bboxes1", "\n", "ious", "=", "np", ".", "zeros", "(", "(", "cols", ",", "rows", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "exchange", "=", "True", "\n", "", "area1", "=", "(", "bboxes1", "[", ":", ",", "2", "]", "-", "bboxes1", "[", ":", ",", "0", "]", "+", "1", ")", "*", "(", "\n", "bboxes1", "[", ":", ",", "3", "]", "-", "bboxes1", "[", ":", ",", "1", "]", "+", "1", ")", "\n", "area2", "=", "(", "bboxes2", "[", ":", ",", "2", "]", "-", "bboxes2", "[", ":", ",", "0", "]", "+", "1", ")", "*", "(", "\n", "bboxes2", "[", ":", ",", "3", "]", "-", "bboxes2", "[", ":", ",", "1", "]", "+", "1", ")", "\n", "for", "i", "in", "range", "(", "bboxes1", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "x_start", "=", "np", ".", "maximum", "(", "bboxes1", "[", "i", ",", "0", "]", ",", "bboxes2", "[", ":", ",", "0", "]", ")", "\n", "y_start", "=", "np", ".", "maximum", "(", "bboxes1", "[", "i", ",", "1", "]", ",", "bboxes2", "[", ":", ",", "1", "]", ")", "\n", "x_end", "=", "np", ".", "minimum", "(", "bboxes1", "[", "i", ",", "2", "]", ",", "bboxes2", "[", ":", ",", "2", "]", ")", "\n", "y_end", "=", "np", ".", "minimum", "(", "bboxes1", "[", "i", ",", "3", "]", ",", "bboxes2", "[", ":", ",", "3", "]", ")", "\n", "overlap", "=", "np", ".", "maximum", "(", "x_end", "-", "x_start", "+", "1", ",", "0", ")", "*", "np", ".", "maximum", "(", "\n", "y_end", "-", "y_start", "+", "1", ",", "0", ")", "\n", "if", "mode", "==", "'iou'", ":", "\n", "            ", "union", "=", "area1", "[", "i", "]", "+", "area2", "-", "overlap", "\n", "", "else", ":", "\n", "            ", "union", "=", "area1", "[", "i", "]", "if", "not", "exchange", "else", "area2", "\n", "", "ious", "[", "i", ",", ":", "]", "=", "overlap", "/", "union", "\n", "", "if", "exchange", ":", "\n", "        ", "ious", "=", "ious", ".", "T", "\n", "", "return", "ious", "\n", "", ""]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.class_names.voc_classes": [[4, 9], ["None"], "function", ["None"], ["def", "voc_classes", "(", ")", ":", "\n", "    ", "return", "[", "\n", "'aeroplane'", ",", "'bicycle'", ",", "'bird'", ",", "'boat'", ",", "'bottle'", ",", "'bus'", ",", "'car'", ",", "'cat'", ",", "\n", "'chair'", ",", "'cow'", ",", "'diningtable'", ",", "'dog'", ",", "'horse'", ",", "'motorbike'", ",", "'person'", ",", "\n", "'pottedplant'", ",", "'sheep'", ",", "'sofa'", ",", "'train'", ",", "'tvmonitor'", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.class_names.imagenet_det_classes": [[12, 50], ["None"], "function", ["None"], ["", "def", "imagenet_det_classes", "(", ")", ":", "\n", "    ", "return", "[", "\n", "'accordion'", ",", "'airplane'", ",", "'ant'", ",", "'antelope'", ",", "'apple'", ",", "'armadillo'", ",", "\n", "'artichoke'", ",", "'axe'", ",", "'baby_bed'", ",", "'backpack'", ",", "'bagel'", ",", "'balance_beam'", ",", "\n", "'banana'", ",", "'band_aid'", ",", "'banjo'", ",", "'baseball'", ",", "'basketball'", ",", "'bathing_cap'", ",", "\n", "'beaker'", ",", "'bear'", ",", "'bee'", ",", "'bell_pepper'", ",", "'bench'", ",", "'bicycle'", ",", "'binder'", ",", "\n", "'bird'", ",", "'bookshelf'", ",", "'bow_tie'", ",", "'bow'", ",", "'bowl'", ",", "'brassiere'", ",", "'burrito'", ",", "\n", "'bus'", ",", "'butterfly'", ",", "'camel'", ",", "'can_opener'", ",", "'car'", ",", "'cart'", ",", "'cattle'", ",", "\n", "'cello'", ",", "'centipede'", ",", "'chain_saw'", ",", "'chair'", ",", "'chime'", ",", "'cocktail_shaker'", ",", "\n", "'coffee_maker'", ",", "'computer_keyboard'", ",", "'computer_mouse'", ",", "'corkscrew'", ",", "\n", "'cream'", ",", "'croquet_ball'", ",", "'crutch'", ",", "'cucumber'", ",", "'cup_or_mug'", ",", "'diaper'", ",", "\n", "'digital_clock'", ",", "'dishwasher'", ",", "'dog'", ",", "'domestic_cat'", ",", "'dragonfly'", ",", "\n", "'drum'", ",", "'dumbbell'", ",", "'electric_fan'", ",", "'elephant'", ",", "'face_powder'", ",", "'fig'", ",", "\n", "'filing_cabinet'", ",", "'flower_pot'", ",", "'flute'", ",", "'fox'", ",", "'french_horn'", ",", "'frog'", ",", "\n", "'frying_pan'", ",", "'giant_panda'", ",", "'goldfish'", ",", "'golf_ball'", ",", "'golfcart'", ",", "\n", "'guacamole'", ",", "'guitar'", ",", "'hair_dryer'", ",", "'hair_spray'", ",", "'hamburger'", ",", "\n", "'hammer'", ",", "'hamster'", ",", "'harmonica'", ",", "'harp'", ",", "'hat_with_a_wide_brim'", ",", "\n", "'head_cabbage'", ",", "'helmet'", ",", "'hippopotamus'", ",", "'horizontal_bar'", ",", "'horse'", ",", "\n", "'hotdog'", ",", "'iPod'", ",", "'isopod'", ",", "'jellyfish'", ",", "'koala_bear'", ",", "'ladle'", ",", "\n", "'ladybug'", ",", "'lamp'", ",", "'laptop'", ",", "'lemon'", ",", "'lion'", ",", "'lipstick'", ",", "'lizard'", ",", "\n", "'lobster'", ",", "'maillot'", ",", "'maraca'", ",", "'microphone'", ",", "'microwave'", ",", "'milk_can'", ",", "\n", "'miniskirt'", ",", "'monkey'", ",", "'motorcycle'", ",", "'mushroom'", ",", "'nail'", ",", "'neck_brace'", ",", "\n", "'oboe'", ",", "'orange'", ",", "'otter'", ",", "'pencil_box'", ",", "'pencil_sharpener'", ",", "'perfume'", ",", "\n", "'person'", ",", "'piano'", ",", "'pineapple'", ",", "'ping-pong_ball'", ",", "'pitcher'", ",", "'pizza'", ",", "\n", "'plastic_bag'", ",", "'plate_rack'", ",", "'pomegranate'", ",", "'popsicle'", ",", "'porcupine'", ",", "\n", "'power_drill'", ",", "'pretzel'", ",", "'printer'", ",", "'puck'", ",", "'punching_bag'", ",", "'purse'", ",", "\n", "'rabbit'", ",", "'racket'", ",", "'ray'", ",", "'red_panda'", ",", "'refrigerator'", ",", "\n", "'remote_control'", ",", "'rubber_eraser'", ",", "'rugby_ball'", ",", "'ruler'", ",", "\n", "'salt_or_pepper_shaker'", ",", "'saxophone'", ",", "'scorpion'", ",", "'screwdriver'", ",", "\n", "'seal'", ",", "'sheep'", ",", "'ski'", ",", "'skunk'", ",", "'snail'", ",", "'snake'", ",", "'snowmobile'", ",", "\n", "'snowplow'", ",", "'soap_dispenser'", ",", "'soccer_ball'", ",", "'sofa'", ",", "'spatula'", ",", "\n", "'squirrel'", ",", "'starfish'", ",", "'stethoscope'", ",", "'stove'", ",", "'strainer'", ",", "\n", "'strawberry'", ",", "'stretcher'", ",", "'sunglasses'", ",", "'swimming_trunks'", ",", "'swine'", ",", "\n", "'syringe'", ",", "'table'", ",", "'tape_player'", ",", "'tennis_ball'", ",", "'tick'", ",", "'tie'", ",", "\n", "'tiger'", ",", "'toaster'", ",", "'traffic_light'", ",", "'train'", ",", "'trombone'", ",", "'trumpet'", ",", "\n", "'turtle'", ",", "'tv_or_monitor'", ",", "'unicycle'", ",", "'vacuum'", ",", "'violin'", ",", "\n", "'volleyball'", ",", "'waffle_iron'", ",", "'washer'", ",", "'water_bottle'", ",", "'watercraft'", ",", "\n", "'whale'", ",", "'wine_bottle'", ",", "'zebra'", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.class_names.imagenet_vid_classes": [[53, 60], ["None"], "function", ["None"], ["", "def", "imagenet_vid_classes", "(", ")", ":", "\n", "    ", "return", "[", "\n", "'airplane'", ",", "'antelope'", ",", "'bear'", ",", "'bicycle'", ",", "'bird'", ",", "'bus'", ",", "'car'", ",", "\n", "'cattle'", ",", "'dog'", ",", "'domestic_cat'", ",", "'elephant'", ",", "'fox'", ",", "'giant_panda'", ",", "\n", "'hamster'", ",", "'horse'", ",", "'lion'", ",", "'lizard'", ",", "'monkey'", ",", "'motorcycle'", ",", "'rabbit'", ",", "\n", "'red_panda'", ",", "'sheep'", ",", "'snake'", ",", "'squirrel'", ",", "'tiger'", ",", "'train'", ",", "'turtle'", ",", "\n", "'watercraft'", ",", "'whale'", ",", "'zebra'", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.class_names.coco_classes": [[63, 78], ["None"], "function", ["None"], ["", "def", "coco_classes", "(", ")", ":", "\n", "    ", "return", "[", "\n", "'person'", ",", "'bicycle'", ",", "'car'", ",", "'motorcycle'", ",", "'airplane'", ",", "'bus'", ",", "'train'", ",", "\n", "'truck'", ",", "'boat'", ",", "'traffic light'", ",", "'fire hydrant'", ",", "'stop sign'", ",", "\n", "'parking meter'", ",", "'bench'", ",", "'bird'", ",", "'cat'", ",", "'dog'", ",", "'horse'", ",", "'sheep'", ",", "\n", "'cow'", ",", "'elephant'", ",", "'bear'", ",", "'zebra'", ",", "'giraffe'", ",", "'backpack'", ",", "'umbrella'", ",", "\n", "'handbag'", ",", "'tie'", ",", "'suitcase'", ",", "'frisbee'", ",", "'skis'", ",", "'snowboard'", ",", "\n", "'sports ball'", ",", "'kite'", ",", "'baseball bat'", ",", "'baseball glove'", ",", "'skateboard'", ",", "\n", "'surfboard'", ",", "'tennis racket'", ",", "'bottle'", ",", "'wine glass'", ",", "'cup'", ",", "'fork'", ",", "\n", "'knife'", ",", "'spoon'", ",", "'bowl'", ",", "'banana'", ",", "'apple'", ",", "'sandwich'", ",", "'orange'", ",", "\n", "'broccoli'", ",", "'carrot'", ",", "'hot dog'", ",", "'pizza'", ",", "'donut'", ",", "'cake'", ",", "'chair'", ",", "\n", "'couch'", ",", "'potted plant'", ",", "'bed'", ",", "'dining table'", ",", "'toilet'", ",", "'tv'", ",", "\n", "'laptop'", ",", "'mouse'", ",", "'remote'", ",", "'keyboard'", ",", "'cell phone'", ",", "'microwave'", ",", "\n", "'oven'", ",", "'toaster'", ",", "'sink'", ",", "'refrigerator'", ",", "'book'", ",", "'clock'", ",", "'vase'", ",", "\n", "'scissors'", ",", "'teddy bear'", ",", "'hair drier'", ",", "'toothbrush'", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.class_names.kitti_classes": [[80, 83], ["None"], "function", ["None"], ["", "def", "kitti_classes", "(", ")", ":", "\n", "    ", "return", "[", "\n", "'car'", ",", "'pedestrians'", ",", "'cyclists'", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.class_names.get_classes": [[94, 109], ["dataset_aliases.items", "mmcv.is_str", "TypeError", "eval", "ValueError", "type"], "function", ["None"], ["def", "get_classes", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"Get class names of a dataset.\"\"\"", "\n", "alias2name", "=", "{", "}", "\n", "for", "name", ",", "aliases", "in", "dataset_aliases", ".", "items", "(", ")", ":", "\n", "        ", "for", "alias", "in", "aliases", ":", "\n", "            ", "alias2name", "[", "alias", "]", "=", "name", "\n", "\n", "", "", "if", "mmcv", ".", "is_str", "(", "dataset", ")", ":", "\n", "        ", "if", "dataset", "in", "alias2name", ":", "\n", "            ", "labels", "=", "eval", "(", "alias2name", "[", "dataset", "]", "+", "'_classes()'", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unrecognized dataset: {}'", ".", "format", "(", "dataset", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "'dataset must a str, but got {}'", ".", "format", "(", "type", "(", "dataset", ")", ")", ")", "\n", "", "return", "labels", "\n", "", ""]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.eval_hooks.DistEvalHook.__init__": [[25, 38], ["isinstance", "isinstance", "mmcv.runner.obj_from_dict", "TypeError", "type"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "interval", "=", "1", ")", ":", "\n", "        ", "if", "isinstance", "(", "dataset", ",", "Dataset", ")", ":", "\n", "            ", "self", ".", "dataset", "=", "dataset", "\n", "", "elif", "isinstance", "(", "dataset", ",", "dict", ")", ":", "\n", "            ", "self", ".", "dataset", "=", "obj_from_dict", "(", "dataset", ",", "datasets", ",", "\n", "{", "'test_mode'", ":", "True", "}", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "'dataset must be a Dataset object or a dict, not {}'", ".", "format", "(", "\n", "type", "(", "dataset", ")", ")", ")", "\n", "\n", "", "self", ".", "interval", "=", "interval", "\n", "self", ".", "lock_dir", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.eval_hooks.DistEvalHook._barrier": [[39, 56], ["range", "range", "os.join", "os.join", "mmcv.dump", "os.exists", "os.exists", "os.join", "os.join", "os.join", "os.join", "os.remove", "os.remove", "os.remove", "os.remove", "time.sleep", "os.exists", "os.exists", "time.sleep"], "methods", ["None"], ["", "def", "_barrier", "(", "self", ",", "rank", ",", "world_size", ")", ":", "\n", "        ", "\"\"\"Due to some issues with `torch.distributed.barrier()`, we have to\n        implement this ugly barrier function.\n        \"\"\"", "\n", "if", "rank", "==", "0", ":", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "world_size", ")", ":", "\n", "                ", "tmp", "=", "osp", ".", "join", "(", "self", ".", "lock_dir", ",", "'{}.pkl'", ".", "format", "(", "i", ")", ")", "\n", "while", "not", "(", "osp", ".", "exists", "(", "tmp", ")", ")", ":", "\n", "                    ", "time", ".", "sleep", "(", "1", ")", "\n", "", "", "for", "i", "in", "range", "(", "1", ",", "world_size", ")", ":", "\n", "                ", "tmp", "=", "osp", ".", "join", "(", "self", ".", "lock_dir", ",", "'{}.pkl'", ".", "format", "(", "i", ")", ")", "\n", "os", ".", "remove", "(", "tmp", ")", "\n", "", "", "else", ":", "\n", "            ", "tmp", "=", "osp", ".", "join", "(", "self", ".", "lock_dir", ",", "'{}.pkl'", ".", "format", "(", "rank", ")", ")", "\n", "mmcv", ".", "dump", "(", "[", "]", ",", "tmp", ")", "\n", "while", "osp", ".", "exists", "(", "tmp", ")", ":", "\n", "                ", "time", ".", "sleep", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.eval_hooks.DistEvalHook.before_run": [[57, 63], ["os.join", "os.join", "os.exists", "os.exists", "mmcv.mkdir_or_exist", "shutil.rmtree"], "methods", ["None"], ["", "", "", "def", "before_run", "(", "self", ",", "runner", ")", ":", "\n", "        ", "self", ".", "lock_dir", "=", "osp", ".", "join", "(", "runner", ".", "work_dir", ",", "'.lock_map_hook'", ")", "\n", "if", "runner", ".", "rank", "==", "0", ":", "\n", "            ", "if", "osp", ".", "exists", "(", "self", ".", "lock_dir", ")", ":", "\n", "                ", "shutil", ".", "rmtree", "(", "self", ".", "lock_dir", ")", "\n", "", "mmcv", ".", "mkdir_or_exist", "(", "self", ".", "lock_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.eval_hooks.DistEvalHook.after_run": [[64, 67], ["shutil.rmtree"], "methods", ["None"], ["", "", "def", "after_run", "(", "self", ",", "runner", ")", ":", "\n", "        ", "if", "runner", ".", "rank", "==", "0", ":", "\n", "            ", "shutil", ".", "rmtree", "(", "self", ".", "lock_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.eval_hooks.DistEvalHook.after_train_epoch": [[68, 106], ["runner.model.eval", "mmcv.ProgressBar", "range", "eval_hooks.DistEvalHook._barrier", "eval_hooks.DistEvalHook.every_n_epochs", "len", "len", "range", "print", "eval_hooks.DistEvalHook._barrier", "range", "eval_hooks.DistEvalHook.evaluate", "os.join", "os.join", "mmcv.dump", "eval_hooks.DistEvalHook._barrier", "range", "mmcv.parallel.scatter", "torch.no_grad", "runner.model", "mmcv.ProgressBar.update", "os.join", "os.join", "mmcv.load", "range", "os.remove", "os.remove", "os.remove", "os.remove", "len", "mmcv.parallel.collate", "len", "torch.cuda.current_device"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.eval_hooks.KittiEvalmAPHook._barrier", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.eval_hooks.KittiEvalmAPHook._barrier", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.eval_hooks.KittiEvalmAPHook.evaluate", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.eval_hooks.KittiEvalmAPHook._barrier"], ["", "", "def", "after_train_epoch", "(", "self", ",", "runner", ")", ":", "\n", "        ", "if", "not", "self", ".", "every_n_epochs", "(", "runner", ",", "self", ".", "interval", ")", ":", "\n", "            ", "return", "\n", "", "runner", ".", "model", ".", "eval", "(", ")", "\n", "results", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "self", ".", "dataset", ")", ")", "]", "\n", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "self", ".", "dataset", ")", ")", "\n", "for", "idx", "in", "range", "(", "runner", ".", "rank", ",", "len", "(", "self", ".", "dataset", ")", ",", "runner", ".", "world_size", ")", ":", "\n", "            ", "data", "=", "self", ".", "dataset", "[", "idx", "]", "\n", "data_gpu", "=", "scatter", "(", "\n", "collate", "(", "[", "data", "]", ",", "samples_per_gpu", "=", "1", ")", ",", "\n", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", ")", "[", "0", "]", "\n", "\n", "# compute output", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "result", "=", "runner", ".", "model", "(", "\n", "return_loss", "=", "False", ",", "rescale", "=", "True", ",", "**", "data_gpu", ")", "\n", "", "results", "[", "idx", "]", "=", "result", "\n", "\n", "batch_size", "=", "runner", ".", "world_size", "\n", "for", "_", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "prog_bar", ".", "update", "(", ")", "\n", "\n", "", "", "if", "runner", ".", "rank", "==", "0", ":", "\n", "            ", "print", "(", "'\\n'", ")", "\n", "self", ".", "_barrier", "(", "runner", ".", "rank", ",", "runner", ".", "world_size", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "runner", ".", "world_size", ")", ":", "\n", "                ", "tmp_file", "=", "osp", ".", "join", "(", "runner", ".", "work_dir", ",", "'temp_{}.pkl'", ".", "format", "(", "i", ")", ")", "\n", "tmp_results", "=", "mmcv", ".", "load", "(", "tmp_file", ")", "\n", "for", "idx", "in", "range", "(", "i", ",", "len", "(", "results", ")", ",", "runner", ".", "world_size", ")", ":", "\n", "                    ", "results", "[", "idx", "]", "=", "tmp_results", "[", "idx", "]", "\n", "", "os", ".", "remove", "(", "tmp_file", ")", "\n", "", "self", ".", "evaluate", "(", "runner", ",", "results", ")", "\n", "", "else", ":", "\n", "            ", "tmp_file", "=", "osp", ".", "join", "(", "runner", ".", "work_dir", ",", "\n", "'temp_{}.pkl'", ".", "format", "(", "runner", ".", "rank", ")", ")", "\n", "mmcv", ".", "dump", "(", "results", ",", "tmp_file", ")", "\n", "self", ".", "_barrier", "(", "runner", ".", "rank", ",", "runner", ".", "world_size", ")", "\n", "", "self", ".", "_barrier", "(", "runner", ".", "rank", ",", "runner", ".", "world_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.eval_hooks.DistEvalHook.evaluate": [[107, 109], ["None"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.eval_hooks.CocoDistEvalRecallHook.__init__": [[113, 120], ["numpy.arange", "eval_hooks.DistEvalHook.__init__", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "dataset", ",", "\n", "proposal_nums", "=", "(", "100", ",", "300", ",", "1000", ")", ",", "\n", "iou_thrs", "=", "np", ".", "arange", "(", "0.5", ",", "0.96", ",", "0.05", ")", ")", ":", "\n", "        ", "super", "(", "CocoDistEvalRecallHook", ",", "self", ")", ".", "__init__", "(", "dataset", ")", "\n", "self", ".", "proposal_nums", "=", "np", ".", "array", "(", "proposal_nums", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "self", ".", "iou_thrs", "=", "np", ".", "array", "(", "iou_thrs", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.eval_hooks.CocoDistEvalRecallHook.evaluate": [[121, 129], ["coco_utils.fast_eval_recall", "enumerate"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.coco_utils.fast_eval_recall"], ["", "def", "evaluate", "(", "self", ",", "runner", ",", "results", ")", ":", "\n", "# the official coco evaluation is too slow, here we use our own", "\n", "# implementation instead, which may get slightly different results", "\n", "        ", "ar", "=", "fast_eval_recall", "(", "results", ",", "self", ".", "dataset", ".", "coco", ",", "self", ".", "proposal_nums", ",", "\n", "self", ".", "iou_thrs", ")", "\n", "for", "i", ",", "num", "in", "enumerate", "(", "self", ".", "proposal_nums", ")", ":", "\n", "            ", "runner", ".", "log_buffer", ".", "output", "[", "'AR@{}'", ".", "format", "(", "num", ")", "]", "=", "ar", "[", "i", "]", "\n", "", "runner", ".", "log_buffer", ".", "ready", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.eval_hooks.CocoDistEvalmAPHook.evaluate": [[132, 152], ["os.join", "os.join", "coco_utils.results2json", "cocoGt.loadRes", "cocoGt.getImgIds", "os.remove", "os.remove", "os.remove", "os.remove", "pycocotools.cocoeval.COCOeval", "pycocotools.cocoeval.COCOeval.evaluate", "pycocotools.cocoeval.COCOeval.accumulate", "pycocotools.cocoeval.COCOeval.summarize"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.coco_utils.results2json", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.eval_hooks.KittiEvalmAPHook.evaluate"], ["    ", "def", "evaluate", "(", "self", ",", "runner", ",", "results", ")", ":", "\n", "        ", "tmp_file", "=", "osp", ".", "join", "(", "runner", ".", "work_dir", ",", "'temp_0.json'", ")", "\n", "results2json", "(", "self", ".", "dataset", ",", "results", ",", "tmp_file", ")", "\n", "\n", "res_types", "=", "[", "'bbox'", ",", "\n", "'segm'", "]", "if", "runner", ".", "model", ".", "module", ".", "with_mask", "else", "[", "'bbox'", "]", "\n", "cocoGt", "=", "self", ".", "dataset", ".", "coco", "\n", "cocoDt", "=", "cocoGt", ".", "loadRes", "(", "tmp_file", ")", "\n", "imgIds", "=", "cocoGt", ".", "getImgIds", "(", ")", "\n", "for", "res_type", "in", "res_types", ":", "\n", "            ", "iou_type", "=", "res_type", "\n", "cocoEval", "=", "COCOeval", "(", "cocoGt", ",", "cocoDt", ",", "iou_type", ")", "\n", "cocoEval", ".", "params", ".", "imgIds", "=", "imgIds", "\n", "cocoEval", ".", "evaluate", "(", ")", "\n", "cocoEval", ".", "accumulate", "(", ")", "\n", "cocoEval", ".", "summarize", "(", ")", "\n", "field", "=", "'{}_mAP'", ".", "format", "(", "res_type", ")", "\n", "runner", ".", "log_buffer", ".", "output", "[", "field", "]", "=", "cocoEval", ".", "stats", "[", "0", "]", "\n", "", "runner", ".", "log_buffer", ".", "ready", "=", "True", "\n", "os", ".", "remove", "(", "tmp_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.eval_hooks.DistEvalmAPHook.evaluate": [[155, 189], ["range", "mean_ap.eval_map", "len", "eval_hooks.DistEvalmAPHook.dataset.get_ann_info", "gt_bboxes.append", "gt_labels.append", "hasattr", "numpy.concatenate", "gt_ignore.append", "numpy.vstack", "numpy.concatenate", "numpy.zeros", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.mean_ap.eval_map", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.xml_style.XMLDataset.get_ann_info"], ["    ", "def", "evaluate", "(", "self", ",", "runner", ",", "results", ")", ":", "\n", "        ", "gt_bboxes", "=", "[", "]", "\n", "gt_labels", "=", "[", "]", "\n", "gt_ignore", "=", "[", "]", "if", "self", ".", "dataset", ".", "with_crowd", "else", "None", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "dataset", ")", ")", ":", "\n", "            ", "ann", "=", "self", ".", "dataset", ".", "get_ann_info", "(", "i", ")", "\n", "bboxes", "=", "ann", "[", "'bboxes'", "]", "\n", "labels", "=", "ann", "[", "'labels'", "]", "\n", "if", "gt_ignore", "is", "not", "None", ":", "\n", "                ", "ignore", "=", "np", ".", "concatenate", "(", "[", "\n", "np", ".", "zeros", "(", "bboxes", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "bool", ")", ",", "\n", "np", ".", "ones", "(", "ann", "[", "'bboxes_ignore'", "]", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "]", ")", "\n", "gt_ignore", ".", "append", "(", "ignore", ")", "\n", "bboxes", "=", "np", ".", "vstack", "(", "[", "bboxes", ",", "ann", "[", "'bboxes_ignore'", "]", "]", ")", "\n", "labels", "=", "np", ".", "concatenate", "(", "[", "labels", ",", "ann", "[", "'labels_ignore'", "]", "]", ")", "\n", "", "gt_bboxes", ".", "append", "(", "bboxes", ")", "\n", "gt_labels", ".", "append", "(", "labels", ")", "\n", "# If the dataset is VOC2007, then use 11 points mAP evaluation.", "\n", "", "if", "hasattr", "(", "self", ".", "dataset", ",", "'year'", ")", "and", "self", ".", "dataset", ".", "year", "==", "2007", ":", "\n", "            ", "ds_name", "=", "'voc07'", "\n", "", "else", ":", "\n", "            ", "ds_name", "=", "self", ".", "dataset", ".", "CLASSES", "\n", "", "mean_ap", ",", "eval_results", "=", "eval_map", "(", "\n", "results", ",", "\n", "gt_bboxes", ",", "\n", "gt_labels", ",", "\n", "gt_ignore", "=", "gt_ignore", ",", "\n", "scale_ranges", "=", "None", ",", "\n", "iou_thr", "=", "0.5", ",", "\n", "dataset", "=", "ds_name", ",", "\n", "print_summary", "=", "True", ")", "\n", "runner", ".", "log_buffer", ".", "output", "[", "'mAP'", "]", "=", "mean_ap", "\n", "runner", ".", "log_buffer", ".", "ready", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.eval_hooks.KittiEvalmAPHook.__init__": [[191, 205], ["isinstance", "torch.utils.data.DataLoader", "isinstance", "mmdet.datasets.utils.get_dataset", "TypeError", "type"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.utils.get_dataset"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "interval", "=", "5", ")", ":", "\n", "        ", "if", "isinstance", "(", "dataset", ",", "Dataset", ")", ":", "\n", "            ", "self", ".", "dataset", "=", "dataset", "\n", "", "elif", "isinstance", "(", "dataset", ",", "dict", ")", ":", "\n", "            ", "self", ".", "dataset", "=", "utils", ".", "get_dataset", "(", "dataset", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "'dataset must be a Dataset object or a dict, not {}'", ".", "format", "(", "\n", "type", "(", "dataset", ")", ")", ")", "\n", "\n", "", "self", ".", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "self", ".", "dataset", ",", "batch_size", "=", "4", ",", "num_workers", "=", "2", ",", "shuffle", "=", "False", ",", "collate_fn", "=", "utils", ".", "merge_second_batch", ")", "\n", "self", ".", "interval", "=", "interval", "\n", "self", ".", "lock_dir", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.eval_hooks.KittiEvalmAPHook._barrier": [[206, 223], ["range", "range", "os.join", "os.join", "mmcv.dump", "os.exists", "os.exists", "os.join", "os.join", "os.join", "os.join", "os.remove", "os.remove", "os.remove", "os.remove", "time.sleep", "os.exists", "os.exists", "time.sleep"], "methods", ["None"], ["", "def", "_barrier", "(", "self", ",", "rank", ",", "world_size", ")", ":", "\n", "        ", "\"\"\"Due to some issues with `torch.distributed.barrier()`, we have to\n        implement this ugly barrier function.\n        \"\"\"", "\n", "if", "rank", "==", "0", ":", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "world_size", ")", ":", "\n", "                ", "tmp", "=", "osp", ".", "join", "(", "self", ".", "lock_dir", ",", "'{}.pkl'", ".", "format", "(", "i", ")", ")", "\n", "while", "not", "(", "osp", ".", "exists", "(", "tmp", ")", ")", ":", "\n", "                    ", "time", ".", "sleep", "(", "1", ")", "\n", "", "", "for", "i", "in", "range", "(", "1", ",", "world_size", ")", ":", "\n", "                ", "tmp", "=", "osp", ".", "join", "(", "self", ".", "lock_dir", ",", "'{}.pkl'", ".", "format", "(", "i", ")", ")", "\n", "os", ".", "remove", "(", "tmp", ")", "\n", "", "", "else", ":", "\n", "            ", "tmp", "=", "osp", ".", "join", "(", "self", ".", "lock_dir", ",", "'{}.pkl'", ".", "format", "(", "rank", ")", ")", "\n", "mmcv", ".", "dump", "(", "[", "]", ",", "tmp", ")", "\n", "while", "osp", ".", "exists", "(", "tmp", ")", ":", "\n", "                ", "time", ".", "sleep", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.eval_hooks.KittiEvalmAPHook.before_run": [[224, 235], ["os.join", "os.join", "os.exists", "os.exists", "mmcv.mkdir_or_exist", "shutil.rmtree"], "methods", ["None"], ["", "", "", "def", "before_run", "(", "self", ",", "runner", ")", ":", "\n", "# self.det_dir = osp.join(runner.work_dir, '.det_2')", "\n", "# if osp.exists(self.det_dir):", "\n", "#     shutil.rmtree(self.det_dir)", "\n", "# mmcv.mkdir_or_exist(self.det_dir)", "\n", "\n", "        ", "self", ".", "lock_dir", "=", "osp", ".", "join", "(", "runner", ".", "work_dir", ",", "'.lock_map_hook'", ")", "\n", "if", "runner", ".", "rank", "==", "0", ":", "\n", "            ", "if", "osp", ".", "exists", "(", "self", ".", "lock_dir", ")", ":", "\n", "                ", "shutil", ".", "rmtree", "(", "self", ".", "lock_dir", ")", "\n", "", "mmcv", ".", "mkdir_or_exist", "(", "self", ".", "lock_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.eval_hooks.KittiEvalmAPHook.after_run": [[236, 240], ["shutil.rmtree"], "methods", ["None"], ["", "", "def", "after_run", "(", "self", ",", "runner", ")", ":", "\n", "#shutil.rmtree(self.det_dir)", "\n", "        ", "if", "runner", ".", "rank", "==", "0", ":", "\n", "            ", "shutil", ".", "rmtree", "(", "self", ".", "lock_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.eval_hooks.KittiEvalmAPHook.after_train_epoch": [[241, 315], ["eval_hooks.KittiEvalmAPHook.every_n_epochs", "runner.model.eval", "mmcv.ProgressBar", "class_names.get_classes.get_classes", "enumerate", "eval_hooks.KittiEvalmAPHook._barrier", "eval_hooks.KittiEvalmAPHook.evaluate", "eval_hooks.KittiEvalmAPHook._barrier", "len", "len", "range", "torch.no_grad", "runner.model", "numpy.array", "mmcv.ProgressBar.update", "tools.get_start_result_anno", "zip", "results.append", "numpy.minimum", "numpy.maximum", "anno[].append", "anno[].append", "anno[].append", "anno[].append", "anno[].append", "anno[].append", "anno[].append", "anno[].append", "anno[].append", "results.append", "results.append", "tools.empty_result_anno", "numpy.stack", "tools.empty_result_anno", "tools.get_start_result_anno.items"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.get_classes", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.eval_hooks.KittiEvalmAPHook._barrier", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.eval_hooks.KittiEvalmAPHook.evaluate", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.eval_hooks.KittiEvalmAPHook._barrier", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.get_start_result_anno", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.empty_result_anno", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.empty_result_anno"], ["", "", "def", "after_train_epoch", "(", "self", ",", "runner", ")", ":", "\n", "        ", "if", "not", "self", ".", "every_n_epochs", "(", "runner", ",", "self", ".", "interval", ")", ":", "\n", "            ", "return", "\n", "", "if", "runner", ".", "rank", "==", "0", ":", "\n", "            ", "runner", ".", "model", ".", "eval", "(", ")", "\n", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "self", ".", "dataset", ")", ")", "\n", "class_names", "=", "get_classes", "(", "'kitti'", ")", "\n", "results", "=", "[", "]", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "self", ".", "dataloader", ")", ":", "\n", "# compute output", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "result", "=", "runner", ".", "model", "(", "\n", "return_loss", "=", "False", ",", "**", "data", ")", "\n", "\n", "", "image_shape", "=", "(", "375", ",", "1242", ")", "\n", "\n", "for", "re", "in", "result", ":", "\n", "                    ", "img_idx", "=", "re", "[", "'image_idx'", "]", "\n", "if", "re", "[", "'bbox'", "]", "is", "not", "None", ":", "\n", "                        ", "box2d", "=", "re", "[", "'bbox'", "]", "\n", "box3d", "=", "re", "[", "'box3d_camera'", "]", "\n", "labels", "=", "re", "[", "'label_preds'", "]", "\n", "scores", "=", "re", "[", "'scores'", "]", "\n", "alphas", "=", "re", "[", "'alphas'", "]", "\n", "\n", "anno", "=", "kitti", ".", "get_start_result_anno", "(", ")", "\n", "num_example", "=", "0", "\n", "for", "bbox2d", ",", "bbox3d", ",", "label", ",", "score", ",", "alpha", "in", "zip", "(", "box2d", ",", "box3d", ",", "labels", ",", "scores", ",", "alphas", ")", ":", "\n", "\n", "                            ", "if", "bbox2d", "[", "0", "]", ">", "image_shape", "[", "1", "]", "or", "bbox2d", "[", "1", "]", ">", "image_shape", "[", "0", "]", ":", "\n", "                                ", "continue", "\n", "", "if", "bbox2d", "[", "2", "]", "<", "0", "or", "bbox2d", "[", "3", "]", "<", "0", ":", "\n", "                                ", "continue", "\n", "\n", "", "bbox2d", "[", "2", ":", "]", "=", "np", ".", "minimum", "(", "bbox2d", "[", "2", ":", "]", ",", "image_shape", "[", ":", ":", "-", "1", "]", ")", "\n", "bbox2d", "[", ":", "2", "]", "=", "np", ".", "maximum", "(", "bbox2d", "[", ":", "2", "]", ",", "[", "0", ",", "0", "]", ")", "\n", "\n", "anno", "[", "\"name\"", "]", ".", "append", "(", "class_names", "[", "label", "]", ")", "\n", "anno", "[", "\"truncated\"", "]", ".", "append", "(", "0.0", ")", "\n", "anno", "[", "\"occluded\"", "]", ".", "append", "(", "0", ")", "\n", "#anno[\"alpha\"].append(-10)", "\n", "anno", "[", "\"alpha\"", "]", ".", "append", "(", "alpha", ")", "\n", "anno", "[", "\"bbox\"", "]", ".", "append", "(", "bbox2d", ")", "\n", "\n", "#anno[\"dimensions\"].append(np.array([-1,-1,-1]))", "\n", "anno", "[", "\"dimensions\"", "]", ".", "append", "(", "bbox3d", "[", "[", "3", ",", "4", ",", "5", "]", "]", ")", "\n", "#anno[\"location\"].append(np.array([-1000,-1000,-1000]))", "\n", "anno", "[", "\"location\"", "]", ".", "append", "(", "bbox3d", "[", ":", "3", "]", ")", "\n", "#anno[\"rotation_y\"].append(-10)", "\n", "anno", "[", "\"rotation_y\"", "]", ".", "append", "(", "bbox3d", "[", "6", "]", ")", "\n", "\n", "anno", "[", "\"score\"", "]", ".", "append", "(", "score", ")", "\n", "num_example", "+=", "1", "\n", "", "if", "num_example", "!=", "0", ":", "\n", "                            ", "anno", "=", "{", "n", ":", "np", ".", "stack", "(", "v", ")", "for", "n", ",", "v", "in", "anno", ".", "items", "(", ")", "}", "\n", "results", ".", "append", "(", "anno", ")", "\n", "", "else", ":", "\n", "                            ", "results", ".", "append", "(", "kitti", ".", "empty_result_anno", "(", ")", ")", "\n", "", "", "else", ":", "\n", "                        ", "results", ".", "append", "(", "kitti", ".", "empty_result_anno", "(", ")", ")", "\n", "\n", "", "num_example", "=", "results", "[", "-", "1", "]", "[", "\"name\"", "]", ".", "shape", "[", "0", "]", "\n", "results", "[", "-", "1", "]", "[", "\"image_idx\"", "]", "=", "np", ".", "array", "(", "\n", "[", "img_idx", "]", "*", "num_example", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n", "\n", "", "batch_size", "=", "len", "(", "data", "[", "'sample_idx'", "]", ")", "\n", "for", "_", "in", "range", "(", "batch_size", ")", ":", "\n", "                    ", "prog_bar", ".", "update", "(", ")", "\n", "\n", "", "", "self", ".", "_barrier", "(", "runner", ".", "rank", ",", "runner", ".", "world_size", ")", "\n", "self", ".", "evaluate", "(", "runner", ",", "results", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_barrier", "(", "runner", ".", "rank", ",", "runner", ".", "world_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.eval_hooks.KittiEvalmAPHook.evaluate": [[316, 325], ["tools.get_label_annos", "mmdet.core.evaluation.kitti_eval.get_official_eval_result", "runner.logger.info"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.get_label_annos", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.evaluation.kitti_eval.get_official_eval_result"], ["", "", "def", "evaluate", "(", "self", ",", "runner", ",", "results", ")", ":", "\n", "\n", "        ", "gt_annos", "=", "kitti", ".", "get_label_annos", "(", "self", ".", "dataset", ".", "label_prefix", ",", "self", ".", "dataset", ".", "sample_ids", ")", "\n", "\n", "result", "=", "get_official_eval_result", "(", "gt_annos", ",", "results", ",", "current_classes", "=", "0", ")", "\n", "\n", "runner", ".", "logger", ".", "info", "(", "result", ")", "\n", "\n", "runner", ".", "log_buffer", ".", "ready", "=", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.loss.losses.weighted_nll_loss": [[6, 11], ["torch.nll_loss", "max", "torch.sum().float().item", "torch.sum().float().item", "torch.sum", "torch.sum", "torch.sum().float", "torch.sum().float", "torch.sum", "torch.sum"], "function", ["None"], ["def", "weighted_nll_loss", "(", "pred", ",", "label", ",", "weight", ",", "avg_factor", "=", "None", ")", ":", "\n", "    ", "if", "avg_factor", "is", "None", ":", "\n", "        ", "avg_factor", "=", "max", "(", "torch", ".", "sum", "(", "weight", ">", "0", ")", ".", "float", "(", ")", ".", "item", "(", ")", ",", "1.", ")", "\n", "", "raw", "=", "F", ".", "nll_loss", "(", "pred", ",", "label", ",", "reduction", "=", "'none'", ")", "\n", "return", "torch", ".", "sum", "(", "raw", "*", "weight", ")", "[", "None", "]", "/", "avg_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.loss.losses.weighted_cross_entropy": [[13, 21], ["torch.cross_entropy", "max", "torch.sum().float().item", "torch.sum().float().item", "torch.sum", "torch.sum", "torch.sum().float", "torch.sum().float", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "weighted_cross_entropy", "(", "pred", ",", "label", ",", "weight", ",", "avg_factor", "=", "None", ",", "reduce", "=", "True", ")", ":", "\n", "    ", "if", "avg_factor", "is", "None", ":", "\n", "        ", "avg_factor", "=", "max", "(", "torch", ".", "sum", "(", "weight", ">", "0", ")", ".", "float", "(", ")", ".", "item", "(", ")", ",", "1.", ")", "\n", "", "raw", "=", "F", ".", "cross_entropy", "(", "pred", ",", "label", ",", "reduction", "=", "'none'", ")", "\n", "if", "reduce", ":", "\n", "        ", "return", "torch", ".", "sum", "(", "raw", "*", "weight", ")", "[", "None", "]", "/", "avg_factor", "\n", "", "else", ":", "\n", "        ", "return", "raw", "*", "weight", "/", "avg_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.loss.losses.weighted_binary_cross_entropy": [[23, 29], ["max", "torch.sum().float().item", "torch.sum().float().item", "torch.binary_cross_entropy_with_logits", "label.float", "weight.float", "torch.sum().float", "torch.sum().float", "torch.sum", "torch.sum"], "function", ["None"], ["", "", "def", "weighted_binary_cross_entropy", "(", "pred", ",", "label", ",", "weight", ",", "avg_factor", "=", "None", ")", ":", "\n", "    ", "if", "avg_factor", "is", "None", ":", "\n", "        ", "avg_factor", "=", "max", "(", "torch", ".", "sum", "(", "weight", ">", "0", ")", ".", "float", "(", ")", ".", "item", "(", ")", ",", "1.", ")", "\n", "", "return", "F", ".", "binary_cross_entropy_with_logits", "(", "\n", "pred", ",", "label", ".", "float", "(", ")", ",", "weight", ".", "float", "(", ")", ",", "\n", "reduction", "=", "'sum'", ")", "[", "None", "]", "/", "avg_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.loss.losses.sigmoid_focal_loss": [[31, 52], ["pred.sigmoid", "target.type_as.type_as", "torch._Reduction.get_enum", "pt.pow", "torch.binary_cross_entropy_with_logits", "loss.mean", "loss.sum"], "function", ["None"], ["", "def", "sigmoid_focal_loss", "(", "pred", ",", "\n", "target", ",", "\n", "weight", ",", "\n", "gamma", "=", "2.0", ",", "\n", "alpha", "=", "0.25", ",", "\n", "reduction", "=", "'mean'", ")", ":", "\n", "    ", "pred_sigmoid", "=", "pred", ".", "sigmoid", "(", ")", "\n", "target", "=", "target", ".", "type_as", "(", "pred", ")", "\n", "pt", "=", "(", "1", "-", "pred_sigmoid", ")", "*", "target", "+", "pred_sigmoid", "*", "(", "1", "-", "target", ")", "\n", "weight", "=", "(", "alpha", "*", "target", "+", "(", "1", "-", "alpha", ")", "*", "(", "1", "-", "target", ")", ")", "*", "weight", "\n", "weight", "=", "weight", "*", "pt", ".", "pow", "(", "gamma", ")", "\n", "loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "\n", "pred", ",", "target", ",", "reduction", "=", "'none'", ")", "*", "weight", "\n", "reduction_enum", "=", "F", ".", "_Reduction", ".", "get_enum", "(", "reduction", ")", "\n", "# none: 0, mean:1, sum: 2", "\n", "if", "reduction_enum", "==", "0", ":", "\n", "        ", "return", "loss", "\n", "", "elif", "reduction_enum", "==", "1", ":", "\n", "        ", "return", "loss", ".", "mean", "(", ")", "\n", "", "elif", "reduction_enum", "==", "2", ":", "\n", "        ", "return", "loss", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.loss.losses.weighted_sigmoid_focal_loss": [[54, 66], ["losses.sigmoid_focal_loss", "torch.sum().float().item", "torch.sum().float().item", "torch.sum().float", "torch.sum().float", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.loss.losses.sigmoid_focal_loss"], ["", "", "def", "weighted_sigmoid_focal_loss", "(", "pred", ",", "\n", "target", ",", "\n", "weight", ",", "\n", "gamma", "=", "2.0", ",", "\n", "alpha", "=", "0.25", ",", "\n", "avg_factor", "=", "None", ",", "\n", "num_classes", "=", "80", ")", ":", "\n", "    ", "if", "avg_factor", "is", "None", ":", "\n", "        ", "avg_factor", "=", "torch", ".", "sum", "(", "weight", ">", "0", ")", ".", "float", "(", ")", ".", "item", "(", ")", "/", "num_classes", "+", "1e-6", "\n", "", "return", "sigmoid_focal_loss", "(", "\n", "pred", ",", "target", ",", "weight", ",", "gamma", "=", "gamma", ",", "alpha", "=", "alpha", ",", "\n", "reduction", "=", "'sum'", ")", "[", "None", "]", "/", "avg_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.loss.losses.mask_cross_entropy": [[68, 74], ["torch.arange", "torch.arange", "pred[].squeeze", "pred.size", "torch.binary_cross_entropy_with_logits"], "function", ["None"], ["", "def", "mask_cross_entropy", "(", "pred", ",", "target", ",", "label", ")", ":", "\n", "    ", "num_rois", "=", "pred", ".", "size", "(", ")", "[", "0", "]", "\n", "inds", "=", "torch", ".", "arange", "(", "0", ",", "num_rois", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "pred", ".", "device", ")", "\n", "pred_slice", "=", "pred", "[", "inds", ",", "label", "]", ".", "squeeze", "(", "1", ")", "\n", "return", "F", ".", "binary_cross_entropy_with_logits", "(", "\n", "pred_slice", ",", "target", ",", "reduction", "=", "'mean'", ")", "[", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.loss.losses.smooth_l1_loss": [[76, 90], ["torch.abs", "torch.abs", "torch.where", "torch.where", "torch._Reduction.get_enum", "pred.size", "target.size", "target.numel", "torch.where.sum", "pred.numel", "torch.where.sum"], "function", ["None"], ["", "def", "smooth_l1_loss", "(", "pred", ",", "target", ",", "beta", "=", "1.0", ",", "reduction", "=", "'mean'", ")", ":", "\n", "    ", "assert", "beta", ">", "0", "\n", "assert", "pred", ".", "size", "(", ")", "==", "target", ".", "size", "(", ")", "and", "target", ".", "numel", "(", ")", ">", "0", "\n", "diff", "=", "torch", ".", "abs", "(", "pred", "-", "target", ")", "\n", "loss", "=", "torch", ".", "where", "(", "diff", "<", "beta", ",", "0.5", "*", "diff", "*", "diff", "/", "beta", ",", "\n", "diff", "-", "0.5", "*", "beta", ")", "\n", "reduction_enum", "=", "F", ".", "_Reduction", ".", "get_enum", "(", "reduction", ")", "\n", "# none: 0, mean:1, sum: 2", "\n", "if", "reduction_enum", "==", "0", ":", "\n", "        ", "return", "loss", "\n", "", "elif", "reduction_enum", "==", "1", ":", "\n", "        ", "return", "loss", ".", "sum", "(", ")", "/", "pred", ".", "numel", "(", ")", "\n", "", "elif", "reduction_enum", "==", "2", ":", "\n", "        ", "return", "loss", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.loss.losses.weighted_smoothl1": [[92, 97], ["losses.smooth_l1_loss", "torch.sum", "torch.sum", "torch.sum().float().item", "torch.sum().float().item", "torch.sum().float", "torch.sum().float", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.loss.losses.smooth_l1_loss"], ["", "", "def", "weighted_smoothl1", "(", "pred", ",", "target", ",", "weight", ",", "beta", "=", "1.0", ",", "avg_factor", "=", "None", ")", ":", "\n", "    ", "if", "avg_factor", "is", "None", ":", "\n", "        ", "avg_factor", "=", "torch", ".", "sum", "(", "weight", ">", "0", ")", ".", "float", "(", ")", ".", "item", "(", ")", "/", "4", "+", "1e-6", "\n", "", "loss", "=", "smooth_l1_loss", "(", "pred", ",", "target", ",", "beta", ",", "reduction", "=", "'none'", ")", "\n", "return", "torch", ".", "sum", "(", "loss", "*", "weight", ")", "[", "None", "]", "/", "avg_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.loss.losses.l1_loss": [[98, 109], ["torch.abs", "torch.abs", "torch._Reduction.get_enum", "pred.size", "target.size", "target.numel", "torch.abs.sum", "pred.numel", "torch.abs.sum"], "function", ["None"], ["", "def", "l1_loss", "(", "pred", ",", "target", ",", "reduction", "=", "'mean'", ")", ":", "\n", "    ", "assert", "pred", ".", "size", "(", ")", "==", "target", ".", "size", "(", ")", "and", "target", ".", "numel", "(", ")", ">", "0", "\n", "loss", "=", "torch", ".", "abs", "(", "pred", "-", "target", ")", "\n", "reduction_enum", "=", "F", ".", "_Reduction", ".", "get_enum", "(", "reduction", ")", "\n", "# none: 0, mean:1, sum: 2", "\n", "if", "reduction_enum", "==", "0", ":", "\n", "        ", "return", "loss", "\n", "", "elif", "reduction_enum", "==", "1", ":", "\n", "        ", "return", "loss", ".", "sum", "(", ")", "/", "pred", ".", "numel", "(", ")", "\n", "", "elif", "reduction_enum", "==", "2", ":", "\n", "        ", "return", "loss", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.loss.losses.weighted_l1": [[110, 115], ["losses.l1_loss", "torch.sum", "torch.sum", "torch.sum().float().item", "torch.sum().float().item", "torch.sum().float", "torch.sum().float", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.loss.losses.l1_loss"], ["", "", "def", "weighted_l1", "(", "pred", ",", "target", ",", "weight", ",", "avg_factor", "=", "None", ")", ":", "\n", "    ", "if", "avg_factor", "is", "None", ":", "\n", "        ", "avg_factor", "=", "torch", ".", "sum", "(", "weight", ">", "0", ")", ".", "float", "(", ")", ".", "item", "(", ")", "/", "4", "+", "1e-6", "\n", "", "loss", "=", "l1_loss", "(", "pred", ",", "target", ",", "reduction", "=", "'none'", ")", "\n", "return", "torch", ".", "sum", "(", "loss", "*", "weight", ")", "[", "None", "]", "/", "avg_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.loss.losses.accuracy": [[116, 133], ["isinstance", "max", "pred.topk", "pred_label.t.t", "pred_label.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "pred.size", "correct[].view"], "function", ["None"], ["", "def", "accuracy", "(", "pred", ",", "target", ",", "topk", "=", "1", ")", ":", "\n", "    ", "if", "isinstance", "(", "topk", ",", "int", ")", ":", "\n", "        ", "topk", "=", "(", "topk", ",", ")", "\n", "return_single", "=", "True", "\n", "", "else", ":", "\n", "        ", "return_single", "=", "False", "\n", "\n", "", "maxk", "=", "max", "(", "topk", ")", "\n", "_", ",", "pred_label", "=", "pred", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred_label", "=", "pred_label", ".", "t", "(", ")", "\n", "correct", "=", "pred_label", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred_label", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "pred", ".", "size", "(", "0", ")", ")", ")", "\n", "", "return", "res", "[", "0", "]", "if", "return_single", "else", "res", "", "", ""]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.transforms.rbbox3d2delta": [[7, 20], ["torch.split", "torch.split", "torch.sqrt", "torch.log", "torch.log", "torch.log", "torch.cat"], "function", ["None"], ["\n", "class", "ImageTransform", "(", "object", ")", ":", "\n", "    ", "\"\"\"Preprocess an image.\n\n    1. rescale the image to expected size\n    2. normalize the image\n    3. flip the image (if needed)\n    4. pad the image (if needed)\n    5. transpose to (c, h, w)\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "\n", "mean", "=", "(", "0", ",", "0", ",", "0", ")", ",", "\n", "std", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.transforms.delta2rbbox3d": [[21, 35], ["torch.split", "torch.split", "torch.sqrt", "torch.cat", "torch.exp", "torch.exp", "torch.exp"], "function", ["None"], ["to_rgb", "=", "True", ",", "\n", "size_divisor", "=", "None", ")", ":", "\n", "        ", "self", ".", "mean", "=", "np", ".", "array", "(", "mean", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "std", "=", "np", ".", "array", "(", "std", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "to_rgb", "=", "to_rgb", "\n", "self", ".", "size_divisor", "=", "size_divisor", "\n", "\n", "", "def", "__call__", "(", "self", ",", "img", ",", "scale", ",", "flip", "=", "False", ")", ":", "\n", "        ", "img", ",", "scale_factor", "=", "mmcv", ".", "imrescale", "(", "img", ",", "scale", ",", "return_scale", "=", "True", ")", "\n", "img_shape", "=", "img", ".", "shape", "\n", "img", "=", "mmcv", ".", "imnormalize", "(", "img", ",", "self", ".", "mean", ",", "self", ".", "std", ",", "self", ".", "to_rgb", ")", "\n", "if", "flip", ":", "\n", "            ", "img", "=", "mmcv", ".", "imflip", "(", "img", ")", "\n", "", "if", "self", ".", "size_divisor", "is", "not", "None", ":", "\n", "            ", "img", "=", "mmcv", ".", "impad_to_multiple", "(", "img", ",", "self", ".", "size_divisor", ")", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.transforms.add_sin_difference": [[36, 43], ["torch.cat", "torch.cat", "torch.sin", "torch.cos", "torch.cos", "torch.sin"], "function", ["None"], ["pad_shape", "=", "img", ".", "shape", "\n", "", "else", ":", "\n", "            ", "pad_shape", "=", "img_shape", "\n", "", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "return", "img", ",", "img_shape", ",", "pad_shape", ",", "scale_factor", "\n", "\n", "\n", "", "", "def", "bbox_flip", "(", "bboxes", ",", "img_shape", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.transforms.bbox2delta": [[44, 70], ["proposals.float.float", "gt.float.float", "torch.log", "torch.log", "torch.stack", "deltas.sub_().div_.new_tensor().unsqueeze", "deltas.sub_().div_.new_tensor().unsqueeze", "deltas.sub_().div_.sub_().div_", "proposals.float.size", "gt.float.size", "deltas.sub_().div_.new_tensor", "deltas.sub_().div_.new_tensor", "deltas.sub_().div_.sub_"], "function", ["None"], ["    ", "\"\"\"Flip bboxes horizontally.\n\n    Args:\n        bboxes(ndarray): shape (..., 4*k)\n        img_shape(tuple): (height, width)\n    \"\"\"", "\n", "assert", "bboxes", ".", "shape", "[", "-", "1", "]", "%", "4", "==", "0", "\n", "w", "=", "img_shape", "[", "1", "]", "\n", "flipped", "=", "bboxes", ".", "copy", "(", ")", "\n", "flipped", "[", "...", ",", "0", ":", ":", "4", "]", "=", "w", "-", "bboxes", "[", "...", ",", "2", ":", ":", "4", "]", "-", "1", "\n", "flipped", "[", "...", ",", "2", ":", ":", "4", "]", "=", "w", "-", "bboxes", "[", "...", ",", "0", ":", ":", "4", "]", "-", "1", "\n", "return", "flipped", "\n", "\n", "\n", "", "class", "BboxTransform", "(", "object", ")", ":", "\n", "    ", "\"\"\"Preprocess gt bboxes.\n\n    1. rescale bboxes according to image size\n    2. flip bboxes (if needed)\n    3. pad the first dimension to `max_num_gts`\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "max_num_gts", "=", "None", ")", ":", "\n", "        ", "self", ".", "max_num_gts", "=", "max_num_gts", "\n", "\n", "", "def", "__call__", "(", "self", ",", "bboxes", ",", "img_shape", ",", "scale_factor", ",", "flip", "=", "False", ")", ":", "\n", "        ", "gt_bboxes", "=", "bboxes", "*", "scale_factor", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.transforms.delta2bbox": [[72, 107], ["deltas.new_tensor().repeat", "deltas.new_tensor().repeat", "numpy.abs", "dw.clamp.clamp", "dh.clamp.clamp", "torch.addcmul", "torch.addcmul", "torch.stack().view_as", "numpy.log", "dw.clamp.exp", "dh.clamp.exp", "x1.clamp.clamp", "y1.clamp.clamp", "x2.clamp.clamp", "y2.clamp.clamp", "deltas.new_tensor", "deltas.size", "deltas.new_tensor", "deltas.size", "torch.stack"], "function", ["None"], ["            ", "gt_bboxes", "=", "bbox_flip", "(", "gt_bboxes", ",", "img_shape", ")", "\n", "", "gt_bboxes", "[", ":", ",", "0", ":", ":", "2", "]", "=", "np", ".", "clip", "(", "gt_bboxes", "[", ":", ",", "0", ":", ":", "2", "]", ",", "0", ",", "img_shape", "[", "1", "]", ")", "\n", "gt_bboxes", "[", ":", ",", "1", ":", ":", "2", "]", "=", "np", ".", "clip", "(", "gt_bboxes", "[", ":", ",", "1", ":", ":", "2", "]", ",", "0", ",", "img_shape", "[", "0", "]", ")", "\n", "if", "self", ".", "max_num_gts", "is", "None", ":", "\n", "            ", "return", "gt_bboxes", "\n", "", "else", ":", "\n", "            ", "num_gts", "=", "gt_bboxes", ".", "shape", "[", "0", "]", "\n", "padded_bboxes", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_num_gts", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "padded_bboxes", "[", ":", "num_gts", ",", ":", "]", "=", "gt_bboxes", "\n", "return", "padded_bboxes", "\n", "\n", "\n", "", "", "", "class", "MaskTransform", "(", "object", ")", ":", "\n", "    ", "\"\"\"Preprocess masks.\n\n    1. resize masks to expected size and stack to a single array\n    2. flip the masks (if needed)\n    3. pad the masks (if needed)\n    \"\"\"", "\n", "\n", "def", "__call__", "(", "self", ",", "masks", ",", "pad_shape", ",", "scale_factor", ",", "flip", "=", "False", ")", ":", "\n", "        ", "masks", "=", "[", "\n", "mmcv", ".", "imrescale", "(", "mask", ",", "scale_factor", ",", "interpolation", "=", "'nearest'", ")", "\n", "for", "mask", "in", "masks", "\n", "]", "\n", "if", "flip", ":", "\n", "            ", "masks", "=", "[", "mask", "[", ":", ",", ":", ":", "-", "1", "]", "for", "mask", "in", "masks", "]", "\n", "", "padded_masks", "=", "[", "\n", "mmcv", ".", "impad", "(", "mask", ",", "pad_shape", "[", ":", "2", "]", ",", "pad_val", "=", "0", ")", "for", "mask", "in", "masks", "\n", "]", "\n", "padded_masks", "=", "np", ".", "stack", "(", "padded_masks", ",", "axis", "=", "0", ")", "\n", "return", "padded_masks", "\n", "\n", "\n", "", "", "class", "Numpy2Tensor", "(", "object", ")", ":", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.transforms.bbox_flip": [[109, 127], ["isinstance", "bboxes.clone", "isinstance", "mmcv.bbox_flip"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.transforms.bbox_flip"], ["        ", "pass", "\n", "\n", "", "def", "__call__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "if", "len", "(", "args", ")", "==", "1", ":", "\n", "            ", "return", "torch", ".", "from_numpy", "(", "args", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "tuple", "(", "[", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "array", ")", ")", "for", "array", "in", "args", "]", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.transforms.bbox_mapping": [[129, 135], ["transforms.bbox_flip"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.transforms.bbox_flip"], []], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.transforms.bbox_mapping_back": [[137, 142], ["transforms.bbox_flip"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.transforms.bbox_flip"], []], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.transforms.bbox2roi": [[144, 164], ["enumerate", "torch.cat", "rois_list.append", "bboxes.size", "bboxes.new_full", "torch.cat", "bboxes.new_zeros", "bboxes.size"], "function", ["None"], []], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.transforms.roi2bbox": [[166, 174], ["torch.unique", "rois[].cpu", "bbox_list.append", "img_id.item"], "function", ["None"], []], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.transforms.bbox2result": [[176, 195], ["bboxes.cpu().numpy.cpu().numpy", "labels.cpu().numpy.cpu().numpy", "numpy.zeros", "range", "bboxes.cpu().numpy.cpu", "labels.cpu().numpy.cpu", "range"], "function", ["None"], []], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.transforms.rbbox2roi": [[196, 217], ["enumerate", "torch.cat", "rois_list.append", "rois3d.size", "rois3d.new_full", "torch.cat", "rois3d.new_zeros", "rois3d.size"], "function", ["None"], []], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.transforms.tensor2points": [[218, 224], ["tensor.indices.float", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor", "torch.Tensor"], "function", ["None"], []], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.transforms.kitti_empty_results": [[225, 229], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.transforms.kitti_bbox2results": [[230, 269], ["transforms.kitti_empty_results", "mmdet.core.bbox3d.geometry.limit_period", "numpy.zeros_like", "mmdet.datasets.kitti_utils.project_velo_to_rect", "mmdet.core.bbox3d.geometry.center_to_corner_box3d", "mmdet.datasets.kitti_utils.project_rect_to_image", "numpy.min", "numpy.max", "numpy.concatenate", "len", "len", "numpy.zeros", "len", "numpy.arctan2"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.transforms.kitti_empty_results", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.limit_period", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti_utils.project_velo_to_rect", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.center_to_corner_box3d", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.datasets.kitti_utils.project_rect_to_image"], []], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.assignment.BBoxAssigner.__init__": [[26, 37], ["getattr"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "pos_iou_thr", ",", "\n", "neg_iou_thr", ",", "\n", "min_pos_iou", "=", ".0", ",", "\n", "ignore_iof_thr", "=", "-", "1", ",", "\n", "similarity_fn", "=", "'NearestIouSimilarity'", ")", ":", "\n", "        ", "self", ".", "pos_iou_thr", "=", "pos_iou_thr", "\n", "self", ".", "neg_iou_thr", "=", "neg_iou_thr", "\n", "self", ".", "min_pos_iou", "=", "min_pos_iou", "\n", "self", ".", "ignore_iof_thr", "=", "ignore_iof_thr", "\n", "self", ".", "iou_fn", "=", "getattr", "(", "iou3d_utils", ",", "similarity_fn", ")", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.assignment.BBoxAssigner.assign": [[38, 80], ["assignment.BBoxAssigner.iou_fn", "assignment.BBoxAssigner.assign_wrt_overlaps", "ValueError", "assignment.BBoxAssigner.iou_fn", "assignment.BBoxAssigner.max", "torch.nonzero().squeeze", "gt_bboxes_ignore.numel", "torch.nonzero().squeeze.numel", "torch.nonzero"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.assignment.BBoxAssigner.assign_wrt_overlaps"], ["", "def", "assign", "(", "self", ",", "bboxes", ",", "gt_bboxes", ",", "gt_bboxes_ignore", "=", "None", ",", "gt_labels", "=", "None", ")", ":", "\n", "        ", "\"\"\"Assign gt to bboxes.\n\n        This method assign a gt bbox to every bbox (proposal/anchor), each bbox\n        will be assigned with -1, 0, or a positive number. -1 means don't care,\n        0 means negative sample, positive number is the index (1-based) of\n        assigned gt.\n        The assignment is done in following steps, the order matters.\n\n        1. assign every bbox to -1\n        2. assign proposals whose iou with all gts < neg_iou_thr to 0\n        3. for each bbox, if the iou with its nearest gt >= pos_iou_thr,\n           assign it to that bbox\n        4. for each gt bbox, assign its nearest proposals (may be more than\n           one) to itself\n\n        Args:\n            bboxes (Tensor): Bounding boxes to be assigned, shape(n, 4).\n            gt_bboxes (Tensor): Groundtruth boxes, shape (k, 4).\n            gt_bboxes_ignore (Tensor, optional): Ground truth bboxes that are\n                labelled as `ignored`, e.g., crowd boxes in COCO.\n            gt_labels (Tensor, optional): Label of gt_bboxes, shape (k, ).\n\n        Returns:\n            :obj:`AssignResult`: The assign result.\n        \"\"\"", "\n", "if", "bboxes", ".", "shape", "[", "0", "]", "==", "0", "or", "gt_bboxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'No gt or bboxes'", ")", "\n", "\n", "", "overlaps", "=", "self", ".", "iou_fn", "(", "bboxes", ",", "gt_bboxes", ")", "\n", "if", "(", "self", ".", "ignore_iof_thr", ">", "0", ")", "and", "(", "gt_bboxes_ignore", "is", "not", "None", ")", "and", "(", "\n", "gt_bboxes_ignore", ".", "numel", "(", ")", ">", "0", ")", ":", "\n", "            ", "ignore_overlaps", "=", "self", ".", "iou_fn", "(", "\n", "bboxes", ",", "gt_bboxes_ignore", ",", "mode", "=", "'iof'", ")", "\n", "ignore_max_overlaps", ",", "_", "=", "ignore_overlaps", ".", "max", "(", "dim", "=", "1", ")", "\n", "ignore_bboxes_inds", "=", "torch", ".", "nonzero", "(", "\n", "ignore_max_overlaps", ">", "self", ".", "ignore_iof_thr", ")", ".", "squeeze", "(", ")", "\n", "if", "ignore_bboxes_inds", ".", "numel", "(", ")", ">", "0", ":", "\n", "                ", "overlaps", "[", "ignore_bboxes_inds", "[", ":", ",", "0", "]", ",", ":", "]", "=", "-", "1", "\n", "\n", "", "", "assign_result", "=", "self", ".", "assign_wrt_overlaps", "(", "overlaps", ",", "gt_labels", ")", "\n", "return", "assign_result", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.assignment.BBoxAssigner.assign_wrt_overlaps": [[81, 138], ["overlaps.new_full", "overlaps.max", "overlaps.max", "isinstance", "range", "assignment.AssignResult", "overlaps.numel", "ValueError", "overlaps.size", "overlaps.size", "overlaps.size", "isinstance", "overlaps.new_full.new_zeros", "torch.nonzero().squeeze", "torch.nonzero().squeeze.numel", "len", "torch.nonzero"], "methods", ["None"], ["", "def", "assign_wrt_overlaps", "(", "self", ",", "overlaps", ",", "gt_labels", "=", "None", ")", ":", "\n", "        ", "\"\"\"Assign w.r.t. the overlaps of bboxes with gts.\n\n        Args:\n            overlaps (Tensor): Overlaps between n bboxes and k gt_bboxes,\n                shape(n, k).\n            gt_labels (Tensor, optional): Labels of k gt_bboxes, shape (k, ).\n\n        Returns:\n            :obj:`AssignResult`: The assign result.\n        \"\"\"", "\n", "if", "overlaps", ".", "numel", "(", ")", "==", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'No gt or proposals'", ")", "\n", "\n", "", "num_bboxes", ",", "num_gts", "=", "overlaps", ".", "size", "(", "0", ")", ",", "overlaps", ".", "size", "(", "1", ")", "\n", "\n", "# 1. assign -1 by default", "\n", "assigned_gt_inds", "=", "overlaps", ".", "new_full", "(", "\n", "(", "num_bboxes", ",", ")", ",", "-", "1", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "assert", "overlaps", ".", "size", "(", ")", "==", "(", "num_bboxes", ",", "num_gts", ")", "\n", "# for each anchor, which gt best overlaps with it", "\n", "# for each anchor, the max iou of all gts", "\n", "max_overlaps", ",", "argmax_overlaps", "=", "overlaps", ".", "max", "(", "dim", "=", "1", ")", "\n", "# for each gt, which anchor best overlaps with it", "\n", "# for each gt, the max iou of all proposals", "\n", "gt_max_overlaps", ",", "gt_argmax_overlaps", "=", "overlaps", ".", "max", "(", "dim", "=", "0", ")", "\n", "\n", "# 2. assign negative: below", "\n", "if", "isinstance", "(", "self", ".", "neg_iou_thr", ",", "float", ")", ":", "\n", "            ", "assigned_gt_inds", "[", "(", "max_overlaps", ">=", "0", ")", "\n", "&", "(", "max_overlaps", "<", "self", ".", "neg_iou_thr", ")", "]", "=", "0", "\n", "", "elif", "isinstance", "(", "self", ".", "neg_iou_thr", ",", "tuple", ")", ":", "\n", "            ", "assert", "len", "(", "self", ".", "neg_iou_thr", ")", "==", "2", "\n", "assigned_gt_inds", "[", "(", "max_overlaps", ">=", "self", ".", "neg_iou_thr", "[", "0", "]", ")", "\n", "&", "(", "max_overlaps", "<", "self", ".", "neg_iou_thr", "[", "1", "]", ")", "]", "=", "0", "\n", "\n", "# 3. assign positive: above positive IoU threshold", "\n", "", "pos_inds", "=", "max_overlaps", ">=", "self", ".", "pos_iou_thr", "\n", "assigned_gt_inds", "[", "pos_inds", "]", "=", "argmax_overlaps", "[", "pos_inds", "]", "+", "1", "\n", "\n", "# 4. assign fg: for each gt, proposals with highest IoU", "\n", "for", "i", "in", "range", "(", "num_gts", ")", ":", "\n", "            ", "if", "gt_max_overlaps", "[", "i", "]", ">=", "self", ".", "min_pos_iou", ":", "\n", "                ", "assigned_gt_inds", "[", "overlaps", "[", ":", ",", "i", "]", "==", "gt_max_overlaps", "[", "i", "]", "]", "=", "i", "+", "1", "\n", "\n", "", "", "if", "gt_labels", "is", "not", "None", ":", "\n", "            ", "assigned_labels", "=", "assigned_gt_inds", ".", "new_zeros", "(", "(", "num_bboxes", ",", ")", ")", "\n", "pos_inds", "=", "torch", ".", "nonzero", "(", "assigned_gt_inds", ">", "0", ")", ".", "squeeze", "(", ")", "\n", "if", "pos_inds", ".", "numel", "(", ")", ">", "0", ":", "\n", "                ", "assigned_labels", "[", "pos_inds", "]", "=", "gt_labels", "[", "\n", "assigned_gt_inds", "[", "pos_inds", "]", "-", "1", "]", "\n", "", "", "else", ":", "\n", "            ", "assigned_labels", "=", "None", "\n", "\n", "", "return", "AssignResult", "(", "\n", "num_gts", ",", "assigned_gt_inds", ",", "max_overlaps", ",", "labels", "=", "assigned_labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.assignment.AssignResult.__init__": [[142, 147], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num_gts", ",", "gt_inds", ",", "max_overlaps", ",", "labels", "=", "None", ")", ":", "\n", "        ", "self", ".", "num_gts", "=", "num_gts", "\n", "self", ".", "gt_inds", "=", "gt_inds", "\n", "self", ".", "max_overlaps", "=", "max_overlaps", "\n", "self", ".", "labels", "=", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.assignment.AssignResult.add_gt_": [[148, 156], ["torch.arange", "torch.cat", "torch.cat", "torch.cat", "len", "assignment.AssignResult.max_overlaps.new_ones"], "methods", ["None"], ["", "def", "add_gt_", "(", "self", ",", "gt_labels", ")", ":", "\n", "        ", "self_inds", "=", "torch", ".", "arange", "(", "\n", "1", ",", "len", "(", "gt_labels", ")", "+", "1", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "gt_labels", ".", "device", ")", "\n", "self", ".", "gt_inds", "=", "torch", ".", "cat", "(", "[", "self_inds", ",", "self", ".", "gt_inds", "]", ")", "\n", "self", ".", "max_overlaps", "=", "torch", ".", "cat", "(", "\n", "[", "self", ".", "max_overlaps", ".", "new_ones", "(", "self", ".", "num_gts", ")", ",", "self", ".", "max_overlaps", "]", ")", "\n", "if", "self", ".", "labels", "is", "not", "None", ":", "\n", "            ", "self", ".", "labels", "=", "torch", ".", "cat", "(", "[", "gt_labels", ",", "self", ".", "labels", "]", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.geometry.bbox_overlaps": [[4, 64], ["bboxes1.size", "bboxes2.size", "torch.max", "torch.min", "torch.max", "torch.min", "bboxes1.new", "bboxes1.new"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.OptimWrapper.new", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.OptimWrapper.new"], ["def", "get_frustum", "(", "bbox_image", ",", "C", ",", "near_clip", "=", "0.001", ",", "far_clip", "=", "100", ")", ":", "\n", "    ", "fku", "=", "C", "[", "0", ",", "0", "]", "\n", "fkv", "=", "-", "C", "[", "1", ",", "1", "]", "\n", "u0v0", "=", "C", "[", "0", ":", "2", ",", "2", "]", "\n", "z_points", "=", "np", ".", "array", "(", "\n", "[", "near_clip", "]", "*", "4", "+", "[", "far_clip", "]", "*", "4", ",", "dtype", "=", "C", ".", "dtype", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "b", "=", "bbox_image", "\n", "box_corners", "=", "np", ".", "array", "(", "\n", "[", "[", "b", "[", "0", "]", ",", "b", "[", "1", "]", "]", ",", "[", "b", "[", "0", "]", ",", "b", "[", "3", "]", "]", ",", "[", "b", "[", "2", "]", ",", "b", "[", "3", "]", "]", ",", "[", "b", "[", "2", "]", ",", "b", "[", "1", "]", "]", "]", ",", "\n", "dtype", "=", "C", ".", "dtype", ")", "\n", "near_box_corners", "=", "(", "box_corners", "-", "u0v0", ")", "/", "np", ".", "array", "(", "\n", "[", "fku", "/", "near_clip", ",", "-", "fkv", "/", "near_clip", "]", ",", "dtype", "=", "C", ".", "dtype", ")", "\n", "far_box_corners", "=", "(", "box_corners", "-", "u0v0", ")", "/", "np", ".", "array", "(", "\n", "[", "fku", "/", "far_clip", ",", "-", "fkv", "/", "far_clip", "]", ",", "dtype", "=", "C", ".", "dtype", ")", "\n", "ret_xy", "=", "np", ".", "concatenate", "(", "\n", "[", "near_box_corners", ",", "far_box_corners", "]", ",", "axis", "=", "0", ")", "# [8, 2]", "\n", "ret_xyz", "=", "np", ".", "concatenate", "(", "[", "ret_xy", ",", "z_points", "]", ",", "axis", "=", "1", ")", "\n", "return", "ret_xyz", "\n", "\n", "", "def", "projection_matrix_to_CRT_kitti", "(", "proj", ")", ":", "\n", "# P = C @ [R|T]", "\n", "# C is upper triangular matrix, so we need to inverse CR and use QR", "\n", "# stable for all kitti camera projection matrix", "\n", "    ", "CR", "=", "proj", "[", "0", ":", "3", ",", "0", ":", "3", "]", "\n", "CT", "=", "proj", "[", "0", ":", "3", ",", "3", "]", "\n", "RinvCinv", "=", "np", ".", "linalg", ".", "inv", "(", "CR", ")", "\n", "Rinv", ",", "Cinv", "=", "np", ".", "linalg", ".", "qr", "(", "RinvCinv", ")", "\n", "C", "=", "np", ".", "linalg", ".", "inv", "(", "Cinv", ")", "\n", "R", "=", "np", ".", "linalg", ".", "inv", "(", "Rinv", ")", "\n", "T", "=", "Cinv", "@", "CT", "\n", "return", "C", ",", "R", ",", "T", "\n", "\n", "", "def", "box_camera_to_lidar", "(", "data", ",", "r_rect", ",", "velo2cam", ")", ":", "\n", "    ", "xyz", "=", "data", "[", ":", ",", "0", ":", "3", "]", "\n", "l", ",", "h", ",", "w", "=", "data", "[", ":", ",", "3", ":", "4", "]", ",", "data", "[", ":", ",", "4", ":", "5", "]", ",", "data", "[", ":", ",", "5", ":", "6", "]", "\n", "r", "=", "data", "[", ":", ",", "6", ":", "7", "]", "\n", "xyz_lidar", "=", "camera_to_lidar", "(", "xyz", ",", "r_rect", ",", "velo2cam", ")", "\n", "return", "np", ".", "concatenate", "(", "[", "xyz_lidar", ",", "w", ",", "l", ",", "h", ",", "r", "]", ",", "axis", "=", "1", ")", "\n", "\n", "", "def", "camera_to_lidar", "(", "points", ",", "r_rect", ",", "velo2cam", ")", ":", "\n", "    ", "points_shape", "=", "list", "(", "points", ".", "shape", "[", "0", ":", "-", "1", "]", ")", "\n", "if", "points", ".", "shape", "[", "-", "1", "]", "==", "3", ":", "\n", "        ", "points", "=", "np", ".", "concatenate", "(", "[", "points", ",", "np", ".", "ones", "(", "points_shape", "+", "[", "1", "]", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "lidar_points", "=", "points", "@", "np", ".", "linalg", ".", "inv", "(", "(", "r_rect", "@", "velo2cam", ")", ".", "T", ")", "\n", "return", "lidar_points", "[", "...", ",", ":", "3", "]", "\n", "\n", "", "def", "remove_outside_points", "(", "points", ",", "rect", ",", "Trv2c", ",", "P2", ",", "image_shape", ")", ":", "\n", "# 5x faster than remove_outside_points_v1(2ms vs 10ms)", "\n", "    ", "C", ",", "R", ",", "T", "=", "projection_matrix_to_CRT_kitti", "(", "P2", ")", "\n", "image_bbox", "=", "[", "0", ",", "0", ",", "image_shape", "[", "1", "]", ",", "image_shape", "[", "0", "]", "]", "\n", "frustum", "=", "get_frustum", "(", "image_bbox", ",", "C", ")", "\n", "frustum", "-=", "T", "\n", "frustum", "=", "np", ".", "linalg", ".", "inv", "(", "R", ")", "@", "frustum", ".", "T", "\n", "frustum", "=", "camera_to_lidar", "(", "frustum", ".", "T", ",", "rect", ",", "Trv2c", ")", "\n", "frustum_surfaces", "=", "corner_to_surfaces_3d_jit", "(", "frustum", "[", "np", ".", "newaxis", ",", "...", "]", ")", "\n", "indices", "=", "points_in_convex_polygon_3d_jit", "(", "points", "[", ":", ",", ":", "3", "]", ",", "frustum_surfaces", ")", "\n", "points", "=", "points", "[", "indices", ".", "reshape", "(", "[", "-", "1", "]", ")", "]", "\n", "return", "points", "\n", "\n", "", "def", "points_in_rbbox", "(", "points", ",", "rbbox", ",", "lidar", "=", "True", ")", ":", "\n", "    ", "if", "lidar", ":", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.bbox_target.bbox_target": [[7, 33], ["utils.multi_apply", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.misc.multi_apply"], ["def", "bbox_target", "(", "pos_bboxes_list", ",", "\n", "neg_bboxes_list", ",", "\n", "pos_gt_bboxes_list", ",", "\n", "pos_gt_labels_list", ",", "\n", "cfg", ",", "\n", "reg_classes", "=", "1", ",", "\n", "target_means", "=", "[", ".0", ",", ".0", ",", ".0", ",", ".0", "]", ",", "\n", "target_stds", "=", "[", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", "]", ",", "\n", "concat", "=", "True", ")", ":", "\n", "    ", "labels", ",", "label_weights", ",", "bbox_targets", ",", "bbox_weights", "=", "multi_apply", "(", "\n", "bbox_target_single", ",", "\n", "pos_bboxes_list", ",", "\n", "neg_bboxes_list", ",", "\n", "pos_gt_bboxes_list", ",", "\n", "pos_gt_labels_list", ",", "\n", "cfg", "=", "cfg", ",", "\n", "reg_classes", "=", "reg_classes", ",", "\n", "target_means", "=", "target_means", ",", "\n", "target_stds", "=", "target_stds", ")", "\n", "\n", "if", "concat", ":", "\n", "        ", "labels", "=", "torch", ".", "cat", "(", "labels", ",", "0", ")", "\n", "label_weights", "=", "torch", ".", "cat", "(", "label_weights", ",", "0", ")", "\n", "bbox_targets", "=", "torch", ".", "cat", "(", "bbox_targets", ",", "0", ")", "\n", "bbox_weights", "=", "torch", ".", "cat", "(", "bbox_weights", ",", "0", ")", "\n", "", "return", "labels", ",", "label_weights", ",", "bbox_targets", ",", "bbox_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.bbox_target.bbox_target_single": [[35, 66], ["pos_bboxes.size", "neg_bboxes.size", "pos_bboxes.new_zeros", "pos_bboxes.new_zeros", "pos_bboxes.new_zeros", "pos_bboxes.new_zeros", "transforms.rbbox3d2delta", "bbox_target.expand_target"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.transforms.rbbox3d2delta", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.bbox_target.expand_target"], ["", "def", "bbox_target_single", "(", "pos_bboxes", ",", "\n", "neg_bboxes", ",", "\n", "pos_gt_bboxes", ",", "\n", "pos_gt_labels", ",", "\n", "cfg", ",", "\n", "reg_classes", "=", "1", ",", "\n", "target_means", "=", "[", ".0", ",", ".0", ",", ".0", ",", ".0", "]", ",", "\n", "target_stds", "=", "[", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", "]", ")", ":", "\n", "    ", "num_pos", "=", "pos_bboxes", ".", "size", "(", "0", ")", "\n", "num_neg", "=", "neg_bboxes", ".", "size", "(", "0", ")", "\n", "num_samples", "=", "num_pos", "+", "num_neg", "\n", "labels", "=", "pos_bboxes", ".", "new_zeros", "(", "num_samples", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "label_weights", "=", "pos_bboxes", ".", "new_zeros", "(", "num_samples", ")", "\n", "bbox_targets", "=", "pos_bboxes", ".", "new_zeros", "(", "num_samples", ",", "7", ")", "\n", "bbox_weights", "=", "pos_bboxes", ".", "new_zeros", "(", "num_samples", ",", "7", ")", "\n", "if", "num_pos", ">", "0", ":", "\n", "        ", "labels", "[", ":", "num_pos", "]", "=", "pos_gt_labels", "\n", "pos_weight", "=", "1.0", "if", "cfg", ".", "pos_weight", "<=", "0", "else", "cfg", ".", "pos_weight", "\n", "label_weights", "[", ":", "num_pos", "]", "=", "pos_weight", "\n", "\n", "pos_bbox_targets", "=", "rbbox3d2delta", "(", "pos_bboxes", ",", "pos_gt_bboxes", ",", "target_means", ",", "\n", "target_stds", ")", "\n", "bbox_targets", "[", ":", "num_pos", ",", ":", "]", "=", "pos_bbox_targets", "\n", "bbox_weights", "[", ":", "num_pos", ",", ":", "]", "=", "1", "\n", "", "if", "num_neg", ">", "0", ":", "\n", "        ", "label_weights", "[", "-", "num_neg", ":", "]", "=", "1.0", "\n", "", "if", "reg_classes", ">", "1", ":", "\n", "        ", "bbox_targets", ",", "bbox_weights", "=", "expand_target", "(", "bbox_targets", ",", "bbox_weights", ",", "\n", "labels", ",", "reg_classes", ")", "\n", "\n", "", "return", "labels", ",", "label_weights", ",", "bbox_targets", ",", "bbox_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.bbox_target.expand_target": [[68, 78], ["bbox_targets.new_zeros", "bbox_weights.new_zeros", "torch.nonzero().squeeze", "bbox_targets.size", "bbox_weights.size", "torch.nonzero"], "function", ["None"], ["", "def", "expand_target", "(", "bbox_targets", ",", "bbox_weights", ",", "labels", ",", "num_classes", ")", ":", "\n", "    ", "bbox_targets_expand", "=", "bbox_targets", ".", "new_zeros", "(", "(", "bbox_targets", ".", "size", "(", "0", ")", ",", "\n", "7", "*", "num_classes", ")", ")", "\n", "bbox_weights_expand", "=", "bbox_weights", ".", "new_zeros", "(", "(", "bbox_weights", ".", "size", "(", "0", ")", ",", "\n", "7", "*", "num_classes", ")", ")", "\n", "for", "i", "in", "torch", ".", "nonzero", "(", "labels", ">", "0", ")", ".", "squeeze", "(", "-", "1", ")", ":", "\n", "        ", "start", ",", "end", "=", "labels", "[", "i", "]", "*", "7", ",", "(", "labels", "[", "i", "]", "+", "1", ")", "*", "7", "\n", "bbox_targets_expand", "[", "i", ",", "start", ":", "end", "]", "=", "bbox_targets", "[", "i", ",", ":", "]", "\n", "bbox_weights_expand", "[", "i", ",", "start", ":", "end", "]", "=", "bbox_weights", "[", "i", ",", ":", "]", "\n", "", "return", "bbox_targets_expand", ",", "bbox_weights_expand", "\n", "", ""]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.sampling.BBoxSampler.__init__": [[58, 73], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "num", ",", "\n", "pos_fraction", ",", "\n", "neg_pos_ub", "=", "-", "1", ",", "\n", "add_gt_as_proposals", "=", "True", ",", "\n", "pos_balance_sampling", "=", "False", ",", "\n", "neg_balance_thr", "=", "0", ",", "\n", "neg_hard_fraction", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "num", "=", "num", "\n", "self", ".", "pos_fraction", "=", "pos_fraction", "\n", "self", ".", "neg_pos_ub", "=", "neg_pos_ub", "\n", "self", ".", "add_gt_as_proposals", "=", "add_gt_as_proposals", "\n", "self", ".", "pos_balance_sampling", "=", "pos_balance_sampling", "\n", "self", ".", "neg_balance_thr", "=", "neg_balance_thr", "\n", "self", ".", "neg_hard_fraction", "=", "neg_hard_fraction", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.sampling.BBoxSampler._sample_pos": [[74, 116], ["torch.nonzero", "pos_inds.squeeze.squeeze.numel", "pos_inds.squeeze.squeeze.squeeze", "pos_inds.squeeze.squeeze.numel", "sampling.random_choice", "torch.unique", "len", "int", "torch.cat", "assign_result.gt_inds[].cpu", "torch.nonzero", "random_choice.append", "len", "numpy.array", "torch.from_numpy().to().long", "torch.cat", "round", "random_choice.numel", "random_choice.squeeze", "len", "sampling.random_choice", "len", "list", "len", "sampling.random_choice", "len", "sampling.random_choice", "i.item", "torch.from_numpy().to", "float", "set", "set", "pos_inds.squeeze.squeeze.cpu", "random_choice.cpu", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.sampling.random_choice", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.sampling.random_choice", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.sampling.random_choice", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.sampling.random_choice"], ["", "def", "_sample_pos", "(", "self", ",", "assign_result", ",", "num_expected", ")", ":", "\n", "        ", "\"\"\"Balance sampling for positive bboxes/anchors.\n\n        1. calculate average positive num for each gt: num_per_gt\n        2. sample at most num_per_gt positives for each gt\n        3. random sampling from rest anchors if not enough fg\n        \"\"\"", "\n", "pos_inds", "=", "torch", ".", "nonzero", "(", "assign_result", ".", "gt_inds", ">", "0", ")", "\n", "if", "pos_inds", ".", "numel", "(", ")", "!=", "0", ":", "\n", "            ", "pos_inds", "=", "pos_inds", ".", "squeeze", "(", "1", ")", "\n", "", "if", "pos_inds", ".", "numel", "(", ")", "<=", "num_expected", ":", "\n", "            ", "return", "pos_inds", "\n", "", "elif", "not", "self", ".", "pos_balance_sampling", ":", "\n", "            ", "return", "random_choice", "(", "pos_inds", ",", "num_expected", ")", "\n", "", "else", ":", "\n", "            ", "unique_gt_inds", "=", "torch", ".", "unique", "(", "\n", "assign_result", ".", "gt_inds", "[", "pos_inds", "]", ".", "cpu", "(", ")", ")", "\n", "num_gts", "=", "len", "(", "unique_gt_inds", ")", "\n", "num_per_gt", "=", "int", "(", "round", "(", "num_expected", "/", "float", "(", "num_gts", ")", ")", "+", "1", ")", "\n", "sampled_inds", "=", "[", "]", "\n", "for", "i", "in", "unique_gt_inds", ":", "\n", "                ", "inds", "=", "torch", ".", "nonzero", "(", "assign_result", ".", "gt_inds", "==", "i", ".", "item", "(", ")", ")", "\n", "if", "inds", ".", "numel", "(", ")", "!=", "0", ":", "\n", "                    ", "inds", "=", "inds", ".", "squeeze", "(", "1", ")", "\n", "", "else", ":", "\n", "                    ", "continue", "\n", "", "if", "len", "(", "inds", ")", ">", "num_per_gt", ":", "\n", "                    ", "inds", "=", "random_choice", "(", "inds", ",", "num_per_gt", ")", "\n", "", "sampled_inds", ".", "append", "(", "inds", ")", "\n", "", "sampled_inds", "=", "torch", ".", "cat", "(", "sampled_inds", ")", "\n", "if", "len", "(", "sampled_inds", ")", "<", "num_expected", ":", "\n", "                ", "num_extra", "=", "num_expected", "-", "len", "(", "sampled_inds", ")", "\n", "extra_inds", "=", "np", ".", "array", "(", "\n", "list", "(", "set", "(", "pos_inds", ".", "cpu", "(", ")", ")", "-", "set", "(", "sampled_inds", ".", "cpu", "(", ")", ")", ")", ")", "\n", "if", "len", "(", "extra_inds", ")", ">", "num_extra", ":", "\n", "                    ", "extra_inds", "=", "random_choice", "(", "extra_inds", ",", "num_extra", ")", "\n", "", "extra_inds", "=", "torch", ".", "from_numpy", "(", "extra_inds", ")", ".", "to", "(", "\n", "assign_result", ".", "gt_inds", ".", "device", ")", ".", "long", "(", ")", "\n", "sampled_inds", "=", "torch", ".", "cat", "(", "[", "sampled_inds", ",", "extra_inds", "]", ")", "\n", "", "elif", "len", "(", "sampled_inds", ")", ">", "num_expected", ":", "\n", "                ", "sampled_inds", "=", "random_choice", "(", "sampled_inds", ",", "num_expected", ")", "\n", "", "return", "sampled_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.sampling.BBoxSampler._sample_neg": [[117, 167], ["torch.nonzero", "neg_inds.squeeze.squeeze.numel", "neg_inds.squeeze.squeeze.squeeze", "len", "sampling.random_choice", "assign_result.max_overlaps.cpu().numpy", "set", "set", "set", "list", "list", "int", "numpy.concatenate", "torch.from_numpy().long().to", "neg_inds.squeeze.squeeze.cpu().numpy", "len", "sampling.random_choice", "numpy.array", "len", "len", "sampling.random_choice", "numpy.array", "len", "numpy.array", "numpy.concatenate", "assign_result.max_overlaps.cpu", "numpy.where", "numpy.where", "len", "list", "len", "sampling.random_choice", "torch.from_numpy().long", "neg_inds.squeeze.squeeze.cpu", "numpy.logical_and", "set", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.sampling.random_choice", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.sampling.random_choice", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.sampling.random_choice", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.sampling.random_choice"], ["", "", "def", "_sample_neg", "(", "self", ",", "assign_result", ",", "num_expected", ")", ":", "\n", "        ", "\"\"\"Balance sampling for negative bboxes/anchors.\n\n        Negative samples are split into 2 set: hard (balance_thr <= iou <\n        neg_iou_thr) and easy (iou < balance_thr). The sampling ratio is\n        controlled by `hard_fraction`.\n        \"\"\"", "\n", "neg_inds", "=", "torch", ".", "nonzero", "(", "assign_result", ".", "gt_inds", "==", "0", ")", "\n", "if", "neg_inds", ".", "numel", "(", ")", "!=", "0", ":", "\n", "            ", "neg_inds", "=", "neg_inds", ".", "squeeze", "(", "1", ")", "\n", "", "if", "len", "(", "neg_inds", ")", "<=", "num_expected", ":", "\n", "            ", "return", "neg_inds", "\n", "", "elif", "self", ".", "neg_balance_thr", "<=", "0", ":", "\n", "# uniform sampling among all negative samples", "\n", "            ", "return", "random_choice", "(", "neg_inds", ",", "num_expected", ")", "\n", "", "else", ":", "\n", "            ", "max_overlaps", "=", "assign_result", ".", "max_overlaps", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "# balance sampling for negative samples", "\n", "neg_set", "=", "set", "(", "neg_inds", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "easy_set", "=", "set", "(", "\n", "np", ".", "where", "(", "\n", "np", ".", "logical_and", "(", "max_overlaps", ">=", "0", ",", "\n", "max_overlaps", "<", "self", ".", "neg_balance_thr", ")", ")", "[", "0", "]", ")", "\n", "hard_set", "=", "set", "(", "np", ".", "where", "(", "max_overlaps", ">=", "self", ".", "neg_balance_thr", ")", "[", "0", "]", ")", "\n", "easy_neg_inds", "=", "list", "(", "easy_set", "&", "neg_set", ")", "\n", "hard_neg_inds", "=", "list", "(", "hard_set", "&", "neg_set", ")", "\n", "\n", "num_expected_hard", "=", "int", "(", "num_expected", "*", "self", ".", "neg_hard_fraction", ")", "\n", "if", "len", "(", "hard_neg_inds", ")", ">", "num_expected_hard", ":", "\n", "                ", "sampled_hard_inds", "=", "random_choice", "(", "hard_neg_inds", ",", "\n", "num_expected_hard", ")", "\n", "", "else", ":", "\n", "                ", "sampled_hard_inds", "=", "np", ".", "array", "(", "hard_neg_inds", ",", "dtype", "=", "np", ".", "int", ")", "\n", "", "num_expected_easy", "=", "num_expected", "-", "len", "(", "sampled_hard_inds", ")", "\n", "if", "len", "(", "easy_neg_inds", ")", ">", "num_expected_easy", ":", "\n", "                ", "sampled_easy_inds", "=", "random_choice", "(", "easy_neg_inds", ",", "\n", "num_expected_easy", ")", "\n", "", "else", ":", "\n", "                ", "sampled_easy_inds", "=", "np", ".", "array", "(", "easy_neg_inds", ",", "dtype", "=", "np", ".", "int", ")", "\n", "", "sampled_inds", "=", "np", ".", "concatenate", "(", "(", "sampled_easy_inds", ",", "\n", "sampled_hard_inds", ")", ")", "\n", "if", "len", "(", "sampled_inds", ")", "<", "num_expected", ":", "\n", "                ", "num_extra", "=", "num_expected", "-", "len", "(", "sampled_inds", ")", "\n", "extra_inds", "=", "np", ".", "array", "(", "list", "(", "neg_set", "-", "set", "(", "sampled_inds", ")", ")", ")", "\n", "if", "len", "(", "extra_inds", ")", ">", "num_extra", ":", "\n", "                    ", "extra_inds", "=", "random_choice", "(", "extra_inds", ",", "num_extra", ")", "\n", "", "sampled_inds", "=", "np", ".", "concatenate", "(", "(", "sampled_inds", ",", "extra_inds", ")", ")", "\n", "", "sampled_inds", "=", "torch", ".", "from_numpy", "(", "sampled_inds", ")", ".", "long", "(", ")", ".", "to", "(", "\n", "assign_result", ".", "gt_inds", ".", "device", ")", "\n", "return", "sampled_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.sampling.BBoxSampler.sample": [[168, 215], ["torch.cat.new_zeros", "int", "sampling.BBoxSampler._sample_pos", "pos_inds.unique.unique.unique", "pos_inds.unique.unique.numel", "sampling.BBoxSampler._sample_neg", "neg_inds.unique.unique.unique", "sampling.SamplingResult", "torch.cat", "assign_result.add_gt_", "torch.cat", "min", "int", "int", "torch.cat.new_ones"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.sampling.BBoxSampler._sample_pos", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.sampling.BBoxSampler._sample_neg", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.assignment.AssignResult.add_gt_"], ["", "", "def", "sample", "(", "self", ",", "assign_result", ",", "bboxes", ",", "gt_bboxes", ",", "gt_labels", "=", "None", ")", ":", "\n", "        ", "\"\"\"Sample positive and negative bboxes.\n\n        This is a simple implementation of bbox sampling given candidates,\n        assigning results and ground truth bboxes.\n\n        1. Assign gt to each bbox.\n        2. Add gt bboxes to the sampling pool (optional).\n        3. Perform positive and negative sampling.\n\n        Args:\n            assign_result (:obj:`AssignResult`): Bbox assigning results.\n            bboxes (Tensor): Boxes to be sampled from.\n            gt_bboxes (Tensor): Ground truth bboxes.\n            gt_labels (Tensor, optional): Class labels of ground truth bboxes.\n\n        Returns:\n            :obj:`SamplingResult`: Sampling result.\n        \"\"\"", "\n", "bboxes", "=", "bboxes", "[", ":", ",", ":", "7", "]", "\n", "\n", "gt_flags", "=", "bboxes", ".", "new_zeros", "(", "(", "bboxes", ".", "shape", "[", "0", "]", ",", ")", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "if", "self", ".", "add_gt_as_proposals", ":", "\n", "            ", "bboxes", "=", "torch", ".", "cat", "(", "[", "gt_bboxes", ",", "bboxes", "]", ",", "dim", "=", "0", ")", "\n", "assign_result", ".", "add_gt_", "(", "gt_labels", ")", "\n", "gt_flags", "=", "torch", ".", "cat", "(", "[", "\n", "bboxes", ".", "new_ones", "(", "(", "gt_bboxes", ".", "shape", "[", "0", "]", ",", ")", ",", "dtype", "=", "torch", ".", "uint8", ")", ",", "\n", "gt_flags", "\n", "]", ")", "\n", "\n", "", "num_expected_pos", "=", "int", "(", "self", ".", "num", "*", "self", ".", "pos_fraction", ")", "\n", "pos_inds", "=", "self", ".", "_sample_pos", "(", "assign_result", ",", "num_expected_pos", ")", "\n", "# We found that sampled indices have duplicated items occasionally.", "\n", "# (mab be a bug of PyTorch)", "\n", "pos_inds", "=", "pos_inds", ".", "unique", "(", ")", "\n", "num_sampled_pos", "=", "pos_inds", ".", "numel", "(", ")", "\n", "num_expected_neg", "=", "self", ".", "num", "-", "num_sampled_pos", "\n", "if", "self", ".", "neg_pos_ub", ">=", "0", ":", "\n", "            ", "num_neg_max", "=", "int", "(", "self", ".", "neg_pos_ub", "*", "\n", "num_sampled_pos", ")", "if", "num_sampled_pos", ">", "0", "else", "int", "(", "\n", "self", ".", "neg_pos_ub", ")", "\n", "num_expected_neg", "=", "min", "(", "num_neg_max", ",", "num_expected_neg", ")", "\n", "", "neg_inds", "=", "self", ".", "_sample_neg", "(", "assign_result", ",", "num_expected_neg", ")", "\n", "neg_inds", "=", "neg_inds", ".", "unique", "(", ")", "\n", "\n", "return", "SamplingResult", "(", "pos_inds", ",", "neg_inds", ",", "bboxes", ",", "assign_result", ".", "max_overlaps", ",", "gt_bboxes", ",", "\n", "assign_result", ",", "gt_flags", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.sampling.SamplingResult.__init__": [[219, 235], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "pos_inds", ",", "neg_inds", ",", "bboxes", ",", "max_overlaps", ",", "gt_bboxes", ",", "assign_result", ",", "\n", "gt_flags", ")", ":", "\n", "        ", "self", ".", "pos_inds", "=", "pos_inds", "\n", "self", ".", "neg_inds", "=", "neg_inds", "\n", "self", ".", "pos_bboxes", "=", "bboxes", "[", "pos_inds", "]", "\n", "self", ".", "neg_bboxes", "=", "bboxes", "[", "neg_inds", "]", "\n", "self", ".", "pos_is_gt", "=", "gt_flags", "[", "pos_inds", "]", "\n", "self", ".", "pos_overs", "=", "max_overlaps", "[", "pos_inds", "]", "\n", "self", ".", "neg_overs", "=", "max_overlaps", "[", "neg_inds", "]", "\n", "self", ".", "num_gts", "=", "gt_bboxes", ".", "shape", "[", "0", "]", "\n", "self", ".", "pos_assigned_gt_inds", "=", "assign_result", ".", "gt_inds", "[", "pos_inds", "]", "-", "1", "\n", "self", ".", "pos_gt_bboxes", "=", "gt_bboxes", "[", "self", ".", "pos_assigned_gt_inds", ",", ":", "]", "\n", "if", "assign_result", ".", "labels", "is", "not", "None", ":", "\n", "            ", "self", ".", "pos_gt_labels", "=", "assign_result", ".", "labels", "[", "pos_inds", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "pos_gt_labels", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.sampling.SamplingResult.bboxes": [[236, 239], ["torch.cat"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "bboxes", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "cat", "(", "[", "self", ".", "pos_bboxes", ",", "self", ".", "neg_bboxes", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.sampling.SamplingResult.overs": [[240, 243], ["torch.cat"], "methods", ["None"], ["", "@", "property", "\n", "def", "overs", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "cat", "(", "[", "self", ".", "pos_overs", ",", "self", ".", "neg_overs", "]", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.sampling.random_choice": [[7, 22], ["isinstance", "numpy.arange", "numpy.random.shuffle", "len", "numpy.array", "len", "isinstance", "torch.from_numpy().long().to", "torch.from_numpy().long", "torch.from_numpy"], "function", ["None"], ["def", "random_choice", "(", "gallery", ",", "num", ")", ":", "\n", "    ", "\"\"\"Random select some elements from the gallery.\n\n    It seems that Pytorch's implementation is slower than numpy so we use numpy\n    to randperm the indices.\n    \"\"\"", "\n", "assert", "len", "(", "gallery", ")", ">=", "num", "\n", "if", "isinstance", "(", "gallery", ",", "list", ")", ":", "\n", "        ", "gallery", "=", "np", ".", "array", "(", "gallery", ")", "\n", "", "cands", "=", "np", ".", "arange", "(", "len", "(", "gallery", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "cands", ")", "\n", "rand_inds", "=", "cands", "[", ":", "num", "]", "\n", "if", "not", "isinstance", "(", "gallery", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "rand_inds", "=", "torch", ".", "from_numpy", "(", "rand_inds", ")", ".", "long", "(", ")", ".", "to", "(", "gallery", ".", "device", ")", "\n", "", "return", "gallery", "[", "rand_inds", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.sampling.assign_and_sample": [[24, 42], ["isinstance", "isinstance", "isinstance", "assignment.BBoxAssigner", "sampling.BBoxSampler", "assignment.BBoxAssigner.assign", "sampling.BBoxSampler.sample", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.assignment.BBoxAssigner.assign", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox.sampling.BBoxSampler.sample"], ["", "def", "assign_and_sample", "(", "bboxes", ",", "gt_bboxes", ",", "gt_bboxes_ignore", ",", "gt_labels", ",", "cfg", ")", ":", "\n", "    ", "if", "isinstance", "(", "gt_bboxes", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "gt_bboxes", "=", "torch", ".", "from_numpy", "(", "gt_bboxes", ")", ".", "to", "(", "bboxes", ".", "device", ")", "\n", "", "if", "isinstance", "(", "gt_bboxes_ignore", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "gt_bboxes_ignore", "=", "torch", ".", "from_numpy", "(", "gt_bboxes_ignore", ")", ".", "to", "(", "bboxes", ".", "device", ")", "\n", "", "if", "isinstance", "(", "gt_labels", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "gt_labels", "=", "torch", ".", "from_numpy", "(", "gt_labels", ")", ".", "to", "(", "bboxes", ".", "device", ")", "\n", "\n", "", "bbox_assigner", "=", "BBoxAssigner", "(", "**", "cfg", ".", "assigner", ")", "\n", "bbox_sampler", "=", "BBoxSampler", "(", "**", "cfg", ".", "sampler", ")", "\n", "\n", "assign_result", "=", "bbox_assigner", ".", "assign", "(", "bboxes", ",", "gt_bboxes", ",", "gt_bboxes_ignore", ",", "\n", "gt_labels", ")", "\n", "sampling_result", "=", "bbox_sampler", ".", "sample", "(", "assign_result", ",", "\n", "bboxes", ",", "\n", "gt_bboxes", ",", "\n", "gt_labels", ")", "\n", "return", "assign_result", ",", "sampling_result", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.area": [[11, 25], ["None"], "function", ["None"], ["def", "area", "(", "boxes", ",", "add1", "=", "False", ")", ":", "\n", "    ", "\"\"\"Computes area of boxes.\n\n    Args:\n        boxes: Numpy array with shape [N, 4] holding N boxes\n\n    Returns:\n        a numpy array with shape [N*1] representing box areas\n    \"\"\"", "\n", "if", "add1", ":", "\n", "        ", "return", "(", "boxes", "[", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", "0", "]", "+", "1.0", ")", "*", "(", "\n", "boxes", "[", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", "1", "]", "+", "1.0", ")", "\n", "", "else", ":", "\n", "        ", "return", "(", "boxes", "[", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", "0", "]", ")", "*", "(", "boxes", "[", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.intersection": [[27, 56], ["numpy.split", "numpy.split", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.transpose", "numpy.transpose", "numpy.zeros", "numpy.transpose", "numpy.transpose", "numpy.zeros"], "function", ["None"], ["", "", "def", "intersection", "(", "boxes1", ",", "boxes2", ",", "add1", "=", "False", ")", ":", "\n", "    ", "\"\"\"Compute pairwise intersection areas between boxes.\n\n    Args:\n        boxes1: a numpy array with shape [N, 4] holding N boxes\n        boxes2: a numpy array with shape [M, 4] holding M boxes\n\n    Returns:\n        a numpy array with shape [N*M] representing pairwise intersection area\n    \"\"\"", "\n", "[", "y_min1", ",", "x_min1", ",", "y_max1", ",", "x_max1", "]", "=", "np", ".", "split", "(", "boxes1", ",", "4", ",", "axis", "=", "1", ")", "\n", "[", "y_min2", ",", "x_min2", ",", "y_max2", ",", "x_max2", "]", "=", "np", ".", "split", "(", "boxes2", ",", "4", ",", "axis", "=", "1", ")", "\n", "\n", "all_pairs_min_ymax", "=", "np", ".", "minimum", "(", "y_max1", ",", "np", ".", "transpose", "(", "y_max2", ")", ")", "\n", "all_pairs_max_ymin", "=", "np", ".", "maximum", "(", "y_min1", ",", "np", ".", "transpose", "(", "y_min2", ")", ")", "\n", "if", "add1", ":", "\n", "        ", "all_pairs_min_ymax", "+=", "1.0", "\n", "", "intersect_heights", "=", "np", ".", "maximum", "(", "\n", "np", ".", "zeros", "(", "all_pairs_max_ymin", ".", "shape", ")", ",", "\n", "all_pairs_min_ymax", "-", "all_pairs_max_ymin", ")", "\n", "\n", "all_pairs_min_xmax", "=", "np", ".", "minimum", "(", "x_max1", ",", "np", ".", "transpose", "(", "x_max2", ")", ")", "\n", "all_pairs_max_xmin", "=", "np", ".", "maximum", "(", "x_min1", ",", "np", ".", "transpose", "(", "x_min2", ")", ")", "\n", "if", "add1", ":", "\n", "        ", "all_pairs_min_xmax", "+=", "1.0", "\n", "", "intersect_widths", "=", "np", ".", "maximum", "(", "\n", "np", ".", "zeros", "(", "all_pairs_max_xmin", ".", "shape", ")", ",", "\n", "all_pairs_min_xmax", "-", "all_pairs_max_xmin", ")", "\n", "return", "intersect_heights", "*", "intersect_widths", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.iou": [[58, 75], ["kitti_common.intersection", "kitti_common.area", "kitti_common.area", "numpy.expand_dims", "numpy.expand_dims"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.intersection", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.area", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.area"], ["", "def", "iou", "(", "boxes1", ",", "boxes2", ",", "add1", "=", "False", ")", ":", "\n", "    ", "\"\"\"Computes pairwise intersection-over-union between box collections.\n\n    Args:\n        boxes1: a numpy array with shape [N, 4] holding N boxes.\n        boxes2: a numpy array with shape [M, 4] holding N boxes.\n\n    Returns:\n        a numpy array with shape [N, M] representing pairwise iou scores.\n    \"\"\"", "\n", "intersect", "=", "intersection", "(", "boxes1", ",", "boxes2", ",", "add1", ")", "\n", "area1", "=", "area", "(", "boxes1", ",", "add1", ")", "\n", "area2", "=", "area", "(", "boxes2", ",", "add1", ")", "\n", "union", "=", "np", ".", "expand_dims", "(", "\n", "area1", ",", "axis", "=", "1", ")", "+", "np", ".", "expand_dims", "(", "\n", "area2", ",", "axis", "=", "0", ")", "-", "intersect", "\n", "return", "intersect", "/", "union", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.get_image_index_str": [[77, 79], ["None"], "function", ["None"], ["", "def", "get_image_index_str", "(", "img_idx", ")", ":", "\n", "    ", "return", "\"{:06d}\"", ".", "format", "(", "img_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.get_kitti_info_path": [[81, 101], ["kitti_common.get_image_index_str", "pathlib.Path", "ValueError", "str", "str", "pathlib.Path", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.get_image_index_str"], ["", "def", "get_kitti_info_path", "(", "idx", ",", "\n", "prefix", ",", "\n", "info_type", "=", "'image_2'", ",", "\n", "file_tail", "=", "'.png'", ",", "\n", "training", "=", "True", ",", "\n", "relative_path", "=", "True", ",", "\n", "exist_check", "=", "True", ")", ":", "\n", "    ", "img_idx_str", "=", "get_image_index_str", "(", "idx", ")", "\n", "img_idx_str", "+=", "file_tail", "\n", "prefix", "=", "pathlib", ".", "Path", "(", "prefix", ")", "\n", "if", "training", ":", "\n", "        ", "file_path", "=", "pathlib", ".", "Path", "(", "'object/training'", ")", "/", "info_type", "/", "img_idx_str", "\n", "", "else", ":", "\n", "        ", "file_path", "=", "pathlib", ".", "Path", "(", "'object/testing'", ")", "/", "info_type", "/", "img_idx_str", "\n", "", "if", "exist_check", "and", "not", "(", "prefix", "/", "file_path", ")", ".", "exists", "(", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"file not exist: {}\"", ".", "format", "(", "file_path", ")", ")", "\n", "", "if", "relative_path", ":", "\n", "        ", "return", "str", "(", "file_path", ")", "\n", "", "else", ":", "\n", "        ", "return", "str", "(", "prefix", "/", "file_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.get_image_path": [[103, 106], ["kitti_common.get_kitti_info_path"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.get_kitti_info_path"], ["", "", "def", "get_image_path", "(", "idx", ",", "prefix", ",", "training", "=", "True", ",", "relative_path", "=", "True", ",", "exist_check", "=", "True", ")", ":", "\n", "    ", "return", "get_kitti_info_path", "(", "idx", ",", "prefix", ",", "'image_2'", ",", "'.png'", ",", "training", ",", "\n", "relative_path", ",", "exist_check", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.get_label_path": [[107, 110], ["kitti_common.get_kitti_info_path"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.get_kitti_info_path"], ["", "def", "get_label_path", "(", "idx", ",", "prefix", ",", "training", "=", "True", ",", "relative_path", "=", "True", ",", "exist_check", "=", "True", ")", ":", "\n", "    ", "return", "get_kitti_info_path", "(", "idx", ",", "prefix", ",", "'label_2'", ",", "'.txt'", ",", "training", ",", "\n", "relative_path", ",", "exist_check", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.get_velodyne_path": [[111, 114], ["kitti_common.get_kitti_info_path"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.get_kitti_info_path"], ["", "def", "get_velodyne_path", "(", "idx", ",", "prefix", ",", "training", "=", "True", ",", "relative_path", "=", "True", ",", "exist_check", "=", "True", ")", ":", "\n", "    ", "return", "get_kitti_info_path", "(", "idx", ",", "prefix", ",", "'velodyne'", ",", "'.bin'", ",", "training", ",", "\n", "relative_path", ",", "exist_check", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.get_calib_path": [[115, 118], ["kitti_common.get_kitti_info_path"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.get_kitti_info_path"], ["", "def", "get_calib_path", "(", "idx", ",", "prefix", ",", "training", "=", "True", ",", "relative_path", "=", "True", ",", "exist_check", "=", "True", ")", ":", "\n", "    ", "return", "get_kitti_info_path", "(", "idx", ",", "prefix", ",", "'calib'", ",", "'.txt'", ",", "training", ",", "\n", "relative_path", ",", "exist_check", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common._extend_matrix": [[119, 122], ["numpy.concatenate", "numpy.array"], "function", ["None"], ["", "def", "_extend_matrix", "(", "mat", ")", ":", "\n", "    ", "mat", "=", "np", ".", "concatenate", "(", "[", "mat", ",", "np", ".", "array", "(", "[", "[", "0.", ",", "0.", ",", "0.", ",", "1.", "]", "]", ")", "]", ",", "axis", "=", "0", ")", "\n", "return", "mat", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.get_kitti_image_info": [[124, 213], ["pathlib.Path", "list", "isinstance", "list", "kitti_common.get_image_path", "concurrent.ThreadPoolExecutor", "executor.map", "range", "kitti_common.get_velodyne_path", "numpy.array", "kitti_common.get_label_path", "kitti_common.get_label_anno", "kitti_common.get_calib_path", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "kitti_common.add_difficulty_to_annos", "str", "str", "open", "f.readlines", "kitti_common._extend_matrix", "kitti_common._extend_matrix", "kitti_common._extend_matrix", "kitti_common._extend_matrix", "numpy.zeros", "kitti_common._extend_matrix", "kitti_common._extend_matrix", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "skimage.io.imread", "float", "float", "float", "float", "float", "float", "float", "lines[].split", "lines[].split", "lines[].split", "lines[].split", "lines[].split", "lines[].split", "lines[].split"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.get_image_path", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.get_velodyne_path", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.get_label_path", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.get_label_anno", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.get_calib_path", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.add_difficulty_to_annos", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common._extend_matrix", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common._extend_matrix", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common._extend_matrix", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common._extend_matrix", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common._extend_matrix", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common._extend_matrix"], ["", "def", "get_kitti_image_info", "(", "path", ",", "\n", "training", "=", "True", ",", "\n", "label_info", "=", "True", ",", "\n", "velodyne", "=", "False", ",", "\n", "calib", "=", "False", ",", "\n", "image_ids", "=", "7481", ",", "\n", "extend_matrix", "=", "True", ",", "\n", "num_worker", "=", "8", ",", "\n", "relative_path", "=", "True", ",", "\n", "with_imageshape", "=", "True", ")", ":", "\n", "# image_infos = []", "\n", "    ", "root_path", "=", "pathlib", ".", "Path", "(", "path", ")", "\n", "if", "not", "isinstance", "(", "image_ids", ",", "list", ")", ":", "\n", "        ", "image_ids", "=", "list", "(", "range", "(", "image_ids", ")", ")", "\n", "\n", "", "def", "map_func", "(", "idx", ")", ":", "\n", "        ", "image_info", "=", "{", "'image_idx'", ":", "idx", ",", "'pointcloud_num_features'", ":", "4", "}", "\n", "annotations", "=", "None", "\n", "if", "velodyne", ":", "\n", "            ", "image_info", "[", "'velodyne_path'", "]", "=", "get_velodyne_path", "(", "\n", "idx", ",", "path", ",", "training", ",", "relative_path", ")", "\n", "", "image_info", "[", "'img_path'", "]", "=", "get_image_path", "(", "idx", ",", "path", ",", "training", ",", "\n", "relative_path", ")", "\n", "if", "with_imageshape", ":", "\n", "            ", "img_path", "=", "image_info", "[", "'img_path'", "]", "\n", "if", "relative_path", ":", "\n", "                ", "img_path", "=", "str", "(", "root_path", "/", "img_path", ")", "\n", "", "image_info", "[", "'img_shape'", "]", "=", "np", ".", "array", "(", "\n", "io", ".", "imread", "(", "img_path", ")", ".", "shape", "[", ":", "2", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "", "if", "label_info", ":", "\n", "            ", "label_path", "=", "get_label_path", "(", "idx", ",", "path", ",", "training", ",", "relative_path", ")", "\n", "if", "relative_path", ":", "\n", "                ", "label_path", "=", "str", "(", "root_path", "/", "label_path", ")", "\n", "", "annotations", "=", "get_label_anno", "(", "label_path", ")", "\n", "", "if", "calib", ":", "\n", "            ", "calib_path", "=", "get_calib_path", "(", "\n", "idx", ",", "path", ",", "training", ",", "relative_path", "=", "False", ")", "\n", "with", "open", "(", "calib_path", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "P0", "=", "np", ".", "array", "(", "\n", "[", "float", "(", "info", ")", "for", "info", "in", "lines", "[", "0", "]", ".", "split", "(", "' '", ")", "[", "1", ":", "13", "]", "]", ")", ".", "reshape", "(", "\n", "[", "3", ",", "4", "]", ")", "\n", "P1", "=", "np", ".", "array", "(", "\n", "[", "float", "(", "info", ")", "for", "info", "in", "lines", "[", "1", "]", ".", "split", "(", "' '", ")", "[", "1", ":", "13", "]", "]", ")", ".", "reshape", "(", "\n", "[", "3", ",", "4", "]", ")", "\n", "P2", "=", "np", ".", "array", "(", "\n", "[", "float", "(", "info", ")", "for", "info", "in", "lines", "[", "2", "]", ".", "split", "(", "' '", ")", "[", "1", ":", "13", "]", "]", ")", ".", "reshape", "(", "\n", "[", "3", ",", "4", "]", ")", "\n", "P3", "=", "np", ".", "array", "(", "\n", "[", "float", "(", "info", ")", "for", "info", "in", "lines", "[", "3", "]", ".", "split", "(", "' '", ")", "[", "1", ":", "13", "]", "]", ")", ".", "reshape", "(", "\n", "[", "3", ",", "4", "]", ")", "\n", "if", "extend_matrix", ":", "\n", "                ", "P0", "=", "_extend_matrix", "(", "P0", ")", "\n", "P1", "=", "_extend_matrix", "(", "P1", ")", "\n", "P2", "=", "_extend_matrix", "(", "P2", ")", "\n", "P3", "=", "_extend_matrix", "(", "P3", ")", "\n", "", "image_info", "[", "'calib/P0'", "]", "=", "P0", "\n", "image_info", "[", "'calib/P1'", "]", "=", "P1", "\n", "image_info", "[", "'calib/P2'", "]", "=", "P2", "\n", "image_info", "[", "'calib/P3'", "]", "=", "P3", "\n", "R0_rect", "=", "np", ".", "array", "(", "[", "\n", "float", "(", "info", ")", "for", "info", "in", "lines", "[", "4", "]", ".", "split", "(", "' '", ")", "[", "1", ":", "10", "]", "\n", "]", ")", ".", "reshape", "(", "[", "3", ",", "3", "]", ")", "\n", "if", "extend_matrix", ":", "\n", "                ", "rect_4x4", "=", "np", ".", "zeros", "(", "[", "4", ",", "4", "]", ",", "dtype", "=", "R0_rect", ".", "dtype", ")", "\n", "rect_4x4", "[", "3", ",", "3", "]", "=", "1.", "\n", "rect_4x4", "[", ":", "3", ",", ":", "3", "]", "=", "R0_rect", "\n", "", "else", ":", "\n", "                ", "rect_4x4", "=", "R0_rect", "\n", "", "image_info", "[", "'calib/R0_rect'", "]", "=", "rect_4x4", "\n", "Tr_velo_to_cam", "=", "np", ".", "array", "(", "[", "\n", "float", "(", "info", ")", "for", "info", "in", "lines", "[", "5", "]", ".", "split", "(", "' '", ")", "[", "1", ":", "13", "]", "\n", "]", ")", ".", "reshape", "(", "[", "3", ",", "4", "]", ")", "\n", "Tr_imu_to_velo", "=", "np", ".", "array", "(", "[", "\n", "float", "(", "info", ")", "for", "info", "in", "lines", "[", "6", "]", ".", "split", "(", "' '", ")", "[", "1", ":", "13", "]", "\n", "]", ")", ".", "reshape", "(", "[", "3", ",", "4", "]", ")", "\n", "if", "extend_matrix", ":", "\n", "                ", "Tr_velo_to_cam", "=", "_extend_matrix", "(", "Tr_velo_to_cam", ")", "\n", "Tr_imu_to_velo", "=", "_extend_matrix", "(", "Tr_imu_to_velo", ")", "\n", "", "image_info", "[", "'calib/Tr_velo_to_cam'", "]", "=", "Tr_velo_to_cam", "\n", "image_info", "[", "'calib/Tr_imu_to_velo'", "]", "=", "Tr_imu_to_velo", "\n", "", "if", "annotations", "is", "not", "None", ":", "\n", "            ", "image_info", "[", "'annos'", "]", "=", "annotations", "\n", "add_difficulty_to_annos", "(", "image_info", ")", "\n", "", "return", "image_info", "\n", "\n", "", "with", "futures", ".", "ThreadPoolExecutor", "(", "num_worker", ")", "as", "executor", ":", "\n", "        ", "image_infos", "=", "executor", ".", "map", "(", "map_func", ",", "image_ids", ")", "\n", "", "return", "list", "(", "image_infos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.label_str_to_int": [[215, 221], ["kitti_common.get_class_to_label_map", "numpy.array"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.get_class_to_label_map"], ["", "def", "label_str_to_int", "(", "labels", ",", "remove_dontcare", "=", "True", ",", "dtype", "=", "np", ".", "int32", ")", ":", "\n", "    ", "class_to_label", "=", "get_class_to_label_map", "(", ")", "\n", "ret", "=", "np", ".", "array", "(", "[", "class_to_label", "[", "l", "]", "for", "l", "in", "labels", "]", ",", "dtype", "=", "dtype", ")", "\n", "if", "remove_dontcare", ":", "\n", "        ", "ret", "=", "ret", "[", "ret", ">", "0", "]", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.get_class_to_label_map": [[222, 235], ["None"], "function", ["None"], ["", "def", "get_class_to_label_map", "(", ")", ":", "\n", "    ", "class_to_label", "=", "{", "\n", "'Car'", ":", "0", ",", "\n", "'Pedestrian'", ":", "1", ",", "\n", "'Cyclist'", ":", "2", ",", "\n", "'Van'", ":", "3", ",", "\n", "'Person_sitting'", ":", "4", ",", "\n", "'Truck'", ":", "5", ",", "\n", "'Tram'", ":", "6", ",", "\n", "'Misc'", ":", "7", ",", "\n", "'DontCare'", ":", "-", "1", ",", "\n", "}", "\n", "return", "class_to_label", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.get_classes": [[236, 238], ["get_class_to_label_map().keys", "kitti_common.get_class_to_label_map"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.get_class_to_label_map"], ["", "def", "get_classes", "(", ")", ":", "\n", "    ", "return", "get_class_to_label_map", "(", ")", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.filter_gt_boxes": [[239, 242], ["numpy.array"], "function", ["None"], ["", "def", "filter_gt_boxes", "(", "gt_boxes", ",", "gt_labels", ",", "used_classes", ")", ":", "\n", "    ", "mask", "=", "np", ".", "array", "(", "[", "l", "in", "used_classes", "for", "l", "in", "gt_labels", "]", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.filter_anno_by_mask": [[243, 249], ["image_anno.keys"], "function", ["None"], ["", "def", "filter_anno_by_mask", "(", "image_anno", ",", "mask", ")", ":", "\n", "    ", "img_filtered_annotations", "=", "{", "}", "\n", "for", "key", "in", "image_anno", ".", "keys", "(", ")", ":", "\n", "        ", "img_filtered_annotations", "[", "key", "]", "=", "(", "\n", "image_anno", "[", "key", "]", "[", "mask", "]", ")", "\n", "", "return", "img_filtered_annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.filter_infos_by_used_classes": [[251, 263], ["new_infos.append"], "function", ["None"], ["", "def", "filter_infos_by_used_classes", "(", "infos", ",", "used_classes", ")", ":", "\n", "    ", "new_infos", "=", "[", "]", "\n", "for", "info", "in", "infos", ":", "\n", "        ", "annos", "=", "info", "[", "\"annos\"", "]", "\n", "name_in_info", "=", "False", "\n", "for", "name", "in", "used_classes", ":", "\n", "            ", "if", "name", "in", "annos", "[", "\"name\"", "]", ":", "\n", "                ", "name_in_info", "=", "True", "\n", "break", "\n", "", "", "if", "name_in_info", ":", "\n", "            ", "new_infos", ".", "append", "(", "info", ")", "\n", "", "", "return", "new_infos", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.remove_dontcare": [[264, 273], ["image_anno.keys", "enumerate"], "function", ["None"], ["", "def", "remove_dontcare", "(", "image_anno", ")", ":", "\n", "    ", "img_filtered_annotations", "=", "{", "}", "\n", "relevant_annotation_indices", "=", "[", "\n", "i", "for", "i", ",", "x", "in", "enumerate", "(", "image_anno", "[", "'name'", "]", ")", "if", "x", "!=", "\"DontCare\"", "\n", "]", "\n", "for", "key", "in", "image_anno", ".", "keys", "(", ")", ":", "\n", "        ", "img_filtered_annotations", "[", "key", "]", "=", "(", "\n", "image_anno", "[", "key", "]", "[", "relevant_annotation_indices", "]", ")", "\n", "", "return", "img_filtered_annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.remove_low_height": [[274, 283], ["image_anno.keys", "enumerate"], "function", ["None"], ["", "def", "remove_low_height", "(", "image_anno", ",", "thresh", ")", ":", "\n", "    ", "img_filtered_annotations", "=", "{", "}", "\n", "relevant_annotation_indices", "=", "[", "\n", "i", "for", "i", ",", "s", "in", "enumerate", "(", "image_anno", "[", "'bbox'", "]", ")", "if", "(", "s", "[", "3", "]", "-", "s", "[", "1", "]", ")", ">=", "thresh", "\n", "]", "\n", "for", "key", "in", "image_anno", ".", "keys", "(", ")", ":", "\n", "        ", "img_filtered_annotations", "[", "key", "]", "=", "(", "\n", "image_anno", "[", "key", "]", "[", "relevant_annotation_indices", "]", ")", "\n", "", "return", "img_filtered_annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.remove_low_score": [[284, 293], ["image_anno.keys", "enumerate"], "function", ["None"], ["", "def", "remove_low_score", "(", "image_anno", ",", "thresh", ")", ":", "\n", "    ", "img_filtered_annotations", "=", "{", "}", "\n", "relevant_annotation_indices", "=", "[", "\n", "i", "for", "i", ",", "s", "in", "enumerate", "(", "image_anno", "[", "'score'", "]", ")", "if", "s", ">=", "thresh", "\n", "]", "\n", "for", "key", "in", "image_anno", ".", "keys", "(", ")", ":", "\n", "        ", "img_filtered_annotations", "[", "key", "]", "=", "(", "\n", "image_anno", "[", "key", "]", "[", "relevant_annotation_indices", "]", ")", "\n", "", "return", "img_filtered_annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.keep_arrays_by_name": [[294, 300], ["numpy.array", "enumerate"], "function", ["None"], ["", "def", "keep_arrays_by_name", "(", "gt_names", ",", "used_classes", ")", ":", "\n", "    ", "inds", "=", "[", "\n", "i", "for", "i", ",", "x", "in", "enumerate", "(", "gt_names", ")", "if", "x", "in", "used_classes", "\n", "]", "\n", "inds", "=", "np", ".", "array", "(", "inds", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "return", "inds", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.drop_arrays_by_name": [[301, 307], ["numpy.array", "enumerate"], "function", ["None"], ["", "def", "drop_arrays_by_name", "(", "gt_names", ",", "used_classes", ")", ":", "\n", "    ", "inds", "=", "[", "\n", "i", "for", "i", ",", "x", "in", "enumerate", "(", "gt_names", ")", "if", "x", "not", "in", "used_classes", "\n", "]", "\n", "inds", "=", "np", ".", "array", "(", "inds", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "return", "inds", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.apply_mask_": [[308, 310], ["None"], "function", ["None"], ["", "def", "apply_mask_", "(", "array_dict", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.filter_kitti_anno": [[311, 349], ["image_anno.keys", "isinstance", "image_anno.keys", "kitti_common.iou", "enumerate", "image_anno.keys", "enumerate", "enumerate", "numpy.amax", "numpy.logical_not"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.iou"], ["", "def", "filter_kitti_anno", "(", "image_anno", ",", "\n", "used_classes", ",", "\n", "used_difficulty", "=", "None", ",", "\n", "dontcare_iou", "=", "None", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "used_classes", ",", "(", "list", ",", "tuple", ",", "np", ".", "ndarray", ")", ")", ":", "\n", "        ", "used_classes", "=", "[", "used_classes", "]", "\n", "", "img_filtered_annotations", "=", "{", "}", "\n", "relevant_annotation_indices", "=", "[", "\n", "i", "for", "i", ",", "x", "in", "enumerate", "(", "image_anno", "[", "'name'", "]", ")", "if", "x", "in", "used_classes", "\n", "]", "\n", "for", "key", "in", "image_anno", ".", "keys", "(", ")", ":", "\n", "        ", "img_filtered_annotations", "[", "key", "]", "=", "(", "\n", "image_anno", "[", "key", "]", "[", "relevant_annotation_indices", "]", ")", "\n", "", "if", "used_difficulty", "is", "not", "None", ":", "\n", "        ", "relevant_annotation_indices", "=", "[", "\n", "i", "for", "i", ",", "x", "in", "enumerate", "(", "img_filtered_annotations", "[", "'difficulty'", "]", ")", "\n", "if", "x", "in", "used_difficulty", "\n", "]", "\n", "for", "key", "in", "image_anno", ".", "keys", "(", ")", ":", "\n", "            ", "img_filtered_annotations", "[", "key", "]", "=", "(", "\n", "img_filtered_annotations", "[", "key", "]", "[", "relevant_annotation_indices", "]", ")", "\n", "\n", "", "", "if", "'DontCare'", "in", "used_classes", "and", "dontcare_iou", "is", "not", "None", ":", "\n", "        ", "dont_care_indices", "=", "[", "\n", "i", "for", "i", ",", "x", "in", "enumerate", "(", "img_filtered_annotations", "[", "'name'", "]", ")", "\n", "if", "x", "==", "'DontCare'", "\n", "]", "\n", "# bounding box format [y_min, x_min, y_max, x_max]", "\n", "all_boxes", "=", "img_filtered_annotations", "[", "'bbox'", "]", "\n", "ious", "=", "iou", "(", "all_boxes", ",", "all_boxes", "[", "dont_care_indices", "]", ")", "\n", "\n", "# Remove all bounding boxes that overlap with a dontcare region.", "\n", "if", "ious", ".", "size", ">", "0", ":", "\n", "            ", "boxes_to_remove", "=", "np", ".", "amax", "(", "ious", ",", "axis", "=", "1", ")", ">", "dontcare_iou", "\n", "for", "key", "in", "image_anno", ".", "keys", "(", ")", ":", "\n", "                ", "img_filtered_annotations", "[", "key", "]", "=", "(", "img_filtered_annotations", "[", "key", "]", "[", "\n", "np", ".", "logical_not", "(", "boxes_to_remove", ")", "]", ")", "\n", "", "", "", "return", "img_filtered_annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.filter_annos_class": [[351, 363], ["anno.keys", "new_image_annos.append", "enumerate"], "function", ["None"], ["", "def", "filter_annos_class", "(", "image_annos", ",", "used_class", ")", ":", "\n", "    ", "new_image_annos", "=", "[", "]", "\n", "for", "anno", "in", "image_annos", ":", "\n", "        ", "img_filtered_annotations", "=", "{", "}", "\n", "relevant_annotation_indices", "=", "[", "\n", "i", "for", "i", ",", "x", "in", "enumerate", "(", "anno", "[", "'name'", "]", ")", "if", "x", "in", "used_class", "\n", "]", "\n", "for", "key", "in", "anno", ".", "keys", "(", ")", ":", "\n", "            ", "img_filtered_annotations", "[", "key", "]", "=", "(", "\n", "anno", "[", "key", "]", "[", "relevant_annotation_indices", "]", ")", "\n", "", "new_image_annos", ".", "append", "(", "img_filtered_annotations", ")", "\n", "", "return", "new_image_annos", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.filter_annos_low_score": [[365, 377], ["anno.keys", "new_image_annos.append", "enumerate"], "function", ["None"], ["", "def", "filter_annos_low_score", "(", "image_annos", ",", "thresh", ")", ":", "\n", "    ", "new_image_annos", "=", "[", "]", "\n", "for", "anno", "in", "image_annos", ":", "\n", "        ", "img_filtered_annotations", "=", "{", "}", "\n", "relevant_annotation_indices", "=", "[", "\n", "i", "for", "i", ",", "s", "in", "enumerate", "(", "anno", "[", "'score'", "]", ")", "if", "s", ">=", "thresh", "\n", "]", "\n", "for", "key", "in", "anno", ".", "keys", "(", ")", ":", "\n", "            ", "img_filtered_annotations", "[", "key", "]", "=", "(", "\n", "anno", "[", "key", "]", "[", "relevant_annotation_indices", "]", ")", "\n", "", "new_image_annos", ".", "append", "(", "img_filtered_annotations", ")", "\n", "", "return", "new_image_annos", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.filter_annos_difficulty": [[379, 391], ["anno.keys", "new_image_annos.append", "enumerate"], "function", ["None"], ["", "def", "filter_annos_difficulty", "(", "image_annos", ",", "used_difficulty", ")", ":", "\n", "    ", "new_image_annos", "=", "[", "]", "\n", "for", "anno", "in", "image_annos", ":", "\n", "        ", "img_filtered_annotations", "=", "{", "}", "\n", "relevant_annotation_indices", "=", "[", "\n", "i", "for", "i", ",", "x", "in", "enumerate", "(", "anno", "[", "'difficulty'", "]", ")", "if", "x", "in", "used_difficulty", "\n", "]", "\n", "for", "key", "in", "anno", ".", "keys", "(", ")", ":", "\n", "            ", "img_filtered_annotations", "[", "key", "]", "=", "(", "\n", "anno", "[", "key", "]", "[", "relevant_annotation_indices", "]", ")", "\n", "", "new_image_annos", ".", "append", "(", "img_filtered_annotations", ")", "\n", "", "return", "new_image_annos", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.filter_annos_low_height": [[393, 405], ["anno.keys", "new_image_annos.append", "enumerate"], "function", ["None"], ["", "def", "filter_annos_low_height", "(", "image_annos", ",", "thresh", ")", ":", "\n", "    ", "new_image_annos", "=", "[", "]", "\n", "for", "anno", "in", "image_annos", ":", "\n", "        ", "img_filtered_annotations", "=", "{", "}", "\n", "relevant_annotation_indices", "=", "[", "\n", "i", "for", "i", ",", "s", "in", "enumerate", "(", "anno", "[", "'bbox'", "]", ")", "if", "(", "s", "[", "3", "]", "-", "s", "[", "1", "]", ")", ">=", "thresh", "\n", "]", "\n", "for", "key", "in", "anno", ".", "keys", "(", ")", ":", "\n", "            ", "img_filtered_annotations", "[", "key", "]", "=", "(", "\n", "anno", "[", "key", "]", "[", "relevant_annotation_indices", "]", ")", "\n", "", "new_image_annos", ".", "append", "(", "img_filtered_annotations", ")", "\n", "", "return", "new_image_annos", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.filter_empty_annos": [[406, 412], ["new_image_annos.append", "anno.copy"], "function", ["None"], ["", "def", "filter_empty_annos", "(", "image_annos", ")", ":", "\n", "    ", "new_image_annos", "=", "[", "]", "\n", "for", "anno", "in", "image_annos", ":", "\n", "        ", "if", "anno", "[", "\"name\"", "]", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "            ", "new_image_annos", ".", "append", "(", "anno", ".", "copy", "(", ")", ")", "\n", "", "", "return", "new_image_annos", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.kitti_result_line": [[414, 457], ["collections.OrderedDict", "collections.OrderedDict", "result_dict.items", "collections.OrderedDict.items", "collections.OrderedDict.items", "ValueError", "res_line.append", "res_line.append", "res_line.append", "str", "prec_float.format", "res_line.append", "res_line.append", "ValueError", "str", "str", "prec_float.format", "collections.OrderedDict.keys"], "function", ["None"], ["", "def", "kitti_result_line", "(", "result_dict", ",", "precision", "=", "4", ")", ":", "\n", "    ", "prec_float", "=", "\"{\"", "+", "\":.{}f\"", ".", "format", "(", "precision", ")", "+", "\"}\"", "\n", "res_line", "=", "[", "]", "\n", "all_field_default", "=", "OrderedDict", "(", "[", "\n", "(", "'name'", ",", "None", ")", ",", "\n", "(", "'truncated'", ",", "-", "1", ")", ",", "\n", "(", "'occluded'", ",", "-", "1", ")", ",", "\n", "(", "'alpha'", ",", "-", "10", ")", ",", "\n", "(", "'bbox'", ",", "None", ")", ",", "\n", "(", "'dimensions'", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", ",", "\n", "(", "'location'", ",", "[", "-", "1000", ",", "-", "1000", ",", "-", "1000", "]", ")", ",", "\n", "(", "'rotation_y'", ",", "-", "10", ")", ",", "\n", "(", "'score'", ",", "0.0", ")", ",", "\n", "]", ")", "\n", "res_dict", "=", "[", "(", "key", ",", "None", ")", "for", "key", ",", "val", "in", "all_field_default", ".", "items", "(", ")", "]", "\n", "res_dict", "=", "OrderedDict", "(", "res_dict", ")", "\n", "for", "key", ",", "val", "in", "result_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "all_field_default", "[", "key", "]", "is", "None", "and", "val", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"you must specify a value for {}\"", ".", "format", "(", "key", ")", ")", "\n", "", "res_dict", "[", "key", "]", "=", "val", "\n", "\n", "", "for", "key", ",", "val", "in", "res_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "key", "==", "'name'", ":", "\n", "            ", "res_line", ".", "append", "(", "val", ")", "\n", "", "elif", "key", "in", "[", "'truncated'", ",", "'alpha'", ",", "'rotation_y'", ",", "'score'", "]", ":", "\n", "            ", "if", "val", "is", "None", ":", "\n", "                ", "res_line", ".", "append", "(", "str", "(", "all_field_default", "[", "key", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "res_line", ".", "append", "(", "prec_float", ".", "format", "(", "val", ")", ")", "\n", "", "", "elif", "key", "==", "'occluded'", ":", "\n", "            ", "if", "val", "is", "None", ":", "\n", "                ", "res_line", ".", "append", "(", "str", "(", "all_field_default", "[", "key", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "res_line", ".", "append", "(", "'{}'", ".", "format", "(", "val", ")", ")", "\n", "", "", "elif", "key", "in", "[", "'bbox'", ",", "'dimensions'", ",", "'location'", "]", ":", "\n", "            ", "if", "val", "is", "None", ":", "\n", "                ", "res_line", "+=", "[", "str", "(", "v", ")", "for", "v", "in", "all_field_default", "[", "key", "]", "]", "\n", "", "else", ":", "\n", "                ", "res_line", "+=", "[", "prec_float", ".", "format", "(", "v", ")", "for", "v", "in", "val", "]", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"unknown key. supported key:{}\"", ".", "format", "(", "\n", "res_dict", ".", "keys", "(", ")", ")", ")", "\n", "", "", "return", "' '", ".", "join", "(", "res_line", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.annos_to_kitti_label": [[458, 475], ["len", "range", "kitti_common.kitti_result_line", "result_lines.append"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.kitti_result_line"], ["", "def", "annos_to_kitti_label", "(", "annos", ")", ":", "\n", "    ", "num_instance", "=", "len", "(", "annos", "[", "\"name\"", "]", ")", "\n", "result_lines", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_instance", ")", ":", "\n", "        ", "result_dict", "=", "{", "\n", "'name'", ":", "annos", "[", "\"name\"", "]", "[", "i", "]", ",", "\n", "'truncated'", ":", "annos", "[", "\"truncated\"", "]", "[", "i", "]", ",", "\n", "'occluded'", ":", "annos", "[", "\"occluded\"", "]", "[", "i", "]", ",", "\n", "'alpha'", ":", "annos", "[", "\"alpha\"", "]", "[", "i", "]", ",", "\n", "'bbox'", ":", "annos", "[", "\"bbox\"", "]", "[", "i", "]", ",", "\n", "'dimensions'", ":", "annos", "[", "\"dimensions\"", "]", "[", "i", "]", ",", "\n", "'location'", ":", "annos", "[", "\"location\"", "]", "[", "i", "]", ",", "\n", "'rotation_y'", ":", "annos", "[", "\"rotation_y\"", "]", "[", "i", "]", ",", "\n", "}", "\n", "line", "=", "kitti_result_line", "(", "result_dict", ")", "\n", "result_lines", ".", "append", "(", "line", ")", "\n", "", "return", "result_lines", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.add_difficulty_to_annos": [[476, 519], ["numpy.ones", "numpy.ones", "numpy.ones", "zip", "numpy.logical_xor", "numpy.logical_xor", "range", "numpy.array", "len", "len", "len", "len", "diff.append", "diff.append", "diff.append", "diff.append"], "function", ["None"], ["", "def", "add_difficulty_to_annos", "(", "info", ")", ":", "\n", "    ", "min_height", "=", "[", "40", ",", "25", ",", "\n", "25", "]", "# minimum height for evaluated groundtruth/detections", "\n", "max_occlusion", "=", "[", "\n", "0", ",", "1", ",", "2", "\n", "]", "# maximum occlusion level of the groundtruth used for evaluation", "\n", "max_trunc", "=", "[", "\n", "0.15", ",", "0.3", ",", "0.5", "\n", "]", "# maximum truncation level of the groundtruth used for evaluation", "\n", "annos", "=", "info", "[", "'annos'", "]", "\n", "dims", "=", "annos", "[", "'dimensions'", "]", "# lhw format", "\n", "bbox", "=", "annos", "[", "'bbox'", "]", "\n", "height", "=", "bbox", "[", ":", ",", "3", "]", "-", "bbox", "[", ":", ",", "1", "]", "\n", "occlusion", "=", "annos", "[", "'occluded'", "]", "\n", "truncation", "=", "annos", "[", "'truncated'", "]", "\n", "diff", "=", "[", "]", "\n", "easy_mask", "=", "np", ".", "ones", "(", "(", "len", "(", "dims", ")", ",", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "moderate_mask", "=", "np", ".", "ones", "(", "(", "len", "(", "dims", ")", ",", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "hard_mask", "=", "np", ".", "ones", "(", "(", "len", "(", "dims", ")", ",", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "i", "=", "0", "\n", "for", "h", ",", "o", ",", "t", "in", "zip", "(", "height", ",", "occlusion", ",", "truncation", ")", ":", "\n", "        ", "if", "o", ">", "max_occlusion", "[", "0", "]", "or", "h", "<=", "min_height", "[", "0", "]", "or", "t", ">", "max_trunc", "[", "0", "]", ":", "\n", "            ", "easy_mask", "[", "i", "]", "=", "False", "\n", "", "if", "o", ">", "max_occlusion", "[", "1", "]", "or", "h", "<=", "min_height", "[", "1", "]", "or", "t", ">", "max_trunc", "[", "1", "]", ":", "\n", "            ", "moderate_mask", "[", "i", "]", "=", "False", "\n", "", "if", "o", ">", "max_occlusion", "[", "2", "]", "or", "h", "<=", "min_height", "[", "2", "]", "or", "t", ">", "max_trunc", "[", "2", "]", ":", "\n", "            ", "hard_mask", "[", "i", "]", "=", "False", "\n", "", "i", "+=", "1", "\n", "", "is_easy", "=", "easy_mask", "\n", "is_moderate", "=", "np", ".", "logical_xor", "(", "easy_mask", ",", "moderate_mask", ")", "\n", "is_hard", "=", "np", ".", "logical_xor", "(", "hard_mask", ",", "moderate_mask", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "dims", ")", ")", ":", "\n", "        ", "if", "is_easy", "[", "i", "]", ":", "\n", "            ", "diff", ".", "append", "(", "0", ")", "\n", "", "elif", "is_moderate", "[", "i", "]", ":", "\n", "            ", "diff", ".", "append", "(", "1", ")", "\n", "", "elif", "is_hard", "[", "i", "]", ":", "\n", "            ", "diff", ".", "append", "(", "2", ")", "\n", "", "else", ":", "\n", "            ", "diff", ".", "append", "(", "-", "1", ")", "\n", "", "", "annos", "[", "\"difficulty\"", "]", "=", "np", ".", "array", "(", "diff", ",", "np", ".", "int32", ")", "\n", "return", "diff", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.add_difficulty_to_annos_v2": [[521, 558], ["numpy.logical_xor", "numpy.logical_xor", "range", "numpy.array", "len", "diff.append", "diff.append", "diff.append", "diff.append"], "function", ["None"], ["", "def", "add_difficulty_to_annos_v2", "(", "info", ")", ":", "\n", "    ", "min_height", "=", "[", "40", ",", "25", ",", "\n", "25", "]", "# minimum height for evaluated groundtruth/detections", "\n", "max_occlusion", "=", "[", "\n", "0", ",", "1", ",", "2", "\n", "]", "# maximum occlusion level of the groundtruth used for evaluation", "\n", "max_trunc", "=", "[", "\n", "0.15", ",", "0.3", ",", "0.5", "\n", "]", "# maximum truncation level of the groundtruth used for evaluation", "\n", "annos", "=", "info", "[", "'annos'", "]", "\n", "dims", "=", "annos", "[", "'dimensions'", "]", "# lhw format", "\n", "bbox", "=", "annos", "[", "'bbox'", "]", "\n", "height", "=", "bbox", "[", ":", ",", "3", "]", "-", "bbox", "[", ":", ",", "1", "]", "\n", "occlusion", "=", "annos", "[", "'occluded'", "]", "\n", "truncation", "=", "annos", "[", "'truncated'", "]", "\n", "diff", "=", "[", "]", "\n", "easy_mask", "=", "not", "(", "(", "occlusion", ">", "max_occlusion", "[", "0", "]", ")", "or", "(", "height", "<", "min_height", "[", "0", "]", ")", "\n", "or", "(", "truncation", ">", "max_trunc", "[", "0", "]", ")", ")", "\n", "moderate_mask", "=", "not", "(", "(", "occlusion", ">", "max_occlusion", "[", "1", "]", ")", "or", "(", "height", "<", "min_height", "[", "1", "]", ")", "\n", "or", "(", "truncation", ">", "max_trunc", "[", "1", "]", ")", ")", "\n", "hard_mask", "=", "not", "(", "(", "occlusion", ">", "max_occlusion", "[", "2", "]", ")", "or", "(", "height", "<", "min_height", "[", "2", "]", ")", "\n", "or", "(", "truncation", ">", "max_trunc", "[", "2", "]", ")", ")", "\n", "is_easy", "=", "easy_mask", "\n", "is_moderate", "=", "np", ".", "logical_xor", "(", "easy_mask", ",", "moderate_mask", ")", "\n", "is_hard", "=", "np", ".", "logical_xor", "(", "hard_mask", ",", "moderate_mask", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "dims", ")", ")", ":", "\n", "        ", "if", "is_easy", "[", "i", "]", ":", "\n", "            ", "diff", ".", "append", "(", "0", ")", "\n", "", "elif", "is_moderate", "[", "i", "]", ":", "\n", "            ", "diff", ".", "append", "(", "1", ")", "\n", "", "elif", "is_hard", "[", "i", "]", ":", "\n", "            ", "diff", ".", "append", "(", "2", ")", "\n", "", "else", ":", "\n", "            ", "diff", ".", "append", "(", "-", "1", ")", "\n", "", "", "annos", "[", "\"difficulty\"", "]", "=", "np", ".", "array", "(", "diff", ",", "np", ".", "int32", ")", "\n", "return", "diff", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.get_label_anno": [[560, 602], ["annotations.update", "len", "numpy.array", "len", "numpy.array", "numpy.array", "numpy.array", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.array", "numpy.arange", "open", "f.readlines", "line.strip().split", "numpy.array().reshape", "numpy.array", "numpy.zeros", "list", "float", "int", "float", "numpy.array", "numpy.array", "numpy.array", "len", "len", "range", "line.strip", "float", "numpy.array", "float", "float", "float", "float", "float"], "function", ["None"], ["", "def", "get_label_anno", "(", "label_path", ")", ":", "\n", "    ", "annotations", "=", "{", "}", "\n", "annotations", ".", "update", "(", "{", "\n", "'name'", ":", "[", "]", ",", "\n", "'truncated'", ":", "[", "]", ",", "\n", "'occluded'", ":", "[", "]", ",", "\n", "'alpha'", ":", "[", "]", ",", "\n", "'bbox'", ":", "[", "]", ",", "\n", "'dimensions'", ":", "[", "]", ",", "\n", "'location'", ":", "[", "]", ",", "\n", "'rotation_y'", ":", "[", "]", "\n", "}", ")", "\n", "with", "open", "(", "label_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "# if len(lines) == 0 or len(lines[0]) < 15:", "\n", "#     content = []", "\n", "# else:", "\n", "", "content", "=", "[", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "for", "line", "in", "lines", "]", "\n", "num_objects", "=", "len", "(", "[", "x", "[", "0", "]", "for", "x", "in", "content", "if", "x", "[", "0", "]", "!=", "'DontCare'", "]", ")", "\n", "annotations", "[", "'name'", "]", "=", "np", ".", "array", "(", "[", "x", "[", "0", "]", "for", "x", "in", "content", "]", ")", "\n", "num_gt", "=", "len", "(", "annotations", "[", "'name'", "]", ")", "\n", "annotations", "[", "'truncated'", "]", "=", "np", ".", "array", "(", "[", "float", "(", "x", "[", "1", "]", ")", "for", "x", "in", "content", "]", ")", "\n", "annotations", "[", "'occluded'", "]", "=", "np", ".", "array", "(", "[", "int", "(", "float", "(", "x", "[", "2", "]", ")", ")", "for", "x", "in", "content", "]", ")", "\n", "annotations", "[", "'alpha'", "]", "=", "np", ".", "array", "(", "[", "float", "(", "x", "[", "3", "]", ")", "for", "x", "in", "content", "]", ")", "\n", "annotations", "[", "'bbox'", "]", "=", "np", ".", "array", "(", "\n", "[", "[", "float", "(", "info", ")", "for", "info", "in", "x", "[", "4", ":", "8", "]", "]", "for", "x", "in", "content", "]", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "# dimensions will convert hwl format to standard lhw(camera) format.", "\n", "annotations", "[", "'dimensions'", "]", "=", "np", ".", "array", "(", "\n", "[", "[", "float", "(", "info", ")", "for", "info", "in", "x", "[", "8", ":", "11", "]", "]", "for", "x", "in", "content", "]", ")", ".", "reshape", "(", "\n", "-", "1", ",", "3", ")", "[", ":", ",", "[", "2", ",", "0", ",", "1", "]", "]", "\n", "annotations", "[", "'location'", "]", "=", "np", ".", "array", "(", "\n", "[", "[", "float", "(", "info", ")", "for", "info", "in", "x", "[", "11", ":", "14", "]", "]", "for", "x", "in", "content", "]", ")", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "annotations", "[", "'rotation_y'", "]", "=", "np", ".", "array", "(", "\n", "[", "float", "(", "x", "[", "14", "]", ")", "for", "x", "in", "content", "]", ")", ".", "reshape", "(", "-", "1", ")", "\n", "if", "len", "(", "content", ")", "!=", "0", "and", "len", "(", "content", "[", "0", "]", ")", "==", "16", ":", "# have score", "\n", "        ", "annotations", "[", "'score'", "]", "=", "np", ".", "array", "(", "[", "float", "(", "x", "[", "15", "]", ")", "for", "x", "in", "content", "]", ")", "\n", "", "else", ":", "\n", "        ", "annotations", "[", "'score'", "]", "=", "np", ".", "zeros", "(", "(", "annotations", "[", "'bbox'", "]", ".", "shape", "[", "0", "]", ",", ")", ")", "\n", "", "index", "=", "list", "(", "range", "(", "num_objects", ")", ")", "+", "[", "-", "1", "]", "*", "(", "num_gt", "-", "num_objects", ")", "\n", "annotations", "[", "'index'", "]", "=", "np", ".", "array", "(", "index", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "annotations", "[", "'group_ids'", "]", "=", "np", ".", "arange", "(", "num_gt", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "return", "annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.get_pseudo_label_anno": [[604, 617], ["annotations.update", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "get_pseudo_label_anno", "(", ")", ":", "\n", "    ", "annotations", "=", "{", "}", "\n", "annotations", ".", "update", "(", "{", "\n", "'name'", ":", "np", ".", "array", "(", "[", "'Car'", "]", ")", ",", "\n", "'truncated'", ":", "np", ".", "array", "(", "[", "0.0", "]", ")", ",", "\n", "'occluded'", ":", "np", ".", "array", "(", "[", "0", "]", ")", ",", "\n", "'alpha'", ":", "np", ".", "array", "(", "[", "0.0", "]", ")", ",", "\n", "'bbox'", ":", "np", ".", "array", "(", "[", "[", "0.1", ",", "0.1", ",", "15.0", ",", "15.0", "]", "]", ")", ",", "\n", "'dimensions'", ":", "np", ".", "array", "(", "[", "[", "0.1", ",", "0.1", ",", "15.0", ",", "15.0", "]", "]", ")", ",", "\n", "'location'", ":", "np", ".", "array", "(", "[", "[", "0.1", ",", "0.1", ",", "15.0", "]", "]", ")", ",", "\n", "'rotation_y'", ":", "np", ".", "array", "(", "[", "[", "0.1", ",", "0.1", ",", "15.0", "]", "]", ")", "\n", "}", ")", "\n", "return", "annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.get_start_result_anno": [[618, 632], ["annotations.update"], "function", ["None"], ["", "def", "get_start_result_anno", "(", ")", ":", "\n", "    ", "annotations", "=", "{", "}", "\n", "annotations", ".", "update", "(", "{", "\n", "'name'", ":", "[", "]", ",", "\n", "'truncated'", ":", "[", "]", ",", "\n", "'occluded'", ":", "[", "]", ",", "\n", "'alpha'", ":", "[", "]", ",", "\n", "'bbox'", ":", "[", "]", ",", "\n", "'dimensions'", ":", "[", "]", ",", "\n", "'location'", ":", "[", "]", ",", "\n", "'rotation_y'", ":", "[", "]", ",", "\n", "'score'", ":", "[", "]", ",", "\n", "}", ")", "\n", "return", "annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.empty_result_anno": [[633, 647], ["annotations.update", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "empty_result_anno", "(", ")", ":", "\n", "    ", "annotations", "=", "{", "}", "\n", "annotations", ".", "update", "(", "{", "\n", "'name'", ":", "np", ".", "array", "(", "[", "]", ")", ",", "\n", "'truncated'", ":", "np", ".", "array", "(", "[", "]", ")", ",", "\n", "'occluded'", ":", "np", ".", "array", "(", "[", "]", ")", ",", "\n", "'alpha'", ":", "np", ".", "array", "(", "[", "]", ")", ",", "\n", "'bbox'", ":", "np", ".", "zeros", "(", "[", "0", ",", "4", "]", ")", ",", "\n", "'dimensions'", ":", "np", ".", "zeros", "(", "[", "0", ",", "3", "]", ")", ",", "\n", "'location'", ":", "np", ".", "zeros", "(", "[", "0", ",", "3", "]", ")", ",", "\n", "'rotation_y'", ":", "np", ".", "array", "(", "[", "]", ")", ",", "\n", "'score'", ":", "np", ".", "array", "(", "[", "]", ")", ",", "\n", "}", ")", "\n", "return", "annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.get_label_annos": [[648, 667], ["pathlib.Path", "pathlib.Path().glob", "re.compile", "filter", "sorted", "isinstance", "list", "kitti_common.get_image_index_str", "kitti_common.get_label_anno", "numpy.array", "annos.append", "int", "range", "pathlib.Path", "re.compile.match"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.get_image_index_str", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.get_label_anno"], ["", "def", "get_label_annos", "(", "label_folder", ",", "image_ids", "=", "None", ")", ":", "\n", "    ", "if", "image_ids", "is", "None", ":", "\n", "        ", "filepaths", "=", "pathlib", ".", "Path", "(", "label_folder", ")", ".", "glob", "(", "'*.txt'", ")", "\n", "prog", "=", "re", ".", "compile", "(", "r'^\\d{6}.txt$'", ")", "\n", "filepaths", "=", "filter", "(", "lambda", "f", ":", "prog", ".", "match", "(", "f", ".", "name", ")", ",", "filepaths", ")", "\n", "image_ids", "=", "[", "int", "(", "p", ".", "stem", ")", "for", "p", "in", "filepaths", "]", "\n", "image_ids", "=", "sorted", "(", "image_ids", ")", "\n", "", "if", "not", "isinstance", "(", "image_ids", ",", "list", ")", ":", "\n", "        ", "image_ids", "=", "list", "(", "range", "(", "image_ids", ")", ")", "\n", "", "annos", "=", "[", "]", "\n", "label_folder", "=", "pathlib", ".", "Path", "(", "label_folder", ")", "\n", "for", "idx", "in", "image_ids", ":", "\n", "        ", "image_idx_str", "=", "get_image_index_str", "(", "idx", ")", "\n", "label_filename", "=", "label_folder", "/", "(", "image_idx_str", "+", "'.txt'", ")", "\n", "anno", "=", "get_label_anno", "(", "label_filename", ")", "\n", "num_example", "=", "anno", "[", "\"name\"", "]", ".", "shape", "[", "0", "]", "\n", "anno", "[", "\"image_idx\"", "]", "=", "np", ".", "array", "(", "[", "idx", "]", "*", "num_example", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "annos", ".", "append", "(", "anno", ")", "\n", "", "return", "annos", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.anno_to_rbboxes": [[669, 675], ["numpy.concatenate"], "function", ["None"], ["", "def", "anno_to_rbboxes", "(", "anno", ")", ":", "\n", "    ", "loc", "=", "anno", "[", "\"location\"", "]", "\n", "dims", "=", "anno", "[", "\"dimensions\"", "]", "\n", "rots", "=", "anno", "[", "\"rotation_y\"", "]", "\n", "rbboxes", "=", "np", ".", "concatenate", "(", "[", "loc", ",", "dims", ",", "rots", "[", "...", ",", "np", ".", "newaxis", "]", "]", ",", "axis", "=", "1", ")", "\n", "return", "rbboxes", "\n", "", ""]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.create_data._read_imageset_file": [[10, 14], ["open", "f.readlines", "int"], "function", ["None"], ["def", "_read_imageset_file", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "return", "[", "int", "(", "line", ")", "for", "line", "in", "lines", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.create_data._calculate_num_points_in_gt": [[16, 48], ["numpy.fromfile().reshape", "len", "numpy.concatenate", "mmdet.core.bbox3d.geometry.box_camera_to_lidar", "mmdet.core.bbox3d.geometry.points_in_rbbox", "mmdet.core.bbox3d.geometry.points_in_rbbox.sum", "numpy.concatenate", "np.concatenate.astype", "str", "mmdet.core.bbox3d.geometry.remove_outside_points", "len", "numpy.fromfile", "pathlib.Path", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.box_camera_to_lidar", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.points_in_rbbox", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.remove_outside_points"], ["", "def", "_calculate_num_points_in_gt", "(", "data_path", ",", "infos", ",", "relative_path", ",", "remove_outside", "=", "True", ",", "num_features", "=", "4", ")", ":", "\n", "    ", "for", "info", "in", "infos", ":", "\n", "        ", "if", "relative_path", ":", "\n", "            ", "v_path", "=", "str", "(", "pathlib", ".", "Path", "(", "data_path", ")", "/", "info", "[", "\"velodyne_path\"", "]", ")", "\n", "", "else", ":", "\n", "            ", "v_path", "=", "info", "[", "\"velodyne_path\"", "]", "\n", "", "points_v", "=", "np", ".", "fromfile", "(", "\n", "v_path", ",", "dtype", "=", "np", ".", "float32", ",", "count", "=", "-", "1", ")", ".", "reshape", "(", "[", "-", "1", ",", "num_features", "]", ")", "\n", "rect", "=", "info", "[", "'calib/R0_rect'", "]", "\n", "Trv2c", "=", "info", "[", "'calib/Tr_velo_to_cam'", "]", "\n", "P2", "=", "info", "[", "'calib/P2'", "]", "\n", "if", "remove_outside", ":", "\n", "            ", "points_v", "=", "remove_outside_points", "(", "points_v", ",", "rect", ",", "Trv2c", ",", "P2", ",", "\n", "info", "[", "\"img_shape\"", "]", ")", "\n", "\n", "# points_v = points_v[points_v[:, 0] > 0]", "\n", "", "annos", "=", "info", "[", "'annos'", "]", "\n", "num_obj", "=", "len", "(", "[", "n", "for", "n", "in", "annos", "[", "'name'", "]", "if", "n", "!=", "'DontCare'", "]", ")", "\n", "# annos = kitti.filter_kitti_anno(annos, ['DontCare'])", "\n", "dims", "=", "annos", "[", "'dimensions'", "]", "[", ":", "num_obj", "]", "\n", "loc", "=", "annos", "[", "'location'", "]", "[", ":", "num_obj", "]", "\n", "rots", "=", "annos", "[", "'rotation_y'", "]", "[", ":", "num_obj", "]", "\n", "gt_boxes_camera", "=", "np", ".", "concatenate", "(", "\n", "[", "loc", ",", "dims", ",", "rots", "[", "...", ",", "np", ".", "newaxis", "]", "]", ",", "axis", "=", "1", ")", "\n", "gt_boxes_lidar", "=", "box_camera_to_lidar", "(", "\n", "gt_boxes_camera", ",", "rect", ",", "Trv2c", ")", "\n", "indices", "=", "points_in_rbbox", "(", "points_v", "[", ":", ",", ":", "3", "]", ",", "gt_boxes_lidar", ")", "\n", "num_points_in_gt", "=", "indices", ".", "sum", "(", "0", ")", "\n", "num_ignored", "=", "len", "(", "annos", "[", "'dimensions'", "]", ")", "-", "num_obj", "\n", "num_points_in_gt", "=", "np", ".", "concatenate", "(", "\n", "[", "num_points_in_gt", ",", "-", "np", ".", "ones", "(", "[", "num_ignored", "]", ")", "]", ")", "\n", "annos", "[", "\"num_points_in_gt\"", "]", "=", "num_points_in_gt", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.create_data.create_kitti_info_file": [[50, 105], ["create_data._read_imageset_file", "create_data._read_imageset_file", "create_data._read_imageset_file", "create_data._read_imageset_file", "print", "tools.get_kitti_image_info", "create_data._calculate_num_points_in_gt", "print", "tools.get_kitti_image_info", "create_data._calculate_num_points_in_gt", "print", "print", "tools.get_kitti_image_info", "print", "os.join", "os.join", "os.join", "os.join", "pathlib.Path", "pathlib.Path", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.create_data._read_imageset_file", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.create_data._read_imageset_file", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.create_data._read_imageset_file", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.create_data._read_imageset_file", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.get_kitti_image_info", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.create_data._calculate_num_points_in_gt", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.get_kitti_image_info", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.create_data._calculate_num_points_in_gt", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.get_kitti_image_info"], ["", "", "def", "create_kitti_info_file", "(", "data_path", ",", "\n", "save_path", "=", "None", ",", "\n", "relative_path", "=", "True", ")", ":", "\n", "    ", "train_img_ids", "=", "_read_imageset_file", "(", "osp", ".", "join", "(", "data_path", ",", "\"ImageSets/train.txt\"", ")", ")", "\n", "val_img_ids", "=", "_read_imageset_file", "(", "osp", ".", "join", "(", "data_path", ",", "\"ImageSets/val.txt\"", ")", ")", "\n", "trainval_img_ids", "=", "_read_imageset_file", "(", "osp", ".", "join", "(", "data_path", ",", "\"ImageSets/trainval.txt\"", ")", ")", "\n", "test_img_ids", "=", "_read_imageset_file", "(", "osp", ".", "join", "(", "data_path", ",", "\"ImageSets/test.txt\"", ")", ")", "\n", "\n", "print", "(", "\"Generate info. this may take several minutes.\"", ")", "\n", "if", "save_path", "is", "None", ":", "\n", "        ", "save_path", "=", "pathlib", ".", "Path", "(", "data_path", ")", "\n", "", "else", ":", "\n", "        ", "save_path", "=", "pathlib", ".", "Path", "(", "save_path", ")", "\n", "", "kitti_infos_train", "=", "kitti", ".", "get_kitti_image_info", "(", "\n", "data_path", ",", "\n", "training", "=", "True", ",", "\n", "velodyne", "=", "True", ",", "\n", "calib", "=", "True", ",", "\n", "image_ids", "=", "train_img_ids", ",", "\n", "relative_path", "=", "relative_path", ")", "\n", "_calculate_num_points_in_gt", "(", "data_path", ",", "kitti_infos_train", ",", "relative_path", ")", "\n", "filename", "=", "save_path", "/", "'kitti_infos_train.pkl'", "\n", "print", "(", "f\"Kitti info train file is saved to {filename}\"", ")", "\n", "with", "open", "(", "filename", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "kitti_infos_train", ",", "f", ")", "\n", "", "kitti_infos_val", "=", "kitti", ".", "get_kitti_image_info", "(", "\n", "data_path", ",", "\n", "training", "=", "True", ",", "\n", "velodyne", "=", "True", ",", "\n", "calib", "=", "True", ",", "\n", "image_ids", "=", "val_img_ids", ",", "\n", "relative_path", "=", "relative_path", ")", "\n", "_calculate_num_points_in_gt", "(", "data_path", ",", "kitti_infos_val", ",", "relative_path", ")", "\n", "filename", "=", "save_path", "/", "'kitti_infos_val.pkl'", "\n", "print", "(", "f\"Kitti info val file is saved to {filename}\"", ")", "\n", "with", "open", "(", "filename", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "kitti_infos_val", ",", "f", ")", "\n", "\n", "", "filename", "=", "save_path", "/", "'kitti_infos_trainval.pkl'", "\n", "print", "(", "f\"Kitti info trainval file is saved to {filename}\"", ")", "\n", "with", "open", "(", "filename", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "kitti_infos_train", "+", "kitti_infos_val", ",", "f", ")", "\n", "\n", "", "kitti_infos_test", "=", "kitti", ".", "get_kitti_image_info", "(", "\n", "data_path", ",", "\n", "training", "=", "False", ",", "\n", "label_info", "=", "False", ",", "\n", "velodyne", "=", "True", ",", "\n", "calib", "=", "True", ",", "\n", "image_ids", "=", "test_img_ids", ",", "\n", "relative_path", "=", "relative_path", ")", "\n", "filename", "=", "save_path", "/", "'kitti_infos_test.pkl'", "\n", "print", "(", "f\"Kitti info test file is saved to {filename}\"", ")", "\n", "with", "open", "(", "filename", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "kitti_infos_test", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.create_data._create_reduced_point_cloud": [[107, 141], ["tqdm.tqdm", "open", "pickle.load", "numpy.fromfile().reshape", "mmdet.core.bbox3d.geometry.remove_outside_points", "pathlib.Path", "str", "open", "mmdet.core.bbox3d.geometry.remove_outside_points.tofile", "numpy.fromfile", "str", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.remove_outside_points"], ["", "", "def", "_create_reduced_point_cloud", "(", "data_path", ",", "\n", "info_path", ",", "\n", "save_path", "=", "None", ",", "\n", "back", "=", "False", ")", ":", "\n", "    ", "with", "open", "(", "info_path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "kitti_infos", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "for", "info", "in", "prog_bar", "(", "kitti_infos", ")", ":", "\n", "        ", "v_path", "=", "info", "[", "'velodyne_path'", "]", "\n", "v_path", "=", "pathlib", ".", "Path", "(", "data_path", ")", "/", "v_path", "\n", "points_v", "=", "np", ".", "fromfile", "(", "\n", "str", "(", "v_path", ")", ",", "dtype", "=", "np", ".", "float32", ",", "count", "=", "-", "1", ")", ".", "reshape", "(", "[", "-", "1", ",", "4", "]", ")", "\n", "rect", "=", "info", "[", "'calib/R0_rect'", "]", "\n", "P2", "=", "info", "[", "'calib/P2'", "]", "\n", "Trv2c", "=", "info", "[", "'calib/Tr_velo_to_cam'", "]", "\n", "# first remove z < 0 points", "\n", "# keep = points_v[:, -1] > 0", "\n", "# points_v = points_v[keep]", "\n", "# then remove outside.", "\n", "if", "back", ":", "\n", "            ", "points_v", "[", ":", ",", "0", "]", "=", "-", "points_v", "[", ":", ",", "0", "]", "\n", "", "points_v", "=", "remove_outside_points", "(", "points_v", ",", "rect", ",", "Trv2c", ",", "P2", ",", "\n", "info", "[", "\"img_shape\"", "]", ")", "\n", "\n", "if", "save_path", "is", "None", ":", "\n", "            ", "save_filename", "=", "v_path", ".", "parent", ".", "parent", "/", "(", "v_path", ".", "parent", ".", "stem", "+", "\"_reduced\"", ")", "/", "v_path", ".", "name", "\n", "# save_filename = str(v_path) + '_reduced'", "\n", "if", "back", ":", "\n", "                ", "save_filename", "+=", "\"_back\"", "\n", "", "", "else", ":", "\n", "            ", "save_filename", "=", "str", "(", "pathlib", ".", "Path", "(", "save_path", ")", "/", "v_path", ".", "name", ")", "\n", "if", "back", ":", "\n", "                ", "save_filename", "+=", "\"_back\"", "\n", "", "", "with", "open", "(", "save_filename", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "points_v", ".", "tofile", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.create_data.create_reduced_point_cloud": [[143, 166], ["create_data._create_reduced_point_cloud", "create_data._create_reduced_point_cloud", "create_data._create_reduced_point_cloud", "create_data._create_reduced_point_cloud", "create_data._create_reduced_point_cloud", "create_data._create_reduced_point_cloud", "pathlib.Path", "pathlib.Path", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.create_data._create_reduced_point_cloud", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.create_data._create_reduced_point_cloud", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.create_data._create_reduced_point_cloud", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.create_data._create_reduced_point_cloud", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.create_data._create_reduced_point_cloud", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.create_data._create_reduced_point_cloud"], ["", "", "", "def", "create_reduced_point_cloud", "(", "data_path", ",", "\n", "train_info_path", "=", "None", ",", "\n", "val_info_path", "=", "None", ",", "\n", "test_info_path", "=", "None", ",", "\n", "save_path", "=", "None", ",", "\n", "with_back", "=", "False", ")", ":", "\n", "    ", "if", "train_info_path", "is", "None", ":", "\n", "        ", "train_info_path", "=", "pathlib", ".", "Path", "(", "data_path", ")", "/", "'kitti_infos_train.pkl'", "\n", "", "if", "val_info_path", "is", "None", ":", "\n", "        ", "val_info_path", "=", "pathlib", ".", "Path", "(", "data_path", ")", "/", "'kitti_infos_val.pkl'", "\n", "", "if", "test_info_path", "is", "None", ":", "\n", "        ", "test_info_path", "=", "pathlib", ".", "Path", "(", "data_path", ")", "/", "'kitti_infos_test.pkl'", "\n", "\n", "", "_create_reduced_point_cloud", "(", "data_path", ",", "train_info_path", ",", "save_path", ")", "\n", "_create_reduced_point_cloud", "(", "data_path", ",", "val_info_path", ",", "save_path", ")", "\n", "_create_reduced_point_cloud", "(", "data_path", ",", "test_info_path", ",", "save_path", ")", "\n", "if", "with_back", ":", "\n", "        ", "_create_reduced_point_cloud", "(", "\n", "data_path", ",", "train_info_path", ",", "save_path", ",", "back", "=", "True", ")", "\n", "_create_reduced_point_cloud", "(", "\n", "data_path", ",", "val_info_path", ",", "save_path", ",", "back", "=", "True", ")", "\n", "_create_reduced_point_cloud", "(", "\n", "data_path", ",", "test_info_path", ",", "save_path", ",", "back", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.create_data.create_groundtruth_database": [[168, 271], ["pathlib.Path", "pathlib.Path.mkdir", "tqdm.tqdm", "all_db_infos.items", "pathlib.Path", "open", "pickle.load", "list", "list.pop", "numpy.fromfile().reshape", "numpy.sum", "mmdet.core.bbox3d.geometry.box_camera_to_lidar", "numpy.full", "mmdet.core.bbox3d.geometry.points_in_rbbox", "range", "print", "open", "pickle.dump", "tools.get_classes", "list.index", "str", "mmdet.core.bbox3d.geometry.remove_outside_points", "tools.anno_to_rbboxes", "numpy.arange", "numpy.fromfile", "open", "gt_points.tofile", "all_db_infos[].append", "str", "str", "len"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.box_camera_to_lidar", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.points_in_rbbox", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.get_classes", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.bbox3d.geometry.remove_outside_points", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.kitti_common.anno_to_rbboxes"], ["", "", "def", "create_groundtruth_database", "(", "data_path", ",", "\n", "info_path", "=", "None", ",", "\n", "used_classes", "=", "None", ",", "\n", "database_save_path", "=", "None", ",", "\n", "db_info_save_path", "=", "None", ",", "\n", "relative_path", "=", "True", ",", "\n", "lidar_only", "=", "False", ",", "\n", "bev_only", "=", "False", ",", "\n", "coors_range", "=", "None", ")", ":", "\n", "    ", "root_path", "=", "pathlib", ".", "Path", "(", "data_path", ")", "\n", "if", "info_path", "is", "None", ":", "\n", "        ", "info_path", "=", "root_path", "/", "'kitti_infos_train.pkl'", "\n", "", "if", "database_save_path", "is", "None", ":", "\n", "        ", "database_save_path", "=", "root_path", "/", "'gt_database'", "\n", "", "else", ":", "\n", "        ", "database_save_path", "=", "pathlib", ".", "Path", "(", "database_save_path", ")", "\n", "", "if", "db_info_save_path", "is", "None", ":", "\n", "        ", "db_info_save_path", "=", "root_path", "/", "\"kitti_dbinfos_train.pkl\"", "\n", "", "database_save_path", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "info_path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "kitti_infos", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "all_db_infos", "=", "{", "}", "\n", "if", "used_classes", "is", "None", ":", "\n", "        ", "used_classes", "=", "list", "(", "kitti", ".", "get_classes", "(", ")", ")", "\n", "used_classes", ".", "pop", "(", "used_classes", ".", "index", "(", "'DontCare'", ")", ")", "\n", "", "for", "name", "in", "used_classes", ":", "\n", "        ", "all_db_infos", "[", "name", "]", "=", "[", "]", "\n", "", "group_counter", "=", "0", "\n", "for", "info", "in", "prog_bar", "(", "kitti_infos", ")", ":", "\n", "        ", "velodyne_path", "=", "info", "[", "'velodyne_path'", "]", "\n", "if", "relative_path", ":", "\n", "            ", "velodyne_path", "=", "str", "(", "root_path", "/", "velodyne_path", ")", "\n", "", "num_features", "=", "4", "\n", "if", "'pointcloud_num_features'", "in", "info", ":", "\n", "            ", "num_features", "=", "info", "[", "'pointcloud_num_features'", "]", "\n", "", "points", "=", "np", ".", "fromfile", "(", "\n", "velodyne_path", ",", "dtype", "=", "np", ".", "float32", ",", "count", "=", "-", "1", ")", ".", "reshape", "(", "[", "-", "1", ",", "num_features", "]", ")", "\n", "\n", "image_idx", "=", "info", "[", "\"image_idx\"", "]", "\n", "rect", "=", "info", "[", "'calib/R0_rect'", "]", "\n", "P2", "=", "info", "[", "'calib/P2'", "]", "\n", "Trv2c", "=", "info", "[", "'calib/Tr_velo_to_cam'", "]", "\n", "if", "not", "lidar_only", ":", "\n", "            ", "points", "=", "remove_outside_points", "(", "points", ",", "rect", ",", "Trv2c", ",", "P2", ",", "\n", "info", "[", "\"img_shape\"", "]", ")", "\n", "\n", "", "annos", "=", "info", "[", "\"annos\"", "]", "\n", "names", "=", "annos", "[", "\"name\"", "]", "\n", "bboxes", "=", "annos", "[", "\"bbox\"", "]", "\n", "difficulty", "=", "annos", "[", "\"difficulty\"", "]", "\n", "gt_idxes", "=", "annos", "[", "\"index\"", "]", "\n", "num_obj", "=", "np", ".", "sum", "(", "annos", "[", "\"index\"", "]", ">=", "0", ")", "\n", "rbbox_cam", "=", "kitti", ".", "anno_to_rbboxes", "(", "annos", ")", "[", ":", "num_obj", "]", "\n", "rbbox_lidar", "=", "box_camera_to_lidar", "(", "rbbox_cam", ",", "rect", ",", "Trv2c", ")", "\n", "if", "bev_only", ":", "# set z and h to limits", "\n", "            ", "assert", "coors_range", "is", "not", "None", "\n", "rbbox_lidar", "[", ":", ",", "2", "]", "=", "coors_range", "[", "2", "]", "\n", "rbbox_lidar", "[", ":", ",", "5", "]", "=", "coors_range", "[", "5", "]", "-", "coors_range", "[", "2", "]", "\n", "\n", "", "group_dict", "=", "{", "}", "\n", "group_ids", "=", "np", ".", "full", "(", "[", "bboxes", ".", "shape", "[", "0", "]", "]", ",", "-", "1", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "if", "\"group_ids\"", "in", "annos", ":", "\n", "            ", "group_ids", "=", "annos", "[", "\"group_ids\"", "]", "\n", "", "else", ":", "\n", "            ", "group_ids", "=", "np", ".", "arange", "(", "bboxes", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "", "point_indices", "=", "points_in_rbbox", "(", "points", ",", "rbbox_lidar", ")", "\n", "for", "i", "in", "range", "(", "num_obj", ")", ":", "\n", "            ", "filename", "=", "f\"{image_idx}_{names[i]}_{gt_idxes[i]}.bin\"", "\n", "filepath", "=", "database_save_path", "/", "filename", "\n", "gt_points", "=", "points", "[", "point_indices", "[", ":", ",", "i", "]", "]", "\n", "\n", "gt_points", "[", ":", ",", ":", "3", "]", "-=", "rbbox_lidar", "[", "i", ",", ":", "3", "]", "\n", "with", "open", "(", "filepath", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "gt_points", ".", "tofile", "(", "f", ")", "\n", "", "if", "names", "[", "i", "]", "in", "used_classes", ":", "\n", "                ", "if", "relative_path", ":", "\n", "                    ", "db_path", "=", "str", "(", "database_save_path", ".", "stem", "+", "\"/\"", "+", "filename", ")", "\n", "", "else", ":", "\n", "                    ", "db_path", "=", "str", "(", "filepath", ")", "\n", "", "db_info", "=", "{", "\n", "\"name\"", ":", "names", "[", "i", "]", ",", "\n", "\"path\"", ":", "db_path", ",", "\n", "\"image_idx\"", ":", "image_idx", ",", "\n", "\"gt_idx\"", ":", "gt_idxes", "[", "i", "]", ",", "\n", "\"box3d_lidar\"", ":", "rbbox_lidar", "[", "i", "]", ",", "\n", "\"num_points_in_gt\"", ":", "gt_points", ".", "shape", "[", "0", "]", ",", "\n", "\"difficulty\"", ":", "difficulty", "[", "i", "]", ",", "\n", "}", "\n", "\n", "local_group_id", "=", "group_ids", "[", "i", "]", "\n", "# if local_group_id >= 0:", "\n", "if", "local_group_id", "not", "in", "group_dict", ":", "\n", "                    ", "group_dict", "[", "local_group_id", "]", "=", "group_counter", "\n", "group_counter", "+=", "1", "\n", "", "db_info", "[", "\"group_id\"", "]", "=", "group_dict", "[", "local_group_id", "]", "\n", "if", "\"score\"", "in", "annos", ":", "\n", "                    ", "db_info", "[", "\"score\"", "]", "=", "annos", "[", "\"score\"", "]", "[", "i", "]", "\n", "", "all_db_infos", "[", "names", "[", "i", "]", "]", ".", "append", "(", "db_info", ")", "\n", "", "", "", "for", "k", ",", "v", "in", "all_db_infos", ".", "items", "(", ")", ":", "\n", "        ", "print", "(", "f\"load {len(v)} {k} database infos\"", ")", "\n", "\n", "", "with", "open", "(", "db_info_save_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "all_db_infos", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.env.init_dist": [[12, 23], ["torch.get_start_method", "torch.set_start_method", "env._init_dist_pytorch", "env._init_dist_mpi", "env._init_dist_slurm", "ValueError"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.env._init_dist_pytorch", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.env._init_dist_mpi", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.env._init_dist_slurm"], ["def", "init_dist", "(", "launcher", ",", "backend", "=", "'nccl'", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "mp", ".", "get_start_method", "(", "allow_none", "=", "True", ")", "is", "None", ":", "\n", "        ", "mp", ".", "set_start_method", "(", "'spawn'", ")", "\n", "", "if", "launcher", "==", "'pytorch'", ":", "\n", "        ", "_init_dist_pytorch", "(", "backend", ",", "**", "kwargs", ")", "\n", "", "elif", "launcher", "==", "'mpi'", ":", "\n", "        ", "_init_dist_mpi", "(", "backend", ",", "**", "kwargs", ")", "\n", "", "elif", "launcher", "==", "'slurm'", ":", "\n", "        ", "_init_dist_slurm", "(", "backend", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Invalid launcher type: {}'", ".", "format", "(", "launcher", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.env._init_dist_pytorch": [[25, 31], ["int", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.init_process_group"], "function", ["None"], ["", "", "def", "_init_dist_pytorch", "(", "backend", ",", "**", "kwargs", ")", ":", "\n", "# TODO: use local_rank instead of rank % num_gpus", "\n", "    ", "rank", "=", "int", "(", "os", ".", "environ", "[", "'RANK'", "]", ")", "\n", "num_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "rank", "%", "num_gpus", ")", "\n", "dist", ".", "init_process_group", "(", "backend", "=", "backend", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.env._init_dist_mpi": [[33, 35], ["None"], "function", ["None"], ["", "def", "_init_dist_mpi", "(", "backend", ",", "**", "kwargs", ")", ":", "\n", "    ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.env._init_dist_slurm": [[37, 39], ["None"], "function", ["None"], ["", "def", "_init_dist_slurm", "(", "backend", ",", "**", "kwargs", ")", ":", "\n", "    ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.env.set_random_seed": [[41, 46], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all"], "function", ["None"], ["", "def", "set_random_seed", "(", "seed", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.tools.env.get_root_logger": [[48, 65], ["logging.basicConfig", "logging.getLogger", "mmcv.runner.get_dist_info", "os.path.join", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.getLogger.addHandler", "logging.getLogger.setLevel", "time.strftime", "time.localtime"], "function", ["None"], ["", "def", "get_root_logger", "(", "work_dir", ")", ":", "\n", "    ", "logging", ".", "basicConfig", "(", "\n", "format", "=", "'%(asctime)s - %(levelname)s - %(message)s'", ",", "\n", "level", "=", "logging", ".", "INFO", ")", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "rank", ",", "_", "=", "get_dist_info", "(", ")", "\n", "if", "rank", "!=", "0", ":", "\n", "        ", "logger", ".", "setLevel", "(", "'ERROR'", ")", "\n", "\n", "", "filename", "=", "'{}.log'", ".", "format", "(", "time", ".", "strftime", "(", "'%Y%m%d_%H%M%S'", ",", "time", ".", "localtime", "(", ")", ")", ")", "\n", "log_file", "=", "os", ".", "path", ".", "join", "(", "work_dir", ",", "filename", ")", "\n", "file_handler", "=", "logging", ".", "FileHandler", "(", "log_file", ",", "'w'", ")", "\n", "file_handler", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "logger", ".", "addHandler", "(", "file_handler", ")", "\n", "\n", "return", "logger", "\n", "", ""]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.train_utils.__init__.parse_losses": [[8, 26], ["collections.OrderedDict", "losses.items", "sum", "isinstance", "log_vars[].item", "loss_value.mean", "isinstance", "sum", "TypeError", "collections.OrderedDict.items", "_loss.mean"], "function", ["None"], []], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.train_utils.__init__.batch_processor": [[28, 36], ["model", "__init__.parse_losses", "dict", "len"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.train_utils.__init__.parse_losses"], []], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.train_utils.__init__.train_one_epoch": [[37, 73], ["enumerate", "cur_lr_scheduler.step", "model.train", "optimizer.zero_grad", "__init__.batch_processor", "outputs[].backward", "torch.nn.utils.clip_grad_norm_", "optimizer.step", "log_buffer.update", "float", "model.parameters", "log_buffer.average", "logger.info", "log_buffer.clear", "len"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.learning_schedules_fastai.LRSchedulerStep.step", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.backbones.resnet.ResNet.train", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.OptimWrapper.zero_grad", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.train_utils.__init__.batch_processor", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.pointnet2.pointnet2_utils.ThreeInterpolate.backward", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.learning_schedules_fastai.LRSchedulerStep.step", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.OptimWrapper.clear"], []], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.train_utils.__init__.train_model": [[75, 111], ["mmcv.runner.log_buffer.LogBuffer", "range", "__init__.train_one_epoch", "glob.glob", "glob.glob.sort", "os.path.join", "__init__.save_checkpoint", "os.path.join", "glob.glob.__len__", "range", "__init__.checkpoint_state", "os.remove", "len"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.train_utils.__init__.train_one_epoch", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.train_utils.__init__.save_checkpoint", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.utils.sequential.Sequential.__len__", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.train_utils.__init__.checkpoint_state"], []], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.train_utils.__init__.model_state_to_cpu": [[114, 119], ["model_state.items", "type", "val.cpu"], "function", ["None"], []], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.train_utils.__init__.checkpoint_state": [[121, 138], ["optimizer.state_dict", "isinstance", "__init__.model_state_to_cpu", "model.state_dict", "model.module.state_dict"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.train_utils.__init__.model_state_to_cpu"], []], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.train_utils.__init__.save_checkpoint": [[140, 149], ["torch.save", "state.pop", "torch.save"], "function", ["None"], []], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.train_utils.__init__.load_params_from_file": [[150, 185], ["print", "torch.load", "model_state_disk.items", "model.state_dict", "model.state_dict.update", "model.load_state_dict", "print", "os.path.isfile", "torch.device", "print", "print", "model.state_dict", "len", "len", "model.state_dict", "model.state_dict", "str"], "function", ["None"], []], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.train_utils.__init__.load_params_from_file2": [[186, 221], ["print", "torch.load", "model_state_disk.items", "model.state_dict", "model.state_dict.update", "model.load_state_dict", "print", "os.path.isfile", "torch.device", "print", "print", "model.state_dict", "len", "len", "model.state_dict", "model.state_dict", "str"], "function", ["None"], []], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.train_utils.__init__.load_params_from_file3": [[222, 256], ["print", "torch.load", "model_state_disk.items", "model.state_dict", "model.state_dict.update", "model.load_state_dict", "print", "os.path.isfile", "torch.device", "print", "key.split", "print", "model.state_dict", "len", "len", "model.state_dict", "model.state_dict", "str"], "function", ["None"], []], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.__init__.build_optimizer": [[9, 35], ["torch.Adam", "model.parameters", "torch.SGD", "model.parameters", "functools.partial", "fastai_optim.OptimWrapper.create", "list", "len", "get_layer_groups", "m.children", "__init__.build_optimizer.children"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.FastAIMixedOptim.create"], []], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.__init__.build_scheduler": [[37, 64], ["learning_schedules_fastai.OneCycle", "learning_schedules_fastai.CosineWarmupLR", "list", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR"], "function", ["None"], []], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.OptimWrapper.__init__": [[104, 110], ["list", "fastai_optim.OptimWrapper.opt_keys.remove", "fastai_optim.OptimWrapper.read_defaults", "fastai_optim.OptimWrapper.opt.param_groups[].keys"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.OptimWrapper.read_defaults"], ["def", "__init__", "(", "self", ",", "opt", ",", "wd", ",", "true_wd", ":", "bool", "=", "False", ",", "bn_wd", ":", "bool", "=", "True", ")", ":", "\n", "        ", "self", ".", "opt", ",", "self", ".", "true_wd", ",", "self", ".", "bn_wd", "=", "opt", ",", "true_wd", ",", "bn_wd", "\n", "self", ".", "opt_keys", "=", "list", "(", "self", ".", "opt", ".", "param_groups", "[", "0", "]", ".", "keys", "(", ")", ")", "\n", "self", ".", "opt_keys", ".", "remove", "(", "'params'", ")", "\n", "self", ".", "read_defaults", "(", ")", "\n", "self", ".", "wd", "=", "wd", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.OptimWrapper.create": [[111, 120], ["fastai_optim.split_bn_bias", "opt_func", "cls", "fastai_optim.listify", "fastai_optim.trainable_params"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.split_bn_bias", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.listify", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.trainable_params"], ["", "@", "classmethod", "\n", "def", "create", "(", "cls", ",", "opt_func", ",", "lr", ",", "\n", "layer_groups", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"Create an `optim.Optimizer` from `opt_func` with `lr`. Set lr on `layer_groups`.\"", "\n", "split_groups", "=", "split_bn_bias", "(", "layer_groups", ")", "\n", "opt", "=", "opt_func", "(", "[", "{", "'params'", ":", "trainable_params", "(", "l", ")", ",", "'lr'", ":", "0", "}", "for", "l", "in", "split_groups", "]", ")", "\n", "opt", "=", "cls", "(", "opt", ",", "**", "kwargs", ")", "\n", "opt", ".", "lr", ",", "opt", ".", "opt_func", "=", "listify", "(", "lr", ",", "layer_groups", ")", ",", "opt_func", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.OptimWrapper.new": [[121, 127], ["getattr", "fastai_optim.split_bn_bias", "getattr.", "fastai_optim.OptimWrapper.create", "fastai_optim.trainable_params"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.split_bn_bias", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.FastAIMixedOptim.create", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.trainable_params"], ["", "def", "new", "(", "self", ",", "layer_groups", ")", ":", "\n", "        ", "\"Create a new `OptimWrapper` from `self` with another `layer_groups` but the same hyper-parameters.\"", "\n", "opt_func", "=", "getattr", "(", "self", ",", "'opt_func'", ",", "self", ".", "opt", ".", "__class__", ")", "\n", "split_groups", "=", "split_bn_bias", "(", "layer_groups", ")", "\n", "opt", "=", "opt_func", "(", "[", "{", "'params'", ":", "trainable_params", "(", "l", ")", ",", "'lr'", ":", "0", "}", "for", "l", "in", "split_groups", "]", ")", "\n", "return", "self", ".", "create", "(", "opt_func", ",", "self", ".", "lr", ",", "layer_groups", ",", "wd", "=", "self", ".", "wd", ",", "true_wd", "=", "self", ".", "true_wd", ",", "bn_wd", "=", "self", ".", "bn_wd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.OptimWrapper.__repr__": [[128, 130], ["repr"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "f'OptimWrapper over {repr(self.opt)}.\\nTrue weight decay: {self.true_wd}'", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.OptimWrapper.step": [[132, 150], ["fastai_optim.OptimWrapper.opt.step", "zip", "fastai_optim.OptimWrapper.set_val", "fastai_optim.listify", "p.data.mul_", "p.data.mul_"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.learning_schedules_fastai.LRSchedulerStep.step", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.OptimWrapper.set_val", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.listify"], ["", "def", "step", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"Set weight decay and step optimizer.\"", "\n", "# weight decay outside of optimizer step (AdamW)", "\n", "if", "self", ".", "true_wd", ":", "\n", "            ", "for", "lr", ",", "wd", ",", "pg1", ",", "pg2", "in", "zip", "(", "self", ".", "_lr", ",", "self", ".", "_wd", ",", "self", ".", "opt", ".", "param_groups", "[", ":", ":", "2", "]", ",", "self", ".", "opt", ".", "param_groups", "[", "1", ":", ":", "2", "]", ")", ":", "\n", "                ", "for", "p", "in", "pg1", "[", "'params'", "]", ":", "\n", "# When some parameters are fixed:  Shaoshuai Shi", "\n", "                    ", "if", "p", ".", "requires_grad", "is", "False", ":", "\n", "                        ", "continue", "\n", "", "p", ".", "data", ".", "mul_", "(", "1", "-", "wd", "*", "lr", ")", "\n", "", "if", "self", ".", "bn_wd", ":", "\n", "                    ", "for", "p", "in", "pg2", "[", "'params'", "]", ":", "\n", "# When some parameters are fixed:  Shaoshuai Shi", "\n", "                        ", "if", "p", ".", "requires_grad", "is", "False", ":", "\n", "                            ", "continue", "\n", "", "p", ".", "data", ".", "mul_", "(", "1", "-", "wd", "*", "lr", ")", "\n", "", "", "", "self", ".", "set_val", "(", "'weight_decay'", ",", "listify", "(", "0", ",", "self", ".", "_wd", ")", ")", "\n", "", "self", ".", "opt", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.OptimWrapper.zero_grad": [[151, 154], ["fastai_optim.OptimWrapper.opt.zero_grad"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.OptimWrapper.zero_grad"], ["", "def", "zero_grad", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"Clear optimizer gradients.\"", "\n", "self", ".", "opt", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.OptimWrapper.__getattr__": [[156, 158], ["getattr"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "k", ":", "str", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ".", "opt", ",", "k", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.OptimWrapper.clear": [[159, 164], ["fastai_optim.OptimWrapper.state_dict", "fastai_optim.OptimWrapper.load_state_dict"], "methods", ["None"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "\"Reset the state of the inner optimizer.\"", "\n", "sd", "=", "self", ".", "state_dict", "(", ")", "\n", "sd", "[", "'state'", "]", "=", "{", "}", "\n", "self", ".", "load_state_dict", "(", "sd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.OptimWrapper.lr": [[170, 173], ["fastai_optim.OptimWrapper.set_val", "fastai_optim.listify"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.OptimWrapper.set_val", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.listify"], ["", "@", "lr", ".", "setter", "\n", "def", "lr", "(", "self", ",", "val", ":", "float", ")", "->", "None", ":", "\n", "        ", "self", ".", "_lr", "=", "self", ".", "set_val", "(", "'lr'", ",", "listify", "(", "val", ",", "self", ".", "_lr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.OptimWrapper.mom": [[178, 185], ["fastai_optim.listify", "fastai_optim.OptimWrapper.set_val", "fastai_optim.listify", "fastai_optim.OptimWrapper.set_val", "fastai_optim.listify"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.listify", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.OptimWrapper.set_val", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.listify", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.OptimWrapper.set_val", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.listify"], ["", "@", "mom", ".", "setter", "\n", "def", "mom", "(", "self", ",", "val", ":", "float", ")", "->", "None", ":", "\n", "        ", "if", "'momentum'", "in", "self", ".", "opt_keys", ":", "\n", "            ", "self", ".", "set_val", "(", "'momentum'", ",", "listify", "(", "val", ",", "self", ".", "_mom", ")", ")", "\n", "", "elif", "'betas'", "in", "self", ".", "opt_keys", ":", "\n", "            ", "self", ".", "set_val", "(", "'betas'", ",", "(", "listify", "(", "val", ",", "self", ".", "_mom", ")", ",", "self", ".", "_beta", ")", ")", "\n", "", "self", ".", "_mom", "=", "listify", "(", "val", ",", "self", ".", "_mom", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.OptimWrapper.beta": [[190, 199], ["fastai_optim.listify", "fastai_optim.OptimWrapper.set_val", "fastai_optim.OptimWrapper.set_val", "fastai_optim.listify", "fastai_optim.listify"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.listify", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.OptimWrapper.set_val", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.OptimWrapper.set_val", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.listify", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.listify"], ["", "@", "beta", ".", "setter", "\n", "def", "beta", "(", "self", ",", "val", ":", "float", ")", "->", "None", ":", "\n", "        ", "\"Set beta (or alpha as makes sense for given optimizer).\"", "\n", "if", "val", "is", "None", ":", "return", "\n", "if", "'betas'", "in", "self", ".", "opt_keys", ":", "\n", "            ", "self", ".", "set_val", "(", "'betas'", ",", "(", "self", ".", "_mom", ",", "listify", "(", "val", ",", "self", ".", "_beta", ")", ")", ")", "\n", "", "elif", "'alpha'", "in", "self", ".", "opt_keys", ":", "\n", "            ", "self", ".", "set_val", "(", "'alpha'", ",", "listify", "(", "val", ",", "self", ".", "_beta", ")", ")", "\n", "", "self", ".", "_beta", "=", "listify", "(", "val", ",", "self", ".", "_beta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.OptimWrapper.wd": [[204, 209], ["fastai_optim.listify", "fastai_optim.OptimWrapper.set_val", "fastai_optim.listify"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.listify", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.OptimWrapper.set_val", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.listify"], ["", "@", "wd", ".", "setter", "\n", "def", "wd", "(", "self", ",", "val", ":", "float", ")", "->", "None", ":", "\n", "        ", "\"Set weight decay.\"", "\n", "if", "not", "self", ".", "true_wd", ":", "self", ".", "set_val", "(", "'weight_decay'", ",", "listify", "(", "val", ",", "self", ".", "_wd", ")", ",", "bn_groups", "=", "self", ".", "bn_wd", ")", "\n", "self", ".", "_wd", "=", "listify", "(", "val", ",", "self", ".", "_wd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.OptimWrapper.read_defaults": [[211, 219], ["fastai_optim.OptimWrapper.read_val", "fastai_optim.OptimWrapper.read_val", "fastai_optim.OptimWrapper.read_val", "fastai_optim.OptimWrapper.read_val", "fastai_optim.OptimWrapper.read_val"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.OptimWrapper.read_val", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.OptimWrapper.read_val", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.OptimWrapper.read_val", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.OptimWrapper.read_val", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.OptimWrapper.read_val"], ["", "def", "read_defaults", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"Read the values inside the optimizer for the hyper-parameters.\"", "\n", "self", ".", "_beta", "=", "None", "\n", "if", "'lr'", "in", "self", ".", "opt_keys", ":", "self", ".", "_lr", "=", "self", ".", "read_val", "(", "'lr'", ")", "\n", "if", "'momentum'", "in", "self", ".", "opt_keys", ":", "self", ".", "_mom", "=", "self", ".", "read_val", "(", "'momentum'", ")", "\n", "if", "'alpha'", "in", "self", ".", "opt_keys", ":", "self", ".", "_beta", "=", "self", ".", "read_val", "(", "'alpha'", ")", "\n", "if", "'betas'", "in", "self", ".", "opt_keys", ":", "self", ".", "_mom", ",", "self", ".", "_beta", "=", "self", ".", "read_val", "(", "'betas'", ")", "\n", "if", "'weight_decay'", "in", "self", ".", "opt_keys", ":", "self", ".", "_wd", "=", "self", ".", "read_val", "(", "'weight_decay'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.OptimWrapper.set_val": [[220, 227], ["fastai_optim.is_tuple", "zip", "zip"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.is_tuple"], ["", "def", "set_val", "(", "self", ",", "key", ":", "str", ",", "val", ",", "bn_groups", ":", "bool", "=", "True", ")", ":", "\n", "        ", "\"Set `val` inside the optimizer dictionary at `key`.\"", "\n", "if", "is_tuple", "(", "val", ")", ":", "val", "=", "[", "(", "v1", ",", "v2", ")", "for", "v1", ",", "v2", "in", "zip", "(", "*", "val", ")", "]", "\n", "for", "v", ",", "pg1", ",", "pg2", "in", "zip", "(", "val", ",", "self", ".", "opt", ".", "param_groups", "[", ":", ":", "2", "]", ",", "self", ".", "opt", ".", "param_groups", "[", "1", ":", ":", "2", "]", ")", ":", "\n", "            ", "pg1", "[", "key", "]", "=", "v", "\n", "if", "bn_groups", ":", "pg2", "[", "key", "]", "=", "v", "\n", "", "return", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.OptimWrapper.read_val": [[228, 233], ["fastai_optim.is_tuple"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.is_tuple"], ["", "def", "read_val", "(", "self", ",", "key", ":", "str", ")", ":", "\n", "        ", "\"Read a hyperparameter `key` in the optimizer dictionary.\"", "\n", "val", "=", "[", "pg", "[", "key", "]", "for", "pg", "in", "self", ".", "opt", ".", "param_groups", "[", ":", ":", "2", "]", "]", "\n", "if", "is_tuple", "(", "val", "[", "0", "]", ")", ":", "val", "=", "[", "o", "[", "0", "]", "for", "o", "in", "val", "]", ",", "[", "o", "[", "1", "]", "for", "o", "in", "val", "]", "\n", "return", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.FastAIMixedOptim.create": [[236, 253], ["fastai_optim.OptimWrapper.create", "fastai_optim.get_master", "opt_func", "range", "zip"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.FastAIMixedOptim.create", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.get_master"], ["    ", "@", "classmethod", "\n", "def", "create", "(", "cls", ",", "opt_func", ",", "lr", ",", "\n", "layer_groups", ",", "model", ",", "flat_master", "=", "False", ",", "loss_scale", "=", "512.0", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"Create an `optim.Optimizer` from `opt_func` with `lr`. Set lr on `layer_groups`.\"", "\n", "opt", "=", "OptimWrapper", ".", "create", "(", "opt_func", ",", "lr", ",", "layer_groups", ",", "**", "kwargs", ")", "\n", "opt", ".", "model_params", ",", "opt", ".", "master_params", "=", "get_master", "(", "layer_groups", ",", "flat_master", ")", "\n", "opt", ".", "flat_master", "=", "flat_master", "\n", "opt", ".", "loss_scale", "=", "loss_scale", "\n", "opt", ".", "model", "=", "model", "\n", "# Changes the optimizer so that the optimization step is done in FP32.", "\n", "# opt = self.learn.opt", "\n", "mom", ",", "wd", ",", "beta", "=", "opt", ".", "mom", ",", "opt", ".", "wd", ",", "opt", ".", "beta", "\n", "lrs", "=", "[", "lr", "for", "lr", "in", "opt", ".", "_lr", "for", "_", "in", "range", "(", "2", ")", "]", "\n", "opt_params", "=", "[", "{", "'params'", ":", "mp", ",", "'lr'", ":", "lr", "}", "for", "mp", ",", "lr", "in", "zip", "(", "opt", ".", "master_params", ",", "lrs", ")", "]", "\n", "opt", ".", "opt", "=", "opt_func", "(", "opt_params", ")", "\n", "opt", ".", "mom", ",", "opt", ".", "wd", ",", "opt", ".", "beta", "=", "mom", ",", "wd", ",", "beta", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.FastAIMixedOptim.step": [[254, 262], ["fastai_optim.model_g2master_g", "fastai_optim.OptimWrapper.step", "fastai_optim.FastAIMixedOptim.model.zero_grad", "fastai_optim.master2model", "param.grad.div_"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.model_g2master_g", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.learning_schedules_fastai.LRSchedulerStep.step", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.OptimWrapper.zero_grad", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.master2model"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "model_g2master_g", "(", "self", ".", "model_params", ",", "self", ".", "master_params", ",", "self", ".", "flat_master", ")", "\n", "for", "group", "in", "self", ".", "master_params", ":", "\n", "            ", "for", "param", "in", "group", ":", "param", ".", "grad", ".", "div_", "(", "self", ".", "loss_scale", ")", "\n", "", "super", "(", "FastAIMixedOptim", ",", "self", ")", ".", "step", "(", ")", "\n", "self", ".", "model", ".", "zero_grad", "(", ")", "\n", "# Update the params from master to model.", "\n", "master2model", "(", "self", ".", "model_params", ",", "self", ".", "master_params", ",", "self", ".", "flat_master", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.split_bn_bias": [[13, 25], ["l.children", "isinstance", "torch.nn.Sequential", "torch.nn.Sequential", "l2.append", "l1.append"], "function", ["None"], ["def", "split_bn_bias", "(", "layer_groups", ")", ":", "\n", "    ", "\"Split the layers in `layer_groups` into batchnorm (`bn_types`) and non-batchnorm groups.\"", "\n", "split_groups", "=", "[", "]", "\n", "for", "l", "in", "layer_groups", ":", "\n", "        ", "l1", ",", "l2", "=", "[", "]", ",", "[", "]", "\n", "for", "c", "in", "l", ".", "children", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "c", ",", "bn_types", ")", ":", "\n", "                ", "l2", ".", "append", "(", "c", ")", "\n", "", "else", ":", "\n", "                ", "l1", ".", "append", "(", "c", ")", "\n", "", "", "split_groups", "+=", "[", "nn", ".", "Sequential", "(", "*", "l1", ")", ",", "nn", ".", "Sequential", "(", "*", "l2", ")", "]", "\n", "", "return", "split_groups", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.get_master": [[27, 47], ["fastai_optim.split_bn_bias", "lg.parameters", "len", "torch.nn.utils.parameters_to_vector", "torch.nn.Parameter", "master_params.append", "master_params.append", "param.clone().float().detach", "torch.nn.Parameter.new", "param.data.float", "param.clone().float", "torch.nn.Parameter.size", "param.clone"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.split_bn_bias", "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.OptimWrapper.new"], ["", "def", "get_master", "(", "layer_groups", ",", "flat_master", ":", "bool", "=", "False", ")", ":", "\n", "    ", "\"Return two lists, one for the model parameters in FP16 and one for the master parameters in FP32.\"", "\n", "split_groups", "=", "split_bn_bias", "(", "layer_groups", ")", "\n", "model_params", "=", "[", "[", "param", "for", "param", "in", "lg", ".", "parameters", "(", ")", "if", "param", ".", "requires_grad", "]", "for", "lg", "in", "split_groups", "]", "\n", "if", "flat_master", ":", "\n", "        ", "master_params", "=", "[", "]", "\n", "for", "lg", "in", "model_params", ":", "\n", "            ", "if", "len", "(", "lg", ")", "!=", "0", ":", "\n", "                ", "mp", "=", "parameters_to_vector", "(", "[", "param", ".", "data", ".", "float", "(", ")", "for", "param", "in", "lg", "]", ")", "\n", "mp", "=", "torch", ".", "nn", ".", "Parameter", "(", "mp", ",", "requires_grad", "=", "True", ")", "\n", "if", "mp", ".", "grad", "is", "None", ":", "mp", ".", "grad", "=", "mp", ".", "new", "(", "*", "mp", ".", "size", "(", ")", ")", "\n", "master_params", ".", "append", "(", "[", "mp", "]", ")", "\n", "", "else", ":", "\n", "                ", "master_params", ".", "append", "(", "[", "]", ")", "\n", "", "", "return", "model_params", ",", "master_params", "\n", "", "else", ":", "\n", "        ", "master_params", "=", "[", "[", "param", ".", "clone", "(", ")", ".", "float", "(", ")", ".", "detach", "(", ")", "for", "param", "in", "lg", "]", "for", "lg", "in", "model_params", "]", "\n", "for", "mp", "in", "master_params", ":", "\n", "            ", "for", "param", "in", "mp", ":", "param", ".", "requires_grad", "=", "True", "\n", "", "return", "model_params", ",", "master_params", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.model_g2master_g": [[49, 63], ["zip", "zip", "zip", "len", "master_group[].grad.data.copy_", "torch.nn.utils.parameters_to_vector", "master.grad.data.copy_", "master.data.new", "p.grad.data.float", "master.data.size"], "function", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.OptimWrapper.new"], ["", "", "def", "model_g2master_g", "(", "model_params", ",", "master_params", ",", "flat_master", ":", "bool", "=", "False", ")", "->", "None", ":", "\n", "    ", "\"Copy the `model_params` gradients to `master_params` for the optimizer step.\"", "\n", "if", "flat_master", ":", "\n", "        ", "for", "model_group", ",", "master_group", "in", "zip", "(", "model_params", ",", "master_params", ")", ":", "\n", "            ", "if", "len", "(", "master_group", ")", "!=", "0", ":", "\n", "                ", "master_group", "[", "0", "]", ".", "grad", ".", "data", ".", "copy_", "(", "parameters_to_vector", "(", "[", "p", ".", "grad", ".", "data", ".", "float", "(", ")", "for", "p", "in", "model_group", "]", ")", ")", "\n", "", "", "", "else", ":", "\n", "        ", "for", "model_group", ",", "master_group", "in", "zip", "(", "model_params", ",", "master_params", ")", ":", "\n", "            ", "for", "model", ",", "master", "in", "zip", "(", "model_group", ",", "master_group", ")", ":", "\n", "                ", "if", "model", ".", "grad", "is", "not", "None", ":", "\n", "                    ", "if", "master", ".", "grad", "is", "None", ":", "master", ".", "grad", "=", "master", ".", "data", ".", "new", "(", "*", "master", ".", "data", ".", "size", "(", ")", ")", "\n", "master", ".", "grad", ".", "data", ".", "copy_", "(", "model", ".", "grad", ".", "data", ")", "\n", "", "else", ":", "\n", "                    ", "master", ".", "grad", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.master2model": [[65, 75], ["zip", "zip", "zip", "len", "zip", "model.data.copy_", "torch._utils._unflatten_dense_tensors", "model.data.copy_"], "function", ["None"], ["", "", "", "", "", "def", "master2model", "(", "model_params", ",", "master_params", ",", "flat_master", ":", "bool", "=", "False", ")", "->", "None", ":", "\n", "    ", "\"Copy `master_params` to `model_params`.\"", "\n", "if", "flat_master", ":", "\n", "        ", "for", "model_group", ",", "master_group", "in", "zip", "(", "model_params", ",", "master_params", ")", ":", "\n", "            ", "if", "len", "(", "model_group", ")", "!=", "0", ":", "\n", "                ", "for", "model", ",", "master", "in", "zip", "(", "model_group", ",", "_unflatten_dense_tensors", "(", "master_group", "[", "0", "]", ".", "data", ",", "model_group", ")", ")", ":", "\n", "                    ", "model", ".", "data", ".", "copy_", "(", "master", ")", "\n", "", "", "", "", "else", ":", "\n", "        ", "for", "model_group", ",", "master_group", "in", "zip", "(", "model_params", ",", "master_params", ")", ":", "\n", "            ", "for", "model", ",", "master", "in", "zip", "(", "model_group", ",", "master_group", ")", ":", "model", ".", "data", ".", "copy_", "(", "master", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.listify": [[77, 89], ["list", "isinstance", "len", "len", "type", "len", "len", "len", "isinstance"], "function", ["None"], ["", "", "", "def", "listify", "(", "p", "=", "None", ",", "q", "=", "None", ")", ":", "\n", "    ", "\"Make `p` listy and the same length as `q`.\"", "\n", "if", "p", "is", "None", ":", "\n", "        ", "p", "=", "[", "]", "\n", "", "elif", "isinstance", "(", "p", ",", "str", ")", ":", "\n", "        ", "p", "=", "[", "p", "]", "\n", "", "elif", "not", "isinstance", "(", "p", ",", "Iterable", ")", ":", "\n", "        ", "p", "=", "[", "p", "]", "\n", "", "n", "=", "q", "if", "type", "(", "q", ")", "==", "int", "else", "len", "(", "p", ")", "if", "q", "is", "None", "else", "len", "(", "q", ")", "\n", "if", "len", "(", "p", ")", "==", "1", ":", "p", "=", "p", "*", "n", "\n", "assert", "len", "(", "p", ")", "==", "n", ",", "f'List len mismatch ({len(p)} vs {n})'", "\n", "return", "list", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.trainable_params": [[91, 95], ["filter", "m.parameters"], "function", ["None"], ["", "def", "trainable_params", "(", "m", ":", "nn", ".", "Module", ")", ":", "\n", "    ", "\"Return list of trainable params in `m`.\"", "\n", "res", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "m", ".", "parameters", "(", ")", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.fastai_optim.is_tuple": [[97, 98], ["isinstance"], "function", ["None"], ["", "def", "is_tuple", "(", "x", ")", "->", "bool", ":", "return", "isinstance", "(", "x", ",", "tuple", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.learning_schedules_fastai.LRSchedulerStep.__init__": [[11, 41], ["enumerate", "enumerate", "isinstance", "isinstance", "len", "eval", "learning_schedules_fastai.LRSchedulerStep.lr_phases.append", "learning_schedules_fastai.LRSchedulerStep.lr_phases.append", "len", "eval", "learning_schedules_fastai.LRSchedulerStep.mom_phases.append", "learning_schedules_fastai.LRSchedulerStep.mom_phases.append", "len", "len", "int", "int", "int", "int", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "fai_optimizer", ":", "OptimWrapper", ",", "total_step", ",", "lr_phases", ",", "\n", "mom_phases", ")", ":", "\n", "# if not isinstance(fai_optimizer, OptimWrapper):", "\n", "#     raise TypeError('{} is not a fastai OptimWrapper'.format(", "\n", "#         type(fai_optimizer).__name__))", "\n", "        ", "self", ".", "optimizer", "=", "fai_optimizer", "\n", "self", ".", "total_step", "=", "total_step", "\n", "self", ".", "lr_phases", "=", "[", "]", "\n", "\n", "for", "i", ",", "(", "start", ",", "lambda_func", ")", "in", "enumerate", "(", "lr_phases", ")", ":", "\n", "            ", "if", "len", "(", "self", ".", "lr_phases", ")", "!=", "0", ":", "\n", "                ", "assert", "self", ".", "lr_phases", "[", "-", "1", "]", "[", "0", "]", "<", "start", "\n", "", "if", "isinstance", "(", "lambda_func", ",", "str", ")", ":", "\n", "                ", "lambda_func", "=", "eval", "(", "lambda_func", ")", "\n", "", "if", "i", "<", "len", "(", "lr_phases", ")", "-", "1", ":", "\n", "                ", "self", ".", "lr_phases", ".", "append", "(", "(", "int", "(", "start", "*", "total_step", ")", ",", "int", "(", "lr_phases", "[", "i", "+", "1", "]", "[", "0", "]", "*", "total_step", ")", ",", "lambda_func", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "lr_phases", ".", "append", "(", "(", "int", "(", "start", "*", "total_step", ")", ",", "total_step", ",", "lambda_func", ")", ")", "\n", "", "", "assert", "self", ".", "lr_phases", "[", "0", "]", "[", "0", "]", "==", "0", "\n", "self", ".", "mom_phases", "=", "[", "]", "\n", "for", "i", ",", "(", "start", ",", "lambda_func", ")", "in", "enumerate", "(", "mom_phases", ")", ":", "\n", "            ", "if", "len", "(", "self", ".", "mom_phases", ")", "!=", "0", ":", "\n", "                ", "assert", "self", ".", "mom_phases", "[", "-", "1", "]", "[", "0", "]", "<", "start", "\n", "", "if", "isinstance", "(", "lambda_func", ",", "str", ")", ":", "\n", "                ", "lambda_func", "=", "eval", "(", "lambda_func", ")", "\n", "", "if", "i", "<", "len", "(", "mom_phases", ")", "-", "1", ":", "\n", "                ", "self", ".", "mom_phases", ".", "append", "(", "(", "int", "(", "start", "*", "total_step", ")", ",", "int", "(", "mom_phases", "[", "i", "+", "1", "]", "[", "0", "]", "*", "total_step", ")", ",", "lambda_func", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "mom_phases", ".", "append", "(", "(", "int", "(", "start", "*", "total_step", ")", ",", "total_step", ",", "lambda_func", ")", ")", "\n", "", "", "assert", "self", ".", "mom_phases", "[", "0", "]", "[", "0", "]", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.learning_schedules_fastai.LRSchedulerStep.step": [[42, 49], ["func", "func"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "step", ")", ":", "\n", "        ", "for", "start", ",", "end", ",", "func", "in", "self", ".", "lr_phases", ":", "\n", "            ", "if", "step", ">=", "start", ":", "\n", "                ", "self", ".", "optimizer", ".", "lr", "=", "func", "(", "(", "step", "-", "start", ")", "/", "(", "end", "-", "start", ")", ")", "\n", "", "", "for", "start", ",", "end", ",", "func", "in", "self", ".", "mom_phases", ":", "\n", "            ", "if", "step", ">=", "start", ":", "\n", "                ", "self", ".", "optimizer", ".", "mom", "=", "func", "(", "(", "step", "-", "start", ")", "/", "(", "end", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.learning_schedules_fastai.OneCycle.__init__": [[59, 76], ["int", "learning_schedules_fastai.LRSchedulerStep.__init__", "functools.partial", "functools.partial", "functools.partial", "functools.partial"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "fai_optimizer", ",", "total_step", ",", "lr_max", ",", "moms", ",", "div_factor", ",", "\n", "pct_start", ")", ":", "\n", "        ", "self", ".", "lr_max", "=", "lr_max", "\n", "self", ".", "moms", "=", "moms", "\n", "self", ".", "div_factor", "=", "div_factor", "\n", "self", ".", "pct_start", "=", "pct_start", "\n", "a1", "=", "int", "(", "total_step", "*", "self", ".", "pct_start", ")", "\n", "a2", "=", "total_step", "-", "a1", "\n", "low_lr", "=", "self", ".", "lr_max", "/", "self", ".", "div_factor", "\n", "lr_phases", "=", "(", "(", "0", ",", "partial", "(", "annealing_cos", ",", "low_lr", ",", "self", ".", "lr_max", ")", ")", ",", "\n", "(", "self", ".", "pct_start", ",", "\n", "partial", "(", "annealing_cos", ",", "self", ".", "lr_max", ",", "low_lr", "/", "1e4", ")", ")", ")", "\n", "mom_phases", "=", "(", "(", "0", ",", "partial", "(", "annealing_cos", ",", "*", "self", ".", "moms", ")", ")", ",", "\n", "(", "self", ".", "pct_start", ",", "partial", "(", "annealing_cos", ",", "\n", "*", "self", ".", "moms", "[", ":", ":", "-", "1", "]", ")", ")", ")", "\n", "fai_optimizer", ".", "lr", ",", "fai_optimizer", ".", "mom", "=", "low_lr", ",", "self", ".", "moms", "[", "0", "]", "\n", "super", "(", ")", ".", "__init__", "(", "fai_optimizer", ",", "total_step", ",", "lr_phases", ",", "mom_phases", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.learning_schedules_fastai.CosineWarmupLR.__init__": [[79, 83], ["torch._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.learning_schedules_fastai.FakeOptim.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "T_max", ",", "eta_min", "=", "0", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "T_max", "=", "T_max", "\n", "self", ".", "eta_min", "=", "eta_min", "\n", "super", "(", "CosineWarmupLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.learning_schedules_fastai.CosineWarmupLR.get_lr": [[84, 88], ["math.cos"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "eta_min", "+", "(", "base_lr", "-", "self", ".", "eta_min", ")", "*", "\n", "(", "1", "-", "math", ".", "cos", "(", "math", ".", "pi", "*", "self", ".", "last_epoch", "/", "self", ".", "T_max", ")", ")", "/", "2", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.learning_schedules_fastai.FakeOptim.__init__": [[91, 94], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "lr", "=", "0", "\n", "self", ".", "mom", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.fregu856_ebms_3dod.optimization.learning_schedules_fastai.annealing_cos": [[51, 56], ["numpy.cos"], "function", ["None"], ["", "", "", "", "def", "annealing_cos", "(", "start", ",", "end", ",", "pct", ")", ":", "\n", "# print(pct, start, end)", "\n", "    ", "\"Cosine anneal from `start` to `end` as pct goes from 0.0 to 1.0.\"", "\n", "cos_out", "=", "np", ".", "cos", "(", "np", ".", "pi", "*", "pct", ")", "+", "1", "\n", "return", "end", "+", "(", "start", "-", "end", ")", "/", "2", "*", "cos_out", "\n", "\n"]]}