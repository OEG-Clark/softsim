{"home.repos.pwc.inspect_result.dreamflake_odi.None.eval_attacks.load_ground_truth": [[32, 46], ["open", "csv.DictReader", "image_id_list.append", "label_ori_list.append", "label_tar_list.append", "int", "int"], "function", ["None"], ["def", "load_ground_truth", "(", "csv_filename", ")", ":", "\n", "    ", "image_id_list", "=", "[", "]", "\n", "label_ori_list", "=", "[", "]", "\n", "label_tar_list", "=", "[", "]", "\n", "\n", "with", "open", "(", "csv_filename", ")", "as", "csvfile", ":", "\n", "        ", "reader", "=", "csv", ".", "DictReader", "(", "csvfile", ",", "delimiter", "=", "','", ")", "\n", "for", "row", "in", "reader", ":", "\n", "            ", "image_id_list", ".", "append", "(", "row", "[", "'ImageId'", "]", ")", "\n", "label_ori_list", ".", "append", "(", "int", "(", "row", "[", "'TrueLabel'", "]", ")", "-", "1", ")", "\n", "label_tar_list", ".", "append", "(", "int", "(", "row", "[", "'TargetClass'", "]", ")", "-", "1", ")", "\n", "\n", "\n", "", "", "return", "image_id_list", ",", "label_ori_list", ",", "label_tar_list", "\n", "\n"]], "home.repos.pwc.inspect_result.dreamflake_odi.None.eval_attacks.main": [[50, 189], ["torch.device", "torch.device", "print", "print", "torch.manual_seed", "torch.manual_seed", "torchvision.Compose", "eval_attacks.load_ground_truth", "print", "easypyxl.Workbook", "easypyxl.Workbook.new_cursor", "wb.new_cursor.write_cell", "wb.new_cursor.write_cell", "wb.new_cursor.write_cell", "enumerate", "utils.WrapperModel().to", "easypyxl.Workbook.new_cursor", "easypyxl.Workbook.new_cursor", "c.write_cell", "c.write_cell", "c.write_cell", "c.write_cell", "print", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "utils.WrapperModel().to", "source_model.eval.eval", "attack_methods.keys", "wb.new_cursor.write_cell", "print", "print", "torch.cuda.is_available", "torch.cuda.is_available", "torchvision.ToTensor", "str", "str", "str", "range", "range", "numpy.int", "range", "print", "range", "datetime.datetime.now().strftime", "utils.WrapperModel", "str", "len", "str", "len", "utils.WrapperModel", "numpy.ceil", "min", "torch.zeros().to", "torch.zeros().to", "range", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "source_model.eval.eval", "time.time", "time.time", "enumerate", "print", "eval_attacks.main.iter_source"], "function", ["home.repos.pwc.inspect_result.dreamflake_odi.None.eval_attacks.load_ground_truth"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "# Load experiment configuration", "\n", "exp_settings", "=", "exp_configuration", "[", "args", ".", "config_idx", "]", "\n", "\n", "print", "(", "args", ")", "\n", "print", "(", "exp_settings", ",", "flush", "=", "True", ")", "\n", "\n", "target_model_names", "=", "exp_settings", "[", "'target_model_names'", "]", "\n", "source_model_names", "=", "exp_settings", "[", "'source_model_names'", "]", "\n", "\n", "torch", ".", "manual_seed", "(", "42", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n", "\n", "# pre-process input image", "\n", "mean", ",", "stddev", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "# values are standard normalization for ImageNet images, ", "\n", "# from https://github.com/pytorch/examples/blob/master/imagenet/main.py", "\n", "\n", "trn", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "]", ")", "\n", "image_id_list", ",", "label_ori_list", ",", "label_tar_list", "=", "load_ground_truth", "(", "'./dataset/images.csv'", ")", "\n", "total_img_num", "=", "exp_settings", "[", "'num_images'", "]", "\n", "\n", "###################### IMPORTANT ####################", "\n", "# Comment the below line (-> # total_img_num=100) when you use full test set (1000 images). ", "\n", "total_img_num", "=", "100", "\n", "###################### IMPORTANT ####################", "\n", "\n", "\n", "image_id_list", "=", "image_id_list", "[", ":", "total_img_num", "]", "\n", "label_ori_list", "=", "label_ori_list", "[", ":", "total_img_num", "]", "\n", "label_tar_list", "=", "label_tar_list", "[", ":", "total_img_num", "]", "\n", "img_size", "=", "299", "\n", "transfer_models", "=", "[", "WrapperModel", "(", "load_model", "(", "x", ")", ",", "mean", ",", "stddev", ")", ".", "to", "(", "device", ")", "for", "x", "in", "target_model_names", "]", "#,resize=False if x in 'inception_v3' else True", "\n", "\n", "print", "(", "'Models are loaded'", ",", "flush", "=", "True", ")", "\n", "\n", "\n", "# easypyxl settings", "\n", "excel_path", "=", "'./results/NEW_EXP_'", "+", "str", "(", "args", ".", "config_idx", ")", "+", "'.xlsx'", "\n", "wb", "=", "easypyxl", ".", "Workbook", "(", "excel_path", ")", "\n", "exp_info_cursor", "=", "wb", ".", "new_cursor", "(", "\"Experiment Info\"", ",", "\"A2\"", ",", "2", ",", "overwrite", "=", "True", ")", "\n", "exp_info_cursor", ".", "write_cell", "(", "[", "'Date'", ",", "today_string", "]", ")", "\n", "exp_info_cursor", ".", "write_cell", "(", "[", "'Args'", ",", "str", "(", "args", ")", "]", ")", "\n", "exp_info_cursor", ".", "write_cell", "(", "[", "'exp_settings'", ",", "str", "(", "exp_settings", ")", "]", ")", "\n", "\n", "succs_cursors", "=", "[", "wb", ".", "new_cursor", "(", "'Succ_'", "+", "str", "(", "(", "n", "+", "1", ")", "*", "20", ")", ",", "\"A2\"", ",", "2", "+", "len", "(", "target_model_names", ")", ",", "overwrite", "=", "True", ")", "for", "n", "in", "range", "(", "exp_settings", "[", "'max_iterations'", "]", "//", "20", ")", "]", "\n", "accs_cursors", "=", "[", "wb", ".", "new_cursor", "(", "'Accs_'", "+", "str", "(", "(", "n", "+", "1", ")", "*", "20", ")", ",", "\"A2\"", ",", "2", "+", "len", "(", "target_model_names", ")", ",", "overwrite", "=", "True", ")", "for", "n", "in", "range", "(", "exp_settings", "[", "'max_iterations'", "]", "//", "20", ")", "]", "\n", "\n", "for", "c", "in", "succs_cursors", ":", "\n", "        ", "c", ".", "write_cell", "(", "[", "\"Source\"", ",", "\"Attack\"", "]", ")", "\n", "c", ".", "write_cell", "(", "target_model_names", ")", "\n", "", "for", "c", "in", "accs_cursors", ":", "\n", "        ", "c", ".", "write_cell", "(", "[", "\"Source\"", ",", "\"Attack\"", "]", ")", "\n", "c", ".", "write_cell", "(", "target_model_names", ")", "\n", "\n", "", "attack_methods", "=", "exp_settings", "[", "'attack_methods'", "]", "\n", "\n", "\n", "for", "model_i", ",", "source_model_name", "in", "enumerate", "(", "source_model_names", ")", ":", "\n", "        ", "print", "(", "source_model_name", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "batch_size", "=", "args", ".", "batch_size", "\n", "# load models", "\n", "source_model", "=", "WrapperModel", "(", "load_model", "(", "source_model_name", ")", ",", "mean", ",", "stddev", ")", ".", "to", "(", "device", ")", "\n", "source_model", "=", "source_model", ".", "eval", "(", ")", "\n", "\n", "def", "iter_source", "(", ")", ":", "\n", "            ", "num_images", "=", "0", "\n", "target_accs", "=", "{", "m", ":", "{", "k", ":", "(", "[", "0.", "]", "*", "(", "exp_settings", "[", "'max_iterations'", "]", "//", "20", ")", ")", "for", "k", "in", "attack_methods", ".", "keys", "(", ")", "}", "for", "m", "in", "target_model_names", "}", "\n", "target_succs", "=", "{", "m", ":", "{", "k", ":", "(", "[", "0.", "]", "*", "(", "exp_settings", "[", "'max_iterations'", "]", "//", "20", ")", ")", "for", "k", "in", "attack_methods", ".", "keys", "(", ")", "}", "for", "m", "in", "target_model_names", "}", "\n", "\n", "num_batches", "=", "np", ".", "int", "(", "np", ".", "ceil", "(", "len", "(", "image_id_list", ")", "/", "batch_size", ")", ")", "\n", "total_time", "=", "0.", "\n", "for", "k", "in", "range", "(", "0", ",", "num_batches", ")", ":", "\n", "                ", "batch_size_cur", "=", "min", "(", "batch_size", ",", "len", "(", "image_id_list", ")", "-", "k", "*", "batch_size", ")", "\n", "img", "=", "torch", ".", "zeros", "(", "batch_size_cur", ",", "3", ",", "img_size", ",", "img_size", ")", ".", "to", "(", "device", ")", "\n", "for", "i", "in", "range", "(", "batch_size_cur", ")", ":", "\n", "                    ", "img", "[", "i", "]", "=", "trn", "(", "Image", ".", "open", "(", "args", ".", "input_path", "+", "image_id_list", "[", "k", "*", "batch_size", "+", "i", "]", "+", "'.png'", ")", ")", "\n", "", "labels", "=", "torch", ".", "tensor", "(", "label_ori_list", "[", "k", "*", "batch_size", ":", "k", "*", "batch_size", "+", "batch_size_cur", "]", ")", ".", "to", "(", "device", ")", "\n", "target_labels", "=", "torch", ".", "tensor", "(", "label_tar_list", "[", "k", "*", "batch_size", ":", "k", "*", "batch_size", "+", "batch_size_cur", "]", ")", ".", "to", "(", "device", ")", "\n", "num_images", "+=", "batch_size_cur", "\n", "\n", "source_model", ".", "eval", "(", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "# Generate adversarial examples", "\n", "output_dict", "=", "{", "key", ":", "advanced_fgsm", "(", "atk", ",", "source_model", ",", "img", ",", "labels", ",", "target_labels", ",", "num_iter", "=", "exp_settings", "[", "'max_iterations'", "]", ",", "max_epsilon", "=", "args", ".", "epsilon", ",", "count", "=", "k", ",", "config_idx", "=", "args", ".", "config_idx", ")", "for", "key", ",", "atk", "in", "\n", "attack_methods", ".", "items", "(", ")", "}", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "total_time", "+=", "end", "-", "start", "\n", "\n", "for", "j", ",", "mod", "in", "enumerate", "(", "transfer_models", ")", ":", "\n", "                    ", "mod", ".", "eval", "(", ")", "\n", "for", "n", "in", "range", "(", "exp_settings", "[", "'max_iterations'", "]", "//", "20", ")", ":", "\n", "                        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                            ", "transfer_results_dict", "=", "{", "key", ":", "F", ".", "softmax", "(", "mod", "(", "value", "[", "n", "]", ")", ",", "dim", "=", "1", ")", ".", "max", "(", "dim", "=", "1", ")", "for", "key", ",", "value", "in", "\n", "output_dict", ".", "items", "(", ")", "}", "\n", "", "for", "a", "in", "attack_methods", ".", "keys", "(", ")", ":", "\n", "                            ", "target_succs", "[", "target_model_names", "[", "j", "]", "]", "[", "a", "]", "[", "n", "]", "+=", "(", "\n", "torch", ".", "sum", "(", "(", "transfer_results_dict", "[", "a", "]", "[", "1", "]", "==", "target_labels", ")", ".", "float", "(", ")", ")", ")", ".", "item", "(", ")", "\n", "target_accs", "[", "target_model_names", "[", "j", "]", "]", "[", "a", "]", "[", "n", "]", "+=", "(", "\n", "torch", ".", "sum", "(", "(", "transfer_results_dict", "[", "a", "]", "[", "1", "]", "==", "labels", ")", ".", "float", "(", ")", ")", ")", ".", "item", "(", ")", "\n", "if", "n", "==", "exp_settings", "[", "'max_iterations'", "]", "//", "20", "-", "1", ":", "\n", "                                ", "succ", "=", "(", "target_succs", "[", "target_model_names", "[", "j", "]", "]", "[", "a", "]", "[", "exp_settings", "[", "'max_iterations'", "]", "//", "20", "-", "1", "]", ")", "/", "num_images", "\n", "acc", "=", "(", "target_accs", "[", "target_model_names", "[", "j", "]", "]", "[", "a", "]", "[", "exp_settings", "[", "'max_iterations'", "]", "//", "20", "-", "1", "]", ")", "/", "num_images", "\n", "print", "(", "f'[{k * batch_size+batch_size_cur}/{len(image_id_list) }]Success Rate (%) on {target_model_names[j]} with {a} : {succ*100:.2f} | Acc (%) : {acc*100:.2f}'", ",", "flush", "=", "True", ")", "\n", "", "", "", "", "", "return", "target_accs", ",", "target_succs", ",", "total_time", "\n", "\n", "", "tot_time", "=", "0.", "\n", "while", "True", ":", "\n", "            ", "try", ":", "\n", "                ", "print", "(", "f\"batch={batch_size}\"", ",", "flush", "=", "True", ")", "\n", "target_accs", ",", "target_succs", ",", "tot_time", "=", "iter_source", "(", ")", "\n", "", "except", "Exception", ":", "\n", "                ", "print", "(", "\"Error\"", ",", "flush", "=", "True", ")", "\n", "traceback", ".", "print_exc", "(", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "time", ".", "sleep", "(", "5", ")", "\n", "batch_size", "=", "int", "(", "batch_size", "/", "1.1", ")", "# Auto adjust the batch size within the GPU memory", "\n", "if", "batch_size", "<", "1", ":", "\n", "                    ", "break", "\n", "", "continue", "\n", "", "print", "(", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%m-%d|%H-%M\"", ")", ",", "flush", "=", "True", ")", "\n", "break", "\n", "\n", "", "for", "a", "in", "attack_methods", ".", "keys", "(", ")", ":", "# Export experimental results", "\n", "            ", "for", "n", "in", "range", "(", "exp_settings", "[", "'max_iterations'", "]", "//", "20", ")", ":", "\n", "                ", "succs_cursors", "[", "n", "]", ".", "write_cell", "(", "[", "source_model_name", ",", "a", "]", ")", "\n", "accs_cursors", "[", "n", "]", ".", "write_cell", "(", "[", "source_model_name", ",", "a", "]", ")", "\n", "for", "j", ",", "mod", "in", "enumerate", "(", "transfer_models", ")", ":", "\n", "                    ", "final_succ", "=", "(", "target_succs", "[", "target_model_names", "[", "j", "]", "]", "[", "a", "]", "[", "n", "]", ")", "/", "total_img_num", "\n", "final_acc", "=", "(", "target_accs", "[", "target_model_names", "[", "j", "]", "]", "[", "a", "]", "[", "n", "]", ")", "/", "total_img_num", "\n", "succs_cursors", "[", "n", "]", ".", "write_cell", "(", "final_succ", "*", "100", ")", "\n", "accs_cursors", "[", "n", "]", ".", "write_cell", "(", "final_acc", "*", "100", ")", "\n", "", "", "", "exp_info_cursor", ".", "write_cell", "(", "[", "source_model_name", ",", "str", "(", "tot_time", "/", "total_img_num", ")", "]", ")", "\n", "print", "(", "'AVG TIME: '", ",", "tot_time", "/", "total_img_num", ")", "\n", "print", "(", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%m-%d|%H-%M\"", ")", ",", "flush", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dreamflake_odi.None.eval_attacks.argument_parsing": [[190, 200], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["", "", "def", "argument_parsing", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "# parser.add_argument(\"--model\", default=\"ResNet50\",", "\n", "#                     help=\"ResNet50 | DenseNet121 | inception_v3 | VGG16\")", "\n", "# parser.add_argument(\"--excel_path\", default=\"auto_results.xlsx\", help=\"path for excel files\")", "\n", "parser", ".", "add_argument", "(", "\"--batch_size\"", ",", "default", "=", "10", ",", "type", "=", "int", ",", "help", "=", "\"batch_size as an integer\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--input_path\"", ",", "default", "=", "\"./dataset/images/\"", ",", "help", "=", "\"path for test images\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--epsilon\"", ",", "default", "=", "16", ",", "type", "=", "float", ",", "help", "=", "\"batch_size as an integer\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--config_idx\"", ",", "default", "=", "101", ",", "type", "=", "int", ",", "help", "=", "\"experiment config index\"", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.dreamflake_odi.None.attacks.Render3D.__init__": [[66, 140], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "pytorch3d.renderer.RasterizationSettings", "pytorch3d.renderer.PointLights", "pytorch3d.renderer.look_at_view_transform", "pytorch3d.renderer.FoVPerspectiveCameras", "pytorch3d.renderer.Materials", "pytorch3d.renderer.blending.BlendParams", "pytorch3d.renderer.MeshRenderer", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "gkern().astype", "numpy.stack", "numpy.expand_dims", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "attacks.load_object", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "pytorch3d.renderer.MeshRasterizer", "pytorch3d.renderer.SoftPhongShader", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "attacks.gkern", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.dreamflake_odi.None.attacks.load_object", "home.repos.pwc.inspect_result.dreamflake_odi.None.attacks.gkern"], ["    ", "def", "__init__", "(", "self", ",", "config_idx", "=", "1", ",", "count", "=", "1", ")", ":", "\n", "\n", "        ", "exp_settings", "=", "exp_configuration", "[", "config_idx", "]", "# Load experiment configuration", "\n", "\n", "self", ".", "config_idx", "=", "config_idx", "\n", "self", ".", "count", "=", "count", "\n", "self", ".", "eval_count", "=", "0", "\n", "\n", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "raster_settings", "=", "RasterizationSettings", "(", "\n", "image_size", "=", "299", ",", "\n", "blur_radius", "=", "0.0", ",", "\n", "faces_per_pixel", "=", "1", ",", "\n", ")", "\n", "\n", "# Just initialization. light position and brightness are randomly set for each inference ", "\n", "self", ".", "lights", "=", "PointLights", "(", "device", "=", "self", ".", "device", ",", "ambient_color", "=", "(", "(", "0.3", ",", "0.3", ",", "0.3", ")", ",", ")", ",", "diffuse_color", "=", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", ")", ",", "specular_color", "=", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", ")", ",", "\n", "location", "=", "[", "[", "0.0", ",", "3.0", ",", "0.0", "]", "]", ")", "\n", "\n", "R", ",", "T", "=", "look_at_view_transform", "(", "dist", "=", "1.0", ",", "elev", "=", "0", ",", "azim", "=", "0", ")", "\n", "self", ".", "cameras", "=", "FoVPerspectiveCameras", "(", "device", "=", "self", ".", "device", ",", "R", "=", "R", ",", "T", "=", "T", ")", "\n", "\n", "self", ".", "materials", "=", "Materials", "(", "\n", "device", "=", "self", ".", "device", ",", "\n", "specular_color", "=", "[", "[", "1.0", ",", "1.0", ",", "1.0", "]", "]", ",", "\n", "shininess", "=", "exp_settings", "[", "'shininess'", "]", "\n", ")", "\n", "\n", "# Note: the background color of rendered images is set to -1 for proper blending", "\n", "blend_params", "=", "blending", ".", "BlendParams", "(", "background_color", "=", "[", "-", "1.", ",", "-", "1.", ",", "-", "1.", "]", ")", "\n", "\n", "\n", "# Create a renderer by composing a mesh rasterizer and a shader. ", "\n", "self", ".", "renderer", "=", "MeshRenderer", "(", "\n", "rasterizer", "=", "MeshRasterizer", "(", "\n", "cameras", "=", "self", ".", "cameras", ",", "\n", "raster_settings", "=", "raster_settings", "\n", ")", ",", "\n", "shader", "=", "SoftPhongShader", "(", "\n", "device", "=", "self", ".", "device", ",", "\n", "cameras", "=", "self", ".", "cameras", ",", "\n", "lights", "=", "self", ".", "lights", ",", "\n", "blend_params", "=", "blend_params", "\n", ")", "\n", ")", "\n", "# 3D Model setting", "\n", "# {'3d model name', ['filename', x, y, w, h, initial distance, initial elevation, initial azimuth, initial translation]}", "\n", "self", ".", "model_settings", "=", "{", "'pack'", ":", "[", "'pack.obj'", ",", "255", ",", "255", ",", "510", ",", "510", ",", "1.2", ",", "0", ",", "0", ",", "[", "0", ",", "0.02", ",", "0.", "]", "]", ",", "\n", "'cup'", ":", "[", "'cup.obj'", ",", "693", ",", "108", ",", "260", ",", "260", ",", "1.7", ",", "0", ",", "0", ",", "[", "0.", ",", "-", "0.1", ",", "0.", "]", "]", ",", "\n", "'pillow'", ":", "[", "'pillow.obj'", ",", "10", ",", "10", ",", "470", ",", "470", ",", "1.7", ",", "0", ",", "0", "]", ",", "\n", "'t_shirt'", ":", "[", "'t_shirt_lowpoly.obj'", ",", "180", ",", "194", ",", "240", ",", "240", ",", "1.2", ",", "0", ",", "0", ",", "[", "0.0", ",", "0.05", ",", "0", "]", "]", ",", "\n", "'book'", ":", "[", "'book.obj'", ",", "715", ",", "66", ",", "510", ",", "510", ",", "1.3", ",", "0", ",", "0", ",", "[", "0.3", ",", "0.", ",", "0", "]", "]", ",", "\n", "'1ball'", ":", "[", "'1ball.obj'", ",", "359", ",", "84", ",", "328", ",", "328", ",", "2.1", ",", "-", "40", ",", "-", "10", "]", ",", "\n", "'2ball'", ":", "[", "'2ball.obj'", ",", "359", ",", "84", ",", "328", ",", "328", ",", "1.9", ",", "-", "40", ",", "-", "10", ",", "[", "-", "0.1", ",", "0.", ",", "0", "]", "]", ",", "\n", "'3ball'", ":", "[", "'3ball.obj'", ",", "359", ",", "84", ",", "328", ",", "328", ",", "1.8", ",", "-", "25", ",", "-", "10", ",", "[", "-", "0.1", ",", "0.15", ",", "0", "]", "]", ",", "\n", "'4ball'", ":", "[", "'4ball.obj'", ",", "359", ",", "84", ",", "328", ",", "328", ",", "1.8", ",", "-", "25", ",", "-", "10", ",", "[", "0.", ",", "0.1", ",", "0", "]", "]", "\n", "}", "\n", "\n", "\n", "self", ".", "source_models", "=", "exp_settings", "[", "'source_3d_models'", "]", "# Import source model list", "\n", "\n", "self", ".", "background_img", "=", "torch", ".", "zeros", "(", "(", "1", ",", "3", ",", "299", ",", "299", ")", ")", ".", "to", "(", "device", ")", "\n", "\n", "for", "src_model", "in", "self", ".", "source_models", ":", "\n", "                ", "self", ".", "model_settings", "[", "src_model", "]", "[", "0", "]", "=", "load_object", "(", "self", ".", "model_settings", "[", "src_model", "]", "[", "0", "]", ")", "\n", "\n", "# The following code snippet is for 'blurred image' backgrounds.", "\n", "", "kernel_size", "=", "50", "\n", "kernel", "=", "gkern", "(", "kernel_size", ",", "15", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "gaussian_kernel", "=", "np", ".", "stack", "(", "[", "kernel", ",", "kernel", ",", "kernel", "]", ")", "\n", "gaussian_kernel", "=", "np", ".", "expand_dims", "(", "gaussian_kernel", ",", "1", ")", "\n", "self", ".", "gaussian_kernel", "=", "torch", ".", "from_numpy", "(", "gaussian_kernel", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dreamflake_odi.None.attacks.Render3D.render": [[141, 249], ["numpy.random.randint", "mesh.textures.maps_padded", "torch.interpolate().permute", "torch.interpolate().permute", "torch.interpolate().permute", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "pytorch3d.renderer.look_at_view_transform", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "compute_rotation().squeeze", "torch.matmul.to", "torch.matmul.to", "torch.matmul.to", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "pytorch3d.renderer.FoVPerspectiveCameras", "attacks.Render3D.renderer", "torch.clamp.permute", "torch.clamp.permute", "torch.clamp.permute", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "len", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "result_img.permute", "result_img_npy.squeeze().cpu().detach().numpy.squeeze().cpu().detach().numpy.squeeze().cpu().detach().numpy", "cv2.cvtColor", "cv2.imshow", "len", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "attacks.compute_rotation", "cv2.waitKey", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "img.clone().detach", "torch.conv2d", "torch.conv2d", "torch.conv2d", "result_img_npy.squeeze().cpu().detach().numpy.squeeze().cpu().detach().numpy.squeeze().cpu().detach", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.FloatTensor().view().to", "torch.FloatTensor().view().to", "torch.FloatTensor().view().to", "torch.FloatTensor().view().to", "torch.FloatTensor().view().to", "torch.FloatTensor().view().to", "torch.FloatTensor().view().to", "torch.FloatTensor().view().to", "torch.FloatTensor().view().to", "torch.clamp.sum", "torch.clamp.sum", "torch.clamp.sum", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "img.clone", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.FloatTensor().view().to", "torch.FloatTensor().view().to", "torch.FloatTensor().view().to", "torch.FloatTensor().view().to", "torch.FloatTensor().view().to", "torch.FloatTensor().view().to", "torch.FloatTensor().view().to", "torch.FloatTensor().view().to", "torch.FloatTensor().view().to", "result_img_npy.squeeze().cpu().detach().numpy.squeeze().cpu().detach().numpy.squeeze().cpu", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "result_img_npy.squeeze().cpu().detach().numpy.squeeze().cpu().detach().numpy.squeeze", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.dreamflake_odi.None.attacks.compute_rotation"], ["", "def", "render", "(", "self", ",", "img", ")", ":", "\n", "        ", "self", ".", "eval_count", "+=", "1", "\n", "\n", "exp_settings", "=", "exp_configuration", "[", "self", ".", "config_idx", "]", "\n", "\n", "# Default experimental settings.", "\n", "if", "'background_type'", "not", "in", "exp_settings", ":", "\n", "            ", "exp_settings", "[", "'background_type'", "]", "=", "'none'", "\n", "", "if", "'texture_type'", "not", "in", "exp_settings", ":", "\n", "            ", "exp_settings", "[", "'texture_type'", "]", "=", "'none'", "\n", "", "if", "'visualize'", "not", "in", "exp_settings", ":", "\n", "            ", "exp_settings", "[", "'visualize'", "]", "=", "False", "\n", "\n", "", "x_adv", "=", "img", "\n", "# Randomly select an object from the source object pool", "\n", "pick_idx", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "len", "(", "self", ".", "source_models", ")", ")", "\n", "\n", "# Load the 3D mesh", "\n", "mesh", "=", "self", ".", "model_settings", "[", "self", ".", "source_models", "[", "pick_idx", "]", "]", "[", "0", "]", "\n", "\n", "# Load the texture map", "\n", "texture_image", "=", "mesh", ".", "textures", ".", "maps_padded", "(", ")", "\n", "\n", "texture_type", "=", "exp_settings", "[", "'texture_type'", "]", "\n", "\n", "if", "texture_type", "==", "'random_pixel'", ":", "\n", "            ", "texture_image", ".", "data", "=", "torch", ".", "rand_like", "(", "texture_image", ",", "device", "=", "device", ")", "\n", "", "elif", "texture_type", "==", "'random_solid'", ":", "# Default setting", "\n", "            ", "texture_image", ".", "data", "=", "torch", ".", "ones_like", "(", "texture_image", ",", "device", "=", "device", ")", "*", "(", "torch", ".", "rand", "(", "(", "1", ",", "1", ",", "1", ",", "3", ")", ",", "device", "=", "device", ")", "*", "0.6", "+", "0.1", ")", "\n", "", "elif", "texture_type", "==", "'custom'", ":", "\n", "            ", "texture_image", ".", "data", "=", "torch", ".", "ones_like", "(", "texture_image", ",", "device", "=", "device", ")", "*", "torch", ".", "FloatTensor", "(", "[", "0", "/", "255.", ",", "0.", "/", "255.", ",", "0.", "/", "255.", "]", ")", ".", "view", "(", "(", "1", ",", "1", ",", "1", ",", "3", ")", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "(", "pattern_h", ",", "pattern_w", ")", "=", "(", "self", ".", "model_settings", "[", "self", ".", "source_models", "[", "pick_idx", "]", "]", "[", "4", "]", ",", "self", ".", "model_settings", "[", "self", ".", "source_models", "[", "pick_idx", "]", "]", "[", "3", "]", ")", "\n", "\n", "# Resize the input image", "\n", "resized_x_adv", "=", "F", ".", "interpolate", "(", "x_adv", ",", "size", "=", "(", "pattern_h", ",", "pattern_w", ")", ",", "mode", "=", "'bilinear'", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "# Insert the resized image into the canvas area of the texture map", "\n", "(", "x", ",", "y", ")", "=", "self", ".", "model_settings", "[", "self", ".", "source_models", "[", "pick_idx", "]", "]", "[", "1", "]", ",", "self", ".", "model_settings", "[", "self", ".", "source_models", "[", "pick_idx", "]", "]", "[", "2", "]", "\n", "texture_image", "[", ":", ",", "y", ":", "y", "+", "pattern_h", ",", "x", ":", "x", "+", "pattern_w", ",", ":", "]", "=", "resized_x_adv", "\n", "\n", "# Adjust the light parameters", "\n", "self", ".", "lights", ".", "location", "=", "torch", ".", "tensor", "(", "exp_settings", "[", "'light_location'", "]", ",", "device", "=", "device", ")", "[", "None", "]", "+", "(", "torch", ".", "rand", "(", "(", "3", ",", ")", ",", "device", "=", "device", ")", "*", "exp_settings", "[", "'rand_light_location'", "]", "-", "exp_settings", "[", "'rand_light_location'", "]", "/", "2", ")", "\n", "self", ".", "lights", ".", "ambient_color", "=", "torch", ".", "tensor", "(", "[", "exp_settings", "[", "'ambient_color'", "]", "]", "*", "3", ",", "device", "=", "device", ")", "[", "None", "]", "+", "(", "torch", ".", "rand", "(", "(", "1", ",", ")", ",", "device", "=", "self", ".", "device", ")", "*", "exp_settings", "[", "'rand_ambient_color'", "]", ")", "\n", "self", ".", "lights", ".", "diffuse_color", "=", "torch", ".", "tensor", "(", "[", "exp_settings", "[", "'diffuse_color'", "]", "]", "*", "3", ",", "device", "=", "device", ")", "[", "None", "]", "+", "(", "torch", ".", "rand", "(", "(", "1", ",", ")", ",", "device", "=", "self", ".", "device", ")", "*", "exp_settings", "[", "'rand_diffuse_color'", "]", ")", "\n", "self", ".", "lights", ".", "specular_color", "=", "torch", ".", "tensor", "(", "[", "exp_settings", "[", "'specular_color'", "]", "]", "*", "3", ",", "device", "=", "device", ")", "[", "None", "]", "\n", "\n", "\n", "# Adjust the camera parameters", "\n", "rand_elev", "=", "torch", ".", "randint", "(", "exp_settings", "[", "'rand_elev'", "]", "[", "0", "]", ",", "exp_settings", "[", "'rand_elev'", "]", "[", "1", "]", "+", "1", ",", "(", "1", ",", ")", ")", "\n", "rand_azim", "=", "torch", ".", "randint", "(", "exp_settings", "[", "'rand_azim'", "]", "[", "0", "]", ",", "exp_settings", "[", "'rand_azim'", "]", "[", "1", "]", "+", "1", ",", "(", "1", ",", ")", ")", "\n", "rand_dist", "=", "(", "torch", ".", "rand", "(", "(", "1", ",", ")", ")", "*", "exp_settings", "[", "'rand_dist'", "]", "+", "exp_settings", "[", "'min_dist'", "]", ")", "\n", "rand_angle", "=", "torch", ".", "randint", "(", "exp_settings", "[", "'rand_angle'", "]", "[", "0", "]", ",", "exp_settings", "[", "'rand_angle'", "]", "[", "1", "]", "+", "1", ",", "(", "1", ",", ")", ")", "\n", "\n", "\n", "\n", "R", ",", "T", "=", "look_at_view_transform", "(", "dist", "=", "(", "self", ".", "model_settings", "[", "self", ".", "source_models", "[", "pick_idx", "]", "]", "[", "5", "]", ")", "*", "rand_dist", ",", "elev", "=", "self", ".", "model_settings", "[", "self", ".", "source_models", "[", "pick_idx", "]", "]", "[", "6", "]", "+", "rand_elev", ",", "\n", "azim", "=", "self", ".", "model_settings", "[", "self", ".", "source_models", "[", "pick_idx", "]", "]", "[", "7", "]", "+", "rand_azim", ",", "up", "=", "(", "(", "0", ",", "1", ",", "0", ")", ",", ")", ")", "\n", "\n", "if", "len", "(", "self", ".", "model_settings", "[", "self", ".", "source_models", "[", "pick_idx", "]", "]", ")", ">", "8", ":", "# Apply initial translation if it is given.", "\n", "            ", "TT", "=", "T", "+", "torch", ".", "FloatTensor", "(", "self", ".", "model_settings", "[", "self", ".", "source_models", "[", "pick_idx", "]", "]", "[", "8", "]", ")", "\n", "", "else", ":", "\n", "            ", "TT", "=", "T", "\n", "\n", "# Compute rotation matrix for tilt", "\n", "", "angles", "=", "torch", ".", "FloatTensor", "(", "[", "[", "0", ",", "0", ",", "rand_angle", "*", "math", ".", "pi", "/", "180", "]", "]", ")", ".", "to", "(", "device", ")", "\n", "rot", "=", "compute_rotation", "(", "angles", ")", ".", "squeeze", "(", ")", "\n", "R", "=", "R", ".", "to", "(", "device", ")", "\n", "\n", "R", "=", "torch", ".", "matmul", "(", "rot", ",", "R", ")", "\n", "\n", "self", ".", "cameras", "=", "FoVPerspectiveCameras", "(", "device", "=", "self", ".", "device", ",", "R", "=", "R", ",", "T", "=", "TT", ")", "\n", "\n", "# Render the mesh with the modified rendering environments.", "\n", "rendered_img", "=", "self", ".", "renderer", "(", "mesh", ",", "lights", "=", "self", ".", "lights", ",", "materials", "=", "self", ".", "materials", ",", "cameras", "=", "self", ".", "cameras", ")", "\n", "\n", "rendered_img", "=", "rendered_img", "[", ":", ",", ":", ",", ":", ",", ":", "3", "]", "# RGBA -> RGB", "\n", "\n", "rendered_img", "=", "rendered_img", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "# B X H X W X C -> B X C X H X W", "\n", "\n", "background_type", "=", "exp_settings", "[", "'background_type'", "]", "\n", "\n", "# The following code snippet is for blending", "\n", "rendered_img_mask", "=", "1.", "-", "(", "rendered_img", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "==", "-", "3.", ")", ".", "float", "(", ")", "\n", "rendered_img", "=", "torch", ".", "clamp", "(", "rendered_img", ",", "0.", ",", "1.", ")", "\n", "if", "background_type", "==", "'random_pixel'", ":", "\n", "            ", "background_img", "=", "torch", ".", "rand_like", "(", "rendered_img", ",", "device", "=", "device", ")", "\n", "result_img", "=", "background_img", "*", "(", "1", "-", "rendered_img_mask", ")", "+", "rendered_img", "*", "rendered_img_mask", "\n", "", "elif", "background_type", "==", "'random_solid'", ":", "\n", "            ", "background_img", "=", "torch", ".", "ones_like", "(", "rendered_img", ",", "device", "=", "device", ")", "*", "torch", ".", "rand", "(", "(", "1", ",", "3", ",", "1", ",", "1", ")", ",", "device", "=", "device", ")", "\n", "result_img", "=", "background_img", "*", "(", "1", "-", "rendered_img_mask", ")", "+", "rendered_img", "*", "rendered_img_mask", "\n", "", "elif", "background_type", "==", "'blurred_image'", ":", "\n", "            ", "background_img", "=", "img", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "background_img", "=", "F", ".", "conv2d", "(", "background_img", ",", "self", ".", "gaussian_kernel", ",", "bias", "=", "None", ",", "stride", "=", "1", ",", "padding", "=", "'same'", ",", "groups", "=", "3", ")", "\n", "result_img", "=", "background_img", "*", "(", "1", "-", "rendered_img_mask", ")", "+", "rendered_img", "*", "rendered_img_mask", "\n", "", "elif", "background_type", "==", "'custom'", ":", "\n", "            ", "background_img", "=", "torch", ".", "ones_like", "(", "rendered_img", ",", "device", "=", "device", ")", "*", "torch", ".", "FloatTensor", "(", "[", "0", "/", "255.", ",", "0.", "/", "255.", ",", "0.", "/", "255.", "]", ")", ".", "view", "(", "(", "1", ",", "3", ",", "1", ",", "1", ")", ")", ".", "to", "(", "device", ")", "\n", "result_img", "=", "background_img", "*", "(", "1", "-", "rendered_img_mask", ")", "+", "rendered_img", "*", "rendered_img_mask", "\n", "", "else", ":", "\n", "            ", "result_img", "=", "rendered_img", "\n", "\n", "", "if", "exp_settings", "[", "'visualize'", "]", "==", "True", ":", "\n", "            ", "result_img_npy", "=", "result_img", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "result_img_npy", "=", "result_img_npy", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "converted_img", "=", "cv2", ".", "cvtColor", "(", "result_img_npy", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "cv2", ".", "imshow", "(", "'Video'", ",", "converted_img", ")", "#[0, ..., :3]", "\n", "key", "=", "cv2", ".", "waitKey", "(", "1", ")", "&", "0xFF", "\n", "\n", "", "return", "result_img", "\n", "", "", "def", "compute_rotation", "(", "angles", ")", ":", "\n"]], "home.repos.pwc.inspect_result.dreamflake_odi.None.attacks.CELoss.__init__": [[429, 434], ["torch.Module.__init__", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.dreamflake_odi.None.utils.WrapperModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "labels", ")", ":", "\n", "        ", "super", "(", "CELoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "ce", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'mean'", ")", "\n", "self", ".", "labels", ".", "requires_grad", "=", "False", "\n", "", "def", "forward", "(", "self", ",", "logits", ")", ":", "\n"]], "home.repos.pwc.inspect_result.dreamflake_odi.None.attacks.CELoss.forward": [[434, 436], ["attacks.CELoss.ce"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "logits", ")", ":", "\n", "        ", "return", "-", "self", ".", "ce", "(", "logits", ",", "self", ".", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dreamflake_odi.None.attacks.LogitLoss.__init__": [[440, 444], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.dreamflake_odi.None.utils.WrapperModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "labels", ")", ":", "\n", "        ", "super", "(", "LogitLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "labels", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.dreamflake_odi.None.attacks.LogitLoss.forward": [[445, 450], ["logits.gather().squeeze", "logit_dists.sum", "logits.gather", "attacks.LogitLoss.labels.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "logits", ")", ":", "\n", "        ", "real", "=", "logits", ".", "gather", "(", "1", ",", "self", ".", "labels", ".", "unsqueeze", "(", "1", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "logit_dists", "=", "(", "-", "1", "*", "real", ")", "\n", "loss", "=", "logit_dists", ".", "sum", "(", ")", "\n", "return", "-", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.dreamflake_odi.None.attacks.ATTA.__init__": [[452, 465], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.nn.init.dirac_", "torch.nn.init.dirac_", "torch.nn.init.dirac_", "torch.nn.init.dirac_", "torch.nn.init.dirac_", "torch.nn.init.dirac_", "torch.nn.init.dirac_", "torch.nn.init.dirac_", "torch.nn.init.dirac_", "torch.nn.init.dirac_", "torch.nn.init.dirac_", "torch.nn.init.dirac_", "torch.nn.init.dirac_", "torch.nn.init.dirac_", "torch.nn.init.dirac_", "torch.nn.init.dirac_", "torch.nn.init.dirac_", "torch.nn.init.dirac_", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like"], "methods", ["home.repos.pwc.inspect_result.dreamflake_odi.None.utils.WrapperModel.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ATTA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "3", ",", "16", ",", "padding", "=", "\"same\"", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "lr", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "3", ",", "3", ",", "3", ",", "padding", "=", "\"same\"", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "# The details of the weight initialization method are not described in the ATTA paper.", "\n", "# In order to train the network in 10 iterations, a small random noise is added to the dirac initialized weights.", "\n", "\n", "torch", ".", "nn", ".", "init", ".", "dirac_", "(", "self", ".", "conv1", ".", "weight", ",", "1", ")", "\n", "torch", ".", "nn", ".", "init", ".", "dirac_", "(", "self", ".", "conv2", ".", "weight", ",", "1", ")", "\n", "self", ".", "conv1", ".", "weight", ".", "data", "+=", "torch", ".", "randn_like", "(", "self", ".", "conv1", ".", "weight", ".", "data", ")", "*", "0.01", "\n", "self", ".", "conv2", ".", "weight", ".", "data", "+=", "torch", ".", "randn_like", "(", "self", ".", "conv2", ".", "weight", ".", "data", ")", "*", "0.01", "\n", "\n"]], "home.repos.pwc.inspect_result.dreamflake_odi.None.attacks.ATTA.forward": [[467, 472], ["attacks.ATTA.conv1", "attacks.ATTA.lr", "attacks.ATTA.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x2", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x3", "=", "self", ".", "lr", "(", "x2", ")", "\n", "x4", "=", "self", ".", "conv2", "(", "x3", ")", "\n", "return", "x4", "\n", "\n"]], "home.repos.pwc.inspect_result.dreamflake_odi.None.attacks.plot_img": [[58, 64], ["img.astype.astype", "PIL.Image.fromarray", "Image.fromarray.save", "numpy.array().transpose", "numpy.array", "img_tensor[].cpu().detach().numpy", "img_tensor[].cpu().detach", "img_tensor[].cpu"], "function", ["None"], ["", "def", "plot_img", "(", "img_tensor", ",", "file_name", ")", ":", "\n", "    ", "img", "=", "np", ".", "array", "(", "img_tensor", "[", "0", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "*", "255.", "\n", "img", "=", "img", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "im", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "im", ".", "save", "(", "\"imgs/\"", "+", "file_name", "+", "\".png\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dreamflake_odi.None.attacks.compute_rotation": [[249, 283], ["torch.device", "torch.device", "torch.device", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.cat().reshape", "torch.cat().reshape", "torch.cat().reshape", "torch.cat().reshape", "torch.cat().reshape", "torch.cat().reshape", "torch.cat().reshape", "torch.cat().reshape", "torch.cat().reshape", "rot.permute", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin"], "function", ["None"], ["", "", "def", "compute_rotation", "(", "angles", ")", ":", "\n", "    ", "\"\"\"\n    Return:\n        rot              -- torch.tensor, size (B, 3, 3) pts @ trans_mat\n    Parameters:\n        angles           -- torch.tensor, size (B, 3), radian\n    \"\"\"", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "batch_size", "=", "angles", ".", "shape", "[", "0", "]", "\n", "ones", "=", "torch", ".", "ones", "(", "[", "batch_size", ",", "1", "]", ")", ".", "to", "(", "device", ")", "\n", "zeros", "=", "torch", ".", "zeros", "(", "[", "batch_size", ",", "1", "]", ")", ".", "to", "(", "device", ")", "\n", "x", ",", "y", ",", "z", "=", "angles", "[", ":", ",", ":", "1", "]", ",", "angles", "[", ":", ",", "1", ":", "2", "]", ",", "angles", "[", ":", ",", "2", ":", "]", ",", "\n", "\n", "rot_x", "=", "torch", ".", "cat", "(", "[", "\n", "ones", ",", "zeros", ",", "zeros", ",", "\n", "zeros", ",", "torch", ".", "cos", "(", "x", ")", ",", "-", "torch", ".", "sin", "(", "x", ")", ",", "\n", "zeros", ",", "torch", ".", "sin", "(", "x", ")", ",", "torch", ".", "cos", "(", "x", ")", "\n", "]", ",", "dim", "=", "1", ")", ".", "reshape", "(", "[", "batch_size", ",", "3", ",", "3", "]", ")", "\n", "\n", "rot_y", "=", "torch", ".", "cat", "(", "[", "\n", "torch", ".", "cos", "(", "y", ")", ",", "zeros", ",", "torch", ".", "sin", "(", "y", ")", ",", "\n", "zeros", ",", "ones", ",", "zeros", ",", "\n", "-", "torch", ".", "sin", "(", "y", ")", ",", "zeros", ",", "torch", ".", "cos", "(", "y", ")", "\n", "]", ",", "dim", "=", "1", ")", ".", "reshape", "(", "[", "batch_size", ",", "3", ",", "3", "]", ")", "\n", "\n", "rot_z", "=", "torch", ".", "cat", "(", "[", "\n", "torch", ".", "cos", "(", "z", ")", ",", "-", "torch", ".", "sin", "(", "z", ")", ",", "zeros", ",", "\n", "torch", ".", "sin", "(", "z", ")", ",", "torch", ".", "cos", "(", "z", ")", ",", "zeros", ",", "\n", "zeros", ",", "zeros", ",", "ones", "\n", "]", ",", "dim", "=", "1", ")", ".", "reshape", "(", "[", "batch_size", ",", "3", ",", "3", "]", ")", "\n", "\n", "rot", "=", "rot_z", "@", "rot_y", "@", "rot_x", "\n", "return", "rot", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dreamflake_odi.None.attacks.rigid_transform": [[284, 288], ["torch.matmul", "torch.matmul", "torch.matmul", "trans.view"], "function", ["None"], ["", "def", "rigid_transform", "(", "vs", ",", "rot", ",", "trans", ")", ":", "\n", "    ", "vs_r", "=", "torch", ".", "matmul", "(", "vs", ",", "rot", ")", "\n", "vs_t", "=", "vs_r", "+", "trans", ".", "view", "(", "-", "1", ",", "1", ",", "3", ")", "\n", "return", "vs_t", "\n", "\n"]], "home.repos.pwc.inspect_result.dreamflake_odi.None.attacks.load_object": [[289, 317], ["os.path.join", "os.path.join", "torch.device", "torch.device", "torch.device", "pytorch3d.io.load_obj", "faces.verts_idx.to", "torch.matmul.to", "torch.matmul.mean", "max", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "compute_rotation().squeeze", "torch.matmul", "torch.matmul", "torch.matmul", "pytorch3d.io.load_objs_as_meshes", "pytorch3d.structures.Meshes", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.matmul.abs().max", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "attacks.compute_rotation", "torch.matmul.abs"], "function", ["home.repos.pwc.inspect_result.dreamflake_odi.None.attacks.compute_rotation"], ["", "def", "load_object", "(", "obj_file_name", ")", ":", "\n", "    ", "obj_filename", "=", "os", ".", "path", ".", "join", "(", "\"./data\"", ",", "obj_file_name", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "# Load the 3D model using load_obj", "\n", "verts", ",", "faces", ",", "aux", "=", "load_obj", "(", "obj_filename", ")", "\n", "\n", "faces_idx", "=", "faces", ".", "verts_idx", ".", "to", "(", "device", ")", "\n", "verts", "=", "verts", ".", "to", "(", "device", ")", "\n", "\n", "# We scale normalize and center the mesh. ", "\n", "center", "=", "verts", ".", "mean", "(", "0", ")", "\n", "verts", "=", "verts", "-", "center", "\n", "scale", "=", "max", "(", "verts", ".", "abs", "(", ")", ".", "max", "(", "0", ")", "[", "0", "]", ")", "\n", "verts", "=", "verts", "/", "scale", "\n", "angles", "=", "torch", ".", "FloatTensor", "(", "[", "[", "90", "*", "math", ".", "pi", "/", "180", ",", "0", ",", "0", "]", "]", ")", ".", "to", "(", "device", ")", "\n", "\n", "rot", "=", "compute_rotation", "(", "angles", ")", ".", "squeeze", "(", ")", "\n", "\n", "verts", "=", "torch", ".", "matmul", "(", "verts", ",", "rot", ")", "\n", "\n", "# Get the scale normalized textured mesh", "\n", "mesh", "=", "load_objs_as_meshes", "(", "[", "obj_filename", "]", ",", "device", "=", "device", ")", "\n", "mesh", "=", "Meshes", "(", "verts", "=", "[", "verts", "]", ",", "faces", "=", "[", "faces_idx", "]", ",", "textures", "=", "mesh", ".", "textures", ")", "\n", "\n", "\n", "return", "mesh", "\n", "\n"]], "home.repos.pwc.inspect_result.dreamflake_odi.None.attacks.render_3d_aug_input": [[318, 327], ["numpy.random.rand", "x_adv.clone", "range", "renderer.render", "x_adv[].unsqueeze"], "function", ["home.repos.pwc.inspect_result.dreamflake_odi.None.attacks.Render3D.render"], ["", "def", "render_3d_aug_input", "(", "x_adv", ",", "renderer", ",", "prob", "=", "0.7", ")", ":", "\n", "    ", "c", "=", "np", ".", "random", ".", "rand", "(", "1", ")", "\n", "if", "c", "<=", "prob", ":", "\n", "        ", "x_ri", "=", "x_adv", ".", "clone", "(", ")", "\n", "for", "i", "in", "range", "(", "x_adv", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "x_ri", "[", "i", "]", "=", "renderer", ".", "render", "(", "x_adv", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ")", "\n", "", "return", "x_ri", "\n", "", "else", ":", "\n", "        ", "return", "x_adv", "\n", "\n"]], "home.repos.pwc.inspect_result.dreamflake_odi.None.attacks.calculate_v": [[330, 353], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "calculate_si_ghat.detach", "x_adv_or_nes.clone().detach", "attacks.calculate_si_ghat", "model", "loss_fn", "attacks.DI", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "x_adv_or_nes.clone", "attacks.RDI", "torch.rand().cuda", "torch.rand().cuda", "torch.rand().cuda", "attacks.render_3d_aug_input", "torch.rand", "torch.rand", "torch.rand", "x_adv_or_nes.size"], "function", ["home.repos.pwc.inspect_result.dreamflake_odi.None.attacks.calculate_si_ghat", "home.repos.pwc.inspect_result.dreamflake_odi.None.attacks.DI", "home.repos.pwc.inspect_result.dreamflake_odi.None.attacks.RDI", "home.repos.pwc.inspect_result.dreamflake_odi.None.attacks.render_3d_aug_input"], ["", "", "def", "calculate_v", "(", "model", ",", "x_adv_or_nes", ",", "y", ",", "eps", ",", "number_of_v_samples", ",", "beta", ",", "target_label", ",", "attack_type", ",", "number_of_si_scales", ",", "prob", ",", "loss_fn", ",", "renderer", ")", ":", "\n", "    ", "sum_grad_x_i", "=", "torch", ".", "zeros_like", "(", "x_adv_or_nes", ")", "\n", "for", "i", "in", "range", "(", "number_of_v_samples", ")", ":", "\n", "        ", "x_i", "=", "x_adv_or_nes", ".", "clone", "(", ")", ".", "detach", "(", ")", "+", "(", "torch", ".", "rand", "(", "x_adv_or_nes", ".", "size", "(", ")", ")", ".", "cuda", "(", ")", "*", "2", "-", "1.", ")", "*", "(", "beta", "*", "eps", ")", "\n", "x_i", ".", "requires_grad", "=", "True", "\n", "if", "'S'", "in", "attack_type", ":", "\n", "            ", "ghat", "=", "calculate_si_ghat", "(", "model", ",", "x_i", ",", "y", ",", "number_of_si_scales", ",", "target_label", ",", "attack_type", ",", "prob", ",", "loss_fn", ",", "renderer", ")", "\n", "", "else", ":", "\n", "            ", "if", "'D'", "in", "attack_type", ":", "\n", "                ", "x_i2", "=", "DI", "(", "x_i", ",", "prob", ")", "\n", "", "elif", "'R'", "in", "attack_type", ":", "\n", "                ", "x_i2", "=", "RDI", "(", "x_i", ")", "\n", "", "elif", "'O'", "in", "attack_type", ":", "\n", "                ", "x_i2", "=", "render_3d_aug_input", "(", "x_i", ",", "renderer", "=", "renderer", ",", "prob", "=", "prob", ")", "\n", "", "else", ":", "\n", "                ", "x_i2", "=", "x_i", "\n", "", "output_x_adv_or_nes", "=", "model", "(", "x_i2", ")", "\n", "loss", "=", "loss_fn", "(", "output_x_adv_or_nes", ")", "\n", "ghat", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "x_i", ",", "\n", "retain_graph", "=", "False", ",", "create_graph", "=", "False", ")", "[", "0", "]", "\n", "", "sum_grad_x_i", "+=", "ghat", ".", "detach", "(", ")", "\n", "", "v", "=", "sum_grad_x_i", "/", "number_of_v_samples", "\n", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.dreamflake_odi.None.attacks.calculate_si_ghat": [[355, 380], ["x_adv_or_nes.clone().detach", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "range", "model", "loss_fn", "x_adv_or_nes.clone", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "attacks.DI", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "attacks.RDI", "attacks.render_3d_aug_input", "x_adv_or_nes.clone().detach", "x_adv_or_nes.clone"], "function", ["home.repos.pwc.inspect_result.dreamflake_odi.None.attacks.DI", "home.repos.pwc.inspect_result.dreamflake_odi.None.attacks.RDI", "home.repos.pwc.inspect_result.dreamflake_odi.None.attacks.render_3d_aug_input"], ["", "def", "calculate_si_ghat", "(", "model", ",", "x_adv_or_nes", ",", "y", ",", "number_of_si_scales", ",", "target_label", ",", "attack_type", ",", "prob", ",", "loss_fn", ",", "renderer", ")", ":", "\n", "    ", "x_neighbor", "=", "x_adv_or_nes", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "grad_sum", "=", "torch", ".", "zeros_like", "(", "x_neighbor", ")", ".", "cuda", "(", ")", "\n", "for", "si_counter", "in", "range", "(", "0", ",", "number_of_si_scales", ")", ":", "\n", "        ", "si_div", "=", "2", "**", "si_counter", "\n", "si_input", "=", "(", "(", "(", "x_adv_or_nes", ".", "clone", "(", ")", ".", "detach", "(", ")", "-", "0.5", ")", "*", "2", "/", "si_div", ")", "+", "1", ")", "/", "2", "# 0 1 -> -1 1", "\n", "si_input", ".", "requires_grad", "=", "True", "\n", "# Diverse-Input", "\n", "if", "'D'", "in", "attack_type", ":", "\n", "            ", "si_input2", "=", "DI", "(", "si_input", ",", "prob", ")", "\n", "", "elif", "'R'", "in", "attack_type", ":", "\n", "            ", "si_input2", "=", "RDI", "(", "si_input", ")", "\n", "", "elif", "'O'", "in", "attack_type", ":", "\n", "            ", "si_input2", "=", "render_3d_aug_input", "(", "si_input", ",", "renderer", "=", "renderer", ",", "prob", "=", "prob", ")", "\n", "", "else", ":", "\n", "            ", "si_input2", "=", "si_input", "\n", "", "output_si", "=", "model", "(", "si_input2", ")", "\n", "\n", "loss_si", "=", "loss_fn", "(", "output_si", ")", "\n", "si_input_grad", "=", "torch", ".", "autograd", ".", "grad", "(", "loss_si", ",", "si_input", ",", "\n", "retain_graph", "=", "False", ",", "create_graph", "=", "False", ")", "[", "0", "]", "\n", "grad_sum", "+=", "si_input_grad", "*", "(", "1", "/", "si_div", ")", "\n", "\n", "", "ghat", "=", "grad_sum", "\n", "return", "ghat", "\n", "\n"]], "home.repos.pwc.inspect_result.dreamflake_odi.None.attacks.DI": [[382, 396], ["numpy.random.rand", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "torch.pad", "torch.interpolate"], "function", ["None"], ["", "def", "DI", "(", "X_in", ",", "prob", ")", ":", "\n", "    ", "rnd", "=", "np", ".", "random", ".", "randint", "(", "299", ",", "330", ",", "size", "=", "1", ")", "[", "0", "]", "\n", "h_rem", "=", "330", "-", "rnd", "\n", "w_rem", "=", "330", "-", "rnd", "\n", "pad_top", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "h_rem", ",", "size", "=", "1", ")", "[", "0", "]", "\n", "pad_bottom", "=", "h_rem", "-", "pad_top", "\n", "pad_left", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "w_rem", ",", "size", "=", "1", ")", "[", "0", "]", "\n", "pad_right", "=", "w_rem", "-", "pad_left", "\n", "c", "=", "np", ".", "random", ".", "rand", "(", "1", ")", "\n", "if", "c", "<=", "prob", ":", "\n", "        ", "X_out", "=", "F", ".", "pad", "(", "F", ".", "interpolate", "(", "X_in", ",", "size", "=", "(", "rnd", ",", "rnd", ")", ")", ",", "(", "pad_left", ",", "pad_top", ",", "pad_right", ",", "pad_bottom", ")", ",", "mode", "=", "'constant'", ",", "value", "=", "0", ")", "\n", "return", "X_out", "\n", "", "else", ":", "\n", "        ", "return", "X_in", "\n", "\n"]], "home.repos.pwc.inspect_result.dreamflake_odi.None.attacks.RDI": [[398, 417], ["int", "int", "torch.pad", "int", "torchvision.Resize", "torchvision.Resize", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "function", ["None"], ["", "", "def", "RDI", "(", "x_adv", ")", ":", "\n", "    ", "x_di", "=", "x_adv", "\n", "di_pad_amount", "=", "340", "-", "299", "\n", "\n", "di_pad_value", "=", "0", "\n", "\n", "ori_size", "=", "x_di", ".", "shape", "[", "-", "1", "]", "\n", "rnd", "=", "int", "(", "torch", ".", "rand", "(", "1", ")", "*", "di_pad_amount", ")", "+", "ori_size", "\n", "x_di", "=", "transforms", ".", "Resize", "(", "(", "rnd", ",", "rnd", ")", ",", "interpolation", "=", "InterpolationMode", ".", "NEAREST", ")", "(", "x_di", ")", "\n", "pad_max", "=", "ori_size", "+", "di_pad_amount", "-", "rnd", "\n", "pad_left", "=", "int", "(", "torch", ".", "rand", "(", "1", ")", "*", "pad_max", ")", "\n", "pad_right", "=", "pad_max", "-", "pad_left", "\n", "pad_top", "=", "int", "(", "torch", ".", "rand", "(", "1", ")", "*", "pad_max", ")", "\n", "pad_bottom", "=", "pad_max", "-", "pad_top", "\n", "x_di", "=", "F", ".", "pad", "(", "x_di", ",", "(", "pad_left", ",", "pad_right", ",", "pad_top", ",", "pad_bottom", ")", ",", "'constant'", ",", "di_pad_value", ")", "\n", "x_di", "=", "transforms", ".", "Resize", "(", "(", "ori_size", ",", "ori_size", ")", ",", "interpolation", "=", "InterpolationMode", ".", "NEAREST", ")", "(", "x_di", ")", "\n", "\n", "\n", "return", "x_di", "\n", "\n"]], "home.repos.pwc.inspect_result.dreamflake_odi.None.attacks.gkern": [[419, 425], ["numpy.linspace", "scipy.norm.pdf", "numpy.outer", "np.outer.sum"], "function", ["None"], ["", "def", "gkern", "(", "kernlen", "=", "15", ",", "nsig", "=", "3", ")", ":", "\n", "    ", "x", "=", "np", ".", "linspace", "(", "-", "nsig", ",", "nsig", ",", "kernlen", ")", "\n", "kern1d", "=", "st", ".", "norm", ".", "pdf", "(", "x", ")", "\n", "kernel_raw", "=", "np", ".", "outer", "(", "kern1d", ",", "kern1d", ")", "\n", "kernel", "=", "kernel_raw", "/", "kernel_raw", ".", "sum", "(", ")", "\n", "return", "kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.dreamflake_odi.None.attacks.ATTA_aug_input": [[473, 479], ["x_adv.clone", "range", "x_ri.clamp.clamp", "x_adv[].unsqueeze"], "function", ["None"], ["", "", "def", "ATTA_aug_input", "(", "x_adv", ",", "atta_models", ")", ":", "\n", "    ", "x_ri", "=", "x_adv", ".", "clone", "(", ")", "\n", "for", "i", "in", "range", "(", "x_adv", ".", "shape", "[", "0", "]", ")", ":", "# Batch processing", "\n", "        ", "x_ri", "[", "i", "]", "=", "atta_models", "[", "i", "]", "(", "x_adv", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ")", "\n", "", "x_ri", "=", "x_ri", ".", "clamp", "(", "0", ",", "1", ")", "\n", "return", "x_ri", "\n", "\n"]], "home.repos.pwc.inspect_result.dreamflake_odi.None.attacks.advanced_fgsm": [[486, 665], ["attacks.Render3D", "model.eval", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "x.clone", "torch.clamp.size", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.zeros().to.detach", "gkern().astype", "numpy.stack", "numpy.expand_dims", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.CrossEntropyLoss", "attacks.LogitLoss", "range", "attacks.LogitLoss", "attacks.CELoss", "torch.clamp", "torch.clamp", "torch.clamp", "ATTA().cuda", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.clamp.clone().detach", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "range", "ATTA().cuda.eval", "ATTA_models.append", "torch.zeros", "torch.zeros", "torch.zeros", "torch.clamp.detach", "attacks.calculate_si_ghat", "model", "CELoss.", "torch.conv2d", "g.sign", "torch.clamp.detach", "torch.clamp.clone().detach", "attacks.gkern", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "x.size", "ATTA().cuda.parameters", "ATTA().cuda.eval", "range", "torch.optim.Adam.zero_grad", "ATTA().cuda.train", "torch.optim.Adam.zero_grad", "L_T.backward", "torch.optim.Adam.step", "torch.clamp.detach", "attacks.plot_img", "attacks.DI", "attacks.plot_img", "attacks.ATTA_aug_input", "model", "CELoss.", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "attacks.calculate_v", "attacks.ATTA", "torch.clamp.clone", "ATTA().cuda.", "torch.optim.Adam.zero_grad", "L_fool.backward", "torch.optim.Adam.step", "torch.clamp", "torch.clamp", "torch.clamp", "attacks.RDI", "torch.sum", "torch.sum", "torch.sum", "torch.clamp.clone", "LogitLoss.", "nn.CrossEntropyLoss.", "torch.nn.MSELoss.", "attacks.render_3d_aug_input", "torch.abs", "torch.abs", "torch.abs", "model", "LogitLoss.", "model", "nn.CrossEntropyLoss.", "ATTA().cuda.", "str", "str", "model", "ATTA().cuda.", "model", "str", "str", "ATTA().cuda."], "function", ["home.repos.pwc.inspect_result.dreamflake_odi.None.attacks.calculate_si_ghat", "home.repos.pwc.inspect_result.dreamflake_odi.None.attacks.gkern", "home.repos.pwc.inspect_result.dreamflake_odi.None.attacks.plot_img", "home.repos.pwc.inspect_result.dreamflake_odi.None.attacks.DI", "home.repos.pwc.inspect_result.dreamflake_odi.None.attacks.plot_img", "home.repos.pwc.inspect_result.dreamflake_odi.None.attacks.ATTA_aug_input", "home.repos.pwc.inspect_result.dreamflake_odi.None.attacks.calculate_v", "home.repos.pwc.inspect_result.dreamflake_odi.None.attacks.RDI", "home.repos.pwc.inspect_result.dreamflake_odi.None.attacks.render_3d_aug_input"], ["", "def", "advanced_fgsm", "(", "attack_type", ",", "model", ",", "x", ",", "y", ",", "target_label", "=", "None", ",", "num_iter", "=", "10", ",", "max_epsilon", "=", "16", ",", "mu", "=", "1.0", ",", "number_of_v_samples", "=", "5", ",", "beta", "=", "1.5", ",", "\n", "number_of_si_scales", "=", "5", ",", "count", "=", "0", ",", "config_idx", "=", "1", ")", ":", "\n", "    ", "\"\"\"Perform advanced fgsm attack\n\n    Args:\n        attack_type: string containing 'M'(momentum) or 'N'(Nesterov momentum) /\n        'D' (Diverse input) or 'R' (Resized-diverse-input) or 'O' (Object-based diverse input) /\n        'V'(variance tuning) / 'S'(Scale invariance) / 'T' (Translation-invariance)\n        model: the target model\n        x: a batch of images.\n        y: true labels corresponding to the batch of images\n        target_label : used for targeted attack. \n        num_iter: T. number of iterations to perform.\n        max_epsilon: Linf norm of resulting perturbation (in pixels)\n        mu: mu. decay of momentum.\n        number_of_v_samples: N. # samples to calculate V\n        beta: the bound for variance tuning.\n        number_of_si_scales: m. (in scale-invariance paper)\n    Returns:\n        The batch of adversarial examples corresponding to the original images\n    \"\"\"", "\n", "\n", "\n", "\n", "exp_settings", "=", "exp_configuration", "[", "config_idx", "]", "\n", "renderer", "=", "Render3D", "(", "config_idx", "=", "config_idx", ",", "count", "=", "count", ")", "\n", "prob", "=", "exp_settings", "[", "'p'", "]", "\n", "lr", "=", "exp_settings", "[", "'alpha'", "]", "# Step size alpha", "\n", "number_of_si_scales", "=", "exp_settings", "[", "'number_of_si_scales'", "]", "\n", "number_of_v_samples", "=", "exp_settings", "[", "'number_of_v_samples'", "]", "\n", "if", "'save_img'", "not", "in", "exp_settings", ":", "\n", "        ", "exp_settings", "[", "'save_img'", "]", "=", "False", "\n", "\n", "", "if", "\"M\"", "not", "in", "attack_type", "and", "\"N\"", "not", "in", "attack_type", ":", "\n", "        ", "mu", "=", "0", "\n", "\n", "\n", "\n", "\n", "", "ti_kernel_size", "=", "5", "\n", "\n", "if", "'T'", "in", "attack_type", ":", "\n", "        ", "kernel", "=", "gkern", "(", "ti_kernel_size", ",", "3", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "gaussian_kernel", "=", "np", ".", "stack", "(", "[", "kernel", ",", "kernel", ",", "kernel", "]", ")", "\n", "gaussian_kernel", "=", "np", ".", "expand_dims", "(", "gaussian_kernel", ",", "1", ")", "\n", "gaussian_kernel", "=", "torch", ".", "from_numpy", "(", "gaussian_kernel", ")", ".", "cuda", "(", ")", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "\n", "eps", "=", "max_epsilon", "/", "255.0", "# epsilon in scale [0, 1]", "\n", "alpha", "=", "lr", "/", "255.0", "\n", "\n", "x_min", "=", "torch", ".", "clamp", "(", "x", "-", "eps", ",", "0.0", ",", "1.0", ")", "\n", "x_max", "=", "torch", ".", "clamp", "(", "x", "+", "eps", ",", "0.0", ",", "1.0", ")", "\n", "\n", "x_adv", "=", "x", ".", "clone", "(", ")", "\n", "\n", "if", "'A'", "in", "attack_type", ":", "# ATTA", "\n", "        ", "mse", "=", "torch", ".", "nn", ".", "MSELoss", "(", "reduction", "=", "'sum'", ")", "\n", "\n", "# We use the default hyper parameters of ATTA", "\n", "K_outer", "=", "10", "\n", "K_inner", "=", "10", "\n", "\n", "alpha_1", "=", "1.0", "\n", "alpha_2", "=", "10.0", "\n", "atta_beta", "=", "1.0", "\n", "ATTA_models", "=", "[", "]", "\n", "ce", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'sum'", ")", "\n", "logit_loss_fn_target", "=", "LogitLoss", "(", "target_label", ")", "\n", "\n", "for", "i", "in", "range", "(", "x", ".", "size", "(", ")", "[", "0", "]", ")", ":", "\n", "            ", "atta_model", "=", "ATTA", "(", ")", ".", "cuda", "(", ")", "# Randomly initialize theta", "\n", "model_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "atta_model", ".", "parameters", "(", ")", ",", "lr", "=", "0.001", ")", "\n", "temp_x_adv", "=", "x_adv", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "temp_x_adv", ".", "requires_grad", "=", "True", "\n", "adv_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "temp_x_adv", "]", ",", "lr", "=", "0.01", ")", "\n", "for", "ko", "in", "range", "(", "K_outer", ")", ":", "\n", "                ", "atta_model", ".", "eval", "(", ")", "\n", "for", "ki", "in", "range", "(", "K_inner", ")", ":", "\n", "# Update x_adv", "\n", "                    ", "temp_x_adv2", "=", "temp_x_adv", "\n", "x_at", "=", "atta_model", "(", "temp_x_adv2", ")", "\n", "#L_fool=-ce(model(x_at),y)-atta_beta*ce(model(temp_x_adv2),y)", "\n", "\n", "# Instead of CE loss for non-targeted attack, we use the simple logit loss for generating targeted adversarial examples", "\n", "# We observe this improves the targeted atttack success rates.", "\n", "L_fool", "=", "logit_loss_fn_target", "(", "model", "(", "x_at", ")", ")", "+", "atta_beta", "*", "logit_loss_fn_target", "(", "model", "(", "temp_x_adv2", ")", ")", "\n", "\n", "adv_optimizer", ".", "zero_grad", "(", ")", "\n", "L_fool", ".", "backward", "(", ")", "\n", "adv_optimizer", ".", "step", "(", ")", "\n", "temp_x_adv", ".", "data", "=", "torch", ".", "clamp", "(", "temp_x_adv", ".", "data", ",", "x_min", ",", "x_max", ")", "\n", "\n", "", "model_optimizer", ".", "zero_grad", "(", ")", "\n", "atta_model", ".", "train", "(", ")", "\n", "L_T", "=", "ce", "(", "model", "(", "atta_model", "(", "temp_x_adv", ")", ")", ",", "y", ")", "+", "alpha_1", "*", "ce", "(", "model", "(", "atta_model", "(", "x", ")", ")", ",", "y", ")", "+", "alpha_2", "*", "mse", "(", "atta_model", "(", "temp_x_adv", ")", ",", "temp_x_adv", ")", "#alpha_2*torch.norm(atta_model(temp_x_adv)-temp_x_adv,p=2)**2 #", "\n", "#L_T=logit_loss_fn(model(atta_model(temp_x_adv)))+alpha_1*logit_loss_fn(model(atta_model(x)))+alpha_2*mse(atta_model(temp_x_adv),temp_x_adv)", "\n", "\n", "model_optimizer", ".", "zero_grad", "(", ")", "\n", "L_T", ".", "backward", "(", ")", "\n", "model_optimizer", ".", "step", "(", ")", "\n", "", "atta_model", ".", "eval", "(", ")", "\n", "ATTA_models", ".", "append", "(", "atta_model", ")", "\n", "\n", "", "", "g", "=", "0", "\n", "v", "=", "0", "\n", "\n", "if", "'3'", "in", "attack_type", ":", "\n", "        ", "loss_fn", "=", "LogitLoss", "(", "target_label", ")", "\n", "", "else", ":", "\n", "        ", "loss_fn", "=", "CELoss", "(", "target_label", ")", "\n", "\n", "", "B", ",", "C", ",", "H", ",", "W", "=", "x_adv", ".", "size", "(", ")", "\n", "x_advs", "=", "torch", ".", "zeros", "(", "(", "num_iter", "//", "20", ",", "B", ",", "C", ",", "H", ",", "W", ")", ")", ".", "to", "(", "device", ")", "\n", "\n", "for", "t", "in", "range", "(", "num_iter", ")", ":", "\n", "# Calculate ghat", "\n", "        ", "if", "'N'", "in", "attack_type", ":", "# Nesterov momentum", "\n", "            ", "x_nes", "=", "x_adv", ".", "detach", "(", ")", "+", "alpha", "*", "mu", "*", "g", "# x_nes = x + alpha * momentum * grad", "\n", "", "else", ":", "# usual momentum", "\n", "            ", "x_nes", "=", "x_adv", ".", "detach", "(", ")", "\n", "", "x_nes", ".", "requires_grad", "=", "True", "\n", "if", "'S'", "in", "attack_type", ":", "# Scale-Invariance", "\n", "            ", "ghat", "=", "calculate_si_ghat", "(", "model", ",", "x_nes", ",", "y", ",", "number_of_si_scales", ",", "target_label", ",", "attack_type", ",", "\n", "prob", ",", "loss_fn", ",", "renderer", ")", "\n", "", "else", ":", "\n", "            ", "if", "exp_settings", "[", "'save_img'", "]", "and", "count", "in", "exp_settings", "[", "'target_img_idx'", "]", ":", "\n", "                ", "plot_img", "(", "x_nes", ",", "str", "(", "count", ")", "+", "'_'", "+", "str", "(", "t", ")", "+", "'_adv'", ")", "\n", "\n", "", "if", "'D'", "in", "attack_type", ":", "\n", "                ", "x_adv_or_nes", "=", "DI", "(", "x_nes", ",", "prob", ")", "\n", "", "elif", "'R'", "in", "attack_type", ":", "\n", "                ", "x_adv_or_nes", "=", "RDI", "(", "x_nes", ")", "\n", "", "elif", "'O'", "in", "attack_type", ":", "\n", "                ", "x_adv_or_nes", "=", "render_3d_aug_input", "(", "x_nes", ",", "renderer", "=", "renderer", ",", "prob", "=", "prob", ")", "\n", "", "else", ":", "\n", "                ", "x_adv_or_nes", "=", "x_nes", "\n", "\n", "", "if", "exp_settings", "[", "'save_img'", "]", "and", "count", "in", "exp_settings", "[", "'target_img_idx'", "]", ":", "\n", "                ", "plot_img", "(", "x_adv_or_nes", ",", "str", "(", "count", ")", "+", "'_'", "+", "str", "(", "t", ")", "+", "'_transformed'", ")", "\n", "\n", "", "output2", "=", "model", "(", "x_adv_or_nes", ")", "\n", "loss", "=", "loss_fn", "(", "output2", ")", "\n", "\n", "if", "'A'", "in", "attack_type", ":", "\n", "                ", "x_adv_or_nes2", "=", "ATTA_aug_input", "(", "x_adv_or_nes", ",", "ATTA_models", ")", "\n", "output3", "=", "model", "(", "x_adv_or_nes2", ")", "\n", "loss", "+=", "loss_fn", "(", "output3", ")", "\n", "\n", "", "ghat", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "x_nes", ",", "\n", "retain_graph", "=", "False", ",", "create_graph", "=", "False", ")", "[", "0", "]", "\n", "\n", "# Update g", "\n", "", "grad_plus_v", "=", "ghat", "+", "v", "\n", "\n", "if", "'T'", "in", "attack_type", ":", "# Translation-invariance", "\n", "            ", "grad_plus_v", "=", "F", ".", "conv2d", "(", "grad_plus_v", ",", "gaussian_kernel", ",", "bias", "=", "None", ",", "stride", "=", "1", ",", "padding", "=", "(", "(", "ti_kernel_size", "-", "1", ")", "//", "2", ",", "(", "ti_kernel_size", "-", "1", ")", "//", "2", ")", ",", "groups", "=", "3", ")", "#TI", "\n", "\n", "", "if", "'M'", "in", "attack_type", "or", "'N'", "in", "attack_type", ":", "\n", "            ", "g", "=", "mu", "*", "g", "+", "grad_plus_v", "/", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "grad_plus_v", ")", ",", "dim", "=", "[", "1", ",", "2", ",", "3", "]", ",", "keepdim", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "g", "=", "grad_plus_v", "\n", "\n", "# Update v", "\n", "", "if", "'V'", "in", "attack_type", ":", "\n", "            ", "v", "=", "calculate_v", "(", "model", ",", "x_nes", ",", "y", ",", "eps", ",", "number_of_v_samples", ",", "beta", ",", "target_label", ",", "attack_type", ",", "\n", "number_of_si_scales", ",", "prob", ",", "loss_fn", ",", "renderer", ")", "-", "ghat", "\n", "\n", "# Update x_adv", "\n", "", "pert", "=", "alpha", "*", "g", ".", "sign", "(", ")", "\n", "x_adv", "=", "x_adv", ".", "detach", "(", ")", "+", "pert", "\n", "x_adv", "=", "torch", ".", "clamp", "(", "x_adv", ",", "x_min", ",", "x_max", ")", "\n", "if", "(", "t", "+", "1", ")", "%", "20", "==", "0", ":", "\n", "            ", "x_advs", "[", "(", "t", "+", "1", ")", "//", "20", "-", "1", "]", "=", "x_adv", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "\n", "", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "return", "x_advs", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dreamflake_odi.None.utils.WrapperModel.__init__": [[10, 16], ["torch.Module.__init__", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.dreamflake_odi.None.utils.WrapperModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "mean", ",", "std", ",", "resize", "=", "False", ")", ":", "\n", "        ", "super", "(", "WrapperModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mean", "=", "torch", ".", "Tensor", "(", "mean", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "resize", "=", "resize", "\n", "self", ".", "std", "=", "torch", ".", "Tensor", "(", "std", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.dreamflake_odi.None.utils.WrapperModel.forward": [[16, 18], ["utils.WrapperModel.model", "utils.WrapperModel.std.type_as", "utils.WrapperModel.mean.type_as"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "(", "x", "-", "self", ".", "mean", ".", "type_as", "(", "x", ")", "[", "None", ",", ":", ",", "None", ",", "None", "]", ")", "/", "self", ".", "std", ".", "type_as", "(", "x", ")", "[", "None", ",", ":", ",", "None", ",", "None", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dreamflake_odi.None.utils.load_model": [[21, 72], ["torchvision.models.resnet101", "torchvision.models.resnet18", "torchvision.models.resnet34", "torchvision.models.resnet50", "torchvision.models.resnet152", "torchvision.models.vgg16_bn", "torchvision.models.vgg19_bn", "torchvision.models.wide_resnet101_2", "torchvision.models.inception_v3", "torchvision.models.resnext50_32x4d", "torchvision.models.alexnet", "torchvision.models.mobilenet.mobilenet_v3_large", "torchvision.models.densenet121", "torchvision.models.densenet161", "torchvision.models.mobilenet_v2", "torchvision.models.shufflenet_v2_x1_0", "torchvision.models.googlenet", "timm.create_model", "timm.create_model", "timm.create_model", "timm.create_model", "timm.create_model", "timm.create_model", "ValueError"], "function", ["None"], ["", "", "def", "load_model", "(", "model_name", ")", ":", "\n", "    ", "if", "model_name", "==", "\"ResNet101\"", ":", "\n", "        ", "model", "=", "torchvision", ".", "models", ".", "resnet101", "(", "pretrained", "=", "True", ")", "\n", "", "elif", "model_name", "==", "'ResNet18'", ":", "\n", "        ", "model", "=", "torchvision", ".", "models", ".", "resnet18", "(", "pretrained", "=", "True", ")", "\n", "", "elif", "model_name", "==", "'ResNet34'", ":", "\n", "        ", "model", "=", "torchvision", ".", "models", ".", "resnet34", "(", "pretrained", "=", "True", ")", "\n", "", "elif", "model_name", "==", "'ResNet50'", ":", "\n", "        ", "model", "=", "torchvision", ".", "models", ".", "resnet50", "(", "pretrained", "=", "True", ")", "\n", "", "elif", "model_name", "==", "\"ResNet152\"", ":", "\n", "        ", "model", "=", "torchvision", ".", "models", ".", "resnet152", "(", "pretrained", "=", "True", ")", "\n", "", "elif", "model_name", "==", "\"vgg16\"", ":", "\n", "        ", "model", "=", "torchvision", ".", "models", ".", "vgg16_bn", "(", "pretrained", "=", "True", ")", "\n", "", "elif", "model_name", "==", "\"vgg19\"", ":", "\n", "        ", "model", "=", "torchvision", ".", "models", ".", "vgg19_bn", "(", "pretrained", "=", "True", ")", "\n", "", "elif", "model_name", "==", "\"wide_resnet101_2\"", ":", "\n", "        ", "model", "=", "torchvision", ".", "models", ".", "wide_resnet101_2", "(", "pretrained", "=", "True", ")", "\n", "", "elif", "model_name", "==", "\"inception_v3\"", ":", "\n", "        ", "model", "=", "torchvision", ".", "models", ".", "inception_v3", "(", "pretrained", "=", "True", ",", "transform_input", "=", "True", ")", "\n", "", "elif", "model_name", "==", "\"resnext50_32x4d\"", ":", "\n", "        ", "model", "=", "torchvision", ".", "models", ".", "resnext50_32x4d", "(", "pretrained", "=", "True", ")", "\n", "", "elif", "model_name", "==", "\"alexnet\"", ":", "\n", "        ", "model", "=", "torchvision", ".", "models", ".", "alexnet", "(", "pretrained", "=", "True", ")", "\n", "", "elif", "model_name", "==", "\"mobilenet_v3_large\"", ":", "\n", "        ", "model", "=", "torchvision", ".", "models", ".", "mobilenet", ".", "mobilenet_v3_large", "(", "pretrained", "=", "True", ")", "\n", "", "elif", "model_name", "==", "'DenseNet121'", ":", "\n", "        ", "model", "=", "torchvision", ".", "models", ".", "densenet121", "(", "pretrained", "=", "True", ")", "\n", "", "elif", "model_name", "==", "\"DenseNet161\"", ":", "\n", "        ", "model", "=", "torchvision", ".", "models", ".", "densenet161", "(", "pretrained", "=", "True", ")", "\n", "", "elif", "model_name", "==", "'mobilenet_v2'", ":", "\n", "        ", "model", "=", "torchvision", ".", "models", ".", "mobilenet_v2", "(", "pretrained", "=", "True", ")", "\n", "", "elif", "model_name", "==", "\"shufflenet_v2_x1_0\"", ":", "\n", "        ", "model", "=", "torchvision", ".", "models", ".", "shufflenet_v2_x1_0", "(", "pretrained", "=", "True", ")", "\n", "", "elif", "model_name", "==", "'GoogLeNet'", ":", "\n", "        ", "model", "=", "torchvision", ".", "models", ".", "googlenet", "(", "pretrained", "=", "True", ")", "\n", "# timm models", "\n", "", "elif", "model_name", "==", "\"adv_inception_v3\"", ":", "\n", "        ", "model", "=", "timm", ".", "create_model", "(", "\"adv_inception_v3\"", ",", "pretrained", "=", "True", ")", "\n", "", "elif", "model_name", "==", "\"inception_resnet_v2\"", ":", "\n", "        ", "model", "=", "timm", ".", "create_model", "(", "\"inception_resnet_v2\"", ",", "pretrained", "=", "True", ")", "\n", "", "elif", "model_name", "==", "\"ens_adv_inception_resnet_v2\"", ":", "\n", "        ", "model", "=", "timm", ".", "create_model", "(", "\"ens_adv_inception_resnet_v2\"", ",", "pretrained", "=", "True", ")", "\n", "", "elif", "model_name", "==", "\"inception_v3_timm\"", ":", "\n", "        ", "model", "=", "timm", ".", "create_model", "(", "\"inception_v3\"", ",", "pretrained", "=", "True", ")", "\n", "", "elif", "model_name", "==", "\"inception_v4_timm\"", ":", "\n", "        ", "model", "=", "timm", ".", "create_model", "(", "\"inception_v4\"", ",", "pretrained", "=", "True", ")", "\n", "", "elif", "model_name", "==", "\"xception\"", ":", "\n", "        ", "model", "=", "timm", ".", "create_model", "(", "\"xception\"", ",", "pretrained", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f\"Not supported model name. {model_name}\"", ")", "\n", "", "return", "model", "", "", ""]]}