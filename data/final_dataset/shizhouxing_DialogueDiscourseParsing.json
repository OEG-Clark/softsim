{"home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.None.data_pre.process_file": [[6, 100], ["print", "open", "open", "open.readline", "range", "xmltodict.parse", "len", "int", "int", "type", "type", "[].append", "dialogues.append", "ord", "Warning", "open.readlines", "type", "type", "cdu.remove"], "function", ["None"], ["def", "process_file", "(", "id", ",", "filename_prefix", ")", ":", "\n", "    ", "print", "(", "filename_prefix", ")", "\n", "\n", "f_annotation", "=", "open", "(", "\"%s.aa\"", "%", "filename_prefix", ")", "\n", "annotations", "=", "xmltodict", ".", "parse", "(", "''", ".", "join", "(", "f_annotation", ".", "readlines", "(", ")", ")", ")", "[", "\"annotations\"", "]", "\n", "units", "=", "annotations", "[", "\"unit\"", "]", "\n", "if", "not", "'relation'", "in", "annotations", ":", "\n", "        ", "relations", "=", "[", "]", "\n", "", "else", ":", "\n", "        ", "relations", "=", "annotations", "[", "\"relation\"", "]", "\n", "", "schema", "=", "annotations", "[", "\"schema\"", "]", "if", "'schema'", "in", "annotations", "else", "[", "]", "\n", "\n", "f_discourse", "=", "open", "(", "\"%s.ac\"", "%", "filename_prefix", ")", "\n", "discourse", "=", "f_discourse", ".", "readline", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "discourse", ")", ")", ":", "\n", "        ", "if", "ord", "(", "discourse", "[", "i", "]", ")", ">=", "128", ":", "discourse", "=", "discourse", "[", ":", "i", "]", "+", "\" \"", "+", "discourse", "[", "i", "+", "1", ":", "]", "\n", "\n", "", "edus", ",", "buf_dialogues", "=", "{", "}", ",", "{", "}", "\n", "\n", "for", "item", "in", "units", ":", "\n", "        ", "_id", "=", "item", "[", "\"@id\"", "]", "\n", "start", "=", "int", "(", "item", "[", "\"positioning\"", "]", "[", "\"start\"", "]", "[", "\"singlePosition\"", "]", "[", "\"@index\"", "]", ")", "\n", "end", "=", "int", "(", "item", "[", "\"positioning\"", "]", "[", "\"end\"", "]", "[", "\"singlePosition\"", "]", "[", "\"@index\"", "]", ")", "\n", "_type", "=", "item", "[", "\"characterisation\"", "]", "[", "\"type\"", "]", "\n", "if", "_type", "in", "[", "\"Turn\"", ",", "\"NonplayerTurn\"", "]", ":", "continue", "\n", "elif", "_type", "==", "\"Dialogue\"", ":", "\n", "            ", "buf_dialogues", "[", "_id", "]", "=", "{", "\n", "\"start\"", ":", "start", ",", "\n", "\"end\"", ":", "end", ",", "\n", "\"edus\"", ":", "{", "}", ",", "\n", "\"cdus\"", ":", "{", "}", ",", "\n", "\"relations\"", ":", "[", "]", "\n", "}", "\n", "", "else", ":", "\n", "            ", "edus", "[", "_id", "]", "=", "{", "\n", "\"id\"", ":", "_id", ",", "\n", "\"type\"", ":", "_type", ",", "\n", "\"text\"", ":", "discourse", "[", "start", ":", "end", "]", ",", "\n", "\"start\"", ":", "start", ",", "\n", "\"end\"", ":", "end", "\n", "}", "\n", "\n", "", "", "belong_to", "=", "{", "}", "\n", "for", "id_edu", "in", "edus", ":", "\n", "        ", "edu", "=", "edus", "[", "id_edu", "]", "\n", "found", "=", "False", "\n", "for", "id_dialogue", "in", "buf_dialogues", ":", "\n", "            ", "dialog", "=", "buf_dialogues", "[", "id_dialogue", "]", "\n", "if", "dialog", "[", "\"start\"", "]", "<=", "edu", "[", "\"start\"", "]", "and", "dialog", "[", "\"end\"", "]", ">=", "edu", "[", "\"end\"", "]", ":", "\n", "                ", "found", "=", "True", "\n", "dialog", "[", "\"edus\"", "]", "[", "id_edu", "]", "=", "edu", "\n", "belong_to", "[", "id_edu", "]", "=", "id_dialogue", "\n", "break", "\n", "", "", "if", "not", "found", ":", "\n", "            ", "raise", "Warning", "(", "\"Dialogue not found\"", ")", "\n", "\n", "", "", "if", "type", "(", "schema", ")", "!=", "list", ":", "schema", "=", "[", "schema", "]", "\n", "for", "item", "in", "schema", ":", "\n", "        ", "_id", "=", "item", "[", "\"@id\"", "]", "\n", "_type", "=", "item", "[", "\"characterisation\"", "]", "[", "\"type\"", "]", "\n", "if", "item", "[", "\"positioning\"", "]", "==", "None", ":", "continue", "\n", "\n", "cdu", "=", "[", "]", "\n", "if", "\"embedded-unit\"", "in", "item", "[", "\"positioning\"", "]", ":", "\n", "            ", "if", "type", "(", "item", "[", "\"positioning\"", "]", "[", "\"embedded-unit\"", "]", ")", "==", "list", ":", "\n", "                ", "cdu", "=", "[", "unit", "[", "\"@id\"", "]", "for", "unit", "in", "item", "[", "\"positioning\"", "]", "[", "\"embedded-unit\"", "]", "]", "\n", "", "else", ":", "\n", "                ", "cdu", "=", "[", "item", "[", "\"positioning\"", "]", "[", "\"embedded-unit\"", "]", "[", "\"@id\"", "]", "]", "\n", "", "for", "edu", "in", "cdu", ":", "\n", "                ", "if", "not", "edu", "in", "edus", ":", "\n", "                    ", "cdu", ".", "remove", "(", "edu", ")", "\n", "", "", "", "if", "\"embedded-schema\"", "in", "item", "[", "\"positioning\"", "]", ":", "\n", "            ", "if", "type", "(", "item", "[", "\"positioning\"", "]", "[", "\"embedded-schema\"", "]", ")", "==", "list", ":", "\n", "                ", "cdu", "+=", "[", "unit", "[", "\"@id\"", "]", "for", "unit", "in", "item", "[", "\"positioning\"", "]", "[", "\"embedded-schema\"", "]", "]", "\n", "", "else", ":", "\n", "                ", "cdu", "+=", "[", "item", "[", "\"positioning\"", "]", "[", "\"embedded-schema\"", "]", "[", "\"@id\"", "]", "]", "\n", "", "", "belong_to", "[", "_id", "]", "=", "belong_to", "[", "cdu", "[", "0", "]", "]", "\n", "buf_dialogues", "[", "belong_to", "[", "_id", "]", "]", "[", "\"cdus\"", "]", "[", "_id", "]", "=", "cdu", "\n", "\n", "", "if", "type", "(", "relations", ")", "!=", "list", ":", "relations", "=", "[", "relations", "]", "\n", "for", "item", "in", "relations", ":", "\n", "        ", "_id", "=", "item", "[", "\"@id\"", "]", "\n", "x", "=", "item", "[", "\"positioning\"", "]", "[", "\"term\"", "]", "[", "0", "]", "[", "\"@id\"", "]", "\n", "y", "=", "item", "[", "\"positioning\"", "]", "[", "\"term\"", "]", "[", "1", "]", "[", "\"@id\"", "]", "\n", "_type", "=", "item", "[", "\"characterisation\"", "]", "[", "\"type\"", "]", "\n", "buf_dialogues", "[", "belong_to", "[", "x", "]", "]", "[", "\"relations\"", "]", ".", "append", "(", "{", "\n", "\"type\"", ":", "_type", ",", "\n", "\"x\"", ":", "x", ",", "\n", "\"y\"", ":", "y", "\n", "}", ")", "\n", "\n", "", "for", "_id", "in", "buf_dialogues", ":", "\n", "        ", "buf_dialogues", "[", "_id", "]", "[", "\"id\"", "]", "=", "id", "\n", "dialogues", ".", "append", "(", "buf_dialogues", "[", "_id", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.None.data_pre.process_dialogue": [[101, 165], ["sorted", "range", "enumerate", "print", "len", "print", "dialogue_cleaned[].append", "dialogue_cleaned[].append", "dialogue[].append", "data_pre.process_dialogue.parse_speaker"], "function", ["None"], ["", "", "def", "process_dialogue", "(", "dialogue", ")", ":", "\n", "    ", "has_incoming", "=", "{", "}", "\n", "\n", "for", "relation", "in", "dialogue", "[", "\"relations\"", "]", ":", "\n", "        ", "has_incoming", "[", "relation", "[", "\"y\"", "]", "]", "=", "True", "\n", "\n", "", "for", "_id", "in", "dialogue", "[", "\"edus\"", "]", ":", "\n", "        ", "edu", "=", "dialogue", "[", "\"edus\"", "]", "[", "_id", "]", "\n", "if", "edu", "[", "\"type\"", "]", "==", "\"paragraph\"", ":", "continue", "\n", "\n", "for", "_id_para", "in", "dialogue", "[", "\"edus\"", "]", ":", "\n", "            ", "def", "parse_speaker", "(", "text", ")", ":", "\n", "                ", "return", "(", "text", ".", "split", "(", ")", ")", "[", "2", "]", "\n", "\n", "", "para", "=", "dialogue", "[", "\"edus\"", "]", "[", "_id_para", "]", "\n", "if", "para", "[", "\"type\"", "]", "!=", "\"paragraph\"", ":", "continue", "\n", "if", "para", "[", "\"start\"", "]", "<=", "edu", "[", "\"start\"", "]", "and", "para", "[", "\"end\"", "]", ">=", "edu", "[", "\"end\"", "]", ":", "\n", "                ", "edu", "[", "\"speaker\"", "]", "=", "parse_speaker", "(", "para", "[", "\"text\"", "]", ")", "\n", "\n", "", "", "", "idx", "=", "{", "}", "\n", "dialogue", "[", "\"edu_list\"", "]", "=", "[", "]", "\n", "for", "_id", "in", "dialogue", "[", "\"edus\"", "]", ":", "\n", "        ", "if", "dialogue", "[", "\"edus\"", "]", "[", "_id", "]", "[", "\"type\"", "]", "!=", "\"paragraph\"", ":", "\n", "            ", "dialogue", "[", "\"edu_list\"", "]", ".", "append", "(", "dialogue", "[", "\"edus\"", "]", "[", "_id", "]", ")", "\n", "", "", "dialogue", "[", "\"edu_list\"", "]", "=", "sorted", "(", "dialogue", "[", "\"edu_list\"", "]", ",", "key", "=", "lambda", "edu", ":", "edu", "[", "\"start\"", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "dialogue", "[", "\"edu_list\"", "]", ")", ")", ":", "\n", "        ", "edu", "=", "dialogue", "[", "\"edu_list\"", "]", "[", "i", "]", "\n", "idx", "[", "edu", "[", "\"id\"", "]", "]", "=", "i", "\n", "\n", "", "for", "i", ",", "edu", "in", "enumerate", "(", "dialogue", "[", "\"edu_list\"", "]", ")", ":", "\n", "        ", "print", "(", "i", ",", "edu", "[", "\"speaker\"", "]", ",", "\":\"", ",", "edu", "[", "\"text\"", "]", ")", "\n", "\n", "", "print", "(", "\"===\"", ")", "\n", "\n", "for", "relation", "in", "dialogue", "[", "\"relations\"", "]", ":", "\n", "        ", "def", "get_head", "(", "x", ")", ":", "\n", "            ", "if", "x", "in", "dialogue", "[", "\"edus\"", "]", ":", "return", "x", "\n", "else", ":", "\n", "                ", "for", "du", "in", "dialogue", "[", "\"cdus\"", "]", "[", "x", "]", ":", "\n", "                    ", "if", "not", "du", "in", "has_incoming", ":", "return", "get_head", "(", "du", ")", "\n", "", "raise", "Warning", "(", "\"Can't find the recursive head\"", ")", "\n", "\n", "", "", "relation", "[", "\"x\"", "]", "=", "idx", "[", "get_head", "(", "relation", "[", "\"x\"", "]", ")", "]", "\n", "relation", "[", "\"y\"", "]", "=", "idx", "[", "get_head", "(", "relation", "[", "\"y\"", "]", ")", "]", "\n", "\n", "", "dialogue_cleaned", "=", "{", "\n", "\"id\"", ":", "dialogue", "[", "\"id\"", "]", ",", "\n", "\"edus\"", ":", "[", "]", ",", "\n", "\"relations\"", ":", "[", "]", "\n", "}", "\n", "\n", "for", "edu", "in", "dialogue", "[", "\"edu_list\"", "]", ":", "\n", "        ", "dialogue_cleaned", "[", "\"edus\"", "]", ".", "append", "(", "{", "\n", "\"speaker\"", ":", "edu", "[", "\"speaker\"", "]", ",", "\n", "\"text\"", ":", "edu", "[", "\"text\"", "]", "\n", "}", ")", "\n", "", "for", "relation", "in", "dialogue", "[", "\"relations\"", "]", ":", "\n", "        ", "dialogue_cleaned", "[", "\"relations\"", "]", ".", "append", "(", "{", "\n", "\"type\"", ":", "relation", "[", "\"type\"", "]", ",", "\n", "\"x\"", ":", "relation", "[", "\"x\"", "]", ",", "\n", "\"y\"", ":", "relation", "[", "\"y\"", "]", "\n", "}", ")", "\n", "\n", "", "return", "dialogue_cleaned", "\n", "\n"]], "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.None.Structured_Encoder.Structured_Encoder.__init__": [[7, 37], ["tensorflow.placeholder", "tensorflow.placeholder_with_default", "tensorflow.placeholder", "tensorflow.train.GradientDescentOptimizer", "tensorflow.trainable_variables", "tensorflow.gradients", "tensorflow.convert_to_tensor", "tensorflow.gradients", "Structured_Encoder.Structured_Encoder.optimizer.apply_gradients", "tensorflow.variable_scope", "Structured_Encoder.Structured_Encoder._build_embedding", "Structured_Encoder.Structured_Encoder._build_input", "Structured_Encoder.Structured_Encoder._build_encoder", "tensorflow.placeholder", "zip", "var.name.find", "Structured_Encoder.Structured_Encoder.params.append", "os.path.join", "tensorflow.contrib.framework.get_name_scope"], "methods", ["home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.None.NonStructured_Encoder.NonStructured_Encoder._build_embedding", "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.None.Agent.Agent._build_input", "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.None.NonStructured_Encoder.NonStructured_Encoder._build_encoder"], ["    ", "def", "__init__", "(", "self", ",", "sess", ",", "FLAGS", ",", "scope", "=", "\"DAG_RNN\"", ")", ":", "\n", "        ", "self", ".", "sess", "=", "sess", "\n", "self", ".", "num_units", "=", "FLAGS", ".", "num_units", "\n", "self", ".", "num_layers", "=", "FLAGS", ".", "num_layers", "\n", "self", ".", "num_relations", "=", "FLAGS", ".", "num_relations", "\n", "self", ".", "dim_embed_relation", "=", "FLAGS", ".", "dim_embed_relation", "\n", "self", ".", "train_keep_prob", "=", "FLAGS", ".", "keep_prob", "\n", "\n", "self", ".", "fixed_noise", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ")", "\n", "self", ".", "keep_prob", "=", "tf", ".", "placeholder_with_default", "(", "1.0", ",", "(", ")", ")", "\n", "self", ".", "learning_rate", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "GradientDescentOptimizer", "(", "self", ".", "learning_rate", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "            ", "self", ".", "_build_embedding", "(", ")", "\n", "self", ".", "_build_input", "(", ")", "\n", "self", ".", "_build_encoder", "(", ")", "\n", "\n", "", "self", ".", "params", "=", "[", "]", "\n", "for", "var", "in", "tf", ".", "trainable_variables", "(", ")", ":", "\n", "            ", "if", "var", ".", "name", ".", "find", "(", "os", ".", "path", ".", "join", "(", "tf", ".", "contrib", ".", "framework", ".", "get_name_scope", "(", ")", ",", "scope", ")", ")", "==", "0", ":", "\n", "                ", "self", ".", "params", ".", "append", "(", "var", ")", "\n", "\n", "# out", "\n", "", "", "self", ".", "gradients", "=", "tf", ".", "gradients", "(", "self", ".", "result", ",", "self", ".", "params", ",", "self", ".", "grad_result", ")", "\n", "self", ".", "gradients", "[", "0", "]", "=", "tf", ".", "convert_to_tensor", "(", "self", ".", "gradients", "[", "0", "]", ")", "\n", "self", ".", "grad_input", "=", "tf", ".", "gradients", "(", "self", ".", "result", ",", "[", "self", ".", "parent", ",", "self", ".", "current", "]", ",", "self", ".", "grad_result", ")", "\n", "\n", "self", ".", "grad_in", "=", "[", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "param", ".", "shape", ")", "for", "param", "in", "self", ".", "params", "]", "\n", "self", ".", "train_op", "=", "self", ".", "optimizer", ".", "apply_gradients", "(", "zip", "(", "self", ".", "grad_in", ",", "self", ".", "params", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.None.Structured_Encoder.Structured_Encoder._build_embedding": [[38, 42], ["tensorflow.get_variable"], "methods", ["None"], ["", "def", "_build_embedding", "(", "self", ")", ":", "\n", "        ", "self", ".", "embed", "=", "tf", ".", "get_variable", "(", "\n", "\"relation_embedding\"", ",", "(", "self", ".", "num_relations", "+", "1", ",", "self", ".", "dim_embed_relation", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "initializer", "=", "tf", ".", "zeros_initializer", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.None.Structured_Encoder.Structured_Encoder._build_input": [[44, 50], ["tensorflow.variable_scope", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.nn.embedding_lookup", "tensorflow.placeholder"], "methods", ["None"], ["", "def", "_build_input", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "\"input\"", ")", ":", "\n", "            ", "self", ".", "parent", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", "None", ",", "self", ".", "num_units", ")", ",", "\"parent\"", ")", "\n", "self", ".", "relation", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "(", "None", ",", ")", ",", "\"relation\"", ")", "\n", "self", ".", "relation_embed", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "embed", ",", "self", ".", "relation", ")", "\n", "self", ".", "current", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", "None", ",", "self", ".", "num_units", ")", ",", "\"current\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.None.Structured_Encoder.Structured_Encoder._build_encoder": [[51, 69], ["tensorflow.variable_scope", "Structured_Encoder.Structured_Encoder.recurrent_noise_in.append", "libs.DropoutWrapper", "Structured_Encoder.Structured_Encoder.recurrent_noise_out.append", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.contrib.rnn.GRUCell", "Structured_Encoder.Structured_Encoder.cell.__call__", "tensorflow.concat"], "methods", ["home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.libs.rnn_cell_impl.DropoutWrapper.__call__"], ["", "", "def", "_build_encoder", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "\"encoder\"", ")", ":", "\n", "            ", "self", ".", "recurrent_noise_in", ",", "self", ".", "recurrent_noise_out", ",", "self", ".", "recurrent_noise", "=", "[", "]", ",", "[", "]", ",", "None", "\n", "self", ".", "recurrent_noise_in", ".", "append", "(", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", "1", ",", "self", ".", "dim_embed_relation", "+", "self", ".", "num_units", ")", ")", ")", "\n", "dropout", "=", "DropoutWrapper", "(", "\n", "tf", ".", "contrib", ".", "rnn", ".", "GRUCell", "(", "self", ".", "num_units", ")", ",", "self", ".", "keep_prob", ",", "\n", "input_size", "=", "self", ".", "dim_embed_relation", "+", "self", ".", "num_units", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "noise_input", "=", "self", ".", "recurrent_noise_in", "[", "-", "1", "]", ",", "\n", "fixed_noise", "=", "self", ".", "fixed_noise", "\n", ")", "\n", "self", ".", "recurrent_noise_out", ".", "append", "(", "dropout", ".", "recurrent_input_noise", ")", "\n", "self", ".", "cell", "=", "dropout", "\n", "\n", "self", ".", "result", "=", "self", ".", "cell", ".", "__call__", "(", "\n", "tf", ".", "concat", "(", "[", "self", ".", "relation_embed", ",", "self", ".", "current", "]", ",", "axis", "=", "-", "1", ")", ",", "\n", "self", ".", "parent", "\n", ")", "[", "1", "]", "\n", "self", ".", "grad_result", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "self", ".", "result", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.None.Structured_Encoder.Structured_Encoder.get_gradients": [[70, 87], ["range", "len", "Structured_Encoder.Structured_Encoder.sess.run"], "methods", ["None"], ["", "", "def", "get_gradients", "(", "self", ",", "grad_result", ",", "parent", ",", "current", ",", "relation", ",", "buffered", "=", "False", ")", ":", "\n", "        ", "output_feed", "=", "[", "self", ".", "gradients", ",", "self", ".", "grad_input", "]", "\n", "input_feed", "=", "{", "\n", "self", ".", "grad_result", ":", "grad_result", ",", "\n", "self", ".", "parent", ":", "parent", ",", "\n", "self", ".", "current", ":", "current", ",", "\n", "self", ".", "relation", ":", "relation", ",", "\n", "self", ".", "keep_prob", ":", "self", ".", "train_keep_prob", ",", "\n", "self", ".", "fixed_noise", ":", "1", "\n", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "recurrent_noise", ")", ")", ":", "\n", "            ", "input_feed", "[", "self", ".", "recurrent_noise_in", "[", "i", "]", "]", "=", "self", ".", "recurrent_noise", "[", "i", "]", "\n", "", "if", "buffered", ":", "\n", "            ", "return", "(", "output_feed", ",", "input_feed", ")", "\n", "", "else", ":", "\n", "            ", "gradients", "=", "self", ".", "sess", ".", "run", "(", "output_feed", ",", "input_feed", ")", "\n", "return", "gradients", "[", "0", "]", ",", "gradients", "[", "1", "]", "[", "0", "]", ",", "gradients", "[", "1", "]", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.None.Structured_Encoder.Structured_Encoder.train": [[88, 97], ["range", "len", "Structured_Encoder.Structured_Encoder.sess.run"], "methods", ["None"], ["", "", "def", "train", "(", "self", ",", "grad", ",", "learning_rate", ",", "buffered", "=", "False", ")", ":", "\n", "        ", "input_feed", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "grad", ")", ")", ":", "\n", "            ", "input_feed", "[", "self", ".", "grad_in", "[", "i", "]", "]", "=", "grad", "[", "i", "]", "\n", "", "input_feed", "[", "self", ".", "learning_rate", "]", "=", "learning_rate", "\n", "if", "buffered", ":", "\n", "            ", "return", "(", "[", "self", ".", "train_op", "]", ",", "input_feed", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "sess", ".", "run", "(", "self", ".", "train_op", ",", "input_feed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.None.Structured_Encoder.Structured_Encoder.infer": [[98, 118], ["range", "Structured_Encoder.Structured_Encoder.sess.run", "len", "numpy.zeros"], "methods", ["None"], ["", "", "def", "infer", "(", "self", ",", "data", ",", "fixed_noise", ",", "train", "=", "False", ",", "buffered", "=", "False", ")", ":", "\n", "        ", "input_feed", "=", "{", "\n", "self", ".", "parent", ":", "data", "[", "\"parent\"", "]", ",", "\n", "self", ".", "relation", ":", "data", "[", "\"relation\"", "]", ",", "\n", "self", ".", "current", ":", "data", "[", "\"current\"", "]", ",", "\n", "self", ".", "fixed_noise", ":", "fixed_noise", "\n", "}", "\n", "if", "fixed_noise", "and", "(", "self", ".", "recurrent_noise", "is", "not", "None", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "recurrent_noise", ")", ")", ":", "\n", "                ", "input_feed", "[", "self", ".", "recurrent_noise_in", "[", "i", "]", "]", "=", "self", ".", "recurrent_noise", "[", "i", "]", "\n", "", "", "else", ":", "\n", "            ", "for", "noise", "in", "self", ".", "recurrent_noise_in", ":", "\n", "                ", "input_feed", "[", "noise", "]", "=", "np", ".", "zeros", "(", "noise", ".", "shape", ")", "\n", "", "", "if", "train", ":", "\n", "            ", "input_feed", "[", "self", ".", "keep_prob", "]", "=", "self", ".", "train_keep_prob", "\n", "", "output_feed", "=", "[", "self", ".", "result", ",", "self", ".", "recurrent_noise_out", "]", "\n", "if", "buffered", ":", "\n", "            ", "return", "(", "output_feed", ",", "input_feed", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "sess", ".", "run", "(", "output_feed", ",", "input_feed", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.None.NonStructured_Encoder.NonStructured_Encoder.__init__": [[7, 42], ["tensorflow.placeholder", "tensorflow.placeholder_with_default", "tensorflow.placeholder", "tensorflow.train.GradientDescentOptimizer", "tensorflow.trainable_variables", "tensorflow.gradients", "tensorflow.convert_to_tensor", "NonStructured_Encoder.NonStructured_Encoder.optimizer.apply_gradients", "tensorflow.variable_scope", "NonStructured_Encoder.NonStructured_Encoder._build_embedding", "NonStructured_Encoder.NonStructured_Encoder._build_input", "NonStructured_Encoder.NonStructured_Encoder._build_encoders", "tensorflow.concat", "tensorflow.concat", "tensorflow.placeholder", "zip", "var.name.find", "NonStructured_Encoder.NonStructured_Encoder.params.append", "os.path.join", "tensorflow.contrib.framework.get_name_scope"], "methods", ["home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.None.NonStructured_Encoder.NonStructured_Encoder._build_embedding", "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.None.Agent.Agent._build_input", "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.None.Agent.Agent._build_encoders"], ["    ", "def", "__init__", "(", "self", ",", "sess", ",", "FLAGS", ",", "embed", ",", "num_units", "=", "None", ",", "scope", "=", "\"Sentence_Encoder\"", ")", ":", "\n", "        ", "self", ".", "sess", "=", "sess", "\n", "self", ".", "dim_embed_word", "=", "FLAGS", ".", "dim_embed_word", "\n", "self", ".", "num_units", "=", "num_units", "if", "(", "num_units", "is", "not", "None", ")", "else", "FLAGS", ".", "num_units", "\n", "self", ".", "num_layers", "=", "FLAGS", ".", "num_layers", "\n", "self", ".", "train_keep_prob", "=", "FLAGS", ".", "keep_prob", "\n", "\n", "self", ".", "fixed_noise", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ")", "\n", "self", ".", "keep_prob", "=", "tf", ".", "placeholder_with_default", "(", "1.0", ",", "(", ")", ")", "\n", "self", ".", "learning_rate", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "GradientDescentOptimizer", "(", "self", ".", "learning_rate", ")", "\n", "\n", "self", ".", "recurrent_noise_in", ",", "self", ".", "recurrent_noise_out", ",", "self", ".", "recurrent_noise", "=", "[", "]", ",", "[", "]", ",", "None", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "            ", "self", ".", "_build_embedding", "(", "embed", ")", "\n", "self", ".", "_build_input", "(", ")", "\n", "self", ".", "_build_encoders", "(", ")", "\n", "\n", "", "self", ".", "params", "=", "[", "]", "\n", "for", "var", "in", "tf", ".", "trainable_variables", "(", ")", ":", "\n", "            ", "if", "var", ".", "name", ".", "find", "(", "os", ".", "path", ".", "join", "(", "tf", ".", "contrib", ".", "framework", ".", "get_name_scope", "(", ")", ",", "scope", ")", ")", "==", "0", ":", "\n", "                ", "self", ".", "params", ".", "append", "(", "var", ")", "\n", "\n", "", "", "self", ".", "grad_out", "=", "tf", ".", "gradients", "(", "\n", "tf", ".", "concat", "(", "[", "self", ".", "enc_text", ",", "self", ".", "enc_text_cont", "]", ",", "axis", "=", "-", "1", ")", ",", "\n", "self", ".", "params", ",", "\n", "tf", ".", "concat", "(", "[", "self", ".", "grad_enc_text", ",", "self", ".", "grad_enc_text_cont", "]", ",", "axis", "=", "-", "1", ")", "\n", ")", "\n", "self", ".", "grad_out", "[", "0", "]", "=", "tf", ".", "convert_to_tensor", "(", "self", ".", "grad_out", "[", "0", "]", ")", "\n", "self", ".", "grad_in", "=", "[", "\n", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "param", ".", "shape", ")", "\n", "for", "param", "in", "self", ".", "params", "\n", "]", "\n", "self", ".", "train_op", "=", "self", ".", "optimizer", ".", "apply_gradients", "(", "zip", "(", "self", ".", "grad_in", ",", "self", ".", "params", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.None.NonStructured_Encoder.NonStructured_Encoder._build_embedding": [[43, 59], ["tensorflow.contrib.lookup.MutableHashTable", "tensorflow.contrib.lookup.MutableHashTable", "tensorflow.get_variable"], "methods", ["None"], ["", "def", "_build_embedding", "(", "self", ",", "embed", ")", ":", "\n", "        ", "self", ".", "symbol2index", "=", "tf", ".", "contrib", ".", "lookup", ".", "MutableHashTable", "(", "\n", "key_dtype", "=", "tf", ".", "string", ",", "\n", "value_dtype", "=", "tf", ".", "int64", ",", "\n", "default_value", "=", "0", ",", "\n", "shared_name", "=", "\"in_table\"", ",", "\n", "name", "=", "\"in_table\"", ",", "\n", "checkpoint", "=", "True", ")", "\n", "self", ".", "index2symbol", "=", "tf", ".", "contrib", ".", "lookup", ".", "MutableHashTable", "(", "\n", "key_dtype", "=", "tf", ".", "int64", ",", "\n", "value_dtype", "=", "tf", ".", "string", ",", "\n", "default_value", "=", "\"UNK\"", ",", "\n", "shared_name", "=", "\"out_table\"", ",", "\n", "name", "=", "\"out_table\"", ",", "\n", "checkpoint", "=", "True", ")", "\n", "self", ".", "embed", "=", "tf", ".", "get_variable", "(", "\"word_embedding\"", ",", "dtype", "=", "tf", ".", "float32", ",", "initializer", "=", "embed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.None.NonStructured_Encoder.NonStructured_Encoder._build_input": [[60, 67], ["tensorflow.variable_scope", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.nn.embedding_lookup", "tensorflow.placeholder", "NonStructured_Encoder.NonStructured_Encoder.symbol2index.lookup"], "methods", ["None"], ["", "def", "_build_input", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "\"input\"", ")", ":", "\n", "            ", "self", ".", "num_posts", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "(", "None", ",", ")", ",", "\"num_posts\"", ")", "\n", "self", ".", "text_string", "=", "tf", ".", "placeholder", "(", "tf", ".", "string", ",", "(", "None", ",", "None", ",", "None", ")", ",", "\"text_string\"", ")", "\n", "self", ".", "text", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "\n", "self", ".", "embed", ",", "self", ".", "symbol2index", ".", "lookup", "(", "self", ".", "text_string", ")", ")", "\n", "self", ".", "text_len", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "(", "None", ",", "None", ",", ")", ",", "\"text_len\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.None.NonStructured_Encoder.NonStructured_Encoder._build_encoders": [[68, 95], ["tensorflow.variable_scope", "NonStructured_Encoder.NonStructured_Encoder._build_encoder", "tensorflow.reshape", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.reshape", "tensorflow.reshape", "NonStructured_Encoder.NonStructured_Encoder._build_encoder", "tensorflow.reshape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.None.NonStructured_Encoder.NonStructured_Encoder._build_encoder", "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.None.NonStructured_Encoder.NonStructured_Encoder._build_encoder"], ["", "", "def", "_build_encoders", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "\"encoders\"", ")", ":", "\n", "            ", "self", ".", "enc_text", "=", "self", ".", "_build_encoder", "(", "\n", "tf", ".", "reshape", "(", "\n", "self", ".", "text", ",", "\n", "[", "tf", ".", "shape", "(", "self", ".", "text", ")", "[", "0", "]", "*", "tf", ".", "shape", "(", "self", ".", "text", ")", "[", "1", "]", ",", "tf", ".", "shape", "(", "self", ".", "text", ")", "[", "2", "]", ",", "self", ".", "dim_embed_word", "]", "\n", ")", ",", "\n", "tf", ".", "reshape", "(", "self", ".", "text_len", ",", "[", "-", "1", "]", ")", ",", "\n", "self", ".", "dim_embed_word", ",", "\n", "True", ",", "\n", "\"enc_text\"", "\n", ")", "\n", "self", ".", "enc_text_cont", "=", "tf", ".", "reshape", "(", "\n", "self", ".", "_build_encoder", "(", "\n", "tf", ".", "reshape", "(", "\n", "self", ".", "enc_text", ",", "\n", "[", "tf", ".", "shape", "(", "self", ".", "text", ")", "[", "0", "]", ",", "tf", ".", "shape", "(", "self", ".", "text", ")", "[", "1", "]", ",", "self", ".", "num_units", "]", "\n", ")", ",", "\n", "self", ".", "num_posts", ",", "\n", "self", ".", "num_units", ",", "\n", "False", ",", "\n", "\"enc_text_cont\"", "\n", ")", ",", "\n", "[", "-", "1", ",", "self", ".", "num_units", "]", "\n", ")", "\n", "self", ".", "grad_enc_text", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "self", ".", "enc_text", ".", "shape", ")", "\n", "self", ".", "grad_enc_text_cont", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "self", ".", "enc_text_cont", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.None.NonStructured_Encoder.NonStructured_Encoder._build_encoder": [[96, 120], ["tensorflow.variable_scope", "NonStructured_Encoder.NonStructured_Encoder._build_biencoder_cell", "tensorflow.nn.bidirectional_dynamic_rnn", "range", "NonStructured_Encoder.NonStructured_Encoder._build_cell", "tensorflow.nn.dynamic_rnn", "enc_state.append", "tensorflow.concat"], "methods", ["home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.None.NonStructured_Encoder.NonStructured_Encoder._build_biencoder_cell", "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.None.NonStructured_Encoder.NonStructured_Encoder._build_cell"], ["", "", "def", "_build_encoder", "(", "self", ",", "inputs", ",", "length", ",", "input_size", ",", "use_biencoder", ",", "scope", ",", "reuse", "=", "None", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "if", "use_biencoder", ":", "\n", "                ", "cell_fw", ",", "cell_bw", "=", "self", ".", "_build_biencoder_cell", "(", "input_size", ")", "\n", "outputs", ",", "states", "=", "tf", ".", "nn", ".", "bidirectional_dynamic_rnn", "(", "\n", "cell_fw", "=", "cell_fw", ",", "\n", "cell_bw", "=", "cell_bw", ",", "\n", "inputs", "=", "inputs", ",", "\n", "sequence_length", "=", "length", ",", "\n", "dtype", "=", "tf", ".", "float32", "\n", ")", "\n", "enc_state", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "                    ", "enc_state", ".", "append", "(", "tf", ".", "concat", "(", "[", "states", "[", "0", "]", "[", "i", "]", ",", "states", "[", "1", "]", "[", "i", "]", "]", ",", "axis", "=", "-", "1", ")", ")", "\n", "", "return", "enc_state", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "                ", "cell", "=", "self", ".", "_build_cell", "(", "self", ".", "num_units", ",", "input_size", ")", "\n", "outputs", ",", "states", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "\n", "cell", "=", "cell", ",", "\n", "inputs", "=", "inputs", ",", "\n", "sequence_length", "=", "length", ",", "\n", "dtype", "=", "tf", ".", "float32", "\n", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.None.NonStructured_Encoder.NonStructured_Encoder._build_cell": [[121, 135], ["range", "tensorflow.contrib.rnn.MultiRNNCell", "NonStructured_Encoder.NonStructured_Encoder.recurrent_noise_in.append", "libs.DropoutWrapper", "NonStructured_Encoder.NonStructured_Encoder.recurrent_noise_out.append", "cells.append", "tensorflow.placeholder", "tensorflow.contrib.rnn.GRUCell"], "methods", ["None"], ["", "", "", "def", "_build_cell", "(", "self", ",", "num_units", ",", "input_size", ")", ":", "\n", "        ", "cells", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "self", ".", "recurrent_noise_in", ".", "append", "(", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", "1", ",", "input_size", ")", ")", ")", "\n", "dropout", "=", "DropoutWrapper", "(", "\n", "tf", ".", "contrib", ".", "rnn", ".", "GRUCell", "(", "num_units", ")", ",", "self", ".", "keep_prob", ",", "\n", "input_size", "=", "input_size", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "noise_input", "=", "self", ".", "recurrent_noise_in", "[", "-", "1", "]", ",", "\n", "fixed_noise", "=", "self", ".", "fixed_noise", "\n", ")", "\n", "self", ".", "recurrent_noise_out", ".", "append", "(", "dropout", ".", "recurrent_input_noise", ")", "\n", "cells", ".", "append", "(", "dropout", ")", "\n", "\n", "", "return", "tf", ".", "contrib", ".", "rnn", ".", "MultiRNNCell", "(", "cells", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.None.NonStructured_Encoder.NonStructured_Encoder._build_biencoder_cell": [[136, 140], ["NonStructured_Encoder.NonStructured_Encoder._build_cell", "NonStructured_Encoder.NonStructured_Encoder._build_cell"], "methods", ["home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.None.NonStructured_Encoder.NonStructured_Encoder._build_cell", "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.None.NonStructured_Encoder.NonStructured_Encoder._build_cell"], ["", "def", "_build_biencoder_cell", "(", "self", ",", "input_size", ")", ":", "\n", "        ", "cell_fw", "=", "self", ".", "_build_cell", "(", "self", ".", "num_units", "/", "2", ",", "input_size", ")", "\n", "cell_bw", "=", "self", ".", "_build_cell", "(", "self", ".", "num_units", "/", "2", ",", "input_size", ")", "\n", "return", "cell_fw", ",", "cell_bw", "\n", "\n"]], "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.None.NonStructured_Encoder.NonStructured_Encoder.initialize": [[141, 147], ["NonStructured_Encoder.NonStructured_Encoder.symbol2index.insert", "NonStructured_Encoder.NonStructured_Encoder.index2symbol.insert", "NonStructured_Encoder.NonStructured_Encoder.sess.run", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "range", "range", "len", "len"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "vocab", ")", ":", "\n", "        ", "op_in", "=", "self", ".", "symbol2index", ".", "insert", "(", "\n", "tf", ".", "constant", "(", "vocab", ")", ",", "tf", ".", "constant", "(", "range", "(", "len", "(", "vocab", ")", ")", ",", "dtype", "=", "tf", ".", "int64", ")", ")", "\n", "op_out", "=", "self", ".", "index2symbol", ".", "insert", "(", "\n", "tf", ".", "constant", "(", "range", "(", "len", "(", "vocab", ")", ")", ",", "dtype", "=", "tf", ".", "int64", ")", ",", "tf", ".", "constant", "(", "vocab", ")", ")", "\n", "self", ".", "sess", ".", "run", "(", "[", "op_in", ",", "op_out", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.None.NonStructured_Encoder.NonStructured_Encoder.format_data": [[148, 169], ["text_string.append", "text_len.append", "numpy.array", "numpy.array", "max", "text_string[].append", "text_len[].append", "len", "NonStructured_Encoder.NonStructured_Encoder.format_data.padding"], "methods", ["None"], ["", "def", "format_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "def", "padding", "(", "sent", ",", "l", ")", ":", "\n", "            ", "return", "sent", "+", "[", "\"EOS\"", "]", "+", "[", "\"PAD\"", "]", "*", "(", "l", "-", "len", "(", "sent", ")", "-", "1", ")", "\n", "\n", "", "length", "=", "0", "\n", "for", "dialog", "in", "data", ":", "\n", "            ", "for", "text", "in", "dialog", ":", "\n", "                ", "length", "=", "max", "(", "length", ",", "len", "(", "text", ")", ")", "\n", "", "", "length", "+=", "1", "\n", "\n", "text_string", ",", "text_len", "=", "[", "]", ",", "[", "]", "\n", "for", "dialog", "in", "data", ":", "\n", "            ", "text_string", ".", "append", "(", "[", "]", ")", "\n", "text_len", ".", "append", "(", "[", "]", ")", "\n", "for", "text", "in", "dialog", ":", "\n", "                ", "text_string", "[", "-", "1", "]", ".", "append", "(", "padding", "(", "text", ",", "length", ")", ")", "\n", "text_len", "[", "-", "1", "]", ".", "append", "(", "len", "(", "text", ")", "+", "1", ")", "\n", "\n", "", "", "return", "{", "\n", "\"text_string\"", ":", "np", ".", "array", "(", "text_string", ")", ",", "\n", "\"text_len\"", ":", "np", ".", "array", "(", "text_len", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.None.NonStructured_Encoder.NonStructured_Encoder.get_gradients": [[171, 188], ["NonStructured_Encoder.NonStructured_Encoder.format_data", "range", "len", "NonStructured_Encoder.NonStructured_Encoder.sess.run"], "methods", ["home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.None.NonStructured_Encoder.NonStructured_Encoder.format_data"], ["", "def", "get_gradients", "(", "self", ",", "data", ",", "num_posts", ",", "grad_enc_text", ",", "grad_enc_text_cont", ",", "buffered", "=", "False", ")", ":", "\n", "        ", "data", "=", "self", ".", "format_data", "(", "data", ")", "\n", "input_feed", "=", "{", "\n", "self", ".", "text_string", ":", "data", "[", "\"text_string\"", "]", ",", "\n", "self", ".", "text_len", ":", "data", "[", "\"text_len\"", "]", ",", "\n", "self", ".", "num_posts", ":", "num_posts", ",", "\n", "self", ".", "grad_enc_text", ":", "grad_enc_text", ",", "\n", "self", ".", "grad_enc_text_cont", ":", "grad_enc_text_cont", ",", "\n", "self", ".", "keep_prob", ":", "self", ".", "train_keep_prob", ",", "\n", "self", ".", "fixed_noise", ":", "1", "\n", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "recurrent_noise", ")", ")", ":", "\n", "            ", "input_feed", "[", "self", ".", "recurrent_noise_in", "[", "i", "]", "]", "=", "self", ".", "recurrent_noise", "[", "i", "]", "\n", "", "if", "buffered", ":", "\n", "            ", "return", "(", "[", "self", ".", "grad_out", "]", ",", "input_feed", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "sess", ".", "run", "(", "self", ".", "grad_out", ",", "input_feed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.None.NonStructured_Encoder.NonStructured_Encoder.train": [[189, 198], ["range", "len", "NonStructured_Encoder.NonStructured_Encoder.sess.run"], "methods", ["None"], ["", "", "def", "train", "(", "self", ",", "grad", ",", "learning_rate", ",", "buffered", "=", "False", ")", ":", "\n", "        ", "input_feed", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "grad", ")", ")", ":", "\n", "            ", "input_feed", "[", "self", ".", "grad_in", "[", "i", "]", "]", "=", "grad", "[", "i", "]", "\n", "", "input_feed", "[", "self", ".", "learning_rate", "]", "=", "learning_rate", "\n", "if", "buffered", ":", "\n", "            ", "return", "(", "[", "self", ".", "train_op", "]", ",", "input_feed", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "sess", ".", "run", "(", "self", ".", "train_op", ",", "input_feed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.None.NonStructured_Encoder.NonStructured_Encoder.infer": [[199, 216], ["NonStructured_Encoder.NonStructured_Encoder.format_data", "numpy.zeros", "NonStructured_Encoder.NonStructured_Encoder.sess.run"], "methods", ["home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.None.NonStructured_Encoder.NonStructured_Encoder.format_data"], ["", "", "def", "infer", "(", "self", ",", "data", ",", "num_posts", ",", "is_train", ",", "buffered", "=", "False", ")", ":", "\n", "        ", "data", "=", "self", ".", "format_data", "(", "data", ")", "\n", "input_feed", "=", "{", "\n", "self", ".", "text_string", ":", "data", "[", "\"text_string\"", "]", ",", "\n", "self", ".", "text_len", ":", "data", "[", "\"text_len\"", "]", ",", "\n", "self", ".", "num_posts", ":", "num_posts", ",", "\n", "self", ".", "fixed_noise", ":", "0", "\n", "}", "\n", "for", "noise", "in", "self", ".", "recurrent_noise_in", ":", "\n", "            ", "input_feed", "[", "noise", "]", "=", "np", ".", "zeros", "(", "noise", ".", "shape", ")", "\n", "", "if", "is_train", ":", "\n", "            ", "input_feed", "[", "self", ".", "keep_prob", "]", "=", "self", ".", "train_keep_prob", "\n", "", "output_feed", "=", "[", "self", ".", "enc_text", ",", "self", ".", "enc_text_cont", ",", "self", ".", "recurrent_noise_out", "]", "\n", "if", "buffered", ":", "\n", "            ", "return", "(", "output_feed", ",", "input_feed", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "sess", ".", "run", "(", "output_feed", ",", "input_feed", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.None.Agent.Agent.__init__": [[10, 52], ["tensorflow.placeholder", "tensorflow.placeholder_with_default", "tensorflow.placeholder", "tensorflow.train.GradientDescentOptimizer", "tensorflow.trainable_variables", "Agent.Agent._build_gradients", "Agent.Agent.optimizer.apply_gradients", "tensorflow.variable_scope", "Agent.Agent._build_input", "Agent.Agent._build_policy_network", "tensorflow.placeholder", "zip", "Agent.Agent._build_encoders", "var.name.find", "Agent.Agent.params_policy_network.append", "var.name.find", "Agent.Agent.params.append", "os.path.join", "os.path.join", "tensorflow.contrib.framework.get_name_scope", "os.path.join", "tensorflow.contrib.framework.get_name_scope"], "methods", ["home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.None.Agent.Agent._build_gradients", "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.None.Agent.Agent._build_input", "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.None.Agent.Agent._build_policy_network", "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.None.Agent.Agent._build_encoders"], ["    ", "def", "__init__", "(", "self", ",", "sess", ",", "FLAGS", ",", "embed", ",", "scope", ",", "is_multi", ",", "encoders", "=", "None", ")", ":", "\n", "        ", "self", ".", "sess", "=", "sess", "\n", "self", ".", "is_multi", "=", "is_multi", "\n", "\n", "self", ".", "num_relations", "=", "FLAGS", ".", "num_relations", "\n", "self", ".", "num_units", "=", "FLAGS", ".", "num_units", "\n", "self", ".", "dim_feature_bi", "=", "FLAGS", ".", "dim_feature_bi", "\n", "self", ".", "use_structured", "=", "FLAGS", ".", "use_structured", "\n", "self", ".", "use_speaker_attn", "=", "FLAGS", ".", "use_speaker_attn", "\n", "self", ".", "dim_state", "=", "4", "*", "self", ".", "num_units", "+", "self", ".", "dim_feature_bi", "\n", "self", ".", "train_keep_prob", "=", "FLAGS", ".", "keep_prob", "\n", "\n", "self", ".", "fixed_noise", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ")", "\n", "self", ".", "keep_prob", "=", "tf", ".", "placeholder_with_default", "(", "1.0", ",", "(", ")", ")", "\n", "self", ".", "learning_rate", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "GradientDescentOptimizer", "(", "self", ".", "learning_rate", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "            ", "self", ".", "_build_input", "(", ")", "\n", "self", ".", "_build_policy_network", "(", ")", "\n", "if", "encoders", ":", "\n", "                ", "self", ".", "ns_encoder", "=", "encoders", "[", "0", "]", "\n", "self", ".", "s_encoder_attn", "=", "encoders", "[", "1", "]", "\n", "self", ".", "s_encoder_general", "=", "encoders", "[", "2", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "_build_encoders", "(", "FLAGS", ",", "embed", ")", "\n", "\n", "", "", "self", ".", "params_policy_network", "=", "[", "]", "\n", "self", ".", "params", "=", "[", "]", "\n", "for", "var", "in", "tf", ".", "trainable_variables", "(", ")", ":", "\n", "            ", "if", "var", ".", "name", ".", "find", "(", "os", ".", "path", ".", "join", "(", "tf", ".", "contrib", ".", "framework", ".", "get_name_scope", "(", ")", ",", "os", ".", "path", ".", "join", "(", "scope", ",", "\"policy_network\"", ")", ")", ")", "==", "0", ":", "\n", "                ", "self", ".", "params_policy_network", ".", "append", "(", "var", ")", "\n", "", "if", "var", ".", "name", ".", "find", "(", "os", ".", "path", ".", "join", "(", "tf", ".", "contrib", ".", "framework", ".", "get_name_scope", "(", ")", ",", "scope", ")", ")", "==", "0", ":", "\n", "                ", "self", ".", "params", ".", "append", "(", "var", ")", "\n", "\n", "", "", "self", ".", "_build_gradients", "(", ")", "\n", "\n", "self", ".", "grad_policy_in", "=", "[", "\n", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "param", ".", "shape", ")", "\n", "for", "param", "in", "self", ".", "params_policy_network", "\n", "]", "\n", "self", ".", "train_op", "=", "self", ".", "optimizer", ".", "apply_gradients", "(", "zip", "(", "self", ".", "grad_policy_in", ",", "self", ".", "params_policy_network", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.None.Agent.Agent.get_policy": [[53, 61], ["Agent.Agent.sess.run"], "methods", ["None"], ["", "def", "get_policy", "(", "self", ",", "state", ",", "mask", "=", "None", ")", ":", "\n", "        ", "input_feed", "=", "{", "self", ".", "state", ":", "state", "}", "\n", "if", "not", "self", ".", "is_multi", ":", "\n", "            ", "input_feed", "[", "self", ".", "mask", "]", "=", "mask", "\n", "", "policy", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "policy", ",", "input_feed", ")", "\n", "if", "not", "self", ".", "is_multi", ":", "\n", "            ", "policy", "=", "policy", "*", "mask", "\n", "", "return", "policy", "\n", "\n"]], "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.None.Agent.Agent.get_gradients": [[62, 71], ["Agent.Agent.sess.run"], "methods", ["None"], ["", "def", "get_gradients", "(", "self", ",", "state", ",", "golden", ",", "mask", "=", "None", ")", ":", "\n", "        ", "input_feed", "=", "{", "\n", "self", ".", "state", ":", "state", ",", "\n", "self", ".", "golden", ":", "golden", "\n", "}", "\n", "output_feed", "=", "[", "self", ".", "loss", ",", "self", ".", "grad_policy_out", ",", "self", ".", "grad_state_out", "]", "\n", "if", "not", "self", ".", "is_multi", ":", "\n", "            ", "input_feed", "[", "self", ".", "mask", "]", "=", "mask", "\n", "", "return", "self", ".", "sess", ".", "run", "(", "output_feed", ",", "input_feed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.None.Agent.Agent.clear_gradients": [[72, 78], ["utils.init_grad", "utils.init_grad", "utils.init_grad", "utils.init_grad"], "methods", ["None"], ["", "def", "clear_gradients", "(", "self", ")", ":", "\n", "        ", "self", ".", "grad_policy", "=", "init_grad", "(", "self", ".", "params_policy_network", ")", "\n", "if", "self", ".", "use_structured", ":", "\n", "            ", "self", ".", "grad_s_encoder_attn", "=", "init_grad", "(", "self", ".", "s_encoder_attn", ".", "params", ")", "\n", "self", ".", "grad_s_encoder_general", "=", "init_grad", "(", "self", ".", "s_encoder_general", ".", "params", ")", "\n", "", "self", ".", "grad_ns_encoder", "=", "init_grad", "(", "self", ".", "ns_encoder", ".", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.None.Agent.Agent.train": [[79, 111], ["range", "output_feed.append", "utils.update_buffer", "len", "utils.update_buffer", "Agent.Agent.ns_encoder.train", "Agent.Agent.sess.run", "Agent.Agent.s_encoder_general.train", "utils.update_buffer", "Agent.Agent.s_encoder_attn.train"], "methods", ["home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.None.Agent.Agent.train", "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.None.Agent.Agent.train", "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.None.Agent.Agent.train"], ["", "def", "train", "(", "self", ",", "learning_rate", ",", "buffered", "=", "False", ")", ":", "\n", "        ", "output_feed", ",", "input_feed", "=", "[", "]", ",", "{", "}", "\n", "\n", "# update policy network", "\n", "input_feed", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "grad_policy", ")", ")", ":", "\n", "            ", "input_feed", "[", "self", ".", "grad_policy_in", "[", "i", "]", "]", "=", "self", ".", "grad_policy", "[", "i", "]", "\n", "", "input_feed", "[", "self", ".", "learning_rate", "]", "=", "learning_rate", "\n", "output_feed", ".", "append", "(", "self", ".", "train_op", ")", "\n", "\n", "# update structured encoder", "\n", "if", "self", ".", "use_structured", ":", "\n", "            ", "output_feed", ",", "input_feed", "=", "update_buffer", "(", "\n", "output_feed", ",", "input_feed", ",", "\n", "self", ".", "s_encoder_general", ".", "train", "(", "self", ".", "grad_s_encoder_general", ",", "learning_rate", ",", "buffered", "=", "True", ")", "\n", ")", "\n", "if", "self", ".", "use_speaker_attn", ":", "\n", "                ", "output_feed", ",", "input_feed", "=", "update_buffer", "(", "\n", "output_feed", ",", "input_feed", ",", "\n", "self", ".", "s_encoder_attn", ".", "train", "(", "self", ".", "grad_s_encoder_attn", ",", "learning_rate", ",", "buffered", "=", "True", ")", "\n", ")", "\n", "\n", "# update ns encoder", "\n", "", "", "output_feed", ",", "input_feed", "=", "update_buffer", "(", "\n", "output_feed", ",", "input_feed", ",", "\n", "self", ".", "ns_encoder", ".", "train", "(", "self", ".", "grad_ns_encoder", ",", "learning_rate", ",", "buffered", "=", "True", ")", "\n", ")", "\n", "\n", "if", "buffered", ":", "\n", "            ", "return", "(", "output_feed", ",", "input_feed", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "sess", ".", "run", "(", "output_feed", ",", "input_feed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.None.Agent.Agent._build_gradients": [[112, 123], ["tensorflow.gradients", "tensorflow.gradients", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.log", "tensorflow.one_hot", "tensorflow.log", "tensorflow.one_hot", "tensorflow.shape"], "methods", ["None"], ["", "", "def", "_build_gradients", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "is_multi", ":", "\n", "            ", "self", ".", "loss", "=", "-", "tf", ".", "reduce_mean", "(", "tf", ".", "reduce_sum", "(", "\n", "tf", ".", "log", "(", "self", ".", "policy", ")", "*", "tf", ".", "one_hot", "(", "self", ".", "golden", ",", "self", ".", "num_relations", ")", ",", "axis", "=", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss", "=", "-", "tf", ".", "reduce_mean", "(", "tf", ".", "reduce_sum", "(", "\n", "tf", ".", "log", "(", "self", ".", "policy", ")", "*", "tf", ".", "one_hot", "(", "self", ".", "golden", ",", "tf", ".", "shape", "(", "self", ".", "state", ")", "[", "1", "]", ")", "*", "self", ".", "mask", ",", "\n", "axis", "=", "-", "1", "\n", ")", ")", "\n", "", "self", ".", "grad_policy_out", "=", "tf", ".", "gradients", "(", "self", ".", "loss", ",", "self", ".", "params_policy_network", ")", "\n", "self", ".", "grad_state_out", "=", "tf", ".", "gradients", "(", "self", ".", "loss", ",", "self", ".", "state", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.None.Agent.Agent._build_input": [[124, 131], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["None"], ["", "def", "_build_input", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "is_multi", ":", "\n", "            ", "self", ".", "state", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", "None", ",", "self", ".", "dim_state", ")", ",", "name", "=", "\"state\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "state", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", "None", ",", "None", ",", "self", ".", "dim_state", ")", ",", "name", "=", "\"state\"", ")", "\n", "self", ".", "mask", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", "None", ",", "None", ")", ",", "name", "=", "\"mask\"", ")", "\n", "", "self", ".", "golden", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "(", "None", ",", ")", ",", "name", "=", "\"golden\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.None.Agent.Agent._build_policy_network": [[132, 143], ["tensorflow.variable_scope", "tensorflow.layers.dense", "tensorflow.nn.softmax", "Agent.Agent.softmax_with_mask", "tensorflow.layers.dense", "tensorflow.reduce_sum", "tensorflow.layers.dense"], "methods", ["home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.None.Agent.Agent.softmax_with_mask"], ["", "def", "_build_policy_network", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "\"policy_network\"", ")", ":", "\n", "            ", "h", "=", "tf", ".", "layers", ".", "dense", "(", "\n", "self", ".", "state", ",", "self", ".", "num_units", "*", "2", ",", "activation", "=", "tf", ".", "tanh", "\n", ")", "\n", "if", "self", ".", "is_multi", ":", "\n", "                ", "self", ".", "policy", "=", "tf", ".", "nn", ".", "softmax", "(", "tf", ".", "layers", ".", "dense", "(", "h", ",", "self", ".", "num_relations", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "policy", "=", "self", ".", "softmax_with_mask", "(", "\n", "tf", ".", "reduce_sum", "(", "tf", ".", "layers", ".", "dense", "(", "h", ",", "1", ")", ",", "axis", "=", "-", "1", ")", ",", "\n", "self", ".", "mask", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.None.Agent.Agent._build_encoders": [[145, 158], ["NonStructured_Encoder.NonStructured_Encoder.NonStructured_Encoder", "Structured_Encoder.Structured_Encoder.Structured_Encoder", "Structured_Encoder.Structured_Encoder.Structured_Encoder"], "methods", ["None"], ["", "", "", "def", "_build_encoders", "(", "self", ",", "FLAGS", ",", "embed", ")", ":", "\n", "        ", "num_units", "=", "self", ".", "num_units", "\n", "\n", "self", ".", "ns_encoder", "=", "NonStructured_Encoder", "(", "self", ".", "sess", ",", "FLAGS", ",", "embed", ",", "num_units", "=", "num_units", ")", "\n", "\n", "if", "self", ".", "use_structured", ":", "\n", "            ", "self", ".", "s_encoder_general", "=", "Structured_Encoder", "(", "self", ".", "sess", ",", "FLAGS", ",", "scope", "=", "\"Structured_Encoder_general\"", ")", "\n", "if", "self", ".", "use_speaker_attn", ":", "\n", "                ", "self", ".", "s_encoder_attn", "=", "Structured_Encoder", "(", "self", ".", "sess", ",", "FLAGS", ",", "scope", "=", "\"Structured_Encoder_attn\"", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "s_encoder_attn", "=", "self", ".", "s_encoder_general", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "s_encoder_general", ",", "self", ".", "s_encoder_attn", "=", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.None.Agent.Agent.softmax_with_mask": [[159, 163], ["tensorflow.reduce_sum", "tensorflow.exp", "tensorflow.transpose", "tensorflow.transpose"], "methods", ["None"], ["", "", "def", "softmax_with_mask", "(", "self", ",", "h", ",", "mask", ")", ":", "\n", "        ", "exp_with_mask", "=", "tf", ".", "exp", "(", "h", "*", "mask", ")", "*", "mask", "\n", "s", "=", "tf", ".", "reduce_sum", "(", "exp_with_mask", ",", "axis", "=", "-", "1", ")", "\n", "return", "tf", ".", "transpose", "(", "tf", ".", "transpose", "(", "exp_with_mask", ")", "/", "s", ")", "+", "(", "1", "-", "mask", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.baseline.ilp.pretty_data": [[9, 13], ["str"], "function", ["None"], ["def", "pretty_data", "(", "data", ")", ":", "\n", "    ", "return", "'\\n'", ".", "join", "(", "\n", "' '", ".", "join", "(", "str", "(", "e", ")", "for", "e", "in", "lis", ")", "\n", "for", "lis", "in", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.baseline.ilp.dump_scores_to_dat_files": [[14, 40], ["len", "os.path.join", "os.path.join", "open", "f.write", "f.write", "open", "f.write", "f.write", "format_str.format", "format_str.format"], "function", ["None"], ["", "def", "dump_scores_to_dat_files", "(", "dialog", ",", "att_mat", ",", "lab_tsr", ",", "prefix", "=", "'default'", ")", ":", "\n", "    ", "n_edus", "=", "len", "(", "dialog", "[", "\"edus\"", "]", ")", "\n", "n_labels", "=", "NUM_LABELS", "\n", "unrelated", "=", "0", "\n", "\n", "tmpdir", "=", "\"./tmp\"", "\n", "format_str", "=", "'{0:.2f}'", "\n", "\n", "att_file", "=", "os", ".", "path", ".", "join", "(", "tmpdir", ",", "'{0}.attach.dat'", ".", "format", "(", "prefix", ")", ")", "\n", "lab_file", "=", "os", ".", "path", ".", "join", "(", "tmpdir", ",", "'{0}.label.dat'", ".", "format", "(", "prefix", ")", ")", "\n", "\n", "with", "open", "(", "att_file", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "'\\n'", ".", "join", "(", "\n", "':'", ".", "join", "(", "format_str", ".", "format", "(", "p", ")", "\n", "for", "p", "in", "row", ")", "\n", "for", "row", "in", "att_mat", ")", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "\n", "", "with", "open", "(", "lab_file", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "'\\n'", ".", "join", "(", "\n", "' '", ".", "join", "(", "\n", "':'", ".", "join", "(", "format_str", ".", "format", "(", "p", ")", "\n", "for", "p", "in", "tube", ")", "\n", "for", "tube", "in", "row", ")", "\n", "for", "row", "in", "lab_tsr", ")", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.baseline.ilp.mk_zimpl_input": [[41, 116], ["enumerate", "os.path.join", "numpy.zeros", "enumerate", "os.path.join", "os.path.join", "os.path.join", "edu_ind.append", "len", "turn_len.append", "turn_off.append", "open", "f_data.write", "len", "current_last.values", "open", "f_data.write", "open", "f_template.read", "open", "f_input.write", "f_input.write", "len", "len", "len", "ilp.pretty_data", "ilp.pretty_data", "len", "len", "len", "len", "str"], "function", ["home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.baseline.ilp.pretty_data", "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.baseline.ilp.pretty_data"], ["", "", "def", "mk_zimpl_input", "(", "dialog", ")", ":", "\n", "    ", "data_dir", "=", "\"./tmp\"", "\n", "\n", "edus", "=", "dialog", "[", "\"edus\"", "]", "\n", "\n", "turn_len", "=", "[", "]", "# Turn lengths", "\n", "turn_off", "=", "[", "]", "# Turn offsets", "\n", "edu_ind", "=", "[", "]", "# Turn indexes for EDUs", "\n", "c_off", "=", "0", "\n", "\n", "for", "i", ",", "edu", "in", "enumerate", "(", "dialog", "[", "\"edus\"", "]", ")", ":", "\n", "        ", "edu_ind", ".", "append", "(", "edu", "[", "\"turn\"", "]", "+", "1", ")", "\n", "\n", "", "i", "=", "0", "\n", "while", "i", "<", "len", "(", "edus", ")", ":", "\n", "        ", "j", "=", "i", "\n", "while", "j", "<", "len", "(", "edus", ")", "and", "edus", "[", "i", "]", "[", "\"turn\"", "]", "==", "edus", "[", "j", "]", "[", "\"turn\"", "]", ":", "\n", "            ", "j", "+=", "1", "\n", "", "turn_len", ".", "append", "(", "j", "-", "i", ")", "\n", "turn_off", ".", "append", "(", "c_off", ")", "\n", "c_off", "+=", "j", "-", "i", "\n", "i", "=", "j", "\n", "\n", "", "data_path", "=", "fp", ".", "join", "(", "data_dir", ",", "'turn.dat'", ")", "\n", "with", "open", "(", "data_path", ",", "'w'", ")", "as", "f_data", ":", "\n", "        ", "f_data", ".", "write", "(", "pretty_data", "(", "[", "turn_len", ",", "turn_off", ",", "edu_ind", "]", ")", "+", "\"\\n\"", ")", "\n", "\n", "# Create speaker information", "\n", "", "speakers", "=", "{", "}", "\n", "for", "edu", "in", "edus", ":", "\n", "        ", "speakers", "[", "edu", "[", "\"speaker\"", "]", "]", "=", "len", "(", "speakers", ")", "\n", "\n", "", "last_mat", "=", "np", ".", "zeros", "(", "(", "len", "(", "edus", ")", ",", "len", "(", "edus", ")", ")", ",", "dtype", "=", "int", ")", "\n", "current_last", "=", "{", "}", "\n", "for", "i", ",", "edu", "in", "enumerate", "(", "edus", ")", ":", "\n", "        ", "for", "plast", "in", "current_last", ".", "values", "(", ")", ":", "\n", "            ", "last_mat", "[", "plast", "]", "[", "i", "]", "=", "1", ";", "\n", "", "try", ":", "\n", "            ", "current_last", "[", "edu", "[", "\"speaker\"", "]", "]", "=", "i", "\n", "", "except", "KeyError", ":", "\n", "            ", "pass", "\n", "\n", "", "", "data_path", "=", "fp", ".", "join", "(", "data_dir", ",", "'mlast.dat'", ")", "\n", "with", "open", "(", "data_path", ",", "'w'", ")", "as", "f_data", ":", "\n", "        ", "f_data", ".", "write", "(", "pretty_data", "(", "last_mat", ")", "+", "\"\\n\"", ")", "\n", "\n", "# class indices that correspond to subordinating relations ;", "\n", "# required for the ILP formulation of the Right Frontier Constraint", "\n", "# in SCIP/ZIMPL", "\n", "\n", "#subord_idc = [i for i, lbl in enumerate(dpack.labels, start=1)", "\n", "#              if lbl in set(SUBORDINATING_RELATIONS)]", "\n", "", "subord_idc", "=", "[", "]", "\n", "\n", "header", "=", "'\\n'", ".", "join", "(", "(", "\n", "\"param EDU_COUNT := {0} ;\"", ".", "format", "(", "len", "(", "edus", ")", ")", ",", "\n", "\"param TURN_COUNT := {0} ;\"", ".", "format", "(", "len", "(", "turn_off", ")", ")", ",", "\n", "\"param PLAYER_COUNT := {0} ;\"", ".", "format", "(", "len", "(", "speakers", ")", ")", ",", "\n", "\"param LABEL_COUNT := {0} ;\"", ".", "format", "(", "NUM_LABELS", ")", ",", "\n", "\"set RSub := {{{0}}} ;\"", ".", "format", "(", "\n", "', '", ".", "join", "(", "str", "(", "i", ")", "for", "i", "in", "subord_idc", ")", ")", ",", "\n", "\"param SUB_LABEL_COUNT := {0} ;\"", ".", "format", "(", "len", "(", "subord_idc", ")", ")", ",", "\n", ")", ")", "\n", "\n", "template_path", "=", "fp", ".", "join", "(", "'template.zpl'", ")", "\n", "input_path", "=", "fp", ".", "join", "(", "data_dir", ",", "'input.zpl'", ")", "\n", "\n", "with", "open", "(", "template_path", ")", "as", "f_template", ":", "\n", "        ", "template", "=", "f_template", ".", "read", "(", ")", "\n", "\n", "", "with", "open", "(", "input_path", ",", "'w'", ")", "as", "f_input", ":", "\n", "        ", "f_input", ".", "write", "(", "header", "+", "\"\\n\"", ")", "\n", "f_input", ".", "write", "(", "template", "+", "\"\\n\"", ")", "\n", "\n", "", "return", "input_path", "\n", "\n"]], "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.baseline.ilp.load_scip_output": [[118, 153], ["len", "ilp.load_scip_output.load_pairs"], "function", ["None"], ["", "def", "load_scip_output", "(", "dialog", ",", "output_path", ")", ":", "\n", "    ", "def", "load_pairs", "(", ")", ":", "\n", "        ", "r", "=", "re", ".", "compile", "(", "'x#(\\d+)#(\\d+)#(\\d+)'", ")", "\n", "pairs", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "t_flag", "=", "False", "\n", "with", "open", "(", "output_path", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "m", "=", "r", ".", "match", "(", "line", ")", "\n", "if", "m", ":", "\n", "# Start of triplets", "\n", "                    ", "t_flag", "=", "True", "\n", "", "elif", "t_flag", ":", "\n", "# End of triplets", "\n", "                    ", "break", "\n", "", "else", ":", "\n", "# Not reached triplets yet", "\n", "                    ", "continue", "\n", "", "si", ",", "sj", ",", "sr", "=", "m", ".", "groups", "(", ")", "\n", "pairs", ".", "append", "(", "(", "int", "(", "si", ")", "-", "1", ",", "int", "(", "sj", ")", "-", "1", ")", ")", "\n", "labels", ".", "append", "(", "int", "(", "sr", ")", "-", "1", ")", "\n", "", "", "return", "zip", "(", "*", "pairs", ")", ",", "labels", "\n", "\n", "# Build map (EDU1, EDU2) -> pair_index", "\n", "", "n_edus", "=", "len", "(", "dialog", "[", "\"edus\"", "]", ")", "\n", "\n", "# Build indexes of attached pairs", "\n", "\n", "output_attach", ",", "output_labels", "=", "load_pairs", "(", ")", "\n", "\n", "pred", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "output_attach", "[", "0", "]", ")", ")", ":", "\n", "        ", "pred", ".", "append", "(", "(", "output_attach", "[", "0", "]", "[", "i", "]", ",", "output_attach", "[", "1", "]", "[", "i", "]", ",", "output_labels", "[", "i", "]", ")", ")", "\n", "\n", "", "return", "pred", "", "", ""]], "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.libs.rnn_cell_impl.DropoutWrapper.__init__": [[56, 166], ["rnn_cell_impl._like_rnncell", "TypeError", "tensorflow.python.framework.ops.name_scope", "rnn_cell_impl._enumerated_map_structure", "rnn_cell_impl._enumerated_map_structure", "tensorflow.python.framework.ops.convert_to_tensor", "tensorflow.python.framework.tensor_util.constant_value", "rnn_cell_impl.DropoutWrapper.__init__.tensor_and_const_value"], "methods", ["home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.libs.rnn_cell_impl._like_rnncell", "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.libs.rnn_cell_impl._enumerated_map_structure", "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.libs.rnn_cell_impl._enumerated_map_structure"], ["def", "__init__", "(", "self", ",", "cell", ",", "\n", "#input_keep_prob=1.0, output_keep_prob=1.0, state_keep_prob=1.0, ", "\n", "keep_prob", "=", "1.0", ",", "\n", "noise_input", "=", "None", ",", "fixed_noise", "=", "None", ",", "\n", "variational_recurrent", "=", "True", ",", "\n", "input_size", "=", "None", ",", "dtype", "=", "None", ",", "seed", "=", "None", ")", ":", "\n", "    ", "\"\"\"Create a cell with added input, state, and/or output dropout.\n\n    If `variational_recurrent` is set to `True` (**NOT** the default behavior),\n    then the same dropout mask is applied at every step, as described in:\n\n    Y. Gal, Z Ghahramani.  \"A Theoretically Grounded Application of Dropout in\n    Recurrent Neural Networks\".  https://arxiv.org/abs/1512.05287\n\n    Otherwise a different dropout mask is applied at every time step.\n\n    Args:\n      cell: an RNNCell, a projection to output_size is added to it.\n      input_keep_prob: unit Tensor or float between 0 and 1, input keep\n        probability; if it is constant and 1, no input dropout will be added.\n      output_keep_prob: unit Tensor or float between 0 and 1, output keep\n        probability; if it is constant and 1, no output dropout will be added.\n      state_keep_prob: unit Tensor or float between 0 and 1, output keep\n        probability; if it is constant and 1, no output dropout will be added.\n        State dropout is performed on the *output* states of the cell.\n      variational_recurrent: Python bool.  If `True`, then the same\n        dropout pattern is applied across all time steps per run call.\n        If this parameter is set, `input_size` **must** be provided.\n      input_size: (optional) (possibly nested tuple of) `TensorShape` objects\n        containing the depth(s) of the input tensors expected to be passed in to\n        the `DropoutWrapper`.  Required and used **iff**\n         `variational_recurrent = True` and `input_keep_prob < 1`.\n      dtype: (optional) The `dtype` of the input, state, and output tensors.\n        Required and used **iff** `variational_recurrent = True`.\n      seed: (optional) integer, the randomness seed.\n\n    Raises:\n      TypeError: if cell is not an RNNCell.\n      ValueError: if any of the keep_probs are not between 0 and 1.\n    \"\"\"", "\n", "\n", "input_keep_prob", "=", "keep_prob", "\n", "state_keep_prob", "=", "1.0", "#keep_prob", "\n", "output_keep_prob", "=", "1.0", "#keep_prob", "\n", "\n", "if", "not", "_like_rnncell", "(", "cell", ")", ":", "\n", "      ", "raise", "TypeError", "(", "\"The parameter cell is not a RNNCell.\"", ")", "\n", "", "with", "ops", ".", "name_scope", "(", "\"DropoutWrapperInit\"", ")", ":", "\n", "      ", "def", "tensor_and_const_value", "(", "v", ")", ":", "\n", "        ", "tensor_value", "=", "ops", ".", "convert_to_tensor", "(", "v", ")", "\n", "const_value", "=", "tensor_util", ".", "constant_value", "(", "tensor_value", ")", "\n", "return", "(", "tensor_value", ",", "const_value", ")", "\n", "", "for", "prob", ",", "attr", "in", "[", "(", "input_keep_prob", ",", "\"input_keep_prob\"", ")", ",", "\n", "(", "state_keep_prob", ",", "\"state_keep_prob\"", ")", ",", "\n", "(", "output_keep_prob", ",", "\"output_keep_prob\"", ")", "]", ":", "\n", "        ", "tensor_prob", ",", "const_prob", "=", "tensor_and_const_value", "(", "prob", ")", "\n", "if", "const_prob", "is", "not", "None", ":", "\n", "          ", "if", "const_prob", "<", "0", "or", "const_prob", ">", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"Parameter %s must be between 0 and 1: %d\"", "\n", "%", "(", "attr", ",", "const_prob", ")", ")", "\n", "", "setattr", "(", "self", ",", "\"_%s\"", "%", "attr", ",", "float", "(", "const_prob", ")", ")", "\n", "", "else", ":", "\n", "          ", "setattr", "(", "self", ",", "\"_%s\"", "%", "attr", ",", "tensor_prob", ")", "\n", "\n", "# Set cell, variational_recurrent, seed before running the code below", "\n", "", "", "", "self", ".", "_cell", "=", "cell", "\n", "self", ".", "_variational_recurrent", "=", "variational_recurrent", "\n", "self", ".", "_seed", "=", "seed", "\n", "\n", "self", ".", "recurrent_input_noise", "=", "None", "\n", "self", ".", "recurrent_state_noise", "=", "None", "\n", "self", ".", "recurrent_output_noise", "=", "None", "\n", "\n", "if", "variational_recurrent", ":", "\n", "      ", "if", "dtype", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"When variational_recurrent=True, dtype must be provided\"", ")", "\n", "\n", "", "def", "convert_to_batch_shape", "(", "s", ")", ":", "\n", "# Prepend a 1 for the batch dimension; for recurrent", "\n", "# variational dropout we use the same dropout mask for all", "\n", "# batch elements.", "\n", "        ", "return", "array_ops", ".", "concat", "(", "\n", "(", "[", "1", "]", ",", "tensor_shape", ".", "TensorShape", "(", "s", ")", ".", "as_list", "(", ")", ")", ",", "0", ")", "\n", "\n", "", "def", "batch_noise", "(", "s", ",", "inner_seed", ")", ":", "\n", "        ", "shape", "=", "convert_to_batch_shape", "(", "s", ")", "\n", "return", "random_ops", ".", "random_uniform", "(", "shape", ",", "seed", "=", "inner_seed", ",", "dtype", "=", "dtype", ")", "\n", "\n", "", "if", "(", "not", "isinstance", "(", "self", ".", "_input_keep_prob", ",", "numbers", ".", "Real", ")", "or", "\n", "self", ".", "_input_keep_prob", "<", "1.0", ")", ":", "\n", "        ", "if", "input_size", "is", "None", ":", "\n", "          ", "raise", "ValueError", "(", "\n", "\"When variational_recurrent=True and input_keep_prob < 1.0 or \"", "\n", "\"is unknown, input_size must be provided\"", ")", "\n", "", "self", ".", "recurrent_input_noise", "=", "tf", ".", "cond", "(", "\n", "fixed_noise", ">", "0", ",", "\n", "lambda", ":", "noise_input", ",", "\n", "lambda", ":", "_enumerated_map_structure", "(", "\n", "lambda", "i", ",", "s", ":", "batch_noise", "(", "s", ",", "inner_seed", "=", "self", ".", "_gen_seed", "(", "\"input\"", ",", "i", ")", ")", ",", "\n", "input_size", "\n", ")", "\n", ")", "\n", "", "self", ".", "recurrent_state_noise", "=", "_enumerated_map_structure", "(", "\n", "lambda", "i", ",", "s", ":", "batch_noise", "(", "s", ",", "inner_seed", "=", "self", ".", "_gen_seed", "(", "\"state\"", ",", "i", ")", ")", ",", "\n", "cell", ".", "state_size", "\n", ")", "\n", "self", ".", "recurrent_output_noise", "=", "_enumerated_map_structure", "(", "\n", "lambda", "i", ",", "s", ":", "batch_noise", "(", "s", ",", "inner_seed", "=", "self", ".", "_gen_seed", "(", "\"output\"", ",", "i", ")", ")", ",", "\n", "cell", ".", "output_size", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.libs.rnn_cell_impl.DropoutWrapper._gen_seed": [[168, 174], ["int", "str", "hashlib.md5().hexdigest", "hashlib.md5"], "methods", ["None"], ["", "", "def", "_gen_seed", "(", "self", ",", "salt_prefix", ",", "index", ")", ":", "\n", "    ", "if", "self", ".", "_seed", "is", "None", ":", "\n", "      ", "return", "None", "\n", "", "salt", "=", "\"%s_%d\"", "%", "(", "salt_prefix", ",", "index", ")", "\n", "string", "=", "(", "str", "(", "self", ".", "_seed", ")", "+", "salt", ")", ".", "encode", "(", "\"utf-8\"", ")", "\n", "return", "int", "(", "hashlib", ".", "md5", "(", "string", ")", ".", "hexdigest", "(", ")", "[", ":", "8", "]", ",", "16", ")", "&", "0x7FFFFFFF", "\n", "\n"]], "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.libs.rnn_cell_impl.DropoutWrapper.state_size": [[175, 178], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "state_size", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_cell", ".", "state_size", "\n", "\n"]], "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.libs.rnn_cell_impl.DropoutWrapper.output_size": [[179, 182], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_size", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_cell", ".", "output_size", "\n", "\n"]], "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.libs.rnn_cell_impl.DropoutWrapper.zero_state": [[183, 186], ["tensorflow.python.framework.ops.name_scope", "rnn_cell_impl.DropoutWrapper._cell.zero_state", "type"], "methods", ["home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.libs.rnn_cell_impl.DropoutWrapper.zero_state"], ["", "def", "zero_state", "(", "self", ",", "batch_size", ",", "dtype", ")", ":", "\n", "    ", "with", "ops", ".", "name_scope", "(", "type", "(", "self", ")", ".", "__name__", "+", "\"ZeroState\"", ",", "values", "=", "[", "batch_size", "]", ")", ":", "\n", "      ", "return", "self", ".", "_cell", ".", "zero_state", "(", "batch_size", ",", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.libs.rnn_cell_impl.DropoutWrapper._variational_recurrent_dropout_value": [[187, 198], ["tensorflow.python.ops.math_ops.floor", "ret.set_shape", "tensorflow.python.ops.math_ops.div", "value.get_shape"], "methods", ["None"], ["", "", "def", "_variational_recurrent_dropout_value", "(", "\n", "self", ",", "index", ",", "value", ",", "noise", ",", "keep_prob", ")", ":", "\n", "    ", "\"\"\"Performs dropout given the pre-calculated noise tensor.\"\"\"", "\n", "# uniform [keep_prob, 1.0 + keep_prob)", "\n", "random_tensor", "=", "keep_prob", "+", "noise", "\n", "\n", "# 0. if [keep_prob, 1.0) and 1. if [1.0, 1.0 + keep_prob)", "\n", "binary_tensor", "=", "math_ops", ".", "floor", "(", "random_tensor", ")", "\n", "ret", "=", "math_ops", ".", "div", "(", "value", ",", "keep_prob", ")", "*", "binary_tensor", "\n", "ret", ".", "set_shape", "(", "value", ".", "get_shape", "(", ")", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.libs.rnn_cell_impl.DropoutWrapper._dropout": [[199, 210], ["rnn_cell_impl._enumerated_map_structure", "rnn_cell_impl._enumerated_map_structure", "tensorflow.python.ops.nn_ops.dropout", "rnn_cell_impl.DropoutWrapper._variational_recurrent_dropout_value", "rnn_cell_impl.DropoutWrapper._gen_seed"], "methods", ["home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.libs.rnn_cell_impl._enumerated_map_structure", "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.libs.rnn_cell_impl._enumerated_map_structure", "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.libs.dropout.dropout", "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.libs.rnn_cell_impl.DropoutWrapper._variational_recurrent_dropout_value", "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.libs.rnn_cell_impl.DropoutWrapper._gen_seed"], ["", "def", "_dropout", "(", "self", ",", "values", ",", "salt_prefix", ",", "recurrent_noise", ",", "keep_prob", ")", ":", "\n", "    ", "\"\"\"Decides whether to perform standard dropout or recurrent dropout.\"\"\"", "\n", "if", "not", "self", ".", "_variational_recurrent", ":", "\n", "      ", "def", "dropout", "(", "i", ",", "v", ")", ":", "\n", "        ", "return", "nn_ops", ".", "dropout", "(", "\n", "v", ",", "keep_prob", "=", "keep_prob", ",", "seed", "=", "self", ".", "_gen_seed", "(", "salt_prefix", ",", "i", ")", ")", "\n", "", "return", "_enumerated_map_structure", "(", "dropout", ",", "values", ")", "\n", "", "else", ":", "\n", "      ", "def", "dropout", "(", "i", ",", "v", ",", "n", ")", ":", "\n", "        ", "return", "self", ".", "_variational_recurrent_dropout_value", "(", "i", ",", "v", ",", "n", ",", "keep_prob", ")", "\n", "", "return", "_enumerated_map_structure", "(", "dropout", ",", "values", ",", "recurrent_noise", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.libs.rnn_cell_impl.DropoutWrapper.__call__": [[211, 230], ["rnn_cell_impl.DropoutWrapper.__call__._should_dropout"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "inputs", ",", "state", ",", "scope", "=", "None", ")", ":", "\n", "    ", "\"\"\"Run the cell with the declared dropouts.\"\"\"", "\n", "def", "_should_dropout", "(", "p", ")", ":", "\n", "      ", "return", "(", "not", "isinstance", "(", "p", ",", "float", ")", ")", "or", "p", "<", "1", "\n", "\n", "", "if", "_should_dropout", "(", "self", ".", "_input_keep_prob", ")", ":", "\n", "      ", "inputs", "=", "self", ".", "_dropout", "(", "inputs", ",", "\"input\"", ",", "\n", "self", ".", "recurrent_input_noise", ",", "\n", "self", ".", "_input_keep_prob", ")", "\n", "", "output", ",", "new_state", "=", "self", ".", "_cell", "(", "inputs", ",", "state", ",", "scope", ")", "\n", "if", "_should_dropout", "(", "self", ".", "_state_keep_prob", ")", ":", "\n", "      ", "new_state", "=", "self", ".", "_dropout", "(", "new_state", ",", "\"state\"", ",", "\n", "self", ".", "recurrent_state_noise", ",", "\n", "self", ".", "_state_keep_prob", ")", "\n", "", "if", "_should_dropout", "(", "self", ".", "_output_keep_prob", ")", ":", "\n", "      ", "output", "=", "self", ".", "_dropout", "(", "output", ",", "\"output\"", ",", "\n", "self", ".", "recurrent_output_noise", ",", "\n", "self", ".", "_output_keep_prob", ")", "\n", "", "return", "output", ",", "new_state", "\n", "", "", ""]], "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.libs.rnn_cell_impl._like_rnncell": [[37, 42], ["all", "hasattr", "hasattr", "hasattr", "callable"], "function", ["None"], ["def", "_like_rnncell", "(", "cell", ")", ":", "\n", "  ", "\"\"\"Checks that a given object is an RNNCell by using duck typing.\"\"\"", "\n", "conditions", "=", "[", "hasattr", "(", "cell", ",", "\"output_size\"", ")", ",", "hasattr", "(", "cell", ",", "\"state_size\"", ")", ",", "\n", "hasattr", "(", "cell", ",", "\"zero_state\"", ")", ",", "callable", "(", "cell", ")", "]", "\n", "return", "all", "(", "conditions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.libs.rnn_cell_impl._enumerated_map_structure": [[43, 50], ["tensorflow.python.util.nest.map_structure", "map_fn"], "function", ["None"], ["", "def", "_enumerated_map_structure", "(", "map_fn", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "  ", "ix", "=", "[", "0", "]", "\n", "def", "enumerated_fn", "(", "*", "inner_args", ",", "**", "inner_kwargs", ")", ":", "\n", "    ", "r", "=", "map_fn", "(", "ix", "[", "0", "]", ",", "*", "inner_args", ",", "**", "inner_kwargs", ")", "\n", "ix", "[", "0", "]", "+=", "1", "\n", "return", "r", "\n", "", "return", "nest", ".", "map_structure", "(", "enumerated_fn", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shizhouxing_DialogueDiscourseParsing.libs.dropout.dropout": [[30, 94], ["tensorflow.python.framework.ops.name_scope", "tensorflow.python.framework.ops.convert_to_tensor", "tensorflow.python.framework.ops.convert_to_tensor", "ops.convert_to_tensor.get_shape().assert_is_compatible_with", "tensorflow.python.ops.math_ops.floor", "ret.set_shape", "isinstance", "ValueError", "tensorflow.python.framework.tensor_shape.scalar", "tensorflow.python.framework.tensor_util.constant_value", "tensorflow.python.ops.array_ops.shape", "tensorflow.cond", "tensorflow.python.ops.math_ops.div", "ops.convert_to_tensor.get_shape", "ops.convert_to_tensor.get_shape", "tensorflow.python.ops.random_ops.random_uniform"], "function", ["None"], ["def", "dropout", "(", "\n", "x", ",", "keep_prob", ",", "noise_shape", "=", "None", ",", "\n", "noise", "=", "None", ",", "fixed_noise", "=", "0", ",", "\n", "seed", "=", "None", ",", "name", "=", "None", ")", ":", "# pylint: disable=invalid-name", "\n", "  ", "\"\"\"Computes dropout.\n\n  With probability `keep_prob`, outputs the input element scaled up by\n  `1 / keep_prob`, otherwise outputs `0`.  The scaling is so that the expected\n  sum is unchanged.\n\n  By default, each element is kept or dropped independently.  If `noise_shape`\n  is specified, it must be\n  [broadcastable](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)\n  to the shape of `x`, and only dimensions with `noise_shape[i] == shape(x)[i]`\n  will make independent decisions.  For example, if `shape(x) = [k, l, m, n]`\n  and `noise_shape = [k, 1, 1, n]`, each batch and channel component will be\n  kept independently and each row and column will be kept or not kept together.\n\n  Args:\n    x: A tensor.\n    keep_prob: A scalar `Tensor` with the same type as x. The probability\n      that each element is kept.\n    noise_shape: A 1-D `Tensor` of type `int32`, representing the\n      shape for randomly generated keep/drop flags.\n    seed: A Python integer. Used to create random seeds. See\n      @{tf.set_random_seed}\n      for behavior.\n    name: A name for this operation (optional).\n\n  Returns:\n    A Tensor of the same shape of `x`.\n\n  Raises:\n    ValueError: If `keep_prob` is not in `(0, 1]`.\n  \"\"\"", "\n", "with", "ops", ".", "name_scope", "(", "name", ",", "\"dropout\"", ",", "[", "x", "]", ")", "as", "name", ":", "\n", "    ", "x", "=", "ops", ".", "convert_to_tensor", "(", "x", ",", "name", "=", "\"x\"", ")", "\n", "if", "isinstance", "(", "keep_prob", ",", "numbers", ".", "Real", ")", "and", "not", "0", "<", "keep_prob", "<=", "1", ":", "\n", "      ", "raise", "ValueError", "(", "\"keep_prob must be a scalar tensor or a float in the \"", "\n", "\"range (0, 1], got %g\"", "%", "keep_prob", ")", "\n", "", "keep_prob", "=", "ops", ".", "convert_to_tensor", "(", "keep_prob", ",", "\n", "dtype", "=", "x", ".", "dtype", ",", "\n", "name", "=", "\"keep_prob\"", ")", "\n", "keep_prob", ".", "get_shape", "(", ")", ".", "assert_is_compatible_with", "(", "tensor_shape", ".", "scalar", "(", ")", ")", "\n", "\n", "# Do nothing if we know keep_prob == 1", "\n", "if", "tensor_util", ".", "constant_value", "(", "keep_prob", ")", "==", "1", ":", "\n", "      ", "return", "x", "\n", "\n", "", "noise_shape", "=", "noise_shape", "if", "noise_shape", "is", "not", "None", "else", "array_ops", ".", "shape", "(", "x", ")", "\n", "\n", "# uniform [keep_prob, 1.0 + keep_prob)", "\n", "random_tensor", "=", "keep_prob", "+", "tf", ".", "cond", "(", "\n", "fixed_noise", ">", "0", ",", "\n", "lambda", ":", "noise", ",", "\n", "lambda", ":", "random_ops", ".", "random_uniform", "(", "\n", "noise_shape", ",", "seed", "=", "seed", ",", "dtype", "=", "x", ".", "dtype", ")", "\n", ")", "\n", "\n", "# 0. if [keep_prob, 1.0) and 1. if [1.0, 1.0 + keep_prob)", "\n", "binary_tensor", "=", "math_ops", ".", "floor", "(", "random_tensor", ")", "\n", "ret", "=", "math_ops", ".", "div", "(", "x", ",", "keep_prob", ")", "*", "binary_tensor", "\n", "ret", ".", "set_shape", "(", "x", ".", "get_shape", "(", ")", ")", "\n", "return", "ret", ",", "noise", "\n", "", "", ""]]}