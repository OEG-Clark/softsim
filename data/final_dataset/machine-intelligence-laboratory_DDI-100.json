{"home.repos.pwc.inspect_result.machine-intelligence-laboratory_DDI-100.scripts.visualization.random_show": [[11, 20], ["gen.get_doc", "mask.copy.copy", "cv2.imshow", "cv2.imshow", "utils.draw_word_boxes", "cv2.imshow", "cv2.waitKey", "cv2.resize", "cv2.resize", "cv2.resize"], "function", ["home.repos.pwc.inspect_result.machine-intelligence-laboratory_DDI-100.scripts.generator.Generator.get_doc", "home.repos.pwc.inspect_result.machine-intelligence-laboratory_DDI-100.scripts.utils.draw_word_boxes"], ["def", "random_show", "(", "gen", ")", ":", "\n", "    ", "img", ",", "mask", ",", "data", "=", "gen", ".", "get_doc", "(", ")", "\n", "mask", "=", "mask", ".", "copy", "(", ")", "\n", "cv2", ".", "imshow", "(", "\"image\"", ",", "cv2", ".", "resize", "(", "img", ",", "(", "0", ",", "0", ")", ",", "fx", "=", "0.2", ",", "fy", "=", "0.2", ")", ")", "\n", "cv2", ".", "imshow", "(", "\"mask\"", ",", "cv2", ".", "resize", "(", "mask", ",", "(", "0", ",", "0", ")", ",", "fx", "=", "0.2", ",", "fy", "=", "0.2", ")", ")", "\n", "\n", "draw_word_boxes", "(", "img", ",", "data", ",", "word_color", "=", "0", ")", "\n", "cv2", ".", "imshow", "(", "\"image with boxes\"", ",", "cv2", ".", "resize", "(", "img", ",", "(", "0", ",", "0", ")", ",", "fx", "=", "0.2", ",", "fy", "=", "0.2", ")", ")", "\n", "cv2", ".", "waitKey", "(", "1000", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-intelligence-laboratory_DDI-100.scripts.visualization.show_dataset": [[22, 26], ["generator.Generator", "visualization.random_show"], "function", ["home.repos.pwc.inspect_result.machine-intelligence-laboratory_DDI-100.scripts.visualization.random_show"], ["", "def", "show_dataset", "(", "dataset_path", ")", ":", "\n", "    ", "gen", "=", "Generator", "(", "dataset_path", ")", "\n", "while", "True", ":", "\n", "        ", "random_show", "(", "gen", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-intelligence-laboratory_DDI-100.scripts.generator.Generator.__init__": [[13, 34], ["ValueError", "glob.glob.glob", "glob.glob.glob", "open", "pickle.load"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "pickle_path", "=", "None", ",", "dataset_path", "=", "None", ",", "book_paths", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Class Generator implements simple random sample choice.\n        One of the arguments must be specified.\n\n        :param pickle_path: str - path to pickle file with image paths\n        :param dataset_path: str - path to full dataset\n        :param book_paths: str - paths to book directories.\n        \"\"\"", "\n", "if", "dataset_path", "is", "None", "and", "book_paths", "is", "None", "and", "pickle_path", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"At least one argument must be specified\"", ")", "\n", "", "if", "dataset_path", "is", "not", "None", ":", "\n", "            ", "book_paths", "=", "glob", "(", "f\"{dataset_path}/*\"", ")", "\n", "", "if", "book_paths", "is", "not", "None", ":", "\n", "            ", "self", ".", "paths", "=", "[", "]", "\n", "for", "book", "in", "book_paths", ":", "\n", "                ", "self", ".", "paths", "+=", "glob", "(", "f\"{book}/gen_imgs/*\"", ")", "\n", "", "", "if", "pickle_path", "is", "not", "None", ":", "\n", "            ", "with", "open", "(", "pickle_path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "                ", "paths", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "self", ".", "paths", "=", "paths", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-intelligence-laboratory_DDI-100.scripts.generator.Generator.get_doc": [[35, 52], ["random.choice", "pathlib.Path", "pathlib.Path.parent.parent.joinpath().joinpath", "sorted", "cv2.imread", "random.choice", "pathlib.Path.parent.parent.joinpath().glob", "open", "pickle.load", "str", "masks.append", "pathlib.Path.parent.parent.joinpath", "cv2.imread", "pathlib.Path.parent.parent.joinpath", "str"], "methods", ["None"], ["", "", "def", "get_doc", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns random document sample from dataset.\n\n        :return: (img, masks, data)\n        \"\"\"", "\n", "path", "=", "choice", "(", "self", ".", "paths", ")", "\n", "img_path", "=", "Path", "(", "choice", "(", "self", ".", "paths", ")", ")", "\n", "boxes_path", "=", "img_path", ".", "parent", ".", "parent", ".", "joinpath", "(", "'gen_boxes'", ")", ".", "joinpath", "(", "img_path", ".", "stem", "+", "\".pickle\"", ")", "\n", "mask_paths", "=", "sorted", "(", "img_path", ".", "parent", ".", "parent", ".", "joinpath", "(", "'gen_masks'", ")", ".", "glob", "(", "img_path", ".", "stem", "+", "'_*'", ")", ")", "\n", "with", "open", "(", "boxes_path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "data", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "img", "=", "cv2", ".", "imread", "(", "str", "(", "img_path", ")", ",", "0", ")", "\n", "masks", "=", "[", "]", "\n", "for", "mask_path", "in", "mask_paths", ":", "\n", "            ", "masks", ".", "append", "(", "cv2", ".", "imread", "(", "str", "(", "mask_path", ")", ",", "0", ")", ")", "\n", "", "return", "img", ",", "masks", ",", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-intelligence-laboratory_DDI-100.scripts.generator.Generator.get_string": [[53, 66], ["generator.Generator.get_doc", "random.choice", "utils.get_image_from_box", "numpy.min"], "methods", ["home.repos.pwc.inspect_result.machine-intelligence-laboratory_DDI-100.scripts.generator.Generator.get_doc", "home.repos.pwc.inspect_result.machine-intelligence-laboratory_DDI-100.scripts.utils.get_image_from_box"], ["", "def", "get_string", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns sample with random single word string from dataset.\n\n        :return: (img, str, list) - img of word, string representation, list of char x axis delimiters\n        \"\"\"", "\n", "img", ",", "mask", ",", "data", "=", "self", ".", "get_doc", "(", ")", "\n", "word", "=", "choice", "(", "data", ")", "\n", "cut_img", ",", "delimiters", "=", "get_image_from_box", "(", "img", ",", "word", ")", "\n", "shift", "=", "np", ".", "min", "(", "word", "[", "'box'", "]", ",", "axis", "=", "0", ")", "\n", "for", "char", "in", "word", "[", "'chars'", "]", ":", "\n", "            ", "char", "[", "'box'", "]", "-=", "shift", "\n", "", "return", "cut_img", ",", "word", "[", "'text'", "]", ",", "delimiters", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-intelligence-laboratory_DDI-100.scripts.generator.Generator.get_char": [[67, 78], ["generator.Generator.get_doc", "random.choice", "random.choice", "utils.get_image_from_box"], "methods", ["home.repos.pwc.inspect_result.machine-intelligence-laboratory_DDI-100.scripts.generator.Generator.get_doc", "home.repos.pwc.inspect_result.machine-intelligence-laboratory_DDI-100.scripts.utils.get_image_from_box"], ["", "def", "get_char", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns sample with random single char string from dataset.\n\n        :return: (img, str) - img with letter and letter\n        \"\"\"", "\n", "img", ",", "_", ",", "boxes", "=", "self", ".", "get_doc", "(", ")", "\n", "word", "=", "choice", "(", "boxes", ")", "\n", "char", "=", "choice", "(", "word", "[", "'chars'", "]", ")", "\n", "cut_img", "=", "get_image_from_box", "(", "img", ",", "char", "[", "'box'", "]", ")", "\n", "return", "cut_img", ",", "char", "[", "'text'", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.machine-intelligence-laboratory_DDI-100.scripts.examples.test_doc": [[6, 14], ["generator.Generator", "generator.Generator.get_doc", "cv2.imshow", "cv2.imshow", "utils.draw_word_boxes", "cv2.imshow", "cv2.waitKey", "cv2.resize", "cv2.resize", "cv2.resize"], "function", ["home.repos.pwc.inspect_result.machine-intelligence-laboratory_DDI-100.scripts.generator.Generator.get_doc", "home.repos.pwc.inspect_result.machine-intelligence-laboratory_DDI-100.scripts.utils.draw_word_boxes"], ["def", "test_doc", "(", ")", ":", "\n", "    ", "gen", "=", "Generator", "(", "\"../data/pdf_dataset\"", ")", "\n", "img", ",", "mask", ",", "data", "=", "gen", ".", "get_doc", "(", ")", "\n", "cv2", ".", "imshow", "(", "\"image\"", ",", "cv2", ".", "resize", "(", "img", ",", "(", "0", ",", "0", ")", ",", "fx", "=", "0.2", ",", "fy", "=", "0.2", ")", ")", "\n", "cv2", ".", "imshow", "(", "\"mask\"", ",", "cv2", ".", "resize", "(", "mask", ",", "(", "0", ",", "0", ")", ",", "fx", "=", "0.2", ",", "fy", "=", "0.2", ")", ")", "\n", "draw_word_boxes", "(", "img", ",", "data", ",", "word_color", "=", "0", ")", "\n", "cv2", ".", "imshow", "(", "\"image with boxes\"", ",", "cv2", ".", "resize", "(", "img", ",", "(", "0", ",", "0", ")", ",", "fx", "=", "0.2", ",", "fy", "=", "0.2", ")", ")", "\n", "cv2", ".", "waitKey", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-intelligence-laboratory_DDI-100.scripts.examples.test_str": [[16, 25], ["generator.Generator", "generator.Generator.get_string", "cv2.imshow", "print", "cv2.imshow", "cv2.waitKey", "cv2.resize", "cv2.line", "cv2.resize"], "function", ["home.repos.pwc.inspect_result.machine-intelligence-laboratory_DDI-100.scripts.generator.Generator.get_string"], ["", "def", "test_str", "(", ")", ":", "\n", "    ", "gen", "=", "Generator", "(", "\"../data/pdf_dataset\"", ")", "\n", "img", ",", "data", ",", "delimeters", "=", "gen", ".", "get_string", "(", ")", "\n", "cv2", ".", "imshow", "(", "\"image\"", ",", "cv2", ".", "resize", "(", "img", ",", "(", "0", ",", "0", ")", ",", "fx", "=", "2", ",", "fy", "=", "2", ")", ")", "\n", "print", "(", "data", ")", "\n", "for", "delim", "in", "delimeters", ":", "\n", "        ", "cv2", ".", "line", "(", "img", ",", "(", "delim", ",", "0", ")", ",", "(", "delim", ",", "32", ")", ",", "color", "=", "0", ",", "thickness", "=", "2", ")", "\n", "", "cv2", ".", "imshow", "(", "\"image with delims\"", ",", "cv2", ".", "resize", "(", "img", ",", "(", "0", ",", "0", ")", ",", "fx", "=", "2", ",", "fy", "=", "2", ")", ")", "\n", "cv2", ".", "waitKey", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-intelligence-laboratory_DDI-100.scripts.examples.test_char": [[27, 33], ["generator.Generator", "generator.Generator.get_char", "cv2.imshow", "print", "cv2.waitKey", "cv2.resize"], "function", ["home.repos.pwc.inspect_result.machine-intelligence-laboratory_DDI-100.scripts.generator.Generator.get_char"], ["", "def", "test_char", "(", ")", ":", "\n", "    ", "gen", "=", "Generator", "(", "\"../data/pdf_dataset\"", ")", "\n", "img", ",", "data", "=", "gen", ".", "get_char", "(", ")", "\n", "cv2", ".", "imshow", "(", "\"image\"", ",", "cv2", ".", "resize", "(", "img", ",", "(", "0", ",", "0", ")", ",", "fx", "=", "2", ",", "fy", "=", "2", ")", ")", "\n", "print", "(", "data", ")", "\n", "cv2", ".", "waitKey", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-intelligence-laboratory_DDI-100.scripts.examples.test_mask": [[35, 43], ["generator.Generator", "generator.Generator.get_doc", "generator.Generator.get_doc", "cv2.resize", "utils.combine_masks", "cv2.imshow", "cv2.waitKey", "cv2.resize"], "function", ["home.repos.pwc.inspect_result.machine-intelligence-laboratory_DDI-100.scripts.generator.Generator.get_doc", "home.repos.pwc.inspect_result.machine-intelligence-laboratory_DDI-100.scripts.generator.Generator.get_doc", "home.repos.pwc.inspect_result.machine-intelligence-laboratory_DDI-100.scripts.utils.combine_masks"], ["", "def", "test_mask", "(", ")", ":", "\n", "    ", "gen", "=", "Generator", "(", "\"../data/pdf_dataset\"", ")", "\n", "_", ",", "mask1", ",", "_", "=", "gen", ".", "get_doc", "(", ")", "\n", "_", ",", "mask2", ",", "_", "=", "gen", ".", "get_doc", "(", ")", "\n", "mask2", "=", "cv2", ".", "resize", "(", "mask2", ",", "(", "mask1", ".", "shape", "[", "1", "]", ",", "mask1", ".", "shape", "[", "0", "]", ")", ")", "\n", "img", "=", "combine_masks", "(", "mask1", ",", "mask2", ")", "\n", "cv2", ".", "imshow", "(", "\"image\"", ",", "cv2", ".", "resize", "(", "img", ",", "(", "0", ",", "0", ")", ",", "fx", "=", ".2", ",", "fy", "=", ".2", ")", ")", "\n", "cv2", ".", "waitKey", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-intelligence-laboratory_DDI-100.scripts.utils.draw_word_boxes": [[5, 24], ["cv2.polylines", "cv2.polylines", "[].reshape", "[].reshape"], "function", ["None"], ["def", "draw_word_boxes", "(", "img", ",", "word_box_list", ",", "word_color", "=", "(", "255", ",", "0", ",", "0", ")", ",", "letter_color", "=", "None", ",", "fill", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Draws boxes on the image. Inplace\n    :param img: np.array - image\n    :param word_box_list: list - boxes\n    :param word_color: tuple or int or None - boundary color fow words\n    :param letter_color: tuple or list or None - boundary color for letters\n    :param fill: bool - whether to fill the boxes with color or just draw a quadrilateral\n    \"\"\"", "\n", "thickness", "=", "-", "1", "if", "fill", "else", "2", "\n", "for", "word", "in", "word_box_list", ":", "\n", "        ", "if", "word_color", "is", "not", "None", ":", "\n", "            ", "cv2", ".", "polylines", "(", "img", ",", "[", "word", "[", "'box'", "]", "[", "[", "0", ",", "1", ",", "3", ",", "2", "]", ",", ":", ":", "-", "1", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ",", "2", ")", ")", "]", ",", "True", ",", "word_color", ",", "\n", "thickness", "=", "thickness", ")", "\n", "\n", "", "if", "letter_color", "is", "not", "None", ":", "\n", "            ", "for", "char", "in", "word", "[", "'chars'", "]", ":", "\n", "                ", "cv2", ".", "polylines", "(", "img", ",", "[", "char", "[", "'box'", "]", "[", "[", "0", ",", "1", ",", "3", ",", "2", "]", ",", ":", ":", "-", "1", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ",", "2", ")", ")", "]", ",", "True", ",", "letter_color", ",", "\n", "thickness", "=", "thickness", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-intelligence-laboratory_DDI-100.scripts.utils.get_image_from_box": [[26, 51], ["int", "cv2.getPerspectiveTransform", "cv2.warpPerspective", "zip", "numpy.sqrt", "numpy.float32", "numpy.float32", "delimiters.append", "numpy.sqrt", "int"], "function", ["None"], ["", "", "", "", "def", "get_image_from_box", "(", "image", ",", "data", ",", "height", "=", "32", ")", ":", "\n", "    ", "\"\"\"\n    Cuts image with bounding box using perspective Transform\n    :param image: numpy.ndarray: image\n    :param data: dict: corresponding word data box\n    :param height: int: height of the result image\n    :return: (np.ndarray, list): cut image, list of char x axis delimiters\n    \"\"\"", "\n", "box", "=", "data", "[", "'box'", "]", "\n", "scale", "=", "np", ".", "sqrt", "(", "(", "box", "[", "0", ",", "1", "]", "-", "box", "[", "1", ",", "1", "]", ")", "**", "2", "+", "(", "box", "[", "0", ",", "0", "]", "-", "box", "[", "1", ",", "0", "]", ")", "**", "2", ")", "/", "height", "\n", "w", "=", "int", "(", "np", ".", "sqrt", "(", "(", "box", "[", "1", ",", "1", "]", "-", "box", "[", "2", ",", "1", "]", ")", "**", "2", "+", "(", "box", "[", "1", ",", "0", "]", "-", "box", "[", "2", ",", "0", "]", ")", "**", "2", ")", "/", "scale", ")", "\n", "pts1", "=", "np", ".", "float32", "(", "box", ")", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "pts1", "=", "pts1", "[", "[", "1", ",", "0", ",", "3", ",", "2", "]", "]", "\n", "pts2", "=", "np", ".", "float32", "(", "[", "[", "0", ",", "0", "]", ",", "[", "height", ",", "0", "]", ",", "[", "0", ",", "w", "]", ",", "[", "height", ",", "w", "]", "]", ")", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "M", "=", "cv2", ".", "getPerspectiveTransform", "(", "pts1", ",", "pts2", ")", "\n", "result_img", "=", "cv2", ".", "warpPerspective", "(", "image", ",", "M", ",", "(", "w", ",", "height", ")", ")", "\n", "\n", "begin", "=", "box", "[", "0", "]", "[", "1", "]", "\n", "dist", "=", "(", "box", "[", "2", "]", "[", "1", "]", "-", "begin", ")", "\n", "delimiters", "=", "[", "]", "\n", "for", "(", "char", ",", "next_char", ")", "in", "zip", "(", "data", "[", "'chars'", "]", ",", "data", "[", "'chars'", "]", "[", "1", ":", "]", ")", ":", "\n", "        ", "left", "=", "(", "char", "[", "'box'", "]", "[", "3", "]", "[", "1", "]", "-", "begin", ")", "/", "dist", "*", "w", "\n", "right", "=", "(", "next_char", "[", "'box'", "]", "[", "0", "]", "[", "1", "]", "-", "begin", ")", "/", "dist", "*", "w", "\n", "delimiters", ".", "append", "(", "int", "(", "(", "left", "+", "right", ")", "/", "2", ")", ")", "\n", "", "return", "result_img", ",", "delimiters", "\n", "\n"]], "home.repos.pwc.inspect_result.machine-intelligence-laboratory_DDI-100.scripts.utils.combine_masks": [[53, 69], ["numpy.zeros", "ValueError", "ValueError"], "function", ["None"], ["", "def", "combine_masks", "(", "true_mask", ",", "predicted_mask", ")", ":", "\n", "    ", "\"\"\"\n    Combines true and predicted masks into one image for convenient comparison.\n    :param true_mask: 2D np.ndarray - gray image with true mask\n    :param predicted_mask: 2D np.ndarray - gray image with predicted mask\n    :return: 3D np.ndarray - colored image with both masks\n    \"\"\"", "\n", "if", "true_mask", ".", "shape", "!=", "predicted_mask", ".", "shape", ":", "\n", "        ", "raise", "ValueError", "(", "\"Shapes do not match\"", ")", "\n", "", "if", "true_mask", ".", "ndim", "!=", "2", ":", "\n", "        ", "raise", "ValueError", "(", "\"Masks should be greyscaled\"", ")", "\n", "\n", "", "img", "=", "np", ".", "zeros", "(", "true_mask", ".", "shape", "+", "(", "3", ",", ")", ")", "\n", "img", "[", ":", ",", ":", ",", "2", "]", "=", "255", "-", "predicted_mask", "\n", "img", "[", ":", ",", ":", ",", "1", "]", "=", "255", "-", "true_mask", "\n", "return", "img", "\n", "", ""]]}