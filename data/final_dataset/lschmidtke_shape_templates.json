{"home.repos.pwc.inspect_result.lschmidtke_shape_templates.core.networks.ParameterRegressor.__init__": [[6, 19], ["torch.Module.__init__", "networks.ParameterRegressor.define_network"], "methods", ["home.repos.pwc.inspect_result.lschmidtke_shape_templates.utils.dataset.ImageDataset.__init__", "home.repos.pwc.inspect_result.lschmidtke_shape_templates.core.networks.ImageTranslator.define_network"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "num_parts", ")", ":", "\n", "        ", "super", "(", "ParameterRegressor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\"\"\"\n        convolutional encoder + linear layer at the end\n        Args:\n            num_features: list of ints containing number of features per layer\n            num_parts: number of body parts for which we regress affine parameters\n        Returns:\n            torch.tensor (batch, num_parts, 2, 3), (2, 3) affine matrix for each body part\n        \"\"\"", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "num_parts", "=", "num_parts", "\n", "self", ".", "layers", "=", "self", ".", "define_network", "(", "num_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lschmidtke_shape_templates.core.networks.ParameterRegressor._add_conv_layer": [[20, 25], ["torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["None"], ["", "def", "_add_conv_layer", "(", "self", ",", "in_ch", ",", "nf", ")", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_ch", ",", "nf", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "nf", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lschmidtke_shape_templates.core.networks.ParameterRegressor._add_down_layer": [[27, 32], ["torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["None"], ["", "def", "_add_down_layer", "(", "self", ",", "in_ch", ",", "nf", ")", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_ch", ",", "nf", ",", "3", ",", "2", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "nf", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lschmidtke_shape_templates.core.networks.ParameterRegressor.define_network": [[34, 51], ["range", "layers.append", "torch.Sequential", "torch.Sequential", "networks.ParameterRegressor._add_conv_layer", "len", "layers.append", "layers.append", "torch.Sequential", "torch.Sequential", "networks.ParameterRegressor._add_conv_layer", "networks.ParameterRegressor._add_down_layer", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Flatten", "torch.Flatten", "torch.LazyLinear", "torch.LazyLinear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LazyLinear", "torch.LazyLinear"], "methods", ["home.repos.pwc.inspect_result.lschmidtke_shape_templates.core.networks.ImageTranslator._add_conv_layer", "home.repos.pwc.inspect_result.lschmidtke_shape_templates.core.networks.ImageTranslator._add_conv_layer", "home.repos.pwc.inspect_result.lschmidtke_shape_templates.core.networks.ImageTranslator._add_down_layer"], ["", "def", "define_network", "(", "self", ",", "num_features", ")", ":", "\n", "        ", "layers", "=", "[", "self", ".", "_add_conv_layer", "(", "in_ch", "=", "3", ",", "nf", "=", "num_features", "[", "0", "]", ")", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "num_features", ")", ")", ":", "\n", "            ", "layers", ".", "append", "(", "self", ".", "_add_conv_layer", "(", "num_features", "[", "i", "-", "1", "]", ",", "num_features", "[", "i", "-", "1", "]", ")", ")", "\n", "layers", ".", "append", "(", "self", ".", "_add_down_layer", "(", "num_features", "[", "i", "-", "1", "]", ",", "num_features", "[", "i", "]", ")", ")", "\n", "", "layers", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_features", "[", "-", "1", "]", ",", "256", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", "nn", ".", "LazyLinear", "(", "512", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "512", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "LazyLinear", "(", "self", ".", "num_parts", "*", "6", ")", "\n", ")", ")", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lschmidtke_shape_templates.core.networks.ParameterRegressor.forward": [[52, 54], ["networks.ParameterRegressor.layers().view", "networks.ParameterRegressor.layers"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "layers", "(", "input", ")", ".", "view", "(", "-", "1", ",", "self", ".", "num_parts", ",", "2", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lschmidtke_shape_templates.core.networks.ImageTranslator.__init__": [[57, 65], ["torch.Module.__init__", "networks.ImageTranslator.define_network"], "methods", ["home.repos.pwc.inspect_result.lschmidtke_shape_templates.utils.dataset.ImageDataset.__init__", "home.repos.pwc.inspect_result.lschmidtke_shape_templates.core.networks.ImageTranslator.define_network"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "num_parts", ")", ":", "\n", "        ", "super", "(", "ImageTranslator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\"\"\"\n        convolutional enncoder, decoder\n        \"\"\"", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "num_parts", "=", "num_parts", "\n", "self", ".", "layers", "=", "self", ".", "define_network", "(", "self", ".", "num_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lschmidtke_shape_templates.core.networks.ImageTranslator._add_conv_layer": [[66, 71], ["torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["None"], ["", "def", "_add_conv_layer", "(", "self", ",", "in_ch", ",", "nf", ")", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_ch", ",", "nf", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "nf", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lschmidtke_shape_templates.core.networks.ImageTranslator._add_down_layer": [[73, 78], ["torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["None"], ["", "def", "_add_down_layer", "(", "self", ",", "in_ch", ",", "nf", ")", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_ch", ",", "nf", ",", "3", ",", "2", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "nf", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lschmidtke_shape_templates.core.networks.ImageTranslator._add_up_layer": [[80, 86], ["torch.Sequential", "torch.Sequential", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["None"], ["", "def", "_add_up_layer", "(", "self", ",", "in_ch", ",", "nf", ")", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_ch", ",", "nf", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "nf", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lschmidtke_shape_templates.core.networks.ImageTranslator.define_network": [[88, 102], ["range", "range", "layers.append", "torch.Sequential", "torch.Sequential", "networks.ImageTranslator._add_conv_layer", "len", "layers.append", "layers.append", "layers.append", "layers.append", "torch.Conv2d", "torch.Conv2d", "networks.ImageTranslator._add_conv_layer", "networks.ImageTranslator._add_down_layer", "len", "networks.ImageTranslator._add_conv_layer", "networks.ImageTranslator._add_up_layer"], "methods", ["home.repos.pwc.inspect_result.lschmidtke_shape_templates.core.networks.ImageTranslator._add_conv_layer", "home.repos.pwc.inspect_result.lschmidtke_shape_templates.core.networks.ImageTranslator._add_conv_layer", "home.repos.pwc.inspect_result.lschmidtke_shape_templates.core.networks.ImageTranslator._add_down_layer", "home.repos.pwc.inspect_result.lschmidtke_shape_templates.core.networks.ImageTranslator._add_conv_layer", "home.repos.pwc.inspect_result.lschmidtke_shape_templates.core.networks.ImageTranslator._add_up_layer"], ["", "def", "define_network", "(", "self", ",", "num_features", ")", ":", "\n", "# encoder", "\n", "        ", "layers", "=", "[", "self", ".", "_add_conv_layer", "(", "in_ch", "=", "3", "+", "self", ".", "num_parts", ",", "nf", "=", "num_features", "[", "0", "]", ")", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "num_features", ")", ")", ":", "\n", "            ", "layers", ".", "append", "(", "self", ".", "_add_conv_layer", "(", "num_features", "[", "i", "-", "1", "]", ",", "num_features", "[", "i", "-", "1", "]", ")", ")", "\n", "layers", ".", "append", "(", "self", ".", "_add_down_layer", "(", "num_features", "[", "i", "-", "1", "]", ",", "num_features", "[", "i", "]", ")", ")", "\n", "\n", "# decoder mirrors the encoder", "\n", "", "for", "i", "in", "range", "(", "len", "(", "num_features", ")", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "            ", "layers", ".", "append", "(", "self", ".", "_add_conv_layer", "(", "num_features", "[", "i", "]", ",", "num_features", "[", "i", "]", ")", ")", "\n", "layers", ".", "append", "(", "self", ".", "_add_up_layer", "(", "num_features", "[", "i", "]", ",", "num_features", "[", "i", "-", "1", "]", ")", ")", "\n", "\n", "", "layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "num_features", "[", "i", "-", "1", "]", ",", "3", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lschmidtke_shape_templates.core.networks.ImageTranslator.forward": [[103, 105], ["networks.ImageTranslator.layers", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "template", ")", ":", "\n", "        ", "return", "self", ".", "layers", "(", "torch", ".", "cat", "(", "[", "input", ",", "template", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lschmidtke_shape_templates.core.model.Model.__init__": [[12, 34], ["src.core.utils.helper.draw_template", "src.core.utils.helper.load_anchor_points", "src.core.networks.ParameterRegressor().to", "src.core.networks.ImageTranslator().to", "torch.optim.Adam", "torch.optim.Adam", "torch.Sequential", "torch.Sequential", "torchvision.vgg19().features.eval().to", "range", "[].view().repeat().to", "torch.Tensor().view().repeat().to", "torch.Tensor().view().repeat().to", "torch.Tensor().view().repeat().to", "torch.Tensor().view().repeat().to", "model.Model.vgg.add_module", "src.core.networks.ParameterRegressor", "src.core.networks.ImageTranslator", "list", "list", "torchvision.vgg19().features.eval", "str", "[].view().repeat", "torch.Tensor().view().repeat", "torch.Tensor().view().repeat", "torch.Tensor().view().repeat", "torch.Tensor().view().repeat", "model.Model.regressor.parameters", "model.Model.translator.parameters", "[].view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torchvision.vgg19", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.lschmidtke_shape_templates.utils.helper.draw_template", "home.repos.pwc.inspect_result.lschmidtke_shape_templates.utils.helper.load_anchor_points"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "device", ")", ":", "\n", "\n", "        ", "self", ".", "template", "=", "draw_template", "(", "cfg", "[", "'template_path'", "]", ",", "size", "=", "cfg", "[", "'img_size'", "]", ",", "batch_size", "=", "cfg", "[", "'batch_size'", "]", ",", "\n", "device", "=", "device", ")", "\n", "self", ".", "core", ",", "self", ".", "single", ",", "self", ".", "double", "=", "load_anchor_points", "(", "cfg", "[", "'anchor_pts_path'", "]", ",", "device", ",", "cfg", "[", "'batch_size'", "]", ")", "\n", "self", ".", "regressor", "=", "ParameterRegressor", "(", "num_features", "=", "cfg", "[", "'regressor_nf'", "]", ",", "num_parts", "=", "cfg", "[", "'num_parts'", "]", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "translator", "=", "ImageTranslator", "(", "num_features", "=", "cfg", "[", "'translator_nf'", "]", ",", "num_parts", "=", "cfg", "[", "'num_parts'", "]", ")", ".", "to", "(", "device", ")", "\n", "\n", "self", ".", "optim", "=", "Adam", "(", "list", "(", "self", ".", "regressor", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "translator", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "cfg", "[", "'learning_rate'", "]", ")", "\n", "self", ".", "vgg", "=", "nn", ".", "Sequential", "(", ")", "\n", "vgg", "=", "models", ".", "vgg19", "(", "pretrained", "=", "True", ")", ".", "features", ".", "eval", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "depth", "=", "14", "\n", "\n", "for", "i", "in", "range", "(", "depth", ")", ":", "\n", "            ", "self", ".", "vgg", ".", "add_module", "(", "str", "(", "i", ")", ",", "vgg", "[", "i", "]", ")", "\n", "\n", "", "self", ".", "I", "=", "torch", ".", "eye", "(", "3", ")", "[", "0", ":", "2", "]", ".", "view", "(", "1", ",", "1", ",", "2", ",", "3", ")", ".", "repeat", "(", "cfg", "[", "'batch_size'", "]", ",", "cfg", "[", "'num_parts'", "]", ",", "1", ",", "1", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "aug", "=", "torch", ".", "Tensor", "(", "[", "0", ",", "0", ",", "1", "]", ")", ".", "view", "(", "1", ",", "1", ",", "1", ",", "3", ")", ".", "repeat", "(", "cfg", "[", "'batch_size'", "]", ",", "cfg", "[", "'num_parts'", "]", ",", "1", ",", "1", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "lambda1", "=", "cfg", "[", "'anchor_loss_weight'", "]", "\n", "self", ".", "labmda2", "=", "cfg", "[", "'boundary_loss_weight'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lschmidtke_shape_templates.core.model.Model.train_step": [[35, 75], ["model.Model.regressor", "model.Model.template.view().unsqueeze", "model.Model.view", "src.core.utils.transforms.transform_template", "transformed_template.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "src.core.utils.transforms.transform_anchor_points", "model.Model.translator", "src.core.utils.losses.compute_anchor_loss", "src.core.utils.losses.compute_boundary_loss", "src.core.utils.losses._l1_loss", "model.Model.regressor.zero_grad", "model.Model.translator.zero_grad", "loss.backward", "model.Model.optim.step", "model.Model.vgg", "model.Model.vgg", "model.Model.detach", "transformed_template.view.view.sum().detach", "model.Model.template.view", "transformed_template.view.view.sum"], "methods", ["home.repos.pwc.inspect_result.lschmidtke_shape_templates.utils.transforms.transform_template", "home.repos.pwc.inspect_result.lschmidtke_shape_templates.utils.transforms.transform_anchor_points", "home.repos.pwc.inspect_result.lschmidtke_shape_templates.utils.losses.compute_anchor_loss", "home.repos.pwc.inspect_result.lschmidtke_shape_templates.utils.losses.compute_boundary_loss", "home.repos.pwc.inspect_result.lschmidtke_shape_templates.utils.losses._l1_loss"], ["", "def", "train_step", "(", "self", ",", "frame1", ",", "frame2", ",", "return_imgs", "=", "False", ")", ":", "\n", "        ", "batch_size", "=", "frame1", ".", "shape", "[", "0", "]", "\n", "num_parts", "=", "self", ".", "template", ".", "shape", "[", "1", "]", "\n", "img_size", "=", "frame1", ".", "shape", "[", "2", "]", "\n", "\n", "estimated_params", "=", "self", ".", "regressor", "(", "frame1", ")", "\n", "estimated_params", "=", "self", ".", "I", "+", "estimated_params", "\n", "\n", "# (batch, num_parts) --> (batch*num_parts)", "\n", "batched_template", "=", "self", ".", "template", ".", "view", "(", "-", "1", ",", "img_size", ",", "img_size", ")", ".", "unsqueeze", "(", "1", ")", "\n", "batched_params", "=", "estimated_params", ".", "view", "(", "-", "1", ",", "2", ",", "3", ")", "\n", "transformed_template", "=", "transform_template", "(", "batched_template", ",", "batched_params", ")", "\n", "# (batch*num_parts) --> (batch, num_parts)", "\n", "transformed_template", "=", "transformed_template", ".", "view", "(", "batch_size", ",", "num_parts", ",", "img_size", ",", "img_size", ")", "\n", "\n", "# append [0, 0, 1] as last row to matrices", "\n", "A", "=", "torch", ".", "cat", "(", "[", "estimated_params", ",", "self", ".", "aug", "]", ",", "dim", "=", "-", "2", ")", "\n", "transformed_anchors", "=", "transform_anchor_points", "(", "A", ",", "self", ".", "core", ",", "self", ".", "double", ",", "self", ".", "single", ")", "\n", "\n", "reconstructed", "=", "self", ".", "translator", "(", "frame2", ",", "transformed_template", ")", "\n", "anchor_loss", "=", "compute_anchor_loss", "(", "*", "transformed_anchors", ",", "size", "=", "img_size", ")", "\n", "boundary_loss", "=", "compute_boundary_loss", "(", "*", "transformed_anchors", ",", "img_size", "=", "img_size", ")", "\n", "recon_loss", "=", "_l1_loss", "(", "self", ".", "vgg", "(", "frame1", ")", ",", "self", ".", "vgg", "(", "reconstructed", ")", ")", "\n", "\n", "# overall loss, gradient and weight update", "\n", "loss", "=", "recon_loss", "+", "self", ".", "lambda1", "*", "anchor_loss", "+", "self", ".", "labmda2", "*", "boundary_loss", "\n", "# reset gradients", "\n", "self", ".", "regressor", ".", "zero_grad", "(", ")", "\n", "self", ".", "translator", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optim", ".", "step", "(", ")", "\n", "\n", "d", "=", "{", "'anchor_loss'", ":", "anchor_loss", ",", "'boundary_loss'", ":", "boundary_loss", ",", "'recon_loss'", ":", "recon_loss", "}", "\n", "if", "return_imgs", ":", "\n", "            ", "d", "[", "'reconstructed_frame'", "]", "=", "reconstructed", ".", "detach", "(", ")", "\n", "d", "[", "'frame1'", "]", "=", "frame1", "\n", "d", "[", "'frame2'", "]", "=", "frame2", "\n", "d", "[", "'transformed_template'", "]", "=", "transformed_template", ".", "sum", "(", "1", ",", "keepdims", "=", "True", ")", ".", "detach", "(", ")", "\n", "\n", "", "return", "d", "", "", "", ""]], "home.repos.pwc.inspect_result.lschmidtke_shape_templates.core.old_networks.ParameterRegressor.__init__": [[5, 74], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Flatten", "torch.Flatten", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.lschmidtke_shape_templates.utils.dataset.ImageDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_f", ",", "num_joints", ")", ":", "\n", "        ", "super", "(", "ParameterRegressor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\"\"\"Input is 3x256x256 image and int num_joints\"\"\"", "\n", "self", ".", "num_joints", "=", "num_joints", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", "+", "self", ".", "num_joints", ",", "n_f", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n_f", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "n_f", ",", "n_f", ",", "3", ",", "1", ",", "1", ",", "dilation", "=", "4", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n_f", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "n_f", ",", "n_f", "*", "2", ",", "3", ",", "2", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n_f", "*", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", ",", "\n", "# 128, 128", "\n", "nn", ".", "Conv2d", "(", "n_f", "*", "2", ",", "n_f", "*", "2", ",", "3", ",", "1", ",", "1", ",", "dilation", "=", "8", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n_f", "*", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "n_f", "*", "2", ",", "n_f", "*", "4", ",", "3", ",", "2", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n_f", "*", "4", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", ",", "\n", "# 64, 64", "\n", "nn", ".", "Conv2d", "(", "n_f", "*", "4", ",", "n_f", "*", "4", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n_f", "*", "4", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "n_f", "*", "4", ",", "n_f", "*", "8", ",", "3", ",", "2", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n_f", "*", "8", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", ",", "\n", "# 32, 32", "\n", "nn", ".", "Conv2d", "(", "n_f", "*", "8", ",", "n_f", "*", "8", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n_f", "*", "8", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "n_f", "*", "8", ",", "n_f", "*", "8", ",", "3", ",", "2", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n_f", "*", "8", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", ",", "\n", "# 16, 16", "\n", "nn", ".", "Conv2d", "(", "n_f", "*", "8", ",", "n_f", "*", "8", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n_f", "*", "8", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "n_f", "*", "8", ",", "n_f", "*", "8", ",", "3", ",", "2", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n_f", "*", "8", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", ",", "\n", "# 8, 8", "\n", "nn", ".", "Conv2d", "(", "n_f", "*", "8", ",", "n_f", "*", "8", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n_f", "*", "8", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "n_f", "*", "8", ",", "n_f", "*", "8", ",", "3", ",", "2", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n_f", "*", "8", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", ")", "\n", "\n", "self", ".", "param_branch", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "n_f", "*", "8", "*", "4", "*", "4", ",", "512", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "512", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", ",", "\n", "# parameters for affine matrix", "\n", "nn", ".", "Linear", "(", "512", ",", "num_joints", "*", "6", ")", "\n", ")", "\n", "\n", "self", ".", "depth_branch", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "n_f", "*", "8", ",", "n_f", "*", "4", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n_f", "*", "4", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "n_f", "*", "4", ",", "n_f", "*", "4", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n_f", "*", "4", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "n_f", "*", "4", ",", "self", ".", "num_joints", ",", "4", ",", "1", ",", "0", ")", ",", "\n", "# bottleneck, allow channel-wise multiplication by scalar", "\n"]], "home.repos.pwc.inspect_result.lschmidtke_shape_templates.core.old_networks.ParameterRegressor.forward": [[78, 84], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "old_networks.ParameterRegressor.main", "old_networks.ParameterRegressor.param_branch", "old_networks.ParameterRegressor.depth_branch", "old_networks.ParameterRegressor.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "template", ")", ":", "\n", "        ", "cat", "=", "torch", ".", "cat", "(", "[", "input", ",", "template", "]", ",", "dim", "=", "1", ")", "\n", "features", "=", "self", ".", "main", "(", "cat", ")", "\n", "params", "=", "self", ".", "param_branch", "(", "features", ")", "\n", "depth", "=", "self", ".", "depth_branch", "(", "features", ")", "\n", "return", "params", ".", "view", "(", "-", "1", ",", "self", ".", "num_joints", ",", "2", ",", "3", ")", ",", "depth", "", "", "", ""]], "home.repos.pwc.inspect_result.lschmidtke_shape_templates.core.pretrained_model.Predictor.__init__": [[11, 20], ["torch.Tensor().view().repeat().to", "torch.Tensor().view().repeat().to", "src.core.old_networks.ParameterRegressor().to", "src.core.utils.helper.draw_template", "src.core.utils.helper.load_anchor_points", "pretrained_model.Predictor.net.eval", "torch.Tensor().view().repeat", "torch.Tensor().view().repeat", "src.core.old_networks.ParameterRegressor", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.lschmidtke_shape_templates.utils.helper.draw_template", "home.repos.pwc.inspect_result.lschmidtke_shape_templates.utils.helper.load_anchor_points"], ["    ", "def", "__init__", "(", "self", ",", "batch_size", ",", "num_parts", ",", "device", ",", "template_path", ",", "anchors_path", ")", ":", "\n", "        ", "self", ".", "I", "=", "torch", ".", "Tensor", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "[", "0", ",", "1", ",", "0", "]", "]", ")", ".", "view", "(", "1", ",", "1", ",", "2", ",", "3", ")", ".", "repeat", "(", "batch_size", ",", "num_parts", ",", "1", ",", "1", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "aug", "=", "torch", ".", "Tensor", "(", "[", "0", ",", "0", ",", "1", "]", ")", ".", "view", "(", "1", ",", "1", ",", "1", ",", "3", ")", ".", "repeat", "(", "batch_size", ",", "num_parts", ",", "1", ",", "1", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "net", "=", "ParameterRegressor", "(", "n_f", "=", "32", ",", "num_joints", "=", "num_parts", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "template", "=", "draw_template", "(", "template_path", ",", "size", "=", "256", ",", "batch_size", "=", "batch_size", ",", "device", "=", "device", ")", "\n", "self", ".", "core", ",", "self", ".", "double", ",", "self", ".", "single", "=", "load_anchor_points", "(", "anchors_path", ",", "device", ",", "batch_size", ")", "\n", "self", ".", "net", "=", "self", ".", "net", ".", "eval", "(", ")", "\n", "# reorder the parts/anchors from old to new ordering", "\n", "self", ".", "indices", "=", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "11", ",", "12", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "13", ",", "14", ",", "15", ",", "16", ",", "17", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lschmidtke_shape_templates.core.pretrained_model.Predictor.load_checkpoint": [[21, 23], ["pretrained_model.Predictor.net.load_state_dict", "torch.load"], "methods", ["None"], ["", "def", "load_checkpoint", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "path", ")", "[", "'regressor_network'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lschmidtke_shape_templates.core.pretrained_model.Predictor.transform": [[24, 29], ["kornia.geometry.affine"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "template", ",", "params", ")", ":", "\n", "# translation should be in range from 0 to roughly 1, so scale up here", "\n", "# params[:, 0:3, -1] = params[..., -1] * 256", "\n", "        ", "warped_template", "=", "kornia", ".", "geometry", ".", "affine", "(", "template", ",", "params", ")", "\n", "return", "warped_template", "\n", "\n"]], "home.repos.pwc.inspect_result.lschmidtke_shape_templates.core.pretrained_model.Predictor.predict": [[30, 50], ["pretrained_model.Predictor.net", "torch.cat", "src.core.utils.transforms.transform_anchor_points", "params.view", "pretrained_model.Predictor.template.view().unsqueeze", "pretrained_model.Predictor.transform", "warped_heatmaps.view.view.view", "pretrained_model.Predictor.template.view"], "methods", ["home.repos.pwc.inspect_result.lschmidtke_shape_templates.utils.transforms.transform_anchor_points", "home.repos.pwc.inspect_result.lschmidtke_shape_templates.core.pretrained_model.Predictor.transform"], ["", "def", "predict", "(", "self", ",", "frame", ")", ":", "\n", "        ", "\"\"\"\n        frame: shape [b, 3 (bgr), height, width], to normalize run\n        normalize = transforms.Normalize(mean=[0.485, 0.456, 0.406],\n                                 std=[0.229, 0.224, 0.225])\n        totensor = transforms.ToTensor()\n        transform = transforms.Compose([totensor, normalize])\n        \"\"\"", "\n", "params", ",", "_", "=", "self", ".", "net", "(", "frame", ",", "self", ".", "template", ")", "\n", "params", "=", "self", ".", "I", "+", "params", "\n", "params", "=", "params", "[", ":", ",", "self", ".", "indices", "]", "\n", "params", "[", "...", ",", "-", "1", "]", "*=", "256", "\n", "A", "=", "torch", ".", "cat", "(", "[", "params", ",", "self", ".", "aug", "]", ",", "dim", "=", "-", "2", ")", "\n", "transformed_anchors", "=", "transform_anchor_points", "(", "A", ",", "self", ".", "core", ",", "self", ".", "double", ",", "self", ".", "single", ")", "\n", "batched_params", "=", "params", ".", "view", "(", "-", "1", ",", "2", ",", "3", ")", "\n", "batched_template", "=", "self", ".", "template", ".", "view", "(", "-", "1", ",", "256", ",", "256", ")", ".", "unsqueeze", "(", "1", ")", "\n", "warped_heatmaps", "=", "self", ".", "transform", "(", "batched_template", ",", "batched_params", ")", "\n", "warped_heatmaps", "=", "warped_heatmaps", ".", "view", "(", "-", "1", ",", "18", ",", "256", ",", "256", ")", "\n", "\n", "return", "warped_heatmaps", ",", "transformed_anchors", "[", "0", "]", ",", "transformed_anchors", "[", "1", "]", ",", "transformed_anchors", "[", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lschmidtke_shape_templates.utils.transforms.transform_anchor_points": [[7, 32], ["A[].unsqueeze().repeat", "torch.matmul", "transformed.append", "A[].unsqueeze"], "function", ["None"], ["def", "transform_anchor_points", "(", "A", ",", "*", "argv", ")", ":", "\n", "    ", "\"\"\"\n    perform matrix multiplication A*anchor_point for each body part and anchor_point\n    Args:\n        A: torch.tensor (batch, num_parts, 3, 3) of transformation matrices\n        *args: tensors with shape (batch, num_parts, num_anchors, 3)\n    \"\"\"", "\n", "\n", "num_parts", "=", "0", "\n", "for", "arg", "in", "argv", ":", "\n", "        ", "num_parts", "+=", "arg", ".", "shape", "[", "1", "]", "\n", "", "assert", "num_parts", "==", "A", ".", "shape", "[", "1", "]", ",", "\"number of matrices should match number of parts!\"", "\n", "\n", "index", "=", "0", "\n", "transformed", "=", "[", "]", "\n", "for", "arg", "in", "argv", ":", "\n", "        ", "num_parts", "=", "arg", ".", "shape", "[", "1", "]", "\n", "num_anchors", "=", "arg", ".", "shape", "[", "2", "]", "\n", "# repeat matrix num_anchors times", "\n", "A_", "=", "A", "[", ":", ",", "index", ":", "index", "+", "num_parts", "]", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "num_anchors", ",", "1", ",", "1", ")", "\n", "tr", "=", "torch", ".", "matmul", "(", "A_", ",", "arg", ")", "\n", "transformed", ".", "append", "(", "tr", ")", "\n", "index", "+=", "num_parts", "\n", "\n", "", "return", "transformed", "\n", "\n"]], "home.repos.pwc.inspect_result.lschmidtke_shape_templates.utils.transforms.get_3rd_point": [[34, 37], ["numpy.array"], "function", ["None"], ["", "def", "get_3rd_point", "(", "a", ",", "b", ")", ":", "\n", "    ", "direct", "=", "a", "-", "b", "\n", "return", "b", "+", "np", ".", "array", "(", "[", "-", "direct", "[", "1", "]", ",", "direct", "[", "0", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lschmidtke_shape_templates.utils.transforms.get_dir": [[39, 47], ["numpy.sin", "numpy.cos"], "function", ["None"], ["", "def", "get_dir", "(", "src_point", ",", "rot_rad", ")", ":", "\n", "    ", "sn", ",", "cs", "=", "np", ".", "sin", "(", "rot_rad", ")", ",", "np", ".", "cos", "(", "rot_rad", ")", "\n", "\n", "src_result", "=", "[", "0", ",", "0", "]", "\n", "src_result", "[", "0", "]", "=", "src_point", "[", "0", "]", "*", "cs", "-", "src_point", "[", "1", "]", "*", "sn", "\n", "src_result", "[", "1", "]", "=", "src_point", "[", "0", "]", "*", "sn", "+", "src_point", "[", "1", "]", "*", "cs", "\n", "\n", "return", "src_result", "\n", "\n"]], "home.repos.pwc.inspect_result.lschmidtke_shape_templates.utils.transforms.get_affine_transform": [[49, 84], ["numpy.array", "transforms.get_dir", "numpy.array", "numpy.zeros", "numpy.zeros", "transforms.get_3rd_point", "transforms.get_3rd_point", "print", "numpy.array", "numpy.array", "cv2.getAffineTransform", "cv2.getAffineTransform", "isinstance", "isinstance", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32"], "function", ["home.repos.pwc.inspect_result.lschmidtke_shape_templates.utils.transforms.get_dir", "home.repos.pwc.inspect_result.lschmidtke_shape_templates.utils.transforms.get_3rd_point", "home.repos.pwc.inspect_result.lschmidtke_shape_templates.utils.transforms.get_3rd_point"], ["", "def", "get_affine_transform", "(", "center", ",", "\n", "scale", ",", "\n", "rot", ",", "\n", "output_size", ",", "\n", "shift", "=", "np", ".", "array", "(", "[", "0", ",", "0", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "inv", "=", "0", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "scale", ",", "np", ".", "ndarray", ")", "and", "not", "isinstance", "(", "scale", ",", "list", ")", ":", "\n", "        ", "print", "(", "scale", ")", "\n", "scale", "=", "np", ".", "array", "(", "[", "scale", ",", "scale", "]", ")", "\n", "\n", "", "scale_tmp", "=", "scale", "*", "200.0", "\n", "src_w", "=", "scale_tmp", "[", "0", "]", "\n", "dst_w", "=", "output_size", "[", "0", "]", "\n", "dst_h", "=", "output_size", "[", "1", "]", "\n", "\n", "rot_rad", "=", "np", ".", "pi", "*", "rot", "/", "180", "\n", "src_dir", "=", "get_dir", "(", "[", "0", ",", "src_w", "*", "-", "0.5", "]", ",", "rot_rad", ")", "\n", "dst_dir", "=", "np", ".", "array", "(", "[", "0", ",", "dst_w", "*", "-", "0.5", "]", ",", "np", ".", "float32", ")", "\n", "\n", "src", "=", "np", ".", "zeros", "(", "(", "3", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "dst", "=", "np", ".", "zeros", "(", "(", "3", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "src", "[", "0", ",", ":", "]", "=", "center", "+", "scale_tmp", "*", "shift", "\n", "src", "[", "1", ",", ":", "]", "=", "center", "+", "src_dir", "+", "scale_tmp", "*", "shift", "\n", "dst", "[", "0", ",", ":", "]", "=", "[", "dst_w", "*", "0.5", ",", "dst_h", "*", "0.5", "]", "\n", "dst", "[", "1", ",", ":", "]", "=", "np", ".", "array", "(", "[", "dst_w", "*", "0.5", ",", "dst_h", "*", "0.5", "]", ")", "+", "dst_dir", "\n", "\n", "src", "[", "2", ":", ",", ":", "]", "=", "get_3rd_point", "(", "src", "[", "0", ",", ":", "]", ",", "src", "[", "1", ",", ":", "]", ")", "\n", "dst", "[", "2", ":", ",", ":", "]", "=", "get_3rd_point", "(", "dst", "[", "0", ",", ":", "]", ",", "dst", "[", "1", ",", ":", "]", ")", "\n", "\n", "if", "inv", ":", "\n", "        ", "trans", "=", "cv2", ".", "getAffineTransform", "(", "np", ".", "float32", "(", "dst", ")", ",", "np", ".", "float32", "(", "src", ")", ")", "\n", "", "else", ":", "\n", "        ", "trans", "=", "cv2", ".", "getAffineTransform", "(", "np", ".", "float32", "(", "src", ")", ",", "np", ".", "float32", "(", "dst", ")", ")", "\n", "\n", "", "return", "trans", "\n", "\n"]], "home.repos.pwc.inspect_result.lschmidtke_shape_templates.utils.transforms.transform_template": [[86, 91], ["kornia.geometry.warp_affine"], "function", ["None"], ["", "def", "transform_template", "(", "input", ",", "params", ")", ":", "\n", "    ", "size", "=", "input", ".", "shape", "[", "2", "]", "\n", "# scale up translation", "\n", "params", "[", "...", ",", "-", "1", "]", "=", "params", "[", "...", ",", "-", "1", "]", "*", "size", "\n", "return", "kornia", ".", "geometry", ".", "warp_affine", "(", "input", ",", "params", ",", "dsize", "=", "(", "size", ",", "size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lschmidtke_shape_templates.utils.dataset.ImageDataset.__init__": [[7, 9], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.lschmidtke_shape_templates.utils.dataset.ImageDataset.__len__": [[10, 12], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.lschmidtke_shape_templates.utils.dataset.ImageDataset.__getitem__": [[13, 15], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.lschmidtke_shape_templates.utils.helper.load_config": [[8, 13], ["open", "yaml.load"], "function", ["None"], ["def", "load_config", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'r'", ")", "as", "file", ":", "\n", "        ", "cfg", "=", "yaml", ".", "load", "(", "file", ")", "\n", "\n", "", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.lschmidtke_shape_templates.utils.helper.draw_shape": [[15, 54], ["torch.meshgrid", "pos.view.view", "torch.exp", "torch.arange", "torch.arange", "x.unsqueeze().unsqueeze().to", "y.unsqueeze().unsqueeze().to", "a.view", "b.view", "c.view", "torch.sin", "x.unsqueeze().unsqueeze", "y.unsqueeze().unsqueeze", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "x.unsqueeze", "y.unsqueeze"], "function", ["None"], ["", "def", "draw_shape", "(", "pos", ",", "sigma_x", ",", "sigma_y", ",", "angle", ",", "size", ")", ":", "\n", "    ", "\"\"\"\n    draw (batched) gaussian with sigma_x, sigma_y on 2d grid\n\n    Args:\n        pos: torch.tensor (float) with shape (2) specifying center of gaussian blob (x: row, y:column)\n        sigma_x: torch.tensor (float scalar), scaling parameter along x-axis\n        sigma_y: similar along y-axis\n        angle: torch.tensor (float scalar) rotation angle in radians\n        size: int specifying size of image\n        device: torch.device, either cpu or gpu\n\n    Returns:\n        torch.tensor (1, 1, size, size) with gaussian blob\n    \"\"\"", "\n", "device", "=", "pos", ".", "device", "\n", "assert", "sigma_x", ".", "device", "==", "sigma_y", ".", "device", "==", "angle", ".", "device", "==", "device", ",", "\"inputs should be on the same device!\"", "\n", "\n", "# create 2d meshgrid", "\n", "x", ",", "y", "=", "torch", ".", "meshgrid", "(", "torch", ".", "arange", "(", "0", ",", "size", ")", ",", "torch", ".", "arange", "(", "0", ",", "size", ")", ")", "\n", "x", ",", "y", "=", "x", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", ",", "y", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "\n", "# see https://en.wikipedia.org/wiki/Gaussian_function#Two-dimensional_Gaussian_function", "\n", "a", "=", "torch", ".", "cos", "(", "angle", ")", "**", "2", "/", "(", "2", "*", "sigma_x", "**", "2", ")", "+", "torch", ".", "sin", "(", "angle", ")", "**", "2", "/", "(", "2", "*", "sigma_y", "**", "2", ")", "\n", "b", "=", "-", "torch", ".", "sin", "(", "2", "*", "angle", ")", "/", "(", "4", "*", "sigma_x", "**", "2", ")", "+", "torch", ".", "sin", "(", "2", "*", "angle", ")", "/", "(", "4", "*", "sigma_y", "**", "2", ")", "\n", "c", "=", "torch", ".", "sin", "(", "angle", ")", "**", "2", "/", "(", "2", "*", "sigma_x", "**", "2", ")", "+", "torch", ".", "cos", "(", "angle", ")", "**", "2", "/", "(", "2", "*", "sigma_y", "**", "2", ")", "\n", "\n", "# append dimsensions for broadcasting", "\n", "pos", "=", "pos", ".", "view", "(", "1", ",", "1", ",", "2", ",", "1", ",", "1", ")", "\n", "a", ",", "b", ",", "c", "=", "a", ".", "view", "(", "1", ",", "1", ")", ",", "b", ".", "view", "(", "1", ",", "1", ")", ",", "c", ".", "view", "(", "1", ",", "1", ")", "\n", "\n", "# pixel-wise distance from center", "\n", "xdist", "=", "(", "x", "-", "pos", "[", ":", ",", ":", ",", "0", "]", ")", "\n", "ydist", "=", "(", "y", "-", "pos", "[", ":", ",", ":", ",", "1", "]", ")", "\n", "\n", "# gaussian function", "\n", "g", "=", "torch", ".", "exp", "(", "(", "-", "a", "*", "xdist", "**", "2", "-", "2", "*", "b", "*", "xdist", "*", "ydist", "-", "c", "*", "ydist", "**", "2", ")", ")", "\n", "\n", "return", "g", "\n", "\n"]], "home.repos.pwc.inspect_result.lschmidtke_shape_templates.utils.helper.draw_template": [[56, 77], ["json.load.values", "torch.cat().repeat", "open", "json_tricks.load", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.cat().repeat.append", "helper.draw_shape", "torch.cat", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.lschmidtke_shape_templates.utils.helper.draw_shape"], ["", "def", "draw_template", "(", "path", ",", "size", ",", "batch_size", ",", "device", ")", ":", "\n", "    ", "\"\"\"\n    draw template consisting of limbs defined by gaussian heatmap\n    Args:\n        template: json file defining all parts\n        size: int, image size (assumed quadratic), this should match the center coordinates defined in the json!\n        device: torch.device, either cpu or gpu\n    \"\"\"", "\n", "with", "open", "(", "path", ",", "'r'", ")", "as", "file", ":", "\n", "        ", "template", "=", "json", ".", "load", "(", "file", ")", "\n", "", "heatmaps", "=", "[", "]", "\n", "for", "v", "in", "template", ".", "values", "(", ")", ":", "\n", "        ", "center", "=", "torch", ".", "tensor", "(", "v", "[", "'center'", "]", ")", ".", "to", "(", "device", ")", "\n", "sx", "=", "torch", ".", "tensor", "(", "v", "[", "'sx'", "]", ")", ".", "to", "(", "device", ")", "\n", "sy", "=", "torch", ".", "tensor", "(", "v", "[", "'sy'", "]", ")", ".", "to", "(", "device", ")", "\n", "angle", "=", "torch", ".", "tensor", "(", "v", "[", "'angle'", "]", ")", ".", "to", "(", "device", ")", "\n", "heatmaps", ".", "append", "(", "draw_shape", "(", "center", ",", "sx", ",", "sy", ",", "angle", ",", "size", ")", ")", "\n", "\n", "", "heatmaps", "=", "torch", ".", "cat", "(", "heatmaps", ",", "dim", "=", "1", ")", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ",", "1", ")", "\n", "\n", "return", "heatmaps", "\n", "\n"]], "home.repos.pwc.inspect_result.lschmidtke_shape_templates.utils.helper.load_anchor_points": [[79, 104], ["json.load.items", "open", "json_tricks.load", "torch.tensor().to().float().unsqueeze().unsqueeze().repeat", "torch.tensor().to().float().unsqueeze().unsqueeze().repeat", "torch.tensor().to().float().unsqueeze().unsqueeze().repeat", "single.append", "double.append", "torch.tensor().to().float().unsqueeze().unsqueeze", "torch.tensor().to().float().unsqueeze().unsqueeze", "torch.tensor().to().float().unsqueeze().unsqueeze", "torch.tensor().to().float().unsqueeze", "torch.tensor().to().float().unsqueeze", "torch.tensor().to().float().unsqueeze", "torch.tensor().to().float", "torch.tensor().to().float", "torch.tensor().to().float", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor", "torch.tensor", "torch.tensor"], "function", ["None"], ["", "def", "load_anchor_points", "(", "path", ",", "device", ",", "batch_size", ")", ":", "\n", "    ", "\"\"\"\n    load anchor points from json file\n    change this according to your definitions\n    Args:\n        anchor_points: json file containing anchor points per part in column, row format similar to open-cv\n        device: torch.device, either cpu or gpu\n    \"\"\"", "\n", "with", "open", "(", "path", ",", "'r'", ")", "as", "file", ":", "\n", "        ", "anchor_points", "=", "json", ".", "load", "(", "file", ")", "\n", "# assumes three anchor points for core, two (parent+child) for all others except hands and feet and head", "\n", "# change this accordingly for different template definitions!", "\n", "", "double", "=", "[", "]", "\n", "single", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "anchor_points", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", "in", "[", "'left hand'", ",", "'right hand'", ",", "'left foot'", ",", "'right foot'", ",", "'head'", "]", ":", "\n", "            ", "single", ".", "append", "(", "v", ")", "\n", "", "elif", "k", "==", "'core'", ":", "\n", "            ", "triple", "=", "[", "v", "]", "\n", "", "else", ":", "\n", "            ", "double", ".", "append", "(", "v", ")", "\n", "\n", "", "", "return", "torch", ".", "tensor", "(", "triple", ")", ".", "to", "(", "device", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "torch", ".", "tensor", "(", "single", ")", ".", "to", "(", "device", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "torch", ".", "tensor", "(", "double", ")", ".", "to", "(", "device", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lschmidtke_shape_templates.utils.helper.show_images": [[106, 113], ["torchvision.utils.make_grid", "range", "renorm"], "function", ["None"], ["", "def", "show_images", "(", "tensor", ",", "renorm", ")", ":", "\n", "    ", "if", "renorm", ":", "\n", "        ", "for", "i", "in", "range", "(", "tensor", ".", "shape", "[", "0", "]", ")", ":", "\n", "#  bgr opencv to rgb", "\n", "            ", "tensor", "[", "i", "]", "=", "renorm", "(", "tensor", "[", "i", "]", ")", "[", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "", "", "output_grid", "=", "make_grid", "(", "tensor", ",", "nrow", "=", "6", ",", "normalize", "=", "True", ",", "scale_each", "=", "True", ")", "\n", "return", "output_grid", "", "", ""]], "home.repos.pwc.inspect_result.lschmidtke_shape_templates.utils.losses._l1_loss": [[9, 11], ["l1_loss"], "function", ["None"], ["def", "_l1_loss", "(", "x1", ",", "x2", ")", ":", "\n", "    ", "return", "l1_loss", "(", "x1", ",", "x2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lschmidtke_shape_templates.utils.losses._l2_loss": [[13, 15], ["l2_loss"], "function", ["None"], ["", "def", "_l2_loss", "(", "x1", ",", "x2", ")", ":", "\n", "    ", "return", "l2_loss", "(", "x1", ",", "x2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lschmidtke_shape_templates.utils.losses.compute_anchor_loss": [[17, 55], ["zip", "l2_loss", "zip", "zip", "l2_loss", "l2_loss", "l2_loss"], "function", ["None"], ["", "def", "compute_anchor_loss", "(", "core", ",", "double", ",", "single", ",", "size", ")", ":", "\n", "    ", "\"\"\"\n    compute mean distance between pairs of transformed anchor_points,\n    change this according to your connectivity constraints\n    \"\"\"", "\n", "loss", "=", "0", "\n", "# normalize to range 0, 1", "\n", "core", "=", "core", "/", "size", "\n", "single", "=", "single", "/", "size", "\n", "double", "=", "double", "/", "size", "\n", "\n", "# loss between core and hips and shoulders", "\n", "indices1", "=", "[", "0", ",", "0", ",", "1", ",", "1", "]", "\n", "# hips and shoulders", "\n", "indices2", "=", "[", "0", ",", "1", ",", "6", ",", "7", "]", "\n", "\n", "for", "index1", ",", "index2", "in", "zip", "(", "indices1", ",", "indices2", ")", ":", "\n", "\n", "        ", "loss", "+=", "l2_loss", "(", "core", "[", ":", ",", "0", ",", "index1", "]", ",", "double", "[", ":", ",", "index2", ",", "0", "]", ")", "\n", "# head and core", "\n", "", "loss", "+=", "l2_loss", "(", "core", "[", ":", ",", "0", ",", "-", "1", "]", ",", "single", "[", ":", ",", "-", "1", ",", "0", "]", ")", "\n", "\n", "# hips to thighs to shins, shoulders to arms to forearms", "\n", "indices3", "=", "[", "0", ",", "1", ",", "2", ",", "3", ",", "6", ",", "7", ",", "8", ",", "9", "]", "\n", "indices4", "=", "[", "2", ",", "3", ",", "4", ",", "5", ",", "8", ",", "9", ",", "10", ",", "11", "]", "\n", "\n", "for", "index3", ",", "index4", "in", "zip", "(", "indices3", ",", "indices4", ")", ":", "\n", "        ", "loss", "+=", "l2_loss", "(", "double", "[", ":", ",", "index3", ",", "1", "]", ",", "double", "[", ":", ",", "index4", ",", "0", "]", ")", "\n", "\n", "#  shin to feet, forarms to hands", "\n", "", "indices5", "=", "[", "4", ",", "5", ",", "10", ",", "11", "]", "\n", "indices6", "=", "[", "0", ",", "1", ",", "2", ",", "3", "]", "\n", "\n", "for", "index5", ",", "index6", "in", "zip", "(", "indices5", ",", "indices6", ")", ":", "\n", "\n", "        ", "loss", "+=", "l2_loss", "(", "double", "[", ":", ",", "index5", ",", "1", "]", ",", "single", "[", ":", ",", "index6", ",", "0", "]", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.lschmidtke_shape_templates.utils.losses.compute_boundary_loss": [[60, 76], ["core.view.view", "core.view.view", "core.view.view", "torch.cat", "torch.cat", "threshold().sum().mean", "threshold().sum", "threshold", "torch.abs", "torch.abs"], "function", ["None"], ["def", "compute_boundary_loss", "(", "core", ",", "single", ",", "double", ",", "img_size", ")", ":", "\n", "    ", "\"\"\"\n    compute boundary loss, boundaries are 0 and 1\n    loss = x if x smaller or greater than 0, 1\n    0 otherwise\n    \"\"\"", "\n", "core", "=", "core", ".", "view", "(", "core", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "core", ".", "shape", "[", "3", "]", ")", "\n", "single", "=", "core", ".", "view", "(", "single", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "single", ".", "shape", "[", "3", "]", ")", "\n", "double", "=", "core", ".", "view", "(", "double", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "double", ".", "shape", "[", "3", "]", ")", "\n", "\n", "comb", "=", "torch", ".", "cat", "(", "[", "core", ",", "single", ",", "double", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# normalize to range -1  to 1", "\n", "comb", "=", "(", "comb", "/", "img_size", ")", "*", "2", "-", "1", "\n", "\n", "return", "threshold", "(", "torch", ".", "abs", "(", "comb", ")", ")", ".", "sum", "(", "1", ")", ".", "mean", "(", ")", "\n", "\n"]]}