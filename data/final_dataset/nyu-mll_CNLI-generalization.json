{"home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.jiant.conftest.pytest_addoption": [[8, 11], ["parser.addoption", "parser.addoption"], "function", ["None"], ["def", "pytest_addoption", "(", "parser", ")", ":", "\n", "    ", "parser", ".", "addoption", "(", "\"--runslow\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ",", "help", "=", "\"run slow tests\"", ")", "\n", "parser", ".", "addoption", "(", "\"--rungpu\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ",", "help", "=", "\"run gpu tests\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.jiant.conftest.pytest_configure": [[13, 16], ["config.addinivalue_line", "config.addinivalue_line"], "function", ["None"], ["", "def", "pytest_configure", "(", "config", ")", ":", "\n", "    ", "config", ".", "addinivalue_line", "(", "\"markers\"", ",", "\"slow: mark test as slow to run\"", ")", "\n", "config", ".", "addinivalue_line", "(", "\"markers\"", ",", "\"gpu: mark test as gpu required to run\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.jiant.conftest.pytest_collection_modifyitems": [[18, 29], ["config.getoption", "pytest.mark.skip", "config.getoption", "pytest.mark.skip", "item.add_marker", "item.add_marker"], "function", ["None"], ["", "def", "pytest_collection_modifyitems", "(", "config", ",", "items", ")", ":", "\n", "    ", "if", "not", "config", ".", "getoption", "(", "\"--runslow\"", ")", ":", "\n", "        ", "skip_slow", "=", "pytest", ".", "mark", ".", "skip", "(", "reason", "=", "\"need --runslow option to run\"", ")", "\n", "for", "item", "in", "items", ":", "\n", "            ", "if", "\"slow\"", "in", "item", ".", "keywords", ":", "\n", "                ", "item", ".", "add_marker", "(", "skip_slow", ")", "\n", "", "", "", "if", "not", "config", ".", "getoption", "(", "\"--rungpu\"", ")", ":", "\n", "        ", "skip_gpu", "=", "pytest", ".", "mark", ".", "skip", "(", "reason", "=", "\"need --rungpu option to run\"", ")", "\n", "for", "item", "in", "items", ":", "\n", "            ", "if", "\"gpu\"", "in", "item", ".", "keywords", ":", "\n", "                ", "item", ".", "add_marker", "(", "skip_gpu", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.data_handlers.md5_checksum": [[6, 23], ["hashlib.md5", "hashlib.md5.hexdigest", "open", "iter", "hashlib.md5.update", "f.read"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.task_sampler.BaseMultiTaskSampler.iter", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.ConcatenateLossAccumulator.update"], ["def", "md5_checksum", "(", "filepath", ":", "str", ")", "->", "str", ":", "\n", "    ", "\"\"\"Calculate MD5 checksum hash for a given file.\n\n    Code from example: https://stackoverflow.com/a/3431838/8734015.\n\n    Args:\n        filepath: file to calculate MD5 checksum.\n\n    Returns:\n        MD5 hash string.\n\n    \"\"\"", "\n", "hash_md5", "=", "hashlib", ".", "md5", "(", ")", "\n", "with", "open", "(", "filepath", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "for", "chunk", "in", "iter", "(", "lambda", ":", "f", ".", "read", "(", "4096", ")", ",", "b\"\"", ")", ":", "\n", "            ", "hash_md5", ".", "update", "(", "chunk", ")", "\n", "", "", "return", "hash_md5", ".", "hexdigest", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.display.tqdm": [[5, 7], ["tqdm.auto.tqdm"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.display.tqdm"], ["def", "tqdm", "(", "iterable", "=", "None", ",", "desc", "=", "None", ",", "total", "=", "None", ",", "initial", "=", "0", ")", ":", "\n", "    ", "return", "tqdm_lib", ".", "tqdm", "(", "iterable", "=", "iterable", ",", "desc", "=", "desc", ",", "total", "=", "total", ",", "initial", "=", "initial", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.display.trange": [[9, 11], ["display.tqdm", "range"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.display.tqdm"], ["", "def", "trange", "(", "*", "args", ",", "desc", "=", "None", ",", "total", "=", "None", ")", ":", "\n", "    ", "return", "tqdm", "(", "range", "(", "*", "args", ")", ",", "desc", "=", "desc", ",", "total", "=", "total", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.display.maybe_tqdm": [[13, 18], ["display.tqdm"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.display.tqdm"], ["", "def", "maybe_tqdm", "(", "iterable", "=", "None", ",", "desc", "=", "None", ",", "total", "=", "None", ",", "initial", "=", "0", ",", "verbose", "=", "True", ")", ":", "\n", "    ", "if", "verbose", ":", "\n", "        ", "return", "tqdm", "(", "iterable", "=", "iterable", ",", "desc", "=", "desc", ",", "total", "=", "total", ",", "initial", "=", "initial", ")", "\n", "", "else", ":", "\n", "        ", "return", "iterable", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.display.maybe_trange": [[20, 22], ["display.maybe_tqdm", "range"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.display.maybe_tqdm"], ["", "", "def", "maybe_trange", "(", "*", "args", ",", "verbose", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "maybe_tqdm", "(", "range", "(", "*", "args", ")", ",", "verbose", "=", "verbose", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.display.show_json": [[24, 30], ["json.dumps", "print"], "function", ["None"], ["", "def", "show_json", "(", "obj", ",", "do_print", "=", "True", ")", ":", "\n", "    ", "string", "=", "json", ".", "dumps", "(", "obj", ",", "indent", "=", "2", ")", "\n", "if", "do_print", ":", "\n", "        ", "print", "(", "string", ")", "\n", "", "else", ":", "\n", "        ", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.display.is_notebook": [[32, 44], ["get_ipython"], "function", ["None"], ["", "", "def", "is_notebook", "(", ")", ":", "\n", "    ", "try", ":", "\n", "# noinspection PyUnresolvedReferences", "\n", "        ", "shell", "=", "get_ipython", "(", ")", ".", "__class__", ".", "__name__", "\n", "if", "shell", "==", "\"ZMQInteractiveShell\"", ":", "\n", "            ", "return", "True", "# Jupyter notebook or qtconsole", "\n", "", "elif", "shell", "==", "\"TerminalInteractiveShell\"", ":", "\n", "            ", "return", "False", "# Terminal running IPython", "\n", "", "else", ":", "\n", "            ", "return", "False", "# Other type (?)", "\n", "", "", "except", "NameError", ":", "\n", "        ", "return", "False", "# Probably standard Python interpreter", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.transformer_utils.output_hidden_states_context": [[5, 21], ["isinstance", "hasattr"], "function", ["None"], ["@", "contextlib", ".", "contextmanager", "\n", "def", "output_hidden_states_context", "(", "encoder", ")", ":", "\n", "    ", "assert", "isinstance", "(", "\n", "encoder", ",", "\n", "(", "\n", "transformers", ".", "BertModel", ",", "\n", "transformers", ".", "RobertaModel", ",", "\n", "transformers", ".", "AlbertModel", ",", "\n", "transformers", ".", "XLMRobertaModel", ",", "\n", ")", ",", "\n", ")", "\n", "assert", "hasattr", "(", "encoder", ".", "encoder", ",", "\"output_hidden_states\"", ")", "\n", "old_value", "=", "encoder", ".", "encoder", ".", "output_hidden_states", "\n", "encoder", ".", "encoder", ".", "output_hidden_states", "=", "True", "\n", "yield", "\n", "encoder", ".", "encoder", ".", "output_hidden_states", "=", "old_value", "\n", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog.BaseZLogger.log_context": [[13, 15], ["NotImplementedError"], "methods", ["None"], ["    ", "def", "log_context", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog.BaseZLogger.write_entry": [[16, 18], ["NotImplementedError"], "methods", ["None"], ["", "def", "write_entry", "(", "self", ",", "key", ",", "entry", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog.BaseZLogger.write_obj": [[19, 21], ["NotImplementedError"], "methods", ["None"], ["", "def", "write_obj", "(", "self", ",", "key", ",", "obj", ",", "entry", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog.BaseZLogger.flush": [[22, 24], ["NotImplementedError"], "methods", ["None"], ["", "def", "flush", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog.ZLogger.__init__": [[27, 35], ["os.makedirs"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "fol_path", ",", "log_errors", "=", "True", ",", "overwrite", "=", "False", ")", ":", "\n", "        ", "self", ".", "fol_path", "=", "fol_path", "\n", "self", ".", "log_errors", "=", "log_errors", "\n", "self", ".", "overwrite", "=", "overwrite", "\n", "\n", "self", ".", "write_mode", "=", "\"w\"", "if", "overwrite", "else", "\"a\"", "\n", "os", ".", "makedirs", "(", "fol_path", ")", "\n", "self", ".", "handles", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog.ZLogger.log_context": [[36, 47], ["zlog.ZLogger.handles.values", "f.close", "zlog.ZLogger.write_entry", "traceback.format_exc"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog.InMemoryZLogger.write_entry"], ["", "@", "contextmanager", "\n", "def", "log_context", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "yield", "self", "\n", "", "except", "Exception", ":", "\n", "            ", "if", "self", ".", "log_errors", ":", "\n", "                ", "self", ".", "write_entry", "(", "\"errors\"", ",", "traceback", ".", "format_exc", "(", ")", ")", "\n", "", "raise", "\n", "", "finally", ":", "\n", "            ", "for", "f", "in", "self", ".", "handles", ".", "values", "(", ")", ":", "\n", "                ", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog.ZLogger.write_entry": [[48, 57], ["isinstance", "time.time", "zlog.ZLogger._write_entry_to_file", "entry.copy.copy.copy", "print"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog.ZBufferedLogger._write_entry_to_file", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.RunConfig.copy"], ["", "", "", "def", "write_entry", "(", "self", ",", "key", ",", "entry", ",", "do_print", "=", "False", ")", ":", "\n", "        ", "if", "isinstance", "(", "entry", ",", "dict", ")", ":", "\n", "            ", "entry", "=", "entry", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "            ", "entry", "=", "{", "\"data\"", ":", "entry", "}", "\n", "", "entry", "[", "\"TIMESTAMP\"", "]", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "_write_entry_to_file", "(", "key", "=", "key", ",", "entry", "=", "entry", ")", "\n", "if", "do_print", ":", "\n", "            ", "print", "(", "entry", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog.ZLogger.write_obj": [[58, 68], ["isinstance", "time.time", "zlog.ZLogger._save_obj", "zlog.ZLogger._write_entry_to_file", "entry.copy.copy.copy"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog.ZLogger._save_obj", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog.ZBufferedLogger._write_entry_to_file", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.RunConfig.copy"], ["", "", "def", "write_obj", "(", "self", ",", "key", ",", "obj", ",", "entry", ")", ":", "\n", "        ", "assert", "\"DATA\"", "not", "in", "entry", "\n", "if", "isinstance", "(", "entry", ",", "dict", ")", ":", "\n", "            ", "entry", "=", "entry", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "            ", "entry", "=", "{", "\"data\"", ":", "entry", "}", "\n", "", "time_stamp", "=", "time", ".", "time", "(", ")", "\n", "entry", "[", "\"DATA\"", "]", "=", "self", ".", "_save_obj", "(", "key", ",", "time_stamp", ",", "obj", ")", "\n", "entry", "[", "\"TIMESTAMP\"", "]", "=", "time_stamp", "\n", "self", ".", "_write_entry_to_file", "(", "key", "=", "key", ",", "entry", "=", "entry", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog.ZLogger._save_obj": [[69, 75], ["zlog.ZLogger.get_cache_path", "os.makedirs", "os.path.join", "torch.save", "str"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog.ZLogger.get_cache_path", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.CheckpointSaver.save"], ["", "def", "_save_obj", "(", "self", ",", "key", ",", "time_stamp", ",", "obj", ")", ":", "\n", "        ", "cache_path", "=", "self", ".", "get_cache_path", "(", "key", ")", "\n", "os", ".", "makedirs", "(", "cache_path", ",", "exist_ok", "=", "True", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "cache_path", ",", "str", "(", "time_stamp", ")", ")", "\n", "torch", ".", "save", "(", "obj", ",", "save_path", ")", "\n", "return", "save_path", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog.ZLogger.check_handle_open": [[76, 82], ["zlog.ZLogger.get_path", "jiant.create_containing_folder", "jiant.create_containing_folder", "open"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog.ZLogger.get_path", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.create_containing_folder", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.create_containing_folder"], ["", "def", "check_handle_open", "(", "self", ",", "key", ")", ":", "\n", "        ", "if", "key", "in", "self", ".", "handles", ":", "\n", "            ", "return", "\n", "", "handle_path", "=", "self", ".", "get_path", "(", "key", ")", "\n", "py_io", ".", "create_containing_folder", "(", "handle_path", ")", "\n", "self", ".", "handles", "[", "key", "]", "=", "open", "(", "handle_path", ",", "self", ".", "write_mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog.ZLogger.get_path": [[83, 85], ["os.path.join"], "methods", ["None"], ["", "def", "get_path", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "fol_path", ",", "key", "+", "\".zlog\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog.ZLogger.get_cache_path": [[86, 88], ["os.path.join"], "methods", ["None"], ["", "def", "get_cache_path", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "fol_path", ",", "key", "+", "\"___CACHE\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog.ZLogger.flush": [[89, 98], ["zlog.ZLogger.handles.values", "isinstance", "f.flush", "zlog.ZLogger.handles[].flush", "zlog.ZLogger.handles[].flush"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog.InMemoryZLogger.flush", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog.InMemoryZLogger.flush", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog.InMemoryZLogger.flush"], ["", "def", "flush", "(", "self", ",", "key", "=", "None", ")", ":", "\n", "        ", "if", "key", "is", "None", ":", "\n", "            ", "for", "f", "in", "self", ".", "handles", ".", "values", "(", ")", ":", "\n", "                ", "f", ".", "flush", "(", ")", "\n", "", "", "elif", "isinstance", "(", "key", ",", "list", ")", ":", "\n", "            ", "for", "k", "in", "key", ":", "\n", "                ", "self", ".", "handles", "[", "k", "]", ".", "flush", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "handles", "[", "key", "]", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog.ZLogger._write_entry_to_file": [[99, 102], ["zlog.ZLogger.check_handle_open", "zlog.ZLogger.handles[].write", "jiant.to_jsonl", "jiant.to_jsonl"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog.ZBufferedLogger.check_handle_open", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.to_jsonl", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.to_jsonl"], ["", "", "def", "_write_entry_to_file", "(", "self", ",", "key", ",", "entry", ")", ":", "\n", "        ", "self", ".", "check_handle_open", "(", "key", ")", "\n", "self", ".", "handles", "[", "key", "]", ".", "write", "(", "py_io", ".", "to_jsonl", "(", "entry", ")", "+", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog.ZBufferedLogger.__init__": [[105, 117], ["zlog.ZLogger.__init__", "buffer_size_dict.copy"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.radam.AdamW.__init__", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.RunConfig.copy"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "fol_path", ",", "\n", "default_buffer_size", "=", "1", ",", "\n", "buffer_size_dict", "=", "None", ",", "\n", "log_errors", "=", "True", ",", "\n", "overwrite", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "fol_path", "=", "fol_path", ",", "log_errors", "=", "log_errors", ",", "overwrite", "=", "overwrite", ")", "\n", "self", ".", "default_buffer_size", "=", "default_buffer_size", "\n", "self", ".", "buffer_size_dict", "=", "buffer_size_dict", ".", "copy", "(", ")", "if", "buffer_size_dict", "else", "{", "}", "\n", "self", ".", "buffer_dict", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog.ZBufferedLogger.check_handle_open": [[118, 124], ["zlog.ZLogger.check_handle_open"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog.ZBufferedLogger.check_handle_open"], ["", "def", "check_handle_open", "(", "self", ",", "key", ")", ":", "\n", "        ", "super", "(", ")", ".", "check_handle_open", "(", "key", "=", "key", ")", "\n", "if", "key", "not", "in", "self", ".", "buffer_dict", ":", "\n", "            ", "self", ".", "buffer_dict", "[", "key", "]", "=", "[", "]", "\n", "if", "key", "not", "in", "self", ".", "buffer_size_dict", ":", "\n", "                ", "self", ".", "buffer_size_dict", "[", "key", "]", "=", "self", ".", "default_buffer_size", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog.ZBufferedLogger._write_entry_to_file": [[125, 130], ["zlog.ZBufferedLogger.check_handle_open", "zlog.ZBufferedLogger.buffer_dict[].append", "len", "zlog.ZBufferedLogger.flush"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog.ZBufferedLogger.check_handle_open", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog.InMemoryZLogger.flush"], ["", "", "", "def", "_write_entry_to_file", "(", "self", ",", "key", ",", "entry", ")", ":", "\n", "        ", "self", ".", "check_handle_open", "(", "key", ")", "\n", "self", ".", "buffer_dict", "[", "key", "]", ".", "append", "(", "entry", ")", "\n", "if", "len", "(", "self", ".", "buffer_dict", "[", "key", "]", ")", ">=", "self", ".", "buffer_size_dict", "[", "key", "]", ":", "\n", "            ", "self", ".", "flush", "(", "key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog.ZBufferedLogger._write_buffer": [[131, 138], ["zlog.ZBufferedLogger.handles[].write", "jiant.to_jsonl", "jiant.to_jsonl"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.to_jsonl", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.to_jsonl"], ["", "", "def", "_write_buffer", "(", "self", ",", "key", ")", ":", "\n", "        ", "if", "not", "self", ".", "buffer_dict", "[", "key", "]", ":", "\n", "            ", "return", "\n", "", "self", ".", "handles", "[", "key", "]", ".", "write", "(", "\n", "\"\"", ".", "join", "(", "py_io", ".", "to_jsonl", "(", "entry", ")", "+", "\"\\n\"", "for", "entry", "in", "self", ".", "buffer_dict", "[", "key", "]", ")", "\n", ")", "\n", "self", ".", "buffer_dict", "[", "key", "]", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog.ZBufferedLogger.flush": [[139, 151], ["zlog.ZBufferedLogger.handles.items", "isinstance", "zlog.ZBufferedLogger._write_buffer", "f.flush", "zlog.ZBufferedLogger._write_buffer", "zlog.ZBufferedLogger.handles[].flush", "zlog.ZBufferedLogger._write_buffer", "zlog.ZBufferedLogger.handles[].flush"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog.ZBufferedLogger._write_buffer", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog.InMemoryZLogger.flush", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog.ZBufferedLogger._write_buffer", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog.InMemoryZLogger.flush", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog.ZBufferedLogger._write_buffer", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog.InMemoryZLogger.flush"], ["", "def", "flush", "(", "self", ",", "key", "=", "None", ")", ":", "\n", "        ", "if", "key", "is", "None", ":", "\n", "            ", "for", "k", ",", "f", "in", "self", ".", "handles", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "_write_buffer", "(", "k", ")", "\n", "f", ".", "flush", "(", ")", "\n", "", "", "elif", "isinstance", "(", "key", ",", "list", ")", ":", "\n", "            ", "for", "k", "in", "key", ":", "\n", "                ", "self", ".", "_write_buffer", "(", "k", ")", "\n", "self", ".", "handles", "[", "k", "]", ".", "flush", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "_write_buffer", "(", "key", ")", "\n", "self", ".", "handles", "[", "key", "]", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog._VoidZLogger.log_context": [[154, 156], ["None"], "methods", ["None"], ["    ", "def", "log_context", "(", "self", ")", ":", "\n", "        ", "yield", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog._VoidZLogger.write_entry": [[157, 159], ["None"], "methods", ["None"], ["", "def", "write_entry", "(", "self", ",", "key", ",", "entry", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog._VoidZLogger.write_obj": [[160, 162], ["None"], "methods", ["None"], ["", "def", "write_obj", "(", "self", ",", "key", ",", "obj", ",", "entry", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog._VoidZLogger.flush": [[163, 165], ["None"], "methods", ["None"], ["", "def", "flush", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog._PrintZLogger.log_context": [[168, 170], ["None"], "methods", ["None"], ["    ", "def", "log_context", "(", "self", ")", ":", "\n", "        ", "yield", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog._PrintZLogger.write_entry": [[171, 173], ["print"], "methods", ["None"], ["", "def", "write_entry", "(", "self", ",", "key", ",", "entry", ")", ":", "\n", "        ", "print", "(", "f\"{key}: {entry}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog._PrintZLogger.write_obj": [[174, 176], ["print"], "methods", ["None"], ["", "def", "write_obj", "(", "self", ",", "key", ",", "obj", ",", "entry", ")", ":", "\n", "        ", "print", "(", "f\"{key}: {obj}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog._PrintZLogger.flush": [[177, 179], ["None"], "methods", ["None"], ["", "def", "flush", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog.InMemoryZLogger.__init__": [[182, 185], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "entries", "=", "{", "}", "\n", "self", ".", "data", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog.InMemoryZLogger.log_context": [[186, 188], ["None"], "methods", ["None"], ["", "def", "log_context", "(", "self", ")", ":", "\n", "        ", "yield", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog.InMemoryZLogger.write_entry": [[189, 196], ["isinstance", "time.time", "zlog.InMemoryZLogger._write_entry", "entry.copy.copy.copy"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog.InMemoryZLogger._write_entry", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.RunConfig.copy"], ["", "def", "write_entry", "(", "self", ",", "key", ",", "entry", ")", ":", "\n", "        ", "if", "isinstance", "(", "entry", ",", "dict", ")", ":", "\n", "            ", "entry", "=", "entry", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "            ", "entry", "=", "{", "\"data\"", ":", "entry", "}", "\n", "", "entry", "[", "\"TIMESTAMP\"", "]", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "_write_entry", "(", "key", "=", "key", ",", "entry", "=", "entry", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog.InMemoryZLogger.write_obj": [[197, 207], ["isinstance", "time.time", "zlog.InMemoryZLogger._write_entry", "entry.copy.copy.copy"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog.InMemoryZLogger._write_entry", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.RunConfig.copy"], ["", "def", "write_obj", "(", "self", ",", "key", ",", "obj", ",", "entry", ")", ":", "\n", "        ", "assert", "\"DATA\"", "not", "in", "entry", "\n", "if", "isinstance", "(", "entry", ",", "dict", ")", ":", "\n", "            ", "entry", "=", "entry", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "            ", "entry", "=", "{", "\"data\"", ":", "entry", "}", "\n", "", "time_stamp", "=", "time", ".", "time", "(", ")", "\n", "entry", "[", "\"DATA\"", "]", "=", "obj", "\n", "entry", "[", "\"TIMESTAMP\"", "]", "=", "time_stamp", "\n", "self", ".", "_write_entry", "(", "key", "=", "key", ",", "entry", "=", "entry", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog.InMemoryZLogger._write_entry": [[208, 212], ["zlog.InMemoryZLogger.entries[].append"], "methods", ["None"], ["", "def", "_write_entry", "(", "self", ",", "key", ",", "entry", ")", ":", "\n", "        ", "if", "key", "not", "in", "self", ".", "entries", ":", "\n", "            ", "self", ".", "entries", "[", "key", "]", "=", "[", "]", "\n", "", "self", ".", "entries", "[", "key", "]", ".", "append", "(", "entry", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog.InMemoryZLogger.flush": [[213, 215], ["None"], "methods", ["None"], ["", "def", "flush", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog.load_log": [[221, 228], ["jiant.find_files_with_ext", "[].replace", "jiant.read_jsonl", "os.path.abspath().replace", "os.path.abspath", "os.path.abspath"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.filesystem.find_files_with_ext", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_jsonl"], ["def", "load_log", "(", "fol_path", ")", ":", "\n", "    ", "all_paths", "=", "filesystem", ".", "find_files_with_ext", "(", "fol_path", ",", "\"zlog\"", ")", "\n", "log_data", "=", "{", "}", "\n", "for", "path", "in", "all_paths", ":", "\n", "        ", "key", "=", "os", ".", "path", ".", "abspath", "(", "path", ")", ".", "replace", "(", "os", ".", "path", ".", "abspath", "(", "fol_path", ")", ",", "\"\"", ")", "[", "1", ":", "]", ".", "replace", "(", "\".zlog\"", ",", "\"\"", ")", "\n", "log_data", "[", "key", "]", "=", "py_io", ".", "read_jsonl", "(", "path", ")", "\n", "", "return", "log_data", "\n", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.config_handlers.json_merge_patch": [[9, 29], ["_jsonnet.evaluate_snippet"], "function", ["None"], ["def", "json_merge_patch", "(", "target_json", ":", "str", ",", "patch_json", ":", "str", ")", "->", "str", ":", "\n", "    ", "\"\"\"Merge json objects according to JSON merge patch spec: https://tools.ietf.org/html/rfc7396.\n\n    Takes a target json string, and a patch json string and applies the patch json to the target\n    json according to \"JSON Merge Patch\" (defined by https://tools.ietf.org/html/rfc7396).\n\n    Args:\n        target_json: the json to be overwritten by the patch json.\n        patch_json: the json used to overwrite the target json.\n\n    Returns:\n        json str after applying the patch json to the target json using \"JSON Merge Patch\" method.\n\n    \"\"\"", "\n", "merged", ":", "str", "=", "\"\"\"local target = {target_json};\n                     local patch = {patch_json};\n                     std.mergePatch(target, patch)\"\"\"", ".", "format", "(", "\n", "target_json", "=", "target_json", ",", "patch_json", "=", "patch_json", "\n", ")", "\n", "return", "_jsonnet", ".", "evaluate_snippet", "(", "\"snippet\"", ",", "merged", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.config_handlers.merge_jsons_in_order": [[31, 53], ["jsons.pop", "json.loads", "json.loads", "config_handlers.json_merge_patch"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.task_sampler.TimeDependentProbMultiTaskSampler.pop", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.config_handlers.json_merge_patch"], ["", "def", "merge_jsons_in_order", "(", "jsons", ":", "List", "[", "str", "]", ")", "->", "str", ":", "\n", "    ", "\"\"\"Applies JSON Merge Patch process to a list of json documents in order.\n\n    Takes a list of json document strings and performs \"JSON Merge Patch\" (see json_merge_patch).\n    The first element in the list of json docs is treated as the base, subsequent docs (if any)\n    are applied as patches in order from first to last.\n\n    Args:\n        jsons: list of json docs to merge into a composite json document.\n\n    Returns:\n        The composite json document string.\n\n    \"\"\"", "\n", "base_json", "=", "jsons", ".", "pop", "(", "0", ")", "\n", "# json.loads is called to check that input strings are valid json.", "\n", "json", ".", "loads", "(", "base_json", ")", "\n", "composite_json", "=", "base_json", "\n", "for", "json_str", "in", "jsons", ":", "\n", "        ", "json", ".", "loads", "(", "json_str", ")", "\n", "composite_json", "=", "json_merge_patch", "(", "composite_json", ",", "json_str", ")", "\n", "", "return", "composite_json", "\n", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.torch_utils.IdentityModule.forward": [[59, 64], ["len"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "*", "inputs", ")", ":", "\n", "        ", "if", "len", "(", "inputs", ")", "==", "1", ":", "\n", "            ", "return", "inputs", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.torch_utils.ListDataset.__init__": [[87, 89], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data", ":", "list", ")", ":", "\n", "        ", "self", ".", "data", "=", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.torch_utils.ListDataset.__len__": [[90, 92], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.torch_utils.ListDataset.__getitem__": [[93, 95], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "return", "self", ".", "data", "[", "item", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.torch_utils.DataLoaderWithLength.__len__": [[98, 109], ["torch_utils.DataLoaderWithLength.get_num_batches"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.torch_utils.DataLoaderWithLength.get_num_batches"], ["    ", "def", "__len__", "(", "self", ")", ":", "\n", "# TODO: Revert after https://github.com/pytorch/pytorch/issues/36176 addressed  (Issue #55)", "\n", "# try:", "\n", "#     return super().__len__()", "\n", "# except TypeError as e:", "\n", "#     try:", "\n", "#         return self.get_num_batches()", "\n", "#     except TypeError:", "\n", "#         pass", "\n", "#     raise e", "\n", "        ", "return", "self", ".", "get_num_batches", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.torch_utils.DataLoaderWithLength.get_num_batches": [[110, 112], ["math.ceil", "len"], "methods", ["None"], ["", "def", "get_num_batches", "(", "self", ")", ":", "\n", "        ", "return", "math", ".", "ceil", "(", "len", "(", "self", ".", "dataset", ")", "/", "self", ".", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.torch_utils.MatchedRandomBatchSampler.__init__": [[128, 140], ["len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "min_batch_size", ",", "\n", "max_batch_size", ",", "\n", "drop_last", ",", "\n", "match_list", ",", "\n", "total_batches", ")", ":", "\n", "        ", "self", ".", "min_batch_size", "=", "min_batch_size", "\n", "self", ".", "max_batch_size", "=", "max_batch_size", "\n", "self", ".", "drop_last", "=", "drop_last", "\n", "self", ".", "match_list", "=", "match_list", "\n", "self", ".", "n_clusters", "=", "len", "(", "match_list", ")", "\n", "self", ".", "total_batches", "=", "total_batches", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.torch_utils.MatchedRandomBatchSampler.__iter__": [[141, 157], ["torch.randint().item", "torch.randint().item", "torch.randint().item", "torch.randint().item", "torch.randint().item", "torch.randint().item", "torch.randint().item", "torch.randint().item", "torch.randint().item", "len", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "len", "len", "len", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "batch", "=", "[", "]", "\n", "yielded", "=", "0", "\n", "while", "yielded", "<", "self", ".", "total_batches", ":", "\n", "            ", "sampled_cluster", "=", "torch", ".", "randint", "(", "len", "(", "self", ".", "match_list", ")", ",", "(", "1", ",", ")", ")", ".", "item", "(", ")", "\n", "if", "len", "(", "batch", ")", "+", "len", "(", "self", ".", "match_list", "[", "sampled_cluster", "]", ")", ">", "self", ".", "max_batch_size", ":", "\n", "                ", "if", "len", "(", "batch", ")", "<", "self", ".", "min_batch_size", ":", "\n", "                    ", "continue", "\n", "", "else", ":", "\n", "                    ", "yielded", "+=", "1", "\n", "yield", "batch", "\n", "batch", "=", "self", ".", "match_list", "[", "sampled_cluster", "]", "\n", "", "", "else", ":", "\n", "                ", "batch", "+=", "self", ".", "match_list", "[", "sampled_cluster", "]", "\n", "", "", "if", "len", "(", "batch", ")", ">", "0", "and", "not", "self", ".", "drop_last", ":", "\n", "            ", "yield", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.torch_utils.MatchedRandomBatchSampler.__len__": [[158, 160], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total_batches", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.torch_utils.normalize_embedding_tensor": [[14, 16], ["torch.normalize"], "function", ["None"], ["def", "normalize_embedding_tensor", "(", "embedding", ")", ":", "\n", "    ", "return", "F", ".", "normalize", "(", "embedding", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.torch_utils.embedding_norm_loss": [[18, 21], ["raw_embedding.norm", "torch.mse_loss", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "function", ["None"], ["", "def", "embedding_norm_loss", "(", "raw_embedding", ")", ":", "\n", "    ", "norms", "=", "raw_embedding", ".", "norm", "(", "dim", "=", "1", ")", "\n", "return", "F", ".", "mse_loss", "(", "norms", ",", "torch", ".", "ones_like", "(", "norms", ")", ",", "reduction", "=", "\"none\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.torch_utils.get_val": [[23, 28], ["isinstance", "x.item"], "function", ["None"], ["", "def", "get_val", "(", "x", ")", ":", "\n", "    ", "if", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "x", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.torch_utils.compute_pred_entropy": [[30, 35], ["torch.softmax", "torch.log_softmax"], "function", ["None"], ["", "", "def", "compute_pred_entropy", "(", "logits", ")", ":", "\n", "# logits are pre softmax", "\n", "    ", "p", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "\n", "log_p", "=", "F", ".", "log_softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "\n", "return", "-", "(", "p", "*", "log_p", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.torch_utils.compute_pred_entropy_clean": [[37, 39], ["float", "compute_pred_entropy().item", "torch_utils.compute_pred_entropy"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.torch_utils.compute_pred_entropy"], ["", "def", "compute_pred_entropy_clean", "(", "logits", ")", ":", "\n", "    ", "return", "float", "(", "compute_pred_entropy", "(", "logits", ")", ".", "item", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.torch_utils.copy_state_dict": [[41, 47], ["copy.deepcopy", "v.to", "copy.deepcopy.items"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.core.BatchTuple.to"], ["", "def", "copy_state_dict", "(", "state_dict", ",", "target_device", "=", "None", ")", ":", "\n", "    ", "copied_state_dict", "=", "copy", ".", "deepcopy", "(", "state_dict", ")", "\n", "if", "target_device", "is", "None", ":", "\n", "        ", "return", "copied_state_dict", "\n", "", "else", ":", "\n", "        ", "return", "{", "k", ":", "v", ".", "to", "(", "target_device", ")", "for", "k", ",", "v", "in", "copied_state_dict", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.torch_utils.get_parent_child_module_list": [[49, 55], ["model.named_modules", "parent_module.named_children", "ls.append"], "function", ["None"], ["", "", "def", "get_parent_child_module_list", "(", "model", ")", ":", "\n", "    ", "ls", "=", "[", "]", "\n", "for", "parent_name", ",", "parent_module", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "for", "child_name", ",", "child_module", "in", "parent_module", ".", "named_children", "(", ")", ":", "\n", "            ", "ls", ".", "append", "(", "(", "parent_name", ",", "parent_module", ",", "child_name", ",", "child_module", ")", ")", "\n", "", "", "return", "ls", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.torch_utils.set_requires_grad": [[66, 69], ["None"], "function", ["None"], ["", "", "", "def", "set_requires_grad", "(", "named_parameters", ",", "requires_grad", ")", ":", "\n", "    ", "for", "name", ",", "param", "in", "named_parameters", ":", "\n", "        ", "param", ".", "requires_grad", "=", "requires_grad", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.torch_utils.get_only_requires_grad": [[71, 84], ["isinstance", "isinstance", "isinstance", "RuntimeError"], "function", ["None"], ["", "", "def", "get_only_requires_grad", "(", "parameters", ",", "requires_grad", "=", "True", ")", ":", "\n", "    ", "if", "isinstance", "(", "parameters", ",", "list", ")", ":", "\n", "        ", "if", "not", "parameters", ":", "\n", "            ", "return", "[", "]", "\n", "", "elif", "isinstance", "(", "parameters", "[", "0", "]", ",", "tuple", ")", ":", "\n", "            ", "return", "[", "(", "n", ",", "p", ")", "for", "n", ",", "p", "in", "parameters", "if", "p", ".", "requires_grad", "==", "requires_grad", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "p", "for", "p", "in", "parameters", "if", "p", ".", "requires_grad", "==", "requires_grad", "]", "\n", "", "", "elif", "isinstance", "(", "parameters", ",", "dict", ")", ":", "\n", "        ", "return", "{", "n", ":", "p", "for", "n", ",", "p", "in", "parameters", "if", "p", ".", "requires_grad", "==", "requires_grad", "}", "\n", "", "else", ":", "\n", "# TODO: Support generators  (Issue #56)", "\n", "        ", "raise", "RuntimeError", "(", "\"generators not yet supported\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.torch_utils.is_data_parallel": [[161, 163], ["isinstance"], "function", ["None"], ["", "", "def", "is_data_parallel", "(", "torch_module", ")", ":", "\n", "    ", "return", "isinstance", "(", "torch_module", ",", "nn", ".", "DataParallel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.torch_utils.safe_save": [[165, 172], ["torch.save", "torch.save", "torch.save", "os.path.exists", "os.rename", "os.remove"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.CheckpointSaver.save", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.CheckpointSaver.save", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.CheckpointSaver.save"], ["", "def", "safe_save", "(", "obj", ",", "path", ",", "temp_path", "=", "None", ")", ":", "\n", "    ", "if", "temp_path", "is", "None", ":", "\n", "        ", "temp_path", "=", "path", "+", "\"._temp\"", "\n", "", "torch", ".", "save", "(", "obj", ",", "temp_path", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "remove", "(", "path", ")", "\n", "", "os", ".", "rename", "(", "temp_path", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.torch_utils.get_model_for_saving": [[174, 179], ["isinstance"], "function", ["None"], ["", "def", "get_model_for_saving", "(", "model", ":", "nn", ".", "Module", ")", "->", "nn", ".", "Module", ":", "\n", "    ", "if", "isinstance", "(", "model", ",", "nn", ".", "DataParallel", ")", ":", "\n", "        ", "return", "model", ".", "module", "\n", "", "else", ":", "\n", "        ", "return", "model", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.test_config_handlers.test_json_merge_patch": [[8, 46], ["jiant.utils.config_handlers.json_merge_patch", "json.dumps", "json.dumps", "json.loads", "json.loads"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.config_handlers.json_merge_patch"], ["def", "test_json_merge_patch", "(", ")", ":", "\n", "    ", "\"\"\"Tests that JSON Merge Patch works as expected (https://tools.ietf.org/html/rfc7396)\"\"\"", "\n", "target", "=", "\"\"\"\n    {\n        \"title\": \"Goodbye!\",\n        \"author\" : {\n            \"givenName\" : \"John\",\n            \"familyName\" : \"Doe\"\n        },\n        \"tags\":[ \"example\", \"sample\" ],\n        \"content\": \"This will be unchanged\"\n    }\n    \"\"\"", "\n", "patch", "=", "\"\"\"\n    {\n        \"title\": \"Hello!\",\n        \"phoneNumber\": \"+01-123-456-7890\",\n        \"author\": {\n            \"familyName\": null\n        },\n        \"tags\": [ \"example\" ]\n    }\n    \"\"\"", "\n", "merged", "=", "config_handlers", ".", "json_merge_patch", "(", "target", ",", "patch", ")", "\n", "expected", "=", "\"\"\"\n    {\n        \"title\": \"Hello!\",\n        \"author\" : {\n            \"givenName\" : \"John\"\n        },\n        \"tags\": [ \"example\" ],\n        \"content\": \"This will be unchanged\",\n        \"phoneNumber\": \"+01-123-456-7890\"\n    }\n    \"\"\"", "\n", "merged_sorted", ":", "str", "=", "json", ".", "dumps", "(", "json", ".", "loads", "(", "merged", ")", ",", "sort_keys", "=", "True", ")", "\n", "expected_sorted", ":", "str", "=", "json", ".", "dumps", "(", "json", ".", "loads", "(", "expected", ")", ",", "sort_keys", "=", "True", ")", "\n", "assert", "merged_sorted", "==", "expected_sorted", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.test_config_handlers.test_merging_multiple_json_configs": [[48, 63], ["jiant.utils.config_handlers.merge_jsons_in_order", "json.dumps", "json.dumps", "open", "f.read", "open", "f.read", "open", "f.read", "open", "f.read", "json.loads", "json.loads", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.dirname", "os.path.dirname", "os.path.dirname", "os.path.dirname"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.config_handlers.merge_jsons_in_order"], ["", "def", "test_merging_multiple_json_configs", "(", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "\"config/base_config.json\"", ")", ")", "as", "f", ":", "\n", "        ", "base_config", "=", "f", ".", "read", "(", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "\"./config/first_override_config.json\"", ")", ")", "as", "f", ":", "\n", "        ", "override_config_1", "=", "f", ".", "read", "(", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "\"./config/second_override_config.json\"", ")", ")", "as", "f", ":", "\n", "        ", "override_config_2", "=", "f", ".", "read", "(", ")", "\n", "", "merged_config", "=", "config_handlers", ".", "merge_jsons_in_order", "(", "\n", "[", "base_config", ",", "override_config_1", ",", "override_config_2", "]", "\n", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "\"./config/final_config.json\"", ")", ")", "as", "f", ":", "\n", "        ", "expected_config", "=", "f", ".", "read", "(", ")", "\n", "", "sorted_merged_config", "=", "json", ".", "dumps", "(", "json", ".", "loads", "(", "merged_config", ")", ",", "sort_keys", "=", "True", ")", "\n", "sorted_expected_config", "=", "json", ".", "dumps", "(", "json", ".", "loads", "(", "expected_config", ")", ",", "sort_keys", "=", "True", ")", "\n", "assert", "sorted_merged_config", "==", "sorted_expected_config", "\n", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.test_data_handlers.test_md5_checksum_matches_expected_checksum": [[7, 12], ["os.path.join", "jiant.utils.data_handlers.md5_checksum", "os.path.dirname"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.data_handlers.md5_checksum"], ["def", "test_md5_checksum_matches_expected_checksum", "(", ")", ":", "\n", "    ", "expected_md5_checksum", "=", "\"4d5e587120171bc1ba4d49e2aa862a12\"", "# calc'd w/ http://onlinemd5.com/", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "\"config/base_config.json\"", ")", "\n", "computed_md5_checksum", "=", "data_handlers", ".", "md5_checksum", "(", "filepath", ")", "\n", "assert", "expected_md5_checksum", "==", "computed_md5_checksum", "\n", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.RunConfig.run_cli": [[150, 154], ["argparse.ArgumentParser", "cls.run_from_parser"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.RunConfig.run_from_parser"], ["    ", "@", "classmethod", "\n", "def", "run_cli", "(", "cls", ",", "prog", "=", "None", ",", "description", "=", "None", ")", ":", "\n", "        ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "prog", "=", "prog", ",", "description", "=", "description", ")", "\n", "return", "cls", ".", "run_from_parser", "(", "parser", "=", "parser", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.RunConfig.run_from_parser": [[155, 163], ["core.update_parser", "core.read_parser", "isinstance"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.update_parser", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.read_parser"], ["", "@", "classmethod", "\n", "def", "run_from_parser", "(", "cls", ",", "parser", ")", ":", "\n", "        ", "update_parser", "(", "\n", "parser", "=", "parser", ",", "class_with_attributes", "=", "cls", ",", "\n", ")", "\n", "result", "=", "read_parser", "(", "parser", "=", "parser", ",", "class_with_attributes", "=", "cls", ")", "\n", "assert", "isinstance", "(", "result", ",", "cls", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.RunConfig.get_attr_dict": [[164, 168], ["None"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "get_attr_dict", "(", "cls", ")", ":", "\n", "# noinspection PyUnresolvedReferences", "\n", "        ", "return", "{", "attr_", ".", "name", ":", "attr_", "for", "attr_", "in", "cls", ".", "__attrs_attrs__", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.RunConfig.run_cli_json_prepend": [[169, 176], ["argparse.ArgumentParser", "cls.run_from_parser_json_prepend"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.RunConfig.run_from_parser_json_prepend"], ["", "@", "classmethod", "\n", "def", "run_cli_json_prepend", "(", "cls", ",", "cl_args", "=", "None", ",", "prog", "=", "None", ",", "description", "=", "None", ")", ":", "\n", "# Prototype", "\n", "# Assumptions: no positional?", "\n", "        ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "prog", "=", "prog", ",", "description", "=", "description", ")", "\n", "result", "=", "cls", ".", "run_from_parser_json_prepend", "(", "parser", "=", "parser", ",", "cl_args", "=", "cl_args", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.RunConfig.run_from_parser_json_prepend": [[177, 228], ["parser.add_argument", "parser.add_argument", "parser.parse_known_args", "core.update_parser", "core.read_parser", "isinstance", "jiant.utils.python.datastructures.combine_dicts", "cls.get_attr_dict", "jiant.utils.python.datastructures.combine_dicts.items", "jiant.utils.python.io.read_json", "cls._is_store_true_arg", "RuntimeError", "added_args.append", "added_args.append", "added_args.append", "str"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.update_parser", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.read_parser", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.combine_dicts", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.RunConfig.get_attr_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_json", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.RunConfig._is_store_true_arg"], ["", "@", "classmethod", "\n", "def", "run_from_parser_json_prepend", "(", "cls", ",", "parser", ",", "cl_args", ")", ":", "\n", "        ", "parser", ".", "add_argument", "(", "\"--ZZsrc\"", ",", "type", "=", "str", ",", "action", "=", "\"append\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--ZZoverrides\"", ",", "type", "=", "str", ",", "nargs", "=", "\"+\"", ")", "\n", "pre_args", ",", "_", "=", "parser", ".", "parse_known_args", "(", "cl_args", ")", "\n", "if", "cl_args", "is", "None", ":", "\n", "            ", "cl_args", "=", "sys", ".", "argv", "[", "1", ":", "]", "\n", "", "if", "pre_args", ".", "ZZsrc", "is", "not", "None", ":", "\n", "# Import configs from ZZsrc JSONs", "\n", "            ", "imported_dict_ls", "=", "[", "read_json", "(", "path", ")", "for", "path", "in", "pre_args", ".", "ZZsrc", "]", "\n", "combined_imported_dict", "=", "combine_dicts", "(", "imported_dict_ls", ",", "strict", "=", "True", ")", "\n", "\n", "# Record which args are going to be overridden", "\n", "\n", "if", "pre_args", ".", "ZZoverrides", "is", "not", "None", ":", "\n", "                ", "raw_overrides", "=", "pre_args", ".", "ZZoverrides", "\n", "overrides", "=", "[", "f\"--{k}\"", "for", "k", "in", "raw_overrides", "]", "\n", "", "else", ":", "\n", "                ", "raw_overrides", "=", "overrides", "=", "[", "]", "\n", "\n", "", "attr_dict", "=", "cls", ".", "get_attr_dict", "(", ")", "\n", "added_args", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "combined_imported_dict", ".", "items", "(", ")", ":", "\n", "                ", "formatted_k", "=", "f\"--{k}\"", "\n", "# Ensure that args from imported, which are not specified to be overridden,", "\n", "#   aren't explicitly specified", "\n", "if", "formatted_k", "in", "cl_args", "and", "formatted_k", "not", "in", "overrides", ":", "\n", "                    ", "raise", "RuntimeError", "(", "f\"Attempting to override {formatted_k}\"", ")", "\n", "\n", "# Special handling for store_true args", "\n", "", "if", "cls", ".", "_is_store_true_arg", "(", "attr_dict", "[", "k", "]", ")", ":", "\n", "                    ", "if", "v", "and", "k", "not", "in", "raw_overrides", ":", "\n", "                        ", "added_args", ".", "append", "(", "formatted_k", ")", "\n", "", "", "else", ":", "\n", "                    ", "added_args", ".", "append", "(", "formatted_k", ")", "\n", "added_args", ".", "append", "(", "str", "(", "v", ")", ")", "\n", "", "", "submitted_args", "=", "added_args", "+", "cl_args", "\n", "", "else", ":", "\n", "            ", "assert", "pre_args", ".", "ZZoverrides", "is", "None", "\n", "submitted_args", "=", "cl_args", "\n", "", "update_parser", "(", "\n", "parser", "=", "parser", ",", "class_with_attributes", "=", "cls", ",", "\n", ")", "\n", "result", ",", "_", "=", "read_parser", "(", "\n", "parser", "=", "parser", ",", "\n", "class_with_attributes", "=", "cls", ",", "\n", "skip_non_class_attributes", "=", "[", "\"ZZsrc\"", ",", "\"ZZoverrides\"", "]", ",", "\n", "args", "=", "submitted_args", ",", "\n", ")", "\n", "assert", "isinstance", "(", "result", ",", "cls", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.RunConfig.run_shlex_json_prepend": [[229, 232], ["cls.run_cli_json_prepend", "shlex.split", "string.strip"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.RunConfig.run_cli_json_prepend"], ["", "@", "classmethod", "\n", "def", "run_shlex_json_prepend", "(", "cls", ",", "string", ":", "str", ")", ":", "\n", "        ", "return", "cls", ".", "run_cli_json_prepend", "(", "cl_args", "=", "shlex", ".", "split", "(", "string", ".", "strip", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.RunConfig.default_run_cli": [[233, 236], ["cls.run_cli_json_prepend"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.RunConfig.run_cli_json_prepend"], ["", "@", "classmethod", "\n", "def", "default_run_cli", "(", "cls", ",", "cl_args", "=", "None", ",", "prog", "=", "None", ",", "description", "=", "None", ")", ":", "\n", "        ", "return", "cls", ".", "run_cli_json_prepend", "(", "cl_args", "=", "cl_args", ",", "prog", "=", "prog", ",", "description", "=", "description", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.RunConfig._is_store_true_arg": [[237, 244], ["None"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_is_store_true_arg", "(", "cls", ",", "attr_", ")", ":", "\n", "        ", "if", "\"argparse_kwargs\"", "not", "in", "attr_", ".", "metadata", ":", "\n", "            ", "return", "False", "\n", "", "if", "\"action\"", "not", "in", "attr_", ".", "metadata", "[", "\"argparse_kwargs\"", "]", ":", "\n", "            ", "return", "False", "\n", "", "return", "attr_", ".", "metadata", "[", "\"argparse_kwargs\"", "]", "[", "\"action\"", "]", "==", "\"store_true\"", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.RunConfig.from_dict": [[245, 249], ["cls"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_dict", "(", "cls", ",", "dictionary", ")", ":", "\n", "# noinspection PyArgumentList", "\n", "        ", "return", "cls", "(", "**", "dictionary", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.RunConfig.from_json": [[250, 253], ["cls.from_dict", "json.loads"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.ExtendedDataClassMixin.from_dict"], ["", "@", "classmethod", "\n", "def", "from_json", "(", "cls", ",", "json_string", ")", ":", "\n", "        ", "return", "cls", ".", "from_dict", "(", "json", ".", "loads", "(", "json_string", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.RunConfig.from_json_path": [[254, 258], ["open", "cls.from_json", "f.read"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.from_json"], ["", "@", "classmethod", "\n", "def", "from_json_path", "(", "cls", ",", "json_path", ")", ":", "\n", "        ", "with", "open", "(", "json_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "return", "cls", ".", "from_json", "(", "f", ".", "read", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.RunConfig.from_json_arg": [[259, 263], ["cls.from_json_path", "len"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.from_json_path"], ["", "", "@", "classmethod", "\n", "def", "from_json_arg", "(", "cls", ")", ":", "\n", "        ", "assert", "len", "(", "sys", ".", "argv", ")", "==", "2", "\n", "return", "cls", ".", "from_json_path", "(", "sys", ".", "argv", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.RunConfig.to_dict": [[264, 269], ["inspect.getfullargspec", "getattr"], "methods", ["None"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "config_dict", "=", "{", "}", "\n", "for", "attribute", "in", "inspect", ".", "getfullargspec", "(", "self", ".", "__class__", ")", ".", "kwonlyargs", ":", "\n", "            ", "config_dict", "[", "attribute", "]", "=", "getattr", "(", "self", ",", "attribute", ")", "\n", "", "return", "config_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.RunConfig.to_json": [[270, 276], ["core.RunConfig.to_dict", "core.RunConfig.items", "json.dumps", "isinstance", "str"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.ValState.to_dict"], ["", "def", "to_json", "(", "self", ")", ":", "\n", "        ", "serialized_dict", "=", "self", ".", "to_dict", "(", ")", "\n", "for", "key", ",", "val", "in", "serialized_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "val", ",", "pathlib", ".", "Path", ")", ":", "\n", "                ", "serialized_dict", "[", "key", "]", "=", "str", "(", "val", ")", "\n", "", "", "return", "json", ".", "dumps", "(", "serialized_dict", ",", "indent", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.RunConfig.copy": [[277, 279], ["copy.deepcopy"], "methods", ["None"], ["", "def", "copy", "(", "self", ")", ":", "\n", "        ", "return", "copylib", ".", "deepcopy", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.RunConfig._post_init": [[280, 282], ["None"], "methods", ["None"], ["", "def", "_post_init", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.RunConfig.__attrs_post_init__": [[283, 285], ["core.RunConfig._post_init"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.simple.runscript.RunConfiguration._post_init"], ["", "def", "__attrs_post_init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_post_init", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core._is_true": [[15, 17], ["None"], "function", ["None"], ["def", "_is_true", "(", "x", ")", ":", "\n", "    ", "return", "x", "==", "\"True\"", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.argparse_attr": [[20, 57], ["attr.attr", "isinstance", "argparse_kwargs.get", "argparse_kwargs.get"], "function", ["None"], ["", "def", "argparse_attr", "(", "\n", "default", "=", "attr", ".", "NOTHING", ",", "\n", "validator", "=", "None", ",", "\n", "repr", "=", "True", ",", "\n", "eq", "=", "None", ",", "\n", "order", "=", "None", ",", "\n", "hash", "=", "True", ",", "\n", "init", "=", "True", ",", "\n", "converter", "=", "None", ",", "\n", "opt_string", "=", "None", ",", "\n", "**", "argparse_kwargs", ",", "\n", ")", ":", "\n", "    ", "if", "opt_string", "is", "None", ":", "\n", "        ", "opt_string_ls", "=", "[", "]", "\n", "", "elif", "isinstance", "(", "opt_string", ",", "str", ")", ":", "\n", "        ", "opt_string_ls", "=", "[", "opt_string", "]", "\n", "", "else", ":", "\n", "        ", "opt_string_ls", "=", "opt_string", "\n", "\n", "", "if", "argparse_kwargs", ".", "get", "(", "\"type\"", ",", "None", ")", "is", "bool", ":", "\n", "        ", "argparse_kwargs", "[", "\"choices\"", "]", "=", "{", "True", ",", "False", "}", "\n", "argparse_kwargs", "[", "\"type\"", "]", "=", "_is_true", "\n", "\n", "", "if", "argparse_kwargs", ".", "get", "(", "\"action\"", ",", "None", ")", "==", "\"store_true\"", ":", "\n", "        ", "default", "=", "False", "\n", "\n", "", "return", "attr", ".", "attr", "(", "\n", "default", "=", "default", ",", "\n", "validator", "=", "validator", ",", "\n", "repr", "=", "repr", ",", "\n", "eq", "=", "eq", ",", "\n", "order", "=", "order", ",", "\n", "hash", "=", "hash", ",", "\n", "init", "=", "init", ",", "\n", "converter", "=", "converter", ",", "\n", "metadata", "=", "{", "\"opt_string_ls\"", ":", "opt_string_ls", ",", "\"argparse_kwargs\"", ":", "argparse_kwargs", "}", ",", "\n", "kw_only", "=", "True", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.update_parser": [[60, 79], ["parser.add_argument", "argparse_kwargs.copy.copy"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.RunConfig.copy"], ["", "def", "update_parser", "(", "parser", ",", "class_with_attributes", ":", "Any", ")", ":", "\n", "# TODO: Write more checks/tests for the parser creation in general  (Issue #57)", "\n", "    ", "for", "attribute", "in", "class_with_attributes", ".", "__attrs_attrs__", ":", "\n", "        ", "if", "\"argparse_kwargs\"", "in", "attribute", ".", "metadata", ":", "\n", "            ", "argparse_kwargs", "=", "attribute", ".", "metadata", "[", "\"argparse_kwargs\"", "]", "\n", "opt_string_ls", "=", "attribute", ".", "metadata", "[", "\"opt_string_ls\"", "]", "\n", "is_positional", "=", "\"nargs\"", "in", "argparse_kwargs", "\n", "if", "not", "is_positional", ":", "\n", "                ", "if", "attribute", ".", "default", "is", "attr", ".", "NOTHING", ":", "\n", "                    ", "argparse_kwargs", "=", "argparse_kwargs", ".", "copy", "(", ")", "\n", "argparse_kwargs", "[", "\"required\"", "]", "=", "True", "\n", "", "else", ":", "\n", "                    ", "argparse_kwargs", "[", "\"default\"", "]", "=", "attribute", ".", "default", "\n", "", "", "if", "is_positional", ":", "\n", "                ", "argparse_arg_name", "=", "attribute", ".", "name", "\n", "", "else", ":", "\n", "                ", "argparse_arg_name", "=", "f\"--{attribute.name}\"", "\n", "\n", "", "parser", ".", "add_argument", "(", "argparse_arg_name", ",", "*", "opt_string_ls", ",", "**", "argparse_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.read_parser": [[81, 100], ["dict", "dict", "vars().items", "class_with_attributes", "vars", "parser.parse_args", "RuntimeError"], "function", ["None"], ["", "", "", "def", "read_parser", "(", "parser", ",", "class_with_attributes", ":", "Any", ",", "skip_non_class_attributes", "=", "None", ",", "args", "=", "None", ")", ":", "\n", "    ", "attribute_name_set", "=", "{", "attribute", ".", "name", "for", "attribute", "in", "class_with_attributes", ".", "__attrs_attrs__", "}", "\n", "\n", "kwargs", "=", "dict", "(", ")", "\n", "leftover_kwargs", "=", "dict", "(", ")", "\n", "\n", "for", "k", ",", "v", "in", "vars", "(", "parser", ".", "parse_args", "(", "args", ")", ")", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", "in", "attribute_name_set", ":", "\n", "            ", "kwargs", "[", "k", "]", "=", "v", "\n", "", "else", ":", "\n", "            ", "if", "skip_non_class_attributes", "is", "not", "None", "and", "k", "not", "in", "skip_non_class_attributes", ":", "\n", "                ", "raise", "RuntimeError", "(", "f\"Unknown attribute {k}\"", ")", "\n", "", "leftover_kwargs", "[", "k", "]", "=", "v", "\n", "\n", "", "", "instance", "=", "class_with_attributes", "(", "**", "kwargs", ")", "\n", "if", "skip_non_class_attributes", ":", "\n", "        ", "return", "instance", ",", "leftover_kwargs", "\n", "", "else", ":", "\n", "        ", "return", "instance", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.run_cli": [[105, 113], ["argparse.ArgumentParser", "core.update_parser", "core.read_parser", "isinstance"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.update_parser", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.read_parser"], ["", "", "def", "run_cli", "(", "cls", ",", "args", "=", "None", ",", "prog", "=", "None", ",", "description", "=", "None", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "prog", "=", "prog", ",", "description", "=", "description", ")", "\n", "update_parser", "(", "\n", "parser", "=", "parser", ",", "class_with_attributes", "=", "cls", ",", "\n", ")", "\n", "result", "=", "read_parser", "(", "parser", "=", "parser", ",", "class_with_attributes", "=", "cls", ",", "args", "=", "args", ")", "\n", "assert", "isinstance", "(", "result", ",", "cls", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.from_json": [[115, 117], ["cls", "json.loads"], "function", ["None"], ["", "def", "from_json", "(", "cls", ",", "json_string", ")", ":", "\n", "    ", "return", "cls", "(", "**", "json", ".", "loads", "(", "json_string", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.from_json_path": [[119, 122], ["open", "cls.from_json", "f.read"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.from_json"], ["", "def", "from_json_path", "(", "cls", ",", "json_path", ")", ":", "\n", "    ", "with", "open", "(", "json_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "return", "cls", ".", "from_json", "(", "f", ".", "read", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.from_json_arg": [[124, 127], ["cls.from_json_path", "len"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.from_json_path"], ["", "", "def", "from_json_arg", "(", "cls", ")", ":", "\n", "    ", "assert", "len", "(", "sys", ".", "argv", ")", "==", "2", "\n", "return", "cls", ".", "from_json_path", "(", "sys", ".", "argv", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.to_dict": [[130, 135], ["inspect.getfullargspec", "getattr"], "function", ["None"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "    ", "config_dict", "=", "{", "}", "\n", "for", "attribute", "in", "inspect", ".", "getfullargspec", "(", "self", ".", "__class__", ")", ".", "kwonlyargs", ":", "\n", "        ", "config_dict", "[", "attribute", "]", "=", "getattr", "(", "self", ",", "attribute", ")", "\n", "", "return", "config_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.to_json": [[137, 143], ["core..to_dict", "core..items", "json.dumps", "isinstance", "str"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.ValState.to_dict"], ["", "def", "to_json", "(", "self", ")", ":", "\n", "    ", "serialized_dict", "=", "self", ".", "to_dict", "(", ")", "\n", "for", "key", ",", "val", "in", "serialized_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "val", ",", "pathlib", ".", "Path", ")", ":", "\n", "            ", "serialized_dict", "[", "key", "]", "=", "str", "(", "val", ")", "\n", "", "", "return", "json", ".", "dumps", "(", "serialized_dict", ",", "indent", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core._inst_copy": [[145, 147], ["copy.deepcopy"], "function", ["None"], ["", "def", "_inst_copy", "(", "self", ")", ":", "\n", "    ", "return", "copylib", ".", "deepcopy", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.run_config": [[288, 304], ["attr.s", "isinstance", "classmethod", "classmethod", "classmethod", "classmethod"], "function", ["None"], ["", "", "def", "run_config", "(", "cls", ")", ":", "\n", "    ", "cls", "=", "attr", ".", "s", "(", "cls", ")", "\n", "\n", "if", "not", "isinstance", "(", "cls", ",", "RunConfig", ")", ":", "\n", "# Class methods", "\n", "        ", "cls", ".", "run_cli", "=", "classmethod", "(", "run_cli", ")", "\n", "cls", ".", "from_json", "=", "classmethod", "(", "from_json", ")", "\n", "cls", ".", "from_json_path", "=", "classmethod", "(", "from_json_path", ")", "\n", "cls", ".", "from_json_arg", "=", "classmethod", "(", "from_json_arg", ")", "\n", "\n", "# Instance methods", "\n", "cls", ".", "to_dict", "=", "to_dict", "\n", "cls", ".", "to_json", "=", "to_json", "\n", "cls", ".", "copy", "=", "_inst_copy", "\n", "\n", "", "return", "cls", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.get_sys_args": [[306, 308], ["None"], "function", ["None"], ["", "def", "get_sys_args", "(", ")", ":", "\n", "    ", "return", "sys", ".", "argv", "[", "1", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.get_mode_and_cl_args": [[310, 315], ["core.get_sys_args", "len"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.get_sys_args"], ["", "def", "get_mode_and_cl_args", "(", "cl_args", "=", "None", ")", "->", "Tuple", "[", "str", ",", "list", "]", ":", "\n", "    ", "if", "cl_args", "is", "None", ":", "\n", "        ", "cl_args", "=", "get_sys_args", "(", ")", "\n", "", "assert", "len", "(", "cl_args", ")", ">=", "1", ",", "\"First argument is the mode\"", "\n", "return", "cl_args", "[", "0", "]", ",", "cl_args", "[", "1", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.testing.tokenizer.SimpleSpaceTokenizer.__init__": [[15, 20], ["jiant.utils.python.datastructures.BiMap().get_maps", "jiant.utils.python.datastructures.BiMap", "list", "range", "len"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.BiMap.get_maps"], ["def", "__init__", "(", "self", ",", "vocabulary", ":", "List", "[", "str", "]", ",", "add_special", "=", "True", ")", ":", "\n", "        ", "if", "add_special", ":", "\n", "            ", "vocabulary", "=", "self", ".", "SPECIAL_TOKENS", "+", "vocabulary", "\n", "", "self", ".", "tokens_to_ids", ",", "self", ".", "ids_to_tokens", "=", "BiMap", "(", "\n", "a", "=", "vocabulary", ",", "b", "=", "list", "(", "range", "(", "len", "(", "vocabulary", ")", ")", ")", "\n", ")", ".", "get_maps", "(", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.testing.tokenizer.SimpleSpaceTokenizer.convert_tokens_to_ids": [[22, 24], ["None"], "methods", ["None"], ["", "def", "convert_tokens_to_ids", "(", "self", ",", "tokens", ":", "List", "[", "str", "]", ")", "->", "List", "[", "int", "]", ":", "\n", "        ", "return", "[", "self", ".", "tokens_to_ids", "[", "token", "]", "for", "token", "in", "tokens", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.testing.tokenizer.SimpleSpaceTokenizer.tokenize": [[25, 28], ["string.split"], "methods", ["None"], ["", "def", "tokenize", "(", "self", ",", "string", ":", "str", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "return", "[", "\n", "token", "if", "token", "in", "self", ".", "tokens_to_ids", "else", "self", ".", "unk_token", "for", "token", "in", "string", ".", "split", "(", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.testing.tokenizer.SimpleSpaceTokenizer.get_feat_spec": [[30, 43], ["jiant.tasks.core.FeaturizationSpec"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "get_feat_spec", "(", "cls", ",", "max_seq_length", ":", "int", ")", "->", "FeaturizationSpec", ":", "\n", "        ", "return", "FeaturizationSpec", "(", "\n", "max_seq_length", "=", "max_seq_length", ",", "\n", "cls_token_at_end", "=", "False", ",", "\n", "pad_on_left", "=", "False", ",", "\n", "cls_token_segment_id", "=", "0", ",", "\n", "pad_token_segment_id", "=", "0", ",", "\n", "pad_token_id", "=", "0", ",", "\n", "pad_token_mask_id", "=", "0", ",", "\n", "sequence_a_segment_id", "=", "0", ",", "\n", "sequence_b_segment_id", "=", "1", ",", "\n", "sep_token_extra", "=", "False", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.filesystem.find_files": [[4, 11], ["sorted", "os.path.join", "os.walk", "func"], "function", ["None"], ["def", "find_files", "(", "base_path", ",", "func", ")", ":", "\n", "    ", "return", "sorted", "(", "\n", "[", "\n", "os", ".", "path", ".", "join", "(", "dp", ",", "filename", ")", "\n", "for", "dp", ",", "dn", ",", "filenames", "in", "os", ".", "walk", "(", "base_path", ")", "\n", "for", "filename", "in", "filenames", "\n", "if", "func", "(", "filename", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.filesystem.find_files_with_ext": [[15, 17], ["filesystem.find_files", "filename.endswith"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.filesystem.find_files"], ["", "def", "find_files_with_ext", "(", "base_path", ",", "ext", ")", ":", "\n", "    ", "return", "find_files", "(", "base_path", "=", "base_path", ",", "func", "=", "lambda", "filename", ":", "filename", ".", "endswith", "(", "f\".{ext}\"", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.ReusableGenerator.__init__": [[129, 133], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "generator_function", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "generator_function", "=", "generator_function", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "kwargs", "=", "kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.ReusableGenerator.__iter__": [[134, 136], ["datastructures.ReusableGenerator.generator_function"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "generator_function", "(", "*", "self", ".", "args", ",", "**", "self", ".", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.InfiniteYield.__init__": [[139, 142], ["iter", "itertools.cycle"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.task_sampler.BaseMultiTaskSampler.iter"], ["    ", "def", "__init__", "(", "self", ",", "iterable", ":", "Iterable", ")", ":", "\n", "        ", "self", ".", "iterable", "=", "iterable", "\n", "self", ".", "iterator", "=", "iter", "(", "itertools", ".", "cycle", "(", "self", ".", "iterable", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.InfiniteYield.__next__": [[143, 145], ["next"], "methods", ["None"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "return", "next", "(", "self", ".", "iterator", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.InfiniteYield.pop": [[146, 148], ["next"], "methods", ["None"], ["", "def", "pop", "(", "self", ")", ":", "\n", "        ", "return", "next", "(", "self", ".", "iterator", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.ExtendedDataClassMixin.get_fields": [[168, 172], ["list"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "get_fields", "(", "cls", ")", ":", "\n", "# noinspection PyUnresolvedReferences", "\n", "        ", "return", "list", "(", "cls", ".", "__dataclass_fields__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.ExtendedDataClassMixin.get_annotations": [[173, 176], ["None"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "get_annotations", "(", "cls", ")", ":", "\n", "        ", "return", "cls", ".", "__annotations__", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.ExtendedDataClassMixin.to_dict": [[177, 179], ["getattr", "datastructures.ExtendedDataClassMixin.get_fields"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.ExtendedDataClassMixin.get_fields"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "return", "{", "k", ":", "getattr", "(", "self", ",", "k", ")", "for", "k", "in", "self", ".", "get_fields", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.ExtendedDataClassMixin.from_dict": [[180, 184], ["cls"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_dict", "(", "cls", ",", "kwargs", ")", ":", "\n", "# noinspection PyArgumentList", "\n", "        ", "return", "cls", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.ExtendedDataClassMixin.new": [[185, 188], ["dataclasses.replace"], "methods", ["None"], ["", "def", "new", "(", "self", ",", "**", "new_kwargs", ")", ":", "\n", "# noinspection PyDataclass", "\n", "        ", "return", "replace", "(", "self", ",", "**", "new_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.BiMap.__init__": [[199, 206], ["zip", "len", "len", "len", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "a", ":", "Sequence", ",", "b", ":", "Sequence", ")", ":", "\n", "        ", "self", ".", "a_to_b", "=", "{", "}", "\n", "self", ".", "b_to_a", "=", "{", "}", "\n", "for", "i", ",", "j", "in", "zip", "(", "a", ",", "b", ")", ":", "\n", "            ", "self", ".", "a_to_b", "[", "i", "]", "=", "j", "\n", "self", ".", "b_to_a", "[", "j", "]", "=", "i", "\n", "", "assert", "len", "(", "self", ".", "a_to_b", ")", "==", "len", "(", "self", ".", "b_to_a", ")", "==", "len", "(", "a", ")", "==", "len", "(", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.BiMap.get_maps": [[207, 215], ["None"], "methods", ["None"], ["", "def", "get_maps", "(", "self", ")", "->", "Tuple", "[", "Dict", ",", "Dict", "]", ":", "\n", "        ", "\"\"\"Return stored mappings.\n\n        Returns:\n            Tuple[Dict, Dict]: mappings from elements of a to b, and mappings from b to a.\n\n        \"\"\"", "\n", "return", "self", ".", "a_to_b", ",", "self", ".", "b_to_a", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.take_one": [[7, 20], ["next", "IndexError", "iter", "len", "len"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.task_sampler.BaseMultiTaskSampler.iter"], ["def", "take_one", "(", "ls", ":", "Union", "[", "Sequence", ",", "Mapping", ",", "Set", "]", ")", "->", "Any", ":", "\n", "    ", "\"\"\"Extract element from a collection containing just one element.\n\n    Args:\n        ls (Union[Sequence, Mapping]): collection containing one element.\n\n    Returns:\n        Element extracted from collection.\n\n    \"\"\"", "\n", "if", "not", "len", "(", "ls", ")", "==", "1", ":", "\n", "        ", "raise", "IndexError", "(", "f\"has more than one element ({len(ls)})\"", ")", "\n", "", "return", "next", "(", "iter", "(", "ls", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.chain_idx_get": [[22, 38], ["datastructures.chain_idx"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.chain_idx"], ["", "def", "chain_idx_get", "(", "container", ":", "Union", "[", "Sequence", ",", "Mapping", "]", ",", "key_list", ":", "Sequence", ",", "default", ":", "Any", ")", "->", "Any", ":", "\n", "    ", "\"\"\"Get an element at a path in an arbitrarily nested container, return default if not found.\n\n    Args:\n        container (Union[Sequence, Mapping]): container from which to try to retrieve element.\n        key_list (Sequence): list of index and/or keys specifying the path.\n        default (Any): default value to return if no value exists at the specified path.\n\n    Returns:\n        Element found at the specified path, or default value if no entry is found at that path.\n\n    \"\"\"", "\n", "try", ":", "\n", "        ", "return", "chain_idx", "(", "container", ",", "key_list", ")", "\n", "", "except", "(", "KeyError", ",", "IndexError", ",", "TypeError", ")", ":", "\n", "        ", "return", "default", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.chain_idx": [[40, 55], ["None"], "function", ["None"], ["", "", "def", "chain_idx", "(", "container", ":", "Union", "[", "Sequence", ",", "Mapping", "]", ",", "key_list", ":", "Sequence", ")", "->", "Any", ":", "\n", "    ", "\"\"\"Get an element at a path in an arbitrarily nested container.\n\n    Args:\n        container (Union[Sequence, Mapping]): container from which to try to retrieve element.\n        key_list (Sequence): list of index and/or keys specifying the path.\n\n    Returns:\n        Element found at the specified path.\n\n    \"\"\"", "\n", "curr", "=", "container", "\n", "for", "key", "in", "key_list", ":", "\n", "        ", "curr", "=", "curr", "[", "key", "]", "\n", "", "return", "curr", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.group_by": [[57, 79], ["key_func", "result[].append"], "function", ["None"], ["", "def", "group_by", "(", "ls", ":", "Sequence", ",", "key_func", ")", "->", "dict", ":", "\n", "    ", "\"\"\"Group elements by the result of the function applied to each element.\n\n    Args:\n        ls (Sequence): elements to group.\n        key_func: function to apply.\n\n    Returns:\n        Dict grouping elements (values) by the result of the function applied to the element (keys).\n\n    Examples:\n        group_by([1, 2, 3, 4, 5], lambda x: x%2==0)\n        # Output: {False: [1, 3, 5], True: [2, 4]}\n\n    \"\"\"", "\n", "result", "=", "{", "}", "\n", "for", "elem", "in", "ls", ":", "\n", "        ", "key", "=", "key_func", "(", "elem", ")", "\n", "if", "key", "not", "in", "result", ":", "\n", "            ", "result", "[", "key", "]", "=", "[", "]", "\n", "", "result", "[", "key", "]", ".", "append", "(", "elem", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.combine_dicts": [[81, 102], ["dict_class", "enumerate", "dictionary.items", "RuntimeError"], "function", ["None"], ["", "def", "combine_dicts", "(", "dict_ls", ":", "Sequence", "[", "dict", "]", ",", "strict", "=", "True", ",", "dict_class", "=", "dict", ")", ":", "\n", "    ", "\"\"\"Merges entries from one or more dicts into a single dict (shallow copy).\n\n    Args:\n        dict_ls (Sequence[dict]): sequence of dictionaries to combine.\n        strict (bool): whether to throw an exception in the event of key collision, else overwrite.\n        dict_class (dictionary): dictionary class for the destination dict.\n\n    Returns:\n        Dictionary containing the entries from the input dicts.\n\n    \"\"\"", "\n", "# noinspection PyCallingNonCallable", "\n", "new_dict", "=", "dict_class", "(", ")", "\n", "for", "i", ",", "dictionary", "in", "enumerate", "(", "dict_ls", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "dictionary", ".", "items", "(", ")", ":", "\n", "            ", "if", "strict", ":", "\n", "                ", "if", "k", "in", "new_dict", ":", "\n", "                    ", "raise", "RuntimeError", "(", "f\"repeated key {k} seen in dict {i}\"", ")", "\n", "", "", "new_dict", "[", "k", "]", "=", "v", "\n", "", "", "return", "new_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.sort_dict": [[104, 106], ["sorted", "list", "d.keys"], "function", ["None"], ["", "def", "sort_dict", "(", "d", ":", "dict", ")", ":", "\n", "    ", "return", "{", "k", ":", "d", "[", "k", "]", "for", "k", "in", "sorted", "(", "list", "(", "d", ".", "keys", "(", ")", ")", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.partition_list": [[108, 118], ["len", "math.ceil", "print", "range", "result.append"], "function", ["None"], ["", "def", "partition_list", "(", "ls", ",", "n", ",", "strict", "=", "False", ")", ":", "\n", "    ", "length", "=", "len", "(", "ls", ")", "\n", "if", "strict", ":", "\n", "        ", "assert", "length", "%", "n", "==", "0", "\n", "", "parts_per", "=", "math", ".", "ceil", "(", "length", "/", "n", ")", "\n", "print", "(", "parts_per", ")", "\n", "result", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "result", ".", "append", "(", "ls", "[", "i", "*", "parts_per", ":", "(", "i", "+", "1", ")", "*", "parts_per", "]", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.has_same_keys": [[150, 152], ["dict1.keys", "dict2.keys"], "function", ["None"], ["", "", "def", "has_same_keys", "(", "dict1", ":", "dict", ",", "dict2", ":", "dict", ")", "->", "bool", ":", "\n", "    ", "return", "dict1", ".", "keys", "(", ")", "==", "dict2", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.get_all_same": [[154, 157], ["len", "set"], "function", ["None"], ["", "def", "get_all_same", "(", "ls", ")", ":", "\n", "    ", "assert", "len", "(", "set", "(", "ls", ")", ")", "==", "1", "\n", "return", "ls", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.zip_equal": [[159, 165], ["object", "itertools.zip_longest", "ValueError"], "function", ["None"], ["", "def", "zip_equal", "(", "*", "iterables", ")", ":", "\n", "    ", "sentinel", "=", "object", "(", ")", "\n", "for", "combo", "in", "itertools", ".", "zip_longest", "(", "*", "iterables", ",", "fillvalue", "=", "sentinel", ")", ":", "\n", "        ", "if", "sentinel", "in", "combo", ":", "\n", "            ", "raise", "ValueError", "(", "\"Iterables have different lengths\"", ")", "\n", "", "yield", "combo", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_file": [[6, 9], ["open", "f.read"], "function", ["None"], ["def", "read_file", "(", "path", ",", "mode", "=", "\"r\"", ",", "**", "kwargs", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "mode", "=", "mode", ",", "**", "kwargs", ")", "as", "f", ":", "\n", "        ", "return", "f", ".", "read", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.write_file": [[11, 14], ["open", "f.write"], "function", ["None"], ["", "", "def", "write_file", "(", "data", ",", "path", ",", "mode", "=", "\"w\"", ",", "**", "kwargs", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "mode", "=", "mode", ",", "**", "kwargs", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_json": [[16, 18], ["json.loads", "io.read_file"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_file"], ["", "", "def", "read_json", "(", "path", ")", ":", "\n", "    ", "return", "json", ".", "loads", "(", "read_file", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.write_json": [[20, 22], ["io.write_file", "json.dumps"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.write_file"], ["", "def", "write_json", "(", "data", ",", "path", ")", ":", "\n", "    ", "return", "write_file", "(", "json", ".", "dumps", "(", "data", ",", "indent", "=", "2", ")", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_jsonl": [[24, 31], ["open", "ls.append", "json.loads"], "function", ["None"], ["", "def", "read_jsonl", "(", "path", ")", ":", "\n", "# Manually open because .splitlines is different from iterating over lines", "\n", "    ", "ls", "=", "[", "]", "\n", "with", "open", "(", "path", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "ls", ".", "append", "(", "json", ".", "loads", "(", "line", ")", ")", "\n", "", "", "return", "ls", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.write_jsonl": [[33, 37], ["isinstance", "io.write_file", "io.to_jsonl"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.write_file", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.to_jsonl"], ["", "def", "write_jsonl", "(", "data", ",", "path", ")", ":", "\n", "    ", "assert", "isinstance", "(", "data", ",", "list", ")", "\n", "lines", "=", "[", "to_jsonl", "(", "elem", ")", "for", "elem", "in", "data", "]", "\n", "write_file", "(", "\"\\n\"", ".", "join", "(", "lines", ")", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_file_lines": [[39, 46], ["open", "f.readlines", "line.strip"], "function", ["None"], ["", "def", "read_file_lines", "(", "path", ",", "mode", "=", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ",", "strip_lines", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "mode", "=", "mode", ",", "encoding", "=", "encoding", ",", "**", "kwargs", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "if", "strip_lines", ":", "\n", "        ", "return", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "lines", "]", "\n", "", "else", ":", "\n", "        ", "return", "lines", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_json_lines": [[48, 52], ["open", "f.readlines", "json.loads"], "function", ["None"], ["", "", "def", "read_json_lines", "(", "path", ",", "mode", "=", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ",", "**", "kwargs", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "mode", "=", "mode", ",", "encoding", "=", "encoding", ",", "**", "kwargs", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "            ", "yield", "json", ".", "loads", "(", "line", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.to_jsonl": [[54, 56], ["json.dumps().replace", "json.dumps"], "function", ["None"], ["", "", "", "def", "to_jsonl", "(", "data", ")", ":", "\n", "    ", "return", "json", ".", "dumps", "(", "data", ")", ".", "replace", "(", "\"\\n\"", ",", "\"\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.create_containing_folder": [[58, 61], ["os.makedirs", "os.path.split"], "function", ["None"], ["", "def", "create_containing_folder", "(", "path", ")", ":", "\n", "    ", "fol_path", "=", "os", ".", "path", ".", "split", "(", "path", ")", "[", "0", "]", "\n", "os", ".", "makedirs", "(", "fol_path", ",", "exist_ok", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.sorted_glob": [[63, 65], ["sorted", "glob.glob"], "function", ["None"], ["", "def", "sorted_glob", "(", "pathname", ",", "*", ",", "recursive", "=", "False", ")", ":", "\n", "    ", "return", "sorted", "(", "glob", ".", "glob", "(", "pathname", ",", "recursive", "=", "recursive", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.assert_exists": [[67, 70], ["os.path.exists", "FileNotFoundError"], "function", ["None"], ["", "def", "assert_exists", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "raise", "FileNotFoundError", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.assert_not_exists": [[72, 75], ["os.path.exists", "FileExistsError"], "function", ["None"], ["", "", "def", "assert_not_exists", "(", "path", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "raise", "FileExistsError", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.get_num_lines": [[77, 82], ["open", "enumerate"], "function", ["None"], ["", "", "def", "get_num_lines", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "for", "i", ",", "l", "in", "enumerate", "(", "f", ")", ":", "\n", "            ", "pass", "\n", "", "", "return", "i", "+", "1", "\n", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.strings.remove_prefix": [[1, 4], ["s.startswith", "len"], "function", ["None"], ["def", "remove_prefix", "(", "s", ",", "prefix", ")", ":", "\n", "    ", "assert", "s", ".", "startswith", "(", "prefix", ")", "\n", "return", "s", "[", "len", "(", "prefix", ")", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.strings.remove_suffix": [[6, 9], ["s.endswith", "len"], "function", ["None"], ["", "def", "remove_suffix", "(", "s", ",", "suffix", ")", ":", "\n", "    ", "assert", "s", ".", "endswith", "(", "suffix", ")", "\n", "return", "s", "[", ":", "-", "len", "(", "suffix", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.strings.replace_prefix": [[11, 13], ["strings.remove_prefix"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.strings.remove_prefix"], ["", "def", "replace_prefix", "(", "s", ",", "prefix", ",", "new_prefix", ")", ":", "\n", "    ", "return", "new_prefix", "+", "remove_prefix", "(", "s", ",", "prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.strings.replace_suffix": [[15, 17], ["strings.remove_suffix"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.strings.remove_suffix"], ["", "def", "replace_suffix", "(", "s", ",", "suffix", ",", "new_suffix", ")", ":", "\n", "    ", "return", "remove_suffix", "(", "s", ",", "suffix", ")", "+", "new_suffix", "\n", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.checks.dict_equal": [[4, 13], ["zip", "dict1.items", "dict2.items", "len", "len"], "function", ["None"], ["def", "dict_equal", "(", "dict1", ":", "Dict", ",", "dict2", ":", "Dict", ")", "->", "bool", ":", "\n", "    ", "if", "not", "len", "(", "dict1", ")", "==", "len", "(", "dict2", ")", ":", "\n", "        ", "return", "False", "\n", "", "for", "(", "k1", ",", "v1", ")", ",", "(", "k2", ",", "v2", ")", "in", "zip", "(", "dict1", ".", "items", "(", ")", ",", "dict2", ".", "items", "(", ")", ")", ":", "\n", "        ", "if", "k1", "!=", "k2", ":", "\n", "            ", "return", "False", "\n", "", "if", "v1", "!=", "v2", ":", "\n", "            ", "return", "False", "\n", "", "", "return", "True", "\n", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.functional.getter": [[4, 9], ["getattr"], "function", ["None"], ["def", "getter", "(", "attr_name", ":", "Any", ")", ":", "\n", "    ", "def", "f", "(", "obj", ")", ":", "\n", "        ", "return", "getattr", "(", "obj", ",", "attr_name", ")", "\n", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.functional.indexer": [[11, 16], ["None"], "function", ["None"], ["", "def", "indexer", "(", "key", ")", ":", "\n", "    ", "def", "f", "(", "obj", ")", ":", "\n", "        ", "return", "obj", "[", "key", "]", "\n", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.functional.identity": [[18, 23], ["len"], "function", ["None"], ["", "def", "identity", "(", "*", "args", ")", ":", "\n", "    ", "if", "len", "(", "args", ")", ">", "1", ":", "\n", "        ", "return", "args", "\n", "", "else", ":", "\n", "        ", "return", "args", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.functional.always_false": [[26, 28], ["None"], "function", ["None"], ["", "", "def", "always_false", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.functional.always_true": [[31, 33], ["None"], "function", ["None"], ["", "def", "always_true", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "True", "\n", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.logic.replace_none": [[4, 19], ["None"], "function", ["None"], ["def", "replace_none", "(", "elem", ":", "Optional", "[", "Any", "]", ",", "default", ":", "Any", ")", ":", "\n", "    ", "\"\"\"If elem is None, return default, else return elem\n\n    Args:\n        elem: element to possibly return\n        default: default element\n\n    Returns:\n        elem, or default\n\n    \"\"\"", "\n", "if", "elem", "is", "None", ":", "\n", "        ", "return", "default", "\n", "", "else", ":", "\n", "        ", "return", "elem", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.test_datastructures.test_take_one": [[8, 21], ["jiant.take_one", "jiant.take_one", "jiant.take_one", "jiant.take_one", "jiant.take_one", "pytest.raises", "jiant.take_one", "pytest.raises", "jiant.take_one", "pytest.raises", "jiant.take_one"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.take_one", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.take_one", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.take_one", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.take_one", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.take_one", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.take_one", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.take_one", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.take_one"], ["def", "test_take_one", "(", ")", ":", "\n", "    ", "assert", "py_datastructures", ".", "take_one", "(", "[", "9", "]", ")", "==", "9", "\n", "assert", "py_datastructures", ".", "take_one", "(", "(", "9", ",", ")", ")", "==", "9", "\n", "assert", "py_datastructures", ".", "take_one", "(", "{", "9", "}", ")", "==", "9", "\n", "assert", "py_datastructures", ".", "take_one", "(", "\"9\"", ")", "==", "\"9\"", "\n", "assert", "py_datastructures", ".", "take_one", "(", "{", "9", ":", "10", "}", ")", "==", "9", "\n", "\n", "with", "pytest", ".", "raises", "(", "IndexError", ")", ":", "\n", "        ", "py_datastructures", ".", "take_one", "(", "[", "]", ")", "\n", "", "with", "pytest", ".", "raises", "(", "IndexError", ")", ":", "\n", "        ", "py_datastructures", ".", "take_one", "(", "[", "1", ",", "2", "]", ")", "\n", "", "with", "pytest", ".", "raises", "(", "IndexError", ")", ":", "\n", "        ", "py_datastructures", ".", "take_one", "(", "\"2342134\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.test_datastructures.test_chain_idx": [[23, 44], ["jiant.chain_idx", "jiant.chain_idx", "pytest.raises", "jiant.chain_idx", "pytest.raises", "jiant.chain_idx", "jiant.chain_idx", "jiant.chain_idx", "jiant.chain_idx", "jiant.chain_idx", "jiant.chain_idx", "pytest.raises", "jiant.chain_idx", "pytest.raises", "jiant.chain_idx"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.chain_idx", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.chain_idx", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.chain_idx", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.chain_idx", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.chain_idx", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.chain_idx", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.chain_idx", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.chain_idx", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.chain_idx", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.chain_idx", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.chain_idx"], ["", "", "def", "test_chain_idx", "(", ")", ":", "\n", "# dict", "\n", "    ", "d", "=", "{", "1", ":", "{", "2", ":", "3", "}", "}", "\n", "ls", "=", "[", "1", ",", "[", "2", "]", ",", "[", "None", ",", "[", "3", "]", "]", "]", "\n", "assert", "py_datastructures", ".", "chain_idx", "(", "d", "[", "1", "]", ",", "[", "2", "]", ")", "==", "3", "\n", "assert", "py_datastructures", ".", "chain_idx", "(", "d", ",", "[", "1", ",", "2", "]", ")", "==", "3", "\n", "with", "pytest", ".", "raises", "(", "KeyError", ")", ":", "\n", "        ", "py_datastructures", ".", "chain_idx", "(", "d", ",", "[", "1", ",", "3", "]", ")", "\n", "", "with", "pytest", ".", "raises", "(", "KeyError", ")", ":", "\n", "        ", "py_datastructures", ".", "chain_idx", "(", "d", ",", "[", "3", "]", ")", "\n", "\n", "# list", "\n", "", "assert", "py_datastructures", ".", "chain_idx", "(", "ls", ",", "[", "0", "]", ")", "==", "1", "\n", "assert", "py_datastructures", ".", "chain_idx", "(", "ls", ",", "[", "1", "]", ")", "==", "[", "2", "]", "\n", "assert", "py_datastructures", ".", "chain_idx", "(", "ls", ",", "[", "1", ",", "0", "]", ")", "==", "2", "\n", "assert", "py_datastructures", ".", "chain_idx", "(", "ls", ",", "[", "2", ",", "0", "]", ")", "is", "None", "\n", "assert", "py_datastructures", ".", "chain_idx", "(", "ls", ",", "[", "2", ",", "1", ",", "0", "]", ")", "==", "3", "\n", "with", "pytest", ".", "raises", "(", "TypeError", ")", ":", "\n", "        ", "py_datastructures", ".", "chain_idx", "(", "ls", ",", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "", "with", "pytest", ".", "raises", "(", "IndexError", ")", ":", "\n", "        ", "py_datastructures", ".", "chain_idx", "(", "ls", ",", "[", "1", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.test_datastructures.test_chain_idx_get": [[46, 57], ["jiant.chain_idx_get", "jiant.chain_idx_get", "jiant.chain_idx_get", "jiant.chain_idx_get", "jiant.chain_idx_get"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.chain_idx_get", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.chain_idx_get", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.chain_idx_get", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.chain_idx_get", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.chain_idx_get"], ["", "", "def", "test_chain_idx_get", "(", ")", ":", "\n", "# dict", "\n", "    ", "d", "=", "{", "1", ":", "{", "2", ":", "3", "}", "}", "\n", "ls", "=", "[", "1", ",", "[", "2", "]", ",", "[", "None", ",", "[", "3", "]", "]", "]", "\n", "assert", "py_datastructures", ".", "chain_idx_get", "(", "d", "[", "1", "]", ",", "[", "2", "]", ",", "default", "=", "1234", ")", "==", "3", "\n", "assert", "py_datastructures", ".", "chain_idx_get", "(", "d", ",", "[", "1", ",", "3", "]", ",", "default", "=", "1234", ")", "==", "1234", "\n", "\n", "# list", "\n", "assert", "py_datastructures", ".", "chain_idx_get", "(", "ls", ",", "[", "0", "]", ",", "default", "=", "1234", ")", "==", "1", "\n", "assert", "py_datastructures", ".", "chain_idx_get", "(", "ls", ",", "[", "0", ",", "0", "]", ",", "default", "=", "1234", ")", "==", "1234", "\n", "assert", "py_datastructures", ".", "chain_idx_get", "(", "ls", ",", "[", "1", ",", "1", "]", ",", "default", "=", "1234", ")", "==", "1234", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.test_datastructures.test_combine_dicts_with_disjoint_key_sets": [[59, 65], ["jiant.combine_dicts", "json.dumps", "json.dumps"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.combine_dicts"], ["", "def", "test_combine_dicts_with_disjoint_key_sets", "(", ")", ":", "\n", "    ", "combined_dict", "=", "py_datastructures", ".", "combine_dicts", "(", "[", "{", "\"d1_k1\"", ":", "\"d1_v1\"", "}", ",", "{", "\"d2_k1\"", ":", "\"d2_v1\"", "}", "]", ")", "\n", "expected_dict", "=", "{", "\"d1_k1\"", ":", "\"d1_v1\"", ",", "\"d2_k1\"", ":", "\"d2_v1\"", "}", "\n", "combined_sorted", ":", "str", "=", "json", ".", "dumps", "(", "combined_dict", ",", "sort_keys", "=", "True", ")", "\n", "expected_sorted", ":", "str", "=", "json", ".", "dumps", "(", "expected_dict", ",", "sort_keys", "=", "True", ")", "\n", "assert", "combined_sorted", "==", "expected_sorted", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.test_datastructures.test_combine_dicts_with_overlapping_key_sets": [[67, 70], ["pytest.raises", "jiant.combine_dicts"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.combine_dicts"], ["", "def", "test_combine_dicts_with_overlapping_key_sets", "(", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "RuntimeError", ")", ":", "\n", "        ", "py_datastructures", ".", "combine_dicts", "(", "[", "{", "\"k1\"", ":", "\"v1\"", "}", ",", "{", "\"k1\"", ":", "\"v1\"", "}", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.test_datastructures.test_partition_list": [[72, 86], ["jiant.partition_list", "jiant.partition_list", "jiant.partition_list", "list", "list", "list", "range", "range", "range"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.partition_list", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.partition_list", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.partition_list"], ["", "", "def", "test_partition_list", "(", ")", ":", "\n", "    ", "assert", "py_datastructures", ".", "partition_list", "(", "list", "(", "range", "(", "10", ")", ")", ",", "5", ")", "==", "[", "\n", "[", "0", ",", "1", "]", ",", "\n", "[", "2", ",", "3", "]", ",", "\n", "[", "4", ",", "5", "]", ",", "\n", "[", "6", ",", "7", "]", ",", "\n", "[", "8", ",", "9", "]", ",", "\n", "]", "\n", "assert", "py_datastructures", ".", "partition_list", "(", "list", "(", "range", "(", "10", ")", ")", ",", "3", ")", "==", "[", "\n", "[", "0", ",", "1", ",", "2", ",", "3", "]", ",", "\n", "[", "4", ",", "5", ",", "6", ",", "7", "]", ",", "\n", "[", "8", ",", "9", "]", ",", "\n", "]", "\n", "assert", "py_datastructures", ".", "partition_list", "(", "list", "(", "range", "(", "10", ")", ")", ",", "1", ")", "==", "[", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.test_datastructures.test_extended_dataclass_mixin": [[88, 95], ["MyClass.get_fields"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.ExtendedDataClassMixin.get_fields"], ["", "def", "test_extended_dataclass_mixin", "(", ")", ":", "\n", "    ", "@", "dataclass", "\n", "class", "MyClass", "(", "py_datastructures", ".", "ExtendedDataClassMixin", ")", ":", "\n", "        ", "int1", ":", "int", "\n", "str1", ":", "str", "\n", "\n", "", "assert", "MyClass", ".", "get_fields", "(", ")", "==", "[", "\"int1\"", ",", "\"str1\"", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.test_logic.test_replace_none": [[4, 7], ["jiant.replace_none", "jiant.replace_none"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.logic.replace_none", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.logic.replace_none"], ["def", "test_replace_none", "(", ")", ":", "\n", "    ", "assert", "py_logic", ".", "replace_none", "(", "1", ",", "default", "=", "2", ")", "==", "1", "\n", "assert", "py_logic", ".", "replace_none", "(", "None", ",", "default", "=", "2", ")", "==", "2", "\n", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.test_checks.test_dict_equal": [[4, 9], ["jiant.dict_equal", "jiant.dict_equal", "jiant.dict_equal", "jiant.dict_equal"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.checks.dict_equal", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.checks.dict_equal", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.checks.dict_equal", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.checks.dict_equal"], ["def", "test_dict_equal", "(", ")", ":", "\n", "    ", "assert", "py_checks", ".", "dict_equal", "(", "{", "1", ":", "2", "}", ",", "{", "1", ":", "2", "}", ")", "\n", "assert", "not", "py_checks", ".", "dict_equal", "(", "{", "1", ":", "2", "}", ",", "{", "1", ":", "3", "}", ")", "\n", "assert", "not", "py_checks", ".", "dict_equal", "(", "{", "1", ":", "2", "}", ",", "{", "2", ":", "2", "}", ")", "\n", "assert", "not", "py_checks", ".", "dict_equal", "(", "{", "1", ":", "2", "}", ",", "{", "2", ":", "2", ",", "1", ":", "1", "}", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.test_filesystem.test_get_code_base_path": [[6, 9], ["jiant.get_code_base_path", "os.path.exists"], "function", ["None"], ["def", "test_get_code_base_path", "(", ")", ":", "\n", "    ", "code_base_path", "=", "py_filesystem", ".", "get_code_base_path", "(", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "code_base_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.test_filesystem.test_get_code_asset_path": [[11, 16], ["jiant.get_code_asset_path", "os.path.join"], "function", ["None"], ["", "def", "test_get_code_asset_path", "(", ")", ":", "\n", "    ", "import", "jiant", "\n", "assert", "py_filesystem", ".", "get_code_asset_path", "(", "\n", "os", ".", "path", ".", "join", "(", "\"jiant\"", ",", "\"__init__.py\"", ")", "\n", ")", "==", "jiant", ".", "__file__", "\n", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.test_functional.test_indexer": [[6, 10], ["pytest.raises", "jiant.indexer", "jiant.indexer"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.functional.indexer", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.functional.indexer"], ["def", "test_indexer", "(", ")", ":", "\n", "    ", "assert", "py_functional", ".", "indexer", "(", "1", ")", "(", "{", "1", ":", "2", "}", ")", "==", "2", "\n", "with", "pytest", ".", "raises", "(", "KeyError", ")", ":", "\n", "        ", "py_functional", ".", "indexer", "(", "\"1\"", ")", "(", "{", "1", ":", "2", "}", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_resolution.ModelArchitectures.from_model_type": [[16, 41], ["model_type.startswith", "model_type.startswith", "model_type.startswith", "model_type.startswith", "model_type.startswith", "model_type.startswith", "KeyError"], "methods", ["None"], ["@", "classmethod", "\n", "def", "from_model_type", "(", "cls", ",", "model_type", ":", "str", ")", ":", "\n", "        ", "\"\"\"Get the model architecture for the provided shortcut name.\n\n        Args:\n            model_type (str): model shortcut name.\n\n        Returns:\n            Model architecture associated with the provided shortcut name.\n\n        \"\"\"", "\n", "if", "model_type", ".", "startswith", "(", "\"bert-\"", ")", ":", "\n", "            ", "return", "cls", ".", "BERT", "\n", "", "elif", "model_type", ".", "startswith", "(", "\"xlm-\"", ")", "and", "not", "model_type", ".", "startswith", "(", "\"xlm-roberta\"", ")", ":", "\n", "            ", "return", "cls", ".", "XLM", "\n", "", "elif", "model_type", ".", "startswith", "(", "\"roberta-\"", ")", ":", "\n", "            ", "return", "cls", ".", "ROBERTA", "\n", "", "elif", "model_type", ".", "startswith", "(", "\"albert-\"", ")", ":", "\n", "            ", "return", "cls", ".", "ALBERT", "\n", "", "elif", "model_type", "==", "\"glove_lstm\"", ":", "\n", "            ", "return", "cls", ".", "GLOVE_LSTM", "\n", "", "elif", "model_type", ".", "startswith", "(", "\"xlm-roberta-\"", ")", ":", "\n", "            ", "return", "cls", ".", "XLM_ROBERTA", "\n", "", "else", ":", "\n", "            ", "raise", "KeyError", "(", "model_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_resolution.ModelArchitectures.from_transformers_model": [[42, 62], ["isinstance", "transformers_model.__class__.__name__.startswith", "isinstance", "isinstance", "transformers_model.__class__.__name__.startswith", "isinstance", "transformers_model.__class__.__name__.startswith", "isinstance", "KeyError", "str"], "methods", ["None"], ["", "", "@", "classmethod", "\n", "def", "from_transformers_model", "(", "cls", ",", "transformers_model", ")", ":", "\n", "        ", "if", "isinstance", "(", "\n", "transformers_model", ",", "transformers", ".", "BertPreTrainedModel", "\n", ")", "and", "transformers_model", ".", "__class__", ".", "__name__", ".", "startswith", "(", "\"Bert\"", ")", ":", "\n", "            ", "return", "cls", ".", "BERT", "\n", "", "elif", "isinstance", "(", "transformers_model", ",", "transformers", ".", "XLMPreTrainedModel", ")", ":", "\n", "            ", "return", "cls", ".", "XLM_ROBERTA", "\n", "", "elif", "isinstance", "(", "\n", "transformers_model", ",", "transformers", ".", "BertPreTrainedModel", "\n", ")", "and", "transformers_model", ".", "__class__", ".", "__name__", ".", "startswith", "(", "\"Robert\"", ")", ":", "\n", "            ", "return", "cls", ".", "ROBERTA", "\n", "", "elif", "isinstance", "(", "\n", "transformers_model", ",", "transformers", ".", "BertPreTrainedModel", "\n", ")", "and", "transformers_model", ".", "__class__", ".", "__name__", ".", "startswith", "(", "\"XLMRoberta\"", ")", ":", "\n", "            ", "return", "cls", ".", "XLM_ROBERTA", "\n", "", "elif", "isinstance", "(", "transformers_model", ",", "transformers", ".", "modeling_albert", ".", "AlbertPreTrainedModel", ")", ":", "\n", "            ", "return", "cls", ".", "ALBERT", "\n", "", "else", ":", "\n", "            ", "raise", "KeyError", "(", "str", "(", "transformers_model", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_resolution.ModelArchitectures.from_tokenizer_class": [[63, 77], ["isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "KeyError", "str"], "methods", ["None"], ["", "", "@", "classmethod", "\n", "def", "from_tokenizer_class", "(", "cls", ",", "tokenizer_class", ")", ":", "\n", "        ", "if", "isinstance", "(", "tokenizer_class", ",", "transformers", ".", "BertTokenizer", ")", ":", "\n", "            ", "return", "cls", ".", "BERT", "\n", "", "elif", "isinstance", "(", "tokenizer_class", ",", "transformers", ".", "XLMTokenizer", ")", ":", "\n", "            ", "return", "cls", ".", "XLM_ROBERTA", "\n", "", "elif", "isinstance", "(", "tokenizer_class", ",", "transformers", ".", "RobertaTokenizer", ")", ":", "\n", "            ", "return", "cls", ".", "ROBERTA", "\n", "", "elif", "isinstance", "(", "tokenizer_class", ",", "transformers", ".", "XLMRobertaTokenizer", ")", ":", "\n", "            ", "return", "cls", ".", "XLM_ROBERTA", "\n", "", "elif", "isinstance", "(", "tokenizer_class", ",", "transformers", ".", "AlbertTokenizer", ")", ":", "\n", "            ", "return", "cls", ".", "ALBERT", "\n", "", "else", ":", "\n", "            ", "raise", "KeyError", "(", "str", "(", "tokenizer_class", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_resolution.ModelArchitectures.is_transformers_model_arch": [[78, 86], ["None"], "methods", ["None"], ["", "", "@", "classmethod", "\n", "def", "is_transformers_model_arch", "(", "cls", ",", "model_arch", ")", ":", "\n", "        ", "return", "model_arch", "in", "[", "\n", "cls", ".", "BERT", ",", "\n", "cls", ".", "XLM", ",", "\n", "cls", ".", "ROBERTA", ",", "\n", "cls", ".", "ALBERT", ",", "\n", "cls", ".", "XLM_ROBERTA", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_resolution.ModelArchitectures.from_encoder": [[88, 112], ["isinstance", "isinstance", "isinstance", "isinstance", "KeyError", "type"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_encoder", "(", "cls", ",", "encoder", ")", ":", "\n", "        ", "if", "(", "\n", "isinstance", "(", "encoder", ",", "transformers", ".", "BertModel", ")", "\n", "and", "encoder", ".", "__class__", ".", "__name__", "==", "\"BertModel\"", "\n", ")", ":", "\n", "            ", "return", "cls", ".", "BERT", "\n", "", "elif", "(", "\n", "isinstance", "(", "encoder", ",", "transformers", ".", "RobertaModel", ")", "\n", "and", "encoder", ".", "__class__", ".", "__name__", "==", "\"RobertaModel\"", "\n", ")", ":", "\n", "            ", "return", "cls", ".", "ROBERTA", "\n", "", "elif", "(", "\n", "isinstance", "(", "encoder", ",", "transformers", ".", "AlbertModel", ")", "\n", "and", "encoder", ".", "__class__", ".", "__name__", "==", "\"AlbertModel\"", "\n", ")", ":", "\n", "            ", "return", "cls", ".", "ALBERT", "\n", "", "elif", "(", "\n", "isinstance", "(", "encoder", ",", "transformers", ".", "XLMRobertaModel", ")", "\n", "and", "encoder", ".", "__class__", ".", "__name__", "==", "\"XlmRobertaModel\"", "\n", ")", ":", "\n", "            ", "return", "cls", ".", "XLM_ROBERTA", "\n", "", "else", ":", "\n", "            ", "raise", "KeyError", "(", "type", "(", "encoder", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_resolution.build_featurization_spec": [[121, 199], ["model_resolution.ModelArchitectures.from_model_type", "jiant.tasks.core.FeaturizationSpec", "jiant.tasks.core.FeaturizationSpec", "jiant.tasks.core.FeaturizationSpec", "jiant.tasks.core.FeaturizationSpec", "jiant.tasks.core.FeaturizationSpec", "KeyError"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_resolution.ModelArchitectures.from_model_type"], ["", "def", "build_featurization_spec", "(", "model_type", ",", "max_seq_length", ")", ":", "\n", "    ", "model_arch", "=", "ModelArchitectures", ".", "from_model_type", "(", "model_type", ")", "\n", "if", "model_arch", "==", "ModelArchitectures", ".", "BERT", ":", "\n", "        ", "return", "FeaturizationSpec", "(", "\n", "max_seq_length", "=", "max_seq_length", ",", "\n", "cls_token_at_end", "=", "False", ",", "\n", "pad_on_left", "=", "False", ",", "\n", "cls_token_segment_id", "=", "0", ",", "\n", "pad_token_segment_id", "=", "0", ",", "\n", "pad_token_id", "=", "0", ",", "\n", "pad_token_mask_id", "=", "0", ",", "\n", "sequence_a_segment_id", "=", "0", ",", "\n", "sequence_b_segment_id", "=", "1", ",", "\n", "sep_token_extra", "=", "False", ",", "\n", ")", "\n", "", "elif", "model_arch", "==", "ModelArchitectures", ".", "XLM", ":", "\n", "        ", "return", "FeaturizationSpec", "(", "\n", "max_seq_length", "=", "max_seq_length", ",", "\n", "cls_token_at_end", "=", "False", ",", "\n", "pad_on_left", "=", "False", ",", "\n", "cls_token_segment_id", "=", "0", ",", "\n", "pad_token_segment_id", "=", "0", ",", "\n", "pad_token_id", "=", "0", ",", "\n", "pad_token_mask_id", "=", "0", ",", "\n", "sequence_a_segment_id", "=", "0", ",", "\n", "sequence_b_segment_id", "=", "0", ",", "# RoBERTa has no token_type_ids", "\n", "sep_token_extra", "=", "False", ",", "\n", ")", "\n", "", "elif", "model_arch", "==", "ModelArchitectures", ".", "ROBERTA", ":", "\n", "# RoBERTa is weird", "\n", "# token 0 = '<s>' which is the cls_token", "\n", "# token 1 = '</s>' which is the sep_token", "\n", "# Also two '</s>'s are used between sentences. Yes, not '</s><s>'.", "\n", "        ", "return", "FeaturizationSpec", "(", "\n", "max_seq_length", "=", "max_seq_length", ",", "\n", "cls_token_at_end", "=", "False", ",", "\n", "pad_on_left", "=", "False", ",", "\n", "cls_token_segment_id", "=", "0", ",", "\n", "pad_token_segment_id", "=", "0", ",", "\n", "pad_token_id", "=", "1", ",", "# Roberta uses pad_token_id = 1", "\n", "pad_token_mask_id", "=", "0", ",", "\n", "sequence_a_segment_id", "=", "0", ",", "\n", "sequence_b_segment_id", "=", "0", ",", "# RoBERTa has no token_type_ids", "\n", "sep_token_extra", "=", "True", ",", "\n", ")", "\n", "", "elif", "model_arch", "==", "ModelArchitectures", ".", "ALBERT", ":", "\n", "#", "\n", "        ", "return", "FeaturizationSpec", "(", "\n", "max_seq_length", "=", "max_seq_length", ",", "\n", "cls_token_at_end", "=", "False", ",", "# ?", "\n", "pad_on_left", "=", "False", ",", "# ok", "\n", "cls_token_segment_id", "=", "0", ",", "# ok", "\n", "pad_token_segment_id", "=", "0", ",", "# ok", "\n", "pad_token_id", "=", "0", ",", "# I think?", "\n", "pad_token_mask_id", "=", "0", ",", "# I think?", "\n", "sequence_a_segment_id", "=", "0", ",", "# I think?", "\n", "sequence_b_segment_id", "=", "1", ",", "# I think?", "\n", "sep_token_extra", "=", "False", ",", "\n", ")", "\n", "", "elif", "model_arch", "==", "ModelArchitectures", ".", "XLM_ROBERTA", ":", "\n", "# XLM-RoBERTa is weird", "\n", "# token 0 = '<s>' which is the cls_token", "\n", "# token 1 = '</s>' which is the sep_token", "\n", "# Also two '</s>'s are used between sentences. Yes, not '</s><s>'.", "\n", "        ", "return", "FeaturizationSpec", "(", "\n", "max_seq_length", "=", "max_seq_length", ",", "\n", "cls_token_at_end", "=", "False", ",", "\n", "pad_on_left", "=", "False", ",", "\n", "cls_token_segment_id", "=", "0", ",", "\n", "pad_token_segment_id", "=", "0", ",", "\n", "pad_token_id", "=", "1", ",", "# XLM-RoBERTa uses pad_token_id = 1", "\n", "pad_token_mask_id", "=", "0", ",", "\n", "sequence_a_segment_id", "=", "0", ",", "\n", "sequence_b_segment_id", "=", "0", ",", "# XLM-RoBERTa has no token_type_ids", "\n", "sep_token_extra", "=", "True", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "KeyError", "(", "model_arch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_resolution.resolve_tokenizer_class": [[210, 221], ["model_resolution.ModelArchitectures.from_model_type"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_resolution.ModelArchitectures.from_model_type"], ["def", "resolve_tokenizer_class", "(", "model_type", ")", ":", "\n", "    ", "\"\"\"Get tokenizer class for a given model architecture.\n\n    Args:\n        model_type (str): model shortcut name.\n\n    Returns:\n        Tokenizer associated with the given model.\n\n    \"\"\"", "\n", "return", "TOKENIZER_CLASS_DICT", "[", "ModelArchitectures", ".", "from_model_type", "(", "model_type", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_resolution.resolve_is_lower_case": [[223, 228], ["isinstance"], "function", ["None"], ["", "def", "resolve_is_lower_case", "(", "tokenizer", ")", ":", "\n", "    ", "if", "isinstance", "(", "tokenizer", ",", "(", "transformers", ".", "BertTokenizer", ",", "transformers", ".", "AlbertTokenizer", ")", ")", ":", "\n", "        ", "return", "tokenizer", ".", "basic_tokenizer", ".", "do_lower_case", "\n", "", "else", ":", "\n", "        ", "return", "False", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.Chunker.__init__": [[11, 15], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "length", ",", "num_chunks", ",", "chunk_size", ")", ":", "\n", "        ", "self", ".", "length", "=", "length", "\n", "self", ".", "num_chunks", "=", "num_chunks", "\n", "self", ".", "chunk_size", "=", "chunk_size", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.Chunker.get_slices": [[16, 19], ["list", "slice", "range", "zip"], "methods", ["None"], ["", "def", "get_slices", "(", "self", ")", ":", "\n", "        ", "indices", "=", "list", "(", "range", "(", "0", ",", "self", ".", "length", ",", "self", ".", "chunk_size", ")", ")", "+", "[", "self", ".", "length", "]", "\n", "return", "[", "slice", "(", "start", ",", "end", ")", "for", "start", ",", "end", "in", "zip", "(", "indices", "[", ":", "-", "1", "]", ",", "indices", "[", "1", ":", "]", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.Chunker.get_chunks": [[20, 25], ["len", "len", "caching.Chunker.get_slices"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.Chunker.get_slices"], ["", "def", "get_chunks", "(", "self", ",", "data", ")", ":", "\n", "        ", "assert", "len", "(", "data", ")", "==", "self", ".", "length", "\n", "chunked_data", "=", "[", "data", "[", "data_slice", "]", "for", "data_slice", "in", "self", ".", "get_slices", "(", ")", "]", "\n", "assert", "len", "(", "chunked_data", ")", "==", "self", ".", "num_chunks", "\n", "return", "chunked_data", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.Chunker.lookup_chunk_and_index": [[26, 38], ["isinstance", "isinstance", "i.astype.astype.astype", "isinstance", "caching.Chunker.lookup_chunk_and_index", "isinstance", "i.astype.astype.numpy", "caching.Chunker.lookup_chunk_and_index", "TypeError", "numpy.array", "type"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.Chunker.lookup_chunk_and_index", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.Chunker.lookup_chunk_and_index"], ["", "def", "lookup_chunk_and_index", "(", "self", ",", "i", ")", ":", "\n", "        ", "if", "isinstance", "(", "i", ",", "int", ")", ":", "\n", "            ", "return", "i", "//", "self", ".", "chunk_size", ",", "i", "%", "self", ".", "chunk_size", "\n", "", "elif", "isinstance", "(", "i", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "i", "=", "i", ".", "astype", "(", "int", ")", "\n", "return", "(", "i", "/", "self", ".", "chunk_size", ")", ".", "astype", "(", "int", ")", ",", "(", "i", "%", "self", ".", "chunk_size", ")", ".", "astype", "(", "int", ")", "\n", "", "elif", "isinstance", "(", "i", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "return", "self", ".", "lookup_chunk_and_index", "(", "i", ".", "numpy", "(", ")", ")", "\n", "", "elif", "isinstance", "(", "i", ",", "list", ")", ":", "\n", "            ", "return", "self", ".", "lookup_chunk_and_index", "(", "np", ".", "array", "(", "i", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "type", "(", "i", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.Chunker.lookup_index": [[39, 44], ["isinstance", "TypeError", "type"], "methods", ["None"], ["", "", "def", "lookup_index", "(", "self", ",", "chunk_i", ",", "i", ")", ":", "\n", "        ", "if", "isinstance", "(", "i", ",", "(", "int", ",", "np", ".", "ndarray", ",", "torch", ".", "Tensor", ")", ")", ":", "\n", "            ", "return", "chunk_i", "*", "self", ".", "chunk_size", "+", "i", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "type", "(", "i", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.Chunker.from_chunk_size": [[45, 49], ["math.ceil", "cls"], "methods", ["None"], ["", "", "@", "classmethod", "\n", "def", "from_chunk_size", "(", "cls", ",", "length", ",", "chunk_size", ")", ":", "\n", "        ", "num_chunks", "=", "math", ".", "ceil", "(", "length", "/", "chunk_size", ")", "\n", "return", "cls", "(", "length", "=", "length", ",", "num_chunks", "=", "num_chunks", ",", "chunk_size", "=", "chunk_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.DataCache.get_all": [[132, 134], ["NotImplementedError"], "methods", ["None"], ["    ", "def", "get_all", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.DataCache.iter_all": [[135, 137], ["NotImplementedError"], "methods", ["None"], ["", "def", "iter_all", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.DataCache.__len__": [[138, 140], ["NotImplementedError"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.InMemoryDataCache.__init__": [[143, 145], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data", ")", ":", "\n", "        ", "self", ".", "data", "=", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.InMemoryDataCache.get_all": [[146, 148], ["None"], "methods", ["None"], ["", "def", "get_all", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.InMemoryDataCache.iter_all": [[149, 152], ["None"], "methods", ["None"], ["", "def", "iter_all", "(", "self", ")", ":", "\n", "        ", "for", "elem", "in", "self", ".", "data", ":", "\n", "            ", "yield", "elem", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.InMemoryDataCache.__len__": [[153, 155], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.ChunkedFilesDataCache.__init__": [[158, 166], ["torch.load", "torch.load", "torch.load", "torch.load", "caching.Chunker.from_chunk_size", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.Chunker.from_chunk_size"], ["    ", "def", "__init__", "(", "self", ",", "cache_fol_path", ")", ":", "\n", "        ", "self", ".", "cache_fol_path", "=", "cache_fol_path", "\n", "\n", "self", ".", "data_args", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "cache_fol_path", ",", "\"data_args.p\"", ")", ")", "\n", "self", ".", "num_chunks", "=", "self", ".", "data_args", "[", "\"num_chunks\"", "]", "\n", "self", ".", "length", "=", "self", ".", "data_args", "[", "\"length\"", "]", "\n", "self", ".", "chunk_size", "=", "self", ".", "data_args", "[", "\"chunk_size\"", "]", "\n", "self", ".", "chunker", "=", "Chunker", ".", "from_chunk_size", "(", "length", "=", "self", ".", "length", ",", "chunk_size", "=", "self", ".", "chunk_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.ChunkedFilesDataCache.get_iterable_dataset": [[167, 182], ["caching.ChunkedFilesIterableDataset"], "methods", ["None"], ["", "def", "get_iterable_dataset", "(", "\n", "self", ",", "\n", "buffer_size", "=", "None", ",", "\n", "shuffle", "=", "False", ",", "\n", "subset_num", ":", "Union", "[", "None", ",", "int", "]", "=", "None", ",", "\n", "explicit_subset", ":", "Union", "[", "None", ",", "Sequence", "]", "=", "None", ",", "\n", "verbose", "=", "False", ",", "\n", ")", ":", "\n", "        ", "return", "ChunkedFilesIterableDataset", "(", "\n", "buffer_size", "=", "buffer_size", ",", "\n", "shuffle", "=", "shuffle", ",", "\n", "subset_num", "=", "subset_num", ",", "\n", "explicit_subset", "=", "explicit_subset", ",", "\n", "chunked_file_data_cache", "=", "self", ",", "\n", "verbose", "=", "verbose", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.ChunkedFilesDataCache.get_uniterable_dataset": [[184, 199], ["caching.ChunkedFilesUniterableDataset"], "methods", ["None"], ["", "def", "get_uniterable_dataset", "(", "\n", "self", ",", "\n", "buffer_size", "=", "None", ",", "\n", "shuffle", "=", "False", ",", "\n", "subset_num", ":", "Union", "[", "None", ",", "int", "]", "=", "None", ",", "\n", "explicit_subset", ":", "Union", "[", "None", ",", "Sequence", "]", "=", "None", ",", "\n", "verbose", "=", "False", ",", "\n", ")", ":", "\n", "        ", "return", "ChunkedFilesUniterableDataset", "(", "\n", "buffer_size", "=", "buffer_size", ",", "\n", "shuffle", "=", "shuffle", ",", "\n", "subset_num", "=", "subset_num", ",", "\n", "explicit_subset", "=", "explicit_subset", ",", "\n", "chunked_file_data_cache", "=", "self", ",", "\n", "verbose", "=", "verbose", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.ChunkedFilesDataCache.load_chunk": [[201, 203], ["torch.load", "torch.load", "torch.load", "torch.load", "caching.ChunkedFilesDataCache.get_chunk_path"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.ChunkedFilesDataCache.get_chunk_path"], ["", "def", "load_chunk", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "torch", ".", "load", "(", "self", ".", "get_chunk_path", "(", "i", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.ChunkedFilesDataCache.get_chunk_path": [[204, 206], ["os.path.join"], "methods", ["None"], ["", "def", "get_chunk_path", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "cache_fol_path", ",", "f\"data_{i:05d}.chunk\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.ChunkedFilesDataCache.load_from_indices": [[207, 222], ["caching.ChunkedFilesDataCache.chunker.lookup_chunk_and_index", "numpy.arange().astype", "sorted", "len", "list", "caching.ChunkedFilesDataCache.load_chunk", "zip", "numpy.arange", "set", "print", "len", "len"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.Chunker.lookup_chunk_and_index", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.ChunkedFilesDataCache.load_chunk"], ["", "def", "load_from_indices", "(", "self", ",", "indices", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "chunk_arr", ",", "chunk_sub_index_arr", "=", "self", ".", "chunker", ".", "lookup_chunk_and_index", "(", "indices", ")", "\n", "reverse_index", "=", "np", ".", "arange", "(", "len", "(", "indices", ")", ")", ".", "astype", "(", "int", ")", "\n", "result", "=", "[", "None", "]", "*", "len", "(", "indices", ")", "\n", "for", "chunk_i", "in", "sorted", "(", "list", "(", "set", "(", "chunk_arr", ")", ")", ")", ":", "\n", "            ", "selector", "=", "chunk_arr", "==", "chunk_i", "\n", "chunk", "=", "self", ".", "load_chunk", "(", "chunk_i", ")", "\n", "selected_chunk_sub_index_arr", "=", "chunk_sub_index_arr", "[", "selector", "]", "\n", "selected_reverse_index", "=", "reverse_index", "[", "selector", "]", "\n", "if", "verbose", ":", "\n", "                ", "print", "(", "f\"Loading {len(selected_chunk_sub_index_arr)} indices from chunk {chunk_i}\"", ")", "\n", "", "for", "i", ",", "j", "in", "zip", "(", "selected_chunk_sub_index_arr", ",", "selected_reverse_index", ")", ":", "\n", "                ", "result", "[", "j", "]", "=", "chunk", "[", "i", "]", "\n", "", "del", "chunk", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.ChunkedFilesDataCache.get_all": [[223, 228], ["range", "list", "caching.ChunkedFilesDataCache.load_chunk"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.ChunkedFilesDataCache.load_chunk"], ["", "def", "get_all", "(", "self", ")", ":", "\n", "        ", "data", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_chunks", ")", ":", "\n", "            ", "data", "+=", "list", "(", "self", ".", "load_chunk", "(", "i", ")", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.ChunkedFilesDataCache.iter_all": [[229, 234], ["range", "caching.ChunkedFilesDataCache.load_chunk"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.ChunkedFilesDataCache.load_chunk"], ["", "def", "iter_all", "(", "self", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "num_chunks", ")", ":", "\n", "            ", "chunk", "=", "self", ".", "load_chunk", "(", "i", ")", "\n", "for", "elem", "in", "chunk", ":", "\n", "                ", "yield", "elem", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.ChunkedFilesDataCache.__len__": [[235, 237], ["None"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.ChunkedFilesIterableDataset.__init__": [[240, 266], ["len", "min"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "buffer_size", ",", "\n", "shuffle", ",", "\n", "chunked_file_data_cache", ":", "ChunkedFilesDataCache", ",", "\n", "subset_num", ":", "Union", "[", "int", ",", "None", "]", "=", "None", ",", "\n", "explicit_subset", ":", "Union", "[", "Sequence", ",", "None", "]", "=", "None", ",", "\n", "verbose", "=", "False", ",", "\n", ")", ":", "\n", "        ", "self", ".", "buffer_size", "=", "buffer_size", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "subset_num", "=", "subset_num", "\n", "self", ".", "chunked_file_data_cache", "=", "chunked_file_data_cache", "\n", "self", ".", "explicit_subset", "=", "explicit_subset", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n", "if", "self", ".", "explicit_subset", "is", "not", "None", ":", "\n", "            ", "assert", "self", ".", "subset_num", "is", "None", "\n", "self", ".", "length", "=", "len", "(", "self", ".", "explicit_subset", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "length", "=", "self", ".", "chunked_file_data_cache", ".", "length", "\n", "if", "self", ".", "subset_num", ":", "\n", "                ", "self", ".", "length", "=", "min", "(", "self", ".", "subset_num", ",", "self", ".", "length", ")", "\n", "\n", "", "", "if", "self", ".", "buffer_size", "is", "None", ":", "\n", "            ", "self", ".", "buffer_size", "=", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.ChunkedFilesIterableDataset.__iter__": [[267, 282], ["caching.ChunkedFilesIterableDataset.get_buffer_chunked_indices", "caching.ChunkedFilesIterableDataset.chunked_file_data_cache.load_from_indices", "len", "print", "len", "len"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.ChunkedFilesIterableDataset.get_buffer_chunked_indices", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.ChunkedFilesDataCache.load_from_indices"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "seen", "=", "0", "\n", "buffer_chunked_indices", "=", "self", ".", "get_buffer_chunked_indices", "(", ")", "\n", "for", "buffer_chunked_index", "in", "buffer_chunked_indices", ":", "\n", "            ", "if", "self", ".", "verbose", ":", "\n", "                ", "print", "(", "\n", "f\"Loading buffer {seen} - {seen + len(buffer_chunked_index)}\"", "\n", "f\" out of {len(self)}\"", "\n", ")", "\n", "", "buffer", "=", "self", ".", "chunked_file_data_cache", ".", "load_from_indices", "(", "\n", "buffer_chunked_index", ",", "verbose", "=", "self", ".", "verbose", "\n", ")", "\n", "for", "elem", "in", "buffer", ":", "\n", "                ", "yield", "elem", "\n", "", "seen", "+=", "len", "(", "buffer_chunked_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.ChunkedFilesIterableDataset.get_buffer_chunked_indices": [[283, 294], ["caching.convert_to_chunks", "numpy.array().astype", "numpy.arange().astype", "numpy.random.shuffle", "numpy.array", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.convert_to_chunks"], ["", "", "def", "get_buffer_chunked_indices", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "explicit_subset", "is", "not", "None", ":", "\n", "            ", "indices", "=", "np", ".", "array", "(", "self", ".", "explicit_subset", ")", ".", "astype", "(", "int", ")", "\n", "", "else", ":", "\n", "            ", "indices", "=", "np", ".", "arange", "(", "self", ".", "length", ")", ".", "astype", "(", "int", ")", "\n", "", "if", "self", ".", "shuffle", ":", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "indices", ")", "\n", "", "if", "self", ".", "subset_num", ":", "\n", "            ", "indices", "=", "indices", "[", ":", "self", ".", "subset_num", "]", "\n", "", "buffer_chunked_indices", "=", "convert_to_chunks", "(", "indices", ",", "chunk_size", "=", "self", ".", "buffer_size", ")", "\n", "return", "buffer_chunked_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.ChunkedFilesIterableDataset.__len__": [[295, 297], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.ChunkedFilesUniterableDataset.__init__": [[299, 327], ["caching.ChunkedFilesUniterableDataset.chunked_file_data_cache.get_all", "len", "min"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.ChunkedFilesDataCache.get_all"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "buffer_size", ",", "\n", "shuffle", ",", "\n", "chunked_file_data_cache", ":", "ChunkedFilesDataCache", ",", "\n", "subset_num", ":", "Union", "[", "int", ",", "None", "]", "=", "None", ",", "\n", "explicit_subset", ":", "Union", "[", "Sequence", ",", "None", "]", "=", "None", ",", "\n", "verbose", "=", "False", ",", "\n", ")", ":", "\n", "        ", "self", ".", "buffer_size", "=", "buffer_size", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "subset_num", "=", "subset_num", "\n", "self", ".", "chunked_file_data_cache", "=", "chunked_file_data_cache", "\n", "self", ".", "explicit_subset", "=", "explicit_subset", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n", "if", "self", ".", "explicit_subset", "is", "not", "None", ":", "\n", "            ", "assert", "self", ".", "subset_num", "is", "None", "\n", "self", ".", "length", "=", "len", "(", "self", ".", "explicit_subset", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "length", "=", "self", ".", "chunked_file_data_cache", ".", "length", "\n", "if", "self", ".", "subset_num", ":", "\n", "                ", "self", ".", "length", "=", "min", "(", "self", ".", "subset_num", ",", "self", ".", "length", ")", "\n", "\n", "", "", "if", "self", ".", "buffer_size", "is", "None", ":", "\n", "            ", "self", ".", "buffer_size", "=", "self", ".", "length", "\n", "\n", "", "self", ".", "loaded_data", "=", "self", ".", "chunked_file_data_cache", ".", "get_all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.ChunkedFilesUniterableDataset.__getitem__": [[328, 330], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "loaded_data", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.ChunkedFilesUniterableDataset.__len__": [[331, 333], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "", "", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.convert_to_chunks": [[51, 64], ["caching.Chunker.from_chunk_size", "Chunker.from_chunk_size.get_chunks", "len"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.Chunker.from_chunk_size", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.Chunker.get_chunks"], ["", "", "def", "convert_to_chunks", "(", "data", ",", "chunk_size", ":", "int", ")", ":", "\n", "    ", "\"\"\"Divide data into chunks.\n\n    Args:\n        data (List): data to divide into chunks.\n        chunk_size (int): number of data elements to store per chunk.\n\n    Returns:\n        List of data chunks.\n    \"\"\"", "\n", "chunker", "=", "Chunker", ".", "from_chunk_size", "(", "len", "(", "data", ")", ",", "chunk_size", "=", "chunk_size", ")", "\n", "chunked_data", "=", "chunker", ".", "get_chunks", "(", "data", ")", "\n", "return", "chunked_data", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.chunk_and_save": [[66, 84], ["os.makedirs", "caching.convert_to_chunks", "enumerate", "data_args.copy.copy", "len", "len", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.convert_to_chunks", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.RunConfig.copy", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.CheckpointSaver.save", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.CheckpointSaver.save", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.CheckpointSaver.save", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.CheckpointSaver.save"], ["", "def", "chunk_and_save", "(", "data", ":", "list", ",", "chunk_size", ":", "int", ",", "data_args", ":", "dict", ",", "output_dir", ":", "str", ")", ":", "\n", "    ", "\"\"\"Divide data into chunks and save it to disk, also saves metadata describing chunking to disk.\n\n    Args:\n        data (List): List of DataRows and metadata.\n        chunk_size (int): number of data elements to store per chunk.\n        data_args (Dict): RunConfiguration represented as a dictionary.\n        output_dir: phase-specific dir in the output dir specified in the RunConfiguration.\n\n    \"\"\"", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "chunked_data", "=", "convert_to_chunks", "(", "data", "=", "data", ",", "chunk_size", "=", "chunk_size", ")", "\n", "for", "i", ",", "chunk", "in", "enumerate", "(", "chunked_data", ")", ":", "\n", "        ", "torch", ".", "save", "(", "chunk", ",", "os", ".", "path", ".", "join", "(", "output_dir", ",", "f\"data_{i:05d}.chunk\"", ")", ")", "\n", "", "data_args", "=", "data_args", ".", "copy", "(", ")", "\n", "data_args", "[", "\"num_chunks\"", "]", "=", "len", "(", "chunked_data", ")", "\n", "data_args", "[", "\"length\"", "]", "=", "len", "(", "data", ")", "\n", "torch", ".", "save", "(", "data_args", ",", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"data_args.p\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.iter_chunk_and_save": [[86, 109], ["os.makedirs", "data_args.copy.copy", "torch.save", "torch.save", "current_chunk.append", "torch.save", "torch.save", "os.path.join", "recorder_callback", "len", "torch.save", "torch.save", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.RunConfig.copy", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.CheckpointSaver.save", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.CheckpointSaver.save", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.CheckpointSaver.save", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.CheckpointSaver.save", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.CheckpointSaver.save", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.CheckpointSaver.save"], ["", "def", "iter_chunk_and_save", "(", "\n", "data", ":", "Generator", ",", "chunk_size", ":", "int", ",", "data_args", ":", "dict", ",", "output_dir", ":", "str", ",", "recorder_callback", "=", "None", "\n", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "chunk_i", "=", "0", "\n", "length", "=", "0", "\n", "current_chunk", "=", "[", "]", "\n", "for", "datum", "in", "data", ":", "\n", "        ", "if", "recorder_callback", "is", "not", "None", ":", "\n", "            ", "recorder_callback", "(", "datum", ")", "\n", "", "length", "+=", "1", "\n", "current_chunk", ".", "append", "(", "datum", ")", "\n", "if", "len", "(", "current_chunk", ")", "==", "chunk_size", ":", "\n", "            ", "torch", ".", "save", "(", "current_chunk", ",", "os", ".", "path", ".", "join", "(", "output_dir", ",", "f\"data_{chunk_i:05d}.chunk\"", ")", ")", "\n", "chunk_i", "+=", "1", "\n", "current_chunk", "=", "[", "]", "\n", "", "", "if", "current_chunk", ":", "\n", "        ", "torch", ".", "save", "(", "current_chunk", ",", "os", ".", "path", ".", "join", "(", "output_dir", ",", "f\"data_{chunk_i:05d}.chunk\"", ")", ")", "\n", "chunk_i", "+=", "1", "\n", "", "data_args", "=", "data_args", ".", "copy", "(", ")", "\n", "data_args", "[", "\"num_chunks\"", "]", "=", "chunk_i", "\n", "data_args", "[", "\"length\"", "]", "=", "length", "\n", "torch", ".", "save", "(", "data_args", ",", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"data_args.p\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.compare_tensor_tuples": [[111, 118], ["zip", "len", "len", "torch.equal", "torch.equal"], "function", ["None"], ["", "def", "compare_tensor_tuples", "(", "tup1", ",", "tup2", ")", ":", "\n", "    ", "if", "len", "(", "tup1", ")", "!=", "len", "(", "tup2", ")", ":", "\n", "        ", "return", "False", "\n", "", "for", "col1", ",", "col2", "in", "zip", "(", "tup1", ",", "tup2", ")", ":", "\n", "        ", "if", "not", "torch", ".", "equal", "(", "col1", ",", "col2", ")", ":", "\n", "            ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.compare_dataset_with_metadata": [[120, 126], ["caching.compare_tensor_tuples"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.compare_tensor_tuples"], ["", "def", "compare_dataset_with_metadata", "(", "d1", ",", "d2", ")", ":", "\n", "    ", "if", "not", "compare_tensor_tuples", "(", "d1", ".", "dataset", ".", "tensors", ",", "d2", ".", "dataset", ".", "tensors", ")", ":", "\n", "        ", "return", "False", "\n", "", "if", "not", "d1", ".", "metadata", "==", "d2", ".", "metadata", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_setup.OptimizerScheduler.__init__": [[43, 47], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.radam.AdamW.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "scheduler", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "scheduler", "=", "scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_setup.OptimizerScheduler.step": [[48, 52], ["model_setup.OptimizerScheduler.scheduler.step", "model_setup.OptimizerScheduler.optimizer.step"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.radam.AdamW.step", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.radam.AdamW.step"], ["", "def", "step", "(", "self", ")", ":", "\n", "# Scheduler updates first", "\n", "        ", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_setup.OptimizerScheduler.state_dict": [[53, 57], ["model_setup.OptimizerScheduler.optimizer.state_dict", "model_setup.OptimizerScheduler.scheduler.state_dict"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_setup.OptimizerScheduler.state_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_setup.OptimizerScheduler.state_dict"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "\"optimizer\"", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "\"scheduler\"", ":", "self", ".", "scheduler", ".", "state_dict", "(", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_setup.OptimizerScheduler.load_state_dict": [[59, 62], ["model_setup.OptimizerScheduler.optimizer.load_state_dict", "model_setup.OptimizerScheduler.scheduler.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_setup.OptimizerScheduler.load_state_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_setup.OptimizerScheduler.load_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ",", "strict", "=", "True", ")", ":", "\n", "        ", "self", ".", "optimizer", ".", "load_state_dict", "(", "state_dict", "[", "\"optimizer\"", "]", ",", "strict", "=", "strict", ")", "\n", "self", ".", "scheduler", ".", "load_state_dict", "(", "state_dict", "[", "\"scheduler\"", "]", ",", "strict", "=", "strict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_setup.get_tokenizer": [[8, 40], ["jiant.shared.model_resolution.ModelArchitectures.from_model_type", "jiant.shared.model_resolution.resolve_tokenizer_class", "jiant.shared.model_resolution.resolve_tokenizer_class.from_pretrained", "RuntimeError", "RuntimeError", "str"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_resolution.ModelArchitectures.from_model_type", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_resolution.resolve_tokenizer_class"], ["def", "get_tokenizer", "(", "model_type", ",", "tokenizer_path", ")", ":", "\n", "    ", "\"\"\"Instantiate a tokenizer for a given model type.\n\n    Args:\n        model_type (str): model shortcut name.\n        tokenizer_path (str): path to tokenizer directory.\n\n    Returns:\n        Tokenizer for the given model type.\n\n    \"\"\"", "\n", "model_arch", "=", "ModelArchitectures", ".", "from_model_type", "(", "model_type", ")", "\n", "tokenizer_class", "=", "resolve_tokenizer_class", "(", "model_type", ")", "\n", "if", "model_arch", "in", "[", "ModelArchitectures", ".", "BERT", "]", ":", "\n", "        ", "if", "\"-cased\"", "in", "model_type", ":", "\n", "            ", "do_lower_case", "=", "False", "\n", "", "elif", "\"-uncased\"", "in", "model_type", ":", "\n", "            ", "do_lower_case", "=", "True", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "model_type", ")", "\n", "", "", "elif", "model_arch", "in", "[", "\n", "ModelArchitectures", ".", "XLM", ",", "\n", "ModelArchitectures", ".", "ROBERTA", ",", "\n", "ModelArchitectures", ".", "XLM_ROBERTA", ",", "\n", "]", ":", "\n", "        ", "do_lower_case", "=", "False", "\n", "", "elif", "model_arch", "in", "[", "ModelArchitectures", ".", "ALBERT", "]", ":", "\n", "        ", "do_lower_case", "=", "True", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "str", "(", "tokenizer_class", ")", ")", "\n", "", "tokenizer", "=", "tokenizer_class", ".", "from_pretrained", "(", "tokenizer_path", ",", "do_lower_case", "=", "do_lower_case", ")", "\n", "return", "tokenizer", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_setup.create_optimizer": [[64, 83], ["model_setup.create_optimizer_from_params", "list", "model.named_parameters"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_setup.create_optimizer_from_params"], ["", "", "def", "create_optimizer", "(", "\n", "model", ",", "\n", "learning_rate", ",", "\n", "t_total", ",", "\n", "warmup_steps", ",", "\n", "warmup_proportion", ",", "\n", "optimizer_epsilon", "=", "1e-8", ",", "\n", "optimizer_type", "=", "\"adam\"", ",", "\n", "verbose", "=", "False", ",", "\n", ")", ":", "\n", "    ", "return", "create_optimizer_from_params", "(", "\n", "named_parameters", "=", "list", "(", "model", ".", "named_parameters", "(", ")", ")", ",", "\n", "learning_rate", "=", "learning_rate", ",", "\n", "t_total", "=", "t_total", ",", "\n", "warmup_steps", "=", "warmup_steps", ",", "\n", "warmup_proportion", "=", "warmup_proportion", ",", "\n", "optimizer_epsilon", "=", "optimizer_epsilon", ",", "\n", "optimizer_type", "=", "optimizer_type", ",", "\n", "verbose", "=", "verbose", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_setup.create_optimizer_from_params": [[86, 151], ["model_setup.resolve_warmup_steps", "transformers.get_linear_schedule_with_warmup", "model_setup.OptimizerScheduler", "print", "transformers.AdamW", "any", "print", "jiant.ext.radam.RAdam", "KeyError", "print", "print", "any", "any"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_setup.resolve_warmup_steps"], ["", "def", "create_optimizer_from_params", "(", "\n", "named_parameters", ",", "\n", "learning_rate", ",", "\n", "t_total", ",", "\n", "warmup_steps", ",", "\n", "warmup_proportion", ",", "\n", "optimizer_epsilon", "=", "1e-8", ",", "\n", "optimizer_type", "=", "\"adam\"", ",", "\n", "verbose", "=", "False", ",", "\n", ")", ":", "\n", "# Prepare optimizer", "\n", "    ", "no_decay", "=", "[", "\n", "\"bias\"", ",", "\n", "\"LayerNorm.bias\"", ",", "\n", "\"LayerNorm.weight\"", ",", "\n", "\"adapter.down_project.weight\"", ",", "\n", "\"adapter.up_project.weight\"", ",", "\n", "\"weighted_sum.weights\"", ",", "\n", "]", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "\"No optimizer decay for:\"", ")", "\n", "for", "n", ",", "p", "in", "named_parameters", ":", "\n", "            ", "if", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", ":", "\n", "                ", "print", "(", "f\"  {n}\"", ")", "\n", "\n", "", "", "", "used_named_parameters", "=", "[", "\n", "(", "n", ",", "p", ")", "for", "n", ",", "p", "in", "named_parameters", "if", "p", ".", "requires_grad", "and", "\"weighted_sum.weights\"", "not", "in", "n", "\n", "]", "\n", "weighted_sum_params", "=", "[", "\n", "(", "n", ",", "p", ")", "for", "n", ",", "p", "in", "named_parameters", "if", "p", ".", "requires_grad", "and", "\"weighted_sum.weights\"", "in", "n", "\n", "]", "\n", "\n", "optimizer_grouped_parameters", "=", "[", "\n", "{", "\n", "\"params\"", ":", "[", "p", "for", "n", ",", "p", "in", "used_named_parameters", "if", "not", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", ",", "\n", "\"weight_decay\"", ":", "0.01", ",", "\n", "}", ",", "\n", "{", "\n", "\"params\"", ":", "[", "p", "for", "n", ",", "p", "in", "used_named_parameters", "if", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", ",", "\n", "\"weight_decay\"", ":", "0.0", ",", "\n", "}", ",", "\n", "{", "\"params\"", ":", "[", "p", "for", "n", ",", "p", "in", "weighted_sum_params", "]", ",", "\"weight_decay\"", ":", "0.0", ",", "\"lr\"", ":", "0.01", "}", ",", "\n", "]", "\n", "\n", "if", "optimizer_type", "==", "\"adam\"", ":", "\n", "        ", "if", "verbose", ":", "\n", "            ", "print", "(", "\"Using AdamW\"", ")", "\n", "", "optimizer", "=", "transformers", ".", "AdamW", "(", "\n", "optimizer_grouped_parameters", ",", "lr", "=", "learning_rate", ",", "eps", "=", "optimizer_epsilon", "\n", ")", "\n", "", "elif", "optimizer_type", "==", "\"radam\"", ":", "\n", "        ", "if", "verbose", ":", "\n", "            ", "print", "(", "\"Using RAdam\"", ")", "\n", "", "optimizer", "=", "RAdam", "(", "optimizer_grouped_parameters", ",", "lr", "=", "learning_rate", ",", "eps", "=", "optimizer_epsilon", ")", "\n", "", "else", ":", "\n", "        ", "raise", "KeyError", "(", "optimizer_type", ")", "\n", "\n", "", "warmup_steps", "=", "resolve_warmup_steps", "(", "\n", "t_total", "=", "t_total", ",", "warmup_steps", "=", "warmup_steps", ",", "warmup_proportion", "=", "warmup_proportion", ",", "\n", ")", "\n", "scheduler", "=", "transformers", ".", "get_linear_schedule_with_warmup", "(", "\n", "optimizer", ",", "num_warmup_steps", "=", "warmup_steps", ",", "num_training_steps", "=", "t_total", "\n", ")", "\n", "optimizer_scheduler", "=", "OptimizerScheduler", "(", "optimizer", "=", "optimizer", ",", "scheduler", "=", "scheduler", ")", "\n", "return", "optimizer_scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_setup.resolve_warmup_steps": [[153, 164], ["RuntimeError", "RuntimeError", "RuntimeError"], "function", ["None"], ["", "def", "resolve_warmup_steps", "(", "t_total", ",", "warmup_steps", ",", "warmup_proportion", ")", ":", "\n", "    ", "if", "warmup_steps", "is", "None", "and", "warmup_proportion", "is", "None", ":", "\n", "        ", "raise", "RuntimeError", "(", ")", "\n", "", "elif", "warmup_steps", "is", "not", "None", "and", "warmup_proportion", "is", "not", "None", ":", "\n", "        ", "raise", "RuntimeError", "(", ")", "\n", "", "elif", "warmup_steps", "is", "None", "and", "warmup_proportion", "is", "not", "None", ":", "\n", "        ", "return", "warmup_proportion", "*", "t_total", "\n", "", "elif", "warmup_steps", "is", "not", "None", "and", "warmup_proportion", "is", "None", ":", "\n", "        ", "return", "warmup_steps", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_setup.fp16ize": [[166, 176], ["amp.initialize", "ImportError"], "function", ["None"], ["", "", "def", "fp16ize", "(", "model", ",", "optimizer", ",", "fp16_opt_level", ")", ":", "\n", "    ", "try", ":", "\n", "# noinspection PyUnresolvedReferences,PyPackageRequirements", "\n", "        ", "from", "apex", "import", "amp", "\n", "", "except", "ImportError", ":", "\n", "        ", "raise", "ImportError", "(", "\n", "\"Please install apex from https://www.github.com/nvidia/apex to use fp16 training.\"", "\n", ")", "\n", "", "model", ",", "optimizer", "=", "amp", ".", "initialize", "(", "model", ",", "optimizer", ",", "opt_level", "=", "fp16_opt_level", ")", "\n", "return", "model", ",", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_setup.parallelize_gpu": [[178, 180], ["torch.nn.DataParallel"], "function", ["None"], ["", "def", "parallelize_gpu", "(", "model", ")", ":", "\n", "    ", "return", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_setup.parallelize_dist": [[182, 185], ["torch.nn.parallel.DistributedDataParallel"], "function", ["None"], ["", "def", "parallelize_dist", "(", "model", ",", "local_rank", ")", ":", "\n", "    ", "return", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "\n", "model", ",", "device_ids", "=", "[", "local_rank", "]", ",", "output_device", "=", "local_rank", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_setup.raw_special_model_setup": [[188, 213], ["model_setup.fp16ize", "model_setup.parallelize_gpu", "model_setup.parallelize_dist"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_setup.fp16ize", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_setup.parallelize_gpu", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_setup.parallelize_dist"], ["", "def", "raw_special_model_setup", "(", "model", ",", "optimizer", ",", "fp16", ",", "fp16_opt_level", ",", "n_gpu", ",", "local_rank", ")", ":", "\n", "    ", "\"\"\"Perform setup for special modes (e.g., FP16, DataParallel, and/or DistributedDataParallel.\n\n    Args:\n        model (nn.Module): torch model object.\n        optimizer: TODO\n        fp16 (bool): True to enable FP16 mode.\n        fp16_opt_level (str): Apex AMP optimization level default mode identifier.\n        n_gpu: number of GPUs.\n        local_rank (int): Which GPU the script should use in DistributedDataParallel mode.\n\n    Notes:\n        Initialization steps performed in init_cuda_from_args() set n_gpu = 1 when local_rank != -1.\n\n    Returns:\n        Model and optimizer with the specified special configuration.\n\n    \"\"\"", "\n", "if", "fp16", ":", "\n", "        ", "model", ",", "optimizer", "=", "fp16ize", "(", "model", "=", "model", ",", "optimizer", "=", "optimizer", ",", "fp16_opt_level", "=", "fp16_opt_level", ")", "\n", "", "if", "n_gpu", ">", "1", ":", "\n", "        ", "model", "=", "parallelize_gpu", "(", "model", "=", "model", ")", "\n", "", "if", "local_rank", "!=", "-", "1", ":", "\n", "        ", "model", "=", "parallelize_dist", "(", "model", "=", "model", ",", "local_rank", "=", "local_rank", ")", "\n", "", "return", "model", ",", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_setup.special_model_setup": [[215, 228], ["model_setup.raw_special_model_setup"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_setup.raw_special_model_setup"], ["", "def", "special_model_setup", "(", "\n", "model_wrapper", ",", "optimizer_scheduler", ",", "fp16", ",", "fp16_opt_level", ",", "n_gpu", ",", "local_rank", "\n", ")", ":", "\n", "    ", "model", ",", "optimizer", "=", "raw_special_model_setup", "(", "\n", "model", "=", "model_wrapper", ".", "model", ",", "\n", "optimizer", "=", "optimizer_scheduler", ".", "optimizer", ",", "\n", "fp16", "=", "fp16", ",", "\n", "fp16_opt_level", "=", "fp16_opt_level", ",", "\n", "n_gpu", "=", "n_gpu", ",", "\n", "local_rank", "=", "local_rank", ",", "\n", ")", "\n", "model_wrapper", ".", "model", "=", "model", "\n", "optimizer_scheduler", ".", "optimizer", "=", "optimizer", "\n", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.runner.complex_backpropagate": [[12, 30], ["loss.mean.mean", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "loss.mean.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "amp.scale_loss", "scaled_loss.backward", "amp.master_params", "model.parameters"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.mean"], ["def", "complex_backpropagate", "(", "\n", "loss", ",", "optimizer", ",", "model", ",", "fp16", ",", "n_gpu", ",", "gradient_accumulation_steps", ",", "max_grad_norm", "\n", ")", ":", "\n", "    ", "if", "n_gpu", ">", "1", ":", "\n", "        ", "loss", "=", "loss", ".", "mean", "(", ")", "# mean() to average on multi-gpu.", "\n", "", "if", "gradient_accumulation_steps", ">", "1", ":", "\n", "        ", "loss", "=", "loss", "/", "gradient_accumulation_steps", "\n", "", "if", "fp16", ":", "\n", "# noinspection PyUnresolvedReferences,PyPackageRequirements", "\n", "        ", "from", "apex", "import", "amp", "\n", "\n", "with", "amp", ".", "scale_loss", "(", "loss", ",", "optimizer", ")", "as", "scaled_loss", ":", "\n", "            ", "scaled_loss", ".", "backward", "(", ")", "\n", "", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "amp", ".", "master_params", "(", "optimizer", ")", ",", "max_grad_norm", ")", "\n", "", "else", ":", "\n", "        ", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "max_grad_norm", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.runner.get_train_dataloader_from_cache": [[32, 75], ["train_cache.get_iterable_dataset", "jiant.DataLoaderWithLength", "train_cache.get_uniterable_dataset", "os.path.exists", "pickle.load", "jiant.MatchedRandomBatchSampler", "jiant.DataLoader", "KeyError", "open"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.ChunkedFilesDataCache.get_iterable_dataset", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.ChunkedFilesDataCache.get_uniterable_dataset"], ["", "def", "get_train_dataloader_from_cache", "(", "\n", "train_cache", ":", "caching", ".", "ChunkedFilesDataCache", ",", "\n", "task", ",", "\n", "train_batch_size", ":", "int", ",", "\n", "batch_method", ":", "str", ",", "\n", "min_batch_size", ":", "int", ",", "\n", "total_batches", ":", "int", ",", "\n", "matchlist_pickle_path", ":", "int", ",", "\n", ")", ":", "\n", "# TODO: Expose buffer_size parameter  (Issue #50)", "\n", "    ", "if", "batch_method", "==", "'default'", ":", "\n", "        ", "dataset", "=", "train_cache", ".", "get_iterable_dataset", "(", "buffer_size", "=", "10000", ",", "shuffle", "=", "True", ")", "\n", "train_dataloader", "=", "torch_utils", ".", "DataLoaderWithLength", "(", "\n", "dataset", "=", "dataset", ",", "batch_size", "=", "train_batch_size", ",", "collate_fn", "=", "task", ".", "collate_fn", ",", "\n", ")", "\n", "", "elif", "batch_method", "==", "'clustered'", ":", "\n", "        ", "dataset", "=", "train_cache", ".", "get_uniterable_dataset", "(", "buffer_size", "=", "10000", ")", "\n", "assert", "(", "total_batches", ">", "0", ")", ",", "f\"Must define total number of batches to generate. Given: {total_batches}.\"", "\n", "assert", "(", "train_batch_size", ">", "0", ")", ",", "f\"Max batch size must be greater than zero. Given: {train_batch_size}.\"", "\n", "\n", "# Currently only supports pickled matchlist. Could potentially incorporate matching, but may take long", "\n", "# depending on size of data.", "\n", "\n", "assert", "os", ".", "path", ".", "exists", "(", "matchlist_pickle_path", ")", ",", "f\"Must first create pickled match list or path given does not exist. Given: {matchlist_pickle_path}\"", "\n", "match_list", "=", "pickle", ".", "load", "(", "open", "(", "matchlist_pickle_path", ",", "'rb'", ")", ")", "\n", "\n", "matched_random_batch_sampler", "=", "torch_utils", ".", "MatchedRandomBatchSampler", "(", "\n", "min_batch_size", "=", "min_batch_size", ",", "\n", "max_batch_size", "=", "train_batch_size", ",", "\n", "drop_last", "=", "True", ",", "\n", "match_list", "=", "match_list", ",", "\n", "total_batches", "=", "total_batches", ",", "\n", ")", "\n", "\n", "train_dataloader", "=", "torch_utils", ".", "DataLoader", "(", "\n", "dataset", "=", "dataset", ",", "\n", "collate_fn", "=", "task", ".", "collate_fn", ",", "\n", "batch_sampler", "=", "matched_random_batch_sampler", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "KeyError", "(", "f\"Batching method not supported: {batch_method}\"", ")", "\n", "\n", "", "return", "train_dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.runner.get_eval_dataloader_from_cache": [[77, 91], ["eval_cache.get_iterable_dataset", "jiant.DataLoaderWithLength"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.ChunkedFilesDataCache.get_iterable_dataset"], ["", "def", "get_eval_dataloader_from_cache", "(", "\n", "eval_cache", ":", "caching", ".", "ChunkedFilesDataCache", ",", "\n", "task", ",", "\n", "eval_batch_size", ":", "int", ",", "\n", "subset_num", "=", "None", ",", "\n", "explicit_subset", "=", "None", ",", "\n", ")", ":", "\n", "    ", "dataset", "=", "eval_cache", ".", "get_iterable_dataset", "(", "\n", "buffer_size", "=", "10000", ",", "shuffle", "=", "False", ",", "subset_num", "=", "subset_num", ",", "explicit_subset", "=", "explicit_subset", ",", "\n", ")", "\n", "eval_dataloader", "=", "torch_utils", ".", "DataLoaderWithLength", "(", "\n", "dataset", "=", "dataset", ",", "batch_size", "=", "eval_batch_size", ",", "collate_fn", "=", "task", ".", "collate_fn", ",", "\n", ")", "\n", "return", "eval_dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.runner.save_model_with_metadata": [[93, 99], ["torch.save", "torch.save", "jiant.write_json", "jiant.get_model_for_saving().state_dict", "os.path.join", "os.path.join", "jiant.get_model_for_saving"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.CheckpointSaver.save", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.CheckpointSaver.save", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.write_json", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_setup.OptimizerScheduler.state_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.torch_utils.get_model_for_saving"], ["", "def", "save_model_with_metadata", "(", "model", ":", "nn", ".", "Module", ",", "metadata", ":", "dict", ",", "output_dir", ":", "str", ",", "file_name", "=", "\"model\"", ")", ":", "\n", "    ", "torch", ".", "save", "(", "\n", "torch_utils", ".", "get_model_for_saving", "(", "model", ")", ".", "state_dict", "(", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "output_dir", ",", "f\"{file_name}.p\"", ")", ",", "\n", ")", "\n", "py_io", ".", "write_json", "(", "metadata", ",", "os", ".", "path", ".", "join", "(", "output_dir", ",", "f\"{file_name}.metadata.json\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.runner.compare_steps_max_steps": [[101, 103], ["None"], "function", ["None"], ["", "def", "compare_steps_max_steps", "(", "step", ",", "max_steps", ")", ":", "\n", "    ", "return", "max_steps", "is", "not", "None", "and", "max_steps", "!=", "-", "1", "and", "step", ">=", "max_steps", "\n", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.initialization.quick_init": [[21, 43], ["initialization.init_server_logging", "initialization.init_cuda_from_args", "initialization.init_seed", "initialization.init_output_dir", "initialization.init_log_writer", "initialization.save_args", "initialization.QuickInitContainer", "initialization.print_args"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.initialization.init_server_logging", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.initialization.init_cuda_from_args", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.initialization.init_seed", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.initialization.init_output_dir", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.initialization.init_log_writer", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.initialization.save_args", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.initialization.print_args"], ["", "def", "quick_init", "(", "args", ",", "verbose", "=", "True", ")", "->", "QuickInitContainer", ":", "\n", "    ", "\"\"\"Sets up logging, initializes device(s) and random seed, prepares output dir, and saves args.\"\n\n    Args:\n        args (RunConfiguration): configuration carrying command line args specifying run params.\n        verbose (bool): whether to print the input run config and the run config as saved.\n\n    Returns:\n        QuickInitContainer specifying the run's device, GPU count, and logging configuration.\n\n    \"\"\"", "\n", "if", "verbose", ":", "\n", "        ", "print_args", "(", "args", ")", "\n", "", "init_server_logging", "(", "server_ip", "=", "args", ".", "server_ip", ",", "server_port", "=", "args", ".", "server_port", ",", "verbose", "=", "verbose", ")", "\n", "device", ",", "n_gpu", "=", "init_cuda_from_args", "(", "\n", "no_cuda", "=", "args", ".", "no_cuda", ",", "local_rank", "=", "args", ".", "local_rank", ",", "fp16", "=", "args", ".", "fp16", ",", "verbose", "=", "verbose", ",", "\n", ")", "\n", "args", ".", "seed", "=", "init_seed", "(", "given_seed", "=", "args", ".", "seed", ",", "n_gpu", "=", "n_gpu", ",", "verbose", "=", "verbose", ")", "\n", "init_output_dir", "(", "output_dir", "=", "args", ".", "output_dir", ",", "force_overwrite", "=", "args", ".", "force_overwrite", ")", "\n", "log_writer", "=", "init_log_writer", "(", "output_dir", "=", "args", ".", "output_dir", ",", "post", "=", "args", ".", "custom_logger_post", ")", "\n", "save_args", "(", "args", "=", "args", ",", "verbose", "=", "verbose", ")", "\n", "return", "QuickInitContainer", "(", "device", "=", "device", ",", "n_gpu", "=", "n_gpu", ",", "log_writer", "=", "log_writer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.initialization.init_server_logging": [[45, 62], ["ptvsd.enable_attach", "ptvsd.wait_for_attach", "print"], "function", ["None"], ["", "def", "init_server_logging", "(", "server_ip", ",", "server_port", ",", "verbose", "=", "True", ")", ":", "\n", "    ", "\"\"\"Sets ups Python Tools for Visual Studio debug (ptvsd) server.\n\n    Adapted from Hugging Face template: https://github.com/huggingface/transformers/blob/ac99217\n    e92c43066af7ec96554054d75532565d7/templates/adding_a_new_example_script/run_xxx.py#L569-L576\n\n    \"\"\"", "\n", "if", "server_ip", "and", "server_port", ":", "\n", "# Distant debugging, see:", "\n", "# https://code.visualstudio.com/docs/python/debugging#_attach-to-a-local-script", "\n", "# noinspection PyUnresolvedReferences,PyPackageRequirements", "\n", "        ", "import", "ptvsd", "\n", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\"Waiting for debugger attach\"", ")", "\n", "", "ptvsd", ".", "enable_attach", "(", "address", "=", "(", "server_ip", ",", "server_port", ")", ",", "redirect_output", "=", "True", ")", "\n", "ptvsd", ".", "wait_for_attach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.initialization.init_cuda_from_args": [[64, 106], ["torch.device", "torch.cuda.device_count", "torch.cuda.set_device", "torch.device", "torch.distributed.init_process_group", "print", "bool", "torch.cuda.is_available"], "function", ["None"], ["", "", "def", "init_cuda_from_args", "(", "no_cuda", ",", "local_rank", ",", "fp16", ",", "verbose", "=", "True", ")", ":", "\n", "    ", "\"\"\"Perform initial CUDA setup for DistributedDataParallel, DataParallel or w/o CUDA configs.\n\n    Adapted from Hugging Face template: https://github.com/huggingface/transformers/blob/ac99217e92\n    c43066af7ec96554054d75532565d7/templates/adding_a_new_example_script/run_xxx.py#L578-L586\n\n    Args:\n        no_cuda (bool): True to ignore CUDA devices (i.e., use CPU instead).\n        local_rank (int): Which GPU the script should use in DistributedDataParallel mode.\n        fp16 (bool): True for half-precision mode.\n        verbose: True to print device, device count, and whether training is distributed or FP16.\n\n    Notes:\n        local_rank == -1 is used to indicate that DistributedDataParallel should be disabled.\n        n_gpu > 1 is used to indicate that DataParallel should be used. Currently, local_rank == -1\n        sets n_gpu = 1 even if torch.cuda.device_count() would show more than one GPU is available.\n\n    Returns:\n        (tuple): tuple containing:\n            device (str): string handle for device.\n            n_gpu (int): number of GPU devices.\n\n    \"\"\"", "\n", "# TODO break local_rank == -1 and no_cuda into separate cases to make the logic easier to read.", "\n", "if", "local_rank", "==", "-", "1", "or", "no_cuda", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "not", "no_cuda", "else", "\"cpu\"", ")", "\n", "n_gpu", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "", "else", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "local_rank", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ",", "local_rank", ")", "\n", "n_gpu", "=", "1", "\n", "# Initializes the distributed backend which will take care of synchronizing nodes/GPUs", "\n", "# noinspection PyUnresolvedReferences", "\n", "torch", ".", "distributed", ".", "init_process_group", "(", "backend", "=", "\"nccl\"", ")", "\n", "", "if", "verbose", ":", "\n", "        ", "print", "(", "\n", "\"device: {} n_gpu: {}, distributed training: {}, 16-bits training: {}\"", ".", "format", "(", "\n", "device", ",", "n_gpu", ",", "bool", "(", "local_rank", "!=", "-", "1", ")", ",", "fp16", "\n", ")", "\n", ")", "\n", "\n", "", "return", "device", ",", "n_gpu", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.initialization.init_seed": [[108, 137], ["initialization.get_seed", "random.seed", "numpy.random.seed", "torch.manual_seed", "print", "torch.cuda.manual_seed_all"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.initialization.get_seed"], ["", "def", "init_seed", "(", "given_seed", ",", "n_gpu", ",", "verbose", "=", "True", ")", ":", "\n", "    ", "\"\"\"Initializes random seeds for sources of randomness. If seed is -1, randomly select seed.\n\n    Sets the random seed for sources of randomness (numpy, torch and python random). If seed is\n    specified as -1, the seed will be randomly selected and used to initialize all random seeds.\n    The value used to initialize the random seeds is returned.\n\n    Args:\n        given_seed (int): random seed.\n        n_gpu (int): number of GPUs.\n        verbose: whether to print random seed.\n\n    Returns:\n        int: value used to initialize random seeds.\n\n    \"\"\"", "\n", "used_seed", "=", "get_seed", "(", "given_seed", ")", "\n", "random", ".", "seed", "(", "used_seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "used_seed", ")", "\n", "torch", ".", "manual_seed", "(", "used_seed", ")", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "\"Using seed: {}\"", ".", "format", "(", "used_seed", ")", ")", "\n", "\n", "", "if", "n_gpu", ">", "0", ":", "\n", "# noinspection PyUnresolvedReferences", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed_all", "(", "used_seed", ")", "\n", "\n", "# MAKE SURE THIS IS SET", "\n", "", "return", "used_seed", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.initialization.init_output_dir": [[139, 153], ["os.makedirs", "initialization.is_done", "RuntimeError"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.initialization.is_done"], ["", "def", "init_output_dir", "(", "output_dir", ",", "force_overwrite", ")", ":", "\n", "    ", "\"\"\"Create output directory (and all intermediate dirs on the path) if it doesn't exist.\n\n    Args:\n        output_dir (str): output directory path.\n        force_overwrite (bool): If False and output dir is complete, raise RuntimeError.\n\n    Raises:\n        RuntimeError if overwrite option is not enabled and output dir contains \"DONE\" signal file.\n\n    \"\"\"", "\n", "if", "not", "force_overwrite", "and", "is_done", "(", "output_dir", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "f\"'{output_dir}' run is already done, and not forcing overwrite\"", ")", "\n", "", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.initialization.init_log_writer": [[155, 157], ["jiant.ZLogger", "os.path.join", "str", "int", "time.time"], "function", ["None"], ["", "def", "init_log_writer", "(", "output_dir", ",", "post", ")", ":", "\n", "    ", "return", "zlog", ".", "ZLogger", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "f\"{str(int(time.time()))}{post}\"", ")", ",", "overwrite", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.initialization.print_args": [[159, 162], ["vars().items", "print", "vars"], "function", ["None"], ["", "def", "print_args", "(", "args", ")", ":", "\n", "    ", "for", "k", ",", "v", "in", "vars", "(", "args", ")", ".", "items", "(", ")", ":", "\n", "        ", "print", "(", "\"  {}: {}\"", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.initialization.save_args": [[164, 186], ["json.dumps", "vars", "print", "open", "f.write", "open", "f.write", "os.path.join", "os.path.join", "json.dumps"], "function", ["None"], ["", "", "def", "save_args", "(", "args", ",", "verbose", "=", "True", ",", "matched", "=", "False", ")", ":", "\n", "    ", "\"\"\"Dumps RunConfiguration to a json file.\n\n    Args:\n        args (RunConfiguration): configuration carrying command line args specifying run params.\n        verbose (bool): If True, print the arg object that was written to file.\n\n    \"\"\"", "\n", "formatted_args", "=", "json", ".", "dumps", "(", "vars", "(", "args", ")", ",", "indent", "=", "2", ")", "\n", "if", "args", ".", "args_jsonl", ":", "\n", "        ", "if", "matched", ":", "\n", "            ", "args_name", "=", "\"args_matched.jsonl\"", "\n", "", "else", ":", "\n", "            ", "args_name", "=", "\"args.jsonl\"", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "args_name", ")", ",", "\"a\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "f\"{json.dumps(formatted_args)}\\n\"", ")", "\n", "", "", "else", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\"args.json\"", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "formatted_args", ")", "\n", "", "", "if", "verbose", ":", "\n", "        ", "print", "(", "formatted_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.initialization.get_seed": [[188, 202], ["int", "numpy.random.randint"], "function", ["None"], ["", "", "def", "get_seed", "(", "seed", ")", ":", "\n", "    ", "\"\"\"Get random seed if seed is specified as -1, otherwise return seed.\n\n    Args:\n        seed (int): random seed.\n\n    Returns:\n        int: Random seed if seed is specified as -1, otherwise returns the provided input seed.\n\n    \"\"\"", "\n", "if", "seed", "==", "-", "1", ":", "\n", "        ", "return", "int", "(", "np", ".", "random", ".", "randint", "(", "0", ",", "2", "**", "32", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "seed", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.initialization.write_done": [[204, 206], ["jiant.write_file", "os.path.join"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.write_file"], ["", "", "def", "write_done", "(", "output_dir", ")", ":", "\n", "    ", "py_io", ".", "write_file", "(", "\"DONE\"", ",", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"DONE\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.initialization.is_done": [[208, 210], ["os.path.exists", "os.path.join"], "function", ["None"], ["", "def", "is_done", "(", "output_dir", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"DONE\"", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.distributed.only_first_process": [[5, 17], ["torch.distributed.barrier", "torch.distributed.barrier"], "function", ["None"], ["@", "contextmanager", "\n", "def", "only_first_process", "(", "local_rank", ")", ":", "\n", "    ", "if", "local_rank", "not", "in", "[", "-", "1", ",", "0", "]", ":", "\n", "# noinspection PyUnresolvedReferences", "\n", "        ", "torch", ".", "distributed", ".", "barrier", "(", ")", "\n", "\n", "", "try", ":", "\n", "        ", "yield", "\n", "", "finally", ":", "\n", "        ", "if", "local_rank", "==", "0", ":", "\n", "# noinspection PyUnresolvedReferences", "\n", "            ", "torch", ".", "distributed", ".", "barrier", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.metarunner.AbstractMetarunner.begin_training": [[2, 4], ["NotImplementedError"], "methods", ["None"], ["    ", "def", "begin_training", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.metarunner.AbstractMetarunner.yield_train_step": [[5, 7], ["NotImplementedError"], "methods", ["None"], ["", "def", "yield_train_step", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.metarunner.AbstractMetarunner.should_save_model": [[8, 10], ["NotImplementedError"], "methods", ["None"], ["", "def", "should_save_model", "(", "self", ")", "->", "bool", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.metarunner.AbstractMetarunner.save_model": [[11, 13], ["NotImplementedError"], "methods", ["None"], ["", "def", "save_model", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.metarunner.AbstractMetarunner.should_save_checkpoint": [[14, 16], ["NotImplementedError"], "methods", ["None"], ["", "def", "should_save_checkpoint", "(", "self", ")", "->", "bool", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.metarunner.AbstractMetarunner.save_checkpoint": [[17, 19], ["NotImplementedError"], "methods", ["None"], ["", "def", "save_checkpoint", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.metarunner.AbstractMetarunner.should_eval_model": [[20, 22], ["NotImplementedError"], "methods", ["None"], ["", "def", "should_eval_model", "(", "self", ")", "->", "bool", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.metarunner.AbstractMetarunner.eval_model": [[23, 25], ["NotImplementedError"], "methods", ["None"], ["", "def", "eval_model", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.metarunner.AbstractMetarunner.should_break_training": [[26, 28], ["NotImplementedError"], "methods", ["None"], ["", "def", "should_break_training", "(", "self", ")", "->", "bool", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.metarunner.AbstractMetarunner.done_training": [[29, 31], ["NotImplementedError"], "methods", ["None"], ["", "def", "done_training", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.metarunner.AbstractMetarunner.returned_result": [[32, 34], ["NotImplementedError"], "methods", ["None"], ["", "def", "returned_result", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.metarunner.AbstractMetarunner.run_train_loop": [[35, 55], ["metarunner.AbstractMetarunner.begin_training", "metarunner.AbstractMetarunner.yield_train_step", "metarunner.AbstractMetarunner.eval_model", "metarunner.AbstractMetarunner.done_training", "metarunner.AbstractMetarunner.returned_result", "metarunner.AbstractMetarunner.should_save_model", "metarunner.AbstractMetarunner.should_save_checkpoint", "metarunner.AbstractMetarunner.should_eval_model", "metarunner.AbstractMetarunner.should_break_training", "metarunner.AbstractMetarunner.save_model", "metarunner.AbstractMetarunner.save_checkpoint", "metarunner.AbstractMetarunner.eval_model"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.JiantMetarunner.begin_training", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.JiantMetarunner.yield_train_step", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.JiantMetarunner.eval_model", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.JiantMetarunner.done_training", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.JiantMetarunner.returned_result", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.JiantMetarunner.should_save_model", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.JiantMetarunner.should_save_checkpoint", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.JiantMetarunner.should_eval_model", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.JiantMetarunner.should_break_training", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.JiantMetarunner.save_model", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.JiantMetarunner.save_checkpoint", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.JiantMetarunner.eval_model"], ["", "def", "run_train_loop", "(", "self", ")", ":", "\n", "        ", "self", ".", "begin_training", "(", ")", "\n", "\n", "for", "_", "in", "self", ".", "yield_train_step", "(", ")", ":", "\n", "            ", "if", "self", ".", "should_save_model", "(", ")", ":", "\n", "                ", "self", ".", "save_model", "(", ")", "\n", "\n", "", "if", "self", ".", "should_save_checkpoint", "(", ")", ":", "\n", "                ", "self", ".", "save_checkpoint", "(", ")", "\n", "\n", "", "if", "self", ".", "should_eval_model", "(", ")", ":", "\n", "                ", "self", ".", "eval_model", "(", ")", "\n", "\n", "", "if", "self", ".", "should_break_training", "(", ")", ":", "\n", "                ", "break", "\n", "\n", "", "", "self", ".", "eval_model", "(", ")", "\n", "self", ".", "done_training", "(", ")", "\n", "\n", "return", "self", ".", "returned_result", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.core.BatchMixin.to": [[43, 47], ["core.BatchMixin.__class__", "core.BatchMixin._val_to_device", "core.BatchMixin.to_dict().items", "core.BatchMixin.to_dict"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.core.BatchMixin._val_to_device", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.ValState.to_dict"], ["", "if", "argparse_kwargs", ".", "get", "(", "\"action\"", ",", "None", ")", "==", "\"store_true\"", ":", "\n", "        ", "default", "=", "False", "\n", "\n", "", "return", "attr", ".", "attr", "(", "\n", "default", "=", "default", ",", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.core.BatchMixin._val_to_device": [[49, 55], ["isinstance", "v.to"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.core.BatchTuple.to"], ["repr", "=", "repr", ",", "\n", "eq", "=", "eq", ",", "\n", "order", "=", "order", ",", "\n", "hash", "=", "hash", ",", "\n", "init", "=", "init", ",", "\n", "converter", "=", "converter", ",", "\n", "metadata", "=", "{", "\"opt_string_ls\"", ":", "opt_string_ls", ",", "\"argparse_kwargs\"", ":", "argparse_kwargs", "}", ",", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.core.BatchMixin.__len__": [[56, 58], ["len", "getattr", "core.BatchMixin.get_fields"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.ExtendedDataClassMixin.get_fields"], ["kw_only", "=", "True", ",", "\n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.core.BaseExample.tokenize": [[61, 63], ["None"], "methods", ["None"], ["# TODO: Write more checks/tests for the parser creation in general  (Issue #57)", "\n", "    ", "for", "attribute", "in", "class_with_attributes", ".", "__attrs_attrs__", ":", "\n", "        ", "if", "\"argparse_kwargs\"", "in", "attribute", ".", "metadata", ":", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.core.BaseTokenizedExample.featurize": [[66, 68], ["None"], "methods", ["None"], ["is_positional", "=", "\"nargs\"", "in", "argparse_kwargs", "\n", "if", "not", "is_positional", ":", "\n", "                ", "if", "attribute", ".", "default", "is", "attr", ".", "NOTHING", ":", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.core.BaseBatch.from_data_rows": [[75, 78], ["None"], "methods", ["None"], ["", "else", ":", "\n", "                ", "argparse_arg_name", "=", "f\"--{attribute.name}\"", "\n", "\n", "", "parser", ".", "add_argument", "(", "argparse_arg_name", ",", "*", "opt_string_ls", ",", "**", "argparse_kwargs", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.core.BatchTuple.to": [[101, 103], ["core.BatchTuple", "core.BatchTuple.batch.to"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.core.BatchTuple.to"], ["\n", "# === Methods === #", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.core.Task.__init__": [[129, 132], ["None"], "methods", ["None"], ["# == Instance Methods", "\n", "", "def", "to_dict", "(", "self", ")", ":", "\n", "    ", "config_dict", "=", "{", "}", "\n", "for", "attribute", "in", "inspect", ".", "getfullargspec", "(", "self", ".", "__class__", ")", ".", "kwonlyargs", ":", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.core.Task.train_path": [[133, 136], ["None"], "methods", ["None"], ["        ", "config_dict", "[", "attribute", "]", "=", "getattr", "(", "self", ",", "attribute", ")", "\n", "", "return", "config_dict", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.core.Task.val_path": [[137, 140], ["None"], "methods", ["None"], ["", "def", "to_json", "(", "self", ")", ":", "\n", "    ", "serialized_dict", "=", "self", ".", "to_dict", "(", ")", "\n", "for", "key", ",", "val", "in", "serialized_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "val", ",", "pathlib", ".", "Path", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.core.Task.test_path": [[141, 144], ["None"], "methods", ["None"], ["            ", "serialized_dict", "[", "key", "]", "=", "str", "(", "val", ")", "\n", "", "", "return", "json", ".", "dumps", "(", "serialized_dict", ",", "indent", "=", "2", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.core.Task.collate_fn": [[145, 170], ["isinstance", "core.metadata_collate_fn", "jiant.utils.python.datastructures.combine_dicts", "cls.Batch.get_annotations().items", "cls.Batch", "TypeError", "set", "core.flat_collate_fn", "jiant.utils.python.datastructures.combine_dicts.pop", "elem.keys", "data_rows[].to_dict", "cls.Batch.get_annotations", "batch_dict[].float", "getattr", "type"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.core.metadata_collate_fn", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.combine_dicts", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.core.flat_collate_fn", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.task_sampler.TimeDependentProbMultiTaskSampler.pop", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.ValState.to_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.ExtendedDataClassMixin.get_annotations"], ["", "def", "_inst_copy", "(", "self", ")", ":", "\n", "    ", "return", "copylib", ".", "deepcopy", "(", "self", ")", "\n", "\n", "\n", "", "class", "RunConfig", ":", "\n", "    ", "@", "classmethod", "\n", "def", "run_cli", "(", "cls", ",", "prog", "=", "None", ",", "description", "=", "None", ")", ":", "\n", "        ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "prog", "=", "prog", ",", "description", "=", "description", ")", "\n", "return", "cls", ".", "run_from_parser", "(", "parser", "=", "parser", ")", "\n", "\n", "", "@", "classmethod", "\n", "def", "run_from_parser", "(", "cls", ",", "parser", ")", ":", "\n", "        ", "update_parser", "(", "\n", "parser", "=", "parser", ",", "class_with_attributes", "=", "cls", ",", "\n", ")", "\n", "result", "=", "read_parser", "(", "parser", "=", "parser", ",", "class_with_attributes", "=", "cls", ")", "\n", "assert", "isinstance", "(", "result", ",", "cls", ")", "\n", "return", "result", "\n", "\n", "", "@", "classmethod", "\n", "def", "get_attr_dict", "(", "cls", ")", ":", "\n", "# noinspection PyUnresolvedReferences", "\n", "        ", "return", "{", "attr_", ".", "name", ":", "attr_", "for", "attr_", "in", "cls", ".", "__attrs_attrs__", "}", "\n", "\n", "", "@", "classmethod", "\n", "def", "run_cli_json_prepend", "(", "cls", ",", "cl_args", "=", "None", ",", "prog", "=", "None", ",", "description", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.core.data_row_collate_fn": [[80, 82], ["isinstance"], "function", ["None"], ["\n", "", "", "", "def", "read_parser", "(", "parser", ",", "class_with_attributes", ":", "Any", ",", "skip_non_class_attributes", "=", "None", ",", "args", "=", "None", ")", ":", "\n", "    ", "attribute_name_set", "=", "{", "attribute", ".", "name", "for", "attribute", "in", "class_with_attributes", ".", "__attrs_attrs__", "}", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.core.metadata_collate_fn": [[105, 107], ["metadata[].keys"], "function", ["None"], ["", "", "def", "run_cli", "(", "cls", ",", "args", "=", "None", ",", "prog", "=", "None", ",", "description", "=", "None", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "prog", "=", "prog", ",", "description", "=", "description", ")", "\n", "update_parser", "(", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.core.flat_collate_fn": [[109, 118], ["isinstance", "torch.default_collate", "isinstance", "TypeError", "type"], "function", ["None"], [")", "\n", "result", "=", "read_parser", "(", "parser", "=", "parser", ",", "class_with_attributes", "=", "cls", ",", "args", "=", "args", ")", "\n", "assert", "isinstance", "(", "result", ",", "cls", ")", "\n", "return", "result", "\n", "\n", "\n", "", "def", "from_json", "(", "cls", ",", "json_string", ")", ":", "\n", "    ", "return", "cls", "(", "**", "json", ".", "loads", "(", "json_string", ")", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.retrieval.get_task_class": [[73, 77], ["issubclass"], "function", ["None"], ["def", "get_task_class", "(", "task_name", ":", "str", ")", ":", "\n", "    ", "task_class", "=", "TASK_DICT", "[", "task_name", "]", "\n", "assert", "issubclass", "(", "task_class", ",", "Task", ")", "\n", "return", "task_class", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.retrieval.create_task_from_config": [[79, 105], ["retrieval.get_task_class", "config[].keys", "config.get", "get_task_class.", "print", "config[].items", "isinstance", "os.path.join", "print", "os.path.isabs"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.retrieval.get_task_class"], ["", "def", "create_task_from_config", "(", "config", ":", "dict", ",", "base_path", ":", "Optional", "[", "str", "]", "=", "None", ",", "verbose", ":", "bool", "=", "False", ")", ":", "\n", "    ", "\"\"\"Create task instance from task config.\n\n    Args:\n        config (Dict): task config map.\n        base_path (str): if the path is not absolute, path is assumed to be relative to base_path.\n        verbose (bool): True if task config should be printed during task creation.\n\n    Returns:\n        Task instance.\n\n    \"\"\"", "\n", "task_class", "=", "get_task_class", "(", "config", "[", "\"task\"", "]", ")", "\n", "for", "k", "in", "config", "[", "\"paths\"", "]", ".", "keys", "(", ")", ":", "\n", "        ", "path", "=", "config", "[", "\"paths\"", "]", "[", "k", "]", "\n", "# TODO: Refactor paths  (Issue #54)", "\n", "if", "isinstance", "(", "path", ",", "str", ")", "and", "not", "os", ".", "path", ".", "isabs", "(", "path", ")", ":", "\n", "            ", "assert", "base_path", "\n", "config", "[", "\"paths\"", "]", "[", "k", "]", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "path", ")", "\n", "", "", "task_kwargs", "=", "config", ".", "get", "(", "\"kwargs\"", ",", "{", "}", ")", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "task_class", ".", "__name__", ")", "\n", "for", "k", ",", "v", "in", "config", "[", "\"paths\"", "]", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "f\"  [{k}]: {v}\"", ")", "\n", "# noinspection PyArgumentList", "\n", "", "", "return", "task_class", "(", "name", "=", "config", "[", "\"name\"", "]", ",", "path_dict", "=", "config", "[", "\"paths\"", "]", ",", "**", "task_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.retrieval.create_task_from_config_path": [[107, 120], ["retrieval.create_task_from_config", "jiant.utils.python.io.read_json", "os.path.split"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.retrieval.create_task_from_config", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_json"], ["", "def", "create_task_from_config_path", "(", "config_path", ":", "str", ",", "verbose", ":", "bool", "=", "False", ")", ":", "\n", "    ", "\"\"\"Creates task instance from task config filepath.\n\n    Args:\n        config_path (str): config filepath.\n        verbose (bool): True if task config should be printed during task creation.\n\n    Returns:\n        Task instance.\n\n    \"\"\"", "\n", "return", "create_task_from_config", "(", "\n", "read_json", "(", "config_path", ")", ",", "base_path", "=", "os", ".", "path", ".", "split", "(", "config_path", ")", "[", "0", "]", ",", "verbose", "=", "verbose", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.utils.InclusiveSpan.to_slice": [[10, 12], ["slice"], "methods", ["None"], ["def", "to_slice", "(", "self", ")", ":", "\n", "        ", "return", "slice", "(", "self", ".", "start", ",", "self", ".", "end", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.utils.InclusiveSpan.to_inclusive": [[13, 15], ["None"], "methods", ["None"], ["", "def", "to_inclusive", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.utils.InclusiveSpan.to_exclusive": [[16, 18], ["utils.ExclusiveSpan"], "methods", ["None"], ["", "def", "to_exclusive", "(", "self", ")", ":", "\n", "        ", "return", "ExclusiveSpan", "(", "start", "=", "self", ".", "start", ",", "end", "=", "self", ".", "end", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.utils.ExclusiveSpan.to_slice": [[24, 26], ["slice"], "methods", ["None"], ["def", "to_slice", "(", "self", ")", ":", "\n", "        ", "return", "slice", "(", "self", ".", "start", ",", "self", ".", "end", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.utils.ExclusiveSpan.to_inclusive": [[27, 29], ["utils.ExclusiveSpan"], "methods", ["None"], ["", "def", "to_inclusive", "(", "self", ")", ":", "\n", "        ", "return", "ExclusiveSpan", "(", "start", "=", "self", ".", "start", ",", "end", "=", "self", ".", "end", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.utils.ExclusiveSpan.to_exclusive": [[30, 32], ["None"], "methods", ["None"], ["", "def", "to_exclusive", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.utils.truncate_sequences": [[34, 53], ["numpy.array", "np.array.sum", "len", "len", "sum", "len", "zip", "numpy.argmax"], "function", ["None"], ["", "", "def", "truncate_sequences", "(", "tokens_ls", ",", "max_length", ",", "truncate_end", "=", "True", ")", ":", "\n", "    ", "if", "len", "(", "tokens_ls", ")", "==", "0", ":", "\n", "        ", "return", "[", "]", "\n", "", "if", "len", "(", "tokens_ls", ")", "==", "1", ":", "\n", "        ", "if", "truncate_end", ":", "\n", "            ", "return", "[", "tokens_ls", "[", "0", "]", "[", ":", "max_length", "]", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "tokens_ls", "[", "0", "]", "[", "-", "max_length", ":", "]", "]", "\n", "", "", "lengths", "=", "np", ".", "array", "(", "[", "len", "(", "tokens", ")", "for", "tokens", "in", "tokens_ls", "]", ")", "\n", "total_length", "=", "lengths", ".", "sum", "(", ")", "\n", "if", "total_length", "<", "max_length", ":", "\n", "        ", "return", "tokens_ls", "\n", "", "target_lengths", "=", "lengths", "\n", "while", "sum", "(", "target_lengths", ")", ">", "max_length", ":", "\n", "        ", "target_lengths", "[", "np", ".", "argmax", "(", "target_lengths", ")", "]", "-=", "1", "\n", "\n", "", "return", "[", "\n", "tokens", "[", ":", "target_length", "]", "if", "truncate_end", "else", "tokens", "[", "-", "target_length", ":", "]", "\n", "for", "tokens", ",", "target_length", "in", "zip", "(", "tokens_ls", ",", "target_lengths", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.utils.pad_to_max_seq_length": [[56, 79], ["len", "len"], "function", ["None"], ["", "def", "pad_to_max_seq_length", "(", "ls", ",", "max_seq_length", ",", "pad_idx", "=", "0", ",", "pad_right", "=", "True", ",", "check", "=", "True", ")", ":", "\n", "    ", "\"\"\"Apply padding to an input sequence.\n\n    Args:\n        ls: sequence to pad.\n        max_seq_length: max length up to which to apply padding.\n        pad_idx: element to use for padding.\n        pad_right: True if padding is applied to right side of sequence, False to pad on left side.\n        check: True if result length should be checked as under the max sequence length.\n\n    Returns:\n        Sequence with specified padding applied.\n\n    \"\"\"", "\n", "padding", "=", "[", "pad_idx", "]", "*", "(", "max_seq_length", "-", "len", "(", "ls", ")", ")", "\n", "if", "pad_right", ":", "\n", "        ", "result", "=", "ls", "+", "padding", "\n", "", "else", ":", "\n", "        ", "result", "=", "padding", "+", "ls", "\n", "\n", "", "if", "check", ":", "\n", "        ", "assert", "len", "(", "result", ")", "==", "max_seq_length", "\n", "", "return", "result", "\n", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.multirc.Example.tokenize": [[34, 42], ["multirc.TokenizedExample", "tokenizer.tokenize", "tokenizer.tokenize", "tokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.tokenize", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.tokenize", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.tokenize"], ["def", "tokenize", "(", "self", ",", "tokenizer", ")", ":", "\n", "        ", "return", "TokenizedExample", "(", "\n", "guid", "=", "self", ".", "guid", ",", "\n", "paragraph", "=", "tokenizer", ".", "tokenize", "(", "self", ".", "paragraph", ")", ",", "\n", "question", "=", "tokenizer", ".", "tokenize", "(", "self", ".", "question", ")", ",", "\n", "answer", "=", "tokenizer", ".", "tokenize", "(", "self", ".", "answer", ")", ",", "\n", "label_id", "=", "MultiRCTask", ".", "LABEL_TO_ID", "[", "self", ".", "label", "]", ",", "\n", "question_id", "=", "self", ".", "question_id", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.multirc.TokenizedExample.featurize": [[54, 106], ["jiant.tasks.lib.templates.shared.add_cls_token", "jiant.tasks.lib.templates.shared.create_input_set_from_tokens_and_segments", "multirc.DataRow", "jiant.tasks.utils.truncate_sequences", "numpy.array", "numpy.array", "numpy.array", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.add_cls_token", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.create_input_set_from_tokens_and_segments", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.utils.truncate_sequences"], ["def", "featurize", "(", "self", ",", "tokenizer", ",", "feat_spec", ")", ":", "\n", "\n", "        ", "if", "feat_spec", ".", "sep_token_extra", ":", "\n", "            ", "maybe_extra_sep", "=", "[", "tokenizer", ".", "sep_token", "]", "\n", "maybe_extra_sep_segment_id", "=", "[", "feat_spec", ".", "sequence_a_segment_id", "]", "\n", "special_tokens_count", "=", "4", "\n", "", "else", ":", "\n", "            ", "maybe_extra_sep", "=", "[", "]", "\n", "maybe_extra_sep_segment_id", "=", "[", "]", "\n", "special_tokens_count", "=", "3", "\n", "\n", "", "paragraph", "=", "truncate_sequences", "(", "\n", "tokens_ls", "=", "[", "self", ".", "paragraph", "]", ",", "\n", "max_length", "=", "(", "\n", "feat_spec", ".", "max_seq_length", "\n", "-", "special_tokens_count", "\n", "-", "len", "(", "self", ".", "question", ")", "\n", "-", "len", "(", "self", ".", "answer", ")", "\n", ")", ",", "\n", ")", "[", "0", "]", "\n", "unpadded_inputs", "=", "add_cls_token", "(", "\n", "unpadded_tokens", "=", "(", "\n", "paragraph", "\n", "+", "self", ".", "question", "\n", "+", "[", "tokenizer", ".", "sep_token", "]", "\n", "+", "maybe_extra_sep", "\n", "+", "self", ".", "answer", "\n", "+", "[", "tokenizer", ".", "sep_token", "]", "\n", ")", ",", "\n", "unpadded_segment_ids", "=", "(", "\n", "[", "feat_spec", ".", "sequence_a_segment_id", "]", "*", "len", "(", "paragraph", ")", "\n", "+", "[", "feat_spec", ".", "sequence_a_segment_id", "]", "*", "(", "len", "(", "self", ".", "question", ")", "+", "1", ")", "\n", "+", "maybe_extra_sep_segment_id", "\n", "+", "[", "feat_spec", ".", "sequence_b_segment_id", "]", "*", "(", "len", "(", "self", ".", "answer", ")", "+", "1", ")", "\n", ")", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "feat_spec", "=", "feat_spec", ",", "\n", ")", "\n", "input_set", "=", "create_input_set_from_tokens_and_segments", "(", "\n", "unpadded_tokens", "=", "unpadded_inputs", ".", "unpadded_tokens", ",", "\n", "unpadded_segment_ids", "=", "unpadded_inputs", ".", "unpadded_segment_ids", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "feat_spec", "=", "feat_spec", ",", "\n", ")", "\n", "return", "DataRow", "(", "\n", "guid", "=", "self", ".", "guid", ",", "\n", "input_ids", "=", "np", ".", "array", "(", "input_set", ".", "input_ids", ")", ",", "\n", "input_mask", "=", "np", ".", "array", "(", "input_set", ".", "input_mask", ")", ",", "\n", "segment_ids", "=", "np", ".", "array", "(", "input_set", ".", "segment_ids", ")", ",", "\n", "label_id", "=", "self", ".", "label_id", ",", "\n", "tokens", "=", "unpadded_inputs", ".", "unpadded_tokens", ",", "\n", "question_id", "=", "self", ".", "question_id", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.multirc.MultiRCTask.__init__": [[139, 144], ["jiant.tasks.core.Task.__init__"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.radam.AdamW.__init__"], ["def", "__init__", "(", "self", ",", "name", ",", "path_dict", ",", "filter_sentences", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "name", "=", "name", ",", "path_dict", "=", "path_dict", ")", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "path_dict", "=", "path_dict", "\n", "self", ".", "filter_sentences", "=", "filter_sentences", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.multirc.MultiRCTask.get_train_examples": [[145, 147], ["multirc.MultiRCTask._create_examples", "jiant.utils.python.io.read_json_lines"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_json_lines"], ["", "def", "get_train_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_json_lines", "(", "self", ".", "train_path", ")", ",", "set_type", "=", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.multirc.MultiRCTask.get_val_examples": [[148, 150], ["multirc.MultiRCTask._create_examples", "jiant.utils.python.io.read_json_lines"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_json_lines"], ["", "def", "get_val_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_json_lines", "(", "self", ".", "val_path", ")", ",", "set_type", "=", "\"val\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.multirc.MultiRCTask.get_test_examples": [[151, 153], ["multirc.MultiRCTask._create_examples", "jiant.utils.python.io.read_json_lines"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_json_lines"], ["", "def", "get_test_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_json_lines", "(", "self", ".", "test_path", ")", ",", "set_type", "=", "\"test\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.multirc.MultiRCTask._create_examples": [[154, 188], ["bs4.BeautifulSoup", "enumerate", "isinstance", "sentence_ls.append", "examples.append", "str().strip", "multirc.Example", "str", "enumerate"], "methods", ["None"], ["", "def", "_create_examples", "(", "self", ",", "lines", ",", "set_type", ")", ":", "\n", "        ", "examples", "=", "[", "]", "\n", "question_id", "=", "0", "\n", "for", "line", "in", "lines", ":", "\n", "            ", "soup", "=", "bs4", ".", "BeautifulSoup", "(", "line", "[", "\"passage\"", "]", "[", "\"text\"", "]", ",", "features", "=", "\"lxml\"", ")", "\n", "sentence_ls", "=", "[", "]", "\n", "for", "i", ",", "elem", "in", "enumerate", "(", "soup", ".", "html", ".", "body", ".", "contents", ")", ":", "\n", "                ", "if", "isinstance", "(", "elem", ",", "bs4", ".", "element", ".", "NavigableString", ")", ":", "\n", "                    ", "sentence_ls", ".", "append", "(", "str", "(", "elem", ")", ".", "strip", "(", ")", ")", "\n", "\n", "", "", "for", "question_dict", "in", "line", "[", "\"passage\"", "]", "[", "\"questions\"", "]", ":", "\n", "                ", "question", "=", "question_dict", "[", "\"question\"", "]", "\n", "if", "self", ".", "filter_sentences", ":", "\n", "                    ", "paragraph", "=", "\" \"", ".", "join", "(", "\n", "sentence", "\n", "for", "i", ",", "sentence", "in", "enumerate", "(", "sentence_ls", ",", "start", "=", "1", ")", "\n", "if", "i", "in", "question_dict", "[", "\"sentences_used\"", "]", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "paragraph", "=", "\" \"", ".", "join", "(", "sentence_ls", ")", "\n", "", "for", "answer_dict", "in", "question_dict", "[", "\"answers\"", "]", ":", "\n", "                    ", "answer", "=", "answer_dict", "[", "\"text\"", "]", "\n", "examples", ".", "append", "(", "\n", "Example", "(", "\n", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "line", "[", "\"idx\"", "]", ")", ",", "\n", "paragraph", "=", "paragraph", ",", "\n", "question", "=", "question", ",", "\n", "answer", "=", "answer", ",", "\n", "label", "=", "answer_dict", "[", "\"label\"", "]", "if", "set_type", "!=", "\"test\"", "else", "self", ".", "LABELS", "[", "-", "1", "]", ",", "\n", "question_id", "=", "question_id", ",", "\n", ")", "\n", ")", "\n", "", "question_id", "+=", "1", "\n", "", "", "return", "examples", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.adversarial_nli.Example.tokenize": [[25, 31], ["adversarial_nli.TokenizedExample", "tokenizer.tokenize", "tokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.tokenize", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.tokenize"], ["def", "tokenize", "(", "self", ",", "tokenizer", ")", ":", "\n", "        ", "return", "TokenizedExample", "(", "\n", "guid", "=", "self", ".", "guid", ",", "\n", "input_premise", "=", "tokenizer", ".", "tokenize", "(", "self", ".", "input_premise", ")", ",", "\n", "input_hypothesis", "=", "tokenizer", ".", "tokenize", "(", "self", ".", "input_hypothesis", ")", ",", "\n", "label_id", "=", "AdversarialNliTask", ".", "LABEL_TO_ID", "[", "self", ".", "label", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.adversarial_nli.TokenizedExample.featurize": [[41, 50], ["jiant.tasks.lib.templates.shared.double_sentence_featurize"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.double_sentence_featurize"], ["def", "featurize", "(", "self", ",", "tokenizer", ",", "feat_spec", ")", ":", "\n", "        ", "return", "double_sentence_featurize", "(", "\n", "guid", "=", "self", ".", "guid", ",", "\n", "input_tokens_a", "=", "self", ".", "input_premise", ",", "\n", "input_tokens_b", "=", "self", ".", "input_hypothesis", ",", "\n", "label_id", "=", "self", ".", "label_id", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "feat_spec", "=", "feat_spec", ",", "\n", "data_row_class", "=", "DataRow", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.adversarial_nli.AdversarialNliTask.get_train_examples": [[82, 84], ["adversarial_nli.AdversarialNliTask._create_examples", "jiant.utils.python.io.read_json_lines"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_json_lines"], ["def", "get_train_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_json_lines", "(", "self", ".", "train_path", ")", ",", "set_type", "=", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.adversarial_nli.AdversarialNliTask.get_val_examples": [[85, 87], ["adversarial_nli.AdversarialNliTask._create_examples", "jiant.utils.python.io.read_json_lines"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_json_lines"], ["", "def", "get_val_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_json_lines", "(", "self", ".", "val_path", ")", ",", "set_type", "=", "\"val\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.adversarial_nli.AdversarialNliTask.get_test_examples": [[88, 90], ["adversarial_nli.AdversarialNliTask._create_examples", "jiant.utils.python.io.read_json_lines"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_json_lines"], ["", "def", "get_test_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_json_lines", "(", "self", ".", "test_path", ")", ",", "set_type", "=", "\"test\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.adversarial_nli.AdversarialNliTask._create_examples": [[91, 104], ["enumerate", "examples.append", "adversarial_nli.Example"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_create_examples", "(", "cls", ",", "lines", ",", "set_type", ")", ":", "\n", "        ", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "examples", ".", "append", "(", "\n", "Example", "(", "\n", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "i", ")", ",", "\n", "input_premise", "=", "line", "[", "\"context\"", "]", ",", "\n", "input_hypothesis", "=", "line", "[", "\"hypothesis\"", "]", ",", "\n", "label", "=", "line", "[", "\"label\"", "]", "if", "set_type", "!=", "\"test\"", "else", "cls", ".", "LABELS", "[", "-", "1", "]", ",", "\n", ")", "\n", ")", "\n", "", "return", "examples", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commonsenseqa.Example.task": [[10, 13], ["None"], "methods", ["None"], ["    ", "@", "property", "\n", "def", "task", "(", "self", ")", ":", "\n", "        ", "return", "CommonsenseQATask", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commonsenseqa.CommonsenseQATask.get_train_examples": [[40, 42], ["commonsenseqa.CommonsenseQATask._create_examples", "jiant.utils.python.io.read_json_lines"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_json_lines"], ["def", "get_train_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_json_lines", "(", "self", ".", "train_path", ")", ",", "set_type", "=", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commonsenseqa.CommonsenseQATask.get_val_examples": [[43, 45], ["commonsenseqa.CommonsenseQATask._create_examples", "jiant.utils.python.io.read_json_lines"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_json_lines"], ["", "def", "get_val_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_json_lines", "(", "self", ".", "val_path", ")", ",", "set_type", "=", "\"val\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commonsenseqa.CommonsenseQATask.get_test_examples": [[46, 48], ["commonsenseqa.CommonsenseQATask._create_examples", "jiant.utils.python.io.read_json_lines"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_json_lines"], ["", "def", "get_test_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_json_lines", "(", "self", ".", "test_path", ")", ",", "set_type", "=", "\"test\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commonsenseqa.CommonsenseQATask._create_examples": [[49, 63], ["enumerate", "examples.append", "commonsenseqa.Example"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_create_examples", "(", "cls", ",", "lines", ",", "set_type", ")", ":", "\n", "        ", "examples", "=", "[", "]", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "choice_dict", "=", "{", "elem", "[", "\"label\"", "]", ":", "elem", "[", "\"text\"", "]", "for", "elem", "in", "line", "[", "\"question\"", "]", "[", "\"choices\"", "]", "}", "\n", "examples", ".", "append", "(", "\n", "Example", "(", "\n", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "i", ")", ",", "\n", "prompt", "=", "line", "[", "\"question\"", "]", "[", "\"stem\"", "]", ",", "\n", "choice_list", "=", "[", "choice_dict", "[", "key", "]", "for", "key", "in", "cls", ".", "CHOICE_KEYS", "]", ",", "\n", "label", "=", "line", "[", "\"answerKey\"", "]", "if", "set_type", "!=", "\"test\"", "else", "cls", ".", "CHOICE_KEYS", "[", "-", "1", "]", ",", "\n", ")", "\n", ")", "\n", "", "return", "examples", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.sst.Example.tokenize": [[24, 29], ["sst.TokenizedExample", "tokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.tokenize"], ["def", "tokenize", "(", "self", ",", "tokenizer", ")", ":", "\n", "        ", "return", "TokenizedExample", "(", "\n", "guid", "=", "self", ".", "guid", ",", "\n", "text", "=", "tokenizer", ".", "tokenize", "(", "self", ".", "text", ")", ",", "\n", "label_id", "=", "SstTask", ".", "LABEL_TO_ID", "[", "self", ".", "label", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.sst.TokenizedExample.featurize": [[38, 46], ["jiant.tasks.lib.templates.shared.single_sentence_featurize"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.single_sentence_featurize"], ["def", "featurize", "(", "self", ",", "tokenizer", ",", "feat_spec", ")", ":", "\n", "        ", "return", "single_sentence_featurize", "(", "\n", "guid", "=", "self", ".", "guid", ",", "\n", "input_tokens", "=", "self", ".", "text", ",", "\n", "label_id", "=", "self", ".", "label_id", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "feat_spec", "=", "feat_spec", ",", "\n", "data_row_class", "=", "DataRow", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.sst.SstTask.get_train_examples": [[78, 80], ["sst.SstTask._create_examples", "jiant.utils.python.io.read_jsonl"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_jsonl"], ["def", "get_train_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_jsonl", "(", "self", ".", "train_path", ")", ",", "set_type", "=", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.sst.SstTask.get_val_examples": [[81, 83], ["sst.SstTask._create_examples", "jiant.utils.python.io.read_jsonl"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_jsonl"], ["", "def", "get_val_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_jsonl", "(", "self", ".", "val_path", ")", ",", "set_type", "=", "\"val\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.sst.SstTask.get_test_examples": [[84, 86], ["sst.SstTask._create_examples", "jiant.utils.python.io.read_jsonl"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_jsonl"], ["", "def", "get_test_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_jsonl", "(", "self", ".", "test_path", ")", ",", "set_type", "=", "\"test\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.sst.SstTask._create_examples": [[87, 99], ["enumerate", "examples.append", "sst.Example"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_create_examples", "(", "cls", ",", "lines", ",", "set_type", ")", ":", "\n", "        ", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "examples", ".", "append", "(", "\n", "Example", "(", "\n", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "i", ")", ",", "\n", "text", "=", "line", "[", "\"text\"", "]", ",", "\n", "label", "=", "line", "[", "\"label\"", "]", "if", "set_type", "!=", "\"test\"", "else", "cls", ".", "LABELS", "[", "-", "1", "]", ",", "\n", ")", "\n", ")", "\n", "", "return", "examples", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.mnli.Example.tokenize": [[25, 31], ["mnli.TokenizedExample", "tokenizer.tokenize", "tokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.tokenize", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.tokenize"], ["def", "tokenize", "(", "self", ",", "tokenizer", ")", ":", "\n", "        ", "return", "TokenizedExample", "(", "\n", "guid", "=", "self", ".", "guid", ",", "\n", "premise", "=", "tokenizer", ".", "tokenize", "(", "self", ".", "premise", ")", ",", "\n", "hypothesis", "=", "tokenizer", ".", "tokenize", "(", "self", ".", "hypothesis", ")", ",", "\n", "label_id", "=", "MnliTask", ".", "LABEL_TO_ID", "[", "self", ".", "label", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.mnli.TokenizedExample.featurize": [[41, 50], ["jiant.tasks.lib.templates.shared.double_sentence_featurize"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.double_sentence_featurize"], ["def", "featurize", "(", "self", ",", "tokenizer", ",", "feat_spec", ")", ":", "\n", "        ", "return", "double_sentence_featurize", "(", "\n", "guid", "=", "self", ".", "guid", ",", "\n", "input_tokens_a", "=", "self", ".", "premise", ",", "\n", "input_tokens_b", "=", "self", ".", "hypothesis", ",", "\n", "label_id", "=", "self", ".", "label_id", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "feat_spec", "=", "feat_spec", ",", "\n", "data_row_class", "=", "DataRow", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.mnli.MnliTask.get_train_examples": [[82, 84], ["mnli.MnliTask._create_examples", "jiant.utils.python.io.read_jsonl"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_jsonl"], ["def", "get_train_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_jsonl", "(", "self", ".", "train_path", ")", ",", "set_type", "=", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.mnli.MnliTask.get_val_examples": [[85, 87], ["mnli.MnliTask._create_examples", "jiant.utils.python.io.read_jsonl"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_jsonl"], ["", "def", "get_val_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_jsonl", "(", "self", ".", "val_path", ")", ",", "set_type", "=", "\"val\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.mnli.MnliTask.get_test_examples": [[88, 90], ["mnli.MnliTask._create_examples", "jiant.utils.python.io.read_jsonl"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_jsonl"], ["", "def", "get_test_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_jsonl", "(", "self", ".", "test_path", ")", ",", "set_type", "=", "\"test\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.mnli.MnliTask._create_examples": [[91, 105], ["enumerate", "examples.append", "mnli.Example"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_create_examples", "(", "cls", ",", "lines", ",", "set_type", ")", ":", "\n", "# noinspection DuplicatedCode", "\n", "        ", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "examples", ".", "append", "(", "\n", "Example", "(", "\n", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "i", ")", ",", "\n", "premise", "=", "line", "[", "\"premise\"", "]", ",", "\n", "hypothesis", "=", "line", "[", "\"hypothesis\"", "]", ",", "\n", "label", "=", "line", "[", "\"label\"", "]", "if", "set_type", "!=", "\"test\"", "else", "cls", ".", "LABELS", "[", "-", "1", "]", ",", "\n", ")", "\n", ")", "\n", "", "return", "examples", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.boolq.Example.tokenize": [[25, 31], ["boolq.TokenizedExample", "tokenizer.tokenize", "tokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.tokenize", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.tokenize"], ["def", "tokenize", "(", "self", ",", "tokenizer", ")", ":", "\n", "        ", "return", "TokenizedExample", "(", "\n", "guid", "=", "self", ".", "guid", ",", "\n", "input_question", "=", "tokenizer", ".", "tokenize", "(", "self", ".", "input_question", ")", ",", "\n", "input_passage", "=", "tokenizer", ".", "tokenize", "(", "self", ".", "input_passage", ")", ",", "\n", "label_id", "=", "BoolQTask", ".", "LABEL_TO_ID", "[", "self", ".", "label", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.boolq.TokenizedExample.featurize": [[41, 50], ["jiant.tasks.lib.templates.shared.double_sentence_featurize"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.double_sentence_featurize"], ["def", "featurize", "(", "self", ",", "tokenizer", ",", "feat_spec", ")", ":", "\n", "        ", "return", "double_sentence_featurize", "(", "\n", "guid", "=", "self", ".", "guid", ",", "\n", "input_tokens_a", "=", "self", ".", "input_question", ",", "\n", "input_tokens_b", "=", "self", ".", "input_passage", ",", "\n", "label_id", "=", "self", ".", "label_id", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "feat_spec", "=", "feat_spec", ",", "\n", "data_row_class", "=", "DataRow", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.boolq.BoolQTask.get_train_examples": [[82, 84], ["boolq.BoolQTask._create_examples", "jiant.utils.python.io.read_json_lines"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_json_lines"], ["def", "get_train_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_json_lines", "(", "self", ".", "train_path", ")", ",", "set_type", "=", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.boolq.BoolQTask.get_val_examples": [[85, 87], ["boolq.BoolQTask._create_examples", "jiant.utils.python.io.read_json_lines"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_json_lines"], ["", "def", "get_val_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_json_lines", "(", "self", ".", "val_path", ")", ",", "set_type", "=", "\"val\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.boolq.BoolQTask.get_test_examples": [[88, 90], ["boolq.BoolQTask._create_examples", "jiant.utils.python.io.read_json_lines"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_json_lines"], ["", "def", "get_test_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_json_lines", "(", "self", ".", "test_path", ")", ",", "set_type", "=", "\"test\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.boolq.BoolQTask._create_examples": [[91, 104], ["enumerate", "examples.append", "boolq.Example"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_create_examples", "(", "cls", ",", "lines", ",", "set_type", ")", ":", "\n", "        ", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "examples", ".", "append", "(", "\n", "Example", "(", "\n", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "i", ")", ",", "\n", "input_question", "=", "line", "[", "\"question\"", "]", ",", "\n", "input_passage", "=", "line", "[", "\"passage\"", "]", ",", "\n", "label", "=", "line", "[", "\"label\"", "]", "if", "set_type", "!=", "\"test\"", "else", "cls", ".", "LABELS", "[", "-", "1", "]", ",", "\n", ")", "\n", ")", "\n", "", "return", "examples", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.ccg.Example.tokenize": [[30, 50], ["tokenizer.tokenize", "ccg.Example.text.split", "jiant.input_flat_strip", "jiant.delegate_flat_strip", "jiant.map_tags_to_token_position", "jiant.convert_mapped_tags", "ccg.TokenizedExample", "len", "tokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.tokenize", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.hacky_tokenization_matching.input_flat_strip", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.hacky_tokenization_matching.delegate_flat_strip", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.hacky_tokenization_matching.map_tags_to_token_position", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.hacky_tokenization_matching.convert_mapped_tags", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.tokenize"], ["def", "tokenize", "(", "self", ",", "tokenizer", ")", ":", "\n", "        ", "tokenized", "=", "tokenizer", ".", "tokenize", "(", "self", ".", "text", ")", "\n", "split_text", "=", "self", ".", "text", ".", "split", "(", "\" \"", ")", "# CCG data is space-tokenized", "\n", "input_flat_stripped", "=", "tokenization_utils", ".", "input_flat_strip", "(", "split_text", ")", "\n", "flat_stripped", ",", "indices", "=", "tokenization_utils", ".", "delegate_flat_strip", "(", "\n", "tokens", "=", "tokenized", ",", "tokenizer", "=", "tokenizer", ",", "return_indices", "=", "True", ",", "\n", ")", "\n", "assert", "flat_stripped", "==", "input_flat_stripped", "\n", "positions", "=", "tokenization_utils", ".", "map_tags_to_token_position", "(", "\n", "flat_stripped", "=", "flat_stripped", ",", "indices", "=", "indices", ",", "split_text", "=", "split_text", ",", "\n", ")", "\n", "labels", ",", "label_mask", "=", "tokenization_utils", ".", "convert_mapped_tags", "(", "\n", "positions", "=", "positions", ",", "tag_ids", "=", "self", ".", "tag_ids", ",", "length", "=", "len", "(", "tokenized", ")", ",", "\n", ")", "\n", "\n", "return", "TokenizedExample", "(", "\n", "guid", "=", "self", ".", "guid", ",", "\n", "text", "=", "tokenizer", ".", "tokenize", "(", "self", ".", "text", ")", ",", "\n", "labels", "=", "labels", ",", "\n", "label_mask", "=", "label_mask", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.ccg.TokenizedExample.featurize": [[60, 103], ["jiant.tasks.lib.templates.shared.construct_single_input_tokens_and_segment_ids", "jiant.tasks.lib.templates.shared.create_input_set_from_tokens_and_segments", "jiant.tasks.lib.templates.shared.pad_single_with_feat_spec", "jiant.tasks.lib.templates.shared.pad_single_with_feat_spec", "ccg.DataRow", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.construct_single_input_tokens_and_segment_ids", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.create_input_set_from_tokens_and_segments", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.pad_single_with_feat_spec", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.pad_single_with_feat_spec"], ["def", "featurize", "(", "self", ",", "tokenizer", ",", "feat_spec", ")", ":", "\n", "        ", "unpadded_inputs", "=", "construct_single_input_tokens_and_segment_ids", "(", "\n", "input_tokens", "=", "self", ".", "text", ",", "tokenizer", "=", "tokenizer", ",", "feat_spec", "=", "feat_spec", ",", "\n", ")", "\n", "input_set", "=", "create_input_set_from_tokens_and_segments", "(", "\n", "unpadded_tokens", "=", "unpadded_inputs", ".", "unpadded_tokens", ",", "\n", "unpadded_segment_ids", "=", "unpadded_inputs", ".", "unpadded_segment_ids", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "feat_spec", "=", "feat_spec", ",", "\n", ")", "\n", "\n", "# Replicate padding / additional tokens for the label ids and mask", "\n", "if", "feat_spec", ".", "sep_token_extra", ":", "\n", "            ", "label_suffix", "=", "[", "None", ",", "None", "]", "\n", "mask_suffix", "=", "[", "0", ",", "0", "]", "\n", "special_tokens_count", "=", "3", "# CLS, SEP-SEP", "\n", "", "else", ":", "\n", "            ", "label_suffix", "=", "[", "None", "]", "\n", "mask_suffix", "=", "[", "0", "]", "\n", "special_tokens_count", "=", "2", "# CLS, SEP", "\n", "", "unpadded_labels", "=", "(", "\n", "[", "None", "]", "+", "self", ".", "labels", "[", ":", "feat_spec", ".", "max_seq_length", "-", "special_tokens_count", "]", "+", "label_suffix", "\n", ")", "\n", "unpadded_labels", "=", "[", "i", "if", "i", "is", "not", "None", "else", "-", "1", "for", "i", "in", "unpadded_labels", "]", "\n", "unpadded_label_mask", "=", "(", "\n", "[", "0", "]", "+", "self", ".", "label_mask", "[", ":", "feat_spec", ".", "max_seq_length", "-", "special_tokens_count", "]", "+", "mask_suffix", "\n", ")", "\n", "\n", "padded_labels", "=", "pad_single_with_feat_spec", "(", "\n", "ls", "=", "unpadded_labels", ",", "feat_spec", "=", "feat_spec", ",", "pad_idx", "=", "-", "1", ",", "\n", ")", "\n", "padded_label_mask", "=", "pad_single_with_feat_spec", "(", "\n", "ls", "=", "unpadded_label_mask", ",", "feat_spec", "=", "feat_spec", ",", "pad_idx", "=", "0", ",", "\n", ")", "\n", "\n", "return", "DataRow", "(", "\n", "guid", "=", "self", ".", "guid", ",", "\n", "input_ids", "=", "np", ".", "array", "(", "input_set", ".", "input_ids", ")", ",", "\n", "input_mask", "=", "np", ".", "array", "(", "input_set", ".", "input_mask", ")", ",", "\n", "segment_ids", "=", "np", ".", "array", "(", "input_set", ".", "segment_ids", ")", ",", "\n", "label_ids", "=", "np", ".", "array", "(", "padded_labels", ")", ",", "\n", "label_mask", "=", "np", ".", "array", "(", "padded_label_mask", ")", ",", "\n", "tokens", "=", "unpadded_inputs", ".", "unpadded_tokens", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.ccg.CCGTask.num_labels": [[137, 140], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "num_labels", "(", "self", ")", ":", "\n", "        ", "return", "1363", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.ccg.CCGTask.get_train_examples": [[141, 143], ["ccg.CCGTask._create_examples"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples"], ["", "def", "get_train_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "path", "=", "self", ".", "train_path", ",", "set_type", "=", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.ccg.CCGTask.get_val_examples": [[144, 146], ["ccg.CCGTask._create_examples"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples"], ["", "def", "get_val_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "self", ".", "val_path", ",", "set_type", "=", "\"val\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.ccg.CCGTask.get_test_examples": [[147, 149], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_test_examples", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.ccg.CCGTask.get_tags_to_id": [[150, 154], ["jiant.utils.python.io.read_json", "int", "jiant.utils.python.io.read_json.items"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_json"], ["", "def", "get_tags_to_id", "(", "self", ")", ":", "\n", "        ", "tags_to_id", "=", "read_json", "(", "self", ".", "path_dict", "[", "\"tags_to_id\"", "]", ")", "\n", "tags_to_id", "=", "{", "k", ":", "int", "(", "v", ")", "for", "k", ",", "v", "in", "tags_to_id", ".", "items", "(", ")", "}", "\n", "return", "tags_to_id", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.ccg.CCGTask._create_examples": [[155, 165], ["ccg.CCGTask.get_tags_to_id", "open", "enumerate", "line.strip().split", "tags.split", "examples.append", "ccg.Example", "line.strip"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.ccg.CCGTask.get_tags_to_id"], ["", "def", "_create_examples", "(", "self", ",", "path", ",", "set_type", ")", ":", "\n", "        ", "tags_to_id", "=", "self", ".", "get_tags_to_id", "(", ")", "\n", "examples", "=", "[", "]", "\n", "with", "open", "(", "path", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "for", "i", ",", "line", "in", "enumerate", "(", "f", ")", ":", "\n", "                ", "text", ",", "tags", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "split_tags", "=", "tags", ".", "split", "(", ")", "\n", "tag_ids", "=", "[", "tags_to_id", "[", "tag", "]", "for", "tag", "in", "split_tags", "]", "\n", "examples", ".", "append", "(", "Example", "(", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "i", ")", ",", "text", "=", "text", ",", "tag_ids", "=", "tag_ids", ",", ")", ")", "\n", "", "", "return", "examples", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.wsc.Example.tokenize": [[34, 67], ["wsc.Example.text.replace", "wsc.Example.span1_text.replace", "wsc.Example.span2_text.replace", "wsc.Example.strip().split", "wsc.extract_char_span", "wsc.extract_char_span", "jiant.get_token_span", "jiant.get_token_span", "wsc.TokenizedExample", "word1.lower", "wsc.Example.lower", "word2.lower", "wsc.Example.lower", "wsc.Example.strip", "wsc.Example.strip", "text[].lower", "wsc.Example.lower", "text[].lower", "wsc.Example.lower", "slice", "slice"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.wsc.extract_char_span", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.wsc.extract_char_span", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.hacky_tokenization_matching.get_token_span", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.hacky_tokenization_matching.get_token_span"], ["def", "tokenize", "(", "self", ",", "tokenizer", ")", ":", "\n", "# clean-up", "\n", "        ", "text", "=", "self", ".", "text", ".", "replace", "(", "\"\\n\"", ",", "\" \"", ")", "\n", "span1_text", "=", "self", ".", "span1_text", ".", "replace", "(", "\"\\n\"", ",", "\" \"", ")", "\n", "span2_text", "=", "self", ".", "span2_text", ".", "replace", "(", "\"\\n\"", ",", "\" \"", ")", "\n", "\n", "space_tokens", "=", "text", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "word1", "=", "space_tokens", "[", "self", ".", "span1_idx", "]", "\n", "word2", "=", "space_tokens", "[", "self", ".", "span2_idx", "]", "\n", "assert", "word1", ".", "lower", "(", ")", "in", "text", ".", "lower", "(", ")", "\n", "assert", "word2", ".", "lower", "(", ")", "in", "text", ".", "lower", "(", ")", "\n", "assert", "text", ".", "strip", "(", ")", "==", "\" \"", ".", "join", "(", "space_tokens", ")", "\n", "char_span1", "=", "extract_char_span", "(", "text", ",", "span1_text", ",", "self", ".", "span1_idx", ")", "\n", "char_span2", "=", "extract_char_span", "(", "text", ",", "span2_text", ",", "self", ".", "span2_idx", ")", "\n", "if", "self", ".", "guid", "!=", "\"val-42\"", ":", "# Yes, there's an error in this example", "\n", "            ", "assert", "text", "[", "slice", "(", "*", "char_span1", ")", "]", ".", "lower", "(", ")", "==", "span1_text", ".", "lower", "(", ")", "\n", "assert", "text", "[", "slice", "(", "*", "char_span2", ")", "]", ".", "lower", "(", ")", "==", "span2_text", ".", "lower", "(", ")", "\n", "\n", "", "tokens1", ",", "span1_span", "=", "tokenization_utils", ".", "get_token_span", "(", "\n", "sentence", "=", "text", ",", "span", "=", "char_span1", ",", "tokenizer", "=", "tokenizer", ",", "\n", ")", "\n", "tokens2", ",", "span2_span", "=", "tokenization_utils", ".", "get_token_span", "(", "\n", "sentence", "=", "text", ",", "span", "=", "char_span2", ",", "tokenizer", "=", "tokenizer", ",", "\n", ")", "\n", "assert", "tokens1", "==", "tokens2", "\n", "return", "TokenizedExample", "(", "\n", "guid", "=", "self", ".", "guid", ",", "\n", "tokens", "=", "tokens1", ",", "\n", "span1_span", "=", "span1_span", ",", "\n", "span2_span", "=", "span2_span", ",", "\n", "span1_text", "=", "self", ".", "span1_text", ",", "\n", "span2_text", "=", "self", ".", "span2_text", ",", "\n", "label_id", "=", "WSCTask", ".", "LABEL_TO_ID", "[", "self", ".", "label", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.wsc.TokenizedExample.featurize": [[80, 122], ["jiant.tasks.utils.truncate_sequences", "jiant.tasks.lib.templates.shared.add_cls_token", "jiant.tasks.lib.templates.shared.create_input_set_from_tokens_and_segments", "jiant.tasks.utils.ExclusiveSpan().to_inclusive", "jiant.tasks.utils.ExclusiveSpan().to_inclusive", "wsc.DataRow", "len", "jiant.tasks.utils.ExclusiveSpan", "jiant.tasks.utils.ExclusiveSpan", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.utils.truncate_sequences", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.add_cls_token", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.create_input_set_from_tokens_and_segments", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.utils.ExclusiveSpan.to_inclusive", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.utils.ExclusiveSpan.to_inclusive"], ["def", "featurize", "(", "self", ",", "tokenizer", ",", "feat_spec", ")", ":", "\n", "        ", "special_tokens_count", "=", "2", "# CLS, SEP", "\n", "\n", "(", "tokens", ",", ")", "=", "truncate_sequences", "(", "\n", "tokens_ls", "=", "[", "self", ".", "tokens", "]", ",", "max_length", "=", "feat_spec", ".", "max_seq_length", "-", "special_tokens_count", ",", "\n", ")", "\n", "\n", "unpadded_tokens", "=", "tokens", "+", "[", "tokenizer", ".", "sep_token", "]", "\n", "unpadded_segment_ids", "=", "[", "feat_spec", ".", "sequence_a_segment_id", "]", "*", "(", "len", "(", "self", ".", "tokens", ")", "+", "1", ")", "\n", "\n", "unpadded_inputs", "=", "add_cls_token", "(", "\n", "unpadded_tokens", "=", "unpadded_tokens", ",", "\n", "unpadded_segment_ids", "=", "unpadded_segment_ids", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "feat_spec", "=", "feat_spec", ",", "\n", ")", "\n", "\n", "input_set", "=", "create_input_set_from_tokens_and_segments", "(", "\n", "unpadded_tokens", "=", "unpadded_inputs", ".", "unpadded_tokens", ",", "\n", "unpadded_segment_ids", "=", "unpadded_inputs", ".", "unpadded_segment_ids", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "feat_spec", "=", "feat_spec", ",", "\n", ")", "\n", "span1_span", "=", "ExclusiveSpan", "(", "\n", "start", "=", "self", ".", "span1_span", "[", "0", "]", "+", "unpadded_inputs", ".", "cls_offset", ",", "\n", "end", "=", "self", ".", "span1_span", "[", "1", "]", "+", "unpadded_inputs", ".", "cls_offset", ",", "\n", ")", ".", "to_inclusive", "(", ")", "\n", "span2_span", "=", "ExclusiveSpan", "(", "\n", "start", "=", "self", ".", "span2_span", "[", "0", "]", "+", "unpadded_inputs", ".", "cls_offset", ",", "\n", "end", "=", "self", ".", "span2_span", "[", "1", "]", "+", "unpadded_inputs", ".", "cls_offset", ",", "\n", ")", ".", "to_inclusive", "(", ")", "\n", "\n", "return", "DataRow", "(", "\n", "guid", "=", "self", ".", "guid", ",", "\n", "input_ids", "=", "np", ".", "array", "(", "input_set", ".", "input_ids", ")", ",", "\n", "input_mask", "=", "np", ".", "array", "(", "input_set", ".", "input_mask", ")", ",", "\n", "segment_ids", "=", "np", ".", "array", "(", "input_set", ".", "segment_ids", ")", ",", "\n", "spans", "=", "np", ".", "array", "(", "[", "span1_span", ",", "span2_span", "]", ")", ",", "\n", "label_id", "=", "self", ".", "label_id", ",", "\n", "tokens", "=", "unpadded_inputs", ".", "unpadded_tokens", ",", "\n", "span1_text", "=", "self", ".", "span1_text", ",", "\n", "span2_text", "=", "self", ".", "span2_text", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.wsc.DataRow.get_tokens": [[137, 139], ["None"], "methods", ["None"], ["def", "get_tokens", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "tokens", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.wsc.WSCTask.num_spans": [[163, 166], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "num_spans", "(", "self", ")", ":", "\n", "        ", "return", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.wsc.WSCTask.get_train_examples": [[167, 169], ["wsc.WSCTask._create_examples", "jiant.utils.python.io.read_json_lines"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_json_lines"], ["", "def", "get_train_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_json_lines", "(", "self", ".", "train_path", ")", ",", "set_type", "=", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.wsc.WSCTask.get_val_examples": [[170, 172], ["wsc.WSCTask._create_examples", "jiant.utils.python.io.read_json_lines"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_json_lines"], ["", "def", "get_val_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_json_lines", "(", "self", ".", "val_path", ")", ",", "set_type", "=", "\"val\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.wsc.WSCTask.get_test_examples": [[173, 175], ["wsc.WSCTask._create_examples", "jiant.utils.python.io.read_json_lines"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_json_lines"], ["", "def", "get_test_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_json_lines", "(", "self", ".", "test_path", ")", ",", "set_type", "=", "\"test\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.wsc.WSCTask._create_examples": [[176, 192], ["examples.append", "wsc.Example"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_create_examples", "(", "cls", ",", "lines", ",", "set_type", ")", ":", "\n", "        ", "examples", "=", "[", "]", "\n", "for", "line", "in", "lines", ":", "\n", "            ", "examples", ".", "append", "(", "\n", "Example", "(", "\n", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "line", "[", "\"idx\"", "]", ")", ",", "\n", "text", "=", "line", "[", "\"text\"", "]", ",", "\n", "span1_idx", "=", "line", "[", "\"target\"", "]", "[", "\"span1_index\"", "]", ",", "\n", "span2_idx", "=", "line", "[", "\"target\"", "]", "[", "\"span2_index\"", "]", ",", "\n", "span1_text", "=", "line", "[", "\"target\"", "]", "[", "\"span1_text\"", "]", ",", "\n", "span2_text", "=", "line", "[", "\"target\"", "]", "[", "\"span2_text\"", "]", ",", "\n", "label", "=", "line", "[", "\"label\"", "]", "if", "set_type", "!=", "\"test\"", "else", "cls", ".", "LABELS", "[", "-", "1", "]", ",", "\n", ")", "\n", ")", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.wsc.extract_char_span": [[194, 205], ["full_text.split", "len", "jiant.tasks.utils.ExclusiveSpan", "extracted_span_text.lower", "full_text.lower", "len"], "function", ["None"], ["", "", "def", "extract_char_span", "(", "full_text", ",", "span_text", ",", "space_index", ")", ":", "\n", "    ", "space_tokens", "=", "full_text", ".", "split", "(", ")", "\n", "extracted_span_text", "=", "space_tokens", "[", "space_index", "]", "\n", "assert", "extracted_span_text", ".", "lower", "(", ")", "in", "full_text", ".", "lower", "(", ")", "\n", "span_length", "=", "len", "(", "span_text", ")", "\n", "if", "space_index", "==", "0", ":", "\n", "        ", "start", "=", "0", "\n", "", "else", ":", "\n", "        ", "start", "=", "len", "(", "\" \"", ".", "join", "(", "space_tokens", "[", ":", "space_index", "]", ")", ")", "+", "1", "\n", "# exclusive span", "\n", "", "return", "ExclusiveSpan", "(", "start", "=", "start", ",", "end", "=", "start", "+", "span_length", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.stsb.Example.tokenize": [[28, 34], ["stsb.TokenizedExample", "tokenizer.tokenize", "tokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.tokenize", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.tokenize"], ["def", "tokenize", "(", "self", ",", "tokenizer", ")", ":", "\n", "        ", "return", "TokenizedExample", "(", "\n", "guid", "=", "self", ".", "guid", ",", "\n", "text_a", "=", "tokenizer", ".", "tokenize", "(", "self", ".", "text_a", ")", ",", "\n", "text_b", "=", "tokenizer", ".", "tokenize", "(", "self", ".", "text_b", ")", ",", "\n", "label", "=", "self", ".", "label", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.stsb.TokenizedExample.featurize": [[44, 65], ["jiant.tasks.lib.templates.shared.construct_double_input_tokens_and_segment_ids", "jiant.tasks.lib.templates.shared.create_input_set_from_tokens_and_segments", "stsb.DataRow", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.construct_double_input_tokens_and_segment_ids", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.create_input_set_from_tokens_and_segments"], ["def", "featurize", "(", "self", ",", "tokenizer", ",", "feat_spec", ")", ":", "\n", "# Label not label_id, otherwise we can use double_sentence_featurize", "\n", "        ", "unpadded_inputs", "=", "construct_double_input_tokens_and_segment_ids", "(", "\n", "input_tokens_a", "=", "self", ".", "text_a", ",", "\n", "input_tokens_b", "=", "self", ".", "text_b", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "feat_spec", "=", "feat_spec", ",", "\n", ")", "\n", "input_set", "=", "create_input_set_from_tokens_and_segments", "(", "\n", "unpadded_tokens", "=", "unpadded_inputs", ".", "unpadded_tokens", ",", "\n", "unpadded_segment_ids", "=", "unpadded_inputs", ".", "unpadded_segment_ids", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "feat_spec", "=", "feat_spec", ",", "\n", ")", "\n", "return", "DataRow", "(", "\n", "guid", "=", "self", ".", "guid", ",", "\n", "input_ids", "=", "np", ".", "array", "(", "input_set", ".", "input_ids", ")", ",", "\n", "input_mask", "=", "np", ".", "array", "(", "input_set", ".", "input_mask", ")", ",", "\n", "segment_ids", "=", "np", ".", "array", "(", "input_set", ".", "segment_ids", ")", ",", "\n", "label", "=", "self", ".", "label", ",", "\n", "tokens", "=", "unpadded_inputs", ".", "unpadded_tokens", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.stsb.StsbTask.get_train_examples": [[95, 97], ["stsb.StsbTask._create_examples", "jiant.utils.python.io.read_jsonl"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_jsonl"], ["def", "get_train_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_jsonl", "(", "self", ".", "train_path", ")", ",", "set_type", "=", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.stsb.StsbTask.get_val_examples": [[98, 100], ["stsb.StsbTask._create_examples", "jiant.utils.python.io.read_jsonl"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_jsonl"], ["", "def", "get_val_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_jsonl", "(", "self", ".", "val_path", ")", ",", "set_type", "=", "\"val\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.stsb.StsbTask.get_test_examples": [[101, 103], ["stsb.StsbTask._create_examples", "jiant.utils.python.io.read_jsonl"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_jsonl"], ["", "def", "get_test_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_jsonl", "(", "self", ".", "test_path", ")", ",", "set_type", "=", "\"test\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.stsb.StsbTask._create_examples": [[104, 117], ["enumerate", "examples.append", "stsb.Example", "float"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_create_examples", "(", "cls", ",", "lines", ",", "set_type", ")", ":", "\n", "        ", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "examples", ".", "append", "(", "\n", "Example", "(", "\n", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "i", ")", ",", "\n", "text_a", "=", "line", "[", "\"text_a\"", "]", ",", "\n", "text_b", "=", "line", "[", "\"text_b\"", "]", ",", "\n", "label", "=", "float", "(", "line", "[", "\"label\"", "]", ")", "if", "set_type", "!=", "\"test\"", "else", "0", ",", "\n", ")", "\n", ")", "\n", "", "return", "examples", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.abductive_nli.Example.tokenize": [[32, 40], ["abductive_nli.TokenizedExample", "tokenizer.tokenize", "tokenizer.tokenize", "tokenizer.tokenize", "tokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.tokenize", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.tokenize", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.tokenize", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.tokenize"], ["def", "tokenize", "(", "self", ",", "tokenizer", ")", ":", "\n", "        ", "return", "TokenizedExample", "(", "\n", "guid", "=", "self", ".", "guid", ",", "\n", "input_obs1", "=", "tokenizer", ".", "tokenize", "(", "self", ".", "input_obs1", ")", ",", "\n", "input_hyp1", "=", "tokenizer", ".", "tokenize", "(", "self", ".", "input_hyp1", ")", ",", "\n", "input_hyp2", "=", "tokenizer", ".", "tokenize", "(", "self", ".", "input_hyp2", ")", ",", "\n", "input_obs2", "=", "tokenizer", ".", "tokenize", "(", "self", ".", "input_obs2", ")", ",", "\n", "label_id", "=", "AbductiveNliTask", ".", "LABEL_TO_ID", "[", "self", ".", "label", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.abductive_nli.TokenizedExample.featurize": [[52, 143], ["jiant.tasks.utils.truncate_sequences", "jiant.tasks.utils.truncate_sequences", "jiant.tasks.lib.templates.shared.add_cls_token", "jiant.tasks.lib.templates.shared.add_cls_token", "jiant.tasks.lib.templates.shared.create_input_set_from_tokens_and_segments", "jiant.tasks.lib.templates.shared.create_input_set_from_tokens_and_segments", "abductive_nli.DataRow", "numpy.stack", "numpy.stack", "numpy.stack", "len", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.utils.truncate_sequences", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.utils.truncate_sequences", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.add_cls_token", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.add_cls_token", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.create_input_set_from_tokens_and_segments", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.create_input_set_from_tokens_and_segments"], ["def", "featurize", "(", "self", ",", "tokenizer", ",", "feat_spec", ")", ":", "\n", "        ", "if", "feat_spec", ".", "sep_token_extra", ":", "\n", "            ", "maybe_extra_sep", "=", "[", "tokenizer", ".", "sep_token", "]", "\n", "maybe_extra_sep_segment_id", "=", "[", "feat_spec", ".", "sequence_a_segment_id", "]", "\n", "special_tokens_count", "=", "6", "# CLS, SEP-SEP, SEP-SEP, SEP", "\n", "", "else", ":", "\n", "            ", "maybe_extra_sep", "=", "[", "]", "\n", "maybe_extra_sep_segment_id", "=", "[", "]", "\n", "special_tokens_count", "=", "4", "# CLS, SEP, SEP, SEP", "\n", "\n", "", "input_obs1_a", ",", "input_hyp1_a", ",", "input_obs2_a", "=", "truncate_sequences", "(", "\n", "tokens_ls", "=", "[", "self", ".", "input_obs1", ",", "self", ".", "input_hyp1", ",", "self", ".", "input_obs2", "]", ",", "\n", "max_length", "=", "feat_spec", ".", "max_seq_length", "-", "special_tokens_count", "-", "1", ",", "\n", "# -1 for self.question", "\n", ")", "\n", "input_obs1_b", ",", "input_hyp2_b", ",", "input_obs2_b", "=", "truncate_sequences", "(", "\n", "tokens_ls", "=", "[", "self", ".", "input_obs1", ",", "self", ".", "input_hyp2", ",", "self", ".", "input_obs2", "]", ",", "\n", "max_length", "=", "feat_spec", ".", "max_seq_length", "-", "special_tokens_count", "-", "1", ",", "\n", "# -1 for self.question", "\n", ")", "\n", "\n", "unpadded_inputs_1", "=", "add_cls_token", "(", "\n", "unpadded_tokens", "=", "(", "\n", "input_obs1_a", "\n", "+", "[", "tokenizer", ".", "sep_token", "]", "\n", "+", "maybe_extra_sep", "\n", "+", "input_hyp1_a", "\n", "+", "[", "tokenizer", ".", "sep_token", "]", "\n", "+", "maybe_extra_sep", "\n", "+", "input_obs2_a", "\n", "+", "[", "tokenizer", ".", "sep_token", "]", "\n", ")", ",", "\n", "unpadded_segment_ids", "=", "(", "\n", "# question + sep(s)", "\n", "[", "feat_spec", ".", "sequence_a_segment_id", "]", "*", "(", "len", "(", "input_obs1_a", ")", "+", "1", ")", "\n", "+", "maybe_extra_sep_segment_id", "\n", "# premise + sep(s)", "\n", "+", "[", "feat_spec", ".", "sequence_a_segment_id", "]", "*", "(", "len", "(", "input_hyp1_a", ")", "+", "1", ")", "\n", "+", "maybe_extra_sep_segment_id", "\n", "# choice + sep", "\n", "+", "[", "feat_spec", ".", "sequence_b_segment_id", "]", "*", "(", "len", "(", "input_obs2_a", ")", "+", "1", ")", "\n", ")", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "feat_spec", "=", "feat_spec", ",", "\n", ")", "\n", "\n", "unpadded_inputs_2", "=", "add_cls_token", "(", "\n", "unpadded_tokens", "=", "(", "\n", "input_obs1_b", "\n", "+", "[", "tokenizer", ".", "sep_token", "]", "\n", "+", "maybe_extra_sep", "\n", "+", "input_hyp2_b", "\n", "+", "[", "tokenizer", ".", "sep_token", "]", "\n", "+", "maybe_extra_sep", "\n", "+", "input_obs2_b", "\n", "+", "[", "tokenizer", ".", "sep_token", "]", "\n", ")", ",", "\n", "unpadded_segment_ids", "=", "(", "\n", "# question + sep(s)", "\n", "[", "feat_spec", ".", "sequence_a_segment_id", "]", "*", "(", "len", "(", "input_obs1_b", ")", "+", "1", ")", "\n", "+", "maybe_extra_sep_segment_id", "\n", "# premise + sep(s)", "\n", "+", "[", "feat_spec", ".", "sequence_a_segment_id", "]", "*", "(", "len", "(", "input_hyp2_b", ")", "+", "1", ")", "\n", "+", "maybe_extra_sep_segment_id", "\n", "# choice + sep", "\n", "+", "[", "feat_spec", ".", "sequence_b_segment_id", "]", "*", "(", "len", "(", "input_obs2_b", ")", "+", "1", ")", "\n", ")", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "feat_spec", "=", "feat_spec", ",", "\n", ")", "\n", "\n", "input_set1", "=", "create_input_set_from_tokens_and_segments", "(", "\n", "unpadded_tokens", "=", "unpadded_inputs_1", ".", "unpadded_tokens", ",", "\n", "unpadded_segment_ids", "=", "unpadded_inputs_1", ".", "unpadded_segment_ids", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "feat_spec", "=", "feat_spec", ",", "\n", ")", "\n", "input_set2", "=", "create_input_set_from_tokens_and_segments", "(", "\n", "unpadded_tokens", "=", "unpadded_inputs_2", ".", "unpadded_tokens", ",", "\n", "unpadded_segment_ids", "=", "unpadded_inputs_2", ".", "unpadded_segment_ids", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "feat_spec", "=", "feat_spec", ",", "\n", ")", "\n", "return", "DataRow", "(", "\n", "guid", "=", "self", ".", "guid", ",", "\n", "input_ids", "=", "np", ".", "stack", "(", "[", "input_set1", ".", "input_ids", ",", "input_set2", ".", "input_ids", "]", ")", ",", "\n", "input_mask", "=", "np", ".", "stack", "(", "[", "input_set1", ".", "input_mask", ",", "input_set2", ".", "input_mask", "]", ")", ",", "\n", "segment_ids", "=", "np", ".", "stack", "(", "[", "input_set1", ".", "segment_ids", ",", "input_set2", ".", "segment_ids", "]", ")", ",", "\n", "label_id", "=", "self", ".", "label_id", ",", "\n", "tokens1", "=", "unpadded_inputs_1", ".", "unpadded_tokens", ",", "\n", "tokens2", "=", "unpadded_inputs_2", ".", "unpadded_tokens", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.abductive_nli.AbductiveNliTask.get_train_examples": [[178, 183], ["abductive_nli.AbductiveNliTask._create_examples", "jiant.utils.python.io.read_json_lines", "abductive_nli.AbductiveNliTask._read_labels"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_json_lines", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.socialiqa.SocialIQATask._read_labels"], ["def", "get_train_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "\n", "lines", "=", "read_json_lines", "(", "self", ".", "path_dict", "[", "\"train_inputs\"", "]", ")", ",", "\n", "labels", "=", "self", ".", "_read_labels", "(", "self", ".", "path_dict", "[", "\"train_labels\"", "]", ")", ",", "\n", "set_type", "=", "\"train\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.abductive_nli.AbductiveNliTask.get_val_examples": [[185, 190], ["abductive_nli.AbductiveNliTask._create_examples", "jiant.utils.python.io.read_json_lines", "abductive_nli.AbductiveNliTask._read_labels"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_json_lines", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.socialiqa.SocialIQATask._read_labels"], ["", "def", "get_val_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "\n", "lines", "=", "read_json_lines", "(", "self", ".", "path_dict", "[", "\"val_inputs\"", "]", ")", ",", "\n", "labels", "=", "self", ".", "_read_labels", "(", "self", ".", "path_dict", "[", "\"val_labels\"", "]", ")", ",", "\n", "set_type", "=", "\"val\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.abductive_nli.AbductiveNliTask.get_test_examples": [[192, 194], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_test_examples", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.abductive_nli.AbductiveNliTask._create_examples": [[195, 210], ["enumerate", "zip", "examples.append", "abductive_nli.Example"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_create_examples", "(", "cls", ",", "lines", ",", "labels", ",", "set_type", ")", ":", "\n", "        ", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "(", "line", ",", "label", ")", ")", "in", "enumerate", "(", "zip", "(", "lines", ",", "labels", ")", ")", ":", "\n", "            ", "examples", ".", "append", "(", "\n", "Example", "(", "\n", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "i", ")", ",", "\n", "input_obs1", "=", "line", "[", "\"obs1\"", "]", ",", "\n", "input_hyp1", "=", "line", "[", "\"hyp1\"", "]", ",", "\n", "input_hyp2", "=", "line", "[", "\"hyp2\"", "]", ",", "\n", "input_obs2", "=", "line", "[", "\"obs2\"", "]", ",", "\n", "label", "=", "label", ",", "\n", ")", "\n", ")", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.abductive_nli.AbductiveNliTask._read_labels": [[211, 215], ["open", "int", "f.read().split", "f.read"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_read_labels", "(", "cls", ",", "path", ")", ":", "\n", "        ", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "            ", "return", "[", "int", "(", "i", ")", "for", "i", "in", "f", ".", "read", "(", ")", ".", "split", "(", ")", "]", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.hellaswag.Example.task": [[10, 13], ["None"], "methods", ["None"], ["    ", "@", "property", "\n", "def", "task", "(", "self", ")", ":", "\n", "        ", "return", "HellaSwagTask", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.hellaswag.HellaSwagTask.get_train_examples": [[40, 42], ["hellaswag.HellaSwagTask._create_examples", "jiant.utils.python.io.read_json_lines"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_json_lines"], ["def", "get_train_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_json_lines", "(", "self", ".", "train_path", ")", ",", "set_type", "=", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.hellaswag.HellaSwagTask.get_val_examples": [[43, 45], ["hellaswag.HellaSwagTask._create_examples", "jiant.utils.python.io.read_json_lines"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_json_lines"], ["", "def", "get_val_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_json_lines", "(", "self", ".", "val_path", ")", ",", "set_type", "=", "\"val\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.hellaswag.HellaSwagTask.get_test_examples": [[46, 48], ["hellaswag.HellaSwagTask._create_examples", "jiant.utils.python.io.read_json_lines"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_json_lines"], ["", "def", "get_test_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_json_lines", "(", "self", ".", "test_path", ")", ",", "set_type", "=", "\"test\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.hellaswag.HellaSwagTask._create_examples": [[49, 62], ["enumerate", "examples.append", "hellaswag.Example"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_create_examples", "(", "cls", ",", "lines", ",", "set_type", ")", ":", "\n", "        ", "examples", "=", "[", "]", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "examples", ".", "append", "(", "\n", "Example", "(", "\n", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "i", ")", ",", "\n", "prompt", "=", "line", "[", "\"ctx_a\"", "]", ",", "\n", "choice_list", "=", "[", "line", "[", "\"ctx_b\"", "]", "+", "\" \"", "+", "ending", "for", "ending", "in", "line", "[", "\"endings\"", "]", "]", ",", "\n", "label", "=", "line", "[", "\"label\"", "]", "if", "set_type", "!=", "\"test\"", "else", "cls", ".", "CHOICE_KEYS", "[", "-", "1", "]", ",", "\n", ")", "\n", ")", "\n", "", "return", "examples", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.snli.Example.tokenize": [[25, 31], ["snli.TokenizedExample", "tokenizer.tokenize", "tokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.tokenize", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.tokenize"], ["def", "tokenize", "(", "self", ",", "tokenizer", ")", ":", "\n", "        ", "return", "TokenizedExample", "(", "\n", "guid", "=", "self", ".", "guid", ",", "\n", "input_premise", "=", "tokenizer", ".", "tokenize", "(", "self", ".", "input_premise", ")", ",", "\n", "input_hypothesis", "=", "tokenizer", ".", "tokenize", "(", "self", ".", "input_hypothesis", ")", ",", "\n", "label_id", "=", "SnliTask", ".", "LABEL_TO_ID", "[", "self", ".", "label", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.snli.TokenizedExample.featurize": [[41, 50], ["jiant.tasks.lib.templates.shared.double_sentence_featurize"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.double_sentence_featurize"], ["def", "featurize", "(", "self", ",", "tokenizer", ",", "feat_spec", ")", ":", "\n", "        ", "return", "double_sentence_featurize", "(", "\n", "guid", "=", "self", ".", "guid", ",", "\n", "input_tokens_a", "=", "self", ".", "input_premise", ",", "\n", "input_tokens_b", "=", "self", ".", "input_hypothesis", ",", "\n", "label_id", "=", "self", ".", "label_id", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "feat_spec", "=", "feat_spec", ",", "\n", "data_row_class", "=", "DataRow", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.snli.SnliTask.get_train_examples": [[82, 84], ["snli.SnliTask._create_examples", "jiant.utils.python.io.read_jsonl"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_jsonl"], ["def", "get_train_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_jsonl", "(", "self", ".", "train_path", ")", ",", "set_type", "=", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.snli.SnliTask.get_val_examples": [[85, 87], ["snli.SnliTask._create_examples", "jiant.utils.python.io.read_jsonl"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_jsonl"], ["", "def", "get_val_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_jsonl", "(", "self", ".", "val_path", ")", ",", "set_type", "=", "\"val\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.snli.SnliTask.get_test_examples": [[88, 90], ["snli.SnliTask._create_examples", "jiant.utils.python.io.read_jsonl"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_jsonl"], ["", "def", "get_test_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_jsonl", "(", "self", ".", "test_path", ")", ",", "set_type", "=", "\"test\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.snli.SnliTask._create_examples": [[91, 118], ["enumerate", "print", "print", "examples.append", "snli.Example"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_create_examples", "(", "cls", ",", "lines", ",", "set_type", ")", ":", "\n", "        ", "examples", "=", "[", "]", "\n", "empty_labels", "=", "0", "\n", "dash_labels", "=", "0", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "if", "set_type", "!=", "\"test\"", ":", "\n", "                ", "if", "line", "[", "\"gold_label\"", "]", "==", "\"-\"", ":", "\n", "                    ", "dash_labels", "+=", "1", "\n", "continue", "\n", "", "elif", "line", "[", "\"gold_label\"", "]", "==", "\"\"", ":", "\n", "                    ", "empty_labels", "+=", "1", "\n", "continue", "\n", "", "else", ":", "\n", "                    ", "assert", "line", "[", "\"gold_label\"", "]", "in", "cls", ".", "LABELS", ",", "f\"Example {i} not supported: {line['gold_label']}\"", "\n", "", "", "examples", ".", "append", "(", "\n", "Example", "(", "\n", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "i", ")", ",", "\n", "input_premise", "=", "line", "[", "\"sentence1\"", "]", ",", "\n", "input_hypothesis", "=", "line", "[", "\"sentence2\"", "]", ",", "\n", "label", "=", "line", "[", "\"gold_label\"", "]", "if", "set_type", "!=", "\"test\"", "else", "cls", ".", "LABELS", "[", "-", "1", "]", ",", "\n", ")", "\n", ")", "\n", "\n", "", "print", "(", "f\"Number of '-' labels is: {dash_labels}\"", ")", "\n", "print", "(", "f\"Number of '' labels is: {empty_labels}\"", ")", "\n", "return", "examples", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.cosmosqa.Example.task": [[10, 13], ["None"], "methods", ["None"], ["    ", "@", "property", "\n", "def", "task", "(", "self", ")", ":", "\n", "        ", "return", "CosmosQATask", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.cosmosqa.CosmosQATask.get_train_examples": [[40, 42], ["cosmosqa.CosmosQATask._create_examples"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples"], ["def", "get_train_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "path", "=", "self", ".", "train_path", ",", "set_type", "=", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.cosmosqa.CosmosQATask.get_val_examples": [[43, 45], ["cosmosqa.CosmosQATask._create_examples"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples"], ["", "def", "get_val_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "path", "=", "self", ".", "val_path", ",", "set_type", "=", "\"val\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.cosmosqa.CosmosQATask.get_test_examples": [[46, 48], ["cosmosqa.CosmosQATask._create_examples"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples"], ["", "def", "get_test_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "path", "=", "self", ".", "test_path", ",", "set_type", "=", "\"test\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.cosmosqa.CosmosQATask._create_examples": [[49, 63], ["pandas.read_csv", "enumerate", "pandas.read_csv.itertuples", "examples.append", "cosmosqa.Example"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_create_examples", "(", "cls", ",", "path", ",", "set_type", ")", ":", "\n", "        ", "df", "=", "pd", ".", "read_csv", "(", "path", ")", "\n", "examples", "=", "[", "]", "\n", "for", "i", ",", "row", "in", "enumerate", "(", "df", ".", "itertuples", "(", ")", ")", ":", "\n", "            ", "examples", ".", "append", "(", "\n", "Example", "(", "\n", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "i", ")", ",", "\n", "prompt", "=", "row", ".", "context", "+", "\" \"", "+", "row", ".", "question", ",", "\n", "choice_list", "=", "[", "row", ".", "answer0", ",", "row", ".", "answer1", ",", "row", ".", "answer2", ",", "row", ".", "answer3", "]", ",", "\n", "label", "=", "row", ".", "label", "if", "set_type", "!=", "\"test\"", "else", "cls", ".", "CHOICE_KEYS", "[", "-", "1", "]", ",", "\n", ")", "\n", ")", "\n", "", "return", "examples", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.mrpc.Example.tokenize": [[25, 31], ["mrpc.TokenizedExample", "tokenizer.tokenize", "tokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.tokenize", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.tokenize"], ["def", "tokenize", "(", "self", ",", "tokenizer", ")", ":", "\n", "        ", "return", "TokenizedExample", "(", "\n", "guid", "=", "self", ".", "guid", ",", "\n", "text_a", "=", "tokenizer", ".", "tokenize", "(", "self", ".", "text_a", ")", ",", "\n", "text_b", "=", "tokenizer", ".", "tokenize", "(", "self", ".", "text_b", ")", ",", "\n", "label_id", "=", "MrpcTask", ".", "LABEL_TO_ID", "[", "self", ".", "label", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.mrpc.TokenizedExample.featurize": [[41, 50], ["jiant.tasks.lib.templates.shared.double_sentence_featurize"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.double_sentence_featurize"], ["def", "featurize", "(", "self", ",", "tokenizer", ",", "feat_spec", ")", ":", "\n", "        ", "return", "double_sentence_featurize", "(", "\n", "guid", "=", "self", ".", "guid", ",", "\n", "input_tokens_a", "=", "self", ".", "text_a", ",", "\n", "input_tokens_b", "=", "self", ".", "text_b", ",", "\n", "label_id", "=", "self", ".", "label_id", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "feat_spec", "=", "feat_spec", ",", "\n", "data_row_class", "=", "DataRow", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.mrpc.MrpcTask.get_train_examples": [[82, 84], ["mrpc.MrpcTask._create_examples", "jiant.utils.python.io.read_jsonl"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_jsonl"], ["def", "get_train_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_jsonl", "(", "self", ".", "train_path", ")", ",", "set_type", "=", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.mrpc.MrpcTask.get_val_examples": [[85, 87], ["mrpc.MrpcTask._create_examples", "jiant.utils.python.io.read_jsonl"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_jsonl"], ["", "def", "get_val_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_jsonl", "(", "self", ".", "val_path", ")", ",", "set_type", "=", "\"val\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.mrpc.MrpcTask.get_test_examples": [[88, 90], ["mrpc.MrpcTask._create_examples", "jiant.utils.python.io.read_jsonl"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_jsonl"], ["", "def", "get_test_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_jsonl", "(", "self", ".", "test_path", ")", ",", "set_type", "=", "\"test\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.mrpc.MrpcTask._create_examples": [[91, 104], ["enumerate", "examples.append", "mrpc.Example"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_create_examples", "(", "cls", ",", "lines", ",", "set_type", ")", ":", "\n", "        ", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "examples", ".", "append", "(", "\n", "Example", "(", "\n", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "i", ")", ",", "\n", "text_a", "=", "line", "[", "\"text_a\"", "]", ",", "\n", "text_b", "=", "line", "[", "\"text_b\"", "]", ",", "\n", "label", "=", "line", "[", "\"label\"", "]", "if", "set_type", "!=", "\"test\"", "else", "cls", ".", "LABELS", "[", "-", "1", "]", ",", "\n", ")", "\n", ")", "\n", "", "return", "examples", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.cola.Example.tokenize": [[24, 29], ["cola.TokenizedExample", "tokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.tokenize"], ["def", "tokenize", "(", "self", ",", "tokenizer", ")", ":", "\n", "        ", "return", "TokenizedExample", "(", "\n", "guid", "=", "self", ".", "guid", ",", "\n", "text", "=", "tokenizer", ".", "tokenize", "(", "self", ".", "text", ")", ",", "\n", "label_id", "=", "ColaTask", ".", "LABEL_TO_ID", "[", "self", ".", "label", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.cola.TokenizedExample.featurize": [[38, 46], ["jiant.tasks.lib.templates.shared.single_sentence_featurize"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.single_sentence_featurize"], ["def", "featurize", "(", "self", ",", "tokenizer", ",", "feat_spec", ")", ":", "\n", "        ", "return", "single_sentence_featurize", "(", "\n", "guid", "=", "self", ".", "guid", ",", "\n", "input_tokens", "=", "self", ".", "text", ",", "\n", "label_id", "=", "self", ".", "label_id", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "feat_spec", "=", "feat_spec", ",", "\n", "data_row_class", "=", "DataRow", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.cola.ColaTask.get_train_examples": [[78, 80], ["cola.ColaTask._create_examples", "jiant.utils.python.io.read_jsonl"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_jsonl"], ["def", "get_train_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_jsonl", "(", "self", ".", "train_path", ")", ",", "set_type", "=", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.cola.ColaTask.get_val_examples": [[81, 83], ["cola.ColaTask._create_examples", "jiant.utils.python.io.read_jsonl"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_jsonl"], ["", "def", "get_val_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_jsonl", "(", "self", ".", "val_path", ")", ",", "set_type", "=", "\"val\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.cola.ColaTask.get_test_examples": [[84, 86], ["cola.ColaTask._create_examples", "jiant.utils.python.io.read_jsonl"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_jsonl"], ["", "def", "get_test_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_jsonl", "(", "self", ".", "test_path", ")", ",", "set_type", "=", "\"test\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.cola.ColaTask._create_examples": [[87, 99], ["enumerate", "examples.append", "cola.Example"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_create_examples", "(", "cls", ",", "lines", ",", "set_type", ")", ":", "\n", "        ", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "examples", ".", "append", "(", "\n", "Example", "(", "\n", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "i", ")", ",", "\n", "text", "=", "line", "[", "\"text\"", "]", ",", "\n", "label", "=", "line", "[", "\"label\"", "]", "if", "set_type", "!=", "\"test\"", "else", "cls", ".", "LABELS", "[", "-", "1", "]", ",", "\n", ")", "\n", ")", "\n", "", "return", "examples", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.copa.Example.task": [[10, 13], ["None"], "methods", ["None"], ["    ", "@", "property", "\n", "def", "task", "(", "self", ")", ":", "\n", "        ", "return", "CopaTask", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.copa.CopaTask.get_train_examples": [[45, 47], ["copa.CopaTask._create_examples", "jiant.utils.python.io.read_json_lines"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_json_lines"], ["def", "get_train_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_json_lines", "(", "self", ".", "train_path", ")", ",", "set_type", "=", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.copa.CopaTask.get_val_examples": [[48, 50], ["copa.CopaTask._create_examples", "jiant.utils.python.io.read_json_lines"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_json_lines"], ["", "def", "get_val_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_json_lines", "(", "self", ".", "val_path", ")", ",", "set_type", "=", "\"val\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.copa.CopaTask.get_test_examples": [[51, 53], ["copa.CopaTask._create_examples", "jiant.utils.python.io.read_json_lines"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_json_lines"], ["", "def", "get_test_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_json_lines", "(", "self", ".", "test_path", ")", ",", "set_type", "=", "\"test\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.copa.CopaTask._create_examples": [[54, 68], ["examples.append", "copa.Example"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_create_examples", "(", "cls", ",", "lines", ",", "set_type", ")", ":", "\n", "        ", "examples", "=", "[", "]", "\n", "for", "line", "in", "lines", ":", "\n", "            ", "question", "=", "cls", ".", "_QUESTION_DICT", "[", "line", "[", "\"question\"", "]", "]", "\n", "examples", ".", "append", "(", "\n", "Example", "(", "\n", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "line", "[", "\"idx\"", "]", ")", ",", "\n", "prompt", "=", "line", "[", "\"premise\"", "]", "+", "\" \"", "+", "question", ",", "\n", "choice_list", "=", "[", "line", "[", "\"choice1\"", "]", ",", "line", "[", "\"choice2\"", "]", "]", ",", "\n", "label", "=", "line", "[", "\"label\"", "]", "if", "set_type", "!=", "\"test\"", "else", "cls", ".", "CHOICE_KEYS", "[", "-", "1", "]", ",", "\n", ")", "\n", ")", "\n", "", "return", "examples", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.wnli.Example.tokenize": [[25, 31], ["wnli.TokenizedExample", "tokenizer.tokenize", "tokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.tokenize", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.tokenize"], ["def", "tokenize", "(", "self", ",", "tokenizer", ")", ":", "\n", "        ", "return", "TokenizedExample", "(", "\n", "guid", "=", "self", ".", "guid", ",", "\n", "input_premise", "=", "tokenizer", ".", "tokenize", "(", "self", ".", "input_premise", ")", ",", "\n", "input_hypothesis", "=", "tokenizer", ".", "tokenize", "(", "self", ".", "input_hypothesis", ")", ",", "\n", "label_id", "=", "WnliTask", ".", "LABEL_TO_ID", "[", "self", ".", "label", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.wnli.TokenizedExample.featurize": [[41, 50], ["jiant.tasks.lib.templates.shared.double_sentence_featurize"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.double_sentence_featurize"], ["def", "featurize", "(", "self", ",", "tokenizer", ",", "feat_spec", ")", ":", "\n", "        ", "return", "double_sentence_featurize", "(", "\n", "guid", "=", "self", ".", "guid", ",", "\n", "input_tokens_a", "=", "self", ".", "input_premise", ",", "\n", "input_tokens_b", "=", "self", ".", "input_hypothesis", ",", "\n", "label_id", "=", "self", ".", "label_id", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "feat_spec", "=", "feat_spec", ",", "\n", "data_row_class", "=", "DataRow", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.wnli.WnliTask.get_train_examples": [[82, 84], ["wnli.WnliTask._create_examples", "jiant.utils.python.io.read_jsonl"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_jsonl"], ["def", "get_train_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_jsonl", "(", "self", ".", "train_path", ")", ",", "set_type", "=", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.wnli.WnliTask.get_val_examples": [[85, 87], ["wnli.WnliTask._create_examples", "jiant.utils.python.io.read_jsonl"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_jsonl"], ["", "def", "get_val_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_jsonl", "(", "self", ".", "val_path", ")", ",", "set_type", "=", "\"val\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.wnli.WnliTask.get_test_examples": [[88, 90], ["wnli.WnliTask._create_examples", "jiant.utils.python.io.read_jsonl"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_jsonl"], ["", "def", "get_test_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_jsonl", "(", "self", ".", "test_path", ")", ",", "set_type", "=", "\"test\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.wnli.WnliTask._create_examples": [[91, 104], ["enumerate", "examples.append", "wnli.Example"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_create_examples", "(", "cls", ",", "lines", ",", "set_type", ")", ":", "\n", "        ", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "examples", ".", "append", "(", "\n", "Example", "(", "\n", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "i", ")", ",", "\n", "input_premise", "=", "line", "[", "\"premise\"", "]", ",", "\n", "input_hypothesis", "=", "line", "[", "\"hypothesis\"", "]", ",", "\n", "label", "=", "line", "[", "\"label\"", "]", "if", "set_type", "!=", "\"test\"", "else", "cls", ".", "LABELS", "[", "-", "1", "]", ",", "\n", ")", "\n", ")", "\n", "", "return", "examples", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.mlm_wikitext_103.MLMWikitext103Task.__init__": [[38, 42], ["jiant.MLMTask.__init__"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.radam.AdamW.__init__"], ["def", "__init__", "(", "self", ",", "name", ",", "path_dict", ",", "mlm_probability", "=", "0.15", ",", "do_mask", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "name", "=", "name", ",", "path_dict", "=", "path_dict", ")", "\n", "self", ".", "mlm_probability", "=", "mlm_probability", "\n", "self", ".", "do_mask", "=", "do_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.mlm_wikitext_103.MLMWikitext103Task.get_train_examples": [[43, 45], ["mlm_wikitext_103.MLMWikitext103Task._create_examples"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples"], ["", "def", "get_train_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "path", "=", "self", ".", "train_path", ",", "set_type", "=", "\"train\"", ",", "return_generator", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.mlm_wikitext_103.MLMWikitext103Task.get_val_examples": [[46, 48], ["mlm_wikitext_103.MLMWikitext103Task._create_examples"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples"], ["", "def", "get_val_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "path", "=", "self", ".", "val_path", ",", "set_type", "=", "\"val\"", ",", "return_generator", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.mlm_wikitext_103.MLMWikitext103Task.get_test_examples": [[49, 51], ["mlm_wikitext_103.MLMWikitext103Task._create_examples"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples"], ["", "def", "get_test_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "path", "=", "self", ".", "test_path", ",", "set_type", "=", "\"test\"", ",", "return_generator", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.mlm_wikitext_103.MLMWikitext103Task._get_examples_generator": [[52, 58], ["open", "enumerate", "mlm_wikitext_103.Example", "line.strip"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_get_examples_generator", "(", "cls", ",", "path", ",", "set_type", ")", ":", "\n", "        ", "with", "open", "(", "path", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "f", ")", ":", "\n", "                ", "yield", "Example", "(", "\n", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "i", ")", ",", "text", "=", "line", ".", "strip", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.mlm_wikitext_103.MLMWikitext103Task._create_examples": [[60, 67], ["jiant.utils.python.datastructures.ReusableGenerator", "list"], "methods", ["None"], ["", "", "", "@", "classmethod", "\n", "def", "_create_examples", "(", "cls", ",", "path", ",", "set_type", ",", "return_generator", ")", ":", "\n", "        ", "generator", "=", "ReusableGenerator", "(", "cls", ".", "_get_examples_generator", ",", "path", "=", "path", ",", "set_type", "=", "set_type", ")", "\n", "if", "return_generator", ":", "\n", "            ", "return", "generator", "\n", "", "else", ":", "\n", "            ", "return", "list", "(", "generator", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.qnli.Example.tokenize": [[25, 31], ["qnli.TokenizedExample", "tokenizer.tokenize", "tokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.tokenize", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.tokenize"], ["def", "tokenize", "(", "self", ",", "tokenizer", ")", ":", "\n", "        ", "return", "TokenizedExample", "(", "\n", "guid", "=", "self", ".", "guid", ",", "\n", "input_premise", "=", "tokenizer", ".", "tokenize", "(", "self", ".", "input_premise", ")", ",", "\n", "input_hypothesis", "=", "tokenizer", ".", "tokenize", "(", "self", ".", "input_hypothesis", ")", ",", "\n", "label_id", "=", "QnliTask", ".", "LABEL_TO_ID", "[", "self", ".", "label", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.qnli.TokenizedExample.featurize": [[41, 50], ["jiant.tasks.lib.templates.shared.double_sentence_featurize"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.double_sentence_featurize"], ["def", "featurize", "(", "self", ",", "tokenizer", ",", "feat_spec", ")", ":", "\n", "        ", "return", "double_sentence_featurize", "(", "\n", "guid", "=", "self", ".", "guid", ",", "\n", "input_tokens_a", "=", "self", ".", "input_premise", ",", "\n", "input_tokens_b", "=", "self", ".", "input_hypothesis", ",", "\n", "label_id", "=", "self", ".", "label_id", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "feat_spec", "=", "feat_spec", ",", "\n", "data_row_class", "=", "DataRow", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.qnli.QnliTask.get_train_examples": [[82, 84], ["qnli.QnliTask._create_examples", "jiant.utils.python.io.read_jsonl"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_jsonl"], ["def", "get_train_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_jsonl", "(", "self", ".", "train_path", ")", ",", "set_type", "=", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.qnli.QnliTask.get_val_examples": [[85, 87], ["qnli.QnliTask._create_examples", "jiant.utils.python.io.read_jsonl"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_jsonl"], ["", "def", "get_val_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_jsonl", "(", "self", ".", "val_path", ")", ",", "set_type", "=", "\"val\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.qnli.QnliTask.get_test_examples": [[88, 90], ["qnli.QnliTask._create_examples", "jiant.utils.python.io.read_jsonl"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_jsonl"], ["", "def", "get_test_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_jsonl", "(", "self", ".", "test_path", ")", ",", "set_type", "=", "\"test\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.qnli.QnliTask._create_examples": [[91, 104], ["enumerate", "examples.append", "qnli.Example"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_create_examples", "(", "cls", ",", "lines", ",", "set_type", ")", ":", "\n", "        ", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "examples", ".", "append", "(", "\n", "Example", "(", "\n", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "i", ")", ",", "\n", "input_premise", "=", "line", "[", "\"premise\"", "]", ",", "\n", "input_hypothesis", "=", "line", "[", "\"hypothesis\"", "]", ",", "\n", "label", "=", "line", "[", "\"label\"", "]", "if", "set_type", "!=", "\"test\"", "else", "cls", ".", "LABELS", "[", "-", "1", "]", ",", "\n", ")", "\n", ")", "\n", "", "return", "examples", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.scitail.Example.tokenize": [[25, 31], ["scitail.TokenizedExample", "tokenizer.tokenize", "tokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.tokenize", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.tokenize"], ["def", "tokenize", "(", "self", ",", "tokenizer", ")", ":", "\n", "        ", "return", "TokenizedExample", "(", "\n", "guid", "=", "self", ".", "guid", ",", "\n", "input_premise", "=", "tokenizer", ".", "tokenize", "(", "self", ".", "input_premise", ")", ",", "\n", "input_hypothesis", "=", "tokenizer", ".", "tokenize", "(", "self", ".", "input_hypothesis", ")", ",", "\n", "label_id", "=", "SciTailTask", ".", "LABEL_TO_ID", "[", "self", ".", "label", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.scitail.TokenizedExample.featurize": [[41, 50], ["jiant.tasks.lib.templates.shared.double_sentence_featurize"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.double_sentence_featurize"], ["def", "featurize", "(", "self", ",", "tokenizer", ",", "feat_spec", ")", ":", "\n", "        ", "return", "double_sentence_featurize", "(", "\n", "guid", "=", "self", ".", "guid", ",", "\n", "input_tokens_a", "=", "self", ".", "input_premise", ",", "\n", "input_tokens_b", "=", "self", ".", "input_hypothesis", ",", "\n", "label_id", "=", "self", ".", "label_id", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "feat_spec", "=", "feat_spec", ",", "\n", "data_row_class", "=", "DataRow", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.scitail.SciTailTask.get_train_examples": [[83, 85], ["scitail.SciTailTask._create_examples"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples"], ["def", "get_train_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "self", ".", "train_path", ",", "set_type", "=", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.scitail.SciTailTask.get_val_examples": [[86, 88], ["scitail.SciTailTask._create_examples"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples"], ["", "def", "get_val_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "self", ".", "val_path", ",", "set_type", "=", "\"val\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.scitail.SciTailTask.get_test_examples": [[89, 91], ["scitail.SciTailTask._create_examples"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples"], ["", "def", "get_test_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "self", ".", "test_path", ",", "set_type", "=", "\"test\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.scitail.SciTailTask._create_examples": [[92, 106], ["pandas.read_csv", "enumerate", "pandas.read_csv.itertuples", "examples.append", "scitail.Example"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_create_examples", "(", "cls", ",", "path", ",", "set_type", ")", ":", "\n", "        ", "df", "=", "pd", ".", "read_csv", "(", "path", ",", "sep", "=", "\"\\t\"", ",", "header", "=", "None", ",", "names", "=", "[", "\"premise\"", ",", "\"hypothesis\"", ",", "\"label\"", "]", ",", ")", "\n", "examples", "=", "[", "]", "\n", "for", "i", ",", "row", "in", "enumerate", "(", "df", ".", "itertuples", "(", ")", ")", ":", "\n", "            ", "examples", ".", "append", "(", "\n", "Example", "(", "\n", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "i", ")", ",", "\n", "input_premise", "=", "row", ".", "premise", ",", "\n", "input_hypothesis", "=", "row", ".", "hypothesis", ",", "\n", "label", "=", "row", ".", "label", "if", "set_type", "!=", "\"test\"", "else", "cls", ".", "LABELS", "[", "-", "1", "]", ",", "\n", ")", "\n", ")", "\n", "", "return", "examples", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.qqp.Example.tokenize": [[25, 31], ["qqp.TokenizedExample", "tokenizer.tokenize", "tokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.tokenize", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.tokenize"], ["def", "tokenize", "(", "self", ",", "tokenizer", ")", ":", "\n", "        ", "return", "TokenizedExample", "(", "\n", "guid", "=", "self", ".", "guid", ",", "\n", "text_a", "=", "tokenizer", ".", "tokenize", "(", "self", ".", "text_a", ")", ",", "\n", "text_b", "=", "tokenizer", ".", "tokenize", "(", "self", ".", "text_b", ")", ",", "\n", "label_id", "=", "QqpTask", ".", "LABEL_TO_ID", "[", "self", ".", "label", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.qqp.TokenizedExample.featurize": [[41, 50], ["jiant.tasks.lib.templates.shared.double_sentence_featurize"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.double_sentence_featurize"], ["def", "featurize", "(", "self", ",", "tokenizer", ",", "feat_spec", ")", ":", "\n", "        ", "return", "double_sentence_featurize", "(", "\n", "guid", "=", "self", ".", "guid", ",", "\n", "input_tokens_a", "=", "self", ".", "text_a", ",", "\n", "input_tokens_b", "=", "self", ".", "text_b", ",", "\n", "label_id", "=", "self", ".", "label_id", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "feat_spec", "=", "feat_spec", ",", "\n", "data_row_class", "=", "DataRow", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.qqp.QqpTask.get_train_examples": [[82, 84], ["qqp.QqpTask._create_examples", "jiant.utils.python.io.read_jsonl"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_jsonl"], ["def", "get_train_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_jsonl", "(", "self", ".", "train_path", ")", ",", "set_type", "=", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.qqp.QqpTask.get_val_examples": [[85, 87], ["qqp.QqpTask._create_examples", "jiant.utils.python.io.read_jsonl"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_jsonl"], ["", "def", "get_val_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_jsonl", "(", "self", ".", "val_path", ")", ",", "set_type", "=", "\"val\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.qqp.QqpTask.get_test_examples": [[88, 90], ["qqp.QqpTask._create_examples", "jiant.utils.python.io.read_jsonl"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_jsonl"], ["", "def", "get_test_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_jsonl", "(", "self", ".", "test_path", ")", ",", "set_type", "=", "\"test\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.qqp.QqpTask._create_examples": [[91, 104], ["enumerate", "examples.append", "qqp.Example"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_create_examples", "(", "cls", ",", "lines", ",", "set_type", ")", ":", "\n", "        ", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "examples", ".", "append", "(", "\n", "Example", "(", "\n", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "i", ")", ",", "\n", "text_a", "=", "line", "[", "\"text_a\"", "]", ",", "\n", "text_b", "=", "line", "[", "\"text_b\"", "]", ",", "\n", "label", "=", "line", "[", "\"label\"", "]", "if", "set_type", "!=", "\"test\"", "else", "cls", ".", "LABELS", "[", "-", "1", "]", ",", "\n", ")", "\n", ")", "\n", "", "return", "examples", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.socialiqa.Example.task": [[10, 13], ["None"], "methods", ["None"], ["    ", "@", "property", "\n", "def", "task", "(", "self", ")", ":", "\n", "        ", "return", "SocialIQATask", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.socialiqa.SocialIQATask.get_train_examples": [[40, 45], ["socialiqa.SocialIQATask._create_examples", "jiant.utils.python.io.read_json_lines", "socialiqa.SocialIQATask._read_labels"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_json_lines", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.socialiqa.SocialIQATask._read_labels"], ["def", "get_train_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "\n", "lines", "=", "read_json_lines", "(", "self", ".", "train_path", ")", ",", "\n", "labels", "=", "self", ".", "_read_labels", "(", "self", ".", "path_dict", "[", "\"train_labels\"", "]", ")", ",", "\n", "set_type", "=", "\"train\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.socialiqa.SocialIQATask.get_val_examples": [[47, 52], ["socialiqa.SocialIQATask._create_examples", "jiant.utils.python.io.read_json_lines", "socialiqa.SocialIQATask._read_labels"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_json_lines", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.socialiqa.SocialIQATask._read_labels"], ["", "def", "get_val_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "\n", "lines", "=", "read_json_lines", "(", "self", ".", "val_path", ")", ",", "\n", "labels", "=", "self", ".", "_read_labels", "(", "self", ".", "path_dict", "[", "\"val_labels\"", "]", ")", ",", "\n", "set_type", "=", "\"val\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.socialiqa.SocialIQATask.get_test_examples": [[54, 56], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_test_examples", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"get_test_examples\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.socialiqa.SocialIQATask._create_examples": [[57, 71], ["enumerate", "zip", "examples.append", "socialiqa.Example"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_create_examples", "(", "cls", ",", "lines", ",", "labels", ",", "set_type", ")", ":", "\n", "        ", "examples", "=", "[", "]", "\n", "answer_key_ls", "=", "[", "\"answerA\"", ",", "\"answerB\"", ",", "\"answerC\"", "]", "\n", "for", "i", ",", "(", "line", ",", "label", ")", "in", "enumerate", "(", "zip", "(", "lines", ",", "labels", ")", ")", ":", "\n", "            ", "examples", ".", "append", "(", "\n", "Example", "(", "\n", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "i", ")", ",", "\n", "prompt", "=", "line", "[", "\"context\"", "]", "+", "\" \"", "+", "line", "[", "\"question\"", "]", ",", "\n", "choice_list", "=", "[", "line", "[", "answer_key", "]", "for", "answer_key", "in", "answer_key_ls", "]", ",", "\n", "label", "=", "label", ",", "\n", ")", "\n", ")", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.socialiqa.SocialIQATask._read_labels": [[72, 76], ["jiant.utils.python.io.read_file_lines", "int", "line.strip"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_file_lines"], ["", "@", "classmethod", "\n", "def", "_read_labels", "(", "cls", ",", "path", ")", ":", "\n", "        ", "lines", "=", "read_file_lines", "(", "path", ")", "\n", "return", "[", "int", "(", "line", ".", "strip", "(", ")", ")", "for", "line", "in", "lines", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.record.Example.tokenize": [[31, 39], ["record.Example.query_text.replace", "record.TokenizedExample", "tokenizer.tokenize", "tokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.tokenize", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.tokenize"], ["def", "tokenize", "(", "self", ",", "tokenizer", ")", ":", "\n", "        ", "filled_query_text", "=", "self", ".", "query_text", ".", "replace", "(", "\"@placeholder\"", ",", "self", ".", "entity_str", ")", "\n", "\n", "return", "TokenizedExample", "(", "\n", "guid", "=", "self", ".", "guid", ",", "\n", "passage_tokens", "=", "tokenizer", ".", "tokenize", "(", "self", ".", "passage_text", ")", ",", "\n", "query_tokens", "=", "tokenizer", ".", "tokenize", "(", "filled_query_text", ")", ",", "\n", "label_id", "=", "ReCoRDTask", ".", "LABEL_TO_ID", "[", "self", ".", "label", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.record.TokenizedExample.featurize": [[49, 58], ["jiant.tasks.lib.templates.shared.double_sentence_featurize"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.double_sentence_featurize"], ["def", "featurize", "(", "self", ",", "tokenizer", ",", "feat_spec", ")", ":", "\n", "        ", "return", "double_sentence_featurize", "(", "\n", "guid", "=", "self", ".", "guid", ",", "\n", "input_tokens_a", "=", "self", ".", "passage_tokens", ",", "\n", "input_tokens_b", "=", "self", ".", "query_tokens", ",", "\n", "label_id", "=", "self", ".", "label_id", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "feat_spec", "=", "feat_spec", ",", "\n", "data_row_class", "=", "DataRow", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.record.ReCoRDTask.get_train_examples": [[90, 92], ["record.ReCoRDTask._create_examples", "jiant.utils.python.io.read_json_lines"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_json_lines"], ["def", "get_train_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_json_lines", "(", "self", ".", "train_path", ")", ",", "set_type", "=", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.record.ReCoRDTask.get_val_examples": [[93, 95], ["record.ReCoRDTask._create_examples", "jiant.utils.python.io.read_json_lines"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_json_lines"], ["", "def", "get_val_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_json_lines", "(", "self", ".", "val_path", ")", ",", "set_type", "=", "\"val\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.record.ReCoRDTask.get_test_examples": [[96, 98], ["record.ReCoRDTask._create_examples", "jiant.utils.python.io.read_json_lines"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_json_lines"], ["", "def", "get_test_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_json_lines", "(", "self", ".", "test_path", ")", ",", "set_type", "=", "\"test\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.record.ReCoRDTask._create_examples": [[99, 133], ["examples.append", "record.Example", "len"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_create_examples", "(", "cls", ",", "lines", ",", "set_type", ")", ":", "\n", "        ", "examples", "=", "[", "]", "\n", "for", "line", "in", "lines", ":", "\n", "            ", "passage_text", "=", "line", "[", "\"passage\"", "]", "[", "\"text\"", "]", "\n", "for", "qas", "in", "line", "[", "\"qas\"", "]", ":", "\n", "                ", "answers_dict", "=", "{", "\n", "(", "answer", "[", "\"start\"", "]", ",", "answer", "[", "\"end\"", "]", ")", ":", "answer", "[", "\"text\"", "]", "for", "answer", "in", "qas", "[", "\"answers\"", "]", "\n", "}", "\n", "for", "entity", "in", "line", "[", "\"passage\"", "]", "[", "\"entities\"", "]", ":", "\n", "                    ", "entity_span", "=", "(", "entity", "[", "\"start\"", "]", ",", "entity", "[", "\"end\"", "]", ")", "\n", "if", "entity_span", "in", "answers_dict", ":", "\n", "                        ", "assert", "(", "\n", "passage_text", "[", "entity_span", "[", "0", "]", ":", "entity_span", "[", "1", "]", "+", "1", "]", "\n", "==", "answers_dict", "[", "entity_span", "]", "\n", ")", "\n", "label", "=", "True", "\n", "", "else", ":", "\n", "                        ", "label", "=", "False", "\n", "", "examples", ".", "append", "(", "\n", "Example", "(", "\n", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "len", "(", "examples", ")", ")", ",", "\n", "passage_text", "=", "passage_text", ",", "\n", "query_text", "=", "qas", "[", "\"query\"", "]", ",", "\n", "entity_start_char_idx", "=", "entity_span", "[", "0", "]", ",", "\n", "entity_end_char_idx", "=", "entity_span", "[", "1", "]", "+", "1", ",", "# make exclusive", "\n", "entity_str", "=", "passage_text", "[", "entity_span", "[", "0", "]", ":", "entity_span", "[", "1", "]", "+", "1", "]", ",", "\n", "passage_idx", "=", "line", "[", "\"idx\"", "]", ",", "\n", "question_idx", "=", "qas", "[", "\"idx\"", "]", ",", "\n", "answers_dict", "=", "answers_dict", ",", "\n", "label", "=", "label", ",", "\n", ")", "\n", ")", "\n", "", "", "", "return", "examples", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.counterfactual_nli.Example.tokenize": [[25, 31], ["counterfactual_nli.TokenizedExample", "tokenizer.tokenize", "tokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.tokenize", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.tokenize"], ["def", "tokenize", "(", "self", ",", "tokenizer", ")", ":", "\n", "        ", "return", "TokenizedExample", "(", "\n", "guid", "=", "self", ".", "guid", ",", "\n", "input_premise", "=", "tokenizer", ".", "tokenize", "(", "self", ".", "input_premise", ")", ",", "\n", "input_hypothesis", "=", "tokenizer", ".", "tokenize", "(", "self", ".", "input_hypothesis", ")", ",", "\n", "label_id", "=", "CounterfactualNliTask", ".", "LABEL_TO_ID", "[", "self", ".", "label", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.counterfactual_nli.TokenizedExample.featurize": [[41, 50], ["jiant.tasks.lib.templates.shared.double_sentence_featurize"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.double_sentence_featurize"], ["def", "featurize", "(", "self", ",", "tokenizer", ",", "feat_spec", ")", ":", "\n", "        ", "return", "double_sentence_featurize", "(", "\n", "guid", "=", "self", ".", "guid", ",", "\n", "input_tokens_a", "=", "self", ".", "input_premise", ",", "\n", "input_tokens_b", "=", "self", ".", "input_hypothesis", ",", "\n", "label_id", "=", "self", ".", "label_id", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "feat_spec", "=", "feat_spec", ",", "\n", "data_row_class", "=", "DataRow", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.counterfactual_nli.CounterfactualNliTask.get_train_examples": [[82, 84], ["counterfactual_nli.CounterfactualNliTask._create_examples", "jiant.utils.python.io.read_jsonl"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_jsonl"], ["def", "get_train_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_jsonl", "(", "self", ".", "train_path", ")", ",", "set_type", "=", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.counterfactual_nli.CounterfactualNliTask.get_val_examples": [[85, 87], ["counterfactual_nli.CounterfactualNliTask._create_examples", "jiant.utils.python.io.read_jsonl"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_jsonl"], ["", "def", "get_val_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_jsonl", "(", "self", ".", "val_path", ")", ",", "set_type", "=", "\"val\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.counterfactual_nli.CounterfactualNliTask.get_test_examples": [[88, 90], ["counterfactual_nli.CounterfactualNliTask._create_examples", "jiant.utils.python.io.read_jsonl"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_jsonl"], ["", "def", "get_test_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_jsonl", "(", "self", ".", "test_path", ")", ",", "set_type", "=", "\"test\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.counterfactual_nli.CounterfactualNliTask._create_examples": [[91, 116], ["enumerate", "examples.append", "counterfactual_nli.Example"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_create_examples", "(", "cls", ",", "lines", ",", "set_type", ")", ":", "\n", "        ", "examples", "=", "[", "]", "\n", "empty_labels", "=", "0", "\n", "dash_labels", "=", "0", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "if", "set_type", "!=", "\"test\"", ":", "\n", "                ", "if", "line", "[", "\"label\"", "]", "==", "\"-\"", ":", "\n", "                    ", "dash_labels", "+=", "1", "\n", "continue", "\n", "", "elif", "line", "[", "\"label\"", "]", "==", "\"\"", ":", "\n", "                    ", "empty_labels", "+=", "1", "\n", "continue", "\n", "", "else", ":", "\n", "                    ", "assert", "line", "[", "\"label\"", "]", "in", "cls", ".", "LABELS", ",", "f\"Example {i} label not supported: {line['label']}\"", "\n", "\n", "", "", "examples", ".", "append", "(", "\n", "Example", "(", "\n", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "i", ")", ",", "\n", "input_premise", "=", "line", "[", "\"premise\"", "]", ",", "\n", "input_hypothesis", "=", "line", "[", "\"hypothesis\"", "]", ",", "\n", "label", "=", "line", "[", "\"label\"", "]", "if", "set_type", "!=", "\"test\"", "else", "cls", ".", "LABELS", "[", "-", "1", "]", ",", "\n", ")", "\n", ")", "\n", "", "return", "examples", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.rte.Example.tokenize": [[25, 31], ["rte.TokenizedExample", "tokenizer.tokenize", "tokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.tokenize", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.tokenize"], ["def", "tokenize", "(", "self", ",", "tokenizer", ")", ":", "\n", "        ", "return", "TokenizedExample", "(", "\n", "guid", "=", "self", ".", "guid", ",", "\n", "input_premise", "=", "tokenizer", ".", "tokenize", "(", "self", ".", "input_premise", ")", ",", "\n", "input_hypothesis", "=", "tokenizer", ".", "tokenize", "(", "self", ".", "input_hypothesis", ")", ",", "\n", "label_id", "=", "RteTask", ".", "LABEL_TO_ID", "[", "self", ".", "label", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.rte.TokenizedExample.featurize": [[41, 50], ["jiant.tasks.lib.templates.shared.double_sentence_featurize"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.double_sentence_featurize"], ["def", "featurize", "(", "self", ",", "tokenizer", ",", "feat_spec", ")", ":", "\n", "        ", "return", "double_sentence_featurize", "(", "\n", "guid", "=", "self", ".", "guid", ",", "\n", "input_tokens_a", "=", "self", ".", "input_premise", ",", "\n", "input_tokens_b", "=", "self", ".", "input_hypothesis", ",", "\n", "label_id", "=", "self", ".", "label_id", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "feat_spec", "=", "feat_spec", ",", "\n", "data_row_class", "=", "DataRow", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.rte.RteTask.get_train_examples": [[82, 84], ["rte.RteTask._create_examples", "jiant.utils.python.io.read_jsonl"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_jsonl"], ["def", "get_train_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_jsonl", "(", "self", ".", "train_path", ")", ",", "set_type", "=", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.rte.RteTask.get_val_examples": [[85, 87], ["rte.RteTask._create_examples", "jiant.utils.python.io.read_jsonl"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_jsonl"], ["", "def", "get_val_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_jsonl", "(", "self", ".", "val_path", ")", ",", "set_type", "=", "\"val\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.rte.RteTask.get_test_examples": [[88, 90], ["rte.RteTask._create_examples", "jiant.utils.python.io.read_jsonl"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_jsonl"], ["", "def", "get_test_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_jsonl", "(", "self", ".", "test_path", ")", ",", "set_type", "=", "\"test\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.rte.RteTask._create_examples": [[91, 104], ["enumerate", "examples.append", "rte.Example"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_create_examples", "(", "cls", ",", "lines", ",", "set_type", ")", ":", "\n", "        ", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "examples", ".", "append", "(", "\n", "Example", "(", "\n", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "i", ")", ",", "\n", "input_premise", "=", "line", "[", "\"premise\"", "]", ",", "\n", "input_hypothesis", "=", "line", "[", "\"hypothesis\"", "]", ",", "\n", "label", "=", "line", "[", "\"label\"", "]", "if", "set_type", "!=", "\"test\"", "else", "cls", ".", "LABELS", "[", "-", "1", "]", ",", "\n", ")", "\n", ")", "\n", "", "return", "examples", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.wic.Example.tokenize": [[34, 50], ["jiant.get_token_span", "jiant.get_token_span", "wic.TokenizedExample", "tokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.hacky_tokenization_matching.get_token_span", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.hacky_tokenization_matching.get_token_span", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.tokenize"], ["def", "tokenize", "(", "self", ",", "tokenizer", ")", ":", "\n", "        ", "sentence1_tokens", ",", "sentence1_span", "=", "tokenization_utils", ".", "get_token_span", "(", "\n", "sentence", "=", "self", ".", "sentence1", ",", "span", "=", "self", ".", "span1", ",", "tokenizer", "=", "tokenizer", ",", "\n", ")", "\n", "sentence2_tokens", ",", "sentence2_span", "=", "tokenization_utils", ".", "get_token_span", "(", "\n", "sentence", "=", "self", ".", "sentence2", ",", "span", "=", "self", ".", "span2", ",", "tokenizer", "=", "tokenizer", ",", "\n", ")", "\n", "\n", "return", "TokenizedExample", "(", "\n", "guid", "=", "self", ".", "guid", ",", "\n", "sentence1_tokens", "=", "sentence1_tokens", ",", "\n", "sentence2_tokens", "=", "sentence2_tokens", ",", "\n", "word", "=", "tokenizer", ".", "tokenize", "(", "self", ".", "word", ")", ",", "# might be more than one token", "\n", "sentence1_span", "=", "sentence1_span", ",", "\n", "sentence2_span", "=", "sentence2_span", ",", "\n", "label_id", "=", "WiCTask", ".", "LABEL_TO_ID", "[", "self", ".", "label", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.wic.TokenizedExample.featurize": [[63, 149], ["jiant.tasks.utils.truncate_sequences", "jiant.tasks.lib.templates.shared.add_cls_token", "jiant.tasks.lib.templates.shared.create_input_set_from_tokens_and_segments", "jiant.tasks.utils.ExclusiveSpan().to_inclusive", "jiant.tasks.utils.ExclusiveSpan().to_inclusive", "wic.DataRow", "jiant.tasks.utils.ExclusiveSpan", "jiant.tasks.utils.ExclusiveSpan", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.utils.truncate_sequences", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.add_cls_token", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.create_input_set_from_tokens_and_segments", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.utils.ExclusiveSpan.to_inclusive", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.utils.ExclusiveSpan.to_inclusive"], ["def", "featurize", "(", "self", ",", "tokenizer", ",", "feat_spec", ")", ":", "\n", "        ", "if", "feat_spec", ".", "sep_token_extra", ":", "\n", "            ", "maybe_extra_sep", "=", "[", "tokenizer", ".", "sep_token", "]", "\n", "maybe_extra_sep_segment_id", "=", "[", "feat_spec", ".", "sequence_a_segment_id", "]", "\n", "special_tokens_count", "=", "6", "# CLS, SEP-SEP, SEP-SEP, SEP", "\n", "", "else", ":", "\n", "            ", "maybe_extra_sep", "=", "[", "]", "\n", "maybe_extra_sep_segment_id", "=", "[", "]", "\n", "special_tokens_count", "=", "4", "# CLS, SEP, SEP, SEP", "\n", "\n", "", "sentence1_tokens", ",", "sentence2_tokens", "=", "truncate_sequences", "(", "\n", "tokens_ls", "=", "[", "self", ".", "sentence1_tokens", ",", "self", ".", "sentence2_tokens", "]", ",", "\n", "max_length", "=", "feat_spec", ".", "max_seq_length", "-", "len", "(", "self", ".", "word", ")", "-", "special_tokens_count", ",", "\n", ")", "\n", "\n", "unpadded_tokens", "=", "(", "\n", "self", ".", "word", "\n", "+", "[", "tokenizer", ".", "sep_token", "]", "\n", "+", "maybe_extra_sep", "\n", "+", "sentence1_tokens", "\n", "+", "[", "tokenizer", ".", "sep_token", "]", "\n", "+", "maybe_extra_sep", "\n", "+", "sentence2_tokens", "\n", "+", "[", "tokenizer", ".", "sep_token", "]", "\n", ")", "\n", "# Don't have a choice here -- just leave words as part of sent1", "\n", "unpadded_segment_ids", "=", "(", "\n", "[", "feat_spec", ".", "sequence_a_segment_id", "]", "*", "(", "len", "(", "self", ".", "word", ")", "+", "1", ")", "\n", "+", "maybe_extra_sep_segment_id", "\n", "+", "[", "feat_spec", ".", "sequence_a_segment_id", "]", "*", "(", "len", "(", "sentence1_tokens", ")", "+", "1", ")", "\n", "+", "maybe_extra_sep_segment_id", "\n", "+", "[", "feat_spec", ".", "sequence_b_segment_id", "]", "*", "(", "len", "(", "sentence2_tokens", ")", "+", "1", ")", "\n", ")", "\n", "\n", "unpadded_inputs", "=", "add_cls_token", "(", "\n", "unpadded_tokens", "=", "unpadded_tokens", ",", "\n", "unpadded_segment_ids", "=", "unpadded_segment_ids", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "feat_spec", "=", "feat_spec", ",", "\n", ")", "\n", "\n", "input_set", "=", "create_input_set_from_tokens_and_segments", "(", "\n", "unpadded_tokens", "=", "unpadded_inputs", ".", "unpadded_tokens", ",", "\n", "unpadded_segment_ids", "=", "unpadded_inputs", ".", "unpadded_segment_ids", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "feat_spec", "=", "feat_spec", ",", "\n", ")", "\n", "\n", "word_sep_offset", "=", "2", "if", "feat_spec", ".", "sep_token_extra", "else", "1", "\n", "sent1_sep_offset", "=", "2", "if", "feat_spec", ".", "sep_token_extra", "else", "1", "\n", "\n", "# Both should be inclusive spans at the end", "\n", "sentence1_span", "=", "ExclusiveSpan", "(", "\n", "start", "=", "self", ".", "sentence1_span", "[", "0", "]", "\n", "+", "unpadded_inputs", ".", "cls_offset", "\n", "+", "word_sep_offset", "\n", "+", "len", "(", "self", ".", "word", ")", ",", "\n", "end", "=", "self", ".", "sentence1_span", "[", "1", "]", "\n", "+", "unpadded_inputs", ".", "cls_offset", "\n", "+", "word_sep_offset", "\n", "+", "len", "(", "self", ".", "word", ")", ",", "\n", ")", ".", "to_inclusive", "(", ")", "\n", "sentence2_span", "=", "ExclusiveSpan", "(", "\n", "start", "=", "self", ".", "sentence2_span", "[", "0", "]", "\n", "+", "unpadded_inputs", ".", "cls_offset", "\n", "+", "word_sep_offset", "\n", "+", "sent1_sep_offset", "\n", "+", "len", "(", "self", ".", "word", ")", "\n", "+", "len", "(", "sentence1_tokens", ")", ",", "\n", "end", "=", "self", ".", "sentence2_span", "[", "1", "]", "\n", "+", "unpadded_inputs", ".", "cls_offset", "\n", "+", "word_sep_offset", "\n", "+", "sent1_sep_offset", "\n", "+", "len", "(", "self", ".", "word", ")", "\n", "+", "len", "(", "sentence1_tokens", ")", ",", "\n", ")", ".", "to_inclusive", "(", ")", "\n", "\n", "return", "DataRow", "(", "\n", "guid", "=", "self", ".", "guid", ",", "\n", "input_ids", "=", "np", ".", "array", "(", "input_set", ".", "input_ids", ")", ",", "\n", "input_mask", "=", "np", ".", "array", "(", "input_set", ".", "input_mask", ")", ",", "\n", "segment_ids", "=", "np", ".", "array", "(", "input_set", ".", "segment_ids", ")", ",", "\n", "spans", "=", "np", ".", "array", "(", "[", "sentence1_span", ",", "sentence2_span", "]", ")", ",", "\n", "label_id", "=", "self", ".", "label_id", ",", "\n", "tokens", "=", "unpadded_inputs", ".", "unpadded_tokens", ",", "\n", "word", "=", "self", ".", "word", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.wic.WiCTask.num_spans": [[185, 188], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "num_spans", "(", "self", ")", ":", "\n", "        ", "return", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.wic.WiCTask.get_train_examples": [[189, 191], ["wic.WiCTask._create_examples", "jiant.utils.python.io.read_json_lines"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_json_lines"], ["", "def", "get_train_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_json_lines", "(", "self", ".", "train_path", ")", ",", "set_type", "=", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.wic.WiCTask.get_val_examples": [[192, 194], ["wic.WiCTask._create_examples", "jiant.utils.python.io.read_json_lines"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_json_lines"], ["", "def", "get_val_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_json_lines", "(", "self", ".", "val_path", ")", ",", "set_type", "=", "\"val\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.wic.WiCTask.get_test_examples": [[195, 197], ["wic.WiCTask._create_examples", "jiant.utils.python.io.read_json_lines"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_json_lines"], ["", "def", "get_test_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_json_lines", "(", "self", ".", "test_path", ")", ",", "set_type", "=", "\"test\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.wic.WiCTask._create_examples": [[198, 218], ["jiant.tasks.utils.ExclusiveSpan", "jiant.tasks.utils.ExclusiveSpan", "examples.append", "int", "int", "int", "int", "wic.Example"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_create_examples", "(", "cls", ",", "lines", ",", "set_type", ")", ":", "\n", "        ", "examples", "=", "[", "]", "\n", "for", "line", "in", "lines", ":", "\n", "            ", "span1", "=", "ExclusiveSpan", "(", "int", "(", "line", "[", "\"start1\"", "]", ")", ",", "int", "(", "line", "[", "\"end1\"", "]", ")", ")", "\n", "span2", "=", "ExclusiveSpan", "(", "int", "(", "line", "[", "\"start2\"", "]", ")", ",", "int", "(", "line", "[", "\"end2\"", "]", ")", ")", "\n", "# Note, the chosen word may be different (e.g. different tenses) in sent1 and sent2,", "\n", "#   hence we don't do an assert here.", "\n", "examples", ".", "append", "(", "\n", "Example", "(", "\n", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "line", "[", "\"idx\"", "]", ")", ",", "\n", "sentence1", "=", "line", "[", "\"sentence1\"", "]", ",", "\n", "sentence2", "=", "line", "[", "\"sentence2\"", "]", ",", "\n", "word", "=", "line", "[", "\"word\"", "]", ",", "\n", "span1", "=", "span1", ",", "\n", "span2", "=", "span2", ",", "\n", "label", "=", "line", "[", "\"label\"", "]", "if", "set_type", "!=", "\"test\"", "else", "cls", ".", "LABELS", "[", "-", "1", "]", ",", "\n", ")", "\n", ")", "\n", "", "return", "examples", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.swag.Example.task": [[10, 13], ["None"], "methods", ["None"], ["    ", "@", "property", "\n", "def", "task", "(", "self", ")", ":", "\n", "        ", "return", "SWAGTask", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.swag.SWAGTask.get_train_examples": [[40, 42], ["swag.SWAGTask._create_examples"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples"], ["def", "get_train_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "path", "=", "self", ".", "train_path", ",", "set_type", "=", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.swag.SWAGTask.get_val_examples": [[43, 45], ["swag.SWAGTask._create_examples"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples"], ["", "def", "get_val_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "path", "=", "self", ".", "val_path", ",", "set_type", "=", "\"val\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.swag.SWAGTask.get_test_examples": [[46, 48], ["swag.SWAGTask._create_examples"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples"], ["", "def", "get_test_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "path", "=", "self", ".", "test_path", ",", "set_type", "=", "\"test\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.swag.SWAGTask._create_examples": [[49, 68], ["pandas.read_csv", "enumerate", "pandas.read_csv.itertuples", "examples.append", "swag.Example"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_create_examples", "(", "cls", ",", "path", ",", "set_type", ")", ":", "\n", "        ", "df", "=", "pd", ".", "read_csv", "(", "path", ")", "\n", "examples", "=", "[", "]", "\n", "for", "i", ",", "row", "in", "enumerate", "(", "df", ".", "itertuples", "(", ")", ")", ":", "\n", "            ", "examples", ".", "append", "(", "\n", "Example", "(", "\n", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "i", ")", ",", "\n", "prompt", "=", "row", ".", "sent1", ",", "\n", "choice_list", "=", "[", "\n", "row", ".", "sent2", "+", "\" \"", "+", "row", ".", "ending0", ",", "\n", "row", ".", "sent2", "+", "\" \"", "+", "row", ".", "ending1", ",", "\n", "row", ".", "sent2", "+", "\" \"", "+", "row", ".", "ending2", ",", "\n", "row", ".", "sent2", "+", "\" \"", "+", "row", ".", "ending3", ",", "\n", "]", ",", "\n", "label", "=", "row", ".", "label", "if", "set_type", "!=", "\"test\"", "else", "cls", ".", "CHOICE_KEYS", "[", "-", "1", "]", ",", "\n", ")", "\n", ")", "\n", "", "return", "examples", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.Example.tokenize": [[25, 31], ["commitmentbank.TokenizedExample", "tokenizer.tokenize", "tokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.tokenize", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.tokenize"], ["def", "tokenize", "(", "self", ",", "tokenizer", ")", ":", "\n", "        ", "return", "TokenizedExample", "(", "\n", "guid", "=", "self", ".", "guid", ",", "\n", "input_premise", "=", "tokenizer", ".", "tokenize", "(", "self", ".", "input_premise", ")", ",", "\n", "input_hypothesis", "=", "tokenizer", ".", "tokenize", "(", "self", ".", "input_hypothesis", ")", ",", "\n", "label_id", "=", "CommitmentBankTask", ".", "LABEL_TO_ID", "[", "self", ".", "label", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.TokenizedExample.featurize": [[41, 50], ["jiant.tasks.lib.templates.shared.double_sentence_featurize"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.double_sentence_featurize"], ["def", "featurize", "(", "self", ",", "tokenizer", ",", "feat_spec", ")", ":", "\n", "        ", "return", "double_sentence_featurize", "(", "\n", "guid", "=", "self", ".", "guid", ",", "\n", "input_tokens_a", "=", "self", ".", "input_premise", ",", "\n", "input_tokens_b", "=", "self", ".", "input_hypothesis", ",", "\n", "label_id", "=", "self", ".", "label_id", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "feat_spec", "=", "feat_spec", ",", "\n", "data_row_class", "=", "DataRow", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask.get_train_examples": [[82, 84], ["commitmentbank.CommitmentBankTask._create_examples", "jiant.utils.python.io.read_json_lines"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_json_lines"], ["def", "get_train_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_json_lines", "(", "self", ".", "train_path", ")", ",", "set_type", "=", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask.get_val_examples": [[85, 87], ["commitmentbank.CommitmentBankTask._create_examples", "jiant.utils.python.io.read_json_lines"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_json_lines"], ["", "def", "get_val_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_json_lines", "(", "self", ".", "val_path", ")", ",", "set_type", "=", "\"val\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask.get_test_examples": [[88, 90], ["commitmentbank.CommitmentBankTask._create_examples", "jiant.utils.python.io.read_json_lines"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_json_lines"], ["", "def", "get_test_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_create_examples", "(", "lines", "=", "read_json_lines", "(", "self", ".", "test_path", ")", ",", "set_type", "=", "\"test\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.commitmentbank.CommitmentBankTask._create_examples": [[91, 104], ["examples.append", "commitmentbank.Example"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_create_examples", "(", "cls", ",", "lines", ",", "set_type", ")", ":", "\n", "        ", "examples", "=", "[", "]", "\n", "for", "line", "in", "lines", ":", "\n", "            ", "examples", ".", "append", "(", "\n", "Example", "(", "\n", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "line", "[", "\"idx\"", "]", ")", ",", "\n", "input_premise", "=", "line", "[", "\"premise\"", "]", ",", "\n", "input_hypothesis", "=", "line", "[", "\"hypothesis\"", "]", ",", "\n", "label", "=", "line", "[", "\"label\"", "]", "if", "set_type", "!=", "\"test\"", "else", "cls", ".", "LABELS", "[", "-", "1", "]", ",", "\n", ")", "\n", ")", "\n", "", "return", "examples", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.mlm_crosslingual_wiki.MLMCrosslingualWikiTask.__init__": [[38, 42], ["jiant.MLMTask.__init__"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.radam.AdamW.__init__"], ["def", "__init__", "(", "self", ",", "name", ",", "path_dict", ",", "mlm_probability", "=", "0.15", ",", "do_mask", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "name", "=", "name", ",", "path_dict", "=", "path_dict", ")", "\n", "self", ".", "mlm_probability", "=", "mlm_probability", "\n", "self", ".", "do_mask", "=", "do_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.mlm_crosslingual_wiki.MLMCrosslingualWikiTask.get_train_examples": [[43, 45], ["mlm_crosslingual_wiki.MLMCrosslingualWikiTask.create_examples"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.mlm.MLMTask.create_examples"], ["", "def", "get_train_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "create_examples", "(", "path", "=", "self", ".", "train_path", ",", "set_type", "=", "\"train\"", ",", "return_generator", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.mlm_crosslingual_wiki.MLMCrosslingualWikiTask.get_val_examples": [[46, 48], ["mlm_crosslingual_wiki.MLMCrosslingualWikiTask.create_examples"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.mlm.MLMTask.create_examples"], ["", "def", "get_val_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "create_examples", "(", "path", "=", "self", ".", "val_path", ",", "set_type", "=", "\"val\"", ",", "return_generator", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.mlm_crosslingual_wiki.MLMCrosslingualWikiTask.get_test_examples": [[49, 51], ["mlm_crosslingual_wiki.MLMCrosslingualWikiTask.create_examples"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.mlm.MLMTask.create_examples"], ["", "def", "get_test_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "create_examples", "(", "path", "=", "self", ".", "test_path", ",", "set_type", "=", "\"test\"", ",", "return_generator", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.mlm_crosslingual_wiki.MLMCrosslingualWikiTask.get_examples_generator": [[52, 58], ["open", "enumerate", "mlm_crosslingual_wiki.Example", "line.strip"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "get_examples_generator", "(", "cls", ",", "path", ",", "set_type", ")", ":", "\n", "        ", "with", "open", "(", "path", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "f", ")", ":", "\n", "                ", "yield", "Example", "(", "\n", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "i", ")", ",", "text", "=", "line", ".", "strip", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.mlm_crosslingual_wiki.MLMCrosslingualWikiTask.create_examples": [[60, 67], ["jiant.utils.python.datastructures.ReusableGenerator", "list"], "methods", ["None"], ["", "", "", "@", "classmethod", "\n", "def", "create_examples", "(", "cls", ",", "path", ",", "set_type", ",", "return_generator", ")", ":", "\n", "        ", "generator", "=", "ReusableGenerator", "(", "cls", ".", "get_examples_generator", ",", "path", "=", "path", ",", "set_type", "=", "set_type", ")", "\n", "if", "return_generator", ":", "\n", "            ", "return", "generator", "\n", "", "else", ":", "\n", "            ", "return", "list", "(", "generator", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.squad.Example.tokenize": [[8, 10], ["NotImplementedError"], "methods", ["None"], ["    ", "def", "tokenize", "(", "self", ",", "tokenizer", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"SQuaD is weird\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.test_sst.test_featurization_of_task_data": [[93, 133], ["jiant.tasks.create_task_from_config_path", "jiant.tasks.create_task_from_config_path.get_train_examples", "zip", "collections.Counter", "list", "jiant.utils.testing.tokenizer.SimpleSpaceTokenizer", "zip", "jiant.utils.testing.tokenizer.SimpleSpaceTokenizer.get_feat_spec", "featurized_examples[].to_dict", "os.path.join", "collections.Counter.update", "collections.Counter.keys", "example.tokenize", "tokenized_example.featurize", "os.path.dirname", "example_dataclass.to_dict", "example.text.split", "tokenized_example.to_dict"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.retrieval.create_task_from_config_path", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.BaseSquadStyleTask.get_train_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.testing.tokenizer.SimpleSpaceTokenizer.get_feat_spec", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.ValState.to_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.ConcatenateLossAccumulator.update", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.tokenize", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.mlm.TokenizedExample.featurize", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.ValState.to_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.ValState.to_dict"], ["def", "test_featurization_of_task_data", "(", ")", ":", "\n", "# Test reading the task-specific toy dataset into examples.", "\n", "    ", "task", "=", "create_task_from_config_path", "(", "\n", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "\"resources/sst.json\"", ")", ",", "verbose", "=", "True", "\n", ")", "\n", "examples", "=", "task", ".", "get_train_examples", "(", ")", "\n", "for", "example_dataclass", ",", "raw_example_dict", "in", "zip", "(", "examples", ",", "TRAIN_EXAMPLES", ")", ":", "\n", "        ", "assert", "example_dataclass", ".", "to_dict", "(", ")", "==", "raw_example_dict", "\n", "\n", "# Testing conversion of examples into tokenized examples", "\n", "# the dummy tokenizer requires a vocab \u2014 using a Counter here to find that vocab from the data:", "\n", "", "token_counter", "=", "Counter", "(", ")", "\n", "for", "example", "in", "examples", ":", "\n", "        ", "token_counter", ".", "update", "(", "example", ".", "text", ".", "split", "(", ")", ")", "\n", "", "token_vocab", "=", "list", "(", "token_counter", ".", "keys", "(", ")", ")", "\n", "tokenizer", "=", "SimpleSpaceTokenizer", "(", "vocabulary", "=", "token_vocab", ")", "\n", "tokenized_examples", "=", "[", "example", ".", "tokenize", "(", "tokenizer", ")", "for", "example", "in", "examples", "]", "\n", "for", "tokenized_example", ",", "expected_tokenized_example", "in", "zip", "(", "\n", "tokenized_examples", ",", "TOKENIZED_TRAIN_EXAMPLES", "\n", ")", ":", "\n", "        ", "assert", "tokenized_example", ".", "to_dict", "(", ")", "==", "expected_tokenized_example", "\n", "\n", "# Testing conversion of a tokenized example to a featurized example", "\n", "", "feat_spec", "=", "tokenizer", ".", "get_feat_spec", "(", "max_seq_length", "=", "10", ")", "\n", "featurized_examples", "=", "[", "\n", "tokenized_example", ".", "featurize", "(", "tokenizer", "=", "tokenizer", ",", "feat_spec", "=", "feat_spec", ")", "\n", "for", "tokenized_example", "in", "tokenized_examples", "\n", "]", "\n", "featurized_example_0_dict", "=", "featurized_examples", "[", "0", "]", ".", "to_dict", "(", ")", "\n", "# not bothering to compare the input_ids because they were made by a dummy tokenizer.", "\n", "assert", "\"input_ids\"", "in", "featurized_example_0_dict", "\n", "assert", "featurized_example_0_dict", "[", "\"guid\"", "]", "==", "FEATURIZED_TRAIN_EXAMPLE_0", "[", "\"guid\"", "]", "\n", "assert", "(", "\n", "featurized_example_0_dict", "[", "\"input_mask\"", "]", "==", "FEATURIZED_TRAIN_EXAMPLE_0", "[", "\"input_mask\"", "]", "\n", ")", ".", "all", "(", ")", "\n", "assert", "(", "\n", "featurized_example_0_dict", "[", "\"segment_ids\"", "]", "==", "FEATURIZED_TRAIN_EXAMPLE_0", "[", "\"segment_ids\"", "]", "\n", ")", ".", "all", "(", ")", "\n", "assert", "featurized_example_0_dict", "[", "\"label_id\"", "]", "==", "FEATURIZED_TRAIN_EXAMPLE_0", "[", "\"label_id\"", "]", "\n", "assert", "featurized_example_0_dict", "[", "\"tokens\"", "]", "==", "FEATURIZED_TRAIN_EXAMPLE_0", "[", "\"tokens\"", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.lib.test_mnli.test_featurization_of_task_data": [[271, 322], ["jiant.tasks.create_task_from_config_path", "jiant.tasks.create_task_from_config_path.get_train_examples", "jiant.tasks.create_task_from_config_path.get_val_examples", "jiant.tasks.create_task_from_config_path.get_test_examples", "zip", "collections.Counter", "list", "jiant.utils.testing.tokenizer.SimpleSpaceTokenizer", "zip", "jiant.shared.model_resolution.build_featurization_spec", "featurized_examples[].to_dict", "os.path.join", "collections.Counter.update", "collections.Counter.update", "collections.Counter.keys", "example.tokenize", "len", "len", "tokenized_example.featurize", "os.path.dirname", "train_example_dataclass.to_dict", "example.premise.split", "example.hypothesis.split", "tokenized_example.to_dict"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.retrieval.create_task_from_config_path", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.BaseSquadStyleTask.get_train_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.BaseSquadStyleTask.get_val_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.BaseSquadStyleTask.get_test_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_resolution.build_featurization_spec", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.ValState.to_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.ConcatenateLossAccumulator.update", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.ConcatenateLossAccumulator.update", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.tokenize", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.mlm.TokenizedExample.featurize", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.ValState.to_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.ValState.to_dict"], ["def", "test_featurization_of_task_data", "(", ")", ":", "\n", "# Test reading the task-specific toy dataset into examples.", "\n", "    ", "task", "=", "create_task_from_config_path", "(", "\n", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "\"resources/mnli.json\"", ")", ",", "verbose", "=", "False", "\n", ")", "\n", "# Test getting train, val, and test examples. Only the contents of train are checked.", "\n", "train_examples", "=", "task", ".", "get_train_examples", "(", ")", "\n", "val_examples", "=", "task", ".", "get_val_examples", "(", ")", "\n", "test_examples", "=", "task", ".", "get_test_examples", "(", ")", "\n", "for", "train_example_dataclass", ",", "raw_example_dict", "in", "zip", "(", "train_examples", ",", "TRAIN_EXAMPLES", ")", ":", "\n", "        ", "assert", "train_example_dataclass", ".", "to_dict", "(", ")", "==", "raw_example_dict", "\n", "", "assert", "val_examples", "\n", "assert", "test_examples", "\n", "\n", "# Testing conversion of examples into tokenized examples", "\n", "# the dummy tokenizer requires a vocab \u2014 using a Counter here to find that vocab from the data:", "\n", "token_counter", "=", "Counter", "(", ")", "\n", "for", "example", "in", "train_examples", ":", "\n", "        ", "token_counter", ".", "update", "(", "example", ".", "premise", ".", "split", "(", ")", ")", "\n", "token_counter", ".", "update", "(", "example", ".", "hypothesis", ".", "split", "(", ")", ")", "\n", "", "token_vocab", "=", "list", "(", "token_counter", ".", "keys", "(", ")", ")", "\n", "tokenizer", "=", "SimpleSpaceTokenizer", "(", "vocabulary", "=", "token_vocab", ")", "\n", "tokenized_examples", "=", "[", "example", ".", "tokenize", "(", "tokenizer", ")", "for", "example", "in", "train_examples", "]", "\n", "for", "tokenized_example", ",", "expected_tokenized_example", "in", "zip", "(", "\n", "tokenized_examples", ",", "TOKENIZED_TRAIN_EXAMPLES", "\n", ")", ":", "\n", "        ", "assert", "tokenized_example", ".", "to_dict", "(", ")", "==", "expected_tokenized_example", "\n", "\n", "# Testing conversion of a tokenized example to a featurized example", "\n", "", "train_example_0_length", "=", "len", "(", "tokenized_examples", "[", "0", "]", ".", "premise", ")", "+", "len", "(", "\n", "tokenized_examples", "[", "0", "]", ".", "hypothesis", "\n", ")", "\n", "feat_spec", "=", "model_resolution", ".", "build_featurization_spec", "(", "\n", "model_type", "=", "\"bert-\"", ",", "max_seq_length", "=", "train_example_0_length", "\n", ")", "\n", "featurized_examples", "=", "[", "\n", "tokenized_example", ".", "featurize", "(", "tokenizer", "=", "tokenizer", ",", "feat_spec", "=", "feat_spec", ")", "\n", "for", "tokenized_example", "in", "tokenized_examples", "\n", "]", "\n", "featurized_example_0_dict", "=", "featurized_examples", "[", "0", "]", ".", "to_dict", "(", ")", "\n", "# not bothering to compare the input_ids because they were made by a dummy tokenizer.", "\n", "assert", "\"input_ids\"", "in", "featurized_example_0_dict", "\n", "assert", "featurized_example_0_dict", "[", "\"guid\"", "]", "==", "FEATURIZED_TRAIN_EXAMPLE_0", "[", "\"guid\"", "]", "\n", "assert", "(", "\n", "featurized_example_0_dict", "[", "\"input_mask\"", "]", "==", "FEATURIZED_TRAIN_EXAMPLE_0", "[", "\"input_mask\"", "]", "\n", ")", ".", "all", "(", ")", "\n", "assert", "(", "\n", "featurized_example_0_dict", "[", "\"segment_ids\"", "]", "==", "FEATURIZED_TRAIN_EXAMPLE_0", "[", "\"segment_ids\"", "]", "\n", ")", ".", "all", "(", ")", "\n", "assert", "featurized_example_0_dict", "[", "\"label_id\"", "]", "==", "FEATURIZED_TRAIN_EXAMPLE_0", "[", "\"label_id\"", "]", "\n", "assert", "featurized_example_0_dict", "[", "\"tokens\"", "]", "==", "FEATURIZED_TRAIN_EXAMPLE_0", "[", "\"tokens\"", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.multiple_choice.Example.task": [[31, 34], ["NotImplementedError"], "methods", ["None"], ["@", "property", "\n", "def", "task", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.multiple_choice.Example.tokenize": [[35, 41], ["multiple_choice.TokenizedExample", "tokenizer.tokenize", "tokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.tokenize", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.tokenize"], ["", "def", "tokenize", "(", "self", ",", "tokenizer", ")", ":", "\n", "        ", "return", "TokenizedExample", "(", "\n", "guid", "=", "self", ".", "guid", ",", "\n", "prompt", "=", "tokenizer", ".", "tokenize", "(", "self", ".", "prompt", ")", ",", "\n", "choice_list", "=", "[", "tokenizer", ".", "tokenize", "(", "choice", ")", "for", "choice", "in", "self", ".", "choice_list", "]", ",", "\n", "label_id", "=", "self", ".", "task", ".", "CHOICE_TO_ID", "[", "self", ".", "label", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.multiple_choice.TokenizedExample.featurize": [[51, 105], ["multiple_choice.DataRow", "jiant.tasks.utils.truncate_sequences", "jiant.tasks.lib.templates.shared.add_cls_token", "jiant.tasks.lib.templates.shared.create_input_set_from_tokens_and_segments", "input_set_ls.append", "unpadded_inputs_ls.append", "numpy.stack", "numpy.stack", "numpy.stack", "len", "len"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.utils.truncate_sequences", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.add_cls_token", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.create_input_set_from_tokens_and_segments"], ["def", "featurize", "(", "self", ",", "tokenizer", ",", "feat_spec", ")", ":", "\n", "\n", "        ", "if", "feat_spec", ".", "sep_token_extra", ":", "\n", "            ", "maybe_extra_sep", "=", "[", "tokenizer", ".", "sep_token", "]", "\n", "maybe_extra_sep_segment_id", "=", "[", "feat_spec", ".", "sequence_a_segment_id", "]", "\n", "special_tokens_count", "=", "4", "# CLS, SEP-SEP, SEP", "\n", "", "else", ":", "\n", "            ", "maybe_extra_sep", "=", "[", "]", "\n", "maybe_extra_sep_segment_id", "=", "[", "]", "\n", "special_tokens_count", "=", "3", "# CLS, SEP, SEP", "\n", "\n", "", "input_set_ls", "=", "[", "]", "\n", "unpadded_inputs_ls", "=", "[", "]", "\n", "for", "choice", "in", "self", ".", "choice_list", ":", "\n", "            ", "prompt", ",", "choice", "=", "truncate_sequences", "(", "\n", "tokens_ls", "=", "[", "self", ".", "prompt", ",", "choice", "]", ",", "\n", "max_length", "=", "feat_spec", ".", "max_seq_length", "-", "special_tokens_count", ",", "\n", ")", "\n", "unpadded_inputs", "=", "add_cls_token", "(", "\n", "unpadded_tokens", "=", "(", "\n", "# prompt", "\n", "prompt", "\n", "+", "[", "tokenizer", ".", "sep_token", "]", "\n", "+", "maybe_extra_sep", "\n", "# choice", "\n", "+", "choice", "\n", "+", "[", "tokenizer", ".", "sep_token", "]", "\n", ")", ",", "\n", "unpadded_segment_ids", "=", "(", "\n", "# prompt", "\n", "[", "feat_spec", ".", "sequence_a_segment_id", "]", "*", "(", "len", "(", "prompt", ")", "+", "1", ")", "\n", "+", "maybe_extra_sep_segment_id", "\n", "# choice + sep", "\n", "+", "[", "feat_spec", ".", "sequence_b_segment_id", "]", "*", "(", "len", "(", "choice", ")", "+", "1", ")", "\n", ")", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "feat_spec", "=", "feat_spec", ",", "\n", ")", "\n", "input_set", "=", "create_input_set_from_tokens_and_segments", "(", "\n", "unpadded_tokens", "=", "unpadded_inputs", ".", "unpadded_tokens", ",", "\n", "unpadded_segment_ids", "=", "unpadded_inputs", ".", "unpadded_segment_ids", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "feat_spec", "=", "feat_spec", ",", "\n", ")", "\n", "input_set_ls", ".", "append", "(", "input_set", ")", "\n", "unpadded_inputs_ls", ".", "append", "(", "unpadded_inputs", ")", "\n", "\n", "", "return", "DataRow", "(", "\n", "guid", "=", "self", ".", "guid", ",", "\n", "input_ids", "=", "np", ".", "stack", "(", "[", "input_set", ".", "input_ids", "for", "input_set", "in", "input_set_ls", "]", ")", ",", "\n", "input_mask", "=", "np", ".", "stack", "(", "[", "input_set", ".", "input_mask", "for", "input_set", "in", "input_set_ls", "]", ")", ",", "\n", "segment_ids", "=", "np", ".", "stack", "(", "[", "input_set", ".", "segment_ids", "for", "input_set", "in", "input_set_ls", "]", ")", ",", "\n", "label_id", "=", "self", ".", "label_id", ",", "\n", "tokens_list", "=", "[", "unpadded_inputs", ".", "unpadded_tokens", "for", "unpadded_inputs", "in", "unpadded_inputs_ls", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.Span.add": [[15, 17], ["shared.Span"], "methods", ["None"], ["def", "add", "(", "self", ",", "i", ":", "int", ")", "->", "Span", ":", "\n", "        ", "return", "Span", "(", "start", "=", "self", ".", "start", "+", "i", ",", "end", "=", "self", ".", "end", "+", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.Span.to_slice": [[18, 20], ["slice"], "methods", ["None"], ["", "def", "to_slice", "(", "self", ")", ":", "\n", "        ", "return", "slice", "(", "*", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.Span.to_array": [[21, 23], ["numpy.array"], "methods", ["None"], ["", "def", "to_array", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "self", ".", "start", ",", "self", ".", "end", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.single_sentence_featurize": [[39, 58], ["shared.construct_single_input_tokens_and_segment_ids", "shared.create_generic_data_row_from_tokens_and_segments"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.construct_single_input_tokens_and_segment_ids", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.create_generic_data_row_from_tokens_and_segments"], ["", "def", "single_sentence_featurize", "(", "\n", "guid", ":", "str", ",", "\n", "input_tokens", ":", "List", "[", "str", "]", ",", "\n", "label_id", ":", "int", ",", "\n", "tokenizer", ",", "\n", "feat_spec", ":", "FeaturizationSpec", ",", "\n", "data_row_class", ",", "\n", ")", ":", "\n", "    ", "unpadded_inputs", "=", "construct_single_input_tokens_and_segment_ids", "(", "\n", "input_tokens", "=", "input_tokens", ",", "tokenizer", "=", "tokenizer", ",", "feat_spec", "=", "feat_spec", ",", "\n", ")", "\n", "return", "create_generic_data_row_from_tokens_and_segments", "(", "\n", "guid", "=", "guid", ",", "\n", "unpadded_tokens", "=", "unpadded_inputs", ".", "unpadded_tokens", ",", "\n", "unpadded_segment_ids", "=", "unpadded_inputs", ".", "unpadded_segment_ids", ",", "\n", "label_id", "=", "label_id", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "feat_spec", "=", "feat_spec", ",", "\n", "data_row_class", "=", "data_row_class", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.double_sentence_featurize": [[61, 100], ["shared.construct_double_input_tokens_and_segment_ids", "shared.create_generic_data_row_from_tokens_and_segments"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.construct_double_input_tokens_and_segment_ids", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.create_generic_data_row_from_tokens_and_segments"], ["", "def", "double_sentence_featurize", "(", "\n", "guid", ":", "str", ",", "\n", "input_tokens_a", ":", "List", "[", "str", "]", ",", "\n", "input_tokens_b", ":", "List", "[", "str", "]", ",", "\n", "label_id", ":", "int", ",", "\n", "tokenizer", ",", "\n", "feat_spec", ":", "FeaturizationSpec", ",", "\n", "data_row_class", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Featurize an example for a two-input/two-sentence task, and return the example as a DataRow.\n\n    Args:\n        guid (str): human-readable identifier for interpretability and debugging.\n        input_tokens_a (List[str]): sequence of tokens in segment a.\n        input_tokens_b (List[str]): sequence of tokens in segment b.\n        label_id (int): int representing the label for the task.\n        tokenizer:\n        feat_spec (FeaturizationSpec): Tokenization-related metadata.\n        data_row_class (DataRow): DataRow class used in the task.\n\n    Returns:\n        DataRow representing an example.\n\n    \"\"\"", "\n", "unpadded_inputs", "=", "construct_double_input_tokens_and_segment_ids", "(", "\n", "input_tokens_a", "=", "input_tokens_a", ",", "\n", "input_tokens_b", "=", "input_tokens_b", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "feat_spec", "=", "feat_spec", ",", "\n", ")", "\n", "\n", "return", "create_generic_data_row_from_tokens_and_segments", "(", "\n", "guid", "=", "guid", ",", "\n", "unpadded_tokens", "=", "unpadded_inputs", ".", "unpadded_tokens", ",", "\n", "unpadded_segment_ids", "=", "unpadded_inputs", ".", "unpadded_segment_ids", ",", "\n", "label_id", "=", "label_id", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "feat_spec", "=", "feat_spec", ",", "\n", "data_row_class", "=", "data_row_class", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.construct_single_input_tokens_and_segment_ids": [[103, 120], ["jiant.tasks.utils.truncate_sequences", "shared.add_cls_token", "len"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.utils.truncate_sequences", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.add_cls_token"], ["", "def", "construct_single_input_tokens_and_segment_ids", "(", "\n", "input_tokens", ":", "List", "[", "str", "]", ",", "tokenizer", ",", "feat_spec", ":", "FeaturizationSpec", "\n", ")", ":", "\n", "    ", "special_tokens_count", "=", "2", "# CLS, SEP", "\n", "\n", "(", "input_tokens", ",", ")", "=", "truncate_sequences", "(", "\n", "tokens_ls", "=", "[", "input_tokens", "]", ",", "max_length", "=", "feat_spec", ".", "max_seq_length", "-", "special_tokens_count", ",", "\n", ")", "\n", "\n", "return", "add_cls_token", "(", "\n", "unpadded_tokens", "=", "input_tokens", "+", "[", "tokenizer", ".", "sep_token", "]", ",", "\n", "unpadded_segment_ids", "=", "(", "\n", "[", "feat_spec", ".", "sequence_a_segment_id", "]", "\n", "+", "[", "feat_spec", ".", "sequence_a_segment_id", "]", "*", "(", "len", "(", "input_tokens", ")", ")", "\n", ")", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "feat_spec", "=", "feat_spec", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.construct_double_input_tokens_and_segment_ids": [[123, 171], ["jiant.tasks.utils.truncate_sequences", "shared.add_cls_token", "len", "len"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.utils.truncate_sequences", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.add_cls_token"], ["", "def", "construct_double_input_tokens_and_segment_ids", "(", "\n", "input_tokens_a", ":", "List", "[", "str", "]", ",", "input_tokens_b", ":", "List", "[", "str", "]", ",", "tokenizer", ",", "feat_spec", ":", "FeaturizationSpec", "\n", ")", ":", "\n", "    ", "\"\"\"Create token and segment id sequences, apply truncation, add separator and class tokens.\n\n    Args:\n        input_tokens_a (List[str]): sequence of tokens in segment a.\n        input_tokens_b (List[str]): sequence of tokens in segment b.\n        tokenizer:\n        feat_spec (FeaturizationSpec): Tokenization-related metadata.\n\n    Returns:\n        UnpaddedInputs: unpadded inputs with truncation applied and special tokens appended.\n\n    \"\"\"", "\n", "if", "feat_spec", ".", "sep_token_extra", ":", "\n", "        ", "maybe_extra_sep", "=", "[", "tokenizer", ".", "sep_token", "]", "\n", "maybe_extra_sep_segment_id", "=", "[", "feat_spec", ".", "sequence_a_segment_id", "]", "\n", "special_tokens_count", "=", "4", "# CLS, SEP-SEP, SEP", "\n", "", "else", ":", "\n", "        ", "maybe_extra_sep", "=", "[", "]", "\n", "maybe_extra_sep_segment_id", "=", "[", "]", "\n", "special_tokens_count", "=", "3", "# CLS, SEP, SEP", "\n", "\n", "", "input_tokens_a", ",", "input_tokens_b", "=", "truncate_sequences", "(", "\n", "tokens_ls", "=", "[", "input_tokens_a", ",", "input_tokens_b", "]", ",", "\n", "max_length", "=", "feat_spec", ".", "max_seq_length", "-", "special_tokens_count", ",", "\n", ")", "\n", "\n", "unpadded_tokens", "=", "(", "\n", "input_tokens_a", "\n", "+", "[", "tokenizer", ".", "sep_token", "]", "\n", "+", "maybe_extra_sep", "\n", "+", "input_tokens_b", "\n", "+", "[", "tokenizer", ".", "sep_token", "]", "\n", ")", "\n", "unpadded_segment_ids", "=", "(", "\n", "[", "feat_spec", ".", "sequence_a_segment_id", "]", "*", "len", "(", "input_tokens_a", ")", "\n", "+", "[", "feat_spec", ".", "sequence_a_segment_id", "]", "\n", "+", "maybe_extra_sep_segment_id", "\n", "+", "[", "feat_spec", ".", "sequence_b_segment_id", "]", "*", "len", "(", "input_tokens_b", ")", "\n", "+", "[", "feat_spec", ".", "sequence_b_segment_id", "]", "\n", ")", "\n", "return", "add_cls_token", "(", "\n", "unpadded_tokens", "=", "unpadded_tokens", ",", "\n", "unpadded_segment_ids", "=", "unpadded_segment_ids", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "feat_spec", "=", "feat_spec", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.add_cls_token": [[174, 205], ["shared.UnpaddedInputs", "shared.UnpaddedInputs"], "function", ["None"], ["", "def", "add_cls_token", "(", "\n", "unpadded_tokens", ":", "List", "[", "str", "]", ",", "\n", "unpadded_segment_ids", ":", "List", "[", "int", "]", ",", "\n", "tokenizer", ",", "\n", "feat_spec", ":", "FeaturizationSpec", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Add class token to unpadded inputs.\n\n    Applies class token to end (or start) of unpadded inputs depending on FeaturizationSpec.\n\n    Args:\n        unpadded_tokens (List[str]): sequence of unpadded token strings.\n        unpadded_segment_ids (List[str]): sequence of unpadded segment ids.\n        tokenizer:\n        feat_spec (FeaturizationSpec): Tokenization-related metadata.\n\n    Returns:\n        UnpaddedInputs: unpadded inputs with class token appended.\n\n    \"\"\"", "\n", "if", "feat_spec", ".", "cls_token_at_end", ":", "\n", "        ", "return", "UnpaddedInputs", "(", "\n", "unpadded_tokens", "=", "unpadded_tokens", "+", "[", "tokenizer", ".", "cls_token", "]", ",", "\n", "unpadded_segment_ids", "=", "unpadded_segment_ids", "+", "[", "feat_spec", ".", "cls_token_segment_id", "]", ",", "\n", "cls_offset", "=", "0", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "return", "UnpaddedInputs", "(", "\n", "unpadded_tokens", "=", "[", "tokenizer", ".", "cls_token", "]", "+", "unpadded_tokens", ",", "\n", "unpadded_segment_ids", "=", "[", "feat_spec", ".", "cls_token_segment_id", "]", "+", "unpadded_segment_ids", ",", "\n", "cls_offset", "=", "1", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.create_generic_data_row_from_tokens_and_segments": [[208, 245], ["shared.create_input_set_from_tokens_and_segments", "data_row_class", "numpy.array", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.create_input_set_from_tokens_and_segments"], ["", "", "def", "create_generic_data_row_from_tokens_and_segments", "(", "\n", "guid", ":", "str", ",", "\n", "unpadded_tokens", ":", "List", "[", "str", "]", ",", "\n", "unpadded_segment_ids", ":", "List", "[", "int", "]", ",", "\n", "label_id", ":", "int", ",", "\n", "tokenizer", ",", "\n", "feat_spec", ":", "FeaturizationSpec", ",", "\n", "data_row_class", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Creates an InputSet and wraps the InputSet into a DataRow class.\n\n    Args:\n        guid (str): human-readable identifier (for interpretability and debugging).\n        unpadded_tokens (List[str]): sequence of unpadded token strings.\n        unpadded_segment_ids (List[int]): sequence of unpadded segment ids.\n        label_id (int): int representing the label for the task.\n        tokenizer:\n        feat_spec (FeaturizationSpec): Tokenization-related metadata.\n        data_row_class (DataRow): data row class to wrap and return the inputs.\n\n    Returns:\n        DataRow: data row class containing model inputs.\n\n    \"\"\"", "\n", "input_set", "=", "create_input_set_from_tokens_and_segments", "(", "\n", "unpadded_tokens", "=", "unpadded_tokens", ",", "\n", "unpadded_segment_ids", "=", "unpadded_segment_ids", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "feat_spec", "=", "feat_spec", ",", "\n", ")", "\n", "return", "data_row_class", "(", "\n", "guid", "=", "guid", ",", "\n", "input_ids", "=", "np", ".", "array", "(", "input_set", ".", "input_ids", ")", ",", "\n", "input_mask", "=", "np", ".", "array", "(", "input_set", ".", "input_mask", ")", ",", "\n", "segment_ids", "=", "np", ".", "array", "(", "input_set", ".", "segment_ids", ")", ",", "\n", "label_id", "=", "label_id", ",", "\n", "tokens", "=", "unpadded_tokens", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.create_input_set_from_tokens_and_segments": [[248, 278], ["tokenizer.convert_tokens_to_ids", "shared.pad_features_with_feat_spec", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.testing.tokenizer.SimpleSpaceTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.pad_features_with_feat_spec"], ["", "def", "create_input_set_from_tokens_and_segments", "(", "\n", "unpadded_tokens", ":", "List", "[", "str", "]", ",", "\n", "unpadded_segment_ids", ":", "List", "[", "int", "]", ",", "\n", "tokenizer", ",", "\n", "feat_spec", ":", "FeaturizationSpec", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Create padded inputs for model.\n\n    Converts tokens to ids, makes input set (input ids, input mask, and segment ids), adds padding.\n\n    Args:\n        unpadded_tokens (List[str]): unpadded list of token strings.\n        unpadded_segment_ids (List[int]): unpadded list of segment ids.\n        tokenizer:\n        feat_spec (FeaturizationSpec): Tokenization-related metadata.\n\n    Returns:\n        Padded input set.\n\n    \"\"\"", "\n", "assert", "len", "(", "unpadded_tokens", ")", "==", "len", "(", "unpadded_segment_ids", ")", "\n", "input_ids", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "unpadded_tokens", ")", "\n", "input_mask", "=", "[", "1", "]", "*", "len", "(", "input_ids", ")", "\n", "input_set", "=", "pad_features_with_feat_spec", "(", "\n", "input_ids", "=", "input_ids", ",", "\n", "input_mask", "=", "input_mask", ",", "\n", "unpadded_segment_ids", "=", "unpadded_segment_ids", ",", "\n", "feat_spec", "=", "feat_spec", ",", "\n", ")", "\n", "return", "input_set", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.pad_features_with_feat_spec": [[280, 307], ["shared.InputSet", "shared.pad_single_with_feat_spec", "shared.pad_single_with_feat_spec", "shared.pad_single_with_feat_spec"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.pad_single_with_feat_spec", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.pad_single_with_feat_spec", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.pad_single_with_feat_spec"], ["", "def", "pad_features_with_feat_spec", "(", "\n", "input_ids", ":", "List", "[", "int", "]", ",", "\n", "input_mask", ":", "List", "[", "int", "]", ",", "\n", "unpadded_segment_ids", ":", "List", "[", "int", "]", ",", "\n", "feat_spec", ":", "FeaturizationSpec", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Apply padding to feature set according to settings from FeaturizationSpec.\n\n    Args:\n        input_ids (List[int]): sequence unpadded input ids.\n        input_mask (List[int]): unpadded input mask sequence.\n        unpadded_segment_ids (List[int]): sequence of unpadded segment ids.\n        feat_spec (FeaturizationSpec): Tokenization-related metadata.\n\n    Returns:\n        InputSet: input set containing padded input ids, input mask, and segment ids.\n\n    \"\"\"", "\n", "return", "InputSet", "(", "\n", "input_ids", "=", "pad_single_with_feat_spec", "(", "\n", "ls", "=", "input_ids", ",", "feat_spec", "=", "feat_spec", ",", "pad_idx", "=", "feat_spec", ".", "pad_token_id", ",", "\n", ")", ",", "\n", "input_mask", "=", "pad_single_with_feat_spec", "(", "\n", "ls", "=", "input_mask", ",", "feat_spec", "=", "feat_spec", ",", "pad_idx", "=", "feat_spec", ".", "pad_token_mask_id", ",", "\n", ")", ",", "\n", "segment_ids", "=", "pad_single_with_feat_spec", "(", "\n", "ls", "=", "unpadded_segment_ids", ",", "feat_spec", "=", "feat_spec", ",", "pad_idx", "=", "feat_spec", ".", "pad_token_segment_id", ",", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.pad_single_with_feat_spec": [[311, 332], ["jiant.tasks.utils.pad_to_max_seq_length"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.utils.pad_to_max_seq_length"], ["", "def", "pad_single_with_feat_spec", "(", "\n", "ls", ":", "List", "[", "int", "]", ",", "feat_spec", ":", "FeaturizationSpec", ",", "pad_idx", ":", "int", ",", "check", "=", "True", "\n", ")", ":", "\n", "    ", "\"\"\"Apply padding to sequence according to settings from FeaturizationSpec.\n\n    Args:\n        ls (List[int]): sequence to pad.\n        feat_spec (FeaturizationSpec): metadata containing max sequence length and padding settings.\n        pad_idx (int): element to use for padding.\n        check (bool): True if padded length should be checked as under the max sequence length.\n\n    Returns:\n        Sequence with padding applied.\n\n    \"\"\"", "\n", "return", "pad_to_max_seq_length", "(", "\n", "ls", "=", "ls", ",", "\n", "max_seq_length", "=", "feat_spec", ".", "max_seq_length", ",", "\n", "pad_idx", "=", "pad_idx", ",", "\n", "pad_right", "=", "not", "feat_spec", ".", "pad_on_left", ",", "\n", "check", "=", "check", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.labels_to_bimap": [[335, 347], ["jiant.utils.python.datastructures.BiMap().get_maps", "jiant.utils.python.datastructures.BiMap", "list", "range", "len"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.BiMap.get_maps"], ["", "def", "labels_to_bimap", "(", "labels", ")", ":", "\n", "    ", "\"\"\"Creates mappings from label to id, and from id to label. See details in docs for BiMap.\n\n    Args:\n        labels: sequence of label to map to ids.\n\n    Returns:\n        Tuple[Dict, Dict]: mappings from labels to ids, and ids to labels.\n\n    \"\"\"", "\n", "label2id", ",", "id2label", "=", "BiMap", "(", "a", "=", "labels", ",", "b", "=", "list", "(", "range", "(", "len", "(", "labels", ")", ")", ")", ")", ".", "get_maps", "(", ")", "\n", "return", "label2id", ",", "id2label", "\n", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.mlm.Example.tokenize": [[27, 29], ["mlm.TokenizedExample", "tokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.tokenize"], ["def", "tokenize", "(", "self", ",", "tokenizer", ")", ":", "\n", "        ", "return", "TokenizedExample", "(", "guid", "=", "self", ".", "guid", ",", "input_tokens", "=", "tokenizer", ".", "tokenize", "(", "self", ".", "text", ")", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.mlm.TokenizedExample.featurize": [[36, 53], ["jiant.tasks.lib.templates.shared.construct_single_input_tokens_and_segment_ids", "jiant.tasks.lib.templates.shared.create_input_set_from_tokens_and_segments", "mlm.DataRow", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.construct_single_input_tokens_and_segment_ids", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.create_input_set_from_tokens_and_segments"], ["def", "featurize", "(", "self", ",", "tokenizer", ",", "feat_spec", ")", ":", "\n", "        ", "unpadded_inputs", "=", "construct_single_input_tokens_and_segment_ids", "(", "\n", "input_tokens", "=", "self", ".", "input_tokens", ",", "tokenizer", "=", "tokenizer", ",", "feat_spec", "=", "feat_spec", ",", "\n", ")", "\n", "input_set", "=", "create_input_set_from_tokens_and_segments", "(", "\n", "unpadded_tokens", "=", "unpadded_inputs", ".", "unpadded_tokens", ",", "\n", "unpadded_segment_ids", "=", "unpadded_inputs", ".", "unpadded_segment_ids", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "feat_spec", "=", "feat_spec", ",", "\n", ")", "\n", "return", "DataRow", "(", "\n", "guid", "=", "self", ".", "guid", ",", "\n", "input_ids", "=", "np", ".", "array", "(", "input_set", ".", "input_ids", ")", ",", "\n", "input_mask", "=", "np", ".", "array", "(", "input_set", ".", "input_mask", ")", ",", "\n", "segment_ids", "=", "np", ".", "array", "(", "input_set", ".", "segment_ids", ")", ",", "\n", "# Masking will be performed on the fly in train", "\n", "tokens", "=", "unpadded_inputs", ".", "unpadded_tokens", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.mlm.Batch.get_masked": [[73, 93], ["mlm.mlm_mask_tokens", "mlm.MaskedBatch", "mlm.MaskedBatch"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.mlm.mlm_mask_tokens"], ["def", "get_masked", "(", "self", ",", "mlm_probability", ",", "tokenizer", ",", "do_mask", ")", ":", "\n", "        ", "if", "do_mask", ":", "\n", "            ", "masked_input_ids", ",", "masked_lm_labels", "=", "mlm_mask_tokens", "(", "\n", "inputs", "=", "self", ".", "input_ids", ",", "tokenizer", "=", "tokenizer", ",", "mlm_probability", "=", "mlm_probability", ",", "\n", ")", "\n", "return", "MaskedBatch", "(", "\n", "masked_input_ids", "=", "masked_input_ids", ",", "\n", "input_mask", "=", "self", ".", "input_mask", ",", "\n", "segment_ids", "=", "self", ".", "segment_ids", ",", "\n", "masked_lm_labels", "=", "masked_lm_labels", ",", "\n", "tokens", "=", "self", ".", "tokens", ",", "\n", ")", "\n", "", "else", ":", "\n", "# Potentially, the mask_lm_labels should all be -100", "\n", "            ", "return", "MaskedBatch", "(", "\n", "masked_input_ids", "=", "self", ".", "input_ids", ",", "\n", "input_mask", "=", "self", ".", "input_mask", ",", "\n", "segment_ids", "=", "self", ".", "segment_ids", ",", "\n", "masked_lm_labels", "=", "self", ".", "input_ids", ",", "\n", "tokens", "=", "self", ".", "tokens", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.mlm.MLMTask.__init__": [[113, 117], ["jiant.tasks.core.Task.__init__"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.radam.AdamW.__init__"], ["def", "__init__", "(", "self", ",", "name", ",", "path_dict", ",", "mlm_probability", "=", "0.15", ",", "do_mask", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "name", "=", "name", ",", "path_dict", "=", "path_dict", ")", "\n", "self", ".", "mlm_probability", "=", "mlm_probability", "\n", "self", ".", "do_mask", "=", "do_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.mlm.MLMTask.get_train_examples": [[118, 120], ["mlm.MLMTask.create_examples"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.mlm.MLMTask.create_examples"], ["", "def", "get_train_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "create_examples", "(", "path", "=", "self", ".", "train_path", ",", "set_type", "=", "\"train\"", ",", "return_generator", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.mlm.MLMTask.get_val_examples": [[121, 123], ["mlm.MLMTask.create_examples"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.mlm.MLMTask.create_examples"], ["", "def", "get_val_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "create_examples", "(", "path", "=", "self", ".", "val_path", ",", "set_type", "=", "\"val\"", ",", "return_generator", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.mlm.MLMTask.get_test_examples": [[124, 126], ["mlm.MLMTask.create_examples"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.mlm.MLMTask.create_examples"], ["", "def", "get_test_examples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "create_examples", "(", "path", "=", "self", ".", "test_path", ",", "set_type", "=", "\"test\"", ",", "return_generator", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.mlm.MLMTask.get_examples_generator": [[127, 133], ["open", "enumerate", "mlm.Example", "line.strip"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "get_examples_generator", "(", "cls", ",", "path", ",", "set_type", ")", ":", "\n", "        ", "with", "open", "(", "path", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "f", ")", ":", "\n", "                ", "yield", "Example", "(", "\n", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "i", ")", ",", "text", "=", "line", ".", "strip", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.mlm.MLMTask.create_examples": [[135, 142], ["jiant.utils.python.datastructures.ReusableGenerator", "list"], "methods", ["None"], ["", "", "", "@", "classmethod", "\n", "def", "create_examples", "(", "cls", ",", "path", ",", "set_type", ",", "return_generator", ")", ":", "\n", "        ", "generator", "=", "ReusableGenerator", "(", "cls", ".", "get_examples_generator", ",", "path", "=", "path", ",", "set_type", "=", "set_type", ")", "\n", "if", "return_generator", ":", "\n", "            ", "return", "generator", "\n", "", "else", ":", "\n", "            ", "return", "list", "(", "generator", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.mlm.mlm_mask_tokens": [[144, 181], ["inputs.cpu().clone.cpu().clone", "inputs.cpu().clone.clone", "torch.full", "torch.full.masked_fill_", "torch.bernoulli().bool", "tokenizer.convert_tokens_to_ids", "torch.randint", "tokenizer.get_special_tokens_mask", "torch.tensor", "inputs.clone.eq", "torch.full.masked_fill_", "torch.bernoulli().bool", "len", "inputs.cpu().clone.to", "inputs.clone.to", "inputs.cpu().clone.cpu", "inputs.clone.tolist", "torch.bernoulli", "torch.bernoulli().bool", "torch.bernoulli", "torch.full", "torch.bernoulli", "torch.full"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.testing.tokenizer.SimpleSpaceTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.core.BatchTuple.to", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.core.BatchTuple.to"], ["", "", "", "def", "mlm_mask_tokens", "(", "\n", "inputs", ":", "torch", ".", "LongTensor", ",", "tokenizer", ",", "mlm_probability", "\n", ")", "->", "Tuple", "[", "torch", ".", "LongTensor", ",", "torch", ".", "LongTensor", "]", ":", "\n", "    ", "\"\"\"From HuggingFace\"\"\"", "\n", "device", "=", "inputs", ".", "device", "\n", "inputs", "=", "inputs", ".", "cpu", "(", ")", ".", "clone", "(", ")", "\n", "labels", "=", "inputs", ".", "clone", "(", ")", "\n", "# We sample a few tokens in each sequence for masked-LM training", "\n", "# (with probability args.mlm_probability defaults to 0.15 in Bert/RoBERTa)", "\n", "probability_matrix", "=", "torch", ".", "full", "(", "labels", ".", "shape", ",", "mlm_probability", ")", "\n", "special_tokens_mask", "=", "[", "\n", "tokenizer", ".", "get_special_tokens_mask", "(", "val", ",", "already_has_special_tokens", "=", "True", ")", "\n", "for", "val", "in", "labels", ".", "tolist", "(", ")", "\n", "]", "\n", "probability_matrix", ".", "masked_fill_", "(", "torch", ".", "tensor", "(", "special_tokens_mask", ",", "dtype", "=", "torch", ".", "bool", ")", ",", "value", "=", "0.0", ")", "\n", "# noinspection PyProtectedMember", "\n", "if", "tokenizer", ".", "_pad_token", "is", "not", "None", ":", "\n", "        ", "padding_mask", "=", "labels", ".", "eq", "(", "tokenizer", ".", "pad_token_id", ")", "\n", "probability_matrix", ".", "masked_fill_", "(", "padding_mask", ",", "value", "=", "0.0", ")", "\n", "", "masked_indices", "=", "torch", ".", "bernoulli", "(", "probability_matrix", ")", ".", "bool", "(", ")", "\n", "labels", "[", "~", "masked_indices", "]", "=", "-", "100", "# We only compute loss on masked tokens", "\n", "\n", "# 80% of the time, we replace masked input tokens with tokenizer.mask_token ([MASK])", "\n", "indices_replaced", "=", "torch", ".", "bernoulli", "(", "torch", ".", "full", "(", "labels", ".", "shape", ",", "0.8", ")", ")", ".", "bool", "(", ")", "&", "masked_indices", "\n", "inputs", "[", "indices_replaced", "]", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokenizer", ".", "mask_token", ")", "\n", "\n", "# 10% of the time, we replace masked input tokens with random word", "\n", "indices_random", "=", "(", "\n", "torch", ".", "bernoulli", "(", "torch", ".", "full", "(", "labels", ".", "shape", ",", "0.5", ")", ")", ".", "bool", "(", ")", "&", "masked_indices", "&", "~", "indices_replaced", "\n", ")", "\n", "random_words", "=", "torch", ".", "randint", "(", "len", "(", "tokenizer", ")", ",", "labels", ".", "shape", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "inputs", "[", "indices_random", "]", "=", "random_words", "[", "indices_random", "]", "\n", "\n", "# The rest of the time (10% of the time) we keep the masked input tokens unchanged", "\n", "\n", "# noinspection PyTypeChecker", "\n", "return", "inputs", ".", "to", "(", "device", ")", ",", "labels", ".", "to", "(", "device", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.hacky_tokenization_matching.map_tags_to_token_position": [[6, 19], ["enumerate", "len", "current_string.find", "token.lower", "len"], "function", ["None"], ["def", "map_tags_to_token_position", "(", "flat_stripped", ",", "indices", ",", "split_text", ")", ":", "\n", "    ", "char_index", "=", "0", "\n", "current_string", "=", "flat_stripped", "\n", "positions", "=", "[", "None", "]", "*", "len", "(", "split_text", ")", "\n", "for", "i", ",", "token", "in", "enumerate", "(", "split_text", ")", ":", "\n", "        ", "found_index", "=", "current_string", ".", "find", "(", "token", ".", "lower", "(", ")", ")", "\n", "assert", "found_index", "!=", "-", "1", "\n", "positions", "[", "i", "]", "=", "indices", "[", "char_index", "+", "found_index", "]", "\n", "char_index", "+=", "found_index", "+", "len", "(", "token", ")", "\n", "current_string", "=", "flat_stripped", "[", "char_index", ":", "]", "\n", "", "for", "elem", "in", "positions", ":", "\n", "        ", "assert", "elem", "is", "not", "None", "\n", "", "return", "positions", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.hacky_tokenization_matching.convert_mapped_tags": [[21, 28], ["zip"], "function", ["None"], ["", "def", "convert_mapped_tags", "(", "positions", ",", "tag_ids", ",", "length", ")", ":", "\n", "    ", "labels", "=", "[", "None", "]", "*", "length", "\n", "mask", "=", "[", "0", "]", "*", "length", "\n", "for", "pos", ",", "tag_id", "in", "zip", "(", "positions", ",", "tag_ids", ")", ":", "\n", "        ", "labels", "[", "pos", "]", "=", "tag_id", "\n", "mask", "[", "pos", "]", "=", "1", "\n", "", "return", "labels", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.hacky_tokenization_matching.input_flat_strip": [[30, 32], ["None"], "function", ["None"], ["", "def", "input_flat_strip", "(", "tokens", ")", ":", "\n", "    ", "return", "\"\"", ".", "join", "(", "tokens", ")", ".", "lower", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.hacky_tokenization_matching.delegate_flat_strip": [[34, 45], ["isinstance", "hacky_tokenization_matching.bert_flat_strip", "isinstance", "hacky_tokenization_matching.roberta_flat_strip", "isinstance", "hacky_tokenization_matching.albert_flat_strip", "isinstance", "hacky_tokenization_matching.xlm_roberta_flat_strip", "KeyError", "type"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.hacky_tokenization_matching.bert_flat_strip", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.hacky_tokenization_matching.roberta_flat_strip", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.hacky_tokenization_matching.albert_flat_strip", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.hacky_tokenization_matching.xlm_roberta_flat_strip"], ["", "def", "delegate_flat_strip", "(", "tokens", ",", "tokenizer", ",", "return_indices", "=", "False", ")", ":", "\n", "    ", "if", "isinstance", "(", "tokenizer", ",", "transformers", ".", "BertTokenizer", ")", ":", "\n", "        ", "return", "bert_flat_strip", "(", "tokens", "=", "tokens", ",", "return_indices", "=", "return_indices", ")", "\n", "", "elif", "isinstance", "(", "tokenizer", ",", "transformers", ".", "RobertaTokenizer", ")", ":", "\n", "        ", "return", "roberta_flat_strip", "(", "tokens", "=", "tokens", ",", "return_indices", "=", "return_indices", ")", "\n", "", "elif", "isinstance", "(", "tokenizer", ",", "transformers", ".", "AlbertTokenizer", ")", ":", "\n", "        ", "return", "albert_flat_strip", "(", "tokens", "=", "tokens", ",", "return_indices", "=", "return_indices", ")", "\n", "", "elif", "isinstance", "(", "tokenizer", ",", "transformers", ".", "XLMRobertaTokenizer", ")", ":", "\n", "        ", "return", "xlm_roberta_flat_strip", "(", "tokens", "=", "tokens", ",", "return_indices", "=", "return_indices", ")", "\n", "", "else", ":", "\n", "        ", "raise", "KeyError", "(", "type", "(", "tokenizer", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.hacky_tokenization_matching.bert_flat_strip": [[47, 64], ["token.replace.startswith", "ls.append", "token.replace.replace", "len"], "function", ["None"], ["", "", "def", "bert_flat_strip", "(", "tokens", ",", "return_indices", "=", "False", ")", ":", "\n", "    ", "ls", "=", "[", "]", "\n", "count", "=", "0", "\n", "indices", "=", "[", "]", "\n", "for", "token", "in", "tokens", ":", "\n", "        ", "if", "token", ".", "startswith", "(", "\"##\"", ")", ":", "\n", "            ", "token", "=", "token", ".", "replace", "(", "\"##\"", ",", "\"\"", ")", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "", "ls", ".", "append", "(", "token", ")", "\n", "indices", "+=", "[", "count", "]", "*", "len", "(", "token", ")", "\n", "count", "+=", "1", "\n", "", "string", "=", "\"\"", ".", "join", "(", "ls", ")", ".", "lower", "(", ")", "\n", "if", "return_indices", ":", "\n", "        ", "return", "string", ",", "indices", "\n", "", "else", ":", "\n", "        ", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.hacky_tokenization_matching.roberta_flat_strip": [[66, 83], ["token.replace.startswith", "ls.append", "token.replace.replace", "len"], "function", ["None"], ["", "", "def", "roberta_flat_strip", "(", "tokens", ",", "return_indices", "=", "False", ")", ":", "\n", "    ", "ls", "=", "[", "]", "\n", "count", "=", "0", "\n", "indices", "=", "[", "]", "\n", "for", "token", "in", "tokens", ":", "\n", "        ", "if", "token", ".", "startswith", "(", "\"\u0120\"", ")", ":", "\n", "            ", "token", "=", "token", ".", "replace", "(", "\"\u0120\"", ",", "\"\"", ")", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "", "ls", ".", "append", "(", "token", ")", "\n", "indices", "+=", "[", "count", "]", "*", "len", "(", "token", ")", "\n", "count", "+=", "1", "\n", "", "string", "=", "\"\"", ".", "join", "(", "ls", ")", ".", "lower", "(", ")", "\n", "if", "return_indices", ":", "\n", "        ", "return", "string", ",", "indices", "\n", "", "else", ":", "\n", "        ", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.hacky_tokenization_matching.xlm_roberta_flat_strip": [[85, 88], ["hacky_tokenization_matching.albert_flat_strip"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.hacky_tokenization_matching.albert_flat_strip"], ["", "", "def", "xlm_roberta_flat_strip", "(", "tokens", ",", "return_indices", "=", "False", ")", ":", "\n", "# TODO: Refactor to use general SentencePiece function  (Issue #53)", "\n", "    ", "return", "albert_flat_strip", "(", "tokens", "=", "tokens", ",", "return_indices", "=", "return_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.hacky_tokenization_matching.albert_flat_strip": [[90, 108], ["token.replace.replace", "token.replace.startswith", "ls.append", "len"], "function", ["None"], ["", "def", "albert_flat_strip", "(", "tokens", ",", "return_indices", "=", "False", ")", ":", "\n", "    ", "ls", "=", "[", "]", "\n", "count", "=", "0", "\n", "indices", "=", "[", "]", "\n", "for", "token", "in", "tokens", ":", "\n", "        ", "token", "=", "token", ".", "replace", "(", "'\"'", ",", "\"``\"", ")", "\n", "if", "token", ".", "startswith", "(", "\"\u2581\"", ")", ":", "\n", "            ", "token", "=", "token", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "", "ls", ".", "append", "(", "token", ")", "\n", "indices", "+=", "[", "count", "]", "*", "len", "(", "token", ")", "\n", "count", "+=", "1", "\n", "", "string", "=", "\"\"", ".", "join", "(", "ls", ")", ".", "lower", "(", ")", "\n", "if", "return_indices", ":", "\n", "        ", "return", "string", ",", "indices", "\n", "", "else", ":", "\n", "        ", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.hacky_tokenization_matching.starts_with": [[110, 112], ["len"], "function", ["None"], ["", "", "def", "starts_with", "(", "ls", ",", "prefix", ")", ":", "\n", "    ", "return", "ls", "[", ":", "len", "(", "prefix", ")", "]", "==", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.hacky_tokenization_matching.get_token_span": [[114, 126], ["tokenizer.tokenize", "tokenizer.tokenize", "tokenizer.tokenize", "hacky_tokenization_matching.starts_with", "jiant.tasks.utils.ExclusiveSpan", "word.lower().replace", "hacky_tokenization_matching.delegate_flat_strip", "span.to_slice", "len", "len", "word.lower", "len"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.tokenize", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.tokenize", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.tokenize", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.hacky_tokenization_matching.starts_with", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.hacky_tokenization_matching.delegate_flat_strip", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.Span.to_slice"], ["", "def", "get_token_span", "(", "sentence", ",", "span", ":", "ExclusiveSpan", ",", "tokenizer", ")", ":", "\n", "    ", "tokenized", "=", "tokenizer", ".", "tokenize", "(", "sentence", ")", "\n", "tokenized_start1", "=", "tokenizer", ".", "tokenize", "(", "sentence", "[", ":", "span", ".", "start", "]", ")", "\n", "tokenized_start2", "=", "tokenizer", ".", "tokenize", "(", "sentence", "[", ":", "span", ".", "end", "]", ")", "\n", "assert", "starts_with", "(", "tokenized", ",", "tokenized_start1", ")", "\n", "# assert starts_with(tokenized, tokenized_start2)  # <- fails because of \"does\" in \"doesn't\"", "\n", "word", "=", "sentence", "[", "span", ".", "to_slice", "(", ")", "]", "\n", "assert", "word", ".", "lower", "(", ")", ".", "replace", "(", "\" \"", ",", "\"\"", ")", "in", "delegate_flat_strip", "(", "\n", "tokenized_start2", "[", "len", "(", "tokenized_start1", ")", ":", "]", ",", "tokenizer", "=", "tokenizer", ",", "\n", ")", "\n", "token_span", "=", "ExclusiveSpan", "(", "start", "=", "len", "(", "tokenized_start1", ")", ",", "end", "=", "len", "(", "tokenized_start2", ")", ")", "\n", "return", "tokenized", ",", "token_span", "\n", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.__post_init__": [[44, 71], ["core.is_whitespace", "char_to_word_offset.append", "doc_tokens.append", "len", "min", "len", "len"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.is_whitespace"], ["        ", "default", "=", "False", "\n", "\n", "", "return", "attr", ".", "attr", "(", "\n", "default", "=", "default", ",", "\n", "validator", "=", "validator", ",", "\n", "repr", "=", "repr", ",", "\n", "eq", "=", "eq", ",", "\n", "order", "=", "order", ",", "\n", "hash", "=", "hash", ",", "\n", "init", "=", "init", ",", "\n", "converter", "=", "converter", ",", "\n", "metadata", "=", "{", "\"opt_string_ls\"", ":", "opt_string_ls", ",", "\"argparse_kwargs\"", ":", "argparse_kwargs", "}", ",", "\n", "kw_only", "=", "True", ",", "\n", ")", "\n", "\n", "\n", "", "def", "update_parser", "(", "parser", ",", "class_with_attributes", ":", "Any", ")", ":", "\n", "# TODO: Write more checks/tests for the parser creation in general  (Issue #57)", "\n", "    ", "for", "attribute", "in", "class_with_attributes", ".", "__attrs_attrs__", ":", "\n", "        ", "if", "\"argparse_kwargs\"", "in", "attribute", ".", "metadata", ":", "\n", "            ", "argparse_kwargs", "=", "attribute", ".", "metadata", "[", "\"argparse_kwargs\"", "]", "\n", "opt_string_ls", "=", "attribute", ".", "metadata", "[", "\"opt_string_ls\"", "]", "\n", "is_positional", "=", "\"nargs\"", "in", "argparse_kwargs", "\n", "if", "not", "is_positional", ":", "\n", "                ", "if", "attribute", ".", "default", "is", "attr", ".", "NOTHING", ":", "\n", "                    ", "argparse_kwargs", "=", "argparse_kwargs", ".", "copy", "(", ")", "\n", "argparse_kwargs", "[", "\"required\"", "]", "=", "True", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.tokenize": [[74, 76], ["NotImplementedError"], "methods", ["None"], ["                ", "argparse_arg_name", "=", "attribute", ".", "name", "\n", "", "else", ":", "\n", "                ", "argparse_arg_name", "=", "f\"--{attribute.name}\"", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.to_feature_list": [[77, 265], ["enumerate", "tokenizer.encode", "range", "orig_to_tok_index.append", "tokenizer.tokenize", "core._improve_answer_span", "len", "tokenizer.encode_plus", "min", "tokenizer.convert_ids_to_tokens", "range", "spans.append", "len", "range", "span[].index", "numpy.array", "numpy.minimum", "features.append", "transformers.tokenization_bert.whitespace_tokenize", "actual_text.find", "logger.warning", "len", "tok_to_orig_index.append", "all_doc_tokens.append", "str", "len", "len", "len", "core._new_check_is_max_context", "core.DataRow", "len", "len", "type", "len", "len", "len", "encoded_dict[].index", "numpy.where", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "len", "len", "len", "numpy.minimum.tolist", "len", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.tokenize", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core._improve_answer_span", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core._new_check_is_max_context"], ["\n", "", "parser", ".", "add_argument", "(", "argparse_arg_name", ",", "*", "opt_string_ls", ",", "**", "argparse_kwargs", ")", "\n", "\n", "\n", "", "", "", "def", "read_parser", "(", "parser", ",", "class_with_attributes", ":", "Any", ",", "skip_non_class_attributes", "=", "None", ",", "args", "=", "None", ")", ":", "\n", "    ", "attribute_name_set", "=", "{", "attribute", ".", "name", "for", "attribute", "in", "class_with_attributes", ".", "__attrs_attrs__", "}", "\n", "\n", "kwargs", "=", "dict", "(", ")", "\n", "leftover_kwargs", "=", "dict", "(", ")", "\n", "\n", "for", "k", ",", "v", "in", "vars", "(", "parser", ".", "parse_args", "(", "args", ")", ")", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", "in", "attribute_name_set", ":", "\n", "            ", "kwargs", "[", "k", "]", "=", "v", "\n", "", "else", ":", "\n", "            ", "if", "skip_non_class_attributes", "is", "not", "None", "and", "k", "not", "in", "skip_non_class_attributes", ":", "\n", "                ", "raise", "RuntimeError", "(", "f\"Unknown attribute {k}\"", ")", "\n", "", "leftover_kwargs", "[", "k", "]", "=", "v", "\n", "\n", "", "", "instance", "=", "class_with_attributes", "(", "**", "kwargs", ")", "\n", "if", "skip_non_class_attributes", ":", "\n", "        ", "return", "instance", ",", "leftover_kwargs", "\n", "", "else", ":", "\n", "        ", "return", "instance", "\n", "\n", "\n", "# === Methods === #", "\n", "\n", "# == Class Methods", "\n", "", "", "def", "run_cli", "(", "cls", ",", "args", "=", "None", ",", "prog", "=", "None", ",", "description", "=", "None", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "prog", "=", "prog", ",", "description", "=", "description", ")", "\n", "update_parser", "(", "\n", "parser", "=", "parser", ",", "class_with_attributes", "=", "cls", ",", "\n", ")", "\n", "result", "=", "read_parser", "(", "parser", "=", "parser", ",", "class_with_attributes", "=", "cls", ",", "args", "=", "args", ")", "\n", "assert", "isinstance", "(", "result", ",", "cls", ")", "\n", "return", "result", "\n", "\n", "\n", "", "def", "from_json", "(", "cls", ",", "json_string", ")", ":", "\n", "    ", "return", "cls", "(", "**", "json", ".", "loads", "(", "json_string", ")", ")", "\n", "\n", "\n", "", "def", "from_json_path", "(", "cls", ",", "json_path", ")", ":", "\n", "    ", "with", "open", "(", "json_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "return", "cls", ".", "from_json", "(", "f", ".", "read", "(", ")", ")", "\n", "\n", "\n", "", "", "def", "from_json_arg", "(", "cls", ")", ":", "\n", "    ", "assert", "len", "(", "sys", ".", "argv", ")", "==", "2", "\n", "return", "cls", ".", "from_json_path", "(", "sys", ".", "argv", "[", "1", "]", ")", "\n", "\n", "\n", "# == Instance Methods", "\n", "", "def", "to_dict", "(", "self", ")", ":", "\n", "    ", "config_dict", "=", "{", "}", "\n", "for", "attribute", "in", "inspect", ".", "getfullargspec", "(", "self", ".", "__class__", ")", ".", "kwonlyargs", ":", "\n", "        ", "config_dict", "[", "attribute", "]", "=", "getattr", "(", "self", ",", "attribute", ")", "\n", "", "return", "config_dict", "\n", "\n", "\n", "", "def", "to_json", "(", "self", ")", ":", "\n", "    ", "serialized_dict", "=", "self", ".", "to_dict", "(", ")", "\n", "for", "key", ",", "val", "in", "serialized_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "val", ",", "pathlib", ".", "Path", ")", ":", "\n", "            ", "serialized_dict", "[", "key", "]", "=", "str", "(", "val", ")", "\n", "", "", "return", "json", ".", "dumps", "(", "serialized_dict", ",", "indent", "=", "2", ")", "\n", "\n", "\n", "", "def", "_inst_copy", "(", "self", ")", ":", "\n", "    ", "return", "copylib", ".", "deepcopy", "(", "self", ")", "\n", "\n", "\n", "", "class", "RunConfig", ":", "\n", "    ", "@", "classmethod", "\n", "def", "run_cli", "(", "cls", ",", "prog", "=", "None", ",", "description", "=", "None", ")", ":", "\n", "        ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "prog", "=", "prog", ",", "description", "=", "description", ")", "\n", "return", "cls", ".", "run_from_parser", "(", "parser", "=", "parser", ")", "\n", "\n", "", "@", "classmethod", "\n", "def", "run_from_parser", "(", "cls", ",", "parser", ")", ":", "\n", "        ", "update_parser", "(", "\n", "parser", "=", "parser", ",", "class_with_attributes", "=", "cls", ",", "\n", ")", "\n", "result", "=", "read_parser", "(", "parser", "=", "parser", ",", "class_with_attributes", "=", "cls", ")", "\n", "assert", "isinstance", "(", "result", ",", "cls", ")", "\n", "return", "result", "\n", "\n", "", "@", "classmethod", "\n", "def", "get_attr_dict", "(", "cls", ")", ":", "\n", "# noinspection PyUnresolvedReferences", "\n", "        ", "return", "{", "attr_", ".", "name", ":", "attr_", "for", "attr_", "in", "cls", ".", "__attrs_attrs__", "}", "\n", "\n", "", "@", "classmethod", "\n", "def", "run_cli_json_prepend", "(", "cls", ",", "cl_args", "=", "None", ",", "prog", "=", "None", ",", "description", "=", "None", ")", ":", "\n", "# Prototype", "\n", "# Assumptions: no positional?", "\n", "        ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "prog", "=", "prog", ",", "description", "=", "description", ")", "\n", "result", "=", "cls", ".", "run_from_parser_json_prepend", "(", "parser", "=", "parser", ",", "cl_args", "=", "cl_args", ")", "\n", "return", "result", "\n", "\n", "", "@", "classmethod", "\n", "def", "run_from_parser_json_prepend", "(", "cls", ",", "parser", ",", "cl_args", ")", ":", "\n", "        ", "parser", ".", "add_argument", "(", "\"--ZZsrc\"", ",", "type", "=", "str", ",", "action", "=", "\"append\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--ZZoverrides\"", ",", "type", "=", "str", ",", "nargs", "=", "\"+\"", ")", "\n", "pre_args", ",", "_", "=", "parser", ".", "parse_known_args", "(", "cl_args", ")", "\n", "if", "cl_args", "is", "None", ":", "\n", "            ", "cl_args", "=", "sys", ".", "argv", "[", "1", ":", "]", "\n", "", "if", "pre_args", ".", "ZZsrc", "is", "not", "None", ":", "\n", "# Import configs from ZZsrc JSONs", "\n", "            ", "imported_dict_ls", "=", "[", "read_json", "(", "path", ")", "for", "path", "in", "pre_args", ".", "ZZsrc", "]", "\n", "combined_imported_dict", "=", "combine_dicts", "(", "imported_dict_ls", ",", "strict", "=", "True", ")", "\n", "\n", "# Record which args are going to be overridden", "\n", "\n", "if", "pre_args", ".", "ZZoverrides", "is", "not", "None", ":", "\n", "                ", "raw_overrides", "=", "pre_args", ".", "ZZoverrides", "\n", "overrides", "=", "[", "f\"--{k}\"", "for", "k", "in", "raw_overrides", "]", "\n", "", "else", ":", "\n", "                ", "raw_overrides", "=", "overrides", "=", "[", "]", "\n", "\n", "", "attr_dict", "=", "cls", ".", "get_attr_dict", "(", ")", "\n", "added_args", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "combined_imported_dict", ".", "items", "(", ")", ":", "\n", "                ", "formatted_k", "=", "f\"--{k}\"", "\n", "# Ensure that args from imported, which are not specified to be overridden,", "\n", "#   aren't explicitly specified", "\n", "if", "formatted_k", "in", "cl_args", "and", "formatted_k", "not", "in", "overrides", ":", "\n", "                    ", "raise", "RuntimeError", "(", "f\"Attempting to override {formatted_k}\"", ")", "\n", "\n", "# Special handling for store_true args", "\n", "", "if", "cls", ".", "_is_store_true_arg", "(", "attr_dict", "[", "k", "]", ")", ":", "\n", "                    ", "if", "v", "and", "k", "not", "in", "raw_overrides", ":", "\n", "                        ", "added_args", ".", "append", "(", "formatted_k", ")", "\n", "", "", "else", ":", "\n", "                    ", "added_args", ".", "append", "(", "formatted_k", ")", "\n", "added_args", ".", "append", "(", "str", "(", "v", ")", ")", "\n", "", "", "submitted_args", "=", "added_args", "+", "cl_args", "\n", "", "else", ":", "\n", "            ", "assert", "pre_args", ".", "ZZoverrides", "is", "None", "\n", "submitted_args", "=", "cl_args", "\n", "", "update_parser", "(", "\n", "parser", "=", "parser", ",", "class_with_attributes", "=", "cls", ",", "\n", ")", "\n", "result", ",", "_", "=", "read_parser", "(", "\n", "parser", "=", "parser", ",", "\n", "class_with_attributes", "=", "cls", ",", "\n", "skip_non_class_attributes", "=", "[", "\"ZZsrc\"", ",", "\"ZZoverrides\"", "]", ",", "\n", "args", "=", "submitted_args", ",", "\n", ")", "\n", "assert", "isinstance", "(", "result", ",", "cls", ")", "\n", "return", "result", "\n", "\n", "", "@", "classmethod", "\n", "def", "run_shlex_json_prepend", "(", "cls", ",", "string", ":", "str", ")", ":", "\n", "        ", "return", "cls", ".", "run_cli_json_prepend", "(", "cl_args", "=", "shlex", ".", "split", "(", "string", ".", "strip", "(", ")", ")", ")", "\n", "\n", "", "@", "classmethod", "\n", "def", "default_run_cli", "(", "cls", ",", "cl_args", "=", "None", ",", "prog", "=", "None", ",", "description", "=", "None", ")", ":", "\n", "        ", "return", "cls", ".", "run_cli_json_prepend", "(", "cl_args", "=", "cl_args", ",", "prog", "=", "prog", ",", "description", "=", "description", ")", "\n", "\n", "", "@", "classmethod", "\n", "def", "_is_store_true_arg", "(", "cls", ",", "attr_", ")", ":", "\n", "        ", "if", "\"argparse_kwargs\"", "not", "in", "attr_", ".", "metadata", ":", "\n", "            ", "return", "False", "\n", "", "if", "\"action\"", "not", "in", "attr_", ".", "metadata", "[", "\"argparse_kwargs\"", "]", ":", "\n", "            ", "return", "False", "\n", "", "return", "attr_", ".", "metadata", "[", "\"argparse_kwargs\"", "]", "[", "\"action\"", "]", "==", "\"store_true\"", "\n", "\n", "", "@", "classmethod", "\n", "def", "from_dict", "(", "cls", ",", "dictionary", ")", ":", "\n", "# noinspection PyArgumentList", "\n", "        ", "return", "cls", "(", "**", "dictionary", ")", "\n", "\n", "", "@", "classmethod", "\n", "def", "from_json", "(", "cls", ",", "json_string", ")", ":", "\n", "        ", "return", "cls", ".", "from_dict", "(", "json", ".", "loads", "(", "json_string", ")", ")", "\n", "\n", "", "@", "classmethod", "\n", "def", "from_json_path", "(", "cls", ",", "json_path", ")", ":", "\n", "        ", "with", "open", "(", "json_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "return", "cls", ".", "from_json", "(", "f", ".", "read", "(", ")", ")", "\n", "\n", "", "", "@", "classmethod", "\n", "def", "from_json_arg", "(", "cls", ")", ":", "\n", "        ", "assert", "len", "(", "sys", ".", "argv", ")", "==", "2", "\n", "return", "cls", ".", "from_json_path", "(", "sys", ".", "argv", "[", "1", "]", ")", "\n", "\n", "", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "config_dict", "=", "{", "}", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.BaseSquadStyleTask.__init__": [[305, 319], ["jiant.tasks.core.Task.__init__"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.radam.AdamW.__init__"], ["\n", "", "def", "get_sys_args", "(", ")", ":", "\n", "    ", "return", "sys", ".", "argv", "[", "1", ":", "]", "\n", "\n", "\n", "", "def", "get_mode_and_cl_args", "(", "cl_args", "=", "None", ")", "->", "Tuple", "[", "str", ",", "list", "]", ":", "\n", "    ", "if", "cl_args", "is", "None", ":", "\n", "        ", "cl_args", "=", "get_sys_args", "(", ")", "\n", "", "assert", "len", "(", "cl_args", ")", ">=", "1", ",", "\"First argument is the mode\"", "\n", "return", "cl_args", "[", "0", "]", ",", "cl_args", "[", "1", ":", "]", "\n", "\n", "\n", "", "class", "ModeLookupError", "(", "KeyError", ")", ":", "\n", "    ", "pass", "\n", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.BaseSquadStyleTask.get_train_examples": [[320, 322], ["core.BaseSquadStyleTask.read_squad_examples"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.BaseSquadStyleTask.read_squad_examples"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.BaseSquadStyleTask.get_val_examples": [[323, 325], ["core.BaseSquadStyleTask.read_squad_examples"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.BaseSquadStyleTask.read_squad_examples"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.BaseSquadStyleTask.get_test_examples": [[326, 328], ["core.BaseSquadStyleTask.read_squad_examples"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.BaseSquadStyleTask.read_squad_examples"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.BaseSquadStyleTask.read_squad_examples": [[329, 372], ["jiant.utils.display.maybe_tqdm", "open", "json.load", "cls.Example", "examples.append"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.display.maybe_tqdm"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.PartialDataRow.from_data_row": [[384, 388], ["data_row.to_dict", "core.PartialDataRow", "cls.get_fields"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.ValState.to_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.ExtendedDataClassMixin.get_fields"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.data_rows_to_partial_examples": [[390, 419], ["enumerate", "sorted", "qas_id_to_data_rows[].append", "list", "partial_examples.append", "qas_id_to_data_rows.keys", "jiant.PartialExample", "jiant.PartialFeatures"], "function", ["None"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.is_whitespace": [[421, 425], ["ord"], "function", ["None"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core._new_check_is_max_context": [[427, 447], ["enumerate", "min"], "function", ["None"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core._improve_answer_span": [[449, 460], ["range", "tokenizer.tokenize", "range"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.tokenize"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.logits_to_pred_results_list": [[462, 472], ["jiant.SquadResult", "range"], "function", ["None"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.compute_predictions_logits_v3": [[475, 504], ["core.data_rows_to_partial_examples", "core.logits_to_pred_results_list", "jiant.compute_predictions_logits_v2", "jiant.squad_evaluate"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.data_rows_to_partial_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.logits_to_pred_results_list", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.utils.compute_predictions_logits_v2", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.utils.squad_evaluate"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.utils.get_partial_examples": [[36, 51], ["collections.defaultdict", "enumerate", "example_index_to_features[].append", "partial_examples.append", "utils.PartialExample"], "function", ["None"], ["        ", "return", "[", "]", "\n", "", "if", "len", "(", "tokens_ls", ")", "==", "1", ":", "\n", "        ", "if", "truncate_end", ":", "\n", "            ", "return", "[", "tokens_ls", "[", "0", "]", "[", ":", "max_length", "]", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "tokens_ls", "[", "0", "]", "[", "-", "max_length", ":", "]", "]", "\n", "", "", "lengths", "=", "np", ".", "array", "(", "[", "len", "(", "tokens", ")", "for", "tokens", "in", "tokens_ls", "]", ")", "\n", "total_length", "=", "lengths", ".", "sum", "(", ")", "\n", "if", "total_length", "<", "max_length", ":", "\n", "        ", "return", "tokens_ls", "\n", "", "target_lengths", "=", "lengths", "\n", "while", "sum", "(", "target_lengths", ")", ">", "max_length", ":", "\n", "        ", "target_lengths", "[", "np", ".", "argmax", "(", "target_lengths", ")", "]", "-=", "1", "\n", "\n", "", "return", "[", "\n", "tokens", "[", ":", "target_length", "]", "if", "truncate_end", "else", "tokens", "[", "-", "target_length", ":", "]", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.utils.compute_predictions_logits_v2": [[53, 246], ["collections.namedtuple", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "jiant.utils.display.maybe_tqdm", "enumerate", "sorted", "collections.namedtuple", "utils._compute_softmax", "enumerate", "utils._get_best_indexes", "utils._get_best_indexes", "sorted.append", "nbest.append", "nbest.append", "len", "total_scores.append", "collections.OrderedDict", "nbest_json.append", "len", "collections.namedtuple.", "len", "tokenizer.convert_tokens_to_string", "tok_text.strip.strip", "collections.namedtuple.", "nbest.append", "len", "nbest.insert", "collections.namedtuple.", "sorted.append", "tok_text.strip.split", "utils.get_final_text", "collections.namedtuple.", "collections.namedtuple.", "len", "len", "feature.token_is_max_context.get", "collections.namedtuple."], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.display.maybe_tqdm", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.utils._compute_softmax", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.utils._get_best_indexes", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.utils._get_best_indexes", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.utils.get_final_text"], ["]", "\n", "\n", "\n", "", "def", "pad_to_max_seq_length", "(", "ls", ",", "max_seq_length", ",", "pad_idx", "=", "0", ",", "pad_right", "=", "True", ",", "check", "=", "True", ")", ":", "\n", "    ", "\"\"\"Apply padding to an input sequence.\n\n    Args:\n        ls: sequence to pad.\n        max_seq_length: max length up to which to apply padding.\n        pad_idx: element to use for padding.\n        pad_right: True if padding is applied to right side of sequence, False to pad on left side.\n        check: True if result length should be checked as under the max sequence length.\n\n    Returns:\n        Sequence with specified padding applied.\n\n    \"\"\"", "\n", "padding", "=", "[", "pad_idx", "]", "*", "(", "max_seq_length", "-", "len", "(", "ls", ")", ")", "\n", "if", "pad_right", ":", "\n", "        ", "result", "=", "ls", "+", "padding", "\n", "", "else", ":", "\n", "        ", "result", "=", "padding", "+", "ls", "\n", "\n", "", "if", "check", ":", "\n", "        ", "assert", "len", "(", "result", ")", "==", "max_seq_length", "\n", "", "return", "result", "\n", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.utils.compute_predictions_logits": [[248, 445], ["collections.defaultdict", "collections.namedtuple", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "enumerate", "example_index_to_features[].append", "enumerate", "sorted", "collections.namedtuple", "utils._compute_softmax", "enumerate", "utils._get_best_indexes", "utils._get_best_indexes", "sorted.append", "nbest.append", "nbest.append", "len", "total_scores.append", "collections.OrderedDict", "nbest_json.append", "len", "collections.namedtuple.", "len", "tokenizer.convert_tokens_to_string", "tok_text.strip.strip", "collections.namedtuple.", "nbest.append", "len", "nbest.insert", "collections.namedtuple.", "sorted.append", "tok_text.strip.split", "utils.get_final_text", "collections.namedtuple.", "collections.namedtuple.", "len", "len", "feature.token_is_max_context.get", "collections.namedtuple."], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.utils._compute_softmax", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.utils._get_best_indexes", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.utils._get_best_indexes", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.utils.get_final_text"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.utils.get_final_text": [[447, 530], ["transformers.tokenization_bert.BasicTokenizer", "tok_text.find", "utils.get_final_text._strip_spaces"], "function", ["None"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.utils._get_best_indexes": [[532, 542], ["sorted", "range", "enumerate", "len", "best_indexes.append"], "function", ["None"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.utils._compute_softmax": [[544, 565], ["math.exp", "exp_scores.append", "probs.append"], "function", ["None"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.utils.squad_evaluate": [[570, 603], ["utils.get_raw_scores", "utils.apply_no_ans_threshold", "utils.apply_no_ans_threshold", "utils.make_eval_dict", "bool", "utils.make_eval_dict", "utils.merge_eval", "utils.make_eval_dict", "utils.merge_eval", "utils.find_all_best_thresh", "qas_id_to_has_answer.items", "qas_id_to_has_answer.items"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.utils.get_raw_scores", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.utils.apply_no_ans_threshold", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.utils.apply_no_ans_threshold", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.utils.make_eval_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.utils.make_eval_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.utils.merge_eval", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.utils.make_eval_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.utils.merge_eval", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.utils.find_all_best_thresh"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.utils.apply_no_ans_threshold": [[605, 614], ["scores.items", "float"], "function", ["None"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.utils.make_eval_dict": [[616, 633], ["len", "collections.OrderedDict", "len", "collections.OrderedDict", "sum", "sum", "sum", "sum", "exact_scores.values", "f1_scores.values"], "function", ["None"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.utils.merge_eval": [[637, 640], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.utils.find_all_best_thresh": [[642, 650], ["utils.find_best_thresh", "utils.find_best_thresh"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.utils.find_best_thresh", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.utils.find_best_thresh"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.utils.find_best_thresh": [[652, 673], ["sum", "sorted", "enumerate", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.utils.get_raw_scores": [[675, 699], ["max", "max", "print", "utils.normalize_answer", "utils.compute_exact", "utils.compute_f1"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.ReCordEvaluationScheme.normalize_answer", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.utils.compute_exact", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.utils.compute_f1"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.utils.normalize_answer": [[701, 719], ["utils.normalize_answer.white_space_fix"], "function", ["None"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.utils.get_tokens": [[721, 725], ["normalize_answer().split", "utils.normalize_answer"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.ReCordEvaluationScheme.normalize_answer"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.utils.compute_exact": [[727, 729], ["int", "utils.normalize_answer", "utils.normalize_answer"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.ReCordEvaluationScheme.normalize_answer", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.ReCordEvaluationScheme.normalize_answer"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.utils.compute_f1": [[731, 745], ["utils.get_tokens", "utils.get_tokens", "sum", "collections.Counter", "collections.Counter", "common.values", "int", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.utils.get_tokens", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.utils.get_tokens"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.BaseAccumulator.update": [[30, 32], ["NotImplementedError"], "methods", ["None"], ["**", "argparse_kwargs", ",", "\n", ")", ":", "\n", "    ", "if", "opt_string", "is", "None", ":", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.BaseAccumulator.get_accumulated": [[33, 35], ["NotImplementedError"], "methods", ["None"], ["        ", "opt_string_ls", "=", "[", "]", "\n", "", "elif", "isinstance", "(", "opt_string", ",", "str", ")", ":", "\n", "        ", "opt_string_ls", "=", "[", "opt_string", "]", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.BaseEvaluationScheme.get_accumulator": [[38, 40], ["NotImplementedError"], "methods", ["None"], ["\n", "", "if", "argparse_kwargs", ".", "get", "(", "\"type\"", ",", "None", ")", "is", "bool", ":", "\n", "        ", "argparse_kwargs", "[", "\"choices\"", "]", "=", "{", "True", ",", "False", "}", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.BaseEvaluationScheme.get_labels_from_cache_and_examples": [[41, 47], ["NotImplementedError"], "methods", ["None"], ["argparse_kwargs", "[", "\"type\"", "]", "=", "_is_true", "\n", "\n", "", "if", "argparse_kwargs", ".", "get", "(", "\"action\"", ",", "None", ")", "==", "\"store_true\"", ":", "\n", "        ", "default", "=", "False", "\n", "\n", "", "return", "attr", ".", "attr", "(", "\n", "default", "=", "default", ",", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.BaseEvaluationScheme.get_preds_from_accumulator": [[48, 50], ["NotImplementedError"], "methods", ["None"], ["validator", "=", "validator", ",", "\n", "repr", "=", "repr", ",", "\n", "eq", "=", "eq", ",", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.BaseEvaluationScheme.compute_metrics_from_accumulator": [[51, 55], ["NotImplementedError"], "methods", ["None"], ["order", "=", "order", ",", "\n", "hash", "=", "hash", ",", "\n", "init", "=", "init", ",", "\n", "converter", "=", "converter", ",", "\n", "metadata", "=", "{", "\"opt_string_ls\"", ":", "opt_string_ls", ",", "\"argparse_kwargs\"", ":", "argparse_kwargs", "}", ",", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.ConcatenateLogitsAccumulator.__init__": [[58, 60], ["None"], "methods", ["None"], ["\n", "\n", "", "def", "update_parser", "(", "parser", ",", "class_with_attributes", ":", "Any", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.ConcatenateLogitsAccumulator.update": [[61, 63], ["core.ConcatenateLogitsAccumulator.logits_list.append"], "methods", ["None"], ["# TODO: Write more checks/tests for the parser creation in general  (Issue #57)", "\n", "    ", "for", "attribute", "in", "class_with_attributes", ".", "__attrs_attrs__", ":", "\n", "        ", "if", "\"argparse_kwargs\"", "in", "attribute", ".", "metadata", ":", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.ConcatenateLogitsAccumulator.get_accumulated": [[64, 67], ["numpy.concatenate"], "methods", ["None"], ["            ", "argparse_kwargs", "=", "attribute", ".", "metadata", "[", "\"argparse_kwargs\"", "]", "\n", "opt_string_ls", "=", "attribute", ".", "metadata", "[", "\"opt_string_ls\"", "]", "\n", "is_positional", "=", "\"nargs\"", "in", "argparse_kwargs", "\n", "if", "not", "is_positional", ":", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.ConcatenateLossAccumulator.__init__": [[70, 72], ["None"], "methods", ["None"], ["argparse_kwargs", "[", "\"required\"", "]", "=", "True", "\n", "", "else", ":", "\n", "                    ", "argparse_kwargs", "[", "\"default\"", "]", "=", "attribute", ".", "default", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.ConcatenateLossAccumulator.update": [[73, 75], ["core.ConcatenateLossAccumulator.loss_list.append"], "methods", ["None"], ["", "", "if", "is_positional", ":", "\n", "                ", "argparse_arg_name", "=", "attribute", ".", "name", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.ConcatenateLossAccumulator.get_accumulated": [[76, 79], ["numpy.array"], "methods", ["None"], ["                ", "argparse_arg_name", "=", "f\"--{attribute.name}\"", "\n", "\n", "", "parser", ".", "add_argument", "(", "argparse_arg_name", ",", "*", "opt_string_ls", ",", "**", "argparse_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.BaseLogitsEvaluationScheme.get_accumulator": [[82, 84], ["core.ConcatenateLogitsAccumulator"], "methods", ["None"], ["    ", "attribute_name_set", "=", "{", "attribute", ".", "name", "for", "attribute", "in", "class_with_attributes", ".", "__attrs_attrs__", "}", "\n", "\n", "kwargs", "=", "dict", "(", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.BaseLogitsEvaluationScheme.get_labels_from_cache_and_examples": [[85, 87], ["core.get_label_ids_from_cache"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.get_label_ids_from_cache"], ["leftover_kwargs", "=", "dict", "(", ")", "\n", "\n", "for", "k", ",", "v", "in", "vars", "(", "parser", ".", "parse_args", "(", "args", ")", ")", ".", "items", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.BaseLogitsEvaluationScheme.get_preds_from_accumulator": [[88, 90], ["NotImplementedError"], "methods", ["None"], ["        ", "if", "k", "in", "attribute_name_set", ":", "\n", "            ", "kwargs", "[", "k", "]", "=", "v", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.BaseLogitsEvaluationScheme.compute_metrics_from_accumulator": [[91, 96], ["core.BaseLogitsEvaluationScheme.get_preds_from_accumulator", "core.BaseLogitsEvaluationScheme.compute_metrics_from_preds_and_labels"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.MLMEvaluationScheme.get_preds_from_accumulator", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.CCGEvaluationScheme.compute_metrics_from_preds_and_labels"], ["            ", "if", "skip_non_class_attributes", "is", "not", "None", "and", "k", "not", "in", "skip_non_class_attributes", ":", "\n", "                ", "raise", "RuntimeError", "(", "f\"Unknown attribute {k}\"", ")", "\n", "", "leftover_kwargs", "[", "k", "]", "=", "v", "\n", "\n", "", "", "instance", "=", "class_with_attributes", "(", "**", "kwargs", ")", "\n", "if", "skip_non_class_attributes", ":", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.BaseLogitsEvaluationScheme.compute_metrics_from_preds_and_labels": [[97, 99], ["NotImplementedError"], "methods", ["None"], ["        ", "return", "instance", ",", "leftover_kwargs", "\n", "", "else", ":", "\n", "        ", "return", "instance", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.SimpleAccuracyEvaluationScheme.get_preds_from_accumulator": [[102, 106], ["accumulator.get_accumulated", "numpy.argmax"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.ConcatenateLossAccumulator.get_accumulated"], ["# === Methods === #", "\n", "\n", "# == Class Methods", "\n", "", "", "def", "run_cli", "(", "cls", ",", "args", "=", "None", ",", "prog", "=", "None", ",", "description", "=", "None", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "prog", "=", "prog", ",", "description", "=", "description", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.SimpleAccuracyEvaluationScheme.compute_metrics_from_preds_and_labels": [[107, 112], ["float", "core.Metrics"], "methods", ["None"], ["update_parser", "(", "\n", "parser", "=", "parser", ",", "class_with_attributes", "=", "cls", ",", "\n", ")", "\n", "result", "=", "read_parser", "(", "parser", "=", "parser", ",", "class_with_attributes", "=", "cls", ",", "args", "=", "args", ")", "\n", "assert", "isinstance", "(", "result", ",", "cls", ")", "\n", "return", "result", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.AccAndF1EvaluationScheme.get_preds_from_accumulator": [[115, 118], ["accumulator.get_accumulated", "numpy.argmax"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.ConcatenateLossAccumulator.get_accumulated"], ["", "def", "from_json", "(", "cls", ",", "json_string", ")", ":", "\n", "    ", "return", "cls", "(", "**", "json", ".", "loads", "(", "json_string", ")", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.AccAndF1EvaluationScheme.compute_metrics_from_preds_and_labels": [[119, 131], ["float", "numpy.array", "sklearn.metrics.f1_score", "core.Metrics"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.ReCordEvaluationScheme.f1_score"], ["", "def", "from_json_path", "(", "cls", ",", "json_path", ")", ":", "\n", "    ", "with", "open", "(", "json_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "return", "cls", ".", "from_json", "(", "f", ".", "read", "(", ")", ")", "\n", "\n", "\n", "", "", "def", "from_json_arg", "(", "cls", ")", ":", "\n", "    ", "assert", "len", "(", "sys", ".", "argv", ")", "==", "2", "\n", "return", "cls", ".", "from_json_path", "(", "sys", ".", "argv", "[", "1", "]", ")", "\n", "\n", "\n", "# == Instance Methods", "\n", "", "def", "to_dict", "(", "self", ")", ":", "\n", "    ", "config_dict", "=", "{", "}", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.MCCEvaluationScheme.get_preds_from_accumulator": [[134, 137], ["accumulator.get_accumulated", "numpy.argmax"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.ConcatenateLossAccumulator.get_accumulated"], ["", "return", "config_dict", "\n", "\n", "\n", "", "def", "to_json", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.MCCEvaluationScheme.compute_metrics_from_preds_and_labels": [[138, 142], ["sklearn.metrics.matthews_corrcoef", "core.Metrics"], "methods", ["None"], ["    ", "serialized_dict", "=", "self", ".", "to_dict", "(", ")", "\n", "for", "key", ",", "val", "in", "serialized_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "val", ",", "pathlib", ".", "Path", ")", ":", "\n", "            ", "serialized_dict", "[", "key", "]", "=", "str", "(", "val", ")", "\n", "", "", "return", "json", ".", "dumps", "(", "serialized_dict", ",", "indent", "=", "2", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.PearsonAndSpearmanEvaluationScheme.get_labels_from_cache_and_examples": [[145, 147], ["core.get_label_vals_from_cache"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.get_label_vals_from_cache"], ["", "def", "_inst_copy", "(", "self", ")", ":", "\n", "    ", "return", "copylib", ".", "deepcopy", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.PearsonAndSpearmanEvaluationScheme.get_preds_from_accumulator": [[148, 151], ["accumulator.get_accumulated", "numpy.squeeze"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.ConcatenateLossAccumulator.get_accumulated"], ["\n", "", "class", "RunConfig", ":", "\n", "    ", "@", "classmethod", "\n", "def", "run_cli", "(", "cls", ",", "prog", "=", "None", ",", "description", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.PearsonAndSpearmanEvaluationScheme.compute_metrics_from_preds_and_labels": [[152, 162], ["float", "float", "core.Metrics", "scipy.stats.pearsonr", "scipy.stats.spearmanr"], "methods", ["None"], ["        ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "prog", "=", "prog", ",", "description", "=", "description", ")", "\n", "return", "cls", ".", "run_from_parser", "(", "parser", "=", "parser", ")", "\n", "\n", "", "@", "classmethod", "\n", "def", "run_from_parser", "(", "cls", ",", "parser", ")", ":", "\n", "        ", "update_parser", "(", "\n", "parser", "=", "parser", ",", "class_with_attributes", "=", "cls", ",", "\n", ")", "\n", "result", "=", "read_parser", "(", "parser", "=", "parser", ",", "class_with_attributes", "=", "cls", ")", "\n", "assert", "isinstance", "(", "result", ",", "cls", ")", "\n", "return", "result", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.MultipleChoiceAccuracyEvaluationScheme.get_accumulator": [[165, 167], ["core.ConcatenateLogitsAccumulator"], "methods", ["None"], ["def", "get_attr_dict", "(", "cls", ")", ":", "\n", "# noinspection PyUnresolvedReferences", "\n", "        ", "return", "{", "attr_", ".", "name", ":", "attr_", "for", "attr_", "in", "cls", ".", "__attrs_attrs__", "}", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.MultipleChoiceAccuracyEvaluationScheme.get_labels_from_examples": [[168, 171], ["core.get_multiple_choice_label_ids_from_examples"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.get_multiple_choice_label_ids_from_examples"], ["\n", "", "@", "classmethod", "\n", "def", "run_cli_json_prepend", "(", "cls", ",", "cl_args", "=", "None", ",", "prog", "=", "None", ",", "description", "=", "None", ")", ":", "\n", "# Prototype", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.MultipleChoiceAccuracyEvaluationScheme.get_labels_from_cache_and_examples": [[172, 174], ["core.get_multiple_choice_labels_from_cache"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.get_multiple_choice_labels_from_cache"], ["# Assumptions: no positional?", "\n", "        ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "prog", "=", "prog", ",", "description", "=", "description", ")", "\n", "result", "=", "cls", ".", "run_from_parser_json_prepend", "(", "parser", "=", "parser", ",", "cl_args", "=", "cl_args", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.MultipleChoiceAccuracyEvaluationScheme.get_preds_from_accumulator": [[175, 178], ["core.SimpleAccuracyEvaluationScheme.get_preds_from_accumulator"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.MLMEvaluationScheme.get_preds_from_accumulator"], ["return", "result", "\n", "\n", "", "@", "classmethod", "\n", "def", "run_from_parser_json_prepend", "(", "cls", ",", "parser", ",", "cl_args", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.MultipleChoiceAccuracyEvaluationScheme.compute_metrics_from_preds_and_labels": [[180, 183], ["core.SimpleAccuracyEvaluationScheme.compute_metrics_from_preds_and_labels"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.CCGEvaluationScheme.compute_metrics_from_preds_and_labels"], ["parser", ".", "add_argument", "(", "\"--ZZoverrides\"", ",", "type", "=", "str", ",", "nargs", "=", "\"+\"", ")", "\n", "pre_args", ",", "_", "=", "parser", ".", "parse_known_args", "(", "cl_args", ")", "\n", "if", "cl_args", "is", "None", ":", "\n", "            ", "cl_args", "=", "sys", ".", "argv", "[", "1", ":", "]", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.CommitmentBankEvaluationScheme.get_preds_from_accumulator": [[187, 190], ["accumulator.get_accumulated", "numpy.argmax"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.ConcatenateLossAccumulator.get_accumulated"], ["combined_imported_dict", "=", "combine_dicts", "(", "imported_dict_ls", ",", "strict", "=", "True", ")", "\n", "\n", "# Record which args are going to be overridden", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.CommitmentBankEvaluationScheme.compute_metrics_from_preds_and_labels": [[191, 203], ["float", "numpy.array", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score", "core.mean", "core.Metrics", "core.mean"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.ReCordEvaluationScheme.f1_score", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.ReCordEvaluationScheme.f1_score", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.ReCordEvaluationScheme.f1_score", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.mean", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.mean"], ["if", "pre_args", ".", "ZZoverrides", "is", "not", "None", ":", "\n", "                ", "raw_overrides", "=", "pre_args", ".", "ZZoverrides", "\n", "overrides", "=", "[", "f\"--{k}\"", "for", "k", "in", "raw_overrides", "]", "\n", "", "else", ":", "\n", "                ", "raw_overrides", "=", "overrides", "=", "[", "]", "\n", "\n", "", "attr_dict", "=", "cls", ".", "get_attr_dict", "(", ")", "\n", "added_args", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "combined_imported_dict", ".", "items", "(", ")", ":", "\n", "                ", "formatted_k", "=", "f\"--{k}\"", "\n", "# Ensure that args from imported, which are not specified to be overridden,", "\n", "#   aren't explicitly specified", "\n", "if", "formatted_k", "in", "cl_args", "and", "formatted_k", "not", "in", "overrides", ":", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.MultiRCEvaluationScheme.get_accumulator": [[207, 209], ["core.ConcatenateLogitsAccumulator"], "methods", ["None"], ["", "if", "cls", ".", "_is_store_true_arg", "(", "attr_dict", "[", "k", "]", ")", ":", "\n", "                    ", "if", "v", "and", "k", "not", "in", "raw_overrides", ":", "\n", "                        ", "added_args", ".", "append", "(", "formatted_k", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.MultiRCEvaluationScheme.get_labels_from_examples": [[210, 218], ["core.get_label_ids", "numpy.array", "len", "len", "zip"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.get_label_ids"], ["", "", "else", ":", "\n", "                    ", "added_args", ".", "append", "(", "formatted_k", ")", "\n", "added_args", ".", "append", "(", "str", "(", "v", ")", ")", "\n", "", "", "submitted_args", "=", "added_args", "+", "cl_args", "\n", "", "else", ":", "\n", "            ", "assert", "pre_args", ".", "ZZoverrides", "is", "None", "\n", "submitted_args", "=", "cl_args", "\n", "", "update_parser", "(", "\n", "parser", "=", "parser", ",", "class_with_attributes", "=", "cls", ",", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.MultiRCEvaluationScheme.get_labels_from_cache": [[220, 233], ["cache.iter_all", "numpy.array", "numpy.array", "numpy.array.append", "numpy.array.append", "len", "len", "zip"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.ChunkedFilesDataCache.iter_all"], ["result", ",", "_", "=", "read_parser", "(", "\n", "parser", "=", "parser", ",", "\n", "class_with_attributes", "=", "cls", ",", "\n", "skip_non_class_attributes", "=", "[", "\"ZZsrc\"", ",", "\"ZZoverrides\"", "]", ",", "\n", "args", "=", "submitted_args", ",", "\n", ")", "\n", "assert", "isinstance", "(", "result", ",", "cls", ")", "\n", "return", "result", "\n", "\n", "", "@", "classmethod", "\n", "def", "run_shlex_json_prepend", "(", "cls", ",", "string", ":", "str", ")", ":", "\n", "        ", "return", "cls", ".", "run_cli_json_prepend", "(", "cl_args", "=", "shlex", ".", "split", "(", "string", ".", "strip", "(", ")", ")", ")", "\n", "\n", "", "@", "classmethod", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.MultiRCEvaluationScheme.get_labels_from_cache_and_examples": [[235, 237], ["core.MultiRCEvaluationScheme.get_labels_from_examples"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.ReCordEvaluationScheme.get_labels_from_examples"], ["        ", "return", "cls", ".", "run_cli_json_prepend", "(", "cl_args", "=", "cl_args", ",", "prog", "=", "prog", ",", "description", "=", "description", ")", "\n", "\n", "", "@", "classmethod", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.MultiRCEvaluationScheme.get_preds_from_accumulator": [[238, 240], ["NotImplementedError"], "methods", ["None"], ["def", "_is_store_true_arg", "(", "cls", ",", "attr_", ")", ":", "\n", "        ", "if", "\"argparse_kwargs\"", "not", "in", "attr_", ".", "metadata", ":", "\n", "            ", "return", "False", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.MultiRCEvaluationScheme.compute_metrics_from_accumulator": [[241, 246], ["core.MultiRCEvaluationScheme.get_preds_from_accumulator", "core.MultiRCEvaluationScheme.compute_metrics_from_preds_and_labels"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.MLMEvaluationScheme.get_preds_from_accumulator", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.CCGEvaluationScheme.compute_metrics_from_preds_and_labels"], ["", "if", "\"action\"", "not", "in", "attr_", ".", "metadata", "[", "\"argparse_kwargs\"", "]", ":", "\n", "            ", "return", "False", "\n", "", "return", "attr_", ".", "metadata", "[", "\"argparse_kwargs\"", "]", "[", "\"action\"", "]", "==", "\"store_true\"", "\n", "\n", "", "@", "classmethod", "\n", "def", "from_dict", "(", "cls", ",", "dictionary", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.MultiRCEvaluationScheme.compute_metrics_from_preds_and_labels": [[247, 262], ["pandas.DataFrame", "pandas.DataFrame.groupby().apply().mean", "float", "sklearn.metrics.f1_score", "core.Metrics", "pandas.DataFrame.groupby().apply", "core.mean", "pandas.DataFrame.groupby"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.mean", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.ReCordEvaluationScheme.f1_score", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.mean"], ["# noinspection PyArgumentList", "\n", "        ", "return", "cls", "(", "**", "dictionary", ")", "\n", "\n", "", "@", "classmethod", "\n", "def", "from_json", "(", "cls", ",", "json_string", ")", ":", "\n", "        ", "return", "cls", ".", "from_dict", "(", "json", ".", "loads", "(", "json_string", ")", ")", "\n", "\n", "", "@", "classmethod", "\n", "def", "from_json_path", "(", "cls", ",", "json_path", ")", ":", "\n", "        ", "with", "open", "(", "json_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "return", "cls", ".", "from_json", "(", "f", ".", "read", "(", ")", ")", "\n", "\n", "", "", "@", "classmethod", "\n", "def", "from_json_arg", "(", "cls", ")", ":", "\n", "        ", "assert", "len", "(", "sys", ".", "argv", ")", "==", "2", "\n", "return", "cls", ".", "from_json_path", "(", "sys", ".", "argv", "[", "1", "]", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.ReCordEvaluationScheme.get_accumulator": [[273, 275], ["core.ConcatenateLogitsAccumulator"], "methods", ["None"], ["            ", "if", "isinstance", "(", "val", ",", "pathlib", ".", "Path", ")", ":", "\n", "                ", "serialized_dict", "[", "key", "]", "=", "str", "(", "val", ")", "\n", "", "", "return", "json", ".", "dumps", "(", "serialized_dict", ",", "indent", "=", "2", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.ReCordEvaluationScheme.get_labels_from_examples": [[276, 286], ["core.RecordLabelData"], "methods", ["None"], ["\n", "", "def", "copy", "(", "self", ")", ":", "\n", "        ", "return", "copylib", ".", "deepcopy", "(", "self", ")", "\n", "\n", "", "def", "_post_init", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n", "", "def", "__attrs_post_init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_post_init", "(", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.ReCordEvaluationScheme.get_labels_from_cache_and_examples": [[288, 291], ["cls.get_labels_from_examples"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.ReCordEvaluationScheme.get_labels_from_examples"], ["", "", "def", "run_config", "(", "cls", ")", ":", "\n", "    ", "cls", "=", "attr", ".", "s", "(", "cls", ")", "\n", "\n", "if", "not", "isinstance", "(", "cls", ",", "RunConfig", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.ReCordEvaluationScheme.get_preds_from_accumulator": [[292, 295], ["NotImplementedError"], "methods", ["None"], ["# Class methods", "\n", "        ", "cls", ".", "run_cli", "=", "classmethod", "(", "run_cli", ")", "\n", "cls", ".", "from_json", "=", "classmethod", "(", "from_json", ")", "\n", "cls", ".", "from_json_path", "=", "classmethod", "(", "from_json_path", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.ReCordEvaluationScheme.compute_metrics_from_accumulator": [[296, 304], ["accumulator.get_accumulated", "core.ReCordEvaluationScheme.compute_preds_and_metrics_from_logits_and_record_labels"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.ConcatenateLossAccumulator.get_accumulated", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.ReCordEvaluationScheme.compute_preds_and_metrics_from_logits_and_record_labels"], ["cls", ".", "from_json_arg", "=", "classmethod", "(", "from_json_arg", ")", "\n", "\n", "# Instance methods", "\n", "cls", ".", "to_dict", "=", "to_dict", "\n", "cls", ".", "to_json", "=", "to_json", "\n", "cls", ".", "copy", "=", "_inst_copy", "\n", "\n", "", "return", "cls", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.ReCordEvaluationScheme.compute_preds_and_metrics_from_logits_and_record_labels": [[305, 346], ["core.Metrics", "psg_qns_idx_dict[].append", "list", "int", "cls.metric_max_over_ground_truths", "f1_ls.append", "cls.metric_max_over_ground_truths", "em_ls.append", "sum", "len", "sum", "len", "relevant_examples[].answers_dict.values", "numpy.argmax"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.ReCordEvaluationScheme.metric_max_over_ground_truths", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.ReCordEvaluationScheme.metric_max_over_ground_truths"], ["\n", "", "def", "get_sys_args", "(", ")", ":", "\n", "    ", "return", "sys", ".", "argv", "[", "1", ":", "]", "\n", "\n", "\n", "", "def", "get_mode_and_cl_args", "(", "cl_args", "=", "None", ")", "->", "Tuple", "[", "str", ",", "list", "]", ":", "\n", "    ", "if", "cl_args", "is", "None", ":", "\n", "        ", "cl_args", "=", "get_sys_args", "(", ")", "\n", "", "assert", "len", "(", "cl_args", ")", ">=", "1", ",", "\"First argument is the mode\"", "\n", "return", "cl_args", "[", "0", "]", ",", "cl_args", "[", "1", ":", "]", "\n", "\n", "\n", "", "class", "ModeLookupError", "(", "KeyError", ")", ":", "\n", "    ", "pass", "\n", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.ReCordEvaluationScheme.normalize_answer": [[347, 367], ["core.ReCordEvaluationScheme.normalize_answer.white_space_fix"], "methods", ["None"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.ReCordEvaluationScheme.f1_score": [[368, 383], ["cls.normalize_answer().split", "cls.normalize_answer().split", "sum", "collections.Counter", "collections.Counter", "common.values", "len", "len", "cls.normalize_answer", "cls.normalize_answer"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.ReCordEvaluationScheme.normalize_answer", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.ReCordEvaluationScheme.normalize_answer"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.ReCordEvaluationScheme.exact_match_score": [[384, 390], ["cls.normalize_answer", "cls.normalize_answer"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.ReCordEvaluationScheme.normalize_answer", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.ReCordEvaluationScheme.normalize_answer"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.ReCordEvaluationScheme.metric_max_over_ground_truths": [[391, 401], ["max", "metric_fn", "scores_for_ground_truths.append"], "methods", ["None"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.CCGEvaluationScheme.get_accumulator": [[404, 406], ["core.ConcatenateLogitsAccumulator"], "methods", ["None"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.CCGEvaluationScheme.get_label_ids_from_cache": [[407, 412], ["cache.iter_all"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.ChunkedFilesDataCache.iter_all"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.CCGEvaluationScheme.get_labels_from_cache_and_examples": [[414, 417], ["cls.get_label_ids_from_cache"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.get_label_ids_from_cache"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.CCGEvaluationScheme.get_preds_from_accumulator": [[418, 421], ["accumulator.get_accumulated", "numpy.argmax"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.ConcatenateLossAccumulator.get_accumulated"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.CCGEvaluationScheme.compute_metrics_from_accumulator": [[422, 427], ["core.CCGEvaluationScheme.get_preds_from_accumulator", "core.CCGEvaluationScheme.compute_metrics_from_preds_and_labels"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.MLMEvaluationScheme.get_preds_from_accumulator", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.CCGEvaluationScheme.compute_metrics_from_preds_and_labels"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.CCGEvaluationScheme.compute_metrics_from_preds_and_labels": [[428, 443], ["numpy.stack", "numpy.stack", "numpy.stack.reshape().astype", "cls.compute_metrics_from_flat_preds_and_labels", "preds.reshape", "numpy.stack.reshape", "numpy.stack.reshape"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.CCGEvaluationScheme.compute_metrics_from_flat_preds_and_labels"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.CCGEvaluationScheme.compute_metrics_from_flat_preds_and_labels": [[445, 449], ["core.SimpleAccuracyEvaluationScheme.compute_metrics_from_preds_and_labels"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.CCGEvaluationScheme.compute_metrics_from_preds_and_labels"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.SQuADEvaluationScheme.get_accumulator": [[453, 456], ["core.ConcatenateLogitsAccumulator"], "methods", ["None"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.SQuADEvaluationScheme.get_labels_from_cache": [[457, 460], ["cls.get_label_from_data_row", "cache.iter_all"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.SQuADEvaluationScheme.get_label_from_data_row", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.ChunkedFilesDataCache.iter_all"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.SQuADEvaluationScheme.get_labels_from_cache_and_examples": [[461, 464], ["cls.get_labels_from_cache"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.SQuADEvaluationScheme.get_labels_from_cache"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.SQuADEvaluationScheme.get_preds_from_accumulator": [[465, 467], ["NotImplementedError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.SQuADEvaluationScheme.compute_metrics_from_accumulator": [[468, 483], ["accumulator.get_accumulated", "jiant.compute_predictions_logits_v3", "jiant.compute_predictions_logits_v3", "jiant.compute_predictions_logits_v3", "core.Metrics", "jiant.resolve_is_lower_case", "jiant.resolve_is_lower_case", "jiant.resolve_is_lower_case"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.ConcatenateLossAccumulator.get_accumulated", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.compute_predictions_logits_v3", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.compute_predictions_logits_v3", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.compute_predictions_logits_v3", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_resolution.resolve_is_lower_case", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_resolution.resolve_is_lower_case", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_resolution.resolve_is_lower_case"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.SQuADEvaluationScheme.get_label_from_data_row": [[484, 487], ["jiant.PartialDataRow.from_data_row", "jiant.PartialDataRow.from_data_row", "jiant.PartialDataRow.from_data_row"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.PartialDataRow.from_data_row", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.PartialDataRow.from_data_row", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.PartialDataRow.from_data_row"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.MLMEvaluationScheme.get_accumulator": [[490, 493], ["core.ConcatenateLossAccumulator"], "methods", ["None"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.MLMEvaluationScheme.get_labels_from_cache_and_examples": [[494, 497], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.MLMEvaluationScheme.get_preds_from_accumulator": [[498, 500], ["NotImplementedError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.MLMEvaluationScheme.compute_metrics_from_accumulator": [[501, 511], ["accumulator.get_accumulated", "core.mean", "numpy.exp", "core.Metrics"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.ConcatenateLossAccumulator.get_accumulated", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.mean"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.get_evaluation_scheme_for_task": [[514, 564], ["isinstance", "core.SimpleAccuracyEvaluationScheme", "isinstance", "core.CCGEvaluationScheme", "isinstance", "core.CommitmentBankEvaluationScheme", "isinstance", "core.MCCEvaluationScheme", "isinstance", "core.MultipleChoiceAccuracyEvaluationScheme", "isinstance", "core.AccAndF1EvaluationScheme", "isinstance", "core.SQuADEvaluationScheme", "isinstance", "core.MultiRCEvaluationScheme", "isinstance", "core.PearsonAndSpearmanEvaluationScheme", "isinstance", "core.MLMEvaluationScheme", "KeyError"], "function", ["None"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.get_label_ids": [[566, 568], ["numpy.array"], "function", ["None"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.get_label_id_from_data_row": [[570, 572], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.get_label_ids_from_cache": [[574, 577], ["numpy.array", "core.get_label_id_from_data_row", "cache.iter_all"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.get_label_id_from_data_row", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.ChunkedFilesDataCache.iter_all"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.get_label_vals_from_cache": [[580, 583], ["numpy.array", "core.get_label_val_from_data_row", "cache.iter_all"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.get_label_val_from_data_row", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.ChunkedFilesDataCache.iter_all"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.get_label_val_from_data_row": [[586, 588], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.get_multiple_choice_label_ids_from_examples": [[590, 592], ["numpy.array"], "function", ["None"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.get_multiple_choice_label_id_from_data_row": [[594, 596], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.get_multiple_choice_labels_from_cache": [[598, 603], ["numpy.array", "core.get_multiple_choice_label_id_from_data_row", "cache.iter_all"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.get_multiple_choice_label_id_from_data_row", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.ChunkedFilesDataCache.iter_all"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.mean": [[607, 609], ["float", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.mean"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.write_metrics": [[611, 623], ["json.dumps", "results[].to_dict", "print", "open", "f.write"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.ValState.to_dict"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.export_model.lookup_and_export_model": [[16, 23], ["export_model.get_model_and_tokenizer_classes", "export_model.export_model"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.preproc.export_model.get_model_and_tokenizer_classes", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.preproc.export_model.export_model"], ["", "def", "lookup_and_export_model", "(", "model_type", ",", "output_base_path", ")", ":", "\n", "    ", "model_class", ",", "tokenizer_class", "=", "get_model_and_tokenizer_classes", "(", "model_type", ")", "\n", "export_model", "(", "\n", "model_type", "=", "model_type", ",", "\n", "output_base_path", "=", "output_base_path", ",", "\n", "model_class", "=", "model_class", ",", "\n", "tokenizer_class", "=", "tokenizer_class", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.export_model.export_model": [[26, 46], ["os.path.join", "os.path.join", "os.makedirs", "os.makedirs", "os.path.join", "os.path.join", "model_class.from_pretrained", "torch.save", "jiant.write_json", "tokenizer_class.from_pretrained", "tokenizer_class.from_pretrained.save_pretrained", "jiant.write_json", "model_class.from_pretrained.state_dict", "model_class.from_pretrained.config.to_dict", "os.path.join"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.CheckpointSaver.save", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.write_json", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.write_json", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_setup.OptimizerScheduler.state_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.ValState.to_dict"], ["", "def", "export_model", "(", "model_type", ",", "output_base_path", ",", "model_class", ",", "tokenizer_class", ")", ":", "\n", "    ", "tokenizer_fol_path", "=", "os", ".", "path", ".", "join", "(", "output_base_path", ",", "\"tokenizer\"", ")", "\n", "model_fol_path", "=", "os", ".", "path", ".", "join", "(", "output_base_path", ",", "\"model\"", ")", "\n", "os", ".", "makedirs", "(", "tokenizer_fol_path", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "model_fol_path", ",", "exist_ok", "=", "True", ")", "\n", "\n", "model_path", "=", "os", ".", "path", ".", "join", "(", "model_fol_path", ",", "f\"{model_type}.p\"", ")", "\n", "model_config_path", "=", "os", ".", "path", ".", "join", "(", "model_fol_path", ",", "f\"{model_type}.json\"", ")", "\n", "model", "=", "model_class", ".", "from_pretrained", "(", "model_type", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "model_path", ")", "\n", "py_io", ".", "write_json", "(", "model", ".", "config", ".", "to_dict", "(", ")", ",", "model_config_path", ")", "\n", "tokenizer", "=", "tokenizer_class", ".", "from_pretrained", "(", "model_type", ")", "\n", "tokenizer", ".", "save_pretrained", "(", "tokenizer_fol_path", ")", "\n", "config", "=", "{", "\n", "\"model_type\"", ":", "model_type", ",", "\n", "\"model_path\"", ":", "model_path", ",", "\n", "\"model_config_path\"", ":", "model_config_path", ",", "\n", "\"model_tokenizer_path\"", ":", "tokenizer_fol_path", ",", "\n", "}", "\n", "py_io", ".", "write_json", "(", "config", ",", "os", ".", "path", ".", "join", "(", "output_base_path", ",", "f\"config.json\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.export_model.get_model_and_tokenizer_classes": [[48, 63], ["model_type.split", "model_type.startswith", "model_type.startswith", "model_type.startswith", "KeyError", "model_type.split"], "function", ["None"], ["", "def", "get_model_and_tokenizer_classes", "(", "model_type", ")", ":", "\n", "    ", "class_lookup", "=", "{", "\n", "\"bert\"", ":", "(", "transformers", ".", "BertForPreTraining", ",", "transformers", ".", "BertTokenizer", ")", ",", "\n", "\"xlm-clm-\"", ":", "(", "transformers", ".", "XLMWithLMHeadModel", ",", "transformers", ".", "XLMTokenizer", ")", ",", "\n", "\"roberta\"", ":", "(", "transformers", ".", "RobertaForMaskedLM", ",", "transformers", ".", "RobertaTokenizer", ")", ",", "\n", "\"albert\"", ":", "(", "transformers", ".", "AlbertForMaskedLM", ",", "transformers", ".", "AlbertTokenizer", ")", ",", "\n", "}", "\n", "if", "model_type", ".", "split", "(", "\"-\"", ")", "[", "0", "]", "in", "class_lookup", ":", "\n", "        ", "return", "class_lookup", "[", "model_type", ".", "split", "(", "\"-\"", ")", "[", "0", "]", "]", "\n", "", "elif", "model_type", ".", "startswith", "(", "\"xlm-mlm-\"", ")", "or", "model_type", ".", "startswith", "(", "\"xlm-clm-\"", ")", ":", "\n", "        ", "return", "transformers", ".", "XLMWithLMHeadModel", ",", "transformers", ".", "XLMTokenizer", "\n", "", "elif", "model_type", ".", "startswith", "(", "\"xlm-roberta-\"", ")", ":", "\n", "        ", "return", "transformers", ".", "XLMRobertaForMaskedLM", ",", "transformers", ".", "XLMRobertaTokenizer", "\n", "", "else", ":", "\n", "        ", "raise", "KeyError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.export_model.main": [[65, 69], ["RunConfiguration.default_run_cli", "export_model.lookup_and_export_model"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.RunConfig.default_run_cli", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.preproc.export_model.lookup_and_export_model"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "RunConfiguration", ".", "default_run_cli", "(", ")", "\n", "lookup_and_export_model", "(", "\n", "model_type", "=", "args", ".", "model_type", ",", "output_base_path", "=", "args", ".", "output_base_path", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.TrainState.from_task_name_list": [[33, 36], ["cls"], "methods", ["None"], ["train_cache", ":", "caching", ".", "ChunkedFilesDataCache", ",", "\n", "task", ",", "\n", "train_batch_size", ":", "int", ",", "\n", "batch_method", ":", "str", ",", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.TrainState.step": [[37, 40], ["None"], "methods", ["None"], ["min_batch_size", ":", "int", ",", "\n", "total_batches", ":", "int", ",", "\n", "matchlist_pickle_path", ":", "int", ",", "\n", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.JiantRunner.__init__": [[43, 60], ["None"], "methods", ["None"], ["        ", "dataset", "=", "train_cache", ".", "get_iterable_dataset", "(", "buffer_size", "=", "10000", ",", "shuffle", "=", "True", ")", "\n", "train_dataloader", "=", "torch_utils", ".", "DataLoaderWithLength", "(", "\n", "dataset", "=", "dataset", ",", "batch_size", "=", "train_batch_size", ",", "collate_fn", "=", "task", ".", "collate_fn", ",", "\n", ")", "\n", "", "elif", "batch_method", "==", "'clustered'", ":", "\n", "        ", "dataset", "=", "train_cache", ".", "get_uniterable_dataset", "(", "buffer_size", "=", "10000", ")", "\n", "assert", "(", "total_batches", ">", "0", ")", ",", "f\"Must define total number of batches to generate. Given: {total_batches}.\"", "\n", "assert", "(", "train_batch_size", ">", "0", ")", ",", "f\"Max batch size must be greater than zero. Given: {train_batch_size}.\"", "\n", "\n", "# Currently only supports pickled matchlist. Could potentially incorporate matching, but may take long", "\n", "# depending on size of data.", "\n", "\n", "assert", "os", ".", "path", ".", "exists", "(", "matchlist_pickle_path", ")", ",", "f\"Must first create pickled match list or path given does not exist. Given: {matchlist_pickle_path}\"", "\n", "match_list", "=", "pickle", ".", "load", "(", "open", "(", "matchlist_pickle_path", ",", "'rb'", ")", ")", "\n", "\n", "matched_random_batch_sampler", "=", "torch_utils", ".", "MatchedRandomBatchSampler", "(", "\n", "min_batch_size", "=", "min_batch_size", ",", "\n", "max_batch_size", "=", "train_batch_size", ",", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.JiantRunner.run_train": [[61, 64], ["runner.JiantRunner.run_train_context"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.JiantRunner.run_train_context"], ["drop_last", "=", "True", ",", "\n", "match_list", "=", "match_list", ",", "\n", "total_batches", "=", "total_batches", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.JiantRunner.run_train_context": [[65, 79], ["runner.JiantRunner.get_train_dataloader_dict", "runner.TrainState.from_task_name_list", "jiant.utils.display.maybe_tqdm", "jiant.utils.display.maybe_tqdm", "range", "runner.JiantRunner.run_train_step"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.JiantRunner.get_train_dataloader_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.TrainState.from_task_name_list", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.display.maybe_tqdm", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.display.maybe_tqdm", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.JiantRunner.run_train_step"], ["\n", "train_dataloader", "=", "torch_utils", ".", "DataLoader", "(", "\n", "dataset", "=", "dataset", ",", "\n", "collate_fn", "=", "task", ".", "collate_fn", ",", "\n", "batch_sampler", "=", "matched_random_batch_sampler", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "KeyError", "(", "f\"Batching method not supported: {batch_method}\"", ")", "\n", "\n", "", "return", "train_dataloader", "\n", "\n", "\n", "", "def", "get_eval_dataloader_from_cache", "(", "\n", "eval_cache", ":", "caching", ".", "ChunkedFilesDataCache", ",", "\n", "task", ",", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.JiantRunner.resume_train_context": [[80, 94], ["runner.JiantRunner.get_train_dataloader_dict", "jiant.utils.display.maybe_tqdm", "jiant.utils.display.maybe_tqdm", "range", "runner.JiantRunner.run_train_step"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.JiantRunner.get_train_dataloader_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.display.maybe_tqdm", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.display.maybe_tqdm", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.JiantRunner.run_train_step"], ["eval_batch_size", ":", "int", ",", "\n", "subset_num", "=", "None", ",", "\n", "explicit_subset", "=", "None", ",", "\n", ")", ":", "\n", "    ", "dataset", "=", "eval_cache", ".", "get_iterable_dataset", "(", "\n", "buffer_size", "=", "10000", ",", "shuffle", "=", "False", ",", "subset_num", "=", "subset_num", ",", "explicit_subset", "=", "explicit_subset", ",", "\n", ")", "\n", "eval_dataloader", "=", "torch_utils", ".", "DataLoaderWithLength", "(", "\n", "dataset", "=", "dataset", ",", "batch_size", "=", "eval_batch_size", ",", "collate_fn", "=", "task", ".", "collate_fn", ",", "\n", ")", "\n", "return", "eval_dataloader", "\n", "\n", "\n", "", "def", "save_model_with_metadata", "(", "model", ":", "nn", ".", "Module", ",", "metadata", ":", "dict", ",", "output_dir", ":", "str", ",", "file_name", "=", "\"model\"", ")", ":", "\n", "    ", "torch", ".", "save", "(", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.JiantRunner.run_train_step": [[95, 124], ["runner.JiantRunner.jiant_model.train", "runner.JiantRunner.jiant_task_container.task_sampler.pop", "range", "runner.JiantRunner.optimizer_scheduler.step", "runner.JiantRunner.optimizer_scheduler.optimizer.zero_grad", "train_state.step", "runner.JiantRunner.log_writer.write_entry", "train_dataloader_dict[].pop", "batch.to.to.to", "jiant.proj.main.modeling.primary.wrap_jiant_forward", "jiant.proj.main.modeling.primary.wrap_jiant_forward", "runner.JiantRunner.complex_backpropagate", "runner.JiantRunner.item"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.task_sampler.TimeDependentProbMultiTaskSampler.pop", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.radam.AdamW.step", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.radam.AdamW.step", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog.InMemoryZLogger.write_entry", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.task_sampler.TimeDependentProbMultiTaskSampler.pop", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.core.BatchTuple.to", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.primary.wrap_jiant_forward", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.primary.wrap_jiant_forward", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.JiantRunner.complex_backpropagate"], ["torch_utils", ".", "get_model_for_saving", "(", "model", ")", ".", "state_dict", "(", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "output_dir", ",", "f\"{file_name}.p\"", ")", ",", "\n", ")", "\n", "py_io", ".", "write_json", "(", "metadata", ",", "os", ".", "path", ".", "join", "(", "output_dir", ",", "f\"{file_name}.metadata.json\"", ")", ")", "\n", "\n", "\n", "", "def", "compare_steps_max_steps", "(", "step", ",", "max_steps", ")", ":", "\n", "    ", "return", "max_steps", "is", "not", "None", "and", "max_steps", "!=", "-", "1", "and", "step", ">=", "max_steps", "\n", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.JiantRunner.run_val": [[127, 148], ["runner.JiantRunner.get_val_dataloader_dict", "runner.JiantRunner.get_val_labels_dict", "runner.JiantRunner.run_val"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.JiantRunner.get_val_dataloader_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.JiantRunner.get_val_labels_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.run_val"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.JiantRunner.run_test": [[149, 163], ["runner.JiantRunner.get_test_dataloader_dict", "runner.JiantRunner.run_test"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.JiantRunner.get_test_dataloader_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.run_test"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.JiantRunner.get_train_dataloader_dict": [[164, 190], ["jiant.utils.python.datastructures.InfiniteYield", "jiant.utils.python.datastructures.InfiniteYield", "jiant.shared.runner.get_train_dataloader_from_cache", "jiant.shared.runner.get_train_dataloader_from_cache"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.runner.get_train_dataloader_from_cache", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.runner.get_train_dataloader_from_cache"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.JiantRunner._get_eval_dataloader_dict": [[191, 204], ["jiant.shared.runner.get_eval_dataloader_from_cache", "jiant.shared.runner.get_eval_dataloader_from_cache"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.runner.get_eval_dataloader_from_cache", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.runner.get_eval_dataloader_from_cache"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.JiantRunner.get_val_dataloader_dict": [[205, 208], ["runner.JiantRunner._get_eval_dataloader_dict"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.JiantRunner._get_eval_dataloader_dict"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.JiantRunner.get_val_labels_dict": [[210, 220], ["val_labels_cache.get_all"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.ChunkedFilesDataCache.get_all"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.JiantRunner.get_test_dataloader_dict": [[221, 225], ["runner.JiantRunner._get_eval_dataloader_dict"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.JiantRunner._get_eval_dataloader_dict"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.JiantRunner.complex_backpropagate": [[227, 236], ["jiant.shared.runner.complex_backpropagate", "jiant.shared.runner.complex_backpropagate"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.JiantRunner.complex_backpropagate", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.JiantRunner.complex_backpropagate"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.JiantRunner.get_runner_state": [[238, 245], ["jiant.get_model_for_saving().state_dict", "jiant.get_model_for_saving().state_dict", "runner.JiantRunner.optimizer_scheduler.optimizer.state_dict", "jiant.get_model_for_saving", "jiant.get_model_for_saving"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_setup.OptimizerScheduler.state_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_setup.OptimizerScheduler.state_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_setup.OptimizerScheduler.state_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.torch_utils.get_model_for_saving", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.torch_utils.get_model_for_saving"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.JiantRunner.load_state": [[246, 249], ["jiant.get_model_for_saving().load_state_dict", "jiant.get_model_for_saving().load_state_dict", "runner.JiantRunner.optimizer_scheduler.optimizer.load_state_dict", "jiant.get_model_for_saving", "jiant.get_model_for_saving"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_setup.OptimizerScheduler.load_state_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_setup.OptimizerScheduler.load_state_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_setup.OptimizerScheduler.load_state_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.torch_utils.get_model_for_saving", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.torch_utils.get_model_for_saving"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.CheckpointSaver.__init__": [[252, 255], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.CheckpointSaver.save": [[256, 263], ["jiant.safe_save", "jiant.safe_save"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.torch_utils.safe_save", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.torch_utils.safe_save"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.run_val": [[265, 325], ["jiant_model.eval", "jiant.get_evaluation_scheme_for_task", "evaluate.get_evaluation_scheme_for_task.get_accumulator", "enumerate", "jiant.utils.display.maybe_tqdm", "batch.to.to", "jiant.proj.main.modeling.primary.wrap_jiant_forward.logits.detach().cpu().numpy", "jiant.proj.main.modeling.primary.wrap_jiant_forward.loss.mean().item", "evaluation_scheme.get_accumulator.update", "len", "evaluate.get_evaluation_scheme_for_task.compute_metrics_from_accumulator", "evaluate.get_evaluation_scheme_for_task.get_preds_from_accumulator", "torch.no_grad", "jiant.proj.main.modeling.primary.wrap_jiant_forward", "jiant.is_data_parallel", "jiant.proj.main.modeling.primary.wrap_jiant_forward.logits.detach().cpu", "jiant.proj.main.modeling.primary.wrap_jiant_forward.loss.mean", "jiant.proj.main.modeling.primary.wrap_jiant_forward.logits.detach"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.get_evaluation_scheme_for_task", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.MLMEvaluationScheme.get_accumulator", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.display.maybe_tqdm", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.core.BatchTuple.to", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.ConcatenateLossAccumulator.update", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.MLMEvaluationScheme.compute_metrics_from_accumulator", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.MLMEvaluationScheme.get_preds_from_accumulator", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.primary.wrap_jiant_forward", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.torch_utils.is_data_parallel", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.mean"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.run_test": [[327, 352], ["jiant_model.eval", "jiant.get_evaluation_scheme_for_task", "evaluate.get_evaluation_scheme_for_task.get_accumulator", "enumerate", "jiant.utils.display.maybe_tqdm", "batch.to.to", "jiant.proj.main.modeling.primary.wrap_jiant_forward.logits.detach().cpu().numpy", "evaluation_scheme.get_accumulator.update", "evaluate.get_evaluation_scheme_for_task.get_preds_from_accumulator", "torch.no_grad", "jiant.proj.main.modeling.primary.wrap_jiant_forward", "jiant.proj.main.modeling.primary.wrap_jiant_forward.logits.detach().cpu", "jiant.proj.main.modeling.primary.wrap_jiant_forward.logits.detach"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.get_evaluation_scheme_for_task", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.MLMEvaluationScheme.get_accumulator", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.display.maybe_tqdm", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.core.BatchTuple.to", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.ConcatenateLossAccumulator.update", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.MLMEvaluationScheme.get_preds_from_accumulator", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.primary.wrap_jiant_forward"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.ValState.new": [[25, 29], ["metarunner.ValState.__class__", "metarunner.ValState.train_state.new"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.ValState.new"], ["\n", "", "def", "should_break_training", "(", "self", ")", "->", "bool", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "def", "done_training", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.ValState.to_dict": [[31, 36], ["float", "metarunner.ValState.train_state.to_dict"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.ValState.to_dict"], ["\n", "", "def", "returned_result", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "def", "run_train_loop", "(", "self", ")", ":", "\n", "        ", "self", ".", "begin_training", "(", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.JiantMetarunner.__init__": [[57, 94], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.JiantMetarunner.begin_training": [[95, 98], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.JiantMetarunner.yield_train_step": [[99, 111], ["metarunner.JiantMetarunner.runner.run_train_context", "metarunner.JiantMetarunner.runner.resume_train_context", "metarunner.JiantMetarunner.inject_at_step"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.JiantRunner.run_train_context", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.JiantRunner.resume_train_context", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.JiantMetarunner.inject_at_step"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.JiantMetarunner.should_save_model": [[112, 116], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.JiantMetarunner.save_model": [[117, 123], ["jiant.shared.runner.save_model_with_metadata", "jiant.shared.runner.save_model_with_metadata"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.runner.save_model_with_metadata", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.runner.save_model_with_metadata"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.JiantMetarunner.should_save_checkpoint": [[125, 129], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.JiantMetarunner.save_checkpoint": [[130, 135], ["metarunner.JiantMetarunner.runner.get_runner_state", "metarunner.JiantMetarunner.get_state", "print", "metarunner.JiantMetarunner.checkpoint_saver.save"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.JiantRunner.get_runner_state", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.JiantMetarunner.get_state", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.CheckpointSaver.save"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.JiantMetarunner.should_eval_model": [[136, 140], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.JiantMetarunner.eval_model": [[141, 143], ["metarunner.JiantMetarunner.eval_save"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.JiantMetarunner.eval_save"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.JiantMetarunner.should_break_training": [[144, 159], ["jiant.shared.runner.compare_steps_max_steps", "jiant.shared.runner.compare_steps_max_steps", "metarunner.JiantMetarunner.log_writer.write_entry", "metarunner.JiantMetarunner.log_writer.flush", "metarunner.JiantMetarunner.train_state.to_dict"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.runner.compare_steps_max_steps", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.runner.compare_steps_max_steps", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog.InMemoryZLogger.write_entry", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog.InMemoryZLogger.flush", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.ValState.to_dict"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.JiantMetarunner.done_training": [[160, 174], ["metarunner.JiantMetarunner.eval_save", "jiant.utils.torch_utils.copy_state_dict", "jiant.utils.torch_utils.copy_state_dict", "isinstance", "print", "metarunner.JiantMetarunner.model.module.load_state_dict", "metarunner.JiantMetarunner.model.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.JiantMetarunner.eval_save", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.torch_utils.copy_state_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.torch_utils.copy_state_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_setup.OptimizerScheduler.load_state_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_setup.OptimizerScheduler.load_state_dict"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.JiantMetarunner.returned_result": [[175, 179], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.JiantMetarunner.inject_at_step": [[183, 185], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.JiantMetarunner.get_state": [[186, 191], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.JiantMetarunner.load_state": [[193, 197], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.JiantMetarunner.eval_save": [[198, 243], ["metarunner.JiantMetarunner.runner.run_val", "jiant.compute_aggregate_major_metrics_from_results_dict", "jiant.compute_aggregate_major_metrics_from_results_dict", "jiant.get_metrics_dict_from_results_dict", "jiant.get_metrics_dict_from_results_dict", "metarunner.ValState", "metarunner.JiantMetarunner.log_writer.write_entry", "metarunner.JiantMetarunner.log_writer.write_entry", "metarunner.JiantMetarunner.log_writer.flush", "metarunner.JiantMetarunner.val_state_history.append", "metarunner.ValState.to_dict", "metarunner.ValState.new", "metarunner.JiantMetarunner.log_writer.write_entry", "jiant.utils.torch_utils.copy_state_dict", "jiant.utils.torch_utils.copy_state_dict", "float", "metarunner.JiantMetarunner.train_state.new", "metarunner.JiantMetarunner.best_val_state.to_dict", "jiant.shared.runner.save_model_with_metadata", "jiant.shared.runner.save_model_with_metadata", "metarunner.JiantMetarunner.train_state.to_dict", "jiant.utils.torch_utils.get_model_for_saving().state_dict", "jiant.utils.torch_utils.get_model_for_saving().state_dict", "metarunner.JiantMetarunner.best_val_state.to_dict", "jiant.utils.torch_utils.get_model_for_saving", "jiant.utils.torch_utils.get_model_for_saving"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.run_val", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.task_sampler.compute_aggregate_major_metrics_from_results_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.task_sampler.compute_aggregate_major_metrics_from_results_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.task_sampler.get_metrics_dict_from_results_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.task_sampler.get_metrics_dict_from_results_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog.InMemoryZLogger.write_entry", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog.InMemoryZLogger.write_entry", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog.InMemoryZLogger.flush", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.ValState.to_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.ValState.new", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog.InMemoryZLogger.write_entry", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.torch_utils.copy_state_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.torch_utils.copy_state_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.ValState.new", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.ValState.to_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.runner.save_model_with_metadata", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.runner.save_model_with_metadata", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.ValState.to_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_setup.OptimizerScheduler.state_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_setup.OptimizerScheduler.state_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.ValState.to_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.torch_utils.get_model_for_saving", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.torch_utils.get_model_for_saving"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.get_should_early_stop_func": [[39, 53], ["None"], "function", ["None"], ["            ", "if", "self", ".", "should_save_model", "(", ")", ":", "\n", "                ", "self", ".", "save_model", "(", ")", "\n", "\n", "", "if", "self", ".", "should_save_checkpoint", "(", ")", ":", "\n", "                ", "self", ".", "save_checkpoint", "(", ")", "\n", "\n", "", "if", "self", ".", "should_eval_model", "(", ")", ":", "\n", "                ", "self", ".", "eval_model", "(", ")", "\n", "\n", "", "if", "self", ".", "should_break_training", "(", ")", ":", "\n", "                ", "break", "\n", "\n", "", "", "self", ".", "eval_model", "(", ")", "\n", "self", ".", "done_training", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.preprocessing.MaxValidLengthRecorder.__init__": [[12, 16], ["numpy.arange"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "max_seq_length", ")", ":", "\n", "        ", "self", ".", "max_valid_length", "=", "0", "\n", "self", ".", "max_seq_length", "=", "max_seq_length", "\n", "self", ".", "range_idx", "=", "np", ".", "arange", "(", "max_seq_length", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.preprocessing.MaxValidLengthRecorder.__call__": [[17, 23], ["datum[].input_mask.reshape().max", "max", "datum[].get_fields", "RuntimeError", "preprocessing.MaxValidLengthRecorder.range_idx[].max", "datum[].input_mask.reshape", "datum[].input_mask.reshape().max.astype"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.ExtendedDataClassMixin.get_fields"], ["", "def", "__call__", "(", "self", ",", "datum", ")", ":", "\n", "        ", "if", "\"input_mask\"", "not", "in", "datum", "[", "\"data_row\"", "]", ".", "get_fields", "(", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Smart truncate not supported\"", ")", "\n", "", "indexer", "=", "datum", "[", "\"data_row\"", "]", ".", "input_mask", ".", "reshape", "(", "-", "1", ",", "self", ".", "max_seq_length", ")", ".", "max", "(", "-", "2", ")", "\n", "valid_length", "=", "self", ".", "range_idx", "[", "indexer", ".", "astype", "(", "bool", ")", "]", ".", "max", "(", ")", "+", "1", "\n", "self", ".", "max_valid_length", "=", "max", "(", "self", ".", "max_valid_length", ",", "valid_length", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.preprocessing.smart_truncate": [[25, 60], ["numpy.arange", "max", "jiant.utils.display.maybe_tqdm", "jiant.ListDataset", "[].get_fields", "RuntimeError", "datum[].input_mask.reshape().max", "valid_length_ls.append", "new_datum_ls.append", "preprocessing.smart_truncate_datum", "datum[].input_mask.reshape", "range_idx[].max", "datum[].input_mask.reshape().max.astype"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.display.maybe_tqdm", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.ExtendedDataClassMixin.get_fields", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.simple.preprocessing.smart_truncate_datum"], ["", "", "def", "smart_truncate", "(", "dataset", ":", "torch_utils", ".", "ListDataset", ",", "max_seq_length", ":", "int", ",", "verbose", ":", "bool", "=", "False", ")", ":", "\n", "    ", "\"\"\"Truncate data to the length of the longest example in the dataset.\n\n    Args:\n        dataset (torch_utils.ListDataset): ListDataset to truncate if possible.\n        max_seq_length (int): The maximum total input sequence length.\n        verbose (bool): If True, display progress bar tracking truncation progress.\n\n    Returns:\n        Tuple[torch_utils.ListDataset, int]: truncated dataset, and length of the longest sequence.\n\n    \"\"\"", "\n", "if", "\"input_mask\"", "not", "in", "dataset", ".", "data", "[", "0", "]", "[", "\"data_row\"", "]", ".", "get_fields", "(", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"Smart truncate not supported\"", ")", "\n", "", "valid_length_ls", "=", "[", "]", "\n", "range_idx", "=", "np", ".", "arange", "(", "max_seq_length", ")", "\n", "for", "datum", "in", "dataset", ".", "data", ":", "\n", "# TODO: document why reshape and max happen here (for cola this isn't necessary).", "\n", "#       (Issue #47)", "\n", "        ", "indexer", "=", "datum", "[", "\"data_row\"", "]", ".", "input_mask", ".", "reshape", "(", "-", "1", ",", "max_seq_length", ")", ".", "max", "(", "-", "2", ")", "\n", "valid_length_ls", ".", "append", "(", "range_idx", "[", "indexer", ".", "astype", "(", "bool", ")", "]", ".", "max", "(", ")", "+", "1", ")", "\n", "", "max_valid_length", "=", "max", "(", "valid_length_ls", ")", "\n", "\n", "if", "max_valid_length", "==", "max_seq_length", ":", "\n", "        ", "return", "dataset", ",", "max_seq_length", "\n", "\n", "", "new_datum_ls", "=", "[", "]", "\n", "for", "datum", "in", "maybe_tqdm", "(", "dataset", ".", "data", ",", "desc", "=", "\"Smart truncate data\"", ",", "verbose", "=", "verbose", ")", ":", "\n", "        ", "new_datum_ls", ".", "append", "(", "\n", "smart_truncate_datum", "(", "\n", "datum", "=", "datum", ",", "max_seq_length", "=", "max_seq_length", ",", "max_valid_length", "=", "max_valid_length", ",", "\n", ")", "\n", ")", "\n", "", "new_dataset", "=", "torch_utils", ".", "ListDataset", "(", "new_datum_ls", ")", "\n", "return", "new_dataset", ",", "max_valid_length", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.preprocessing.smart_truncate_cache": [[62, 78], ["jiant.utils.display.maybe_trange", "torch.load", "jiant.utils.display.maybe_tqdm", "torch.save", "cache.get_chunk_path", "new_chunk.append", "cache.get_chunk_path", "preprocessing.smart_truncate_datum"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.display.maybe_trange", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.display.maybe_tqdm", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.CheckpointSaver.save", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.ChunkedFilesDataCache.get_chunk_path", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.ChunkedFilesDataCache.get_chunk_path", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.simple.preprocessing.smart_truncate_datum"], ["", "def", "smart_truncate_cache", "(", "\n", "cache", ":", "shared_caching", ".", "ChunkedFilesDataCache", ",", "\n", "max_seq_length", ":", "int", ",", "\n", "max_valid_length", ":", "int", ",", "\n", "verbose", ":", "bool", "=", "False", ",", "\n", ")", ":", "\n", "    ", "for", "chunk_i", "in", "maybe_trange", "(", "cache", ".", "num_chunks", ",", "desc", "=", "\"Smart truncate chunks\"", ",", "verbose", "=", "verbose", ")", ":", "\n", "        ", "chunk", "=", "torch", ".", "load", "(", "cache", ".", "get_chunk_path", "(", "chunk_i", ")", ")", "\n", "new_chunk", "=", "[", "]", "\n", "for", "datum", "in", "maybe_tqdm", "(", "chunk", ",", "desc", "=", "\"Smart truncate chunk-datum\"", ",", "verbose", "=", "verbose", ")", ":", "\n", "            ", "new_chunk", ".", "append", "(", "\n", "smart_truncate_datum", "(", "\n", "datum", "=", "datum", ",", "max_seq_length", "=", "max_seq_length", ",", "max_valid_length", "=", "max_valid_length", ",", "\n", ")", "\n", ")", "\n", "", "torch", ".", "save", "(", "new_chunk", ",", "cache", ".", "get_chunk_path", "(", "chunk_i", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.preprocessing.smart_truncate_datum": [[80, 100], ["datum[].to_dict", "datum[].to_dict.copy", "datum[].to_dict.items", "datum[].__class__", "isinstance", "RuntimeError", "v.shape.count", "slice_ls.append", "slice_ls.append", "tuple", "slice", "slice"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.ValState.to_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.RunConfig.copy"], ["", "", "def", "smart_truncate_datum", "(", "datum", ",", "max_seq_length", ",", "max_valid_length", ")", ":", "\n", "    ", "row_dict", "=", "datum", "[", "\"data_row\"", "]", ".", "to_dict", "(", ")", "\n", "new_row_dict", "=", "row_dict", ".", "copy", "(", ")", "\n", "for", "k", ",", "v", "in", "row_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "v", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "continue", "\n", "", "if", "max_seq_length", "not", "in", "v", ".", "shape", ":", "\n", "            ", "continue", "\n", "", "if", "not", "v", ".", "shape", ".", "count", "(", "max_seq_length", ")", "==", "1", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"confusing dimensions\"", ")", "\n", "", "slice_ls", "=", "[", "]", "\n", "for", "n", "in", "v", ".", "shape", ":", "\n", "            ", "if", "n", "==", "max_seq_length", ":", "\n", "                ", "slice_ls", ".", "append", "(", "slice", "(", "None", ",", "max_valid_length", ")", ")", "\n", "", "else", ":", "\n", "                ", "slice_ls", ".", "append", "(", "slice", "(", "None", ")", ")", "\n", "", "", "new_row_dict", "[", "k", "]", "=", "v", "[", "tuple", "(", "slice_ls", ")", "]", "\n", "", "return", "{", "\n", "\"data_row\"", ":", "datum", "[", "\"data_row\"", "]", ".", "__class__", "(", "**", "new_row_dict", ")", ",", "\n", "\"metadata\"", ":", "datum", "[", "\"metadata\"", "]", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.preprocessing.convert_examples_to_dataset": [[103, 128], ["preprocessing.tokenize_and_featurize", "enumerate", "jiant.ListDataset", "list", "data.append", "range", "len", "metadata.items"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.simple.preprocessing.tokenize_and_featurize"], ["", "def", "convert_examples_to_dataset", "(", "\n", "examples", ":", "list", ",", "tokenizer", ",", "feat_spec", ":", "FeaturizationSpec", ",", "phase", ":", "str", ",", "verbose", "=", "False", "\n", ")", ":", "\n", "    ", "\"\"\"Create ListDataset containing DataRows and metadata.\n\n    Args:\n        examples (list[Example]): list of task Examples.\n        tokenizer: TODO  (Issue #44)\n        feat_spec (FeaturizationSpec): Tokenization-related metadata.\n        phase (str): string identifying the data subset (e.g., train, val or test).\n        verbose: If True, display progress bar.\n\n    Returns:\n        ListDataset containing DataRows and metadata.\n\n    \"\"\"", "\n", "data_rows", "=", "tokenize_and_featurize", "(", "\n", "examples", "=", "examples", ",", "tokenizer", "=", "tokenizer", ",", "feat_spec", "=", "feat_spec", ",", "phase", "=", "phase", ",", "verbose", "=", "verbose", ",", "\n", ")", "\n", "metadata", "=", "{", "\"example_id\"", ":", "list", "(", "range", "(", "len", "(", "data_rows", ")", ")", ")", "}", "\n", "data", "=", "[", "]", "\n", "for", "i", ",", "data_row", "in", "enumerate", "(", "data_rows", ")", ":", "\n", "        ", "metadata_row", "=", "{", "k", ":", "v", "[", "i", "]", "for", "k", ",", "v", "in", "metadata", ".", "items", "(", ")", "}", "\n", "data", ".", "append", "(", "{", "\"data_row\"", ":", "data_row", ",", "\"metadata\"", ":", "metadata_row", "}", ")", "\n", "", "return", "torch_utils", ".", "ListDataset", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.preprocessing.iter_chunk_convert_examples_to_dataset": [[130, 144], ["enumerate", "preprocessing.iter_chunk_tokenize_and_featurize"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.simple.preprocessing.iter_chunk_tokenize_and_featurize"], ["", "def", "iter_chunk_convert_examples_to_dataset", "(", "\n", "examples", ":", "list", ",", "tokenizer", ",", "feat_spec", ":", "FeaturizationSpec", ",", "phase", ":", "str", ",", "verbose", "=", "False", "\n", ")", ":", "\n", "    ", "for", "i", ",", "data_row", "in", "enumerate", "(", "\n", "iter_chunk_tokenize_and_featurize", "(", "\n", "examples", "=", "examples", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "feat_spec", "=", "feat_spec", ",", "\n", "phase", "=", "phase", ",", "\n", "verbose", "=", "verbose", ",", "\n", ")", "\n", ")", ":", "\n", "        ", "metadata", "=", "{", "\"example_id\"", ":", "i", "}", "\n", "yield", "{", "\"data_row\"", ":", "data_row", ",", "\"metadata\"", ":", "metadata", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.preprocessing.tokenize_and_featurize": [[146, 181], ["isinstance", "jiant.utils.display.maybe_tqdm", "example.to_feature_list", "example.tokenize().featurize", "jiant.utils.display.maybe_tqdm", "example.tokenize"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.display.maybe_tqdm", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.to_feature_list", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.mlm.TokenizedExample.featurize", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.display.maybe_tqdm", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.tokenize"], ["", "", "def", "tokenize_and_featurize", "(", "\n", "examples", ":", "list", ",", "tokenizer", ",", "feat_spec", ":", "FeaturizationSpec", ",", "phase", ",", "verbose", "=", "False", "\n", ")", ":", "\n", "    ", "\"\"\"Create list of DataRows containing tokenized and featurized examples.\n\n    Args:\n        examples (list[Example]): list of task Examples.\n        tokenizer: TODO  (Issue #44)\n        feat_spec (FeaturizationSpec): Tokenization-related metadata.\n        phase (str): string identifying the data subset (e.g., train, val or test).\n        verbose: If True, display progress bar.\n\n    Returns:\n        List DataRows containing tokenized and featurized examples.\n\n    \"\"\"", "\n", "# TODO: Better solution  (Issue #48)", "\n", "if", "isinstance", "(", "examples", "[", "0", "]", ",", "squad_style", ".", "Example", ")", ":", "\n", "        ", "data_rows", "=", "[", "]", "\n", "for", "example", "in", "maybe_tqdm", "(", "examples", ",", "desc", "=", "\"Tokenizing\"", ",", "verbose", "=", "verbose", ")", ":", "\n", "# TODO: Expose parameters  (Issue #49)", "\n", "            ", "data_rows", "+=", "example", ".", "to_feature_list", "(", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "feat_spec", "=", "feat_spec", ",", "\n", "max_seq_length", "=", "feat_spec", ".", "max_seq_length", ",", "\n", "doc_stride", "=", "128", ",", "\n", "max_query_length", "=", "64", ",", "\n", "set_type", "=", "phase", ",", "\n", ")", "\n", "", "", "else", ":", "\n", "        ", "data_rows", "=", "[", "\n", "example", ".", "tokenize", "(", "tokenizer", ")", ".", "featurize", "(", "tokenizer", ",", "feat_spec", ")", "\n", "for", "example", "in", "maybe_tqdm", "(", "examples", ",", "desc", "=", "\"Tokenizing\"", ",", "verbose", "=", "verbose", ")", "\n", "]", "\n", "", "return", "data_rows", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.preprocessing.iter_chunk_tokenize_and_featurize": [[183, 212], ["jiant.utils.display.maybe_tqdm", "isinstance", "example.to_feature_list", "example.tokenize().featurize", "example.tokenize"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.display.maybe_tqdm", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.to_feature_list", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.mlm.TokenizedExample.featurize", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.tokenize"], ["", "def", "iter_chunk_tokenize_and_featurize", "(", "\n", "examples", ":", "list", ",", "tokenizer", ",", "feat_spec", ":", "FeaturizationSpec", ",", "phase", ",", "verbose", "=", "False", "\n", ")", ":", "\n", "    ", "\"\"\"Generator of DataRows containing tokenized and featurized examples.\n\n    Args:\n        examples (list[Example]): list of task Examples.\n        tokenizer: TODO  (Issue #44)\n        feat_spec (FeaturizationSpec): Tokenization-related metadata.\n        phase (str): string identifying the data subset (e.g., train, val or test).\n        verbose: If True, display progress bar.\n\n    Yields:\n        DataRow containing tokenized and featurized examples.\n\n    \"\"\"", "\n", "for", "example", "in", "maybe_tqdm", "(", "examples", ",", "desc", "=", "\"Tokenizing\"", ",", "verbose", "=", "verbose", ")", ":", "\n", "# TODO: Better solution  (Issue #48)", "\n", "        ", "if", "isinstance", "(", "example", ",", "squad_style", ".", "Example", ")", ":", "\n", "# TODO: Expose parameters  (Issue #49)", "\n", "            ", "yield", "from", "example", ".", "to_feature_list", "(", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "max_seq_length", "=", "feat_spec", ".", "max_seq_length", ",", "\n", "doc_stride", "=", "128", ",", "\n", "max_query_length", "=", "64", ",", "\n", "set_type", "=", "phase", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "yield", "example", ".", "tokenize", "(", "tokenizer", ")", ".", "featurize", "(", "tokenizer", ",", "feat_spec", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.write_task_configs.get_task_config": [[8, 18], ["task_config_templates[].copy", "task_config[].items", "isinstance", "os.path.join", "os.path.exists", "RuntimeError"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.RunConfig.copy"], ["def", "get_task_config", "(", "task_config_templates", ",", "task_name", ",", "task_data_dir", ")", ":", "\n", "    ", "task_config", "=", "task_config_templates", "[", "task_name", "]", ".", "copy", "(", ")", "\n", "task_config", "[", "\"paths\"", "]", "=", "{", "}", "\n", "for", "key", ",", "rel_path", "in", "task_config", "[", "\"rel_paths\"", "]", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "rel_path", ",", "dict", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Nested path dicts not currently supported\"", ")", "\n", "", "task_config", "[", "\"paths\"", "]", "[", "key", "]", "=", "os", ".", "path", ".", "join", "(", "task_data_dir", ",", "rel_path", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "task_config", "[", "\"paths\"", "]", "[", "key", "]", ")", "\n", "", "del", "task_config", "[", "\"rel_paths\"", "]", "\n", "return", "task_config", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.write_task_configs.create_and_write_task_config": [[20, 31], ["jiant.read_json", "write_task_configs.get_task_config", "os.makedirs", "jiant.write_json", "jiant.get_code_asset_path", "os.path.split"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_json", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.write_task_configs.get_task_config", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.write_json"], ["", "def", "create_and_write_task_config", "(", "task_name", ",", "task_data_dir", ",", "task_config_path", ")", ":", "\n", "    ", "task_config_templates", "=", "py_io", ".", "read_json", "(", "\n", "py_filesystem", ".", "get_code_asset_path", "(", "\"assets/simple_api/task_config_templates.json\"", ")", "\n", ")", "\n", "task_config", "=", "get_task_config", "(", "\n", "task_config_templates", "=", "task_config_templates", ",", "\n", "task_name", "=", "task_name", ",", "\n", "task_data_dir", "=", "task_data_dir", ",", "\n", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "split", "(", "task_config_path", ")", "[", "0", "]", ",", "exist_ok", "=", "True", ")", "\n", "py_io", ".", "write_json", "(", "task_config", ",", "task_config_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.write_task_configs.main": [[41, 46], ["write_task_configs.create_and_write_task_config"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.write_task_configs.create_and_write_task_config"], ["", "def", "main", "(", "args", ":", "RunConfiguration", ")", ":", "\n", "    ", "create_and_write_task_config", "(", "\n", "task_name", "=", "args", ".", "task_name", ",", "\n", "task_data_dir", "=", "args", ".", "task_data_dir", ",", "\n", "task_config_path", "=", "args", ".", "task_config_path", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.tokenize_and_cache.chunk_and_save": [[31, 52], ["tokenize_and_cache.iter_chunk_and_save", "tokenize_and_cache.full_chunk_and_save"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.simple.tokenize_and_cache.iter_chunk_and_save", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.simple.tokenize_and_cache.full_chunk_and_save"], ["", "def", "chunk_and_save", "(", "phase", ",", "examples", ",", "feat_spec", ",", "tokenizer", ",", "args", ":", "RunConfiguration", ")", ":", "\n", "    ", "\"\"\"Convert Examples to DataRows, optionally truncate sequences if possible, and save to disk.\n\n    Note:\n        If args.do_iter is True, processes data without loading whole dataset into memory.\n\n    Args:\n        phase (str): string identifying the data subset (e.g., train, val or test).\n        examples (list[Example]): list of task Examples.\n        feat_spec: (FeaturizationSpec): Tokenization-related metadata.\n        tokenizer: TODO  (Issue #44)\n        args (RunConfiguration): run configuration object.\n\n    \"\"\"", "\n", "if", "args", ".", "do_iter", ":", "\n", "        ", "iter_chunk_and_save", "(", "\n", "phase", "=", "phase", ",", "examples", "=", "examples", ",", "feat_spec", "=", "feat_spec", ",", "tokenizer", "=", "tokenizer", ",", "args", "=", "args", "\n", ")", "\n", "", "else", ":", "\n", "        ", "full_chunk_and_save", "(", "\n", "phase", "=", "phase", ",", "examples", "=", "examples", ",", "feat_spec", "=", "feat_spec", ",", "tokenizer", "=", "tokenizer", ",", "args", "=", "args", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.tokenize_and_cache.full_chunk_and_save": [[55, 83], ["jiant.convert_examples_to_dataset", "jiant.chunk_and_save", "jiant.smart_truncate", "os.makedirs", "jiant.write_json", "os.path.join", "args.to_dict", "os.path.join", "os.path.join", "int"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.simple.preprocessing.convert_examples_to_dataset", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.simple.tokenize_and_cache.chunk_and_save", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.simple.preprocessing.smart_truncate", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.write_json", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.ValState.to_dict"], ["", "", "def", "full_chunk_and_save", "(", "phase", ",", "examples", ",", "feat_spec", ",", "tokenizer", ",", "args", ":", "RunConfiguration", ")", ":", "\n", "    ", "\"\"\"Convert Examples to ListDataset, optionally truncate sequences if possible, and save to disk.\n\n    Args:\n        phase (str): string identifying the data subset (e.g., train, val or test).\n        examples (list[Example]): list of task Examples.\n        feat_spec: (FeaturizationSpec): Tokenization-related metadata.\n        tokenizer: TODO  (Issue #44)\n        args (RunConfiguration): run configuration object.\n\n    \"\"\"", "\n", "dataset", "=", "preprocessing", ".", "convert_examples_to_dataset", "(", "\n", "examples", "=", "examples", ",", "feat_spec", "=", "feat_spec", ",", "tokenizer", "=", "tokenizer", ",", "phase", "=", "phase", ",", "verbose", "=", "True", ",", "\n", ")", "\n", "if", "args", ".", "smart_truncate", ":", "\n", "        ", "dataset", ",", "length", "=", "preprocessing", ".", "smart_truncate", "(", "\n", "dataset", "=", "dataset", ",", "max_seq_length", "=", "args", ".", "max_seq_length", ",", "verbose", "=", "True", ",", "\n", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "phase", ")", ",", "exist_ok", "=", "True", ")", "\n", "py_io", ".", "write_json", "(", "\n", "data", "=", "{", "\"truncated_to\"", ":", "int", "(", "length", ")", "}", ",", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "phase", ",", "\"smart_truncate.json\"", ")", ",", "\n", ")", "\n", "", "shared_caching", ".", "chunk_and_save", "(", "\n", "data", "=", "dataset", ".", "data", ",", "\n", "chunk_size", "=", "args", ".", "chunk_size", ",", "\n", "data_args", "=", "args", ".", "to_dict", "(", ")", ",", "\n", "output_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "phase", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.tokenize_and_cache.iter_chunk_and_save": [[86, 118], ["jiant.iter_chunk_convert_examples_to_dataset", "jiant.MaxValidLengthRecorder", "jiant.iter_chunk_and_save", "jiant.smart_truncate_cache", "jiant.write_json", "args.to_dict", "os.path.join", "jiant.ChunkedFilesDataCache", "os.path.join", "os.path.join", "int"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.simple.preprocessing.iter_chunk_convert_examples_to_dataset", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.simple.tokenize_and_cache.iter_chunk_and_save", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.simple.preprocessing.smart_truncate_cache", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.write_json", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.ValState.to_dict"], ["", "def", "iter_chunk_and_save", "(", "phase", ",", "examples", ",", "feat_spec", ",", "tokenizer", ",", "args", ":", "RunConfiguration", ")", ":", "\n", "    ", "\"\"\"Convert Examples to DataRows, optionally truncate sequences if possible, stream to disk.\n\n    Args:\n        phase (str): string identifying the data subset (e.g., train, val or test).\n        examples (list[Example]): list of task Examples.\n        feat_spec: (FeaturizationSpec): Tokenization-related metadata.\n        tokenizer: TODO  (Issue #44)\n        args (RunConfiguration): run configuration object.\n\n    \"\"\"", "\n", "dataset_generator", "=", "preprocessing", ".", "iter_chunk_convert_examples_to_dataset", "(", "\n", "examples", "=", "examples", ",", "feat_spec", "=", "feat_spec", ",", "tokenizer", "=", "tokenizer", ",", "phase", "=", "phase", ",", "verbose", "=", "True", ",", "\n", ")", "\n", "max_valid_length_recorder", "=", "preprocessing", ".", "MaxValidLengthRecorder", "(", "args", ".", "max_seq_length", ")", "\n", "shared_caching", ".", "iter_chunk_and_save", "(", "\n", "data", "=", "dataset_generator", ",", "\n", "chunk_size", "=", "args", ".", "chunk_size", ",", "\n", "data_args", "=", "args", ".", "to_dict", "(", ")", ",", "\n", "output_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "phase", ")", ",", "\n", "recorder_callback", "=", "max_valid_length_recorder", ",", "\n", ")", "\n", "if", "args", ".", "smart_truncate", ":", "\n", "        ", "preprocessing", ".", "smart_truncate_cache", "(", "\n", "cache", "=", "shared_caching", ".", "ChunkedFilesDataCache", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "phase", ")", ")", ",", "\n", "max_seq_length", "=", "args", ".", "max_seq_length", ",", "\n", "max_valid_length", "=", "max_valid_length_recorder", ".", "max_valid_length", ",", "\n", "verbose", "=", "True", ",", "\n", ")", "\n", "py_io", ".", "write_json", "(", "\n", "data", "=", "{", "\"truncated_to\"", ":", "int", "(", "max_valid_length_recorder", ".", "max_valid_length", ")", "}", ",", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "phase", ",", "\"smart_truncate.json\"", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.tokenize_and_cache.main": [[121, 184], ["jiant.create_task_from_config_path", "jiant.build_featurization_spec", "jiant.get_tokenizer", "isinstance", "args.phases.split", "set", "tokenize_and_cache.chunk_and_save", "os.path.join", "tasks.create_task_from_config_path.get_val_examples", "tokenize_and_cache.chunk_and_save", "jiant.get_evaluation_scheme_for_task", "jiant.chunk_and_save", "os.path.join", "os.path.join", "tokenize_and_cache.chunk_and_save", "os.path.join", "jiant.write_json", "tasks.create_task_from_config_path.get_train_examples", "evaluate.get_evaluation_scheme_for_task.get_labels_from_cache_and_examples", "args.to_dict", "os.path.join", "tasks.create_task_from_config_path.get_test_examples", "os.path.join", "jiant.ChunkedFilesDataCache", "os.path.join"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.retrieval.create_task_from_config_path", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_resolution.build_featurization_spec", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_setup.get_tokenizer", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.simple.tokenize_and_cache.chunk_and_save", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.BaseSquadStyleTask.get_val_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.simple.tokenize_and_cache.chunk_and_save", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.get_evaluation_scheme_for_task", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.simple.tokenize_and_cache.chunk_and_save", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.simple.tokenize_and_cache.chunk_and_save", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.write_json", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.BaseSquadStyleTask.get_train_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.MLMEvaluationScheme.get_labels_from_cache_and_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.ValState.to_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.BaseSquadStyleTask.get_test_examples"], ["", "", "def", "main", "(", "args", ":", "RunConfiguration", ")", ":", "\n", "    ", "task", "=", "tasks", ".", "create_task_from_config_path", "(", "config_path", "=", "args", ".", "task_config_path", ",", "verbose", "=", "True", ")", "\n", "feat_spec", "=", "model_resolution", ".", "build_featurization_spec", "(", "\n", "model_type", "=", "args", ".", "model_type", ",", "max_seq_length", "=", "args", ".", "max_seq_length", ",", "\n", ")", "\n", "tokenizer", "=", "model_setup", ".", "get_tokenizer", "(", "\n", "model_type", "=", "args", ".", "model_type", ",", "tokenizer_path", "=", "args", ".", "model_tokenizer_path", ",", "\n", ")", "\n", "if", "isinstance", "(", "args", ".", "phases", ",", "str", ")", ":", "\n", "        ", "phases", "=", "args", ".", "phases", ".", "split", "(", "\",\"", ")", "\n", "", "else", ":", "\n", "        ", "phases", "=", "args", ".", "phases", "\n", "", "assert", "set", "(", "phases", ")", "<=", "{", "PHASE", ".", "TRAIN", ",", "PHASE", ".", "VAL", ",", "PHASE", ".", "TEST", "}", "\n", "\n", "paths_dict", "=", "{", "}", "\n", "\n", "if", "PHASE", ".", "TRAIN", "in", "phases", ":", "\n", "        ", "chunk_and_save", "(", "\n", "phase", "=", "PHASE", ".", "TRAIN", ",", "\n", "examples", "=", "task", ".", "get_train_examples", "(", ")", ",", "\n", "feat_spec", "=", "feat_spec", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "args", "=", "args", ",", "\n", ")", "\n", "paths_dict", "[", "\"train\"", "]", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "PHASE", ".", "TRAIN", ")", "\n", "\n", "", "if", "PHASE", ".", "VAL", "in", "phases", ":", "\n", "        ", "val_examples", "=", "task", ".", "get_val_examples", "(", ")", "\n", "chunk_and_save", "(", "\n", "phase", "=", "PHASE", ".", "VAL", ",", "\n", "examples", "=", "val_examples", ",", "\n", "feat_spec", "=", "feat_spec", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "args", "=", "args", ",", "\n", ")", "\n", "evaluation_scheme", "=", "evaluate", ".", "get_evaluation_scheme_for_task", "(", "task", ")", "\n", "shared_caching", ".", "chunk_and_save", "(", "\n", "data", "=", "evaluation_scheme", ".", "get_labels_from_cache_and_examples", "(", "\n", "task", "=", "task", ",", "\n", "cache", "=", "shared_caching", ".", "ChunkedFilesDataCache", "(", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "PHASE", ".", "VAL", ")", "\n", ")", ",", "\n", "examples", "=", "val_examples", ",", "\n", ")", ",", "\n", "chunk_size", "=", "args", ".", "chunk_size", ",", "\n", "data_args", "=", "args", ".", "to_dict", "(", ")", ",", "\n", "output_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\"val_labels\"", ")", ",", "\n", ")", "\n", "paths_dict", "[", "PHASE", ".", "VAL", "]", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "PHASE", ".", "VAL", ")", "\n", "paths_dict", "[", "\"val_labels\"", "]", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\"val_labels\"", ")", "\n", "\n", "", "if", "PHASE", ".", "TEST", "in", "phases", ":", "\n", "        ", "chunk_and_save", "(", "\n", "phase", "=", "PHASE", ".", "TEST", ",", "\n", "examples", "=", "task", ".", "get_test_examples", "(", ")", ",", "\n", "feat_spec", "=", "feat_spec", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "args", "=", "args", ",", "\n", ")", "\n", "paths_dict", "[", "PHASE", ".", "TEST", "]", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "PHASE", ".", "TEST", ")", "\n", "\n", "", "if", "not", "args", ".", "skip_write_output_paths", ":", "\n", "        ", "py_io", ".", "write_json", "(", "data", "=", "paths_dict", ",", "path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\"paths.json\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runscript.setup_runner": [[72, 138], ["jiant.create_optimizer", "jiant.raw_special_model_setup", "jiant.RunnerParameters", "jiant.JiantRunner", "jiant.only_first_process", "jiant.setup_jiant_model", "jiant.delegate_load_from_path", "jiant_model_setup.setup_jiant_model.to"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_setup.create_optimizer", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_setup.raw_special_model_setup", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.distributed.only_first_process", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.model_setup.setup_jiant_model", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.model_setup.delegate_load_from_path", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.core.BatchTuple.to"], ["", "def", "setup_runner", "(", "\n", "args", ":", "RunConfiguration", ",", "\n", "jiant_task_container", ":", "container_setup", ".", "JiantTaskContainer", ",", "\n", "quick_init_out", ",", "\n", "verbose", ":", "bool", "=", "True", ",", "\n", ")", "->", "jiant_runner", ".", "JiantRunner", ":", "\n", "    ", "\"\"\"Setup jiant model, optimizer, and runner, and return runner.\n\n    Args:\n        args (RunConfiguration): configuration carrying command line args specifying run params.\n        jiant_task_container (container_setup.JiantTaskContainer): task and sampler configs.\n        quick_init_out (QuickInitContainer): device (GPU/CPU) and logging configuration.\n        verbose: If True, enables printing configuration info (to standard out).\n\n    Returns:\n        jiant_runner.JiantRunner\n\n    \"\"\"", "\n", "# TODO document why the distributed.only_first_process() context manager is being used here.", "\n", "with", "distributed", ".", "only_first_process", "(", "local_rank", "=", "args", ".", "local_rank", ")", ":", "\n", "# load the model", "\n", "        ", "jiant_model", "=", "jiant_model_setup", ".", "setup_jiant_model", "(", "\n", "model_type", "=", "args", ".", "model_type", ",", "\n", "model_config_path", "=", "args", ".", "model_config_path", ",", "\n", "tokenizer_path", "=", "args", ".", "model_tokenizer_path", ",", "\n", "task_dict", "=", "jiant_task_container", ".", "task_dict", ",", "\n", "taskmodels_config", "=", "jiant_task_container", ".", "taskmodels_config", ",", "\n", ")", "\n", "jiant_model_setup", ".", "delegate_load_from_path", "(", "\n", "jiant_model", "=", "jiant_model", ",", "weights_path", "=", "args", ".", "model_path", ",", "load_mode", "=", "args", ".", "model_load_mode", "\n", ")", "\n", "jiant_model", ".", "to", "(", "quick_init_out", ".", "device", ")", "\n", "\n", "", "optimizer_scheduler", "=", "model_setup", ".", "create_optimizer", "(", "\n", "model", "=", "jiant_model", ",", "\n", "learning_rate", "=", "args", ".", "learning_rate", ",", "\n", "t_total", "=", "jiant_task_container", ".", "global_train_config", ".", "max_steps", ",", "\n", "warmup_steps", "=", "jiant_task_container", ".", "global_train_config", ".", "warmup_steps", ",", "\n", "warmup_proportion", "=", "None", ",", "\n", "optimizer_type", "=", "args", ".", "optimizer_type", ",", "\n", "verbose", "=", "verbose", ",", "\n", ")", "\n", "jiant_model", ",", "optimizer", "=", "model_setup", ".", "raw_special_model_setup", "(", "\n", "model", "=", "jiant_model", ",", "\n", "optimizer", "=", "optimizer_scheduler", ".", "optimizer", ",", "\n", "fp16", "=", "args", ".", "fp16", ",", "\n", "fp16_opt_level", "=", "args", ".", "fp16_opt_level", ",", "\n", "n_gpu", "=", "quick_init_out", ".", "n_gpu", ",", "\n", "local_rank", "=", "args", ".", "local_rank", ",", "\n", ")", "\n", "optimizer_scheduler", ".", "optimizer", "=", "optimizer", "\n", "rparams", "=", "jiant_runner", ".", "RunnerParameters", "(", "\n", "local_rank", "=", "args", ".", "local_rank", ",", "\n", "n_gpu", "=", "quick_init_out", ".", "n_gpu", ",", "\n", "fp16", "=", "args", ".", "fp16", ",", "\n", "max_grad_norm", "=", "args", ".", "max_grad_norm", ",", "\n", ")", "\n", "runner", "=", "jiant_runner", ".", "JiantRunner", "(", "\n", "jiant_task_container", "=", "jiant_task_container", ",", "\n", "jiant_model", "=", "jiant_model", ",", "\n", "optimizer_scheduler", "=", "optimizer_scheduler", ",", "\n", "device", "=", "quick_init_out", ".", "device", ",", "\n", "rparams", "=", "rparams", ",", "\n", "log_writer", "=", "quick_init_out", ".", "log_writer", ",", "\n", ")", "\n", "return", "runner", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runscript.run_loop": [[140, 240], ["jiant.quick_init", "print", "initialization.quick_init.log_writer.log_context", "jiant.create_jiant_task_container_from_json", "runscript.setup_runner", "jiant.CheckpointSaver", "os.remove", "setup_runner.load_state", "os.path.join", "os.path.join", "jiant.JiantMetarunner", "jiant_metarunner.JiantMetarunner.run_train_loop", "torch.save", "setup_runner.run_val", "jiant.write_val_results", "setup_runner.run_test", "jiant.write_preds", "os.path.join", "os.path.join", "jiant_metarunner.JiantMetarunner.load_state", "os.path.join", "os.path.join", "jiant.get_model_for_saving().state_dict", "jiant.save_args", "jiant.write_preds", "args.to_dict", "os.path.join", "jiant.get_model_for_saving", "os.path.basename().split", "os.path.join", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.initialization.quick_init", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.zlog.InMemoryZLogger.log_context", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.container_setup.create_jiant_task_container_from_json", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runscript.setup_runner", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.JiantMetarunner.load_state", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.metarunner.AbstractMetarunner.run_train_loop", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.CheckpointSaver.save", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.run_val", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.evaluate.write_val_results", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.run_test", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.evaluate.write_preds", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.JiantMetarunner.load_state", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_setup.OptimizerScheduler.state_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.initialization.save_args", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.evaluate.write_preds", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.ValState.to_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.torch_utils.get_model_for_saving"], ["", "def", "run_loop", "(", "args", ":", "RunConfiguration", ",", "checkpoint", "=", "None", ")", ":", "\n", "    ", "is_resumed", "=", "checkpoint", "is", "not", "None", "\n", "quick_init_out", "=", "initialization", ".", "quick_init", "(", "args", "=", "args", ",", "verbose", "=", "True", ")", "\n", "print", "(", "quick_init_out", ".", "n_gpu", ")", "\n", "with", "quick_init_out", ".", "log_writer", ".", "log_context", "(", ")", ":", "\n", "        ", "jiant_task_container", "=", "container_setup", ".", "create_jiant_task_container_from_json", "(", "\n", "jiant_task_container_config_path", "=", "args", ".", "jiant_task_container_config_path", ",", "verbose", "=", "True", ",", "\n", ")", "\n", "runner", "=", "setup_runner", "(", "\n", "args", "=", "args", ",", "\n", "jiant_task_container", "=", "jiant_task_container", ",", "\n", "quick_init_out", "=", "quick_init_out", ",", "\n", "verbose", "=", "True", ",", "\n", ")", "\n", "if", "is_resumed", ":", "\n", "            ", "runner", ".", "load_state", "(", "checkpoint", "[", "\"runner_state\"", "]", ")", "\n", "del", "checkpoint", "[", "\"runner_state\"", "]", "\n", "\n", "# allow custom checkpoint name", "\n", "", "if", "args", ".", "custom_checkpoint_name", ":", "\n", "            ", "checkpoint_name", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "f\"{args.custom_checkpoint_name}.p\"", ")", "\n", "", "else", ":", "\n", "            ", "checkpoint_name", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\"checkpoint.p\"", ")", "\n", "\n", "", "checkpoint_saver", "=", "jiant_runner", ".", "CheckpointSaver", "(", "\n", "metadata", "=", "{", "\"args\"", ":", "args", ".", "to_dict", "(", ")", "}", ",", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "checkpoint_name", ")", ",", "\n", ")", "\n", "if", "args", ".", "do_train", ":", "\n", "            ", "metarunner", "=", "jiant_metarunner", ".", "JiantMetarunner", "(", "\n", "runner", "=", "runner", ",", "\n", "save_every_steps", "=", "args", ".", "save_every_steps", ",", "\n", "eval_every_steps", "=", "args", ".", "eval_every_steps", ",", "\n", "save_checkpoint_every_steps", "=", "args", ".", "save_checkpoint_every_steps", ",", "\n", "no_improvements_for_n_evals", "=", "args", ".", "no_improvements_for_n_evals", ",", "\n", "checkpoint_saver", "=", "checkpoint_saver", ",", "\n", "output_dir", "=", "args", ".", "output_dir", ",", "\n", "verbose", "=", "True", ",", "\n", "save_best_model", "=", "args", ".", "do_save", ",", "\n", "load_best_model", "=", "True", ",", "\n", "log_writer", "=", "quick_init_out", ".", "log_writer", ",", "\n", ")", "\n", "if", "is_resumed", ":", "\n", "                ", "metarunner", ".", "load_state", "(", "checkpoint", "[", "\"metarunner_state\"", "]", ")", "\n", "del", "checkpoint", "[", "\"metarunner_state\"", "]", "\n", "", "metarunner", ".", "run_train_loop", "(", ")", "\n", "\n", "", "if", "args", ".", "do_save", ":", "\n", "# allow custom best model name", "\n", "            ", "if", "args", ".", "custom_best_name", ":", "\n", "                ", "best_model_name", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "f\"{args.custom_best_name}.p\"", ")", "\n", "", "else", ":", "\n", "                ", "best_model_name", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\"model.p\"", ")", "\n", "\n", "", "torch", ".", "save", "(", "\n", "torch_utils", ".", "get_model_for_saving", "(", "runner", ".", "jiant_model", ")", ".", "state_dict", "(", ")", ",", "\n", "best_model_name", ",", "\n", ")", "\n", "\n", "", "if", "args", ".", "do_val", ":", "\n", "            ", "val_results_dict", "=", "runner", ".", "run_val", "(", "\n", "task_name_list", "=", "runner", ".", "jiant_task_container", ".", "task_run_config", ".", "val_task_list", ",", "\n", "return_preds", "=", "args", ".", "write_val_preds", ",", "\n", ")", "\n", "jiant_evaluate", ".", "write_val_results", "(", "\n", "val_results_dict", "=", "val_results_dict", ",", "\n", "metrics_aggregator", "=", "runner", ".", "jiant_task_container", ".", "metrics_aggregator", ",", "\n", "output_dir", "=", "args", ".", "output_dir", ",", "\n", "verbose", "=", "True", ",", "\n", "val_jsonl", "=", "args", ".", "val_jsonl", ",", "\n", ")", "\n", "\n", "if", "args", ".", "args_jsonl", ":", "\n", "# match arguments with verbose results", "\n", "                ", "initialization", ".", "save_args", "(", "args", ",", "verbose", "=", "True", ",", "matched", "=", "True", ")", "\n", "\n", "", "if", "args", ".", "write_val_preds", ":", "\n", "                ", "if", "args", ".", "extract_exp_name_valpreds", ":", "\n", "                    ", "exp_name", "=", "os", ".", "path", ".", "basename", "(", "args", ".", "jiant_task_container_config_path", ")", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "val_fname", "=", "f\"val_preds_{exp_name}.p\"", "\n", "", "else", ":", "\n", "                    ", "val_fname", "=", "\"val_preds.p\"", "\n", "", "jiant_evaluate", ".", "write_preds", "(", "\n", "eval_results_dict", "=", "val_results_dict", ",", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "val_fname", ")", ",", "\n", ")", "\n", "", "", "else", ":", "\n", "            ", "assert", "not", "args", ".", "write_val_preds", "\n", "\n", "", "if", "args", ".", "write_test_preds", ":", "\n", "            ", "test_results_dict", "=", "runner", ".", "run_test", "(", "\n", "task_name_list", "=", "runner", ".", "jiant_task_container", ".", "task_run_config", ".", "test_task_list", ",", "\n", ")", "\n", "jiant_evaluate", ".", "write_preds", "(", "\n", "eval_results_dict", "=", "test_results_dict", ",", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\"test_preds.p\"", ")", ",", "\n", ")", "\n", "\n", "", "", "if", "args", ".", "delete_checkpoint_if_done", "and", "args", ".", "save_checkpoint_every_steps", ":", "\n", "        ", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "checkpoint_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runscript.run_resume": [[242, 246], ["torch.load", "RunConfiguration.from_dict", "runscript.run_loop"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.ExtendedDataClassMixin.from_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runscript.run_loop"], ["", "", "def", "run_resume", "(", "args", ":", "ResumeConfiguration", ")", ":", "\n", "    ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "checkpoint_path", ")", "\n", "args", "=", "RunConfiguration", ".", "from_dict", "(", "checkpoint", "[", "\"metadata\"", "]", "[", "\"args\"", "]", ")", "\n", "run_loop", "(", "args", "=", "args", ",", "checkpoint", "=", "checkpoint", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runscript.main": [[248, 256], ["jiant.get_mode_and_cl_args", "runscript.run_loop", "RunConfiguration.default_run_cli", "runscript.run_resume", "jiant.ModeLookupError", "ResumeConfiguration.default_run_cli"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.get_mode_and_cl_args", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runscript.run_loop", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.RunConfig.default_run_cli", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runscript.run_resume", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.RunConfig.default_run_cli"], ["", "def", "main", "(", ")", ":", "\n", "    ", "mode", ",", "cl_args", "=", "zconf", ".", "get_mode_and_cl_args", "(", ")", "\n", "if", "mode", "==", "\"run\"", ":", "\n", "        ", "run_loop", "(", "RunConfiguration", ".", "default_run_cli", "(", "cl_args", "=", "cl_args", ")", ")", "\n", "", "elif", "mode", "==", "\"continue\"", ":", "\n", "        ", "run_resume", "(", "ResumeConfiguration", ".", "default_run_cli", "(", "cl_args", "=", "cl_args", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "zconf", ".", "ModeLookupError", "(", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.task_sampler.BaseMultiTaskSampler.__init__": [[9, 14], ["isinstance", "numpy.random.RandomState"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "task_dict", ":", "dict", ",", "rng", ":", "Union", "[", "int", ",", "np", ".", "random", ".", "RandomState", ",", "None", "]", ")", ":", "\n", "        ", "self", ".", "task_dict", "=", "task_dict", "\n", "if", "isinstance", "(", "rng", ",", "int", ")", "or", "rng", "is", "None", ":", "\n", "            ", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "rng", ")", "\n", "", "self", ".", "rng", "=", "rng", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.task_sampler.BaseMultiTaskSampler.pop": [[15, 17], ["NotImplementedError"], "methods", ["None"], ["", "def", "pop", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.task_sampler.BaseMultiTaskSampler.iter": [[18, 20], ["task_sampler.BaseMultiTaskSampler.pop"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.task_sampler.TimeDependentProbMultiTaskSampler.pop"], ["", "def", "iter", "(", "self", ")", ":", "\n", "        ", "yield", "self", ".", "pop", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.task_sampler.UniformMultiTaskSampler.pop": [[23, 26], ["task_sampler.UniformMultiTaskSampler.rng.choice", "list"], "methods", ["None"], ["    ", "def", "pop", "(", "self", ")", ":", "\n", "        ", "task_name", "=", "self", ".", "rng", ".", "choice", "(", "list", "(", "self", ".", "task_dict", ")", ")", "\n", "return", "task_name", ",", "self", ".", "task_dict", "[", "task_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.task_sampler.ProportionalMultiTaskSampler.__init__": [[29, 41], ["task_sampler.BaseMultiTaskSampler.__init__", "list", "numpy.array", "task_dict.keys", "task_to_num_examples_dict.keys", "task_to_num_examples_dict.keys", "task_sampler.ProportionalMultiTaskSampler.task_num_examples.sum"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.radam.AdamW.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "task_dict", ":", "dict", ",", "\n", "rng", ":", "Union", "[", "int", ",", "np", ".", "random", ".", "RandomState", "]", ",", "\n", "task_to_num_examples_dict", ":", "dict", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "task_dict", "=", "task_dict", ",", "rng", "=", "rng", ")", "\n", "assert", "task_dict", ".", "keys", "(", ")", "==", "task_to_num_examples_dict", ".", "keys", "(", ")", "\n", "self", ".", "task_to_examples_dict", "=", "task_to_num_examples_dict", "\n", "self", ".", "task_names", "=", "list", "(", "task_to_num_examples_dict", ".", "keys", "(", ")", ")", "\n", "self", ".", "task_num_examples", "=", "np", ".", "array", "(", "[", "task_to_num_examples_dict", "[", "k", "]", "for", "k", "in", "self", ".", "task_names", "]", ")", "\n", "self", ".", "task_p", "=", "self", ".", "task_num_examples", "/", "self", ".", "task_num_examples", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.task_sampler.ProportionalMultiTaskSampler.pop": [[42, 45], ["task_sampler.ProportionalMultiTaskSampler.rng.choice"], "methods", ["None"], ["", "def", "pop", "(", "self", ")", ":", "\n", "        ", "task_name", "=", "self", ".", "rng", ".", "choice", "(", "self", ".", "task_names", ",", "p", "=", "self", ".", "task_p", ")", "\n", "return", "task_name", ",", "self", ".", "task_dict", "[", "task_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.task_sampler.SpecifiedProbMultiTaskSampler.__init__": [[48, 60], ["task_sampler.BaseMultiTaskSampler.__init__", "list", "numpy.array", "task_dict.keys", "task_to_unweighted_probs.keys", "task_to_unweighted_probs.keys", "task_sampler.SpecifiedProbMultiTaskSampler.unweighted_probs_arr.sum"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.radam.AdamW.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "task_dict", ":", "dict", ",", "\n", "rng", ":", "Union", "[", "int", ",", "np", ".", "random", ".", "RandomState", "]", ",", "\n", "task_to_unweighted_probs", ":", "dict", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "task_dict", "=", "task_dict", ",", "rng", "=", "rng", ")", "\n", "assert", "task_dict", ".", "keys", "(", ")", "==", "task_to_unweighted_probs", ".", "keys", "(", ")", "\n", "self", ".", "task_to_unweighted_probs", "=", "task_to_unweighted_probs", "\n", "self", ".", "task_names", "=", "list", "(", "task_to_unweighted_probs", ".", "keys", "(", ")", ")", "\n", "self", ".", "unweighted_probs_arr", "=", "np", ".", "array", "(", "[", "task_to_unweighted_probs", "[", "k", "]", "for", "k", "in", "self", ".", "task_names", "]", ")", "\n", "self", ".", "task_p", "=", "self", ".", "unweighted_probs_arr", "/", "self", ".", "unweighted_probs_arr", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.task_sampler.SpecifiedProbMultiTaskSampler.pop": [[61, 64], ["task_sampler.SpecifiedProbMultiTaskSampler.rng.choice"], "methods", ["None"], ["", "def", "pop", "(", "self", ")", ":", "\n", "        ", "task_name", "=", "self", ".", "rng", ".", "choice", "(", "self", ".", "task_names", ",", "p", "=", "self", ".", "task_p", ")", "\n", "return", "task_name", ",", "self", ".", "task_dict", "[", "task_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.task_sampler.TemperatureMultiTaskSampler.__init__": [[67, 84], ["task_sampler.BaseMultiTaskSampler.__init__", "list", "numpy.array", "task_dict.keys", "task_to_num_examples_dict.keys", "task_to_num_examples_dict.keys", "task_sampler.TemperatureMultiTaskSampler.task_num_examples.clip", "raw_n.sum"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.radam.AdamW.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "task_dict", ":", "dict", ",", "\n", "rng", ":", "Union", "[", "int", ",", "np", ".", "random", ".", "RandomState", "]", ",", "\n", "task_to_num_examples_dict", ":", "dict", ",", "\n", "temperature", ":", "float", ",", "\n", "examples_cap", ":", "Optional", "[", "int", "]", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "task_dict", "=", "task_dict", ",", "rng", "=", "rng", ")", "\n", "assert", "task_dict", ".", "keys", "(", ")", "==", "task_to_num_examples_dict", ".", "keys", "(", ")", "\n", "self", ".", "task_to_num_examples_dict", "=", "task_to_num_examples_dict", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "examples_cap", "=", "examples_cap", "\n", "self", ".", "task_names", "=", "list", "(", "task_to_num_examples_dict", ".", "keys", "(", ")", ")", "\n", "self", ".", "task_num_examples", "=", "np", ".", "array", "(", "[", "task_to_num_examples_dict", "[", "k", "]", "for", "k", "in", "self", ".", "task_names", "]", ")", "\n", "raw_n", "=", "self", ".", "task_num_examples", ".", "clip", "(", "max", "=", "examples_cap", ")", "**", "(", "1", "/", "self", ".", "temperature", ")", "\n", "self", ".", "task_p", "=", "raw_n", "/", "raw_n", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.task_sampler.TemperatureMultiTaskSampler.pop": [[85, 88], ["task_sampler.TemperatureMultiTaskSampler.rng.choice"], "methods", ["None"], ["", "def", "pop", "(", "self", ")", ":", "\n", "        ", "task_name", "=", "self", ".", "rng", ".", "choice", "(", "self", ".", "task_names", ",", "p", "=", "self", ".", "task_p", ")", "\n", "return", "task_name", ",", "self", ".", "task_dict", "[", "task_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.task_sampler.TimeDependentProbMultiTaskSampler.__init__": [[110, 124], ["task_sampler.BaseMultiTaskSampler.__init__", "list", "task_dict.keys", "task_to_unnormalized_prob_funcs_dict.keys", "task_to_unnormalized_prob_funcs_dict.keys"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.radam.AdamW.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "task_dict", ":", "dict", ",", "\n", "rng", ":", "Union", "[", "int", ",", "np", ".", "random", ".", "RandomState", "]", ",", "\n", "task_to_unnormalized_prob_funcs_dict", ":", "dict", ",", "\n", "max_steps", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "task_dict", "=", "task_dict", ",", "rng", "=", "rng", ")", "\n", "assert", "task_dict", ".", "keys", "(", ")", "==", "task_to_unnormalized_prob_funcs_dict", ".", "keys", "(", ")", "\n", "self", ".", "task_to_unnormalized_prob_funcs_dict", "=", "task_to_unnormalized_prob_funcs_dict", "\n", "self", ".", "max_steps", "=", "max_steps", "\n", "\n", "self", ".", "task_names", "=", "list", "(", "task_to_unnormalized_prob_funcs_dict", ".", "keys", "(", ")", ")", "\n", "self", ".", "steps", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.task_sampler.TimeDependentProbMultiTaskSampler.pop": [[125, 131], ["task_sampler.TimeDependentProbMultiTaskSampler.rng.choice", "IndexError", "task_sampler.TimeDependentProbMultiTaskSampler.get_task_p"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.task_sampler.TimeDependentProbMultiTaskSampler.get_task_p"], ["", "def", "pop", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "max_steps", "is", "not", "None", "and", "self", ".", "steps", ">=", "self", ".", "max_steps", ":", "\n", "            ", "raise", "IndexError", "(", "f\"steps ({self.steps}) > max_steps ({self.max_steps})\"", ")", "\n", "", "task_name", "=", "self", ".", "rng", ".", "choice", "(", "self", ".", "task_names", ",", "p", "=", "self", ".", "get_task_p", "(", "self", ".", "steps", ")", ")", "\n", "self", ".", "steps", "+=", "1", "\n", "return", "task_name", ",", "self", ".", "task_dict", "[", "task_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.task_sampler.TimeDependentProbMultiTaskSampler.get_task_p": [[132, 144], ["numpy.empty", "enumerate", "numpy.empty.sum", "len", "numexpr.evaluate"], "methods", ["None"], ["", "def", "get_task_p", "(", "self", ",", "steps", "=", "None", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "p_ls", "=", "np", ".", "empty", "(", "len", "(", "self", ".", "task_names", ")", ")", "\n", "\n", "# t is the variable in the numexpr expression", "\n", "t", "=", "steps", "if", "steps", "is", "not", "None", "else", "self", ".", "steps", "\n", "\n", "for", "i", ",", "task_name", "in", "enumerate", "(", "self", ".", "task_names", ")", ":", "\n", "            ", "p_ls", "[", "i", "]", "=", "numexpr", ".", "evaluate", "(", "\n", "self", ".", "task_to_unnormalized_prob_funcs_dict", "[", "task_name", "]", ",", "local_dict", "=", "{", "\"t\"", ":", "t", "}", ",", "\n", ")", "\n", "", "p_ls", "/=", "p_ls", ".", "sum", "(", ")", "\n", "return", "p_ls", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.task_sampler.TimeDependentProbMultiTaskSampler.reset_counter": [[145, 147], ["None"], "methods", ["None"], ["", "def", "reset_counter", "(", "self", ")", ":", "\n", "        ", "self", ".", "steps", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.task_sampler.BaseMetricAggregator.aggregate": [[207, 209], ["NotImplementedError"], "methods", ["None"], ["    ", "def", "aggregate", "(", "self", ",", "major_metrics_dict", ":", "Dict", "[", "str", ",", "float", "]", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.task_sampler.EqualMetricAggregator.aggregate": [[212, 214], ["numpy.mean", "major_metrics_dict.values"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.mean"], ["    ", "def", "aggregate", "(", "self", ",", "major_metrics_dict", ":", "Dict", "[", "str", ",", "float", "]", ")", ":", "\n", "        ", "return", "np", ".", "mean", "(", "[", "x", "for", "x", "in", "major_metrics_dict", ".", "values", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.task_sampler.WeightedMetricAggregator.__init__": [[217, 220], ["sum", "weights_dict.values"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "weights_dict", ":", "Dict", "[", "str", ",", "float", "]", ")", ":", "\n", "        ", "self", ".", "weights_dict", "=", "weights_dict", "\n", "self", ".", "total_weights", "=", "sum", "(", "[", "x", "for", "x", "in", "weights_dict", ".", "values", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.task_sampler.WeightedMetricAggregator.aggregate": [[221, 227], ["numpy.sum", "major_metrics_dict.items"], "methods", ["None"], ["", "def", "aggregate", "(", "self", ",", "major_metrics_dict", ":", "Dict", "[", "str", ",", "float", "]", ")", ":", "\n", "        ", "return", "(", "\n", "np", ".", "sum", "(", "\n", "[", "x", "*", "self", ".", "weights_dict", "[", "task_name", "]", "for", "task_name", ",", "x", "in", "major_metrics_dict", ".", "items", "(", ")", "]", "\n", ")", "\n", "/", "self", ".", "total_weights", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.task_sampler.create_task_sampler": [[149, 204], ["task_sampler.UniformMultiTaskSampler", "len", "task_sampler.ProportionalMultiTaskSampler", "len", "task_sampler.SpecifiedProbMultiTaskSampler", "len", "task_sampler.TemperatureMultiTaskSampler", "len", "task_sampler.TimeDependentProbMultiTaskSampler", "KeyError", "len"], "function", ["None"], ["", "", "def", "create_task_sampler", "(", "\n", "sampler_config", ":", "dict", ",", "task_dict", ":", "dict", ",", "task_to_num_examples_dict", ":", "dict", ",", "rng", "=", "None", "\n", ")", "->", "BaseMultiTaskSampler", ":", "\n", "    ", "\"\"\"Perform basic config validation, then instantiate and return the specified multitask sampler.\n\n    Args:\n        sampler_config (Dict): map containing sample config options.\n        task_dict (Dict[str, Task]): map from task name to task instance.\n        task_to_num_examples_dict (Dict[str, int]): map task names to counts of training examples.\n        rng (Union[int, np.random.RandomState, None]): random state to seed sampler.\n\n    Raises:\n        KeyError if invalid sampler type argument is provided in the sampler config.\n\n    Returns:\n        Subclass of BaseMultiTaskSampler.\n\n    \"\"\"", "\n", "sampler_type", "=", "sampler_config", "[", "\"sampler_type\"", "]", "\n", "if", "sampler_type", "==", "\"UniformMultiTaskSampler\"", ":", "\n", "        ", "assert", "len", "(", "sampler_config", ")", "==", "1", "\n", "return", "UniformMultiTaskSampler", "(", "task_dict", "=", "task_dict", ",", "rng", "=", "rng", ")", "\n", "", "elif", "sampler_type", "==", "\"ProportionalMultiTaskSampler\"", ":", "\n", "        ", "assert", "len", "(", "sampler_config", ")", "==", "1", "\n", "return", "ProportionalMultiTaskSampler", "(", "\n", "task_dict", "=", "task_dict", ",", "rng", "=", "rng", ",", "task_to_num_examples_dict", "=", "task_to_num_examples_dict", ",", "\n", ")", "\n", "", "elif", "sampler_type", "==", "\"SpecifiedProbMultiTaskSampler\"", ":", "\n", "        ", "assert", "len", "(", "sampler_config", ")", "==", "2", "\n", "return", "SpecifiedProbMultiTaskSampler", "(", "\n", "task_dict", "=", "task_dict", ",", "\n", "rng", "=", "rng", ",", "\n", "task_to_unweighted_probs", "=", "sampler_config", "[", "\"task_to_unweighted_probs\"", "]", ",", "\n", ")", "\n", "", "elif", "sampler_type", "==", "\"TemperatureMultiTaskSampler\"", ":", "\n", "        ", "assert", "len", "(", "sampler_config", ")", "==", "3", "\n", "return", "TemperatureMultiTaskSampler", "(", "\n", "task_dict", "=", "task_dict", ",", "\n", "rng", "=", "rng", ",", "\n", "task_to_num_examples_dict", "=", "task_to_num_examples_dict", ",", "\n", "temperature", "=", "sampler_config", "[", "\"temperature\"", "]", ",", "\n", "examples_cap", "=", "sampler_config", "[", "\"examples_cap\"", "]", ",", "\n", ")", "\n", "", "elif", "sampler_type", "==", "\"TimeDependentProbMultiTaskSampler\"", ":", "\n", "        ", "assert", "len", "(", "sampler_config", ")", "==", "3", "\n", "return", "TimeDependentProbMultiTaskSampler", "(", "\n", "task_dict", "=", "task_dict", ",", "\n", "rng", "=", "rng", ",", "\n", "task_to_unnormalized_prob_funcs_dict", "=", "sampler_config", "[", "\n", "\"task_to_unnormalized_prob_funcs_dict\"", "\n", "]", ",", "\n", "max_steps", "=", "sampler_config", "[", "\"max_steps\"", "]", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "KeyError", "(", "sampler_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.task_sampler.create_metric_aggregator": [[230, 249], ["task_sampler.EqualMetricAggregator", "len", "task_sampler.WeightedMetricAggregator", "KeyError", "len"], "function", ["None"], ["", "", "def", "create_metric_aggregator", "(", "metric_aggregator_config", ":", "Dict", ")", "->", "BaseMetricAggregator", ":", "\n", "    ", "\"\"\"Perform basic config validation, then instantiate and return the specified metric aggregator.\n\n    Args:\n        metric_aggregator_config (Dict): map containing metric aggregation options.\n\n    Returns:\n        Subclass of BaseMetricAggregator.\n\n    \"\"\"", "\n", "metric_aggregator_type", "=", "metric_aggregator_config", "[", "\"metric_aggregator_type\"", "]", "\n", "if", "metric_aggregator_type", "==", "\"EqualMetricAggregator\"", ":", "\n", "        ", "assert", "len", "(", "metric_aggregator_config", ")", "==", "1", "\n", "return", "EqualMetricAggregator", "(", ")", "\n", "", "elif", "metric_aggregator_type", "==", "\"WeightedMetricAggregator\"", ":", "\n", "        ", "assert", "len", "(", "metric_aggregator_config", ")", "==", "2", "\n", "return", "WeightedMetricAggregator", "(", "weights_dict", "=", "metric_aggregator_config", "[", "\"weights_dict\"", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "KeyError", "(", "metric_aggregator_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.task_sampler.compute_aggregate_major_metrics_from_results_dict": [[251, 256], ["metrics_aggregator.aggregate", "results_dict.items"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.task_sampler.WeightedMetricAggregator.aggregate"], ["", "", "def", "compute_aggregate_major_metrics_from_results_dict", "(", "metrics_aggregator", ",", "results_dict", ")", ":", "\n", "    ", "major_metrics_dict", "=", "{", "\n", "task_name", ":", "results", "[", "\"metrics\"", "]", ".", "major", "for", "task_name", ",", "results", "in", "results_dict", ".", "items", "(", ")", "\n", "}", "\n", "return", "metrics_aggregator", ".", "aggregate", "(", "major_metrics_dict", "=", "major_metrics_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.task_sampler.get_metrics_dict_from_results_dict": [[258, 260], ["results[].to_dict", "results_dict.items"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.ValState.to_dict"], ["", "def", "get_metrics_dict_from_results_dict", "(", "results_dict", ")", ":", "\n", "    ", "return", "{", "task_name", ":", "results", "[", "\"metrics\"", "]", ".", "to_dict", "(", ")", "for", "task_name", ",", "results", "in", "results_dict", ".", "items", "(", ")", "}", "\n", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.evaluate.write_val_results": [[10, 39], ["val_results_dict.items", "json.dumps", "jiant.compute_aggregate_major_metrics_from_results_dict", "print", "jiant.write_json", "task_results[].to_dict", "open", "f.write", "os.path.join", "os.path.join", "json.dumps"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.task_sampler.compute_aggregate_major_metrics_from_results_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.write_json", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.ValState.to_dict"], ["def", "write_val_results", "(", "\n", "val_results_dict", ",", "\n", "metrics_aggregator", ",", "\n", "output_dir", ",", "\n", "verbose", "=", "True", ",", "\n", "val_jsonl", "=", "False", ",", "\n", ")", ":", "\n", "    ", "full_results_to_write", "=", "{", "\n", "\"aggregated\"", ":", "jiant_task_sampler", ".", "compute_aggregate_major_metrics_from_results_dict", "(", "\n", "metrics_aggregator", "=", "metrics_aggregator", ",", "results_dict", "=", "val_results_dict", ",", "\n", ")", ",", "\n", "}", "\n", "for", "task_name", ",", "task_results", "in", "val_results_dict", ".", "items", "(", ")", ":", "\n", "        ", "task_results_to_write", "=", "{", "}", "\n", "if", "\"loss\"", "in", "task_results", ":", "\n", "            ", "task_results_to_write", "[", "\"loss\"", "]", "=", "task_results", "[", "\"loss\"", "]", "\n", "", "if", "\"metrics\"", "in", "task_results", ":", "\n", "            ", "task_results_to_write", "[", "\"metrics\"", "]", "=", "task_results", "[", "\"metrics\"", "]", ".", "to_dict", "(", ")", "\n", "", "full_results_to_write", "[", "task_name", "]", "=", "task_results_to_write", "\n", "\n", "", "metrics_str", "=", "json", ".", "dumps", "(", "full_results_to_write", ",", "indent", "=", "2", ")", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "metrics_str", ")", "\n", "\n", "", "if", "val_jsonl", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"val_metrics.jsonl\"", ")", ",", "'a'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "f\"{json.dumps(full_results_to_write)}\\n\"", ")", "\n", "", "", "else", ":", "\n", "        ", "py_io", ".", "write_json", "(", "data", "=", "full_results_to_write", ",", "path", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"val_metrics.json\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.evaluate.write_preds": [[41, 46], ["torch.save", "eval_results_dict.items"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.CheckpointSaver.save"], ["", "", "def", "write_preds", "(", "eval_results_dict", ",", "path", ")", ":", "\n", "    ", "preds_dict", "=", "{", "\n", "task_name", ":", "task_results", "[", "\"preds\"", "]", "for", "task_name", ",", "task_results", "in", "eval_results_dict", ".", "items", "(", ")", "\n", "}", "\n", "torch", ".", "save", "(", "preds_dict", ",", "path", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.container_setup.TaskmodelsConfig.get_taskmodel_kwargs": [[36, 44], ["container_setup.TaskmodelsConfig.task_to_taskmodel_map.values"], "methods", ["None"], ["def", "get_taskmodel_kwargs", "(", "self", ",", "taskmodel_name", ":", "str", ")", "->", "Optional", "[", "Dict", "]", ":", "\n", "        ", "assert", "taskmodel_name", "in", "self", ".", "task_to_taskmodel_map", ".", "values", "(", ")", "\n", "if", "self", ".", "taskmodel_config_map", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "elif", "taskmodel_name", "not", "in", "self", ".", "taskmodel_config_map", ":", "\n", "            ", "return", "None", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "taskmodel_config_map", "[", "taskmodel_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.container_setup.create_task_dict": [[66, 87], ["jiant.create_task_from_config_path", "print", "task_config_dict.items", "task_config_dict.items", "print"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.retrieval.create_task_from_config_path"], ["", "def", "create_task_dict", "(", "task_config_dict", ":", "dict", ",", "verbose", ":", "bool", "=", "True", ")", "->", "Dict", "[", "str", ",", "tasks", ".", "Task", "]", ":", "\n", "    ", "\"\"\"Make map of task name to task instances from map of task name to task config file paths.\n\n    Args:\n        task_config_dict (Dict): map from task name to task config filepath.\n        verbose (bool): True to print task config info.\n\n    Returns:\n        Dict mapping from task name to task instance.\n\n    \"\"\"", "\n", "task_dict", "=", "{", "\n", "task_name", ":", "tasks", ".", "create_task_from_config_path", "(", "config_path", "=", "task_config_path", ",", "verbose", "=", "False", ")", "\n", "for", "task_name", ",", "task_config_path", "in", "task_config_dict", ".", "items", "(", ")", "\n", "}", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "\"Creating Tasks:\"", ")", "\n", "for", "task_name", ",", "task_config_path", "in", "task_config_dict", ".", "items", "(", ")", ":", "\n", "            ", "task_class", "=", "task_dict", "[", "task_name", "]", ".", "__class__", ".", "__name__", "\n", "print", "(", "f\"    {task_name} ({task_class}): {task_config_path}\"", ")", "\n", "", "", "return", "task_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.container_setup.create_task_cache_dict": [[89, 113], ["task_cache_config_dict.items", "jiant.ChunkedFilesDataCache"], "function", ["None"], ["", "def", "create_task_cache_dict", "(", "task_cache_config_dict", ":", "Dict", ")", "->", "Dict", ":", "\n", "    ", "\"\"\"Takes a map of task cache configs, and returns map of instantiated task data cache objects.\n\n    Notes:\n        This function assumes that data is divided and stored according to phase where phase takes\n        a value of train, val, val_labels, or test.\n\n    Args:\n        task_cache_config_dict (Dict[str, Dict[str, str]]): maps of task names to cache file dirs.\n\n    Returns:\n        Dict[str, Dict[str, ChunkedFilesDataCache]] mappings from task name to task cache objects.\n\n    \"\"\"", "\n", "task_cache_dict", "=", "{", "}", "\n", "for", "task_name", ",", "task_cache_config", "in", "task_cache_config_dict", ".", "items", "(", ")", ":", "\n", "        ", "single_task_cache_dict", "=", "{", "}", "\n", "for", "phase", "in", "[", "\"train\"", ",", "\"val\"", ",", "\"val_labels\"", ",", "\"test\"", "]", ":", "\n", "            ", "if", "phase", "in", "task_cache_config", ":", "\n", "                ", "single_task_cache_dict", "[", "phase", "]", "=", "caching", ".", "ChunkedFilesDataCache", "(", "\n", "task_cache_config", "[", "phase", "]", ",", "\n", ")", "\n", "", "", "task_cache_dict", "[", "task_name", "]", "=", "single_task_cache_dict", "\n", "", "return", "task_cache_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.container_setup.get_num_train_examples": [[115, 140], ["list", "len"], "function", ["None"], ["", "def", "get_num_train_examples", "(", "task_cache_dict", ":", "Dict", ",", "train_task_list", "=", "None", ")", "->", "Dict", "[", "str", ",", "int", "]", ":", "\n", "    ", "\"\"\"Count training examples for tasks.\n\n    Args:\n        task_cache_dict: nested maps from task name to phases, and from phase to task cache object.\n        train_task_list (List): list of task names for which to count training examples.\n\n    Notes:\n        If get_num_train_examples() is called without providing train_task_list, training examples\n        for all tasks in task_cache_dict are counted by get_num_train_examples().\n\n    Returns:\n        Dict[str, int] mapping task names to the count of training examples for that task.\n\n    \"\"\"", "\n", "num_train_examples_dict", "=", "{", "}", "\n", "if", "train_task_list", "is", "None", ":", "\n", "        ", "train_task_list", "=", "list", "(", "task_cache_dict", ")", "\n", "", "for", "task_name", "in", "train_task_list", ":", "\n", "        ", "single_task_cache_dict", "=", "task_cache_dict", "[", "task_name", "]", "\n", "if", "\"train\"", "in", "single_task_cache_dict", ":", "\n", "            ", "num_train_examples_dict", "[", "task_name", "]", "=", "len", "(", "single_task_cache_dict", "[", "\"train\"", "]", ")", "\n", "", "else", ":", "\n", "            ", "num_train_examples_dict", "[", "task_name", "]", "=", "0", "\n", "", "", "return", "num_train_examples_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.container_setup.create_task_specific_configs": [[142, 165], ["task_specific_configs_dict.items", "isinstance", "TaskSpecificConfig.from_dict", "isinstance", "TypeError", "type"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.ExtendedDataClassMixin.from_dict"], ["", "def", "create_task_specific_configs", "(", "task_specific_configs_dict", ")", "->", "Dict", "[", "str", ",", "TaskSpecificConfig", "]", ":", "\n", "    ", "\"\"\"Takes task-specific configs, returns them as TaskSpecificConfig(s).\n\n    Args:\n        task_specific_configs_dict: map task name to map of task-specific config name to value.\n\n    Raises:\n        TypeError if task-specific config is not either a dict or a TaskSpecificConfig object.\n\n    Returns:\n        Dict[str, TaskSpecificConfig] map of task name to task-specific configs.\n\n    \"\"\"", "\n", "task_specific_configs", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "task_specific_configs_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "            ", "v", "=", "TaskSpecificConfig", ".", "from_dict", "(", "v", ")", "\n", "", "elif", "isinstance", "(", "v", ",", "TaskSpecificConfig", ")", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "type", "(", "v", ")", ")", "\n", "", "task_specific_configs", "[", "k", "]", "=", "v", "\n", "", "return", "task_specific_configs", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.container_setup.create_jiant_task_container": [[167, 227], ["container_setup.create_task_dict", "container_setup.create_task_cache_dict", "GlobalTrainConfig.from_dict", "container_setup.create_task_specific_configs", "TaskmodelsConfig.from_dict", "TaskRunConfig.from_dict", "container_setup.get_num_train_examples", "jiant.create_task_sampler", "jiant.create_metric_aggregator", "container_setup.JiantTaskContainer"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.container_setup.create_task_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.container_setup.create_task_cache_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.ExtendedDataClassMixin.from_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.container_setup.create_task_specific_configs", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.ExtendedDataClassMixin.from_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.ExtendedDataClassMixin.from_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.container_setup.get_num_train_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.task_sampler.create_task_sampler", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.task_sampler.create_metric_aggregator"], ["", "def", "create_jiant_task_container", "(", "\n", "task_config_path_dict", ":", "Dict", ",", "\n", "task_cache_config_dict", ":", "Dict", ",", "\n", "sampler_config", ":", "Dict", ",", "\n", "global_train_config", ":", "Dict", ",", "\n", "task_specific_configs_dict", ":", "Dict", ",", "\n", "metric_aggregator_config", ":", "Dict", ",", "\n", "taskmodels_config", ":", "Dict", ",", "\n", "task_run_config", ":", "Dict", ",", "\n", "verbose", ":", "bool", "=", "True", ",", "\n", ")", "->", "JiantTaskContainer", ":", "\n", "    ", "\"\"\"Read and interpret config files, initialize configuration objects, return JiantTaskContainer.\n\n    Args:\n        task_config_path_dict (Dict[str, str]): map of task names to task config files.\n        task_cache_config_dict (Dict[str, str]): map of task names to cache file dirs.\n        sampler_config (Dict): map containing sample config options, e.g., uniform task sampling.\n        global_train_config (Dict): map of training configs shared by all tasks (e.g., max_steps).\n        task_specific_configs_dict (Dict): map of maps mapping task names to task-specific options.\n        metric_aggregator_config (Dict): map containing task metric aggregation options.\n        taskmodels_config: maps mapping from tasks to models, and specifying task-model configs.\n        task_run_config: config determining which tasks are used in which phase (e.g., train).\n        verbose: True to print task info.\n\n    Returns:\n        JiantTaskContainer carrying components configured and set up pre-runner.\n\n    \"\"\"", "\n", "task_dict", "=", "create_task_dict", "(", "task_config_dict", "=", "task_config_path_dict", ",", "verbose", "=", "verbose", ")", "\n", "task_cache_dict", "=", "create_task_cache_dict", "(", "task_cache_config_dict", "=", "task_cache_config_dict", ")", "\n", "global_train_config", "=", "GlobalTrainConfig", ".", "from_dict", "(", "global_train_config", ")", "\n", "task_specific_config", "=", "create_task_specific_configs", "(", "\n", "task_specific_configs_dict", "=", "task_specific_configs_dict", ",", "\n", ")", "\n", "taskmodels_config", "=", "TaskmodelsConfig", ".", "from_dict", "(", "taskmodels_config", ")", "\n", "task_run_config", "=", "TaskRunConfig", ".", "from_dict", "(", "task_run_config", ")", "\n", "\n", "num_train_examples_dict", "=", "get_num_train_examples", "(", "\n", "task_cache_dict", "=", "task_cache_dict", ",", "train_task_list", "=", "task_run_config", ".", "train_task_list", ",", "\n", ")", "\n", "task_sampler", "=", "jiant_task_sampler", ".", "create_task_sampler", "(", "\n", "sampler_config", "=", "sampler_config", ",", "\n", "# task sampler samples only from the training tasks", "\n", "task_dict", "=", "{", "\n", "task_name", ":", "task_dict", "[", "task_name", "]", "for", "task_name", "in", "task_run_config", ".", "train_task_list", "\n", "}", ",", "\n", "task_to_num_examples_dict", "=", "num_train_examples_dict", ",", "\n", ")", "\n", "metric_aggregator", "=", "jiant_task_sampler", ".", "create_metric_aggregator", "(", "\n", "metric_aggregator_config", "=", "metric_aggregator_config", ",", "\n", ")", "\n", "return", "JiantTaskContainer", "(", "\n", "task_dict", "=", "task_dict", ",", "\n", "task_sampler", "=", "task_sampler", ",", "\n", "global_train_config", "=", "global_train_config", ",", "\n", "task_cache_dict", "=", "task_cache_dict", ",", "\n", "task_specific_configs", "=", "task_specific_config", ",", "\n", "taskmodels_config", "=", "taskmodels_config", ",", "\n", "task_run_config", "=", "task_run_config", ",", "\n", "metrics_aggregator", "=", "metric_aggregator", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.container_setup.create_jiant_task_container_from_dict": [[230, 243], ["container_setup.create_jiant_task_container"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.container_setup.create_jiant_task_container"], ["", "def", "create_jiant_task_container_from_dict", "(", "\n", "jiant_task_container_config_dict", ":", "Dict", ",", "verbose", ":", "bool", "=", "True", "\n", ")", "->", "JiantTaskContainer", ":", "\n", "    ", "return", "create_jiant_task_container", "(", "\n", "task_config_path_dict", "=", "jiant_task_container_config_dict", "[", "\"task_config_path_dict\"", "]", ",", "\n", "task_cache_config_dict", "=", "jiant_task_container_config_dict", "[", "\"task_cache_config_dict\"", "]", ",", "\n", "sampler_config", "=", "jiant_task_container_config_dict", "[", "\"sampler_config\"", "]", ",", "\n", "global_train_config", "=", "jiant_task_container_config_dict", "[", "\"global_train_config\"", "]", ",", "\n", "task_specific_configs_dict", "=", "jiant_task_container_config_dict", "[", "\"task_specific_configs_dict\"", "]", ",", "\n", "taskmodels_config", "=", "jiant_task_container_config_dict", "[", "\"taskmodels_config\"", "]", ",", "\n", "task_run_config", "=", "jiant_task_container_config_dict", "[", "\"task_run_config\"", "]", ",", "\n", "metric_aggregator_config", "=", "jiant_task_container_config_dict", "[", "\"metric_aggregator_config\"", "]", ",", "\n", "verbose", "=", "verbose", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.container_setup.create_jiant_task_container_from_json": [[246, 252], ["container_setup.create_jiant_task_container_from_dict", "jiant.read_json"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.container_setup.create_jiant_task_container_from_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_json"], ["", "def", "create_jiant_task_container_from_json", "(", "\n", "jiant_task_container_config_path", ":", "str", ",", "verbose", ":", "bool", "=", "True", "\n", ")", "->", "JiantTaskContainer", ":", "\n", "    ", "return", "create_jiant_task_container_from_dict", "(", "\n", "jiant_task_container_config_dict", "=", "py_io", ".", "read_json", "(", "jiant_task_container_config_path", ")", ",", "\n", "verbose", "=", "verbose", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.outputs.construct_output_from_dict": [[32, 42], ["sorted", "list", "LogitsOutput.from_dict", "struct_dict.keys", "LogitsAndLossOutput.from_dict", "EmbeddingOutput.from_dict", "ValueError"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.ExtendedDataClassMixin.from_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.ExtendedDataClassMixin.from_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.ExtendedDataClassMixin.from_dict"], ["", "def", "construct_output_from_dict", "(", "struct_dict", ":", "Dict", ")", ":", "\n", "    ", "keys", "=", "sorted", "(", "list", "(", "struct_dict", ".", "keys", "(", ")", ")", ")", "\n", "if", "keys", "==", "[", "\"logits\"", ",", "\"other\"", "]", ":", "\n", "        ", "return", "LogitsOutput", ".", "from_dict", "(", "struct_dict", ")", "\n", "", "elif", "keys", "==", "[", "\"logits\"", ",", "\"loss\"", ",", "\"other\"", "]", ":", "\n", "        ", "return", "LogitsAndLossOutput", ".", "from_dict", "(", "struct_dict", ")", "\n", "", "elif", "keys", "==", "[", "\"embedding\"", ",", "\"other\"", "]", ":", "\n", "        ", "return", "EmbeddingOutput", ".", "from_dict", "(", "struct_dict", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.write_configs.write_configs": [[6, 32], ["os.makedirs", "config_dict[].values", "config_dict[].values", "jiant.write_json", "jiant.write_json", "os.path.exists", "path_dict.values", "jiant.write_json", "os.path.join", "os.path.exists", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.write_json", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.write_json", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.write_json"], ["def", "write_configs", "(", "config_dict", ",", "base_path", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "base_path", ",", "exist_ok", "=", "True", ")", "\n", "config_keys", "=", "[", "\n", "\"task_config_path_dict\"", ",", "\n", "\"task_cache_config_dict\"", ",", "\n", "\"sampler_config\"", ",", "\n", "\"global_train_config\"", ",", "\n", "\"task_specific_configs_dict\"", ",", "\n", "\"metric_aggregator_config\"", ",", "\n", "]", "\n", "for", "path", "in", "config_dict", "[", "\"task_config_path_dict\"", "]", ".", "values", "(", ")", ":", "\n", "        ", "assert", "os", ".", "path", ".", "exists", "(", "path", ")", "\n", "", "for", "path_dict", "in", "config_dict", "[", "\"task_cache_config_dict\"", "]", ".", "values", "(", ")", ":", "\n", "        ", "for", "path", "in", "path_dict", ".", "values", "(", ")", ":", "\n", "            ", "assert", "os", ".", "path", ".", "exists", "(", "path", ")", "\n", "", "", "for", "config_key", "in", "config_keys", ":", "\n", "        ", "py_io", ".", "write_json", "(", "\n", "config_dict", "[", "config_key", "]", ",", "os", ".", "path", ".", "join", "(", "base_path", ",", "f\"{config_key}.json\"", ")", ",", "\n", ")", "\n", "", "py_io", ".", "write_json", "(", "config_dict", ",", "os", ".", "path", ".", "join", "(", "base_path", ",", "\"full.json\"", ")", ")", "\n", "py_io", ".", "write_json", "(", "\n", "{", "\n", "f\"{config_key}_path\"", ":", "os", ".", "path", ".", "join", "(", "base_path", ",", "f\"{config_key}.json\"", ")", "\n", "for", "config_key", "in", "config_keys", "\n", "}", ",", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "\"zz_full.json\"", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.test_task_sampler.test_time_dependent_prob_multitask_sampler_const_p": [[7, 25], ["jiant.TimeDependentProbMultiTaskSampler", "numpy.array_equal", "numpy.array_equal", "numpy.array_equal", "numpy.ones", "task_sampler.TimeDependentProbMultiTaskSampler.get_task_p", "task_sampler.TimeDependentProbMultiTaskSampler.get_task_p", "task_sampler.TimeDependentProbMultiTaskSampler.get_task_p"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.task_sampler.TimeDependentProbMultiTaskSampler.get_task_p", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.task_sampler.TimeDependentProbMultiTaskSampler.get_task_p", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.task_sampler.TimeDependentProbMultiTaskSampler.get_task_p"], ["def", "test_time_dependent_prob_multitask_sampler_const_p", "(", ")", ":", "\n", "    ", "sampler", "=", "task_sampler", ".", "TimeDependentProbMultiTaskSampler", "(", "\n", "task_dict", "=", "{", "\n", "\"rte\"", ":", "None", ",", "\n", "\"mnli\"", ":", "None", ",", "\n", "\"squad_v1\"", ":", "None", ",", "\n", "}", ",", "\n", "rng", "=", "0", ",", "\n", "task_to_unnormalized_prob_funcs_dict", "=", "{", "\n", "\"rte\"", ":", "\"1\"", ",", "\n", "\"mnli\"", ":", "\"1\"", ",", "\n", "\"squad_v1\"", ":", "\"1\"", ",", "\n", "}", ",", "\n", ")", "\n", "gold_p", "=", "np", ".", "ones", "(", "3", ")", "/", "3", "\n", "assert", "np", ".", "array_equal", "(", "sampler", ".", "get_task_p", "(", "0", ")", ",", "gold_p", ")", "\n", "assert", "np", ".", "array_equal", "(", "sampler", ".", "get_task_p", "(", "500", ")", ",", "gold_p", ")", "\n", "assert", "np", ".", "array_equal", "(", "sampler", ".", "get_task_p", "(", "999", ")", ",", "gold_p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.test_task_sampler.test_time_dependent_prob_multitask_sampler_variable_p": [[27, 44], ["jiant.TimeDependentProbMultiTaskSampler", "numpy.array_equal", "numpy.allclose", "numpy.allclose", "task_sampler.TimeDependentProbMultiTaskSampler.get_task_p", "task_sampler.TimeDependentProbMultiTaskSampler.get_task_p", "numpy.array", "task_sampler.TimeDependentProbMultiTaskSampler.get_task_p", "numpy.array", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.task_sampler.TimeDependentProbMultiTaskSampler.get_task_p", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.task_sampler.TimeDependentProbMultiTaskSampler.get_task_p", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.task_sampler.TimeDependentProbMultiTaskSampler.get_task_p"], ["", "def", "test_time_dependent_prob_multitask_sampler_variable_p", "(", ")", ":", "\n", "    ", "sampler", "=", "task_sampler", ".", "TimeDependentProbMultiTaskSampler", "(", "\n", "task_dict", "=", "{", "\n", "\"rte\"", ":", "None", ",", "\n", "\"mnli\"", ":", "None", ",", "\n", "\"squad_v1\"", ":", "None", ",", "\n", "}", ",", "\n", "rng", "=", "0", ",", "\n", "task_to_unnormalized_prob_funcs_dict", "=", "{", "\n", "\"rte\"", ":", "\"1\"", ",", "\n", "\"mnli\"", ":", "\"1 - t/1000\"", ",", "\n", "\"squad_v1\"", ":", "\"exp(t/1000)\"", ",", "\n", "}", ",", "\n", ")", "\n", "assert", "np", ".", "array_equal", "(", "sampler", ".", "get_task_p", "(", "0", ")", ",", "np", ".", "ones", "(", "3", ")", "/", "3", ")", "\n", "assert", "np", ".", "allclose", "(", "sampler", ".", "get_task_p", "(", "500", ")", ",", "np", ".", "array", "(", "[", "0.31758924", ",", "0.15879462", ",", "0.52361614", "]", ")", ")", "\n", "assert", "np", ".", "allclose", "(", "sampler", ".", "get_task_p", "(", "999", ")", ",", "np", ".", "array", "(", "[", "2.69065663e-01", ",", "2.69065663e-04", ",", "7.30665271e-01", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.test_task_sampler.test_time_dependent_prob_multitask_sampler_handles_max_steps": [[46, 66], ["jiant.TimeDependentProbMultiTaskSampler", "jiant.TimeDependentProbMultiTaskSampler", "range", "task_sampler.TimeDependentProbMultiTaskSampler.pop", "task_sampler.TimeDependentProbMultiTaskSampler.reset_counter", "task_sampler.TimeDependentProbMultiTaskSampler.pop", "task_sampler.TimeDependentProbMultiTaskSampler.pop", "task_sampler.TimeDependentProbMultiTaskSampler.pop", "pytest.raises", "task_sampler.TimeDependentProbMultiTaskSampler.pop"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.task_sampler.TimeDependentProbMultiTaskSampler.pop", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.task_sampler.TimeDependentProbMultiTaskSampler.reset_counter", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.task_sampler.TimeDependentProbMultiTaskSampler.pop", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.task_sampler.TimeDependentProbMultiTaskSampler.pop", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.task_sampler.TimeDependentProbMultiTaskSampler.pop", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.task_sampler.TimeDependentProbMultiTaskSampler.pop"], ["", "def", "test_time_dependent_prob_multitask_sampler_handles_max_steps", "(", ")", ":", "\n", "    ", "sampler_1", "=", "task_sampler", ".", "TimeDependentProbMultiTaskSampler", "(", "\n", "task_dict", "=", "{", "\"rte\"", ":", "None", "}", ",", "\n", "rng", "=", "0", ",", "\n", "task_to_unnormalized_prob_funcs_dict", "=", "{", "\"rte\"", ":", "\"1\"", "}", ",", "\n", ")", "\n", "sampler_2", "=", "task_sampler", ".", "TimeDependentProbMultiTaskSampler", "(", "\n", "task_dict", "=", "{", "\"rte\"", ":", "None", "}", ",", "\n", "rng", "=", "0", ",", "\n", "task_to_unnormalized_prob_funcs_dict", "=", "{", "\"rte\"", ":", "\"1\"", "}", ",", "\n", "max_steps", "=", "10", ",", "\n", ")", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "        ", "sampler_1", ".", "pop", "(", ")", "\n", "sampler_2", ".", "pop", "(", ")", "\n", "", "sampler_1", ".", "pop", "(", ")", "\n", "with", "pytest", ".", "raises", "(", "IndexError", ")", ":", "\n", "        ", "sampler_2", ".", "pop", "(", ")", "\n", "", "sampler_2", ".", "reset_counter", "(", ")", "\n", "sampler_2", ".", "pop", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.model_setup.setup_jiant_model": [[19, 63], ["jiant.shared.model_setup.ModelArchitectures.from_model_type", "jiant.get_tokenizer", "model_setup.get_ancestor_model", "model_setup.get_encoder", "jiant.JiantModel", "model_setup.create_taskmodel", "get_taskmodel_and_task_names().items", "taskmodels_config.get_taskmodel_kwargs", "model_setup.get_taskmodel_and_task_names"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_resolution.ModelArchitectures.from_model_type", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_setup.get_tokenizer", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.model_setup.get_ancestor_model", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.model_setup.get_encoder", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.model_setup.create_taskmodel", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.container_setup.TaskmodelsConfig.get_taskmodel_kwargs", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.model_setup.get_taskmodel_and_task_names"], ["model_arch", "=", "ModelArchitectures", ".", "from_model_type", "(", "model_type", ")", "\n", "tokenizer_class", "=", "resolve_tokenizer_class", "(", "model_type", ")", "\n", "if", "model_arch", "in", "[", "ModelArchitectures", ".", "BERT", "]", ":", "\n", "        ", "if", "\"-cased\"", "in", "model_type", ":", "\n", "            ", "do_lower_case", "=", "False", "\n", "", "elif", "\"-uncased\"", "in", "model_type", ":", "\n", "            ", "do_lower_case", "=", "True", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "model_type", ")", "\n", "", "", "elif", "model_arch", "in", "[", "\n", "ModelArchitectures", ".", "XLM", ",", "\n", "ModelArchitectures", ".", "ROBERTA", ",", "\n", "ModelArchitectures", ".", "XLM_ROBERTA", ",", "\n", "]", ":", "\n", "        ", "do_lower_case", "=", "False", "\n", "", "elif", "model_arch", "in", "[", "ModelArchitectures", ".", "ALBERT", "]", ":", "\n", "        ", "do_lower_case", "=", "True", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "str", "(", "tokenizer_class", ")", ")", "\n", "", "tokenizer", "=", "tokenizer_class", ".", "from_pretrained", "(", "tokenizer_path", ",", "do_lower_case", "=", "do_lower_case", ")", "\n", "return", "tokenizer", "\n", "\n", "\n", "", "class", "OptimizerScheduler", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "scheduler", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "scheduler", "=", "scheduler", "\n", "\n", "", "def", "step", "(", "self", ")", ":", "\n", "# Scheduler updates first", "\n", "        ", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "\"optimizer\"", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "\"scheduler\"", ":", "self", ".", "scheduler", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "\n", "", "def", "load_state_dict", "(", "self", ",", "state_dict", ",", "strict", "=", "True", ")", ":", "\n", "        ", "self", ".", "optimizer", ".", "load_state_dict", "(", "state_dict", "[", "\"optimizer\"", "]", ",", "strict", "=", "strict", ")", "\n", "self", ".", "scheduler", ".", "load_state_dict", "(", "state_dict", "[", "\"scheduler\"", "]", ",", "strict", "=", "strict", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.model_setup.delegate_load_from_path": [[66, 80], ["torch.load", "torch.load", "model_setup.delegate_load"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.model_setup.delegate_load"], ["learning_rate", ",", "\n", "t_total", ",", "\n", "warmup_steps", ",", "\n", "warmup_proportion", ",", "\n", "optimizer_epsilon", "=", "1e-8", ",", "\n", "optimizer_type", "=", "\"adam\"", ",", "\n", "verbose", "=", "False", ",", "\n", ")", ":", "\n", "    ", "return", "create_optimizer_from_params", "(", "\n", "named_parameters", "=", "list", "(", "model", ".", "named_parameters", "(", ")", ")", ",", "\n", "learning_rate", "=", "learning_rate", ",", "\n", "t_total", "=", "t_total", ",", "\n", "warmup_steps", "=", "warmup_steps", ",", "\n", "warmup_proportion", "=", "warmup_proportion", ",", "\n", "optimizer_epsilon", "=", "optimizer_epsilon", ",", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.model_setup.delegate_load": [[82, 125], ["model_setup.load_encoder_from_transformers_weights", "model_setup.load_encoder_from_transformers_weights", "model_setup.load_lm_heads_from_transformers_weights", "jiant_model.load_state_dict", "model_setup.load_partial_heads", "model_setup.load_partial_heads", "model_setup.load_partial_heads", "KeyError"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.model_setup.load_encoder_from_transformers_weights", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.model_setup.load_encoder_from_transformers_weights", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.model_setup.load_lm_heads_from_transformers_weights", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_setup.OptimizerScheduler.load_state_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.model_setup.load_partial_heads", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.model_setup.load_partial_heads", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.model_setup.load_partial_heads"], ["verbose", "=", "verbose", ",", "\n", ")", "\n", "\n", "\n", "", "def", "create_optimizer_from_params", "(", "\n", "named_parameters", ",", "\n", "learning_rate", ",", "\n", "t_total", ",", "\n", "warmup_steps", ",", "\n", "warmup_proportion", ",", "\n", "optimizer_epsilon", "=", "1e-8", ",", "\n", "optimizer_type", "=", "\"adam\"", ",", "\n", "verbose", "=", "False", ",", "\n", ")", ":", "\n", "# Prepare optimizer", "\n", "    ", "no_decay", "=", "[", "\n", "\"bias\"", ",", "\n", "\"LayerNorm.bias\"", ",", "\n", "\"LayerNorm.weight\"", ",", "\n", "\"adapter.down_project.weight\"", ",", "\n", "\"adapter.up_project.weight\"", ",", "\n", "\"weighted_sum.weights\"", ",", "\n", "]", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "\"No optimizer decay for:\"", ")", "\n", "for", "n", ",", "p", "in", "named_parameters", ":", "\n", "            ", "if", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", ":", "\n", "                ", "print", "(", "f\"  {n}\"", ")", "\n", "\n", "", "", "", "used_named_parameters", "=", "[", "\n", "(", "n", ",", "p", ")", "for", "n", ",", "p", "in", "named_parameters", "if", "p", ".", "requires_grad", "and", "\"weighted_sum.weights\"", "not", "in", "n", "\n", "]", "\n", "weighted_sum_params", "=", "[", "\n", "(", "n", ",", "p", ")", "for", "n", ",", "p", "in", "named_parameters", "if", "p", ".", "requires_grad", "and", "\"weighted_sum.weights\"", "in", "n", "\n", "]", "\n", "\n", "optimizer_grouped_parameters", "=", "[", "\n", "{", "\n", "\"params\"", ":", "[", "p", "for", "n", ",", "p", "in", "used_named_parameters", "if", "not", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", ",", "\n", "\"weight_decay\"", ":", "0.01", ",", "\n", "}", ",", "\n", "{", "\n", "\"params\"", ":", "[", "p", "for", "n", ",", "p", "in", "used_named_parameters", "if", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", ",", "\n", "\"weight_decay\"", ":", "0.0", ",", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.model_setup.load_encoder_from_transformers_weights": [[127, 156], ["model_setup.get_model_arch_from_encoder", "weights_dict.items", "encoder.load_state_dict", "k.startswith", "jiant.remove_prefix"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.model_setup.get_model_arch_from_encoder", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_setup.OptimizerScheduler.load_state_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.strings.remove_prefix"], ["{", "\"params\"", ":", "[", "p", "for", "n", ",", "p", "in", "weighted_sum_params", "]", ",", "\"weight_decay\"", ":", "0.0", ",", "\"lr\"", ":", "0.01", "}", ",", "\n", "]", "\n", "\n", "if", "optimizer_type", "==", "\"adam\"", ":", "\n", "        ", "if", "verbose", ":", "\n", "            ", "print", "(", "\"Using AdamW\"", ")", "\n", "", "optimizer", "=", "transformers", ".", "AdamW", "(", "\n", "optimizer_grouped_parameters", ",", "lr", "=", "learning_rate", ",", "eps", "=", "optimizer_epsilon", "\n", ")", "\n", "", "elif", "optimizer_type", "==", "\"radam\"", ":", "\n", "        ", "if", "verbose", ":", "\n", "            ", "print", "(", "\"Using RAdam\"", ")", "\n", "", "optimizer", "=", "RAdam", "(", "optimizer_grouped_parameters", ",", "lr", "=", "learning_rate", ",", "eps", "=", "optimizer_epsilon", ")", "\n", "", "else", ":", "\n", "        ", "raise", "KeyError", "(", "optimizer_type", ")", "\n", "\n", "", "warmup_steps", "=", "resolve_warmup_steps", "(", "\n", "t_total", "=", "t_total", ",", "warmup_steps", "=", "warmup_steps", ",", "warmup_proportion", "=", "warmup_proportion", ",", "\n", ")", "\n", "scheduler", "=", "transformers", ".", "get_linear_schedule_with_warmup", "(", "\n", "optimizer", ",", "num_warmup_steps", "=", "warmup_steps", ",", "num_training_steps", "=", "t_total", "\n", ")", "\n", "optimizer_scheduler", "=", "OptimizerScheduler", "(", "optimizer", "=", "optimizer", ",", "scheduler", "=", "scheduler", ")", "\n", "return", "optimizer_scheduler", "\n", "\n", "\n", "", "def", "resolve_warmup_steps", "(", "t_total", ",", "warmup_steps", ",", "warmup_proportion", ")", ":", "\n", "    ", "if", "warmup_steps", "is", "None", "and", "warmup_proportion", "is", "None", ":", "\n", "        ", "raise", "RuntimeError", "(", ")", "\n", "", "elif", "warmup_steps", "is", "not", "None", "and", "warmup_proportion", "is", "not", "None", ":", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.model_setup.load_lm_heads_from_transformers_weights": [[158, 190], ["model_setup.get_model_arch_from_jiant_model", "set", "jiant_model.taskmodels_dict.items", "list", "taskmodel.mlm_head.load_state_dict", "set.update", "isinstance", "jiant.remove_prefix", "KeyError", "weights_dict.items", "jiant.remove_prefix", "weights_dict.items"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.model_setup.get_model_arch_from_jiant_model", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_setup.OptimizerScheduler.load_state_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.ConcatenateLossAccumulator.update", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.strings.remove_prefix", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.strings.remove_prefix"], ["", "elif", "warmup_steps", "is", "None", "and", "warmup_proportion", "is", "not", "None", ":", "\n", "        ", "return", "warmup_proportion", "*", "t_total", "\n", "", "elif", "warmup_steps", "is", "not", "None", "and", "warmup_proportion", "is", "None", ":", "\n", "        ", "return", "warmup_steps", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", ")", "\n", "\n", "\n", "", "", "def", "fp16ize", "(", "model", ",", "optimizer", ",", "fp16_opt_level", ")", ":", "\n", "    ", "try", ":", "\n", "# noinspection PyUnresolvedReferences,PyPackageRequirements", "\n", "        ", "from", "apex", "import", "amp", "\n", "", "except", "ImportError", ":", "\n", "        ", "raise", "ImportError", "(", "\n", "\"Please install apex from https://www.github.com/nvidia/apex to use fp16 training.\"", "\n", ")", "\n", "", "model", ",", "optimizer", "=", "amp", ".", "initialize", "(", "model", ",", "optimizer", ",", "opt_level", "=", "fp16_opt_level", ")", "\n", "return", "model", ",", "optimizer", "\n", "\n", "\n", "", "def", "parallelize_gpu", "(", "model", ")", ":", "\n", "    ", "return", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", "\n", "\n", "\n", "", "def", "parallelize_dist", "(", "model", ",", "local_rank", ")", ":", "\n", "    ", "return", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "\n", "model", ",", "device_ids", "=", "[", "local_rank", "]", ",", "output_device", "=", "local_rank", ",", "\n", ")", "\n", "\n", "\n", "", "def", "raw_special_model_setup", "(", "model", ",", "optimizer", ",", "fp16", ",", "fp16_opt_level", ",", "n_gpu", ",", "local_rank", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.model_setup.load_partial_heads": [[192, 222], ["jiant_model.load_state_dict", "set", "list", "set", "list", "set.add", "set.add", "k.split", "k.split"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_setup.OptimizerScheduler.load_state_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.Span.add", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.shared.Span.add"], ["\n", "if", "fp16", ":", "\n", "        ", "model", ",", "optimizer", "=", "fp16ize", "(", "model", "=", "model", ",", "optimizer", "=", "optimizer", ",", "fp16_opt_level", "=", "fp16_opt_level", ")", "\n", "", "if", "n_gpu", ">", "1", ":", "\n", "        ", "model", "=", "parallelize_gpu", "(", "model", "=", "model", ")", "\n", "", "if", "local_rank", "!=", "-", "1", ":", "\n", "        ", "model", "=", "parallelize_dist", "(", "model", "=", "model", ",", "local_rank", "=", "local_rank", ")", "\n", "", "return", "model", ",", "optimizer", "\n", "\n", "\n", "", "def", "special_model_setup", "(", "\n", "model_wrapper", ",", "optimizer_scheduler", ",", "fp16", ",", "fp16_opt_level", ",", "n_gpu", ",", "local_rank", "\n", ")", ":", "\n", "    ", "model", ",", "optimizer", "=", "raw_special_model_setup", "(", "\n", "model", "=", "model_wrapper", ".", "model", ",", "\n", "optimizer", "=", "optimizer_scheduler", ".", "optimizer", ",", "\n", "fp16", "=", "fp16", ",", "\n", "fp16_opt_level", "=", "fp16_opt_level", ",", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.model_setup.create_taskmodel": [[224, 337], ["jiant.ClassificationHead", "jiant.ClassificationModel", "jiant.RegressionHead", "jiant.RegressionModel", "len", "jiant.RegressionHead", "jiant.MultipleChoiceModel", "jiant.SpanComparisonHead", "jiant.SpanComparisonModel", "jiant.TokenClassificationHead", "jiant.TokenClassificationModel", "len", "jiant.QAHead", "jiant.QAModel", "len", "jiant.MLMModel", "jiant.BertMLMHead", "jiant.EmbeddingModel", "KeyError", "jiant.RobertaMLMHead", "jiant.MeanPoolerHead", "jiant.AlbertMLMHead", "jiant.FirstPoolerHead", "KeyError", "jiant.RobertaMLMHead", "KeyError"], "function", ["None"], ["local_rank", "=", "local_rank", ",", "\n", ")", "\n", "model_wrapper", ".", "model", "=", "model", "\n", "optimizer_scheduler", ".", "optimizer", "=", "optimizer", "\n", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.model_setup.get_encoder": [[339, 367], ["KeyError"], "function", ["None"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.model_setup.get_model_arch_from_encoder": [[400, 411], ["type", "type", "type", "type", "KeyError", "type"], "function", ["None"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.model_setup.get_taskmodel_and_task_names": [[413, 429], ["task_to_taskmodel_map.items", "taskmodel_and_task_names[].append"], "function", ["None"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.model_setup.get_model_arch_from_jiant_model": [[431, 433], ["model_setup.get_model_arch_from_encoder"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.model_setup.get_model_arch_from_encoder"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.model_setup.get_ancestor_model": [[443, 460], ["transformers_class_spec.config_class.from_json_file", "transformers_class_spec.model_class"], "function", ["None"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.taskmodels.Taskmodel.__init__": [[15, 18], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.radam.AdamW.__init__"], ["    ", "def", "__init__", "(", "self", ",", "encoder", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "encoder", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.taskmodels.Taskmodel.forward": [[19, 21], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "batch", ",", "task", ",", "tokenizer", ",", "compute_loss", ":", "bool", "=", "False", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.taskmodels.ClassificationModel.__init__": [[24, 27], ["taskmodels.Taskmodel.__init__"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.radam.AdamW.__init__"], ["    ", "def", "__init__", "(", "self", ",", "encoder", ",", "classification_head", ":", "heads", ".", "ClassificationHead", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "encoder", "=", "encoder", ")", "\n", "self", ".", "classification_head", "=", "classification_head", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.taskmodels.ClassificationModel.forward": [[28, 39], ["taskmodels.get_output_from_encoder_and_batch", "taskmodels.ClassificationModel.classification_head", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss.", "jiant.proj.main.components.outputs.LogitsAndLossOutput", "jiant.proj.main.components.outputs.LogitsAndLossOutput", "jiant.proj.main.components.outputs.LogitsOutput", "jiant.proj.main.components.outputs.LogitsOutput", "taskmodels.ClassificationModel.view", "batch.label_id.view"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.taskmodels.get_output_from_encoder_and_batch"], ["", "def", "forward", "(", "self", ",", "batch", ",", "task", ",", "tokenizer", ",", "compute_loss", ":", "bool", "=", "False", ")", ":", "\n", "        ", "encoder_output", "=", "get_output_from_encoder_and_batch", "(", "encoder", "=", "self", ".", "encoder", ",", "batch", "=", "batch", ")", "\n", "logits", "=", "self", ".", "classification_head", "(", "pooled", "=", "encoder_output", ".", "pooled", ")", "\n", "if", "compute_loss", ":", "\n", "            ", "loss_fct", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "\n", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "classification_head", ".", "num_labels", ")", ",", "batch", ".", "label_id", ".", "view", "(", "-", "1", ")", ",", "\n", ")", "\n", "return", "LogitsAndLossOutput", "(", "logits", "=", "logits", ",", "loss", "=", "loss", ",", "other", "=", "encoder_output", ".", "other", ")", "\n", "", "else", ":", "\n", "            ", "return", "LogitsOutput", "(", "logits", "=", "logits", ",", "other", "=", "encoder_output", ".", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.taskmodels.RegressionModel.__init__": [[42, 45], ["taskmodels.Taskmodel.__init__"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.radam.AdamW.__init__"], ["    ", "def", "__init__", "(", "self", ",", "encoder", ",", "regression_head", ":", "heads", ".", "RegressionHead", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "encoder", "=", "encoder", ")", "\n", "self", ".", "regression_head", "=", "regression_head", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.taskmodels.RegressionModel.forward": [[46, 56], ["taskmodels.get_output_from_encoder_and_batch", "taskmodels.RegressionModel.regression_head", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss.", "jiant.proj.main.components.outputs.LogitsAndLossOutput", "jiant.proj.main.components.outputs.LogitsAndLossOutput", "jiant.proj.main.components.outputs.LogitsOutput", "jiant.proj.main.components.outputs.LogitsOutput", "taskmodels.RegressionModel.view", "batch.label.view"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.taskmodels.get_output_from_encoder_and_batch"], ["", "def", "forward", "(", "self", ",", "batch", ",", "task", ",", "tokenizer", ",", "compute_loss", ":", "bool", "=", "False", ")", ":", "\n", "        ", "encoder_output", "=", "get_output_from_encoder_and_batch", "(", "encoder", "=", "self", ".", "encoder", ",", "batch", "=", "batch", ")", "\n", "# TODO: Abuse of notation - these aren't really logits  (Issue #45)", "\n", "logits", "=", "self", ".", "regression_head", "(", "pooled", "=", "encoder_output", ".", "pooled", ")", "\n", "if", "compute_loss", ":", "\n", "            ", "loss_fct", "=", "nn", ".", "MSELoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ")", ",", "batch", ".", "label", ".", "view", "(", "-", "1", ")", ")", "\n", "return", "LogitsAndLossOutput", "(", "logits", "=", "logits", ",", "loss", "=", "loss", ",", "other", "=", "encoder_output", ".", "other", ")", "\n", "", "else", ":", "\n", "            ", "return", "LogitsOutput", "(", "logits", "=", "logits", ",", "other", "=", "encoder_output", ".", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.taskmodels.MultipleChoiceModel.__init__": [[59, 63], ["taskmodels.Taskmodel.__init__"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.radam.AdamW.__init__"], ["    ", "def", "__init__", "(", "self", ",", "encoder", ",", "num_choices", ":", "int", ",", "choice_scoring_head", ":", "heads", ".", "RegressionHead", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "encoder", "=", "encoder", ")", "\n", "self", ".", "num_choices", "=", "num_choices", "\n", "self", ".", "choice_scoring_head", "=", "choice_scoring_head", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.taskmodels.MultipleChoiceModel.forward": [[64, 103], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "taskmodels.get_output_from_encoder", "taskmodels.MultipleChoiceModel.choice_scoring_head", "choice_score_list.append", "encoder_output_other_ls.append", "range", "tuple", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss.", "jiant.proj.main.components.outputs.LogitsAndLossOutput", "jiant.proj.main.components.outputs.LogitsAndLossOutput", "jiant.proj.main.components.outputs.LogitsOutput", "jiant.proj.main.components.outputs.LogitsOutput", "len", "tuple.append", "taskmodels.MultipleChoiceModel.unsqueeze().squeeze", "torch.cat.view", "torch.cat.view", "batch.label_id.view", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "taskmodels.MultipleChoiceModel.unsqueeze", "range", "len"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.taskmodels.get_output_from_encoder"], ["", "def", "forward", "(", "self", ",", "batch", ",", "task", ",", "tokenizer", ",", "compute_loss", ":", "bool", "=", "False", ")", ":", "\n", "        ", "input_ids", "=", "batch", ".", "input_ids", "\n", "segment_ids", "=", "batch", ".", "segment_ids", "\n", "input_mask", "=", "batch", ".", "input_mask", "\n", "\n", "choice_score_list", "=", "[", "]", "\n", "encoder_output_other_ls", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_choices", ")", ":", "\n", "            ", "encoder_output", "=", "get_output_from_encoder", "(", "\n", "encoder", "=", "self", ".", "encoder", ",", "\n", "input_ids", "=", "input_ids", "[", ":", ",", "i", "]", ",", "\n", "segment_ids", "=", "segment_ids", "[", ":", ",", "i", "]", ",", "\n", "input_mask", "=", "input_mask", "[", ":", ",", "i", "]", ",", "\n", ")", "\n", "choice_score", "=", "self", ".", "choice_scoring_head", "(", "pooled", "=", "encoder_output", ".", "pooled", ")", "\n", "choice_score_list", ".", "append", "(", "choice_score", ")", "\n", "encoder_output_other_ls", ".", "append", "(", "encoder_output", ".", "other", ")", "\n", "\n", "", "reshaped_outputs", "=", "[", "]", "\n", "if", "encoder_output_other_ls", "[", "0", "]", ":", "\n", "            ", "for", "j", "in", "range", "(", "len", "(", "encoder_output_other_ls", "[", "0", "]", ")", ")", ":", "\n", "                ", "reshaped_outputs", ".", "append", "(", "\n", "[", "\n", "torch", ".", "stack", "(", "[", "misc", "[", "j", "]", "[", "layer_i", "]", "for", "misc", "in", "encoder_output_other_ls", "]", ",", "dim", "=", "1", ")", "\n", "for", "layer_i", "in", "range", "(", "len", "(", "encoder_output_other_ls", "[", "0", "]", "[", "0", "]", ")", ")", "\n", "]", "\n", ")", "\n", "", "reshaped_outputs", "=", "tuple", "(", "reshaped_outputs", ")", "\n", "\n", "", "logits", "=", "torch", ".", "cat", "(", "\n", "[", "choice_score", ".", "unsqueeze", "(", "1", ")", ".", "squeeze", "(", "-", "1", ")", "for", "choice_score", "in", "choice_score_list", "]", ",", "dim", "=", "1", "\n", ")", "\n", "\n", "if", "compute_loss", ":", "\n", "            ", "loss_fct", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_choices", ")", ",", "batch", ".", "label_id", ".", "view", "(", "-", "1", ")", ")", "\n", "return", "LogitsAndLossOutput", "(", "logits", "=", "logits", ",", "loss", "=", "loss", ",", "other", "=", "reshaped_outputs", ")", "\n", "", "else", ":", "\n", "            ", "return", "LogitsOutput", "(", "logits", "=", "logits", ",", "other", "=", "reshaped_outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.taskmodels.SpanComparisonModel.__init__": [[106, 109], ["taskmodels.Taskmodel.__init__"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.radam.AdamW.__init__"], ["    ", "def", "__init__", "(", "self", ",", "encoder", ",", "span_comparison_head", ":", "heads", ".", "SpanComparisonHead", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "encoder", "=", "encoder", ")", "\n", "self", ".", "span_comparison_head", "=", "span_comparison_head", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.taskmodels.SpanComparisonModel.forward": [[110, 121], ["taskmodels.get_output_from_encoder_and_batch", "taskmodels.SpanComparisonModel.span_comparison_head", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss.", "jiant.proj.main.components.outputs.LogitsAndLossOutput", "jiant.proj.main.components.outputs.LogitsAndLossOutput", "jiant.proj.main.components.outputs.LogitsOutput", "jiant.proj.main.components.outputs.LogitsOutput", "taskmodels.SpanComparisonModel.view", "batch.label_id.view"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.taskmodels.get_output_from_encoder_and_batch"], ["", "def", "forward", "(", "self", ",", "batch", ",", "task", ",", "tokenizer", ",", "compute_loss", ":", "bool", "=", "False", ")", ":", "\n", "        ", "encoder_output", "=", "get_output_from_encoder_and_batch", "(", "encoder", "=", "self", ".", "encoder", ",", "batch", "=", "batch", ")", "\n", "logits", "=", "self", ".", "span_comparison_head", "(", "unpooled", "=", "encoder_output", ".", "unpooled", ",", "spans", "=", "batch", ".", "spans", ")", "\n", "if", "compute_loss", ":", "\n", "            ", "loss_fct", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "\n", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "span_comparison_head", ".", "num_labels", ")", ",", "batch", ".", "label_id", ".", "view", "(", "-", "1", ")", ",", "\n", ")", "\n", "return", "LogitsAndLossOutput", "(", "logits", "=", "logits", ",", "loss", "=", "loss", ",", "other", "=", "encoder_output", ".", "other", ")", "\n", "", "else", ":", "\n", "            ", "return", "LogitsOutput", "(", "logits", "=", "logits", ",", "other", "=", "encoder_output", ".", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.taskmodels.TokenClassificationModel.__init__": [[126, 129], ["taskmodels.Taskmodel.__init__"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.radam.AdamW.__init__"], ["def", "__init__", "(", "self", ",", "encoder", ",", "token_classification_head", ":", "heads", ".", "TokenClassificationHead", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "encoder", "=", "encoder", ")", "\n", "self", ".", "token_classification_head", "=", "token_classification_head", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.taskmodels.TokenClassificationModel.forward": [[130, 142], ["taskmodels.get_output_from_encoder_and_batch", "taskmodels.TokenClassificationModel.token_classification_head", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss.", "jiant.proj.main.components.outputs.LogitsAndLossOutput", "jiant.proj.main.components.outputs.LogitsAndLossOutput", "jiant.proj.main.components.outputs.LogitsOutput", "jiant.proj.main.components.outputs.LogitsOutput", "batch.label_mask.view", "taskmodels.TokenClassificationModel.view", "batch.label_ids.view"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.taskmodels.get_output_from_encoder_and_batch"], ["", "def", "forward", "(", "self", ",", "batch", ",", "task", ",", "tokenizer", ",", "compute_loss", ":", "bool", "=", "False", ")", ":", "\n", "        ", "encoder_output", "=", "get_output_from_encoder_and_batch", "(", "encoder", "=", "self", ".", "encoder", ",", "batch", "=", "batch", ")", "\n", "logits", "=", "self", ".", "token_classification_head", "(", "unpooled", "=", "encoder_output", ".", "unpooled", ")", "\n", "if", "compute_loss", ":", "\n", "            ", "loss_fct", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "active_loss", "=", "batch", ".", "label_mask", ".", "view", "(", "-", "1", ")", "==", "1", "\n", "active_logits", "=", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "token_classification_head", ".", "num_labels", ")", "[", "active_loss", "]", "\n", "active_labels", "=", "batch", ".", "label_ids", ".", "view", "(", "-", "1", ")", "[", "active_loss", "]", "\n", "loss", "=", "loss_fct", "(", "active_logits", ",", "active_labels", ")", "\n", "return", "LogitsAndLossOutput", "(", "logits", "=", "logits", ",", "loss", "=", "loss", ",", "other", "=", "encoder_output", ".", "other", ")", "\n", "", "else", ":", "\n", "            ", "return", "LogitsOutput", "(", "logits", "=", "logits", ",", "other", "=", "encoder_output", ".", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.taskmodels.QAModel.__init__": [[145, 148], ["taskmodels.Taskmodel.__init__"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.radam.AdamW.__init__"], ["    ", "def", "__init__", "(", "self", ",", "encoder", ",", "qa_head", ":", "heads", ".", "QAHead", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "encoder", "=", "encoder", ")", "\n", "self", ".", "qa_head", "=", "qa_head", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.taskmodels.QAModel.forward": [[149, 161], ["taskmodels.get_output_from_encoder_and_batch", "taskmodels.QAModel.qa_head", "taskmodels.compute_qa_loss", "jiant.proj.main.components.outputs.LogitsAndLossOutput", "jiant.proj.main.components.outputs.LogitsAndLossOutput", "jiant.proj.main.components.outputs.LogitsOutput", "jiant.proj.main.components.outputs.LogitsOutput"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.taskmodels.get_output_from_encoder_and_batch", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.taskmodels.compute_qa_loss"], ["", "def", "forward", "(", "self", ",", "batch", ",", "task", ",", "tokenizer", ",", "compute_loss", ":", "bool", "=", "False", ")", ":", "\n", "        ", "encoder_output", "=", "get_output_from_encoder_and_batch", "(", "encoder", "=", "self", ".", "encoder", ",", "batch", "=", "batch", ")", "\n", "logits", "=", "self", ".", "qa_head", "(", "unpooled", "=", "encoder_output", ".", "unpooled", ")", "\n", "if", "compute_loss", ":", "\n", "            ", "loss", "=", "compute_qa_loss", "(", "\n", "logits", "=", "logits", ",", "\n", "start_positions", "=", "batch", ".", "start_position", ",", "\n", "end_positions", "=", "batch", ".", "end_position", ",", "\n", ")", "\n", "return", "LogitsAndLossOutput", "(", "logits", "=", "logits", ",", "loss", "=", "loss", ",", "other", "=", "encoder_output", ".", "other", ")", "\n", "", "else", ":", "\n", "            ", "return", "LogitsOutput", "(", "logits", "=", "logits", ",", "other", "=", "encoder_output", ".", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.taskmodels.MLMModel.__init__": [[164, 167], ["taskmodels.Taskmodel.__init__"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.radam.AdamW.__init__"], ["    ", "def", "__init__", "(", "self", ",", "encoder", ",", "mlm_head", ":", "heads", ".", "BaseMLMHead", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "encoder", "=", "encoder", ")", "\n", "self", ".", "mlm_head", "=", "mlm_head", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.taskmodels.MLMModel.forward": [[168, 184], ["batch.get_masked", "taskmodels.get_output_from_encoder", "taskmodels.MLMModel.mlm_head", "taskmodels.compute_mlm_loss", "jiant.proj.main.components.outputs.LogitsAndLossOutput", "jiant.proj.main.components.outputs.LogitsAndLossOutput", "jiant.proj.main.components.outputs.LogitsOutput", "jiant.proj.main.components.outputs.LogitsOutput"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.mlm.Batch.get_masked", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.taskmodels.get_output_from_encoder", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.taskmodels.compute_mlm_loss"], ["", "def", "forward", "(", "self", ",", "batch", ",", "task", ",", "tokenizer", ",", "compute_loss", ":", "bool", "=", "False", ")", ":", "\n", "        ", "masked_batch", "=", "batch", ".", "get_masked", "(", "\n", "mlm_probability", "=", "task", ".", "mlm_probability", ",", "tokenizer", "=", "tokenizer", ",", "do_mask", "=", "task", ".", "do_mask", ",", "\n", ")", "\n", "encoder_output", "=", "get_output_from_encoder", "(", "\n", "encoder", "=", "self", ".", "encoder", ",", "\n", "input_ids", "=", "masked_batch", ".", "masked_input_ids", ",", "\n", "segment_ids", "=", "masked_batch", ".", "segment_ids", ",", "\n", "input_mask", "=", "masked_batch", ".", "input_mask", ",", "\n", ")", "\n", "logits", "=", "self", ".", "mlm_head", "(", "unpooled", "=", "encoder_output", ".", "unpooled", ")", "\n", "if", "compute_loss", ":", "\n", "            ", "loss", "=", "compute_mlm_loss", "(", "logits", "=", "logits", ",", "masked_lm_labels", "=", "masked_batch", ".", "masked_lm_labels", ")", "\n", "return", "LogitsAndLossOutput", "(", "logits", "=", "logits", ",", "loss", "=", "loss", ",", "other", "=", "encoder_output", ".", "other", ")", "\n", "", "else", ":", "\n", "            ", "return", "LogitsOutput", "(", "logits", "=", "logits", ",", "other", "=", "encoder_output", ".", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.taskmodels.EmbeddingModel.__init__": [[187, 191], ["taskmodels.Taskmodel.__init__"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.radam.AdamW.__init__"], ["    ", "def", "__init__", "(", "self", ",", "encoder", ",", "pooler_head", ":", "heads", ".", "AbstractPoolerHead", ",", "layer", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "encoder", "=", "encoder", ")", "\n", "self", ".", "pooler_head", "=", "pooler_head", "\n", "self", ".", "layer", "=", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.taskmodels.EmbeddingModel.forward": [[192, 216], ["jiant.utils.python.datastructures.take_one", "jiant.utils.python.datastructures.take_one", "isinstance", "jiant.output_hidden_states_context", "jiant.output_hidden_states_context", "taskmodels.get_output_from_encoder_and_batch", "taskmodels.EmbeddingModel.pooler_head", "isinstance", "jiant.proj.main.components.outputs.LogitsAndLossOutput", "jiant.proj.main.components.outputs.LogitsAndLossOutput", "jiant.proj.main.components.outputs.LogitsOutput", "jiant.proj.main.components.outputs.LogitsOutput", "taskmodels.EmbeddingModel.pooler_head", "TypeError", "type", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.take_one", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.take_one", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.transformer_utils.output_hidden_states_context", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.transformer_utils.output_hidden_states_context", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.taskmodels.get_output_from_encoder_and_batch"], ["", "def", "forward", "(", "self", ",", "batch", ",", "task", ",", "tokenizer", ",", "compute_loss", ":", "bool", "=", "False", ")", ":", "\n", "        ", "with", "transformer_utils", ".", "output_hidden_states_context", "(", "self", ".", "encoder", ")", ":", "\n", "            ", "encoder_output", "=", "get_output_from_encoder_and_batch", "(", "encoder", "=", "self", ".", "encoder", ",", "batch", "=", "batch", ")", "\n", "# A tuple of layers of hidden states", "\n", "", "hidden_states", "=", "take_one", "(", "encoder_output", ".", "other", ")", "\n", "layer_hidden_states", "=", "hidden_states", "[", "self", ".", "layer", "]", "\n", "\n", "if", "isinstance", "(", "self", ".", "pooler_head", ",", "heads", ".", "MeanPoolerHead", ")", ":", "\n", "            ", "logits", "=", "self", ".", "pooler_head", "(", "unpooled", "=", "layer_hidden_states", ",", "input_mask", "=", "batch", ".", "input_mask", ")", "\n", "", "elif", "isinstance", "(", "self", ".", "pooler_head", ",", "heads", ".", "FirstPoolerHead", ")", ":", "\n", "            ", "logits", "=", "self", ".", "pooler_head", "(", "layer_hidden_states", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "type", "(", "self", ".", "pooler_head", ")", ")", "\n", "\n", "# TODO: Abuse of notation - these aren't really logits  (Issue #45)", "\n", "", "if", "compute_loss", ":", "\n", "# TODO: make this optional?   (Issue #45)", "\n", "            ", "return", "LogitsAndLossOutput", "(", "\n", "logits", "=", "logits", ",", "\n", "loss", "=", "torch", ".", "tensor", "(", "[", "0.0", "]", ")", ",", "# This is a horrible hack", "\n", "other", "=", "encoder_output", ".", "other", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "return", "LogitsOutput", "(", "logits", "=", "logits", ",", "other", "=", "encoder_output", ".", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.taskmodels.get_output_from_encoder_and_batch": [[226, 242], ["taskmodels.get_output_from_encoder"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.taskmodels.get_output_from_encoder"], ["", "def", "get_output_from_encoder_and_batch", "(", "encoder", ",", "batch", ")", "->", "EncoderOutput", ":", "\n", "    ", "\"\"\"Pass batch to encoder, return encoder model output.\n\n    Args:\n        encoder: bare model outputting raw hidden-states without any specific head.\n        batch: Batch object (containing token indices, token type ids, and attention mask).\n\n    Returns:\n        EncoderOutput containing pooled and unpooled model outputs as well as any other outputs.\n\n    \"\"\"", "\n", "return", "get_output_from_encoder", "(", "\n", "encoder", "=", "encoder", ",", "\n", "input_ids", "=", "batch", ".", "input_ids", ",", "\n", "segment_ids", "=", "batch", ".", "segment_ids", ",", "\n", "input_mask", "=", "batch", ".", "input_mask", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.taskmodels.get_output_from_encoder": [[245, 269], ["encoder", "len", "taskmodels.EncoderOutput", "len", "taskmodels.EncoderOutput", "RuntimeError"], "function", ["None"], ["", "def", "get_output_from_encoder", "(", "encoder", ",", "input_ids", ",", "segment_ids", ",", "input_mask", ")", "->", "EncoderOutput", ":", "\n", "    ", "\"\"\"Pass inputs to encoder, return encoder output.\n\n    Args:\n        encoder: bare model outputting raw hidden-states without any specific head.\n        input_ids: token indices (see huggingface.co/transformers/glossary.html#input-ids).\n        segment_ids: token type ids (see huggingface.co/transformers/glossary.html#token-type-ids).\n        input_mask: attention mask (see huggingface.co/transformers/glossary.html#attention-mask).\n\n    Raises:\n        RuntimeError if encoder output contains less than 2 elements.\n\n    Returns:\n        EncoderOutput containing pooled and unpooled model outputs as well as any other outputs.\n\n    \"\"\"", "\n", "output", "=", "encoder", "(", "input_ids", "=", "input_ids", ",", "token_type_ids", "=", "segment_ids", ",", "attention_mask", "=", "input_mask", ")", "\n", "if", "len", "(", "output", ")", "==", "2", ":", "\n", "        ", "return", "EncoderOutput", "(", "pooled", "=", "output", "[", "1", "]", ",", "unpooled", "=", "output", "[", "0", "]", ",", ")", "\n", "", "elif", "len", "(", "output", ")", ">", "2", ":", "\n", "# Extend later with attention, hidden_acts, etc", "\n", "        ", "return", "EncoderOutput", "(", "pooled", "=", "output", "[", "1", "]", ",", "unpooled", "=", "output", "[", "0", "]", ",", "other", "=", "output", "[", "2", ":", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.taskmodels.compute_mlm_loss": [[271, 275], ["torch.CrossEntropyLoss", "nn.CrossEntropyLoss.", "logits.view", "masked_lm_labels.view"], "function", ["None"], ["", "", "def", "compute_mlm_loss", "(", "logits", ",", "masked_lm_labels", ")", ":", "\n", "    ", "vocab_size", "=", "logits", ".", "shape", "[", "-", "1", "]", "\n", "loss_fct", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "return", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ",", "vocab_size", ")", ",", "masked_lm_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.taskmodels.compute_qa_loss": [[277, 298], ["start_logits.size", "start_positions.squeeze.clamp_", "end_positions.squeeze.clamp_", "torch.CrossEntropyLoss", "nn.CrossEntropyLoss.", "nn.CrossEntropyLoss.", "len", "start_positions.squeeze.squeeze", "len", "end_positions.squeeze.squeeze", "start_positions.squeeze.size", "end_positions.squeeze.size"], "function", ["None"], ["", "def", "compute_qa_loss", "(", "logits", ",", "start_positions", ",", "end_positions", ")", ":", "\n", "# Do we want to keep them as 1 tensor, or multiple?", "\n", "# bs x 2 x seq_len x 1", "\n", "\n", "    ", "start_logits", ",", "end_logits", "=", "logits", "[", ":", ",", "0", "]", ",", "logits", "[", ":", ",", "1", "]", "\n", "# Taken from: RobertaForQuestionAnswering", "\n", "# If we are on multi-GPU, split add a dimension", "\n", "if", "len", "(", "start_positions", ".", "size", "(", ")", ")", ">", "1", ":", "\n", "        ", "start_positions", "=", "start_positions", ".", "squeeze", "(", "-", "1", ")", "\n", "", "if", "len", "(", "end_positions", ".", "size", "(", ")", ")", ">", "1", ":", "\n", "        ", "end_positions", "=", "end_positions", ".", "squeeze", "(", "-", "1", ")", "\n", "# sometimes the start/end positions are outside our model inputs, we ignore these terms", "\n", "", "ignored_index", "=", "start_logits", ".", "size", "(", "1", ")", "\n", "start_positions", ".", "clamp_", "(", "0", ",", "ignored_index", ")", "\n", "end_positions", ".", "clamp_", "(", "0", ",", "ignored_index", ")", "\n", "\n", "loss_fct", "=", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "ignored_index", ")", "\n", "start_loss", "=", "loss_fct", "(", "start_logits", ",", "start_positions", ")", "\n", "end_loss", "=", "loss_fct", "(", "end_logits", ",", "end_positions", ")", "\n", "total_loss", "=", "(", "start_loss", "+", "end_loss", ")", "/", "2", "\n", "return", "total_loss", "\n", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.primary.JiantModel.__init__": [[11, 25], ["torch.Module.__init__", "torch.ModuleDict"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.radam.AdamW.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "task_dict", ":", "Dict", "[", "str", ",", "tasks", ".", "Task", "]", ",", "\n", "encoder", ":", "nn", ".", "Module", ",", "\n", "taskmodels_dict", ":", "Dict", "[", "str", ",", "taskmodels", ".", "Taskmodel", "]", ",", "\n", "task_to_taskmodel_map", ":", "Dict", "[", "str", ",", "str", "]", ",", "\n", "tokenizer", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "task_dict", "=", "task_dict", "\n", "self", ".", "encoder", "=", "encoder", "\n", "self", ".", "taskmodels_dict", "=", "nn", ".", "ModuleDict", "(", "taskmodels_dict", ")", "\n", "self", ".", "task_to_taskmodel_map", "=", "task_to_taskmodel_map", "\n", "self", ".", "tokenizer", "=", "tokenizer", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.primary.JiantModel.forward": [[26, 53], ["isinstance", "isinstance", "taskmodel().to_dict", "task.Batch.from_dict", "taskmodel"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.ValState.to_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.ExtendedDataClassMixin.from_dict"], ["", "def", "forward", "(", "self", ",", "batch", ":", "tasks", ".", "BatchMixin", ",", "task", ":", "tasks", ".", "Task", ",", "compute_loss", ":", "bool", "=", "False", ")", ":", "\n", "        ", "\"\"\"Calls to this forward method are delegated to the forward of the appropriate taskmodel.\n\n        When JiantModel forward is called, the task name from the task argument is used as a key\n        to select the appropriate submodule/taskmodel, and that taskmodel's forward is called.\n\n        Args:\n            batch (tasks.BatchMixin): model input.\n            task (tasks.Task): task to which to delegate the forward call.\n            compute_loss (bool): whether to calculate and return the loss.\n\n        Returns:\n            Dict containing the model output, optionally including the loss.\n\n        \"\"\"", "\n", "if", "isinstance", "(", "batch", ",", "dict", ")", ":", "\n", "            ", "batch", "=", "task", ".", "Batch", ".", "from_dict", "(", "batch", ")", "\n", "", "if", "isinstance", "(", "task", ",", "str", ")", ":", "\n", "            ", "task_name", "=", "task", "\n", "task", "=", "self", ".", "task_dict", "[", "task", "]", "\n", "", "else", ":", "\n", "            ", "task_name", "=", "task", ".", "name", "\n", "task", "=", "task", "\n", "", "taskmodel_key", "=", "self", ".", "task_to_taskmodel_map", "[", "task_name", "]", "\n", "taskmodel", "=", "self", ".", "taskmodels_dict", "[", "taskmodel_key", "]", "\n", "return", "taskmodel", "(", "\n", "batch", "=", "batch", ",", "task", "=", "task", ",", "tokenizer", "=", "self", ".", "tokenizer", ",", "compute_loss", "=", "compute_loss", ",", "\n", ")", ".", "to_dict", "(", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.primary.wrap_jiant_forward": [[56, 88], ["isinstance", "isinstance", "jiant.proj.main.components.outputs.construct_output_from_dict", "jiant_model", "jiant.proj.main.components.outputs.construct_output_from_dict.loss.mean", "batch.to_dict"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.outputs.construct_output_from_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.mean", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.ValState.to_dict"], ["", "", "def", "wrap_jiant_forward", "(", "\n", "jiant_model", ":", "Union", "[", "JiantModel", ",", "nn", ".", "DataParallel", "]", ",", "\n", "batch", ":", "tasks", ".", "BatchMixin", ",", "\n", "task", ":", "tasks", ".", "Task", ",", "\n", "compute_loss", ":", "bool", "=", "False", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Wrapper to repackage model inputs using dictionaries for compatibility with DataParallel.\n\n    Wrapper that converts batches (type tasks.BatchMixin) to dictionaries before delegating to\n    JiantModel's forward method, and then converts the resulting model output dict into the\n    appropriate model output dataclass.\n\n    Args:\n        jiant_model (Union[JiantModel, nn.DataParallel]):\n        batch (tasks.BatchMixin): model input batch.\n        task (tasks.Task): Task object passed for access in the taskmodel.\n        compute_loss (bool): True if loss should be computed, False otherwise.\n\n    Returns:\n        Union[LogitsOutput, LogitsAndLossOutput, EmbeddingOutput]: model output dataclass.\n\n    \"\"\"", "\n", "assert", "isinstance", "(", "jiant_model", ",", "(", "JiantModel", ",", "nn", ".", "DataParallel", ")", ")", "\n", "is_multi_gpu", "=", "isinstance", "(", "jiant_model", ",", "nn", ".", "DataParallel", ")", "\n", "model_output", "=", "construct_output_from_dict", "(", "\n", "jiant_model", "(", "\n", "batch", "=", "batch", ".", "to_dict", "(", ")", "if", "is_multi_gpu", "else", "batch", ",", "task", "=", "task", ",", "compute_loss", "=", "compute_loss", ",", "\n", ")", "\n", ")", "\n", "if", "is_multi_gpu", ":", "\n", "        ", "model_output", ".", "loss", "=", "model_output", ".", "loss", ".", "mean", "(", ")", "\n", "", "return", "model_output", "\n", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.heads.ClassificationHead.__init__": [[20, 27], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.radam.AdamW.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_size", ",", "hidden_dropout_prob", ",", "num_labels", ")", ":", "\n", "        ", "\"\"\"From RobertaClassificationHead\"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "hidden_dropout_prob", ")", "\n", "self", ".", "out_proj", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "num_labels", ")", "\n", "self", ".", "num_labels", "=", "num_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.heads.ClassificationHead.forward": [[28, 35], ["heads.ClassificationHead.dropout", "heads.ClassificationHead.dense", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "heads.ClassificationHead.dropout", "heads.ClassificationHead.out_proj"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pooled", ")", ":", "\n", "        ", "x", "=", "self", ".", "dropout", "(", "pooled", ")", "\n", "x", "=", "self", ".", "dense", "(", "x", ")", "\n", "x", "=", "torch", ".", "tanh", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "logits", "=", "self", ".", "out_proj", "(", "x", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.heads.RegressionHead.__init__": [[38, 44], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.radam.AdamW.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_size", ",", "hidden_dropout_prob", ")", ":", "\n", "        ", "\"\"\"From RobertaClassificationHead\"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "hidden_dropout_prob", ")", "\n", "self", ".", "out_proj", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.heads.RegressionHead.forward": [[45, 52], ["heads.RegressionHead.dropout", "heads.RegressionHead.dense", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "heads.RegressionHead.dropout", "heads.RegressionHead.out_proj"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pooled", ")", ":", "\n", "        ", "x", "=", "self", ".", "dropout", "(", "pooled", ")", "\n", "x", "=", "self", ".", "dense", "(", "x", ")", "\n", "x", "=", "torch", ".", "tanh", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "scores", "=", "self", ".", "out_proj", "(", "x", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.heads.SpanComparisonHead.__init__": [[55, 64], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "jiant.ext.allennlp.SelfAttentiveSpanExtractor", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.radam.AdamW.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_size", ",", "hidden_dropout_prob", ",", "num_spans", ",", "num_labels", ")", ":", "\n", "        ", "\"\"\"From RobertaForSpanComparisonClassification\"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_spans", "=", "num_spans", "\n", "self", ".", "num_labels", "=", "num_labels", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "hidden_dropout_prob", ")", "\n", "self", ".", "span_attention_extractor", "=", "SelfAttentiveSpanExtractor", "(", "hidden_size", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "hidden_size", "*", "self", ".", "num_spans", ",", "self", ".", "num_labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.heads.SpanComparisonHead.forward": [[65, 71], ["heads.SpanComparisonHead.span_attention_extractor", "heads.SpanComparisonHead.view", "heads.SpanComparisonHead.dropout", "heads.SpanComparisonHead.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "unpooled", ",", "spans", ")", ":", "\n", "        ", "span_embeddings", "=", "self", ".", "span_attention_extractor", "(", "unpooled", ",", "spans", ")", "\n", "span_embeddings", "=", "span_embeddings", ".", "view", "(", "-", "1", ",", "self", ".", "num_spans", "*", "self", ".", "hidden_size", ")", "\n", "span_embeddings", "=", "self", ".", "dropout", "(", "span_embeddings", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "span_embeddings", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.heads.TokenClassificationHead.__init__": [[74, 80], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.radam.AdamW.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_size", ",", "num_labels", ",", "hidden_dropout_prob", ")", ":", "\n", "        ", "\"\"\"From RobertaForTokenClassification\"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_labels", "=", "num_labels", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "hidden_dropout_prob", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "num_labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.heads.TokenClassificationHead.forward": [[81, 85], ["heads.TokenClassificationHead.dropout", "heads.TokenClassificationHead.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "unpooled", ")", ":", "\n", "        ", "unpooled", "=", "self", ".", "dropout", "(", "unpooled", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "unpooled", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.heads.QAHead.__init__": [[88, 92], ["torch.Module.__init__", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.radam.AdamW.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_size", ")", ":", "\n", "        ", "\"\"\"From RobertaForQuestionAnswering\"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "qa_outputs", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.heads.QAHead.forward": [[93, 99], ["heads.QAHead.qa_outputs", "logits.permute.permute.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "unpooled", ")", ":", "\n", "        ", "logits", "=", "self", ".", "qa_outputs", "(", "unpooled", ")", "\n", "# bs x seq_len x 2", "\n", "logits", "=", "logits", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "# bs x 2 x seq_len x 1", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.heads.BertMLMHead.__init__": [[108, 120], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "transformers.modeling_bert.BertLayerNorm", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.radam.AdamW.__init__"], ["def", "__init__", "(", "self", ",", "hidden_size", ",", "vocab_size", ",", "layer_norm_eps", "=", "1e-12", ",", "hidden_act", "=", "\"gelu\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ")", "\n", "self", ".", "transform_act_fn", "=", "transformers", ".", "modeling_bert", ".", "ACT2FN", "[", "hidden_act", "]", "\n", "self", ".", "LayerNorm", "=", "transformers", ".", "modeling_bert", ".", "BertLayerNorm", "(", "hidden_size", ",", "eps", "=", "layer_norm_eps", ")", "\n", "\n", "self", ".", "decoder", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "vocab_size", ",", "bias", "=", "False", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "vocab_size", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n", "# Need a link between the two variables so that the bias is correctly resized with", "\n", "# `resize_token_embeddings`", "\n", "self", ".", "decoder", ".", "bias", "=", "self", ".", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.heads.BertMLMHead.forward": [[121, 127], ["heads.BertMLMHead.dense", "heads.BertMLMHead.transform_act_fn", "heads.BertMLMHead.LayerNorm", "heads.BertMLMHead.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "unpooled", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "unpooled", ")", "\n", "hidden_states", "=", "self", ".", "transform_act_fn", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", ")", "\n", "logits", "=", "self", ".", "decoder", "(", "hidden_states", ")", "+", "self", ".", "bias", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.heads.RobertaMLMHead.__init__": [[132, 143], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "transformers.modeling_bert.BertLayerNorm", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.radam.AdamW.__init__"], ["def", "__init__", "(", "self", ",", "hidden_size", ",", "vocab_size", ",", "layer_norm_eps", "=", "1e-12", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ")", "\n", "self", ".", "layer_norm", "=", "transformers", ".", "modeling_bert", ".", "BertLayerNorm", "(", "hidden_size", ",", "eps", "=", "layer_norm_eps", ")", "\n", "\n", "self", ".", "decoder", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "vocab_size", ",", "bias", "=", "False", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "vocab_size", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n", "# Need a link between the two variables so that the bias is correctly resized with", "\n", "# `resize_token_embeddings`", "\n", "self", ".", "decoder", ".", "bias", "=", "self", ".", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.heads.RobertaMLMHead.forward": [[144, 152], ["heads.RobertaMLMHead.dense", "transformers.modeling_bert.gelu", "heads.RobertaMLMHead.layer_norm", "heads.RobertaMLMHead.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "unpooled", ")", ":", "\n", "        ", "x", "=", "self", ".", "dense", "(", "unpooled", ")", "\n", "x", "=", "transformers", ".", "modeling_bert", ".", "gelu", "(", "x", ")", "\n", "x", "=", "self", ".", "layer_norm", "(", "x", ")", "\n", "\n", "# project back to size of vocabulary with bias", "\n", "logits", "=", "self", ".", "decoder", "(", "x", ")", "+", "self", ".", "bias", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.heads.AlbertMLMHead.__init__": [[157, 169], ["torch.Module.__init__", "torch.LayerNorm", "torch.LayerNorm", "torch.Parameter", "torch.Parameter", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.radam.AdamW.__init__"], ["def", "__init__", "(", "self", ",", "hidden_size", ",", "embedding_size", ",", "vocab_size", ",", "hidden_act", "=", "\"gelu\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "LayerNorm", "=", "nn", ".", "LayerNorm", "(", "embedding_size", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "vocab_size", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "embedding_size", ")", "\n", "self", ".", "decoder", "=", "nn", ".", "Linear", "(", "embedding_size", ",", "vocab_size", ")", "\n", "self", ".", "activation", "=", "transformers", ".", "modeling_bert", ".", "ACT2FN", "[", "hidden_act", "]", "\n", "\n", "# Need a link between the two variables so that the bias is correctly resized with", "\n", "# `resize_token_embeddings`", "\n", "self", ".", "decoder", ".", "bias", "=", "self", ".", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.heads.AlbertMLMHead.forward": [[170, 178], ["heads.AlbertMLMHead.dense", "heads.AlbertMLMHead.activation", "heads.AlbertMLMHead.LayerNorm", "heads.AlbertMLMHead.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "unpooled", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "unpooled", ")", "\n", "hidden_states", "=", "self", ".", "activation", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "decoder", "(", "hidden_states", ")", "\n", "\n", "logits", "=", "hidden_states", "+", "self", ".", "bias", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.heads.MeanPoolerHead.__init__": [[185, 187], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.radam.AdamW.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.heads.MeanPoolerHead.forward": [[189, 197], ["input_mask.sum().float", "len", "len", "input_mask.sum().float.unsqueeze", "input_mask.sum", "input_mask.float().unsqueeze", "input_mask.float"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "unpooled", ",", "input_mask", ")", ":", "\n", "# [batch_size, length, hidden_dim]", "\n", "        ", "assert", "len", "(", "unpooled", ".", "shape", ")", "==", "3", "\n", "# [batch_size, length]", "\n", "assert", "len", "(", "input_mask", ".", "shape", ")", "==", "2", "\n", "lengths", "=", "input_mask", ".", "sum", "(", "dim", "=", "1", ")", ".", "float", "(", ")", "\n", "summed", "=", "(", "unpooled", "*", "input_mask", ".", "float", "(", ")", ".", "unsqueeze", "(", "2", ")", ")", ".", "sum", "(", "1", ")", "\n", "return", "summed", "/", "lengths", ".", "unsqueeze", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.heads.FirstPoolerHead.__init__": [[200, 202], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.radam.AdamW.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.heads.FirstPoolerHead.forward": [[204, 208], ["len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "unpooled", ")", ":", "\n", "# [batch_size, length, hidden_dim]", "\n", "        ", "assert", "len", "(", "unpooled", ".", "shape", ")", "==", "3", "\n", "return", "unpooled", "[", ":", ",", "0", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.scripts.configurator.Registry.register": [[12, 16], ["None"], "methods", ["None"], ["@", "classmethod", "\n", "def", "register", "(", "cls", ",", "f", ")", ":", "\n", "        ", "cls", ".", "func_dict", "[", "f", ".", "__name__", "]", "=", "f", "\n", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.scripts.configurator.write_configs": [[18, 48], ["os.makedirs", "config_dict[].values", "config_dict[].values", "jiant.write_json", "jiant.write_json", "path_dict.values", "jiant.write_json", "os.path.join", "os.path.exists", "os.path.join", "os.path.join", "os.path.join", "os.path.exists"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.write_json", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.write_json", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.write_json"], ["", "", "def", "write_configs", "(", "config_dict", ",", "base_path", ",", "check_paths", "=", "True", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "base_path", ",", "exist_ok", "=", "True", ")", "\n", "config_keys", "=", "[", "\n", "\"task_config_path_dict\"", ",", "\n", "\"task_cache_config_dict\"", ",", "\n", "\"sampler_config\"", ",", "\n", "\"global_train_config\"", ",", "\n", "\"task_specific_configs_dict\"", ",", "\n", "\"metric_aggregator_config\"", ",", "\n", "\"taskmodels_config\"", ",", "\n", "\"task_run_config\"", ",", "\n", "]", "\n", "for", "path", "in", "config_dict", "[", "\"task_config_path_dict\"", "]", ".", "values", "(", ")", ":", "\n", "        ", "if", "check_paths", ":", "\n", "            ", "assert", "os", ".", "path", ".", "exists", "(", "path", ")", "\n", "", "", "for", "path_dict", "in", "config_dict", "[", "\"task_cache_config_dict\"", "]", ".", "values", "(", ")", ":", "\n", "        ", "for", "path", "in", "path_dict", ".", "values", "(", ")", ":", "\n", "            ", "if", "check_paths", ":", "\n", "                ", "assert", "os", ".", "path", ".", "exists", "(", "path", ")", "\n", "", "", "", "for", "config_key", "in", "config_keys", ":", "\n", "        ", "py_io", ".", "write_json", "(", "\n", "config_dict", "[", "config_key", "]", ",", "os", ".", "path", ".", "join", "(", "base_path", ",", "f\"{config_key}.json\"", ")", ",", "\n", ")", "\n", "", "py_io", ".", "write_json", "(", "config_dict", ",", "os", ".", "path", ".", "join", "(", "base_path", ",", "\"full.json\"", ")", ")", "\n", "py_io", ".", "write_json", "(", "\n", "{", "\n", "f\"{config_key}_path\"", ":", "os", ".", "path", ".", "join", "(", "base_path", ",", "f\"{config_key}.json\"", ")", "\n", "for", "config_key", "in", "config_keys", "\n", "}", ",", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "\"zz_full.json\"", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.scripts.configurator.write_configs_from_full": [[51, 54], ["configurator.write_configs", "jiant.read_json", "os.path.split"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.scripts.configurator.write_configs", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_json"], ["", "def", "write_configs_from_full", "(", "full_config_path", ")", ":", "\n", "    ", "write_configs", "(", "\n", "config_dict", "=", "py_io", ".", "read_json", "(", "full_config_path", ")", ",", "base_path", "=", "os", ".", "path", ".", "split", "(", "full_config_path", ")", "[", "0", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.scripts.configurator.get_num_examples_from_cache": [[57, 60], ["os.path.join", "torch.load"], "function", ["None"], ["", "def", "get_num_examples_from_cache", "(", "cache_path", ")", ":", "\n", "    ", "cache_metadata_path", "=", "os", ".", "path", ".", "join", "(", "cache_path", ",", "\"data_args.p\"", ")", "\n", "return", "torch", ".", "load", "(", "cache_metadata_path", ")", "[", "\"length\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.scripts.configurator.cap_examples": [[62, 67], ["min"], "function", ["None"], ["", "def", "cap_examples", "(", "num_examples", ",", "cap", ")", ":", "\n", "    ", "if", "cap", "is", "None", ":", "\n", "        ", "return", "num_examples", "\n", "", "else", ":", "\n", "        ", "return", "min", "(", "num_examples", ",", "cap", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.scripts.configurator.single_task_config": [[69, 150], ["jiant.read_json", "os.path.expandvars", "os.path.expandvars", "os.path.expandvars", "os.path.expandvars", "configurator.get_num_examples_from_cache", "os.path.join", "os.path.join", "os.path.join", "os.path.expandvars", "int", "os.path.expandvars"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_json", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.counterfactual.generate_exp.get_num_examples_from_cache"], ["", "", "@", "Registry", ".", "register", "\n", "def", "single_task_config", "(", "\n", "task_config_path", ",", "\n", "train_batch_size", "=", "None", ",", "\n", "task_cache_base_path", "=", "None", ",", "\n", "epochs", "=", "None", ",", "\n", "max_steps", "=", "None", ",", "\n", "task_cache_train_path", "=", "None", ",", "\n", "task_cache_val_path", "=", "None", ",", "\n", "task_cache_val_labels_path", "=", "None", ",", "\n", "eval_batch_multiplier", "=", "2", ",", "\n", "eval_batch_size", "=", "None", ",", "\n", "gradient_accumulation_steps", "=", "1", ",", "\n", "eval_subset_num", "=", "500", ",", "\n", "num_gpus", "=", "1", ",", "\n", "warmup_steps_proportion", "=", "0.1", ",", "\n", "phases", "=", "(", "\"train\"", ",", "\"val\"", ")", ",", "\n", ")", ":", "\n", "    ", "task_config", "=", "py_io", ".", "read_json", "(", "os", ".", "path", ".", "expandvars", "(", "task_config_path", ")", ")", "\n", "task_name", "=", "task_config", "[", "\"name\"", "]", "\n", "\n", "do_train", "=", "\"train\"", "in", "phases", "\n", "do_val", "=", "\"val\"", "in", "phases", "\n", "\n", "cache_path_dict", "=", "{", "}", "\n", "if", "do_train", ":", "\n", "        ", "if", "task_cache_train_path", "is", "None", ":", "\n", "            ", "task_cache_train_path", "=", "os", ".", "path", ".", "join", "(", "task_cache_base_path", ",", "\"train\"", ")", "\n", "", "cache_path_dict", "[", "\"train\"", "]", "=", "os", ".", "path", ".", "expandvars", "(", "task_cache_train_path", ")", "\n", "\n", "", "if", "do_val", ":", "\n", "        ", "if", "task_cache_val_path", "is", "None", ":", "\n", "            ", "task_cache_val_path", "=", "os", ".", "path", ".", "join", "(", "task_cache_base_path", ",", "\"val\"", ")", "\n", "", "if", "task_cache_val_labels_path", "is", "None", ":", "\n", "            ", "task_cache_val_labels_path", "=", "os", ".", "path", ".", "join", "(", "task_cache_base_path", ",", "\"val_labels\"", ")", "\n", "", "cache_path_dict", "[", "\"val\"", "]", "=", "os", ".", "path", ".", "expandvars", "(", "task_cache_val_path", ")", "\n", "cache_path_dict", "[", "\"val_labels\"", "]", "=", "os", ".", "path", ".", "expandvars", "(", "task_cache_val_labels_path", ")", "\n", "\n", "", "if", "do_train", ":", "\n", "        ", "assert", "(", "epochs", "is", "None", ")", "!=", "(", "max_steps", "is", "None", ")", "\n", "assert", "train_batch_size", "is", "not", "None", "\n", "effective_batch_size", "=", "train_batch_size", "*", "gradient_accumulation_steps", "*", "num_gpus", "\n", "num_training_examples", "=", "get_num_examples_from_cache", "(", "\n", "cache_path", "=", "os", ".", "path", ".", "expandvars", "(", "task_cache_train_path", ")", ",", "\n", ")", "\n", "max_steps", "=", "num_training_examples", "*", "epochs", "//", "effective_batch_size", "\n", "", "else", ":", "\n", "        ", "max_steps", "=", "0", "\n", "train_batch_size", "=", "0", "\n", "\n", "", "if", "do_val", ":", "\n", "        ", "if", "eval_batch_size", "is", "None", ":", "\n", "            ", "assert", "train_batch_size", "is", "not", "None", "\n", "eval_batch_size", "=", "train_batch_size", "*", "eval_batch_multiplier", "\n", "\n", "", "", "config_dict", "=", "{", "\n", "\"task_config_path_dict\"", ":", "{", "task_name", ":", "os", ".", "path", ".", "expandvars", "(", "task_config_path", ")", "}", ",", "\n", "\"task_cache_config_dict\"", ":", "{", "task_name", ":", "cache_path_dict", "}", ",", "\n", "\"sampler_config\"", ":", "{", "\"sampler_type\"", ":", "\"UniformMultiTaskSampler\"", "}", ",", "\n", "\"global_train_config\"", ":", "{", "\n", "\"max_steps\"", ":", "max_steps", ",", "\n", "\"warmup_steps\"", ":", "int", "(", "max_steps", "*", "warmup_steps_proportion", ")", ",", "\n", "}", ",", "\n", "\"task_specific_configs_dict\"", ":", "{", "\n", "task_name", ":", "{", "\n", "\"train_batch_size\"", ":", "train_batch_size", ",", "\n", "\"eval_batch_size\"", ":", "eval_batch_size", ",", "\n", "\"gradient_accumulation_steps\"", ":", "gradient_accumulation_steps", ",", "\n", "\"eval_subset_num\"", ":", "eval_subset_num", ",", "\n", "}", ",", "\n", "}", ",", "\n", "\"taskmodels_config\"", ":", "{", "\"task_to_taskmodel_map\"", ":", "{", "task_name", ":", "task_name", "}", "}", ",", "\n", "\"task_run_config\"", ":", "{", "\n", "\"train_task_list\"", ":", "[", "task_name", "]", "if", "do_train", "else", "[", "]", ",", "\n", "\"train_val_task_list\"", ":", "[", "task_name", "]", "if", "do_train", "else", "[", "]", ",", "\n", "\"val_task_list\"", ":", "[", "task_name", "]", "if", "do_val", "else", "[", "]", ",", "\n", "\"test_task_list\"", ":", "[", "]", ",", "\n", "}", ",", "\n", "\"metric_aggregator_config\"", ":", "{", "\"metric_aggregator_type\"", ":", "\"EqualMetricAggregator\"", "}", ",", "\n", "}", "\n", "return", "config_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.scripts.configurator.simple_multi_task_config": [[152, 250], ["isinstance", "isinstance", "print", "jiant.read_json", "jiant.read_json", "sorted", "isinstance", "configurator.get_num_examples_from_cache", "configurator.cap_examples", "os.path.expandvars", "os.path.expandvars", "list", "os.path.expandvars", "int", "os.path.expandvars", "os.path.expandvars", "os.path.expandvars", "os.path.expandvars"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_json", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_json", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.counterfactual.generate_exp.get_num_examples_from_cache", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.scripts.configurator.cap_examples"], ["", "@", "Registry", ".", "register", "\n", "def", "simple_multi_task_config", "(", "\n", "task_meta_config_dict", ",", "\n", "task_cache_dict", ",", "\n", "task_name_list", "=", "None", ",", "\n", "epochs", "=", "None", ",", "\n", "max_steps", "=", "None", ",", "\n", "num_gpus", "=", "1", ",", "\n", "train_examples_cap", "=", "None", ",", "\n", "warmup_steps_proportion", "=", "0.1", ",", "\n", ")", ":", "\n", "    ", "if", "isinstance", "(", "task_meta_config_dict", ",", "str", ")", ":", "\n", "        ", "task_meta_config_dict", "=", "py_io", ".", "read_json", "(", "os", ".", "path", ".", "expandvars", "(", "task_meta_config_dict", ")", ")", "\n", "", "if", "isinstance", "(", "task_cache_dict", ",", "str", ")", ":", "\n", "        ", "task_cache_dict", "=", "py_io", ".", "read_json", "(", "os", ".", "path", ".", "expandvars", "(", "task_cache_dict", ")", ")", "\n", "", "if", "task_name_list", "is", "None", ":", "\n", "        ", "task_name_list", "=", "sorted", "(", "list", "(", "task_meta_config_dict", ")", ")", "\n", "\n", "", "assert", "(", "epochs", "is", "None", ")", "!=", "(", "max_steps", "is", "None", ")", "\n", "\n", "# Proportional", "\n", "num_examples_dict", "=", "{", "}", "\n", "capped_num_examples_dict", "=", "{", "}", "\n", "max_steps_not_given", "=", "max_steps", "is", "None", "\n", "print", "(", "max_steps_not_given", ")", "\n", "if", "max_steps_not_given", ":", "\n", "        ", "assert", "isinstance", "(", "epochs", ",", "(", "int", ",", "float", ")", ")", "\n", "max_steps", "=", "0", "\n", "", "for", "task_name", "in", "task_name_list", ":", "\n", "        ", "effective_batch_size", "=", "(", "\n", "task_meta_config_dict", "[", "task_name", "]", "[", "\"train_batch_size\"", "]", "\n", "*", "task_meta_config_dict", "[", "task_name", "]", "[", "\"gradient_accumulation_steps\"", "]", "\n", "*", "num_gpus", "\n", ")", "\n", "num_examples", "=", "get_num_examples_from_cache", "(", "\n", "cache_path", "=", "os", ".", "path", ".", "expandvars", "(", "task_cache_dict", "[", "task_name", "]", "[", "\"train\"", "]", ")", ",", "\n", ")", "\n", "capped_num_examples", "=", "cap_examples", "(", "num_examples", "=", "num_examples", ",", "cap", "=", "train_examples_cap", ")", "\n", "num_examples_dict", "[", "task_name", "]", "=", "num_examples", "\n", "capped_num_examples_dict", "[", "task_name", "]", "=", "capped_num_examples", "\n", "if", "max_steps_not_given", ":", "\n", "            ", "max_steps", "+=", "num_examples", "*", "epochs", "//", "effective_batch_size", "\n", "\n", "", "", "if", "train_examples_cap", "is", "None", ":", "\n", "        ", "sampler_config", "=", "{", "\n", "\"sampler_type\"", ":", "\"ProportionalMultiTaskSampler\"", ",", "\n", "}", "\n", "", "else", ":", "\n", "        ", "sampler_config", "=", "{", "\n", "\"sampler_type\"", ":", "\"SpecifiedProbMultiTaskSampler\"", ",", "\n", "\"task_to_unweighted_probs\"", ":", "capped_num_examples_dict", ",", "\n", "}", "\n", "\n", "", "config_dict", "=", "{", "\n", "\"task_config_path_dict\"", ":", "{", "\n", "task_name", ":", "os", ".", "path", ".", "expandvars", "(", "task_meta_config_dict", "[", "task_name", "]", "[", "\"config_path\"", "]", ")", "\n", "for", "task_name", "in", "task_name_list", "\n", "}", ",", "\n", "\"task_cache_config_dict\"", ":", "{", "\n", "task_name", ":", "{", "\n", "\"train\"", ":", "os", ".", "path", ".", "expandvars", "(", "task_cache_dict", "[", "task_name", "]", "[", "\"train\"", "]", ")", ",", "\n", "\"val\"", ":", "os", ".", "path", ".", "expandvars", "(", "task_cache_dict", "[", "task_name", "]", "[", "\"val\"", "]", ")", ",", "\n", "\"val_labels\"", ":", "os", ".", "path", ".", "expandvars", "(", "task_cache_dict", "[", "task_name", "]", "[", "\"val_labels\"", "]", ")", ",", "\n", "}", "\n", "for", "task_name", "in", "task_name_list", "\n", "}", ",", "\n", "\"sampler_config\"", ":", "sampler_config", ",", "\n", "\"global_train_config\"", ":", "{", "\n", "\"max_steps\"", ":", "max_steps", ",", "\n", "\"warmup_steps\"", ":", "int", "(", "max_steps", "*", "warmup_steps_proportion", ")", ",", "\n", "}", ",", "\n", "\"task_specific_configs_dict\"", ":", "{", "\n", "task_name", ":", "{", "\n", "\"train_batch_size\"", ":", "task_meta_config_dict", "[", "task_name", "]", "[", "\"train_batch_size\"", "]", ",", "\n", "\"eval_batch_size\"", ":", "task_meta_config_dict", "[", "task_name", "]", "[", "\"eval_batch_size\"", "]", ",", "\n", "\"gradient_accumulation_steps\"", ":", "task_meta_config_dict", "[", "task_name", "]", "[", "\n", "\"gradient_accumulation_steps\"", "\n", "]", ",", "\n", "\"eval_subset_num\"", ":", "task_meta_config_dict", "[", "task_name", "]", "[", "\"eval_subset_num\"", "]", ",", "\n", "}", "\n", "for", "task_name", "in", "task_name_list", "\n", "}", ",", "\n", "\"taskmodels_config\"", ":", "{", "\n", "\"task_to_taskmodel_map\"", ":", "{", "\n", "task_name", ":", "task_meta_config_dict", "[", "task_name", "]", "[", "\"task_to_taskmodel_map\"", "]", "\n", "for", "task_name", "in", "task_name_list", "\n", "}", ",", "\n", "\"taskmodel_config_map\"", ":", "{", "task_name", ":", "None", "for", "task_name", "in", "task_name_list", "}", ",", "\n", "}", ",", "\n", "\"task_run_config\"", ":", "{", "\n", "\"train_task_list\"", ":", "task_name_list", ",", "\n", "\"train_val_task_list\"", ":", "task_name_list", ",", "\n", "\"val_task_list\"", ":", "task_name_list", ",", "\n", "\"test_task_list\"", ":", "task_name_list", ",", "\n", "}", ",", "\n", "\"metric_aggregator_config\"", ":", "{", "\"metric_aggregator_type\"", ":", "\"EqualMetricAggregator\"", "}", ",", "\n", "}", "\n", "return", "config_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.scripts.configurator.main": [[260, 270], ["jiant.get_mode_and_cl_args", "JsonRunConfiguration.default_run_cli", "configurator.write_configs", "jiant.ModeLookupError", "jiant.read_json"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.get_mode_and_cl_args", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.RunConfig.default_run_cli", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.scripts.configurator.write_configs", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_json"], ["", "def", "main", "(", ")", ":", "\n", "    ", "mode", ",", "cl_args", "=", "zconf", ".", "get_mode_and_cl_args", "(", ")", "\n", "if", "mode", "==", "\"json\"", ":", "\n", "        ", "args", "=", "JsonRunConfiguration", ".", "default_run_cli", "(", "cl_args", "=", "cl_args", ")", "\n", "config_dict", "=", "Registry", ".", "func_dict", "[", "args", ".", "func", "]", "(", "**", "py_io", ".", "read_json", "(", "args", ".", "path", ")", ")", "\n", "write_configs", "(", "\n", "config_dict", "=", "config_dict", ",", "base_path", "=", "args", ".", "output_base_path", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "zconf", ".", "ModeLookupError", "(", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.simple.preprocessing.MaxValidLengthRecorder.__init__": [[12, 16], ["numpy.arange"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "max_seq_length", ")", ":", "\n", "        ", "self", ".", "max_valid_length", "=", "0", "\n", "self", ".", "max_seq_length", "=", "max_seq_length", "\n", "self", ".", "range_idx", "=", "np", ".", "arange", "(", "max_seq_length", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.simple.preprocessing.MaxValidLengthRecorder.__call__": [[17, 23], ["datum[].input_mask.reshape().max", "max", "datum[].get_fields", "RuntimeError", "preprocessing.MaxValidLengthRecorder.range_idx[].max", "datum[].input_mask.reshape", "datum[].input_mask.reshape().max.astype"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.ExtendedDataClassMixin.get_fields"], ["", "def", "__call__", "(", "self", ",", "datum", ")", ":", "\n", "        ", "if", "\"input_mask\"", "not", "in", "datum", "[", "\"data_row\"", "]", ".", "get_fields", "(", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Smart truncate not supported\"", ")", "\n", "", "indexer", "=", "datum", "[", "\"data_row\"", "]", ".", "input_mask", ".", "reshape", "(", "-", "1", ",", "self", ".", "max_seq_length", ")", ".", "max", "(", "-", "2", ")", "\n", "valid_length", "=", "self", ".", "range_idx", "[", "indexer", ".", "astype", "(", "bool", ")", "]", ".", "max", "(", ")", "+", "1", "\n", "self", ".", "max_valid_length", "=", "max", "(", "self", ".", "max_valid_length", ",", "valid_length", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.simple.preprocessing.smart_truncate": [[25, 60], ["numpy.arange", "max", "jiant.utils.display.maybe_tqdm", "jiant.ListDataset", "[].get_fields", "RuntimeError", "datum[].input_mask.reshape().max", "valid_length_ls.append", "new_datum_ls.append", "preprocessing.smart_truncate_datum", "datum[].input_mask.reshape", "range_idx[].max", "datum[].input_mask.reshape().max.astype"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.display.maybe_tqdm", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.datastructures.ExtendedDataClassMixin.get_fields", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.simple.preprocessing.smart_truncate_datum"], ["", "", "def", "smart_truncate", "(", "dataset", ":", "torch_utils", ".", "ListDataset", ",", "max_seq_length", ":", "int", ",", "verbose", ":", "bool", "=", "False", ")", ":", "\n", "    ", "\"\"\"Truncate data to the length of the longest example in the dataset.\n\n    Args:\n        dataset (torch_utils.ListDataset): ListDataset to truncate if possible.\n        max_seq_length (int): The maximum total input sequence length.\n        verbose (bool): If True, display progress bar tracking truncation progress.\n\n    Returns:\n        Tuple[torch_utils.ListDataset, int]: truncated dataset, and length of the longest sequence.\n\n    \"\"\"", "\n", "if", "\"input_mask\"", "not", "in", "dataset", ".", "data", "[", "0", "]", "[", "\"data_row\"", "]", ".", "get_fields", "(", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"Smart truncate not supported\"", ")", "\n", "", "valid_length_ls", "=", "[", "]", "\n", "range_idx", "=", "np", ".", "arange", "(", "max_seq_length", ")", "\n", "for", "datum", "in", "dataset", ".", "data", ":", "\n", "# TODO: document why reshape and max happen here (for cola this isn't necessary).", "\n", "#       (Issue #47)", "\n", "        ", "indexer", "=", "datum", "[", "\"data_row\"", "]", ".", "input_mask", ".", "reshape", "(", "-", "1", ",", "max_seq_length", ")", ".", "max", "(", "-", "2", ")", "\n", "valid_length_ls", ".", "append", "(", "range_idx", "[", "indexer", ".", "astype", "(", "bool", ")", "]", ".", "max", "(", ")", "+", "1", ")", "\n", "", "max_valid_length", "=", "max", "(", "valid_length_ls", ")", "\n", "\n", "if", "max_valid_length", "==", "max_seq_length", ":", "\n", "        ", "return", "dataset", ",", "max_seq_length", "\n", "\n", "", "new_datum_ls", "=", "[", "]", "\n", "for", "datum", "in", "maybe_tqdm", "(", "dataset", ".", "data", ",", "desc", "=", "\"Smart truncate data\"", ",", "verbose", "=", "verbose", ")", ":", "\n", "        ", "new_datum_ls", ".", "append", "(", "\n", "smart_truncate_datum", "(", "\n", "datum", "=", "datum", ",", "max_seq_length", "=", "max_seq_length", ",", "max_valid_length", "=", "max_valid_length", ",", "\n", ")", "\n", ")", "\n", "", "new_dataset", "=", "torch_utils", ".", "ListDataset", "(", "new_datum_ls", ")", "\n", "return", "new_dataset", ",", "max_valid_length", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.simple.preprocessing.smart_truncate_cache": [[62, 78], ["jiant.utils.display.maybe_trange", "torch.load", "jiant.utils.display.maybe_tqdm", "torch.save", "cache.get_chunk_path", "new_chunk.append", "cache.get_chunk_path", "preprocessing.smart_truncate_datum"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.display.maybe_trange", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.display.maybe_tqdm", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.CheckpointSaver.save", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.ChunkedFilesDataCache.get_chunk_path", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.ChunkedFilesDataCache.get_chunk_path", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.simple.preprocessing.smart_truncate_datum"], ["", "def", "smart_truncate_cache", "(", "\n", "cache", ":", "shared_caching", ".", "ChunkedFilesDataCache", ",", "\n", "max_seq_length", ":", "int", ",", "\n", "max_valid_length", ":", "int", ",", "\n", "verbose", ":", "bool", "=", "False", ",", "\n", ")", ":", "\n", "    ", "for", "chunk_i", "in", "maybe_trange", "(", "cache", ".", "num_chunks", ",", "desc", "=", "\"Smart truncate chunks\"", ",", "verbose", "=", "verbose", ")", ":", "\n", "        ", "chunk", "=", "torch", ".", "load", "(", "cache", ".", "get_chunk_path", "(", "chunk_i", ")", ")", "\n", "new_chunk", "=", "[", "]", "\n", "for", "datum", "in", "maybe_tqdm", "(", "chunk", ",", "desc", "=", "\"Smart truncate chunk-datum\"", ",", "verbose", "=", "verbose", ")", ":", "\n", "            ", "new_chunk", ".", "append", "(", "\n", "smart_truncate_datum", "(", "\n", "datum", "=", "datum", ",", "max_seq_length", "=", "max_seq_length", ",", "max_valid_length", "=", "max_valid_length", ",", "\n", ")", "\n", ")", "\n", "", "torch", ".", "save", "(", "new_chunk", ",", "cache", ".", "get_chunk_path", "(", "chunk_i", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.simple.preprocessing.smart_truncate_datum": [[80, 100], ["datum[].to_dict", "datum[].to_dict.copy", "datum[].to_dict.items", "datum[].__class__", "isinstance", "RuntimeError", "v.shape.count", "slice_ls.append", "slice_ls.append", "tuple", "slice", "slice"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.ValState.to_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.RunConfig.copy"], ["", "", "def", "smart_truncate_datum", "(", "datum", ",", "max_seq_length", ",", "max_valid_length", ")", ":", "\n", "    ", "row_dict", "=", "datum", "[", "\"data_row\"", "]", ".", "to_dict", "(", ")", "\n", "new_row_dict", "=", "row_dict", ".", "copy", "(", ")", "\n", "for", "k", ",", "v", "in", "row_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "v", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "continue", "\n", "", "if", "max_seq_length", "not", "in", "v", ".", "shape", ":", "\n", "            ", "continue", "\n", "", "if", "not", "v", ".", "shape", ".", "count", "(", "max_seq_length", ")", "==", "1", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"confusing dimensions\"", ")", "\n", "", "slice_ls", "=", "[", "]", "\n", "for", "n", "in", "v", ".", "shape", ":", "\n", "            ", "if", "n", "==", "max_seq_length", ":", "\n", "                ", "slice_ls", ".", "append", "(", "slice", "(", "None", ",", "max_valid_length", ")", ")", "\n", "", "else", ":", "\n", "                ", "slice_ls", ".", "append", "(", "slice", "(", "None", ")", ")", "\n", "", "", "new_row_dict", "[", "k", "]", "=", "v", "[", "tuple", "(", "slice_ls", ")", "]", "\n", "", "return", "{", "\n", "\"data_row\"", ":", "datum", "[", "\"data_row\"", "]", ".", "__class__", "(", "**", "new_row_dict", ")", ",", "\n", "\"metadata\"", ":", "datum", "[", "\"metadata\"", "]", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.simple.preprocessing.convert_examples_to_dataset": [[103, 128], ["preprocessing.tokenize_and_featurize", "enumerate", "jiant.ListDataset", "list", "data.append", "range", "len", "metadata.items"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.simple.preprocessing.tokenize_and_featurize"], ["", "def", "convert_examples_to_dataset", "(", "\n", "examples", ":", "list", ",", "tokenizer", ",", "feat_spec", ":", "FeaturizationSpec", ",", "phase", ":", "str", ",", "verbose", "=", "False", "\n", ")", ":", "\n", "    ", "\"\"\"Create ListDataset containing DataRows and metadata.\n\n    Args:\n        examples (list[Example]): list of task Examples.\n        tokenizer: TODO  (Issue #44)\n        feat_spec (FeaturizationSpec): Tokenization-related metadata.\n        phase (str): string identifying the data subset (e.g., train, val or test).\n        verbose: If True, display progress bar.\n\n    Returns:\n        ListDataset containing DataRows and metadata.\n\n    \"\"\"", "\n", "data_rows", "=", "tokenize_and_featurize", "(", "\n", "examples", "=", "examples", ",", "tokenizer", "=", "tokenizer", ",", "feat_spec", "=", "feat_spec", ",", "phase", "=", "phase", ",", "verbose", "=", "verbose", ",", "\n", ")", "\n", "metadata", "=", "{", "\"example_id\"", ":", "list", "(", "range", "(", "len", "(", "data_rows", ")", ")", ")", "}", "\n", "data", "=", "[", "]", "\n", "for", "i", ",", "data_row", "in", "enumerate", "(", "data_rows", ")", ":", "\n", "        ", "metadata_row", "=", "{", "k", ":", "v", "[", "i", "]", "for", "k", ",", "v", "in", "metadata", ".", "items", "(", ")", "}", "\n", "data", ".", "append", "(", "{", "\"data_row\"", ":", "data_row", ",", "\"metadata\"", ":", "metadata_row", "}", ")", "\n", "", "return", "torch_utils", ".", "ListDataset", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.simple.preprocessing.iter_chunk_convert_examples_to_dataset": [[130, 144], ["enumerate", "preprocessing.iter_chunk_tokenize_and_featurize"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.simple.preprocessing.iter_chunk_tokenize_and_featurize"], ["", "def", "iter_chunk_convert_examples_to_dataset", "(", "\n", "examples", ":", "list", ",", "tokenizer", ",", "feat_spec", ":", "FeaturizationSpec", ",", "phase", ":", "str", ",", "verbose", "=", "False", "\n", ")", ":", "\n", "    ", "for", "i", ",", "data_row", "in", "enumerate", "(", "\n", "iter_chunk_tokenize_and_featurize", "(", "\n", "examples", "=", "examples", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "feat_spec", "=", "feat_spec", ",", "\n", "phase", "=", "phase", ",", "\n", "verbose", "=", "verbose", ",", "\n", ")", "\n", ")", ":", "\n", "        ", "metadata", "=", "{", "\"example_id\"", ":", "i", "}", "\n", "yield", "{", "\"data_row\"", ":", "data_row", ",", "\"metadata\"", ":", "metadata", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.simple.preprocessing.tokenize_and_featurize": [[146, 181], ["isinstance", "jiant.utils.display.maybe_tqdm", "example.to_feature_list", "example.tokenize().featurize", "jiant.utils.display.maybe_tqdm", "example.tokenize"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.display.maybe_tqdm", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.to_feature_list", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.mlm.TokenizedExample.featurize", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.display.maybe_tqdm", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.tokenize"], ["", "", "def", "tokenize_and_featurize", "(", "\n", "examples", ":", "list", ",", "tokenizer", ",", "feat_spec", ":", "FeaturizationSpec", ",", "phase", ",", "verbose", "=", "False", "\n", ")", ":", "\n", "    ", "\"\"\"Create list of DataRows containing tokenized and featurized examples.\n\n    Args:\n        examples (list[Example]): list of task Examples.\n        tokenizer: TODO  (Issue #44)\n        feat_spec (FeaturizationSpec): Tokenization-related metadata.\n        phase (str): string identifying the data subset (e.g., train, val or test).\n        verbose: If True, display progress bar.\n\n    Returns:\n        List DataRows containing tokenized and featurized examples.\n\n    \"\"\"", "\n", "# TODO: Better solution  (Issue #48)", "\n", "if", "isinstance", "(", "examples", "[", "0", "]", ",", "squad_style", ".", "Example", ")", ":", "\n", "        ", "data_rows", "=", "[", "]", "\n", "for", "example", "in", "maybe_tqdm", "(", "examples", ",", "desc", "=", "\"Tokenizing\"", ",", "verbose", "=", "verbose", ")", ":", "\n", "# TODO: Expose parameters  (Issue #49)", "\n", "            ", "data_rows", "+=", "example", ".", "to_feature_list", "(", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "feat_spec", "=", "feat_spec", ",", "\n", "max_seq_length", "=", "feat_spec", ".", "max_seq_length", ",", "\n", "doc_stride", "=", "128", ",", "\n", "max_query_length", "=", "64", ",", "\n", "set_type", "=", "phase", ",", "\n", ")", "\n", "", "", "else", ":", "\n", "        ", "data_rows", "=", "[", "\n", "example", ".", "tokenize", "(", "tokenizer", ")", ".", "featurize", "(", "tokenizer", ",", "feat_spec", ")", "\n", "for", "example", "in", "maybe_tqdm", "(", "examples", ",", "desc", "=", "\"Tokenizing\"", ",", "verbose", "=", "verbose", ")", "\n", "]", "\n", "", "return", "data_rows", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.simple.preprocessing.iter_chunk_tokenize_and_featurize": [[183, 212], ["jiant.utils.display.maybe_tqdm", "isinstance", "example.to_feature_list", "example.tokenize().featurize", "example.tokenize"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.display.maybe_tqdm", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.to_feature_list", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.templates.mlm.TokenizedExample.featurize", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.Example.tokenize"], ["", "def", "iter_chunk_tokenize_and_featurize", "(", "\n", "examples", ":", "list", ",", "tokenizer", ",", "feat_spec", ":", "FeaturizationSpec", ",", "phase", ",", "verbose", "=", "False", "\n", ")", ":", "\n", "    ", "\"\"\"Generator of DataRows containing tokenized and featurized examples.\n\n    Args:\n        examples (list[Example]): list of task Examples.\n        tokenizer: TODO  (Issue #44)\n        feat_spec (FeaturizationSpec): Tokenization-related metadata.\n        phase (str): string identifying the data subset (e.g., train, val or test).\n        verbose: If True, display progress bar.\n\n    Yields:\n        DataRow containing tokenized and featurized examples.\n\n    \"\"\"", "\n", "for", "example", "in", "maybe_tqdm", "(", "examples", ",", "desc", "=", "\"Tokenizing\"", ",", "verbose", "=", "verbose", ")", ":", "\n", "# TODO: Better solution  (Issue #48)", "\n", "        ", "if", "isinstance", "(", "example", ",", "squad_style", ".", "Example", ")", ":", "\n", "# TODO: Expose parameters  (Issue #49)", "\n", "            ", "yield", "from", "example", ".", "to_feature_list", "(", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "max_seq_length", "=", "feat_spec", ".", "max_seq_length", ",", "\n", "doc_stride", "=", "128", ",", "\n", "max_query_length", "=", "64", ",", "\n", "set_type", "=", "phase", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "yield", "example", ".", "tokenize", "(", "tokenizer", ")", ".", "featurize", "(", "tokenizer", ",", "feat_spec", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.simple.tokenize_and_cache.chunk_and_save": [[32, 53], ["tokenize_and_cache.iter_chunk_and_save", "tokenize_and_cache.full_chunk_and_save"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.simple.tokenize_and_cache.iter_chunk_and_save", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.simple.tokenize_and_cache.full_chunk_and_save"], ["    ", "\"\"\"Convert Examples to DataRows, optionally truncate sequences if possible, and save to disk.\n\n    Note:\n        If args.do_iter is True, processes data without loading whole dataset into memory.\n\n    Args:\n        phase (str): string identifying the data subset (e.g., train, val or test).\n        examples (list[Example]): list of task Examples.\n        feat_spec: (FeaturizationSpec): Tokenization-related metadata.\n        tokenizer: TODO  (Issue #44)\n        args (RunConfiguration): run configuration object.\n\n    \"\"\"", "\n", "if", "args", ".", "do_iter", ":", "\n", "        ", "iter_chunk_and_save", "(", "\n", "phase", "=", "phase", ",", "examples", "=", "examples", ",", "feat_spec", "=", "feat_spec", ",", "tokenizer", "=", "tokenizer", ",", "args", "=", "args", "\n", ")", "\n", "", "else", ":", "\n", "        ", "full_chunk_and_save", "(", "\n", "phase", "=", "phase", ",", "examples", "=", "examples", ",", "feat_spec", "=", "feat_spec", ",", "tokenizer", "=", "tokenizer", ",", "args", "=", "args", "\n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.simple.tokenize_and_cache.full_chunk_and_save": [[56, 84], ["jiant.convert_examples_to_dataset", "jiant.chunk_and_save", "jiant.smart_truncate", "os.makedirs", "jiant.write_json", "os.path.join", "args.to_dict", "os.path.join", "os.path.join", "int"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.simple.preprocessing.convert_examples_to_dataset", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.simple.tokenize_and_cache.chunk_and_save", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.simple.preprocessing.smart_truncate", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.write_json", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.ValState.to_dict"], ["    ", "\"\"\"Convert Examples to ListDataset, optionally truncate sequences if possible, and save to disk.\n\n    Args:\n        phase (str): string identifying the data subset (e.g., train, val or test).\n        examples (list[Example]): list of task Examples.\n        feat_spec: (FeaturizationSpec): Tokenization-related metadata.\n        tokenizer: TODO  (Issue #44)\n        args (RunConfiguration): run configuration object.\n\n    \"\"\"", "\n", "dataset", "=", "preprocessing", ".", "convert_examples_to_dataset", "(", "\n", "examples", "=", "examples", ",", "feat_spec", "=", "feat_spec", ",", "tokenizer", "=", "tokenizer", ",", "phase", "=", "phase", ",", "verbose", "=", "True", ",", "\n", ")", "\n", "if", "args", ".", "smart_truncate", ":", "\n", "        ", "dataset", ",", "length", "=", "preprocessing", ".", "smart_truncate", "(", "\n", "dataset", "=", "dataset", ",", "max_seq_length", "=", "args", ".", "max_seq_length", ",", "verbose", "=", "True", ",", "\n", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "phase", ")", ",", "exist_ok", "=", "True", ")", "\n", "py_io", ".", "write_json", "(", "\n", "data", "=", "{", "\"truncated_to\"", ":", "int", "(", "length", ")", "}", ",", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "phase", ",", "\"smart_truncate.json\"", ")", ",", "\n", ")", "\n", "", "shared_caching", ".", "chunk_and_save", "(", "\n", "data", "=", "dataset", ".", "data", ",", "\n", "chunk_size", "=", "args", ".", "chunk_size", ",", "\n", "data_args", "=", "args", ".", "to_dict", "(", ")", ",", "\n", "output_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "phase", ")", ",", "\n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.simple.tokenize_and_cache.iter_chunk_and_save": [[87, 119], ["jiant.iter_chunk_convert_examples_to_dataset", "jiant.MaxValidLengthRecorder", "jiant.iter_chunk_and_save", "jiant.smart_truncate_cache", "jiant.write_json", "args.to_dict", "os.path.join", "jiant.ChunkedFilesDataCache", "os.path.join", "os.path.join", "int"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.simple.preprocessing.iter_chunk_convert_examples_to_dataset", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.simple.tokenize_and_cache.iter_chunk_and_save", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.simple.preprocessing.smart_truncate_cache", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.write_json", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.ValState.to_dict"], ["    ", "\"\"\"Convert Examples to DataRows, optionally truncate sequences if possible, stream to disk.\n\n    Args:\n        phase (str): string identifying the data subset (e.g., train, val or test).\n        examples (list[Example]): list of task Examples.\n        feat_spec: (FeaturizationSpec): Tokenization-related metadata.\n        tokenizer: TODO  (Issue #44)\n        args (RunConfiguration): run configuration object.\n\n    \"\"\"", "\n", "dataset_generator", "=", "preprocessing", ".", "iter_chunk_convert_examples_to_dataset", "(", "\n", "examples", "=", "examples", ",", "feat_spec", "=", "feat_spec", ",", "tokenizer", "=", "tokenizer", ",", "phase", "=", "phase", ",", "verbose", "=", "True", ",", "\n", ")", "\n", "max_valid_length_recorder", "=", "preprocessing", ".", "MaxValidLengthRecorder", "(", "args", ".", "max_seq_length", ")", "\n", "shared_caching", ".", "iter_chunk_and_save", "(", "\n", "data", "=", "dataset_generator", ",", "\n", "chunk_size", "=", "args", ".", "chunk_size", ",", "\n", "data_args", "=", "args", ".", "to_dict", "(", ")", ",", "\n", "output_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "phase", ")", ",", "\n", "recorder_callback", "=", "max_valid_length_recorder", ",", "\n", ")", "\n", "if", "args", ".", "smart_truncate", ":", "\n", "        ", "preprocessing", ".", "smart_truncate_cache", "(", "\n", "cache", "=", "shared_caching", ".", "ChunkedFilesDataCache", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "phase", ")", ")", ",", "\n", "max_seq_length", "=", "args", ".", "max_seq_length", ",", "\n", "max_valid_length", "=", "max_valid_length_recorder", ".", "max_valid_length", ",", "\n", "verbose", "=", "True", ",", "\n", ")", "\n", "py_io", ".", "write_json", "(", "\n", "data", "=", "{", "\"truncated_to\"", ":", "int", "(", "max_valid_length_recorder", ".", "max_valid_length", ")", "}", ",", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "phase", ",", "\"smart_truncate.json\"", ")", ",", "\n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.simple.tokenize_and_cache.main": [[122, 182], ["jiant.create_task_from_config_path", "jiant.build_featurization_spec", "jiant.get_tokenizer", "args.phases.split", "set", "tokenize_and_cache.chunk_and_save", "os.path.join", "tasks.create_task_from_config_path.get_val_examples", "tokenize_and_cache.chunk_and_save", "jiant.get_evaluation_scheme_for_task", "jiant.chunk_and_save", "os.path.join", "os.path.join", "tokenize_and_cache.chunk_and_save", "os.path.join", "jiant.write_json", "tasks.create_task_from_config_path.get_train_examples", "evaluate.get_evaluation_scheme_for_task.get_labels_from_cache_and_examples", "args.to_dict", "os.path.join", "tasks.create_task_from_config_path.get_test_examples", "os.path.join", "jiant.ChunkedFilesDataCache", "os.path.join"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.retrieval.create_task_from_config_path", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_resolution.build_featurization_spec", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_setup.get_tokenizer", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.simple.tokenize_and_cache.chunk_and_save", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.BaseSquadStyleTask.get_val_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.simple.tokenize_and_cache.chunk_and_save", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.get_evaluation_scheme_for_task", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.simple.tokenize_and_cache.chunk_and_save", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.simple.tokenize_and_cache.chunk_and_save", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.write_json", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.BaseSquadStyleTask.get_train_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.evaluate.core.MLMEvaluationScheme.get_labels_from_cache_and_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.ValState.to_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.squad_style.core.BaseSquadStyleTask.get_test_examples"], ["    ", "task", "=", "tasks", ".", "create_task_from_config_path", "(", "config_path", "=", "args", ".", "task_config_path", ",", "verbose", "=", "True", ")", "\n", "feat_spec", "=", "model_resolution", ".", "build_featurization_spec", "(", "\n", "model_type", "=", "args", ".", "model_type", ",", "max_seq_length", "=", "args", ".", "max_seq_length", ",", "\n", ")", "\n", "tokenizer", "=", "model_setup", ".", "get_tokenizer", "(", "\n", "model_type", "=", "args", ".", "model_type", ",", "tokenizer_path", "=", "args", ".", "model_tokenizer_path", ",", "\n", ")", "\n", "if", "isinstance", "(", "args", ".", "phases", ",", "str", ")", ":", "\n", "        ", "phases", "=", "args", ".", "phases", ".", "split", "(", "\",\"", ")", "\n", "", "else", ":", "\n", "        ", "phases", "=", "args", ".", "phases", "\n", "", "assert", "set", "(", "phases", ")", "<=", "{", "PHASE", ".", "TRAIN", ",", "PHASE", ".", "VAL", ",", "PHASE", ".", "TEST", "}", "\n", "\n", "paths_dict", "=", "{", "}", "\n", "\n", "if", "PHASE", ".", "TRAIN", "in", "phases", ":", "\n", "        ", "chunk_and_save", "(", "\n", "phase", "=", "PHASE", ".", "TRAIN", ",", "\n", "examples", "=", "task", ".", "get_train_examples", "(", ")", ",", "\n", "feat_spec", "=", "feat_spec", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "args", "=", "args", ",", "\n", ")", "\n", "paths_dict", "[", "\"train\"", "]", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "PHASE", ".", "TRAIN", ")", "\n", "\n", "", "if", "PHASE", ".", "VAL", "in", "phases", ":", "\n", "        ", "val_examples", "=", "task", ".", "get_val_examples", "(", ")", "\n", "chunk_and_save", "(", "\n", "phase", "=", "PHASE", ".", "VAL", ",", "\n", "examples", "=", "val_examples", ",", "\n", "feat_spec", "=", "feat_spec", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "args", "=", "args", ",", "\n", ")", "\n", "evaluation_scheme", "=", "evaluate", ".", "get_evaluation_scheme_for_task", "(", "task", ")", "\n", "shared_caching", ".", "chunk_and_save", "(", "\n", "data", "=", "evaluation_scheme", ".", "get_labels_from_cache_and_examples", "(", "\n", "task", "=", "task", ",", "\n", "cache", "=", "shared_caching", ".", "ChunkedFilesDataCache", "(", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "PHASE", ".", "VAL", ")", "\n", ")", ",", "\n", "examples", "=", "val_examples", ",", "\n", ")", ",", "\n", "chunk_size", "=", "args", ".", "chunk_size", ",", "\n", "data_args", "=", "args", ".", "to_dict", "(", ")", ",", "\n", "output_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\"val_labels\"", ")", ",", "\n", ")", "\n", "paths_dict", "[", "PHASE", ".", "VAL", "]", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "PHASE", ".", "VAL", ")", "\n", "paths_dict", "[", "\"val_labels\"", "]", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\"val_labels\"", ")", "\n", "\n", "", "if", "PHASE", ".", "TEST", "in", "phases", ":", "\n", "        ", "chunk_and_save", "(", "\n", "phase", "=", "PHASE", ".", "TEST", ",", "\n", "examples", "=", "task", ".", "get_test_examples", "(", ")", ",", "\n", "feat_spec", "=", "feat_spec", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "args", "=", "args", ",", "\n", ")", "\n", "paths_dict", "[", "PHASE", ".", "TEST", "]", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "PHASE", ".", "TEST", ")", "\n", "\n", "", "if", "not", "args", ".", "skip_write_output_paths", ":", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.simple.runscript.RunConfiguration._post_init": [[67, 80], ["jiant.RunConfiguration.train_tasks.split", "jiant.RunConfiguration.val_tasks.split", "jiant.RunConfiguration.test_tasks.split"], "methods", ["None"], ["", "@", "zconf", ".", "run_config", "\n", "class", "ResumeConfiguration", "(", "zconf", ".", "RunConfig", ")", ":", "\n", "    ", "checkpoint_path", "=", "zconf", ".", "attr", "(", "type", "=", "str", ")", "\n", "\n", "\n", "", "def", "setup_runner", "(", "\n", "args", ":", "RunConfiguration", ",", "\n", "jiant_task_container", ":", "container_setup", ".", "JiantTaskContainer", ",", "\n", "quick_init_out", ",", "\n", "verbose", ":", "bool", "=", "True", ",", "\n", ")", "->", "jiant_runner", ".", "JiantRunner", ":", "\n", "    "]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.simple.runscript.create_and_write_task_configs": [[82, 94], ["os.makedirs", "os.path.join", "jiant.create_and_write_task_config", "os.path.join"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.write_task_configs.create_and_write_task_config"], ["\n", "# TODO document why the distributed.only_first_process() context manager is being used here.", "\n", "with", "distributed", ".", "only_first_process", "(", "local_rank", "=", "args", ".", "local_rank", ")", ":", "\n", "# load the model", "\n", "        ", "jiant_model", "=", "jiant_model_setup", ".", "setup_jiant_model", "(", "\n", "model_type", "=", "args", ".", "model_type", ",", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.simple.runscript.run_simple": [[96, 223], ["jiant.utils.python.logic.replace_none", "jiant.SimpleAPIMultiTaskConfigurator().create_config", "os.makedirs", "os.path.join", "jiant.write_json", "jiant.run_loop", "jiant.only_first_process", "sorted", "runscript.create_and_write_task_configs", "os.path.join", "any", "os.path.join", "jiant.RunConfiguration", "os.path.join", "list", "os.path.exists", "print", "jiant.lookup_and_export_model", "phase_task_dict.items", "print", "jiant.main", "jiant.SimpleAPIMultiTaskConfigurator", "set", "os.path.join", "os.path.join", "jiant.RunConfiguration", "task_name.startswith", "os.path.join", "os.path.join", "os.path.join", "bool", "bool", "os.path.join", "phases_to_do.append", "os.path.join", "os.path.join", "torch.cuda.device_count", "os.path.exists", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.logic.replace_none", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.write_json", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runscript.run_loop", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.distributed.only_first_process", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.simple.runscript.create_and_write_task_configs", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.preproc.export_model.lookup_and_export_model", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.examples.create_model.main"], ["tokenizer_path", "=", "args", ".", "model_tokenizer_path", ",", "\n", "task_dict", "=", "jiant_task_container", ".", "task_dict", ",", "\n", "taskmodels_config", "=", "jiant_task_container", ".", "taskmodels_config", ",", "\n", ")", "\n", "jiant_model_setup", ".", "delegate_load_from_path", "(", "\n", "jiant_model", "=", "jiant_model", ",", "weights_path", "=", "args", ".", "model_path", ",", "load_mode", "=", "args", ".", "model_load_mode", "\n", ")", "\n", "jiant_model", ".", "to", "(", "quick_init_out", ".", "device", ")", "\n", "\n", "", "optimizer_scheduler", "=", "model_setup", ".", "create_optimizer", "(", "\n", "model", "=", "jiant_model", ",", "\n", "learning_rate", "=", "args", ".", "learning_rate", ",", "\n", "t_total", "=", "jiant_task_container", ".", "global_train_config", ".", "max_steps", ",", "\n", "warmup_steps", "=", "jiant_task_container", ".", "global_train_config", ".", "warmup_steps", ",", "\n", "warmup_proportion", "=", "None", ",", "\n", "optimizer_type", "=", "args", ".", "optimizer_type", ",", "\n", "verbose", "=", "verbose", ",", "\n", ")", "\n", "jiant_model", ",", "optimizer", "=", "model_setup", ".", "raw_special_model_setup", "(", "\n", "model", "=", "jiant_model", ",", "\n", "optimizer", "=", "optimizer_scheduler", ".", "optimizer", ",", "\n", "fp16", "=", "args", ".", "fp16", ",", "\n", "fp16_opt_level", "=", "args", ".", "fp16_opt_level", ",", "\n", "n_gpu", "=", "quick_init_out", ".", "n_gpu", ",", "\n", "local_rank", "=", "args", ".", "local_rank", ",", "\n", ")", "\n", "optimizer_scheduler", ".", "optimizer", "=", "optimizer", "\n", "rparams", "=", "jiant_runner", ".", "RunnerParameters", "(", "\n", "local_rank", "=", "args", ".", "local_rank", ",", "\n", "n_gpu", "=", "quick_init_out", ".", "n_gpu", ",", "\n", "fp16", "=", "args", ".", "fp16", ",", "\n", "max_grad_norm", "=", "args", ".", "max_grad_norm", ",", "\n", ")", "\n", "runner", "=", "jiant_runner", ".", "JiantRunner", "(", "\n", "jiant_task_container", "=", "jiant_task_container", ",", "\n", "jiant_model", "=", "jiant_model", ",", "\n", "optimizer_scheduler", "=", "optimizer_scheduler", ",", "\n", "device", "=", "quick_init_out", ".", "device", ",", "\n", "rparams", "=", "rparams", ",", "\n", "log_writer", "=", "quick_init_out", ".", "log_writer", ",", "\n", ")", "\n", "return", "runner", "\n", "\n", "\n", "", "def", "run_loop", "(", "args", ":", "RunConfiguration", ",", "checkpoint", "=", "None", ")", ":", "\n", "    ", "is_resumed", "=", "checkpoint", "is", "not", "None", "\n", "quick_init_out", "=", "initialization", ".", "quick_init", "(", "args", "=", "args", ",", "verbose", "=", "True", ")", "\n", "print", "(", "quick_init_out", ".", "n_gpu", ")", "\n", "with", "quick_init_out", ".", "log_writer", ".", "log_context", "(", ")", ":", "\n", "        ", "jiant_task_container", "=", "container_setup", ".", "create_jiant_task_container_from_json", "(", "\n", "jiant_task_container_config_path", "=", "args", ".", "jiant_task_container_config_path", ",", "verbose", "=", "True", ",", "\n", ")", "\n", "runner", "=", "setup_runner", "(", "\n", "args", "=", "args", ",", "\n", "jiant_task_container", "=", "jiant_task_container", ",", "\n", "quick_init_out", "=", "quick_init_out", ",", "\n", "verbose", "=", "True", ",", "\n", ")", "\n", "if", "is_resumed", ":", "\n", "            ", "runner", ".", "load_state", "(", "checkpoint", "[", "\"runner_state\"", "]", ")", "\n", "del", "checkpoint", "[", "\"runner_state\"", "]", "\n", "\n", "# allow custom checkpoint name", "\n", "", "if", "args", ".", "custom_checkpoint_name", ":", "\n", "            ", "checkpoint_name", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "f\"{args.custom_checkpoint_name}.p\"", ")", "\n", "", "else", ":", "\n", "            ", "checkpoint_name", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\"checkpoint.p\"", ")", "\n", "\n", "", "checkpoint_saver", "=", "jiant_runner", ".", "CheckpointSaver", "(", "\n", "metadata", "=", "{", "\"args\"", ":", "args", ".", "to_dict", "(", ")", "}", ",", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "checkpoint_name", ")", ",", "\n", ")", "\n", "if", "args", ".", "do_train", ":", "\n", "            ", "metarunner", "=", "jiant_metarunner", ".", "JiantMetarunner", "(", "\n", "runner", "=", "runner", ",", "\n", "save_every_steps", "=", "args", ".", "save_every_steps", ",", "\n", "eval_every_steps", "=", "args", ".", "eval_every_steps", ",", "\n", "save_checkpoint_every_steps", "=", "args", ".", "save_checkpoint_every_steps", ",", "\n", "no_improvements_for_n_evals", "=", "args", ".", "no_improvements_for_n_evals", ",", "\n", "checkpoint_saver", "=", "checkpoint_saver", ",", "\n", "output_dir", "=", "args", ".", "output_dir", ",", "\n", "verbose", "=", "True", ",", "\n", "save_best_model", "=", "args", ".", "do_save", ",", "\n", "load_best_model", "=", "True", ",", "\n", "log_writer", "=", "quick_init_out", ".", "log_writer", ",", "\n", ")", "\n", "if", "is_resumed", ":", "\n", "                ", "metarunner", ".", "load_state", "(", "checkpoint", "[", "\"metarunner_state\"", "]", ")", "\n", "del", "checkpoint", "[", "\"metarunner_state\"", "]", "\n", "", "metarunner", ".", "run_train_loop", "(", ")", "\n", "\n", "", "if", "args", ".", "do_save", ":", "\n", "# allow custom best model name", "\n", "            ", "if", "args", ".", "custom_best_name", ":", "\n", "                ", "best_model_name", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "f\"{args.custom_best_name}.p\"", ")", "\n", "", "else", ":", "\n", "                ", "best_model_name", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\"model.p\"", ")", "\n", "\n", "", "torch", ".", "save", "(", "\n", "torch_utils", ".", "get_model_for_saving", "(", "runner", ".", "jiant_model", ")", ".", "state_dict", "(", ")", ",", "\n", "best_model_name", ",", "\n", ")", "\n", "\n", "", "if", "args", ".", "do_val", ":", "\n", "            ", "val_results_dict", "=", "runner", ".", "run_val", "(", "\n", "task_name_list", "=", "runner", ".", "jiant_task_container", ".", "task_run_config", ".", "val_task_list", ",", "\n", "return_preds", "=", "args", ".", "write_val_preds", ",", "\n", ")", "\n", "jiant_evaluate", ".", "write_val_results", "(", "\n", "val_results_dict", "=", "val_results_dict", ",", "\n", "metrics_aggregator", "=", "runner", ".", "jiant_task_container", ".", "metrics_aggregator", ",", "\n", "output_dir", "=", "args", ".", "output_dir", ",", "\n", "verbose", "=", "True", ",", "\n", "val_jsonl", "=", "args", ".", "val_jsonl", ",", "\n", ")", "\n", "\n", "if", "args", ".", "args_jsonl", ":", "\n", "# match arguments with verbose results", "\n", "                ", "initialization", ".", "save_args", "(", "args", ",", "verbose", "=", "True", ",", "matched", "=", "True", ")", "\n", "\n", "", "if", "args", ".", "write_val_preds", ":", "\n", "                ", "if", "args", ".", "extract_exp_name_valpreds", ":", "\n", "                    ", "exp_name", "=", "os", ".", "path", ".", "basename", "(", "args", ".", "jiant_task_container_config_path", ")", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "val_fname", "=", "f\"val_preds_{exp_name}.p\"", "\n", "", "else", ":", "\n", "                    ", "val_fname", "=", "\"val_preds.p\"", "\n", "", "jiant_evaluate", ".", "write_preds", "(", "\n", "eval_results_dict", "=", "val_results_dict", ",", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.simple.runscript.dry_run": [[227, 356], ["jiant.utils.python.logic.replace_none", "print", "sorted", "print", "print", "print", "print", "print", "print", "print", "list", "print", "phase_task_dict.items", "print", "s.strip", "any", "os.path.join", "getattr", "s.strip", "os.path.join", "set", "hasattr", "phases_to_do.append", "task_name.startswith", "os.path.join", "os.path.join", "os.path.join", "torch.cuda.device_count", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.logic.replace_none"], ["            ", "assert", "not", "args", ".", "write_val_preds", "\n", "\n", "", "if", "args", ".", "write_test_preds", ":", "\n", "            ", "test_results_dict", "=", "runner", ".", "run_test", "(", "\n", "task_name_list", "=", "runner", ".", "jiant_task_container", ".", "task_run_config", ".", "test_task_list", ",", "\n", ")", "\n", "jiant_evaluate", ".", "write_preds", "(", "\n", "eval_results_dict", "=", "test_results_dict", ",", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\"test_preds.p\"", ")", ",", "\n", ")", "\n", "\n", "", "", "if", "args", ".", "delete_checkpoint_if_done", "and", "args", ".", "save_checkpoint_every_steps", ":", "\n", "        ", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "checkpoint_name", ")", ")", "\n", "\n", "\n", "", "", "def", "run_resume", "(", "args", ":", "ResumeConfiguration", ")", ":", "\n", "    ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "checkpoint_path", ")", "\n", "args", "=", "RunConfiguration", ".", "from_dict", "(", "checkpoint", "[", "\"metadata\"", "]", "[", "\"args\"", "]", ")", "\n", "run_loop", "(", "args", "=", "args", ",", "checkpoint", "=", "checkpoint", ")", "\n", "\n", "\n", "", "def", "main", "(", ")", ":", "\n", "    ", "mode", ",", "cl_args", "=", "zconf", ".", "get_mode_and_cl_args", "(", ")", "\n", "if", "mode", "==", "\"run\"", ":", "\n", "        ", "run_loop", "(", "RunConfiguration", ".", "default_run_cli", "(", "cl_args", "=", "cl_args", ")", ")", "\n", "", "elif", "mode", "==", "\"continue\"", ":", "\n", "        ", "run_resume", "(", "ResumeConfiguration", ".", "default_run_cli", "(", "cl_args", "=", "cl_args", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "zconf", ".", "ModeLookupError", "(", "mode", ")", "\n", "\n", "\n", "", "", "if", "__name__", "==", "\"__main__\"", ":", "\n", "    ", "main", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.simple.runscript.main": [[358, 367], ["jiant.get_mode_and_cl_args", "RunConfiguration.default_run_cli", "runscript.run_simple", "runscript.dry_run", "jiant.ModeLookupError"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.get_mode_and_cl_args", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.RunConfig.default_run_cli", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.simple.runscript.run_simple", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.simple.runscript.dry_run"], []], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.preproc.export_model.lookup_and_export_model": [[16, 23], ["export_model.get_model_and_tokenizer_classes", "export_model.export_model"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.preproc.export_model.get_model_and_tokenizer_classes", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.preproc.export_model.export_model"], ["", "def", "lookup_and_export_model", "(", "model_type", ",", "output_base_path", ")", ":", "\n", "    ", "model_class", ",", "tokenizer_class", "=", "get_model_and_tokenizer_classes", "(", "model_type", ")", "\n", "export_model", "(", "\n", "model_type", "=", "model_type", ",", "\n", "output_base_path", "=", "output_base_path", ",", "\n", "model_class", "=", "model_class", ",", "\n", "tokenizer_class", "=", "tokenizer_class", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.preproc.export_model.export_model": [[26, 46], ["os.path.join", "os.path.join", "os.makedirs", "os.makedirs", "os.path.join", "os.path.join", "model_class.from_pretrained", "torch.save", "jiant.write_json", "tokenizer_class.from_pretrained", "tokenizer_class.from_pretrained.save_pretrained", "jiant.write_json", "model_class.from_pretrained.state_dict", "model_class.from_pretrained.config.to_dict", "os.path.join"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.CheckpointSaver.save", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.write_json", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.write_json", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_setup.OptimizerScheduler.state_dict", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.ValState.to_dict"], ["", "def", "export_model", "(", "model_type", ",", "output_base_path", ",", "model_class", ",", "tokenizer_class", ")", ":", "\n", "    ", "tokenizer_fol_path", "=", "os", ".", "path", ".", "join", "(", "output_base_path", ",", "\"tokenizer\"", ")", "\n", "model_fol_path", "=", "os", ".", "path", ".", "join", "(", "output_base_path", ",", "\"model\"", ")", "\n", "os", ".", "makedirs", "(", "tokenizer_fol_path", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "model_fol_path", ",", "exist_ok", "=", "True", ")", "\n", "\n", "model_path", "=", "os", ".", "path", ".", "join", "(", "model_fol_path", ",", "f\"{model_type}.p\"", ")", "\n", "model_config_path", "=", "os", ".", "path", ".", "join", "(", "model_fol_path", ",", "f\"{model_type}.json\"", ")", "\n", "model", "=", "model_class", ".", "from_pretrained", "(", "model_type", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "model_path", ")", "\n", "py_io", ".", "write_json", "(", "model", ".", "config", ".", "to_dict", "(", ")", ",", "model_config_path", ")", "\n", "tokenizer", "=", "tokenizer_class", ".", "from_pretrained", "(", "model_type", ")", "\n", "tokenizer", ".", "save_pretrained", "(", "tokenizer_fol_path", ")", "\n", "config", "=", "{", "\n", "\"model_type\"", ":", "model_type", ",", "\n", "\"model_path\"", ":", "model_path", ",", "\n", "\"model_config_path\"", ":", "model_config_path", ",", "\n", "\"model_tokenizer_path\"", ":", "tokenizer_fol_path", ",", "\n", "}", "\n", "py_io", ".", "write_json", "(", "config", ",", "os", ".", "path", ".", "join", "(", "output_base_path", ",", "f\"config.json\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.preproc.export_model.get_model_and_tokenizer_classes": [[48, 63], ["model_type.split", "model_type.startswith", "model_type.startswith", "model_type.startswith", "KeyError", "model_type.split"], "function", ["None"], ["", "def", "get_model_and_tokenizer_classes", "(", "model_type", ")", ":", "\n", "    ", "class_lookup", "=", "{", "\n", "\"bert\"", ":", "(", "transformers", ".", "BertForPreTraining", ",", "transformers", ".", "BertTokenizer", ")", ",", "\n", "\"xlm-clm-\"", ":", "(", "transformers", ".", "XLMWithLMHeadModel", ",", "transformers", ".", "XLMTokenizer", ")", ",", "\n", "\"roberta\"", ":", "(", "transformers", ".", "RobertaForMaskedLM", ",", "transformers", ".", "RobertaTokenizer", ")", ",", "\n", "\"albert\"", ":", "(", "transformers", ".", "AlbertForMaskedLM", ",", "transformers", ".", "AlbertTokenizer", ")", ",", "\n", "}", "\n", "if", "model_type", ".", "split", "(", "\"-\"", ")", "[", "0", "]", "in", "class_lookup", ":", "\n", "        ", "return", "class_lookup", "[", "model_type", ".", "split", "(", "\"-\"", ")", "[", "0", "]", "]", "\n", "", "elif", "model_type", ".", "startswith", "(", "\"xlm-mlm-\"", ")", "or", "model_type", ".", "startswith", "(", "\"xlm-clm-\"", ")", ":", "\n", "        ", "return", "transformers", ".", "XLMWithLMHeadModel", ",", "transformers", ".", "XLMTokenizer", "\n", "", "elif", "model_type", ".", "startswith", "(", "\"xlm-roberta-\"", ")", ":", "\n", "        ", "return", "transformers", ".", "XLMRobertaForMaskedLM", ",", "transformers", ".", "XLMRobertaTokenizer", "\n", "", "else", ":", "\n", "        ", "raise", "KeyError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.preproc.export_model.main": [[65, 69], ["RunConfiguration.default_run_cli", "export_model.lookup_and_export_model"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.RunConfig.default_run_cli", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.preproc.export_model.lookup_and_export_model"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "RunConfiguration", ".", "default_run_cli", "(", ")", "\n", "lookup_and_export_model", "(", "\n", "model_type", "=", "args", ".", "model_type", ",", "output_base_path", "=", "args", ".", "output_base_path", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.preproc.export_glue_data.read_tsv": [[120, 127], ["open", "list", "csv.reader"], "function", ["None"], ["def", "read_tsv", "(", "input_file", ",", "quotechar", "=", "None", ",", "skiprows", "=", "None", ")", ":", "\n", "    ", "\"\"\"Reads a tab separated value file.\"\"\"", "\n", "with", "open", "(", "input_file", ",", "\"r\"", ",", "encoding", "=", "\"utf-8-sig\"", ")", "as", "f", ":", "\n", "        ", "result", "=", "list", "(", "csv", ".", "reader", "(", "f", ",", "delimiter", "=", "\"\\t\"", ",", "quotechar", "=", "quotechar", ")", ")", "\n", "", "if", "skiprows", ":", "\n", "        ", "result", "=", "result", "[", "skiprows", ":", "]", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.preproc.export_glue_data.get_full_examples": [[129, 151], ["task_metadata[].items", "phase_config.get", "phase_config.get.get", "export_glue_data.read_tsv", "os.path.join", "phase_config.get.get", "phase_config[].items", "examples.append"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.preproc.export_glue_data.read_tsv"], ["", "def", "get_full_examples", "(", "task_name", ",", "input_base_path", ")", ":", "\n", "    ", "task_metadata", "=", "GLUE_CONVERSION", "[", "task_name", "]", "\n", "all_examples", "=", "{", "}", "\n", "for", "phase", ",", "phase_config", "in", "task_metadata", "[", "\"data\"", "]", ".", "items", "(", ")", ":", "\n", "        ", "meta_dict", "=", "phase_config", ".", "get", "(", "\"meta\"", ",", "{", "}", ")", "\n", "filename", "=", "meta_dict", ".", "get", "(", "\"filename\"", ",", "phase", ")", "\n", "rows", "=", "read_tsv", "(", "\n", "os", ".", "path", ".", "join", "(", "input_base_path", ",", "task_metadata", "[", "\"dir_name\"", "]", ",", "f\"{filename}.tsv\"", ")", ",", "\n", "skiprows", "=", "meta_dict", ".", "get", "(", "\"skiprows\"", ")", ",", "\n", ")", "\n", "examples", "=", "[", "]", "\n", "for", "row", "in", "rows", ":", "\n", "            ", "try", ":", "\n", "                ", "example", "=", "{", "}", "\n", "for", "col", ",", "i", "in", "phase_config", "[", "\"cols\"", "]", ".", "items", "(", ")", ":", "\n", "                    ", "example", "[", "col", "]", "=", "row", "[", "i", "]", "\n", "", "examples", ".", "append", "(", "example", ")", "\n", "", "except", "IndexError", ":", "\n", "                ", "if", "task_name", "==", "\"qqp\"", ":", "\n", "                    ", "continue", "\n", "", "", "", "all_examples", "[", "phase", "]", "=", "examples", "\n", "", "return", "all_examples", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.preproc.export_glue_data.convert_glue_data": [[153, 164], ["os.makedirs", "export_glue_data.get_full_examples", "get_full_examples.items", "os.path.join", "jiant.write_jsonl"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.preproc.export_glue_data.get_full_examples", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.write_jsonl"], ["", "def", "convert_glue_data", "(", "input_base_path", ",", "task_data_path", ",", "task_name", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "task_data_path", ",", "exist_ok", "=", "True", ")", "\n", "task_all_examples", "=", "get_full_examples", "(", "task_name", "=", "task_name", ",", "input_base_path", "=", "input_base_path", ")", "\n", "paths_dict", "=", "{", "}", "\n", "for", "phase", ",", "phase_data", "in", "task_all_examples", ".", "items", "(", ")", ":", "\n", "        ", "phase_data_path", "=", "os", ".", "path", ".", "join", "(", "task_data_path", ",", "f\"{phase}.jsonl\"", ")", "\n", "py_io", ".", "write_jsonl", "(", "\n", "data", "=", "phase_data", ",", "path", "=", "phase_data_path", ",", "\n", ")", "\n", "paths_dict", "[", "phase", "]", "=", "phase_data", "\n", "", "return", "paths_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.preproc.export_glue_data.preprocess_all_glue_data": [[166, 178], ["os.makedirs", "os.makedirs", "os.makedirs", "tqdm.tqdm", "os.path.join", "os.path.join", "os.path.join", "export_glue_data.convert_glue_data", "jiant.write_json", "os.path.join"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.display.tqdm", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.preproc.export_glue_data.convert_glue_data", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.write_json"], ["", "def", "preprocess_all_glue_data", "(", "input_base_path", ",", "output_base_path", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "output_base_path", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "output_base_path", ",", "\"data\"", ")", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "output_base_path", ",", "\"configs\"", ")", ",", "exist_ok", "=", "True", ")", "\n", "for", "task_name", "in", "tqdm", ".", "tqdm", "(", "GLUE_CONVERSION", ")", ":", "\n", "        ", "task_data_path", "=", "os", ".", "path", ".", "join", "(", "output_base_path", ",", "\"data\"", ",", "task_name", ")", "\n", "paths_dict", "=", "convert_glue_data", "(", "\n", "input_base_path", "=", "input_base_path", ",", "task_data_path", "=", "task_data_path", ",", "task_name", "=", "task_name", ",", "\n", ")", "\n", "config", "=", "{", "\"task\"", ":", "task_name", ",", "\"paths\"", ":", "paths_dict", ",", "\"name\"", ":", "task_name", "}", "\n", "py_io", ".", "write_json", "(", "\n", "data", "=", "config", ",", "path", "=", "os", ".", "path", ".", "join", "(", "output_base_path", ",", "\"configs\"", ",", "f\"{task_name}.json\"", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.preproc.export_glue_data.main": [[187, 191], ["RunConfiguration.default_run_cli", "export_glue_data.preprocess_all_glue_data"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.RunConfig.default_run_cli", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.preproc.export_glue_data.preprocess_all_glue_data"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "RunConfiguration", ".", "default_run_cli", "(", ")", "\n", "preprocess_all_glue_data", "(", "\n", "input_base_path", "=", "args", ".", "input_base_path", ",", "output_base_path", "=", "args", ".", "output_base_path", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.counterfactual.make_data_config.generate_data_config": [[9, 40], ["os.path.join", "os.makedirs", "jiant.write_json", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "KeyError", "os.path.join"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.write_json"], ["def", "generate_data_config", "(", "\n", "data_base_path", ",", "\n", "output_base_path", ",", "\n", "train", ",", "\n", "val", "\n", ")", ":", "\n", "    ", "if", "'cnli'", "in", "train", ":", "\n", "        ", "config", "=", "{", "\"task\"", ":", "\"counterfactual_nli\"", ",", "\"paths\"", ":", "{", "}", ",", "\"name\"", ":", "\"counterfactual_nli\"", "}", "\n", "\n", "if", "\"seed\"", "in", "train", ":", "\n", "            ", "config", "[", "\"paths\"", "]", "[", "\"train\"", "]", "=", "os", ".", "path", ".", "join", "(", "data_base_path", ",", "\"counterfactual_nli\"", ",", "\"train_seed.jsonl\"", ")", "\n", "", "else", ":", "\n", "            ", "config", "[", "\"paths\"", "]", "[", "\"train\"", "]", "=", "os", ".", "path", ".", "join", "(", "data_base_path", ",", "\"counterfactual_nli\"", ",", "\"train.jsonl\"", ")", "\n", "", "config", "[", "\"paths\"", "]", "[", "\"test\"", "]", "=", "os", ".", "path", ".", "join", "(", "data_base_path", ",", "\"counterfactual_nli\"", ",", "\"test.jsonl\"", ")", "\n", "\n", "val_file", "=", "\"cnli\"", "\n", "\n", "", "elif", "'snli'", "in", "train", ":", "\n", "        ", "config", "=", "{", "\"task\"", ":", "\"snli\"", ",", "\"paths\"", ":", "{", "}", ",", "\"name\"", ":", "\"snli\"", "}", "\n", "config", "[", "\"paths\"", "]", "[", "\"train\"", "]", "=", "os", ".", "path", ".", "join", "(", "data_base_path", ",", "train", ",", "\"train.jsonl\"", ")", "\n", "config", "[", "\"paths\"", "]", "[", "\"test\"", "]", "=", "os", ".", "path", ".", "join", "(", "data_base_path", ",", "train", ",", "\"test.jsonl\"", ")", "\n", "\n", "val_file", "=", "\"snli\"", "\n", "", "else", ":", "\n", "        ", "raise", "KeyError", "(", "f'{train} not supported'", ")", "\n", "\n", "", "config", "[", "\"paths\"", "]", "[", "\"val\"", "]", "=", "os", ".", "path", ".", "join", "(", "data_base_path", ",", "\"val\"", ",", "val", ",", "f\"{val_file}.jsonl\"", ")", "\n", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "output_base_path", ",", "\"configs\"", ")", ",", "exist_ok", "=", "True", ")", "\n", "py_io", ".", "write_json", "(", "\n", "data", "=", "config", ",", "path", "=", "os", ".", "path", ".", "join", "(", "output_base_path", ",", "\"configs\"", ",", "f\"{train}-{val}.json\"", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.counterfactual.make_data_config.main": [[54, 61], ["RunConfiguration.default_run_cli", "make_data_config.generate_data_config"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.RunConfig.default_run_cli", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.counterfactual.make_data_config.generate_data_config"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "RunConfiguration", ".", "default_run_cli", "(", ")", "\n", "generate_data_config", "(", "\n", "data_base_path", "=", "args", ".", "data_base_path", ",", "\n", "output_base_path", "=", "args", ".", "output_base_path", ",", "\n", "train", "=", "args", ".", "train", ",", "\n", "val", "=", "args", ".", "val", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.counterfactual.generate_exp.main": [[45, 102], ["os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "datetime.datetime.now().strftime", "train2name.get", "range", "os.path.join", "os.path.join", "generate_exp.sample_hyper_parameters", "os.path.join", "jiant.write_json", "commands.append", "open", "datetime.datetime.now", "generate_exp.single_task_config", "generate_exp.single_task_command", "os.path.join", "f.write"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.counterfactual.generate_exp.sample_hyper_parameters", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.write_json", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.counterfactual.generate_exp.single_task_config", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.counterfactual.generate_exp.single_task_command"], ["", "def", "main", "(", "args", ":", "RunConfiguration", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "args", ".", "exp_command_path", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "args", ".", "run_config_path", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "args", ".", "output_path", ",", "exist_ok", "=", "True", ")", "\n", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "args", ".", "run_config_path", ",", "f'{args.train}-{args.val}'", ")", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_path", ",", "f'{args.train}-{args.val}'", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "now", "=", "dt", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y%m%d%H%M\"", ")", "\n", "commands", "=", "[", "]", "\n", "\n", "val2name", "=", "{", "\n", "'stress'", ":", "'stresseval'", ",", "\n", "'mnli'", ":", "'mnlieval'", ",", "\n", "'glue_diagnostic'", ":", "'diagnosticeval'", ",", "\n", "}", "\n", "\n", "train2name", "=", "{", "\n", "'cnli'", ":", "'counterfactual_nli'", ",", "\n", "'cnli_seed'", ":", "'counterfactual_nlisnlionly'", ",", "\n", "}", "\n", "\n", "if", "train2name", ".", "get", "(", "args", ".", "train", ",", "False", ")", ":", "\n", "        ", "task_name", "=", "train2name", "[", "args", ".", "train", "]", "\n", "", "else", ":", "\n", "        ", "task_name", "=", "args", ".", "train", "\n", "\n", "", "task_name", "+=", "f'-{val2name[args.val]}'", "\n", "\n", "for", "idx", "in", "range", "(", "args", ".", "n_trials", ")", ":", "\n", "        ", "sample_seed", ",", "sample_lr", ",", "sample_bs", "=", "sample_hyper_parameters", "(", "boolq", "=", "args", ".", "boolq", ")", "\n", "exp_name", "=", "f\"{task_name}-bs_{sample_bs}-lr_{sample_lr}-seed_{sample_seed}-epochs_{args.epochs}\"", "\n", "task_container_config", "=", "os", ".", "path", ".", "join", "(", "args", ".", "run_config_path", ",", "f'{args.train}-{args.val}'", ",", "f\"{exp_name}.json\"", ")", "\n", "\n", "py_io", ".", "write_json", "(", "\n", "single_task_config", "(", "\n", "task_config_path", "=", "args", ".", "task_config_path", ",", "\n", "task_cache_base_path", "=", "args", ".", "task_cache_base_path", ",", "\n", "train_batch_size", "=", "sample_bs", ",", "\n", "epochs", "=", "args", ".", "epochs", ",", "\n", "batch_clustering", "=", "args", ".", "batch_clustering", ",", "\n", ")", ",", "\n", "path", "=", "task_container_config", ",", "\n", ")", "\n", "commands", ".", "append", "(", "\n", "single_task_command", "(", "\n", "args", "=", "args", ",", "\n", "task_container_config", "=", "task_container_config", ",", "\n", "lr", "=", "sample_lr", ",", "\n", "seed", "=", "sample_seed", ",", "\n", "exp_name", "=", "exp_name", ",", "\n", ")", "\n", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "exp_command_path", ",", "f'submit_exp_{task_name}_{now}.sh'", ")", ",", "\"a\"", ")", "as", "f", ":", "\n", "        ", "for", "command", "in", "commands", ":", "\n", "            ", "f", ".", "write", "(", "command", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.counterfactual.generate_exp.sample_hyper_parameters": [[104, 118], ["int", "numpy.random.rand", "numpy.random.randint", "numpy.random.randint", "len", "len"], "function", ["None"], ["", "", "", "def", "sample_hyper_parameters", "(", "boolq", "=", "False", ")", ":", "\n", "    ", "seed_max", "=", "1e6", "\n", "if", "boolq", ":", "\n", "        ", "lr_cands", "=", "[", "1e-5", "]", "\n", "bs_cands", "=", "[", "16", ",", "32", "]", "\n", "", "else", ":", "\n", "        ", "lr_cands", "=", "[", "1e-5", ",", "2e-5", ",", "3e-5", "]", "\n", "bs_cands", "=", "[", "32", ",", "64", "]", "\n", "\n", "", "sample_seed", "=", "int", "(", "rand", "(", ")", "*", "seed_max", ")", "\n", "sample_lr", "=", "lr_cands", "[", "randint", "(", "len", "(", "lr_cands", ")", ")", "]", "\n", "sample_bs", "=", "bs_cands", "[", "randint", "(", "len", "(", "bs_cands", ")", ")", "]", "\n", "\n", "return", "sample_seed", ",", "sample_lr", ",", "sample_bs", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.counterfactual.generate_exp.get_num_examples_from_cache": [[119, 122], ["os.path.join", "torch.load"], "function", ["None"], ["", "def", "get_num_examples_from_cache", "(", "cache_path", ")", ":", "\n", "    ", "cache_metadata_path", "=", "os", ".", "path", ".", "join", "(", "cache_path", ",", "\"data_args.p\"", ")", "\n", "return", "torch", ".", "load", "(", "cache_metadata_path", ")", "[", "\"length\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.counterfactual.generate_exp.single_task_command": [[123, 170], ["os.path.basename().split", "command.append", "command.append", "command.append", "os.path.basename", "len", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "single_task_command", "(", "\n", "args", ":", "RunConfiguration", ",", "\n", "task_container_config", ":", "str", ",", "\n", "lr", ":", "float", ",", "\n", "seed", ":", "int", ",", "\n", "exp_name", ":", "str", ",", "\n", "phases", "=", "(", "\"train\"", ",", "\"val\"", ")", ",", "\n", ")", ":", "\n", "    ", "do_train", "=", "\"--do_train \"", "if", "\"train\"", "in", "phases", "else", "\"\"", "\n", "do_val", "=", "\"--do_val \"", "if", "\"val\"", "in", "phases", "else", "\"\"", "\n", "\n", "command", "=", "[", "\n", "f\"{os.path.join(args.jiant_path, 'jiant', 'proj', 'main', 'runscript.py')} \"", ",", "\n", "f\"run \"", ",", "\n", "f\"--ZZsrc {args.model_config} \"", ",", "\n", "f\"--jiant_task_container_config_path {task_container_config} \"", "\n", "f\"--model_load_mode from_transformers \"", ",", "\n", "f\"--learning_rate {lr} \"", ",", "\n", "f\"--force_overwrite \"", ",", "\n", "f\"{do_train}{do_val}\"", ",", "\n", "f\"--do_save \"", ",", "\n", "f\"--eval_every_steps {EVAL_STEPS} \"", ",", "\n", "f\"--no_improvements_for_n_evals {NO_IMPROV_INT} \"", ",", "\n", "f\"--save_checkpoint_every_steps {SAVE_STEPS} \"", ",", "\n", "f\"--seed {seed} \"", ",", "\n", "f\"--output_dir {os.path.join(args.output_path,f'{args.train}-{args.val}')} \"", ",", "\n", "f\"--val_jsonl --args_jsonl \"", ",", "\n", "f\"--custom_best_name {f'best_{exp_name}'} \"", ",", "\n", "f\"--custom_checkpoint_name {f'checkpoint_{exp_name}'} \"", ",", "\n", "f\"--custom_logger_post _{exp_name} \"", ",", "\n", "f\"--no_improvements_for_n_evals {args.no_improvements_for_n_evals} \"", ",", "\n", "f\"--eval_every_steps {args.eval_every_steps} \"", ",", "\n", "]", "\n", "\n", "if", "args", ".", "extract_exp_name_valpreds", ":", "\n", "        ", "command", ".", "append", "(", "f\"--write_val_preds \"", ")", "\n", "command", ".", "append", "(", "f\"--extract_exp_name_valpreds \"", ")", "\n", "\n", "", "if", "args", ".", "fp16", ":", "\n", "        ", "command", ".", "append", "(", "f\"--fp16 \"", ")", "\n", "\n", "\n", "", "sbatch_tester", "=", "os", ".", "path", ".", "basename", "(", "args", ".", "sbatch_name", ")", ".", "split", "(", "'.'", ")", "\n", "if", "len", "(", "sbatch_tester", ")", ">", "1", "and", "sbatch_tester", "[", "1", "]", "==", "'sbatch'", ":", "\n", "        ", "return", "f'COMMAND=\"{\"\".join(command)}\" sbatch {args.sbatch_name}\\n'", "\n", "", "else", ":", "\n", "        ", "return", "f'{\"\".join(command)}\\n'", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.counterfactual.generate_exp.single_task_config": [[171, 276], ["jiant.read_json", "max", "os.path.expandvars", "os.path.expandvars", "os.path.expandvars", "os.path.expandvars", "generate_exp.get_num_examples_from_cache", "os.path.join", "os.path.join", "os.path.join", "os.path.expandvars", "int", "os.path.expandvars"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.python.io.read_json", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.counterfactual.generate_exp.get_num_examples_from_cache"], ["", "", "def", "single_task_config", "(", "\n", "task_config_path", ",", "\n", "train_batch_size", "=", "None", ",", "\n", "task_cache_base_path", "=", "None", ",", "\n", "task_cache_train_path", "=", "None", ",", "\n", "task_cache_val_path", "=", "None", ",", "\n", "task_cache_val_labels_path", "=", "None", ",", "\n", "epochs", "=", "None", ",", "max_steps", "=", "None", ",", "\n", "eval_batch_multiplier", "=", "2", ",", "\n", "eval_batch_size", "=", "None", ",", "\n", "gradient_accumulation_steps", "=", "1", ",", "\n", "eval_subset_num", "=", "500", ",", "\n", "warmup_steps_proportion", "=", "0.1", ",", "\n", "phases", "=", "(", "\"train\"", ",", "\"val\"", ")", ",", "\n", "batch_clustering", "=", "False", ",", "\n", "matchlist_pickle_path", "=", "\"\"", ",", "\n", "train_batch_tolerance", "=", "0", ",", "\n", ")", ":", "\n", "    ", "task_config", "=", "py_io", ".", "read_json", "(", "os", ".", "path", ".", "expandvars", "(", "task_config_path", ")", ")", "\n", "task_name", "=", "task_config", "[", "\"name\"", "]", "\n", "\n", "do_train", "=", "\"train\"", "in", "phases", "\n", "do_val", "=", "\"val\"", "in", "phases", "\n", "\n", "cache_path_dict", "=", "{", "}", "\n", "# task_cache_base_path = f\"{task_cache_base_path}-clustered\" if batch_clustering else task_cache_base_path", "\n", "if", "do_train", ":", "\n", "        ", "if", "task_cache_train_path", "is", "None", ":", "\n", "            ", "task_cache_train_path", "=", "os", ".", "path", ".", "join", "(", "task_cache_base_path", ",", "\"train\"", ")", "\n", "", "cache_path_dict", "[", "\"train\"", "]", "=", "os", ".", "path", ".", "expandvars", "(", "task_cache_train_path", ")", "\n", "\n", "", "if", "do_val", ":", "\n", "        ", "if", "task_cache_val_path", "is", "None", ":", "\n", "            ", "task_cache_val_path", "=", "os", ".", "path", ".", "join", "(", "task_cache_base_path", ",", "\"val\"", ")", "\n", "", "if", "task_cache_val_labels_path", "is", "None", ":", "\n", "            ", "task_cache_val_labels_path", "=", "os", ".", "path", ".", "join", "(", "task_cache_base_path", ",", "\"val_labels\"", ")", "\n", "", "cache_path_dict", "[", "\"val\"", "]", "=", "os", ".", "path", ".", "expandvars", "(", "task_cache_val_path", ")", "\n", "cache_path_dict", "[", "\"val_labels\"", "]", "=", "os", ".", "path", ".", "expandvars", "(", "task_cache_val_labels_path", ")", "\n", "\n", "", "if", "do_train", ":", "\n", "        ", "assert", "(", "epochs", "is", "None", ")", "!=", "(", "max_steps", "is", "None", ")", "\n", "assert", "train_batch_size", "is", "not", "None", "\n", "effective_batch_size", "=", "train_batch_size", "*", "gradient_accumulation_steps", "\n", "num_training_examples", "=", "get_num_examples_from_cache", "(", "\n", "cache_path", "=", "os", ".", "path", ".", "expandvars", "(", "task_cache_train_path", ")", ",", "\n", ")", "\n", "max_steps", "=", "num_training_examples", "*", "epochs", "//", "effective_batch_size", "\n", "", "else", ":", "\n", "        ", "max_steps", "=", "0", "\n", "train_batch_size", "=", "0", "\n", "\n", "", "if", "do_val", ":", "\n", "        ", "if", "eval_batch_size", "is", "None", ":", "\n", "            ", "assert", "train_batch_size", "is", "not", "None", "\n", "eval_batch_size", "=", "train_batch_size", "*", "eval_batch_multiplier", "\n", "\n", "", "", "batch_method", "=", "'clustered'", "if", "batch_clustering", "else", "'default'", "\n", "min_batch_size", "=", "max", "(", "0", ",", "train_batch_size", "-", "train_batch_tolerance", ")", "\n", "total_batches", "=", "max_steps", "*", "gradient_accumulation_steps", "\n", "\n", "config_dict", "=", "{", "\n", "\"task_config_path_dict\"", ":", "{", "\n", "task_name", ":", "os", ".", "path", ".", "expandvars", "(", "task_config_path", ")", ",", "\n", "}", ",", "\n", "\"task_cache_config_dict\"", ":", "{", "\n", "task_name", ":", "cache_path_dict", ",", "\n", "}", ",", "\n", "\"sampler_config\"", ":", "{", "\n", "\"sampler_type\"", ":", "\"UniformMultiTaskSampler\"", ",", "\n", "}", ",", "\n", "\"global_train_config\"", ":", "{", "\n", "\"max_steps\"", ":", "max_steps", ",", "\n", "\"warmup_steps\"", ":", "int", "(", "max_steps", "*", "warmup_steps_proportion", ")", ",", "\n", "}", ",", "\n", "\"task_specific_configs_dict\"", ":", "{", "\n", "task_name", ":", "{", "\n", "\"train_batch_size\"", ":", "train_batch_size", ",", "\n", "\"eval_batch_size\"", ":", "eval_batch_size", ",", "\n", "\"gradient_accumulation_steps\"", ":", "gradient_accumulation_steps", ",", "\n", "\"eval_subset_num\"", ":", "eval_subset_num", ",", "\n", "\"batch_method\"", ":", "batch_method", ",", "\n", "\"min_batch_size\"", ":", "min_batch_size", ",", "\n", "\"total_batches\"", ":", "total_batches", ",", "\n", "\"matchlist_pickle_path\"", ":", "matchlist_pickle_path", ",", "\n", "}", ",", "\n", "}", ",", "\n", "\"taskmodels_config\"", ":", "{", "\n", "\"task_to_taskmodel_map\"", ":", "{", "\n", "task_name", ":", "task_name", ",", "\n", "}", ",", "\n", "\"taskmodel_config_map\"", ":", "{", "\n", "task_name", ":", "None", ",", "\n", "}", "\n", "}", ",", "\n", "\"task_run_config\"", ":", "{", "\n", "\"train_task_list\"", ":", "[", "task_name", "]", "if", "do_train", "else", "[", "]", ",", "\n", "\"train_val_task_list\"", ":", "[", "task_name", "]", "if", "do_train", "else", "[", "]", ",", "\n", "\"val_task_list\"", ":", "[", "task_name", "]", "if", "do_val", "else", "[", "]", ",", "\n", "\"test_task_list\"", ":", "[", "]", ",", "\n", "}", ",", "\n", "\"metric_aggregator_config\"", ":", "{", "\n", "\"metric_aggregator_type\"", ":", "\"EqualMetricAggregator\"", ",", "\n", "}", ",", "\n", "}", "\n", "return", "config_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.allennlp.SelfAttentiveSpanExtractor.__init__": [[33, 37], ["torch.Module.__init__", "allennlp.TimeDistributed", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.radam.AdamW.__init__"], ["def", "__init__", "(", "self", ",", "input_dim", ":", "int", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_input_dim", "=", "input_dim", "\n", "self", ".", "_global_attention", "=", "TimeDistributed", "(", "torch", ".", "nn", ".", "Linear", "(", "input_dim", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.allennlp.SelfAttentiveSpanExtractor.get_input_dim": [[38, 40], ["None"], "methods", ["None"], ["", "def", "get_input_dim", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "_input_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.allennlp.SelfAttentiveSpanExtractor.get_output_dim": [[41, 43], ["None"], "methods", ["None"], ["", "def", "get_output_dim", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "_input_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.allennlp.SelfAttentiveSpanExtractor.forward": [[44, 113], ["torch.nn.functional.relu().long.split", "torch.nn.functional.relu().long.split", "allennlp.SelfAttentiveSpanExtractor._global_attention", "get_range_vector().view", "torch.nn.functional.relu().long", "torch.nn.functional.relu().long", "torch.nn.functional.relu().long", "torch.nn.functional.relu().long", "allennlp.flatten_and_batch_shift_indices", "allennlp.batched_index_select", "batched_index_select().squeeze", "allennlp.masked_softmax", "allennlp.weighted_sum", "span_widths.max().item", "sequence_tensor.size", "allennlp.get_range_vector", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "allennlp.batched_index_select", "span_indices_mask.unsqueeze().float", "span_widths.max", "allennlp.get_device_of", "raw_span_indices.float", "span_indices_mask.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.allennlp.flatten_and_batch_shift_indices", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.allennlp.batched_index_select", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.allennlp.masked_softmax", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.allennlp.weighted_sum", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.allennlp.get_range_vector", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.allennlp.batched_index_select", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.allennlp.get_device_of"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "sequence_tensor", ":", "torch", ".", "FloatTensor", ",", "\n", "span_indices", ":", "torch", ".", "LongTensor", ",", "\n", "sequence_mask", ":", "torch", ".", "LongTensor", "=", "None", ",", "\n", "span_indices_mask", ":", "torch", ".", "LongTensor", "=", "None", ",", "\n", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "# both of shape (batch_size, num_spans, 1)", "\n", "        ", "span_starts", ",", "span_ends", "=", "span_indices", ".", "split", "(", "1", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# shape (batch_size, num_spans, 1)", "\n", "# These span widths are off by 1, because the span ends are `inclusive`.", "\n", "span_widths", "=", "span_ends", "-", "span_starts", "\n", "\n", "# We need to know the maximum span width so we can", "\n", "# generate indices to extract the spans from the sequence tensor.", "\n", "# These indices will then get masked below, such that if the length", "\n", "# of a given span is smaller than the max, the rest of the values", "\n", "# are masked.", "\n", "max_batch_span_width", "=", "span_widths", ".", "max", "(", ")", ".", "item", "(", ")", "+", "1", "\n", "\n", "# shape (batch_size, sequence_length, 1)", "\n", "global_attention_logits", "=", "self", ".", "_global_attention", "(", "sequence_tensor", ")", "\n", "\n", "# Shape: (1, 1, max_batch_span_width)", "\n", "max_span_range_indices", "=", "get_range_vector", "(", "\n", "max_batch_span_width", ",", "get_device_of", "(", "sequence_tensor", ")", "\n", ")", ".", "view", "(", "1", ",", "1", ",", "-", "1", ")", "\n", "# Shape: (batch_size, num_spans, max_batch_span_width)", "\n", "# This is a broadcasted comparison - for each span we are considering,", "\n", "# we are creating a range vector of size max_span_width, but masking values", "\n", "# which are greater than the actual length of the span.", "\n", "#", "\n", "# We're using <= here (and for the mask below) because the span ends are", "\n", "# inclusive, so we want to include indices which are equal to span_widths rather", "\n", "# than using it as a non-inclusive upper bound.", "\n", "span_mask", "=", "(", "max_span_range_indices", "<=", "span_widths", ")", ".", "float", "(", ")", "\n", "raw_span_indices", "=", "span_ends", "-", "max_span_range_indices", "\n", "# We also don't want to include span indices which are less than zero,", "\n", "# which happens because some spans near the beginning of the sequence", "\n", "# have an end index < max_batch_span_width, so we add this to the mask here.", "\n", "span_mask", "=", "span_mask", "*", "(", "raw_span_indices", ">=", "0", ")", ".", "float", "(", ")", "\n", "span_indices", "=", "torch", ".", "nn", ".", "functional", ".", "relu", "(", "raw_span_indices", ".", "float", "(", ")", ")", ".", "long", "(", ")", "\n", "\n", "# Shape: (batch_size * num_spans * max_batch_span_width)", "\n", "flat_span_indices", "=", "flatten_and_batch_shift_indices", "(", "span_indices", ",", "sequence_tensor", ".", "size", "(", "1", ")", ")", "\n", "\n", "# Shape: (batch_size, num_spans, max_batch_span_width, embedding_dim)", "\n", "span_embeddings", "=", "batched_index_select", "(", "sequence_tensor", ",", "span_indices", ",", "flat_span_indices", ")", "\n", "\n", "# Shape: (batch_size, num_spans, max_batch_span_width)", "\n", "span_attention_logits", "=", "batched_index_select", "(", "\n", "global_attention_logits", ",", "span_indices", ",", "flat_span_indices", "\n", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "# Shape: (batch_size, num_spans, max_batch_span_width)", "\n", "span_attention_weights", "=", "masked_softmax", "(", "span_attention_logits", ",", "span_mask", ")", "\n", "\n", "# Do a weighted sum of the embedded spans with", "\n", "# respect to the normalised attention distributions.", "\n", "# Shape: (batch_size, num_spans, embedding_dim)", "\n", "attended_text_embeddings", "=", "weighted_sum", "(", "span_embeddings", ",", "span_attention_weights", ")", "\n", "\n", "if", "span_indices_mask", "is", "not", "None", ":", "\n", "# Above we were masking the widths of spans with respect to the max", "\n", "# span width in the batch. Here we are masking the spans which were", "\n", "# originally passed in as padding.", "\n", "            ", "return", "attended_text_embeddings", "*", "span_indices_mask", ".", "unsqueeze", "(", "-", "1", ")", ".", "float", "(", ")", "\n", "\n", "", "return", "attended_text_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.allennlp.TimeDistributed.__init__": [[125, 128], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.radam.AdamW.__init__"], ["def", "__init__", "(", "self", ",", "module", ")", ":", "\n", "        ", "super", "(", "TimeDistributed", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_module", "=", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.allennlp.TimeDistributed.forward": [[129, 150], ["allennlp.TimeDistributed._module", "allennlp.TimeDistributed.contiguous().view", "input_tensor.size", "reshaped_inputs.append", "len", "RuntimeError", "input_tensor.contiguous().view", "allennlp.TimeDistributed.contiguous", "str", "input_tensor.contiguous", "allennlp.TimeDistributed.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "inputs", ")", ":", "# pylint: disable=arguments-differ", "\n", "        ", "reshaped_inputs", "=", "[", "]", "\n", "for", "input_tensor", "in", "inputs", ":", "\n", "            ", "input_size", "=", "input_tensor", ".", "size", "(", ")", "\n", "if", "len", "(", "input_size", ")", "<=", "2", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"No dimension to distribute: \"", "+", "str", "(", "input_size", ")", ")", "\n", "\n", "# Squash batch_size and time_steps into a single axis; result has shape", "\n", "# (batch_size * time_steps, input_size).", "\n", "", "squashed_shape", "=", "[", "-", "1", "]", "+", "[", "x", "for", "x", "in", "input_size", "[", "2", ":", "]", "]", "\n", "reshaped_inputs", ".", "append", "(", "input_tensor", ".", "contiguous", "(", ")", ".", "view", "(", "*", "squashed_shape", ")", ")", "\n", "\n", "", "reshaped_outputs", "=", "self", ".", "_module", "(", "*", "reshaped_inputs", ")", "\n", "\n", "# Now get the output back into the right shape.", "\n", "# (batch_size, time_steps, [hidden_size])", "\n", "# noinspection PyUnboundLocalVariable", "\n", "new_shape", "=", "[", "input_size", "[", "0", "]", ",", "input_size", "[", "1", "]", "]", "+", "[", "x", "for", "x", "in", "reshaped_outputs", ".", "size", "(", ")", "[", "1", ":", "]", "]", "\n", "outputs", "=", "reshaped_outputs", ".", "contiguous", "(", ")", ".", "view", "(", "*", "new_shape", ")", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.allennlp.weighted_sum": [[152, 189], ["intermediate.sum", "attention.unsqueeze().bmm().squeeze", "attention.bmm", "attention.dim", "list", "range", "matrix.unsqueeze.expand", "attention.unsqueeze().expand_as", "attention.dim", "matrix.unsqueeze.dim", "attention.dim", "matrix.unsqueeze.dim", "matrix.unsqueeze.dim", "matrix.unsqueeze.size", "matrix.unsqueeze.unsqueeze", "list.insert", "attention.unsqueeze().bmm", "attention.size", "attention.unsqueeze", "attention.dim", "matrix.unsqueeze.dim", "attention.unsqueeze"], "function", ["None"], ["", "", "def", "weighted_sum", "(", "matrix", ":", "torch", ".", "Tensor", ",", "attention", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Takes a matrix of vectors and a set of weights over the rows in the matrix (which we call an\n    \"attention\" vector), and returns a weighted sum of the rows in the matrix.  This is the typical\n    computation performed after an attention mechanism.\n\n    Note that while we call this a \"matrix\" of vectors and an attention \"vector\", we also handle\n    higher-order tensors.  We always sum over the second-to-last dimension of the \"matrix\", and we\n    assume that all dimensions in the \"matrix\" prior to the last dimension are matched in the\n    \"vector\".  Non-matched dimensions in the \"vector\" must be `directly after the batch dimension`.\n\n    For example, say I have a \"matrix\" with dimensions ``(batch_size, num_queries, num_words,\n    embedding_dim)``.  The attention \"vector\" then must have at least those dimensions, and could\n    have more. Both:\n\n        - ``(batch_size, num_queries, num_words)`` (distribution over words for each query)\n        - ``(batch_size, num_documents, num_queries, num_words)`` (distribution over words in a\n          query for each document)\n\n    are valid input \"vectors\", producing tensors of shape:\n    ``(batch_size, num_queries, embedding_dim)`` and\n    ``(batch_size, num_documents, num_queries, embedding_dim)`` respectively.\n    \"\"\"", "\n", "# We'll special-case a few settings here, where there are efficient (but poorly-named)", "\n", "# operations in pytorch that already do the computation we need.", "\n", "if", "attention", ".", "dim", "(", ")", "==", "2", "and", "matrix", ".", "dim", "(", ")", "==", "3", ":", "\n", "        ", "return", "attention", ".", "unsqueeze", "(", "1", ")", ".", "bmm", "(", "matrix", ")", ".", "squeeze", "(", "1", ")", "\n", "", "if", "attention", ".", "dim", "(", ")", "==", "3", "and", "matrix", ".", "dim", "(", ")", "==", "3", ":", "\n", "        ", "return", "attention", ".", "bmm", "(", "matrix", ")", "\n", "", "if", "matrix", ".", "dim", "(", ")", "-", "1", "<", "attention", ".", "dim", "(", ")", ":", "\n", "        ", "expanded_size", "=", "list", "(", "matrix", ".", "size", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "attention", ".", "dim", "(", ")", "-", "matrix", ".", "dim", "(", ")", "+", "1", ")", ":", "\n", "            ", "matrix", "=", "matrix", ".", "unsqueeze", "(", "1", ")", "\n", "expanded_size", ".", "insert", "(", "i", "+", "1", ",", "attention", ".", "size", "(", "i", "+", "1", ")", ")", "\n", "", "matrix", "=", "matrix", ".", "expand", "(", "*", "expanded_size", ")", "\n", "", "intermediate", "=", "attention", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand_as", "(", "matrix", ")", "*", "matrix", "\n", "return", "intermediate", ".", "sum", "(", "dim", "=", "-", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.allennlp.masked_softmax": [[191, 217], ["torch.nn.functional.softmax", "torch.nn.functional.softmax", "mask.unsqueeze.float", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "mask.unsqueeze.dim", "vector.dim", "mask.unsqueeze.unsqueeze", "torch.nn.functional.softmax.sum"], "function", ["None"], ["", "def", "masked_softmax", "(", "vector", ":", "torch", ".", "Tensor", ",", "mask", ":", "torch", ".", "Tensor", ",", "dim", ":", "int", "=", "-", "1", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    ``torch.nn.functional.softmax(vector)`` does not work if some elements of ``vector`` should be\n    masked.  This performs a softmax on just the non-masked portions of ``vector``.  Passing\n    ``None`` in for the mask is also acceptable; you'll just get a regular softmax.\n\n    ``vector`` can have an arbitrary number of dimensions; the only requirement is that ``mask`` is\n    broadcastable to ``vector's`` shape.  If ``mask`` has fewer dimensions than ``vector``, we will\n    unsqueeze on dimension 1 until they match.  If you need a different unsqueezing of your mask,\n    do it yourself before passing the mask into this function.\n\n    In the case that the input vector is completely masked, this function returns an array\n    of ``0.0``. This behavior may cause ``NaN`` if this is used as the last layer of a model\n    that uses categorical cross-entropy loss.\n    \"\"\"", "\n", "if", "mask", "is", "None", ":", "\n", "        ", "result", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "vector", ",", "dim", "=", "dim", ")", "\n", "", "else", ":", "\n", "        ", "mask", "=", "mask", ".", "float", "(", ")", "\n", "while", "mask", ".", "dim", "(", ")", "<", "vector", ".", "dim", "(", ")", ":", "\n", "            ", "mask", "=", "mask", ".", "unsqueeze", "(", "1", ")", "\n", "# To limit numerical errors from large vector elements outside the mask, we zero these out.", "\n", "", "result", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "vector", "*", "mask", ",", "dim", "=", "dim", ")", "\n", "result", "=", "result", "*", "mask", "\n", "result", "=", "result", "/", "(", "result", ".", "sum", "(", "dim", "=", "dim", ",", "keepdim", "=", "True", ")", "+", "1e-13", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.allennlp.batched_index_select": [[219, 273], ["target.view", "target.view.index_select", "flattened_target.index_select.view", "allennlp.flatten_and_batch_shift_indices", "target.size", "list", "target.size", "indices.size", "target.size"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.allennlp.flatten_and_batch_shift_indices"], ["", "def", "batched_index_select", "(", "\n", "target", ":", "torch", ".", "Tensor", ",", "\n", "indices", ":", "torch", ".", "LongTensor", ",", "\n", "flattened_indices", ":", "Optional", "[", "torch", ".", "LongTensor", "]", "=", "None", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    The given ``indices`` of size ``(batch_size, d_1, ..., d_n)`` indexes into the sequence\n    dimension (dimension 2) of the target, which has size ``(batch_size, sequence_length,\n    embedding_size)``.\n\n    This function returns selected values in the target with respect to the provided indices, which\n    have size ``(batch_size, d_1, ..., d_n, embedding_size)``. This can use the optionally\n    precomputed :func:`~flattened_indices` with size ``(batch_size * d_1 * ... * d_n)`` if given.\n\n    An example use case of this function is looking up the start and end indices of spans in a\n    sequence tensor. This is used in the\n    :class:`~allennlp.models.coreference_resolution.CoreferenceResolver`. Model to select\n    contextual word representations corresponding to the start and end indices of mentions. The key\n    reason this can't be done with basic torch functions is that we want to be able to use look-up\n    tensors with an arbitrary number of dimensions (for example, in the coref model, we don't know\n    a-priori how many spans we are looking up).\n\n    Parameters\n    ----------\n    target : ``torch.Tensor``, required.\n        A 3 dimensional tensor of shape (batch_size, sequence_length, embedding_size).\n        This is the tensor to be indexed.\n    indices : ``torch.LongTensor``\n        A tensor of shape (batch_size, ...), where each element is an index into the\n        ``sequence_length`` dimension of the ``target`` tensor.\n    flattened_indices : Optional[torch.Tensor], optional (default = None)\n        An optional tensor representing the result of calling :func:~`flatten_and_batch_shift_indices`\n        on ``indices``. This is helpful in the case that the indices can be flattened once and\n        cached for many batch lookups.\n\n    Returns\n    -------\n    selected_targets : ``torch.Tensor``\n        A tensor with shape [indices.size(), target.size(-1)] representing the embedded indices\n        extracted from the batch flattened target tensor.\n    \"\"\"", "\n", "if", "flattened_indices", "is", "None", ":", "\n", "# Shape: (batch_size * d_1 * ... * d_n)", "\n", "        ", "flattened_indices", "=", "flatten_and_batch_shift_indices", "(", "indices", ",", "target", ".", "size", "(", "1", ")", ")", "\n", "\n", "# Shape: (batch_size * sequence_length, embedding_size)", "\n", "", "flattened_target", "=", "target", ".", "view", "(", "-", "1", ",", "target", ".", "size", "(", "-", "1", ")", ")", "\n", "\n", "# Shape: (batch_size * d_1 * ... * d_n, embedding_size)", "\n", "flattened_selected", "=", "flattened_target", ".", "index_select", "(", "0", ",", "flattened_indices", ")", "\n", "selected_shape", "=", "list", "(", "indices", ".", "size", "(", ")", ")", "+", "[", "target", ".", "size", "(", "-", "1", ")", "]", "\n", "# Shape: (batch_size, d_1, ..., d_n, embedding_size)", "\n", "selected_targets", "=", "flattened_selected", ".", "view", "(", "*", "selected_shape", ")", "\n", "return", "selected_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.allennlp.flatten_and_batch_shift_indices": [[275, 316], ["range", "offset_indices.view.view", "allennlp.get_range_vector", "offsets.unsqueeze.unsqueeze", "indices.size", "allennlp.get_device_of", "len", "indices.size"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.allennlp.get_range_vector", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.allennlp.get_device_of"], ["", "def", "flatten_and_batch_shift_indices", "(", "indices", ":", "torch", ".", "Tensor", ",", "sequence_length", ":", "int", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    This is a subroutine for :func:`~batched_index_select`. The given ``indices`` of size\n    ``(batch_size, d_1, ..., d_n)`` indexes into dimension 2 of a target tensor, which has size\n    ``(batch_size, sequence_length, embedding_size)``. This function returns a vector that\n    correctly indexes into the flattened target. The sequence length of the target must be\n    provided to compute the appropriate offsets.\n\n    .. code-block:: python\n\n        indices = torch.ones([2,3], dtype=torch.long)\n        # Sequence length of the target tensor.\n        sequence_length = 10\n        shifted_indices = flatten_and_batch_shift_indices(indices, sequence_length)\n        # Indices into the second element in the batch are correctly shifted\n        # to take into account that the target tensor will be flattened before\n        # the indices are applied.\n        assert shifted_indices == [1, 1, 1, 11, 11, 11]\n\n    Parameters\n    ----------\n    indices : ``torch.LongTensor``, required.\n    sequence_length : ``int``, required.\n        The length of the sequence the indices index into.\n        This must be the second dimension of the tensor.\n\n    Returns\n    -------\n    offset_indices : ``torch.LongTensor``\n    \"\"\"", "\n", "# Shape: (batch_size)", "\n", "offsets", "=", "get_range_vector", "(", "indices", ".", "size", "(", "0", ")", ",", "get_device_of", "(", "indices", ")", ")", "*", "sequence_length", "\n", "for", "_", "in", "range", "(", "len", "(", "indices", ".", "size", "(", ")", ")", "-", "1", ")", ":", "\n", "        ", "offsets", "=", "offsets", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "# Shape: (batch_size, d_1, ..., d_n)", "\n", "", "offset_indices", "=", "indices", "+", "offsets", "\n", "\n", "# Shape: (batch_size * d_1 * ... * d_n)", "\n", "offset_indices", "=", "offset_indices", ".", "view", "(", "-", "1", ")", "\n", "return", "offset_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.allennlp.get_range_vector": [[319, 328], ["torch.arange", "torch.arange", "torch.cuda.LongTensor().fill_().cumsum", "torch.cuda.LongTensor().fill_().cumsum", "torch.cuda.LongTensor().fill_", "torch.cuda.LongTensor().fill_", "torch.cuda.LongTensor", "torch.cuda.LongTensor"], "function", ["None"], ["", "def", "get_range_vector", "(", "size", ":", "int", ",", "device", ":", "int", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Returns a range vector with the desired size, starting at 0. The CUDA implementation\n    is meant to avoid copy data from CPU to GPU.\n    \"\"\"", "\n", "if", "device", ">", "-", "1", ":", "\n", "        ", "return", "torch", ".", "cuda", ".", "LongTensor", "(", "size", ",", "device", "=", "device", ")", ".", "fill_", "(", "1", ")", ".", "cumsum", "(", "0", ")", "-", "1", "\n", "", "else", ":", "\n", "        ", "return", "torch", ".", "arange", "(", "0", ",", "size", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.allennlp.get_device_of": [[330, 338], ["tensor.get_device"], "function", ["None"], ["", "", "def", "get_device_of", "(", "tensor", ":", "torch", ".", "Tensor", ")", "->", "int", ":", "\n", "    ", "\"\"\"\n    Returns the device of the tensor.\n    \"\"\"", "\n", "if", "not", "tensor", ".", "is_cuda", ":", "\n", "        ", "return", "-", "1", "\n", "", "else", ":", "\n", "        ", "return", "tensor", ".", "get_device", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.radam.RAdam.__init__": [[8, 35], ["dict", "torch.optim.optimizer.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError", "isinstance", "isinstance", "len", "range", "range"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.radam.AdamW.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-8", ",", "weight_decay", "=", "0", ",", "degenerated_to_sgd", "=", "True", "\n", ")", ":", "\n", "        ", "if", "not", "0.0", "<=", "lr", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {}\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "not", "0.0", "<=", "eps", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid epsilon value: {}\"", ".", "format", "(", "eps", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "0", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 0: {}\"", ".", "format", "(", "betas", "[", "0", "]", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "1", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 1: {}\"", ".", "format", "(", "betas", "[", "1", "]", ")", ")", "\n", "\n", "", "self", ".", "degenerated_to_sgd", "=", "degenerated_to_sgd", "\n", "if", "isinstance", "(", "params", ",", "(", "list", ",", "tuple", ")", ")", "and", "len", "(", "params", ")", ">", "0", "and", "isinstance", "(", "params", "[", "0", "]", ",", "dict", ")", ":", "\n", "            ", "for", "param", "in", "params", ":", "\n", "                ", "if", "\"betas\"", "in", "param", "and", "(", "\n", "param", "[", "\"betas\"", "]", "[", "0", "]", "!=", "betas", "[", "0", "]", "or", "param", "[", "\"betas\"", "]", "[", "1", "]", "!=", "betas", "[", "1", "]", "\n", ")", ":", "\n", "                    ", "param", "[", "\"buffer\"", "]", "=", "[", "[", "None", ",", "None", ",", "None", "]", "for", "_", "in", "range", "(", "10", ")", "]", "\n", "", "", "", "defaults", "=", "dict", "(", "\n", "lr", "=", "lr", ",", "\n", "betas", "=", "betas", ",", "\n", "eps", "=", "eps", ",", "\n", "weight_decay", "=", "weight_decay", ",", "\n", "buffer", "=", "[", "[", "None", ",", "None", ",", "None", "]", "for", "_", "in", "range", "(", "10", ")", "]", ",", "\n", ")", "\n", "super", "(", "RAdam", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.radam.RAdam.__setstate__": [[36, 38], ["super().__setstate__"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.radam.AdamW.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "RAdam", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.radam.RAdam.step": [[39, 114], ["closure", "p.grad.data.float", "p.data.float", "exp_avg_sq.mul_().addcmul_", "exp_avg.mul_().add_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "state[].type_as", "state[].type_as", "exp_avg_sq.sqrt().add_", "p.data.float.addcdiv_", "p.data.copy_", "exp_avg_sq.mul_", "exp_avg.mul_", "int", "p.data.float.add_", "p.data.float.add_", "p.data.copy_", "math.sqrt", "exp_avg_sq.sqrt", "p.data.float.add_"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "\n", "        ", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "\n", "            ", "for", "p", "in", "group", "[", "\"params\"", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", ".", "float", "(", ")", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\"RAdam does not support sparse gradients\"", ")", "\n", "\n", "", "p_data_fp32", "=", "p", ".", "data", ".", "float", "(", ")", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "\"step\"", "]", "=", "0", "\n", "state", "[", "\"exp_avg\"", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "state", "[", "\"exp_avg_sq\"", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "", "else", ":", "\n", "                    ", "state", "[", "\"exp_avg\"", "]", "=", "state", "[", "\"exp_avg\"", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "state", "[", "\"exp_avg_sq\"", "]", "=", "state", "[", "\"exp_avg_sq\"", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "\n", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "\"exp_avg\"", "]", ",", "state", "[", "\"exp_avg_sq\"", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "\"betas\"", "]", "\n", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "\n", "state", "[", "\"step\"", "]", "+=", "1", "\n", "buffered", "=", "group", "[", "\"buffer\"", "]", "[", "int", "(", "state", "[", "\"step\"", "]", "%", "10", ")", "]", "\n", "if", "state", "[", "\"step\"", "]", "==", "buffered", "[", "0", "]", ":", "\n", "                    ", "N_sma", ",", "step_size", "=", "buffered", "[", "1", "]", ",", "buffered", "[", "2", "]", "\n", "", "else", ":", "\n", "                    ", "buffered", "[", "0", "]", "=", "state", "[", "\"step\"", "]", "\n", "beta2_t", "=", "beta2", "**", "state", "[", "\"step\"", "]", "\n", "N_sma_max", "=", "2", "/", "(", "1", "-", "beta2", ")", "-", "1", "\n", "N_sma", "=", "N_sma_max", "-", "2", "*", "state", "[", "\"step\"", "]", "*", "beta2_t", "/", "(", "1", "-", "beta2_t", ")", "\n", "buffered", "[", "1", "]", "=", "N_sma", "\n", "\n", "# more conservative since it's an approximated value", "\n", "if", "N_sma", ">=", "5", ":", "\n", "                        ", "step_size", "=", "math", ".", "sqrt", "(", "\n", "(", "1", "-", "beta2_t", ")", "\n", "*", "(", "N_sma", "-", "4", ")", "\n", "/", "(", "N_sma_max", "-", "4", ")", "\n", "*", "(", "N_sma", "-", "2", ")", "\n", "/", "N_sma", "\n", "*", "N_sma_max", "\n", "/", "(", "N_sma_max", "-", "2", ")", "\n", ")", "/", "(", "1", "-", "beta1", "**", "state", "[", "\"step\"", "]", ")", "\n", "", "elif", "self", ".", "degenerated_to_sgd", ":", "\n", "                        ", "step_size", "=", "1.0", "/", "(", "1", "-", "beta1", "**", "state", "[", "\"step\"", "]", ")", "\n", "", "else", ":", "\n", "                        ", "step_size", "=", "-", "1", "\n", "", "buffered", "[", "2", "]", "=", "step_size", "\n", "\n", "# more conservative since it's an approximated value", "\n", "", "if", "N_sma", ">=", "5", ":", "\n", "                    ", "if", "group", "[", "\"weight_decay\"", "]", "!=", "0", ":", "\n", "                        ", "p_data_fp32", ".", "add_", "(", "-", "group", "[", "\"weight_decay\"", "]", "*", "group", "[", "\"lr\"", "]", ",", "p_data_fp32", ")", "\n", "", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "\"eps\"", "]", ")", "\n", "p_data_fp32", ".", "addcdiv_", "(", "-", "step_size", "*", "group", "[", "\"lr\"", "]", ",", "exp_avg", ",", "denom", ")", "\n", "p", ".", "data", ".", "copy_", "(", "p_data_fp32", ")", "\n", "", "elif", "step_size", ">", "0", ":", "\n", "                    ", "if", "group", "[", "\"weight_decay\"", "]", "!=", "0", ":", "\n", "                        ", "p_data_fp32", ".", "add_", "(", "-", "group", "[", "\"weight_decay\"", "]", "*", "group", "[", "\"lr\"", "]", ",", "p_data_fp32", ")", "\n", "", "p_data_fp32", ".", "add_", "(", "-", "step_size", "*", "group", "[", "\"lr\"", "]", ",", "exp_avg", ")", "\n", "p", ".", "data", ".", "copy_", "(", "p_data_fp32", ")", "\n", "\n", "", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.radam.PlainRAdam.__init__": [[118, 134], ["dict", "torch.optim.optimizer.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.radam.AdamW.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-8", ",", "weight_decay", "=", "0", ",", "degenerated_to_sgd", "=", "True", "\n", ")", ":", "\n", "        ", "if", "not", "0.0", "<=", "lr", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {}\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "not", "0.0", "<=", "eps", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid epsilon value: {}\"", ".", "format", "(", "eps", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "0", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 0: {}\"", ".", "format", "(", "betas", "[", "0", "]", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "1", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 1: {}\"", ".", "format", "(", "betas", "[", "1", "]", ")", ")", "\n", "\n", "", "self", ".", "degenerated_to_sgd", "=", "degenerated_to_sgd", "\n", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "weight_decay", "=", "weight_decay", ")", "\n", "\n", "super", "(", "PlainRAdam", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.radam.PlainRAdam.__setstate__": [[135, 137], ["super().__setstate__"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.radam.AdamW.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "PlainRAdam", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.radam.PlainRAdam.step": [[138, 204], ["closure", "p.grad.data.float", "p.data.float", "exp_avg_sq.mul_().addcmul_", "exp_avg.mul_().add_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "state[].type_as", "state[].type_as", "exp_avg_sq.sqrt().add_", "p.data.float.addcdiv_", "p.data.copy_", "exp_avg_sq.mul_", "exp_avg.mul_", "p.data.float.add_", "p.data.float.add_", "p.data.copy_", "math.sqrt", "exp_avg_sq.sqrt", "p.data.float.add_"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "\n", "        ", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "\n", "            ", "for", "p", "in", "group", "[", "\"params\"", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", ".", "float", "(", ")", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\"RAdam does not support sparse gradients\"", ")", "\n", "\n", "", "p_data_fp32", "=", "p", ".", "data", ".", "float", "(", ")", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "\"step\"", "]", "=", "0", "\n", "state", "[", "\"exp_avg\"", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "state", "[", "\"exp_avg_sq\"", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "", "else", ":", "\n", "                    ", "state", "[", "\"exp_avg\"", "]", "=", "state", "[", "\"exp_avg\"", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "state", "[", "\"exp_avg_sq\"", "]", "=", "state", "[", "\"exp_avg_sq\"", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "\n", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "\"exp_avg\"", "]", ",", "state", "[", "\"exp_avg_sq\"", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "\"betas\"", "]", "\n", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "\n", "state", "[", "\"step\"", "]", "+=", "1", "\n", "beta2_t", "=", "beta2", "**", "state", "[", "\"step\"", "]", "\n", "N_sma_max", "=", "2", "/", "(", "1", "-", "beta2", ")", "-", "1", "\n", "N_sma", "=", "N_sma_max", "-", "2", "*", "state", "[", "\"step\"", "]", "*", "beta2_t", "/", "(", "1", "-", "beta2_t", ")", "\n", "\n", "# more conservative since it's an approximated value", "\n", "if", "N_sma", ">=", "5", ":", "\n", "                    ", "if", "group", "[", "\"weight_decay\"", "]", "!=", "0", ":", "\n", "                        ", "p_data_fp32", ".", "add_", "(", "-", "group", "[", "\"weight_decay\"", "]", "*", "group", "[", "\"lr\"", "]", ",", "p_data_fp32", ")", "\n", "", "step_size", "=", "(", "\n", "group", "[", "\"lr\"", "]", "\n", "*", "math", ".", "sqrt", "(", "\n", "(", "1", "-", "beta2_t", ")", "\n", "*", "(", "N_sma", "-", "4", ")", "\n", "/", "(", "N_sma_max", "-", "4", ")", "\n", "*", "(", "N_sma", "-", "2", ")", "\n", "/", "N_sma", "\n", "*", "N_sma_max", "\n", "/", "(", "N_sma_max", "-", "2", ")", "\n", ")", "\n", "/", "(", "1", "-", "beta1", "**", "state", "[", "\"step\"", "]", ")", "\n", ")", "\n", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "\"eps\"", "]", ")", "\n", "p_data_fp32", ".", "addcdiv_", "(", "-", "step_size", ",", "exp_avg", ",", "denom", ")", "\n", "p", ".", "data", ".", "copy_", "(", "p_data_fp32", ")", "\n", "", "elif", "self", ".", "degenerated_to_sgd", ":", "\n", "                    ", "if", "group", "[", "\"weight_decay\"", "]", "!=", "0", ":", "\n", "                        ", "p_data_fp32", ".", "add_", "(", "-", "group", "[", "\"weight_decay\"", "]", "*", "group", "[", "\"lr\"", "]", ",", "p_data_fp32", ")", "\n", "", "step_size", "=", "group", "[", "\"lr\"", "]", "/", "(", "1", "-", "beta1", "**", "state", "[", "\"step\"", "]", ")", "\n", "p_data_fp32", ".", "add_", "(", "-", "step_size", ",", "exp_avg", ")", "\n", "p", ".", "data", ".", "copy_", "(", "p_data_fp32", ")", "\n", "\n", "", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.radam.AdamW.__init__": [[207, 219], ["dict", "torch.optim.optimizer.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.radam.AdamW.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-8", ",", "weight_decay", "=", "0", ",", "warmup", "=", "0", ")", ":", "\n", "        ", "if", "not", "0.0", "<=", "lr", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {}\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "not", "0.0", "<=", "eps", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid epsilon value: {}\"", ".", "format", "(", "eps", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "0", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 0: {}\"", ".", "format", "(", "betas", "[", "0", "]", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "1", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 1: {}\"", ".", "format", "(", "betas", "[", "1", "]", ")", ")", "\n", "\n", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "weight_decay", "=", "weight_decay", ",", "warmup", "=", "warmup", ")", "\n", "super", "(", "AdamW", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.radam.AdamW.__setstate__": [[220, 222], ["super().__setstate__"], "methods", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.radam.AdamW.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "AdamW", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.ext.radam.AdamW.step": [[223, 278], ["closure", "p.grad.data.float", "p.data.float", "exp_avg_sq.mul_().addcmul_", "exp_avg.mul_().add_", "exp_avg_sq.sqrt().add_", "p.data.float.addcdiv_", "p.data.copy_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "state[].type_as", "state[].type_as", "p.data.float.add_", "exp_avg_sq.mul_", "exp_avg.mul_", "exp_avg_sq.sqrt", "math.sqrt"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "\n", "            ", "for", "p", "in", "group", "[", "\"params\"", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", ".", "float", "(", ")", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\n", "\"Adam does not support sparse gradients, please consider SparseAdam instead\"", "\n", ")", "\n", "\n", "", "p_data_fp32", "=", "p", ".", "data", ".", "float", "(", ")", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "\"step\"", "]", "=", "0", "\n", "state", "[", "\"exp_avg\"", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "state", "[", "\"exp_avg_sq\"", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "", "else", ":", "\n", "                    ", "state", "[", "\"exp_avg\"", "]", "=", "state", "[", "\"exp_avg\"", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "state", "[", "\"exp_avg_sq\"", "]", "=", "state", "[", "\"exp_avg_sq\"", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "\n", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "\"exp_avg\"", "]", ",", "state", "[", "\"exp_avg_sq\"", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "\"betas\"", "]", "\n", "\n", "state", "[", "\"step\"", "]", "+=", "1", "\n", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "\n", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "\"eps\"", "]", ")", "\n", "bias_correction1", "=", "1", "-", "beta1", "**", "state", "[", "\"step\"", "]", "\n", "bias_correction2", "=", "1", "-", "beta2", "**", "state", "[", "\"step\"", "]", "\n", "\n", "if", "group", "[", "\"warmup\"", "]", ">", "state", "[", "\"step\"", "]", ":", "\n", "                    ", "scheduled_lr", "=", "1e-8", "+", "state", "[", "\"step\"", "]", "*", "group", "[", "\"lr\"", "]", "/", "group", "[", "\"warmup\"", "]", "\n", "", "else", ":", "\n", "                    ", "scheduled_lr", "=", "group", "[", "\"lr\"", "]", "\n", "\n", "", "step_size", "=", "scheduled_lr", "*", "math", ".", "sqrt", "(", "bias_correction2", ")", "/", "bias_correction1", "\n", "\n", "if", "group", "[", "\"weight_decay\"", "]", "!=", "0", ":", "\n", "                    ", "p_data_fp32", ".", "add_", "(", "-", "group", "[", "\"weight_decay\"", "]", "*", "scheduled_lr", ",", "p_data_fp32", ")", "\n", "\n", "", "p_data_fp32", ".", "addcdiv_", "(", "-", "step_size", ",", "exp_avg", ",", "denom", ")", "\n", "\n", "p", ".", "data", ".", "copy_", "(", "p_data_fp32", ")", "\n", "\n", "", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.examples.simple_runner.create_sample_jiant_task_container": [[42, 115], ["jiant.create_jiant_task_container_from_dict", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.container_setup.create_jiant_task_container_from_dict"], ["", "def", "create_sample_jiant_task_container", "(", "working_dir", ")", ":", "\n", "    ", "jiant_task_container", "=", "container_setup", ".", "create_jiant_task_container_from_dict", "(", "{", "\n", "\"task_config_path_dict\"", ":", "{", "\n", "\"mnli\"", ":", "os", ".", "path", ".", "join", "(", "working_dir", ",", "\"data/glue/configs/mnli.json\"", ")", ",", "\n", "\"qnli\"", ":", "os", ".", "path", ".", "join", "(", "working_dir", ",", "\"data/glue/configs/qnli.json\"", ")", ",", "\n", "\"rte\"", ":", "os", ".", "path", ".", "join", "(", "working_dir", ",", "\"data/glue/configs/rte.json\"", ")", ",", "\n", "}", ",", "\n", "\"task_cache_config_dict\"", ":", "{", "\n", "\"mnli\"", ":", "{", "\n", "\"train\"", ":", "os", ".", "path", ".", "join", "(", "working_dir", ",", "\"cache/mnli/train\"", ")", ",", "\n", "\"val\"", ":", "os", ".", "path", ".", "join", "(", "working_dir", ",", "\"cache/mnli/val\"", ")", ",", "\n", "\"val_labels\"", ":", "os", ".", "path", ".", "join", "(", "working_dir", ",", "\"cache/mnli/val_labels\"", ")", ",", "\n", "}", ",", "\n", "\"qnli\"", ":", "{", "\n", "\"train\"", ":", "os", ".", "path", ".", "join", "(", "working_dir", ",", "\"cache/qnli/train\"", ")", ",", "\n", "\"val\"", ":", "os", ".", "path", ".", "join", "(", "working_dir", ",", "\"cache/qnli/val\"", ")", ",", "\n", "\"val_labels\"", ":", "os", ".", "path", ".", "join", "(", "working_dir", ",", "\"cache/qnli/val_labels\"", ")", ",", "\n", "}", ",", "\n", "\"rte\"", ":", "{", "\n", "\"train\"", ":", "os", ".", "path", ".", "join", "(", "working_dir", ",", "\"cache/rte/train\"", ")", ",", "\n", "\"val\"", ":", "os", ".", "path", ".", "join", "(", "working_dir", ",", "\"cache/rte/val\"", ")", ",", "\n", "\"val_labels\"", ":", "os", ".", "path", ".", "join", "(", "working_dir", ",", "\"cache/rte/val_labels\"", ")", ",", "\n", "}", ",", "\n", "}", ",", "\n", "\"sampler_config\"", ":", "{", "\n", "\"sampler_type\"", ":", "\"UniformMultiTaskSampler\"", ",", "\n", "}", ",", "\n", "\"global_train_config\"", ":", "{", "\n", "\"max_steps\"", ":", "1000", ",", "\n", "\"warmup_steps\"", ":", "100", ",", "\n", "}", ",", "\n", "\"task_specific_configs_dict\"", ":", "{", "\n", "\"mnli\"", ":", "{", "\n", "\"train_batch_size\"", ":", "8", ",", "\n", "\"eval_batch_size\"", ":", "32", ",", "\n", "\"gradient_accumulation_steps\"", ":", "1", ",", "\n", "\"eval_subset_num\"", ":", "500", ",", "\n", "}", ",", "\n", "\"qnli\"", ":", "{", "\n", "\"train_batch_size\"", ":", "8", ",", "\n", "\"eval_batch_size\"", ":", "32", ",", "\n", "\"gradient_accumulation_steps\"", ":", "1", ",", "\n", "\"eval_subset_num\"", ":", "500", ",", "\n", "}", ",", "\n", "\"rte\"", ":", "{", "\n", "\"train_batch_size\"", ":", "4", ",", "\n", "\"eval_batch_size\"", ":", "32", ",", "\n", "\"gradient_accumulation_steps\"", ":", "1", ",", "\n", "\"eval_subset_num\"", ":", "500", ",", "\n", "}", ",", "\n", "}", ",", "\n", "\"taskmodels_config\"", ":", "{", "\n", "\"task_to_taskmodel_map\"", ":", "{", "\n", "\"mnli\"", ":", "\"nli\"", ",", "\n", "\"qnli\"", ":", "\"nli\"", ",", "\n", "\"rte\"", ":", "\"rte\"", ",", "\n", "}", ",", "\n", "\"taskmodel_config_map\"", ":", "{", "\n", "\"nli\"", ":", "None", ",", "\n", "\"rte\"", ":", "None", ",", "\n", "}", "\n", "}", ",", "\n", "\"task_run_config\"", ":", "{", "\n", "\"train_task_list\"", ":", "[", "\"mnli\"", ",", "\"qnli\"", ",", "\"rte\"", "]", ",", "\n", "\"train_val_task_list\"", ":", "[", "\"mnli\"", ",", "\"qnli\"", ",", "\"rte\"", "]", ",", "\n", "\"val_task_list\"", ":", "[", "\"rte\"", ",", "\"mnli\"", "]", ",", "\n", "\"test_task_list\"", ":", "[", "]", ",", "\n", "}", ",", "\n", "\"metric_aggregator_config\"", ":", "{", "\n", "\"metric_aggregator_type\"", ":", "\"EqualMetricAggregator\"", ",", "\n", "}", ",", "\n", "}", ")", "\n", "return", "jiant_task_container", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.examples.simple_runner.main": [[117, 133], ["jiant.quick_init", "simple_runner.create_sample_jiant_task_container", "jiant.proj.main.runscript.setup_runner", "jiant.proj.main.runscript.setup_runner.run_train", "jiant.proj.main.runscript.setup_runner.run_val", "jiant.utils.display.show_json", "task_result_dict[].to_dict", "runner.run_val.items"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.initialization.quick_init", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.examples.simple_runner.create_sample_jiant_task_container", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runscript.setup_runner", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.JiantRunner.run_train", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.runner.run_val", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.utils.display.show_json", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.ValState.to_dict"], ["", "def", "main", "(", "args", ":", "RunConfiguration", ")", ":", "\n", "    ", "quick_init_out", "=", "initialization", ".", "quick_init", "(", "args", "=", "args", ",", "verbose", "=", "True", ")", "\n", "jiant_task_container", "=", "create_sample_jiant_task_container", "(", "\n", "working_dir", "=", "args", ".", "working_dir", ",", "\n", ")", "\n", "runner", "=", "setup_runner", "(", "\n", "args", "=", "args", ",", "\n", "jiant_task_container", "=", "jiant_task_container", ",", "\n", "quick_init_out", "=", "quick_init_out", ",", "\n", "verbose", "=", "True", ",", "\n", ")", "\n", "runner", ".", "run_train", "(", ")", "\n", "val_metrics", "=", "runner", ".", "run_val", "(", "jiant_task_container", ".", "task_run_config", ".", "val_task_list", ")", "\n", "show_json", "(", "{", "\n", "task_name", ":", "task_result_dict", "[", "\"metrics\"", "]", ".", "to_dict", "(", ")", "\n", "for", "task_name", ",", "task_result_dict", "in", "val_metrics", ".", "items", "(", ")", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.examples.create_model.main": [[24, 114], ["torch.device", "jiant.shared.model_setup.ModelArchitectures.from_model_type", "jiant.get_ancestor_model", "jiant.get_encoder", "jiant.get_tokenizer", "jiant.proj.main.modeling.primary.JiantModel", "jiant_model.to.to", "task_dict.items", "task_dict.items", "jiant.create_task_from_config_path", "jiant.create_task_from_config_path", "jiant.create_task_from_config_path", "jiant.ClassificationModel", "jiant.ClassificationModel", "jiant.ChunkedFilesDataCache", "caching.ChunkedFilesDataCache.get_iterable_dataset", "jiant.DataLoaderWithLength", "next", "batch.to.to", "print", "print", "print", "torch.cuda.is_available", "os.path.join", "os.path.join", "os.path.join", "iter", "torch.no_grad", "jiant.proj.main.modeling.primary.wrap_jiant_forward", "jiant.ClassificationHead", "jiant.ClassificationHead", "os.path.join", "len", "len"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_resolution.ModelArchitectures.from_model_type", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.model_setup.get_ancestor_model", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.model_setup.get_encoder", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.model_setup.get_tokenizer", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.core.BatchTuple.to", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.retrieval.create_task_from_config_path", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.retrieval.create_task_from_config_path", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.retrieval.create_task_from_config_path", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.shared.caching.ChunkedFilesDataCache.get_iterable_dataset", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.tasks.core.BatchTuple.to", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.components.task_sampler.BaseMultiTaskSampler.iter", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.modeling.primary.wrap_jiant_forward"], ["", "def", "main", "(", "args", ":", "RunConfiguration", ")", ":", "\n", "    ", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "# === Shared model components setup === #", "\n", "model_type", "=", "\"roberta-base\"", "\n", "model_arch", "=", "ModelArchitectures", ".", "from_model_type", "(", "model_type", "=", "model_type", ")", "\n", "transformers_class_spec", "=", "model_setup", ".", "TRANSFORMERS_CLASS_SPEC_DICT", "[", "model_arch", "]", "\n", "ancestor_model", "=", "model_setup", ".", "get_ancestor_model", "(", "\n", "transformers_class_spec", "=", "transformers_class_spec", ",", "\n", "model_config_path", "=", "args", ".", "model_config_path", ",", "\n", ")", "\n", "encoder", "=", "model_setup", ".", "get_encoder", "(", "\n", "model_arch", "=", "model_arch", ",", "\n", "ancestor_model", "=", "ancestor_model", ",", "\n", ")", "\n", "tokenizer", "=", "shared_model_setup", ".", "get_tokenizer", "(", "\n", "model_type", "=", "model_type", ",", "\n", "tokenizer_path", "=", "args", ".", "model_tokenizer_path", ",", "\n", ")", "\n", "\n", "# === Taskmodels setup === #", "\n", "task_dict", "=", "{", "\n", "\"mnli\"", ":", "tasks", ".", "create_task_from_config_path", "(", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "task_config_base_path", ",", "\"mnli.json\"", ",", "\n", ")", ")", ",", "\n", "\"qnli\"", ":", "tasks", ".", "create_task_from_config_path", "(", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "task_config_base_path", ",", "\"qnli.json\"", ",", "\n", ")", ")", ",", "\n", "\"rte\"", ":", "tasks", ".", "create_task_from_config_path", "(", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "task_config_base_path", ",", "\"qnli.json\"", ",", "\n", ")", ")", "\n", "}", "\n", "taskmodels_dict", "=", "{", "\n", "\"nli\"", ":", "taskmodels", ".", "ClassificationModel", "(", "\n", "encoder", "=", "encoder", ",", "\n", "classification_head", "=", "heads", ".", "ClassificationHead", "(", "\n", "hidden_size", "=", "encoder", ".", "config", ".", "hidden_size", ",", "\n", "hidden_dropout_prob", "=", "encoder", ".", "config", ".", "hidden_dropout_prob", ",", "\n", "num_labels", "=", "len", "(", "task_dict", "[", "\"mnli\"", "]", ".", "LABELS", ")", ",", "\n", ")", ",", "\n", ")", ",", "\n", "\"rte\"", ":", "taskmodels", ".", "ClassificationModel", "(", "\n", "encoder", "=", "encoder", ",", "\n", "classification_head", "=", "heads", ".", "ClassificationHead", "(", "\n", "hidden_size", "=", "encoder", ".", "config", ".", "hidden_size", ",", "\n", "hidden_dropout_prob", "=", "encoder", ".", "config", ".", "hidden_dropout_prob", ",", "\n", "num_labels", "=", "len", "(", "task_dict", "[", "\"rte\"", "]", ".", "LABELS", ")", ",", "\n", ")", ",", "\n", ")", ",", "\n", "}", "\n", "task_to_taskmodel_map", "=", "{", "\n", "\"mnli\"", ":", "\"nli\"", ",", "\n", "\"qnli\"", ":", "\"nli\"", ",", "\n", "\"rte\"", ":", "\"rte\"", ",", "\n", "}", "\n", "\n", "# === Final === #", "\n", "jiant_model", "=", "JiantModel", "(", "\n", "task_dict", "=", "task_dict", ",", "\n", "encoder", "=", "encoder", ",", "\n", "taskmodels_dict", "=", "taskmodels_dict", ",", "\n", "task_to_taskmodel_map", "=", "task_to_taskmodel_map", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", ")", "\n", "jiant_model", "=", "jiant_model", ".", "to", "(", "device", ")", "\n", "\n", "# === Run === #", "\n", "task_dataloader_dict", "=", "{", "}", "\n", "for", "task_name", ",", "task", "in", "task_dict", ".", "items", "(", ")", ":", "\n", "        ", "train_cache", "=", "caching", ".", "ChunkedFilesDataCache", "(", "\n", "cache_fol_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "task_cache_base_path", ",", "task_name", ",", "\"train\"", ")", ",", "\n", ")", "\n", "train_dataset", "=", "train_cache", ".", "get_iterable_dataset", "(", "buffer_size", "=", "10000", ",", "shuffle", "=", "True", ")", "\n", "train_dataloader", "=", "torch_utils", ".", "DataLoaderWithLength", "(", "\n", "dataset", "=", "train_dataset", ",", "\n", "batch_size", "=", "4", ",", "\n", "collate_fn", "=", "task", ".", "collate_fn", ",", "\n", ")", "\n", "task_dataloader_dict", "[", "task_name", "]", "=", "train_dataloader", "\n", "\n", "", "for", "task_name", ",", "task", "in", "task_dict", ".", "items", "(", ")", ":", "\n", "        ", "batch", ",", "batch_metadata", "=", "next", "(", "iter", "(", "task_dataloader_dict", "[", "task_name", "]", ")", ")", "\n", "batch", "=", "batch", ".", "to", "(", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "model_output", "=", "wrap_jiant_forward", "(", "\n", "jiant_model", "=", "jiant_model", ",", "batch", "=", "batch", ",", "task", "=", "task", ",", "compute_loss", "=", "True", ",", "\n", ")", "\n", "", "print", "(", "task_name", ")", "\n", "print", "(", "model_output", ")", "\n", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.test_zconf.test_conf_jsons.get_json_path": [[8, 10], ["os.path.join", "os.path.dirname", "os.path.abspath"], "function", ["None"], ["def", "get_json_path", "(", "file_name", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", ",", "\"jsons\"", ",", "file_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.test_zconf.test_conf_jsons.test_args_required_command_line": [[20, 23], ["pytest.raises", "RunConfiguration.run_cli_json_prepend", "shlex.split"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.RunConfig.run_cli_json_prepend"], ["", "def", "test_args_required_command_line", "(", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "SystemExit", ")", ":", "\n", "        ", "RunConfiguration", ".", "run_cli_json_prepend", "(", "cl_args", "=", "shlex", ".", "split", "(", "\"\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.test_zconf.test_conf_jsons.test_empty": [[25, 35], ["RunConfiguration.run_cli_json_prepend", "shlex.split", "test_conf_jsons.get_json_path"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.RunConfig.run_cli_json_prepend", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.test_zconf.test_conf_jsons.get_json_path"], ["", "", "def", "test_empty", "(", ")", ":", "\n", "    ", "args", "=", "RunConfiguration", ".", "run_cli_json_prepend", "(", "cl_args", "=", "shlex", ".", "split", "(", "f\"\"\"\n        --ZZsrc={get_json_path(\"empty.json\")}\n        --str_attr \"hi\"\n        --int_attr 1\n    \"\"\"", ")", ")", "\n", "assert", "args", ".", "str_attr", "==", "\"hi\"", "\n", "assert", "args", ".", "int_attr", "==", "1", "\n", "assert", "args", ".", "int_default_attr", "==", "2", "\n", "assert", "not", "args", ".", "store_true_attr", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.test_zconf.test_conf_jsons.test_simple": [[37, 46], ["RunConfiguration.run_cli_json_prepend", "shlex.split", "test_conf_jsons.get_json_path"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.RunConfig.run_cli_json_prepend", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.test_zconf.test_conf_jsons.get_json_path"], ["", "def", "test_simple", "(", ")", ":", "\n", "    ", "args", "=", "RunConfiguration", ".", "run_cli_json_prepend", "(", "cl_args", "=", "shlex", ".", "split", "(", "f\"\"\"\n        --ZZsrc={get_json_path(\"simple.json\")}\n        --int_attr 1\n    \"\"\"", ")", ")", "\n", "assert", "args", ".", "str_attr", "==", "\"hello\"", "\n", "assert", "args", ".", "int_attr", "==", "1", "\n", "assert", "args", ".", "int_default_attr", "==", "3", "\n", "assert", "not", "args", ".", "store_true_attr", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.test_zconf.test_conf_jsons.test_simple_override_conflict": [[48, 55], ["pytest.raises", "RunConfiguration.run_cli_json_prepend", "shlex.split", "test_conf_jsons.get_json_path"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.RunConfig.run_cli_json_prepend", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.test_zconf.test_conf_jsons.get_json_path"], ["", "def", "test_simple_override_conflict", "(", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "RuntimeError", ")", ":", "\n", "        ", "RunConfiguration", ".", "run_cli_json_prepend", "(", "cl_args", "=", "shlex", ".", "split", "(", "f\"\"\"\n            --ZZsrc={get_json_path(\"simple.json\")}\n            --str_attr \"bye\"\n            --int_attr 1\n        \"\"\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.test_zconf.test_conf_jsons.test_simple_override_working": [[57, 68], ["RunConfiguration.run_cli_json_prepend", "shlex.split", "test_conf_jsons.get_json_path"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.RunConfig.run_cli_json_prepend", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.test_zconf.test_conf_jsons.get_json_path"], ["", "", "def", "test_simple_override_working", "(", ")", ":", "\n", "    ", "args", "=", "RunConfiguration", ".", "run_cli_json_prepend", "(", "cl_args", "=", "shlex", ".", "split", "(", "f\"\"\"\n        --ZZsrc={get_json_path(\"simple.json\")}\n        --ZZoverrides str_attr\n        --str_attr \"bye\"\n        --int_attr 1\n    \"\"\"", ")", ")", "\n", "assert", "args", ".", "str_attr", "==", "\"bye\"", "\n", "assert", "args", ".", "int_attr", "==", "1", "\n", "assert", "args", ".", "int_default_attr", "==", "3", "\n", "assert", "not", "args", ".", "store_true_attr", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.test_zconf.test_conf_jsons.test_simple_double_override": [[70, 82], ["RunConfiguration.run_cli_json_prepend", "shlex.split", "test_conf_jsons.get_json_path"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.RunConfig.run_cli_json_prepend", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.test_zconf.test_conf_jsons.get_json_path"], ["", "def", "test_simple_double_override", "(", ")", ":", "\n", "    ", "args", "=", "RunConfiguration", ".", "run_cli_json_prepend", "(", "cl_args", "=", "shlex", ".", "split", "(", "f\"\"\"\n        --ZZsrc={get_json_path(\"simple.json\")}\n        --ZZoverrides str_attr int_default_attr\n        --str_attr \"bye\"\n        --int_attr 1\n        --int_default_attr 4\n    \"\"\"", ")", ")", "\n", "assert", "args", ".", "str_attr", "==", "\"bye\"", "\n", "assert", "args", ".", "int_attr", "==", "1", "\n", "assert", "args", ".", "int_default_attr", "==", "4", "\n", "assert", "not", "args", ".", "store_true_attr", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.test_zconf.test_conf_jsons.test_store_true": [[84, 94], ["RunConfiguration.run_cli_json_prepend", "shlex.split", "test_conf_jsons.get_json_path"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.RunConfig.run_cli_json_prepend", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.test_zconf.test_conf_jsons.get_json_path"], ["", "def", "test_store_true", "(", ")", ":", "\n", "    ", "args", "=", "RunConfiguration", ".", "run_cli_json_prepend", "(", "cl_args", "=", "shlex", ".", "split", "(", "f\"\"\"\n        --ZZsrc={get_json_path(\"store_true.json\")}\n        --str_attr \"hello\"\n        --int_attr 1\n    \"\"\"", ")", ")", "\n", "assert", "args", ".", "str_attr", "==", "\"hello\"", "\n", "assert", "args", ".", "int_attr", "==", "1", "\n", "assert", "args", ".", "int_default_attr", "==", "2", "\n", "assert", "args", ".", "store_true_attr", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.test_zconf.test_conf_jsons.test_store_true_false": [[96, 106], ["RunConfiguration.run_cli_json_prepend", "shlex.split", "test_conf_jsons.get_json_path"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.RunConfig.run_cli_json_prepend", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.test_zconf.test_conf_jsons.get_json_path"], ["", "def", "test_store_true_false", "(", ")", ":", "\n", "    ", "args", "=", "RunConfiguration", ".", "run_cli_json_prepend", "(", "cl_args", "=", "shlex", ".", "split", "(", "f\"\"\"\n        --ZZsrc={get_json_path(\"store_true_false.json\")}\n        --str_attr \"hello\"\n        --int_attr 1\n    \"\"\"", ")", ")", "\n", "assert", "args", ".", "str_attr", "==", "\"hello\"", "\n", "assert", "args", ".", "int_attr", "==", "1", "\n", "assert", "args", ".", "int_default_attr", "==", "2", "\n", "assert", "not", "args", ".", "store_true_attr", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.test_zconf.test_conf_jsons.test_store_true_override": [[108, 119], ["RunConfiguration.run_cli_json_prepend", "shlex.split", "test_conf_jsons.get_json_path"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.RunConfig.run_cli_json_prepend", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.test_zconf.test_conf_jsons.get_json_path"], ["", "def", "test_store_true_override", "(", ")", ":", "\n", "    ", "args", "=", "RunConfiguration", ".", "run_cli_json_prepend", "(", "cl_args", "=", "shlex", ".", "split", "(", "f\"\"\"\n        --ZZsrc={get_json_path(\"store_true.json\")}\n        --ZZoverrides store_true_attr\n        --str_attr \"hello\"\n        --int_attr 1\n    \"\"\"", ")", ")", "\n", "assert", "args", ".", "str_attr", "==", "\"hello\"", "\n", "assert", "args", ".", "int_attr", "==", "1", "\n", "assert", "args", ".", "int_default_attr", "==", "2", "\n", "assert", "not", "args", ".", "store_true_attr", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.test_zconf.test_conf_jsons.test_store_true_false_override": [[121, 133], ["RunConfiguration.run_cli_json_prepend", "shlex.split", "test_conf_jsons.get_json_path"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.RunConfig.run_cli_json_prepend", "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.test_zconf.test_conf_jsons.get_json_path"], ["", "def", "test_store_true_false_override", "(", ")", ":", "\n", "    ", "args", "=", "RunConfiguration", ".", "run_cli_json_prepend", "(", "cl_args", "=", "shlex", ".", "split", "(", "f\"\"\"\n        --ZZsrc={get_json_path(\"store_true_false.json\")}\n        --ZZoverrides store_true_attr\n        --str_attr \"hello\"\n        --int_attr 1\n        --store_true_attr\n    \"\"\"", ")", ")", "\n", "assert", "args", ".", "str_attr", "==", "\"hello\"", "\n", "assert", "args", ".", "int_attr", "==", "1", "\n", "assert", "args", ".", "int_default_attr", "==", "2", "\n", "assert", "args", ".", "store_true_attr", "\n", "", ""]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.test_zconf.test_confs.test_args": [[12, 20], ["test_confs.Config", "test_confs.Config"], "function", ["None"], ["", "def", "test_args", "(", ")", ":", "\n", "    ", "config", "=", "Config", "(", "attr1", "=", "1", ",", "attr2", "=", "2", ")", "\n", "assert", "config", ".", "attr1", "==", "1", "\n", "assert", "config", ".", "attr2", "==", "2", "\n", "\n", "config", "=", "Config", "(", "attr2", "=", "2", ")", "\n", "assert", "config", ".", "attr1", "is", "None", "\n", "assert", "config", ".", "attr2", "==", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.test_zconf.test_confs.test_args_required": [[22, 25], ["pytest.raises", "test_confs.Config"], "function", ["None"], ["", "def", "test_args_required", "(", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "TypeError", ")", ":", "\n", "        ", "Config", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.test_zconf.test_confs.test_args_required_command_line": [[27, 30], ["pytest.raises", "Config.run_cli_json_prepend"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.zconf.core.RunConfig.run_cli_json_prepend"], ["", "", "def", "test_args_required_command_line", "(", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "SystemExit", ")", ":", "\n", "        ", "Config", ".", "run_cli_json_prepend", "(", "cl_args", "=", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.test_zconf.test_confs.test_to_dict": [[32, 38], ["test_confs.Config", "Config.to_dict", "len"], "function", ["home.repos.pwc.inspect_result.nyu-mll_CNLI-generalization.main.metarunner.ValState.to_dict"], ["", "", "def", "test_to_dict", "(", ")", ":", "\n", "    ", "config", "=", "Config", "(", "attr1", "=", "1", ",", "attr2", "=", "2", ")", "\n", "conf_dict", "=", "config", ".", "to_dict", "(", ")", "\n", "assert", "len", "(", "conf_dict", ")", "==", "2", "\n", "assert", "conf_dict", "[", "\"attr1\"", "]", "==", "1", "\n", "assert", "conf_dict", "[", "\"attr2\"", "]", "==", "2", "\n", "", ""]]}