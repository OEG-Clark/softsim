{"home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.linker.load_dictionary": [[11, 34], ["filename.startswith", "print", "data.dictionary.Dictionary", "data.dictionary.Dictionary", "BertTokenizer.from_pretrained.load_spirit_dictionary", "data.dictionary.Dictionary", "BertTokenizer.from_pretrained.load_wordpiece_vocab", "data.dictionary.Dictionary", "BertTokenizer.from_pretrained.load_json", "transformers.BertTokenizer.from_pretrained", "BaseException"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.load_spirit_dictionary", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.load_wordpiece_vocab", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.load_json"], ["def", "load_dictionary", "(", "config", ",", "path", ")", ":", "\n", "    ", "type", "=", "config", "[", "'type'", "]", "\n", "filename", "=", "config", "[", "'filename'", "]", "\n", "filename", "=", "filename", "if", "filename", ".", "startswith", "(", "\"/\"", ")", "else", "\"{}/{}\"", ".", "format", "(", "path", ",", "filename", ")", "\n", "\n", "if", "type", "==", "'word2vec'", ":", "\n", "        ", "print", "(", "\"init {} with {}\"", ".", "format", "(", "path", ",", "filename", ")", ")", "\n", "dictionary", "=", "Dictionary", "(", "filename", ")", "\n", "", "elif", "type", "==", "'spirit'", ":", "\n", "        ", "dictionary", "=", "Dictionary", "(", ")", "\n", "dictionary", ".", "load_spirit_dictionary", "(", "filename", ",", "config", "[", "'threshold'", "]", ")", "\n", "", "elif", "type", "==", "'vocab'", ":", "\n", "        ", "dictionary", "=", "Dictionary", "(", ")", "\n", "dictionary", ".", "load_wordpiece_vocab", "(", "filename", ")", "\n", "", "elif", "type", "==", "'json'", ":", "\n", "        ", "dictionary", "=", "Dictionary", "(", ")", "\n", "dictionary", ".", "load_json", "(", "filename", ")", "\n", "", "elif", "type", "==", "'bert'", ":", "\n", "        ", "dictionary", "=", "BertTokenizer", ".", "from_pretrained", "(", "config", "[", "'filename'", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "BaseException", "(", "\"no such type\"", ",", "type", ")", "\n", "\n", "", "return", "dictionary", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.linker.create_linking_candidates": [[36, 65], ["dict", "open", "json.loads", "curr_span_candidates[].strip", "sorted", "dict", "list", "list", "torch.tensor", "torch.tensor", "zip", "list.append", "list.append", "entity_dictionary.add"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add"], ["", "def", "create_linking_candidates", "(", "config", ",", "entity_dictionary", ":", "Dictionary", ")", ":", "\n", "# print('STARTING LOADING LINKING CANDIDATES')", "\n", "    ", "candidates_path", "=", "config", "[", "'file'", "]", "\n", "max_link_candidates", "=", "config", "[", "'max_link_candidates'", "]", "\n", "span_text_to_candidates", "=", "dict", "(", ")", "\n", "for", "curr_line", "in", "open", "(", "candidates_path", ")", ":", "\n", "        ", "curr_span_candidates", "=", "json", ".", "loads", "(", "curr_line", ")", "\n", "span_text", "=", "curr_span_candidates", "[", "'text'", "]", ".", "strip", "(", ")", "# TODO: makes sense lowercasing, or will make it worse???", "\n", "span_candidates", "=", "curr_span_candidates", "[", "'candidates'", "]", "\n", "span_scores", "=", "curr_span_candidates", "[", "'scores'", "]", "\n", "# candidates should come sorted by score, but just in case sorts again", "\n", "sorted_candidates", "=", "sorted", "(", "zip", "(", "span_candidates", ",", "span_scores", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "if", "max_link_candidates", ">", "-", "1", ":", "\n", "            ", "sorted_candidates", "=", "sorted_candidates", "[", ":", "max_link_candidates", "]", "\n", "\n", "", "span_text_to_candidates", "[", "span_text", "]", "=", "dict", "(", ")", "\n", "\n", "scores_list", "=", "list", "(", ")", "\n", "candidates_list", "=", "list", "(", ")", "\n", "for", "curr_candidate", ",", "curr_score", "in", "sorted_candidates", ":", "\n", "            ", "candidates_list", ".", "append", "(", "entity_dictionary", ".", "add", "(", "curr_candidate", ")", ")", "\n", "scores_list", ".", "append", "(", "curr_score", ")", "\n", "# passes to torch.tensor in order to decrease the memory footprint - the lists consume too much memory in python", "\n", "", "span_text_to_candidates", "[", "span_text", "]", "[", "'candidates'", "]", "=", "torch", ".", "tensor", "(", "candidates_list", ",", "dtype", "=", "torch", ".", "int", ")", "\n", "span_text_to_candidates", "[", "span_text", "]", "[", "'scores'", "]", "=", "torch", ".", "tensor", "(", "scores_list", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n", "# print('END LOADING LINKING CANDIDATES')", "\n", "\n", "", "return", "span_text_to_candidates", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.linker.create_dictionaries": [[67, 141], ["print", "config[].items", "print", "data.dictionary.Dictionary", "data.dictionary.Dictionary", "data.dictionary.Dictionary.set_unknown_token", "data.dictionary.Dictionary.load_spirit_dictionary", "data.dictionary.Dictionary.set_unknown_token", "data.dictionary.Dictionary.load_spirit_dictionary", "isinstance", "linker.load_dictionary", "print", "data.dictionary.Dictionary.set_unknown_token", "print", "print", "linker.load_dictionary", "isinstance", "print", "data.dictionary.Dictionary", "data.dictionary.Dictionary.add", "print", "print", "isinstance", "t.lower", "print", "BaseException", "print", "Exception"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.set_unknown_token", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.load_spirit_dictionary", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.set_unknown_token", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.load_spirit_dictionary", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.linker.load_dictionary", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.set_unknown_token", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.linker.load_dictionary", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "create_dictionaries", "(", "config", ",", "training", ")", ":", "\n", "    ", "path", "=", "config", "[", "'path'", "]", "\n", "\n", "print", "(", "\"Loading dictionaries (training={})\"", ".", "format", "(", "training", ")", ")", "\n", "\n", "if", "'dictionaries'", "in", "config", ":", "\n", "        ", "dictionaries", "=", "{", "}", "\n", "for", "name", ",", "dict_config", "in", "config", "[", "'dictionaries'", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "training", ":", "\n", "                ", "if", "\"init\"", "in", "dict_config", ":", "\n", "                    ", "dictionary", "=", "load_dictionary", "(", "dict_config", "[", "'init'", "]", ",", "path", ")", "\n", "if", "isinstance", "(", "dictionary", ",", "Dictionary", ")", ":", "\n", "                        ", "print", "(", "'init {}: size={}'", ".", "format", "(", "name", ",", "dictionary", ".", "size", ")", ")", "\n", "", "elif", "isinstance", "(", "dictionary", ",", "BertTokenizer", ")", ":", "\n", "                        ", "print", "(", "'init {}: size={}'", ".", "format", "(", "name", ",", "dictionary", ".", "vocab_size", ")", ")", "\n", "", "else", ":", "\n", "                        ", "raise", "Exception", "(", "'not recognized dictionary: '", ",", "dictionary", ")", "\n", "", "", "else", ":", "\n", "                    ", "print", "(", "\"init {} (blank)\"", ".", "format", "(", "name", ")", ")", "\n", "dictionary", "=", "Dictionary", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "dictionary", "=", "load_dictionary", "(", "dict_config", ",", "path", ")", "\n", "print", "(", "'load {}: size={}'", ".", "format", "(", "name", ",", "dictionary", ".", "size", ")", ")", "\n", "\n", "", "dictionary", ".", "prefix", "=", "dict_config", "[", "'prefix'", "]", "if", "'prefix'", "in", "dict_config", "else", "''", "\n", "\n", "if", "'rewriter'", "in", "dict_config", ":", "\n", "                ", "if", "dict_config", "[", "'rewriter'", "]", "==", "'lowercase'", ":", "\n", "                    ", "dictionary", ".", "rewriter", "=", "lambda", "t", ":", "t", ".", "lower", "(", ")", "\n", "", "elif", "dict_config", "[", "'rewriter'", "]", "==", "'none'", ":", "\n", "                    ", "print", "(", "\"rewriter: none\"", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "BaseException", "(", "\"no such rewriter\"", ",", "dict_config", "[", "'rewriter'", "]", ")", "\n", "\n", "", "", "if", "'append'", "in", "dict_config", ":", "\n", "                ", "for", "x", "in", "dict_config", "[", "'append'", "]", ":", "\n", "                    ", "idx", "=", "dictionary", ".", "add", "(", "x", ")", "\n", "print", "(", "\"   add token\"", ",", "x", ",", "\"->\"", ",", "idx", ")", "\n", "\n", "", "", "if", "'unknown'", "in", "dict_config", ":", "\n", "                ", "dictionary", ".", "set_unknown_token", "(", "dict_config", "[", "'unknown'", "]", ")", "\n", "\n", "", "if", "'debug'", "in", "dict_config", ":", "\n", "                ", "dictionary", ".", "debug", "=", "dict_config", "[", "'debug'", "]", "\n", "\n", "", "if", "'update'", "in", "dict_config", ":", "\n", "                ", "dictionary", ".", "update", "=", "dict_config", "[", "'update'", "]", "\n", "\n", "# kzaporoj 20/12/2020 - I comment this update to false, reason: let's say we want to try on a different", "\n", "# domain corpus such as AIDA Conll a particular model trained on DWIE. There will be many words non-existent", "\n", "# in DWIE, but whose embedding can give extra information if they are close enough to the embeddings of", "\n", "# words in DWIE.", "\n", "# if not training:", "\n", "#     dictionary.update = False", "\n", "\n", "", "if", "isinstance", "(", "dictionary", ",", "Dictionary", ")", ":", "\n", "                ", "print", "(", "\"   update:\"", ",", "dictionary", ".", "update", ")", "\n", "print", "(", "\"   debug:\"", ",", "dictionary", ".", "debug", ")", "\n", "\n", "", "dictionaries", "[", "name", "]", "=", "dictionary", "\n", "\n", "", "return", "dictionaries", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"WARNING: using wikipedia dictionary\"", ")", "\n", "words", "=", "Dictionary", "(", ")", "\n", "entities", "=", "Dictionary", "(", ")", "\n", "\n", "words", ".", "set_unknown_token", "(", "\"UNKNOWN\"", ")", "\n", "words", ".", "load_spirit_dictionary", "(", "'data/tokens.dict'", ",", "5", ")", "\n", "entities", ".", "set_unknown_token", "(", "\"UNKNOWN\"", ")", "\n", "entities", ".", "load_spirit_dictionary", "(", "'data/entities.dict'", ",", "5", ")", "\n", "return", "{", "\n", "'words'", ":", "words", ",", "\n", "'entities'", ":", "entities", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.linker.create_model": [[144, 225], ["models.model_create", "print", "print", "dict().items", "print", "print", "print", "dict().items", "print", "value.numel", "dict", "print", "dict", "models.model_create.named_parameters", "print", "print", "models.model_create.named_parameters", "init_cfg.items", "print", "torch.nn.init.orthogonal_", "param.data.size", "print", "torch.split", "print", "value.numel", "value.numel", "param.data.size", "param.data.sum().item", "param.data.size", "torch.nn.init.orthogonal_", "print", "param.data.size", "param.data.sum().item", "param.data.norm().item", "torch.nn.init.xavier_normal_", "param.data.norm().item", "print", "tmp.size", "param.data.sum().item", "param.data.size", "param.data.sum", "param.data.sum", "param.data.norm", "param.data.norm", "param.data.sum"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.__init__.model_create", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "", "def", "create_model", "(", "config", ",", "dictionaries", ")", ":", "\n", "# model_name = config['model']['name']", "\n", "# if model_name == \"model3\":", "\n", "#     model = MyModel3(dictionaries, config['model'])", "\n", "# elif model_name == \"model4\":", "\n", "#     model = MyModel4(dictionaries, config['model'])", "\n", "#     # model.load_tensorflow_model()", "\n", "# elif model_name == \"model5\":", "\n", "#     model = MyModel5(dictionaries, config['model'])", "\n", "# elif model_name == \"entbydecr1\":", "\n", "#     model = entybydesc.MyModel1(dictionaries, config['model'])", "\n", "# elif model_name == \"model6\":", "\n", "#     model = MyModel6(dictionaries, config['model'])", "\n", "# elif model_name == \"lm_1\":", "\n", "#     model = LM1(dictionaries, config['model'])", "\n", "# elif model_name == \"lm_2\":", "\n", "#     model = LM2(dictionaries, config['model'])", "\n", "# elif model_name == \"ner_1\":", "\n", "#     model = Ner1(dictionaries, config['model'])", "\n", "# elif model_name == \"ner_2\":", "\n", "#     model = Ner2(dictionaries, config['model'])", "\n", "# elif model_name == \"linker_1\":", "\n", "#     model = Linker1(dictionaries, config['model'])", "\n", "# elif model_name == \"nerlink_1\":", "\n", "#     model = NerLink1(dictionaries, config['model'])", "\n", "# elif model_name == \"nerlink_2\":", "\n", "#     model = NerLink2(dictionaries, config['model'])", "\n", "# elif model_name == \"linker_adv_1\":", "\n", "#     model = LinkerAdv1(dictionaries, config['model'])", "\n", "# else:", "\n", "#     raise BaseException(\"no such model: \", model_name)", "\n", "# from models import model_create", "\n", "    ", "model", "=", "model_create", "(", "config", "[", "'model'", "]", ",", "dictionaries", ")", "\n", "\n", "print", "(", "\"Model:\"", ",", "model", ")", "\n", "\n", "regularization", "=", "config", "[", "'optimizer'", "]", "[", "'regularization'", "]", "if", "'regularization'", "in", "config", "[", "'optimizer'", "]", "else", "{", "}", "\n", "\n", "print", "(", "\"Parameters:\"", ")", "\n", "parameters", "=", "[", "]", "\n", "num_params", "=", "0", "\n", "for", "key", ",", "value", "in", "dict", "(", "model", ".", "named_parameters", "(", ")", ")", ".", "items", "(", ")", ":", "\n", "# \t\tprint(key)", "\n", "        ", "if", "not", "value", ".", "requires_grad", ":", "\n", "            ", "print", "(", "\"skip \"", ",", "key", ")", "\n", "continue", "\n", "", "else", ":", "\n", "            ", "if", "key", "in", "regularization", ":", "\n", "                ", "print", "(", "\"param {} size={} l2={}\"", ".", "format", "(", "key", ",", "value", ".", "numel", "(", ")", ",", "regularization", "[", "key", "]", ")", ")", "\n", "parameters", "+=", "[", "{", "\"params\"", ":", "value", ",", "\"weight_decay\"", ":", "regularization", "[", "key", "]", "}", "]", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"param {} size={}\"", ".", "format", "(", "key", ",", "value", ".", "numel", "(", ")", ")", ")", "\n", "parameters", "+=", "[", "{", "\"params\"", ":", "value", "}", "]", "\n", "", "", "num_params", "+=", "value", ".", "numel", "(", ")", "\n", "", "print", "(", "\"total number of params: {} = {}M\"", ".", "format", "(", "num_params", ",", "num_params", "/", "1024", "/", "1024", "*", "4", ")", ")", "\n", "print", "(", ")", "\n", "\n", "init_cfg", "=", "config", "[", "'optimizer'", "]", "[", "'initializer'", "]", "if", "'initializer'", "in", "config", "[", "'optimizer'", "]", "else", "{", "}", "\n", "\n", "print", "(", "\"Initializaing parameters\"", ")", "\n", "for", "key", ",", "param", "in", "dict", "(", "model", ".", "named_parameters", "(", ")", ")", ".", "items", "(", ")", ":", "\n", "        ", "for", "initializer", "in", "[", "y", "for", "x", ",", "y", "in", "init_cfg", ".", "items", "(", ")", "if", "x", "in", "key", "]", ":", "\n", "            ", "if", "initializer", "==", "'orthogonal'", ":", "\n", "# is this correct for RNNs, don't think so ?", "\n", "                ", "print", "(", "\"ORTHOGONAL\"", ",", "key", ",", "param", ".", "data", ".", "size", "(", ")", ")", "\n", "torch", ".", "nn", ".", "init", ".", "orthogonal_", "(", "param", ".", "data", ")", "\n", "", "elif", "initializer", "==", "'rnn-orthogonal'", ":", "\n", "                ", "print", "(", "\"before:\"", ",", "param", ".", "data", ".", "size", "(", ")", ",", "param", ".", "data", ".", "sum", "(", ")", ".", "item", "(", ")", ")", "\n", "for", "tmp", "in", "torch", ".", "split", "(", "param", ".", "data", ",", "param", ".", "data", ".", "size", "(", "1", ")", ",", "dim", "=", "0", ")", ":", "\n", "                    ", "torch", ".", "nn", ".", "init", ".", "orthogonal_", "(", "tmp", ")", "\n", "print", "(", "\"RNN-ORTHOGONAL\"", ",", "key", ",", "tmp", ".", "size", "(", ")", ",", "param", ".", "data", ".", "sum", "(", ")", ".", "item", "(", ")", ")", "\n", "", "print", "(", "\"after:\"", ",", "param", ".", "data", ".", "size", "(", ")", ",", "param", ".", "data", ".", "sum", "(", ")", ".", "item", "(", ")", ")", "\n", "", "elif", "initializer", "==", "'xavier_normal'", ":", "\n", "                ", "before", "=", "param", ".", "data", ".", "norm", "(", ")", ".", "item", "(", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "param", ".", "data", ")", "\n", "after", "=", "param", ".", "data", ".", "norm", "(", ")", ".", "item", "(", ")", "\n", "print", "(", "\"XAVIER_NORMAL\"", ",", "key", ",", "param", ".", "data", ".", "size", "(", ")", ",", "before", ",", "\"->\"", ",", "after", ")", "\n", "", "break", "\n", "", "", "print", "(", ")", "\n", "\n", "return", "model", ",", "parameters", "\n", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.main_bert_processor_aida.BertAidaProcessor.__init__": [[80, 105], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "links_dictionary", ":", "Dictionary", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "# self.linking_candidates: Dict = linking_candidates", "\n", "self", ".", "documents", ":", "List", "[", "Dict", "]", "=", "[", "]", "\n", "self", ".", "tokenizer", ":", "BertTokenizer", "=", "None", "\n", "self", ".", "links_dictionary", ":", "Dictionary", "=", "links_dictionary", "\n", "\n", "# maps wrongly detected encoding cases of candidates", "\n", "self", ".", "hard_encoding_cases", "=", "{", "\n", "'FC_Ceahl\u0103ul_Piatra_Neam\u0163'", ":", "'FC_Ceahl\u0103ul_Piatra_Neam\u021b'", ",", "\n", "'Fran\u00e7ois_Pienaar'", ":", "'Francois_Pienaar'", ",", "\n", "'Timi\u015foara'", ":", "'Timi\u0219oara'", ",", "\n", "'Ovidiu_St\u00e2ng\u0103'", ":", "'Ovidiu_St\u00eeng\u0103'", ",", "\n", "'Anton_Dobo\u015f'", ":", "'Anton_Dobo\u0219'", ",", "\n", "'Victor_Babe\u015f'", ":", "'Victor_Babe\u0219'", ",", "\n", "'Chi\u015fin\u0103u'", ":", "'Chi\u0219in\u0103u'", ",", "\n", "'D\u0103nu\u0163_Lupu'", ":", "'D\u0103nu\u021b_Lupu'", ",", "\n", "'FC_O\u0163elul_Gala\u0163i'", ":", "'FC_O\u021belul_Gala\u021bi'", ",", "\n", "'FC_Sportul_Studen\u0163esc_Bucure\u015fti'", ":", "'FC_Sportul_Studen\u021besc_Bucure\u0219ti'", ",", "\n", "'CS_Jiul_Petro\u015fani'", ":", "'CS_Jiul_Petro\u0219ani'", ",", "\n", "'FC_Dinamo_Bucure\u015fti'", ":", "'FC_Dinamo_Bucure\u0219ti'", ",", "\n", "'FC_Rapid_Bucure\u015fti'", ":", "'FC_Rapid_Bucure\u0219ti'", ",", "\n", "'FC_Steaua_Bucure\u015fti'", ":", "'FC_Steaua_Bucure\u0219ti'", ",", "\n", "'Constan\u0163a'", ":", "'Constan\u021ba'", ",", "\n", "'Bistri\u0163a'", ":", "'Bistri\u021ba'", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.main_bert_processor_aida.BertAidaProcessor.split_into_segments": [[107, 147], ["dict", "len", "min", "range", "bert_doc.segments.append", "bert_doc.segment_subtoken_map.append", "len", "logger.info", "min", "modules.bert_preprocessing.flatten", "max", "len", "logger.error", "Exception", "dict.values", "len"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.bert_preprocessing.flatten"], ["", "def", "split_into_segments", "(", "self", ",", "bert_doc", ":", "JsonBertDocument", ",", "sentence_end", ",", "token_end", ")", ":", "\n", "        ", "\"\"\" Split into segments.\n            Add subtokens, subtoken_map, info for each segment; add CLS, SEP in the segment subtokens\n            Input document_state: tokens, subtokens, token_end, sentence_end, utterance_end, subtoken_map, info\n        \"\"\"", "\n", "curr_idx", "=", "0", "# Index for subtokens", "\n", "prev_token_idx", "=", "0", "\n", "map_subtoks_to_segmented_subtoks", "=", "dict", "(", ")", "\n", "offset", "=", "1", "\n", "while", "curr_idx", "<", "len", "(", "bert_doc", ".", "subtokens", ")", ":", "\n", "# Try to split at a sentence end point", "\n", "            ", "end_idx", "=", "min", "(", "curr_idx", "+", "self", ".", "args", ".", "max_seg_len", "-", "1", "-", "2", ",", "len", "(", "bert_doc", ".", "subtokens", ")", "-", "1", ")", "# Inclusive", "\n", "while", "end_idx", ">=", "curr_idx", "and", "not", "sentence_end", "[", "end_idx", "]", ":", "\n", "                ", "end_idx", "-=", "1", "\n", "", "if", "end_idx", "<", "curr_idx", ":", "\n", "                ", "logger", ".", "info", "(", "f'{bert_doc.doc_key}: no sentence end found; split at token end'", ")", "\n", "# If no sentence end point, try to split at token end point", "\n", "end_idx", "=", "min", "(", "curr_idx", "+", "self", ".", "args", ".", "max_seg_len", "-", "1", "-", "2", ",", "len", "(", "bert_doc", ".", "subtokens", ")", "-", "1", ")", "\n", "while", "end_idx", ">=", "curr_idx", "and", "not", "token_end", "[", "end_idx", "]", ":", "\n", "                    ", "end_idx", "-=", "1", "\n", "", "if", "end_idx", "<", "curr_idx", ":", "\n", "                    ", "logger", ".", "error", "(", "'Cannot split valid segment: no sentence end or token end'", ")", "\n", "raise", "Exception", "(", "'Cannot split valid segment: no sentence end or token end'", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "curr_idx", ",", "end_idx", "+", "1", ")", ":", "\n", "                ", "map_subtoks_to_segmented_subtoks", "[", "i", "]", "=", "i", "+", "offset", "\n", "\n", "", "segment", "=", "[", "self", ".", "tokenizer", ".", "cls_token", "]", "+", "bert_doc", ".", "subtokens", "[", "curr_idx", ":", "end_idx", "+", "1", "]", "+", "[", "self", ".", "tokenizer", ".", "sep_token", "]", "\n", "\n", "offset", "+=", "2", "\n", "bert_doc", ".", "segments", ".", "append", "(", "segment", ")", "\n", "\n", "subtoken_map", "=", "bert_doc", ".", "subtoken_map", "[", "curr_idx", ":", "end_idx", "+", "1", "]", "\n", "bert_doc", ".", "segment_subtoken_map", ".", "append", "(", "[", "prev_token_idx", "]", "+", "subtoken_map", "+", "[", "subtoken_map", "[", "-", "1", "]", "]", ")", "\n", "\n", "curr_idx", "=", "end_idx", "+", "1", "\n", "prev_token_idx", "=", "subtoken_map", "[", "-", "1", "]", "\n", "", "assert", "len", "(", "flatten", "(", "bert_doc", ".", "segments", ")", ")", "==", "max", "(", "map_subtoks_to_segmented_subtoks", ".", "values", "(", ")", ")", "+", "2", "\n", "return", "map_subtoks_to_segmented_subtoks", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.main_bert_processor_aida.BertAidaProcessor.get_linker_candidates_all_spans": [[149, 230], ["dict", "zip", "enumerate", "dict", "span_candidates.append", "span_scores.append", "candidates.append", "candidates_scores.append", "len", "len", "list", "list", "list", "set", "zip", "main_bert_processor_aida.BertAidaProcessor.links_dictionary.lookup", "set", "cnd.encode().decode", "main_bert_processor_aida.BertAidaProcessor.links_dictionary.add", "span_candidates.append", "list.append", "list.append", "set.add", "cnd.encode"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.decode", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add"], ["", "def", "get_linker_candidates_all_spans", "(", "self", ",", "all_spans", ",", "begin", ",", "end", ",", "json_cand_doc", ",", "tokens", ")", ":", "\n", "\n", "        ", "span_to_candidates", "=", "dict", "(", ")", "\n", "for", "span_begin", ",", "span_end", ",", "candidates", ",", "candidate_scores", ",", "span_text", "in", "zip", "(", "json_cand_doc", "[", "'span_begin'", "]", ",", "\n", "json_cand_doc", "[", "'span_end'", "]", ",", "\n", "json_cand_doc", "[", "'candidates'", "]", ",", "\n", "json_cand_doc", "[", "'scores'", "]", ",", "\n", "json_cand_doc", "[", "'spans'", "]", ")", ":", "\n", "            ", "span_to_candidates", "[", "(", "span_begin", ",", "span_end", ")", "]", "=", "dict", "(", ")", "\n", "if", "len", "(", "candidates", ")", "!=", "len", "(", "set", "(", "candidates", ")", ")", ":", "\n", "# logger.warning('Duplicate candidates detected in: ' + str(candidates))", "\n", "# removes the duplicates, starting from the back (the ones with lower candidate score", "\n", "                ", "new_candidates", "=", "list", "(", ")", "\n", "new_candidate_scores", "=", "list", "(", ")", "\n", "new_span_text", "=", "list", "(", ")", "\n", "candidates_added", "=", "set", "(", ")", "\n", "for", "curr_candidate", ",", "curr_cand_score", "in", "zip", "(", "candidates", ",", "candidate_scores", ")", ":", "\n", "                    ", "if", "curr_candidate", "not", "in", "candidates_added", ":", "\n", "                        ", "new_candidates", ".", "append", "(", "curr_candidate", ")", "\n", "new_candidate_scores", ".", "append", "(", "curr_cand_score", ")", "\n", "# new_span_text.append(curr_span_text)", "\n", "\n", "candidates_added", ".", "add", "(", "curr_candidate", ")", "\n", "", "", "candidates", "=", "new_candidates", "\n", "candidate_scores", "=", "new_candidate_scores", "\n", "# span_text = new_span_text", "\n", "\n", "", "span_to_candidates", "[", "(", "span_begin", ",", "span_end", ")", "]", "[", "'candidates'", "]", "=", "candidates", "\n", "span_to_candidates", "[", "(", "span_begin", ",", "span_end", ")", "]", "[", "'scores'", "]", "=", "candidate_scores", "\n", "span_to_candidates", "[", "(", "span_begin", ",", "span_end", ")", "]", "[", "'span_text'", "]", "=", "span_text", "\n", "\n", "", "candidates", "=", "[", "]", "\n", "candidates_scores", "=", "[", "]", "\n", "for", "idx_span", ",", "curr_span", "in", "enumerate", "(", "all_spans", ")", ":", "\n", "\n", "            ", "span_candidates", "=", "[", "]", "\n", "span_scores", "=", "[", "]", "\n", "# TODO!!! - check if this +1 is necessary in downstream tasks!!!", "\n", "if", "(", "curr_span", "[", "0", "]", ",", "curr_span", "[", "1", "]", "+", "1", ")", "in", "span_to_candidates", ":", "\n", "                ", "curr_cand_data", "=", "span_to_candidates", "[", "(", "curr_span", "[", "0", "]", ",", "curr_span", "[", "1", "]", "+", "1", ")", "]", "\n", "# TODO code for debugging purposes, please delete later!!!", "\n", "# for cand in curr_cand_data['candidates']:", "\n", "#     if 'Andromeda' in cand and 'Milky_Way_collision' in cand:", "\n", "#         nc = bytes(cand, \"utf-8\").decode(\"unicode_escape\")", "\n", "# print('DEBUG: check this out ', cand)", "\n", "# end TODO code for debugging purposes, please delete later!!!", "\n", "# correct_link = bytes(correct_link, \"utf-8\").decode(\"unicode_escape\")", "\n", "\n", "# span_candidates = [self.links_dictionary.add(", "\n", "#     # cnd", "\n", "#     # I think this univode unescaping is not necessary here, but just in case adding", "\n", "#     # bytes(cnd, \"utf-8\").decode(\"unicode_escape\")", "\n", "#     cnd.encode('ascii', 'backslashreplace').decode('unicode-escape')", "\n", "# ) for cnd in curr_cand_data['candidates']]", "\n", "span_candidates", "=", "[", "]", "\n", "\n", "for", "cnd", "in", "curr_cand_data", "[", "'candidates'", "]", ":", "\n", "                    ", "decoded_candidate", "=", "cnd", ".", "encode", "(", "'ascii'", ",", "'backslashreplace'", ")", ".", "decode", "(", "'unicode-escape'", ")", "\n", "# if 'ul_Piatra_Neam' in decoded_candidate:", "\n", "#     print('hard case , debug!!')", "\n", "if", "decoded_candidate", "in", "self", ".", "hard_encoding_cases", ":", "\n", "                        ", "decoded_candidate", "=", "self", ".", "hard_encoding_cases", "[", "decoded_candidate", "]", "\n", "", "dict_added", "=", "self", ".", "links_dictionary", ".", "add", "(", "decoded_candidate", ")", "\n", "span_candidates", ".", "append", "(", "dict_added", ")", "\n", "", "span_scores", "=", "curr_cand_data", "[", "'scores'", "]", "\n", "span_text", "=", "' '", ".", "join", "(", "tokens", "[", "curr_span", "[", "0", "]", ":", "curr_span", "[", "1", "]", "+", "1", "]", ")", "\n", "cand_text", "=", "curr_cand_data", "[", "'span_text'", "]", "\n", "# checks that our the span text is equal to the span text that produced the original candidates", "\n", "# (using prepro_util.py)", "\n", "assert", "span_text", "==", "cand_text", "\n", "\n", "", "span_candidates", ".", "append", "(", "self", ".", "links_dictionary", ".", "lookup", "(", "'NILL'", ")", ")", "\n", "span_scores", ".", "append", "(", "1.0", ")", "\n", "\n", "# span_candidates.append(self.links_dictionary.lookup('NONE'))", "\n", "# span_scores.append(1.0)", "\n", "\n", "candidates", ".", "append", "(", "span_candidates", ")", "\n", "candidates_scores", ".", "append", "(", "span_scores", ")", "\n", "\n", "", "return", "candidates", ",", "candidates_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.main_bert_processor_aida.BertAidaProcessor.get_linker_targets_all_spans": [[231, 277], ["dict", "enumerate", "correct_link.encode().decode.encode().decode.encode().decode", "main_bert_processor_aida.BertAidaProcessor.links_dictionary.add", "targets.append", "target_index[].item", "correct_link.encode().decode.encode().decode.encode", "target_index.size"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.decode", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add"], ["", "def", "get_linker_targets_all_spans", "(", "self", ",", "data", ",", "all_spans", ",", "all_spans_candidates", ")", ":", "\n", "        ", "\"\"\"\n        \"\"\"", "\n", "span_to_gold", "=", "dict", "(", ")", "\n", "for", "mention", "in", "data", "[", "'mentions'", "]", ":", "\n", "# if is_link_trainable(mention):", "\n", "# entity_concept = data['concepts'][mention['concept']['concept']]", "\n", "            ", "entity_concept", "=", "data", "[", "'concepts'", "]", "[", "mention", "[", "'concept'", "]", "]", "\n", "if", "'link'", "in", "entity_concept", ":", "\n", "                ", "mention_correct", "=", "entity_concept", "[", "'link'", "]", "\n", "mention_span", "=", "(", "mention", "[", "'subtoken_begin'", "]", ",", "mention", "[", "'subtoken_end'", "]", ")", "\n", "span_to_gold", "[", "mention_span", "]", "=", "mention_correct", "\n", "\n", "", "", "targets", "=", "[", "]", "\n", "for", "span_idx", ",", "curr_span", "in", "enumerate", "(", "all_spans", ")", ":", "\n", "            ", "if", "curr_span", "not", "in", "span_to_gold", ":", "\n", "# correct_link = 'NONE'", "\n", "# (16/04/2021) after talk with Johannes, the correct is NILL here.", "\n", "                ", "correct_link", "=", "'NILL'", "\n", "", "else", ":", "\n", "                ", "correct_link", "=", "span_to_gold", "[", "curr_span", "]", "\n", "\n", "# TODO code for debugging purposes, please delete later!!!", "\n", "# if 'Andromeda' in correct_link and 'Milky_Way_collision' in correct_link:", "\n", "#     correct_link = bytes(correct_link, \"utf-8\").decode(\"unicode_escape\")", "\n", "# correct_link = correct_link.encode('ascii', 'backslashreplace').decode('unicode-escape')", "\n", "# print('DEBUG: check this out ', correct_link)", "\n", "# end TODO code for debugging purposes, please delete later!!!", "\n", "\n", "# the TARGET links sometimes come with escaped characters,", "\n", "", "correct_link", "=", "correct_link", ".", "encode", "(", "'ascii'", ",", "'backslashreplace'", ")", ".", "decode", "(", "'unicode-escape'", ")", "\n", "# if 'ul_Piatra_Neam' in correct_link:", "\n", "#     print('hard case, debug!')", "\n", "if", "correct_link", "in", "self", ".", "hard_encoding_cases", ":", "\n", "                ", "correct_link", "=", "self", ".", "hard_encoding_cases", "[", "correct_link", "]", "\n", "\n", "", "correct_link_id", "=", "self", ".", "links_dictionary", ".", "add", "(", "correct_link", ")", "\n", "target_index", "=", "(", "all_spans_candidates", "[", "span_idx", "]", "==", "correct_link_id", ")", ".", "nonzero", "(", ")", "\n", "if", "target_index", ".", "size", "(", ")", "[", "0", "]", "==", "0", ":", "\n", "                ", "index", "=", "-", "1", "\n", "", "else", ":", "\n", "                ", "index", "=", "target_index", "[", "0", "]", ".", "item", "(", ")", "\n", "\n", "", "targets", ".", "append", "(", "index", ")", "\n", "\n", "", "return", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.main_bert_processor_aida.BertAidaProcessor.get_document": [[278, 439], ["main_bert_processor_dwie.JsonBertDocument", "dict", "dict", "enumerate", "len", "modules.ner.spanner.create_all_spans", "torch.tensor", "span_mask.view", "torch.arange().unsqueeze", "main_bert_processor_aida.BertAidaProcessor.get_linker_candidates_all_spans", "span_masked_scores[].tolist", "main_bert_processor_aida.BertAidaProcessor.split_into_segments", "zip", "main_bert_processor_aida.BertAidaProcessor.get_linker_targets_all_spans", "bert_doc.convert_to_json", "modules.bert_preprocessing.normalize_word", "main_bert_processor_aida.BertAidaProcessor.tokenizer.tokenize", "bert_doc.tokens.append", "enumerate", "len", "len", "span_mask.size", "span_mask.size", "span_mask.size", "modules.utils.misc.indices_to_spans", "torch.tensor", "t.tolist", "enumerate", "enumerate", "bert_doc.subtokens.append", "bert_doc.subtoken_map.append", "torch.arange", "torch.tensor", "logger.warning", "bert_doc.sentence_end.append", "torch.tensor.unsqueeze().unsqueeze", "len", "bert_doc.sentence_end.append", "bert_doc.sentence_end.append", "str", "logger.warning", "logger.warning", "spans_data.append", "spans_data.append", "len", "len", "torch.tensor.unsqueeze", "len", "len", "str", "str"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.create_all_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.AbstractDataReader.get_linker_candidates_all_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.bert_preprocessing.split_into_segments", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.AbstractDataReader.get_linker_targets_all_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.convert_to_json", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.bert_preprocessing.normalize_word", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.WordpieceTokenizer.tokenize", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.indices_to_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist"], ["", "def", "get_document", "(", "self", ",", "json_doc", ",", "json_cand_doc", ")", "->", "Dict", ":", "\n", "        ", "\"\"\" Process raw input to finalized documents \"\"\"", "\n", "bert_doc", ":", "JsonBertDocument", "=", "JsonBertDocument", "(", "json_doc", ",", "args", "=", "self", ".", "args", ")", "\n", "word_idx", "=", "-", "1", "\n", "\n", "begin", "=", "json_doc", "[", "'tokenization'", "]", "[", "'begin'", "]", "\n", "end", "=", "json_doc", "[", "'tokenization'", "]", "[", "'end'", "]", "\n", "sentences", "=", "json_doc", "[", "'tokenization'", "]", "[", "'sentences'", "]", "\n", "\n", "bert_doc", ".", "begin_token", "=", "begin", "\n", "bert_doc", ".", "end_token", "=", "end", "\n", "\n", "begin_to_index", "=", "{", "pos", ":", "idx", "for", "idx", ",", "pos", "in", "enumerate", "(", "begin", ")", "}", "\n", "end_to_index", "=", "{", "pos", ":", "idx", "for", "idx", ",", "pos", "in", "enumerate", "(", "end", ")", "}", "\n", "\n", "word_idx_to_first_subtoken_idx", "=", "dict", "(", ")", "\n", "word_idx_to_last_subtoken_idx", "=", "dict", "(", ")", "\n", "subtoken_idx", "=", "0", "\n", "# Build up documents", "\n", "for", "idx_token", ",", "token", "in", "enumerate", "(", "json_doc", "[", "'tokenization'", "]", "[", "'tokens'", "]", ")", ":", "\n", "            ", "word_idx", "+=", "1", "\n", "word", "=", "normalize_word", "(", "token", ")", "\n", "subtokens", "=", "self", ".", "tokenizer", ".", "tokenize", "(", "word", ")", "\n", "bert_doc", ".", "tokens", ".", "append", "(", "word", ")", "\n", "bert_doc", ".", "token_end", "+=", "[", "False", "]", "*", "(", "len", "(", "subtokens", ")", "-", "1", ")", "+", "[", "True", "]", "\n", "for", "idx_subtoken", ",", "subtoken", "in", "enumerate", "(", "subtokens", ")", ":", "\n", "                ", "bert_doc", ".", "subtokens", ".", "append", "(", "subtoken", ")", "\n", "# info = None if idx_subtoken != 0 else len(subtokens)", "\n", "if", "idx_subtoken", "==", "0", ":", "\n", "                    ", "word_idx_to_first_subtoken_idx", "[", "word_idx", "]", "=", "subtoken_idx", "\n", "", "word_idx_to_last_subtoken_idx", "[", "word_idx", "]", "=", "subtoken_idx", "\n", "# bert_doc.info.append(info)", "\n", "if", "idx_token", ">=", "len", "(", "json_doc", "[", "'tokenization'", "]", "[", "'tokens'", "]", ")", "-", "1", "and", "idx_subtoken", ">=", "len", "(", "subtokens", ")", "-", "1", ":", "\n", "# the last subtoken in the document always is the end of sentence by definition", "\n", "                    ", "bert_doc", ".", "sentence_end", ".", "append", "(", "True", ")", "\n", "", "elif", "idx_token", "<", "len", "(", "json_doc", "[", "'tokenization'", "]", "[", "'tokens'", "]", ")", "-", "1", "and", "sentences", "[", "idx_token", "+", "1", "]", "!=", "sentences", "[", "idx_token", "]", "and", "idx_subtoken", ">=", "len", "(", "subtokens", ")", "-", "1", ":", "\n", "                    ", "bert_doc", ".", "sentence_end", ".", "append", "(", "True", ")", "\n", "", "else", ":", "\n", "# in all other cases, it is not the end of sentence", "\n", "                    ", "bert_doc", ".", "sentence_end", ".", "append", "(", "False", ")", "\n", "", "bert_doc", ".", "subtoken_map", ".", "append", "(", "word_idx", ")", "\n", "subtoken_idx", "+=", "1", "\n", "\n", "", "", "assert", "len", "(", "bert_doc", ".", "subtokens", ")", "==", "len", "(", "bert_doc", ".", "sentence_end", ")", "\n", "# now maps all the mentions to the bert subtoken positions", "\n", "for", "mention", "in", "json_doc", "[", "'mentions'", "]", ":", "\n", "            ", "token_begin", "=", "begin_to_index", "[", "mention", "[", "'begin'", "]", "]", "\n", "subtoken_begin", "=", "word_idx_to_first_subtoken_idx", "[", "token_begin", "]", "\n", "mention", "[", "'subtoken_begin'", "]", "=", "subtoken_begin", "\n", "token_end", "=", "end_to_index", "[", "mention", "[", "'end'", "]", "]", "\n", "subtoken_end", "=", "word_idx_to_last_subtoken_idx", "[", "token_end", "]", "\n", "mention", "[", "'subtoken_end'", "]", "=", "subtoken_end", "\n", "\n", "if", "'candidates'", "in", "mention", ":", "\n", "# since it is end-to-end, no need to keep candidates here ; they will be kept as span candidates for", "\n", "# all the document in a separate dict (see below)", "\n", "                ", "del", "mention", "[", "'candidates'", "]", "\n", "if", "'scores'", "in", "mention", ":", "\n", "                    ", "del", "mention", "[", "'scores'", "]", "\n", "\n", "# assign 'NILL' to the concepts with link in Null", "\n", "", "", "", "for", "concept", "in", "json_doc", "[", "'concepts'", "]", ":", "\n", "            ", "if", "'link'", "in", "concept", "and", "concept", "[", "'link'", "]", "is", "None", ":", "\n", "                ", "concept", "[", "'link'", "]", "=", "'NILL'", "\n", "\n", "# now produces all the candidates for the content and links to span begin and span end on subtoken level", "\n", "", "", "n_tokens", "=", "len", "(", "begin", ")", "\n", "span_begin", ",", "span_end", "=", "create_all_spans", "(", "1", ",", "n_tokens", ",", "args", ".", "max_span_length", ")", "\n", "lengths", "=", "torch", ".", "tensor", "(", "[", "n_tokens", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "span_mask", "=", "(", "span_end", "<", "lengths", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "float", "(", ")", "\n", "\n", "nr_possible_spans", "=", "(", "span_mask", ".", "size", "(", "-", "1", ")", "*", "span_mask", ".", "size", "(", "-", "2", ")", ")", "\n", "\n", "span_masked_scores", "=", "span_mask", ".", "view", "(", "span_mask", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "top_indices_sorted", "=", "torch", ".", "arange", "(", "0", ",", "nr_possible_spans", ",", "dtype", "=", "torch", ".", "int32", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "all_possible_spans", "=", "indices_to_spans", "(", "top_indices_sorted", ",", "\n", "torch", ".", "tensor", "(", "[", "nr_possible_spans", "]", ",", "\n", "dtype", "=", "torch", ".", "int", ")", ",", "args", ".", "max_span_length", ")", "[", "0", "]", "\n", "\n", "# json_doc['content'] should be used for debugging purposes only!!!", "\n", "linker_cands_all_spans", ",", "linker_cands_all_spans_scores", "=", "self", ".", "get_linker_candidates_all_spans", "(", "all_spans", "=", "all_possible_spans", ",", "begin", "=", "begin", ",", "end", "=", "end", ",", "\n", "json_cand_doc", "=", "json_cand_doc", ",", "tokens", "=", "json_doc", "[", "'tokenization'", "]", "[", "'tokens'", "]", ")", "\n", "\n", "# passes the spans from token (word) level to subtoken (bert) level", "\n", "l_span_mask", "=", "span_masked_scores", "[", "0", "]", ".", "tolist", "(", ")", "\n", "\n", "# logger.info('BEFORE ERROR PROCESSING: ' + json_doc['id'])", "\n", "spans_data", "=", "[", "]", "\n", "\n", "# Split documents", "\n", "map_subtoks_to_segmented_subtoks", "=", "self", ".", "split_into_segments", "(", "bert_doc", ",", "bert_doc", ".", "sentence_end", ",", "bert_doc", ".", "token_end", ")", "\n", "\n", "# adjusts the position of subtokens of mentions as well as all_possible_spans to account for segments", "\n", "# if the span size has changed (i.e. [\"CLS\"]/[\"SEP\"] inserted in the middle, then just ignores it", "\n", "#   TODO: check how much ignored there are of this type", "\n", "\n", "for", "curr_mention", "in", "json_doc", "[", "'mentions'", "]", ":", "\n", "            ", "diff_orig", "=", "curr_mention", "[", "'subtoken_end'", "]", "-", "curr_mention", "[", "'subtoken_begin'", "]", "\n", "sn_b", "=", "map_subtoks_to_segmented_subtoks", "[", "curr_mention", "[", "'subtoken_begin'", "]", "]", "\n", "sn_e", "=", "map_subtoks_to_segmented_subtoks", "[", "curr_mention", "[", "'subtoken_end'", "]", "]", "\n", "if", "sn_e", "-", "sn_b", "==", "diff_orig", ":", "\n", "                ", "curr_mention", "[", "'subtoken_begin'", "]", "=", "sn_b", "\n", "curr_mention", "[", "'subtoken_end'", "]", "=", "sn_e", "\n", "", "else", ":", "\n", "# TODO: SHOULD I IGNORE THIS???", "\n", "                ", "logger", ".", "warning", "(", "'THIS CAN BE SERIOUS MENTION NOT IN THE SAME SEGMENT '", "\n", "'(SPLITTED ACROSS DIFFERENT SEGMENTS): '", "+", "\n", "str", "(", "bert_doc", ".", "subtokens", "[", "curr_mention", "[", "'subtoken_begin'", "]", ":", "curr_mention", "[", "'subtoken_end'", "]", "+", "1", "]", ")", ")", "\n", "curr_mention", "[", "'subtoken_begin'", "]", "=", "sn_b", "\n", "curr_mention", "[", "'subtoken_end'", "]", "=", "sn_e", "\n", "\n", "# multi-line version (easier to debug)", "\n", "", "", "for", "(", "t1", ",", "t2", ")", ",", "mask", ",", "cands", ",", "scores_cands", "in", "zip", "(", "all_possible_spans", ",", "l_span_mask", ",", "linker_cands_all_spans", ",", "linker_cands_all_spans_scores", ")", ":", "\n", "            ", "if", "mask", ">", "0.9", ":", "\n", "                ", "if", "t1", "not", "in", "word_idx_to_first_subtoken_idx", "or", "t2", "not", "in", "word_idx_to_last_subtoken_idx", ":", "\n", "                    ", "if", "t1", "not", "in", "word_idx_to_first_subtoken_idx", ":", "\n", "                        ", "logger", ".", "warning", "(", "'problem passing to subtoken ids with the following t1 token: \"'", "+", "\n", "json_doc", "[", "'tokenization'", "]", "[", "'tokens'", "]", "[", "t1", "]", "+", "'\", cands: '", "+", "str", "(", "\n", "cands", ")", "+", "', OMITTING'", ")", "\n", "", "if", "t2", "not", "in", "word_idx_to_first_subtoken_idx", ":", "\n", "                        ", "logger", ".", "warning", "(", "'problem passing to subtoken ids with the following t2 token: \"'", "+", "\n", "json_doc", "[", "'tokenization'", "]", "[", "'tokens'", "]", "[", "t2", "]", "+", "'\", cands: '", "+", "str", "(", "\n", "cands", ")", "+", "', OMITTING'", ")", "\n", "", "", "else", ":", "\n", "                    ", "subt_t1", "=", "word_idx_to_first_subtoken_idx", "[", "t1", "]", "\n", "subt_t2", "=", "word_idx_to_last_subtoken_idx", "[", "t2", "]", "\n", "m_subt_t2", "=", "map_subtoks_to_segmented_subtoks", "[", "subt_t2", "]", "\n", "m_subt_t1", "=", "map_subtoks_to_segmented_subtoks", "[", "subt_t1", "]", "\n", "if", "subt_t2", "-", "subt_t1", "==", "m_subt_t2", "-", "m_subt_t1", ":", "\n", "                        ", "spans_data", ".", "append", "(", "(", "(", "m_subt_t1", ",", "m_subt_t2", ")", ",", "cands", ",", "scores_cands", ")", ")", "\n", "", "else", ":", "\n", "# TODO: SHOULD I IGNORE THIS???", "\n", "                        ", "spans_data", ".", "append", "(", "(", "(", "m_subt_t1", ",", "m_subt_t2", ")", ",", "cands", ",", "scores_cands", ")", ")", "\n", "# logger.warning('FOLLOWING SPAN across segments: ' + str(bert_doc.subtokens[subt_t1:subt_t2 + 1]))", "\n", "\n", "", "", "", "", "all_possible_spans", "=", "[", "(", "t1", ",", "t2", ")", "for", "(", "t1", ",", "t2", ")", ",", "_", ",", "_", "in", "spans_data", "]", "\n", "\n", "# has to convert to torch.tensor because it is needed in this format inside get_linker_targets_all_spans", "\n", "linker_cands_all_spans", "=", "[", "torch", ".", "tensor", "(", "l", ",", "dtype", "=", "torch", ".", "int", ")", "for", "(", "_", ",", "_", ")", ",", "l", ",", "_", "in", "spans_data", "]", "\n", "# linker_cands_all_spans_scores = [torch.tensor(ls, dtype=torch.float) for (_, _), _, ls in spans_data]", "\n", "linker_cands_all_spans_scores", "=", "[", "ls", "for", "(", "_", ",", "_", ")", ",", "_", ",", "ls", "in", "spans_data", "]", "\n", "linker_targets_all_spans", "=", "self", ".", "get_linker_targets_all_spans", "(", "json_doc", ",", "all_possible_spans", ",", "\n", "linker_cands_all_spans", ")", "\n", "\n", "bert_doc", ".", "all_spans", "=", "all_possible_spans", "\n", "\n", "bert_doc", ".", "all_spans_candidates", "=", "[", "t", ".", "tolist", "(", ")", "for", "t", "in", "linker_cands_all_spans", "]", "\n", "# bert_doc.all_spans_candidates_scores = [t.tolist() for t in linker_cands_all_spans_scores]", "\n", "bert_doc", ".", "all_spans_candidates_scores", "=", "linker_cands_all_spans_scores", "\n", "bert_doc", ".", "all_spans_candidates_targets", "=", "linker_targets_all_spans", "\n", "\n", "bert_doc", ".", "mentions", "=", "json_doc", "[", "'mentions'", "]", "\n", "\n", "document", "=", "bert_doc", ".", "convert_to_json", "(", ")", "\n", "return", "document", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.main_bert_processor_aida.BertAidaProcessor.bert_preprocess": [[440, 555], ["list", "main_bert_processor_dwie.get_tokenizer", "os.walk", "curr_filename.endswith", "open", "os.path.join", "json.loads", "logger.info", "main_bert_processor_aida.from_kolitsas_to_aida_link_path", "os.path.join", "json.load", "main_bert_processor_aida.from_kolitsas_to_aida_plain_dwie_path", "os.path.join", "json.load", "dict", "zip", "zip", "os.path.join", "os.makedirs", "json.dump", "main_bert_processor_aida.BertAidaProcessor.get_document", "main_bert_processor_aida.BertAidaProcessor.documents.append", "open", "open", "len", "len", "list", "os.path.dirname", "open", "curr_doc[].append", "enumerate", "enumerate", "cnd.encode().decode", "list.append", "curr_concept[].encode().decode", "curr_doc[].append", "curr_doc[].append", "RuntimeError", "cnd.encode", "curr_concept[].encode"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.main_bert_processor_dwie.get_tokenizer", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.main_bert_processor_aida.from_kolitsas_to_aida_link_path", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.main_bert_processor_aida.from_kolitsas_to_aida_plain_dwie_path", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.main_bert_processor_dwie.BertProcessor.get_document", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.decode", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.decode"], ["", "def", "bert_preprocess", "(", "self", ")", ":", "\n", "        ", "self", ".", "documents", "=", "list", "(", ")", "\n", "self", ".", "tokenizer", "=", "get_tokenizer", "(", "args", ".", "tokenizer_name", ")", "\n", "\n", "aida_plain_dwie_path", "=", "args", ".", "aida_plain_dwie_path", "\n", "for", "(", "dirpath", ",", "dirnames", ",", "filenames", ")", "in", "os", ".", "walk", "(", "aida_candidate_path", ")", ":", "\n", "            ", "for", "curr_filename", "in", "filenames", ":", "\n", "                ", "if", "curr_filename", ".", "endswith", "(", "'.jsonl'", ")", ":", "\n", "                    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "dirpath", ",", "curr_filename", ")", ")", "as", "infile", ":", "\n", "                        ", "for", "curr_line", "in", "infile", ":", "\n", "                            ", "parsed_cand", "=", "json", ".", "loads", "(", "curr_line", ")", "\n", "logger", ".", "info", "(", "'Processing: '", "+", "parsed_cand", "[", "'doc_id'", "]", ")", "\n", "aida_link_file", "=", "from_kolitsas_to_aida_link_path", "(", "curr_filename", ",", "parsed_cand", "[", "'doc_id'", "]", ")", "\n", "aida_link_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "aida_link_path", ",", "aida_link_file", ")", "\n", "parsed_aida_reannotated_johannes_tokenization", "=", "json", ".", "load", "(", "open", "(", "aida_link_path", ")", ")", "\n", "\n", "aida_plain_dwie_file", "=", "from_kolitsas_to_aida_plain_dwie_path", "(", "curr_filename", ",", "parsed_cand", "[", "'doc_id'", "]", ")", "\n", "\n", "aida_plain_path", "=", "os", ".", "path", ".", "join", "(", "aida_plain_dwie_path", ",", "aida_plain_dwie_file", ")", "\n", "\n", "parsed_aida_original_tokenization", "=", "json", ".", "load", "(", "open", "(", "aida_plain_path", ")", ")", "\n", "# print('parsed_aida_reannotated_johannes_tokenization gotten: ', parsed_aida_reannotated_johannes_tokenization)", "\n", "\n", "# what has to be done now?:", "\n", "#  - connect the mentions from parsed_aida_reannotated_johannes_tokenization to parsed_aida_original_tokenization", "\n", "#     - here it is even possible to run some consistency checks such as the types of entity", "\n", "#       clusters.", "\n", "#  - connect the start and end tokens of plain aida to candidate spans", "\n", "# link_tokenization = parsed_aida_reannotated_johannes_tokenization['tokenization']", "\n", "\n", "# needed to extract the candidates based on the token ids", "\n", "char_pos_begin_to_tok_idx", "=", "{", "char_pos", ":", "tok_idx", "for", "tok_idx", ",", "char_pos", "in", "\n", "enumerate", "(", "parsed_aida_original_tokenization", "\n", "[", "'tokenization'", "]", "[", "'begin'", "]", ")", "}", "\n", "char_pos_end_to_tok_idx", "=", "{", "char_pos", ":", "tok_idx", "+", "1", "for", "tok_idx", ",", "char_pos", "in", "\n", "enumerate", "(", "parsed_aida_original_tokenization", "\n", "[", "'tokenization'", "]", "[", "'end'", "]", ")", "}", "\n", "\n", "aida_plain_mentions", "=", "parsed_aida_original_tokenization", "[", "'mentions'", "]", "\n", "aida_link_mentions", "=", "parsed_aida_reannotated_johannes_tokenization", "[", "'mentions'", "]", "\n", "\n", "assert", "len", "(", "aida_plain_mentions", ")", "==", "len", "(", "aida_link_mentions", ")", "\n", "\n", "# TODO: (tok_idx_begin, tok_idx_end) to candidates", "\n", "tok_idxs_to_candidates", "=", "dict", "(", ")", "\n", "# TODO: check, this code (for loop for to get candidates - get_linker_candidates_all_spans)", "\n", "#  may be duplicated with gettin candidates in self.get_document ,", "\n", "#   merge it in the final version!!!", "\n", "for", "span_begin", ",", "span_end", ",", "candidates", "in", "zip", "(", "parsed_cand", "[", "'span_begin'", "]", ",", "\n", "parsed_cand", "[", "'span_end'", "]", ",", "\n", "parsed_cand", "[", "'candidates'", "]", ")", ":", "\n", "                                ", "decoded_candidates", "=", "list", "(", ")", "\n", "for", "cnd", "in", "candidates", ":", "\n", "                                    ", "decoded_candidate", "=", "cnd", ".", "encode", "(", "'ascii'", ",", "'backslashreplace'", ")", ".", "decode", "(", "'unicode-escape'", ")", "\n", "# if 'ul_Piatra_Neam' in decoded_candidate:", "\n", "#     print('hard case , debug!!')", "\n", "if", "decoded_candidate", "in", "self", ".", "hard_encoding_cases", ":", "\n", "                                        ", "decoded_candidate", "=", "self", ".", "hard_encoding_cases", "[", "decoded_candidate", "]", "\n", "", "decoded_candidates", ".", "append", "(", "decoded_candidate", ")", "\n", "", "tok_idxs_to_candidates", "[", "(", "span_begin", ",", "span_end", ")", "]", "=", "decoded_candidates", "\n", "\n", "", "for", "mention_plain", ",", "mention_link", "in", "zip", "(", "aida_plain_mentions", ",", "aida_link_mentions", ")", ":", "\n", "                                ", "assert", "mention_plain", "[", "'text'", "]", "==", "mention_link", "[", "'text'", "]", "\n", "assert", "mention_plain", "[", "'begin'", "]", "==", "mention_link", "[", "'begin'", "]", "\n", "assert", "mention_plain", "[", "'end'", "]", "==", "mention_link", "[", "'end'", "]", "\n", "tok_idx_begin", "=", "char_pos_begin_to_tok_idx", "[", "mention_plain", "[", "'begin'", "]", "]", "\n", "tok_idx_end", "=", "char_pos_end_to_tok_idx", "[", "mention_plain", "[", "'end'", "]", "]", "\n", "if", "(", "tok_idx_begin", ",", "tok_idx_end", ")", "in", "tok_idxs_to_candidates", ":", "\n", "                                    ", "mention_plain", "[", "'candidates'", "]", "=", "tok_idxs_to_candidates", "[", "(", "tok_idx_begin", ",", "tok_idx_end", ")", "]", "\n", "", "mention_plain", "[", "'concept'", "]", "=", "mention_link", "[", "'concept'", "]", "\n", "\n", "", "parsed_aida_original_tokenization", "[", "'concepts'", "]", "=", "parsed_aida_reannotated_johannes_tokenization", "[", "'concepts'", "]", "\n", "\n", "# make sure the link is correctly encoded for each of the concepts", "\n", "for", "curr_concept", "in", "parsed_aida_original_tokenization", "[", "'concepts'", "]", ":", "\n", "                                ", "if", "'link'", "in", "curr_concept", "and", "curr_concept", "[", "'link'", "]", "is", "not", "None", ":", "\n", "# if 'ul_Piatra_Neam' in curr_concept['link']:", "\n", "#     print('debug here hard case!!')", "\n", "                                    ", "curr_concept", "[", "'link'", "]", "=", "curr_concept", "[", "'link'", "]", ".", "encode", "(", "'ascii'", ",", "'backslashreplace'", ")", ".", "decode", "(", "'unicode-escape'", ")", "\n", "if", "curr_concept", "[", "'link'", "]", "in", "self", ".", "hard_encoding_cases", ":", "\n", "                                        ", "curr_concept", "[", "'link'", "]", "=", "self", ".", "hard_encoding_cases", "[", "curr_concept", "[", "'link'", "]", "]", "\n", "\n", "#", "\n", "\n", "# saves to json with updated linking annotations", "\n", "", "", "", "output_plain_path", "=", "os", ".", "path", ".", "join", "(", "output_dir_aida_tok", ",", "aida_plain_dwie_file", ")", "\n", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "output_plain_path", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "json", ".", "dump", "(", "parsed_aida_original_tokenization", ",", "open", "(", "output_plain_path", ",", "'w'", ")", ",", "indent", "=", "4", ")", "\n", "\n", "##### NOW IT starts passing everything to SpanBert format, similarly to", "\n", "# main_bert_processor_dwie: TODO/WIP checking there (main_bert_processor_dwie) first!", "\n", "# maybe can just be simply adapted.", "\n", "# for the candidate documents, check it probably would make sense to pass each of the", "\n", "# spans with candidates to (begin, end) format, so it can be easily integrated with the code", "\n", "# in main_bert_processor_dwie.py.", "\n", "\n", "curr_doc", "=", "self", ".", "get_document", "(", "parsed_aida_original_tokenization", ",", "parsed_cand", ")", "\n", "\n", "curr_doc", "[", "'tags'", "]", "=", "[", "'all'", "]", "\n", "if", "'train'", "in", "aida_plain_dwie_file", ":", "\n", "                                ", "curr_doc", "[", "'tags'", "]", ".", "append", "(", "'train'", ")", "\n", "", "elif", "'testb'", "in", "aida_plain_dwie_file", ":", "\n", "                                ", "curr_doc", "[", "'tags'", "]", ".", "append", "(", "'testb'", ")", "\n", "", "elif", "'testa'", "in", "aida_plain_dwie_file", ":", "\n", "                                ", "curr_doc", "[", "'tags'", "]", ".", "append", "(", "'testa'", ")", "\n", "", "else", ":", "\n", "                                ", "raise", "RuntimeError", "(", "'can not find the dataset type in aida_plain_dwie_file: '", "+", "\n", "aida_plain_dwie_file", ")", "\n", "\n", "", "self", ".", "documents", ".", "append", "(", "curr_doc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.main_bert_processor_aida.BertAidaProcessor.save_to_disk": [[558, 574], ["main_bert_processor_aida.BertAidaProcessor.links_dictionary.write", "json.dump", "os.path.join", "open", "os.path.join", "RuntimeError", "str"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.write"], ["", "", "", "", "", "", "def", "save_to_disk", "(", "self", ")", ":", "\n", "# output_dir = args.output_dir", "\n", "        ", "for", "curr_doc", "in", "self", ".", "documents", ":", "\n", "            ", "file_name", "=", "'{}.json'", ".", "format", "(", "curr_doc", "[", "'id'", "]", ")", "\n", "# set_type = ''", "\n", "if", "'train'", "in", "curr_doc", "[", "'tags'", "]", ":", "\n", "                ", "set_type", "=", "'train'", "\n", "", "elif", "'testa'", "in", "curr_doc", "[", "'tags'", "]", ":", "\n", "                ", "set_type", "=", "'testa'", "\n", "", "elif", "'testb'", "in", "curr_doc", "[", "'tags'", "]", ":", "\n", "                ", "set_type", "=", "'testb'", "\n", "", "else", ":", "\n", "                ", "raise", "RuntimeError", "(", "'can not identify the set_type in tags: '", "+", "str", "(", "curr_doc", "[", "'tags'", "]", ")", ")", "\n", "", "json", ".", "dump", "(", "curr_doc", ",", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir_spanbert", ",", "set_type", ",", "file_name", ")", ",", "'w'", ")", ")", "\n", "# also saves the link dictionary", "\n", "", "self", ".", "links_dictionary", ".", "write", "(", "os", ".", "path", ".", "join", "(", "output_dir_spanbert", ",", "'links_dictionary.json'", ")", ")", "\n", "# links_dictionary.write(links_dictionary_path)", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.main_bert_processor_aida.from_kolitsas_to_aida_link_path": [[31, 60], ["docid.index", "RuntimeError", "docid.index", "docid.index"], "function", ["None"], ["def", "from_kolitsas_to_aida_link_path", "(", "filename", ":", "str", ",", "docid", ":", "str", ")", ":", "\n", "    ", "\"\"\"\n    From a particular filename and docid produced the aida path.\n    Some of the code parts were adapted from external/datasets/find_inconsistencies_reannotated_aida.py.\n\n    :param filename: ex: aida_train.jsonl.\n    :param docid: ex: 4_China\n    :return: ex: data/aida/aida_reannotated/aida-20210402/current/123.json.\n\n    \"\"\"", "\n", "\n", "# different filename possibilities:", "\n", "#   1- aida_dev.jsonl", "\n", "#       - ex docid: 947testa_CRICKET", "\n", "#   2- aida_test.jsonl", "\n", "#       - ex docid: 1163testb_SOCCER", "\n", "#   3- aida_train.jsonl", "\n", "#       - ex docid: 1_EU4", "\n", "# to_ret_id = -1", "\n", "if", "filename", "==", "'aida_dev.jsonl'", ":", "\n", "        ", "ret_id", "=", "docid", "[", ":", "docid", ".", "index", "(", "'testa'", ")", "]", "\n", "", "elif", "filename", "==", "'aida_test.jsonl'", ":", "\n", "        ", "ret_id", "=", "docid", "[", ":", "docid", ".", "index", "(", "'testb'", ")", "]", "\n", "", "elif", "filename", "==", "'aida_train.jsonl'", ":", "\n", "        ", "ret_id", "=", "docid", "[", ":", "docid", ".", "index", "(", "'_'", ")", "]", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "'Unknown filename in from_kolitsas_to_aida_path: '", ",", "filename", ")", "\n", "", "to_ret_id", "=", "'{}.json'", ".", "format", "(", "ret_id", ")", "\n", "return", "to_ret_id", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.main_bert_processor_aida.from_kolitsas_to_aida_plain_dwie_path": [[62, 77], ["docid.index", "RuntimeError", "docid.index", "docid.index"], "function", ["None"], ["", "def", "from_kolitsas_to_aida_plain_dwie_path", "(", "filename", ":", "str", ",", "docid", ":", "str", ")", ":", "\n", "    ", "if", "filename", "==", "'aida_dev.jsonl'", ":", "\n", "        ", "dc_id", "=", "docid", "[", ":", "docid", ".", "index", "(", "'testa'", ")", "]", "\n", "ret_id", "=", "'testa/{}.json'", ".", "format", "(", "dc_id", ")", "\n", "", "elif", "filename", "==", "'aida_test.jsonl'", ":", "\n", "        ", "dc_id", "=", "docid", "[", ":", "docid", ".", "index", "(", "'testb'", ")", "]", "\n", "ret_id", "=", "'testb/{}.json'", ".", "format", "(", "dc_id", ")", "\n", "", "elif", "filename", "==", "'aida_train.jsonl'", ":", "\n", "        ", "dc_id", "=", "docid", "[", ":", "docid", ".", "index", "(", "'_'", ")", "]", "\n", "ret_id", "=", "'train/{}.json'", ".", "format", "(", "dc_id", ")", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "'Unknown filename in from_kolitsas_to_aida_path: '", ",", "filename", ")", "\n", "# to_ret_id = '{}.json'.format(ret_id)", "\n", "# return to_ret_id", "\n", "", "return", "ret_id", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.settings.init": [[1, 7], ["None"], "function", ["None"], ["def", "init", "(", ")", ":", "\n", "    ", "global", "device", "\n", "device", "=", "'cuda'", "\n", "path", "=", "''", "\n", "debugging_path", "=", "''", "\n", "epoch", "=", "0", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.traintool.Runner.__init__": [[133, 136], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "self", ".", "bert_train_steps", "=", "config", "[", "'lr-scheduler'", "]", "[", "'nr_iters_bert_training'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.traintool.Runner.get_optimizer": [[137, 167], ["model.get_params", "logger.info", "logger.info", "logger.info", "transformers.AdamW", "torch.optim.Adam", "str", "str", "str", "model.get_params", "any", "any", "any", "any"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.get_params", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.get_params"], ["", "def", "get_optimizer", "(", "self", ",", "model", ")", ":", "\n", "        ", "no_decay", "=", "[", "'bias'", ",", "'LayerNorm.weight'", "]", "\n", "bert_param", ",", "task_param", "=", "model", ".", "get_params", "(", "named", "=", "True", ")", "\n", "\n", "logger", ".", "info", "(", "'===bert_params in DECAY: '", "+", "\n", "str", "(", "[", "n", "for", "n", ",", "p", "in", "bert_param", "if", "not", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", ")", ")", "\n", "\n", "logger", ".", "info", "(", "'===bert_params in NO DECAY: '", "+", "\n", "str", "(", "[", "n", "for", "n", ",", "p", "in", "bert_param", "if", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", ")", ")", "\n", "\n", "logger", ".", "info", "(", "'=== task params: '", "+", "str", "(", "[", "n", "for", "n", ",", "p", "in", "task_param", "]", ")", ")", "\n", "\n", "grouped_bert_param", "=", "[", "\n", "{", "\n", "'params'", ":", "[", "p", "for", "n", ",", "p", "in", "bert_param", "if", "not", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", ",", "\n", "'lr'", ":", "self", ".", "config", "[", "'lr-scheduler'", "]", "[", "'bert_learning_rate_start'", "]", ",", "\n", "'weight_decay'", ":", "self", ".", "config", "[", "'optimizer'", "]", "[", "'adam_weight_decay'", "]", "\n", "}", ",", "{", "\n", "'params'", ":", "[", "p", "for", "n", ",", "p", "in", "bert_param", "if", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", ",", "\n", "'lr'", ":", "self", ".", "config", "[", "'lr-scheduler'", "]", "[", "'bert_learning_rate_start'", "]", ",", "\n", "'weight_decay'", ":", "0.0", "\n", "}", "\n", "]", "\n", "optimizers", "=", "[", "\n", "AdamW", "(", "grouped_bert_param", ",", "lr", "=", "self", ".", "config", "[", "'lr-scheduler'", "]", "[", "'bert_learning_rate_start'", "]", ",", "\n", "eps", "=", "self", ".", "config", "[", "'optimizer'", "]", "[", "'adam_eps'", "]", ")", ",", "\n", "Adam", "(", "model", ".", "get_params", "(", ")", "[", "1", "]", ",", "lr", "=", "self", ".", "config", "[", "'lr-scheduler'", "]", "[", "'task_learning_rate_start'", "]", ",", "\n", "eps", "=", "self", ".", "config", "[", "'optimizer'", "]", "[", "'adam_eps'", "]", ",", "weight_decay", "=", "0", ")", "\n", "]", "\n", "return", "optimizers", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.traintool.Runner.get_scheduler": [[168, 187], ["int", "max", "max", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "float", "float", "float", "float", "float", "float", "max", "max", "max"], "methods", ["None"], ["", "def", "get_scheduler", "(", "self", ",", "optimizers", ",", "total_update_steps", ")", ":", "\n", "# Only warm up bert lr", "\n", "        ", "warmup_steps", "=", "int", "(", "total_update_steps", "*", "self", ".", "config", "[", "'optimizer'", "]", "[", "'warmup_ratio'", "]", ")", "\n", "\n", "def", "lr_lambda_bert", "(", "current_step", ")", ":", "\n", "            ", "if", "current_step", "<", "warmup_steps", ":", "\n", "                ", "return", "float", "(", "current_step", ")", "/", "float", "(", "max", "(", "1", ",", "warmup_steps", ")", ")", "\n", "", "return", "max", "(", "\n", "0.0", ",", "float", "(", "total_update_steps", "-", "current_step", ")", "/", "float", "(", "max", "(", "1", ",", "total_update_steps", "-", "warmup_steps", ")", ")", "\n", ")", "\n", "\n", "", "def", "lr_lambda_task", "(", "current_step", ")", ":", "\n", "            ", "return", "max", "(", "0.0", ",", "float", "(", "total_update_steps", "-", "current_step", ")", "/", "float", "(", "max", "(", "1", ",", "total_update_steps", ")", ")", ")", "\n", "\n", "", "schedulers", "=", "[", "\n", "LambdaLR", "(", "optimizers", "[", "0", "]", ",", "lr_lambda_bert", ")", ",", "\n", "LambdaLR", "(", "optimizers", "[", "1", "]", ",", "lr_lambda_task", ")", "\n", "]", "\n", "return", "schedulers", "\n", "# return LambdaLR(optimizer, [lr_lambda_bert, lr_lambda_bert, lr_lambda_task, lr_lambda_task])", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.traintool.Runner.get_scheduler_v2": [[189, 239], ["int", "max", "max", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "float", "float", "max"], "methods", ["None"], ["", "def", "get_scheduler_v2", "(", "self", ",", "optimizers", ",", "bert_start_step", ",", "bert_end_step", ",", "task_start_step", ",", "task_end_step", ",", "\n", "min_lambda_bert", ",", "min_lambda_tasks", ")", ":", "\n", "        ", "\"\"\"\n        The version _v2 intends to incorporate the nr of update steps for which bert and the tasks will be updated.\n        \"\"\"", "\n", "\n", "# Only warm up bert lr", "\n", "total_update_steps_bert", "=", "bert_end_step", "-", "bert_start_step", "\n", "total_update_steps_tasks", "=", "task_end_step", "-", "task_start_step", "\n", "warmup_steps", "=", "int", "(", "total_update_steps_bert", "*", "self", ".", "config", "[", "'lr-scheduler'", "]", "[", "'bert_warmup_ratio'", "]", ")", "\n", "\n", "# total_proj_steps_task = total_update_steps_tasks/(1.0 - min_lambda_tasks)", "\n", "\n", "ratio_increase_per_task_step", "=", "(", "min_lambda_tasks", "-", "1.0", ")", "/", "total_update_steps_tasks", "\n", "ratio_increase_per_bert_step", "=", "(", "min_lambda_bert", "-", "1.0", ")", "/", "(", "total_update_steps_bert", "-", "warmup_steps", ")", "\n", "\n", "def", "lr_lambda_bert", "(", "current_step", ")", ":", "\n", "            ", "if", "current_step", "<", "bert_start_step", ":", "\n", "                ", "return", "1.0", "# no changes to learning rate", "\n", "\n", "", "if", "(", "current_step", "-", "bert_start_step", ")", "<", "warmup_steps", "and", "current_step", ">=", "bert_start_step", ":", "\n", "                ", "to_ret", "=", "float", "(", "current_step", "-", "bert_start_step", "+", "1", ")", "/", "float", "(", "max", "(", "1", ",", "warmup_steps", ")", ")", "\n", "return", "to_ret", "\n", "# return max(", "\n", "#     min_lambda_bert, float(total_update_steps_bert - current_step) /", "\n", "#                      float(max(1, total_update_steps_bert - warmup_steps))", "\n", "# )", "\n", "", "to_ret", "=", "max", "(", "min_lambda_bert", ",", "\n", "ratio_increase_per_bert_step", "*", "(", "current_step", "-", "bert_start_step", "-", "warmup_steps", "+", "1", ")", "+", "1.0", ")", "\n", "return", "to_ret", "\n", "\n", "", "def", "lr_lambda_task", "(", "current_step", ")", ":", "\n", "# if current_step > total_update_steps_tasks:", "\n", "#     current_step = total_update_steps_tasks", "\n", "            ", "if", "current_step", "<", "task_start_step", ":", "\n", "                ", "return", "1.0", "# no changes to learning rate", "\n", "\n", "", "to_ret", "=", "max", "(", "min_lambda_tasks", ",", "ratio_increase_per_task_step", "*", "(", "current_step", "-", "task_start_step", ")", "+", "1.0", ")", "\n", "return", "to_ret", "\n", "# if ratio_increase_per_task_step > 0.0:", "\n", "#     return (ratio_increase_per_task_step * current_step)", "\n", "# else:", "\n", "#     return max(min_lambda_tasks, float(total_update_steps_tasks - current_step) /", "\n", "#                float(max(1, total_update_steps_tasks)))", "\n", "\n", "", "schedulers", "=", "[", "\n", "LambdaLR", "(", "optimizers", "[", "0", "]", ",", "lr_lambda_bert", ")", ",", "\n", "LambdaLR", "(", "optimizers", "[", "1", "]", ",", "lr_lambda_task", ")", "\n", "]", "\n", "return", "schedulers", "\n", "# return LambdaLR(optimizer, [lr_lambda_bert, lr_lambda_bert, lr_lambda_task, lr_lambda_task])", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.traintool.Runner.train_spanbert": [[241, 434], ["print", "torch.device", "model.to.to.to", "model.to.to.collate_func", "torch.utils.data.DataLoader", "traintool.Runner.get_optimizer", "traintool.Runner.get_scheduler_v2", "model.to.to.get_params", "dict", "datasets.keys", "time.time", "model.to.to.zero_grad", "range", "os.makedirs", "tensorboard_logger.Logger", "model.to.to.create_metrics", "logger.info", "enumerate", "len", "len", "len", "len", "model.to.to.train", "model.to.to.forward", "loss.backward", "loss_during_accum.append", "torch.no_grad", "str", "isinstance", "isinstance", "logger.warning", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "loss.item", "model.to.to.zero_grad", "numpy.sum().item", "loss_history.append", "len", "optimizer.step", "scheduler.step", "time.time", "logger.info", "tb_loggers[].log_value", "tb_loggers[].log_value", "tb_loggers[].log_value", "tb_loggers[].log_value", "tb_loggers[].log_value", "model.to.to.log_stats", "print", "model.to.to.embedder.spanbert_embedder.spanbert_model.parameters", "traintool.do_evaluate", "numpy.sum", "len", "len", "traintool.do_evaluate_only_loss", "schedulers[].get_last_lr", "schedulers[].get_last_lr"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.collate_func", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.traintool.Runner.get_optimizer", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.traintool.Runner.get_scheduler_v2", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.get_params", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.create_metrics", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.traintool.train", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.relbasic.ModuleRelBasic.forward", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.step", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.step", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_prop_hoi.ModuleCorefLinkerPropE2EHoi.log_stats", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.traintool.do_evaluate", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.traintool.do_evaluate_only_loss"], ["", "def", "train_spanbert", "(", "self", ",", "model", ":", "CoreflinkerSpanBertHoi", ",", "datasets", ",", "parameters", ")", ":", "\n", "        ", "print", "(", "'CURRENT settings.device VALUE IS: '", ",", "settings", ".", "device", ")", "\n", "conf", "=", "self", ".", "config", "\n", "epochs", "=", "conf", "[", "'optimizer'", "]", "[", "'iters'", "]", "\n", "\n", "grad_accum", "=", "conf", "[", "'optimizer'", "]", "[", "'gradient_accumulation_steps'", "]", "\n", "# max_epochs = conf['optimizer']['iters']", "\n", "batch_size", "=", "conf", "[", "'optimizer'", "]", "[", "'batch_size'", "]", "\n", "\n", "device_name", "=", "settings", ".", "device", "\n", "device", "=", "torch", ".", "device", "(", "device_name", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "collate_fn", "=", "model", ".", "collate_func", "(", "datasets", ",", "device", ")", "\n", "train", "=", "DataLoader", "(", "datasets", "[", "conf", "[", "'trainer'", "]", "[", "'train'", "]", "]", ",", "collate_fn", "=", "collate_fn", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ")", "\n", "\n", "examples_train", "=", "datasets", "[", "'train'", "]", "\n", "# total_update_steps = len(examples_train) * epochs // grad_accum", "\n", "\n", "optimizers", "=", "self", ".", "get_optimizer", "(", "model", ")", "\n", "# schedulers = self.get_scheduler(optimizers, total_update_steps)", "\n", "\n", "bert_start_epoch", "=", "config", "[", "'lr-scheduler'", "]", "[", "'bert_start_epoch'", "]", "\n", "bert_end_epoch", "=", "config", "[", "'lr-scheduler'", "]", "[", "'bert_end_epoch'", "]", "\n", "task_start_epoch", "=", "config", "[", "'lr-scheduler'", "]", "[", "'task_start_epoch'", "]", "\n", "task_end_epoch", "=", "config", "[", "'lr-scheduler'", "]", "[", "'task_end_epoch'", "]", "\n", "\n", "bert_start_step", "=", "len", "(", "examples_train", ")", "*", "bert_start_epoch", "//", "grad_accum", "\n", "bert_end_step", "=", "len", "(", "examples_train", ")", "*", "bert_end_epoch", "//", "grad_accum", "\n", "task_start_step", "=", "len", "(", "examples_train", ")", "*", "task_start_epoch", "//", "grad_accum", "\n", "task_end_step", "=", "len", "(", "examples_train", ")", "*", "task_end_epoch", "//", "grad_accum", "\n", "\n", "bert_learning_rate_start", "=", "config", "[", "'lr-scheduler'", "]", "[", "'bert_learning_rate_start'", "]", "\n", "bert_learning_rate_end", "=", "config", "[", "'lr-scheduler'", "]", "[", "'bert_learning_rate_end'", "]", "\n", "\n", "task_learning_rate_start", "=", "config", "[", "'lr-scheduler'", "]", "[", "'task_learning_rate_start'", "]", "\n", "task_learning_rate_end", "=", "config", "[", "'lr-scheduler'", "]", "[", "'task_learning_rate_end'", "]", "\n", "\n", "min_lambda_bert", "=", "bert_learning_rate_end", "/", "bert_learning_rate_start", "\n", "min_lambda_task", "=", "task_learning_rate_end", "/", "task_learning_rate_start", "\n", "\n", "schedulers", "=", "self", ".", "get_scheduler_v2", "(", "optimizers", ",", "bert_start_step", ",", "bert_end_step", ",", "task_start_step", ",", "task_end_step", ",", "\n", "min_lambda_bert", ",", "min_lambda_task", ")", "\n", "\n", "bert_param", ",", "task_param", "=", "model", ".", "get_params", "(", ")", "\n", "\n", "tb_loggers", "=", "dict", "(", ")", "\n", "for", "data_tag", "in", "datasets", ".", "keys", "(", ")", ":", "\n", "            ", "tb_logger_path", "=", "'{}/{}'", ".", "format", "(", "conf", "[", "'path'", "]", ",", "data_tag", ")", "\n", "# tb_logger_train_path = '{}/{}'.format(conf['path'], 'train')", "\n", "os", ".", "makedirs", "(", "tb_logger_path", ",", "exist_ok", "=", "True", ")", "\n", "# os.makedirs(tb_logger_train_path, exist_ok=True)", "\n", "# tb_logger_train = TBLogger(tb_logger_train_path, flush_secs=10)", "\n", "# tb_logger_test = TBLogger(tb_logger_test_path, flush_secs=10)", "\n", "tb_loggers", "[", "data_tag", "]", "=", "TBLogger", "(", "tb_logger_path", ",", "flush_secs", "=", "10", ")", "\n", "\n", "", "loss_during_accum", "=", "[", "]", "# To compute effective loss at each update", "\n", "loss_during_report", "=", "0.0", "# Effective loss during logging step", "\n", "loss_history", "=", "[", "]", "# Full history of effective loss; length equals total update steps", "\n", "\n", "metrics", "=", "{", "name", ":", "model", ".", "create_metrics", "(", ")", "for", "name", "in", "conf", "[", "'trainer'", "]", "[", "'evaluate'", "]", "}", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "model", ".", "zero_grad", "(", ")", "\n", "optimizer_steps", "=", "0", "\n", "# train_tag = datasets[conf['trainer']['train']]", "\n", "train_tag", "=", "conf", "[", "'trainer'", "]", "[", "'train'", "]", "\n", "# todo: delete from prod this set_detect_anomaly!!!", "\n", "# torch.autograd.set_detect_anomaly(True)", "\n", "for", "epo", "in", "range", "(", "epochs", ")", ":", "\n", "            ", "settings", ".", "epoch", "=", "epo", "\n", "max_norm_bert", "=", "0", "\n", "max_norm_tasks", "=", "0", "\n", "\n", "logger", ".", "info", "(", "'\\n EPOCH: '", "+", "str", "(", "epo", ")", ")", "\n", "\n", "# if hasattr(model, 'begin_epoch'):", "\n", "#     model.begin_epoch()", "\n", "\n", "for", "i", ",", "minibatch", "in", "enumerate", "(", "train", ")", ":", "\n", "                ", "model", ".", "train", "(", ")", "\n", "\n", "loss", ",", "_", "=", "model", ".", "forward", "(", "**", "minibatch", ")", "\n", "\n", "if", "loss", "is", "None", "or", "isinstance", "(", "loss", ",", "int", ")", "or", "isinstance", "(", "loss", ",", "float", ")", ":", "\n", "                    ", "logger", ".", "warning", "(", "'SKIP EMPTY MINIBATCH'", ")", "\n", "continue", "\n", "\n", "", "if", "grad_accum", ">", "1", ":", "\n", "                    ", "loss", "/=", "grad_accum", "\n", "", "loss", ".", "backward", "(", ")", "\n", "\n", "if", "'clip-norm'", "in", "conf", "[", "'optimizer'", "]", ":", "\n", "# norm = torch.nn.utils.clip_grad_norm_(model.parameters(), conf['optimizer']['clip-norm'])", "\n", "                    ", "norm_bert", "=", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "bert_param", ",", "conf", "[", "'optimizer'", "]", "[", "'clip-norm'", "]", ")", "\n", "norm_tasks", "=", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "task_param", ",", "conf", "[", "'optimizer'", "]", "[", "'clip-norm'", "]", ")", "\n", "\n", "if", "norm_bert", ">", "max_norm_bert", ":", "\n", "                        ", "max_norm_bert", "=", "norm_bert", "\n", "\n", "", "if", "norm_tasks", ">", "max_norm_tasks", ":", "\n", "                        ", "max_norm_tasks", "=", "norm_tasks", "\n", "\n", "", "", "loss_during_accum", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "# Update", "\n", "if", "len", "(", "loss_during_accum", ")", "%", "grad_accum", "==", "0", ":", "\n", "                    ", "for", "optimizer", "in", "optimizers", ":", "\n", "                        ", "optimizer", ".", "step", "(", ")", "\n", "", "model", ".", "zero_grad", "(", ")", "\n", "for", "scheduler", "in", "schedulers", ":", "\n", "                        ", "scheduler", ".", "step", "(", ")", "\n", "\n", "# Compute effective loss", "\n", "", "effective_loss", "=", "np", ".", "sum", "(", "loss_during_accum", ")", ".", "item", "(", ")", "\n", "loss_during_accum", "=", "[", "]", "\n", "loss_during_report", "+=", "effective_loss", "\n", "loss_history", ".", "append", "(", "effective_loss", ")", "\n", "optimizer_steps", "+=", "1", "\n", "\n", "# Report", "\n", "# if len(loss_history) % conf['report_frequency'] == 0:", "\n", "if", "optimizer_steps", "%", "conf", "[", "'optimizer'", "]", "[", "'report_frequency'", "]", "==", "0", ":", "\n", "# Show avg loss during last report interval", "\n", "                        ", "avg_loss", "=", "loss_during_report", "/", "conf", "[", "'optimizer'", "]", "[", "'report_frequency'", "]", "\n", "loss_during_report", "=", "0.0", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "'\\n Step %d: avg loss %.2f; steps/sec %.2f'", "%", "\n", "(", "optimizer_steps", ",", "avg_loss", ",", "conf", "[", "'optimizer'", "]", "[", "'report_frequency'", "]", "\n", "/", "(", "end_time", "-", "start_time", ")", ")", ")", "\n", "start_time", "=", "end_time", "\n", "\n", "tb_loggers", "[", "train_tag", "]", ".", "log_value", "(", "'loss/'", ",", "avg_loss", ",", "optimizer_steps", ")", "\n", "tb_loggers", "[", "train_tag", "]", ".", "log_value", "(", "'max-norm-bert/'", ",", "max_norm_bert", ",", "optimizer_steps", ")", "\n", "max_norm_bert", "=", "0", "\n", "tb_loggers", "[", "train_tag", "]", ".", "log_value", "(", "'max-norm-tasks/'", ",", "max_norm_tasks", ",", "optimizer_steps", ")", "\n", "max_norm_tasks", "=", "0", "\n", "\n", "tb_loggers", "[", "train_tag", "]", ".", "log_value", "(", "'learning-rate-bert/'", ",", "schedulers", "[", "0", "]", ".", "get_last_lr", "(", ")", "[", "0", "]", ",", "\n", "len", "(", "loss_history", ")", ")", "\n", "tb_loggers", "[", "train_tag", "]", ".", "log_value", "(", "'learning-rate-task/'", ",", "schedulers", "[", "1", "]", ".", "get_last_lr", "(", ")", "[", "-", "1", "]", ",", "\n", "len", "(", "loss_history", ")", ")", "\n", "\n", "model", ".", "log_stats", "(", "train_tag", ",", "tb_loggers", "[", "train_tag", "]", ",", "optimizer_steps", ")", "\n", "\n", "", "if", "self", ".", "bert_train_steps", ">", "0", "and", "self", ".", "bert_train_steps", "==", "optimizer_steps", ":", "\n", "                        ", "print", "(", "'freezing bert parameters after '", ",", "optimizer_steps", ",", "' optimizer steps'", ")", "\n", "for", "param", "in", "model", ".", "embedder", ".", "spanbert_embedder", ".", "spanbert_model", ".", "parameters", "(", ")", ":", "\n", "                            ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "                ", "for", "name", "in", "conf", "[", "'trainer'", "]", "[", "'evaluate'", "]", ":", "\n", "                    ", "evaluate_only_loss", "=", "False", "\n", "evaluate_all", "=", "False", "\n", "if", "conf", "[", "'trainer'", "]", "[", "'loss_frequency'", "]", "[", "name", "]", ">=", "1", ":", "\n", "                        ", "if", "epo", "<", "epochs", "-", "1", "and", "(", "epo", "+", "1", ")", "%", "conf", "[", "'trainer'", "]", "[", "'loss_frequency'", "]", "[", "name", "]", "!=", "0", ":", "\n", "                            ", "evaluate_only_loss", "=", "False", "\n", "", "else", ":", "\n", "# TODO: evaluate only loss", "\n", "                            ", "evaluate_only_loss", "=", "True", "\n", "\n", "# if conf['trainer']['evaluation_frequency'][name] == -1 and epo < epochs - 1:", "\n", "#     continue", "\n", "# elif conf['trainer']['evaluation_frequency'][name] > 1:", "\n", "#     if epo < epochs - 1 and epo % conf['trainer']['evaluation_frequency'][name] != 0:", "\n", "#         continue", "\n", "", "", "if", "epo", "==", "epochs", "-", "1", ":", "\n", "                        ", "evaluate_all", "=", "True", "\n", "", "elif", "(", "epo", "+", "1", ")", "%", "conf", "[", "'trainer'", "]", "[", "'evaluation_frequency'", "]", "[", "name", "]", "==", "0", "and", "conf", "[", "'trainer'", "]", "[", "'evaluation_frequency'", "]", "[", "name", "]", ">", "0", ":", "\n", "                        ", "evaluate_all", "=", "True", "\n", "\n", "", "if", "epo", "<", "epochs", "-", "1", ":", "\n", "                        ", "predict_file", "=", "None", "\n", "if", "evaluate_all", ":", "\n", "# pass", "\n", "                            ", "predict_file", "=", "'{}/{}_ep{:03d}.jsonl'", ".", "format", "(", "conf", "[", "'path'", "]", ",", "name", ",", "epo", ")", "if", "conf", "[", "'trainer'", "]", "[", "'write-predictions'", "]", "else", "None", "\n", "", "", "else", ":", "\n", "                        ", "predict_file", "=", "'{}/{}.jsonl'", ".", "format", "(", "conf", "[", "'path'", "]", ",", "name", ")", "if", "conf", "[", "'trainer'", "]", "[", "\n", "'write-predictions'", "]", "else", "None", "\n", "\n", "# tb_logger_evaluate = tb_logger_train if name == 'train' else tb_logger_test", "\n", "", "if", "evaluate_all", ":", "\n", "                        ", "tb_logger_evaluate", "=", "tb_loggers", "[", "name", "]", "\n", "do_evaluate", "(", "model", ",", "datasets", "[", "name", "]", ",", "metrics", "[", "name", "]", ",", "batch_size", ",", "predict_file", ",", "tb_logger_evaluate", ",", "\n", "epo", ",", "config", "=", "conf", ")", "\n", "", "elif", "evaluate_only_loss", ":", "\n", "                        ", "tb_logger_evaluate", "=", "tb_loggers", "[", "name", "]", "\n", "# TODO: we are working on this evaluation of only loss without actual predictions", "\n", "do_evaluate_only_loss", "(", "model", ",", "datasets", "[", "name", "]", ",", "metrics", "[", "name", "]", ",", "batch_size", ",", "predict_file", ",", "\n", "tb_logger_evaluate", ",", "epo", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.traintool.do_evaluate": [[31, 89], ["torch.device", "model.collate_func", "torch.utils.data.DataLoader", "model.eval", "hasattr", "tb_logger.log_value", "print", "hasattr", "m.step", "model.begin_epoch", "enumerate", "print", "m.print", "m.log", "model.log_stats", "model.forward", "isinstance", "open", "enumerate", "obj.item", "print", "model.predict", "isinstance", "obj.item", "print", "json.dump", "file.write", "len"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.collate_func", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.step", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.ncr3.NCR3.begin_epoch", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_prop_hoi.ModuleCorefLinkerPropE2EHoi.log_stats", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.relbasic.ModuleRelBasic.forward", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.predict", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.write"], ["def", "do_evaluate", "(", "model", ",", "dataset", ",", "metrics", ",", "batch_size", ",", "filename", "=", "None", ",", "tb_logger", "=", "None", ",", "epoch", "=", "-", "1", ",", "\n", "config", "=", "None", ")", ":", "\n", "# device = torch.device(\"cuda\")", "\n", "    ", "device", "=", "torch", ".", "device", "(", "settings", ".", "device", ")", "\n", "# print('device in do_evaluate is: ', device)", "\n", "collate_fn", "=", "model", ".", "collate_func", "(", "datasets", ",", "device", ")", "\n", "\n", "loader", "=", "DataLoader", "(", "dataset", ",", "collate_fn", "=", "collate_fn", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ")", "\n", "name", "=", "dataset", ".", "name", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "for", "m", "in", "metrics", ":", "\n", "        ", "m", ".", "step", "(", ")", "\n", "\n", "", "if", "hasattr", "(", "model", ",", "'begin_epoch'", ")", ":", "\n", "        ", "model", ".", "begin_epoch", "(", ")", "\n", "\n", "", "if", "filename", "is", "None", ":", "\n", "        ", "total_obj", "=", "0", "\n", "for", "i", ",", "minibatch", "in", "enumerate", "(", "loader", ")", ":", "\n", "            ", "obj", ",", "outputs", "=", "model", ".", "forward", "(", "**", "minibatch", ",", "metrics", "=", "metrics", ")", "\n", "if", "isinstance", "(", "obj", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "total_obj", "+=", "obj", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"SKIP MINIBATCH\"", ")", "\n", "", "", "", "else", ":", "\n", "        ", "print", "(", "\"Writing predictions to {}\"", ".", "format", "(", "filename", ")", ")", "\n", "with", "open", "(", "filename", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "file", ":", "\n", "            ", "total_obj", "=", "0", "\n", "for", "i", ",", "minibatch", "in", "enumerate", "(", "loader", ")", ":", "\n", "# the config , how they are passed also \"atadura con alambres\", need to change in final version", "\n", "                ", "obj", ",", "predictions", "=", "model", ".", "predict", "(", "**", "minibatch", ",", "metrics", "=", "metrics", ",", "output_config", "=", "config", "[", "'output_config'", "]", ")", "\n", "if", "isinstance", "(", "obj", ",", "torch", ".", "Tensor", ")", ":", "\n", "                    ", "total_obj", "+=", "obj", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "\"SKIP MINIBATCH\"", ")", "\n", "\n", "", "for", "pred", "in", "predictions", ":", "\n", "# json.dump(pred, file)", "\n", "                    ", "json", ".", "dump", "(", "pred", ",", "file", ",", "ensure_ascii", "=", "False", ")", "\n", "file", ".", "write", "(", "'\\n'", ")", "\n", "\n", "", "", "", "", "tb_logger", ".", "log_value", "(", "'loss/'", ",", "total_obj", ",", "epoch", ")", "\n", "\n", "for", "m", "in", "metrics", ":", "\n", "        ", "m", ".", "print", "(", "name", ",", "True", ")", "\n", "m", ".", "log", "(", "tb_logger", ",", "name", ")", "\n", "\n", "", "print", "(", "\"{}-avg-loss: {}\"", ".", "format", "(", "name", ",", "total_obj", "/", "(", "len", "(", "loader", ")", "+", "1e-7", ")", ")", ")", "\n", "\n", "# model.log_stats(name)", "\n", "# if hasattr(model, 'end_epoch'):", "\n", "#     model.end_epoch(name)", "\n", "if", "hasattr", "(", "model", ",", "'log_stats'", ")", ":", "\n", "        ", "if", "name", "==", "'train'", ":", "\n", "            ", "name", "=", "'train-ep'", "# if not will get mixed with log_stats when training", "\n", "", "model", ".", "log_stats", "(", "name", ",", "tb_logger", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.traintool.do_evaluate_only_loss": [[91, 128], ["torch.device", "model.collate_func", "torch.utils.data.DataLoader", "model.eval", "hasattr", "enumerate", "tb_logger.log_value", "print", "hasattr", "model.begin_epoch", "model.forward", "isinstance", "model.log_stats", "obj.item", "print", "len"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.collate_func", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.ncr3.NCR3.begin_epoch", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.relbasic.ModuleRelBasic.forward", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_prop_hoi.ModuleCorefLinkerPropE2EHoi.log_stats", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "", "def", "do_evaluate_only_loss", "(", "model", ",", "dataset", ",", "metrics", ",", "batch_size", ",", "filename", "=", "None", ",", "tb_logger", "=", "None", ",", "epoch", "=", "-", "1", ",", "config", "=", "None", ")", ":", "\n", "# device = torch.device(\"cuda\")", "\n", "    ", "device", "=", "torch", ".", "device", "(", "settings", ".", "device", ")", "\n", "# print('device in do_evaluate is: ', device)", "\n", "collate_fn", "=", "model", ".", "collate_func", "(", "datasets", ",", "device", ")", "\n", "\n", "loader", "=", "DataLoader", "(", "dataset", ",", "collate_fn", "=", "collate_fn", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ")", "\n", "name", "=", "dataset", ".", "name", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "# for m in metrics:", "\n", "#     m.step()", "\n", "\n", "if", "hasattr", "(", "model", ",", "'begin_epoch'", ")", ":", "\n", "        ", "model", ".", "begin_epoch", "(", ")", "\n", "\n", "", "total_obj", "=", "0", "\n", "for", "i", ",", "minibatch", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "obj", ",", "outputs", "=", "model", ".", "forward", "(", "**", "minibatch", ",", "metrics", "=", "[", "]", ",", "only_loss", "=", "True", ")", "\n", "if", "isinstance", "(", "obj", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "total_obj", "+=", "obj", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"SKIP MINIBATCH\"", ")", "\n", "\n", "", "", "tb_logger", ".", "log_value", "(", "'loss/'", ",", "total_obj", ",", "epoch", ")", "\n", "\n", "# for m in metrics:", "\n", "#     m.print(name, True)", "\n", "#     m.log(tb_logger, name)", "\n", "\n", "print", "(", "\"{}-avg-loss (only loss, no metrics): {}\"", ".", "format", "(", "name", ",", "total_obj", "/", "(", "len", "(", "loader", ")", "+", "1e-7", ")", ")", ")", "\n", "\n", "if", "hasattr", "(", "model", ",", "'log_stats'", ")", ":", "\n", "        ", "if", "name", "==", "'train'", ":", "\n", "            ", "name", "=", "'train-ep'", "# if not will get mixed with log_stats when training", "\n", "", "model", ".", "log_stats", "(", "name", ",", "tb_logger", ",", "epoch", ")", "\n", "# if hasattr(model, 'end_epoch'):", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.traintool.train": [[438, 658], ["print", "torch.device", "model.to.to", "model.to.collate_func", "config[].get", "torch.utils.data.DataLoader", "config[].get", "os.makedirs", "os.makedirs", "os.makedirs", "tensorboard_logger.Logger", "tensorboard_logger.Logger", "tensorboard_logger.Logger", "print", "lrschedule.create_lr_scheduler", "hasattr", "range", "print", "model.to.load_model", "config[].get", "print", "torch.optim.Adam", "len", "model.to.create_metrics", "model.to.init", "model.to.train", "time.time", "hasattr", "enumerate", "hasattr", "print", "tensorboard_logger.Logger.log_value", "tensorboard_logger.Logger.log_value", "tensorboard_logger.Logger.log_value", "model.to.named_parameters", "print", "torch.optim.ASGD", "print", "model.to.begin_epoch", "tqdm.tqdm", "lrschedule.create_lr_scheduler.step", "model.to.forward", "obj.item", "torchcontrib.optim.SWA.zero_grad", "obj.backward", "torchcontrib.optim.SWA.step", "model.to.end_epoch", "print", "torchcontrib.optim.SWA.update_swa", "tensorboard_logger.Logger.log_value", "tensorboard_logger.Logger.log_value", "tensorboard_logger.Logger.log_value", "torchcontrib.optim.SWA.swap_swa_sgd", "torch.no_grad", "torchcontrib.optim.SWA.swap_swa_sgd", "len", "torch.optim.Adam", "torchcontrib.optim.SWA", "print", "isinstance", "isinstance", "print", "torch.nn.utils.clip_grad_norm_", "param.mean().item", "param.std().item", "param.norm().item", "min", "tensorboard_logger.Logger.log_value", "model.to.write_model", "print", "traintool.do_evaluate", "model.to.write_model", "print", "time.sleep", "print", "model.to.parameters", "time.time", "list", "param.max().item", "param.mean", "param.std", "param.norm", "param.max"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.collate_func", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.lrschedule.create_lr_scheduler", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.load_model", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.create_metrics", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.settings.init", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.traintool.train", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.ncr3.NCR3.begin_epoch", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.step", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.relbasic.ModuleRelBasic.forward", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.step", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert.CoreflinkerSpanBert.end_epoch", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.write_model", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.traintool.do_evaluate", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.write_model", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "", "", "", "", "", "def", "train", "(", "model", ",", "datasets", ",", "config", ",", "parameters", ")", ":", "\n", "    ", "print", "(", "'CURRENT settings.device VALUE IS: '", ",", "settings", ".", "device", ")", "\n", "device_name", "=", "settings", ".", "device", "\n", "# device = torch.device(\"cuda\")", "\n", "device", "=", "torch", ".", "device", "(", "device_name", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "collate_fn", "=", "model", ".", "collate_func", "(", "datasets", ",", "device", ")", "\n", "max_epochs", "=", "config", "[", "'optimizer'", "]", "[", "'iters'", "]", "\n", "batch_size", "=", "config", "[", "'optimizer'", "]", "[", "'batch_size'", "]", "\n", "# lrate0 = config['optimizer']['lrate0']", "\n", "\n", "filename", "=", "config", "[", "'optimizer'", "]", ".", "get", "(", "'init-model'", ",", "None", ")", "\n", "if", "filename", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"Initializing model {}\"", ".", "format", "(", "filename", ")", ")", "\n", "model", ".", "load_model", "(", "filename", ",", "config", "[", "'model'", "]", ")", "\n", "\n", "", "train", "=", "DataLoader", "(", "datasets", "[", "config", "[", "'trainer'", "]", "[", "'train'", "]", "]", ",", "collate_fn", "=", "collate_fn", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ")", "\n", "\n", "opt_type", "=", "config", "[", "'optimizer'", "]", ".", "get", "(", "'optimizer'", ",", "'adam'", ")", "\n", "swa", "=", "False", "\n", "if", "opt_type", "==", "'adam'", ":", "\n", "        ", "weight_decay", "=", "config", "[", "'optimizer'", "]", ".", "get", "(", "'weight_decay'", ",", "0.0", ")", "\n", "print", "(", "\"ADAM: weight_decay={}\"", ".", "format", "(", "weight_decay", ")", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "parameters", ",", "weight_decay", "=", "weight_decay", ")", "# , lr=lrate0", "\n", "", "elif", "opt_type", "==", "'asgd'", ":", "\n", "        ", "t0", "=", "config", "[", "'optimizer'", "]", "[", "'t0'", "]", "*", "len", "(", "train", ")", "\n", "print", "(", "\"asgd t0:\"", ",", "t0", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "ASGD", "(", "parameters", ",", "t0", "=", "t0", ")", "\n", "", "elif", "opt_type", "==", "'adam-swa'", ":", "\n", "        ", "import", "torchcontrib", ".", "optim", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "parameters", ",", "lr", "=", "1e-3", ")", "\n", "optimizer", "=", "torchcontrib", ".", "optim", ".", "SWA", "(", "optimizer", ")", "\n", "swa_start", "=", "config", "[", "'optimizer'", "]", "[", "'swa-start'", "]", "\n", "swa_freq", "=", "config", "[", "'optimizer'", "]", "[", "'swa-freq'", "]", "\n", "swa", "=", "True", "\n", "# lrate=lrate0", "\n", "\n", "# print('CURRENT settings.device VALUE IS: ', settings.device)", "\n", "\n", "# setup logger", "\n", "", "tb_logger_all_path", "=", "'{}/{}'", ".", "format", "(", "config", "[", "'path'", "]", ",", "'params'", ")", "\n", "tb_logger_test_path", "=", "'{}/{}'", ".", "format", "(", "config", "[", "'path'", "]", ",", "'test'", ")", "\n", "tb_logger_train_path", "=", "'{}/{}'", ".", "format", "(", "config", "[", "'path'", "]", ",", "'train'", ")", "\n", "os", ".", "makedirs", "(", "tb_logger_all_path", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "tb_logger_test_path", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "tb_logger_train_path", ",", "exist_ok", "=", "True", ")", "\n", "tb_logger_all", "=", "TBLogger", "(", "tb_logger_all_path", ")", "\n", "tb_logger_train", "=", "TBLogger", "(", "tb_logger_train_path", ")", "\n", "tb_logger_test", "=", "TBLogger", "(", "tb_logger_test_path", ")", "\n", "\n", "print", "(", "\"Start optimization for {} iterations with batch_size={}\"", ".", "format", "(", "max_epochs", ",", "batch_size", ")", ")", "\n", "name2progress", "=", "{", "name", ":", "{", "'name'", ":", "name", "}", "for", "name", "in", "config", "[", "'trainer'", "]", "[", "'evaluate'", "]", "}", "\n", "\n", "scheduler", "=", "create_lr_scheduler", "(", "optimizer", ",", "config", ",", "max_epochs", ",", "len", "(", "train", ")", ")", "\n", "\n", "# TODO: move this to lrschedule.py", "\n", "monitor", "=", "None", "\n", "factor", "=", "1.0", "\n", "patience", "=", "0", "\n", "if", "'lrate-schedule'", "in", "config", "[", "'trainer'", "]", ":", "\n", "# try factor = 0.9", "\n", "        ", "monitor", "=", "name2progress", "[", "config", "[", "'trainer'", "]", "[", "'lrate-schedule'", "]", "[", "'monitor'", "]", "]", "\n", "factor", "=", "config", "[", "'trainer'", "]", "[", "'lrate-schedule'", "]", "[", "'factor'", "]", "\n", "module", "=", "config", "[", "'trainer'", "]", "[", "'lrate-schedule'", "]", "[", "'module'", "]", "\n", "metric", "=", "config", "[", "'trainer'", "]", "[", "'lrate-schedule'", "]", "[", "'metric'", "]", "\n", "patience", "=", "config", "[", "'trainer'", "]", "[", "'lrate-schedule'", "]", "[", "'patience'", "]", "\n", "\n", "", "metrics", "=", "{", "name", ":", "model", ".", "create_metrics", "(", ")", "for", "name", "in", "config", "[", "'trainer'", "]", "[", "'evaluate'", "]", "}", "\n", "\n", "if", "hasattr", "(", "model", ",", "'init'", ")", ":", "\n", "        ", "model", ".", "init", "(", "train", ")", "\n", "\n", "# (kzaporoj) - this is O(n), but its ok since it is done only once", "\n", "# train_metrics = []", "\n", "\n", "# (kzaporoj) - this was not a good idea since the .eval() first has to be invoked, which makes functions", "\n", "# such as dropout() behave differently from training mode.", "\n", "# if train.dataset.name in config['trainer']['evaluate']:", "\n", "#     # remove it because do not want to run an evaluation on train itself when the metrics can be gather during the", "\n", "#     # training process", "\n", "#     config['trainer']['evaluate'].remove(train.dataset.name)", "\n", "#     train_metrics = metrics[train.dataset.name]", "\n", "\n", "# model.tb_logger = tb_logger", "\n", "\n", "", "for", "epoch", "in", "range", "(", "max_epochs", ")", ":", "\n", "# for m in train_metrics:", "\n", "#     m.step()", "\n", "\n", "# print('optimizer', optimizer.state)", "\n", "# train_metrics = []", "\n", "# if train.dataset.name in metrics:", "\n", "#     train_metrics = model.create_metrics()", "\n", "\n", "# TODO: move this to lrschedule.py", "\n", "        ", "if", "'lrate-schedule'", "in", "config", "[", "'trainer'", "]", ":", "\n", "            ", "print", "(", "monitor", ")", "\n", "if", "module", "in", "monitor", ":", "\n", "                ", "if", "(", "monitor", "[", "module", "]", "[", "metric", "]", "[", "'stall'", "]", "+", "1", ")", "%", "patience", "==", "0", ":", "\n", "                    ", "print", "(", "\"decrease lrate\"", ")", "\n", "lrate", "*=", "factor", "\n", "for", "group", "in", "optimizer", ".", "param_groups", ":", "\n", "                        ", "group", "[", "'lr'", "]", "=", "lrate", "\n", "", "", "", "else", ":", "\n", "                ", "print", "(", "\"WARNING: no such module:\"", ",", "module", ")", "\n", "\n", "", "", "model", ".", "train", "(", ")", "\n", "total_obj", "=", "0", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "max_norm", "=", "0", "\n", "\n", "if", "hasattr", "(", "model", ",", "'begin_epoch'", ")", ":", "\n", "            ", "model", ".", "begin_epoch", "(", ")", "\n", "\n", "# train", "\n", "", "for", "i", ",", "minibatch", "in", "enumerate", "(", "tqdm", "(", "train", ")", ")", ":", "\n", "# print(\"BEGIN\\t\", torch.cuda.memory_allocated() // (1024*1024))", "\n", "\n", "            ", "lrate", "=", "scheduler", ".", "step", "(", ")", "\n", "# obj, _ = model.forward(**minibatch, metrics=train_metrics)", "\n", "obj", ",", "_", "=", "model", ".", "forward", "(", "**", "minibatch", ")", "\n", "# print('type:', type(obj))", "\n", "\n", "# (kzaporoj) - there can be that for some reason (ex: no mentions with candidates in linker), the loss", "\n", "# is 0.0 (it is not a tensor, but a float) ; in this case we do not do a grad propagation", "\n", "if", "obj", "is", "None", "or", "isinstance", "(", "obj", ",", "int", ")", "or", "isinstance", "(", "obj", ",", "float", ")", ":", "\n", "                ", "print", "(", "\"SKIP EMPTY MINIBATCH\"", ")", "\n", "continue", "\n", "\n", "", "total_obj", "+=", "obj", ".", "item", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "obj", ".", "backward", "(", ")", "\n", "\n", "if", "'clip-norm'", "in", "config", "[", "'optimizer'", "]", ":", "\n", "                ", "norm", "=", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "config", "[", "'optimizer'", "]", "[", "'clip-norm'", "]", ")", "\n", "if", "norm", ">", "max_norm", ":", "\n", "                    ", "max_norm", "=", "norm", "\n", "\n", "# for name, param in model.named_parameters():", "\n", "#     print(\"{} norm={} grad={}\".format(name, param.data.norm().item(), param.grad.norm().item() if param.grad is not None else -1))", "\n", "\n", "", "", "optimizer", ".", "step", "(", ")", "\n", "\n", "# print(\"END\\t\", torch.cuda.memory_allocated() // (1024*1024))", "\n", "# break", "\n", "\n", "", "if", "hasattr", "(", "model", ",", "'end_epoch'", ")", ":", "\n", "            ", "model", ".", "end_epoch", "(", "'train'", ")", "\n", "\n", "", "if", "swa", "and", "epoch", ">=", "swa_start", "and", "epoch", "%", "swa_freq", "==", "0", ":", "\n", "            ", "print", "(", "\"UPDATE-SWA\"", ")", "\n", "optimizer", ".", "update_swa", "(", ")", "\n", "\n", "", "print", "(", "\"{}\\tobj: {}   time: {}    lrate: {}\"", ".", "format", "(", "epoch", ",", "total_obj", ",", "time", ".", "time", "(", ")", "-", "tic", ",", "lrate", ")", ")", "\n", "\n", "tb_logger_train", ".", "log_value", "(", "'loss/'", ",", "total_obj", ",", "epoch", ")", "\n", "tb_logger_train", ".", "log_value", "(", "'max-norm/'", ",", "max_norm", ",", "epoch", ")", "\n", "tb_logger_train", ".", "log_value", "(", "'optimizer/lrate'", ",", "lrate", ",", "epoch", ")", "\n", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "tb_logger_all", ".", "log_value", "(", "'parameters/mean/{}'", ".", "format", "(", "name", ")", ",", "param", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "epoch", ")", "\n", "tb_logger_all", ".", "log_value", "(", "'parameters/stdv/{}'", ".", "format", "(", "name", ")", ",", "param", ".", "std", "(", ")", ".", "item", "(", ")", ",", "epoch", ")", "\n", "tb_logger_all", ".", "log_value", "(", "'parameters/norm/{}'", ".", "format", "(", "name", ")", ",", "param", ".", "norm", "(", ")", ".", "item", "(", ")", ",", "epoch", ")", "\n", "# print('calculating the max of ', param)", "\n", "# print('calculating the max of shape', param.shape)", "\n", "if", "min", "(", "list", "(", "param", ".", "shape", ")", ")", "==", "0", ":", "# (kzaporoj) - sometimes empty is coming", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "tb_logger_all", ".", "log_value", "(", "'parameters/max/{}'", ".", "format", "(", "name", ")", ",", "param", ".", "max", "(", ")", ".", "item", "(", ")", ",", "epoch", ")", "\n", "\n", "", "", "try", ":", "\n", "            ", "if", "config", "[", "'optimizer'", "]", "[", "'write-iter-model'", "]", ":", "\n", "                ", "model", ".", "write_model", "(", "'{}/{}.model'", ".", "format", "(", "config", "[", "'path'", "]", ",", "epoch", ")", ")", "\n", "", "", "except", ":", "\n", "            ", "print", "(", "\"ERROR: failed to write model to disk\"", ")", "\n", "\n", "", "if", "swa", "and", "epoch", ">=", "swa_start", ":", "\n", "            ", "optimizer", ".", "swap_swa_sgd", "(", ")", "\n", "\n", "# if some metrics that were gathered during train process, then log them to tb_logger_train", "\n", "# for m in train_metrics:", "\n", "#     m.print(train.dataset.name, True)", "\n", "#     m.log(tb_logger_train, train.dataset.name)", "\n", "\n", "# evaluate", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "name", "in", "config", "[", "'trainer'", "]", "[", "'evaluate'", "]", ":", "\n", "                ", "if", "config", "[", "'trainer'", "]", "[", "'evaluation_frequency'", "]", "[", "name", "]", "==", "-", "1", "and", "epoch", "<", "max_epochs", "-", "1", ":", "\n", "                    ", "continue", "\n", "", "elif", "config", "[", "'trainer'", "]", "[", "'evaluation_frequency'", "]", "[", "name", "]", ">", "1", ":", "\n", "                    ", "if", "epoch", "<", "max_epochs", "-", "1", "and", "epoch", "%", "config", "[", "'trainer'", "]", "[", "'evaluation_frequency'", "]", "[", "name", "]", "!=", "0", ":", "\n", "                        ", "continue", "\n", "\n", "", "", "if", "epoch", "<", "max_epochs", "-", "1", ":", "\n", "# predict_file = '{}/{}_temp.jsonl'.format(config['path'], name) if config['trainer'][", "\n", "#     'write-predictions'] else None", "\n", "# (kzaporoj) - added the log of results only for the last epoch to not log too much:", "\n", "# for some reason the jobs tend to fail when writing to _temp.jsonl", "\n", "                    ", "predict_file", "=", "None", "\n", "", "else", ":", "\n", "                    ", "predict_file", "=", "'{}/{}.jsonl'", ".", "format", "(", "config", "[", "'path'", "]", ",", "name", ")", "if", "config", "[", "'trainer'", "]", "[", "\n", "'write-predictions'", "]", "else", "None", "\n", "\n", "", "tb_logger_evaluate", "=", "tb_logger_train", "if", "name", "==", "'train'", "else", "tb_logger_test", "\n", "do_evaluate", "(", "model", ",", "datasets", "[", "name", "]", ",", "metrics", "[", "name", "]", ",", "batch_size", ",", "predict_file", ",", "tb_logger_evaluate", ",", "epoch", ",", "\n", "config", "=", "config", ")", "\n", "# do_evaluate(model, datasets[name], metrics[name], 1, predict_file, tb_logger, epoch)", "\n", "\n", "", "", "if", "swa", "and", "epoch", ">=", "swa_start", ":", "\n", "            ", "optimizer", ".", "swap_swa_sgd", "(", ")", "\n", "\n", "", "", "while", "True", ":", "\n", "        ", "try", ":", "\n", "            ", "if", "config", "[", "'optimizer'", "]", "[", "'write-last-model'", "]", ":", "\n", "                ", "model", ".", "write_model", "(", "'{}/last.model'", ".", "format", "(", "config", "[", "'path'", "]", ")", ")", "\n", "break", "\n", "", "", "except", ":", "\n", "            ", "print", "(", "\"ERROR: failed to write model to disk\"", ")", "\n", "time", ".", "sleep", "(", "60", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.traintool.test": [[660, 697], ["torch.device", "model.to.to", "model.to.collate_func", "config[].get", "print", "model.to.load_model", "model.to.create_metrics", "print", "torch.utils.data.DataLoader", "model.to.eval", "enumerate", "m.step", "tqdm.tqdm", "model.to.forward", "obj.item", "m.print"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.collate_func", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.load_model", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.create_metrics", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.step", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.relbasic.ModuleRelBasic.forward", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "", "", "def", "test", "(", "model", ",", "datasets", ",", "config", ")", ":", "\n", "    ", "device", "=", "torch", ".", "device", "(", "settings", ".", "device", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "collate_fn", "=", "model", ".", "collate_func", "(", "datasets", ",", "device", ")", "\n", "max_epochs", "=", "config", "[", "'optimizer'", "]", "[", "'iters'", "]", "\n", "batch_size", "=", "config", "[", "'optimizer'", "]", "[", "'batch_size'", "]", "\n", "\n", "filename", "=", "config", "[", "'optimizer'", "]", ".", "get", "(", "'model'", ",", "None", ")", "\n", "if", "filename", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"Initializing model {}\"", ".", "format", "(", "filename", ")", ")", "\n", "model", ".", "load_model", "(", "config", "[", "'path'", "]", "+", "'/'", "+", "filename", ",", "config", "[", "'model'", "]", ")", "\n", "\n", "# train = DataLoader(datasets[config['trainer']['train']], collate_fn=collate_fn, batch_size=batch_size, shuffle=True)", "\n", "#", "\n", "# name2progress = {name: {'name': name} for name in config['trainer']['evaluate']}", "\n", "\n", "", "metrics", "=", "{", "name", ":", "model", ".", "create_metrics", "(", ")", "for", "name", "in", "config", "[", "'trainer'", "]", "[", "'evaluate'", "]", "}", "\n", "\n", "# evaluate", "\n", "for", "name", "in", "config", "[", "'trainer'", "]", "[", "'evaluate'", "]", ":", "\n", "        ", "print", "(", "\"Start evaluating\"", ",", "name", ")", "\n", "\n", "loader", "=", "DataLoader", "(", "datasets", "[", "name", "]", ",", "collate_fn", "=", "collate_fn", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "for", "m", "in", "metrics", "[", "name", "]", ":", "\n", "            ", "m", ".", "step", "(", ")", "\n", "\n", "", "total_obj", "=", "0", "\n", "for", "i", ",", "minibatch", "in", "enumerate", "(", "tqdm", "(", "loader", ")", ")", ":", "\n", "            ", "obj", ",", "outputs", "=", "model", ".", "forward", "(", "**", "minibatch", ",", "metrics", "=", "metrics", "[", "name", "]", ")", "\n", "total_obj", "+=", "obj", ".", "item", "(", ")", "\n", "\n", "", "for", "m", "in", "metrics", "[", "name", "]", ":", "\n", "            ", "m", ".", "print", "(", "name", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.traintool.predict_dwie_linker": [[699, 751], ["torch.device", "model.to.to", "print", "model.to.collate_func", "config[].get", "model.to.to", "print", "print", "torch.utils.data.DataLoader", "model.to.eval", "hasattr", "hasattr", "model.to.load_model", "model.to.load_model", "model.to.begin_epoch", "open", "enumerate", "model.to.end_epoch", "os.path.join().format", "tqdm.tqdm", "model.to.predict", "json.dump", "file.write", "os.path.join"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.collate_func", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.load_model", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.load_model", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.ncr3.NCR3.begin_epoch", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert.CoreflinkerSpanBert.end_epoch", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.predict", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.write"], ["", "", "", "def", "predict_dwie_linker", "(", "model", ",", "datasets", ",", "config", ",", "output_path", ")", ":", "\n", "    ", "\"\"\"\n    Originally, this function is just a copy-paste of predict(model,datasets,config) function (see below), the idea\n    is to specifically test is with exported conll aida dataset in end-to-end setting.\n    :param model:\n    :param datasets:\n    :param config:\n    :return:\n    \"\"\"", "\n", "device", "=", "torch", ".", "device", "(", "settings", ".", "device", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "print", "(", "'device to be assigned to collate_func: '", ",", "device", ")", "\n", "collate_fn", "=", "model", ".", "collate_func", "(", "datasets", ",", "device", ")", "\n", "batch_size", "=", "config", "[", "'optimizer'", "]", "[", "'batch_size'", "]", "\n", "\n", "filename", "=", "config", "[", "'optimizer'", "]", ".", "get", "(", "'model'", ",", "None", ")", "\n", "if", "filename", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"Initializing model {}\"", ".", "format", "(", "filename", ")", ")", "\n", "if", "settings", ".", "device", "==", "'cpu'", ":", "\n", "# model.load_model('{}/{}'.format(config['path'], filename), config['model'], load_word_embeddings=False)", "\n", "            ", "model", ".", "load_model", "(", "'{}/{}'", ".", "format", "(", "config", "[", "'path'", "]", ",", "filename", ")", ",", "to_cpu", "=", "True", ",", "load_word_embeddings", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "model", ".", "load_model", "(", "'{}/{}'", ".", "format", "(", "config", "[", "'path'", "]", ",", "filename", ")", ",", "load_word_embeddings", "=", "False", ")", "\n", "\n", "", "", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "output_config", "=", "{", "\n", "\"output_content\"", ":", "True", ",", "\n", "\"_output_content\"", ":", "\"Whether the 'content' is added to prediction json file.\"", ",", "\n", "\"output_tokens\"", ":", "True", ",", "\n", "\"_output_tokens\"", ":", "\"Whether the 'tokens' are added to prediction json file. \"", "\n", "}", "\n", "\n", "# evaluate", "\n", "for", "name", "in", "config", "[", "'trainer'", "]", "[", "'evaluate'", "]", ":", "\n", "        ", "print", "(", "\"Start evaluating\"", ",", "name", ")", "\n", "\n", "loader", "=", "DataLoader", "(", "datasets", "[", "name", "]", ",", "collate_fn", "=", "collate_fn", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "if", "hasattr", "(", "model", ",", "'begin_epoch'", ")", ":", "\n", "            ", "model", ".", "begin_epoch", "(", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_path", ",", "'{}.jsonl'", ")", ".", "format", "(", "name", ")", ",", "'w'", ")", "as", "file", ":", "\n", "            ", "for", "i", ",", "minibatch", "in", "enumerate", "(", "tqdm", "(", "loader", ")", ")", ":", "\n", "                ", "_", ",", "predictions", "=", "model", ".", "predict", "(", "**", "minibatch", ",", "output_config", "=", "output_config", ")", "\n", "for", "pred", "in", "predictions", ":", "\n", "                    ", "json", ".", "dump", "(", "pred", ",", "file", ")", "\n", "file", ".", "write", "(", "'\\n'", ")", "\n", "\n", "", "", "", "if", "hasattr", "(", "model", ",", "'end_epoch'", ")", ":", "\n", "            ", "model", ".", "end_epoch", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.traintool.predict": [[753, 785], ["torch.device", "model.to.to", "model.to.collate_func", "config[].get", "print", "model.to.load_model", "print", "torch.utils.data.DataLoader", "model.to.eval", "hasattr", "hasattr", "model.to.begin_epoch", "open", "enumerate", "model.to.end_epoch", "tqdm.tqdm", "model.to.predict", "json.dump", "file.write"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.collate_func", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.load_model", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.ncr3.NCR3.begin_epoch", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert.CoreflinkerSpanBert.end_epoch", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.predict", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.write"], ["", "", "", "def", "predict", "(", "model", ",", "datasets", ",", "config", ")", ":", "\n", "    ", "device", "=", "torch", ".", "device", "(", "settings", ".", "device", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "collate_fn", "=", "model", ".", "collate_func", "(", "datasets", ",", "device", ")", "\n", "batch_size", "=", "config", "[", "'optimizer'", "]", "[", "'batch_size'", "]", "\n", "\n", "filename", "=", "config", "[", "'optimizer'", "]", ".", "get", "(", "'model'", ",", "None", ")", "\n", "if", "filename", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"Initializing model {}\"", ".", "format", "(", "filename", ")", ")", "\n", "model", ".", "load_model", "(", "'{}/{}'", ".", "format", "(", "config", "[", "'path'", "]", ",", "filename", ")", ",", "config", "[", "'model'", "]", ")", "\n", "\n", "# evaluate", "\n", "", "for", "name", "in", "config", "[", "'trainer'", "]", "[", "'evaluate'", "]", ":", "\n", "        ", "print", "(", "\"Start evaluating\"", ",", "name", ")", "\n", "\n", "loader", "=", "DataLoader", "(", "datasets", "[", "name", "]", ",", "collate_fn", "=", "collate_fn", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "if", "hasattr", "(", "model", ",", "'begin_epoch'", ")", ":", "\n", "            ", "model", ".", "begin_epoch", "(", ")", "\n", "\n", "", "with", "open", "(", "'predictions.json'", ",", "'w'", ")", "as", "file", ":", "\n", "            ", "for", "i", ",", "minibatch", "in", "enumerate", "(", "tqdm", "(", "loader", ")", ")", ":", "\n", "                ", "_", ",", "predictions", "=", "model", ".", "predict", "(", "**", "minibatch", ")", "\n", "for", "pred", "in", "predictions", ":", "\n", "                    ", "json", ".", "dump", "(", "pred", ",", "file", ")", "\n", "file", ".", "write", "(", "'\\n'", ")", "\n", "\n", "", "", "", "if", "hasattr", "(", "model", ",", "'end_epoch'", ")", ":", "\n", "            ", "model", ".", "end_epoch", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.traintool.load_model": [[787, 824], ["linker.create_dictionaries", "linker.create_model", "linker.create_linking_candidates", "datass.dataset.create_datasets"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.linker.create_dictionaries", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_squad.create_model", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.linker.create_linking_candidates", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dataset.create_datasets"], ["", "", "", "def", "load_model", "(", "config", ",", "training", "=", "False", ",", "load_datasets_from_config", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    creates the model from config, it can be either used to train it later, or to load the parameters of a saved model\n    using state_dict() (https://pytorch.org/tutorials/beginner/saving_loading_models.html) .\n    when using state_dict() to load saved model, the static embeddings are not loaded, only the trainable parameters are\n    loaded, so it is necessary to use this method before the state_dict().\n\n    :param config:\n    :return:\n    \"\"\"", "\n", "# TODO, 26/11/2020", "\n", "\n", "# dictionaries = create_dictionaries(config, args.mode == 'train')", "\n", "dictionaries", "=", "create_dictionaries", "(", "config", ",", "training", ")", "\n", "linking_candidates", "=", "None", "\n", "datasets", "=", "None", "\n", "if", "'linking_candidates'", "in", "config", ":", "\n", "# this also adds respective entries to the dictionary", "\n", "        ", "linking_candidates", "=", "create_linking_candidates", "(", "config", "[", "'linking_candidates'", "]", ",", "dictionaries", "[", "'entities'", "]", ")", "\n", "# create_linking_candidates(config['linking_candidates'], dictionaries['entities'])", "\n", "", "if", "load_datasets_from_config", ":", "\n", "        ", "datasets", ",", "data", ",", "evaluate", "=", "create_datasets", "(", "config", ",", "dictionaries", ",", "args", ".", "fold", ",", "linking_candidates", ")", "\n", "", "model", ",", "parameters", "=", "create_model", "(", "config", ",", "dictionaries", ")", "\n", "\n", "# dictionaries = loaded_model_dict['dictionaries']", "\n", "# datasets = loaded_model_dict['datasets']", "\n", "# model = loaded_model_dict['model']", "\n", "\n", "# return model, parameters, linking_candidates, dictionaries", "\n", "to_ret", "=", "{", "\n", "'dictionaries'", ":", "dictionaries", ",", "\n", "'datasets'", ":", "datasets", ",", "\n", "'model'", ":", "model", ",", "\n", "'parameters'", ":", "parameters", ",", "\n", "'linking_candidates'", ":", "linking_candidates", "\n", "}", "\n", "return", "to_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.main_bert_processor_dwie.JsonBertDocument.__init__": [[27, 65], ["list", "list", "list", "list"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "json_doc", ",", "args", ")", ":", "\n", "        ", "self", ".", "doc_key", "=", "json_doc", "[", "'id'", "]", "\n", "self", ".", "content", "=", "json_doc", "[", "'content'", "]", "\n", "self", ".", "word_tokenization", "=", "json_doc", "[", "'tokenization'", "]", "\n", "self", ".", "tags", "=", "json_doc", "[", "'tags'", "]", "\n", "self", ".", "concepts", "=", "json_doc", "[", "'concepts'", "]", "\n", "self", ".", "relations", "=", "json_doc", "[", "'relations'", "]", "\n", "\n", "self", ".", "tokens", "=", "[", "]", "\n", "\n", "# begin and end of tokens (NOT BERT subtokens, just word tokens)", "\n", "self", ".", "begin_token", "=", "[", "]", "\n", "self", ".", "end_token", "=", "[", "]", "\n", "\n", "# Linear list mapped to subtokens without CLS, SEP", "\n", "self", ".", "subtokens", "=", "[", "]", "\n", "self", ".", "subtoken_map", "=", "[", "]", "\n", "self", ".", "token_end", "=", "[", "]", "\n", "self", ".", "sentence_end", "=", "[", "]", "\n", "self", ".", "info", "=", "[", "]", "# Only non-none for the first subtoken of each word", "\n", "\n", "self", ".", "subtokens_begin", "=", "[", "]", "\n", "self", ".", "subtokens_end", "=", "[", "]", "\n", "\n", "# Linear list mapped to subtokens with CLS, SEP", "\n", "self", ".", "sentence_map", "=", "[", "]", "\n", "self", ".", "mentions", "=", "[", "]", "\n", "\n", "# Segments (mapped to subtokens with CLS, SEP)", "\n", "self", ".", "segments", "=", "[", "]", "\n", "self", ".", "segment_subtoken_map", "=", "[", "]", "\n", "# self.segment_info = []  # Only non-none for the first subtoken of each word", "\n", "\n", "# self.spans_to_candidate_links = dict()  # all the spans pointing to candidates", "\n", "self", ".", "all_spans", "=", "list", "(", ")", "# all the spans pointing to candidates", "\n", "self", ".", "all_spans_candidates", "=", "list", "(", ")", "# candidates for the spans", "\n", "self", ".", "all_spans_candidates_scores", "=", "list", "(", ")", "# the scores for each of the candidates", "\n", "self", ".", "all_spans_candidates_targets", "=", "list", "(", ")", "# the target ids of the candidate list for each of the spans", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.main_bert_processor_dwie.JsonBertDocument.convert_to_json": [[70, 105], ["modules.bert_preprocessing.get_sentence_map", "modules.bert_preprocessing.flatten", "len", "modules.bert_preprocessing.flatten", "len", "len"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.bert_preprocessing.get_sentence_map", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.bert_preprocessing.flatten", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.bert_preprocessing.flatten"], ["", "def", "convert_to_json", "(", "self", ")", ":", "\n", "        ", "\"\"\" Returns the JSON in DWIE format but with BERT sub-tokenization \"\"\"", "\n", "\n", "sentence_map", "=", "get_sentence_map", "(", "self", ".", "segments", ",", "self", ".", "sentence_end", ")", "\n", "subtoken_map", "=", "flatten", "(", "self", ".", "segment_subtoken_map", ")", "\n", "\n", "num_all_seg_tokens", "=", "len", "(", "flatten", "(", "self", ".", "segments", ")", ")", "\n", "assert", "num_all_seg_tokens", "==", "len", "(", "subtoken_map", ")", "\n", "assert", "num_all_seg_tokens", "==", "len", "(", "sentence_map", ")", "\n", "\n", "#", "\n", "return", "{", "\n", "'id'", ":", "self", ".", "doc_key", ",", "\n", "'content'", ":", "self", ".", "content", ",", "\n", "'tags'", ":", "self", ".", "tags", ",", "\n", "'begin_token'", ":", "self", ".", "begin_token", ",", "\n", "'end_token'", ":", "self", ".", "end_token", ",", "\n", "'word_tokenization'", ":", "self", ".", "tokens", ",", "\n", "# 'word_tokenization': self.word_tokenization,", "\n", "'bert_tokenization'", ":", "self", ".", "subtokens", ",", "\n", "# TODO: check if the following structure is necessary", "\n", "# {'subtokens': self.subtokens,", "\n", "#  'begin': [],", "\n", "#  'end': []", "\n", "#  },", "\n", "'bert_segments'", ":", "self", ".", "segments", ",", "\n", "'mentions'", ":", "self", ".", "mentions", ",", "\n", "'concepts'", ":", "self", ".", "concepts", ",", "\n", "'relations'", ":", "self", ".", "relations", ",", "\n", "'sentence_map'", ":", "sentence_map", ",", "\n", "'subtoken_map'", ":", "subtoken_map", ",", "\n", "'all_spans'", ":", "self", ".", "all_spans", ",", "\n", "'all_spans_candidates'", ":", "self", ".", "all_spans_candidates", ",", "\n", "'all_spans_candidates_scores'", ":", "self", ".", "all_spans_candidates_scores", ",", "\n", "'all_spans_candidates_target'", ":", "self", ".", "all_spans_candidates_targets", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.main_bert_processor_dwie.BertProcessor.__init__": [[152, 159], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "linking_candidates", ",", "links_dictionary", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "linking_candidates", ":", "Dict", "=", "linking_candidates", "\n", "self", ".", "documents", ":", "List", "[", "Dict", "]", "=", "[", "]", "\n", "self", ".", "tokenizer", ":", "BertTokenizer", "=", "None", "\n", "self", ".", "links_dictionary", "=", "links_dictionary", "\n", "self", ".", "speaker_separator", "=", "'[SPL]'", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.main_bert_processor_dwie.BertProcessor.split_into_segments": [[160, 202], ["dict", "len", "min", "range", "bert_doc.segments.append", "bert_doc.segment_subtoken_map.append", "len", "logger.info", "min", "modules.bert_preprocessing.flatten", "max", "len", "logger.error", "Exception", "dict.values", "len"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.bert_preprocessing.flatten"], ["", "def", "split_into_segments", "(", "self", ",", "bert_doc", ":", "JsonBertDocument", ",", "sentence_end", ",", "token_end", ")", ":", "\n", "        ", "\"\"\" Split into segments.\n            Add subtokens, subtoken_map, info for each segment; add CLS, SEP in the segment subtokens\n            Input document_state: tokens, subtokens, token_end, sentence_end, utterance_end, subtoken_map, info\n        \"\"\"", "\n", "curr_idx", "=", "0", "# Index for subtokens", "\n", "prev_token_idx", "=", "0", "\n", "map_subtoks_to_segmented_subtoks", "=", "dict", "(", ")", "\n", "offset", "=", "1", "\n", "while", "curr_idx", "<", "len", "(", "bert_doc", ".", "subtokens", ")", ":", "\n", "# Try to split at a sentence end point", "\n", "            ", "end_idx", "=", "min", "(", "curr_idx", "+", "self", ".", "args", ".", "max_seg_len", "-", "1", "-", "2", ",", "len", "(", "bert_doc", ".", "subtokens", ")", "-", "1", ")", "# Inclusive", "\n", "while", "end_idx", ">=", "curr_idx", "and", "not", "sentence_end", "[", "end_idx", "]", ":", "\n", "                ", "end_idx", "-=", "1", "\n", "", "if", "end_idx", "<", "curr_idx", ":", "\n", "                ", "logger", ".", "info", "(", "f'{bert_doc.doc_key}: no sentence end found; split at token end'", ")", "\n", "# If no sentence end point, try to split at token end point", "\n", "end_idx", "=", "min", "(", "curr_idx", "+", "self", ".", "args", ".", "max_seg_len", "-", "1", "-", "2", ",", "len", "(", "bert_doc", ".", "subtokens", ")", "-", "1", ")", "\n", "while", "end_idx", ">=", "curr_idx", "and", "not", "token_end", "[", "end_idx", "]", ":", "\n", "                    ", "end_idx", "-=", "1", "\n", "", "if", "end_idx", "<", "curr_idx", ":", "\n", "                    ", "logger", ".", "error", "(", "'Cannot split valid segment: no sentence end or token end'", ")", "\n", "raise", "Exception", "(", "'Cannot split valid segment: no sentence end or token end'", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "curr_idx", ",", "end_idx", "+", "1", ")", ":", "\n", "                ", "map_subtoks_to_segmented_subtoks", "[", "i", "]", "=", "i", "+", "offset", "\n", "\n", "", "segment", "=", "[", "self", ".", "tokenizer", ".", "cls_token", "]", "+", "bert_doc", ".", "subtokens", "[", "curr_idx", ":", "end_idx", "+", "1", "]", "+", "[", "self", ".", "tokenizer", ".", "sep_token", "]", "\n", "\n", "offset", "+=", "2", "\n", "bert_doc", ".", "segments", ".", "append", "(", "segment", ")", "\n", "\n", "subtoken_map", "=", "bert_doc", ".", "subtoken_map", "[", "curr_idx", ":", "end_idx", "+", "1", "]", "\n", "bert_doc", ".", "segment_subtoken_map", ".", "append", "(", "[", "prev_token_idx", "]", "+", "subtoken_map", "+", "[", "subtoken_map", "[", "-", "1", "]", "]", ")", "\n", "\n", "# bert_doc.segment_info.append([None] + bert_doc.info[curr_idx: end_idx + 1] + [None])", "\n", "\n", "curr_idx", "=", "end_idx", "+", "1", "\n", "prev_token_idx", "=", "subtoken_map", "[", "-", "1", "]", "\n", "", "assert", "len", "(", "flatten", "(", "bert_doc", ".", "segments", ")", ")", "==", "max", "(", "map_subtoks_to_segmented_subtoks", ".", "values", "(", ")", ")", "+", "2", "\n", "return", "map_subtoks_to_segmented_subtoks", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.main_bert_processor_dwie.BertProcessor.get_linker_candidates_all_spans": [[203, 251], ["enumerate", "input_content[].strip", "span_candidates.append", "span_scores.append", "candidates.append", "candidates_scores.append", "candidates.append", "candidates_scores.append", "main_bert_processor_dwie.BertProcessor.links_dictionary.lookup", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup"], ["", "def", "get_linker_candidates_all_spans", "(", "self", ",", "input_content", ",", "all_spans", ",", "begin", ",", "end", ",", "span_mask", ")", ":", "\n", "# no linking for span: empty candidate list", "\n", "        ", "lc", "=", "self", ".", "linking_candidates", "\n", "# if self.train_linker_tag is None or self.train_linker_tag in tags:", "\n", "candidates", "=", "[", "]", "\n", "candidates_scores", "=", "[", "]", "\n", "for", "idx_span", ",", "curr_span", "in", "enumerate", "(", "all_spans", ")", ":", "\n", "            ", "if", "span_mask", "[", "idx_span", "]", "<", "0.9", ":", "# span_mask to not evaluate invalid spans (outside content boundaries)", "\n", "                ", "candidates", ".", "append", "(", "torch", ".", "tensor", "(", "[", "]", ",", "dtype", "=", "torch", ".", "int", ")", ")", "\n", "candidates_scores", ".", "append", "(", "torch", ".", "tensor", "(", "[", "]", ",", "dtype", "=", "torch", ".", "float", ")", ")", "\n", "continue", "\n", "\n", "", "span_text", "=", "input_content", "[", "begin", "[", "curr_span", "[", "0", "]", "]", ":", "end", "[", "curr_span", "[", "1", "]", "]", "]", ".", "strip", "(", ")", "\n", "if", "span_text", "in", "lc", ":", "\n", "                ", "span_candidates", "=", "lc", "[", "span_text", "]", "[", "'candidates'", "]", "\n", "span_scores", "=", "lc", "[", "span_text", "]", "[", "'scores'", "]", "\n", "if", "self", ".", "args", ".", "max_nr_candidates", "is", "not", "None", "and", "self", ".", "args", ".", "max_nr_candidates", ">", "-", "1", ":", "\n", "                    ", "span_candidates", "=", "span_candidates", "[", ":", "self", ".", "args", ".", "max_nr_candidates", "]", "\n", "span_scores", "=", "span_scores", "[", ":", "self", ".", "args", ".", "max_nr_candidates", "]", "\n", "", "", "else", ":", "\n", "                ", "span_candidates", "=", "[", "]", "# torch.tensor(empty_candidates, dtype=torch.int32)", "\n", "span_scores", "=", "[", "]", "# torch.tensor(empty_cand_scores, dtype=torch.float)", "\n", "\n", "", "span_candidates", ".", "append", "(", "self", ".", "links_dictionary", ".", "lookup", "(", "'NILL'", ")", ")", "\n", "span_scores", ".", "append", "(", "1.0", ")", "\n", "# = torch.cat((span_candidates, torch.tensor([self.links_dictionary.lookup('NILL')],", "\n", "#                                 dtype=torch.int32)))", "\n", "# span_scores = torch.cat((span_scores, torch.tensor([1.0])))", "\n", "\n", "# span_candidates = torch.cat((span_candidates, torch.tensor([self.links_dictionary.lookup('NONE')],", "\n", "#                                                            dtype=torch.int32)))", "\n", "# span_scores = torch.cat((span_scores, torch.tensor([1.0])))", "\n", "\n", "# span_candidates.append(self.links_dictionary.lookup('NONE'))", "\n", "# span_scores.append(1.0)", "\n", "\n", "# span_candidates = torch.cat((span_candidates, torch.tensor([self.links_dictionary.lookup('NILL')],", "\n", "#                                                            dtype=torch.int32)))", "\n", "# span_scores = torch.cat((span_scores, torch.tensor([1.0])))", "\n", "#", "\n", "# span_candidates = torch.cat((span_candidates, torch.tensor([self.links_dictionary.lookup('NONE')],", "\n", "#                                                            dtype=torch.int32)))", "\n", "# span_scores = torch.cat((span_scores, torch.tensor([1.0])))", "\n", "\n", "candidates", ".", "append", "(", "span_candidates", ")", "\n", "candidates_scores", ".", "append", "(", "span_scores", ")", "\n", "\n", "", "return", "candidates", ",", "candidates_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.main_bert_processor_dwie.BertProcessor.get_linker_targets_all_spans": [[252, 284], ["dict", "enumerate", "main_bert_processor_dwie.BertProcessor.links_dictionary.add", "targets.append", "target_index.item", "target_index.size"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add"], ["", "def", "get_linker_targets_all_spans", "(", "self", ",", "data", ",", "all_spans", ",", "all_spans_candidates", ")", ":", "\n", "        ", "\"\"\"\n        \"\"\"", "\n", "span_to_gold", "=", "dict", "(", ")", "\n", "for", "mention", "in", "data", "[", "'mentions'", "]", ":", "\n", "# if is_link_trainable(mention):", "\n", "# entity_concept = data['concepts'][mention['concept']['concept']]", "\n", "            ", "entity_concept", "=", "data", "[", "'concepts'", "]", "[", "mention", "[", "'concept'", "]", "]", "\n", "if", "'link'", "in", "entity_concept", ":", "\n", "                ", "mention_correct", "=", "entity_concept", "[", "'link'", "]", "\n", "mention_span", "=", "(", "mention", "[", "'subtoken_begin'", "]", ",", "mention", "[", "'subtoken_end'", "]", ")", "\n", "span_to_gold", "[", "mention_span", "]", "=", "mention_correct", "\n", "\n", "", "", "targets", "=", "[", "]", "\n", "for", "span_idx", ",", "curr_span", "in", "enumerate", "(", "all_spans", ")", ":", "\n", "            ", "if", "curr_span", "not", "in", "span_to_gold", ":", "\n", "# correct_link = 'NONE'", "\n", "# (16/04/2021) after talk with Johannes, the correct is NILL here.", "\n", "                ", "correct_link", "=", "'NILL'", "\n", "", "else", ":", "\n", "                ", "correct_link", "=", "span_to_gold", "[", "curr_span", "]", "\n", "\n", "", "correct_link_id", "=", "self", ".", "links_dictionary", ".", "add", "(", "correct_link", ")", "\n", "target_index", "=", "(", "all_spans_candidates", "[", "span_idx", "]", "==", "correct_link_id", ")", ".", "nonzero", "(", ")", "\n", "if", "target_index", ".", "size", "(", ")", "[", "0", "]", "==", "0", ":", "\n", "                ", "index", "=", "-", "1", "\n", "", "else", ":", "\n", "                ", "index", "=", "target_index", ".", "item", "(", ")", "\n", "\n", "", "targets", ".", "append", "(", "index", ")", "\n", "\n", "", "return", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.main_bert_processor_dwie.BertProcessor.get_document": [[285, 454], ["main_bert_processor_dwie.JsonBertDocument", "dict", "dict", "enumerate", "len", "modules.ner.spanner.create_all_spans", "torch.tensor", "span_mask.view", "torch.arange().unsqueeze", "main_bert_processor_dwie.BertProcessor.get_linker_candidates_all_spans", "span_masked_scores[].tolist", "main_bert_processor_dwie.BertProcessor.split_into_segments", "zip", "main_bert_processor_dwie.BertProcessor.get_linker_targets_all_spans", "bert_doc.convert_to_json", "modules.bert_preprocessing.normalize_word", "main_bert_processor_dwie.BertProcessor.tokenizer.tokenize", "bert_doc.tokens.append", "enumerate", "len", "len", "span_mask.size", "span_mask.size", "span_mask.size", "modules.utils.misc.indices_to_spans", "torch.tensor", "t.tolist", "enumerate", "enumerate", "bert_doc.subtokens.append", "bert_doc.subtoken_map.append", "torch.arange", "torch.tensor", "logger.warning", "bert_doc.sentence_end.append", "torch.tensor.unsqueeze().unsqueeze", "len", "bert_doc.sentence_end.append", "str", "logger.warning", "logger.warning", "spans_data.append", "spans_data.append", "len", "len", "[].isupper", "bert_doc.sentence_end.append", "torch.tensor.unsqueeze", "[].isupper", "bert_doc.sentence_end.append", "bert_doc.sentence_end.append", "len", "str", "str", "len"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.create_all_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.AbstractDataReader.get_linker_candidates_all_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.bert_preprocessing.split_into_segments", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.AbstractDataReader.get_linker_targets_all_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.convert_to_json", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.bert_preprocessing.normalize_word", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.WordpieceTokenizer.tokenize", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.indices_to_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist"], ["", "def", "get_document", "(", "self", ",", "json_doc", ")", "->", "Dict", ":", "\n", "        ", "\"\"\" Process raw input to finalized documents \"\"\"", "\n", "bert_doc", ":", "JsonBertDocument", "=", "JsonBertDocument", "(", "json_doc", ",", "args", "=", "self", ".", "args", ")", "\n", "word_idx", "=", "-", "1", "\n", "\n", "begin", "=", "json_doc", "[", "'tokenization'", "]", "[", "'begin'", "]", "\n", "end", "=", "json_doc", "[", "'tokenization'", "]", "[", "'end'", "]", "\n", "\n", "bert_doc", ".", "begin_token", "=", "begin", "\n", "bert_doc", ".", "end_token", "=", "end", "\n", "\n", "begin_to_index", "=", "{", "pos", ":", "idx", "for", "idx", ",", "pos", "in", "enumerate", "(", "begin", ")", "}", "\n", "end_to_index", "=", "{", "pos", ":", "idx", "for", "idx", ",", "pos", "in", "enumerate", "(", "end", ")", "}", "\n", "\n", "word_idx_to_first_subtoken_idx", "=", "dict", "(", ")", "\n", "word_idx_to_last_subtoken_idx", "=", "dict", "(", ")", "\n", "subtoken_idx", "=", "0", "\n", "# Build up documents", "\n", "for", "idx_token", ",", "token", "in", "enumerate", "(", "json_doc", "[", "'tokenization'", "]", "[", "'tokens'", "]", ")", ":", "\n", "            ", "word_idx", "+=", "1", "\n", "word", "=", "normalize_word", "(", "token", ")", "\n", "subtokens", "=", "self", ".", "tokenizer", ".", "tokenize", "(", "word", ")", "\n", "bert_doc", ".", "tokens", ".", "append", "(", "word", ")", "\n", "bert_doc", ".", "token_end", "+=", "[", "False", "]", "*", "(", "len", "(", "subtokens", ")", "-", "1", ")", "+", "[", "True", "]", "\n", "for", "idx", ",", "subtoken", "in", "enumerate", "(", "subtokens", ")", ":", "\n", "                ", "bert_doc", ".", "subtokens", ".", "append", "(", "subtoken", ")", "\n", "# info = None if idx != 0 else len(subtokens)", "\n", "if", "idx", "==", "0", ":", "\n", "                    ", "word_idx_to_first_subtoken_idx", "[", "word_idx", "]", "=", "subtoken_idx", "\n", "", "word_idx_to_last_subtoken_idx", "[", "word_idx", "]", "=", "subtoken_idx", "\n", "# bert_doc.info.append(info)", "\n", "if", "idx_token", ">=", "len", "(", "json_doc", "[", "'tokenization'", "]", "[", "'tokens'", "]", ")", "-", "1", "and", "idx", ">=", "len", "(", "subtokens", ")", "-", "1", ":", "\n", "# the last subtoken in the document always is the end of sentence by definition", "\n", "                    ", "bert_doc", ".", "sentence_end", ".", "append", "(", "True", ")", "\n", "", "elif", "token", "in", "{", "'.'", ",", "'?'", ",", "'!'", "}", ":", "\n", "# the dot is the end of sentence as long as the next word starts with alphabetical uppercase", "\n", "# so no decimal numbers as 99.1 are splitted in sentences.", "\n", "                    ", "if", "idx_token", "<", "len", "(", "json_doc", "[", "'tokenization'", "]", "[", "'tokens'", "]", ")", "-", "1", "and", "json_doc", "[", "'tokenization'", "]", "[", "'tokens'", "]", "[", "idx_token", "+", "1", "]", "[", "0", "]", ".", "isupper", "(", ")", ":", "\n", "                        ", "bert_doc", ".", "sentence_end", ".", "append", "(", "True", ")", "\n", "", "elif", "idx_token", "<", "len", "(", "json_doc", "[", "'tokenization'", "]", "[", "'tokens'", "]", ")", "-", "2", "and", "json_doc", "[", "'tokenization'", "]", "[", "'tokens'", "]", "[", "idx_token", "+", "2", "]", "[", "0", "]", ".", "isupper", "(", ")", "and", "(", "json_doc", "[", "'tokenization'", "]", "[", "'tokens'", "]", "[", "idx_token", "+", "1", "]", "==", "'\\''", "or", "\n", "json_doc", "[", "'tokenization'", "]", "[", "'tokens'", "]", "[", "idx_token", "+", "1", "]", "==", "'\"'", ")", ":", "\n", "                        ", "bert_doc", ".", "sentence_end", ".", "append", "(", "True", ")", "\n", "", "else", ":", "\n", "                        ", "bert_doc", ".", "sentence_end", ".", "append", "(", "False", ")", "\n", "", "", "else", ":", "\n", "# in all other cases, it is not the end of sentence", "\n", "                    ", "bert_doc", ".", "sentence_end", ".", "append", "(", "False", ")", "\n", "", "bert_doc", ".", "subtoken_map", ".", "append", "(", "word_idx", ")", "\n", "subtoken_idx", "+=", "1", "\n", "\n", "", "", "assert", "len", "(", "bert_doc", ".", "subtokens", ")", "==", "len", "(", "bert_doc", ".", "sentence_end", ")", "\n", "# now maps all the mentions to the bert subtoken positions", "\n", "for", "mention", "in", "json_doc", "[", "'mentions'", "]", ":", "\n", "            ", "token_begin", "=", "begin_to_index", "[", "mention", "[", "'begin'", "]", "]", "\n", "subtoken_begin", "=", "word_idx_to_first_subtoken_idx", "[", "token_begin", "]", "\n", "mention", "[", "'subtoken_begin'", "]", "=", "subtoken_begin", "\n", "token_end", "=", "end_to_index", "[", "mention", "[", "'end'", "]", "]", "\n", "subtoken_end", "=", "word_idx_to_last_subtoken_idx", "[", "token_end", "]", "\n", "mention", "[", "'subtoken_end'", "]", "=", "subtoken_end", "\n", "\n", "if", "'candidates'", "in", "mention", ":", "\n", "# since it is end-to-end, no need to keep candidates here ; they will be kept as span candidates for", "\n", "# all the document in a separate dict (see below)", "\n", "                ", "del", "mention", "[", "'candidates'", "]", "\n", "del", "mention", "[", "'scores'", "]", "\n", "\n", "# assign 'NILL' to the concepts with link in Null", "\n", "", "", "for", "concept", "in", "json_doc", "[", "'concepts'", "]", ":", "\n", "            ", "if", "'link'", "in", "concept", "and", "concept", "[", "'link'", "]", "is", "None", ":", "\n", "                ", "concept", "[", "'link'", "]", "=", "'NILL'", "\n", "\n", "# now produces all the candidates for the content and links to span begin and span end on subtoken level", "\n", "", "", "n_tokens", "=", "len", "(", "begin", ")", "\n", "span_begin", ",", "span_end", "=", "create_all_spans", "(", "1", ",", "n_tokens", ",", "args", ".", "max_span_length", ")", "\n", "lengths", "=", "torch", ".", "tensor", "(", "[", "n_tokens", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "span_mask", "=", "(", "span_end", "<", "lengths", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "float", "(", ")", "\n", "\n", "nr_possible_spans", "=", "(", "span_mask", ".", "size", "(", "-", "1", ")", "*", "span_mask", ".", "size", "(", "-", "2", ")", ")", "\n", "\n", "span_masked_scores", "=", "span_mask", ".", "view", "(", "span_mask", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "top_indices_sorted", "=", "torch", ".", "arange", "(", "0", ",", "nr_possible_spans", ",", "dtype", "=", "torch", ".", "int32", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "all_possible_spans", "=", "indices_to_spans", "(", "top_indices_sorted", ",", "\n", "torch", ".", "tensor", "(", "[", "nr_possible_spans", "]", ",", "\n", "dtype", "=", "torch", ".", "int", ")", ",", "args", ".", "max_span_length", ")", "[", "0", "]", "\n", "\n", "linker_cands_all_spans", ",", "linker_cands_all_spans_scores", "=", "self", ".", "get_linker_candidates_all_spans", "(", "input_content", "=", "json_doc", "[", "'content'", "]", ",", "\n", "# json_doc['tags'],", "\n", "all_spans", "=", "all_possible_spans", ",", "begin", "=", "begin", ",", "end", "=", "end", ",", "\n", "span_mask", "=", "span_masked_scores", "[", "0", "]", ")", "\n", "\n", "# passes the spans from token (word) level to subtoken (bert) level", "\n", "l_span_mask", "=", "span_masked_scores", "[", "0", "]", ".", "tolist", "(", ")", "\n", "\n", "# logger.info('BEFORE ERROR PROCESSING: ' + json_doc['id'])", "\n", "spans_data", "=", "[", "]", "\n", "\n", "# Split documents", "\n", "map_subtoks_to_segmented_subtoks", "=", "self", ".", "split_into_segments", "(", "bert_doc", ",", "bert_doc", ".", "sentence_end", ",", "bert_doc", ".", "token_end", ")", "\n", "\n", "# adjusts the position of subtokens of mentions as well as all_possible_spans to account for segments", "\n", "# if the span size has changed (i.e. [\"CLS\"]/[\"SEP\"] inserted in the middle, then just ignores it", "\n", "#   TODO: check how much ignored there are of this type", "\n", "\n", "for", "curr_mention", "in", "json_doc", "[", "'mentions'", "]", ":", "\n", "            ", "diff_orig", "=", "curr_mention", "[", "'subtoken_end'", "]", "-", "curr_mention", "[", "'subtoken_begin'", "]", "\n", "sn_b", "=", "map_subtoks_to_segmented_subtoks", "[", "curr_mention", "[", "'subtoken_begin'", "]", "]", "\n", "sn_e", "=", "map_subtoks_to_segmented_subtoks", "[", "curr_mention", "[", "'subtoken_end'", "]", "]", "\n", "if", "sn_e", "-", "sn_b", "==", "diff_orig", ":", "\n", "                ", "curr_mention", "[", "'subtoken_begin'", "]", "=", "sn_b", "\n", "curr_mention", "[", "'subtoken_end'", "]", "=", "sn_e", "\n", "", "else", ":", "\n", "# TODO: SHOULD I IGNORE THIS???", "\n", "                ", "logger", ".", "warning", "(", "'THIS CAN BE SERIOUS MENTION NOT IN THE SAME SEGMENT '", "\n", "'(SPLITTED ACROSS DIFFERENT SEGMENTS): '", "+", "\n", "str", "(", "bert_doc", ".", "subtokens", "[", "curr_mention", "[", "'subtoken_begin'", "]", ":", "curr_mention", "[", "'subtoken_end'", "]", "+", "1", "]", ")", ")", "\n", "curr_mention", "[", "'subtoken_begin'", "]", "=", "sn_b", "\n", "curr_mention", "[", "'subtoken_end'", "]", "=", "sn_e", "\n", "\n", "# multi-line version (easier to debug)", "\n", "", "", "for", "(", "t1", ",", "t2", ")", ",", "mask", ",", "cands", ",", "scores_cands", "in", "zip", "(", "all_possible_spans", ",", "l_span_mask", ",", "linker_cands_all_spans", ",", "linker_cands_all_spans_scores", ")", ":", "\n", "            ", "if", "mask", ">", "0.9", ":", "\n", "                ", "if", "t1", "not", "in", "word_idx_to_first_subtoken_idx", "or", "t2", "not", "in", "word_idx_to_last_subtoken_idx", ":", "\n", "                    ", "if", "t1", "not", "in", "word_idx_to_first_subtoken_idx", ":", "\n", "                        ", "logger", ".", "warning", "(", "'problem passing to subtoken ids with the following t1 token: \"'", "+", "\n", "json_doc", "[", "'tokenization'", "]", "[", "'tokens'", "]", "[", "t1", "]", "+", "'\", cands: '", "+", "str", "(", "\n", "cands", ")", "+", "', OMITTING'", ")", "\n", "", "if", "t2", "not", "in", "word_idx_to_first_subtoken_idx", ":", "\n", "                        ", "logger", ".", "warning", "(", "'problem passing to subtoken ids with the following t2 token: \"'", "+", "\n", "json_doc", "[", "'tokenization'", "]", "[", "'tokens'", "]", "[", "t2", "]", "+", "'\", cands: '", "+", "str", "(", "\n", "cands", ")", "+", "', OMITTING'", ")", "\n", "", "", "else", ":", "\n", "                    ", "subt_t1", "=", "word_idx_to_first_subtoken_idx", "[", "t1", "]", "\n", "subt_t2", "=", "word_idx_to_last_subtoken_idx", "[", "t2", "]", "\n", "m_subt_t2", "=", "map_subtoks_to_segmented_subtoks", "[", "subt_t2", "]", "\n", "m_subt_t1", "=", "map_subtoks_to_segmented_subtoks", "[", "subt_t1", "]", "\n", "if", "subt_t2", "-", "subt_t1", "==", "m_subt_t2", "-", "m_subt_t1", ":", "\n", "                        ", "spans_data", ".", "append", "(", "(", "(", "m_subt_t1", ",", "m_subt_t2", ")", ",", "cands", ",", "scores_cands", ")", ")", "\n", "", "else", ":", "\n", "# TODO: SHOULD I IGNORE THIS???", "\n", "                        ", "spans_data", ".", "append", "(", "(", "(", "m_subt_t1", ",", "m_subt_t2", ")", ",", "cands", ",", "scores_cands", ")", ")", "\n", "# logger.warning('FOLLOWING SPAN across segments: ' + str(bert_doc.subtokens[subt_t1:subt_t2 + 1]))", "\n", "\n", "", "", "", "", "all_possible_spans", "=", "[", "(", "t1", ",", "t2", ")", "for", "(", "t1", ",", "t2", ")", ",", "_", ",", "_", "in", "spans_data", "]", "\n", "\n", "# has to convert to torch.tensor because it is needed in this format inside get_linker_targets_all_spans", "\n", "linker_cands_all_spans", "=", "[", "torch", ".", "tensor", "(", "l", ",", "dtype", "=", "torch", ".", "int", ")", "for", "(", "_", ",", "_", ")", ",", "l", ",", "_", "in", "spans_data", "]", "\n", "# linker_cands_all_spans_scores = [torch.tensor(ls, dtype=torch.float) for (_, _), _, ls in spans_data]", "\n", "linker_cands_all_spans_scores", "=", "[", "ls", "for", "(", "_", ",", "_", ")", ",", "_", ",", "ls", "in", "spans_data", "]", "\n", "linker_targets_all_spans", "=", "self", ".", "get_linker_targets_all_spans", "(", "json_doc", ",", "all_possible_spans", ",", "\n", "linker_cands_all_spans", ")", "\n", "\n", "bert_doc", ".", "all_spans", "=", "all_possible_spans", "\n", "\n", "bert_doc", ".", "all_spans_candidates", "=", "[", "t", ".", "tolist", "(", ")", "for", "t", "in", "linker_cands_all_spans", "]", "\n", "# bert_doc.all_spans_candidates_scores = [t.tolist() for t in linker_cands_all_spans_scores]", "\n", "bert_doc", ".", "all_spans_candidates_scores", "=", "linker_cands_all_spans_scores", "\n", "bert_doc", ".", "all_spans_candidates_targets", "=", "linker_targets_all_spans", "\n", "\n", "bert_doc", ".", "mentions", "=", "json_doc", "[", "'mentions'", "]", "\n", "\n", "document", "=", "bert_doc", ".", "convert_to_json", "(", ")", "\n", "return", "document", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.main_bert_processor_dwie.BertProcessor.bert_preprocess": [[455, 471], ["list", "main_bert_processor_dwie.get_tokenizer", "os.walk", "logger.info", "json.load", "main_bert_processor_dwie.BertProcessor.get_document", "main_bert_processor_dwie.BertProcessor.documents.append", "open", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.main_bert_processor_dwie.get_tokenizer", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.main_bert_processor_dwie.BertProcessor.get_document"], ["", "def", "bert_preprocess", "(", "self", ")", ":", "\n", "        ", "self", ".", "documents", "=", "list", "(", ")", "\n", "self", ".", "tokenizer", "=", "get_tokenizer", "(", "args", ".", "tokenizer_name", ")", "\n", "input_dir", "=", "args", ".", "input_dir", "\n", "\n", "for", "(", "dirpath", ",", "dirnames", ",", "filenames", ")", "in", "os", ".", "walk", "(", "input_dir", ")", ":", "\n", "            ", "for", "curr_file", "in", "filenames", ":", "\n", "                ", "if", "'DW_'", "in", "curr_file", ":", "\n", "                    ", "logger", ".", "info", "(", "'processing '", "+", "curr_file", ")", "\n", "parsed_file", "=", "json", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "dirpath", ",", "curr_file", ")", ")", ")", "\n", "curr_doc", "=", "self", ".", "get_document", "(", "parsed_file", ")", "\n", "\n", "# file_name = '{}.json'.format(curr_doc['id'])", "\n", "# json.dump(curr_doc, open(os.path.join(args.output_dir, 'dwie_bert', file_name), 'w'))", "\n", "\n", "self", ".", "documents", ".", "append", "(", "curr_doc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.main_bert_processor_dwie.BertProcessor.save_to_disk": [[472, 482], ["print", "print", "json.dump", "open", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "", "", "", "def", "save_to_disk", "(", "self", ")", ":", "\n", "        ", "print", "(", "'saving to disk in DWIE format please wait...'", ")", "\n", "output_dir", "=", "args", ".", "output_dir", "\n", "\n", "for", "curr_doc", "in", "self", ".", "documents", ":", "\n", "            ", "file_name", "=", "'{}.json'", ".", "format", "(", "curr_doc", "[", "'id'", "]", ")", "\n", "json", ".", "dump", "(", "curr_doc", ",", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'dwie_bert_s{}'", ".", "format", "(", "args", ".", "max_seg_len", ")", ",", "\n", "file_name", ")", ",", "'w'", ",", "encoding", "=", "'utf8'", ")", ",", "ensure_ascii", "=", "False", ")", "\n", "\n", "", "print", "(", "'finished saving to disk in DWIE format'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.main_bert_processor_dwie.BertProcessor.save_to_disk_hoi_format": [[483, 528], ["print", "os.path.join", "os.path.join", "open", "open", "print", "dict", "dict", "sorted", "cluster_to_mention[].append", "struct_output[].append", "dict.items", "open.write", "open.write", "json.dumps", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.write", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.write"], ["", "def", "save_to_disk_hoi_format", "(", "self", ")", ":", "\n", "        ", "\"\"\"Saves to disk, but in the format that can be used as input to https://github.com/lxucs/coref-hoi\"\"\"", "\n", "print", "(", "'saving to disk in hoi format please wait...'", ")", "\n", "output_dir", "=", "args", ".", "output_dir_hoi", "\n", "path_dev", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'dwie.dev.english.{}.jsonlines'", ".", "format", "(", "args", ".", "max_seg_len", ")", ")", "\n", "path_train", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'dwie.train.english.{}.jsonlines'", ".", "format", "(", "args", ".", "max_seg_len", ")", ")", "\n", "out_file_dev", "=", "open", "(", "path_dev", ",", "'w'", ")", "\n", "out_file_train", "=", "open", "(", "path_train", ",", "'w'", ")", "\n", "\n", "for", "curr_doc", "in", "self", ".", "documents", ":", "\n", "            ", "cluster_to_mention", "=", "dict", "(", ")", "\n", "struct_output", "=", "dict", "(", ")", "# output to be saved to disk", "\n", "# passes clusters to hoi format", "\n", "# print('curr_doc: ', curr_doc)", "\n", "struct_output", "[", "'doc_key'", "]", "=", "curr_doc", "[", "'id'", "]", "\n", "for", "curr_mention", "in", "curr_doc", "[", "'mentions'", "]", ":", "\n", "                ", "cluster_id", "=", "curr_mention", "[", "'concept'", "]", "\n", "if", "cluster_id", "not", "in", "cluster_to_mention", ":", "\n", "                    ", "cluster_to_mention", "[", "cluster_id", "]", "=", "[", "]", "\n", "", "cluster_to_mention", "[", "cluster_id", "]", ".", "append", "(", "[", "curr_mention", "[", "'subtoken_begin'", "]", ",", "curr_mention", "[", "'subtoken_end'", "]", "]", ")", "\n", "\n", "", "struct_output", "[", "'speakers'", "]", "=", "[", "]", "\n", "for", "curr_sentence", "in", "curr_doc", "[", "'bert_segments'", "]", ":", "\n", "                ", "curr_speakers", "=", "[", "'-'", "for", "_", "in", "curr_sentence", "]", "\n", "curr_speakers", "[", "0", "]", "=", "self", ".", "speaker_separator", "\n", "curr_speakers", "[", "-", "1", "]", "=", "self", ".", "speaker_separator", "\n", "struct_output", "[", "'speakers'", "]", ".", "append", "(", "curr_speakers", ")", "\n", "\n", "", "sorted_clusters", "=", "sorted", "(", "cluster_to_mention", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "sorted_clusters", "=", "[", "x", "for", "_", ",", "x", "in", "sorted_clusters", "]", "\n", "# print('sorted clusters is: ', sorted_clusters)", "\n", "struct_output", "[", "'clusters'", "]", "=", "sorted_clusters", "\n", "struct_output", "[", "'constituents'", "]", "=", "[", "]", "\n", "struct_output", "[", "'ner'", "]", "=", "[", "]", "\n", "struct_output", "[", "'pronouns'", "]", "=", "[", "]", "\n", "struct_output", "[", "'sentences'", "]", "=", "curr_doc", "[", "'bert_segments'", "]", "\n", "struct_output", "[", "'sentence_map'", "]", "=", "curr_doc", "[", "'sentence_map'", "]", "\n", "struct_output", "[", "'subtoken_map'", "]", "=", "curr_doc", "[", "'subtoken_map'", "]", "\n", "struct_output", "[", "'tokens'", "]", "=", "curr_doc", "[", "'word_tokenization'", "]", "\n", "if", "'train'", "in", "curr_doc", "[", "'tags'", "]", ":", "\n", "                ", "out_file_train", ".", "write", "(", "json", ".", "dumps", "(", "struct_output", ")", "+", "'\\n'", ")", "\n", "", "else", ":", "\n", "                ", "out_file_dev", ".", "write", "(", "json", ".", "dumps", "(", "struct_output", ")", "+", "'\\n'", ")", "\n", "\n", "", "", "print", "(", "'Finished saving to disk in hoi format'", ")", "\n", "# print('')", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.main_bert_processor_dwie.get_tokenizer": [[108, 110], ["transformers.BertTokenizer.from_pretrained"], "function", ["None"], ["", "", "def", "get_tokenizer", "(", "bert_tokenizer_name", ")", ":", "\n", "    ", "return", "BertTokenizer", ".", "from_pretrained", "(", "bert_tokenizer_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.main_bert_processor_dwie.load_linking_candidates": [[112, 149], ["links_dictionary.add", "dict", "open", "json.loads", "curr_span_candidates[].strip", "sorted", "dict", "list", "list", "zip", "list.append", "list.append", "links_dictionary.add"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add"], ["", "def", "load_linking_candidates", "(", "cands_path", ",", "max_cands", ",", "links_dictionary", ":", "Dictionary", ")", ":", "\n", "# first adds NONE and NILL to dictionary", "\n", "\n", "# links_dictionary.add('NONE')", "\n", "    ", "links_dictionary", ".", "add", "(", "'NILL'", ")", "\n", "\n", "candidates_path", "=", "cands_path", "\n", "max_link_candidates", "=", "max_cands", "\n", "span_text_to_candidates", "=", "dict", "(", ")", "\n", "for", "curr_line", "in", "open", "(", "candidates_path", ")", ":", "\n", "        ", "curr_span_candidates", "=", "json", ".", "loads", "(", "curr_line", ")", "\n", "span_text", "=", "curr_span_candidates", "[", "'text'", "]", ".", "strip", "(", ")", "# TODO: makes sense lowercasing, or will make it worse???", "\n", "span_candidates", "=", "curr_span_candidates", "[", "'candidates'", "]", "\n", "span_scores", "=", "curr_span_candidates", "[", "'scores'", "]", "\n", "# candidates should come sorted by score, but just in case sorts again", "\n", "sorted_candidates", "=", "sorted", "(", "zip", "(", "span_candidates", ",", "span_scores", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "\n", "if", "max_link_candidates", ">", "-", "1", ":", "\n", "            ", "sorted_candidates", "=", "sorted_candidates", "[", ":", "max_link_candidates", "]", "\n", "\n", "", "span_text_to_candidates", "[", "span_text", "]", "=", "dict", "(", ")", "\n", "\n", "scores_list", "=", "list", "(", ")", "\n", "candidates_list", "=", "list", "(", ")", "\n", "for", "curr_candidate", ",", "curr_score", "in", "sorted_candidates", ":", "\n", "            ", "candidates_list", ".", "append", "(", "links_dictionary", ".", "add", "(", "curr_candidate", ")", ")", "\n", "scores_list", ".", "append", "(", "curr_score", ")", "\n", "# passes to torch.tensor in order to decrease the memory footprint - the lists consume too much memory in python", "\n", "# candidates_list", "\n", "", "span_text_to_candidates", "[", "span_text", "]", "[", "'candidates'", "]", "=", "candidates_list", "\n", "# span_text_to_candidates[span_text]['candidates'] = torch.tensor(candidates_list, dtype=torch.int)", "\n", "span_text_to_candidates", "[", "span_text", "]", "[", "'scores'", "]", "=", "scores_list", "\n", "# span_text_to_candidates[span_text]['scores'] = torch.tensor(scores_list, dtype=torch.float)", "\n", "\n", "# print('END LOADING LINKING CANDIDATES')", "\n", "\n", "", "return", "span_text_to_candidates", ",", "links_dictionary", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.lrschedule.MyLRScheduler.__init__": [[24, 33], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "config", ",", "num_epoch", ",", "steps_per_epoch", "=", "1", ")", ":", "\n", "        ", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "lrate0", "=", "config", "[", "'lrate0'", "]", "\n", "self", ".", "gamma", "=", "config", "[", "'gamma'", "]", "\n", "self", ".", "t0", "=", "config", "[", "'t0'", "]", "*", "steps_per_epoch", "\n", "self", ".", "t1", "=", "config", "[", "'t1'", "]", "*", "steps_per_epoch", "\n", "self", ".", "t2", "=", "num_epoch", "*", "steps_per_epoch", "\n", "self", ".", "t", "=", "1", "\n", "self", ".", "lrate", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.lrschedule.MyLRScheduler.step": [[34, 48], ["None"], "methods", ["None"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "self", ".", "t", "+=", "1", "\n", "if", "self", ".", "t", "<=", "self", ".", "t0", ":", "\n", "            ", "self", ".", "lrate", "=", "self", ".", "t", "/", "self", ".", "t0", "*", "self", ".", "lrate0", "\n", "", "elif", "self", ".", "t", "<=", "self", ".", "t1", ":", "\n", "            ", "self", ".", "lrate", "=", "self", ".", "lrate0", "\n", "", "elif", "self", ".", "t", "<=", "self", ".", "t2", ":", "\n", "            ", "fraction", "=", "(", "self", ".", "t", "-", "self", ".", "t1", ")", "/", "(", "self", ".", "t2", "-", "self", ".", "t1", ")", "\n", "self", ".", "lrate", "=", "self", ".", "lrate0", "*", "(", "self", ".", "gamma", "**", "fraction", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "            ", "group", "[", "'lr'", "]", "=", "self", ".", "lrate", "\n", "\n", "", "return", "self", ".", "lrate", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.lrschedule.MyDefaultScheduler.__init__": [[52, 55], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "config", ")", ":", "\n", "        ", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "lrate", "=", "config", "[", "'lrate0'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.lrschedule.MyDefaultScheduler.step": [[56, 61], ["None"], "methods", ["None"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "            ", "group", "[", "'lr'", "]", "=", "self", ".", "lrate", "\n", "\n", "", "return", "self", ".", "lrate", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.lrschedule.MyLinearDecayScheduler.__init__": [[64, 72], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "config", ",", "num_epoch", ",", "steps_per_epoch", "=", "1", ")", ":", "\n", "        ", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "lrate0", "=", "config", "[", "'lrate0'", "]", "\n", "self", ".", "gamma", "=", "config", "[", "'gamma'", "]", "\n", "self", ".", "t0", "=", "config", "[", "'t0'", "]", "*", "steps_per_epoch", "\n", "self", ".", "t1", "=", "config", "[", "'t1'", "]", "*", "steps_per_epoch", "\n", "self", ".", "t", "=", "1", "\n", "self", ".", "lrate", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.lrschedule.MyLinearDecayScheduler.step": [[73, 85], ["None"], "methods", ["None"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "self", ".", "t", "+=", "1", "\n", "if", "self", ".", "t", "<=", "self", ".", "t0", ":", "\n", "            ", "self", ".", "lrate", "=", "self", ".", "lrate0", "\n", "", "elif", "self", ".", "t", "<=", "self", ".", "t1", ":", "\n", "            ", "fraction", "=", "(", "self", ".", "t", "-", "self", ".", "t0", ")", "/", "(", "self", ".", "t1", "-", "self", ".", "t0", ")", "\n", "self", ".", "lrate", "=", "self", ".", "lrate0", "*", "(", "self", ".", "gamma", "*", "fraction", "+", "1.0", "*", "(", "1", "-", "fraction", ")", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "            ", "group", "[", "'lr'", "]", "=", "self", ".", "lrate", "\n", "\n", "", "return", "self", ".", "lrate", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.lrschedule.MyExponentialDecayScheduler.__init__": [[88, 96], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "config", ",", "num_epoch", ",", "steps_per_epoch", "=", "1", ")", ":", "\n", "        ", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "lrate0", "=", "config", "[", "'lrate0'", "]", "\n", "self", ".", "gamma", "=", "config", "[", "'gamma'", "]", "\n", "self", ".", "t0", "=", "config", "[", "'t0'", "]", "*", "steps_per_epoch", "\n", "self", ".", "t1", "=", "config", "[", "'t1'", "]", "*", "steps_per_epoch", "\n", "self", ".", "t", "=", "1", "\n", "self", ".", "lrate", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.lrschedule.MyExponentialDecayScheduler.step": [[97, 109], ["None"], "methods", ["None"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "self", ".", "t", "+=", "1", "\n", "if", "self", ".", "t", "<=", "self", ".", "t0", ":", "\n", "            ", "self", ".", "lrate", "=", "self", ".", "lrate0", "\n", "", "elif", "self", ".", "t", "<=", "self", ".", "t1", ":", "\n", "            ", "fraction", "=", "(", "self", ".", "t", "-", "self", ".", "t0", ")", "/", "(", "self", ".", "t1", "-", "self", ".", "t0", ")", "\n", "self", ".", "lrate", "=", "self", ".", "lrate0", "*", "(", "self", ".", "gamma", "**", "fraction", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "            ", "group", "[", "'lr'", "]", "=", "self", ".", "lrate", "\n", "\n", "", "return", "self", ".", "lrate", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.lrschedule.MyReciprocalDecayScheduler.__init__": [[113, 123], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "config", ",", "num_epoch", ",", "steps_per_epoch", "=", "1", ")", ":", "\n", "        ", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "lrate0", "=", "config", "[", "'lrate0'", "]", "\n", "self", ".", "t0", "=", "config", "[", "'t0'", "]", "*", "steps_per_epoch", "\n", "self", ".", "t1", "=", "config", "[", "'t1'", "]", "*", "steps_per_epoch", "\n", "self", ".", "t", "=", "1", "\n", "self", ".", "lrate", "=", "0", "\n", "\n", "gamma", "=", "config", "[", "'gamma'", "]", "\n", "self", ".", "fnc", "=", "lambda", "x", ":", "gamma", "/", "(", "(", "1.0", "-", "gamma", ")", "*", "x", "+", "gamma", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.lrschedule.MyReciprocalDecayScheduler.step": [[124, 136], ["lrschedule.MyReciprocalDecayScheduler.fnc"], "methods", ["None"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "self", ".", "t", "+=", "1", "\n", "if", "self", ".", "t", "<=", "self", ".", "t0", ":", "\n", "            ", "self", ".", "lrate", "=", "self", ".", "lrate0", "\n", "", "elif", "self", ".", "t", "<=", "self", ".", "t1", ":", "\n", "            ", "fraction", "=", "(", "self", ".", "t", "-", "self", ".", "t0", ")", "/", "(", "self", ".", "t1", "-", "self", ".", "t0", ")", "\n", "self", ".", "lrate", "=", "self", ".", "lrate0", "*", "self", ".", "fnc", "(", "fraction", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "            ", "group", "[", "'lr'", "]", "=", "self", ".", "lrate", "\n", "\n", "", "return", "self", ".", "lrate", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.lrschedule.MyNoneScheduler.__init__": [[139, 141], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ")", ":", "\n", "        ", "self", ".", "optimizer", "=", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.lrschedule.MyNoneScheduler.step": [[142, 145], ["None"], "methods", ["None"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "            ", "return", "group", "[", "'lr'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.lrschedule.MyStepScheduler.__init__": [[148, 153], ["zip"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "config", ",", "steps_per_epoch", "=", "1", ")", ":", "\n", "        ", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "steps_per_epoch", "=", "steps_per_epoch", "\n", "self", ".", "lrs", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "config", "[", "'ts'", "]", ",", "config", "[", "'lr'", "]", ")", "}", "\n", "self", ".", "t", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.lrschedule.MyStepScheduler.step": [[154, 165], ["int"], "methods", ["None"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "step", "=", "int", "(", "self", ".", "t", "/", "self", ".", "steps_per_epoch", ")", "\n", "self", ".", "t", "+=", "1", "\n", "\n", "if", "step", "in", "self", ".", "lrs", ":", "\n", "            ", "self", ".", "lrate", "=", "self", ".", "lrs", "[", "step", "]", "\n", "# print(\"CHANGE LRATE AT TIME {} TO {}\".format(step, self.lrate))", "\n", "\n", "", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "            ", "group", "[", "'lr'", "]", "=", "self", ".", "lrate", "\n", "", "return", "self", ".", "lrate", "", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.lrschedule.create_lr_scheduler": [[3, 20], ["lrschedule.MyNoneScheduler", "lrschedule.MyDefaultScheduler", "lrschedule.MyLRScheduler", "lrschedule.MyLinearDecayScheduler", "lrschedule.MyExponentialDecayScheduler", "lrschedule.MyReciprocalDecayScheduler", "lrschedule.MyStepScheduler", "BaseException"], "function", ["None"], ["def", "create_lr_scheduler", "(", "optimizer", ",", "config", ",", "max_epochs", ",", "num_training_instances", ")", ":", "\n", "    ", "if", "'lr-scheduler'", "not", "in", "config", ":", "\n", "        ", "return", "MyNoneScheduler", "(", "optimizer", ")", "\n", "", "elif", "config", "[", "'lr-scheduler'", "]", "[", "'type'", "]", "==", "'default'", ":", "\n", "        ", "return", "MyDefaultScheduler", "(", "optimizer", ",", "config", "[", "'lr-scheduler'", "]", ")", "\n", "", "elif", "config", "[", "'lr-scheduler'", "]", "[", "'type'", "]", "==", "'new'", ":", "\n", "        ", "return", "MyLRScheduler", "(", "optimizer", ",", "config", "[", "'lr-scheduler'", "]", ",", "max_epochs", ",", "num_training_instances", ")", "\n", "", "elif", "config", "[", "'lr-scheduler'", "]", "[", "'type'", "]", "==", "'linear-decay'", ":", "\n", "        ", "return", "MyLinearDecayScheduler", "(", "optimizer", ",", "config", "[", "'lr-scheduler'", "]", ",", "max_epochs", ",", "num_training_instances", ")", "\n", "", "elif", "config", "[", "'lr-scheduler'", "]", "[", "'type'", "]", "==", "'exponential-decay'", ":", "\n", "        ", "return", "MyExponentialDecayScheduler", "(", "optimizer", ",", "config", "[", "'lr-scheduler'", "]", ",", "max_epochs", ",", "num_training_instances", ")", "\n", "", "elif", "config", "[", "'lr-scheduler'", "]", "[", "'type'", "]", "==", "'reciprocal-decay'", ":", "\n", "        ", "return", "MyReciprocalDecayScheduler", "(", "optimizer", ",", "config", "[", "'lr-scheduler'", "]", ",", "max_epochs", ",", "num_training_instances", ")", "\n", "", "elif", "config", "[", "'lr-scheduler'", "]", "[", "'type'", "]", "==", "'steps'", ":", "\n", "        ", "return", "MyStepScheduler", "(", "optimizer", ",", "config", "[", "'lr-scheduler'", "]", ",", "num_training_instances", ")", "\n", "", "else", ":", "\n", "        ", "raise", "BaseException", "(", "\"no such scheduler:\"", ",", "config", "[", "'lr-scheduler'", "]", "[", "'type'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader_api.DataReaderAPI.__init__": [[26, 44], ["cpn.data_reader.AbstractDataReader.__init__", "dictionaries.get", "dictionaries.get", "[].get", "cpn.tokenizer.TokenizerCPN"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "dictionaries", ",", "linking_candidates", "=", "None", ")", ":", "\n", "# AbstractDataReader.__init__(self)", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dict_words", ":", "Dictionary", "=", "dictionaries", "[", "'words'", "]", "\n", "self", ".", "dict_characters", ":", "Dictionary", "=", "dictionaries", "[", "'characters'", "]", "\n", "self", ".", "dict_whitespace", ":", "Dictionary", "=", "dictionaries", ".", "get", "(", "'whitespace'", ",", "None", ")", "\n", "self", ".", "dict_tags", ":", "Dictionary", "=", "dictionaries", "[", "'tags'", "]", "\n", "self", ".", "dict_relations", ":", "Dictionary", "=", "dictionaries", "[", "'relations'", "]", "\n", "self", ".", "dict_entities", ":", "Dictionary", "=", "dictionaries", ".", "get", "(", "'entities'", ",", "None", ")", "\n", "self", ".", "linking_candidates", "=", "linking_candidates", "\n", "self", ".", "max_span_length", "=", "config", "[", "'model'", "]", "[", "'max_span_length'", "]", "\n", "self", ".", "include_nill_in_candidates", "=", "config", "[", "'dataloader'", "]", "[", "'include_nill_in_candidates'", "]", "\n", "self", ".", "include_none_in_candidates", "=", "config", "[", "'dataloader'", "]", "[", "'include_none_in_candidates'", "]", "\n", "self", ".", "all_spans_candidates", "=", "config", "[", "'dataloader'", "]", "[", "'all_spans_candidates'", "]", "\n", "self", ".", "shuffle_candidates", "=", "config", "[", "'datasets'", "]", "[", "'test'", "]", "[", "'shuffle_candidates'", "]", "\n", "self", ".", "max_link_candidates", "=", "config", "[", "'datasets'", "]", "[", "'test'", "]", ".", "get", "(", "'max_link_candidates'", ",", "None", ")", "\n", "\n", "self", ".", "tokenizer", "=", "TokenizerCPN", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader_api.DataReaderAPI.convert": [[45, 135], ["data_reader_api.DataReaderAPI.tokenizer.tokenize", "len", "modules.ner.spanner.create_all_spans", "torch.tensor", "span_mask.view", "torch.arange().unsqueeze", "data_reader_api.DataReaderAPI.get_linker_candidates_all_spans", "data_reader_api.DataReaderAPI.get_token_indices", "data_reader_api.DataReaderAPI.get_character_indices", "print", "span_mask.size", "span_mask.size", "span_mask.size", "modules.utils.misc.indices_to_spans", "torch.LongTensor", "data_reader_api.DataReaderAPI.get_whitespace_indices", "torch.LongTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.arange", "torch.tensor", "datass.transform.get_token_buckets", "torch.tensor.unsqueeze().unsqueeze", "torch.tensor.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.WordpieceTokenizer.tokenize", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.create_all_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.AbstractDataReader.get_linker_candidates_all_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.AbstractDataReader.get_token_indices", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.AbstractDataReader.get_character_indices", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.indices_to_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.AbstractDataReader.get_whitespace_indices", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.transform.get_token_buckets"], ["", "def", "convert", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"\n\n        :param data: initially has only 'text' with the plain text to be processed\n        :return:\n        \"\"\"", "\n", "input_text", "=", "data", "[", "'text'", "]", "\n", "\n", "tokens", "=", "self", ".", "tokenizer", ".", "tokenize", "(", "input_text", ")", "\n", "\n", "begin", "=", "[", "token", "[", "'offset'", "]", "for", "token", "in", "tokens", "]", "\n", "end", "=", "[", "token", "[", "'offset'", "]", "+", "token", "[", "'length'", "]", "for", "token", "in", "tokens", "]", "\n", "tokens", "=", "[", "token", "[", "'token'", "]", "for", "token", "in", "tokens", "]", "\n", "\n", "n_tokens", "=", "len", "(", "tokens", ")", "\n", "\n", "if", "n_tokens", "==", "0", ":", "\n", "            ", "print", "(", "\"WARNING: (data_reader_api) dropping empty document\"", ")", "\n", "return", "\n", "\n", "# begin_to_index = {pos: idx for idx, pos in enumerate(begin)}", "\n", "# end_to_index = {pos: idx for idx, pos in enumerate(end)}", "\n", "\n", "# all_doc_candidates_no_nill = list()", "\n", "\n", "", "span_begin", ",", "span_end", "=", "create_all_spans", "(", "1", ",", "n_tokens", ",", "self", ".", "max_span_length", ")", "\n", "\n", "lengths", "=", "torch", ".", "tensor", "(", "[", "n_tokens", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "span_mask", "=", "(", "span_end", "<", "lengths", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "float", "(", ")", "\n", "\n", "nr_possible_spans", "=", "(", "span_mask", ".", "size", "(", "-", "1", ")", "*", "span_mask", ".", "size", "(", "-", "2", ")", ")", "\n", "\n", "span_masked_scores", "=", "span_mask", ".", "view", "(", "span_mask", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "# top_indices_sorted = torch.range(0, nr_possible_spans - 1, dtype=torch.int32).unsqueeze(0)", "\n", "top_indices_sorted", "=", "torch", ".", "arange", "(", "0", ",", "nr_possible_spans", ",", "dtype", "=", "torch", ".", "int32", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "all_possible_spans", "=", "indices_to_spans", "(", "top_indices_sorted", ",", "torch", ".", "tensor", "(", "[", "nr_possible_spans", "]", ",", "\n", "dtype", "=", "torch", ".", "int", ")", ",", "\n", "self", ".", "max_span_length", ")", "[", "0", "]", "\n", "\n", "linker_cands_all_spans", ",", "linker_cands_all_spans_scores", "=", "self", ".", "get_linker_candidates_all_spans", "(", "input_text", ",", "None", ",", "all_spans", "=", "all_possible_spans", ",", "begin", "=", "begin", ",", "end", "=", "end", ",", "\n", "span_mask", "=", "span_masked_scores", "[", "0", "]", ")", "\n", "\n", "# linker_targets_all_spans = self.get_linker_targets_all_spans(data, all_possible_spans,", "\n", "#                                                              linker_cands_all_spans)", "\n", "\n", "linker_candidates", "=", "linker_cands_all_spans", "\n", "# linker_targets = linker_targets_all_spans", "\n", "linker_scores", "=", "linker_cands_all_spans_scores", "\n", "# here tokens should be of the following format:", "\n", "#   <class 'list'>: ['Healthy', 'Travel', '-', 'Dr', '.', 'Thorsten', 'Onno', 'Bender', 'in', 'our', 'studio', 'The', 'specialist', 'for', 'flight', 'medicine', 'and', 'internal', 'medicine', 'provides', 'you', 'with', 'tips', 'on', 'tackling', 'motion', 'sickness', 'and', 'jet', 'lag', 'and', 'tells', 'us', 'which', 'pre', '-', 'holiday', 'vaccinations', 'make', 'sense', '.', 'Flight', 'Medicine', 'Unit', ',', 'Charit\u00e9', 'University', 'Hospital', ',', 'Berlin', 'Campus', 'Virchow', 'Clinic', 'Augustenburger', 'Platz', '1', '13353', 'Berlin', 'http', ':', '//', 'www', '.', 'fliegerarzt', '-', 'berlin', '.', 'de', '/']", "\n", "# token_indices should be of the following format:", "\n", "#   <class 'list'>: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 16, 19, 20, 21, 22, 23, 24, 25, 26, 17, 27, 28, 17, 29, 30, 31, 32, 3, 33, 34, 35, 36, 5, 37, 38, 39, 40, 41, 42, 43, 40, 44, 45, 46, 47, 48, 49, 50, 51, 44, 52, 53, 54, 55, 5, 56, 3, 57, 5, 58, 59]", "\n", "token_indices", "=", "self", ".", "get_token_indices", "(", "tokens", ")", "\n", "\n", "character_indices", "=", "self", ".", "get_character_indices", "(", "tokens", ")", "\n", "# spans = [(mention['token_begin'], mention['token_end']) for mention in data['mentions']]", "\n", "text_embedder", "=", "{", "\n", "'tokens'", ":", "torch", ".", "LongTensor", "(", "token_indices", ")", ",", "\n", "'characters'", ":", "character_indices", ",", "\n", "'whitespace'", ":", "self", ".", "get_whitespace_indices", "(", "None", ")", ",", "\n", "# token-indices are NOT 'tokens', 'tokens' are token ids as appear in dictionary, 'token-indices' are the", "\n", "# indices of tokens inside embeddings for a particular batch. So if a particular batch has 200 different words", "\n", "# there will be 200 token-indices from 0 to 199 ; whereas 'tokens' will be also 200 but ranging from 0 to", "\n", "# thousands in value", "\n", "'tokens-indices'", ":", "torch", ".", "LongTensor", "(", "get_token_buckets", "(", "tokens", ")", ")", ",", "\n", "'text'", ":", "tokens", "\n", "}", "\n", "\n", "return", "{", "\n", "'id'", ":", "None", ",", "\n", "'metadata_tags'", ":", "[", "'test'", "]", ",", "\n", "'xxx'", ":", "text_embedder", ",", "\n", "'content'", ":", "input_text", ",", "\n", "'begin'", ":", "torch", ".", "IntTensor", "(", "begin", ")", ",", "\n", "'end'", ":", "torch", ".", "IntTensor", "(", "end", ")", ",", "\n", "'spans'", ":", "[", "]", ",", "\n", "# 'spans': spans,", "\n", "'gold_clusters'", ":", "[", "]", ",", "\n", "'gold_tags_indices'", ":", "[", "]", ",", "\n", "'clusters'", ":", "torch", ".", "IntTensor", "(", "[", "]", ")", ",", "\n", "'relations2'", ":", "[", "]", ",", "\n", "'num_concepts'", ":", "None", ",", "\n", "'linker_candidates'", ":", "linker_candidates", ",", "\n", "'linker_targets'", ":", "[", "]", ",", "\n", "'linker_scores'", ":", "linker_scores", ",", "\n", "'total_cand_lengths_in_gold_mentions'", ":", "[", "]", ",", "\n", "'linker_gold'", ":", "[", "]", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader_bert.DatasetDWIESpanBert.__init__": [[19, 60], ["torch.utils.data.Dataset.__init__", "print", "os.path.isdir", "print", "tqdm.tqdm.tqdm", "data_reader_bert.DatasetDWIESpanBert.load_file", "os.listdir", "os.path.join", "data_reader_bert.DatasetDWIESpanBert.load_file"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.DatasetCPN.load_file", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.DatasetCPN.load_file"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "config", ",", "dictionaries", ",", "linking_candidates", "=", "None", ")", ":", "\n", "# print('TODO FOR ')", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "tag", "=", "config", "[", "'dataset'", "]", "[", "'tag'", "]", "\n", "self", ".", "bert_max_segment_len", "=", "config", "[", "'dataloader'", "]", "[", "'bert_max_segment_len'", "]", "\n", "self", ".", "instances", "=", "[", "]", "\n", "self", ".", "dict_tags", "=", "dictionaries", "[", "'tags'", "]", "\n", "\n", "self", ".", "include_nill_in_candidates", "=", "config", "[", "'dataloader'", "]", "[", "'include_nill_in_candidates'", "]", "\n", "self", ".", "include_none_in_candidates", "=", "config", "[", "'dataloader'", "]", "[", "'include_none_in_candidates'", "]", "\n", "\n", "self", ".", "bert_dictionary", "=", "dictionaries", "[", "'bert_subtokens'", "]", "\n", "self", ".", "dict_relations", "=", "dictionaries", "[", "'relations'", "]", "\n", "self", ".", "dict_entities", ":", "Dictionary", "=", "None", "\n", "if", "'entities'", "in", "dictionaries", ":", "\n", "            ", "self", ".", "dict_entities", ":", "Dictionary", "=", "dictionaries", "[", "'entities'", "]", "\n", "\n", "", "self", ".", "max_span_length", "=", "config", "[", "'model'", "]", "[", "'max_span_length'", "]", "# TODO", "\n", "\n", "self", ".", "is_baseline_linker", "=", "False", "\n", "if", "'linker'", "in", "config", "[", "'model'", "]", ":", "\n", "            ", "self", ".", "is_baseline_linker", "=", "config", "[", "'model'", "]", "[", "'linker'", "]", "[", "'enabled'", "]", "\n", "\n", "# print('NR OF OOV AND TOKENS IN WORDS DITIONARY data_reader BEFORE LOADING: ')", "\n", "# print('\\t OOV: ', self.dict_words.out_of_voc)", "\n", "# print('\\t NR OF TOKENS: ', len(self.dict_words.word2idx))", "\n", "\n", "", "path", "=", "config", "[", "'dataset'", "]", "[", "'filename'", "]", "\n", "\n", "print", "(", "\"Loading {} tag={}\"", ".", "format", "(", "path", ",", "self", ".", "tag", ")", ")", "\n", "\n", "if", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "            ", "for", "filename", "in", "tqdm", "(", "os", ".", "listdir", "(", "path", ")", ")", ":", "\n", "                ", "f", "=", "os", ".", "path", ".", "join", "(", "path", ",", "filename", ")", "\n", "self", ".", "load_file", "(", "f", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "load_file", "(", "path", ")", "\n", "\n", "", "print", "(", "\"done init in DatasetDWIESpanBert\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader_bert.DatasetDWIESpanBert.get_linker_gold_from_mentions": [[61, 84], ["gold.append"], "methods", ["None"], ["", "def", "get_linker_gold_from_mentions", "(", "self", ",", "data", ")", ":", "\n", "        ", "gold", "=", "[", "]", "\n", "for", "mention", "in", "data", "[", "'mentions'", "]", ":", "\n", "# 19/02/2021 - sometimes if tokenization is not good, some mentions should be ignored (because there is no", "\n", "# token that can be assigned to either the begin or end of the mention)", "\n", "# if mention['token_begin'] is None or mention['token_end'] is None:", "\n", "#     continue", "\n", "            ", "assert", "mention", "[", "'subtoken_begin'", "]", "is", "not", "None", "\n", "assert", "mention", "[", "'subtoken_end'", "]", "is", "not", "None", "\n", "\n", "concept", "=", "data", "[", "'concepts'", "]", "[", "mention", "[", "'concept'", "]", "]", "\n", "\n", "if", "'link'", "in", "concept", ":", "\n", "                ", "gold", ".", "append", "(", "(", "mention", "[", "'subtoken_begin'", "]", ",", "mention", "[", "'subtoken_end'", "]", ",", "concept", "[", "'link'", "]", ")", ")", "\n", "\n", "# (kzaporoj) - the next gold calculation is wrong because only adds correct link if it is present in candidate", "\n", "# list. It doesn't account for the fact that the candidate list can be wrong. Coreflinker can take the link", "\n", "# from other mentions in the same cluster, giving lower results when using this formulation", "\n", "# while the output is actually correct.", "\n", "\n", "# if 'link' in mention:", "\n", "#     gold.append((mention['token_begin'], mention['token_end'], mention['link']))", "\n", "", "", "return", "gold", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader_bert.DatasetDWIESpanBert.convert": [[85, 223], ["enumerate", "sum", "enumerate", "torch.tensor", "torch.tensor", "list", "list", "list", "list", "zip", "data_reader_bert.DatasetDWIESpanBert.get_linker_gold_from_mentions", "max", "men_concept[].append", "torch.IntTensor", "torch.FloatTensor", "data_reader_bert.DatasetDWIESpanBert.bert_dictionary.convert_tokens_to_ids", "torch.tensor.append", "torch.tensor.append", "torch.tensor.sum", "torch.tensor.sum", "len", "len", "len", "len", "len", "len", "data_reader_bert.DatasetDWIESpanBert.get_span_tags", "data_reader_bert.DatasetDWIESpanBert.get_relations", "len", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "len", "len", "len", "data_reader_bert.DatasetDWIESpanBert.append", "curr_subtoken_mask.append", "list.append", "list.append", "list.append", "len", "list.append", "list.append", "curr_candidates[].item", "data_reader_bert.DatasetDWIESpanBert.dict_entities.lookup", "list.append", "curr_candidates[].item", "data_reader_bert.DatasetDWIESpanBert.dict_entities.lookup", "data_reader_bert.DatasetDWIESpanBert.dict_entities.lookup", "[].item", "list.append", "list.append"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.DatasetCPN.get_linker_gold_from_mentions", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.convert_tokens_to_ids", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.DatasetCPN.get_span_tags", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.DatasetCPN.get_relations", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup"], ["", "def", "convert", "(", "self", ",", "data", ")", ":", "\n", "        ", "identifier", "=", "data", "[", "'id'", "]", "\n", "concepts", "=", "data", "[", "'concepts'", "]", "\n", "\n", "# max_span_length = self", "\n", "\n", "subtokens", "=", "data", "[", "'bert_tokenization'", "]", "\n", "# subtoken_map = torch.tensor(data['subtoken_map'], dtype=torch.int)", "\n", "# token_length = subtoken_map.max().item() + 1  # + 1 because zero-based", "\n", "\n", "subtoken_map", "=", "data", "[", "'subtoken_map'", "]", "\n", "token_length", "=", "max", "(", "subtoken_map", ")", "+", "1", "# + 1 because zero-based", "\n", "bert_segments", "=", "data", "[", "'bert_segments'", "]", "\n", "# ['tokens']", "\n", "# begin = data['bert_tokenization']['begin']", "\n", "# end = data['bert_tokenization']['end']", "\n", "# print('DatasetDWIESpanBert: converting for ', identifier)", "\n", "\n", "mentions", "=", "data", "[", "'mentions'", "]", "\n", "\n", "for", "idx_mention", ",", "curr_mention", "in", "enumerate", "(", "mentions", ")", ":", "\n", "            ", "curr_mention", "[", "'candidates'", "]", "=", "[", "]", "# TODO", "\n", "curr_mention", "[", "'scores'", "]", "=", "[", "]", "# TODO", "\n", "men_concept", "=", "data", "[", "'concepts'", "]", "[", "curr_mention", "[", "'concept'", "]", "]", "\n", "if", "'mentions'", "not", "in", "men_concept", ":", "\n", "                ", "men_concept", "[", "'mentions'", "]", "=", "[", "]", "\n", "", "men_concept", "[", "'mentions'", "]", ".", "append", "(", "curr_mention", ")", "\n", "\n", "", "spans", "=", "[", "(", "mention", "[", "'subtoken_begin'", "]", ",", "mention", "[", "'subtoken_end'", "]", ")", "for", "mention", "in", "data", "[", "'mentions'", "]", "]", "\n", "gold_clusters", "=", "[", "[", "(", "mention", "[", "'subtoken_begin'", "]", ",", "mention", "[", "'subtoken_end'", "]", ")", "for", "mention", "in", "concept", "[", "'mentions'", "]", "]", "\n", "for", "concept", "in", "concepts", "if", "'mentions'", "in", "concept", "]", "\n", "gold_clusters", "=", "[", "concept", "for", "concept", "in", "gold_clusters", "if", "len", "(", "concept", ")", ">", "0", "]", "\n", "\n", "linker_candidates", "=", "[", "torch", ".", "IntTensor", "(", "cnd", ")", "for", "cnd", "in", "data", "[", "'all_spans_candidates'", "]", "]", "\n", "linker_scores", "=", "[", "torch", ".", "FloatTensor", "(", "cnd", ")", "for", "cnd", "in", "data", "[", "'all_spans_candidates_scores'", "]", "]", "\n", "linker_targets", "=", "data", "[", "'all_spans_candidates_target'", "]", "\n", "\n", "bert_segms", ",", "bert_segs_mask", "=", "[", "]", ",", "[", "]", "\n", "\n", "num_subtokens", "=", "sum", "(", "[", "len", "(", "s", ")", "for", "s", "in", "bert_segments", "]", ")", "\n", "\n", "# creates segments", "\n", "for", "idx", ",", "sent_tokens", "in", "enumerate", "(", "bert_segments", ")", ":", "\n", "            ", "curr_subtoken_ids", "=", "self", ".", "bert_dictionary", ".", "convert_tokens_to_ids", "(", "sent_tokens", ")", "\n", "curr_subtoken_mask", "=", "[", "1", "]", "*", "len", "(", "curr_subtoken_ids", ")", "\n", "while", "len", "(", "curr_subtoken_ids", ")", "<", "self", ".", "bert_max_segment_len", ":", "\n", "                ", "curr_subtoken_ids", ".", "append", "(", "0", ")", "\n", "curr_subtoken_mask", ".", "append", "(", "0", ")", "\n", "", "bert_segms", ".", "append", "(", "curr_subtoken_ids", ")", "\n", "bert_segs_mask", ".", "append", "(", "curr_subtoken_mask", ")", "\n", "\n", "# bert_segments = np.array(bert_segments)", "\n", "# bert_segs_mask = np.array(bert_segs_mask)", "\n", "\n", "", "bert_segms", "=", "torch", ".", "tensor", "(", "bert_segms", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "bert_segs_mask", "=", "torch", ".", "tensor", "(", "bert_segs_mask", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "assert", "num_subtokens", "==", "bert_segs_mask", ".", "sum", "(", ")", ",", "(", "num_subtokens", ",", "bert_segs_mask", ".", "sum", "(", ")", ")", "\n", "\n", "# filters spans by width", "\n", "f_all_spans", "=", "list", "(", ")", "\n", "f_linker_candidates", "=", "list", "(", ")", "\n", "f_linker_targets", "=", "list", "(", ")", "\n", "f_linker_scores", "=", "list", "(", ")", "\n", "for", "curr_span", ",", "curr_candidates", ",", "curr_target", ",", "curr_scores", "in", "zip", "(", "data", "[", "'all_spans'", "]", ",", "linker_candidates", ",", "\n", "linker_targets", ",", "linker_scores", ")", ":", "\n", "            ", "if", "curr_span", "[", "1", "]", "-", "curr_span", "[", "0", "]", "<", "self", ".", "max_span_length", ":", "\n", "                ", "f_all_spans", ".", "append", "(", "curr_span", ")", "\n", "if", "not", "self", ".", "include_none_in_candidates", "and", "not", "self", ".", "include_nill_in_candidates", ":", "\n", "                    ", "curr_candidates", "=", "curr_candidates", "[", ":", "-", "2", "]", "\n", "curr_scores", "=", "curr_scores", "[", ":", "-", "2", "]", "\n", "if", "curr_target", ">=", "curr_candidates", ".", "shape", "[", "0", "]", ":", "\n", "                        ", "curr_target", "=", "-", "1", "\n", "\n", "", "", "f_linker_candidates", ".", "append", "(", "curr_candidates", ")", "\n", "f_linker_scores", ".", "append", "(", "curr_scores", ")", "\n", "if", "self", ".", "dict_entities", "is", "None", ":", "\n", "                    ", "f_linker_targets", ".", "append", "(", "-", "1", ")", "\n", "", "elif", "curr_target", ">", "-", "1", "and", "curr_candidates", "[", "curr_target", "]", ".", "item", "(", ")", "==", "self", ".", "dict_entities", ".", "lookup", "(", "'NILL'", ")", "and", "not", "self", ".", "include_nill_in_candidates", ":", "\n", "                    ", "f_linker_targets", ".", "append", "(", "-", "1", ")", "\n", "", "elif", "curr_target", ">", "-", "1", "and", "curr_candidates", "[", "curr_target", "]", ".", "item", "(", ")", "==", "self", ".", "dict_entities", ".", "lookup", "(", "'NONE'", ")", "and", "not", "self", ".", "include_none_in_candidates", ":", "\n", "                    ", "f_linker_targets", ".", "append", "(", "-", "1", ")", "\n", "", "elif", "self", ".", "include_nill_in_candidates", "and", "self", ".", "include_none_in_candidates", "and", "self", ".", "is_baseline_linker", "and", "curr_target", "==", "-", "1", ":", "\n", "# link does not exist in candidate list, if we are running the baseline, this would be equivalent", "\n", "# of nill and belongs to unsolvable cases by the baseline, since it strictly depends on the", "\n", "# elements in the candidate list; the prediction of this NILL will result in a false negative", "\n", "# impacting the recall (accuracy)", "\n", "                    ", "nill_id", "=", "self", ".", "dict_entities", ".", "lookup", "(", "'NILL'", ")", "\n", "nill_idx", "=", "(", "curr_candidates", "==", "nill_id", ")", ".", "nonzero", "(", "as_tuple", "=", "True", ")", "[", "0", "]", ".", "item", "(", ")", "\n", "f_linker_targets", ".", "append", "(", "nill_idx", ")", "\n", "", "else", ":", "\n", "                    ", "f_linker_targets", ".", "append", "(", "curr_target", ")", "\n", "\n", "", "", "", "assert", "len", "(", "f_all_spans", ")", "==", "len", "(", "f_linker_candidates", ")", "\n", "assert", "len", "(", "f_all_spans", ")", "==", "len", "(", "f_linker_targets", ")", "\n", "assert", "len", "(", "f_all_spans", ")", "==", "len", "(", "f_linker_scores", ")", "\n", "\n", "linker_gold", "=", "self", ".", "get_linker_gold_from_mentions", "(", "data", ")", "\n", "\n", "# text_embedder = {", "\n", "#     'subtokens': torch.LongTensor(self.bert_dictionary.convert_tokens_to_ids(subtokens)),", "\n", "# }", "\n", "\n", "# TODO: transform to torch", "\n", "return", "{", "\n", "'id'", ":", "identifier", ",", "\n", "# 'xxx': text_embedder,", "\n", "'metadata_tags'", ":", "data", "[", "'tags'", "]", ",", "\n", "'gold_tags_indices'", ":", "self", ".", "get_span_tags", "(", "mentions", ",", "concepts", ")", ",", "\n", "'content'", ":", "data", "[", "'content'", "]", ",", "\n", "'bert_segments'", ":", "bert_segms", ",", "\n", "'bert_segs_mask'", ":", "bert_segs_mask", ",", "\n", "'relations2'", ":", "self", ".", "get_relations", "(", "data", ")", ",", "\n", "'num_concepts'", ":", "len", "(", "gold_clusters", ")", ",", "\n", "'gold_clusters'", ":", "gold_clusters", ",", "\n", "# TODO: check this comparing with data_reader.py where mention['concept']['concept'] is returned", "\n", "'clusters'", ":", "torch", ".", "IntTensor", "(", "[", "mention", "[", "'concept'", "]", "for", "mention", "in", "mentions", "]", ")", ",", "\n", "'spans'", ":", "spans", ",", "\n", "# TODO: we are here incorporating this information in 'gold_starts' of pruner.py", "\n", "'gold_subtokens_start'", ":", "torch", ".", "IntTensor", "(", "[", "s", "[", "0", "]", "for", "s", "in", "spans", "]", ")", ",", "\n", "'gold_subtokens_end'", ":", "torch", ".", "IntTensor", "(", "[", "s", "[", "1", "]", "for", "s", "in", "spans", "]", ")", ",", "\n", "'all_spans'", ":", "f_all_spans", ",", "\n", "'linker_candidates'", ":", "f_linker_candidates", ",", "\n", "'linker_targets'", ":", "f_linker_targets", ",", "\n", "'linker_scores'", ":", "f_linker_scores", ",", "\n", "'begin_token'", ":", "data", "[", "'begin_token'", "]", ",", "\n", "'end_token'", ":", "data", "[", "'end_token'", "]", ",", "\n", "# 'all_spans': data['all_spans'],", "\n", "# 'linker_candidates': linker_candidates,", "\n", "# 'linker_targets': linker_targets,", "\n", "# 'linker_scores': linker_scores,", "\n", "'linker_gold'", ":", "linker_gold", ",", "\n", "'subtoken_map'", ":", "subtoken_map", ",", "\n", "'token_length'", ":", "token_length", ",", "\n", "'sentence_map'", ":", "torch", ".", "IntTensor", "(", "data", "[", "'sentence_map'", "]", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader_bert.DatasetDWIESpanBert.load_file": [[225, 243], ["filename.endswith", "filename.endswith", "data_reader_bert.DatasetDWIESpanBert.load_json", "data_reader_bert.DatasetDWIESpanBert.load_jsonl", "BaseException", "print", "print", "time.sleep", "data_reader_bert.DatasetDWIESpanBert.load_file", "print", "random.randint"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.load_json", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.load_jsonl", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.DatasetCPN.load_file", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "load_file", "(", "self", ",", "filename", ",", "retry", "=", "0", ")", ":", "\n", "        ", "if", "filename", ".", "endswith", "(", "'.json'", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "load_json", "(", "filename", ")", "\n", "", "except", "OSError", "as", "exept", ":", "\n", "# tries 3 more times with random sleep", "\n", "                ", "if", "retry", "<", "10", ":", "\n", "                    ", "print", "(", "'following exept: '", ",", "exept", ".", "strerror", ")", "\n", "print", "(", "'except to load, trying again: '", ",", "filename", ",", "' for retry: '", ",", "retry", ")", "\n", "sleep", "(", "random", ".", "randint", "(", "5", ",", "10", ")", ")", "\n", "self", ".", "load_file", "(", "filename", ",", "retry", "=", "retry", "+", "1", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "'NO MORE TERIES LEFT, FAILING'", ")", "\n", "raise", "exept", "\n", "", "", "", "elif", "filename", ".", "endswith", "(", "'.jsonl'", ")", ":", "\n", "            ", "self", ".", "load_jsonl", "(", "filename", ")", "\n", "", "else", ":", "\n", "            ", "raise", "BaseException", "(", "\"unknown file type:\"", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader_bert.DatasetDWIESpanBert.load_json": [[244, 252], ["open", "json.load", "print", "data_reader_bert.DatasetDWIESpanBert.instances.append", "data_reader_bert.DatasetDWIESpanBert.convert"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile.LineFileWriter.convert"], ["", "", "def", "load_json", "(", "self", ",", "filename", ")", ":", "\n", "        ", "with", "open", "(", "filename", ",", "'r'", ")", "as", "file", ":", "\n", "            ", "data", "=", "json", ".", "load", "(", "file", ")", "\n", "if", "'tags'", "in", "data", ":", "\n", "                ", "if", "self", ".", "tag", "in", "data", "[", "'tags'", "]", ":", "\n", "                    ", "self", ".", "instances", ".", "append", "(", "self", ".", "convert", "(", "data", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "print", "(", "'WARNING (kzaporoj) - NO tags IN '", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader_bert.DatasetDWIESpanBert.load_jsonl": [[253, 259], ["open", "json.loads", "line.rstrip", "data_reader_bert.DatasetDWIESpanBert.instances.append", "data_reader_bert.DatasetDWIESpanBert.convert"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile.LineFileWriter.convert"], ["", "", "", "def", "load_jsonl", "(", "self", ",", "filename", ")", ":", "\n", "        ", "with", "open", "(", "filename", ",", "'r'", ")", "as", "file", ":", "\n", "            ", "for", "line", "in", "file", ":", "\n", "                ", "data", "=", "json", ".", "loads", "(", "line", ".", "rstrip", "(", ")", ")", "\n", "if", "self", ".", "tag", "in", "data", "[", "'tags'", "]", ":", "\n", "                    ", "self", ".", "instances", ".", "append", "(", "self", ".", "convert", "(", "data", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader_bert.DatasetDWIESpanBert.get_span_tags": [[260, 269], ["spans.extend", "data_reader_bert.DatasetDWIESpanBert.dict_tags.lookup"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup"], ["", "", "", "", "def", "get_span_tags", "(", "self", ",", "mentions", ",", "concepts", ")", ":", "\n", "        ", "spans", "=", "[", "]", "\n", "for", "mention", "in", "mentions", ":", "\n", "# if mention['token_begin'] is not None and mention['token_end'] is not None:", "\n", "            ", "assert", "mention", "[", "'subtoken_begin'", "]", "is", "not", "None", "\n", "assert", "mention", "[", "'subtoken_end'", "]", "is", "not", "None", "\n", "spans", ".", "extend", "(", "[", "(", "mention", "[", "'subtoken_begin'", "]", ",", "mention", "[", "'subtoken_end'", "]", ",", "self", ".", "dict_tags", ".", "lookup", "(", "tag", ")", ")", "for", "tag", "in", "\n", "concepts", "[", "mention", "[", "'concept'", "]", "]", "[", "'tags'", "]", "]", ")", "\n", "", "return", "spans", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader_bert.DatasetDWIESpanBert.get_relations": [[270, 273], ["data_reader_bert.DatasetDWIESpanBert.dict_relations.lookup"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup"], ["", "def", "get_relations", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "[", "(", "relation", "[", "'s'", "]", ",", "relation", "[", "'o'", "]", ",", "self", ".", "dict_relations", ".", "lookup", "(", "relation", "[", "'p'", "]", ")", ")", "for", "relation", "in", "\n", "data", "[", "'relations'", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader_bert.DatasetDWIESpanBert.__getitem__": [[274, 276], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "instances", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader_bert.DatasetDWIESpanBert.__len__": [[277, 279], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "instances", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.tokenizer.TokenizerCPN.__init__": [[8, 10], ["spacy.load"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "nlp", "=", "spacy", ".", "load", "(", "'en_core_web_sm'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.tokenizer.TokenizerCPN.tokenize": [[11, 81], ["tokenizer.TokenizerCPN.nlp", "re.findall", "re.findall", "re.findall", "all_tokens_data.append", "all_tokens_data.append", "all_tokens_data.append", "len", "len", "str", "str().index", "all_tokens_data.append", "all_tokens_data.append", "str", "len", "len", "len", "str", "str", "all_tokens_data.append", "all_tokens_data.append", "all_tokens_data.append", "str", "str", "len", "len", "len", "len", "str", "str", "len", "len", "str", "len", "str", "len", "len", "str", "str", "len", "len", "str", "len", "len", "str", "len", "str", "str", "str", "str", "len", "len", "str", "str", "str"], "methods", ["None"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "all_tokens_data", "=", "[", "]", "\n", "doc", "=", "self", ".", "nlp", "(", "text", ")", "\n", "tok_id", "=", "0", "\n", "\n", "for", "tok", "in", "doc", ":", "\n", "            ", "tokp", ":", "Token", "=", "tok", "\n", "\n", "found_year", "=", "re", ".", "findall", "(", "'([1-3][0-9]{3})'", ",", "tokp", ".", "text", ")", "\n", "found_s_end_date", "=", "re", ".", "findall", "(", "'([0-9]{1,4}s)'", ",", "tokp", ".", "text", ")", "\n", "\n", "found_dot_after_month", "=", "re", ".", "findall", "(", "'(?i)((january|'", "\n", "'february|'", "\n", "'march|'", "\n", "'april|may|june|july|august|september|october|'", "\n", "'november|december)\\\\.)'", ",", "tokp", ".", "text", ")", "\n", "\n", "# this particular case has to be hardcoded (ex: \"2012/2013\"), if not just taken as single token", "\n", "# something that produces inconsistencies later in dataset (one token pointing to two concepts).", "\n", "if", "len", "(", "found_year", ")", "==", "2", "and", "len", "(", "str", "(", "tokp", ")", ")", "==", "9", "and", "'/'", "in", "str", "(", "tokp", ")", "and", "str", "(", "tokp", ")", ".", "index", "(", "'/'", ")", "==", "4", ":", "\n", "# print('processing dates separated by slash case: ', str(tokp))", "\n", "                ", "tok1", "=", "tokp", ".", "text", "[", "0", ":", "4", "]", "\n", "tok2", "=", "tokp", ".", "text", "[", "4", ":", "5", "]", "\n", "tok3", "=", "tokp", ".", "text", "[", "5", ":", "9", "]", "\n", "all_tokens_data", ".", "append", "(", "{", "'tokid_begin_char'", ":", "tokp", ".", "idx", ",", "'tokid_end_char'", ":", "tokp", ".", "idx", "+", "4", ",", "\n", "'tok_id'", ":", "tok_id", ",", "'tok_text'", ":", "tok1", "}", ")", "\n", "tok_id", "+=", "1", "\n", "all_tokens_data", ".", "append", "(", "{", "'tokid_begin_char'", ":", "tokp", ".", "idx", "+", "4", ",", "'tokid_end_char'", ":", "tokp", ".", "idx", "+", "5", ",", "\n", "'tok_id'", ":", "tok_id", ",", "'tok_text'", ":", "tok2", "}", ")", "\n", "tok_id", "+=", "1", "\n", "all_tokens_data", ".", "append", "(", "{", "'tokid_begin_char'", ":", "tokp", ".", "idx", "+", "5", ",", "'tokid_end_char'", ":", "tokp", ".", "idx", "+", "9", ",", "\n", "'tok_id'", ":", "tok_id", ",", "'tok_text'", ":", "tok3", "}", ")", "\n", "tok_id", "+=", "1", "\n", "# this particular case happens when date (year for example) is finished in 's', ex: 1980s, 90s, etc.", "\n", "# it has to be parsed as two different tokens (ex: ['1980', 's']), with spacy version it gets parsed", "\n", "# as single token which produces difference in scores with Johannes version later on", "\n", "", "elif", "len", "(", "found_s_end_date", ")", "==", "1", "and", "len", "(", "found_s_end_date", "[", "0", "]", ")", "==", "len", "(", "str", "(", "tokp", ")", ")", ":", "\n", "# print('processing date ending in s: ', str(tokp))", "\n", "                ", "tok1", "=", "str", "(", "tokp", ")", "[", "0", ":", "len", "(", "str", "(", "tokp", ")", ")", "-", "1", "]", "\n", "tok2", "=", "str", "(", "tokp", ")", "[", "len", "(", "str", "(", "tokp", ")", ")", "-", "1", ":", "len", "(", "str", "(", "tokp", ")", ")", "]", "\n", "all_tokens_data", ".", "append", "(", "\n", "{", "'tokid_begin_char'", ":", "tokp", ".", "idx", ",", "'tokid_end_char'", ":", "tokp", ".", "idx", "+", "len", "(", "str", "(", "tokp", ")", ")", "-", "1", ",", "\n", "'tok_id'", ":", "tok_id", ",", "'tok_text'", ":", "tok1", "}", ")", "\n", "tok_id", "+=", "1", "\n", "all_tokens_data", ".", "append", "(", "{", "'tokid_begin_char'", ":", "tokp", ".", "idx", "+", "len", "(", "str", "(", "tokp", ")", ")", "-", "1", ",", "\n", "'tokid_end_char'", ":", "tokp", ".", "idx", "+", "len", "(", "str", "(", "tokp", ")", ")", ",", "\n", "'tok_id'", ":", "tok_id", ",", "'tok_text'", ":", "tok2", "}", ")", "\n", "tok_id", "+=", "1", "\n", "# this particular case happens when there is a dot after month, sometimes spacy doesn't separate the", "\n", "# dot from the month, ex 'May.' gets parsed as ['May.'] and not ['May','.']", "\n", "", "elif", "len", "(", "found_dot_after_month", ")", "==", "1", "and", "len", "(", "found_dot_after_month", "[", "0", "]", "[", "0", "]", ")", "==", "len", "(", "str", "(", "tokp", ")", ")", ":", "\n", "# print('processing month name ending in .', str(tokp))", "\n", "                ", "tok1", "=", "str", "(", "tokp", ")", "[", "0", ":", "len", "(", "str", "(", "tokp", ")", ")", "-", "1", "]", "\n", "tok2", "=", "str", "(", "tokp", ")", "[", "len", "(", "str", "(", "tokp", ")", ")", "-", "1", ":", "len", "(", "str", "(", "tokp", ")", ")", "]", "\n", "all_tokens_data", ".", "append", "(", "{", "'tokid_begin_char'", ":", "tokp", ".", "idx", ",", "'tokid_end_char'", ":", "tokp", ".", "idx", "+", "len", "(", "str", "(", "tokp", ")", ")", "-", "1", ",", "\n", "'tok_id'", ":", "tok_id", ",", "'tok_text'", ":", "tok1", "}", ")", "\n", "tok_id", "+=", "1", "\n", "all_tokens_data", ".", "append", "(", "{", "'tokid_begin_char'", ":", "tokp", ".", "idx", "+", "len", "(", "str", "(", "tokp", ")", ")", "-", "1", ",", "\n", "'tokid_end_char'", ":", "tokp", ".", "idx", "+", "len", "(", "str", "(", "tokp", ")", ")", ",", "\n", "'tok_id'", ":", "tok_id", ",", "'tok_text'", ":", "tok2", "}", ")", "\n", "tok_id", "+=", "1", "\n", "\n", "", "else", ":", "\n", "                ", "token_data", "=", "{", "'tokid_begin_char'", ":", "tokp", ".", "idx", ",", "'tokid_end_char'", ":", "tokp", ".", "idx", "+", "len", "(", "tokp", ".", "text", ")", ",", "\n", "'tok_id'", ":", "tok_id", ",", "'tok_text'", ":", "tokp", ".", "text", "}", "\n", "all_tokens_data", ".", "append", "(", "token_data", ")", "\n", "tok_id", "+=", "1", "\n", "", "", "return", "[", "{", "'offset'", ":", "tok_info", "[", "'tokid_begin_char'", "]", ",", "\n", "'length'", ":", "tok_info", "[", "'tokid_end_char'", "]", "-", "tok_info", "[", "'tokid_begin_char'", "]", ",", "\n", "'token'", ":", "tok_info", "[", "'tok_text'", "]", "}", "for", "tok_info", "in", "all_tokens_data", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader_bert_hoi.DatasetDWIESpanBertHoi.__init__": [[18, 63], ["torch.utils.data.Dataset.__init__", "print", "os.path.isdir", "print", "tqdm.tqdm.tqdm", "data_reader_bert_hoi.DatasetDWIESpanBertHoi.load_file", "os.listdir", "os.path.join", "data_reader_bert_hoi.DatasetDWIESpanBertHoi.load_file"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.DatasetCPN.load_file", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.DatasetCPN.load_file"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "config", ",", "dictionaries", ",", "linking_candidates", "=", "None", ")", ":", "\n", "# print('TODO FOR ')", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "tag", "=", "config", "[", "'dataset'", "]", "[", "'tag'", "]", "\n", "self", ".", "bert_max_segment_len", "=", "config", "[", "'dataloader'", "]", "[", "'bert_max_segment_len'", "]", "\n", "self", ".", "instances", "=", "[", "]", "\n", "self", ".", "dict_tags", "=", "dictionaries", "[", "'tags'", "]", "\n", "\n", "self", ".", "include_nill_in_candidates", "=", "config", "[", "'dataloader'", "]", "[", "'include_nill_in_candidates'", "]", "\n", "self", ".", "include_none_in_candidates", "=", "config", "[", "'dataloader'", "]", "[", "'include_none_in_candidates'", "]", "\n", "\n", "self", ".", "bert_dictionary", "=", "dictionaries", "[", "'bert_subtokens'", "]", "\n", "self", ".", "dict_relations", "=", "dictionaries", "[", "'relations'", "]", "\n", "self", ".", "dict_entities", ":", "Dictionary", "=", "None", "\n", "if", "'entities'", "in", "dictionaries", ":", "\n", "            ", "self", ".", "dict_entities", ":", "Dictionary", "=", "dictionaries", "[", "'entities'", "]", "\n", "\n", "", "self", ".", "max_span_length", "=", "config", "[", "'model'", "]", "[", "'max_span_length'", "]", "# TODO", "\n", "\n", "self", ".", "is_baseline_linker", "=", "False", "\n", "if", "config", "[", "'output_config'", "]", "[", "'output_content'", "]", ":", "\n", "            ", "self", ".", "output_content", "=", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "output_content", "=", "False", "\n", "", "if", "'linker'", "in", "config", "[", "'model'", "]", ":", "\n", "            ", "self", ".", "is_baseline_linker", "=", "config", "[", "'model'", "]", "[", "'linker'", "]", "[", "'enabled'", "]", "\n", "\n", "# print('NR OF OOV AND TOKENS IN WORDS DITIONARY data_reader BEFORE LOADING: ')", "\n", "# print('\\t OOV: ', self.dict_words.out_of_voc)", "\n", "# print('\\t NR OF TOKENS: ', len(self.dict_words.word2idx))", "\n", "\n", "", "path", "=", "config", "[", "'dataset'", "]", "[", "'filename'", "]", "\n", "\n", "print", "(", "\"Loading {} tag={}\"", ".", "format", "(", "path", ",", "self", ".", "tag", ")", ")", "\n", "\n", "if", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "            ", "for", "filename", "in", "tqdm", "(", "os", ".", "listdir", "(", "path", ")", ")", ":", "\n", "                ", "f", "=", "os", ".", "path", ".", "join", "(", "path", ",", "filename", ")", "\n", "self", ".", "load_file", "(", "f", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "load_file", "(", "path", ")", "\n", "\n", "", "print", "(", "\"done init in DatasetDWIESpanBert\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader_bert_hoi.DatasetDWIESpanBertHoi.get_linker_gold_from_mentions": [[64, 87], ["gold.append"], "methods", ["None"], ["", "def", "get_linker_gold_from_mentions", "(", "self", ",", "data", ")", ":", "\n", "        ", "gold", "=", "[", "]", "\n", "for", "mention", "in", "data", "[", "'mentions'", "]", ":", "\n", "# 19/02/2021 - sometimes if tokenization is not good, some mentions should be ignored (because there is no", "\n", "# token that can be assigned to either the begin or end of the mention)", "\n", "# if mention['token_begin'] is None or mention['token_end'] is None:", "\n", "#     continue", "\n", "            ", "assert", "mention", "[", "'subtoken_begin'", "]", "is", "not", "None", "\n", "assert", "mention", "[", "'subtoken_end'", "]", "is", "not", "None", "\n", "\n", "concept", "=", "data", "[", "'concepts'", "]", "[", "mention", "[", "'concept'", "]", "]", "\n", "\n", "if", "'link'", "in", "concept", ":", "\n", "                ", "gold", ".", "append", "(", "(", "mention", "[", "'subtoken_begin'", "]", ",", "mention", "[", "'subtoken_end'", "]", ",", "concept", "[", "'link'", "]", ")", ")", "\n", "\n", "# (kzaporoj) - the next gold calculation is wrong because only adds correct link if it is present in candidate", "\n", "# list. It doesn't account for the fact that the candidate list can be wrong. Coreflinker can take the link", "\n", "# from other mentions in the same cluster, giving lower results when using this formulation", "\n", "# while the output is actually correct.", "\n", "\n", "# if 'link' in mention:", "\n", "#     gold.append((mention['token_begin'], mention['token_end'], mention['link']))", "\n", "", "", "return", "gold", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader_bert_hoi.DatasetDWIESpanBertHoi.convert": [[88, 235], ["enumerate", "sum", "enumerate", "torch.tensor", "torch.tensor", "list", "list", "list", "list", "zip", "data_reader_bert_hoi.DatasetDWIESpanBertHoi.get_linker_gold_from_mentions", "max", "men_concept[].append", "torch.IntTensor", "torch.FloatTensor", "data_reader_bert_hoi.DatasetDWIESpanBertHoi.bert_dictionary.convert_tokens_to_ids", "torch.tensor.append", "torch.tensor.append", "torch.tensor.sum", "torch.tensor.sum", "len", "len", "len", "len", "len", "len", "len", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.tensor", "torch.IntTensor", "len", "len", "len", "data_reader_bert_hoi.DatasetDWIESpanBertHoi.append", "curr_subtoken_mask.append", "list.append", "list.append", "list.append", "len", "list.append", "list.append", "curr_candidates[].item", "data_reader_bert_hoi.DatasetDWIESpanBertHoi.dict_entities.lookup", "list.append", "curr_candidates[].item", "data_reader_bert_hoi.DatasetDWIESpanBertHoi.dict_entities.lookup", "data_reader_bert_hoi.DatasetDWIESpanBertHoi.dict_entities.lookup", "[].item", "list.append", "list.append"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.DatasetCPN.get_linker_gold_from_mentions", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.convert_tokens_to_ids", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup"], ["", "def", "convert", "(", "self", ",", "data", ")", ":", "\n", "        ", "identifier", "=", "data", "[", "'id'", "]", "\n", "concepts", "=", "data", "[", "'concepts'", "]", "\n", "\n", "# max_span_length = self", "\n", "\n", "subtokens", "=", "data", "[", "'bert_tokenization'", "]", "\n", "# subtoken_map = torch.tensor(data['subtoken_map'], dtype=torch.int)", "\n", "# token_length = subtoken_map.max().item() + 1  # + 1 because zero-based", "\n", "\n", "subtoken_map", "=", "data", "[", "'subtoken_map'", "]", "\n", "token_length", "=", "max", "(", "subtoken_map", ")", "+", "1", "# + 1 because zero-based", "\n", "bert_segments", "=", "data", "[", "'bert_segments'", "]", "\n", "# ['tokens']", "\n", "# begin = data['bert_tokenization']['begin']", "\n", "# end = data['bert_tokenization']['end']", "\n", "# print('DatasetDWIESpanBert: converting for ', identifier)", "\n", "\n", "mentions", "=", "data", "[", "'mentions'", "]", "\n", "\n", "for", "idx_mention", ",", "curr_mention", "in", "enumerate", "(", "mentions", ")", ":", "\n", "            ", "curr_mention", "[", "'candidates'", "]", "=", "[", "]", "# TODO", "\n", "curr_mention", "[", "'scores'", "]", "=", "[", "]", "# TODO", "\n", "men_concept", "=", "data", "[", "'concepts'", "]", "[", "curr_mention", "[", "'concept'", "]", "]", "\n", "if", "'mentions'", "not", "in", "men_concept", ":", "\n", "                ", "men_concept", "[", "'mentions'", "]", "=", "[", "]", "\n", "", "men_concept", "[", "'mentions'", "]", ".", "append", "(", "curr_mention", ")", "\n", "\n", "", "spans", "=", "[", "(", "mention", "[", "'subtoken_begin'", "]", ",", "mention", "[", "'subtoken_end'", "]", ")", "for", "mention", "in", "data", "[", "'mentions'", "]", "]", "\n", "gold_clusters", "=", "[", "[", "(", "mention", "[", "'subtoken_begin'", "]", ",", "mention", "[", "'subtoken_end'", "]", ")", "for", "mention", "in", "concept", "[", "'mentions'", "]", "]", "\n", "for", "concept", "in", "concepts", "if", "'mentions'", "in", "concept", "]", "\n", "gold_clusters", "=", "[", "concept", "for", "concept", "in", "gold_clusters", "if", "len", "(", "concept", ")", ">", "0", "]", "\n", "\n", "linker_candidates", "=", "[", "torch", ".", "IntTensor", "(", "cnd", ")", "for", "cnd", "in", "data", "[", "'all_spans_candidates'", "]", "]", "\n", "linker_scores", "=", "[", "torch", ".", "FloatTensor", "(", "cnd", ")", "for", "cnd", "in", "data", "[", "'all_spans_candidates_scores'", "]", "]", "\n", "linker_targets", "=", "data", "[", "'all_spans_candidates_target'", "]", "\n", "\n", "bert_segms", ",", "bert_segs_mask", "=", "[", "]", ",", "[", "]", "\n", "\n", "num_subtokens", "=", "sum", "(", "[", "len", "(", "s", ")", "for", "s", "in", "bert_segments", "]", ")", "\n", "\n", "# creates segments", "\n", "for", "idx", ",", "sent_tokens", "in", "enumerate", "(", "bert_segments", ")", ":", "\n", "            ", "curr_subtoken_ids", "=", "self", ".", "bert_dictionary", ".", "convert_tokens_to_ids", "(", "sent_tokens", ")", "\n", "curr_subtoken_mask", "=", "[", "1", "]", "*", "len", "(", "curr_subtoken_ids", ")", "\n", "while", "len", "(", "curr_subtoken_ids", ")", "<", "self", ".", "bert_max_segment_len", ":", "\n", "                ", "curr_subtoken_ids", ".", "append", "(", "0", ")", "\n", "curr_subtoken_mask", ".", "append", "(", "0", ")", "\n", "", "bert_segms", ".", "append", "(", "curr_subtoken_ids", ")", "\n", "bert_segs_mask", ".", "append", "(", "curr_subtoken_mask", ")", "\n", "\n", "# bert_segments = np.array(bert_segments)", "\n", "# bert_segs_mask = np.array(bert_segs_mask)", "\n", "\n", "", "bert_segms", "=", "torch", ".", "tensor", "(", "bert_segms", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "bert_segs_mask", "=", "torch", ".", "tensor", "(", "bert_segs_mask", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "assert", "num_subtokens", "==", "bert_segs_mask", ".", "sum", "(", ")", ",", "(", "num_subtokens", ",", "bert_segs_mask", ".", "sum", "(", ")", ")", "\n", "\n", "# filters spans by width", "\n", "f_all_spans", "=", "list", "(", ")", "\n", "f_linker_candidates", "=", "list", "(", ")", "\n", "f_linker_targets", "=", "list", "(", ")", "\n", "f_linker_scores", "=", "list", "(", ")", "\n", "for", "curr_span", ",", "curr_candidates", ",", "curr_target", ",", "curr_scores", "in", "zip", "(", "data", "[", "'all_spans'", "]", ",", "linker_candidates", ",", "\n", "linker_targets", ",", "linker_scores", ")", ":", "\n", "            ", "if", "curr_span", "[", "1", "]", "-", "curr_span", "[", "0", "]", "<", "self", ".", "max_span_length", ":", "\n", "                ", "f_all_spans", ".", "append", "(", "curr_span", ")", "\n", "if", "not", "self", ".", "include_nill_in_candidates", ":", "\n", "                    ", "curr_candidates", "=", "curr_candidates", "[", ":", "-", "1", "]", "\n", "curr_scores", "=", "curr_scores", "[", ":", "-", "1", "]", "\n", "if", "curr_target", ">=", "curr_candidates", ".", "shape", "[", "0", "]", ":", "\n", "                        ", "curr_target", "=", "-", "1", "\n", "\n", "", "", "f_linker_candidates", ".", "append", "(", "curr_candidates", ")", "\n", "f_linker_scores", ".", "append", "(", "curr_scores", ")", "\n", "if", "self", ".", "dict_entities", "is", "None", ":", "\n", "                    ", "f_linker_targets", ".", "append", "(", "-", "1", ")", "\n", "", "elif", "curr_target", ">", "-", "1", "and", "curr_candidates", "[", "curr_target", "]", ".", "item", "(", ")", "==", "self", ".", "dict_entities", ".", "lookup", "(", "'NILL'", ")", "and", "not", "self", ".", "include_nill_in_candidates", ":", "\n", "                    ", "f_linker_targets", ".", "append", "(", "-", "1", ")", "\n", "", "elif", "curr_target", ">", "-", "1", "and", "curr_candidates", "[", "curr_target", "]", ".", "item", "(", ")", "==", "self", ".", "dict_entities", ".", "lookup", "(", "'NONE'", ")", "and", "not", "self", ".", "include_none_in_candidates", ":", "\n", "                    ", "f_linker_targets", ".", "append", "(", "-", "1", ")", "\n", "", "elif", "self", ".", "include_nill_in_candidates", "and", "curr_target", "==", "-", "1", ":", "\n", "# link does not exist in candidate list, if we are running the baseline, this would be equivalent", "\n", "# of nill and belongs to unsolvable cases by the baseline, since it strictly depends on the", "\n", "# elements in the candidate list; the prediction of this NILL will result in a false negative", "\n", "# impacting the recall (accuracy)", "\n", "\n", "                    ", "nill_id", "=", "self", ".", "dict_entities", ".", "lookup", "(", "'NILL'", ")", "\n", "nill_idx", "=", "(", "curr_candidates", "==", "nill_id", ")", ".", "nonzero", "(", "as_tuple", "=", "True", ")", "[", "0", "]", ".", "item", "(", ")", "\n", "f_linker_targets", ".", "append", "(", "nill_idx", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "f_linker_targets", ".", "append", "(", "curr_target", ")", "\n", "\n", "", "", "", "assert", "len", "(", "f_all_spans", ")", "==", "len", "(", "f_linker_candidates", ")", "\n", "assert", "len", "(", "f_all_spans", ")", "==", "len", "(", "f_linker_targets", ")", "\n", "assert", "len", "(", "f_all_spans", ")", "==", "len", "(", "f_linker_scores", ")", "\n", "\n", "linker_gold", "=", "self", ".", "get_linker_gold_from_mentions", "(", "data", ")", "\n", "\n", "# text_embedder = {", "\n", "#     'subtokens': torch.LongTensor(self.bert_dictionary.convert_tokens_to_ids(subtokens)),", "\n", "# }", "\n", "\n", "to_ret", "=", "{", "\n", "'id'", ":", "identifier", ",", "\n", "'metadata_tags'", ":", "data", "[", "'tags'", "]", ",", "\n", "# 'gold_tags_indices': self.get_span_tags(mentions, concepts),", "\n", "# 'content': data['content'], # TODO: do we need this??? should take considerable space in memory I guess", "\n", "'bert_segments'", ":", "bert_segms", ",", "\n", "'bert_segs_mask'", ":", "bert_segs_mask", ",", "\n", "# 'relations2': self.get_relations(data),", "\n", "'num_concepts'", ":", "len", "(", "gold_clusters", ")", ",", "\n", "'gold_clusters'", ":", "gold_clusters", ",", "\n", "# TODO: check this comparing with data_reader.py where mention['concept']['concept'] is returned", "\n", "'clusters'", ":", "torch", ".", "IntTensor", "(", "[", "mention", "[", "'concept'", "]", "for", "mention", "in", "mentions", "]", ")", ",", "\n", "# 'spans': spans,", "\n", "# TODO: we are here incorporating this information in 'gold_starts' of pruner.py", "\n", "'gold_subtokens_start'", ":", "torch", ".", "IntTensor", "(", "[", "s", "[", "0", "]", "for", "s", "in", "spans", "]", ")", ",", "\n", "'gold_subtokens_end'", ":", "torch", ".", "IntTensor", "(", "[", "s", "[", "1", "]", "for", "s", "in", "spans", "]", ")", ",", "\n", "# 'all_spans': f_all_spans,", "\n", "'all_spans_tensor'", ":", "torch", ".", "tensor", "(", "f_all_spans", ")", ",", "\n", "'linker_candidates'", ":", "f_linker_candidates", ",", "\n", "'linker_targets'", ":", "f_linker_targets", ",", "\n", "'linker_scores'", ":", "f_linker_scores", ",", "\n", "'begin_token'", ":", "data", "[", "'begin_token'", "]", ",", "\n", "'end_token'", ":", "data", "[", "'end_token'", "]", ",", "\n", "# 'all_spans': data['all_spans'],", "\n", "# 'linker_candidates': linker_candidates,", "\n", "# 'linker_targets': linker_targets,", "\n", "# 'linker_scores': linker_scores,", "\n", "'linker_gold'", ":", "linker_gold", ",", "\n", "'subtoken_map'", ":", "subtoken_map", ",", "\n", "'token_length'", ":", "token_length", ",", "\n", "'sentence_map'", ":", "torch", ".", "IntTensor", "(", "data", "[", "'sentence_map'", "]", ")", "\n", "}", "\n", "\n", "# TODO: transform to torch", "\n", "if", "self", ".", "output_content", ":", "\n", "            ", "to_ret", "[", "'content'", "]", "=", "data", "[", "'content'", "]", "\n", "", "else", ":", "\n", "            ", "to_ret", "[", "'content'", "]", "=", "''", "\n", "\n", "", "return", "to_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader_bert_hoi.DatasetDWIESpanBertHoi.load_file": [[236, 254], ["filename.endswith", "filename.endswith", "data_reader_bert_hoi.DatasetDWIESpanBertHoi.load_json", "data_reader_bert_hoi.DatasetDWIESpanBertHoi.load_jsonl", "BaseException", "print", "print", "time.sleep", "data_reader_bert_hoi.DatasetDWIESpanBertHoi.load_file", "print", "random.randint"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.load_json", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.load_jsonl", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.DatasetCPN.load_file", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "load_file", "(", "self", ",", "filename", ",", "retry", "=", "0", ")", ":", "\n", "        ", "if", "filename", ".", "endswith", "(", "'.json'", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "load_json", "(", "filename", ")", "\n", "", "except", "OSError", "as", "exept", ":", "\n", "# tries 3 more times with random sleep", "\n", "                ", "if", "retry", "<", "10", ":", "\n", "                    ", "print", "(", "'following exept: '", ",", "exept", ".", "strerror", ")", "\n", "print", "(", "'except to load, trying again: '", ",", "filename", ",", "' for retry: '", ",", "retry", ")", "\n", "sleep", "(", "random", ".", "randint", "(", "5", ",", "10", ")", ")", "\n", "self", ".", "load_file", "(", "filename", ",", "retry", "=", "retry", "+", "1", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "'NO MORE TERIES LEFT, FAILING'", ")", "\n", "raise", "exept", "\n", "", "", "", "elif", "filename", ".", "endswith", "(", "'.jsonl'", ")", ":", "\n", "            ", "self", ".", "load_jsonl", "(", "filename", ")", "\n", "", "else", ":", "\n", "            ", "raise", "BaseException", "(", "\"unknown file type:\"", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader_bert_hoi.DatasetDWIESpanBertHoi.load_json": [[255, 263], ["open", "json.load", "print", "data_reader_bert_hoi.DatasetDWIESpanBertHoi.instances.append", "data_reader_bert_hoi.DatasetDWIESpanBertHoi.convert"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile.LineFileWriter.convert"], ["", "", "def", "load_json", "(", "self", ",", "filename", ")", ":", "\n", "        ", "with", "open", "(", "filename", ",", "'r'", ")", "as", "file", ":", "\n", "            ", "data", "=", "json", ".", "load", "(", "file", ")", "\n", "if", "'tags'", "in", "data", ":", "\n", "                ", "if", "self", ".", "tag", "in", "data", "[", "'tags'", "]", ":", "\n", "                    ", "self", ".", "instances", ".", "append", "(", "self", ".", "convert", "(", "data", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "print", "(", "'WARNING (kzaporoj) - NO tags IN '", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader_bert_hoi.DatasetDWIESpanBertHoi.load_jsonl": [[264, 270], ["open", "json.loads", "line.rstrip", "data_reader_bert_hoi.DatasetDWIESpanBertHoi.instances.append", "data_reader_bert_hoi.DatasetDWIESpanBertHoi.convert"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile.LineFileWriter.convert"], ["", "", "", "def", "load_jsonl", "(", "self", ",", "filename", ")", ":", "\n", "        ", "with", "open", "(", "filename", ",", "'r'", ")", "as", "file", ":", "\n", "            ", "for", "line", "in", "file", ":", "\n", "                ", "data", "=", "json", ".", "loads", "(", "line", ".", "rstrip", "(", ")", ")", "\n", "if", "self", ".", "tag", "in", "data", "[", "'tags'", "]", ":", "\n", "                    ", "self", ".", "instances", ".", "append", "(", "self", ".", "convert", "(", "data", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader_bert_hoi.DatasetDWIESpanBertHoi.get_span_tags": [[271, 280], ["spans.extend", "data_reader_bert_hoi.DatasetDWIESpanBertHoi.dict_tags.lookup"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup"], ["", "", "", "", "def", "get_span_tags", "(", "self", ",", "mentions", ",", "concepts", ")", ":", "\n", "        ", "spans", "=", "[", "]", "\n", "for", "mention", "in", "mentions", ":", "\n", "# if mention['token_begin'] is not None and mention['token_end'] is not None:", "\n", "            ", "assert", "mention", "[", "'subtoken_begin'", "]", "is", "not", "None", "\n", "assert", "mention", "[", "'subtoken_end'", "]", "is", "not", "None", "\n", "spans", ".", "extend", "(", "[", "(", "mention", "[", "'subtoken_begin'", "]", ",", "mention", "[", "'subtoken_end'", "]", ",", "self", ".", "dict_tags", ".", "lookup", "(", "tag", ")", ")", "for", "tag", "in", "\n", "concepts", "[", "mention", "[", "'concept'", "]", "]", "[", "'tags'", "]", "]", ")", "\n", "", "return", "spans", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader_bert_hoi.DatasetDWIESpanBertHoi.get_relations": [[281, 284], ["data_reader_bert_hoi.DatasetDWIESpanBertHoi.dict_relations.lookup"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup"], ["", "def", "get_relations", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "[", "(", "relation", "[", "'s'", "]", ",", "relation", "[", "'o'", "]", ",", "self", ".", "dict_relations", ".", "lookup", "(", "relation", "[", "'p'", "]", ")", ")", "for", "relation", "in", "\n", "data", "[", "'relations'", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader_bert_hoi.DatasetDWIESpanBertHoi.__getitem__": [[285, 287], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "instances", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader_bert_hoi.DatasetDWIESpanBertHoi.__len__": [[288, 290], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "instances", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderDoc.__init__": [[71, 84], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "tags", ",", "content", ",", "begin", ",", "end", ",", "coref_pointers", "=", "{", "}", ",", "output_config", "=", "None", ")", ":", "\n", "        ", "self", ".", "tags", "=", "tags", "\n", "self", ".", "content", "=", "content", "\n", "self", ".", "begin", "=", "begin", "\n", "self", ".", "end", "=", "end", "\n", "self", ".", "coref_pointers", "=", "coref_pointers", "\n", "self", ".", "identifier", "=", "None", "\n", "self", ".", "mentions", "=", "[", "]", "\n", "self", ".", "concepts", "=", "[", "]", "\n", "self", ".", "relations", "=", "[", "]", "\n", "self", ".", "mention_relations", "=", "[", "]", "\n", "self", ".", "span2mention", "=", "{", "}", "\n", "self", ".", "output_config", "=", "output_config", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderDoc.set_id": [[85, 87], ["None"], "methods", ["None"], ["", "def", "set_id", "(", "self", ",", "identifier", ")", ":", "\n", "        ", "self", ".", "identifier", "=", "identifier", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderDoc.add_concept": [[88, 92], ["builder.BuilderConcept", "builder.BuilderDoc.concepts.append"], "methods", ["None"], ["", "def", "add_concept", "(", "self", ")", ":", "\n", "        ", "concept", "=", "BuilderConcept", "(", "self", ")", "\n", "self", ".", "concepts", ".", "append", "(", "concept", ")", "\n", "return", "concept", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderDoc.is_existent_mention": [[93, 96], ["None"], "methods", ["None"], ["", "def", "is_existent_mention", "(", "self", ",", "begin", ",", "end", ")", ":", "\n", "        ", "span", "=", "(", "begin", ",", "end", ")", "\n", "return", "span", "in", "self", ".", "span2mention", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderDoc.add_mention": [[97, 108], ["builder.BuilderDoc.mentions.append", "builder.BuilderMention", "builder.BuilderMention", "builder.BuilderDoc.coref_pointers.get"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get"], ["", "def", "add_mention", "(", "self", ",", "begin", ",", "end", ")", ":", "\n", "        ", "span", "=", "(", "begin", ",", "end", ")", "\n", "if", "span", "not", "in", "self", ".", "span2mention", ":", "\n", "            ", "if", "self", ".", "coref_pointers", "is", "not", "None", ":", "\n", "                ", "mention", "=", "BuilderMention", "(", "self", ",", "begin", ",", "end", ",", "self", ".", "coref_pointers", ".", "get", "(", "(", "begin", ",", "end", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "mention", "=", "BuilderMention", "(", "self", ",", "begin", ",", "end", ",", "None", ")", "\n", "\n", "", "self", ".", "mentions", ".", "append", "(", "mention", ")", "\n", "self", ".", "span2mention", "[", "span", "]", "=", "mention", "\n", "", "return", "self", ".", "span2mention", "[", "span", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderDoc.add_relation": [[109, 114], ["builder.BuilderRelation", "builder.BuilderDoc.relations.append", "src.add_relation", "dst.add_relation"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderConcept.add_relation", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderConcept.add_relation"], ["", "def", "add_relation", "(", "self", ",", "src", ",", "dst", ",", "rel", ")", ":", "\n", "        ", "relation", "=", "BuilderRelation", "(", "src", ",", "dst", ",", "rel", ")", "\n", "self", ".", "relations", ".", "append", "(", "relation", ")", "\n", "src", ".", "add_relation", "(", "relation", ")", "\n", "dst", ".", "add_relation", "(", "relation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderDoc.add_mention_relation": [[115, 120], ["builder.BuilderRelation", "builder.BuilderDoc.mention_relations.append", "src.add_mention_relation", "dst.add_mention_relation"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderMention.add_mention_relation", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderMention.add_mention_relation"], ["", "def", "add_mention_relation", "(", "self", ",", "src", ",", "dst", ",", "rel", ")", ":", "\n", "        ", "relation", "=", "BuilderRelation", "(", "src", ",", "dst", ",", "rel", ")", "\n", "self", ".", "mention_relations", ".", "append", "(", "relation", ")", "\n", "src", ".", "add_mention_relation", "(", "relation", ")", "\n", "dst", ".", "add_mention_relation", "(", "relation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderDoc.get_mention": [[121, 126], ["None"], "methods", ["None"], ["", "def", "get_mention", "(", "self", ",", "begin", ",", "end", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "mentions", ":", "\n", "            ", "if", "m", ".", "token_begin", "==", "begin", "and", "m", ".", "token_end", "==", "end", ":", "\n", "                ", "return", "m", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderDoc.get_concept": [[127, 136], ["builder.BuilderDoc.get_mention", "concepts.append", "print"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderDoc.get_mention", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "get_concept", "(", "self", ",", "cluster", ")", ":", "\n", "        ", "concepts", "=", "[", "]", "\n", "for", "begin", ",", "end", "in", "cluster", ":", "\n", "            ", "mention", "=", "self", ".", "get_mention", "(", "begin", ",", "end", ")", "\n", "concepts", ".", "append", "(", "mention", ".", "concept", ")", "\n", "", "for", "c", "in", "concepts", ":", "\n", "            ", "if", "c", "!=", "concepts", "[", "0", "]", ":", "\n", "                ", "print", "(", "\"RELATION HAS MULTIPLE CONCEPTS IN CLUSTER\"", ")", "\n", "", "", "return", "concepts", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderDoc.json": [[137, 185], ["sorted", "concept.is_visible", "builder.BuilderDoc.add_concept().add_mention2", "m.json", "c.json", "r.json", "r.json", "len", "builder.BuilderDoc.add_concept", "zip"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderConcept.is_visible", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderConcept.add_mention2", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderRelation.json", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderRelation.json", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderRelation.json", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderRelation.json", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderDoc.add_concept"], ["", "def", "json", "(", "self", ")", ":", "\n", "# sorts mentions by position", "\n", "        ", "self", ".", "mentions", "=", "sorted", "(", "self", ".", "mentions", ",", "key", "=", "lambda", "x", ":", "x", ".", "char_begin", ")", "\n", "\n", "# create concepts for mentions without one", "\n", "for", "mention", "in", "self", ".", "mentions", ":", "\n", "            ", "if", "mention", ".", "concept", "is", "None", ":", "\n", "                ", "self", ".", "add_concept", "(", ")", ".", "add_mention2", "(", "mention", ")", "\n", "\n", "# number concepts", "\n", "", "", "idx", "=", "0", "\n", "for", "concept", "in", "self", ".", "concepts", ":", "\n", "            ", "concept", ".", "_visible", "=", "concept", ".", "is_visible", "(", ")", "\n", "if", "concept", ".", "_visible", ":", "\n", "                ", "concept", ".", "idx", "=", "idx", "\n", "idx", "+=", "1", "\n", "\n", "# number mentions", "\n", "", "", "idx", "=", "0", "\n", "for", "mention", "in", "self", ".", "mentions", ":", "\n", "            ", "mention", ".", "_visible", "=", "mention", ".", "concept", ".", "_visible", "or", "len", "(", "mention", ".", "mention_relations", ")", ">", "0", "or", "mention", ".", "candidates", "is", "not", "None", "or", "mention", ".", "link_gold", "is", "not", "None", "or", "mention", ".", "link_pred", "is", "not", "None", "\n", "if", "mention", ".", "_visible", ":", "\n", "                ", "mention", ".", "idx", "=", "idx", "\n", "idx", "+=", "1", "\n", "\n", "", "", "tokenization", "=", "{", "}", "\n", "\n", "if", "self", ".", "output_config", "[", "'output_tokens'", "]", ":", "\n", "            ", "tokenization", "=", "{", "\n", "'tokens'", ":", "[", "self", ".", "content", "[", "b", ":", "e", "]", "for", "b", ",", "e", "in", "zip", "(", "self", ".", "begin", ",", "self", ".", "end", ")", "]", ",", "\n", "'begin'", ":", "self", ".", "begin", ",", "\n", "'end'", ":", "self", ".", "end", "}", "\n", "", "return", "{", "\n", "'id'", ":", "self", ".", "identifier", ",", "\n", "'tags'", ":", "self", ".", "tags", ",", "\n", "'tokenization'", ":", "tokenization", ",", "\n", "# 'tokenization': {", "\n", "#     'tokens': [self.content[b:e] for b, e in zip(self.begin, self.end)],", "\n", "#     'begin': self.begin,", "\n", "#     'end': self.end} if self.output_config['output_tokens'] else {},", "\n", "'content'", ":", "self", ".", "content", "if", "self", ".", "output_config", "[", "'output_content'", "]", "else", "''", ",", "\n", "'mentions'", ":", "[", "m", ".", "json", "(", ")", "for", "m", "in", "self", ".", "mentions", "if", "m", ".", "_visible", "]", ",", "\n", "'concepts'", ":", "[", "c", ".", "json", "(", ")", "for", "c", "in", "self", ".", "concepts", "if", "c", ".", "_visible", "]", ",", "\n", "'relations'", ":", "[", "r", ".", "json", "(", ")", "for", "r", "in", "self", ".", "relations", "]", ",", "\n", "'mention_relations'", ":", "[", "r", ".", "json", "(", ")", "for", "r", "in", "self", ".", "mention_relations", "]", ",", "\n", "'frames'", ":", "[", "]", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderConcept.__init__": [[190, 195], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "doc", ")", ":", "\n", "        ", "self", ".", "doc", "=", "doc", "\n", "self", ".", "idx", "=", "-", "1", "\n", "self", ".", "mentions", "=", "[", "]", "\n", "self", ".", "relations", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderConcept.add_mention": [[196, 200], ["builder.BuilderConcept.doc.add_mention", "builder.BuilderConcept.mentions.append"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderConcept.add_mention"], ["", "def", "add_mention", "(", "self", ",", "begin", ",", "end", ")", ":", "\n", "        ", "mention", "=", "self", ".", "doc", ".", "add_mention", "(", "begin", ",", "end", ")", "\n", "mention", ".", "concept", "=", "self", "\n", "self", ".", "mentions", ".", "append", "(", "mention", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderConcept.add_mention2": [[201, 204], ["builder.BuilderConcept.mentions.append"], "methods", ["None"], ["", "def", "add_mention2", "(", "self", ",", "mention", ")", ":", "\n", "        ", "mention", ".", "concept", "=", "self", "\n", "self", ".", "mentions", ".", "append", "(", "mention", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderConcept.add_relation": [[205, 207], ["builder.BuilderConcept.relations.append"], "methods", ["None"], ["", "def", "add_relation", "(", "self", ",", "relation", ")", ":", "\n", "        ", "self", ".", "relations", ".", "append", "(", "relation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderConcept.is_visible": [[208, 210], ["len", "len", "len", "builder.BuilderConcept.get_tags"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderConcept.get_tags"], ["", "def", "is_visible", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "get_tags", "(", ")", ")", ">", "0", "or", "len", "(", "self", ".", "mentions", ")", ">", "1", "or", "len", "(", "self", ".", "relations", ")", ">", "0", "or", "self", ".", "doc", ".", "singletons", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderConcept.get_text": [[211, 216], ["len", "len"], "methods", ["None"], ["", "def", "get_text", "(", "self", ")", ":", "\n", "        ", "text", "=", "None", "\n", "for", "mention", "in", "self", ".", "mentions", ":", "\n", "            ", "text", "=", "mention", ".", "text", "if", "text", "is", "None", "or", "len", "(", "text", ")", "<", "len", "(", "mention", ".", "text", ")", "else", "text", "\n", "", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderConcept.get_tags": [[217, 222], ["set", "set.update"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.update"], ["", "def", "get_tags", "(", "self", ")", ":", "\n", "        ", "tags", "=", "set", "(", ")", "\n", "for", "mention", "in", "self", ".", "mentions", ":", "\n", "            ", "tags", ".", "update", "(", "mention", ".", "tags", ")", "\n", "", "return", "tags", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderConcept.most_common": [[223, 226], ["max", "set"], "methods", ["None"], ["", "def", "most_common", "(", "self", ",", "lst", ")", ":", "\n", "# todo: !! in case of a tie, chose the one entity with most links in the corpus, right??", "\n", "        ", "return", "max", "(", "set", "(", "lst", ")", ",", "key", "=", "lst", ".", "count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderConcept.get_link_gold": [[227, 233], ["builder.BuilderConcept.most_common"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderConcept.most_common"], ["", "def", "get_link_gold", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n\n        :return: gets the link that repeats the most in the mentions of a particular concept.\n        \"\"\"", "\n", "return", "self", ".", "most_common", "(", "[", "m", ".", "link_gold", "for", "m", "in", "self", ".", "mentions", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderConcept.get_link_pred": [[234, 240], ["builder.BuilderConcept.most_common"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderConcept.most_common"], ["", "def", "get_link_pred", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n\n        :return: gets the link that repeats the most in the mentions of a particular concept.\n        \"\"\"", "\n", "return", "self", ".", "most_common", "(", "[", "m", ".", "link_pred", "for", "m", "in", "self", ".", "mentions", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderConcept.json": [[241, 248], ["builder.BuilderConcept.get_text", "len", "list", "builder.BuilderConcept.get_link_pred", "builder.BuilderConcept.get_tags"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderConcept.get_text", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderConcept.get_link_pred", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderConcept.get_tags"], ["", "def", "json", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "'concept'", ":", "self", ".", "idx", ",", "\n", "'text'", ":", "self", ".", "get_text", "(", ")", ",", "\n", "'count'", ":", "len", "(", "self", ".", "mentions", ")", ",", "\n", "'tags'", ":", "list", "(", "self", ".", "get_tags", "(", ")", ")", ",", "\n", "'link_pred'", ":", "self", ".", "get_link_pred", "(", ")", "\n", "# 'link': self.get_link_gold() # (kzaporoj) - doesn't make sense to me to have the gold \"link\" since the", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderMention.__init__": [[255, 291], ["set"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "doc", ",", "token_begin", ",", "token_end", ",", "coref_pointer", "=", "None", ")", ":", "\n", "        ", "self", ".", "tags", "=", "set", "(", ")", "\n", "self", ".", "token_begin", "=", "token_begin", "\n", "self", ".", "token_end", "=", "token_end", "\n", "self", ".", "char_begin", "=", "doc", ".", "begin", "[", "token_begin", "]", "\n", "self", ".", "char_end", "=", "doc", ".", "end", "[", "token_end", "]", "\n", "self", ".", "text", "=", "doc", ".", "content", "[", "self", ".", "char_begin", ":", "self", ".", "char_end", "]", "\n", "self", ".", "concept", "=", "None", "\n", "self", ".", "mention_relations", "=", "[", "]", "\n", "self", ".", "idx", "=", "-", "1", "\n", "self", ".", "candidates", "=", "None", "\n", "self", ".", "scores", "=", "None", "# these are linking scores", "\n", "self", ".", "coref_scores", "=", "None", "\n", "self", ".", "link_gold", "=", "None", "\n", "self", ".", "link_pred", "=", "None", "\n", "\n", "self", ".", "coref_connection_type", "=", "None", "\n", "self", ".", "coref_connection_pointer", "=", "None", "\n", "\n", "if", "coref_pointer", "is", "not", "None", ":", "\n", "            ", "self", ".", "coref_connection_type", "=", "coref_pointer", "[", "'coref_connection_type'", "]", "\n", "# TODO!!! here also the scoring/position of mention_self and mention_other!!!", "\n", "# if self.coref_connection_type == 'mention_other':", "\n", "if", "'mention'", "in", "self", ".", "coref_connection_type", ":", "\n", "# print('coref_pointer is ', coref_pointer)", "\n", "                ", "doc_begin", "=", "doc", ".", "begin", "[", "coref_pointer", "[", "'coref_connection_pointer'", "]", "[", "0", "]", "]", "\n", "doc_end", "=", "doc", ".", "end", "[", "coref_pointer", "[", "'coref_connection_pointer'", "]", "[", "1", "]", "]", "\n", "self", ".", "coref_connection_pointer", "=", "{", "'begin'", ":", "doc_begin", ",", "\n", "'end'", ":", "doc_end", ",", "\n", "'text'", ":", "doc", ".", "content", "[", "doc_begin", ":", "doc_end", "]", ",", "\n", "'score'", ":", "coref_pointer", "[", "'coref_connection_score'", "]", "\n", "# 'score': coref_pointer['coref_connection_score']", "\n", "# if 'coref_connection_score' in coref_pointer else None # kzaporoj(08/12/2020)", "\n", "}", "\n", "", "elif", "self", ".", "coref_connection_type", "==", "'link'", ":", "\n", "                ", "self", ".", "coref_connection_pointer", "=", "coref_pointer", "[", "'coref_connection_pointer'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderMention.add_tag": [[292, 294], ["builder.BuilderMention.tags.add"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add"], ["", "", "", "def", "add_tag", "(", "self", ",", "tag", ")", ":", "\n", "        ", "self", ".", "tags", ".", "add", "(", "tag", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderMention.add_mention_relation": [[295, 297], ["builder.BuilderMention.mention_relations.append"], "methods", ["None"], ["", "def", "add_mention_relation", "(", "self", ",", "relation", ")", ":", "\n", "        ", "self", ".", "mention_relations", ".", "append", "(", "relation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderMention.add_candidates_and_scores": [[298, 301], ["None"], "methods", ["None"], ["", "def", "add_candidates_and_scores", "(", "self", ",", "candidates", ",", "scores", ")", ":", "\n", "        ", "self", ".", "candidates", "=", "candidates", "\n", "self", ".", "scores", "=", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderMention.add_coref_scores": [[302, 304], ["None"], "methods", ["None"], ["", "def", "add_coref_scores", "(", "self", ",", "coref_scores", ")", ":", "\n", "        ", "self", ".", "coref_scores", "=", "coref_scores", "\n", "# print('in mention about to add the following coref_scores: ', coref_scores)", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderMention.add_link_gold": [[306, 308], ["None"], "methods", ["None"], ["", "def", "add_link_gold", "(", "self", ",", "link", ")", ":", "\n", "        ", "self", ".", "link_gold", "=", "link", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderMention.add_link_pred": [[309, 311], ["None"], "methods", ["None"], ["", "def", "add_link_pred", "(", "self", ",", "link", ")", ":", "\n", "        ", "self", ".", "link_pred", "=", "link", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderMention.json": [[312, 338], ["list"], "methods", ["None"], ["", "def", "json", "(", "self", ")", ":", "\n", "        ", "out", "=", "{", "\n", "'concept'", ":", "self", ".", "concept", ".", "idx", ",", "\n", "'begin'", ":", "self", ".", "char_begin", ",", "\n", "'end'", ":", "self", ".", "char_end", ",", "\n", "'text'", ":", "self", ".", "text", ",", "\n", "'tags'", ":", "list", "(", "self", ".", "tags", ")", "\n", "}", "\n", "if", "self", ".", "candidates", "is", "not", "None", ":", "\n", "            ", "out", "[", "'candidates'", "]", "=", "self", ".", "candidates", "\n", "out", "[", "'scores'", "]", "=", "self", ".", "scores", "\n", "\n", "", "if", "self", ".", "coref_scores", "is", "not", "None", ":", "\n", "            ", "out", "[", "'coref_scores'", "]", "=", "self", ".", "coref_scores", "\n", "\n", "", "if", "self", ".", "link_gold", "is", "not", "None", ":", "\n", "            ", "out", "[", "'link'", "]", "=", "self", ".", "link_gold", "\n", "", "if", "self", ".", "link_pred", "is", "not", "None", ":", "\n", "            ", "out", "[", "'link_pred'", "]", "=", "self", ".", "link_pred", "\n", "\n", "", "if", "self", ".", "coref_connection_type", "is", "not", "None", ":", "\n", "            ", "out", "[", "'coref_connection_type'", "]", "=", "self", ".", "coref_connection_type", "\n", "\n", "", "if", "self", ".", "coref_connection_pointer", "is", "not", "None", ":", "\n", "            ", "out", "[", "'coref_connection_pointer'", "]", "=", "self", ".", "coref_connection_pointer", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderRelation.__init__": [[342, 346], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "src", ",", "dst", ",", "rel", ")", ":", "\n", "        ", "self", ".", "src", "=", "src", "\n", "self", ".", "dst", "=", "dst", "\n", "self", ".", "rel", "=", "rel", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderRelation.json": [[347, 352], ["None"], "methods", ["None"], ["", "def", "json", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "'s'", ":", "self", ".", "src", ".", "idx", ",", "\n", "'p'", ":", "self", ".", "rel", ",", "\n", "'o'", ":", "self", ".", "dst", ".", "idx", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.convert_to_json": [[1, 67], ["builder.BuilderDoc", "builder.BuilderDoc.set_id", "builder.BuilderDoc.json", "builder.BuilderDoc.add_mention", "builder.add_mention.add_tag", "coref_scores.items", "builder.BuilderDoc.add_concept", "builder.BuilderDoc.get_concept", "builder.BuilderDoc.get_concept", "builder.BuilderDoc.add_relation", "builder.BuilderDoc.add_mention", "builder.BuilderDoc.add_mention", "builder.BuilderDoc.add_mention_relation", "builder.BuilderDoc.add_mention", "builder.add_mention.add_candidates_and_scores", "builder.BuilderDoc.add_mention", "builder.add_mention.add_link_pred", "builder.BuilderDoc.is_existent_mention", "builder.add_concept.add_mention", "builder.BuilderDoc.add_mention", "builder.add_mention.add_coref_scores", "builder.BuilderDoc.add_mention", "builder.add_mention.add_link_gold"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderDoc.set_id", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderRelation.json", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderConcept.add_mention", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderMention.add_tag", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderDoc.add_concept", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderDoc.get_concept", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderDoc.get_concept", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderConcept.add_relation", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderConcept.add_mention", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderConcept.add_mention", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderMention.add_mention_relation", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderConcept.add_mention", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderMention.add_candidates_and_scores", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderConcept.add_mention", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderMention.add_link_pred", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderDoc.is_existent_mention", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderConcept.add_mention", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderConcept.add_mention", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderMention.add_coref_scores", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderConcept.add_mention", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.BuilderMention.add_link_gold"], ["def", "convert_to_json", "(", "identifier", ",", "tags", ",", "content", ",", "begin", ",", "end", ",", "ner", ",", "coref", ",", "\n", "coref_pointers", ",", "coref_scores", ",", "\n", "rels", ",", "mention_rels", ",", "links_scores", ",", "links_gold", ",", "\n", "links_pred", ",", "singletons", "=", "False", ",", "output_config", "=", "None", ")", ":", "\n", "    ", "builder", "=", "BuilderDoc", "(", "tags", ",", "content", ",", "begin", ",", "end", ",", "coref_pointers", "=", "coref_pointers", ",", "output_config", "=", "output_config", ")", "\n", "builder", ".", "set_id", "(", "identifier", ")", "\n", "builder", ".", "singletons", "=", "singletons", "\n", "\n", "for", "begin", ",", "end", ",", "tag", "in", "ner", ":", "\n", "        ", "mention", "=", "builder", ".", "add_mention", "(", "begin", ",", "end", "-", "1", ")", "# exclusive", "\n", "mention", ".", "add_tag", "(", "tag", ")", "\n", "\n", "", "if", "coref", "is", "not", "None", ":", "\n", "        ", "for", "cluster", "in", "coref", ":", "\n", "            ", "concept", "=", "builder", ".", "add_concept", "(", ")", "\n", "for", "begin", ",", "end", "in", "cluster", ":", "\n", "                ", "concept", ".", "add_mention", "(", "begin", ",", "end", ")", "\n", "\n", "", "", "", "if", "rels", "is", "not", "None", ":", "\n", "        ", "for", "src_cluster", ",", "dst_cluster", ",", "rel", "in", "rels", ":", "\n", "            ", "src", "=", "builder", ".", "get_concept", "(", "src_cluster", ")", "\n", "dst", "=", "builder", ".", "get_concept", "(", "dst_cluster", ")", "\n", "builder", ".", "add_relation", "(", "src", ",", "dst", ",", "rel", ")", "\n", "\n", "", "", "if", "mention_rels", "is", "not", "None", ":", "\n", "        ", "for", "src_mention", ",", "rel", ",", "dst_mention", "in", "mention_rels", ":", "\n", "            ", "src", "=", "builder", ".", "add_mention", "(", "src_mention", "[", "0", "]", ",", "src_mention", "[", "1", "]", ")", "\n", "dst", "=", "builder", ".", "add_mention", "(", "dst_mention", "[", "0", "]", ",", "dst_mention", "[", "1", "]", ")", "\n", "builder", ".", "add_mention_relation", "(", "src", ",", "dst", ",", "rel", ")", "\n", "\n", "", "", "if", "links_scores", "is", "not", "None", ":", "\n", "        ", "for", "(", "begin", ",", "end", ")", ",", "candidates", ",", "scores", "in", "links_scores", ":", "\n", "            ", "mention", "=", "builder", ".", "add_mention", "(", "begin", ",", "end", ")", "# inclusive", "\n", "mention", ".", "add_candidates_and_scores", "(", "candidates", ",", "scores", ")", "\n", "\n", "", "", "if", "coref_scores", "is", "not", "None", ":", "\n", "# print('in builder the coref_scores are: ', coref_scores)", "\n", "        ", "for", "(", "begin", ",", "end", ")", ",", "candidates_and_scores", "in", "coref_scores", ".", "items", "(", ")", ":", "\n", "            ", "if", "(", "begin", ",", "end", ")", "in", "builder", ".", "span2mention", ":", "\n", "                ", "mention", "=", "builder", ".", "add_mention", "(", "begin", ",", "end", ")", "\n", "cand_scores_char_text", "=", "[", "{", "'span'", ":", "(", "builder", ".", "begin", "[", "k", "[", "'span'", "]", "[", "0", "]", "]", ",", "builder", ".", "end", "[", "k", "[", "'span'", "]", "[", "1", "]", "]", ")", ",", "\n", "'score'", ":", "k", "[", "'score'", "]", ",", "\n", "'text'", ":", "builder", ".", "content", "[", "\n", "builder", ".", "begin", "[", "k", "[", "'span'", "]", "[", "0", "]", "]", ":", "builder", ".", "end", "[", "k", "[", "'span'", "]", "[", "1", "]", "]", "]", "}", "\n", "for", "k", "in", "candidates_and_scores", "]", "\n", "mention", ".", "add_coref_scores", "(", "cand_scores_char_text", ")", "\n", "\n", "", "", "", "if", "links_pred", "is", "not", "None", ":", "\n", "# span_to_pred_link = dict()", "\n", "        ", "for", "span_start", ",", "span_end", ",", "link_pred", "in", "links_pred", ":", "\n", "# if not output_config['output_none_mentions']", "\n", "            ", "mention", "=", "builder", ".", "add_mention", "(", "span_start", ",", "span_end", ")", "\n", "# span_to_pred_link[(span_start, span_end)] = link_pred", "\n", "mention", ".", "add_link_pred", "(", "link_pred", ")", "\n", "\n", "", "", "if", "links_gold", "is", "not", "None", ":", "\n", "        ", "for", "begin", ",", "end", ",", "link", "in", "links_gold", ":", "\n", "# big fix 03/12/2020 only makes sense to write gold if the mention was already added (ex: through", "\n", "# links_pred), if not we will be just adding gold mentions when they are not predicted", "\n", "# if (begin, end) in span_to_pred_link:", "\n", "#     mention.add_link_pred(span_to_pred_link[(begin, end)])", "\n", "            ", "if", "builder", ".", "is_existent_mention", "(", "begin", ",", "end", ")", ":", "\n", "                ", "mention", "=", "builder", ".", "add_mention", "(", "begin", ",", "end", ")", "# inclusive", "\n", "mention", ".", "add_link_gold", "(", "link", ")", "\n", "\n", "", "", "", "return", "builder", ".", "json", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.TokenizerSimple.tokenize": [[22, 36], ["text.split", "text.find", "output.append", "len", "len"], "methods", ["None"], ["    ", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "output", "=", "[", "]", "\n", "\n", "offset", "=", "0", "\n", "for", "token", "in", "text", ".", "split", "(", "' '", ")", ":", "\n", "            ", "begin", "=", "text", ".", "find", "(", "token", ",", "offset", ")", "\n", "output", ".", "append", "(", "{", "\n", "'offset'", ":", "begin", ",", "\n", "'length'", ":", "len", "(", "token", ")", ",", "\n", "'token'", ":", "token", "\n", "}", ")", "\n", "offset", "=", "begin", "+", "len", "(", "token", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.InstanceLoader.__init__": [[40, 53], ["datass.linefile.LineFileReader", "print", "tqdm.tqdm.tqdm", "print", "range", "data_reader.InstanceLoader.file.read", "json.loads", "accept", "len", "json.loads.rstrip", "convert", "data_reader.InstanceLoader.indices.append"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile.LineFileReader.read", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile.LineFileWriter.convert"], ["    ", "def", "__init__", "(", "self", ",", "filename", ",", "accept", ",", "convert", ")", ":", "\n", "        ", "self", ".", "file", "=", "LineFileReader", "(", "filename", ")", "\n", "self", ".", "convert", "=", "convert", "\n", "self", ".", "indices", "=", "[", "]", "\n", "\n", "print", "(", "\"Filtering data set...\"", ")", "\n", "for", "idx", "in", "tqdm", "(", "range", "(", "self", ".", "file", ".", "size", ")", ")", ":", "\n", "            ", "data", "=", "self", ".", "file", ".", "read", "(", "idx", ")", "\n", "data", "=", "json", ".", "loads", "(", "data", ".", "rstrip", "(", ")", ")", "\n", "if", "accept", "(", "data", ")", ":", "\n", "                ", "convert", "(", "data", ")", "\n", "self", ".", "indices", ".", "append", "(", "idx", ")", "\n", "", "", "print", "(", "\"done. (\"", ",", "len", "(", "self", ".", "indices", ")", ",", "\"/\"", ",", "self", ".", "file", ".", "size", ",", "\")\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.InstanceLoader.__getitem__": [[54, 58], ["data_reader.InstanceLoader.file.read", "json.loads", "data_reader.InstanceLoader.convert", "json.loads.rstrip"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile.LineFileReader.read", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile.LineFileWriter.convert"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "data", "=", "self", ".", "file", ".", "read", "(", "self", ".", "indices", "[", "idx", "]", ")", "\n", "data", "=", "json", ".", "loads", "(", "data", ".", "rstrip", "(", ")", ")", "\n", "return", "self", ".", "convert", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.InstanceLoader.__len__": [[59, 61], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.AbstractDataReader.__init__": [[64, 75], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "linking_candidates", "=", "None", "\n", "self", ".", "train_linker_tag", "=", "None", "\n", "self", ".", "max_link_candidates", "=", "None", "\n", "self", ".", "include_nill_in_candidates", "=", "None", "\n", "self", ".", "include_none_in_candidates", "=", "None", "\n", "self", ".", "dict_entities", ":", "Dictionary", "=", "None", "\n", "self", ".", "dict_words", ":", "Dictionary", "=", "None", "\n", "self", ".", "dict_characters", ":", "Dictionary", "=", "None", "\n", "self", ".", "dict_whitespace", ":", "Dictionary", "=", "None", "\n", "self", ".", "shuffle_candidates", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.AbstractDataReader.get_whitespace_indices": [[76, 79], ["torch.LongTensor", "data_reader.AbstractDataReader.dict_whitespace.lookup"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup"], ["", "def", "get_whitespace_indices", "(", "self", ",", "whitespace", ")", ":", "\n", "        ", "return", "torch", ".", "LongTensor", "(", "\n", "[", "self", ".", "dict_whitespace", ".", "lookup", "(", "ws", ")", "for", "ws", "in", "whitespace", "]", ")", "if", "whitespace", "is", "not", "None", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.AbstractDataReader.get_character_indices": [[80, 86], ["output.append", "data_reader.AbstractDataReader.dict_characters.lookup"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup"], ["", "def", "get_character_indices", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "output", "=", "[", "]", "\n", "for", "token", "in", "tokens", ":", "\n", "            ", "token", "=", "'<'", "+", "token", "+", "'>'", "\n", "output", ".", "append", "(", "[", "self", ".", "dict_characters", ".", "lookup", "(", "c", ")", "for", "c", "in", "token", "]", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.AbstractDataReader.get_token_indices": [[87, 89], ["data_reader.AbstractDataReader.dict_words.lookup"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup"], ["", "def", "get_token_indices", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "return", "[", "self", ".", "dict_words", ".", "lookup", "(", "token", ")", "for", "token", "in", "tokens", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.AbstractDataReader.get_linker_targets_all_spans": [[90, 126], ["dict", "enumerate", "data_reader.is_link_trainable", "data_reader.AbstractDataReader.dict_entities.add", "targets.append", "target_index.item", "target_index.size"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.is_link_trainable", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add"], ["", "def", "get_linker_targets_all_spans", "(", "self", ",", "data", ",", "all_spans", ",", "all_spans_candidates", ")", ":", "\n", "        ", "\"\"\"\n        \"\"\"", "\n", "if", "self", ".", "train_linker_tag", "is", "None", "or", "self", ".", "train_linker_tag", "in", "data", "[", "'tags'", "]", ":", "\n", "            ", "span_to_gold", "=", "dict", "(", ")", "\n", "for", "mention", "in", "data", "[", "'mentions'", "]", ":", "\n", "                ", "if", "is_link_trainable", "(", "mention", ")", ":", "\n", "                    ", "entity_concept", "=", "data", "[", "'concepts'", "]", "[", "mention", "[", "'concept'", "]", "[", "'concept'", "]", "]", "\n", "if", "'link'", "in", "entity_concept", ":", "\n", "                        ", "mention_correct", "=", "entity_concept", "[", "'link'", "]", "\n", "mention_span", "=", "(", "mention", "[", "'token_begin'", "]", ",", "mention", "[", "'token_end'", "]", ")", "\n", "span_to_gold", "[", "mention_span", "]", "=", "mention_correct", "\n", "\n", "", "", "", "targets", "=", "[", "]", "\n", "for", "span_idx", ",", "curr_span", "in", "enumerate", "(", "all_spans", ")", ":", "\n", "# if curr_span not in span_to_gold and not include_none:", "\n", "#     index = -1", "\n", "# else:", "\n", "                ", "if", "curr_span", "not", "in", "span_to_gold", ":", "\n", "                    ", "correct_link", "=", "'NONE'", "\n", "", "else", ":", "\n", "                    ", "correct_link", "=", "span_to_gold", "[", "curr_span", "]", "\n", "\n", "", "correct_link_id", "=", "self", ".", "dict_entities", ".", "add", "(", "correct_link", ")", "\n", "target_index", "=", "(", "all_spans_candidates", "[", "span_idx", "]", "==", "correct_link_id", ")", ".", "nonzero", "(", ")", "\n", "if", "target_index", ".", "size", "(", ")", "[", "0", "]", "==", "0", ":", "\n", "                    ", "index", "=", "-", "1", "\n", "", "else", ":", "\n", "                    ", "index", "=", "target_index", ".", "item", "(", ")", "\n", "\n", "", "targets", ".", "append", "(", "index", ")", "\n", "", "", "else", ":", "\n", "# no linking annotation", "\n", "            ", "targets", "=", "[", "-", "1", "for", "span", "in", "all_spans", "]", "\n", "\n", "", "return", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.AbstractDataReader.get_linker_candidates_all_spans": [[127, 195], ["enumerate", "input_content[].strip", "candidates.append", "candidates_scores.append", "torch.tensor", "torch.tensor", "candidates.append", "candidates_scores.append", "torch.tensor", "torch.tensor", "torch.randperm", "torch.tensor", "torch.tensor", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "empty_candidates.append", "empty_cand_scores.append", "empty_candidates.append", "empty_cand_scores.append", "data_reader.AbstractDataReader.dict_entities.lookup", "data_reader.AbstractDataReader.dict_entities.lookup", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "data_reader.AbstractDataReader.dict_entities.lookup", "data_reader.AbstractDataReader.dict_entities.lookup"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup"], ["", "def", "get_linker_candidates_all_spans", "(", "self", ",", "input_content", ",", "tags", ",", "all_spans", ",", "begin", ",", "end", ",", "span_mask", ")", ":", "\n", "# no linking for span: empty candidate list", "\n", "        ", "lc", "=", "self", ".", "linking_candidates", "\n", "if", "self", ".", "train_linker_tag", "is", "None", "or", "self", ".", "train_linker_tag", "in", "tags", ":", "\n", "            ", "candidates", "=", "[", "]", "\n", "candidates_scores", "=", "[", "]", "\n", "for", "idx_span", ",", "curr_span", "in", "enumerate", "(", "all_spans", ")", ":", "\n", "                ", "if", "span_mask", "[", "idx_span", "]", "<", "0.9", ":", "# span_mask to not evaluate invalid spans (outside content boundaries)", "\n", "                    ", "candidates", ".", "append", "(", "torch", ".", "tensor", "(", "[", "]", ",", "dtype", "=", "torch", ".", "int", ")", ")", "\n", "candidates_scores", ".", "append", "(", "torch", ".", "tensor", "(", "[", "]", ",", "dtype", "=", "torch", ".", "float", ")", ")", "\n", "continue", "\n", "\n", "", "span_text", "=", "input_content", "[", "begin", "[", "curr_span", "[", "0", "]", "]", ":", "end", "[", "curr_span", "[", "1", "]", "]", "]", ".", "strip", "(", ")", "\n", "if", "span_text", "in", "lc", ":", "\n", "                    ", "span_candidates", "=", "lc", "[", "span_text", "]", "[", "'candidates'", "]", "\n", "span_scores", "=", "lc", "[", "span_text", "]", "[", "'scores'", "]", "\n", "if", "self", ".", "max_link_candidates", "is", "not", "None", "and", "self", ".", "max_link_candidates", ">", "-", "1", ":", "\n", "                        ", "span_candidates", "=", "span_candidates", "[", ":", "self", ".", "max_link_candidates", "]", "\n", "span_scores", "=", "span_scores", "[", ":", "self", ".", "max_link_candidates", "]", "\n", "\n", "", "if", "self", ".", "include_nill_in_candidates", ":", "\n", "                        ", "span_candidates", "=", "torch", ".", "cat", "(", "(", "span_candidates", ",", "\n", "torch", ".", "tensor", "(", "[", "self", ".", "dict_entities", ".", "lookup", "(", "'NILL'", ")", "]", ",", "\n", "dtype", "=", "torch", ".", "int32", ")", ")", ")", "\n", "span_scores", "=", "torch", ".", "cat", "(", "(", "span_scores", ",", "torch", ".", "tensor", "(", "[", "1.0", "]", ")", ")", ")", "\n", "", "if", "self", ".", "include_none_in_candidates", ":", "\n", "                        ", "span_candidates", "=", "torch", ".", "cat", "(", "(", "span_candidates", ",", "\n", "torch", ".", "tensor", "(", "[", "self", ".", "dict_entities", ".", "lookup", "(", "'NONE'", ")", "]", ",", "\n", "dtype", "=", "torch", ".", "int32", ")", ")", ")", "\n", "span_scores", "=", "torch", ".", "cat", "(", "(", "span_scores", ",", "torch", ".", "tensor", "(", "[", "1.0", "]", ")", ")", ")", "\n", "\n", "# candidates.append(span_candidates)", "\n", "# candidates_scores.append(span_scores)", "\n", "", "", "else", ":", "\n", "                    ", "empty_candidates", "=", "[", "]", "\n", "empty_cand_scores", "=", "[", "]", "\n", "if", "self", ".", "include_nill_in_candidates", ":", "\n", "                        ", "empty_candidates", ".", "append", "(", "self", ".", "dict_entities", ".", "lookup", "(", "'NILL'", ")", ")", "\n", "empty_cand_scores", ".", "append", "(", "1.0", ")", "\n", "\n", "", "if", "self", ".", "include_none_in_candidates", ":", "\n", "                        ", "empty_candidates", ".", "append", "(", "self", ".", "dict_entities", ".", "lookup", "(", "'NONE'", ")", ")", "\n", "empty_cand_scores", ".", "append", "(", "1.0", ")", "\n", "\n", "", "span_candidates", "=", "torch", ".", "tensor", "(", "empty_candidates", ",", "dtype", "=", "torch", ".", "int32", ")", "\n", "span_scores", "=", "torch", ".", "tensor", "(", "empty_cand_scores", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n", "", "if", "self", ".", "shuffle_candidates", ":", "\n", "# way 1: tolist and zip have to be used with this way", "\n", "# both_cands_and_scores = list(zip(span_candidates.tolist(), span_scores.tolist()))", "\n", "# random.shuffle(both_cands_and_scores)", "\n", "# span_candidates, span_scores = zip(*both_cands_and_scores)", "\n", "# span_candidates = torch.tensor(span_candidates, dtype=torch.int)", "\n", "# span_scores = torch.tensor(span_scores, dtype=torch.float)", "\n", "\n", "# way 2: this way seems cleaner just with indexes:", "\n", "                    ", "indices", "=", "torch", ".", "randperm", "(", "span_candidates", ".", "shape", "[", "0", "]", ")", "\n", "span_candidates", "=", "span_candidates", "[", "indices", "]", "\n", "span_scores", "=", "span_scores", "[", "indices", "]", "\n", "\n", "", "candidates", ".", "append", "(", "span_candidates", ")", "\n", "candidates_scores", ".", "append", "(", "span_scores", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "candidates", "=", "[", "torch", ".", "tensor", "(", "[", "]", ",", "dtype", "=", "torch", ".", "int", ")", "for", "span", "in", "all_spans", "]", "\n", "candidates_scores", "=", "[", "torch", ".", "tensor", "(", "[", "]", ",", "dtype", "=", "torch", ".", "int", ")", "for", "span", "in", "all_spans", "]", "\n", "\n", "", "return", "candidates", ",", "candidates_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.DatasetCPN.__init__": [[199, 260], ["torch.utils.data.Dataset.__init__", "dictionaries.get", "dictionaries.get", "config[].get", "config[].get", "print", "print", "print", "print", "print", "print", "data_reader.DatasetCPN.print_histogram_of_span_length", "cpn.tokenizer.TokenizerCPN", "print", "print", "print", "print", "os.path.isdir", "print", "data_reader.InstanceLoader", "len", "len", "tqdm.tqdm.tqdm", "data_reader.DatasetCPN.load_file", "data_reader.DatasetCPN.convert", "len", "os.listdir", "os.path.join", "data_reader.DatasetCPN.load_file"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.DatasetCPN.print_histogram_of_span_length", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.DatasetCPN.load_file", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile.LineFileWriter.convert", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.DatasetCPN.load_file"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "config", ",", "dictionaries", ",", "linking_candidates", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "tokenize", "=", "config", "[", "'dataset'", "]", "[", "'tokenize'", "]", "\n", "self", ".", "tag", "=", "config", "[", "'dataset'", "]", "[", "'tag'", "]", "\n", "self", ".", "dict_words", "=", "dictionaries", "[", "'words'", "]", "\n", "self", ".", "dict_characters", "=", "dictionaries", "[", "'characters'", "]", "\n", "self", ".", "dict_whitespace", "=", "dictionaries", ".", "get", "(", "'whitespace'", ",", "None", ")", "\n", "self", ".", "dict_tags", "=", "dictionaries", "[", "'tags'", "]", "\n", "self", ".", "dict_relations", "=", "dictionaries", "[", "'relations'", "]", "\n", "self", ".", "dict_entities", ":", "Dictionary", "=", "dictionaries", ".", "get", "(", "'entities'", ",", "None", ")", "\n", "self", ".", "linking_candidates", "=", "linking_candidates", "\n", "self", ".", "max_span_length", "=", "config", "[", "'model'", "]", "[", "'max_span_length'", "]", "\n", "self", ".", "include_nill_in_candidates", "=", "config", "[", "'dataloader'", "]", "[", "'include_nill_in_candidates'", "]", "\n", "self", ".", "include_none_in_candidates", "=", "config", "[", "'dataloader'", "]", "[", "'include_none_in_candidates'", "]", "\n", "self", ".", "all_spans_candidates", "=", "config", "[", "'dataloader'", "]", "[", "'all_spans_candidates'", "]", "\n", "self", ".", "doc_level_candidates", "=", "config", "[", "'dataloader'", "]", "[", "'doc_level_candidates'", "]", "\n", "self", ".", "candidates_from_dictionary", "=", "config", "[", "'dataloader'", "]", "[", "'candidates_from_dictionary'", "]", "\n", "\n", "# TODO: if end to end: here already loads (lowercase! strip!) the dictionary", "\n", "self", ".", "shuffle_candidates", "=", "config", "[", "'dataset'", "]", "[", "'shuffle_candidates'", "]", "\n", "\n", "self", ".", "max_link_candidates", "=", "config", "[", "'dataset'", "]", ".", "get", "(", "'max_link_candidates'", ",", "None", ")", "\n", "\n", "self", ".", "train_linker_tag", "=", "config", "[", "'dataset'", "]", ".", "get", "(", "'train_linker_tag'", ",", "'annotation::links'", ")", "\n", "\n", "if", "self", ".", "tokenize", ":", "\n", "            ", "self", ".", "tokenizer", "=", "TokenizerCPN", "(", ")", "\n", "", "path", "=", "config", "[", "'dataset'", "]", "[", "'filename'", "]", "\n", "\n", "self", ".", "instances", "=", "[", "]", "\n", "self", ".", "number_of_lost_mentions", "=", "0", "\n", "\n", "if", "config", "[", "'dataset'", "]", "[", "'load-in-memory'", "]", ":", "\n", "            ", "print", "(", "'NR OF OOV AND TOKENS IN WORDS DITIONARY data_reader BEFORE LOADING: '", ")", "\n", "print", "(", "'\\t OOV: '", ",", "self", ".", "dict_words", ".", "out_of_voc", ")", "\n", "print", "(", "'\\t NR OF TOKENS: '", ",", "len", "(", "self", ".", "dict_words", ".", "word2idx", ")", ")", "\n", "\n", "print", "(", "\"Loading {} tokenize={} tag={}\"", ".", "format", "(", "path", ",", "self", ".", "tokenize", ",", "self", ".", "tag", ")", ")", "\n", "\n", "if", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "                ", "for", "filename", "in", "tqdm", "(", "os", ".", "listdir", "(", "path", ")", ")", ":", "\n", "                    ", "f", "=", "os", ".", "path", ".", "join", "(", "path", ",", "filename", ")", "\n", "self", ".", "load_file", "(", "f", ")", "\n", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "load_file", "(", "path", ")", "\n", "\n", "", "print", "(", "\"done.\"", ")", "\n", "", "else", ":", "\n", "            ", "_accept", "=", "lambda", "data", ":", "self", ".", "tag", "in", "data", "[", "'tags'", "]", "\n", "_convert", "=", "lambda", "data", ":", "self", ".", "convert", "(", "data", ")", "\n", "self", ".", "instances", "=", "InstanceLoader", "(", "path", ",", "_accept", ",", "_convert", ")", "\n", "\n", "", "print", "(", "'NR OF OOV AND TOKENS IN WORDS DITIONARY data_reader AFTER LOADING: '", ")", "\n", "print", "(", "'\\t OOV: '", ",", "self", ".", "dict_words", ".", "out_of_voc", ")", "\n", "print", "(", "'\\t NR OF TOKENS: '", ",", "len", "(", "self", ".", "dict_words", ".", "word2idx", ")", ")", "\n", "print", "(", "\"Number of instances in {}: {}.\"", ".", "format", "(", "self", ".", "name", ",", "len", "(", "self", ")", ")", ")", "\n", "print", "(", "\"Number of mentions lost due to tokenization: {}\"", ".", "format", "(", "self", ".", "number_of_lost_mentions", ")", ")", "\n", "print", "(", "\"Shuffle candidates:\"", ",", "self", ".", "shuffle_candidates", ")", "\n", "self", ".", "print_histogram_of_span_length", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.DatasetCPN.print_histogram_of_span_length": [[261, 281], ["collections.Counter", "print", "sorted", "print", "print", "collections.Counter.keys", "print"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "print_histogram_of_span_length", "(", "self", ")", ":", "\n", "        ", "counter", "=", "Counter", "(", ")", "\n", "total", "=", "0", "\n", "fail", "=", "0", "\n", "for", "instance", "in", "self", ".", "instances", ":", "\n", "            ", "for", "begin", ",", "end", "in", "instance", "[", "'spans'", "]", ":", "\n", "                ", "if", "begin", "is", "None", "or", "end", "is", "None", ":", "\n", "                    ", "fail", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "counter", "[", "end", "-", "begin", "]", "+=", "1", "\n", "total", "+=", "1", "\n", "\n", "", "", "", "print", "(", "\"span\\tcount\\trecall\"", ")", "\n", "cum", "=", "0", "\n", "for", "span_length", "in", "sorted", "(", "counter", ".", "keys", "(", ")", ")", ":", "\n", "            ", "count", "=", "counter", "[", "span_length", "]", "\n", "cum", "+=", "count", "\n", "print", "(", "\"{}\\t{}\\t{}\"", ".", "format", "(", "span_length", ",", "count", ",", "cum", "/", "total", ")", ")", "\n", "", "print", "(", ")", "\n", "print", "(", "\"failed spans:\"", ",", "fail", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.DatasetCPN.load_file": [[282, 300], ["filename.endswith", "filename.endswith", "data_reader.DatasetCPN.load_json", "data_reader.DatasetCPN.load_jsonl", "BaseException", "print", "print", "time.sleep", "data_reader.DatasetCPN.load_file", "print", "random.randint"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.load_json", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.load_jsonl", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.DatasetCPN.load_file", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "load_file", "(", "self", ",", "filename", ",", "retry", "=", "0", ")", ":", "\n", "        ", "if", "filename", ".", "endswith", "(", "'.json'", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "load_json", "(", "filename", ")", "\n", "", "except", "OSError", "as", "exept", ":", "\n", "# tries 3 more times with random sleep", "\n", "                ", "if", "retry", "<", "10", ":", "\n", "                    ", "print", "(", "'following exept: '", ",", "exept", ".", "strerror", ")", "\n", "print", "(", "'except to load, trying again: '", ",", "filename", ",", "' for retry: '", ",", "retry", ")", "\n", "sleep", "(", "random", ".", "randint", "(", "5", ",", "10", ")", ")", "\n", "self", ".", "load_file", "(", "filename", ",", "retry", "=", "retry", "+", "1", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "'NO MORE TERIES LEFT, FAILING'", ")", "\n", "raise", "exept", "\n", "", "", "", "elif", "filename", ".", "endswith", "(", "'.jsonl'", ")", ":", "\n", "            ", "self", ".", "load_jsonl", "(", "filename", ")", "\n", "", "else", ":", "\n", "            ", "raise", "BaseException", "(", "\"unknown file type:\"", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.DatasetCPN.load_json": [[301, 309], ["open", "json.load", "print", "data_reader.DatasetCPN.instances.append", "data_reader.DatasetCPN.convert"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile.LineFileWriter.convert"], ["", "", "def", "load_json", "(", "self", ",", "filename", ")", ":", "\n", "        ", "with", "open", "(", "filename", ",", "'r'", ")", "as", "file", ":", "\n", "            ", "data", "=", "json", ".", "load", "(", "file", ")", "\n", "if", "'tags'", "in", "data", ":", "\n", "                ", "if", "self", ".", "tag", "in", "data", "[", "'tags'", "]", ":", "\n", "                    ", "self", ".", "instances", ".", "append", "(", "self", ".", "convert", "(", "data", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "print", "(", "'WARNING (kzaporoj) - NO tags IN '", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.DatasetCPN.load_jsonl": [[310, 316], ["open", "json.loads", "line.rstrip", "data_reader.DatasetCPN.instances.append", "data_reader.DatasetCPN.convert"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile.LineFileWriter.convert"], ["", "", "", "def", "load_jsonl", "(", "self", ",", "filename", ")", ":", "\n", "        ", "with", "open", "(", "filename", ",", "'r'", ")", "as", "file", ":", "\n", "            ", "for", "line", "in", "file", ":", "\n", "                ", "data", "=", "json", ".", "loads", "(", "line", ".", "rstrip", "(", ")", ")", "\n", "if", "self", ".", "tag", "in", "data", "[", "'tags'", "]", ":", "\n", "                    ", "self", ".", "instances", ".", "append", "(", "self", ".", "convert", "(", "data", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.DatasetCPN.get_top_candidates": [[317, 326], ["len", "zip", "sorted"], "methods", ["None"], ["", "", "", "", "def", "get_top_candidates", "(", "self", ",", "mention_candidates", ":", "List", ",", "mention_candidate_scores", ":", "List", ")", ":", "\n", "        ", "if", "self", ".", "max_link_candidates", "is", "not", "None", "and", "self", ".", "max_link_candidates", ">", "0", ":", "\n", "            ", "if", "len", "(", "mention_candidates", ")", ">", "0", ":", "\n", "                ", "candidates_with_scores", "=", "zip", "(", "mention_candidates", ",", "mention_candidate_scores", ")", "\n", "candidates_with_scores", "=", "sorted", "(", "candidates_with_scores", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "candidates_with_scores", "=", "candidates_with_scores", "[", ":", "self", ".", "max_link_candidates", "]", "\n", "mention_candidates", "=", "[", "cand", "[", "0", "]", "for", "cand", "in", "candidates_with_scores", "]", "\n", "mention_candidate_scores", "=", "[", "cand", "[", "1", "]", "for", "cand", "in", "candidates_with_scores", "]", "\n", "", "", "return", "mention_candidates", ",", "mention_candidate_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.DatasetCPN.convert": [[327, 564], ["len", "len", "len", "list", "data_reader.DatasetCPN.get_linker_gold_from_mentions", "data_reader.DatasetCPN.get_token_indices", "data_reader.DatasetCPN.get_character_indices", "data_reader.DatasetCPN.tokenizer.tokenize", "data[].get", "print", "data_reader.DatasetCPN.get_top_candidates", "begin_to_index.get", "end_to_index.get", "concept[].append", "list", "modules.ner.spanner.create_all_spans", "torch.tensor", "span_mask.view", "torch.arange().unsqueeze", "data_reader.DatasetCPN.get_linker_candidates_all_spans", "data_reader.DatasetCPN.get_linker_targets_all_spans", "data_reader.DatasetCPN.get_candidates_from_mentions", "data_reader.DatasetCPN.get_targets_from_mentions", "torch.LongTensor", "data_reader.DatasetCPN.get_whitespace_indices", "torch.LongTensor", "torch.IntTensor", "torch.IntTensor", "data_reader.DatasetCPN.get_span_tags", "torch.IntTensor", "data_reader.DatasetCPN.get_relations", "len", "enumerate", "enumerate", "len", "BaseException", "Exception", "len", "set", "random.shuffle", "span_mask.size", "span_mask.size", "span_mask.size", "modules.utils.misc.indices_to_spans", "datass.transform.get_token_buckets", "set", "mention[].append", "mention[].append", "random.shuffle", "list.extend", "torch.arange", "torch.tensor", "len", "mention[].strip", "data_reader.DatasetCPN.dict_entities.get", "set", "torch.tensor.unsqueeze().unsqueeze", "[].tolist", "[].tolist", "torch.tensor.unsqueeze", "mention[].strip", "mention[].strip"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.DatasetCPN.get_linker_gold_from_mentions", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.AbstractDataReader.get_token_indices", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.AbstractDataReader.get_character_indices", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.WordpieceTokenizer.tokenize", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.DatasetCPN.get_top_candidates", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.create_all_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.AbstractDataReader.get_linker_candidates_all_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.AbstractDataReader.get_linker_targets_all_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.DatasetCPN.get_candidates_from_mentions", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.DatasetCPN.get_targets_from_mentions", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.AbstractDataReader.get_whitespace_indices", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.DatasetCPN.get_span_tags", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.DatasetCPN.get_relations", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.indices_to_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.transform.get_token_buckets", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist"], ["", "def", "convert", "(", "self", ",", "data", ")", ":", "\n", "        ", "identifier", "=", "data", "[", "'id'", "]", "\n", "# print('(kzaporoj) - currently I am converting ', identifier)", "\n", "# mentions = data['mentions']", "\n", "concepts", "=", "data", "[", "'concepts'", "]", "\n", "\n", "linker_candidates", "=", "None", "\n", "linker_targets", "=", "None", "\n", "linker_scores", "=", "None", "\n", "\n", "if", "self", ".", "tokenize", ":", "\n", "            ", "tokens", "=", "self", ".", "tokenizer", ".", "tokenize", "(", "data", "[", "'content'", "]", ")", "\n", "begin", "=", "[", "token", "[", "'offset'", "]", "for", "token", "in", "tokens", "]", "\n", "end", "=", "[", "token", "[", "'offset'", "]", "+", "token", "[", "'length'", "]", "for", "token", "in", "tokens", "]", "\n", "tokens", "=", "[", "token", "[", "'token'", "]", "for", "token", "in", "tokens", "]", "\n", "whitespace", "=", "None", "\n", "", "else", ":", "\n", "            ", "tokens", "=", "data", "[", "'tokenization'", "]", "[", "'tokens'", "]", "\n", "begin", "=", "data", "[", "'tokenization'", "]", "[", "'begin'", "]", "\n", "end", "=", "data", "[", "'tokenization'", "]", "[", "'end'", "]", "\n", "whitespace", "=", "data", "[", "'tokenization'", "]", ".", "get", "(", "'ws'", ",", "None", ")", "\n", "\n", "", "n_tokens", "=", "len", "(", "tokens", ")", "\n", "if", "n_tokens", "==", "0", ":", "\n", "            ", "print", "(", "\"WARNING: dropping empty document\"", ")", "\n", "return", "\n", "\n", "", "begin_to_index", "=", "{", "pos", ":", "idx", "for", "idx", ",", "pos", "in", "enumerate", "(", "begin", ")", "}", "\n", "end_to_index", "=", "{", "pos", ":", "idx", "for", "idx", ",", "pos", "in", "enumerate", "(", "end", ")", "}", "\n", "\n", "# this makes life easier --> assigns 'NILL' to concepts where the link is in None.", "\n", "for", "concept", "in", "concepts", ":", "\n", "            ", "concept", "[", "'mentions'", "]", "=", "[", "]", "\n", "if", "'link'", "in", "concept", "and", "concept", "[", "'link'", "]", "is", "None", ":", "\n", "                ", "concept", "[", "'link'", "]", "=", "'NILL'", "\n", "\n", "# 19/02/2021 - we ignore the mentions whose offsets do not match with the tokenized content (tokens)", "\n", "", "", "len_prev_mentions", "=", "len", "(", "data", "[", "'mentions'", "]", ")", "\n", "data", "[", "'mentions'", "]", "=", "[", "men", "for", "men", "in", "data", "[", "'mentions'", "]", "if", "men", "[", "'begin'", "]", "in", "begin_to_index", "and", "\n", "men", "[", "'end'", "]", "in", "end_to_index", "]", "\n", "len_after_mentions", "=", "len", "(", "data", "[", "'mentions'", "]", ")", "\n", "if", "len_prev_mentions", "!=", "len_after_mentions", ":", "\n", "# print('NR of lost mentions due to tokenization: ', len_prev_mentions - len_after_mentions)", "\n", "            ", "assert", "len_prev_mentions", ">", "len_after_mentions", "\n", "self", ".", "number_of_lost_mentions", "+=", "(", "len_prev_mentions", "-", "len_after_mentions", ")", "\n", "\n", "", "mentions", "=", "data", "[", "'mentions'", "]", "\n", "\n", "# only candidates for each of the gold mentions", "\n", "all_doc_candidates_no_nill", "=", "list", "(", ")", "\n", "for", "mention", "in", "mentions", ":", "\n", "            ", "if", "mention", "[", "'concept'", "]", ">=", "len", "(", "concepts", ")", ":", "\n", "                ", "raise", "BaseException", "(", "\"invalid mention concept\"", ",", "mention", "[", "'concept'", "]", ",", "\"in doc\"", ",", "identifier", ")", "\n", "", "concept", "=", "concepts", "[", "mention", "[", "'concept'", "]", "]", "\n", "\n", "mention_candidates", "=", "[", "]", "\n", "mention_candidate_scores", "=", "[", "]", "\n", "mention_link", "=", "None", "\n", "if", "self", ".", "candidates_from_dictionary", ":", "\n", "                ", "if", "self", ".", "linking_candidates", "is", "not", "None", "and", "mention", "[", "'text'", "]", ".", "strip", "(", ")", "in", "self", ".", "linking_candidates", ":", "\n", "                    ", "mention_candidates", "=", "[", "self", ".", "dict_entities", ".", "get", "(", "tok_ent", ")", "for", "tok_ent", "in", "\n", "self", ".", "linking_candidates", "[", "mention", "[", "'text'", "]", ".", "strip", "(", ")", "]", "[", "'candidates'", "]", ".", "tolist", "(", ")", "]", "\n", "mention_candidate_scores", "=", "[", "curr_score", "for", "curr_score", "in", "\n", "self", ".", "linking_candidates", "[", "mention", "[", "'text'", "]", ".", "strip", "(", ")", "]", "[", "'scores'", "]", ".", "tolist", "(", ")", "]", "\n", "", "", "else", ":", "\n", "                ", "if", "'candidates'", "in", "mention", ":", "\n", "                    ", "mention_candidates", "=", "mention", "[", "'candidates'", "]", "\n", "mention_candidate_scores", "=", "mention", "[", "'scores'", "]", "\n", "\n", "", "", "mention_candidates", ",", "mention_candidate_scores", "=", "self", ".", "get_top_candidates", "(", "mention_candidates", ",", "\n", "mention_candidate_scores", ")", "\n", "\n", "if", "'link'", "in", "concept", ":", "\n", "                ", "mention", "[", "'link'", "]", "=", "None", "\n", "if", "concept", "[", "'link'", "]", "is", "not", "None", ":", "\n", "                    ", "curr_candidates", "=", "set", "(", ")", "\n", "if", "'candidates'", "in", "mention", ":", "\n", "                        ", "curr_candidates", "=", "set", "(", "mention_candidates", ")", "\n", "", "else", ":", "\n", "                        ", "pass", "\n", "# print('WARNING {} - no candidates for mention ({},{}) - {}'.format(identifier,", "\n", "#                                                                    mention['begin'],", "\n", "#                                                                    mention['end'],", "\n", "#                                                                    mention['text']))", "\n", "\n", "", "if", "concept", "[", "'link'", "]", "in", "curr_candidates", ":", "\n", "                        ", "mention", "[", "'link'", "]", "=", "concept", "[", "'link'", "]", "\n", "\n", "", "", "", "mention", "[", "'concept'", "]", "=", "concept", "\n", "mention", "[", "'token_begin'", "]", "=", "begin_to_index", ".", "get", "(", "mention", "[", "'begin'", "]", ",", "None", ")", "\n", "mention", "[", "'token_end'", "]", "=", "end_to_index", ".", "get", "(", "mention", "[", "'end'", "]", ",", "None", ")", "\n", "mention", "[", "'candidates'", "]", "=", "mention_candidates", "\n", "mention", "[", "'scores'", "]", "=", "mention_candidate_scores", "\n", "if", "mention", "[", "'token_begin'", "]", "is", "None", "or", "mention", "[", "'token_end'", "]", "is", "None", ":", "\n", "                ", "raise", "Exception", "(", "'token_begin and token_end should not be None'", ")", "\n", "# self.number_of_lost_mentions += 1", "\n", "# if mention['token_begin'] is None:", "\n", "#     print('token begin wrong in ', identifier, ' -- \"', mention['text'], '\" (',", "\n", "#           mention['begin'], '-', mention['end'], ') ... ADAPTING... ')", "\n", "#     for offset in range(len(mention['text']) * 2):", "\n", "#         if mention['begin'] - offset in begin_to_index:", "\n", "#             mention['token_begin'] = begin_to_index.get(mention['begin'] - offset)", "\n", "#             break", "\n", "# if mention['token_end'] is None:", "\n", "#     print('token end wrong in ', identifier, ' -- \"', mention['text'], '\" (',", "\n", "#           mention['begin'], '-', mention['end'], ') ... ADAPTING... ')", "\n", "#     for offset in range(len(mention['text']) * 2):", "\n", "#         if mention['end'] + offset in end_to_index:", "\n", "#             mention['token_end'] = end_to_index.get(mention['end'] + offset)", "\n", "#             break", "\n", "#", "\n", "# if mention['token_end'] is not None and mention['token_begin'] is not None:", "\n", "#     print('ADAPTED TO: ', tokens[mention['token_begin']:mention['token_end'] + 1])", "\n", "# else:", "\n", "#     print('COULDN\\'T ADAPT!!!')", "\n", "\n", "", "concept", "[", "'mentions'", "]", ".", "append", "(", "mention", ")", "\n", "\n", "if", "'candidates'", "in", "mention", ":", "\n", "                ", "mention", "[", "'candidates'", "]", "=", "[", "x", "if", "x", "is", "not", "None", "else", "'NILL'", "for", "x", "in", "mention", "[", "'candidates'", "]", "]", "\n", "if", "'NILL'", "not", "in", "mention", "[", "'candidates'", "]", ":", "\n", "                    ", "mention", "[", "'candidates'", "]", ".", "append", "(", "'NILL'", ")", "\n", "mention", "[", "'scores'", "]", ".", "append", "(", "1.0", ")", "\n", "\n", "# the length of all the candidates (including NILL)", "\n", "", "mention", "[", "'total_cand_lengths_in_gold_mentions'", "]", "=", "len", "(", "mention", "[", "'candidates'", "]", ")", "\n", "if", "not", "self", ".", "include_nill_in_candidates", ":", "\n", "                    ", "mention", "[", "'candidates'", "]", "=", "[", "cand", "for", "cand", "in", "mention", "[", "'candidates'", "]", "if", "cand", "!=", "'NILL'", "]", "\n", "", "if", "self", ".", "shuffle_candidates", ":", "\n", "                    ", "random", ".", "shuffle", "(", "mention", "[", "'candidates'", "]", ")", "\n", "", "if", "self", ".", "doc_level_candidates", ":", "\n", "                    ", "all_doc_candidates_no_nill", ".", "extend", "(", "mention", "[", "'candidates'", "]", ")", "\n", "\n", "", "", "if", "'link'", "in", "mention", "and", "mention", "[", "'link'", "]", "is", "None", ":", "\n", "                ", "mention", "[", "'link'", "]", "=", "'NILL'", "\n", "\n", "", "", "if", "self", ".", "doc_level_candidates", ":", "\n", "            ", "all_doc_candidates_no_nill", "=", "list", "(", "set", "(", "all_doc_candidates_no_nill", ")", ")", "\n", "if", "self", ".", "shuffle_candidates", ":", "\n", "                ", "random", ".", "shuffle", "(", "all_doc_candidates_no_nill", ")", "\n", "", "data", "[", "'all_doc_candidates_no_nill'", "]", "=", "all_doc_candidates_no_nill", "\n", "\n", "# TODO - begin end-to-end span loading", "\n", "", "all_possible_spans", "=", "[", "]", "\n", "linker_total_length_cands", "=", "[", "]", "\n", "if", "self", ".", "all_spans_candidates", ":", "\n", "            ", "span_begin", ",", "span_end", "=", "create_all_spans", "(", "1", ",", "n_tokens", ",", "self", ".", "max_span_length", ")", "\n", "\n", "lengths", "=", "torch", ".", "tensor", "(", "[", "n_tokens", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "span_mask", "=", "(", "span_end", "<", "lengths", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "float", "(", ")", "\n", "\n", "nr_possible_spans", "=", "(", "span_mask", ".", "size", "(", "-", "1", ")", "*", "span_mask", ".", "size", "(", "-", "2", ")", ")", "\n", "\n", "span_masked_scores", "=", "span_mask", ".", "view", "(", "span_mask", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "# top_indices_sorted = torch.range(0, nr_possible_spans - 1, dtype=torch.int32).unsqueeze(0)", "\n", "top_indices_sorted", "=", "torch", ".", "arange", "(", "0", ",", "nr_possible_spans", ",", "dtype", "=", "torch", ".", "int32", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "all_possible_spans", "=", "indices_to_spans", "(", "top_indices_sorted", ",", "torch", ".", "tensor", "(", "[", "nr_possible_spans", "]", ",", "\n", "dtype", "=", "torch", ".", "int", ")", ",", "\n", "self", ".", "max_span_length", ")", "[", "0", "]", "\n", "\n", "linker_cands_all_spans", ",", "linker_cands_all_spans_scores", "=", "self", ".", "get_linker_candidates_all_spans", "(", "data", "[", "'content'", "]", ",", "data", "[", "'tags'", "]", ",", "\n", "all_spans", "=", "all_possible_spans", ",", "begin", "=", "begin", ",", "end", "=", "end", ",", "\n", "span_mask", "=", "span_masked_scores", "[", "0", "]", ")", "\n", "\n", "linker_targets_all_spans", "=", "self", ".", "get_linker_targets_all_spans", "(", "data", ",", "all_possible_spans", ",", "\n", "linker_cands_all_spans", ")", "\n", "\n", "linker_candidates", "=", "linker_cands_all_spans", "\n", "linker_targets", "=", "linker_targets_all_spans", "\n", "linker_scores", "=", "linker_cands_all_spans_scores", "\n", "", "else", ":", "\n", "# linker candidates", "\n", "            ", "linker_total_length_cands", ",", "linker_candidates", "=", "self", ".", "get_candidates_from_mentions", "(", "data", ")", "\n", "linker_targets", "=", "self", ".", "get_targets_from_mentions", "(", "data", ",", "all_doc_candidates", "=", "self", ".", "doc_level_candidates", ",", "\n", "is_nill_in_candidates", "=", "self", ".", "include_nill_in_candidates", ")", "\n", "\n", "", "linker_gold", "=", "self", ".", "get_linker_gold_from_mentions", "(", "data", ")", "\n", "\n", "# TODO - end end-to-end span loading", "\n", "\n", "token_indices", "=", "self", ".", "get_token_indices", "(", "tokens", ")", "\n", "\n", "character_indices", "=", "self", ".", "get_character_indices", "(", "tokens", ")", "\n", "spans", "=", "[", "(", "mention", "[", "'token_begin'", "]", ",", "mention", "[", "'token_end'", "]", ")", "for", "mention", "in", "data", "[", "'mentions'", "]", "\n", "# 19/02/2021 - adding this because in dwie public the tokenization sometimes does not match", "\n", "# if mention['token_begin'] is not None and mention['token_end'] is not None", "\n", "]", "\n", "\n", "gold_clusters", "=", "[", "[", "(", "mention", "[", "'token_begin'", "]", ",", "mention", "[", "'token_end'", "]", ")", "for", "mention", "in", "concept", "[", "'mentions'", "]", "\n", "# 19/02/2021 - adding this because in dwie public the tokenization sometimes does not match", "\n", "# if mention['token_begin'] is not None and mention['token_end'] is not None", "\n", "]", "for", "concept", "\n", "in", "concepts", "]", "\n", "\n", "# can be the case that mentions are filtered with either token_begin or token_end in None (see above)", "\n", "gold_clusters", "=", "[", "concept", "for", "concept", "in", "gold_clusters", "if", "len", "(", "concept", ")", ">", "0", "]", "\n", "\n", "text_embedder", "=", "{", "\n", "'tokens'", ":", "torch", ".", "LongTensor", "(", "token_indices", ")", ",", "\n", "'characters'", ":", "character_indices", ",", "\n", "'whitespace'", ":", "self", ".", "get_whitespace_indices", "(", "whitespace", ")", ",", "\n", "'tokens-indices'", ":", "torch", ".", "LongTensor", "(", "get_token_buckets", "(", "tokens", ")", ")", ",", "\n", "'text'", ":", "tokens", "\n", "}", "\n", "\n", "# TODO: rename variables to be more clear", "\n", "return", "{", "\n", "'id'", ":", "identifier", ",", "\n", "'metadata_tags'", ":", "data", "[", "'tags'", "]", ",", "\n", "'xxx'", ":", "text_embedder", ",", "\n", "'content'", ":", "data", "[", "'content'", "]", ",", "\n", "'begin'", ":", "torch", ".", "IntTensor", "(", "begin", ")", ",", "\n", "'end'", ":", "torch", ".", "IntTensor", "(", "end", ")", ",", "\n", "'spans'", ":", "spans", ",", "\n", "# 'all_possible_spans': all_possible_spans,", "\n", "'gold_clusters'", ":", "gold_clusters", ",", "\n", "'gold_tags_indices'", ":", "self", ".", "get_span_tags", "(", "mentions", ")", ",", "\n", "'clusters'", ":", "torch", ".", "IntTensor", "(", "[", "mention", "[", "'concept'", "]", "[", "'concept'", "]", "for", "mention", "in", "mentions", "\n", "# 19/02/2021 - adding this because in dwie public the tokenization sometimes does not match", "\n", "# if mention['token_begin'] is not None and mention['token_end'] is not None", "\n", "]", ")", ",", "\n", "'relations2'", ":", "self", ".", "get_relations", "(", "data", ")", ",", "\n", "# 'num_concepts': len(concepts),", "\n", "# 19/02/2021 - changed this one because can be different if no tokenization found for mentions (see above)", "\n", "'num_concepts'", ":", "len", "(", "gold_clusters", ")", ",", "\n", "# 'linker_candidates_no_nill_doc': linker_all_candidates,", "\n", "'linker_candidates'", ":", "linker_candidates", ",", "\n", "'linker_targets'", ":", "linker_targets", ",", "\n", "'linker_scores'", ":", "linker_scores", ",", "\n", "'total_cand_lengths_in_gold_mentions'", ":", "linker_total_length_cands", ",", "\n", "# 'linker_targets_no_nill_doc': linker_targets_all_no_nill,", "\n", "# 'linker_candidates_no_nill': linker_candidates_no_nill,", "\n", "# 'linker_targets_no_nill': linker_targets_no_nill,", "\n", "'linker_gold'", ":", "linker_gold", "\n", "# 'linker_cands_all_spans_no_nill': linker_cands_all_spans_no_nill,", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.DatasetCPN.__getitem__": [[572, 574], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "instances", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.DatasetCPN.__len__": [[575, 577], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "instances", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.DatasetCPN.get_span_tags": [[592, 601], ["spans.extend", "data_reader.DatasetCPN.dict_tags.lookup"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup"], ["", "def", "get_span_tags", "(", "self", ",", "mentions", ")", ":", "\n", "        ", "spans", "=", "[", "]", "\n", "for", "mention", "in", "mentions", ":", "\n", "# if mention['token_begin'] is not None and mention['token_end'] is not None:", "\n", "            ", "assert", "mention", "[", "'token_begin'", "]", "is", "not", "None", "\n", "assert", "mention", "[", "'token_end'", "]", "is", "not", "None", "\n", "spans", ".", "extend", "(", "[", "(", "mention", "[", "'token_begin'", "]", ",", "mention", "[", "'token_end'", "]", ",", "self", ".", "dict_tags", ".", "lookup", "(", "tag", ")", ")", "for", "tag", "in", "\n", "mention", "[", "'concept'", "]", "[", "'tags'", "]", "]", ")", "\n", "", "return", "spans", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.DatasetCPN.get_relations": [[602, 605], ["data_reader.DatasetCPN.dict_relations.lookup"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup"], ["", "def", "get_relations", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "[", "(", "relation", "[", "'s'", "]", ",", "relation", "[", "'o'", "]", ",", "self", ".", "dict_relations", ".", "lookup", "(", "relation", "[", "'p'", "]", ")", ")", "for", "relation", "in", "\n", "data", "[", "'relations'", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.DatasetCPN.get_candidates_from_mentions": [[606, 626], ["data_reader.is_link_trainable", "torch.tensor", "candidates.append", "total_length_cand.append", "candidates.append", "total_length_cand.append", "data_reader.DatasetCPN.dict_entities.add", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.is_link_trainable", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add"], ["", "def", "get_candidates_from_mentions", "(", "self", ",", "data", ")", ":", "\n", "# no linking for span: empty candidate list", "\n", "\n", "        ", "if", "self", ".", "train_linker_tag", "in", "data", "[", "'tags'", "]", ":", "\n", "            ", "candidates", "=", "[", "]", "\n", "total_length_cand", "=", "[", "]", "\n", "\n", "for", "mention", "in", "data", "[", "'mentions'", "]", ":", "\n", "                ", "if", "is_link_trainable", "(", "mention", ")", ":", "\n", "                    ", "curr_cand", "=", "[", "self", ".", "dict_entities", ".", "add", "(", "c", ")", "for", "c", "in", "mention", "[", "'candidates'", "]", "]", "\n", "candidates", ".", "append", "(", "torch", ".", "tensor", "(", "curr_cand", ",", "dtype", "=", "torch", ".", "int32", ")", ")", "\n", "total_length_cand", ".", "append", "(", "mention", "[", "'total_cand_lengths_in_gold_mentions'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "candidates", ".", "append", "(", "torch", ".", "tensor", "(", "[", "]", ",", "dtype", "=", "torch", ".", "int32", ")", ")", "\n", "total_length_cand", ".", "append", "(", "0", ")", "\n", "", "", "", "else", ":", "\n", "            ", "candidates", "=", "[", "torch", ".", "tensor", "(", "[", "]", ",", "dtype", "=", "torch", ".", "int32", ")", "for", "mention", "in", "data", "[", "'mentions'", "]", "]", "\n", "total_length_cand", "=", "[", "0", "for", "mention", "in", "data", "[", "'mentions'", "]", "]", "\n", "\n", "", "return", "total_length_cand", ",", "candidates", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.DatasetCPN.get_linker_all_candidates": [[627, 638], ["candidates.extend", "data_reader.DatasetCPN.dict_entities.add"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add"], ["", "def", "get_linker_all_candidates", "(", "self", ",", "data", ",", "all_candidates", ")", ":", "\n", "# no linking for span: empty candidate list", "\n", "\n", "        ", "if", "self", ".", "train_linker_tag", "in", "data", "[", "'tags'", "]", ":", "\n", "            ", "candidates", "=", "[", "]", "\n", "\n", "candidates", ".", "extend", "(", "[", "self", ".", "dict_entities", ".", "add", "(", "c", ")", "for", "c", "in", "all_candidates", "]", ")", "\n", "", "else", ":", "\n", "            ", "candidates", "=", "[", "]", "\n", "\n", "", "return", "candidates", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.DatasetCPN.get_targets_from_mentions": [[639, 687], ["data_reader.is_link_trainable", "targets.append", "mention_candidates.index", "mention_candidates.index", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.is_link_trainable"], ["", "def", "get_targets_from_mentions", "(", "self", ",", "data", ",", "all_doc_candidates", "=", "False", ",", "is_nill_in_candidates", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n\n        :param data:\n        :param type_target: 'mention_not_nill', 'mention_nill', 'all_candidates'\n        :return:\n        \"\"\"", "\n", "if", "self", ".", "train_linker_tag", "in", "data", "[", "'tags'", "]", ":", "\n", "            ", "targets", "=", "[", "]", "\n", "\n", "for", "mention", "in", "data", "[", "'mentions'", "]", ":", "\n", "# 19/02/2021 - adding this because in dwie public the tokenization sometimes does not match", "\n", "# if mention['token_begin'] is None or mention['token_end'] is None:", "\n", "#     continue", "\n", "                ", "assert", "mention", "[", "'token_begin'", "]", "is", "not", "None", "\n", "assert", "mention", "[", "'token_end'", "]", "is", "not", "None", "\n", "\n", "if", "is_link_trainable", "(", "mention", ")", ":", "\n", "# kzaporoj - uncommented this one , the mention['link'] doesn't seem to work: no 'link'", "\n", "# inside mention", "\n", "                    ", "if", "not", "all_doc_candidates", ":", "\n", "                        ", "mention_candidates", "=", "mention", "[", "'candidates'", "]", "\n", "", "else", ":", "\n", "                        ", "mention_candidates", "=", "data", "[", "'all_doc_candidates_no_nill'", "]", "\n", "\n", "", "if", "mention", "[", "'link'", "]", "in", "mention_candidates", ":", "\n", "                        ", "index", "=", "mention_candidates", ".", "index", "(", "\n", "mention", "[", "'link'", "]", ")", "# kzaporoj: commented this one and uncommented previous one", "\n", "", "else", ":", "\n", "                        ", "if", "'NILL'", "in", "mention_candidates", ":", "\n", "                            ", "index", "=", "mention_candidates", ".", "index", "(", "'NILL'", ")", "\n", "", "else", ":", "\n", "                            ", "if", "(", "not", "is_nill_in_candidates", ")", "or", "(", "all_doc_candidates", ")", ":", "\n", "                                ", "index", "=", "-", "1", "\n", "", "else", ":", "\n", "                                ", "RuntimeError", "(", "\n", "'!!!Should not happen that NILL is not in mention_candidates and '", "\n", "'all_doc_candidates: '", ",", "all_doc_candidates", ",", "\n", "' and is_nill_in_candidates: '", ",", "is_nill_in_candidates", ",", "'!!!'", ")", "\n", "", "", "", "", "else", ":", "\n", "                    ", "index", "=", "-", "1", "\n", "\n", "", "targets", ".", "append", "(", "index", ")", "\n", "", "", "else", ":", "\n", "# no linking annotation", "\n", "            ", "targets", "=", "[", "-", "1", "for", "mention", "in", "data", "[", "'mentions'", "]", "]", "\n", "\n", "", "return", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.DatasetCPN.get_linker_gold_from_mentions": [[690, 713], ["gold.append"], "methods", ["None"], ["", "def", "get_linker_gold_from_mentions", "(", "self", ",", "data", ")", ":", "\n", "        ", "gold", "=", "[", "]", "\n", "for", "mention", "in", "data", "[", "'mentions'", "]", ":", "\n", "# 19/02/2021 - sometimes if tokenization is not good, some mentions should be ignored (because there is no", "\n", "# token that can be assigned to either the begin or end of the mention)", "\n", "# if mention['token_begin'] is None or mention['token_end'] is None:", "\n", "#     continue", "\n", "            ", "assert", "mention", "[", "'token_begin'", "]", "is", "not", "None", "\n", "assert", "mention", "[", "'token_end'", "]", "is", "not", "None", "\n", "\n", "concept", "=", "mention", "[", "'concept'", "]", "\n", "\n", "if", "'link'", "in", "concept", ":", "\n", "                ", "gold", ".", "append", "(", "(", "mention", "[", "'token_begin'", "]", ",", "mention", "[", "'token_end'", "]", ",", "concept", "[", "'link'", "]", ")", ")", "\n", "\n", "# (kzaporoj) - the next gold calculation is wrong because only adds correct link if it is present in candidate", "\n", "# list. It doesn't account for the fact that the candidate list can be wrong. Coreflinker can take the link", "\n", "# from other mentions in the same cluster, giving lower results when using this formulation", "\n", "# while the output is actually correct.", "\n", "\n", "# if 'link' in mention:", "\n", "#     gold.append((mention['token_begin'], mention['token_end'], mention['link']))", "\n", "", "", "return", "gold", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.data_reader.is_link_trainable": [[715, 722], ["None"], "function", ["None"], ["", "", "def", "is_link_trainable", "(", "mention", ")", ":", "\n", "# if mention['token_begin'] is None or mention['token_end'] is None:", "\n", "#     return False", "\n", "    ", "assert", "mention", "[", "'token_begin'", "]", "is", "not", "None", "\n", "assert", "mention", "[", "'token_end'", "]", "is", "not", "None", "\n", "\n", "return", "'candidates'", "in", "mention", "and", "'link'", "in", "mention", "# kzaporoj - commented this, can not find 'link' in mention field", "\n", "# return 'candidates' in mention  # kzaporoj - instead have put this one", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.VocabularyCounter.__init__": [[22, 34], ["gensim.models.KeyedVectors.load_word2vec_format", "collections.defaultdict", "collections.defaultdict"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "lowercase_emb", "=", "False", ")", ":", "\n", "        ", "import", "gensim", "\n", "self", ".", "model", "=", "gensim", ".", "models", ".", "KeyedVectors", ".", "load_word2vec_format", "(", "\n", "config", ".", "base_folder", "+", "\"/data/basic_data/wordEmbeddings/Word2Vec/\"", "\n", "\"GoogleNews-vectors-negative300.bin\"", ",", "binary", "=", "True", ")", "\n", "\"\"\"lowercase_emb=False if True then we lowercase the word for counting of\n        frequencies and hence for finding the pretrained embedding.\"\"\"", "\n", "self", ".", "word_freq", "=", "defaultdict", "(", "int", ")", "\n", "self", ".", "char_freq", "=", "defaultdict", "(", "int", ")", "# how many times each character is encountered", "\n", "self", ".", "lowercase_emb", "=", "lowercase_emb", "\n", "self", ".", "not_in_word2vec_cnt", "=", "0", "\n", "self", ".", "all_words_cnt", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.VocabularyCounter.add": [[35, 52], ["open", "line.rstrip.rstrip.rstrip", "line.rstrip.rstrip.startswith", "line.rstrip.rstrip.startswith", "line.rstrip.rstrip.startswith", "line.rstrip.rstrip.startswith", "line.rstrip.rstrip.startswith", "line.rstrip.rstrip.lower"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "filepath", ")", ":", "\n", "        ", "\"\"\"the file must be in the new dataset format.\"\"\"", "\n", "with", "open", "(", "filepath", ")", "as", "fin", ":", "\n", "            ", "for", "line", "in", "fin", ":", "\n", "                ", "if", "line", ".", "startswith", "(", "\"DOCSTART_\"", ")", "or", "line", ".", "startswith", "(", "\"DOCEND\"", ")", "or", "line", ".", "startswith", "(", "\"MMSTART_\"", ")", "or", "line", ".", "startswith", "(", "\"MMEND\"", ")", "or", "line", ".", "startswith", "(", "\"*NL*\"", ")", ":", "\n", "                    ", "continue", "\n", "", "line", "=", "line", ".", "rstrip", "(", ")", "# omit the '\\n' character", "\n", "word", "=", "line", ".", "lower", "(", ")", "if", "self", ".", "lowercase_emb", "else", "line", "\n", "self", ".", "all_words_cnt", "+=", "1", "\n", "if", "word", "not", "in", "self", ".", "model", ":", "\n", "                    ", "self", ".", "not_in_word2vec_cnt", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "self", ".", "word_freq", "[", "word", "]", "+=", "1", "\n", "", "for", "c", "in", "line", ":", "\n", "                    ", "self", ".", "char_freq", "[", "c", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.VocabularyCounter.print_statistics": [[53, 70], ["print", "print", "print", "zip", "numpy.histogram", "numpy.cumsum", "print", "print", "print", "print", "list", "d.values", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "", "", "", "def", "print_statistics", "(", "self", ",", "word_edges", "=", "None", ",", "\n", "char_edges", "=", "None", ")", ":", "\n", "        ", "\"\"\"Print some statistics about word and char frequency.\"\"\"", "\n", "if", "word_edges", "is", "None", ":", "\n", "            ", "word_edges", "=", "[", "1", ",", "2", ",", "3", ",", "6", ",", "11", ",", "21", ",", "31", ",", "51", ",", "76", ",", "101", ",", "201", ",", "np", ".", "inf", "]", "\n", "", "if", "char_edges", "is", "None", ":", "\n", "            ", "char_edges", "=", "[", "1", ",", "6", ",", "11", ",", "21", ",", "51", ",", "101", ",", "201", ",", "501", ",", "1001", ",", "2001", ",", "np", ".", "inf", "]", "\n", "", "print", "(", "\"not_in_word2vec_cnt = \"", ",", "self", ".", "not_in_word2vec_cnt", ")", "\n", "print", "(", "\"all_words_cnt = \"", ",", "self", ".", "all_words_cnt", ")", "\n", "print", "(", "\"some frequency statistics. The bins are [...) \"", ")", "\n", "for", "d", ",", "name", ",", "edges", "in", "zip", "(", "[", "self", ".", "word_freq", ",", "self", ".", "char_freq", "]", ",", "[", "\"word\"", ",", "\"character\"", "]", ",", "[", "word_edges", ",", "char_edges", "]", ")", ":", "\n", "            ", "hist_values", ",", "_", "=", "np", ".", "histogram", "(", "list", "(", "d", ".", "values", "(", ")", ")", ",", "edges", ")", "\n", "cum_sum", "=", "np", ".", "cumsum", "(", "hist_values", "[", ":", ":", "-", "1", "]", ")", "\n", "print", "(", "name", ",", "\" frequency histogram, edges: \"", ",", "edges", ")", "\n", "print", "(", "\"absolute values:        \"", ",", "hist_values", ")", "\n", "print", "(", "\"absolute cumulative (right to left):    \"", ",", "cum_sum", "[", ":", ":", "-", "1", "]", ")", "\n", "print", "(", "\"probabilites cumulative (right to left):\"", ",", "(", "cum_sum", "/", "np", ".", "sum", "(", "hist_values", ")", ")", "[", ":", ":", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.VocabularyCounter.serialize": [[71, 78], ["os.path.exists", "os.makedirs", "open", "pickle.dump"], "methods", ["None"], ["", "", "def", "serialize", "(", "self", ",", "folder", "=", "None", ",", "name", "=", "\"vocab_freq.pickle\"", ")", ":", "\n", "        ", "if", "folder", "is", "None", ":", "\n", "            ", "folder", "=", "config", ".", "base_folder", "+", "\"data/vocabulary/\"", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "folder", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "folder", ")", "\n", "", "with", "open", "(", "folder", "+", "name", ",", "'wb'", ")", "as", "handle", ":", "\n", "            ", "pickle", ".", "dump", "(", "(", "self", ".", "word_freq", ",", "self", ".", "char_freq", ")", ",", "handle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.VocabularyCounter.count_datasets_vocabulary": [[79, 92], ["third_party.get_immediate_files", "third_party.get_immediate_files", "prepro_util.VocabularyCounter.print_statistics", "prepro_util.VocabularyCounter.serialize", "os.path.basename", "print", "prepro_util.VocabularyCounter.add", "os.path.normpath"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.util.get_immediate_files", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.util.get_immediate_files", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.VocabularyCounter.print_statistics", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.VocabularyCounter.serialize", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add"], ["", "", "def", "count_datasets_vocabulary", "(", "self", ")", ":", "\n", "        ", "new_dataset_folder", "=", "config", ".", "base_folder", "+", "\"data/new_datasets/\"", "\n", "\"\"\"\n        datasets = ['aida_train.txt', 'aida_dev.txt', 'aida_test.txt', 'ace2004.txt',\n                    'aquaint.txt', 'clueweb.txt', 'msnbc.txt', 'wikipedia.txt']\n        \"\"\"", "\n", "for", "dataset", "in", "util", ".", "get_immediate_files", "(", "new_dataset_folder", ")", ":", "\n", "            ", "dataset", "=", "os", ".", "path", ".", "basename", "(", "os", ".", "path", ".", "normpath", "(", "dataset", ")", ")", "\n", "print", "(", "\"Processing dataset: \"", ",", "dataset", ")", "\n", "self", ".", "add", "(", "new_dataset_folder", "+", "dataset", ")", "\n", "", "self", ".", "print_statistics", "(", ")", "\n", "self", ".", "serialize", "(", "folder", "=", "config", ".", "base_folder", "+", "\"data/vocabulary/\"", ",", "\n", "name", "=", "\"vocab_freq.pickle\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.Chunker.__init__": [[154, 163], ["prepro_util.Chunker.chunk_ending.add", "prepro_util.Chunker.chunk_ending.add", "prepro_util.Chunker.chunk_ending.add"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "separator", "=", "args", ".", "chunking", "\n", "self", ".", "chunk_ending", "=", "{", "'DOCEND'", "}", "\n", "if", "self", ".", "separator", "==", "\"per_paragraph\"", ":", "\n", "            ", "self", ".", "chunk_ending", ".", "add", "(", "'*NL*'", ")", "\n", "", "if", "self", ".", "separator", "==", "\"per_sentence\"", ":", "\n", "            ", "self", ".", "chunk_ending", ".", "add", "(", "'.'", ")", "\n", "self", ".", "chunk_ending", ".", "add", "(", "'*NL*'", ")", "\n", "", "self", ".", "parsing_errors", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.Chunker.new_chunk": [[164, 169], ["None"], "methods", ["None"], ["", "def", "new_chunk", "(", "self", ")", ":", "\n", "        ", "self", ".", "chunk_words", "=", "[", "]", "\n", "self", ".", "begin_gm", "=", "[", "]", "# the starting positions of gold mentions", "\n", "self", ".", "end_gm", "=", "[", "]", "# the end positions of gold mentions", "\n", "self", ".", "ground_truth", "=", "[", "]", "# list with the correct entity ids", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.Chunker.compute_result": [[170, 194], ["zip", "prepro_util.Chunker.new_chunk", "print", "str", "str", "len", "len", "len", "len", "len", "len", "str"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.Chunker.new_chunk", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "compute_result", "(", "self", ",", "docid", ")", ":", "\n", "        ", "chunk_id", "=", "docid", "\n", "if", "self", ".", "separator", "==", "\"per_paragraph\"", ":", "\n", "            ", "chunk_id", "=", "chunk_id", "+", "\"&*\"", "+", "str", "(", "self", ".", "par_cnt", ")", "\n", "", "if", "self", ".", "separator", "==", "\"per_sentence\"", ":", "\n", "            ", "chunk_id", "=", "chunk_id", "+", "\"&*\"", "+", "str", "(", "self", ".", "par_cnt", ")", "+", "\"&*\"", "+", "str", "(", "self", ".", "sent_cnt", ")", "\n", "", "result", "=", "(", "chunk_id", ",", "self", ".", "chunk_words", ",", "self", ".", "begin_gm", ",", "self", ".", "end_gm", ",", "self", ".", "ground_truth", ")", "\n", "\n", "# correctness checks. not necessary", "\n", "no_errors_flag", "=", "True", "\n", "if", "len", "(", "self", ".", "begin_gm", ")", "!=", "len", "(", "self", ".", "end_gm", ")", "or", "len", "(", "self", ".", "begin_gm", ")", "!=", "len", "(", "self", ".", "ground_truth", ")", ":", "\n", "            ", "no_errors_flag", "=", "False", "\n", "", "for", "b", ",", "e", "in", "zip", "(", "self", ".", "begin_gm", ",", "self", ".", "end_gm", ")", ":", "\n", "            ", "if", "e", "<=", "b", "or", "b", ">=", "len", "(", "self", ".", "chunk_words", ")", "or", "e", ">", "len", "(", "self", ".", "chunk_words", ")", ":", "\n", "                ", "no_errors_flag", "=", "False", "\n", "\n", "", "", "self", ".", "new_chunk", "(", ")", "\n", "if", "no_errors_flag", "==", "False", ":", "\n", "            ", "self", ".", "parsing_errors", "+=", "1", "\n", "print", "(", "\"chunker parse error: \"", ",", "result", ")", "\n", "return", "None", "\n", "", "else", ":", "\n", "            ", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.Chunker.process": [[195, 238], ["print", "print", "open", "prepro_util.Chunker.new_chunk", "line.rstrip.rstrip.rstrip", "len", "prepro_util.Chunker.compute_result", "prepro_util.Chunker.chunk_words.append", "line.rstrip.rstrip.startswith", "prepro_util.Chunker.ground_truth.append", "prepro_util.Chunker.begin_gm.append", "len", "prepro_util.Chunker.end_gm.append", "line.rstrip.rstrip.startswith", "len", "prepro_util.Chunker.chunk_words.append"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.Chunker.new_chunk", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.Chunker.compute_result"], ["", "", "def", "process", "(", "self", ",", "filepath", ")", ":", "\n", "        ", "print", "(", "'kzaporoj - processing Chunker '", ",", "filepath", ")", "\n", "with", "open", "(", "filepath", ")", "as", "fin", ":", "\n", "            ", "self", ".", "new_chunk", "(", ")", "\n", "docid", "=", "\"\"", "\n", "# paragraph and sentence counter are not actually useful. only for debugging purposes.", "\n", "self", ".", "par_cnt", "=", "0", "# paragraph counter (useful if we work per paragraph)", "\n", "self", ".", "sent_cnt", "=", "0", "# sentence counter (useful if we work per sentence)", "\n", "for", "line", "in", "fin", ":", "\n", "                ", "line", "=", "line", ".", "rstrip", "(", ")", "# omit the '\\n' character", "\n", "if", "line", "in", "self", ".", "chunk_ending", ":", "\n", "                    ", "if", "len", "(", "self", ".", "chunk_words", ")", ">", "0", ":", "# if we have continues *NL* *NL* do not return empty chunks", "\n", "                        ", "temp", "=", "self", ".", "compute_result", "(", "docid", ")", "\n", "if", "temp", "is", "not", "None", ":", "\n", "                            ", "yield", "temp", "\n", "# do not add the chunk separator, no use", "\n", "", "", "if", "line", "==", "'*NL*'", ":", "\n", "                        ", "self", ".", "par_cnt", "+=", "1", "\n", "self", ".", "sent_cnt", "=", "0", "\n", "", "if", "line", "==", "'.'", ":", "\n", "                        ", "self", ".", "sent_cnt", "+=", "1", "\n", "", "", "elif", "line", "==", "'*NL*'", ":", "\n", "                    ", "self", ".", "par_cnt", "+=", "1", "\n", "self", ".", "sent_cnt", "=", "0", "\n", "# do not add this in our words list", "\n", "", "elif", "line", "==", "'.'", ":", "\n", "                    ", "self", ".", "sent_cnt", "+=", "1", "\n", "self", ".", "chunk_words", ".", "append", "(", "line", ")", "\n", "", "elif", "line", ".", "startswith", "(", "'MMSTART_'", ")", ":", "\n", "                    ", "ent_id", "=", "line", "[", "8", ":", "]", "# assert that ent_id in wiki_name_id_map", "\n", "self", ".", "ground_truth", ".", "append", "(", "ent_id", ")", "\n", "self", ".", "begin_gm", ".", "append", "(", "len", "(", "self", ".", "chunk_words", ")", ")", "\n", "", "elif", "line", "==", "'MMEND'", ":", "\n", "                    ", "self", ".", "end_gm", ".", "append", "(", "len", "(", "self", ".", "chunk_words", ")", ")", "\n", "", "elif", "line", ".", "startswith", "(", "'DOCSTART_'", ")", ":", "\n", "                    ", "docid", "=", "line", "[", "9", ":", "]", "\n", "self", ".", "par_cnt", "=", "0", "\n", "self", ".", "sent_cnt", "=", "0", "\n", "", "else", ":", "\n", "                    ", "self", ".", "chunk_words", ".", "append", "(", "line", ")", "\n", "\n", "", "", "", "print", "(", "filepath", ",", "\" chunker parsing errors: \"", ",", "self", ".", "parsing_errors", ")", "\n", "self", ".", "parsing_errors", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.SamplesGenerator.__init__": [[250, 262], ["print", "prepro_util.Chunker", "time.time", "print", "third_party.FetchFilteredCoreferencedCandEntities", "third_party.FetchFilteredCoreferencedCandEntities", "time.time", "print"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["    ", "def", "__init__", "(", "self", ",", "mode", "=", "\"allspans\"", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "print", "(", "'kzaporoj - starting Chunker() load '", ")", "\n", "self", ".", "_generator", "=", "Chunker", "(", ")", "\n", "timec", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'kzaporoj - starting FetchFilteredCoreferencedCandEntities load '", ")", "\n", "self", ".", "fetchFilteredCoreferencedCandEntities", "=", "util", ".", "FetchFilteredCoreferencedCandEntities", "(", "args", ")", "\n", "timed", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'kzaporoj - performing FetchFilteredCoreferencedCandEntities took '", ",", "(", "timed", "-", "timec", ")", "/", "60", ",", "' minutes'", ")", "\n", "self", ".", "all_gm_misses", "=", "0", "\n", "self", ".", "all_gt_misses", "=", "0", "\n", "self", ".", "all_gm", "=", "0", "# all the gm encountered in all the datasets", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.SamplesGenerator.set_gmonly_mode": [[263, 265], ["None"], "methods", ["None"], ["", "def", "set_gmonly_mode", "(", "self", ")", ":", "\n", "        ", "self", ".", "mode", "=", "\"gmonly\"", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.SamplesGenerator.set_allspans_mode": [[266, 268], ["None"], "methods", ["None"], ["", "def", "set_allspans_mode", "(", "self", ")", ":", "\n", "        ", "self", ".", "mode", "=", "\"allspans\"", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.SamplesGenerator.is_gmonly_mode": [[269, 271], ["None"], "methods", ["None"], ["", "def", "is_gmonly_mode", "(", "self", ")", ":", "\n", "        ", "return", "True", "if", "self", ".", "mode", "==", "\"gmonly\"", "else", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.SamplesGenerator.is_allspans_mode": [[272, 274], ["None"], "methods", ["None"], ["", "def", "is_allspans_mode", "(", "self", ")", ":", "\n", "        ", "return", "True", "if", "self", ".", "mode", "==", "\"allspans\"", "else", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.SamplesGenerator.process": [[275, 280], ["prepro_util.SamplesGenerator.is_allspans_mode", "prepro_util.SamplesGenerator._process_allspans", "prepro_util.SamplesGenerator._process_gmonly"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.JSONRecordsGenerator.is_allspans_mode", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.SamplesGenerator._process_allspans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.SamplesGenerator._process_gmonly"], ["", "def", "process", "(", "self", ",", "filepath", ")", ":", "\n", "        ", "if", "self", ".", "is_allspans_mode", "(", ")", ":", "\n", "            ", "return", "self", ".", "_process_allspans", "(", "filepath", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_process_gmonly", "(", "filepath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.SamplesGenerator._process_allspans": [[281, 340], ["prepro_util.SamplesGenerator._generator.process", "prepro_util.SamplesGenerator.fetchFilteredCoreferencedCandEntities.init_coref", "len", "prepro_util.SamplesGenerator.all_spans", "print", "print", "print", "print", "print", "prepro_util.SamplesGenerator.fetchFilteredCoreferencedCandEntities.process", "list", "list", "enumerate", "zip", "begin_spans.append", "end_spans.append", "cand_entities.append", "cand_entities_scores.append", "zip", "zip", "AllspansSample", "list.index"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.transform.TransformCharacters.process", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.util.FetchFilteredCoreferencedCandEntities.init_coref", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.SamplesGenerator.all_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.transform.TransformCharacters.process"], ["", "", "def", "_process_allspans", "(", "self", ",", "filepath", ")", ":", "\n", "        ", "gt_misses", "=", "0", "\n", "gm_misses", "=", "0", "\n", "gm_this_file", "=", "0", "# how many gold mentions are in this document - dataset. so we can find percentage for misses", "\n", "# print('kzaporoj - SamplesGenerator processing ', filepath)", "\n", "# print('kzaporoj - SamplesGenerator max mention width: ', args.max_mention_width)", "\n", "max_mention_width_violations", "=", "0", "\n", "for", "chunk", "in", "self", ".", "_generator", ".", "process", "(", "filepath", ")", ":", "\n", "            ", "self", ".", "fetchFilteredCoreferencedCandEntities", ".", "init_coref", "(", "el_mode", "=", "True", ")", "\n", "begin_spans", "=", "[", "]", "\n", "end_spans", "=", "[", "]", "\n", "cand_entities", "=", "[", "]", "# list of lists     candidate entities", "\n", "cand_entities_scores", "=", "[", "]", "\n", "chunk_id", ",", "chunk_words", ",", "begin_gm", ",", "end_gm", ",", "ground_truth", "=", "chunk", "\n", "gm_this_file", "+=", "len", "(", "begin_gm", ")", "\n", "# print('kzaporoj - SamplesGenerator current chunk: ', chunk)", "\n", "for", "left", ",", "right", "in", "self", ".", "all_spans", "(", "chunk_words", ")", ":", "\n", "                ", "cand_ent", ",", "scores", "=", "self", ".", "fetchFilteredCoreferencedCandEntities", ".", "process", "(", "left", ",", "right", ",", "chunk_words", ")", "\n", "# print('kzaporoj - ---------------------------------------')", "\n", "# print('kzaporoj - SamplesGenerator current chunk: ', chunk_words[left:right])", "\n", "# print('kzaporoj - SamplesGenerator current cand: ', cand_ent)", "\n", "# print('kzaporoj - SamplesGenerator current scores: ', scores)", "\n", "# print('kzaporoj - ---------------------------------------')", "\n", "if", "cand_ent", "is", "not", "None", ":", "\n", "                    ", "begin_spans", ".", "append", "(", "left", ")", "\n", "end_spans", ".", "append", "(", "right", ")", "\n", "cand_entities", ".", "append", "(", "cand_ent", ")", "\n", "cand_entities_scores", ".", "append", "(", "scores", ")", "\n", "\n", "", "", "if", "args", ".", "calculate_stats", ":", "\n", "# check if gold mentions are inside the candidate spans and if yes check if ground truth is in cand ent.", "\n", "                ", "gm_spans", "=", "list", "(", "zip", "(", "begin_gm", ",", "end_gm", ")", ")", "# [(3, 5), (10, 11), (15, 18)]", "\n", "all_spans", "=", "list", "(", "zip", "(", "begin_spans", ",", "end_spans", ")", ")", "\n", "for", "i", ",", "gm_span", "in", "enumerate", "(", "gm_spans", ")", ":", "\n", "                    ", "if", "gm_span", "not", "in", "all_spans", ":", "\n", "                        ", "gm_misses", "+=", "1", "\n", "# print(\"gm not in spans\\t\\t\\t\", colored(' '.join(chunk_words[gm_span[0]:gm_span[1]]), 'red'))", "\n", "", "elif", "ground_truth", "[", "i", "]", "not", "in", "cand_entities", "[", "all_spans", ".", "index", "(", "gm_span", ")", "]", ":", "\n", "                        ", "gt_misses", "+=", "1", "\n", "# print(\"gt not in cand ent\", colored(' '.join(chunk_words[gm_span[0]:gm_span[1]]), 'green'))", "\n", "# print(\"gt: \", ground_truth[i], \"cand_ent: \", cand_entities[all_spans.index(gm_span)])", "\n", "\n", "", "", "for", "b", ",", "e", "in", "zip", "(", "begin_gm", ",", "end_gm", ")", ":", "\n", "                    ", "if", "e", "-", "b", ">", "args", ".", "max_mention_width", ":", "\n", "                        ", "max_mention_width_violations", "+=", "1", "\n", "\n", "", "", "", "if", "begin_spans", ":", "# there are candidate spans in the processed text", "\n", "                ", "yield", "AllspansSample", "(", "chunk_id", ",", "chunk_words", ",", "begin_spans", ",", "end_spans", ",", "\n", "ground_truth", ",", "cand_entities", ",", "cand_entities_scores", ",", "\n", "begin_gm", ",", "end_gm", ")", "\n", "", "", "if", "args", ".", "calculate_stats", ":", "\n", "            ", "print", "(", "\"max_mention_width_violations :\"", ",", "max_mention_width_violations", ")", "\n", "print", "(", "\"gt_misses\"", ",", "gt_misses", ")", "\n", "print", "(", "\"gm_misses\"", ",", "gm_misses", ")", "\n", "print", "(", "\"gm_this_file: \"", ",", "gm_this_file", ")", "\n", "print", "(", "\"recall %     : \"", ",", "(", "1", "-", "(", "gm_misses", "+", "gt_misses", ")", "/", "gm_this_file", ")", "*", "100", ",", "\" %\"", ")", "\n", "self", ".", "all_gt_misses", "+=", "gt_misses", "\n", "self", ".", "all_gm_misses", "+=", "gm_misses", "\n", "self", ".", "all_gm", "+=", "gm_this_file", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.SamplesGenerator.all_spans": [[341, 369], ["set", "enumerate", "separation_indexes.append", "len", "range", "prepro_util.SamplesGenerator.all_spans.all_spans_aux"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "all_spans", "(", "chunk_words", ")", ":", "\n", "# this function produces all possible text spans that do not include spans separators (fullstops).", "\n", "# divide the list of words to lists of lists based on spans_separator.", "\n", "# e.g. if chunk_words is for the whole document divide it to sentences (a list of", "\n", "# sentences) since no span extend above a fullstop.", "\n", "        ", "separation_indexes", "=", "[", "]", "\n", "spans_separator", "=", "set", "(", "config", ".", "spans_separators", ")", "\n", "for", "idx", ",", "word", "in", "enumerate", "(", "chunk_words", ")", ":", "\n", "            ", "if", "word", "in", "spans_separator", ":", "\n", "                ", "separation_indexes", ".", "append", "(", "idx", ")", "\n", "\n", "", "", "separation_indexes", ".", "append", "(", "len", "(", "chunk_words", ")", ")", "\n", "\n", "def", "all_spans_aux", "(", "begin_idx", ",", "end_idx", ")", ":", "\n", "            ", "for", "left_idx", "in", "range", "(", "begin_idx", ",", "end_idx", ")", ":", "\n", "                ", "for", "length", "in", "range", "(", "1", ",", "args", ".", "max_mention_width", "+", "1", ")", ":", "\n", "                    ", "if", "left_idx", "+", "length", ">", "end_idx", ":", "\n", "                        ", "break", "\n", "", "yield", "left_idx", ",", "left_idx", "+", "length", "\n", "\n", "", "", "", "begin_idx", "=", "0", "\n", "for", "end_idx", "in", "separation_indexes", ":", "\n", "            ", "for", "left", ",", "right", "in", "all_spans_aux", "(", "begin_idx", ",", "end_idx", ")", ":", "\n", "# print(left, right, chunk_words[left:right])", "\n", "# print(left, right, ' '.join(chunk_words[left:right])", "\n", "                ", "yield", "left", ",", "right", "\n", "", "begin_idx", "=", "end_idx", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.SamplesGenerator._process_gmonly": [[370, 413], ["prepro_util.SamplesGenerator._generator.process", "prepro_util.SamplesGenerator.fetchFilteredCoreferencedCandEntities.init_coref", "len", "zip", "print", "print", "print", "print", "print", "prepro_util.SamplesGenerator.fetchFilteredCoreferencedCandEntities.process", "cand_entities.append", "cand_entities_scores.append", "GmonlySample"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.transform.TransformCharacters.process", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.util.FetchFilteredCoreferencedCandEntities.init_coref", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.transform.TransformCharacters.process"], ["", "", "def", "_process_gmonly", "(", "self", ",", "filepath", ")", ":", "\n", "        ", "gt_misses", "=", "0", "\n", "gm_misses", "=", "0", "\n", "gm_this_file", "=", "0", "\n", "max_mention_width_violations", "=", "0", "\n", "for", "chunk", "in", "self", ".", "_generator", ".", "process", "(", "filepath", ")", ":", "\n", "            ", "self", ".", "fetchFilteredCoreferencedCandEntities", ".", "init_coref", "(", "el_mode", "=", "False", ")", "\n", "cand_entities", "=", "[", "]", "# list of lists     candidate entities", "\n", "cand_entities_scores", "=", "[", "]", "\n", "chunk_id", ",", "chunk_words", ",", "begin_gm", ",", "end_gm", ",", "ground_truth", "=", "chunk", "\n", "gm_this_file", "+=", "len", "(", "begin_gm", ")", "\n", "for", "left", ",", "right", ",", "gt", "in", "zip", "(", "begin_gm", ",", "end_gm", ",", "ground_truth", ")", ":", "\n", "                ", "cand_ent", ",", "scores", "=", "self", ".", "fetchFilteredCoreferencedCandEntities", ".", "process", "(", "left", ",", "right", ",", "chunk_words", ")", "\n", "if", "cand_ent", "is", "None", ":", "\n", "                    ", "gm_misses", "+=", "1", "\n", "cand_ent", ",", "scores", "=", "[", "]", ",", "[", "]", "\n", "# print(\"gm not in p_e_m\\t\\t\\t\", colored(' '.join(chunk_words[left:right]), 'red'))", "\n", "", "elif", "args", ".", "calculate_stats", "and", "gt", "not", "in", "cand_ent", ":", "\n", "                    ", "gt_misses", "+=", "1", "\n", "# print(\"gt not in cand ent\", colored(' '.join(chunk_words[left:right]), 'green'))", "\n", "# print(\"gt: \", gt, \"cand_ent: \", cand_ent)", "\n", "\n", "", "if", "right", "-", "left", ">", "args", ".", "max_mention_width", ":", "\n", "                    ", "max_mention_width_violations", "+=", "1", "\n", "\n", "# print(' '.join(chunk_words[left:right])", "\n", "# print(cand_ent, scores)", "\n", "", "cand_entities", ".", "append", "(", "cand_ent", ")", "\n", "cand_entities_scores", ".", "append", "(", "scores", ")", "\n", "\n", "", "if", "begin_gm", ":", "# not emtpy", "\n", "                ", "yield", "GmonlySample", "(", "chunk_id", ",", "chunk_words", ",", "begin_gm", ",", "end_gm", ",", "ground_truth", ",", "\n", "cand_entities", ",", "cand_entities_scores", ")", "\n", "\n", "", "", "if", "args", ".", "calculate_stats", ":", "\n", "            ", "print", "(", "\"max_mention_width_violations :\"", ",", "max_mention_width_violations", ")", "\n", "print", "(", "\"gt_misses\"", ",", "gt_misses", ")", "\n", "print", "(", "\"gm_misses\"", ",", "gm_misses", ")", "\n", "print", "(", "\"gm_this_file\"", ",", "gm_this_file", ")", "\n", "print", "(", "\"recall %     : \"", ",", "(", "1", "-", "(", "gm_misses", "+", "gt_misses", ")", "/", "gm_this_file", ")", "*", "100", ",", "\" %\"", ")", "\n", "self", ".", "all_gt_misses", "+=", "gt_misses", "\n", "self", ".", "all_gm_misses", "+=", "gm_misses", "\n", "self", ".", "all_gm", "+=", "gm_this_file", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.JSONEncoderGenerator.__init__": [[441, 451], ["prepro_util.SamplesGenerator", "time.time", "third_party.load_wikiid2nnid", "third_party.load_wikiid2nnid", "time.time", "print", "third_party.load_wiki_name_id_map", "third_party.load_wiki_name_id_map", "time.time", "print"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.util.load_wikiid2nnid", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.util.load_wikiid2nnid", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.util.load_wiki_name_id_map", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.util.load_wiki_name_id_map", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_generator", "=", "SamplesGenerator", "(", ")", "\n", "c_time0", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "_wikiid2nnid", "=", "util", ".", "load_wikiid2nnid", "(", "args", ".", "entity_extension", ")", "\n", "c_time1", "=", "time", ".", "time", "(", ")", "\n", "# (time.time() - wall_start) / 60", "\n", "print", "(", "'kzaporoj - time to get _wikiid2nnid in JSONEncoderGenerator: '", ",", "(", "c_time1", "-", "c_time0", ")", "/", "60", ",", "' minutes'", ")", "\n", "_", ",", "self", ".", "_wikiid2wikilink", "=", "util", ".", "load_wiki_name_id_map", "(", ")", "\n", "c_time2", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'kzaporoj - time to get _wikiid2wikilink in JSONEncoderGenerator: '", ",", "(", "c_time2", "-", "c_time1", ")", "/", "60", ",", "' minutes'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.JSONEncoderGenerator.set_gmonly_mode": [[452, 454], ["prepro_util.JSONEncoderGenerator._generator.set_gmonly_mode"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.JSONRecordsGenerator.set_gmonly_mode"], ["", "def", "set_gmonly_mode", "(", "self", ")", ":", "\n", "        ", "self", ".", "_generator", ".", "set_gmonly_mode", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.JSONEncoderGenerator.set_allspans_mode": [[455, 457], ["prepro_util.JSONEncoderGenerator._generator.set_allspans_mode"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.JSONRecordsGenerator.set_allspans_mode"], ["", "def", "set_allspans_mode", "(", "self", ")", ":", "\n", "        ", "self", ".", "_generator", ".", "set_allspans_mode", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.JSONEncoderGenerator.is_gmonly_mode": [[458, 460], ["prepro_util.JSONEncoderGenerator._generator.is_gmonly_mode"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.JSONRecordsGenerator.is_gmonly_mode"], ["", "def", "is_gmonly_mode", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_generator", ".", "is_gmonly_mode", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.JSONEncoderGenerator.is_allspans_mode": [[461, 463], ["prepro_util.JSONEncoderGenerator._generator.is_allspans_mode"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.JSONRecordsGenerator.is_allspans_mode"], ["", "def", "is_allspans_mode", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_generator", ".", "is_allspans_mode", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.JSONEncoderGenerator.process": [[464, 540], ["print", "prepro_util.JSONEncoderGenerator._generator.process", "print", "print", "print", "isinstance", "prepro_util.JSONEncoderGenerator._encode_cand_entities_and_labels", "isinstance", "JSONSampleEncoded", "list", "zip", "prepro_util.JSONEncoderGenerator._encode_cand_entities_and_labels", "len", "len", "zip", "JSONSampleEncoded", "len", "len", "span_ground_truth.append", "span_ground_truth.append", "len", "len", "len", "len", "list.index"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.transform.TransformCharacters.process", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.EncoderGenerator._encode_cand_entities_and_labels", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.EncoderGenerator._encode_cand_entities_and_labels"], ["", "def", "process", "(", "self", ",", "filepath", ")", ":", "\n", "        ", "ground_truth_errors_cnt", "=", "0", "\n", "cand_entities_not_in_universe_cnt", "=", "0", "\n", "samples_with_errors", "=", "0", "\n", "print", "(", "'kzaporoj - JSONEncoderGenerator process: '", ",", "filepath", ")", "\n", "for", "sample", "in", "self", ".", "_generator", ".", "process", "(", "filepath", ")", ":", "\n", "            ", "words", "=", "[", "]", "\n", "chars", "=", "[", "]", "\n", "# print('kzaporoj - JSONEncoderGenerator specific sample: ', sample)", "\n", "# for word in sample.chunk_words:", "\n", "#     words.append(self._word2id[word] if word in self._word2id", "\n", "#                  else self._word2id[\"<wunk>\"])", "\n", "#     chars.append([self._char2id[c] if c in self._char2id else self._char2id[\"<u>\"]", "\n", "#                   for c in word])", "\n", "words", "=", "sample", ".", "chunk_words", "\n", "# chars_len = [len(word) for word in chars]", "\n", "\n", "# ground_truth_enc = [self._wikiid2nnid[gt] if gt in self._wikiid2nnid else self._wikiid2nnid[\"<u>\"]", "\n", "#                     for gt in sample.ground_truth]", "\n", "# ground_truth_errors_cnt += ground_truth_enc.count(self._wikiid2nnid[\"<u>\"])  # it is always zero", "\n", "\n", "# print(colored(\"New sample\", 'red'))", "\n", "# print(sample)", "\n", "# if len(sample.begin_gm) != len(sample.end_gm) or \\", "\n", "#         len(sample.begin_gm) != len(ground_truth_enc):", "\n", "#     samples_with_errors += 1", "\n", "#     continue", "\n", "if", "isinstance", "(", "sample", ",", "GmonlySample", ")", ":", "\n", "                ", "cand_entities", ",", "cand_entities_scores", ",", "cand_entities_labels", ",", "not_in_universe_cnt", "=", "self", ".", "_encode_cand_entities_and_labels", "(", "\n", "sample", ".", "cand_entities", ",", "sample", ".", "cand_entities_scores", ",", "sample", ".", "ground_truth", ")", "\n", "\n", "yield", "JSONSampleEncoded", "(", "chunk_id", "=", "sample", ".", "chunk_id", ",", "\n", "words", "=", "words", ",", "words_len", "=", "len", "(", "words", ")", ",", "\n", "# chars=chars, chars_len=chars_len,", "\n", "begin_spans", "=", "sample", ".", "begin_gm", ",", "end_spans", "=", "sample", ".", "end_gm", ",", "\n", "spans_len", "=", "len", "(", "sample", ".", "begin_gm", ")", ",", "\n", "cand_entities", "=", "cand_entities", ",", "cand_entities_scores", "=", "cand_entities_scores", ",", "\n", "cand_entities_labels", "=", "cand_entities_labels", ",", "\n", "cand_entities_len", "=", "[", "len", "(", "t", ")", "for", "t", "in", "cand_entities", "]", ",", "\n", "# ground_truth=ground_truth_enc, ground_truth_len=len(sample.ground_truth),", "\n", "begin_gm", "=", "[", "]", ",", "end_gm", "=", "[", "]", ")", "\n", "cand_entities_not_in_universe_cnt", "+=", "not_in_universe_cnt", "\n", "\n", "", "elif", "isinstance", "(", "sample", ",", "AllspansSample", ")", ":", "\n", "                ", "if", "len", "(", "sample", ".", "begin_spans", ")", "!=", "len", "(", "sample", ".", "end_spans", ")", ":", "\n", "                    ", "samples_with_errors", "+=", "1", "\n", "continue", "\n", "# for each span i have the gt or the value -1 if this span is not a gm", "\n", "# and then i work in the same way as above", "\n", "", "span_ground_truth", "=", "[", "]", "\n", "gm_spans", "=", "list", "(", "zip", "(", "sample", ".", "begin_gm", ",", "sample", ".", "end_gm", ")", ")", "# [(3, 5), (10, 11), (15, 18)]", "\n", "for", "left", ",", "right", "in", "zip", "(", "sample", ".", "begin_spans", ",", "sample", ".", "end_spans", ")", ":", "\n", "                    ", "if", "(", "left", ",", "right", ")", "in", "gm_spans", ":", "\n", "                        ", "span_ground_truth", ".", "append", "(", "sample", ".", "ground_truth", "[", "gm_spans", ".", "index", "(", "(", "left", ",", "right", ")", ")", "]", ")", "\n", "", "else", ":", "\n", "                        ", "span_ground_truth", ".", "append", "(", "-", "1", ")", "# this span is not a gm", "\n", "", "", "cand_entities", ",", "cand_entities_scores", ",", "cand_entities_labels", ",", "not_in_universe_cnt", "=", "self", ".", "_encode_cand_entities_and_labels", "(", "\n", "sample", ".", "cand_entities", ",", "sample", ".", "cand_entities_scores", ",", "span_ground_truth", ")", "\n", "\n", "yield", "JSONSampleEncoded", "(", "chunk_id", "=", "sample", ".", "chunk_id", ",", "\n", "words", "=", "words", ",", "words_len", "=", "len", "(", "words", ")", ",", "\n", "# chars=chars, chars_len=chars_len,", "\n", "begin_spans", "=", "sample", ".", "begin_spans", ",", "end_spans", "=", "sample", ".", "end_spans", ",", "\n", "spans_len", "=", "len", "(", "sample", ".", "begin_spans", ")", ",", "\n", "cand_entities", "=", "cand_entities", ",", "cand_entities_scores", "=", "cand_entities_scores", ",", "\n", "cand_entities_labels", "=", "cand_entities_labels", ",", "\n", "cand_entities_len", "=", "[", "len", "(", "t", ")", "for", "t", "in", "cand_entities", "]", ",", "\n", "# ground_truth=ground_truth_enc, ground_truth_len=len(sample.ground_truth),", "\n", "begin_gm", "=", "sample", ".", "begin_gm", ",", "end_gm", "=", "sample", ".", "end_gm", ")", "\n", "\n", "cand_entities_not_in_universe_cnt", "+=", "not_in_universe_cnt", "\n", "", "", "print", "(", "\"ground_truth_errors_cnt =\"", ",", "ground_truth_errors_cnt", ")", "\n", "print", "(", "\"cand_entities_not_in_universe_cnt =\"", ",", "cand_entities_not_in_universe_cnt", ")", "\n", "print", "(", "\"encoder samples_with_errors =\"", ",", "samples_with_errors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.JSONEncoderGenerator._encode_cand_entities_and_labels": [[541, 570], ["zip", "zip", "cand_entities.append", "cand_entities_scores.append", "cand_entities_labels.append", "ent_l.append", "score_l.append", "label_l.append", "prepro_util.JSONEncoderGenerator._wikiid2wikilink[].replace"], "methods", ["None"], ["", "def", "_encode_cand_entities_and_labels", "(", "self", ",", "cand_entities_p", ",", "cand_entities_scores_p", ",", "\n", "ground_truth_p", ")", ":", "\n", "        ", "\"\"\"receives cand_entities (list of lists), and ground_truth (list) and does the following:\n        1) removes cand ent that are not in our universe\n        2) creates a label 0, 1 if this candidate is correct or not (i.e. if the span is indeed a\n         gold mention (row of candidate entities array) and this specific candidate entity (column\n         of candidate entities array) is correct. Returns the filtered cand_entities\n        and the corresponding label (they have the same shape)\"\"\"", "\n", "cand_entities", "=", "[", "]", "\n", "cand_entities_scores", "=", "[", "]", "\n", "cand_entities_labels", "=", "[", "]", "\n", "not_in_universe_cnt", "=", "0", "\n", "for", "cand_ent_l", ",", "cand_scores_l", ",", "gt", "in", "zip", "(", "cand_entities_p", ",", "cand_entities_scores_p", ",", "ground_truth_p", ")", ":", "\n", "            ", "ent_l", "=", "[", "]", "\n", "score_l", "=", "[", "]", "\n", "label_l", "=", "[", "]", "\n", "for", "cand_ent", ",", "score", "in", "zip", "(", "cand_ent_l", ",", "cand_scores_l", ")", ":", "\n", "                ", "if", "cand_ent", "in", "self", ".", "_wikiid2nnid", ":", "# else continue, this entity not in our universe", "\n", "# ent_l.append(self._wikiid2nnid[cand_ent])", "\n", "# kzaporoj --> here appends actual link from the \"universe\"", "\n", "                    ", "ent_l", ".", "append", "(", "self", ".", "_wikiid2wikilink", "[", "cand_ent", "]", ".", "replace", "(", "' '", ",", "'_'", ")", ")", "\n", "score_l", ".", "append", "(", "score", ")", "\n", "label_l", ".", "append", "(", "1", "if", "cand_ent", "==", "gt", "else", "0", ")", "\n", "", "else", ":", "\n", "                    ", "not_in_universe_cnt", "+=", "1", "\n", "", "", "cand_entities", ".", "append", "(", "ent_l", ")", "\n", "cand_entities_scores", ".", "append", "(", "score_l", ")", "\n", "cand_entities_labels", ".", "append", "(", "label_l", ")", "\n", "", "return", "cand_entities", ",", "cand_entities_scores", ",", "cand_entities_labels", ",", "not_in_universe_cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.EncoderGenerator.__init__": [[577, 582], ["prepro_util.SamplesGenerator", "prepro_util.build_word_char_maps", "third_party.load_wikiid2nnid", "third_party.load_wikiid2nnid"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.build_word_char_maps", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.util.load_wikiid2nnid", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.util.load_wikiid2nnid"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_generator", "=", "SamplesGenerator", "(", ")", "\n", "self", ".", "_word2id", ",", "self", ".", "_char2id", "=", "build_word_char_maps", "(", ")", "\n", "# self._word2id, self._char2id = build_word_char_maps_restore()  # alternative", "\n", "self", ".", "_wikiid2nnid", "=", "util", ".", "load_wikiid2nnid", "(", "args", ".", "entity_extension", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.EncoderGenerator.set_gmonly_mode": [[583, 585], ["prepro_util.EncoderGenerator._generator.set_gmonly_mode"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.JSONRecordsGenerator.set_gmonly_mode"], ["", "def", "set_gmonly_mode", "(", "self", ")", ":", "\n", "        ", "self", ".", "_generator", ".", "set_gmonly_mode", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.EncoderGenerator.set_allspans_mode": [[586, 588], ["prepro_util.EncoderGenerator._generator.set_allspans_mode"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.JSONRecordsGenerator.set_allspans_mode"], ["", "def", "set_allspans_mode", "(", "self", ")", ":", "\n", "        ", "self", ".", "_generator", ".", "set_allspans_mode", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.EncoderGenerator.is_gmonly_mode": [[589, 591], ["prepro_util.EncoderGenerator._generator.is_gmonly_mode"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.JSONRecordsGenerator.is_gmonly_mode"], ["", "def", "is_gmonly_mode", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_generator", ".", "is_gmonly_mode", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.EncoderGenerator.is_allspans_mode": [[592, 594], ["prepro_util.EncoderGenerator._generator.is_allspans_mode"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.JSONRecordsGenerator.is_allspans_mode"], ["", "def", "is_allspans_mode", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_generator", ".", "is_allspans_mode", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.EncoderGenerator.process": [[595, 669], ["print", "prepro_util.EncoderGenerator._generator.process", "print", "print", "print", "print", "ground_truth_enc.count", "isinstance", "words.append", "chars.append", "len", "prepro_util.EncoderGenerator._encode_cand_entities_and_labels", "isinstance", "len", "len", "len", "len", "SampleEncoded", "list", "zip", "prepro_util.EncoderGenerator._encode_cand_entities_and_labels", "len", "len", "zip", "SampleEncoded", "len", "len", "len", "span_ground_truth.append", "span_ground_truth.append", "len", "len", "len", "len", "len", "list.index"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.transform.TransformCharacters.process", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.EncoderGenerator._encode_cand_entities_and_labels", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.EncoderGenerator._encode_cand_entities_and_labels"], ["", "def", "process", "(", "self", ",", "filepath", ")", ":", "\n", "        ", "ground_truth_errors_cnt", "=", "0", "\n", "cand_entities_not_in_universe_cnt", "=", "0", "\n", "samples_with_errors", "=", "0", "\n", "print", "(", "'kzaporoj - EncoderGenerator process: '", ",", "filepath", ")", "\n", "for", "sample", "in", "self", ".", "_generator", ".", "process", "(", "filepath", ")", ":", "\n", "            ", "words", "=", "[", "]", "\n", "chars", "=", "[", "]", "\n", "print", "(", "'kzaporoj - EncoderGenerator specific sample: '", ",", "sample", ")", "\n", "for", "word", "in", "sample", ".", "chunk_words", ":", "\n", "                ", "words", ".", "append", "(", "self", ".", "_word2id", "[", "word", "]", "if", "word", "in", "self", ".", "_word2id", "\n", "else", "self", ".", "_word2id", "[", "\"<wunk>\"", "]", ")", "\n", "chars", ".", "append", "(", "[", "self", ".", "_char2id", "[", "c", "]", "if", "c", "in", "self", ".", "_char2id", "else", "self", ".", "_char2id", "[", "\"<u>\"", "]", "\n", "for", "c", "in", "word", "]", ")", "\n", "", "chars_len", "=", "[", "len", "(", "word", ")", "for", "word", "in", "chars", "]", "\n", "\n", "ground_truth_enc", "=", "[", "self", ".", "_wikiid2nnid", "[", "gt", "]", "if", "gt", "in", "self", ".", "_wikiid2nnid", "else", "self", ".", "_wikiid2nnid", "[", "\"<u>\"", "]", "\n", "for", "gt", "in", "sample", ".", "ground_truth", "]", "\n", "ground_truth_errors_cnt", "+=", "ground_truth_enc", ".", "count", "(", "self", ".", "_wikiid2nnid", "[", "\"<u>\"", "]", ")", "# it is always zero", "\n", "\n", "# print(colored(\"New sample\", 'red'))", "\n", "# print(sample)", "\n", "if", "len", "(", "sample", ".", "begin_gm", ")", "!=", "len", "(", "sample", ".", "end_gm", ")", "or", "len", "(", "sample", ".", "begin_gm", ")", "!=", "len", "(", "ground_truth_enc", ")", ":", "\n", "                ", "samples_with_errors", "+=", "1", "\n", "continue", "\n", "", "if", "isinstance", "(", "sample", ",", "GmonlySample", ")", ":", "\n", "                ", "cand_entities", ",", "cand_entities_scores", ",", "cand_entities_labels", ",", "not_in_universe_cnt", "=", "self", ".", "_encode_cand_entities_and_labels", "(", "\n", "sample", ".", "cand_entities", ",", "sample", ".", "cand_entities_scores", ",", "sample", ".", "ground_truth", ")", "\n", "\n", "yield", "SampleEncoded", "(", "chunk_id", "=", "sample", ".", "chunk_id", ",", "\n", "words", "=", "words", ",", "words_len", "=", "len", "(", "words", ")", ",", "\n", "chars", "=", "chars", ",", "chars_len", "=", "chars_len", ",", "\n", "begin_spans", "=", "sample", ".", "begin_gm", ",", "end_spans", "=", "sample", ".", "end_gm", ",", "\n", "spans_len", "=", "len", "(", "sample", ".", "begin_gm", ")", ",", "\n", "cand_entities", "=", "cand_entities", ",", "cand_entities_scores", "=", "cand_entities_scores", ",", "\n", "cand_entities_labels", "=", "cand_entities_labels", ",", "\n", "cand_entities_len", "=", "[", "len", "(", "t", ")", "for", "t", "in", "cand_entities", "]", ",", "\n", "ground_truth", "=", "ground_truth_enc", ",", "ground_truth_len", "=", "len", "(", "sample", ".", "ground_truth", ")", ",", "\n", "begin_gm", "=", "[", "]", ",", "end_gm", "=", "[", "]", ")", "\n", "\n", "", "elif", "isinstance", "(", "sample", ",", "AllspansSample", ")", ":", "\n", "                ", "if", "len", "(", "sample", ".", "begin_spans", ")", "!=", "len", "(", "sample", ".", "end_spans", ")", ":", "\n", "                    ", "samples_with_errors", "+=", "1", "\n", "continue", "\n", "# for each span i have the gt or the value -1 if this span is not a gm", "\n", "# and then i work in the same way as above", "\n", "", "span_ground_truth", "=", "[", "]", "\n", "gm_spans", "=", "list", "(", "zip", "(", "sample", ".", "begin_gm", ",", "sample", ".", "end_gm", ")", ")", "# [(3, 5), (10, 11), (15, 18)]", "\n", "for", "left", ",", "right", "in", "zip", "(", "sample", ".", "begin_spans", ",", "sample", ".", "end_spans", ")", ":", "\n", "                    ", "if", "(", "left", ",", "right", ")", "in", "gm_spans", ":", "\n", "                        ", "span_ground_truth", ".", "append", "(", "sample", ".", "ground_truth", "[", "gm_spans", ".", "index", "(", "(", "left", ",", "right", ")", ")", "]", ")", "\n", "", "else", ":", "\n", "                        ", "span_ground_truth", ".", "append", "(", "-", "1", ")", "# this span is not a gm", "\n", "", "", "cand_entities", ",", "cand_entities_scores", ",", "cand_entities_labels", ",", "not_in_universe_cnt", "=", "self", ".", "_encode_cand_entities_and_labels", "(", "\n", "sample", ".", "cand_entities", ",", "sample", ".", "cand_entities_scores", ",", "span_ground_truth", ")", "\n", "\n", "yield", "SampleEncoded", "(", "chunk_id", "=", "sample", ".", "chunk_id", ",", "\n", "words", "=", "words", ",", "words_len", "=", "len", "(", "words", ")", ",", "\n", "chars", "=", "chars", ",", "chars_len", "=", "chars_len", ",", "\n", "begin_spans", "=", "sample", ".", "begin_spans", ",", "end_spans", "=", "sample", ".", "end_spans", ",", "\n", "spans_len", "=", "len", "(", "sample", ".", "begin_spans", ")", ",", "\n", "cand_entities", "=", "cand_entities", ",", "cand_entities_scores", "=", "cand_entities_scores", ",", "\n", "cand_entities_labels", "=", "cand_entities_labels", ",", "\n", "cand_entities_len", "=", "[", "len", "(", "t", ")", "for", "t", "in", "cand_entities", "]", ",", "\n", "ground_truth", "=", "ground_truth_enc", ",", "ground_truth_len", "=", "len", "(", "sample", ".", "ground_truth", ")", ",", "\n", "begin_gm", "=", "sample", ".", "begin_gm", ",", "end_gm", "=", "sample", ".", "end_gm", ")", "\n", "\n", "", "cand_entities_not_in_universe_cnt", "+=", "not_in_universe_cnt", "\n", "", "print", "(", "\"ground_truth_errors_cnt =\"", ",", "ground_truth_errors_cnt", ")", "\n", "print", "(", "\"cand_entities_not_in_universe_cnt =\"", ",", "cand_entities_not_in_universe_cnt", ")", "\n", "print", "(", "\"encoder samples_with_errors =\"", ",", "samples_with_errors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.EncoderGenerator._encode_cand_entities_and_labels": [[670, 697], ["zip", "zip", "cand_entities.append", "cand_entities_scores.append", "cand_entities_labels.append", "ent_l.append", "score_l.append", "label_l.append"], "methods", ["None"], ["", "def", "_encode_cand_entities_and_labels", "(", "self", ",", "cand_entities_p", ",", "cand_entities_scores_p", ",", "\n", "ground_truth_p", ")", ":", "\n", "        ", "\"\"\"receives cand_entities (list of lists), and ground_truth (list) and does the following:\n        1) removes cand ent that are not in our universe\n        2) creates a label 0, 1 if this candidate is correct or not (i.e. if the span is indeed a\n         gold mention (row of candidate entities array) and this specific candidate entity (column\n         of candidate entities array) is correct. Returns the filtered cand_entities\n        and the corresponding label (they have the same shape)\"\"\"", "\n", "cand_entities", "=", "[", "]", "\n", "cand_entities_scores", "=", "[", "]", "\n", "cand_entities_labels", "=", "[", "]", "\n", "not_in_universe_cnt", "=", "0", "\n", "for", "cand_ent_l", ",", "cand_scores_l", ",", "gt", "in", "zip", "(", "cand_entities_p", ",", "cand_entities_scores_p", ",", "ground_truth_p", ")", ":", "\n", "            ", "ent_l", "=", "[", "]", "\n", "score_l", "=", "[", "]", "\n", "label_l", "=", "[", "]", "\n", "for", "cand_ent", ",", "score", "in", "zip", "(", "cand_ent_l", ",", "cand_scores_l", ")", ":", "\n", "                ", "if", "cand_ent", "in", "self", ".", "_wikiid2nnid", ":", "# else continue, this entity not in our universe", "\n", "                    ", "ent_l", ".", "append", "(", "self", ".", "_wikiid2nnid", "[", "cand_ent", "]", ")", "\n", "score_l", ".", "append", "(", "score", ")", "\n", "label_l", ".", "append", "(", "1", "if", "cand_ent", "==", "gt", "else", "0", ")", "\n", "", "else", ":", "\n", "                    ", "not_in_universe_cnt", "+=", "1", "\n", "", "", "cand_entities", ".", "append", "(", "ent_l", ")", "\n", "cand_entities_scores", ".", "append", "(", "score_l", ")", "\n", "cand_entities_labels", ".", "append", "(", "label_l", ")", "\n", "", "return", "cand_entities", ",", "cand_entities_scores", ",", "cand_entities_labels", ",", "not_in_universe_cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.TFRecordsGenerator.__init__": [[700, 702], ["prepro_util.EncoderGenerator"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_generator", "=", "EncoderGenerator", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.TFRecordsGenerator.set_gmonly_mode": [[703, 705], ["prepro_util.TFRecordsGenerator._generator.set_gmonly_mode"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.JSONRecordsGenerator.set_gmonly_mode"], ["", "def", "set_gmonly_mode", "(", "self", ")", ":", "\n", "        ", "self", ".", "_generator", ".", "set_gmonly_mode", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.TFRecordsGenerator.set_allspans_mode": [[706, 708], ["prepro_util.TFRecordsGenerator._generator.set_allspans_mode"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.JSONRecordsGenerator.set_allspans_mode"], ["", "def", "set_allspans_mode", "(", "self", ")", ":", "\n", "        ", "self", ".", "_generator", ".", "set_allspans_mode", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.TFRecordsGenerator.is_gmonly_mode": [[709, 711], ["prepro_util.TFRecordsGenerator._generator.is_gmonly_mode"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.JSONRecordsGenerator.is_gmonly_mode"], ["", "def", "is_gmonly_mode", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_generator", ".", "is_gmonly_mode", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.TFRecordsGenerator.is_allspans_mode": [[712, 714], ["prepro_util.TFRecordsGenerator._generator.is_allspans_mode"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.JSONRecordsGenerator.is_allspans_mode"], ["", "def", "is_allspans_mode", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_generator", ".", "is_allspans_mode", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.TFRecordsGenerator._to_sequence_example": [[715, 776], ["tensorflow.train.Features", "isinstance", "tensorflow.train.FeatureLists", "tensorflow.train.SequenceExample", "tensorflow.train.Feature", "tensorflow.train.Feature", "tensorflow.train.Feature", "tensorflow.train.FeatureList", "tensorflow.train.FeatureList", "tensorflow.train.FeatureList", "prepro_util.TFRecordsGenerator._to_sequence_example._int64_feature_list"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_to_sequence_example", "(", "sample", ")", ":", "\n", "        ", "def", "_bytes_feature", "(", "value", ")", ":", "\n", "            ", "return", "tf", ".", "train", ".", "Feature", "(", "bytes_list", "=", "tf", ".", "train", ".", "BytesList", "(", "value", "=", "[", "value", "]", ")", ")", "\n", "\n", "# Those two create a simple feature. The first a simple feature with one integer, whereas the second a simple", "\n", "# list of integers as one feature.", "\n", "", "def", "_int64_feature", "(", "value", ")", ":", "\n", "            ", "\"\"\"value is a simple integer.\"\"\"", "\n", "return", "tf", ".", "train", ".", "Feature", "(", "int64_list", "=", "tf", ".", "train", ".", "Int64List", "(", "value", "=", "[", "value", "]", ")", ")", "\n", "\n", "", "def", "_int64list_feature", "(", "value", ")", ":", "\n", "            ", "\"\"\"value is a list of integers.\"\"\"", "\n", "return", "tf", ".", "train", ".", "Feature", "(", "int64_list", "=", "tf", ".", "train", ".", "Int64List", "(", "value", "=", "value", ")", ")", "\n", "\n", "", "def", "_int64_feature_list", "(", "values", ")", ":", "\n", "            ", "\"\"\" values is a list of integers like the words (words = [2,4,6,8,10])\n            a feature list where each feature has only one number (a list with fixed\n            number of elements, specifically only one)\"\"\"", "\n", "return", "tf", ".", "train", ".", "FeatureList", "(", "feature", "=", "[", "_int64_feature", "(", "v", ")", "for", "v", "in", "values", "]", ")", "\n", "\n", "", "def", "_int64list_feature_list", "(", "values", ")", ":", "\n", "            ", "\"\"\" like the chars = [[1,2,3], [4,5], [6], [7,8], [9,10,11,12]] a feature list where each feature can have variable\n            number of ements\"\"\"", "\n", "return", "tf", ".", "train", ".", "FeatureList", "(", "feature", "=", "[", "_int64list_feature", "(", "v", ")", "for", "v", "in", "values", "]", ")", "\n", "\n", "", "def", "_floatlist_feature_list", "(", "values", ")", ":", "\n", "            ", "\"\"\" like the chars = [[0.1,0.2,0.3], [0.4,0.5]] a feature list where each feature can have variable\n            number of ements\"\"\"", "\n", "\n", "def", "_floatlist_feature", "(", "value", ")", ":", "\n", "                ", "\"\"\"value is a list of integers.\"\"\"", "\n", "return", "tf", ".", "train", ".", "Feature", "(", "float_list", "=", "tf", ".", "train", ".", "FloatList", "(", "value", "=", "value", ")", ")", "\n", "\n", "", "return", "tf", ".", "train", ".", "FeatureList", "(", "feature", "=", "[", "_floatlist_feature", "(", "v", ")", "for", "v", "in", "values", "]", ")", "\n", "\n", "", "context", "=", "tf", ".", "train", ".", "Features", "(", "feature", "=", "{", "\n", "\"chunk_id\"", ":", "_bytes_feature", "(", "sample", ".", "chunk_id", ".", "encode", "(", "'utf-8'", ")", ")", ",", "\n", "\"words_len\"", ":", "_int64_feature", "(", "sample", ".", "words_len", ")", ",", "\n", "\"spans_len\"", ":", "_int64_feature", "(", "sample", ".", "spans_len", ")", ",", "\n", "\"ground_truth_len\"", ":", "_int64_feature", "(", "sample", ".", "ground_truth_len", ")", "\n", "}", ")", "\n", "feature_list", "=", "{", "\n", "\"words\"", ":", "_int64_feature_list", "(", "sample", ".", "words", ")", ",", "\n", "\"chars\"", ":", "_int64list_feature_list", "(", "sample", ".", "chars", ")", ",", "\n", "\"chars_len\"", ":", "_int64_feature_list", "(", "sample", ".", "chars_len", ")", ",", "\n", "\"begin_span\"", ":", "_int64_feature_list", "(", "sample", ".", "begin_spans", ")", ",", "\n", "\"end_span\"", ":", "_int64_feature_list", "(", "sample", ".", "end_spans", ")", ",", "\n", "\"cand_entities\"", ":", "_int64list_feature_list", "(", "sample", ".", "cand_entities", ")", ",", "\n", "\"cand_entities_scores\"", ":", "_floatlist_feature_list", "(", "sample", ".", "cand_entities_scores", ")", ",", "\n", "\"cand_entities_labels\"", ":", "_int64list_feature_list", "(", "sample", ".", "cand_entities_labels", ")", ",", "\n", "\"cand_entities_len\"", ":", "_int64_feature_list", "(", "sample", ".", "cand_entities_len", ")", ",", "\n", "\"ground_truth\"", ":", "_int64_feature_list", "(", "sample", ".", "ground_truth", ")", "\n", "}", "\n", "if", "isinstance", "(", "sample", ",", "SampleEncoded", ")", ":", "\n", "            ", "feature_list", "[", "\"begin_gm\"", "]", "=", "_int64_feature_list", "(", "sample", ".", "begin_gm", ")", "\n", "feature_list", "[", "\"end_gm\"", "]", "=", "_int64_feature_list", "(", "sample", ".", "end_gm", ")", "\n", "", "feature_lists", "=", "tf", ".", "train", ".", "FeatureLists", "(", "feature_list", "=", "feature_list", ")", "\n", "\n", "sequence_example", "=", "tf", ".", "train", ".", "SequenceExample", "(", "context", "=", "context", ",", "feature_lists", "=", "feature_lists", ")", "\n", "return", "sequence_example", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.TFRecordsGenerator.process": [[777, 796], ["print", "tensorflow.python_io.TFRecordWriter", "prepro_util.TFRecordsGenerator._generator.process", "tensorflow.python_io.TFRecordWriter.close", "print", "os.path.basename", "prepro_util.TFRecordsGenerator.is_gmonly_mode", "os.path.exists", "os.makedirs", "prepro_util.TFRecordsGenerator._to_sequence_example", "os.path.normpath", "tensorflow.python_io.TFRecordWriter.write", "prepro_util.TFRecordsGenerator.SerializeToString"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.transform.TransformCharacters.process", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.close", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.JSONRecordsGenerator.is_gmonly_mode", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.JSONRecordsGenerator._to_sequence_example", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.write"], ["", "def", "process", "(", "self", ",", "filepath", ")", ":", "\n", "        ", "print", "(", "\"TFRecordsGenerator processing file: \"", ",", "filepath", ")", "\n", "# the name of the dataset. just extract the last part of path", "\n", "filename", "=", "os", ".", "path", ".", "basename", "(", "os", ".", "path", ".", "normpath", "(", "filepath", ")", ")", "[", ":", "-", "4", "]", "# omit the '.txt'", "\n", "output_folder", "=", "config", ".", "base_folder", "+", "\"data/tfrecords/\"", "+", "args", ".", "experiment_name", "+", "\"/\"", "\n", "output_folder", "+=", "\"gmonly/\"", "if", "self", ".", "is_gmonly_mode", "(", ")", "else", "\"allspans/\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_folder", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "output_folder", ")", "\n", "", "writer", "=", "tf", ".", "python_io", ".", "TFRecordWriter", "(", "output_folder", "+", "filename", ")", "\n", "records_cnt", "=", "0", "\n", "for", "sample", "in", "self", ".", "_generator", ".", "process", "(", "filepath", ")", ":", "\n", "# print(sample)", "\n", "            ", "sequence_example", "=", "self", ".", "_to_sequence_example", "(", "sample", ")", "\n", "# write it to file", "\n", "if", "sequence_example", "is", "not", "None", ":", "\n", "                ", "writer", ".", "write", "(", "sequence_example", ".", "SerializeToString", "(", ")", ")", "\n", "records_cnt", "+=", "1", "\n", "", "", "writer", ".", "close", "(", ")", "\n", "print", "(", "\"records_cnt = \"", ",", "records_cnt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.JSONRecordsGenerator.__init__": [[806, 808], ["prepro_util.JSONEncoderGenerator"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_generator", "=", "JSONEncoderGenerator", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.JSONRecordsGenerator.set_gmonly_mode": [[809, 811], ["prepro_util.JSONRecordsGenerator._generator.set_gmonly_mode"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.JSONRecordsGenerator.set_gmonly_mode"], ["", "def", "set_gmonly_mode", "(", "self", ")", ":", "\n", "        ", "self", ".", "_generator", ".", "set_gmonly_mode", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.JSONRecordsGenerator.set_allspans_mode": [[812, 814], ["prepro_util.JSONRecordsGenerator._generator.set_allspans_mode"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.JSONRecordsGenerator.set_allspans_mode"], ["", "def", "set_allspans_mode", "(", "self", ")", ":", "\n", "        ", "self", ".", "_generator", ".", "set_allspans_mode", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.JSONRecordsGenerator.is_gmonly_mode": [[815, 817], ["prepro_util.JSONRecordsGenerator._generator.is_gmonly_mode"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.JSONRecordsGenerator.is_gmonly_mode"], ["", "def", "is_gmonly_mode", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_generator", ".", "is_gmonly_mode", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.JSONRecordsGenerator.is_allspans_mode": [[818, 820], ["prepro_util.JSONRecordsGenerator._generator.is_allspans_mode"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.JSONRecordsGenerator.is_allspans_mode"], ["", "def", "is_allspans_mode", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_generator", ".", "is_allspans_mode", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.JSONRecordsGenerator._to_sequence_example": [[821, 838], ["dict", "zip"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_to_sequence_example", "(", "sample", ")", ":", "\n", "        ", "sequence_sample", "=", "dict", "(", ")", "\n", "doc_id", "=", "sample", ".", "chunk_id", "\n", "span_begin", "=", "sample", ".", "begin_spans", "\n", "span_end", "=", "sample", ".", "end_spans", "\n", "words", "=", "sample", ".", "words", "\n", "\n", "spans", "=", "[", "' '", ".", "join", "(", "words", "[", "curr_start", ":", "curr_end", "]", ")", "for", "curr_start", ",", "curr_end", "in", "zip", "(", "span_begin", ",", "span_end", ")", "]", "\n", "sequence_sample", "[", "'doc_id'", "]", "=", "doc_id", "\n", "sequence_sample", "[", "'span_begin'", "]", "=", "span_begin", "\n", "sequence_sample", "[", "'span_end'", "]", "=", "span_end", "\n", "sequence_sample", "[", "'spans'", "]", "=", "spans", "\n", "sequence_sample", "[", "'candidates'", "]", "=", "sample", ".", "cand_entities", "\n", "sequence_sample", "[", "'scores'", "]", "=", "sample", ".", "cand_entities_scores", "\n", "\n", "return", "sequence_sample", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.JSONRecordsGenerator.process": [[839, 866], ["print", "open", "prepro_util.JSONRecordsGenerator._generator.process", "print", "prepro_util.JSONRecordsGenerator.is_gmonly_mode", "os.path.exists", "os.makedirs", "prepro_util.JSONRecordsGenerator._to_sequence_example", "print", "os.path.basename", "open.write", "os.path.normpath", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.transform.TransformCharacters.process", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.JSONRecordsGenerator.is_gmonly_mode", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.JSONRecordsGenerator._to_sequence_example", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.write"], ["", "def", "process", "(", "self", ",", "filepath", ")", ":", "\n", "        ", "import", "json", "\n", "print", "(", "\"JSONRecordsGenerator processing file: \"", ",", "filepath", ")", "\n", "# the name of the dataset. just extract the last part of path", "\n", "filename", "=", "os", ".", "path", ".", "basename", "(", "os", ".", "path", ".", "normpath", "(", "filepath", ")", ")", "[", ":", "-", "4", "]", "+", "'.jsonl'", "# omit the '.txt'", "\n", "output_folder", "=", "config", ".", "base_folder", "+", "\"data/json_records/\"", "+", "args", ".", "experiment_name", "+", "\"/\"", "\n", "output_folder", "+=", "\"gmonly/\"", "if", "self", ".", "is_gmonly_mode", "(", ")", "else", "\"allspans/\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_folder", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "output_folder", ")", "\n", "# writer = tf.python_io.TFRecordWriter(output_folder + filename)", "\n", "# writer = list()", "\n", "", "records_cnt", "=", "0", "\n", "# writer = open(output_folder + filename, 'w')", "\n", "writer", "=", "open", "(", "output_folder", "+", "filename", ",", "'w'", ",", "encoding", "=", "'utf8'", ")", "\n", "for", "sample", "in", "self", ".", "_generator", ".", "process", "(", "filepath", ")", ":", "\n", "# print(sample)", "\n", "# print('kzaporoj - JSONRecordsGenerator, sample passed to _to_sequence_example: ', sample)", "\n", "            ", "sequence_sample", "=", "self", ".", "_to_sequence_example", "(", "sample", ")", "\n", "print", "(", "'kzaporoj - JSONRecordsGenerator, sequence_sample: '", ",", "sequence_sample", ")", "\n", "assert", "sequence_sample", "is", "not", "None", "\n", "# write it to file", "\n", "if", "sequence_sample", "is", "not", "None", ":", "\n", "                ", "writer", ".", "write", "(", "json", ".", "dumps", "(", "sequence_sample", ",", "ensure_ascii", "=", "False", ")", "+", "'\\n'", ")", "\n", "# writer.write((json.dumps(sequence_sample) + '\\n').encode('utf8'))", "\n", "records_cnt", "+=", "1", "\n", "# writer.close()", "\n", "", "", "print", "(", "\"records_cnt = \"", ",", "records_cnt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.PrintSamples.__init__": [[899, 902], ["third_party.load_wiki_name_id_map", "third_party.load_wiki_name_id_map"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.util.load_wiki_name_id_map", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.util.load_wiki_name_id_map"], ["    ", "def", "__init__", "(", "self", ",", "only_misses", "=", "True", ")", ":", "\n", "        ", "_", ",", "self", ".", "wiki_id_name_map", "=", "util", ".", "load_wiki_name_id_map", "(", ")", "\n", "self", ".", "only_misses", "=", "only_misses", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.PrintSamples.print_candidates": [[903, 911], ["acc.append", "prepro_util.PrintSamples.wiki_id_name_map[].replace"], "methods", ["None"], ["", "def", "print_candidates", "(", "self", ",", "ent_ids_list", ")", ":", "\n", "        ", "\"\"\"takes as input a list of ent_id and returns a string. This string has each ent_id\n        together with the corresponding name (in the name withspaces are replaced by underscore)\n        and candidates are separated with a single space. e.g.  ent_id,Barack_Obama ent_id2,US_President\"\"\"", "\n", "acc", "=", "[", "]", "\n", "for", "ent_id", "in", "ent_ids_list", ":", "\n", "            ", "acc", ".", "append", "(", "ent_id", "+", "\",\"", "+", "self", ".", "wiki_id_name_map", "[", "ent_id", "]", ".", "replace", "(", "' '", ",", "'_'", ")", ")", "\n", "", "return", "' '", ".", "join", "(", "acc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.PrintSamples.print_sample": [[912, 969], ["isinstance", "enumerate", "isinstance", "zip", "print", "print", "print", "print", "range", "list", "list", "print", "print", "enumerate", "misses_idx.append", "termcolor.colored", "print", "termcolor.colored", "len", "print", "zip", "zip", "termcolor.colored", "zip", "prepro_util.PrintSamples.print_candidates", "termcolor.colored", "prepro_util.PrintSamples.print_candidates", "termcolor.colored", "print", "termcolor.colored", "print", "print", "print", "prepro_util.PrintSamples.print_candidates", "prepro_util.PrintSamples.print_candidates", "prepro_util.PrintSamples.print_candidates", "prepro_util.PrintSamples.print_candidates", "termcolor.colored", "prepro_util.PrintSamples.print_candidates", "termcolor.colored", "prepro_util.PrintSamples.print_candidates", "termcolor.colored", "list.index", "prepro_util.PrintSamples.print_candidates", "list.index", "prepro_util.PrintSamples.print_candidates", "list.index", "list.index"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.PrintSamples.print_candidates", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.PrintSamples.print_candidates", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.PrintSamples.print_candidates", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.PrintSamples.print_candidates", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.PrintSamples.print_candidates", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.PrintSamples.print_candidates", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.PrintSamples.print_candidates", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.PrintSamples.print_candidates", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.PrintSamples.print_candidates", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.PrintSamples.print_candidates"], ["", "def", "print_sample", "(", "self", ",", "sample", ")", ":", "\n", "        ", "chunk_words", ",", "begin_gm", ",", "end_gm", ",", "ground_truth", ",", "cand_entities", "=", "sample", ".", "chunk_words", ",", "sample", ".", "begin_gm", ",", "sample", ".", "end_gm", ",", "sample", ".", "ground_truth", ",", "sample", ".", "cand_entities", "\n", "if", "isinstance", "(", "sample", ",", "GmonlySample", ")", ":", "\n", "            ", "misses_idx", "=", "[", "]", "\n", "for", "i", ",", "(", "gt", ",", "cand_ent", ")", "in", "enumerate", "(", "zip", "(", "ground_truth", ",", "cand_entities", ")", ")", ":", "\n", "                ", "if", "gt", "not", "in", "cand_ent", ":", "\n", "                    ", "misses_idx", ".", "append", "(", "i", ")", "# miss detected", "\n", "\n", "", "", "if", "self", ".", "only_misses", "and", "misses_idx", ":", "\n", "                ", "print", "(", "colored", "(", "\"New sample\"", ",", "'red'", ")", ")", "\n", "print", "(", "' '", ".", "join", "(", "chunk_words", ")", ")", "\n", "for", "i", "in", "misses_idx", ":", "\n", "                    ", "message", "=", "' '", ".", "join", "(", "chunk_words", "[", "begin_gm", "[", "i", "]", ":", "end_gm", "[", "i", "]", "]", ")", "+", "\"\\tgt=\"", "+", "self", ".", "print_candidates", "(", "[", "ground_truth", "[", "i", "]", "]", ")", "+", "\"\\tCandidates: \"", "+", "self", ".", "print_candidates", "(", "cand_entities", "[", "i", "]", ")", "\n", "print", "(", "colored", "(", "message", ",", "'yellow'", ")", ")", "\n", "", "", "if", "self", ".", "only_misses", "==", "False", ":", "\n", "                ", "print", "(", "colored", "(", "\"New sample\"", ",", "'red'", ")", ")", "\n", "print", "(", "' '", ".", "join", "(", "chunk_words", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "begin_gm", ")", ")", ":", "\n", "                    ", "message", "=", "' '", ".", "join", "(", "chunk_words", "[", "begin_gm", "[", "i", "]", ":", "end_gm", "[", "i", "]", "]", ")", "+", "\"\\tgt=\"", "+", "self", ".", "print_candidates", "(", "[", "ground_truth", "[", "i", "]", "]", ")", "+", "\"\\tCandidates: \"", "+", "self", ".", "print_candidates", "(", "cand_entities", "[", "i", "]", ")", "\n", "print", "(", "colored", "(", "message", ",", "'yellow'", "if", "i", "in", "misses_idx", "else", "'white'", ")", ")", "\n", "", "", "", "elif", "isinstance", "(", "sample", ",", "AllspansSample", ")", ":", "\n", "            ", "begin_spans", ",", "end_spans", "=", "sample", ".", "begin_spans", ",", "sample", ".", "end_spans", "\n", "gm_spans", "=", "list", "(", "zip", "(", "begin_gm", ",", "end_gm", ")", ")", "# [(3, 5), (10, 11), (15, 18)]", "\n", "all_spans", "=", "list", "(", "zip", "(", "begin_spans", ",", "end_spans", ")", ")", "\n", "print", "(", "colored", "(", "\"New sample\"", ",", "'red'", ")", ")", "\n", "print", "(", "' '", ".", "join", "(", "chunk_words", ")", ")", "\n", "for", "i", ",", "gm_span", "in", "enumerate", "(", "gm_spans", ")", ":", "\n", "                ", "if", "gm_span", "not", "in", "all_spans", ":", "\n", "                    ", "message", "=", "' '", ".", "join", "(", "chunk_words", "[", "begin_gm", "[", "i", "]", ":", "end_gm", "[", "i", "]", "]", ")", "+", "\"\\tgt=\"", "+", "self", ".", "print_candidates", "(", "[", "ground_truth", "[", "i", "]", "]", ")", "+", "\"\\tgm_miss\"", "\n", "print", "(", "colored", "(", "message", ",", "'magenta'", ")", ")", "\n", "", "elif", "ground_truth", "[", "i", "]", "not", "in", "cand_entities", "[", "all_spans", ".", "index", "(", "gm_span", ")", "]", ":", "\n", "                    ", "message", "=", "' '", ".", "join", "(", "chunk_words", "[", "begin_gm", "[", "i", "]", ":", "end_gm", "[", "i", "]", "]", ")", "+", "\"\\tgt=\"", "+", "self", ".", "print_candidates", "(", "[", "ground_truth", "[", "i", "]", "]", ")", "+", "\"\\tgt_miss Candidates: \"", "+", "self", ".", "print_candidates", "(", "cand_entities", "[", "all_spans", ".", "index", "(", "gm_span", ")", "]", ")", "\n", "print", "(", "colored", "(", "message", ",", "'yellow'", ")", ")", "\n", "\n", "", "", "if", "self", ".", "only_misses", "==", "False", ":", "\n", "# then also print all the spans and their candidate entities", "\n", "                ", "for", "left", ",", "right", ",", "cand_ent", "in", "zip", "(", "begin_spans", ",", "end_spans", ",", "cand_entities", ")", ":", "\n", "# if span is a mention and includes gt then green color, otherwise white", "\n", "                    ", "if", "(", "left", ",", "right", ")", "in", "gm_spans", "and", "ground_truth", "[", "gm_spans", ".", "index", "(", "(", "left", ",", "right", ")", ")", "]", "in", "cand_ent", ":", "\n", "                        ", "message", "=", "' '", ".", "join", "(", "chunk_words", "[", "left", ":", "right", "]", ")", "+", "\"\\tgt=\"", "+", "self", ".", "print_candidates", "(", "[", "ground_truth", "[", "gm_spans", ".", "index", "(", "(", "left", ",", "right", ")", ")", "]", "]", ")", "+", "\"\\tgm_gt_hit Candidates: \"", "+", "self", ".", "print_candidates", "(", "cand_ent", ")", "\n", "print", "(", "colored", "(", "message", ",", "'green'", ")", ")", "\n", "", "else", ":", "\n", "                        ", "message", "=", "' '", ".", "join", "(", "chunk_words", "[", "left", ":", "right", "]", ")", "+", "\"\\t not a mention Candidates: \"", "+", "self", ".", "print_candidates", "(", "cand_ent", ")", "\n", "print", "(", "colored", "(", "message", ",", "'white'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.build_word_char_maps": [[94, 144], ["dict", "dict", "dict", "dict", "print", "print", "gensim.models.KeyedVectors.load_word2vec_format", "len", "numpy.empty", "numpy.zeros", "range", "numpy.save", "os.path.exists", "os.makedirs", "open", "pickle.load", "len", "len", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "", "def", "build_word_char_maps", "(", ")", ":", "\n", "    ", "output_folder", "=", "config", ".", "base_folder", "+", "\"data/tfrecords/\"", "+", "args", ".", "experiment_name", "+", "\"/\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_folder", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_folder", ")", "\n", "", "with", "open", "(", "config", ".", "base_folder", "+", "\"data/vocabulary/vocab_freq.pickle\"", ",", "'rb'", ")", "as", "handle", ":", "\n", "        ", "word_freq", ",", "char_freq", "=", "pickle", ".", "load", "(", "handle", ")", "\n", "", "word2id", "=", "dict", "(", ")", "\n", "id2word", "=", "dict", "(", ")", "\n", "char2id", "=", "dict", "(", ")", "\n", "id2char", "=", "dict", "(", ")", "\n", "\n", "wcnt", "=", "0", "# unknown word", "\n", "word2id", "[", "\"<wunk>\"", "]", "=", "wcnt", "\n", "id2word", "[", "wcnt", "]", "=", "\"<wunk>\"", "\n", "wcnt", "+=", "1", "\n", "ccnt", "=", "0", "# unknown character", "\n", "char2id", "[", "\"<u>\"", "]", "=", "ccnt", "\n", "id2char", "[", "ccnt", "]", "=", "\"<u>\"", "\n", "ccnt", "+=", "1", "\n", "\n", "# for every word in the corpus (we have already filtered out the words that are not in word2vec)", "\n", "for", "word", "in", "word_freq", ":", "\n", "        ", "if", "word_freq", "[", "word", "]", ">=", "args", ".", "word_freq_thr", ":", "\n", "            ", "word2id", "[", "word", "]", "=", "wcnt", "\n", "id2word", "[", "wcnt", "]", "=", "word", "\n", "wcnt", "+=", "1", "\n", "\n", "", "", "for", "c", "in", "char_freq", ":", "\n", "        ", "if", "char_freq", "[", "c", "]", ">=", "args", ".", "char_freq_thr", ":", "\n", "            ", "char2id", "[", "c", "]", "=", "ccnt", "\n", "id2char", "[", "ccnt", "]", "=", "c", "\n", "ccnt", "+=", "1", "\n", "", "", "assert", "(", "len", "(", "word2id", ")", "==", "wcnt", ")", "\n", "assert", "(", "len", "(", "char2id", ")", "==", "ccnt", ")", "\n", "print", "(", "\"words in vocabulary: \"", ",", "wcnt", ")", "\n", "print", "(", "\"characters in vocabulary: \"", ",", "ccnt", ")", "\n", "with", "open", "(", "output_folder", "+", "\"word_char_maps.pickle\"", ",", "'wb'", ")", "as", "handle", ":", "\n", "        ", "pickle", ".", "dump", "(", "(", "word2id", ",", "id2word", ",", "char2id", ",", "id2char", ",", "args", ".", "word_freq_thr", ",", "\n", "args", ".", "char_freq_thr", ")", ",", "handle", ")", "\n", "\n", "", "import", "gensim", "\n", "model", "=", "gensim", ".", "models", ".", "KeyedVectors", ".", "load_word2vec_format", "(", "\n", "config", ".", "base_folder", "+", "\"data/basic_data/wordEmbeddings/Word2Vec/GoogleNews-vectors-negative300.bin\"", ",", "binary", "=", "True", ")", "\n", "embedding_dim", "=", "len", "(", "model", "[", "'queen'", "]", ")", "\n", "embeddings_array", "=", "np", ".", "empty", "(", "(", "wcnt", ",", "embedding_dim", ")", ")", "# id2emb", "\n", "embeddings_array", "[", "0", "]", "=", "np", ".", "zeros", "(", "embedding_dim", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "wcnt", ")", ":", "\n", "        ", "embeddings_array", "[", "i", "]", "=", "model", "[", "id2word", "[", "i", "]", "]", "\n", "", "np", ".", "save", "(", "output_folder", "+", "'embeddings_array.npy'", ",", "embeddings_array", ")", "\n", "return", "word2id", ",", "char2id", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.build_word_char_maps_restore": [[146, 151], ["open", "pickle.load"], "function", ["None"], ["", "def", "build_word_char_maps_restore", "(", ")", ":", "\n", "    ", "output_folder", "=", "config", ".", "base_folder", "+", "\"data/tfrecords/\"", "+", "args", ".", "experiment_name", "+", "\"/\"", "\n", "with", "open", "(", "output_folder", "+", "\"word_char_maps.pickle\"", ",", "'rb'", ")", "as", "handle", ":", "\n", "        ", "word2id", ",", "_", ",", "char2id", ",", "_", ",", "_", ",", "_", "=", "pickle", ".", "load", "(", "handle", ")", "\n", "", "return", "word2id", ",", "char2id", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.create_tfrecords": [[868, 880], ["print", "prepro_util.TFRecordsGenerator", "prepro_util.TFRecordsGenerator.set_gmonly_mode", "prepro_util.TFRecordsGenerator.set_allspans_mode", "os.path.basename", "prepro_util.TFRecordsGenerator.process", "prepro_util.TFRecordsGenerator.process", "os.path.normpath", "third_party.get_immediate_files"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.JSONRecordsGenerator.set_gmonly_mode", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.JSONRecordsGenerator.set_allspans_mode", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.transform.TransformCharacters.process", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.transform.TransformCharacters.process", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.util.get_immediate_files"], ["", "", "def", "create_tfrecords", "(", ")", ":", "\n", "    ", "new_dataset_folder", "=", "config", ".", "base_folder", "+", "\"/data/new_datasets/\"", "\n", "datasets", "=", "[", "os", ".", "path", ".", "basename", "(", "os", ".", "path", ".", "normpath", "(", "d", ")", ")", "for", "d", "in", "util", ".", "get_immediate_files", "(", "new_dataset_folder", ")", "]", "\n", "print", "(", "\"datasets in create_tfrecords(): \"", ",", "datasets", ")", "\n", "\n", "tfrecords_generator", "=", "TFRecordsGenerator", "(", ")", "\n", "tfrecords_generator", ".", "set_gmonly_mode", "(", ")", "\n", "for", "file", "in", "datasets", ":", "\n", "        ", "tfrecords_generator", ".", "process", "(", "filepath", "=", "new_dataset_folder", "+", "file", ")", "\n", "", "tfrecords_generator", ".", "set_allspans_mode", "(", ")", "\n", "for", "file", "in", "datasets", ":", "\n", "        ", "tfrecords_generator", ".", "process", "(", "filepath", "=", "new_dataset_folder", "+", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.create_jsonrecords": [[882, 896], ["print", "prepro_util.JSONRecordsGenerator", "prepro_util.JSONRecordsGenerator.set_allspans_mode", "os.path.basename", "prepro_util.JSONRecordsGenerator.process", "os.path.normpath", "third_party.get_immediate_files"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.JSONRecordsGenerator.set_allspans_mode", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.transform.TransformCharacters.process", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.util.get_immediate_files"], ["", "", "def", "create_jsonrecords", "(", ")", ":", "\n", "    ", "new_dataset_folder", "=", "config", ".", "base_folder", "+", "\"/data/new_datasets/\"", "\n", "datasets", "=", "[", "os", ".", "path", ".", "basename", "(", "os", ".", "path", ".", "normpath", "(", "d", ")", ")", "for", "d", "in", "util", ".", "get_immediate_files", "(", "new_dataset_folder", ")", "]", "\n", "print", "(", "\"kzaporoj - datasets in create_jsonrecords(): \"", ",", "datasets", ")", "\n", "\n", "json_records_generator", "=", "JSONRecordsGenerator", "(", ")", "\n", "# json_records_generator.set_gmonly_mode()", "\n", "# for file in datasets:", "\n", "#     json_records_generator.process(filepath=new_dataset_folder + file)", "\n", "json_records_generator", ".", "set_allspans_mode", "(", ")", "\n", "for", "file", "in", "datasets", ":", "\n", "# import pdb", "\n", "# pdb.set_trace()", "\n", "        ", "json_records_generator", ".", "process", "(", "filepath", "=", "new_dataset_folder", "+", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.create_entity_universe": [[971, 1021], ["print", "print", "prepro_util.SamplesGenerator", "print", "set", "print", "print", "print", "print", "print", "print", "set", "set", "print", "prepro_util.SamplesGenerator.set_gmonly_mode", "prepro_util.create_entity_universe.create_entity_universe_aux"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.JSONRecordsGenerator.set_gmonly_mode"], ["", "", "", "", "", "", "def", "create_entity_universe", "(", "gmonly_files", "=", "None", ",", "allspans_files", "=", "None", ",", "printSamples", "=", "None", ")", ":", "\n", "    ", "new_dataset_folder", "=", "config", ".", "base_folder", "+", "\"data/new_datasets/\"", "\n", "if", "gmonly_files", "is", "None", ":", "\n", "        ", "gmonly_files", "=", "[", "]", "\n", "", "if", "allspans_files", "is", "None", ":", "\n", "        ", "allspans_files", "=", "[", "'aida_train.txt'", ",", "'aida_dev.txt'", ",", "'aida_test.txt'", ",", "'ace2004.txt'", ",", "\n", "'aquaint.txt'", ",", "'clueweb.txt'", ",", "'msnbc.txt'", ",", "'wikipedia.txt'", "]", "\n", "", "print", "(", "\"gmonly_files: \"", ",", "gmonly_files", ")", "\n", "print", "(", "\"allspans_files: \"", ",", "allspans_files", ")", "\n", "\n", "def", "create_entity_universe_aux", "(", "generator", ",", "datasets", ")", ":", "\n", "        ", "entities_universe", "=", "set", "(", ")", "\n", "for", "dataset", "in", "datasets", ":", "\n", "            ", "print", "(", "\"Processing dataset: \"", ",", "dataset", ")", "\n", "for", "sample", "in", "generator", ".", "process", "(", "filepath", "=", "new_dataset_folder", "+", "dataset", ")", ":", "\n", "                ", "entities_universe", ".", "update", "(", "*", "sample", ".", "cand_entities", ")", "\n", "entities_universe", ".", "update", "(", "sample", ".", "ground_truth", ")", "\n", "if", "printSamples", ":", "\n", "                    ", "printSamples", ".", "print_sample", "(", "sample", ")", "\n", "\n", "", "", "", "print", "(", "\"Overall statistics: \"", ")", "\n", "print", "(", "\"all_gm_misses: \"", ",", "generator", ".", "all_gm_misses", ")", "\n", "print", "(", "\"all_gt_misses: \"", ",", "generator", ".", "all_gt_misses", ")", "\n", "print", "(", "\"all_gm: \"", ",", "generator", ".", "all_gm", ")", "\n", "print", "(", "\"recall %     : \"", ",", "(", "1", "-", "(", "generator", ".", "all_gm_misses", "+", "generator", ".", "all_gt_misses", ")", "/", "generator", ".", "all_gm", ")", "*", "100", ",", "\n", "\" %\"", ")", "\n", "print", "(", "\"len(entities_universe):\\t\\t\\t\"", ",", "colored", "(", "len", "(", "entities_universe", ")", ",", "'red'", ")", ")", "\n", "return", "entities_universe", "\n", "\n", "", "gmonly_entities", ",", "allspans_entities", "=", "set", "(", ")", ",", "set", "(", ")", "\n", "samplesGenerator", "=", "SamplesGenerator", "(", ")", "\n", "if", "gmonly_files", ":", "\n", "        ", "print", "(", "\"gmonly files statistics: \"", ")", "\n", "samplesGenerator", ".", "set_gmonly_mode", "(", ")", "\n", "gmonly_entities", "=", "create_entity_universe_aux", "(", "samplesGenerator", ",", "gmonly_files", ")", "\n", "", "if", "allspans_files", ":", "\n", "        ", "print", "(", "\"Test files statistics: \"", ")", "\n", "samplesGenerator", ".", "set_allspans_mode", "(", ")", "\n", "allspans_entities", "=", "create_entity_universe_aux", "(", "samplesGenerator", ",", "allspans_files", ")", "\n", "\n", "", "all_entities", "=", "gmonly_entities", "|", "allspans_entities", "\n", "print", "(", "\"len(all_entities) = \"", ",", "len", "(", "all_entities", ")", ")", "\n", "\n", "# print the entities of our universe to a file together with the name", "\n", "with", "open", "(", "config", ".", "base_folder", "+", "\"data/entities/entities_universe.txt\"", ",", "\"w\"", ")", "as", "fout", ":", "\n", "        ", "_", ",", "wiki_id_name_map", "=", "util", ".", "load_wiki_name_id_map", "(", ")", "\n", "for", "ent_id", "in", "all_entities", ":", "\n", "            ", "fout", ".", "write", "(", "ent_id", "+", "\"\\t\"", "+", "wiki_id_name_map", "[", "ent_id", "]", ".", "replace", "(", "' '", ",", "'_'", ")", "+", "\"\\n\"", ")", "\n", "\n", "", "", "return", "all_entities", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.create_necessary_folders": [[1023, 1026], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "def", "create_necessary_folders", "(", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "config", ".", "base_folder", "+", "\"data/tfrecords/\"", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "config", ".", "base_folder", "+", "\"data/tfrecords/\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util._parse_args": [[1028, 1067], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "", "def", "_parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--chunking\"", ",", "default", "=", "\"per_document\"", ",", "\n", "help", "=", "\"per_sentence or per_paragraph or per_article\"", "\n", "\"per_document: each document is processed as one example\"", "\n", "\"per_paragraph: each paragraph is processed as a separate example\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--p_e_m_choice\"", ",", "default", "=", "\"yago\"", ",", "\n", "help", "=", "\"'wiki'  p(e|m) constructed only from wikipedia dump (prob_wikipedia_p_e_m.txt file),\\\n                             'crosswiki' constructed from wikipedia dump + crosswiki  (prob_crosswikis_wikipedia_p_e_m.txt),\\\n                             'yago' (prob_yago_crosswikis_wikipedia_p_e_m.txt)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--cand_ent_num\"", ",", "type", "=", "int", ",", "default", "=", "30", ",", "\n", "help", "=", "\"how many candidate entities to keep for each mention\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lowercase_p_e_m\"", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\"--lowercase_spans\"", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\"--calculate_stats\"", ",", "type", "=", "bool", ",", "default", "=", "True", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--experiment_name\"", ",", "default", "=", "\"corefmerge\"", ",", "\n", "help", "=", "\"under folder data/tfrecords/\"", ")", "\n", "# kzaporoj", "\n", "parser", ".", "add_argument", "(", "\"--base_dir\"", ",", "default", "=", "\"third_party/kolitsas_e2e/\"", ",", "help", "=", "\"base dir for working files\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--include_wikidumpRLTD\"", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\"--word_freq_thr\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "\"words that have freq less than this are not included in our\"", "\n", "\"vocabulary.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--char_freq_thr\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--max_mention_width\"", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "\"in allspans mode consider all spans with\"", "\n", "\"length <= to this value as candidate entities to be linked\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--entity_extension\"", ",", "default", "=", "None", ",", "help", "=", "\"extension_entities or extension_entities_all etc\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--persons_coreference\"", ",", "type", "=", "bool", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--persons_coreference_merge\"", ",", "type", "=", "bool", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--create_entity_universe\"", ",", "type", "=", "bool", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "\"--create_tf_records\"", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "'creates serialized tensorflow records '", "\n", "'as originally implimented.'", ")", "\n", "parser", ".", "add_argument", "(", "\"--create_json_records\"", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "help", "=", "'creates json alias table to be used '", "\n", "'inside our dwie_linker'", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.log_args": [[1069, 1077], ["os.path.exists", "os.makedirs", "open", "vars", "fout.write", "open", "pickle.dump", "vars.items"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.write"], ["", "def", "log_args", "(", "folderpath", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "folderpath", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "folderpath", ")", "\n", "", "with", "open", "(", "folderpath", "+", "\"prepro_args.txt\"", ",", "\"w\"", ")", "as", "fout", ":", "\n", "        ", "attrs", "=", "vars", "(", "args", ")", "\n", "fout", ".", "write", "(", "'\\n'", ".", "join", "(", "\"%s: %s\"", "%", "item", "for", "item", "in", "attrs", ".", "items", "(", ")", ")", ")", "\n", "", "with", "open", "(", "folderpath", "+", "\"prepro_args.pickle\"", ",", "'wb'", ")", "as", "handle", ":", "\n", "        ", "pickle", ".", "dump", "(", "args", ",", "handle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.scripts.create_training_pipelines": [[4, 16], ["third_party.kolitsas_e2e.reader.train_input_pipeline"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.reader.train_input_pipeline"], ["def", "create_training_pipelines", "(", "experiment_name", "=", "'corefmerge'", ",", "all_spans_training", "=", "True", ",", "\n", "datasets", "=", "[", "'aida_train'", "]", ",", "shuffle_capacity", "=", "500", ",", "\n", "batch_size", "=", "1", ")", ":", "\n", "# folder = \"../data/kolitsas_e2e/data/tfrecords/\" + args.experiment_name + \\", "\n", "#          (\"/allspans/\" if args.all_spans_training else \"/gmonly/\")", "\n", "# /home/ibcn044/work_files/ugent/phd_work/repositories/projectcpn/dwie_linker/data", "\n", "# folder = \"data/kolitsas_e2e/data/tfrecords/\" + experiment_name + \\", "\n", "#          (\"/allspans/\" if all_spans_training else \"/gmonly/\")", "\n", "    ", "folder", "=", "'data/kolitsas_e2e/data/tfrecords/corefmerge/allspans/'", "\n", "training_dataset", "=", "reader", ".", "train_input_pipeline", "(", "[", "folder", "+", "file", "for", "file", "in", "datasets", "]", ",", "\n", "shuffle_capacity", "=", "shuffle_capacity", ",", "batch_size", "=", "batch_size", ")", "\n", "return", "training_dataset", "\n", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.util.FetchCandidateEntities.__init__": [[200, 206], ["util.custom_p_e_m"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.util.custom_p_e_m"], ["def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "lowercase_spans", "=", "args", ".", "lowercase_spans", "\n", "self", ".", "lowercase_p_e_m", "=", "args", ".", "lowercase_p_e_m", "\n", "self", ".", "p_e_m", ",", "self", ".", "p_e_m_low", ",", "self", ".", "mention_total_freq", "=", "custom_p_e_m", "(", "\n", "cand_ent_num", "=", "args", ".", "cand_ent_num", ",", "\n", "lowercase_p_e_m", "=", "args", ".", "lowercase_p_e_m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.util.FetchCandidateEntities.process": [[207, 229], ["isinstance", "span.title", "map", "map", "map", "span.lower", "zip", "map", "zip", "zip", "span.lower", "zip", "span.lower", "span.lower"], "methods", ["None"], ["", "def", "process", "(", "self", ",", "span", ")", ":", "\n", "        ", "\"\"\"span can be either a string or a list of words\"\"\"", "\n", "if", "isinstance", "(", "span", ",", "list", ")", ":", "\n", "            ", "span", "=", "' '", ".", "join", "(", "span", ")", "\n", "", "title", "=", "span", ".", "title", "(", ")", "\n", "# 'obama 44th president of united states'.title() # 'Obama 44Th President Of United States'", "\n", "title_freq", "=", "self", ".", "mention_total_freq", "[", "title", "]", "if", "title", "in", "self", ".", "mention_total_freq", "else", "0", "\n", "span_freq", "=", "self", ".", "mention_total_freq", "[", "span", "]", "if", "span", "in", "self", ".", "mention_total_freq", "else", "0", "\n", "\n", "if", "title_freq", "==", "0", "and", "span_freq", "==", "0", ":", "\n", "            ", "if", "self", ".", "lowercase_spans", "and", "span", ".", "lower", "(", ")", "in", "self", ".", "p_e_m", ":", "\n", "                ", "return", "map", "(", "list", ",", "zip", "(", "*", "self", ".", "p_e_m", "[", "span", ".", "lower", "(", ")", "]", ")", ")", "\n", "", "elif", "self", ".", "lowercase_p_e_m", "and", "span", ".", "lower", "(", ")", "in", "self", ".", "p_e_m_low", ":", "\n", "                ", "return", "map", "(", "list", ",", "zip", "(", "*", "self", ".", "p_e_m_low", "[", "span", ".", "lower", "(", ")", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "return", "None", ",", "None", "\n", "\n", "", "", "else", ":", "\n", "            ", "if", "span_freq", ">", "title_freq", ":", "\n", "                ", "return", "map", "(", "list", ",", "zip", "(", "*", "self", ".", "p_e_m", "[", "span", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "return", "map", "(", "list", ",", "zip", "(", "*", "self", ".", "p_e_m", "[", "title", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.util.FetchFilteredCoreferencedCandEntities.__init__": [[236, 248], ["print", "time.time", "util.FetchCandidateEntities", "print", "util.load_persons", "list", "time.time"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.util.load_persons"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "print", "(", "'kzaporoj - FetchCandidateEntities where it should not be!!??'", ")", "\n", "timea", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "fetchCandidateEntities", "=", "FetchCandidateEntities", "(", "args", ")", "\n", "print", "(", "'kzaporoj - FetchCandidateEntities where it should not be!!??, and it took: '", ",", "(", "time", ".", "time", "(", ")", "-", "timea", ")", "/", "60", ",", "\n", "' minutes. '", ")", "\n", "\n", "self", ".", "el_mode", "=", "True", "\n", "if", "args", ".", "persons_coreference", ":", "\n", "            ", "self", ".", "persons_wikiids", "=", "load_persons", "(", ")", "\n", "self", ".", "persons_mentions_seen", "=", "list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.util.FetchFilteredCoreferencedCandEntities.init_coref": [[249, 252], ["list"], "methods", ["None"], ["", "", "def", "init_coref", "(", "self", ",", "el_mode", ")", ":", "\n", "        ", "self", ".", "persons_mentions_seen", "=", "list", "(", ")", "\n", "self", ".", "el_mode", "=", "el_mode", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.util.FetchFilteredCoreferencedCandEntities.process": [[253, 277], ["util.FetchFilteredCoreferencedCandEntities.fetchCandidateEntities.process", "util.FetchFilteredCoreferencedCandEntities.find_corefence_person", "util.FetchFilteredCoreferencedCandEntities.fetchCandidateEntities.process", "util.FetchFilteredCoreferencedCandEntities.fetchCandidateEntities.process", "sorted", "map", "len", "util.FetchFilteredCoreferencedCandEntities.persons_mentions_seen.append", "list", "list", "zip", "span_text.title", "string.capwords", "len", "zip", "zip"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.transform.TransformCharacters.process", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.util.FetchFilteredCoreferencedCandEntities.find_corefence_person", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.transform.TransformCharacters.process", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.transform.TransformCharacters.process"], ["", "def", "process", "(", "self", ",", "left", ",", "right", ",", "chunk_words", ")", ":", "\n", "        ", "left_right_words", "=", "[", "chunk_words", "[", "left", "-", "1", "]", "if", "left", "-", "1", ">=", "0", "else", "None", ",", "\n", "chunk_words", "[", "right", "]", "if", "right", "<=", "len", "(", "chunk_words", ")", "-", "1", "else", "None", "]", "if", "self", ".", "el_mode", "else", "None", "\n", "span_text", "=", "' '", ".", "join", "(", "chunk_words", "[", "left", ":", "right", "]", ")", "\n", "cand_ent", ",", "scores", "=", "self", ".", "fetchCandidateEntities", ".", "process", "(", "span_text", ")", "\n", "if", "self", ".", "args", ".", "persons_coreference", ":", "\n", "            ", "coreference_supermention", "=", "self", ".", "find_corefence_person", "(", "span_text", ",", "left_right_words", ")", "\n", "if", "coreference_supermention", ":", "\n", "# print(\"original text:\", chunk_words[max(0, left-4):min(len(chunk_words), right+4)])", "\n", "                ", "if", "not", "self", ".", "args", ".", "persons_coreference_merge", ":", "\n", "                    ", "cand_ent", ",", "scores", "=", "self", ".", "fetchCandidateEntities", ".", "process", "(", "coreference_supermention", ")", "\n", "", "else", ":", "# merge with cand_ent and scores", "\n", "                    ", "cand_ent2", ",", "scores2", "=", "self", ".", "fetchCandidateEntities", ".", "process", "(", "coreference_supermention", ")", "\n", "temp1", "=", "list", "(", "zip", "(", "scores", ",", "cand_ent", ")", ")", "if", "scores", "and", "cand_ent", "else", "[", "]", "\n", "temp2", "=", "list", "(", "zip", "(", "scores2", ",", "cand_ent2", ")", ")", "if", "scores2", "and", "cand_ent2", "else", "[", "]", "\n", "temp3", "=", "sorted", "(", "temp1", "+", "temp2", ",", "reverse", "=", "True", ")", "\n", "scores", ",", "cand_ent", "=", "map", "(", "list", ",", "zip", "(", "*", "temp3", "[", ":", "self", ".", "args", ".", "cand_ent_num", "]", ")", ")", "\n", "\n", "", "", "", "if", "cand_ent", "is", "not", "None", "and", "scores", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "args", ".", "persons_coreference", "and", "not", "coreference_supermention", "and", "cand_ent", "[", "0", "]", "in", "self", ".", "persons_wikiids", "and", "len", "(", "span_text", ")", ">=", "3", ":", "\n", "                ", "if", "not", "self", ".", "el_mode", "or", "span_text", "==", "span_text", ".", "title", "(", ")", "or", "span_text", "==", "string", ".", "capwords", "(", "span_text", ")", ":", "\n", "                    ", "self", ".", "persons_mentions_seen", ".", "append", "(", "span_text", ")", "\n", "", "", "", "return", "cand_ent", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.util.FetchFilteredCoreferencedCandEntities.find_corefence_person": [[278, 302], ["reversed", "len", "mention.find", "[].isupper", "[].isupper", "len", "len", "mention[].isalpha", "mention[].isalpha", "len", "len", "len"], "methods", ["None"], ["", "def", "find_corefence_person", "(", "self", ",", "span_text", ",", "left_right_words", ")", ":", "\n", "        ", "\"\"\"if span_text is substring of another person's mention found before. it should be\n        substring of words. so check next and previous characters to be non alphanumeric\"\"\"", "\n", "if", "len", "(", "span_text", ")", "<", "3", ":", "\n", "            ", "return", "None", "\n", "", "if", "left_right_words", ":", "# this check is only for allspans mode not for gmonly.", "\n", "            ", "if", "left_right_words", "[", "0", "]", "and", "left_right_words", "[", "0", "]", "[", "0", "]", ".", "isupper", "(", ")", "or", "left_right_words", "[", "1", "]", "and", "left_right_words", "[", "1", "]", "[", "0", "]", ".", "isupper", "(", ")", ":", "\n", "# if the left or the right word has uppercased its first letter then do not search for coreference", "\n", "# since most likely it is a subspan of a mention.", "\n", "# This condition gives no improvement to Gerbil results even a very slight decrease (0.02%)", "\n", "                ", "return", "None", "\n", "", "", "for", "mention", "in", "reversed", "(", "self", ".", "persons_mentions_seen", ")", ":", "\n", "            ", "idx", "=", "mention", ".", "find", "(", "span_text", ")", "\n", "if", "idx", "!=", "-", "1", ":", "\n", "                ", "if", "len", "(", "mention", ")", "==", "len", "(", "span_text", ")", ":", "\n", "                    ", "continue", "# they are identical so no point in substituting them", "\n", "", "if", "idx", ">", "0", "and", "mention", "[", "idx", "-", "1", "]", ".", "isalpha", "(", ")", ":", "\n", "                    ", "continue", "\n", "", "if", "idx", "+", "len", "(", "span_text", ")", "<", "len", "(", "mention", ")", "and", "mention", "[", "idx", "+", "len", "(", "span_text", ")", "]", ".", "isalpha", "(", ")", ":", "\n", "                    ", "continue", "\n", "# print(\"persons coreference, before:\", span_text, \"after:\", mention)", "\n", "", "return", "mention", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.util.EntityNameIdMap.__init__": [[305, 307], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.util.EntityNameIdMap.init_compatible_ent_id": [[308, 310], ["util.load_wiki_name_id_map"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.util.load_wiki_name_id_map"], ["", "def", "init_compatible_ent_id", "(", "self", ")", ":", "\n", "        ", "self", ".", "wiki_name_id_map", ",", "self", ".", "wiki_id_name_map", "=", "load_wiki_name_id_map", "(", "lowercase", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.util.EntityNameIdMap.init_gerbil_compatible_ent_id": [[311, 314], ["util.load_wiki_name_id_map", "util.load_redirections"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.util.load_wiki_name_id_map", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.util.load_redirections"], ["", "def", "init_gerbil_compatible_ent_id", "(", "self", ")", ":", "\n", "        ", "self", ".", "wiki_name_id_map", ",", "self", ".", "wiki_id_name_map", "=", "load_wiki_name_id_map", "(", "lowercase", "=", "False", ")", "\n", "self", ".", "redirections", "=", "load_redirections", "(", "lowercase", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.util.EntityNameIdMap.init_hyperlink2id": [[315, 321], ["util.load_wiki_name_id_map", "util.load_wiki_name_id_map", "util.load_redirections", "util.load_disambiguations"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.util.load_wiki_name_id_map", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.util.load_wiki_name_id_map", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.util.load_redirections", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.util.load_disambiguations"], ["", "def", "init_hyperlink2id", "(", "self", ")", ":", "\n", "        ", "self", ".", "wiki_name_id_map", ",", "self", ".", "wiki_id_name_map", "=", "load_wiki_name_id_map", "(", "lowercase", "=", "False", ")", "\n", "self", ".", "wiki_name_id_map_l", ",", "_", "=", "load_wiki_name_id_map", "(", "lowercase", "=", "True", ")", "\n", "self", ".", "redirections", "=", "load_redirections", "(", "lowercase", "=", "False", ")", "\n", "self", ".", "disambiguations", "=", "load_disambiguations", "(", ")", "\n", "self", ".", "hyperlinks_to_dismabiguation_pages", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.util.EntityNameIdMap.hyperlink2id": [[322, 344], ["line.rstrip.rstrip.rstrip", "hyperlink_text.replace().strip.replace().strip.replace().strip", "hyperlink_text.replace().strip.replace().strip.title", "hyperlink_text.replace().strip.replace().strip.lower", "hyperlink_text.replace().strip.replace().strip.replace", "hyperlink_text.replace().strip.replace().strip.lower"], "methods", ["None"], ["", "def", "hyperlink2id", "(", "self", ",", "line", ")", ":", "\n", "        ", "\"\"\" gets as input the raw line:\n        <a\u00a0href=\"political\u00a0philosophy\">\\n\n        '<a\\xa0href=\"Anarchist\\xa0schools\\xa0of\\xa0thought\">\\n'\n        \"\"\"", "\n", "# line = '<a\u00a0href=\"Anarchist\u00a0schools\u00a0of\u00a0thought\">\\n'", "\n", "line", "=", "line", ".", "rstrip", "(", ")", "\n", "hyperlink_text", "=", "line", "[", "9", ":", "-", "2", "]", "\n", "# print(repr(hyperlink_text))", "\n", "hyperlink_text", "=", "hyperlink_text", ".", "replace", "(", "'\\xa0'", ",", "' '", ")", ".", "strip", "(", ")", "\n", "\n", "for", "title", "in", "[", "hyperlink_text", ",", "hyperlink_text", ".", "title", "(", ")", "]", ":", "\n", "# look for redirection", "\n", "            ", "if", "title", "in", "self", ".", "redirections", ":", "\n", "                ", "title", "=", "self", ".", "redirections", "[", "title", "]", "\n", "", "if", "title", "in", "self", ".", "wiki_name_id_map", ":", "\n", "                ", "return", "self", ".", "wiki_name_id_map", "[", "title", "]", "\n", "\n", "", "", "if", "hyperlink_text", ".", "lower", "(", ")", "in", "self", ".", "wiki_name_id_map_l", ":", "\n", "            ", "return", "self", ".", "wiki_name_id_map_l", "[", "hyperlink_text", ".", "lower", "(", ")", "]", "\n", "", "else", ":", "\n", "            ", "return", "config", ".", "unk_ent_id", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.util.EntityNameIdMap.is_valid_entity_id": [[345, 347], ["None"], "methods", ["None"], ["", "", "def", "is_valid_entity_id", "(", "self", ",", "ent_id", ")", ":", "\n", "        ", "return", "ent_id", "in", "self", ".", "wiki_id_name_map", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.util.EntityNameIdMap.compatible_ent_id": [[348, 362], ["None"], "methods", ["None"], ["", "def", "compatible_ent_id", "(", "self", ",", "name", "=", "None", ",", "ent_id", "=", "None", ")", ":", "\n", "        ", "\"\"\"takes as input the name and the entity id found in the dataset. If the entity id\n        is also in our wiki_name_id_map then this means that this concept-entity also exist in\n        out world and with the same id. If the id is not found in our world then we search for\n        the name if it is inside the wiki_name_id_map. if yes then we have the same concept\n        in our world but with different id so we return and use our own id from now on.\n        if neither the id nor the name is in wiki_name_id_map then we return None i.e.\n        unknown concept so skip it from the dataset.\"\"\"", "\n", "if", "ent_id", "is", "not", "None", "and", "ent_id", "in", "self", ".", "wiki_id_name_map", ":", "\n", "            ", "return", "ent_id", "\n", "", "elif", "name", "is", "not", "None", "and", "name", "in", "self", ".", "wiki_name_id_map", ":", "\n", "            ", "return", "self", ".", "wiki_name_id_map", "[", "name", "]", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.util.EntityNameIdMap.gerbil_compatible_ent_id": [[363, 374], ["unquote", "title[].replace", "print", "repr", "repr", "len"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "", "def", "gerbil_compatible_ent_id", "(", "self", ",", "uri", ")", ":", "\n", "        ", "from", "urllib", ".", "parse", "import", "unquote", "\n", "title", "=", "unquote", "(", "uri", ")", "\n", "title", "=", "title", "[", "len", "(", "\"http://en.wikipedia.org/wiki/\"", ")", ":", "]", ".", "replace", "(", "'_'", ",", "' '", ")", "\n", "if", "title", "in", "self", ".", "redirections", ":", "\n", "            ", "title", "=", "self", ".", "redirections", "[", "title", "]", "\n", "", "if", "title", "in", "self", ".", "wiki_name_id_map", ":", "\n", "            ", "return", "self", ".", "wiki_name_id_map", "[", "title", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"unknown entity. title_searched:\"", ",", "repr", "(", "title", ")", ",", "\" original uri:\"", ",", "repr", "(", "uri", ")", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.util.load_entities_universe": [[21, 30], ["set", "open", "set.add", "line.split"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add"], ["def", "load_entities_universe", "(", ")", ":", "\n", "    ", "entities_universe", "=", "set", "(", ")", "\n", "# TODO this path is hardcoded. these mapping files should be transfered in ./data folder", "\n", "with", "open", "(", "\"/home/other_projects/deep_ed/data/generated/nick/\"", "\n", "\"wikiid2nnid.txt\"", ")", "as", "fin", ":", "\n", "        ", "for", "line", "in", "fin", ":", "\n", "            ", "ent_id", "=", "line", ".", "split", "(", "'\\t'", ")", "[", "0", "]", "\n", "entities_universe", ".", "add", "(", "ent_id", ")", "\n", "", "", "return", "entities_universe", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.util.load_wikiid2nnid": [[32, 48], ["dict", "open", "util.load_entity_extension", "line.split", "int"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.util.load_entity_extension"], ["", "def", "load_wikiid2nnid", "(", "extension_name", "=", "None", ")", ":", "\n", "    ", "\"\"\"returns a map from wiki id to neural network id (for the entity embeddings)\"\"\"", "\n", "wikiid2nnid", "=", "dict", "(", ")", "# wikiid is string,   nnid is integer", "\n", "with", "open", "(", "config", ".", "base_folder", "+", "\"data/entities/wikiid2nnid/wikiid2nnid.txt\"", ")", "as", "fin", ":", "\n", "        ", "for", "line", "in", "fin", ":", "\n", "            ", "ent_id", ",", "nnid", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "wikiid2nnid", "[", "ent_id", "]", "=", "int", "(", "nnid", ")", "-", "1", "# torch starts from 1 instead of zero", "\n", "", "assert", "(", "wikiid2nnid", "[", "\"1\"", "]", "==", "0", ")", "\n", "assert", "(", "-", "1", "not", "in", "wikiid2nnid", ")", "\n", "wikiid2nnid", "[", "\"<u>\"", "]", "=", "0", "\n", "del", "wikiid2nnid", "[", "\"1\"", "]", "\n", "# print(len(wikiid2nnid))", "\n", "\n", "", "if", "extension_name", ":", "\n", "        ", "load_entity_extension", "(", "wikiid2nnid", ",", "extension_name", ")", "\n", "", "return", "wikiid2nnid", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.util.load_wikiid2wikilink": [[50, 73], ["dict", "print", "open", "print", "line.split", "wikilink.strip", "print", "print", "list", "dict.items"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "load_wikiid2wikilink", "(", ")", ":", "\n", "    ", "\"\"\"returns a map from wiki id to neural network id (for the entity embeddings)\"\"\"", "\n", "wikiid2wikilink", "=", "dict", "(", ")", "# wikiid is string,   wikilink is integer", "\n", "with", "open", "(", "config", ".", "base_folder", "+", "\"data/entities/entities_universe.txt\"", ")", "as", "fin", ":", "\n", "        ", "for", "line", "in", "fin", ":", "\n", "            ", "ent_id", ",", "wikilink", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "wikiid2wikilink", "[", "ent_id", "]", "=", "wikilink", ".", "strip", "(", ")", "\n", "# assert (wikiid2wikilink[\"1\"] == 0)", "\n", "", "print", "(", "'in load_wikiid2wikilink'", ")", "\n", "if", "'1'", "in", "wikiid2wikilink", ":", "\n", "            ", "print", "(", "'1 in wikiid2wikilink: '", ",", "wikiid2wikilink", "[", "'1'", "]", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'1 NOT in wikiid2wikilink'", ")", "\n", "\n", "", "assert", "(", "-", "1", "not", "in", "wikiid2wikilink", ")", "\n", "# wikiid2wikilink[\"<u>\"] = 0", "\n", "# del wikiid2wikilink[\"1\"]", "\n", "# print(len(wikiid2nnid))", "\n", "\n", "# if extension_name:", "\n", "#     load_entity_extension(wikiid2nnid, extension_name)", "\n", "", "print", "(", "'top wikiid2wikilinks: '", ",", "list", "(", "wikiid2wikilink", ".", "items", "(", ")", ")", "[", ":", "10", "]", ")", "\n", "return", "wikiid2wikilink", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.util.load_entity_extension": [[75, 90], ["max", "print", "wikiid2nnid.values", "open", "len", "line.strip", "len"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "load_entity_extension", "(", "wikiid2nnid", ",", "extension_name", ")", ":", "\n", "    ", "filepath", "=", "config", ".", "base_folder", "+", "\"data/entities/\"", "+", "extension_name", "+", "\"/wikiid2nnid/additional_wikiids.txt\"", "\n", "max_nnid", "=", "max", "(", "wikiid2nnid", ".", "values", "(", ")", ")", "\n", "assert", "(", "len", "(", "wikiid2nnid", ")", "-", "1", "==", "max_nnid", ")", "\n", "with", "open", "(", "filepath", ")", "as", "fin", ":", "\n", "        ", "line_cnt", "=", "1", "\n", "for", "line", "in", "fin", ":", "\n", "            ", "ent_id", "=", "line", ".", "strip", "(", ")", "\n", "if", "ent_id", "in", "wikiid2nnid", ":", "# if extension entities has overlap with the normal entities set", "\n", "                ", "wikiid2nnid", "[", "\n", "ent_id", "+", "\"dupl\"", "]", "=", "max_nnid", "+", "line_cnt", "# this vector is duplicate and is never going to be used", "\n", "", "else", ":", "\n", "                ", "wikiid2nnid", "[", "ent_id", "]", "=", "max_nnid", "+", "line_cnt", "\n", "", "line_cnt", "+=", "1", "\n", "", "", "print", "(", "\"original entities: \"", ",", "max_nnid", "+", "1", ",", "\" extension entities: \"", ",", "len", "(", "wikiid2nnid", ")", "-", "(", "max_nnid", "+", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.util.reverse_dict": [[92, 99], ["dict", "d.items"], "function", ["None"], ["", "def", "reverse_dict", "(", "d", ",", "unique_values", "=", "False", ")", ":", "\n", "    ", "new_d", "=", "dict", "(", ")", "\n", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", ":", "\n", "        ", "if", "unique_values", ":", "\n", "            ", "assert", "(", "v", "not", "in", "new_d", ")", "\n", "", "new_d", "[", "v", "]", "=", "k", "\n", "", "return", "new_d", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.util.load_redirections": [[102, 122], ["time.time", "dict", "print", "print", "open", "line.rstrip.rstrip", "line.rstrip.split", "time.time", "old_title.lower", "new_title.lower"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "load_redirections", "(", "lowercase", "=", "None", ")", ":", "\n", "    ", "if", "lowercase", "is", "None", ":", "\n", "        ", "lowercase", "=", "config", ".", "lowercase_maps", "\n", "", "wall_start", "=", "time", ".", "time", "(", ")", "\n", "redirections", "=", "dict", "(", ")", "\n", "with", "open", "(", "config", ".", "base_folder", "+", "\"data/basic_data/wiki_redirects.txt\"", ")", "as", "fin", ":", "\n", "        ", "redirections_errors", "=", "0", "\n", "for", "line", "in", "fin", ":", "\n", "            ", "line", "=", "line", ".", "rstrip", "(", ")", "\n", "try", ":", "\n", "                ", "old_title", ",", "new_title", "=", "line", ".", "split", "(", "\"\\t\"", ")", "\n", "if", "lowercase", ":", "\n", "                    ", "old_title", ",", "new_title", "=", "old_title", ".", "lower", "(", ")", ",", "new_title", ".", "lower", "(", ")", "\n", "", "redirections", "[", "old_title", "]", "=", "new_title", "\n", "", "except", "ValueError", ":", "\n", "                ", "redirections_errors", "+=", "1", "\n", "\n", "", "", "", "print", "(", "\"load redirections. wall time:\"", ",", "(", "time", ".", "time", "(", ")", "-", "wall_start", ")", "/", "60", ",", "\" minutes\"", ")", "\n", "print", "(", "\"redirections_errors: \"", ",", "redirections_errors", ")", "\n", "return", "redirections", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.util.load_disambiguations": [[124, 141], ["time.time", "set", "print", "print", "open", "line.rstrip.rstrip", "line.rstrip.split", "set.add", "time.time"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add"], ["", "def", "load_disambiguations", "(", ")", ":", "\n", "    ", "wall_start", "=", "time", ".", "time", "(", ")", "\n", "disambiguations_ids", "=", "set", "(", ")", "\n", "# disambiguations_titles = set()", "\n", "disambiguations_errors", "=", "0", "\n", "with", "open", "(", "config", ".", "base_folder", "+", "\"data/basic_data/wiki_disambiguation_pages.txt\"", ")", "as", "fin", ":", "\n", "        ", "for", "line", "in", "fin", ":", "\n", "            ", "line", "=", "line", ".", "rstrip", "(", ")", "\n", "try", ":", "\n", "                ", "article_id", ",", "title", "=", "line", ".", "split", "(", "\"\\t\"", ")", "\n", "disambiguations_ids", ".", "add", "(", "article_id", ")", "\n", "# disambiguations_titles.add(title)", "\n", "", "except", "ValueError", ":", "\n", "                ", "disambiguations_errors", "+=", "1", "\n", "", "", "", "print", "(", "\"load disambiguations. wall time:\"", ",", "(", "time", ".", "time", "(", ")", "-", "wall_start", ")", "/", "60", ",", "\" minutes\"", ")", "\n", "print", "(", "\"disambiguations_errors: \"", ",", "disambiguations_errors", ")", "\n", "return", "disambiguations_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.util.load_persons": [[143, 157], ["util.load_wiki_name_id_map", "set", "print", "open", "line.strip.strip", "set.add"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.util.load_wiki_name_id_map", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add"], ["", "def", "load_persons", "(", ")", ":", "\n", "    ", "wiki_name_id_map", ",", "_", "=", "load_wiki_name_id_map", "(", ")", "\n", "persons_wikiids", "=", "set", "(", ")", "\n", "not_found_cnt", "=", "0", "\n", "with", "open", "(", "config", ".", "base_folder", "+", "\"data/basic_data/persons.txt\"", ")", "as", "fin", ":", "\n", "        ", "for", "line", "in", "fin", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", "in", "wiki_name_id_map", ":", "\n", "                ", "persons_wikiids", ".", "add", "(", "wiki_name_id_map", "[", "line", "]", ")", "\n", "", "else", ":", "\n", "                ", "not_found_cnt", "+=", "1", "\n", "# print(\"not found:\", repr(line))", "\n", "", "", "", "print", "(", "\"persons not_found_cnt:\"", ",", "not_found_cnt", ")", "\n", "return", "persons_wikiids", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.util.load_wiki_name_id_map": [[159, 193], ["time.time", "dict", "dict", "util.load_disambiguations", "print", "print", "print", "print", "open", "line.rstrip.rstrip", "line.rstrip.split", "time.time", "wiki_title.lower.lower"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.util.load_disambiguations", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "load_wiki_name_id_map", "(", "lowercase", "=", "False", ",", "filepath", "=", "None", ")", ":", "\n", "    ", "wall_start", "=", "time", ".", "time", "(", ")", "\n", "wiki_name_id_map", "=", "dict", "(", ")", "\n", "wiki_id_name_map", "=", "dict", "(", ")", "\n", "wiki_name_id_map_errors", "=", "0", "\n", "duplicate_names", "=", "0", "# different lines in the doc with the same title", "\n", "duplicate_ids", "=", "0", "# with the same id", "\n", "if", "filepath", "is", "None", ":", "\n", "        ", "filepath", "=", "config", ".", "base_folder", "+", "\"data/basic_data/wiki_name_id_map.txt\"", "\n", "", "disambiguations_ids", "=", "load_disambiguations", "(", ")", "\n", "with", "open", "(", "filepath", ")", "as", "fin", ":", "\n", "        ", "for", "line", "in", "fin", ":", "\n", "            ", "line", "=", "line", ".", "rstrip", "(", ")", "\n", "try", ":", "\n", "                ", "wiki_title", ",", "wiki_id", "=", "line", ".", "split", "(", "\"\\t\"", ")", "\n", "if", "wiki_id", "in", "disambiguations_ids", ":", "\n", "                    ", "continue", "\n", "", "if", "lowercase", ":", "\n", "                    ", "wiki_title", "=", "wiki_title", ".", "lower", "(", ")", "\n", "\n", "", "if", "wiki_title", "in", "wiki_name_id_map", ":", "\n", "                    ", "duplicate_names", "+=", "1", "\n", "", "if", "wiki_id", "in", "wiki_id_name_map", ":", "\n", "                    ", "duplicate_ids", "+=", "1", "\n", "\n", "", "wiki_name_id_map", "[", "wiki_title", "]", "=", "wiki_id", "\n", "wiki_id_name_map", "[", "wiki_id", "]", "=", "wiki_title", "\n", "", "except", "ValueError", ":", "\n", "                ", "wiki_name_id_map_errors", "+=", "1", "\n", "", "", "", "print", "(", "\"load wiki_name_id_map. wall time:\"", ",", "(", "time", ".", "time", "(", ")", "-", "wall_start", ")", "/", "60", ",", "\" minutes\"", ")", "\n", "print", "(", "\"wiki_name_id_map_errors: \"", ",", "wiki_name_id_map_errors", ")", "\n", "print", "(", "\"duplicate names: \"", ",", "duplicate_names", ")", "\n", "print", "(", "\"duplicate ids: \"", ",", "duplicate_ids", ")", "\n", "return", "wiki_name_id_map", ",", "wiki_id_name_map", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.util.custom_p_e_m": [[376, 472], ["print", "time.time", "dict", "dict", "util.EntityNameIdMap", "util.EntityNameIdMap.init_compatible_ent_id", "print", "print", "print", "print", "time.time", "collections.defaultdict", "dict.items", "print", "dict", "collections.defaultdict.items", "open", "mention.lower", "sorted", "line.rstrip.rstrip", "collections.defaultdict", "ent_score_map.items", "line.rstrip.split", "int", "time.time", "max", "time.time", "operator.itemgetter", "map", "sys.exc_info", "print", "print", "len", "e.split", "util.EntityNameIdMap.is_valid_entity_id", "os.path.split", "repr", "res.append", "len", "len", "float"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.util.EntityNameIdMap.init_compatible_ent_id", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.util.EntityNameIdMap.is_valid_entity_id"], ["", "", "", "def", "custom_p_e_m", "(", "cand_ent_num", "=", "15", ",", "allowed_entities_set", "=", "None", ",", "\n", "lowercase_p_e_m", "=", "False", ")", ":", "\n", "    ", "\"\"\"Args:\n    cand_ent_num: how many candidate entities to keep for each mention\n    allowed_entities_set: restrict the candidate entities to only this set. for example\n    the most frequent 1M entities. First this restiction applies and then the cand_ent_num.\"\"\"", "\n", "print", "(", "'kzaporoj - beginning custom_p_e_m (probability entity mention??)'", ")", "\n", "wall_start", "=", "time", ".", "time", "(", ")", "\n", "p_e_m", "=", "dict", "(", ")", "# for each mention we have a list of tuples (ent_id, score)", "\n", "mention_total_freq", "=", "dict", "(", ")", "# for each mention of the p_e_m we store the total freq", "\n", "# this will help us decide which cand entities to take", "\n", "p_e_m_errors", "=", "0", "\n", "entityNameIdMap", "=", "EntityNameIdMap", "(", ")", "\n", "entityNameIdMap", ".", "init_compatible_ent_id", "(", ")", "\n", "incompatible_ent_ids", "=", "0", "\n", "with", "open", "(", "config", ".", "base_folder", "+", "'data/basic_data/prob_yago_crosswikis_wikipedia_p_e_m.txt'", ")", "as", "fin", ":", "\n", "        ", "duplicate_mentions_cnt", "=", "0", "\n", "clear_conflict_winner", "=", "0", "# both higher absolute frequency and longer cand list", "\n", "not_clear_conflict_winner", "=", "0", "# higher absolute freq but shorter cand list", "\n", "for", "line", "in", "fin", ":", "\n", "            ", "line", "=", "line", ".", "rstrip", "(", ")", "\n", "try", ":", "\n", "                ", "temp", "=", "line", ".", "split", "(", "\"\\t\"", ")", "\n", "mention", ",", "entities", "=", "temp", "[", "0", "]", ",", "temp", "[", "2", ":", "]", "\n", "absolute_freq", "=", "int", "(", "temp", "[", "1", "]", ")", "\n", "res", "=", "[", "]", "\n", "for", "e", "in", "entities", ":", "\n", "                    ", "if", "len", "(", "res", ")", ">=", "cand_ent_num", ":", "\n", "                        ", "break", "\n", "", "ent_id", ",", "score", ",", "_", "=", "map", "(", "str", ".", "strip", ",", "e", ".", "split", "(", "','", ",", "2", ")", ")", "\n", "# print(ent_id, score)", "\n", "if", "not", "entityNameIdMap", ".", "is_valid_entity_id", "(", "ent_id", ")", ":", "\n", "                        ", "incompatible_ent_ids", "+=", "1", "\n", "", "elif", "allowed_entities_set", "is", "not", "None", "and", "ent_id", "not", "in", "allowed_entities_set", ":", "\n", "                        ", "pass", "\n", "", "else", ":", "\n", "                        ", "res", ".", "append", "(", "(", "ent_id", ",", "float", "(", "score", ")", ")", ")", "\n", "", "", "if", "res", ":", "\n", "                    ", "if", "mention", "in", "p_e_m", ":", "\n", "                        ", "duplicate_mentions_cnt", "+=", "1", "\n", "# print(\"duplicate mention: \", mention)", "\n", "if", "absolute_freq", ">", "mention_total_freq", "[", "mention", "]", ":", "\n", "                            ", "if", "len", "(", "res", ")", ">", "len", "(", "p_e_m", "[", "mention", "]", ")", ":", "\n", "                                ", "clear_conflict_winner", "+=", "1", "\n", "", "else", ":", "\n", "                                ", "not_clear_conflict_winner", "+=", "1", "\n", "", "p_e_m", "[", "mention", "]", "=", "res", "\n", "mention_total_freq", "[", "mention", "]", "=", "absolute_freq", "\n", "", "", "else", ":", "\n", "                        ", "p_e_m", "[", "mention", "]", "=", "res", "# for each mention we have a list of tuples (ent_id, score)", "\n", "mention_total_freq", "[", "mention", "]", "=", "absolute_freq", "\n", "\n", "", "", "", "except", "Exception", "as", "esd", ":", "\n", "                ", "exc_type", ",", "exc_obj", ",", "exc_tb", "=", "sys", ".", "exc_info", "(", ")", "\n", "fname", "=", "os", ".", "path", ".", "split", "(", "exc_tb", ".", "tb_frame", ".", "f_code", ".", "co_filename", ")", "[", "1", "]", "\n", "print", "(", "exc_type", ",", "fname", ",", "exc_tb", ".", "tb_lineno", ")", "\n", "p_e_m_errors", "+=", "1", "\n", "print", "(", "\"error in line: \"", ",", "repr", "(", "line", ")", ")", "\n", "\n", "", "", "", "print", "(", "\"duplicate_mentions_cnt: \"", ",", "duplicate_mentions_cnt", ")", "\n", "print", "(", "\"kzaporoj-end of p_e_m reading. wall time:\"", ",", "(", "time", ".", "time", "(", ")", "-", "wall_start", ")", "/", "60", ",", "\" minutes\"", ")", "\n", "print", "(", "\"p_e_m_errors: \"", ",", "p_e_m_errors", ")", "\n", "print", "(", "\"incompatible_ent_ids: \"", ",", "incompatible_ent_ids", ")", "\n", "\n", "if", "not", "lowercase_p_e_m", ":", "# do not build lowercase dictionary", "\n", "        ", "return", "p_e_m", ",", "None", ",", "mention_total_freq", "\n", "\n", "", "wall_start", "=", "time", ".", "time", "(", ")", "\n", "# two different p(e|m) mentions can be the same after lower() so we merge the two candidate", "\n", "# entities lists. But the two lists can have the same candidate entity with different score", "\n", "# we keep the highest score. For example if \"Obama\" mention gives 0.9 to entity Obama and", "\n", "# OBAMA gives 0.7 then we keep the 0.9 . Also we keep as before only the cand_ent_num entities", "\n", "# with the highest score", "\n", "p_e_m_lowercased", "=", "defaultdict", "(", "lambda", ":", "defaultdict", "(", "int", ")", ")", "\n", "\n", "for", "mention", ",", "res", "in", "p_e_m", ".", "items", "(", ")", ":", "\n", "        ", "l_mention", "=", "mention", ".", "lower", "(", ")", "\n", "# if l_mention != mention and l_mention not in p_e_m:", "\n", "#   the same so do nothing      already exist in dictionary", "\n", "#   e.g. p(e|m) has Obama and obama. So when i convert Obama to lowercase", "\n", "# I find that obama already exist so i will prefer this.", "\n", "if", "l_mention", "not", "in", "p_e_m", ":", "\n", "            ", "for", "r", "in", "res", ":", "\n", "                ", "ent_id", ",", "score", "=", "r", "\n", "p_e_m_lowercased", "[", "l_mention", "]", "[", "ent_id", "]", "=", "max", "(", "score", ",", "p_e_m_lowercased", "[", "l_mention", "]", "[", "ent_id", "]", ")", "\n", "\n", "", "", "", "print", "(", "\"end of p_e_m lowercase. wall time:\"", ",", "(", "time", ".", "time", "(", ")", "-", "wall_start", ")", "/", "60", ",", "\" minutes\"", ")", "\n", "\n", "import", "operator", "\n", "p_e_m_lowercased_trim", "=", "dict", "(", ")", "\n", "for", "mention", ",", "ent_score_map", "in", "p_e_m_lowercased", ".", "items", "(", ")", ":", "\n", "        ", "sorted_", "=", "sorted", "(", "ent_score_map", ".", "items", "(", ")", ",", "key", "=", "operator", ".", "itemgetter", "(", "1", ")", ",", "reverse", "=", "True", ")", "\n", "p_e_m_lowercased_trim", "[", "mention", "]", "=", "sorted_", "[", ":", "cand_ent_num", "]", "\n", "\n", "", "return", "p_e_m", ",", "p_e_m_lowercased_trim", ",", "mention_total_freq", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.util.get_immediate_files": [[474, 477], ["os.listdir", "os.path.isfile", "os.path.join"], "function", ["None"], ["", "def", "get_immediate_files", "(", "a_dir", ")", ":", "\n", "    ", "return", "[", "name", "for", "name", "in", "os", ".", "listdir", "(", "a_dir", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "a_dir", ",", "name", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.reader.parse_sequence_example": [[4, 42], ["tensorflow.parse_single_sequence_example", "tensorflow.FixedLenSequenceFeature", "tensorflow.VarLenFeature", "tensorflow.FixedLenSequenceFeature", "tensorflow.FixedLenSequenceFeature", "tensorflow.FixedLenSequenceFeature", "tensorflow.VarLenFeature", "tensorflow.VarLenFeature", "tensorflow.VarLenFeature", "tensorflow.FixedLenSequenceFeature", "tensorflow.FixedLenSequenceFeature", "tensorflow.FixedLenSequenceFeature", "tensorflow.FixedLenSequenceFeature", "tensorflow.sparse_tensor_to_dense", "tensorflow.sparse_tensor_to_dense", "tensorflow.sparse_tensor_to_dense", "tensorflow.sparse_tensor_to_dense", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature"], "function", ["None"], ["def", "parse_sequence_example", "(", "serialized", ")", ":", "\n", "    ", "sequence_features", "=", "{", "\n", "\"words\"", ":", "tf", ".", "FixedLenSequenceFeature", "(", "[", "]", ",", "dtype", "=", "tf", ".", "int64", ")", ",", "\n", "# in order to have a vector. if i put [1] it will probably", "\n", "# be a matrix with just one column", "\n", "\"chars\"", ":", "tf", ".", "VarLenFeature", "(", "tf", ".", "int64", ")", ",", "\n", "\"chars_len\"", ":", "tf", ".", "FixedLenSequenceFeature", "(", "[", "]", ",", "dtype", "=", "tf", ".", "int64", ")", ",", "\n", "\"begin_span\"", ":", "tf", ".", "FixedLenSequenceFeature", "(", "[", "]", ",", "dtype", "=", "tf", ".", "int64", ")", ",", "\n", "\"end_span\"", ":", "tf", ".", "FixedLenSequenceFeature", "(", "[", "]", ",", "dtype", "=", "tf", ".", "int64", ")", ",", "\n", "\"cand_entities\"", ":", "tf", ".", "VarLenFeature", "(", "tf", ".", "int64", ")", ",", "\n", "\"cand_entities_scores\"", ":", "tf", ".", "VarLenFeature", "(", "tf", ".", "float32", ")", ",", "\n", "\"cand_entities_labels\"", ":", "tf", ".", "VarLenFeature", "(", "tf", ".", "int64", ")", ",", "\n", "\"cand_entities_len\"", ":", "tf", ".", "FixedLenSequenceFeature", "(", "[", "]", ",", "dtype", "=", "tf", ".", "int64", ")", ",", "\n", "\"ground_truth\"", ":", "tf", ".", "FixedLenSequenceFeature", "(", "[", "]", ",", "dtype", "=", "tf", ".", "int64", ")", "\n", "}", "\n", "if", "True", ":", "\n", "        ", "sequence_features", "[", "\"begin_gm\"", "]", "=", "tf", ".", "FixedLenSequenceFeature", "(", "[", "]", ",", "dtype", "=", "tf", ".", "int64", ")", "\n", "sequence_features", "[", "\"end_gm\"", "]", "=", "tf", ".", "FixedLenSequenceFeature", "(", "[", "]", ",", "dtype", "=", "tf", ".", "int64", ")", "\n", "\n", "", "context", ",", "sequence", "=", "tf", ".", "parse_single_sequence_example", "(", "\n", "serialized", ",", "\n", "context_features", "=", "{", "\n", "\"chunk_id\"", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "dtype", "=", "tf", ".", "string", ")", ",", "\n", "\"words_len\"", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "dtype", "=", "tf", ".", "int64", ")", ",", "\n", "\"spans_len\"", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "dtype", "=", "tf", ".", "int64", ")", ",", "\n", "\"ground_truth_len\"", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "dtype", "=", "tf", ".", "int64", ")", "\n", "}", ",", "\n", "sequence_features", "=", "sequence_features", ")", "\n", "\n", "return", "context", "[", "\"chunk_id\"", "]", ",", "sequence", "[", "\"words\"", "]", ",", "context", "[", "\"words_len\"", "]", ",", "tf", ".", "sparse_tensor_to_dense", "(", "sequence", "[", "\"chars\"", "]", ")", ",", "sequence", "[", "\"chars_len\"", "]", ",", "sequence", "[", "\"begin_span\"", "]", ",", "sequence", "[", "\"end_span\"", "]", ",", "context", "[", "\"spans_len\"", "]", ",", "tf", ".", "sparse_tensor_to_dense", "(", "sequence", "[", "\"cand_entities\"", "]", ")", ",", "tf", ".", "sparse_tensor_to_dense", "(", "sequence", "[", "\"cand_entities_scores\"", "]", ")", ",", "tf", ".", "sparse_tensor_to_dense", "(", "sequence", "[", "\"cand_entities_labels\"", "]", ")", ",", "sequence", "[", "\"cand_entities_len\"", "]", ",", "sequence", "[", "\"ground_truth\"", "]", ",", "context", "[", "\"ground_truth_len\"", "]", ",", "sequence", "[", "\"begin_gm\"", "]", ",", "sequence", "[", "\"end_gm\"", "]", "\n", "# return context, sequence", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.reader.count_records_of_one_epoch": [[45, 75], ["tensorflow.train.string_input_producer", "tensorflow.TFRecordReader", "tf.TFRecordReader.read", "print", "tensorflow.Session", "sess.run", "tensorflow.train.Coordinator", "tensorflow.train.start_queue_runners", "tf.train.Coordinator.join", "tensorflow.variables_initializer", "tf.train.Coordinator.request_stop", "tf.train.Coordinator.should_stop", "sess.run", "print", "tensorflow.global_variables", "tensorflow.local_variables"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile.LineFileReader.read", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.ncr3.CheckGradient.run", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.ncr3.CheckGradient.run", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "count_records_of_one_epoch", "(", "trainfiles", ")", ":", "\n", "    ", "filename_queue", "=", "tf", ".", "train", ".", "string_input_producer", "(", "trainfiles", ",", "num_epochs", "=", "1", ")", "\n", "reader", "=", "tf", ".", "TFRecordReader", "(", ")", "\n", "key", ",", "serialized_example", "=", "reader", ".", "read", "(", "filename_queue", ")", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "        ", "sess", ".", "run", "(", "\n", "tf", ".", "variables_initializer", "(", "\n", "tf", ".", "global_variables", "(", ")", "+", "tf", ".", "local_variables", "(", ")", "\n", ")", "\n", ")", "\n", "\n", "# Start queue runners", "\n", "coord", "=", "tf", ".", "train", ".", "Coordinator", "(", ")", "\n", "threads", "=", "tf", ".", "train", ".", "start_queue_runners", "(", "sess", "=", "sess", ",", "coord", "=", "coord", ")", "\n", "\n", "counter", "=", "0", "\n", "try", ":", "\n", "            ", "while", "not", "coord", ".", "should_stop", "(", ")", ":", "\n", "                ", "fetch_vals", "=", "sess", ".", "run", "(", "(", "key", ")", ")", "\n", "# print(fetch_vals)", "\n", "counter", "+=", "1", "\n", "", "", "except", "tf", ".", "errors", ".", "OutOfRangeError", ":", "\n", "            ", "pass", "\n", "", "except", "KeyboardInterrupt", ":", "\n", "            ", "print", "(", "\"Training stopped by Ctrl+C.\"", ")", "\n", "", "finally", ":", "\n", "            ", "coord", ".", "request_stop", "(", ")", "\n", "", "coord", ".", "join", "(", "threads", ")", "\n", "", "print", "(", "\"number of tfrecords in trainfiles = \"", ",", "counter", ")", "\n", "return", "counter", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.reader.train_input_pipeline": [[77, 86], ["tensorflow.data.TFRecordDataset", "dataset.padded_batch.map", "dataset.padded_batch.repeat", "dataset.padded_batch.shuffle", "dataset.padded_batch.padded_batch"], "function", ["None"], ["", "def", "train_input_pipeline", "(", "filenames", ",", "shuffle_capacity", ",", "batch_size", ")", ":", "\n", "    ", "dataset", "=", "tf", ".", "data", ".", "TFRecordDataset", "(", "filenames", ")", "\n", "# dataset = tf.contrib.data.TFRecordDataset(filenames)", "\n", "dataset", "=", "dataset", ".", "map", "(", "parse_sequence_example", ")", "\n", "# dataset = dataset.map(parse_sequence_example, num_parallel_calls=3)", "\n", "dataset", "=", "dataset", ".", "repeat", "(", ")", "\n", "dataset", "=", "dataset", ".", "shuffle", "(", "buffer_size", "=", "shuffle_capacity", ")", "\n", "dataset", "=", "dataset", ".", "padded_batch", "(", "batch_size", ",", "dataset", ".", "output_shapes", ")", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.reader.test_input_pipeline": [[88, 93], ["tensorflow.data.TFRecordDataset", "dataset.padded_batch.map", "dataset.padded_batch.padded_batch"], "function", ["None"], ["", "def", "test_input_pipeline", "(", "filenames", ",", "args", ")", ":", "\n", "    ", "dataset", "=", "tf", ".", "data", ".", "TFRecordDataset", "(", "filenames", ")", "\n", "dataset", "=", "dataset", ".", "map", "(", "parse_sequence_example", ")", "\n", "dataset", "=", "dataset", ".", "padded_batch", "(", "args", ".", "batch_size", ",", "dataset", ".", "output_shapes", ")", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.create_pretraining_data.TrainingInstance.__init__": [[67, 74], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "tokens", ",", "segment_ids", ",", "masked_lm_positions", ",", "masked_lm_labels", ",", "\n", "is_random_next", ")", ":", "\n", "    ", "self", ".", "tokens", "=", "tokens", "\n", "self", ".", "segment_ids", "=", "segment_ids", "\n", "self", ".", "is_random_next", "=", "is_random_next", "\n", "self", ".", "masked_lm_positions", "=", "masked_lm_positions", "\n", "self", ".", "masked_lm_labels", "=", "masked_lm_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.create_pretraining_data.TrainingInstance.__str__": [[75, 87], ["tokenization.printable_text", "str", "str", "tokenization.printable_text"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.printable_text", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.printable_text"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "    ", "s", "=", "\"\"", "\n", "s", "+=", "\"tokens: %s\\n\"", "%", "(", "\" \"", ".", "join", "(", "\n", "[", "tokenization", ".", "printable_text", "(", "x", ")", "for", "x", "in", "self", ".", "tokens", "]", ")", ")", "\n", "s", "+=", "\"segment_ids: %s\\n\"", "%", "(", "\" \"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "self", ".", "segment_ids", "]", ")", ")", "\n", "s", "+=", "\"is_random_next: %s\\n\"", "%", "self", ".", "is_random_next", "\n", "s", "+=", "\"masked_lm_positions: %s\\n\"", "%", "(", "\" \"", ".", "join", "(", "\n", "[", "str", "(", "x", ")", "for", "x", "in", "self", ".", "masked_lm_positions", "]", ")", ")", "\n", "s", "+=", "\"masked_lm_labels: %s\\n\"", "%", "(", "\" \"", ".", "join", "(", "\n", "[", "tokenization", ".", "printable_text", "(", "x", ")", "for", "x", "in", "self", ".", "masked_lm_labels", "]", ")", ")", "\n", "s", "+=", "\"\\n\"", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.create_pretraining_data.TrainingInstance.__repr__": [[88, 90], ["create_pretraining_data.TrainingInstance.__str__"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.results.main_linker_results_to_html.DropdownEntry.__str__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "__str__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.create_pretraining_data.write_instance_to_example_files": [[92, 163], ["enumerate", "tensorflow.logging.info", "writers.append", "tokenizer.convert_tokens_to_ids", "list", "list", "tokenizer.convert_tokens_to_ids", "collections.OrderedDict", "create_pretraining_data.create_int_feature", "create_pretraining_data.create_int_feature", "create_pretraining_data.create_int_feature", "create_pretraining_data.create_int_feature", "create_pretraining_data.create_int_feature", "create_pretraining_data.create_float_feature", "create_pretraining_data.create_int_feature", "tensorflow.train.Example", "writers[].write", "writer.close", "tensorflow.python_io.TFRecordWriter", "len", "len", "len", "tokenizer.convert_tokens_to_ids.append", "input_mask.append", "list.append", "len", "len", "len", "len", "len", "list.append", "tokenizer.convert_tokens_to_ids.append", "masked_lm_weights.append", "tf.train.Example.SerializeToString", "len", "tensorflow.logging.info", "tensorflow.logging.info", "collections.OrderedDict.keys", "tensorflow.train.Features", "tensorflow.logging.info", "tokenization.printable_text", "str"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.convert_tokens_to_ids", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.convert_tokens_to_ids", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.create_pretraining_data.create_int_feature", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.create_pretraining_data.create_int_feature", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.create_pretraining_data.create_int_feature", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.create_pretraining_data.create_int_feature", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.create_pretraining_data.create_int_feature", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.create_pretraining_data.create_float_feature", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.create_pretraining_data.create_int_feature", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.write", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.close", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.printable_text"], ["", "", "def", "write_instance_to_example_files", "(", "instances", ",", "tokenizer", ",", "max_seq_length", ",", "\n", "max_predictions_per_seq", ",", "output_files", ")", ":", "\n", "  ", "\"\"\"Create TF example files from `TrainingInstance`s.\"\"\"", "\n", "writers", "=", "[", "]", "\n", "for", "output_file", "in", "output_files", ":", "\n", "    ", "writers", ".", "append", "(", "tf", ".", "python_io", ".", "TFRecordWriter", "(", "output_file", ")", ")", "\n", "\n", "", "writer_index", "=", "0", "\n", "\n", "total_written", "=", "0", "\n", "for", "(", "inst_index", ",", "instance", ")", "in", "enumerate", "(", "instances", ")", ":", "\n", "    ", "input_ids", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "instance", ".", "tokens", ")", "\n", "input_mask", "=", "[", "1", "]", "*", "len", "(", "input_ids", ")", "\n", "segment_ids", "=", "list", "(", "instance", ".", "segment_ids", ")", "\n", "assert", "len", "(", "input_ids", ")", "<=", "max_seq_length", "\n", "\n", "while", "len", "(", "input_ids", ")", "<", "max_seq_length", ":", "\n", "      ", "input_ids", ".", "append", "(", "0", ")", "\n", "input_mask", ".", "append", "(", "0", ")", "\n", "segment_ids", ".", "append", "(", "0", ")", "\n", "\n", "", "assert", "len", "(", "input_ids", ")", "==", "max_seq_length", "\n", "assert", "len", "(", "input_mask", ")", "==", "max_seq_length", "\n", "assert", "len", "(", "segment_ids", ")", "==", "max_seq_length", "\n", "\n", "masked_lm_positions", "=", "list", "(", "instance", ".", "masked_lm_positions", ")", "\n", "masked_lm_ids", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "instance", ".", "masked_lm_labels", ")", "\n", "masked_lm_weights", "=", "[", "1.0", "]", "*", "len", "(", "masked_lm_ids", ")", "\n", "\n", "while", "len", "(", "masked_lm_positions", ")", "<", "max_predictions_per_seq", ":", "\n", "      ", "masked_lm_positions", ".", "append", "(", "0", ")", "\n", "masked_lm_ids", ".", "append", "(", "0", ")", "\n", "masked_lm_weights", ".", "append", "(", "0.0", ")", "\n", "\n", "", "next_sentence_label", "=", "1", "if", "instance", ".", "is_random_next", "else", "0", "\n", "\n", "features", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "features", "[", "\"input_ids\"", "]", "=", "create_int_feature", "(", "input_ids", ")", "\n", "features", "[", "\"input_mask\"", "]", "=", "create_int_feature", "(", "input_mask", ")", "\n", "features", "[", "\"segment_ids\"", "]", "=", "create_int_feature", "(", "segment_ids", ")", "\n", "features", "[", "\"masked_lm_positions\"", "]", "=", "create_int_feature", "(", "masked_lm_positions", ")", "\n", "features", "[", "\"masked_lm_ids\"", "]", "=", "create_int_feature", "(", "masked_lm_ids", ")", "\n", "features", "[", "\"masked_lm_weights\"", "]", "=", "create_float_feature", "(", "masked_lm_weights", ")", "\n", "features", "[", "\"next_sentence_labels\"", "]", "=", "create_int_feature", "(", "[", "next_sentence_label", "]", ")", "\n", "\n", "tf_example", "=", "tf", ".", "train", ".", "Example", "(", "features", "=", "tf", ".", "train", ".", "Features", "(", "feature", "=", "features", ")", ")", "\n", "\n", "writers", "[", "writer_index", "]", ".", "write", "(", "tf_example", ".", "SerializeToString", "(", ")", ")", "\n", "writer_index", "=", "(", "writer_index", "+", "1", ")", "%", "len", "(", "writers", ")", "\n", "\n", "total_written", "+=", "1", "\n", "\n", "if", "inst_index", "<", "20", ":", "\n", "      ", "tf", ".", "logging", ".", "info", "(", "\"*** Example ***\"", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"tokens: %s\"", "%", "\" \"", ".", "join", "(", "\n", "[", "tokenization", ".", "printable_text", "(", "x", ")", "for", "x", "in", "instance", ".", "tokens", "]", ")", ")", "\n", "\n", "for", "feature_name", "in", "features", ".", "keys", "(", ")", ":", "\n", "        ", "feature", "=", "features", "[", "feature_name", "]", "\n", "values", "=", "[", "]", "\n", "if", "feature", ".", "int64_list", ".", "value", ":", "\n", "          ", "values", "=", "feature", ".", "int64_list", ".", "value", "\n", "", "elif", "feature", ".", "float_list", ".", "value", ":", "\n", "          ", "values", "=", "feature", ".", "float_list", ".", "value", "\n", "", "tf", ".", "logging", ".", "info", "(", "\n", "\"%s: %s\"", "%", "(", "feature_name", ",", "\" \"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "values", "]", ")", ")", ")", "\n", "\n", "", "", "", "for", "writer", "in", "writers", ":", "\n", "    ", "writer", ".", "close", "(", ")", "\n", "\n", "", "tf", ".", "logging", ".", "info", "(", "\"Wrote %d total instances\"", ",", "total_written", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.create_pretraining_data.create_int_feature": [[165, 168], ["tensorflow.train.Feature", "tensorflow.train.Int64List", "list"], "function", ["None"], ["", "def", "create_int_feature", "(", "values", ")", ":", "\n", "  ", "feature", "=", "tf", ".", "train", ".", "Feature", "(", "int64_list", "=", "tf", ".", "train", ".", "Int64List", "(", "value", "=", "list", "(", "values", ")", ")", ")", "\n", "return", "feature", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.create_pretraining_data.create_float_feature": [[170, 173], ["tensorflow.train.Feature", "tensorflow.train.FloatList", "list"], "function", ["None"], ["", "def", "create_float_feature", "(", "values", ")", ":", "\n", "  ", "feature", "=", "tf", ".", "train", ".", "Feature", "(", "float_list", "=", "tf", ".", "train", ".", "FloatList", "(", "value", "=", "list", "(", "values", ")", ")", ")", "\n", "return", "feature", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.create_pretraining_data.create_training_instances": [[175, 217], ["rng.shuffle", "list", "range", "rng.shuffle", "tokenizer.vocab.keys", "range", "tensorflow.gfile.GFile", "len", "instances.extend", "tokenization.convert_to_unicode", "line.strip.strip", "tokenizer.tokenize", "create_pretraining_data.create_instances_from_document", "reader.readline", "all_documents.append", "all_documents[].append"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.WordpieceTokenizer.tokenize", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.create_pretraining_data.create_instances_from_document"], ["", "def", "create_training_instances", "(", "input_files", ",", "tokenizer", ",", "max_seq_length", ",", "\n", "dupe_factor", ",", "short_seq_prob", ",", "masked_lm_prob", ",", "\n", "max_predictions_per_seq", ",", "rng", ")", ":", "\n", "  ", "\"\"\"Create `TrainingInstance`s from raw text.\"\"\"", "\n", "all_documents", "=", "[", "[", "]", "]", "\n", "\n", "# Input file format:", "\n", "# (1) One sentence per line. These should ideally be actual sentences, not", "\n", "# entire paragraphs or arbitrary spans of text. (Because we use the", "\n", "# sentence boundaries for the \"next sentence prediction\" task).", "\n", "# (2) Blank lines between documents. Document boundaries are needed so", "\n", "# that the \"next sentence prediction\" task doesn't span between documents.", "\n", "for", "input_file", "in", "input_files", ":", "\n", "    ", "with", "tf", ".", "gfile", ".", "GFile", "(", "input_file", ",", "\"r\"", ")", "as", "reader", ":", "\n", "      ", "while", "True", ":", "\n", "        ", "line", "=", "tokenization", ".", "convert_to_unicode", "(", "reader", ".", "readline", "(", ")", ")", "\n", "if", "not", "line", ":", "\n", "          ", "break", "\n", "", "line", "=", "line", ".", "strip", "(", ")", "\n", "\n", "# Empty lines are used as document delimiters", "\n", "if", "not", "line", ":", "\n", "          ", "all_documents", ".", "append", "(", "[", "]", ")", "\n", "", "tokens", "=", "tokenizer", ".", "tokenize", "(", "line", ")", "\n", "if", "tokens", ":", "\n", "          ", "all_documents", "[", "-", "1", "]", ".", "append", "(", "tokens", ")", "\n", "\n", "# Remove empty documents", "\n", "", "", "", "", "all_documents", "=", "[", "x", "for", "x", "in", "all_documents", "if", "x", "]", "\n", "rng", ".", "shuffle", "(", "all_documents", ")", "\n", "\n", "vocab_words", "=", "list", "(", "tokenizer", ".", "vocab", ".", "keys", "(", ")", ")", "\n", "instances", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "dupe_factor", ")", ":", "\n", "    ", "for", "document_index", "in", "range", "(", "len", "(", "all_documents", ")", ")", ":", "\n", "      ", "instances", ".", "extend", "(", "\n", "create_instances_from_document", "(", "\n", "all_documents", ",", "document_index", ",", "max_seq_length", ",", "short_seq_prob", ",", "\n", "masked_lm_prob", ",", "max_predictions_per_seq", ",", "vocab_words", ",", "rng", ")", ")", "\n", "\n", "", "", "rng", ".", "shuffle", "(", "instances", ")", "\n", "return", "instances", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.create_pretraining_data.create_instances_from_document": [[219, 332], ["rng.random", "rng.randint", "len", "current_chunk.append", "len", "range", "create_pretraining_data.truncate_seq_pair", "tokens.append", "segment_ids.append", "tokens.append", "segment_ids.append", "tokens.append", "segment_ids.append", "create_pretraining_data.create_masked_lm_predictions", "create_pretraining_data.TrainingInstance", "instances.append", "len", "len", "rng.randint", "tokens_a.extend", "range", "rng.randint", "range", "range", "len", "len", "tokens.append", "segment_ids.append", "tokens.append", "segment_ids.append", "len", "rng.random", "len", "rng.randint", "len", "tokens_b.extend", "len", "len", "tokens_b.extend", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.create_pretraining_data.truncate_seq_pair", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.create_pretraining_data.create_masked_lm_predictions"], ["", "def", "create_instances_from_document", "(", "\n", "all_documents", ",", "document_index", ",", "max_seq_length", ",", "short_seq_prob", ",", "\n", "masked_lm_prob", ",", "max_predictions_per_seq", ",", "vocab_words", ",", "rng", ")", ":", "\n", "  ", "\"\"\"Creates `TrainingInstance`s for a single document.\"\"\"", "\n", "document", "=", "all_documents", "[", "document_index", "]", "\n", "\n", "# Account for [CLS], [SEP], [SEP]", "\n", "max_num_tokens", "=", "max_seq_length", "-", "3", "\n", "\n", "# We *usually* want to fill up the entire sequence since we are padding", "\n", "# to `max_seq_length` anyways, so short sequences are generally wasted", "\n", "# computation. However, we *sometimes*", "\n", "# (i.e., short_seq_prob == 0.1 == 10% of the time) want to use shorter", "\n", "# sequences to minimize the mismatch between pre-training and fine-tuning.", "\n", "# The `target_seq_length` is just a rough target however, whereas", "\n", "# `max_seq_length` is a hard limit.", "\n", "target_seq_length", "=", "max_num_tokens", "\n", "if", "rng", ".", "random", "(", ")", "<", "short_seq_prob", ":", "\n", "    ", "target_seq_length", "=", "rng", ".", "randint", "(", "2", ",", "max_num_tokens", ")", "\n", "\n", "# We DON'T just concatenate all of the tokens from a document into a long", "\n", "# sequence and choose an arbitrary split point because this would make the", "\n", "# next sentence prediction task too easy. Instead, we split the input into", "\n", "# segments \"A\" and \"B\" based on the actual \"sentences\" provided by the user", "\n", "# input.", "\n", "", "instances", "=", "[", "]", "\n", "current_chunk", "=", "[", "]", "\n", "current_length", "=", "0", "\n", "i", "=", "0", "\n", "while", "i", "<", "len", "(", "document", ")", ":", "\n", "    ", "segment", "=", "document", "[", "i", "]", "\n", "current_chunk", ".", "append", "(", "segment", ")", "\n", "current_length", "+=", "len", "(", "segment", ")", "\n", "if", "i", "==", "len", "(", "document", ")", "-", "1", "or", "current_length", ">=", "target_seq_length", ":", "\n", "      ", "if", "current_chunk", ":", "\n", "# `a_end` is how many segments from `current_chunk` go into the `A`", "\n", "# (first) sentence.", "\n", "        ", "a_end", "=", "1", "\n", "if", "len", "(", "current_chunk", ")", ">=", "2", ":", "\n", "          ", "a_end", "=", "rng", ".", "randint", "(", "1", ",", "len", "(", "current_chunk", ")", "-", "1", ")", "\n", "\n", "", "tokens_a", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "a_end", ")", ":", "\n", "          ", "tokens_a", ".", "extend", "(", "current_chunk", "[", "j", "]", ")", "\n", "\n", "", "tokens_b", "=", "[", "]", "\n", "# Random next", "\n", "is_random_next", "=", "False", "\n", "if", "len", "(", "current_chunk", ")", "==", "1", "or", "rng", ".", "random", "(", ")", "<", "0.5", ":", "\n", "          ", "is_random_next", "=", "True", "\n", "target_b_length", "=", "target_seq_length", "-", "len", "(", "tokens_a", ")", "\n", "\n", "# This should rarely go for more than one iteration for large", "\n", "# corpora. However, just to be careful, we try to make sure that", "\n", "# the random document is not the same as the document", "\n", "# we're processing.", "\n", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "            ", "random_document_index", "=", "rng", ".", "randint", "(", "0", ",", "len", "(", "all_documents", ")", "-", "1", ")", "\n", "if", "random_document_index", "!=", "document_index", ":", "\n", "              ", "break", "\n", "\n", "", "", "random_document", "=", "all_documents", "[", "random_document_index", "]", "\n", "random_start", "=", "rng", ".", "randint", "(", "0", ",", "len", "(", "random_document", ")", "-", "1", ")", "\n", "for", "j", "in", "range", "(", "random_start", ",", "len", "(", "random_document", ")", ")", ":", "\n", "            ", "tokens_b", ".", "extend", "(", "random_document", "[", "j", "]", ")", "\n", "if", "len", "(", "tokens_b", ")", ">=", "target_b_length", ":", "\n", "              ", "break", "\n", "# We didn't actually use these segments so we \"put them back\" so", "\n", "# they don't go to waste.", "\n", "", "", "num_unused_segments", "=", "len", "(", "current_chunk", ")", "-", "a_end", "\n", "i", "-=", "num_unused_segments", "\n", "# Actual next", "\n", "", "else", ":", "\n", "          ", "is_random_next", "=", "False", "\n", "for", "j", "in", "range", "(", "a_end", ",", "len", "(", "current_chunk", ")", ")", ":", "\n", "            ", "tokens_b", ".", "extend", "(", "current_chunk", "[", "j", "]", ")", "\n", "", "", "truncate_seq_pair", "(", "tokens_a", ",", "tokens_b", ",", "max_num_tokens", ",", "rng", ")", "\n", "\n", "assert", "len", "(", "tokens_a", ")", ">=", "1", "\n", "assert", "len", "(", "tokens_b", ")", ">=", "1", "\n", "\n", "tokens", "=", "[", "]", "\n", "segment_ids", "=", "[", "]", "\n", "tokens", ".", "append", "(", "\"[CLS]\"", ")", "\n", "segment_ids", ".", "append", "(", "0", ")", "\n", "for", "token", "in", "tokens_a", ":", "\n", "          ", "tokens", ".", "append", "(", "token", ")", "\n", "segment_ids", ".", "append", "(", "0", ")", "\n", "\n", "", "tokens", ".", "append", "(", "\"[SEP]\"", ")", "\n", "segment_ids", ".", "append", "(", "0", ")", "\n", "\n", "for", "token", "in", "tokens_b", ":", "\n", "          ", "tokens", ".", "append", "(", "token", ")", "\n", "segment_ids", ".", "append", "(", "1", ")", "\n", "", "tokens", ".", "append", "(", "\"[SEP]\"", ")", "\n", "segment_ids", ".", "append", "(", "1", ")", "\n", "\n", "(", "tokens", ",", "masked_lm_positions", ",", "\n", "masked_lm_labels", ")", "=", "create_masked_lm_predictions", "(", "\n", "tokens", ",", "masked_lm_prob", ",", "max_predictions_per_seq", ",", "vocab_words", ",", "rng", ")", "\n", "instance", "=", "TrainingInstance", "(", "\n", "tokens", "=", "tokens", ",", "\n", "segment_ids", "=", "segment_ids", ",", "\n", "is_random_next", "=", "is_random_next", ",", "\n", "masked_lm_positions", "=", "masked_lm_positions", ",", "\n", "masked_lm_labels", "=", "masked_lm_labels", ")", "\n", "instances", ".", "append", "(", "instance", ")", "\n", "", "current_chunk", "=", "[", "]", "\n", "current_length", "=", "0", "\n", "", "i", "+=", "1", "\n", "\n", "", "return", "instances", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.create_pretraining_data.create_masked_lm_predictions": [[338, 389], ["enumerate", "rng.shuffle", "list", "min", "set", "sorted", "cand_indexes.append", "max", "set.add", "sorted.append", "masked_lm_positions.append", "masked_lm_labels.append", "int", "len", "rng.random", "MaskedLmInstance", "round", "rng.random", "len", "rng.randint", "len"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add"], ["def", "create_masked_lm_predictions", "(", "tokens", ",", "masked_lm_prob", ",", "\n", "max_predictions_per_seq", ",", "vocab_words", ",", "rng", ")", ":", "\n", "  ", "\"\"\"Creates the predictions for the masked LM objective.\"\"\"", "\n", "\n", "cand_indexes", "=", "[", "]", "\n", "for", "(", "i", ",", "token", ")", "in", "enumerate", "(", "tokens", ")", ":", "\n", "    ", "if", "token", "==", "\"[CLS]\"", "or", "token", "==", "\"[SEP]\"", ":", "\n", "      ", "continue", "\n", "", "cand_indexes", ".", "append", "(", "i", ")", "\n", "\n", "", "rng", ".", "shuffle", "(", "cand_indexes", ")", "\n", "\n", "output_tokens", "=", "list", "(", "tokens", ")", "\n", "\n", "num_to_predict", "=", "min", "(", "max_predictions_per_seq", ",", "\n", "max", "(", "1", ",", "int", "(", "round", "(", "len", "(", "tokens", ")", "*", "masked_lm_prob", ")", ")", ")", ")", "\n", "\n", "masked_lms", "=", "[", "]", "\n", "covered_indexes", "=", "set", "(", ")", "\n", "for", "index", "in", "cand_indexes", ":", "\n", "    ", "if", "len", "(", "masked_lms", ")", ">=", "num_to_predict", ":", "\n", "      ", "break", "\n", "", "if", "index", "in", "covered_indexes", ":", "\n", "      ", "continue", "\n", "", "covered_indexes", ".", "add", "(", "index", ")", "\n", "\n", "masked_token", "=", "None", "\n", "# 80% of the time, replace with [MASK]", "\n", "if", "rng", ".", "random", "(", ")", "<", "0.8", ":", "\n", "      ", "masked_token", "=", "\"[MASK]\"", "\n", "", "else", ":", "\n", "# 10% of the time, keep original", "\n", "      ", "if", "rng", ".", "random", "(", ")", "<", "0.5", ":", "\n", "        ", "masked_token", "=", "tokens", "[", "index", "]", "\n", "# 10% of the time, replace with random word", "\n", "", "else", ":", "\n", "        ", "masked_token", "=", "vocab_words", "[", "rng", ".", "randint", "(", "0", ",", "len", "(", "vocab_words", ")", "-", "1", ")", "]", "\n", "\n", "", "", "output_tokens", "[", "index", "]", "=", "masked_token", "\n", "\n", "masked_lms", ".", "append", "(", "MaskedLmInstance", "(", "index", "=", "index", ",", "label", "=", "tokens", "[", "index", "]", ")", ")", "\n", "\n", "", "masked_lms", "=", "sorted", "(", "masked_lms", ",", "key", "=", "lambda", "x", ":", "x", ".", "index", ")", "\n", "\n", "masked_lm_positions", "=", "[", "]", "\n", "masked_lm_labels", "=", "[", "]", "\n", "for", "p", "in", "masked_lms", ":", "\n", "    ", "masked_lm_positions", ".", "append", "(", "p", ".", "index", ")", "\n", "masked_lm_labels", ".", "append", "(", "p", ".", "label", ")", "\n", "\n", "", "return", "(", "output_tokens", ",", "masked_lm_positions", ",", "masked_lm_labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.create_pretraining_data.truncate_seq_pair": [[391, 407], ["len", "len", "len", "rng.random", "trunc_tokens.pop", "len", "len"], "function", ["None"], ["", "def", "truncate_seq_pair", "(", "tokens_a", ",", "tokens_b", ",", "max_num_tokens", ",", "rng", ")", ":", "\n", "  ", "\"\"\"Truncates a pair of sequences to a maximum sequence length.\"\"\"", "\n", "while", "True", ":", "\n", "    ", "total_length", "=", "len", "(", "tokens_a", ")", "+", "len", "(", "tokens_b", ")", "\n", "if", "total_length", "<=", "max_num_tokens", ":", "\n", "      ", "break", "\n", "\n", "", "trunc_tokens", "=", "tokens_a", "if", "len", "(", "tokens_a", ")", ">", "len", "(", "tokens_b", ")", "else", "tokens_b", "\n", "assert", "len", "(", "trunc_tokens", ")", ">=", "1", "\n", "\n", "# We want to sometimes truncate from the front and sometimes from the", "\n", "# back to add more randomness and avoid biases.", "\n", "if", "rng", ".", "random", "(", ")", "<", "0.5", ":", "\n", "      ", "del", "trunc_tokens", "[", "0", "]", "\n", "", "else", ":", "\n", "      ", "trunc_tokens", ".", "pop", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.create_pretraining_data.main": [[409, 436], ["tensorflow.logging.set_verbosity", "tokenization.FullTokenizer", "FLAGS.input_file.split", "tensorflow.logging.info", "random.Random", "create_pretraining_data.create_training_instances", "FLAGS.output_file.split", "tensorflow.logging.info", "create_pretraining_data.write_instance_to_example_files", "input_files.extend", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.gfile.Glob"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.create_pretraining_data.create_training_instances", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.create_pretraining_data.write_instance_to_example_files"], ["", "", "", "def", "main", "(", "_", ")", ":", "\n", "  ", "tf", ".", "logging", ".", "set_verbosity", "(", "tf", ".", "logging", ".", "INFO", ")", "\n", "\n", "tokenizer", "=", "tokenization", ".", "FullTokenizer", "(", "\n", "vocab_file", "=", "FLAGS", ".", "vocab_file", ",", "do_lower_case", "=", "FLAGS", ".", "do_lower_case", ")", "\n", "\n", "input_files", "=", "[", "]", "\n", "for", "input_pattern", "in", "FLAGS", ".", "input_file", ".", "split", "(", "\",\"", ")", ":", "\n", "    ", "input_files", ".", "extend", "(", "tf", ".", "gfile", ".", "Glob", "(", "input_pattern", ")", ")", "\n", "\n", "", "tf", ".", "logging", ".", "info", "(", "\"*** Reading from input files ***\"", ")", "\n", "for", "input_file", "in", "input_files", ":", "\n", "    ", "tf", ".", "logging", ".", "info", "(", "\"  %s\"", ",", "input_file", ")", "\n", "\n", "", "rng", "=", "random", ".", "Random", "(", "FLAGS", ".", "random_seed", ")", "\n", "instances", "=", "create_training_instances", "(", "\n", "input_files", ",", "tokenizer", ",", "FLAGS", ".", "max_seq_length", ",", "FLAGS", ".", "dupe_factor", ",", "\n", "FLAGS", ".", "short_seq_prob", ",", "FLAGS", ".", "masked_lm_prob", ",", "FLAGS", ".", "max_predictions_per_seq", ",", "\n", "rng", ")", "\n", "\n", "output_files", "=", "FLAGS", ".", "output_file", ".", "split", "(", "\",\"", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"*** Writing to output files ***\"", ")", "\n", "for", "output_file", "in", "output_files", ":", "\n", "    ", "tf", ".", "logging", ".", "info", "(", "\"  %s\"", ",", "output_file", ")", "\n", "\n", "", "write_instance_to_example_files", "(", "instances", ",", "tokenizer", ",", "FLAGS", ".", "max_seq_length", ",", "\n", "FLAGS", ".", "max_predictions_per_seq", ",", "output_files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.BertConfig.__init__": [[34, 81], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "vocab_size", ",", "\n", "hidden_size", "=", "768", ",", "\n", "num_hidden_layers", "=", "12", ",", "\n", "num_attention_heads", "=", "12", ",", "\n", "intermediate_size", "=", "3072", ",", "\n", "hidden_act", "=", "\"gelu\"", ",", "\n", "hidden_dropout_prob", "=", "0.1", ",", "\n", "attention_probs_dropout_prob", "=", "0.1", ",", "\n", "max_position_embeddings", "=", "512", ",", "\n", "type_vocab_size", "=", "16", ",", "\n", "initializer_range", "=", "0.02", ")", ":", "\n", "        ", "\"\"\"Constructs BertConfig.\n\n        Args:\n          vocab_size: Vocabulary size of `inputs_ids` in `BertModel`.\n          hidden_size: Size of the encoder layers and the pooler layer.\n          num_hidden_layers: Number of hidden layers in the Transformer encoder.\n          num_attention_heads: Number of attention heads for each attention layer in\n            the Transformer encoder.\n          intermediate_size: The size of the \"intermediate\" (i.e., feed-forward)\n            layer in the Transformer encoder.\n          hidden_act: The non-linear activation function (function or string) in the\n            encoder and pooler.\n          hidden_dropout_prob: The dropout probability for all fully connected\n            layers in the embeddings, encoder, and pooler.\n          attention_probs_dropout_prob: The dropout ratio for the attention\n            probabilities.\n          max_position_embeddings: The maximum sequence length that this model might\n            ever be used with. Typically set this to something large just in case\n            (e.g., 512 or 1024 or 2048).\n          type_vocab_size: The vocabulary size of the `token_type_ids` passed into\n            `BertModel`.\n          initializer_range: The stdev of the truncated_normal_initializer for\n            initializing all weight matrices.\n        \"\"\"", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "num_hidden_layers", "=", "num_hidden_layers", "\n", "self", ".", "num_attention_heads", "=", "num_attention_heads", "\n", "self", ".", "hidden_act", "=", "hidden_act", "\n", "self", ".", "intermediate_size", "=", "intermediate_size", "\n", "self", ".", "hidden_dropout_prob", "=", "hidden_dropout_prob", "\n", "self", ".", "attention_probs_dropout_prob", "=", "attention_probs_dropout_prob", "\n", "self", ".", "max_position_embeddings", "=", "max_position_embeddings", "\n", "self", ".", "type_vocab_size", "=", "type_vocab_size", "\n", "self", ".", "initializer_range", "=", "initializer_range", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.BertConfig.from_dict": [[82, 89], ["modeling.BertConfig", "six.iteritems"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_dict", "(", "cls", ",", "json_object", ")", ":", "\n", "        ", "\"\"\"Constructs a `BertConfig` from a Python dictionary of parameters.\"\"\"", "\n", "config", "=", "BertConfig", "(", "vocab_size", "=", "None", ")", "\n", "for", "(", "key", ",", "value", ")", "in", "six", ".", "iteritems", "(", "json_object", ")", ":", "\n", "            ", "config", ".", "__dict__", "[", "key", "]", "=", "value", "\n", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.BertConfig.from_json_file": [[90, 96], ["cls.from_dict", "tensorflow.gfile.GFile", "reader.read", "json.loads"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.BertConfig.from_dict", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile.LineFileReader.read"], ["", "@", "classmethod", "\n", "def", "from_json_file", "(", "cls", ",", "json_file", ")", ":", "\n", "        ", "\"\"\"Constructs a `BertConfig` from a json file of parameters.\"\"\"", "\n", "with", "tf", ".", "gfile", ".", "GFile", "(", "json_file", ",", "\"r\"", ")", "as", "reader", ":", "\n", "            ", "text", "=", "reader", ".", "read", "(", ")", "\n", "", "return", "cls", ".", "from_dict", "(", "json", ".", "loads", "(", "text", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.BertConfig.to_dict": [[97, 101], ["copy.deepcopy"], "methods", ["None"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Serializes this instance to a Python dictionary.\"\"\"", "\n", "output", "=", "copy", ".", "deepcopy", "(", "self", ".", "__dict__", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.BertConfig.to_json_string": [[102, 105], ["json.dumps", "modeling.BertConfig.to_dict"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.BertConfig.to_dict"], ["", "def", "to_json_string", "(", "self", ")", ":", "\n", "        ", "\"\"\"Serializes this instance to a JSON string.\"\"\"", "\n", "return", "json", ".", "dumps", "(", "self", ".", "to_dict", "(", ")", ",", "indent", "=", "2", ",", "sort_keys", "=", "True", ")", "+", "\"\\n\"", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.BertModel.__init__": [[131, 238], ["copy.deepcopy", "modeling.get_shape_list", "tensorflow.to_float", "tensorflow.to_float", "tensorflow.ones", "tensorflow.zeros", "tensorflow.variable_scope", "tensorflow.variable_scope", "modeling.embedding_lookup", "modeling.embedding_postprocessor", "tensorflow.variable_scope", "modeling.create_attention_mask_from_input_mask", "modeling.transformer_model", "tensorflow.variable_scope", "tensorflow.squeeze", "tensorflow.layers.dense", "modeling.get_activation", "modeling.create_initializer"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.get_shape_list", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.embedding_lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.embedding_postprocessor", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.create_attention_mask_from_input_mask", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.transformer_model", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.get_activation", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.create_initializer"], ["def", "__init__", "(", "self", ",", "\n", "config", ",", "\n", "is_training", ",", "\n", "input_ids", ",", "\n", "input_mask", "=", "None", ",", "\n", "token_type_ids", "=", "None", ",", "\n", "use_one_hot_embeddings", "=", "True", ",", "\n", "scope", "=", "None", ")", ":", "\n", "        ", "\"\"\"Constructor for BertModel.\n\n        Args:\n          config: `BertConfig` instance.\n          is_training: bool. rue for training model, false for eval model. Controls\n            whether dropout will be applied.\n          input_ids: int32 Tensor of shape [batch_size, seq_length].\n          input_mask: (optional) int32 Tensor of shape [batch_size, seq_length].\n          token_type_ids: (optional) int32 Tensor of shape [batch_size, seq_length].\n          use_one_hot_embeddings: (optional) bool. Whether to use one-hot word\n            embeddings or tf.embedding_lookup() for the word embeddings. On the TPU,\n            it is must faster if this is True, on the CPU or GPU, it is faster if\n            this is False.\n          scope: (optional) variable scope. Defaults to \"bert\".\n\n        Raises:\n          ValueError: The config is invalid or one of the input tensor shapes\n            is invalid.\n        \"\"\"", "\n", "config", "=", "copy", ".", "deepcopy", "(", "config", ")", "\n", "config", ".", "hidden_dropout_prob", "=", "tf", ".", "to_float", "(", "is_training", ")", "*", "config", ".", "hidden_dropout_prob", "\n", "config", ".", "attention_probs_dropout_prob", "=", "tf", ".", "to_float", "(", "is_training", ")", "*", "config", ".", "attention_probs_dropout_prob", "\n", "# config.hidden_dropout_prob = tf.Print(config.hidden_dropout_prob, [config.hidden_dropout_prob], 'hdden')", "\n", "# if not is_training:", "\n", "# config.hidden_dropout_prob = 0.0", "\n", "# config.attention_probs_dropout_prob = 0.0", "\n", "\n", "input_shape", "=", "get_shape_list", "(", "input_ids", ",", "expected_rank", "=", "2", ")", "\n", "batch_size", "=", "input_shape", "[", "0", "]", "\n", "seq_length", "=", "input_shape", "[", "1", "]", "\n", "\n", "if", "input_mask", "is", "None", ":", "\n", "            ", "input_mask", "=", "tf", ".", "ones", "(", "shape", "=", "[", "batch_size", ",", "seq_length", "]", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "\n", "", "if", "token_type_ids", "is", "None", ":", "\n", "            ", "token_type_ids", "=", "tf", ".", "zeros", "(", "shape", "=", "[", "batch_size", ",", "seq_length", "]", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "scope", ",", "default_name", "=", "\"bert\"", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "\"embeddings\"", ")", ":", "\n", "# Perform embedding lookup on the word ids.", "\n", "                ", "(", "self", ".", "embedding_output", ",", "self", ".", "embedding_table", ")", "=", "embedding_lookup", "(", "\n", "input_ids", "=", "input_ids", ",", "\n", "vocab_size", "=", "config", ".", "vocab_size", ",", "\n", "embedding_size", "=", "config", ".", "hidden_size", ",", "\n", "initializer_range", "=", "config", ".", "initializer_range", ",", "\n", "word_embedding_name", "=", "\"word_embeddings\"", ",", "\n", "use_one_hot_embeddings", "=", "use_one_hot_embeddings", ")", "\n", "\n", "# Add positional embeddings and token type embeddings, then layer", "\n", "# normalize and perform dropout.", "\n", "self", ".", "embedding_output", "=", "embedding_postprocessor", "(", "\n", "input_tensor", "=", "self", ".", "embedding_output", ",", "\n", "use_token_type", "=", "True", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "token_type_vocab_size", "=", "config", ".", "type_vocab_size", ",", "\n", "token_type_embedding_name", "=", "\"token_type_embeddings\"", ",", "\n", "use_position_embeddings", "=", "True", ",", "\n", "position_embedding_name", "=", "\"position_embeddings\"", ",", "\n", "initializer_range", "=", "config", ".", "initializer_range", ",", "\n", "max_position_embeddings", "=", "config", ".", "max_position_embeddings", ",", "\n", "dropout_prob", "=", "config", ".", "hidden_dropout_prob", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"encoder\"", ")", ":", "\n", "# This converts a 2D mask of shape [batch_size, seq_length] to a 3D", "\n", "# mask of shape [batch_size, seq_length, seq_length] which is used", "\n", "# for the attention scores.", "\n", "                ", "attention_mask", "=", "create_attention_mask_from_input_mask", "(", "\n", "input_ids", ",", "input_mask", ")", "\n", "\n", "# Run the stacked transformer.", "\n", "# `sequence_output` shape = [batch_size, seq_length, hidden_size].", "\n", "self", ".", "all_encoder_layers", "=", "transformer_model", "(", "\n", "input_tensor", "=", "self", ".", "embedding_output", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "hidden_size", "=", "config", ".", "hidden_size", ",", "\n", "num_hidden_layers", "=", "config", ".", "num_hidden_layers", ",", "\n", "num_attention_heads", "=", "config", ".", "num_attention_heads", ",", "\n", "intermediate_size", "=", "config", ".", "intermediate_size", ",", "\n", "intermediate_act_fn", "=", "get_activation", "(", "config", ".", "hidden_act", ")", ",", "\n", "hidden_dropout_prob", "=", "config", ".", "hidden_dropout_prob", ",", "\n", "attention_probs_dropout_prob", "=", "config", ".", "attention_probs_dropout_prob", ",", "\n", "initializer_range", "=", "config", ".", "initializer_range", ",", "\n", "do_return_all_layers", "=", "True", ")", "\n", "\n", "", "self", ".", "sequence_output", "=", "self", ".", "all_encoder_layers", "[", "-", "1", "]", "\n", "# The \"pooler\" converts the encoded sequence tensor of shape", "\n", "# [batch_size, seq_length, hidden_size] to a tensor of shape", "\n", "# [batch_size, hidden_size]. This is necessary for segment-level", "\n", "# (or segment-pair-level) classification tasks where we need a fixed", "\n", "# dimensional representation of the segment.", "\n", "with", "tf", ".", "variable_scope", "(", "\"pooler\"", ")", ":", "\n", "# We \"pool\" the model by simply taking the hidden state corresponding", "\n", "# to the first token. We assume that this has been pre-trained", "\n", "                ", "first_token_tensor", "=", "tf", ".", "squeeze", "(", "self", ".", "sequence_output", "[", ":", ",", "0", ":", "1", ",", ":", "]", ",", "axis", "=", "1", ")", "\n", "self", ".", "pooled_output", "=", "tf", ".", "layers", ".", "dense", "(", "\n", "first_token_tensor", ",", "\n", "config", ".", "hidden_size", ",", "\n", "activation", "=", "tf", ".", "tanh", ",", "\n", "kernel_initializer", "=", "create_initializer", "(", "config", ".", "initializer_range", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.BertModel.get_pooled_output": [[239, 241], ["None"], "methods", ["None"], ["", "", "", "def", "get_pooled_output", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "pooled_output", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.BertModel.get_sequence_output": [[242, 250], ["None"], "methods", ["None"], ["", "def", "get_sequence_output", "(", "self", ")", ":", "\n", "        ", "\"\"\"Gets final hidden layer of encoder.\n\n        Returns:\n          float Tensor of shape [batch_size, seq_length, hidden_size] corresponding\n          to the final hidden of the transformer encoder.\n        \"\"\"", "\n", "return", "self", ".", "sequence_output", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.BertModel.get_all_encoder_layers": [[251, 253], ["None"], "methods", ["None"], ["", "def", "get_all_encoder_layers", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "all_encoder_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.BertModel.get_embedding_output": [[254, 264], ["None"], "methods", ["None"], ["", "def", "get_embedding_output", "(", "self", ")", ":", "\n", "        ", "\"\"\"Gets output of the embedding lookup (i.e., input to the transformer).\n\n        Returns:\n          float Tensor of shape [batch_size, seq_length, hidden_size] corresponding\n          to the output of the embedding layer, after summing the word\n          embeddings with the positional embeddings and the token type embeddings,\n          then performing layer normalization. This is the input to the transformer.\n        \"\"\"", "\n", "return", "self", ".", "embedding_output", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.BertModel.get_embedding_table": [[265, 267], ["None"], "methods", ["None"], ["", "def", "get_embedding_table", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "embedding_table", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.gelu": [[269, 283], ["tensorflow.erf", "tensorflow.sqrt"], "function", ["None"], ["", "", "def", "gelu", "(", "input_tensor", ")", ":", "\n", "    ", "\"\"\"Gaussian Error Linear Unit.\n\n    This is a smoother version of the RELU.\n    Original paper: https://arxiv.org/abs/1606.08415\n\n    Args:\n      input_tensor: float Tensor to perform activation.\n\n    Returns:\n      `input_tensor` with the GELU activation applied.\n    \"\"\"", "\n", "cdf", "=", "0.5", "*", "(", "1.0", "+", "tf", ".", "erf", "(", "input_tensor", "/", "tf", ".", "sqrt", "(", "2.0", ")", ")", ")", "\n", "return", "input_tensor", "*", "cdf", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.get_activation": [[285, 320], ["activation_string.lower", "isinstance", "ValueError"], "function", ["None"], ["", "def", "get_activation", "(", "activation_string", ")", ":", "\n", "    ", "\"\"\"Maps a string to a Python function, e.g., \"relu\" => `tf.nn.relu`.\n\n    Args:\n      activation_string: String name of the activation function.\n\n    Returns:\n      A Python function corresponding to the activation function. If\n      `activation_string` is None, empty, or \"linear\", this will return None.\n      If `activation_string` is not a string, it will return `activation_string`.\n\n    Raises:\n      ValueError: The `activation_string` does not correspond to a known\n        activation.\n    \"\"\"", "\n", "\n", "# We assume that anything that\"s not a string is already an activation", "\n", "# function, so we just return it.", "\n", "if", "not", "isinstance", "(", "activation_string", ",", "six", ".", "string_types", ")", ":", "\n", "        ", "return", "activation_string", "\n", "\n", "", "if", "not", "activation_string", ":", "\n", "        ", "return", "None", "\n", "\n", "", "act", "=", "activation_string", ".", "lower", "(", ")", "\n", "if", "act", "==", "\"linear\"", ":", "\n", "        ", "return", "None", "\n", "", "elif", "act", "==", "\"relu\"", ":", "\n", "        ", "return", "tf", ".", "nn", ".", "relu", "\n", "", "elif", "act", "==", "\"gelu\"", ":", "\n", "        ", "return", "gelu", "\n", "", "elif", "act", "==", "\"tanh\"", ":", "\n", "        ", "return", "tf", ".", "tanh", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unsupported activation: %s\"", "%", "act", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.get_assignment_map_from_checkpoint": [[322, 347], ["collections.OrderedDict", "tensorflow.train.list_variables", "collections.OrderedDict", "re.match", "re.match.group"], "function", ["None"], ["", "", "def", "get_assignment_map_from_checkpoint", "(", "tvars", ",", "init_checkpoint", ")", ":", "\n", "    ", "\"\"\"Compute the union of the current variables and checkpoint variables.\"\"\"", "\n", "assignment_map", "=", "{", "}", "\n", "initialized_variable_names", "=", "{", "}", "\n", "\n", "name_to_variable", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "for", "var", "in", "tvars", ":", "\n", "        ", "name", "=", "var", ".", "name", "\n", "m", "=", "re", ".", "match", "(", "\"^(.*):\\\\d+$\"", ",", "name", ")", "\n", "if", "m", "is", "not", "None", ":", "\n", "            ", "name", "=", "m", ".", "group", "(", "1", ")", "\n", "", "name_to_variable", "[", "name", "]", "=", "var", "\n", "\n", "", "init_vars", "=", "tf", ".", "train", ".", "list_variables", "(", "init_checkpoint", ")", "\n", "\n", "assignment_map", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "for", "x", "in", "init_vars", ":", "\n", "        ", "(", "name", ",", "var", ")", "=", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ")", "\n", "if", "name", "not", "in", "name_to_variable", ":", "\n", "            ", "continue", "\n", "", "assignment_map", "[", "name", "]", "=", "name", "\n", "initialized_variable_names", "[", "name", "]", "=", "1", "\n", "initialized_variable_names", "[", "name", "+", "\":0\"", "]", "=", "1", "\n", "\n", "", "return", "(", "assignment_map", ",", "initialized_variable_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.dropout": [[349, 365], ["tensorflow.nn.dropout"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.dropout"], ["", "def", "dropout", "(", "input_tensor", ",", "dropout_prob", ")", ":", "\n", "    ", "\"\"\"Perform dropout.\n\n    Args:\n      input_tensor: float Tensor.\n      dropout_prob: Python float. The probability of dropping out a value (NOT of\n        *keeping* a dimension as in `tf.nn.dropout`).\n\n    Returns:\n      A version of `input_tensor` with dropout applied.\n    \"\"\"", "\n", "if", "dropout_prob", "is", "None", "or", "dropout_prob", "==", "0.0", ":", "\n", "        ", "return", "input_tensor", "\n", "\n", "", "output", "=", "tf", ".", "nn", ".", "dropout", "(", "input_tensor", ",", "1.0", "-", "dropout_prob", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.layer_norm": [[367, 371], ["tensorflow.contrib.layers.layer_norm"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.layer_norm"], ["", "def", "layer_norm", "(", "input_tensor", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Run layer normalization on the last dimension of the tensor.\"\"\"", "\n", "return", "tf", ".", "contrib", ".", "layers", ".", "layer_norm", "(", "\n", "inputs", "=", "input_tensor", ",", "begin_norm_axis", "=", "-", "1", ",", "begin_params_axis", "=", "-", "1", ",", "scope", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.layer_norm_and_dropout": [[373, 378], ["modeling.layer_norm", "modeling.dropout"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.layer_norm", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.dropout"], ["", "def", "layer_norm_and_dropout", "(", "input_tensor", ",", "dropout_prob", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Runs layer normalization followed by dropout.\"\"\"", "\n", "output_tensor", "=", "layer_norm", "(", "input_tensor", ",", "name", ")", "\n", "output_tensor", "=", "dropout", "(", "output_tensor", ",", "dropout_prob", ")", "\n", "return", "output_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.create_initializer": [[380, 383], ["tensorflow.truncated_normal_initializer"], "function", ["None"], ["", "def", "create_initializer", "(", "initializer_range", "=", "0.02", ")", ":", "\n", "    ", "\"\"\"Creates a `truncated_normal_initializer` with the given range.\"\"\"", "\n", "return", "tf", ".", "truncated_normal_initializer", "(", "stddev", "=", "initializer_range", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.embedding_lookup": [[385, 432], ["tensorflow.get_variable", "modeling.get_shape_list", "tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.reshape", "tensorflow.one_hot", "tensorflow.matmul", "tensorflow.nn.embedding_lookup", "modeling.create_initializer"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.get_shape_list", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.embedding_lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.create_initializer"], ["", "def", "embedding_lookup", "(", "input_ids", ",", "\n", "vocab_size", ",", "\n", "embedding_size", "=", "128", ",", "\n", "initializer_range", "=", "0.02", ",", "\n", "word_embedding_name", "=", "\"word_embeddings\"", ",", "\n", "use_one_hot_embeddings", "=", "False", ")", ":", "\n", "    ", "\"\"\"Looks up words embeddings for id tensor.\n\n    Args:\n      input_ids: int32 Tensor of shape [batch_size, seq_length] containing word\n        ids.\n      vocab_size: int. Size of the embedding vocabulary.\n      embedding_size: int. Width of the word embeddings.\n      initializer_range: float. Embedding initialization range.\n      word_embedding_name: string. Name of the embedding table.\n      use_one_hot_embeddings: bool. If True, use one-hot method for word\n        embeddings. If False, use `tf.nn.embedding_lookup()`. One hot is better\n        for TPUs.\n\n    Returns:\n      float Tensor of shape [batch_size, seq_length, embedding_size].\n    \"\"\"", "\n", "# This function assumes that the input is of shape [batch_size, seq_length,", "\n", "# num_inputs].", "\n", "#", "\n", "# If the input is a 2D tensor of shape [batch_size, seq_length], we", "\n", "# reshape to [batch_size, seq_length, 1].", "\n", "if", "input_ids", ".", "shape", ".", "ndims", "==", "2", ":", "\n", "        ", "input_ids", "=", "tf", ".", "expand_dims", "(", "input_ids", ",", "axis", "=", "[", "-", "1", "]", ")", "\n", "\n", "", "embedding_table", "=", "tf", ".", "get_variable", "(", "\n", "name", "=", "word_embedding_name", ",", "\n", "shape", "=", "[", "vocab_size", ",", "embedding_size", "]", ",", "\n", "initializer", "=", "create_initializer", "(", "initializer_range", ")", ")", "\n", "\n", "if", "use_one_hot_embeddings", ":", "\n", "        ", "flat_input_ids", "=", "tf", ".", "reshape", "(", "input_ids", ",", "[", "-", "1", "]", ")", "\n", "one_hot_input_ids", "=", "tf", ".", "one_hot", "(", "flat_input_ids", ",", "depth", "=", "vocab_size", ")", "\n", "output", "=", "tf", ".", "matmul", "(", "one_hot_input_ids", ",", "embedding_table", ")", "\n", "", "else", ":", "\n", "        ", "output", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "embedding_table", ",", "input_ids", ")", "\n", "\n", "", "input_shape", "=", "get_shape_list", "(", "input_ids", ")", "\n", "\n", "output", "=", "tf", ".", "reshape", "(", "output", ",", "\n", "input_shape", "[", "0", ":", "-", "1", "]", "+", "[", "input_shape", "[", "-", "1", "]", "*", "embedding_size", "]", ")", "\n", "return", "(", "output", ",", "embedding_table", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.embedding_postprocessor": [[434, 528], ["modeling.get_shape_list", "modeling.layer_norm_and_dropout", "tensorflow.get_variable", "tensorflow.reshape", "tensorflow.one_hot", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.assert_less_equal", "ValueError", "tensorflow.control_dependencies", "tensorflow.get_variable", "tensorflow.slice", "len", "range", "position_broadcast_shape.extend", "tensorflow.reshape", "modeling.create_initializer", "layer_norm_and_dropout.shape.as_list", "position_broadcast_shape.append", "modeling.create_initializer"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.get_shape_list", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.layer_norm_and_dropout", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.create_initializer", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.create_initializer"], ["", "def", "embedding_postprocessor", "(", "input_tensor", ",", "\n", "use_token_type", "=", "False", ",", "\n", "token_type_ids", "=", "None", ",", "\n", "token_type_vocab_size", "=", "16", ",", "\n", "token_type_embedding_name", "=", "\"token_type_embeddings\"", ",", "\n", "use_position_embeddings", "=", "True", ",", "\n", "position_embedding_name", "=", "\"position_embeddings\"", ",", "\n", "initializer_range", "=", "0.02", ",", "\n", "max_position_embeddings", "=", "512", ",", "\n", "dropout_prob", "=", "0.1", ")", ":", "\n", "    ", "\"\"\"Performs various post-processing on a word embedding tensor.\n\n    Args:\n      input_tensor: float Tensor of shape [batch_size, seq_length,\n        embedding_size].\n      use_token_type: bool. Whether to add embeddings for `token_type_ids`.\n      token_type_ids: (optional) int32 Tensor of shape [batch_size, seq_length].\n        Must be specified if `use_token_type` is True.\n      token_type_vocab_size: int. The vocabulary size of `token_type_ids`.\n      token_type_embedding_name: string. The name of the embedding table variable\n        for token type ids.\n      use_position_embeddings: bool. Whether to add position embeddings for the\n        position of each token in the sequence.\n      position_embedding_name: string. The name of the embedding table variable\n        for positional embeddings.\n      initializer_range: float. Range of the weight initialization.\n      max_position_embeddings: int. Maximum sequence length that might ever be\n        used with this model. This can be longer than the sequence length of\n        input_tensor, but cannot be shorter.\n      dropout_prob: float. Dropout probability applied to the final output tensor.\n\n    Returns:\n      float tensor with same shape as `input_tensor`.\n\n    Raises:\n      ValueError: One of the tensor shapes or input values is invalid.\n    \"\"\"", "\n", "input_shape", "=", "get_shape_list", "(", "input_tensor", ",", "expected_rank", "=", "3", ")", "\n", "batch_size", "=", "input_shape", "[", "0", "]", "\n", "seq_length", "=", "input_shape", "[", "1", "]", "\n", "width", "=", "input_shape", "[", "2", "]", "\n", "\n", "output", "=", "input_tensor", "\n", "\n", "if", "use_token_type", ":", "\n", "        ", "if", "token_type_ids", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"`token_type_ids` must be specified if\"", "\n", "\"`use_token_type` is True.\"", ")", "\n", "", "token_type_table", "=", "tf", ".", "get_variable", "(", "\n", "name", "=", "token_type_embedding_name", ",", "\n", "shape", "=", "[", "token_type_vocab_size", ",", "width", "]", ",", "\n", "initializer", "=", "create_initializer", "(", "initializer_range", ")", ")", "\n", "# This vocab will be small so we always do one-hot here, since it is always", "\n", "# faster for a small vocabulary.", "\n", "flat_token_type_ids", "=", "tf", ".", "reshape", "(", "token_type_ids", ",", "[", "-", "1", "]", ")", "\n", "one_hot_ids", "=", "tf", ".", "one_hot", "(", "flat_token_type_ids", ",", "depth", "=", "token_type_vocab_size", ")", "\n", "token_type_embeddings", "=", "tf", ".", "matmul", "(", "one_hot_ids", ",", "token_type_table", ")", "\n", "token_type_embeddings", "=", "tf", ".", "reshape", "(", "token_type_embeddings", ",", "\n", "[", "batch_size", ",", "seq_length", ",", "width", "]", ")", "\n", "output", "+=", "token_type_embeddings", "\n", "\n", "", "if", "use_position_embeddings", ":", "\n", "        ", "assert_op", "=", "tf", ".", "assert_less_equal", "(", "seq_length", ",", "max_position_embeddings", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "assert_op", "]", ")", ":", "\n", "            ", "full_position_embeddings", "=", "tf", ".", "get_variable", "(", "\n", "name", "=", "position_embedding_name", ",", "\n", "shape", "=", "[", "max_position_embeddings", ",", "width", "]", ",", "\n", "initializer", "=", "create_initializer", "(", "initializer_range", ")", ")", "\n", "# Since the position embedding table is a learned variable, we create it", "\n", "# using a (long) sequence length `max_position_embeddings`. The actual", "\n", "# sequence length might be shorter than this, for faster training of", "\n", "# tasks that do not have long sequences.", "\n", "#", "\n", "# So `full_position_embeddings` is effectively an embedding table", "\n", "# for position [0, 1, 2, ..., max_position_embeddings-1], and the current", "\n", "# sequence has positions [0, 1, 2, ... seq_length-1], so we can just", "\n", "# perform a slice.", "\n", "position_embeddings", "=", "tf", ".", "slice", "(", "full_position_embeddings", ",", "[", "0", ",", "0", "]", ",", "\n", "[", "seq_length", ",", "-", "1", "]", ")", "\n", "num_dims", "=", "len", "(", "output", ".", "shape", ".", "as_list", "(", ")", ")", "\n", "\n", "# Only the last two dimensions are relevant (`seq_length` and `width`), so", "\n", "# we broadcast among the first dimensions, which is typically just", "\n", "# the batch size.", "\n", "position_broadcast_shape", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "num_dims", "-", "2", ")", ":", "\n", "                ", "position_broadcast_shape", ".", "append", "(", "1", ")", "\n", "", "position_broadcast_shape", ".", "extend", "(", "[", "seq_length", ",", "width", "]", ")", "\n", "position_embeddings", "=", "tf", ".", "reshape", "(", "position_embeddings", ",", "\n", "position_broadcast_shape", ")", "\n", "output", "+=", "position_embeddings", "\n", "\n", "", "", "output", "=", "layer_norm_and_dropout", "(", "output", ",", "dropout_prob", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.create_attention_mask_from_input_mask": [[530, 562], ["modeling.get_shape_list", "modeling.get_shape_list", "tensorflow.cast", "tensorflow.ones", "tensorflow.reshape"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.get_shape_list", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.get_shape_list"], ["", "def", "create_attention_mask_from_input_mask", "(", "from_tensor", ",", "to_mask", ")", ":", "\n", "    ", "\"\"\"Create 3D attention mask from a 2D tensor mask.\n\n    Args:\n      from_tensor: 2D or 3D Tensor of shape [batch_size, from_seq_length, ...].\n      to_mask: int32 Tensor of shape [batch_size, to_seq_length].\n\n    Returns:\n      float Tensor of shape [batch_size, from_seq_length, to_seq_length].\n    \"\"\"", "\n", "from_shape", "=", "get_shape_list", "(", "from_tensor", ",", "expected_rank", "=", "[", "2", ",", "3", "]", ")", "\n", "batch_size", "=", "from_shape", "[", "0", "]", "\n", "from_seq_length", "=", "from_shape", "[", "1", "]", "\n", "\n", "to_shape", "=", "get_shape_list", "(", "to_mask", ",", "expected_rank", "=", "2", ")", "\n", "to_seq_length", "=", "to_shape", "[", "1", "]", "\n", "\n", "to_mask", "=", "tf", ".", "cast", "(", "\n", "tf", ".", "reshape", "(", "to_mask", ",", "[", "batch_size", ",", "1", ",", "to_seq_length", "]", ")", ",", "tf", ".", "float32", ")", "\n", "\n", "# We don't assume that `from_tensor` is a mask (although it could be). We", "\n", "# don't actually care if we attend *from* padding tokens (only *to* padding)", "\n", "# tokens so we create a tensor of all ones.", "\n", "#", "\n", "# `broadcast_ones` = [batch_size, from_seq_length, 1]", "\n", "broadcast_ones", "=", "tf", ".", "ones", "(", "\n", "shape", "=", "[", "batch_size", ",", "from_seq_length", ",", "1", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "# Here we broadcast along two dimensions to create the mask.", "\n", "mask", "=", "broadcast_ones", "*", "to_mask", "\n", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.attention_layer": [[564, 758], ["modeling.get_shape_list", "modeling.get_shape_list", "modeling.reshape_to_matrix", "modeling.reshape_to_matrix", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.layers.dense", "modeling.attention_layer.transpose_for_scores"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.get_shape_list", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.get_shape_list", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.reshape_to_matrix", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.reshape_to_matrix", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test1.MySelfAttention.transpose_for_scores"], ["", "def", "attention_layer", "(", "from_tensor", ",", "\n", "to_tensor", ",", "\n", "attention_mask", "=", "None", ",", "\n", "num_attention_heads", "=", "1", ",", "\n", "size_per_head", "=", "512", ",", "\n", "query_act", "=", "None", ",", "\n", "key_act", "=", "None", ",", "\n", "value_act", "=", "None", ",", "\n", "attention_probs_dropout_prob", "=", "0.0", ",", "\n", "initializer_range", "=", "0.02", ",", "\n", "do_return_2d_tensor", "=", "False", ",", "\n", "batch_size", "=", "None", ",", "\n", "from_seq_length", "=", "None", ",", "\n", "to_seq_length", "=", "None", ")", ":", "\n", "    ", "\"\"\"Performs multi-headed attention from `from_tensor` to `to_tensor`.\n\n    This is an implementation of multi-headed attention based on \"Attention\n    is all you Need\". If `from_tensor` and `to_tensor` are the same, then\n    this is self-attention. Each timestep in `from_tensor` attends to the\n    corresponding sequence in `to_tensor`, and returns a fixed-with vector.\n\n    This function first projects `from_tensor` into a \"query\" tensor and\n    `to_tensor` into \"key\" and \"value\" tensors. These are (effectively) a list\n    of tensors of length `num_attention_heads`, where each tensor is of shape\n    [batch_size, seq_length, size_per_head].\n\n    Then, the query and key tensors are dot-producted and scaled. These are\n    softmaxed to obtain attention probabilities. The value tensors are then\n    interpolated by these probabilities, then concatenated back to a single\n    tensor and returned.\n\n    In practice, the multi-headed attention are done with transposes and\n    reshapes rather than actual separate tensors.\n\n    Args:\n      from_tensor: float Tensor of shape [batch_size, from_seq_length,\n        from_width].\n      to_tensor: float Tensor of shape [batch_size, to_seq_length, to_width].\n      attention_mask: (optional) int32 Tensor of shape [batch_size,\n        from_seq_length, to_seq_length]. The values should be 1 or 0. The\n        attention scores will effectively be set to -infinity for any positions in\n        the mask that are 0, and will be unchanged for positions that are 1.\n      num_attention_heads: int. Number of attention heads.\n      size_per_head: int. Size of each attention head.\n      query_act: (optional) Activation function for the query transform.\n      key_act: (optional) Activation function for the key transform.\n      value_act: (optional) Activation function for the value transform.\n      attention_probs_dropout_prob: (optional) float. Dropout probability of the\n        attention probabilities.\n      initializer_range: float. Range of the weight initializer.\n      do_return_2d_tensor: bool. If True, the output will be of shape [batch_size\n        * from_seq_length, num_attention_heads * size_per_head]. If False, the\n        output will be of shape [batch_size, from_seq_length, num_attention_heads\n        * size_per_head].\n      batch_size: (Optional) int. If the input is 2D, this might be the batch size\n        of the 3D version of the `from_tensor` and `to_tensor`.\n      from_seq_length: (Optional) If the input is 2D, this might be the seq length\n        of the 3D version of the `from_tensor`.\n      to_seq_length: (Optional) If the input is 2D, this might be the seq length\n        of the 3D version of the `to_tensor`.\n\n    Returns:\n      float Tensor of shape [batch_size, from_seq_length,\n        num_attention_heads * size_per_head]. (If `do_return_2d_tensor` is\n        true, this will be of shape [batch_size * from_seq_length,\n        num_attention_heads * size_per_head]).\n\n    Raises:\n      ValueError: Any of the arguments or tensor shapes are invalid.\n    \"\"\"", "\n", "\n", "def", "transpose_for_scores", "(", "input_tensor", ",", "batch_size", ",", "num_attention_heads", ",", "\n", "seq_length", ",", "width", ")", ":", "\n", "        ", "output_tensor", "=", "tf", ".", "reshape", "(", "\n", "input_tensor", ",", "[", "batch_size", ",", "seq_length", ",", "num_attention_heads", ",", "width", "]", ")", "\n", "\n", "output_tensor", "=", "tf", ".", "transpose", "(", "output_tensor", ",", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "\n", "return", "output_tensor", "\n", "\n", "", "from_shape", "=", "get_shape_list", "(", "from_tensor", ",", "expected_rank", "=", "[", "2", ",", "3", "]", ")", "\n", "to_shape", "=", "get_shape_list", "(", "to_tensor", ",", "expected_rank", "=", "[", "2", ",", "3", "]", ")", "\n", "\n", "if", "len", "(", "from_shape", ")", "!=", "len", "(", "to_shape", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"The rank of `from_tensor` must match the rank of `to_tensor`.\"", ")", "\n", "\n", "", "if", "len", "(", "from_shape", ")", "==", "3", ":", "\n", "        ", "batch_size", "=", "from_shape", "[", "0", "]", "\n", "from_seq_length", "=", "from_shape", "[", "1", "]", "\n", "to_seq_length", "=", "to_shape", "[", "1", "]", "\n", "", "elif", "len", "(", "from_shape", ")", "==", "2", ":", "\n", "        ", "if", "(", "batch_size", "is", "None", "or", "from_seq_length", "is", "None", "or", "to_seq_length", "is", "None", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"When passing in rank 2 tensors to attention_layer, the values \"", "\n", "\"for `batch_size`, `from_seq_length`, and `to_seq_length` \"", "\n", "\"must all be specified.\"", ")", "\n", "\n", "# Scalar dimensions referenced here:", "\n", "#   B = batch size (number of sequences)", "\n", "#   F = `from_tensor` sequence length", "\n", "#   T = `to_tensor` sequence length", "\n", "#   N = `num_attention_heads`", "\n", "#   H = `size_per_head`", "\n", "\n", "", "", "from_tensor_2d", "=", "reshape_to_matrix", "(", "from_tensor", ")", "\n", "to_tensor_2d", "=", "reshape_to_matrix", "(", "to_tensor", ")", "\n", "\n", "# `query_layer` = [B*F, N*H]", "\n", "query_layer", "=", "tf", ".", "layers", ".", "dense", "(", "\n", "from_tensor_2d", ",", "\n", "num_attention_heads", "*", "size_per_head", ",", "\n", "activation", "=", "query_act", ",", "\n", "name", "=", "\"query\"", ",", "\n", "kernel_initializer", "=", "create_initializer", "(", "initializer_range", ")", ")", "\n", "\n", "# `key_layer` = [B*T, N*H]", "\n", "key_layer", "=", "tf", ".", "layers", ".", "dense", "(", "\n", "to_tensor_2d", ",", "\n", "num_attention_heads", "*", "size_per_head", ",", "\n", "activation", "=", "key_act", ",", "\n", "name", "=", "\"key\"", ",", "\n", "kernel_initializer", "=", "create_initializer", "(", "initializer_range", ")", ")", "\n", "\n", "# `value_layer` = [B*T, N*H]", "\n", "value_layer", "=", "tf", ".", "layers", ".", "dense", "(", "\n", "to_tensor_2d", ",", "\n", "num_attention_heads", "*", "size_per_head", ",", "\n", "activation", "=", "value_act", ",", "\n", "name", "=", "\"value\"", ",", "\n", "kernel_initializer", "=", "create_initializer", "(", "initializer_range", ")", ")", "\n", "\n", "# `query_layer` = [B, N, F, H]", "\n", "query_layer", "=", "transpose_for_scores", "(", "query_layer", ",", "batch_size", ",", "\n", "num_attention_heads", ",", "from_seq_length", ",", "\n", "size_per_head", ")", "\n", "\n", "# `key_layer` = [B, N, T, H]", "\n", "key_layer", "=", "transpose_for_scores", "(", "key_layer", ",", "batch_size", ",", "num_attention_heads", ",", "\n", "to_seq_length", ",", "size_per_head", ")", "\n", "\n", "# Take the dot product between \"query\" and \"key\" to get the raw", "\n", "# attention scores.", "\n", "# `attention_scores` = [B, N, F, T]", "\n", "attention_scores", "=", "tf", ".", "matmul", "(", "query_layer", ",", "key_layer", ",", "transpose_b", "=", "True", ")", "\n", "attention_scores", "=", "tf", ".", "multiply", "(", "attention_scores", ",", "\n", "1.0", "/", "math", ".", "sqrt", "(", "float", "(", "size_per_head", ")", ")", ")", "\n", "\n", "if", "attention_mask", "is", "not", "None", ":", "\n", "# `attention_mask` = [B, 1, F, T]", "\n", "        ", "attention_mask", "=", "tf", ".", "expand_dims", "(", "attention_mask", ",", "axis", "=", "[", "1", "]", ")", "\n", "\n", "# Since attention_mask is 1.0 for positions we want to attend and 0.0 for", "\n", "# masked positions, this operation will create a tensor which is 0.0 for", "\n", "# positions we want to attend and -10000.0 for masked positions.", "\n", "adder", "=", "(", "1.0", "-", "tf", ".", "cast", "(", "attention_mask", ",", "tf", ".", "float32", ")", ")", "*", "-", "10000.0", "\n", "\n", "# Since we are adding it to the raw scores before the softmax, this is", "\n", "# effectively the same as removing these entirely.", "\n", "attention_scores", "+=", "adder", "\n", "\n", "# Normalize the attention scores to probabilities.", "\n", "# `attention_probs` = [B, N, F, T]", "\n", "", "attention_probs", "=", "tf", ".", "nn", ".", "softmax", "(", "attention_scores", ")", "\n", "\n", "# This is actually dropping out entire tokens to attend to, which might", "\n", "# seem a bit unusual, but is taken from the original Transformer paper.", "\n", "attention_probs", "=", "dropout", "(", "attention_probs", ",", "attention_probs_dropout_prob", ")", "\n", "\n", "# `value_layer` = [B, T, N, H]", "\n", "value_layer", "=", "tf", ".", "reshape", "(", "\n", "value_layer", ",", "\n", "[", "batch_size", ",", "to_seq_length", ",", "num_attention_heads", ",", "size_per_head", "]", ")", "\n", "\n", "# `value_layer` = [B, N, T, H]", "\n", "value_layer", "=", "tf", ".", "transpose", "(", "value_layer", ",", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "\n", "\n", "# `context_layer` = [B, N, F, H]", "\n", "context_layer", "=", "tf", ".", "matmul", "(", "attention_probs", ",", "value_layer", ")", "\n", "\n", "# `context_layer` = [B, F, N, H]", "\n", "context_layer", "=", "tf", ".", "transpose", "(", "context_layer", ",", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "\n", "\n", "if", "do_return_2d_tensor", ":", "\n", "# `context_layer` = [B*F, N*V]", "\n", "        ", "context_layer", "=", "tf", ".", "reshape", "(", "\n", "context_layer", ",", "\n", "[", "batch_size", "*", "from_seq_length", ",", "num_attention_heads", "*", "size_per_head", "]", ")", "\n", "", "else", ":", "\n", "# `context_layer` = [B, F, N*V]", "\n", "        ", "context_layer", "=", "tf", ".", "reshape", "(", "\n", "context_layer", ",", "\n", "[", "batch_size", ",", "from_seq_length", ",", "num_attention_heads", "*", "size_per_head", "]", ")", "\n", "\n", "", "return", "context_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.transformer_model": [[760, 899], ["int", "modeling.get_shape_list", "modeling.reshape_to_matrix", "range", "ValueError", "ValueError", "modeling.reshape_from_matrix", "tensorflow.variable_scope", "modeling.reshape_from_matrix", "final_outputs.append", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.layers.dense", "tensorflow.variable_scope", "tensorflow.layers.dense", "modeling.dropout", "modeling.layer_norm", "all_layer_outputs.append", "tensorflow.variable_scope", "modeling.attention_layer", "attention_heads.append", "len", "tensorflow.concat", "tensorflow.variable_scope", "tensorflow.layers.dense", "modeling.dropout", "modeling.layer_norm", "modeling.create_initializer", "modeling.create_initializer", "modeling.create_initializer"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.get_shape_list", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.reshape_to_matrix", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.reshape_from_matrix", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.reshape_from_matrix", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.dropout", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.layer_norm", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.attention_layer", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.dropout", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.layer_norm", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.create_initializer", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.create_initializer", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.create_initializer"], ["", "def", "transformer_model", "(", "input_tensor", ",", "\n", "attention_mask", "=", "None", ",", "\n", "hidden_size", "=", "768", ",", "\n", "num_hidden_layers", "=", "12", ",", "\n", "num_attention_heads", "=", "12", ",", "\n", "intermediate_size", "=", "3072", ",", "\n", "intermediate_act_fn", "=", "gelu", ",", "\n", "hidden_dropout_prob", "=", "0.1", ",", "\n", "attention_probs_dropout_prob", "=", "0.1", ",", "\n", "initializer_range", "=", "0.02", ",", "\n", "do_return_all_layers", "=", "False", ")", ":", "\n", "    ", "\"\"\"Multi-headed, multi-layer Transformer from \"Attention is All You Need\".\n\n    This is almost an exact implementation of the original Transformer encoder.\n\n    See the original paper:\n    https://arxiv.org/abs/1706.03762\n\n    Also see:\n    https://github.com/tensorflow/tensor2tensor/blob/master/tensor2tensor/models/transformer.py\n\n    Args:\n      input_tensor: float Tensor of shape [batch_size, seq_length, hidden_size].\n      attention_mask: (optional) int32 Tensor of shape [batch_size, seq_length,\n        seq_length], with 1 for positions that can be attended to and 0 in\n        positions that should not be.\n      hidden_size: int. Hidden size of the Transformer.\n      num_hidden_layers: int. Number of layers (blocks) in the Transformer.\n      num_attention_heads: int. Number of attention heads in the Transformer.\n      intermediate_size: int. The size of the \"intermediate\" (a.k.a., feed\n        forward) layer.\n      intermediate_act_fn: function. The non-linear activation function to apply\n        to the output of the intermediate/feed-forward layer.\n      hidden_dropout_prob: float. Dropout probability for the hidden layers.\n      attention_probs_dropout_prob: float. Dropout probability of the attention\n        probabilities.\n      initializer_range: float. Range of the initializer (stddev of truncated\n        normal).\n      do_return_all_layers: Whether to also return all layers or just the final\n        layer.\n\n    Returns:\n      float Tensor of shape [batch_size, seq_length, hidden_size], the final\n      hidden layer of the Transformer.\n\n    Raises:\n      ValueError: A Tensor shape or parameter is invalid.\n    \"\"\"", "\n", "if", "hidden_size", "%", "num_attention_heads", "!=", "0", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"The hidden size (%d) is not a multiple of the number of attention \"", "\n", "\"heads (%d)\"", "%", "(", "hidden_size", ",", "num_attention_heads", ")", ")", "\n", "\n", "", "attention_head_size", "=", "int", "(", "hidden_size", "/", "num_attention_heads", ")", "\n", "input_shape", "=", "get_shape_list", "(", "input_tensor", ",", "expected_rank", "=", "3", ")", "\n", "batch_size", "=", "input_shape", "[", "0", "]", "\n", "seq_length", "=", "input_shape", "[", "1", "]", "\n", "input_width", "=", "input_shape", "[", "2", "]", "\n", "\n", "# The Transformer performs sum residuals on all layers so the input needs", "\n", "# to be the same as the hidden size.", "\n", "if", "input_width", "!=", "hidden_size", ":", "\n", "        ", "raise", "ValueError", "(", "\"The width of the input tensor (%d) != hidden size (%d)\"", "%", "\n", "(", "input_width", ",", "hidden_size", ")", ")", "\n", "\n", "# We keep the representation as a 2D tensor to avoid re-shaping it back and", "\n", "# forth from a 3D tensor to a 2D tensor. Re-shapes are normally free on", "\n", "# the GPU/CPU but may not be free on the TPU, so we want to minimize them to", "\n", "# help the optimizer.", "\n", "", "prev_output", "=", "reshape_to_matrix", "(", "input_tensor", ")", "\n", "\n", "all_layer_outputs", "=", "[", "]", "\n", "for", "layer_idx", "in", "range", "(", "num_hidden_layers", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "\"layer_%d\"", "%", "layer_idx", ")", ":", "\n", "            ", "layer_input", "=", "prev_output", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"attention\"", ")", ":", "\n", "                ", "attention_heads", "=", "[", "]", "\n", "with", "tf", ".", "variable_scope", "(", "\"self\"", ")", ":", "\n", "                    ", "attention_head", "=", "attention_layer", "(", "\n", "from_tensor", "=", "layer_input", ",", "\n", "to_tensor", "=", "layer_input", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "num_attention_heads", "=", "num_attention_heads", ",", "\n", "size_per_head", "=", "attention_head_size", ",", "\n", "attention_probs_dropout_prob", "=", "attention_probs_dropout_prob", ",", "\n", "initializer_range", "=", "initializer_range", ",", "\n", "do_return_2d_tensor", "=", "True", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "from_seq_length", "=", "seq_length", ",", "\n", "to_seq_length", "=", "seq_length", ")", "\n", "attention_heads", ".", "append", "(", "attention_head", ")", "\n", "\n", "", "attention_output", "=", "None", "\n", "if", "len", "(", "attention_heads", ")", "==", "1", ":", "\n", "                    ", "attention_output", "=", "attention_heads", "[", "0", "]", "\n", "", "else", ":", "\n", "# In the case where we have other sequences, we just concatenate", "\n", "# them to the self-attention head before the projection.", "\n", "                    ", "attention_output", "=", "tf", ".", "concat", "(", "attention_heads", ",", "axis", "=", "-", "1", ")", "\n", "\n", "# Run a linear projection of `hidden_size` then add a residual", "\n", "# with `layer_input`.", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"output\"", ")", ":", "\n", "                    ", "attention_output", "=", "tf", ".", "layers", ".", "dense", "(", "\n", "attention_output", ",", "\n", "hidden_size", ",", "\n", "kernel_initializer", "=", "create_initializer", "(", "initializer_range", ")", ")", "\n", "attention_output", "=", "dropout", "(", "attention_output", ",", "hidden_dropout_prob", ")", "\n", "attention_output", "=", "layer_norm", "(", "attention_output", "+", "layer_input", ")", "\n", "\n", "# The activation is only applied to the \"intermediate\" hidden layer.", "\n", "", "", "with", "tf", ".", "variable_scope", "(", "\"intermediate\"", ")", ":", "\n", "                ", "intermediate_output", "=", "tf", ".", "layers", ".", "dense", "(", "\n", "attention_output", ",", "\n", "intermediate_size", ",", "\n", "activation", "=", "intermediate_act_fn", ",", "\n", "kernel_initializer", "=", "create_initializer", "(", "initializer_range", ")", ")", "\n", "\n", "# Down-project back to `hidden_size` then add the residual.", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"output\"", ")", ":", "\n", "                ", "layer_output", "=", "tf", ".", "layers", ".", "dense", "(", "\n", "intermediate_output", ",", "\n", "hidden_size", ",", "\n", "kernel_initializer", "=", "create_initializer", "(", "initializer_range", ")", ")", "\n", "layer_output", "=", "dropout", "(", "layer_output", ",", "hidden_dropout_prob", ")", "\n", "layer_output", "=", "layer_norm", "(", "layer_output", "+", "attention_output", ")", "\n", "prev_output", "=", "layer_output", "\n", "all_layer_outputs", ".", "append", "(", "layer_output", ")", "\n", "\n", "", "", "", "if", "do_return_all_layers", ":", "\n", "        ", "final_outputs", "=", "[", "]", "\n", "for", "layer_output", "in", "all_layer_outputs", ":", "\n", "            ", "final_output", "=", "reshape_from_matrix", "(", "layer_output", ",", "input_shape", ")", "\n", "final_outputs", ".", "append", "(", "final_output", ")", "\n", "", "return", "final_outputs", "\n", "", "else", ":", "\n", "        ", "final_output", "=", "reshape_from_matrix", "(", "prev_output", ",", "input_shape", ")", "\n", "return", "final_output", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.get_shape_list": [[901, 936], ["tensor.shape.as_list", "enumerate", "tensorflow.shape", "modeling.assert_rank", "non_static_indexes.append"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.assert_rank"], ["", "", "def", "get_shape_list", "(", "tensor", ",", "expected_rank", "=", "None", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Returns a list of the shape of tensor, preferring static dimensions.\n\n    Args:\n      tensor: A tf.Tensor object to find the shape of.\n      expected_rank: (optional) int. The expected rank of `tensor`. If this is\n        specified and the `tensor` has a different rank, and exception will be\n        thrown.\n      name: Optional name of the tensor for the error message.\n\n    Returns:\n      A list of dimensions of the shape of tensor. All static dimensions will\n      be returned as python integers, and dynamic dimensions will be returned\n      as tf.Tensor scalars.\n    \"\"\"", "\n", "if", "name", "is", "None", ":", "\n", "        ", "name", "=", "tensor", ".", "name", "\n", "\n", "", "if", "expected_rank", "is", "not", "None", ":", "\n", "        ", "assert_rank", "(", "tensor", ",", "expected_rank", ",", "name", ")", "\n", "\n", "", "shape", "=", "tensor", ".", "shape", ".", "as_list", "(", ")", "\n", "\n", "non_static_indexes", "=", "[", "]", "\n", "for", "(", "index", ",", "dim", ")", "in", "enumerate", "(", "shape", ")", ":", "\n", "        ", "if", "dim", "is", "None", ":", "\n", "            ", "non_static_indexes", ".", "append", "(", "index", ")", "\n", "\n", "", "", "if", "not", "non_static_indexes", ":", "\n", "        ", "return", "shape", "\n", "\n", "", "dyn_shape", "=", "tf", ".", "shape", "(", "tensor", ")", "\n", "for", "index", "in", "non_static_indexes", ":", "\n", "        ", "shape", "[", "index", "]", "=", "dyn_shape", "[", "index", "]", "\n", "", "return", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.reshape_to_matrix": [[938, 950], ["tensorflow.reshape", "ValueError"], "function", ["None"], ["", "def", "reshape_to_matrix", "(", "input_tensor", ")", ":", "\n", "    ", "\"\"\"Reshapes a >= rank 2 tensor to a rank 2 tensor (i.e., a matrix).\"\"\"", "\n", "ndims", "=", "input_tensor", ".", "shape", ".", "ndims", "\n", "if", "ndims", "<", "2", ":", "\n", "        ", "raise", "ValueError", "(", "\"Input tensor must have at least rank 2. Shape = %s\"", "%", "\n", "(", "input_tensor", ".", "shape", ")", ")", "\n", "", "if", "ndims", "==", "2", ":", "\n", "        ", "return", "input_tensor", "\n", "\n", "", "width", "=", "input_tensor", ".", "shape", "[", "-", "1", "]", "\n", "output_tensor", "=", "tf", ".", "reshape", "(", "input_tensor", ",", "[", "-", "1", ",", "width", "]", ")", "\n", "return", "output_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.reshape_from_matrix": [[952, 963], ["modeling.get_shape_list", "tensorflow.reshape", "len"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.get_shape_list"], ["", "def", "reshape_from_matrix", "(", "output_tensor", ",", "orig_shape_list", ")", ":", "\n", "    ", "\"\"\"Reshapes a rank 2 tensor back to its original rank >= 2 tensor.\"\"\"", "\n", "if", "len", "(", "orig_shape_list", ")", "==", "2", ":", "\n", "        ", "return", "output_tensor", "\n", "\n", "", "output_shape", "=", "get_shape_list", "(", "output_tensor", ")", "\n", "\n", "orig_dims", "=", "orig_shape_list", "[", "0", ":", "-", "1", "]", "\n", "width", "=", "output_shape", "[", "-", "1", "]", "\n", "\n", "return", "tf", ".", "reshape", "(", "output_tensor", ",", "orig_dims", "+", "[", "width", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.assert_rank": [[965, 993], ["isinstance", "ValueError", "tensorflow.get_variable_scope", "str", "str"], "function", ["None"], ["", "def", "assert_rank", "(", "tensor", ",", "expected_rank", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Raises an exception if the tensor rank is not of the expected rank.\n\n    Args:\n      tensor: A tf.Tensor to check the rank of.\n      expected_rank: Python integer or list of integers, expected rank.\n      name: Optional name of the tensor for the error message.\n\n    Raises:\n      ValueError: If the expected shape doesn't match the actual shape.\n    \"\"\"", "\n", "if", "name", "is", "None", ":", "\n", "        ", "name", "=", "tensor", ".", "name", "\n", "\n", "", "expected_rank_dict", "=", "{", "}", "\n", "if", "isinstance", "(", "expected_rank", ",", "six", ".", "integer_types", ")", ":", "\n", "        ", "expected_rank_dict", "[", "expected_rank", "]", "=", "True", "\n", "", "else", ":", "\n", "        ", "for", "x", "in", "expected_rank", ":", "\n", "            ", "expected_rank_dict", "[", "x", "]", "=", "True", "\n", "\n", "", "", "actual_rank", "=", "tensor", ".", "shape", ".", "ndims", "\n", "if", "actual_rank", "not", "in", "expected_rank_dict", ":", "\n", "        ", "scope_name", "=", "tf", ".", "get_variable_scope", "(", ")", ".", "name", "\n", "raise", "ValueError", "(", "\n", "\"For the tensor `%s` in scope `%s`, the actual rank \"", "\n", "\"`%d` (shape = %s) is not equal to the expected rank `%s`\"", "%", "\n", "(", "name", ",", "scope_name", ",", "actual_rank", ",", "str", "(", "tensor", ".", "shape", ")", ",", "str", "(", "expected_rank", ")", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.optimization.AdamWeightDecayOptimizer.__init__": [[90, 107], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["def", "__init__", "(", "self", ",", "\n", "learning_rate", ",", "\n", "weight_decay_rate", "=", "0.0", ",", "\n", "beta_1", "=", "0.9", ",", "\n", "beta_2", "=", "0.999", ",", "\n", "epsilon", "=", "1e-6", ",", "\n", "exclude_from_weight_decay", "=", "None", ",", "\n", "name", "=", "\"AdamWeightDecayOptimizer\"", ")", ":", "\n", "    ", "\"\"\"Constructs a AdamWeightDecayOptimizer.\"\"\"", "\n", "super", "(", "AdamWeightDecayOptimizer", ",", "self", ")", ".", "__init__", "(", "False", ",", "name", ")", "\n", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "self", ".", "weight_decay_rate", "=", "weight_decay_rate", "\n", "self", ".", "beta_1", "=", "beta_1", "\n", "self", ".", "beta_2", "=", "beta_2", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "exclude_from_weight_decay", "=", "exclude_from_weight_decay", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.optimization.AdamWeightDecayOptimizer.apply_gradients": [[108, 158], ["tensorflow.group", "optimization.AdamWeightDecayOptimizer._get_variable_name", "tensorflow.get_variable", "tensorflow.get_variable", "optimization.AdamWeightDecayOptimizer._do_use_weight_decay", "assignments.extend", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.multiply", "param.shape.as_list", "tensorflow.zeros_initializer", "param.shape.as_list", "tensorflow.zeros_initializer", "tensorflow.square", "tensorflow.sqrt", "param.assign", "tensorflow.get_variable.assign", "tensorflow.get_variable.assign"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.optimization.AdamWeightDecayOptimizer._get_variable_name", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.optimization.AdamWeightDecayOptimizer._do_use_weight_decay"], ["", "def", "apply_gradients", "(", "self", ",", "grads_and_vars", ",", "global_step", "=", "None", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"See base class.\"\"\"", "\n", "assignments", "=", "[", "]", "\n", "for", "(", "grad", ",", "param", ")", "in", "grads_and_vars", ":", "\n", "      ", "if", "grad", "is", "None", "or", "param", "is", "None", ":", "\n", "        ", "continue", "\n", "\n", "", "param_name", "=", "self", ".", "_get_variable_name", "(", "param", ".", "name", ")", "\n", "\n", "m", "=", "tf", ".", "get_variable", "(", "\n", "name", "=", "param_name", "+", "\"/adam_m\"", ",", "\n", "shape", "=", "param", ".", "shape", ".", "as_list", "(", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "trainable", "=", "False", ",", "\n", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ")", "\n", "v", "=", "tf", ".", "get_variable", "(", "\n", "name", "=", "param_name", "+", "\"/adam_v\"", ",", "\n", "shape", "=", "param", ".", "shape", ".", "as_list", "(", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "trainable", "=", "False", ",", "\n", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ")", "\n", "\n", "# Standard Adam update.", "\n", "next_m", "=", "(", "\n", "tf", ".", "multiply", "(", "self", ".", "beta_1", ",", "m", ")", "+", "tf", ".", "multiply", "(", "1.0", "-", "self", ".", "beta_1", ",", "grad", ")", ")", "\n", "next_v", "=", "(", "\n", "tf", ".", "multiply", "(", "self", ".", "beta_2", ",", "v", ")", "+", "tf", ".", "multiply", "(", "1.0", "-", "self", ".", "beta_2", ",", "\n", "tf", ".", "square", "(", "grad", ")", ")", ")", "\n", "\n", "update", "=", "next_m", "/", "(", "tf", ".", "sqrt", "(", "next_v", ")", "+", "self", ".", "epsilon", ")", "\n", "\n", "# Just adding the square of the weights to the loss function is *not*", "\n", "# the correct way of using L2 regularization/weight decay with Adam,", "\n", "# since that will interact with the m and v parameters in strange ways.", "\n", "#", "\n", "# Instead we want ot decay the weights in a manner that doesn't interact", "\n", "# with the m/v parameters. This is equivalent to adding the square", "\n", "# of the weights to the loss with plain (non-momentum) SGD.", "\n", "if", "self", ".", "_do_use_weight_decay", "(", "param_name", ")", ":", "\n", "        ", "update", "+=", "self", ".", "weight_decay_rate", "*", "param", "\n", "\n", "", "update_with_lr", "=", "self", ".", "learning_rate", "*", "update", "\n", "\n", "next_param", "=", "param", "-", "update_with_lr", "\n", "\n", "assignments", ".", "extend", "(", "\n", "[", "param", ".", "assign", "(", "next_param", ")", ",", "\n", "m", ".", "assign", "(", "next_m", ")", ",", "\n", "v", ".", "assign", "(", "next_v", ")", "]", ")", "\n", "", "return", "tf", ".", "group", "(", "*", "assignments", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.optimization.AdamWeightDecayOptimizer._do_use_weight_decay": [[159, 168], ["re.search"], "methods", ["None"], ["", "def", "_do_use_weight_decay", "(", "self", ",", "param_name", ")", ":", "\n", "    ", "\"\"\"Whether to use L2 weight decay for `param_name`.\"\"\"", "\n", "if", "not", "self", ".", "weight_decay_rate", ":", "\n", "      ", "return", "False", "\n", "", "if", "self", ".", "exclude_from_weight_decay", ":", "\n", "      ", "for", "r", "in", "self", ".", "exclude_from_weight_decay", ":", "\n", "        ", "if", "re", ".", "search", "(", "r", ",", "param_name", ")", "is", "not", "None", ":", "\n", "          ", "return", "False", "\n", "", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.optimization.AdamWeightDecayOptimizer._get_variable_name": [[169, 175], ["re.match", "re.match.group"], "methods", ["None"], ["", "def", "_get_variable_name", "(", "self", ",", "param_name", ")", ":", "\n", "    ", "\"\"\"Get the variable name from the tensor name.\"\"\"", "\n", "m", "=", "re", ".", "match", "(", "\"^(.*):\\\\d+$\"", ",", "param_name", ")", "\n", "if", "m", "is", "not", "None", ":", "\n", "      ", "param_name", "=", "m", ".", "group", "(", "1", ")", "\n", "", "return", "param_name", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.optimization.create_optimizer": [[25, 85], ["tensorflow.train.get_or_create_global_step", "tensorflow.constant", "tensorflow.train.polynomial_decay", "optimization.AdamWeightDecayOptimizer", "tensorflow.trainable_variables", "tensorflow.gradients", "tensorflow.clip_by_global_norm", "tf.contrib.tpu.CrossShardOptimizer.apply_gradients", "tensorflow.group", "tensorflow.cast", "tensorflow.constant", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.contrib.tpu.CrossShardOptimizer", "zip", "tf.train.get_or_create_global_step.assign"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.optimization.AdamWeightDecayOptimizer.apply_gradients"], ["def", "create_optimizer", "(", "loss", ",", "init_lr", ",", "num_train_steps", ",", "num_warmup_steps", ",", "use_tpu", ")", ":", "\n", "  ", "\"\"\"Creates an optimizer training op.\"\"\"", "\n", "global_step", "=", "tf", ".", "train", ".", "get_or_create_global_step", "(", ")", "\n", "\n", "learning_rate", "=", "tf", ".", "constant", "(", "value", "=", "init_lr", ",", "shape", "=", "[", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "# Implements linear decay of the learning rate.", "\n", "learning_rate", "=", "tf", ".", "train", ".", "polynomial_decay", "(", "\n", "learning_rate", ",", "\n", "global_step", ",", "\n", "num_train_steps", ",", "\n", "end_learning_rate", "=", "0.0", ",", "\n", "power", "=", "1.0", ",", "\n", "cycle", "=", "False", ")", "\n", "\n", "# Implements linear warmup. I.e., if global_step < num_warmup_steps, the", "\n", "# learning rate will be `global_step/num_warmup_steps * init_lr`.", "\n", "if", "num_warmup_steps", ":", "\n", "    ", "global_steps_int", "=", "tf", ".", "cast", "(", "global_step", ",", "tf", ".", "int32", ")", "\n", "warmup_steps_int", "=", "tf", ".", "constant", "(", "num_warmup_steps", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "\n", "global_steps_float", "=", "tf", ".", "cast", "(", "global_steps_int", ",", "tf", ".", "float32", ")", "\n", "warmup_steps_float", "=", "tf", ".", "cast", "(", "warmup_steps_int", ",", "tf", ".", "float32", ")", "\n", "\n", "warmup_percent_done", "=", "global_steps_float", "/", "warmup_steps_float", "\n", "warmup_learning_rate", "=", "init_lr", "*", "warmup_percent_done", "\n", "\n", "is_warmup", "=", "tf", ".", "cast", "(", "global_steps_int", "<", "warmup_steps_int", ",", "tf", ".", "float32", ")", "\n", "learning_rate", "=", "(", "\n", "(", "1.0", "-", "is_warmup", ")", "*", "learning_rate", "+", "is_warmup", "*", "warmup_learning_rate", ")", "\n", "\n", "# It is recommended that you use this optimizer for fine tuning, since this", "\n", "# is how the model was trained (note that the Adam m/v variables are NOT", "\n", "# loaded from init_checkpoint.)", "\n", "", "optimizer", "=", "AdamWeightDecayOptimizer", "(", "\n", "learning_rate", "=", "learning_rate", ",", "\n", "weight_decay_rate", "=", "0.01", ",", "\n", "beta_1", "=", "0.9", ",", "\n", "beta_2", "=", "0.999", ",", "\n", "epsilon", "=", "1e-6", ",", "\n", "exclude_from_weight_decay", "=", "[", "\"LayerNorm\"", ",", "\"layer_norm\"", ",", "\"bias\"", "]", ")", "\n", "\n", "if", "use_tpu", ":", "\n", "    ", "optimizer", "=", "tf", ".", "contrib", ".", "tpu", ".", "CrossShardOptimizer", "(", "optimizer", ")", "\n", "\n", "", "tvars", "=", "tf", ".", "trainable_variables", "(", ")", "\n", "grads", "=", "tf", ".", "gradients", "(", "loss", ",", "tvars", ")", "\n", "\n", "# This is how the model was pre-trained.", "\n", "(", "grads", ",", "_", ")", "=", "tf", ".", "clip_by_global_norm", "(", "grads", ",", "clip_norm", "=", "1.0", ")", "\n", "\n", "train_op", "=", "optimizer", ".", "apply_gradients", "(", "\n", "zip", "(", "grads", ",", "tvars", ")", ",", "global_step", "=", "global_step", ")", "\n", "\n", "# Normally the global step update is done inside of `apply_gradients`.", "\n", "# However, `AdamWeightDecayOptimizer` doesn't do this. But if you use", "\n", "# a different optimizer, you should probably take this line out.", "\n", "new_global_step", "=", "global_step", "+", "1", "\n", "train_op", "=", "tf", ".", "group", "(", "train_op", ",", "[", "global_step", ".", "assign", "(", "new_global_step", ")", "]", ")", "\n", "return", "train_op", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.extract_features.InputExample.__init__": [[83, 87], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "unique_id", ",", "text_a", ",", "text_b", ")", ":", "\n", "    ", "self", ".", "unique_id", "=", "unique_id", "\n", "self", ".", "text_a", "=", "text_a", "\n", "self", ".", "text_b", "=", "text_b", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.extract_features.InputFeatures.__init__": [[92, 98], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "unique_id", ",", "tokens", ",", "input_ids", ",", "input_mask", ",", "input_type_ids", ")", ":", "\n", "    ", "self", ".", "unique_id", "=", "unique_id", "\n", "self", ".", "tokens", "=", "tokens", "\n", "self", ".", "input_ids", "=", "input_ids", "\n", "self", ".", "input_mask", "=", "input_mask", "\n", "self", ".", "input_type_ids", "=", "input_type_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.extract_features.input_fn_builder": [[100, 146], ["all_unique_ids.append", "all_input_ids.append", "all_input_mask.append", "all_input_type_ids.append", "len", "tensorflow.data.Dataset.from_tensor_slices", "d.batch.batch", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant"], "function", ["None"], ["", "", "def", "input_fn_builder", "(", "features", ",", "seq_length", ")", ":", "\n", "  ", "\"\"\"Creates an `input_fn` closure to be passed to TPUEstimator.\"\"\"", "\n", "\n", "all_unique_ids", "=", "[", "]", "\n", "all_input_ids", "=", "[", "]", "\n", "all_input_mask", "=", "[", "]", "\n", "all_input_type_ids", "=", "[", "]", "\n", "\n", "for", "feature", "in", "features", ":", "\n", "    ", "all_unique_ids", ".", "append", "(", "feature", ".", "unique_id", ")", "\n", "all_input_ids", ".", "append", "(", "feature", ".", "input_ids", ")", "\n", "all_input_mask", ".", "append", "(", "feature", ".", "input_mask", ")", "\n", "all_input_type_ids", ".", "append", "(", "feature", ".", "input_type_ids", ")", "\n", "\n", "", "def", "input_fn", "(", "params", ")", ":", "\n", "    ", "\"\"\"The actual input function.\"\"\"", "\n", "batch_size", "=", "params", "[", "\"batch_size\"", "]", "\n", "\n", "num_examples", "=", "len", "(", "features", ")", "\n", "\n", "# This is for demo purposes and does NOT scale to large data sets. We do", "\n", "# not use Dataset.from_generator() because that uses tf.py_func which is", "\n", "# not TPU compatible. The right way to load data is with TFRecordReader.", "\n", "d", "=", "tf", ".", "data", ".", "Dataset", ".", "from_tensor_slices", "(", "{", "\n", "\"unique_ids\"", ":", "\n", "tf", ".", "constant", "(", "all_unique_ids", ",", "shape", "=", "[", "num_examples", "]", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "\n", "\"input_ids\"", ":", "\n", "tf", ".", "constant", "(", "\n", "all_input_ids", ",", "shape", "=", "[", "num_examples", ",", "seq_length", "]", ",", "\n", "dtype", "=", "tf", ".", "int32", ")", ",", "\n", "\"input_mask\"", ":", "\n", "tf", ".", "constant", "(", "\n", "all_input_mask", ",", "\n", "shape", "=", "[", "num_examples", ",", "seq_length", "]", ",", "\n", "dtype", "=", "tf", ".", "int32", ")", ",", "\n", "\"input_type_ids\"", ":", "\n", "tf", ".", "constant", "(", "\n", "all_input_type_ids", ",", "\n", "shape", "=", "[", "num_examples", ",", "seq_length", "]", ",", "\n", "dtype", "=", "tf", ".", "int32", ")", ",", "\n", "}", ")", "\n", "\n", "d", "=", "d", ".", "batch", "(", "batch_size", "=", "batch_size", ",", "drop_remainder", "=", "False", ")", "\n", "return", "d", "\n", "\n", "", "return", "input_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.extract_features.model_fn_builder": [[148, 207], ["modeling.BertModel", "tensorflow.trainable_variables", "modeling.get_assignment_map_from_checkpoint", "tensorflow.logging.info", "modeling.BertModel.get_all_encoder_layers", "enumerate", "tensorflow.contrib.tpu.TPUEstimatorSpec", "ValueError", "tensorflow.train.init_from_checkpoint", "tensorflow.logging.info", "tensorflow.train.init_from_checkpoint", "tensorflow.train.Scaffold"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.get_assignment_map_from_checkpoint", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.BertModel.get_all_encoder_layers"], ["", "def", "model_fn_builder", "(", "bert_config", ",", "init_checkpoint", ",", "layer_indexes", ",", "use_tpu", ",", "\n", "use_one_hot_embeddings", ")", ":", "\n", "  ", "\"\"\"Returns `model_fn` closure for TPUEstimator.\"\"\"", "\n", "\n", "def", "model_fn", "(", "features", ",", "labels", ",", "mode", ",", "params", ")", ":", "# pylint: disable=unused-argument", "\n", "    ", "\"\"\"The `model_fn` for TPUEstimator.\"\"\"", "\n", "\n", "unique_ids", "=", "features", "[", "\"unique_ids\"", "]", "\n", "input_ids", "=", "features", "[", "\"input_ids\"", "]", "\n", "input_mask", "=", "features", "[", "\"input_mask\"", "]", "\n", "input_type_ids", "=", "features", "[", "\"input_type_ids\"", "]", "\n", "\n", "model", "=", "modeling", ".", "BertModel", "(", "\n", "config", "=", "bert_config", ",", "\n", "is_training", "=", "False", ",", "\n", "input_ids", "=", "input_ids", ",", "\n", "input_mask", "=", "input_mask", ",", "\n", "token_type_ids", "=", "input_type_ids", ",", "\n", "use_one_hot_embeddings", "=", "use_one_hot_embeddings", ")", "\n", "\n", "if", "mode", "!=", "tf", ".", "estimator", ".", "ModeKeys", ".", "PREDICT", ":", "\n", "      ", "raise", "ValueError", "(", "\"Only PREDICT modes are supported: %s\"", "%", "(", "mode", ")", ")", "\n", "\n", "", "tvars", "=", "tf", ".", "trainable_variables", "(", ")", "\n", "scaffold_fn", "=", "None", "\n", "(", "assignment_map", ",", "\n", "initialized_variable_names", ")", "=", "modeling", ".", "get_assignment_map_from_checkpoint", "(", "\n", "tvars", ",", "init_checkpoint", ")", "\n", "if", "use_tpu", ":", "\n", "\n", "      ", "def", "tpu_scaffold", "(", ")", ":", "\n", "        ", "tf", ".", "train", ".", "init_from_checkpoint", "(", "init_checkpoint", ",", "assignment_map", ")", "\n", "return", "tf", ".", "train", ".", "Scaffold", "(", ")", "\n", "\n", "", "scaffold_fn", "=", "tpu_scaffold", "\n", "", "else", ":", "\n", "      ", "tf", ".", "train", ".", "init_from_checkpoint", "(", "init_checkpoint", ",", "assignment_map", ")", "\n", "\n", "", "tf", ".", "logging", ".", "info", "(", "\"**** Trainable Variables ****\"", ")", "\n", "for", "var", "in", "tvars", ":", "\n", "      ", "init_string", "=", "\"\"", "\n", "if", "var", ".", "name", "in", "initialized_variable_names", ":", "\n", "        ", "init_string", "=", "\", *INIT_FROM_CKPT*\"", "\n", "", "tf", ".", "logging", ".", "info", "(", "\"  name = %s, shape = %s%s\"", "%", "(", "var", ".", "name", ",", "var", ".", "shape", ",", "init_string", ")", ")", "\n", "\n", "", "all_layers", "=", "model", ".", "get_all_encoder_layers", "(", ")", "\n", "\n", "predictions", "=", "{", "\n", "\"unique_id\"", ":", "unique_ids", ",", "\n", "}", "\n", "\n", "for", "(", "i", ",", "layer_index", ")", "in", "enumerate", "(", "layer_indexes", ")", ":", "\n", "      ", "predictions", "[", "\"layer_output_%d\"", "%", "i", "]", "=", "all_layers", "[", "layer_index", "]", "\n", "\n", "", "output_spec", "=", "tf", ".", "contrib", ".", "tpu", ".", "TPUEstimatorSpec", "(", "\n", "mode", "=", "mode", ",", "predictions", "=", "predictions", ",", "scaffold_fn", "=", "scaffold_fn", ")", "\n", "return", "output_spec", "\n", "\n", "", "return", "model_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.extract_features.convert_examples_to_features": [[209, 299], ["enumerate", "tokenizer.tokenize", "tokens.append", "input_type_ids.append", "tokens.append", "input_type_ids.append", "tokenizer.convert_tokens_to_ids", "features.append", "tokenizer.tokenize", "extract_features._truncate_seq_pair", "tokens.append", "input_type_ids.append", "tokens.append", "input_type_ids.append", "len", "len", "tokenizer.convert_tokens_to_ids.append", "input_mask.append", "input_type_ids.append", "len", "len", "len", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "extract_features.InputFeatures", "len", "tokens.append", "input_type_ids.append", "tokenization.printable_text", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.WordpieceTokenizer.tokenize", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.convert_tokens_to_ids", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.WordpieceTokenizer.tokenize", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier._truncate_seq_pair", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.printable_text"], ["", "def", "convert_examples_to_features", "(", "examples", ",", "seq_length", ",", "tokenizer", ")", ":", "\n", "  ", "\"\"\"Loads a data file into a list of `InputBatch`s.\"\"\"", "\n", "\n", "features", "=", "[", "]", "\n", "for", "(", "ex_index", ",", "example", ")", "in", "enumerate", "(", "examples", ")", ":", "\n", "    ", "tokens_a", "=", "tokenizer", ".", "tokenize", "(", "example", ".", "text_a", ")", "\n", "\n", "tokens_b", "=", "None", "\n", "if", "example", ".", "text_b", ":", "\n", "      ", "tokens_b", "=", "tokenizer", ".", "tokenize", "(", "example", ".", "text_b", ")", "\n", "\n", "", "if", "tokens_b", ":", "\n", "# Modifies `tokens_a` and `tokens_b` in place so that the total", "\n", "# length is less than the specified length.", "\n", "# Account for [CLS], [SEP], [SEP] with \"- 3\"", "\n", "      ", "_truncate_seq_pair", "(", "tokens_a", ",", "tokens_b", ",", "seq_length", "-", "3", ")", "\n", "", "else", ":", "\n", "# Account for [CLS] and [SEP] with \"- 2\"", "\n", "      ", "if", "len", "(", "tokens_a", ")", ">", "seq_length", "-", "2", ":", "\n", "        ", "tokens_a", "=", "tokens_a", "[", "0", ":", "(", "seq_length", "-", "2", ")", "]", "\n", "\n", "# The convention in BERT is:", "\n", "# (a) For sequence pairs:", "\n", "#  tokens:   [CLS] is this jack ##son ##ville ? [SEP] no it is not . [SEP]", "\n", "#  type_ids: 0     0  0    0    0     0       0 0     1  1  1  1   1 1", "\n", "# (b) For single sequences:", "\n", "#  tokens:   [CLS] the dog is hairy . [SEP]", "\n", "#  type_ids: 0     0   0   0  0     0 0", "\n", "#", "\n", "# Where \"type_ids\" are used to indicate whether this is the first", "\n", "# sequence or the second sequence. The embedding vectors for `type=0` and", "\n", "# `type=1` were learned during pre-training and are added to the wordpiece", "\n", "# embedding vector (and position vector). This is not *strictly* necessary", "\n", "# since the [SEP] token unambiguously separates the sequences, but it makes", "\n", "# it easier for the model to learn the concept of sequences.", "\n", "#", "\n", "# For classification tasks, the first vector (corresponding to [CLS]) is", "\n", "# used as as the \"sentence vector\". Note that this only makes sense because", "\n", "# the entire model is fine-tuned.", "\n", "", "", "tokens", "=", "[", "]", "\n", "input_type_ids", "=", "[", "]", "\n", "tokens", ".", "append", "(", "\"[CLS]\"", ")", "\n", "input_type_ids", ".", "append", "(", "0", ")", "\n", "for", "token", "in", "tokens_a", ":", "\n", "      ", "tokens", ".", "append", "(", "token", ")", "\n", "input_type_ids", ".", "append", "(", "0", ")", "\n", "", "tokens", ".", "append", "(", "\"[SEP]\"", ")", "\n", "input_type_ids", ".", "append", "(", "0", ")", "\n", "\n", "if", "tokens_b", ":", "\n", "      ", "for", "token", "in", "tokens_b", ":", "\n", "        ", "tokens", ".", "append", "(", "token", ")", "\n", "input_type_ids", ".", "append", "(", "1", ")", "\n", "", "tokens", ".", "append", "(", "\"[SEP]\"", ")", "\n", "input_type_ids", ".", "append", "(", "1", ")", "\n", "\n", "", "input_ids", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokens", ")", "\n", "\n", "# The mask has 1 for real tokens and 0 for padding tokens. Only real", "\n", "# tokens are attended to.", "\n", "input_mask", "=", "[", "1", "]", "*", "len", "(", "input_ids", ")", "\n", "\n", "# Zero-pad up to the sequence length.", "\n", "while", "len", "(", "input_ids", ")", "<", "seq_length", ":", "\n", "      ", "input_ids", ".", "append", "(", "0", ")", "\n", "input_mask", ".", "append", "(", "0", ")", "\n", "input_type_ids", ".", "append", "(", "0", ")", "\n", "\n", "", "assert", "len", "(", "input_ids", ")", "==", "seq_length", "\n", "assert", "len", "(", "input_mask", ")", "==", "seq_length", "\n", "assert", "len", "(", "input_type_ids", ")", "==", "seq_length", "\n", "\n", "if", "ex_index", "<", "5", ":", "\n", "      ", "tf", ".", "logging", ".", "info", "(", "\"*** Example ***\"", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"unique_id: %s\"", "%", "(", "example", ".", "unique_id", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"tokens: %s\"", "%", "\" \"", ".", "join", "(", "\n", "[", "tokenization", ".", "printable_text", "(", "x", ")", "for", "x", "in", "tokens", "]", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"input_ids: %s\"", "%", "\" \"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "input_ids", "]", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"input_mask: %s\"", "%", "\" \"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "input_mask", "]", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\n", "\"input_type_ids: %s\"", "%", "\" \"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "input_type_ids", "]", ")", ")", "\n", "\n", "", "features", ".", "append", "(", "\n", "InputFeatures", "(", "\n", "unique_id", "=", "example", ".", "unique_id", ",", "\n", "tokens", "=", "tokens", ",", "\n", "input_ids", "=", "input_ids", ",", "\n", "input_mask", "=", "input_mask", ",", "\n", "input_type_ids", "=", "input_type_ids", ")", ")", "\n", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.extract_features._truncate_seq_pair": [[301, 316], ["len", "len", "len", "len", "tokens_a.pop", "tokens_b.pop"], "function", ["None"], ["", "def", "_truncate_seq_pair", "(", "tokens_a", ",", "tokens_b", ",", "max_length", ")", ":", "\n", "  ", "\"\"\"Truncates a sequence pair in place to the maximum length.\"\"\"", "\n", "\n", "# This is a simple heuristic which will always truncate the longer sequence", "\n", "# one token at a time. This makes more sense than truncating an equal percent", "\n", "# of tokens from each, since if one sequence is very short then each token", "\n", "# that's truncated likely contains more information than a longer sequence.", "\n", "while", "True", ":", "\n", "    ", "total_length", "=", "len", "(", "tokens_a", ")", "+", "len", "(", "tokens_b", ")", "\n", "if", "total_length", "<=", "max_length", ":", "\n", "      ", "break", "\n", "", "if", "len", "(", "tokens_a", ")", ">", "len", "(", "tokens_b", ")", ":", "\n", "      ", "tokens_a", ".", "pop", "(", ")", "\n", "", "else", ":", "\n", "      ", "tokens_b", ".", "pop", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.extract_features.read_examples": [[318, 340], ["tensorflow.gfile.GFile", "tokenization.convert_to_unicode", "line.strip.strip", "re.match", "examples.append", "reader.readline", "re.match.group", "re.match.group", "extract_features.InputExample"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.convert_to_unicode"], ["", "", "", "def", "read_examples", "(", "input_file", ")", ":", "\n", "  ", "\"\"\"Read a list of `InputExample`s from an input file.\"\"\"", "\n", "examples", "=", "[", "]", "\n", "unique_id", "=", "0", "\n", "with", "tf", ".", "gfile", ".", "GFile", "(", "input_file", ",", "\"r\"", ")", "as", "reader", ":", "\n", "    ", "while", "True", ":", "\n", "      ", "line", "=", "tokenization", ".", "convert_to_unicode", "(", "reader", ".", "readline", "(", ")", ")", "\n", "if", "not", "line", ":", "\n", "        ", "break", "\n", "", "line", "=", "line", ".", "strip", "(", ")", "\n", "text_a", "=", "None", "\n", "text_b", "=", "None", "\n", "m", "=", "re", ".", "match", "(", "r\"^(.*) \\|\\|\\| (.*)$\"", ",", "line", ")", "\n", "if", "m", "is", "None", ":", "\n", "        ", "text_a", "=", "line", "\n", "", "else", ":", "\n", "        ", "text_a", "=", "m", ".", "group", "(", "1", ")", "\n", "text_b", "=", "m", ".", "group", "(", "2", ")", "\n", "", "examples", ".", "append", "(", "\n", "InputExample", "(", "unique_id", "=", "unique_id", ",", "text_a", "=", "text_a", ",", "text_b", "=", "text_b", ")", ")", "\n", "unique_id", "+=", "1", "\n", "", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.extract_features.main": [[342, 410], ["tensorflow.logging.set_verbosity", "modeling.BertConfig.from_json_file", "tokenization.FullTokenizer", "tensorflow.contrib.tpu.RunConfig", "extract_features.read_examples", "extract_features.convert_examples_to_features", "extract_features.model_fn_builder", "tensorflow.contrib.tpu.TPUEstimator", "extract_features.input_fn_builder", "int", "tf.contrib.tpu.TPUEstimator.predict", "FLAGS.layers.split", "tensorflow.contrib.tpu.TPUConfig", "codecs.getwriter", "tensorflow.gfile.Open", "int", "collections.OrderedDict", "enumerate", "writer.write", "enumerate", "collections.OrderedDict", "all_features.append", "collections.OrderedDict", "all_layers.append", "json.dumps", "round", "float"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.BertConfig.from_json_file", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.extract_features.read_examples", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_squad.convert_examples_to_features", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_squad.model_fn_builder", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_squad.input_fn_builder", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.predict", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.write"], ["", "def", "main", "(", "_", ")", ":", "\n", "  ", "tf", ".", "logging", ".", "set_verbosity", "(", "tf", ".", "logging", ".", "INFO", ")", "\n", "\n", "layer_indexes", "=", "[", "int", "(", "x", ")", "for", "x", "in", "FLAGS", ".", "layers", ".", "split", "(", "\",\"", ")", "]", "\n", "\n", "bert_config", "=", "modeling", ".", "BertConfig", ".", "from_json_file", "(", "FLAGS", ".", "bert_config_file", ")", "\n", "\n", "tokenizer", "=", "tokenization", ".", "FullTokenizer", "(", "\n", "vocab_file", "=", "FLAGS", ".", "vocab_file", ",", "do_lower_case", "=", "FLAGS", ".", "do_lower_case", ")", "\n", "\n", "is_per_host", "=", "tf", ".", "contrib", ".", "tpu", ".", "InputPipelineConfig", ".", "PER_HOST_V2", "\n", "run_config", "=", "tf", ".", "contrib", ".", "tpu", ".", "RunConfig", "(", "\n", "master", "=", "FLAGS", ".", "master", ",", "\n", "tpu_config", "=", "tf", ".", "contrib", ".", "tpu", ".", "TPUConfig", "(", "\n", "num_shards", "=", "FLAGS", ".", "num_tpu_cores", ",", "\n", "per_host_input_for_training", "=", "is_per_host", ")", ")", "\n", "\n", "examples", "=", "read_examples", "(", "FLAGS", ".", "input_file", ")", "\n", "\n", "features", "=", "convert_examples_to_features", "(", "\n", "examples", "=", "examples", ",", "seq_length", "=", "FLAGS", ".", "max_seq_length", ",", "tokenizer", "=", "tokenizer", ")", "\n", "\n", "unique_id_to_feature", "=", "{", "}", "\n", "for", "feature", "in", "features", ":", "\n", "    ", "unique_id_to_feature", "[", "feature", ".", "unique_id", "]", "=", "feature", "\n", "\n", "", "model_fn", "=", "model_fn_builder", "(", "\n", "bert_config", "=", "bert_config", ",", "\n", "init_checkpoint", "=", "FLAGS", ".", "init_checkpoint", ",", "\n", "layer_indexes", "=", "layer_indexes", ",", "\n", "use_tpu", "=", "FLAGS", ".", "use_tpu", ",", "\n", "use_one_hot_embeddings", "=", "FLAGS", ".", "use_one_hot_embeddings", ")", "\n", "\n", "# If TPU is not available, this will fall back to normal Estimator on CPU", "\n", "# or GPU.", "\n", "estimator", "=", "tf", ".", "contrib", ".", "tpu", ".", "TPUEstimator", "(", "\n", "use_tpu", "=", "FLAGS", ".", "use_tpu", ",", "\n", "model_fn", "=", "model_fn", ",", "\n", "config", "=", "run_config", ",", "\n", "predict_batch_size", "=", "FLAGS", ".", "batch_size", ")", "\n", "\n", "input_fn", "=", "input_fn_builder", "(", "\n", "features", "=", "features", ",", "seq_length", "=", "FLAGS", ".", "max_seq_length", ")", "\n", "\n", "with", "codecs", ".", "getwriter", "(", "\"utf-8\"", ")", "(", "tf", ".", "gfile", ".", "Open", "(", "FLAGS", ".", "output_file", ",", "\n", "\"w\"", ")", ")", "as", "writer", ":", "\n", "    ", "for", "result", "in", "estimator", ".", "predict", "(", "input_fn", ",", "yield_single_examples", "=", "True", ")", ":", "\n", "      ", "unique_id", "=", "int", "(", "result", "[", "\"unique_id\"", "]", ")", "\n", "feature", "=", "unique_id_to_feature", "[", "unique_id", "]", "\n", "output_json", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "output_json", "[", "\"linex_index\"", "]", "=", "unique_id", "\n", "all_features", "=", "[", "]", "\n", "for", "(", "i", ",", "token", ")", "in", "enumerate", "(", "feature", ".", "tokens", ")", ":", "\n", "        ", "all_layers", "=", "[", "]", "\n", "for", "(", "j", ",", "layer_index", ")", "in", "enumerate", "(", "layer_indexes", ")", ":", "\n", "          ", "layer_output", "=", "result", "[", "\"layer_output_%d\"", "%", "j", "]", "\n", "layers", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "layers", "[", "\"index\"", "]", "=", "layer_index", "\n", "layers", "[", "\"values\"", "]", "=", "[", "\n", "round", "(", "float", "(", "x", ")", ",", "6", ")", "for", "x", "in", "layer_output", "[", "i", ":", "(", "i", "+", "1", ")", "]", ".", "flat", "\n", "]", "\n", "all_layers", ".", "append", "(", "layers", ")", "\n", "", "features", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "features", "[", "\"token\"", "]", "=", "token", "\n", "features", "[", "\"layers\"", "]", "=", "all_layers", "\n", "all_features", ".", "append", "(", "features", ")", "\n", "", "output_json", "[", "\"features\"", "]", "=", "all_features", "\n", "writer", ".", "write", "(", "json", ".", "dumps", "(", "output_json", ")", "+", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.InputExample.__init__": [[130, 146], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "guid", ",", "text_a", ",", "text_b", "=", "None", ",", "label", "=", "None", ")", ":", "\n", "    ", "\"\"\"Constructs a InputExample.\n\n    Args:\n      guid: Unique id for the example.\n      text_a: string. The untokenized text of the first sequence. For single\n        sequence tasks, only this sequence must be specified.\n      text_b: (Optional) string. The untokenized text of the second sequence.\n        Only must be specified for sequence pair tasks.\n      label: (Optional) string. The label of the example. This should be\n        specified for train and dev examples, but not for test examples.\n    \"\"\"", "\n", "self", ".", "guid", "=", "guid", "\n", "self", ".", "text_a", "=", "text_a", "\n", "self", ".", "text_b", "=", "text_b", "\n", "self", ".", "label", "=", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.InputFeatures.__init__": [[164, 175], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "input_ids", ",", "\n", "input_mask", ",", "\n", "segment_ids", ",", "\n", "label_id", ",", "\n", "is_real_example", "=", "True", ")", ":", "\n", "    ", "self", ".", "input_ids", "=", "input_ids", "\n", "self", ".", "input_mask", "=", "input_mask", "\n", "self", ".", "segment_ids", "=", "segment_ids", "\n", "self", ".", "label_id", "=", "label_id", "\n", "self", ".", "is_real_example", "=", "is_real_example", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.DataProcessor.get_train_examples": [[180, 183], ["NotImplementedError"], "methods", ["None"], ["def", "get_train_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "    ", "\"\"\"Gets a collection of `InputExample`s for the train set.\"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.DataProcessor.get_dev_examples": [[184, 187], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_dev_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "    ", "\"\"\"Gets a collection of `InputExample`s for the dev set.\"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.DataProcessor.get_test_examples": [[188, 191], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_test_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "    ", "\"\"\"Gets a collection of `InputExample`s for prediction.\"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.DataProcessor.get_labels": [[192, 195], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "    ", "\"\"\"Gets the list of labels for this data set.\"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.DataProcessor._read_tsv": [[196, 205], ["tensorflow.gfile.Open", "csv.reader", "lines.append"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_read_tsv", "(", "cls", ",", "input_file", ",", "quotechar", "=", "None", ")", ":", "\n", "    ", "\"\"\"Reads a tab separated value file.\"\"\"", "\n", "with", "tf", ".", "gfile", ".", "Open", "(", "input_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "      ", "reader", "=", "csv", ".", "reader", "(", "f", ",", "delimiter", "=", "\"\\t\"", ",", "quotechar", "=", "quotechar", ")", "\n", "lines", "=", "[", "]", "\n", "for", "line", "in", "reader", ":", "\n", "        ", "lines", ".", "append", "(", "line", ")", "\n", "", "return", "lines", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.XnliProcessor.__init__": [[210, 212], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "    ", "self", ".", "language", "=", "\"zh\"", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.XnliProcessor.get_train_examples": [[213, 231], ["run_classifier.XnliProcessor._read_tsv", "enumerate", "os.path.join", "tokenization.convert_to_unicode", "tokenization.convert_to_unicode", "tokenization.convert_to_unicode", "examples.append", "tokenization.convert_to_unicode", "tokenization.convert_to_unicode", "run_classifier.InputExample"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.DataProcessor._read_tsv", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.convert_to_unicode"], ["", "def", "get_train_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "    ", "\"\"\"See base class.\"\"\"", "\n", "lines", "=", "self", ".", "_read_tsv", "(", "\n", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"multinli\"", ",", "\n", "\"multinli.train.%s.tsv\"", "%", "self", ".", "language", ")", ")", "\n", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "      ", "if", "i", "==", "0", ":", "\n", "        ", "continue", "\n", "", "guid", "=", "\"train-%d\"", "%", "(", "i", ")", "\n", "text_a", "=", "tokenization", ".", "convert_to_unicode", "(", "line", "[", "0", "]", ")", "\n", "text_b", "=", "tokenization", ".", "convert_to_unicode", "(", "line", "[", "1", "]", ")", "\n", "label", "=", "tokenization", ".", "convert_to_unicode", "(", "line", "[", "2", "]", ")", "\n", "if", "label", "==", "tokenization", ".", "convert_to_unicode", "(", "\"contradictory\"", ")", ":", "\n", "        ", "label", "=", "tokenization", ".", "convert_to_unicode", "(", "\"contradiction\"", ")", "\n", "", "examples", ".", "append", "(", "\n", "InputExample", "(", "guid", "=", "guid", ",", "text_a", "=", "text_a", ",", "text_b", "=", "text_b", ",", "label", "=", "label", ")", ")", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.XnliProcessor.get_dev_examples": [[232, 249], ["run_classifier.XnliProcessor._read_tsv", "enumerate", "os.path.join", "tokenization.convert_to_unicode", "tokenization.convert_to_unicode", "tokenization.convert_to_unicode", "tokenization.convert_to_unicode", "examples.append", "tokenization.convert_to_unicode", "run_classifier.InputExample"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.DataProcessor._read_tsv", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.convert_to_unicode"], ["", "def", "get_dev_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "    ", "\"\"\"See base class.\"\"\"", "\n", "lines", "=", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"xnli.dev.tsv\"", ")", ")", "\n", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "      ", "if", "i", "==", "0", ":", "\n", "        ", "continue", "\n", "", "guid", "=", "\"dev-%d\"", "%", "(", "i", ")", "\n", "language", "=", "tokenization", ".", "convert_to_unicode", "(", "line", "[", "0", "]", ")", "\n", "if", "language", "!=", "tokenization", ".", "convert_to_unicode", "(", "self", ".", "language", ")", ":", "\n", "        ", "continue", "\n", "", "text_a", "=", "tokenization", ".", "convert_to_unicode", "(", "line", "[", "6", "]", ")", "\n", "text_b", "=", "tokenization", ".", "convert_to_unicode", "(", "line", "[", "7", "]", ")", "\n", "label", "=", "tokenization", ".", "convert_to_unicode", "(", "line", "[", "1", "]", ")", "\n", "examples", ".", "append", "(", "\n", "InputExample", "(", "guid", "=", "guid", ",", "text_a", "=", "text_a", ",", "text_b", "=", "text_b", ",", "label", "=", "label", ")", ")", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.XnliProcessor.get_labels": [[250, 253], ["None"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "    ", "\"\"\"See base class.\"\"\"", "\n", "return", "[", "\"contradiction\"", ",", "\"entailment\"", ",", "\"neutral\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.MnliProcessor.get_train_examples": [[258, 262], ["run_classifier.MnliProcessor._create_examples", "run_classifier.MnliProcessor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.ColaProcessor._create_examples", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.DataProcessor._read_tsv"], ["def", "get_train_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "    ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"train.tsv\"", ")", ")", ",", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.MnliProcessor.get_dev_examples": [[263, 268], ["run_classifier.MnliProcessor._create_examples", "run_classifier.MnliProcessor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.ColaProcessor._create_examples", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.DataProcessor._read_tsv"], ["", "def", "get_dev_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "    ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"dev_matched.tsv\"", ")", ")", ",", "\n", "\"dev_matched\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.MnliProcessor.get_test_examples": [[269, 273], ["run_classifier.MnliProcessor._create_examples", "run_classifier.MnliProcessor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.ColaProcessor._create_examples", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.DataProcessor._read_tsv"], ["", "def", "get_test_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "    ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"test_matched.tsv\"", ")", ")", ",", "\"test\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.MnliProcessor.get_labels": [[274, 277], ["None"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "    ", "\"\"\"See base class.\"\"\"", "\n", "return", "[", "\"contradiction\"", ",", "\"entailment\"", ",", "\"neutral\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.MnliProcessor._create_examples": [[278, 294], ["enumerate", "tokenization.convert_to_unicode", "tokenization.convert_to_unicode", "examples.append", "tokenization.convert_to_unicode", "run_classifier.InputExample", "tokenization.convert_to_unicode"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.convert_to_unicode"], ["", "def", "_create_examples", "(", "self", ",", "lines", ",", "set_type", ")", ":", "\n", "    ", "\"\"\"Creates examples for the training and dev sets.\"\"\"", "\n", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "      ", "if", "i", "==", "0", ":", "\n", "        ", "continue", "\n", "", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "tokenization", ".", "convert_to_unicode", "(", "line", "[", "0", "]", ")", ")", "\n", "text_a", "=", "tokenization", ".", "convert_to_unicode", "(", "line", "[", "8", "]", ")", "\n", "text_b", "=", "tokenization", ".", "convert_to_unicode", "(", "line", "[", "9", "]", ")", "\n", "if", "set_type", "==", "\"test\"", ":", "\n", "        ", "label", "=", "\"contradiction\"", "\n", "", "else", ":", "\n", "        ", "label", "=", "tokenization", ".", "convert_to_unicode", "(", "line", "[", "-", "1", "]", ")", "\n", "", "examples", ".", "append", "(", "\n", "InputExample", "(", "guid", "=", "guid", ",", "text_a", "=", "text_a", ",", "text_b", "=", "text_b", ",", "label", "=", "label", ")", ")", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.MrpcProcessor.get_train_examples": [[299, 303], ["run_classifier.MrpcProcessor._create_examples", "run_classifier.MrpcProcessor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.ColaProcessor._create_examples", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.DataProcessor._read_tsv"], ["def", "get_train_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "    ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"train.tsv\"", ")", ")", ",", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.MrpcProcessor.get_dev_examples": [[304, 308], ["run_classifier.MrpcProcessor._create_examples", "run_classifier.MrpcProcessor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.ColaProcessor._create_examples", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.DataProcessor._read_tsv"], ["", "def", "get_dev_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "    ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"dev.tsv\"", ")", ")", ",", "\"dev\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.MrpcProcessor.get_test_examples": [[309, 313], ["run_classifier.MrpcProcessor._create_examples", "run_classifier.MrpcProcessor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.ColaProcessor._create_examples", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.DataProcessor._read_tsv"], ["", "def", "get_test_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "    ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"test.tsv\"", ")", ")", ",", "\"test\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.MrpcProcessor.get_labels": [[314, 317], ["None"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "    ", "\"\"\"See base class.\"\"\"", "\n", "return", "[", "\"0\"", ",", "\"1\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.MrpcProcessor._create_examples": [[318, 334], ["enumerate", "tokenization.convert_to_unicode", "tokenization.convert_to_unicode", "examples.append", "tokenization.convert_to_unicode", "run_classifier.InputExample"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.convert_to_unicode"], ["", "def", "_create_examples", "(", "self", ",", "lines", ",", "set_type", ")", ":", "\n", "    ", "\"\"\"Creates examples for the training and dev sets.\"\"\"", "\n", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "      ", "if", "i", "==", "0", ":", "\n", "        ", "continue", "\n", "", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "i", ")", "\n", "text_a", "=", "tokenization", ".", "convert_to_unicode", "(", "line", "[", "3", "]", ")", "\n", "text_b", "=", "tokenization", ".", "convert_to_unicode", "(", "line", "[", "4", "]", ")", "\n", "if", "set_type", "==", "\"test\"", ":", "\n", "        ", "label", "=", "\"0\"", "\n", "", "else", ":", "\n", "        ", "label", "=", "tokenization", ".", "convert_to_unicode", "(", "line", "[", "0", "]", ")", "\n", "", "examples", ".", "append", "(", "\n", "InputExample", "(", "guid", "=", "guid", ",", "text_a", "=", "text_a", ",", "text_b", "=", "text_b", ",", "label", "=", "label", ")", ")", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.ColaProcessor.get_train_examples": [[339, 343], ["run_classifier.ColaProcessor._create_examples", "run_classifier.ColaProcessor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.ColaProcessor._create_examples", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.DataProcessor._read_tsv"], ["def", "get_train_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "    ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"train.tsv\"", ")", ")", ",", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.ColaProcessor.get_dev_examples": [[344, 348], ["run_classifier.ColaProcessor._create_examples", "run_classifier.ColaProcessor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.ColaProcessor._create_examples", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.DataProcessor._read_tsv"], ["", "def", "get_dev_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "    ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"dev.tsv\"", ")", ")", ",", "\"dev\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.ColaProcessor.get_test_examples": [[349, 353], ["run_classifier.ColaProcessor._create_examples", "run_classifier.ColaProcessor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.ColaProcessor._create_examples", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.DataProcessor._read_tsv"], ["", "def", "get_test_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "    ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"test.tsv\"", ")", ")", ",", "\"test\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.ColaProcessor.get_labels": [[354, 357], ["None"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "    ", "\"\"\"See base class.\"\"\"", "\n", "return", "[", "\"0\"", ",", "\"1\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.ColaProcessor._create_examples": [[358, 375], ["enumerate", "examples.append", "tokenization.convert_to_unicode", "tokenization.convert_to_unicode", "tokenization.convert_to_unicode", "run_classifier.InputExample"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.convert_to_unicode"], ["", "def", "_create_examples", "(", "self", ",", "lines", ",", "set_type", ")", ":", "\n", "    ", "\"\"\"Creates examples for the training and dev sets.\"\"\"", "\n", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "# Only the test set has a header", "\n", "      ", "if", "set_type", "==", "\"test\"", "and", "i", "==", "0", ":", "\n", "        ", "continue", "\n", "", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "i", ")", "\n", "if", "set_type", "==", "\"test\"", ":", "\n", "        ", "text_a", "=", "tokenization", ".", "convert_to_unicode", "(", "line", "[", "1", "]", ")", "\n", "label", "=", "\"0\"", "\n", "", "else", ":", "\n", "        ", "text_a", "=", "tokenization", ".", "convert_to_unicode", "(", "line", "[", "3", "]", ")", "\n", "label", "=", "tokenization", ".", "convert_to_unicode", "(", "line", "[", "1", "]", ")", "\n", "", "examples", ".", "append", "(", "\n", "InputExample", "(", "guid", "=", "guid", ",", "text_a", "=", "text_a", ",", "text_b", "=", "None", ",", "label", "=", "label", ")", ")", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.convert_single_example": [[377, 477], ["isinstance", "enumerate", "tokenizer.tokenize", "tokens.append", "segment_ids.append", "tokens.append", "segment_ids.append", "tokenizer.convert_tokens_to_ids", "run_classifier.InputFeatures", "run_classifier.InputFeatures", "tokenizer.tokenize", "run_classifier._truncate_seq_pair", "tokens.append", "segment_ids.append", "tokens.append", "segment_ids.append", "len", "len", "tokenizer.convert_tokens_to_ids.append", "input_mask.append", "segment_ids.append", "len", "len", "len", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "len", "tokens.append", "segment_ids.append", "tokenization.printable_text", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.WordpieceTokenizer.tokenize", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.convert_tokens_to_ids", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.WordpieceTokenizer.tokenize", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier._truncate_seq_pair", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.printable_text"], ["", "", "def", "convert_single_example", "(", "ex_index", ",", "example", ",", "label_list", ",", "max_seq_length", ",", "\n", "tokenizer", ")", ":", "\n", "  ", "\"\"\"Converts a single `InputExample` into a single `InputFeatures`.\"\"\"", "\n", "\n", "if", "isinstance", "(", "example", ",", "PaddingInputExample", ")", ":", "\n", "    ", "return", "InputFeatures", "(", "\n", "input_ids", "=", "[", "0", "]", "*", "max_seq_length", ",", "\n", "input_mask", "=", "[", "0", "]", "*", "max_seq_length", ",", "\n", "segment_ids", "=", "[", "0", "]", "*", "max_seq_length", ",", "\n", "label_id", "=", "0", ",", "\n", "is_real_example", "=", "False", ")", "\n", "\n", "", "label_map", "=", "{", "}", "\n", "for", "(", "i", ",", "label", ")", "in", "enumerate", "(", "label_list", ")", ":", "\n", "    ", "label_map", "[", "label", "]", "=", "i", "\n", "\n", "", "tokens_a", "=", "tokenizer", ".", "tokenize", "(", "example", ".", "text_a", ")", "\n", "tokens_b", "=", "None", "\n", "if", "example", ".", "text_b", ":", "\n", "    ", "tokens_b", "=", "tokenizer", ".", "tokenize", "(", "example", ".", "text_b", ")", "\n", "\n", "", "if", "tokens_b", ":", "\n", "# Modifies `tokens_a` and `tokens_b` in place so that the total", "\n", "# length is less than the specified length.", "\n", "# Account for [CLS], [SEP], [SEP] with \"- 3\"", "\n", "    ", "_truncate_seq_pair", "(", "tokens_a", ",", "tokens_b", ",", "max_seq_length", "-", "3", ")", "\n", "", "else", ":", "\n", "# Account for [CLS] and [SEP] with \"- 2\"", "\n", "    ", "if", "len", "(", "tokens_a", ")", ">", "max_seq_length", "-", "2", ":", "\n", "      ", "tokens_a", "=", "tokens_a", "[", "0", ":", "(", "max_seq_length", "-", "2", ")", "]", "\n", "\n", "# The convention in BERT is:", "\n", "# (a) For sequence pairs:", "\n", "#  tokens:   [CLS] is this jack ##son ##ville ? [SEP] no it is not . [SEP]", "\n", "#  type_ids: 0     0  0    0    0     0       0 0     1  1  1  1   1 1", "\n", "# (b) For single sequences:", "\n", "#  tokens:   [CLS] the dog is hairy . [SEP]", "\n", "#  type_ids: 0     0   0   0  0     0 0", "\n", "#", "\n", "# Where \"type_ids\" are used to indicate whether this is the first", "\n", "# sequence or the second sequence. The embedding vectors for `type=0` and", "\n", "# `type=1` were learned during pre-training and are added to the wordpiece", "\n", "# embedding vector (and position vector). This is not *strictly* necessary", "\n", "# since the [SEP] token unambiguously separates the sequences, but it makes", "\n", "# it easier for the model to learn the concept of sequences.", "\n", "#", "\n", "# For classification tasks, the first vector (corresponding to [CLS]) is", "\n", "# used as the \"sentence vector\". Note that this only makes sense because", "\n", "# the entire model is fine-tuned.", "\n", "", "", "tokens", "=", "[", "]", "\n", "segment_ids", "=", "[", "]", "\n", "tokens", ".", "append", "(", "\"[CLS]\"", ")", "\n", "segment_ids", ".", "append", "(", "0", ")", "\n", "for", "token", "in", "tokens_a", ":", "\n", "    ", "tokens", ".", "append", "(", "token", ")", "\n", "segment_ids", ".", "append", "(", "0", ")", "\n", "", "tokens", ".", "append", "(", "\"[SEP]\"", ")", "\n", "segment_ids", ".", "append", "(", "0", ")", "\n", "\n", "if", "tokens_b", ":", "\n", "    ", "for", "token", "in", "tokens_b", ":", "\n", "      ", "tokens", ".", "append", "(", "token", ")", "\n", "segment_ids", ".", "append", "(", "1", ")", "\n", "", "tokens", ".", "append", "(", "\"[SEP]\"", ")", "\n", "segment_ids", ".", "append", "(", "1", ")", "\n", "\n", "", "input_ids", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokens", ")", "\n", "\n", "# The mask has 1 for real tokens and 0 for padding tokens. Only real", "\n", "# tokens are attended to.", "\n", "input_mask", "=", "[", "1", "]", "*", "len", "(", "input_ids", ")", "\n", "\n", "# Zero-pad up to the sequence length.", "\n", "while", "len", "(", "input_ids", ")", "<", "max_seq_length", ":", "\n", "    ", "input_ids", ".", "append", "(", "0", ")", "\n", "input_mask", ".", "append", "(", "0", ")", "\n", "segment_ids", ".", "append", "(", "0", ")", "\n", "\n", "", "assert", "len", "(", "input_ids", ")", "==", "max_seq_length", "\n", "assert", "len", "(", "input_mask", ")", "==", "max_seq_length", "\n", "assert", "len", "(", "segment_ids", ")", "==", "max_seq_length", "\n", "\n", "label_id", "=", "label_map", "[", "example", ".", "label", "]", "\n", "if", "ex_index", "<", "5", ":", "\n", "    ", "tf", ".", "logging", ".", "info", "(", "\"*** Example ***\"", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"guid: %s\"", "%", "(", "example", ".", "guid", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"tokens: %s\"", "%", "\" \"", ".", "join", "(", "\n", "[", "tokenization", ".", "printable_text", "(", "x", ")", "for", "x", "in", "tokens", "]", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"input_ids: %s\"", "%", "\" \"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "input_ids", "]", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"input_mask: %s\"", "%", "\" \"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "input_mask", "]", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"segment_ids: %s\"", "%", "\" \"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "segment_ids", "]", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"label: %s (id = %d)\"", "%", "(", "example", ".", "label", ",", "label_id", ")", ")", "\n", "\n", "", "feature", "=", "InputFeatures", "(", "\n", "input_ids", "=", "input_ids", ",", "\n", "input_mask", "=", "input_mask", ",", "\n", "segment_ids", "=", "segment_ids", ",", "\n", "label_id", "=", "label_id", ",", "\n", "is_real_example", "=", "True", ")", "\n", "return", "feature", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.file_based_convert_examples_to_features": [[479, 507], ["tensorflow.python_io.TFRecordWriter", "enumerate", "tf.python_io.TFRecordWriter.close", "run_classifier.convert_single_example", "collections.OrderedDict", "run_classifier.file_based_convert_examples_to_features.create_int_feature"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.close", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.convert_single_example", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.create_pretraining_data.create_int_feature"], ["", "def", "file_based_convert_examples_to_features", "(", "\n", "examples", ",", "label_list", ",", "max_seq_length", ",", "tokenizer", ",", "output_file", ")", ":", "\n", "  ", "\"\"\"Convert a set of `InputExample`s to a TFRecord file.\"\"\"", "\n", "\n", "writer", "=", "tf", ".", "python_io", ".", "TFRecordWriter", "(", "output_file", ")", "\n", "\n", "for", "(", "ex_index", ",", "example", ")", "in", "enumerate", "(", "examples", ")", ":", "\n", "    ", "if", "ex_index", "%", "10000", "==", "0", ":", "\n", "      ", "tf", ".", "logging", ".", "info", "(", "\"Writing example %d of %d\"", "%", "(", "ex_index", ",", "len", "(", "examples", ")", ")", ")", "\n", "\n", "", "feature", "=", "convert_single_example", "(", "ex_index", ",", "example", ",", "label_list", ",", "\n", "max_seq_length", ",", "tokenizer", ")", "\n", "\n", "def", "create_int_feature", "(", "values", ")", ":", "\n", "      ", "f", "=", "tf", ".", "train", ".", "Feature", "(", "int64_list", "=", "tf", ".", "train", ".", "Int64List", "(", "value", "=", "list", "(", "values", ")", ")", ")", "\n", "return", "f", "\n", "\n", "", "features", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "features", "[", "\"input_ids\"", "]", "=", "create_int_feature", "(", "feature", ".", "input_ids", ")", "\n", "features", "[", "\"input_mask\"", "]", "=", "create_int_feature", "(", "feature", ".", "input_mask", ")", "\n", "features", "[", "\"segment_ids\"", "]", "=", "create_int_feature", "(", "feature", ".", "segment_ids", ")", "\n", "features", "[", "\"label_ids\"", "]", "=", "create_int_feature", "(", "[", "feature", ".", "label_id", "]", ")", "\n", "features", "[", "\"is_real_example\"", "]", "=", "create_int_feature", "(", "\n", "[", "int", "(", "feature", ".", "is_real_example", ")", "]", ")", "\n", "\n", "tf_example", "=", "tf", ".", "train", ".", "Example", "(", "features", "=", "tf", ".", "train", ".", "Features", "(", "feature", "=", "features", ")", ")", "\n", "writer", ".", "write", "(", "tf_example", ".", "SerializeToString", "(", ")", ")", "\n", "", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.file_based_input_fn_builder": [[509, 555], ["tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.parse_single_example", "list", "tensorflow.data.TFRecordDataset", "d.shuffle.apply", "tf.parse_single_example.keys", "d.shuffle.repeat", "d.shuffle.shuffle", "tensorflow.contrib.data.map_and_batch", "tensorflow.to_int32", "run_classifier.file_based_input_fn_builder._decode_record"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_pretraining._decode_record"], ["", "def", "file_based_input_fn_builder", "(", "input_file", ",", "seq_length", ",", "is_training", ",", "\n", "drop_remainder", ")", ":", "\n", "  ", "\"\"\"Creates an `input_fn` closure to be passed to TPUEstimator.\"\"\"", "\n", "\n", "name_to_features", "=", "{", "\n", "\"input_ids\"", ":", "tf", ".", "FixedLenFeature", "(", "[", "seq_length", "]", ",", "tf", ".", "int64", ")", ",", "\n", "\"input_mask\"", ":", "tf", ".", "FixedLenFeature", "(", "[", "seq_length", "]", ",", "tf", ".", "int64", ")", ",", "\n", "\"segment_ids\"", ":", "tf", ".", "FixedLenFeature", "(", "[", "seq_length", "]", ",", "tf", ".", "int64", ")", ",", "\n", "\"label_ids\"", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", ",", "\n", "\"is_real_example\"", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", ",", "\n", "}", "\n", "\n", "def", "_decode_record", "(", "record", ",", "name_to_features", ")", ":", "\n", "    ", "\"\"\"Decodes a record to a TensorFlow example.\"\"\"", "\n", "example", "=", "tf", ".", "parse_single_example", "(", "record", ",", "name_to_features", ")", "\n", "\n", "# tf.Example only supports tf.int64, but the TPU only supports tf.int32.", "\n", "# So cast all int64 to int32.", "\n", "for", "name", "in", "list", "(", "example", ".", "keys", "(", ")", ")", ":", "\n", "      ", "t", "=", "example", "[", "name", "]", "\n", "if", "t", ".", "dtype", "==", "tf", ".", "int64", ":", "\n", "        ", "t", "=", "tf", ".", "to_int32", "(", "t", ")", "\n", "", "example", "[", "name", "]", "=", "t", "\n", "\n", "", "return", "example", "\n", "\n", "", "def", "input_fn", "(", "params", ")", ":", "\n", "    ", "\"\"\"The actual input function.\"\"\"", "\n", "batch_size", "=", "params", "[", "\"batch_size\"", "]", "\n", "\n", "# For training, we want a lot of parallel reading and shuffling.", "\n", "# For eval, we want no shuffling and parallel reading doesn't matter.", "\n", "d", "=", "tf", ".", "data", ".", "TFRecordDataset", "(", "input_file", ")", "\n", "if", "is_training", ":", "\n", "      ", "d", "=", "d", ".", "repeat", "(", ")", "\n", "d", "=", "d", ".", "shuffle", "(", "buffer_size", "=", "100", ")", "\n", "\n", "", "d", "=", "d", ".", "apply", "(", "\n", "tf", ".", "contrib", ".", "data", ".", "map_and_batch", "(", "\n", "lambda", "record", ":", "_decode_record", "(", "record", ",", "name_to_features", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "drop_remainder", "=", "drop_remainder", ")", ")", "\n", "\n", "return", "d", "\n", "\n", "", "return", "input_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier._truncate_seq_pair": [[557, 572], ["len", "len", "len", "len", "tokens_a.pop", "tokens_b.pop"], "function", ["None"], ["", "def", "_truncate_seq_pair", "(", "tokens_a", ",", "tokens_b", ",", "max_length", ")", ":", "\n", "  ", "\"\"\"Truncates a sequence pair in place to the maximum length.\"\"\"", "\n", "\n", "# This is a simple heuristic which will always truncate the longer sequence", "\n", "# one token at a time. This makes more sense than truncating an equal percent", "\n", "# of tokens from each, since if one sequence is very short then each token", "\n", "# that's truncated likely contains more information than a longer sequence.", "\n", "while", "True", ":", "\n", "    ", "total_length", "=", "len", "(", "tokens_a", ")", "+", "len", "(", "tokens_b", ")", "\n", "if", "total_length", "<=", "max_length", ":", "\n", "      ", "break", "\n", "", "if", "len", "(", "tokens_a", ")", ">", "len", "(", "tokens_b", ")", ":", "\n", "      ", "tokens_a", ".", "pop", "(", ")", "\n", "", "else", ":", "\n", "      ", "tokens_b", ".", "pop", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.create_model": [[574, 617], ["modeling.BertModel", "modeling.BertModel.get_pooled_output", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.variable_scope", "tensorflow.matmul", "tensorflow.nn.bias_add", "tensorflow.nn.softmax", "tensorflow.nn.log_softmax", "tensorflow.one_hot", "tensorflow.reduce_mean", "tensorflow.truncated_normal_initializer", "tensorflow.zeros_initializer", "tensorflow.nn.dropout", "tensorflow.reduce_sum"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.BertModel.get_pooled_output", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.dropout"], ["", "", "", "def", "create_model", "(", "bert_config", ",", "is_training", ",", "input_ids", ",", "input_mask", ",", "segment_ids", ",", "\n", "labels", ",", "num_labels", ",", "use_one_hot_embeddings", ")", ":", "\n", "  ", "\"\"\"Creates a classification model.\"\"\"", "\n", "model", "=", "modeling", ".", "BertModel", "(", "\n", "config", "=", "bert_config", ",", "\n", "is_training", "=", "is_training", ",", "\n", "input_ids", "=", "input_ids", ",", "\n", "input_mask", "=", "input_mask", ",", "\n", "token_type_ids", "=", "segment_ids", ",", "\n", "use_one_hot_embeddings", "=", "use_one_hot_embeddings", ")", "\n", "\n", "# In the demo, we are doing a simple classification task on the entire", "\n", "# segment.", "\n", "#", "\n", "# If you want to use the token-level output, use model.get_sequence_output()", "\n", "# instead.", "\n", "output_layer", "=", "model", ".", "get_pooled_output", "(", ")", "\n", "\n", "hidden_size", "=", "output_layer", ".", "shape", "[", "-", "1", "]", ".", "value", "\n", "\n", "output_weights", "=", "tf", ".", "get_variable", "(", "\n", "\"output_weights\"", ",", "[", "num_labels", ",", "hidden_size", "]", ",", "\n", "initializer", "=", "tf", ".", "truncated_normal_initializer", "(", "stddev", "=", "0.02", ")", ")", "\n", "\n", "output_bias", "=", "tf", ".", "get_variable", "(", "\n", "\"output_bias\"", ",", "[", "num_labels", "]", ",", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"loss\"", ")", ":", "\n", "    ", "if", "is_training", ":", "\n", "# I.e., 0.1 dropout", "\n", "      ", "output_layer", "=", "tf", ".", "nn", ".", "dropout", "(", "output_layer", ",", "keep_prob", "=", "0.9", ")", "\n", "\n", "", "logits", "=", "tf", ".", "matmul", "(", "output_layer", ",", "output_weights", ",", "transpose_b", "=", "True", ")", "\n", "logits", "=", "tf", ".", "nn", ".", "bias_add", "(", "logits", ",", "output_bias", ")", "\n", "probabilities", "=", "tf", ".", "nn", ".", "softmax", "(", "logits", ",", "axis", "=", "-", "1", ")", "\n", "log_probs", "=", "tf", ".", "nn", ".", "log_softmax", "(", "logits", ",", "axis", "=", "-", "1", ")", "\n", "\n", "one_hot_labels", "=", "tf", ".", "one_hot", "(", "labels", ",", "depth", "=", "num_labels", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "per_example_loss", "=", "-", "tf", ".", "reduce_sum", "(", "one_hot_labels", "*", "log_probs", ",", "axis", "=", "-", "1", ")", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "per_example_loss", ")", "\n", "\n", "return", "(", "loss", ",", "per_example_loss", ",", "logits", ",", "probabilities", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.model_fn_builder": [[619, 708], ["tensorflow.logging.info", "sorted", "run_classifier.create_model", "tensorflow.trainable_variables", "tensorflow.logging.info", "features.keys", "tensorflow.logging.info", "tensorflow.cast", "tensorflow.ones", "modeling.get_assignment_map_from_checkpoint", "tensorflow.logging.info", "optimization.create_optimizer", "tensorflow.contrib.tpu.TPUEstimatorSpec", "tensorflow.shape", "tensorflow.train.init_from_checkpoint", "tensorflow.contrib.tpu.TPUEstimatorSpec", "tensorflow.contrib.tpu.TPUEstimatorSpec", "tensorflow.train.init_from_checkpoint", "tensorflow.train.Scaffold", "tensorflow.argmax", "tensorflow.metrics.accuracy", "tensorflow.metrics.mean"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_squad.create_model", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.get_assignment_map_from_checkpoint", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.optimization.create_optimizer"], ["", "", "def", "model_fn_builder", "(", "bert_config", ",", "num_labels", ",", "init_checkpoint", ",", "learning_rate", ",", "\n", "num_train_steps", ",", "num_warmup_steps", ",", "use_tpu", ",", "\n", "use_one_hot_embeddings", ")", ":", "\n", "  ", "\"\"\"Returns `model_fn` closure for TPUEstimator.\"\"\"", "\n", "\n", "def", "model_fn", "(", "features", ",", "labels", ",", "mode", ",", "params", ")", ":", "# pylint: disable=unused-argument", "\n", "    ", "\"\"\"The `model_fn` for TPUEstimator.\"\"\"", "\n", "\n", "tf", ".", "logging", ".", "info", "(", "\"*** Features ***\"", ")", "\n", "for", "name", "in", "sorted", "(", "features", ".", "keys", "(", ")", ")", ":", "\n", "      ", "tf", ".", "logging", ".", "info", "(", "\"  name = %s, shape = %s\"", "%", "(", "name", ",", "features", "[", "name", "]", ".", "shape", ")", ")", "\n", "\n", "", "input_ids", "=", "features", "[", "\"input_ids\"", "]", "\n", "input_mask", "=", "features", "[", "\"input_mask\"", "]", "\n", "segment_ids", "=", "features", "[", "\"segment_ids\"", "]", "\n", "label_ids", "=", "features", "[", "\"label_ids\"", "]", "\n", "is_real_example", "=", "None", "\n", "if", "\"is_real_example\"", "in", "features", ":", "\n", "      ", "is_real_example", "=", "tf", ".", "cast", "(", "features", "[", "\"is_real_example\"", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "", "else", ":", "\n", "      ", "is_real_example", "=", "tf", ".", "ones", "(", "tf", ".", "shape", "(", "label_ids", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "", "is_training", "=", "(", "mode", "==", "tf", ".", "estimator", ".", "ModeKeys", ".", "TRAIN", ")", "\n", "\n", "(", "total_loss", ",", "per_example_loss", ",", "logits", ",", "probabilities", ")", "=", "create_model", "(", "\n", "bert_config", ",", "is_training", ",", "input_ids", ",", "input_mask", ",", "segment_ids", ",", "label_ids", ",", "\n", "num_labels", ",", "use_one_hot_embeddings", ")", "\n", "\n", "tvars", "=", "tf", ".", "trainable_variables", "(", ")", "\n", "initialized_variable_names", "=", "{", "}", "\n", "scaffold_fn", "=", "None", "\n", "if", "init_checkpoint", ":", "\n", "      ", "(", "assignment_map", ",", "initialized_variable_names", "\n", ")", "=", "modeling", ".", "get_assignment_map_from_checkpoint", "(", "tvars", ",", "init_checkpoint", ")", "\n", "if", "use_tpu", ":", "\n", "\n", "        ", "def", "tpu_scaffold", "(", ")", ":", "\n", "          ", "tf", ".", "train", ".", "init_from_checkpoint", "(", "init_checkpoint", ",", "assignment_map", ")", "\n", "return", "tf", ".", "train", ".", "Scaffold", "(", ")", "\n", "\n", "", "scaffold_fn", "=", "tpu_scaffold", "\n", "", "else", ":", "\n", "        ", "tf", ".", "train", ".", "init_from_checkpoint", "(", "init_checkpoint", ",", "assignment_map", ")", "\n", "\n", "", "", "tf", ".", "logging", ".", "info", "(", "\"**** Trainable Variables ****\"", ")", "\n", "for", "var", "in", "tvars", ":", "\n", "      ", "init_string", "=", "\"\"", "\n", "if", "var", ".", "name", "in", "initialized_variable_names", ":", "\n", "        ", "init_string", "=", "\", *INIT_FROM_CKPT*\"", "\n", "", "tf", ".", "logging", ".", "info", "(", "\"  name = %s, shape = %s%s\"", "%", "(", "var", ".", "name", ",", "var", ".", "shape", ",", "init_string", ")", ")", "\n", "\n", "", "output_spec", "=", "None", "\n", "if", "mode", "==", "tf", ".", "estimator", ".", "ModeKeys", ".", "TRAIN", ":", "\n", "\n", "      ", "train_op", "=", "optimization", ".", "create_optimizer", "(", "\n", "total_loss", ",", "learning_rate", ",", "num_train_steps", ",", "num_warmup_steps", ",", "use_tpu", ")", "\n", "\n", "output_spec", "=", "tf", ".", "contrib", ".", "tpu", ".", "TPUEstimatorSpec", "(", "\n", "mode", "=", "mode", ",", "\n", "loss", "=", "total_loss", ",", "\n", "train_op", "=", "train_op", ",", "\n", "scaffold_fn", "=", "scaffold_fn", ")", "\n", "", "elif", "mode", "==", "tf", ".", "estimator", ".", "ModeKeys", ".", "EVAL", ":", "\n", "\n", "      ", "def", "metric_fn", "(", "per_example_loss", ",", "label_ids", ",", "logits", ",", "is_real_example", ")", ":", "\n", "        ", "predictions", "=", "tf", ".", "argmax", "(", "logits", ",", "axis", "=", "-", "1", ",", "output_type", "=", "tf", ".", "int32", ")", "\n", "accuracy", "=", "tf", ".", "metrics", ".", "accuracy", "(", "\n", "labels", "=", "label_ids", ",", "predictions", "=", "predictions", ",", "weights", "=", "is_real_example", ")", "\n", "loss", "=", "tf", ".", "metrics", ".", "mean", "(", "values", "=", "per_example_loss", ",", "weights", "=", "is_real_example", ")", "\n", "return", "{", "\n", "\"eval_accuracy\"", ":", "accuracy", ",", "\n", "\"eval_loss\"", ":", "loss", ",", "\n", "}", "\n", "\n", "", "eval_metrics", "=", "(", "metric_fn", ",", "\n", "[", "per_example_loss", ",", "label_ids", ",", "logits", ",", "is_real_example", "]", ")", "\n", "output_spec", "=", "tf", ".", "contrib", ".", "tpu", ".", "TPUEstimatorSpec", "(", "\n", "mode", "=", "mode", ",", "\n", "loss", "=", "total_loss", ",", "\n", "eval_metrics", "=", "eval_metrics", ",", "\n", "scaffold_fn", "=", "scaffold_fn", ")", "\n", "", "else", ":", "\n", "      ", "output_spec", "=", "tf", ".", "contrib", ".", "tpu", ".", "TPUEstimatorSpec", "(", "\n", "mode", "=", "mode", ",", "\n", "predictions", "=", "{", "\"probabilities\"", ":", "probabilities", "}", ",", "\n", "scaffold_fn", "=", "scaffold_fn", ")", "\n", "", "return", "output_spec", "\n", "\n", "", "return", "model_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.input_fn_builder": [[712, 762], ["all_input_ids.append", "all_input_mask.append", "all_segment_ids.append", "all_label_ids.append", "len", "tensorflow.data.Dataset.from_tensor_slices", "d.shuffle.batch", "d.shuffle.repeat", "d.shuffle.shuffle", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant"], "function", ["None"], ["", "def", "input_fn_builder", "(", "features", ",", "seq_length", ",", "is_training", ",", "drop_remainder", ")", ":", "\n", "  ", "\"\"\"Creates an `input_fn` closure to be passed to TPUEstimator.\"\"\"", "\n", "\n", "all_input_ids", "=", "[", "]", "\n", "all_input_mask", "=", "[", "]", "\n", "all_segment_ids", "=", "[", "]", "\n", "all_label_ids", "=", "[", "]", "\n", "\n", "for", "feature", "in", "features", ":", "\n", "    ", "all_input_ids", ".", "append", "(", "feature", ".", "input_ids", ")", "\n", "all_input_mask", ".", "append", "(", "feature", ".", "input_mask", ")", "\n", "all_segment_ids", ".", "append", "(", "feature", ".", "segment_ids", ")", "\n", "all_label_ids", ".", "append", "(", "feature", ".", "label_id", ")", "\n", "\n", "", "def", "input_fn", "(", "params", ")", ":", "\n", "    ", "\"\"\"The actual input function.\"\"\"", "\n", "batch_size", "=", "params", "[", "\"batch_size\"", "]", "\n", "\n", "num_examples", "=", "len", "(", "features", ")", "\n", "\n", "# This is for demo purposes and does NOT scale to large data sets. We do", "\n", "# not use Dataset.from_generator() because that uses tf.py_func which is", "\n", "# not TPU compatible. The right way to load data is with TFRecordReader.", "\n", "d", "=", "tf", ".", "data", ".", "Dataset", ".", "from_tensor_slices", "(", "{", "\n", "\"input_ids\"", ":", "\n", "tf", ".", "constant", "(", "\n", "all_input_ids", ",", "shape", "=", "[", "num_examples", ",", "seq_length", "]", ",", "\n", "dtype", "=", "tf", ".", "int32", ")", ",", "\n", "\"input_mask\"", ":", "\n", "tf", ".", "constant", "(", "\n", "all_input_mask", ",", "\n", "shape", "=", "[", "num_examples", ",", "seq_length", "]", ",", "\n", "dtype", "=", "tf", ".", "int32", ")", ",", "\n", "\"segment_ids\"", ":", "\n", "tf", ".", "constant", "(", "\n", "all_segment_ids", ",", "\n", "shape", "=", "[", "num_examples", ",", "seq_length", "]", ",", "\n", "dtype", "=", "tf", ".", "int32", ")", ",", "\n", "\"label_ids\"", ":", "\n", "tf", ".", "constant", "(", "all_label_ids", ",", "shape", "=", "[", "num_examples", "]", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "\n", "}", ")", "\n", "\n", "if", "is_training", ":", "\n", "      ", "d", "=", "d", ".", "repeat", "(", ")", "\n", "d", "=", "d", ".", "shuffle", "(", "buffer_size", "=", "100", ")", "\n", "\n", "", "d", "=", "d", ".", "batch", "(", "batch_size", "=", "batch_size", ",", "drop_remainder", "=", "drop_remainder", ")", "\n", "return", "d", "\n", "\n", "", "return", "input_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.convert_examples_to_features": [[766, 780], ["enumerate", "run_classifier.convert_single_example", "features.append", "tensorflow.logging.info", "len"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.convert_single_example"], ["", "def", "convert_examples_to_features", "(", "examples", ",", "label_list", ",", "max_seq_length", ",", "\n", "tokenizer", ")", ":", "\n", "  ", "\"\"\"Convert a set of `InputExample`s to a list of `InputFeatures`.\"\"\"", "\n", "\n", "features", "=", "[", "]", "\n", "for", "(", "ex_index", ",", "example", ")", "in", "enumerate", "(", "examples", ")", ":", "\n", "    ", "if", "ex_index", "%", "10000", "==", "0", ":", "\n", "      ", "tf", ".", "logging", ".", "info", "(", "\"Writing example %d of %d\"", "%", "(", "ex_index", ",", "len", "(", "examples", ")", ")", ")", "\n", "\n", "", "feature", "=", "convert_single_example", "(", "ex_index", ",", "example", ",", "label_list", ",", "\n", "max_seq_length", ",", "tokenizer", ")", "\n", "\n", "features", ".", "append", "(", "feature", ")", "\n", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.main": [[782, 972], ["tensorflow.logging.set_verbosity", "tokenization.validate_case_matches_checkpoint", "modeling.BertConfig.from_json_file", "tensorflow.gfile.MakeDirs", "FLAGS.task_name.lower", "processor.get_labels", "tokenization.FullTokenizer", "tensorflow.contrib.tpu.RunConfig", "run_classifier.model_fn_builder", "tensorflow.contrib.tpu.TPUEstimator", "ValueError", "ValueError", "ValueError", "tensorflow.contrib.cluster_resolver.TPUClusterResolver", "processor.get_train_examples", "int", "int", "os.path.join", "run_classifier.file_based_convert_examples_to_features", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "run_classifier.file_based_input_fn_builder", "tf.contrib.tpu.TPUEstimator.train", "processor.get_dev_examples", "len", "os.path.join", "run_classifier.file_based_convert_examples_to_features", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "run_classifier.file_based_input_fn_builder", "tf.contrib.tpu.TPUEstimator.evaluate", "os.path.join", "processor.get_test_examples", "len", "os.path.join", "run_classifier.file_based_convert_examples_to_features", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "run_classifier.file_based_input_fn_builder", "tf.contrib.tpu.TPUEstimator.predict", "os.path.join", "tensorflow.contrib.tpu.TPUConfig", "len", "len", "len", "int", "tensorflow.gfile.GFile", "tensorflow.logging.info", "sorted", "len", "tensorflow.gfile.GFile", "tensorflow.logging.info", "enumerate", "processor.get_dev_examples.append", "len", "estimator.predict.keys", "tensorflow.logging.info", "writer.write", "processor.get_test_examples.append", "len", "writer.write", "len", "len", "run_classifier.PaddingInputExample", "len", "len", "str", "len", "run_classifier.PaddingInputExample", "str", "str"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.validate_case_matches_checkpoint", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.BertConfig.from_json_file", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.ColaProcessor.get_labels", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_squad.model_fn_builder", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.ColaProcessor.get_train_examples", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.file_based_convert_examples_to_features", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.file_based_input_fn_builder", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.traintool.train", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.ColaProcessor.get_dev_examples", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.file_based_convert_examples_to_features", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.file_based_input_fn_builder", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.evaluator.EvaluatorLinker.evaluate", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.ColaProcessor.get_test_examples", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.file_based_convert_examples_to_features", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.file_based_input_fn_builder", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.predict", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.write", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.write"], ["", "def", "main", "(", "_", ")", ":", "\n", "  ", "tf", ".", "logging", ".", "set_verbosity", "(", "tf", ".", "logging", ".", "INFO", ")", "\n", "\n", "processors", "=", "{", "\n", "\"cola\"", ":", "ColaProcessor", ",", "\n", "\"mnli\"", ":", "MnliProcessor", ",", "\n", "\"mrpc\"", ":", "MrpcProcessor", ",", "\n", "\"xnli\"", ":", "XnliProcessor", ",", "\n", "}", "\n", "\n", "tokenization", ".", "validate_case_matches_checkpoint", "(", "FLAGS", ".", "do_lower_case", ",", "\n", "FLAGS", ".", "init_checkpoint", ")", "\n", "\n", "if", "not", "FLAGS", ".", "do_train", "and", "not", "FLAGS", ".", "do_eval", "and", "not", "FLAGS", ".", "do_predict", ":", "\n", "    ", "raise", "ValueError", "(", "\n", "\"At least one of `do_train`, `do_eval` or `do_predict' must be True.\"", ")", "\n", "\n", "", "bert_config", "=", "modeling", ".", "BertConfig", ".", "from_json_file", "(", "FLAGS", ".", "bert_config_file", ")", "\n", "\n", "if", "FLAGS", ".", "max_seq_length", ">", "bert_config", ".", "max_position_embeddings", ":", "\n", "    ", "raise", "ValueError", "(", "\n", "\"Cannot use sequence length %d because the BERT model \"", "\n", "\"was only trained up to sequence length %d\"", "%", "\n", "(", "FLAGS", ".", "max_seq_length", ",", "bert_config", ".", "max_position_embeddings", ")", ")", "\n", "\n", "", "tf", ".", "gfile", ".", "MakeDirs", "(", "FLAGS", ".", "output_dir", ")", "\n", "\n", "task_name", "=", "FLAGS", ".", "task_name", ".", "lower", "(", ")", "\n", "\n", "if", "task_name", "not", "in", "processors", ":", "\n", "    ", "raise", "ValueError", "(", "\"Task not found: %s\"", "%", "(", "task_name", ")", ")", "\n", "\n", "", "processor", "=", "processors", "[", "task_name", "]", "(", ")", "\n", "\n", "label_list", "=", "processor", ".", "get_labels", "(", ")", "\n", "\n", "tokenizer", "=", "tokenization", ".", "FullTokenizer", "(", "\n", "vocab_file", "=", "FLAGS", ".", "vocab_file", ",", "do_lower_case", "=", "FLAGS", ".", "do_lower_case", ")", "\n", "\n", "tpu_cluster_resolver", "=", "None", "\n", "if", "FLAGS", ".", "use_tpu", "and", "FLAGS", ".", "tpu_name", ":", "\n", "    ", "tpu_cluster_resolver", "=", "tf", ".", "contrib", ".", "cluster_resolver", ".", "TPUClusterResolver", "(", "\n", "FLAGS", ".", "tpu_name", ",", "zone", "=", "FLAGS", ".", "tpu_zone", ",", "project", "=", "FLAGS", ".", "gcp_project", ")", "\n", "\n", "", "is_per_host", "=", "tf", ".", "contrib", ".", "tpu", ".", "InputPipelineConfig", ".", "PER_HOST_V2", "\n", "run_config", "=", "tf", ".", "contrib", ".", "tpu", ".", "RunConfig", "(", "\n", "cluster", "=", "tpu_cluster_resolver", ",", "\n", "master", "=", "FLAGS", ".", "master", ",", "\n", "model_dir", "=", "FLAGS", ".", "output_dir", ",", "\n", "save_checkpoints_steps", "=", "FLAGS", ".", "save_checkpoints_steps", ",", "\n", "tpu_config", "=", "tf", ".", "contrib", ".", "tpu", ".", "TPUConfig", "(", "\n", "iterations_per_loop", "=", "FLAGS", ".", "iterations_per_loop", ",", "\n", "num_shards", "=", "FLAGS", ".", "num_tpu_cores", ",", "\n", "per_host_input_for_training", "=", "is_per_host", ")", ")", "\n", "\n", "train_examples", "=", "None", "\n", "num_train_steps", "=", "None", "\n", "num_warmup_steps", "=", "None", "\n", "if", "FLAGS", ".", "do_train", ":", "\n", "    ", "train_examples", "=", "processor", ".", "get_train_examples", "(", "FLAGS", ".", "data_dir", ")", "\n", "num_train_steps", "=", "int", "(", "\n", "len", "(", "train_examples", ")", "/", "FLAGS", ".", "train_batch_size", "*", "FLAGS", ".", "num_train_epochs", ")", "\n", "num_warmup_steps", "=", "int", "(", "num_train_steps", "*", "FLAGS", ".", "warmup_proportion", ")", "\n", "\n", "", "model_fn", "=", "model_fn_builder", "(", "\n", "bert_config", "=", "bert_config", ",", "\n", "num_labels", "=", "len", "(", "label_list", ")", ",", "\n", "init_checkpoint", "=", "FLAGS", ".", "init_checkpoint", ",", "\n", "learning_rate", "=", "FLAGS", ".", "learning_rate", ",", "\n", "num_train_steps", "=", "num_train_steps", ",", "\n", "num_warmup_steps", "=", "num_warmup_steps", ",", "\n", "use_tpu", "=", "FLAGS", ".", "use_tpu", ",", "\n", "use_one_hot_embeddings", "=", "FLAGS", ".", "use_tpu", ")", "\n", "\n", "# If TPU is not available, this will fall back to normal Estimator on CPU", "\n", "# or GPU.", "\n", "estimator", "=", "tf", ".", "contrib", ".", "tpu", ".", "TPUEstimator", "(", "\n", "use_tpu", "=", "FLAGS", ".", "use_tpu", ",", "\n", "model_fn", "=", "model_fn", ",", "\n", "config", "=", "run_config", ",", "\n", "train_batch_size", "=", "FLAGS", ".", "train_batch_size", ",", "\n", "eval_batch_size", "=", "FLAGS", ".", "eval_batch_size", ",", "\n", "predict_batch_size", "=", "FLAGS", ".", "predict_batch_size", ")", "\n", "\n", "if", "FLAGS", ".", "do_train", ":", "\n", "    ", "train_file", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "output_dir", ",", "\"train.tf_record\"", ")", "\n", "file_based_convert_examples_to_features", "(", "\n", "train_examples", ",", "label_list", ",", "FLAGS", ".", "max_seq_length", ",", "tokenizer", ",", "train_file", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"***** Running training *****\"", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"  Num examples = %d\"", ",", "len", "(", "train_examples", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"  Batch size = %d\"", ",", "FLAGS", ".", "train_batch_size", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"  Num steps = %d\"", ",", "num_train_steps", ")", "\n", "train_input_fn", "=", "file_based_input_fn_builder", "(", "\n", "input_file", "=", "train_file", ",", "\n", "seq_length", "=", "FLAGS", ".", "max_seq_length", ",", "\n", "is_training", "=", "True", ",", "\n", "drop_remainder", "=", "True", ")", "\n", "estimator", ".", "train", "(", "input_fn", "=", "train_input_fn", ",", "max_steps", "=", "num_train_steps", ")", "\n", "\n", "", "if", "FLAGS", ".", "do_eval", ":", "\n", "    ", "eval_examples", "=", "processor", ".", "get_dev_examples", "(", "FLAGS", ".", "data_dir", ")", "\n", "num_actual_eval_examples", "=", "len", "(", "eval_examples", ")", "\n", "if", "FLAGS", ".", "use_tpu", ":", "\n", "# TPU requires a fixed batch size for all batches, therefore the number", "\n", "# of examples must be a multiple of the batch size, or else examples", "\n", "# will get dropped. So we pad with fake examples which are ignored", "\n", "# later on. These do NOT count towards the metric (all tf.metrics", "\n", "# support a per-instance weight, and these get a weight of 0.0).", "\n", "      ", "while", "len", "(", "eval_examples", ")", "%", "FLAGS", ".", "eval_batch_size", "!=", "0", ":", "\n", "        ", "eval_examples", ".", "append", "(", "PaddingInputExample", "(", ")", ")", "\n", "\n", "", "", "eval_file", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "output_dir", ",", "\"eval.tf_record\"", ")", "\n", "file_based_convert_examples_to_features", "(", "\n", "eval_examples", ",", "label_list", ",", "FLAGS", ".", "max_seq_length", ",", "tokenizer", ",", "eval_file", ")", "\n", "\n", "tf", ".", "logging", ".", "info", "(", "\"***** Running evaluation *****\"", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"  Num examples = %d (%d actual, %d padding)\"", ",", "\n", "len", "(", "eval_examples", ")", ",", "num_actual_eval_examples", ",", "\n", "len", "(", "eval_examples", ")", "-", "num_actual_eval_examples", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"  Batch size = %d\"", ",", "FLAGS", ".", "eval_batch_size", ")", "\n", "\n", "# This tells the estimator to run through the entire set.", "\n", "eval_steps", "=", "None", "\n", "# However, if running eval on the TPU, you will need to specify the", "\n", "# number of steps.", "\n", "if", "FLAGS", ".", "use_tpu", ":", "\n", "      ", "assert", "len", "(", "eval_examples", ")", "%", "FLAGS", ".", "eval_batch_size", "==", "0", "\n", "eval_steps", "=", "int", "(", "len", "(", "eval_examples", ")", "//", "FLAGS", ".", "eval_batch_size", ")", "\n", "\n", "", "eval_drop_remainder", "=", "True", "if", "FLAGS", ".", "use_tpu", "else", "False", "\n", "eval_input_fn", "=", "file_based_input_fn_builder", "(", "\n", "input_file", "=", "eval_file", ",", "\n", "seq_length", "=", "FLAGS", ".", "max_seq_length", ",", "\n", "is_training", "=", "False", ",", "\n", "drop_remainder", "=", "eval_drop_remainder", ")", "\n", "\n", "result", "=", "estimator", ".", "evaluate", "(", "input_fn", "=", "eval_input_fn", ",", "steps", "=", "eval_steps", ")", "\n", "\n", "output_eval_file", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "output_dir", ",", "\"eval_results.txt\"", ")", "\n", "with", "tf", ".", "gfile", ".", "GFile", "(", "output_eval_file", ",", "\"w\"", ")", "as", "writer", ":", "\n", "      ", "tf", ".", "logging", ".", "info", "(", "\"***** Eval results *****\"", ")", "\n", "for", "key", "in", "sorted", "(", "result", ".", "keys", "(", ")", ")", ":", "\n", "        ", "tf", ".", "logging", ".", "info", "(", "\"  %s = %s\"", ",", "key", ",", "str", "(", "result", "[", "key", "]", ")", ")", "\n", "writer", ".", "write", "(", "\"%s = %s\\n\"", "%", "(", "key", ",", "str", "(", "result", "[", "key", "]", ")", ")", ")", "\n", "\n", "", "", "", "if", "FLAGS", ".", "do_predict", ":", "\n", "    ", "predict_examples", "=", "processor", ".", "get_test_examples", "(", "FLAGS", ".", "data_dir", ")", "\n", "num_actual_predict_examples", "=", "len", "(", "predict_examples", ")", "\n", "if", "FLAGS", ".", "use_tpu", ":", "\n", "# TPU requires a fixed batch size for all batches, therefore the number", "\n", "# of examples must be a multiple of the batch size, or else examples", "\n", "# will get dropped. So we pad with fake examples which are ignored", "\n", "# later on.", "\n", "      ", "while", "len", "(", "predict_examples", ")", "%", "FLAGS", ".", "predict_batch_size", "!=", "0", ":", "\n", "        ", "predict_examples", ".", "append", "(", "PaddingInputExample", "(", ")", ")", "\n", "\n", "", "", "predict_file", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "output_dir", ",", "\"predict.tf_record\"", ")", "\n", "file_based_convert_examples_to_features", "(", "predict_examples", ",", "label_list", ",", "\n", "FLAGS", ".", "max_seq_length", ",", "tokenizer", ",", "\n", "predict_file", ")", "\n", "\n", "tf", ".", "logging", ".", "info", "(", "\"***** Running prediction*****\"", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"  Num examples = %d (%d actual, %d padding)\"", ",", "\n", "len", "(", "predict_examples", ")", ",", "num_actual_predict_examples", ",", "\n", "len", "(", "predict_examples", ")", "-", "num_actual_predict_examples", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"  Batch size = %d\"", ",", "FLAGS", ".", "predict_batch_size", ")", "\n", "\n", "predict_drop_remainder", "=", "True", "if", "FLAGS", ".", "use_tpu", "else", "False", "\n", "predict_input_fn", "=", "file_based_input_fn_builder", "(", "\n", "input_file", "=", "predict_file", ",", "\n", "seq_length", "=", "FLAGS", ".", "max_seq_length", ",", "\n", "is_training", "=", "False", ",", "\n", "drop_remainder", "=", "predict_drop_remainder", ")", "\n", "\n", "result", "=", "estimator", ".", "predict", "(", "input_fn", "=", "predict_input_fn", ")", "\n", "\n", "output_predict_file", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "output_dir", ",", "\"test_results.tsv\"", ")", "\n", "with", "tf", ".", "gfile", ".", "GFile", "(", "output_predict_file", ",", "\"w\"", ")", "as", "writer", ":", "\n", "      ", "num_written_lines", "=", "0", "\n", "tf", ".", "logging", ".", "info", "(", "\"***** Predict results *****\"", ")", "\n", "for", "(", "i", ",", "prediction", ")", "in", "enumerate", "(", "result", ")", ":", "\n", "        ", "probabilities", "=", "prediction", "[", "\"probabilities\"", "]", "\n", "if", "i", ">=", "num_actual_predict_examples", ":", "\n", "          ", "break", "\n", "", "output_line", "=", "\"\\t\"", ".", "join", "(", "\n", "str", "(", "class_probability", ")", "\n", "for", "class_probability", "in", "probabilities", ")", "+", "\"\\n\"", "\n", "writer", ".", "write", "(", "output_line", ")", "\n", "num_written_lines", "+=", "1", "\n", "", "", "assert", "num_written_lines", "==", "num_actual_predict_examples", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization_test.TokenizationTest.test_full_tokenizer": [[28, 50], ["tokenization.FullTokenizer", "os.unlink", "tokenization.FullTokenizer.tokenize", "tokenization_test.TokenizationTest.assertAllEqual", "tokenization_test.TokenizationTest.assertAllEqual", "tempfile.NamedTemporaryFile", "tokenization.FullTokenizer.convert_tokens_to_ids", "vocab_writer.write", "vocab_writer.write"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.WordpieceTokenizer.tokenize", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.convert_tokens_to_ids", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.write", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.write"], ["  ", "def", "test_full_tokenizer", "(", "self", ")", ":", "\n", "    ", "vocab_tokens", "=", "[", "\n", "\"[UNK]\"", ",", "\"[CLS]\"", ",", "\"[SEP]\"", ",", "\"want\"", ",", "\"##want\"", ",", "\"##ed\"", ",", "\"wa\"", ",", "\"un\"", ",", "\"runn\"", ",", "\n", "\"##ing\"", ",", "\",\"", "\n", "]", "\n", "with", "tempfile", ".", "NamedTemporaryFile", "(", "delete", "=", "False", ")", "as", "vocab_writer", ":", "\n", "      ", "if", "six", ".", "PY2", ":", "\n", "        ", "vocab_writer", ".", "write", "(", "\"\"", ".", "join", "(", "[", "x", "+", "\"\\n\"", "for", "x", "in", "vocab_tokens", "]", ")", ")", "\n", "", "else", ":", "\n", "        ", "vocab_writer", ".", "write", "(", "\"\"", ".", "join", "(", "\n", "[", "x", "+", "\"\\n\"", "for", "x", "in", "vocab_tokens", "]", ")", ".", "encode", "(", "\"utf-8\"", ")", ")", "\n", "\n", "", "vocab_file", "=", "vocab_writer", ".", "name", "\n", "\n", "", "tokenizer", "=", "tokenization", ".", "FullTokenizer", "(", "vocab_file", ")", "\n", "os", ".", "unlink", "(", "vocab_file", ")", "\n", "\n", "tokens", "=", "tokenizer", ".", "tokenize", "(", "u\"UNwant\\u00E9d,running\"", ")", "\n", "self", ".", "assertAllEqual", "(", "tokens", ",", "[", "\"un\"", ",", "\"##want\"", ",", "\"##ed\"", ",", "\",\"", ",", "\"runn\"", ",", "\"##ing\"", "]", ")", "\n", "\n", "self", ".", "assertAllEqual", "(", "\n", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokens", ")", ",", "[", "7", ",", "4", ",", "5", ",", "10", ",", "8", ",", "9", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization_test.TokenizationTest.test_chinese": [[51, 57], ["tokenization.BasicTokenizer", "tokenization_test.TokenizationTest.assertAllEqual", "tokenization.BasicTokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.WordpieceTokenizer.tokenize"], ["", "def", "test_chinese", "(", "self", ")", ":", "\n", "    ", "tokenizer", "=", "tokenization", ".", "BasicTokenizer", "(", ")", "\n", "\n", "self", ".", "assertAllEqual", "(", "\n", "tokenizer", ".", "tokenize", "(", "u\"ah\\u535A\\u63A8zz\"", ")", ",", "\n", "[", "u\"ah\"", ",", "u\"\\u535A\"", ",", "u\"\\u63A8\"", ",", "u\"zz\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization_test.TokenizationTest.test_basic_tokenizer_lower": [[58, 65], ["tokenization.BasicTokenizer", "tokenization_test.TokenizationTest.assertAllEqual", "tokenization_test.TokenizationTest.assertAllEqual", "tokenization.BasicTokenizer.tokenize", "tokenization.BasicTokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.WordpieceTokenizer.tokenize", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.WordpieceTokenizer.tokenize"], ["", "def", "test_basic_tokenizer_lower", "(", "self", ")", ":", "\n", "    ", "tokenizer", "=", "tokenization", ".", "BasicTokenizer", "(", "do_lower_case", "=", "True", ")", "\n", "\n", "self", ".", "assertAllEqual", "(", "\n", "tokenizer", ".", "tokenize", "(", "u\" \\tHeLLo!how  \\n Are yoU?  \"", ")", ",", "\n", "[", "\"hello\"", ",", "\"!\"", ",", "\"how\"", ",", "\"are\"", ",", "\"you\"", ",", "\"?\"", "]", ")", "\n", "self", ".", "assertAllEqual", "(", "tokenizer", ".", "tokenize", "(", "u\"H\\u00E9llo\"", ")", ",", "[", "\"hello\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization_test.TokenizationTest.test_basic_tokenizer_no_lower": [[66, 72], ["tokenization.BasicTokenizer", "tokenization_test.TokenizationTest.assertAllEqual", "tokenization.BasicTokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.WordpieceTokenizer.tokenize"], ["", "def", "test_basic_tokenizer_no_lower", "(", "self", ")", ":", "\n", "    ", "tokenizer", "=", "tokenization", ".", "BasicTokenizer", "(", "do_lower_case", "=", "False", ")", "\n", "\n", "self", ".", "assertAllEqual", "(", "\n", "tokenizer", ".", "tokenize", "(", "u\" \\tHeLLo!how  \\n Are yoU?  \"", ")", ",", "\n", "[", "\"HeLLo\"", ",", "\"!\"", ",", "\"how\"", ",", "\"Are\"", ",", "\"yoU\"", ",", "\"?\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization_test.TokenizationTest.test_wordpiece_tokenizer": [[73, 92], ["enumerate", "tokenization.WordpieceTokenizer", "tokenization_test.TokenizationTest.assertAllEqual", "tokenization_test.TokenizationTest.assertAllEqual", "tokenization_test.TokenizationTest.assertAllEqual", "tokenization.WordpieceTokenizer.tokenize", "tokenization.WordpieceTokenizer.tokenize", "tokenization.WordpieceTokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.WordpieceTokenizer.tokenize", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.WordpieceTokenizer.tokenize", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.WordpieceTokenizer.tokenize"], ["", "def", "test_wordpiece_tokenizer", "(", "self", ")", ":", "\n", "    ", "vocab_tokens", "=", "[", "\n", "\"[UNK]\"", ",", "\"[CLS]\"", ",", "\"[SEP]\"", ",", "\"want\"", ",", "\"##want\"", ",", "\"##ed\"", ",", "\"wa\"", ",", "\"un\"", ",", "\"runn\"", ",", "\n", "\"##ing\"", "\n", "]", "\n", "\n", "vocab", "=", "{", "}", "\n", "for", "(", "i", ",", "token", ")", "in", "enumerate", "(", "vocab_tokens", ")", ":", "\n", "      ", "vocab", "[", "token", "]", "=", "i", "\n", "", "tokenizer", "=", "tokenization", ".", "WordpieceTokenizer", "(", "vocab", "=", "vocab", ")", "\n", "\n", "self", ".", "assertAllEqual", "(", "tokenizer", ".", "tokenize", "(", "\"\"", ")", ",", "[", "]", ")", "\n", "\n", "self", ".", "assertAllEqual", "(", "\n", "tokenizer", ".", "tokenize", "(", "\"unwanted running\"", ")", ",", "\n", "[", "\"un\"", ",", "\"##want\"", ",", "\"##ed\"", ",", "\"runn\"", ",", "\"##ing\"", "]", ")", "\n", "\n", "self", ".", "assertAllEqual", "(", "\n", "tokenizer", ".", "tokenize", "(", "\"unwantedX running\"", ")", ",", "[", "\"[UNK]\"", ",", "\"runn\"", ",", "\"##ing\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization_test.TokenizationTest.test_convert_tokens_to_ids": [[93, 106], ["enumerate", "tokenization_test.TokenizationTest.assertAllEqual", "tokenization.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.convert_tokens_to_ids"], ["", "def", "test_convert_tokens_to_ids", "(", "self", ")", ":", "\n", "    ", "vocab_tokens", "=", "[", "\n", "\"[UNK]\"", ",", "\"[CLS]\"", ",", "\"[SEP]\"", ",", "\"want\"", ",", "\"##want\"", ",", "\"##ed\"", ",", "\"wa\"", ",", "\"un\"", ",", "\"runn\"", ",", "\n", "\"##ing\"", "\n", "]", "\n", "\n", "vocab", "=", "{", "}", "\n", "for", "(", "i", ",", "token", ")", "in", "enumerate", "(", "vocab_tokens", ")", ":", "\n", "      ", "vocab", "[", "token", "]", "=", "i", "\n", "\n", "", "self", ".", "assertAllEqual", "(", "\n", "tokenization", ".", "convert_tokens_to_ids", "(", "\n", "vocab", ",", "[", "\"un\"", ",", "\"##want\"", ",", "\"##ed\"", ",", "\"runn\"", ",", "\"##ing\"", "]", ")", ",", "[", "7", ",", "4", ",", "5", ",", "8", ",", "9", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization_test.TokenizationTest.test_is_whitespace": [[107, 116], ["tokenization_test.TokenizationTest.assertTrue", "tokenization_test.TokenizationTest.assertTrue", "tokenization_test.TokenizationTest.assertTrue", "tokenization_test.TokenizationTest.assertTrue", "tokenization_test.TokenizationTest.assertTrue", "tokenization_test.TokenizationTest.assertFalse", "tokenization_test.TokenizationTest.assertFalse", "tokenization._is_whitespace", "tokenization._is_whitespace", "tokenization._is_whitespace", "tokenization._is_whitespace", "tokenization._is_whitespace", "tokenization._is_whitespace", "tokenization._is_whitespace"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization._is_whitespace", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization._is_whitespace", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization._is_whitespace", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization._is_whitespace", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization._is_whitespace", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization._is_whitespace", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization._is_whitespace"], ["", "def", "test_is_whitespace", "(", "self", ")", ":", "\n", "    ", "self", ".", "assertTrue", "(", "tokenization", ".", "_is_whitespace", "(", "u\" \"", ")", ")", "\n", "self", ".", "assertTrue", "(", "tokenization", ".", "_is_whitespace", "(", "u\"\\t\"", ")", ")", "\n", "self", ".", "assertTrue", "(", "tokenization", ".", "_is_whitespace", "(", "u\"\\r\"", ")", ")", "\n", "self", ".", "assertTrue", "(", "tokenization", ".", "_is_whitespace", "(", "u\"\\n\"", ")", ")", "\n", "self", ".", "assertTrue", "(", "tokenization", ".", "_is_whitespace", "(", "u\"\\u00A0\"", ")", ")", "\n", "\n", "self", ".", "assertFalse", "(", "tokenization", ".", "_is_whitespace", "(", "u\"A\"", ")", ")", "\n", "self", ".", "assertFalse", "(", "tokenization", ".", "_is_whitespace", "(", "u\"-\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization_test.TokenizationTest.test_is_control": [[117, 124], ["tokenization_test.TokenizationTest.assertTrue", "tokenization_test.TokenizationTest.assertFalse", "tokenization_test.TokenizationTest.assertFalse", "tokenization_test.TokenizationTest.assertFalse", "tokenization_test.TokenizationTest.assertFalse", "tokenization._is_control", "tokenization._is_control", "tokenization._is_control", "tokenization._is_control", "tokenization._is_control"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization._is_control", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization._is_control", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization._is_control", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization._is_control", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization._is_control"], ["", "def", "test_is_control", "(", "self", ")", ":", "\n", "    ", "self", ".", "assertTrue", "(", "tokenization", ".", "_is_control", "(", "u\"\\u0005\"", ")", ")", "\n", "\n", "self", ".", "assertFalse", "(", "tokenization", ".", "_is_control", "(", "u\"A\"", ")", ")", "\n", "self", ".", "assertFalse", "(", "tokenization", ".", "_is_control", "(", "u\" \"", ")", ")", "\n", "self", ".", "assertFalse", "(", "tokenization", ".", "_is_control", "(", "u\"\\t\"", ")", ")", "\n", "self", ".", "assertFalse", "(", "tokenization", ".", "_is_control", "(", "u\"\\r\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization_test.TokenizationTest.test_is_punctuation": [[125, 133], ["tokenization_test.TokenizationTest.assertTrue", "tokenization_test.TokenizationTest.assertTrue", "tokenization_test.TokenizationTest.assertTrue", "tokenization_test.TokenizationTest.assertTrue", "tokenization_test.TokenizationTest.assertFalse", "tokenization_test.TokenizationTest.assertFalse", "tokenization._is_punctuation", "tokenization._is_punctuation", "tokenization._is_punctuation", "tokenization._is_punctuation", "tokenization._is_punctuation", "tokenization._is_punctuation"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization._is_punctuation", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization._is_punctuation", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization._is_punctuation", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization._is_punctuation", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization._is_punctuation", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization._is_punctuation"], ["", "def", "test_is_punctuation", "(", "self", ")", ":", "\n", "    ", "self", ".", "assertTrue", "(", "tokenization", ".", "_is_punctuation", "(", "u\"-\"", ")", ")", "\n", "self", ".", "assertTrue", "(", "tokenization", ".", "_is_punctuation", "(", "u\"$\"", ")", ")", "\n", "self", ".", "assertTrue", "(", "tokenization", ".", "_is_punctuation", "(", "u\"`\"", ")", ")", "\n", "self", ".", "assertTrue", "(", "tokenization", ".", "_is_punctuation", "(", "u\".\"", ")", ")", "\n", "\n", "self", ".", "assertFalse", "(", "tokenization", ".", "_is_punctuation", "(", "u\"A\"", ")", ")", "\n", "self", ".", "assertFalse", "(", "tokenization", ".", "_is_punctuation", "(", "u\" \"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.FullTokenizer.__init__": [[164, 169], ["tokenization.load_vocab", "tokenization.BasicTokenizer", "tokenization.WordpieceTokenizer", "tokenization.FullTokenizer.vocab.items"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.load_vocab"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "do_lower_case", "=", "True", ")", ":", "\n", "    ", "self", ".", "vocab", "=", "load_vocab", "(", "vocab_file", ")", "\n", "self", ".", "inv_vocab", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "vocab", ".", "items", "(", ")", "}", "\n", "self", ".", "basic_tokenizer", "=", "BasicTokenizer", "(", "do_lower_case", "=", "do_lower_case", ")", "\n", "self", ".", "wordpiece_tokenizer", "=", "WordpieceTokenizer", "(", "vocab", "=", "self", ".", "vocab", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.FullTokenizer.tokenize": [[170, 177], ["tokenization.FullTokenizer.basic_tokenizer.tokenize", "tokenization.FullTokenizer.wordpiece_tokenizer.tokenize", "split_tokens.append"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.WordpieceTokenizer.tokenize", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.WordpieceTokenizer.tokenize"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "    ", "split_tokens", "=", "[", "]", "\n", "for", "token", "in", "self", ".", "basic_tokenizer", ".", "tokenize", "(", "text", ")", ":", "\n", "      ", "for", "sub_token", "in", "self", ".", "wordpiece_tokenizer", ".", "tokenize", "(", "token", ")", ":", "\n", "        ", "split_tokens", ".", "append", "(", "sub_token", ")", "\n", "\n", "", "", "return", "split_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.FullTokenizer.convert_tokens_to_ids": [[178, 180], ["tokenization.convert_by_vocab"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.convert_by_vocab"], ["", "def", "convert_tokens_to_ids", "(", "self", ",", "tokens", ")", ":", "\n", "    ", "return", "convert_by_vocab", "(", "self", ".", "vocab", ",", "tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.FullTokenizer.convert_ids_to_tokens": [[181, 183], ["tokenization.convert_by_vocab"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.convert_by_vocab"], ["", "def", "convert_ids_to_tokens", "(", "self", ",", "ids", ")", ":", "\n", "    ", "return", "convert_by_vocab", "(", "self", ".", "inv_vocab", ",", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.BasicTokenizer.__init__": [[188, 195], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "do_lower_case", "=", "True", ")", ":", "\n", "    ", "\"\"\"Constructs a BasicTokenizer.\n\n    Args:\n      do_lower_case: Whether to lower case the input.\n    \"\"\"", "\n", "self", ".", "do_lower_case", "=", "do_lower_case", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.BasicTokenizer.tokenize": [[196, 219], ["tokenization.convert_to_unicode", "tokenization.BasicTokenizer._clean_text", "tokenization.BasicTokenizer._tokenize_chinese_chars", "tokenization.whitespace_tokenize", "tokenization.whitespace_tokenize", "split_tokens.extend", "tokenization.BasicTokenizer.lower", "tokenization.BasicTokenizer._run_strip_accents", "tokenization.BasicTokenizer._run_split_on_punc"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.BasicTokenizer._clean_text", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.BasicTokenizer._tokenize_chinese_chars", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.whitespace_tokenize", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.whitespace_tokenize", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.BasicTokenizer._run_strip_accents", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.BasicTokenizer._run_split_on_punc"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "    ", "\"\"\"Tokenizes a piece of text.\"\"\"", "\n", "text", "=", "convert_to_unicode", "(", "text", ")", "\n", "text", "=", "self", ".", "_clean_text", "(", "text", ")", "\n", "\n", "# This was added on November 1st, 2018 for the multilingual and Chinese", "\n", "# models. This is also applied to the English models now, but it doesn't", "\n", "# matter since the English models were not trained on any Chinese data", "\n", "# and generally don't have any Chinese data in them (there are Chinese", "\n", "# characters in the vocabulary because Wikipedia does have some Chinese", "\n", "# words in the English Wikipedia.).", "\n", "text", "=", "self", ".", "_tokenize_chinese_chars", "(", "text", ")", "\n", "\n", "orig_tokens", "=", "whitespace_tokenize", "(", "text", ")", "\n", "split_tokens", "=", "[", "]", "\n", "for", "token", "in", "orig_tokens", ":", "\n", "      ", "if", "self", ".", "do_lower_case", ":", "\n", "        ", "token", "=", "token", ".", "lower", "(", ")", "\n", "token", "=", "self", ".", "_run_strip_accents", "(", "token", ")", "\n", "", "split_tokens", ".", "extend", "(", "self", ".", "_run_split_on_punc", "(", "token", ")", ")", "\n", "\n", "", "output_tokens", "=", "whitespace_tokenize", "(", "\" \"", ".", "join", "(", "split_tokens", ")", ")", "\n", "return", "output_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.BasicTokenizer._run_strip_accents": [[220, 230], ["unicodedata.normalize", "unicodedata.category", "output.append"], "methods", ["None"], ["", "def", "_run_strip_accents", "(", "self", ",", "text", ")", ":", "\n", "    ", "\"\"\"Strips accents from a piece of text.\"\"\"", "\n", "text", "=", "unicodedata", ".", "normalize", "(", "\"NFD\"", ",", "text", ")", "\n", "output", "=", "[", "]", "\n", "for", "char", "in", "text", ":", "\n", "      ", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", "==", "\"Mn\"", ":", "\n", "        ", "continue", "\n", "", "output", ".", "append", "(", "char", ")", "\n", "", "return", "\"\"", ".", "join", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.BasicTokenizer._run_split_on_punc": [[231, 250], ["list", "len", "tokenization._is_punctuation", "output.append", "output[].append", "output.append"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization._is_punctuation"], ["", "def", "_run_split_on_punc", "(", "self", ",", "text", ")", ":", "\n", "    ", "\"\"\"Splits punctuation on a piece of text.\"\"\"", "\n", "chars", "=", "list", "(", "text", ")", "\n", "i", "=", "0", "\n", "start_new_word", "=", "True", "\n", "output", "=", "[", "]", "\n", "while", "i", "<", "len", "(", "chars", ")", ":", "\n", "      ", "char", "=", "chars", "[", "i", "]", "\n", "if", "_is_punctuation", "(", "char", ")", ":", "\n", "        ", "output", ".", "append", "(", "[", "char", "]", ")", "\n", "start_new_word", "=", "True", "\n", "", "else", ":", "\n", "        ", "if", "start_new_word", ":", "\n", "          ", "output", ".", "append", "(", "[", "]", ")", "\n", "", "start_new_word", "=", "False", "\n", "output", "[", "-", "1", "]", ".", "append", "(", "char", ")", "\n", "", "i", "+=", "1", "\n", "\n", "", "return", "[", "\"\"", ".", "join", "(", "x", ")", "for", "x", "in", "output", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.BasicTokenizer._tokenize_chinese_chars": [[251, 263], ["ord", "tokenization.BasicTokenizer._is_chinese_char", "output.append", "output.append", "output.append", "output.append"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.BasicTokenizer._is_chinese_char"], ["", "def", "_tokenize_chinese_chars", "(", "self", ",", "text", ")", ":", "\n", "    ", "\"\"\"Adds whitespace around any CJK character.\"\"\"", "\n", "output", "=", "[", "]", "\n", "for", "char", "in", "text", ":", "\n", "      ", "cp", "=", "ord", "(", "char", ")", "\n", "if", "self", ".", "_is_chinese_char", "(", "cp", ")", ":", "\n", "        ", "output", ".", "append", "(", "\" \"", ")", "\n", "output", ".", "append", "(", "char", ")", "\n", "output", ".", "append", "(", "\" \"", ")", "\n", "", "else", ":", "\n", "        ", "output", ".", "append", "(", "char", ")", "\n", "", "", "return", "\"\"", ".", "join", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.BasicTokenizer._is_chinese_char": [[264, 285], ["None"], "methods", ["None"], ["", "def", "_is_chinese_char", "(", "self", ",", "cp", ")", ":", "\n", "    ", "\"\"\"Checks whether CP is the codepoint of a CJK character.\"\"\"", "\n", "# This defines a \"chinese character\" as anything in the CJK Unicode block:", "\n", "#   https://en.wikipedia.org/wiki/CJK_Unified_Ideographs_(Unicode_block)", "\n", "#", "\n", "# Note that the CJK Unicode block is NOT all Japanese and Korean characters,", "\n", "# despite its name. The modern Korean Hangul alphabet is a different block,", "\n", "# as is Japanese Hiragana and Katakana. Those alphabets are used to write", "\n", "# space-separated words, so they are not treated specially and handled", "\n", "# like the all of the other languages.", "\n", "if", "(", "(", "cp", ">=", "0x4E00", "and", "cp", "<=", "0x9FFF", ")", "or", "#", "\n", "(", "cp", ">=", "0x3400", "and", "cp", "<=", "0x4DBF", ")", "or", "#", "\n", "(", "cp", ">=", "0x20000", "and", "cp", "<=", "0x2A6DF", ")", "or", "#", "\n", "(", "cp", ">=", "0x2A700", "and", "cp", "<=", "0x2B73F", ")", "or", "#", "\n", "(", "cp", ">=", "0x2B740", "and", "cp", "<=", "0x2B81F", ")", "or", "#", "\n", "(", "cp", ">=", "0x2B820", "and", "cp", "<=", "0x2CEAF", ")", "or", "\n", "(", "cp", ">=", "0xF900", "and", "cp", "<=", "0xFAFF", ")", "or", "#", "\n", "(", "cp", ">=", "0x2F800", "and", "cp", "<=", "0x2FA1F", ")", ")", ":", "#", "\n", "      ", "return", "True", "\n", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.BasicTokenizer._clean_text": [[286, 298], ["ord", "tokenization._is_whitespace", "tokenization._is_control", "output.append", "output.append"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization._is_whitespace", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization._is_control"], ["", "def", "_clean_text", "(", "self", ",", "text", ")", ":", "\n", "    ", "\"\"\"Performs invalid character removal and whitespace cleanup on text.\"\"\"", "\n", "output", "=", "[", "]", "\n", "for", "char", "in", "text", ":", "\n", "      ", "cp", "=", "ord", "(", "char", ")", "\n", "if", "cp", "==", "0", "or", "cp", "==", "0xfffd", "or", "_is_control", "(", "char", ")", ":", "\n", "        ", "continue", "\n", "", "if", "_is_whitespace", "(", "char", ")", ":", "\n", "        ", "output", ".", "append", "(", "\" \"", ")", "\n", "", "else", ":", "\n", "        ", "output", ".", "append", "(", "char", ")", "\n", "", "", "return", "\"\"", ".", "join", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.WordpieceTokenizer.__init__": [[303, 307], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "vocab", ",", "unk_token", "=", "\"[UNK]\"", ",", "max_input_chars_per_word", "=", "200", ")", ":", "\n", "    ", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "unk_token", "=", "unk_token", "\n", "self", ".", "max_input_chars_per_word", "=", "max_input_chars_per_word", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.WordpieceTokenizer.tokenize": [[308, 360], ["tokenization.convert_to_unicode", "tokenization.whitespace_tokenize", "list", "len", "output_tokens.append", "len", "len", "sub_tokens.append", "output_tokens.append", "output_tokens.extend"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.convert_to_unicode", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.whitespace_tokenize"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "    ", "\"\"\"Tokenizes a piece of text into its word pieces.\n\n    This uses a greedy longest-match-first algorithm to perform tokenization\n    using the given vocabulary.\n\n    For example:\n      input = \"unaffable\"\n      output = [\"un\", \"##aff\", \"##able\"]\n\n    Args:\n      text: A single token or whitespace separated tokens. This should have\n        already been passed through `BasicTokenizer.\n\n    Returns:\n      A list of wordpiece tokens.\n    \"\"\"", "\n", "\n", "text", "=", "convert_to_unicode", "(", "text", ")", "\n", "\n", "output_tokens", "=", "[", "]", "\n", "for", "token", "in", "whitespace_tokenize", "(", "text", ")", ":", "\n", "      ", "chars", "=", "list", "(", "token", ")", "\n", "if", "len", "(", "chars", ")", ">", "self", ".", "max_input_chars_per_word", ":", "\n", "        ", "output_tokens", ".", "append", "(", "self", ".", "unk_token", ")", "\n", "continue", "\n", "\n", "", "is_bad", "=", "False", "\n", "start", "=", "0", "\n", "sub_tokens", "=", "[", "]", "\n", "while", "start", "<", "len", "(", "chars", ")", ":", "\n", "        ", "end", "=", "len", "(", "chars", ")", "\n", "cur_substr", "=", "None", "\n", "while", "start", "<", "end", ":", "\n", "          ", "substr", "=", "\"\"", ".", "join", "(", "chars", "[", "start", ":", "end", "]", ")", "\n", "if", "start", ">", "0", ":", "\n", "            ", "substr", "=", "\"##\"", "+", "substr", "\n", "", "if", "substr", "in", "self", ".", "vocab", ":", "\n", "            ", "cur_substr", "=", "substr", "\n", "break", "\n", "", "end", "-=", "1", "\n", "", "if", "cur_substr", "is", "None", ":", "\n", "          ", "is_bad", "=", "True", "\n", "break", "\n", "", "sub_tokens", ".", "append", "(", "cur_substr", ")", "\n", "start", "=", "end", "\n", "\n", "", "if", "is_bad", ":", "\n", "        ", "output_tokens", ".", "append", "(", "self", ".", "unk_token", ")", "\n", "", "else", ":", "\n", "        ", "output_tokens", ".", "extend", "(", "sub_tokens", ")", "\n", "", "", "return", "output_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.validate_case_matches_checkpoint": [[28, 76], ["re.match", "re.match.group", "ValueError"], "function", ["None"], ["def", "validate_case_matches_checkpoint", "(", "do_lower_case", ",", "init_checkpoint", ")", ":", "\n", "  ", "\"\"\"Checks whether the casing config is consistent with the checkpoint name.\"\"\"", "\n", "\n", "# The casing has to be passed in by the user and there is no explicit check", "\n", "# as to whether it matches the checkpoint. The casing information probably", "\n", "# should have been stored in the bert_config.json file, but it's not, so", "\n", "# we have to heuristically detect it to validate.", "\n", "\n", "if", "not", "init_checkpoint", ":", "\n", "    ", "return", "\n", "\n", "", "m", "=", "re", ".", "match", "(", "\"^.*?([A-Za-z0-9_-]+)/bert_model.ckpt\"", ",", "init_checkpoint", ")", "\n", "if", "m", "is", "None", ":", "\n", "    ", "return", "\n", "\n", "", "model_name", "=", "m", ".", "group", "(", "1", ")", "\n", "\n", "lower_models", "=", "[", "\n", "\"uncased_L-24_H-1024_A-16\"", ",", "\"uncased_L-12_H-768_A-12\"", ",", "\n", "\"multilingual_L-12_H-768_A-12\"", ",", "\"chinese_L-12_H-768_A-12\"", "\n", "]", "\n", "\n", "cased_models", "=", "[", "\n", "\"cased_L-12_H-768_A-12\"", ",", "\"cased_L-24_H-1024_A-16\"", ",", "\n", "\"multi_cased_L-12_H-768_A-12\"", "\n", "]", "\n", "\n", "is_bad_config", "=", "False", "\n", "if", "model_name", "in", "lower_models", "and", "not", "do_lower_case", ":", "\n", "    ", "is_bad_config", "=", "True", "\n", "actual_flag", "=", "\"False\"", "\n", "case_name", "=", "\"lowercased\"", "\n", "opposite_flag", "=", "\"True\"", "\n", "\n", "", "if", "model_name", "in", "cased_models", "and", "do_lower_case", ":", "\n", "    ", "is_bad_config", "=", "True", "\n", "actual_flag", "=", "\"True\"", "\n", "case_name", "=", "\"cased\"", "\n", "opposite_flag", "=", "\"False\"", "\n", "\n", "", "if", "is_bad_config", ":", "\n", "    ", "raise", "ValueError", "(", "\n", "\"You passed in `--do_lower_case=%s` with `--init_checkpoint=%s`. \"", "\n", "\"However, `%s` seems to be a %s model, so you \"", "\n", "\"should pass in `--do_lower_case=%s` so that the fine-tuning matches \"", "\n", "\"how the model was pre-training. If this error is wrong, please \"", "\n", "\"just comment out this check.\"", "%", "(", "actual_flag", ",", "init_checkpoint", ",", "\n", "model_name", ",", "case_name", ",", "opposite_flag", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.convert_to_unicode": [[78, 96], ["isinstance", "isinstance", "isinstance", "ValueError", "text.decode", "ValueError", "text.decode", "isinstance", "ValueError", "type", "type"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.decode", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.decode"], ["", "", "def", "convert_to_unicode", "(", "text", ")", ":", "\n", "  ", "\"\"\"Converts `text` to Unicode (if it's not already), assuming utf-8 input.\"\"\"", "\n", "if", "six", ".", "PY3", ":", "\n", "    ", "if", "isinstance", "(", "text", ",", "str", ")", ":", "\n", "      ", "return", "text", "\n", "", "elif", "isinstance", "(", "text", ",", "bytes", ")", ":", "\n", "      ", "return", "text", ".", "decode", "(", "\"utf-8\"", ",", "\"ignore\"", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "\"Unsupported string type: %s\"", "%", "(", "type", "(", "text", ")", ")", ")", "\n", "", "", "elif", "six", ".", "PY2", ":", "\n", "    ", "if", "isinstance", "(", "text", ",", "str", ")", ":", "\n", "      ", "return", "text", ".", "decode", "(", "\"utf-8\"", ",", "\"ignore\"", ")", "\n", "", "elif", "isinstance", "(", "text", ",", "unicode", ")", ":", "\n", "      ", "return", "text", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "\"Unsupported string type: %s\"", "%", "(", "type", "(", "text", ")", ")", ")", "\n", "", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "\"Not running on Python2 or Python 3?\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.printable_text": [[98, 119], ["isinstance", "isinstance", "isinstance", "ValueError", "text.decode", "ValueError", "isinstance", "text.encode", "ValueError", "type", "type"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.decode"], ["", "", "def", "printable_text", "(", "text", ")", ":", "\n", "  ", "\"\"\"Returns text encoded in a way suitable for print or `tf.logging`.\"\"\"", "\n", "\n", "# These functions want `str` for both Python2 and Python3, but in one case", "\n", "# it's a Unicode string and in the other it's a byte string.", "\n", "if", "six", ".", "PY3", ":", "\n", "    ", "if", "isinstance", "(", "text", ",", "str", ")", ":", "\n", "      ", "return", "text", "\n", "", "elif", "isinstance", "(", "text", ",", "bytes", ")", ":", "\n", "      ", "return", "text", ".", "decode", "(", "\"utf-8\"", ",", "\"ignore\"", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "\"Unsupported string type: %s\"", "%", "(", "type", "(", "text", ")", ")", ")", "\n", "", "", "elif", "six", ".", "PY2", ":", "\n", "    ", "if", "isinstance", "(", "text", ",", "str", ")", ":", "\n", "      ", "return", "text", "\n", "", "elif", "isinstance", "(", "text", ",", "unicode", ")", ":", "\n", "      ", "return", "text", ".", "encode", "(", "\"utf-8\"", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "\"Unsupported string type: %s\"", "%", "(", "type", "(", "text", ")", ")", ")", "\n", "", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "\"Not running on Python2 or Python 3?\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.load_vocab": [[121, 134], ["collections.OrderedDict", "tensorflow.gfile.GFile", "tokenization.convert_to_unicode", "token.strip.strip", "reader.readline"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.convert_to_unicode"], ["", "", "def", "load_vocab", "(", "vocab_file", ")", ":", "\n", "  ", "\"\"\"Loads a vocabulary file into a dictionary.\"\"\"", "\n", "vocab", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "index", "=", "0", "\n", "with", "tf", ".", "gfile", ".", "GFile", "(", "vocab_file", ",", "\"r\"", ")", "as", "reader", ":", "\n", "    ", "while", "True", ":", "\n", "      ", "token", "=", "convert_to_unicode", "(", "reader", ".", "readline", "(", ")", ")", "\n", "if", "not", "token", ":", "\n", "        ", "break", "\n", "", "token", "=", "token", ".", "strip", "(", ")", "\n", "vocab", "[", "token", "]", "=", "index", "\n", "index", "+=", "1", "\n", "", "", "return", "vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.convert_by_vocab": [[136, 142], ["output.append"], "function", ["None"], ["", "def", "convert_by_vocab", "(", "vocab", ",", "items", ")", ":", "\n", "  ", "\"\"\"Converts a sequence of [tokens|ids] using the vocab.\"\"\"", "\n", "output", "=", "[", "]", "\n", "for", "item", "in", "items", ":", "\n", "    ", "output", ".", "append", "(", "vocab", "[", "item", "]", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.convert_tokens_to_ids": [[144, 146], ["tokenization.convert_by_vocab"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.convert_by_vocab"], ["", "def", "convert_tokens_to_ids", "(", "vocab", ",", "tokens", ")", ":", "\n", "  ", "return", "convert_by_vocab", "(", "vocab", ",", "tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.convert_ids_to_tokens": [[148, 150], ["tokenization.convert_by_vocab"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.convert_by_vocab"], ["", "def", "convert_ids_to_tokens", "(", "inv_vocab", ",", "ids", ")", ":", "\n", "  ", "return", "convert_by_vocab", "(", "inv_vocab", ",", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.whitespace_tokenize": [[152, 159], ["text.strip.strip", "text.strip.split"], "function", ["None"], ["", "def", "whitespace_tokenize", "(", "text", ")", ":", "\n", "  ", "\"\"\"Runs basic whitespace cleaning and splitting on a piece of text.\"\"\"", "\n", "text", "=", "text", ".", "strip", "(", ")", "\n", "if", "not", "text", ":", "\n", "    ", "return", "[", "]", "\n", "", "tokens", "=", "text", ".", "split", "(", ")", "\n", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization._is_whitespace": [[362, 372], ["unicodedata.category"], "function", ["None"], ["", "", "def", "_is_whitespace", "(", "char", ")", ":", "\n", "  ", "\"\"\"Checks whether `chars` is a whitespace character.\"\"\"", "\n", "# \\t, \\n, and \\r are technically contorl characters but we treat them", "\n", "# as whitespace since they are generally considered as such.", "\n", "if", "char", "==", "\" \"", "or", "char", "==", "\"\\t\"", "or", "char", "==", "\"\\n\"", "or", "char", "==", "\"\\r\"", ":", "\n", "    ", "return", "True", "\n", "", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", "==", "\"Zs\"", ":", "\n", "    ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization._is_control": [[374, 384], ["unicodedata.category", "unicodedata.category.startswith"], "function", ["None"], ["", "def", "_is_control", "(", "char", ")", ":", "\n", "  ", "\"\"\"Checks whether `chars` is a control character.\"\"\"", "\n", "# These are technically control characters but we count them as whitespace", "\n", "# characters.", "\n", "if", "char", "==", "\"\\t\"", "or", "char", "==", "\"\\n\"", "or", "char", "==", "\"\\r\"", ":", "\n", "    ", "return", "False", "\n", "", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", ".", "startswith", "(", "\"C\"", ")", ":", "\n", "    ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization._is_punctuation": [[386, 400], ["ord", "unicodedata.category", "unicodedata.category.startswith"], "function", ["None"], ["", "def", "_is_punctuation", "(", "char", ")", ":", "\n", "  ", "\"\"\"Checks whether `chars` is a punctuation character.\"\"\"", "\n", "cp", "=", "ord", "(", "char", ")", "\n", "# We treat all non-letter/number ASCII as punctuation.", "\n", "# Characters such as \"^\", \"$\", and \"`\" are not in the Unicode", "\n", "# Punctuation class but we treat them as punctuation anyways, for", "\n", "# consistency.", "\n", "if", "(", "(", "cp", ">=", "33", "and", "cp", "<=", "47", ")", "or", "(", "cp", ">=", "58", "and", "cp", "<=", "64", ")", "or", "\n", "(", "cp", ">=", "91", "and", "cp", "<=", "96", ")", "or", "(", "cp", ">=", "123", "and", "cp", "<=", "126", ")", ")", ":", "\n", "    ", "return", "True", "\n", "", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", ".", "startswith", "(", "\"P\"", ")", ":", "\n", "    ", "return", "True", "\n", "", "return", "False", "\n", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.optimization_test.OptimizationTest.test_adam": [[25, 45], ["optimization_test.OptimizationTest.test_session", "tensorflow.get_variable", "tensorflow.constant", "tensorflow.reduce_mean", "tensorflow.trainable_variables", "tensorflow.gradients", "tensorflow.train.get_or_create_global_step", "optimization.AdamWeightDecayOptimizer", "optimization.AdamWeightDecayOptimizer.apply_gradients", "tensorflow.group", "sess.run", "range", "sess.run", "optimization_test.OptimizationTest.assertAllClose", "tensorflow.square", "zip", "tensorflow.global_variables_initializer", "tensorflow.local_variables_initializer", "sess.run", "tensorflow.constant_initializer"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.optimization.AdamWeightDecayOptimizer.apply_gradients", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.ncr3.CheckGradient.run", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.ncr3.CheckGradient.run", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.ncr3.CheckGradient.run"], ["  ", "def", "test_adam", "(", "self", ")", ":", "\n", "    ", "with", "self", ".", "test_session", "(", ")", "as", "sess", ":", "\n", "      ", "w", "=", "tf", ".", "get_variable", "(", "\n", "\"w\"", ",", "\n", "shape", "=", "[", "3", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "[", "0.1", ",", "-", "0.2", ",", "-", "0.1", "]", ")", ")", "\n", "x", "=", "tf", ".", "constant", "(", "[", "0.4", ",", "0.2", ",", "-", "0.5", "]", ")", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "x", "-", "w", ")", ")", "\n", "tvars", "=", "tf", ".", "trainable_variables", "(", ")", "\n", "grads", "=", "tf", ".", "gradients", "(", "loss", ",", "tvars", ")", "\n", "global_step", "=", "tf", ".", "train", ".", "get_or_create_global_step", "(", ")", "\n", "optimizer", "=", "optimization", ".", "AdamWeightDecayOptimizer", "(", "learning_rate", "=", "0.2", ")", "\n", "train_op", "=", "optimizer", ".", "apply_gradients", "(", "zip", "(", "grads", ",", "tvars", ")", ",", "global_step", ")", "\n", "init_op", "=", "tf", ".", "group", "(", "tf", ".", "global_variables_initializer", "(", ")", ",", "\n", "tf", ".", "local_variables_initializer", "(", ")", ")", "\n", "sess", ".", "run", "(", "init_op", ")", "\n", "for", "_", "in", "range", "(", "100", ")", ":", "\n", "        ", "sess", ".", "run", "(", "train_op", ")", "\n", "", "w_np", "=", "sess", ".", "run", "(", "w", ")", "\n", "self", ".", "assertAllClose", "(", "w_np", ".", "flat", ",", "[", "0.4", ",", "0.2", ",", "-", "0.5", "]", ",", "rtol", "=", "1e-2", ",", "atol", "=", "1e-2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_pretraining.model_fn_builder": [[109, 237], ["tensorflow.logging.info", "sorted", "modeling.BertModel", "run_pretraining.get_masked_lm_output", "run_pretraining.get_next_sentence_output", "tensorflow.trainable_variables", "tensorflow.logging.info", "features.keys", "tensorflow.logging.info", "modeling.BertModel.get_sequence_output", "modeling.BertModel.get_embedding_table", "modeling.BertModel.get_pooled_output", "modeling.get_assignment_map_from_checkpoint", "tensorflow.logging.info", "optimization.create_optimizer", "tensorflow.contrib.tpu.TPUEstimatorSpec", "tensorflow.train.init_from_checkpoint", "tensorflow.contrib.tpu.TPUEstimatorSpec", "ValueError", "tensorflow.train.init_from_checkpoint", "tensorflow.train.Scaffold", "tensorflow.reshape", "tensorflow.argmax", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.metrics.accuracy", "tensorflow.metrics.mean", "tensorflow.reshape", "tensorflow.argmax", "tensorflow.reshape", "tensorflow.metrics.accuracy", "tensorflow.metrics.mean"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_pretraining.get_masked_lm_output", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_pretraining.get_next_sentence_output", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.BertModel.get_sequence_output", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.BertModel.get_embedding_table", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.BertModel.get_pooled_output", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.get_assignment_map_from_checkpoint", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.optimization.create_optimizer"], ["def", "model_fn_builder", "(", "bert_config", ",", "init_checkpoint", ",", "learning_rate", ",", "\n", "num_train_steps", ",", "num_warmup_steps", ",", "use_tpu", ",", "\n", "use_one_hot_embeddings", ")", ":", "\n", "  ", "\"\"\"Returns `model_fn` closure for TPUEstimator.\"\"\"", "\n", "\n", "def", "model_fn", "(", "features", ",", "labels", ",", "mode", ",", "params", ")", ":", "# pylint: disable=unused-argument", "\n", "    ", "\"\"\"The `model_fn` for TPUEstimator.\"\"\"", "\n", "\n", "tf", ".", "logging", ".", "info", "(", "\"*** Features ***\"", ")", "\n", "for", "name", "in", "sorted", "(", "features", ".", "keys", "(", ")", ")", ":", "\n", "      ", "tf", ".", "logging", ".", "info", "(", "\"  name = %s, shape = %s\"", "%", "(", "name", ",", "features", "[", "name", "]", ".", "shape", ")", ")", "\n", "\n", "", "input_ids", "=", "features", "[", "\"input_ids\"", "]", "\n", "input_mask", "=", "features", "[", "\"input_mask\"", "]", "\n", "segment_ids", "=", "features", "[", "\"segment_ids\"", "]", "\n", "masked_lm_positions", "=", "features", "[", "\"masked_lm_positions\"", "]", "\n", "masked_lm_ids", "=", "features", "[", "\"masked_lm_ids\"", "]", "\n", "masked_lm_weights", "=", "features", "[", "\"masked_lm_weights\"", "]", "\n", "next_sentence_labels", "=", "features", "[", "\"next_sentence_labels\"", "]", "\n", "\n", "is_training", "=", "(", "mode", "==", "tf", ".", "estimator", ".", "ModeKeys", ".", "TRAIN", ")", "\n", "\n", "model", "=", "modeling", ".", "BertModel", "(", "\n", "config", "=", "bert_config", ",", "\n", "is_training", "=", "is_training", ",", "\n", "input_ids", "=", "input_ids", ",", "\n", "input_mask", "=", "input_mask", ",", "\n", "token_type_ids", "=", "segment_ids", ",", "\n", "use_one_hot_embeddings", "=", "use_one_hot_embeddings", ")", "\n", "\n", "(", "masked_lm_loss", ",", "\n", "masked_lm_example_loss", ",", "masked_lm_log_probs", ")", "=", "get_masked_lm_output", "(", "\n", "bert_config", ",", "model", ".", "get_sequence_output", "(", ")", ",", "model", ".", "get_embedding_table", "(", ")", ",", "\n", "masked_lm_positions", ",", "masked_lm_ids", ",", "masked_lm_weights", ")", "\n", "\n", "(", "next_sentence_loss", ",", "next_sentence_example_loss", ",", "\n", "next_sentence_log_probs", ")", "=", "get_next_sentence_output", "(", "\n", "bert_config", ",", "model", ".", "get_pooled_output", "(", ")", ",", "next_sentence_labels", ")", "\n", "\n", "total_loss", "=", "masked_lm_loss", "+", "next_sentence_loss", "\n", "\n", "tvars", "=", "tf", ".", "trainable_variables", "(", ")", "\n", "\n", "initialized_variable_names", "=", "{", "}", "\n", "scaffold_fn", "=", "None", "\n", "if", "init_checkpoint", ":", "\n", "      ", "(", "assignment_map", ",", "initialized_variable_names", "\n", ")", "=", "modeling", ".", "get_assignment_map_from_checkpoint", "(", "tvars", ",", "init_checkpoint", ")", "\n", "if", "use_tpu", ":", "\n", "\n", "        ", "def", "tpu_scaffold", "(", ")", ":", "\n", "          ", "tf", ".", "train", ".", "init_from_checkpoint", "(", "init_checkpoint", ",", "assignment_map", ")", "\n", "return", "tf", ".", "train", ".", "Scaffold", "(", ")", "\n", "\n", "", "scaffold_fn", "=", "tpu_scaffold", "\n", "", "else", ":", "\n", "        ", "tf", ".", "train", ".", "init_from_checkpoint", "(", "init_checkpoint", ",", "assignment_map", ")", "\n", "\n", "", "", "tf", ".", "logging", ".", "info", "(", "\"**** Trainable Variables ****\"", ")", "\n", "for", "var", "in", "tvars", ":", "\n", "      ", "init_string", "=", "\"\"", "\n", "if", "var", ".", "name", "in", "initialized_variable_names", ":", "\n", "        ", "init_string", "=", "\", *INIT_FROM_CKPT*\"", "\n", "", "tf", ".", "logging", ".", "info", "(", "\"  name = %s, shape = %s%s\"", "%", "(", "var", ".", "name", ",", "var", ".", "shape", ",", "init_string", ")", ")", "\n", "\n", "", "output_spec", "=", "None", "\n", "if", "mode", "==", "tf", ".", "estimator", ".", "ModeKeys", ".", "TRAIN", ":", "\n", "      ", "train_op", "=", "optimization", ".", "create_optimizer", "(", "\n", "total_loss", ",", "learning_rate", ",", "num_train_steps", ",", "num_warmup_steps", ",", "use_tpu", ")", "\n", "\n", "output_spec", "=", "tf", ".", "contrib", ".", "tpu", ".", "TPUEstimatorSpec", "(", "\n", "mode", "=", "mode", ",", "\n", "loss", "=", "total_loss", ",", "\n", "train_op", "=", "train_op", ",", "\n", "scaffold_fn", "=", "scaffold_fn", ")", "\n", "", "elif", "mode", "==", "tf", ".", "estimator", ".", "ModeKeys", ".", "EVAL", ":", "\n", "\n", "      ", "def", "metric_fn", "(", "masked_lm_example_loss", ",", "masked_lm_log_probs", ",", "masked_lm_ids", ",", "\n", "masked_lm_weights", ",", "next_sentence_example_loss", ",", "\n", "next_sentence_log_probs", ",", "next_sentence_labels", ")", ":", "\n", "        ", "\"\"\"Computes the loss and accuracy of the model.\"\"\"", "\n", "masked_lm_log_probs", "=", "tf", ".", "reshape", "(", "masked_lm_log_probs", ",", "\n", "[", "-", "1", ",", "masked_lm_log_probs", ".", "shape", "[", "-", "1", "]", "]", ")", "\n", "masked_lm_predictions", "=", "tf", ".", "argmax", "(", "\n", "masked_lm_log_probs", ",", "axis", "=", "-", "1", ",", "output_type", "=", "tf", ".", "int32", ")", "\n", "masked_lm_example_loss", "=", "tf", ".", "reshape", "(", "masked_lm_example_loss", ",", "[", "-", "1", "]", ")", "\n", "masked_lm_ids", "=", "tf", ".", "reshape", "(", "masked_lm_ids", ",", "[", "-", "1", "]", ")", "\n", "masked_lm_weights", "=", "tf", ".", "reshape", "(", "masked_lm_weights", ",", "[", "-", "1", "]", ")", "\n", "masked_lm_accuracy", "=", "tf", ".", "metrics", ".", "accuracy", "(", "\n", "labels", "=", "masked_lm_ids", ",", "\n", "predictions", "=", "masked_lm_predictions", ",", "\n", "weights", "=", "masked_lm_weights", ")", "\n", "masked_lm_mean_loss", "=", "tf", ".", "metrics", ".", "mean", "(", "\n", "values", "=", "masked_lm_example_loss", ",", "weights", "=", "masked_lm_weights", ")", "\n", "\n", "next_sentence_log_probs", "=", "tf", ".", "reshape", "(", "\n", "next_sentence_log_probs", ",", "[", "-", "1", ",", "next_sentence_log_probs", ".", "shape", "[", "-", "1", "]", "]", ")", "\n", "next_sentence_predictions", "=", "tf", ".", "argmax", "(", "\n", "next_sentence_log_probs", ",", "axis", "=", "-", "1", ",", "output_type", "=", "tf", ".", "int32", ")", "\n", "next_sentence_labels", "=", "tf", ".", "reshape", "(", "next_sentence_labels", ",", "[", "-", "1", "]", ")", "\n", "next_sentence_accuracy", "=", "tf", ".", "metrics", ".", "accuracy", "(", "\n", "labels", "=", "next_sentence_labels", ",", "predictions", "=", "next_sentence_predictions", ")", "\n", "next_sentence_mean_loss", "=", "tf", ".", "metrics", ".", "mean", "(", "\n", "values", "=", "next_sentence_example_loss", ")", "\n", "\n", "return", "{", "\n", "\"masked_lm_accuracy\"", ":", "masked_lm_accuracy", ",", "\n", "\"masked_lm_loss\"", ":", "masked_lm_mean_loss", ",", "\n", "\"next_sentence_accuracy\"", ":", "next_sentence_accuracy", ",", "\n", "\"next_sentence_loss\"", ":", "next_sentence_mean_loss", ",", "\n", "}", "\n", "\n", "", "eval_metrics", "=", "(", "metric_fn", ",", "[", "\n", "masked_lm_example_loss", ",", "masked_lm_log_probs", ",", "masked_lm_ids", ",", "\n", "masked_lm_weights", ",", "next_sentence_example_loss", ",", "\n", "next_sentence_log_probs", ",", "next_sentence_labels", "\n", "]", ")", "\n", "output_spec", "=", "tf", ".", "contrib", ".", "tpu", ".", "TPUEstimatorSpec", "(", "\n", "mode", "=", "mode", ",", "\n", "loss", "=", "total_loss", ",", "\n", "eval_metrics", "=", "eval_metrics", ",", "\n", "scaffold_fn", "=", "scaffold_fn", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "\"Only TRAIN and EVAL modes are supported: %s\"", "%", "(", "mode", ")", ")", "\n", "\n", "", "return", "output_spec", "\n", "\n", "", "return", "model_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_pretraining.get_masked_lm_output": [[239, 282], ["run_pretraining.gather_indexes", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.nn.bias_add", "tensorflow.nn.log_softmax", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.one_hot", "tensorflow.reduce_sum", "tensorflow.variable_scope", "tensorflow.layers.dense", "modeling.layer_norm", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.zeros_initializer", "modeling.get_activation", "modeling.create_initializer"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_pretraining.gather_indexes", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.layer_norm", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.get_activation", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.create_initializer"], ["", "def", "get_masked_lm_output", "(", "bert_config", ",", "input_tensor", ",", "output_weights", ",", "positions", ",", "\n", "label_ids", ",", "label_weights", ")", ":", "\n", "  ", "\"\"\"Get loss and log probs for the masked LM.\"\"\"", "\n", "input_tensor", "=", "gather_indexes", "(", "input_tensor", ",", "positions", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"cls/predictions\"", ")", ":", "\n", "# We apply one more non-linear transformation before the output layer.", "\n", "# This matrix is not used after pre-training.", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "\"transform\"", ")", ":", "\n", "      ", "input_tensor", "=", "tf", ".", "layers", ".", "dense", "(", "\n", "input_tensor", ",", "\n", "units", "=", "bert_config", ".", "hidden_size", ",", "\n", "activation", "=", "modeling", ".", "get_activation", "(", "bert_config", ".", "hidden_act", ")", ",", "\n", "kernel_initializer", "=", "modeling", ".", "create_initializer", "(", "\n", "bert_config", ".", "initializer_range", ")", ")", "\n", "input_tensor", "=", "modeling", ".", "layer_norm", "(", "input_tensor", ")", "\n", "\n", "# The output weights are the same as the input embeddings, but there is", "\n", "# an output-only bias for each token.", "\n", "", "output_bias", "=", "tf", ".", "get_variable", "(", "\n", "\"output_bias\"", ",", "\n", "shape", "=", "[", "bert_config", ".", "vocab_size", "]", ",", "\n", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ")", "\n", "logits", "=", "tf", ".", "matmul", "(", "input_tensor", ",", "output_weights", ",", "transpose_b", "=", "True", ")", "\n", "logits", "=", "tf", ".", "nn", ".", "bias_add", "(", "logits", ",", "output_bias", ")", "\n", "log_probs", "=", "tf", ".", "nn", ".", "log_softmax", "(", "logits", ",", "axis", "=", "-", "1", ")", "\n", "\n", "label_ids", "=", "tf", ".", "reshape", "(", "label_ids", ",", "[", "-", "1", "]", ")", "\n", "label_weights", "=", "tf", ".", "reshape", "(", "label_weights", ",", "[", "-", "1", "]", ")", "\n", "\n", "one_hot_labels", "=", "tf", ".", "one_hot", "(", "\n", "label_ids", ",", "depth", "=", "bert_config", ".", "vocab_size", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "# The `positions` tensor might be zero-padded (if the sequence is too", "\n", "# short to have the maximum number of predictions). The `label_weights`", "\n", "# tensor has a value of 1.0 for every real prediction and 0.0 for the", "\n", "# padding predictions.", "\n", "per_example_loss", "=", "-", "tf", ".", "reduce_sum", "(", "log_probs", "*", "one_hot_labels", ",", "axis", "=", "[", "-", "1", "]", ")", "\n", "numerator", "=", "tf", ".", "reduce_sum", "(", "label_weights", "*", "per_example_loss", ")", "\n", "denominator", "=", "tf", ".", "reduce_sum", "(", "label_weights", ")", "+", "1e-5", "\n", "loss", "=", "numerator", "/", "denominator", "\n", "\n", "", "return", "(", "loss", ",", "per_example_loss", ",", "log_probs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_pretraining.get_next_sentence_output": [[284, 305], ["tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.nn.bias_add", "tensorflow.nn.log_softmax", "tensorflow.reshape", "tensorflow.one_hot", "tensorflow.reduce_mean", "tensorflow.reduce_sum", "modeling.create_initializer", "tensorflow.zeros_initializer"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.create_initializer"], ["", "def", "get_next_sentence_output", "(", "bert_config", ",", "input_tensor", ",", "labels", ")", ":", "\n", "  ", "\"\"\"Get loss and log probs for the next sentence prediction.\"\"\"", "\n", "\n", "# Simple binary classification. Note that 0 is \"next sentence\" and 1 is", "\n", "# \"random sentence\". This weight matrix is not used after pre-training.", "\n", "with", "tf", ".", "variable_scope", "(", "\"cls/seq_relationship\"", ")", ":", "\n", "    ", "output_weights", "=", "tf", ".", "get_variable", "(", "\n", "\"output_weights\"", ",", "\n", "shape", "=", "[", "2", ",", "bert_config", ".", "hidden_size", "]", ",", "\n", "initializer", "=", "modeling", ".", "create_initializer", "(", "bert_config", ".", "initializer_range", ")", ")", "\n", "output_bias", "=", "tf", ".", "get_variable", "(", "\n", "\"output_bias\"", ",", "shape", "=", "[", "2", "]", ",", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ")", "\n", "\n", "logits", "=", "tf", ".", "matmul", "(", "input_tensor", ",", "output_weights", ",", "transpose_b", "=", "True", ")", "\n", "logits", "=", "tf", ".", "nn", ".", "bias_add", "(", "logits", ",", "output_bias", ")", "\n", "log_probs", "=", "tf", ".", "nn", ".", "log_softmax", "(", "logits", ",", "axis", "=", "-", "1", ")", "\n", "labels", "=", "tf", ".", "reshape", "(", "labels", ",", "[", "-", "1", "]", ")", "\n", "one_hot_labels", "=", "tf", ".", "one_hot", "(", "labels", ",", "depth", "=", "2", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "per_example_loss", "=", "-", "tf", ".", "reduce_sum", "(", "one_hot_labels", "*", "log_probs", ",", "axis", "=", "-", "1", ")", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "per_example_loss", ")", "\n", "return", "(", "loss", ",", "per_example_loss", ",", "log_probs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_pretraining.gather_indexes": [[307, 321], ["modeling.get_shape_list", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.gather", "tensorflow.range"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.get_shape_list"], ["", "", "def", "gather_indexes", "(", "sequence_tensor", ",", "positions", ")", ":", "\n", "  ", "\"\"\"Gathers the vectors at the specific positions over a minibatch.\"\"\"", "\n", "sequence_shape", "=", "modeling", ".", "get_shape_list", "(", "sequence_tensor", ",", "expected_rank", "=", "3", ")", "\n", "batch_size", "=", "sequence_shape", "[", "0", "]", "\n", "seq_length", "=", "sequence_shape", "[", "1", "]", "\n", "width", "=", "sequence_shape", "[", "2", "]", "\n", "\n", "flat_offsets", "=", "tf", ".", "reshape", "(", "\n", "tf", ".", "range", "(", "0", ",", "batch_size", ",", "dtype", "=", "tf", ".", "int32", ")", "*", "seq_length", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "flat_positions", "=", "tf", ".", "reshape", "(", "positions", "+", "flat_offsets", ",", "[", "-", "1", "]", ")", "\n", "flat_sequence_tensor", "=", "tf", ".", "reshape", "(", "sequence_tensor", ",", "\n", "[", "batch_size", "*", "seq_length", ",", "width", "]", ")", "\n", "output_tensor", "=", "tf", ".", "gather", "(", "flat_sequence_tensor", ",", "flat_positions", ")", "\n", "return", "output_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_pretraining.input_fn_builder": [[323, 388], ["d.repeat.apply", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.data.Dataset.from_tensor_slices", "d.repeat.repeat", "d.repeat.shuffle", "min", "d.repeat.apply", "d.repeat.shuffle", "tensorflow.data.TFRecordDataset", "d.repeat.repeat", "tensorflow.contrib.data.map_and_batch", "tensorflow.constant", "len", "tensorflow.contrib.data.parallel_interleave", "len", "run_pretraining._decode_record"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_pretraining._decode_record"], ["", "def", "input_fn_builder", "(", "input_files", ",", "\n", "max_seq_length", ",", "\n", "max_predictions_per_seq", ",", "\n", "is_training", ",", "\n", "num_cpu_threads", "=", "4", ")", ":", "\n", "  ", "\"\"\"Creates an `input_fn` closure to be passed to TPUEstimator.\"\"\"", "\n", "\n", "def", "input_fn", "(", "params", ")", ":", "\n", "    ", "\"\"\"The actual input function.\"\"\"", "\n", "batch_size", "=", "params", "[", "\"batch_size\"", "]", "\n", "\n", "name_to_features", "=", "{", "\n", "\"input_ids\"", ":", "\n", "tf", ".", "FixedLenFeature", "(", "[", "max_seq_length", "]", ",", "tf", ".", "int64", ")", ",", "\n", "\"input_mask\"", ":", "\n", "tf", ".", "FixedLenFeature", "(", "[", "max_seq_length", "]", ",", "tf", ".", "int64", ")", ",", "\n", "\"segment_ids\"", ":", "\n", "tf", ".", "FixedLenFeature", "(", "[", "max_seq_length", "]", ",", "tf", ".", "int64", ")", ",", "\n", "\"masked_lm_positions\"", ":", "\n", "tf", ".", "FixedLenFeature", "(", "[", "max_predictions_per_seq", "]", ",", "tf", ".", "int64", ")", ",", "\n", "\"masked_lm_ids\"", ":", "\n", "tf", ".", "FixedLenFeature", "(", "[", "max_predictions_per_seq", "]", ",", "tf", ".", "int64", ")", ",", "\n", "\"masked_lm_weights\"", ":", "\n", "tf", ".", "FixedLenFeature", "(", "[", "max_predictions_per_seq", "]", ",", "tf", ".", "float32", ")", ",", "\n", "\"next_sentence_labels\"", ":", "\n", "tf", ".", "FixedLenFeature", "(", "[", "1", "]", ",", "tf", ".", "int64", ")", ",", "\n", "}", "\n", "\n", "# For training, we want a lot of parallel reading and shuffling.", "\n", "# For eval, we want no shuffling and parallel reading doesn't matter.", "\n", "if", "is_training", ":", "\n", "      ", "d", "=", "tf", ".", "data", ".", "Dataset", ".", "from_tensor_slices", "(", "tf", ".", "constant", "(", "input_files", ")", ")", "\n", "d", "=", "d", ".", "repeat", "(", ")", "\n", "d", "=", "d", ".", "shuffle", "(", "buffer_size", "=", "len", "(", "input_files", ")", ")", "\n", "\n", "# `cycle_length` is the number of parallel files that get read.", "\n", "cycle_length", "=", "min", "(", "num_cpu_threads", ",", "len", "(", "input_files", ")", ")", "\n", "\n", "# `sloppy` mode means that the interleaving is not exact. This adds", "\n", "# even more randomness to the training pipeline.", "\n", "d", "=", "d", ".", "apply", "(", "\n", "tf", ".", "contrib", ".", "data", ".", "parallel_interleave", "(", "\n", "tf", ".", "data", ".", "TFRecordDataset", ",", "\n", "sloppy", "=", "is_training", ",", "\n", "cycle_length", "=", "cycle_length", ")", ")", "\n", "d", "=", "d", ".", "shuffle", "(", "buffer_size", "=", "100", ")", "\n", "", "else", ":", "\n", "      ", "d", "=", "tf", ".", "data", ".", "TFRecordDataset", "(", "input_files", ")", "\n", "# Since we evaluate for a fixed number of steps we don't want to encounter", "\n", "# out-of-range exceptions.", "\n", "d", "=", "d", ".", "repeat", "(", ")", "\n", "\n", "# We must `drop_remainder` on training because the TPU requires fixed", "\n", "# size dimensions. For eval, we assume we are evaluating on the CPU or GPU", "\n", "# and we *don't* want to drop the remainder, otherwise we wont cover", "\n", "# every sample.", "\n", "", "d", "=", "d", ".", "apply", "(", "\n", "tf", ".", "contrib", ".", "data", ".", "map_and_batch", "(", "\n", "lambda", "record", ":", "_decode_record", "(", "record", ",", "name_to_features", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "num_parallel_batches", "=", "num_cpu_threads", ",", "\n", "drop_remainder", "=", "True", ")", ")", "\n", "return", "d", "\n", "\n", "", "return", "input_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_pretraining._decode_record": [[390, 403], ["tensorflow.parse_single_example", "list", "tf.parse_single_example.keys", "tensorflow.to_int32"], "function", ["None"], ["", "def", "_decode_record", "(", "record", ",", "name_to_features", ")", ":", "\n", "  ", "\"\"\"Decodes a record to a TensorFlow example.\"\"\"", "\n", "example", "=", "tf", ".", "parse_single_example", "(", "record", ",", "name_to_features", ")", "\n", "\n", "# tf.Example only supports tf.int64, but the TPU only supports tf.int32.", "\n", "# So cast all int64 to int32.", "\n", "for", "name", "in", "list", "(", "example", ".", "keys", "(", ")", ")", ":", "\n", "    ", "t", "=", "example", "[", "name", "]", "\n", "if", "t", ".", "dtype", "==", "tf", ".", "int64", ":", "\n", "      ", "t", "=", "tf", ".", "to_int32", "(", "t", ")", "\n", "", "example", "[", "name", "]", "=", "t", "\n", "\n", "", "return", "example", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_pretraining.main": [[405, 486], ["tensorflow.logging.set_verbosity", "modeling.BertConfig.from_json_file", "tensorflow.gfile.MakeDirs", "FLAGS.input_file.split", "tensorflow.logging.info", "tensorflow.contrib.tpu.RunConfig", "run_pretraining.model_fn_builder", "tensorflow.contrib.tpu.TPUEstimator", "ValueError", "input_files.extend", "tensorflow.logging.info", "tensorflow.contrib.cluster_resolver.TPUClusterResolver", "tensorflow.logging.info", "tensorflow.logging.info", "run_pretraining.input_fn_builder", "tf.contrib.tpu.TPUEstimator.train", "tensorflow.logging.info", "tensorflow.logging.info", "run_pretraining.input_fn_builder", "tf.contrib.tpu.TPUEstimator.evaluate", "os.path.join", "tensorflow.gfile.Glob", "tensorflow.contrib.tpu.TPUConfig", "tensorflow.gfile.GFile", "tensorflow.logging.info", "sorted", "estimator.evaluate.keys", "tensorflow.logging.info", "writer.write", "str", "str"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.BertConfig.from_json_file", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_squad.model_fn_builder", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_squad.input_fn_builder", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.traintool.train", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_squad.input_fn_builder", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.evaluator.EvaluatorLinker.evaluate", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.write"], ["", "def", "main", "(", "_", ")", ":", "\n", "  ", "tf", ".", "logging", ".", "set_verbosity", "(", "tf", ".", "logging", ".", "INFO", ")", "\n", "\n", "if", "not", "FLAGS", ".", "do_train", "and", "not", "FLAGS", ".", "do_eval", ":", "\n", "    ", "raise", "ValueError", "(", "\"At least one of `do_train` or `do_eval` must be True.\"", ")", "\n", "\n", "", "bert_config", "=", "modeling", ".", "BertConfig", ".", "from_json_file", "(", "FLAGS", ".", "bert_config_file", ")", "\n", "\n", "tf", ".", "gfile", ".", "MakeDirs", "(", "FLAGS", ".", "output_dir", ")", "\n", "\n", "input_files", "=", "[", "]", "\n", "for", "input_pattern", "in", "FLAGS", ".", "input_file", ".", "split", "(", "\",\"", ")", ":", "\n", "    ", "input_files", ".", "extend", "(", "tf", ".", "gfile", ".", "Glob", "(", "input_pattern", ")", ")", "\n", "\n", "", "tf", ".", "logging", ".", "info", "(", "\"*** Input Files ***\"", ")", "\n", "for", "input_file", "in", "input_files", ":", "\n", "    ", "tf", ".", "logging", ".", "info", "(", "\"  %s\"", "%", "input_file", ")", "\n", "\n", "", "tpu_cluster_resolver", "=", "None", "\n", "if", "FLAGS", ".", "use_tpu", "and", "FLAGS", ".", "tpu_name", ":", "\n", "    ", "tpu_cluster_resolver", "=", "tf", ".", "contrib", ".", "cluster_resolver", ".", "TPUClusterResolver", "(", "\n", "FLAGS", ".", "tpu_name", ",", "zone", "=", "FLAGS", ".", "tpu_zone", ",", "project", "=", "FLAGS", ".", "gcp_project", ")", "\n", "\n", "", "is_per_host", "=", "tf", ".", "contrib", ".", "tpu", ".", "InputPipelineConfig", ".", "PER_HOST_V2", "\n", "run_config", "=", "tf", ".", "contrib", ".", "tpu", ".", "RunConfig", "(", "\n", "cluster", "=", "tpu_cluster_resolver", ",", "\n", "master", "=", "FLAGS", ".", "master", ",", "\n", "model_dir", "=", "FLAGS", ".", "output_dir", ",", "\n", "save_checkpoints_steps", "=", "FLAGS", ".", "save_checkpoints_steps", ",", "\n", "tpu_config", "=", "tf", ".", "contrib", ".", "tpu", ".", "TPUConfig", "(", "\n", "iterations_per_loop", "=", "FLAGS", ".", "iterations_per_loop", ",", "\n", "num_shards", "=", "FLAGS", ".", "num_tpu_cores", ",", "\n", "per_host_input_for_training", "=", "is_per_host", ")", ")", "\n", "\n", "model_fn", "=", "model_fn_builder", "(", "\n", "bert_config", "=", "bert_config", ",", "\n", "init_checkpoint", "=", "FLAGS", ".", "init_checkpoint", ",", "\n", "learning_rate", "=", "FLAGS", ".", "learning_rate", ",", "\n", "num_train_steps", "=", "FLAGS", ".", "num_train_steps", ",", "\n", "num_warmup_steps", "=", "FLAGS", ".", "num_warmup_steps", ",", "\n", "use_tpu", "=", "FLAGS", ".", "use_tpu", ",", "\n", "use_one_hot_embeddings", "=", "FLAGS", ".", "use_tpu", ")", "\n", "\n", "# If TPU is not available, this will fall back to normal Estimator on CPU", "\n", "# or GPU.", "\n", "estimator", "=", "tf", ".", "contrib", ".", "tpu", ".", "TPUEstimator", "(", "\n", "use_tpu", "=", "FLAGS", ".", "use_tpu", ",", "\n", "model_fn", "=", "model_fn", ",", "\n", "config", "=", "run_config", ",", "\n", "train_batch_size", "=", "FLAGS", ".", "train_batch_size", ",", "\n", "eval_batch_size", "=", "FLAGS", ".", "eval_batch_size", ")", "\n", "\n", "if", "FLAGS", ".", "do_train", ":", "\n", "    ", "tf", ".", "logging", ".", "info", "(", "\"***** Running training *****\"", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"  Batch size = %d\"", ",", "FLAGS", ".", "train_batch_size", ")", "\n", "train_input_fn", "=", "input_fn_builder", "(", "\n", "input_files", "=", "input_files", ",", "\n", "max_seq_length", "=", "FLAGS", ".", "max_seq_length", ",", "\n", "max_predictions_per_seq", "=", "FLAGS", ".", "max_predictions_per_seq", ",", "\n", "is_training", "=", "True", ")", "\n", "estimator", ".", "train", "(", "input_fn", "=", "train_input_fn", ",", "max_steps", "=", "FLAGS", ".", "num_train_steps", ")", "\n", "\n", "", "if", "FLAGS", ".", "do_eval", ":", "\n", "    ", "tf", ".", "logging", ".", "info", "(", "\"***** Running evaluation *****\"", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"  Batch size = %d\"", ",", "FLAGS", ".", "eval_batch_size", ")", "\n", "\n", "eval_input_fn", "=", "input_fn_builder", "(", "\n", "input_files", "=", "input_files", ",", "\n", "max_seq_length", "=", "FLAGS", ".", "max_seq_length", ",", "\n", "max_predictions_per_seq", "=", "FLAGS", ".", "max_predictions_per_seq", ",", "\n", "is_training", "=", "False", ")", "\n", "\n", "result", "=", "estimator", ".", "evaluate", "(", "\n", "input_fn", "=", "eval_input_fn", ",", "steps", "=", "FLAGS", ".", "max_eval_steps", ")", "\n", "\n", "output_eval_file", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "output_dir", ",", "\"eval_results.txt\"", ")", "\n", "with", "tf", ".", "gfile", ".", "GFile", "(", "output_eval_file", ",", "\"w\"", ")", "as", "writer", ":", "\n", "      ", "tf", ".", "logging", ".", "info", "(", "\"***** Eval results *****\"", ")", "\n", "for", "key", "in", "sorted", "(", "result", ".", "keys", "(", ")", ")", ":", "\n", "        ", "tf", ".", "logging", ".", "info", "(", "\"  %s = %s\"", ",", "key", ",", "str", "(", "result", "[", "key", "]", ")", ")", "\n", "writer", ".", "write", "(", "\"%s = %s\\n\"", "%", "(", "key", ",", "str", "(", "result", "[", "key", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier_with_tfhub.create_model": [[37, 87], ["set", "tensorflow_hub.Module", "dict", "hub.Module.", "tensorflow.get_variable", "tensorflow.get_variable", "set.add", "tensorflow.variable_scope", "tensorflow.matmul", "tensorflow.nn.bias_add", "tensorflow.nn.log_softmax", "tensorflow.one_hot", "tensorflow.reduce_mean", "tensorflow.truncated_normal_initializer", "tensorflow.zeros_initializer", "tensorflow.nn.dropout", "tensorflow.reduce_sum"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.dropout"], ["def", "create_model", "(", "is_training", ",", "input_ids", ",", "input_mask", ",", "segment_ids", ",", "labels", ",", "\n", "num_labels", ")", ":", "\n", "  ", "\"\"\"Creates a classification model.\"\"\"", "\n", "tags", "=", "set", "(", ")", "\n", "if", "is_training", ":", "\n", "    ", "tags", ".", "add", "(", "\"train\"", ")", "\n", "", "bert_module", "=", "hub", ".", "Module", "(", "\n", "FLAGS", ".", "bert_hub_module_handle", ",", "\n", "tags", "=", "tags", ",", "\n", "trainable", "=", "True", ")", "\n", "bert_inputs", "=", "dict", "(", "\n", "input_ids", "=", "input_ids", ",", "\n", "input_mask", "=", "input_mask", ",", "\n", "segment_ids", "=", "segment_ids", ")", "\n", "bert_outputs", "=", "bert_module", "(", "\n", "inputs", "=", "bert_inputs", ",", "\n", "signature", "=", "\"tokens\"", ",", "\n", "as_dict", "=", "True", ")", "\n", "\n", "# In the demo, we are doing a simple classification task on the entire", "\n", "# segment.", "\n", "#", "\n", "# If you want to use the token-level output, use", "\n", "# bert_outputs[\"sequence_output\"] instead.", "\n", "output_layer", "=", "bert_outputs", "[", "\"pooled_output\"", "]", "\n", "\n", "hidden_size", "=", "output_layer", ".", "shape", "[", "-", "1", "]", ".", "value", "\n", "\n", "output_weights", "=", "tf", ".", "get_variable", "(", "\n", "\"output_weights\"", ",", "[", "num_labels", ",", "hidden_size", "]", ",", "\n", "initializer", "=", "tf", ".", "truncated_normal_initializer", "(", "stddev", "=", "0.02", ")", ")", "\n", "\n", "output_bias", "=", "tf", ".", "get_variable", "(", "\n", "\"output_bias\"", ",", "[", "num_labels", "]", ",", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"loss\"", ")", ":", "\n", "    ", "if", "is_training", ":", "\n", "# I.e., 0.1 dropout", "\n", "      ", "output_layer", "=", "tf", ".", "nn", ".", "dropout", "(", "output_layer", ",", "keep_prob", "=", "0.9", ")", "\n", "\n", "", "logits", "=", "tf", ".", "matmul", "(", "output_layer", ",", "output_weights", ",", "transpose_b", "=", "True", ")", "\n", "logits", "=", "tf", ".", "nn", ".", "bias_add", "(", "logits", ",", "output_bias", ")", "\n", "log_probs", "=", "tf", ".", "nn", ".", "log_softmax", "(", "logits", ",", "axis", "=", "-", "1", ")", "\n", "\n", "one_hot_labels", "=", "tf", ".", "one_hot", "(", "labels", ",", "depth", "=", "num_labels", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "per_example_loss", "=", "-", "tf", ".", "reduce_sum", "(", "one_hot_labels", "*", "log_probs", ",", "axis", "=", "-", "1", ")", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "per_example_loss", ")", "\n", "\n", "return", "(", "loss", ",", "per_example_loss", ",", "logits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier_with_tfhub.model_fn_builder": [[89, 141], ["tensorflow.logging.info", "sorted", "run_classifier_with_tfhub.create_model", "features.keys", "tensorflow.logging.info", "optimization.create_optimizer", "tensorflow.contrib.tpu.TPUEstimatorSpec", "tensorflow.contrib.tpu.TPUEstimatorSpec", "ValueError", "tensorflow.argmax", "tensorflow.metrics.accuracy", "tensorflow.metrics.mean"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_squad.create_model", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.optimization.create_optimizer"], ["", "", "def", "model_fn_builder", "(", "num_labels", ",", "learning_rate", ",", "num_train_steps", ",", "\n", "num_warmup_steps", ",", "use_tpu", ")", ":", "\n", "  ", "\"\"\"Returns `model_fn` closure for TPUEstimator.\"\"\"", "\n", "\n", "def", "model_fn", "(", "features", ",", "labels", ",", "mode", ",", "params", ")", ":", "# pylint: disable=unused-argument", "\n", "    ", "\"\"\"The `model_fn` for TPUEstimator.\"\"\"", "\n", "\n", "tf", ".", "logging", ".", "info", "(", "\"*** Features ***\"", ")", "\n", "for", "name", "in", "sorted", "(", "features", ".", "keys", "(", ")", ")", ":", "\n", "      ", "tf", ".", "logging", ".", "info", "(", "\"  name = %s, shape = %s\"", "%", "(", "name", ",", "features", "[", "name", "]", ".", "shape", ")", ")", "\n", "\n", "", "input_ids", "=", "features", "[", "\"input_ids\"", "]", "\n", "input_mask", "=", "features", "[", "\"input_mask\"", "]", "\n", "segment_ids", "=", "features", "[", "\"segment_ids\"", "]", "\n", "label_ids", "=", "features", "[", "\"label_ids\"", "]", "\n", "\n", "is_training", "=", "(", "mode", "==", "tf", ".", "estimator", ".", "ModeKeys", ".", "TRAIN", ")", "\n", "\n", "(", "total_loss", ",", "per_example_loss", ",", "logits", ")", "=", "create_model", "(", "\n", "is_training", ",", "input_ids", ",", "input_mask", ",", "segment_ids", ",", "label_ids", ",", "num_labels", ")", "\n", "\n", "output_spec", "=", "None", "\n", "if", "mode", "==", "tf", ".", "estimator", ".", "ModeKeys", ".", "TRAIN", ":", "\n", "      ", "train_op", "=", "optimization", ".", "create_optimizer", "(", "\n", "total_loss", ",", "learning_rate", ",", "num_train_steps", ",", "num_warmup_steps", ",", "use_tpu", ")", "\n", "\n", "output_spec", "=", "tf", ".", "contrib", ".", "tpu", ".", "TPUEstimatorSpec", "(", "\n", "mode", "=", "mode", ",", "\n", "loss", "=", "total_loss", ",", "\n", "train_op", "=", "train_op", ")", "\n", "", "elif", "mode", "==", "tf", ".", "estimator", ".", "ModeKeys", ".", "EVAL", ":", "\n", "\n", "      ", "def", "metric_fn", "(", "per_example_loss", ",", "label_ids", ",", "logits", ")", ":", "\n", "        ", "predictions", "=", "tf", ".", "argmax", "(", "logits", ",", "axis", "=", "-", "1", ",", "output_type", "=", "tf", ".", "int32", ")", "\n", "accuracy", "=", "tf", ".", "metrics", ".", "accuracy", "(", "label_ids", ",", "predictions", ")", "\n", "loss", "=", "tf", ".", "metrics", ".", "mean", "(", "per_example_loss", ")", "\n", "return", "{", "\n", "\"eval_accuracy\"", ":", "accuracy", ",", "\n", "\"eval_loss\"", ":", "loss", ",", "\n", "}", "\n", "\n", "", "eval_metrics", "=", "(", "metric_fn", ",", "[", "per_example_loss", ",", "label_ids", ",", "logits", "]", ")", "\n", "output_spec", "=", "tf", ".", "contrib", ".", "tpu", ".", "TPUEstimatorSpec", "(", "\n", "mode", "=", "mode", ",", "\n", "loss", "=", "total_loss", ",", "\n", "eval_metrics", "=", "eval_metrics", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "\"Only TRAIN and EVAL modes are supported: %s\"", "%", "(", "mode", ")", ")", "\n", "\n", "", "return", "output_spec", "\n", "\n", "", "return", "model_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier_with_tfhub.create_tokenizer_from_hub_module": [[143, 153], ["tokenization.FullTokenizer", "tensorflow.Graph().as_default", "tensorflow_hub.Module", "hub.Module.", "tensorflow.Session", "sess.run", "tensorflow.Graph"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.ncr3.CheckGradient.run"], ["", "def", "create_tokenizer_from_hub_module", "(", ")", ":", "\n", "  ", "\"\"\"Get the vocab file and casing info from the Hub module.\"\"\"", "\n", "with", "tf", ".", "Graph", "(", ")", ".", "as_default", "(", ")", ":", "\n", "    ", "bert_module", "=", "hub", ".", "Module", "(", "FLAGS", ".", "bert_hub_module_handle", ")", "\n", "tokenization_info", "=", "bert_module", "(", "signature", "=", "\"tokenization_info\"", ",", "as_dict", "=", "True", ")", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "      ", "vocab_file", ",", "do_lower_case", "=", "sess", ".", "run", "(", "[", "tokenization_info", "[", "\"vocab_file\"", "]", ",", "\n", "tokenization_info", "[", "\"do_lower_case\"", "]", "]", ")", "\n", "", "", "return", "tokenization", ".", "FullTokenizer", "(", "\n", "vocab_file", "=", "vocab_file", ",", "do_lower_case", "=", "do_lower_case", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier_with_tfhub.main": [[155, 268], ["tensorflow.logging.set_verbosity", "tensorflow.gfile.MakeDirs", "FLAGS.task_name.lower", "processor.get_labels", "run_classifier_with_tfhub.create_tokenizer_from_hub_module", "tensorflow.contrib.tpu.RunConfig", "run_classifier_with_tfhub.model_fn_builder", "tensorflow.contrib.tpu.TPUEstimator", "ValueError", "ValueError", "tensorflow.contrib.cluster_resolver.TPUClusterResolver", "processor.get_train_examples", "int", "int", "run_classifier.convert_examples_to_features", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "run_classifier.input_fn_builder", "tf.contrib.tpu.TPUEstimator.train", "processor.get_dev_examples", "run_classifier.convert_examples_to_features", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "run_classifier.input_fn_builder", "tf.contrib.tpu.TPUEstimator.evaluate", "os.path.join", "tensorflow.contrib.tpu.TPUConfig", "len", "len", "len", "int", "tensorflow.gfile.GFile", "tensorflow.logging.info", "sorted", "estimator.evaluate.keys", "tensorflow.logging.info", "writer.write", "len", "len", "str", "str"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.ColaProcessor.get_labels", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier_with_tfhub.create_tokenizer_from_hub_module", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_squad.model_fn_builder", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.ColaProcessor.get_train_examples", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_squad.convert_examples_to_features", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_squad.input_fn_builder", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.traintool.train", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_classifier.ColaProcessor.get_dev_examples", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_squad.convert_examples_to_features", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_squad.input_fn_builder", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.evaluator.EvaluatorLinker.evaluate", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.write"], ["", "def", "main", "(", "_", ")", ":", "\n", "  ", "tf", ".", "logging", ".", "set_verbosity", "(", "tf", ".", "logging", ".", "INFO", ")", "\n", "\n", "processors", "=", "{", "\n", "\"cola\"", ":", "run_classifier", ".", "ColaProcessor", ",", "\n", "\"mnli\"", ":", "run_classifier", ".", "MnliProcessor", ",", "\n", "\"mrpc\"", ":", "run_classifier", ".", "MrpcProcessor", ",", "\n", "}", "\n", "\n", "if", "not", "FLAGS", ".", "do_train", "and", "not", "FLAGS", ".", "do_eval", ":", "\n", "    ", "raise", "ValueError", "(", "\"At least one of `do_train` or `do_eval` must be True.\"", ")", "\n", "\n", "", "tf", ".", "gfile", ".", "MakeDirs", "(", "FLAGS", ".", "output_dir", ")", "\n", "\n", "task_name", "=", "FLAGS", ".", "task_name", ".", "lower", "(", ")", "\n", "\n", "if", "task_name", "not", "in", "processors", ":", "\n", "    ", "raise", "ValueError", "(", "\"Task not found: %s\"", "%", "(", "task_name", ")", ")", "\n", "\n", "", "processor", "=", "processors", "[", "task_name", "]", "(", ")", "\n", "\n", "label_list", "=", "processor", ".", "get_labels", "(", ")", "\n", "\n", "tokenizer", "=", "create_tokenizer_from_hub_module", "(", ")", "\n", "\n", "tpu_cluster_resolver", "=", "None", "\n", "if", "FLAGS", ".", "use_tpu", "and", "FLAGS", ".", "tpu_name", ":", "\n", "    ", "tpu_cluster_resolver", "=", "tf", ".", "contrib", ".", "cluster_resolver", ".", "TPUClusterResolver", "(", "\n", "FLAGS", ".", "tpu_name", ",", "zone", "=", "FLAGS", ".", "tpu_zone", ",", "project", "=", "FLAGS", ".", "gcp_project", ")", "\n", "\n", "", "is_per_host", "=", "tf", ".", "contrib", ".", "tpu", ".", "InputPipelineConfig", ".", "PER_HOST_V2", "\n", "run_config", "=", "tf", ".", "contrib", ".", "tpu", ".", "RunConfig", "(", "\n", "cluster", "=", "tpu_cluster_resolver", ",", "\n", "master", "=", "FLAGS", ".", "master", ",", "\n", "model_dir", "=", "FLAGS", ".", "output_dir", ",", "\n", "save_checkpoints_steps", "=", "FLAGS", ".", "save_checkpoints_steps", ",", "\n", "tpu_config", "=", "tf", ".", "contrib", ".", "tpu", ".", "TPUConfig", "(", "\n", "iterations_per_loop", "=", "FLAGS", ".", "iterations_per_loop", ",", "\n", "num_shards", "=", "FLAGS", ".", "num_tpu_cores", ",", "\n", "per_host_input_for_training", "=", "is_per_host", ")", ")", "\n", "\n", "train_examples", "=", "None", "\n", "num_train_steps", "=", "None", "\n", "num_warmup_steps", "=", "None", "\n", "if", "FLAGS", ".", "do_train", ":", "\n", "    ", "train_examples", "=", "processor", ".", "get_train_examples", "(", "FLAGS", ".", "data_dir", ")", "\n", "num_train_steps", "=", "int", "(", "\n", "len", "(", "train_examples", ")", "/", "FLAGS", ".", "train_batch_size", "*", "FLAGS", ".", "num_train_epochs", ")", "\n", "num_warmup_steps", "=", "int", "(", "num_train_steps", "*", "FLAGS", ".", "warmup_proportion", ")", "\n", "\n", "", "model_fn", "=", "model_fn_builder", "(", "\n", "num_labels", "=", "len", "(", "label_list", ")", ",", "\n", "learning_rate", "=", "FLAGS", ".", "learning_rate", ",", "\n", "num_train_steps", "=", "num_train_steps", ",", "\n", "num_warmup_steps", "=", "num_warmup_steps", ",", "\n", "use_tpu", "=", "FLAGS", ".", "use_tpu", ")", "\n", "\n", "# If TPU is not available, this will fall back to normal Estimator on CPU", "\n", "# or GPU.", "\n", "estimator", "=", "tf", ".", "contrib", ".", "tpu", ".", "TPUEstimator", "(", "\n", "use_tpu", "=", "FLAGS", ".", "use_tpu", ",", "\n", "model_fn", "=", "model_fn", ",", "\n", "config", "=", "run_config", ",", "\n", "train_batch_size", "=", "FLAGS", ".", "train_batch_size", ",", "\n", "eval_batch_size", "=", "FLAGS", ".", "eval_batch_size", ")", "\n", "\n", "if", "FLAGS", ".", "do_train", ":", "\n", "    ", "train_features", "=", "run_classifier", ".", "convert_examples_to_features", "(", "\n", "train_examples", ",", "label_list", ",", "FLAGS", ".", "max_seq_length", ",", "tokenizer", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"***** Running training *****\"", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"  Num examples = %d\"", ",", "len", "(", "train_examples", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"  Batch size = %d\"", ",", "FLAGS", ".", "train_batch_size", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"  Num steps = %d\"", ",", "num_train_steps", ")", "\n", "train_input_fn", "=", "run_classifier", ".", "input_fn_builder", "(", "\n", "features", "=", "train_features", ",", "\n", "seq_length", "=", "FLAGS", ".", "max_seq_length", ",", "\n", "is_training", "=", "True", ",", "\n", "drop_remainder", "=", "True", ")", "\n", "estimator", ".", "train", "(", "input_fn", "=", "train_input_fn", ",", "max_steps", "=", "num_train_steps", ")", "\n", "\n", "", "if", "FLAGS", ".", "do_eval", ":", "\n", "    ", "eval_examples", "=", "processor", ".", "get_dev_examples", "(", "FLAGS", ".", "data_dir", ")", "\n", "eval_features", "=", "run_classifier", ".", "convert_examples_to_features", "(", "\n", "eval_examples", ",", "label_list", ",", "FLAGS", ".", "max_seq_length", ",", "tokenizer", ")", "\n", "\n", "tf", ".", "logging", ".", "info", "(", "\"***** Running evaluation *****\"", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"  Num examples = %d\"", ",", "len", "(", "eval_examples", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"  Batch size = %d\"", ",", "FLAGS", ".", "eval_batch_size", ")", "\n", "\n", "# This tells the estimator to run through the entire set.", "\n", "eval_steps", "=", "None", "\n", "# However, if running eval on the TPU, you will need to specify the", "\n", "# number of steps.", "\n", "if", "FLAGS", ".", "use_tpu", ":", "\n", "# Eval will be slightly WRONG on the TPU because it will truncate", "\n", "# the last batch.", "\n", "      ", "eval_steps", "=", "int", "(", "len", "(", "eval_examples", ")", "/", "FLAGS", ".", "eval_batch_size", ")", "\n", "\n", "", "eval_drop_remainder", "=", "True", "if", "FLAGS", ".", "use_tpu", "else", "False", "\n", "eval_input_fn", "=", "run_classifier", ".", "input_fn_builder", "(", "\n", "features", "=", "eval_features", ",", "\n", "seq_length", "=", "FLAGS", ".", "max_seq_length", ",", "\n", "is_training", "=", "False", ",", "\n", "drop_remainder", "=", "eval_drop_remainder", ")", "\n", "\n", "result", "=", "estimator", ".", "evaluate", "(", "input_fn", "=", "eval_input_fn", ",", "steps", "=", "eval_steps", ")", "\n", "\n", "output_eval_file", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "output_dir", ",", "\"eval_results.txt\"", ")", "\n", "with", "tf", ".", "gfile", ".", "GFile", "(", "output_eval_file", ",", "\"w\"", ")", "as", "writer", ":", "\n", "      ", "tf", ".", "logging", ".", "info", "(", "\"***** Eval results *****\"", ")", "\n", "for", "key", "in", "sorted", "(", "result", ".", "keys", "(", ")", ")", ":", "\n", "        ", "tf", ".", "logging", ".", "info", "(", "\"  %s = %s\"", ",", "key", ",", "str", "(", "result", "[", "key", "]", ")", ")", "\n", "writer", ".", "write", "(", "\"%s = %s\\n\"", "%", "(", "key", ",", "str", "(", "result", "[", "key", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling_test.BertModelTest.test_default": [[126, 128], ["modeling_test.BertModelTest.run_tester", "BertModelTest.BertModelTester"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling_test.BertModelTest.run_tester"], ["", "", "def", "test_default", "(", "self", ")", ":", "\n", "    ", "self", ".", "run_tester", "(", "BertModelTest", ".", "BertModelTester", "(", "self", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling_test.BertModelTest.test_config_to_json_string": [[129, 134], ["modeling.BertConfig", "json.loads", "modeling_test.BertModelTest.assertEqual", "modeling_test.BertModelTest.assertEqual", "modeling.BertConfig.to_json_string"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.BertConfig.to_json_string"], ["", "def", "test_config_to_json_string", "(", "self", ")", ":", "\n", "    ", "config", "=", "modeling", ".", "BertConfig", "(", "vocab_size", "=", "99", ",", "hidden_size", "=", "37", ")", "\n", "obj", "=", "json", ".", "loads", "(", "config", ".", "to_json_string", "(", ")", ")", "\n", "self", ".", "assertEqual", "(", "obj", "[", "\"vocab_size\"", "]", ",", "99", ")", "\n", "self", ".", "assertEqual", "(", "obj", "[", "\"hidden_size\"", "]", ",", "37", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling_test.BertModelTest.run_tester": [[135, 145], ["modeling_test.BertModelTest.test_session", "tester.create_model", "tensorflow.group", "sess.run", "sess.run", "tester.check_output", "modeling_test.BertModelTest.assert_all_tensors_reachable", "tensorflow.global_variables_initializer", "tensorflow.local_variables_initializer"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_squad.create_model", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.ncr3.CheckGradient.run", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.ncr3.CheckGradient.run", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling_test.BertModelTest.assert_all_tensors_reachable"], ["", "def", "run_tester", "(", "self", ",", "tester", ")", ":", "\n", "    ", "with", "self", ".", "test_session", "(", ")", "as", "sess", ":", "\n", "      ", "ops", "=", "tester", ".", "create_model", "(", ")", "\n", "init_op", "=", "tf", ".", "group", "(", "tf", ".", "global_variables_initializer", "(", ")", ",", "\n", "tf", ".", "local_variables_initializer", "(", ")", ")", "\n", "sess", ".", "run", "(", "init_op", ")", "\n", "output_result", "=", "sess", ".", "run", "(", "ops", ")", "\n", "tester", ".", "check_output", "(", "output_result", ")", "\n", "\n", "self", ".", "assert_all_tensors_reachable", "(", "sess", ",", "[", "init_op", ",", "ops", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling_test.BertModelTest.ids_tensor": [[146, 161], ["range", "tensorflow.constant", "random.Random", "values.append", "random.Random.randint"], "methods", ["None"], ["", "", "@", "classmethod", "\n", "def", "ids_tensor", "(", "cls", ",", "shape", ",", "vocab_size", ",", "rng", "=", "None", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Creates a random int32 tensor of the shape within the vocab size.\"\"\"", "\n", "if", "rng", "is", "None", ":", "\n", "      ", "rng", "=", "random", ".", "Random", "(", ")", "\n", "\n", "", "total_dims", "=", "1", "\n", "for", "dim", "in", "shape", ":", "\n", "      ", "total_dims", "*=", "dim", "\n", "\n", "", "values", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "total_dims", ")", ":", "\n", "      ", "values", ".", "append", "(", "rng", ".", "randint", "(", "0", ",", "vocab_size", "-", "1", ")", ")", "\n", "\n", "", "return", "tf", ".", "constant", "(", "value", "=", "values", ",", "dtype", "=", "tf", ".", "int32", ",", "shape", "=", "shape", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling_test.BertModelTest.assert_all_tensors_reachable": [[162, 192], ["modeling_test.BertModelTest.get_unreachable_ops", "modeling_test.BertModelTest.assertEqual", "re.compile", "filtered_unreachable.append", "len", "r.match"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling_test.BertModelTest.get_unreachable_ops"], ["", "def", "assert_all_tensors_reachable", "(", "self", ",", "sess", ",", "outputs", ")", ":", "\n", "    ", "\"\"\"Checks that all the tensors in the graph are reachable from outputs.\"\"\"", "\n", "graph", "=", "sess", ".", "graph", "\n", "\n", "ignore_strings", "=", "[", "\n", "\"^.*/assert_less_equal/.*$\"", ",", "\n", "\"^.*/dilation_rate$\"", ",", "\n", "\"^.*/Tensordot/concat$\"", ",", "\n", "\"^.*/Tensordot/concat/axis$\"", ",", "\n", "\"^testing/.*$\"", ",", "\n", "]", "\n", "\n", "ignore_regexes", "=", "[", "re", ".", "compile", "(", "x", ")", "for", "x", "in", "ignore_strings", "]", "\n", "\n", "unreachable", "=", "self", ".", "get_unreachable_ops", "(", "graph", ",", "outputs", ")", "\n", "filtered_unreachable", "=", "[", "]", "\n", "for", "x", "in", "unreachable", ":", "\n", "      ", "do_ignore", "=", "False", "\n", "for", "r", "in", "ignore_regexes", ":", "\n", "        ", "m", "=", "r", ".", "match", "(", "x", ".", "name", ")", "\n", "if", "m", "is", "not", "None", ":", "\n", "          ", "do_ignore", "=", "True", "\n", "", "", "if", "do_ignore", ":", "\n", "        ", "continue", "\n", "", "filtered_unreachable", ".", "append", "(", "x", ")", "\n", "", "unreachable", "=", "filtered_unreachable", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "len", "(", "unreachable", ")", ",", "0", ",", "\"The following ops are unreachable: %s\"", "%", "\n", "(", "\" \"", ".", "join", "(", "[", "x", ".", "name", "for", "x", "in", "unreachable", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling_test.BertModelTest.get_unreachable_ops": [[193, 255], ["cls.flatten_recursive", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "graph.get_operations", "collections.defaultdict", "collections.defaultdict.keys", "graph.get_operations", "stack.pop", "op_to_all[].append", "output_to_op[].append", "op_to_all[].append", "str", "assign_groups[].append", "unreachable_ops.append", "expanded_names.append", "stack.append", "assign_out_to_in[].append", "assign_groups[].append", "stack.append"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling_test.BertModelTest.flatten_recursive"], ["", "@", "classmethod", "\n", "def", "get_unreachable_ops", "(", "cls", ",", "graph", ",", "outputs", ")", ":", "\n", "    ", "\"\"\"Finds all of the tensors in graph that are unreachable from outputs.\"\"\"", "\n", "outputs", "=", "cls", ".", "flatten_recursive", "(", "outputs", ")", "\n", "output_to_op", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "op_to_all", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "assign_out_to_in", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "\n", "for", "op", "in", "graph", ".", "get_operations", "(", ")", ":", "\n", "      ", "for", "x", "in", "op", ".", "inputs", ":", "\n", "        ", "op_to_all", "[", "op", ".", "name", "]", ".", "append", "(", "x", ".", "name", ")", "\n", "", "for", "y", "in", "op", ".", "outputs", ":", "\n", "        ", "output_to_op", "[", "y", ".", "name", "]", ".", "append", "(", "op", ".", "name", ")", "\n", "op_to_all", "[", "op", ".", "name", "]", ".", "append", "(", "y", ".", "name", ")", "\n", "", "if", "str", "(", "op", ".", "type", ")", "==", "\"Assign\"", ":", "\n", "        ", "for", "y", "in", "op", ".", "outputs", ":", "\n", "          ", "for", "x", "in", "op", ".", "inputs", ":", "\n", "            ", "assign_out_to_in", "[", "y", ".", "name", "]", ".", "append", "(", "x", ".", "name", ")", "\n", "\n", "", "", "", "", "assign_groups", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "out_name", "in", "assign_out_to_in", ".", "keys", "(", ")", ":", "\n", "      ", "name_group", "=", "assign_out_to_in", "[", "out_name", "]", "\n", "for", "n1", "in", "name_group", ":", "\n", "        ", "assign_groups", "[", "n1", "]", ".", "append", "(", "out_name", ")", "\n", "for", "n2", "in", "name_group", ":", "\n", "          ", "if", "n1", "!=", "n2", ":", "\n", "            ", "assign_groups", "[", "n1", "]", ".", "append", "(", "n2", ")", "\n", "\n", "", "", "", "", "seen_tensors", "=", "{", "}", "\n", "stack", "=", "[", "x", ".", "name", "for", "x", "in", "outputs", "]", "\n", "while", "stack", ":", "\n", "      ", "name", "=", "stack", ".", "pop", "(", ")", "\n", "if", "name", "in", "seen_tensors", ":", "\n", "        ", "continue", "\n", "", "seen_tensors", "[", "name", "]", "=", "True", "\n", "\n", "if", "name", "in", "output_to_op", ":", "\n", "        ", "for", "op_name", "in", "output_to_op", "[", "name", "]", ":", "\n", "          ", "if", "op_name", "in", "op_to_all", ":", "\n", "            ", "for", "input_name", "in", "op_to_all", "[", "op_name", "]", ":", "\n", "              ", "if", "input_name", "not", "in", "stack", ":", "\n", "                ", "stack", ".", "append", "(", "input_name", ")", "\n", "\n", "", "", "", "", "", "expanded_names", "=", "[", "]", "\n", "if", "name", "in", "assign_groups", ":", "\n", "        ", "for", "assign_name", "in", "assign_groups", "[", "name", "]", ":", "\n", "          ", "expanded_names", ".", "append", "(", "assign_name", ")", "\n", "\n", "", "", "for", "expanded_name", "in", "expanded_names", ":", "\n", "        ", "if", "expanded_name", "not", "in", "stack", ":", "\n", "          ", "stack", ".", "append", "(", "expanded_name", ")", "\n", "\n", "", "", "", "unreachable_ops", "=", "[", "]", "\n", "for", "op", "in", "graph", ".", "get_operations", "(", ")", ":", "\n", "      ", "is_unreachable", "=", "False", "\n", "all_names", "=", "[", "x", ".", "name", "for", "x", "in", "op", ".", "inputs", "]", "+", "[", "x", ".", "name", "for", "x", "in", "op", ".", "outputs", "]", "\n", "for", "name", "in", "all_names", ":", "\n", "        ", "if", "name", "not", "in", "seen_tensors", ":", "\n", "          ", "is_unreachable", "=", "True", "\n", "", "", "if", "is_unreachable", ":", "\n", "        ", "unreachable_ops", ".", "append", "(", "op", ")", "\n", "", "", "return", "unreachable_ops", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling_test.BertModelTest.flatten_recursive": [[256, 274], ["isinstance", "output.extend", "isinstance", "flat_output.extend", "output.extend", "isinstance", "cls.flatten_recursive", "list", "six.iteritems", "output.append"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling_test.BertModelTest.flatten_recursive"], ["", "@", "classmethod", "\n", "def", "flatten_recursive", "(", "cls", ",", "item", ")", ":", "\n", "    ", "\"\"\"Flattens (potentially nested) a tuple/dictionary/list to a list.\"\"\"", "\n", "output", "=", "[", "]", "\n", "if", "isinstance", "(", "item", ",", "list", ")", ":", "\n", "      ", "output", ".", "extend", "(", "item", ")", "\n", "", "elif", "isinstance", "(", "item", ",", "tuple", ")", ":", "\n", "      ", "output", ".", "extend", "(", "list", "(", "item", ")", ")", "\n", "", "elif", "isinstance", "(", "item", ",", "dict", ")", ":", "\n", "      ", "for", "(", "_", ",", "v", ")", "in", "six", ".", "iteritems", "(", "item", ")", ":", "\n", "        ", "output", ".", "append", "(", "v", ")", "\n", "", "", "else", ":", "\n", "      ", "return", "[", "item", "]", "\n", "\n", "", "flat_output", "=", "[", "]", "\n", "for", "x", "in", "output", ":", "\n", "      ", "flat_output", ".", "extend", "(", "cls", ".", "flatten_recursive", "(", "x", ")", ")", "\n", "", "return", "flat_output", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_squad.SquadExample.__init__": [[163, 178], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "qas_id", ",", "\n", "question_text", ",", "\n", "doc_tokens", ",", "\n", "orig_answer_text", "=", "None", ",", "\n", "start_position", "=", "None", ",", "\n", "end_position", "=", "None", ",", "\n", "is_impossible", "=", "False", ")", ":", "\n", "    ", "self", ".", "qas_id", "=", "qas_id", "\n", "self", ".", "question_text", "=", "question_text", "\n", "self", ".", "doc_tokens", "=", "doc_tokens", "\n", "self", ".", "orig_answer_text", "=", "orig_answer_text", "\n", "self", ".", "start_position", "=", "start_position", "\n", "self", ".", "end_position", "=", "end_position", "\n", "self", ".", "is_impossible", "=", "is_impossible", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_squad.SquadExample.__str__": [[179, 181], ["run_squad.SquadExample.__repr__"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_squad.SquadExample.__repr__"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "__repr__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_squad.SquadExample.__repr__": [[182, 195], ["tokenization.printable_text", "tokenization.printable_text"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.printable_text", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.printable_text"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "    ", "s", "=", "\"\"", "\n", "s", "+=", "\"qas_id: %s\"", "%", "(", "tokenization", ".", "printable_text", "(", "self", ".", "qas_id", ")", ")", "\n", "s", "+=", "\", question_text: %s\"", "%", "(", "\n", "tokenization", ".", "printable_text", "(", "self", ".", "question_text", ")", ")", "\n", "s", "+=", "\", doc_tokens: [%s]\"", "%", "(", "\" \"", ".", "join", "(", "self", ".", "doc_tokens", ")", ")", "\n", "if", "self", ".", "start_position", ":", "\n", "      ", "s", "+=", "\", start_position: %d\"", "%", "(", "self", ".", "start_position", ")", "\n", "", "if", "self", ".", "start_position", ":", "\n", "      ", "s", "+=", "\", end_position: %d\"", "%", "(", "self", ".", "end_position", ")", "\n", "", "if", "self", ".", "start_position", ":", "\n", "      ", "s", "+=", "\", is_impossible: %r\"", "%", "(", "self", ".", "is_impossible", ")", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_squad.InputFeatures.__init__": [[200, 225], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "unique_id", ",", "\n", "example_index", ",", "\n", "doc_span_index", ",", "\n", "tokens", ",", "\n", "token_to_orig_map", ",", "\n", "token_is_max_context", ",", "\n", "input_ids", ",", "\n", "input_mask", ",", "\n", "segment_ids", ",", "\n", "start_position", "=", "None", ",", "\n", "end_position", "=", "None", ",", "\n", "is_impossible", "=", "None", ")", ":", "\n", "    ", "self", ".", "unique_id", "=", "unique_id", "\n", "self", ".", "example_index", "=", "example_index", "\n", "self", ".", "doc_span_index", "=", "doc_span_index", "\n", "self", ".", "tokens", "=", "tokens", "\n", "self", ".", "token_to_orig_map", "=", "token_to_orig_map", "\n", "self", ".", "token_is_max_context", "=", "token_is_max_context", "\n", "self", ".", "input_ids", "=", "input_ids", "\n", "self", ".", "input_mask", "=", "input_mask", "\n", "self", ".", "segment_ids", "=", "segment_ids", "\n", "self", ".", "start_position", "=", "start_position", "\n", "self", ".", "end_position", "=", "end_position", "\n", "self", ".", "is_impossible", "=", "is_impossible", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_squad.FeatureWriter.__init__": [[1060, 1065], ["tensorflow.python_io.TFRecordWriter"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "filename", ",", "is_training", ")", ":", "\n", "    ", "self", ".", "filename", "=", "filename", "\n", "self", ".", "is_training", "=", "is_training", "\n", "self", ".", "num_features", "=", "0", "\n", "self", ".", "_writer", "=", "tf", ".", "python_io", ".", "TFRecordWriter", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_squad.FeatureWriter.process_feature": [[1066, 1091], ["collections.OrderedDict", "run_squad.FeatureWriter.process_feature.create_int_feature"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.create_pretraining_data.create_int_feature"], ["", "def", "process_feature", "(", "self", ",", "feature", ")", ":", "\n", "    ", "\"\"\"Write a InputFeature to the TFRecordWriter as a tf.train.Example.\"\"\"", "\n", "self", ".", "num_features", "+=", "1", "\n", "\n", "def", "create_int_feature", "(", "values", ")", ":", "\n", "      ", "feature", "=", "tf", ".", "train", ".", "Feature", "(", "\n", "int64_list", "=", "tf", ".", "train", ".", "Int64List", "(", "value", "=", "list", "(", "values", ")", ")", ")", "\n", "return", "feature", "\n", "\n", "", "features", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "features", "[", "\"unique_ids\"", "]", "=", "create_int_feature", "(", "[", "feature", ".", "unique_id", "]", ")", "\n", "features", "[", "\"input_ids\"", "]", "=", "create_int_feature", "(", "feature", ".", "input_ids", ")", "\n", "features", "[", "\"input_mask\"", "]", "=", "create_int_feature", "(", "feature", ".", "input_mask", ")", "\n", "features", "[", "\"segment_ids\"", "]", "=", "create_int_feature", "(", "feature", ".", "segment_ids", ")", "\n", "\n", "if", "self", ".", "is_training", ":", "\n", "      ", "features", "[", "\"start_positions\"", "]", "=", "create_int_feature", "(", "[", "feature", ".", "start_position", "]", ")", "\n", "features", "[", "\"end_positions\"", "]", "=", "create_int_feature", "(", "[", "feature", ".", "end_position", "]", ")", "\n", "impossible", "=", "0", "\n", "if", "feature", ".", "is_impossible", ":", "\n", "        ", "impossible", "=", "1", "\n", "", "features", "[", "\"is_impossible\"", "]", "=", "create_int_feature", "(", "[", "impossible", "]", ")", "\n", "\n", "", "tf_example", "=", "tf", ".", "train", ".", "Example", "(", "features", "=", "tf", ".", "train", ".", "Features", "(", "feature", "=", "features", ")", ")", "\n", "self", ".", "_writer", ".", "write", "(", "tf_example", ".", "SerializeToString", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_squad.FeatureWriter.close": [[1092, 1094], ["run_squad.FeatureWriter._writer.close"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "    ", "self", ".", "_writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_squad.read_squad_examples": [[227, 307], ["tensorflow.gfile.Open", "json.load", "ord", "run_squad.read_squad_examples.is_whitespace"], "function", ["None"], ["", "", "def", "read_squad_examples", "(", "input_file", ",", "is_training", ")", ":", "\n", "  ", "\"\"\"Read a SQuAD json file into a list of SquadExample.\"\"\"", "\n", "with", "tf", ".", "gfile", ".", "Open", "(", "input_file", ",", "\"r\"", ")", "as", "reader", ":", "\n", "    ", "input_data", "=", "json", ".", "load", "(", "reader", ")", "[", "\"data\"", "]", "\n", "\n", "", "def", "is_whitespace", "(", "c", ")", ":", "\n", "    ", "if", "c", "==", "\" \"", "or", "c", "==", "\"\\t\"", "or", "c", "==", "\"\\r\"", "or", "c", "==", "\"\\n\"", "or", "ord", "(", "c", ")", "==", "0x202F", ":", "\n", "      ", "return", "True", "\n", "", "return", "False", "\n", "\n", "", "examples", "=", "[", "]", "\n", "for", "entry", "in", "input_data", ":", "\n", "    ", "for", "paragraph", "in", "entry", "[", "\"paragraphs\"", "]", ":", "\n", "      ", "paragraph_text", "=", "paragraph", "[", "\"context\"", "]", "\n", "doc_tokens", "=", "[", "]", "\n", "char_to_word_offset", "=", "[", "]", "\n", "prev_is_whitespace", "=", "True", "\n", "for", "c", "in", "paragraph_text", ":", "\n", "        ", "if", "is_whitespace", "(", "c", ")", ":", "\n", "          ", "prev_is_whitespace", "=", "True", "\n", "", "else", ":", "\n", "          ", "if", "prev_is_whitespace", ":", "\n", "            ", "doc_tokens", ".", "append", "(", "c", ")", "\n", "", "else", ":", "\n", "            ", "doc_tokens", "[", "-", "1", "]", "+=", "c", "\n", "", "prev_is_whitespace", "=", "False", "\n", "", "char_to_word_offset", ".", "append", "(", "len", "(", "doc_tokens", ")", "-", "1", ")", "\n", "\n", "", "for", "qa", "in", "paragraph", "[", "\"qas\"", "]", ":", "\n", "        ", "qas_id", "=", "qa", "[", "\"id\"", "]", "\n", "question_text", "=", "qa", "[", "\"question\"", "]", "\n", "start_position", "=", "None", "\n", "end_position", "=", "None", "\n", "orig_answer_text", "=", "None", "\n", "is_impossible", "=", "False", "\n", "if", "is_training", ":", "\n", "\n", "          ", "if", "FLAGS", ".", "version_2_with_negative", ":", "\n", "            ", "is_impossible", "=", "qa", "[", "\"is_impossible\"", "]", "\n", "", "if", "(", "len", "(", "qa", "[", "\"answers\"", "]", ")", "!=", "1", ")", "and", "(", "not", "is_impossible", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"For training, each question should have exactly 1 answer.\"", ")", "\n", "", "if", "not", "is_impossible", ":", "\n", "            ", "answer", "=", "qa", "[", "\"answers\"", "]", "[", "0", "]", "\n", "orig_answer_text", "=", "answer", "[", "\"text\"", "]", "\n", "answer_offset", "=", "answer", "[", "\"answer_start\"", "]", "\n", "answer_length", "=", "len", "(", "orig_answer_text", ")", "\n", "start_position", "=", "char_to_word_offset", "[", "answer_offset", "]", "\n", "end_position", "=", "char_to_word_offset", "[", "answer_offset", "+", "answer_length", "-", "\n", "1", "]", "\n", "# Only add answers where the text can be exactly recovered from the", "\n", "# document. If this CAN'T happen it's likely due to weird Unicode", "\n", "# stuff so we will just skip the example.", "\n", "#", "\n", "# Note that this means for training mode, every example is NOT", "\n", "# guaranteed to be preserved.", "\n", "actual_text", "=", "\" \"", ".", "join", "(", "\n", "doc_tokens", "[", "start_position", ":", "(", "end_position", "+", "1", ")", "]", ")", "\n", "cleaned_answer_text", "=", "\" \"", ".", "join", "(", "\n", "tokenization", ".", "whitespace_tokenize", "(", "orig_answer_text", ")", ")", "\n", "if", "actual_text", ".", "find", "(", "cleaned_answer_text", ")", "==", "-", "1", ":", "\n", "              ", "tf", ".", "logging", ".", "warning", "(", "\"Could not find answer: '%s' vs. '%s'\"", ",", "\n", "actual_text", ",", "cleaned_answer_text", ")", "\n", "continue", "\n", "", "", "else", ":", "\n", "            ", "start_position", "=", "-", "1", "\n", "end_position", "=", "-", "1", "\n", "orig_answer_text", "=", "\"\"", "\n", "\n", "", "", "example", "=", "SquadExample", "(", "\n", "qas_id", "=", "qas_id", ",", "\n", "question_text", "=", "question_text", ",", "\n", "doc_tokens", "=", "doc_tokens", ",", "\n", "orig_answer_text", "=", "orig_answer_text", ",", "\n", "start_position", "=", "start_position", ",", "\n", "end_position", "=", "end_position", ",", "\n", "is_impossible", "=", "is_impossible", ")", "\n", "examples", ".", "append", "(", "example", ")", "\n", "\n", "", "", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_squad.convert_examples_to_features": [[309, 474], ["enumerate", "tokenizer.tokenize", "enumerate", "collections.namedtuple", "enumerate", "len", "orig_to_tok_index.append", "tokenizer.tokenize", "run_squad._improve_answer_span", "len", "doc_spans.append", "min", "tokens.append", "segment_ids.append", "tokens.append", "segment_ids.append", "range", "tokens.append", "segment_ids.append", "tokenizer.convert_tokens_to_ids", "run_squad.InputFeatures", "output_fn", "len", "tok_to_orig_index.append", "all_doc_tokens.append", "len", "len", "collections.namedtuple.", "len", "tokens.append", "segment_ids.append", "run_squad._check_is_max_context", "tokens.append", "segment_ids.append", "len", "len", "tokenizer.convert_tokens_to_ids.append", "input_mask.append", "segment_ids.append", "len", "len", "len", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "len", "len", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "len", "len", "len", "tokenization.printable_text", "tokenization.printable_text", "str", "str", "str", "six.iteritems", "six.iteritems"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.WordpieceTokenizer.tokenize", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.WordpieceTokenizer.tokenize", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_squad._improve_answer_span", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.convert_tokens_to_ids", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_squad._check_is_max_context", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.printable_text", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.printable_text"], ["", "def", "convert_examples_to_features", "(", "examples", ",", "tokenizer", ",", "max_seq_length", ",", "\n", "doc_stride", ",", "max_query_length", ",", "is_training", ",", "\n", "output_fn", ")", ":", "\n", "  ", "\"\"\"Loads a data file into a list of `InputBatch`s.\"\"\"", "\n", "\n", "unique_id", "=", "1000000000", "\n", "\n", "for", "(", "example_index", ",", "example", ")", "in", "enumerate", "(", "examples", ")", ":", "\n", "    ", "query_tokens", "=", "tokenizer", ".", "tokenize", "(", "example", ".", "question_text", ")", "\n", "\n", "if", "len", "(", "query_tokens", ")", ">", "max_query_length", ":", "\n", "      ", "query_tokens", "=", "query_tokens", "[", "0", ":", "max_query_length", "]", "\n", "\n", "", "tok_to_orig_index", "=", "[", "]", "\n", "orig_to_tok_index", "=", "[", "]", "\n", "all_doc_tokens", "=", "[", "]", "\n", "for", "(", "i", ",", "token", ")", "in", "enumerate", "(", "example", ".", "doc_tokens", ")", ":", "\n", "      ", "orig_to_tok_index", ".", "append", "(", "len", "(", "all_doc_tokens", ")", ")", "\n", "sub_tokens", "=", "tokenizer", ".", "tokenize", "(", "token", ")", "\n", "for", "sub_token", "in", "sub_tokens", ":", "\n", "        ", "tok_to_orig_index", ".", "append", "(", "i", ")", "\n", "all_doc_tokens", ".", "append", "(", "sub_token", ")", "\n", "\n", "", "", "tok_start_position", "=", "None", "\n", "tok_end_position", "=", "None", "\n", "if", "is_training", "and", "example", ".", "is_impossible", ":", "\n", "      ", "tok_start_position", "=", "-", "1", "\n", "tok_end_position", "=", "-", "1", "\n", "", "if", "is_training", "and", "not", "example", ".", "is_impossible", ":", "\n", "      ", "tok_start_position", "=", "orig_to_tok_index", "[", "example", ".", "start_position", "]", "\n", "if", "example", ".", "end_position", "<", "len", "(", "example", ".", "doc_tokens", ")", "-", "1", ":", "\n", "        ", "tok_end_position", "=", "orig_to_tok_index", "[", "example", ".", "end_position", "+", "1", "]", "-", "1", "\n", "", "else", ":", "\n", "        ", "tok_end_position", "=", "len", "(", "all_doc_tokens", ")", "-", "1", "\n", "", "(", "tok_start_position", ",", "tok_end_position", ")", "=", "_improve_answer_span", "(", "\n", "all_doc_tokens", ",", "tok_start_position", ",", "tok_end_position", ",", "tokenizer", ",", "\n", "example", ".", "orig_answer_text", ")", "\n", "\n", "# The -3 accounts for [CLS], [SEP] and [SEP]", "\n", "", "max_tokens_for_doc", "=", "max_seq_length", "-", "len", "(", "query_tokens", ")", "-", "3", "\n", "\n", "# We can have documents that are longer than the maximum sequence length.", "\n", "# To deal with this we do a sliding window approach, where we take chunks", "\n", "# of the up to our max length with a stride of `doc_stride`.", "\n", "_DocSpan", "=", "collections", ".", "namedtuple", "(", "# pylint: disable=invalid-name", "\n", "\"DocSpan\"", ",", "[", "\"start\"", ",", "\"length\"", "]", ")", "\n", "doc_spans", "=", "[", "]", "\n", "start_offset", "=", "0", "\n", "while", "start_offset", "<", "len", "(", "all_doc_tokens", ")", ":", "\n", "      ", "length", "=", "len", "(", "all_doc_tokens", ")", "-", "start_offset", "\n", "if", "length", ">", "max_tokens_for_doc", ":", "\n", "        ", "length", "=", "max_tokens_for_doc", "\n", "", "doc_spans", ".", "append", "(", "_DocSpan", "(", "start", "=", "start_offset", ",", "length", "=", "length", ")", ")", "\n", "if", "start_offset", "+", "length", "==", "len", "(", "all_doc_tokens", ")", ":", "\n", "        ", "break", "\n", "", "start_offset", "+=", "min", "(", "length", ",", "doc_stride", ")", "\n", "\n", "", "for", "(", "doc_span_index", ",", "doc_span", ")", "in", "enumerate", "(", "doc_spans", ")", ":", "\n", "      ", "tokens", "=", "[", "]", "\n", "token_to_orig_map", "=", "{", "}", "\n", "token_is_max_context", "=", "{", "}", "\n", "segment_ids", "=", "[", "]", "\n", "tokens", ".", "append", "(", "\"[CLS]\"", ")", "\n", "segment_ids", ".", "append", "(", "0", ")", "\n", "for", "token", "in", "query_tokens", ":", "\n", "        ", "tokens", ".", "append", "(", "token", ")", "\n", "segment_ids", ".", "append", "(", "0", ")", "\n", "", "tokens", ".", "append", "(", "\"[SEP]\"", ")", "\n", "segment_ids", ".", "append", "(", "0", ")", "\n", "\n", "for", "i", "in", "range", "(", "doc_span", ".", "length", ")", ":", "\n", "        ", "split_token_index", "=", "doc_span", ".", "start", "+", "i", "\n", "token_to_orig_map", "[", "len", "(", "tokens", ")", "]", "=", "tok_to_orig_index", "[", "split_token_index", "]", "\n", "\n", "is_max_context", "=", "_check_is_max_context", "(", "doc_spans", ",", "doc_span_index", ",", "\n", "split_token_index", ")", "\n", "token_is_max_context", "[", "len", "(", "tokens", ")", "]", "=", "is_max_context", "\n", "tokens", ".", "append", "(", "all_doc_tokens", "[", "split_token_index", "]", ")", "\n", "segment_ids", ".", "append", "(", "1", ")", "\n", "", "tokens", ".", "append", "(", "\"[SEP]\"", ")", "\n", "segment_ids", ".", "append", "(", "1", ")", "\n", "\n", "input_ids", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokens", ")", "\n", "\n", "# The mask has 1 for real tokens and 0 for padding tokens. Only real", "\n", "# tokens are attended to.", "\n", "input_mask", "=", "[", "1", "]", "*", "len", "(", "input_ids", ")", "\n", "\n", "# Zero-pad up to the sequence length.", "\n", "while", "len", "(", "input_ids", ")", "<", "max_seq_length", ":", "\n", "        ", "input_ids", ".", "append", "(", "0", ")", "\n", "input_mask", ".", "append", "(", "0", ")", "\n", "segment_ids", ".", "append", "(", "0", ")", "\n", "\n", "", "assert", "len", "(", "input_ids", ")", "==", "max_seq_length", "\n", "assert", "len", "(", "input_mask", ")", "==", "max_seq_length", "\n", "assert", "len", "(", "segment_ids", ")", "==", "max_seq_length", "\n", "\n", "start_position", "=", "None", "\n", "end_position", "=", "None", "\n", "if", "is_training", "and", "not", "example", ".", "is_impossible", ":", "\n", "# For training, if our document chunk does not contain an annotation", "\n", "# we throw it out, since there is nothing to predict.", "\n", "        ", "doc_start", "=", "doc_span", ".", "start", "\n", "doc_end", "=", "doc_span", ".", "start", "+", "doc_span", ".", "length", "-", "1", "\n", "out_of_span", "=", "False", "\n", "if", "not", "(", "tok_start_position", ">=", "doc_start", "and", "\n", "tok_end_position", "<=", "doc_end", ")", ":", "\n", "          ", "out_of_span", "=", "True", "\n", "", "if", "out_of_span", ":", "\n", "          ", "start_position", "=", "0", "\n", "end_position", "=", "0", "\n", "", "else", ":", "\n", "          ", "doc_offset", "=", "len", "(", "query_tokens", ")", "+", "2", "\n", "start_position", "=", "tok_start_position", "-", "doc_start", "+", "doc_offset", "\n", "end_position", "=", "tok_end_position", "-", "doc_start", "+", "doc_offset", "\n", "\n", "", "", "if", "is_training", "and", "example", ".", "is_impossible", ":", "\n", "        ", "start_position", "=", "0", "\n", "end_position", "=", "0", "\n", "\n", "", "if", "example_index", "<", "20", ":", "\n", "        ", "tf", ".", "logging", ".", "info", "(", "\"*** Example ***\"", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"unique_id: %s\"", "%", "(", "unique_id", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"example_index: %s\"", "%", "(", "example_index", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"doc_span_index: %s\"", "%", "(", "doc_span_index", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"tokens: %s\"", "%", "\" \"", ".", "join", "(", "\n", "[", "tokenization", ".", "printable_text", "(", "x", ")", "for", "x", "in", "tokens", "]", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"token_to_orig_map: %s\"", "%", "\" \"", ".", "join", "(", "\n", "[", "\"%d:%d\"", "%", "(", "x", ",", "y", ")", "for", "(", "x", ",", "y", ")", "in", "six", ".", "iteritems", "(", "token_to_orig_map", ")", "]", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"token_is_max_context: %s\"", "%", "\" \"", ".", "join", "(", "[", "\n", "\"%d:%s\"", "%", "(", "x", ",", "y", ")", "for", "(", "x", ",", "y", ")", "in", "six", ".", "iteritems", "(", "token_is_max_context", ")", "\n", "]", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"input_ids: %s\"", "%", "\" \"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "input_ids", "]", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\n", "\"input_mask: %s\"", "%", "\" \"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "input_mask", "]", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\n", "\"segment_ids: %s\"", "%", "\" \"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "segment_ids", "]", ")", ")", "\n", "if", "is_training", "and", "example", ".", "is_impossible", ":", "\n", "          ", "tf", ".", "logging", ".", "info", "(", "\"impossible example\"", ")", "\n", "", "if", "is_training", "and", "not", "example", ".", "is_impossible", ":", "\n", "          ", "answer_text", "=", "\" \"", ".", "join", "(", "tokens", "[", "start_position", ":", "(", "end_position", "+", "1", ")", "]", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"start_position: %d\"", "%", "(", "start_position", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"end_position: %d\"", "%", "(", "end_position", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\n", "\"answer: %s\"", "%", "(", "tokenization", ".", "printable_text", "(", "answer_text", ")", ")", ")", "\n", "\n", "", "", "feature", "=", "InputFeatures", "(", "\n", "unique_id", "=", "unique_id", ",", "\n", "example_index", "=", "example_index", ",", "\n", "doc_span_index", "=", "doc_span_index", ",", "\n", "tokens", "=", "tokens", ",", "\n", "token_to_orig_map", "=", "token_to_orig_map", ",", "\n", "token_is_max_context", "=", "token_is_max_context", ",", "\n", "input_ids", "=", "input_ids", ",", "\n", "input_mask", "=", "input_mask", ",", "\n", "segment_ids", "=", "segment_ids", ",", "\n", "start_position", "=", "start_position", ",", "\n", "end_position", "=", "end_position", ",", "\n", "is_impossible", "=", "example", ".", "is_impossible", ")", "\n", "\n", "# Run callback", "\n", "output_fn", "(", "feature", ")", "\n", "\n", "unique_id", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_squad._improve_answer_span": [[476, 511], ["range", "tokenizer.tokenize", "range"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.WordpieceTokenizer.tokenize"], ["", "", "", "def", "_improve_answer_span", "(", "doc_tokens", ",", "input_start", ",", "input_end", ",", "tokenizer", ",", "\n", "orig_answer_text", ")", ":", "\n", "  ", "\"\"\"Returns tokenized answer spans that better match the annotated answer.\"\"\"", "\n", "\n", "# The SQuAD annotations are character based. We first project them to", "\n", "# whitespace-tokenized words. But then after WordPiece tokenization, we can", "\n", "# often find a \"better match\". For example:", "\n", "#", "\n", "#   Question: What year was John Smith born?", "\n", "#   Context: The leader was John Smith (1895-1943).", "\n", "#   Answer: 1895", "\n", "#", "\n", "# The original whitespace-tokenized answer will be \"(1895-1943).\". However", "\n", "# after tokenization, our tokens will be \"( 1895 - 1943 ) .\". So we can match", "\n", "# the exact answer, 1895.", "\n", "#", "\n", "# However, this is not always possible. Consider the following:", "\n", "#", "\n", "#   Question: What country is the top exporter of electornics?", "\n", "#   Context: The Japanese electronics industry is the lagest in the world.", "\n", "#   Answer: Japan", "\n", "#", "\n", "# In this case, the annotator chose \"Japan\" as a character sub-span of", "\n", "# the word \"Japanese\". Since our WordPiece tokenizer does not split", "\n", "# \"Japanese\", we just use \"Japanese\" as the annotation. This is fairly rare", "\n", "# in SQuAD, but does happen.", "\n", "tok_answer_text", "=", "\" \"", ".", "join", "(", "tokenizer", ".", "tokenize", "(", "orig_answer_text", ")", ")", "\n", "\n", "for", "new_start", "in", "range", "(", "input_start", ",", "input_end", "+", "1", ")", ":", "\n", "    ", "for", "new_end", "in", "range", "(", "input_end", ",", "new_start", "-", "1", ",", "-", "1", ")", ":", "\n", "      ", "text_span", "=", "\" \"", ".", "join", "(", "doc_tokens", "[", "new_start", ":", "(", "new_end", "+", "1", ")", "]", ")", "\n", "if", "text_span", "==", "tok_answer_text", ":", "\n", "        ", "return", "(", "new_start", ",", "new_end", ")", "\n", "\n", "", "", "", "return", "(", "input_start", ",", "input_end", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_squad._check_is_max_context": [[513, 548], ["enumerate", "min"], "function", ["None"], ["", "def", "_check_is_max_context", "(", "doc_spans", ",", "cur_span_index", ",", "position", ")", ":", "\n", "  ", "\"\"\"Check if this is the 'max context' doc span for the token.\"\"\"", "\n", "\n", "# Because of the sliding window approach taken to scoring documents, a single", "\n", "# token can appear in multiple documents. E.g.", "\n", "#  Doc: the man went to the store and bought a gallon of milk", "\n", "#  Span A: the man went to the", "\n", "#  Span B: to the store and bought", "\n", "#  Span C: and bought a gallon of", "\n", "#  ...", "\n", "#", "\n", "# Now the word 'bought' will have two scores from spans B and C. We only", "\n", "# want to consider the score with \"maximum context\", which we define as", "\n", "# the *minimum* of its left and right context (the *sum* of left and", "\n", "# right context will always be the same, of course).", "\n", "#", "\n", "# In the example the maximum context for 'bought' would be span C since", "\n", "# it has 1 left context and 3 right context, while span B has 4 left context", "\n", "# and 0 right context.", "\n", "best_score", "=", "None", "\n", "best_span_index", "=", "None", "\n", "for", "(", "span_index", ",", "doc_span", ")", "in", "enumerate", "(", "doc_spans", ")", ":", "\n", "    ", "end", "=", "doc_span", ".", "start", "+", "doc_span", ".", "length", "-", "1", "\n", "if", "position", "<", "doc_span", ".", "start", ":", "\n", "      ", "continue", "\n", "", "if", "position", ">", "end", ":", "\n", "      ", "continue", "\n", "", "num_left_context", "=", "position", "-", "doc_span", ".", "start", "\n", "num_right_context", "=", "end", "-", "position", "\n", "score", "=", "min", "(", "num_left_context", ",", "num_right_context", ")", "+", "0.01", "*", "doc_span", ".", "length", "\n", "if", "best_score", "is", "None", "or", "score", ">", "best_score", ":", "\n", "      ", "best_score", "=", "score", "\n", "best_span_index", "=", "span_index", "\n", "\n", "", "", "return", "cur_span_index", "==", "best_span_index", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_squad.create_model": [[550, 588], ["modeling.BertModel", "modeling.BertModel.get_sequence_output", "modeling.get_shape_list", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.reshape", "tensorflow.matmul", "tensorflow.nn.bias_add", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.unstack", "tensorflow.truncated_normal_initializer", "tensorflow.zeros_initializer"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.BertModel.get_sequence_output", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.get_shape_list"], ["", "def", "create_model", "(", "bert_config", ",", "is_training", ",", "input_ids", ",", "input_mask", ",", "segment_ids", ",", "\n", "use_one_hot_embeddings", ")", ":", "\n", "  ", "\"\"\"Creates a classification model.\"\"\"", "\n", "model", "=", "modeling", ".", "BertModel", "(", "\n", "config", "=", "bert_config", ",", "\n", "is_training", "=", "is_training", ",", "\n", "input_ids", "=", "input_ids", ",", "\n", "input_mask", "=", "input_mask", ",", "\n", "token_type_ids", "=", "segment_ids", ",", "\n", "use_one_hot_embeddings", "=", "use_one_hot_embeddings", ")", "\n", "\n", "final_hidden", "=", "model", ".", "get_sequence_output", "(", ")", "\n", "\n", "final_hidden_shape", "=", "modeling", ".", "get_shape_list", "(", "final_hidden", ",", "expected_rank", "=", "3", ")", "\n", "batch_size", "=", "final_hidden_shape", "[", "0", "]", "\n", "seq_length", "=", "final_hidden_shape", "[", "1", "]", "\n", "hidden_size", "=", "final_hidden_shape", "[", "2", "]", "\n", "\n", "output_weights", "=", "tf", ".", "get_variable", "(", "\n", "\"cls/squad/output_weights\"", ",", "[", "2", ",", "hidden_size", "]", ",", "\n", "initializer", "=", "tf", ".", "truncated_normal_initializer", "(", "stddev", "=", "0.02", ")", ")", "\n", "\n", "output_bias", "=", "tf", ".", "get_variable", "(", "\n", "\"cls/squad/output_bias\"", ",", "[", "2", "]", ",", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ")", "\n", "\n", "final_hidden_matrix", "=", "tf", ".", "reshape", "(", "final_hidden", ",", "\n", "[", "batch_size", "*", "seq_length", ",", "hidden_size", "]", ")", "\n", "logits", "=", "tf", ".", "matmul", "(", "final_hidden_matrix", ",", "output_weights", ",", "transpose_b", "=", "True", ")", "\n", "logits", "=", "tf", ".", "nn", ".", "bias_add", "(", "logits", ",", "output_bias", ")", "\n", "\n", "logits", "=", "tf", ".", "reshape", "(", "logits", ",", "[", "batch_size", ",", "seq_length", ",", "2", "]", ")", "\n", "logits", "=", "tf", ".", "transpose", "(", "logits", ",", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "\n", "unstacked_logits", "=", "tf", ".", "unstack", "(", "logits", ",", "axis", "=", "0", ")", "\n", "\n", "(", "start_logits", ",", "end_logits", ")", "=", "(", "unstacked_logits", "[", "0", "]", ",", "unstacked_logits", "[", "1", "]", ")", "\n", "\n", "return", "(", "start_logits", ",", "end_logits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_squad.model_fn_builder": [[590, 684], ["tensorflow.logging.info", "sorted", "run_squad.create_model", "tensorflow.trainable_variables", "tensorflow.logging.info", "features.keys", "tensorflow.logging.info", "modeling.get_assignment_map_from_checkpoint", "tensorflow.logging.info", "compute_loss"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_squad.create_model", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.get_assignment_map_from_checkpoint"], ["", "def", "model_fn_builder", "(", "bert_config", ",", "init_checkpoint", ",", "learning_rate", ",", "\n", "num_train_steps", ",", "num_warmup_steps", ",", "use_tpu", ",", "\n", "use_one_hot_embeddings", ")", ":", "\n", "  ", "\"\"\"Returns `model_fn` closure for TPUEstimator.\"\"\"", "\n", "\n", "def", "model_fn", "(", "features", ",", "labels", ",", "mode", ",", "params", ")", ":", "# pylint: disable=unused-argument", "\n", "    ", "\"\"\"The `model_fn` for TPUEstimator.\"\"\"", "\n", "\n", "tf", ".", "logging", ".", "info", "(", "\"*** Features ***\"", ")", "\n", "for", "name", "in", "sorted", "(", "features", ".", "keys", "(", ")", ")", ":", "\n", "      ", "tf", ".", "logging", ".", "info", "(", "\"  name = %s, shape = %s\"", "%", "(", "name", ",", "features", "[", "name", "]", ".", "shape", ")", ")", "\n", "\n", "", "unique_ids", "=", "features", "[", "\"unique_ids\"", "]", "\n", "input_ids", "=", "features", "[", "\"input_ids\"", "]", "\n", "input_mask", "=", "features", "[", "\"input_mask\"", "]", "\n", "segment_ids", "=", "features", "[", "\"segment_ids\"", "]", "\n", "\n", "is_training", "=", "(", "mode", "==", "tf", ".", "estimator", ".", "ModeKeys", ".", "TRAIN", ")", "\n", "\n", "(", "start_logits", ",", "end_logits", ")", "=", "create_model", "(", "\n", "bert_config", "=", "bert_config", ",", "\n", "is_training", "=", "is_training", ",", "\n", "input_ids", "=", "input_ids", ",", "\n", "input_mask", "=", "input_mask", ",", "\n", "segment_ids", "=", "segment_ids", ",", "\n", "use_one_hot_embeddings", "=", "use_one_hot_embeddings", ")", "\n", "\n", "tvars", "=", "tf", ".", "trainable_variables", "(", ")", "\n", "\n", "initialized_variable_names", "=", "{", "}", "\n", "scaffold_fn", "=", "None", "\n", "if", "init_checkpoint", ":", "\n", "      ", "(", "assignment_map", ",", "initialized_variable_names", "\n", ")", "=", "modeling", ".", "get_assignment_map_from_checkpoint", "(", "tvars", ",", "init_checkpoint", ")", "\n", "if", "use_tpu", ":", "\n", "\n", "        ", "def", "tpu_scaffold", "(", ")", ":", "\n", "          ", "tf", ".", "train", ".", "init_from_checkpoint", "(", "init_checkpoint", ",", "assignment_map", ")", "\n", "return", "tf", ".", "train", ".", "Scaffold", "(", ")", "\n", "\n", "", "scaffold_fn", "=", "tpu_scaffold", "\n", "", "else", ":", "\n", "        ", "tf", ".", "train", ".", "init_from_checkpoint", "(", "init_checkpoint", ",", "assignment_map", ")", "\n", "\n", "", "", "tf", ".", "logging", ".", "info", "(", "\"**** Trainable Variables ****\"", ")", "\n", "for", "var", "in", "tvars", ":", "\n", "      ", "init_string", "=", "\"\"", "\n", "if", "var", ".", "name", "in", "initialized_variable_names", ":", "\n", "        ", "init_string", "=", "\", *INIT_FROM_CKPT*\"", "\n", "", "tf", ".", "logging", ".", "info", "(", "\"  name = %s, shape = %s%s\"", "%", "(", "var", ".", "name", ",", "var", ".", "shape", ",", "init_string", ")", ")", "\n", "\n", "", "output_spec", "=", "None", "\n", "if", "mode", "==", "tf", ".", "estimator", ".", "ModeKeys", ".", "TRAIN", ":", "\n", "      ", "seq_length", "=", "modeling", ".", "get_shape_list", "(", "input_ids", ")", "[", "1", "]", "\n", "\n", "def", "compute_loss", "(", "logits", ",", "positions", ")", ":", "\n", "        ", "one_hot_positions", "=", "tf", ".", "one_hot", "(", "\n", "positions", ",", "depth", "=", "seq_length", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "log_probs", "=", "tf", ".", "nn", ".", "log_softmax", "(", "logits", ",", "axis", "=", "-", "1", ")", "\n", "loss", "=", "-", "tf", ".", "reduce_mean", "(", "\n", "tf", ".", "reduce_sum", "(", "one_hot_positions", "*", "log_probs", ",", "axis", "=", "-", "1", ")", ")", "\n", "return", "loss", "\n", "\n", "", "start_positions", "=", "features", "[", "\"start_positions\"", "]", "\n", "end_positions", "=", "features", "[", "\"end_positions\"", "]", "\n", "\n", "start_loss", "=", "compute_loss", "(", "start_logits", ",", "start_positions", ")", "\n", "end_loss", "=", "compute_loss", "(", "end_logits", ",", "end_positions", ")", "\n", "\n", "total_loss", "=", "(", "start_loss", "+", "end_loss", ")", "/", "2.0", "\n", "\n", "train_op", "=", "optimization", ".", "create_optimizer", "(", "\n", "total_loss", ",", "learning_rate", ",", "num_train_steps", ",", "num_warmup_steps", ",", "use_tpu", ")", "\n", "\n", "output_spec", "=", "tf", ".", "contrib", ".", "tpu", ".", "TPUEstimatorSpec", "(", "\n", "mode", "=", "mode", ",", "\n", "loss", "=", "total_loss", ",", "\n", "train_op", "=", "train_op", ",", "\n", "scaffold_fn", "=", "scaffold_fn", ")", "\n", "", "elif", "mode", "==", "tf", ".", "estimator", ".", "ModeKeys", ".", "PREDICT", ":", "\n", "      ", "predictions", "=", "{", "\n", "\"unique_ids\"", ":", "unique_ids", ",", "\n", "\"start_logits\"", ":", "start_logits", ",", "\n", "\"end_logits\"", ":", "end_logits", ",", "\n", "}", "\n", "output_spec", "=", "tf", ".", "contrib", ".", "tpu", ".", "TPUEstimatorSpec", "(", "\n", "mode", "=", "mode", ",", "predictions", "=", "predictions", ",", "scaffold_fn", "=", "scaffold_fn", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "\"Only TRAIN and PREDICT modes are supported: %s\"", "%", "(", "mode", ")", ")", "\n", "\n", "", "return", "output_spec", "\n", "\n", "", "return", "model_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_squad.input_fn_builder": [[686, 734], ["tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.parse_single_example", "list", "tensorflow.data.TFRecordDataset", "d.shuffle.apply", "tf.parse_single_example.keys", "d.shuffle.repeat", "d.shuffle.shuffle", "tensorflow.contrib.data.map_and_batch", "tensorflow.to_int32", "run_squad.input_fn_builder._decode_record"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_pretraining._decode_record"], ["", "def", "input_fn_builder", "(", "input_file", ",", "seq_length", ",", "is_training", ",", "drop_remainder", ")", ":", "\n", "  ", "\"\"\"Creates an `input_fn` closure to be passed to TPUEstimator.\"\"\"", "\n", "\n", "name_to_features", "=", "{", "\n", "\"unique_ids\"", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", ",", "\n", "\"input_ids\"", ":", "tf", ".", "FixedLenFeature", "(", "[", "seq_length", "]", ",", "tf", ".", "int64", ")", ",", "\n", "\"input_mask\"", ":", "tf", ".", "FixedLenFeature", "(", "[", "seq_length", "]", ",", "tf", ".", "int64", ")", ",", "\n", "\"segment_ids\"", ":", "tf", ".", "FixedLenFeature", "(", "[", "seq_length", "]", ",", "tf", ".", "int64", ")", ",", "\n", "}", "\n", "\n", "if", "is_training", ":", "\n", "    ", "name_to_features", "[", "\"start_positions\"", "]", "=", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", "\n", "name_to_features", "[", "\"end_positions\"", "]", "=", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", "\n", "\n", "", "def", "_decode_record", "(", "record", ",", "name_to_features", ")", ":", "\n", "    ", "\"\"\"Decodes a record to a TensorFlow example.\"\"\"", "\n", "example", "=", "tf", ".", "parse_single_example", "(", "record", ",", "name_to_features", ")", "\n", "\n", "# tf.Example only supports tf.int64, but the TPU only supports tf.int32.", "\n", "# So cast all int64 to int32.", "\n", "for", "name", "in", "list", "(", "example", ".", "keys", "(", ")", ")", ":", "\n", "      ", "t", "=", "example", "[", "name", "]", "\n", "if", "t", ".", "dtype", "==", "tf", ".", "int64", ":", "\n", "        ", "t", "=", "tf", ".", "to_int32", "(", "t", ")", "\n", "", "example", "[", "name", "]", "=", "t", "\n", "\n", "", "return", "example", "\n", "\n", "", "def", "input_fn", "(", "params", ")", ":", "\n", "    ", "\"\"\"The actual input function.\"\"\"", "\n", "batch_size", "=", "params", "[", "\"batch_size\"", "]", "\n", "\n", "# For training, we want a lot of parallel reading and shuffling.", "\n", "# For eval, we want no shuffling and parallel reading doesn't matter.", "\n", "d", "=", "tf", ".", "data", ".", "TFRecordDataset", "(", "input_file", ")", "\n", "if", "is_training", ":", "\n", "      ", "d", "=", "d", ".", "repeat", "(", ")", "\n", "d", "=", "d", ".", "shuffle", "(", "buffer_size", "=", "100", ")", "\n", "\n", "", "d", "=", "d", ".", "apply", "(", "\n", "tf", ".", "contrib", ".", "data", ".", "map_and_batch", "(", "\n", "lambda", "record", ":", "_decode_record", "(", "record", ",", "name_to_features", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "drop_remainder", "=", "drop_remainder", ")", ")", "\n", "\n", "return", "d", "\n", "\n", "", "return", "input_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_squad.write_predictions": [[740, 924], ["tensorflow.logging.info", "tensorflow.logging.info", "collections.defaultdict", "collections.namedtuple", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "enumerate", "example_index_to_features[].append", "enumerate", "sorted", "collections.namedtuple", "run_squad._compute_softmax", "enumerate", "tensorflow.gfile.GFile", "writer.write", "tensorflow.gfile.GFile", "writer.write", "run_squad._get_best_indexes", "run_squad._get_best_indexes", "sorted.append", "nbest.append", "nbest.append", "len", "total_scores.append", "collections.OrderedDict", "nbest_json.append", "len", "tensorflow.gfile.GFile", "writer.write", "collections.namedtuple.", "len", "tok_text.strip.replace", "tok_text.strip.replace", "tok_text.strip.strip", "run_squad.get_final_text", "collections.namedtuple.", "nbest.append", "collections.namedtuple.", "json.dumps", "json.dumps", "sorted.append", "tok_text.strip.split", "collections.namedtuple.", "json.dumps", "len", "len", "feature.token_is_max_context.get", "collections.namedtuple."], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_squad._compute_softmax", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.write", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.write", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_squad._get_best_indexes", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_squad._get_best_indexes", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.write", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_squad.get_final_text", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get"], ["def", "write_predictions", "(", "all_examples", ",", "all_features", ",", "all_results", ",", "n_best_size", ",", "\n", "max_answer_length", ",", "do_lower_case", ",", "output_prediction_file", ",", "\n", "output_nbest_file", ",", "output_null_log_odds_file", ")", ":", "\n", "  ", "\"\"\"Write final predictions to the json file and log-odds of null if needed.\"\"\"", "\n", "tf", ".", "logging", ".", "info", "(", "\"Writing predictions to: %s\"", "%", "(", "output_prediction_file", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"Writing nbest to: %s\"", "%", "(", "output_nbest_file", ")", ")", "\n", "\n", "example_index_to_features", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "feature", "in", "all_features", ":", "\n", "    ", "example_index_to_features", "[", "feature", ".", "example_index", "]", ".", "append", "(", "feature", ")", "\n", "\n", "", "unique_id_to_result", "=", "{", "}", "\n", "for", "result", "in", "all_results", ":", "\n", "    ", "unique_id_to_result", "[", "result", ".", "unique_id", "]", "=", "result", "\n", "\n", "", "_PrelimPrediction", "=", "collections", ".", "namedtuple", "(", "# pylint: disable=invalid-name", "\n", "\"PrelimPrediction\"", ",", "\n", "[", "\"feature_index\"", ",", "\"start_index\"", ",", "\"end_index\"", ",", "\"start_logit\"", ",", "\"end_logit\"", "]", ")", "\n", "\n", "all_predictions", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "all_nbest_json", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "scores_diff_json", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "\n", "for", "(", "example_index", ",", "example", ")", "in", "enumerate", "(", "all_examples", ")", ":", "\n", "    ", "features", "=", "example_index_to_features", "[", "example_index", "]", "\n", "\n", "prelim_predictions", "=", "[", "]", "\n", "# keep track of the minimum score of null start+end of position 0", "\n", "score_null", "=", "1000000", "# large and positive", "\n", "min_null_feature_index", "=", "0", "# the paragraph slice with min mull score", "\n", "null_start_logit", "=", "0", "# the start logit at the slice with min null score", "\n", "null_end_logit", "=", "0", "# the end logit at the slice with min null score", "\n", "for", "(", "feature_index", ",", "feature", ")", "in", "enumerate", "(", "features", ")", ":", "\n", "      ", "result", "=", "unique_id_to_result", "[", "feature", ".", "unique_id", "]", "\n", "start_indexes", "=", "_get_best_indexes", "(", "result", ".", "start_logits", ",", "n_best_size", ")", "\n", "end_indexes", "=", "_get_best_indexes", "(", "result", ".", "end_logits", ",", "n_best_size", ")", "\n", "# if we could have irrelevant answers, get the min score of irrelevant", "\n", "if", "FLAGS", ".", "version_2_with_negative", ":", "\n", "        ", "feature_null_score", "=", "result", ".", "start_logits", "[", "0", "]", "+", "result", ".", "end_logits", "[", "0", "]", "\n", "if", "feature_null_score", "<", "score_null", ":", "\n", "          ", "score_null", "=", "feature_null_score", "\n", "min_null_feature_index", "=", "feature_index", "\n", "null_start_logit", "=", "result", ".", "start_logits", "[", "0", "]", "\n", "null_end_logit", "=", "result", ".", "end_logits", "[", "0", "]", "\n", "", "", "for", "start_index", "in", "start_indexes", ":", "\n", "        ", "for", "end_index", "in", "end_indexes", ":", "\n", "# We could hypothetically create invalid predictions, e.g., predict", "\n", "# that the start of the span is in the question. We throw out all", "\n", "# invalid predictions.", "\n", "          ", "if", "start_index", ">=", "len", "(", "feature", ".", "tokens", ")", ":", "\n", "            ", "continue", "\n", "", "if", "end_index", ">=", "len", "(", "feature", ".", "tokens", ")", ":", "\n", "            ", "continue", "\n", "", "if", "start_index", "not", "in", "feature", ".", "token_to_orig_map", ":", "\n", "            ", "continue", "\n", "", "if", "end_index", "not", "in", "feature", ".", "token_to_orig_map", ":", "\n", "            ", "continue", "\n", "", "if", "not", "feature", ".", "token_is_max_context", ".", "get", "(", "start_index", ",", "False", ")", ":", "\n", "            ", "continue", "\n", "", "if", "end_index", "<", "start_index", ":", "\n", "            ", "continue", "\n", "", "length", "=", "end_index", "-", "start_index", "+", "1", "\n", "if", "length", ">", "max_answer_length", ":", "\n", "            ", "continue", "\n", "", "prelim_predictions", ".", "append", "(", "\n", "_PrelimPrediction", "(", "\n", "feature_index", "=", "feature_index", ",", "\n", "start_index", "=", "start_index", ",", "\n", "end_index", "=", "end_index", ",", "\n", "start_logit", "=", "result", ".", "start_logits", "[", "start_index", "]", ",", "\n", "end_logit", "=", "result", ".", "end_logits", "[", "end_index", "]", ")", ")", "\n", "\n", "", "", "", "if", "FLAGS", ".", "version_2_with_negative", ":", "\n", "      ", "prelim_predictions", ".", "append", "(", "\n", "_PrelimPrediction", "(", "\n", "feature_index", "=", "min_null_feature_index", ",", "\n", "start_index", "=", "0", ",", "\n", "end_index", "=", "0", ",", "\n", "start_logit", "=", "null_start_logit", ",", "\n", "end_logit", "=", "null_end_logit", ")", ")", "\n", "", "prelim_predictions", "=", "sorted", "(", "\n", "prelim_predictions", ",", "\n", "key", "=", "lambda", "x", ":", "(", "x", ".", "start_logit", "+", "x", ".", "end_logit", ")", ",", "\n", "reverse", "=", "True", ")", "\n", "\n", "_NbestPrediction", "=", "collections", ".", "namedtuple", "(", "# pylint: disable=invalid-name", "\n", "\"NbestPrediction\"", ",", "[", "\"text\"", ",", "\"start_logit\"", ",", "\"end_logit\"", "]", ")", "\n", "\n", "seen_predictions", "=", "{", "}", "\n", "nbest", "=", "[", "]", "\n", "for", "pred", "in", "prelim_predictions", ":", "\n", "      ", "if", "len", "(", "nbest", ")", ">=", "n_best_size", ":", "\n", "        ", "break", "\n", "", "feature", "=", "features", "[", "pred", ".", "feature_index", "]", "\n", "if", "pred", ".", "start_index", ">", "0", ":", "# this is a non-null prediction", "\n", "        ", "tok_tokens", "=", "feature", ".", "tokens", "[", "pred", ".", "start_index", ":", "(", "pred", ".", "end_index", "+", "1", ")", "]", "\n", "orig_doc_start", "=", "feature", ".", "token_to_orig_map", "[", "pred", ".", "start_index", "]", "\n", "orig_doc_end", "=", "feature", ".", "token_to_orig_map", "[", "pred", ".", "end_index", "]", "\n", "orig_tokens", "=", "example", ".", "doc_tokens", "[", "orig_doc_start", ":", "(", "orig_doc_end", "+", "1", ")", "]", "\n", "tok_text", "=", "\" \"", ".", "join", "(", "tok_tokens", ")", "\n", "\n", "# De-tokenize WordPieces that have been split off.", "\n", "tok_text", "=", "tok_text", ".", "replace", "(", "\" ##\"", ",", "\"\"", ")", "\n", "tok_text", "=", "tok_text", ".", "replace", "(", "\"##\"", ",", "\"\"", ")", "\n", "\n", "# Clean whitespace", "\n", "tok_text", "=", "tok_text", ".", "strip", "(", ")", "\n", "tok_text", "=", "\" \"", ".", "join", "(", "tok_text", ".", "split", "(", ")", ")", "\n", "orig_text", "=", "\" \"", ".", "join", "(", "orig_tokens", ")", "\n", "\n", "final_text", "=", "get_final_text", "(", "tok_text", ",", "orig_text", ",", "do_lower_case", ")", "\n", "if", "final_text", "in", "seen_predictions", ":", "\n", "          ", "continue", "\n", "\n", "", "seen_predictions", "[", "final_text", "]", "=", "True", "\n", "", "else", ":", "\n", "        ", "final_text", "=", "\"\"", "\n", "seen_predictions", "[", "final_text", "]", "=", "True", "\n", "\n", "", "nbest", ".", "append", "(", "\n", "_NbestPrediction", "(", "\n", "text", "=", "final_text", ",", "\n", "start_logit", "=", "pred", ".", "start_logit", ",", "\n", "end_logit", "=", "pred", ".", "end_logit", ")", ")", "\n", "\n", "# if we didn't inlude the empty option in the n-best, inlcude it", "\n", "", "if", "FLAGS", ".", "version_2_with_negative", ":", "\n", "      ", "if", "\"\"", "not", "in", "seen_predictions", ":", "\n", "        ", "nbest", ".", "append", "(", "\n", "_NbestPrediction", "(", "\n", "text", "=", "\"\"", ",", "start_logit", "=", "null_start_logit", ",", "\n", "end_logit", "=", "null_end_logit", ")", ")", "\n", "# In very rare edge cases we could have no valid predictions. So we", "\n", "# just create a nonce prediction in this case to avoid failure.", "\n", "", "", "if", "not", "nbest", ":", "\n", "      ", "nbest", ".", "append", "(", "\n", "_NbestPrediction", "(", "text", "=", "\"empty\"", ",", "start_logit", "=", "0.0", ",", "end_logit", "=", "0.0", ")", ")", "\n", "\n", "", "assert", "len", "(", "nbest", ")", ">=", "1", "\n", "\n", "total_scores", "=", "[", "]", "\n", "best_non_null_entry", "=", "None", "\n", "for", "entry", "in", "nbest", ":", "\n", "      ", "total_scores", ".", "append", "(", "entry", ".", "start_logit", "+", "entry", ".", "end_logit", ")", "\n", "if", "not", "best_non_null_entry", ":", "\n", "        ", "if", "entry", ".", "text", ":", "\n", "          ", "best_non_null_entry", "=", "entry", "\n", "\n", "", "", "", "probs", "=", "_compute_softmax", "(", "total_scores", ")", "\n", "\n", "nbest_json", "=", "[", "]", "\n", "for", "(", "i", ",", "entry", ")", "in", "enumerate", "(", "nbest", ")", ":", "\n", "      ", "output", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "output", "[", "\"text\"", "]", "=", "entry", ".", "text", "\n", "output", "[", "\"probability\"", "]", "=", "probs", "[", "i", "]", "\n", "output", "[", "\"start_logit\"", "]", "=", "entry", ".", "start_logit", "\n", "output", "[", "\"end_logit\"", "]", "=", "entry", ".", "end_logit", "\n", "nbest_json", ".", "append", "(", "output", ")", "\n", "\n", "", "assert", "len", "(", "nbest_json", ")", ">=", "1", "\n", "\n", "if", "not", "FLAGS", ".", "version_2_with_negative", ":", "\n", "      ", "all_predictions", "[", "example", ".", "qas_id", "]", "=", "nbest_json", "[", "0", "]", "[", "\"text\"", "]", "\n", "", "else", ":", "\n", "# predict \"\" iff the null score - the score of best non-null > threshold", "\n", "      ", "score_diff", "=", "score_null", "-", "best_non_null_entry", ".", "start_logit", "-", "(", "\n", "best_non_null_entry", ".", "end_logit", ")", "\n", "scores_diff_json", "[", "example", ".", "qas_id", "]", "=", "score_diff", "\n", "if", "score_diff", ">", "FLAGS", ".", "null_score_diff_threshold", ":", "\n", "        ", "all_predictions", "[", "example", ".", "qas_id", "]", "=", "\"\"", "\n", "", "else", ":", "\n", "        ", "all_predictions", "[", "example", ".", "qas_id", "]", "=", "best_non_null_entry", ".", "text", "\n", "\n", "", "", "all_nbest_json", "[", "example", ".", "qas_id", "]", "=", "nbest_json", "\n", "\n", "", "with", "tf", ".", "gfile", ".", "GFile", "(", "output_prediction_file", ",", "\"w\"", ")", "as", "writer", ":", "\n", "    ", "writer", ".", "write", "(", "json", ".", "dumps", "(", "all_predictions", ",", "indent", "=", "4", ")", "+", "\"\\n\"", ")", "\n", "\n", "", "with", "tf", ".", "gfile", ".", "GFile", "(", "output_nbest_file", ",", "\"w\"", ")", "as", "writer", ":", "\n", "    ", "writer", ".", "write", "(", "json", ".", "dumps", "(", "all_nbest_json", ",", "indent", "=", "4", ")", "+", "\"\\n\"", ")", "\n", "\n", "", "if", "FLAGS", ".", "version_2_with_negative", ":", "\n", "    ", "with", "tf", ".", "gfile", ".", "GFile", "(", "output_null_log_odds_file", ",", "\"w\"", ")", "as", "writer", ":", "\n", "      ", "writer", ".", "write", "(", "json", ".", "dumps", "(", "scores_diff_json", ",", "indent", "=", "4", ")", "+", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_squad.get_final_text": [[926, 1020], ["tokenization.BasicTokenizer", "tok_text.find", "run_squad.get_final_text._strip_spaces"], "function", ["None"], ["", "", "", "def", "get_final_text", "(", "pred_text", ",", "orig_text", ",", "do_lower_case", ")", ":", "\n", "  ", "\"\"\"Project the tokenized prediction back to the original text.\"\"\"", "\n", "\n", "# When we created the data, we kept track of the alignment between original", "\n", "# (whitespace tokenized) tokens and our WordPiece tokenized tokens. So", "\n", "# now `orig_text` contains the span of our original text corresponding to the", "\n", "# span that we predicted.", "\n", "#", "\n", "# However, `orig_text` may contain extra characters that we don't want in", "\n", "# our prediction.", "\n", "#", "\n", "# For example, let's say:", "\n", "#   pred_text = steve smith", "\n", "#   orig_text = Steve Smith's", "\n", "#", "\n", "# We don't want to return `orig_text` because it contains the extra \"'s\".", "\n", "#", "\n", "# We don't want to return `pred_text` because it's already been normalized", "\n", "# (the SQuAD eval script also does punctuation stripping/lower casing but", "\n", "# our tokenizer does additional normalization like stripping accent", "\n", "# characters).", "\n", "#", "\n", "# What we really want to return is \"Steve Smith\".", "\n", "#", "\n", "# Therefore, we have to apply a semi-complicated alignment heruistic between", "\n", "# `pred_text` and `orig_text` to get a character-to-charcter alignment. This", "\n", "# can fail in certain cases in which case we just return `orig_text`.", "\n", "\n", "def", "_strip_spaces", "(", "text", ")", ":", "\n", "    ", "ns_chars", "=", "[", "]", "\n", "ns_to_s_map", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "for", "(", "i", ",", "c", ")", "in", "enumerate", "(", "text", ")", ":", "\n", "      ", "if", "c", "==", "\" \"", ":", "\n", "        ", "continue", "\n", "", "ns_to_s_map", "[", "len", "(", "ns_chars", ")", "]", "=", "i", "\n", "ns_chars", ".", "append", "(", "c", ")", "\n", "", "ns_text", "=", "\"\"", ".", "join", "(", "ns_chars", ")", "\n", "return", "(", "ns_text", ",", "ns_to_s_map", ")", "\n", "\n", "# We first tokenize `orig_text`, strip whitespace from the result", "\n", "# and `pred_text`, and check if they are the same length. If they are", "\n", "# NOT the same length, the heuristic has failed. If they are the same", "\n", "# length, we assume the characters are one-to-one aligned.", "\n", "", "tokenizer", "=", "tokenization", ".", "BasicTokenizer", "(", "do_lower_case", "=", "do_lower_case", ")", "\n", "\n", "tok_text", "=", "\" \"", ".", "join", "(", "tokenizer", ".", "tokenize", "(", "orig_text", ")", ")", "\n", "\n", "start_position", "=", "tok_text", ".", "find", "(", "pred_text", ")", "\n", "if", "start_position", "==", "-", "1", ":", "\n", "    ", "if", "FLAGS", ".", "verbose_logging", ":", "\n", "      ", "tf", ".", "logging", ".", "info", "(", "\n", "\"Unable to find text: '%s' in '%s'\"", "%", "(", "pred_text", ",", "orig_text", ")", ")", "\n", "", "return", "orig_text", "\n", "", "end_position", "=", "start_position", "+", "len", "(", "pred_text", ")", "-", "1", "\n", "\n", "(", "orig_ns_text", ",", "orig_ns_to_s_map", ")", "=", "_strip_spaces", "(", "orig_text", ")", "\n", "(", "tok_ns_text", ",", "tok_ns_to_s_map", ")", "=", "_strip_spaces", "(", "tok_text", ")", "\n", "\n", "if", "len", "(", "orig_ns_text", ")", "!=", "len", "(", "tok_ns_text", ")", ":", "\n", "    ", "if", "FLAGS", ".", "verbose_logging", ":", "\n", "      ", "tf", ".", "logging", ".", "info", "(", "\"Length not equal after stripping spaces: '%s' vs '%s'\"", ",", "\n", "orig_ns_text", ",", "tok_ns_text", ")", "\n", "", "return", "orig_text", "\n", "\n", "# We then project the characters in `pred_text` back to `orig_text` using", "\n", "# the character-to-character alignment.", "\n", "", "tok_s_to_ns_map", "=", "{", "}", "\n", "for", "(", "i", ",", "tok_index", ")", "in", "six", ".", "iteritems", "(", "tok_ns_to_s_map", ")", ":", "\n", "    ", "tok_s_to_ns_map", "[", "tok_index", "]", "=", "i", "\n", "\n", "", "orig_start_position", "=", "None", "\n", "if", "start_position", "in", "tok_s_to_ns_map", ":", "\n", "    ", "ns_start_position", "=", "tok_s_to_ns_map", "[", "start_position", "]", "\n", "if", "ns_start_position", "in", "orig_ns_to_s_map", ":", "\n", "      ", "orig_start_position", "=", "orig_ns_to_s_map", "[", "ns_start_position", "]", "\n", "\n", "", "", "if", "orig_start_position", "is", "None", ":", "\n", "    ", "if", "FLAGS", ".", "verbose_logging", ":", "\n", "      ", "tf", ".", "logging", ".", "info", "(", "\"Couldn't map start position\"", ")", "\n", "", "return", "orig_text", "\n", "\n", "", "orig_end_position", "=", "None", "\n", "if", "end_position", "in", "tok_s_to_ns_map", ":", "\n", "    ", "ns_end_position", "=", "tok_s_to_ns_map", "[", "end_position", "]", "\n", "if", "ns_end_position", "in", "orig_ns_to_s_map", ":", "\n", "      ", "orig_end_position", "=", "orig_ns_to_s_map", "[", "ns_end_position", "]", "\n", "\n", "", "", "if", "orig_end_position", "is", "None", ":", "\n", "    ", "if", "FLAGS", ".", "verbose_logging", ":", "\n", "      ", "tf", ".", "logging", ".", "info", "(", "\"Couldn't map end position\"", ")", "\n", "", "return", "orig_text", "\n", "\n", "", "output_text", "=", "orig_text", "[", "orig_start_position", ":", "(", "orig_end_position", "+", "1", ")", "]", "\n", "return", "output_text", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_squad._get_best_indexes": [[1022, 1032], ["sorted", "range", "enumerate", "len", "best_indexes.append"], "function", ["None"], ["", "def", "_get_best_indexes", "(", "logits", ",", "n_best_size", ")", ":", "\n", "  ", "\"\"\"Get the n-best logits from a list.\"\"\"", "\n", "index_and_score", "=", "sorted", "(", "enumerate", "(", "logits", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "\n", "best_indexes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "index_and_score", ")", ")", ":", "\n", "    ", "if", "i", ">=", "n_best_size", ":", "\n", "      ", "break", "\n", "", "best_indexes", ".", "append", "(", "index_and_score", "[", "i", "]", "[", "0", "]", ")", "\n", "", "return", "best_indexes", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_squad._compute_softmax": [[1034, 1055], ["math.exp", "exp_scores.append", "probs.append"], "function", ["None"], ["", "def", "_compute_softmax", "(", "scores", ")", ":", "\n", "  ", "\"\"\"Compute softmax probability over raw logits.\"\"\"", "\n", "if", "not", "scores", ":", "\n", "    ", "return", "[", "]", "\n", "\n", "", "max_score", "=", "None", "\n", "for", "score", "in", "scores", ":", "\n", "    ", "if", "max_score", "is", "None", "or", "score", ">", "max_score", ":", "\n", "      ", "max_score", "=", "score", "\n", "\n", "", "", "exp_scores", "=", "[", "]", "\n", "total_sum", "=", "0.0", "\n", "for", "score", "in", "scores", ":", "\n", "    ", "x", "=", "math", ".", "exp", "(", "score", "-", "max_score", ")", "\n", "exp_scores", ".", "append", "(", "x", ")", "\n", "total_sum", "+=", "x", "\n", "\n", "", "probs", "=", "[", "]", "\n", "for", "score", "in", "exp_scores", ":", "\n", "    ", "probs", ".", "append", "(", "score", "/", "total_sum", ")", "\n", "", "return", "probs", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_squad.validate_flags_or_throw": [[1096, 1123], ["tokenization.validate_case_matches_checkpoint", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.validate_case_matches_checkpoint"], ["", "", "def", "validate_flags_or_throw", "(", "bert_config", ")", ":", "\n", "  ", "\"\"\"Validate the input FLAGS or throw an exception.\"\"\"", "\n", "tokenization", ".", "validate_case_matches_checkpoint", "(", "FLAGS", ".", "do_lower_case", ",", "\n", "FLAGS", ".", "init_checkpoint", ")", "\n", "\n", "if", "not", "FLAGS", ".", "do_train", "and", "not", "FLAGS", ".", "do_predict", ":", "\n", "    ", "raise", "ValueError", "(", "\"At least one of `do_train` or `do_predict` must be True.\"", ")", "\n", "\n", "", "if", "FLAGS", ".", "do_train", ":", "\n", "    ", "if", "not", "FLAGS", ".", "train_file", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "\"If `do_train` is True, then `train_file` must be specified.\"", ")", "\n", "", "", "if", "FLAGS", ".", "do_predict", ":", "\n", "    ", "if", "not", "FLAGS", ".", "predict_file", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "\"If `do_predict` is True, then `predict_file` must be specified.\"", ")", "\n", "\n", "", "", "if", "FLAGS", ".", "max_seq_length", ">", "bert_config", ".", "max_position_embeddings", ":", "\n", "    ", "raise", "ValueError", "(", "\n", "\"Cannot use sequence length %d because the BERT model \"", "\n", "\"was only trained up to sequence length %d\"", "%", "\n", "(", "FLAGS", ".", "max_seq_length", ",", "bert_config", ".", "max_position_embeddings", ")", ")", "\n", "\n", "", "if", "FLAGS", ".", "max_seq_length", "<=", "FLAGS", ".", "max_query_length", "+", "3", ":", "\n", "    ", "raise", "ValueError", "(", "\n", "\"The max_seq_length (%d) must be greater than max_query_length \"", "\n", "\"(%d) + 3\"", "%", "(", "FLAGS", ".", "max_seq_length", ",", "FLAGS", ".", "max_query_length", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_squad.main": [[1125, 1276], ["tensorflow.logging.set_verbosity", "modeling.BertConfig.from_json_file", "run_squad.validate_flags_or_throw", "tensorflow.gfile.MakeDirs", "tokenization.FullTokenizer", "tensorflow.contrib.tpu.RunConfig", "run_squad.model_fn_builder", "tensorflow.contrib.tpu.TPUEstimator", "tensorflow.contrib.cluster_resolver.TPUClusterResolver", "run_squad.read_squad_examples", "int", "int", "random.Random", "random.Random.shuffle", "run_squad.FeatureWriter", "run_squad.convert_examples_to_features", "run_squad.FeatureWriter.close", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "run_squad.input_fn_builder", "tf.contrib.tpu.TPUEstimator.train", "run_squad.read_squad_examples", "run_squad.FeatureWriter", "run_squad.convert_examples_to_features", "run_squad.FeatureWriter.close", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "tensorflow.logging.info", "run_squad.input_fn_builder", "tf.contrib.tpu.TPUEstimator.predict", "os.path.join", "os.path.join", "os.path.join", "run_squad.write_predictions", "tensorflow.contrib.tpu.TPUConfig", "len", "eval_features.append", "run_squad.FeatureWriter.process_feature", "len", "len", "int", "all_results.append", "os.path.join", "os.path.join", "tensorflow.logging.info", "float", "float", "RawResult", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.BertConfig.from_json_file", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_squad.validate_flags_or_throw", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_squad.model_fn_builder", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_squad.read_squad_examples", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_squad.convert_examples_to_features", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.close", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_squad.input_fn_builder", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.src.traintool.train", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_squad.read_squad_examples", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_squad.convert_examples_to_features", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.close", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_squad.input_fn_builder", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.predict", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_squad.write_predictions", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.run_squad.FeatureWriter.process_feature"], ["", "", "def", "main", "(", "_", ")", ":", "\n", "  ", "tf", ".", "logging", ".", "set_verbosity", "(", "tf", ".", "logging", ".", "INFO", ")", "\n", "\n", "bert_config", "=", "modeling", ".", "BertConfig", ".", "from_json_file", "(", "FLAGS", ".", "bert_config_file", ")", "\n", "\n", "validate_flags_or_throw", "(", "bert_config", ")", "\n", "\n", "tf", ".", "gfile", ".", "MakeDirs", "(", "FLAGS", ".", "output_dir", ")", "\n", "\n", "tokenizer", "=", "tokenization", ".", "FullTokenizer", "(", "\n", "vocab_file", "=", "FLAGS", ".", "vocab_file", ",", "do_lower_case", "=", "FLAGS", ".", "do_lower_case", ")", "\n", "\n", "tpu_cluster_resolver", "=", "None", "\n", "if", "FLAGS", ".", "use_tpu", "and", "FLAGS", ".", "tpu_name", ":", "\n", "    ", "tpu_cluster_resolver", "=", "tf", ".", "contrib", ".", "cluster_resolver", ".", "TPUClusterResolver", "(", "\n", "FLAGS", ".", "tpu_name", ",", "zone", "=", "FLAGS", ".", "tpu_zone", ",", "project", "=", "FLAGS", ".", "gcp_project", ")", "\n", "\n", "", "is_per_host", "=", "tf", ".", "contrib", ".", "tpu", ".", "InputPipelineConfig", ".", "PER_HOST_V2", "\n", "run_config", "=", "tf", ".", "contrib", ".", "tpu", ".", "RunConfig", "(", "\n", "cluster", "=", "tpu_cluster_resolver", ",", "\n", "master", "=", "FLAGS", ".", "master", ",", "\n", "model_dir", "=", "FLAGS", ".", "output_dir", ",", "\n", "save_checkpoints_steps", "=", "FLAGS", ".", "save_checkpoints_steps", ",", "\n", "tpu_config", "=", "tf", ".", "contrib", ".", "tpu", ".", "TPUConfig", "(", "\n", "iterations_per_loop", "=", "FLAGS", ".", "iterations_per_loop", ",", "\n", "num_shards", "=", "FLAGS", ".", "num_tpu_cores", ",", "\n", "per_host_input_for_training", "=", "is_per_host", ")", ")", "\n", "\n", "train_examples", "=", "None", "\n", "num_train_steps", "=", "None", "\n", "num_warmup_steps", "=", "None", "\n", "if", "FLAGS", ".", "do_train", ":", "\n", "    ", "train_examples", "=", "read_squad_examples", "(", "\n", "input_file", "=", "FLAGS", ".", "train_file", ",", "is_training", "=", "True", ")", "\n", "num_train_steps", "=", "int", "(", "\n", "len", "(", "train_examples", ")", "/", "FLAGS", ".", "train_batch_size", "*", "FLAGS", ".", "num_train_epochs", ")", "\n", "num_warmup_steps", "=", "int", "(", "num_train_steps", "*", "FLAGS", ".", "warmup_proportion", ")", "\n", "\n", "# Pre-shuffle the input to avoid having to make a very large shuffle", "\n", "# buffer in in the `input_fn`.", "\n", "rng", "=", "random", ".", "Random", "(", "12345", ")", "\n", "rng", ".", "shuffle", "(", "train_examples", ")", "\n", "\n", "", "model_fn", "=", "model_fn_builder", "(", "\n", "bert_config", "=", "bert_config", ",", "\n", "init_checkpoint", "=", "FLAGS", ".", "init_checkpoint", ",", "\n", "learning_rate", "=", "FLAGS", ".", "learning_rate", ",", "\n", "num_train_steps", "=", "num_train_steps", ",", "\n", "num_warmup_steps", "=", "num_warmup_steps", ",", "\n", "use_tpu", "=", "FLAGS", ".", "use_tpu", ",", "\n", "use_one_hot_embeddings", "=", "FLAGS", ".", "use_tpu", ")", "\n", "\n", "# If TPU is not available, this will fall back to normal Estimator on CPU", "\n", "# or GPU.", "\n", "estimator", "=", "tf", ".", "contrib", ".", "tpu", ".", "TPUEstimator", "(", "\n", "use_tpu", "=", "FLAGS", ".", "use_tpu", ",", "\n", "model_fn", "=", "model_fn", ",", "\n", "config", "=", "run_config", ",", "\n", "train_batch_size", "=", "FLAGS", ".", "train_batch_size", ",", "\n", "predict_batch_size", "=", "FLAGS", ".", "predict_batch_size", ")", "\n", "\n", "if", "FLAGS", ".", "do_train", ":", "\n", "# We write to a temporary file to avoid storing very large constant tensors", "\n", "# in memory.", "\n", "    ", "train_writer", "=", "FeatureWriter", "(", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "output_dir", ",", "\"train.tf_record\"", ")", ",", "\n", "is_training", "=", "True", ")", "\n", "convert_examples_to_features", "(", "\n", "examples", "=", "train_examples", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "max_seq_length", "=", "FLAGS", ".", "max_seq_length", ",", "\n", "doc_stride", "=", "FLAGS", ".", "doc_stride", ",", "\n", "max_query_length", "=", "FLAGS", ".", "max_query_length", ",", "\n", "is_training", "=", "True", ",", "\n", "output_fn", "=", "train_writer", ".", "process_feature", ")", "\n", "train_writer", ".", "close", "(", ")", "\n", "\n", "tf", ".", "logging", ".", "info", "(", "\"***** Running training *****\"", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"  Num orig examples = %d\"", ",", "len", "(", "train_examples", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"  Num split examples = %d\"", ",", "train_writer", ".", "num_features", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"  Batch size = %d\"", ",", "FLAGS", ".", "train_batch_size", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"  Num steps = %d\"", ",", "num_train_steps", ")", "\n", "del", "train_examples", "\n", "\n", "train_input_fn", "=", "input_fn_builder", "(", "\n", "input_file", "=", "train_writer", ".", "filename", ",", "\n", "seq_length", "=", "FLAGS", ".", "max_seq_length", ",", "\n", "is_training", "=", "True", ",", "\n", "drop_remainder", "=", "True", ")", "\n", "estimator", ".", "train", "(", "input_fn", "=", "train_input_fn", ",", "max_steps", "=", "num_train_steps", ")", "\n", "\n", "", "if", "FLAGS", ".", "do_predict", ":", "\n", "    ", "eval_examples", "=", "read_squad_examples", "(", "\n", "input_file", "=", "FLAGS", ".", "predict_file", ",", "is_training", "=", "False", ")", "\n", "\n", "eval_writer", "=", "FeatureWriter", "(", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "output_dir", ",", "\"eval.tf_record\"", ")", ",", "\n", "is_training", "=", "False", ")", "\n", "eval_features", "=", "[", "]", "\n", "\n", "def", "append_feature", "(", "feature", ")", ":", "\n", "      ", "eval_features", ".", "append", "(", "feature", ")", "\n", "eval_writer", ".", "process_feature", "(", "feature", ")", "\n", "\n", "", "convert_examples_to_features", "(", "\n", "examples", "=", "eval_examples", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "max_seq_length", "=", "FLAGS", ".", "max_seq_length", ",", "\n", "doc_stride", "=", "FLAGS", ".", "doc_stride", ",", "\n", "max_query_length", "=", "FLAGS", ".", "max_query_length", ",", "\n", "is_training", "=", "False", ",", "\n", "output_fn", "=", "append_feature", ")", "\n", "eval_writer", ".", "close", "(", ")", "\n", "\n", "tf", ".", "logging", ".", "info", "(", "\"***** Running predictions *****\"", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"  Num orig examples = %d\"", ",", "len", "(", "eval_examples", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"  Num split examples = %d\"", ",", "len", "(", "eval_features", ")", ")", "\n", "tf", ".", "logging", ".", "info", "(", "\"  Batch size = %d\"", ",", "FLAGS", ".", "predict_batch_size", ")", "\n", "\n", "all_results", "=", "[", "]", "\n", "\n", "predict_input_fn", "=", "input_fn_builder", "(", "\n", "input_file", "=", "eval_writer", ".", "filename", ",", "\n", "seq_length", "=", "FLAGS", ".", "max_seq_length", ",", "\n", "is_training", "=", "False", ",", "\n", "drop_remainder", "=", "False", ")", "\n", "\n", "# If running eval on the TPU, you will need to specify the number of", "\n", "# steps.", "\n", "all_results", "=", "[", "]", "\n", "for", "result", "in", "estimator", ".", "predict", "(", "\n", "predict_input_fn", ",", "yield_single_examples", "=", "True", ")", ":", "\n", "      ", "if", "len", "(", "all_results", ")", "%", "1000", "==", "0", ":", "\n", "        ", "tf", ".", "logging", ".", "info", "(", "\"Processing example: %d\"", "%", "(", "len", "(", "all_results", ")", ")", ")", "\n", "", "unique_id", "=", "int", "(", "result", "[", "\"unique_ids\"", "]", ")", "\n", "start_logits", "=", "[", "float", "(", "x", ")", "for", "x", "in", "result", "[", "\"start_logits\"", "]", ".", "flat", "]", "\n", "end_logits", "=", "[", "float", "(", "x", ")", "for", "x", "in", "result", "[", "\"end_logits\"", "]", ".", "flat", "]", "\n", "all_results", ".", "append", "(", "\n", "RawResult", "(", "\n", "unique_id", "=", "unique_id", ",", "\n", "start_logits", "=", "start_logits", ",", "\n", "end_logits", "=", "end_logits", ")", ")", "\n", "\n", "", "output_prediction_file", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "output_dir", ",", "\"predictions.json\"", ")", "\n", "output_nbest_file", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "output_dir", ",", "\"nbest_predictions.json\"", ")", "\n", "output_null_log_odds_file", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "output_dir", ",", "\"null_odds.json\"", ")", "\n", "\n", "write_predictions", "(", "eval_examples", ",", "eval_features", ",", "all_results", ",", "\n", "FLAGS", ".", "n_best_size", ",", "FLAGS", ".", "max_answer_length", ",", "\n", "FLAGS", ".", "do_lower_case", ",", "output_prediction_file", ",", "\n", "output_nbest_file", ",", "output_null_log_odds_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.prototyping.main_brute_force_mtt.get_all_spanning_trees_v2": [[11, 152], ["dict", "range", "torch.cartesian_prod", "torch.zeros", "torch.cat.permute().contiguous", "adjacency.permute().contiguous.permute().contiguous", "torch.zeros", "torch.cat", "print", "print", "idx_to_node.append", "torch.tensor", "len", "cart_prod_idx.unsqueeze.unsqueeze", "cart_prod_idx.unsqueeze.size", "cart_prod_idx.unsqueeze.size", "cart_prod_idx.unsqueeze.reshape", "adjacency.permute().contiguous.view", "torch.cat.size", "torch.cat.size", "torch.triu", "torch.tril", "torch.tril.transpose", "list", "list.append", "list", "enumerate", "set", "main_brute_force_mtt.get_all_spanning_trees_v2.recursive_tree_traverse"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["def", "get_all_spanning_trees_v2", "(", "nr_nodes", ":", "int", "=", "6", ",", "mask_matrix", "=", "None", ")", ":", "\n", "# this version  puts \"root\" node in the matrix", "\n", "\n", "    ", "node_letter_names", "=", "'RABCDEFGHIJKLMNOPQRSTUVWXUZ1234567890~!@#$%^&*()_-+=}]{[:;\"\\'\\\\,<.>/?'", "\n", "\n", "idx_to_node", "=", "[", "]", "\n", "node_to_idx", "=", "dict", "(", ")", "\n", "# idx_to_node = ['R']", "\n", "# node_to_idx = {'R': 0}", "\n", "\n", "# for id in range(1, nr_spans + 1):", "\n", "for", "id", "in", "range", "(", "0", ",", "nr_nodes", ")", ":", "\n", "        ", "idx_to_node", ".", "append", "(", "node_letter_names", "[", "id", "]", ")", "\n", "node_to_idx", "[", "node_letter_names", "[", "id", "]", "]", "=", "id", "\n", "# idx_to_node.append(node_letter_names[id - 1])", "\n", "# node_to_idx[node_letter_names[id - 1]] = id", "\n", "\n", "# tensors_mention_idxs = [torch.tensor(list(range(nr_nodes + 1))) for _ in range(nr_nodes)]", "\n", "", "tensors_mention_idxs", "=", "[", "torch", ".", "tensor", "(", "list", "(", "range", "(", "nr_nodes", ")", ")", ")", "for", "_", "in", "range", "(", "nr_nodes", "-", "1", ")", "]", "\n", "cart_prod_idx", "=", "torch", ".", "cartesian_prod", "(", "*", "tensors_mention_idxs", ")", "\n", "if", "len", "(", "cart_prod_idx", ".", "shape", ")", "==", "1", ":", "\n", "        ", "cart_prod_idx", "=", "cart_prod_idx", ".", "unsqueeze", "(", "-", "1", ")", "\n", "# tensor([0, 1]) --> .shape --> torch.Size([2])", "\n", "# tensor([[0, 0],", "\n", "#         [0, 1],", "\n", "#         [0, 2],", "\n", "#         [1, 0],", "\n", "#         [1, 1],", "\n", "#         [1, 2],", "\n", "#         [2, 0],", "\n", "#         [2, 1],", "\n", "#         [2, 2]])", "\n", "# -->shape --> torch.Size([9, 2])", "\n", "", "adjacency", "=", "torch", ".", "zeros", "(", "cart_prod_idx", ".", "size", "(", "0", ")", ",", "cart_prod_idx", ".", "size", "(", "1", ")", "+", "1", ",", "cart_prod_idx", ".", "size", "(", "1", ")", ",", "\n", "dtype", "=", "torch", ".", "int", ")", "\n", "# adjacency = torch.zeros(cart_prod_idx.size(0), cart_prod_idx.size(1), cart_prod_idx.size(1) + 1,", "\n", "#                         dtype=torch.int)", "\n", "\n", "cart_prod_idx2", "=", "cart_prod_idx", ".", "reshape", "(", "-", "1", ")", "+", "torch", ".", "arange", "(", "\n", "cart_prod_idx", ".", "size", "(", "0", ")", "*", "cart_prod_idx", ".", "size", "(", "1", ")", ")", "*", "adjacency", ".", "size", "(", "1", ")", "\n", "# cart_prod_idx.size(0) * cart_prod_idx.size(1)) * adjacency.size(2)", "\n", "adj_temp", "=", "adjacency", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "# adjacency.view(-1)[cart_prod_idx2] = 1", "\n", "adj_temp", ".", "view", "(", "-", "1", ")", "[", "cart_prod_idx2", "]", "=", "1", "\n", "\n", "adjacency", "=", "adj_temp", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "# concatenates the row to root with all zeros, since the root doesn't get edges pointing to it", "\n", "empty_col_to_concat", "=", "torch", ".", "zeros", "(", "adjacency", ".", "size", "(", "0", ")", ",", "adjacency", ".", "size", "(", "1", ")", ",", "1", ",", "\n", "dtype", "=", "torch", ".", "int", ")", "\n", "\n", "adjacency", "=", "torch", ".", "cat", "(", "[", "empty_col_to_concat", ",", "adjacency", "]", ",", "dim", "=", "2", ")", "\n", "\n", "# now counts the unique spanning trees", "\n", "nr_spanning_trees", "=", "0", "\n", "print", "(", "'adjacency shape: '", ",", "adjacency", ".", "shape", ")", "\n", "nr_processed", "=", "0", "\n", "spanning_trees", "=", "[", "]", "\n", "for", "curr_adj_matrix", "in", "adjacency", ":", "\n", "        ", "nr_processed", "+=", "1", "\n", "if", "nr_processed", "%", "1000", "==", "0", ":", "\n", "            ", "print", "(", "'nr pre-processed: '", ",", "nr_processed", ",", "'  nr_kept (spanning trees without loops): '", ",", "nr_spanning_trees", ")", "\n", "# continue if the root doesn't have outbound relations", "\n", "# if curr_adj_matrix[:, 0].sum() == 0:", "\n", "# curr_adj_matrix = curr_adj_matrix.T", "\n", "# curr_adj_matrix = curr_adj_matrix[1:, :][:, 1:]  # no root element in the matrix for now", "\n", "", "if", "mask_matrix", "is", "not", "None", ":", "\n", "            ", "curr_adj_matrix", "=", "curr_adj_matrix", "*", "mask_matrix", "\n", "# after applying mask there should be a minimum number of edges", "\n", "if", "curr_adj_matrix", ".", "sum", "(", ")", ".", "item", "(", ")", "<", "nr_nodes", "-", "1", ":", "\n", "# print('missing necessary edges, continuing: ')", "\n", "# print(curr_adj_matrix)", "\n", "                ", "continue", "\n", "\n", "", "", "if", "curr_adj_matrix", "[", "0", ",", ":", "]", ".", "sum", "(", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "# continue if there are relations to itself (main diagonal)", "\n", "", "if", "torch", ".", "diagonal", "(", "curr_adj_matrix", ",", "0", ")", ".", "sum", "(", ")", ">", "0", ":", "\n", "            ", "continue", "\n", "\n", "# continue if symmetries detected (ex: A -> B ; B -> A", "\n", "", "upper_triangle", "=", "torch", ".", "triu", "(", "curr_adj_matrix", ")", "\n", "lower_triangle", "=", "torch", ".", "tril", "(", "curr_adj_matrix", ")", "\n", "lower_triangle_t", "=", "lower_triangle", ".", "transpose", "(", "1", ",", "0", ")", "\n", "symm_check", "=", "upper_triangle", "+", "lower_triangle_t", "\n", "if", "torch", ".", "max", "(", "symm_check", ")", ">", "1", ":", "\n", "# print('continuing because of symmetries detected')", "\n", "# print(curr_adj_matrix)", "\n", "            ", "continue", "\n", "\n", "# continue if a larger cycle is found such as in (R, A, B, C, D): R->A ; B->C; C->D; D->B", "\n", "# use both trace and brute force to detect this, details on:", "\n", "# https://stackoverflow.com/questions/16436165/detecting-cycles-in-an-adjacency-matrix#:~:text=Start%20from%20an%20edge%20(i,then%20a%20cycle%20is%20detected", "\n", "# check if from the root all the nodes can be accessed using tree traversal", "\n", "# traversed_root = (curr_adj_matrix[:, 0] == 1).nonzero()", "\n", "# for curr_entries in range(nr_spans):", "\n", "", "traversed_nodes", "=", "list", "(", ")", "\n", "# adds the root to traversed nodes", "\n", "traversed_nodes", ".", "append", "(", "idx_to_node", "[", "0", "]", ")", "\n", "to_traverse_nodes", "=", "list", "(", ")", "\n", "for", "idx", ",", "curr_entry", "in", "enumerate", "(", "curr_adj_matrix", "[", "0", ",", ":", "]", ".", "tolist", "(", ")", ")", ":", "\n", "            ", "if", "curr_entry", "==", "1", ":", "\n", "                ", "traversed_nodes", ".", "append", "(", "idx_to_node", "[", "idx", "]", ")", "\n", "to_traverse_nodes", ".", "append", "(", "idx_to_node", "[", "idx", "]", ")", "\n", "", "", "if", "len", "(", "traversed_nodes", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "\n", "# for idx_root in traversed_root:", "\n", "#     traversed_nodes.add(idx_to_node[idx_root[0]])", "\n", "\n", "", "def", "recursive_tree_traverse", "(", "traversed_nodes", ":", "Set", ",", "to_traverse_nodes", ":", "List", ")", ":", "\n", "            ", "curr_to_traverse_to", "=", "set", "(", ")", "\n", "for", "to_traverse", "in", "to_traverse_nodes", ":", "\n", "                ", "idx", "=", "node_to_idx", "[", "to_traverse", "]", "\n", "# pointed_to = (curr_adj_matrix[:, idx] == 1).nonzero()", "\n", "pointed_to", "=", "torch", ".", "nonzero", "(", "curr_adj_matrix", "[", "idx", ",", ":", "]", "==", "1", ",", "as_tuple", "=", "False", ")", "\n", "for", "curr_pointed_node_idx", "in", "pointed_to", ":", "\n", "                    ", "curr_pointed_node", "=", "idx_to_node", "[", "curr_pointed_node_idx", "[", "0", "]", "]", "\n", "if", "curr_pointed_node", "in", "traversed_nodes", ":", "\n", "                        ", "return", "False", "# loop detected!", "\n", "", "else", ":", "\n", "                        ", "traversed_nodes", ".", "add", "(", "curr_pointed_node", ")", "\n", "curr_to_traverse_to", ".", "add", "(", "curr_pointed_node", ")", "\n", "", "", "", "if", "len", "(", "curr_to_traverse_to", ")", ">", "0", ":", "\n", "                ", "return", "recursive_tree_traverse", "(", "traversed_nodes", ",", "list", "(", "curr_to_traverse_to", ")", ")", "\n", "", "return", "True", "\n", "\n", "", "traversed_nodes_s", "=", "set", "(", "traversed_nodes", ")", "\n", "recursive_tree_traverse", "(", "traversed_nodes_s", ",", "to_traverse_nodes", "=", "to_traverse_nodes", ")", "\n", "\n", "if", "len", "(", "traversed_nodes_s", ")", "<", "len", "(", "idx_to_node", ")", ":", "\n", "# print('loop detected, continuing')", "\n", "            ", "continue", "\n", "", "else", ":", "\n", "            ", "spanning_trees", ".", "append", "(", "{", "'matrix'", ":", "curr_adj_matrix", "}", ")", "\n", "nr_spanning_trees", "+=", "1", "\n", "# spanning_trees.append({'entry': curr_entries, 'matrix': curr_adj_matrix})", "\n", "# nr_spanning_trees += 1", "\n", "\n", "", "", "print", "(", "'total number of distinct spanning trees calculated: '", ",", "nr_spanning_trees", ")", "\n", "return", "spanning_trees", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.prototyping.main_brute_force_mtt.get_all_spanning_trees": [[154, 287], ["dict", "range", "torch.cartesian_prod", "torch.zeros", "torch.zeros", "torch.cat", "print", "print", "idx_to_node.append", "torch.tensor", "torch.cartesian_prod.size", "torch.cartesian_prod.size", "torch.cartesian_prod.reshape", "torch.cat.view", "torch.cat.size", "torch.cat.size", "torch.triu", "torch.tril", "torch.tril.transpose", "list", "list", "range", "torch.cartesian_prod.size", "torch.arange", "torch.cat.size", "print", "curr_adj_matrix[].sum", "torch.diagonal().sum", "torch.max", "itertools.product", "list", "enumerate", "set", "main_brute_force_mtt.get_all_spanning_trees_v2.recursive_tree_traverse"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "get_all_spanning_trees", "(", "nr_spans", ":", "int", "=", "5", ",", "mask_matrix", "=", "None", ")", ":", "\n", "# a = [0, 1, 2, 3, 4, 5]", "\n", "# b = [0, 1, 2, 3, 4, 5]", "\n", "# c = [0, 1, 2, 3, 4, 5]", "\n", "# d = [0, 1, 2, 3, 4, 5]", "\n", "# e = [0, 1, 2, 3, 4, 5]", "\n", "#", "\n", "# idx_to_node = ['R', 'A', 'B', 'C', 'D', 'E']", "\n", "# node_to_idx = {'R': 0, 'A': 1, 'B': 2, 'C': 3, 'D': 4, 'E': 5}", "\n", "# tensor_a = torch.tensor(a)", "\n", "# tensor_b = torch.tensor(b)", "\n", "# tensor_c = torch.tensor(c)", "\n", "# tensor_d = torch.tensor(d)", "\n", "# tensor_e = torch.tensor(e)", "\n", "\n", "# cart_prod_idx = torch.cartesian_prod(tensor_a, tensor_b, tensor_c, tensor_d, tensor_e)", "\n", "\n", "    ", "node_letter_names", "=", "'ABCDEFGHIJKLMNOPQRSTUVWXUZ'", "\n", "\n", "idx_to_node", "=", "[", "]", "\n", "node_to_idx", "=", "dict", "(", ")", "\n", "# idx_to_node = ['R']", "\n", "# node_to_idx = {'R': 0}", "\n", "\n", "# for id in range(1, nr_spans + 1):", "\n", "for", "id", "in", "range", "(", "0", ",", "nr_spans", ")", ":", "\n", "        ", "idx_to_node", ".", "append", "(", "node_letter_names", "[", "id", "]", ")", "\n", "node_to_idx", "[", "node_letter_names", "[", "id", "]", "]", "=", "id", "\n", "# idx_to_node.append(node_letter_names[id - 1])", "\n", "# node_to_idx[node_letter_names[id - 1]] = id", "\n", "\n", "", "tensors_mention_idxs", "=", "[", "torch", ".", "tensor", "(", "list", "(", "range", "(", "nr_spans", "+", "1", ")", ")", ")", "for", "_", "in", "range", "(", "nr_spans", ")", "]", "\n", "cart_prod_idx", "=", "torch", ".", "cartesian_prod", "(", "*", "tensors_mention_idxs", ")", "\n", "\n", "adjacency", "=", "torch", ".", "zeros", "(", "cart_prod_idx", ".", "size", "(", "0", ")", ",", "cart_prod_idx", ".", "size", "(", "1", ")", ",", "cart_prod_idx", ".", "size", "(", "1", ")", "+", "1", ",", "\n", "dtype", "=", "torch", ".", "int", ")", "\n", "\n", "cart_prod_idx2", "=", "cart_prod_idx", ".", "reshape", "(", "-", "1", ")", "+", "torch", ".", "arange", "(", "\n", "cart_prod_idx", ".", "size", "(", "0", ")", "*", "cart_prod_idx", ".", "size", "(", "1", ")", ")", "*", "adjacency", ".", "size", "(", "2", ")", "\n", "\n", "adjacency", ".", "view", "(", "-", "1", ")", "[", "cart_prod_idx2", "]", "=", "1", "\n", "\n", "# concatenates the row to root with all zeros, since the root doesn't get edges pointing to it", "\n", "empty_row_to_concat", "=", "torch", ".", "zeros", "(", "adjacency", ".", "size", "(", "0", ")", ",", "1", ",", "adjacency", ".", "size", "(", "2", ")", ",", "\n", "dtype", "=", "torch", ".", "int", ")", "\n", "adjacency", "=", "torch", ".", "cat", "(", "[", "empty_row_to_concat", ",", "adjacency", "]", ",", "dim", "=", "1", ")", "\n", "# now counts the unique spanning trees", "\n", "nr_spanning_trees", "=", "0", "\n", "print", "(", "'adjacency shape: '", ",", "adjacency", ".", "shape", ")", "\n", "nr_processed", "=", "0", "\n", "spanning_trees", "=", "[", "]", "\n", "for", "curr_adj_matrix", "in", "adjacency", ":", "\n", "        ", "nr_processed", "+=", "1", "\n", "if", "nr_processed", "%", "1000", "==", "0", ":", "\n", "            ", "print", "(", "'nr pre-processed: '", ",", "nr_processed", ",", "'  nr_kept (spanning trees without loops): '", ",", "nr_spanning_trees", ")", "\n", "# continue if the root doesn't have outbound relations", "\n", "# if curr_adj_matrix[:, 0].sum() == 0:", "\n", "", "curr_adj_matrix", "=", "curr_adj_matrix", ".", "T", "\n", "curr_adj_matrix", "=", "curr_adj_matrix", "[", "1", ":", ",", ":", "]", "[", ":", ",", "1", ":", "]", "# no root element in the matrix for now", "\n", "if", "mask_matrix", "is", "not", "None", ":", "\n", "            ", "curr_adj_matrix", "=", "curr_adj_matrix", "*", "mask_matrix", "\n", "# after applying mask there should be a minimum number of edges", "\n", "if", "curr_adj_matrix", ".", "sum", "(", ")", ".", "item", "(", ")", "<", "nr_spans", "-", "1", ":", "\n", "# print('missing necessary edges, continuing: ')", "\n", "# print(curr_adj_matrix)", "\n", "                ", "continue", "\n", "\n", "", "", "if", "curr_adj_matrix", "[", "0", ",", ":", "]", ".", "sum", "(", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "# continue if there are relations to itself (main diagonal)", "\n", "", "if", "torch", ".", "diagonal", "(", "curr_adj_matrix", ",", "0", ")", ".", "sum", "(", ")", ">", "0", ":", "\n", "            ", "continue", "\n", "\n", "# continue if symmetries detected (ex: A -> B ; B -> A", "\n", "", "upper_triangle", "=", "torch", ".", "triu", "(", "curr_adj_matrix", ")", "\n", "lower_triangle", "=", "torch", ".", "tril", "(", "curr_adj_matrix", ")", "\n", "lower_triangle_t", "=", "lower_triangle", ".", "transpose", "(", "1", ",", "0", ")", "\n", "symm_check", "=", "upper_triangle", "+", "lower_triangle_t", "\n", "if", "torch", ".", "max", "(", "symm_check", ")", ">", "1", ":", "\n", "# print('continuing because of symmetries detected')", "\n", "# print(curr_adj_matrix)", "\n", "            ", "continue", "\n", "\n", "# continue if a larger cycle is found such as in (R, A, B, C, D): R->A ; B->C; C->D; D->B", "\n", "# use both trace and brute force to detect this, details on:", "\n", "# https://stackoverflow.com/questions/16436165/detecting-cycles-in-an-adjacency-matrix#:~:text=Start%20from%20an%20edge%20(i,then%20a%20cycle%20is%20detected", "\n", "# check if from the root all the nodes can be accessed using tree traversal", "\n", "# traversed_root = (curr_adj_matrix[:, 0] == 1).nonzero()", "\n", "# for curr_entries in range(nr_spans):", "\n", "", "entries_combinations", "=", "list", "(", "itertools", ".", "product", "(", "[", "0", ",", "1", "]", ",", "repeat", "=", "nr_spans", ")", ")", "\n", "for", "curr_entries", "in", "entries_combinations", ":", "\n", "# traversed_root = (curr_adj_matrix[0, :] == 1).nonzero()", "\n", "# traversed_root = (curr_adj_matrix[curr_entries, :] == 1).nonzero()", "\n", "            ", "traversed_nodes", "=", "list", "(", ")", "\n", "for", "idx", ",", "curr_entry", "in", "enumerate", "(", "curr_entries", ")", ":", "\n", "                ", "if", "curr_entry", "==", "1", ":", "\n", "                    ", "traversed_nodes", ".", "append", "(", "idx_to_node", "[", "idx", "]", ")", "\n", "", "", "if", "len", "(", "traversed_nodes", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "# for idx_root in traversed_root:", "\n", "#     traversed_nodes.add(idx_to_node[idx_root[0]])", "\n", "\n", "", "def", "recursive_tree_traverse", "(", "traversed_nodes", ":", "Set", ",", "to_traverse_nodes", ":", "List", ")", ":", "\n", "                ", "curr_to_traverse_to", "=", "set", "(", ")", "\n", "for", "to_traverse", "in", "to_traverse_nodes", ":", "\n", "                    ", "idx", "=", "node_to_idx", "[", "to_traverse", "]", "\n", "# pointed_to = (curr_adj_matrix[:, idx] == 1).nonzero()", "\n", "pointed_to", "=", "torch", ".", "nonzero", "(", "curr_adj_matrix", "[", "idx", ",", ":", "]", "==", "1", ",", "as_tuple", "=", "False", ")", "\n", "for", "curr_pointed_node_idx", "in", "pointed_to", ":", "\n", "                        ", "curr_pointed_node", "=", "idx_to_node", "[", "curr_pointed_node_idx", "[", "0", "]", "]", "\n", "if", "curr_pointed_node", "in", "traversed_nodes", ":", "\n", "                            ", "return", "False", "# loop detected!", "\n", "", "else", ":", "\n", "                            ", "traversed_nodes", ".", "add", "(", "curr_pointed_node", ")", "\n", "curr_to_traverse_to", ".", "add", "(", "curr_pointed_node", ")", "\n", "", "", "", "if", "len", "(", "curr_to_traverse_to", ")", ">", "0", ":", "\n", "                    ", "return", "recursive_tree_traverse", "(", "traversed_nodes", ",", "list", "(", "curr_to_traverse_to", ")", ")", "\n", "", "return", "True", "\n", "\n", "", "traversed_nodes_s", "=", "set", "(", "traversed_nodes", ")", "\n", "recursive_tree_traverse", "(", "traversed_nodes_s", ",", "to_traverse_nodes", "=", "traversed_nodes", ".", "copy", "(", ")", ")", "\n", "\n", "if", "len", "(", "traversed_nodes_s", ")", "<", "len", "(", "idx_to_node", ")", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "spanning_trees", ".", "append", "(", "{", "'entry'", ":", "curr_entries", ",", "'matrix'", ":", "curr_adj_matrix", "}", ")", "\n", "nr_spanning_trees", "+=", "1", "\n", "# spanning_trees.append({'entry': curr_entries, 'matrix': curr_adj_matrix})", "\n", "# nr_spanning_trees += 1", "\n", "\n", "", "", "", "print", "(", "'total number of distinct spanning trees calculated: '", ",", "nr_spanning_trees", ")", "\n", "return", "spanning_trees", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.prototyping.main_brute_force_mtt.get_score_trees": [[289, 297], ["torch.prod().item", "curr_spanning_tree[].bool", "torch.prod"], "function", ["None"], ["", "def", "get_score_trees", "(", "spanning_trees", ",", "scores", ")", ":", "\n", "    ", "tot_weight", "=", "0.0", "\n", "for", "curr_spanning_tree", "in", "spanning_trees", ":", "\n", "# print('current spanning tree: ', curr_spanning_tree)", "\n", "        ", "curr_tree_scores", "=", "scores", "[", "curr_spanning_tree", "[", "'matrix'", "]", ".", "bool", "(", ")", "]", "\n", "curr_tree_weight", "=", "torch", ".", "prod", "(", "curr_tree_scores", ")", ".", "item", "(", ")", "\n", "tot_weight", "+=", "curr_tree_weight", "\n", "", "return", "tot_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.prototyping.main_brute_force_mtt.get_score_trees_cluster_restrictive": [[299, 313], ["torch.tensor", "torch.tensor", "torch.prod().item", "curr_entry[].sum", "torch.prod", "curr_spanning_tree[].bool"], "function", ["None"], ["", "def", "get_score_trees_cluster_restrictive", "(", "spanning_trees", ",", "scores", ",", "clusters", ")", ":", "\n", "    ", "tot_weight", "=", "0.0", "\n", "for", "curr_spanning_tree", "in", "spanning_trees", ":", "\n", "        ", "ignore_curr_tree", "=", "False", "\n", "curr_entry", "=", "torch", ".", "tensor", "(", "curr_spanning_tree", "[", "'entry'", "]", ",", "dtype", "=", "torch", ".", "int", ")", "\n", "for", "curr_cluster", "in", "clusters", ":", "\n", "            ", "t_cluster", "=", "torch", ".", "tensor", "(", "curr_cluster", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "if", "curr_entry", "[", "t_cluster", "]", ".", "sum", "(", ")", "!=", "1", ":", "\n", "                ", "ignore_curr_tree", "=", "True", "\n", "\n", "", "", "if", "not", "ignore_curr_tree", ":", "\n", "            ", "curr_tree_weight", "=", "torch", ".", "prod", "(", "scores", "[", "curr_spanning_tree", "[", "'matrix'", "]", ".", "bool", "(", ")", "]", ")", ".", "item", "(", ")", "\n", "tot_weight", "+=", "curr_tree_weight", "\n", "", "", "return", "tot_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.prototyping.main_brute_force_mtt.get_scores_brute_restrictive_v2": [[315, 338], ["torch.tensor", "torch.prod().item", "curr_entry[].sum", "torch.prod", "curr_spanning_tree[].bool"], "function", ["None"], ["", "def", "get_scores_brute_restrictive_v2", "(", "spanning_trees", ",", "scores", ",", "clusters", ",", "link_idxs", ")", ":", "\n", "    ", "\"\"\"\n    In this version the root is not in \"entry\" but rather encoded in the matrix.\n    :param spanning_trees:\n    :param scores:\n    :param clusters:\n    :return:\n    \"\"\"", "\n", "tot_weight", "=", "0.0", "\n", "for", "curr_spanning_tree", "in", "spanning_trees", ":", "\n", "        ", "ignore_curr_tree", "=", "False", "\n", "# curr_entry = torch.tensor(curr_spanning_tree['entry'], dtype=torch.int)", "\n", "curr_entry", "=", "curr_spanning_tree", "[", "'matrix'", "]", "\n", "for", "curr_cluster", "in", "clusters", ":", "\n", "            ", "t_cluster", "=", "torch", ".", "tensor", "(", "curr_cluster", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "if", "curr_entry", "[", "0", ",", "t_cluster", "]", ".", "sum", "(", ")", "!=", "1", ":", "\n", "                ", "ignore_curr_tree", "=", "True", "\n", "\n", "", "", "if", "not", "ignore_curr_tree", ":", "\n", "            ", "curr_tree_weight", "=", "torch", ".", "prod", "(", "scores", "[", "curr_spanning_tree", "[", "'matrix'", "]", ".", "bool", "(", ")", "]", ")", ".", "item", "(", ")", "\n", "# print('Tree weight brute force (log space): ', math.log(curr_tree_weight))", "\n", "tot_weight", "+=", "curr_tree_weight", "\n", "", "", "return", "tot_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.prototyping.main_brute_force_mtt.get_nr_trees_cluster_restrictive": [[340, 353], ["torch.tensor", "torch.tensor", "curr_entry[].sum"], "function", ["None"], ["", "def", "get_nr_trees_cluster_restrictive", "(", "spanning_trees", ",", "clusters", ")", ":", "\n", "    ", "nr_trees", "=", "0", "\n", "for", "curr_spanning_tree", "in", "spanning_trees", ":", "\n", "        ", "ignore_curr_tree", "=", "False", "\n", "curr_entry", "=", "torch", ".", "tensor", "(", "curr_spanning_tree", "[", "'entry'", "]", ",", "dtype", "=", "torch", ".", "int", ")", "\n", "for", "curr_cluster", "in", "clusters", ":", "\n", "            ", "t_cluster", "=", "torch", ".", "tensor", "(", "curr_cluster", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "if", "curr_entry", "[", "t_cluster", "]", ".", "sum", "(", ")", "!=", "1", ":", "\n", "                ", "ignore_curr_tree", "=", "True", "\n", "\n", "", "", "if", "not", "ignore_curr_tree", ":", "\n", "            ", "nr_trees", "+=", "1", "\n", "", "", "return", "nr_trees", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.prototyping.main_brute_force_mtt.get_nr_trees_brute_restrictive_v2": [[355, 377], ["torch.tensor", "curr_entry[].sum"], "function", ["None"], ["", "def", "get_nr_trees_brute_restrictive_v2", "(", "spanning_trees", ",", "clusters", ")", ":", "\n", "    ", "\"\"\"\n    In this version the root is not in \"entry\" but rather encoded in the matrix.\n    :param spanning_trees:\n    :param clusters:\n    :return:\n    \"\"\"", "\n", "nr_trees", "=", "0", "\n", "for", "curr_spanning_tree", "in", "spanning_trees", ":", "\n", "        ", "ignore_curr_tree", "=", "False", "\n", "# curr_entry = torch.tensor(curr_spanning_tree['entry'], dtype=torch.int)", "\n", "# curr_entry = curr_spanning_tree['matrix'][0, 1:]", "\n", "curr_entry", "=", "curr_spanning_tree", "[", "'matrix'", "]", "\n", "\n", "for", "curr_cluster", "in", "clusters", ":", "\n", "            ", "t_cluster", "=", "torch", ".", "tensor", "(", "curr_cluster", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "if", "curr_entry", "[", "0", ",", "t_cluster", "]", ".", "sum", "(", ")", "!=", "1", ":", "\n", "                ", "ignore_curr_tree", "=", "True", "\n", "\n", "", "", "if", "not", "ignore_curr_tree", ":", "\n", "            ", "nr_trees", "+=", "1", "\n", "", "", "return", "nr_trees", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.prototyping.main_brute_force_mtt.get_score_trees_mtt": [[379, 396], ["mask_matrix.double.double", "scores.double.double", "torch.eye", "laplacian_scores.double.double", "torch.logdet", "filtered_scores.sum"], "function", ["None"], ["", "def", "get_score_trees_mtt", "(", "mask_matrix", ",", "scores", ")", ":", "\n", "    ", "mask_matrix", "=", "mask_matrix", ".", "double", "(", ")", "\n", "scores", "=", "scores", ".", "double", "(", ")", "\n", "filtered_scores", "=", "mask_matrix", "*", "scores", "\n", "laplacian_scores", "=", "torch", ".", "eye", "(", "filtered_scores", ".", "shape", "[", "-", "2", "]", ",", "filtered_scores", ".", "shape", "[", "-", "1", "]", ")", "\n", "laplacian_scores", "=", "laplacian_scores", ".", "double", "(", ")", "\n", "laplacian_scores", "=", "laplacian_scores", "*", "filtered_scores", ".", "sum", "(", "dim", "=", "-", "2", ")", "# main diagonal", "\n", "laplacian_scores", "+=", "(", "filtered_scores", "*", "-", "1.0", ")", "\n", "\n", "# mtt_scores = torch.slogdet(laplacian_scores)", "\n", "# mtt_scores = torch.det(laplacian_scores[1:, 1:])", "\n", "mtt_scores", "=", "torch", ".", "logdet", "(", "laplacian_scores", "[", "1", ":", ",", "1", ":", "]", ")", "\n", "# tensor(3.0862e+14, dtype=torch.float64)", "\n", "# torch.det((laplacian_scores[1:,1:])) = tensor(-4.3142e+13)", "\n", "# torch.logdet(laplacian_scores[1:,1:]) = {Tensor} tensor(nan)", "\n", "# torch.slogdet(laplacian_scores[1:,1:]) = {slogdet} torch.return_types.slogdet(\\nsign=tensor(-1.),\\nlogabsdet=tensor(31.3955))", "\n", "return", "mtt_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.prototyping.main_brute_force_mtt.get_score_trees_mtt_partition": [[398, 421], ["mask_matrix.double.double", "scores.double.double", "torch.eye", "laplacian_scores.double.double", "torch.logdet", "filtered_scores.sum"], "function", ["None"], ["", "def", "get_score_trees_mtt_partition", "(", "mask_matrix", ",", "scores", ")", ":", "\n", "    ", "mask_matrix", "=", "mask_matrix", ".", "double", "(", ")", "\n", "scores", "=", "scores", ".", "double", "(", ")", "\n", "filtered_scores", "=", "mask_matrix", "*", "scores", "\n", "\n", "# change a", "\n", "filtered_scores", "=", "filtered_scores", "[", "1", ":", ",", ":", "]", "[", ":", ",", "1", ":", "]", "\n", "\n", "laplacian_scores", "=", "torch", ".", "eye", "(", "filtered_scores", ".", "shape", "[", "-", "2", "]", ",", "filtered_scores", ".", "shape", "[", "-", "1", "]", ")", "\n", "laplacian_scores", "=", "laplacian_scores", ".", "double", "(", ")", "\n", "laplacian_scores", "=", "laplacian_scores", "*", "filtered_scores", ".", "sum", "(", "dim", "=", "-", "2", ")", "# main diagonal", "\n", "laplacian_scores", "+=", "(", "filtered_scores", "*", "-", "1.0", ")", "\n", "\n", "# change a", "\n", "# laplacian_minor = laplacian_scores[1:, :][:, 1:]", "\n", "laplacian_minor", "=", "laplacian_scores", "\n", "\n", "# the laplacian's first row gets replaced", "\n", "laplacian_minor", "[", "0", ",", ":", "]", "=", "scores", "[", "0", "]", "[", "1", ":", "]", "\n", "\n", "mtt_scores", "=", "torch", ".", "logdet", "(", "laplacian_minor", ")", "\n", "\n", "return", "mtt_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.prototyping.min_span_trees_generator.get_all_span_trees": [[7, 41], ["list", "list", "list", "enumerate", "itertools.product", "edges.remove", "connected_nodes.remove", "edges.add", "edges_added.append", "connected_nodes.add", "list.append", "len", "len", "len", "len", "len", "min_span_trees_generator.get_all_span_trees", "len", "len", "sorted", "tuple", "possible_combinations.add", "len", "list"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.prototyping.min_span_trees_generator.get_all_span_trees", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add"], ["def", "get_all_span_trees", "(", "nodes_left", ":", "List", ",", "root_node", ":", "str", ",", "edges", ":", "Set", ",", "connected_nodes", ":", "Set", ",", "nr_all_nodes", ",", "\n", "possible_combinations", ":", "Set", ")", ":", "\n", "    ", "left_nodes_combinations", "=", "[", "list", "(", "i", ")", "for", "i", "in", "itertools", ".", "product", "(", "[", "1", ",", "0", "]", ",", "repeat", "=", "len", "(", "nodes_left", ")", ")", "]", "\n", "# local_connected_nodes = connected_nodes.copy()", "\n", "for", "curr_ln_comb", "in", "left_nodes_combinations", ":", "\n", "        ", "edges_added", ":", "List", "=", "list", "(", ")", "\n", "new_left_nodes", "=", "list", "(", ")", "\n", "for", "idx", ",", "curr_node", "in", "enumerate", "(", "nodes_left", ")", ":", "\n", "# if curr_ln_comb[idx] == 1 and curr_node not in local_connected_nodes:", "\n", "            ", "if", "curr_ln_comb", "[", "idx", "]", "==", "1", "and", "curr_node", "not", "in", "connected_nodes", ":", "\n", "                ", "assert", "(", "root_node", ",", "curr_node", ")", "not", "in", "edges", "\n", "edges", ".", "add", "(", "(", "root_node", ",", "curr_node", ")", ")", "\n", "edges_added", ".", "append", "(", "(", "root_node", ",", "curr_node", ")", ")", "\n", "connected_nodes", ".", "add", "(", "curr_node", ")", "\n", "if", "len", "(", "connected_nodes", ")", "==", "nr_all_nodes", ":", "\n", "                    ", "edges_to_append", "=", "sorted", "(", "list", "(", "edges", ")", ",", "key", "=", "lambda", "x", ":", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ")", ")", "\n", "edges_to_append", "=", "tuple", "(", "edges_to_append", ")", "\n", "# possible_combinations.add(edges.copy())", "\n", "possible_combinations", ".", "add", "(", "edges_to_append", ")", "\n", "# break", "\n", "", "", "else", ":", "\n", "                ", "new_left_nodes", ".", "append", "(", "curr_node", ")", "\n", "\n", "# assert len(new_left_nodes) < len(left_nodes)", "\n", "", "", "if", "len", "(", "connected_nodes", ")", "<", "nr_all_nodes", "and", "len", "(", "new_left_nodes", ")", "<", "len", "(", "nodes_left", ")", ":", "\n", "            ", "assert", "len", "(", "new_left_nodes", ")", "==", "nr_all_nodes", "-", "len", "(", "connected_nodes", ")", "\n", "assert", "len", "(", "new_left_nodes", ")", ">", "0", "\n", "for", "curr_added_edge", "in", "edges_added", ":", "\n", "                ", "get_all_span_trees", "(", "new_left_nodes", ",", "curr_added_edge", "[", "1", "]", ",", "edges", ",", "connected_nodes", ",", "nr_all_nodes", ",", "\n", "possible_combinations", ")", "\n", "\n", "", "", "for", "curr_added_edge", "in", "edges_added", ":", "\n", "            ", "edges", ".", "remove", "(", "curr_added_edge", ")", "\n", "connected_nodes", ".", "remove", "(", "curr_added_edge", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.prototyping.min_span_trees_generator.expand_this": [[43, 55], ["list", "set", "set.add", "edges.add", "list.append"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add"], ["", "", "", "def", "expand_this", "(", "root", ":", "str", ",", "binary_mask", ":", "List", ",", "nodes_left", ":", "List", ",", "edges", ":", "Set", ",", "connected_nodes", ":", "Set", ")", ":", "\n", "    ", "new_nodes_left", "=", "list", "(", ")", "\n", "edges_expanded", "=", "set", "(", ")", "\n", "for", "idx", ",", "curr_node_left", "in", "nodes_left", ":", "\n", "        ", "if", "binary_mask", "[", "idx", "]", "==", "1", "and", "curr_node_left", "not", "in", "connected_nodes", ":", "\n", "            ", "edge", "=", "(", "root", ",", "curr_node_left", ")", "\n", "edges_expanded", ".", "add", "(", "edge", ")", "\n", "assert", "edge", "not", "in", "edges", "\n", "edges", ".", "add", "(", "edge", ")", "\n", "", "else", ":", "\n", "            ", "new_nodes_left", ".", "append", "(", "curr_node_left", ")", "\n", "", "", "return", "new_nodes_left", ",", "edges_expanded", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.prototyping.min_span_trees_generator.contract_this": [[57, 61], ["edges.remove", "connected_nodes.remove"], "function", ["None"], ["", "def", "contract_this", "(", "edges_expanded", ":", "Set", ",", "edges", ":", "Set", ",", "connected_nodes", ":", "Set", ")", ":", "\n", "    ", "for", "curr_edge_expanded", "in", "edges_expanded", ":", "\n", "        ", "edges", ".", "remove", "(", "curr_edge_expanded", ")", "\n", "connected_nodes", ".", "remove", "(", "curr_edge_expanded", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.prototyping.min_span_trees_generator.get_all_span_trees_v2": [[63, 68], ["list", "itertools.product", "len"], "function", ["None"], ["", "", "def", "get_all_span_trees_v2", "(", "nodes_left", ":", "List", ",", "root_node", ":", "str", ",", "edges", ":", "Set", ",", "connected_nodes", ":", "Set", ",", "nr_all_nodes", ",", "\n", "possible_combinations", ":", "Set", ")", ":", "\n", "    ", "pointer_nodes", "=", "[", "root_node", "]", "\n", "for", "curr_pointer_node", "in", "pointer_nodes", ":", "\n", "        ", "left_nodes_combinations", "=", "[", "list", "(", "i", ")", "for", "i", "in", "itertools", ".", "product", "(", "[", "1", ",", "0", "]", ",", "repeat", "=", "len", "(", "nodes_left", ")", ")", "]", "\n", "# TODO: got stuck here, look now working on get_all_span_trees_v3 on adjacency matrix approach", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.prototyping.min_span_trees_generator.get_all_span_trees_v3": [[72, 173], ["range", "torch.cartesian_prod", "torch.zeros", "torch.zeros", "torch.cat", "print", "print", "idx_to_node.append", "torch.tensor", "torch.cartesian_prod.size", "torch.cartesian_prod.size", "torch.cartesian_prod.reshape", "torch.cat.view", "torch.cat.size", "torch.cat.size", "torch.triu", "torch.tril", "torch.tril.transpose", "set", "min_span_trees_generator.get_all_span_trees_v3.recursive_tree_traverse"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "", "def", "get_all_span_trees_v3", "(", "nr_gold_mentions", ":", "int", "=", "5", ")", ":", "\n", "# a = [0, 1, 2, 3, 4, 5]", "\n", "# b = [0, 1, 2, 3, 4, 5]", "\n", "# c = [0, 1, 2, 3, 4, 5]", "\n", "# d = [0, 1, 2, 3, 4, 5]", "\n", "# e = [0, 1, 2, 3, 4, 5]", "\n", "#", "\n", "# idx_to_node = ['R', 'A', 'B', 'C', 'D', 'E']", "\n", "# node_to_idx = {'R': 0, 'A': 1, 'B': 2, 'C': 3, 'D': 4, 'E': 5}", "\n", "# tensor_a = torch.tensor(a)", "\n", "# tensor_b = torch.tensor(b)", "\n", "# tensor_c = torch.tensor(c)", "\n", "# tensor_d = torch.tensor(d)", "\n", "# tensor_e = torch.tensor(e)", "\n", "\n", "# cart_prod_idx = torch.cartesian_prod(tensor_a, tensor_b, tensor_c, tensor_d, tensor_e)", "\n", "\n", "    ", "node_letter_names", "=", "'ABCDEFGHIJKLMNOPQRSTUVWXUZ'", "\n", "\n", "idx_to_node", "=", "[", "'R'", "]", "\n", "node_to_idx", "=", "{", "'R'", ":", "0", "}", "\n", "\n", "for", "id", "in", "range", "(", "1", ",", "nr_gold_mentions", "+", "1", ")", ":", "\n", "        ", "idx_to_node", ".", "append", "(", "node_letter_names", "[", "id", "-", "1", "]", ")", "\n", "node_to_idx", "[", "node_letter_names", "[", "id", "-", "1", "]", "]", "=", "id", "\n", "\n", "", "tensors_mention_idxs", "=", "[", "torch", ".", "tensor", "(", "list", "(", "range", "(", "nr_gold_mentions", "+", "1", ")", ")", ")", "for", "_", "in", "range", "(", "nr_gold_mentions", ")", "]", "\n", "cart_prod_idx", "=", "torch", ".", "cartesian_prod", "(", "*", "tensors_mention_idxs", ")", "\n", "\n", "adjacency", "=", "torch", ".", "zeros", "(", "cart_prod_idx", ".", "size", "(", "0", ")", ",", "cart_prod_idx", ".", "size", "(", "1", ")", ",", "cart_prod_idx", ".", "size", "(", "1", ")", "+", "1", ")", "\n", "\n", "cart_prod_idx2", "=", "cart_prod_idx", ".", "reshape", "(", "-", "1", ")", "+", "torch", ".", "arange", "(", "\n", "cart_prod_idx", ".", "size", "(", "0", ")", "*", "cart_prod_idx", ".", "size", "(", "1", ")", ")", "*", "adjacency", ".", "size", "(", "2", ")", "\n", "\n", "adjacency", ".", "view", "(", "-", "1", ")", "[", "cart_prod_idx2", "]", "=", "1", "\n", "\n", "# concatenates the row to root with all zeros, since the root doesn't get edges pointing to it", "\n", "empty_row_to_concat", "=", "torch", ".", "zeros", "(", "adjacency", ".", "size", "(", "0", ")", ",", "1", ",", "adjacency", ".", "size", "(", "2", ")", ")", "\n", "adjacency", "=", "torch", ".", "cat", "(", "[", "empty_row_to_concat", ",", "adjacency", "]", ",", "dim", "=", "1", ")", "\n", "# now counts the unique spanning trees", "\n", "nr_spanning_trees", "=", "0", "\n", "print", "(", "'adjacency shape: '", ",", "adjacency", ".", "shape", ")", "\n", "nr_processed", "=", "0", "\n", "for", "curr_adj_matrix", "in", "adjacency", ":", "\n", "        ", "nr_processed", "+=", "1", "\n", "if", "nr_processed", "%", "1000", "==", "0", ":", "\n", "            ", "print", "(", "'nr pre-processed: '", ",", "nr_processed", ",", "'  nr_kept (spanning trees without loops): '", ",", "nr_spanning_trees", ")", "\n", "# continue if the root doesn't have outbound relations", "\n", "", "if", "curr_adj_matrix", "[", ":", ",", "0", "]", ".", "sum", "(", ")", "==", "0", ":", "\n", "# print('continuing because no connection from root: ')", "\n", "# print(curr_adj_matrix)", "\n", "            ", "continue", "\n", "# continue if there are relations to itself (main diagonal)", "\n", "", "if", "torch", ".", "diagonal", "(", "curr_adj_matrix", ",", "0", ")", ".", "sum", "(", ")", ">", "0", ":", "\n", "# print('continuing because of elements self-referencing main diagonal: ')", "\n", "# print(curr_adj_matrix)", "\n", "            ", "continue", "\n", "\n", "# continue if symmetries detected (ex: A -> B ; B -> A", "\n", "", "upper_triangle", "=", "torch", ".", "triu", "(", "curr_adj_matrix", ")", "\n", "lower_triangle", "=", "torch", ".", "tril", "(", "curr_adj_matrix", ")", "\n", "lower_triangle_t", "=", "lower_triangle", ".", "transpose", "(", "1", ",", "0", ")", "\n", "symm_check", "=", "upper_triangle", "+", "lower_triangle_t", "\n", "if", "torch", ".", "max", "(", "symm_check", ")", ">", "1", ":", "\n", "# print('continuing because of symmetries detected')", "\n", "# print(curr_adj_matrix)", "\n", "            ", "continue", "\n", "\n", "# continue if a larger cycle is found such as in (R, A, B, C, D): R->A ; B->C; C->D; D->B", "\n", "# use both trace and brute force to detect this, details on:", "\n", "# https://stackoverflow.com/questions/16436165/detecting-cycles-in-an-adjacency-matrix#:~:text=Start%20from%20an%20edge%20(i,then%20a%20cycle%20is%20detected", "\n", "# check if from the root all the nodes can be accessed using tree traversal", "\n", "", "traversed_root", "=", "(", "curr_adj_matrix", "[", ":", ",", "0", "]", "==", "1", ")", ".", "nonzero", "(", ")", "\n", "traversed_nodes", "=", "set", "(", ")", "\n", "for", "idx_root", "in", "traversed_root", ":", "\n", "            ", "traversed_nodes", ".", "add", "(", "idx_to_node", "[", "idx_root", "[", "0", "]", "]", ")", "\n", "\n", "", "def", "recursive_tree_traverse", "(", "traversed_nodes", ":", "Set", ",", "to_traverse_nodes", ":", "Set", ")", ":", "\n", "            ", "curr_to_traverse_to", "=", "set", "(", ")", "\n", "for", "to_traverse", "in", "to_traverse_nodes", ":", "\n", "                ", "idx", "=", "node_to_idx", "[", "to_traverse", "]", "\n", "pointed_to", "=", "(", "curr_adj_matrix", "[", ":", ",", "idx", "]", "==", "1", ")", ".", "nonzero", "(", ")", "\n", "for", "curr_pointed_node_idx", "in", "pointed_to", ":", "\n", "                    ", "curr_pointed_node", "=", "idx_to_node", "[", "curr_pointed_node_idx", "[", "0", "]", "]", "\n", "if", "curr_pointed_node", "in", "traversed_nodes", ":", "\n", "                        ", "return", "False", "# loop detected!", "\n", "", "else", ":", "\n", "                        ", "traversed_nodes", ".", "add", "(", "curr_pointed_node", ")", "\n", "curr_to_traverse_to", ".", "add", "(", "curr_pointed_node", ")", "\n", "", "", "", "if", "len", "(", "curr_to_traverse_to", ")", ">", "0", ":", "\n", "                ", "return", "recursive_tree_traverse", "(", "traversed_nodes", ",", "curr_to_traverse_to", ")", "\n", "", "return", "True", "\n", "\n", "", "recursive_tree_traverse", "(", "traversed_nodes", ",", "to_traverse_nodes", "=", "traversed_nodes", ".", "copy", "(", ")", ")", "\n", "if", "len", "(", "traversed_nodes", ")", "<", "len", "(", "idx_to_node", ")", "-", "1", ":", "\n", "            ", "continue", "\n", "\n", "", "nr_spanning_trees", "+=", "1", "\n", "# print('valid spanning tree: ')", "\n", "# print(curr_adj_matrix)", "\n", "", "print", "(", "'total number of distinct spanning trees calculated: '", ",", "nr_spanning_trees", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricF1.__init__": [[96, 98], ["python_cpn_eval.MetricF1.clear"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricF1.clear"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricF1.clear": [[99, 107], ["set"], "methods", ["None"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "labels", "=", "set", "(", ")", "\n", "self", ".", "tp", "=", "{", "}", "\n", "self", ".", "fp", "=", "{", "}", "\n", "self", ".", "fn", "=", "{", "}", "\n", "self", ".", "total_tp", "=", "0", "\n", "self", ".", "total_fp", "=", "0", "\n", "self", ".", "total_fn", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricF1.add_labels": [[108, 115], ["python_cpn_eval.MetricF1.labels.add"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add"], ["", "def", "add_labels", "(", "self", ",", "spans", ")", ":", "\n", "        ", "for", "_", ",", "_", ",", "label", "in", "spans", ":", "\n", "            ", "if", "label", "not", "in", "self", ".", "labels", ":", "\n", "                ", "self", ".", "labels", ".", "add", "(", "label", ")", "\n", "self", ".", "tp", "[", "label", "]", "=", "0", "\n", "self", ".", "fp", "[", "label", "]", "=", "0", "\n", "self", ".", "fn", "[", "label", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricF1.update": [[116, 130], ["zip", "python_cpn_eval.MetricF1.add_labels", "python_cpn_eval.MetricF1.add_labels"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricRelationF1Mention.add_labels", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricRelationF1Mention.add_labels"], ["", "", "", "def", "update", "(", "self", ",", "preds", ",", "golds", ")", ":", "\n", "        ", "for", "pred", ",", "gold", "in", "zip", "(", "preds", ",", "golds", ")", ":", "\n", "            ", "self", ".", "add_labels", "(", "pred", ")", "\n", "self", ".", "add_labels", "(", "gold", ")", "\n", "\n", "for", "_", ",", "_", ",", "label", "in", "[", "x", "for", "x", "in", "pred", "if", "x", "in", "gold", "]", ":", "\n", "                ", "self", ".", "tp", "[", "label", "]", "+=", "1", "\n", "self", ".", "total_tp", "+=", "1", "\n", "", "for", "_", ",", "_", ",", "label", "in", "[", "x", "for", "x", "in", "pred", "if", "x", "not", "in", "gold", "]", ":", "\n", "                ", "self", ".", "fp", "[", "label", "]", "+=", "1", "\n", "self", ".", "total_fp", "+=", "1", "\n", "", "for", "_", ",", "_", ",", "label", "in", "[", "x", "for", "x", "in", "gold", "if", "x", "not", "in", "pred", "]", ":", "\n", "                ", "self", ".", "fn", "[", "label", "]", "+=", "1", "\n", "self", ".", "total_fn", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricF1.print": [[131, 143], ["python_cpn_eval.MetricF1.print"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "", "", "def", "print", "(", "self", ",", "details", "=", "False", ")", ":", "\n", "        ", "for", "label", "in", "self", ".", "labels", ":", "\n", "            ", "tp", ",", "fp", ",", "fn", "=", "self", ".", "tp", "[", "label", "]", ",", "self", ".", "fp", "[", "label", "]", ",", "self", ".", "fn", "[", "label", "]", "\n", "pr", "=", "tp", "/", "(", "tp", "+", "fp", ")", "if", "tp", "!=", "0", "else", "0.0", "\n", "re", "=", "tp", "/", "(", "tp", "+", "fn", ")", "if", "tp", "!=", "0", "else", "0.0", "\n", "f1", "=", "2", "*", "tp", "/", "(", "2", "*", "tp", "+", "fp", "+", "fn", ")", "if", "tp", "!=", "0", "else", "0.0", "\n", "if", "details", ":", "\n", "                ", "print", "(", "'{:32}    {:5}  {:5}  {:5}    {:6.5f}  {:6.5f}  {:6.5f}'", ".", "format", "(", "label", ",", "tp", ",", "fp", ",", "fn", ",", "pr", ",", "re", ",", "f1", ")", ")", "\n", "\n", "", "", "print", "(", "'{:32}    {:5}  {:5}  {:5}    {:6.5f}  {:6.5f}  {:6.5f}'", ".", "format", "(", "''", ",", "self", ".", "total_tp", ",", "self", ".", "total_fp", ",", "\n", "self", ".", "total_fn", ",", "self", ".", "get_pr", "(", ")", ",", "\n", "self", ".", "get_re", "(", ")", ",", "self", ".", "get_f1", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricF1.get_pr": [[144, 146], ["None"], "methods", ["None"], ["", "def", "get_pr", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total_tp", "/", "(", "self", ".", "total_tp", "+", "self", ".", "total_fp", ")", "if", "self", ".", "total_tp", "!=", "0", "else", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricF1.get_re": [[147, 149], ["None"], "methods", ["None"], ["", "def", "get_re", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total_tp", "/", "(", "self", ".", "total_tp", "+", "self", ".", "total_fn", ")", "if", "self", ".", "total_tp", "!=", "0", "else", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricF1.get_f1": [[150, 152], ["None"], "methods", ["None"], ["", "def", "get_f1", "(", "self", ")", ":", "\n", "        ", "return", "2", "*", "self", ".", "total_tp", "/", "(", "2", "*", "self", ".", "total_tp", "+", "self", ".", "total_fp", "+", "self", ".", "total_fn", ")", "if", "self", ".", "total_tp", "!=", "0", "else", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricF1Soft.__init__": [[171, 174], ["python_cpn_eval.MetricF1Soft.clear"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricF1.clear"], ["    ", "def", "__init__", "(", "self", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricF1Soft.clear": [[175, 185], ["set"], "methods", ["None"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "labels", "=", "set", "(", ")", "\n", "self", ".", "p_tps", "=", "{", "}", "\n", "self", ".", "p_fps", "=", "{", "}", "\n", "self", ".", "r_tps", "=", "{", "}", "\n", "self", ".", "r_fns", "=", "{", "}", "\n", "\n", "self", ".", "f1", "=", "0.0", "\n", "self", ".", "pr", "=", "0.0", "\n", "self", ".", "re", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricF1Soft.add_labels": [[186, 194], ["python_cpn_eval.MetricF1Soft.labels.add"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add"], ["", "def", "add_labels", "(", "self", ",", "spans_cluster", ")", ":", "\n", "        ", "for", "_", ",", "label", "in", "spans_cluster", ":", "\n", "            ", "if", "label", "not", "in", "self", ".", "labels", ":", "\n", "                ", "self", ".", "labels", ".", "add", "(", "label", ")", "\n", "self", ".", "p_tps", "[", "label", "]", "=", "0.0", "\n", "self", ".", "p_fps", "[", "label", "]", "=", "0.0", "\n", "self", ".", "r_tps", "[", "label", "]", "=", "0.0", "\n", "self", ".", "r_fns", "[", "label", "]", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricF1Soft.update": [[195, 217], ["zip", "python_cpn_eval.MetricF1Soft.add_labels", "python_cpn_eval.MetricF1Soft.add_labels", "python_cpn_eval.clusters_to_mentions", "python_cpn_eval.clusters_to_mentions", "python_cpn_eval.cluster_to_mentions", "python_cpn_eval.cluster_to_mentions", "len", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricRelationF1Mention.add_labels", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricRelationF1Mention.add_labels", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.clusters_to_mentions", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.clusters_to_mentions", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.cluster_to_mentions", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.cluster_to_mentions"], ["", "", "", "def", "update", "(", "self", ",", "preds", ",", "golds", ")", ":", "\n", "        ", "for", "pred", ",", "gold", "in", "zip", "(", "preds", ",", "golds", ")", ":", "\n", "            ", "self", ".", "add_labels", "(", "pred", ")", "\n", "self", ".", "add_labels", "(", "gold", ")", "\n", "\n", "P", "=", "clusters_to_mentions", "(", "pred", ")", "\n", "G", "=", "clusters_to_mentions", "(", "gold", ")", "\n", "for", "cluster_p", ",", "entity_type", "in", "pred", ":", "\n", "                ", "pairs", "=", "cluster_to_mentions", "(", "cluster_p", ",", "entity_type", ")", "\n", "if", "len", "(", "pairs", ")", ">", "0", ":", "\n", "                    ", "tp", "=", "len", "(", "pairs", "&", "G", ")", "/", "len", "(", "pairs", ")", "\n", "fp", "=", "1.0", "-", "tp", "\n", "self", ".", "p_tps", "[", "entity_type", "]", "+=", "tp", "\n", "self", ".", "p_fps", "[", "entity_type", "]", "+=", "fp", "\n", "\n", "", "", "for", "cluster_g", ",", "entity_type", "in", "gold", ":", "\n", "                ", "pairs", "=", "cluster_to_mentions", "(", "cluster_g", ",", "entity_type", ")", "\n", "if", "len", "(", "pairs", ")", ">", "0", ":", "\n", "                    ", "tp", "=", "len", "(", "pairs", "&", "P", ")", "/", "len", "(", "pairs", ")", "\n", "fp", "=", "1.0", "-", "tp", "\n", "self", ".", "r_tps", "[", "entity_type", "]", "+=", "tp", "\n", "self", ".", "r_fns", "[", "entity_type", "]", "+=", "fp", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricF1Soft.calculate_metrics": [[218, 258], ["python_cpn_eval.MetricF1Soft.print"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "", "", "", "def", "calculate_metrics", "(", "self", ",", "must_print", "=", "False", ")", ":", "\n", "        ", "total_p_tp", ",", "total_p_fp", ",", "total_r_tp", ",", "total_r_fn", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "\n", "for", "label", "in", "self", ".", "labels", ":", "\n", "            ", "p_tp", ",", "p_fp", "=", "self", ".", "p_tps", "[", "label", "]", ",", "self", ".", "p_fps", "[", "label", "]", "\n", "r_tp", ",", "r_fn", "=", "self", ".", "r_tps", "[", "label", "]", ",", "self", ".", "r_fns", "[", "label", "]", "\n", "pr", "=", "p_tp", "/", "(", "p_tp", "+", "p_fp", ")", "if", "p_tp", "!=", "0", "else", "0.0", "\n", "re", "=", "r_tp", "/", "(", "r_tp", "+", "r_fn", ")", "if", "r_tp", "!=", "0", "else", "0.0", "\n", "f1", "=", "2.0", "*", "pr", "*", "re", "/", "(", "pr", "+", "re", ")", "if", "pr", "*", "re", "!=", "0.0", "else", "0.0", "\n", "\n", "if", "self", ".", "verbose", "and", "must_print", ":", "\n", "                ", "print", "(", "\n", "'{:24}    {:6.1f} / {:6.1f} = {:6.5f}    {:6.1f} / {:6.1f} = {:6.5f}    {:6.5f}'", ".", "format", "(", "label", ",", "p_tp", ",", "\n", "p_fp", ",", "pr", ",", "\n", "r_tp", ",", "r_fn", ",", "\n", "re", ",", "f1", ")", ")", "\n", "\n", "", "total_p_tp", "+=", "p_tp", "\n", "total_p_fp", "+=", "p_fp", "\n", "total_r_tp", "+=", "r_tp", "\n", "total_r_fn", "+=", "r_fn", "\n", "\n", "", "total_pr", "=", "total_p_tp", "/", "(", "total_p_tp", "+", "total_p_fp", ")", "if", "total_p_tp", "!=", "0", "else", "0.0", "\n", "total_re", "=", "total_r_tp", "/", "(", "total_r_tp", "+", "total_r_fn", ")", "if", "total_r_tp", "!=", "0", "else", "0.0", "\n", "total_f1", "=", "2.0", "*", "total_pr", "*", "total_re", "/", "(", "total_pr", "+", "total_re", ")", "if", "total_pr", "*", "total_re", "!=", "0.0", "else", "0.0", "\n", "\n", "if", "must_print", ":", "\n", "            ", "print", "(", "\n", "'SOFT NER {:24}    {:6.1f} / {:6.1f} = {:6.5f}    {:6.1f} / {:6.1f} = {:6.5f}    {:6.5f}'", "\n", ".", "format", "(", "''", ",", "total_p_tp", ",", "\n", "total_p_fp", ",", "\n", "total_pr", ",", "\n", "total_r_tp", ",", "\n", "total_r_fn", ",", "\n", "total_re", ",", "\n", "total_f1", ")", ")", "\n", "\n", "", "self", ".", "f1", "=", "total_f1", "\n", "self", ".", "pr", "=", "total_pr", "\n", "self", ".", "re", "=", "total_re", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricF1Soft.print": [[259, 261], ["python_cpn_eval.MetricF1Soft.calculate_metrics"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricRelationF1Mention.calculate_metrics"], ["", "def", "print", "(", "self", ")", ":", "\n", "        ", "self", ".", "calculate_metrics", "(", "must_print", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricF1Soft.get_f1": [[262, 264], ["None"], "methods", ["None"], ["", "def", "get_f1", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "f1", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricF1Soft.get_pr": [[265, 267], ["None"], "methods", ["None"], ["", "def", "get_pr", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "pr", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricF1Soft.get_re": [[268, 270], ["None"], "methods", ["None"], ["", "def", "get_re", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "re", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricF1Hard.__init__": [[274, 277], ["python_cpn_eval.MetricF1Hard.clear"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricF1.clear"], ["    ", "def", "__init__", "(", "self", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricF1Hard.clear": [[278, 287], ["set"], "methods", ["None"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "labels", "=", "set", "(", ")", "\n", "self", ".", "tps", "=", "{", "}", "\n", "self", ".", "fps", "=", "{", "}", "\n", "self", ".", "fns", "=", "{", "}", "\n", "\n", "self", ".", "f1", "=", "0.0", "\n", "self", ".", "pr", "=", "0.0", "\n", "self", ".", "re", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricF1Hard.add_labels": [[288, 295], ["python_cpn_eval.MetricF1Hard.labels.add"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add"], ["", "def", "add_labels", "(", "self", ",", "spans_cluster", ")", ":", "\n", "        ", "for", "_", ",", "label", "in", "spans_cluster", ":", "\n", "            ", "if", "label", "not", "in", "self", ".", "labels", ":", "\n", "                ", "self", ".", "labels", ".", "add", "(", "label", ")", "\n", "self", ".", "tps", "[", "label", "]", "=", "0.0", "\n", "self", ".", "fps", "[", "label", "]", "=", "0.0", "\n", "self", ".", "fns", "[", "label", "]", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricF1Hard.update": [[296, 312], ["zip", "python_cpn_eval.MetricF1Hard.add_labels", "python_cpn_eval.MetricF1Hard.add_labels"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricRelationF1Mention.add_labels", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricRelationF1Mention.add_labels"], ["", "", "", "def", "update", "(", "self", ",", "preds", ",", "golds", ")", ":", "\n", "        ", "for", "pred", ",", "gold", "in", "zip", "(", "preds", ",", "golds", ")", ":", "\n", "            ", "self", ".", "add_labels", "(", "pred", ")", "\n", "self", ".", "add_labels", "(", "gold", ")", "\n", "\n", "for", "cluster_p", "in", "pred", ":", "\n", "                ", "predicted_label", "=", "cluster_p", "[", "1", "]", "\n", "if", "cluster_p", "in", "gold", ":", "\n", "                    ", "self", ".", "tps", "[", "predicted_label", "]", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "self", ".", "fps", "[", "predicted_label", "]", "+=", "1", "\n", "\n", "", "", "for", "cluster_g", "in", "gold", ":", "\n", "                ", "gold_label", "=", "cluster_g", "[", "1", "]", "\n", "if", "cluster_g", "not", "in", "pred", ":", "\n", "                    ", "self", ".", "fns", "[", "gold_label", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricF1Hard.calculate_metrics": [[313, 351], ["python_cpn_eval.MetricF1Hard.print"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "", "", "", "def", "calculate_metrics", "(", "self", ",", "must_print", "=", "False", ")", ":", "\n", "        ", "total_tps", ",", "total_fps", ",", "total_fns", "=", "0", ",", "0", ",", "0", "\n", "\n", "for", "label", "in", "self", ".", "labels", ":", "\n", "            ", "tps", ",", "fps", ",", "fns", "=", "self", ".", "tps", "[", "label", "]", ",", "self", ".", "fps", "[", "label", "]", ",", "self", ".", "fns", "[", "label", "]", "\n", "pr", "=", "tps", "/", "(", "tps", "+", "fps", ")", "if", "tps", "!=", "0", "else", "0.0", "\n", "re", "=", "tps", "/", "(", "tps", "+", "fns", ")", "if", "tps", "!=", "0", "else", "0.0", "\n", "f1", "=", "2.0", "*", "pr", "*", "re", "/", "(", "pr", "+", "re", ")", "if", "pr", "*", "re", "!=", "0.0", "else", "0.0", "\n", "\n", "if", "self", ".", "verbose", "and", "must_print", ":", "\n", "                ", "print", "(", "\n", "'{:24}    {:6.1f} / {:6.1f} = {:6.5f}    {:6.1f} / {:6.1f} = {:6.5f}    {:6.5f}'", ".", "format", "(", "label", ",", "tps", ",", "\n", "fps", ",", "pr", ",", "\n", "tps", ",", "fns", ",", "\n", "re", ",", "f1", ")", ")", "\n", "\n", "", "total_tps", "+=", "tps", "\n", "total_fps", "+=", "fps", "\n", "total_fns", "+=", "fns", "\n", "\n", "", "total_pr", "=", "total_tps", "/", "(", "total_tps", "+", "total_fps", ")", "if", "total_tps", "!=", "0", "else", "0.0", "\n", "total_re", "=", "total_tps", "/", "(", "total_tps", "+", "total_fns", ")", "if", "total_tps", "!=", "0", "else", "0.0", "\n", "total_f1", "=", "2.0", "*", "total_pr", "*", "total_re", "/", "(", "total_pr", "+", "total_re", ")", "if", "total_pr", "*", "total_re", "!=", "0.0", "else", "0.0", "\n", "\n", "if", "must_print", ":", "\n", "            ", "print", "(", "\n", "'SOFT NER {:24}    {:6.1f} / {:6.1f} = {:6.5f}    {:6.1f} / {:6.1f} = {:6.5f}    {:6.5f}'", "\n", ".", "format", "(", "''", ",", "total_tps", ",", "\n", "total_fps", ",", "\n", "total_pr", ",", "\n", "total_tps", ",", "\n", "total_fns", ",", "\n", "total_re", ",", "\n", "total_f1", ")", ")", "\n", "\n", "", "self", ".", "f1", "=", "total_f1", "\n", "self", ".", "pr", "=", "total_pr", "\n", "self", ".", "re", "=", "total_re", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricF1Hard.print": [[352, 354], ["python_cpn_eval.MetricF1Hard.calculate_metrics"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricRelationF1Mention.calculate_metrics"], ["", "def", "print", "(", "self", ")", ":", "\n", "        ", "self", ".", "calculate_metrics", "(", "must_print", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricF1Hard.get_f1": [[355, 357], ["None"], "methods", ["None"], ["", "def", "get_f1", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "f1", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricF1Hard.get_pr": [[358, 360], ["None"], "methods", ["None"], ["", "def", "get_pr", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "pr", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricF1Hard.get_re": [[361, 363], ["None"], "methods", ["None"], ["", "def", "get_re", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "re", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricCoref.__init__": [[376, 381], ["python_cpn_eval.MetricCoref.clear"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricF1.clear"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "m", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricCoref.clear": [[382, 387], ["None"], "methods", ["None"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "precision_numerator", "=", "0", "\n", "self", ".", "precision_denominator", "=", "0", "\n", "self", ".", "recall_numerator", "=", "0", "\n", "self", ".", "recall_denominator", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricCoref.add": [[388, 400], ["python_cpn_eval.MetricCoref.m", "python_cpn_eval.MetricCoref.m", "python_cpn_eval.MetricCoref.m", "python_cpn_eval.mention2cluster", "python_cpn_eval.mention2cluster"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.mention2cluster", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.mention2cluster"], ["", "def", "add", "(", "self", ",", "pred", ",", "gold", ")", ":", "\n", "        ", "if", "pred", "is", "not", "None", "and", "gold", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "m", "==", "self", ".", "ceafe", "or", "self", ".", "m", "==", "self", ".", "ceafe_singleton_entities", "or", "self", ".", "m", "==", "self", ".", "ceafe_singleton_mentions", ":", "\n", "                ", "p_num", ",", "p_den", ",", "r_num", ",", "r_den", "=", "self", ".", "m", "(", "pred", ",", "gold", ")", "\n", "", "else", ":", "\n", "                ", "p_num", ",", "p_den", "=", "self", ".", "m", "(", "pred", ",", "mention2cluster", "(", "gold", ")", ")", "\n", "r_num", ",", "r_den", "=", "self", ".", "m", "(", "gold", ",", "mention2cluster", "(", "pred", ")", ")", "\n", "\n", "", "self", ".", "precision_numerator", "+=", "p_num", "\n", "self", ".", "precision_denominator", "+=", "p_den", "\n", "self", ".", "recall_numerator", "+=", "r_num", "\n", "self", ".", "recall_denominator", "+=", "r_den", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricCoref.get_f1": [[401, 405], ["python_cpn_eval.MetricCoref.get_pr", "python_cpn_eval.MetricCoref.get_re"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.get_pr", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.get_re"], ["", "", "def", "get_f1", "(", "self", ")", ":", "\n", "        ", "precision", "=", "self", ".", "get_pr", "(", ")", "\n", "recall", "=", "self", ".", "get_re", "(", ")", "\n", "return", "0", "if", "precision", "+", "recall", "==", "0", "else", "2", "*", "precision", "*", "recall", "/", "(", "precision", "+", "recall", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricCoref.get_pr": [[406, 410], ["float"], "methods", ["None"], ["", "def", "get_pr", "(", "self", ")", ":", "\n", "        ", "precision", "=", "0", "if", "self", ".", "precision_denominator", "==", "0", "else", "self", ".", "precision_numerator", "/", "float", "(", "self", ".", "precision_denominator", ")", "\n", "return", "precision", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricCoref.get_re": [[411, 415], ["float"], "methods", ["None"], ["", "def", "get_re", "(", "self", ")", ":", "\n", "        ", "recall", "=", "0", "if", "self", ".", "recall_denominator", "==", "0", "else", "self", ".", "recall_numerator", "/", "float", "(", "self", ".", "recall_denominator", ")", "\n", "return", "recall", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricCoref.print": [[416, 420], ["python_cpn_eval.MetricCoref.get_f1", "python_cpn_eval.MetricCoref.print"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCorefAverage.get_f1", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "print", "(", "self", ")", ":", "\n", "        ", "f1", "=", "self", ".", "get_f1", "(", ")", "\n", "\n", "print", "(", "\"coref\\t{}\\t{}\"", ".", "format", "(", "self", ".", "name", ",", "f1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricCoref.b_cubed": [[421, 438], ["collections.Counter", "collections.Counter.items", "len", "len", "float", "len", "len", "tuple"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "b_cubed", "(", "clusters", ",", "mention_to_gold", ")", ":", "\n", "        ", "numerator", ",", "denominator", "=", "0", ",", "0", "\n", "for", "cluster", "in", "clusters", ":", "\n", "            ", "if", "len", "(", "cluster", ")", "==", "1", ":", "\n", "                ", "continue", "\n", "", "gold_counts", "=", "Counter", "(", ")", "\n", "correct", "=", "0", "\n", "for", "mention", "in", "cluster", ":", "\n", "                ", "if", "mention", "in", "mention_to_gold", ":", "\n", "                    ", "gold_counts", "[", "tuple", "(", "mention_to_gold", "[", "mention", "]", ")", "]", "+=", "1", "\n", "", "", "for", "cluster2", ",", "count", "in", "gold_counts", ".", "items", "(", ")", ":", "\n", "                ", "if", "len", "(", "cluster2", ")", "!=", "1", ":", "\n", "                    ", "correct", "+=", "count", "*", "count", "\n", "", "", "numerator", "+=", "correct", "/", "float", "(", "len", "(", "cluster", ")", ")", "\n", "denominator", "+=", "len", "(", "cluster", ")", "\n", "", "return", "numerator", ",", "denominator", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricCoref.b_cubed_singleton_entities": [[439, 462], ["collections.Counter", "collections.Counter.items", "float", "float", "len", "len", "tuple"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "b_cubed_singleton_entities", "(", "clusters", ",", "mention_to_gold", ")", ":", "\n", "        ", "numerator", ",", "denominator", "=", "0", ",", "0", "\n", "for", "cluster", "in", "clusters", ":", "\n", "            ", "gold_counts", "=", "Counter", "(", ")", "\n", "correct", "=", "0", "\n", "for", "mention", "in", "cluster", ":", "\n", "                ", "if", "mention", "in", "mention_to_gold", ":", "\n", "                    ", "gold_counts", "[", "tuple", "(", "mention_to_gold", "[", "mention", "]", ")", "]", "+=", "1", "\n", "", "", "for", "cluster2", ",", "count", "in", "gold_counts", ".", "items", "(", ")", ":", "\n", "                ", "correct", "+=", "count", "*", "count", "\n", "\n", "# (kzaporoj) - old mention-based:", "\n", "# numerator += correct / float(len(cluster))", "\n", "# (kzaporoj) - dividing it by the length of the cluster will make it have same weight in scoring than other", "\n", "# bigger/smaller clusters", "\n", "", "numerator", "+=", "correct", "/", "float", "(", "len", "(", "cluster", ")", ")", "/", "float", "(", "len", "(", "cluster", ")", ")", "\n", "\n", "# (kzaporoj) - old mention-based:", "\n", "# denominator += len(cluster)", "\n", "# (kzaporoj) - here just sums 1 for each cluster, treating them equally", "\n", "denominator", "+=", "1", "\n", "", "return", "numerator", ",", "denominator", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricCoref.b_cubed_singleton_mentions": [[463, 477], ["collections.Counter", "collections.Counter.items", "len", "float", "len", "tuple"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "b_cubed_singleton_mentions", "(", "clusters", ",", "mention_to_gold", ")", ":", "\n", "        ", "numerator", ",", "denominator", "=", "0", ",", "0", "\n", "for", "cluster", "in", "clusters", ":", "\n", "            ", "gold_counts", "=", "Counter", "(", ")", "\n", "correct", "=", "0", "\n", "for", "mention", "in", "cluster", ":", "\n", "                ", "if", "mention", "in", "mention_to_gold", ":", "\n", "                    ", "gold_counts", "[", "tuple", "(", "mention_to_gold", "[", "mention", "]", ")", "]", "+=", "1", "\n", "", "", "for", "cluster2", ",", "count", "in", "gold_counts", ".", "items", "(", ")", ":", "\n", "                ", "correct", "+=", "count", "*", "count", "\n", "", "numerator", "+=", "correct", "/", "float", "(", "len", "(", "cluster", ")", ")", "\n", "denominator", "+=", "len", "(", "cluster", ")", "\n", "", "return", "numerator", ",", "denominator", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricCoref.muc": [[478, 492], ["len", "set", "len", "len", "set.add"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add"], ["", "@", "staticmethod", "\n", "def", "muc", "(", "clusters", ",", "mention_to_gold", ")", ":", "\n", "        ", "true_p", ",", "all_p", "=", "0", ",", "0", "\n", "for", "cluster", "in", "clusters", ":", "\n", "            ", "all_p", "+=", "len", "(", "cluster", ")", "-", "1", "\n", "true_p", "+=", "len", "(", "cluster", ")", "\n", "linked", "=", "set", "(", ")", "\n", "for", "mention", "in", "cluster", ":", "\n", "                ", "if", "mention", "in", "mention_to_gold", ":", "\n", "                    ", "linked", ".", "add", "(", "mention_to_gold", "[", "mention", "]", ")", "\n", "", "else", ":", "\n", "                    ", "true_p", "-=", "1", "\n", "", "", "true_p", "-=", "len", "(", "linked", ")", "\n", "", "return", "true_p", ",", "all_p", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricCoref.phi4_entity_centric": [[493, 504], ["float", "len", "len", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "phi4_entity_centric", "(", "gold_clustering", ",", "predicted_clustering", ")", ":", "\n", "        ", "\"\"\"\n        Subroutine for ceafe. Computes the mention F measure between gold and\n        predicted mentions in a cluster.\n        (kzaporoj) - Entity centric (normalizes by the len of the involved clusters)\n        \"\"\"", "\n", "return", "(", "\n", "2", "\n", "*", "len", "(", "[", "mention", "for", "mention", "in", "gold_clustering", "if", "mention", "in", "predicted_clustering", "]", ")", "\n", "/", "float", "(", "len", "(", "gold_clustering", ")", "+", "len", "(", "predicted_clustering", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricCoref.phi4_mention_centric": [[506, 515], ["len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "phi4_mention_centric", "(", "gold_clustering", ",", "predicted_clustering", ")", ":", "\n", "        ", "\"\"\"\n        Subroutine for ceafe. Computes the mention F measure between gold and\n        predicted mentions in a cluster.\n        (kzaporoj) - Mention centric (sum of the number of mentions in intersected clusters)\n        \"\"\"", "\n", "return", "(", "\n", "len", "(", "[", "mention", "for", "mention", "in", "gold_clustering", "if", "mention", "in", "predicted_clustering", "]", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricCoref.ceafe": [[517, 536], ["numpy.zeros", "enumerate", "scipy.optimize.linear_sum_assignment", "sum", "enumerate", "len", "len", "len", "len", "python_cpn_eval.MetricCoref.phi4_entity_centric", "len", "len"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricCoref.phi4_entity_centric"], ["", "@", "staticmethod", "\n", "def", "ceafe", "(", "clusters", ",", "gold_clusters", ")", ":", "\n", "        ", "\"\"\"\n        Computes the  Constrained EntityAlignment F-Measure (CEAF) for evaluating coreference.\n        Gold and predicted mentions are aligned into clusterings which maximise a metric - in\n        this case, the F measure between gold and predicted clusters.\n        <https://www.semanticscholar.org/paper/On-Coreference-Resolution-Performance-Metrics-Luo/de133c1f22d0dfe12539e25dda70f28672459b99>\n        \"\"\"", "\n", "clusters", "=", "[", "cluster", "for", "cluster", "in", "clusters", "if", "len", "(", "cluster", ")", "!=", "1", "]", "\n", "gold_clusters", "=", "[", "cluster", "for", "cluster", "in", "gold_clusters", "if", "len", "(", "cluster", ")", "!=", "1", "]", "# is this really correct?", "\n", "scores", "=", "np", ".", "zeros", "(", "(", "len", "(", "gold_clusters", ")", ",", "len", "(", "clusters", ")", ")", ")", "\n", "for", "i", ",", "gold_cluster", "in", "enumerate", "(", "gold_clusters", ")", ":", "\n", "            ", "for", "j", ",", "cluster", "in", "enumerate", "(", "clusters", ")", ":", "\n", "                ", "scores", "[", "i", ",", "j", "]", "=", "MetricCoref", ".", "phi4_entity_centric", "(", "gold_cluster", ",", "cluster", ")", "\n", "# print('pred:', [len(x) for x in clusters])", "\n", "# print('gold:', [len(x) for x in gold_clusters])", "\n", "", "", "row", ",", "col", "=", "linear_sum_assignment", "(", "-", "scores", ")", "\n", "similarity", "=", "sum", "(", "scores", "[", "row", ",", "col", "]", ")", "\n", "return", "similarity", ",", "len", "(", "clusters", ")", ",", "similarity", ",", "len", "(", "gold_clusters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricCoref.ceafe_singleton_entities": [[537, 555], ["numpy.zeros", "enumerate", "scipy.optimize.linear_sum_assignment", "sum", "enumerate", "len", "len", "len", "len", "python_cpn_eval.MetricCoref.phi4_entity_centric", "len", "len"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricCoref.phi4_entity_centric"], ["", "@", "staticmethod", "\n", "def", "ceafe_singleton_entities", "(", "clusters", ",", "gold_clusters", ")", ":", "\n", "        ", "\"\"\"\n        Computes the  Constrained EntityAlignment F-Measure (CEAF) for evaluating coreference.\n        Gold and predicted mentions are aligned into clusterings which maximise a metric - in\n        this case, the F measure between gold and predicted clusters.\n        <https://www.semanticscholar.org/paper/On-Coreference-Resolution-Performance-Metrics-Luo/de133c1f22d0dfe12539e25dda70f28672459b99>\n        (kzaporoj) - this is entity-centric version where the cost is based on formula (9) of the paper\n        \"\"\"", "\n", "clusters", "=", "[", "cluster", "for", "cluster", "in", "clusters", "if", "len", "(", "cluster", ")", ">", "0", "]", "\n", "gold_clusters", "=", "[", "cluster", "for", "cluster", "in", "gold_clusters", "if", "len", "(", "cluster", ")", ">", "0", "]", "\n", "scores", "=", "np", ".", "zeros", "(", "(", "len", "(", "gold_clusters", ")", ",", "len", "(", "clusters", ")", ")", ")", "\n", "for", "i", ",", "gold_cluster", "in", "enumerate", "(", "gold_clusters", ")", ":", "\n", "            ", "for", "j", ",", "cluster", "in", "enumerate", "(", "clusters", ")", ":", "\n", "                ", "scores", "[", "i", ",", "j", "]", "=", "MetricCoref", ".", "phi4_entity_centric", "(", "gold_cluster", ",", "cluster", ")", "\n", "", "", "row", ",", "col", "=", "linear_sum_assignment", "(", "-", "scores", ")", "\n", "similarity", "=", "sum", "(", "scores", "[", "row", ",", "col", "]", ")", "\n", "return", "similarity", ",", "len", "(", "clusters", ")", ",", "similarity", ",", "len", "(", "gold_clusters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricCoref.ceafe_singleton_mentions": [[556, 576], ["numpy.zeros", "enumerate", "scipy.optimize.linear_sum_assignment", "sum", "enumerate", "len", "len", "len", "len", "python_cpn_eval.MetricCoref.phi4_mention_centric", "len", "len"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricCoref.phi4_mention_centric"], ["", "@", "staticmethod", "\n", "def", "ceafe_singleton_mentions", "(", "clusters", ",", "gold_clusters", ")", ":", "\n", "        ", "\"\"\"\n        Computes the  Constrained EntityAlignment F-Measure (CEAF) for evaluating coreference.\n        Gold and predicted mentions are aligned into clusterings which maximise a metric - in\n        this case, the F measure between gold and predicted clusters.\n        <https://www.semanticscholar.org/paper/On-Coreference-Resolution-Performance-Metrics-Luo/de133c1f22d0dfe12539e25dda70f28672459b99>\n        (kzaporoj) - this is mention-centric version where the cost is based on formula (8) of the paper\n        \"\"\"", "\n", "clusters", "=", "[", "cluster", "for", "cluster", "in", "clusters", "if", "len", "(", "cluster", ")", ">", "0", "]", "\n", "gold_clusters", "=", "[", "cluster", "for", "cluster", "in", "gold_clusters", "if", "len", "(", "cluster", ")", ">", "0", "]", "\n", "scores", "=", "np", ".", "zeros", "(", "(", "len", "(", "gold_clusters", ")", ",", "len", "(", "clusters", ")", ")", ")", "\n", "for", "i", ",", "gold_cluster", "in", "enumerate", "(", "gold_clusters", ")", ":", "\n", "            ", "for", "j", ",", "cluster", "in", "enumerate", "(", "clusters", ")", ":", "\n", "                ", "scores", "[", "i", ",", "j", "]", "=", "MetricCoref", ".", "phi4_mention_centric", "(", "gold_cluster", ",", "cluster", ")", "\n", "", "", "row", ",", "col", "=", "linear_sum_assignment", "(", "-", "scores", ")", "\n", "similarity", "=", "sum", "(", "scores", "[", "row", ",", "col", "]", ")", "\n", "cluster_mentions", "=", "[", "item", "for", "sublist", "in", "clusters", "for", "item", "in", "sublist", "]", "\n", "gold_cluster_mentions", "=", "[", "item", "for", "sublist", "in", "gold_clusters", "for", "item", "in", "sublist", "]", "\n", "return", "similarity", ",", "len", "(", "cluster_mentions", ")", ",", "similarity", ",", "len", "(", "gold_cluster_mentions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricRelationF1.__init__": [[601, 604], ["python_cpn_eval.MetricRelationF1.clear"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricF1.clear"], ["    ", "def", "__init__", "(", "self", ",", "verbose", ")", ":", "\n", "        ", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricRelationF1.clear": [[605, 614], ["set"], "methods", ["None"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "labels", "=", "set", "(", ")", "\n", "self", ".", "f1", "=", "0.0", "\n", "self", ".", "pr", "=", "0.0", "\n", "self", ".", "re", "=", "0.0", "\n", "self", ".", "p_tps", "=", "{", "}", "\n", "self", ".", "p_fps", "=", "{", "}", "\n", "self", ".", "r_tps", "=", "{", "}", "\n", "self", ".", "r_fns", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricRelationF1.add_labels": [[615, 623], ["python_cpn_eval.MetricRelationF1.labels.add"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add"], ["", "def", "add_labels", "(", "self", ",", "triples", ")", ":", "\n", "        ", "for", "_", ",", "_", ",", "rel", "in", "triples", ":", "\n", "            ", "if", "rel", "not", "in", "self", ".", "labels", ":", "\n", "                ", "self", ".", "labels", ".", "add", "(", "rel", ")", "\n", "self", ".", "p_tps", "[", "rel", "]", "=", "0.0", "\n", "self", ".", "p_fps", "[", "rel", "]", "=", "0.0", "\n", "self", ".", "r_tps", "[", "rel", "]", "=", "0.0", "\n", "self", ".", "r_fns", "[", "rel", "]", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricRelationF1.add": [[624, 648], ["python_cpn_eval.MetricRelationF1.add_labels", "python_cpn_eval.MetricRelationF1.add_labels", "python_cpn_eval.to_pairwise", "python_cpn_eval.to_pairwise", "python_cpn_eval.to_pairs", "python_cpn_eval.to_pairs", "len", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricRelationF1Mention.add_labels", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricRelationF1Mention.add_labels", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.to_pairwise", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.to_pairwise", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.to_pairs", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.to_pairs"], ["", "", "", "def", "add", "(", "self", ",", "pred", ",", "gold", ")", ":", "\n", "        ", "self", ".", "add_labels", "(", "pred", ")", "\n", "self", ".", "add_labels", "(", "gold", ")", "\n", "\n", "P", "=", "to_pairwise", "(", "pred", ")", "\n", "G", "=", "to_pairwise", "(", "gold", ")", "\n", "\n", "for", "src_cluster", ",", "dst_cluster", ",", "rel", "in", "pred", ":", "\n", "            ", "pairs", "=", "to_pairs", "(", "src_cluster", ",", "dst_cluster", ",", "rel", ")", "\n", "if", "len", "(", "pairs", ")", ">", "0", ":", "\n", "                ", "tp", "=", "len", "(", "pairs", "&", "G", ")", "/", "len", "(", "pairs", ")", "\n", "fp", "=", "1.0", "-", "tp", "\n", "\n", "self", ".", "p_tps", "[", "rel", "]", "+=", "tp", "\n", "self", ".", "p_fps", "[", "rel", "]", "+=", "fp", "\n", "\n", "", "", "for", "src_cluster", ",", "dst_cluster", ",", "rel", "in", "gold", ":", "\n", "            ", "pairs", "=", "to_pairs", "(", "src_cluster", ",", "dst_cluster", ",", "rel", ")", "\n", "if", "len", "(", "pairs", ")", ">", "0", ":", "\n", "                ", "tp", "=", "len", "(", "pairs", "&", "P", ")", "/", "len", "(", "pairs", ")", "\n", "fn", "=", "1.0", "-", "tp", "\n", "\n", "self", ".", "r_tps", "[", "rel", "]", "+=", "tp", "\n", "self", ".", "r_fns", "[", "rel", "]", "+=", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricRelationF1.update": [[649, 664], ["enumerate", "zip", "python_cpn_eval.MetricRelationF1.add", "python_cpn_eval.MetricRelationF1.print"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "", "", "def", "update", "(", "self", ",", "args", ",", "metadata", "=", "{", "}", ")", ":", "\n", "        ", "for", "batch", ",", "(", "pred", ",", "gold", ",", "identifier", ",", "tokens", ")", "in", "enumerate", "(", "\n", "zip", "(", "args", "[", "'pred'", "]", ",", "args", "[", "'gold'", "]", ",", "metadata", "[", "'identifiers'", "]", ",", "metadata", "[", "'tokens'", "]", ")", ")", ":", "\n", "            ", "if", "self", ".", "verbose", ":", "\n", "# print(\"pred:\", pred)", "\n", "# print(\"gold:\", gold)", "\n", "                ", "print", "(", "\"ID:\"", ",", "identifier", ")", "\n", "print", "(", "\"pred:\"", ",", "[", "(", "rel", ",", "captions", "(", "src", ",", "tokens", ")", ",", "captions", "(", "dst", ",", "tokens", ")", ")", "for", "src", ",", "dst", ",", "rel", "in", "pred", "]", ")", "\n", "if", "'target'", "in", "args", ":", "\n", "                    ", "print", "(", "\"target:\"", ",", "[", "(", "rel", ",", "captions", "(", "src", ",", "tokens", ")", ",", "captions", "(", "dst", ",", "tokens", ")", ")", "for", "src", ",", "dst", ",", "rel", "in", "\n", "args", "[", "'target'", "]", "[", "batch", "]", "]", ")", "\n", "", "print", "(", "\"gold:\"", ",", "[", "(", "rel", ",", "captions", "(", "src", ",", "tokens", ")", ",", "captions", "(", "dst", ",", "tokens", ")", ")", "for", "src", ",", "dst", ",", "rel", "in", "gold", "]", ")", "\n", "print", "(", ")", "\n", "\n", "", "self", ".", "add", "(", "pred", ",", "gold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricRelationF1.calculate_metrics": [[665, 704], ["python_cpn_eval.MetricRelationF1.print"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "", "def", "calculate_metrics", "(", "self", ",", "must_print", "=", "False", ")", ":", "\n", "        ", "total_p_tp", ",", "total_p_fp", ",", "total_r_tp", ",", "total_r_fn", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "\n", "for", "label", "in", "self", ".", "labels", ":", "\n", "            ", "p_tp", ",", "p_fp", "=", "self", ".", "p_tps", "[", "label", "]", ",", "self", ".", "p_fps", "[", "label", "]", "\n", "r_tp", ",", "r_fn", "=", "self", ".", "r_tps", "[", "label", "]", ",", "self", ".", "r_fns", "[", "label", "]", "\n", "pr", "=", "p_tp", "/", "(", "p_tp", "+", "p_fp", ")", "if", "p_tp", "!=", "0", "else", "0.0", "\n", "re", "=", "r_tp", "/", "(", "r_tp", "+", "r_fn", ")", "if", "r_tp", "!=", "0", "else", "0.0", "\n", "f1", "=", "2.0", "*", "pr", "*", "re", "/", "(", "pr", "+", "re", ")", "if", "pr", "*", "re", "!=", "0.0", "else", "0.0", "\n", "\n", "if", "self", ".", "verbose", "and", "must_print", ":", "\n", "                ", "print", "(", "\n", "'{:24}    {:6.1f} / {:6.1f} = {:6.5f}    {:6.1f} / {:6.1f} = {:6.5f}    {:6.5f}'", ".", "format", "(", "label", ",", "p_tp", ",", "\n", "p_fp", ",", "pr", ",", "\n", "r_tp", ",", "r_fn", ",", "\n", "re", ",", "f1", ")", ")", "\n", "\n", "", "total_p_tp", "+=", "p_tp", "\n", "total_p_fp", "+=", "p_fp", "\n", "total_r_tp", "+=", "r_tp", "\n", "total_r_fn", "+=", "r_fn", "\n", "\n", "", "total_pr", "=", "total_p_tp", "/", "(", "total_p_tp", "+", "total_p_fp", ")", "if", "total_p_tp", "!=", "0", "else", "0.0", "\n", "total_re", "=", "total_r_tp", "/", "(", "total_r_tp", "+", "total_r_fn", ")", "if", "total_r_tp", "!=", "0", "else", "0.0", "\n", "total_f1", "=", "2.0", "*", "total_pr", "*", "total_re", "/", "(", "total_pr", "+", "total_re", ")", "if", "total_pr", "*", "total_re", "!=", "0.0", "else", "0.0", "\n", "\n", "if", "must_print", ":", "\n", "            ", "print", "(", "\n", "'{:24}    {:6.1f} / {:6.1f} = {:6.5f}    {:6.1f} / {:6.1f} = {:6.5f}    {:6.5f}'", ".", "format", "(", "''", ",", "total_p_tp", ",", "\n", "total_p_fp", ",", "\n", "total_pr", ",", "\n", "total_r_tp", ",", "\n", "total_r_fn", ",", "\n", "total_re", ",", "\n", "total_f1", ")", ")", "\n", "\n", "", "self", ".", "f1", "=", "total_f1", "\n", "self", ".", "pr", "=", "total_pr", "\n", "self", ".", "re", "=", "total_re", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricRelationF1.print": [[709, 711], ["python_cpn_eval.MetricRelationF1.calculate_metrics"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricRelationF1Mention.calculate_metrics"], ["", "def", "print", "(", "self", ")", ":", "\n", "        ", "self", ".", "calculate_metrics", "(", "must_print", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricRelationF1.get_f1": [[712, 714], ["None"], "methods", ["None"], ["", "def", "get_f1", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "f1", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricRelationF1.get_pr": [[715, 717], ["None"], "methods", ["None"], ["", "def", "get_pr", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "pr", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricRelationF1.get_re": [[718, 720], ["None"], "methods", ["None"], ["", "def", "get_re", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "re", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricRelationF1Hard.__init__": [[724, 727], ["python_cpn_eval.MetricRelationF1Hard.clear"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricF1.clear"], ["    ", "def", "__init__", "(", "self", ",", "verbose", ")", ":", "\n", "        ", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricRelationF1Hard.clear": [[728, 736], ["set"], "methods", ["None"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "labels", "=", "set", "(", ")", "\n", "self", ".", "f1", "=", "0.0", "\n", "self", ".", "pr", "=", "0.0", "\n", "self", ".", "re", "=", "0.0", "\n", "self", ".", "tps", "=", "{", "}", "\n", "self", ".", "fps", "=", "{", "}", "\n", "self", ".", "fns", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricRelationF1Hard.add_labels": [[737, 744], ["python_cpn_eval.MetricRelationF1Hard.labels.add"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add"], ["", "def", "add_labels", "(", "self", ",", "triples", ")", ":", "\n", "        ", "for", "_", ",", "_", ",", "rel", "in", "triples", ":", "\n", "            ", "if", "rel", "not", "in", "self", ".", "labels", ":", "\n", "                ", "self", ".", "labels", ".", "add", "(", "rel", ")", "\n", "self", ".", "tps", "[", "rel", "]", "=", "0.0", "\n", "self", ".", "fps", "[", "rel", "]", "=", "0.0", "\n", "self", ".", "fns", "[", "rel", "]", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricRelationF1Hard.add": [[745, 761], ["python_cpn_eval.MetricRelationF1Hard.add_labels", "python_cpn_eval.MetricRelationF1Hard.add_labels"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricRelationF1Mention.add_labels", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricRelationF1Mention.add_labels"], ["", "", "", "def", "add", "(", "self", ",", "pred", ",", "gold", ")", ":", "\n", "        ", "self", ".", "add_labels", "(", "pred", ")", "\n", "self", ".", "add_labels", "(", "gold", ")", "\n", "\n", "# tps = pred & gold", "\n", "for", "rel_pred", "in", "pred", ":", "\n", "            ", "pred_label", "=", "rel_pred", "[", "2", "]", "\n", "if", "rel_pred", "in", "gold", ":", "\n", "                ", "self", ".", "tps", "[", "pred_label", "]", "+=", "1", "\n", "", "else", ":", "\n", "                ", "self", ".", "fps", "[", "pred_label", "]", "+=", "1", "\n", "\n", "", "", "for", "rel_gold", "in", "gold", ":", "\n", "            ", "gold_label", "=", "rel_gold", "[", "2", "]", "\n", "if", "rel_gold", "not", "in", "pred", ":", "\n", "                ", "self", ".", "fns", "[", "gold_label", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricRelationF1Hard.calculate_metrics": [[762, 800], ["python_cpn_eval.MetricRelationF1Hard.print"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "", "", "def", "calculate_metrics", "(", "self", ",", "must_print", "=", "False", ")", ":", "\n", "        ", "total_tps", ",", "total_fps", ",", "total_fns", "=", "0", ",", "0", ",", "0", "\n", "\n", "for", "label", "in", "self", ".", "labels", ":", "\n", "            ", "tps", ",", "fps", ",", "fns", "=", "self", ".", "tps", "[", "label", "]", ",", "self", ".", "fps", "[", "label", "]", ",", "self", ".", "fns", "[", "label", "]", "\n", "pr", "=", "tps", "/", "(", "tps", "+", "fps", ")", "if", "tps", "!=", "0", "else", "0.0", "\n", "re", "=", "tps", "/", "(", "tps", "+", "fns", ")", "if", "tps", "!=", "0", "else", "0.0", "\n", "f1", "=", "2.0", "*", "pr", "*", "re", "/", "(", "pr", "+", "re", ")", "if", "pr", "*", "re", "!=", "0.0", "else", "0.0", "\n", "\n", "if", "self", ".", "verbose", "and", "must_print", ":", "\n", "                ", "print", "(", "\n", "'{:24}    {:6.1f} / {:6.1f} = {:6.5f}    {:6.1f} / {:6.1f} = {:6.5f}    {:6.5f}'", ".", "format", "(", "label", ",", "tps", ",", "\n", "fps", ",", "pr", ",", "\n", "tps", ",", "fns", ",", "\n", "re", ",", "f1", ")", ")", "\n", "\n", "", "total_tps", "+=", "tps", "\n", "total_fps", "+=", "fps", "\n", "total_fns", "+=", "fns", "\n", "\n", "", "total_pr", "=", "total_tps", "/", "(", "total_tps", "+", "total_fps", ")", "if", "total_tps", "!=", "0", "else", "0.0", "\n", "total_re", "=", "total_tps", "/", "(", "total_tps", "+", "total_fns", ")", "if", "total_tps", "!=", "0", "else", "0.0", "\n", "total_f1", "=", "2.0", "*", "total_pr", "*", "total_re", "/", "(", "total_pr", "+", "total_re", ")", "if", "total_pr", "*", "total_re", "!=", "0.0", "else", "0.0", "\n", "\n", "if", "must_print", ":", "\n", "            ", "print", "(", "\n", "'HARD RELATION {:24}    {:6.1f} / {:6.1f} = {:6.5f}    {:6.1f} / {:6.1f} = {:6.5f}    {:6.5f}'", "\n", ".", "format", "(", "''", ",", "total_tps", ",", "\n", "total_fps", ",", "\n", "total_pr", ",", "\n", "total_tps", ",", "\n", "total_fns", ",", "\n", "total_re", ",", "\n", "total_f1", ")", ")", "\n", "\n", "", "self", ".", "f1", "=", "total_f1", "\n", "self", ".", "pr", "=", "total_pr", "\n", "self", ".", "re", "=", "total_re", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricRelationF1Hard.print": [[801, 803], ["python_cpn_eval.MetricRelationF1Hard.calculate_metrics"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricRelationF1Mention.calculate_metrics"], ["", "def", "print", "(", "self", ")", ":", "\n", "        ", "self", ".", "calculate_metrics", "(", "must_print", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricRelationF1Hard.get_f1": [[804, 806], ["None"], "methods", ["None"], ["", "def", "get_f1", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "f1", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricRelationF1Hard.get_pr": [[807, 809], ["None"], "methods", ["None"], ["", "def", "get_pr", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "pr", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricRelationF1Hard.get_re": [[810, 812], ["None"], "methods", ["None"], ["", "def", "get_re", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "re", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricRelationF1Mention.__init__": [[816, 819], ["python_cpn_eval.MetricRelationF1Mention.clear"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricF1.clear"], ["    ", "def", "__init__", "(", "self", ",", "verbose", ")", ":", "\n", "        ", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricRelationF1Mention.clear": [[820, 829], ["set"], "methods", ["None"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "f1", "=", "0.0", "\n", "self", ".", "pr", "=", "0.0", "\n", "self", ".", "re", "=", "0.0", "\n", "self", ".", "labels", "=", "set", "(", ")", "\n", "self", ".", "tps", "=", "{", "}", "\n", "self", ".", "fps", "=", "{", "}", "\n", "# self.r_tps = {}", "\n", "self", ".", "fns", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricRelationF1Mention.add_labels": [[830, 838], ["python_cpn_eval.MetricRelationF1Mention.labels.add"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add"], ["", "def", "add_labels", "(", "self", ",", "triples", ")", ":", "\n", "        ", "for", "_", ",", "_", ",", "rel", "in", "triples", ":", "\n", "            ", "if", "rel", "not", "in", "self", ".", "labels", ":", "\n", "                ", "self", ".", "labels", ".", "add", "(", "rel", ")", "\n", "self", ".", "tps", "[", "rel", "]", "=", "0", "\n", "self", ".", "fps", "[", "rel", "]", "=", "0", "\n", "# self.r_tns[rel] = 0", "\n", "self", ".", "fns", "[", "rel", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricRelationF1Mention.add": [[839, 861], ["python_cpn_eval.MetricRelationF1Mention.add_labels", "python_cpn_eval.MetricRelationF1Mention.add_labels", "python_cpn_eval.to_pairwise", "python_cpn_eval.to_pairwise", "python_cpn_eval.to_pairs", "python_cpn_eval.to_pairs", "len", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricRelationF1Mention.add_labels", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricRelationF1Mention.add_labels", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.to_pairwise", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.to_pairwise", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.to_pairs", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.to_pairs"], ["", "", "", "def", "add", "(", "self", ",", "pred", ",", "gold", ",", "doc_id", "=", "''", ")", ":", "\n", "        ", "self", ".", "add_labels", "(", "pred", ")", "\n", "self", ".", "add_labels", "(", "gold", ")", "\n", "\n", "P", "=", "to_pairwise", "(", "pred", ")", "\n", "G", "=", "to_pairwise", "(", "gold", ")", "\n", "\n", "for", "src_cluster", ",", "dst_cluster", ",", "rel", "in", "pred", ":", "\n", "            ", "pairs", "=", "to_pairs", "(", "src_cluster", ",", "dst_cluster", ",", "rel", ")", "\n", "if", "len", "(", "pairs", ")", ">", "0", ":", "\n", "                ", "tp", "=", "len", "(", "pairs", "&", "G", ")", "# / len(pairs)", "\n", "fp", "=", "len", "(", "pairs", ")", "-", "tp", "\n", "\n", "self", ".", "tps", "[", "rel", "]", "+=", "tp", "\n", "self", ".", "fps", "[", "rel", "]", "+=", "fp", "\n", "\n", "", "", "for", "src_cluster", ",", "dst_cluster", ",", "rel", "in", "gold", ":", "\n", "            ", "pairs", "=", "to_pairs", "(", "src_cluster", ",", "dst_cluster", ",", "rel", ")", "\n", "if", "len", "(", "pairs", ")", ">", "0", ":", "\n", "# tp = len(pairs & P) # / len(pairs)", "\n", "                ", "fn", "=", "len", "(", "pairs", ")", "-", "len", "(", "pairs", "&", "P", ")", "\n", "self", ".", "fns", "[", "rel", "]", "+=", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricRelationF1Mention.get_if_exists": [[862, 867], ["None"], "methods", ["None"], ["", "", "", "def", "get_if_exists", "(", "self", ",", "any_dict", ":", "dict", ",", "key", ",", "default", ")", ":", "\n", "        ", "if", "key", "in", "any_dict", ":", "\n", "            ", "return", "any_dict", "[", "key", "]", "\n", "", "else", ":", "\n", "            ", "return", "default", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricRelationF1Mention.update": [[868, 883], ["enumerate", "zip", "python_cpn_eval.MetricRelationF1Mention.add", "python_cpn_eval.MetricRelationF1Mention.print"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "", "def", "update", "(", "self", ",", "args", ",", "metadata", "=", "{", "}", ")", ":", "\n", "        ", "for", "batch", ",", "(", "pred", ",", "gold", ",", "identifier", ",", "tokens", ")", "in", "enumerate", "(", "\n", "zip", "(", "args", "[", "'pred'", "]", ",", "args", "[", "'gold'", "]", ",", "metadata", "[", "'identifiers'", "]", ",", "metadata", "[", "'tokens'", "]", ")", ")", ":", "\n", "            ", "if", "self", ".", "verbose", ":", "\n", "# print(\"pred:\", pred)", "\n", "# print(\"gold:\", gold)", "\n", "                ", "print", "(", "\"ID:\"", ",", "identifier", ")", "\n", "print", "(", "\"pred:\"", ",", "[", "(", "rel", ",", "captions", "(", "src", ",", "tokens", ")", ",", "captions", "(", "dst", ",", "tokens", ")", ")", "for", "src", ",", "dst", ",", "rel", "in", "pred", "]", ")", "\n", "if", "'target'", "in", "args", ":", "\n", "                    ", "print", "(", "\"target:\"", ",", "[", "(", "rel", ",", "captions", "(", "src", ",", "tokens", ")", ",", "captions", "(", "dst", ",", "tokens", ")", ")", "for", "src", ",", "dst", ",", "rel", "in", "\n", "args", "[", "'target'", "]", "[", "batch", "]", "]", ")", "\n", "", "print", "(", "\"gold:\"", ",", "[", "(", "rel", ",", "captions", "(", "src", ",", "tokens", ")", ",", "captions", "(", "dst", ",", "tokens", ")", ")", "for", "src", ",", "dst", ",", "rel", "in", "gold", "]", ")", "\n", "print", "(", ")", "\n", "\n", "", "self", ".", "add", "(", "pred", ",", "gold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricRelationF1Mention.print": [[885, 887], ["python_cpn_eval.MetricRelationF1Mention.calculate_metrics"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricRelationF1Mention.calculate_metrics"], ["", "", "def", "print", "(", "self", ")", ":", "\n", "        ", "self", ".", "calculate_metrics", "(", "must_print", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricRelationF1Mention.calculate_metrics": [[888, 925], ["python_cpn_eval.MetricRelationF1Mention.print"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "calculate_metrics", "(", "self", ",", "must_print", "=", "False", ")", ":", "\n", "        ", "total_tp", ",", "total_fp", ",", "total_fn", "=", "0", ",", "0", ",", "0", "\n", "\n", "for", "label", "in", "self", ".", "labels", ":", "\n", "            ", "tp", ",", "fp", "=", "self", ".", "tps", "[", "label", "]", ",", "self", ".", "fps", "[", "label", "]", "\n", "fn", "=", "self", ".", "fns", "[", "label", "]", "\n", "pr", "=", "tp", "/", "(", "tp", "+", "fp", ")", "if", "tp", "!=", "0", "else", "0.0", "\n", "re", "=", "tp", "/", "(", "tp", "+", "fn", ")", "if", "tp", "!=", "0", "else", "0.0", "\n", "f1", "=", "2.0", "*", "pr", "*", "re", "/", "(", "pr", "+", "re", ")", "if", "pr", "*", "re", "!=", "0.0", "else", "0.0", "\n", "\n", "if", "self", ".", "verbose", "and", "must_print", ":", "\n", "                ", "print", "(", "\n", "'{:24}    {:6.1f} / {:6.1f} = {:6.5f}    {:6.1f} / {:6.1f} = {:6.5f}    {:6.5f}'", ".", "format", "(", "label", ",", "tp", ",", "\n", "fp", ",", "pr", ",", "\n", "tp", ",", "fn", ",", "\n", "re", ",", "f1", ")", ")", "\n", "\n", "", "total_tp", "+=", "tp", "\n", "total_fp", "+=", "fp", "\n", "total_fn", "+=", "fn", "\n", "\n", "", "total_pr", "=", "total_tp", "/", "(", "total_tp", "+", "total_fp", ")", "if", "total_tp", "!=", "0", "else", "0.0", "\n", "total_re", "=", "total_tp", "/", "(", "total_tp", "+", "total_fn", ")", "if", "total_tp", "!=", "0", "else", "0.0", "\n", "total_f1", "=", "2.0", "*", "total_pr", "*", "total_re", "/", "(", "total_pr", "+", "total_re", ")", "if", "total_pr", "*", "total_re", "!=", "0.0", "else", "0.0", "\n", "\n", "if", "must_print", ":", "\n", "            ", "print", "(", "'{:24}    {:6.1f} / {:6.1f} = {:6.5f}    {:6.1f} / {:6.1f} = {:6.5f}    {:6.5f}'", ".", "format", "(", "''", ",", "total_tp", ",", "\n", "total_fp", ",", "\n", "total_pr", ",", "\n", "total_tp", ",", "\n", "total_fn", ",", "\n", "total_re", ",", "\n", "total_f1", ")", ")", "\n", "\n", "", "self", ".", "f1", "=", "total_f1", "\n", "self", ".", "pr", "=", "total_pr", "\n", "self", ".", "re", "=", "total_re", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricRelationF1Mention.get_f1": [[926, 928], ["None"], "methods", ["None"], ["", "def", "get_f1", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "f1", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricRelationF1Mention.get_pr": [[929, 931], ["None"], "methods", ["None"], ["", "def", "get_pr", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "pr", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.MetricRelationF1Mention.get_re": [[932, 934], ["None"], "methods", ["None"], ["", "def", "get_re", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "re", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.EvaluatorCPN.__init__": [[938, 957], ["python_cpn_eval.MetricF1", "python_cpn_eval.MetricF1Soft", "python_cpn_eval.MetricF1Hard", "python_cpn_eval.MetricCoref", "python_cpn_eval.MetricCoref", "python_cpn_eval.MetricCoref", "python_cpn_eval.MetricCoref", "python_cpn_eval.MetricCoref", "python_cpn_eval.MetricCoref", "python_cpn_eval.MetricCoref", "python_cpn_eval.MetricRelationF1", "python_cpn_eval.MetricRelationF1Mention", "python_cpn_eval.MetricRelationF1Hard"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "tags", "=", "MetricF1", "(", ")", "\n", "self", ".", "tags_soft", "=", "MetricF1Soft", "(", ")", "\n", "self", ".", "tags_hard", "=", "MetricF1Hard", "(", ")", "\n", "self", ".", "coref_muc", "=", "MetricCoref", "(", "'muc'", ",", "MetricCoref", ".", "muc", ")", "\n", "self", ".", "coref_bcubed", "=", "MetricCoref", "(", "'bcubed'", ",", "MetricCoref", ".", "b_cubed", ")", "\n", "self", ".", "coref_bcubed_singleton_men", "=", "MetricCoref", "(", "'bcubed singleton mention-based'", ",", "\n", "MetricCoref", ".", "b_cubed_singleton_mentions", ")", "\n", "self", ".", "coref_bcubed_singleton_ent", "=", "MetricCoref", "(", "'bcubed singleton entity-based'", ",", "\n", "MetricCoref", ".", "b_cubed_singleton_entities", ")", "\n", "\n", "self", ".", "coref_ceafe", "=", "MetricCoref", "(", "'ceafe'", ",", "MetricCoref", ".", "ceafe", ")", "\n", "self", ".", "coref_ceafe_singleton_men", "=", "MetricCoref", "(", "'ceafe-singleton mention-based'", ",", "\n", "MetricCoref", ".", "ceafe_singleton_mentions", ")", "\n", "self", ".", "coref_ceafe_singleton_ent", "=", "MetricCoref", "(", "'ceafe-singleton entity-based'", ",", "\n", "MetricCoref", ".", "ceafe_singleton_entities", ")", "\n", "self", ".", "rels", "=", "MetricRelationF1", "(", "True", ")", "\n", "self", ".", "rels_mention", "=", "MetricRelationF1Mention", "(", "True", ")", "\n", "self", ".", "rels_hard", "=", "MetricRelationF1Hard", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.EvaluatorCPN.add": [[958, 984], ["python_cpn_eval.decode_spans", "python_cpn_eval.decode_spans", "python_cpn_eval.EvaluatorCPN.tags.update", "python_cpn_eval.decode_spans_clusters", "python_cpn_eval.decode_spans_clusters", "python_cpn_eval.EvaluatorCPN.tags_soft.update", "python_cpn_eval.EvaluatorCPN.tags_hard.update", "python_cpn_eval.decode_coref", "python_cpn_eval.decode_coref", "python_cpn_eval.EvaluatorCPN.coref_muc.add", "python_cpn_eval.EvaluatorCPN.coref_bcubed.add", "python_cpn_eval.EvaluatorCPN.coref_bcubed_singleton_men.add", "python_cpn_eval.EvaluatorCPN.coref_bcubed_singleton_ent.add", "python_cpn_eval.EvaluatorCPN.coref_ceafe.add", "python_cpn_eval.EvaluatorCPN.coref_ceafe_singleton_men.add", "python_cpn_eval.EvaluatorCPN.coref_ceafe_singleton_ent.add", "python_cpn_eval.decode_relations", "python_cpn_eval.decode_relations", "python_cpn_eval.EvaluatorCPN.rels.add", "python_cpn_eval.EvaluatorCPN.rels_hard.add", "python_cpn_eval.EvaluatorCPN.rels_mention.add"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.decode_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.decode_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.update", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.decode_spans_clusters", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.decode_spans_clusters", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.update", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.update", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.decode_coref", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.decode_coref", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.decode_relations", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.decode_relations", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add"], ["", "def", "add", "(", "self", ",", "pred", ",", "gold", ")", ":", "\n", "        ", "P", "=", "decode_spans", "(", "pred", ")", "\n", "G", "=", "decode_spans", "(", "gold", ")", "\n", "self", ".", "tags", ".", "update", "(", "[", "P", "]", ",", "[", "G", "]", ")", "\n", "\n", "P_cluster", "=", "decode_spans_clusters", "(", "pred", ")", "\n", "G_cluster", "=", "decode_spans_clusters", "(", "gold", ")", "\n", "self", ".", "tags_soft", ".", "update", "(", "[", "P_cluster", "]", ",", "[", "G_cluster", "]", ")", "\n", "\n", "self", ".", "tags_hard", ".", "update", "(", "[", "P_cluster", "]", ",", "[", "G_cluster", "]", ")", "\n", "\n", "P", "=", "decode_coref", "(", "pred", ")", "\n", "G", "=", "decode_coref", "(", "gold", ")", "\n", "self", ".", "coref_muc", ".", "add", "(", "P", ",", "G", ")", "\n", "self", ".", "coref_bcubed", ".", "add", "(", "P", ",", "G", ")", "\n", "self", ".", "coref_bcubed_singleton_men", ".", "add", "(", "P", ",", "G", ")", "\n", "self", ".", "coref_bcubed_singleton_ent", ".", "add", "(", "P", ",", "G", ")", "\n", "self", ".", "coref_ceafe", ".", "add", "(", "P", ",", "G", ")", "\n", "self", ".", "coref_ceafe_singleton_men", ".", "add", "(", "P", ",", "G", ")", "\n", "self", ".", "coref_ceafe_singleton_ent", ".", "add", "(", "P", ",", "G", ")", "\n", "\n", "P", "=", "decode_relations", "(", "pred", ")", "\n", "G", "=", "decode_relations", "(", "gold", ")", "\n", "self", ".", "rels", ".", "add", "(", "P", ",", "G", ")", "\n", "self", ".", "rels_hard", ".", "add", "(", "P", ",", "G", ")", "\n", "self", ".", "rels_mention", ".", "add", "(", "P", ",", "G", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.EvaluatorCPN.printInfo": [[985, 1055], ["print", "print", "python_cpn_eval.EvaluatorCPN.tags.print", "print", "python_cpn_eval.EvaluatorCPN.tags_soft.print", "print", "print", "python_cpn_eval.EvaluatorCPN.tags_hard.print", "print", "print", "python_cpn_eval.EvaluatorCPN.coref_muc.print", "python_cpn_eval.EvaluatorCPN.coref_bcubed.print", "python_cpn_eval.EvaluatorCPN.coref_ceafe.print", "python_cpn_eval.EvaluatorCPN.coref_ceafe_singleton_ent.print", "python_cpn_eval.EvaluatorCPN.coref_ceafe_singleton_men.print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "python_cpn_eval.EvaluatorCPN.rels.print", "print", "print", "python_cpn_eval.EvaluatorCPN.rels_hard.print", "print", "print", "python_cpn_eval.EvaluatorCPN.rels_mention.print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "sum", "python_cpn_eval.EvaluatorCPN.coref_bcubed.get_pr", "python_cpn_eval.EvaluatorCPN.coref_bcubed.get_re", "python_cpn_eval.EvaluatorCPN.coref_bcubed.get_f1", "python_cpn_eval.EvaluatorCPN.coref_bcubed_singleton_men.get_pr", "python_cpn_eval.EvaluatorCPN.coref_bcubed_singleton_men.get_re", "python_cpn_eval.EvaluatorCPN.coref_bcubed_singleton_men.get_f1", "python_cpn_eval.EvaluatorCPN.coref_bcubed_singleton_ent.get_pr", "python_cpn_eval.EvaluatorCPN.coref_bcubed_singleton_ent.get_re", "python_cpn_eval.EvaluatorCPN.coref_bcubed_singleton_ent.get_f1", "python_cpn_eval.EvaluatorCPN.coref_ceafe.get_pr", "python_cpn_eval.EvaluatorCPN.coref_ceafe.get_re", "python_cpn_eval.EvaluatorCPN.coref_ceafe.get_f1", "python_cpn_eval.EvaluatorCPN.coref_ceafe_singleton_men.get_pr", "python_cpn_eval.EvaluatorCPN.coref_ceafe_singleton_men.get_re", "python_cpn_eval.EvaluatorCPN.coref_ceafe_singleton_men.get_f1", "python_cpn_eval.EvaluatorCPN.coref_ceafe_singleton_ent.get_pr", "python_cpn_eval.EvaluatorCPN.coref_ceafe_singleton_ent.get_re", "python_cpn_eval.EvaluatorCPN.coref_ceafe_singleton_ent.get_f1", "python_cpn_eval.EvaluatorCPN.tags.get_pr", "python_cpn_eval.EvaluatorCPN.tags.get_re", "python_cpn_eval.EvaluatorCPN.tags.get_f1", "python_cpn_eval.EvaluatorCPN.tags_soft.get_pr", "python_cpn_eval.EvaluatorCPN.tags_soft.get_re", "python_cpn_eval.EvaluatorCPN.tags_soft.get_f1", "python_cpn_eval.EvaluatorCPN.tags_hard.get_pr", "python_cpn_eval.EvaluatorCPN.tags_hard.get_re", "python_cpn_eval.EvaluatorCPN.tags_hard.get_f1", "python_cpn_eval.EvaluatorCPN.rels_hard.get_pr", "python_cpn_eval.EvaluatorCPN.rels_hard.get_re", "python_cpn_eval.EvaluatorCPN.rels_hard.get_f1", "python_cpn_eval.EvaluatorCPN.rels.get_pr", "python_cpn_eval.EvaluatorCPN.rels.get_re", "python_cpn_eval.EvaluatorCPN.rels.get_f1", "python_cpn_eval.EvaluatorCPN.rels_mention.get_pr", "python_cpn_eval.EvaluatorCPN.rels_mention.get_re", "python_cpn_eval.EvaluatorCPN.rels_mention.get_f1", "python_cpn_eval.EvaluatorCPN.coref_muc.get_f1", "python_cpn_eval.EvaluatorCPN.coref_bcubed.get_f1", "python_cpn_eval.EvaluatorCPN.coref_ceafe.get_f1"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.get_pr", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.get_re", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCorefAverage.get_f1", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.get_pr", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.get_re", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCorefAverage.get_f1", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.get_pr", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.get_re", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCorefAverage.get_f1", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.get_pr", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.get_re", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCorefAverage.get_f1", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.get_pr", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.get_re", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCorefAverage.get_f1", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.get_pr", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.get_re", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCorefAverage.get_f1", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.get_pr", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.get_re", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCorefAverage.get_f1", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.get_pr", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.get_re", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCorefAverage.get_f1", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.get_pr", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.get_re", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCorefAverage.get_f1", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.get_pr", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.get_re", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCorefAverage.get_f1", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.get_pr", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.get_re", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCorefAverage.get_f1", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.get_pr", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.get_re", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCorefAverage.get_f1", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCorefAverage.get_f1", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCorefAverage.get_f1", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCorefAverage.get_f1"], ["", "def", "printInfo", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"# Evalution\"", ")", "\n", "print", "(", "\"## Multilabel NER\"", ")", "\n", "self", ".", "tags", ".", "print", "(", "details", "=", "True", ")", "\n", "\n", "print", "(", "\"## Multilabel Soft NER\"", ")", "\n", "self", ".", "tags_soft", ".", "print", "(", ")", "\n", "print", "(", ")", "\n", "\n", "print", "(", "\"## Multilabel Hard NER\"", ")", "\n", "self", ".", "tags_hard", ".", "print", "(", ")", "\n", "print", "(", ")", "\n", "\n", "print", "(", "\"## Coreference\"", ")", "\n", "self", ".", "coref_muc", ".", "print", "(", ")", "\n", "self", ".", "coref_bcubed", ".", "print", "(", ")", "\n", "self", ".", "coref_ceafe", ".", "print", "(", ")", "\n", "self", ".", "coref_ceafe_singleton_ent", ".", "print", "(", ")", "\n", "self", ".", "coref_ceafe_singleton_men", ".", "print", "(", ")", "\n", "avg", "=", "sum", "(", "[", "self", ".", "coref_muc", ".", "get_f1", "(", ")", ",", "self", ".", "coref_bcubed", ".", "get_f1", "(", ")", ",", "self", ".", "coref_ceafe", ".", "get_f1", "(", ")", "]", ")", "/", "3", "\n", "print", "(", "\"coref-avg:\"", ",", "avg", ")", "\n", "print", "(", "\"coref-bcubed pr: \"", ",", "self", ".", "coref_bcubed", ".", "get_pr", "(", ")", ",", "\n", "\", re: \"", ",", "self", ".", "coref_bcubed", ".", "get_re", "(", ")", ",", "\n", "\", f1: \"", ",", "self", ".", "coref_bcubed", ".", "get_f1", "(", ")", ")", "\n", "print", "(", "\"coref-bcubed singleton men pr: \"", ",", "self", ".", "coref_bcubed_singleton_men", ".", "get_pr", "(", ")", ",", "\n", "\", re: \"", ",", "self", ".", "coref_bcubed_singleton_men", ".", "get_re", "(", ")", ",", "\n", "\", f1: \"", ",", "self", ".", "coref_bcubed_singleton_men", ".", "get_f1", "(", ")", ")", "\n", "print", "(", "\"coref-bcubed singleton ent pr: \"", ",", "self", ".", "coref_bcubed_singleton_ent", ".", "get_pr", "(", ")", ",", "\n", "\", re: \"", ",", "self", ".", "coref_bcubed_singleton_ent", ".", "get_re", "(", ")", ",", "\n", "\", f1: \"", ",", "self", ".", "coref_bcubed_singleton_ent", ".", "get_f1", "(", ")", ")", "\n", "\n", "print", "(", "\"coref-ceafe pr: \"", ",", "self", ".", "coref_ceafe", ".", "get_pr", "(", ")", ",", "\n", "\", re: \"", ",", "self", ".", "coref_ceafe", ".", "get_re", "(", ")", ",", "\n", "\", f1: \"", ",", "self", ".", "coref_ceafe", ".", "get_f1", "(", ")", ")", "\n", "print", "(", "\"coref-ceafe singleton men pr: \"", ",", "self", ".", "coref_ceafe_singleton_men", ".", "get_pr", "(", ")", ",", "\n", "\", re: \"", ",", "self", ".", "coref_ceafe_singleton_men", ".", "get_re", "(", ")", ",", "\n", "\", f1: \"", ",", "self", ".", "coref_ceafe_singleton_men", ".", "get_f1", "(", ")", ")", "\n", "print", "(", "\"coref-ceafe singleton ent pr: \"", ",", "self", ".", "coref_ceafe_singleton_ent", ".", "get_pr", "(", ")", ",", "\n", "\", re: \"", ",", "self", ".", "coref_ceafe_singleton_ent", ".", "get_re", "(", ")", ",", "\n", "\", f1: \"", ",", "self", ".", "coref_ceafe_singleton_ent", ".", "get_f1", "(", ")", ")", "\n", "\n", "print", "(", ")", "\n", "\n", "print", "(", "\"## Relations Soft Entity Cluster\"", ")", "\n", "self", ".", "rels", ".", "print", "(", ")", "\n", "print", "(", ")", "\n", "\n", "print", "(", "\"## Relations Hard Entity Cluster\"", ")", "\n", "self", ".", "rels_hard", ".", "print", "(", ")", "\n", "print", "(", ")", "\n", "\n", "print", "(", "\"## Relations Mention Based\"", ")", "\n", "self", ".", "rels_mention", ".", "print", "(", ")", "\n", "print", "(", ")", "\n", "\n", "print", "(", "'## Summary'", ")", "\n", "print", "(", "'ner pr: '", ",", "self", ".", "tags", ".", "get_pr", "(", ")", ",", "'ner re: '", ",", "self", ".", "tags", ".", "get_re", "(", ")", ",", "'ner f1: '", ",", "self", ".", "tags", ".", "get_f1", "(", ")", ")", "\n", "print", "(", "'soft ner pr: '", ",", "self", ".", "tags_soft", ".", "get_pr", "(", ")", ",", "'soft ner re:  '", ",", "self", ".", "tags_soft", ".", "get_re", "(", ")", ",", "\n", "'soft ner f1: '", ",", "self", ".", "tags_soft", ".", "get_f1", "(", ")", ")", "\n", "print", "(", "'hard ner pr: '", ",", "self", ".", "tags_hard", ".", "get_pr", "(", ")", ",", "'hard ner re:  '", ",", "self", ".", "tags_hard", ".", "get_re", "(", ")", ",", "\n", "'hard ner f1: '", ",", "self", ".", "tags_hard", ".", "get_f1", "(", ")", ")", "\n", "print", "(", "'coref: '", ",", "avg", ")", "\n", "print", "(", "'hard rel pr:  '", ",", "self", ".", "rels_hard", ".", "get_pr", "(", ")", ",", "\n", "'hard rel re: '", ",", "self", ".", "rels_hard", ".", "get_re", "(", ")", ",", "\n", "'hard rel f1: '", ",", "self", ".", "rels_hard", ".", "get_f1", "(", ")", ")", "\n", "print", "(", "'soft rel pr:  '", ",", "self", ".", "rels", ".", "get_pr", "(", ")", ",", "'soft rel re: '", ",", "self", ".", "rels", ".", "get_re", "(", ")", ",", "'soft rel f1: '", ",", "\n", "self", ".", "rels", ".", "get_f1", "(", ")", ")", "\n", "print", "(", "'rel_mentions pr:  '", ",", "self", ".", "rels_mention", ".", "get_pr", "(", ")", ",", "'rel re: '", ",", "self", ".", "rels_mention", ".", "get_re", "(", ")", ",", "\n", "'rel_mentions f1: '", ",", "self", ".", "rels_mention", ".", "get_f1", "(", ")", ")", "\n", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.load_jsonl": [[16, 21], ["open", "json.loads", "file.readlines"], "function", ["None"], ["def", "load_jsonl", "(", "filename", ",", "tag", ")", ":", "\n", "    ", "with", "open", "(", "filename", ",", "'r'", ")", "as", "file", ":", "\n", "        ", "data", "=", "[", "json", ".", "loads", "(", "line", ")", "for", "line", "in", "file", ".", "readlines", "(", ")", "]", "\n", "data", "=", "[", "x", "for", "x", "in", "data", "if", "tag", "is", "None", "or", "tag", "in", "x", "[", "'tags'", "]", "]", "\n", "return", "{", "x", "[", "'id'", "]", ":", "x", "for", "x", "in", "data", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.load_json": [[23, 27], ["open", "json.load"], "function", ["None"], ["", "", "def", "load_json", "(", "filename", ",", "tag", ")", ":", "\n", "    ", "with", "open", "(", "filename", ",", "'r'", ")", "as", "file", ":", "\n", "        ", "doc", "=", "json", ".", "load", "(", "file", ")", "\n", "return", "{", "doc", "[", "'id'", "]", ":", "doc", "}", "if", "tag", "is", "None", "or", "tag", "in", "doc", "[", "'tags'", "]", "else", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.load_data": [[29, 38], ["os.path.isdir", "os.listdir", "python_cpn_eval.load_jsonl", "os.path.join", "data.update", "python_cpn_eval.load_json"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.load_jsonl", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.update", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.load_json"], ["", "", "def", "load_data", "(", "path", ",", "tag", "=", "None", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "        ", "data", "=", "{", "}", "\n", "for", "file", "in", "os", ".", "listdir", "(", "path", ")", ":", "\n", "            ", "filename", "=", "os", ".", "path", ".", "join", "(", "path", ",", "file", ")", "\n", "data", ".", "update", "(", "load_json", "(", "filename", ",", "tag", ")", ")", "\n", "", "return", "data", "\n", "", "else", ":", "\n", "        ", "return", "load_jsonl", "(", "path", ",", "tag", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.decode_spans": [[41, 50], ["spans.append"], "function", ["None"], ["", "", "def", "decode_spans", "(", "instance", ")", ":", "\n", "    ", "spans", "=", "[", "]", "\n", "for", "mention", "in", "instance", "[", "'mentions'", "]", ":", "\n", "        ", "concept", "=", "instance", "[", "'concepts'", "]", "[", "mention", "[", "'concept'", "]", "]", "\n", "concept_tags", "=", "concept", "[", "'tags'", "]", "if", "'tags'", "in", "concept", "else", "[", "]", "\n", "tags", "=", "mention", "[", "'tags'", "]", "if", "'tags'", "in", "mention", "else", "concept_tags", "\n", "for", "tag", "in", "tags", ":", "\n", "            ", "spans", ".", "append", "(", "(", "mention", "[", "'begin'", "]", ",", "mention", "[", "'end'", "]", ",", "tag", ")", ")", "\n", "", "", "return", "spans", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.decode_spans_clusters": [[52, 67], ["dict", "enumerate", "concept_id_to_mentions[].append", "list", "spans_cluster.append", "tuple"], "function", ["None"], ["", "def", "decode_spans_clusters", "(", "instance", ")", ":", "\n", "    ", "spans_cluster", "=", "[", "]", "\n", "concept_id_to_mentions", "=", "dict", "(", ")", "\n", "for", "mention", "in", "instance", "[", "'mentions'", "]", ":", "\n", "        ", "concept_id", "=", "mention", "[", "'concept'", "]", "\n", "if", "concept_id", "not", "in", "concept_id_to_mentions", ":", "\n", "            ", "concept_id_to_mentions", "[", "concept_id", "]", "=", "list", "(", ")", "\n", "", "concept_id_to_mentions", "[", "concept_id", "]", ".", "append", "(", "(", "mention", "[", "'begin'", "]", ",", "mention", "[", "'end'", "]", ")", ")", "\n", "\n", "", "for", "concept_id", ",", "concept_info", "in", "enumerate", "(", "instance", "[", "'concepts'", "]", ")", ":", "\n", "        ", "if", "concept_id", "in", "concept_id_to_mentions", ":", "\n", "            ", "for", "curr_tag", "in", "concept_info", "[", "'tags'", "]", ":", "\n", "# spans_cluster.append((concept_id_to_mentions[concept_id], curr_tag))", "\n", "                ", "spans_cluster", ".", "append", "(", "(", "tuple", "(", "concept_id_to_mentions", "[", "concept_id", "]", ")", ",", "curr_tag", ")", ")", "\n", "", "", "", "return", "spans_cluster", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.decode_coref": [[69, 74], ["list", "concept2cluster[].append", "enumerate", "concept2cluster.values", "len"], "function", ["None"], ["", "def", "decode_coref", "(", "instance", ")", ":", "\n", "    ", "concept2cluster", "=", "{", "idx", ":", "list", "(", ")", "for", "idx", ",", "_", "in", "enumerate", "(", "instance", "[", "'concepts'", "]", ")", "}", "\n", "for", "mention", "in", "instance", "[", "'mentions'", "]", ":", "\n", "        ", "concept2cluster", "[", "mention", "[", "'concept'", "]", "]", ".", "append", "(", "(", "mention", "[", "'begin'", "]", ",", "mention", "[", "'end'", "]", ")", ")", "\n", "", "return", "[", "x", "for", "x", "in", "concept2cluster", ".", "values", "(", ")", "if", "len", "(", "x", ")", ">", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.decode_relations": [[76, 92], ["set", "list", "concept2cluster[].append", "len", "len", "print", "enumerate", "tuple", "tuple"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "decode_relations", "(", "instance", ")", ":", "\n", "    ", "concept2cluster", "=", "{", "idx", ":", "list", "(", ")", "for", "idx", ",", "_", "in", "enumerate", "(", "instance", "[", "'concepts'", "]", ")", "}", "\n", "for", "mention", "in", "instance", "[", "'mentions'", "]", ":", "\n", "        ", "concept2cluster", "[", "mention", "[", "'concept'", "]", "]", ".", "append", "(", "(", "mention", "[", "'begin'", "]", ",", "mention", "[", "'end'", "]", ")", ")", "\n", "\n", "# remove duplicate relations", "\n", "", "relations", "=", "set", "(", "[", "(", "relation", "[", "'s'", "]", ",", "relation", "[", "'p'", "]", ",", "relation", "[", "'o'", "]", ")", "for", "relation", "in", "instance", "[", "'relations'", "]", "]", ")", "\n", "\n", "if", "len", "(", "relations", ")", "!=", "len", "(", "instance", "[", "'relations'", "]", ")", ":", "\n", "        ", "print", "(", "\"WARNING: duplicate relations\"", ")", "\n", "\n", "# relations = [(concept2cluster[s], concept2cluster[o], p) for s, p, o in relations]", "\n", "# (kzaporoj) - the tuple would allow to do hard concept level comparisons, the lists can not be hashed in order to", "\n", "# do set operations later on", "\n", "", "relations", "=", "[", "(", "tuple", "(", "concept2cluster", "[", "s", "]", ")", ",", "tuple", "(", "concept2cluster", "[", "o", "]", ")", ",", "p", ")", "for", "s", ",", "p", ",", "o", "in", "relations", "]", "\n", "return", "relations", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.clusters_to_mentions": [[154, 160], ["list", "set", "list.append"], "function", ["None"], ["", "", "def", "clusters_to_mentions", "(", "cluster_spans", ")", ":", "\n", "    ", "flatten_mentions", "=", "list", "(", ")", "\n", "for", "curr_cluster", ",", "entity_type", "in", "cluster_spans", ":", "\n", "        ", "for", "curr_span", "in", "curr_cluster", ":", "\n", "            ", "flatten_mentions", ".", "append", "(", "(", "curr_span", ",", "entity_type", ")", ")", "\n", "", "", "return", "set", "(", "flatten_mentions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.cluster_to_mentions": [[162, 167], ["list", "set", "list.append"], "function", ["None"], ["", "def", "cluster_to_mentions", "(", "cluster_spans", ",", "entity_type", ")", ":", "\n", "    ", "flatten_mentions", "=", "list", "(", ")", "\n", "for", "curr_span", "in", "cluster_spans", ":", "\n", "        ", "flatten_mentions", ".", "append", "(", "(", "curr_span", ",", "entity_type", ")", ")", "\n", "", "return", "set", "(", "flatten_mentions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.mention2cluster": [[365, 372], ["tuple", "tuple"], "function", ["None"], ["", "", "def", "mention2cluster", "(", "clusters", ")", ":", "\n", "    ", "clusters", "=", "[", "tuple", "(", "tuple", "(", "m", ")", "for", "m", "in", "gc", ")", "for", "gc", "in", "clusters", "]", "\n", "mention_to_cluster", "=", "{", "}", "\n", "for", "cluster", "in", "clusters", ":", "\n", "        ", "for", "mention", "in", "cluster", ":", "\n", "            ", "mention_to_cluster", "[", "mention", "]", "=", "cluster", "\n", "", "", "return", "mention_to_cluster", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.to_pairwise": [[578, 585], ["set", "out.append"], "function", ["None"], ["", "", "def", "to_pairwise", "(", "rels", ")", ":", "\n", "    ", "out", "=", "[", "]", "\n", "for", "src_cluster", ",", "dst_cluster", ",", "rel", "in", "rels", ":", "\n", "        ", "for", "src", "in", "src_cluster", ":", "\n", "            ", "for", "dst", "in", "dst_cluster", ":", "\n", "                ", "out", ".", "append", "(", "(", "src", ",", "dst", ",", "rel", ")", ")", "\n", "", "", "", "return", "set", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.to_pairs": [[587, 593], ["set", "pairs.append"], "function", ["None"], ["", "def", "to_pairs", "(", "src_cluster", ",", "dst_cluster", ",", "rel", ")", ":", "\n", "    ", "pairs", "=", "[", "]", "\n", "for", "src", "in", "src_cluster", ":", "\n", "        ", "for", "dst", "in", "dst_cluster", ":", "\n", "            ", "pairs", ".", "append", "(", "(", "src", ",", "dst", ",", "rel", ")", ")", "\n", "", "", "return", "set", "(", "pairs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.captions": [[595, 597], ["None"], "function", ["None"], ["", "def", "captions", "(", "cluster", ",", "tokens", ")", ":", "\n", "    ", "return", "[", "' '", ".", "join", "(", "tokens", "[", "begin", ":", "(", "end", "+", "1", ")", "]", ")", "for", "begin", ",", "end", "in", "cluster", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datasets.main_aida_to_dwie_format.join_tokens": [[3, 17], ["zip", "len", "len", "len", "len"], "function", ["None"], ["def", "join_tokens", "(", "doc_tokens_begin", ",", "doc_tokens_end", ",", "doc_tokens", ")", ":", "\n", "    ", "to_ret", "=", "''", "\n", "assert", "len", "(", "doc_tokens_begin", ")", "==", "len", "(", "doc_tokens_end", ")", "\n", "assert", "len", "(", "doc_tokens_begin", ")", "==", "len", "(", "doc_tokens", ")", "\n", "last_token_end", "=", "0", "\n", "for", "curr_token", ",", "curr_begin", ",", "curr_end", "in", "zip", "(", "doc_tokens", ",", "doc_tokens_begin", ",", "doc_tokens_end", ")", ":", "\n", "# if last_token_end > 0:", "\n", "#     assert curr_begin > last_token_end", "\n", "        ", "assert", "curr_begin", "-", "last_token_end", "<=", "1", "# no more than one space allowed", "\n", "\n", "to_ret", "+=", "' '", "*", "(", "curr_begin", "-", "last_token_end", ")", "\n", "to_ret", "+=", "curr_token", "\n", "last_token_end", "=", "curr_end", "\n", "", "return", "to_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datasets.complete_corefs.join_tokens": [[5, 19], ["zip", "len", "len", "len", "len"], "function", ["None"], ["def", "join_tokens", "(", "doc_tokens_begin", ",", "doc_tokens_end", ",", "doc_tokens", ")", ":", "\n", "    ", "to_ret", "=", "''", "\n", "assert", "len", "(", "doc_tokens_begin", ")", "==", "len", "(", "doc_tokens_end", ")", "\n", "assert", "len", "(", "doc_tokens_begin", ")", "==", "len", "(", "doc_tokens", ")", "\n", "last_token_end", "=", "0", "\n", "for", "curr_token", ",", "curr_begin", ",", "curr_end", "in", "zip", "(", "doc_tokens", ",", "doc_tokens_begin", ",", "doc_tokens_end", ")", ":", "\n", "# if last_token_end > 0:", "\n", "#     assert curr_begin > last_token_end", "\n", "        ", "assert", "curr_begin", "-", "last_token_end", "<=", "1", "# no more than one space allowed", "\n", "\n", "to_ret", "+=", "' '", "*", "(", "curr_begin", "-", "last_token_end", ")", "\n", "to_ret", "+=", "curr_token", "\n", "last_token_end", "=", "curr_end", "\n", "", "return", "to_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datasets.complete_corefs.complete_with_cluster_id": [[21, 34], ["input", "int", "assigned_cluster_ids.append", "len", "len", "len", "max", "curr_l.strip", "enumerate"], "function", ["None"], ["", "def", "complete_with_cluster_id", "(", "ask_cluster_id_lines", ",", "ask_cluster_id_toks", ",", "assigned_cluster_ids", ",", "ner_type", ",", "ner_types", ")", ":", "\n", "    ", "if", "len", "(", "assigned_cluster_ids", ")", ">", "0", ":", "\n", "        ", "max_cluster_id", "=", "max", "(", "assigned_cluster_ids", ")", "+", "1", "\n", "", "else", ":", "\n", "        ", "max_cluster_id", "=", "0", "\n", "", "assert", "len", "(", "ask_cluster_id_lines", ")", "==", "len", "(", "ner_types", ")", "\n", "to_ask", "=", "' '", ".", "join", "(", "ask_cluster_id_toks", ")", "+", "'({} - new cluster: {})'", ".", "format", "(", "ner_type", ",", "max_cluster_id", ")", "\n", "cluster_id", "=", "input", "(", "to_ask", ")", "\n", "cluster_id", "=", "int", "(", "cluster_id", ")", "\n", "assigned_cluster_ids", ".", "append", "(", "cluster_id", ")", "\n", "to_ret_lines", "=", "[", "'{}\\t{}\\t{}\\n'", ".", "format", "(", "curr_l", ".", "strip", "(", ")", ",", "ner_types", "[", "idx", "]", ",", "cluster_id", ")", "\n", "for", "idx", ",", "curr_l", "in", "enumerate", "(", "ask_cluster_id_lines", ")", "]", "\n", "return", "to_ret_lines", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datasets.complete_corefs.annotate_tmp_lines": [[36, 135], ["list", "dict", "list", "print", "zip", "len", "len", "wikilink_to_cluster_id.values", "print", "curr_aida_line.split", "curr_conll_line.split", "len", "ask_cluster_id_toks.append", "complete_corefs.complete_with_cluster_id", "to_ret_lines.extend", "len", "spl_line_aida[].strip", "spl_line_conll[].strip", "list.append", "to_ret_lines.append", "len", "len", "wikilink_to_cluster_id.items", "ask_cluster_id_toks.append", "complete_corefs.complete_with_cluster_id", "to_ret_lines.extend", "list", "len", "ask_cluster_id_toks.append", "complete_corefs.complete_with_cluster_id", "to_ret_lines.extend", "ask_cluster_id_toks.append", "complete_with_cluster_id.append", "to_ret_lines.append", "len", "len", "ask_cluster_id_toks.append", "list.append", "curr_aida_line.strip", "len", "max"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datasets.complete_corefs.complete_with_cluster_id", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datasets.complete_corefs.complete_with_cluster_id", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datasets.complete_corefs.complete_with_cluster_id"], ["", "def", "annotate_tmp_lines", "(", "lines_aida", ",", "lines_conll", ",", "wikilink_to_cluster_id", ",", "wikilink_to_mentions", ")", ":", "\n", "    ", "assert", "len", "(", "lines_aida", ")", "==", "len", "(", "lines_conll", ")", "\n", "to_ret_lines", "=", "[", "]", "\n", "nil_nr", "=", "0", "\n", "caught_nil", "=", "False", "\n", "ask_cluster_id_toks", "=", "[", "]", "\n", "ask_cluster_id_lines", "=", "[", "]", "\n", "# assigned_cluster_ids = []", "\n", "assigned_cluster_ids", "=", "list", "(", "wikilink_to_cluster_id", ".", "values", "(", ")", ")", "\n", "cluster_id_to_wikilink", "=", "dict", "(", "(", "v", ",", "k", ")", "for", "k", ",", "v", "in", "wikilink_to_cluster_id", ".", "items", "(", ")", ")", "\n", "# wikilink_to_cluster_id = dict()", "\n", "ner_type", "=", "''", "\n", "ner_types", "=", "list", "(", ")", "\n", "print", "(", "'The following are cluster ids already used for wikilinks: '", ")", "\n", "for", "curr_cluster_id", "in", "assigned_cluster_ids", ":", "\n", "        ", "wiki_link", "=", "cluster_id_to_wikilink", "[", "curr_cluster_id", "]", "\n", "mentions", "=", "[", "' '", ".", "join", "(", "currm", ")", "for", "currm", "in", "wikilink_to_mentions", "[", "wiki_link", "]", "]", "\n", "mentions", "=", "'\", \"'", ".", "join", "(", "mentions", ")", "\n", "print", "(", "'{}-{}-({})'", ".", "format", "(", "curr_cluster_id", ",", "wiki_link", ",", "mentions", ")", ")", "\n", "", "for", "curr_aida_line", ",", "curr_conll_line", "in", "zip", "(", "lines_aida", ",", "lines_conll", ")", ":", "\n", "        ", "spl_line_aida", "=", "curr_aida_line", ".", "split", "(", "'\\t'", ")", "\n", "spl_line_conll", "=", "curr_conll_line", ".", "split", "(", "' '", ")", "\n", "if", "len", "(", "spl_line_aida", ")", ">=", "4", ":", "\n", "# hard check consistency AIDA vs CONLL 2003 (ALL LINKS ARE NERS)", "\n", "# assert len(spl_line_conll) >= 4 and spl_line_conll[3].strip() in CONLL_NER_TAGS", "\n", "\n", "            ", "wikilink", "=", "spl_line_aida", "[", "3", "]", ".", "strip", "(", ")", "\n", "bio_tag", "=", "spl_line_aida", "[", "1", "]", "\n", "\n", "if", "bio_tag", "==", "'B'", "and", "caught_nil", ":", "\n", "                ", "assert", "ner_type", "!=", "''", "\n", "ask_cluster_id_toks", ".", "append", "(", "\"###NL_E({})###\"", ".", "format", "(", "nil_nr", ")", ")", "\n", "ask_cluster_id_lines", "=", "complete_with_cluster_id", "(", "ask_cluster_id_lines", ",", "ask_cluster_id_toks", ",", "\n", "assigned_cluster_ids", ",", "ner_type", ",", "ner_types", ")", "\n", "to_ret_lines", ".", "extend", "(", "ask_cluster_id_lines", ")", "\n", "ask_cluster_id_lines", "=", "[", "]", "\n", "ask_cluster_id_toks", "=", "[", "]", "\n", "nil_nr", "+=", "1", "\n", "caught_nil", "=", "False", "\n", "", "if", "bio_tag", "==", "'B'", ":", "\n", "                ", "ner_types", "=", "list", "(", ")", "\n", "\n", "", "ner_type", "=", "spl_line_conll", "[", "3", "]", ".", "strip", "(", ")", "\n", "ner_types", ".", "append", "(", "ner_type", ")", "\n", "\n", "if", "bio_tag", "==", "'B'", "or", "bio_tag", "==", "'I'", ":", "\n", "# exist_link_in_this_file = True", "\n", "                ", "if", "wikilink", "==", "'--NME--'", ":", "\n", "                    ", "if", "not", "caught_nil", ":", "\n", "                        ", "ask_cluster_id_toks", ".", "append", "(", "\"###NL_B({})###\"", ".", "format", "(", "nil_nr", ")", ")", "\n", "", "ask_cluster_id_toks", ".", "append", "(", "spl_line_aida", "[", "0", "]", ")", "\n", "ask_cluster_id_lines", ".", "append", "(", "curr_aida_line", ")", "\n", "caught_nil", "=", "True", "\n", "", "else", ":", "\n", "                    ", "assert", "not", "caught_nil", "\n", "if", "wikilink", "not", "in", "wikilink_to_cluster_id", ":", "\n", "                        ", "if", "len", "(", "assigned_cluster_ids", ")", ">", "0", ":", "\n", "                            ", "wikilink_to_cluster_id", "[", "wikilink", "]", "=", "max", "(", "assigned_cluster_ids", ")", "+", "1", "\n", "", "else", ":", "\n", "                            ", "wikilink_to_cluster_id", "[", "wikilink", "]", "=", "0", "\n", "", "assigned_cluster_ids", ".", "append", "(", "wikilink_to_cluster_id", "[", "wikilink", "]", ")", "\n", "\n", "", "cluster_id", "=", "wikilink_to_cluster_id", "[", "wikilink", "]", "\n", "to_ret_lines_app", "=", "'{}\\t{}\\t{}\\n'", ".", "format", "(", "curr_aida_line", ".", "strip", "(", ")", ",", "ner_type", ",", "cluster_id", ")", "\n", "# print(to_ret_lines_app)", "\n", "to_ret_lines", ".", "append", "(", "to_ret_lines_app", ")", "\n", "", "", "", "else", ":", "\n", "            ", "if", "len", "(", "ask_cluster_id_lines", ")", ">", "0", ":", "\n", "                ", "assert", "caught_nil", "\n", "assert", "ner_type", "!=", "''", "\n", "assert", "len", "(", "ner_types", ")", "==", "len", "(", "ask_cluster_id_lines", ")", "\n", "ask_cluster_id_toks", ".", "append", "(", "\"###NL_E({})###\"", ".", "format", "(", "nil_nr", ")", ")", "\n", "ask_cluster_id_lines", "=", "complete_with_cluster_id", "(", "ask_cluster_id_lines", ",", "ask_cluster_id_toks", ",", "\n", "assigned_cluster_ids", ",", "ner_type", ",", "ner_types", ")", "\n", "to_ret_lines", ".", "extend", "(", "ask_cluster_id_lines", ")", "\n", "ask_cluster_id_lines", "=", "[", "]", "\n", "ask_cluster_id_toks", "=", "[", "]", "\n", "caught_nil", "=", "False", "\n", "nil_nr", "+=", "1", "\n", "ner_types", "=", "[", "]", "\n", "", "to_ret_lines", ".", "append", "(", "curr_aida_line", ")", "\n", "\n", "", "", "if", "len", "(", "ask_cluster_id_lines", ")", ">", "0", ":", "\n", "        ", "assert", "caught_nil", "\n", "assert", "ner_type", "!=", "''", "\n", "assert", "len", "(", "ner_types", ")", "==", "len", "(", "ask_cluster_id_lines", ")", "\n", "\n", "ask_cluster_id_toks", ".", "append", "(", "\"###NL_E({})###\"", ".", "format", "(", "nil_nr", ")", ")", "\n", "ask_cluster_id_lines", "=", "complete_with_cluster_id", "(", "ask_cluster_id_lines", ",", "ask_cluster_id_toks", ",", "\n", "assigned_cluster_ids", ",", "ner_type", ",", "ner_types", ")", "\n", "to_ret_lines", ".", "extend", "(", "ask_cluster_id_lines", ")", "\n", "# ask_cluster_id_lines = []", "\n", "# ask_cluster_id_toks = []", "\n", "# caught_nil = False", "\n", "# nil_nr += 1", "\n", "\n", "# id_cluster = input(\"Type something to test this out: \")", "\n", "# print('the cluster is ', id_cluster)", "\n", "", "return", "to_ret_lines", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datasets.find_inconsistencies_reannotated_aida.get_url": [[11, 38], ["set", "set", "range", "range"], "function", ["None"], ["def", "get_url", "(", "article_id", ")", ":", "\n", "    ", "ids_to_train", "=", "set", "(", "range", "(", "1", ",", "947", ")", ")", "\n", "# blank_url = 'http://10.10.3.23:8083/browser/overlord/051_aida/{}/viewer/viewer?start={}&monitor=&library=&' \\", "\n", "#             'tag=&q=&view=content.links'", "\n", "\n", "ids_to_testa", "=", "set", "(", "range", "(", "947", ",", "947", "+", "216", ")", ")", "\n", "# blank_url = 'http://10.10.3.23:8083/browser/overlord/051_aida/{}/viewer/viewer?start={}&monitor=&library=&' \\", "\n", "#             'tag=&q=&view=content.links'", "\n", "\n", "# ids_to_testb = set(range(947 + 216, 947 + 216 + 231))", "\n", "\n", "# set_name = ''", "\n", "# start = article_id", "\n", "if", "article_id", "in", "ids_to_train", ":", "\n", "        ", "set_name", "=", "'train'", "\n", "start", "=", "article_id", "-", "1", "\n", "", "elif", "article_id", "in", "ids_to_testa", ":", "\n", "        ", "set_name", "=", "'testa'", "\n", "start", "=", "article_id", "-", "1", "-", "946", "\n", "", "else", ":", "\n", "        ", "set_name", "=", "'testb'", "\n", "start", "=", "article_id", "-", "1", "-", "946", "-", "216", "\n", "\n", "", "to_ret_url", "=", "'http://10.10.3.23:8083/browser/overlord/051_aida/{}/viewer/viewer?start={}&monitor=&library=&'", "'tag=&q=&view=content.links'", ".", "format", "(", "set_name", ",", "start", ")", "\n", "\n", "return", "to_ret_url", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.aida_extractor.s1_corpus_extractor.save_dwie_in_jsonl": [[8, 12], ["open", "outfile.write", "json.dumps"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.write"], ["def", "save_dwie_in_jsonl", "(", "dwie_formatted", ":", "List", ",", "file_path", ":", "str", ")", ":", "\n", "    ", "with", "open", "(", "file_path", ",", "'wt'", ")", "as", "outfile", ":", "\n", "        ", "for", "curr_json", "in", "dwie_formatted", ":", "\n", "            ", "outfile", ".", "write", "(", "json", ".", "dumps", "(", "curr_json", ")", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.aida_extractor.s1_corpus_extractor.save_dwie_in_json_files": [[14, 20], ["os.path.join", "open", "json.dump"], "function", ["None"], ["", "", "", "def", "save_dwie_in_json_files", "(", "dwie_formatted", ":", "List", ",", "dir_path", ":", "str", ")", ":", "\n", "    ", "for", "curr_json", "in", "dwie_formatted", ":", "\n", "        ", "file_name", "=", "'{}.json'", ".", "format", "(", "curr_json", "[", "'id'", "]", ")", "\n", "file_path", "=", "os", ".", "path", ".", "join", "(", "dir_path", ",", "file_name", ")", "\n", "with", "open", "(", "file_path", ",", "'wt'", ")", "as", "outfile", ":", "\n", "            ", "json", ".", "dump", "(", "curr_json", ",", "outfile", ",", "indent", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.aida_extractor.s1_corpus_extractor.get_next_article": [[22, 61], ["file.read", "struct.unpack", "struct.unpack", "dict", "range", "len", "file.read", "file.read", "fieldName.decode.decode", "struct.unpack", "struct.unpack", "file.read", "file.read", "fieldValue.decode.decode", "file.read", "struct.unpack", "Exception", "file.read"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile.LineFileReader.read", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile.LineFileReader.read", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile.LineFileReader.read", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.decode", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile.LineFileReader.read", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile.LineFileReader.read", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.decode", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile.LineFileReader.read", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile.LineFileReader.read"], ["", "", "", "def", "get_next_article", "(", "file", ")", ":", "\n", "# to_ret_id = None", "\n", "    ", "to_ret_content", "=", "None", "\n", "version", "=", "file", ".", "read", "(", "4", ")", "\n", "if", "len", "(", "version", ")", "==", "0", ":", "\n", "        ", "return", "None", ",", "None", "\n", "# print('current version is ', version)", "\n", "", "unpacked_version", "=", "struct", ".", "unpack", "(", "'>i'", ",", "version", ")", "\n", "\n", "assert", "unpacked_version", "[", "0", "]", "==", "-", "3", "\n", "fields", "=", "struct", ".", "unpack", "(", "'>i'", ",", "file", ".", "read", "(", "4", ")", ")", "\n", "# print('nr of fields: ', fields[0])", "\n", "to_ret_fields", "=", "dict", "(", ")", "\n", "for", "i", "in", "range", "(", "fields", "[", "0", "]", ")", ":", "\n", "# print('processing field ', i)", "\n", "        ", "utf_length", "=", "struct", ".", "unpack", "(", "'>H'", ",", "file", ".", "read", "(", "2", ")", ")", "[", "0", "]", "\n", "fieldName", "=", "file", ".", "read", "(", "utf_length", ")", "\n", "fieldName", "=", "fieldName", ".", "decode", "(", "'utf-8'", ")", "\n", "# print('read fieldName: ', fieldName)", "\n", "curr_type", "=", "struct", ".", "unpack", "(", "'>b'", ",", "file", ".", "read", "(", "1", ")", ")", "\n", "curr_type", "=", "curr_type", "[", "0", "]", "\n", "fieldValue", "=", "None", "\n", "if", "curr_type", "==", "0", ":", "\n", "# print('curr type 0')", "\n", "            ", "size", "=", "struct", ".", "unpack", "(", "'>i'", ",", "file", ".", "read", "(", "4", ")", ")", "[", "0", "]", "\n", "fieldValue", "=", "file", ".", "read", "(", "size", ")", "\n", "fieldValue", "=", "fieldValue", ".", "decode", "(", "'utf-8'", ")", "\n", "# print('fieldValue is: ', fieldValue)", "\n", "", "elif", "curr_type", "==", "1", ":", "\n", "# print('curr type 1')", "\n", "            ", "raise", "Exception", "(", "'I don\\'t know (yet) how to read type 1!'", ")", "\n", "", "to_ret_fields", "[", "fieldName", "]", "=", "fieldValue", "\n", "\n", "", "assert", "'identifier'", "in", "to_ret_fields", "\n", "assert", "'content'", "in", "to_ret_fields", "\n", "\n", "to_ret_id", "=", "to_ret_fields", "[", "'identifier'", "]", "\n", "to_ret_content", "=", "to_ret_fields", "[", "'content'", "]", "\n", "return", "to_ret_id", ",", "to_ret_content", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.aida_extractor.s1_corpus_extractor.load_in_list": [[63, 72], ["list", "os.path.isfile", "open", "curr_line.split", "list.append", "sl.strip"], "function", ["None"], ["", "def", "load_in_list", "(", "file_path", ",", "separator", ")", ":", "\n", "    ", "to_ret_lst", "=", "list", "(", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "file_path", ")", ":", "\n", "        ", "with", "open", "(", "file_path", ")", "as", "infile", ":", "\n", "            ", "for", "curr_line", "in", "infile", ":", "\n", "                ", "splt_line", "=", "curr_line", ".", "split", "(", "separator", ")", "\n", "splt_line", "=", "[", "sl", ".", "strip", "(", ")", "for", "sl", "in", "splt_line", "]", "\n", "to_ret_lst", ".", "append", "(", "splt_line", ")", "\n", "", "", "", "return", "to_ret_lst", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.aida_extractor.s1_corpus_extractor.get_next_not_empty_line": [[75, 83], ["len", "lst_content.pop"], "function", ["None"], ["", "def", "get_next_not_empty_line", "(", "lst_content", ":", "List", ")", ":", "\n", "    ", "to_ret_line", "=", "None", "\n", "while", "len", "(", "lst_content", ")", ">", "0", ":", "\n", "        ", "curr_content", "=", "lst_content", ".", "pop", "(", "0", ")", "\n", "if", "curr_content", "[", "0", "]", "!=", "''", ":", "\n", "            ", "to_ret_line", "=", "curr_content", "\n", "break", "\n", "", "", "return", "to_ret_line", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.aida_extractor.s1_corpus_extractor.get_next_ne_line_file": [[85, 93], ["s1_corpus_extractor.parse_tsv"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.aida_extractor.s1_corpus_extractor.parse_tsv"], ["", "def", "get_next_ne_line_file", "(", "infile", ",", "separator", ")", ":", "\n", "    ", "to_ret_line", "=", "None", "\n", "for", "curr_content", "in", "infile", ":", "\n", "        ", "curr_content", "=", "parse_tsv", "(", "curr_content", ",", "separator", ")", "\n", "if", "curr_content", "[", "0", "]", "!=", "''", ":", "\n", "            ", "to_ret_line", "=", "curr_content", "\n", "break", "\n", "", "", "return", "to_ret_line", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.aida_extractor.s1_corpus_extractor.get_next_id": [[95, 103], ["len", "existent_ids.add", "existent_ids.add", "max"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add"], ["", "def", "get_next_id", "(", "existent_ids", ":", "Set", ",", "default", "=", "0", ")", ":", "\n", "    ", "if", "len", "(", "existent_ids", ")", "==", "0", ":", "\n", "        ", "existent_ids", ".", "add", "(", "default", ")", "\n", "return", "default", "\n", "", "else", ":", "\n", "        ", "next_id", "=", "max", "(", "existent_ids", ")", "+", "1", "\n", "existent_ids", ".", "add", "(", "next_id", ")", "\n", "return", "next_id", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.aida_extractor.s1_corpus_extractor.add_curr_mention": [[105, 124], ["[].add", "cpt_id_to_mentions[].append", "[].add", "list", "set"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add"], ["", "", "def", "add_curr_mention", "(", "crr_mention", ",", "crr_concept_id", ",", "cpt_id_to_concept_details", ",", "cpt_id_to_mentions", ")", ":", "\n", "    ", "if", "crr_concept_id", "not", "in", "cpt_id_to_concept_details", ":", "\n", "        ", "cpt_id_to_concept_details", "[", "crr_concept_id", "]", "=", "{", "'id'", ":", "crr_concept_id", ",", "\n", "'text'", ":", "crr_mention", "[", "'text'", "]", ",", "\n", "'type'", ":", "{", "crr_mention", "[", "'type'", "]", "}", ",", "\n", "'link'", ":", "set", "(", ")", "}", "\n", "\n", "", "if", "crr_mention", "[", "'link'", "]", "is", "not", "None", ":", "\n", "        ", "cpt_id_to_concept_details", "[", "crr_concept_id", "]", "[", "'link'", "]", ".", "add", "(", "crr_mention", "[", "'link'", "]", ")", "\n", "\n", "", "assert", "crr_mention", "[", "'type'", "]", "is", "not", "None", "\n", "cpt_id_to_concept_details", "[", "crr_concept_id", "]", "[", "'type'", "]", ".", "add", "(", "crr_mention", "[", "'type'", "]", ")", "\n", "\n", "if", "crr_concept_id", "not", "in", "cpt_id_to_mentions", ":", "\n", "        ", "cpt_id_to_mentions", "[", "crr_concept_id", "]", "=", "list", "(", ")", "\n", "\n", "", "cpt_id_to_mentions", "[", "crr_concept_id", "]", ".", "append", "(", "crr_mention", ")", "\n", "\n", "return", "concept_id_to_concept_details", ",", "cpt_id_to_mentions", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.aida_extractor.s1_corpus_extractor.parse_tsv": [[126, 130], ["content.split.split", "cnt.strip"], "function", ["None"], ["", "def", "parse_tsv", "(", "content", ",", "separator", ")", ":", "\n", "    ", "content", "=", "content", ".", "split", "(", "separator", ")", "\n", "content", "=", "[", "cnt", ".", "strip", "(", ")", "for", "cnt", "in", "content", "]", "\n", "return", "content", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.aida_extractor.s1_corpus_extractor.regroup_by_link_and_ner_type": [[132, 164], ["dict", "list", "print", "print", "print", "s1_corpus_extractor.add_curr_mention", "len", "print", "print", "len", "s1_corpus_extractor.get_next_id"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.aida_extractor.s1_corpus_extractor.add_curr_mention", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.aida_extractor.s1_corpus_extractor.get_next_id"], ["", "def", "regroup_by_link_and_ner_type", "(", "cpt_id_to_mentions", ":", "Dict", ",", "cpt_id_to_cpt_details", ":", "Dict", ",", "concept_id", ",", "all_cpts_ids", ":", "Set", ")", ":", "\n", "    ", "config_to_cpt_id", "=", "dict", "(", ")", "\n", "\n", "# print('passed mentions to re-group: ', mentions)", "\n", "mentions", "=", "cpt_id_to_mentions", "[", "concept_id", "]", "\n", "cpt_id_to_mentions", "[", "concept_id", "]", "=", "list", "(", ")", "\n", "# cpt_id_to_cpt_details[concept_id] = None", "\n", "del", "cpt_id_to_cpt_details", "[", "concept_id", "]", "\n", "print", "(", "'============================================================='", ")", "\n", "print", "(", "'regrouping: '", ",", "mentions", ")", "\n", "for", "curr_mention", "in", "mentions", ":", "\n", "        ", "if", "curr_mention", "[", "'link'", "]", "is", "not", "None", ":", "\n", "            ", "curr_type", "=", "'link'", "\n", "", "else", ":", "\n", "            ", "curr_type", "=", "curr_mention", "[", "'type'", "]", "\n", "", "if", "curr_type", "not", "in", "config_to_cpt_id", ":", "\n", "            ", "if", "len", "(", "config_to_cpt_id", ")", "==", "0", ":", "\n", "                ", "config_to_cpt_id", "[", "curr_type", "]", "=", "curr_mention", "[", "'concept'", "]", "\n", "", "else", ":", "\n", "                ", "new_cpt_id", "=", "get_next_id", "(", "all_cpts_ids", ")", "\n", "config_to_cpt_id", "[", "curr_type", "]", "=", "new_cpt_id", "\n", "curr_mention", "[", "'concept'", "]", "=", "new_cpt_id", "\n", "", "", "else", ":", "\n", "            ", "curr_mention", "[", "'concept'", "]", "=", "config_to_cpt_id", "[", "curr_type", "]", "\n", "\n", "", "cpt_id_to_cpt_details", ",", "cpt_id_to_mentions", "=", "add_curr_mention", "(", "curr_mention", ",", "curr_mention", "[", "'concept'", "]", ",", "cpt_id_to_cpt_details", ",", "cpt_id_to_mentions", ")", "\n", "", "if", "len", "(", "config_to_cpt_id", ")", ">", "1", ":", "\n", "        ", "print", "(", "'regrouped WITH changes: '", ",", "mentions", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'regrouped without changes: '", ",", "mentions", ")", "\n", "", "print", "(", "'============================================================='", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.aida_extractor.s1_corpus_extractor.get_in_dwie_format": [[166, 247], ["sum", "dict", "dict", "list", "to_ret_dwie_format[].append", "to_ret_dwie_format[].append", "list", "list", "range", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "set", "range", "sum", "to_ret_dwie_format[].append", "len", "to_ret_dwie_format[].append", "len", "cpt_id_to_mentions.keys", "len", "len", "len", "len", "len", "len", "len", "len", "cpt_id_to_mentions.values", "s1_corpus_extractor.regroup_by_link_and_ner_type", "len", "list", "len", "list", "len", "cpt_id_to_mentions.values"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.aida_extractor.s1_corpus_extractor.regroup_by_link_and_ner_type"], ["", "def", "get_in_dwie_format", "(", "curr_mentions", ",", "cpt_id_to_mentions", ",", "cpt_id_to_cpt_details", ",", "tokenization", ",", "\n", "doc_tag", ",", "doc_id", ",", "doc_raw_content", ",", "break_multiple_ner_types", "=", "True", ")", ":", "\n", "# if break_multiple_ner_types is in True, only breaks the ones coreferenced through manual annotation", "\n", "# (e.g. by using complete_corefs.py annotation), but not the ones originally coreferenced through linking", "\n", "\n", "    ", "assert", "len", "(", "cpt_id_to_mentions", ")", "==", "len", "(", "cpt_id_to_cpt_details", ")", "\n", "cnt_cpt_mens", "=", "sum", "(", "[", "len", "(", "cl", ")", "for", "cl", "in", "cpt_id_to_mentions", ".", "values", "(", ")", "]", ")", "\n", "assert", "len", "(", "curr_mentions", ")", "==", "cnt_cpt_mens", "\n", "\n", "# id = \"AIDA_{}\".format(doc_id)", "\n", "id", "=", "\"{}\"", ".", "format", "(", "doc_id", ")", "\n", "to_ret_dwie_format", "=", "dict", "(", ")", "\n", "to_ret_dwie_format", "[", "'id'", "]", "=", "id", "\n", "to_ret_dwie_format", "[", "'content'", "]", "=", "doc_raw_content", "\n", "to_ret_dwie_format", "[", "'tokenization'", "]", "=", "dict", "(", ")", "\n", "assert", "len", "(", "tokenization", "[", "'tokens'", "]", ")", "==", "len", "(", "tokenization", "[", "'begin'", "]", ")", "\n", "assert", "len", "(", "tokenization", "[", "'begin'", "]", ")", "==", "len", "(", "tokenization", "[", "'end'", "]", ")", "\n", "assert", "len", "(", "tokenization", "[", "'end'", "]", ")", "==", "len", "(", "tokenization", "[", "'sentences'", "]", ")", "\n", "\n", "to_ret_dwie_format", "[", "'tokenization'", "]", "[", "'tokens'", "]", "=", "tokenization", "[", "'tokens'", "]", "\n", "to_ret_dwie_format", "[", "'tokenization'", "]", "[", "'begin'", "]", "=", "tokenization", "[", "'begin'", "]", "\n", "to_ret_dwie_format", "[", "'tokenization'", "]", "[", "'end'", "]", "=", "tokenization", "[", "'end'", "]", "\n", "to_ret_dwie_format", "[", "'tokenization'", "]", "[", "'sentences'", "]", "=", "tokenization", "[", "'sentences'", "]", "\n", "to_ret_dwie_format", "[", "'tags'", "]", "=", "list", "(", ")", "\n", "to_ret_dwie_format", "[", "'tags'", "]", ".", "append", "(", "'all'", ")", "\n", "to_ret_dwie_format", "[", "'tags'", "]", ".", "append", "(", "doc_tag", ")", "\n", "\n", "if", "break_multiple_ner_types", ":", "\n", "        ", "nr_concepts_old", "=", "len", "(", "cpt_id_to_mentions", ")", "\n", "nr_mentions_old", "=", "len", "(", "curr_mentions", ")", "\n", "\n", "all_concept_ids", "=", "set", "(", "cpt_id_to_mentions", ".", "keys", "(", ")", ")", "\n", "for", "curr_concept_id", "in", "range", "(", "len", "(", "cpt_id_to_mentions", ")", ")", ":", "\n", "            ", "curr_concept_details", "=", "cpt_id_to_cpt_details", "[", "curr_concept_id", "]", "\n", "if", "len", "(", "curr_concept_details", "[", "'type'", "]", ")", ">=", "2", "and", "break_multiple_ner_types", ":", "\n", "# if this check fails, then we have another problem...", "\n", "# assert len(curr_concept_details['link']) > 0", "\n", "# re-groups just by link first, and then those without link groups by ner type", "\n", "# inside changes the 'concept' field in the mention", "\n", "                ", "regroup_by_link_and_ner_type", "(", "cpt_id_to_mentions", ",", "cpt_id_to_cpt_details", ",", "curr_concept_id", ",", "\n", "all_concept_ids", ")", "\n", "\n", "# just in case checks that the nr of mentions hasn't changed and that the nr of concepts is not less than", "\n", "# before", "\n", "", "", "assert", "len", "(", "cpt_id_to_mentions", ")", "==", "len", "(", "cpt_id_to_cpt_details", ")", "\n", "assert", "len", "(", "cpt_id_to_mentions", ")", ">=", "nr_concepts_old", "\n", "\n", "cnt_cpt_mens", "=", "sum", "(", "[", "len", "(", "cl", ")", "for", "cl", "in", "cpt_id_to_mentions", ".", "values", "(", ")", "]", ")", "\n", "assert", "len", "(", "curr_mentions", ")", "==", "cnt_cpt_mens", "\n", "assert", "nr_mentions_old", "==", "len", "(", "curr_mentions", ")", "\n", "\n", "", "to_ret_dwie_format", "[", "'mentions'", "]", "=", "list", "(", ")", "\n", "for", "curr_mention", "in", "curr_mentions", ":", "\n", "        ", "to_ret_dwie_format", "[", "'mentions'", "]", ".", "append", "(", "{", "\n", "'begin'", ":", "curr_mention", "[", "'begin'", "]", ",", "\n", "'end'", ":", "curr_mention", "[", "'end'", "]", ",", "\n", "'text'", ":", "curr_mention", "[", "'text'", "]", ",", "\n", "'tags'", ":", "[", "curr_mention", "[", "'type'", "]", "]", ",", "\n", "'concept'", ":", "curr_mention", "[", "'concept'", "]", "\n", "}", ")", "\n", "\n", "", "to_ret_dwie_format", "[", "'concepts'", "]", "=", "list", "(", ")", "\n", "\n", "for", "curr_concept_id", "in", "range", "(", "len", "(", "cpt_id_to_mentions", ")", ")", ":", "\n", "        ", "curr_concept_details", "=", "cpt_id_to_cpt_details", "[", "curr_concept_id", "]", "\n", "\n", "assert", "curr_concept_id", "==", "curr_concept_details", "[", "'id'", "]", "\n", "# print('curr concept details: ', curr_concept_details)", "\n", "assert", "len", "(", "curr_concept_details", "[", "'link'", "]", ")", "<=", "1", "\n", "curr_link", "=", "None", "\n", "if", "len", "(", "curr_concept_details", "[", "'link'", "]", ")", ">", "0", ":", "\n", "            ", "curr_link", "=", "list", "(", "curr_concept_details", "[", "'link'", "]", ")", "[", "0", "]", "\n", "", "to_ret_dwie_format", "[", "'concepts'", "]", ".", "append", "(", "{", "\n", "'concept'", ":", "curr_concept_id", ",", "\n", "'text'", ":", "curr_concept_details", "[", "'text'", "]", ",", "\n", "'count'", ":", "len", "(", "cpt_id_to_mentions", "[", "curr_concept_id", "]", ")", ",", "\n", "'link'", ":", "curr_link", ",", "\n", "'tags'", ":", "list", "(", "curr_concept_details", "[", "'type'", "]", ")", "\n", "}", ")", "\n", "to_ret_dwie_format", "[", "'relations'", "]", "=", "[", "]", "\n", "", "return", "to_ret_dwie_format", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.aida_extractor.s1_corpus_extractor.assert_segment_link_ner": [[249, 265], ["int", "int", "curr_mention[].replace().replace", "int", "int", "curr_mention[].replace().replace", "curr_mention[].replace", "curr_mention[].replace"], "function", ["None"], ["", "def", "assert_segment_link_ner", "(", "curr_mention", ",", "curr_conll2003_segments", ",", "curr_aida_segments", ")", ":", "\n", "# print('asserting curr_mention: ', curr_mention, ' vs ', curr_aida_segments)", "\n", "    ", "assert", "curr_mention", "[", "'begin'", "]", "==", "int", "(", "curr_conll2003_segments", "[", "0", "]", ")", "\n", "assert", "curr_mention", "[", "'end'", "]", "==", "int", "(", "curr_conll2003_segments", "[", "1", "]", ")", "\n", "assert", "curr_mention", "[", "'type'", "]", "==", "curr_conll2003_segments", "[", "2", "]", "\n", "assert", "curr_mention", "[", "'text'", "]", ".", "replace", "(", "'\\n'", ",", "'\\\\n'", ")", ".", "replace", "(", "'\\t'", ",", "'\\\\t'", ")", "==", "curr_conll2003_segments", "[", "3", "]", "\n", "\n", "assert", "curr_mention", "[", "'begin'", "]", "==", "int", "(", "curr_aida_segments", "[", "0", "]", ")", "\n", "assert", "curr_mention", "[", "'end'", "]", "==", "int", "(", "curr_aida_segments", "[", "1", "]", ")", "\n", "\n", "assert", "curr_mention", "[", "'text'", "]", ".", "replace", "(", "'\\n'", ",", "'\\\\n'", ")", ".", "replace", "(", "'\\t'", ",", "'\\\\t'", ")", "==", "curr_aida_segments", "[", "3", "]", "\n", "\n", "if", "curr_mention", "[", "'link'", "]", "is", "not", "None", ":", "\n", "        ", "assert", "curr_mention", "[", "'link'", "]", "==", "curr_aida_segments", "[", "4", "]", "\n", "", "else", ":", "\n", "        ", "assert", "curr_aida_segments", "[", "2", "]", "==", "'nill'", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.json_api.nn_processing.NNProcessing.__init__": [[11, 25], ["traintool.load_model", "loaded_model.eval", "cpn.data_reader_api.DataReaderAPI", "open", "loaded_model.load_model"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.load_model", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.load_model"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "args", ")", ":", "\n", "# load_datasets_from_config is false because the server api takes as input any text from the user, it is not bound", "\n", "# to a specific dataset", "\n", "        ", "loaded_model_dict", "=", "load_model", "(", "config", ",", "training", "=", "False", ",", "load_datasets_from_config", "=", "False", ")", "\n", "loaded_model", ":", "MyDygie3", "=", "loaded_model_dict", "[", "'model'", "]", "\n", "dictionaries", "=", "loaded_model_dict", "[", "'dictionaries'", "]", "\n", "linking_candidates", "=", "loaded_model_dict", "[", "'linking_candidates'", "]", "\n", "\n", "with", "open", "(", "args", ".", "model_path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "loaded_model", ".", "load_model", "(", "f", ",", "to_cpu", "=", "True", ",", "load_word_embeddings", "=", "False", ")", "# for now only on cpu", "\n", "\n", "", "loaded_model", ".", "eval", "(", ")", "# only eval mode", "\n", "self", ".", "loaded_model", "=", "loaded_model", "\n", "self", ".", "data_reader_api", "=", "DataReaderAPI", "(", "config", ",", "dictionaries", ",", "linking_candidates", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.json_api.nn_processing.NNProcessing.format_short": [[26, 48], ["men_to_ret.append"], "methods", ["None"], ["", "def", "format_short", "(", "self", ",", "output_json", ")", ":", "\n", "        ", "\"\"\"\n\n        :param output_json:\n        :return: example: [(0, 4, 'United_States'), (242, 9, 'Sago_Mine_disaster'), (1281, 9, 'Sago_Mine_disaster'),\n        (2173, 30, 'United_Mine_Workers'), (62, 9, 'Sago_Mine_disaster'), (371, 13, 'Sago_Mine_disaster')]\n\n        TODO: maybe also add the mention text.\n        \"\"\"", "\n", "men_to_ret", "=", "[", "]", "\n", "for", "curr_mention", "in", "output_json", "[", "'mentions'", "]", ":", "\n", "            ", "curr_concept_id", "=", "curr_mention", "[", "'concept'", "]", "\n", "pred_link", "=", "output_json", "[", "'concepts'", "]", "[", "curr_concept_id", "]", "[", "'link_pred'", "]", "\n", "# if pred_link is not None:", "\n", "#     men_to_ret.append((curr_mention['begin'], curr_mention['end'] - curr_mention['begin'],", "\n", "#                        curr_mention['text'], pred_link))", "\n", "\n", "# for now adds mention even if the link was none", "\n", "men_to_ret", ".", "append", "(", "(", "curr_mention", "[", "'begin'", "]", ",", "curr_mention", "[", "'end'", "]", "-", "curr_mention", "[", "'begin'", "]", ",", "\n", "curr_mention", "[", "'text'", "]", ",", "pred_link", ")", ")", "\n", "\n", "", "return", "men_to_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.json_api.nn_processing.NNProcessing.process": [[49, 73], ["nn_processing.NNProcessing.data_reader_api.convert", "models.coreflinker.dygie3.collate_dygie", "nn_processing.NNProcessing.loaded_model.predict", "torch.device", "nn_processing.NNProcessing.format_short"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile.LineFileWriter.convert", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.dygie3.collate_dygie", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.predict", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.json_api.nn_processing.NNProcessing.format_short"], ["", "def", "process", "(", "self", ",", "input_json", ")", ":", "\n", "# print('getting the result with the following input: ', input_json)", "\n", "        ", "read_input", "=", "self", ".", "data_reader_api", ".", "convert", "(", "input_json", ")", "\n", "# print('the read_input is: ', read_input)", "\n", "collated_input", "=", "collate_dygie", "(", "self", ".", "loaded_model", ",", "[", "read_input", "]", ",", "torch", ".", "device", "(", "settings", ".", "device", ")", ",", "collate_api", "=", "True", ")", "\n", "# print('the collated_input is: ', collated_input)", "\n", "if", "'output_config'", "not", "in", "input_json", ":", "\n", "            ", "output_config", "=", "{", "\n", "\"output_content\"", ":", "True", ",", "\n", "\"_output_content\"", ":", "\"Whether the 'content' is added to prediction json file.\"", ",", "\n", "\"output_tokens\"", ":", "True", ",", "\n", "\"_output_tokens\"", ":", "\"Whether the 'tokens' are added to prediction json file. \"", "\n", "}", "\n", "", "else", ":", "\n", "            ", "output_config", "=", "input_json", "[", "'output_config'", "]", "\n", "", "_", ",", "predictions", "=", "self", ".", "loaded_model", ".", "predict", "(", "collated_input", "[", "'inputs'", "]", ",", "collated_input", "[", "'relations'", "]", ",", "\n", "collated_input", "[", "'metadata'", "]", ",", "output_config", "=", "output_config", ")", "\n", "\n", "predictions", "=", "predictions", "[", "0", "]", "\n", "if", "'format'", "in", "input_json", ":", "\n", "            ", "json_format", "=", "input_json", "[", "'format'", "]", "\n", "if", "json_format", "==", "'short'", ":", "\n", "                ", "return", "self", ".", "format_short", "(", "predictions", ")", "\n", "", "", "return", "predictions", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.json_api.server.GetHandler.do_POST": [[19, 31], ["int", "server.GetHandler.rfile.read", "server.GetHandler.send_response", "server.GetHandler.end_headers", "server.read_json", "print", "nnprocessing.process", "print", "server.GetHandler.wfile.write", "bytes", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile.LineFileReader.read", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.json_api.server.read_json", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.transform.TransformCharacters.process", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.write"], ["    ", "def", "do_POST", "(", "self", ")", ":", "\n", "        ", "content_length", "=", "int", "(", "self", ".", "headers", "[", "'Content-Length'", "]", ")", "\n", "post_data", "=", "self", ".", "rfile", ".", "read", "(", "content_length", ")", "\n", "self", ".", "send_response", "(", "200", ")", "\n", "self", ".", "end_headers", "(", ")", "\n", "\n", "input_json", "=", "read_json", "(", "post_data", ")", "\n", "print", "(", "'processing the following input_json: '", ",", "input_json", ")", "\n", "response", "=", "nnprocessing", ".", "process", "(", "input_json", ")", "\n", "print", "(", "\"response in server.py code:\\n\"", ",", "response", ")", "\n", "self", ".", "wfile", ".", "write", "(", "bytes", "(", "json", ".", "dumps", "(", "response", ")", ",", "\"utf-8\"", ")", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.json_api.server.read_json": [[33, 36], ["json.loads", "post_data.decode"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.decode"], ["", "", "def", "read_json", "(", "post_data", ")", ":", "\n", "    ", "data", "=", "json", ".", "loads", "(", "post_data", ".", "decode", "(", "\"utf-8\"", ")", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.json_api.server._parse_args": [[38, 57], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "_parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "# parser.add_argument(\"--experiment_directory\", default=\"models/20201023-coreflinker_e2e-ap0-1\",", "\n", "parser", ".", "add_argument", "(", "\"--experiment_directory\"", ",", "default", "=", "\"config/local_tests/baseline_linking_test/\"", ",", "\n", "help", "=", "\"the directory of where the experiment is located (config, models, test.jsonl, etc.)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--config_file\"", ",", "default", "=", "\"config_server.json\"", ",", "\n", "help", "=", "\"the config file, can be also config.json, but that one can have filters for mention\"", "\n", "\"/entity embeddings which can make the embedding space quite limited \"", "\n", "\"(limited to dictionary in DWIE dataset). On the other hand, config_server.json\"", "\n", "\" should have all the 'use_filtered' set in false, among other things \"", "\n", "\"inherent to e2e server that are not clear right now and will be discovered in future...\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--port\"", ",", "default", "=", "5556", ",", "type", "=", "int", ",", "help", "=", "\"the port on which the service will be loaded\"", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "args", ".", "training_config_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "experiment_directory", ",", "args", ".", "config_file", ")", "\n", "args", ".", "model_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "experiment_directory", ",", "'last.model'", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.json_api.server.terminate": [[59, 61], ["tee.close"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.close"], ["", "def", "terminate", "(", ")", ":", "\n", "    ", "tee", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.graph.graph_register": [[8, 11], ["print"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["def", "graph_register", "(", "name", ",", "factory", ")", ":", "\n", "    ", "print", "(", "\"register\"", ",", "name", ",", "factory", ")", "\n", "graph_modules", "[", "name", "]", "=", "factory", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.graph.create_graph": [[13, 31], ["BaseException"], "function", ["None"], ["", "def", "create_graph", "(", "dim_input", ",", "dim_output", ",", "config", ")", ":", "\n", "# if config['type'] == 'simplified':", "\n", "#     return ModuleSimplified(dim_input, dim_output, config)", "\n", "# elif config['type'] == 'revff':", "\n", "#     return ModuleRevFF(dim_input, dim_output, config)", "\n", "# elif config['type'] == 'gdot':", "\n", "#     return ModuleGDot(dim_input, dim_output, config)", "\n", "# elif config['type'] == 'biaffine':", "\n", "#     return ModuleBiAffine(dim_input, dim_output, config)", "\n", "# elif config['type'] == 'iter2':", "\n", "#     return ModuleIter2(dim_input, dim_output, config)", "\n", "# elif config['type'] == 'edges':", "\n", "#     return ModuleEdges(dim_input, dim_output, config)", "\n", "# elif config['type'] in graph_modules:", "\n", "#     return graph_modules[config['type']](dim_input, dim_output, config)", "\n", "# else:", "\n", "#     raise BaseException(\"no such module:\", config['type'])", "\n", "    ", "raise", "BaseException", "(", "\"no such module:\"", ",", "config", "[", "'type'", "]", ")", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.entity_embeddings.KolitsasEntityEmbeddings.load_kolitsas_embeddings": [[15, 17], ["None"], "methods", ["None"], ["    ", "def", "load_kolitsas_embeddings", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.entity_embeddings.KolitsasEntityEmbeddings.load_kolitsas_ent_id_to_wiki_id": [[18, 30], ["open", "line.split", "int", "int", "len"], "methods", ["None"], ["", "def", "load_kolitsas_ent_id_to_wiki_id", "(", "self", ",", "ent_id_to_wiki_id_file", ",", "ent_id_to_wiki_id", ",", "offset", "=", "0", ")", ":", "\n", "# to_ret = dict()", "\n", "        ", "with", "open", "(", "ent_id_to_wiki_id_file", ")", "as", "infile", ":", "\n", "            ", "for", "line", "in", "infile", ":", "\n", "                ", "sp", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "assert", "len", "(", "sp", ")", "==", "2", "\n", "ent_id", "=", "int", "(", "sp", "[", "0", "]", ")", "\n", "wiki_id", "=", "int", "(", "sp", "[", "1", "]", ")", "\n", "# it is 0-based, this is why -1", "\n", "assert", "(", "ent_id", "-", "1", "+", "offset", ")", "not", "in", "ent_id_to_wiki_id", "\n", "ent_id_to_wiki_id", "[", "ent_id", "-", "1", "+", "offset", "]", "=", "wiki_id", "\n", "", "", "return", "ent_id_to_wiki_id", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.entity_embeddings.KolitsasEntityEmbeddings.load_kolitsas_wiki_id_to_wiki_link": [[31, 46], ["dict", "open", "line.split", "int", "sp[].strip", "wiki_link.replace.replace.replace", "len", "print"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "load_kolitsas_wiki_id_to_wiki_link", "(", "self", ")", ":", "\n", "        ", "to_ret", "=", "dict", "(", ")", "\n", "with", "open", "(", "self", ".", "wiki_id_to_wiki_link_file", ")", "as", "infile", ":", "\n", "            ", "for", "line", "in", "infile", ":", "\n", "                ", "sp", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "assert", "len", "(", "sp", ")", "==", "2", "\n", "wiki_id", "=", "int", "(", "sp", "[", "1", "]", ")", "\n", "wiki_link", "=", "sp", "[", "0", "]", ".", "strip", "(", ")", "\n", "wiki_link", "=", "wiki_link", ".", "replace", "(", "' '", ",", "'_'", ")", "\n", "if", "\"ul_Piatra_Neam\"", "in", "wiki_link", ":", "\n", "                    ", "print", "(", "'paused to debug, checking this'", ")", "\n", "", "if", "wiki_link", "not", "in", "self", ".", "dictionary", ".", "word2idx", ":", "\n", "                    ", "continue", "\n", "", "to_ret", "[", "wiki_id", "]", "=", "wiki_link", "\n", "", "", "return", "to_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.entity_embeddings.KolitsasEntityEmbeddings.load_kolitsas_wiki_id_to_wiki_link_universe": [[47, 65], ["open", "line.split", "int", "sp[].strip", "len"], "methods", ["None"], ["", "def", "load_kolitsas_wiki_id_to_wiki_link_universe", "(", "self", ",", "entities_universe_file", ",", "\n", "wiki_id_to_wiki_link", ")", ":", "\n", "# to_ret = dict()", "\n", "        ", "with", "open", "(", "entities_universe_file", ")", "as", "infile", ":", "\n", "            ", "for", "line", "in", "infile", ":", "\n", "                ", "sp", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "assert", "len", "(", "sp", ")", "==", "2", "\n", "wiki_id", "=", "int", "(", "sp", "[", "0", "]", ")", "\n", "wiki_link", "=", "sp", "[", "1", "]", ".", "strip", "(", ")", "\n", "# wiki_link = wiki_link.replace(' ', '_')", "\n", "if", "wiki_link", "not", "in", "self", ".", "dictionary", ".", "word2idx", ":", "\n", "                    ", "continue", "\n", "", "if", "wiki_id", "in", "wiki_id_to_wiki_link", ":", "\n", "# checks the match of link, but doesn't add anything", "\n", "                    ", "assert", "wiki_id_to_wiki_link", "[", "wiki_id", "]", "==", "wiki_link", "\n", "continue", "\n", "", "wiki_id_to_wiki_link", "[", "wiki_id", "]", "=", "wiki_link", "\n", "", "", "return", "wiki_id_to_wiki_link", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.entity_embeddings.KolitsasEntityEmbeddings.load_kolitsas_embeddings_random_unknowns": [[66, 171], ["psutil.Process", "numpy.load", "print", "dict", "entity_embeddings.KolitsasEntityEmbeddings.load_kolitsas_ent_id_to_wiki_id", "print", "entity_embeddings.KolitsasEntityEmbeddings.load_kolitsas_wiki_id_to_wiki_link", "print", "entity_embeddings.KolitsasEntityEmbeddings.load_kolitsas_wiki_id_to_wiki_link_universe", "print", "enumerate", "print", "accept.values", "numpy.asarray", "print", "print", "numpy.mean", "numpy.std", "math.isnan", "math.isnan", "torch.FloatTensor().normal_", "found.items", "torch.FloatTensor().normal_.mean().item", "torch.FloatTensor().normal_.std().item", "print", "print", "print", "print", "print", "print", "os.getpid", "numpy.load", "entity_embeddings.KolitsasEntityEmbeddings.load_kolitsas_ent_id_to_wiki_id", "print", "numpy.vstack", "print", "entity_embeddings.KolitsasEntityEmbeddings.load_kolitsas_wiki_id_to_wiki_link_universe", "print", "list", "torch.FloatTensor", "torch.linalg.norm", "print", "found.values", "torch.FloatTensor", "torch.linalg.norm", "torch.FloatTensor().normal_.mean", "torch.FloatTensor().normal_.std", "len", "len", "len", "len", "len", "print", "entity_embeddings.KolitsasEntityEmbeddings.dictionary.get", "len", "len", "len", "psutil.Process.memory_info", "psutil.Process.memory_info", "psutil.Process.memory_info", "psutil.Process.memory_info", "psutil.Process.memory_info", "psutil.Process.memory_info", "psutil.Process.memory_info", "psutil.Process.memory_info", "psutil.Process.memory_info", "psutil.Process.memory_info"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.entity_embeddings.KolitsasEntityEmbeddings.load_kolitsas_ent_id_to_wiki_id", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.entity_embeddings.KolitsasEntityEmbeddings.load_kolitsas_wiki_id_to_wiki_link", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.entity_embeddings.KolitsasEntityEmbeddings.load_kolitsas_wiki_id_to_wiki_link_universe", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.entity_embeddings.KolitsasEntityEmbeddings.load_kolitsas_ent_id_to_wiki_id", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.entity_embeddings.KolitsasEntityEmbeddings.load_kolitsas_wiki_id_to_wiki_link_universe", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get"], ["", "def", "load_kolitsas_embeddings_random_unknowns", "(", "self", ")", ":", "\n", "# entity_embeddings_nparray = np.load(config.base_folder + \"data/entities/ent_vecs/ent_vecs.npy\")", "\n", "        ", "process", "=", "psutil", ".", "Process", "(", "os", ".", "getpid", "(", ")", ")", "\n", "\n", "entity_embeddings_nparray", "=", "np", ".", "load", "(", "self", ".", "embed_file", ")", "\n", "print", "(", "'kolitsas emb used mem 1: '", ",", "process", ".", "memory_info", "(", ")", ".", "rss", "/", "1024", "/", "1024", "/", "1024", ")", "\n", "\n", "entity_embeddings_nparray", "[", "0", "]", "=", "0", "\n", "# if hasattr(args, 'entity_extension') and args.entity_extension is not None:", "\n", "ent_id_to_wiki_id", "=", "dict", "(", ")", "\n", "ent_id_to_wiki_id", "=", "self", ".", "load_kolitsas_ent_id_to_wiki_id", "(", "self", ".", "ent_id_to_wiki_id_file", ",", "ent_id_to_wiki_id", ",", "\n", "offset", "=", "0", ")", "\n", "\n", "print", "(", "'kolitsas emb used mem 2: '", ",", "process", ".", "memory_info", "(", ")", ".", "rss", "/", "1024", "/", "1024", "/", "1024", ")", "\n", "\n", "wiki_id_to_wiki_link", "=", "self", ".", "load_kolitsas_wiki_id_to_wiki_link", "(", ")", "\n", "\n", "print", "(", "'kolitsas emb used mem 3: '", ",", "process", ".", "memory_info", "(", ")", ".", "rss", "/", "1024", "/", "1024", "/", "1024", ")", "\n", "\n", "if", "self", ".", "load_extension", ":", "\n", "            ", "entity_extension", "=", "np", ".", "load", "(", "self", ".", "extension_embed_file", ")", "\n", "ent_id_to_wiki_id", "=", "self", ".", "load_kolitsas_ent_id_to_wiki_id", "(", "self", ".", "extension_ent_id_to_wiki_id_file", ",", "\n", "ent_id_to_wiki_id", ",", "\n", "offset", "=", "len", "(", "ent_id_to_wiki_id", ")", ")", "\n", "\n", "print", "(", "'kolitsas emb used mem 4: '", ",", "process", ".", "memory_info", "(", ")", ".", "rss", "/", "1024", "/", "1024", "/", "1024", ")", "\n", "# entity_extension = np.load(config.base_folder + \"data/entities/\" + args.entity_extension +", "\n", "#                            \"/ent_vecs/ent_vecs.npy\")", "\n", "entity_embeddings_nparray", "=", "np", ".", "vstack", "(", "(", "entity_embeddings_nparray", ",", "entity_extension", ")", ")", "\n", "print", "(", "'kolitsas emb used mem 5: '", ",", "process", ".", "memory_info", "(", ")", ".", "rss", "/", "1024", "/", "1024", "/", "1024", ")", "\n", "\n", "", "wiki_id_to_wiki_link", "=", "self", ".", "load_kolitsas_wiki_id_to_wiki_link_universe", "(", "self", ".", "entities_universe_file", ",", "\n", "wiki_id_to_wiki_link", ")", "\n", "\n", "print", "(", "'kolitsas emb used mem 6: '", ",", "process", ".", "memory_info", "(", ")", ".", "rss", "/", "1024", "/", "1024", "/", "1024", ")", "\n", "\n", "if", "self", ".", "load_extension", ":", "\n", "            ", "wiki_id_to_wiki_link", "=", "self", ".", "load_kolitsas_wiki_id_to_wiki_link_universe", "(", "self", ".", "extension_entities_universe_file", ",", "\n", "wiki_id_to_wiki_link", ")", "\n", "\n", "print", "(", "'kolitsas emb used mem 7: '", ",", "process", ".", "memory_info", "(", ")", ".", "rss", "/", "1024", "/", "1024", "/", "1024", ")", "\n", "\n", "", "accept", "=", "self", ".", "dictionary", ".", "word2idx", "\n", "found", "=", "{", "}", "\n", "for", "idx", ",", "entity_embedding", "in", "enumerate", "(", "entity_embeddings_nparray", ")", ":", "\n", "            ", "wiki_id", "=", "ent_id_to_wiki_id", "[", "idx", "]", "\n", "wiki_link", "=", "None", "\n", "if", "wiki_id", "in", "wiki_id_to_wiki_link", ":", "\n", "                ", "wiki_link", "=", "wiki_id_to_wiki_link", "[", "wiki_id", "]", "\n", "# else:", "\n", "#     print('WARN: no wiki id for ', idx)", "\n", "# print('idx: ', idx, ' wiki_id: ', wiki_id, ' wiki_link: ', wiki_link)", "\n", "", "if", "wiki_link", "in", "accept", ":", "\n", "                ", "if", "\"ul_Piatra_Neam\"", "in", "wiki_link", ":", "\n", "                    ", "print", "(", "'paused 2 to debug, checking this'", ")", "\n", "# print('wiki link in dictionary: ', wiki_link)", "\n", "", "found", "[", "accept", "[", "wiki_link", "]", "]", "=", "entity_embedding", "\n", "\n", "", "", "print", "(", "'kolitsas emb used mem 8: '", ",", "process", ".", "memory_info", "(", ")", ".", "rss", "/", "1024", "/", "1024", "/", "1024", ")", "\n", "\n", "# BEGIN: the following loop for debugging purposes only to understand better what links are missed", "\n", "for", "wiki_link_id", "in", "accept", ".", "values", "(", ")", ":", "\n", "            ", "if", "wiki_link_id", "not", "in", "found", ":", "\n", "                ", "print", "(", "'following wiki link was not found: '", ",", "self", ".", "dictionary", ".", "get", "(", "wiki_link_id", ")", ")", "\n", "# END: the following loop for debugging purposes only to understand better what links are missed", "\n", "\n", "", "", "all_embeddings", "=", "np", ".", "asarray", "(", "list", "(", "found", ".", "values", "(", ")", ")", ")", "\n", "\n", "print", "(", "'kolitsas emb used mem 9: '", ",", "process", ".", "memory_info", "(", ")", ".", "rss", "/", "1024", "/", "1024", "/", "1024", ")", "\n", "\n", "# print('nr of lines in file: ', nr_lines_file)", "\n", "print", "(", "'shape of all_embeddings: '", ",", "all_embeddings", ".", "shape", ")", "\n", "embeddings_mean", "=", "np", ".", "mean", "(", "all_embeddings", ")", "\n", "embeddings_std", "=", "np", ".", "std", "(", "all_embeddings", ")", "\n", "\n", "# kzaporoj - in case of the mean and/or std come on nan", "\n", "if", "math", ".", "isnan", "(", "embeddings_mean", ")", ":", "\n", "            ", "embeddings_mean", "=", "0.0", "\n", "\n", "", "if", "math", ".", "isnan", "(", "embeddings_std", ")", ":", "\n", "            ", "embeddings_std", "=", "0.5", "\n", "\n", "", "embeddings", "=", "torch", ".", "FloatTensor", "(", "len", "(", "accept", ")", ",", "self", ".", "dim", ")", ".", "normal_", "(", "\n", "embeddings_mean", ",", "embeddings_std", "\n", ")", "\n", "for", "key", ",", "value", "in", "found", ".", "items", "(", ")", ":", "\n", "            ", "embeddings", "[", "key", "]", "=", "torch", ".", "FloatTensor", "(", "value", ")", "\n", "\n", "", "if", "self", ".", "refit_ratio", "is", "not", "None", ":", "\n", "            ", "embeddings", "=", "embeddings", "*", "self", ".", "refit_ratio", "\n", "\n", "", "if", "self", ".", "norm_clip", "is", "not", "None", ":", "\n", "            ", "embeddings", "=", "(", "self", ".", "norm_clip", "*", "embeddings", ")", "/", "torch", ".", "linalg", ".", "norm", "(", "embeddings", ")", "\n", "\n", "", "embeddings_mean", "=", "embeddings", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "embeddings_std", "=", "embeddings", ".", "std", "(", ")", ".", "item", "(", ")", "\n", "print", "(", "'kolitsas emb used mem 10: '", ",", "process", ".", "memory_info", "(", ")", ".", "rss", "/", "1024", "/", "1024", "/", "1024", ")", "\n", "\n", "print", "(", "'found: {} / {} = {}'", ".", "format", "(", "len", "(", "found", ")", ",", "len", "(", "accept", ")", ",", "len", "(", "found", ")", "/", "len", "(", "accept", ")", ")", ")", "\n", "print", "(", "'words/embedding entries randomly initialized: '", ",", "len", "(", "accept", ")", "-", "len", "(", "found", ")", ")", "\n", "print", "(", "'the embeddings norm is: '", ",", "torch", ".", "linalg", ".", "norm", "(", "embeddings", ")", ")", "\n", "print", "(", "'the embeddings mean is: '", ",", "embeddings_mean", ")", "\n", "print", "(", "'the embeddings std is: '", ",", "embeddings_std", ")", "\n", "\n", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.entity_embeddings.KolitsasEntityEmbeddings.__init__": [[172, 207], ["torch.nn.Module.__init__", "torch.nn.Dropout", "config.get", "entity_embeddings.KolitsasEntityEmbeddings.load_embeddings", "entity_embeddings.KolitsasEntityEmbeddings.embed.weight.norm", "print", "print", "entity_embeddings.KolitsasEntityEmbeddings.min().item", "entity_embeddings.KolitsasEntityEmbeddings.max().item", "entity_embeddings.KolitsasEntityEmbeddings.mean().item", "entity_embeddings.KolitsasEntityEmbeddings.min", "entity_embeddings.KolitsasEntityEmbeddings.max", "entity_embeddings.KolitsasEntityEmbeddings.mean"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.text_field.TextFieldEmbedderTokens.load_embeddings", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "__init__", "(", "self", ",", "dictionaries", ",", "config", ")", ":", "\n", "        ", "super", "(", "KolitsasEntityEmbeddings", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dictionary", ":", "Dictionary", "=", "dictionaries", "[", "config", "[", "'dict'", "]", "]", "\n", "self", ".", "dim", "=", "config", "[", "'dim'", "]", "\n", "# self.embed = nn.Embedding(self.dictionary.size, self.dim)", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", "[", "'dropout'", "]", ",", "inplace", "=", "True", ")", "\n", "self", ".", "normalize", "=", "'norm'", "in", "config", "\n", "self", ".", "freeze", "=", "config", ".", "get", "(", "'freeze'", ",", "False", ")", "\n", "\n", "# if 'embed_file' in config:", "\n", "# self.init_unknown = config['init_unknown']", "\n", "# self.init_random = config['init_random']", "\n", "# self.use_filtered = config['use_filtered']", "\n", "# self.filtered_file = config['filtered_file']", "\n", "self", ".", "embed_file", "=", "config", "[", "'embed_file'", "]", "\n", "self", ".", "extension_embed_file", "=", "config", "[", "'extension_embed_file'", "]", "\n", "self", ".", "extension_ent_id_to_wiki_id_file", "=", "config", "[", "'extension_ent_id_to_wiki_id_file'", "]", "\n", "self", ".", "what_load", "=", "config", "[", "'what_load'", "]", "\n", "self", ".", "load_extension", "=", "config", "[", "'load_extension'", "]", "\n", "self", ".", "ent_id_to_wiki_id_file", "=", "config", "[", "'ent_id_to_wiki_id_file'", "]", "\n", "self", ".", "wiki_id_to_wiki_link_file", "=", "config", "[", "'wiki_id_to_wiki_link_file'", "]", "\n", "self", ".", "entities_universe_file", "=", "config", "[", "'entities_universe_file'", "]", "\n", "self", ".", "extension_entities_universe_file", "=", "config", "[", "'extension_entities_universe_file'", "]", "\n", "self", ".", "refit_ratio", "=", "config", "[", "'refit_ratio'", "]", "\n", "self", ".", "norm_clip", "=", "config", "[", "'norm_clip'", "]", "\n", "# self.nr_failure_retries = 0", "\n", "\n", "self", ".", "load_embeddings", "(", "0", ")", "\n", "\n", "if", "self", ".", "dictionary", ".", "size", "==", "0", ":", "\n", "            ", "print", "(", "\"WARNING: empty dictionary\"", ")", "\n", "return", "\n", "\n", "", "nrms", "=", "self", ".", "embed", ".", "weight", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "print", "(", "\"norms: min={} max={} avg={}\"", ".", "format", "(", "nrms", ".", "min", "(", ")", ".", "item", "(", ")", ",", "nrms", ".", "max", "(", ")", ".", "item", "(", ")", ",", "nrms", ".", "mean", "(", ")", ".", "item", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.entity_embeddings.KolitsasEntityEmbeddings.load_embeddings": [[208, 264], ["psutil.Process", "print", "entity_embeddings.KolitsasEntityEmbeddings.KolitsasEntityEmbeddings.load_kolitsas_embeddings_random_unknowns", "print", "torch.nn.Embedding().to", "entity_embeddings.KolitsasEntityEmbeddings.KolitsasEntityEmbeddings.embed.weight.data.copy_", "os.getpid", "numpy.einsum", "numpy.sqrt", "torch.nn.Embedding", "psutil.Process.memory_info", "psutil.Process.memory_info"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.entity_embeddings.KolitsasEntityEmbeddings.load_kolitsas_embeddings_random_unknowns", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "load_embeddings", "(", "self", ",", "retry", "=", "0", ")", ":", "\n", "# try:", "\n", "        ", "process", "=", "psutil", ".", "Process", "(", "os", ".", "getpid", "(", ")", ")", "\n", "# print(process.memory_info().rss)  # in bytes", "\n", "\n", "print", "(", "'starting loading kolitsas entity embeddings, used memory: '", ",", "\n", "process", ".", "memory_info", "(", ")", ".", "rss", "/", "1024", "/", "1024", "/", "1024", ")", "\n", "entity_embeddings", "=", "self", ".", "load_kolitsas_embeddings_random_unknowns", "(", ")", "\n", "\n", "print", "(", "'starting loading kolitsas entity embeddings, used memory: '", ",", "\n", "process", ".", "memory_info", "(", ")", ".", "rss", "/", "1024", "/", "1024", "/", "1024", ")", "\n", "\n", "# print('kolitsas entity emebddings loaded')", "\n", "# except OSError as exept:", "\n", "#     if retry < 10:", "\n", "#         print('following exept in load_embeddings: ', exept.strerror)", "\n", "#         sleep(random.randint(5, 10))", "\n", "#         self.load_embeddings(retry=retry)", "\n", "#         return", "\n", "#     else:", "\n", "#         print('NO MORE RETRIES LEFT, FAILING in load_embeddings')", "\n", "#         raise exept", "\n", "#", "\n", "# else:", "\n", "#     unknown_vec = np.ones((self.dim)) / np.sqrt(self.dim) if self.init_unknown else None", "\n", "#", "\n", "#     try:", "\n", "#         word_vectors = self.load_kolitsas_embeddings()", "\n", "#         # word_vectors = self.load_kolitsas_embeddings(filename, dictionary=self.dictionary, dim=self.dim,", "\n", "#         #                                              out_of_voc_vector=unknown_vec,", "\n", "#         #                                              filtered_file=filtered_file, use_filtered=use_filtered,", "\n", "#         #                                              what_load=what_load, load_type=load_type)", "\n", "#     except OSError as exept:", "\n", "#         if retry < 10:", "\n", "#             print('following exept in load_embeddings: ', exept.strerror)", "\n", "#             sleep(random.randint(5, 10))", "\n", "#             self.load_embeddings(filename, filtered_file=filtered_file, use_filtered=use_filtered,", "\n", "#                                  retry=retry + 1, what_load=what_load, load_type=load_type)", "\n", "#             return", "\n", "#         else:", "\n", "#             print('NO MORE RETRIES LEFT, FAILING in load_embeddings')", "\n", "#             raise exept", "\n", "\n", "if", "self", ".", "normalize", ":", "\n", "            ", "norms", "=", "np", ".", "einsum", "(", "'ij,ij->i'", ",", "entity_embeddings", ",", "entity_embeddings", ")", "\n", "np", ".", "sqrt", "(", "norms", ",", "norms", ")", "\n", "norms", "+=", "1e-8", "\n", "entity_embeddings", "/=", "norms", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "\n", "# embeddings = torch.from_numpy(entity_embeddings)", "\n", "\n", "# device = next(self.embed.parameters()).device", "\n", "# self.embed = nn.Embedding(self.dictionary.size, self.dim).to(device)", "\n", "", "self", ".", "embed", "=", "nn", ".", "Embedding", "(", "self", ".", "dictionary", ".", "size", ",", "self", ".", "dim", ")", ".", "to", "(", "settings", ".", "device", ")", "\n", "self", ".", "embed", ".", "weight", ".", "data", ".", "copy_", "(", "entity_embeddings", ")", "\n", "self", ".", "embed", ".", "weight", ".", "requires_grad", "=", "not", "self", ".", "freeze", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.entity_embeddings.KolitsasEntityEmbeddings.forward": [[265, 267], ["entity_embeddings.KolitsasEntityEmbeddings.dropout", "entity_embeddings.KolitsasEntityEmbeddings.embed"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.dropout"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "return", "self", ".", "dropout", "(", "self", ".", "embed", "(", "inputs", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test2.SelfAttention.__init__": [[10, 20], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_input", ",", "config", ")", ":", "\n", "        ", "super", "(", "SelfAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_heads", "=", "config", "[", "'num_heads'", "]", "\n", "self", ".", "dim_heads", "=", "config", "[", "'dim_heads'", "]", "\n", "self", ".", "dim", "=", "self", ".", "num_heads", "*", "self", ".", "dim_heads", "\n", "\n", "self", ".", "query", "=", "nn", ".", "Linear", "(", "dim_input", ",", "self", ".", "dim", ")", "\n", "self", ".", "key", "=", "nn", ".", "Linear", "(", "dim_input", ",", "self", ".", "dim", ")", "\n", "self", ".", "value", "=", "nn", ".", "Linear", "(", "dim_input", ",", "self", ".", "dim", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", "[", "\"att_dropout\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test2.SelfAttention.transpose_for_scores": [[21, 25], ["x.view.view.view", "x.view.view.permute", "x.view.view.size"], "methods", ["None"], ["", "def", "transpose_for_scores", "(", "self", ",", "x", ")", ":", "\n", "        ", "new_x_shape", "=", "x", ".", "size", "(", ")", "[", ":", "-", "1", "]", "+", "(", "self", ".", "num_heads", ",", "self", ".", "dim_heads", ")", "\n", "x", "=", "x", ".", "view", "(", "*", "new_x_shape", ")", "\n", "return", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test2.SelfAttention.forward": [[26, 55], ["test2.SelfAttention.query", "test2.SelfAttention.key", "test2.SelfAttention.value", "test2.SelfAttention.transpose_for_scores", "test2.SelfAttention.transpose_for_scores", "test2.SelfAttention.transpose_for_scores", "print", "print", "print", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "test2.SelfAttention.dropout", "print", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "print", "context_layer.view.view.permute().contiguous", "print", "context_layer.view.view.view", "test2.SelfAttention.size", "test2.SelfAttention.size", "test2.SelfAttention.size", "test2.SelfAttention.transpose", "math.sqrt", "torch.Softmax", "torch.Softmax", "torch.Softmax", "test2.SelfAttention.size", "context_layer.view.view.size", "context_layer.view.view.size", "context_layer.view.view.permute", "context_layer.view.view.size"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test1.MySelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test1.MySelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test1.MySelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.dropout", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "q", "=", "self", ".", "query", "(", "inputs", ")", "\n", "k", "=", "self", ".", "key", "(", "inputs", ")", "\n", "v", "=", "self", ".", "value", "(", "inputs", ")", "\n", "\n", "q", "=", "self", ".", "transpose_for_scores", "(", "q", ")", "\n", "k", "=", "self", ".", "transpose_for_scores", "(", "k", ")", "\n", "v", "=", "self", ".", "transpose_for_scores", "(", "v", ")", "\n", "\n", "print", "(", "'selfq:'", ",", "q", ".", "size", "(", ")", ")", "\n", "print", "(", "'selfq:'", ",", "k", ".", "size", "(", ")", ")", "\n", "print", "(", "'selfq:'", ",", "v", ".", "size", "(", ")", ")", "\n", "\n", "attention_scores", "=", "torch", ".", "matmul", "(", "q", ",", "k", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "attention_scores", "=", "attention_scores", "/", "math", ".", "sqrt", "(", "self", ".", "dim_heads", ")", "\n", "\n", "attention_probs", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "(", "attention_scores", ")", "\n", "\n", "attention_probs", "=", "self", ".", "dropout", "(", "attention_probs", ")", "\n", "\n", "print", "(", "'probs:'", ",", "attention_probs", ".", "size", "(", ")", ")", "\n", "\n", "context_layer", "=", "torch", ".", "matmul", "(", "attention_probs", ",", "v", ")", "\n", "print", "(", "'conext:'", ",", "context_layer", ".", "size", "(", ")", ")", "\n", "context_layer", "=", "context_layer", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "print", "(", "'conext:'", ",", "context_layer", ".", "size", "(", ")", ")", "\n", "new_context_layer_shape", "=", "context_layer", ".", "size", "(", ")", "[", ":", "-", "2", "]", "+", "(", "self", ".", "dim", ",", ")", "\n", "context_layer", "=", "context_layer", ".", "view", "(", "*", "new_context_layer_shape", ")", "\n", "return", "context_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test2.MyAttention.__init__": [[58, 71], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Embedding", "torch.Embedding", "torch.Embedding"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_input", ",", "config", ")", ":", "\n", "        ", "super", "(", "MyAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "w1", "=", "7", "\n", "self", ".", "w2", "=", "2", "*", "self", ".", "w1", "+", "1", "\n", "self", ".", "dim_input", "=", "dim_input", "\n", "self", ".", "num_heads", "=", "4", "\n", "self", ".", "dim_heads", "=", "64", "\n", "self", ".", "dim_output", "=", "self", ".", "num_heads", "*", "self", ".", "dim_heads", "\n", "self", ".", "query", "=", "nn", ".", "Linear", "(", "self", ".", "dim_input", ",", "4", "*", "64", ")", "\n", "self", ".", "key", "=", "nn", ".", "Linear", "(", "self", ".", "dim_input", ",", "4", "*", "64", ")", "\n", "self", ".", "value", "=", "nn", ".", "Linear", "(", "self", ".", "dim_input", ",", "4", "*", "64", ")", "\n", "# self.test = SelfAttention(114, config)", "\n", "self", ".", "position_embeddings", "=", "nn", ".", "Embedding", "(", "self", ".", "w2", ",", "self", ".", "dim_input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test2.MyAttention.transpose_for_scores": [[72, 76], ["x.view.view.view", "x.view.view.permute", "x.view.view.size"], "methods", ["None"], ["", "def", "transpose_for_scores", "(", "self", ",", "x", ")", ":", "\n", "        ", "new_x_shape", "=", "x", ".", "size", "(", ")", "[", ":", "-", "1", "]", "+", "(", "self", ".", "num_heads", ",", "self", ".", "dim_heads", ")", "\n", "x", "=", "x", ".", "view", "(", "*", "new_x_shape", ")", "\n", "return", "x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test2.MyAttention.forward": [[77, 107], ["torch.pad", "torch.pad", "torch.pad", "window.unfold().permute.unfold().permute.unfold().permute", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "test2.MyAttention.position_embeddings", "test2.MyAttention.query().unsqueeze", "test2.MyAttention.query", "test2.MyAttention.value", "test2.MyAttention.transpose_for_scores", "test2.MyAttention.transpose_for_scores", "test2.MyAttention.transpose_for_scores", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "context.view.view.view", "test2.MyAttention.transpose", "window.unfold().permute.unfold().permute.unfold", "test2.MyAttention.query", "context.view.view.size"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test1.MySelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test1.MySelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test1.MySelfAttention.transpose_for_scores"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "# print('before:', inputs.size())", "\n", "\n", "# self.test(inputs)", "\n", "        ", "window", "=", "F", ".", "pad", "(", "inputs", ",", "(", "0", ",", "0", ",", "self", ".", "w1", ",", "self", ".", "w1", ")", ",", "\"constant\"", ",", "0", ")", "\n", "window", "=", "window", ".", "unfold", "(", "1", ",", "self", ".", "w2", ",", "1", ")", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ")", "\n", "\n", "position_ids", "=", "torch", ".", "arange", "(", "self", ".", "w2", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "inputs", ".", "device", ")", "\n", "position_embeddings", "=", "self", ".", "position_embeddings", "(", "position_ids", ")", "\n", "window", "=", "window", "+", "position_embeddings", "\n", "\n", "q", "=", "self", ".", "query", "(", "inputs", ")", ".", "unsqueeze", "(", "2", ")", "\n", "k", "=", "self", ".", "query", "(", "window", ")", "\n", "v", "=", "self", ".", "value", "(", "window", ")", "\n", "\n", "q", "=", "self", ".", "transpose_for_scores", "(", "q", ")", "\n", "k", "=", "self", ".", "transpose_for_scores", "(", "k", ")", "\n", "v", "=", "self", ".", "transpose_for_scores", "(", "v", ")", "\n", "\n", "# print('q:', q.size())", "\n", "# print('k:', k.size())", "\n", "# print('v:', v.size())", "\n", "\n", "scores", "=", "torch", ".", "matmul", "(", "q", ",", "k", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "probs", "=", "scores", "\n", "context", "=", "torch", ".", "matmul", "(", "probs", ",", "v", ")", "\n", "new_shape", "=", "context", ".", "size", "(", ")", "[", "0", ":", "-", "3", "]", "+", "(", "self", ".", "dim_output", ",", ")", "\n", "context", "=", "context", ".", "view", "(", "new_shape", ")", "\n", "\n", "return", "context", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test2.MyLayerNorm.__init__": [[110, 115], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_size", ",", "eps", "=", "1e-12", ")", ":", "\n", "        ", "super", "(", "MyLayerNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "hidden_size", ")", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "hidden_size", ")", ")", "\n", "self", ".", "variance_epsilon", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test2.MyLayerNorm.forward": [[116, 121], ["x.mean", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "u", "=", "x", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "s", "=", "(", "x", "-", "u", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "x", "=", "(", "x", "-", "u", ")", "/", "torch", ".", "sqrt", "(", "s", "+", "self", ".", "variance_epsilon", ")", "\n", "return", "self", ".", "weight", "*", "x", "+", "self", ".", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test2.MyLayer.__init__": [[124, 133], ["torch.Module.__init__", "test2.MyAttention", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "test2.MyLayerNorm"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_input", ",", "config", ")", ":", "\n", "        ", "super", "(", "MyLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "attention", "=", "MyAttention", "(", "dim_input", ",", "config", ")", "\n", "self", ".", "dim_output", "=", "self", ".", "attention", ".", "dim_output", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "self", ".", "dim_output", ",", "self", ".", "dim_output", ")", "\n", "self", ".", "nonlin", "=", "nn", ".", "Tanh", "(", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "self", ".", "dim_output", ",", "self", ".", "dim_output", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", "[", "'dropout'", "]", ")", "\n", "self", ".", "norm", "=", "MyLayerNorm", "(", "self", ".", "dim_output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test2.MyLayer.forward": [[134, 141], ["test2.MyLayer.attention", "test2.MyLayer.fc1", "test2.MyLayer.nonlin", "test2.MyLayer.fc2", "test2.MyLayer.dropout", "test2.MyLayer.norm"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.dropout"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "attention_outputs", "=", "self", ".", "attention", "(", "inputs", ")", "\n", "h", "=", "self", ".", "fc1", "(", "attention_outputs", ")", "\n", "h", "=", "self", ".", "nonlin", "(", "h", ")", "\n", "h", "=", "self", ".", "fc2", "(", "h", ")", "\n", "h", "=", "self", ".", "dropout", "(", "h", ")", "\n", "return", "self", ".", "norm", "(", "attention_outputs", "+", "h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test2.Test2.__init__": [[144, 151], ["torch.Module.__init__", "test2.MyLayer", "test2.MyLayer", "test2.MyLayer", "test2.MyLayer"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_input", ",", "config", ")", ":", "\n", "        ", "super", "(", "Test2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer1", "=", "MyLayer", "(", "dim_input", ",", "config", ")", "\n", "self", ".", "layer2", "=", "MyLayer", "(", "self", ".", "layer1", ".", "dim_output", ",", "config", ")", "\n", "self", ".", "layer3", "=", "MyLayer", "(", "self", ".", "layer2", ".", "dim_output", ",", "config", ")", "\n", "self", ".", "layer4", "=", "MyLayer", "(", "self", ".", "layer3", ".", "dim_output", ",", "config", ")", "\n", "self", ".", "dim", "=", "self", ".", "layer2", ".", "dim_output", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test2.Test2.forward": [[152, 158], ["test2.Test2.layer1", "test2.Test2.layer2", "test2.Test2.layer3", "test2.Test2.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "seqlens", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "layer1", "(", "inputs", ")", "\n", "outputs", "=", "self", ".", "layer2", "(", "outputs", ")", "\n", "outputs", "=", "self", ".", "layer3", "(", "outputs", ")", "\n", "outputs", "=", "self", ".", "layer4", "(", "outputs", ")", "\n", "return", "outputs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test3.VecLinear.__init__": [[9, 13], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "test3.VecLinear.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.conditional_random_field.ConditionalRandomField.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "num_input", ",", "num_output", ")", ":", "\n", "        ", "super", "(", "VecLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_output", ",", "num_input", ")", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test3.VecLinear.reset_parameters": [[14, 17], ["print", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"reset\"", ")", "\n", "nn", ".", "init", ".", "kaiming_uniform_", "(", "self", ".", "weight", ",", "a", "=", "math", ".", "sqrt", "(", "5", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test3.VecLinear.forward": [[18, 23], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# print(\"before:\", input.mean(), input.std())", "\n", "        ", "output", "=", "torch", ".", "matmul", "(", "self", ".", "weight", ",", "input", ")", "\n", "# print(\"after:\", output.mean(), output.std())", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test3.EntNet.__init__": [[26, 33], ["torch.Module.__init__", "test3.VecLinear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "EntNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_cell", "=", "16", "\n", "self", ".", "dim_cell", "=", "32", "\n", "self", ".", "fc1", "=", "VecLinear", "(", "self", ".", "num_cell", ",", "self", ".", "num_cell", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "self", ".", "dim_cell", ",", "self", ".", "dim_cell", ")", "\n", "self", ".", "dim", "=", "self", ".", "num_cell", "*", "self", ".", "dim_cell", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test3.EntNet.forward": [[34, 40], ["inputs.view", "test3.EntNet.fc1", "test3.EntNet.fc2", "outputs.view.view.view", "inputs.size", "inputs.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "vecs", "=", "inputs", ".", "view", "(", "inputs", ".", "size", "(", ")", "[", ":", "-", "1", "]", "+", "(", "self", ".", "num_cell", ",", "self", ".", "dim_cell", ")", ")", "\n", "ents", "=", "self", ".", "fc1", "(", "vecs", ")", "\n", "outputs", "=", "self", ".", "fc2", "(", "ents", ")", "\n", "outputs", "=", "outputs", ".", "view", "(", "*", "inputs", ".", "size", "(", ")", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test3.EntRNN.__init__": [[44, 51], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "ForgetMult"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_input", ",", "dim_output", ",", "right_to_left", ")", ":", "\n", "        ", "super", "(", "EntRNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input", "=", "nn", ".", "Linear", "(", "dim_input", ",", "dim_output", ")", "\n", "self", ".", "forget", "=", "nn", ".", "Linear", "(", "dim_input", ",", "dim_output", ")", "\n", "from", "torchqrnn", "import", "ForgetMult", "\n", "self", ".", "gate", "=", "ForgetMult", "(", ")", "\n", "self", ".", "right_to_left", "=", "right_to_left", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test3.EntRNN.forward": [[52, 64], ["test3.EntRNN.input", "test3.EntRNN.forget", "inputs.flip.flip.flip", "mask.flip.flip.flip", "ForgetMult", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "outputs.flip.flip.flip"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "mask", ")", ":", "\n", "        ", "if", "self", ".", "right_to_left", ":", "\n", "            ", "inputs", "=", "inputs", ".", "flip", "(", "1", ")", "\n", "mask", "=", "mask", ".", "flip", "(", "1", ")", "\n", "", "x", "=", "self", ".", "input", "(", "inputs", ")", "\n", "f", "=", "self", ".", "forget", "(", "inputs", ")", "\n", "f", "=", "f", "+", "mask", "*", "10000", "\n", "from", "torchqrnn", "import", "ForgetMult", "\n", "outputs", "=", "ForgetMult", "(", ")", "(", "torch", ".", "sigmoid", "(", "f", ")", ",", "torch", ".", "tanh", "(", "x", ")", ")", "\n", "if", "self", ".", "right_to_left", ":", "\n", "            ", "outputs", "=", "outputs", ".", "flip", "(", "1", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test3.Layer.__init__": [[67, 72], ["torch.Module.__init__", "test3.EntRNN", "test3.EntRNN"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_input", ",", "dim_output", ")", ":", "\n", "        ", "super", "(", "Layer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fw", "=", "EntRNN", "(", "dim_input", ",", "dim_output", ",", "False", ")", "\n", "self", ".", "bw", "=", "EntRNN", "(", "dim_input", ",", "dim_output", ",", "True", ")", "\n", "self", ".", "dim", "=", "dim_output", "*", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test3.Layer.forward": [[73, 78], ["test3.Layer.fw", "test3.Layer.bw", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "mask", ")", ":", "\n", "        ", "f", "=", "self", ".", "fw", "(", "inputs", ",", "mask", ")", "\n", "b", "=", "self", ".", "bw", "(", "inputs", ",", "mask", ")", "\n", "y", "=", "torch", ".", "cat", "(", "(", "f", ",", "b", ")", ",", "-", "1", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test3.LayerRNN.__init__": [[81, 85], ["torch.Module.__init__", "torch.LSTM", "torch.LSTM", "torch.LSTM"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_input", ",", "dim_output", ")", ":", "\n", "        ", "super", "(", "LayerRNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rnn", "=", "nn", ".", "LSTM", "(", "dim_input", ",", "dim_output", ",", "bidirectional", "=", "True", ",", "num_layers", "=", "1", ")", "\n", "self", ".", "dim", "=", "dim_output", "*", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test3.LayerRNN.forward": [[86, 91], ["torch.pack_padded_sequence", "torch.pack_padded_sequence", "torch.pack_padded_sequence", "test3.LayerRNN.rnn", "torch.pad_packed_sequence", "torch.pad_packed_sequence", "torch.pad_packed_sequence"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "seqlens", ")", ":", "\n", "        ", "packed_inputs", "=", "rnn_utils", ".", "pack_padded_sequence", "(", "inputs", ",", "seqlens", ",", "batch_first", "=", "True", ")", "\n", "packed_outputs", ",", "_", "=", "self", ".", "rnn", "(", "packed_inputs", ")", "\n", "outputs", ",", "_", "=", "rnn_utils", ".", "pad_packed_sequence", "(", "packed_outputs", ",", "batch_first", "=", "True", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test3.ParallelRNN.__init__": [[94, 98], ["torch.Module.__init__", "torch.LSTM", "torch.LSTM", "torch.LSTM"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_input", ",", "dim_output", ")", ":", "\n", "        ", "super", "(", "ParallelRNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rnn", "=", "nn", ".", "LSTM", "(", "dim_input", ",", "dim_output", ",", "bidirectional", "=", "True", ",", "num_layers", "=", "1", ")", "\n", "self", ".", "dim", "=", "dim_output", "*", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test3.ParallelRNN.forward": [[99, 110], ["inputs.size", "seqlens.unsqueeze().expand().contiguous().view", "inputs.view", "torch.pack_padded_sequence", "torch.pack_padded_sequence", "torch.pack_padded_sequence", "test3.ParallelRNN.rnn", "torch.pad_packed_sequence", "torch.pad_packed_sequence", "torch.pad_packed_sequence", "outputs.view.view.view", "seqlens.unsqueeze().expand().contiguous", "seqlens.unsqueeze().expand", "seqlens.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "seqlens", ")", ":", "\n", "        ", "b", ",", "c", ",", "l", ",", "d", "=", "inputs", ".", "size", "(", ")", "\n", "parallel_seqlens", "=", "seqlens", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "b", ",", "c", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "parallel_inputs", "=", "inputs", ".", "view", "(", "-", "1", ",", "l", ",", "d", ")", "\n", "\n", "packed_inputs", "=", "rnn_utils", ".", "pack_padded_sequence", "(", "parallel_inputs", ",", "parallel_seqlens", ",", "batch_first", "=", "True", ")", "\n", "packed_outputs", ",", "_", "=", "self", ".", "rnn", "(", "packed_inputs", ")", "\n", "outputs", ",", "_", "=", "rnn_utils", ".", "pad_packed_sequence", "(", "packed_outputs", ",", "batch_first", "=", "True", ")", "\n", "\n", "outputs", "=", "outputs", ".", "view", "(", "b", ",", "c", ",", "l", ",", "-", "1", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test3.Test3.__init__": [[128, 139], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "test3.ParallelRNN", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "test3.ParallelRNN"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_input", ",", "config", ")", ":", "\n", "        ", "super", "(", "Test3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_cell", "=", "config", "[", "'num_cell'", "]", "\n", "self", ".", "dim_cell", "=", "config", "[", "'dim_cell'", "]", "\n", "self", ".", "dim", "=", "self", ".", "num_cell", "*", "self", ".", "dim_cell", "*", "2", "\n", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "dim_input", ",", "self", ".", "num_cell", "*", "self", ".", "dim_cell", ")", "\n", "self", ".", "layer1", "=", "ParallelRNN", "(", "self", ".", "dim_cell", ",", "self", ".", "dim_cell", ")", "\n", "self", ".", "dropout1", "=", "nn", ".", "Dropout", "(", "config", "[", "'dropout'", "]", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "self", ".", "dim", ",", "self", ".", "dim", ")", "\n", "self", ".", "layer2", "=", "ParallelRNN", "(", "self", ".", "layer1", ".", "dim", ",", "self", ".", "dim_cell", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test3.Test3.forward": [[140, 160], ["test3.Test3.dense", "test3.to_cells", "test3.Test3.layer1", "test3.Test3.dropout1", "test3.from_cells", "test3.Test3.fc1", "test3.to_cells", "test3.Test3.layer2", "test3.from_cells"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test3.to_cells", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test3.from_cells", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test3.to_cells", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test3.from_cells"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "seqlens", ")", ":", "\n", "        ", "inp", "=", "self", ".", "dense", "(", "inputs", ")", "\n", "\n", "inp", "=", "to_cells", "(", "inp", ",", "self", ".", "num_cell", ",", "self", ".", "dim_cell", ")", "\n", "\n", "y1", "=", "self", ".", "layer1", "(", "inp", ",", "seqlens", ")", "\n", "y1", "=", "self", ".", "dropout1", "(", "y1", ")", "\n", "\n", "# print(y1.size())", "\n", "y1", "=", "from_cells", "(", "y1", ")", "\n", "# print(y1.size())", "\n", "y1", "=", "self", ".", "fc1", "(", "y1", ")", "\n", "y1", "=", "to_cells", "(", "y1", ",", "self", ".", "num_cell", ",", "2", "*", "self", ".", "dim_cell", ")", "\n", "# print(y1.size())", "\n", "\n", "y2", "=", "self", ".", "layer2", "(", "y1", ",", "seqlens", ")", "\n", "\n", "y", "=", "from_cells", "(", "y2", ")", "\n", "\n", "return", "y", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test3.to_cells": [[112, 117], ["tensor.contiguous.size", "tensor.contiguous.view().permute", "tensor.contiguous.contiguous", "tensor.contiguous.view"], "function", ["None"], ["", "", "def", "to_cells", "(", "tensor", ",", "num_cell", ",", "dim_cell", ")", ":", "\n", "    ", "b", ",", "l", ",", "_", "=", "tensor", ".", "size", "(", ")", "\n", "tensor", "=", "tensor", ".", "view", "(", "b", ",", "l", ",", "num_cell", ",", "dim_cell", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "tensor", "=", "tensor", ".", "contiguous", "(", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test3.from_cells": [[119, 125], ["tensor.view.size", "tensor.view.permute", "tensor.view.contiguous", "tensor.view.view"], "function", ["None"], ["", "def", "from_cells", "(", "tensor", ")", ":", "\n", "    ", "b", ",", "num_cell", ",", "l", ",", "dim_cell", "=", "tensor", ".", "size", "(", ")", "\n", "tensor", "=", "tensor", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "tensor", "=", "tensor", ".", "contiguous", "(", ")", "\n", "tensor", "=", "tensor", ".", "view", "(", "b", ",", "l", ",", "num_cell", "*", "dim_cell", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.transformers.CombineConcat.__init__": [[51, 53], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CombineConcat", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.transformers.CombineConcat.forward": [[54, 56], ["torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "list_of_tensors", ")", ":", "\n", "        ", "return", "torch", ".", "cat", "(", "list_of_tensors", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.transformers.WrapperBERT.__init__": [[60, 75], ["torch.Module.__init__", "BertTokenizer.from_pretrained", "BertModel.from_pretrained", "transformers.WrapperBERT.model.parameters", "transformers.CombineConcat", "BaseException", "len"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dictionaries", ",", "config", ")", ":", "\n", "        ", "super", "(", "WrapperBERT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "tokenizer", "=", "BertTokenizer", ".", "from_pretrained", "(", "'bert-base-cased'", ")", "\n", "self", ".", "model", "=", "BertModel", ".", "from_pretrained", "(", "'bert-base-cased'", ",", "output_hidden_states", "=", "True", ")", "\n", "self", ".", "layers", "=", "config", "[", "'layers'", "]", "\n", "self", ".", "max_bert_length", "=", "config", "[", "'max_length'", "]", "\n", "\n", "if", "config", "[", "'combine'", "]", "==", "'concat'", ":", "\n", "            ", "self", ".", "out", "=", "CombineConcat", "(", ")", "\n", "self", ".", "dim_output", "=", "768", "*", "len", "(", "self", ".", "layers", ")", "\n", "", "else", ":", "\n", "            ", "raise", "BaseException", "(", "\"no such module\"", ")", "\n", "\n", "", "for", "param", "in", "self", ".", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.transformers.WrapperBERT.forward": [[76, 109], ["list", "transformers.WrapperBERT.out", "transformers.mysentsplitter", "list.append", "map", "transformers.pad_tensors().detach", "list", "transformers.myencode", "transformers.WrapperBERT.tokenizer.encode", "transformers.WrapperBERT.model", "zip", "zip", "torch.cuda.LongTensor().unsqueeze", "torch.cuda.LongTensor().unsqueeze", "torch.cuda.LongTensor().unsqueeze", "torch.cuda.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "rep.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "transformers.pad_tensors", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "all_attentions[].detach"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.transformers.mysentsplitter", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.transformers.myencode", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.transformers.pad_tensors"], ["", "", "def", "forward", "(", "self", ",", "texts", ")", ":", "\n", "        ", "instances", "=", "[", "]", "\n", "for", "text", "in", "texts", ":", "\n", "            ", "reps", "=", "[", "list", "(", ")", "for", "_", "in", "self", ".", "layers", "]", "\n", "\n", "for", "sentence", "in", "mysentsplitter", "(", "text", ",", "self", ".", "max_bert_length", ")", ":", "\n", "                ", "tokens", ",", "orig_to_tok_map", "=", "myencode", "(", "self", ".", "tokenizer", ",", "sentence", ")", "\n", "\n", "enc_toks", "=", "self", ".", "tokenizer", ".", "encode", "(", "tokens", ")", "\n", "\n", "# input_ids = torch.LongTensor(self.tokenizer.encode(tokens)).unsqueeze(0).cuda()", "\n", "if", "settings", ".", "device", "==", "'cuda'", ":", "\n", "                    ", "input_ids", "=", "torch", ".", "cuda", ".", "LongTensor", "(", "enc_toks", ")", ".", "unsqueeze", "(", "0", ")", "\n", "", "else", ":", "\n", "                    ", "input_ids", "=", "torch", ".", "LongTensor", "(", "enc_toks", ")", ".", "unsqueeze", "(", "0", ")", "\n", "", "outputs", "=", "self", ".", "model", "(", "input_ids", ")", "\n", "all_hidden_states", ",", "all_attentions", "=", "outputs", "[", "-", "2", ":", "]", "\n", "\n", "if", "settings", ".", "device", "==", "'cuda'", ":", "\n", "                    ", "indices", "=", "torch", ".", "cuda", ".", "LongTensor", "(", "orig_to_tok_map", ")", "\n", "", "else", ":", "\n", "                    ", "indices", "=", "torch", ".", "LongTensor", "(", "orig_to_tok_map", ")", "\n", "\n", "", "for", "rep", ",", "l", "in", "zip", "(", "reps", ",", "self", ".", "layers", ")", ":", "\n", "                    ", "rep", ".", "append", "(", "torch", ".", "index_select", "(", "all_attentions", "[", "l", "]", ".", "detach", "(", ")", ",", "1", ",", "indices", ")", ")", "\n", "\n", "", "", "instances", ".", "append", "(", "[", "torch", ".", "cat", "(", "rep", ",", "1", ")", "for", "rep", "in", "reps", "]", ")", "\n", "# transpose", "\n", "", "instances", "=", "list", "(", "map", "(", "list", ",", "zip", "(", "*", "instances", ")", ")", ")", "\n", "# pad layers", "\n", "instances", "=", "[", "pad_tensors", "(", "x", ")", ".", "detach", "(", ")", "for", "x", "in", "instances", "]", "\n", "output", "=", "self", ".", "out", "(", "instances", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.transformers.WrapperSpanBERT.__init__": [[113, 131], ["torch.Module.__init__", "BertTokenizer.from_pretrained", "BertModel.from_pretrained", "transformers.WrapperSpanBERT.spanbert_model.parameters", "BaseException"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dictionaries", ",", "config", ")", ":", "\n", "        ", "super", "(", "WrapperSpanBERT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "tokenizer", "=", "BertTokenizer", ".", "from_pretrained", "(", "'bert-base-cased'", ")", "\n", "self", ".", "model_path", "=", "config", "[", "'model_path'", "]", "\n", "# self.model = BertModel.from_pretrained(self.model_path, output_hidden_states=True)", "\n", "self", ".", "spanbert_model", "=", "BertModel", ".", "from_pretrained", "(", "self", ".", "model_path", ")", "\n", "# self.layers = config['layers']", "\n", "self", ".", "max_bert_length", "=", "config", "[", "'max_length'", "]", "\n", "\n", "if", "config", "[", "'combine'", "]", "==", "'concat'", ":", "\n", "# self.out = CombineConcat()", "\n", "# self.dim_output = 768 * len(self.layers)", "\n", "            ", "self", ".", "dim_output", "=", "self", ".", "spanbert_model", ".", "config", ".", "hidden_size", "\n", "", "else", ":", "\n", "            ", "raise", "BaseException", "(", "\"no such module\"", ")", "\n", "\n", "", "for", "param", "in", "self", ".", "spanbert_model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.transformers.WrapperSpanBERT.forward": [[132, 174], ["list", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "transformers.mysentsplitter", "transformers.myencode", "transformers.WrapperSpanBERT.tokenizer.convert_tokens_to_ids", "list.append", "torch.cuda.LongTensor().unsqueeze", "torch.cuda.LongTensor().unsqueeze", "torch.cuda.LongTensor().unsqueeze", "torch.cuda.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "transformers.WrapperSpanBERT.spanbert_model", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.transformers.mysentsplitter", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.transformers.myencode", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.convert_tokens_to_ids"], ["", "", "def", "forward", "(", "self", ",", "texts", ")", ":", "\n", "# batched_rep = []", "\n", "        ", "assert", "len", "(", "texts", ")", "==", "1", "# only for batch size 1 for now", "\n", "rep", "=", "list", "(", ")", "\n", "for", "text", "in", "texts", ":", "\n", "# reps = [list() for _ in self.layers]", "\n", "\n", "            ", "for", "sentence", "in", "mysentsplitter", "(", "text", ",", "self", ".", "max_bert_length", ")", ":", "\n", "                ", "tokens", ",", "orig_to_tok_map", "=", "myencode", "(", "self", ".", "tokenizer", ",", "sentence", ")", "\n", "\n", "# (kzaporoj 18/03/2021) - the tokens are already bert-tokenized ([\"[CLS]\", \"##..\", ...]),", "\n", "#  so no need to .encode, it only splits the \"[CLS]\", which is not needed, this is why the encode is", "\n", "#  commented and replaced by convert_tokens_to_ids.", "\n", "# enc_toks = self.tokenizer.encode(tokens)", "\n", "enc_toks", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokens", ")", "\n", "if", "settings", ".", "device", "==", "'cuda'", ":", "\n", "                    ", "input_ids", "=", "torch", ".", "cuda", ".", "LongTensor", "(", "enc_toks", ")", ".", "unsqueeze", "(", "0", ")", "\n", "", "else", ":", "\n", "                    ", "input_ids", "=", "torch", ".", "LongTensor", "(", "enc_toks", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "# outputs = self.spanbert_model(input_ids)", "\n", "# outputs, _ = self.spanbert_model(input_ids)", "\n", "", "outputs", "=", "self", ".", "spanbert_model", "(", "input_ids", ")", ".", "last_hidden_state", "\n", "# all_hidden_states, all_attentions = outputs[-2:]", "\n", "\n", "if", "settings", ".", "device", "==", "'cuda'", ":", "\n", "                    ", "indices", "=", "torch", ".", "cuda", ".", "LongTensor", "(", "orig_to_tok_map", ")", "\n", "", "else", ":", "\n", "                    ", "indices", "=", "torch", ".", "LongTensor", "(", "orig_to_tok_map", ")", "\n", "\n", "# for rep, l in zip(reps, self.layers):", "\n", "#     rep.append(torch.index_select(all_attentions[l].detach(), 1, indices))", "\n", "", "rep", ".", "append", "(", "torch", ".", "index_select", "(", "outputs", ",", "1", ",", "indices", ")", ")", "\n", "\n", "# batched_rep.append(torch.cat(rep, 1))", "\n", "# transpose", "\n", "# instances = list(map(list, zip(*instances)))", "\n", "# pad layers", "\n", "# instances = [pad_tensors(x).detach() for x in instances]", "\n", "# output = self.out(instances)", "\n", "# return batched_rep", "\n", "", "", "return", "torch", ".", "cat", "(", "rep", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.transformers.WrapperSpanBERTSubtoken.__init__": [[183, 199], ["torch.Module.__init__", "BertTokenizer.from_pretrained", "BertModel.from_pretrained", "transformers.WrapperSpanBERTSubtoken.spanbert_model.parameters", "BaseException"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["def", "__init__", "(", "self", ",", "dictionaries", ",", "config", ")", ":", "\n", "        ", "super", "(", "WrapperSpanBERTSubtoken", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "tokenizer", "=", "BertTokenizer", ".", "from_pretrained", "(", "'bert-base-cased'", ")", "\n", "self", ".", "model_path", "=", "config", "[", "'model_path'", "]", "\n", "self", ".", "spanbert_model", "=", "BertModel", ".", "from_pretrained", "(", "self", ".", "model_path", ")", "\n", "self", ".", "max_bert_length", "=", "config", "[", "'max_length'", "]", "\n", "\n", "if", "config", "[", "'combine'", "]", "==", "'concat'", ":", "\n", "# self.out = CombineConcat()", "\n", "# self.dim_output = 768 * len(self.layers)", "\n", "            ", "self", ".", "dim_output", "=", "self", ".", "spanbert_model", ".", "config", ".", "hidden_size", "\n", "", "else", ":", "\n", "            ", "raise", "BaseException", "(", "\"no such module\"", ")", "\n", "\n", "", "for", "param", "in", "self", ".", "spanbert_model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.transformers.WrapperSpanBERTSubtoken.forward": [[200, 233], ["list", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "modules.bert_preprocessing.get_segmented_doc_for_bert", "transformers.myencode", "transformers.WrapperSpanBERTSubtoken.tokenizer.convert_tokens_to_ids", "list.append", "torch.cuda.LongTensor().unsqueeze", "torch.cuda.LongTensor().unsqueeze", "torch.cuda.LongTensor().unsqueeze", "torch.cuda.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "transformers.WrapperSpanBERTSubtoken.spanbert_model", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.bert_preprocessing.get_segmented_doc_for_bert", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.transformers.myencode", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.convert_tokens_to_ids"], ["", "", "def", "forward", "(", "self", ",", "texts", ")", ":", "\n", "        ", "assert", "len", "(", "texts", ")", "==", "1", "# only for batch size 1 for now", "\n", "rep", "=", "list", "(", ")", "\n", "for", "text", "in", "texts", ":", "\n", "# for sentence in mysentsplitter(text, self.max_bert_length):", "\n", "# def get_segmented_doc_for_bert(text, seg_len, tokenizer):", "\n", "            ", "segmented_doc_for_bert", ":", "BertDocument", "=", "get_segmented_doc_for_bert", "(", "text", ",", "self", ".", "max_bert_length", ",", "\n", "self", ".", "tokenizer", ")", "\n", "# for sentence in mysentsplitter(text, self.max_bert_length):", "\n", "for", "sentence", "in", "segmented_doc_for_bert", ".", "segments", ":", "\n", "                ", "tokens", ",", "orig_to_tok_map", "=", "myencode", "(", "self", ".", "tokenizer", ",", "sentence", ")", "\n", "\n", "enc_toks", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokens", ")", "\n", "if", "settings", ".", "device", "==", "'cuda'", ":", "\n", "                    ", "input_ids", "=", "torch", ".", "cuda", ".", "LongTensor", "(", "enc_toks", ")", ".", "unsqueeze", "(", "0", ")", "\n", "", "else", ":", "\n", "                    ", "input_ids", "=", "torch", ".", "LongTensor", "(", "enc_toks", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "# outputs = self.spanbert_model(input_ids)", "\n", "# outputs, _ = self.spanbert_model(input_ids)", "\n", "", "outputs", "=", "self", ".", "spanbert_model", "(", "input_ids", ")", ".", "last_hidden_state", "\n", "# all_hidden_states, all_attentions = outputs[-2:]", "\n", "\n", "if", "settings", ".", "device", "==", "'cuda'", ":", "\n", "                    ", "indices", "=", "torch", ".", "cuda", ".", "LongTensor", "(", "orig_to_tok_map", ")", "\n", "", "else", ":", "\n", "                    ", "indices", "=", "torch", ".", "LongTensor", "(", "orig_to_tok_map", ")", "\n", "\n", "# for rep, l in zip(reps, self.layers):", "\n", "#     rep.append(torch.index_select(all_attentions[l].detach(), 1, indices))", "\n", "", "rep", ".", "append", "(", "torch", ".", "index_select", "(", "outputs", ",", "1", ",", "indices", ")", ")", "\n", "\n", "", "", "return", "torch", ".", "cat", "(", "rep", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.transformers.WrapperSpanBERT_X.__init__": [[243, 254], ["torch.Module.__init__", "BertModel.from_pretrained", "transformers.WrapperSpanBERT_X.spanbert_model.parameters"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["def", "__init__", "(", "self", ",", "dictionaries", ",", "config", ")", ":", "\n", "        ", "super", "(", "WrapperSpanBERT_X", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "model_path", "=", "config", "[", "'model_path'", "]", "\n", "self", ".", "spanbert_model", "=", "BertModel", ".", "from_pretrained", "(", "self", ".", "model_path", ")", "\n", "\n", "self", ".", "dim_output", "=", "self", ".", "spanbert_model", ".", "config", ".", "hidden_size", "\n", "\n", "if", "'fine_tune_bert'", "not", "in", "config", "or", "config", "[", "'fine_tune_bert'", "]", "is", "False", ":", "\n", "            ", "for", "param", "in", "self", ".", "spanbert_model", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.transformers.WrapperSpanBERT_X.forward": [[255, 268], ["list", "zip", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "len", "segments_mask.to.to.to", "list.append", "transformers.WrapperSpanBERT_X.spanbert_model", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "segmented_docs", ",", "segment_masks", ")", ":", "\n", "        ", "assert", "len", "(", "segmented_docs", ")", "==", "1", "# only for batch size 1 for now", "\n", "rep", "=", "list", "(", ")", "\n", "for", "segmented_doc", ",", "segments_mask", "in", "zip", "(", "segmented_docs", ",", "segment_masks", ")", ":", "\n", "# (kzaporoj 21/10/2021) --- not sure what happened, but .last_hidden_state seems no to be found anymore", "\n", "# outputs = self.spanbert_model(segmented_doc, attention_mask=segments_mask).last_hidden_state", "\n", "            ", "outputs", "=", "self", ".", "spanbert_model", "(", "segmented_doc", ",", "attention_mask", "=", "segments_mask", ")", "[", "0", "]", "\n", "segments_mask", "=", "segments_mask", ".", "to", "(", "torch", ".", "bool", ")", "\n", "outputs", "=", "outputs", "[", "segments_mask", "]", "\n", "\n", "rep", ".", "append", "(", "outputs", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "rep", ",", "1", ")", ".", "unsqueeze", "(", "0", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.transformers.mysentsplitter": [[9, 25], ["len", "sentences.append", "len", "len", "print"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["def", "mysentsplitter", "(", "tokens", ",", "maxlen", ")", ":", "\n", "    ", "sentences", "=", "[", "]", "\n", "begin", "=", "0", "\n", "while", "begin", "<", "len", "(", "tokens", ")", ":", "\n", "        ", "if", "len", "(", "tokens", ")", "-", "begin", "<", "maxlen", ":", "\n", "            ", "end", "=", "len", "(", "tokens", ")", "\n", "", "else", ":", "\n", "            ", "end", "=", "begin", "+", "maxlen", "\n", "while", "end", ">", "begin", "and", "tokens", "[", "end", "-", "1", "]", "!=", "'.'", ":", "\n", "                ", "end", "-=", "1", "\n", "", "if", "begin", "==", "end", ":", "\n", "                ", "print", "(", "\"FAILED TO SPLIT INTO SENTENCES:\"", ",", "tokens", "[", "begin", ":", "]", ")", "\n", "end", "=", "begin", "+", "maxlen", "\n", "", "", "sentences", ".", "append", "(", "tokens", "[", "begin", ":", "end", "]", ")", "\n", "begin", "=", "end", "\n", "", "return", "sentences", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.transformers.myencode": [[27, 38], ["bert_tokens.append", "bert_tokens.append", "orig_to_tok_map.append", "bert_tokens.extend", "len", "tokenizer.tokenize"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.WordpieceTokenizer.tokenize"], ["", "def", "myencode", "(", "tokenizer", ",", "orig_tokens", ")", ":", "\n", "    ", "bert_tokens", "=", "[", "]", "\n", "orig_to_tok_map", "=", "[", "]", "\n", "\n", "bert_tokens", ".", "append", "(", "\"[CLS]\"", ")", "\n", "for", "orig_token", "in", "orig_tokens", ":", "\n", "        ", "orig_to_tok_map", ".", "append", "(", "len", "(", "bert_tokens", ")", ")", "\n", "bert_tokens", ".", "extend", "(", "tokenizer", ".", "tokenize", "(", "orig_token", ")", ")", "\n", "", "bert_tokens", ".", "append", "(", "\"[SEP]\"", ")", "\n", "\n", "return", "bert_tokens", ",", "orig_to_tok_map", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.transformers.pad_tensors": [[40, 48], ["max", "torch.cat", "torch.cat", "out.append", "torch.cat", "torch.cat", "x.size", "torch.cat.size", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros", "torch.zeros", "torch.cat.size", "torch.cat.size"], "function", ["None"], ["", "def", "pad_tensors", "(", "instances", ")", ":", "\n", "    ", "maxlen", "=", "max", "(", "[", "x", ".", "size", "(", ")", "[", "1", "]", "for", "x", "in", "instances", "]", ")", "\n", "out", "=", "[", "]", "\n", "for", "instance", "in", "instances", ":", "\n", "        ", "if", "instance", ".", "size", "(", ")", "[", "1", "]", "<", "maxlen", ":", "\n", "            ", "instance", "=", "torch", ".", "cat", "(", "(", "instance", ",", "torch", ".", "zeros", "(", "1", ",", "maxlen", "-", "instance", ".", "size", "(", ")", "[", "1", "]", ",", "instance", ".", "size", "(", ")", "[", "2", "]", ")", ".", "cuda", "(", ")", ")", ",", "1", ")", "\n", "", "out", ".", "append", "(", "instance", ")", "\n", "", "return", "torch", ".", "cat", "(", "out", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.seq2seq.LayerNone.__init__": [[94, 97], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_input", ",", "config", ")", ":", "\n", "        ", "super", "(", "LayerNone", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim_output", "=", "dim_input", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.seq2seq.LayerNone.forward": [[98, 100], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "seqlens", ",", "indices", "=", "None", ")", ":", "\n", "        ", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.seq2seq.Seq2seq.__init__": [[104, 131], ["torch.Module.__init__", "print", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.GRU", "torch.GRU", "torch.GRU"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["    ", "def", "__init__", "(", "self", ",", "dim_input", ",", "config", ")", ":", "\n", "        ", "super", "(", "Seq2seq", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "'i_dp'", "in", "config", ":", "\n", "            ", "self", ".", "idp", "=", "nn", ".", "Dropout", "(", "config", "[", "'i_dp'", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "idp", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "", "if", "config", "[", "'type'", "]", "==", "'lstm'", ":", "\n", "            ", "self", ".", "rnn", "=", "nn", ".", "LSTM", "(", "dim_input", ",", "config", "[", "'dim'", "]", ",", "bidirectional", "=", "True", ",", "num_layers", "=", "config", "[", "'layers'", "]", ",", "\n", "dropout", "=", "config", "[", "'dropout'", "]", ",", "batch_first", "=", "True", ")", "\n", "", "elif", "config", "[", "'type'", "]", "==", "'gru'", ":", "\n", "            ", "self", ".", "rnn", "=", "nn", ".", "GRU", "(", "dim_input", ",", "config", "[", "'dim'", "]", ",", "bidirectional", "=", "True", ",", "num_layers", "=", "config", "[", "'layers'", "]", ",", "\n", "dropout", "=", "config", "[", "'dropout'", "]", ",", "batch_first", "=", "True", ")", "\n", "\n", "", "print", "(", "\"WARNING:WDROP COMMENTED OUT\"", ")", "\n", "# if 'wdrop' in config:", "\n", "#     wdrop_params = [k for k,v in self.rnn.named_parameters() if k.startswith('weight_hh')]", "\n", "#     print(\"WDROP ENABLED:\", config['wdrop'], wdrop_params)", "\n", "#     self.rnn = WeightDrop(self.rnn, wdrop_params, config['wdrop'])", "\n", "\n", "self", ".", "dim_output", "=", "config", "[", "'dim'", "]", "*", "2", "\n", "\n", "self", ".", "concat_input_output", "=", "config", "[", "'concat_input_output'", "]", "\n", "if", "self", ".", "concat_input_output", ":", "\n", "            ", "self", ".", "dim_output", "+=", "dim_input", "\n", "\n", "", "self", ".", "dim", "=", "self", ".", "dim_output", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.seq2seq.Seq2seq.forward": [[132, 151], ["seq2seq.Seq2seq.idp", "torch.pack_padded_sequence", "torch.pack_padded_sequence", "torch.pack_padded_sequence", "seq2seq.Seq2seq.rnn", "torch.pad_packed_sequence", "torch.pad_packed_sequence", "torch.pad_packed_sequence", "seqlens.cpu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "seqlens", ",", "indices", "=", "None", ")", ":", "\n", "# print('inputs:', inputs.size())", "\n", "        ", "inputs", "=", "self", ".", "idp", "(", "inputs", ")", "\n", "# print('inputs device in seq2seq: ', inputs.device)", "\n", "# print('seqlens device in seq2seq: ', seqlens.device)", "\n", "# (kzaporoj 21/12/2020) - adding .cpu() , for some reason gives", "\n", "#   - RuntimeError: 'lengths' argument should be a 1D CPU int64 tensor, but got 1D cuda:0 Long tensor", "\n", "#   I checked this erros and seems like .cpu() on the lengthsshould solve it according to:", "\n", "#", "\n", "packed_inputs", "=", "rnn_utils", ".", "pack_padded_sequence", "(", "inputs", ",", "seqlens", ".", "cpu", "(", ")", ",", "batch_first", "=", "True", ")", "\n", "# the previous call (without .cpu()) was:", "\n", "# packed_inputs = rnn_utils.pack_padded_sequence(inputs, seqlens, batch_first=True)", "\n", "packed_outputs", ",", "_", "=", "self", ".", "rnn", "(", "packed_inputs", ")", "\n", "outputs", ",", "_", "=", "rnn_utils", ".", "pad_packed_sequence", "(", "packed_outputs", ",", "batch_first", "=", "True", ")", "\n", "\n", "if", "self", ".", "concat_input_output", ":", "\n", "            ", "outputs", "=", "torch", ".", "cat", "(", "(", "outputs", ",", "inputs", ")", ",", "-", "1", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.seq2seq.StackedLSTM.__init__": [[155, 161], ["torch.Module.__init__", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.LSTM", "torch.LSTM", "torch.LSTM"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_input", ",", "config", ")", ":", "\n", "        ", "super", "(", "StackedLSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rnn1", "=", "nn", ".", "LSTM", "(", "dim_input", ",", "config", "[", "'dim'", "]", ",", "bidirectional", "=", "True", ",", "num_layers", "=", "1", ",", "batch_first", "=", "True", ")", "\n", "self", ".", "dropout1", "=", "nn", ".", "Dropout", "(", "config", "[", "'dropout'", "]", ")", "\n", "self", ".", "rnn2", "=", "nn", ".", "LSTM", "(", "config", "[", "'dim'", "]", "*", "2", ",", "config", "[", "'dim'", "]", ",", "bidirectional", "=", "True", ",", "num_layers", "=", "1", ",", "batch_first", "=", "True", ")", "\n", "self", ".", "dim", "=", "config", "[", "'dim'", "]", "*", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.seq2seq.StackedLSTM.forward": [[162, 175], ["torch.pack_padded_sequence", "torch.pack_padded_sequence", "torch.pack_padded_sequence", "seq2seq.StackedLSTM.rnn1", "torch.pad_packed_sequence", "torch.pad_packed_sequence", "torch.pad_packed_sequence", "seq2seq.StackedLSTM.dropout1", "torch.pack_padded_sequence", "torch.pack_padded_sequence", "torch.pack_padded_sequence", "seq2seq.StackedLSTM.rnn2", "torch.pad_packed_sequence", "torch.pad_packed_sequence", "torch.pad_packed_sequence"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "seqlens", ")", ":", "\n", "# print('inputs:', inputs.size())", "\n", "        ", "packed_inputs1", "=", "rnn_utils", ".", "pack_padded_sequence", "(", "inputs", ",", "seqlens", ",", "batch_first", "=", "True", ")", "\n", "packed_outputs1", ",", "_", "=", "self", ".", "rnn1", "(", "packed_inputs1", ")", "\n", "outputs1", ",", "_", "=", "rnn_utils", ".", "pad_packed_sequence", "(", "packed_outputs1", ",", "batch_first", "=", "True", ")", "\n", "\n", "inputs2", "=", "self", ".", "dropout1", "(", "outputs1", ")", "\n", "\n", "packed_inputs2", "=", "rnn_utils", ".", "pack_padded_sequence", "(", "inputs2", ",", "seqlens", ",", "batch_first", "=", "True", ")", "\n", "packed_outputs2", ",", "_", "=", "self", ".", "rnn2", "(", "packed_inputs2", ")", "\n", "outputs2", ",", "_", "=", "rnn_utils", ".", "pad_packed_sequence", "(", "packed_outputs2", ",", "batch_first", "=", "True", ")", "\n", "\n", "return", "outputs1", "+", "outputs2", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.seq2seq.ResLayer.__init__": [[179, 190], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.LSTM", "torch.LSTM", "torch.LSTM", "LayerNorm", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.GRU", "torch.GRU", "torch.GRU"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "ResLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "dim", "=", "config", "[", "'dim'", "]", "\n", "\n", "if", "config", "[", "'rnn'", "]", "==", "'lstm'", ":", "\n", "            ", "self", ".", "rnn", "=", "nn", ".", "LSTM", "(", "dim", "*", "2", ",", "dim", ",", "bidirectional", "=", "True", ",", "num_layers", "=", "1", ",", "batch_first", "=", "True", ")", "\n", "", "elif", "config", "[", "'rnn'", "]", "==", "'gru'", ":", "\n", "            ", "self", ".", "rnn", "=", "nn", ".", "GRU", "(", "dim", "*", "2", ",", "dim", ",", "bidirectional", "=", "True", ",", "num_layers", "=", "1", ",", "batch_first", "=", "True", ")", "\n", "", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", "[", "'dropout'", "]", ")", "\n", "from", "modules", ".", "misc", "import", "LayerNorm", "\n", "self", ".", "out", "=", "LayerNorm", "(", "dim", "*", "2", ")", "if", "'ln'", "in", "config", "else", "nn", ".", "Sequential", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.seq2seq.ResLayer.forward": [[191, 198], ["torch.pack_padded_sequence", "torch.pack_padded_sequence", "torch.pack_padded_sequence", "seq2seq.ResLayer.rnn", "torch.pad_packed_sequence", "torch.pad_packed_sequence", "torch.pad_packed_sequence", "seq2seq.ResLayer.out", "seq2seq.ResLayer.dropout"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.dropout"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "seqlens", ",", "indices", "=", "None", ")", ":", "\n", "# print('inputs:', inputs.size())", "\n", "        ", "packed_inputs", "=", "rnn_utils", ".", "pack_padded_sequence", "(", "inputs", ",", "seqlens", ",", "batch_first", "=", "True", ")", "\n", "packed_outputs", ",", "_", "=", "self", ".", "rnn", "(", "packed_inputs", ")", "\n", "outputs", ",", "_", "=", "rnn_utils", ".", "pad_packed_sequence", "(", "packed_outputs", ",", "batch_first", "=", "True", ")", "\n", "outputs", "=", "inputs", "+", "self", ".", "dropout", "(", "outputs", ")", "\n", "return", "self", ".", "out", "(", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.seq2seq.ResRNN.__init__": [[202, 216], ["torch.Module.__init__", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "seq2seq.ResLayer"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_input", ",", "config", ")", ":", "\n", "        ", "super", "(", "ResRNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim_output", "=", "config", "[", "'dim'", "]", "*", "2", "\n", "\n", "if", "dim_input", "!=", "self", ".", "dim_output", ":", "\n", "            ", "self", ".", "pre", "=", "nn", ".", "Linear", "(", "dim_input", ",", "self", ".", "dim_output", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "pre", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "config", "[", "'layers'", "]", ")", ":", "\n", "            ", "layers", ".", "append", "(", "ResLayer", "(", "config", ")", ")", "\n", "\n", "", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.seq2seq.ResRNN.forward": [[217, 222], ["seq2seq.ResRNN.pre", "layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "seqlens", ",", "indices", "=", "None", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "pre", "(", "inputs", ")", "\n", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "outputs", "=", "layer", "(", "outputs", ",", "seqlens", ",", "indices", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.seq2seq.MultiOutRNN.__init__": [[226, 236], ["torch.Module.__init__", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.Linear", "layers.append", "torch.GRU", "torch.GRU", "torch.GRU"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_input", ",", "config", ")", ":", "\n", "        ", "super", "(", "MultiOutRNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "layers", "=", "[", "]", "\n", "dim_last", "=", "dim_input", "\n", "for", "i", "in", "range", "(", "config", "[", "'layers'", "]", ")", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "GRU", "(", "dim_last", ",", "config", "[", "'dim'", "]", ",", "bidirectional", "=", "True", ",", "num_layers", "=", "1", ",", "batch_first", "=", "True", ")", ")", "\n", "dim_last", "=", "config", "[", "'dim'", "]", "*", "2", "\n", "", "self", ".", "rnns", "=", "nn", ".", "ModuleList", "(", "layers", ")", "\n", "self", ".", "weights", "=", "nn", ".", "Linear", "(", "config", "[", "'layers'", "]", ",", "config", "[", "'outputs'", "]", ",", "bias", "=", "False", ")", "\n", "self", ".", "dim", "=", "config", "[", "'dim'", "]", "*", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.seq2seq.MultiOutRNN.forward": [[237, 247], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "seq2seq.MultiOutRNN.weights", "torch.pack_padded_sequence", "torch.pack_padded_sequence", "torch.pack_padded_sequence", "rnn", "torch.pad_packed_sequence", "torch.pad_packed_sequence", "torch.pad_packed_sequence", "seq2seq.MultiOutRNN.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "seqlens", ",", "indices", "=", "None", ")", ":", "\n", "        ", "outputs", "=", "[", "]", "\n", "for", "rnn", "in", "self", ".", "rnns", ":", "\n", "            ", "packed_inputs", "=", "rnn_utils", ".", "pack_padded_sequence", "(", "inputs", ",", "seqlens", ",", "batch_first", "=", "True", ")", "\n", "packed_outputs", ",", "_", "=", "rnn", "(", "packed_inputs", ")", "\n", "inputs", ",", "_", "=", "rnn_utils", ".", "pad_packed_sequence", "(", "packed_outputs", ",", "batch_first", "=", "True", ")", "\n", "outputs", ".", "append", "(", "inputs", ")", "\n", "", "outputs", "=", "torch", ".", "stack", "(", "outputs", ",", "-", "1", ")", "\n", "outputs", "=", "self", ".", "weights", "(", "outputs", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.seq2seq.ConcatLayersRNN.__init__": [[251, 261], ["torch.Module.__init__", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "layers.append", "torch.GRU", "torch.GRU", "torch.GRU"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_input", ",", "config", ")", ":", "\n", "        ", "super", "(", "ConcatLayersRNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "layers", "=", "[", "]", "\n", "dim_last", "=", "dim_input", "\n", "self", ".", "concat_input", "=", "config", "[", "'concat-input'", "]", "\n", "for", "i", "in", "range", "(", "config", "[", "'layers'", "]", ")", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "GRU", "(", "dim_last", ",", "config", "[", "'dim'", "]", ",", "bidirectional", "=", "True", ",", "num_layers", "=", "1", ",", "batch_first", "=", "True", ")", ")", "\n", "dim_last", "=", "config", "[", "'dim'", "]", "*", "2", "\n", "", "self", ".", "rnns", "=", "nn", ".", "ModuleList", "(", "layers", ")", "\n", "self", ".", "dim_output", "=", "(", "dim_input", "if", "config", "[", "'concat-input'", "]", "else", "0", ")", "+", "config", "[", "'dim'", "]", "*", "2", "*", "config", "[", "'layers'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.seq2seq.ConcatLayersRNN.forward": [[262, 273], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.pack_padded_sequence", "torch.pack_padded_sequence", "torch.pack_padded_sequence", "rnn", "torch.pad_packed_sequence", "torch.pad_packed_sequence", "torch.pad_packed_sequence", "torch.cat.append", "torch.cat.append", "torch.cat.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "seqlens", ",", "indices", "=", "None", ")", ":", "\n", "        ", "outputs", "=", "[", "]", "\n", "if", "self", ".", "concat_input", ":", "\n", "            ", "outputs", ".", "append", "(", "inputs", ")", "\n", "", "for", "rnn", "in", "self", ".", "rnns", ":", "\n", "            ", "packed_inputs", "=", "rnn_utils", ".", "pack_padded_sequence", "(", "inputs", ",", "seqlens", ",", "batch_first", "=", "True", ")", "\n", "packed_outputs", ",", "_", "=", "rnn", "(", "packed_inputs", ")", "\n", "inputs", ",", "_", "=", "rnn_utils", ".", "pad_packed_sequence", "(", "packed_outputs", ",", "batch_first", "=", "True", ")", "\n", "outputs", ".", "append", "(", "inputs", ")", "\n", "", "outputs", "=", "torch", ".", "cat", "(", "outputs", ",", "-", "1", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.seq2seq.SplitRNN.__init__": [[277, 285], ["torch.Module.__init__", "torch.GRU", "torch.GRU", "torch.GRU", "print"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["    ", "def", "__init__", "(", "self", ",", "dim_input", ",", "config", ")", ":", "\n", "        ", "super", "(", "SplitRNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_outputs", "=", "config", "[", "'outputs'", "]", "\n", "self", ".", "rnn", "=", "nn", ".", "GRU", "(", "dim_input", ",", "config", "[", "'dim'", "]", "*", "self", ".", "num_outputs", ",", "bidirectional", "=", "True", ",", "num_layers", "=", "config", "[", "'layers'", "]", ",", "\n", "batch_first", "=", "True", ")", "\n", "self", ".", "dim_output", "=", "config", "[", "'dim'", "]", "*", "2", "\n", "self", ".", "dim_hidden", "=", "config", "[", "'dim'", "]", "\n", "print", "(", "\"SplitRNN:\"", ",", "self", ".", "dim_output", ",", "self", ".", "dim_hidden", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.seq2seq.SplitRNN.forward": [[286, 297], ["torch.pack_padded_sequence", "torch.pack_padded_sequence", "torch.pack_padded_sequence", "seq2seq.SplitRNN.rnn", "torch.pad_packed_sequence", "torch.pad_packed_sequence", "torch.pad_packed_sequence", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "range", "tuple", "outputs.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "seqlens", ",", "indices", "=", "None", ")", ":", "\n", "        ", "packed_inputs", "=", "rnn_utils", ".", "pack_padded_sequence", "(", "inputs", ",", "seqlens", ",", "batch_first", "=", "True", ")", "\n", "packed_outputs", ",", "_", "=", "self", ".", "rnn", "(", "packed_inputs", ")", "\n", "outputs", ",", "_", "=", "rnn_utils", ".", "pad_packed_sequence", "(", "packed_outputs", ",", "batch_first", "=", "True", ")", "\n", "\n", "splits", "=", "torch", ".", "split", "(", "outputs", ",", "self", ".", "dim_hidden", ",", "dim", "=", "-", "1", ")", "\n", "\n", "outputs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_outputs", ")", ":", "\n", "            ", "outputs", ".", "append", "(", "torch", ".", "cat", "(", "(", "splits", "[", "i", "]", ",", "splits", "[", "self", ".", "num_outputs", "+", "i", "]", ")", ",", "-", "1", ")", ")", "# concat fw and bw", "\n", "", "return", "tuple", "(", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.seq2seq.RNNMultitask1.__init__": [[308, 320], ["torch.Module.__init__", "torch.GRU", "torch.GRU", "torch.GRU", "torch.GRU", "torch.GRU", "torch.GRU", "torch.GRU", "torch.GRU", "torch.GRU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_input", ",", "config", ")", ":", "\n", "        ", "super", "(", "RNNMultitask1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim_output", "=", "config", "[", "'dim'", "]", "*", "2", "\n", "self", ".", "rnn_ner", "=", "nn", ".", "GRU", "(", "dim_input", ",", "config", "[", "'dim'", "]", ",", "bidirectional", "=", "True", ",", "num_layers", "=", "1", ",", "batch_first", "=", "True", ")", "\n", "self", ".", "rnn_coref", "=", "nn", ".", "GRU", "(", "dim_input", ",", "config", "[", "'dim'", "]", ",", "bidirectional", "=", "True", ",", "num_layers", "=", "1", ",", "batch_first", "=", "True", ")", "\n", "self", ".", "rnn_rel", "=", "nn", ".", "GRU", "(", "dim_input", ",", "config", "[", "'dim'", "]", ",", "bidirectional", "=", "True", ",", "num_layers", "=", "1", ",", "batch_first", "=", "True", ")", "\n", "self", ".", "gate_nc", "=", "nn", ".", "Linear", "(", "self", ".", "dim_output", ",", "self", ".", "dim_output", ")", "\n", "self", ".", "gate_nr", "=", "nn", ".", "Linear", "(", "self", ".", "dim_output", ",", "self", ".", "dim_output", ")", "\n", "self", ".", "gate_cn", "=", "nn", ".", "Linear", "(", "self", ".", "dim_output", ",", "self", ".", "dim_output", ")", "\n", "self", ".", "gate_cr", "=", "nn", ".", "Linear", "(", "self", ".", "dim_output", ",", "self", ".", "dim_output", ")", "\n", "self", ".", "gate_rn", "=", "nn", ".", "Linear", "(", "self", ".", "dim_output", ",", "self", ".", "dim_output", ")", "\n", "self", ".", "gate_rc", "=", "nn", ".", "Linear", "(", "self", ".", "dim_output", ",", "self", ".", "dim_output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.seq2seq.RNNMultitask1.forward": [[321, 337], ["isinstance", "seq2seq.seq", "seq2seq.seq", "seq2seq.seq", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "seq2seq.RNNMultitask1.gate_nr", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "seq2seq.RNNMultitask1.gate_cr", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "seq2seq.RNNMultitask1.gate_rc", "seq2seq.RNNMultitask1.gate_nc", "seq2seq.RNNMultitask1.gate_cn", "seq2seq.RNNMultitask1.gate_rn"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.seq2seq.seq", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.seq2seq.seq", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.seq2seq.seq"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "seqlens", ",", "indices", "=", "None", ")", ":", "\n", "        ", "if", "isinstance", "(", "inputs", ",", "tuple", ")", ":", "\n", "            ", "x_ner", ",", "x_coref", ",", "x_rel", "=", "inputs", "\n", "", "else", ":", "\n", "            ", "x_ner", ",", "x_coref", ",", "x_rel", "=", "inputs", ",", "inputs", ",", "inputs", "\n", "\n", "", "h_ner", "=", "seq", "(", "self", ".", "rnn_ner", ",", "x_ner", ",", "seqlens", ")", "\n", "h_coref", "=", "seq", "(", "self", ".", "rnn_coref", ",", "x_coref", ",", "seqlens", ")", "\n", "h_rel", "=", "seq", "(", "self", ".", "rnn_rel", ",", "x_rel", ",", "seqlens", ")", "\n", "\n", "out_ner", "=", "h_ner", "+", "torch", ".", "sigmoid", "(", "self", ".", "gate_nc", "(", "h_ner", ")", ")", "*", "h_coref", "+", "torch", ".", "sigmoid", "(", "self", ".", "gate_nr", "(", "h_ner", ")", ")", "*", "h_rel", "\n", "out_coref", "=", "h_coref", "+", "torch", ".", "sigmoid", "(", "self", ".", "gate_cn", "(", "h_coref", ")", ")", "*", "h_ner", "+", "torch", ".", "sigmoid", "(", "\n", "self", ".", "gate_cr", "(", "h_coref", ")", ")", "*", "h_rel", "\n", "out_rel", "=", "h_rel", "+", "torch", ".", "sigmoid", "(", "self", ".", "gate_rn", "(", "h_rel", ")", ")", "*", "h_ner", "+", "torch", ".", "sigmoid", "(", "self", ".", "gate_rc", "(", "h_rel", ")", ")", "*", "h_coref", "\n", "\n", "return", "out_ner", ",", "out_coref", ",", "out_rel", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.seq2seq.RNNResidual.__init__": [[341, 345], ["torch.Module.__init__", "seq2seq.seq2seq_create"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.seq2seq_create"], ["    ", "def", "__init__", "(", "self", ",", "dim_input", ",", "config", ")", ":", "\n", "        ", "super", "(", "RNNResidual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer", "=", "seq2seq_create", "(", "dim_input", ",", "config", "[", "'layer'", "]", ")", "\n", "self", ".", "dim_output", "=", "dim_input", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.seq2seq.RNNResidual.forward": [[346, 356], ["seq2seq.RNNResidual.layer", "isinstance", "isinstance", "tuple", "zip"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "seqlens", ",", "indices", "=", "None", ")", ":", "\n", "        ", "hiddens", "=", "self", ".", "layer", "(", "inputs", ",", "seqlens", ")", "\n", "if", "isinstance", "(", "hiddens", ",", "tuple", ")", ":", "\n", "            ", "if", "isinstance", "(", "inputs", ",", "tuple", ")", ":", "\n", "                ", "tmp", "=", "[", "x", "+", "y", "for", "x", ",", "y", "in", "zip", "(", "inputs", ",", "hiddens", ")", "]", "\n", "", "else", ":", "\n", "                ", "tmp", "=", "[", "inputs", "+", "y", "for", "y", "in", "hiddens", "]", "\n", "", "return", "tuple", "(", "tmp", ")", "\n", "", "else", ":", "\n", "            ", "return", "inputs", "+", "hiddens", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.seq2seq.LayerSplit.__init__": [[360, 374], ["torch.Module.__init__", "isinstance", "len", "print", "print", "seq2seq.LayerSplit.dim_hidden.extend", "seq2seq.LayerSplit.dim_hidden.extend", "int", "int", "int", "range", "range"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["    ", "def", "__init__", "(", "self", ",", "dim_input", ",", "split", ")", ":", "\n", "        ", "super", "(", "LayerSplit", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "isinstance", "(", "split", ",", "list", ")", ":", "\n", "            ", "self", ".", "dim_hidden", "=", "[", "]", "\n", "self", ".", "dim_hidden", ".", "extend", "(", "[", "int", "(", "x", "/", "2", ")", "for", "x", "in", "split", "]", ")", "\n", "self", ".", "dim_hidden", ".", "extend", "(", "[", "int", "(", "x", "/", "2", ")", "for", "x", "in", "split", "]", ")", "\n", "self", ".", "dim_outputs", "=", "split", "\n", "", "else", ":", "\n", "            ", "dim_hidden", "=", "int", "(", "dim_input", "/", "(", "2", "*", "split", ")", ")", "\n", "self", ".", "dim_hidden", "=", "[", "dim_hidden", "for", "_", "in", "range", "(", "split", ")", "]", "\n", "self", ".", "dim_outputs", "=", "[", "2", "*", "dim_hidden", "for", "_", "in", "range", "(", "split", ")", "]", "\n", "", "self", ".", "num_outputs", "=", "len", "(", "self", ".", "dim_outputs", ")", "\n", "print", "(", "'hidden:'", ",", "self", ".", "dim_hidden", ")", "\n", "print", "(", "'output:'", ",", "self", ".", "num_outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.seq2seq.LayerSplit.forward": [[375, 383], ["torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "range", "tuple", "outputs.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "splits", "=", "torch", ".", "split", "(", "inputs", ",", "self", ".", "dim_hidden", ",", "dim", "=", "-", "1", ")", "\n", "\n", "outputs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_outputs", ")", ":", "\n", "            ", "outputs", ".", "append", "(", "torch", ".", "cat", "(", "(", "splits", "[", "i", "]", ",", "splits", "[", "self", ".", "num_outputs", "+", "i", "]", ")", ",", "-", "1", ")", ")", "# concat fw and bw", "\n", "\n", "", "return", "tuple", "(", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.seq2seq.RNNLayers.__init__": [[387, 411], ["torch.Module.__init__", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "seq2seq.seq2seq_create", "layers.append", "print", "seq2seq.LayerSplit", "torch.Sequential", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.seq2seq_create", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["    ", "def", "__init__", "(", "self", ",", "dim_input", ",", "config", ")", ":", "\n", "        ", "super", "(", "RNNLayers", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "'linear'", "in", "config", ":", "\n", "            ", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "dim_input", ",", "config", "[", "'linear'", "]", ")", "\n", "dim_last", "=", "config", "[", "'linear'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "linear", "=", "nn", ".", "Sequential", "(", ")", "\n", "dim_last", "=", "dim_input", "\n", "\n", "", "layers", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "config", "[", "'layers'", "]", ")", ":", "\n", "            ", "layer", "=", "seq2seq_create", "(", "dim_last", ",", "config", "[", "'layer'", "]", ")", "\n", "layers", ".", "append", "(", "layer", ")", "\n", "dim_last", "=", "layer", ".", "dim_output", "\n", "", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "layers", ")", "\n", "self", ".", "dim_output", "=", "dim_last", "\n", "\n", "if", "'split'", "in", "config", ":", "\n", "            ", "print", "(", "\"WARNING: split enabled\"", ")", "\n", "self", ".", "split", "=", "LayerSplit", "(", "self", ".", "dim_output", ",", "config", "[", "'split'", "]", ")", "\n", "self", ".", "dim_output", "=", "self", ".", "split", ".", "dim_outputs", "\n", "", "else", ":", "\n", "            ", "self", ".", "split", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.seq2seq.RNNLayers.forward": [[412, 417], ["seq2seq.RNNLayers.linear", "seq2seq.RNNLayers.split", "layer"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "inputs", ",", "seqlens", ",", "indices", "=", "None", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "linear", "(", "inputs", ")", "\n", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "outputs", "=", "layer", "(", "outputs", ",", "seqlens", ")", "\n", "", "return", "self", ".", "split", "(", "outputs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.seq2seq.sequence_mask": [[18, 30], ["sequence_length.size", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long.unsqueeze().expand", "sequence_length.unsqueeze().expand_as", "sequence_length.data.max", "seq_range_expand.cuda.cuda", "torch.arange", "torch.arange", "torch.arange", "torch.arange().long.unsqueeze", "sequence_length.unsqueeze"], "function", ["None"], ["def", "sequence_mask", "(", "sequence_length", ",", "max_len", "=", "None", ")", ":", "\n", "    ", "if", "max_len", "is", "None", ":", "\n", "        ", "max_len", "=", "sequence_length", ".", "data", ".", "max", "(", ")", "\n", "", "batch_size", "=", "sequence_length", ".", "size", "(", "0", ")", "\n", "seq_range", "=", "torch", ".", "arange", "(", "0", ",", "max_len", ")", ".", "long", "(", ")", "\n", "seq_range_expand", "=", "seq_range", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "batch_size", ",", "max_len", ")", "\n", "# seq_range_expand = Variable(seq_range_expand)", "\n", "if", "sequence_length", ".", "is_cuda", ":", "\n", "        ", "seq_range_expand", "=", "seq_range_expand", ".", "cuda", "(", ")", "\n", "", "seq_length_expand", "=", "(", "sequence_length", ".", "unsqueeze", "(", "1", ")", "\n", ".", "expand_as", "(", "seq_range_expand", ")", ")", "\n", "return", "seq_range_expand", "<", "seq_length_expand", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.seq2seq.seq2seq_register": [[35, 38], ["print"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["def", "seq2seq_register", "(", "name", ",", "factory", ")", ":", "\n", "    ", "print", "(", "\"register\"", ",", "name", ",", "factory", ")", "\n", "seq2seq_modules", "[", "name", "]", "=", "factory", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.seq2seq.seq2seq_create": [[40, 90], ["seq2seq.LayerNone", "seq2seq.RNNLayers", "seq2seq.RNNResidual", "seq2seq.Seq2seq", "modules.qrnn.BiQRNN", "modules.masked_qrnn.MaskedBiQRNN", "modules.transformer.Transformer", "modules.test1.Test1", "modules.test2.Test2", "modules.test3.Test3", "modules.test4.Test4", "modules.test5.Test5", "modules.cnn1.CNN1", "modules.cnn1.CNN2", "modules.cnn1.CNN3", "seq2seq.StackedLSTM", "seq2seq.MultiOutRNN", "seq2seq.ConcatLayersRNN", "seq2seq.ResRNN", "seq2seq.SplitRNN", "seq2seq.RNNMultitask1", "modules.seq2seqs.augmented_lstm.AugmentedLSTM", "BaseException"], "function", ["None"], ["", "def", "seq2seq_create", "(", "dim_input", ",", "config", ")", ":", "\n", "# kzaporoj - TODO - leave it like this with different options?", "\n", "    ", "if", "config", "[", "'type'", "]", "==", "'none'", ":", "\n", "        ", "return", "LayerNone", "(", "dim_input", ",", "config", ")", "\n", "", "elif", "config", "[", "'type'", "]", "==", "'layers'", ":", "\n", "        ", "return", "RNNLayers", "(", "dim_input", ",", "config", ")", "\n", "", "elif", "config", "[", "'type'", "]", "==", "'residual'", ":", "\n", "        ", "return", "RNNResidual", "(", "dim_input", ",", "config", ")", "\n", "", "elif", "config", "[", "'type'", "]", "==", "'lstm'", "or", "config", "[", "'type'", "]", "==", "'gru'", ":", "\n", "        ", "return", "Seq2seq", "(", "dim_input", ",", "config", ")", "\n", "", "elif", "config", "[", "'type'", "]", "==", "'qrnn'", ":", "\n", "        ", "return", "BiQRNN", "(", "dim_input", ",", "config", ")", "\n", "", "elif", "config", "[", "'type'", "]", "==", "'qrnn2'", ":", "\n", "        ", "return", "MaskedBiQRNN", "(", "dim_input", ",", "config", ")", "\n", "", "elif", "config", "[", "'type'", "]", "==", "'transformer'", ":", "\n", "        ", "return", "Transformer", "(", "dim_input", ",", "config", ")", "\n", "", "elif", "config", "[", "'type'", "]", "==", "'test1'", ":", "\n", "        ", "return", "Test1", "(", "dim_input", ",", "config", ")", "\n", "", "elif", "config", "[", "'type'", "]", "==", "'test2'", ":", "\n", "        ", "return", "Test2", "(", "dim_input", ",", "config", ")", "\n", "", "elif", "config", "[", "'type'", "]", "==", "'test3'", ":", "\n", "        ", "return", "Test3", "(", "dim_input", ",", "config", ")", "\n", "", "elif", "config", "[", "'type'", "]", "==", "'test4'", ":", "\n", "        ", "return", "Test4", "(", "dim_input", ",", "config", ")", "\n", "", "elif", "config", "[", "'type'", "]", "==", "'test5'", ":", "\n", "        ", "return", "Test5", "(", "dim_input", ",", "config", ")", "\n", "", "elif", "config", "[", "'type'", "]", "==", "'cnn1'", ":", "\n", "        ", "return", "CNN1", "(", "dim_input", ",", "config", ")", "\n", "", "elif", "config", "[", "'type'", "]", "==", "'cnn2'", ":", "\n", "        ", "return", "CNN2", "(", "dim_input", ",", "config", ")", "\n", "", "elif", "config", "[", "'type'", "]", "==", "'cnn3'", ":", "\n", "        ", "return", "CNN3", "(", "dim_input", ",", "config", ")", "\n", "", "elif", "config", "[", "'type'", "]", "==", "'stacked-lstm'", ":", "\n", "        ", "return", "StackedLSTM", "(", "dim_input", ",", "config", ")", "\n", "", "elif", "config", "[", "'type'", "]", "==", "'multi-out-rnn'", ":", "\n", "        ", "return", "MultiOutRNN", "(", "dim_input", ",", "config", ")", "\n", "", "elif", "config", "[", "'type'", "]", "==", "'concat-layers-rnn'", ":", "\n", "        ", "return", "ConcatLayersRNN", "(", "dim_input", ",", "config", ")", "\n", "", "elif", "config", "[", "'type'", "]", "==", "'res-rnn'", ":", "\n", "        ", "return", "ResRNN", "(", "dim_input", ",", "config", ")", "\n", "", "elif", "config", "[", "'type'", "]", "==", "'split-rnn'", ":", "\n", "        ", "return", "SplitRNN", "(", "dim_input", ",", "config", ")", "\n", "", "elif", "config", "[", "'type'", "]", "==", "'multitask-1'", ":", "\n", "        ", "return", "RNNMultitask1", "(", "dim_input", ",", "config", ")", "\n", "", "elif", "config", "[", "'type'", "]", "==", "'augmented-lstm'", ":", "\n", "        ", "return", "AugmentedLSTM", "(", "dim_input", ",", "config", ")", "\n", "", "elif", "config", "[", "'type'", "]", "in", "seq2seq_modules", ":", "\n", "        ", "return", "seq2seq_modules", "[", "config", "[", "'type'", "]", "]", "(", "dim_input", ",", "config", ")", "\n", "", "else", ":", "\n", "        ", "raise", "BaseException", "(", "\"no such type\"", ",", "config", "[", "'type'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.seq2seq.seq": [[299, 304], ["torch.pack_padded_sequence", "rnn", "torch.pad_packed_sequence"], "function", ["None"], ["", "", "def", "seq", "(", "rnn", ",", "inputs", ",", "seqlens", ")", ":", "\n", "    ", "packed_inputs", "=", "rnn_utils", ".", "pack_padded_sequence", "(", "inputs", ",", "seqlens", ",", "batch_first", "=", "True", ")", "\n", "packed_outputs", ",", "_", "=", "rnn", "(", "packed_inputs", ")", "\n", "outputs", ",", "_", "=", "rnn_utils", ".", "pad_packed_sequence", "(", "packed_outputs", ",", "batch_first", "=", "True", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test4.MyGRU.__init__": [[8, 16], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_input", ",", "config", ")", ":", "\n", "        ", "super", "(", "MyGRU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim_input", "=", "dim_input", "\n", "self", ".", "dim_hidden", "=", "64", "\n", "self", ".", "input", "=", "nn", ".", "Linear", "(", "self", ".", "dim_input", "+", "self", ".", "dim_hidden", ",", "self", ".", "dim_hidden", ")", "\n", "self", ".", "update", "=", "nn", ".", "Linear", "(", "self", ".", "dim_input", "+", "self", ".", "dim_hidden", ",", "self", ".", "dim_hidden", ")", "\n", "self", ".", "reset", "=", "nn", ".", "Linear", "(", "self", ".", "dim_input", "+", "self", ".", "dim_hidden", ",", "self", ".", "dim_hidden", ")", "\n", "self", ".", "dim", "=", "self", ".", "dim_hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test4.MyGRU.forward": [[17, 32], ["inputs.size", "torch.Tensor().zero_().cuda", "torch.Tensor().zero_().cuda", "torch.Tensor().zero_().cuda", "torch.Tensor().zero_().cuda", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.append", "torch.cat.append", "torch.Tensor().zero_", "torch.Tensor().zero_", "torch.Tensor().zero_", "torch.Tensor().zero_", "test4.MyGRU.update", "test4.MyGRU.reset", "h_next.unsqueeze", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "test4.MyGRU.input"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.update", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.masked_qrnn.MaskedQRNNLayer.reset"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "# print('inputs:', inputs.size()) ", "\n", "        ", "batch", ",", "length", ",", "_", "=", "inputs", ".", "size", "(", ")", "\n", "h_prev", "=", "torch", ".", "Tensor", "(", "batch", ",", "self", ".", "dim_hidden", ")", ".", "zero_", "(", ")", ".", "cuda", "(", ")", "\n", "outputs", "=", "[", "]", "\n", "for", "pos", "in", "range", "(", "length", ")", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "(", "inputs", "[", ":", ",", "pos", ",", ":", "]", ",", "h_prev", ")", ",", "1", ")", "\n", "z", "=", "torch", ".", "sigmoid", "(", "self", ".", "update", "(", "x", ")", ")", "\n", "r", "=", "torch", ".", "sigmoid", "(", "self", ".", "reset", "(", "x", ")", ")", "\n", "y", "=", "torch", ".", "cat", "(", "(", "inputs", "[", ":", ",", "pos", ",", ":", "]", ",", "h_prev", "*", "r", ")", ",", "1", ")", "\n", "h_next", "=", "(", "1", "-", "z", ")", "*", "h_prev", "+", "z", "*", "torch", ".", "tanh", "(", "self", ".", "input", "(", "y", ")", ")", "\n", "outputs", ".", "append", "(", "h_next", ".", "unsqueeze", "(", "1", ")", ")", "\n", "h_prev", "=", "h_next", "\n", "", "outputs", "=", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test4.Test4.__init__": [[35, 40], ["torch.Module.__init__", "test4.MyGRU", "test4.MyGRU"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_input", ",", "config", ")", ":", "\n", "        ", "super", "(", "Test4", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fw", "=", "MyGRU", "(", "dim_input", ",", "config", ")", "\n", "self", ".", "bw", "=", "MyGRU", "(", "dim_input", ",", "config", ")", "\n", "self", ".", "dim", "=", "self", ".", "fw", ".", "dim", "+", "self", ".", "bw", ".", "dim", "\n", "# self.fw = nn.GRU(dim_input, 64, batch_first=True)", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test4.Test4.forward": [[44, 49], ["test4.Test4.fw", "test4.Test4.bw", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inputs.flip", "test4.Test4.flip"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "seqlens", ")", ":", "\n", "        ", "f", "=", "self", ".", "fw", "(", "inputs", ")", "\n", "b", "=", "self", ".", "bw", "(", "inputs", ".", "flip", "(", "1", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "f", ",", "b", ".", "flip", "(", "1", ")", ")", ",", "2", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.masked_qrnn.MaskedQRNNLayer.__init__": [[29, 47], ["torch.Module.__init__", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", "=", "None", ",", "save_prev_x", "=", "False", ",", "zoneout", "=", "0", ",", "window", "=", "1", ",", "output_gate", "=", "True", ",", "\n", "use_cuda", "=", "True", ")", ":", "\n", "        ", "super", "(", "MaskedQRNNLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "window", "in", "[", "1", ",", "\n", "2", "]", ",", "\"This QRNN implementation currently only handles convolutional window of size 1 or size 2\"", "\n", "self", ".", "window", "=", "window", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "if", "hidden_size", "else", "input_size", "\n", "self", ".", "zoneout", "=", "zoneout", "\n", "self", ".", "save_prev_x", "=", "save_prev_x", "\n", "self", ".", "prevX", "=", "None", "\n", "self", ".", "output_gate", "=", "output_gate", "\n", "self", ".", "use_cuda", "=", "use_cuda", "\n", "\n", "# One large matmul with concat is faster than N small matmuls and no concat", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "self", ".", "window", "*", "self", ".", "input_size", ",", "\n", "3", "*", "self", ".", "hidden_size", "if", "self", ".", "output_gate", "else", "2", "*", "self", ".", "hidden_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.masked_qrnn.MaskedQRNNLayer.reset": [[48, 51], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "# If you are saving the previous value of x, you should call this when starting with a new state", "\n", "        ", "self", ".", "prevX", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.masked_qrnn.MaskedQRNNLayer.forward": [[52, 117], ["X.size", "masked_qrnn.MaskedQRNNLayer.linear", "torch.nn.functional.tanh", "torch.nn.functional.tanh", "torch.nn.functional.tanh", "torch.nn.functional.tanh", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "seqmask.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze().expand_as", "Z.contiguous.contiguous.contiguous", "F.contiguous.contiguous.contiguous", "Y.view.view.view", "Y.view.view.chunk", "Y.view.view.view", "Y.view.view.chunk", "ForgetMult", "torch.autograd.Variable", "torch.autograd.Variable", "torch.cat.append", "torch.cat.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "seqmask.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze", "torch.autograd.Variable", "torch.autograd.Variable", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "len", "torch.cat.append", "torch.cat.append", "F.contiguous.contiguous.data.new().bernoulli_", "F.contiguous.contiguous.data.new", "F.contiguous.contiguous.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ",", "seqmask", ",", "hidden", "=", "None", ")", ":", "\n", "        ", "seq_len", ",", "batch_size", ",", "_", "=", "X", ".", "size", "(", ")", "\n", "\n", "source", "=", "None", "\n", "if", "self", ".", "window", "==", "1", ":", "\n", "            ", "source", "=", "X", "\n", "", "elif", "self", ".", "window", "==", "2", ":", "\n", "# Construct the x_{t-1} tensor with optional x_{-1}, otherwise a zeroed out value for x_{-1}", "\n", "            ", "Xm1", "=", "[", "]", "\n", "Xm1", ".", "append", "(", "self", ".", "prevX", "if", "self", ".", "prevX", "is", "not", "None", "else", "X", "[", ":", "1", ",", ":", ",", ":", "]", "*", "0", ")", "\n", "# Note: in case of len(X) == 1, X[:-1, :, :] results in slicing of empty tensor == bad", "\n", "if", "len", "(", "X", ")", ">", "1", ":", "\n", "                ", "Xm1", ".", "append", "(", "X", "[", ":", "-", "1", ",", ":", ",", ":", "]", ")", "\n", "", "Xm1", "=", "torch", ".", "cat", "(", "Xm1", ",", "0", ")", "\n", "# Convert two (seq_len, batch_size, hidden) tensors to (seq_len, batch_size, 2 * hidden)", "\n", "source", "=", "torch", ".", "cat", "(", "[", "X", ",", "Xm1", "]", ",", "2", ")", "\n", "\n", "# Matrix multiplication for the three outputs: Z, F, O", "\n", "", "Y", "=", "self", ".", "linear", "(", "source", ")", "\n", "# Convert the tensor back to (batch, seq_len, len([Z, F, O]) * hidden_size)", "\n", "if", "self", ".", "output_gate", ":", "\n", "            ", "Y", "=", "Y", ".", "view", "(", "seq_len", ",", "batch_size", ",", "3", "*", "self", ".", "hidden_size", ")", "\n", "Z", ",", "F", ",", "O", "=", "Y", ".", "chunk", "(", "3", ",", "dim", "=", "2", ")", "\n", "", "else", ":", "\n", "            ", "Y", "=", "Y", ".", "view", "(", "seq_len", ",", "batch_size", ",", "2", "*", "self", ".", "hidden_size", ")", "\n", "Z", ",", "F", "=", "Y", ".", "chunk", "(", "2", ",", "dim", "=", "2", ")", "\n", "###", "\n", "", "Z", "=", "torch", ".", "nn", ".", "functional", ".", "tanh", "(", "Z", ")", "\n", "F", "=", "torch", ".", "nn", ".", "functional", ".", "sigmoid", "(", "F", ")", "\n", "\n", "seqmask", "=", "seqmask", ".", "unsqueeze", "(", "2", ")", ".", "expand_as", "(", "F", ")", "\n", "F", "=", "F", "*", "seqmask", "\n", "\n", "# If zoneout is specified, we perform dropout on the forget gates in F", "\n", "# If an element of F is zero, that means the corresponding neuron keeps the old value", "\n", "if", "self", ".", "zoneout", ":", "\n", "            ", "if", "self", ".", "training", ":", "\n", "                ", "mask", "=", "Variable", "(", "F", ".", "data", ".", "new", "(", "*", "F", ".", "size", "(", ")", ")", ".", "bernoulli_", "(", "1", "-", "self", ".", "zoneout", ")", ",", "requires_grad", "=", "False", ")", "\n", "F", "=", "F", "*", "mask", "\n", "", "else", ":", "\n", "                ", "F", "*=", "1", "-", "self", ".", "zoneout", "\n", "\n", "# Ensure the memory is laid out as expected for the CUDA kernel", "\n", "# This is a null op if the tensor is already contiguous", "\n", "", "", "Z", "=", "Z", ".", "contiguous", "(", ")", "\n", "F", "=", "F", ".", "contiguous", "(", ")", "\n", "# The O gate doesn't need to be contiguous as it isn't used in the CUDA kernel", "\n", "\n", "# Forget Mult", "\n", "# For testing QRNN without ForgetMult CUDA kernel, C = Z * F may be useful", "\n", "from", "torchqrnn", ".", "forget_mult", "import", "ForgetMult", "\n", "C", "=", "ForgetMult", "(", ")", "(", "F", ",", "Z", ",", "hidden", ",", "use_cuda", "=", "self", ".", "use_cuda", ")", "\n", "\n", "# Apply (potentially optional) output gate", "\n", "if", "self", ".", "output_gate", ":", "\n", "            ", "H", "=", "torch", ".", "nn", ".", "functional", ".", "sigmoid", "(", "O", ")", "*", "C", "\n", "", "else", ":", "\n", "            ", "H", "=", "C", "\n", "", "H", "=", "H", "*", "seqmask", "\n", "\n", "# In an optimal world we may want to backprop to x_{t-1} but ...", "\n", "if", "self", ".", "window", ">", "1", "and", "self", ".", "save_prev_x", ":", "\n", "            ", "self", ".", "prevX", "=", "Variable", "(", "X", "[", "-", "1", ":", ",", ":", ",", ":", "]", ".", "data", ",", "requires_grad", "=", "False", ")", "\n", "\n", "", "return", "H", ",", "C", "[", "-", "1", ":", ",", ":", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.masked_qrnn.MaskedBiQRNNLayer.__init__": [[120, 124], ["torch.Module.__init__", "masked_qrnn.MaskedQRNNLayer", "masked_qrnn.MaskedQRNNLayer"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ")", ":", "\n", "        ", "super", "(", "MaskedBiQRNNLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "qrnn_fw", "=", "MaskedQRNNLayer", "(", "input_size", ",", "hidden_size", ")", "\n", "self", ".", "qrnn_bw", "=", "MaskedQRNNLayer", "(", "input_size", ",", "hidden_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.masked_qrnn.MaskedBiQRNNLayer.forward": [[125, 131], ["masked_qrnn.MaskedBiQRNNLayer.qrnn_fw", "masked_qrnn.MaskedBiQRNNLayer.qrnn_bw", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "X.flip", "mask.flip", "Ybw.flip"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "X", ",", "mask", "=", "input", "\n", "Yfw", ",", "_", "=", "self", ".", "qrnn_fw", "(", "X", ",", "mask", ")", "\n", "Ybw", ",", "_", "=", "self", ".", "qrnn_bw", "(", "X", ".", "flip", "(", "0", ")", ",", "mask", ".", "flip", "(", "0", ")", ")", "\n", "Y", "=", "torch", ".", "cat", "(", "(", "Yfw", ",", "Ybw", ".", "flip", "(", "0", ")", ")", ",", "2", ")", "\n", "return", "Y", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.masked_qrnn.MyDropout.__init__": [[135, 138], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "MyDropout", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.masked_qrnn.MyDropout.forward": [[139, 143], ["masked_qrnn.MyDropout.dropout"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.dropout"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "X", ",", "mask", "=", "input", "\n", "Y", "=", "self", ".", "dropout", "(", "X", ")", "\n", "return", "Y", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.masked_qrnn.MaskedBiQRNN.__init__": [[146, 163], ["torch.Module.__init__", "print", "range", "torch.Sequential", "torch.Sequential", "layers.append", "masked_qrnn.MaskedBiQRNNLayer", "layers.append", "masked_qrnn.MyDropout"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "config", ")", ":", "\n", "        ", "super", "(", "MaskedBiQRNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "print", "(", "\"BiQRNN: batch_first only and no sequence_length\"", ")", "\n", "num_layers", "=", "config", "[", "'layers'", "]", "\n", "hidden_size", "=", "config", "[", "'dim'", "]", "\n", "dropout", "=", "config", "[", "'dropout'", "]", "\n", "\n", "layers", "=", "[", "]", "\n", "last_size", "=", "input_size", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "layers", ".", "append", "(", "MaskedBiQRNNLayer", "(", "last_size", ",", "hidden_size", ")", ")", "\n", "if", "i", "<", "num_layers", "-", "1", ":", "\n", "                ", "layers", ".", "append", "(", "MyDropout", "(", "dropout", ")", ")", "\n", "", "last_size", "=", "hidden_size", "*", "2", "\n", "\n", "", "self", ".", "dim", "=", "hidden_size", "*", "2", "\n", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.masked_qrnn.MaskedBiQRNN.forward": [[164, 169], ["util.sequence.get_mask_from_sequence_lengths().permute().float", "X.permute.permute.permute", "masked_qrnn.MaskedBiQRNN.layers", "Y.permute", "util.sequence.get_mask_from_sequence_lengths().permute", "util.sequence.get_mask_from_sequence_lengths", "X.permute.permute.size"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.sequence.get_mask_from_sequence_lengths"], ["", "def", "forward", "(", "self", ",", "X", ",", "seqlens", ")", ":", "\n", "        ", "mask", "=", "get_mask_from_sequence_lengths", "(", "seqlens", ",", "X", ".", "size", "(", "1", ")", ")", ".", "permute", "(", "1", ",", "0", ")", ".", "float", "(", ")", "\n", "X", "=", "X", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "Y", ",", "_", "=", "self", ".", "layers", "(", "(", "X", ",", "mask", ")", ")", "\n", "return", "Y", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test5.AverageLayer1.__init__": [[11, 14], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "w", ")", ":", "\n", "        ", "super", "(", "AverageLayer1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "w", "=", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test5.AverageLayer1.forward": [[15, 26], ["range", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "outputs", "=", "inputs", "\n", "denom", "=", "1", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "w", "+", "1", ")", ":", "\n", "            ", "l", "=", "F", ".", "pad", "(", "inputs", "[", ":", ",", "i", ":", ",", ":", "]", ",", "(", "0", ",", "0", ",", "0", ",", "i", ",", "0", ",", "0", ")", ",", "\"constant\"", ",", "0", ")", "\n", "r", "=", "F", ".", "pad", "(", "inputs", "[", ":", ",", "0", ":", "-", "i", ",", ":", "]", ",", "(", "0", ",", "0", ",", "i", ",", "0", ",", "0", ",", "0", ")", ",", "\"constant\"", ",", "0", ")", "\n", "outputs", "=", "l", "+", "outputs", "+", "r", "\n", "denom", "+=", "2", "\n", "\n", "", "return", "outputs", "/", "denom", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test5.AverageLayer2.__init__": [[29, 32], ["torch.Module.__init__", "torch.AvgPool1d", "torch.AvgPool1d", "torch.AvgPool1d"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "w", ")", ":", "\n", "        ", "super", "(", "AverageLayer2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg", "=", "nn", ".", "AvgPool1d", "(", "2", "*", "w", "+", "1", ",", "stride", "=", "1", ",", "padding", "=", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test5.AverageLayer2.forward": [[33, 35], ["test5.AverageLayer2.avg().permute", "test5.AverageLayer2.avg", "inputs.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "return", "self", ".", "avg", "(", "inputs", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test5.MemoryBank.__init__": [[38, 50], ["torch.Module.__init__", "test5.AverageLayer2", "test5.AverageLayer2", "test5.AverageLayer2", "test5.AverageLayer2", "test5.AverageLayer2", "test5.AverageLayer2", "test5.AverageLayer2", "test5.AverageLayer2", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ")", ":", "\n", "        ", "super", "(", "MemoryBank", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "b0", "=", "AverageLayer2", "(", "0", ")", "\n", "self", ".", "b1", "=", "AverageLayer2", "(", "1", ")", "\n", "self", ".", "b2", "=", "AverageLayer2", "(", "2", ")", "\n", "self", ".", "b3", "=", "AverageLayer2", "(", "4", ")", "\n", "self", ".", "b4", "=", "AverageLayer2", "(", "8", ")", "\n", "self", ".", "b5", "=", "AverageLayer2", "(", "16", ")", "\n", "self", ".", "b6", "=", "AverageLayer2", "(", "32", ")", "\n", "self", ".", "b7", "=", "AverageLayer2", "(", "64", ")", "\n", "self", ".", "key", "=", "nn", ".", "Linear", "(", "128", ",", "dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "value", "=", "nn", ".", "Linear", "(", "128", ",", "dim", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test5.MemoryBank.forward": [[51, 71], ["test5.MemoryBank.b0().unsqueeze", "test5.MemoryBank.b1().unsqueeze", "test5.MemoryBank.b2().unsqueeze", "test5.MemoryBank.b3().unsqueeze", "test5.MemoryBank.b4().unsqueeze", "test5.MemoryBank.b5().unsqueeze", "test5.MemoryBank.b6().unsqueeze", "test5.MemoryBank.b7().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "test5.MemoryBank.key", "test5.MemoryBank.value", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.softmax().unsqueeze", "torch.softmax().unsqueeze", "torch.softmax().unsqueeze", "torch.softmax().unsqueeze", "torch.softmax().unsqueeze", "torch.softmax().unsqueeze", "torch.softmax().unsqueeze", "torch.softmax().unsqueeze", "torch.softmax().unsqueeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "test5.MemoryBank.b0", "test5.MemoryBank.b1", "test5.MemoryBank.b2", "test5.MemoryBank.b3", "test5.MemoryBank.b4", "test5.MemoryBank.b5", "test5.MemoryBank.b6", "test5.MemoryBank.b7", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "test5.MemoryBank.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "m0", "=", "self", ".", "b0", "(", "inputs", ")", ".", "unsqueeze", "(", "-", "2", ")", "\n", "m1", "=", "self", ".", "b1", "(", "inputs", ")", ".", "unsqueeze", "(", "-", "2", ")", "\n", "m2", "=", "self", ".", "b2", "(", "inputs", ")", ".", "unsqueeze", "(", "-", "2", ")", "\n", "m3", "=", "self", ".", "b3", "(", "inputs", ")", ".", "unsqueeze", "(", "-", "2", ")", "\n", "m4", "=", "self", ".", "b4", "(", "inputs", ")", ".", "unsqueeze", "(", "-", "2", ")", "\n", "m5", "=", "self", ".", "b5", "(", "inputs", ")", ".", "unsqueeze", "(", "-", "2", ")", "\n", "m6", "=", "self", ".", "b6", "(", "inputs", ")", ".", "unsqueeze", "(", "-", "2", ")", "\n", "m7", "=", "self", ".", "b7", "(", "inputs", ")", ".", "unsqueeze", "(", "-", "2", ")", "\n", "M", "=", "torch", ".", "cat", "(", "(", "m0", ",", "m1", ",", "m2", ",", "m3", ",", "m4", ",", "m5", ",", "m6", ",", "m7", ")", ",", "-", "2", ")", "\n", "# print('inputs:', inputs.size())", "\n", "# print('M:', M.size())", "\n", "k", "=", "self", ".", "key", "(", "inputs", ")", "\n", "v", "=", "self", ".", "value", "(", "M", ")", "\n", "scores", "=", "torch", ".", "matmul", "(", "v", ",", "k", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "scores", "=", "torch", ".", "softmax", "(", "scores", ",", "dim", "=", "-", "1", ")", ".", "unsqueeze", "(", "-", "2", ")", "\n", "# print('scores:', scores.size())", "\n", "# print(scores[0,0,:,:])", "\n", "out", "=", "torch", ".", "matmul", "(", "scores", ",", "M", ")", ".", "squeeze", "(", "-", "2", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test5.MyBlock.__init__": [[74, 80], ["torch.Module.__init__", "test5.MemoryBank", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "modules.misc.misc.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MyBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "memory", "=", "MemoryBank", "(", "32", ")", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "128", ",", "128", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "128", ",", "128", ")", "\n", "self", ".", "ln", "=", "LayerNorm", "(", "128", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test5.MyBlock.forward": [[81, 87], ["test5.MyBlock.memory", "test5.MyBlock.linear1", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "test5.MyBlock.linear2", "test5.MyBlock.ln"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "h", "=", "self", ".", "memory", "(", "inputs", ")", "\n", "h", "=", "self", ".", "linear1", "(", "h", ")", "\n", "h", "=", "torch", ".", "tanh", "(", "h", ")", "\n", "h", "=", "self", ".", "linear2", "(", "h", ")", "\n", "return", "self", ".", "ln", "(", "h", "+", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test5.BN.__init__": [[90, 93], ["torch.Module.__init__", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ")", ":", "\n", "        ", "super", "(", "BN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm1d", "(", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test5.BN.forward": [[94, 96], ["test5.BN.bn().permute", "test5.BN.bn", "inputs.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "return", "self", ".", "bn", "(", "inputs", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test5.Test5.__init__": [[99, 112], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "test5.MyBlock", "test5.MyBlock", "test5.MyBlock", "test5.MyBlock", "test5.MyBlock"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_input", ",", "config", ")", ":", "\n", "        ", "super", "(", "Test5", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "128", "\n", "\n", "layers", "=", "[", "\n", "nn", ".", "Linear", "(", "dim_input", ",", "self", ".", "dim", ")", ",", "\n", "MyBlock", "(", ")", ",", "\n", "MyBlock", "(", ")", ",", "\n", "MyBlock", "(", ")", ",", "\n", "MyBlock", "(", ")", ",", "\n", "MyBlock", "(", ")", "\n", "]", "\n", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test5.Test5.forward": [[113, 116], ["test5.Test5.layers"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "seqlens", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "layers", "(", "inputs", ")", "\n", "return", "outputs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.qrnn.BiQRNNLayer.__init__": [[6, 11], ["torch.Module.__init__", "QRNN", "QRNN"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "dropout", "=", "0", ")", ":", "\n", "        ", "super", "(", "BiQRNNLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "from", "torchqrnn", "import", "QRNN", "\n", "self", ".", "qrnn_fw", "=", "QRNN", "(", "input_size", ",", "hidden_size", ",", "1", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "qrnn_bw", "=", "QRNN", "(", "input_size", ",", "hidden_size", ",", "1", ",", "dropout", "=", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.qrnn.BiQRNNLayer.forward": [[12, 17], ["qrnn.BiQRNNLayer.qrnn_fw", "qrnn.BiQRNNLayer.qrnn_bw", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "X.flip", "Ybw.flip"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "Yfw", ",", "_", "=", "self", ".", "qrnn_fw", "(", "X", ")", "\n", "Ybw", ",", "_", "=", "self", ".", "qrnn_bw", "(", "X", ".", "flip", "(", "0", ")", ")", "\n", "Y", "=", "torch", ".", "cat", "(", "(", "Yfw", ",", "Ybw", ".", "flip", "(", "0", ")", ")", ",", "2", ")", "\n", "return", "Y", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.qrnn.BiQRNN.__init__": [[20, 35], ["torch.Module.__init__", "print", "range", "torch.Sequential", "torch.Sequential", "layers.append", "qrnn.BiQRNNLayer"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "config", ")", ":", "\n", "        ", "super", "(", "BiQRNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "print", "(", "\"BiQRNN: batch_first only and no sequence_length\"", ")", "\n", "num_layers", "=", "config", "[", "'layers'", "]", "\n", "hidden_size", "=", "config", "[", "'dim'", "]", "\n", "dropout", "=", "config", "[", "'dropout'", "]", "\n", "\n", "layers", "=", "[", "]", "\n", "last_size", "=", "input_size", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "layers", ".", "append", "(", "BiQRNNLayer", "(", "last_size", ",", "hidden_size", ",", "dropout", "=", "dropout", ")", ")", "\n", "last_size", "=", "hidden_size", "*", "2", "\n", "\n", "", "self", ".", "dim", "=", "hidden_size", "*", "2", "\n", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.qrnn.BiQRNN.forward": [[36, 39], ["X.permute.permute.permute", "qrnn.BiQRNN.layers().permute", "qrnn.BiQRNN.layers"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ",", "seqlens", ")", ":", "\n", "        ", "X", "=", "X", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "return", "self", ".", "layers", "(", "X", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.misc.LayerNorm.__init__": [[6, 11], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_size", ",", "eps", "=", "1e-12", ")", ":", "\n", "        ", "super", "(", "LayerNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "hidden_size", ")", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "hidden_size", ")", ")", "\n", "self", ".", "variance_epsilon", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.misc.LayerNorm.forward": [[12, 17], ["x.mean", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "u", "=", "x", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "s", "=", "(", "x", "-", "u", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "x", "=", "(", "x", "-", "u", ")", "/", "torch", ".", "sqrt", "(", "s", "+", "self", ".", "variance_epsilon", ")", "\n", "return", "self", ".", "weight", "*", "x", "+", "self", ".", "bias", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.spirit.WrapperElmoTokenEmbedder._default_value_for_padding": [[30, 33], ["None"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "_default_value_for_padding", "(", ")", ":", "\n", "        ", "return", "[", "0", "]", "*", "50", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.spirit.WrapperElmoTokenEmbedder.forward": [[34, 36], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "texts", ")", ":", "\n", "        ", "pass", "\n", "# out = [[self.mapper.convert_word_to_char_ids(w) for w in text] for text in texts]", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.spirit.TextEmbedder.__init__": [[61, 93], ["torch.Module.__init__", "modules.text_field.TextFieldEmbedderCharacters", "modules.text_field.TextFieldEmbedderTokens", "modules.text_field.TextFieldEmbedderWhitespace", "spirit.WrapperElmoTokenEmbedder", "modules.transformers.WrapperBERT", "modules.transformers.WrapperSpanBERT", "modules.transformers.WrapperSpanBERTSubtoken", "modules.transformers.WrapperSpanBERT_X"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dictionaries", ",", "config", ")", ":", "\n", "        ", "super", "(", "TextEmbedder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "dim_output", "=", "0", "\n", "if", "'char_embedder'", "in", "config", ":", "\n", "            ", "self", ".", "char_embedder", "=", "TextFieldEmbedderCharacters", "(", "dictionaries", ",", "config", "[", "'char_embedder'", "]", ")", "\n", "self", ".", "dim_output", "+=", "self", ".", "char_embedder", ".", "dim_output", "\n", "self", ".", "do_char_embedding", "=", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "do_char_embedding", "=", "False", "\n", "", "if", "'text_field_embedder'", "in", "config", ":", "\n", "            ", "self", ".", "word_embedder", "=", "TextFieldEmbedderTokens", "(", "dictionaries", ",", "config", "[", "'text_field_embedder'", "]", ")", "\n", "self", ".", "dim_output", "+=", "self", ".", "word_embedder", ".", "dim", "\n", "", "if", "'whitespace_embedder'", "in", "config", ":", "\n", "            ", "self", ".", "whitespace_embedder", "=", "TextFieldEmbedderWhitespace", "(", "dictionaries", ",", "config", "[", "'whitespace_embedder'", "]", ")", "\n", "self", ".", "dim_output", "+=", "self", ".", "whitespace_embedder", ".", "dim", "\n", "", "if", "'elmo_embedder'", "in", "config", ":", "\n", "            ", "self", ".", "ctxt_embedder", "=", "WrapperElmoTokenEmbedder", "(", "dictionaries", ",", "config", "[", "'elmo_embedder'", "]", ")", "\n", "self", ".", "dim_output", "+=", "self", ".", "ctxt_embedder", ".", "dim", "\n", "", "if", "'bert_embedder'", "in", "config", ":", "\n", "            ", "self", ".", "bert_embedder", "=", "WrapperBERT", "(", "dictionaries", ",", "config", "[", "'bert_embedder'", "]", ")", "\n", "self", ".", "dim_output", "+=", "self", ".", "bert_embedder", ".", "dim_output", "\n", "", "if", "'spanbert_embedder'", "in", "config", ":", "\n", "            ", "self", ".", "spanbert_embedder", "=", "WrapperSpanBERT", "(", "dictionaries", ",", "config", "[", "'spanbert_embedder'", "]", ")", "\n", "self", ".", "dim_output", "+=", "self", ".", "spanbert_embedder", ".", "dim_output", "\n", "", "if", "'spanbert_embedder_subtoken'", "in", "config", ":", "\n", "            ", "self", ".", "spanbert_embedder", "=", "WrapperSpanBERTSubtoken", "(", "dictionaries", ",", "config", "[", "'spanbert_embedder_subtoken'", "]", ")", "\n", "self", ".", "dim_output", "+=", "self", ".", "spanbert_embedder", ".", "dim_output", "\n", "\n", "", "if", "'spanbert_embedder_x'", "in", "config", ":", "\n", "            ", "self", ".", "spanbert_embedder", "=", "WrapperSpanBERT_X", "(", "dictionaries", ",", "config", "[", "'spanbert_embedder_x'", "]", ")", "\n", "self", ".", "dim_output", "+=", "self", ".", "spanbert_embedder", ".", "dim_output", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.spirit.TextEmbedder.forward": [[98, 127], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "outputs.append", "outputs.append", "outputs.append", "outputs.append", "outputs.append", "outputs.append", "outputs.append", "outputs.append", "spirit.TextEmbedder.char_embedder", "spirit.TextEmbedder.word_embedder", "spirit.TextEmbedder.whitespace_embedder", "spirit.TextEmbedder.ctxt_embedder", "spirit.TextEmbedder.bert_embedder", "spirit.TextEmbedder.spanbert_embedder", "spirit.TextEmbedder.spanbert_embedder", "spirit.TextEmbedder.spanbert_embedder"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "data", ")", ":", "\n", "        ", "outputs", "=", "[", "]", "\n", "if", "'char_embedder'", "in", "self", ".", "config", ":", "\n", "            ", "outputs", ".", "append", "(", "self", ".", "char_embedder", "(", "data", "[", "'characters'", "]", ")", ")", "\n", "", "if", "'text_field_embedder'", "in", "self", ".", "config", ":", "\n", "            ", "outputs", ".", "append", "(", "self", ".", "word_embedder", "(", "data", "[", "'tokens'", "]", ")", ")", "\n", "", "if", "'whitespace_embedder'", "in", "self", ".", "config", ":", "\n", "            ", "outputs", ".", "append", "(", "self", ".", "whitespace_embedder", "(", "data", ")", ")", "\n", "", "if", "'elmo_embedder'", "in", "self", ".", "config", ":", "\n", "            ", "outputs", ".", "append", "(", "self", ".", "ctxt_embedder", "(", "data", "[", "'text'", "]", ")", ")", "\n", "", "if", "'bert_embedder'", "in", "self", ".", "config", ":", "\n", "            ", "outputs", ".", "append", "(", "self", ".", "bert_embedder", "(", "data", "[", "'text'", "]", ")", ")", "\n", "# outputs.append(self.bert_embedder(data['tokens']))", "\n", "", "if", "'spanbert_embedder'", "in", "self", ".", "config", ":", "\n", "            ", "outputs", ".", "append", "(", "self", ".", "spanbert_embedder", "(", "data", "[", "'text'", "]", ")", ")", "\n", "", "if", "'spanbert_embedder_subtoken'", "in", "self", ".", "config", ":", "\n", "            ", "outputs", ".", "append", "(", "self", ".", "spanbert_embedder", "(", "data", "[", "'text'", "]", ")", ")", "\n", "\n", "", "if", "'spanbert_embedder_x'", "in", "self", ".", "config", ":", "\n", "            ", "outputs", ".", "append", "(", "self", ".", "spanbert_embedder", "(", "data", "[", "'bert_segments'", "]", ",", "data", "[", "'bert_segments_mask'", "]", ")", ")", "\n", "\n", "# for x in outputs:", "\n", "#     inspect('x', x[0,:,:])", "\n", "\n", "# for x in outputs:", "\n", "#     x_norm = x.norm(dim=-1)", "\n", "#     print(x.size(), x_norm.size(), x_norm.min().item(), x_norm.max().max().item())", "\n", "\n", "", "return", "torch", ".", "cat", "(", "outputs", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.spirit.SpanExtractor.__init__": [[131, 139], ["torch.Module.__init__", "spirit.SpanExtractor.get_output_dims", "spirit.AverageSpanExtractor"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.spirit.SpanExtractor.get_output_dims"], ["    ", "def", "__init__", "(", "self", ",", "dim_input", ",", "config", ")", ":", "\n", "        ", "super", "(", "SpanExtractor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "span_extractor1", "=", "AverageSpanExtractor", "(", "dim_input", ")", "if", "config", "[", "'avg'", "]", "else", "None", "\n", "self", ".", "span_extractor2", "=", "None", "\n", "self", ".", "span_extractor3", "=", "None", "\n", "# self.span_extractor2 = EndpointSpanExtractor(dim_input) if config['endpoint'] else None", "\n", "# self.span_extractor3 = SelfAttentiveSpanExtractor(dim_input) if config['self-attentive'] else None", "\n", "self", ".", "dim_output", "=", "self", ".", "get_output_dims", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.spirit.SpanExtractor.forward": [[140, 149], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "mentions.append", "mentions.append", "spirit.SpanExtractor.span_extractor1", "mentions.append", "spirit.SpanExtractor.span_extractor3", "spirit.SpanExtractor.span_extractor2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "token2mention", ",", "span_indices", ")", ":", "\n", "        ", "mentions", "=", "[", "]", "\n", "if", "self", ".", "span_extractor1", "is", "not", "None", ":", "\n", "            ", "mentions", ".", "append", "(", "self", ".", "span_extractor1", "(", "inputs", ",", "token2mention", ")", ")", "\n", "", "if", "self", ".", "span_extractor2", "is", "not", "None", ":", "\n", "            ", "mentions", ".", "append", "(", "self", ".", "span_extractor2", "(", "inputs", ",", "span_indices", ")", ")", ",", "\n", "", "if", "self", ".", "span_extractor3", "is", "not", "None", ":", "\n", "            ", "mentions", ".", "append", "(", "self", ".", "span_extractor3", "(", "inputs", ",", "span_indices", ")", ")", "\n", "", "return", "torch", ".", "cat", "(", "mentions", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.spirit.SpanExtractor.get_output_dims": [[150, 159], ["spirit.SpanExtractor.span_extractor2.get_output_dim", "spirit.SpanExtractor.span_extractor3.get_output_dim"], "methods", ["None"], ["", "def", "get_output_dims", "(", "self", ")", ":", "\n", "        ", "dims", "=", "0", "\n", "if", "self", ".", "span_extractor1", "is", "not", "None", ":", "\n", "            ", "dims", "+=", "self", ".", "span_extractor1", ".", "dim_output", "\n", "", "if", "self", ".", "span_extractor2", "is", "not", "None", ":", "\n", "            ", "dims", "+=", "self", ".", "span_extractor2", ".", "get_output_dim", "(", ")", "\n", "", "if", "self", ".", "span_extractor3", "is", "not", "None", ":", "\n", "            ", "dims", "+=", "self", ".", "span_extractor3", ".", "get_output_dim", "(", ")", "\n", "", "return", "dims", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.spirit.AverageSpanExtractor.__init__": [[163, 166], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_input", ")", ":", "\n", "        ", "super", "(", "AverageSpanExtractor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim_output", "=", "dim_input", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.spirit.AverageSpanExtractor.forward": [[167, 173], ["sequence_tensor.view", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "spans.view.view.view", "sequence_tensor.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "sequence_tensor", ",", "span_matrix", ")", ":", "\n", "        ", "num_batch", "=", "sequence_tensor", ".", "size", "(", ")", "[", "0", "]", "\n", "y", "=", "sequence_tensor", ".", "view", "(", "-", "1", ",", "self", ".", "dim_output", ")", "\n", "spans", "=", "torch", ".", "matmul", "(", "span_matrix", ",", "y", ")", "\n", "spans", "=", "spans", ".", "view", "(", "num_batch", ",", "-", "1", ",", "self", ".", "dim_output", ")", "\n", "return", "spans", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.spirit.ResLayerX.__init__": [[177, 181], ["torch.Module.__init__", "util.debug.Wrapper1", "torch.Linear", "torch.Linear", "spirit.FeedForward"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_input", ",", "config", ")", ":", "\n", "        ", "super", "(", "ResLayerX", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer", "=", "Wrapper1", "(", "'res'", ",", "FeedForward", "(", "dim_input", ",", "config", "[", "'layer'", "]", ")", ")", "\n", "self", ".", "out", "=", "nn", ".", "Linear", "(", "self", ".", "layer", ".", "dim_output", ",", "dim_input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.spirit.ResLayerX.forward": [[182, 184], ["spirit.ResLayerX.out", "spirit.ResLayerX.layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "return", "tensor", "+", "self", ".", "out", "(", "self", ".", "layer", "(", "tensor", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.spirit.ResLayer.__init__": [[188, 194], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "util.nn.create_activation_function", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.nn.create_activation_function"], ["    ", "def", "__init__", "(", "self", ",", "dim_input", ",", "config", ")", ":", "\n", "        ", "super", "(", "ResLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dp", "=", "nn", ".", "Dropout", "(", "config", "[", "'dropout'", "]", ")", "\n", "self", ".", "input", "=", "nn", ".", "Linear", "(", "dim_input", ",", "config", "[", "'dim'", "]", ")", "\n", "self", ".", "fnc", "=", "create_activation_function", "(", "config", "[", "'actfnc'", "]", ")", "\n", "self", ".", "output", "=", "nn", ".", "Linear", "(", "config", "[", "'dim'", "]", ",", "dim_input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.spirit.ResLayer.forward": [[195, 201], ["spirit.ResLayer.dp", "spirit.ResLayer.input", "spirit.ResLayer.fnc", "spirit.ResLayer.output"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "h", "=", "self", ".", "dp", "(", "tensor", ")", "\n", "h", "=", "self", ".", "input", "(", "h", ")", "\n", "h", "=", "self", ".", "fnc", "(", "h", ")", "\n", "h", "=", "self", ".", "output", "(", "h", ")", "\n", "return", "tensor", "+", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.spirit.FeedForward.__init__": [[205, 224], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "spirit.FeedForward.create_default", "spirit.FeedForward.create_ffnn", "spirit.FeedForward.create_res", "spirit.FeedForward.create_resnet", "spirit.FeedForward.create_glu", "BaseException"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.FeedForward.create_default", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.FeedForward.create_ffnn", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.spirit.FeedForward.create_res", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.spirit.FeedForward.create_resnet", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.spirit.FeedForward.create_glu"], ["    ", "def", "__init__", "(", "self", ",", "dim_input", ",", "config", ")", ":", "\n", "        ", "super", "(", "FeedForward", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim_output", "=", "dim_input", "\n", "self", ".", "layers", "=", "[", "]", "\n", "\n", "if", "'type'", "not", "in", "config", ":", "\n", "            ", "self", ".", "create_default", "(", "config", ")", "\n", "", "elif", "config", "[", "'type'", "]", "==", "'ffnn'", ":", "\n", "            ", "self", ".", "create_ffnn", "(", "config", ")", "\n", "", "elif", "config", "[", "'type'", "]", "==", "'res'", ":", "\n", "            ", "self", ".", "create_res", "(", "config", ")", "\n", "", "elif", "config", "[", "'type'", "]", "==", "'resnet'", ":", "\n", "            ", "self", ".", "create_resnet", "(", "config", ")", "\n", "", "elif", "config", "[", "'type'", "]", "==", "'glu'", ":", "\n", "            ", "self", ".", "create_glu", "(", "config", ")", "\n", "", "else", ":", "\n", "            ", "raise", "BaseException", "(", "\"no such type: \"", ",", "config", "[", "'type'", "]", ")", "\n", "\n", "", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.spirit.FeedForward.create_default": [[225, 231], ["spirit.FeedForward.layers.append", "spirit.FeedForward.layers.append", "LayerNorm", "torch.Dropout", "torch.Dropout"], "methods", ["None"], ["", "def", "create_default", "(", "self", ",", "config", ")", ":", "\n", "        ", "if", "config", "[", "'ln'", "]", ":", "\n", "            ", "from", "modules", ".", "misc", "import", "LayerNorm", "\n", "self", ".", "layers", ".", "append", "(", "LayerNorm", "(", "self", ".", "dim_output", ")", ")", "\n", "", "if", "config", "[", "'dropout'", "]", "!=", "0.0", ":", "\n", "            ", "self", ".", "layers", ".", "append", "(", "nn", ".", "Dropout", "(", "config", "[", "\"dropout\"", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.spirit.FeedForward.create_ffnn": [[232, 242], ["spirit.FeedForward.layers.append", "spirit.FeedForward.layers.append", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "spirit.FeedForward.layers.append", "spirit.FeedForward.layers.append", "util.nn.create_activation_function", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.nn.create_activation_function"], ["", "", "def", "create_ffnn", "(", "self", ",", "config", ")", ":", "\n", "        ", "if", "'dp_in'", "in", "config", ":", "\n", "            ", "self", ".", "layers", ".", "append", "(", "nn", ".", "Dropout", "(", "config", "[", "'dp_in'", "]", ")", ")", "\n", "", "for", "dim", "in", "config", "[", "'dims'", "]", ":", "\n", "            ", "self", ".", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "self", ".", "dim_output", ",", "dim", ")", ")", "\n", "if", "'actfnc'", "in", "config", ":", "\n", "                ", "self", ".", "layers", ".", "append", "(", "create_activation_function", "(", "config", "[", "'actfnc'", "]", ")", ")", "\n", "", "if", "'dp_h'", "in", "config", ":", "\n", "                ", "self", ".", "layers", ".", "append", "(", "nn", ".", "Dropout", "(", "config", "[", "'dp_h'", "]", ")", ")", "\n", "", "self", ".", "dim_output", "=", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.spirit.FeedForward.create_glu": [[243, 252], ["spirit.FeedForward.layers.append", "spirit.FeedForward.layers.append", "spirit.FeedForward.layers.append", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.GLU", "torch.GLU", "spirit.FeedForward.layers.append", "torch.Dropout", "torch.Dropout"], "methods", ["None"], ["", "", "def", "create_glu", "(", "self", ",", "config", ")", ":", "\n", "        ", "if", "'dp_in'", "in", "config", ":", "\n", "            ", "self", ".", "layers", ".", "append", "(", "nn", ".", "Dropout", "(", "config", "[", "'dp_in'", "]", ")", ")", "\n", "", "for", "dim", "in", "config", "[", "'dims'", "]", ":", "\n", "            ", "self", ".", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "self", ".", "dim_output", ",", "2", "*", "dim", ")", ")", "\n", "self", ".", "layers", ".", "append", "(", "nn", ".", "GLU", "(", ")", ")", "\n", "if", "'dp_h'", "in", "config", ":", "\n", "                ", "self", ".", "layers", ".", "append", "(", "nn", ".", "Dropout", "(", "config", "[", "'dp_h'", "]", ")", ")", "\n", "", "self", ".", "dim_output", "=", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.spirit.FeedForward.create_res": [[253, 256], ["range", "spirit.FeedForward.layers.append", "spirit.ResLayerX"], "methods", ["None"], ["", "", "def", "create_res", "(", "self", ",", "config", ")", ":", "\n", "        ", "for", "_", "in", "range", "(", "config", "[", "'layers'", "]", ")", ":", "\n", "            ", "self", ".", "layers", ".", "append", "(", "ResLayerX", "(", "self", ".", "dim_output", ",", "config", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.spirit.FeedForward.create_resnet": [[257, 260], ["range", "spirit.FeedForward.layers.append", "spirit.ResLayer"], "methods", ["None"], ["", "", "def", "create_resnet", "(", "self", ",", "config", ")", ":", "\n", "        ", "for", "_", "in", "range", "(", "config", "[", "'layers'", "]", ")", ":", "\n", "            ", "self", ".", "layers", ".", "append", "(", "ResLayer", "(", "self", ".", "dim_output", ",", "config", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.spirit.FeedForward.forward": [[261, 263], ["spirit.FeedForward.layers"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "return", "self", ".", "layers", "(", "tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.spirit.Seq2Seq.__init__": [[267, 271], ["torch.Module.__init__", "modules.seq2seq.seq2seq_create"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.seq2seq_create"], ["    ", "def", "__init__", "(", "self", ",", "dim_input", ",", "config", ")", ":", "\n", "        ", "super", "(", "Seq2Seq", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "module", "=", "seq2seq_create", "(", "dim_input", ",", "config", ")", "\n", "self", ".", "dim_output", "=", "self", ".", "module", ".", "dim_output", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.spirit.Seq2Seq.forward": [[272, 274], ["spirit.Seq2Seq.module"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "seqlens", ",", "indices", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "module", "(", "inputs", ",", "seqlens", ",", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.spirit.MyBilinear.__init__": [[278, 284], ["torch.Module.__init__", "torch.Bilinear", "torch.Bilinear"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_input1", ",", "dim_input2", ",", "dim_output", ")", ":", "\n", "        ", "super", "(", "MyBilinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim_input1", "=", "dim_input1", "\n", "self", ".", "dim_input2", "=", "dim_input2", "\n", "self", ".", "dim_output", "=", "dim_output", "\n", "self", ".", "weight", "=", "nn", ".", "Bilinear", "(", "dim_input1", ",", "dim_input2", ",", "dim_output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.spirit.MyBilinear.forward": [[285, 291], ["inputs1.unsqueeze().expand.unsqueeze().expand.size", "inputs1.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "inputs2.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "spirit.MyBilinear.weight", "inputs1.unsqueeze().expand.unsqueeze().expand.contiguous", "inputs2.unsqueeze().expand.unsqueeze().expand.contiguous", "inputs1.unsqueeze().expand.unsqueeze().expand.unsqueeze", "inputs2.unsqueeze().expand.unsqueeze().expand.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs1", ",", "inputs2", ")", ":", "\n", "        ", "batch", ",", "length", ",", "_", "=", "inputs1", ".", "size", "(", ")", "\n", "inputs1", "=", "inputs1", ".", "unsqueeze", "(", "-", "2", ")", ".", "expand", "(", "batch", ",", "length", ",", "length", ",", "self", ".", "dim_input1", ")", "\n", "inputs2", "=", "inputs2", ".", "unsqueeze", "(", "-", "3", ")", ".", "expand", "(", "batch", ",", "length", ",", "length", ",", "self", ".", "dim_input2", ")", "\n", "out", "=", "self", ".", "weight", "(", "inputs1", ".", "contiguous", "(", ")", ",", "inputs2", ".", "contiguous", "(", ")", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.cnn1.CNN1.__init__": [[15, 29], ["torch.Module.__init__", "range", "torch.Sequential", "layers.append", "layers.append", "torch.Conv1d", "cnn1.actfnc", "layers.append", "layers.append", "torch.BatchNorm1d", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.cnn1.actfnc"], ["    ", "def", "__init__", "(", "self", ",", "dim_input", ",", "config", ")", ":", "\n", "        ", "super", "(", "CNN1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "layers", "=", "[", "]", "\n", "dim", "=", "dim_input", "\n", "for", "_", "in", "range", "(", "config", "[", "'layers'", "]", ")", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "Conv1d", "(", "dim", ",", "config", "[", "'dim'", "]", ",", "config", "[", "'w'", "]", "*", "2", "+", "1", ",", "padding", "=", "config", "[", "'w'", "]", ")", ")", "\n", "layers", ".", "append", "(", "actfnc", "(", "config", "[", "'actfnc'", "]", ")", ")", "\n", "if", "config", "[", "'batchnorm'", "]", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "config", "[", "'dim'", "]", ")", ")", "\n", "", "if", "'dropout'", "in", "config", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "Dropout", "(", "config", "[", "'dropout'", "]", ")", ")", "\n", "", "dim", "=", "config", "[", "'dim'", "]", "\n", "", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.cnn1.CNN1.forward": [[30, 35], ["inputs.permute.permute.permute", "cnn1.CNN1.layers", "outputs.permute.permute.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "seqlens", ")", ":", "\n", "        ", "inputs", "=", "inputs", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "outputs", "=", "self", ".", "layers", "(", "inputs", ")", "\n", "outputs", "=", "outputs", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.cnn1.DilatedBlock.__init__": [[38, 56], ["torch.Module.__init__", "range", "torch.Sequential", "layers.append", "layers.append", "torch.Conv1d", "cnn1.actfnc", "layers.append", "layers.append", "torch.BatchNorm1d", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.cnn1.actfnc"], ["    ", "def", "__init__", "(", "self", ",", "dim_input", ",", "config", ")", ":", "\n", "        ", "super", "(", "DilatedBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "d", "=", "1", "\n", "w", "=", "1", "\n", "\n", "layers", "=", "[", "]", "\n", "dim", "=", "dim_input", "\n", "for", "_", "in", "range", "(", "config", "[", "'depth'", "]", ")", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "Conv1d", "(", "dim", ",", "config", "[", "'dim'", "]", ",", "3", ",", "dilation", "=", "d", ",", "padding", "=", "d", ")", ")", "\n", "layers", ".", "append", "(", "actfnc", "(", "config", "[", "'actfnc'", "]", ")", ")", "\n", "if", "config", "[", "'batchnorm'", "]", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "config", "[", "'dim'", "]", ")", ")", "\n", "", "if", "'dropout'", "in", "config", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "Dropout", "(", "config", "[", "'dropout'", "]", ")", ")", "\n", "", "dim", "=", "config", "[", "'dim'", "]", "\n", "d", "=", "d", "*", "2", "\n", "", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.cnn1.DilatedBlock.forward": [[57, 60], ["cnn1.DilatedBlock.layers"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "layers", "(", "inputs", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.cnn1.CNN2.__init__": [[63, 73], ["torch.Module.__init__", "range", "torch.Sequential", "cnn1.DilatedBlock", "layers.append"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_input", ",", "config", ")", ":", "\n", "        ", "super", "(", "CNN2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "layers", "=", "[", "]", "\n", "dim", "=", "dim_input", "\n", "for", "_", "in", "range", "(", "config", "[", "'layers'", "]", ")", ":", "\n", "            ", "block", "=", "DilatedBlock", "(", "dim", ",", "config", ")", "\n", "layers", ".", "append", "(", "block", ")", "\n", "dim", "=", "block", ".", "dim", "\n", "", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.cnn1.CNN2.forward": [[74, 79], ["inputs.permute.permute.permute", "cnn1.CNN2.layers", "outputs.permute.permute.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "seqlens", ")", ":", "\n", "        ", "inputs", "=", "inputs", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "outputs", "=", "self", ".", "layers", "(", "inputs", ")", "\n", "outputs", "=", "outputs", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.cnn1.DilatedBlockX.__init__": [[82, 98], ["torch.Module.__init__", "range", "torch.Sequential", "layers.append", "layers.append", "torch.Conv1d", "cnn1.actfnc", "layers.append", "layers.append", "torch.BatchNorm1d", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.cnn1.actfnc"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "DilatedBlockX", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "config", "[", "'dim'", "]", "\n", "d", "=", "1", "\n", "w", "=", "1", "\n", "\n", "layers", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "config", "[", "'depth'", "]", ")", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "Conv1d", "(", "self", ".", "dim", ",", "self", ".", "dim", ",", "3", ",", "dilation", "=", "d", ",", "padding", "=", "d", ")", ")", "\n", "layers", ".", "append", "(", "actfnc", "(", "config", "[", "'actfnc'", "]", ")", ")", "\n", "if", "config", "[", "'batchnorm'", "]", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "self", ".", "dim", ")", ")", "\n", "", "if", "'dropout'", "in", "config", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "Dropout", "(", "config", "[", "'dropout'", "]", ")", ")", "\n", "", "d", "=", "d", "*", "2", "\n", "", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.cnn1.DilatedBlockX.forward": [[99, 102], ["cnn1.DilatedBlockX.layers"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "layers", "(", "inputs", ")", "+", "inputs", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.cnn1.CNN3.__init__": [[105, 116], ["torch.Module.__init__", "torch.Linear", "range", "torch.Sequential", "cnn1.DilatedBlockX", "layers.append"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_input", ",", "config", ")", ":", "\n", "        ", "super", "(", "CNN3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "config", "[", "'dim'", "]", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "dim_input", ",", "self", ".", "dim", ")", "\n", "layers", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "config", "[", "'layers'", "]", ")", ":", "\n", "            ", "block", "=", "DilatedBlockX", "(", "config", ")", "\n", "layers", ".", "append", "(", "block", ")", "\n", "dim", "=", "block", ".", "dim", "\n", "", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.cnn1.CNN3.forward": [[117, 123], ["cnn1.CNN3.linear", "inputs.permute.permute.permute", "cnn1.CNN3.layers", "outputs.permute.permute.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "seqlens", ")", ":", "\n", "        ", "inputs", "=", "self", ".", "linear", "(", "inputs", ")", "\n", "inputs", "=", "inputs", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "outputs", "=", "self", ".", "layers", "(", "inputs", ")", "\n", "outputs", "=", "outputs", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "outputs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.cnn1.actfnc": [[4, 11], ["torch.Tanh", "torch.ReLU", "BaseException"], "function", ["None"], ["def", "actfnc", "(", "name", ")", ":", "\n", "    ", "if", "name", "==", "'tanh'", ":", "\n", "        ", "return", "nn", ".", "Tanh", "(", ")", "\n", "", "elif", "name", "==", "'relu'", ":", "\n", "        ", "return", "nn", ".", "ReLU", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "BaseException", "(", "\"no such activation function:\"", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test1.MySelfAttention.__init__": [[13, 25], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_input", ",", "config", ")", ":", "\n", "        ", "super", "(", "MySelfAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_heads", "=", "config", "[", "'num_heads'", "]", "\n", "self", ".", "dim_heads", "=", "config", "[", "'dim_heads'", "]", "\n", "self", ".", "dim", "=", "self", ".", "num_heads", "*", "self", ".", "dim_heads", "\n", "\n", "self", ".", "query", "=", "nn", ".", "Linear", "(", "dim_input", ",", "self", ".", "dim", ")", "\n", "self", ".", "key", "=", "nn", ".", "Linear", "(", "dim_input", ",", "self", ".", "dim", ")", "\n", "self", ".", "value", "=", "nn", ".", "Linear", "(", "dim_input", ",", "self", ".", "dim", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", "[", "\"att_dropout\"", "]", ")", "\n", "\n", "self", ".", "counter", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test1.MySelfAttention.transpose_for_scores": [[26, 30], ["x.view.view.view", "x.view.view.permute", "x.view.view.size"], "methods", ["None"], ["", "def", "transpose_for_scores", "(", "self", ",", "x", ")", ":", "\n", "        ", "new_x_shape", "=", "x", ".", "size", "(", ")", "[", ":", "-", "1", "]", "+", "(", "self", ".", "num_heads", ",", "self", ".", "dim_heads", ")", "\n", "x", "=", "x", ".", "view", "(", "*", "new_x_shape", ")", "\n", "return", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test1.MySelfAttention.forward": [[31, 59], ["test1.MySelfAttention.query", "test1.MySelfAttention.key", "test1.MySelfAttention.value", "test1.MySelfAttention.transpose_for_scores", "test1.MySelfAttention.transpose_for_scores", "test1.MySelfAttention.transpose_for_scores", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "test1.MySelfAttention.dropout", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "context_layer.view.view.permute().contiguous", "context_layer.view.view.view", "test1.MySelfAttention.transpose", "math.sqrt", "torch.Softmax", "torch.Softmax", "torch.Softmax", "print", "range", "test1.MySelfAttention.size", "torchvision.utils.save_image", "context_layer.view.view.permute", "context_layer.view.view.size"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test1.MySelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test1.MySelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test1.MySelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.dropout", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "attention_mask", ")", ":", "\n", "        ", "q", "=", "self", ".", "query", "(", "inputs", ")", "\n", "k", "=", "self", ".", "key", "(", "inputs", ")", "\n", "v", "=", "self", ".", "value", "(", "inputs", ")", "\n", "\n", "q", "=", "self", ".", "transpose_for_scores", "(", "q", ")", "\n", "k", "=", "self", ".", "transpose_for_scores", "(", "k", ")", "\n", "v", "=", "self", ".", "transpose_for_scores", "(", "v", ")", "\n", "\n", "attention_scores", "=", "torch", ".", "matmul", "(", "q", ",", "k", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "attention_scores", "=", "attention_scores", "/", "math", ".", "sqrt", "(", "self", ".", "dim_heads", ")", "\n", "attention_scores", "=", "attention_scores", "+", "attention_mask", "\n", "\n", "attention_probs", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "(", "attention_scores", ")", "\n", "\n", "if", "self", ".", "counter", "%", "100", "==", "0", ":", "\n", "            ", "print", "(", "\"WRITING ATTENTION\"", ",", "attention_probs", ".", "size", "(", ")", ")", "\n", "for", "h", "in", "range", "(", "self", ".", "num_heads", ")", ":", "\n", "                ", "torchvision", ".", "utils", ".", "save_image", "(", "attention_probs", "[", "0", ",", "h", ",", ":", ",", ":", "]", ",", "'head-{}.png'", ".", "format", "(", "h", ")", ")", "\n", "", "", "self", ".", "counter", "+=", "1", "\n", "\n", "attention_probs", "=", "self", ".", "dropout", "(", "attention_probs", ")", "\n", "\n", "context_layer", "=", "torch", ".", "matmul", "(", "attention_probs", ",", "v", ")", "\n", "context_layer", "=", "context_layer", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "new_context_layer_shape", "=", "context_layer", ".", "size", "(", ")", "[", ":", "-", "2", "]", "+", "(", "self", ".", "dim", ",", ")", "\n", "context_layer", "=", "context_layer", ".", "view", "(", "*", "new_context_layer_shape", ")", "\n", "return", "context_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test1.GlobalAttention.__init__": [[62, 72], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_input", ",", "config", ")", ":", "\n", "        ", "super", "(", "GlobalAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim_attention", "=", "config", "[", "'dim_attention'", "]", "\n", "self", ".", "dim", "=", "dim_input", "\n", "\n", "self", ".", "query", "=", "nn", ".", "Linear", "(", "dim_input", ",", "self", ".", "dim_attention", ")", "\n", "self", ".", "key", "=", "nn", ".", "Linear", "(", "dim_input", ",", "self", ".", "dim_attention", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", "[", "\"dp_attention\"", "]", ")", "\n", "\n", "self", ".", "counter", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test1.GlobalAttention.forward": [[73, 93], ["test1.GlobalAttention.query", "test1.GlobalAttention.key", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "test1.GlobalAttention.dropout", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "test1.GlobalAttention.transpose", "torch.Softmax", "torch.Softmax", "torch.Softmax", "print", "torchvision.utils.save_image", "test1.GlobalAttention.size"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.dropout", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "attention_mask", ")", ":", "\n", "        ", "q", "=", "self", ".", "query", "(", "inputs", ")", "\n", "k", "=", "self", ".", "key", "(", "inputs", ")", "\n", "v", "=", "inputs", "\n", "\n", "attention_scores", "=", "torch", ".", "matmul", "(", "q", ",", "k", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "# attention_scores = attention_scores / math.sqrt(self.dim_heads)", "\n", "attention_scores", "=", "attention_scores", "+", "attention_mask", "\n", "\n", "attention_probs", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "(", "attention_scores", ")", "\n", "\n", "if", "self", ".", "counter", "%", "100", "==", "0", ":", "\n", "            ", "print", "(", "\"WRITING ATTENTION\"", ",", "attention_probs", ".", "size", "(", ")", ")", "\n", "torchvision", ".", "utils", ".", "save_image", "(", "attention_probs", "[", "0", ",", ":", ",", ":", "]", ",", "'attention.png'", ")", "\n", "", "self", ".", "counter", "+=", "1", "\n", "\n", "attention_probs", "=", "self", ".", "dropout", "(", "attention_probs", ")", "\n", "\n", "context_layer", "=", "torch", ".", "matmul", "(", "attention_probs", ",", "v", ")", "\n", "return", "context_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test1.MySelfOutput.__init__": [[96, 101], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "modules.test2.MyLayerNorm", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "MySelfOutput", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", "[", "'hidden_size'", "]", ",", "config", "[", "'hidden_size'", "]", ")", "\n", "self", ".", "LayerNorm", "=", "MyLayerNorm", "(", "config", "[", "'hidden_size'", "]", ",", "eps", "=", "1e-12", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", "[", "'hidden_dropout_prob'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test1.MySelfOutput.forward": [[102, 107], ["test1.MySelfOutput.dense", "test1.MySelfOutput.dropout", "test1.MySelfOutput.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.dropout"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "input_tensor", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "dropout", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", "+", "input_tensor", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test1.MyAttention.__init__": [[110, 115], ["torch.Module.__init__", "test1.MySelfAttention", "test1.MySelfOutput"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_input", ",", "config", ")", ":", "\n", "        ", "super", "(", "MyAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "self", "=", "MySelfAttention", "(", "dim_input", ",", "config", ")", "\n", "self", ".", "output", "=", "MySelfOutput", "(", "config", ")", "\n", "self", ".", "dim", "=", "config", "[", "'hidden_size'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test1.MyAttention.forward": [[116, 120], ["test1.MyAttention.self", "test1.MyAttention.output"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_tensor", ",", "attention_mask", ")", ":", "\n", "        ", "self_output", "=", "self", ".", "self", "(", "input_tensor", ",", "attention_mask", ")", "\n", "attention_output", "=", "self", ".", "output", "(", "self_output", ",", "input_tensor", ")", "\n", "return", "attention_output", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test1.MyLayer.__init__": [[123, 132], ["torch.Module.__init__", "test1.MyAttention", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "modules.test2.MyLayerNorm"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_input", ",", "config", ")", ":", "\n", "        ", "super", "(", "MyLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "attention", "=", "MyAttention", "(", "dim_input", ",", "config", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "config", "[", "'hidden_size'", "]", ",", "config", "[", "'intermediate_size'", "]", ")", "\n", "self", ".", "act", "=", "nn", ".", "Tanh", "(", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "config", "[", "'intermediate_size'", "]", ",", "config", "[", "'hidden_size'", "]", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", "[", "'hidden_dropout_prob'", "]", ")", "\n", "self", ".", "LayerNorm", "=", "MyLayerNorm", "(", "config", "[", "'hidden_size'", "]", ",", "eps", "=", "1e-12", ")", "\n", "self", ".", "dim", "=", "config", "[", "'hidden_size'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test1.MyLayer.forward": [[133, 139], ["test1.MyLayer.attention", "test1.MyLayer.act", "test1.MyLayer.dropout", "test1.MyLayer.LayerNorm", "test1.MyLayer.fc1", "test1.MyLayer.fc2"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.dropout"], ["", "def", "forward", "(", "self", ",", "input_tensor", ",", "attention_mask", ")", ":", "\n", "        ", "attention_output", "=", "self", ".", "attention", "(", "input_tensor", ",", "attention_mask", ")", "\n", "intermediate_output", "=", "self", ".", "act", "(", "self", ".", "fc1", "(", "attention_output", ")", ")", "\n", "layer_output", "=", "self", ".", "dropout", "(", "self", ".", "fc2", "(", "intermediate_output", ")", ")", "\n", "layer_output", "=", "self", ".", "LayerNorm", "(", "layer_output", "+", "attention_output", ")", "\n", "return", "layer_output", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test1.Test1.__init__": [[143, 155], ["torch.Module.__init__", "print", "torch.LSTM", "torch.LSTM", "torch.LSTM", "test1.GlobalAttention", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["    ", "def", "__init__", "(", "self", ",", "dim_input", ",", "config", ")", ":", "\n", "        ", "super", "(", "Test1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "print", "(", "\"Test1\"", ")", "\n", "self", ".", "rnn1", "=", "nn", ".", "LSTM", "(", "dim_input", ",", "config", "[", "'enc_dim'", "]", ",", "bidirectional", "=", "True", ",", "num_layers", "=", "config", "[", "'enc_layers'", "]", ",", "dropout", "=", "config", "[", "'dropout'", "]", ")", "\n", "# self.att = MySelfAttention(config['enc_dim']*2, config)", "\n", "self", ".", "att", "=", "GlobalAttention", "(", "config", "[", "'enc_dim'", "]", "*", "2", ",", "config", ")", "\n", "#self.att = MyAttention(config['dim']*2, config)", "\n", "#self.att = MyLayer(config['dim'] * 2, config)", "\n", "#", "\n", "self", ".", "rnn2", "=", "nn", ".", "LSTM", "(", "dim_input", "+", "self", ".", "att", ".", "dim", "+", "config", "[", "'enc_dim'", "]", "*", "2", ",", "config", "[", "'dec_dim'", "]", ",", "bidirectional", "=", "True", ",", "num_layers", "=", "config", "[", "'dec_layers'", "]", ",", "dropout", "=", "config", "[", "'dropout'", "]", ")", "\n", "self", ".", "dim", "=", "config", "[", "'dec_dim'", "]", "*", "2", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", "[", "\"dropout\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.test1.Test1.forward": [[156, 185], ["inputs.size", "util.sequence.get_mask_from_sequence_lengths", "mask.float.float.unsqueeze", "mask.float.float.float", "torch.pack_padded_sequence", "torch.pack_padded_sequence", "torch.pack_padded_sequence", "test1.Test1.rnn1", "torch.pad_packed_sequence", "torch.pad_packed_sequence", "torch.pad_packed_sequence", "test1.Test1.dropout", "test1.Test1.att", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.pack_padded_sequence", "torch.pack_padded_sequence", "torch.pack_padded_sequence", "test1.Test1.rnn2", "torch.pad_packed_sequence", "torch.pad_packed_sequence", "torch.pad_packed_sequence"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.sequence.get_mask_from_sequence_lengths", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.dropout"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "seqlens", ")", ":", "\n", "        ", "batchsize", ",", "maxlen", ",", "_", "=", "inputs", ".", "size", "(", ")", "\n", "mask", "=", "get_mask_from_sequence_lengths", "(", "seqlens", ",", "maxlen", ")", "\n", "# mask = mask.unsqueeze(1).unsqueeze(2)", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "1", ")", "\n", "mask", "=", "mask", ".", "float", "(", ")", "\n", "mask", "=", "(", "1.0", "-", "mask", ")", "*", "-", "10000.0", "\n", "\n", "packed_inputs", "=", "rnn_utils", ".", "pack_padded_sequence", "(", "inputs", ",", "seqlens", ",", "batch_first", "=", "True", ")", "\n", "packed_outputs", ",", "_", "=", "self", ".", "rnn1", "(", "packed_inputs", ")", "\n", "outputs1", ",", "_", "=", "rnn_utils", ".", "pad_packed_sequence", "(", "packed_outputs", ",", "batch_first", "=", "True", ")", "\n", "outputs1", "=", "self", ".", "dropout", "(", "outputs1", ")", "\n", "# print('lstm1_out:', outputs1.size())", "\n", "\n", "outputs2", "=", "self", ".", "att", "(", "outputs1", ",", "mask", ")", "\n", "# print('att_out:', outputs2.size())", "\n", "\n", "outputs", "=", "torch", ".", "cat", "(", "(", "inputs", ",", "outputs1", ",", "outputs2", ")", ",", "-", "1", ")", "\n", "# outputs = outputs2", "\n", "\n", "# print('outputs:', outputs.size())", "\n", "\n", "packed_inputs", "=", "rnn_utils", ".", "pack_padded_sequence", "(", "outputs", ",", "seqlens", ",", "batch_first", "=", "True", ")", "\n", "packed_outputs", ",", "_", "=", "self", ".", "rnn2", "(", "packed_inputs", ")", "\n", "outputs", ",", "_", "=", "rnn_utils", ".", "pad_packed_sequence", "(", "packed_outputs", ",", "batch_first", "=", "True", ")", "\n", "\n", "# print('lstm2_out:', outputs.size())", "\n", "\n", "return", "outputs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.aggregate.AggregateAverage.__init__": [[22, 25], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_mention", ",", "config", ")", ":", "\n", "        ", "super", "(", "AggregateAverage", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim_output", "=", "dim_mention", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.aggregate.AggregateAverage.forward": [[26, 29], ["mention_vectors.size", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "mention_vectors.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "mention_vectors", ",", "mention2concept", ")", ":", "\n", "        ", "num_batch", "=", "mention_vectors", ".", "size", "(", "0", ")", "\n", "return", "torch", ".", "matmul", "(", "mention2concept", ",", "mention_vectors", ".", "view", "(", "-", "1", ",", "self", ".", "dim_output", ")", ")", ".", "view", "(", "num_batch", ",", "-", "1", ",", "self", ".", "dim_output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.aggregate.AggregateSelfAttention.__init__": [[33, 38], ["torch.Module.__init__", "modules.spirit.FeedForward", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_mention", ",", "config", ")", ":", "\n", "        ", "super", "(", "AggregateSelfAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ff", "=", "FeedForward", "(", "dim_mention", ",", "config", "[", "'attention'", "]", ")", "\n", "self", ".", "out", "=", "nn", ".", "Linear", "(", "self", ".", "ff", ".", "dim_output", ",", "1", ")", "\n", "self", ".", "dim_output", "=", "dim_mention", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.aggregate.AggregateSelfAttention.forward": [[39, 51], ["mention_vectors.view.view.size", "mention_vectors.view.view.view", "aggregate.AggregateSelfAttention.to_att", "aggregate.AggregateSelfAttention.out().squeeze", "util.sequence.get_mask_from_sequence_lengths().float().to", "torch.softmax", "torch.softmax", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul.unsqueeze().view", "torch.matmul.unsqueeze().view", "torch.matmul.unsqueeze().view", "torch.softmax.unsqueeze", "aggregate.AggregateSelfAttention.out", "util.sequence.get_mask_from_sequence_lengths().float", "torch.matmul.unsqueeze", "torch.matmul.unsqueeze", "torch.matmul.unsqueeze", "aggregate.AggregateSelfAttention.ff", "util.sequence.get_mask_from_sequence_lengths", "concept_lengths.max().item", "concept_lengths.max"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.aggregate.AggregateSelfAttention.to_att", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.sequence.get_mask_from_sequence_lengths"], ["", "def", "forward", "(", "self", ",", "mention_vectors", ",", "mention2concept", ")", ":", "\n", "        ", "num_batch", "=", "mention_vectors", ".", "size", "(", "0", ")", "\n", "mention_vectors", "=", "mention_vectors", ".", "view", "(", "-", "1", ",", "self", ".", "dim_output", ")", "\n", "\n", "vectors", ",", "concept_lengths", "=", "AggregateSelfAttention", ".", "to_att", "(", "mention_vectors", ",", "mention2concept", ")", "\n", "scores", "=", "self", ".", "out", "(", "self", ".", "ff", "(", "vectors", ")", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "mask", "=", "get_mask_from_sequence_lengths", "(", "concept_lengths", ",", "concept_lengths", ".", "max", "(", ")", ".", "item", "(", ")", ")", ".", "float", "(", ")", ".", "to", "(", "mention_vectors", ".", "device", ")", "\n", "scores", "=", "scores", "-", "(", "1.0", "-", "mask", ")", "*", "1e38", "\n", "probs", "=", "F", ".", "softmax", "(", "scores", ",", "-", "1", ")", "\n", "output", "=", "torch", ".", "matmul", "(", "probs", ".", "unsqueeze", "(", "-", "2", ")", ",", "vectors", ")", "\n", "return", "output", ".", "unsqueeze", "(", "-", "2", ")", ".", "view", "(", "num_batch", ",", "-", "1", ",", "self", ".", "dim_output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.aggregate.AggregateSelfAttention.to_att": [[52, 67], ["mention2concept._indices().t().tolist", "list", "max", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "clusters[].append", "lengths.append", "c.extend", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "mention2concept._indices().t", "list", "len", "len", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.LongTensor().to.size", "torch.LongTensor().to.size", "torch.LongTensor().to.size", "range", "torch.LongTensor().to.view", "torch.LongTensor().to.view", "torch.LongTensor().to.view", "mention2concept._indices", "mention2concept.size", "range", "len"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist"], ["", "@", "staticmethod", "\n", "def", "to_att", "(", "mention_vectors", ",", "mention2concept", ")", ":", "\n", "        ", "indices", "=", "mention2concept", ".", "_indices", "(", ")", ".", "t", "(", ")", ".", "tolist", "(", ")", "\n", "clusters", "=", "list", "(", "[", "list", "(", ")", "for", "_", "in", "range", "(", "mention2concept", ".", "size", "(", "0", ")", ")", "]", ")", "\n", "for", "concept", ",", "mention", "in", "indices", ":", "\n", "            ", "clusters", "[", "concept", "]", ".", "append", "(", "mention", ")", "\n", "", "maxlen", "=", "max", "(", "[", "len", "(", "c", ")", "for", "c", "in", "clusters", "]", ")", "\n", "# add padding", "\n", "lengths", "=", "[", "]", "\n", "for", "c", "in", "clusters", ":", "\n", "            ", "lengths", ".", "append", "(", "len", "(", "c", ")", ")", "\n", "c", ".", "extend", "(", "[", "0", "for", "_", "in", "range", "(", "maxlen", "-", "len", "(", "c", ")", ")", "]", ")", "\n", "", "concept_indices", "=", "torch", ".", "LongTensor", "(", "clusters", ")", ".", "to", "(", "mention_vectors", ".", "device", ")", "\n", "vectors", "=", "torch", ".", "index_select", "(", "mention_vectors", ",", "0", ",", "concept_indices", ".", "view", "(", "-", "1", ")", ")", ".", "view", "(", "concept_indices", ".", "size", "(", ")", "+", "(", "-", "1", ",", ")", ")", "\n", "return", "vectors", ",", "torch", ".", "LongTensor", "(", "lengths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.aggregate.AggregateMaxPool.__init__": [[70, 73], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_mention", ",", "config", ")", ":", "\n", "        ", "super", "(", "AggregateMaxPool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim_output", "=", "dim_mention", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.aggregate.AggregateMaxPool.forward": [[74, 80], ["aggregate.AggregateSelfAttention.to_att", "util.sequence.get_mask_from_sequence_lengths().float().to", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "util.sequence.get_mask_from_sequence_lengths().float", "util.sequence.get_mask_from_sequence_lengths", "concept_lengths.max().item", "concept_lengths.max"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.aggregate.AggregateSelfAttention.to_att", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.sequence.get_mask_from_sequence_lengths"], ["", "def", "forward", "(", "self", ",", "mention_vectors", ",", "mention2concept", ")", ":", "\n", "        ", "vectors", ",", "concept_lengths", "=", "AggregateSelfAttention", ".", "to_att", "(", "mention_vectors", ",", "mention2concept", ")", "\n", "\n", "mask", "=", "get_mask_from_sequence_lengths", "(", "concept_lengths", ",", "concept_lengths", ".", "max", "(", ")", ".", "item", "(", ")", ")", ".", "float", "(", ")", ".", "to", "(", "mention_vectors", ".", "device", ")", "\n", "output", ",", "_", "=", "torch", ".", "max", "(", "vectors", "-", "(", "1.0", "-", "mask", ")", ".", "unsqueeze", "(", "-", "1", ")", "*", "1e38", ",", "-", "2", ")", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.aggregate.Aggregate": [[8, 18], ["print", "aggregate.AggregateAverage", "aggregate.AggregateSelfAttention", "aggregate.AggregateMaxPool", "BaseException"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["def", "Aggregate", "(", "dim_mention", ",", "config", ")", ":", "\n", "    ", "print", "(", "'->'", ",", "config", ")", "\n", "if", "config", "[", "'type'", "]", "==", "'average'", ":", "\n", "        ", "return", "AggregateAverage", "(", "dim_mention", ",", "config", ")", "\n", "", "elif", "config", "[", "'type'", "]", "==", "'self-attention'", ":", "\n", "        ", "return", "AggregateSelfAttention", "(", "dim_mention", ",", "config", ")", "\n", "", "elif", "config", "[", "'type'", "]", "==", "'max-pool'", ":", "\n", "        ", "return", "AggregateMaxPool", "(", "dim_mention", ",", "config", ")", "\n", "", "else", ":", "\n", "        ", "raise", "BaseException", "(", "\"no such type:\"", ",", "config", "[", "'type'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.seq2vec.RNNMaxpool.__init__": [[7, 10], ["torch.Module.__init__", "torch.LSTM", "torch.LSTM", "int"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_input", ",", "dim_output", ")", ":", "\n", "        ", "super", "(", "RNNMaxpool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rnn", "=", "nn", ".", "LSTM", "(", "dim_input", ",", "int", "(", "dim_output", "/", "2", ")", ",", "num_layers", "=", "1", ",", "bidirectional", "=", "True", ",", "batch_first", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.seq2vec.RNNMaxpool.forward": [[11, 15], ["seq2vec.RNNMaxpool.rnn", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "outputs", ",", "_", "=", "self", ".", "rnn", "(", "inputs", ")", "\n", "maxpool", ",", "_", "=", "torch", ".", "max", "(", "outputs", ",", "1", ")", "\n", "return", "maxpool", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.seq2vec.CNNMaxpool.__init__": [[19, 24], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "max", "len", "torch.Conv1d", "torch.Conv1d"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_input", ",", "config", ")", ":", "\n", "        ", "super", "(", "CNNMaxpool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cnns", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Conv1d", "(", "dim_input", ",", "config", "[", "'dim'", "]", ",", "k", ")", "for", "k", "in", "config", "[", "'kernels'", "]", "]", ")", "\n", "self", ".", "dim_output", "=", "config", "[", "'dim'", "]", "*", "len", "(", "config", "[", "'kernels'", "]", ")", "\n", "self", ".", "max_kernel", "=", "max", "(", "config", "[", "'kernels'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.seq2vec.CNNMaxpool.forward": [[25, 40], ["inputs.view", "inp.transpose.transpose.transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.view", "torch.cat.view", "inputs.size", "inputs.size", "cnn", "torch.max", "torch.max", "torch.max", "torch.max", "torch.cat.append", "torch.cat.append", "inputs.size", "inputs.size", "inputs.size", "inputs.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "# print('chars:', inputs.size(), inputs[0,0,:,:])", "\n", "\n", "        ", "inp", "=", "inputs", ".", "view", "(", "inputs", ".", "size", "(", "0", ")", "*", "inputs", ".", "size", "(", "1", ")", ",", "inputs", ".", "size", "(", "2", ")", ",", "inputs", ".", "size", "(", "3", ")", ")", "\n", "inp", "=", "inp", ".", "transpose", "(", "1", ",", "2", ")", "\n", "outputs", "=", "[", "]", "\n", "for", "cnn", "in", "self", ".", "cnns", ":", "\n", "            ", "tmp", "=", "cnn", "(", "inp", ")", "\n", "# print('tmp[0]:', tmp.size(), tmp[0,:,0])", "\n", "# print('tmp[1]:', tmp.size(), tmp[0,:,1])", "\n", "maxpool", ",", "_", "=", "torch", ".", "max", "(", "tmp", ",", "-", "1", ")", "\n", "outputs", ".", "append", "(", "maxpool", ")", "\n", "", "outputs", "=", "torch", ".", "cat", "(", "outputs", ",", "-", "1", ")", "\n", "result", "=", "outputs", ".", "view", "(", "inputs", ".", "size", "(", "0", ")", ",", "inputs", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "return", "result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.transformer.objectview.__init__": [[12, 14], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "d", ")", ":", "\n", "        ", "self", ".", "__dict__", "=", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.transformer.Transformer.__init__": [[18, 26], ["torch.Module.__init__", "transformer.objectview", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_input", ",", "config", ")", ":", "\n", "        ", "super", "(", "Transformer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "config", "=", "objectview", "(", "config", ")", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "dim_input", ",", "config", ".", "hidden_size", ")", "\n", "# self.encoder = BertEncoder(config)", "\n", "self", ".", "encoder", "=", "None", "\n", "self", ".", "dim", "=", "config", ".", "hidden_size", "*", "config", ".", "num_hidden_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.transformer.Transformer.forward": [[27, 38], ["transformer.Transformer.size", "util.sequence.get_mask_from_sequence_lengths", "mask.float.float.unsqueeze().unsqueeze", "mask.float.float.float", "transformer.Transformer.linear", "transformer.Transformer.encoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mask.float.float.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.sequence.get_mask_from_sequence_lengths"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "seqlens", ")", ":", "\n", "        ", "batchsize", ",", "maxlen", ",", "_", "=", "inputs", ".", "size", "(", ")", "\n", "mask", "=", "get_mask_from_sequence_lengths", "(", "seqlens", ",", "maxlen", ")", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "mask", "=", "mask", ".", "float", "(", ")", "\n", "mask", "=", "(", "1.0", "-", "mask", ")", "*", "-", "10000.0", "\n", "\n", "inputs", "=", "self", ".", "linear", "(", "inputs", ")", "\n", "output", "=", "self", ".", "encoder", "(", "inputs", ",", "mask", ")", "\n", "output", "=", "torch", ".", "cat", "(", "output", ",", "2", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.transformer.TransformerPE.__init__": [[42, 53], ["torch.Module.__init__", "transformer.objectview", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.Linear", "torch.Linear", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_input", ",", "config", ")", ":", "\n", "        ", "super", "(", "TransformerPE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "config", "=", "objectview", "(", "config", ")", "\n", "\n", "self", ".", "dim_pos", "=", "config", ".", "dim_position_embedding", "\n", "self", ".", "position_encoding", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "500", ",", "self", ".", "dim_pos", ")", ")", "\n", "nn", ".", "init", ".", "kaiming_uniform_", "(", "self", ".", "position_encoding", ",", "a", "=", "math", ".", "sqrt", "(", "5", ")", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "dim_input", "+", "self", ".", "dim_pos", ",", "config", ".", "hidden_size", ")", "\n", "# self.encoder = BertEncoder(config)", "\n", "self", ".", "encoder", "=", "None", "\n", "self", ".", "dim", "=", "config", ".", "hidden_size", "*", "config", ".", "num_hidden_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.transformer.TransformerPE.forward": [[54, 69], ["transformer.TransformerPE.size", "util.sequence.get_mask_from_sequence_lengths", "mask.float.float.unsqueeze().unsqueeze", "mask.float.float.float", "transformer.TransformerPE.position_encoding.unsqueeze().expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "transformer.TransformerPE.linear", "transformer.TransformerPE.encoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mask.float.float.unsqueeze", "transformer.TransformerPE.position_encoding.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.sequence.get_mask_from_sequence_lengths"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "seqlens", ")", ":", "\n", "        ", "batchsize", ",", "maxlen", ",", "_", "=", "inputs", ".", "size", "(", ")", "\n", "mask", "=", "get_mask_from_sequence_lengths", "(", "seqlens", ",", "maxlen", ")", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "mask", "=", "mask", ".", "float", "(", ")", "\n", "mask", "=", "(", "1.0", "-", "mask", ")", "*", "-", "10000.0", "\n", "\n", "pos", "=", "self", ".", "position_encoding", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "batchsize", ",", "500", ",", "self", ".", "dim_pos", ")", "\n", "pos", "=", "pos", "[", ":", ",", ":", "maxlen", ",", ":", "]", "\n", "inputs", "=", "torch", ".", "cat", "(", "(", "inputs", ",", "pos", ")", ",", "2", ")", "\n", "\n", "inputs", "=", "self", ".", "linear", "(", "inputs", ")", "\n", "output", "=", "self", ".", "encoder", "(", "inputs", ",", "mask", ")", "\n", "output", "=", "torch", ".", "cat", "(", "output", ",", "2", ")", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.conditional_random_field.ConditionalRandomField.__init__": [[168, 197], ["super().__init__", "torch.nn.Parameter", "torch.nn.Parameter", "conditional_random_field.ConditionalRandomField.reset_parameters", "torch.Tensor", "torch.Tensor().fill_", "torch.Tensor().fill_", "torch.nn.Parameter", "torch.nn.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.conditional_random_field.ConditionalRandomField.reset_parameters"], ["def", "__init__", "(", "self", ",", "\n", "num_tags", ":", "int", ",", "\n", "constraints", ":", "List", "[", "Tuple", "[", "int", ",", "int", "]", "]", "=", "None", ",", "\n", "include_start_end_transitions", ":", "bool", "=", "True", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_tags", "=", "num_tags", "\n", "\n", "# transitions[i, j] is the logit for transitioning from state i to state j.", "\n", "self", ".", "transitions", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_tags", ",", "num_tags", ")", ")", "\n", "\n", "# _constraint_mask indicates valid transitions (based on supplied constraints).", "\n", "# Include special start of sequence (num_tags + 1) and end of sequence tags (num_tags + 2)", "\n", "if", "constraints", "is", "None", ":", "\n", "# All transitions are valid.", "\n", "            ", "constraint_mask", "=", "torch", ".", "Tensor", "(", "num_tags", "+", "2", ",", "num_tags", "+", "2", ")", ".", "fill_", "(", "1.", ")", "\n", "", "else", ":", "\n", "            ", "constraint_mask", "=", "torch", ".", "Tensor", "(", "num_tags", "+", "2", ",", "num_tags", "+", "2", ")", ".", "fill_", "(", "0.", ")", "\n", "for", "i", ",", "j", "in", "constraints", ":", "\n", "                ", "constraint_mask", "[", "i", ",", "j", "]", "=", "1.", "\n", "\n", "", "", "self", ".", "_constraint_mask", "=", "torch", ".", "nn", ".", "Parameter", "(", "constraint_mask", ",", "requires_grad", "=", "False", ")", "\n", "\n", "# Also need logits for transitioning from \"start\" state and to \"end\" state.", "\n", "self", ".", "include_start_end_transitions", "=", "include_start_end_transitions", "\n", "if", "include_start_end_transitions", ":", "\n", "            ", "self", ".", "start_transitions", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_tags", ")", ")", "\n", "self", ".", "end_transitions", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_tags", ")", ")", "\n", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.conditional_random_field.ConditionalRandomField.reset_parameters": [[198, 203], ["torch.nn.init.xavier_normal_", "torch.nn.init.normal_", "torch.nn.init.normal_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "transitions", ")", "\n", "if", "self", ".", "include_start_end_transitions", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "self", ".", "start_transitions", ")", "\n", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "self", ".", "end_transitions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.conditional_random_field.ConditionalRandomField._input_likelihood": [[204, 249], ["logits.transpose().contiguous.transpose().contiguous.size", "mask.float().transpose().contiguous.float().transpose().contiguous.float().transpose().contiguous", "logits.transpose().contiguous.transpose().contiguous.transpose().contiguous", "range", "util.logsumexp", "util.logsumexp", "util.logsumexp", "util.logsumexp", "logits[].view", "conditional_random_field.ConditionalRandomField.transitions.view", "alpha.view", "mask.float().transpose().contiguous.float().transpose().contiguous.float().transpose", "logits.transpose().contiguous.transpose().contiguous.transpose", "conditional_random_field.ConditionalRandomField.start_transitions.view", "conditional_random_field.ConditionalRandomField.end_transitions.view", "util.logsumexp", "util.logsumexp", "util.logsumexp", "util.logsumexp", "mask[].view", "mask.float().transpose().contiguous.float().transpose().contiguous.float"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.math.logsumexp", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.math.logsumexp", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.math.logsumexp", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.math.logsumexp", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.math.logsumexp", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.math.logsumexp", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.math.logsumexp", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.math.logsumexp"], ["", "", "def", "_input_likelihood", "(", "self", ",", "logits", ":", "torch", ".", "Tensor", ",", "mask", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Computes the (batch_size,) denominator term for the log-likelihood, which is the\n        sum of the likelihoods across all possible state sequences.\n        \"\"\"", "\n", "batch_size", ",", "sequence_length", ",", "num_tags", "=", "logits", ".", "size", "(", ")", "\n", "\n", "# Transpose batch size and sequence dimensions", "\n", "mask", "=", "mask", ".", "float", "(", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "logits", "=", "logits", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "# Initial alpha is the (batch_size, num_tags) tensor of likelihoods combining the", "\n", "# transitions to the initial states and the logits for the first timestep.", "\n", "if", "self", ".", "include_start_end_transitions", ":", "\n", "            ", "alpha", "=", "self", ".", "start_transitions", ".", "view", "(", "1", ",", "num_tags", ")", "+", "logits", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "alpha", "=", "logits", "[", "0", "]", "\n", "\n", "# For each i we compute logits for the transitions from timestep i-1 to timestep i.", "\n", "# We do so in a (batch_size, num_tags, num_tags) tensor where the axes are", "\n", "# (instance, current_tag, next_tag)", "\n", "", "for", "i", "in", "range", "(", "1", ",", "sequence_length", ")", ":", "\n", "# The emit scores are for time i (\"next_tag\") so we broadcast along the current_tag axis.", "\n", "            ", "emit_scores", "=", "logits", "[", "i", "]", ".", "view", "(", "batch_size", ",", "1", ",", "num_tags", ")", "\n", "# Transition scores are (current_tag, next_tag) so we broadcast along the instance axis.", "\n", "transition_scores", "=", "self", ".", "transitions", ".", "view", "(", "1", ",", "num_tags", ",", "num_tags", ")", "\n", "# Alpha is for the current_tag, so we broadcast along the next_tag axis.", "\n", "broadcast_alpha", "=", "alpha", ".", "view", "(", "batch_size", ",", "num_tags", ",", "1", ")", "\n", "\n", "# Add all the scores together and logexp over the current_tag axis", "\n", "inner", "=", "broadcast_alpha", "+", "emit_scores", "+", "transition_scores", "\n", "\n", "# In valid positions (mask == 1) we want to take the logsumexp over the current_tag dimension", "\n", "# of ``inner``. Otherwise (mask == 0) we want to retain the previous alpha.", "\n", "alpha", "=", "(", "util", ".", "logsumexp", "(", "inner", ",", "1", ")", "*", "mask", "[", "i", "]", ".", "view", "(", "batch_size", ",", "1", ")", "+", "\n", "alpha", "*", "(", "1", "-", "mask", "[", "i", "]", ")", ".", "view", "(", "batch_size", ",", "1", ")", ")", "\n", "\n", "# Every sequence needs to end with a transition to the stop_tag.", "\n", "", "if", "self", ".", "include_start_end_transitions", ":", "\n", "            ", "stops", "=", "alpha", "+", "self", ".", "end_transitions", ".", "view", "(", "1", ",", "num_tags", ")", "\n", "", "else", ":", "\n", "            ", "stops", "=", "alpha", "\n", "\n", "# Finally we log_sum_exp along the num_tags dim, result is (batch_size,)", "\n", "", "return", "util", ".", "logsumexp", "(", "stops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.conditional_random_field.ConditionalRandomField._joint_likelihood": [[250, 304], ["logits.transpose().contiguous.transpose().contiguous.transpose().contiguous", "mask.float().transpose().contiguous.float().transpose().contiguous.float().transpose().contiguous", "tags.transpose().contiguous.transpose().contiguous.transpose().contiguous", "range", "tags.transpose().contiguous.transpose().contiguous.gather().squeeze", "last_inputs.gather", "last_input_score.squeeze.squeeze.squeeze", "conditional_random_field.ConditionalRandomField.start_transitions.index_select", "logits[].gather().squeeze", "mask.float().transpose().contiguous.float().transpose().contiguous.sum().long", "conditional_random_field.ConditionalRandomField.end_transitions.index_select", "tags.transpose().contiguous.gather().squeeze.view", "logits.transpose().contiguous.transpose().contiguous.transpose", "mask.float().transpose().contiguous.float().transpose().contiguous.float().transpose", "tags.transpose().contiguous.transpose().contiguous.transpose", "tags.transpose().contiguous.transpose().contiguous.gather", "logits[].gather", "mask.float().transpose().contiguous.float().transpose().contiguous.sum", "last_tag_index.view", "mask.float().transpose().contiguous.float().transpose().contiguous.float", "current_tag.view", "next_tag.view", "current_tag.view"], "methods", ["None"], ["", "def", "_joint_likelihood", "(", "self", ",", "\n", "logits", ":", "torch", ".", "Tensor", ",", "\n", "tags", ":", "torch", ".", "Tensor", ",", "\n", "mask", ":", "torch", ".", "LongTensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Computes the numerator term for the log-likelihood, which is just score(inputs, tags)\n        \"\"\"", "\n", "batch_size", ",", "sequence_length", ",", "_", "=", "logits", ".", "data", ".", "shape", "\n", "\n", "# Transpose batch size and sequence dimensions:", "\n", "logits", "=", "logits", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "mask", "=", "mask", ".", "float", "(", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "tags", "=", "tags", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "# Start with the transition scores from start_tag to the first tag in each input", "\n", "if", "self", ".", "include_start_end_transitions", ":", "\n", "            ", "score", "=", "self", ".", "start_transitions", ".", "index_select", "(", "0", ",", "tags", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "score", "=", "0.0", "\n", "\n", "# Add up the scores for the observed transitions and all the inputs but the last", "\n", "", "for", "i", "in", "range", "(", "sequence_length", "-", "1", ")", ":", "\n", "# Each is shape (batch_size,)", "\n", "            ", "current_tag", ",", "next_tag", "=", "tags", "[", "i", "]", ",", "tags", "[", "i", "+", "1", "]", "\n", "\n", "# The scores for transitioning from current_tag to next_tag", "\n", "transition_score", "=", "self", ".", "transitions", "[", "current_tag", ".", "view", "(", "-", "1", ")", ",", "next_tag", ".", "view", "(", "-", "1", ")", "]", "\n", "\n", "# The score for using current_tag", "\n", "emit_score", "=", "logits", "[", "i", "]", ".", "gather", "(", "1", ",", "current_tag", ".", "view", "(", "batch_size", ",", "1", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "# Include transition score if next element is unmasked,", "\n", "# input_score if this element is unmasked.", "\n", "score", "=", "score", "+", "transition_score", "*", "mask", "[", "i", "+", "1", "]", "+", "emit_score", "*", "mask", "[", "i", "]", "\n", "\n", "# Transition from last state to \"stop\" state. To start with, we need to find the last tag", "\n", "# for each instance.", "\n", "", "last_tag_index", "=", "mask", ".", "sum", "(", "0", ")", ".", "long", "(", ")", "-", "1", "\n", "last_tags", "=", "tags", ".", "gather", "(", "0", ",", "last_tag_index", ".", "view", "(", "1", ",", "batch_size", ")", ")", ".", "squeeze", "(", "0", ")", "\n", "\n", "# Compute score of transitioning to `stop_tag` from each \"last tag\".", "\n", "if", "self", ".", "include_start_end_transitions", ":", "\n", "            ", "last_transition_score", "=", "self", ".", "end_transitions", ".", "index_select", "(", "0", ",", "last_tags", ")", "\n", "", "else", ":", "\n", "            ", "last_transition_score", "=", "0.0", "\n", "\n", "# Add the last input if it's not masked.", "\n", "", "last_inputs", "=", "logits", "[", "-", "1", "]", "# (batch_size, num_tags)", "\n", "last_input_score", "=", "last_inputs", ".", "gather", "(", "1", ",", "last_tags", ".", "view", "(", "-", "1", ",", "1", ")", ")", "# (batch_size, 1)", "\n", "last_input_score", "=", "last_input_score", ".", "squeeze", "(", ")", "# (batch_size,)", "\n", "\n", "score", "=", "score", "+", "last_transition_score", "+", "last_input_score", "*", "mask", "[", "-", "1", "]", "\n", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.conditional_random_field.ConditionalRandomField.forward": [[305, 321], ["conditional_random_field.ConditionalRandomField._input_likelihood", "conditional_random_field.ConditionalRandomField._joint_likelihood", "torch.ones", "torch.sum", "tags.size"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.conditional_random_field.ConditionalRandomField._input_likelihood", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.conditional_random_field.ConditionalRandomField._joint_likelihood"], ["", "def", "forward", "(", "self", ",", "\n", "inputs", ":", "torch", ".", "Tensor", ",", "\n", "tags", ":", "torch", ".", "Tensor", ",", "\n", "sequence_lengths", ",", "\n", "mask", ":", "torch", ".", "ByteTensor", "=", "None", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Computes the log likelihood.\n        \"\"\"", "\n", "# pylint: disable=arguments-differ", "\n", "if", "mask", "is", "None", ":", "\n", "            ", "mask", "=", "torch", ".", "ones", "(", "*", "tags", ".", "size", "(", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "", "log_denominator", "=", "self", ".", "_input_likelihood", "(", "inputs", ",", "mask", ")", "\n", "log_numerator", "=", "self", ".", "_joint_likelihood", "(", "inputs", ",", "tags", ",", "mask", ")", "\n", "\n", "return", "-", "torch", ".", "sum", "(", "log_numerator", "-", "log_denominator", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.conditional_random_field.ConditionalRandomField.predict": [[322, 324], ["conditional_random_field.ConditionalRandomField.viterbi_tags"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.conditional_random_field.ConditionalRandomField.viterbi_tags"], ["", "def", "predict", "(", "self", ",", "logits", ",", "sequence_lengths", ",", "mask", ")", ":", "\n", "        ", "return", "[", "x", "[", "0", "]", "for", "x", "in", "self", ".", "viterbi_tags", "(", "logits", ",", "mask", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.conditional_random_field.ConditionalRandomField.viterbi_tags": [[325, 386], ["logits.size", "torch.Tensor().fill_", "torch.Tensor", "zip", "torch.sum", "torch.Tensor.fill_", "util.viterbi_decode", "util.viterbi_decode", "best_paths.append", "torch.Tensor", "conditional_random_field.ConditionalRandomField.start_transitions.detach", "conditional_random_field.ConditionalRandomField.end_transitions.detach", "conditional_random_field.ConditionalRandomField._constraint_mask[].detach", "conditional_random_field.ConditionalRandomField._constraint_mask[].detach", "viterbi_score.item", "conditional_random_field.ConditionalRandomField._constraint_mask[].detach", "conditional_random_field.ConditionalRandomField._constraint_mask[].detach"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.sequence.viterbi_decode", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.sequence.viterbi_decode"], ["", "def", "viterbi_tags", "(", "self", ",", "\n", "logits", ":", "torch", ".", "Tensor", ",", "\n", "mask", ":", "torch", ".", "Tensor", ")", "->", "List", "[", "Tuple", "[", "List", "[", "int", "]", ",", "float", "]", "]", ":", "\n", "        ", "\"\"\"\n        Uses viterbi algorithm to find most likely tags for the given inputs.\n        If constraints are applied, disallows all other transitions.\n        \"\"\"", "\n", "_", ",", "max_seq_length", ",", "num_tags", "=", "logits", ".", "size", "(", ")", "\n", "\n", "# Get the tensors out of the variables", "\n", "logits", ",", "mask", "=", "logits", ".", "data", ",", "mask", ".", "data", "\n", "\n", "# Augment transitions matrix with start and end transitions", "\n", "start_tag", "=", "num_tags", "\n", "end_tag", "=", "num_tags", "+", "1", "\n", "transitions", "=", "torch", ".", "Tensor", "(", "num_tags", "+", "2", ",", "num_tags", "+", "2", ")", ".", "fill_", "(", "-", "10000.", ")", "\n", "\n", "# Apply transition constraints", "\n", "constrained_transitions", "=", "(", "\n", "self", ".", "transitions", "*", "self", ".", "_constraint_mask", "[", ":", "num_tags", ",", ":", "num_tags", "]", "+", "\n", "-", "10000.0", "*", "(", "1", "-", "self", ".", "_constraint_mask", "[", ":", "num_tags", ",", ":", "num_tags", "]", ")", "\n", ")", "\n", "transitions", "[", ":", "num_tags", ",", ":", "num_tags", "]", "=", "constrained_transitions", ".", "data", "\n", "\n", "if", "self", ".", "include_start_end_transitions", ":", "\n", "            ", "transitions", "[", "start_tag", ",", ":", "num_tags", "]", "=", "(", "\n", "self", ".", "start_transitions", ".", "detach", "(", ")", "*", "self", ".", "_constraint_mask", "[", "start_tag", ",", ":", "num_tags", "]", ".", "data", "+", "\n", "-", "10000.0", "*", "(", "1", "-", "self", ".", "_constraint_mask", "[", "start_tag", ",", ":", "num_tags", "]", ".", "detach", "(", ")", ")", "\n", ")", "\n", "transitions", "[", ":", "num_tags", ",", "end_tag", "]", "=", "(", "\n", "self", ".", "end_transitions", ".", "detach", "(", ")", "*", "self", ".", "_constraint_mask", "[", ":", "num_tags", ",", "end_tag", "]", ".", "data", "+", "\n", "-", "10000.0", "*", "(", "1", "-", "self", ".", "_constraint_mask", "[", ":", "num_tags", ",", "end_tag", "]", ".", "detach", "(", ")", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "transitions", "[", "start_tag", ",", ":", "num_tags", "]", "=", "(", "-", "10000.0", "*", "\n", "(", "1", "-", "self", ".", "_constraint_mask", "[", "start_tag", ",", ":", "num_tags", "]", ".", "detach", "(", ")", ")", ")", "\n", "transitions", "[", ":", "num_tags", ",", "end_tag", "]", "=", "-", "10000.0", "*", "(", "1", "-", "self", ".", "_constraint_mask", "[", ":", "num_tags", ",", "end_tag", "]", ".", "detach", "(", ")", ")", "\n", "\n", "", "best_paths", "=", "[", "]", "\n", "# Pad the max sequence length by 2 to account for start_tag + end_tag.", "\n", "tag_sequence", "=", "torch", ".", "Tensor", "(", "max_seq_length", "+", "2", ",", "num_tags", "+", "2", ")", "\n", "\n", "for", "prediction", ",", "prediction_mask", "in", "zip", "(", "logits", ",", "mask", ")", ":", "\n", "            ", "sequence_length", "=", "torch", ".", "sum", "(", "prediction_mask", ")", "\n", "\n", "# Start with everything totally unlikely", "\n", "tag_sequence", ".", "fill_", "(", "-", "10000.", ")", "\n", "# At timestep 0 we must have the START_TAG", "\n", "tag_sequence", "[", "0", ",", "start_tag", "]", "=", "0.", "\n", "# At steps 1, ..., sequence_length we just use the incoming prediction", "\n", "tag_sequence", "[", "1", ":", "(", "sequence_length", "+", "1", ")", ",", ":", "num_tags", "]", "=", "prediction", "[", ":", "sequence_length", "]", "\n", "# And at the last timestep we must have the END_TAG", "\n", "tag_sequence", "[", "sequence_length", "+", "1", ",", "end_tag", "]", "=", "0.", "\n", "\n", "# We pass the tags and the transitions to ``viterbi_decode``.", "\n", "viterbi_path", ",", "viterbi_score", "=", "sequence", ".", "viterbi_decode", "(", "tag_sequence", "[", ":", "(", "sequence_length", "+", "2", ")", "]", ",", "transitions", ")", "\n", "# Get rid of START and END sentinels and append.", "\n", "viterbi_path", "=", "viterbi_path", "[", "1", ":", "-", "1", "]", "\n", "best_paths", ".", "append", "(", "(", "viterbi_path", ",", "viterbi_score", ".", "item", "(", ")", ")", ")", "\n", "\n", "", "return", "best_paths", "", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.conditional_random_field.allowed_transitions": [[9, 53], ["len", "list", "labels.items", "conditional_random_field.is_transition_allowed", "allowed.append"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.conditional_random_field.is_transition_allowed"], ["def", "allowed_transitions", "(", "constraint_type", ":", "str", ",", "labels", ":", "Dict", "[", "int", ",", "str", "]", ")", "->", "List", "[", "Tuple", "[", "int", ",", "int", "]", "]", ":", "\n", "    ", "\"\"\"\n    Given labels and a constraint type, returns the allowed transitions. It will\n    additionally include transitions for the start and end states, which are used\n    by the conditional random field.\n\n    Parameters\n    ----------\n    constraint_type : ``str``, required\n        Indicates which constraint to apply. Current choices are\n        \"BIO\", \"IOB1\", \"BIOUL\", and \"BMES\".\n    labels : ``Dict[int, str]``, required\n        A mapping {label_id -> label}. Most commonly this would be the value from\n        Vocabulary.get_index_to_token_vocabulary()\n\n    Returns\n    -------\n    ``List[Tuple[int, int]]``\n        The allowed transitions (from_label_id, to_label_id).\n    \"\"\"", "\n", "num_labels", "=", "len", "(", "labels", ")", "\n", "start_tag", "=", "num_labels", "\n", "end_tag", "=", "num_labels", "+", "1", "\n", "labels_with_boundaries", "=", "list", "(", "labels", ".", "items", "(", ")", ")", "+", "[", "(", "start_tag", ",", "\"START\"", ")", ",", "(", "end_tag", ",", "\"END\"", ")", "]", "\n", "\n", "allowed", "=", "[", "]", "\n", "for", "from_label_index", ",", "from_label", "in", "labels_with_boundaries", ":", "\n", "        ", "if", "from_label", "in", "(", "\"START\"", ",", "\"END\"", ")", ":", "\n", "            ", "from_tag", "=", "from_label", "\n", "from_entity", "=", "\"\"", "\n", "", "else", ":", "\n", "            ", "from_tag", "=", "from_label", "[", "0", "]", "\n", "from_entity", "=", "from_label", "[", "1", ":", "]", "\n", "", "for", "to_label_index", ",", "to_label", "in", "labels_with_boundaries", ":", "\n", "            ", "if", "to_label", "in", "(", "\"START\"", ",", "\"END\"", ")", ":", "\n", "                ", "to_tag", "=", "to_label", "\n", "to_entity", "=", "\"\"", "\n", "", "else", ":", "\n", "                ", "to_tag", "=", "to_label", "[", "0", "]", "\n", "to_entity", "=", "to_label", "[", "1", ":", "]", "\n", "", "if", "is_transition_allowed", "(", "constraint_type", ",", "from_tag", ",", "from_entity", ",", "\n", "to_tag", ",", "to_entity", ")", ":", "\n", "                ", "allowed", ".", "append", "(", "(", "from_label_index", ",", "to_label_index", ")", ")", "\n", "", "", "", "return", "allowed", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.conditional_random_field.is_transition_allowed": [[55, 147], ["any", "any", "any", "any", "ConfigurationError"], "function", ["None"], ["", "def", "is_transition_allowed", "(", "constraint_type", ":", "str", ",", "\n", "from_tag", ":", "str", ",", "\n", "from_entity", ":", "str", ",", "\n", "to_tag", ":", "str", ",", "\n", "to_entity", ":", "str", ")", ":", "\n", "    ", "\"\"\"\n    Given a constraint type and strings ``from_tag`` and ``to_tag`` that\n    represent the origin and destination of the transition, return whether\n    the transition is allowed under the given constraint type.\n\n    Parameters\n    ----------\n    constraint_type : ``str``, required\n        Indicates which constraint to apply. Current choices are\n        \"BIO\", \"IOB1\", \"BIOUL\", and \"BMES\".\n    from_tag : ``str``, required\n        The tag that the transition originates from. For example, if the\n        label is ``I-PER``, the ``from_tag`` is ``I``.\n    from_entity: ``str``, required\n        The entity corresponding to the ``from_tag``. For example, if the\n        label is ``I-PER``, the ``from_entity`` is ``PER``.\n    to_tag : ``str``, required\n        The tag that the transition leads to. For example, if the\n        label is ``I-PER``, the ``to_tag`` is ``I``.\n    to_entity: ``str``, required\n        The entity corresponding to the ``to_tag``. For example, if the\n        label is ``I-PER``, the ``to_entity`` is ``PER``.\n\n    Returns\n    -------\n    ``bool``\n        Whether the transition is allowed under the given ``constraint_type``.\n    \"\"\"", "\n", "# pylint: disable=too-many-return-statements", "\n", "if", "to_tag", "==", "\"START\"", "or", "from_tag", "==", "\"END\"", ":", "\n", "# Cannot transition into START or from END", "\n", "        ", "return", "False", "\n", "\n", "", "if", "constraint_type", "==", "\"BIOUL\"", ":", "\n", "        ", "if", "from_tag", "==", "\"START\"", ":", "\n", "            ", "return", "to_tag", "in", "(", "'O'", ",", "'B'", ",", "'U'", ")", "\n", "", "if", "to_tag", "==", "\"END\"", ":", "\n", "            ", "return", "from_tag", "in", "(", "'O'", ",", "'L'", ",", "'U'", ")", "\n", "", "return", "any", "(", "[", "\n", "# O can transition to O, B-* or U-*", "\n", "# L-x can transition to O, B-*, or U-*", "\n", "# U-x can transition to O, B-*, or U-*", "\n", "from_tag", "in", "(", "'O'", ",", "'L'", ",", "'U'", ")", "and", "to_tag", "in", "(", "'O'", ",", "'B'", ",", "'U'", ")", ",", "\n", "# B-x can only transition to I-x or L-x", "\n", "# I-x can only transition to I-x or L-x", "\n", "from_tag", "in", "(", "'B'", ",", "'I'", ")", "and", "to_tag", "in", "(", "'I'", ",", "'L'", ")", "and", "from_entity", "==", "to_entity", "\n", "]", ")", "\n", "", "elif", "constraint_type", "==", "\"BIO\"", ":", "\n", "        ", "if", "from_tag", "==", "\"START\"", ":", "\n", "            ", "return", "to_tag", "in", "(", "'O'", ",", "'B'", ")", "\n", "", "if", "to_tag", "==", "\"END\"", ":", "\n", "            ", "return", "from_tag", "in", "(", "'O'", ",", "'B'", ",", "'I'", ")", "\n", "", "return", "any", "(", "[", "\n", "# Can always transition to O or B-x", "\n", "to_tag", "in", "(", "'O'", ",", "'B'", ")", ",", "\n", "# Can only transition to I-x from B-x or I-x", "\n", "to_tag", "==", "'I'", "and", "from_tag", "in", "(", "'B'", ",", "'I'", ")", "and", "from_entity", "==", "to_entity", "\n", "]", ")", "\n", "", "elif", "constraint_type", "==", "\"IOB1\"", ":", "\n", "        ", "if", "from_tag", "==", "\"START\"", ":", "\n", "            ", "return", "to_tag", "in", "(", "'O'", ",", "'I'", ")", "\n", "", "if", "to_tag", "==", "\"END\"", ":", "\n", "            ", "return", "from_tag", "in", "(", "'O'", ",", "'B'", ",", "'I'", ")", "\n", "", "return", "any", "(", "[", "\n", "# Can always transition to O or I-x", "\n", "to_tag", "in", "(", "'O'", ",", "'I'", ")", ",", "\n", "# Can only transition to B-x from B-x or I-x, where", "\n", "# x is the same tag.", "\n", "to_tag", "==", "'B'", "and", "from_tag", "in", "(", "'B'", ",", "'I'", ")", "and", "from_entity", "==", "to_entity", "\n", "]", ")", "\n", "", "elif", "constraint_type", "==", "\"BMES\"", ":", "\n", "        ", "if", "from_tag", "==", "\"START\"", ":", "\n", "            ", "return", "to_tag", "in", "(", "'B'", ",", "'S'", ")", "\n", "", "if", "to_tag", "==", "\"END\"", ":", "\n", "            ", "return", "from_tag", "in", "(", "'E'", ",", "'S'", ")", "\n", "", "return", "any", "(", "[", "\n", "# Can only transition to B or S from E or S.", "\n", "to_tag", "in", "(", "'B'", ",", "'S'", ")", "and", "from_tag", "in", "(", "'E'", ",", "'S'", ")", ",", "\n", "# Can only transition to M-x from B-x, where", "\n", "# x is the same tag.", "\n", "to_tag", "==", "'M'", "and", "from_tag", "==", "'B'", "and", "from_entity", "==", "to_entity", ",", "\n", "# Can only transition to E-x from B-x or M-x, where", "\n", "# x is the same tag.", "\n", "to_tag", "==", "'E'", "and", "from_tag", "in", "(", "'B'", ",", "'M'", ")", "and", "from_entity", "==", "to_entity", ",", "\n", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ConfigurationError", "(", "f\"Unknown constraint type: {constraint_type}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.text_field.TextFieldEmbedderList.__init__": [[15, 19], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "sum"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "list", ")", ":", "\n", "        ", "super", "(", "TextFieldEmbedderList", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embedders", "=", "nn", ".", "ModuleList", "(", "list", ")", "\n", "self", ".", "dim", "=", "sum", "(", "[", "embedder", ".", "dim", "for", "embedder", "in", "self", ".", "embedders", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.text_field.TextFieldEmbedderList.forward": [[20, 23], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "embedder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "outputs", "=", "[", "embedder", "(", "inputs", ")", "for", "embedder", "in", "self", ".", "embedders", "]", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.text_field.TextFieldEmbedderTokens.__init__": [[27, 60], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "config.get", "text_field.TextFieldEmbedderTokens.embed.weight.norm", "print", "text_field.TextFieldEmbedderTokens.load_embeddings", "print", "print", "print", "text_field.TextFieldEmbedderTokens.dictionary.lookup", "print", "math.sqrt", "text_field.TextFieldEmbedderTokens.min().item", "text_field.TextFieldEmbedderTokens.max().item", "text_field.TextFieldEmbedderTokens.mean().item", "text_field.TextFieldEmbedderTokens.min", "text_field.TextFieldEmbedderTokens.max", "text_field.TextFieldEmbedderTokens.mean"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.text_field.TextFieldEmbedderTokens.load_embeddings", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["    ", "def", "__init__", "(", "self", ",", "dictionaries", ",", "config", ")", ":", "\n", "        ", "super", "(", "TextFieldEmbedderTokens", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dictionary", "=", "dictionaries", "[", "config", "[", "'dict'", "]", "]", "\n", "self", ".", "dim", "=", "config", "[", "'dim'", "]", "\n", "self", ".", "embed", "=", "nn", ".", "Embedding", "(", "self", ".", "dictionary", ".", "size", ",", "self", ".", "dim", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", "[", "'dropout'", "]", ",", "inplace", "=", "True", ")", "\n", "self", ".", "normalize", "=", "'norm'", "in", "config", "\n", "self", ".", "freeze", "=", "config", ".", "get", "(", "'freeze'", ",", "False", ")", "\n", "\n", "if", "'embed_file'", "in", "config", ":", "\n", "            ", "self", ".", "init_unknown", "=", "config", "[", "'init_unknown'", "]", "\n", "self", ".", "init_random", "=", "config", "[", "'init_random'", "]", "\n", "self", ".", "backoff_to_lowercase", "=", "config", "[", "'backoff_to_lowercase'", "]", "\n", "# self.filtered_file = config['filtered_file']", "\n", "# self.use_filtered = config['use_filtered']", "\n", "\n", "self", ".", "load_embeddings", "(", "config", "[", "'embed_file'", "]", ",", "config", "[", "'filtered_file'", "]", ",", "config", "[", "'use_filtered'", "]", ",", "\n", "what_load", "=", "config", "[", "'what_load'", "]", ",", "load_type", "=", "config", "[", "'load_type'", "]", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"WARNING: training word vectors from scratch\"", ")", "\n", "\n", "", "if", "self", ".", "dictionary", ".", "size", "==", "0", ":", "\n", "            ", "print", "(", "\"WARNING: empty dictionary\"", ")", "\n", "return", "\n", "\n", "", "if", "'fill'", "in", "config", ":", "\n", "            ", "print", "(", "\"WARNING: filling vector to constant value:\"", ",", "config", "[", "'fill'", "]", ")", "\n", "index", "=", "self", ".", "dictionary", ".", "lookup", "(", "config", "[", "'fill'", "]", ")", "\n", "self", ".", "embed", ".", "weight", ".", "data", "[", "index", ",", ":", "]", "=", "1.0", "/", "math", ".", "sqrt", "(", "self", ".", "dim", ")", "\n", "print", "(", "config", "[", "'fill'", "]", ",", "'->'", ",", "self", ".", "embed", ".", "weight", ".", "data", "[", "index", ",", ":", "]", ")", "\n", "\n", "", "nrms", "=", "self", ".", "embed", ".", "weight", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "print", "(", "\"norms: min={} max={} avg={}\"", ".", "format", "(", "nrms", ".", "min", "(", ")", ".", "item", "(", ")", ",", "nrms", ".", "max", "(", ")", ".", "item", "(", ")", ",", "nrms", ".", "mean", "(", ")", ".", "item", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.text_field.TextFieldEmbedderTokens.load_all_wordvecs": [[61, 68], ["print", "datass.wordvec.load_wordembeddings_words", "text_field.TextFieldEmbedderTokens.load_embeddings", "print", "text_field.TextFieldEmbedderTokens.dictionary.add"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.wordvec.load_wordembeddings_words", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.text_field.TextFieldEmbedderTokens.load_embeddings", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add"], ["", "def", "load_all_wordvecs", "(", "self", ",", "filename", ")", ":", "\n", "        ", "print", "(", "\"LOADING ALL WORDVECS\"", ")", "\n", "words", "=", "load_wordembeddings_words", "(", "filename", ")", "\n", "for", "word", "in", "words", ":", "\n", "            ", "self", ".", "dictionary", ".", "add", "(", "word", ")", "\n", "", "self", ".", "load_embeddings", "(", "filename", ")", "\n", "print", "(", "\"DONE\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.text_field.TextFieldEmbedderTokens.load_embeddings": [[69, 124], ["torch.Embedding().to", "torch.Embedding().to", "text_field.TextFieldEmbedderTokens.embed.weight.data.copy_", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "datass.wordvec.load_wordembeddings_with_random_unknowns", "datass.wordvec.load_wordembeddings", "numpy.einsum", "numpy.sqrt", "torch.Embedding", "torch.Embedding", "numpy.ones", "numpy.sqrt", "print", "time.sleep", "text_field.TextFieldEmbedderTokens.load_embeddings", "print", "print", "time.sleep", "text_field.TextFieldEmbedderTokens.load_embeddings", "print", "random.randint", "random.randint"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.wordvec.load_wordembeddings_with_random_unknowns", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.wordvec.load_wordembeddings", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.text_field.TextFieldEmbedderTokens.load_embeddings", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.text_field.TextFieldEmbedderTokens.load_embeddings", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "load_embeddings", "(", "self", ",", "filename", ",", "filtered_file", "=", "None", ",", "use_filtered", "=", "False", ",", "retry", "=", "0", ",", "what_load", "=", "'dictionary'", ",", "\n", "load_type", "=", "'wordvec'", ")", ":", "\n", "        ", "if", "self", ".", "init_random", ":", "\n", "            ", "try", ":", "\n", "                ", "embeddings", "=", "load_wordembeddings_with_random_unknowns", "(", "filename", ",", "dictionary", "=", "self", ".", "dictionary", ",", "\n", "dim", "=", "self", ".", "dim", ",", "\n", "backoff_to_lowercase", "=", "self", ".", "backoff_to_lowercase", ",", "\n", "filtered_file", "=", "filtered_file", ",", "\n", "use_filtered", "=", "use_filtered", ",", "\n", "what_load", "=", "what_load", ",", "\n", "load_type", "=", "load_type", ")", "\n", "", "except", "OSError", "as", "exept", ":", "\n", "                ", "if", "retry", "<", "10", ":", "\n", "                    ", "print", "(", "'following exept in load_embeddings: '", ",", "exept", ".", "strerror", ")", "\n", "sleep", "(", "random", ".", "randint", "(", "5", ",", "10", ")", ")", "\n", "self", ".", "load_embeddings", "(", "filename", ",", "filtered_file", "=", "filtered_file", ",", "\n", "use_filtered", "=", "use_filtered", ",", "retry", "=", "retry", "+", "1", ",", "what_load", "=", "what_load", ",", "\n", "load_type", "=", "load_type", ")", "\n", "return", "\n", "", "else", ":", "\n", "                    ", "print", "(", "'NO MORE RETRIES LEFT, FAILING in load_embeddings'", ")", "\n", "raise", "exept", "\n", "\n", "", "", "", "else", ":", "\n", "            ", "unknown_vec", "=", "np", ".", "ones", "(", "(", "self", ".", "dim", ")", ")", "/", "np", ".", "sqrt", "(", "self", ".", "dim", ")", "if", "self", ".", "init_unknown", "else", "None", "\n", "\n", "try", ":", "\n", "                ", "word_vectors", "=", "load_wordembeddings", "(", "filename", ",", "dictionary", "=", "self", ".", "dictionary", ",", "dim", "=", "self", ".", "dim", ",", "\n", "out_of_voc_vector", "=", "unknown_vec", ",", "\n", "filtered_file", "=", "filtered_file", ",", "use_filtered", "=", "use_filtered", ",", "\n", "what_load", "=", "what_load", ",", "load_type", "=", "load_type", ")", "\n", "", "except", "OSError", "as", "exept", ":", "\n", "                ", "if", "retry", "<", "10", ":", "\n", "                    ", "print", "(", "'following exept in load_embeddings: '", ",", "exept", ".", "strerror", ")", "\n", "sleep", "(", "random", ".", "randint", "(", "5", ",", "10", ")", ")", "\n", "self", ".", "load_embeddings", "(", "filename", ",", "filtered_file", "=", "filtered_file", ",", "use_filtered", "=", "use_filtered", ",", "\n", "retry", "=", "retry", "+", "1", ",", "what_load", "=", "what_load", ",", "load_type", "=", "load_type", ")", "\n", "return", "\n", "", "else", ":", "\n", "                    ", "print", "(", "'NO MORE RETRIES LEFT, FAILING in load_embeddings'", ")", "\n", "raise", "exept", "\n", "\n", "", "", "if", "self", ".", "normalize", ":", "\n", "                ", "norms", "=", "np", ".", "einsum", "(", "'ij,ij->i'", ",", "word_vectors", ",", "word_vectors", ")", "\n", "np", ".", "sqrt", "(", "norms", ",", "norms", ")", "\n", "norms", "+=", "1e-8", "\n", "word_vectors", "/=", "norms", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "\n", "", "embeddings", "=", "torch", ".", "from_numpy", "(", "word_vectors", ")", "\n", "\n", "# device = next(self.embed.parameters()).device", "\n", "# self.embed = nn.Embedding(self.dictionary.size, self.dim).to(device)", "\n", "", "self", ".", "embed", "=", "nn", ".", "Embedding", "(", "self", ".", "dictionary", ".", "size", ",", "self", ".", "dim", ")", ".", "to", "(", "settings", ".", "device", ")", "\n", "self", ".", "embed", ".", "weight", ".", "data", ".", "copy_", "(", "embeddings", ")", "\n", "self", ".", "embed", ".", "weight", ".", "requires_grad", "=", "not", "self", ".", "freeze", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.text_field.TextFieldEmbedderTokens.forward": [[125, 127], ["text_field.TextFieldEmbedderTokens.dropout", "text_field.TextFieldEmbedderTokens.embed"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.dropout"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "return", "self", ".", "dropout", "(", "self", ".", "embed", "(", "inputs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.text_field.TextFieldEmbedderCharacters.__init__": [[131, 141], ["torch.Module.__init__", "text_field.TextFieldEmbedderTokens", "text_field.TextFieldEmbedderCharacters.embedder.dictionary.lookup", "modules.seq2vec.CNNMaxpool", "torch.Dropout", "torch.Dropout", "print"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["    ", "def", "__init__", "(", "self", ",", "dictionaries", ",", "config", ")", ":", "\n", "        ", "super", "(", "TextFieldEmbedderCharacters", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embedder", "=", "TextFieldEmbedderTokens", "(", "dictionaries", ",", "config", "[", "'embedder'", "]", ")", "\n", "self", ".", "padding", "=", "self", ".", "embedder", ".", "dictionary", ".", "lookup", "(", "'PADDING'", ")", "\n", "self", ".", "seq2vec", "=", "CNNMaxpool", "(", "self", ".", "embedder", ".", "dim", ",", "config", "[", "'encoder'", "]", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", "[", "'dropout'", "]", ")", "\n", "self", ".", "dim_output", "=", "self", ".", "seq2vec", ".", "dim_output", "\n", "self", ".", "min_word_length", "=", "self", ".", "seq2vec", ".", "max_kernel", "\n", "# self.min_word_length = 50", "\n", "print", "(", "\"TextFieldEmbedderCharacters:\"", ",", "self", ".", "min_word_length", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.text_field.TextFieldEmbedderCharacters.forward": [[142, 149], ["text_field.TextFieldEmbedderCharacters.embedder", "text_field.TextFieldEmbedderCharacters.seq2vec", "text_field.TextFieldEmbedderCharacters.dropout", "torch.relu", "torch.relu", "torch.relu", "torch.relu"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.dropout"], ["", "def", "forward", "(", "self", ",", "characters", ")", ":", "\n", "# print('chars:', characters[0,0,:])", "\n", "\n", "        ", "char_vec", "=", "self", ".", "embedder", "(", "characters", ")", "\n", "# print('char_embed', char_vec.size(), char_vec.sum().item())", "\n", "char_vec", "=", "self", ".", "seq2vec", "(", "char_vec", ")", "\n", "return", "self", ".", "dropout", "(", "torch", ".", "relu", "(", "char_vec", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.text_field.TextFieldEmbedderWhitespace.__init__": [[153, 159], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dictionaries", ",", "config", ")", ":", "\n", "        ", "super", "(", "TextFieldEmbedderWhitespace", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dictionary", "=", "dictionaries", "[", "config", "[", "'dict'", "]", "]", "\n", "self", ".", "embed", "=", "nn", ".", "Embedding", "(", "self", ".", "dictionary", ".", "size", ",", "config", "[", "'dim'", "]", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", "[", "'dropout'", "]", ",", "inplace", "=", "False", ")", "\n", "self", ".", "dim", "=", "2", "*", "config", "[", "'dim'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.text_field.TextFieldEmbedderWhitespace.forward": [[160, 167], ["text_field.TextFieldEmbedderWhitespace.embed", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "text_field.TextFieldEmbedderWhitespace.dropout"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.dropout"], ["", "def", "forward", "(", "self", ",", "data", ")", ":", "\n", "        ", "inputs", "=", "data", "[", "'whitespace'", "]", "\n", "emb", "=", "self", ".", "embed", "(", "inputs", ")", "\n", "left", "=", "emb", "[", ":", ",", ":", "-", "1", ",", ":", "]", "\n", "right", "=", "emb", "[", ":", ",", "1", ":", ",", ":", "]", "\n", "output", "=", "torch", ".", "cat", "(", "(", "left", ",", "right", ")", ",", "-", "1", ")", "\n", "return", "self", ".", "dropout", "(", "output", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.bert_preprocessing.BertDocument.__init__": [[26, 44], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "# self.doc_key = key", "\n", "        ", "self", ".", "tokens", "=", "[", "]", "\n", "\n", "# Linear list mapped to subtokens without CLS, SEP", "\n", "self", ".", "subtokens", "=", "[", "]", "\n", "self", ".", "subtoken_map", "=", "[", "]", "\n", "self", ".", "token_end", "=", "[", "]", "\n", "self", ".", "sentence_end", "=", "[", "]", "\n", "self", ".", "info", "=", "[", "]", "# Only non-none for the first subtoken of each word", "\n", "\n", "# Linear list mapped to subtokens with CLS, SEP", "\n", "self", ".", "sentence_map", "=", "[", "]", "\n", "\n", "# Segments (mapped to subtokens with CLS, SEP)", "\n", "self", ".", "segments", "=", "[", "]", "\n", "self", ".", "segment_subtoken_map", "=", "[", "]", "\n", "self", ".", "segment_info", "=", "[", "]", "# Only non-none for the first subtoken of each word", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.bert_preprocessing.BertDocument.finalize": [[46, 52], ["bert_preprocessing.get_sentence_map", "bert_preprocessing.flatten"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.bert_preprocessing.get_sentence_map", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.bert_preprocessing.flatten"], ["", "def", "finalize", "(", "self", ")", ":", "\n", "        ", "sentence_map", "=", "get_sentence_map", "(", "self", ".", "segments", ",", "self", ".", "sentence_end", ")", "\n", "subtoken_map", "=", "flatten", "(", "self", ".", "segment_subtoken_map", ")", "\n", "\n", "self", ".", "subtoken_map", "=", "subtoken_map", "\n", "self", ".", "sentence_map", "=", "sentence_map", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.bert_preprocessing.get_sentence_map": [[7, 19], ["len", "sum", "sent_map.append", "range", "sent_map.append", "sent_map.append", "int", "len", "len"], "function", ["None"], ["def", "get_sentence_map", "(", "segments", ",", "sentence_end", ")", ":", "\n", "    ", "assert", "len", "(", "sentence_end", ")", "==", "sum", "(", "[", "len", "(", "seg", ")", "-", "2", "for", "seg", "in", "segments", "]", ")", "# of subtokens in all segments", "\n", "sent_map", "=", "[", "]", "\n", "sent_idx", ",", "subtok_idx", "=", "0", ",", "0", "\n", "for", "segment", "in", "segments", ":", "\n", "        ", "sent_map", ".", "append", "(", "sent_idx", ")", "# [CLS]", "\n", "for", "i", "in", "range", "(", "len", "(", "segment", ")", "-", "2", ")", ":", "\n", "            ", "sent_map", ".", "append", "(", "sent_idx", ")", "\n", "sent_idx", "+=", "int", "(", "sentence_end", "[", "subtok_idx", "]", ")", "\n", "subtok_idx", "+=", "1", "\n", "", "sent_map", ".", "append", "(", "sent_idx", ")", "# [SEP]", "\n", "", "return", "sent_map", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.bert_preprocessing.flatten": [[21, 23], ["None"], "function", ["None"], ["", "def", "flatten", "(", "l", ")", ":", "\n", "    ", "return", "[", "item", "for", "sublist", "in", "l", "for", "item", "in", "sublist", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.bert_preprocessing.split_into_segments": [[54, 85], ["len", "min", "document_state.segments.append", "document_state.segment_subtoken_map.append", "document_state.segment_info.append", "print", "min", "len", "print", "len"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "", "def", "split_into_segments", "(", "document_state", ":", "BertDocument", ",", "max_seg_len", ",", "constraints1", ",", "constraints2", ",", "tokenizer", ")", ":", "\n", "    ", "\"\"\" Split into segments.\n        Add subtokens, subtoken_map, info for each segment; add CLS, SEP in the segment subtokens\n        Input document_state: tokens, subtokens, token_end, sentence_end, utterance_end, subtoken_map, info\n    \"\"\"", "\n", "curr_idx", "=", "0", "# Index for subtokens", "\n", "prev_token_idx", "=", "0", "\n", "while", "curr_idx", "<", "len", "(", "document_state", ".", "subtokens", ")", ":", "\n", "# Try to split at a sentence end point", "\n", "        ", "end_idx", "=", "min", "(", "curr_idx", "+", "max_seg_len", "-", "1", "-", "2", ",", "len", "(", "document_state", ".", "subtokens", ")", "-", "1", ")", "# Inclusive", "\n", "while", "end_idx", ">=", "curr_idx", "and", "not", "constraints1", "[", "end_idx", "]", ":", "\n", "            ", "end_idx", "-=", "1", "\n", "", "if", "end_idx", "<", "curr_idx", ":", "\n", "            ", "print", "(", "'no sentence end found; split at token end'", ")", "\n", "# If no sentence end point, try to split at token end point", "\n", "end_idx", "=", "min", "(", "curr_idx", "+", "max_seg_len", "-", "1", "-", "2", ",", "len", "(", "document_state", ".", "subtokens", ")", "-", "1", ")", "\n", "while", "end_idx", ">=", "curr_idx", "and", "not", "constraints2", "[", "end_idx", "]", ":", "\n", "                ", "end_idx", "-=", "1", "\n", "", "if", "end_idx", "<", "curr_idx", ":", "\n", "                ", "print", "(", "'Cannot split valid segment: no sentence end or token end'", ")", "\n", "\n", "", "", "segment", "=", "[", "tokenizer", ".", "cls_token", "]", "+", "document_state", ".", "subtokens", "[", "curr_idx", ":", "end_idx", "+", "1", "]", "+", "[", "tokenizer", ".", "sep_token", "]", "\n", "document_state", ".", "segments", ".", "append", "(", "segment", ")", "\n", "\n", "subtoken_map", "=", "document_state", ".", "subtoken_map", "[", "curr_idx", ":", "end_idx", "+", "1", "]", "\n", "document_state", ".", "segment_subtoken_map", ".", "append", "(", "[", "prev_token_idx", "]", "+", "subtoken_map", "+", "[", "subtoken_map", "[", "-", "1", "]", "]", ")", "\n", "\n", "document_state", ".", "segment_info", ".", "append", "(", "[", "None", "]", "+", "document_state", ".", "info", "[", "curr_idx", ":", "end_idx", "+", "1", "]", "+", "[", "None", "]", ")", "\n", "\n", "curr_idx", "=", "end_idx", "+", "1", "\n", "prev_token_idx", "=", "subtoken_map", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.bert_preprocessing.normalize_word": [[87, 92], ["None"], "function", ["None"], ["", "", "def", "normalize_word", "(", "word", ")", ":", "\n", "    ", "if", "word", "==", "\"/.\"", "or", "word", "==", "\"/?\"", ":", "\n", "        ", "return", "word", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "        ", "return", "word", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.bert_preprocessing.get_segmented_doc_for_bert": [[95, 124], ["bert_preprocessing.BertDocument", "bert_preprocessing.split_into_segments", "bert_preprocessing.BertDocument.finalize", "bert_preprocessing.normalize_word", "tokenizer.tokenize", "BertDocument.tokens.append", "enumerate", "BertDocument.subtokens.append", "BertDocument.info.append", "BertDocument.sentence_end.append", "BertDocument.subtoken_map.append", "len", "len"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.bert_preprocessing.split_into_segments", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.bert_preprocessing.BertDocument.finalize", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.bert_preprocessing.normalize_word", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.WordpieceTokenizer.tokenize"], ["", "", "def", "get_segmented_doc_for_bert", "(", "text", ",", "seg_len", ",", "tokenizer", ")", ":", "\n", "    ", "\"\"\" Process raw input to finalized documents \"\"\"", "\n", "segmented_doc_for_bert", "=", "BertDocument", "(", ")", "\n", "word_idx", "=", "-", "1", "\n", "\n", "# Build up documents", "\n", "for", "word", "in", "text", ":", "\n", "# row = line.split()  # Columns for each token", "\n", "        ", "if", "word", "==", "'.'", ":", "\n", "            ", "segmented_doc_for_bert", ".", "sentence_end", "[", "-", "1", "]", "=", "True", "\n", "", "else", ":", "\n", "# assert len(row) >= 12", "\n", "            ", "word_idx", "+=", "1", "\n", "word", "=", "normalize_word", "(", "word", ")", "\n", "subtokens", "=", "tokenizer", ".", "tokenize", "(", "word", ")", "\n", "segmented_doc_for_bert", ".", "tokens", ".", "append", "(", "word", ")", "\n", "segmented_doc_for_bert", ".", "token_end", "+=", "[", "False", "]", "*", "(", "len", "(", "subtokens", ")", "-", "1", ")", "+", "[", "True", "]", "\n", "for", "idx", ",", "subtoken", "in", "enumerate", "(", "subtokens", ")", ":", "\n", "                ", "segmented_doc_for_bert", ".", "subtokens", ".", "append", "(", "subtoken", ")", "\n", "info", "=", "None", "if", "idx", "!=", "0", "else", "len", "(", "subtokens", ")", "\n", "segmented_doc_for_bert", ".", "info", ".", "append", "(", "info", ")", "\n", "segmented_doc_for_bert", ".", "sentence_end", ".", "append", "(", "False", ")", "\n", "segmented_doc_for_bert", ".", "subtoken_map", ".", "append", "(", "word_idx", ")", "\n", "\n", "# Split documents", "\n", "", "", "", "constraits1", "=", "segmented_doc_for_bert", ".", "sentence_end", "\n", "split_into_segments", "(", "segmented_doc_for_bert", ",", "seg_len", ",", "constraits1", ",", "segmented_doc_for_bert", ".", "token_end", ",", "tokenizer", ")", "\n", "segmented_doc_for_bert", ".", "finalize", "(", ")", "\n", "return", "segmented_doc_for_bert", "\n", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.entity.EntityEmbbederKB.__init__": [[16, 39], ["torch.Module.__init__", "dictionaries[].tolist", "datass.dictionary.Dictionary", "datass.dictionary.Dictionary", "entity.EntityEmbbederKB.predicates.add", "entity.EntityEmbbederKB.entities.add", "entity.EntityEmbbederKB.load_triples", "print", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Sequential", "torch.Sequential", "len", "len", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.entity.EntityEmbbederKB.load_triples", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["    ", "def", "__init__", "(", "self", ",", "dictionaries", ",", "config", ")", ":", "\n", "        ", "super", "(", "EntityEmbbederKB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dictionary", "=", "dictionaries", "[", "config", "[", "'dictionary'", "]", "]", ".", "tolist", "(", ")", "\n", "self", ".", "predicates", "=", "Dictionary", "(", ")", "\n", "self", ".", "entities", "=", "Dictionary", "(", ")", "\n", "self", ".", "p_padding", "=", "self", ".", "predicates", ".", "add", "(", "'__PADDING__'", ")", "\n", "self", ".", "e_padding", "=", "self", ".", "entities", ".", "add", "(", "'__PADDING__'", ")", "\n", "\n", "self", ".", "dim_pred", "=", "config", "[", "'dim_predicates'", "]", "\n", "self", ".", "dim_ents", "=", "config", "[", "'dim_entities'", "]", "\n", "self", ".", "dim_hidden", "=", "config", "[", "'dim_hidden'", "]", "\n", "self", ".", "max_facts", "=", "config", "[", "'max_facts'", "]", "\n", "\n", "self", ".", "load_triples", "(", "config", "[", "'filename'", "]", ")", "\n", "\n", "print", "(", "\"EntityEmbbederKB:\"", ",", "len", "(", "self", ".", "dictionary", ")", ",", "len", "(", "self", ".", "preds", ")", ")", "\n", "self", ".", "p_embedder", "=", "nn", ".", "Embedding", "(", "self", ".", "predicates", ".", "size", ",", "self", ".", "dim_pred", ")", "\n", "self", ".", "e_embedder", "=", "nn", ".", "Embedding", "(", "self", ".", "entities", ".", "size", ",", "self", ".", "dim_ents", ")", "\n", "self", ".", "network", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "dim_pred", "+", "self", ".", "dim_ents", ",", "self", ".", "dim_hidden", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "dim_output", "=", "self", ".", "dim_hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.entity.EntityEmbbederKB.load_triples": [[40, 58], ["print", "print", "entity.EntityEmbbederKB.entities.add", "open", "file.readlines", "json.loads", "entity.EntityEmbbederKB.entities.add", "max", "len", "entity.EntityEmbbederKB.predicates.add", "entity.EntityEmbbederKB.entities.add"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add"], ["", "def", "load_triples", "(", "self", ",", "filename", ")", ":", "\n", "        ", "print", "(", "\"loading triples:\"", ",", "filename", ")", "\n", "maxsize", "=", "0", "\n", "self", ".", "preds", "=", "{", "}", "\n", "self", ".", "objs", "=", "{", "}", "\n", "with", "open", "(", "filename", ",", "'r'", ")", "as", "file", ":", "\n", "            ", "for", "line", "in", "file", ".", "readlines", "(", ")", ":", "\n", "                ", "data", "=", "json", ".", "loads", "(", "line", ")", "\n", "identifier", "=", "data", "[", "'id'", "]", "\n", "idx", "=", "self", ".", "entities", ".", "add", "(", "identifier", ")", "\n", "maxsize", "=", "max", "(", "maxsize", ",", "len", "(", "data", "[", "'pred'", "]", ")", ")", "\n", "self", ".", "preds", "[", "idx", "]", "=", "[", "self", ".", "predicates", ".", "add", "(", "x", ")", "for", "x", "in", "data", "[", "'pred'", "]", "]", "\n", "self", ".", "objs", "[", "idx", "]", "=", "[", "self", ".", "entities", ".", "add", "(", "x", ")", "for", "x", "in", "data", "[", "'obj'", "]", "]", "\n", "", "", "print", "(", "\"maximum size:\"", ",", "maxsize", ")", "\n", "\n", "nill_entity", "=", "self", ".", "entities", ".", "add", "(", "'NILL'", ")", "\n", "self", ".", "preds", "[", "nill_entity", "]", "=", "[", "]", "\n", "self", ".", "objs", "[", "nill_entity", "]", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.entity.EntityEmbbederKB.forward": [[59, 91], ["candidat2entity.items", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().view().to", "torch.LongTensor().view().to", "torch.LongTensor().view().to", "torch.LongTensor().view().to", "entity.EntityEmbbederKB.p_embedder", "entity.EntityEmbbederKB.e_embedder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "entity.EntityEmbbederKB.network", "torch.max", "torch.max", "torch.max", "torch.max", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "outputs.view.view.view", "entity.EntityEmbbederKB.entities.lookup", "p_data.append", "e_data.append", "torch.LongTensor().view().to.view", "torch.LongTensor().view().to.view", "set", "BaseException", "entity._padding", "entity._padding", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "candidates.size", "candidates.view().tolist", "candidates.size", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "candidates.view", "candidates.view().tolist", "candidates.view"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.entity._padding", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.entity._padding", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist"], ["", "def", "forward", "(", "self", ",", "candidates", ")", ":", "\n", "# print('candidates:', candidates.size())", "\n", "        ", "candidat2entity", "=", "{", "candidate_idx", ":", "self", ".", "entities", ".", "lookup", "(", "self", ".", "dictionary", "[", "candidate_idx", "]", ")", "for", "candidate_idx", "in", "set", "(", "candidates", ".", "view", "(", "-", "1", ")", ".", "tolist", "(", ")", ")", "}", "\n", "# print(\"number of entities:\", len(candidat2entity))", "\n", "\n", "mapping2", "=", "{", "}", "\n", "p_data", "=", "[", "]", "\n", "e_data", "=", "[", "]", "\n", "index", "=", "0", "\n", "for", "candidate_idx", ",", "entity_idx", "in", "candidat2entity", ".", "items", "(", ")", ":", "\n", "            ", "if", "entity_idx", "not", "in", "self", ".", "preds", ":", "\n", "                ", "raise", "BaseException", "(", "\"no such entity:\"", ",", "entity_idx", ")", "\n", "", "p_data", ".", "append", "(", "_padding", "(", "self", ".", "preds", "[", "entity_idx", "]", ",", "self", ".", "max_facts", ",", "self", ".", "p_padding", ")", ")", "\n", "e_data", ".", "append", "(", "_padding", "(", "self", ".", "objs", "[", "entity_idx", "]", ",", "self", ".", "max_facts", ",", "self", ".", "e_padding", ")", ")", "\n", "mapping2", "[", "candidate_idx", "]", "=", "index", "\n", "index", "+=", "1", "\n", "", "p_vecs", "=", "torch", ".", "LongTensor", "(", "p_data", ")", ".", "to", "(", "candidates", ".", "device", ")", "\n", "e_vecs", "=", "torch", ".", "LongTensor", "(", "e_data", ")", ".", "to", "(", "candidates", ".", "device", ")", "\n", "\n", "inputs_x", "=", "torch", ".", "LongTensor", "(", "[", "mapping2", "[", "candidate_idx", "]", "for", "candidate_idx", "in", "candidates", ".", "view", "(", "-", "1", ")", ".", "tolist", "(", ")", "]", ")", ".", "view", "(", "candidates", ".", "size", "(", ")", ")", ".", "to", "(", "candidates", ".", "device", ")", "\n", "\n", "p_vecs", "=", "self", ".", "p_embedder", "(", "p_vecs", ")", "\n", "e_vecs", "=", "self", ".", "e_embedder", "(", "e_vecs", ")", "\n", "vecs", "=", "torch", ".", "cat", "(", "(", "p_vecs", ",", "e_vecs", ")", ",", "-", "1", ")", "\n", "vecs", "=", "self", ".", "network", "(", "vecs", ")", "\n", "vecs", ",", "_", "=", "torch", ".", "max", "(", "vecs", ",", "1", ")", "\n", "\n", "outputs", "=", "torch", ".", "index_select", "(", "vecs", ",", "0", ",", "inputs_x", ".", "view", "(", "-", "1", ")", ")", "\n", "outputs", "=", "outputs", ".", "view", "(", "candidates", ".", "size", "(", ")", "+", "(", "-", "1", ",", ")", ")", "\n", "# print('outputs:', outputs.size())", "\n", "\n", "return", "outputs", "", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.entity._padding": [[6, 11], ["len", "len"], "function", ["None"], ["def", "_padding", "(", "items", ",", "size", ",", "unknown", ")", ":", "\n", "    ", "if", "len", "(", "items", ")", "<", "size", ":", "\n", "        ", "return", "items", "+", "[", "unknown", "]", "*", "(", "size", "-", "len", "(", "items", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "items", "[", ":", "size", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.misc.MyGate.__init__": [[336, 342], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.normal_", "torch.normal_", "torch.normal_", "torch.zeros_", "torch.zeros_", "torch.zeros_"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.misc.MyGate.forward": [[343, 347], ["misc.MyGate.linear", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.misc.SpanPairs.__init__": [[372, 396], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.normal_", "torch.normal_", "torch.normal_", "BaseException"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.misc.SpanPairs.forward": [[397, 413], ["span_vecs.size", "span_vecs.unsqueeze().expand", "span_vecs.unsqueeze().expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "tmp.append", "misc.SpanPairs.distance_function", "modules.misc.misc.bucket_values", "tmp.append", "span_vecs.unsqueeze", "span_vecs.unsqueeze", "misc.SpanPairs.distance_embeddings"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.bucket_values"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.misc.SpanPairs.get_product_embedding": [[414, 419], ["span_vecs.size", "span_vecs.unsqueeze().expand", "span_vecs.unsqueeze().expand", "span_vecs.unsqueeze", "span_vecs.unsqueeze"], "methods", ["None"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.misc.SpanPairs.get_distance_embedding": [[420, 425], ["misc.SpanPairs.distance_function", "modules.misc.misc.bucket_values", "misc.SpanPairs.distance_embeddings"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.bucket_values"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.misc.inspect": [[20, 25], ["x.norm", "print", "print", "print", "x.size", "x.norm.min().item", "x.norm.max().item", "x.norm.min", "x.norm.max"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.misc.predict_scores": [[27, 45], ["torch.nonzero().tolist", "torch.nonzero().tolist", "torch.nonzero().tolist", "list", "candidate_lengths[].item", "scores[].tolist", "output[].append", "torch.nonzero", "torch.nonzero", "torch.nonzero", "linker_candidates[].tolist"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.misc.predict_scores_mtt": [[48, 72], ["torch.nonzero().tolist", "torch.nonzero().tolist", "torch.nonzero().tolist", "list", "candidate_lengths[].item", "scores[].tolist", "output[].append", "torch.nonzero", "torch.nonzero", "torch.nonzero", "entity_dictionary.get", "linker_candidates[].tolist"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.misc.prune_spans": [[74, 90], ["span_scores.view.view", "torch.topk", "torch.topk", "torch.topk", "span_scores.view.size", "span_lengths.max().item", "misc.sort_after_pruning", "span_lengths.max", "sequence_lengths.float"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.misc.sort_after_pruning"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.misc._extract_top_spans": [[112, 161], ["sorted", "range", "len", "logger.warning", "len", "start_to_max_end.get", "end_to_min_start.get", "sorted.append", "start_to_max_end.get", "end_to_min_start.get", "len", "str", "str", "len"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.misc.sort_after_pruning": [[163, 172], ["enumerate", "torch.sort", "torch.sort", "torch.sort", "span_lengths.tolist", "span_scores.size"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.misc.filter_spans": [[174, 191], ["span_vecs.contiguous().view", "modules.misc.misc.batched_index_select", "span_vecs.size", "span_vecs.size", "span_vecs.contiguous"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.batched_index_select"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.misc.create_masks": [[212, 218], ["util.sequence.get_mask_from_sequence_lengths().float", "torch.bmm", "torch.bmm", "torch.bmm", "torch.ones().tril().unsqueeze().to", "torch.ones().tril().unsqueeze().to", "torch.ones().tril().unsqueeze().to", "get_mask_from_sequence_lengths().float.unsqueeze", "get_mask_from_sequence_lengths().float.unsqueeze", "util.sequence.get_mask_from_sequence_lengths", "torch.ones().tril().unsqueeze", "torch.ones().tril().unsqueeze", "torch.ones().tril().unsqueeze", "torch.ones().tril", "torch.ones().tril", "torch.ones().tril", "torch.ones", "torch.ones", "torch.ones"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.sequence.get_mask_from_sequence_lengths"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.misc.spans_to_indices": [[220, 225], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.misc.indices_to_spans": [[227, 236], ["list", "zip", "enumerate", "b[].tolist", "e[].tolist", "span_lengths.tolist"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.misc.overwrite_spans": [[238, 257], ["span_vecs.clone", "span_vecs.clone.view", "enumerate", "span_vecs.clone.size", "span_vecs.clone.size", "span_lengths.tolist", "indices.size"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.misc.overwrite_spans_hoi": [[259, 276], ["span_vecs.clone", "span_lengths[].item"], "function", ["None"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.misc.relation_add_scores": [[278, 282], ["filtered_prune_scores.squeeze().unsqueeze", "filtered_prune_scores.squeeze().unsqueeze.unsqueeze", "filtered_prune_scores.squeeze", "scores_left.unsqueeze"], "function", ["None"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.misc.coref_add_scores": [[284, 293], ["filtered_prune_scores.squeeze().unsqueeze", "torch.eye().unsqueeze().to", "torch.eye().unsqueeze().to", "torch.eye().unsqueeze().to", "filtered_prune_scores.squeeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye", "torch.eye", "torch.eye", "coref_scores.size"], "function", ["None"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.misc.coref_add_scores_hoi": [[295, 304], ["filtered_prune_scores.squeeze().unsqueeze", "torch.eye().unsqueeze().to", "torch.eye().unsqueeze().to", "torch.eye().unsqueeze().to", "filtered_prune_scores.squeeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye", "torch.eye", "torch.eye", "coref_scores.size"], "function", ["None"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.misc.coref_add_scores_coreflinker": [[306, 331], ["filtered_prune_scores.squeeze().unsqueeze", "torch.eye().unsqueeze().to", "torch.eye().unsqueeze().to", "torch.eye().unsqueeze().to", "filtered_prune_scores.squeeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "filtered_prune_scores.squeeze().unsqueeze.size", "torch.eye", "torch.eye", "torch.eye", "coref_scores.size", "filtered_prune_scores.squeeze().unsqueeze.size", "coref_scores.size", "coref_scores.size"], "function", ["None"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.misc.span_distance_tokens": [[349, 361], ["span_begin.view.view", "span_end.view.view", "torch.relu", "torch.relu", "torch.relu", "span_begin.view.size", "span_end.view.size", "torch.relu.permute", "span_begin.view.unsqueeze", "span_end.view.unsqueeze"], "function", ["None"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.misc.span_distance_ordering": [[363, 368], ["torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "span_index.expand.expand", "torch.abs", "torch.abs", "torch.abs", "torch.abs.to", "torch.arange", "torch.arange", "torch.arange", "span_begin.size", "span_index.expand.unsqueeze", "span_index.expand.unsqueeze", "span_begin.size"], "function", ["None"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.is_bert": [[6, 10], ["None"], "function", ["None"], ["def", "is_bert", "(", "config_json", ")", ":", "\n", "    ", "if", "'bert_embedder'", "in", "config_json", "[", "'model'", "]", "[", "'text_embedder'", "]", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.print_comment_config": [[12, 34], ["None"], "function", ["None"], ["", "def", "print_comment_config", "(", "config_json", ",", "experiment_id", ",", "nr_runs", ")", ":", "\n", "    ", "att", "=", "False", "\n", "att_prop", "=", "0", "\n", "if", "'spanprop'", "in", "config_json", "[", "'model'", "]", ":", "\n", "        ", "att", "=", "True", "\n", "att_prop", "=", "config_json", "[", "'model'", "]", "[", "'spanprop'", "]", "[", "'att_prop'", "]", "\n", "", "is_it_bert", "=", "False", "\n", "\n", "if", "'bert_embedder'", "in", "config_json", "[", "'model'", "]", "[", "'text_embedder'", "]", ":", "\n", "        ", "is_it_bert", "=", "True", "\n", "# print('printing comment for ', experiment_id)", "\n", "", "to_ret", "=", "'id: {}, runs:{}, att: {}, att_prop: {}, tag: {}, coref: {}, coref prop: {}, rels: {}, rels prop: {}, bert: {}'", ".", "format", "(", "experiment_id", ",", "nr_runs", ",", "att", ",", "att_prop", ",", "\n", "config_json", "[", "'model'", "]", "[", "'ner'", "]", "[", "'enabled'", "]", ",", "\n", "config_json", "[", "'model'", "]", "[", "'coref'", "]", "[", "'enabled'", "]", ",", "\n", "(", "config_json", "[", "'model'", "]", "[", "'corefprop'", "]", "[", "'coref_prop'", "]", "\n", "if", "'coref_prop'", "in", "config_json", "[", "'model'", "]", "[", "'corefprop'", "]", "else", "'No'", ")", ",", "\n", "config_json", "[", "'model'", "]", "[", "'relations'", "]", "[", "'enabled'", "]", ",", "\n", "(", "config_json", "[", "'model'", "]", "[", "'relprop'", "]", "[", "'rel_prop'", "]", "\n", "if", "'rel_prop'", "in", "config_json", "[", "'model'", "]", "[", "'relprop'", "]", "else", "'No'", ")", ",", "\n", "is_it_bert", ")", "\n", "return", "to_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.print_comment_config_multiple": [[36, 50], ["print_tables_latex.print_comment_config", "print_tables_latex.print_comment_config", "print_tables_latex.print_comment_config", "print_tables_latex.print_comment_config"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.print_comment_config", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.print_comment_config", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.print_comment_config", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.print_comment_config"], ["", "def", "print_comment_config_multiple", "(", "config_json", ",", "experiment_id", ",", "nr_runs", ")", ":", "\n", "    ", "to_ret", "=", "''", "\n", "if", "'joint'", "in", "config_json", ":", "\n", "        ", "to_ret", "+=", "'% Joint: '", "+", "print_comment_config", "(", "config_json", "[", "'joint'", "]", ",", "experiment_id", "[", "'joint'", "]", ",", "\n", "nr_runs", "[", "'joint'", "]", ")", "+", "'\\n'", "\n", "", "if", "'ner'", "in", "config_json", ":", "\n", "        ", "to_ret", "+=", "'% NER: '", "+", "print_comment_config", "(", "config_json", "[", "'ner'", "]", ",", "experiment_id", "[", "'ner'", "]", ",", "nr_runs", "[", "'ner'", "]", ")", "+", "'\\n'", "\n", "", "if", "'coref'", "in", "config_json", ":", "\n", "        ", "to_ret", "+=", "'% Coref: '", "+", "print_comment_config", "(", "config_json", "[", "'coref'", "]", ",", "experiment_id", "[", "'coref'", "]", ",", "\n", "nr_runs", "[", "'coref'", "]", ")", "+", "'\\n'", "\n", "", "if", "'rels'", "in", "config_json", ":", "\n", "        ", "to_ret", "+=", "'% Rels: '", "+", "print_comment_config", "(", "config_json", "[", "'rels'", "]", ",", "experiment_id", "[", "'rels'", "]", ",", "nr_runs", "[", "'rels'", "]", ")", "+", "'\\n'", "\n", "\n", "", "return", "to_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res_or_nothing": [[52, 72], ["math.isclose", "math.isclose"], "function", ["None"], ["", "def", "get_res_or_nothing", "(", "result", ",", "task_activated", "=", "True", ",", "best_res", "=", "None", ",", "best_res_all", "=", "None", ",", "\n", "color", "=", "'default'", ")", ":", "\n", "# to_ret = ''", "\n", "    ", "if", "result", "[", "1", "]", ">", "-", "1", "and", "task_activated", ":", "\n", "        ", "if", "best_res", "is", "None", ":", "\n", "            ", "to_ret", "=", "'{:.1f}'", ".", "format", "(", "result", "[", "0", "]", "*", "100", ")", "\n", "", "else", ":", "\n", "            ", "if", "isclose", "(", "result", "[", "0", "]", ",", "best_res", ")", ":", "\n", "                ", "to_ret", "=", "'\\\\textbf{{{:.1f}}}'", ".", "format", "(", "result", "[", "0", "]", "*", "100", ")", "\n", "if", "best_res_all", "is", "not", "None", "and", "isclose", "(", "result", "[", "0", "]", ",", "best_res_all", ")", ":", "\n", "                    ", "to_ret", "=", "'\\\\underline{{{}}}'", ".", "format", "(", "to_ret", ")", "\n", "", "", "else", ":", "\n", "                ", "to_ret", "=", "'{:.1f}'", ".", "format", "(", "result", "[", "0", "]", "*", "100", ")", "\n", "", "", "", "else", ":", "\n", "        ", "to_ret", "=", "'-'", "\n", "\n", "", "if", "color", "!=", "'default'", ":", "\n", "        ", "to_ret", "=", "'\\\\leavevmode\\\\color{'", "+", "color", "+", "'}'", "+", "to_ret", "\n", "\n", "", "return", "to_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res": [[74, 81], ["math.isclose"], "function", ["None"], ["", "def", "get_res", "(", "result", ",", "best_res", ")", ":", "\n", "    ", "if", "isclose", "(", "result", "[", "0", "]", ",", "best_res", ")", ":", "\n", "        ", "to_ret", "=", "'\\\\textbf{{{:.1f}}}${{\\\\scriptstyle \\\\pm\\\\textbf{{{:.1f}}}}}$'", ".", "format", "(", "result", "[", "0", "]", "*", "100", ",", "result", "[", "1", "]", "*", "100", ")", "\n", "", "else", ":", "\n", "        ", "to_ret", "=", "'{:.1f}${{\\\\scriptstyle \\\\pm\\\\text{{{:.1f}}}}}$'", ".", "format", "(", "result", "[", "0", "]", "*", "100", ",", "result", "[", "1", "]", "*", "100", ")", "\n", "", "return", "to_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.print_latex_table": [[83, 365], ["print", "print", "curr_result[].lower", "print_tables_latex.is_bert", "print_tables_latex.is_bert", "curr_result[].lower", "print_tables_latex.get_res_or_nothing", "print_tables_latex.get_res_or_nothing", "print_tables_latex.get_res_or_nothing", "print_tables_latex.get_res_or_nothing", "print_tables_latex.get_res_or_nothing", "print_tables_latex.get_res_or_nothing", "print_tables_latex.get_res_or_nothing", "print_tables_latex.get_res_or_nothing", "print_tables_latex.get_res_or_nothing", "print_tables_latex.get_res_or_nothing", "print_tables_latex.print_comment_config"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.is_bert", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.is_bert", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res_or_nothing", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res_or_nothing", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res_or_nothing", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res_or_nothing", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res_or_nothing", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res_or_nothing", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res_or_nothing", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res_or_nothing", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res_or_nothing", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res_or_nothing", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.print_comment_config"], ["", "def", "print_latex_table", "(", "results_and_model_types", ":", "List", ",", "only_f1", "=", "True", ",", "metric_types", "=", "[", "'mention'", ",", "'soft'", ",", "'hard'", "]", ")", ":", "\n", "    ", "\"\"\"\n\n    :param results_and_model_types:\n    :param only_f1:\n    :param metric_types:\n    :return:\n\n    \"\"\"", "\n", "\n", "best_ner_mention_f1", "=", "0.0", "\n", "best_ner_soft_f1", "=", "0.0", "\n", "best_ner_hard_f1", "=", "0.0", "\n", "best_rel_mention_f1", "=", "0.0", "\n", "best_rel_soft_f1", "=", "0.0", "\n", "best_rel_hard_f1", "=", "0.0", "\n", "best_coref_muc_f1", "=", "0.0", "\n", "best_coref_bcubed_f1", "=", "0.0", "\n", "best_coref_ceafe_f1", "=", "0.0", "\n", "best_coref_avg_f1", "=", "0.0", "\n", "\n", "best_bert_ner_mention_f1", "=", "0.0", "\n", "best_bert_ner_soft_f1", "=", "0.0", "\n", "best_bert_ner_hard_f1", "=", "0.0", "\n", "best_bert_rel_mention_f1", "=", "0.0", "\n", "best_bert_rel_soft_f1", "=", "0.0", "\n", "best_bert_rel_hard_f1", "=", "0.0", "\n", "best_bert_coref_muc_f1", "=", "0.0", "\n", "best_bert_coref_bcubed_f1", "=", "0.0", "\n", "best_bert_coref_ceafe_f1", "=", "0.0", "\n", "best_bert_coref_avg_f1", "=", "0.0", "\n", "\n", "for", "curr_result", "in", "results_and_model_types", ":", "\n", "        ", "if", "curr_result", "[", "'results'", "]", "is", "None", ":", "\n", "            ", "continue", "\n", "", "is_joint", "=", "'joint'", "in", "curr_result", "[", "'setup'", "]", ".", "lower", "(", ")", "\n", "if", "not", "is_bert", "(", "curr_result", "[", "'results'", "]", "[", "'experiment_config'", "]", ")", ":", "\n", "            ", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'f1'", "]", "[", "0", "]", ">", "best_rel_mention_f1", ":", "\n", "                ", "if", "not", "is_joint", ":", "\n", "                    ", "best_rel_mention_f1", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "\n", "", "else", ":", "\n", "# for now just takes the expanded if it is joint", "\n", "                    ", "best_rel_mention_f1", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_mention_expanded'", "]", "[", "'f1'", "]", "[", "0", "]", "\n", "\n", "", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'f1'", "]", "[", "0", "]", ">", "best_rel_soft_f1", ":", "\n", "                ", "best_rel_soft_f1", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "\n", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'f1'", "]", "[", "0", "]", ">", "best_rel_hard_f1", ":", "\n", "                ", "best_rel_hard_f1", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "\n", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'coref'", "]", "[", "'ceafe_singleton'", "]", "[", "'f1'", "]", "[", "0", "]", ">", "best_coref_ceafe_f1", ":", "\n", "                ", "best_coref_ceafe_f1", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'coref'", "]", "[", "'ceafe_singleton'", "]", "[", "'f1'", "]", "[", "0", "]", "\n", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'coref'", "]", "[", "'b_cubed_singleton_men_conll'", "]", "[", "'f1'", "]", "[", "\n", "0", "]", ">", "best_coref_bcubed_f1", ":", "\n", "                ", "best_coref_bcubed_f1", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'coref'", "]", "[", "'b_cubed_singleton_men_conll'", "]", "[", "'f1'", "]", "[", "0", "]", "\n", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'coref'", "]", "[", "'muc'", "]", "[", "'f1'", "]", "[", "0", "]", ">", "best_coref_muc_f1", ":", "\n", "                ", "best_coref_muc_f1", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'coref'", "]", "[", "'muc'", "]", "[", "'f1'", "]", "[", "0", "]", "\n", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'f1'", "]", "[", "0", "]", ">", "best_ner_mention_f1", ":", "\n", "                ", "if", "not", "is_joint", ":", "\n", "                    ", "best_ner_mention_f1", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "\n", "", "else", ":", "\n", "                    ", "best_ner_mention_f1", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_mention_expanded'", "]", "[", "'f1'", "]", "[", "0", "]", "\n", "\n", "", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'f1'", "]", "[", "0", "]", ">", "best_ner_soft_f1", ":", "\n", "                ", "best_ner_soft_f1", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "\n", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'f1'", "]", "[", "0", "]", ">", "best_ner_hard_f1", ":", "\n", "                ", "best_ner_hard_f1", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "\n", "\n", "", "avg_coref", "=", "(", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'coref'", "]", "[", "'muc'", "]", "[", "'f1'", "]", "[", "0", "]", "+", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'coref'", "]", "[", "'b_cubed_singleton_men_conll'", "]", "[", "'f1'", "]", "[", "0", "]", "+", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'coref'", "]", "[", "'ceafe_singleton'", "]", "[", "'f1'", "]", "[", "0", "]", "\n", ")", "/", "3", "\n", "if", "avg_coref", ">", "best_coref_avg_f1", ":", "\n", "                ", "best_coref_avg_f1", "=", "avg_coref", "\n", "", "", "else", ":", "\n", "            ", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'f1'", "]", "[", "0", "]", ">", "best_bert_rel_mention_f1", ":", "\n", "                ", "if", "not", "is_joint", ":", "\n", "                    ", "best_bert_rel_mention_f1", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "\n", "", "else", ":", "\n", "                    ", "best_bert_rel_mention_f1", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_mention_expanded'", "]", "[", "'f1'", "]", "[", "0", "]", "\n", "\n", "", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'f1'", "]", "[", "0", "]", ">", "best_bert_rel_soft_f1", ":", "\n", "                ", "best_bert_rel_soft_f1", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "\n", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'f1'", "]", "[", "0", "]", ">", "best_bert_rel_hard_f1", ":", "\n", "                ", "best_bert_rel_hard_f1", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "\n", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'coref'", "]", "[", "'ceafe_singleton'", "]", "[", "'f1'", "]", "[", "\n", "0", "]", ">", "best_bert_coref_ceafe_f1", ":", "\n", "                ", "best_bert_coref_ceafe_f1", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'coref'", "]", "[", "'ceafe_singleton'", "]", "[", "'f1'", "]", "[", "0", "]", "\n", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'coref'", "]", "[", "'b_cubed_singleton_men_conll'", "]", "[", "'f1'", "]", "[", "\n", "0", "]", ">", "best_bert_coref_bcubed_f1", ":", "\n", "                ", "best_bert_coref_bcubed_f1", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'coref'", "]", "[", "'b_cubed_singleton_men_conll'", "]", "[", "'f1'", "]", "[", "0", "]", "\n", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'coref'", "]", "[", "'muc'", "]", "[", "'f1'", "]", "[", "0", "]", ">", "best_bert_coref_muc_f1", ":", "\n", "                ", "best_bert_coref_muc_f1", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'coref'", "]", "[", "'muc'", "]", "[", "'f1'", "]", "[", "0", "]", "\n", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'f1'", "]", "[", "0", "]", ">", "best_bert_ner_mention_f1", ":", "\n", "                ", "if", "not", "is_joint", ":", "\n", "                    ", "best_bert_ner_mention_f1", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "\n", "", "else", ":", "\n", "                    ", "best_bert_ner_mention_f1", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_mention_expanded'", "]", "[", "'f1'", "]", "[", "0", "]", "\n", "\n", "", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'f1'", "]", "[", "0", "]", ">", "best_bert_ner_soft_f1", ":", "\n", "                ", "best_bert_ner_soft_f1", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "\n", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'f1'", "]", "[", "0", "]", ">", "best_bert_ner_hard_f1", ":", "\n", "                ", "best_bert_ner_hard_f1", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "\n", "\n", "", "avg_coref", "=", "(", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'coref'", "]", "[", "'muc'", "]", "[", "'f1'", "]", "[", "0", "]", "+", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'coref'", "]", "[", "'b_cubed_singleton_men_conll'", "]", "[", "'f1'", "]", "[", "0", "]", "+", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'coref'", "]", "[", "'ceafe_singleton'", "]", "[", "'f1'", "]", "[", "0", "]", "\n", ")", "/", "3", "\n", "if", "avg_coref", ">", "best_bert_coref_avg_f1", ":", "\n", "                ", "best_bert_coref_avg_f1", "=", "avg_coref", "\n", "\n", "", "", "", "latex_content", "=", "'\\\\begin{table}[!ht]\\n'", "\n", "latex_content", "+=", "'\\t\\\\centering\\n'", "\n", "latex_content", "+=", "'\\t\\\\setlength{\\\\tabcolsep}{4pt}\\n'", "\n", "latex_content", "+=", "'\\t\\\\renewcommand{\\\\arraystretch}{1.0}\\n'", "\n", "latex_content", "+=", "'\\t\\\\resizebox{1.0\\\\textwidth}{!}{\\n'", "\n", "latex_content", "+=", "'\\t\\\\begin{tabular}{l cccc | ccc | ccc}\\n'", "\n", "latex_content", "+=", "'\\t\\\\toprule\\n'", "\n", "latex_content", "+=", "'\\t&'", "\n", "latex_content", "+=", "'\\t\\multicolumn{4}{c}{\\\\textbf{Coreference F1}} & '", "'\\multicolumn{3}{c}{\\\\textbf{NER F1}} & '", "'\\multicolumn{3}{c}{\\\\textbf{Relation F1}} \\\\\\\\ \\n'", "\n", "latex_content", "+=", "'\\cmidrule(lr){2-5} \\cmidrule(lr){6-8} \\cmidrule(lr){9-11}\\n'", "\n", "latex_content", "+=", "'\\t \\\\textbf{Model Setup} & \\n'", "\n", "latex_content", "+=", "'\\t \\\\makebox[2.6em]{\\\\textbf{MUC}} & \\n'", "\n", "latex_content", "+=", "'\\t \\\\makebox[2.6em]{\\\\textbf{CEAF}$\\mathbf{_{e}}$} & \\n'", "\n", "latex_content", "+=", "'\\t \\\\makebox[2.6em]{\\\\textbf{B}$\\mathbf{^3}$} & \\n'", "\n", "latex_content", "+=", "'\\t \\\\makebox[2.6em]{\\\\textbf{AVG}} & \\n'", "\n", "latex_content", "+=", "'\\t \\\\makebox[2.6em]{\\\\textbf{M-F}$\\mathbf{_1}$} & \\n'", "\n", "latex_content", "+=", "'\\t \\\\makebox[2.6em]{\\\\textbf{H-F}$\\mathbf{_1}$} & \\n'", "\n", "latex_content", "+=", "'\\t \\\\makebox[2.6em]{\\\\textbf{S-F}$\\mathbf{_1}$} & \\n'", "\n", "latex_content", "+=", "'\\t \\\\makebox[2.6em]{\\\\textbf{M-F}$\\mathbf{_1}$} & \\n'", "\n", "latex_content", "+=", "'\\t \\\\makebox[2.6em]{\\\\textbf{H-F}$\\mathbf{_1}$} & \\n'", "\n", "latex_content", "+=", "'\\t \\\\makebox[2.6em]{\\\\textbf{S-F}$\\mathbf{_1}$} \\\\\\\\ \\n'", "\n", "latex_content", "+=", "'\\t \\\\midrule \\n'", "\n", "previous_bert", "=", "False", "\n", "\n", "for", "curr_result", "in", "results_and_model_types", ":", "\n", "\n", "        ", "if", "curr_result", "[", "'results'", "]", "is", "None", ":", "\n", "            ", "latex_content", "+=", "'\\t{} & \\\\leavevmode\\\\color{{red}}? & '", "'\\\\leavevmode\\\\color{{red}}? & '", "'\\\\leavevmode\\\\color{{red}}? & '", "'\\\\leavevmode\\\\color{{red}}? & '", "'\\\\leavevmode\\\\color{{red}}? & '", "'\\\\leavevmode\\\\color{{red}}? & '", "'\\\\leavevmode\\\\color{{red}}? & '", "'\\\\leavevmode\\\\color{{red}}? & '", "'\\\\leavevmode\\\\color{{red}}? & '", "'\\\\leavevmode\\\\color{{red}}? \\\\\\\\ \\n'", ".", "format", "(", "curr_result", "[", "'setup'", "]", ")", "\n", "", "else", ":", "\n", "            ", "curr_col_ner_mention_f1", "=", "'default'", "\n", "curr_col_ner_soft_f1", "=", "'default'", "\n", "curr_col_ner_hard_f1", "=", "'default'", "\n", "curr_col_rel_mention_f1", "=", "'default'", "\n", "curr_col_rel_soft_f1", "=", "'default'", "\n", "curr_col_rel_hard_f1", "=", "'default'", "\n", "curr_col_coref_muc_f1", "=", "'default'", "\n", "curr_col_coref_ceaf_f1", "=", "'default'", "\n", "curr_col_coref_bcuded_f1", "=", "'default'", "\n", "curr_col_coref_avg_f1", "=", "'default'", "\n", "if", "curr_result", "[", "'setup'", "]", "==", "'Coref'", ":", "\n", "# TODO: assign color to coref scores in red", "\n", "                ", "curr_col_coref_avg_f1", "=", "'default'", "\n", "curr_col_coref_ceaf_f1", "=", "'default'", "\n", "curr_col_coref_muc_f1", "=", "'default'", "\n", "curr_col_coref_bcuded_f1", "=", "'default'", "\n", "", "elif", "curr_result", "[", "'setup'", "]", "==", "'Coref+NER'", ":", "\n", "                ", "curr_col_coref_avg_f1", "=", "'red'", "\n", "curr_col_coref_ceaf_f1", "=", "'red'", "\n", "curr_col_coref_muc_f1", "=", "'red'", "\n", "curr_col_coref_bcuded_f1", "=", "'red'", "\n", "curr_col_ner_mention_f1", "=", "'red'", "\n", "curr_col_ner_soft_f1", "=", "'red'", "\n", "curr_col_ner_hard_f1", "=", "'red'", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_config'", "]", "[", "'model'", "]", "[", "'ner'", "]", "[", "'enabled'", "]", "=", "True", "\n", "\n", "", "is_joint", "=", "False", "\n", "if", "'joint'", "in", "curr_result", "[", "'setup'", "]", ".", "lower", "(", ")", ":", "\n", "# TODO: assign color to mention-based scores in orange", "\n", "# curr_col_ner_mention_f1 = 'orange'", "\n", "                ", "curr_col_rel_mention_f1", "=", "'orange'", "\n", "is_joint", "=", "True", "\n", "# pass", "\n", "\n", "", "is_it_bert", "=", "is_bert", "(", "curr_result", "[", "'results'", "]", "[", "'experiment_config'", "]", ")", "\n", "if", "is_it_bert", "and", "not", "previous_bert", ":", "\n", "                ", "previous_bert", "=", "is_it_bert", "\n", "latex_content", "+=", "'\\t \\\\cmidrule{2-11}\\n'", "\n", "\n", "", "avg_coref", "=", "(", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'coref'", "]", "[", "'muc'", "]", "[", "'f1'", "]", "[", "0", "]", "+", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'coref'", "]", "[", "'b_cubed_singleton_men_conll'", "]", "[", "'f1'", "]", "[", "0", "]", "+", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'coref'", "]", "[", "'ceafe_singleton'", "]", "[", "'f1'", "]", "[", "0", "]", "\n", ")", "/", "3", "\n", "latex_content", "+=", "'\\t{} & {} & {} & {} & {} & {} & {} & {} & {} & {} & {} \\\\\\\\ \\n % {} \\n '", ".", "format", "(", "curr_result", "[", "'setup'", "]", ",", "\n", "get_res_or_nothing", "(", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'coref'", "]", "[", "'muc'", "]", "[", "'f1'", "]", ",", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_config'", "]", "[", "'model'", "]", "[", "'coref'", "]", "[", "'enabled'", "]", ",", "\n", "best_res", "=", "(", "best_bert_coref_muc_f1", "if", "is_it_bert", "else", "best_coref_muc_f1", ")", ",", "\n", "color", "=", "curr_col_coref_muc_f1", ")", ",", "\n", "get_res_or_nothing", "(", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'coref'", "]", "[", "'b_cubed_singleton_men_conll'", "]", "[", "'f1'", "]", ",", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_config'", "]", "[", "'model'", "]", "[", "'coref'", "]", "[", "'enabled'", "]", ",", "\n", "best_res", "=", "(", "best_bert_coref_bcubed_f1", "if", "is_it_bert", "else", "best_coref_bcubed_f1", ")", ",", "\n", "color", "=", "curr_col_coref_bcuded_f1", ")", ",", "\n", "get_res_or_nothing", "(", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'coref'", "]", "[", "'ceafe_singleton'", "]", "[", "'f1'", "]", ",", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_config'", "]", "[", "'model'", "]", "[", "'coref'", "]", "[", "'enabled'", "]", ",", "\n", "best_res", "=", "(", "best_bert_coref_ceafe_f1", "if", "is_it_bert", "else", "best_coref_ceafe_f1", ")", ",", "\n", "color", "=", "curr_col_coref_ceaf_f1", ")", ",", "\n", "get_res_or_nothing", "(", "(", "avg_coref", ",", "0.0", ")", ",", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_config'", "]", "[", "'model'", "]", "[", "'coref'", "]", "[", "'enabled'", "]", ",", "\n", "best_res", "=", "(", "best_bert_coref_avg_f1", "if", "is_it_bert", "else", "best_coref_avg_f1", ")", ",", "\n", "color", "=", "curr_col_coref_avg_f1", ")", ",", "\n", "\n", "get_res_or_nothing", "(", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_mention_expanded'", "]", "[", "'f1'", "]", "\n", "if", "is_joint", "else", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'f1'", "]", ",", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_config'", "]", "[", "'model'", "]", "[", "'ner'", "]", "[", "'enabled'", "]", ",", "\n", "best_res", "=", "(", "best_bert_ner_mention_f1", "if", "is_it_bert", "else", "best_ner_mention_f1", ")", ",", "\n", "color", "=", "curr_col_ner_mention_f1", ")", ",", "\n", "get_res_or_nothing", "(", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'f1'", "]", ",", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_config'", "]", "[", "'model'", "]", "[", "'ner'", "]", "[", "'enabled'", "]", ",", "\n", "best_res", "=", "(", "best_bert_ner_hard_f1", "if", "is_it_bert", "else", "best_ner_hard_f1", ")", ",", "\n", "color", "=", "curr_col_ner_hard_f1", ")", ",", "\n", "get_res_or_nothing", "(", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'f1'", "]", ",", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_config'", "]", "[", "'model'", "]", "[", "'ner'", "]", "[", "'enabled'", "]", ",", "\n", "best_res", "=", "(", "best_bert_ner_soft_f1", "if", "is_it_bert", "else", "best_ner_soft_f1", ")", ",", "\n", "color", "=", "curr_col_ner_soft_f1", ")", ",", "\n", "get_res_or_nothing", "(", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_mention_expanded'", "]", "[", "'f1'", "]", "\n", "if", "is_joint", "else", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'f1'", "]", ",", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_config'", "]", "[", "'model'", "]", "[", "'relations'", "]", "[", "'enabled'", "]", ",", "\n", "best_res", "=", "(", "best_bert_rel_mention_f1", "if", "is_it_bert", "else", "best_rel_mention_f1", ")", ",", "\n", "color", "=", "curr_col_rel_mention_f1", ")", ",", "\n", "get_res_or_nothing", "(", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'f1'", "]", ",", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_config'", "]", "[", "'model'", "]", "[", "'relations'", "]", "[", "'enabled'", "]", ",", "\n", "best_res", "=", "(", "best_bert_rel_hard_f1", "if", "is_it_bert", "else", "best_rel_hard_f1", ")", ",", "\n", "color", "=", "curr_col_rel_hard_f1", ")", ",", "\n", "get_res_or_nothing", "(", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'f1'", "]", ",", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_config'", "]", "[", "'model'", "]", "[", "'relations'", "]", "[", "\n", "'enabled'", "]", ",", "\n", "best_res", "=", "(", "best_bert_rel_soft_f1", "if", "is_it_bert", "else", "best_rel_soft_f1", ")", ",", "\n", "color", "=", "curr_col_rel_soft_f1", ")", ",", "\n", "print_comment_config", "(", "curr_result", "[", "'results'", "]", "[", "'experiment_config'", "]", ",", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_id'", "]", ",", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'nr_runs'", "]", ")", "\n", ")", "\n", "\n", "", "", "latex_content", "+=", "'\\t\\\\bottomrule \\n'", "\n", "latex_content", "+=", "'\\t\\\\end{tabular}\\n'", "\n", "latex_content", "+=", "'\\t}\\n'", "\n", "latex_content", "+=", "'\\t\\\\caption{Main Results}\\n'", "\n", "latex_content", "+=", "'\\\\label{tab:main_results}\\n'", "\n", "latex_content", "+=", "'\\\\end{table}'", "\n", "# print('results and model types: ', results_and_model_types)", "\n", "print", "(", "'latex final results table: '", ")", "\n", "print", "(", "latex_content", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_any_experiment_config": [[367, 377], ["dict"], "function", ["None"], ["", "def", "get_any_experiment_config", "(", "experiment_config", ":", "Dict", ")", ":", "\n", "    ", "if", "'joint'", "in", "experiment_config", ":", "\n", "        ", "return", "experiment_config", "[", "'joint'", "]", "\n", "", "elif", "'ner'", "in", "experiment_config", ":", "\n", "        ", "return", "experiment_config", "[", "'ner'", "]", "\n", "", "elif", "'coref'", "in", "experiment_config", ":", "\n", "        ", "return", "experiment_config", "[", "'coref'", "]", "\n", "", "elif", "'rels'", "in", "experiment_config", ":", "\n", "        ", "return", "experiment_config", "[", "'rels'", "]", "\n", "", "return", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.print_analysis_delta_table_1": [[379, 416], ["print"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "print_analysis_delta_table_1", "(", "data_delta", ":", "Dict", ")", ":", "\n", "    ", "latex_content", "=", "'\\\\begin{table}[!t]\\n'", "\n", "latex_content", "+=", "'\\\\centering\\n'", "\n", "latex_content", "+=", "'\\\\caption{Analysis.}\\n'", "\n", "latex_content", "+=", "'\\\\resizebox{0.6\\\\textwidth}{!}{\\n'", "\n", "latex_content", "+=", "'\\\\begin{tabular}{l cc c cc}\\n'", "\n", "latex_content", "+=", "'\\\\toprule\\n'", "\n", "latex_content", "+=", "'\\\\hspace*{2cm} & \\n'", "\n", "latex_content", "+=", "'\\\\multicolumn{2}{c}{\\\\textbf{Joint}} & & \\n'", "\n", "latex_content", "+=", "'\\\\multicolumn{2}{c}{\\\\textbf{Joint+BERT}} \\\\\\\\ \\n'", "\n", "latex_content", "+=", "'\\\\cmidrule(lr){2-3} \\\\cmidrule(lr){5-6} \\n'", "\n", "latex_content", "+=", "'& \\n'", "\n", "latex_content", "+=", "'\\\\makebox[3em]{\\\\textbf{NER}} & \\n'", "\n", "latex_content", "+=", "'\\\\makebox[3em]{\\\\textbf{Rels}} & \\\\makebox[0.2em]{} & \\n'", "\n", "latex_content", "+=", "'\\\\makebox[3em]{\\\\textbf{NER}} & \\\\makebox[3em]{\\\\textbf{Rels}} \\\\\\\\ \\n'", "\n", "latex_content", "+=", "'\\\\midrule \\n'", "\n", "latex_content", "+=", "'$\\\\Delta\\\\mathrm{{\\\\ }}$\\\\propformat{{AttProp}} & {:.2f} & {:.2f} &  & {:.2f} & {:.2f} \\\\\\\\ \\n'", ".", "format", "(", "data_delta", "[", "'att_prop'", "]", "[", "'delta_joint_ner'", "]", ",", "\n", "data_delta", "[", "'att_prop'", "]", "[", "'delta_joint_rel'", "]", ",", "\n", "data_delta", "[", "'att_prop'", "]", "[", "'delta_bert_ner'", "]", ",", "\n", "data_delta", "[", "'att_prop'", "]", "[", "'delta_bert_rel'", "]", ")", "\n", "latex_content", "+=", "'$\\\\Delta\\\\mathrm{{\\\\ }}$\\\\propformat{{CorefProp}} & {:.2f} & {:.2f} &  & {:.2f} & {:.2f} \\\\\\\\ \\n'", ".", "format", "(", "data_delta", "[", "'coref_prop'", "]", "[", "'delta_joint_ner'", "]", ",", "\n", "data_delta", "[", "'coref_prop'", "]", "[", "'delta_joint_rel'", "]", ",", "\n", "data_delta", "[", "'coref_prop'", "]", "[", "'delta_bert_ner'", "]", ",", "\n", "data_delta", "[", "'coref_prop'", "]", "[", "'delta_bert_rel'", "]", ")", "\n", "latex_content", "+=", "'$\\\\Delta\\\\mathrm{{\\\\ }}$\\\\propformat{{RelProp}} & {:.2f} & {:.2f} &  & {:.2f} & {:.2f} \\\\\\\\ \\n'", ".", "format", "(", "data_delta", "[", "'rel_prop'", "]", "[", "'delta_joint_ner'", "]", ",", "\n", "data_delta", "[", "'rel_prop'", "]", "[", "'delta_joint_rel'", "]", ",", "\n", "data_delta", "[", "'rel_prop'", "]", "[", "'delta_bert_ner'", "]", ",", "\n", "data_delta", "[", "'rel_prop'", "]", "[", "'delta_bert_rel'", "]", ")", "\n", "\n", "latex_content", "+=", "'\\\\bottomrule\\n'", "\n", "latex_content", "+=", "'\\\\end{tabular}}\\n'", "\n", "latex_content", "+=", "'\\\\label{tab:analysis_deltas_props}\\n'", "\n", "latex_content", "+=", "'\\\\end{table}'", "\n", "print", "(", "latex_content", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.print_analysis_delta_table_2_ner": [[418, 490], ["print"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "print_analysis_delta_table_2_ner", "(", "results_joint_base", ":", "Dict", ",", "results_joint_att_prop", ":", "Dict", ",", "\n", "results_joint_coref_prop", ":", "Dict", ",", "\n", "results_joint_rel_prop", ":", "Dict", ",", "\n", "results_joint_bert_base", ":", "Dict", ",", "results_joint_bert_att_prop", ":", "Dict", ",", "\n", "results_joint_bert_coref_prop", ":", "Dict", ",", "results_joint_bert_rel_prop", ":", "Dict", ")", ":", "\n", "    ", "latex_content", "=", "'\\\\begin{table}[!t]\\n'", "\n", "latex_content", "+=", "'\\\\centering\\n'", "\n", "latex_content", "+=", "'\\\\caption{Analysis NER Deltas.}\\n'", "\n", "latex_content", "+=", "'\\\\resizebox{0.6\\\\textwidth}{!}{\\n'", "\n", "latex_content", "+=", "'\\\\begin{tabular}{l ccc c ccc}\\n'", "\n", "latex_content", "+=", "'\\\\toprule\\n'", "\n", "latex_content", "+=", "'\\\\hspace*{2cm} & \\n'", "\n", "latex_content", "+=", "'\\\\multicolumn{3}{c}{\\\\textbf{Joint}} & & \\n'", "\n", "latex_content", "+=", "'\\\\multicolumn{3}{c}{\\\\textbf{Joint+BERT}} \\\\\\\\ \\n'", "\n", "latex_content", "+=", "'\\\\cmidrule(lr){2-4} \\\\cmidrule(lr){6-8} \\n'", "\n", "latex_content", "+=", "'& \\n'", "\n", "latex_content", "+=", "'\\\\makebox[3em]{\\\\textbf{M-F1}} & \\n'", "\n", "latex_content", "+=", "'\\\\makebox[3em]{\\\\textbf{H-F1}} & '", "'\\\\makebox[3em]{\\\\textbf{S-F1}} & '", "'\\\\makebox[0.2em]{} & \\n'", "\n", "latex_content", "+=", "'\\\\makebox[3em]{\\\\textbf{M-F1}} & '", "'\\\\makebox[3em]{\\\\textbf{H-F1}} & '", "'\\\\makebox[3em]{\\\\textbf{S-F1}} \\\\\\\\ \\n'", "\n", "latex_content", "+=", "'\\\\midrule \\n'", "\n", "latex_content", "+=", "'$\\\\Delta\\\\mathrm{{\\\\ }}$\\\\propformat{{AttProp}} & {:.2f} & {:.2f} & {:.2f} &  & {:.2f} & {:.2f} & {:.2f} \\\\\\\\ \\n'", ".", "format", "(", "results_joint_att_prop", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_base", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_att_prop", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_base", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_att_prop", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_base", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_bert_att_prop", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_bert_base", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_bert_att_prop", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_bert_base", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_bert_att_prop", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_bert_base", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "\n", ")", "\n", "latex_content", "+=", "'$\\\\Delta\\\\mathrm{{\\\\ }}$\\\\propformat{{CorefProp}} & {:.2f} & {:.2f} & {:.2f} &  & {:.2f} & {:.2f} & {:.2f} \\\\\\\\ \\n'", ".", "format", "(", "results_joint_coref_prop", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_base", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_coref_prop", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_base", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_coref_prop", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_base", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_bert_coref_prop", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_bert_base", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_bert_coref_prop", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_bert_base", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_bert_coref_prop", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_bert_base", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "\n", ")", "\n", "latex_content", "+=", "'$\\\\Delta\\\\mathrm{{\\\\ }}$\\\\propformat{{RelProp}} & {:.2f} & {:.2f} & {:.2f} &  & {:.2f} & {:.2f} & {:.2f} \\\\\\\\ \\n'", ".", "format", "(", "results_joint_rel_prop", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_base", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_rel_prop", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_base", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_rel_prop", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_base", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_bert_rel_prop", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_bert_base", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_bert_rel_prop", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_bert_base", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_bert_rel_prop", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_bert_base", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "\n", ")", "\n", "\n", "latex_content", "+=", "'\\\\bottomrule\\n'", "\n", "latex_content", "+=", "'\\\\end{tabular}}\\n'", "\n", "latex_content", "+=", "'\\\\label{tab:analysis_deltas_props_ner}\\n'", "\n", "latex_content", "+=", "'\\\\end{table}'", "\n", "print", "(", "latex_content", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.print_analysis_delta_table_2_rel": [[492, 564], ["print"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "print_analysis_delta_table_2_rel", "(", "results_joint_base", ":", "Dict", ",", "results_joint_att_prop", ":", "Dict", ",", "\n", "results_joint_coref_prop", ":", "Dict", ",", "\n", "results_joint_rel_prop", ":", "Dict", ",", "\n", "results_joint_bert_base", ":", "Dict", ",", "results_joint_bert_att_prop", ":", "Dict", ",", "\n", "results_joint_bert_coref_prop", ":", "Dict", ",", "results_joint_bert_rel_prop", ":", "Dict", ")", ":", "\n", "    ", "latex_content", "=", "'\\\\begin{table}[!t]\\n'", "\n", "latex_content", "+=", "'\\\\centering\\n'", "\n", "latex_content", "+=", "'\\\\caption{Analysis Rel Deltas.}\\n'", "\n", "latex_content", "+=", "'\\\\resizebox{0.6\\\\textwidth}{!}{\\n'", "\n", "latex_content", "+=", "'\\\\begin{tabular}{l ccc c ccc}\\n'", "\n", "latex_content", "+=", "'\\\\toprule\\n'", "\n", "latex_content", "+=", "'\\\\hspace*{2cm} & \\n'", "\n", "latex_content", "+=", "'\\\\multicolumn{3}{c}{\\\\textbf{Joint}} & & \\n'", "\n", "latex_content", "+=", "'\\\\multicolumn{3}{c}{\\\\textbf{Joint+BERT}} \\\\\\\\ \\n'", "\n", "latex_content", "+=", "'\\\\cmidrule(lr){2-4} \\\\cmidrule(lr){6-8} \\n'", "\n", "latex_content", "+=", "'& \\n'", "\n", "latex_content", "+=", "'\\\\makebox[3em]{\\\\textbf{M-F1}} & \\n'", "\n", "latex_content", "+=", "'\\\\makebox[3em]{\\\\textbf{H-F1}} & '", "'\\\\makebox[3em]{\\\\textbf{S-F1}} & '", "'\\\\makebox[0.2em]{} & \\n'", "\n", "latex_content", "+=", "'\\\\makebox[3em]{\\\\textbf{M-F1}} & '", "'\\\\makebox[3em]{\\\\textbf{H-F1}} & '", "'\\\\makebox[3em]{\\\\textbf{S-F1}} \\\\\\\\ \\n'", "\n", "latex_content", "+=", "'\\\\midrule \\n'", "\n", "latex_content", "+=", "'$\\\\Delta\\\\mathrm{{\\\\ }}$\\\\propformat{{AttProp}} & {:.2f} & {:.2f} & {:.2f} &  & {:.2f} & {:.2f} & {:.2f} \\\\\\\\ \\n'", ".", "format", "(", "results_joint_att_prop", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_base", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_att_prop", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_base", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_att_prop", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_base", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_bert_att_prop", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_bert_base", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_bert_att_prop", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_bert_base", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_bert_att_prop", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_bert_base", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "\n", ")", "\n", "latex_content", "+=", "'$\\\\Delta\\\\mathrm{{\\\\ }}$\\\\propformat{{CorefProp}} & {:.2f} & {:.2f} & {:.2f} &  & {:.2f} & {:.2f} & {:.2f} \\\\\\\\ \\n'", ".", "format", "(", "results_joint_coref_prop", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_base", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_coref_prop", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_base", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_coref_prop", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_base", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_bert_coref_prop", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_bert_base", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_bert_coref_prop", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_bert_base", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_bert_coref_prop", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_bert_base", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "\n", ")", "\n", "latex_content", "+=", "'$\\\\Delta\\\\mathrm{{\\\\ }}$\\\\propformat{{RelProp}} & {:.2f} & {:.2f} & {:.2f} &  & {:.2f} & {:.2f} & {:.2f} \\\\\\\\ \\n'", ".", "format", "(", "results_joint_rel_prop", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_base", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_rel_prop", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_base", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_rel_prop", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_base", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_bert_rel_prop", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_bert_base", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_bert_rel_prop", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_bert_base", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_bert_rel_prop", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_bert_base", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "\n", ")", "\n", "\n", "latex_content", "+=", "'\\\\bottomrule\\n'", "\n", "latex_content", "+=", "'\\\\end{tabular}}\\n'", "\n", "latex_content", "+=", "'\\\\label{tab:analysis_deltas_props_rel}\\n'", "\n", "latex_content", "+=", "'\\\\end{table}'", "\n", "print", "(", "latex_content", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.print_analysis_delta_table_3_both": [[566, 704], ["print"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "print_analysis_delta_table_3_both", "(", "results_joint_base", ":", "Dict", ",", "results_joint_att_prop", ":", "Dict", ",", "\n", "results_joint_coref_prop", ":", "Dict", ",", "\n", "results_joint_rel_prop", ":", "Dict", ",", "\n", "results_joint_bert_base", ":", "Dict", ",", "results_joint_bert_att_prop", ":", "Dict", ",", "\n", "results_joint_bert_coref_prop", ":", "Dict", ",", "results_joint_bert_rel_prop", ":", "Dict", ")", ":", "\n", "# table based on Chris' improvement in merging two delta tables into one containing deltas for NER and RE in", "\n", "# a single table", "\n", "    ", "\"\"\"\n\n    :param esults_joint_base:\n    :param results_joint_att_prop:\n    :param results_joint_coref_prop:\n    :param results_joint_rel_prop:\n    :param results_joint_bert_base:\n    :param results_joint_bert_att_prop:\n    :param results_joint_bert_coref_prop:\n    :param results_joint_bert_rel_prop:\n    :return:\n    \"\"\"", "\n", "\n", "latex_content", "=", "'\\\\begin{table}\\n'", "\n", "latex_content", "+=", "'\\\\centering\\n'", "\n", "latex_content", "+=", "'\\\\caption{Deltas of improvement in performance for each of the graph propagation methods '", "'(\\\\propformat{AttProp}, \\\\propformat{CorefProp}, \\\\propformat{RelProp}) in $\\\\mathrm{F_1}$ '", "'scores for \\\\textbf{(a)}~NER and \\\\textbf{(b)}~relation extraction tasks.}\\n'", "\n", "latex_content", "+=", "'\\\\label{tab:analysis_deltas_props}\\n'", "\n", "latex_content", "+=", "'\\\\begin{tabular}{c l ccc c ccc}\\n'", "\n", "latex_content", "+=", "'\\\\toprule\\n'", "\n", "latex_content", "+=", "'& & \\n'", "\n", "latex_content", "+=", "'\\\\multicolumn{3}{c}{\\\\textbf{Joint}} & & \\n'", "\n", "latex_content", "+=", "'\\\\multicolumn{3}{c}{\\\\textbf{Joint+BERT}} \\\\\\\\ \\n'", "\n", "latex_content", "+=", "'\\\\cmidrule(lr){3-5} \\\\cmidrule(lr){7-9} \\n'", "\n", "latex_content", "+=", "'& & \\n'", "\n", "latex_content", "+=", "'$\\\\mathbf{F_{1,m}}$ & \\n'", "\n", "latex_content", "+=", "'$\\\\mathbf{F_{1,h}}$ & \\n'", "\n", "latex_content", "+=", "'$\\\\mathbf{F_{1,s}}$ & \\n'", "\n", "latex_content", "+=", "'& \\n'", "\n", "latex_content", "+=", "'$\\\\mathbf{F_{1,m}}$ & \\n'", "\n", "latex_content", "+=", "'$\\\\mathbf{F_{1,h}}$ & \\n'", "\n", "latex_content", "+=", "'$\\\\mathbf{F_{1,s}}$ \\\\\\\\ \\n'", "\n", "latex_content", "+=", "'\\\\midrule \\n'", "\n", "latex_content", "+=", "'\\\\multirow{3}{*}{\\\\textbf{(a)~NER}} & \\n'", "\n", "latex_content", "+=", "'$\\\\Delta\\\\mathrm{{\\\\ }}$\\\\propformat{{AttProp}} & {:.2f} & {:.2f} & {:.2f} &  & '", "'{:.2f} & {:.2f} & {:.2f} \\\\\\\\ \\n'", ".", "format", "(", "results_joint_att_prop", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_base", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_att_prop", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_base", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_att_prop", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_base", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_bert_att_prop", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_bert_base", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_bert_att_prop", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_bert_base", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_bert_att_prop", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_bert_base", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "\n", ")", "\n", "latex_content", "+=", "'& $\\\\Delta\\\\mathrm{{\\\\ }}$\\\\propformat{{CorefProp}} & {:.2f} & {:.2f} & {:.2f} &  & '", "'{:.2f} & {:.2f} & {:.2f} \\\\\\\\ \\n'", ".", "format", "(", "results_joint_coref_prop", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_base", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_coref_prop", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_base", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_coref_prop", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_base", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_bert_coref_prop", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_bert_base", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_bert_coref_prop", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_bert_base", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_bert_coref_prop", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_bert_base", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "\n", ")", "\n", "latex_content", "+=", "'& $\\\\Delta\\\\mathrm{{\\\\ }}$\\\\propformat{{RelProp}} & {:.2f} & {:.2f} & {:.2f} &  & '", "'{:.2f} & {:.2f} & {:.2f} \\\\\\\\ \\n'", ".", "format", "(", "results_joint_rel_prop", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_base", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_rel_prop", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_base", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_rel_prop", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_base", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_bert_rel_prop", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_bert_base", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_bert_rel_prop", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_bert_base", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_bert_rel_prop", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_bert_base", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "\n", ")", "\n", "latex_content", "+=", "'\\\\midrule \\n'", "\n", "latex_content", "+=", "'\\\\multirow{3}{*}{\\\\textbf{(a)~NER}} & \\n'", "\n", "latex_content", "+=", "'$\\\\Delta\\\\mathrm{{\\\\ }}$\\\\propformat{{AttProp}} & {:.2f} & {:.2f} & {:.2f} &  & '", "'{:.2f} & {:.2f} & {:.2f} \\\\\\\\ \\n'", ".", "format", "(", "results_joint_att_prop", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_base", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_att_prop", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_base", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_att_prop", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_base", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_bert_att_prop", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_bert_base", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_bert_att_prop", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_bert_base", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_bert_att_prop", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_bert_base", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ")", "\n", "latex_content", "+=", "'& $\\\\Delta\\\\mathrm{{\\\\ }}$\\\\propformat{{CorefProp}} & {:.2f} & {:.2f} & {:.2f} &  & '", "'{:.2f} & {:.2f} & {:.2f} \\\\\\\\ \\n'", ".", "format", "(", "results_joint_coref_prop", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_base", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_coref_prop", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_base", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_coref_prop", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_base", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_bert_coref_prop", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_bert_base", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_bert_coref_prop", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_bert_base", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_bert_coref_prop", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_bert_base", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "\n", ")", "\n", "latex_content", "+=", "'& $\\\\Delta\\\\mathrm{{\\\\ }}$\\\\propformat{{RelProp}} & {:.2f} & {:.2f} & {:.2f} &  & '", "'{:.2f} & {:.2f} & {:.2f} \\\\\\\\ \\n'", ".", "format", "(", "results_joint_rel_prop", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_base", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_rel_prop", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_base", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_rel_prop", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_base", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_bert_rel_prop", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_bert_base", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_bert_rel_prop", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_bert_base", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", ",", "\n", "results_joint_bert_rel_prop", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "-", "\n", "results_joint_bert_base", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "*", "100", "\n", ")", "\n", "latex_content", "+=", "'\\\\bottomrule \\n'", "\n", "latex_content", "+=", "'\\\\end{tabular} \\n'", "\n", "latex_content", "+=", "'\\\\end{table}'", "\n", "\n", "print", "(", "latex_content", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.print_latex_table_layout2": [[706, 1128], ["max", "max", "max", "max", "max", "max", "max", "max", "max", "max", "print", "print", "dict", "print_tables_latex.get_any_experiment_config", "dict", "dict", "dict", "print_tables_latex.get_any_experiment_config", "print_tables_latex.is_bert", "curr_result[].lower", "print_tables_latex.is_bert", "print_tables_latex.get_res_or_nothing", "print_tables_latex.get_res_or_nothing", "print_tables_latex.get_res_or_nothing", "print_tables_latex.get_res_or_nothing", "print_tables_latex.get_res_or_nothing", "print_tables_latex.get_res_or_nothing", "print_tables_latex.print_comment_config_multiple", "max", "max", "max", "max", "max", "max", "max", "max", "max", "max", "print_tables_latex.get_res_or_nothing", "print_tables_latex.get_res_or_nothing", "print_tables_latex.get_res_or_nothing", "print_tables_latex.get_res_or_nothing", "max", "max", "max", "max", "max", "max", "max", "max", "max", "max", "max", "max", "max", "max", "max", "max", "max", "max", "max", "max"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_any_experiment_config", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_any_experiment_config", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.is_bert", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.is_bert", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res_or_nothing", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res_or_nothing", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res_or_nothing", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res_or_nothing", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res_or_nothing", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res_or_nothing", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.print_comment_config_multiple", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res_or_nothing", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res_or_nothing", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res_or_nothing", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res_or_nothing"], ["", "def", "print_latex_table_layout2", "(", "results_and_model_types", ":", "List", ",", "is_ner_expanded", "=", "False", ",", "is_rels_expanded", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n\n    :param results_and_model_types:\n    :param only_f1:\n    :param metric_types:\n    :return:\n\n    \"\"\"", "\n", "rels_mention_metric", "=", "'rels_mention'", "if", "not", "is_rels_expanded", "else", "'rels_mention_expanded'", "\n", "ner_mention_metric", "=", "'tags_mention'", "if", "not", "is_ner_expanded", "else", "'tags_mention_expanded'", "\n", "\n", "best_single_ner_mention_f1", "=", "0.0", "\n", "best_single_ner_soft_f1", "=", "0.0", "\n", "best_single_ner_hard_f1", "=", "0.0", "\n", "best_single_rel_mention_f1", "=", "0.0", "\n", "best_single_rel_soft_f1", "=", "0.0", "\n", "best_single_rel_hard_f1", "=", "0.0", "\n", "best_single_coref_muc_f1", "=", "0.0", "\n", "best_single_coref_bcubed_f1", "=", "0.0", "\n", "best_single_coref_ceafe_f1", "=", "0.0", "\n", "best_single_coref_avg_f1", "=", "0.0", "\n", "\n", "best_joint_ner_mention_f1", "=", "0.0", "\n", "best_joint_ner_soft_f1", "=", "0.0", "\n", "best_joint_ner_hard_f1", "=", "0.0", "\n", "best_joint_rel_mention_f1", "=", "0.0", "\n", "best_joint_rel_soft_f1", "=", "0.0", "\n", "best_joint_rel_hard_f1", "=", "0.0", "\n", "best_joint_coref_muc_f1", "=", "0.0", "\n", "best_joint_coref_bcubed_f1", "=", "0.0", "\n", "best_joint_coref_ceafe_f1", "=", "0.0", "\n", "best_joint_coref_avg_f1", "=", "0.0", "\n", "\n", "best_joint_bert_ner_mention_f1", "=", "0.0", "\n", "best_joint_bert_ner_soft_f1", "=", "0.0", "\n", "best_joint_bert_ner_hard_f1", "=", "0.0", "\n", "best_joint_bert_rel_mention_f1", "=", "0.0", "\n", "best_joint_bert_rel_soft_f1", "=", "0.0", "\n", "best_joint_bert_rel_hard_f1", "=", "0.0", "\n", "best_joint_bert_coref_muc_f1", "=", "0.0", "\n", "best_joint_bert_coref_bcubed_f1", "=", "0.0", "\n", "best_joint_bert_coref_ceafe_f1", "=", "0.0", "\n", "best_joint_bert_coref_avg_f1", "=", "0.0", "\n", "\n", "# best_all_ner_mention_f1 = 0.0", "\n", "# best_all_ner_soft_f1 = 0.0", "\n", "# best_all_ner_hard_f1 = 0.0", "\n", "# best_all_rel_mention_f1 = 0.0", "\n", "# best_all_rel_soft_f1 = 0.0", "\n", "# best_all_rel_hard_f1 = 0.0", "\n", "# best_all_coref_muc_f1 = 0.0", "\n", "# best_all_coref_bcubed_f1 = 0.0", "\n", "# best_all_coref_ceafe_f1 = 0.0", "\n", "# best_all_coref_avg_f1 = 0.0", "\n", "\n", "for", "curr_result", "in", "results_and_model_types", ":", "\n", "        ", "experiment_config", "=", "dict", "(", ")", "\n", "if", "curr_result", "[", "'type'", "]", "==", "'single'", ":", "\n", "            ", "if", "'results_ner'", "in", "curr_result", ":", "\n", "                ", "res_ner", "=", "curr_result", "[", "'results_ner'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "\n", "experiment_config", "[", "'ner'", "]", "=", "curr_result", "[", "'results_ner'", "]", "[", "'experiment_config'", "]", "\n", "", "else", ":", "\n", "                ", "res_ner", "=", "None", "\n", "", "if", "'results_coref'", "in", "curr_result", ":", "\n", "                ", "res_coref", "=", "curr_result", "[", "'results_coref'", "]", "[", "'experiment_results'", "]", "[", "'coref'", "]", "\n", "experiment_config", "[", "'coref'", "]", "=", "curr_result", "[", "'results_coref'", "]", "[", "'experiment_config'", "]", "\n", "", "else", ":", "\n", "                ", "res_coref", "=", "None", "\n", "\n", "", "if", "'results_rel'", "in", "curr_result", ":", "\n", "                ", "res_relations", "=", "curr_result", "[", "'results_rel'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "\n", "experiment_config", "[", "'rels'", "]", "=", "curr_result", "[", "'results_rel'", "]", "[", "'experiment_config'", "]", "\n", "", "else", ":", "\n", "                ", "res_relations", "=", "None", "\n", "\n", "", "", "else", ":", "\n", "            ", "res_ner", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "\n", "res_coref", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'coref'", "]", "\n", "res_relations", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "\n", "experiment_config", "[", "'joint'", "]", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_config'", "]", "\n", "\n", "", "is_joint", "=", "'joint'", "in", "curr_result", "[", "'type'", "]", ".", "lower", "(", ")", "\n", "any_exp_config", "=", "get_any_experiment_config", "(", "experiment_config", ")", "\n", "if", "not", "is_bert", "(", "any_exp_config", ")", ":", "\n", "            ", "if", "res_relations", "is", "not", "None", ":", "\n", "                ", "if", "not", "is_joint", ":", "\n", "                    ", "best_single_rel_mention_f1", "=", "max", "(", "best_single_rel_mention_f1", ",", "\n", "res_relations", "[", "rels_mention_metric", "]", "[", "'f1'", "]", "[", "0", "]", ")", "\n", "best_single_rel_soft_f1", "=", "max", "(", "best_single_rel_soft_f1", ",", "res_relations", "[", "'rels_soft'", "]", "[", "'f1'", "]", "[", "0", "]", ")", "\n", "best_single_rel_hard_f1", "=", "max", "(", "best_single_rel_hard_f1", ",", "res_relations", "[", "'rels_hard'", "]", "[", "'f1'", "]", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                    ", "best_joint_rel_mention_f1", "=", "max", "(", "best_joint_rel_mention_f1", ",", "\n", "res_relations", "[", "rels_mention_metric", "]", "[", "'f1'", "]", "[", "0", "]", ")", "\n", "best_joint_rel_soft_f1", "=", "max", "(", "best_joint_rel_soft_f1", ",", "res_relations", "[", "'rels_soft'", "]", "[", "'f1'", "]", "[", "0", "]", ")", "\n", "best_joint_rel_hard_f1", "=", "max", "(", "best_joint_rel_hard_f1", ",", "res_relations", "[", "'rels_hard'", "]", "[", "'f1'", "]", "[", "0", "]", ")", "\n", "\n", "", "", "if", "res_coref", "is", "not", "None", ":", "\n", "                ", "if", "not", "is_joint", ":", "\n", "                    ", "best_single_coref_ceafe_f1", "=", "max", "(", "res_coref", "[", "'ceafe_singleton'", "]", "[", "'f1'", "]", "[", "0", "]", ",", "best_single_coref_ceafe_f1", ")", "\n", "best_single_coref_bcubed_f1", "=", "max", "(", "res_coref", "[", "'b_cubed_singleton_men_conll'", "]", "[", "'f1'", "]", "[", "0", "]", ",", "\n", "best_single_coref_bcubed_f1", ")", "\n", "best_single_coref_muc_f1", "=", "max", "(", "best_single_coref_muc_f1", ",", "res_coref", "[", "'muc'", "]", "[", "'f1'", "]", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                    ", "best_joint_coref_ceafe_f1", "=", "max", "(", "res_coref", "[", "'ceafe_singleton'", "]", "[", "'f1'", "]", "[", "0", "]", ",", "best_joint_coref_ceafe_f1", ")", "\n", "best_joint_coref_bcubed_f1", "=", "max", "(", "res_coref", "[", "'b_cubed_singleton_men_conll'", "]", "[", "'f1'", "]", "[", "0", "]", ",", "\n", "best_joint_coref_bcubed_f1", ")", "\n", "best_joint_coref_muc_f1", "=", "max", "(", "best_joint_coref_muc_f1", ",", "res_coref", "[", "'muc'", "]", "[", "'f1'", "]", "[", "0", "]", ")", "\n", "\n", "", "", "if", "res_ner", "is", "not", "None", ":", "\n", "                ", "if", "not", "is_joint", ":", "\n", "                    ", "best_single_ner_mention_f1", "=", "max", "(", "best_single_ner_mention_f1", ",", "res_ner", "[", "ner_mention_metric", "]", "[", "'f1'", "]", "[", "0", "]", ")", "\n", "best_single_ner_soft_f1", "=", "max", "(", "best_single_ner_soft_f1", ",", "res_ner", "[", "'tags_soft'", "]", "[", "'f1'", "]", "[", "0", "]", ")", "\n", "best_single_ner_hard_f1", "=", "max", "(", "best_single_ner_hard_f1", ",", "res_ner", "[", "'tags_hard'", "]", "[", "'f1'", "]", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                    ", "best_joint_ner_mention_f1", "=", "max", "(", "best_joint_ner_mention_f1", ",", "res_ner", "[", "ner_mention_metric", "]", "[", "'f1'", "]", "[", "0", "]", ")", "\n", "best_joint_ner_soft_f1", "=", "max", "(", "best_joint_ner_soft_f1", ",", "res_ner", "[", "'tags_soft'", "]", "[", "'f1'", "]", "[", "0", "]", ")", "\n", "best_joint_ner_hard_f1", "=", "max", "(", "best_joint_ner_hard_f1", ",", "res_ner", "[", "'tags_hard'", "]", "[", "'f1'", "]", "[", "0", "]", ")", "\n", "\n", "", "", "if", "res_coref", "is", "not", "None", ":", "\n", "                ", "avg_coref", "=", "(", "res_coref", "[", "'muc'", "]", "[", "'f1'", "]", "[", "0", "]", "+", "res_coref", "[", "'b_cubed_singleton_men_conll'", "]", "[", "'f1'", "]", "[", "0", "]", "+", "\n", "res_coref", "[", "'ceafe_singleton'", "]", "[", "'f1'", "]", "[", "0", "]", ")", "/", "3", "\n", "if", "not", "is_joint", ":", "\n", "                    ", "best_single_coref_avg_f1", "=", "max", "(", "best_single_coref_avg_f1", ",", "avg_coref", ")", "\n", "", "else", ":", "\n", "                    ", "best_joint_coref_avg_f1", "=", "max", "(", "best_joint_coref_avg_f1", ",", "avg_coref", ")", "\n", "", "", "", "else", ":", "\n", "            ", "if", "res_relations", "is", "not", "None", ":", "\n", "                ", "best_joint_bert_rel_mention_f1", "=", "max", "(", "best_joint_bert_rel_mention_f1", ",", "\n", "res_relations", "[", "rels_mention_metric", "]", "[", "'f1'", "]", "[", "0", "]", ")", "\n", "best_joint_bert_rel_soft_f1", "=", "max", "(", "best_joint_bert_rel_soft_f1", ",", "res_relations", "[", "'rels_soft'", "]", "[", "'f1'", "]", "[", "0", "]", ")", "\n", "best_joint_bert_rel_hard_f1", "=", "max", "(", "best_joint_bert_rel_hard_f1", ",", "res_relations", "[", "'rels_hard'", "]", "[", "'f1'", "]", "[", "0", "]", ")", "\n", "\n", "", "if", "res_coref", "is", "not", "None", ":", "\n", "                ", "best_joint_bert_coref_ceafe_f1", "=", "max", "(", "res_coref", "[", "'ceafe_singleton'", "]", "[", "'f1'", "]", "[", "0", "]", ",", "\n", "best_joint_bert_coref_ceafe_f1", ")", "\n", "best_joint_bert_coref_bcubed_f1", "=", "max", "(", "res_coref", "[", "'b_cubed_singleton_men_conll'", "]", "[", "'f1'", "]", "[", "0", "]", ",", "\n", "best_joint_bert_coref_bcubed_f1", ")", "\n", "best_joint_bert_coref_muc_f1", "=", "max", "(", "best_joint_bert_coref_muc_f1", ",", "res_coref", "[", "'muc'", "]", "[", "'f1'", "]", "[", "0", "]", ")", "\n", "\n", "", "if", "res_ner", "is", "not", "None", ":", "\n", "                ", "best_joint_bert_ner_mention_f1", "=", "max", "(", "best_joint_bert_ner_mention_f1", ",", "\n", "res_ner", "[", "ner_mention_metric", "]", "[", "'f1'", "]", "[", "0", "]", ")", "\n", "best_joint_bert_ner_soft_f1", "=", "max", "(", "best_joint_bert_ner_soft_f1", ",", "res_ner", "[", "'tags_soft'", "]", "[", "'f1'", "]", "[", "0", "]", ")", "\n", "best_joint_bert_ner_hard_f1", "=", "max", "(", "best_joint_bert_ner_hard_f1", ",", "res_ner", "[", "'tags_hard'", "]", "[", "'f1'", "]", "[", "0", "]", ")", "\n", "\n", "", "if", "res_coref", "is", "not", "None", ":", "\n", "                ", "avg_coref", "=", "(", "res_coref", "[", "'muc'", "]", "[", "'f1'", "]", "[", "0", "]", "+", "res_coref", "[", "'b_cubed_singleton_men_conll'", "]", "[", "'f1'", "]", "[", "0", "]", "+", "\n", "res_coref", "[", "'ceafe_singleton'", "]", "[", "'f1'", "]", "[", "0", "]", ")", "/", "3", "\n", "best_joint_bert_coref_avg_f1", "=", "max", "(", "best_joint_bert_coref_avg_f1", ",", "avg_coref", ")", "\n", "\n", "", "", "", "best_all_coref_avg_f1", "=", "max", "(", "best_joint_bert_coref_avg_f1", ",", "best_joint_coref_avg_f1", ",", "best_single_coref_avg_f1", ")", "\n", "best_all_coref_ceafe_f1", "=", "max", "(", "best_joint_bert_coref_ceafe_f1", ",", "best_joint_coref_ceafe_f1", ",", "best_single_coref_ceafe_f1", ")", "\n", "best_all_coref_muc_f1", "=", "max", "(", "best_joint_bert_coref_muc_f1", ",", "best_joint_coref_muc_f1", ",", "best_single_coref_muc_f1", ")", "\n", "best_all_coref_bcubed_f1", "=", "max", "(", "best_joint_bert_coref_bcubed_f1", ",", "best_joint_coref_bcubed_f1", ",", "\n", "best_single_coref_bcubed_f1", ")", "\n", "\n", "best_all_rel_hard_f1", "=", "max", "(", "best_joint_bert_rel_hard_f1", ",", "best_joint_rel_hard_f1", ",", "best_single_rel_hard_f1", ")", "\n", "best_all_rel_soft_f1", "=", "max", "(", "best_joint_bert_rel_soft_f1", ",", "best_joint_rel_soft_f1", ",", "best_single_rel_soft_f1", ")", "\n", "best_all_rel_mention_f1", "=", "max", "(", "best_joint_bert_rel_mention_f1", ",", "best_joint_rel_mention_f1", ",", "best_single_rel_mention_f1", ")", "\n", "\n", "best_all_ner_hard_f1", "=", "max", "(", "best_joint_bert_ner_hard_f1", ",", "best_joint_ner_hard_f1", ",", "best_single_ner_hard_f1", ")", "\n", "best_all_ner_soft_f1", "=", "max", "(", "best_joint_bert_ner_soft_f1", ",", "best_joint_ner_soft_f1", ",", "best_single_ner_soft_f1", ")", "\n", "best_all_ner_mention_f1", "=", "max", "(", "best_joint_bert_ner_mention_f1", ",", "best_joint_ner_mention_f1", ",", "best_single_ner_mention_f1", ")", "\n", "\n", "# latex_content = '\\\\begin{table}[!ht]\\n'", "\n", "latex_content", "=", "'\\\\begin{table}\\n'", "\n", "latex_content", "+=", "'\\t\\\\centering\\n'", "\n", "latex_content", "+=", "'\\\\caption[test]{\\\\klimtext{Main results of the experiments grouped in three model setups: '", "'\\\\begin{enumerate*}[(i)]\\n'", "\n", "latex_content", "+=", "'\\t\\\\item \\\\textit{Single} models trained individually,\\n'", "\n", "latex_content", "+=", "'\\t\\\\item \\\\textit{Joint} model trained using as input GloVe and character embeddings, and \\n'", "\n", "latex_content", "+=", "'\\t\\\\item \\\\textit{Joint+BERT} model trained on BERT$_{\\\\mathrm{BASE}}$ embeddings.\\n'", "\n", "latex_content", "+=", "'\\t\\\\end{enumerate*}. \\n'", "'\\t To report the results, we use MUC, CEAF$_\\\\text{e}$, B$^\\\\text{3}$ as well as the average '", "'(Avg.) of these three metrics for \\\\textit{coreference resolution}. For NER and RE we use \\n'", "'\\t mention-level (F$_\\\\text{1,m}$), hard entity-level (F$_\\\\text{1,h}$), and soft entity-level '", "'(F$_\\\\text{1,s}$) metrics described in \\\\secref{sec:metrics}. In bold we mark the best results '", "'for each model setup, the best overall results are underlined.}} \\n'", "\n", "latex_content", "+=", "'\\t\\\\label{tab:main_results}\\n'", "\n", "latex_content", "+=", "'\\t\\\\setlength{\\\\tabcolsep}{4pt}\\n'", "\n", "latex_content", "+=", "'\\t\\\\renewcommand{\\\\arraystretch}{1.0}\\n'", "\n", "# latex_content += '\\t\\\\resizebox{1.0\\\\textwidth}{!}{\\n'", "\n", "# latex_content += '\\t\\\\begin{tabular}{l cccc | ccc | ccc}\\n'", "\n", "latex_content", "+=", "'\\t\\\\begin{tabular}{l cccc c ccc c ccc}\\n'", "\n", "latex_content", "+=", "'\\t\\\\toprule\\n'", "\n", "latex_content", "+=", "'\\t&'", "\n", "latex_content", "+=", "'\\t\\multicolumn{4}{c}{\\\\textbf{Coreference} $\\\\mathbf{F_1}$} && '", "'\\multicolumn{3}{c}{\\\\textbf{NER} $\\\\mathbf{F_1}$} && '", "'\\multicolumn{3}{c}{\\\\textbf{Relation} $\\\\mathbf{F_1}$} \\\\\\\\ \\n'", "\n", "# latex_content += '\\\\cmidrule(lr){2-5} \\\\cmidrule(lr){6-8} \\\\cmidrule(lr){9-11}\\n'", "\n", "latex_content", "+=", "'\\\\cmidrule(lr){2-5} \\\\cmidrule(lr){7-9} \\\\cmidrule(lr){11-13}\\n'", "\n", "latex_content", "+=", "'\\t \\\\textbf{Model Setup} & \\n'", "\n", "latex_content", "+=", "'\\t \\\\textbf{MUC} & \\n'", "\n", "latex_content", "+=", "'\\t \\\\textbf{CEAF}$\\\\mathbf{_{e}}$ & \\n'", "\n", "latex_content", "+=", "'\\t $\\\\mathbf{B^3}$ & \\n'", "\n", "latex_content", "+=", "'\\t \\\\textbf{Avg.} & \\n'", "\n", "latex_content", "+=", "'\\t \\\\hspace{.5em} & \\n'", "\n", "latex_content", "+=", "'\\t $\\\\mathbf{F_{1,m}}$ & \\n'", "\n", "latex_content", "+=", "'\\t $\\\\mathbf{F_{1,h}}$ & \\n'", "\n", "latex_content", "+=", "'\\t $\\\\mathbf{F_{1,s}}$ & \\n'", "\n", "latex_content", "+=", "'\\t \\\\hspace{.5em} & \\n'", "\n", "latex_content", "+=", "'\\t $\\\\mathbf{F_{1,m}}$ & \\n'", "\n", "latex_content", "+=", "'\\t $\\\\mathbf{F_{1,h}}$ & \\n'", "\n", "latex_content", "+=", "'\\t $\\\\mathbf{F_{1,s}}$ \\\\\\\\ \\n'", "\n", "# latex_content += '\\t \\\\makebox[2.6em]{\\\\textbf{MUC}} & \\n'", "\n", "# latex_content += '\\t \\\\makebox[2.6em]{\\\\textbf{CEAF}$\\mathbf{_{e}}$} & \\n'", "\n", "# latex_content += '\\t \\\\makebox[2.6em]{\\\\textbf{B}$\\mathbf{^3}$} & \\n'", "\n", "# latex_content += '\\t \\\\makebox[2.6em]{\\\\textbf{Avg.}} & \\n'", "\n", "# latex_content += '\\t \\\\makebox[2.6em]{\\\\textbf{M-F}$\\mathbf{_1}$} & \\n'", "\n", "# latex_content += '\\t \\\\makebox[2.6em]{\\\\textbf{H-F}$\\mathbf{_1}$} & \\n'", "\n", "# latex_content += '\\t \\\\makebox[2.6em]{\\\\textbf{S-F}$\\mathbf{_1}$} & \\n'", "\n", "# latex_content += '\\t \\\\makebox[2.6em]{\\\\textbf{M-F}$\\mathbf{_1}$} & \\n'", "\n", "# latex_content += '\\t \\\\makebox[2.6em]{\\\\textbf{H-F}$\\mathbf{_1}$} & \\n'", "\n", "# latex_content += '\\t \\\\makebox[2.6em]{\\\\textbf{S-F}$\\mathbf{_1}$} \\\\\\\\ \\n'", "\n", "latex_content", "+=", "'\\t \\\\midrule \\n'", "\n", "previous_bert", "=", "False", "\n", "previous_joint", "=", "False", "\n", "\n", "for", "curr_result", "in", "results_and_model_types", ":", "\n", "\n", "        ", "curr_col_ner_mention_f1", "=", "'default'", "\n", "curr_col_ner_soft_f1", "=", "'default'", "\n", "curr_col_ner_hard_f1", "=", "'default'", "\n", "curr_col_rel_mention_f1", "=", "'default'", "\n", "curr_col_rel_soft_f1", "=", "'default'", "\n", "curr_col_rel_hard_f1", "=", "'default'", "\n", "curr_col_coref_muc_f1", "=", "'default'", "\n", "curr_col_coref_ceaf_f1", "=", "'default'", "\n", "curr_col_coref_bcuded_f1", "=", "'default'", "\n", "curr_col_coref_avg_f1", "=", "'default'", "\n", "\n", "nr_runs", "=", "dict", "(", ")", "\n", "experiment_id", "=", "dict", "(", ")", "\n", "experiment_config", "=", "dict", "(", ")", "\n", "\n", "best_res_ner_mention_f1", "=", "0.0", "\n", "best_res_ner_soft_f1", "=", "0.0", "\n", "best_res_ner_hard_f1", "=", "0.0", "\n", "best_res_rel_mention_f1", "=", "0.0", "\n", "best_res_rel_soft_f1", "=", "0.0", "\n", "best_res_rel_hard_f1", "=", "0.0", "\n", "best_res_coref_muc_f1", "=", "0.0", "\n", "best_res_coref_bcubed_f1", "=", "0.0", "\n", "best_res_coref_ceafe_f1", "=", "0.0", "\n", "best_res_coref_avg_f1", "=", "0.0", "\n", "\n", "if", "curr_result", "[", "'type'", "]", "==", "'single'", ":", "\n", "            ", "if", "'results_ner'", "in", "curr_result", ":", "\n", "                ", "res_ner", "=", "curr_result", "[", "'results_ner'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "\n", "experiment_config", "[", "'ner'", "]", "=", "curr_result", "[", "'results_ner'", "]", "[", "'experiment_config'", "]", "\n", "nr_runs", "[", "'ner'", "]", "=", "curr_result", "[", "'results_ner'", "]", "[", "'experiment_results'", "]", "[", "'nr_runs'", "]", "\n", "experiment_id", "[", "'ner'", "]", "=", "curr_result", "[", "'results_ner'", "]", "[", "'experiment_id'", "]", "\n", "", "else", ":", "\n", "                ", "res_ner", "=", "None", "\n", "", "if", "'results_coref'", "in", "curr_result", ":", "\n", "                ", "res_coref", "=", "curr_result", "[", "'results_coref'", "]", "[", "'experiment_results'", "]", "[", "'coref'", "]", "\n", "experiment_config", "[", "'coref'", "]", "=", "curr_result", "[", "'results_coref'", "]", "[", "'experiment_config'", "]", "\n", "nr_runs", "[", "'coref'", "]", "=", "curr_result", "[", "'results_coref'", "]", "[", "'experiment_results'", "]", "[", "'nr_runs'", "]", "\n", "experiment_id", "[", "'coref'", "]", "=", "curr_result", "[", "'results_coref'", "]", "[", "'experiment_id'", "]", "\n", "", "else", ":", "\n", "                ", "res_coref", "=", "None", "\n", "\n", "", "if", "'results_rel'", "in", "curr_result", ":", "\n", "                ", "res_relations", "=", "curr_result", "[", "'results_rel'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "\n", "experiment_config", "[", "'rels'", "]", "=", "curr_result", "[", "'results_rel'", "]", "[", "'experiment_config'", "]", "\n", "nr_runs", "[", "'rels'", "]", "=", "curr_result", "[", "'results_rel'", "]", "[", "'experiment_results'", "]", "[", "'nr_runs'", "]", "\n", "experiment_id", "[", "'rels'", "]", "=", "curr_result", "[", "'results_rel'", "]", "[", "'experiment_id'", "]", "\n", "", "else", ":", "\n", "                ", "res_relations", "=", "None", "\n", "\n", "", "", "else", ":", "\n", "            ", "res_ner", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "\n", "res_coref", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'coref'", "]", "\n", "res_relations", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "\n", "experiment_config", "[", "'joint'", "]", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_config'", "]", "\n", "nr_runs", "[", "'joint'", "]", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'nr_runs'", "]", "\n", "experiment_id", "[", "'joint'", "]", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_id'", "]", "\n", "\n", "", "any_exp_config", "=", "get_any_experiment_config", "(", "experiment_config", ")", "\n", "is_it_bert", "=", "is_bert", "(", "any_exp_config", ")", "\n", "\n", "is_joint", "=", "False", "\n", "if", "curr_result", "[", "'type'", "]", "==", "'joint'", ":", "\n", "            ", "is_joint", "=", "True", "\n", "", "if", "not", "is_joint", ":", "\n", "            ", "best_res_coref_avg_f1", "=", "best_single_coref_avg_f1", "\n", "best_res_ner_mention_f1", "=", "best_single_ner_mention_f1", "\n", "best_res_ner_soft_f1", "=", "best_single_ner_soft_f1", "\n", "best_res_ner_hard_f1", "=", "best_single_ner_hard_f1", "\n", "best_res_rel_mention_f1", "=", "best_single_rel_mention_f1", "\n", "best_res_rel_soft_f1", "=", "best_single_rel_soft_f1", "\n", "best_res_rel_hard_f1", "=", "best_single_rel_hard_f1", "\n", "best_res_coref_muc_f1", "=", "best_single_coref_muc_f1", "\n", "best_res_coref_bcubed_f1", "=", "best_single_coref_bcubed_f1", "\n", "best_res_coref_ceafe_f1", "=", "best_single_coref_ceafe_f1", "\n", "", "else", ":", "\n", "            ", "if", "is_it_bert", ":", "\n", "                ", "best_res_coref_avg_f1", "=", "best_joint_bert_coref_avg_f1", "\n", "best_res_ner_mention_f1", "=", "best_joint_bert_ner_mention_f1", "\n", "best_res_ner_soft_f1", "=", "best_joint_bert_ner_soft_f1", "\n", "best_res_ner_hard_f1", "=", "best_joint_bert_ner_hard_f1", "\n", "best_res_rel_mention_f1", "=", "best_joint_bert_rel_mention_f1", "\n", "best_res_rel_soft_f1", "=", "best_joint_bert_rel_soft_f1", "\n", "best_res_rel_hard_f1", "=", "best_joint_bert_rel_hard_f1", "\n", "best_res_coref_muc_f1", "=", "best_joint_bert_coref_muc_f1", "\n", "best_res_coref_bcubed_f1", "=", "best_joint_bert_coref_bcubed_f1", "\n", "best_res_coref_ceafe_f1", "=", "best_joint_bert_coref_ceafe_f1", "\n", "", "else", ":", "\n", "                ", "best_res_coref_avg_f1", "=", "best_joint_coref_avg_f1", "\n", "best_res_ner_mention_f1", "=", "best_joint_ner_mention_f1", "\n", "best_res_ner_soft_f1", "=", "best_joint_ner_soft_f1", "\n", "best_res_ner_hard_f1", "=", "best_joint_ner_hard_f1", "\n", "best_res_rel_mention_f1", "=", "best_joint_rel_mention_f1", "\n", "best_res_rel_soft_f1", "=", "best_joint_rel_soft_f1", "\n", "best_res_rel_hard_f1", "=", "best_joint_rel_hard_f1", "\n", "best_res_coref_muc_f1", "=", "best_joint_coref_muc_f1", "\n", "best_res_coref_bcubed_f1", "=", "best_joint_coref_bcubed_f1", "\n", "best_res_coref_ceafe_f1", "=", "best_joint_coref_ceafe_f1", "\n", "\n", "", "", "if", "is_joint", "and", "not", "previous_joint", ":", "\n", "            ", "previous_joint", "=", "is_joint", "\n", "# latex_content += '\\t \\\\cmidrule{2-11}\\n'", "\n", "latex_content", "+=", "'\\t \\\\midrule\\n'", "\n", "\n", "", "if", "is_it_bert", "and", "not", "previous_bert", ":", "\n", "            ", "previous_bert", "=", "is_it_bert", "\n", "# latex_content += '\\t \\\\cmidrule{2-11}\\n'", "\n", "latex_content", "+=", "'\\t \\\\midrule\\n'", "\n", "\n", "", "if", "res_coref", "is", "not", "None", ":", "\n", "            ", "avg_coref", "=", "(", "res_coref", "[", "'muc'", "]", "[", "'f1'", "]", "[", "0", "]", "+", "res_coref", "[", "'b_cubed_singleton_men_conll'", "]", "[", "'f1'", "]", "[", "0", "]", "+", "\n", "res_coref", "[", "'ceafe_singleton'", "]", "[", "'f1'", "]", "[", "0", "]", ")", "/", "3", "\n", "", "else", ":", "\n", "            ", "avg_coref", "=", "-", "1", "\n", "\n", "", "if", "res_ner", "is", "None", ":", "\n", "            ", "res_ner_mentions_f1", "=", "[", "-", "1", ",", "-", "1", "]", "\n", "res_ner_soft_f1", "=", "[", "-", "1", ",", "-", "1", "]", "\n", "res_ner_hard_f1", "=", "[", "-", "1", ",", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "res_ner_mentions_f1", "=", "res_ner", "[", "ner_mention_metric", "]", "[", "'f1'", "]", "\n", "res_ner_soft_f1", "=", "res_ner", "[", "'tags_soft'", "]", "[", "'f1'", "]", "\n", "res_ner_hard_f1", "=", "res_ner", "[", "'tags_hard'", "]", "[", "'f1'", "]", "\n", "\n", "", "if", "res_relations", "is", "None", ":", "\n", "            ", "res_rel_mentions_f1", "=", "[", "-", "1", ",", "-", "1", "]", "\n", "res_rel_soft_f1", "=", "[", "-", "1", ",", "-", "1", "]", "\n", "res_rel_hard_f1", "=", "[", "-", "1", ",", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "res_rel_mentions_f1", "=", "res_relations", "[", "rels_mention_metric", "]", "[", "'f1'", "]", "\n", "res_rel_soft_f1", "=", "res_relations", "[", "'rels_soft'", "]", "[", "'f1'", "]", "\n", "res_rel_hard_f1", "=", "res_relations", "[", "'rels_hard'", "]", "[", "'f1'", "]", "\n", "\n", "", "latex_content", "+=", "'\\t{} & {} & {} & {} & {} && {} & {} & {} && {} & {} & {} \\\\\\\\ \\n {} \\n '", ".", "format", "(", "curr_result", "[", "'setup'", "]", ",", "\n", "get_res_or_nothing", "(", "res_coref", "[", "'muc'", "]", "[", "'f1'", "]", "if", "res_coref", "is", "not", "None", "else", "[", "-", "1", ",", "-", "1", "]", ",", "\n", "res_coref", "is", "not", "None", ",", "\n", "best_res", "=", "best_res_coref_muc_f1", ",", "\n", "best_res_all", "=", "best_all_coref_muc_f1", ",", "\n", "color", "=", "curr_col_coref_muc_f1", ")", ",", "\n", "get_res_or_nothing", "(", "\n", "res_coref", "[", "'b_cubed_singleton_men_conll'", "]", "[", "'f1'", "]", "if", "res_coref", "is", "not", "None", "else", "[", "-", "1", ",", "-", "1", "]", ",", "\n", "res_coref", "is", "not", "None", ",", "\n", "best_res", "=", "best_res_coref_bcubed_f1", ",", "\n", "best_res_all", "=", "best_all_coref_bcubed_f1", ",", "\n", "color", "=", "curr_col_coref_bcuded_f1", ")", ",", "\n", "get_res_or_nothing", "(", "\n", "res_coref", "[", "'ceafe_singleton'", "]", "[", "'f1'", "]", "if", "res_coref", "is", "not", "None", "else", "[", "-", "1", ",", "-", "1", "]", ",", "\n", "res_coref", "is", "not", "None", ",", "\n", "best_res", "=", "best_res_coref_ceafe_f1", ",", "\n", "best_res_all", "=", "best_all_coref_ceafe_f1", ",", "\n", "color", "=", "curr_col_coref_ceaf_f1", ")", ",", "\n", "get_res_or_nothing", "(", "(", "avg_coref", ",", "0.0", ")", ",", "\n", "res_coref", "is", "not", "None", ",", "\n", "best_res", "=", "best_res_coref_avg_f1", ",", "\n", "best_res_all", "=", "best_all_coref_avg_f1", ",", "\n", "color", "=", "curr_col_coref_avg_f1", ")", ",", "\n", "\n", "get_res_or_nothing", "(", "\n", "res_ner_mentions_f1", ",", "\n", "res_ner", "is", "not", "None", ",", "\n", "best_res", "=", "best_res_ner_mention_f1", ",", "\n", "best_res_all", "=", "best_all_ner_mention_f1", ",", "\n", "color", "=", "curr_col_ner_mention_f1", ")", ",", "\n", "get_res_or_nothing", "(", "res_ner_hard_f1", ",", "\n", "res_ner", "is", "not", "None", ",", "\n", "best_res", "=", "best_res_ner_hard_f1", ",", "\n", "best_res_all", "=", "best_all_ner_hard_f1", ",", "\n", "color", "=", "curr_col_ner_hard_f1", ")", "if", "is_joint", "else", "'-'", ",", "\n", "get_res_or_nothing", "(", "res_ner_soft_f1", ",", "\n", "res_ner", "is", "not", "None", ",", "\n", "best_res", "=", "best_res_ner_soft_f1", ",", "\n", "best_res_all", "=", "best_all_ner_soft_f1", ",", "\n", "color", "=", "curr_col_ner_soft_f1", ")", "if", "is_joint", "else", "'-'", ",", "\n", "get_res_or_nothing", "(", "\n", "res_rel_mentions_f1", ",", "\n", "res_relations", "is", "not", "None", ",", "\n", "best_res", "=", "best_res_rel_mention_f1", ",", "\n", "best_res_all", "=", "best_all_rel_mention_f1", ",", "\n", "color", "=", "curr_col_rel_mention_f1", ")", ",", "\n", "get_res_or_nothing", "(", "res_rel_hard_f1", ",", "\n", "res_relations", "is", "not", "None", ",", "\n", "best_res", "=", "best_res_rel_hard_f1", ",", "\n", "best_res_all", "=", "best_all_rel_hard_f1", ",", "\n", "color", "=", "curr_col_rel_hard_f1", ")", "if", "is_joint", "else", "'-'", ",", "\n", "get_res_or_nothing", "(", "res_rel_soft_f1", ",", "\n", "res_relations", "is", "not", "None", ",", "\n", "best_res", "=", "best_res_rel_soft_f1", ",", "\n", "best_res_all", "=", "best_all_rel_soft_f1", ",", "\n", "color", "=", "curr_col_rel_soft_f1", ")", "if", "is_joint", "else", "'-'", ",", "\n", "print_comment_config_multiple", "(", "experiment_config", ",", "\n", "experiment_id", ",", "\n", "nr_runs", ")", "\n", ")", "\n", "\n", "", "latex_content", "+=", "'\\t\\\\bottomrule \\n'", "\n", "latex_content", "+=", "'\\t\\\\end{tabular}\\n'", "\n", "# latex_content += '\\t}\\n'", "\n", "latex_content", "+=", "'\\\\end{table}'", "\n", "print", "(", "'latex final results table: '", ")", "\n", "print", "(", "latex_content", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.print_latex_table_coreflinker_nill": [[1130, 1225], ["sorted", "print", "print", "max", "max", "max", "max", "max", "max", "print_tables_latex.get_res", "print_tables_latex.get_res", "print_tables_latex.get_res", "print_tables_latex.get_res", "print_tables_latex.get_res", "print_tables_latex.get_res"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res"], ["", "def", "print_latex_table_coreflinker_nill", "(", "results_and_model_info", ":", "List", ",", "is_ner_expanded", "=", "False", ",", "is_rels_expanded", "=", "False", ")", ":", "\n", "# to address one of the comments of the reviewer of also reporting the scores of NIL, do a separate function to not", "\n", "# mess up with the original print_latex_table_coreflinker , will use this function to ONLY report nills", "\n", "# the important thing/challenge here (for dwie) is to report the nill only for mentions that are \"linkable\" like", "\n", "# people names, but not for other mentions that we just don't link like the roles (ex: \"President\"); but this is", "\n", "# probably something that will have to be addressed in cpn_eval.py .", "\n", "\n", "    ", "best_link_nill_mention_re", "=", "0.0", "\n", "best_link_nill_mention_pr", "=", "0.0", "\n", "best_link_nill_mention_f1", "=", "0.0", "\n", "\n", "best_link_nill_hard_re", "=", "0.0", "\n", "best_link_nill_hard_pr", "=", "0.0", "\n", "best_link_nill_hard_f1", "=", "0.0", "\n", "\n", "results_and_model_info", "=", "sorted", "(", "results_and_model_info", ",", "key", "=", "lambda", "x", ":", "x", "[", "'sort_order'", "]", ")", "\n", "# latex_content = '\\\\begin{table}[!ht]\\n'", "\n", "latex_content", "=", "'\\\\begin{table*}\\n'", "\n", "latex_content", "+=", "'\\\\centering\\n'", "\n", "latex_content", "+=", "'\\\\resizebox{1.0\\\\textwidth}{!}{\\\\begin{tabular}{c ccc c ccc c ccc c c}\\n'", "\n", "latex_content", "+=", "'\\\\toprule\\n'", "\n", "latex_content", "+=", "'& \\\\multicolumn{3}{c}{Linking Mention} && \\\\multicolumn{3}{c}{Linking Soft} && '", "'\\\\multicolumn{3}{c}{Linking Hard} && \\\\multicolumn{1}{c}{Coref} \\\\\\\\ \\n'", "\n", "latex_content", "+=", "'\\\\cmidrule(lr){2-4}\\\\cmidrule(lr){6-8}\\\\cmidrule(lr){10-12}\\\\cmidrule(lr){14-14} \\n'", "\n", "latex_content", "+=", "'\\\\cmidrule(lr){2-4}\\\\cmidrule(lr){6-8}\\\\cmidrule(lr){10-12}\\\\cmidrule(lr){14-14} \\n'", "\n", "latex_content", "+=", "'Setup & \\\\multicolumn{1}{c}{\\\\textbf{Pr}} & \\\\multicolumn{1}{c}{\\\\textbf{Re}} & '", "'\\\\multicolumn{1}{c}{$\\\\mathbf{F_1}$} && \\\\multicolumn{1}{c}{\\\\textbf{Pr} } & '", "'\\\\multicolumn{1}{c}{\\\\textbf{Re}} & \\\\multicolumn{1}{c}{$\\\\mathbf{F_1}$} && '", "'\\\\multicolumn{1}{c}{\\\\textbf{Pr} } & \\\\multicolumn{1}{c}{\\\\textbf{Re}} & '", "'\\\\multicolumn{1}{c}{$\\\\mathbf{F_1}$} && '", "\n", "latex_content", "+=", "'\\\\multicolumn{1}{c}{\\\\textbf{Avg. }$\\\\mathbf{F_1}$} \\\\\\\\ \\n'", "\n", "latex_content", "+=", "'\\\\toprule \\n'", "\n", "\n", "previous_bert", "=", "False", "\n", "previous_joint", "=", "False", "\n", "\n", "# this for pass is needed to detect the maximum values", "\n", "for", "curr_result", "in", "results_and_model_info", ":", "\n", "        ", "best_link_nill_mention_pr", "=", "max", "(", "curr_result", "[", "'results'", "]", "[", "'links'", "]", "[", "'links-nill-from-ent'", "]", "[", "'pr'", "]", "[", "0", "]", ",", "\n", "best_link_nill_mention_pr", ")", "\n", "best_link_nill_mention_re", "=", "max", "(", "curr_result", "[", "'results'", "]", "[", "'links'", "]", "[", "'links-nill-from-ent'", "]", "[", "'re'", "]", "[", "0", "]", ",", "\n", "best_link_nill_mention_re", ")", "\n", "best_link_nill_mention_f1", "=", "max", "(", "curr_result", "[", "'results'", "]", "[", "'links'", "]", "[", "'links-nill-from-ent'", "]", "[", "'f1'", "]", "[", "0", "]", ",", "\n", "best_link_nill_mention_f1", ")", "\n", "\n", "# best_link_soft_pr = max(curr_result['results']['links']['links-links-soft']['pr'][0], best_link_soft_pr)", "\n", "# best_link_soft_re = max(curr_result['results']['links']['links-links-soft']['re'][0], best_link_soft_re)", "\n", "# best_link_soft_f1 = max(curr_result['results']['links']['links-links-soft']['f1'][0], best_link_soft_f1)", "\n", "\n", "best_link_nill_hard_pr", "=", "max", "(", "curr_result", "[", "'results'", "]", "[", "'links'", "]", "[", "'links-nill-hard'", "]", "[", "'pr'", "]", "[", "0", "]", ",", "\n", "best_link_nill_hard_pr", ")", "\n", "best_link_nill_hard_re", "=", "max", "(", "curr_result", "[", "'results'", "]", "[", "'links'", "]", "[", "'links-nill-hard'", "]", "[", "'re'", "]", "[", "0", "]", ",", "\n", "best_link_nill_hard_re", ")", "\n", "best_link_nill_hard_f1", "=", "max", "(", "curr_result", "[", "'results'", "]", "[", "'links'", "]", "[", "'links-nill-hard'", "]", "[", "'f1'", "]", "[", "0", "]", ",", "\n", "best_link_nill_hard_f1", ")", "\n", "\n", "# best_coref_f1 = max(curr_result['results']['coref']['coref_avg']['f1'][0], best_coref_f1)", "\n", "\n", "", "for", "curr_result", "in", "results_and_model_info", ":", "\n", "        ", "latex_content", "+=", "'\\t{} & {} & '", "'{} & '", "'{} && '", "'{} & '", "'{} & '", "'{} &&'", "'{} & '", "'{} & '", "'{} && '", "'{}  \\\\\\\\ \\n % {} \\n '", ".", "format", "(", "curr_result", "[", "'alias'", "]", ",", "\n", "get_res", "(", "curr_result", "[", "'results'", "]", "[", "'links'", "]", "[", "'links-nill-from-ent'", "]", "[", "'pr'", "]", ",", "best_link_nill_mention_pr", ")", ",", "\n", "get_res", "(", "curr_result", "[", "'results'", "]", "[", "'links'", "]", "[", "'links-nill-from-ent'", "]", "[", "'re'", "]", ",", "best_link_nill_mention_re", ")", ",", "\n", "get_res", "(", "curr_result", "[", "'results'", "]", "[", "'links'", "]", "[", "'links-nill-from-ent'", "]", "[", "'f1'", "]", ",", "best_link_nill_mention_f1", ")", ",", "\n", "\n", "# no softs", "\n", "'-'", ",", "\n", "'-'", ",", "\n", "'-'", ",", "\n", "\n", "get_res", "(", "curr_result", "[", "'results'", "]", "[", "'links'", "]", "[", "'links-nill-hard'", "]", "[", "'pr'", "]", ",", "best_link_nill_hard_pr", ")", ",", "\n", "get_res", "(", "curr_result", "[", "'results'", "]", "[", "'links'", "]", "[", "'links-nill-hard'", "]", "[", "'re'", "]", ",", "best_link_nill_hard_re", ")", ",", "\n", "get_res", "(", "curr_result", "[", "'results'", "]", "[", "'links'", "]", "[", "'links-nill-hard'", "]", "[", "'f1'", "]", ",", "best_link_nill_hard_f1", ")", ",", "\n", "\n", "# no coref", "\n", "'-'", ",", "\n", "curr_result", "[", "'experiment_id'", "]", "\n", ")", "\n", "\n", "", "latex_content", "+=", "'\\t\\\\bottomrule \\n'", "\n", "latex_content", "+=", "'\\t\\\\end{tabular}}\\n'", "\n", "latex_content", "+=", "'\\t\\\\caption{Results on NIL mentions.}\\n'", "\n", "latex_content", "+=", "'\\t\\\\label{tab:overview_results}\\n'", "\n", "latex_content", "+=", "'\\\\end{table*}'", "\n", "print", "(", "'latex final results table: '", ")", "\n", "print", "(", "latex_content", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.print_latex_table_coreflinker": [[1227, 1324], ["sorted", "print", "print", "max", "max", "max", "max", "max", "max", "max", "max", "max", "max", "print_tables_latex.get_res", "print_tables_latex.get_res", "print_tables_latex.get_res", "print_tables_latex.get_res", "print_tables_latex.get_res", "print_tables_latex.get_res", "print_tables_latex.get_res", "print_tables_latex.get_res", "print_tables_latex.get_res", "print_tables_latex.get_res"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res"], ["", "def", "print_latex_table_coreflinker", "(", "results_and_model_info", ":", "List", ",", "is_ner_expanded", "=", "False", ",", "is_rels_expanded", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n\n    :param results_and_model_info:\n    :param only_f1:\n    :param metric_types:\n\n    \"\"\"", "\n", "# rels_mention_metric = 'rels_mention' if not is_rels_expanded else 'rels_mention_expanded'", "\n", "# ner_mention_metric = 'tags_mention' if not is_ner_expanded else 'tags_mention_expanded'", "\n", "\n", "best_link_mention_re", "=", "0.0", "\n", "best_link_mention_pr", "=", "0.0", "\n", "best_link_mention_f1", "=", "0.0", "\n", "best_link_soft_re", "=", "0.0", "\n", "best_link_soft_pr", "=", "0.0", "\n", "best_link_soft_f1", "=", "0.0", "\n", "best_link_hard_re", "=", "0.0", "\n", "best_link_hard_pr", "=", "0.0", "\n", "best_link_hard_f1", "=", "0.0", "\n", "best_coref_f1", "=", "0.0", "\n", "\n", "results_and_model_info", "=", "sorted", "(", "results_and_model_info", ",", "key", "=", "lambda", "x", ":", "x", "[", "'sort_order'", "]", ")", "\n", "# latex_content = '\\\\begin{table}[!ht]\\n'", "\n", "latex_content", "=", "'\\\\begin{table*}\\n'", "\n", "latex_content", "+=", "'\\\\centering\\n'", "\n", "latex_content", "+=", "'\\\\resizebox{1.0\\\\textwidth}{!}{\\\\begin{tabular}{c ccc c ccc c ccc c c}\\n'", "\n", "latex_content", "+=", "'\\\\toprule\\n'", "\n", "latex_content", "+=", "'& \\\\multicolumn{3}{c}{Linking Mention} && \\\\multicolumn{3}{c}{Linking Soft} && '", "'\\\\multicolumn{3}{c}{Linking Hard} && \\\\multicolumn{1}{c}{Coref} \\\\\\\\ \\n'", "\n", "latex_content", "+=", "'\\\\cmidrule(lr){2-4}\\\\cmidrule(lr){6-8}\\\\cmidrule(lr){10-12}\\\\cmidrule(lr){14-14} \\n'", "\n", "latex_content", "+=", "'\\\\cmidrule(lr){2-4}\\\\cmidrule(lr){6-8}\\\\cmidrule(lr){10-12}\\\\cmidrule(lr){14-14} \\n'", "\n", "latex_content", "+=", "'Setup & \\\\multicolumn{1}{c}{\\\\textbf{Pr}} & \\\\multicolumn{1}{c}{\\\\textbf{Re}} & '", "'\\\\multicolumn{1}{c}{$\\\\mathbf{F_1}$} && \\\\multicolumn{1}{c}{\\\\textbf{Pr} } & '", "'\\\\multicolumn{1}{c}{\\\\textbf{Re}} & \\\\multicolumn{1}{c}{$\\\\mathbf{F_1}$} && '", "'\\\\multicolumn{1}{c}{\\\\textbf{Pr} } & \\\\multicolumn{1}{c}{\\\\textbf{Re}} & '", "'\\\\multicolumn{1}{c}{$\\\\mathbf{F_1}$} && '", "\n", "latex_content", "+=", "'\\\\multicolumn{1}{c}{\\\\textbf{Avg. }$\\\\mathbf{F_1}$} \\\\\\\\ \\n'", "\n", "latex_content", "+=", "'\\\\toprule \\n'", "\n", "\n", "previous_bert", "=", "False", "\n", "previous_joint", "=", "False", "\n", "\n", "# this for pass is needed to detect the maximum values", "\n", "for", "curr_result", "in", "results_and_model_info", ":", "\n", "        ", "best_link_mention_pr", "=", "max", "(", "curr_result", "[", "'results'", "]", "[", "'links'", "]", "[", "'links-links-from-ent'", "]", "[", "'pr'", "]", "[", "0", "]", ",", "\n", "best_link_mention_pr", ")", "\n", "best_link_mention_re", "=", "max", "(", "curr_result", "[", "'results'", "]", "[", "'links'", "]", "[", "'links-links-from-ent'", "]", "[", "'re'", "]", "[", "0", "]", ",", "\n", "best_link_mention_re", ")", "\n", "best_link_mention_f1", "=", "max", "(", "curr_result", "[", "'results'", "]", "[", "'links'", "]", "[", "'links-links-from-ent'", "]", "[", "'f1'", "]", "[", "0", "]", ",", "\n", "best_link_mention_f1", ")", "\n", "\n", "best_link_soft_pr", "=", "max", "(", "curr_result", "[", "'results'", "]", "[", "'links'", "]", "[", "'links-links-soft'", "]", "[", "'pr'", "]", "[", "0", "]", ",", "best_link_soft_pr", ")", "\n", "best_link_soft_re", "=", "max", "(", "curr_result", "[", "'results'", "]", "[", "'links'", "]", "[", "'links-links-soft'", "]", "[", "'re'", "]", "[", "0", "]", ",", "best_link_soft_re", ")", "\n", "best_link_soft_f1", "=", "max", "(", "curr_result", "[", "'results'", "]", "[", "'links'", "]", "[", "'links-links-soft'", "]", "[", "'f1'", "]", "[", "0", "]", ",", "best_link_soft_f1", ")", "\n", "\n", "best_link_hard_pr", "=", "max", "(", "curr_result", "[", "'results'", "]", "[", "'links'", "]", "[", "'links-links-hard'", "]", "[", "'pr'", "]", "[", "0", "]", ",", "best_link_hard_pr", ")", "\n", "best_link_hard_re", "=", "max", "(", "curr_result", "[", "'results'", "]", "[", "'links'", "]", "[", "'links-links-hard'", "]", "[", "'re'", "]", "[", "0", "]", ",", "best_link_hard_re", ")", "\n", "best_link_hard_f1", "=", "max", "(", "curr_result", "[", "'results'", "]", "[", "'links'", "]", "[", "'links-links-hard'", "]", "[", "'f1'", "]", "[", "0", "]", ",", "best_link_hard_f1", ")", "\n", "\n", "best_coref_f1", "=", "max", "(", "curr_result", "[", "'results'", "]", "[", "'coref'", "]", "[", "'coref_avg'", "]", "[", "'f1'", "]", "[", "0", "]", ",", "best_coref_f1", ")", "\n", "\n", "", "for", "curr_result", "in", "results_and_model_info", ":", "\n", "        ", "latex_content", "+=", "'\\t{} & {} & '", "'{} & '", "'{} && '", "'{} & '", "'{} & '", "'{} &&'", "'{} & '", "'{} & '", "'{} && '", "'{}  \\\\\\\\ \\n % {} \\n '", ".", "format", "(", "curr_result", "[", "'alias'", "]", ",", "\n", "get_res", "(", "curr_result", "[", "'results'", "]", "[", "'links'", "]", "[", "'links-links-from-ent'", "]", "[", "'pr'", "]", ",", "best_link_mention_pr", ")", ",", "\n", "get_res", "(", "curr_result", "[", "'results'", "]", "[", "'links'", "]", "[", "'links-links-from-ent'", "]", "[", "'re'", "]", ",", "best_link_mention_re", ")", ",", "\n", "get_res", "(", "curr_result", "[", "'results'", "]", "[", "'links'", "]", "[", "'links-links-from-ent'", "]", "[", "'f1'", "]", ",", "best_link_mention_f1", ")", ",", "\n", "\n", "get_res", "(", "curr_result", "[", "'results'", "]", "[", "'links'", "]", "[", "'links-links-soft'", "]", "[", "'pr'", "]", ",", "best_link_soft_pr", ")", ",", "\n", "get_res", "(", "curr_result", "[", "'results'", "]", "[", "'links'", "]", "[", "'links-links-soft'", "]", "[", "'re'", "]", ",", "best_link_soft_re", ")", ",", "\n", "get_res", "(", "curr_result", "[", "'results'", "]", "[", "'links'", "]", "[", "'links-links-soft'", "]", "[", "'f1'", "]", ",", "best_link_soft_f1", ")", ",", "\n", "\n", "get_res", "(", "curr_result", "[", "'results'", "]", "[", "'links'", "]", "[", "'links-links-hard'", "]", "[", "'pr'", "]", ",", "best_link_hard_pr", ")", ",", "\n", "get_res", "(", "curr_result", "[", "'results'", "]", "[", "'links'", "]", "[", "'links-links-hard'", "]", "[", "'re'", "]", ",", "best_link_hard_re", ")", ",", "\n", "get_res", "(", "curr_result", "[", "'results'", "]", "[", "'links'", "]", "[", "'links-links-hard'", "]", "[", "'f1'", "]", ",", "best_link_hard_f1", ")", ",", "\n", "\n", "get_res", "(", "curr_result", "[", "'results'", "]", "[", "'coref'", "]", "[", "'coref_avg'", "]", "[", "'f1'", "]", ",", "best_coref_f1", ")", ",", "\n", "curr_result", "[", "'experiment_id'", "]", "\n", ")", "\n", "\n", "", "latex_content", "+=", "'\\t\\\\bottomrule \\n'", "\n", "latex_content", "+=", "'\\t\\\\end{tabular}}\\n'", "\n", "latex_content", "+=", "'\\t\\\\caption{Main results of the experiments using Baseline, CorefLinker, etc on DWIE.}\\n'", "\n", "latex_content", "+=", "'\\t\\\\label{tab:overview_results}\\n'", "\n", "latex_content", "+=", "'\\\\end{table*}'", "\n", "print", "(", "'latex final results table: '", ")", "\n", "print", "(", "latex_content", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.print_latex_table_ner_prop": [[1326, 1413], ["print", "print", "print", "print_tables_latex.get_res_or_nothing", "print_tables_latex.get_res_or_nothing", "print_tables_latex.get_res_or_nothing"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res_or_nothing", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res_or_nothing", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res_or_nothing"], ["", "def", "print_latex_table_ner_prop", "(", "results_and_model_types", ":", "List", ",", "only_f1", "=", "True", ",", "metric_types", "=", "[", "'mention'", ",", "'soft'", ",", "'hard'", "]", ")", ":", "\n", "    ", "\"\"\"\n\n    :param results_and_model_types:\n    :param only_f1:\n    :param metric_types:\n    :return:\n\n    \"\"\"", "\n", "best_ner_mention_pr", "=", "0.0", "\n", "best_ner_mention_re", "=", "0.0", "\n", "best_ner_mention_f1", "=", "0.0", "\n", "best_ner_soft_pr", "=", "0.0", "\n", "best_ner_soft_re", "=", "0.0", "\n", "best_ner_soft_f1", "=", "0.0", "\n", "best_ner_hard_pr", "=", "0.0", "\n", "best_ner_hard_re", "=", "0.0", "\n", "best_ner_hard_f1", "=", "0.0", "\n", "for", "curr_result", "in", "results_and_model_types", ":", "\n", "# print('curr_result: ', curr_result)", "\n", "        ", "if", "curr_result", "[", "'results'", "]", "is", "None", ":", "\n", "            ", "continue", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'pr'", "]", "[", "0", "]", ">", "best_ner_mention_pr", ":", "\n", "            ", "best_ner_mention_pr", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'pr'", "]", "[", "0", "]", "\n", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'re'", "]", "[", "0", "]", ">", "best_ner_mention_re", ":", "\n", "            ", "best_ner_mention_re", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'re'", "]", "[", "0", "]", "\n", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'f1'", "]", "[", "0", "]", ">", "best_ner_mention_f1", ":", "\n", "            ", "best_ner_mention_f1", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "\n", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'pr'", "]", "[", "0", "]", ">", "best_ner_soft_pr", ":", "\n", "            ", "best_ner_soft_pr", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'pr'", "]", "[", "0", "]", "\n", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'re'", "]", "[", "0", "]", ">", "best_ner_soft_re", ":", "\n", "            ", "best_ner_soft_re", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'re'", "]", "[", "0", "]", "\n", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'f1'", "]", "[", "0", "]", ">", "best_ner_soft_f1", ":", "\n", "            ", "best_ner_soft_f1", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "\n", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'pr'", "]", "[", "0", "]", ">", "best_ner_hard_pr", ":", "\n", "            ", "best_ner_hard_pr", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'pr'", "]", "[", "0", "]", "\n", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'re'", "]", "[", "0", "]", ">", "best_ner_hard_re", ":", "\n", "            ", "best_ner_hard_re", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'re'", "]", "[", "0", "]", "\n", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'f1'", "]", "[", "0", "]", ">", "best_ner_hard_f1", ":", "\n", "            ", "best_ner_hard_f1", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "\n", "\n", "", "", "latex_content", "=", "'\\\\begin{table}[!ht]\\n'", "\n", "latex_content", "+=", "'\\t\\\\centering\\n'", "\n", "latex_content", "+=", "'\\t\\\\setlength{\\\\tabcolsep}{4pt}\\n'", "\n", "latex_content", "+=", "'\\t\\\\begin{tabular}{l ccc }\\n'", "\n", "latex_content", "+=", "'\\t\\\\toprule\\n'", "\n", "latex_content", "+=", "'\\t\\\\multirow{2}{*}{\\\\textbf{Model Setup}} &   \\\\multicolumn{3}{c}{\\\\textbf{NER}}\\n'", "\n", "latex_content", "+=", "'\\t\\\\\\\\ \\n'", "\n", "latex_content", "+=", "'\\t\\\\cmidrule{2-4}\\n'", "\n", "latex_content", "+=", "'\\t& \\multicolumn{1}{c}{\\\\textbf{S-Pr}} & \\\\textbf{S-Re} '", "'& \\\\textbf{S-F$\\mathbf{_1}$} \\\\\\\\ \\n'", "\n", "latex_content", "+=", "'\\\\midrule \\n'", "\n", "for", "curr_result", "in", "results_and_model_types", ":", "\n", "        ", "if", "curr_result", "[", "'results'", "]", "is", "None", ":", "\n", "            ", "latex_content", "+=", "'\\t{} & ? & ? & ? \\\\\\\\ \\n'", ".", "format", "(", "curr_result", "[", "'setup'", "]", ")", "\n", "", "else", ":", "\n", "            ", "latex_content", "+=", "'\\t{} & {} & {} & {} \\\\\\\\ \\n'", ".", "format", "(", "curr_result", "[", "'setup'", "]", ",", "\n", "get_res_or_nothing", "(", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'pr'", "]", ",", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_config'", "]", "[", "'model'", "]", "[", "'ner'", "]", "[", "'enabled'", "]", ",", "\n", "best_res", "=", "best_ner_soft_pr", ")", ",", "\n", "get_res_or_nothing", "(", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'re'", "]", ",", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_config'", "]", "[", "'model'", "]", "[", "'ner'", "]", "[", "'enabled'", "]", ",", "\n", "best_res", "=", "best_ner_soft_re", ")", ",", "\n", "get_res_or_nothing", "(", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'f1'", "]", ",", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_config'", "]", "[", "'model'", "]", "[", "'ner'", "]", "[", "'enabled'", "]", ",", "\n", "best_res", "=", "best_ner_soft_f1", ")", ",", "\n", ")", "\n", "", "", "latex_content", "+=", "'\\\\bottomrule\\n'", "\n", "latex_content", "+=", "'\\\\end{tabular}\\n'", "\n", "latex_content", "+=", "'\\\\caption{Impact of CorefProp and RelProp on NER in our joint setup. The missing results '", "'(\\\\textit{?} marks) will be completed in the final version of the manuscript.}\\n'", "\n", "\n", "latex_content", "+=", "'\\\\label{tab:props_on_ner_results}'", "\n", "latex_content", "+=", "'\\\\end{table}'", "\n", "print", "(", "'================BEGIN TABLE NER PROP SOFT METRICS======================='", ")", "\n", "print", "(", "latex_content", ")", "\n", "print", "(", "'================END TABLE NER PROP SOFT METRICS======================='", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.print_latex_table_ner_rel_prop": [[1415, 1552], ["print", "print", "print", "print_tables_latex.is_bert", "print_tables_latex.is_bert", "print_tables_latex.get_res_or_nothing", "print_tables_latex.get_res_or_nothing", "print_tables_latex.get_res_or_nothing", "print_tables_latex.get_res_or_nothing", "print_tables_latex.get_res_or_nothing", "print_tables_latex.get_res_or_nothing", "print_tables_latex.print_comment_config"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.is_bert", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.is_bert", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res_or_nothing", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res_or_nothing", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res_or_nothing", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res_or_nothing", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res_or_nothing", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res_or_nothing", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.print_comment_config"], ["", "def", "print_latex_table_ner_rel_prop", "(", "results_and_model_types", ":", "List", ",", "only_f1", "=", "True", ",", "\n", "metric_types", "=", "[", "'mention'", ",", "'soft'", ",", "'hard'", "]", ")", ":", "\n", "    ", "\"\"\"\n\n    :param results_and_model_types:\n    :param only_f1:\n    :param metric_types:\n    :return:\n\n    \"\"\"", "\n", "best_ner_soft_pr", "=", "0.0", "\n", "best_ner_soft_re", "=", "0.0", "\n", "best_ner_soft_f1", "=", "0.0", "\n", "best_rel_soft_pr", "=", "0.0", "\n", "best_rel_soft_re", "=", "0.0", "\n", "best_rel_soft_f1", "=", "0.0", "\n", "\n", "best_bert_ner_soft_pr", "=", "0.0", "\n", "best_bert_ner_soft_re", "=", "0.0", "\n", "best_bert_ner_soft_f1", "=", "0.0", "\n", "best_bert_rel_soft_pr", "=", "0.0", "\n", "best_bert_rel_soft_re", "=", "0.0", "\n", "best_bert_rel_soft_f1", "=", "0.0", "\n", "\n", "for", "curr_result", "in", "results_and_model_types", ":", "\n", "# print('curr_result: ', curr_result)", "\n", "        ", "if", "curr_result", "[", "'results'", "]", "is", "None", ":", "\n", "            ", "continue", "\n", "\n", "", "if", "not", "is_bert", "(", "curr_result", "[", "'results'", "]", "[", "'experiment_config'", "]", ")", ":", "\n", "            ", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'pr'", "]", "[", "0", "]", ">", "best_ner_soft_pr", ":", "\n", "                ", "best_ner_soft_pr", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'pr'", "]", "[", "0", "]", "\n", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'re'", "]", "[", "0", "]", ">", "best_ner_soft_re", ":", "\n", "                ", "best_ner_soft_re", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'re'", "]", "[", "0", "]", "\n", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'f1'", "]", "[", "0", "]", ">", "best_ner_soft_f1", ":", "\n", "                ", "best_ner_soft_f1", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "\n", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'pr'", "]", "[", "0", "]", ">", "best_rel_soft_pr", ":", "\n", "                ", "best_rel_soft_pr", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'pr'", "]", "[", "0", "]", "\n", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'re'", "]", "[", "0", "]", ">", "best_rel_soft_re", ":", "\n", "                ", "best_rel_soft_re", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'re'", "]", "[", "0", "]", "\n", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'f1'", "]", "[", "0", "]", ">", "best_rel_soft_f1", ":", "\n", "                ", "best_rel_soft_f1", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "\n", "", "", "else", ":", "\n", "            ", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'pr'", "]", "[", "0", "]", ">", "best_bert_ner_soft_pr", ":", "\n", "                ", "best_bert_ner_soft_pr", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'pr'", "]", "[", "0", "]", "\n", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'re'", "]", "[", "0", "]", ">", "best_bert_ner_soft_re", ":", "\n", "                ", "best_bert_ner_soft_re", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'re'", "]", "[", "0", "]", "\n", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'f1'", "]", "[", "0", "]", ">", "best_bert_ner_soft_f1", ":", "\n", "                ", "best_bert_ner_soft_f1", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "\n", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'pr'", "]", "[", "0", "]", ">", "best_bert_rel_soft_pr", ":", "\n", "                ", "best_bert_rel_soft_pr", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'pr'", "]", "[", "0", "]", "\n", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'re'", "]", "[", "0", "]", ">", "best_bert_rel_soft_re", ":", "\n", "                ", "best_bert_rel_soft_re", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'re'", "]", "[", "0", "]", "\n", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'f1'", "]", "[", "0", "]", ">", "best_bert_rel_soft_f1", ":", "\n", "                ", "best_bert_rel_soft_f1", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "\n", "\n", "", "", "", "latex_content", "=", "'\\\\begin{table}[!ht] \\n'", "\n", "latex_content", "+=", "'\\t\\\\centering \\n'", "\n", "latex_content", "+=", "'\\t\\\\resizebox{0.9\\\\textwidth}{!}{ \\n'", "\n", "latex_content", "+=", "'\\t\\\\begin{tabular}{ l ccc c ccc } \\n'", "\n", "latex_content", "+=", "'\\t\\\\toprule \\n'", "\n", "latex_content", "+=", "'\\t\\\\hspace*{2cm} & \\n'", "\n", "latex_content", "+=", "'\\t\\\\multicolumn{3}{c}{\\\\textbf{NER}} & & \\n'", "\n", "latex_content", "+=", "'\\t\\\\multicolumn{3}{c}{\\\\textbf{Relations}} \\\\\\\\ \\n'", "\n", "latex_content", "+=", "'\\t\\\\cmidrule(lr){2-4} \\\\cmidrule(lr){6-8}  \\n'", "\n", "latex_content", "+=", "'\\t\\\\textbf{Model Setup} & \\n'", "\n", "latex_content", "+=", "'\\t\\\\makebox[3em]{\\\\textbf{S-Pr}} & \\n'", "\n", "latex_content", "+=", "'\\t\\\\makebox[3em]{\\\\textbf{S-Re}} & \\n'", "\n", "latex_content", "+=", "'\\t\\\\makebox[3em]{\\\\textbf{S-F$\\mathbf{_1}$}} & \\n'", "\n", "latex_content", "+=", "'\\t\\\\makebox[0.2em]{} & \\n'", "\n", "latex_content", "+=", "'\\t\\\\makebox[3em]{\\\\textbf{S-Pr}} & \\n'", "\n", "latex_content", "+=", "'\\t\\\\makebox[3em]{\\\\textbf{S-Re}} & \\n'", "\n", "latex_content", "+=", "'\\t\\\\makebox[3em]{\\\\textbf{S-F$\\mathbf{_1}$}} \\\\\\\\ \\n '", "\n", "latex_content", "+=", "'\\t\\\\midrule \\n'", "\n", "previous_bert", "=", "False", "\n", "for", "curr_result", "in", "results_and_model_types", ":", "\n", "\n", "        ", "if", "curr_result", "[", "'results'", "]", "is", "None", ":", "\n", "            ", "latex_content", "+=", "'\\t{} & '", "'\\\\leavevmode\\\\color{{red}}? & '", "'\\\\leavevmode\\\\color{{red}}? & '", "'\\\\leavevmode\\\\color{{red}}? & & '", "'\\\\leavevmode\\\\color{{red}}? & '", "'\\\\leavevmode\\\\color{{red}}? & '", "'\\\\leavevmode\\\\color{{red}}? \\\\\\\\ \\n'", ".", "format", "(", "curr_result", "[", "'setup'", "]", ")", "\n", "", "else", ":", "\n", "            ", "is_it_bert", "=", "is_bert", "(", "curr_result", "[", "'results'", "]", "[", "'experiment_config'", "]", ")", "\n", "\n", "if", "is_it_bert", "and", "not", "previous_bert", ":", "\n", "                ", "previous_bert", "=", "is_it_bert", "\n", "latex_content", "+=", "'\\t \\\\cmidrule{2-8}\\n'", "\n", "\n", "", "latex_content", "+=", "'\\t{} & {} & {} & {} & & {} & {} & {} \\\\\\\\ \\n % {} \\n'", ".", "format", "(", "curr_result", "[", "'setup'", "]", ",", "\n", "get_res_or_nothing", "(", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'pr'", "]", ",", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_config'", "]", "[", "'model'", "]", "[", "'ner'", "]", "[", "'enabled'", "]", ",", "\n", "best_res", "=", "(", "best_bert_ner_soft_pr", "if", "is_it_bert", "else", "best_ner_soft_pr", ")", ")", ",", "\n", "get_res_or_nothing", "(", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'re'", "]", ",", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_config'", "]", "[", "'model'", "]", "[", "'ner'", "]", "[", "'enabled'", "]", ",", "\n", "best_res", "=", "(", "best_bert_ner_soft_re", "if", "is_it_bert", "else", "best_ner_soft_re", ")", ")", ",", "\n", "get_res_or_nothing", "(", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'f1'", "]", ",", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_config'", "]", "[", "'model'", "]", "[", "'ner'", "]", "[", "'enabled'", "]", ",", "\n", "best_res", "=", "(", "best_bert_ner_soft_f1", "if", "is_it_bert", "else", "best_ner_soft_f1", ")", ")", ",", "\n", "get_res_or_nothing", "(", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'pr'", "]", ",", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_config'", "]", "[", "'model'", "]", "[", "'relations'", "]", "[", "'enabled'", "]", ",", "\n", "best_res", "=", "(", "best_bert_rel_soft_pr", "if", "is_it_bert", "else", "best_rel_soft_pr", ")", ")", ",", "\n", "get_res_or_nothing", "(", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'re'", "]", ",", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_config'", "]", "[", "'model'", "]", "[", "'relations'", "]", "[", "'enabled'", "]", ",", "\n", "best_res", "=", "(", "best_bert_rel_soft_re", "if", "is_it_bert", "else", "best_rel_soft_re", ")", ")", ",", "\n", "get_res_or_nothing", "(", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'f1'", "]", ",", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_config'", "]", "[", "'model'", "]", "[", "'relations'", "]", "[", "'enabled'", "]", ",", "\n", "best_res", "=", "(", "best_bert_rel_soft_f1", "if", "is_it_bert", "else", "best_rel_soft_f1", ")", ")", ",", "\n", "print_comment_config", "(", "curr_result", "[", "'results'", "]", "[", "'experiment_config'", "]", ",", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_id'", "]", ",", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'nr_runs'", "]", ")", "\n", ")", "\n", "", "", "latex_content", "+=", "'\\\\bottomrule\\n'", "\n", "latex_content", "+=", "'\\\\end{tabular}}\\n'", "\n", "latex_content", "+=", "'\\\\caption{Impact of CorefProp and RelProp on NER and relations in our joint setup. The missing results '", "'(\\\\textit{?} marks) will be completed in the final version of the manuscript.}\\n'", "\n", "\n", "latex_content", "+=", "'\\\\label{tab:props_on_ner_results}\\n'", "\n", "latex_content", "+=", "'\\\\end{table}'", "\n", "print", "(", "'===============BEGIN TABLE NER AND REL PROP SOFT METRICS======================'", ")", "\n", "print", "(", "latex_content", ")", "\n", "print", "(", "'================END TABLE NER AND REL PROP SOFT METRICS======================='", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.print_latex_table_ner_prop_all_metrics": [[1554, 1674], ["print", "print", "print", "print_tables_latex.get_res_or_nothing", "print_tables_latex.get_res_or_nothing", "print_tables_latex.get_res_or_nothing", "print_tables_latex.get_res_or_nothing", "print_tables_latex.get_res_or_nothing", "print_tables_latex.get_res_or_nothing", "print_tables_latex.get_res_or_nothing", "print_tables_latex.get_res_or_nothing", "print_tables_latex.get_res_or_nothing"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res_or_nothing", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res_or_nothing", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res_or_nothing", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res_or_nothing", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res_or_nothing", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res_or_nothing", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res_or_nothing", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res_or_nothing", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res_or_nothing"], ["", "def", "print_latex_table_ner_prop_all_metrics", "(", "results_and_model_types", ":", "List", ",", "only_f1", "=", "True", ",", "\n", "metric_types", "=", "[", "'mention'", ",", "'soft'", ",", "'hard'", "]", ")", ":", "\n", "    ", "\"\"\"\n\n    :param results_and_model_types:\n    :param only_f1:\n    :param metric_types:\n    :return:\n\n    \"\"\"", "\n", "# latex_content += '\\t\\\\cmidrule{2-5} \\cmidrule{6-8} \\cmidrule{9-11}\\n'", "\n", "\n", "best_ner_mention_pr", "=", "0.0", "\n", "best_ner_mention_re", "=", "0.0", "\n", "best_ner_mention_f1", "=", "0.0", "\n", "best_ner_soft_pr", "=", "0.0", "\n", "best_ner_soft_re", "=", "0.0", "\n", "best_ner_soft_f1", "=", "0.0", "\n", "best_ner_hard_pr", "=", "0.0", "\n", "best_ner_hard_re", "=", "0.0", "\n", "best_ner_hard_f1", "=", "0.0", "\n", "for", "curr_result", "in", "results_and_model_types", ":", "\n", "# print('curr_result: ', curr_result)", "\n", "        ", "if", "curr_result", "[", "'results'", "]", "is", "None", ":", "\n", "            ", "continue", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'pr'", "]", "[", "0", "]", ">", "best_ner_mention_pr", ":", "\n", "            ", "best_ner_mention_pr", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'pr'", "]", "[", "0", "]", "\n", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'re'", "]", "[", "0", "]", ">", "best_ner_mention_re", ":", "\n", "            ", "best_ner_mention_re", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'re'", "]", "[", "0", "]", "\n", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'f1'", "]", "[", "0", "]", ">", "best_ner_mention_f1", ":", "\n", "            ", "best_ner_mention_f1", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "\n", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'pr'", "]", "[", "0", "]", ">", "best_ner_soft_pr", ":", "\n", "            ", "best_ner_soft_pr", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'pr'", "]", "[", "0", "]", "\n", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'re'", "]", "[", "0", "]", ">", "best_ner_soft_re", ":", "\n", "            ", "best_ner_soft_re", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'re'", "]", "[", "0", "]", "\n", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'f1'", "]", "[", "0", "]", ">", "best_ner_soft_f1", ":", "\n", "            ", "best_ner_soft_f1", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "\n", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'pr'", "]", "[", "0", "]", ">", "best_ner_hard_pr", ":", "\n", "            ", "best_ner_hard_pr", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'pr'", "]", "[", "0", "]", "\n", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'re'", "]", "[", "0", "]", ">", "best_ner_hard_re", ":", "\n", "            ", "best_ner_hard_re", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'re'", "]", "[", "0", "]", "\n", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'f1'", "]", "[", "0", "]", ">", "best_ner_hard_f1", ":", "\n", "            ", "best_ner_hard_f1", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "\n", "\n", "", "", "latex_content", "=", "'\\\\begin{table}[!ht]\\n'", "\n", "latex_content", "+=", "'\\t\\\\centering\\n'", "\n", "latex_content", "+=", "'\\t\\\\setlength{\\\\tabcolsep}{4pt}\\n'", "\n", "latex_content", "+=", "'\\t\\\\begin{tabular}{l ccc ccc ccc}\\n'", "\n", "latex_content", "+=", "'\\t\\\\toprule\\n'", "\n", "latex_content", "+=", "'\\t\\\\multirow{2}{*}{\\\\textbf{Model Setup}} &   \\multicolumn{9}{c}{\\\\textbf{NER}}\\n'", "\n", "latex_content", "+=", "'\\t\\\\\\\\ \\n'", "\n", "latex_content", "+=", "'\\t\\\\cmidrule{2-4} \\cmidrule{5-7} \\cmidrule{8-10} \\n'", "\n", "latex_content", "+=", "'\\t& \\multicolumn{1}{c}{\\\\textbf{M-Pr}} & \\\\textbf{M-Re} '", "'& \\\\textbf{M-F$\\mathbf{_1}$} '", "\n", "latex_content", "+=", "'& \\multicolumn{1}{c}{\\\\textbf{S-Pr}} & \\\\textbf{S-Re} '", "'& \\\\textbf{S-F$\\mathbf{_1}$} '", "\n", "latex_content", "+=", "'& \\multicolumn{1}{c}{\\\\textbf{E-Pr}} & \\\\textbf{E-Re} '", "'& \\\\textbf{E-F$\\mathbf{_1}$} \\\\\\\\ \\n'", "\n", "latex_content", "+=", "'\\\\midrule \\n'", "\n", "for", "curr_result", "in", "results_and_model_types", ":", "\n", "        ", "if", "curr_result", "[", "'results'", "]", "is", "None", ":", "\n", "            ", "latex_content", "+=", "'\\t{} & ? & ? & ? & ? & ? & ? & ? & ? & ? \\\\\\\\ \\n'", ".", "format", "(", "curr_result", "[", "'setup'", "]", ")", "\n", "", "else", ":", "\n", "            ", "latex_content", "+=", "'\\t{} & {} & {} & {} & {} & {} & {} & {} & {} & {} \\\\\\\\ \\n'", ".", "format", "(", "curr_result", "[", "'setup'", "]", ",", "\n", "get_res_or_nothing", "(", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'pr'", "]", ",", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_config'", "]", "[", "'model'", "]", "[", "'ner'", "]", "[", "'enabled'", "]", ",", "\n", "best_res", "=", "best_ner_mention_pr", ")", ",", "\n", "get_res_or_nothing", "(", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'re'", "]", ",", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_config'", "]", "[", "'model'", "]", "[", "'ner'", "]", "[", "'enabled'", "]", ",", "\n", "best_res", "=", "best_ner_mention_re", ")", ",", "\n", "get_res_or_nothing", "(", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'f1'", "]", ",", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_config'", "]", "[", "'model'", "]", "[", "'ner'", "]", "[", "'enabled'", "]", ",", "\n", "best_res", "=", "best_ner_mention_f1", ")", ",", "\n", "get_res_or_nothing", "(", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'pr'", "]", ",", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_config'", "]", "[", "'model'", "]", "[", "'ner'", "]", "[", "'enabled'", "]", ",", "\n", "best_res", "=", "best_ner_soft_pr", ")", ",", "\n", "get_res_or_nothing", "(", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'re'", "]", ",", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_config'", "]", "[", "'model'", "]", "[", "'ner'", "]", "[", "'enabled'", "]", ",", "\n", "best_res", "=", "best_ner_soft_re", ")", ",", "\n", "get_res_or_nothing", "(", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'f1'", "]", ",", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_config'", "]", "[", "'model'", "]", "[", "'ner'", "]", "[", "'enabled'", "]", ",", "\n", "best_res", "=", "best_ner_soft_f1", ")", ",", "\n", "get_res_or_nothing", "(", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'pr'", "]", ",", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_config'", "]", "[", "'model'", "]", "[", "'ner'", "]", "[", "'enabled'", "]", ",", "\n", "best_res", "=", "best_ner_hard_pr", ")", ",", "\n", "get_res_or_nothing", "(", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'re'", "]", ",", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_config'", "]", "[", "'model'", "]", "[", "'ner'", "]", "[", "'enabled'", "]", ",", "\n", "best_res", "=", "best_ner_hard_re", ")", ",", "\n", "get_res_or_nothing", "(", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'f1'", "]", ",", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_config'", "]", "[", "'model'", "]", "[", "'ner'", "]", "[", "'enabled'", "]", ",", "\n", "best_res", "=", "best_ner_hard_f1", ")", ",", "\n", ")", "\n", "", "", "latex_content", "+=", "'\\\\end{tabular}\\n'", "\n", "latex_content", "+=", "'\\\\caption{Impact of CorefProp and RelProp on NER in our joint setup. The missing results '", "'(\\\\textit{?} marks) will be completed in the final version of the manuscript.}\\n'", "\n", "\n", "latex_content", "+=", "'\\\\label{tab:props_on_ner_results_all}'", "\n", "latex_content", "+=", "'\\\\end{table}'", "\n", "print", "(", "'================BEGIN TABLE NER PROP ALL METRICS======================='", ")", "\n", "print", "(", "latex_content", ")", "\n", "print", "(", "'================END TABLE NER PROP ALL METRICS======================='", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.print_latex_table_rel_prop": [[1676, 1767], ["print", "print", "print", "print_tables_latex.get_res_or_nothing", "print_tables_latex.get_res_or_nothing", "print_tables_latex.get_res_or_nothing"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res_or_nothing", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res_or_nothing", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res_or_nothing"], ["", "def", "print_latex_table_rel_prop", "(", "results_and_model_types", ":", "List", ",", "only_f1", "=", "True", ",", "metric_types", "=", "[", "'mention'", ",", "'soft'", ",", "'hard'", "]", ")", ":", "\n", "    ", "\"\"\"\n\n    :param results_and_model_types:\n    :param only_f1:\n    :param metric_types:\n    :return:\n\n    \"\"\"", "\n", "\n", "# marks the best results", "\n", "best_rel_mention_pr", "=", "0.0", "\n", "best_rel_mention_re", "=", "0.0", "\n", "best_rel_mention_f1", "=", "0.0", "\n", "best_rel_soft_pr", "=", "0.0", "\n", "best_rel_soft_re", "=", "0.0", "\n", "best_rel_soft_f1", "=", "0.0", "\n", "best_rel_hard_pr", "=", "0.0", "\n", "best_rel_hard_re", "=", "0.0", "\n", "best_rel_hard_f1", "=", "0.0", "\n", "for", "curr_result", "in", "results_and_model_types", ":", "\n", "# print('curr_result: ', curr_result)", "\n", "        ", "if", "curr_result", "[", "'results'", "]", "is", "None", ":", "\n", "            ", "continue", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'pr'", "]", "[", "0", "]", ">", "best_rel_mention_pr", ":", "\n", "            ", "best_rel_mention_pr", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'pr'", "]", "[", "0", "]", "\n", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'re'", "]", "[", "0", "]", ">", "best_rel_mention_re", ":", "\n", "            ", "best_rel_mention_re", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'re'", "]", "[", "0", "]", "\n", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'f1'", "]", "[", "0", "]", ">", "best_rel_mention_f1", ":", "\n", "            ", "best_rel_mention_f1", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "\n", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'pr'", "]", "[", "0", "]", ">", "best_rel_soft_pr", ":", "\n", "            ", "best_rel_soft_pr", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'pr'", "]", "[", "0", "]", "\n", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'re'", "]", "[", "0", "]", ">", "best_rel_soft_re", ":", "\n", "            ", "best_rel_soft_re", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'re'", "]", "[", "0", "]", "\n", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'f1'", "]", "[", "0", "]", ">", "best_rel_soft_f1", ":", "\n", "            ", "best_rel_soft_f1", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "\n", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'pr'", "]", "[", "0", "]", ">", "best_rel_hard_pr", ":", "\n", "            ", "best_rel_hard_pr", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'pr'", "]", "[", "0", "]", "\n", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'re'", "]", "[", "0", "]", ">", "best_rel_hard_re", ":", "\n", "            ", "best_rel_hard_re", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'re'", "]", "[", "0", "]", "\n", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'f1'", "]", "[", "0", "]", ">", "best_rel_hard_f1", ":", "\n", "            ", "best_rel_hard_f1", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "\n", "\n", "", "", "latex_content", "=", "'\\\\begin{table}[!ht]\\n'", "\n", "latex_content", "+=", "'\\t\\\\centering\\n'", "\n", "latex_content", "+=", "'\\t\\\\setlength{\\\\tabcolsep}{4pt}\\n'", "\n", "latex_content", "+=", "'\\t\\\\begin{tabular}{l ccc }\\n'", "\n", "latex_content", "+=", "'\\t\\\\toprule\\n'", "\n", "latex_content", "+=", "'\\t\\\\multirow{2}{*}{\\\\textbf{Model Setup}} &   \\multicolumn{3}{c}{\\\\textbf{Relations}}\\n'", "\n", "latex_content", "+=", "'\\t\\\\\\\\ \\n'", "\n", "latex_content", "+=", "'\\t\\\\cmidrule{2-4}\\n'", "\n", "latex_content", "+=", "'\\t& \\multicolumn{1}{c}{\\\\textbf{S-Pr}} & \\\\textbf{S-Re} '", "'& \\\\textbf{S-F$\\mathbf{_1}$} \\\\\\\\ \\n'", "\n", "latex_content", "+=", "'\\\\midrule \\n'", "\n", "for", "curr_result", "in", "results_and_model_types", ":", "\n", "        ", "if", "curr_result", "[", "'results'", "]", "is", "None", ":", "\n", "            ", "latex_content", "+=", "'\\t{} & ? & ? & ? \\\\\\\\ \\n'", ".", "format", "(", "curr_result", "[", "'setup'", "]", ")", "\n", "", "else", ":", "\n", "            ", "latex_content", "+=", "'\\t{} & {} & {} & {} \\\\\\\\ \\n'", ".", "format", "(", "curr_result", "[", "'setup'", "]", ",", "\n", "get_res_or_nothing", "(", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'pr'", "]", ",", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_config'", "]", "[", "'model'", "]", "[", "'relations'", "]", "[", "'enabled'", "]", ",", "\n", "best_res", "=", "best_rel_mention_pr", ")", ",", "\n", "get_res_or_nothing", "(", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'re'", "]", ",", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_config'", "]", "[", "'model'", "]", "[", "'relations'", "]", "[", "'enabled'", "]", ",", "\n", "best_res", "=", "best_rel_mention_re", ")", ",", "\n", "get_res_or_nothing", "(", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'f1'", "]", ",", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_config'", "]", "[", "'model'", "]", "[", "'relations'", "]", "[", "'enabled'", "]", ",", "\n", "best_res", "=", "best_rel_mention_f1", ")", ",", "\n", ")", "\n", "", "", "latex_content", "+=", "'\\\\end{tabular}\\n'", "\n", "latex_content", "+=", "'\\\\caption{Impact of CorefProp and RelProp on Relation in our joint setup. The missing results '", "'(\\\\textit{?} marks) will be completed in the final version of the manuscript.}\\n'", "\n", "\n", "latex_content", "+=", "'\\\\label{tab:props_on_rel_results}'", "\n", "latex_content", "+=", "'\\\\end{table}'", "\n", "print", "(", "'================BEGIN TABLE RELATION PROP SOFT METRIC======================='", ")", "\n", "print", "(", "latex_content", ")", "\n", "print", "(", "'================END TABLE RELATION PROP SOFT METRIC======================='", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.print_latex_table_rel_prop_all_metrics": [[1769, 1889], ["print", "print", "print", "print_tables_latex.get_res_or_nothing", "print_tables_latex.get_res_or_nothing", "print_tables_latex.get_res_or_nothing", "print_tables_latex.get_res_or_nothing", "print_tables_latex.get_res_or_nothing", "print_tables_latex.get_res_or_nothing", "print_tables_latex.get_res_or_nothing", "print_tables_latex.get_res_or_nothing", "print_tables_latex.get_res_or_nothing"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res_or_nothing", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res_or_nothing", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res_or_nothing", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res_or_nothing", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res_or_nothing", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res_or_nothing", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res_or_nothing", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res_or_nothing", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_res_or_nothing"], ["", "def", "print_latex_table_rel_prop_all_metrics", "(", "results_and_model_types", ":", "List", ",", "only_f1", "=", "True", ",", "\n", "metric_types", "=", "[", "'mention'", ",", "'soft'", ",", "'hard'", "]", ")", ":", "\n", "    ", "\"\"\"\n\n    :param results_and_model_types:\n    :param only_f1:\n    :param metric_types:\n    :return:\n\n    \"\"\"", "\n", "\n", "# marks the best results", "\n", "best_rel_mention_pr", "=", "0.0", "\n", "best_rel_mention_re", "=", "0.0", "\n", "best_rel_mention_f1", "=", "0.0", "\n", "best_rel_soft_pr", "=", "0.0", "\n", "best_rel_soft_re", "=", "0.0", "\n", "best_rel_soft_f1", "=", "0.0", "\n", "best_rel_hard_pr", "=", "0.0", "\n", "best_rel_hard_re", "=", "0.0", "\n", "best_rel_hard_f1", "=", "0.0", "\n", "for", "curr_result", "in", "results_and_model_types", ":", "\n", "# print('curr_result: ', curr_result)", "\n", "        ", "if", "curr_result", "[", "'results'", "]", "is", "None", ":", "\n", "            ", "continue", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'pr'", "]", "[", "0", "]", ">", "best_rel_mention_pr", ":", "\n", "            ", "best_rel_mention_pr", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'pr'", "]", "[", "0", "]", "\n", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'re'", "]", "[", "0", "]", ">", "best_rel_mention_re", ":", "\n", "            ", "best_rel_mention_re", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'re'", "]", "[", "0", "]", "\n", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'f1'", "]", "[", "0", "]", ">", "best_rel_mention_f1", ":", "\n", "            ", "best_rel_mention_f1", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "\n", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'pr'", "]", "[", "0", "]", ">", "best_rel_soft_pr", ":", "\n", "            ", "best_rel_soft_pr", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'pr'", "]", "[", "0", "]", "\n", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'re'", "]", "[", "0", "]", ">", "best_rel_soft_re", ":", "\n", "            ", "best_rel_soft_re", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'re'", "]", "[", "0", "]", "\n", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'f1'", "]", "[", "0", "]", ">", "best_rel_soft_f1", ":", "\n", "            ", "best_rel_soft_f1", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "\n", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'pr'", "]", "[", "0", "]", ">", "best_rel_hard_pr", ":", "\n", "            ", "best_rel_hard_pr", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'pr'", "]", "[", "0", "]", "\n", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'re'", "]", "[", "0", "]", ">", "best_rel_hard_re", ":", "\n", "            ", "best_rel_hard_re", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'re'", "]", "[", "0", "]", "\n", "\n", "", "if", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'f1'", "]", "[", "0", "]", ">", "best_rel_hard_f1", ":", "\n", "            ", "best_rel_hard_f1", "=", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'f1'", "]", "[", "0", "]", "\n", "\n", "", "", "latex_content", "=", "'\\\\begin{table}[!ht]\\n'", "\n", "latex_content", "+=", "'\\t\\\\centering\\n'", "\n", "latex_content", "+=", "'\\t\\\\setlength{\\\\tabcolsep}{4pt}\\n'", "\n", "latex_content", "+=", "'\\t\\\\begin{tabular}{l ccc ccc ccc}\\n'", "\n", "latex_content", "+=", "'\\t\\\\toprule\\n'", "\n", "latex_content", "+=", "'\\t\\\\multirow{2}{*}{\\\\textbf{Model Setup}} &   \\multicolumn{9}{c}{\\\\textbf{Relations}}\\n'", "\n", "latex_content", "+=", "'\\t\\\\\\\\ \\n'", "\n", "latex_content", "+=", "'\\t\\\\cmidrule{2-4} \\cmidrule{5-7} \\cmidrule{8-10} \\n'", "\n", "latex_content", "+=", "'\\t& \\multicolumn{1}{c}{\\\\textbf{M-Pr}} & \\\\textbf{M-Re} '", "'& \\\\textbf{M-F$\\mathbf{_1}$} '", "\n", "latex_content", "+=", "'& \\multicolumn{1}{c}{\\\\textbf{S-Pr}} & \\\\textbf{S-Re} '", "'& \\\\textbf{S-F$\\mathbf{_1}$} '", "\n", "latex_content", "+=", "'& \\multicolumn{1}{c}{\\\\textbf{E-Pr}} & \\\\textbf{E-Re} '", "'& \\\\textbf{E-F$\\mathbf{_1}$} \\\\\\\\ \\n'", "\n", "latex_content", "+=", "'\\\\midrule \\n'", "\n", "for", "curr_result", "in", "results_and_model_types", ":", "\n", "        ", "if", "curr_result", "[", "'results'", "]", "is", "None", ":", "\n", "            ", "latex_content", "+=", "'\\t{} & ? & ? & ? & ? & ? & ? & ? & ? & ? \\\\\\\\ \\n'", ".", "format", "(", "curr_result", "[", "'setup'", "]", ")", "\n", "", "else", ":", "\n", "            ", "latex_content", "+=", "'\\t{} & {} & {} & {} & {} & {} & {} & {} & {} & {} \\\\\\\\ \\n'", ".", "format", "(", "curr_result", "[", "'setup'", "]", ",", "\n", "get_res_or_nothing", "(", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'pr'", "]", ",", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_config'", "]", "[", "'model'", "]", "[", "'relations'", "]", "[", "'enabled'", "]", ",", "\n", "best_res", "=", "best_rel_mention_pr", ")", ",", "\n", "get_res_or_nothing", "(", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'re'", "]", ",", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_config'", "]", "[", "'model'", "]", "[", "'relations'", "]", "[", "'enabled'", "]", ",", "\n", "best_res", "=", "best_rel_mention_re", ")", ",", "\n", "get_res_or_nothing", "(", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'f1'", "]", ",", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_config'", "]", "[", "'model'", "]", "[", "'relations'", "]", "[", "'enabled'", "]", ",", "\n", "best_res", "=", "best_rel_mention_f1", ")", ",", "\n", "get_res_or_nothing", "(", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'pr'", "]", ",", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_config'", "]", "[", "'model'", "]", "[", "'relations'", "]", "[", "'enabled'", "]", ",", "\n", "best_res", "=", "best_rel_soft_pr", ")", ",", "\n", "get_res_or_nothing", "(", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'re'", "]", ",", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_config'", "]", "[", "'model'", "]", "[", "'relations'", "]", "[", "'enabled'", "]", ",", "\n", "best_res", "=", "best_rel_soft_re", ")", ",", "\n", "get_res_or_nothing", "(", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'f1'", "]", ",", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_config'", "]", "[", "'model'", "]", "[", "'relations'", "]", "[", "'enabled'", "]", ",", "\n", "best_res", "=", "best_rel_soft_f1", ")", ",", "\n", "get_res_or_nothing", "(", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'pr'", "]", ",", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_config'", "]", "[", "'model'", "]", "[", "'relations'", "]", "[", "'enabled'", "]", ",", "\n", "best_res", "=", "best_rel_hard_pr", ")", ",", "\n", "get_res_or_nothing", "(", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'re'", "]", ",", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_config'", "]", "[", "'model'", "]", "[", "'relations'", "]", "[", "'enabled'", "]", ",", "\n", "best_res", "=", "best_rel_hard_re", ")", ",", "\n", "get_res_or_nothing", "(", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'f1'", "]", ",", "\n", "curr_result", "[", "'results'", "]", "[", "'experiment_config'", "]", "[", "'model'", "]", "[", "'relations'", "]", "[", "'enabled'", "]", ",", "\n", "best_res", "=", "best_rel_hard_f1", ")", ",", "\n", ")", "\n", "", "", "latex_content", "+=", "'\\\\end{tabular}\\n'", "\n", "latex_content", "+=", "'\\\\caption{Impact of CorefProp and RelProp on Relation in our joint setup. The missing results '", "'(\\\\textit{?} marks) will be completed in the final version of the manuscript.}\\n'", "\n", "\n", "latex_content", "+=", "'\\\\label{tab:props_on_rel_results_all}'", "\n", "latex_content", "+=", "'\\\\end{table}'", "\n", "print", "(", "'================BEGIN TABLE RELATION PROP ALL METRICS======================='", ")", "\n", "print", "(", "latex_content", ")", "\n", "print", "(", "'================END TABLE RELATION PROP ALL METRICS======================='", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_graph_plots_single": [[1891, 2097], ["print", "print", "print", "dict", "enumerate", "enumerate", "print", "max", "dict.items", "range", "math.trunc", "math.trunc", "range", "len", "len", "len", "print", "dict.values", "print"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "get_graph_plots_single", "(", "tasks_to_plot", "=", "[", "'ner'", ",", "'coref'", ",", "'rel'", "]", ",", "prop_types", "=", "[", "'coref_prop'", ",", "'att_prop'", "]", ",", "\n", "detail_plot", ":", "Dict", "=", "None", ",", "\n", "caption", "=", "'Impact of the Coref and Relation Propagation Iterations different tasks.'", ",", "\n", "max_coref_props", "=", "4", ",", "max_att_props", "=", "4", ",", "max_rel_props", "=", "4", ",", "same_scaling", "=", "True", ",", "\n", "label", "=", "'fig:res_prop_single'", ")", ":", "\n", "    ", "\"\"\"\n    :return:\n\n    \"\"\"", "\n", "prop_types_to_prop_types", "=", "{", "'coref_prop'", ":", "'\\\\propformat{CorefProp}'", ",", "\n", "'rel_prop'", ":", "'\\\\propformat{RelProp}'", ",", "\n", "'att_prop'", ":", "'\\\\propformat{AttProp}'", "}", "\n", "\n", "print", "(", "'to plot graphs: '", ",", "tasks_to_plot", ")", "\n", "print", "(", "'types graphs: '", ",", "prop_types", ")", "\n", "print", "(", "'=========BEGIN GRAPH PLOTS========='", ")", "\n", "\n", "latex_content", "=", "'\\\\begin{subfigure}[b]{1.0\\\\textwidth}\\n'", "\n", "latex_content", "+=", "'\\\\centering\\n'", "\n", "latex_content", "+=", "'\\\\begin{tikzpicture}\\n'", "\n", "\n", "f1_bounds_per_task", "=", "dict", "(", ")", "\n", "for", "idx", ",", "curr_task_to_plot", "in", "enumerate", "(", "tasks_to_plot", ")", ":", "\n", "        ", "curr_min_f1", "=", "999.9", "\n", "curr_max_f1", "=", "0.0", "\n", "for", "curr_prop_type", "in", "prop_types", ":", "\n", "            ", "max_nr_props", "=", "4", "\n", "if", "curr_prop_type", "==", "'coref_prop'", ":", "\n", "                ", "max_nr_props", "=", "max_coref_props", "\n", "", "elif", "curr_prop_type", "==", "'att_prop'", ":", "\n", "                ", "max_nr_props", "=", "max_att_props", "\n", "", "elif", "curr_prop_type", "==", "'rel_prop'", ":", "\n", "                ", "max_nr_props", "=", "max_rel_props", "\n", "", "for", "curr_prop", "in", "range", "(", "max_nr_props", ")", ":", "\n", "                ", "curr_f1", "=", "None", "\n", "curr_stdev", "=", "None", "\n", "# if curr_prop not in detail_plot[curr_prop_type] or \\", "\n", "#         detail_plot[curr_prop_type][curr_prop] is None:", "\n", "#     print('continuing for graph with ', curr_prop, ' for ', curr_task_to_plot, ' for prop type ',", "\n", "#           curr_prop_type)", "\n", "#     continue", "\n", "if", "curr_task_to_plot", "not", "in", "detail_plot", "[", "curr_prop_type", "]", "or", "curr_prop", "not", "in", "detail_plot", "[", "curr_prop_type", "]", "[", "curr_task_to_plot", "]", ":", "\n", "                    ", "print", "(", "'continuing single for graph with '", ",", "curr_prop", ",", "' for '", ",", "curr_task_to_plot", ",", "' for prop type '", ",", "\n", "curr_prop_type", ")", "\n", "continue", "\n", "\n", "", "if", "curr_task_to_plot", "==", "'rel'", ":", "\n", "                    ", "curr_f1", "=", "detail_plot", "[", "curr_prop_type", "]", "[", "curr_task_to_plot", "]", "[", "curr_prop", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "\n", "'rels_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "\n", "curr_stdev", "=", "detail_plot", "[", "curr_prop_type", "]", "[", "curr_task_to_plot", "]", "[", "curr_prop", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "\n", "'rels_mention'", "]", "[", "'f1'", "]", "[", "1", "]", "\n", "", "elif", "curr_task_to_plot", "==", "'ner'", ":", "\n", "                    ", "curr_f1", "=", "detail_plot", "[", "curr_prop_type", "]", "[", "curr_task_to_plot", "]", "[", "curr_prop", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "\n", "'tags_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "\n", "curr_stdev", "=", "detail_plot", "[", "curr_prop_type", "]", "[", "curr_task_to_plot", "]", "[", "curr_prop", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "\n", "'tags_mention'", "]", "[", "'f1'", "]", "[", "1", "]", "\n", "", "elif", "curr_task_to_plot", "==", "'coref'", ":", "\n", "                    ", "curr_f1", "=", "detail_plot", "[", "curr_prop_type", "]", "[", "curr_task_to_plot", "]", "[", "curr_prop", "]", "[", "'experiment_results'", "]", "[", "'coref'", "]", "[", "\n", "'coref_avg'", "]", "[", "'f1'", "]", "[", "\n", "0", "]", "\n", "curr_stdev", "=", "detail_plot", "[", "curr_prop_type", "]", "[", "curr_task_to_plot", "]", "[", "curr_prop", "]", "[", "'experiment_results'", "]", "[", "'coref'", "]", "[", "\n", "'coref_avg'", "]", "[", "'f1'", "]", "[", "1", "]", "\n", "\n", "", "if", "curr_f1", "is", "not", "None", ":", "\n", "                    ", "curr_f1", "=", "curr_f1", "*", "100", "\n", "curr_stdev", "=", "curr_stdev", "*", "100", "\n", "if", "curr_f1", "+", "curr_stdev", ">", "curr_max_f1", ":", "\n", "                        ", "curr_max_f1", "=", "curr_f1", "+", "curr_stdev", "\n", "\n", "", "if", "curr_f1", "-", "curr_stdev", "<", "curr_min_f1", ":", "\n", "                        ", "curr_min_f1", "=", "curr_f1", "-", "curr_stdev", "\n", "", "", "", "", "f1_bounds_per_task", "[", "curr_task_to_plot", "]", "=", "{", "'lower'", ":", "math", ".", "trunc", "(", "curr_min_f1", ")", ",", "'upper'", ":", "math", ".", "trunc", "(", "curr_max_f1", ")", "}", "\n", "\n", "", "if", "same_scaling", ":", "\n", "        ", "max_distance", "=", "max", "(", "[", "v", "[", "'upper'", "]", "-", "v", "[", "'lower'", "]", "for", "v", "in", "f1_bounds_per_task", ".", "values", "(", ")", "]", ")", "\n", "for", "curr_task", ",", "curr_limits", "in", "f1_bounds_per_task", ".", "items", "(", ")", ":", "\n", "            ", "curr_lower", "=", "False", "\n", "while", "curr_limits", "[", "'upper'", "]", "-", "curr_limits", "[", "'lower'", "]", "<", "max_distance", ":", "\n", "                ", "if", "curr_lower", ":", "\n", "                    ", "curr_limits", "[", "'lower'", "]", "-=", "1", "\n", "", "else", ":", "\n", "                    ", "curr_limits", "[", "'upper'", "]", "+=", "1", "\n", "", "curr_lower", "=", "not", "curr_lower", "\n", "\n", "", "", "", "for", "idx", ",", "curr_task_to_plot", "in", "enumerate", "(", "tasks_to_plot", ")", ":", "\n", "        ", "latex_content", "+=", "'\\\\begin{axis}[%\\n'", "\n", "latex_content", "+=", "'name=plot_{},\\n'", ".", "format", "(", "idx", ")", "\n", "latex_content", "+=", "'height=5cm,width=5cm,\\n'", "\n", "if", "curr_task_to_plot", "!=", "'coref'", ":", "\n", "            ", "latex_content", "+=", "'ylabel={M-F$_1$},\\n'", "\n", "", "else", ":", "\n", "            ", "latex_content", "+=", "'ylabel={AVG-F$_1$},\\n'", "\n", "\n", "", "latex_content", "+=", "'ylabel shift=-2.0pt,\\n'", "\n", "curr_name", "=", "'NO NAME???'", "\n", "if", "curr_task_to_plot", "==", "'rel'", ":", "\n", "            ", "curr_name", "=", "'Relations'", "\n", "", "elif", "curr_task_to_plot", "==", "'ner'", ":", "\n", "            ", "curr_name", "=", "'NER'", "\n", "", "elif", "curr_task_to_plot", "==", "'coref'", ":", "\n", "            ", "curr_name", "=", "'Coreference'", "\n", "\n", "", "latex_content", "+=", "'xlabel={{{}}},\\n'", ".", "format", "(", "curr_name", ")", "\n", "latex_content", "+=", "'xmin=-0.5, xmax=3.5,\\n'", "\n", "\n", "latex_content", "+=", "'ymin={:d}, ymax={:d},\\n'", ".", "format", "(", "f1_bounds_per_task", "[", "curr_task_to_plot", "]", "[", "'lower'", "]", ",", "\n", "f1_bounds_per_task", "[", "curr_task_to_plot", "]", "[", "'upper'", "]", "+", "1", ")", "\n", "\n", "latex_content", "+=", "'ymajorgrids=true,\\n'", "\n", "latex_content", "+=", "'xmajorgrids=true,\\n'", "\n", "latex_content", "+=", "'grid style=dashed,\\n'", "\n", "latex_content", "+=", "'mark size=1.0pt,\\n'", "\n", "latex_content", "+=", "'line width=1.0pt,\\n'", "\n", "if", "idx", ">", "0", ":", "\n", "            ", "latex_content", "+=", "'at={{($(plot_{}.east)+(1.3cm, 0)$)}},\\n'", ".", "format", "(", "idx", "-", "1", ")", "\n", "latex_content", "+=", "'anchor=west,\\n'", "\n", "", "if", "idx", "==", "len", "(", "tasks_to_plot", ")", "-", "1", ":", "\n", "            ", "if", "len", "(", "tasks_to_plot", ")", "<", "3", ":", "\n", "                ", "latex_content", "+=", "'legend style={at={(-0.2,1.1)},anchor=south}, \\n'", "\n", "", "else", ":", "\n", "                ", "latex_content", "+=", "'legend style={at={(-0.9,1.1)},anchor=south}, \\n'", "\n", "\n", "", "latex_content", "+=", "'legend columns=-1, \\n'", "\n", "latex_content", "+=", "'legend style={/tikz/every even column/.append style={column sep=0.4cm}}, \\n'", "\n", "", "latex_content", "+=", "'mark=*]\\n'", "\n", "\n", "for", "curr_prop_type", "in", "prop_types", ":", "\n", "            ", "latex_content", "+=", "'\\\\addplot+[ % curr prop type: {} \\n '", ".", "format", "(", "curr_prop_type", ")", "\n", "latex_content", "+=", "'\\t error bars/.cd,\\n'", "\n", "latex_content", "+=", "'\\t y dir=both, y explicit,\\n'", "\n", "latex_content", "+=", "'\\t error bar style={line width=1pt,solid},\\n'", "\n", "latex_content", "+=", "'\\t error mark options={line width=0.5pt,mark size=3pt,rotate=90}\\n'", "\n", "latex_content", "+=", "'\\t]\\n'", "\n", "latex_content", "+=", "'\\t coordinates {\\n'", "\n", "max_nr_props", "=", "0", "\n", "if", "curr_prop_type", "==", "'coref_prop'", ":", "\n", "                ", "max_nr_props", "=", "max_coref_props", "\n", "", "elif", "curr_prop_type", "==", "'att_prop'", ":", "\n", "                ", "max_nr_props", "=", "max_att_props", "\n", "", "elif", "curr_prop_type", "==", "'rel_prop'", ":", "\n", "                ", "max_nr_props", "=", "max_rel_props", "\n", "\n", "", "for", "curr_prop", "in", "range", "(", "max_nr_props", ")", ":", "\n", "                ", "curr_f1", "=", "None", "\n", "curr_stdev", "=", "None", "\n", "if", "curr_task_to_plot", "not", "in", "detail_plot", "[", "curr_prop_type", "]", "or", "curr_prop", "not", "in", "detail_plot", "[", "curr_prop_type", "]", "[", "curr_task_to_plot", "]", ":", "\n", "                    ", "print", "(", "'continuing single for graph (2) with '", ",", "curr_prop", ",", "' for '", ",", "curr_task_to_plot", ",", "\n", "' for prop type '", ",", "\n", "curr_prop_type", ")", "\n", "latex_content", "+=", "'\\t (0,0) +- (0.0, 0) % no data \\n'", "\n", "continue", "\n", "\n", "", "experiment_id", "=", "detail_plot", "[", "curr_prop_type", "]", "[", "curr_task_to_plot", "]", "[", "curr_prop", "]", "[", "'experiment_id'", "]", "\n", "if", "curr_task_to_plot", "==", "'rel'", ":", "\n", "                    ", "curr_f1", "=", "detail_plot", "[", "curr_prop_type", "]", "[", "curr_task_to_plot", "]", "[", "curr_prop", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "\n", "'rels_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "\n", "curr_stdev", "=", "detail_plot", "[", "curr_prop_type", "]", "[", "curr_task_to_plot", "]", "[", "curr_prop", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "\n", "'rels_mention'", "]", "[", "'f1'", "]", "[", "1", "]", "\n", "", "elif", "curr_task_to_plot", "==", "'ner'", ":", "\n", "                    ", "curr_f1", "=", "detail_plot", "[", "curr_prop_type", "]", "[", "curr_task_to_plot", "]", "[", "curr_prop", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "\n", "'tags_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "\n", "curr_stdev", "=", "detail_plot", "[", "curr_prop_type", "]", "[", "curr_task_to_plot", "]", "[", "curr_prop", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "\n", "'tags_mention'", "]", "[", "'f1'", "]", "[", "1", "]", "\n", "", "elif", "curr_task_to_plot", "==", "'coref'", ":", "\n", "                    ", "curr_f1", "=", "detail_plot", "[", "curr_prop_type", "]", "[", "curr_task_to_plot", "]", "[", "curr_prop", "]", "[", "'experiment_results'", "]", "[", "'coref'", "]", "[", "\n", "'coref_avg'", "]", "[", "'f1'", "]", "[", "\n", "0", "]", "\n", "curr_stdev", "=", "detail_plot", "[", "curr_prop_type", "]", "[", "curr_task_to_plot", "]", "[", "curr_prop", "]", "[", "'experiment_results'", "]", "[", "'coref'", "]", "[", "\n", "'coref_avg'", "]", "[", "'f1'", "]", "[", "1", "]", "\n", "\n", "", "if", "curr_f1", "is", "not", "None", ":", "\n", "                    ", "latex_content", "+=", "'\\t ({},{}) +- (0.0, {})    % {} \\n'", ".", "format", "(", "curr_prop", ",", "curr_f1", "*", "100", ",", "\n", "curr_stdev", "*", "100", ",", "\n", "experiment_id", ")", "\n", "", "else", ":", "\n", "                    ", "latex_content", "+=", "'\\t (0,0) +- (0.0, 0) % no data \\n'", "\n", "\n", "", "", "latex_content", "+=", "'\\t }; \\n'", "\n", "\n", "", "prop_types_adapted", "=", "[", "prop_types_to_prop_types", "[", "prop_type", "]", "for", "prop_type", "in", "prop_types", "]", "\n", "if", "idx", "==", "len", "(", "tasks_to_plot", ")", "-", "1", ":", "\n", "# latex_content += '\\\\legend{{{}}} \\n'.format(', '.join(prop_types).replace('_', '\\\\_'))", "\n", "            ", "latex_content", "+=", "'\\\\legend{{{}}} \\n'", ".", "format", "(", "', '", ".", "join", "(", "prop_types_adapted", ")", ".", "replace", "(", "'_'", ",", "'\\\\_'", ")", ")", "\n", "\n", "", "latex_content", "+=", "'\\\\end{axis} \\n'", "\n", "\n", "", "latex_content", "+=", "'\\\\end{tikzpicture} \\n'", "\n", "latex_content", "+=", "'\\\\caption{} \\n'", "\n", "# latex_content += '\\\\caption{{{}}} \\n'.format(caption)", "\n", "latex_content", "+=", "'\\\\label{{{}}} \\n'", ".", "format", "(", "label", ")", "\n", "# latex_content += '\\\\label{} \\n'", "\n", "latex_content", "+=", "'\\\\end{subfigure}\\n'", "\n", "\n", "# print(latex_content)", "\n", "print", "(", "'=========END GRAPH PLOTS========='", ")", "\n", "return", "latex_content", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_csv_graph_plots": [[2099, 2200], ["enumerate", "range", "print", "curr_csv_list.append", "print", "print"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "get_csv_graph_plots", "(", "setup", ":", "str", ",", "detail_data", ":", "Dict", ",", "\n", "max_coref_props", "=", "4", ",", "max_att_props", "=", "4", ",", "max_rel_props", "=", "4", ")", ":", "\n", "    ", "\"\"\"\n\n    :param max_rel_props:\n    :param max_coref_props:\n    :param max_att_props:\n    :param setup: can be 'single', 'joint' or 'joint+bert'\n    :param detail_data:\n    :param csv_list_add_to:\n    :return:\n    \"\"\"", "\n", "tasks_to_output", "=", "[", "'ner'", ",", "'coref'", ",", "'rel'", "]", "\n", "prop_types", "=", "[", "'coref_prop'", ",", "'rel_prop'", ",", "'att_prop'", "]", "\n", "curr_csv_list", "=", "[", "]", "\n", "for", "idx", ",", "curr_task_to_output", "in", "enumerate", "(", "tasks_to_output", ")", ":", "\n", "        ", "for", "curr_prop_type", "in", "prop_types", ":", "\n", "            ", "max_nr_props", "=", "4", "\n", "if", "curr_prop_type", "==", "'coref_prop'", ":", "\n", "                ", "max_nr_props", "=", "max_coref_props", "\n", "", "elif", "curr_prop_type", "==", "'att_prop'", ":", "\n", "                ", "max_nr_props", "=", "max_att_props", "\n", "", "elif", "curr_prop_type", "==", "'rel_prop'", ":", "\n", "                ", "max_nr_props", "=", "max_rel_props", "\n", "", "for", "curr_prop", "in", "range", "(", "max_nr_props", ")", ":", "\n", "                ", "print", "(", "'curr prop: '", ",", "curr_prop", ")", "\n", "if", "setup", "==", "'single'", ":", "\n", "                    ", "if", "curr_task_to_output", "not", "in", "detail_data", "[", "curr_prop_type", "]", "or", "curr_prop", "not", "in", "detail_data", "[", "curr_prop_type", "]", "[", "curr_task_to_output", "]", "or", "detail_data", "[", "curr_prop_type", "]", "[", "curr_task_to_output", "]", "[", "curr_prop", "]", "is", "None", ":", "\n", "                        ", "print", "(", "'continuing for SINGLE csv with '", ",", "curr_prop", ",", "' for '", ",", "curr_task_to_output", ",", "\n", "' for prop type '", ",", "\n", "curr_prop_type", ")", "\n", "continue", "\n", "", "", "else", ":", "\n", "                    ", "if", "curr_prop", "not", "in", "detail_data", "[", "curr_prop_type", "]", "or", "detail_data", "[", "curr_prop_type", "]", "[", "curr_prop", "]", "is", "None", ":", "\n", "                        ", "print", "(", "'continuing for csv with '", ",", "curr_prop", ",", "' for '", ",", "curr_task_to_output", ",", "' for prop type '", ",", "\n", "curr_prop_type", ")", "\n", "continue", "\n", "", "", "curr_metric", "=", "''", "\n", "if", "curr_task_to_output", "==", "'rel'", ":", "\n", "                    ", "if", "setup", "==", "'single'", ":", "\n", "                        ", "curr_f1", "=", "detail_data", "[", "curr_prop_type", "]", "[", "'rel'", "]", "[", "curr_prop", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "\n", "'rels_mention'", "]", "[", "\n", "'f1'", "]", "[", "0", "]", "*", "100", "\n", "curr_stdev", "=", "detail_data", "[", "curr_prop_type", "]", "[", "'rel'", "]", "[", "curr_prop", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "\n", "'rels_mention'", "]", "[", "\n", "'f1'", "]", "[", "1", "]", "*", "100", "\n", "curr_metric", "=", "'F_{1,m}'", "\n", "", "else", ":", "\n", "                        ", "curr_f1", "=", "detail_data", "[", "curr_prop_type", "]", "[", "curr_prop", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "\n", "'f1'", "]", "[", "0", "]", "*", "100", "\n", "curr_stdev", "=", "detail_data", "[", "curr_prop_type", "]", "[", "curr_prop", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "\n", "'f1'", "]", "[", "1", "]", "*", "100", "\n", "curr_metric", "=", "'F_{1,s}'", "\n", "\n", "", "", "elif", "curr_task_to_output", "==", "'ner'", ":", "\n", "                    ", "if", "setup", "==", "'single'", ":", "\n", "                        ", "curr_f1", "=", "detail_data", "[", "curr_prop_type", "]", "[", "'ner'", "]", "[", "curr_prop", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "\n", "'f1'", "]", "[", "\n", "0", "]", "*", "100", "\n", "curr_stdev", "=", "detail_data", "[", "curr_prop_type", "]", "[", "'ner'", "]", "[", "curr_prop", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "\n", "'f1'", "]", "[", "\n", "1", "]", "*", "100", "\n", "curr_metric", "=", "'F_{1,m}'", "\n", "", "else", ":", "\n", "                        ", "curr_f1", "=", "detail_data", "[", "curr_prop_type", "]", "[", "curr_prop", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'f1'", "]", "[", "\n", "0", "]", "*", "100", "\n", "curr_stdev", "=", "detail_data", "[", "curr_prop_type", "]", "[", "curr_prop", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'f1'", "]", "[", "\n", "1", "]", "*", "100", "\n", "curr_metric", "=", "'F_{1,s}'", "\n", "", "", "elif", "curr_task_to_output", "==", "'coref'", ":", "\n", "                    ", "curr_metric", "=", "'Avg. F_1'", "\n", "if", "setup", "==", "'single'", ":", "\n", "                        ", "curr_f1", "=", "detail_data", "[", "curr_prop_type", "]", "[", "'coref'", "]", "[", "curr_prop", "]", "[", "'experiment_results'", "]", "[", "'coref'", "]", "[", "'coref_avg'", "]", "[", "\n", "'f1'", "]", "[", "0", "]", "*", "100", "\n", "curr_stdev", "=", "detail_data", "[", "curr_prop_type", "]", "[", "'coref'", "]", "[", "curr_prop", "]", "[", "'experiment_results'", "]", "[", "'coref'", "]", "[", "'coref_avg'", "]", "[", "\n", "'f1'", "]", "[", "1", "]", "*", "100", "\n", "", "else", ":", "\n", "                        ", "curr_f1", "=", "detail_data", "[", "curr_prop_type", "]", "[", "curr_prop", "]", "[", "'experiment_results'", "]", "[", "'coref'", "]", "[", "'coref_avg'", "]", "[", "'f1'", "]", "[", "\n", "0", "]", "*", "100", "\n", "curr_stdev", "=", "detail_data", "[", "curr_prop_type", "]", "[", "curr_prop", "]", "[", "'experiment_results'", "]", "[", "'coref'", "]", "[", "'coref_avg'", "]", "[", "'f1'", "]", "[", "\n", "1", "]", "*", "100", "\n", "", "", "curr_csv_list", ".", "append", "(", "{", "'setup'", ":", "setup", ",", "'task'", ":", "curr_task_to_output", ",", "'prop_type'", ":", "curr_prop_type", ",", "\n", "'prop_nr'", ":", "curr_prop", ",", "'metric'", ":", "curr_metric", ",", "'result'", ":", "curr_f1", ",", "\n", "'stdev'", ":", "curr_stdev", "}", ")", "\n", "\n", "", "", "", "return", "curr_csv_list", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_graph_plots": [[2202, 2386], ["print", "print", "print", "dict", "enumerate", "enumerate", "print", "max", "dict.items", "range", "math.trunc", "math.trunc", "range", "len", "len", "len", "print", "dict.values", "print"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "get_graph_plots", "(", "tasks_to_plot", "=", "[", "'ner'", ",", "'coref'", ",", "'rel'", "]", ",", "prop_types", "=", "[", "'coref_prop'", ",", "'att_prop'", "]", ",", "\n", "detail_plot", ":", "Dict", "=", "None", ",", "\n", "caption", "=", "'Impact of the Coref and Relation Propagation Iterations different tasks.'", ",", "\n", "max_coref_props", "=", "4", ",", "max_att_props", "=", "4", ",", "max_rel_props", "=", "4", ",", "\n", "same_scaling", "=", "True", ",", "\n", "label", "=", "'fig:res_prop_joint'", ")", ":", "\n", "    ", "\"\"\"\n    :return:\n\n    \"\"\"", "\n", "\n", "prop_types_to_prop_types", "=", "{", "'coref_prop'", ":", "'\\\\propformat{CorefProp}'", ",", "\n", "'rel_prop'", ":", "'\\\\propformat{RelProp}'", ",", "\n", "'att_prop'", ":", "'\\\\propformat{AttProp}'", "}", "\n", "# prop_types_to_prop_types = {'coref_prop': 'CorefProp', 'rel_prop': 'RelProp', 'att_prop': 'AttProp'}", "\n", "\n", "print", "(", "'to plot graphs: '", ",", "tasks_to_plot", ")", "\n", "print", "(", "'types graphs: '", ",", "prop_types", ")", "\n", "print", "(", "'=========BEGIN GRAPH PLOTS========='", ")", "\n", "\n", "latex_content", "=", "'\\\\begin{subfigure}[b]{1.0\\\\textwidth}\\n'", "\n", "latex_content", "+=", "'\\\\centering\\n'", "\n", "latex_content", "+=", "'\\\\begin{tikzpicture}\\n'", "\n", "\n", "f1_bounds_per_task", "=", "dict", "(", ")", "\n", "\n", "for", "idx", ",", "curr_task_to_plot", "in", "enumerate", "(", "tasks_to_plot", ")", ":", "\n", "        ", "curr_min_f1", "=", "999.9", "\n", "curr_max_f1", "=", "0.0", "\n", "\n", "for", "curr_prop_type", "in", "prop_types", ":", "\n", "            ", "max_nr_props", "=", "4", "\n", "if", "curr_prop_type", "==", "'coref_prop'", ":", "\n", "                ", "max_nr_props", "=", "max_coref_props", "\n", "", "elif", "curr_prop_type", "==", "'att_prop'", ":", "\n", "                ", "max_nr_props", "=", "max_att_props", "\n", "", "elif", "curr_prop_type", "==", "'rel_prop'", ":", "\n", "                ", "max_nr_props", "=", "max_rel_props", "\n", "", "for", "curr_prop", "in", "range", "(", "max_nr_props", ")", ":", "\n", "                ", "curr_f1", "=", "None", "\n", "curr_stdev", "=", "None", "\n", "if", "curr_prop", "not", "in", "detail_plot", "[", "curr_prop_type", "]", "or", "detail_plot", "[", "curr_prop_type", "]", "[", "curr_prop", "]", "is", "None", ":", "\n", "                    ", "print", "(", "'continuing for graph with '", ",", "curr_prop", ",", "' for '", ",", "curr_task_to_plot", ",", "' for prop type '", ",", "\n", "curr_prop_type", ")", "\n", "continue", "\n", "", "if", "curr_task_to_plot", "==", "'rel'", ":", "\n", "                    ", "curr_f1", "=", "detail_plot", "[", "curr_prop_type", "]", "[", "curr_prop", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "\n", "curr_stdev", "=", "detail_plot", "[", "curr_prop_type", "]", "[", "curr_prop", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'f1'", "]", "[", "1", "]", "\n", "", "elif", "curr_task_to_plot", "==", "'ner'", ":", "\n", "                    ", "curr_f1", "=", "detail_plot", "[", "curr_prop_type", "]", "[", "curr_prop", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "\n", "curr_stdev", "=", "detail_plot", "[", "curr_prop_type", "]", "[", "curr_prop", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'f1'", "]", "[", "1", "]", "\n", "", "elif", "curr_task_to_plot", "==", "'coref'", ":", "\n", "                    ", "curr_f1", "=", "detail_plot", "[", "curr_prop_type", "]", "[", "curr_prop", "]", "[", "'experiment_results'", "]", "[", "'coref'", "]", "[", "'coref_avg'", "]", "[", "'f1'", "]", "[", "\n", "0", "]", "\n", "curr_stdev", "=", "detail_plot", "[", "curr_prop_type", "]", "[", "curr_prop", "]", "[", "'experiment_results'", "]", "[", "'coref'", "]", "[", "'coref_avg'", "]", "[", "'f1'", "]", "[", "1", "]", "\n", "", "curr_f1", "=", "curr_f1", "*", "100", "\n", "curr_stdev", "=", "curr_stdev", "*", "100", "\n", "if", "curr_f1", "+", "curr_stdev", ">", "curr_max_f1", ":", "\n", "                    ", "curr_max_f1", "=", "curr_f1", "+", "curr_stdev", "\n", "\n", "", "if", "curr_f1", "-", "curr_stdev", "<", "curr_min_f1", ":", "\n", "                    ", "curr_min_f1", "=", "curr_f1", "-", "curr_stdev", "\n", "", "", "", "f1_bounds_per_task", "[", "curr_task_to_plot", "]", "=", "{", "'lower'", ":", "math", ".", "trunc", "(", "curr_min_f1", ")", ",", "'upper'", ":", "math", ".", "trunc", "(", "curr_max_f1", ")", "}", "\n", "\n", "", "if", "same_scaling", ":", "\n", "        ", "max_distance", "=", "max", "(", "[", "v", "[", "'upper'", "]", "-", "v", "[", "'lower'", "]", "for", "v", "in", "f1_bounds_per_task", ".", "values", "(", ")", "]", ")", "\n", "for", "curr_task", ",", "curr_limits", "in", "f1_bounds_per_task", ".", "items", "(", ")", ":", "\n", "            ", "curr_lower", "=", "False", "\n", "while", "curr_limits", "[", "'upper'", "]", "-", "curr_limits", "[", "'lower'", "]", "<", "max_distance", ":", "\n", "                ", "if", "curr_lower", ":", "\n", "                    ", "curr_limits", "[", "'lower'", "]", "-=", "1", "\n", "", "else", ":", "\n", "                    ", "curr_limits", "[", "'upper'", "]", "+=", "1", "\n", "", "curr_lower", "=", "not", "curr_lower", "\n", "\n", "", "", "", "for", "idx", ",", "curr_task_to_plot", "in", "enumerate", "(", "tasks_to_plot", ")", ":", "\n", "        ", "latex_content", "+=", "'\\\\begin{axis}[%\\n'", "\n", "latex_content", "+=", "'name=plot_{},\\n'", ".", "format", "(", "idx", ")", "\n", "latex_content", "+=", "'height=5cm,width=5cm,\\n'", "\n", "if", "curr_task_to_plot", "!=", "'coref'", ":", "\n", "            ", "latex_content", "+=", "'ylabel={S-F$_1$},\\n'", "\n", "", "else", ":", "\n", "            ", "latex_content", "+=", "'ylabel={AVG-F$_1$},\\n'", "\n", "\n", "", "latex_content", "+=", "'ylabel shift=-2.0pt,\\n'", "\n", "curr_name", "=", "'NO NAME???'", "\n", "if", "curr_task_to_plot", "==", "'rel'", ":", "\n", "            ", "curr_name", "=", "'Relations'", "\n", "", "elif", "curr_task_to_plot", "==", "'ner'", ":", "\n", "            ", "curr_name", "=", "'NER'", "\n", "", "elif", "curr_task_to_plot", "==", "'coref'", ":", "\n", "            ", "curr_name", "=", "'Coreference'", "\n", "\n", "", "latex_content", "+=", "'xlabel={{{}}},\\n'", ".", "format", "(", "curr_name", ")", "\n", "latex_content", "+=", "'xmin=-0.5, xmax=3.5,\\n'", "\n", "# TODO: see how to create the legend, and also respective comments on which coordinates is from which propagation", "\n", "latex_content", "+=", "'ymin={:d}, ymax={:d},\\n'", ".", "format", "(", "f1_bounds_per_task", "[", "curr_task_to_plot", "]", "[", "'lower'", "]", ",", "\n", "f1_bounds_per_task", "[", "curr_task_to_plot", "]", "[", "'upper'", "]", "+", "1", ")", "\n", "\n", "latex_content", "+=", "'ymajorgrids=true,\\n'", "\n", "latex_content", "+=", "'xmajorgrids=true,\\n'", "\n", "latex_content", "+=", "'grid style=dashed,\\n'", "\n", "latex_content", "+=", "'mark size=1.0pt,\\n'", "\n", "latex_content", "+=", "'line width=1.0pt,\\n'", "\n", "if", "idx", ">", "0", ":", "\n", "            ", "latex_content", "+=", "'at={{($(plot_{}.east)+(1.3cm, 0)$)}},\\n'", ".", "format", "(", "idx", "-", "1", ")", "\n", "latex_content", "+=", "'anchor=west,\\n'", "\n", "", "if", "idx", "==", "len", "(", "tasks_to_plot", ")", "-", "1", ":", "\n", "            ", "if", "len", "(", "tasks_to_plot", ")", "<", "3", ":", "\n", "                ", "latex_content", "+=", "'legend style={at={(-0.2,1.1)},anchor=south}, \\n'", "\n", "", "else", ":", "\n", "                ", "latex_content", "+=", "'legend style={at={(-0.9,1.1)},anchor=south}, \\n'", "\n", "\n", "", "latex_content", "+=", "'legend columns=-1, \\n'", "\n", "latex_content", "+=", "'legend style={/tikz/every even column/.append style={column sep=0.4cm}}, \\n'", "\n", "", "latex_content", "+=", "'mark=*]\\n'", "\n", "\n", "for", "curr_prop_type", "in", "prop_types", ":", "\n", "            ", "latex_content", "+=", "'\\\\addplot+[ % curr prop type: {} \\n '", ".", "format", "(", "curr_prop_type", ")", "\n", "latex_content", "+=", "'\\t error bars/.cd,\\n'", "\n", "latex_content", "+=", "'\\t y dir=both, y explicit,\\n'", "\n", "latex_content", "+=", "'\\t error bar style={line width=1pt,solid},\\n'", "\n", "latex_content", "+=", "'\\t error mark options={line width=0.5pt,mark size=3pt,rotate=90}\\n'", "\n", "latex_content", "+=", "'\\t]\\n'", "\n", "latex_content", "+=", "'\\t coordinates {\\n'", "\n", "max_nr_props", "=", "0", "\n", "if", "curr_prop_type", "==", "'coref_prop'", ":", "\n", "                ", "max_nr_props", "=", "max_coref_props", "\n", "", "elif", "curr_prop_type", "==", "'att_prop'", ":", "\n", "                ", "max_nr_props", "=", "max_att_props", "\n", "", "elif", "curr_prop_type", "==", "'rel_prop'", ":", "\n", "                ", "max_nr_props", "=", "max_rel_props", "\n", "", "for", "curr_prop", "in", "range", "(", "max_nr_props", ")", ":", "\n", "                ", "curr_f1", "=", "None", "\n", "curr_stdev", "=", "None", "\n", "if", "curr_prop", "not", "in", "detail_plot", "[", "curr_prop_type", "]", "or", "detail_plot", "[", "curr_prop_type", "]", "[", "curr_prop", "]", "is", "None", ":", "\n", "                    ", "print", "(", "'continuing for graph with '", ",", "curr_prop", ",", "' for '", ",", "curr_task_to_plot", ",", "' for prop type '", ",", "\n", "curr_prop_type", ")", "\n", "continue", "\n", "", "experiment_id", "=", "detail_plot", "[", "curr_prop_type", "]", "[", "curr_prop", "]", "[", "'experiment_id'", "]", "\n", "if", "curr_task_to_plot", "==", "'rel'", ":", "\n", "                    ", "curr_f1", "=", "detail_plot", "[", "curr_prop_type", "]", "[", "curr_prop", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "\n", "curr_stdev", "=", "detail_plot", "[", "curr_prop_type", "]", "[", "curr_prop", "]", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'f1'", "]", "[", "1", "]", "\n", "", "elif", "curr_task_to_plot", "==", "'ner'", ":", "\n", "                    ", "curr_f1", "=", "detail_plot", "[", "curr_prop_type", "]", "[", "curr_prop", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "\n", "curr_stdev", "=", "detail_plot", "[", "curr_prop_type", "]", "[", "curr_prop", "]", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'f1'", "]", "[", "1", "]", "\n", "", "elif", "curr_task_to_plot", "==", "'coref'", ":", "\n", "                    ", "curr_f1", "=", "detail_plot", "[", "curr_prop_type", "]", "[", "curr_prop", "]", "[", "'experiment_results'", "]", "[", "'coref'", "]", "[", "'coref_avg'", "]", "[", "'f1'", "]", "[", "\n", "0", "]", "\n", "curr_stdev", "=", "detail_plot", "[", "curr_prop_type", "]", "[", "curr_prop", "]", "[", "'experiment_results'", "]", "[", "'coref'", "]", "[", "'coref_avg'", "]", "[", "'f1'", "]", "[", "1", "]", "\n", "\n", "", "if", "curr_f1", "is", "not", "None", ":", "\n", "                    ", "latex_content", "+=", "'\\t ({},{}) +- (0.0, {})    % {} \\n'", ".", "format", "(", "curr_prop", ",", "curr_f1", "*", "100", ",", "\n", "curr_stdev", "*", "100", ",", "\n", "experiment_id", ")", "\n", "", "", "latex_content", "+=", "'\\t }; \\n'", "\n", "# latex_content += '\\t }; \\n'", "\n", "", "prop_types_adapted", "=", "[", "prop_types_to_prop_types", "[", "prop_type", "]", "for", "prop_type", "in", "prop_types", "]", "\n", "if", "idx", "==", "len", "(", "tasks_to_plot", ")", "-", "1", ":", "\n", "# latex_content += '\\\\legend{{{}}} \\n'.format(', '.join(prop_types).replace('_', '\\\\_'))", "\n", "            ", "latex_content", "+=", "'\\\\legend{{{}}} \\n'", ".", "format", "(", "', '", ".", "join", "(", "prop_types_adapted", ")", ".", "replace", "(", "'_'", ",", "'\\\\_'", ")", ")", "\n", "\n", "", "latex_content", "+=", "'\\\\end{axis} \\n'", "\n", "\n", "", "latex_content", "+=", "'\\\\end{tikzpicture} \\n'", "\n", "latex_content", "+=", "'\\\\caption{} \\n'", "\n", "# latex_content += '\\\\caption{{{}}} \\n'.format(caption)", "\n", "latex_content", "+=", "'\\\\label{{{}}} \\n'", ".", "format", "(", "label", ")", "\n", "# latex_content += '\\\\label{} \\n'", "\n", "latex_content", "+=", "'\\\\end{subfigure}\\n'", "\n", "\n", "# print(latex_content)", "\n", "print", "(", "'=========END GRAPH PLOTS========='", ")", "\n", "return", "latex_content", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_csv_line": [[2388, 2743], ["to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append"], "function", ["None"], ["", "def", "get_csv_line", "(", "experiment_config", ":", "Dict", ",", "experiment_results", ":", "Dict", ",", "experiment_id", ":", "str", ",", "\n", "only_f1", "=", "False", ",", "only_title", "=", "False", ",", "tasks_to_report_on", "=", "{", "'Coref'", ",", "'Linking'", "}", ")", ":", "\n", "    ", "\"\"\" Model file\tatt enabled\tatt props\tcoref enabled\tcoref props\trel enabled\trel props\tTag M-f1 \"\"\"", "\n", "\n", "if", "not", "only_title", ":", "\n", "        ", "nr_runs", "=", "experiment_results", "[", "'nr_runs'", "]", "\n", "\n", "model_type", "=", "''", "\n", "nilin", "=", "''", "\n", "if", "experiment_config", "[", "'model'", "]", "[", "'linker'", "]", "[", "'enabled'", "]", ":", "\n", "            ", "model_type", "=", "'baseline'", "\n", "", "elif", "experiment_config", "[", "'model'", "]", "[", "'linkercoref'", "]", "[", "'enabled'", "]", ":", "\n", "            ", "model_type", "=", "'coref+link-'", "+", "experiment_config", "[", "'model'", "]", "[", "'linkercoref'", "]", "[", "'model_type'", "]", "\n", "nilin", "=", "not", "experiment_config", "[", "'model'", "]", "[", "'linkercoref'", "]", "[", "'no_nil_in_targets'", "]", "\n", "\n", "", "to_ret", "=", "[", "experiment_id", ",", "nr_runs", ",", "nilin", ",", "model_type", "]", "\n", "\n", "# to_ret = [experiment_id, nr_runs, field_is_bert, field_att_prop, field_ner_enabled,", "\n", "#           field_coref_enabled, field_coref_prop, field_rel_enabled, field_rel_prop]", "\n", "", "else", ":", "\n", "# to_ret = ['Experiment ID', 'Nr Runs', 'NILinM', 'Att Props', 'Tag', 'Coref', 'Coref props',", "\n", "#           'Rels', 'Rel props']", "\n", "        ", "to_ret", "=", "[", "'Experiment ID'", ",", "'Nr Runs'", ",", "'NILin'", ",", "'Model Type'", "]", "\n", "\n", "", "if", "'Tag'", "in", "tasks_to_report_on", ":", "\n", "        ", "if", "not", "only_title", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'pr'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'pr'", "]", "[", "1", "]", ")", ")", "\n", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'re'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'re'", "]", "[", "1", "]", ")", ")", "\n", "\n", "", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'f1'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'f1'", "]", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'Tag M-pr'", ")", "\n", "to_ret", ".", "append", "(", "'Tag M-re'", ")", "\n", "", "to_ret", ".", "append", "(", "'Tag M-f1'", ")", "\n", "\n", "", "if", "not", "only_title", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'pr'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'pr'", "]", "[", "1", "]", ")", ")", "\n", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'re'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'re'", "]", "[", "1", "]", ")", ")", "\n", "\n", "", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'f1'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'f1'", "]", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'Tag S-pr'", ")", "\n", "to_ret", ".", "append", "(", "'Tag S-re'", ")", "\n", "", "to_ret", ".", "append", "(", "'Tag S-f1'", ")", "\n", "\n", "", "if", "not", "only_title", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'pr'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'pr'", "]", "[", "1", "]", ")", ")", "\n", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'re'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'re'", "]", "[", "1", "]", ")", ")", "\n", "\n", "", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'f1'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'f1'", "]", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'Tag H-pr'", ")", "\n", "to_ret", ".", "append", "(", "'Tag H-re'", ")", "\n", "", "to_ret", ".", "append", "(", "'Tag H-f1'", ")", "\n", "\n", "", "", "if", "'Rels'", "in", "tasks_to_report_on", ":", "\n", "        ", "if", "not", "only_title", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'pr'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'pr'", "]", "[", "1", "]", ")", ")", "\n", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'re'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'re'", "]", "[", "1", "]", ")", ")", "\n", "\n", "", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'f1'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'f1'", "]", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'Rels M-pr'", ")", "\n", "to_ret", ".", "append", "(", "'Rels M-re'", ")", "\n", "", "to_ret", ".", "append", "(", "'Rels M-f1'", ")", "\n", "\n", "", "if", "not", "only_title", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'pr'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'pr'", "]", "[", "1", "]", ")", ")", "\n", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'re'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'re'", "]", "[", "1", "]", ")", ")", "\n", "\n", "", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'f1'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'f1'", "]", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'Rels S-pr'", ")", "\n", "to_ret", ".", "append", "(", "'Rels S-re'", ")", "\n", "", "to_ret", ".", "append", "(", "'Rels S-f1'", ")", "\n", "\n", "", "if", "not", "only_title", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'pr'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'pr'", "]", "[", "1", "]", ")", ")", "\n", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'re'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'re'", "]", "[", "1", "]", ")", ")", "\n", "\n", "", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'f1'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'f1'", "]", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'Rels H-pr'", ")", "\n", "to_ret", ".", "append", "(", "'Rels H-re'", ")", "\n", "", "to_ret", ".", "append", "(", "'Rels H-f1'", ")", "\n", "\n", "", "", "if", "'Linking'", "in", "tasks_to_report_on", ":", "\n", "        ", "if", "not", "only_title", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'links'", "]", "[", "'links-all'", "]", "[", "'pr'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'links'", "]", "[", "'links-all'", "]", "[", "'pr'", "]", "[", "1", "]", ")", ")", "\n", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'links'", "]", "[", "'links-all'", "]", "[", "'re'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'links'", "]", "[", "'links-all'", "]", "[", "'re'", "]", "[", "1", "]", ")", ")", "\n", "\n", "", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'links'", "]", "[", "'links-all'", "]", "[", "'f1'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'links'", "]", "[", "'links-all'", "]", "[", "'f1'", "]", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'Pr Links-all'", ")", "\n", "to_ret", ".", "append", "(", "'Re Links-all'", ")", "\n", "", "to_ret", ".", "append", "(", "'F1 Links-all'", ")", "\n", "\n", "", "if", "not", "only_title", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'links'", "]", "[", "'links-all-from-ent'", "]", "[", "'pr'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'links'", "]", "[", "'links-all-from-ent'", "]", "[", "'pr'", "]", "[", "1", "]", ")", ")", "\n", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'links'", "]", "[", "'links-all-from-ent'", "]", "[", "'re'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'links'", "]", "[", "'links-all-from-ent'", "]", "[", "'re'", "]", "[", "1", "]", ")", ")", "\n", "\n", "", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'links'", "]", "[", "'links-all-from-ent'", "]", "[", "'f1'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'links'", "]", "[", "'links-all-from-ent'", "]", "[", "'f1'", "]", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'Pr Links-all-from-ent'", ")", "\n", "to_ret", ".", "append", "(", "'Re Links-all-from-ent'", ")", "\n", "", "to_ret", ".", "append", "(", "'F1 Links-all-from-ent'", ")", "\n", "\n", "", "if", "not", "only_title", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'links'", "]", "[", "'links-links'", "]", "[", "'pr'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'links'", "]", "[", "'links-links'", "]", "[", "'pr'", "]", "[", "1", "]", ")", ")", "\n", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'links'", "]", "[", "'links-links'", "]", "[", "'re'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'links'", "]", "[", "'links-links'", "]", "[", "'re'", "]", "[", "1", "]", ")", ")", "\n", "\n", "", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'links'", "]", "[", "'links-links'", "]", "[", "'f1'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'links'", "]", "[", "'links-links'", "]", "[", "'f1'", "]", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'Pr Links-links'", ")", "\n", "to_ret", ".", "append", "(", "'Re Links-links'", ")", "\n", "", "to_ret", ".", "append", "(", "'F1 Links-links'", ")", "\n", "\n", "", "if", "not", "only_title", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'links'", "]", "[", "'links-links-from-ent'", "]", "[", "'pr'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'links'", "]", "[", "'links-links-from-ent'", "]", "[", "'pr'", "]", "[", "1", "]", ")", ")", "\n", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'links'", "]", "[", "'links-links-from-ent'", "]", "[", "'re'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'links'", "]", "[", "'links-links-from-ent'", "]", "[", "'re'", "]", "[", "1", "]", ")", ")", "\n", "\n", "", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'links'", "]", "[", "'links-links-from-ent'", "]", "[", "'f1'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'links'", "]", "[", "'links-links-from-ent'", "]", "[", "'f1'", "]", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'Pr Links-links-from-ent'", ")", "\n", "to_ret", ".", "append", "(", "'Re Links-links-from-ent'", ")", "\n", "", "to_ret", ".", "append", "(", "'F1 Links-links-from-ent'", ")", "\n", "\n", "", "if", "not", "only_title", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'links'", "]", "[", "'links-nill'", "]", "[", "'pr'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'links'", "]", "[", "'links-nill'", "]", "[", "'pr'", "]", "[", "1", "]", ")", ")", "\n", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'links'", "]", "[", "'links-nill'", "]", "[", "'re'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'links'", "]", "[", "'links-nill'", "]", "[", "'re'", "]", "[", "1", "]", ")", ")", "\n", "\n", "", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'links'", "]", "[", "'links-nill'", "]", "[", "'f1'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'links'", "]", "[", "'links-nill'", "]", "[", "'f1'", "]", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'Pr Links-nill'", ")", "\n", "to_ret", ".", "append", "(", "'Re Links-nill'", ")", "\n", "", "to_ret", ".", "append", "(", "'F1 Links-nill'", ")", "\n", "\n", "", "if", "not", "only_title", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'links'", "]", "[", "'links-nill-from-ent'", "]", "[", "'pr'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'links'", "]", "[", "'links-nill-from-ent'", "]", "[", "'pr'", "]", "[", "1", "]", ")", ")", "\n", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'links'", "]", "[", "'links-nill-from-ent'", "]", "[", "'re'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'links'", "]", "[", "'links-nill-from-ent'", "]", "[", "'re'", "]", "[", "1", "]", ")", ")", "\n", "\n", "", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'links'", "]", "[", "'links-nill-from-ent'", "]", "[", "'f1'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'links'", "]", "[", "'links-nill-from-ent'", "]", "[", "'f1'", "]", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'Pr Links-nill-from-ent'", ")", "\n", "to_ret", ".", "append", "(", "'Re Links-nill-from-ent'", ")", "\n", "", "to_ret", ".", "append", "(", "'F1 Links-nill-from-ent'", ")", "\n", "\n", "", "if", "not", "only_title", ":", "\n", "            ", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'links'", "]", "[", "'links-accuracy'", "]", "[", "'acc_candidates'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'links'", "]", "[", "'links-accuracy'", "]", "[", "'acc_candidates'", "]", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "to_ret", ".", "append", "(", "'Acc-link (candidates)'", ")", "\n", "\n", "", "if", "not", "only_title", ":", "\n", "            ", "to_ret", ".", "append", "(", "\n", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'links'", "]", "[", "'links-accuracy'", "]", "[", "'acc_no_candidates'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'links'", "]", "[", "'links-accuracy'", "]", "[", "'acc_no_candidates'", "]", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "to_ret", ".", "append", "(", "'Acc-link (NO candidates)'", ")", "\n", "\n", "", "if", "not", "only_title", ":", "\n", "            ", "to_ret", ".", "append", "(", "\n", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "\n", "experiment_results", "[", "'links'", "]", "[", "'links-accuracy-from-ent'", "]", "[", "'acc_no_candidates'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'links'", "]", "[", "'links-accuracy-from-ent'", "]", "[", "'acc_no_candidates'", "]", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "to_ret", ".", "append", "(", "'Acc-link-from-ent (NO candidates)'", ")", "\n", "\n", "", "", "if", "'Coref'", "in", "tasks_to_report_on", ":", "\n", "        ", "if", "not", "only_title", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'coref'", "]", "[", "'coref_avg'", "]", "[", "'pr'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'coref'", "]", "[", "'coref_avg'", "]", "[", "'pr'", "]", "[", "1", "]", ")", ")", "\n", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'coref'", "]", "[", "'coref_avg'", "]", "[", "'re'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'coref'", "]", "[", "'coref_avg'", "]", "[", "'re'", "]", "[", "1", "]", ")", ")", "\n", "\n", "", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'coref'", "]", "[", "'coref_avg'", "]", "[", "'f1'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'coref'", "]", "[", "'coref_avg'", "]", "[", "'f1'", "]", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'AVG pr (coref)'", ")", "\n", "to_ret", ".", "append", "(", "'AVG re (coref)'", ")", "\n", "", "to_ret", ".", "append", "(", "'AVG f1 (coref)'", ")", "\n", "\n", "", "if", "not", "only_title", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'coref'", "]", "[", "'muc'", "]", "[", "'pr'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'coref'", "]", "[", "'muc'", "]", "[", "'pr'", "]", "[", "1", "]", ")", ")", "\n", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'coref'", "]", "[", "'muc'", "]", "[", "'re'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'coref'", "]", "[", "'muc'", "]", "[", "'re'", "]", "[", "1", "]", ")", ")", "\n", "\n", "", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'coref'", "]", "[", "'muc'", "]", "[", "'f1'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'coref'", "]", "[", "'muc'", "]", "[", "'f1'", "]", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'MUC pr'", ")", "\n", "to_ret", ".", "append", "(", "'MUC re'", ")", "\n", "", "to_ret", ".", "append", "(", "'MUC f1'", ")", "\n", "\n", "", "if", "not", "only_title", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'coref'", "]", "[", "'ceafm_singleton'", "]", "[", "'pr'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'coref'", "]", "[", "'ceafm_singleton'", "]", "[", "'pr'", "]", "[", "1", "]", ")", ")", "\n", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'coref'", "]", "[", "'ceafm_singleton'", "]", "[", "'re'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'coref'", "]", "[", "'ceafm_singleton'", "]", "[", "'re'", "]", "[", "1", "]", ")", ")", "\n", "\n", "", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'coref'", "]", "[", "'ceafm_singleton'", "]", "[", "'f1'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'coref'", "]", "[", "'ceafm_singleton'", "]", "[", "'f1'", "]", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'CEAFm pr'", ")", "\n", "to_ret", ".", "append", "(", "'CEAFm re'", ")", "\n", "", "to_ret", ".", "append", "(", "'CEAFm f1'", ")", "\n", "\n", "", "if", "not", "only_title", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'coref'", "]", "[", "'ceafe_singleton'", "]", "[", "'pr'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'coref'", "]", "[", "'ceafe_singleton'", "]", "[", "'pr'", "]", "[", "1", "]", ")", ")", "\n", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'coref'", "]", "[", "'ceafe_singleton'", "]", "[", "'re'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'coref'", "]", "[", "'ceafe_singleton'", "]", "[", "'re'", "]", "[", "1", "]", ")", ")", "\n", "\n", "", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'coref'", "]", "[", "'ceafe_singleton'", "]", "[", "'f1'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'coref'", "]", "[", "'ceafe_singleton'", "]", "[", "'f1'", "]", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'CEAFe pr'", ")", "\n", "to_ret", ".", "append", "(", "'CEAFe re'", ")", "\n", "", "to_ret", ".", "append", "(", "'CEAFe f1'", ")", "\n", "\n", "", "if", "not", "only_title", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "\n", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'coref'", "]", "[", "'b_cubed_singleton_men_conll'", "]", "[", "'pr'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'coref'", "]", "[", "'b_cubed_singleton_men_conll'", "]", "[", "'pr'", "]", "[", "\n", "1", "]", ")", ")", "\n", "to_ret", ".", "append", "(", "\n", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'coref'", "]", "[", "'b_cubed_singleton_men_conll'", "]", "[", "'re'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'coref'", "]", "[", "'b_cubed_singleton_men_conll'", "]", "[", "'re'", "]", "[", "\n", "1", "]", ")", ")", "\n", "\n", "", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'coref'", "]", "[", "'b_cubed_singleton_men_conll'", "]", "[", "'f1'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'coref'", "]", "[", "'b_cubed_singleton_men_conll'", "]", "[", "'f1'", "]", "[", "\n", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'B-3 men conll pr'", ")", "\n", "to_ret", ".", "append", "(", "'B-3 men conll re'", ")", "\n", "", "to_ret", ".", "append", "(", "'B-3 men conll f1'", ")", "\n", "\n", "", "if", "not", "only_title", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'coref'", "]", "[", "'b_cubed_singleton_ent'", "]", "[", "'pr'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'coref'", "]", "[", "'b_cubed_singleton_ent'", "]", "[", "'pr'", "]", "[", "1", "]", ")", ")", "\n", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'coref'", "]", "[", "'b_cubed_singleton_ent'", "]", "[", "'re'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'coref'", "]", "[", "'b_cubed_singleton_ent'", "]", "[", "'re'", "]", "[", "1", "]", ")", ")", "\n", "\n", "", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'coref'", "]", "[", "'b_cubed_singleton_ent'", "]", "[", "'f1'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'coref'", "]", "[", "'b_cubed_singleton_ent'", "]", "[", "'f1'", "]", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'B-3 ent pr'", ")", "\n", "to_ret", ".", "append", "(", "'B-3 ent re'", ")", "\n", "", "to_ret", ".", "append", "(", "'B-3 ent f1'", ")", "\n", "\n", "", "if", "not", "only_title", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'coref'", "]", "[", "'ceafe_not_singleton'", "]", "[", "'pr'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'coref'", "]", "[", "'ceafe_not_singleton'", "]", "[", "'pr'", "]", "[", "1", "]", ")", ")", "\n", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'coref'", "]", "[", "'ceafe_not_singleton'", "]", "[", "'re'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'coref'", "]", "[", "'ceafe_not_singleton'", "]", "[", "'re'", "]", "[", "1", "]", ")", ")", "\n", "\n", "", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'coref'", "]", "[", "'ceafe_not_singleton'", "]", "[", "'f1'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'coref'", "]", "[", "'ceafe_not_singleton'", "]", "[", "'f1'", "]", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'CEAFe not singleton pr'", ")", "\n", "to_ret", ".", "append", "(", "'CEAFe not singleton re'", ")", "\n", "", "to_ret", ".", "append", "(", "'CEAFe not singleton f1'", ")", "\n", "\n", "", "if", "not", "only_title", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'coref'", "]", "[", "'b_cubed_not_singleton'", "]", "[", "'pr'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'coref'", "]", "[", "'b_cubed_not_singleton'", "]", "[", "'pr'", "]", "[", "1", "]", ")", ")", "\n", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'coref'", "]", "[", "'b_cubed_not_singleton'", "]", "[", "'re'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'coref'", "]", "[", "'b_cubed_not_singleton'", "]", "[", "'re'", "]", "[", "1", "]", ")", ")", "\n", "\n", "", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'coref'", "]", "[", "'b_cubed_not_singleton'", "]", "[", "'f1'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'coref'", "]", "[", "'b_cubed_not_singleton'", "]", "[", "'f1'", "]", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'B-3 not singleton pr'", ")", "\n", "to_ret", ".", "append", "(", "'B-3 not singleton re'", ")", "\n", "", "to_ret", ".", "append", "(", "'B-3 not singleton f1'", ")", "\n", "\n", "", "", "return", "to_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.print_tables_latex.get_csv_line_v2": [[2745, 3107], ["to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append", "to_ret.append"], "function", ["None"], ["", "def", "get_csv_line_v2", "(", "experiment_config", ":", "Dict", ",", "experiment_results", ":", "Dict", ",", "experiment_id", ":", "str", ",", "\n", "only_f1", "=", "False", ",", "only_title", "=", "False", ",", "tasks_to_report_on", "=", "{", "'Coref'", ",", "'Linking'", "}", ")", ":", "\n", "    ", "\"\"\"\n\n    The difference with get_csv_line is that in this get_csv_lin_v2 version some of the metrics such as entity linking\n    with nils are left out, since this is not the current focus. Some other metrics, such as hard and soft linking are\n    added. The idea is that the resulting .csv file is less confusing and more focused on the metrics that we are\n    interested in at this particular point in time. This function is added Dec 4, 2020.\n\n    :param experiment_config:\n    :param experiment_results:\n    :param experiment_id:\n    :param only_f1:\n    :param only_title:\n    :param tasks_to_report_on:\n    :return:\n    \"\"\"", "\n", "\n", "if", "not", "only_title", ":", "\n", "        ", "nr_runs", "=", "experiment_results", "[", "'nr_runs'", "]", "\n", "\n", "model_type", "=", "''", "\n", "nilin", "=", "''", "\n", "if", "'linker'", "in", "experiment_config", "[", "'model'", "]", "and", "experiment_config", "[", "'model'", "]", "[", "'linker'", "]", "[", "'enabled'", "]", ":", "\n", "            ", "model_type", "=", "'baseline'", "\n", "", "elif", "'linker'", "in", "experiment_config", "[", "'model'", "]", "and", "'linkercoref'", "in", "experiment_config", "[", "'model'", "]", "and", "experiment_config", "[", "'model'", "]", "[", "'linkercoref'", "]", "[", "'enabled'", "]", ":", "\n", "            ", "model_type", "=", "'coref+link-'", "+", "experiment_config", "[", "'model'", "]", "[", "'linkercoref'", "]", "[", "'model_type'", "]", "\n", "nilin", "=", "not", "experiment_config", "[", "'model'", "]", "[", "'linkercoref'", "]", "[", "'no_nil_in_targets'", "]", "\n", "", "elif", "'linker'", "in", "experiment_config", "[", "'model'", "]", "and", "'coreflinker'", "in", "experiment_config", "[", "'model'", "]", "and", "experiment_config", "[", "'model'", "]", "[", "'coreflinker'", "]", "[", "'enabled'", "]", ":", "\n", "            ", "nilin", "=", "not", "experiment_config", "[", "'model'", "]", "[", "'coreflinker'", "]", "[", "'no_nil_in_targets'", "]", "\n", "model_type", "=", "'coref+link-'", "+", "experiment_config", "[", "'model'", "]", "[", "'coreflinker'", "]", "[", "'type'", "]", "\n", "", "else", ":", "\n", "            ", "model_type", "=", "'other'", "\n", "nilin", "=", "False", "\n", "\n", "", "to_ret", "=", "[", "experiment_id", ",", "nr_runs", ",", "nilin", ",", "model_type", "]", "\n", "\n", "# to_ret = [experiment_id, nr_runs, field_is_bert, field_att_prop, field_ner_enabled,", "\n", "#           field_coref_enabled, field_coref_prop, field_rel_enabled, field_rel_prop]", "\n", "", "else", ":", "\n", "# to_ret = ['Experiment ID', 'Nr Runs', 'NILinM', 'Att Props', 'Tag', 'Coref', 'Coref props',", "\n", "#           'Rels', 'Rel props']", "\n", "        ", "to_ret", "=", "[", "'Experiment ID'", ",", "'Nr Runs'", ",", "'NILin'", ",", "'Model Type'", "]", "\n", "\n", "", "if", "'Tag'", "in", "tasks_to_report_on", ":", "\n", "        ", "if", "not", "only_title", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'pr'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'pr'", "]", "[", "1", "]", ")", ")", "\n", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'re'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'re'", "]", "[", "1", "]", ")", ")", "\n", "\n", "", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'f1'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'f1'", "]", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'Tag M-pr'", ")", "\n", "to_ret", ".", "append", "(", "'Tag M-re'", ")", "\n", "", "to_ret", ".", "append", "(", "'Tag M-f1'", ")", "\n", "\n", "", "if", "not", "only_title", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'pr'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'pr'", "]", "[", "1", "]", ")", ")", "\n", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'re'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'re'", "]", "[", "1", "]", ")", ")", "\n", "\n", "", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'f1'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'f1'", "]", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'Tag S-pr'", ")", "\n", "to_ret", ".", "append", "(", "'Tag S-re'", ")", "\n", "", "to_ret", ".", "append", "(", "'Tag S-f1'", ")", "\n", "\n", "", "if", "not", "only_title", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'pr'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'pr'", "]", "[", "1", "]", ")", ")", "\n", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'re'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'re'", "]", "[", "1", "]", ")", ")", "\n", "\n", "", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'f1'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'tags'", "]", "[", "'tags_hard'", "]", "[", "'f1'", "]", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'Tag H-pr'", ")", "\n", "to_ret", ".", "append", "(", "'Tag H-re'", ")", "\n", "", "to_ret", ".", "append", "(", "'Tag H-f1'", ")", "\n", "\n", "", "", "if", "'Rels'", "in", "tasks_to_report_on", ":", "\n", "        ", "if", "not", "only_title", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'pr'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'pr'", "]", "[", "1", "]", ")", ")", "\n", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'re'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'re'", "]", "[", "1", "]", ")", ")", "\n", "\n", "", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'f1'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'f1'", "]", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'Rels M-pr'", ")", "\n", "to_ret", ".", "append", "(", "'Rels M-re'", ")", "\n", "", "to_ret", ".", "append", "(", "'Rels M-f1'", ")", "\n", "\n", "", "if", "not", "only_title", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'pr'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'pr'", "]", "[", "1", "]", ")", ")", "\n", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'re'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'re'", "]", "[", "1", "]", ")", ")", "\n", "\n", "", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'f1'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'f1'", "]", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'Rels S-pr'", ")", "\n", "to_ret", ".", "append", "(", "'Rels S-re'", ")", "\n", "", "to_ret", ".", "append", "(", "'Rels S-f1'", ")", "\n", "\n", "", "if", "not", "only_title", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'pr'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'pr'", "]", "[", "1", "]", ")", ")", "\n", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'re'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'re'", "]", "[", "1", "]", ")", ")", "\n", "\n", "", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'f1'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'relations'", "]", "[", "'rels_hard'", "]", "[", "'f1'", "]", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'Rels H-pr'", ")", "\n", "to_ret", ".", "append", "(", "'Rels H-re'", ")", "\n", "", "to_ret", ".", "append", "(", "'Rels H-f1'", ")", "\n", "\n", "", "", "if", "'Linking'", "in", "tasks_to_report_on", ":", "\n", "\n", "# if not only_title:", "\n", "#     if not only_f1:", "\n", "#         to_ret.append('{:0.4f}+-{:0.4f}'.format(experiment_results['links']['links-links']['pr'][0],", "\n", "#                                                 experiment_results['links']['links-links']['pr'][1]))", "\n", "#         to_ret.append('{:0.4f}+-{:0.4f}'.format(experiment_results['links']['links-links']['re'][0],", "\n", "#                                                 experiment_results['links']['links-links']['re'][1]))", "\n", "#", "\n", "#     to_ret.append('{:0.4f}+-{:0.4f}'.format(experiment_results['links']['links-links']['f1'][0],", "\n", "#                                             experiment_results['links']['links-links']['f1'][1]))", "\n", "# else:", "\n", "#     if not only_f1:", "\n", "#         to_ret.append('Pr Links-links-from-mention')", "\n", "#         to_ret.append('Re Links-links-from-mention')", "\n", "#     to_ret.append('F1 Links-links-from-mention')", "\n", "\n", "        ", "if", "not", "only_title", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'links'", "]", "[", "'links-links-from-ent'", "]", "[", "'pr'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'links'", "]", "[", "'links-links-from-ent'", "]", "[", "'pr'", "]", "[", "1", "]", ")", ")", "\n", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'links'", "]", "[", "'links-links-from-ent'", "]", "[", "'re'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'links'", "]", "[", "'links-links-from-ent'", "]", "[", "'re'", "]", "[", "1", "]", ")", ")", "\n", "\n", "", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'links'", "]", "[", "'links-links-from-ent'", "]", "[", "'f1'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'links'", "]", "[", "'links-links-from-ent'", "]", "[", "'f1'", "]", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'Pr Links-links-from-ent'", ")", "\n", "to_ret", ".", "append", "(", "'Re Links-links-from-ent'", ")", "\n", "", "to_ret", ".", "append", "(", "'F1 Links-links-from-ent'", ")", "\n", "\n", "", "if", "not", "only_title", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'links'", "]", "[", "'links-links-hard'", "]", "[", "'pr'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'links'", "]", "[", "'links-links-hard'", "]", "[", "'pr'", "]", "[", "1", "]", ")", ")", "\n", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'links'", "]", "[", "'links-links-hard'", "]", "[", "'re'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'links'", "]", "[", "'links-links-hard'", "]", "[", "'re'", "]", "[", "1", "]", ")", ")", "\n", "\n", "", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'links'", "]", "[", "'links-links-hard'", "]", "[", "'f1'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'links'", "]", "[", "'links-links-hard'", "]", "[", "'f1'", "]", "[", "1", "]", ")", ")", "\n", "\n", "", "else", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'Pr Links-links-hard'", ")", "\n", "to_ret", ".", "append", "(", "'Re Links-links-hard'", ")", "\n", "", "to_ret", ".", "append", "(", "'F1 Links-links-hard'", ")", "\n", "\n", "", "if", "not", "only_title", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'links'", "]", "[", "'links-links-soft'", "]", "[", "'pr'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'links'", "]", "[", "'links-links-soft'", "]", "[", "'pr'", "]", "[", "1", "]", ")", ")", "\n", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'links'", "]", "[", "'links-links-soft'", "]", "[", "'re'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'links'", "]", "[", "'links-links-soft'", "]", "[", "'re'", "]", "[", "1", "]", ")", ")", "\n", "\n", "", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'links'", "]", "[", "'links-links-soft'", "]", "[", "'f1'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'links'", "]", "[", "'links-links-soft'", "]", "[", "'f1'", "]", "[", "1", "]", ")", ")", "\n", "\n", "", "else", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'Pr Links-links-soft'", ")", "\n", "to_ret", ".", "append", "(", "'Re Links-links-soft'", ")", "\n", "", "to_ret", ".", "append", "(", "'F1 Links-links-soft'", ")", "\n", "\n", "", "if", "not", "only_title", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'links'", "]", "[", "'links-links-mentionsoft'", "]", "[", "'pr'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'links'", "]", "[", "'links-links-mentionsoft'", "]", "[", "'pr'", "]", "[", "\n", "1", "]", ")", ")", "\n", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'links'", "]", "[", "'links-links-mentionsoft'", "]", "[", "'re'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'links'", "]", "[", "'links-links-mentionsoft'", "]", "[", "'re'", "]", "[", "\n", "1", "]", ")", ")", "\n", "\n", "", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'links'", "]", "[", "'links-links-mentionsoft'", "]", "[", "'f1'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'links'", "]", "[", "'links-links-mentionsoft'", "]", "[", "'f1'", "]", "[", "1", "]", ")", ")", "\n", "\n", "", "else", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'Pr Links-links-mentionsoft'", ")", "\n", "to_ret", ".", "append", "(", "'Re Links-links-mentionsoft'", ")", "\n", "", "to_ret", ".", "append", "(", "'F1 Links-links-mentionsoft'", ")", "\n", "\n", "# if not only_title:", "\n", "#     to_ret.append(", "\n", "#         '{:0.4f}+-{:0.4f}'.format(experiment_results['links']['links-accuracy']['acc_no_candidates'][0],", "\n", "#                                   experiment_results['links']['links-accuracy']['acc_no_candidates'][1]))", "\n", "# else:", "\n", "#     to_ret.append('Acc-link (NO candidates)')", "\n", "\n", "", "if", "not", "only_title", ":", "\n", "            ", "to_ret", ".", "append", "(", "\n", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "\n", "experiment_results", "[", "'links'", "]", "[", "'links-accuracy-from-ent'", "]", "[", "'acc_no_candidates'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'links'", "]", "[", "'links-accuracy-from-ent'", "]", "[", "'acc_no_candidates'", "]", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "to_ret", ".", "append", "(", "'Acc-link-from-ent (NO candidates)'", ")", "\n", "\n", "", "", "if", "'Coref'", "in", "tasks_to_report_on", ":", "\n", "        ", "if", "not", "only_title", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'coref'", "]", "[", "'coref_avg'", "]", "[", "'pr'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'coref'", "]", "[", "'coref_avg'", "]", "[", "'pr'", "]", "[", "1", "]", ")", ")", "\n", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'coref'", "]", "[", "'coref_avg'", "]", "[", "'re'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'coref'", "]", "[", "'coref_avg'", "]", "[", "'re'", "]", "[", "1", "]", ")", ")", "\n", "\n", "", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'coref'", "]", "[", "'coref_avg'", "]", "[", "'f1'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'coref'", "]", "[", "'coref_avg'", "]", "[", "'f1'", "]", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'AVG pr (coref)'", ")", "\n", "to_ret", ".", "append", "(", "'AVG re (coref)'", ")", "\n", "", "to_ret", ".", "append", "(", "'AVG f1 (coref)'", ")", "\n", "\n", "", "if", "not", "only_title", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'coref'", "]", "[", "'muc'", "]", "[", "'pr'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'coref'", "]", "[", "'muc'", "]", "[", "'pr'", "]", "[", "1", "]", ")", ")", "\n", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'coref'", "]", "[", "'muc'", "]", "[", "'re'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'coref'", "]", "[", "'muc'", "]", "[", "'re'", "]", "[", "1", "]", ")", ")", "\n", "\n", "", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'coref'", "]", "[", "'muc'", "]", "[", "'f1'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'coref'", "]", "[", "'muc'", "]", "[", "'f1'", "]", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'MUC pr'", ")", "\n", "to_ret", ".", "append", "(", "'MUC re'", ")", "\n", "", "to_ret", ".", "append", "(", "'MUC f1'", ")", "\n", "\n", "# if not only_title:", "\n", "#     if not only_f1:", "\n", "#         to_ret.append('{:0.4f}+-{:0.4f}'.format(experiment_results['coref']['ceafm_singleton']['pr'][0],", "\n", "#                                                 experiment_results['coref']['ceafm_singleton']['pr'][1]))", "\n", "#         to_ret.append('{:0.4f}+-{:0.4f}'.format(experiment_results['coref']['ceafm_singleton']['re'][0],", "\n", "#                                                 experiment_results['coref']['ceafm_singleton']['re'][1]))", "\n", "#", "\n", "#     to_ret.append('{:0.4f}+-{:0.4f}'.format(experiment_results['coref']['ceafm_singleton']['f1'][0],", "\n", "#                                             experiment_results['coref']['ceafm_singleton']['f1'][1]))", "\n", "# else:", "\n", "#     if not only_f1:", "\n", "#         to_ret.append('CEAFm pr')", "\n", "#         to_ret.append('CEAFm re')", "\n", "#     to_ret.append('CEAFm f1')", "\n", "\n", "", "if", "not", "only_title", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'coref'", "]", "[", "'ceafe_singleton'", "]", "[", "'pr'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'coref'", "]", "[", "'ceafe_singleton'", "]", "[", "'pr'", "]", "[", "1", "]", ")", ")", "\n", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'coref'", "]", "[", "'ceafe_singleton'", "]", "[", "'re'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'coref'", "]", "[", "'ceafe_singleton'", "]", "[", "'re'", "]", "[", "1", "]", ")", ")", "\n", "\n", "", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'coref'", "]", "[", "'ceafe_singleton'", "]", "[", "'f1'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'coref'", "]", "[", "'ceafe_singleton'", "]", "[", "'f1'", "]", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'CEAFe pr'", ")", "\n", "to_ret", ".", "append", "(", "'CEAFe re'", ")", "\n", "", "to_ret", ".", "append", "(", "'CEAFe f1'", ")", "\n", "\n", "", "if", "not", "only_title", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "\n", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'coref'", "]", "[", "'b_cubed_singleton_men_conll'", "]", "[", "'pr'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'coref'", "]", "[", "'b_cubed_singleton_men_conll'", "]", "[", "'pr'", "]", "[", "\n", "1", "]", ")", ")", "\n", "to_ret", ".", "append", "(", "\n", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'coref'", "]", "[", "'b_cubed_singleton_men_conll'", "]", "[", "'re'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'coref'", "]", "[", "'b_cubed_singleton_men_conll'", "]", "[", "'re'", "]", "[", "\n", "1", "]", ")", ")", "\n", "\n", "", "to_ret", ".", "append", "(", "'{:0.4f}+-{:0.4f}'", ".", "format", "(", "experiment_results", "[", "'coref'", "]", "[", "'b_cubed_singleton_men_conll'", "]", "[", "'f1'", "]", "[", "0", "]", ",", "\n", "experiment_results", "[", "'coref'", "]", "[", "'b_cubed_singleton_men_conll'", "]", "[", "'f1'", "]", "[", "\n", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "only_f1", ":", "\n", "                ", "to_ret", ".", "append", "(", "'B-3 men conll pr'", ")", "\n", "to_ret", ".", "append", "(", "'B-3 men conll re'", ")", "\n", "", "to_ret", ".", "append", "(", "'B-3 men conll f1'", ")", "\n", "\n", "# if not only_title:", "\n", "#     if not only_f1:", "\n", "#         to_ret.append('{:0.4f}+-{:0.4f}'.format(experiment_results['coref']['b_cubed_singleton_ent']['pr'][0],", "\n", "#                                                 experiment_results['coref']['b_cubed_singleton_ent']['pr'][1]))", "\n", "#         to_ret.append('{:0.4f}+-{:0.4f}'.format(experiment_results['coref']['b_cubed_singleton_ent']['re'][0],", "\n", "#                                                 experiment_results['coref']['b_cubed_singleton_ent']['re'][1]))", "\n", "#", "\n", "#     to_ret.append('{:0.4f}+-{:0.4f}'.format(experiment_results['coref']['b_cubed_singleton_ent']['f1'][0],", "\n", "#                                             experiment_results['coref']['b_cubed_singleton_ent']['f1'][1]))", "\n", "# else:", "\n", "#     if not only_f1:", "\n", "#         to_ret.append('B-3 ent pr')", "\n", "#         to_ret.append('B-3 ent re')", "\n", "#     to_ret.append('B-3 ent f1')", "\n", "\n", "# if not only_title:", "\n", "#     if not only_f1:", "\n", "#         to_ret.append('{:0.4f}+-{:0.4f}'.format(experiment_results['coref']['ceafe_not_singleton']['pr'][0],", "\n", "#                                                 experiment_results['coref']['ceafe_not_singleton']['pr'][1]))", "\n", "#         to_ret.append('{:0.4f}+-{:0.4f}'.format(experiment_results['coref']['ceafe_not_singleton']['re'][0],", "\n", "#                                                 experiment_results['coref']['ceafe_not_singleton']['re'][1]))", "\n", "#", "\n", "#     to_ret.append('{:0.4f}+-{:0.4f}'.format(experiment_results['coref']['ceafe_not_singleton']['f1'][0],", "\n", "#                                             experiment_results['coref']['ceafe_not_singleton']['f1'][1]))", "\n", "# else:", "\n", "#     if not only_f1:", "\n", "#         to_ret.append('CEAFe not singleton pr')", "\n", "#         to_ret.append('CEAFe not singleton re')", "\n", "#     to_ret.append('CEAFe not singleton f1')", "\n", "#", "\n", "# if not only_title:", "\n", "#     if not only_f1:", "\n", "#         to_ret.append('{:0.4f}+-{:0.4f}'.format(experiment_results['coref']['b_cubed_not_singleton']['pr'][0],", "\n", "#                                                 experiment_results['coref']['b_cubed_not_singleton']['pr'][1]))", "\n", "#         to_ret.append('{:0.4f}+-{:0.4f}'.format(experiment_results['coref']['b_cubed_not_singleton']['re'][0],", "\n", "#                                                 experiment_results['coref']['b_cubed_not_singleton']['re'][1]))", "\n", "#", "\n", "#     to_ret.append('{:0.4f}+-{:0.4f}'.format(experiment_results['coref']['b_cubed_not_singleton']['f1'][0],", "\n", "#                                             experiment_results['coref']['b_cubed_not_singleton']['f1'][1]))", "\n", "# else:", "\n", "#     if not only_f1:", "\n", "#         to_ret.append('B-3 not singleton pr')", "\n", "#         to_ret.append('B-3 not singleton re')", "\n", "#     to_ret.append('B-3 not singleton f1')", "\n", "\n", "", "", "return", "to_ret", "\n", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.relations.latent.LossRelationsLatentX.__init__": [[84, 98], ["torch.Module.__init__", "len", "print", "len"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "config", ",", "labels", ")", ":", "\n", "        ", "super", "(", "LossRelationsLatentX", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "num_relations", "=", "len", "(", "labels", ")", "\n", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "enabled", "=", "config", "[", "'enabled'", "]", "\n", "self", ".", "weight", "=", "config", "[", "'weight'", "]", "/", "len", "(", "self", ".", "labels", ")", "if", "config", "[", "'normalize'", "]", "else", "config", "[", "'weight'", "]", "\n", "self", ".", "debug", "=", "config", "[", "'debug'", "]", "\n", "\n", "print", "(", "\"LossRelationsLatentX:\"", ",", "config", "[", "'mapping'", "]", ",", "config", "[", "'normalize'", "]", ")", "\n", "self", ".", "mapping_binary", "=", "config", "[", "'mapping'", "]", "==", "'binary'", "\n", "self", ".", "mapping_gold", "=", "config", "[", "'mapping'", "]", "==", "'gold'", "\n", "self", ".", "mapping_pred", "=", "config", "[", "'mapping'", "]", "==", "'pred'", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.relations.latent.LossRelationsLatentX.forward": [[99, 171], ["modules.relations.misc.create_relation_targets_2", "create_mapping().to", "len", "create_mapping().to", "latent.sum_scores", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "latent.decode_relations_new", "latent.create_mapping", "latent.filter_gold_clusters", "create_mapping().to", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "create_mapping().to.double", "torch.log", "torch.log", "torch.log", "torch.log", "len", "latent.sum_scores", "latent.decode_relations_new", "latent.create_mapping", "BaseException", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "loss.sum", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "zip", "len", "zip", "latent.create_mapping", "latent.sum_scores", "latent.sum_scores", "mention_scores.double", "torch.expm1", "torch.expm1", "torch.expm1", "torch.expm1", "zip", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "mention_scores.size"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.relations.misc.create_relation_targets_2", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.relations.latent.sum_scores", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.relations.latent.decode_relations_new", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.relations.latent.create_mapping", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.relations.latent.filter_gold_clusters", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.relations.latent.sum_scores", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.relations.latent.decode_relations_new", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.relations.latent.create_mapping", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.relations.latent.create_mapping", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.relations.latent.sum_scores", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.relations.latent.sum_scores"], ["", "def", "forward", "(", "self", ",", "relation_filtered", ",", "mention_scores", ",", "relations", ",", "coref", ",", "predict", "=", "False", ")", ":", "\n", "        ", "output", "=", "{", "}", "\n", "\n", "span_lengths", "=", "relation_filtered", "[", "'span_lengths'", "]", "\n", "mention_mask", "=", "relation_filtered", "[", "'square_mask'", "]", "\n", "pred_spans", "=", "relation_filtered", "[", "'spans'", "]", "\n", "mention_targets", "=", "create_relation_targets_2", "(", "pred_spans", ",", "relations", ",", "len", "(", "self", ".", "labels", ")", ",", "span_lengths", ")", "\n", "\n", "coref_pred", "=", "coref", "[", "'pred'", "]", "\n", "mapping_pred", "=", "create_mapping", "(", "pred_spans", ",", "coref_pred", ")", ".", "to", "(", "mention_scores", ".", "device", ")", "\n", "\n", "if", "self", ".", "mapping_binary", ":", "\n", "            ", "singletons", "=", "[", "[", "[", "span", "]", "for", "span", "in", "spans", "]", "for", "spans", "in", "pred_spans", "]", "\n", "mapping_loss", "=", "create_mapping", "(", "pred_spans", ",", "singletons", ")", ".", "to", "(", "mention_scores", ".", "device", ")", "\n", "", "elif", "self", ".", "mapping_gold", ":", "\n", "            ", "clusters", "=", "filter_gold_clusters", "(", "coref", "[", "'gold'", "]", ",", "pred_spans", ")", "\n", "mapping_loss", "=", "create_mapping", "(", "pred_spans", ",", "clusters", ")", ".", "to", "(", "mention_scores", ".", "device", ")", "\n", "", "elif", "self", ".", "mapping_pred", ":", "\n", "            ", "mapping_loss", "=", "mapping_pred", "\n", "", "else", ":", "\n", "            ", "raise", "BaseException", "(", "'no such mapping'", ")", "\n", "\n", "# TODO: check if mapping is correct in case many negative spans are included", "\n", "# print('sum:', mapping_loss.sum(-1).max().item())", "\n", "\n", "", "if", "mention_targets", "is", "not", "None", ":", "\n", "            ", "concept_targets", "=", "(", "sum_scores", "(", "mention_targets", ",", "mapping_loss", ")", ">", "0", ")", ".", "float", "(", ")", "\n", "\n", "mask", "=", "(", "sum_scores", "(", "torch", ".", "ones", "(", "mention_scores", ".", "size", "(", ")", ")", ".", "cuda", "(", ")", ",", "mapping_loss", ")", ">", "0", ")", ".", "float", "(", ")", "\n", "\n", "mention_logits", "=", "-", "torch", ".", "log1p", "(", "\n", "torch", ".", "exp", "(", "mention_scores", ".", "double", "(", ")", ")", ")", "# WARNING: should be unstable but works ?!", "\n", "# mention_logits = F.logsigmoid(-mention_scores)", "\n", "# print('nan:', torch.isnan(mention_logits).any()) ", "\n", "\n", "concept_logits", "=", "sum_scores", "(", "mention_logits", ",", "mapping_loss", ".", "double", "(", ")", ")", "\n", "concept_logits", "=", "concept_logits", "+", "(", "1.0", "-", "mask", ")", "*", "-", "10000", "\n", "\n", "# TODO: is this stable?", "\n", "loss", "=", "concept_targets", "*", "torch", ".", "log", "(", "-", "torch", ".", "expm1", "(", "concept_logits", "-", "1e-100", ")", ")", "\n", "loss", "+=", "(", "1", "-", "concept_targets", ")", "*", "concept_logits", "\n", "loss", "*=", "mask", "\n", "\n", "obj", "=", "-", "self", ".", "weight", "*", "loss", ".", "sum", "(", ")", "/", "self", ".", "num_relations", "\n", "", "else", ":", "\n", "            ", "obj", "=", "torch", ".", "tensor", "(", "0.0", ")", ".", "cuda", "(", ")", "\n", "\n", "", "output", "[", "'loss'", "]", "=", "obj", "\n", "\n", "if", "mention_targets", "is", "not", "None", ":", "\n", "            ", "concept_lengths", "=", "[", "len", "(", "x", ")", "for", "x", "in", "coref_pred", "]", "\n", "mytargets", "=", "decode_relations_new", "(", "concept_targets", ",", "concept_lengths", ",", "self", ".", "labels", ")", "\n", "output", "[", "'target'", "]", "=", "[", "[", "(", "clusters", "[", "src", "]", ",", "clusters", "[", "dst", "]", ",", "rel", ")", "for", "src", ",", "dst", ",", "rel", "in", "triples", "]", "for", "clusters", ",", "triples", "\n", "in", "zip", "(", "coref_pred", ",", "mytargets", ")", "]", "\n", "\n", "", "if", "predict", ":", "\n", "            ", "if", "mention_scores", "is", "None", ":", "\n", "                ", "output", "[", "'pred'", "]", "=", "[", "[", "]", "for", "x", "in", "coref_pred", "]", "\n", "", "else", ":", "\n", "                ", "pred_mentions", "=", "(", "mention_scores", ">", "0", ")", ".", "float", "(", ")", "\n", "pred_concepts", "=", "sum_scores", "(", "pred_mentions", ",", "mapping_pred", ")", "\n", "pred_concepts", "=", "(", "pred_concepts", ">", "0", ")", ".", "float", "(", ")", "\n", "\n", "concept_lengths", "=", "[", "len", "(", "x", ")", "for", "x", "in", "coref_pred", "]", "\n", "predictions", "=", "decode_relations_new", "(", "pred_concepts", ",", "concept_lengths", ",", "self", ".", "labels", ")", "\n", "output", "[", "'pred'", "]", "=", "[", "[", "(", "clusters", "[", "src", "]", ",", "clusters", "[", "dst", "]", ",", "rel", ")", "for", "src", ",", "dst", ",", "rel", "in", "triples", "]", "for", "\n", "clusters", ",", "triples", "in", "zip", "(", "coref_pred", ",", "predictions", ")", "]", "\n", "\n", "", "output", "[", "'gold'", "]", "=", "[", "[", "(", "clusters", "[", "src", "]", ",", "clusters", "[", "dst", "]", ",", "self", ".", "labels", "[", "rel", "]", ")", "for", "src", ",", "dst", ",", "rel", "in", "triples", "]", "for", "\n", "clusters", ",", "triples", "in", "zip", "(", "relations", "[", "'gold_clusters2'", "]", ",", "relations", "[", "'gold_relations'", "]", ")", "]", "\n", "\n", "", "return", "output", "[", "'loss'", "]", ",", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.relations.latent.LossRelationsLatentX.create_metrics": [[172, 175], ["metrics.relations.MetricConceptRelationSoftF1", "metrics.misc.MetricObjective"], "methods", ["None"], ["", "def", "create_metrics", "(", "self", ")", ":", "\n", "        ", "return", "[", "MetricConceptRelationSoftF1", "(", "self", ".", "name", ",", "self", ".", "labels", ",", "verbose", "=", "self", ".", "debug", ")", ",", "\n", "MetricObjective", "(", "self", ".", "name", ")", "]", "if", "self", ".", "enabled", "else", "[", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.relations.latent.create_mapping": [[9, 33], ["len", "max", "max", "torch.zeros", "torch.zeros", "enumerate", "zip", "enumerate", "enumerate", "len", "len"], "function", ["None"], ["def", "create_mapping", "(", "spans", ",", "clusters", ")", ":", "\n", "    ", "\"\"\"\n\n    :param spans:\n    :param clusters:\n    :return:\n    \"\"\"", "\n", "num_batch", "=", "len", "(", "spans", ")", "\n", "max_spans", "=", "max", "(", "[", "len", "(", "x", ")", "for", "x", "in", "spans", "]", ")", "\n", "max_concepts", "=", "max", "(", "[", "len", "(", "x", ")", "for", "x", "in", "clusters", "]", ")", "\n", "\n", "mapping", "=", "torch", ".", "zeros", "(", "num_batch", ",", "max_concepts", ",", "max_spans", ")", "\n", "\n", "for", "batch", ",", "(", "myspans", ",", "myclusters", ")", "in", "enumerate", "(", "zip", "(", "spans", ",", "clusters", ")", ")", ":", "\n", "        ", "span2index", "=", "{", "}", "\n", "for", "idx", ",", "span", "in", "enumerate", "(", "myspans", ")", ":", "\n", "            ", "span2index", "[", "span", "]", "=", "idx", "\n", "\n", "", "for", "idx", ",", "cluster", "in", "enumerate", "(", "myclusters", ")", ":", "\n", "            ", "for", "span", "in", "cluster", ":", "\n", "                ", "if", "span", "in", "span2index", ":", "# in case relation pruner != coref pruner", "\n", "                    ", "mapping", "[", "batch", ",", "idx", ",", "span2index", "[", "span", "]", "]", "=", "1.0", "\n", "\n", "", "", "", "", "return", "mapping", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.relations.latent.sum_scores": [[35, 49], ["u.size", "u.unsqueeze().expand", "torch.matmul", "torch.matmul", "torch.matmul.view", "torch.matmul", "torch.matmul", "q.view.view", "scores.dim", "BaseException", "u.dim", "BaseException", "scores.size", "u.size", "BaseException", "u.unsqueeze", "torch.matmul.size", "q.view.size", "torch.matmul.size"], "function", ["None"], ["", "def", "sum_scores", "(", "scores", ",", "u", ")", ":", "\n", "    ", "if", "scores", ".", "dim", "(", ")", "!=", "4", ":", "\n", "        ", "raise", "BaseException", "(", "\"scores is not a 4-dimensional tensor\"", ")", "\n", "", "if", "u", ".", "dim", "(", ")", "!=", "3", ":", "\n", "        ", "raise", "BaseException", "(", "\"mapping is not a 3-dimensional tensor\"", ")", "\n", "", "if", "scores", ".", "size", "(", "0", ")", "!=", "u", ".", "size", "(", "0", ")", ":", "\n", "        ", "raise", "BaseException", "(", "\"batch size doesn't match\"", ")", "\n", "", "num_batch", ",", "num_mentions", ",", "num_concepts", "=", "u", ".", "size", "(", ")", "# u.shape: [1,8,14]", "\n", "v", "=", "u", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "num_batch", ",", "num_concepts", ",", "num_mentions", ",", "num_concepts", ")", "# v.shape: [1, 14, 8, 14]", "\n", "o", "=", "torch", ".", "matmul", "(", "v", ",", "scores", ")", "# scores.shape: [1, 14, 14, 3] , o.shape: [1, 14, 8, 3]", "\n", "p", "=", "o", ".", "view", "(", "o", ".", "size", "(", ")", "[", "0", ":", "2", "]", "+", "(", "-", "1", ",", ")", ")", "# p.shape: [1, 14, 24]", "\n", "q", "=", "torch", ".", "matmul", "(", "u", ",", "p", ")", "# q.shape: [1, 8, 24]", "\n", "q", "=", "q", ".", "view", "(", "q", ".", "size", "(", ")", "[", "0", ":", "2", "]", "+", "o", ".", "size", "(", ")", "[", "2", ":", "]", ")", "# q.shape: 1, 8, 8, 3", "\n", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.relations.latent.decode_relations_new": [[52, 60], ["enumerate", "torch.nonzero().tolist", "torch.nonzero().tolist", "relations.append", "rels.append", "torch.nonzero", "torch.nonzero"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist"], ["", "def", "decode_relations_new", "(", "targets", ",", "lengths", ",", "labels", ")", ":", "\n", "    ", "relations", "=", "[", "]", "\n", "for", "b", ",", "length", "in", "enumerate", "(", "lengths", ")", ":", "\n", "        ", "rels", "=", "[", "]", "\n", "for", "src", ",", "dst", ",", "rel", "in", "torch", ".", "nonzero", "(", "targets", "[", "b", ",", "0", ":", "length", ",", "0", ":", "length", ",", ":", "]", ">", "0", ")", ".", "tolist", "(", ")", ":", "\n", "            ", "rels", ".", "append", "(", "(", "src", ",", "dst", ",", "labels", "[", "rel", "]", ")", ")", "\n", "", "relations", ".", "append", "(", "rels", ")", "\n", "", "return", "relations", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.relations.latent.filter_gold_clusters": [[62, 78], ["zip", "set", "set", "clusters_out.extend", "output.append", "set.add"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add"], ["", "def", "filter_gold_clusters", "(", "gold_clusters", ",", "pred_spans", ")", ":", "\n", "    ", "output", "=", "[", "]", "\n", "for", "clusters_in", ",", "spans", "in", "zip", "(", "gold_clusters", ",", "pred_spans", ")", ":", "\n", "        ", "p_spans", "=", "set", "(", "spans", ")", "\n", "clusters_out", "=", "[", "[", "span", "for", "span", "in", "cluster", "if", "span", "in", "p_spans", "]", "for", "cluster", "in", "clusters_in", "]", "\n", "\n", "# is this needed?", "\n", "g_spans", "=", "set", "(", ")", "\n", "for", "cluster", "in", "clusters_in", ":", "\n", "            ", "for", "span", "in", "cluster", ":", "\n", "                ", "g_spans", ".", "add", "(", "span", ")", "\n", "", "", "clusters_out", ".", "extend", "(", "[", "[", "span", "]", "for", "span", "in", "p_spans", "-", "g_spans", "]", ")", "\n", "\n", "output", ".", "append", "(", "clusters_out", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.relations.binary.LossRelationsX.__init__": [[12, 23], ["torch.Module.__init__", "len", "torch.BCEWithLogitsLoss", "print", "config.get", "len"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "config", ",", "labels", ")", ":", "\n", "        ", "super", "(", "LossRelationsX", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "num_relations", "=", "len", "(", "labels", ")", "\n", "self", ".", "loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", "reduction", "=", "'none'", ")", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "enabled", "=", "config", "[", "'enabled'", "]", "\n", "self", ".", "weight", "=", "config", "[", "'weight'", "]", "/", "len", "(", "self", ".", "labels", ")", "if", "config", ".", "get", "(", "'normalize'", ",", "True", ")", "else", "config", "[", "'weight'", "]", "\n", "self", ".", "debug", "=", "config", "[", "'debug'", "]", "\n", "print", "(", "\"LossRelationsX: weight={} (fix-norm)\"", ".", "format", "(", "self", ".", "weight", ")", ")", "\n", "self", ".", "evaluate_mentionwise_predictions", "=", "config", "[", "'mentionwise'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.relations.binary.LossRelationsX.forward": [[24, 89], ["modules.relations.misc.create_relation_targets_2", "modules.relations.latent.create_mapping().to", "relations.get", "len", "modules.relations.latent.decode_relations_new", "modules.relations.latent.create_mapping", "len", "modules.relations.latent.sum_scores", "modules.relations.latent.decode_relations_new", "modules.relations.basic.decode_span_relations", "modules.relations.basic.gold_cluster_to_span_relations", "modules.relations.latent.sum_scores", "zip", "len", "zip", "binary.LossRelationsX.loss", "mention_mask.unsqueeze", "zip"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.relations.misc.create_relation_targets_2", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.relations.latent.decode_relations_new", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.relations.latent.create_mapping", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.relations.latent.sum_scores", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.relations.latent.decode_relations_new", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.relations.basic.decode_span_relations", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.relations.basic.gold_cluster_to_span_relations", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.relations.latent.sum_scores"], ["", "def", "forward", "(", "self", ",", "relation_filtered", ",", "mention_scores", ",", "relations", ",", "coref", ",", "predict", "=", "False", ")", ":", "\n", "        ", "output", "=", "{", "}", "\n", "\n", "span_lengths", "=", "relation_filtered", "[", "'span_lengths'", "]", "\n", "mention_mask", "=", "relation_filtered", "[", "'square_mask'", "]", "\n", "pred_spans", "=", "relation_filtered", "[", "'spans'", "]", "\n", "\n", "if", "self", ".", "enabled", ":", "\n", "            ", "mention_targets", "=", "create_relation_targets_2", "(", "pred_spans", ",", "relations", ",", "len", "(", "self", ".", "labels", ")", ",", "span_lengths", ")", "\n", "obj", "=", "self", ".", "weight", "*", "(", "self", ".", "loss", "(", "mention_scores", ",", "mention_targets", ")", "*", "mention_mask", ".", "unsqueeze", "(", "\n", "-", "1", ")", ")", ".", "sum", "(", ")", "# / self.num_relations            # IS THIS A BUG??", "\n", "", "else", ":", "\n", "# obj = torch.tensor(0.0).cuda()", "\n", "            ", "obj", "=", "0", "# (trainer skips minibatch if zero)", "\n", "\n", "", "output", "[", "'loss'", "]", "=", "obj", "\n", "\n", "if", "self", ".", "enabled", ":", "\n", "            ", "mapping", "=", "create_mapping", "(", "pred_spans", ",", "coref", "[", "'pred'", "]", ")", ".", "to", "(", "mention_scores", ".", "device", ")", "\n", "concept_targets", "=", "(", "sum_scores", "(", "mention_targets", ",", "mapping", ")", ">", "0", ")", ".", "float", "(", ")", "\n", "\n", "# only for debugging", "\n", "if", "mention_targets", "is", "not", "None", ":", "\n", "                ", "concept_lengths", "=", "[", "len", "(", "x", ")", "for", "x", "in", "coref", "[", "'pred'", "]", "]", "\n", "mytargets", "=", "decode_relations_new", "(", "concept_targets", ",", "concept_lengths", ",", "self", ".", "labels", ")", "\n", "output", "[", "'target'", "]", "=", "[", "[", "(", "clusters", "[", "src", "]", ",", "clusters", "[", "dst", "]", ",", "rel", ")", "for", "src", ",", "dst", ",", "rel", "in", "triples", "]", "for", "\n", "clusters", ",", "triples", "in", "zip", "(", "coref", "[", "'pred'", "]", ",", "mytargets", ")", "]", "\n", "\n", "", "if", "predict", ":", "\n", "                ", "if", "mention_scores", "is", "None", ":", "\n", "                    ", "output", "[", "'pred'", "]", "=", "[", "[", "]", "for", "x", "in", "coref", "[", "'pred'", "]", "]", "\n", "", "else", ":", "\n", "# print('min:', mention_scores.min().item())", "\n", "# print('max:', mention_scores.max().item())", "\n", "                    ", "pred_mentions", "=", "(", "mention_scores", ">", "0", ")", ".", "float", "(", ")", "\n", "pred_concepts", "=", "sum_scores", "(", "pred_mentions", ",", "mapping", ")", "\n", "pred_concepts", "=", "(", "pred_concepts", ">", "0", ")", ".", "float", "(", ")", "\n", "\n", "concept_lengths", "=", "[", "len", "(", "x", ")", "for", "x", "in", "coref", "[", "'pred'", "]", "]", "\n", "predictions", "=", "decode_relations_new", "(", "pred_concepts", ",", "concept_lengths", ",", "self", ".", "labels", ")", "\n", "output", "[", "'pred'", "]", "=", "[", "[", "(", "clusters", "[", "src", "]", ",", "clusters", "[", "dst", "]", ",", "rel", ")", "for", "src", ",", "dst", ",", "rel", "in", "triples", "]", "for", "\n", "clusters", ",", "triples", "in", "zip", "(", "coref", "[", "'pred'", "]", ",", "predictions", ")", "]", "\n", "\n", "", "output", "[", "'gold'", "]", "=", "[", "[", "(", "clusters", "[", "src", "]", ",", "clusters", "[", "dst", "]", ",", "self", ".", "labels", "[", "rel", "]", ")", "for", "src", ",", "dst", ",", "rel", "in", "triples", "]", "for", "\n", "clusters", ",", "triples", "in", "zip", "(", "relations", "[", "'gold_clusters2'", "]", ",", "relations", "[", "'gold_relations'", "]", ")", "]", "\n", "\n", "if", "self", ".", "evaluate_mentionwise_predictions", ":", "\n", "                    ", "output", "[", "'span-rel-pred'", "]", "=", "decode_span_relations", "(", "mention_scores", ",", "pred_spans", ",", "self", ".", "labels", ")", "\n", "output", "[", "'span-rel-gold'", "]", "=", "gold_cluster_to_span_relations", "(", "relations", "[", "'gold_clusters2'", "]", ",", "\n", "relations", "[", "'gold_relations'", "]", ",", "self", ".", "labels", ")", "\n", "", "else", ":", "\n", "                    ", "output", "[", "'span-rel-pred'", "]", "=", "[", "None", "for", "x", "in", "relations", "[", "'gold_relations'", "]", "]", "\n", "output", "[", "'span-rel-gold'", "]", "=", "[", "None", "for", "x", "in", "relations", "[", "'gold_relations'", "]", "]", "\n", "", "", "", "else", ":", "\n", "# when api_call, the no gold_relations is coming", "\n", "# if relations is None:", "\n", "#     gold_rels = []", "\n", "# else:", "\n", "            ", "gold_rels", "=", "relations", ".", "get", "(", "'gold_relations'", ")", "\n", "output", "[", "'pred'", "]", "=", "[", "None", "for", "x", "in", "gold_rels", "]", "\n", "output", "[", "'gold'", "]", "=", "[", "None", "for", "x", "in", "gold_rels", "]", "\n", "output", "[", "'span-rel-pred'", "]", "=", "[", "None", "for", "x", "in", "gold_rels", "]", "\n", "output", "[", "'span-rel-gold'", "]", "=", "[", "None", "for", "x", "in", "gold_rels", "]", "\n", "\n", "", "return", "output", "[", "'loss'", "]", ",", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.relations.binary.LossRelationsX.create_metrics": [[90, 104], ["metrics.relations.MetricConceptRelationSoftF1", "metrics.relations.MetricConceptRelationToMentionsF1", "metrics.misc.MetricObjective", "metrics.append", "metrics.relations.MetricSpanRelationF1x"], "methods", ["None"], ["", "def", "create_metrics", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "enabled", ":", "\n", "            ", "metrics", "=", "[", "\n", "MetricConceptRelationSoftF1", "(", "self", ".", "name", ",", "self", ".", "labels", ",", "verbose", "=", "self", ".", "debug", ")", ",", "\n", "MetricConceptRelationToMentionsF1", "(", "self", ".", "name", ",", "self", ".", "labels", ",", "verbose", "=", "self", ".", "debug", ")", ",", "\n", "MetricObjective", "(", "self", ".", "name", ")", "\n", "]", "\n", "if", "self", ".", "evaluate_mentionwise_predictions", ":", "\n", "                ", "metrics", ".", "append", "(", "\n", "MetricSpanRelationF1x", "(", "self", ".", "name", ",", "self", ".", "labels", ",", "verbose", "=", "self", ".", "debug", ")", "\n", ")", "\n", "", "return", "metrics", "\n", "", "else", ":", "\n", "            ", "return", "[", "]", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.relations.misc.create_relation_targets_2": [[4, 37], ["span_lengths.size", "span_lengths.max().item", "torch.zeros", "enumerate", "torch.zeros.to", "zip", "span_lengths.max", "len", "torch.LongTensor", "torch.LongTensor", "torch.zeros", "torch.ones", "torch.LongTensor.unsqueeze().expand().reshape", "torch.LongTensor.unsqueeze().expand().reshape", "torch.arange", "torch.arange.unsqueeze().expand().reshape", "torch.arange.unsqueeze().expand().reshape", "torch.LongTensor.size", "torch.LongTensor.size", "torch.LongTensor.size", "torch.LongTensor.size", "zip", "gold2index.get", "torch.LongTensor.unsqueeze().expand", "torch.LongTensor.unsqueeze().expand", "torch.arange.unsqueeze().expand", "torch.arange.unsqueeze().expand", "torch.LongTensor.unsqueeze", "torch.LongTensor.unsqueeze", "torch.arange.unsqueeze", "torch.arange.unsqueeze"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get"], ["\n", "class", "LayerNorm", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "hidden_size", ",", "eps", "=", "1e-12", ")", ":", "\n", "        ", "super", "(", "LayerNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "hidden_size", ")", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "hidden_size", ")", ")", "\n", "self", ".", "variance_epsilon", "=", "eps", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "u", "=", "x", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "s", "=", "(", "x", "-", "u", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "x", "=", "(", "x", "-", "u", ")", "/", "torch", ".", "sqrt", "(", "s", "+", "self", ".", "variance_epsilon", ")", "\n", "return", "self", ".", "weight", "*", "x", "+", "self", ".", "bias", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.relations.basic.TaskSpanRelations.__init__": [[36, 45], ["torch.Module.__init__", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "print", "config.get", "len"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "config", ",", "labels", ")", ":", "\n", "        ", "super", "(", "TaskSpanRelations", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", "reduction", "=", "'none'", ")", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "enabled", "=", "config", "[", "'enabled'", "]", "\n", "self", ".", "weight", "=", "config", "[", "'weight'", "]", "/", "len", "(", "self", ".", "labels", ")", "if", "config", ".", "get", "(", "'normalize'", ",", "True", ")", "else", "config", "[", "'weight'", "]", "\n", "self", ".", "debug", "=", "config", "[", "'debug'", "]", "\n", "print", "(", "\"TaskSpanRelations: weight={}\"", ".", "format", "(", "self", ".", "weight", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.relations.basic.TaskSpanRelations.forward": [[46, 75], ["modules.relations.misc.create_relation_targets_2", "basic.decode_span_relations", "basic.gold_cluster_to_span_relations", "len", "basic.TaskSpanRelations.loss", "mention_mask.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.relations.misc.create_relation_targets_2", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.relations.basic.decode_span_relations", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.relations.basic.gold_cluster_to_span_relations"], ["", "def", "forward", "(", "self", ",", "relation_filtered", ",", "mention_scores", ",", "relations", ",", "coref", ",", "predict", "=", "False", ")", ":", "\n", "        ", "output", "=", "{", "}", "\n", "\n", "span_lengths", "=", "relation_filtered", "[", "'span_lengths'", "]", "\n", "mention_mask", "=", "relation_filtered", "[", "'square_mask'", "]", "\n", "pred_spans", "=", "relation_filtered", "[", "'spans'", "]", "\n", "\n", "if", "self", ".", "enabled", ":", "\n", "            ", "mention_targets", "=", "create_relation_targets_2", "(", "pred_spans", ",", "relations", ",", "len", "(", "self", ".", "labels", ")", ",", "span_lengths", ")", "\n", "obj", "=", "self", ".", "weight", "*", "(", "self", ".", "loss", "(", "mention_scores", ",", "mention_targets", ")", "*", "mention_mask", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "sum", "(", ")", "\n", "\n", "output", "[", "'loss'", "]", "=", "obj", "\n", "\n", "output", "[", "'span-rel-pred'", "]", "=", "decode_span_relations", "(", "mention_scores", ",", "pred_spans", ",", "self", ".", "labels", ")", "\n", "output", "[", "'span-rel-gold'", "]", "=", "gold_cluster_to_span_relations", "(", "relations", "[", "'gold_clusters2'", "]", ",", "\n", "relations", "[", "'gold_relations'", "]", ",", "self", ".", "labels", ")", "\n", "\n", "output", "[", "'pred'", "]", "=", "[", "None", "for", "x", "in", "relations", "[", "'gold_relations'", "]", "]", "\n", "output", "[", "'gold'", "]", "=", "[", "None", "for", "x", "in", "relations", "[", "'gold_relations'", "]", "]", "\n", "", "else", ":", "\n", "            ", "output", "[", "'loss'", "]", "=", "0", "# (trainer skips minibatch if zero)", "\n", "\n", "output", "[", "'span-rel-pred'", "]", "=", "[", "None", "for", "x", "in", "relations", "[", "'gold_relations'", "]", "]", "\n", "output", "[", "'span-rel-gold'", "]", "=", "[", "None", "for", "x", "in", "relations", "[", "'gold_relations'", "]", "]", "\n", "\n", "output", "[", "'pred'", "]", "=", "[", "None", "for", "x", "in", "relations", "[", "'gold_relations'", "]", "]", "\n", "output", "[", "'gold'", "]", "=", "[", "None", "for", "x", "in", "relations", "[", "'gold_relations'", "]", "]", "\n", "\n", "", "return", "output", "[", "'loss'", "]", ",", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.relations.basic.TaskSpanRelations.create_metrics": [[76, 79], ["metrics.relations.MetricSpanRelationF1x", "metrics.misc.MetricObjective"], "methods", ["None"], ["", "def", "create_metrics", "(", "self", ")", ":", "\n", "        ", "return", "[", "MetricSpanRelationF1x", "(", "self", ".", "name", ",", "self", ".", "labels", ",", "verbose", "=", "self", ".", "debug", ")", ",", "\n", "MetricObjective", "(", "self", ".", "name", ")", "]", "if", "self", ".", "enabled", "else", "[", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.relations.basic.decode_span_relations": [[9, 18], ["enumerate", "len", "torch.nonzero().tolist", "torch.nonzero().tolist", "relations.append", "rels.append", "torch.nonzero", "torch.nonzero"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist"], ["def", "decode_span_relations", "(", "scores", ",", "spanss", ",", "labels", ")", ":", "\n", "    ", "relations", "=", "[", "]", "\n", "for", "b", ",", "spans", "in", "enumerate", "(", "spanss", ")", ":", "\n", "        ", "length", "=", "len", "(", "spans", ")", "\n", "rels", "=", "[", "]", "\n", "for", "src", ",", "dst", ",", "rel", "in", "torch", ".", "nonzero", "(", "scores", "[", "b", ",", "0", ":", "length", ",", "0", ":", "length", ",", ":", "]", ">", "0", ")", ".", "tolist", "(", ")", ":", "\n", "            ", "rels", ".", "append", "(", "(", "spans", "[", "src", "]", ",", "labels", "[", "rel", "]", ",", "spans", "[", "dst", "]", ")", ")", "\n", "", "relations", ".", "append", "(", "rels", ")", "\n", "", "return", "relations", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.relations.basic.gold_cluster_to_span_relations": [[20, 30], ["zip", "output.append", "tmp.append"], "function", ["None"], ["", "def", "gold_cluster_to_span_relations", "(", "clusters", ",", "relations", ",", "labels", ")", ":", "\n", "    ", "output", "=", "[", "]", "\n", "for", "cs", ",", "rels", "in", "zip", "(", "clusters", ",", "relations", ")", ":", "\n", "        ", "tmp", "=", "[", "]", "\n", "for", "src_cluster_idx", ",", "dst_cluster_idx", ",", "rel_idx", "in", "rels", ":", "\n", "            ", "for", "src", "in", "cs", "[", "src_cluster_idx", "]", ":", "\n", "                ", "for", "dst", "in", "cs", "[", "dst_cluster_idx", "]", ":", "\n", "                    ", "tmp", ".", "append", "(", "(", "src", ",", "labels", "[", "rel_idx", "]", ",", "dst", ")", ")", "\n", "", "", "", "output", ".", "append", "(", "tmp", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.__init__": [[326, 397], ["torch.Module.__init__", "config.get", "coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.entity_dictionary.tolist", "entity_dictionary.lookup", "list", "list", "list", "list", "list", "list", "list", "list", "list", "list", "list"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup"], ["    ", "def", "__init__", "(", "self", ",", "link_task", ",", "coref_task", ",", "entity_dictionary", ",", "config", ",", "end_to_end", ")", ":", "\n", "        ", "super", "(", "LossCorefLinkerMTTHoi", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "enabled", "=", "config", "[", "'enabled'", "]", "\n", "self", ".", "coref_task", "=", "coref_task", "\n", "self", ".", "link_task", "=", "link_task", "\n", "self", ".", "entity_dictionary", "=", "entity_dictionary", "\n", "\n", "if", "self", ".", "enabled", ":", "\n", "            ", "self", ".", "labels", "=", "self", ".", "entity_dictionary", ".", "tolist", "(", ")", "\n", "self", ".", "unknown_dict", "=", "entity_dictionary", ".", "lookup", "(", "'###UNKNOWN###'", ")", "\n", "\n", "", "self", ".", "weight", "=", "config", ".", "get", "(", "'weight'", ",", "1.0", ")", "\n", "self", ".", "filter_singletons_with_pruner", "=", "config", "[", "'filter_singletons_with_pruner'", "]", "\n", "self", ".", "filter_only_singletons", "=", "config", "[", "'filter_only_singletons'", "]", "\n", "self", ".", "filter_singletons_with_ner", "=", "config", "[", "'filter_singletons_with_ner'", "]", "\n", "self", ".", "singletons", "=", "self", ".", "filter_singletons_with_pruner", "or", "self", ".", "filter_singletons_with_ner", "\n", "self", ".", "end_to_end", "=", "end_to_end", "\n", "self", ".", "float_precision", "=", "config", "[", "'float_precision'", "]", "\n", "self", ".", "multihead_nil", "=", "config", "[", "'multihead_nil'", "]", "\n", "# self.multihead_nil_v2 = config['multihead_nil_v2']", "\n", "self", ".", "log_inf_mask", "=", "config", "[", "'log_inf_mask'", "]", "\n", "self", ".", "exp_trick", "=", "config", "[", "'exp_trick'", "]", "\n", "\n", "if", "self", ".", "float_precision", "==", "'float64'", ":", "\n", "            ", "self", ".", "torch_float_precision", "=", "torch", ".", "float64", "\n", "", "else", ":", "\n", "            ", "self", ".", "torch_float_precision", "=", "torch", ".", "float32", "\n", "\n", "# self.print_debugging = False", "\n", "# if 'print_debugging' in config:", "\n", "", "self", ".", "print_debugging", "=", "config", "[", "'print_debugging'", "]", "\n", "self", ".", "print_debugging_matrices", "=", "config", "[", "'print_debugging_matrices'", "]", "\n", "\n", "self", ".", "nonlinear_function", "=", "config", "[", "'nonlinear_function'", "]", "\n", "self", ".", "smart_arsinh", "=", "config", "[", "'smart_arsinh'", "]", "\n", "# self.pred_arsinh = config['pred_arsinh']", "\n", "# self.nil_clusters_branching = config['nil_clusters_branching']", "\n", "\"\"\"\n         \"enforce_scores\": true,\n         \"min_score_max\": -0.1,\n         \"min_score_min\": -1000.0,\n         \"max_score_max\": 1000.0,\n         \"max_score_min\": 0.1,\n        \"\"\"", "\n", "self", ".", "enforce_scores", "=", "config", "[", "'enforce_scores'", "]", "\n", "self", ".", "min_score_max", "=", "config", "[", "'min_score_max'", "]", "\n", "self", ".", "min_score_min", "=", "config", "[", "'min_score_min'", "]", "\n", "self", ".", "max_score_max", "=", "config", "[", "'max_score_max'", "]", "\n", "self", ".", "max_score_min", "=", "config", "[", "'max_score_min'", "]", "\n", "\n", "self", ".", "zeros_to_clusters", "=", "config", "[", "'zeros_to_clusters'", "]", "\n", "self", ".", "zeros_to_links", "=", "config", "[", "'zeros_to_links'", "]", "\n", "self", ".", "root_link_max_spans_to_link", "=", "config", "[", "'root_link_max_spans_to_link'", "]", "\n", "self", ".", "root_link_min_zero", "=", "config", "[", "'root_link_min_zero'", "]", "\n", "# nil_partition_implementation: implementation based on \"3.1. Partition functions via matrix determinants\" of", "\n", "# https://www.aclweb.org/anthology/D07-1015/", "\n", "self", ".", "nil_partition_implementation", "=", "config", "[", "'nil_partition_implementation'", "]", "\n", "\n", "if", "self", ".", "print_debugging", ":", "\n", "            ", "self", ".", "mtt_hoi_loss", "=", "list", "(", ")", "\n", "self", ".", "stat_link_span_norm", "=", "list", "(", ")", "\n", "self", ".", "stat_link_span_mean", "=", "list", "(", ")", "\n", "self", ".", "stat_link_span_std", "=", "list", "(", ")", "\n", "self", ".", "stat_link_span_min", "=", "list", "(", ")", "\n", "self", ".", "stat_link_span_max", "=", "list", "(", ")", "\n", "self", ".", "stat_span_span_norm", "=", "list", "(", ")", "\n", "self", ".", "stat_span_span_mean", "=", "list", "(", ")", "\n", "self", ".", "stat_span_span_std", "=", "list", "(", ")", "\n", "self", ".", "stat_span_span_min", "=", "list", "(", ")", "\n", "self", ".", "stat_span_span_max", "=", "list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.create_scores_mtt_pred": [[398, 478], ["scores[].transpose", "candidate_lengths.max().item", "scores[].transpose", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "scrs_links_to_spans.unsqueeze().expand", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "scrs_mtt_links_to_spans.transpose.transpose.transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "candidate_lengths.max", "candidates.unsqueeze", "mix_cross.size", "scrs_mtt_pred_bloc[].max", "torch.max", "torch.max", "torch.max", "torch.max", "scrs_links_to_spans.unsqueeze", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["None"], ["", "", "def", "create_scores_mtt_pred", "(", "self", ",", "scores", ",", "unique_links", ",", "candidates", ",", "candidate_lengths", ",", "torch_float_precision", ")", ":", "\n", "        ", "\"\"\"\n\n        :param scores:\n        :return:\n\n        \"\"\"", "\n", "# resources to help: https://discuss.pytorch.org/t/find-indices-of-one-tensor-in-another/84889", "\n", "# >>> a = torch.arange(10)", "\n", "# >>> b = torch.arange(2, 7)[torch.randperm(5)]", "\n", "# print((b.unsqueeze(1) == a).nonzero())", "\n", "\n", "# print('the passed scores to create_scores_mtt_pred is: ', scores)", "\n", "# scores.shape: [1,14,31]", "\n", "# candidates.shape: [1,14,16]", "\n", "# unique_links.shape: [1,30]", "\n", "\n", "# here broadcasts candidate ids to unique ids in unique_links", "\n", "# mix_cross.shape: [batch, spans, # candidates, # unique_candidates] --> [1, 14, 16, 30]", "\n", "# mix_cross is a matrix that maps each of the candidates (dim 2) for each of the spans (dim 1) to the respective", "\n", "# position in unique_links (dim 3). dim 0 is the batch.", "\n", "scrs_mtt_root_to_spans", "=", "scores", "[", ":", ",", ":", ",", ":", "1", "]", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", "# scores.shape --> torch.Size([1, 21, 38])", "\n", "# scrs_mtt_root_to_spans.shape --> torch.Size([1, 1, 21])", "\n", "cand_max_length", "=", "candidate_lengths", ".", "max", "(", ")", ".", "item", "(", ")", "\n", "# 16", "\n", "candidates", "=", "candidates", "[", ":", ",", ":", ",", ":", "cand_max_length", "]", "\n", "# candidates.shape --> torch.Size([1, 21, 16])", "\n", "scrs_mtt_spans", "=", "scores", "[", ":", ",", ":", ",", "cand_max_length", "+", "1", ":", "]", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", "\n", "# scrs_mtt_spans.shape --> torch.Size([1, 21, 21])", "\n", "\n", "if", "unique_links", ".", "shape", "[", "-", "1", "]", ">", "0", ":", "\n", "            ", "mix_cross", ":", "torch", ".", "Tensor", "=", "(", "candidates", ".", "unsqueeze", "(", "-", "1", ")", "==", "unique_links", ")", "\n", "# mix_cross.shape --> torch.Size([1, 21, 16, 67])", "\n", "scrs_mtt_expd_links_to_spans", "=", "torch", ".", "zeros_like", "(", "mix_cross", ",", "device", "=", "settings", ".", "device", ",", "\n", "dtype", "=", "torch_float_precision", ")", "\n", "# scrs_mtt_expd_links_to_spans.shape --> torch.Size([1, 21, 16, 67])", "\n", "scrs_links_to_spans", "=", "scores", "[", ":", ",", ":", ",", "1", ":", "candidates", ".", "shape", "[", "-", "1", "]", "+", "1", "]", "\n", "# scrs_links_to_spans.shape --> torch.Size([1, 21, 16])", "\n", "scrs_expd_links_to_spans", "=", "scrs_links_to_spans", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "mix_cross", ".", "size", "(", ")", ")", "\n", "# scrs_expd_links_to_spans.shape --> torch.Size([1, 21, 16, 67])", "\n", "scrs_mtt_expd_links_to_spans", "[", "mix_cross", "]", "=", "scrs_expd_links_to_spans", "[", "mix_cross", "]", "\n", "# scrs_mtt_expd_links_to_spans.shape --> torch.Size([1, 21, 16, 67])", "\n", "\n", "ones_multiplier", "=", "torch", ".", "ones", "(", "1", ",", "mix_cross", ".", "shape", "[", "2", "]", ",", "dtype", "=", "torch_float_precision", ",", "device", "=", "settings", ".", "device", ")", "\n", "# ones_multiplier.shape --> torch.Size([1, 16])", "\n", "scrs_mtt_links_to_spans", "=", "torch", ".", "matmul", "(", "ones_multiplier", ",", "scrs_mtt_expd_links_to_spans", ")", ".", "squeeze", "(", "-", "2", ")", "\n", "# scrs_mtt_links_to_spans.shape --> torch.Size([1, 21, 67])", "\n", "scrs_mtt_links_to_spans", "=", "scrs_mtt_links_to_spans", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", "\n", "# scrs_mtt_links_to_spans.shape --> torch.Size([1, 67, 21])", "\n", "\n", "# scores for predicted block (the rightmost)", "\n", "scrs_mtt_pred_bloc", "=", "torch", ".", "cat", "(", "[", "scrs_mtt_root_to_spans", ",", "scrs_mtt_links_to_spans", ",", "scrs_mtt_spans", "]", ",", "dim", "=", "-", "2", ")", "\n", "# scrs_mtt_pred_bloc.shape --> torch.Size([1, 89, 21])", "\n", "", "else", ":", "\n", "# if no candidate links, then don't add it completely", "\n", "            ", "scrs_mtt_pred_bloc", "=", "torch", ".", "cat", "(", "[", "scrs_mtt_root_to_spans", ",", "scrs_mtt_spans", "]", ",", "dim", "=", "-", "2", ")", "\n", "\n", "# the leftmost fixed bloc", "\n", "", "scrs_mtt_fixed_bloc", "=", "torch", ".", "zeros", "(", "scrs_mtt_pred_bloc", ".", "shape", "[", "0", "]", ",", "scrs_mtt_pred_bloc", ".", "shape", "[", "1", "]", ",", "\n", "1", "+", "unique_links", ".", "shape", "[", "-", "1", "]", ",", "device", "=", "settings", ".", "device", ",", "\n", "dtype", "=", "torch_float_precision", ")", "\n", "\n", "# repeat just the maximum score from the root to candidate links", "\n", "# if not (self.zeros_to_clusters or self.zeros_to_links):", "\n", "if", "self", ".", "root_link_max_spans_to_link", ":", "\n", "# the score root->link is the maximum score link to span predicted for that link", "\n", "# as opposed to overall maximum is root_link_max_spans_to_link is not activated.", "\n", "            ", "max_to_assign", "=", "scrs_mtt_pred_bloc", "[", "0", ",", "1", ":", "unique_links", ".", "shape", "[", "-", "1", "]", "+", "1", ",", ":", "]", ".", "max", "(", "dim", "=", "-", "1", ")", ".", "values", "\n", "if", "self", ".", "root_link_min_zero", ":", "\n", "                ", "max_to_assign", "[", "max_to_assign", "<", "0.0", "]", "=", "0.0", "\n", "\n", "", "scrs_mtt_fixed_bloc", "[", "0", ",", "0", ",", "1", ":", "unique_links", ".", "shape", "[", "-", "1", "]", "+", "1", "]", "=", "max_to_assign", "\n", "", "elif", "not", "(", "self", ".", "zeros_to_clusters", "or", "self", ".", "zeros_to_links", ")", ":", "\n", "# if it is lower than 0 then, assign 0 depending on hyperparameter", "\n", "            ", "scrs_mtt_fixed_bloc", "[", "0", ",", "0", ",", "1", ":", "unique_links", ".", "shape", "[", "-", "1", "]", "+", "1", "]", "=", "torch", ".", "max", "(", "scrs_mtt_pred_bloc", ")", "\n", "# scrs_mtt_fixed_bloc[0, 0, 1:unique_links.shape[-1] + 1] = 1.0", "\n", "#", "\n", "", "scrs_mtt_complete_matrix", "=", "torch", ".", "cat", "(", "[", "scrs_mtt_fixed_bloc", ",", "scrs_mtt_pred_bloc", "]", ",", "dim", "=", "-", "1", ")", "\n", "# scrs_mtt_complete_matrix.shape --> torch.Size([1, 89, 89])", "\n", "return", "scrs_mtt_complete_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.create_coreflinker_mtt_target_mask_multihead": [[479, 617], ["len", "max", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "linker_targets.sum", "list", "list", "enumerate", "zip", "list.append", "dict", "enumerate", "dict", "enumerate", "list", "dict.values", "list.append", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "len", "unique_links_lengths[].item", "len", "clusters[].item", "clusters.max().item", "nr_correct_candidates_per_mention[].item", "enumerate", "clusters.max", "candidates[].item", "[].append", "len", "enumerate", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "numpy.diag_indices", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "list.append"], "methods", ["None"], ["", "def", "create_coreflinker_mtt_target_mask_multihead", "(", "self", ",", "pred_spans", ",", "gold_spans", ",", "gold_clusters", ",", "linker_targets", ",", "\n", "candidates", ",", "unique_links", ",", "unique_links_lengths", ")", ":", "\n", "        ", "\"\"\"\n        Unlike create_coreflinker_mtt_target_mask that produces only a single entry (1.0 mask activation) from root\n        to a span (the first span in a cluster) in a particular NIL cluster, this one returns multiple matrices with\n        activations for each of the spans (\"heads\") in a NIL cluster.\n        For details: see slide https://docs.google.com/presentation/d/1Za2gCNq55gp1MCTlg4p0CN-JGyKjj4WtzxpYJKDZz3E/edit#slide=id.gbea2b70095_0_61\n        For details of what create_coreflinker_mtt_target_mask is doing see slide https://docs.google.com/presentation/d/1Za2gCNq55gp1MCTlg4p0CN-JGyKjj4WtzxpYJKDZz3E/edit#slide=id.gbea2b70095_0_0\n\n        :param pred_spans:\n        :param gold_spans:\n        :param gold_clusters:\n        :param linker_targets:\n        :return:\n            Binary (1 or 0) mask matrix of dimensions (not counting the first batch):\n            [(1(root) + distinct links from pred spans + pred spans) x\n            (1(root) + distinct links from pred spans + pred spans)]\n        \"\"\"", "\n", "\n", "num_batch", "=", "len", "(", "pred_spans", ")", "# 1", "\n", "max_spans", "=", "max", "(", "[", "len", "(", "x", ")", "for", "x", "in", "pred_spans", "]", ")", "# 9", "\n", "\n", "coreflinker_mtt_targets", "=", "torch", ".", "zeros", "(", "num_batch", ",", "1", "+", "unique_links", ".", "shape", "[", "-", "1", "]", "+", "max_spans", ",", "\n", "1", "+", "unique_links", ".", "shape", "[", "-", "1", "]", "+", "max_spans", ",", "\n", "dtype", "=", "torch", ".", "float32", ",", "\n", "device", "=", "settings", ".", "device", ")", "\n", "# coreflinker_mtt_targets.shape --> torch.Size([1, 89, 89])", "\n", "nr_correct_candidates_per_mention", "=", "linker_targets", ".", "sum", "(", "-", "1", ")", "\n", "target_mask_lengths", "=", "list", "(", ")", "\n", "batched_lst_multiheads", "=", "list", "(", ")", "\n", "# targets for span-span coref # TODO!! - also check that linker_targets come as batch!!!", "\n", "for", "batch", ",", "(", "pred", ",", "gold", ",", "clusters", ")", "in", "enumerate", "(", "zip", "(", "pred_spans", ",", "gold_spans", ",", "gold_clusters", ")", ")", ":", "\n", "# root to links always in 1", "\n", "            ", "coreflinker_mtt_targets", "[", "batch", ",", "0", ",", "1", ":", "unique_links_lengths", "[", "batch", "]", "+", "1", "]", "=", "1.0", "\n", "span_offset", "=", "1", "+", "unique_links_lengths", "[", "batch", "]", ".", "item", "(", ")", "# span_offset --> 68", "\n", "curr_target_length", "=", "span_offset", "+", "len", "(", "pred", ")", "# root + links + spans # 89", "\n", "target_mask_lengths", ".", "append", "(", "curr_target_length", ")", "\n", "gold2cluster", "=", "dict", "(", ")", "\n", "for", "idx", ",", "span", "in", "enumerate", "(", "gold", ")", ":", "\n", "                ", "gold2cluster", "[", "span", "]", "=", "clusters", "[", "idx", "]", ".", "item", "(", ")", "\n", "# gold2cluster --> <class 'dict'>: {(5, 6): 4, (7, 12): 5, (51, 53): 1, (55, 59): 2, (61, 61): 6, (62, 62): 7, (63, 67): 8, (68, 72): 9, (76, 76): 6}", "\n", "# len(gold2cluster) --> 9", "\n", "", "pred2cluster_struct", "=", "dict", "(", ")", "\n", "if", "clusters", ".", "shape", "[", "-", "1", "]", ">", "0", ":", "\n", "                ", "max_gold_cl_id", "=", "clusters", ".", "max", "(", ")", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "                ", "max_gold_cl_id", "=", "0", "\n", "#", "\n", "", "to_assign_cl_id", "=", "max_gold_cl_id", "+", "1", "\n", "#", "\n", "for", "idx_span1", ",", "span1", "in", "enumerate", "(", "pred", ")", ":", "\n", "                ", "if", "span1", "not", "in", "gold2cluster", ":", "\n", "                    ", "new_cl_id", "=", "to_assign_cl_id", "\n", "to_assign_cl_id", "+=", "1", "\n", "pred2cluster_struct", "[", "new_cl_id", "]", "=", "{", "'cluster_id'", ":", "to_assign_cl_id", ",", "\n", "'spans'", ":", "[", "(", "idx_span1", ",", "span1", ")", "]", ",", "\n", "# if it is not in gold2cluster, then there is no way to know", "\n", "# if the link is valid or not", "\n", "'is_valid_link'", ":", "False", "}", "\n", "#", "\n", "", "else", ":", "\n", "                    ", "cluster_id", "=", "gold2cluster", "[", "span1", "]", "\n", "nr_correct_candidates_in_span", "=", "nr_correct_candidates_per_mention", "[", "batch", ",", "idx_span1", "]", ".", "item", "(", ")", "\n", "is_valid_link", "=", "False", "\n", "# in theory nr_correct_candidates_in_span can be at most 1 (only a single correct candidate)", "\n", "if", "nr_correct_candidates_in_span", ">", "0", ":", "\n", "                        ", "is_valid_link", "=", "True", "\n", "correct_link_id", "=", "candidates", "[", "batch", ",", "idx_span1", ",", "linker_targets", "[", "batch", ",", "idx_span1", "]", ">", "0.5", "]", ".", "item", "(", ")", "\n", "offset_correct_link", "=", "(", "unique_links", "[", "batch", "]", "==", "correct_link_id", ")", ".", "nonzero", "(", ")", ".", "item", "(", ")", "\n", "coreflinker_mtt_targets", "[", "batch", ",", "offset_correct_link", "+", "1", ",", "idx_span1", "+", "span_offset", "]", "=", "1.0", "\n", "\n", "", "for", "idx_span2", ",", "span2", "in", "enumerate", "(", "pred", ")", ":", "\n", "                        ", "if", "idx_span2", "!=", "idx_span1", "and", "span2", "in", "gold2cluster", "and", "gold2cluster", "[", "span1", "]", "==", "gold2cluster", "[", "\n", "span2", "]", ":", "\n", "                            ", "coreflinker_mtt_targets", "[", "batch", ",", "idx_span1", "+", "span_offset", ",", "idx_span2", "+", "span_offset", "]", "=", "1.0", "\n", "# num_coref_spans_found += 1", "\n", "\n", "", "", "if", "cluster_id", "not", "in", "pred2cluster_struct", ":", "\n", "                        ", "pred2cluster_struct", "[", "cluster_id", "]", "=", "{", "'cluster_id'", ":", "cluster_id", ",", "\n", "'spans'", ":", "[", "(", "idx_span1", ",", "span1", ")", "]", ",", "\n", "'is_valid_link'", ":", "False", "}", "\n", "", "else", ":", "\n", "                        ", "pred2cluster_struct", "[", "cluster_id", "]", "[", "'spans'", "]", ".", "append", "(", "(", "idx_span1", ",", "span1", ")", ")", "\n", "\n", "", "if", "is_valid_link", ":", "\n", "                        ", "pred2cluster_struct", "[", "cluster_id", "]", "[", "'is_valid_link'", "]", "=", "True", "\n", "\n", "", "", "", "lst_multiheads", "=", "list", "(", ")", "# probably put this on top", "\n", "for", "cluster_struct", "in", "pred2cluster_struct", ".", "values", "(", ")", ":", "\n", "                ", "is_valid_link", "=", "cluster_struct", "[", "'is_valid_link'", "]", "\n", "if", "not", "is_valid_link", ":", "\n", "# puts the first one directly into coref_mtt_targets", "\n", "                    ", "spans", "=", "cluster_struct", "[", "'spans'", "]", "\n", "idx_1st_span", "=", "spans", "[", "0", "]", "[", "0", "]", "\n", "coreflinker_mtt_targets", "[", "batch", ",", "0", ",", "idx_1st_span", "+", "span_offset", "]", "=", "1.0", "\n", "if", "self", ".", "multihead_nil", "==", "'multihead_old'", ":", "\n", "                        ", "len_spans", "=", "len", "(", "spans", ")", "\n", "indices", "=", "[", "0", "]", "# the first index always 0 (root)", "\n", "curr_indices", "=", "indices", "+", "[", "curr_ind", "[", "0", "]", "+", "span_offset", "for", "curr_ind", "in", "spans", "]", "\n", "# :1 because the first head is already taken care in coreflinker_mtt_targets", "\n", "for", "idx", ",", "curr_head", "in", "enumerate", "(", "spans", "[", "1", ":", "]", ")", ":", "\n", "                            ", "mtt_targets", "=", "torch", ".", "zeros", "(", "len_spans", "+", "1", ",", "len_spans", "+", "1", ",", "dtype", "=", "self", ".", "torch_float_precision", ",", "\n", "device", "=", "settings", ".", "device", ")", "\n", "\n", "# +2 because of root and the first head that is already taken care in coreflinker_mtt_targets", "\n", "mtt_targets", "[", "0", ",", "2", "+", "idx", "]", "=", "1.0", "\n", "# the connections between spans (inter_spans) all in 1 except the main diagonal", "\n", "inter_spans", "=", "torch", ".", "ones", "(", "mtt_targets", ".", "shape", "[", "0", "]", "-", "1", ",", "mtt_targets", ".", "shape", "[", "1", "]", "-", "1", ",", "\n", "dtype", "=", "self", ".", "torch_float_precision", ",", "device", "=", "settings", ".", "device", ")", "\n", "\n", "ind", "=", "np", ".", "diag_indices", "(", "inter_spans", ".", "shape", "[", "0", "]", ")", "\n", "inter_spans", "[", "ind", "[", "0", "]", ",", "ind", "[", "1", "]", "]", "=", "torch", ".", "zeros", "(", "inter_spans", ".", "shape", "[", "0", "]", ",", "\n", "dtype", "=", "self", ".", "torch_float_precision", ",", "\n", "device", "=", "settings", ".", "device", ")", "\n", "mtt_targets", "[", "1", ":", ",", "1", ":", "]", "=", "inter_spans", "[", ":", "]", "\n", "lst_multiheads", ".", "append", "(", "{", "'mtt_targets'", ":", "mtt_targets", ",", "'indices'", ":", "curr_indices", "}", ")", "\n", "# mask_span_to_span[ind[0], ind[1]] = torch.zeros(mask_span_to_span.shape[0], device=settings.device)", "\n", "", "", "elif", "self", ".", "multihead_nil", "==", "'none'", ":", "\n", "#", "\n", "# print('nil_clusters_branching - looking into it')", "\n", "# for idx, curr_head in enumerate(spans[1:]):", "\n", "                        ", "for", "curr_head", "in", "spans", "[", "1", ":", "]", ":", "\n", "                            ", "coreflinker_mtt_targets", "[", "batch", ",", "0", ",", "curr_head", "[", "0", "]", "+", "span_offset", "]", "=", "1.0", "\n", "\n", "# TODO: now a loop over all elements in pred2cluster_struct and", "\n", "#  1- if is_valid_link in True, just add it into a big matrix (coref_mtt_targets)", "\n", "#  2- if is_valid_link in False, then for each one create a separate M matrices where M is the number of", "\n", "#  spans in 'spans', each matrix will have a different head, also the corresponding offset of the matrix", "\n", "#  will have to be added. IS THIS OFFSET REALLY NEEDED or even possible (non-contiguous spans)?????", "\n", "#  TO GET ACCESS TO THE REAL SCORES?? SO MAYBE just pass the 'scores' matrix here and instead of mask", "\n", "#  assign the real scores there", "\n", "#    - !!maybe the first head in M add it to the coref_mtt_targets matrix; this way it will be possible to", "\n", "#      calculate laplacian and determinant, as well as configurable on whether multihead is needed!!", "\n", "#  3- IS IT POSSIBLE TO GET TO KNOW IF A PARTICULAR CLUSTER IS NIL HERE to make NIL configurable and differentiate", "\n", "#  it from the case where the spans just don't have a valid link??", "\n", "", "", "", "", "batched_lst_multiheads", ".", "append", "(", "lst_multiheads", ")", "\n", "", "return", "coreflinker_mtt_targets", ",", "torch", ".", "tensor", "(", "target_mask_lengths", ",", "dtype", "=", "torch", ".", "int32", ",", "device", "=", "settings", ".", "device", ")", ",", "batched_lst_multiheads", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.create_coreflinker_mtt_target_mask_prod": [[618, 776], ["len", "max", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "linker_targets.sum", "list", "list", "list", "list", "enumerate", "zip", "sorted.extend", "list.append", "dict", "enumerate", "dict", "enumerate", "list", "dict.values", "sorted", "list.append", "list.append", "list.append", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "len", "list", "unique_links_lengths[].item", "len", "clusters[].item", "clusters.max().item", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "range", "nr_correct_candidates_per_mention[].item", "enumerate", "sorted", "target_nil_clusters_indices_b.append", "clusters.max", "candidates[].item", "[].append", "sorted.append", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "sorted.append"], "methods", ["None"], ["", "def", "create_coreflinker_mtt_target_mask_prod", "(", "self", ",", "pred_spans", ",", "gold_spans", ",", "gold_clusters", ",", "linker_targets", ",", "\n", "candidates", ",", "unique_links", ",", "unique_links_lengths", ")", ":", "\n", "        ", "\"\"\"\n        This version is the extension of create_coreflinker_mtt_target_mask_multihead with some formulations in the\n        comments of the following slide:\n        https://docs.google.com/presentation/d/1Za2gCNq55gp1MCTlg4p0CN-JGyKjj4WtzxpYJKDZz3E/edit#slide=id.gd02f9cc825_0_419\n        The idea is to use the output of this function to calculate the product of tree weights of all nil clusters:\n        target score = ( MTT(mask_linked*score) * (mask_nil_cluster1_head1*score + mask_nil_cluster1_head2*score...) *\n            * (mask_nil_cluster2_head1*score + mask_nil_cluster2_head2*score....) * ....)\n        For this we need to return:\n            1- the mask of linked entities (\"mask_linked\" in the comment above).\n            2- A list of masks, each for a specific nil cluster (mask_nil_cluster1 for example). Where the first row\n            is the root entry row to the cluster. So the mask for cluster with 2 mentios will be:\n                 R  m1 m2\n            R  [[0, 0, 0], --> 1s for each mx (head) will have to be added to get \"mask_nil_cluster_headx\"\n            m1  [0, 0, 1],\n            m2  [0, 1, 0]]  --> 0s in the main diagonal and all combinations possible between m1 and m2.\n            The caller to this\n            function will have to change the first row (root row) putting 1s in different heads to obtain\n            the \"mask_nil_cluster_headx\" masks in the comment above.\n\n        :param pred_spans:\n        :param gold_spans:\n        :param gold_clusters:\n        :param linker_targets:\n        :return:\n            The original idea is to return two type of target masks (with respective indices):\n                1- The mask for linked entities.\n                2- A list of masks, each for a specific nil cluster\n        \"\"\"", "\n", "# initialize with root index (0)", "\n", "\n", "num_batch", "=", "len", "(", "pred_spans", ")", "# 1", "\n", "max_spans", "=", "max", "(", "[", "len", "(", "x", ")", "for", "x", "in", "pred_spans", "]", ")", "# 9", "\n", "\n", "coreflinker_mtt_targets", "=", "torch", ".", "zeros", "(", "num_batch", ",", "1", "+", "unique_links", ".", "shape", "[", "-", "1", "]", "+", "max_spans", ",", "\n", "1", "+", "unique_links", ".", "shape", "[", "-", "1", "]", "+", "max_spans", ",", "\n", "dtype", "=", "torch", ".", "float32", ",", "\n", "device", "=", "settings", ".", "device", ")", "\n", "# coreflinker_mtt_targets.shape --> torch.Size([1, 89, 89])", "\n", "# DOES THIS WORK?? SO ALL 0s FOR spans WITHOUT CORRECT LINK??", "\n", "nr_correct_candidates_per_mention", "=", "linker_targets", ".", "sum", "(", "-", "1", ")", "\n", "target_mask_lengths", "=", "list", "(", ")", "\n", "batched_lst_multiheads", "=", "list", "(", ")", "\n", "# targets for span-span coref # TODO!! - also check that linker_targets come as batch!!!", "\n", "target_not_nil_indices", "=", "list", "(", ")", "\n", "target_nil_clusters_indices", "=", "list", "(", ")", "\n", "for", "batch", ",", "(", "pred", ",", "gold", ",", "clusters", ")", "in", "enumerate", "(", "zip", "(", "pred_spans", ",", "gold_spans", ",", "gold_clusters", ")", ")", ":", "\n", "\n", "# target_not_nil_indices_from = [0]", "\n", "# target_not_nil_indices_to = [0]", "\n", "# this one already initialized with root (0)", "\n", "            ", "target_not_nil_indices_b", "=", "[", "0", "]", "\n", "# also adds the connections to unique links that we know are always present from our architecture", "\n", "#   first only will work in case batch size is of 1", "\n", "assert", "unique_links", ".", "shape", "[", "0", "]", "==", "1", "\n", "target_not_nil_indices_b", ".", "extend", "(", "list", "(", "range", "(", "1", ",", "unique_links", ".", "shape", "[", "-", "1", "]", "+", "1", ")", ")", ")", "\n", "# this one not initialized with root because it will be a list of lists", "\n", "target_nil_clusters_indices_b", "=", "[", "]", "\n", "# root to links always in 1", "\n", "coreflinker_mtt_targets", "[", "batch", ",", "0", ",", "1", ":", "unique_links_lengths", "[", "batch", "]", "+", "1", "]", "=", "1.0", "\n", "span_offset", "=", "1", "+", "unique_links_lengths", "[", "batch", "]", ".", "item", "(", ")", "# span_offset --> 68", "\n", "curr_target_length", "=", "span_offset", "+", "len", "(", "pred", ")", "# root + links + spans # 89", "\n", "target_mask_lengths", ".", "append", "(", "curr_target_length", ")", "\n", "gold2cluster", "=", "dict", "(", ")", "\n", "for", "idx", ",", "span", "in", "enumerate", "(", "gold", ")", ":", "\n", "                ", "gold2cluster", "[", "span", "]", "=", "clusters", "[", "idx", "]", ".", "item", "(", ")", "\n", "# gold2cluster --> <class 'dict'>: {(5, 6): 4, (7, 12): 5, (51, 53): 1, (55, 59): 2, (61, 61): 6, (62, 62): 7, (63, 67): 8, (68, 72): 9, (76, 76): 6}", "\n", "# len(gold2cluster) --> 9", "\n", "", "pred2cluster_struct", "=", "dict", "(", ")", "\n", "if", "clusters", ".", "shape", "[", "-", "1", "]", ">", "0", ":", "\n", "                ", "max_gold_cl_id", "=", "clusters", ".", "max", "(", ")", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "                ", "max_gold_cl_id", "=", "0", "\n", "#", "\n", "", "to_assign_cl_id", "=", "max_gold_cl_id", "+", "1", "\n", "#", "\n", "for", "idx_span1", ",", "span1", "in", "enumerate", "(", "pred", ")", ":", "\n", "                ", "if", "span1", "not", "in", "gold2cluster", ":", "\n", "                    ", "new_cl_id", "=", "to_assign_cl_id", "\n", "to_assign_cl_id", "+=", "1", "\n", "pred2cluster_struct", "[", "new_cl_id", "]", "=", "{", "'cluster_id'", ":", "to_assign_cl_id", ",", "\n", "'spans'", ":", "[", "(", "idx_span1", ",", "span1", ")", "]", ",", "\n", "# if it is not in gold2cluster, then there is no way to know", "\n", "# if the link is valid or not", "\n", "'is_valid_link'", ":", "False", "}", "\n", "#", "\n", "", "else", ":", "\n", "                    ", "cluster_id", "=", "gold2cluster", "[", "span1", "]", "\n", "nr_correct_candidates_in_span", "=", "nr_correct_candidates_per_mention", "[", "batch", ",", "idx_span1", "]", ".", "item", "(", ")", "\n", "is_valid_link", "=", "False", "\n", "# target mask from link to spans: in theory nr_correct_candidates_in_span can be at most 1", "\n", "# (only a single correct candidate)", "\n", "if", "nr_correct_candidates_in_span", ">", "0", ":", "\n", "                        ", "is_valid_link", "=", "True", "\n", "correct_link_id", "=", "candidates", "[", "batch", ",", "idx_span1", ",", "linker_targets", "[", "batch", ",", "idx_span1", "]", ">", "0.5", "]", ".", "item", "(", ")", "\n", "offset_correct_link", "=", "(", "unique_links", "[", "batch", "]", "==", "correct_link_id", ")", ".", "nonzero", "(", ")", ".", "item", "(", ")", "\n", "# target_not_nil_indices_from.append(offset_correct_link + 1)", "\n", "# target_not_nil_indices_to.append(idx_span1 + span_offset)", "\n", "# target_not_nil_indices_b.append(offset_correct_link + 1)", "\n", "# target_not_nil_indices_b.append(idx_span1 + span_offset)", "\n", "coreflinker_mtt_targets", "[", "batch", ",", "offset_correct_link", "+", "1", ",", "idx_span1", "+", "span_offset", "]", "=", "1.0", "\n", "\n", "# target mask from span to span", "\n", "", "for", "idx_span2", ",", "span2", "in", "enumerate", "(", "pred", ")", ":", "\n", "                        ", "if", "idx_span2", "!=", "idx_span1", "and", "span2", "in", "gold2cluster", "and", "gold2cluster", "[", "span1", "]", "==", "gold2cluster", "[", "span2", "]", ":", "\n", "# THIS NOT ALWAYS HAS TO BE ADDED, BECAUSE NIL CLUSTERS CAN BE HERE AS WELL!", "\n", "# target_not_nil_indices_from.append(idx_span1 + span_offset)", "\n", "# target_not_nil_indices_to.append(idx_span2 + span_offset)", "\n", "                            ", "coreflinker_mtt_targets", "[", "batch", ",", "idx_span1", "+", "span_offset", ",", "idx_span2", "+", "span_offset", "]", "=", "1.0", "\n", "# num_coref_spans_found += 1", "\n", "\n", "", "", "if", "cluster_id", "not", "in", "pred2cluster_struct", ":", "\n", "                        ", "pred2cluster_struct", "[", "cluster_id", "]", "=", "{", "'cluster_id'", ":", "cluster_id", ",", "\n", "'spans'", ":", "[", "(", "idx_span1", ",", "span1", ")", "]", ",", "\n", "'is_valid_link'", ":", "False", "}", "\n", "", "else", ":", "\n", "                        ", "pred2cluster_struct", "[", "cluster_id", "]", "[", "'spans'", "]", ".", "append", "(", "(", "idx_span1", ",", "span1", ")", ")", "\n", "\n", "", "if", "is_valid_link", ":", "\n", "                        ", "pred2cluster_struct", "[", "cluster_id", "]", "[", "'is_valid_link'", "]", "=", "True", "\n", "\n", "", "", "", "lst_multiheads", "=", "list", "(", ")", "# probably put this on top", "\n", "for", "cluster_struct", "in", "pred2cluster_struct", ".", "values", "(", ")", ":", "\n", "                ", "is_valid_link", "=", "cluster_struct", "[", "'is_valid_link'", "]", "\n", "if", "not", "is_valid_link", ":", "\n", "# target_nil_clusters_indices_b", "\n", "                    ", "curr_targets_nil_cluster", "=", "[", "0", "]", "\n", "# puts the first one directly into coref_mtt_targets", "\n", "spans", "=", "cluster_struct", "[", "'spans'", "]", "\n", "for", "curr_head", "in", "spans", ":", "\n", "                        ", "curr_targets_nil_cluster", ".", "append", "(", "curr_head", "[", "0", "]", "+", "span_offset", ")", "\n", "# if the partition is activated, then 1s have to be set to all the rooted nodes", "\n", "if", "self", ".", "nil_partition_implementation", ":", "\n", "                            ", "coreflinker_mtt_targets", "[", "batch", ",", "0", ",", "curr_head", "[", "0", "]", "+", "span_offset", "]", "=", "1.0", "\n", "\n", "", "", "curr_targets_nil_cluster", "=", "sorted", "(", "curr_targets_nil_cluster", ")", "\n", "target_nil_clusters_indices_b", ".", "append", "(", "torch", ".", "tensor", "(", "curr_targets_nil_cluster", ",", "\n", "dtype", "=", "torch", ".", "long", ",", "device", "=", "settings", ".", "device", ")", ")", "\n", "", "else", ":", "\n", "                    ", "for", "curr_span", "in", "cluster_struct", "[", "'spans'", "]", ":", "\n", "                        ", "target_not_nil_indices_b", ".", "append", "(", "span_offset", "+", "curr_span", "[", "0", "]", ")", "\n", "# target_not_nil_indices_from.append(span_offset + curr_span[0])", "\n", "# target_not_nil_indices_to.append(span_offset + curr_span[0])", "\n", "\n", "", "", "", "target_not_nil_indices_b", "=", "sorted", "(", "target_not_nil_indices_b", ")", "\n", "target_not_nil_indices", ".", "append", "(", "torch", ".", "tensor", "(", "target_not_nil_indices_b", ",", "dtype", "=", "torch", ".", "long", ",", "\n", "device", "=", "settings", ".", "device", ")", ")", "\n", "target_nil_clusters_indices", ".", "append", "(", "target_nil_clusters_indices_b", ")", "\n", "# target_not_nil_indices.append({'from': torch.tensor(target_not_nil_indices_from,dtype=torch.long),", "\n", "#                                'to': torch.tensor(target_not_nil_indices_to,dtype=torch.long)})", "\n", "\n", "batched_lst_multiheads", ".", "append", "(", "lst_multiheads", ")", "\n", "\n", "# targets_mask, target_not_nil_indices, target_nil_clusters_indices", "\n", "", "return", "coreflinker_mtt_targets", ",", "target_not_nil_indices", ",", "target_nil_clusters_indices", ",", "torch", ".", "tensor", "(", "target_mask_lengths", ",", "dtype", "=", "torch", ".", "int32", ",", "device", "=", "settings", ".", "device", ")", "\n", "# return coreflinker_mtt_targets, torch.tensor(target_mask_lengths, dtype=torch.int32, device=settings.device), \\", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.decode_m2i_coreflinker_mtt": [[779, 893], ["list", "list", "enumerate", "zip", "list", "dict", "list.extend", "list", "b_unique_links_lengths.item", "list.extend", "dict", "list.append", "list.append", "networkx.dfs_edges", "list", "len", "range", "b_pred_masked_scores[].item", "dic.get", "link_id.item", "link_id.item", "Exception"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt.dfs_edges", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get"], ["", "def", "decode_m2i_coreflinker_mtt", "(", "self", ",", "pred_masked_scores", ",", "pred_tree_mst", ",", "\n", "# lengths_coref, lengths_linker,", "\n", "candidate_ids", ",", "\n", "link_id_to_coref_col", ",", "\n", "# coref_col_to_link_id,", "\n", "dic", ",", "unique_links", ",", "\n", "unique_links_lengths", ",", "pred_spans", ")", ":", "\n", "        ", "\"\"\"\n\n        :return: This function should return the \"root\" each of the mentions point to. The \"root\" can be either an \"entity\",\n        in which case this would be a link. Or can be another mention; in which case it would be a mention that can not be linked\n        or that does not have a link I guess.\n        \"\"\"", "\n", "# to_ret = []", "\n", "span_to_pointers_detail_info", "=", "list", "(", ")", "\n", "\n", "decoded_m2i_coref_linker", "=", "list", "(", ")", "\n", "\n", "nil_cluster_nodes", "=", "[", "0", "]", "# initializes with root", "\n", "\n", "for", "batch", ",", "(", "b_unique_links", ",", "b_unique_links_lengths", ")", "in", "enumerate", "(", "zip", "(", "unique_links", ",", "unique_links_lengths", ")", ")", ":", "\n", "# print('decode_m2i_coreflinker_mtt processing batch ', batch)", "\n", "            ", "b_link_id_to_coref_col", "=", "link_id_to_coref_col", "[", "batch", "]", "\n", "# b_decoded_m2i_coref_linker = [0]  # 0 for root", "\n", "# NO, now I think that it should not include the root, only the nodes representing links or spans", "\n", "b_decoded_m2i_coref_linker", "=", "list", "(", ")", "\n", "b_span_to_pointers_detail_info", "=", "dict", "(", ")", "\n", "# -1 because we do not count the root node", "\n", "b_decoded_m2i_coref_linker", ".", "extend", "(", "\n", "[", "b_link_id_to_coref_col", "[", "link_id", ".", "item", "(", ")", "]", "-", "1", "for", "link_id", "in", "b_unique_links", "]", ")", "\n", "# b_pred_matrix_mst = pred_matrix_mst[batch]", "\n", "b_pred_tree_mst", "=", "pred_tree_mst", "[", "batch", "]", "\n", "b_pred_spans", "=", "pred_spans", "[", "batch", "]", "\n", "b_pred_masked_scores", "=", "pred_masked_scores", "[", "batch", "]", "\n", "my_edges", "=", "list", "(", "nx", ".", "dfs_edges", "(", "b_pred_tree_mst", ")", ")", "\n", "\n", "nr_nodes", "=", "b_pred_masked_scores", ".", "shape", "[", "0", "]", "\n", "\n", "nr_links", "=", "b_unique_links_lengths", ".", "item", "(", ")", "\n", "\n", "b_decoded_m2i_coref_linker", ".", "extend", "(", "list", "(", "range", "(", "nr_links", ",", "nr_nodes", "-", "1", ")", ")", ")", "\n", "assert", "len", "(", "b_pred_spans", ")", "==", "nr_nodes", "-", "nr_links", "-", "1", "\n", "# -1 because we do not add the root node", "\n", "# assert len(b_decoded_m2i_coref_linker) == b_pred_matrix_mst.shape[0] - 1", "\n", "\n", "initial_node", "=", "0", "\n", "pred_span_to_how_pointed", "=", "dict", "(", ")", "\n", "for", "curr_edge", "in", "my_edges", ":", "\n", "# print('curr edge is as follows: ', curr_edge)", "\n", "                ", "if", "curr_edge", "[", "0", "]", "==", "0", ":", "\n", "                    ", "initial_node", "=", "0", "# if the outcoming edge is from root, the initial_node is root (0)", "\n", "", "else", ":", "\n", "                    ", "if", "initial_node", "==", "0", ":", "\n", "                        ", "initial_node", "=", "curr_edge", "[", "0", "]", "\n", "", "", "curr_input_node", "=", "curr_edge", "[", "1", "]", "\n", "input_node_span", "=", "curr_input_node", "-", "1", "\n", "if", "initial_node", "!=", "0", ":", "\n", "# points to the first non-root node; -1 because the root node is not in b_decoded_m2i_coref_linker list", "\n", "                    ", "b_decoded_m2i_coref_linker", "[", "curr_input_node", "-", "1", "]", "=", "initial_node", "-", "1", "\n", "# span_to_pointers_detail_info", "\n", "\n", "# fills in the information on how the span is connected", "\n", "", "if", "curr_input_node", ">", "nr_links", ":", "# it is a span node", "\n", "                    ", "curr_span_id", "=", "curr_input_node", "-", "nr_links", "-", "1", "\n", "in_span", "=", "b_pred_spans", "[", "curr_span_id", "]", "\n", "coref_connection_score", "=", "b_pred_masked_scores", "[", "curr_edge", "[", "0", "]", ",", "curr_edge", "[", "1", "]", "]", ".", "item", "(", ")", "\n", "if", "curr_edge", "[", "0", "]", "==", "0", ":", "\n", "                        ", "pred_span_to_how_pointed", "[", "in_span", "]", "=", "{", "'coref_connection_type'", ":", "'root'", ",", "\n", "'coref_connection_pointer'", ":", "in_span", ",", "\n", "'coref_connection_score'", ":", "coref_connection_score", "}", "\n", "", "elif", "0", "<", "curr_edge", "[", "0", "]", "<", "nr_links", "+", "1", ":", "\n", "                        ", "link_id", "=", "b_unique_links", "[", "curr_edge", "[", "0", "]", "-", "1", "]", "\n", "link_name", "=", "dic", ".", "get", "(", "link_id", ".", "item", "(", ")", ")", "\n", "pred_span_to_how_pointed", "[", "in_span", "]", "=", "{", "'coref_connection_type'", ":", "'link'", ",", "\n", "'coref_connection_pointer'", ":", "link_name", ",", "\n", "'coref_connection_score'", ":", "coref_connection_score", "}", "\n", "", "elif", "curr_edge", "[", "0", "]", ">", "nr_links", ":", "\n", "                        ", "other_mention_span", "=", "b_pred_spans", "[", "curr_edge", "[", "0", "]", "-", "nr_links", "-", "1", "]", "\n", "pred_span_to_how_pointed", "[", "in_span", "]", "=", "{", "'coref_connection_type'", ":", "'mention_other'", ",", "\n", "'coref_connection_pointer'", ":", "other_mention_span", ",", "\n", "'coref_connection_score'", ":", "coref_connection_score", "}", "\n", "", "else", ":", "\n", "                        ", "raise", "Exception", "(", "'This should not happen, something wrong with coreflinker_mtt 1!'", ")", "\n", "", "", "", "for", "curr_span", "in", "b_pred_spans", ":", "\n", "                ", "if", "curr_span", "in", "pred_span_to_how_pointed", ":", "\n", "                    ", "b_span_to_pointers_detail_info", "[", "curr_span", "]", "=", "pred_span_to_how_pointed", "[", "curr_span", "]", "\n", "", "else", ":", "\n", "                    ", "b_span_to_pointers_detail_info", "[", "curr_span", "]", "=", "{", "'coref_connection_type'", ":", "'unknown'", ",", "\n", "'coref_connection_pointer'", ":", "None", ",", "\n", "'coref_connection_score'", ":", "None", "}", "\n", "\n", "", "", "decoded_m2i_coref_linker", ".", "append", "(", "b_decoded_m2i_coref_linker", ")", "\n", "span_to_pointers_detail_info", ".", "append", "(", "b_span_to_pointers_detail_info", ")", "\n", "\n", "# example of span_to_pointer_detail_info:", "\n", "# <class 'dict'>:", "\n", "# {(1, 4): {'coref_connection_type': 'root', 'coref_connection_pointer': (1, 4), 'coref_connection_score': -5.024434566497803},", "\n", "# (6, 6): {'coref_connection_type': 'root', 'coref_connection_pointer': (6, 6), 'coref_connection_score': -4.879373073577881},", "\n", "# (9, 9): {'coref_connection_type': 'link', 'coref_connection_pointer': 'Cologne', 'coref_connection_score': 7.0420918464660645},", "\n", "# (10, 10): {'coref_connection_type': 'mention_other', 'coref_connection_pointer': (6, 6), 'coref_connection_score': -4.88646936416626},", "\n", "# (11, 11): {'coref_connection_type': 'root', 'coref_connection_pointer': (11, 11), 'coref_connection_score': 4.993085861206055},", "\n", "# (13, 13): {'coref_connection_type': 'link', 'coref_connection_pointer': 'Germany', 'coref_connection_score': 7.003166675567627},", "\n", "# (13, 16): {'coref_connection_type': 'root', 'coref_connection_pointer': (13, 16), 'coref_connection_score': 6.339137554168701},", "\n", "# (27, 30): {'coref_connection_type': 'root', 'coref_connection_pointer': (27, 30), 'coref_connection_score': 6.166959762573242},", "\n", "# (32, 32): {'coref_connection_type': 'link', 'coref_connection_pointer': 'Cologne', 'coref_connection_score': 6.726534366607666},", "\n", "# (35, 35): {'coref_connection_type': 'root', 'coref_connection_pointer': (35, 35), 'coref_connection_score': 5.208428859710693},", "\n", "# (36, 39): {'coref_connection_type': 'root', 'coref_connection_pointer': (36, 39), 'coref_connection_score': -5.176065444946289},", "\n", "# (42, 42): {'coref_connection_type': 'root', 'coref_connection_pointer': (42, 42), 'coref_connection_score': 6.069662570953369},", "\n", "# (45, 48): {'coref_connection_type': 'root', 'coref_connection_pointer': (45, 48), 'coref_connection_score': 6.158422470092773},", "\n", "# (58, 58): {'coref_connection_type': 'root', 'coref_connection_pointer': (58, 58), 'coref_connection_score': 6.718040466308594},", "\n", "# (59, 59): {'coref_connection_type': 'root', 'coref_connection_pointer': (59, 59), 'coref_connection_score': 5.985378265380859},", "\n", "# (60, 60): {'coref_connection_type': 'root', 'coref_connection_pointer': (60, 60), 'coref_connection_score': 6.3143792152404785}}", "\n", "# example of decoded_m2i_coref_linker:  [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 160, 68, 160, 1, 165, 166, 68, 168, 169, 160, 171, 172, 173, 174, 175]]", "\n", "", "return", "decoded_m2i_coref_linker", ",", "span_to_pointers_detail_info", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.get_mtt_cost_partition": [[894, 930], ["torch.eye", "torch.eye", "torch.eye", "torch.eye", "filtered_scores_exp.sum", "torch.logdet", "torch.logdet", "torch.logdet", "torch.logdet", "RuntimeError"], "methods", ["None"], ["", "def", "get_mtt_cost_partition", "(", "self", ",", "targets_mask", ",", "pred_scores_mtt_exp_space", ",", "type", "=", "'logdet'", ")", ":", "\n", "        ", "targets_scores_exp", "=", "targets_mask", "*", "pred_scores_mtt_exp_space", "\n", "\n", "filtered_scores_exp", "=", "targets_scores_exp", "[", "1", ":", ",", ":", "]", "[", ":", ",", "1", ":", "]", "\n", "# filtered_scores = mask_matrix * scores", "\n", "#", "\n", "# # change a", "\n", "# filtered_scores = filtered_scores[1:, :][:, 1:]", "\n", "#", "\n", "# laplacian_scores = torch.eye(filtered_scores.shape[-2], filtered_scores.shape[-1])", "\n", "# laplacian_scores = laplacian_scores.double()", "\n", "# laplacian_scores = laplacian_scores * filtered_scores.sum(dim=-2)  # main diagonal", "\n", "# laplacian_scores += (filtered_scores * -1.0)", "\n", "#", "\n", "# # change a", "\n", "# # laplacian_minor = laplacian_scores[1:, :][:, 1:]", "\n", "# laplacian_minor = laplacian_scores", "\n", "#", "\n", "# # the laplacian's first row gets replaced", "\n", "# laplacian_minor[0, :] = scores[0][1:]", "\n", "#", "\n", "# mtt_scores = torch.det(laplacian_minor)", "\n", "#", "\n", "# return mtt_scores", "\n", "\n", "laplacian_tgt_scores", "=", "torch", ".", "eye", "(", "filtered_scores_exp", ".", "shape", "[", "-", "2", "]", ",", "filtered_scores_exp", ".", "shape", "[", "-", "1", "]", ",", "\n", "dtype", "=", "self", ".", "torch_float_precision", ",", "device", "=", "settings", ".", "device", ")", "\n", "laplacian_tgt_scores", "=", "laplacian_tgt_scores", "*", "filtered_scores_exp", ".", "sum", "(", "dim", "=", "-", "2", ")", "# main diagonal", "\n", "laplacian_tgt_scores", "=", "laplacian_tgt_scores", "+", "(", "filtered_scores_exp", "*", "-", "1.0", ")", "\n", "laplacian_tgt_scores", "[", "0", ",", ":", "]", "=", "targets_scores_exp", "[", "0", "]", "[", "1", ":", "]", "\n", "\n", "if", "type", "==", "'logdet'", ":", "\n", "            ", "mtt_cost", "=", "torch", ".", "logdet", "(", "laplacian_tgt_scores", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "'not implemented type in get_mtt_cost'", "+", "type", ")", "\n", "", "return", "mtt_cost", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.get_mtt_cost": [[931, 953], ["torch.eye", "torch.eye", "torch.eye", "torch.eye", "targets_scores_exp.sum", "torch.logdet", "torch.logdet", "torch.logdet", "torch.logdet", "torch.det", "torch.det", "torch.det", "torch.det", "RuntimeError"], "methods", ["None"], ["", "def", "get_mtt_cost", "(", "self", ",", "targets_mask", ",", "pred_scores_mtt_exp_space", ",", "type", "=", "'logdet'", ")", ":", "\n", "        ", "targets_scores_exp", "=", "targets_mask", "*", "pred_scores_mtt_exp_space", "\n", "# if self.smart_arsinh:", "\n", "#     targets_scores_exp = targets_mask * (get_smart_arsinh_exp(pred_scores_mtt))", "\n", "# else:", "\n", "#     targets_scores_exp = targets_mask * torch.exp(pred_scores_mtt)", "\n", "\n", "# targets_scores_exp = targets_scores", "\n", "# TODO: instead of unsqueeze(0), implement it in a batched way!!", "\n", "laplacian_tgt_scores", "=", "torch", ".", "eye", "(", "targets_scores_exp", ".", "shape", "[", "-", "2", "]", ",", "targets_scores_exp", ".", "shape", "[", "-", "1", "]", ",", "\n", "dtype", "=", "self", ".", "torch_float_precision", ",", "device", "=", "settings", ".", "device", ")", "\n", "laplacian_tgt_scores", "=", "laplacian_tgt_scores", "*", "targets_scores_exp", ".", "sum", "(", "dim", "=", "-", "2", ")", "# main diagonal", "\n", "laplacian_tgt_scores", "=", "laplacian_tgt_scores", "+", "(", "targets_scores_exp", "*", "-", "1.0", ")", "\n", "\n", "if", "type", "==", "'logdet'", ":", "\n", "# mtt_cost = torch.logdet(laplacian_tgt_scores[1:, :][:, 1:])", "\n", "            ", "mtt_cost", "=", "torch", ".", "logdet", "(", "laplacian_tgt_scores", "[", "1", ":", ",", "1", ":", "]", ")", "\n", "", "elif", "type", "==", "'det'", ":", "\n", "            ", "mtt_cost", "=", "torch", ".", "det", "(", "laplacian_tgt_scores", "[", "1", ":", ",", ":", "]", "[", ":", ",", "1", ":", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "'not implemented type in get_mtt_cost'", "+", "type", ")", "\n", "", "return", "mtt_cost", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.get_mtt_loss": [[954, 1041], ["torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.slogdet", "torch.slogdet", "torch.slogdet", "torch.slogdet", "torch.slogdet", "torch.slogdet", "torch.slogdet", "torch.slogdet", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "targets_scores_exp[].diagonal().sum", "targets_scores_exp.sum", "z_scores_exp[].diagonal().sum", "z_scores_exp.sum", "print", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "pred_scores_mtt[].min().item", "pred_scores_mtt.max().item", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "print", "targets_scores_exp[].diagonal", "z_scores_exp[].diagonal", "z_mask.bool", "pred_scores_mtt[].min", "targets_mask.bool", "pred_scores_mtt.max"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "get_mtt_loss", "(", "self", ",", "targets_mask", ",", "pred_scores_mtt", ",", "z_mask", ",", "torch_float_precision", ",", "print_debugging", "=", "False", ")", ":", "\n", "# if print_debugging:", "\n", "#     to_print_debugging = dict()", "\n", "#     to_print_debugging['target_mask'] = targets_mask[0].tolist()", "\n", "#     to_print_debugging['z_mask'] = z_mask[0].tolist()", "\n", "#     to_print_debugging['scores'] = pred_scores_mtt[0].tolist()", "\n", "\n", "        ", "if", "self", ".", "smart_arsinh", ":", "\n", "            ", "if", "self", ".", "enforce_scores", ":", "\n", "                ", "pred_scores_mtt", "[", "pred_scores_mtt", ">", "self", ".", "max_score_max", "]", "=", "self", ".", "max_score_max", "\n", "pred_scores_mtt", "[", "pred_scores_mtt", "<", "self", ".", "min_score_min", "]", "=", "self", ".", "min_score_min", "\n", "# targets_scores = targets_mask * (get_smart_arsinh_exp(pred_scores_mtt))", "\n", "targets_scores", "=", "targets_mask", "*", "pred_scores_mtt", "\n", "", "else", ":", "\n", "# targets_scores = targets_mask * (get_smart_arsinh_exp(pred_scores_mtt))", "\n", "                ", "targets_scores", "=", "targets_mask", "*", "pred_scores_mtt", "\n", "", "", "else", ":", "\n", "# targets_scores = targets_mask * torch.exp(pred_scores_mtt)", "\n", "            ", "targets_scores", "=", "targets_mask", "*", "pred_scores_mtt", "\n", "\n", "", "targets_scores_exp", "=", "targets_scores", "\n", "assert", "targets_scores_exp", "[", "0", "]", ".", "diagonal", "(", ")", ".", "sum", "(", ")", "==", "0.0", "\n", "# TODO: instead of unsqueeze(0), implement it in a batched way!!", "\n", "laplacian_tgt_scores", "=", "torch", ".", "eye", "(", "targets_scores_exp", ".", "shape", "[", "-", "2", "]", ",", "targets_scores_exp", ".", "shape", "[", "-", "1", "]", ",", "\n", "dtype", "=", "torch_float_precision", ",", "device", "=", "settings", ".", "device", ")", ".", "unsqueeze", "(", "0", ")", "\n", "laplacian_tgt_scores", "=", "laplacian_tgt_scores", "*", "targets_scores_exp", ".", "sum", "(", "dim", "=", "-", "2", ")", "# main diagonal", "\n", "laplacian_tgt_scores", "+=", "(", "targets_scores_exp", "*", "-", "1.0", ")", "\n", "\n", "# torch.max()", "\n", "\n", "if", "self", ".", "smart_arsinh", ":", "\n", "            ", "if", "self", ".", "enforce_scores", ":", "\n", "# pred_targ = pred_scores_mtt[0][targets_mask[0].bool()]", "\n", "# pred_targ[pred_targ < self.min_score_max] = self.min_score_max", "\n", "                ", "z_score_enforcer", "=", "torch", ".", "zeros_like", "(", "pred_scores_mtt", ")", "\n", "z_score_enforcer", "[", "z_mask", ".", "bool", "(", ")", "]", "=", "pred_scores_mtt", "[", "0", "]", ".", "min", "(", ")", ".", "item", "(", ")", "\n", "# z_score_enforcer[targets_mask.bool()] = pred_scores_mtt[targets_mask.bool()]", "\n", "z_score_enforcer", "[", "targets_mask", ".", "bool", "(", ")", "]", "=", "pred_scores_mtt", ".", "max", "(", ")", ".", "item", "(", ")", "\n", "# z_score_enforcer[z_mask.bool()] = self.min_score_min", "\n", "# z_score_enforcer[targets_mask.bool()] = self.max_score_max", "\n", "# z_scores = z_mask * get_smart_arsinh_exp(z_score_enforcer)", "\n", "z_scores", "=", "z_mask", "*", "z_score_enforcer", "\n", "", "else", ":", "\n", "# z_scores = z_mask * get_smart_arsinh_exp(pred_scores_mtt)", "\n", "                ", "z_scores", "=", "z_mask", "*", "pred_scores_mtt", "\n", "", "", "else", ":", "\n", "# z_scores = z_mask * torch.exp(pred_scores_mtt)", "\n", "            ", "z_scores", "=", "z_mask", "*", "pred_scores_mtt", "\n", "\n", "# TODO: instead of unsqueeze(0), implement it in a batched way!!", "\n", "", "z_scores_exp", "=", "z_scores", "\n", "assert", "z_scores_exp", "[", "0", "]", ".", "diagonal", "(", ")", ".", "sum", "(", ")", "==", "0.0", "\n", "laplacian_z_scores", "=", "torch", ".", "eye", "(", "z_scores_exp", ".", "shape", "[", "-", "2", "]", ",", "z_scores_exp", ".", "shape", "[", "-", "1", "]", ",", "\n", "device", "=", "settings", ".", "device", ",", "dtype", "=", "torch_float_precision", ")", ".", "unsqueeze", "(", "0", ")", "\n", "laplacian_z_scores", "=", "laplacian_z_scores", "*", "z_scores_exp", ".", "sum", "(", "dim", "=", "-", "2", ")", "# main diagonal", "\n", "laplacian_z_scores", "+=", "(", "z_scores_exp", "*", "-", "1.0", ")", "\n", "\n", "# get the mtts", "\n", "laplacian_tgt_scores_exp", "=", "laplacian_tgt_scores", "\n", "mtt_det_tgt_scores", "=", "torch", ".", "slogdet", "(", "laplacian_tgt_scores_exp", "[", "0", ",", "1", ":", ",", "1", ":", "]", ")", "\n", "# mtt_det_tgt_scores = torch.det(laplacian_tgt_scores_exp[0, 1:, 1:])", "\n", "laplacian_z_scores_exp", "=", "laplacian_z_scores", "\n", "mtt_det_z_scores", "=", "torch", ".", "slogdet", "(", "laplacian_z_scores_exp", "[", "0", ",", "1", ":", ",", "1", ":", "]", ")", "\n", "\n", "curr_loss", "=", "mtt_det_z_scores", "[", "1", "]", "-", "mtt_det_tgt_scores", "[", "1", "]", "\n", "\n", "# if print_debugging:", "\n", "#     to_print_debugging['z_slogdet'] = mtt_det_z_scores[1].item()", "\n", "#     to_print_debugging['target_slogdet'] = mtt_det_tgt_scores[1].item()", "\n", "#     to_print_debugging['z_laplacian'] = laplacian_z_scores[0].tolist()", "\n", "#     to_print_debugging['target_laplacian'] = laplacian_tgt_scores[0].tolist()", "\n", "#     to_print_debugging['loss'] = curr_loss.item()", "\n", "#     with open('debugging_mtt.json', 'w') as fp:", "\n", "#         json.dump(to_print_debugging, fp)", "\n", "\n", "if", "torch", ".", "isinf", "(", "curr_loss", ")", ":", "\n", "            ", "print", "(", "'!!!!WARNING, CURR LOSS IN INF, setting to 0!!! mtt_det_z_scores[1]'", ",", "mtt_det_z_scores", "[", "1", "]", ",", "\n", "'mtt_det_tgt_scores[1]'", ",", "mtt_det_tgt_scores", "[", "1", "]", ")", "\n", "# curr_loss = 0", "\n", "curr_loss", "=", "None", "\n", "", "elif", "torch", ".", "isnan", "(", "curr_loss", ")", ":", "\n", "            ", "print", "(", "'!!!!WARNING, CURR LOSS IN NAN, setting to 0!!! mtt_det_z_scores[1]'", ",", "mtt_det_z_scores", "[", "1", "]", ",", "\n", "'mtt_det_tgt_scores[1]'", ",", "mtt_det_tgt_scores", "[", "1", "]", ")", "\n", "# curr_loss = 0", "\n", "curr_loss", "=", "None", "\n", "\n", "", "return", "curr_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.forward": [[1042, 1893], ["linker.get", "modules.misc.misc.batched_index_select", "modules.misc.misc.batched_index_select", "modules.misc.misc.batched_index_select().squeeze", "modules.misc.misc.batched_index_select.to", "modules.tasks.coreflinker.create_candidate_mask().float().to", "list", "list", "coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.entity_dictionary.lookup", "modules.misc.misc.batched_index_select.to.view", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "coreflinker_mtt_hoi.create_coreflinker_mtt_z_mask_indexed", "coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.create_scores_mtt_pred", "RuntimeError", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.tensor.append", "torch.tensor.append", "list.append", "scores.double.double.double", "coreflinker_mtt_hoi.get_smart_arsinh_exp", "torch.norm().item", "torch.norm().item", "torch.norm().item", "torch.norm().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.std().item", "torch.std().item", "torch.std().item", "torch.std().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.stat_span_span_norm.append", "coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.stat_span_span_mean.append", "coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.stat_span_span_std.append", "coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.stat_span_span_min.append", "coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.stat_span_span_max.append", "z_mask.double.double.double", "coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.create_coreflinker_mtt_target_mask_multihead", "coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.get_mtt_loss", "isinstance", "coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.entity_dictionary.lookup", "time.time", "util.edmonds.mst_only_tree", "time.time", "enumerate", "list", "enumerate", "list", "enumerate", "coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.decode_m2i_coreflinker_mtt", "list", "modules.misc.misc.batched_index_select().squeeze.max().item", "modules.utils.misc.predict_scores_mtt", "coreflinker_mtt_hoi.predict_scores_coref_mtt", "modules.misc.misc.batched_index_select", "modules.tasks.coreflinker.create_candidate_mask().float", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.norm().item", "torch.norm().item", "torch.norm().item", "torch.norm().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.std().item", "torch.std().item", "torch.std().item", "torch.std().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.min().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.stat_link_span_norm.append", "coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.stat_link_span_mean.append", "coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.stat_link_span_std.append", "coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.stat_link_span_min.append", "coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.stat_link_span_max.append", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "torch.save", "torch.save", "torch.save", "torch.save", "coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.get_mtt_loss", "coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.create_coreflinker_mtt_target_mask_prod", "coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.get_mtt_cost", "RuntimeError", "coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.mtt_hoi_loss.append", "coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.mtt_hoi_loss.append", "torch.arcsinh", "torch.arcsinh", "torch.arcsinh", "torch.arcsinh", "min", "candidates[].unique", "candidate_ids.append", "list.append", "enumerate", "list.append", "zip", "modules.tasks.coreflinker.remove_disabled_spans", "modules.tasks.coreflinker.remove_disabled_spans_linking", "dict", "to_log_scores[].tolist", "z_mask.double.double.tolist", "targets_mask.tolist", "dict", "range", "list", "dict", "dict", "range", "set", "set", "range", "set", "set", "set.difference", "dict", "dict", "dict", "enumerate", "enumerate", "coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.item", "dict", "enumerate", "modules.misc.misc.batched_index_select().squeeze.unsqueeze", "torch.arcsinh", "torch.arcsinh", "torch.arcsinh", "torch.arcsinh", "torch.arcsinh", "torch.arcsinh", "torch.arcsinh", "torch.arcsinh", "to_analyze_span_span_mask.bool", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.std", "torch.std", "torch.std", "torch.std", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "list", "list", "list", "len", "len", "list", "list", "list", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.get_mtt_cost", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "print", "coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.item", "torch.log", "torch.log", "torch.log", "torch.log", "torch.arcsinh.min().item", "torch.arcsinh.min().item", "dict", "coreflinker_mtt_hoi.m2i_to_clusters_linkercoref_mtt", "coreflinker_mtt_hoi.convert_coref_mtt", "list.append", "modules.misc.misc.batched_index_select().squeeze.max", "output_coref[].copy", "output_linking[].copy", "modules.tasks.coreflinker.remove_disabled_spans", "modules.tasks.coreflinker.remove_disabled_spans_linking", "modules.tasks.coreflinker.remove_disabled_scores_coref", "modules.tasks.coreflinker.remove_disabled_scores_linking", "modules.tasks.coreflinker.remove_singletons_without_link", "modules.tasks.coreflinker.remove_disabled_spans_linking", "modules.tasks.coreflinker.remove_disabled_scores_coref", "modules.tasks.coreflinker.remove_disabled_scores_linking", "torch.log", "torch.log", "torch.log", "torch.log", "range", "dict.values", "range", "set.add", "list", "range", "to_print_clusters.append", "coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.entity_dictionary.get", "items.append", "items.append", "tnci.tolist", "tnni.tolist", "coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.item", "coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.item", "coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.item", "len", "zip", "curr_span_cand_length.item", "set", "curr_o_coref.copy", "clusters_pred.append", "set", "curr_o_coref.copy", "clusters_all.append", "open", "json.dump", "modules.tasks.coreflinker.create_candidate_mask", "to_analyze_link_span_mask.bool", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.std", "torch.std", "torch.std", "torch.std", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.state_dict", "target_not_nil_indices.tolist", "coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.get_mtt_cost_partition", "range", "print", "candidate_ids_b.size", "modules.tasks.coreflinker.convert_coref", "zip", "set", "list.append", "curr_link.item", "curr_span_candidates.tolist", "coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.entity_dictionary.get", "len", "len", "os.path.join", "modules.misc.misc.batched_index_select.to.size", "list.append", "list.append", "curr_targets_mask.clone", "torch.log", "torch.log", "torch.log", "torch.log", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.arcsinh.min", "torch.arcsinh.min", "link_dict_id.item", "link_id_to_coref_col_batch.items", "candidate_ids_b.size", "modules.tasks.coreflinker.m2i_to_clusters_linkercoref", "[].item", "link_id_to_cluster[].append", "len", "span_id_to_span_id[].append", "len", "len", "list", "cluster_link_indexes_to_mtt_matrix.append", "cluster_link_indexes_to_mtt_matrix.append", "coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.item", "curr_nil_cluster_indices.tolist", "coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.get_mtt_cost", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "tot_cost_curr_cluster_logdet.append", "coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.get_mtt_cost", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "print", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "print", "print", "list.append", "torch.log", "torch.log", "torch.log", "torch.log", "x.tolist", "len", "len", "list.append", "set.add", "set", "existing_cluster.append", "set.add", "cluster_link.append", "cluster_link_indexes_to_mtt_matrix.append", "set.add", "cluster_link.append", "cluster_link_indexes_to_mtt_matrix.append", "print", "print", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "print", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "tot_log_cost_nil_clusters_exp_trick.item", "torch.log", "torch.log", "torch.log", "torch.log", "list.extend", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.batched_index_select", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.batched_index_select", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt.create_coreflinker_mtt_z_mask_indexed", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt.create_scores_mtt_pred", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt_hoi.get_smart_arsinh_exp", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt.create_coreflinker_mtt_target_mask_multihead", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt.get_mtt_loss", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.edmonds.mst_only_tree", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt.decode_m2i_coreflinker_mtt", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.misc.predict_scores_mtt", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt.predict_scores_coref_mtt", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.batched_index_select", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt.get_mtt_loss", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.create_coreflinker_mtt_target_mask_prod", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.get_mtt_cost", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coref.remove_disabled_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.remove_disabled_spans_linking", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.get_mtt_cost", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt.m2i_to_clusters_linkercoref_mtt", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt.convert_coref_mtt", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coref.remove_disabled_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.remove_disabled_spans_linking", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.remove_disabled_scores_coref", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.remove_disabled_scores_linking", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.remove_singletons_without_link", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.remove_disabled_spans_linking", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.remove_disabled_scores_coref", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.remove_disabled_scores_linking", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.create_candidate_mask", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.get_mtt_cost_partition", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.convert_coref", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.m2i_to_clusters_linkercoref", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.get_mtt_cost", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.get_mtt_cost", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log"], ["", "def", "forward", "(", "self", ",", "scores", ",", "gold_m2i", ",", "filtered_spans", ",", "gold_spans", ",", "linker", ",", "\n", "predict", "=", "False", ",", "pruner_spans", "=", "None", ",", "ner_spans", "=", "None", ",", "api_call", "=", "False", ",", "only_loss", "=", "False", ")", ":", "\n", "        ", "output", "=", "{", "}", "\n", "output_coref", "=", "{", "}", "\n", "output_linking", "=", "{", "}", "\n", "\n", "if", "self", ".", "enabled", "and", "scores", "is", "not", "None", ":", "\n", "# pruned_spans = filtered_spans['spans']", "\n", "\n", "            ", "linker_candidates", "=", "linker", "[", "'candidates'", "]", "\n", "candidate_lengths", "=", "linker", "[", "'candidate_lengths'", "]", "\n", "targets", "=", "linker", ".", "get", "(", "'targets'", ")", "\n", "prune_indices_hoi", "=", "filtered_spans", "[", "'prune_indices_hoi'", "]", "\n", "# linker_candidates.shape --> torch.Size([1, 335, 16])", "\n", "# prune_indices_hoi.shape --> torch.Size([1, 21])", "\n", "linker_candidates", "=", "batched_index_select", "(", "linker_candidates", ",", "prune_indices_hoi", ")", "\n", "# linker_candidates.shape --> torch.Size([1, 21, 16])", "\n", "# targets.shape --> torch.Size([1, 335, 16])", "\n", "targets", "=", "batched_index_select", "(", "targets", ",", "prune_indices_hoi", ")", "\n", "# targets.shape --> torch.Size([1, 21, 16])", "\n", "# candidate_lengths.shape --> torch.Size([1, 335])", "\n", "candidate_lengths", "=", "batched_index_select", "(", "candidate_lengths", ".", "unsqueeze", "(", "-", "1", ")", ",", "prune_indices_hoi", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "# candidate_lengths.shape --> torch.Size([1, 21])", "\n", "if", "not", "self", ".", "end_to_end", ":", "\n", "                ", "raise", "RuntimeError", "(", "'LossCorefLinkerMTTHoi has not end-to-end'", ")", "\n", "#     # if it is end-to-end, we only select the candidates pruned by pruner in order to avoid", "\n", "#     #   using too much memory", "\n", "#     pred_spans_idx = filtered_spans['prune_indices']", "\n", "# else:", "\n", "#     pred_spans_idx = filtered_spans['reindex_wrt_gold']", "\n", "#     linker_candidates = batched_index_select(linker_candidates, pred_spans_idx)", "\n", "#     targets = batched_index_select(targets, pred_spans_idx)", "\n", "#     candidate_lengths = batched_index_select(candidate_lengths.unsqueeze(-1), pred_spans_idx).squeeze(-1)", "\n", "\n", "", "candidates", "=", "linker_candidates", ".", "to", "(", "settings", ".", "device", ")", "# torch.Size([1, 9, 17])", "\n", "# candidates.shape --> torch.Size([1, 21, 16])", "\n", "# nill_id = self.entity_dictionary.lookup('NILL')", "\n", "#", "\n", "linker_mask", "=", "create_candidate_mask", "(", "candidates", ".", "size", "(", "-", "1", ")", ",", "candidate_lengths", ")", ".", "float", "(", ")", ".", "to", "(", "settings", ".", "device", ")", "\n", "# linker_mask.shape --> torch.Size([1, 21, 16])", "\n", "\n", "unique_links_batches", "=", "list", "(", ")", "\n", "unique_links_lengths", "=", "list", "(", ")", "\n", "nill_id", "=", "self", ".", "entity_dictionary", ".", "lookup", "(", "'NILL'", ")", "\n", "for", "content_batch", "in", "candidates", ".", "view", "(", "candidates", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ":", "\n", "                ", "unique_batch_content", "=", "torch", ".", "unique", "(", "content_batch", ")", "\n", "unique_batch_content", "=", "unique_batch_content", "[", "unique_batch_content", "!=", "self", ".", "unknown_dict", "]", "\n", "unique_batch_content", "=", "unique_batch_content", "[", "unique_batch_content", "!=", "nill_id", "]", "\n", "unique_links_lengths", ".", "append", "(", "unique_batch_content", ".", "shape", "[", "0", "]", ")", "\n", "unique_links_batches", ".", "append", "(", "unique_batch_content", ")", "\n", "", "unique_links", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pad_sequence", "(", "unique_links_batches", ",", "batch_first", "=", "True", ")", "\n", "unique_links_lengths", "=", "torch", ".", "tensor", "(", "unique_links_lengths", ",", "dtype", "=", "torch", ".", "int32", ",", "device", "=", "settings", ".", "device", ")", "\n", "\n", "# targets = batched_index_select(targets, pred_spans_idx)", "\n", "linker_target", "=", "targets", "*", "linker_mask", "\n", "\n", "# pruned_spans = filtered_spans['spans']", "\n", "# TODO: correct 'pruned_spans' instead of 'spans'", "\n", "pruned_spans", "=", "filtered_spans", "[", "'pruned_spans'", "]", "\n", "# len(pruned_spans[0]) --> 21", "\n", "# targets_mask.shape --> torch.Size([1, 89, 89])", "\n", "#", "\n", "#", "\n", "#", "\n", "z_mask", ",", "z_mask_lengths", "=", "create_coreflinker_mtt_z_mask_indexed", "(", "pruned_spans", ",", "gold_spans", ",", "gold_m2i", ",", "\n", "linker_target", ",", "\n", "candidates", ",", "\n", "candidate_lengths", "=", "candidate_lengths", ",", "\n", "unique_links", "=", "unique_links", ",", "\n", "unique_links_lengths", "=", "unique_links_lengths", ",", "\n", "unknown_id", "=", "self", ".", "unknown_dict", ")", "\n", "# z_mask.shape --> torch.Size([1, 89, 89])", "\n", "#", "\n", "#", "\n", "#", "\n", "\n", "if", "self", ".", "float_precision", "==", "'float64'", ":", "\n", "                ", "scores", "=", "scores", ".", "double", "(", ")", "\n", "\n", "# scores to mtt matrix,", "\n", "# TODO: implement this in batched way, returning also the mask_lengths", "\n", "#  as in create_coreflinker_mtt_target_mask and create_coreflinker_mtt_z_mask", "\n", "", "pred_scores_mtt", "=", "self", ".", "create_scores_mtt_pred", "(", "scores", ",", "unique_links", ",", "candidates", ",", "candidate_lengths", ",", "\n", "torch_float_precision", "=", "self", ".", "torch_float_precision", ")", "\n", "\n", "# first passes to the exponential space", "\n", "if", "self", ".", "nonlinear_function", "==", "'arsinh'", "and", "self", ".", "smart_arsinh", ":", "\n", "                ", "pred_scores_mtt_exp_space", "=", "get_smart_arsinh_exp", "(", "pred_scores_mtt", ")", "\n", "", "elif", "self", ".", "nonlinear_function", "==", "'arsinh'", "and", "not", "self", ".", "smart_arsinh", ":", "\n", "                ", "pred_scores_mtt_exp_space", "=", "torch", ".", "exp", "(", "torch", ".", "arcsinh", "(", "pred_scores_mtt", ")", ")", "\n", "", "else", ":", "\n", "                ", "pred_scores_mtt_exp_space", "=", "torch", ".", "exp", "(", "pred_scores_mtt", ")", "\n", "\n", "", "if", "self", ".", "print_debugging", ":", "\n", "# some extra debugging info gathering to understand why loss is sometimes in nan", "\n", "# tb_logger.log_value('{}-mtt-norm-link_span', None, step_nr)", "\n", "# tb_logger.log_value('{}-mtt-mean-link_span', None, step_nr)", "\n", "# tb_logger.log_value('{}-mtt-std-link_span', None, step_nr)", "\n", "# tb_logger.log_value('{}-mtt-min-link_span', None, step_nr)", "\n", "# tb_logger.log_value('{}-mtt-max-link_span', None, step_nr)", "\n", "\n", "                ", "if", "self", ".", "nonlinear_function", "==", "'arsinh'", ":", "\n", "                    ", "to_analyze", "=", "torch", ".", "arcsinh", "(", "pred_scores_mtt", ")", "*", "z_mask", "\n", "", "else", ":", "\n", "                    ", "to_analyze", "=", "pred_scores_mtt", "*", "z_mask", "\n", "", "if", "unique_links", ".", "shape", "[", "1", "]", ">", "0", ":", "\n", "                    ", "to_analyze_link_span", "=", "to_analyze", "[", "0", ",", "1", ":", "1", "+", "unique_links", ".", "shape", "[", "1", "]", ",", ":", "]", "[", ":", ",", "\n", "1", "+", "unique_links", ".", "shape", "[", "1", "]", ":", "]", "\n", "to_analyze_link_span_mask", "=", "z_mask", "[", "0", ",", "1", ":", "1", "+", "unique_links", ".", "shape", "[", "1", "]", ",", ":", "]", "[", ":", ",", "\n", "1", "+", "unique_links", ".", "shape", "[", "1", "]", ":", "]", "\n", "to_analyze_link_span", "=", "to_analyze_link_span", "[", "to_analyze_link_span_mask", ".", "bool", "(", ")", "]", "\n", "norm_link_span", "=", "torch", ".", "norm", "(", "to_analyze_link_span", ")", ".", "item", "(", ")", "\n", "mean_link_span", "=", "torch", ".", "mean", "(", "to_analyze_link_span", ")", ".", "item", "(", ")", "\n", "std_link_span", "=", "torch", ".", "std", "(", "to_analyze_link_span", ")", ".", "item", "(", ")", "\n", "min_link_span", "=", "torch", ".", "min", "(", "to_analyze_link_span", ")", ".", "item", "(", ")", "\n", "max_link_span", "=", "torch", ".", "max", "(", "to_analyze_link_span", ")", ".", "item", "(", ")", "\n", "self", ".", "stat_link_span_norm", ".", "append", "(", "norm_link_span", ")", "\n", "self", ".", "stat_link_span_mean", ".", "append", "(", "mean_link_span", ")", "\n", "self", ".", "stat_link_span_std", ".", "append", "(", "std_link_span", ")", "\n", "self", ".", "stat_link_span_min", ".", "append", "(", "min_link_span", ")", "\n", "self", ".", "stat_link_span_max", ".", "append", "(", "max_link_span", ")", "\n", "\n", "", "to_analyze_span_span", "=", "to_analyze", "[", "0", ",", "1", "+", "unique_links", ".", "shape", "[", "1", "]", ":", ",", ":", "]", "[", ":", ",", "\n", "1", "+", "unique_links", ".", "shape", "[", "1", "]", ":", "]", "\n", "\n", "to_analyze_span_span_mask", "=", "z_mask", "[", "0", ",", "1", "+", "unique_links", ".", "shape", "[", "1", "]", ":", ",", ":", "]", "[", ":", ",", "\n", "1", "+", "unique_links", ".", "shape", "[", "1", "]", ":", "]", "\n", "to_analyze_span_span", "=", "to_analyze_span_span", "[", "to_analyze_span_span_mask", ".", "bool", "(", ")", "]", "\n", "norm_span_span", "=", "torch", ".", "norm", "(", "to_analyze_span_span", ")", ".", "item", "(", ")", "\n", "mean_span_span", "=", "torch", ".", "mean", "(", "to_analyze_span_span", ")", ".", "item", "(", ")", "\n", "std_span_span", "=", "torch", ".", "std", "(", "to_analyze_span_span", ")", ".", "item", "(", ")", "\n", "min_span_span", "=", "torch", ".", "min", "(", "to_analyze_span_span", ")", ".", "item", "(", ")", "\n", "max_span_span", "=", "torch", ".", "max", "(", "to_analyze_span_span", ")", ".", "item", "(", ")", "\n", "self", ".", "stat_span_span_norm", ".", "append", "(", "norm_span_span", ")", "\n", "self", ".", "stat_span_span_mean", ".", "append", "(", "mean_span_span", ")", "\n", "self", ".", "stat_span_span_std", ".", "append", "(", "std_span_span", ")", "\n", "self", ".", "stat_span_span_min", ".", "append", "(", "min_span_span", ")", "\n", "self", ".", "stat_span_span_max", ".", "append", "(", "max_span_span", ")", "\n", "\n", "", "if", "self", ".", "float_precision", "==", "'float64'", ":", "\n", "# pred_scores_mtt_exp_space = pred_scores_mtt_exp_space.double()", "\n", "                ", "z_mask", "=", "z_mask", ".", "double", "(", ")", "\n", "\n", "", "tot_loss", "=", "None", "\n", "if", "self", ".", "multihead_nil", "==", "'multihead_old'", ":", "\n", "                ", "targets_mask", ",", "target_mask_lengths", ",", "batched_multiheads", "=", "self", ".", "create_coreflinker_mtt_target_mask_multihead", "(", "pruned_spans", ",", "gold_spans", ",", "gold_m2i", ",", "linker_target", ",", "\n", "candidates", ",", "unique_links", ",", "unique_links_lengths", ")", "\n", "#", "\n", "# want to be sure that the dimensions match to the ones expected, if no match, then print the details of the problem", "\n", "expected_dim", "=", "candidates", ".", "shape", "[", "-", "2", "]", "+", "1", "+", "unique_links", ".", "shape", "[", "-", "1", "]", "\n", "if", "expected_dim", "!=", "pred_scores_mtt_exp_space", ".", "shape", "[", "-", "1", "]", "or", "expected_dim", "!=", "pred_scores_mtt_exp_space", ".", "shape", "[", "-", "2", "]", "or", "targets_mask", ".", "shape", "[", "-", "1", "]", "!=", "pred_scores_mtt_exp_space", ".", "shape", "[", "-", "1", "]", "or", "targets_mask", ".", "shape", "[", "-", "2", "]", "!=", "pred_scores_mtt_exp_space", ".", "shape", "[", "-", "2", "]", ":", "\n", "                    ", "print", "(", "'!!!ERROR IN DIMENSIONS!!! SOMETHING GOT WRONG, printing the details of hyperparameters'", ")", "\n", "print", "(", "'the expected dim is: '", ",", "expected_dim", ")", "\n", "print", "(", "'the shape in pred_scores_mtt_exp_space is: '", ",", "pred_scores_mtt_exp_space", ".", "shape", ")", "\n", "print", "(", "'target mask.shape: '", ",", "targets_mask", ".", "shape", ")", "\n", "print", "(", "'scores.shape: '", ",", "scores", ".", "shape", ")", "\n", "print", "(", "'unique_links.shape: '", ",", "unique_links", ".", "shape", ")", "\n", "print", "(", "'unique_links content: '", ",", "list", "(", "unique_links", "[", "0", "]", ")", ")", "\n", "print", "(", "'candidates.shape: '", ",", "candidates", ".", "shape", ")", "\n", "print", "(", "'candidates content: '", ",", "list", "(", "candidates", "[", "0", "]", ")", ")", "\n", "print", "(", "'candidate_lengths.shape: '", ",", "candidate_lengths", ".", "shape", ")", "\n", "print", "(", "'candidate_lengths content: '", ",", "list", "(", "candidate_lengths", ")", ")", "\n", "\n", "# here serializes the model and other objects parameters to the function", "\n", "torch", ".", "save", "(", "{", "'scores'", ":", "scores", ",", "\n", "'gold_m2i'", ":", "gold_m2i", ",", "\n", "'filtered_spans'", ":", "filtered_spans", ",", "\n", "'gold_spans'", ":", "gold_spans", ",", "\n", "'linker'", ":", "linker", ",", "\n", "'predict'", ":", "predict", ",", "\n", "'pruner_spans'", ":", "pruner_spans", ",", "\n", "'ner_spans'", ":", "ner_spans", ",", "\n", "'api_call'", ":", "api_call", ",", "\n", "'model_state'", ":", "self", ".", "state_dict", "(", ")", "}", ",", "'failed_model_scores.bin'", ")", "\n", "\n", "", "tot_loss", "=", "self", ".", "get_mtt_loss", "(", "targets_mask", "=", "targets_mask", ",", "pred_scores_mtt", "=", "pred_scores_mtt_exp_space", ",", "\n", "z_mask", "=", "z_mask", ",", "torch_float_precision", "=", "self", ".", "torch_float_precision", ",", "\n", "print_debugging", "=", "self", ".", "print_debugging", ")", "\n", "\n", "for", "curr_multihead", "in", "batched_multiheads", "[", "0", "]", ":", "\n", "                    ", "curr_targets_mask", "=", "curr_multihead", "[", "'mtt_targets'", "]", "\n", "indices", "=", "curr_multihead", "[", "'indices'", "]", "\n", "curr_pred_scores_mtt", "=", "pred_scores_mtt_exp_space", "[", "0", ",", "indices", ",", ":", "]", "[", ":", ",", "indices", "]", "\n", "curr_z_mask", "=", "z_mask", "[", "0", ",", "indices", ",", ":", "]", "[", ":", ",", "indices", "]", "\n", "curr_loss", "=", "self", ".", "get_mtt_loss", "(", "targets_mask", "=", "curr_targets_mask", ",", "pred_scores_mtt", "=", "curr_pred_scores_mtt", ",", "\n", "z_mask", "=", "curr_z_mask", ",", "torch_float_precision", "=", "self", ".", "torch_float_precision", ",", "\n", "# for now do not print multihead matrices anyway", "\n", "print_debugging", "=", "False", ")", "\n", "if", "curr_loss", "is", "not", "None", ":", "\n", "                        ", "if", "tot_loss", "is", "not", "None", ":", "\n", "                            ", "tot_loss", "=", "tot_loss", "+", "curr_loss", "\n", "", "else", ":", "\n", "                            ", "tot_loss", "=", "curr_loss", "\n", "", "", "", "", "elif", "self", ".", "multihead_nil", "==", "'multihead_prod'", ":", "\n", "# targets_mask, target_mask_lengths, batched_multiheads = \\", "\n", "                ", "if", "predict", "and", "not", "only_loss", ":", "\n", "                    ", "if", "self", ".", "print_debugging_matrices", ":", "\n", "                        ", "pass", "# import pdb;", "\n", "# pdb.set_trace()", "\n", "\n", "", "", "targets_mask", ",", "target_not_nil_indices", ",", "target_nil_clusters_indices", ",", "target_mask_lengths", "=", "self", ".", "create_coreflinker_mtt_target_mask_prod", "(", "pruned_spans", ",", "gold_spans", ",", "gold_m2i", ",", "linker_target", ",", "\n", "candidates", ",", "unique_links", ",", "unique_links_lengths", ")", "\n", "# for now batch size 1", "\n", "assert", "len", "(", "target_not_nil_indices", ")", "==", "1", "\n", "assert", "len", "(", "target_nil_clusters_indices", ")", "==", "1", "\n", "target_not_nil_indices", "=", "target_not_nil_indices", "[", "0", "]", "\n", "target_nil_clusters_indices", "=", "target_nil_clusters_indices", "[", "0", "]", "\n", "z_log_cost", "=", "self", ".", "get_mtt_cost", "(", "z_mask", "[", "0", "]", ",", "pred_scores_mtt_exp_space", "[", "0", "]", ",", "type", "=", "'logdet'", ")", "\n", "tot_loss", "=", "z_log_cost", "\n", "\n", "#####################BEGIN: todo COMMENT ONLY FOR DEBUGGING PURPOSES", "\n", "# TODO: assert that the intersection between between all the indices is only 0 (root)", "\n", "# TODO: assert that the distinct union of all the indices is equal to the size of the z_mask matrix", "\n", "# indices_list = list()", "\n", "# already_added = set()", "\n", "# if target_not_nil_indices.shape[-1] > 1:", "\n", "#     indices_list.extend(target_not_nil_indices.tolist())", "\n", "#     already_added = already_added.union(set(target_not_nil_indices.tolist()))", "\n", "#", "\n", "# for curr_nil_cluster_indices in target_nil_clusters_indices:", "\n", "#     if len(indices_list) == 0:", "\n", "#         indices_list.extend(curr_nil_cluster_indices.tolist())", "\n", "#         already_added = already_added.union(set(curr_nil_cluster_indices.tolist()))", "\n", "#     else:", "\n", "#         indices_list.extend(curr_nil_cluster_indices.tolist()[1:])", "\n", "#         already_added = already_added.union(set(curr_nil_cluster_indices.tolist()[1:]))", "\n", "# indices_list = sorted(indices_list)", "\n", "# assert len(indices_list) == len(already_added)", "\n", "# assert len(indices_list) == z_mask.shape[-1]", "\n", "#####################END: todo COMMENT ONLY FOR DEBUGGING PURPOSES", "\n", "\n", "if", "self", ".", "print_debugging_matrices", "and", "(", "predict", "and", "not", "only_loss", ")", ":", "\n", "                    ", "debug_nil_clusters_weights", "=", "list", "(", ")", "\n", "debug_nil_cluster_idxs_in_matrix", "=", "list", "(", ")", "\n", "debug_not_nil_idxs_in_matrix", "=", "list", "(", ")", "\n", "\n", "", "if", "self", ".", "print_debugging_matrices", "and", "(", "predict", "and", "not", "only_loss", ")", ":", "\n", "                    ", "not_nil_log_cost", "=", "torch", ".", "Tensor", "(", "[", "0.0", "]", ")", "\n", "# if there are actually not nil clusters predicted:", "\n", "", "if", "target_not_nil_indices", ".", "shape", "[", "-", "1", "]", ">", "1", ":", "\n", "                    ", "if", "self", ".", "print_debugging_matrices", "and", "(", "predict", "and", "not", "only_loss", ")", ":", "\n", "                        ", "debug_not_nil_idxs_in_matrix", "=", "target_not_nil_indices", ".", "tolist", "(", ")", "\n", "\n", "", "targets_mask_not_nil", "=", "targets_mask", "[", "0", ",", "target_not_nil_indices", ",", ":", "]", "[", ":", ",", "target_not_nil_indices", "]", "\n", "pred_scores_not_nil", "=", "pred_scores_mtt_exp_space", "[", "0", ",", "target_not_nil_indices", ",", ":", "]", "[", ":", ",", "\n", "target_not_nil_indices", "]", "\n", "not_nil_log_cost", "=", "self", ".", "get_mtt_cost", "(", "targets_mask_not_nil", ",", "pred_scores_not_nil", ",", "type", "=", "'logdet'", ")", "\n", "tot_loss", "=", "tot_loss", "-", "not_nil_log_cost", "\n", "\n", "", "tot_log_cost_nil_clusters", "=", "None", "\n", "\n", "if", "self", ".", "nil_partition_implementation", ":", "\n", "# implementation based on \"3.1. Partition functions via matrix determinants\" of", "\n", "# https://www.aclweb.org/anthology/D07-1015/", "\n", "# print('nil_partition_implementation to implement')", "\n", "                    ", "for", "curr_nil_cluster_indices", "in", "target_nil_clusters_indices", ":", "\n", "                        ", "curr_targets_mask", "=", "targets_mask", "[", "0", ",", "curr_nil_cluster_indices", ",", ":", "]", "[", ":", ",", "curr_nil_cluster_indices", "]", "\n", "curr_pred_scores", "=", "pred_scores_mtt_exp_space", "[", "0", ",", "curr_nil_cluster_indices", ",", ":", "]", "[", ":", ",", "\n", "curr_nil_cluster_indices", "]", "\n", "curr_nil_cost_logdet", "=", "self", ".", "get_mtt_cost_partition", "(", "curr_targets_mask", ",", "curr_pred_scores", ",", "\n", "type", "=", "'logdet'", ")", "\n", "if", "tot_log_cost_nil_clusters", "is", "None", ":", "\n", "                            ", "tot_log_cost_nil_clusters", "=", "curr_nil_cost_logdet", "\n", "", "else", ":", "\n", "                            ", "tot_log_cost_nil_clusters", "=", "tot_log_cost_nil_clusters", "+", "curr_nil_cost_logdet", "\n", "\n", "", "if", "self", ".", "print_debugging_matrices", "and", "(", "predict", "and", "not", "only_loss", ")", ":", "\n", "                            ", "debug_nil_clusters_weights", ".", "append", "(", "curr_nil_cost_logdet", ".", "item", "(", ")", ")", "\n", "debug_nil_cluster_idxs_in_matrix", ".", "append", "(", "curr_nil_cluster_indices", ".", "tolist", "(", ")", ")", "\n", "# tot_loss = tot_loss - curr_nil_cost_logdet", "\n", "# pass", "\n", "# pass  # TODO", "\n", "", "", "", "else", ":", "\n", "                    ", "for", "curr_nil_cluster_indices", "in", "target_nil_clusters_indices", ":", "\n", "                        ", "curr_targets_mask", "=", "targets_mask", "[", "0", ",", "curr_nil_cluster_indices", ",", ":", "]", "[", ":", ",", "curr_nil_cluster_indices", "]", "\n", "# curr_targets_mask = curr_targets_mask", "\n", "curr_pred_scores", "=", "pred_scores_mtt_exp_space", "[", "0", ",", "curr_nil_cluster_indices", ",", ":", "]", "[", ":", ",", "\n", "curr_nil_cluster_indices", "]", "\n", "nr_spans", "=", "curr_nil_cluster_indices", ".", "shape", "[", "-", "1", "]", "-", "1", "\n", "\n", "tot_cost_curr_cluster", "=", "None", "\n", "# to be used for exp_trick, different var to first check if this trick actually gives equal loss", "\n", "tot_cost_curr_cluster_logdet", "=", "[", "]", "\n", "max_log_det", "=", "None", "\n", "# from 1 and to nr_spans + 1 because of the root node", "\n", "for", "curr_span_idx", "in", "range", "(", "1", ",", "nr_spans", "+", "1", ")", ":", "\n", "# this clone (try with detach?) is done in hope to prevent the following error when doing backprop:", "\n", "#  RuntimeError: one of the variables needed for gradient computation has been modified by an", "\n", "#  inplace operation: [torch.FloatTensor [1, 3, 3]] is at version 4; expected version 2 instead.", "\n", "#  Hint: the backtrace further above shows the operation that failed to compute its gradient.", "\n", "#  The variable in question was changed in there or anywhere later. Good luck!", "\n", "# TODO: detach() doesn't seem to work, so using clone()", "\n", "# curr_targets_mask_loop = curr_targets_mask.detach()", "\n", "                            ", "curr_targets_mask_loop", "=", "curr_targets_mask", ".", "clone", "(", ")", "\n", "curr_targets_mask_loop", "[", "0", ",", ":", "]", "=", "0", "# 0 from root to the rest of the spans", "\n", "curr_targets_mask_loop", "[", "0", ",", "curr_span_idx", "]", "=", "1", "\n", "# NOT log cost, but just determinant based cost of a particular connection!", "\n", "if", "self", ".", "exp_trick", ":", "\n", "                                ", "curr_nil_cost_logdet", "=", "self", ".", "get_mtt_cost", "(", "curr_targets_mask_loop", ",", "curr_pred_scores", ",", "\n", "type", "=", "'logdet'", ")", "\n", "# if self.print_debugging:", "\n", "if", "torch", ".", "isinf", "(", "curr_nil_cost_logdet", ")", ":", "\n", "                                    ", "print", "(", "'WARNING, torch.isinf(curr_nil_cost_logdet)'", ")", "\n", "# import pdb", "\n", "# pdb.set_trace()", "\n", "continue", "\n", "", "if", "torch", ".", "isnan", "(", "curr_nil_cost_logdet", ")", ":", "\n", "                                    ", "print", "(", "'WARNING, torch.isnan(curr_nil_cost_logdet)'", ")", "\n", "# import pdb", "\n", "# pdb.set_trace()", "\n", "continue", "\n", "\n", "", "tot_cost_curr_cluster_logdet", ".", "append", "(", "curr_nil_cost_logdet", ")", "\n", "if", "max_log_det", "is", "None", ":", "\n", "                                    ", "max_log_det", "=", "curr_nil_cost_logdet", "\n", "", "elif", "max_log_det", "<", "curr_nil_cost_logdet", ":", "\n", "                                    ", "max_log_det", "=", "curr_nil_cost_logdet", "\n", "", "", "else", ":", "\n", "                                ", "curr_nil_cost", "=", "self", ".", "get_mtt_cost", "(", "curr_targets_mask_loop", ",", "curr_pred_scores", ",", "type", "=", "'det'", ")", "\n", "if", "tot_cost_curr_cluster", "is", "None", ":", "\n", "                                    ", "tot_cost_curr_cluster", "=", "curr_nil_cost", "\n", "", "else", ":", "\n", "                                    ", "tot_cost_curr_cluster", "=", "tot_cost_curr_cluster", "+", "curr_nil_cost", "\n", "\n", "", "", "", "if", "self", ".", "exp_trick", ":", "\n", "                            ", "if", "max_log_det", "is", "None", "or", "torch", ".", "isnan", "(", "max_log_det", ")", ":", "\n", "                                ", "print", "(", "'WARNING, torch.isnan(max_log_det) or None: '", ",", "max_log_det", ")", "\n", "# import pdb", "\n", "# pdb.set_trace()", "\n", "continue", "\n", "\n", "", "tot_log_cost_nil_clusters_exp_trick", "=", "max_log_det", "\n", "sum_exp", "=", "None", "\n", "for", "curr_term", "in", "tot_cost_curr_cluster_logdet", ":", "\n", "                                ", "if", "torch", ".", "isnan", "(", "torch", ".", "exp", "(", "curr_term", "-", "max_log_det", ")", ")", ":", "\n", "                                    ", "print", "(", "'WARNING, torch.isnan(torch.exp(curr_term - max_log_det))'", ")", "\n", "# import pdb", "\n", "# pdb.set_trace()", "\n", "continue", "\n", "\n", "", "if", "sum_exp", "is", "None", ":", "\n", "                                    ", "sum_exp", "=", "torch", ".", "exp", "(", "curr_term", "-", "max_log_det", ")", "\n", "", "else", ":", "\n", "                                    ", "sum_exp", "=", "sum_exp", "+", "torch", ".", "exp", "(", "curr_term", "-", "max_log_det", ")", "\n", "", "", "log_sum_exp", "=", "torch", ".", "log", "(", "sum_exp", ")", "\n", "# if self.print_debugging:", "\n", "if", "torch", ".", "isnan", "(", "log_sum_exp", ")", ":", "\n", "                                ", "print", "(", "'WARNING, torch.isnan(log_sum_exp)'", ")", "\n", "# import pdb", "\n", "# pdb.set_trace()", "\n", "\n", "", "tot_log_cost_nil_clusters_exp_trick", "=", "tot_log_cost_nil_clusters_exp_trick", "+", "log_sum_exp", "\n", "\n", "if", "torch", ".", "isnan", "(", "tot_log_cost_nil_clusters_exp_trick", ")", ":", "\n", "                                ", "print", "(", "'WARNING, torch.isnan(tot_log_cost_nil_clusters_exp_trick)'", ")", "\n", "# import pdb", "\n", "# pdb.set_trace()", "\n", "", "if", "tot_log_cost_nil_clusters", "is", "None", ":", "\n", "                                ", "tot_log_cost_nil_clusters", "=", "tot_log_cost_nil_clusters_exp_trick", "\n", "", "else", ":", "\n", "# not product, but sum because in log space", "\n", "                                ", "tot_log_cost_nil_clusters", "=", "tot_log_cost_nil_clusters", "+", "tot_log_cost_nil_clusters_exp_trick", "\n", "", "if", "self", ".", "print_debugging_matrices", "and", "(", "predict", "and", "not", "only_loss", ")", ":", "\n", "                                ", "debug_nil_clusters_weights", ".", "append", "(", "tot_log_cost_nil_clusters_exp_trick", ".", "item", "(", ")", ")", "\n", "", "", "else", ":", "\n", "                            ", "assert", "tot_cost_curr_cluster", "is", "not", "None", "\n", "\n", "if", "tot_log_cost_nil_clusters", "is", "None", ":", "\n", "                                ", "tot_log_cost_nil_clusters", "=", "torch", ".", "log", "(", "tot_cost_curr_cluster", ")", "\n", "", "else", ":", "\n", "# not product, but sum because in log space", "\n", "                                ", "tot_log_cost_nil_clusters", "=", "tot_log_cost_nil_clusters", "+", "torch", ".", "log", "(", "tot_cost_curr_cluster", ")", "\n", "", "", "", "", "if", "tot_log_cost_nil_clusters", "is", "not", "None", ":", "\n", "# if self.print_debugging:", "\n", "                    ", "if", "torch", ".", "isnan", "(", "tot_log_cost_nil_clusters", ")", ":", "\n", "                        ", "print", "(", "'WARNING, torch.isnan(tot_log_cost_nil_clusters)'", ")", "\n", "# import pdb", "\n", "# pdb.set_trace()", "\n", "\n", "", "tot_loss", "=", "tot_loss", "-", "tot_log_cost_nil_clusters", "\n", "\n", "# \"\"\"", "\n", "# {", "\n", "# \"scores\":[[0,-inf,+10],..],", "\n", "# \"clusters\":[[1,2],[3],[4,5,6]],", "\n", "# \"items\":[\"ROOT\", \"Brussels_(city)\", \"brussel@42:44\", \"\"],", "\n", "# \"obj\":-3.4545,", "\n", "# \"numer\":4.0,", "\n", "# \"denom\":5.0", "\n", "# }\"\"\"", "\n", "", "else", ":", "\n", "                    ", "print", "(", "'WARNING, tot_log_cost_nil_clusters in None'", ")", "\n", "# import pdb", "\n", "# pdb.set_trace()", "\n", "\n", "", "", "else", ":", "\n", "                ", "raise", "RuntimeError", "(", "'multihead_nil type not recognized in forward of coreflinker_mtt_hoi: '", "+", "\n", "self", ".", "multihead_nil", ")", "\n", "\n", "", "if", "tot_loss", "is", "None", ":", "\n", "                ", "tot_loss", "=", "0", "\n", "# print('=====TOT LOSS COREFLINKER MTT HOI: =====', tot_loss)", "\n", "", "if", "self", ".", "print_debugging", "and", "tot_loss", "<", "0", ":", "\n", "# TODO: serialize everything to analyze how tot_loss became negative!", "\n", "# print z_mask", "\n", "# print n_links", "\n", "# print n_spans", "\n", "# print batched_multiheads (with indices)", "\n", "# print pred_scores_mtt_exp_space", "\n", "# print targets_mask", "\n", "                ", "pass", "\n", "\n", "", "if", "self", ".", "print_debugging", ":", "\n", "                ", "if", "isinstance", "(", "tot_loss", ",", "torch", ".", "Tensor", ")", ":", "\n", "                    ", "self", ".", "mtt_hoi_loss", ".", "append", "(", "tot_loss", ".", "item", "(", ")", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "mtt_hoi_loss", ".", "append", "(", "tot_loss", ")", "\n", "\n", "", "", "output", "[", "'loss'", "]", "=", "tot_loss", "\n", "output_coref", "[", "'loss'", "]", "=", "tot_loss", "\n", "output_linking", "[", "'loss'", "]", "=", "tot_loss", "\n", "\n", "if", "predict", "and", "not", "only_loss", ":", "\n", "# if self.print_debugging_matrices:", "\n", "#     import pdb;", "\n", "#     pdb.set_trace()", "\n", "\n", "                ", "nill_id", "=", "self", ".", "entity_dictionary", ".", "lookup", "(", "'NILL'", ")", "\n", "# TODO: here if smart_arsinh, then probably have to apply arsinh to pred_scores_mtt_exp_space", "\n", "#  for now do not do it to check if it works", "\n", "if", "self", ".", "nonlinear_function", "==", "'arsinh'", ":", "\n", "                    ", "pred_masked_scores", "=", "torch", ".", "arcsinh", "(", "pred_scores_mtt", ")", "\n", "", "else", ":", "\n", "                    ", "pred_masked_scores", "=", "pred_scores_mtt", "\n", "# if self.pred_arsinh:", "\n", "#     pred_masked_scores = z_mask * torch.arcsinh(pred_scores_mtt)", "\n", "# else:", "\n", "#     pred_masked_scores = z_mask * pred_scores_mtt", "\n", "\n", "# the inverse of mask receives a very small score (less than the current minimum)", "\n", "", "if", "self", ".", "log_inf_mask", ":", "\n", "# just another way of putting very low number (-inf) to masked scores, trying it out", "\n", "                    ", "pred_masked_scores", "=", "pred_masked_scores", "+", "torch", ".", "log", "(", "z_mask", ")", "\n", "", "else", ":", "\n", "                    ", "z_mask_inverse", "=", "1.0", "-", "z_mask", "\n", "min_pred_mask_scores", "=", "min", "(", "pred_masked_scores", ".", "min", "(", ")", ".", "item", "(", ")", ",", "0.0", ")", "\n", "pred_masked_scores", "=", "pred_masked_scores", "+", "(", "z_mask_inverse", ")", "*", "(", "min_pred_mask_scores", "-", "999999", ")", "\n", "\n", "# print('executing edmonds with ', int(z_mask.sum().item()), ' edges and ', z_mask.shape[-1], ' nodes: ',", "\n", "#       unique_links.shape[-1], ' unique links and ', z_mask.shape[-1] - unique_links.shape[-1] - 1, ' spans')", "\n", "", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "pred_tree_mst", "=", "mst_only_tree", "(", "pred_masked_scores", ",", "target_mask_lengths", ",", "z_mask", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "# print('done with edmonds in ', (end - start), ' seconds')", "\n", "# TODO (24/02/2021)!!! no need for candidate_ids, it can just be replaced with unique_links, right????", "\n", "candidate_ids", "=", "[", "]", "\n", "for", "curr_cand_batch", ",", "_", "in", "enumerate", "(", "candidates", ")", ":", "\n", "                    ", "unique_curr_batch", "=", "candidates", "[", "curr_cand_batch", "]", ".", "unique", "(", "sorted", "=", "True", ")", "\n", "unique_curr_batch", "=", "unique_curr_batch", "[", "unique_curr_batch", "!=", "nill_id", "]", "\n", "# (16/10/2020) - 0 is used for padding, so remove it", "\n", "unique_curr_batch", "=", "unique_curr_batch", "[", "unique_curr_batch", "!=", "self", ".", "unknown_dict", "]", "\n", "candidate_ids", ".", "append", "(", "unique_curr_batch", ")", "\n", "\n", "", "link_id_to_coref_col", "=", "list", "(", ")", "\n", "for", "batch_id", ",", "candidate_ids_batch", "in", "enumerate", "(", "candidate_ids", ")", ":", "\n", "                    ", "link_id_to_coref_col", ".", "append", "(", "dict", "(", ")", ")", "\n", "for", "matrix_idx_link", ",", "link_dict_id", "in", "enumerate", "(", "candidate_ids_batch", ")", ":", "\n", "# + 1 because the first one is root", "\n", "                        ", "link_id_to_coref_col", "[", "batch_id", "]", "[", "link_dict_id", ".", "item", "(", ")", "]", "=", "matrix_idx_link", "+", "1", "\n", "\n", "", "", "coref_col_to_link_id", "=", "list", "(", ")", "\n", "for", "batch_id", ",", "link_id_to_coref_col_batch", "in", "enumerate", "(", "link_id_to_coref_col", ")", ":", "\n", "                    ", "coref_col_to_link_id", ".", "append", "(", "{", "v", ":", "k", "for", "k", ",", "v", "in", "link_id_to_coref_col_batch", ".", "items", "(", ")", "}", ")", "\n", "\n", "", "decoded_m2i_coref_linker", ",", "span_to_pointer_detail_info", "=", "self", ".", "decode_m2i_coreflinker_mtt", "(", "pred_masked_scores", ",", "\n", "pred_tree_mst", ",", "\n", "# lengths_coref, lengths_linker, # these two are probably not needed", "\n", "candidate_ids", ",", "\n", "link_id_to_coref_col", "=", "link_id_to_coref_col", ",", "\n", "# coref_col_to_link_id=coref_col_to_link_id,", "\n", "dic", "=", "self", ".", "entity_dictionary", ",", "\n", "unique_links", "=", "unique_links", ",", "\n", "unique_links_lengths", "=", "unique_links_lengths", ",", "\n", "pred_spans", "=", "pruned_spans", ")", "\n", "# print('THIS PRINT HAS TO BE DELETED!')", "\n", "# logits.shape --> torch.Size([1, 14, 30])", "\n", "# lengths_coref --> tensor([14])", "\n", "# lengths_linker --> tensor([16])", "\n", "# linker_candidates.shape --> torch.Size([1, 14, 16])", "\n", "# candidate_ids[0].shape --> torch.Size([49])", "\n", "# link_id_to_coref_col --> <class 'list'>: [{2237: 0, 2552: 1, 10719: 2, 10720: 3, 11729: 4, 11734: 5, 11735: 6, 11736: 7, 11737: 8, 11738: 9, 11739: 10, 11740: 11, 11741: 12, 11742: 13, 11743: 14, 11744: 15, 11745: 16, 11746: 17, 11747: 18, 11748: 19, 14221: 20, 25253: 21, 34142: 22, 34210: 23, 34211: 24, 34213: 25, 34214: 26, 34215: 27, 34216: 28, 34217: 29, 34218: 30, 34219: 31, 34220: 32, 118110: 33, 118129: 34, 118130: 35, 118131: 36, 118132: 37, 118133: 38, 118134: 39, 118135: 40, 118136: 41, 118137: 42, 118138: 43, 118139: 44, 118140: 45, 118141: 46, 118142: 47, 118143: 48}]", "\n", "# coref_col_to_link_id --> <class 'list'>: [{0: 2237, 1: 2552, 2: 10719, 3: 10720, 4: 11729, 5: 11734, 6: 11735, 7: 11736, 8: 11737, 9: 11738, 10: 11739, 11: 11740, 12: 11741, 13: 11742, 14: 11743, 15: 11744, 16: 11745, 17: 11746, 18: 11747, 19: 11748, 20: 14221, 21: 25253, 22: 34142, 23: 34210, 24: 34211, 25: 34213, 26: 34214, 27: 34215, 28: 34216, 29: 34217, 30: 34218, 31: 34219, 32: 34220, 33: 118110, 34: 118129, 35: 118130, 36: 118131, 37: 118132, 38: 118133, 39: 118134, 40: 118135, 41: 118136, 42: 118137, 43: 118138, 44: 118139, 45: 118140, 46: 118141, 47: 118142, 48: 118143}]", "\n", "# pruned_spans --> <class 'list'>: [[(3, 4), (3, 7), (5, 6), (5, 7), (41, 43), (45, 47), (49, 49), (49, 50), (50, 50), (50, 52), (51, 52), (51, 54), (53, 54), (57, 57)]]", "\n", "# scores.shape --> torch.Size([1, 14, 30])", "\n", "\n", "# example of decoded_m2i_coref_linker:", "\n", "#   <class 'list'>: [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,", "\n", "#   23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,", "\n", "#   48, 49, 50, 51, 52, 53, 54, 5, 56, 57, 58, 59, 60, 61, 5]]", "\n", "#", "\n", "#", "\n", "# example of span_to_pointer_detail_info:", "\n", "#   <class 'list'>:", "\n", "#   [{(3, 4): {'coref_connection_type': 'mention_self', 'coref_connection_pointer': (3, 4), 'coref_connection_score': -0.0},", "\n", "#   (3, 7): {'coref_connection_type': 'mention_self', 'coref_connection_pointer': (3, 7), 'coref_connection_score': -0.0},", "\n", "#   (5, 6): {'coref_connection_type': 'mention_self', 'coref_connection_pointer': (5, 6), 'coref_connection_score': -0.0},", "\n", "#   (5, 7): {'coref_connection_type': 'mention_self', 'coref_connection_pointer': (5, 7), 'coref_connection_score': -0.0},", "\n", "#   (41, 43): {'coref_connection_type': 'mention_self', 'coref_connection_pointer': (41, 43), 'coref_connection_score': -0.0},", "\n", "#   (45, 47): {'coref_connection_type': 'mention_self', 'coref_connection_pointer': (45, 47), 'coref_connection_score': -0.0},", "\n", "#   (49, 49): {'coref_connection_type': 'link', 'coref_connection_pointer': 'Berlin'},", "\n", "#   (49, 50): {'coref_connection_type': 'mention_self', 'coref_connection_pointer': (49, 50), 'coref_connection_score': -0.0},", "\n", "#   (50, 50): {'coref_connection_type': 'mention_self', 'coref_connection_pointer': (50, 50), 'coref_connection_score': -0.0},", "\n", "#   (50, 52): {'coref_connection_type': 'mention_self', 'coref_connection_pointer': (50, 52), 'coref_connection_score': -0.0},", "\n", "#   (51, 52): {'coref_connection_type': 'mention_self', 'coref_connection_pointer': (51, 52), 'coref_connection_score': -0.0},", "\n", "#   (51, 54): {'coref_connection_type': 'mention_self', 'coref_connection_pointer': (51, 54), 'coref_connection_score': -0.0},", "\n", "#   (53, 54): {'coref_connection_type': 'mention_self', 'coref_connection_pointer': (53, 54), 'coref_connection_score': -0.0},", "\n", "#   (57, 57): {'coref_connection_type': 'link', 'coref_connection_pointer': 'Berlin'}}]", "\n", "\n", "# here gets the coref cluster spans only", "\n", "output_pred", "=", "list", "(", ")", "\n", "if", "scores", "is", "not", "None", ":", "\n", "                    ", "for", "decoded_m2i_b", ",", "pruned_spans_b", ",", "candidate_ids_b", ",", "coref_col_to_link_id_b", "in", "zip", "(", "decoded_m2i_coref_linker", ",", "pruned_spans", ",", "candidate_ids", ",", "coref_col_to_link_id", ")", ":", "\n", "# len(decoded_m2i_b) --> 176", "\n", "# len(pruned_spans_b) --> 16", "\n", "# candidate_ids_b.shape --> 160", "\n", "# len(coref_col_to_link_id_b) --> 160", "\n", "                        ", "var1", "=", "m2i_to_clusters_linkercoref_mtt", "(", "decoded_m2i_b", ",", "coref_col_to_link_id_b", ",", "\n", "self", ".", "entity_dictionary", ",", "\n", "candidate_ids_b", ".", "size", "(", "-", "1", ")", ")", "\n", "# var1 example:", "\n", "# var1[0] --> clusters --> <class 'list'>: [[0, 148], [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19], [20], [21], [22], [23], [24], [25], [26], [27], [28], [29], [30], [31], [32], [33], [34], [35], [36], [37], [38], [39], [40], [41], [42], [43], [44], [45], [46], [47], [48], [49], [50], [51], [52, 146, 152], [53], [54], [55], [56], [57], [58], [59], [60], [61], [62], [63], [64], [65], [66], [67], [68], [69], [70], [71], [72], [73], [74], [75], [76], [77], [78], [79], [80], [81], [82], [83], [84], [85], [86], [87], [88], [89], [90], [91], [92], [93], [94], [95], [96], [97], [98], [99], [100], [101], [102], [103], [104], [105], [106], [107], [108], [109], [110], [111], [112], [113], [114], [115], [116], [117], [118], [119], [120], [121], [122], [123], [124], [125], [126], [127], [128], [129], [130], [131], [132], [133], [134], [135], [136], [137], [138], [139], [140], [141], [142], [143], [144], [145, 147], [149], [150], [151], [153], [154], [155], [156], [157], [158], [159]]", "\n", "# var1[1] --> mentions to clusters --> <class 'dict'>: {0: [0, 148], 1: [1], 2: [2], 3: [3], 4: [4], 5: [5], 6: [6], 7: [7], 8: [8], 9: [9], 10: [10], 11: [11], 12: [12], 13: [13], 14: [14], 15: [15], 16: [16], 17: [17], 18: [18], 19: [19], 20: [20], 21: [21], 22: [22], 23: [23], 24: [24], 25: [25], 26: [26], 27: [27], 28: [28], 29: [29], 30: [30], 31: [31], 32: [32], 33: [33], 34: [34], 35: [35], 36: [36], 37: [37], 38: [38], 39: [39], 40: [40], 41: [41], 42: [42], 43: [43], 44: [44], 45: [45], 46: [46], 47: [47], 48: [48], 49: [49], 50: [50], 51: [51], 52: [52, 146, 152], 53: [53], 54: [54], 55: [55], 56: [56], 57: [57], 58: [58], 59: [59], 60: [60], 61: [61], 62: [62], 63: [63], 64: [64], 65: [65], 66: [66], 67: [67], 68: [68], 69: [69], 70: [70], 71: [71], 72: [72], 73: [73], 74: [74], 75: [75], 76: [76], 77: [77], 78: [78], 79: [79], 80: [80], 81: [81], 82: [82], 83: [83], 84: [84], 85: [85], 86: [86], 87: [87], 88: [88], 89: [89], 90: [90], 91: [91], 92: [92], 93: [93], 94: [94], 95: [95], 96: [96], 97: [97], 98: [98], 99: [99], 100: [100], 101: [101], 102: [102], 103: [103], 104: [104], 105: [105], 106: [106], 107: [107], 108: [108], 109: [109], 110: [110], 111: [111], 112: [112], 113: [113], 114: [114], 115: [115], 116: [116], 117: [117], 118: [118], 119: [119], 120: [120], 121: [121], 122: [122], 123: [123], 124: [124], 125: [125], 126: [126], 127: [127], 128: [128], 129: [129], 130: [130], 131: [131], 132: [132], 133: [133], 134: [134], 135: [135], 136: [136], 137: [137], 138: [138], 139: [139], 140: [140], 141: [141], 142: [142], 143: [143], 144: [144], 145: [145, 147], 146: [52, 146, 152], 147: [145, 147], 148: [0, 148], 149: [149], 150: [150], 151: [151], 152: [52, 146, 152], 153: [153], 154: [154], 155: [155], 156: [156], 157: [157], 158: [158], 159: [159]}", "\n", "var2", "=", "convert_coref_mtt", "(", "var1", ",", "pruned_spans_b", ",", "number_candidates", "=", "candidate_ids_b", ".", "size", "(", "-", "1", ")", ",", "\n", "links_dictionary", "=", "self", ".", "entity_dictionary", ",", "\n", "coref_col_to_link_id", "=", "coref_col_to_link_id_b", ")", "\n", "# var2 example:", "\n", "#", "\n", "#", "\n", "output_pred", ".", "append", "(", "var2", ")", "\n", "", "", "else", ":", "\n", "                    ", "output_pred", "=", "[", "[", "]", "for", "_", "in", "pruned_spans", "]", "\n", "\n", "# decomposed this big list comprehension to make it more clear and easier to debug in the loop above", "\n", "# output_pred = [convert_coref_mtt(m2i_to_clusters_linkercoref_mtt(x, coref_col_to_link_id_b,", "\n", "#                                                                  self.entity_dictionary,", "\n", "#                                                                  candidate_ids_b.size(-1)),", "\n", "#                                  y, number_candidates=candidate_ids_b.size(-1),", "\n", "#                                  links_dictionary=self.entity_dictionary,", "\n", "#                                  coref_col_to_link_id=coref_col_to_link_id_b)", "\n", "#                for x, y, candidate_ids_b, coref_col_to_link_id_b in", "\n", "#                zip(decoded_m2i_coref_linker, pruned_spans, candidate_ids,", "\n", "#                    coref_col_to_link_id)] if scores is not None else [[] for _ in pruned_spans]", "\n", "\n", "", "output_coref", "[", "'pred'", "]", "=", "[", "out", "[", "0", "]", "for", "out", "in", "output_pred", "]", "\n", "output_coref", "[", "'pred_pointers'", "]", "=", "span_to_pointer_detail_info", "\n", "output_linking", "[", "'pred'", "]", "=", "[", "out", "[", "1", "]", "for", "out", "in", "output_pred", "]", "\n", "output_linking", "[", "'spans_with_link'", "]", "=", "[", "out", "[", "2", "]", "for", "out", "in", "output_pred", "]", "\n", "\n", "# this gives 1 if candidate list is empty, this why it is commented", "\n", "# max_nr_candidates = linker_candidates.size(-1)", "\n", "\n", "# this gives correct answer; this is why it is used instead of linker_candidates.size(-1)", "\n", "max_nr_candidates", "=", "candidate_lengths", ".", "max", "(", ")", ".", "item", "(", ")", "\n", "\n", "# linker_spans = filtered_spans['spans']", "\n", "linker_spans", "=", "filtered_spans", "[", "'pruned_spans'", "]", "\n", "\n", "cols_to_ignore", "=", "0", "# in case we want to use the matrix itself to filter incorrect mentions", "\n", "\n", "# + 1 because also the link score to root is counted", "\n", "s", "=", "predict_scores_mtt", "(", "scores", "[", ":", ",", ":", ",", "cols_to_ignore", ":", "max_nr_candidates", "+", "1", "]", ",", "linker_spans", ",", "\n", "linker_candidates", ",", "candidate_lengths", ",", "self", ".", "entity_dictionary", ")", "\n", "\n", "# TODO!!! - WHERE THESE 'scores' ARE USED??? ARE THEY REALLY NEEDED???", "\n", "output_coref", "[", "'scores'", "]", "=", "predict_scores_coref_mtt", "(", "scores", "[", ":", ",", ":", ",", "max_nr_candidates", "+", "cols_to_ignore", "+", "1", ":", "]", ",", "\n", "pred_spans", "=", "pruned_spans", ")", "\n", "\n", "output_linking", "[", "'scores'", "]", "=", "s", "\n", "\n", "if", "not", "api_call", ":", "\n", "                    ", "output_coref", "[", "'gold'", "]", "=", "[", "convert_coref", "(", "m2i_to_clusters_linkercoref", "(", "x", ".", "tolist", "(", ")", ")", ",", "y", ",", "\n", "number_candidates", "=", "0", ",", "\n", "links_dictionary", "=", "self", ".", "entity_dictionary", ")", "[", "0", "]", "for", "x", ",", "y", "in", "\n", "zip", "(", "gold_m2i", ",", "gold_spans", ")", "]", "\n", "\n", "# TODO - number_candidates!!!", "\n", "output_linking", "[", "'gold'", "]", "=", "linker", "[", "'gold'", "]", "\n", "", "else", ":", "\n", "                    ", "output_coref", "[", "'gold'", "]", "=", "[", "None", "for", "_", "in", "gold_spans", "]", "\n", "output_linking", "[", "'gold'", "]", "=", "[", "None", "for", "_", "in", "gold_spans", "]", "\n", "\n", "", "if", "self", ".", "filter_singletons_with_pruner", ":", "\n", "                    ", "if", "self", ".", "print_debugging_matrices", ":", "\n", "                        ", "coref_pred_all", "=", "output_coref", "[", "'pred'", "]", ".", "copy", "(", ")", "\n", "link_pred_all", "=", "output_linking", "[", "'pred'", "]", ".", "copy", "(", ")", "\n", "# this assumes that pruner is able to predict spans", "\n", "", "if", "not", "self", ".", "filter_only_singletons", ":", "\n", "# does the old stuff", "\n", "                        ", "output_coref", "[", "'pred'", "]", "=", "remove_disabled_spans", "(", "output_coref", "[", "'pred'", "]", ",", "pruner_spans", ")", "\n", "coref_flat", "=", "[", "{", "item", "for", "sublist", "in", "batch", "for", "item", "in", "sublist", "}", "for", "batch", "in", "output_coref", "[", "'pred'", "]", "]", "\n", "output_linking", "[", "'pred'", "]", "=", "remove_disabled_spans_linking", "(", "output_linking", "[", "'pred'", "]", ",", "coref_flat", ")", "\n", "output_coref", "[", "'scores'", "]", "=", "remove_disabled_scores_coref", "(", "output_coref", "[", "'scores'", "]", ",", "coref_flat", ")", "\n", "output_linking", "[", "'scores'", "]", "=", "remove_disabled_scores_linking", "(", "output_linking", "[", "'scores'", "]", ",", "coref_flat", ")", "\n", "", "else", ":", "\n", "# does the new stuff: puts focus on removing only singletons", "\n", "# (focus on predicted singleton spans WITHOUT LINK)", "\n", "                        ", "output_coref", "[", "'pred'", "]", "=", "remove_singletons_without_link", "(", "output_coref", "[", "'pred'", "]", ",", "\n", "output_linking", "[", "'pred'", "]", ",", "\n", "pruner_spans", ")", "\n", "coref_flat", "=", "[", "{", "item", "for", "sublist", "in", "batch", "for", "item", "in", "sublist", "}", "for", "batch", "in", "output_coref", "[", "'pred'", "]", "]", "\n", "output_linking", "[", "'pred'", "]", "=", "remove_disabled_spans_linking", "(", "output_linking", "[", "'pred'", "]", ",", "coref_flat", ")", "\n", "output_coref", "[", "'scores'", "]", "=", "remove_disabled_scores_coref", "(", "output_coref", "[", "'scores'", "]", ",", "coref_flat", ")", "\n", "output_linking", "[", "'scores'", "]", "=", "remove_disabled_scores_linking", "(", "output_linking", "[", "'scores'", "]", ",", "coref_flat", ")", "\n", "\n", "", "", "if", "self", ".", "filter_singletons_with_ner", ":", "\n", "                    ", "output_coref", "[", "'pred'", "]", "=", "remove_disabled_spans", "(", "output_coref", "[", "'pred'", "]", ",", "ner_spans", ")", "\n", "output_linking", "[", "'pred'", "]", "=", "remove_disabled_spans_linking", "(", "output_linking", "[", "'pred'", "]", ",", "ner_spans", ")", "\n", "output_coref", "[", "'scores'", "]", "=", "None", "# TODO", "\n", "output_linking", "[", "'scores'", "]", "=", "None", "# TODO", "\n", "raise", "NotImplementedError", "# TODO!! first resolve the two previous TODOs!!! ,", "\n", "\n", "###################################### BEGIN: debugging json dump", "\n", "", "if", "self", ".", "print_debugging_matrices", ":", "\n", "                    ", "to_print", "=", "dict", "(", ")", "\n", "\n", "to_log_scores", "=", "pred_scores_mtt", "+", "torch", ".", "log", "(", "z_mask", ")", "\n", "to_print", "[", "'scores'", "]", "=", "to_log_scores", "[", "0", "]", ".", "tolist", "(", ")", "\n", "to_print", "[", "'z_mask'", "]", "=", "z_mask", ".", "tolist", "(", ")", "\n", "to_print", "[", "'target_mask'", "]", "=", "targets_mask", ".", "tolist", "(", ")", "\n", "# to_print['clusters'] = []", "\n", "link_id_to_cluster", "=", "dict", "(", ")", "\n", "# first cluster links and spans", "\n", "for", "curr_idx_link", "in", "range", "(", "1", ",", "unique_links", ".", "shape", "[", "-", "1", "]", "+", "1", ")", ":", "\n", "                        ", "for", "curr_idx_span", "in", "range", "(", "unique_links", ".", "shape", "[", "-", "1", "]", "+", "1", ",", "unique_links", ".", "shape", "[", "-", "1", "]", "+", "len", "(", "\n", "filtered_spans", "[", "'pruned_spans'", "]", "[", "0", "]", ")", "+", "1", ")", ":", "\n", "                            ", "if", "targets_mask", "[", "0", "]", "[", "curr_idx_link", "]", "[", "curr_idx_span", "]", ".", "item", "(", ")", "==", "1.0", ":", "\n", "                                ", "if", "curr_idx_link", "not", "in", "link_id_to_cluster", ":", "\n", "                                    ", "link_id_to_cluster", "[", "curr_idx_link", "]", "=", "[", "curr_idx_link", "]", "\n", "# link_id_to_cluster[curr_idx_link].append()", "\n", "", "link_id_to_cluster", "[", "curr_idx_link", "]", ".", "append", "(", "curr_idx_span", ")", "\n", "\n", "# id_to_cluster_expanded =", "\n", "", "", "", "so_far_clusters", "=", "list", "(", "link_id_to_cluster", ".", "values", "(", ")", ")", "\n", "idx_to_cluster", "=", "dict", "(", ")", "\n", "for", "curr_cluster", "in", "so_far_clusters", ":", "\n", "                        ", "for", "curr_cl_el", "in", "curr_cluster", ":", "\n", "                            ", "idx_to_cluster", "[", "curr_cl_el", "]", "=", "curr_cluster", "\n", "\n", "", "", "nil_clusters", "=", "[", "]", "\n", "span_id_to_span_id", "=", "dict", "(", ")", "\n", "# now cluster spans with spans", "\n", "for", "curr_idx_span1", "in", "range", "(", "unique_links", ".", "shape", "[", "-", "1", "]", "+", "1", ",", "unique_links", ".", "shape", "[", "-", "1", "]", "+", "len", "(", "\n", "filtered_spans", "[", "'pruned_spans'", "]", "[", "0", "]", ")", "+", "1", ")", ":", "\n", "                        ", "for", "curr_idx_span2", "in", "range", "(", "unique_links", ".", "shape", "[", "-", "1", "]", "+", "1", ",", "unique_links", ".", "shape", "[", "-", "1", "]", "+", "len", "(", "\n", "filtered_spans", "[", "'pruned_spans'", "]", "[", "0", "]", ")", "+", "1", ")", ":", "\n", "                            ", "if", "curr_idx_span2", "<", "curr_idx_span1", ":", "\n", "                                ", "continue", "\n", "", "if", "targets_mask", "[", "0", "]", "[", "curr_idx_span1", "]", "[", "curr_idx_span2", "]", "==", "1.0", ":", "\n", "                                ", "if", "curr_idx_span1", "not", "in", "span_id_to_span_id", ":", "\n", "                                    ", "span_id_to_span_id", "[", "curr_idx_span1", "]", "=", "[", "]", "\n", "", "span_id_to_span_id", "[", "curr_idx_span1", "]", ".", "append", "(", "curr_idx_span2", ")", "\n", "\n", "", "", "", "traversed_spans_links", "=", "set", "(", "[", "item", "for", "sublist", "in", "so_far_clusters", "for", "item", "in", "sublist", "]", ")", "\n", "traversed_spans", "=", "set", "(", ")", "\n", "for", "curr_idx_span", "in", "range", "(", "unique_links", ".", "shape", "[", "-", "1", "]", "+", "1", ",", "unique_links", ".", "shape", "[", "-", "1", "]", "+", "len", "(", "\n", "filtered_spans", "[", "'pruned_spans'", "]", "[", "0", "]", ")", "+", "1", ")", ":", "\n", "                        ", "existing_cluster", "=", "None", "\n", "if", "curr_idx_span", "in", "traversed_spans", ":", "\n", "                            ", "continue", "\n", "", "if", "curr_idx_span", "in", "idx_to_cluster", ":", "\n", "                            ", "existing_cluster", "=", "idx_to_cluster", "[", "curr_idx_span", "]", "\n", "", "cluster", "=", "[", "curr_idx_span", "]", "\n", "traversed_spans", ".", "add", "(", "curr_idx_span", ")", "\n", "if", "curr_idx_span", "in", "span_id_to_span_id", ":", "\n", "                            ", "next_span", "=", "span_id_to_span_id", "[", "curr_idx_span", "]", "\n", "while", "len", "(", "next_span", ")", ">", "0", ":", "\n", "                                ", "next_next_span", "=", "[", "]", "\n", "for", "curr_next_span", "in", "next_span", ":", "\n", "                                    ", "if", "curr_next_span", "in", "idx_to_cluster", ":", "\n", "                                        ", "existing_cluster", "=", "idx_to_cluster", "[", "curr_next_span", "]", "\n", "", "cluster", ".", "append", "(", "curr_next_span", ")", "\n", "traversed_spans", ".", "add", "(", "curr_next_span", ")", "\n", "if", "curr_next_span", "in", "span_id_to_span_id", ":", "\n", "                                        ", "next_next_span", ".", "extend", "(", "span_id_to_span_id", "[", "curr_next_span", "]", ")", "\n", "", "", "next_next_span", "=", "list", "(", "set", "(", "next_next_span", ")", ")", "\n", "next_span", "=", "next_next_span", "\n", "", "", "cluster", "=", "list", "(", "set", "(", "cluster", ")", ")", "\n", "if", "existing_cluster", "is", "not", "None", ":", "\n", "                            ", "for", "cidx", "in", "cluster", ":", "\n", "                                ", "if", "cidx", "not", "in", "traversed_spans_links", ":", "\n", "                                    ", "existing_cluster", ".", "append", "(", "cidx", ")", "\n", "idx_to_cluster", "[", "cidx", "]", "=", "existing_cluster", "\n", "", "", "", "else", ":", "\n", "                            ", "so_far_clusters", ".", "append", "(", "cluster", ")", "\n", "", "", "to_print_clusters", "=", "so_far_clusters", "\n", "flattened_to_print_clusters", "=", "set", "(", "[", "item", "for", "sublist", "in", "to_print_clusters", "for", "item", "in", "sublist", "]", ")", "\n", "all_possible_items", "=", "set", "(", "range", "(", "1", ",", "z_mask", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "\n", "to_fill_singletons", "=", "all_possible_items", ".", "difference", "(", "flattened_to_print_clusters", ")", "\n", "# adds singletons (ex: links) of all the not used clusters/elements", "\n", "for", "tofill", "in", "to_fill_singletons", ":", "\n", "                        ", "to_print_clusters", ".", "append", "(", "[", "tofill", "]", ")", "\n", "", "to_print", "[", "'clusters_gold'", "]", "=", "to_print_clusters", "\n", "# TODO", "\n", "items", "=", "[", "'ROOT'", "]", "\n", "link_to_idx_in_mtt_matrix", "=", "dict", "(", ")", "\n", "span_to_idx_in_mtt_matrix", "=", "dict", "(", ")", "\n", "span_to_link", "=", "dict", "(", ")", "\n", "\n", "for", "curr_link_idx", ",", "curr_link", "in", "enumerate", "(", "unique_links", "[", "0", "]", ")", ":", "\n", "# print('curr unique link: ', self.entity_dictionary.get(curr_link.item()))", "\n", "                        ", "link_decoded", "=", "self", ".", "entity_dictionary", ".", "get", "(", "curr_link", ".", "item", "(", ")", ")", "\n", "items", ".", "append", "(", "link_decoded", ")", "\n", "# + 1 because of root node", "\n", "link_to_idx_in_mtt_matrix", "[", "link_decoded", "]", "=", "curr_link_idx", "+", "1", "\n", "\n", "", "for", "curr_span_idx", ",", "curr_pruned_span", "in", "enumerate", "(", "filtered_spans", "[", "'pruned_spans'", "]", "[", "0", "]", ")", ":", "\n", "# +1 because of root node", "\n", "                        ", "span_idx_offset", "=", "unique_links", ".", "shape", "[", "-", "1", "]", "+", "1", "\n", "span_to_idx_in_mtt_matrix", "[", "curr_pruned_span", "]", "=", "curr_span_idx", "+", "span_idx_offset", "\n", "\n", "tok_begin_id", "=", "filtered_spans", "[", "'subtoken_map'", "]", "[", "0", "]", "[", "curr_pruned_span", "[", "0", "]", "]", "\n", "tok_end_id", "=", "filtered_spans", "[", "'subtoken_map'", "]", "[", "0", "]", "[", "curr_pruned_span", "[", "1", "]", "]", "\n", "# print('we are here in tok ids')", "\n", "pos_text_begin", "=", "filtered_spans", "[", "'begin_token'", "]", "[", "0", "]", "[", "tok_begin_id", "]", "\n", "pos_text_end", "=", "filtered_spans", "[", "'end_token'", "]", "[", "0", "]", "[", "tok_end_id", "]", "\n", "span_text", "=", "filtered_spans", "[", "'content'", "]", "[", "0", "]", "[", "pos_text_begin", ":", "pos_text_end", "]", "\n", "items", ".", "append", "(", "'{}@{}:{}'", ".", "format", "(", "span_text", ",", "pos_text_begin", ",", "pos_text_end", ")", ")", "\n", "\n", "# for curr_link_pred in output_linking['pred'][0]:", "\n", "", "for", "curr_link_pred", "in", "link_pred_all", "[", "0", "]", ":", "\n", "                        ", "span_to_link", "[", "(", "curr_link_pred", "[", "0", "]", ",", "curr_link_pred", "[", "1", "]", ")", "]", "=", "curr_link_pred", "[", "2", "]", "\n", "\n", "# TODO: get the content maybe using tokens", "\n", "", "to_print", "[", "'target_nil_cluster_indices'", "]", "=", "[", "tnci", ".", "tolist", "(", ")", "for", "tnci", "in", "target_nil_clusters_indices", "]", "\n", "to_print", "[", "'target_not_nil_indices'", "]", "=", "[", "tnni", ".", "tolist", "(", ")", "for", "tnni", "in", "target_not_nil_indices", "]", "\n", "to_print", "[", "'items'", "]", "=", "items", "\n", "to_print", "[", "'target_nil_cluster_indices_dec'", "]", "=", "[", "[", "items", "[", "curr_ind", "]", "for", "curr_ind", "in", "curr_cl", "]", "for", "curr_cl", "in", "\n", "to_print", "[", "'target_nil_cluster_indices'", "]", "]", "\n", "to_print", "[", "'target_not_nil_indices_dec'", "]", "=", "[", "items", "[", "curr_ind", "]", "for", "curr_ind", "in", "to_print", "[", "'target_not_nil_indices'", "]", "]", "\n", "to_print", "[", "'clusters_gold_dec'", "]", "=", "[", "[", "items", "[", "curr_ind", "]", "for", "curr_ind", "in", "curr_cl", "]", "for", "curr_cl", "in", "to_print", "[", "'clusters_gold'", "]", "]", "\n", "to_print", "[", "'denom'", "]", "=", "z_log_cost", ".", "item", "(", ")", "\n", "to_print", "[", "'numer'", "]", "=", "z_log_cost", ".", "item", "(", ")", "-", "tot_loss", ".", "item", "(", ")", "\n", "to_print", "[", "'numer_explained'", "]", "=", "{", "\n", "'not_nil_idxs_in_matrix'", ":", "debug_not_nil_idxs_in_matrix", ",", "\n", "'not_nil_weight'", ":", "not_nil_log_cost", ".", "item", "(", ")", ",", "\n", "'nil_clusters_weights'", ":", "debug_nil_clusters_weights", ",", "\n", "'nil_clusters_idxs_in_matrix: '", ":", "debug_nil_cluster_idxs_in_matrix", "\n", "}", "\n", "span_idx_to_candidates", "=", "dict", "(", ")", "\n", "assert", "candidates", "[", "0", "]", ".", "shape", "[", "0", "]", "==", "len", "(", "filtered_spans", "[", "'pruned_spans'", "]", "[", "0", "]", ")", "\n", "for", "span_idx", ",", "(", "curr_span_candidates", ",", "curr_span_cand_length", ")", "in", "enumerate", "(", "zip", "(", "candidates", "[", "0", "]", ",", "candidate_lengths", "[", "0", "]", ")", ")", ":", "\n", "########################", "\n", "                        ", "curr_cand_length", "=", "curr_span_cand_length", ".", "item", "(", ")", "\n", "curr_candidates", "=", "curr_span_candidates", ".", "tolist", "(", ")", "[", ":", "curr_cand_length", "]", "\n", "curr_candidates", "=", "[", "cnd", "for", "cnd", "in", "curr_candidates", "if", "\n", "cnd", "!=", "self", ".", "unknown_dict", "and", "cnd", "!=", "nill_id", "]", "\n", "curr_candidates", "=", "[", "self", ".", "entity_dictionary", ".", "get", "(", "cnd", ")", "for", "cnd", "in", "curr_candidates", "]", "\n", "span_idx", "=", "unique_links", ".", "shape", "[", "-", "1", "]", "+", "1", "+", "span_idx", "\n", "span_idx_to_candidates", "[", "span_idx", "]", "=", "curr_candidates", "\n", "# print('do something with candidates here ')", "\n", "# pass", "\n", "", "clusters_pred", "=", "[", "]", "\n", "to_print", "[", "'span_to_candidates'", "]", "=", "span_idx_to_candidates", "\n", "# added_links = set()", "\n", "for", "curr_o_coref", "in", "output_coref", "[", "'pred'", "]", "[", "0", "]", ":", "\n", "                        ", "curr_cluster_links", "=", "set", "(", ")", "\n", "to_add_cluster", "=", "curr_o_coref", ".", "copy", "(", ")", "\n", "cluster_link", "=", "[", "]", "\n", "for", "curr_cluster_span", "in", "to_add_cluster", ":", "\n", "                            ", "if", "curr_cluster_span", "in", "span_to_link", ":", "\n", "                                ", "curr_span_link", "=", "span_to_link", "[", "curr_cluster_span", "]", "\n", "if", "curr_span_link", "not", "in", "curr_cluster_links", ":", "\n", "                                    ", "curr_cluster_links", ".", "add", "(", "curr_span_link", ")", "\n", "cluster_link", ".", "append", "(", "curr_span_link", ")", "\n", "# only one link per cluster", "\n", "", "", "", "assert", "len", "(", "curr_cluster_links", ")", "<=", "1", "\n", "to_add_cluster", "=", "cluster_link", "+", "to_add_cluster", "\n", "# now pass everything to index", "\n", "cluster_link_indexes_to_mtt_matrix", "=", "[", "]", "\n", "for", "curr_element", "in", "to_add_cluster", ":", "\n", "                            ", "if", "curr_element", "in", "span_to_idx_in_mtt_matrix", ":", "\n", "                                ", "cluster_link_indexes_to_mtt_matrix", ".", "append", "(", "span_to_idx_in_mtt_matrix", "[", "curr_element", "]", ")", "\n", "", "elif", "curr_element", "in", "link_to_idx_in_mtt_matrix", ":", "\n", "                                ", "cluster_link_indexes_to_mtt_matrix", ".", "append", "(", "link_to_idx_in_mtt_matrix", "[", "curr_element", "]", ")", "\n", "\n", "", "", "clusters_pred", ".", "append", "(", "cluster_link_indexes_to_mtt_matrix", ")", "\n", "\n", "", "clusters_all", "=", "[", "]", "\n", "for", "curr_o_coref", "in", "coref_pred_all", "[", "0", "]", ":", "\n", "                        ", "curr_cluster_links", "=", "set", "(", ")", "\n", "to_add_cluster", "=", "curr_o_coref", ".", "copy", "(", ")", "\n", "cluster_link", "=", "[", "]", "\n", "for", "curr_cluster_span", "in", "to_add_cluster", ":", "\n", "                            ", "if", "curr_cluster_span", "in", "span_to_link", ":", "\n", "                                ", "curr_span_link", "=", "span_to_link", "[", "curr_cluster_span", "]", "\n", "if", "curr_span_link", "not", "in", "curr_cluster_links", ":", "\n", "                                    ", "curr_cluster_links", ".", "add", "(", "curr_span_link", ")", "\n", "cluster_link", ".", "append", "(", "curr_span_link", ")", "\n", "# only one link per cluster", "\n", "", "", "", "assert", "len", "(", "curr_cluster_links", ")", "<=", "1", "\n", "to_add_cluster", "=", "cluster_link", "+", "to_add_cluster", "\n", "# now pass everything to index", "\n", "cluster_link_indexes_to_mtt_matrix", "=", "[", "]", "\n", "for", "curr_element", "in", "to_add_cluster", ":", "\n", "                            ", "if", "curr_element", "in", "span_to_idx_in_mtt_matrix", ":", "\n", "                                ", "cluster_link_indexes_to_mtt_matrix", ".", "append", "(", "span_to_idx_in_mtt_matrix", "[", "curr_element", "]", ")", "\n", "", "elif", "curr_element", "in", "link_to_idx_in_mtt_matrix", ":", "\n", "                                ", "cluster_link_indexes_to_mtt_matrix", ".", "append", "(", "link_to_idx_in_mtt_matrix", "[", "curr_element", "]", ")", "\n", "\n", "", "", "clusters_all", ".", "append", "(", "cluster_link_indexes_to_mtt_matrix", ")", "\n", "\n", "", "to_print", "[", "'clusters_pred_enabled'", "]", "=", "clusters_pred", "\n", "to_print", "[", "'clusters_pred_all'", "]", "=", "clusters_all", "\n", "\n", "debugging_file", "=", "'ep_{:04d}_{}_debugging_mtt.json'", ".", "format", "(", "settings", ".", "epoch", ",", "\n", "filtered_spans", "[", "'doc_id'", "]", "[", "0", "]", ")", "\n", "debugging_path", "=", "settings", ".", "debugging_path", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "debugging_path", ",", "debugging_file", ")", ",", "'w'", ")", "as", "fp", ":", "\n", "                        ", "json", ".", "dump", "(", "to_print", ",", "fp", ")", "\n", "\n", "###################################### END: debugging json dump", "\n", "", "", "", "", "else", ":", "\n", "            ", "output", "[", "'loss'", "]", "=", "0.0", "\n", "output_coref", "[", "'loss'", "]", "=", "0.0", "\n", "output_coref", "[", "'pred'", "]", "=", "[", "None", "for", "x", "in", "gold_spans", "]", "\n", "output_coref", "[", "'pred_pointers'", "]", "=", "[", "None", "for", "x", "in", "gold_spans", "]", "\n", "output_coref", "[", "'gold'", "]", "=", "[", "None", "for", "x", "in", "gold_spans", "]", "\n", "output_coref", "[", "'scores'", "]", "=", "[", "None", "for", "x", "in", "gold_spans", "]", "\n", "\n", "# TODO: see well what have to add here for pred_linking and gold_linking", "\n", "output_linking", "[", "'pred'", "]", "=", "[", "None", "for", "x", "in", "gold_spans", "]", "\n", "output_linking", "[", "'gold'", "]", "=", "[", "None", "for", "x", "in", "gold_spans", "]", "\n", "output_linking", "[", "'loss'", "]", "=", "0.0", "\n", "output_linking", "[", "'scores'", "]", "=", "[", "None", "for", "x", "in", "gold_spans", "]", "\n", "\n", "# kzaporoj - None for the link part , not yet", "\n", "", "return", "output", "[", "'loss'", "]", ",", "output_linking", ",", "output_coref", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.get_mean": [[1894, 1899], ["len", "sum", "len"], "methods", ["None"], ["", "def", "get_mean", "(", "self", ",", "list_values", ":", "List", ")", ":", "\n", "        ", "if", "len", "(", "list_values", ")", "==", "0", ":", "\n", "            ", "return", "0.0", "\n", "", "else", ":", "\n", "            ", "return", "(", "sum", "(", "list_values", ")", "/", "len", "(", "list_values", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.log_stats": [[1901, 1948], ["print", "tb_logger.log_value", "tb_logger.log_value", "tb_logger.log_value", "tb_logger.log_value", "tb_logger.log_value", "tb_logger.log_value", "tb_logger.log_value", "tb_logger.log_value", "tb_logger.log_value", "tb_logger.log_value", "tb_logger.log_value", "list", "list", "list", "list", "list", "list", "list", "list", "list", "list", "list", "coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.get_mean", "coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.get_mean", "coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.get_mean", "coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.get_mean", "coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.get_mean", "coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.get_mean", "coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.get_mean", "coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.get_mean", "coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.get_mean", "coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.get_mean", "coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.get_mean"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.pruner.MentionPrunerSpanBertHoi.get_mean", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.pruner.MentionPrunerSpanBertHoi.get_mean", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.pruner.MentionPrunerSpanBertHoi.get_mean", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.pruner.MentionPrunerSpanBertHoi.get_mean", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.pruner.MentionPrunerSpanBertHoi.get_mean", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.pruner.MentionPrunerSpanBertHoi.get_mean", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.pruner.MentionPrunerSpanBertHoi.get_mean", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.pruner.MentionPrunerSpanBertHoi.get_mean", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.pruner.MentionPrunerSpanBertHoi.get_mean", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.pruner.MentionPrunerSpanBertHoi.get_mean", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.pruner.MentionPrunerSpanBertHoi.get_mean"], ["", "", "def", "log_stats", "(", "self", ",", "dataset_name", ",", "predict", ",", "tb_logger", ":", "Logger", ",", "step_nr", ")", ":", "\n", "# if self.debug_stats or predict:", "\n", "# TODO: log the:", "\n", "#  1- loss", "\n", "#  2- avg scores for span to span matrix with norm/std/mean/min/max", "\n", "#  3- avg scores for links to spans matrix with norm/std/mean/min/max", "\n", "#  4- TODO: also in tensorboard!", "\n", "        ", "if", "self", ".", "print_debugging", ":", "\n", "            ", "print", "(", "'{}-coreflinker_mtt_hoi-loss: {}'", ".", "format", "(", "dataset_name", ",", "self", ".", "mtt_hoi_loss", ")", ")", "\n", "# tb_logger", "\n", "# mean_hoi_loss = sum(self.mtt_hoi_loss) / len(self.mtt_hoi_loss)", "\n", "tb_logger", ".", "log_value", "(", "'{}-mtt-loss'", ".", "format", "(", "dataset_name", ")", ",", "self", ".", "get_mean", "(", "self", ".", "mtt_hoi_loss", ")", ",", "step_nr", ")", "\n", "\n", "# avg norm", "\n", "tb_logger", ".", "log_value", "(", "'{}-mtt-norm-link_span'", ".", "format", "(", "dataset_name", ")", ",", "\n", "self", ".", "get_mean", "(", "self", ".", "stat_link_span_norm", ")", ",", "step_nr", ")", "\n", "tb_logger", ".", "log_value", "(", "'{}-mtt-mean-link_span'", ".", "format", "(", "dataset_name", ")", ",", "\n", "self", ".", "get_mean", "(", "self", ".", "stat_link_span_mean", ")", ",", "step_nr", ")", "\n", "tb_logger", ".", "log_value", "(", "'{}-mtt-std-link_span'", ".", "format", "(", "dataset_name", ")", ",", "\n", "self", ".", "get_mean", "(", "self", ".", "stat_link_span_std", ")", ",", "step_nr", ")", "\n", "tb_logger", ".", "log_value", "(", "'{}-mtt-min-link_span'", ".", "format", "(", "dataset_name", ")", ",", "\n", "self", ".", "get_mean", "(", "self", ".", "stat_link_span_min", ")", ",", "step_nr", ")", "\n", "tb_logger", ".", "log_value", "(", "'{}-mtt-max-link_span'", ".", "format", "(", "dataset_name", ")", ",", "\n", "self", ".", "get_mean", "(", "self", ".", "stat_link_span_max", ")", ",", "step_nr", ")", "\n", "###", "\n", "tb_logger", ".", "log_value", "(", "'{}-mtt-norm-span_span'", ".", "format", "(", "dataset_name", ")", ",", "\n", "self", ".", "get_mean", "(", "self", ".", "stat_span_span_norm", ")", ",", "step_nr", ")", "\n", "tb_logger", ".", "log_value", "(", "'{}-mtt-mean-span_span'", ".", "format", "(", "dataset_name", ")", ",", "\n", "self", ".", "get_mean", "(", "self", ".", "stat_span_span_mean", ")", ",", "step_nr", ")", "\n", "tb_logger", ".", "log_value", "(", "'{}-mtt-std-span_span'", ".", "format", "(", "dataset_name", ")", ",", "\n", "self", ".", "get_mean", "(", "self", ".", "stat_span_span_std", ")", ",", "step_nr", ")", "\n", "tb_logger", ".", "log_value", "(", "'{}-mtt-min-span_span'", ".", "format", "(", "dataset_name", ")", ",", "\n", "self", ".", "get_mean", "(", "self", ".", "stat_span_span_min", ")", ",", "step_nr", ")", "\n", "tb_logger", ".", "log_value", "(", "'{}-mtt-max-span_span'", ".", "format", "(", "dataset_name", ")", ",", "\n", "self", ".", "get_mean", "(", "self", ".", "stat_span_span_max", ")", ",", "step_nr", ")", "\n", "\n", "self", ".", "mtt_hoi_loss", "=", "list", "(", ")", "\n", "self", ".", "stat_link_span_norm", "=", "list", "(", ")", "\n", "self", ".", "stat_link_span_mean", "=", "list", "(", ")", "\n", "self", ".", "stat_link_span_std", "=", "list", "(", ")", "\n", "self", ".", "stat_link_span_min", "=", "list", "(", ")", "\n", "self", ".", "stat_link_span_max", "=", "list", "(", ")", "\n", "self", ".", "stat_span_span_norm", "=", "list", "(", ")", "\n", "self", ".", "stat_span_span_mean", "=", "list", "(", ")", "\n", "self", ".", "stat_span_span_std", "=", "list", "(", ")", "\n", "self", ".", "stat_span_span_min", "=", "list", "(", ")", "\n", "self", ".", "stat_span_span_max", "=", "list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt_hoi.LossCorefLinkerMTTHoi.create_metrics": [[1956, 1978], ["out.extend", "out.append", "out.append", "out.append", "out.extend", "metrics.coref.MetricCoref", "metrics.coref.MetricCoref", "metrics.coref.MetricCoref", "metrics.coref.MetricCorefAverage", "metrics.misc.MetricObjective", "metrics.corefx.MetricCorefExternal", "metrics.linker.MetricLinkerImproved", "metrics.linker.MetricLinkerImproved", "metrics.linker.MetricLinkerImproved", "metrics.linker.MetricLinkAccuracy", "metrics.linker.MetricLinkAccuracyNoCandidates", "metrics.misc.MetricObjective"], "methods", ["None"], ["", "", "def", "create_metrics", "(", "self", ")", ":", "\n", "        ", "out", "=", "[", "]", "\n", "if", "self", ".", "enabled", ":", "\n", "            ", "metrics", "=", "[", "\n", "MetricCoref", "(", "self", ".", "coref_task", ",", "'muc'", ",", "MetricCoref", ".", "muc", ")", ",", "\n", "MetricCoref", "(", "self", ".", "coref_task", ",", "'bcubed'", ",", "MetricCoref", ".", "b_cubed", ",", "verbose", "=", "False", ")", ",", "\n", "MetricCoref", "(", "self", ".", "coref_task", ",", "'ceafe'", ",", "MetricCoref", ".", "ceafe", ",", "verbose", "=", "False", ")", ",", "\n", "]", "\n", "\n", "out", ".", "extend", "(", "metrics", ")", "\n", "out", ".", "append", "(", "MetricCorefAverage", "(", "self", ".", "coref_task", ",", "'avg'", ",", "metrics", ")", ")", "\n", "out", ".", "append", "(", "MetricObjective", "(", "self", ".", "coref_task", ")", ")", "\n", "out", ".", "append", "(", "MetricCorefExternal", "(", "self", ".", "coref_task", ")", ")", "\n", "\n", "out", ".", "extend", "(", "[", "MetricLinkerImproved", "(", "self", ".", "link_task", ")", ",", "\n", "MetricLinkerImproved", "(", "self", ".", "link_task", ",", "'links'", ")", ",", "\n", "MetricLinkerImproved", "(", "self", ".", "link_task", ",", "'nills'", ")", ",", "\n", "MetricLinkAccuracy", "(", "self", ".", "link_task", ")", ",", "\n", "MetricLinkAccuracyNoCandidates", "(", "self", ".", "link_task", ")", ",", "\n", "MetricObjective", "(", "self", ".", "link_task", ")", "]", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt_hoi.TaskCorefMTT.__init__": [[2011, 2014], ["torch.Module.__init__", "modules.graph.create_graph"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.graph.create_graph"], ["    ", "def", "__init__", "(", "self", ",", "dim_input", ",", "config", ")", ":", "\n", "        ", "super", "(", "TaskCorefMTT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "module", "=", "create_graph", "(", "dim_input", ",", "1", ",", "config", "[", "'scorer'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt_hoi.TaskCorefMTT.forward": [[2015, 2025], ["coreflinker_mtt_hoi.TaskCorefMTT.module().squeeze().squeeze", "create_target_matrix().to", "coreflinker_mtt_hoi.logZ", "coreflinker_mtt_hoi.logZ", "coreflinker_mtt_hoi.TaskCorefMTT.max", "coreflinker_mtt_hoi.TaskCorefMTT.module().squeeze", "coreflinker_mtt_hoi.create_target_matrix", "coreflinker_mtt_hoi.TaskCorefMTT.module"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coref.logZ", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coref.logZ", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coref.create_target_matrix"], ["", "def", "forward", "(", "self", ",", "mentions", ",", "clusters", ")", ":", "\n", "        ", "scores", "=", "self", ".", "module", "(", "mentions", ")", ".", "squeeze", "(", "-", "1", ")", ".", "squeeze", "(", "0", ")", "\n", "targets", "=", "create_target_matrix", "(", "clusters", "[", "0", "]", ")", ".", "to", "(", "scores", ".", "device", ")", "\n", "\n", "scores", "=", "scores", "-", "scores", ".", "max", "(", ")", "\n", "\n", "g", "=", "logZ", "(", "scores", "+", "(", "1", "-", "targets", ")", "*", "-", "10000", ")", "\n", "z", "=", "logZ", "(", "scores", ")", "\n", "\n", "return", "z", "-", "g", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt_hoi.predict_scores_coref_mtt": [[28, 56], ["enumerate", "dict", "enumerate", "to_ret_scores.append", "enumerate", "batch_decoded[].append", "scores_batch[].item"], "function", ["None"], ["def", "predict_scores_coref_mtt", "(", "scores", ",", "pred_spans", ")", ":", "\n", "    ", "\"\"\"\n\n    :param scores: upper triangular matrix\n    :param linker:\n    :param labels:\n    :param no_nills:\n    :return: scores for all the previous spans such as in this short example:\n            [[{(1,1):[{'span':(1,1), 'score': 1.35}],\n                (2,2):[{'span':(1,1), 'score': 1.35},\n                        {'span':(2,2), 'score': 1.32}]}]]\n    \"\"\"", "\n", "to_ret_scores", "=", "[", "]", "\n", "for", "batch_idx", ",", "scores_batch", "in", "enumerate", "(", "scores", ")", ":", "\n", "# print('batch_idx is of ', batch_idx)", "\n", "# print('scores_batch is of ', scores_batch.shape)", "\n", "        ", "batch_decoded", "=", "dict", "(", ")", "\n", "spans_batch", "=", "pred_spans", "[", "batch_idx", "]", "\n", "for", "idx_span_base", ",", "curr_span_base", "in", "enumerate", "(", "spans_batch", ")", ":", "\n", "            ", "for", "idx_span_coref", ",", "curr_span_coref", "in", "enumerate", "(", "spans_batch", ")", ":", "\n", "                ", "if", "idx_span_coref", "<=", "idx_span_base", ":", "\n", "                    ", "if", "curr_span_base", "not", "in", "batch_decoded", ":", "\n", "                        ", "batch_decoded", "[", "curr_span_base", "]", "=", "[", "]", "\n", "", "batch_decoded", "[", "curr_span_base", "]", ".", "append", "(", "{", "'span'", ":", "curr_span_coref", ",", "\n", "'score'", ":", "scores_batch", "[", "idx_span_base", ",", "idx_span_coref", "]", ".", "item", "(", ")", "}", ")", "\n", "", "", "", "to_ret_scores", ".", "append", "(", "batch_decoded", ")", "\n", "\n", "", "return", "to_ret_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt_hoi.create_coreflinker_mtt_z_mask": [[58, 114], ["len", "max", "torch.zeros", "torch.zeros", "list", "enumerate", "zip", "list.append", "dict", "enumerate", "enumerate", "enumerate", "range", "torch.tensor", "torch.tensor", "len", "span_offset.item", "len", "clusters[].item", "enumerate", "link_id.item", "cand_id.item.item"], "function", ["None"], ["", "def", "create_coreflinker_mtt_z_mask", "(", "pred_spans", ",", "gold_spans", ",", "gold_clusters", ",", "linker_targets", ",", "\n", "candidates", ",", "\n", "candidate_lengths", ",", "\n", "unique_links", ",", "unique_links_lengths", ",", "unknown_id", ")", ":", "\n", "    ", "\"\"\"\n    :param pred_spans:\n    :param gold_spans:\n    :param gold_clusters:\n    :param linker_targets:\n    :return:\n        Binary (1 or 0) mask matrix of dimensions (not counting the first batch):\n        [(1(root) + distinct links from pred spans + pred spans) x\n        (1(root) + distinct links from pred spans + pred spans)]\n    \"\"\"", "\n", "num_batch", "=", "len", "(", "pred_spans", ")", "# 1", "\n", "max_spans", "=", "max", "(", "[", "len", "(", "x", ")", "for", "x", "in", "pred_spans", "]", ")", "# 9", "\n", "\n", "coreflinker_mtt_z_mask", "=", "torch", ".", "zeros", "(", "num_batch", ",", "1", "+", "unique_links", ".", "shape", "[", "-", "1", "]", "+", "max_spans", ",", "\n", "1", "+", "unique_links", ".", "shape", "[", "-", "1", "]", "+", "max_spans", ",", "device", "=", "settings", ".", "device", ",", "\n", "dtype", "=", "torch", ".", "float32", ")", "\n", "z_mask_lengths", "=", "list", "(", ")", "\n", "for", "batch", ",", "(", "pred", ",", "gold", ",", "clusters", ")", "in", "enumerate", "(", "zip", "(", "pred_spans", ",", "gold_spans", ",", "gold_clusters", ")", ")", ":", "\n", "        ", "span_offset", "=", "unique_links_lengths", "[", "batch", "]", "+", "1", "\n", "curr_z_mask_length", "=", "span_offset", ".", "item", "(", ")", "+", "len", "(", "pred", ")", "# root + links + spans", "\n", "z_mask_lengths", ".", "append", "(", "curr_z_mask_length", ")", "\n", "\n", "link_id_to_idx", "=", "dict", "(", ")", "\n", "for", "idx_link", ",", "link_id", "in", "enumerate", "(", "unique_links", "[", "batch", "]", ")", ":", "\n", "            ", "link_id_to_idx", "[", "link_id", ".", "item", "(", ")", "]", "=", "idx_link", "\n", "", "gold2cluster", "=", "{", "}", "\n", "for", "idx", ",", "span", "in", "enumerate", "(", "gold", ")", ":", "\n", "            ", "gold2cluster", "[", "span", "]", "=", "clusters", "[", "idx", "]", ".", "item", "(", ")", "\n", "# processed_clusters = set()", "\n", "", "for", "idx1", ",", "span1", "in", "enumerate", "(", "pred", ")", ":", "\n", "# between spans", "\n", "            ", "for", "idx2", ",", "span2", "in", "enumerate", "(", "pred", ")", ":", "\n", "                ", "if", "idx2", "!=", "idx1", ":", "\n", "                    ", "coreflinker_mtt_z_mask", "[", "batch", ",", "idx1", "+", "span_offset", ",", "idx2", "+", "span_offset", "]", "=", "1.0", "\n", "\n", "# from links to spans", "\n", "", "", "if", "candidate_lengths", "[", "batch", ",", "idx1", "]", ">", "0", ":", "\n", "                ", "for", "cand_id", "in", "candidates", "[", "batch", ",", "idx1", "]", ":", "\n", "                    ", "cand_id", "=", "cand_id", ".", "item", "(", ")", "\n", "if", "cand_id", "!=", "unknown_id", ":", "\n", "# + 1 because of the root which is in the first row", "\n", "                        ", "coreflinker_mtt_z_mask", "[", "batch", ",", "link_id_to_idx", "[", "cand_id", "]", "+", "1", ",", "idx1", "+", "span_offset", "]", "=", "1.0", "\n", "\n", "# from root to span", "\n", "", "", "", "coreflinker_mtt_z_mask", "[", "batch", ",", "0", ",", "idx1", "+", "span_offset", "]", "=", "1.0", "\n", "\n", "# from root to all the links of the spans", "\n", "", "for", "curr_link_idx", "in", "range", "(", "unique_links_lengths", "[", "batch", "]", ")", ":", "\n", "# + 1 because of the root which is in the first column", "\n", "            ", "coreflinker_mtt_z_mask", "[", "batch", ",", "0", ",", "curr_link_idx", "+", "1", "]", "=", "1.0", "\n", "\n", "", "", "return", "coreflinker_mtt_z_mask", ",", "torch", ".", "tensor", "(", "z_mask_lengths", ",", "dtype", "=", "torch", ".", "int32", ",", "device", "=", "settings", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt_hoi.create_coreflinker_mtt_z_mask_indexed": [[116, 158], ["len", "max", "torch.zeros", "torch.zeros", "list", "enumerate", "zip", "list.append", "len", "torch.ones", "torch.ones", "numpy.diag_indices", "torch.zeros", "torch.zeros", "mix_cross.sum", "torch.tensor", "torch.tensor", "len", "span_offset.item", "len", "candidates[].unsqueeze"], "function", ["None"], ["", "def", "create_coreflinker_mtt_z_mask_indexed", "(", "pred_spans", ",", "gold_spans", ",", "gold_clusters", ",", "linker_targets", ",", "\n", "candidates", ",", "\n", "candidate_lengths", ",", "\n", "unique_links", ",", "unique_links_lengths", ",", "unknown_id", ")", ":", "\n", "    ", "\"\"\"\n    :param pred_spans:\n    :param gold_spans:\n    :param gold_clusters:\n    :param linker_targets:\n    :return:\n        Binary (1 or 0) mask matrix of dimensions (not counting the first batch):\n        [(1(root) + distinct links from pred spans + pred spans) x\n        (1(root) + distinct links from pred spans + pred spans)]\n        Indexed version that should be faster than create_coreflinker_mtt_z_mask\n    \"\"\"", "\n", "num_batch", "=", "len", "(", "pred_spans", ")", "# 1", "\n", "max_spans", "=", "max", "(", "[", "len", "(", "x", ")", "for", "x", "in", "pred_spans", "]", ")", "# 21", "\n", "\n", "coreflinker_mtt_z_mask_indexed", "=", "torch", ".", "zeros", "(", "num_batch", ",", "1", "+", "unique_links", ".", "shape", "[", "-", "1", "]", "+", "max_spans", ",", "\n", "1", "+", "unique_links", ".", "shape", "[", "-", "1", "]", "+", "max_spans", ",", "device", "=", "settings", ".", "device", ",", "\n", "dtype", "=", "torch", ".", "float32", ")", "# .shape --> torch.Size([1, 89, 89])", "\n", "z_mask_lengths", "=", "list", "(", ")", "\n", "for", "batch", ",", "(", "pred", ",", "gold", ",", "clusters", ")", "in", "enumerate", "(", "zip", "(", "pred_spans", ",", "gold_spans", ",", "gold_clusters", ")", ")", ":", "\n", "        ", "span_offset", "=", "unique_links_lengths", "[", "batch", "]", "+", "1", "\n", "curr_z_mask_length", "=", "span_offset", ".", "item", "(", ")", "+", "len", "(", "pred", ")", "# root + links + spans", "\n", "z_mask_lengths", ".", "append", "(", "curr_z_mask_length", ")", "\n", "\n", "len_pred", "=", "len", "(", "pred", ")", "\n", "mask_span_to_span", "=", "torch", ".", "ones", "(", "len_pred", ",", "len_pred", ",", "device", "=", "settings", ".", "device", ")", "\n", "ind", "=", "np", ".", "diag_indices", "(", "mask_span_to_span", ".", "shape", "[", "0", "]", ")", "\n", "mask_span_to_span", "[", "ind", "[", "0", "]", ",", "ind", "[", "1", "]", "]", "=", "torch", ".", "zeros", "(", "mask_span_to_span", ".", "shape", "[", "0", "]", ",", "device", "=", "settings", ".", "device", ")", "\n", "\n", "coreflinker_mtt_z_mask_indexed", "[", "batch", ",", "span_offset", ":", ",", "span_offset", ":", "]", "=", "mask_span_to_span", "[", ":", "]", "\n", "\n", "mix_cross", ":", "torch", ".", "Tensor", "=", "candidates", "[", "batch", "]", ".", "unsqueeze", "(", "-", "1", ")", "==", "unique_links", "[", "batch", "]", "\n", "mask_link_to_span", "=", "mix_cross", ".", "sum", "(", "-", "2", ")", "\n", "mask_link_to_span", "=", "mask_link_to_span", ".", "T", "\n", "\n", "coreflinker_mtt_z_mask_indexed", "[", "batch", ",", "1", ":", "span_offset", ",", "span_offset", ":", "]", "=", "mask_link_to_span", "[", ":", "]", "\n", "coreflinker_mtt_z_mask_indexed", "[", "batch", ",", "0", ",", "1", ":", "]", "=", "1.0", "\n", "\n", "", "return", "coreflinker_mtt_z_mask_indexed", ",", "torch", ".", "tensor", "(", "z_mask_lengths", ",", "dtype", "=", "torch", ".", "int32", ",", "device", "=", "settings", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt_hoi.create_coreflinker_mtt_target_mask": [[160, 226], ["len", "max", "torch.zeros", "torch.zeros", "linker_targets.sum", "list", "enumerate", "zip", "list.append", "enumerate", "set", "enumerate", "torch.tensor", "torch.tensor", "len", "unique_links_lengths[].item", "len", "clusters[].item", "nr_candidate_links_per_mention[].item", "enumerate", "candidates[].item", "set.add"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add"], ["", "def", "create_coreflinker_mtt_target_mask", "(", "pred_spans", ",", "gold_spans", ",", "gold_clusters", ",", "linker_targets", ",", "candidates", ",", "\n", "unique_links", ",", "unique_links_lengths", ")", ":", "\n", "    ", "\"\"\"\n\n    :param pred_spans:\n    :param gold_spans:\n    :param gold_clusters:\n    :param linker_targets ; :\n    :return:\n        Binary (1 or 0) mask matrix of dimensions (not counting the first batch):\n        [(1(root) + distinct links from pred spans + pred spans) x\n        (1(root) + distinct links from pred spans + pred spans)]\n    \"\"\"", "\n", "\n", "num_batch", "=", "len", "(", "pred_spans", ")", "# 1", "\n", "max_spans", "=", "max", "(", "[", "len", "(", "x", ")", "for", "x", "in", "pred_spans", "]", ")", "# 9", "\n", "\n", "coreflinker_mtt_targets", "=", "torch", ".", "zeros", "(", "num_batch", ",", "1", "+", "unique_links", ".", "shape", "[", "-", "1", "]", "+", "max_spans", ",", "\n", "1", "+", "unique_links", ".", "shape", "[", "-", "1", "]", "+", "max_spans", ",", "\n", "dtype", "=", "torch", ".", "float32", ",", "\n", "device", "=", "settings", ".", "device", ")", "\n", "nr_candidate_links_per_mention", "=", "linker_targets", ".", "sum", "(", "-", "1", ")", "\n", "target_mask_lengths", "=", "list", "(", ")", "\n", "# targets for span-span coref # TODO!! - also check that linker_targets come as batch!!!", "\n", "for", "batch", ",", "(", "pred", ",", "gold", ",", "clusters", ")", "in", "enumerate", "(", "zip", "(", "pred_spans", ",", "gold_spans", ",", "gold_clusters", ")", ")", ":", "\n", "# root to links always in 1", "\n", "        ", "coreflinker_mtt_targets", "[", "batch", ",", "0", ",", "1", ":", "unique_links_lengths", "[", "batch", "]", "+", "1", "]", "=", "1.0", "\n", "span_offset", "=", "1", "+", "unique_links_lengths", "[", "batch", "]", ".", "item", "(", ")", "\n", "curr_target_length", "=", "span_offset", "+", "len", "(", "pred", ")", "# root + links + spans", "\n", "target_mask_lengths", ".", "append", "(", "curr_target_length", ")", "\n", "gold2cluster", "=", "{", "}", "\n", "for", "idx", ",", "span", "in", "enumerate", "(", "gold", ")", ":", "\n", "            ", "gold2cluster", "[", "span", "]", "=", "clusters", "[", "idx", "]", ".", "item", "(", ")", "\n", "", "processed_clusters", "=", "set", "(", ")", "\n", "for", "idx1", ",", "span1", "in", "enumerate", "(", "pred", ")", ":", "\n", "            ", "num_coref_spans_found", "=", "0", "\n", "# num_span_links_found = 0", "\n", "if", "span1", "in", "gold2cluster", ":", "\n", "                ", "for", "idx2", ",", "span2", "in", "enumerate", "(", "pred", ")", ":", "\n", "# if idx2 < idx1 and span2 in gold2cluster and gold2cluster[span1] == gold2cluster[span2]:", "\n", "                    ", "if", "idx2", "!=", "idx1", "and", "span2", "in", "gold2cluster", "and", "gold2cluster", "[", "span1", "]", "==", "gold2cluster", "[", "span2", "]", ":", "\n", "# coref_targets[batch, idx1, idx2] = 1.0", "\n", "                        ", "coreflinker_mtt_targets", "[", "batch", ",", "idx1", "+", "span_offset", ",", "idx2", "+", "span_offset", "]", "=", "1.0", "\n", "num_coref_spans_found", "+=", "1", "\n", "\n", "# (kzaporoj) - here also checks whether a particular mention has entity linking candidates, and if so,", "\n", "# also sets the num_found to num_candidates", "\n", "# print('here todo with num_found of linking candidates')", "\n", "", "", "", "num_span_links_found", "=", "nr_candidate_links_per_mention", "[", "batch", ",", "idx1", "]", ".", "item", "(", ")", "\n", "if", "num_span_links_found", "==", "0", ":", "\n", "# TODO!!! - potentially buggy code, in case the correct link is not in the candidates of the first span!", "\n", "                ", "if", "(", "span1", "not", "in", "gold2cluster", ")", "or", "(", "span1", "in", "gold2cluster", "and", "gold2cluster", "[", "span1", "]", "not", "in", "processed_clusters", ")", ":", "\n", "                    ", "coreflinker_mtt_targets", "[", "batch", ",", "0", ",", "idx1", "+", "span_offset", "]", "=", "1.0", "\n", "", "", "else", ":", "\n", "# connects to the correct link", "\n", "                ", "correct_link_id", "=", "candidates", "[", "batch", ",", "idx1", ",", "linker_targets", "[", "batch", ",", "idx1", "]", ">", "0.5", "]", ".", "item", "(", ")", "\n", "# correct_link_id = candidates[batch, idx1, linker_targets[batch, idx1] == 1.0].item()", "\n", "offset_correct_link", "=", "(", "unique_links", "[", "batch", "]", "==", "correct_link_id", ")", ".", "nonzero", "(", ")", ".", "item", "(", ")", "\n", "coreflinker_mtt_targets", "[", "batch", ",", "offset_correct_link", "+", "1", ",", "idx1", "+", "span_offset", "]", "=", "1.0", "\n", "# raise Exception('STILL HAVE TO DEBUG THIS PART, TO SEE IF correct_link_id is correctly calculated')", "\n", "\n", "", "if", "span1", "in", "gold2cluster", ":", "\n", "                ", "processed_clusters", ".", "add", "(", "gold2cluster", "[", "span1", "]", ")", "\n", "\n", "", "", "", "return", "coreflinker_mtt_targets", ",", "torch", ".", "tensor", "(", "target_mask_lengths", ",", "dtype", "=", "torch", ".", "int32", ",", "device", "=", "settings", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt_hoi.m2i_to_clusters_linkercoref_mtt": [[228, 268], ["enumerate", "list", "links_dictionary.get", "clusters[].append", "clusters[].append", "clusters.values"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get"], ["", "def", "m2i_to_clusters_linkercoref_mtt", "(", "m2i", ",", "coref_col_to_link_id", "=", "None", ",", "\n", "links_dictionary", ":", "Dictionary", "=", "None", ",", "nr_candidates", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n\n    :param m2i: <class 'list'>: [36, 4, 36, 14, 36, 4, 4, 4, 32]\n    :return:\n    \"\"\"", "\n", "clusters", "=", "{", "}", "\n", "m2c", "=", "{", "}", "\n", "for", "m", ",", "c", "in", "enumerate", "(", "m2i", ")", ":", "\n", "        ", "if", "c", "==", "-", "1", ":", "\n", "# not a valid cluster (i.e. should happen if filter_singletons_with_matrix is in true and the span points to", "\n", "# the matrix column that indicates it is a not valid entity mention).", "\n", "            ", "continue", "\n", "\n", "", "if", "c", "not", "in", "clusters", ":", "\n", "            ", "clusters", "[", "c", "]", "=", "[", "]", "\n", "\n", "", "link_token", "=", "''", "\n", "if", "c", "<", "nr_candidates", ":", "\n", "            ", "link_id", "=", "coref_col_to_link_id", "[", "c", "+", "1", "]", "\n", "link_token", "=", "links_dictionary", ".", "get", "(", "link_id", ")", "\n", "\n", "# if points to 'NILL', just makes it point to itself, this is because we can not cluster entities based on 'NILL'", "\n", "# since different entities can point to 'NILL'. Same with NONE.", "\n", "", "if", "link_token", "==", "'NILL'", "or", "link_token", "==", "'NONE'", ":", "\n", "# if link_token == 'NILL':", "\n", "            ", "if", "m", "not", "in", "clusters", ":", "\n", "                ", "clusters", "[", "m", "]", "=", "[", "]", "\n", "", "clusters", "[", "m", "]", ".", "append", "(", "m", ")", "\n", "m2c", "[", "m", "]", "=", "clusters", "[", "m", "]", "\n", "", "else", ":", "\n", "            ", "clusters", "[", "c", "]", ".", "append", "(", "m", ")", "\n", "m2c", "[", "m", "]", "=", "clusters", "[", "c", "]", "\n", "\n", "# clusters: <class 'dict'>: {0: [0], 1: [1, 6, 7, 10], 2: [2], 3: [3, 11], 4: [4], 5: [5], 8: [8, 12], 9: [9], 13: [13]}", "\n", "# clusters.values(): <class 'list'>: [[0], [1, 6, 7, 10], [2], [3, 11], [4], [5], [8, 12], [9], [13]]", "\n", "# m2c: <class 'dict'>: {0: [0], 1: [1, 6, 7, 10], 2: [2], 3: [3, 11], 4: [4], 5: [5], 6: [1, 6, 7, 10],", "\n", "#   7: [1, 6, 7, 10], 8: [8, 12], 9: [9], 10: [1, 6, 7, 10], 11: [3, 11], 12: [8, 12], 13: [13]}", "\n", "", "", "return", "list", "(", "clusters", ".", "values", "(", ")", ")", ",", "m2c", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt_hoi.dfs_edges": [[271, 282], ["range", "coreflinker_mtt_hoi.dfs_edges"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt.dfs_edges"], ["", "def", "dfs_edges", "(", "b_pred_matrix_mst", ",", "from_node", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n\n    :param b_pred_matrix_mst:\n    :return: gets edges of depth first search traverse over the adjacency matrix passed as parameter\n    \"\"\"", "\n", "to_ret", "=", "[", "]", "\n", "for", "to_node", "in", "range", "(", "b_pred_matrix_mst", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "if", "b_pred_matrix_mst", "[", "from_node", ",", "to_node", "]", "==", "1.0", ":", "\n", "            ", "to_ret", "+=", "[", "(", "from_node", ",", "to_node", ")", "]", "+", "dfs_edges", "(", "b_pred_matrix_mst", ",", "to_node", ")", "\n", "", "", "return", "to_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt_hoi.convert_coref_mtt": [[284, 318], ["dict", "range", "set", "dict.items", "len", "out_mention_to_link_id[].append", "print", "links_dictionary.get"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get"], ["", "def", "convert_coref_mtt", "(", "clusters", ",", "spans", ",", "number_candidates", "=", "None", ",", "links_dictionary", ":", "Dictionary", "=", "None", ",", "\n", "coref_col_to_link_id", ":", "dict", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n\n    :param clusters: it is a tuple, see below for components (clusters and m2c)\n    :param spans: <class 'list'>: [(3, 4), (5, 7), (41, 43), (45, 47), (49, 49), (50, 50), (51, 52), (53, 54), (57, 57)]\n    :return:\n    \"\"\"", "\n", "(", "clusters", ",", "m2c", ")", "=", "clusters", "\n", "\n", "out_coref_clusters", "=", "[", "[", "spans", "[", "m", "-", "number_candidates", "]", "for", "m", "in", "cluster", "if", "m", ">=", "number_candidates", "]", "\n", "for", "cluster", "in", "clusters", "]", "# IndexError: list index out of range", "\n", "out_coref_clusters", "=", "[", "span_cluster", "for", "span_cluster", "in", "out_coref_clusters", "if", "len", "(", "span_cluster", ")", ">", "0", "]", "\n", "\n", "out_mention_to_link_id", "=", "dict", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "number_candidates", ")", ":", "\n", "        ", "span_ids", "=", "[", "span_id", "for", "span_id", "in", "m2c", "[", "i", "]", "if", "span_id", ">=", "number_candidates", "]", "\n", "for", "curr_span_id", "in", "span_ids", ":", "\n", "            ", "if", "curr_span_id", "not", "in", "out_mention_to_link_id", ":", "\n", "                ", "out_mention_to_link_id", "[", "curr_span_id", "]", "=", "[", "i", "]", "\n", "", "else", ":", "\n", "                ", "out_mention_to_link_id", "[", "curr_span_id", "]", ".", "append", "(", "i", ")", "\n", "print", "(", "'WARNING ON CANDIDATE LINKING!!: '", ",", "curr_span_id", ",", "' has been resolved to multiple '", "\n", "'candidates: '", ",", "\n", "out_mention_to_link_id", "[", "curr_span_id", "]", ")", "\n", "\n", "# +1 because we do not count the root taken into account in coref_col_to_link_id", "\n", "", "", "", "out_mention_to_link_id2", "=", "[", "(", "spans", "[", "k", "-", "number_candidates", "]", "+", "(", "links_dictionary", ".", "get", "(", "coref_col_to_link_id", "[", "v", "[", "0", "]", "+", "1", "]", ")", ",", ")", ")", "\n", "for", "k", ",", "v", "in", "out_mention_to_link_id", ".", "items", "(", ")", "]", "\n", "\n", "spans_with_link", "=", "set", "(", "[", "(", "span_start", ",", "span_end", ")", "for", "span_start", ",", "span_end", ",", "_", "in", "out_mention_to_link_id2", "]", ")", "\n", "\n", "return", "out_coref_clusters", ",", "out_mention_to_link_id2", ",", "spans_with_link", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt_hoi.get_smart_arsinh_exp": [[320, 322], ["torch.sqrt", "torch.sqrt", "torch.pow", "torch.pow"], "function", ["None"], ["", "def", "get_smart_arsinh_exp", "(", "tensor_to_simplify", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "return", "tensor_to_simplify", "+", "torch", ".", "sqrt", "(", "torch", ".", "pow", "(", "tensor_to_simplify", ",", "2", ")", "+", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt_hoi.create_target_matrix": [[1980, 1994], ["enumerate", "torch.zeros", "torch.zeros", "cluster2mentions.items", "clusters.tolist", "cluster2mentions[].append", "clusters.size"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist"], ["", "", "def", "create_target_matrix", "(", "clusters", ")", ":", "\n", "    ", "cluster2mentions", "=", "{", "}", "\n", "for", "mention", ",", "cluster", "in", "enumerate", "(", "clusters", ".", "tolist", "(", ")", ")", ":", "\n", "        ", "if", "cluster", "not", "in", "cluster2mentions", ":", "\n", "            ", "cluster2mentions", "[", "cluster", "]", "=", "[", "]", "\n", "", "cluster2mentions", "[", "cluster", "]", ".", "append", "(", "mention", ")", "\n", "\n", "", "number_of_mentions", "=", "clusters", ".", "size", "(", ")", "[", "0", "]", "\n", "target", "=", "torch", ".", "zeros", "(", "number_of_mentions", ",", "number_of_mentions", ",", "device", "=", "settings", ".", "device", ")", "\n", "for", "cluster", ",", "mentions", "in", "cluster2mentions", ".", "items", "(", ")", ":", "\n", "        ", "for", "m1", "in", "mentions", ":", "\n", "            ", "for", "m2", "in", "mentions", ":", "\n", "                ", "target", "[", "m1", ",", "m2", "]", "=", "1", "\n", "", "", "", "return", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt_hoi.logZ": [[1996, 2007], ["torch.zeros", "torch.zeros", "torch.exp", "torch.exp", "torch.diag", "torch.diag", "L.logdet", "torch.exp.sum", "scores.size", "scores.size", "torch.eye", "torch.eye"], "function", ["None"], ["", "def", "logZ", "(", "scores", ")", ":", "\n", "    ", "dim", "=", "scores", ".", "size", "(", ")", "[", "0", "]", "+", "1", "\n", "\n", "S", "=", "torch", ".", "zeros", "(", "dim", ",", "dim", ")", "\n", "S", "[", "1", ":", ",", "1", ":", "]", "=", "scores", "\n", "A", "=", "torch", ".", "exp", "(", "S", "+", "torch", ".", "eye", "(", "dim", ")", "*", "-", "10000", ")", "\n", "D", "=", "torch", ".", "diag", "(", "A", ".", "sum", "(", "0", ")", ")", "\n", "L", "=", "D", "-", "A", "\n", "\n", "L", "[", "0", ",", "1", ":", "]", "=", "1", "/", "scores", ".", "size", "(", ")", "[", "0", "]", "\n", "return", "L", ".", "logdet", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.linker.LinkerNone.__init__": [[177, 180], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["\n", "print", "(", "\"Model:\"", ",", "model", ")", "\n", "\n", "regularization", "=", "config", "[", "'optimizer'", "]", "[", "'regularization'", "]", "if", "'regularization'", "in", "config", "[", "'optimizer'", "]", "else", "{", "}", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.linker.LinkerNone.forward": [[181, 193], ["range", "range", "range"], "methods", ["None"], ["\n", "print", "(", "\"Parameters:\"", ")", "\n", "parameters", "=", "[", "]", "\n", "num_params", "=", "0", "\n", "for", "key", ",", "value", "in", "dict", "(", "model", ".", "named_parameters", "(", ")", ")", ".", "items", "(", ")", ":", "\n", "# \t\tprint(key)", "\n", "        ", "if", "not", "value", ".", "requires_grad", ":", "\n", "            ", "print", "(", "\"skip \"", ",", "key", ")", "\n", "continue", "\n", "", "else", ":", "\n", "            ", "if", "key", "in", "regularization", ":", "\n", "                ", "print", "(", "\"param {} size={} l2={}\"", ".", "format", "(", "key", ",", "value", ".", "numel", "(", ")", ",", "regularization", "[", "key", "]", ")", ")", "\n", "parameters", "+=", "[", "{", "\"params\"", ":", "value", ",", "\"weight_decay\"", ":", "regularization", "[", "key", "]", "}", "]", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.linker.LinkerNone.create_metrics": [[194, 196], ["None"], "methods", ["None"], ["", "else", ":", "\n", "                ", "print", "(", "\"param {} size={}\"", ".", "format", "(", "key", ",", "value", ".", "numel", "(", ")", ")", ")", "\n", "parameters", "+=", "[", "{", "\"params\"", ":", "value", "}", "]", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.linker.LossLinker.__init__": [[268, 304], ["torch.Module.__init__", "modules.text_field.TextFieldEmbedderTokens", "range", "layers.append", "torch.Sequential", "torch.Sequential", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "linker.LossLinker.entity_embedder.dictionary.tolist", "modules.utils.entity.EntityEmbbederKB", "layers.extend", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.linker.LossLinker.forward": [[305, 379], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.size", "linker[].to", "modules.misc.misc.batched_index_select", "modules.misc.misc.batched_index_select", "modules.misc.misc.batched_index_select().squeeze", "all_vecs.size", "modules.utils.misc.spans_to_indices", "modules.utils.misc.filter_spans", "modules.misc.misc.batched_index_select.to", "linker.LossLinker.entity_embedder", "linker_vecs.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "linker.LossLinker.layers().squeeze", "create_candidate_mask().float().to", "linker.LossLinker.loss", "linker.predict_links", "modules.utils.misc.predict_scores", "modules.utils.misc.spans_to_indices.to", "linker.LossLinker.kb_embedder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "linker_vecs.unsqueeze().expand.unsqueeze().expand.size", "linker_vecs.unsqueeze().expand.unsqueeze().expand.size", "torch.cat.size", "torch.cat.size", "linker_vecs.unsqueeze().expand.unsqueeze().expand.size", "modules.misc.misc.batched_index_select", "linker_vecs.unsqueeze().expand.unsqueeze().expand.unsqueeze", "linker.LossLinker.layers", "create_candidate_mask().float", "modules.misc.misc.batched_index_select().squeeze.unsqueeze", "linker.create_candidate_mask"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.batched_index_select", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.batched_index_select", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.spans_to_indices", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.filter_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.linker.predict_links", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.misc.predict_scores", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.batched_index_select", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.create_candidate_mask"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.linker.LossLinker.create_metrics": [[380, 386], ["metrics.linker.MetricLinkerImproved", "metrics.linker.MetricLinkerImproved", "metrics.linker.MetricLinkerImproved", "metrics.linker.MetricLinkAccuracy", "metrics.linker.MetricLinkAccuracyNoCandidates", "metrics.misc.MetricObjective"], "methods", ["None"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.linker.LossLinkerE2E.__init__": [[390, 428], ["torch.Module.__init__", "modules.text_field.TextFieldEmbedderTokens", "range", "layers.append", "torch.Sequential", "torch.Sequential", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "linker.LossLinkerE2E.entity_embedder.dictionary.tolist", "modules.utils.entity.EntityEmbbederKB", "layers.extend", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.linker.LossLinkerE2E.forward": [[429, 545], ["dict", "spans_all[].sum", "spans_all[].view", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack.size", "torch.stack.size", "modules.misc.misc.batched_index_select", "modules.misc.misc.batched_index_select().squeeze", "modules.misc.misc.batched_index_select", "modules.utils.misc.filter_spans", "modules.misc.misc.batched_index_select.to", "linker.LossLinkerE2E.entity_embedder", "linker_vecs.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "linker.LossLinkerE2E.layers().squeeze", "create_candidate_mask().float().to", "linker.LossLinkerE2E.loss", "linker.predict_links_e2e", "list", "spans_all[].size", "spans_all[].size", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "all_linker_indices.append", "modules.utils.misc.indices_to_spans", "all_linker_spans.append", "torch.stack.to", "torch.stack.to", "linker.LossLinkerE2E.kb_embedder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "linker_vecs.unsqueeze().expand.unsqueeze().expand.size", "linker_vecs.unsqueeze().expand.unsqueeze().expand.size", "torch.cat.size", "torch.cat.size", "linker_vecs.unsqueeze().expand.unsqueeze().expand.size", "dict", "list", "list.append", "torch.stack.unsqueeze", "torch.stack.unsqueeze", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "modules.misc.misc.batched_index_select", "linker_vecs.unsqueeze().expand.unsqueeze().expand.unsqueeze", "linker.LossLinkerE2E.layers", "create_candidate_mask().float", "dict.values", "sorted", "modules.tasks.coreflinker.convert_coref", "zip", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "modules.misc.misc.batched_index_select().squeeze.unsqueeze", "curr_doc_link_to_span[].append", "modules.tasks.coreflinker.m2i_to_clusters_linkercoref", "linker.create_candidate_mask", "list", "x.tolist", "spans_all[].view.size", "spans_all[].view.size"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.batched_index_select", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.batched_index_select", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.filter_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.linker.predict_links_e2e", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.indices_to_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.batched_index_select", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.convert_coref", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.m2i_to_clusters_linkercoref", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.create_candidate_mask", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.linker.LossLinkerE2E.create_metrics": [[546, 552], ["metrics.linker.MetricLinkerImproved", "metrics.linker.MetricLinkerImproved", "metrics.linker.MetricLinkerImproved", "metrics.linker.MetricLinkAccuracy", "metrics.linker.MetricLinkAccuracyNoCandidates", "metrics.misc.MetricObjective"], "methods", ["None"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.linker.collate_spans": [[15, 31], ["max", "enumerate", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "len", "len", "len", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.LongTensor", "torch.LongTensor"], "function", ["None"], ["\n", "if", "type", "==", "'word2vec'", ":", "\n", "        ", "print", "(", "\"init {} with {}\"", ".", "format", "(", "path", ",", "filename", ")", ")", "\n", "dictionary", "=", "Dictionary", "(", "filename", ")", "\n", "", "elif", "type", "==", "'spirit'", ":", "\n", "        ", "dictionary", "=", "Dictionary", "(", ")", "\n", "dictionary", ".", "load_spirit_dictionary", "(", "filename", ",", "config", "[", "'threshold'", "]", ")", "\n", "", "elif", "type", "==", "'vocab'", ":", "\n", "        ", "dictionary", "=", "Dictionary", "(", ")", "\n", "dictionary", ".", "load_wordpiece_vocab", "(", "filename", ")", "\n", "", "elif", "type", "==", "'json'", ":", "\n", "        ", "dictionary", "=", "Dictionary", "(", ")", "\n", "dictionary", ".", "load_json", "(", "filename", ")", "\n", "", "elif", "type", "==", "'bert'", ":", "\n", "        ", "dictionary", "=", "BertTokenizer", ".", "from_pretrained", "(", "config", "[", "'filename'", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "BaseException", "(", "\"no such type\"", ",", "type", ")", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.linker.create_candidate_mask": [[33, 39], ["torch.arange", "torch.arange", "tmp.unsqueeze().unsqueeze.unsqueeze().unsqueeze", "candidate_lengths.unsqueeze.unsqueeze", "scores.size", "tmp.unsqueeze().unsqueeze.unsqueeze"], "function", ["None"], ["", "return", "dictionary", "\n", "\n", "\n", "", "def", "create_linking_candidates", "(", "config", ",", "entity_dictionary", ":", "Dictionary", ")", ":", "\n", "# print('STARTING LOADING LINKING CANDIDATES')", "\n", "    ", "candidates_path", "=", "config", "[", "'file'", "]", "\n", "max_link_candidates", "=", "config", "[", "'max_link_candidates'", "]", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.linker.collate_candidates": [[41, 74], ["max", "max", "enumerate", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "enumerate", "len", "max", "len", "len", "len", "len", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "len", "len", "len", "len"], "function", ["None"], ["for", "curr_line", "in", "open", "(", "candidates_path", ")", ":", "\n", "        ", "curr_span_candidates", "=", "json", ".", "loads", "(", "curr_line", ")", "\n", "span_text", "=", "curr_span_candidates", "[", "'text'", "]", ".", "strip", "(", ")", "# TODO: makes sense lowercasing, or will make it worse???", "\n", "span_candidates", "=", "curr_span_candidates", "[", "'candidates'", "]", "\n", "span_scores", "=", "curr_span_candidates", "[", "'scores'", "]", "\n", "# candidates should come sorted by score, but just in case sorts again", "\n", "sorted_candidates", "=", "sorted", "(", "zip", "(", "span_candidates", ",", "span_scores", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "if", "max_link_candidates", ">", "-", "1", ":", "\n", "            ", "sorted_candidates", "=", "sorted_candidates", "[", ":", "max_link_candidates", "]", "\n", "\n", "", "span_text_to_candidates", "[", "span_text", "]", "=", "dict", "(", ")", "\n", "\n", "scores_list", "=", "list", "(", ")", "\n", "candidates_list", "=", "list", "(", ")", "\n", "for", "curr_candidate", ",", "curr_score", "in", "sorted_candidates", ":", "\n", "            ", "candidates_list", ".", "append", "(", "entity_dictionary", ".", "add", "(", "curr_candidate", ")", ")", "\n", "scores_list", ".", "append", "(", "curr_score", ")", "\n", "# passes to torch.tensor in order to decrease the memory footprint - the lists consume too much memory in python", "\n", "", "span_text_to_candidates", "[", "span_text", "]", "[", "'candidates'", "]", "=", "torch", ".", "tensor", "(", "candidates_list", ",", "dtype", "=", "torch", ".", "int", ")", "\n", "span_text_to_candidates", "[", "span_text", "]", "[", "'scores'", "]", "=", "torch", ".", "tensor", "(", "scores_list", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n", "# print('END LOADING LINKING CANDIDATES')", "\n", "\n", "", "return", "span_text_to_candidates", "\n", "\n", "\n", "", "def", "create_dictionaries", "(", "config", ",", "training", ")", ":", "\n", "    ", "path", "=", "config", "[", "'path'", "]", "\n", "\n", "print", "(", "\"Loading dictionaries (training={})\"", ".", "format", "(", "training", ")", ")", "\n", "\n", "if", "'dictionaries'", "in", "config", ":", "\n", "        ", "dictionaries", "=", "{", "}", "\n", "for", "name", ",", "dict_config", "in", "config", "[", "'dictionaries'", "]", ".", "items", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.linker.collate_candidates_in_pytorch": [[76, 118], ["max", "max", "enumerate", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "enumerate", "len", "max", "len", "len", "len", "len", "candidates.to", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.LongTensor", "torch.LongTensor"], "function", ["None"], ["                ", "if", "\"init\"", "in", "dict_config", ":", "\n", "                    ", "dictionary", "=", "load_dictionary", "(", "dict_config", "[", "'init'", "]", ",", "path", ")", "\n", "if", "isinstance", "(", "dictionary", ",", "Dictionary", ")", ":", "\n", "                        ", "print", "(", "'init {}: size={}'", ".", "format", "(", "name", ",", "dictionary", ".", "size", ")", ")", "\n", "", "elif", "isinstance", "(", "dictionary", ",", "BertTokenizer", ")", ":", "\n", "                        ", "print", "(", "'init {}: size={}'", ".", "format", "(", "name", ",", "dictionary", ".", "vocab_size", ")", ")", "\n", "", "else", ":", "\n", "                        ", "raise", "Exception", "(", "'not recognized dictionary: '", ",", "dictionary", ")", "\n", "", "", "else", ":", "\n", "                    ", "print", "(", "\"init {} (blank)\"", ".", "format", "(", "name", ")", ")", "\n", "dictionary", "=", "Dictionary", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "dictionary", "=", "load_dictionary", "(", "dict_config", ",", "path", ")", "\n", "print", "(", "'load {}: size={}'", ".", "format", "(", "name", ",", "dictionary", ".", "size", ")", ")", "\n", "\n", "", "dictionary", ".", "prefix", "=", "dict_config", "[", "'prefix'", "]", "if", "'prefix'", "in", "dict_config", "else", "''", "\n", "\n", "if", "'rewriter'", "in", "dict_config", ":", "\n", "                ", "if", "dict_config", "[", "'rewriter'", "]", "==", "'lowercase'", ":", "\n", "                    ", "dictionary", ".", "rewriter", "=", "lambda", "t", ":", "t", ".", "lower", "(", ")", "\n", "", "elif", "dict_config", "[", "'rewriter'", "]", "==", "'none'", ":", "\n", "                    ", "print", "(", "\"rewriter: none\"", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "BaseException", "(", "\"no such rewriter\"", ",", "dict_config", "[", "'rewriter'", "]", ")", "\n", "\n", "", "", "if", "'append'", "in", "dict_config", ":", "\n", "                ", "for", "x", "in", "dict_config", "[", "'append'", "]", ":", "\n", "                    ", "idx", "=", "dictionary", ".", "add", "(", "x", ")", "\n", "print", "(", "\"   add token\"", ",", "x", ",", "\"->\"", ",", "idx", ")", "\n", "\n", "", "", "if", "'unknown'", "in", "dict_config", ":", "\n", "                ", "dictionary", ".", "set_unknown_token", "(", "dict_config", "[", "'unknown'", "]", ")", "\n", "\n", "", "if", "'debug'", "in", "dict_config", ":", "\n", "                ", "dictionary", ".", "debug", "=", "dict_config", "[", "'debug'", "]", "\n", "\n", "", "if", "'update'", "in", "dict_config", ":", "\n", "                ", "dictionary", ".", "update", "=", "dict_config", "[", "'update'", "]", "\n", "\n", "# kzaporoj 20/12/2020 - I comment this update to false, reason: let's say we want to try on a different", "\n", "# domain corpus such as AIDA Conll a particular model trained on DWIE. There will be many words non-existent", "\n", "# in DWIE, but whose embedding can give extra information if they are close enough to the embeddings of", "\n", "# words in DWIE.", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.linker.collate_candidates_doc_level": [[120, 146], ["max", "max", "enumerate", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "zip", "range", "len", "len", "len", "len", "len", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "len", "range", "range", "len", "len"], "function", ["None"], ["#     dictionary.update = False", "\n", "\n", "", "if", "isinstance", "(", "dictionary", ",", "Dictionary", ")", ":", "\n", "                ", "print", "(", "\"   update:\"", ",", "dictionary", ".", "update", ")", "\n", "print", "(", "\"   debug:\"", ",", "dictionary", ".", "debug", ")", "\n", "\n", "", "dictionaries", "[", "name", "]", "=", "dictionary", "\n", "\n", "", "return", "dictionaries", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"WARNING: using wikipedia dictionary\"", ")", "\n", "words", "=", "Dictionary", "(", ")", "\n", "entities", "=", "Dictionary", "(", ")", "\n", "\n", "words", ".", "set_unknown_token", "(", "\"UNKNOWN\"", ")", "\n", "words", ".", "load_spirit_dictionary", "(", "'data/tokens.dict'", ",", "5", ")", "\n", "entities", ".", "set_unknown_token", "(", "\"UNKNOWN\"", ")", "\n", "entities", ".", "load_spirit_dictionary", "(", "'data/entities.dict'", ",", "5", ")", "\n", "return", "{", "\n", "'words'", ":", "words", ",", "\n", "'entities'", ":", "entities", "\n", "}", "\n", "\n", "\n", "", "", "def", "create_model", "(", "config", ",", "dictionaries", ")", ":", "\n", "# model_name = config['model']['name']", "\n", "# if model_name == \"model3\":", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.linker.collate_targets": [[148, 157], ["max", "torch.zeros", "torch.zeros", "enumerate", "len", "enumerate", "len"], "function", ["None"], ["# elif model_name == \"model4\":", "\n", "#     model = MyModel4(dictionaries, config['model'])", "\n", "#     # model.load_tensorflow_model()", "\n", "# elif model_name == \"model5\":", "\n", "#     model = MyModel5(dictionaries, config['model'])", "\n", "# elif model_name == \"entbydecr1\":", "\n", "#     model = entybydesc.MyModel1(dictionaries, config['model'])", "\n", "# elif model_name == \"model6\":", "\n", "#     model = MyModel6(dictionaries, config['model'])", "\n", "# elif model_name == \"lm_1\":", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.linker.collate_tot_cand_lengths": [[159, 173], ["max", "torch.zeros", "torch.zeros", "enumerate", "len", "x.size", "instance.size"], "function", ["None"], ["# elif model_name == \"lm_2\":", "\n", "#     model = LM2(dictionaries, config['model'])", "\n", "# elif model_name == \"ner_1\":", "\n", "#     model = Ner1(dictionaries, config['model'])", "\n", "# elif model_name == \"ner_2\":", "\n", "#     model = Ner2(dictionaries, config['model'])", "\n", "# elif model_name == \"linker_1\":", "\n", "#     model = Linker1(dictionaries, config['model'])", "\n", "# elif model_name == \"nerlink_1\":", "\n", "#     model = NerLink1(dictionaries, config['model'])", "\n", "# elif model_name == \"nerlink_2\":", "\n", "#     model = NerLink2(dictionaries, config['model'])", "\n", "# elif model_name == \"linker_adv_1\":", "\n", "#     model = LinkerAdv1(dictionaries, config['model'])", "\n", "# else:", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.linker.predict_links": [[209, 224], ["predictions.cpu.cpu", "torch.nonzero().tolist", "torch.nonzero().tolist", "list", "linker_candidates[].item", "output[].append", "range", "torch.nonzero", "torch.nonzero", "predictions.cpu.size", "predictions[].item"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist"], ["torch", ".", "nn", ".", "init", ".", "orthogonal_", "(", "param", ".", "data", ")", "\n", "", "elif", "initializer", "==", "'rnn-orthogonal'", ":", "\n", "                ", "print", "(", "\"before:\"", ",", "param", ".", "data", ".", "size", "(", ")", ",", "param", ".", "data", ".", "sum", "(", ")", ".", "item", "(", ")", ")", "\n", "for", "tmp", "in", "torch", ".", "split", "(", "param", ".", "data", ",", "param", ".", "data", ".", "size", "(", "1", ")", ",", "dim", "=", "0", ")", ":", "\n", "                    ", "torch", ".", "nn", ".", "init", ".", "orthogonal_", "(", "tmp", ")", "\n", "print", "(", "\"RNN-ORTHOGONAL\"", ",", "key", ",", "tmp", ".", "size", "(", ")", ",", "param", ".", "data", ".", "sum", "(", ")", ".", "item", "(", ")", ")", "\n", "", "print", "(", "\"after:\"", ",", "param", ".", "data", ".", "size", "(", ")", ",", "param", ".", "data", ".", "sum", "(", ")", ".", "item", "(", ")", ")", "\n", "", "elif", "initializer", "==", "'xavier_normal'", ":", "\n", "                ", "before", "=", "param", ".", "data", ".", "norm", "(", ")", ".", "item", "(", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "param", ".", "data", ")", "\n", "after", "=", "param", ".", "data", ".", "norm", "(", ")", ".", "item", "(", ")", "\n", "print", "(", "\"XAVIER_NORMAL\"", ",", "key", ",", "param", ".", "data", ".", "size", "(", ")", ",", "before", ",", "\"->\"", ",", "after", ")", "\n", "", "break", "\n", "", "", "print", "(", ")", "\n", "\n", "return", "model", ",", "parameters", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.linker.predict_links_e2e": [[226, 263], ["predictions.cpu.cpu", "torch.nonzero().tolist", "torch.nonzero().tolist", "list", "list", "linker_candidates[].item", "range", "range", "torch.nonzero", "torch.nonzero", "set", "output[].append", "candidate_lengths[].item", "scores[].tolist", "output_scores[].append", "predictions.cpu.size", "predictions.cpu.size", "linker_candidates[].tolist", "predictions[].item"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.CorefLinkerLossDisabled.__init__": [[460, 463], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CorefLinkerLossDisabled", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "enabled", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.CorefLinkerLossDisabled.forward": [[464, 487], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "scores", ",", "gold_m2i", ",", "filtered_spans", ",", "gold_spans", ",", "linker", ",", "\n", "predict", "=", "False", ",", "pruner_spans", "=", "None", ",", "ner_spans", "=", "None", ",", "api_call", "=", "False", ",", "only_loss", "=", "False", ")", ":", "\n", "        ", "output", "=", "{", "}", "\n", "output_coref", "=", "{", "}", "\n", "output_linking", "=", "{", "}", "\n", "\n", "output", "[", "'loss'", "]", "=", "0.0", "\n", "output_coref", "[", "'loss'", "]", "=", "0.0", "\n", "# if gold_spans is None:", "\n", "#     gold_spans = []", "\n", "output_coref", "[", "'pred'", "]", "=", "[", "[", "]", "for", "x", "in", "gold_spans", "]", "\n", "output_coref", "[", "'pred_pointers'", "]", "=", "[", "[", "]", "for", "x", "in", "gold_spans", "]", "\n", "output_coref", "[", "'gold'", "]", "=", "[", "[", "]", "for", "x", "in", "gold_spans", "]", "\n", "output_coref", "[", "'scores'", "]", "=", "[", "[", "]", "for", "x", "in", "gold_spans", "]", "\n", "\n", "# TODO: see well what have to add here for pred_linking and gold_linking", "\n", "output_linking", "[", "'pred'", "]", "=", "[", "[", "]", "for", "x", "in", "gold_spans", "]", "\n", "output_linking", "[", "'gold'", "]", "=", "[", "[", "]", "for", "x", "in", "gold_spans", "]", "\n", "output_linking", "[", "'loss'", "]", "=", "0.0", "\n", "output_linking", "[", "'scores'", "]", "=", "[", "[", "]", "for", "x", "in", "gold_spans", "]", "\n", "\n", "# kzaporoj - None for the link part , not yet", "\n", "return", "output", "[", "'loss'", "]", ",", "output_linking", ",", "output_coref", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.CorefLinkerLossDisabled.create_metrics": [[488, 490], ["None"], "methods", ["None"], ["", "def", "create_metrics", "(", "self", ")", ":", "\n", "        ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.CorefLinkerLossDisabled.log_stats": [[491, 493], ["None"], "methods", ["None"], ["", "def", "log_stats", "(", "self", ",", "dataset_name", ",", "predict", ",", "tb_logger", ",", "step_nr", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.CorefLinkerLoss.__init__": [[497, 520], ["torch.Module.__init__", "config.get", "coreflinker.CorefLinkerLoss.entity_dictionary.tolist", "entity_dictionary.lookup"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup"], ["    ", "def", "__init__", "(", "self", ",", "link_task", ",", "coref_task", ",", "entity_dictionary", ",", "config", ",", "end_to_end", ")", ":", "\n", "        ", "super", "(", "CorefLinkerLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# self.entity_embedder = TextFieldEmbedderTokens(dictionaries, config['entity_embedder']) # here is entity embedder 1", "\n", "\n", "self", ".", "enabled", "=", "config", "[", "'enabled'", "]", "\n", "\n", "self", ".", "entity_dictionary", "=", "entity_dictionary", "\n", "if", "self", ".", "enabled", ":", "\n", "            ", "self", ".", "labels", "=", "self", ".", "entity_dictionary", ".", "tolist", "(", ")", "\n", "self", ".", "unknown_dict", "=", "entity_dictionary", ".", "lookup", "(", "'###UNKNOWN###'", ")", "\n", "\n", "", "self", ".", "link_task", "=", "link_task", "\n", "self", ".", "coref_task", "=", "coref_task", "\n", "self", ".", "weight", "=", "config", ".", "get", "(", "'weight'", ",", "1.0", ")", "\n", "self", ".", "filter_singletons_with_pruner", "=", "config", "[", "'filter_singletons_with_pruner'", "]", "\n", "self", ".", "filter_singletons_with_matrix", "=", "config", "[", "'filter_singletons_with_matrix'", "]", "\n", "self", ".", "ignore_no_mention_chains", "=", "config", "[", "'ignore_no_mention_chains'", "]", "\n", "self", ".", "filter_singletons_with_ner", "=", "config", "[", "'filter_singletons_with_ner'", "]", "\n", "self", ".", "no_nil_in_targets", "=", "config", "[", "'no_nil_in_targets'", "]", "\n", "self", ".", "doc_level_candidates", "=", "config", "[", "'doc_level_candidates'", "]", "\n", "self", ".", "singletons", "=", "self", ".", "filter_singletons_with_pruner", "or", "self", ".", "filter_singletons_with_ner", "# write out singletons to json", "\n", "self", ".", "end_to_end", "=", "end_to_end", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.CorefLinkerLoss.forward": [[521, 750], ["linker.get", "modules.misc.misc.batched_index_select", "modules.misc.misc.batched_index_select().squeeze", "modules.misc.misc.batched_index_select.to", "coreflinker.CorefLinkerLoss.entity_dictionary.lookup", "create_candidate_mask().float().to", "linker.get", "modules.misc.misc.batched_index_select", "coreflinker.create_coreflinker_target_forward", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().repeat().to", "torch.LongTensor().repeat().to", "torch.LongTensor().repeat().to", "torch.LongTensor().repeat().to", "torch.ones().tril().unsqueeze", "torch.ones().tril().unsqueeze", "torch.ones().tril().unsqueeze", "torch.ones().tril().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "util.sequence.get_mask_from_sequence_lengths().float", "enumerate", "list", "enumerate", "list", "enumerate", "coreflinker.decode_m2i_coreflinker", "range", "modules.misc.misc.batched_index_select.size", "modules.utils.misc.predict_scores", "coreflinker.predict_scores_coref", "modules.misc.misc.batched_index_select", "create_candidate_mask().float", "modules.misc.misc.batched_index_select().squeeze", "torch.ones().unsqueeze", "torch.ones().unsqueeze", "torch.ones().unsqueeze", "torch.ones().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "scores.max().item", "util.math.logsumexp", "BaseException", "candidates[].unique", "candidate_ids.append", "list.append", "enumerate", "list.append", "len", "enumerate", "coreflinker.remove_disabled_spans", "coreflinker.remove_disabled_spans_linking", "coreflinker.remove_disabled_scores_coref", "coreflinker.remove_disabled_scores_linking", "coreflinker.remove_disabled_spans_linking", "coreflinker.remove_disabled_scores_coref", "coreflinker.remove_disabled_scores_linking", "coreflinker.remove_disabled_spans", "coreflinker.remove_disabled_spans_linking", "modules.misc.misc.batched_index_select().squeeze.unsqueeze", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor().repeat", "torch.LongTensor().repeat", "torch.LongTensor().repeat", "torch.LongTensor().repeat", "torch.ones().tril", "torch.ones().tril", "torch.ones().tril", "torch.ones().tril", "additive_mask.to", "util.sequence.get_mask_from_sequence_lengths", "dict", "coreflinker.convert_coref", "coreflinker.create_candidate_mask", "modules.misc.misc.batched_index_select", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "scores.max", "torch.LongTensor().to.max().item", "torch.LongTensor().to.max().item", "coreflinker.m2i_to_clusters_linkercoref", "zip", "coreflinker.convert_coref", "zip", "modules.misc.misc.batched_index_select.to.size", "modules.misc.misc.batched_index_select().squeeze.unsqueeze", "len", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "link_dict_id.item", "link_id_to_coref_col_batch.items", "candidate_ids_b.size", "candidate_ids_b.size", "coreflinker.m2i_to_clusters_linkercoref", "create_candidate_mask().float().to.size", "torch.LongTensor().to.max", "torch.LongTensor().to.max", "curr_predicted_links.append", "x.tolist", "create_candidate_mask().float().to.size", "create_candidate_mask().float().to.size"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.batched_index_select", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.batched_index_select", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.create_coreflinker_target_forward", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.decode_m2i_coreflinker", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.misc.predict_scores", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.predict_scores_coref", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.batched_index_select", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.math.logsumexp", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coref.remove_disabled_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.remove_disabled_spans_linking", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.remove_disabled_scores_coref", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.remove_disabled_scores_linking", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.remove_disabled_spans_linking", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.remove_disabled_scores_coref", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.remove_disabled_scores_linking", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coref.remove_disabled_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.remove_disabled_spans_linking", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.sequence.get_mask_from_sequence_lengths", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.convert_coref", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.create_candidate_mask", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.batched_index_select", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.m2i_to_clusters_linkercoref", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.convert_coref", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.m2i_to_clusters_linkercoref", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist"], ["", "def", "forward", "(", "self", ",", "scores", ",", "gold_m2i", ",", "filtered_spans", ",", "gold_spans", ",", "linker", ",", "\n", "predict", "=", "False", ",", "pruner_spans", "=", "None", ",", "ner_spans", "=", "None", ",", "api_call", "=", "False", ")", ":", "\n", "        ", "output", "=", "{", "}", "\n", "output_coref", "=", "{", "}", "\n", "output_linking", "=", "{", "}", "\n", "\n", "if", "self", ".", "enabled", "and", "scores", "is", "not", "None", ":", "\n", "            ", "pred_spans", "=", "filtered_spans", "[", "'spans'", "]", "\n", "# pred_spans = filtered_spans['pruned_spans']", "\n", "\n", "linker_candidates", "=", "linker", "[", "'candidates'", "]", "\n", "candidate_lengths", "=", "linker", "[", "'candidate_lengths'", "]", "\n", "targets", "=", "linker", ".", "get", "(", "'targets'", ")", "\n", "\n", "if", "self", ".", "end_to_end", ":", "\n", "# if it is end-to-end, we only select the candidates pruned by pruner in order to avoid", "\n", "#   using too much memory", "\n", "                ", "pred_spans_idx", "=", "filtered_spans", "[", "'prune_indices'", "]", "\n", "", "else", ":", "\n", "                ", "pred_spans_idx", "=", "filtered_spans", "[", "'reindex_wrt_gold'", "]", "\n", "\n", "", "linker_candidates", "=", "batched_index_select", "(", "linker_candidates", ",", "pred_spans_idx", ")", "\n", "candidate_lengths", "=", "batched_index_select", "(", "candidate_lengths", ".", "unsqueeze", "(", "-", "1", ")", ",", "pred_spans_idx", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "candidates", "=", "linker_candidates", ".", "to", "(", "scores", ".", "device", ")", "# torch.Size([1, 9, 17])", "\n", "\n", "nill_id", "=", "self", ".", "entity_dictionary", ".", "lookup", "(", "'NILL'", ")", "\n", "# none_id = self.entity_dictionary.lookup('NONE')", "\n", "\n", "linker_mask", "=", "create_candidate_mask", "(", "candidates", ".", "size", "(", "-", "1", ")", ",", "candidate_lengths", ")", ".", "float", "(", ")", ".", "to", "(", "scores", ".", "device", ")", "\n", "\n", "targets_matrix", "=", "None", "\n", "tot_cand_lengths_in_gold_mentions", "=", "None", "\n", "if", "not", "api_call", ":", "\n", "                ", "tot_cand_lengths_in_gold_mentions", "=", "linker", ".", "get", "(", "'total_cand_lengths_in_gold_mentions'", ",", "None", ")", "\n", "if", "tot_cand_lengths_in_gold_mentions", "is", "not", "None", ":", "\n", "                    ", "tot_cand_lengths_in_gold_mentions", "=", "batched_index_select", "(", "tot_cand_lengths_in_gold_mentions", ".", "unsqueeze", "(", "-", "1", ")", ",", "\n", "pred_spans_idx", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "", "targets", "=", "batched_index_select", "(", "targets", ",", "pred_spans_idx", ")", "\n", "linker_target", "=", "targets", "*", "linker_mask", "\n", "\n", "targets_matrix", "=", "create_coreflinker_target_forward", "(", "pred_spans", ",", "gold_spans", ",", "gold_m2i", ",", "linker_target", ",", "\n", "self", ".", "filter_singletons_with_matrix", ")", "\n", "\n", "", "if", "scores", "is", "not", "None", ":", "\n", "                ", "lengths_coref", "=", "torch", ".", "LongTensor", "(", "[", "len", "(", "x", ")", "for", "x", "in", "pred_spans", "]", ")", ".", "to", "(", "settings", ".", "device", ")", "\n", "\n", "# TODO: 'lengths_coref' is used with coreference ; 'lengths_linker' takes also into account the length", "\n", "#  of candidate entities of linker (which can be different between different training instances in each batch)", "\n", "#  I guess???? or should it be always the same for all batch, and use the padding of NILL to the rest???", "\n", "# lengths_linker = linker_mask.sum(-1).max(-1)[", "\n", "#     0].long()  # this will assign different length for each batch", "\n", "\n", "# TODO: this may be cheaper than the previous line, but may not work for batches > 1, experiment this!!", "\n", "lengths_linker", "=", "torch", ".", "LongTensor", "(", "[", "linker_mask", ".", "shape", "[", "-", "1", "]", "]", ")", ".", "repeat", "(", "linker_mask", ".", "shape", "[", "0", "]", ")", ".", "to", "(", "\n", "settings", ".", "device", ")", "\n", "# lengths_coref_linker = lengths_linker + lengths_coref", "\n", "\n", "triangular_mask", "=", "torch", ".", "ones", "(", "linker_mask", ".", "size", "(", ")", "[", "-", "2", "]", ",", "linker_mask", ".", "size", "(", ")", "[", "-", "2", "]", ",", "device", "=", "settings", ".", "device", "\n", ")", ".", "tril", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "triangular_mask", "=", "torch", ".", "cat", "(", "linker_mask", ".", "shape", "[", "0", "]", "*", "[", "triangular_mask", "]", ")", "\n", "\n", "# concatenate entity mask to the span-span coreference mask", "\n", "triangular_mask", "=", "torch", ".", "cat", "(", "[", "linker_mask", ",", "triangular_mask", "]", ",", "dim", "=", "-", "1", ")", "\n", "if", "self", ".", "filter_singletons_with_matrix", ":", "\n", "                    ", "no_mentions_mask", "=", "torch", ".", "ones", "(", "linker_mask", ".", "size", "(", ")", "[", "-", "2", "]", ",", "1", ",", "device", "=", "settings", ".", "device", ")", ".", "unsqueeze", "(", "0", ")", "\n", "triangular_mask", "=", "torch", ".", "cat", "(", "[", "no_mentions_mask", ",", "triangular_mask", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "constant", "=", "scores", ".", "max", "(", ")", ".", "item", "(", ")", "+", "100000", "\n", "additive_mask", "=", "(", "1", "-", "triangular_mask", ")", "*", "-", "constant", "\n", "logits", "=", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "scores", "+", "additive_mask", ".", "to", "(", "scores", ".", "device", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "if", "scores", "is", "not", "None", "and", "targets_matrix", "is", "not", "None", ":", "\n", "                ", "loss", "=", "-", "logsumexp", "(", "logits", "+", "(", "1", "-", "targets_matrix", ")", "*", "-", "100000", ")", "\n", "mask", "=", "get_mask_from_sequence_lengths", "(", "lengths_coref", ",", "lengths_coref", ".", "max", "(", ")", ".", "item", "(", ")", ")", ".", "float", "(", ")", "\n", "output", "[", "'loss'", "]", "=", "self", ".", "weight", "*", "(", "mask", "*", "loss", ")", ".", "sum", "(", ")", "\n", "", "elif", "not", "api_call", ":", "# when api call is performed (e.g. with only text), we do not get the gold annotation", "\n", "                ", "raise", "BaseException", "(", "\"HUH\"", ")", "\n", "", "else", ":", "\n", "                ", "output", "[", "'loss'", "]", "=", "0.0", "\n", "\n", "", "output_coref", "[", "'loss'", "]", "=", "output", "[", "'loss'", "]", "\n", "output_linking", "[", "'loss'", "]", "=", "output", "[", "'loss'", "]", "\n", "\n", "if", "predict", ":", "\n", "                ", "candidate_ids", "=", "[", "]", "\n", "for", "curr_cand_batch", ",", "_", "in", "enumerate", "(", "candidates", ")", ":", "\n", "                    ", "unique_curr_batch", "=", "candidates", "[", "curr_cand_batch", "]", ".", "unique", "(", "sorted", "=", "True", ")", "\n", "if", "self", ".", "no_nil_in_targets", ":", "\n", "                        ", "unique_curr_batch", "=", "unique_curr_batch", "[", "unique_curr_batch", "!=", "nill_id", "]", "\n", "# (16/10/2020) - 0 is used for padding, so remove it", "\n", "", "unique_curr_batch", "=", "unique_curr_batch", "[", "unique_curr_batch", "!=", "self", ".", "unknown_dict", "]", "\n", "\n", "candidate_ids", ".", "append", "(", "unique_curr_batch", ")", "\n", "# link_id_to_coref_col = dict()", "\n", "", "link_id_to_coref_col", "=", "list", "(", ")", "\n", "# for matrix_idx_link, link_dict_id in enumerate(candidate_ids):", "\n", "for", "batch_id", ",", "candidate_ids_batch", "in", "enumerate", "(", "candidate_ids", ")", ":", "\n", "                    ", "link_id_to_coref_col", ".", "append", "(", "dict", "(", ")", ")", "\n", "for", "matrix_idx_link", ",", "link_dict_id", "in", "enumerate", "(", "candidate_ids_batch", ")", ":", "\n", "                        ", "link_id_to_coref_col", "[", "batch_id", "]", "[", "link_dict_id", ".", "item", "(", ")", "]", "=", "matrix_idx_link", "\n", "\n", "", "", "coref_col_to_link_id", "=", "list", "(", ")", "\n", "for", "batch_id", ",", "link_id_to_coref_col_batch", "in", "enumerate", "(", "link_id_to_coref_col", ")", ":", "\n", "                    ", "coref_col_to_link_id", ".", "append", "(", "{", "v", ":", "k", "for", "k", ",", "v", "in", "link_id_to_coref_col_batch", ".", "items", "(", ")", "}", ")", "\n", "\n", "", "decoded_m2i_coref_linker", ",", "span_to_pointer_detail_info", "=", "decode_m2i_coreflinker", "(", "logits", ",", "lengths_coref", ",", "lengths_linker", ",", "\n", "# lengths_coref_linker,", "\n", "linker_candidates", ",", "candidate_ids", ",", "\n", "link_id_to_coref_col", "=", "link_id_to_coref_col", ",", "\n", "dic", "=", "self", ".", "entity_dictionary", ",", "\n", "coref_col_to_link_id", "=", "coref_col_to_link_id", ",", "\n", "pred_spans", "=", "pred_spans", ",", "real_scores", "=", "scores", ",", "\n", "filter_singletons_with_matrix", "=", "self", ".", "filter_singletons_with_matrix", ",", "\n", "ignore_no_mention_chains", "=", "self", ".", "ignore_no_mention_chains", ")", "\n", "\n", "# decoded_m2i_coref_linker - <class 'list'>: [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 5, 55, 56, 57, 58, 59, 60, 5, 62]]", "\n", "# pred_spans - <class 'list'>: [[(3, 4), (5, 6), (5, 7), (41, 43), (45, 47), (49, 49), (49, 50), (50, 50), (50, 52), (51, 52), (51, 54), (53, 54), (57, 57), (57, 59)]]", "\n", "# here gets the coref cluster spans only", "\n", "output_pred", "=", "[", "\n", "convert_coref", "(", "m2i_to_clusters_linkercoref", "(", "x", ",", "coref_col_to_link_id_b", ",", "\n", "self", ".", "entity_dictionary", ",", "\n", "candidate_ids_b", ".", "size", "(", "-", "1", ")", ")", ",", "\n", "y", ",", "number_candidates", "=", "candidate_ids_b", ".", "size", "(", "-", "1", ")", ",", "\n", "links_dictionary", "=", "self", ".", "entity_dictionary", ",", "\n", "coref_col_to_link_id", "=", "coref_col_to_link_id_b", ")", "\n", "for", "x", ",", "y", ",", "candidate_ids_b", ",", "coref_col_to_link_id_b", "in", "\n", "zip", "(", "decoded_m2i_coref_linker", ",", "pred_spans", ",", "candidate_ids", ",", "\n", "coref_col_to_link_id", ")", "]", "if", "scores", "is", "not", "None", "else", "[", "[", "]", "for", "_", "in", "pred_spans", "]", "\n", "\n", "output_coref", "[", "'pred'", "]", "=", "[", "out", "[", "0", "]", "for", "out", "in", "output_pred", "]", "\n", "output_coref", "[", "'pred_pointers'", "]", "=", "span_to_pointer_detail_info", "\n", "output_linking", "[", "'pred'", "]", "=", "[", "out", "[", "1", "]", "for", "out", "in", "output_pred", "]", "\n", "output_linking", "[", "'spans_with_link'", "]", "=", "[", "out", "[", "2", "]", "for", "out", "in", "output_pred", "]", "\n", "# THIS ONLY WILL WORK IF NOT END-TO-END!!!", "\n", "for", "batch_id", "in", "range", "(", "len", "(", "output_linking", "[", "'pred'", "]", ")", ")", ":", "\n", "                    ", "curr_pred_spans", "=", "pred_spans", "[", "batch_id", "]", "\n", "curr_spans_with_link", "=", "output_linking", "[", "'spans_with_link'", "]", "[", "batch_id", "]", "\n", "curr_predicted_links", "=", "output_linking", "[", "'pred'", "]", "[", "batch_id", "]", "\n", "for", "idx_span", ",", "curr_span", "in", "enumerate", "(", "curr_pred_spans", ")", ":", "\n", "# (kzaporoj) 14/10/2020 - changed this if to be end-to-end compatible.", "\n", "#   TODO: check the evaluator for ignoreing 'NILL' for non-linkable entity types (ex: \"role\").", "\n", "                        ", "if", "curr_span", "not", "in", "curr_spans_with_link", ":", "\n", "                            ", "if", "self", ".", "end_to_end", ":", "\n", "# curr_predicted_links.append(curr_span + ('NILL',))", "\n", "                                ", "pass", "\n", "", "elif", "tot_cand_lengths_in_gold_mentions", "[", "batch_id", "]", "[", "idx_span", "]", ">", "0", ":", "\n", "                                ", "curr_predicted_links", ".", "append", "(", "curr_span", "+", "(", "'NILL'", ",", ")", ")", "\n", "\n", "", "", "", "", "max_nr_candidates", "=", "linker_candidates", ".", "size", "(", "-", "1", ")", "\n", "\n", "if", "self", ".", "end_to_end", ":", "\n", "                    ", "linker_spans", "=", "filtered_spans", "[", "'spans'", "]", "\n", "", "else", ":", "\n", "                    ", "linker_spans", "=", "filtered_spans", "[", "'spans'", "]", "\n", "\n", "", "cols_to_ignore", "=", "0", "\n", "if", "self", ".", "filter_singletons_with_matrix", ":", "\n", "                    ", "cols_to_ignore", "=", "1", "\n", "\n", "", "s", "=", "predict_scores", "(", "scores", "[", ":", ",", ":", ",", "cols_to_ignore", ":", "max_nr_candidates", "+", "cols_to_ignore", "]", ",", "linker_spans", ",", "\n", "linker_candidates", ",", "\n", "candidate_lengths", ",", "self", ".", "labels", ")", "\n", "\n", "output_coref", "[", "'scores'", "]", "=", "predict_scores_coref", "(", "scores", "[", ":", ",", ":", ",", "max_nr_candidates", "+", "cols_to_ignore", ":", "]", ",", "\n", "pred_spans", "=", "pred_spans", ")", "\n", "\n", "output_linking", "[", "'scores'", "]", "=", "s", "\n", "\n", "if", "not", "api_call", ":", "\n", "                    ", "output_coref", "[", "'gold'", "]", "=", "[", "convert_coref", "(", "m2i_to_clusters_linkercoref", "(", "x", ".", "tolist", "(", ")", ")", ",", "y", ",", "\n", "number_candidates", "=", "0", ",", "\n", "links_dictionary", "=", "self", ".", "entity_dictionary", ")", "[", "0", "]", "for", "x", ",", "y", "in", "\n", "zip", "(", "gold_m2i", ",", "gold_spans", ")", "]", "\n", "\n", "# TODO - number_candidates!!!", "\n", "output_linking", "[", "'gold'", "]", "=", "linker", "[", "'gold'", "]", "\n", "", "else", ":", "\n", "                    ", "output_coref", "[", "'gold'", "]", "=", "[", "None", "for", "_", "in", "gold_spans", "]", "\n", "output_linking", "[", "'gold'", "]", "=", "[", "None", "for", "_", "in", "gold_spans", "]", "\n", "\n", "# for loss just copies the loss from output for both linker and coref ; this 'loss' is needed when", "\n", "# later evaluating in metrics.misc.MetricObjective#update2 for example (see below when adding metrics", "\n", "# in create_metrics(self) method)", "\n", "\n", "", "if", "self", ".", "filter_singletons_with_pruner", ":", "\n", "# this assumes that pruner is able to predict spans", "\n", "                    ", "output_coref", "[", "'pred'", "]", "=", "remove_disabled_spans", "(", "output_coref", "[", "'pred'", "]", ",", "pruner_spans", ")", "\n", "coref_flat", "=", "[", "{", "item", "for", "sublist", "in", "batch", "for", "item", "in", "sublist", "}", "for", "batch", "in", "output_coref", "[", "'pred'", "]", "]", "\n", "output_linking", "[", "'pred'", "]", "=", "remove_disabled_spans_linking", "(", "output_linking", "[", "'pred'", "]", ",", "coref_flat", ")", "\n", "output_coref", "[", "'scores'", "]", "=", "remove_disabled_scores_coref", "(", "output_coref", "[", "'scores'", "]", ",", "coref_flat", ")", "\n", "output_linking", "[", "'scores'", "]", "=", "remove_disabled_scores_linking", "(", "output_linking", "[", "'scores'", "]", ",", "coref_flat", ")", "\n", "\n", "", "if", "self", ".", "filter_singletons_with_matrix", ":", "\n", "                    ", "coref_flat", "=", "[", "{", "item", "for", "sublist", "in", "batch", "for", "item", "in", "sublist", "}", "for", "batch", "in", "output_coref", "[", "'pred'", "]", "]", "\n", "output_linking", "[", "'pred'", "]", "=", "remove_disabled_spans_linking", "(", "output_linking", "[", "'pred'", "]", ",", "coref_flat", ")", "\n", "output_coref", "[", "'scores'", "]", "=", "remove_disabled_scores_coref", "(", "output_coref", "[", "'scores'", "]", ",", "coref_flat", ")", "\n", "output_linking", "[", "'scores'", "]", "=", "remove_disabled_scores_linking", "(", "output_linking", "[", "'scores'", "]", ",", "coref_flat", ")", "\n", "\n", "", "if", "self", ".", "filter_singletons_with_ner", ":", "\n", "                    ", "output_coref", "[", "'pred'", "]", "=", "remove_disabled_spans", "(", "output_coref", "[", "'pred'", "]", ",", "ner_spans", ")", "\n", "output_linking", "[", "'pred'", "]", "=", "remove_disabled_spans_linking", "(", "output_linking", "[", "'pred'", "]", ",", "ner_spans", ")", "\n", "output_coref", "[", "'scores'", "]", "=", "None", "# TODO", "\n", "output_linking", "[", "'scores'", "]", "=", "None", "# TODO", "\n", "raise", "NotImplementedError", "# TODO!! first resolve the two previous TODOs!!! ,", "\n", "#  if not the builder will just output all mentions that have associated 'scores'", "\n", "\n", "", "", "", "else", ":", "\n", "# output['loss'] = torch.tensor(0.0, device=settings.device, requires_grad=True)  # (skip minibatch)", "\n", "            ", "output", "[", "'loss'", "]", "=", "0.0", "\n", "output_coref", "[", "'loss'", "]", "=", "0.0", "\n", "# if gold_spans is None:", "\n", "#     gold_spans = []", "\n", "output_coref", "[", "'pred'", "]", "=", "[", "None", "for", "x", "in", "gold_spans", "]", "\n", "output_coref", "[", "'pred_pointers'", "]", "=", "[", "None", "for", "x", "in", "gold_spans", "]", "\n", "output_coref", "[", "'gold'", "]", "=", "[", "None", "for", "x", "in", "gold_spans", "]", "\n", "output_coref", "[", "'scores'", "]", "=", "[", "None", "for", "x", "in", "gold_spans", "]", "\n", "\n", "# TODO: see well what have to add here for pred_linking and gold_linking", "\n", "output_linking", "[", "'pred'", "]", "=", "[", "None", "for", "x", "in", "gold_spans", "]", "\n", "output_linking", "[", "'gold'", "]", "=", "[", "None", "for", "x", "in", "gold_spans", "]", "\n", "output_linking", "[", "'loss'", "]", "=", "0.0", "\n", "output_linking", "[", "'scores'", "]", "=", "[", "None", "for", "x", "in", "gold_spans", "]", "\n", "\n", "# kzaporoj - None for the link part , not yet", "\n", "", "return", "output", "[", "'loss'", "]", ",", "output_linking", ",", "output_coref", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.CorefLinkerLoss.create_metrics": [[751, 773], ["out.extend", "out.append", "out.append", "out.append", "out.extend", "metrics.coref.MetricCoref", "metrics.coref.MetricCoref", "metrics.coref.MetricCoref", "metrics.coref.MetricCorefAverage", "metrics.misc.MetricObjective", "metrics.corefx.MetricCorefExternal", "metrics.linker.MetricLinkerImproved", "metrics.linker.MetricLinkerImproved", "metrics.linker.MetricLinkerImproved", "metrics.linker.MetricLinkAccuracy", "metrics.linker.MetricLinkAccuracyNoCandidates", "metrics.misc.MetricObjective"], "methods", ["None"], ["", "def", "create_metrics", "(", "self", ")", ":", "\n", "        ", "out", "=", "[", "]", "\n", "if", "self", ".", "enabled", ":", "\n", "            ", "metrics", "=", "[", "\n", "MetricCoref", "(", "self", ".", "coref_task", ",", "'muc'", ",", "MetricCoref", ".", "muc", ")", ",", "\n", "MetricCoref", "(", "self", ".", "coref_task", ",", "'bcubed'", ",", "MetricCoref", ".", "b_cubed", ",", "verbose", "=", "False", ")", ",", "\n", "MetricCoref", "(", "self", ".", "coref_task", ",", "'ceafe'", ",", "MetricCoref", ".", "ceafe", ",", "verbose", "=", "False", ")", ",", "\n", "]", "\n", "\n", "out", ".", "extend", "(", "metrics", ")", "\n", "out", ".", "append", "(", "MetricCorefAverage", "(", "self", ".", "coref_task", ",", "'avg'", ",", "metrics", ")", ")", "\n", "out", ".", "append", "(", "MetricObjective", "(", "self", ".", "coref_task", ")", ")", "\n", "out", ".", "append", "(", "MetricCorefExternal", "(", "self", ".", "coref_task", ")", ")", "\n", "\n", "out", ".", "extend", "(", "[", "MetricLinkerImproved", "(", "self", ".", "link_task", ")", ",", "\n", "MetricLinkerImproved", "(", "self", ".", "link_task", ",", "'links'", ")", ",", "\n", "MetricLinkerImproved", "(", "self", ".", "link_task", ",", "'nills'", ")", ",", "\n", "MetricLinkAccuracy", "(", "self", ".", "link_task", ")", ",", "\n", "MetricLinkAccuracyNoCandidates", "(", "self", ".", "link_task", ")", ",", "\n", "MetricObjective", "(", "self", ".", "link_task", ")", "]", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.TaskCorefMTT.__init__": [[806, 809], ["torch.Module.__init__", "modules.graph.create_graph"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.graph.create_graph"], ["    ", "def", "__init__", "(", "self", ",", "dim_input", ",", "config", ")", ":", "\n", "        ", "super", "(", "TaskCorefMTT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "module", "=", "create_graph", "(", "dim_input", ",", "1", ",", "config", "[", "'scorer'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.TaskCorefMTT.forward": [[810, 820], ["coreflinker.TaskCorefMTT.module().squeeze().squeeze", "create_target_matrix().to", "coreflinker.logZ", "coreflinker.logZ", "coreflinker.TaskCorefMTT.max", "coreflinker.TaskCorefMTT.module().squeeze", "coreflinker.create_target_matrix", "coreflinker.TaskCorefMTT.module"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coref.logZ", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coref.logZ", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coref.create_target_matrix"], ["", "def", "forward", "(", "self", ",", "mentions", ",", "clusters", ")", ":", "\n", "        ", "scores", "=", "self", ".", "module", "(", "mentions", ")", ".", "squeeze", "(", "-", "1", ")", ".", "squeeze", "(", "0", ")", "\n", "targets", "=", "create_target_matrix", "(", "clusters", "[", "0", "]", ")", ".", "to", "(", "scores", ".", "device", ")", "\n", "\n", "scores", "=", "scores", "-", "scores", ".", "max", "(", ")", "\n", "\n", "g", "=", "logZ", "(", "scores", "+", "(", "1", "-", "targets", ")", "*", "-", "10000", ")", "\n", "z", "=", "logZ", "(", "scores", ")", "\n", "\n", "return", "z", "-", "g", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.create_coref_target_forward": [[19, 42], ["len", "max", "torch.zeros", "torch.zeros", "enumerate", "zip", "enumerate", "enumerate", "len", "clusters[].item", "enumerate"], "function", ["None"], ["def", "create_coref_target_forward", "(", "pred_spans", ",", "gold_spans", ",", "gold_clusters", ")", ":", "\n", "    ", "num_batch", "=", "len", "(", "pred_spans", ")", "\n", "max_spans", "=", "max", "(", "[", "len", "(", "x", ")", "for", "x", "in", "pred_spans", "]", ")", "\n", "\n", "targets", "=", "torch", ".", "zeros", "(", "num_batch", ",", "max_spans", ",", "max_spans", ")", "\n", "\n", "for", "batch", ",", "(", "pred", ",", "gold", ",", "clusters", ")", "in", "enumerate", "(", "zip", "(", "pred_spans", ",", "gold_spans", ",", "gold_clusters", ")", ")", ":", "\n", "        ", "gold2cluster", "=", "{", "}", "\n", "for", "idx", ",", "span", "in", "enumerate", "(", "gold", ")", ":", "\n", "            ", "gold2cluster", "[", "span", "]", "=", "clusters", "[", "idx", "]", ".", "item", "(", ")", "\n", "\n", "", "for", "idx1", ",", "span1", "in", "enumerate", "(", "pred", ")", ":", "\n", "            ", "num_found", "=", "0", "\n", "if", "span1", "in", "gold2cluster", ":", "\n", "                ", "for", "idx2", ",", "span2", "in", "enumerate", "(", "pred", ")", ":", "\n", "                    ", "if", "idx2", "<", "idx1", "and", "span2", "in", "gold2cluster", "and", "gold2cluster", "[", "span1", "]", "==", "gold2cluster", "[", "span2", "]", ":", "\n", "                        ", "targets", "[", "batch", ",", "idx1", ",", "idx2", "]", "=", "1.0", "\n", "num_found", "+=", "1", "\n", "\n", "", "", "", "if", "num_found", "==", "0", ":", "\n", "                ", "targets", "[", "batch", ",", "idx1", ",", "idx1", "]", "=", "1.0", "\n", "\n", "", "", "", "return", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.create_coreflinker_target_forward": [[45, 98], ["len", "max", "torch.zeros", "torch.zeros", "linker_targets.sum", "enumerate", "torch.zeros", "torch.zeros", "zip", "enumerate", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "clusters[].item", "nr_candidate_links_per_mention[].item", "enumerate"], "function", ["None"], ["", "def", "create_coreflinker_target_forward", "(", "pred_spans", ",", "gold_spans", ",", "gold_clusters", ",", "linker_targets", ",", "\n", "filter_singletons_with_matrix", ")", ":", "\n", "    ", "num_batch", "=", "len", "(", "pred_spans", ")", "# 1", "\n", "max_spans", "=", "max", "(", "[", "len", "(", "x", ")", "for", "x", "in", "pred_spans", "]", ")", "# 9", "\n", "\n", "coref_targets", "=", "torch", ".", "zeros", "(", "num_batch", ",", "max_spans", ",", "max_spans", ",", "device", "=", "settings", ".", "device", ")", "# torch.Size([1, 9, 9])", "\n", "if", "filter_singletons_with_matrix", ":", "\n", "        ", "no_mention_targets", "=", "torch", ".", "zeros", "(", "num_batch", ",", "max_spans", ",", "1", ",", "device", "=", "settings", ".", "device", ")", "\n", "", "else", ":", "\n", "        ", "no_mention_targets", "=", "None", "\n", "\n", "# obj = self.loss(scores, targets)  # torch.Size([1, 9, 17]) -> targets shape", "\n", "# obj = (scores_mask * obj).sum() * self.weight", "\n", "\n", "# nr_candidate_links_per_mention = (linker_targets.int() & linker_mask.int()).sum(-1)", "\n", "", "nr_candidate_links_per_mention", "=", "linker_targets", ".", "sum", "(", "-", "1", ")", "\n", "# targets for span-span coref # TODO!! - also check that linker_targets come as batch!!!", "\n", "for", "batch", ",", "(", "pred", ",", "gold", ",", "clusters", ")", "in", "enumerate", "(", "zip", "(", "pred_spans", ",", "gold_spans", ",", "gold_clusters", ")", ")", ":", "\n", "        ", "gold2cluster", "=", "{", "}", "\n", "for", "idx", ",", "span", "in", "enumerate", "(", "gold", ")", ":", "\n", "            ", "gold2cluster", "[", "span", "]", "=", "clusters", "[", "idx", "]", ".", "item", "(", ")", "\n", "\n", "", "for", "idx1", ",", "span1", "in", "enumerate", "(", "pred", ")", ":", "\n", "            ", "num_found", "=", "0", "\n", "if", "span1", "in", "gold2cluster", ":", "\n", "                ", "for", "idx2", ",", "span2", "in", "enumerate", "(", "pred", ")", ":", "\n", "                    ", "if", "idx2", "<", "idx1", "and", "span2", "in", "gold2cluster", "and", "gold2cluster", "[", "span1", "]", "==", "gold2cluster", "[", "span2", "]", ":", "\n", "                        ", "coref_targets", "[", "batch", ",", "idx1", ",", "idx2", "]", "=", "1.0", "\n", "num_found", "+=", "1", "\n", "\n", "# (kzaporoj) - here also checks whether a particular mention has entity linking candidates, and if so,", "\n", "# also sets the num_found to num_candidates", "\n", "# print('here todo with num_found of linking candidates')", "\n", "", "", "", "num_found", "+=", "nr_candidate_links_per_mention", "[", "batch", ",", "idx1", "]", ".", "item", "(", ")", "\n", "if", "num_found", "==", "0", ":", "\n", "                ", "if", "filter_singletons_with_matrix", ":", "\n", "                    ", "if", "span1", "not", "in", "gold2cluster", ":", "\n", "# if it is not a valid mention, put into no_mention column", "\n", "                        ", "no_mention_targets", "[", "batch", ",", "idx1", ",", "0", "]", "=", "1.0", "\n", "", "else", ":", "\n", "# if it is a singleton, still main diagonal", "\n", "                        ", "coref_targets", "[", "batch", ",", "idx1", ",", "idx1", "]", "=", "1.0", "\n", "", "", "else", ":", "\n", "                    ", "coref_targets", "[", "batch", ",", "idx1", ",", "idx1", "]", "=", "1.0", "\n", "\n", "# targets for span-entity coref", "\n", "", "", "", "", "if", "filter_singletons_with_matrix", ":", "\n", "        ", "linkercoref_targets", "=", "torch", ".", "cat", "(", "[", "no_mention_targets", ",", "linker_targets", ",", "coref_targets", "]", ",", "\n", "dim", "=", "-", "1", ")", "# torch.Size([1, 9, 27])", "\n", "", "else", ":", "\n", "        ", "linkercoref_targets", "=", "torch", ".", "cat", "(", "[", "linker_targets", ",", "coref_targets", "]", ",", "dim", "=", "-", "1", ")", "# torch.Size([1, 9, 26])", "\n", "\n", "", "return", "linkercoref_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.create_coref_target_backward": [[100, 123], ["len", "max", "torch.zeros", "torch.zeros", "enumerate", "zip", "enumerate", "enumerate", "len", "clusters[].item", "enumerate"], "function", ["None"], ["", "def", "create_coref_target_backward", "(", "pred_spans", ",", "gold_spans", ",", "gold_clusters", ")", ":", "\n", "    ", "num_batch", "=", "len", "(", "pred_spans", ")", "\n", "max_spans", "=", "max", "(", "[", "len", "(", "x", ")", "for", "x", "in", "pred_spans", "]", ")", "\n", "\n", "targets", "=", "torch", ".", "zeros", "(", "num_batch", ",", "max_spans", ",", "max_spans", ")", "\n", "\n", "for", "batch", ",", "(", "pred", ",", "gold", ",", "clusters", ")", "in", "enumerate", "(", "zip", "(", "pred_spans", ",", "gold_spans", ",", "gold_clusters", ")", ")", ":", "\n", "        ", "gold2cluster", "=", "{", "}", "\n", "for", "idx", ",", "span", "in", "enumerate", "(", "gold", ")", ":", "\n", "            ", "gold2cluster", "[", "span", "]", "=", "clusters", "[", "idx", "]", ".", "item", "(", ")", "\n", "\n", "", "for", "idx1", ",", "span1", "in", "enumerate", "(", "pred", ")", ":", "\n", "            ", "num_found", "=", "0", "\n", "if", "span1", "in", "gold2cluster", ":", "\n", "                ", "for", "idx2", ",", "span2", "in", "enumerate", "(", "pred", ")", ":", "\n", "                    ", "if", "idx2", ">", "idx1", "and", "span2", "in", "gold2cluster", "and", "gold2cluster", "[", "span1", "]", "==", "gold2cluster", "[", "span2", "]", ":", "\n", "                        ", "targets", "[", "batch", ",", "idx1", ",", "idx2", "]", "=", "1.0", "\n", "num_found", "+=", "1", "\n", "\n", "", "", "", "if", "num_found", "==", "0", ":", "\n", "                ", "targets", "[", "batch", ",", "idx1", ",", "idx1", "]", "=", "1.0", "\n", "\n", "", "", "", "return", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.create_candidate_mask": [[126, 136], ["torch.arange", "torch.arange", "tmp.unsqueeze().unsqueeze.unsqueeze().unsqueeze", "candidate_lengths.unsqueeze.unsqueeze", "tmp.unsqueeze().unsqueeze.unsqueeze"], "function", ["None"], ["", "def", "create_candidate_mask", "(", "max_cand_length", ",", "candidate_lengths", ")", ":", "\n", "# print('inside create_candidate_mask, candidate_lengths device: ', candidate_lengths.device)", "\n", "    ", "tmp", "=", "torch", ".", "arange", "(", "max_cand_length", ",", "device", "=", "settings", ".", "device", ")", "\n", "tmp", "=", "tmp", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "candidate_lengths", "=", "candidate_lengths", ".", "unsqueeze", "(", "-", "1", ")", "\n", "# print('inside create_candidate_mask, tmp device: ', tmp.device)", "\n", "mask", "=", "tmp", "<", "candidate_lengths", "\n", "# if mask_nil: # (kzaporoj) - in theory this mask_nil is no longer needed , this is why commented.", "\n", "#     mask[candidates == nil_id] = 0", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.convert_coref": [[138, 176], ["dict", "range", "set", "dict.items", "len", "out_mention_to_link_id[].append", "print", "links_dictionary.get"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get"], ["", "def", "convert_coref", "(", "clusters", ",", "spans", ",", "number_candidates", "=", "None", ",", "links_dictionary", ":", "Dictionary", "=", "None", ",", "\n", "coref_col_to_link_id", ":", "dict", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n\n    :param clusters: it is a tuple, see below for components (clusters and m2c)\n    :param spans: <class 'list'>: [(3, 4), (5, 7), (41, 43), (45, 47), (49, 49), (50, 50), (51, 52), (53, 54), (57, 57)]\n    :return:\n    \"\"\"", "\n", "(", "clusters", ",", "m2c", ")", "=", "clusters", "\n", "\n", "out_coref_clusters", "=", "[", "[", "spans", "[", "m", "-", "number_candidates", "]", "for", "m", "in", "cluster", "if", "m", ">=", "number_candidates", "]", "\n", "for", "cluster", "in", "clusters", "]", "# IndexError: list index out of range", "\n", "out_coref_clusters", "=", "[", "span_cluster", "for", "span_cluster", "in", "out_coref_clusters", "if", "len", "(", "span_cluster", ")", ">", "0", "]", "\n", "\n", "out_mention_to_link_id", "=", "dict", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "number_candidates", ")", ":", "\n", "        ", "span_ids", "=", "[", "span_id", "for", "span_id", "in", "m2c", "[", "i", "]", "if", "span_id", ">=", "number_candidates", "]", "\n", "for", "curr_span_id", "in", "span_ids", ":", "\n", "            ", "if", "curr_span_id", "not", "in", "out_mention_to_link_id", ":", "\n", "                ", "out_mention_to_link_id", "[", "curr_span_id", "]", "=", "[", "i", "]", "\n", "", "else", ":", "\n", "                ", "out_mention_to_link_id", "[", "curr_span_id", "]", ".", "append", "(", "i", ")", "\n", "print", "(", "'WARNING ON CANDIDATE LINKING!!: '", ",", "curr_span_id", ",", "' has been resolved to multiple '", "\n", "'candidates: '", ",", "\n", "out_mention_to_link_id", "[", "curr_span_id", "]", ")", "\n", "\n", "# to start with, leaves only the first one (first predicted candidate link)", "\n", "# TODO: here make that if two or more links resolved for a particular entity mention, leave the one with the", "\n", "#  highest prior, right??", "\n", "#  actually I think that this case never happens while training (more than one entity candidate chosen by the", "\n", "#  model)", "\n", "", "", "", "out_mention_to_link_id", "=", "[", "(", "spans", "[", "k", "-", "number_candidates", "]", "+", "(", "links_dictionary", ".", "get", "(", "coref_col_to_link_id", "[", "v", "[", "0", "]", "]", ")", ",", ")", ")", "\n", "for", "k", ",", "v", "in", "out_mention_to_link_id", ".", "items", "(", ")", "]", "\n", "\n", "spans_with_link", "=", "set", "(", "[", "(", "span_start", ",", "span_end", ")", "for", "span_start", ",", "span_end", ",", "_", "in", "out_mention_to_link_id", "]", ")", "\n", "\n", "return", "out_coref_clusters", ",", "out_mention_to_link_id", ",", "spans_with_link", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.remove_disabled_spans": [[179, 185], ["zip", "set", "out.append", "len"], "function", ["None"], ["", "def", "remove_disabled_spans", "(", "clusters", ",", "enabled_spans", ")", ":", "\n", "    ", "out", "=", "[", "]", "\n", "for", "cs", ",", "spans", "in", "zip", "(", "clusters", ",", "enabled_spans", ")", ":", "\n", "        ", "enabled", "=", "set", "(", "spans", ")", "\n", "out", ".", "append", "(", "[", "cluster", "for", "cluster", "in", "cs", "if", "len", "(", "cluster", ")", ">", "1", "or", "cluster", "[", "0", "]", "in", "enabled", "]", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.remove_singletons_without_link": [[187, 197], ["zip", "dict", "set", "out.append", "len"], "function", ["None"], ["", "def", "remove_singletons_without_link", "(", "clusters", ",", "pred_links", ",", "enabled_spans", ")", ":", "\n", "    ", "out", "=", "[", "]", "\n", "for", "cs", ",", "curr_pred_links", ",", "spans", "in", "zip", "(", "clusters", ",", "pred_links", ",", "enabled_spans", ")", ":", "\n", "        ", "span_to_link", "=", "dict", "(", ")", "\n", "for", "curr_link_pred", "in", "curr_pred_links", ":", "\n", "            ", "span_to_link", "[", "(", "curr_link_pred", "[", "0", "]", ",", "curr_link_pred", "[", "1", "]", ")", "]", "=", "curr_link_pred", "[", "2", "]", "\n", "", "enabled", "=", "set", "(", "spans", ")", "\n", "out", ".", "append", "(", "[", "cluster", "for", "cluster", "in", "cs", "if", "len", "(", "cluster", ")", ">", "1", "or", "cluster", "[", "0", "]", "in", "enabled", "\n", "or", "cluster", "[", "0", "]", "in", "span_to_link", "]", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.remove_disabled_spans_linking": [[199, 212], ["zip", "set", "out.append"], "function", ["None"], ["", "def", "remove_disabled_spans_linking", "(", "mentions_to_links", ",", "enabled_spans", ")", ":", "\n", "    ", "\"\"\"\n\n    :param mentions_to_links: <class 'list'>: [[(66, 67, 'Haplogroup_DE'), (29, 33, 'Haplogroup_DE'),\n       (12, 12, 'Specialty_(medicine)'), ...]]\n    :param enabled_spans: <class 'list'>: [{(36, 42), (46, 49), (56, 62), (41, 46), (25, 31), (12, 12), (61, 63), ...}]\n    :return:\n    \"\"\"", "\n", "out", "=", "[", "]", "\n", "for", "cs", ",", "spans", "in", "zip", "(", "mentions_to_links", ",", "enabled_spans", ")", ":", "\n", "        ", "enabled", "=", "set", "(", "spans", ")", "\n", "out", ".", "append", "(", "[", "linked_span", "for", "linked_span", "in", "cs", "if", "(", "linked_span", "[", "0", "]", ",", "linked_span", "[", "1", "]", ")", "in", "enabled", "]", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.remove_disabled_scores_linking": [[214, 226], ["zip", "out.append"], "function", ["None"], ["", "def", "remove_disabled_scores_linking", "(", "linking_scores", ",", "enabled_spans", ")", ":", "\n", "    ", "\"\"\"\n\n    :param linking_scores: <class 'list'>: [[((0, 0), ['WorldCom_scandal', 'MCI_Inc.'], [-20.77992820739746, -23.525156021118164]),\n                ((3, 3), ['Temperate_climate', 'H\u00e5kan_Mild', 'Concussion', ...)]]\n    :param enabled_spans:\n    :return:\n    \"\"\"", "\n", "out", "=", "[", "]", "\n", "for", "cs", ",", "enabled_spans", "in", "zip", "(", "linking_scores", ",", "enabled_spans", ")", ":", "\n", "        ", "out", ".", "append", "(", "[", "linked_score", "for", "linked_score", "in", "cs", "if", "(", "linked_score", "[", "0", "]", "[", "0", "]", ",", "linked_score", "[", "0", "]", "[", "1", "]", ")", "in", "enabled_spans", "]", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.remove_disabled_scores_coref": [[228, 240], ["zip", "out.append", "cs.items"], "function", ["None"], ["", "def", "remove_disabled_scores_coref", "(", "coref_scores", ",", "enabled_spans", ")", ":", "\n", "    ", "\"\"\"\n\n    :param coref_scores: <class 'list'>: [{(0, 0): [{'span': (0, 0), 'score': -0.0}],\n        (3, 3): [{'span': (0, 0), 'score': -12.838151931762695}, {'span': (3, 3), 'score': -0.0}]...}]\n    :param enabled_spans:\n    :return:\n    \"\"\"", "\n", "out", "=", "[", "]", "\n", "for", "cs", ",", "enabled_spans", "in", "zip", "(", "coref_scores", ",", "enabled_spans", ")", ":", "\n", "        ", "out", ".", "append", "(", "{", "k", ":", "v", "for", "k", ",", "v", "in", "cs", ".", "items", "(", ")", "if", "(", "k", "[", "0", "]", ",", "k", "[", "1", "]", ")", "in", "enabled_spans", "}", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.m2i_to_clusters_linkercoref": [[242, 282], ["enumerate", "list", "links_dictionary.get", "clusters[].append", "clusters[].append", "clusters.values"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get"], ["", "def", "m2i_to_clusters_linkercoref", "(", "m2i", ",", "coref_col_to_link_id", "=", "None", ",", "\n", "links_dictionary", ":", "Dictionary", "=", "None", ",", "nr_candidates", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n\n    :param m2i: <class 'list'>: [36, 4, 36, 14, 36, 4, 4, 4, 32]\n    :return:\n    \"\"\"", "\n", "clusters", "=", "{", "}", "\n", "m2c", "=", "{", "}", "\n", "for", "m", ",", "c", "in", "enumerate", "(", "m2i", ")", ":", "\n", "        ", "if", "c", "==", "-", "1", ":", "\n", "# not a valid cluster (i.e. should happen if filter_singletons_with_matrix is in true and the span points to", "\n", "# the matrix column that indicates it is a not valid entity mention).", "\n", "            ", "continue", "\n", "\n", "", "if", "c", "not", "in", "clusters", ":", "\n", "            ", "clusters", "[", "c", "]", "=", "[", "]", "\n", "\n", "", "link_token", "=", "''", "\n", "if", "c", "<", "nr_candidates", ":", "\n", "            ", "link_id", "=", "coref_col_to_link_id", "[", "c", "]", "\n", "link_token", "=", "links_dictionary", ".", "get", "(", "link_id", ")", "\n", "\n", "# if points to 'NILL', just makes it point to itself, this is because we can not cluster entities based on 'NILL'", "\n", "# since different entities can point to 'NILL'. Same with NONE.", "\n", "", "if", "link_token", "==", "'NILL'", "or", "link_token", "==", "'NONE'", ":", "\n", "# if link_token == 'NILL':", "\n", "            ", "if", "m", "not", "in", "clusters", ":", "\n", "                ", "clusters", "[", "m", "]", "=", "[", "]", "\n", "", "clusters", "[", "m", "]", ".", "append", "(", "m", ")", "\n", "m2c", "[", "m", "]", "=", "clusters", "[", "m", "]", "\n", "", "else", ":", "\n", "            ", "clusters", "[", "c", "]", ".", "append", "(", "m", ")", "\n", "m2c", "[", "m", "]", "=", "clusters", "[", "c", "]", "\n", "\n", "# clusters: <class 'dict'>: {0: [0], 1: [1, 6, 7, 10], 2: [2], 3: [3, 11], 4: [4], 5: [5], 8: [8, 12], 9: [9], 13: [13]}", "\n", "# clusters.values(): <class 'list'>: [[0], [1, 6, 7, 10], [2], [3, 11], [4], [5], [8, 12], [9], [13]]", "\n", "# m2c: <class 'dict'>: {0: [0], 1: [1, 6, 7, 10], 2: [2], 3: [3, 11], 4: [4], 5: [5], 6: [1, 6, 7, 10],", "\n", "#   7: [1, 6, 7, 10], 8: [8, 12], 9: [9], 10: [1, 6, 7, 10], 11: [3, 11], 12: [8, 12], 13: [13]}", "\n", "", "", "return", "list", "(", "clusters", ".", "values", "(", ")", ")", ",", "m2c", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.decode_m2i_coreflinker": [[284, 427], ["enumerate", "zip", "candidate_ids[].size", "dict", "list", "list", "output.append", "span_to_pointers_detail_info.append", "lengths_coref.tolist", "lengths_linker.tolist", "range", "range", "torch.max", "torch.max", "enumerate", "indices.tolist", "print", "print", "print", "print", "print", "print", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "exit", "linker_candidates[].item", "scores.min().item", "scores.max().item", "real_scores[].item", "dic.get", "dic.get", "scores.min", "scores.max"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get"], ["", "def", "decode_m2i_coreflinker", "(", "scores", ",", "lengths_coref", ",", "lengths_linker", ",", "linker_candidates", ",", "candidate_ids", "=", "None", ",", "\n", "link_id_to_coref_col", "=", "None", ",", "dic", ":", "Dictionary", "=", "None", ",", "\n", "coref_col_to_link_id", "=", "None", ",", "pred_spans", "=", "None", ",", "real_scores", "=", "None", ",", "\n", "filter_singletons_with_matrix", "=", "False", ",", "ignore_no_mention_chains", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n\n    :param scores:\n    :param lengths:\n    :return: This function should return the \"root\" each of the mentions point to. The \"root\" can be either an \"entity\",\n    in which case this would be a link. Or can be another mention; in which case it would be a mention that can not be linked\n    or that does not have a link I guess.\n    \"\"\"", "\n", "output", "=", "[", "]", "\n", "span_to_pointers_detail_info", "=", "[", "]", "\n", "\n", "for", "b", ",", "(", "length_coref", ",", "length_linker", ")", "in", "enumerate", "(", "zip", "(", "lengths_coref", ".", "tolist", "(", ")", ",", "lengths_linker", ".", "tolist", "(", ")", ")", ")", ":", "\n", "        ", "sparse_link_matrix_length", "=", "candidate_ids", "[", "b", "]", ".", "size", "(", "-", "1", ")", "\n", "# sparse_link_matrix_length = lengths_coref_linker - length_coref", "\n", "\n", "span_to_pointer_detail_info", "=", "dict", "(", ")", "\n", "\n", "# this is the old version of m2i_coref with only the idxs and no information on targeted entry", "\n", "m2i_coref", "=", "list", "(", "range", "(", "sparse_link_matrix_length", "+", "length_coref", ")", ")", "\n", "\n", "for", "curr_idx", "in", "list", "(", "range", "(", "sparse_link_matrix_length", "+", "length_coref", ")", ")", ":", "\n", "            ", "if", "curr_idx", ">=", "sparse_link_matrix_length", ":", "# initialization of pointer details", "\n", "                ", "span", "=", "pred_spans", "[", "b", "]", "[", "curr_idx", "-", "sparse_link_matrix_length", "]", "\n", "span_to_pointer_detail_info", "[", "span", "]", "=", "{", "'coref_connection_type'", ":", "'mention_self'", ",", "\n", "'coref_connection_pointer'", ":", "span", ",", "\n", "# TODO: uncomment this if needed to predict", "\n", "'coref_connection_score'", ":", "0.0", "\n", "}", "\n", "\n", "# len_candidates_in_dense_matrix = length_coref_linker - length_coref", "\n", "", "", "len_candidates_in_dense_matrix", "=", "length_linker", "\n", "len_ignore", "=", "0", "\n", "if", "filter_singletons_with_matrix", ":", "\n", "            ", "len_ignore", "=", "1", "# ignores mentio if points to the first column", "\n", "", "if", "length_coref", ">", "0", ":", "\n", "            ", "_", ",", "indices", "=", "torch", ".", "max", "(", "scores", "[", "b", ",", "0", ":", "length_coref", ",", ":", "]", ",", "-", "1", ")", "\n", "# index_ignore_before = scores.shape[-1] - length_coref_linker", "\n", "# the start=sparse_link_matrix_length is needed to take into account the actual length of link candidates", "\n", "# in the document", "\n", "for", "src", ",", "dst_dense", "in", "enumerate", "(", "indices", ".", "tolist", "(", ")", ",", "start", "=", "sparse_link_matrix_length", "+", "len_ignore", ")", ":", "\n", "                ", "if", "src", "<", "sparse_link_matrix_length", "+", "length_coref", "+", "len_ignore", "and", "dst_dense", "<", "length_coref", "+", "length_linker", "+", "len_ignore", ":", "\n", "\n", "                    ", "if", "dst_dense", "<", "len_candidates_in_dense_matrix", "+", "len_ignore", ":", "# points to the link (or ignore)", "\n", "                        ", "if", "dst_dense", "<", "len_ignore", ":", "\n", "# we just ignore if it points to a column in matrix that indicates that span is not a", "\n", "# mention", "\n", "                            ", "src_span", "=", "pred_spans", "[", "b", "]", "[", "src", "-", "sparse_link_matrix_length", "-", "len_ignore", "]", "\n", "span_to_pointer_detail_info", "[", "src_span", "]", "=", "{", "'coref_connection_type'", ":", "'no_mention'", ",", "\n", "'coref_connection_pointer'", ":", "src_span", "}", "\n", "m2i_coref", "[", "src", "-", "len_ignore", "]", "=", "-", "1", "\n", "continue", "\n", "\n", "# we shift back, thus only taking into account now coref and linking matrix elements", "\n", "", "dst_dense", "-=", "len_ignore", "\n", "src", "-=", "len_ignore", "\n", "\n", "link_dict_id", "=", "linker_candidates", "[", "b", ",", "src", "-", "sparse_link_matrix_length", ",", "dst_dense", "]", ".", "item", "(", ")", "\n", "# this if is needed because some point to NILL/candidates that do not exist", "\n", "if", "link_dict_id", "in", "link_id_to_coref_col", "[", "b", "]", ":", "\n", "                            ", "link_matrix_column", "=", "link_id_to_coref_col", "[", "b", "]", "[", "link_dict_id", "]", "\n", "m2i_coref", "[", "src", "]", "=", "link_matrix_column", "\n", "src_span", "=", "pred_spans", "[", "b", "]", "[", "src", "-", "sparse_link_matrix_length", "]", "\n", "span_to_pointer_detail_info", "[", "src_span", "]", "=", "{", "'coref_connection_type'", ":", "'link'", ",", "\n", "'coref_connection_pointer'", ":", "dic", ".", "get", "(", "link_dict_id", ")", "}", "\n", "", "", "else", ":", "\n", "# we shift back, thus only taking into account now coref and linking matrix elements", "\n", "                        ", "dst_dense", "-=", "len_ignore", "\n", "src", "-=", "len_ignore", "\n", "# this delta is needed to adjust to all document's candidate's length", "\n", "delta_length_all_doc_candidates", "=", "sparse_link_matrix_length", "-", "len_candidates_in_dense_matrix", "\n", "to_point_to", "=", "m2i_coref", "[", "dst_dense", "+", "delta_length_all_doc_candidates", "]", "\n", "\n", "if", "to_point_to", "==", "-", "1", ":", "\n", "# TODO: what to do here?? TODO: hyperparameter to see whether to convert in a valid cluster", "\n", "# pass", "\n", "                            ", "if", "ignore_no_mention_chains", ":", "\n", "                                ", "m2i_coref", "[", "src", "]", "=", "-", "1", "\n", "continue", "\n", "", "else", ":", "\n", "# puts both in the same valid cluster", "\n", "                                ", "to_point_to", "=", "dst_dense", "+", "delta_length_all_doc_candidates", "\n", "m2i_coref", "[", "dst_dense", "+", "delta_length_all_doc_candidates", "]", "=", "to_point_to", "\n", "# changes the coref details, maybe not, just leave it for later stats", "\n", "# pointed_span = pred_spans[b][dst_dense - len_candidates_in_dense_matrix]", "\n", "# span_to_pointer_detail_info[pointed_span] = {'coref_connection_type': 'mention_self',", "\n", "#                                              'coref_connection_pointer': pointed_span,", "\n", "#                                              'coref_connection_score':", "\n", "#                                                  real_scores[", "\n", "#                                                      b,", "\n", "#                                                      src - sparse_link_matrix_length,", "\n", "#                                                      src - sparse_link_matrix_length].item()}", "\n", "\n", "m2i_coref", "[", "src", "]", "=", "to_point_to", "\n", "\n", "", "", "coref_conn_type", "=", "'mention_self'", "if", "dst_dense", "+", "delta_length_all_doc_candidates", "==", "src", "else", "'mention_other'", "\n", "\n", "src_span", "=", "pred_spans", "[", "b", "]", "[", "src", "-", "sparse_link_matrix_length", "]", "\n", "pointed_span", "=", "pred_spans", "[", "b", "]", "[", "dst_dense", "-", "len_candidates_in_dense_matrix", "]", "\n", "\n", "span_to_pointer_detail_info", "[", "src_span", "]", "=", "{", "'coref_connection_type'", ":", "coref_conn_type", ",", "\n", "'coref_connection_pointer'", ":", "pointed_span", ",", "\n", "'coref_connection_score'", ":", "\n", "real_scores", "[", "b", ",", "\n", "src", "-", "sparse_link_matrix_length", ",", "\n", "dst_dense", "+", "len_ignore", "]", ".", "item", "(", ")", "}", "\n", "if", "to_point_to", "<", "sparse_link_matrix_length", ":", "\n", "                            ", "link_dict_id", "=", "coref_col_to_link_id", "[", "b", "]", "[", "to_point_to", "]", "\n", "link_name", "=", "dic", ".", "get", "(", "link_dict_id", ")", "\n", "if", "link_name", "==", "'NILL'", "or", "link_name", "==", "'NONE'", ":", "\n", "# we can not point to NILL since NILL is not discriminatory, so just point to the", "\n", "# mention the coreference is connecting to instead of the link pointed by that mention", "\n", "                                ", "m2i_coref", "[", "src", "]", "=", "dst_dense", "+", "delta_length_all_doc_candidates", "\n", "", "else", ":", "\n", "                                ", "m2i_coref", "[", "src", "]", "=", "to_point_to", "\n", "", "", "else", ":", "\n", "                            ", "m2i_coref", "[", "src", "]", "=", "to_point_to", "\n", "", "", "", "else", ":", "\n", "# sanity check: this should never ever happen !!!", "\n", "                    ", "print", "(", "\"ERROR: invalid index\"", ")", "\n", "print", "(", "\"length_coref:\"", ",", "length_coref", ")", "\n", "print", "(", "\"scores:\"", ",", "scores", "[", "b", ",", "0", ":", "length_coref", ",", ":", "]", ")", "\n", "print", "(", "\"scores:\"", ",", "scores", ".", "min", "(", ")", ".", "item", "(", ")", ",", "scores", ".", "max", "(", ")", ".", "item", "(", ")", ")", "\n", "print", "(", "\"indices:\"", ",", "indices", ")", "\n", "print", "(", "\"LENGTHS COREF:\"", ",", "lengths_coref", ")", "\n", "# print(\"LENGTHS COREFLINKS:\", lengths_coref_linker)", "\n", "print", "(", "\"LENGTHS LINKER:\"", ",", "lengths_linker", ")", "\n", "# torch.save(backup, 'backup.pt')", "\n", "torch", ".", "save", "(", "scores", ",", "'scores.pt'", ")", "\n", "torch", ".", "save", "(", "lengths_coref", ",", "'lengths_coref.pt'", ")", "\n", "torch", ".", "save", "(", "lengths_linker", ",", "'lengths_linker.pt'", ")", "\n", "exit", "(", "1", ")", "\n", "", "", "", "output", ".", "append", "(", "m2i_coref", ")", "\n", "span_to_pointers_detail_info", ".", "append", "(", "span_to_pointer_detail_info", ")", "\n", "\n", "", "return", "output", ",", "span_to_pointers_detail_info", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.predict_scores_coref": [[429, 457], ["enumerate", "dict", "enumerate", "to_ret_scores.append", "enumerate", "batch_decoded[].append", "scores_batch[].item"], "function", ["None"], ["", "def", "predict_scores_coref", "(", "scores", ",", "pred_spans", ")", ":", "\n", "    ", "\"\"\"\n\n    :param scores: upper triangular matrix\n    :param linker:\n    :param labels:\n    :param no_nills:\n    :return: scores for all the previous spans such as in this short example:\n            [[{(1,1):[{'span':(1,1), 'score': 1.35}],\n                (2,2):[{'span':(1,1), 'score': 1.35},\n                        {'span':(2,2), 'score': 1.32}]}]]\n    \"\"\"", "\n", "to_ret_scores", "=", "[", "]", "\n", "for", "batch_idx", ",", "scores_batch", "in", "enumerate", "(", "scores", ")", ":", "\n", "# print('batch_idx is of ', batch_idx)", "\n", "# print('scores_batch is of ', scores_batch.shape)", "\n", "        ", "batch_decoded", "=", "dict", "(", ")", "\n", "spans_batch", "=", "pred_spans", "[", "batch_idx", "]", "\n", "for", "idx_span_base", ",", "curr_span_base", "in", "enumerate", "(", "spans_batch", ")", ":", "\n", "            ", "for", "idx_span_coref", ",", "curr_span_coref", "in", "enumerate", "(", "spans_batch", ")", ":", "\n", "                ", "if", "idx_span_coref", "<=", "idx_span_base", ":", "\n", "                    ", "if", "curr_span_base", "not", "in", "batch_decoded", ":", "\n", "                        ", "batch_decoded", "[", "curr_span_base", "]", "=", "[", "]", "\n", "", "batch_decoded", "[", "curr_span_base", "]", ".", "append", "(", "{", "'span'", ":", "curr_span_coref", ",", "\n", "'score'", ":", "scores_batch", "[", "idx_span_base", ",", "idx_span_coref", "]", ".", "item", "(", ")", "}", ")", "\n", "", "", "", "to_ret_scores", ".", "append", "(", "batch_decoded", ")", "\n", "\n", "", "return", "to_ret_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.create_target_matrix": [[775, 789], ["enumerate", "torch.zeros", "torch.zeros", "cluster2mentions.items", "clusters.tolist", "cluster2mentions[].append", "clusters.size"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist"], ["", "", "def", "create_target_matrix", "(", "clusters", ")", ":", "\n", "    ", "cluster2mentions", "=", "{", "}", "\n", "for", "mention", ",", "cluster", "in", "enumerate", "(", "clusters", ".", "tolist", "(", ")", ")", ":", "\n", "        ", "if", "cluster", "not", "in", "cluster2mentions", ":", "\n", "            ", "cluster2mentions", "[", "cluster", "]", "=", "[", "]", "\n", "", "cluster2mentions", "[", "cluster", "]", ".", "append", "(", "mention", ")", "\n", "\n", "", "number_of_mentions", "=", "clusters", ".", "size", "(", ")", "[", "0", "]", "\n", "target", "=", "torch", ".", "zeros", "(", "number_of_mentions", ",", "number_of_mentions", ")", "\n", "for", "cluster", ",", "mentions", "in", "cluster2mentions", ".", "items", "(", ")", ":", "\n", "        ", "for", "m1", "in", "mentions", ":", "\n", "            ", "for", "m2", "in", "mentions", ":", "\n", "                ", "target", "[", "m1", ",", "m2", "]", "=", "1", "\n", "", "", "", "return", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.logZ": [[791, 802], ["torch.zeros", "torch.zeros", "torch.exp", "torch.exp", "torch.diag", "torch.diag", "L.logdet", "torch.exp.sum", "scores.size", "scores.size", "torch.eye", "torch.eye"], "function", ["None"], ["", "def", "logZ", "(", "scores", ")", ":", "\n", "    ", "dim", "=", "scores", ".", "size", "(", ")", "[", "0", "]", "+", "1", "\n", "\n", "S", "=", "torch", ".", "zeros", "(", "dim", ",", "dim", ")", "\n", "S", "[", "1", ":", ",", "1", ":", "]", "=", "scores", "\n", "A", "=", "torch", ".", "exp", "(", "S", "+", "torch", ".", "eye", "(", "dim", ")", "*", "-", "10000", ")", "\n", "D", "=", "torch", ".", "diag", "(", "A", ".", "sum", "(", "0", ")", ")", "\n", "L", "=", "D", "-", "A", "\n", "\n", "L", "[", "0", ",", "1", ":", "]", "=", "1", "/", "scores", ".", "size", "(", ")", "[", "0", "]", "\n", "return", "L", ".", "logdet", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_edmonds_softmax.LossCorefLinkerESM.__init__": [[160, 187], ["torch.Module.__init__", "config.get", "coreflinker_edmonds_softmax.LossCorefLinkerESM.entity_dictionary.tolist", "entity_dictionary.lookup"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup"], ["    ", "def", "__init__", "(", "self", ",", "link_task", ",", "coref_task", ",", "entity_dictionary", ",", "config", ",", "end_to_end", ")", ":", "\n", "        ", "super", "(", "LossCorefLinkerESM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "enabled", "=", "config", "[", "'enabled'", "]", "\n", "self", ".", "coref_task", "=", "coref_task", "\n", "self", ".", "link_task", "=", "link_task", "\n", "self", ".", "entity_dictionary", "=", "entity_dictionary", "\n", "\n", "if", "self", ".", "enabled", ":", "\n", "            ", "self", ".", "labels", "=", "self", ".", "entity_dictionary", ".", "tolist", "(", ")", "\n", "self", ".", "unknown_dict", "=", "entity_dictionary", ".", "lookup", "(", "'###UNKNOWN###'", ")", "\n", "\n", "", "self", ".", "weight", "=", "config", ".", "get", "(", "'weight'", ",", "1.0", ")", "\n", "self", ".", "filter_singletons_with_pruner", "=", "config", "[", "'filter_singletons_with_pruner'", "]", "\n", "self", ".", "filter_singletons_with_ner", "=", "config", "[", "'filter_singletons_with_ner'", "]", "\n", "\n", "# TODO: filter_singletons_with_matrix is still not implemented", "\n", "self", ".", "filter_singletons_with_matrix", "=", "config", "[", "'filter_singletons_with_matrix'", "]", "\n", "self", ".", "singletons", "=", "self", ".", "filter_singletons_with_pruner", "or", "self", ".", "filter_singletons_with_ner", "\n", "self", ".", "end_to_end", "=", "end_to_end", "\n", "# self.float_precision = config['float_precision']", "\n", "# self.multihead_nil = config['multihead_nil']", "\n", "\n", "# if self.float_precision == 'float64':", "\n", "#     self.torch_float_precision = torch.float64", "\n", "# else:", "\n", "self", ".", "torch_float_precision", "=", "torch", ".", "float32", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_edmonds_softmax.LossCorefLinkerESM.forward": [[188, 456], ["linker.get", "modules.misc.misc.batched_index_select", "modules.misc.misc.batched_index_select", "modules.misc.misc.batched_index_select().squeeze", "modules.misc.misc.batched_index_select.to", "list", "list", "coreflinker_edmonds_softmax.LossCorefLinkerESM.entity_dictionary.lookup", "modules.misc.misc.batched_index_select.to.view", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "modules.tasks.coreflinker.create_candidate_mask().float().to", "coreflinker_edmonds_softmax.create_coreflinker_esm_target_forward", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.ones().unsqueeze", "torch.ones().unsqueeze", "torch.ones().unsqueeze", "torch.ones().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "util.sequence.get_mask_from_sequence_lengths().float", "modules.misc.misc.batched_index_select", "modules.misc.misc.batched_index_select", "modules.misc.misc.batched_index_select().squeeze", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.tensor.append", "torch.tensor.append", "list.append", "modules.misc.misc.batched_index_select().squeeze", "torch.ones().unsqueeze", "torch.ones().unsqueeze", "torch.ones().unsqueeze", "torch.ones().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.max().item", "torch.cat.max().item", "util.math.logsumexp", "modules.misc.misc.batched_index_select().squeeze.max().item", "scores[].transpose", "torch.diagonal().unsqueeze", "torch.diagonal().unsqueeze", "torch.diagonal().unsqueeze", "torch.diagonal().unsqueeze", "scrs_mtt_root_to_spans.transpose.transpose.transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "coreflinker_edmonds_softmax.create_scores_esm_pred", "modules.tasks.coreflinker_mtt.create_coreflinker_mtt_z_mask_indexed", "min", "print", "time.time", "util.edmonds.mst_only_tree", "time.time", "print", "list", "enumerate", "list", "enumerate", "modules.tasks.coreflinker_mtt.decode_m2i_coreflinker_mtt", "modules.misc.misc.batched_index_select().squeeze.max().item", "modules.utils.misc.predict_scores_mtt", "modules.tasks.coreflinker_mtt.predict_scores_coref_mtt", "modules.misc.misc.batched_index_select", "modules.tasks.coreflinker.create_candidate_mask().float", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "additive_mask.to", "util.sequence.get_mask_from_sequence_lengths", "pred_masked_scores.min().item", "int", "list.append", "enumerate", "list.append", "modules.tasks.coreflinker.remove_disabled_spans", "modules.tasks.coreflinker.remove_disabled_spans_linking", "modules.tasks.coreflinker.remove_disabled_scores_coref", "modules.tasks.coreflinker.remove_disabled_scores_linking", "modules.tasks.coreflinker.remove_disabled_spans", "modules.tasks.coreflinker.remove_disabled_spans_linking", "modules.misc.misc.batched_index_select().squeeze.unsqueeze", "modules.misc.misc.batched_index_select", "modules.misc.misc.batched_index_select", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.cat.max", "torch.cat.max", "torch.LongTensor().to.max().item", "torch.LongTensor().to.max().item", "modules.misc.misc.batched_index_select().squeeze.max", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "z_mask.sum().item", "dict", "modules.tasks.coreflinker_mtt.convert_coref_mtt", "modules.misc.misc.batched_index_select().squeeze.max", "modules.misc.misc.batched_index_select().squeeze.unsqueeze", "modules.misc.misc.batched_index_select().squeeze.unsqueeze", "modules.tasks.coreflinker.create_candidate_mask", "len", "modules.tasks.coreflinker.create_candidate_mask().float().to.size", "modules.tasks.coreflinker.create_candidate_mask().float().to.size", "pred_masked_scores.min", "modules.tasks.coreflinker_mtt.m2i_to_clusters_linkercoref_mtt", "zip", "modules.tasks.coreflinker.convert_coref", "zip", "modules.misc.misc.batched_index_select.to.size", "modules.tasks.coreflinker.create_candidate_mask().float().to.size", "torch.LongTensor().to.max", "torch.LongTensor().to.max", "z_mask.sum", "link_dict_id.item", "link_id_to_coref_col_batch.items", "candidate_ids_b.size", "candidate_ids_b.size", "modules.tasks.coreflinker.m2i_to_clusters_linkercoref", "x.tolist"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.batched_index_select", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.batched_index_select", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_edmonds_softmax.create_coreflinker_esm_target_forward", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.batched_index_select", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.batched_index_select", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.math.logsumexp", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_edmonds_softmax.create_scores_esm_pred", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt.create_coreflinker_mtt_z_mask_indexed", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.edmonds.mst_only_tree", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt.decode_m2i_coreflinker_mtt", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.misc.predict_scores_mtt", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt.predict_scores_coref_mtt", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.batched_index_select", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.sequence.get_mask_from_sequence_lengths", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coref.remove_disabled_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.remove_disabled_spans_linking", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.remove_disabled_scores_coref", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.remove_disabled_scores_linking", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coref.remove_disabled_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.remove_disabled_spans_linking", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.batched_index_select", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.batched_index_select", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt.convert_coref_mtt", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.create_candidate_mask", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt.m2i_to_clusters_linkercoref_mtt", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.convert_coref", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.m2i_to_clusters_linkercoref", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist"], ["", "def", "forward", "(", "self", ",", "scores", ",", "gold_m2i", ",", "filtered_spans", ",", "gold_spans", ",", "linker", ",", "\n", "predict", "=", "False", ",", "pruner_spans", "=", "None", ",", "ner_spans", "=", "None", ",", "api_call", "=", "False", ")", ":", "\n", "        ", "output", "=", "{", "}", "\n", "output_coref", "=", "{", "}", "\n", "output_linking", "=", "{", "}", "\n", "\n", "if", "self", ".", "enabled", "and", "scores", "is", "not", "None", ":", "\n", "            ", "pred_spans", "=", "filtered_spans", "[", "'spans'", "]", "\n", "\n", "linker_candidates", "=", "linker", "[", "'candidates'", "]", "\n", "candidate_lengths", "=", "linker", "[", "'candidate_lengths'", "]", "\n", "targets", "=", "linker", ".", "get", "(", "'targets'", ")", "\n", "linker_candidates", "=", "batched_index_select", "(", "linker_candidates", ",", "filtered_spans", "[", "'prune_indices'", "]", ")", "\n", "targets", "=", "batched_index_select", "(", "targets", ",", "filtered_spans", "[", "'prune_indices'", "]", ")", "\n", "candidate_lengths", "=", "batched_index_select", "(", "candidate_lengths", ".", "unsqueeze", "(", "-", "1", ")", ",", "\n", "filtered_spans", "[", "'prune_indices'", "]", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "pred_spans_idx", "=", "filtered_spans", "[", "'prune_indices'", "]", "\n", "if", "not", "self", ".", "end_to_end", ":", "\n", "                ", "pred_spans_idx", "=", "filtered_spans", "[", "'reindex_wrt_gold'", "]", "\n", "linker_candidates", "=", "batched_index_select", "(", "linker_candidates", ",", "pred_spans_idx", ")", "\n", "targets", "=", "batched_index_select", "(", "targets", ",", "pred_spans_idx", ")", "\n", "candidate_lengths", "=", "batched_index_select", "(", "candidate_lengths", ".", "unsqueeze", "(", "-", "1", ")", ",", "pred_spans_idx", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "", "candidates", "=", "linker_candidates", ".", "to", "(", "scores", ".", "device", ")", "# torch.Size([1, 9, 17])", "\n", "#", "\n", "# nill_id = self.entity_dictionary.lookup('NILL')", "\n", "#", "\n", "\n", "unique_links_batches", "=", "list", "(", ")", "\n", "unique_links_lengths", "=", "list", "(", ")", "\n", "nill_id", "=", "self", ".", "entity_dictionary", ".", "lookup", "(", "'NILL'", ")", "\n", "\n", "for", "content_batch", "in", "candidates", ".", "view", "(", "candidates", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ":", "\n", "                ", "unique_batch_content", "=", "torch", ".", "unique", "(", "content_batch", ")", "\n", "unique_batch_content", "=", "unique_batch_content", "[", "unique_batch_content", "!=", "self", ".", "unknown_dict", "]", "\n", "unique_batch_content", "=", "unique_batch_content", "[", "unique_batch_content", "!=", "nill_id", "]", "\n", "unique_links_lengths", ".", "append", "(", "unique_batch_content", ".", "shape", "[", "0", "]", ")", "\n", "unique_links_batches", ".", "append", "(", "unique_batch_content", ")", "\n", "", "unique_links", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pad_sequence", "(", "unique_links_batches", ",", "batch_first", "=", "True", ")", "\n", "unique_links_lengths", "=", "torch", ".", "tensor", "(", "unique_links_lengths", ",", "dtype", "=", "torch", ".", "int32", ",", "device", "=", "settings", ".", "device", ")", "\n", "\n", "## taken from coreflinker.py", "\n", "tot_cand_lengths_in_gold_mentions", "=", "linker", "[", "'total_cand_lengths_in_gold_mentions'", "]", "\n", "if", "tot_cand_lengths_in_gold_mentions", "is", "not", "None", ":", "\n", "                ", "tot_cand_lengths_in_gold_mentions", "=", "batched_index_select", "(", "tot_cand_lengths_in_gold_mentions", ".", "unsqueeze", "(", "-", "1", ")", ",", "\n", "pred_spans_idx", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "", "linker_mask", "=", "create_candidate_mask", "(", "candidates", ".", "size", "(", "-", "1", ")", ",", "candidate_lengths", ")", ".", "float", "(", ")", ".", "to", "(", "scores", ".", "device", ")", "\n", "linker_target", "=", "targets", "*", "linker_mask", "\n", "\n", "targets_matrix", "=", "create_coreflinker_esm_target_forward", "(", "pred_spans", ",", "gold_spans", ",", "gold_m2i", ",", "linker_target", ",", "\n", "self", ".", "filter_singletons_with_matrix", ")", "\n", "\n", "lengths_coref", "=", "torch", ".", "LongTensor", "(", "[", "len", "(", "x", ")", "for", "x", "in", "pred_spans", "]", ")", ".", "to", "(", "settings", ".", "device", ")", "\n", "# lengths_linker = torch.LongTensor([linker_mask.shape[-1]]).repeat(linker_mask.shape[0]).to(settings.device)", "\n", "\n", "# triangular_mask = torch.ones(linker_mask.size()[-2], linker_mask.size()[-2], device=settings.device", "\n", "#                              ).tril(0).unsqueeze(0)", "\n", "triangular_mask", "=", "torch", ".", "ones", "(", "linker_mask", ".", "size", "(", ")", "[", "-", "2", "]", ",", "linker_mask", ".", "size", "(", ")", "[", "-", "2", "]", ",", "device", "=", "settings", ".", "device", "\n", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "triangular_mask", "=", "torch", ".", "cat", "(", "linker_mask", ".", "shape", "[", "0", "]", "*", "[", "triangular_mask", "]", ")", "\n", "# concatenate entity mask to the span-span coreference mask", "\n", "triangular_mask", "=", "torch", ".", "cat", "(", "[", "linker_mask", ",", "triangular_mask", "]", ",", "dim", "=", "-", "1", ")", "\n", "if", "self", ".", "filter_singletons_with_matrix", ":", "\n", "                ", "no_mentions_mask", "=", "torch", ".", "ones", "(", "linker_mask", ".", "size", "(", ")", "[", "-", "2", "]", ",", "1", ",", "device", "=", "settings", ".", "device", ")", ".", "unsqueeze", "(", "0", ")", "\n", "triangular_mask", "=", "torch", ".", "cat", "(", "[", "no_mentions_mask", ",", "triangular_mask", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "constant", "=", "scores", ".", "max", "(", ")", ".", "item", "(", ")", "+", "100000", "\n", "additive_mask", "=", "(", "1", "-", "triangular_mask", ")", "*", "-", "constant", "\n", "logits", "=", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "scores", "+", "additive_mask", ".", "to", "(", "scores", ".", "device", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "loss", "=", "-", "logsumexp", "(", "logits", "+", "(", "1", "-", "targets_matrix", ")", "*", "-", "100000", ")", "\n", "mask", "=", "get_mask_from_sequence_lengths", "(", "lengths_coref", ",", "lengths_coref", ".", "max", "(", ")", ".", "item", "(", ")", ")", ".", "float", "(", ")", "\n", "output", "[", "'loss'", "]", "=", "self", ".", "weight", "*", "(", "mask", "*", "loss", ")", ".", "sum", "(", ")", "\n", "\n", "output_coref", "[", "'loss'", "]", "=", "output", "[", "'loss'", "]", "\n", "output_linking", "[", "'loss'", "]", "=", "output", "[", "'loss'", "]", "\n", "\n", "if", "predict", ":", "\n", "                ", "cand_max_length", "=", "candidate_lengths", ".", "max", "(", ")", ".", "item", "(", ")", "\n", "\n", "candidates", "=", "candidates", "[", ":", ",", ":", ",", ":", "cand_max_length", "]", "\n", "scrs_mtt_spans", "=", "scores", "[", ":", ",", ":", ",", "cand_max_length", ":", "]", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", "\n", "assert", "scrs_mtt_spans", ".", "shape", "[", "-", "1", "]", "==", "scrs_mtt_spans", ".", "shape", "[", "-", "2", "]", "# it has to be square: # spans x # spans", "\n", "\n", "scrs_mtt_root_to_spans", "=", "torch", ".", "diagonal", "(", "scrs_mtt_spans", ",", "dim1", "=", "-", "2", ",", "dim2", "=", "-", "1", ")", ".", "unsqueeze", "(", "-", "2", ")", "\n", "scrs_mtt_root_to_spans", "=", "scrs_mtt_root_to_spans", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", "\n", "scores", "=", "torch", ".", "cat", "(", "[", "scrs_mtt_root_to_spans", ",", "scores", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "pred_scores_mtt", "=", "create_scores_esm_pred", "(", "scores", ",", "unique_links", ",", "candidates", ",", "candidate_lengths", ",", "\n", "torch_float_precision", "=", "self", ".", "torch_float_precision", ",", "\n", "scrs_mtt_spans", "=", "scrs_mtt_spans", ")", "\n", "\n", "z_mask", ",", "z_mask_lengths", "=", "create_coreflinker_mtt_z_mask_indexed", "(", "pred_spans", ",", "gold_spans", ",", "gold_m2i", ",", "\n", "linker_target", ",", "\n", "candidates", ",", "\n", "candidate_lengths", "=", "candidate_lengths", ",", "\n", "unique_links", "=", "unique_links", ",", "\n", "unique_links_lengths", "=", "unique_links_lengths", ",", "\n", "unknown_id", "=", "self", ".", "unknown_dict", ")", "\n", "\n", "pred_masked_scores", "=", "z_mask", "*", "pred_scores_mtt", "\n", "\n", "# the inverse of mask receives a very small score (less than the current minimum)", "\n", "z_mask_inverse", "=", "1.0", "-", "z_mask", "\n", "min_pred_mask_scores", "=", "min", "(", "pred_masked_scores", ".", "min", "(", ")", ".", "item", "(", ")", ",", "0.0", ")", "\n", "pred_masked_scores", "=", "pred_masked_scores", "+", "(", "z_mask_inverse", ")", "*", "(", "min_pred_mask_scores", "-", "999999", ")", "\n", "\n", "print", "(", "'executing edmonds with '", ",", "int", "(", "z_mask", ".", "sum", "(", ")", ".", "item", "(", ")", ")", ",", "' edges and '", ",", "z_mask", ".", "shape", "[", "-", "1", "]", ",", "' nodes: '", ",", "\n", "unique_links", ".", "shape", "[", "-", "1", "]", ",", "' unique links and '", ",", "\n", "z_mask", ".", "shape", "[", "-", "1", "]", "-", "unique_links", ".", "shape", "[", "-", "1", "]", "-", "1", ",", "' spans'", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "pred_tree_mst", "=", "mst_only_tree", "(", "pred_masked_scores", ",", "z_mask_lengths", ",", "z_mask", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'done with edmonds in '", ",", "(", "end", "-", "start", ")", ",", "' seconds'", ")", "\n", "\n", "# candidate_ids = []", "\n", "# for curr_cand_batch, _ in enumerate(candidates):", "\n", "#     unique_curr_batch = candidates[curr_cand_batch].unique(sorted=True)", "\n", "#     unique_curr_batch = unique_curr_batch[unique_curr_batch != nill_id]", "\n", "#     # (16/10/2020) - 0 is used for padding, so remove it", "\n", "#     unique_curr_batch = unique_curr_batch[unique_curr_batch != self.unknown_dict]", "\n", "#", "\n", "#     candidate_ids.append(unique_curr_batch)", "\n", "\n", "link_id_to_coref_col", "=", "list", "(", ")", "\n", "for", "batch_id", ",", "candidate_ids_batch", "in", "enumerate", "(", "unique_links", ")", ":", "\n", "                    ", "link_id_to_coref_col", ".", "append", "(", "dict", "(", ")", ")", "\n", "for", "matrix_idx_link", ",", "link_dict_id", "in", "enumerate", "(", "candidate_ids_batch", ")", ":", "\n", "# + 1 because the first one is root", "\n", "                        ", "link_id_to_coref_col", "[", "batch_id", "]", "[", "link_dict_id", ".", "item", "(", ")", "]", "=", "matrix_idx_link", "+", "1", "\n", "\n", "", "", "coref_col_to_link_id", "=", "list", "(", ")", "\n", "for", "batch_id", ",", "link_id_to_coref_col_batch", "in", "enumerate", "(", "link_id_to_coref_col", ")", ":", "\n", "                    ", "coref_col_to_link_id", ".", "append", "(", "{", "v", ":", "k", "for", "k", ",", "v", "in", "link_id_to_coref_col_batch", ".", "items", "(", ")", "}", ")", "\n", "\n", "", "decoded_m2i_coref_linker", ",", "span_to_pointer_detail_info", "=", "decode_m2i_coreflinker_mtt", "(", "pred_masked_scores", ",", "\n", "pred_tree_mst", ",", "\n", "# lengths_coref, lengths_linker, # these two are probably not needed", "\n", "# candidate_ids,", "\n", "unique_links", ",", "\n", "link_id_to_coref_col", "=", "link_id_to_coref_col", ",", "\n", "# coref_col_to_link_id=coref_col_to_link_id,", "\n", "dic", "=", "self", ".", "entity_dictionary", ",", "\n", "unique_links", "=", "unique_links", ",", "\n", "unique_links_lengths", "=", "unique_links_lengths", ",", "\n", "pred_spans", "=", "pred_spans", ")", "\n", "# print('THIS PRINT HAS TO BE DELETED!')", "\n", "# logits.shape --> torch.Size([1, 14, 30])", "\n", "# lengths_coref --> tensor([14])", "\n", "# lengths_linker --> tensor([16])", "\n", "# linker_candidates.shape --> torch.Size([1, 14, 16])", "\n", "# candidate_ids[0].shape --> torch.Size([49])", "\n", "# link_id_to_coref_col --> <class 'list'>: [{2237: 0, 2552: 1, 10719: 2, 10720: 3, 11729: 4, 11734: 5, 11735: 6, 11736: 7, 11737: 8, 11738: 9, 11739: 10, 11740: 11, 11741: 12, 11742: 13, 11743: 14, 11744: 15, 11745: 16, 11746: 17, 11747: 18, 11748: 19, 14221: 20, 25253: 21, 34142: 22, 34210: 23, 34211: 24, 34213: 25, 34214: 26, 34215: 27, 34216: 28, 34217: 29, 34218: 30, 34219: 31, 34220: 32, 118110: 33, 118129: 34, 118130: 35, 118131: 36, 118132: 37, 118133: 38, 118134: 39, 118135: 40, 118136: 41, 118137: 42, 118138: 43, 118139: 44, 118140: 45, 118141: 46, 118142: 47, 118143: 48}]", "\n", "# coref_col_to_link_id --> <class 'list'>: [{0: 2237, 1: 2552, 2: 10719, 3: 10720, 4: 11729, 5: 11734, 6: 11735, 7: 11736, 8: 11737, 9: 11738, 10: 11739, 11: 11740, 12: 11741, 13: 11742, 14: 11743, 15: 11744, 16: 11745, 17: 11746, 18: 11747, 19: 11748, 20: 14221, 21: 25253, 22: 34142, 23: 34210, 24: 34211, 25: 34213, 26: 34214, 27: 34215, 28: 34216, 29: 34217, 30: 34218, 31: 34219, 32: 34220, 33: 118110, 34: 118129, 35: 118130, 36: 118131, 37: 118132, 38: 118133, 39: 118134, 40: 118135, 41: 118136, 42: 118137, 43: 118138, 44: 118139, 45: 118140, 46: 118141, 47: 118142, 48: 118143}]", "\n", "# pred_spans --> <class 'list'>: [[(3, 4), (3, 7), (5, 6), (5, 7), (41, 43), (45, 47), (49, 49), (49, 50), (50, 50), (50, 52), (51, 52), (51, 54), (53, 54), (57, 57)]]", "\n", "# scores.shape --> torch.Size([1, 14, 30])", "\n", "\n", "# example of decoded_m2i_coref_linker:", "\n", "#   <class 'list'>: [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,", "\n", "#   23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,", "\n", "#   48, 49, 50, 51, 52, 53, 54, 5, 56, 57, 58, 59, 60, 61, 5]]", "\n", "#", "\n", "#", "\n", "# example of span_to_pointer_detail_info:", "\n", "#   <class 'list'>:", "\n", "#   [{(3, 4): {'coref_connection_type': 'mention_self', 'coref_connection_pointer': (3, 4), 'coref_connection_score': -0.0},", "\n", "#   (3, 7): {'coref_connection_type': 'mention_self', 'coref_connection_pointer': (3, 7), 'coref_connection_score': -0.0},", "\n", "#   (5, 6): {'coref_connection_type': 'mention_self', 'coref_connection_pointer': (5, 6), 'coref_connection_score': -0.0},", "\n", "#   (5, 7): {'coref_connection_type': 'mention_self', 'coref_connection_pointer': (5, 7), 'coref_connection_score': -0.0},", "\n", "#   (41, 43): {'coref_connection_type': 'mention_self', 'coref_connection_pointer': (41, 43), 'coref_connection_score': -0.0},", "\n", "#   (45, 47): {'coref_connection_type': 'mention_self', 'coref_connection_pointer': (45, 47), 'coref_connection_score': -0.0},", "\n", "#   (49, 49): {'coref_connection_type': 'link', 'coref_connection_pointer': 'Berlin'},", "\n", "#   (49, 50): {'coref_connection_type': 'mention_self', 'coref_connection_pointer': (49, 50), 'coref_connection_score': -0.0},", "\n", "#   (50, 50): {'coref_connection_type': 'mention_self', 'coref_connection_pointer': (50, 50), 'coref_connection_score': -0.0},", "\n", "#   (50, 52): {'coref_connection_type': 'mention_self', 'coref_connection_pointer': (50, 52), 'coref_connection_score': -0.0},", "\n", "#   (51, 52): {'coref_connection_type': 'mention_self', 'coref_connection_pointer': (51, 52), 'coref_connection_score': -0.0},", "\n", "#   (51, 54): {'coref_connection_type': 'mention_self', 'coref_connection_pointer': (51, 54), 'coref_connection_score': -0.0},", "\n", "#   (53, 54): {'coref_connection_type': 'mention_self', 'coref_connection_pointer': (53, 54), 'coref_connection_score': -0.0},", "\n", "#   (57, 57): {'coref_connection_type': 'link', 'coref_connection_pointer': 'Berlin'}}]", "\n", "\n", "# here gets the coref cluster spans only", "\n", "output_pred", "=", "[", "convert_coref_mtt", "(", "m2i_to_clusters_linkercoref_mtt", "(", "x", ",", "coref_col_to_link_id_b", ",", "\n", "self", ".", "entity_dictionary", ",", "\n", "candidate_ids_b", ".", "size", "(", "-", "1", ")", ")", ",", "\n", "y", ",", "number_candidates", "=", "candidate_ids_b", ".", "size", "(", "-", "1", ")", ",", "\n", "links_dictionary", "=", "self", ".", "entity_dictionary", ",", "\n", "coref_col_to_link_id", "=", "coref_col_to_link_id_b", ")", "\n", "for", "x", ",", "y", ",", "candidate_ids_b", ",", "coref_col_to_link_id_b", "in", "\n", "# zip(decoded_m2i_coref_linker, pred_spans, candidate_ids,", "\n", "zip", "(", "decoded_m2i_coref_linker", ",", "pred_spans", ",", "unique_links", ",", "\n", "coref_col_to_link_id", ")", "]", "if", "scores", "is", "not", "None", "else", "[", "[", "]", "for", "_", "in", "pred_spans", "]", "\n", "\n", "output_coref", "[", "'pred'", "]", "=", "[", "out", "[", "0", "]", "for", "out", "in", "output_pred", "]", "\n", "output_coref", "[", "'pred_pointers'", "]", "=", "span_to_pointer_detail_info", "\n", "output_linking", "[", "'pred'", "]", "=", "[", "out", "[", "1", "]", "for", "out", "in", "output_pred", "]", "\n", "output_linking", "[", "'spans_with_link'", "]", "=", "[", "out", "[", "2", "]", "for", "out", "in", "output_pred", "]", "\n", "\n", "# this gives 1 if candidate list is empty, this why it is commented", "\n", "# max_nr_candidates = linker_candidates.size(-1)", "\n", "\n", "# this gives correct answer; this is why it is used instead of linker_candidates.size(-1)", "\n", "max_nr_candidates", "=", "candidate_lengths", ".", "max", "(", ")", ".", "item", "(", ")", "\n", "\n", "linker_spans", "=", "filtered_spans", "[", "'spans'", "]", "\n", "\n", "cols_to_ignore", "=", "0", "# in case we want to use the matrix itself to filter incorrect mentions", "\n", "\n", "# TODO (24/02/2021): we are here adapting: maybe from the beggining add the column of diagonal to scores instead", "\n", "#   of only doing this inside create_scores_esm_pred only:", "\n", "#   scrs_mtt_root_to_spans = torch.diagonal(scrs_mtt_spans, dim1=-2, dim2=-1).unsqueeze(-2)??", "\n", "# + 1 because also the link score to root is counted", "\n", "s", "=", "predict_scores_mtt", "(", "scores", "[", ":", ",", ":", ",", "cols_to_ignore", ":", "max_nr_candidates", "+", "1", "]", ",", "linker_spans", ",", "\n", "linker_candidates", ",", "candidate_lengths", ",", "self", ".", "entity_dictionary", ")", "\n", "\n", "# TODO!!! - WHERE THESE 'scores' ARE USED??? ARE THEY REALLY NEEDED???", "\n", "output_coref", "[", "'scores'", "]", "=", "predict_scores_coref_mtt", "(", "scores", "[", ":", ",", ":", ",", "max_nr_candidates", "+", "cols_to_ignore", "+", "1", ":", "]", ",", "\n", "pred_spans", "=", "pred_spans", ")", "\n", "\n", "output_linking", "[", "'scores'", "]", "=", "s", "\n", "\n", "if", "not", "api_call", ":", "\n", "                    ", "output_coref", "[", "'gold'", "]", "=", "[", "convert_coref", "(", "m2i_to_clusters_linkercoref", "(", "x", ".", "tolist", "(", ")", ")", ",", "y", ",", "\n", "number_candidates", "=", "0", ",", "\n", "links_dictionary", "=", "self", ".", "entity_dictionary", ")", "[", "0", "]", "for", "x", ",", "y", "in", "\n", "zip", "(", "gold_m2i", ",", "gold_spans", ")", "]", "\n", "\n", "# TODO - number_candidates!!!", "\n", "output_linking", "[", "'gold'", "]", "=", "linker", "[", "'gold'", "]", "\n", "", "else", ":", "\n", "                    ", "output_coref", "[", "'gold'", "]", "=", "[", "None", "for", "_", "in", "gold_spans", "]", "\n", "output_linking", "[", "'gold'", "]", "=", "[", "None", "for", "_", "in", "gold_spans", "]", "\n", "\n", "", "if", "self", ".", "filter_singletons_with_pruner", ":", "\n", "# this assumes that pruner is able to predict spans", "\n", "                    ", "output_coref", "[", "'pred'", "]", "=", "remove_disabled_spans", "(", "output_coref", "[", "'pred'", "]", ",", "pruner_spans", ")", "\n", "coref_flat", "=", "[", "{", "item", "for", "sublist", "in", "batch", "for", "item", "in", "sublist", "}", "for", "batch", "in", "output_coref", "[", "'pred'", "]", "]", "\n", "output_linking", "[", "'pred'", "]", "=", "remove_disabled_spans_linking", "(", "output_linking", "[", "'pred'", "]", ",", "coref_flat", ")", "\n", "output_coref", "[", "'scores'", "]", "=", "remove_disabled_scores_coref", "(", "output_coref", "[", "'scores'", "]", ",", "coref_flat", ")", "\n", "output_linking", "[", "'scores'", "]", "=", "remove_disabled_scores_linking", "(", "output_linking", "[", "'scores'", "]", ",", "coref_flat", ")", "\n", "\n", "", "if", "self", ".", "filter_singletons_with_ner", ":", "\n", "                    ", "output_coref", "[", "'pred'", "]", "=", "remove_disabled_spans", "(", "output_coref", "[", "'pred'", "]", ",", "ner_spans", ")", "\n", "output_linking", "[", "'pred'", "]", "=", "remove_disabled_spans_linking", "(", "output_linking", "[", "'pred'", "]", ",", "ner_spans", ")", "\n", "output_coref", "[", "'scores'", "]", "=", "None", "# TODO", "\n", "output_linking", "[", "'scores'", "]", "=", "None", "# TODO", "\n", "raise", "NotImplementedError", "# TODO!! first resolve the two previous TODOs!!! ,", "\n", "", "", "", "else", ":", "\n", "            ", "output", "[", "'loss'", "]", "=", "0.0", "\n", "output_coref", "[", "'loss'", "]", "=", "0.0", "\n", "output_coref", "[", "'pred'", "]", "=", "[", "None", "for", "x", "in", "gold_spans", "]", "\n", "output_coref", "[", "'pred_pointers'", "]", "=", "[", "None", "for", "x", "in", "gold_spans", "]", "\n", "output_coref", "[", "'gold'", "]", "=", "[", "None", "for", "x", "in", "gold_spans", "]", "\n", "output_coref", "[", "'scores'", "]", "=", "[", "None", "for", "x", "in", "gold_spans", "]", "\n", "\n", "# TODO: see well what have to add here for pred_linking and gold_linking", "\n", "output_linking", "[", "'pred'", "]", "=", "[", "None", "for", "x", "in", "gold_spans", "]", "\n", "output_linking", "[", "'gold'", "]", "=", "[", "None", "for", "x", "in", "gold_spans", "]", "\n", "output_linking", "[", "'loss'", "]", "=", "0.0", "\n", "output_linking", "[", "'scores'", "]", "=", "[", "None", "for", "x", "in", "gold_spans", "]", "\n", "\n", "# kzaporoj - None for the link part , not yet", "\n", "", "return", "output", "[", "'loss'", "]", ",", "output_linking", ",", "output_coref", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_edmonds_softmax.LossCorefLinkerESM.create_metrics": [[457, 479], ["out.extend", "out.append", "out.append", "out.append", "out.extend", "metrics.coref.MetricCoref", "metrics.coref.MetricCoref", "metrics.coref.MetricCoref", "metrics.coref.MetricCorefAverage", "metrics.misc.MetricObjective", "metrics.corefx.MetricCorefExternal", "metrics.linker.MetricLinkerImproved", "metrics.linker.MetricLinkerImproved", "metrics.linker.MetricLinkerImproved", "metrics.linker.MetricLinkAccuracy", "metrics.linker.MetricLinkAccuracyNoCandidates", "metrics.misc.MetricObjective"], "methods", ["None"], ["", "def", "create_metrics", "(", "self", ")", ":", "\n", "        ", "out", "=", "[", "]", "\n", "if", "self", ".", "enabled", ":", "\n", "            ", "metrics", "=", "[", "\n", "MetricCoref", "(", "self", ".", "coref_task", ",", "'muc'", ",", "MetricCoref", ".", "muc", ")", ",", "\n", "MetricCoref", "(", "self", ".", "coref_task", ",", "'bcubed'", ",", "MetricCoref", ".", "b_cubed", ",", "verbose", "=", "False", ")", ",", "\n", "MetricCoref", "(", "self", ".", "coref_task", ",", "'ceafe'", ",", "MetricCoref", ".", "ceafe", ",", "verbose", "=", "False", ")", ",", "\n", "]", "\n", "\n", "out", ".", "extend", "(", "metrics", ")", "\n", "out", ".", "append", "(", "MetricCorefAverage", "(", "self", ".", "coref_task", ",", "'avg'", ",", "metrics", ")", ")", "\n", "out", ".", "append", "(", "MetricObjective", "(", "self", ".", "coref_task", ")", ")", "\n", "out", ".", "append", "(", "MetricCorefExternal", "(", "self", ".", "coref_task", ")", ")", "\n", "\n", "out", ".", "extend", "(", "[", "MetricLinkerImproved", "(", "self", ".", "link_task", ")", ",", "\n", "MetricLinkerImproved", "(", "self", ".", "link_task", ",", "'links'", ")", ",", "\n", "MetricLinkerImproved", "(", "self", ".", "link_task", ",", "'nills'", ")", ",", "\n", "MetricLinkAccuracy", "(", "self", ".", "link_task", ")", ",", "\n", "MetricLinkAccuracyNoCandidates", "(", "self", ".", "link_task", ")", ",", "\n", "MetricObjective", "(", "self", ".", "link_task", ")", "]", ")", "\n", "\n", "", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_edmonds_softmax.create_coreflinker_esm_target_forward": [[25, 78], ["len", "max", "torch.zeros", "torch.zeros", "linker_targets.sum", "enumerate", "torch.zeros", "torch.zeros", "zip", "enumerate", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "clusters[].item", "nr_candidate_links_per_mention[].item", "enumerate"], "function", ["None"], ["def", "create_coreflinker_esm_target_forward", "(", "pred_spans", ",", "gold_spans", ",", "gold_clusters", ",", "linker_targets", ",", "\n", "filter_singletons_with_matrix", ")", ":", "\n", "    ", "num_batch", "=", "len", "(", "pred_spans", ")", "# 1", "\n", "max_spans", "=", "max", "(", "[", "len", "(", "x", ")", "for", "x", "in", "pred_spans", "]", ")", "# 9", "\n", "\n", "coref_targets", "=", "torch", ".", "zeros", "(", "num_batch", ",", "max_spans", ",", "max_spans", ",", "device", "=", "settings", ".", "device", ")", "# torch.Size([1, 9, 9])", "\n", "if", "filter_singletons_with_matrix", ":", "\n", "        ", "no_mention_targets", "=", "torch", ".", "zeros", "(", "num_batch", ",", "max_spans", ",", "1", ",", "device", "=", "settings", ".", "device", ")", "\n", "", "else", ":", "\n", "        ", "no_mention_targets", "=", "None", "\n", "\n", "# obj = self.loss(scores, targets)  # torch.Size([1, 9, 17]) -> targets shape", "\n", "# obj = (scores_mask * obj).sum() * self.weight", "\n", "\n", "# nr_candidate_links_per_mention = (linker_targets.int() & linker_mask.int()).sum(-1)", "\n", "", "nr_candidate_links_per_mention", "=", "linker_targets", ".", "sum", "(", "-", "1", ")", "\n", "# targets for span-span coref # TODO!! - also check that linker_targets come as batch!!!", "\n", "for", "batch", ",", "(", "pred", ",", "gold", ",", "clusters", ")", "in", "enumerate", "(", "zip", "(", "pred_spans", ",", "gold_spans", ",", "gold_clusters", ")", ")", ":", "\n", "        ", "gold2cluster", "=", "{", "}", "\n", "for", "idx", ",", "span", "in", "enumerate", "(", "gold", ")", ":", "\n", "            ", "gold2cluster", "[", "span", "]", "=", "clusters", "[", "idx", "]", ".", "item", "(", ")", "\n", "\n", "", "for", "idx1", ",", "span1", "in", "enumerate", "(", "pred", ")", ":", "\n", "            ", "num_found", "=", "0", "\n", "if", "span1", "in", "gold2cluster", ":", "\n", "                ", "for", "idx2", ",", "span2", "in", "enumerate", "(", "pred", ")", ":", "\n", "                    ", "if", "idx2", "!=", "idx1", "and", "span2", "in", "gold2cluster", "and", "gold2cluster", "[", "span1", "]", "==", "gold2cluster", "[", "span2", "]", ":", "\n", "                        ", "coref_targets", "[", "batch", ",", "idx1", ",", "idx2", "]", "=", "1.0", "\n", "num_found", "+=", "1", "\n", "\n", "# (kzaporoj) - here also checks whether a particular mention has entity linking candidates, and if so,", "\n", "# also sets the num_found to num_candidates", "\n", "# print('here todo with num_found of linking candidates')", "\n", "", "", "", "num_found", "+=", "nr_candidate_links_per_mention", "[", "batch", ",", "idx1", "]", ".", "item", "(", ")", "\n", "if", "num_found", "==", "0", ":", "\n", "                ", "if", "filter_singletons_with_matrix", ":", "\n", "                    ", "if", "span1", "not", "in", "gold2cluster", ":", "\n", "# if it is not a valid mention, put into no_mention column", "\n", "                        ", "no_mention_targets", "[", "batch", ",", "idx1", ",", "0", "]", "=", "1.0", "\n", "", "else", ":", "\n", "# if it is a singleton, still main diagonal", "\n", "                        ", "coref_targets", "[", "batch", ",", "idx1", ",", "idx1", "]", "=", "1.0", "\n", "", "", "else", ":", "\n", "                    ", "coref_targets", "[", "batch", ",", "idx1", ",", "idx1", "]", "=", "1.0", "\n", "\n", "# targets for span-entity coref", "\n", "", "", "", "", "if", "filter_singletons_with_matrix", ":", "\n", "        ", "linkercoref_targets", "=", "torch", ".", "cat", "(", "[", "no_mention_targets", ",", "linker_targets", ",", "coref_targets", "]", ",", "\n", "dim", "=", "-", "1", ")", "# torch.Size([1, 9, 27])", "\n", "", "else", ":", "\n", "        ", "linkercoref_targets", "=", "torch", ".", "cat", "(", "[", "linker_targets", ",", "coref_targets", "]", ",", "dim", "=", "-", "1", ")", "# torch.Size([1, 9, 26])", "\n", "\n", "", "return", "linkercoref_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_edmonds_softmax.create_scores_esm_pred": [[80, 156], ["torch.diagonal().unsqueeze", "torch.diagonal().unsqueeze", "torch.zeros", "torch.zeros", "torch.max", "torch.max", "torch.cat", "torch.cat", "torch.zeros_like", "torch.zeros_like", "scrs_links_to_spans.unsqueeze().expand", "torch.ones", "torch.ones", "torch.matmul().squeeze", "torch.matmul().squeeze", "scrs_mtt_links_to_spans.transpose.transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.diagonal", "torch.diagonal", "candidates.unsqueeze", "mix_cross.size", "scrs_links_to_spans.unsqueeze", "torch.matmul", "torch.matmul"], "function", ["None"], ["", "def", "create_scores_esm_pred", "(", "scores", ",", "unique_links", ",", "candidates", ",", "candidate_lengths", ",", "torch_float_precision", ",", "\n", "scrs_mtt_spans", ")", ":", "\n", "    ", "\"\"\"\n\n    :param scores:\n    :return:\n\n    \"\"\"", "\n", "# resources to help: https://discuss.pytorch.org/t/find-indices-of-one-tensor-in-another/84889", "\n", "# >>> a = torch.arange(10)", "\n", "# >>> b = torch.arange(2, 7)[torch.randperm(5)]", "\n", "# print((b.unsqueeze(1) == a).nonzero())", "\n", "\n", "# print('the passed scores to create_scores_mtt_pred is: ', scores)", "\n", "# scores.shape: [1,14,31]", "\n", "# candidates.shape: [1,14,16]", "\n", "# unique_links.shape: [1,30]", "\n", "\n", "# here broadcasts candidate ids to unique ids in unique_links", "\n", "# mix_cross.shape: [batch, spans, # candidates, # unique_candidates] --> [1, 14, 16, 30]", "\n", "# mix_cross is a matrix that maps each of the candidates (dim 2) for each of the spans (dim 1) to the respective", "\n", "# position in unique_links (dim 3). dim 0 is the batch.", "\n", "\n", "# TODO!!! SEE IF THIS WILL WORK FOR edmonds_softmax, SINCE I THINK EVEN THOUGH THERE IS NO CANDIDATES,", "\n", "#  THE LENGTH IS STILL 1 in candidates matrix! (there is still one column), right???, check this!!", "\n", "# cand_max_length = candidate_lengths.max().item()", "\n", "\n", "# candidates = candidates[:, :, :cand_max_length]", "\n", "# scrs_mtt_spans = scores[:, :, cand_max_length:].transpose(-2, -1)", "\n", "# assert scrs_mtt_spans.shape[-1] == scrs_mtt_spans.shape[-2]  # it has to be square: # spans x # spans", "\n", "\n", "scrs_mtt_root_to_spans", "=", "torch", ".", "diagonal", "(", "scrs_mtt_spans", ",", "dim1", "=", "-", "2", ",", "dim2", "=", "-", "1", ")", ".", "unsqueeze", "(", "-", "2", ")", "\n", "# scrs_mtt_root_to_spans = scores[:, :, :1].transpose(-2, -1)", "\n", "\n", "if", "unique_links", ".", "shape", "[", "-", "1", "]", ">", "0", ":", "\n", "        ", "mix_cross", ":", "torch", ".", "Tensor", "=", "(", "candidates", ".", "unsqueeze", "(", "-", "1", ")", "==", "unique_links", ")", "\n", "\n", "scrs_mtt_expd_links_to_spans", "=", "torch", ".", "zeros_like", "(", "mix_cross", ",", "device", "=", "settings", ".", "device", ",", "dtype", "=", "torch_float_precision", ")", "\n", "scrs_links_to_spans", "=", "scores", "[", ":", ",", ":", ",", "1", ":", "candidates", ".", "shape", "[", "-", "1", "]", "+", "1", "]", "\n", "# scrs_links_to_spans = scores[:, :, :candidates.shape[-1]]", "\n", "scrs_expd_links_to_spans", "=", "scrs_links_to_spans", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "mix_cross", ".", "size", "(", ")", ")", "\n", "scrs_mtt_expd_links_to_spans", "[", "mix_cross", "]", "=", "scrs_expd_links_to_spans", "[", "mix_cross", "]", "\n", "\n", "ones_multiplier", "=", "torch", ".", "ones", "(", "1", ",", "mix_cross", ".", "shape", "[", "2", "]", ",", "dtype", "=", "torch_float_precision", ",", "device", "=", "settings", ".", "device", ")", "\n", "scrs_mtt_links_to_spans", "=", "torch", ".", "matmul", "(", "ones_multiplier", ",", "scrs_mtt_expd_links_to_spans", ")", ".", "squeeze", "(", "-", "2", ")", "\n", "scrs_mtt_links_to_spans", "=", "scrs_mtt_links_to_spans", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", "\n", "\n", "# scrs_mtt_links_to_spans --> block of scores from entity links to spans", "\n", "# TODO: not sure if this transpose is necessary since it is square", "\n", "# commented because in case of 0 candidates, it fails", "\n", "# scrs_mtt_spans = scores[:, :, candidates.shape[-1] + 1:].transpose(-2, -1)", "\n", "# scrs_mtt_spans --> bloc of scores between spans", "\n", "\n", "# scrs_mtt_root_to_spans --> bloc of scores from root to spans", "\n", "\n", "# scores for predicted block (the rightmost)", "\n", "scrs_mtt_pred_bloc", "=", "torch", ".", "cat", "(", "[", "scrs_mtt_root_to_spans", ",", "scrs_mtt_links_to_spans", ",", "scrs_mtt_spans", "]", ",", "dim", "=", "-", "2", ")", "\n", "", "else", ":", "\n", "# if no candidate links, then don't add it completely", "\n", "        ", "scrs_mtt_pred_bloc", "=", "torch", ".", "cat", "(", "[", "scrs_mtt_root_to_spans", ",", "scrs_mtt_spans", "]", ",", "dim", "=", "-", "2", ")", "\n", "\n", "# the leftmost fixed bloc", "\n", "# TODO: when using batch size > 1, change this to take it into account", "\n", "", "scrs_mtt_fixed_bloc", "=", "torch", ".", "zeros", "(", "scrs_mtt_pred_bloc", ".", "shape", "[", "0", "]", ",", "scrs_mtt_pred_bloc", ".", "shape", "[", "1", "]", ",", "\n", "1", "+", "unique_links", ".", "shape", "[", "-", "1", "]", ",", "device", "=", "settings", ".", "device", ",", "\n", "dtype", "=", "torch_float_precision", ")", "\n", "# dtype=torch.float32)", "\n", "\n", "# repeat just the maximum score from the root to candidate links", "\n", "# TODO: make this batched", "\n", "scrs_mtt_fixed_bloc", "[", "0", ",", "0", ",", "1", ":", "unique_links", ".", "shape", "[", "-", "1", "]", "+", "1", "]", "=", "torch", ".", "max", "(", "scrs_mtt_pred_bloc", ")", "\n", "\n", "# print('pred_scores done?')", "\n", "scrs_mtt_complete_matrix", "=", "torch", ".", "cat", "(", "[", "scrs_mtt_fixed_bloc", ",", "scrs_mtt_pred_bloc", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "return", "scrs_mtt_complete_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.sequence_labeling.TaskCRF.__init__": [[11, 17], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "modules.conditional_random_field.ConditionalRandomField", "labels.tolist"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "dim_input", ",", "labels", ")", ":", "\n", "        ", "super", "(", "TaskCRF", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "dim_input", ",", "labels", ".", "size", ")", "\n", "self", ".", "crf", "=", "ConditionalRandomField", "(", "labels", ".", "size", ")", "\n", "self", ".", "labels", "=", "labels", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.sequence_labeling.TaskCRF.forward": [[18, 24], ["sequence_labeling.TaskCRF.linear", "sequence_labeling.TaskCRF.crf"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ",", "sequence_lengths", ",", "mask", ")", ":", "\n", "        ", "logits", "=", "self", ".", "linear", "(", "inputs", ")", "\n", "\n", "values", "=", "self", ".", "crf", "(", "logits", ",", "targets", ",", "sequence_lengths", ",", "mask", ")", "\n", "\n", "return", "values", ",", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.sequence_labeling.TaskCRF.create_metrics": [[25, 32], ["metrics.f1.MetricNERF1", "sequence_labeling.TaskCRF.crf.predict"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.predict"], ["", "def", "create_metrics", "(", "self", ")", ":", "\n", "        ", "def", "decision_function", "(", "logits", ",", "sequence_lengths", ",", "mask", ")", ":", "\n", "            ", "out", "=", "self", ".", "crf", ".", "predict", "(", "logits", ",", "sequence_lengths", ",", "mask", ")", "\n", "# print(\"PRED:\", out)", "\n", "return", "out", "\n", "\n", "", "return", "MetricNERF1", "(", "self", ".", "name", ",", "self", ".", "labels", ",", "decision_function", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.sequence_labeling.TaskNerSoftmax.__init__": [[36, 45], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "labels.tolist", "config.get", "config.get", "config.get", "len"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "dim_input", ",", "labels", ",", "config", ")", ":", "\n", "        ", "super", "(", "TaskNerSoftmax", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "dim_input", ",", "labels", ".", "size", ")", "\n", "self", ".", "loss", "=", "nn", ".", "CrossEntropyLoss", "(", "reduce", "=", "False", ")", "\n", "self", ".", "labels", "=", "labels", ".", "tolist", "(", ")", "\n", "self", ".", "weight", "=", "config", ".", "get", "(", "'weight'", ",", "1.0", ")", "/", "len", "(", "self", ".", "labels", ")", "if", "config", "[", "'normalize'", "]", "else", "config", ".", "get", "(", "'weight'", ",", "1.0", ")", "\n", "self", ".", "enabled", "=", "config", "[", "'enabled'", "]", "\n", "self", ".", "verbose", "=", "config", ".", "get", "(", "'verbose'", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.sequence_labeling.TaskNerSoftmax.forward": [[46, 71], ["sequence_labeling.TaskNerSoftmax.linear", "sequence_labeling.TaskNerSoftmax.size", "sequence_labeling.TaskNerSoftmax.loss().view_as", "masked_values.sum", "mask.float", "sequence_labeling.TaskNerSoftmax.loss", "sequence_labeling.TaskNerSoftmax.view", "targets.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", "=", "None", ",", "sequence_lengths", "=", "None", ",", "mask", "=", "None", ",", "predict", "=", "False", ")", ":", "\n", "        ", "output", "=", "{", "}", "\n", "\n", "logits", "=", "self", ".", "linear", "(", "inputs", ")", "\n", "\n", "if", "targets", "is", "not", "None", ":", "\n", "            ", "batch_size", ",", "sequence_length", ",", "num_tags", "=", "logits", ".", "size", "(", ")", "\n", "\n", "values", "=", "self", ".", "loss", "(", "logits", ".", "view", "(", "-", "1", ",", "num_tags", ")", ",", "targets", ".", "view", "(", "-", "1", ")", ")", ".", "view_as", "(", "targets", ")", "\n", "masked_values", "=", "values", "*", "mask", ".", "float", "(", ")", "\n", "output", "[", "'loss'", "]", "=", "masked_values", ".", "sum", "(", ")", "\n", "\n", "", "if", "predict", ":", "\n", "# TODO: put decode code here, and evaluate on spans", "\n", "            ", "output", "[", "'sequence_lengths'", "]", "=", "sequence_lengths", "\n", "output", "[", "'mask'", "]", "=", "mask", "\n", "output", "[", "'scores'", "]", "=", "logits", "\n", "output", "[", "'targets'", "]", "=", "targets", "\n", "# _, predictions = torch.max(logits, 2)", "\n", "# output = []", "\n", "# for length, data in zip(sequence_lengths.tolist(), predictions.tolist()):", "\n", "#     output.append(data[:length])", "\n", "# print('pred:', output)", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.sequence_labeling.TaskNerSoftmax.create_metrics": [[72, 74], ["metrics.f1.MetricNERF1", "metrics.misc.MetricObjective"], "methods", ["None"], ["", "def", "create_metrics", "(", "self", ")", ":", "\n", "        ", "return", "[", "MetricNERF1", "(", "self", ".", "name", ",", "self", ".", "labels", ",", "verbose", "=", "self", ".", "verbose", ")", ",", "MetricObjective", "(", "self", ".", "name", ")", "]", "if", "self", ".", "enabled", "else", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.sequence_labeling.TaskNerMulti.__init__": [[78, 89], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "labels.tolist", "config.get", "config.get", "print", "len"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "dim_input", ",", "labels", ",", "config", ")", ":", "\n", "        ", "super", "(", "TaskNerMulti", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "dim_input", ",", "labels", ".", "size", ")", "\n", "self", ".", "loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", "reduce", "=", "False", ")", "\n", "self", ".", "labels", "=", "labels", ".", "tolist", "(", ")", "\n", "W0", "=", "config", ".", "get", "(", "'weight'", ",", "1.0", ")", "\n", "self", ".", "weight", "=", "W0", "/", "len", "(", "self", ".", "labels", ")", "if", "'normalize'", "in", "config", "else", "W0", "\n", "self", ".", "enabled", "=", "config", "[", "'enabled'", "]", "\n", "self", ".", "verbose", "=", "config", ".", "get", "(", "'verbose'", ",", "True", ")", "\n", "print", "(", "\"Task {}: enabled={} weight={}\"", ".", "format", "(", "self", ".", "name", ",", "self", ".", "enabled", ",", "self", ".", "weight", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.sequence_labeling.TaskNerMulti.set_weight": [[90, 93], ["print", "len"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "set_weight", "(", "self", ",", "W0", ")", ":", "\n", "        ", "self", ".", "weight", "=", "W0", "/", "len", "(", "self", ".", "labels", ")", "\n", "print", "(", "\"Task {} weight: {}\"", ".", "format", "(", "self", ".", "name", ",", "self", ".", "weight", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.sequence_labeling.TaskNerMulti.forward": [[94, 112], ["sequence_labeling.TaskNerMulti.linear", "sequence_labeling.TaskNerMulti.size", "sequence_labeling.TaskNerMulti.loss().view_as", "losses.sum.sum.sum", "metrics.f1.decode_multiner", "metrics.f1.decode_multiner", "mask.float", "ner_masked_losses.sum", "sequence_labeling.TaskNerMulti.loss", "sequence_labeling.TaskNerMulti.view", "targets.view"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.decode_multiner", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.decode_multiner"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ",", "sequence_lengths", ",", "mask", ",", "predict", "=", "False", ")", ":", "\n", "        ", "output", "=", "{", "}", "\n", "\n", "logits", "=", "self", ".", "linear", "(", "inputs", ")", "\n", "\n", "if", "targets", "is", "not", "None", ":", "\n", "            ", "num_tags", "=", "logits", ".", "size", "(", "2", ")", "\n", "\n", "losses", "=", "self", ".", "loss", "(", "logits", ".", "view", "(", "-", "1", ",", "num_tags", ")", ",", "targets", ".", "view", "(", "-", "1", ",", "num_tags", ")", ")", ".", "view_as", "(", "targets", ")", "\n", "losses", "=", "losses", ".", "sum", "(", "-", "1", ")", "\n", "ner_masked_losses", "=", "losses", "*", "mask", ".", "float", "(", ")", "\n", "output", "[", "'loss'", "]", "=", "self", ".", "weight", "*", "ner_masked_losses", ".", "sum", "(", ")", "\n", "\n", "", "if", "predict", ":", "\n", "            ", "output", "[", "'pred'", "]", "=", "decode_multiner", "(", "logits", ",", "sequence_lengths", ",", "self", ".", "labels", ")", "\n", "output", "[", "'gold'", "]", "=", "decode_multiner", "(", "targets", ",", "sequence_lengths", ",", "self", ".", "labels", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.sequence_labeling.TaskNerMulti.create_metrics": [[124, 127], ["metrics.f1.MetricSpanNER", "metrics.misc.MetricObjective"], "methods", ["None"], ["", "def", "create_metrics", "(", "self", ")", ":", "\n", "# return [MetricMultiNERF1(self.name, self.labels), MetricObjective(self.name)]  if self.enabled else []", "\n", "        ", "return", "[", "MetricSpanNER", "(", "self", ".", "name", ",", "bio_labels", "=", "self", ".", "labels", ",", "verbose", "=", "self", ".", "verbose", ")", ",", "MetricObjective", "(", "self", ".", "name", ")", "]", "if", "self", ".", "enabled", "else", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.sequence_labeling.TaskNerRecursive.__init__": [[161, 170], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "labels.tolist", "print", "config.get", "len"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "dim_input", ",", "labels", ",", "config", ")", ":", "\n", "        ", "super", "(", "TaskNerRecursive", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "dim_input", ",", "labels", ".", "size", ")", "\n", "self", ".", "loss", "=", "nn", ".", "CrossEntropyLoss", "(", "reduce", "=", "False", ")", "\n", "self", ".", "labels", "=", "labels", ".", "tolist", "(", ")", "\n", "self", ".", "weight", "=", "config", ".", "get", "(", "'weight'", ",", "1.0", ")", "/", "len", "(", "self", ".", "labels", ")", "\n", "self", ".", "enabled", "=", "config", "[", "'enabled'", "]", "\n", "print", "(", "\"TaskNerRecursive {}: enabled={} weight={}\"", ".", "format", "(", "self", ".", "name", ",", "self", ".", "enabled", ",", "self", ".", "weight", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.sequence_labeling.TaskNerRecursive.forward": [[171, 194], ["sequence_labeling.TaskNerRecursive.linear", "sequence_labeling.decode_recursive", "sequence_labeling.decode_recursive", "sequence_labeling.TaskNerRecursive.size", "sequence_labeling.TaskNerRecursive.loss().view_as", "masked_values.sum", "mask.float", "sequence_labeling.TaskNerRecursive.max", "sequence_labeling.TaskNerRecursive.loss", "sequence_labeling.TaskNerRecursive.view", "targets.view"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.sequence_labeling.decode_recursive", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.sequence_labeling.decode_recursive"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ",", "sequence_lengths", ",", "mask", ",", "predict", "=", "False", ")", ":", "\n", "        ", "output", "=", "{", "}", "\n", "\n", "logits", "=", "self", ".", "linear", "(", "inputs", ")", "\n", "\n", "if", "targets", "is", "not", "None", ":", "\n", "            ", "batch_size", ",", "sequence_length", ",", "num_tags", "=", "logits", ".", "size", "(", ")", "\n", "\n", "values", "=", "self", ".", "loss", "(", "logits", ".", "view", "(", "-", "1", ",", "num_tags", ")", ",", "targets", ".", "view", "(", "-", "1", ")", ")", ".", "view_as", "(", "targets", ")", "\n", "masked_values", "=", "values", "*", "mask", ".", "float", "(", ")", "\n", "output", "[", "'loss'", "]", "=", "masked_values", ".", "sum", "(", ")", "\n", "\n", "", "pred_spans", "=", "decode_recursive", "(", "logits", ".", "max", "(", "dim", "=", "-", "1", ")", "[", "1", "]", ",", "sequence_lengths", ",", "self", ".", "labels", ")", "\n", "gold_spans", "=", "decode_recursive", "(", "targets", ",", "sequence_lengths", ",", "self", ".", "labels", ")", "\n", "\n", "output", "[", "'pred'", "]", "=", "[", "[", "(", "b", ",", "e", ",", "'other'", ")", "for", "b", ",", "e", "in", "spans", "]", "for", "spans", "in", "pred_spans", "]", "\n", "output", "[", "'gold'", "]", "=", "[", "[", "(", "b", ",", "e", ",", "'other'", ")", "for", "b", ",", "e", "in", "spans", "]", "for", "spans", "in", "gold_spans", "]", "\n", "\n", "# if predict:", "\n", "#     output['pred'] = decode_multiner(logits, sequence_lengths, self.labels)", "\n", "#     output['gold'] = decode_multiner(targets, sequence_lengths, self.labels)", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.sequence_labeling.TaskNerRecursive.create_metrics": [[195, 199], ["metrics.misc.MetricObjective"], "methods", ["None"], ["", "def", "create_metrics", "(", "self", ")", ":", "\n", "# return [MetricMultiNERF1(self.name, self.labels), MetricObjective(self.name)]  if self.enabled else []", "\n", "# MetricSpanNER(self.name, bio_labels=self.labels),", "\n", "        ", "return", "[", "MetricObjective", "(", "self", ".", "name", ")", "]", "if", "self", ".", "enabled", "else", "[", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.sequence_labeling.decode_naive": [[129, 152], ["enumerate", "output.append", "output.append", "len", "output.append"], "function", ["None"], ["", "", "def", "decode_naive", "(", "sequence", ")", ":", "\n", "    ", "output", "=", "[", "]", "\n", "span_begin", "=", "None", "\n", "for", "pos", ",", "label", "in", "enumerate", "(", "sequence", ")", ":", "\n", "        ", "if", "label", "==", "'B'", ":", "\n", "            ", "if", "span_begin", "is", "not", "None", ":", "\n", "                ", "output", ".", "append", "(", "(", "span_begin", ",", "pos", ")", ")", "\n", "", "span_begin", "=", "pos", "\n", "", "elif", "label", "==", "'I'", ":", "\n", "            ", "if", "span_begin", "is", "None", ":", "\n", "                ", "span_begin", "=", "pos", "\n", "", "", "elif", "label", "==", "'O'", ":", "\n", "            ", "if", "span_begin", "is", "not", "None", ":", "\n", "                ", "output", ".", "append", "(", "(", "span_begin", ",", "pos", ")", ")", "\n", "", "span_begin", "=", "None", "\n", "", "else", ":", "\n", "# do as if it is an I", "\n", "            ", "if", "span_begin", "is", "None", ":", "\n", "                ", "span_begin", "=", "pos", "\n", "\n", "", "", "", "if", "span_begin", "is", "not", "None", ":", "\n", "        ", "output", ".", "append", "(", "(", "span_begin", ",", "len", "(", "sequence", ")", ")", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.sequence_labeling.decode_recursive": [[153, 158], ["sequence_labeling.decode_naive", "enumerate", "sequence_lengths.tolist"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.sequence_labeling.decode_naive", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist"], ["", "def", "decode_recursive", "(", "indices", ",", "sequence_lengths", ",", "labels", ")", ":", "\n", "    ", "predictions", "=", "[", "indices", "[", "b", ",", "0", ":", "length", "]", "for", "b", ",", "length", "in", "enumerate", "(", "sequence_lengths", ".", "tolist", "(", ")", ")", "]", "\n", "predictions", "=", "[", "[", "labels", "[", "l", "]", "for", "l", "in", "prediction", "]", "for", "prediction", "in", "predictions", "]", "\n", "spans", "=", "[", "decode_naive", "(", "x", ")", "for", "x", "in", "predictions", "]", "\n", "return", "spans", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt.LossCorefLinkerMTT.__init__": [[711, 739], ["torch.Module.__init__", "config.get", "coreflinker_mtt.LossCorefLinkerMTT.entity_dictionary.tolist", "entity_dictionary.lookup"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup"], ["    ", "def", "__init__", "(", "self", ",", "link_task", ",", "coref_task", ",", "entity_dictionary", ",", "config", ",", "end_to_end", ")", ":", "\n", "        ", "super", "(", "LossCorefLinkerMTT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "enabled", "=", "config", "[", "'enabled'", "]", "\n", "self", ".", "coref_task", "=", "coref_task", "\n", "self", ".", "link_task", "=", "link_task", "\n", "self", ".", "entity_dictionary", "=", "entity_dictionary", "\n", "\n", "if", "self", ".", "enabled", ":", "\n", "            ", "self", ".", "labels", "=", "self", ".", "entity_dictionary", ".", "tolist", "(", ")", "\n", "self", ".", "unknown_dict", "=", "entity_dictionary", ".", "lookup", "(", "'###UNKNOWN###'", ")", "\n", "\n", "", "self", ".", "weight", "=", "config", ".", "get", "(", "'weight'", ",", "1.0", ")", "\n", "self", ".", "filter_singletons_with_pruner", "=", "config", "[", "'filter_singletons_with_pruner'", "]", "\n", "self", ".", "filter_singletons_with_ner", "=", "config", "[", "'filter_singletons_with_ner'", "]", "\n", "self", ".", "singletons", "=", "self", ".", "filter_singletons_with_pruner", "or", "self", ".", "filter_singletons_with_ner", "\n", "self", ".", "end_to_end", "=", "end_to_end", "\n", "self", ".", "float_precision", "=", "config", "[", "'float_precision'", "]", "\n", "self", ".", "multihead_nil", "=", "config", "[", "'multihead_nil'", "]", "\n", "\n", "if", "self", ".", "float_precision", "==", "'float64'", ":", "\n", "            ", "self", ".", "torch_float_precision", "=", "torch", ".", "float64", "\n", "", "else", ":", "\n", "            ", "self", ".", "torch_float_precision", "=", "torch", ".", "float32", "\n", "\n", "", "self", ".", "print_debugging", "=", "False", "\n", "if", "'print_debugging'", "in", "config", ":", "\n", "            ", "self", ".", "print_debugging", "=", "config", "[", "'print_debugging'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt.LossCorefLinkerMTT.forward": [[740, 1032], ["linker.get", "modules.misc.misc.batched_index_select", "modules.misc.misc.batched_index_select", "modules.misc.misc.batched_index_select().squeeze", "modules.misc.misc.batched_index_select.to", "modules.tasks.coreflinker.create_candidate_mask().float().to", "list", "list", "coreflinker_mtt.LossCorefLinkerMTT.entity_dictionary.lookup", "modules.misc.misc.batched_index_select.to.view", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "coreflinker_mtt.create_coreflinker_mtt_target_mask_multihead", "coreflinker_mtt.create_coreflinker_mtt_z_mask_indexed", "coreflinker_mtt.create_scores_mtt_pred", "coreflinker_mtt.get_mtt_loss", "modules.misc.misc.batched_index_select", "modules.misc.misc.batched_index_select", "modules.misc.misc.batched_index_select().squeeze", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.tensor.append", "torch.tensor.append", "list.append", "scores.double.double.double", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "torch.save", "torch.save", "torch.save", "torch.save", "pred_scores_mtt.double.double.double", "z_mask.double.double.double", "coreflinker_mtt.LossCorefLinkerMTT.entity_dictionary.lookup", "min", "time.time", "util.edmonds.mst_only_tree", "time.time", "enumerate", "list", "enumerate", "list", "enumerate", "coreflinker_mtt.decode_m2i_coreflinker_mtt", "modules.misc.misc.batched_index_select().squeeze.max().item", "modules.utils.misc.predict_scores_mtt", "coreflinker_mtt.predict_scores_coref_mtt", "modules.misc.misc.batched_index_select", "modules.tasks.coreflinker.create_candidate_mask().float", "list", "list", "list", "coreflinker_mtt.get_mtt_loss", "pred_masked_scores.min().item", "candidates[].unique", "candidate_ids.append", "list.append", "enumerate", "list.append", "modules.tasks.coreflinker.remove_disabled_spans", "modules.tasks.coreflinker.remove_disabled_spans_linking", "modules.tasks.coreflinker.remove_disabled_scores_coref", "modules.tasks.coreflinker.remove_disabled_scores_linking", "modules.tasks.coreflinker.remove_disabled_spans", "modules.tasks.coreflinker.remove_disabled_spans_linking", "modules.misc.misc.batched_index_select().squeeze.unsqueeze", "modules.misc.misc.batched_index_select", "coreflinker_mtt.LossCorefLinkerMTT.state_dict", "dict", "coreflinker_mtt.convert_coref_mtt", "modules.misc.misc.batched_index_select().squeeze.max", "modules.misc.misc.batched_index_select().squeeze.unsqueeze", "modules.tasks.coreflinker.create_candidate_mask", "pred_masked_scores.min", "coreflinker_mtt.m2i_to_clusters_linkercoref_mtt", "zip", "modules.tasks.coreflinker.convert_coref", "zip", "modules.misc.misc.batched_index_select.to.size", "link_dict_id.item", "link_id_to_coref_col_batch.items", "candidate_ids_b.size", "candidate_ids_b.size", "modules.tasks.coreflinker.m2i_to_clusters_linkercoref", "x.tolist"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.batched_index_select", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.batched_index_select", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt.create_coreflinker_mtt_target_mask_multihead", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt.create_coreflinker_mtt_z_mask_indexed", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt.create_scores_mtt_pred", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt.get_mtt_loss", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.batched_index_select", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.batched_index_select", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.edmonds.mst_only_tree", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt.decode_m2i_coreflinker_mtt", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.misc.predict_scores_mtt", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt.predict_scores_coref_mtt", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.batched_index_select", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt.get_mtt_loss", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coref.remove_disabled_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.remove_disabled_spans_linking", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.remove_disabled_scores_coref", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.remove_disabled_scores_linking", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coref.remove_disabled_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.remove_disabled_spans_linking", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.batched_index_select", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt.convert_coref_mtt", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.create_candidate_mask", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt.m2i_to_clusters_linkercoref_mtt", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.convert_coref", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.m2i_to_clusters_linkercoref", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist"], ["", "", "def", "forward", "(", "self", ",", "scores", ",", "gold_m2i", ",", "filtered_spans", ",", "gold_spans", ",", "linker", ",", "\n", "predict", "=", "False", ",", "pruner_spans", "=", "None", ",", "ner_spans", "=", "None", ",", "api_call", "=", "False", ")", ":", "\n", "        ", "output", "=", "{", "}", "\n", "output_coref", "=", "{", "}", "\n", "output_linking", "=", "{", "}", "\n", "\n", "if", "self", ".", "enabled", "and", "scores", "is", "not", "None", ":", "\n", "# pred_spans = filtered_spans['spans']", "\n", "\n", "            ", "linker_candidates", "=", "linker", "[", "'candidates'", "]", "\n", "candidate_lengths", "=", "linker", "[", "'candidate_lengths'", "]", "\n", "targets", "=", "linker", ".", "get", "(", "'targets'", ")", "\n", "linker_candidates", "=", "batched_index_select", "(", "linker_candidates", ",", "filtered_spans", "[", "'prune_indices'", "]", ")", "\n", "targets", "=", "batched_index_select", "(", "targets", ",", "filtered_spans", "[", "'prune_indices'", "]", ")", "\n", "candidate_lengths", "=", "batched_index_select", "(", "candidate_lengths", ".", "unsqueeze", "(", "-", "1", ")", ",", "\n", "filtered_spans", "[", "'prune_indices'", "]", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "if", "self", ".", "end_to_end", ":", "\n", "# if it is end-to-end, we only select the candidates pruned by pruner in order to avoid", "\n", "#   using too much memory", "\n", "                ", "pred_spans_idx", "=", "filtered_spans", "[", "'prune_indices'", "]", "\n", "", "else", ":", "\n", "                ", "pred_spans_idx", "=", "filtered_spans", "[", "'reindex_wrt_gold'", "]", "\n", "linker_candidates", "=", "batched_index_select", "(", "linker_candidates", ",", "pred_spans_idx", ")", "\n", "targets", "=", "batched_index_select", "(", "targets", ",", "pred_spans_idx", ")", "\n", "candidate_lengths", "=", "batched_index_select", "(", "candidate_lengths", ".", "unsqueeze", "(", "-", "1", ")", ",", "pred_spans_idx", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "", "candidates", "=", "linker_candidates", ".", "to", "(", "scores", ".", "device", ")", "# torch.Size([1, 9, 17])", "\n", "#", "\n", "# nill_id = self.entity_dictionary.lookup('NILL')", "\n", "#", "\n", "linker_mask", "=", "create_candidate_mask", "(", "candidates", ".", "size", "(", "-", "1", ")", ",", "candidate_lengths", ")", ".", "float", "(", ")", ".", "to", "(", "scores", ".", "device", ")", "\n", "\n", "unique_links_batches", "=", "list", "(", ")", "\n", "unique_links_lengths", "=", "list", "(", ")", "\n", "nill_id", "=", "self", ".", "entity_dictionary", ".", "lookup", "(", "'NILL'", ")", "\n", "for", "content_batch", "in", "candidates", ".", "view", "(", "candidates", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ":", "\n", "                ", "unique_batch_content", "=", "torch", ".", "unique", "(", "content_batch", ")", "\n", "unique_batch_content", "=", "unique_batch_content", "[", "unique_batch_content", "!=", "self", ".", "unknown_dict", "]", "\n", "unique_batch_content", "=", "unique_batch_content", "[", "unique_batch_content", "!=", "nill_id", "]", "\n", "unique_links_lengths", ".", "append", "(", "unique_batch_content", ".", "shape", "[", "0", "]", ")", "\n", "unique_links_batches", ".", "append", "(", "unique_batch_content", ")", "\n", "", "unique_links", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pad_sequence", "(", "unique_links_batches", ",", "batch_first", "=", "True", ")", "\n", "unique_links_lengths", "=", "torch", ".", "tensor", "(", "unique_links_lengths", ",", "dtype", "=", "torch", ".", "int32", ",", "device", "=", "settings", ".", "device", ")", "\n", "\n", "# targets = batched_index_select(targets, pred_spans_idx)", "\n", "linker_target", "=", "targets", "*", "linker_mask", "\n", "\n", "pred_spans", "=", "filtered_spans", "[", "'spans'", "]", "\n", "targets_mask", ",", "target_mask_lengths", ",", "batched_multiheads", "=", "create_coreflinker_mtt_target_mask_multihead", "(", "pred_spans", ",", "gold_spans", ",", "gold_m2i", ",", "linker_target", ",", "\n", "candidates", ",", "unique_links", ",", "unique_links_lengths", ",", "\n", "use_multihead", "=", "self", ".", "multihead_nil", ",", "\n", "torch_float_precision", "=", "self", ".", "torch_float_precision", ")", "\n", "\n", "z_mask", ",", "z_mask_lengths", "=", "create_coreflinker_mtt_z_mask_indexed", "(", "pred_spans", ",", "gold_spans", ",", "gold_m2i", ",", "\n", "linker_target", ",", "\n", "candidates", ",", "\n", "candidate_lengths", "=", "candidate_lengths", ",", "\n", "unique_links", "=", "unique_links", ",", "\n", "unique_links_lengths", "=", "unique_links_lengths", ",", "\n", "unknown_id", "=", "self", ".", "unknown_dict", ")", "\n", "if", "self", ".", "float_precision", "==", "'float64'", ":", "\n", "                ", "scores", "=", "scores", ".", "double", "(", ")", "\n", "\n", "# scores to mtt matrix,", "\n", "# TODO: implement this in batched way, returning also the mask_lengths", "\n", "#  as in create_coreflinker_mtt_target_mask and create_coreflinker_mtt_z_mask", "\n", "", "pred_scores_mtt", "=", "create_scores_mtt_pred", "(", "scores", ",", "unique_links", ",", "candidates", ",", "candidate_lengths", ",", "\n", "torch_float_precision", "=", "self", ".", "torch_float_precision", ")", "\n", "\n", "# want to be sure that the dimensions match to the ones expected, if no match, then print the details of the problem", "\n", "expected_dim", "=", "candidates", ".", "shape", "[", "-", "2", "]", "+", "1", "+", "unique_links", ".", "shape", "[", "-", "1", "]", "\n", "if", "expected_dim", "!=", "pred_scores_mtt", ".", "shape", "[", "-", "1", "]", "or", "expected_dim", "!=", "pred_scores_mtt", ".", "shape", "[", "-", "2", "]", "or", "targets_mask", ".", "shape", "[", "-", "1", "]", "!=", "pred_scores_mtt", ".", "shape", "[", "-", "1", "]", "or", "targets_mask", ".", "shape", "[", "-", "2", "]", "!=", "pred_scores_mtt", ".", "shape", "[", "-", "2", "]", ":", "\n", "                ", "print", "(", "'!!!ERROR IN DIMENSIONS!!! SOMETHING GOT WRONG, printing the details of hyperparameters'", ")", "\n", "print", "(", "'the expected dim is: '", ",", "expected_dim", ")", "\n", "print", "(", "'the shape in pred_scores_mtt is: '", ",", "pred_scores_mtt", ".", "shape", ")", "\n", "print", "(", "'target mask.shape: '", ",", "targets_mask", ".", "shape", ")", "\n", "print", "(", "'scores.shape: '", ",", "scores", ".", "shape", ")", "\n", "print", "(", "'unique_links.shape: '", ",", "unique_links", ".", "shape", ")", "\n", "print", "(", "'unique_links content: '", ",", "list", "(", "unique_links", "[", "0", "]", ")", ")", "\n", "print", "(", "'candidates.shape: '", ",", "candidates", ".", "shape", ")", "\n", "print", "(", "'candidates content: '", ",", "list", "(", "candidates", "[", "0", "]", ")", ")", "\n", "print", "(", "'candidate_lengths.shape: '", ",", "candidate_lengths", ".", "shape", ")", "\n", "print", "(", "'candidate_lengths content: '", ",", "list", "(", "candidate_lengths", ")", ")", "\n", "\n", "# here serializes the model and other objects parameters to the function", "\n", "torch", ".", "save", "(", "{", "'scores'", ":", "scores", ",", "\n", "'gold_m2i'", ":", "gold_m2i", ",", "\n", "'filtered_spans'", ":", "filtered_spans", ",", "\n", "'gold_spans'", ":", "gold_spans", ",", "\n", "'linker'", ":", "linker", ",", "\n", "'predict'", ":", "predict", ",", "\n", "'pruner_spans'", ":", "pruner_spans", ",", "\n", "'ner_spans'", ":", "ner_spans", ",", "\n", "'api_call'", ":", "api_call", ",", "\n", "'model_state'", ":", "self", ".", "state_dict", "(", ")", "}", ",", "'failed_model_scores.bin'", ")", "\n", "\n", "", "if", "self", ".", "float_precision", "==", "'float64'", ":", "\n", "# targets_mask = targets_mask.double()", "\n", "                ", "pred_scores_mtt", "=", "pred_scores_mtt", ".", "double", "(", ")", "\n", "z_mask", "=", "z_mask", ".", "double", "(", ")", "\n", "\n", "", "tot_loss", "=", "get_mtt_loss", "(", "targets_mask", "=", "targets_mask", ",", "pred_scores_mtt", "=", "pred_scores_mtt", ",", "\n", "z_mask", "=", "z_mask", ",", "torch_float_precision", "=", "self", ".", "torch_float_precision", ",", "\n", "print_debugging", "=", "self", ".", "print_debugging", ")", "\n", "\n", "if", "self", ".", "multihead_nil", ":", "\n", "# TODO: instead of batched_multiheads[0], implement a batched version", "\n", "                ", "for", "curr_multihead", "in", "batched_multiheads", "[", "0", "]", ":", "\n", "                    ", "curr_targets_mask", "=", "curr_multihead", "[", "'mtt_targets'", "]", "\n", "indices", "=", "curr_multihead", "[", "'indices'", "]", "\n", "curr_pred_scores_mtt", "=", "pred_scores_mtt", "[", "0", ",", "indices", ",", ":", "]", "[", ":", ",", "indices", "]", "\n", "curr_z_mask", "=", "z_mask", "[", "0", ",", "indices", ",", ":", "]", "[", ":", ",", "indices", "]", "\n", "curr_loss", "=", "get_mtt_loss", "(", "targets_mask", "=", "curr_targets_mask", ",", "pred_scores_mtt", "=", "curr_pred_scores_mtt", ",", "\n", "z_mask", "=", "curr_z_mask", ",", "torch_float_precision", "=", "self", ".", "torch_float_precision", ",", "\n", "# for now do not print multihead matrices anyway", "\n", "print_debugging", "=", "False", ")", "\n", "if", "curr_loss", "is", "not", "None", ":", "\n", "                        ", "if", "tot_loss", "is", "not", "None", ":", "\n", "                            ", "tot_loss", "=", "tot_loss", "+", "curr_loss", "\n", "", "else", ":", "\n", "                            ", "tot_loss", "=", "curr_loss", "\n", "# print('WIP: working on this one')", "\n", "", "", "", "", "if", "tot_loss", "is", "None", ":", "\n", "                ", "tot_loss", "=", "0", "\n", "\n", "", "output", "[", "'loss'", "]", "=", "tot_loss", "\n", "output_coref", "[", "'loss'", "]", "=", "tot_loss", "\n", "output_linking", "[", "'loss'", "]", "=", "tot_loss", "\n", "\n", "if", "predict", ":", "\n", "                ", "nill_id", "=", "self", ".", "entity_dictionary", ".", "lookup", "(", "'NILL'", ")", "\n", "pred_masked_scores", "=", "z_mask", "*", "pred_scores_mtt", "\n", "\n", "# the inverse of mask receives a very small score (less than the current minimum)", "\n", "z_mask_inverse", "=", "1.0", "-", "z_mask", "\n", "min_pred_mask_scores", "=", "min", "(", "pred_masked_scores", ".", "min", "(", ")", ".", "item", "(", ")", ",", "0.0", ")", "\n", "pred_masked_scores", "=", "pred_masked_scores", "+", "(", "z_mask_inverse", ")", "*", "(", "min_pred_mask_scores", "-", "999999", ")", "\n", "\n", "# print('executing edmonds with ', int(z_mask.sum().item()), ' edges and ', z_mask.shape[-1], ' nodes: ',", "\n", "#       unique_links.shape[-1], ' unique links and ', z_mask.shape[-1] - unique_links.shape[-1] - 1, ' spans')", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "pred_tree_mst", "=", "mst_only_tree", "(", "pred_masked_scores", ",", "target_mask_lengths", ",", "z_mask", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "# print('done with edmonds in ', (end - start), ' seconds')", "\n", "# TODO (24/02/2021)!!! no need for candidate_ids, it can just be replaced with unique_links, right????", "\n", "candidate_ids", "=", "[", "]", "\n", "for", "curr_cand_batch", ",", "_", "in", "enumerate", "(", "candidates", ")", ":", "\n", "                    ", "unique_curr_batch", "=", "candidates", "[", "curr_cand_batch", "]", ".", "unique", "(", "sorted", "=", "True", ")", "\n", "unique_curr_batch", "=", "unique_curr_batch", "[", "unique_curr_batch", "!=", "nill_id", "]", "\n", "# (16/10/2020) - 0 is used for padding, so remove it", "\n", "unique_curr_batch", "=", "unique_curr_batch", "[", "unique_curr_batch", "!=", "self", ".", "unknown_dict", "]", "\n", "candidate_ids", ".", "append", "(", "unique_curr_batch", ")", "\n", "\n", "", "link_id_to_coref_col", "=", "list", "(", ")", "\n", "for", "batch_id", ",", "candidate_ids_batch", "in", "enumerate", "(", "candidate_ids", ")", ":", "\n", "                    ", "link_id_to_coref_col", ".", "append", "(", "dict", "(", ")", ")", "\n", "for", "matrix_idx_link", ",", "link_dict_id", "in", "enumerate", "(", "candidate_ids_batch", ")", ":", "\n", "# + 1 because the first one is root", "\n", "                        ", "link_id_to_coref_col", "[", "batch_id", "]", "[", "link_dict_id", ".", "item", "(", ")", "]", "=", "matrix_idx_link", "+", "1", "\n", "\n", "", "", "coref_col_to_link_id", "=", "list", "(", ")", "\n", "for", "batch_id", ",", "link_id_to_coref_col_batch", "in", "enumerate", "(", "link_id_to_coref_col", ")", ":", "\n", "                    ", "coref_col_to_link_id", ".", "append", "(", "{", "v", ":", "k", "for", "k", ",", "v", "in", "link_id_to_coref_col_batch", ".", "items", "(", ")", "}", ")", "\n", "\n", "", "decoded_m2i_coref_linker", ",", "span_to_pointer_detail_info", "=", "decode_m2i_coreflinker_mtt", "(", "pred_masked_scores", ",", "\n", "pred_tree_mst", ",", "\n", "# lengths_coref, lengths_linker, # these two are probably not needed", "\n", "candidate_ids", ",", "\n", "link_id_to_coref_col", "=", "link_id_to_coref_col", ",", "\n", "# coref_col_to_link_id=coref_col_to_link_id,", "\n", "dic", "=", "self", ".", "entity_dictionary", ",", "\n", "unique_links", "=", "unique_links", ",", "\n", "unique_links_lengths", "=", "unique_links_lengths", ",", "\n", "pred_spans", "=", "pred_spans", ")", "\n", "# print('THIS PRINT HAS TO BE DELETED!')", "\n", "# logits.shape --> torch.Size([1, 14, 30])", "\n", "# lengths_coref --> tensor([14])", "\n", "# lengths_linker --> tensor([16])", "\n", "# linker_candidates.shape --> torch.Size([1, 14, 16])", "\n", "# candidate_ids[0].shape --> torch.Size([49])", "\n", "# link_id_to_coref_col --> <class 'list'>: [{2237: 0, 2552: 1, 10719: 2, 10720: 3, 11729: 4, 11734: 5, 11735: 6, 11736: 7, 11737: 8, 11738: 9, 11739: 10, 11740: 11, 11741: 12, 11742: 13, 11743: 14, 11744: 15, 11745: 16, 11746: 17, 11747: 18, 11748: 19, 14221: 20, 25253: 21, 34142: 22, 34210: 23, 34211: 24, 34213: 25, 34214: 26, 34215: 27, 34216: 28, 34217: 29, 34218: 30, 34219: 31, 34220: 32, 118110: 33, 118129: 34, 118130: 35, 118131: 36, 118132: 37, 118133: 38, 118134: 39, 118135: 40, 118136: 41, 118137: 42, 118138: 43, 118139: 44, 118140: 45, 118141: 46, 118142: 47, 118143: 48}]", "\n", "# coref_col_to_link_id --> <class 'list'>: [{0: 2237, 1: 2552, 2: 10719, 3: 10720, 4: 11729, 5: 11734, 6: 11735, 7: 11736, 8: 11737, 9: 11738, 10: 11739, 11: 11740, 12: 11741, 13: 11742, 14: 11743, 15: 11744, 16: 11745, 17: 11746, 18: 11747, 19: 11748, 20: 14221, 21: 25253, 22: 34142, 23: 34210, 24: 34211, 25: 34213, 26: 34214, 27: 34215, 28: 34216, 29: 34217, 30: 34218, 31: 34219, 32: 34220, 33: 118110, 34: 118129, 35: 118130, 36: 118131, 37: 118132, 38: 118133, 39: 118134, 40: 118135, 41: 118136, 42: 118137, 43: 118138, 44: 118139, 45: 118140, 46: 118141, 47: 118142, 48: 118143}]", "\n", "# pred_spans --> <class 'list'>: [[(3, 4), (3, 7), (5, 6), (5, 7), (41, 43), (45, 47), (49, 49), (49, 50), (50, 50), (50, 52), (51, 52), (51, 54), (53, 54), (57, 57)]]", "\n", "# scores.shape --> torch.Size([1, 14, 30])", "\n", "\n", "# example of decoded_m2i_coref_linker:", "\n", "#   <class 'list'>: [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,", "\n", "#   23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,", "\n", "#   48, 49, 50, 51, 52, 53, 54, 5, 56, 57, 58, 59, 60, 61, 5]]", "\n", "#", "\n", "#", "\n", "# example of span_to_pointer_detail_info:", "\n", "#   <class 'list'>:", "\n", "#   [{(3, 4): {'coref_connection_type': 'mention_self', 'coref_connection_pointer': (3, 4), 'coref_connection_score': -0.0},", "\n", "#   (3, 7): {'coref_connection_type': 'mention_self', 'coref_connection_pointer': (3, 7), 'coref_connection_score': -0.0},", "\n", "#   (5, 6): {'coref_connection_type': 'mention_self', 'coref_connection_pointer': (5, 6), 'coref_connection_score': -0.0},", "\n", "#   (5, 7): {'coref_connection_type': 'mention_self', 'coref_connection_pointer': (5, 7), 'coref_connection_score': -0.0},", "\n", "#   (41, 43): {'coref_connection_type': 'mention_self', 'coref_connection_pointer': (41, 43), 'coref_connection_score': -0.0},", "\n", "#   (45, 47): {'coref_connection_type': 'mention_self', 'coref_connection_pointer': (45, 47), 'coref_connection_score': -0.0},", "\n", "#   (49, 49): {'coref_connection_type': 'link', 'coref_connection_pointer': 'Berlin'},", "\n", "#   (49, 50): {'coref_connection_type': 'mention_self', 'coref_connection_pointer': (49, 50), 'coref_connection_score': -0.0},", "\n", "#   (50, 50): {'coref_connection_type': 'mention_self', 'coref_connection_pointer': (50, 50), 'coref_connection_score': -0.0},", "\n", "#   (50, 52): {'coref_connection_type': 'mention_self', 'coref_connection_pointer': (50, 52), 'coref_connection_score': -0.0},", "\n", "#   (51, 52): {'coref_connection_type': 'mention_self', 'coref_connection_pointer': (51, 52), 'coref_connection_score': -0.0},", "\n", "#   (51, 54): {'coref_connection_type': 'mention_self', 'coref_connection_pointer': (51, 54), 'coref_connection_score': -0.0},", "\n", "#   (53, 54): {'coref_connection_type': 'mention_self', 'coref_connection_pointer': (53, 54), 'coref_connection_score': -0.0},", "\n", "#   (57, 57): {'coref_connection_type': 'link', 'coref_connection_pointer': 'Berlin'}}]", "\n", "\n", "# here gets the coref cluster spans only", "\n", "output_pred", "=", "[", "convert_coref_mtt", "(", "m2i_to_clusters_linkercoref_mtt", "(", "x", ",", "coref_col_to_link_id_b", ",", "\n", "self", ".", "entity_dictionary", ",", "\n", "candidate_ids_b", ".", "size", "(", "-", "1", ")", ")", ",", "\n", "y", ",", "number_candidates", "=", "candidate_ids_b", ".", "size", "(", "-", "1", ")", ",", "\n", "links_dictionary", "=", "self", ".", "entity_dictionary", ",", "\n", "coref_col_to_link_id", "=", "coref_col_to_link_id_b", ")", "\n", "for", "x", ",", "y", ",", "candidate_ids_b", ",", "coref_col_to_link_id_b", "in", "\n", "zip", "(", "decoded_m2i_coref_linker", ",", "pred_spans", ",", "candidate_ids", ",", "\n", "coref_col_to_link_id", ")", "]", "if", "scores", "is", "not", "None", "else", "[", "[", "]", "for", "_", "in", "pred_spans", "]", "\n", "\n", "output_coref", "[", "'pred'", "]", "=", "[", "out", "[", "0", "]", "for", "out", "in", "output_pred", "]", "\n", "output_coref", "[", "'pred_pointers'", "]", "=", "span_to_pointer_detail_info", "\n", "output_linking", "[", "'pred'", "]", "=", "[", "out", "[", "1", "]", "for", "out", "in", "output_pred", "]", "\n", "output_linking", "[", "'spans_with_link'", "]", "=", "[", "out", "[", "2", "]", "for", "out", "in", "output_pred", "]", "\n", "\n", "# this gives 1 if candidate list is empty, this why it is commented", "\n", "# max_nr_candidates = linker_candidates.size(-1)", "\n", "\n", "# this gives correct answer; this is why it is used instead of linker_candidates.size(-1)", "\n", "max_nr_candidates", "=", "candidate_lengths", ".", "max", "(", ")", ".", "item", "(", ")", "\n", "\n", "linker_spans", "=", "filtered_spans", "[", "'spans'", "]", "\n", "\n", "cols_to_ignore", "=", "0", "# in case we want to use the matrix itself to filter incorrect mentions", "\n", "\n", "# + 1 because also the link score to root is counted", "\n", "s", "=", "predict_scores_mtt", "(", "scores", "[", ":", ",", ":", ",", "cols_to_ignore", ":", "max_nr_candidates", "+", "1", "]", ",", "linker_spans", ",", "\n", "linker_candidates", ",", "candidate_lengths", ",", "self", ".", "entity_dictionary", ")", "\n", "\n", "# TODO!!! - WHERE THESE 'scores' ARE USED??? ARE THEY REALLY NEEDED???", "\n", "output_coref", "[", "'scores'", "]", "=", "predict_scores_coref_mtt", "(", "scores", "[", ":", ",", ":", ",", "max_nr_candidates", "+", "cols_to_ignore", "+", "1", ":", "]", ",", "\n", "pred_spans", "=", "pred_spans", ")", "\n", "\n", "output_linking", "[", "'scores'", "]", "=", "s", "\n", "\n", "if", "not", "api_call", ":", "\n", "                    ", "output_coref", "[", "'gold'", "]", "=", "[", "convert_coref", "(", "m2i_to_clusters_linkercoref", "(", "x", ".", "tolist", "(", ")", ")", ",", "y", ",", "\n", "number_candidates", "=", "0", ",", "\n", "links_dictionary", "=", "self", ".", "entity_dictionary", ")", "[", "0", "]", "for", "x", ",", "y", "in", "\n", "zip", "(", "gold_m2i", ",", "gold_spans", ")", "]", "\n", "\n", "# TODO - number_candidates!!!", "\n", "output_linking", "[", "'gold'", "]", "=", "linker", "[", "'gold'", "]", "\n", "", "else", ":", "\n", "                    ", "output_coref", "[", "'gold'", "]", "=", "[", "None", "for", "_", "in", "gold_spans", "]", "\n", "output_linking", "[", "'gold'", "]", "=", "[", "None", "for", "_", "in", "gold_spans", "]", "\n", "\n", "", "if", "self", ".", "filter_singletons_with_pruner", ":", "\n", "# this assumes that pruner is able to predict spans", "\n", "                    ", "output_coref", "[", "'pred'", "]", "=", "remove_disabled_spans", "(", "output_coref", "[", "'pred'", "]", ",", "pruner_spans", ")", "\n", "coref_flat", "=", "[", "{", "item", "for", "sublist", "in", "batch", "for", "item", "in", "sublist", "}", "for", "batch", "in", "output_coref", "[", "'pred'", "]", "]", "\n", "output_linking", "[", "'pred'", "]", "=", "remove_disabled_spans_linking", "(", "output_linking", "[", "'pred'", "]", ",", "coref_flat", ")", "\n", "output_coref", "[", "'scores'", "]", "=", "remove_disabled_scores_coref", "(", "output_coref", "[", "'scores'", "]", ",", "coref_flat", ")", "\n", "output_linking", "[", "'scores'", "]", "=", "remove_disabled_scores_linking", "(", "output_linking", "[", "'scores'", "]", ",", "coref_flat", ")", "\n", "\n", "", "if", "self", ".", "filter_singletons_with_ner", ":", "\n", "                    ", "output_coref", "[", "'pred'", "]", "=", "remove_disabled_spans", "(", "output_coref", "[", "'pred'", "]", ",", "ner_spans", ")", "\n", "output_linking", "[", "'pred'", "]", "=", "remove_disabled_spans_linking", "(", "output_linking", "[", "'pred'", "]", ",", "ner_spans", ")", "\n", "output_coref", "[", "'scores'", "]", "=", "None", "# TODO", "\n", "output_linking", "[", "'scores'", "]", "=", "None", "# TODO", "\n", "raise", "NotImplementedError", "# TODO!! first resolve the two previous TODOs!!! ,", "\n", "", "", "", "else", ":", "\n", "            ", "output", "[", "'loss'", "]", "=", "0.0", "\n", "output_coref", "[", "'loss'", "]", "=", "0.0", "\n", "output_coref", "[", "'pred'", "]", "=", "[", "None", "for", "x", "in", "gold_spans", "]", "\n", "output_coref", "[", "'pred_pointers'", "]", "=", "[", "None", "for", "x", "in", "gold_spans", "]", "\n", "output_coref", "[", "'gold'", "]", "=", "[", "None", "for", "x", "in", "gold_spans", "]", "\n", "output_coref", "[", "'scores'", "]", "=", "[", "None", "for", "x", "in", "gold_spans", "]", "\n", "\n", "# TODO: see well what have to add here for pred_linking and gold_linking", "\n", "output_linking", "[", "'pred'", "]", "=", "[", "None", "for", "x", "in", "gold_spans", "]", "\n", "output_linking", "[", "'gold'", "]", "=", "[", "None", "for", "x", "in", "gold_spans", "]", "\n", "output_linking", "[", "'loss'", "]", "=", "0.0", "\n", "output_linking", "[", "'scores'", "]", "=", "[", "None", "for", "x", "in", "gold_spans", "]", "\n", "\n", "# kzaporoj - None for the link part , not yet", "\n", "", "return", "output", "[", "'loss'", "]", ",", "output_linking", ",", "output_coref", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt.LossCorefLinkerMTT.create_metrics": [[1033, 1055], ["out.extend", "out.append", "out.append", "out.append", "out.extend", "metrics.coref.MetricCoref", "metrics.coref.MetricCoref", "metrics.coref.MetricCoref", "metrics.coref.MetricCorefAverage", "metrics.misc.MetricObjective", "metrics.corefx.MetricCorefExternal", "metrics.linker.MetricLinkerImproved", "metrics.linker.MetricLinkerImproved", "metrics.linker.MetricLinkerImproved", "metrics.linker.MetricLinkAccuracy", "metrics.linker.MetricLinkAccuracyNoCandidates", "metrics.misc.MetricObjective"], "methods", ["None"], ["", "def", "create_metrics", "(", "self", ")", ":", "\n", "        ", "out", "=", "[", "]", "\n", "if", "self", ".", "enabled", ":", "\n", "            ", "metrics", "=", "[", "\n", "MetricCoref", "(", "self", ".", "coref_task", ",", "'muc'", ",", "MetricCoref", ".", "muc", ")", ",", "\n", "MetricCoref", "(", "self", ".", "coref_task", ",", "'bcubed'", ",", "MetricCoref", ".", "b_cubed", ",", "verbose", "=", "False", ")", ",", "\n", "MetricCoref", "(", "self", ".", "coref_task", ",", "'ceafe'", ",", "MetricCoref", ".", "ceafe", ",", "verbose", "=", "False", ")", ",", "\n", "]", "\n", "\n", "out", ".", "extend", "(", "metrics", ")", "\n", "out", ".", "append", "(", "MetricCorefAverage", "(", "self", ".", "coref_task", ",", "'avg'", ",", "metrics", ")", ")", "\n", "out", ".", "append", "(", "MetricObjective", "(", "self", ".", "coref_task", ")", ")", "\n", "out", ".", "append", "(", "MetricCorefExternal", "(", "self", ".", "coref_task", ")", ")", "\n", "\n", "out", ".", "extend", "(", "[", "MetricLinkerImproved", "(", "self", ".", "link_task", ")", ",", "\n", "MetricLinkerImproved", "(", "self", ".", "link_task", ",", "'links'", ")", ",", "\n", "MetricLinkerImproved", "(", "self", ".", "link_task", ",", "'nills'", ")", ",", "\n", "MetricLinkAccuracy", "(", "self", ".", "link_task", ")", ",", "\n", "MetricLinkAccuracyNoCandidates", "(", "self", ".", "link_task", ")", ",", "\n", "MetricObjective", "(", "self", ".", "link_task", ")", "]", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt.TaskCorefMTT.__init__": [[1088, 1091], ["torch.Module.__init__", "modules.graph.create_graph"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.graph.create_graph"], ["    ", "def", "__init__", "(", "self", ",", "dim_input", ",", "config", ")", ":", "\n", "        ", "super", "(", "TaskCorefMTT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "module", "=", "create_graph", "(", "dim_input", ",", "1", ",", "config", "[", "'scorer'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt.TaskCorefMTT.forward": [[1092, 1102], ["coreflinker_mtt.TaskCorefMTT.module().squeeze().squeeze", "create_target_matrix().to", "coreflinker_mtt.logZ", "coreflinker_mtt.logZ", "coreflinker_mtt.TaskCorefMTT.max", "coreflinker_mtt.TaskCorefMTT.module().squeeze", "coreflinker_mtt.create_target_matrix", "coreflinker_mtt.TaskCorefMTT.module"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coref.logZ", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coref.logZ", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coref.create_target_matrix"], ["", "def", "forward", "(", "self", ",", "mentions", ",", "clusters", ")", ":", "\n", "        ", "scores", "=", "self", ".", "module", "(", "mentions", ")", ".", "squeeze", "(", "-", "1", ")", ".", "squeeze", "(", "0", ")", "\n", "targets", "=", "create_target_matrix", "(", "clusters", "[", "0", "]", ")", ".", "to", "(", "scores", ".", "device", ")", "\n", "\n", "scores", "=", "scores", "-", "scores", ".", "max", "(", ")", "\n", "\n", "g", "=", "logZ", "(", "scores", "+", "(", "1", "-", "targets", ")", "*", "-", "10000", ")", "\n", "z", "=", "logZ", "(", "scores", ")", "\n", "\n", "return", "z", "-", "g", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt.predict_scores_coref_mtt": [[26, 54], ["enumerate", "dict", "enumerate", "to_ret_scores.append", "enumerate", "batch_decoded[].append", "scores_batch[].item"], "function", ["None"], ["def", "predict_scores_coref_mtt", "(", "scores", ",", "pred_spans", ")", ":", "\n", "    ", "\"\"\"\n\n    :param scores: upper triangular matrix\n    :param linker:\n    :param labels:\n    :param no_nills:\n    :return: scores for all the previous spans such as in this short example:\n            [[{(1,1):[{'span':(1,1), 'score': 1.35}],\n                (2,2):[{'span':(1,1), 'score': 1.35},\n                        {'span':(2,2), 'score': 1.32}]}]]\n    \"\"\"", "\n", "to_ret_scores", "=", "[", "]", "\n", "for", "batch_idx", ",", "scores_batch", "in", "enumerate", "(", "scores", ")", ":", "\n", "# print('batch_idx is of ', batch_idx)", "\n", "# print('scores_batch is of ', scores_batch.shape)", "\n", "        ", "batch_decoded", "=", "dict", "(", ")", "\n", "spans_batch", "=", "pred_spans", "[", "batch_idx", "]", "\n", "for", "idx_span_base", ",", "curr_span_base", "in", "enumerate", "(", "spans_batch", ")", ":", "\n", "            ", "for", "idx_span_coref", ",", "curr_span_coref", "in", "enumerate", "(", "spans_batch", ")", ":", "\n", "                ", "if", "idx_span_coref", "<=", "idx_span_base", ":", "\n", "                    ", "if", "curr_span_base", "not", "in", "batch_decoded", ":", "\n", "                        ", "batch_decoded", "[", "curr_span_base", "]", "=", "[", "]", "\n", "", "batch_decoded", "[", "curr_span_base", "]", ".", "append", "(", "{", "'span'", ":", "curr_span_coref", ",", "\n", "'score'", ":", "scores_batch", "[", "idx_span_base", ",", "idx_span_coref", "]", ".", "item", "(", ")", "}", ")", "\n", "", "", "", "to_ret_scores", ".", "append", "(", "batch_decoded", ")", "\n", "\n", "", "return", "to_ret_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt.create_scores_mtt_pred": [[56, 123], ["scores[].transpose", "candidate_lengths.max().item", "scores[].transpose", "torch.zeros", "torch.zeros", "torch.max", "torch.max", "torch.cat", "torch.cat", "torch.zeros_like", "torch.zeros_like", "scrs_links_to_spans.unsqueeze().expand", "torch.ones", "torch.ones", "torch.matmul().squeeze", "torch.matmul().squeeze", "scrs_mtt_links_to_spans.transpose.transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "candidate_lengths.max", "candidates.unsqueeze", "mix_cross.size", "scrs_links_to_spans.unsqueeze", "torch.matmul", "torch.matmul"], "function", ["None"], ["", "def", "create_scores_mtt_pred", "(", "scores", ",", "unique_links", ",", "candidates", ",", "candidate_lengths", ",", "torch_float_precision", ")", ":", "\n", "    ", "\"\"\"\n\n    :param scores:\n    :return:\n\n    \"\"\"", "\n", "# resources to help: https://discuss.pytorch.org/t/find-indices-of-one-tensor-in-another/84889", "\n", "# >>> a = torch.arange(10)", "\n", "# >>> b = torch.arange(2, 7)[torch.randperm(5)]", "\n", "# print((b.unsqueeze(1) == a).nonzero())", "\n", "\n", "# print('the passed scores to create_scores_mtt_pred is: ', scores)", "\n", "# scores.shape: [1,14,31]", "\n", "# candidates.shape: [1,14,16]", "\n", "# unique_links.shape: [1,30]", "\n", "\n", "# here broadcasts candidate ids to unique ids in unique_links", "\n", "# mix_cross.shape: [batch, spans, # candidates, # unique_candidates] --> [1, 14, 16, 30]", "\n", "# mix_cross is a matrix that maps each of the candidates (dim 2) for each of the spans (dim 1) to the respective", "\n", "# position in unique_links (dim 3). dim 0 is the batch.", "\n", "scrs_mtt_root_to_spans", "=", "scores", "[", ":", ",", ":", ",", ":", "1", "]", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", "\n", "cand_max_length", "=", "candidate_lengths", ".", "max", "(", ")", ".", "item", "(", ")", "\n", "candidates", "=", "candidates", "[", ":", ",", ":", ",", ":", "cand_max_length", "]", "\n", "scrs_mtt_spans", "=", "scores", "[", ":", ",", ":", ",", "cand_max_length", "+", "1", ":", "]", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", "\n", "\n", "if", "unique_links", ".", "shape", "[", "-", "1", "]", ">", "0", ":", "\n", "        ", "mix_cross", ":", "torch", ".", "Tensor", "=", "(", "candidates", ".", "unsqueeze", "(", "-", "1", ")", "==", "unique_links", ")", "\n", "\n", "scrs_mtt_expd_links_to_spans", "=", "torch", ".", "zeros_like", "(", "mix_cross", ",", "device", "=", "settings", ".", "device", ",", "dtype", "=", "torch_float_precision", ")", "\n", "scrs_links_to_spans", "=", "scores", "[", ":", ",", ":", ",", "1", ":", "candidates", ".", "shape", "[", "-", "1", "]", "+", "1", "]", "\n", "scrs_expd_links_to_spans", "=", "scrs_links_to_spans", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "mix_cross", ".", "size", "(", ")", ")", "\n", "scrs_mtt_expd_links_to_spans", "[", "mix_cross", "]", "=", "scrs_expd_links_to_spans", "[", "mix_cross", "]", "\n", "\n", "ones_multiplier", "=", "torch", ".", "ones", "(", "1", ",", "mix_cross", ".", "shape", "[", "2", "]", ",", "dtype", "=", "torch_float_precision", ",", "device", "=", "settings", ".", "device", ")", "\n", "scrs_mtt_links_to_spans", "=", "torch", ".", "matmul", "(", "ones_multiplier", ",", "scrs_mtt_expd_links_to_spans", ")", ".", "squeeze", "(", "-", "2", ")", "\n", "scrs_mtt_links_to_spans", "=", "scrs_mtt_links_to_spans", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", "\n", "\n", "# scrs_mtt_links_to_spans --> block of scores from entity links to spans", "\n", "# TODO: not sure if this transpose is necessary since it is square", "\n", "# commented because in case of 0 candidates, it fails", "\n", "# scrs_mtt_spans = scores[:, :, candidates.shape[-1] + 1:].transpose(-2, -1)", "\n", "# scrs_mtt_spans --> bloc of scores between spans", "\n", "\n", "# scrs_mtt_root_to_spans --> bloc of scores from root to spans", "\n", "\n", "# scores for predicted block (the rightmost)", "\n", "scrs_mtt_pred_bloc", "=", "torch", ".", "cat", "(", "[", "scrs_mtt_root_to_spans", ",", "scrs_mtt_links_to_spans", ",", "scrs_mtt_spans", "]", ",", "dim", "=", "-", "2", ")", "\n", "", "else", ":", "\n", "# if no candidate links, then don't add it completely", "\n", "        ", "scrs_mtt_pred_bloc", "=", "torch", ".", "cat", "(", "[", "scrs_mtt_root_to_spans", ",", "scrs_mtt_spans", "]", ",", "dim", "=", "-", "2", ")", "\n", "\n", "# the leftmost fixed bloc", "\n", "# TODO: when using batch size > 1, change this to take it into account", "\n", "", "scrs_mtt_fixed_bloc", "=", "torch", ".", "zeros", "(", "scrs_mtt_pred_bloc", ".", "shape", "[", "0", "]", ",", "scrs_mtt_pred_bloc", ".", "shape", "[", "1", "]", ",", "\n", "1", "+", "unique_links", ".", "shape", "[", "-", "1", "]", ",", "device", "=", "settings", ".", "device", ",", "\n", "dtype", "=", "torch_float_precision", ")", "\n", "# dtype=torch.float32)", "\n", "\n", "# repeat just the maximum score from the root to candidate links", "\n", "# TODO: make this batched", "\n", "scrs_mtt_fixed_bloc", "[", "0", ",", "0", ",", "1", ":", "unique_links", ".", "shape", "[", "-", "1", "]", "+", "1", "]", "=", "torch", ".", "max", "(", "scrs_mtt_pred_bloc", ")", "\n", "\n", "# print('pred_scores done?')", "\n", "scrs_mtt_complete_matrix", "=", "torch", ".", "cat", "(", "[", "scrs_mtt_fixed_bloc", ",", "scrs_mtt_pred_bloc", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "return", "scrs_mtt_complete_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt.create_coreflinker_mtt_z_mask": [[125, 181], ["len", "max", "torch.zeros", "torch.zeros", "list", "enumerate", "zip", "list.append", "dict", "enumerate", "enumerate", "enumerate", "range", "torch.tensor", "torch.tensor", "len", "span_offset.item", "len", "clusters[].item", "enumerate", "link_id.item", "cand_id.item.item"], "function", ["None"], ["", "def", "create_coreflinker_mtt_z_mask", "(", "pred_spans", ",", "gold_spans", ",", "gold_clusters", ",", "linker_targets", ",", "\n", "candidates", ",", "\n", "candidate_lengths", ",", "\n", "unique_links", ",", "unique_links_lengths", ",", "unknown_id", ")", ":", "\n", "    ", "\"\"\"\n    :param pred_spans:\n    :param gold_spans:\n    :param gold_clusters:\n    :param linker_targets:\n    :return:\n        Binary (1 or 0) mask matrix of dimensions (not counting the first batch):\n        [(1(root) + distinct links from pred spans + pred spans) x\n        (1(root) + distinct links from pred spans + pred spans)]\n    \"\"\"", "\n", "num_batch", "=", "len", "(", "pred_spans", ")", "# 1", "\n", "max_spans", "=", "max", "(", "[", "len", "(", "x", ")", "for", "x", "in", "pred_spans", "]", ")", "# 9", "\n", "\n", "coreflinker_mtt_z_mask", "=", "torch", ".", "zeros", "(", "num_batch", ",", "1", "+", "unique_links", ".", "shape", "[", "-", "1", "]", "+", "max_spans", ",", "\n", "1", "+", "unique_links", ".", "shape", "[", "-", "1", "]", "+", "max_spans", ",", "device", "=", "settings", ".", "device", ",", "\n", "dtype", "=", "torch", ".", "float32", ")", "\n", "z_mask_lengths", "=", "list", "(", ")", "\n", "for", "batch", ",", "(", "pred", ",", "gold", ",", "clusters", ")", "in", "enumerate", "(", "zip", "(", "pred_spans", ",", "gold_spans", ",", "gold_clusters", ")", ")", ":", "\n", "        ", "span_offset", "=", "unique_links_lengths", "[", "batch", "]", "+", "1", "\n", "curr_z_mask_length", "=", "span_offset", ".", "item", "(", ")", "+", "len", "(", "pred", ")", "# root + links + spans", "\n", "z_mask_lengths", ".", "append", "(", "curr_z_mask_length", ")", "\n", "\n", "link_id_to_idx", "=", "dict", "(", ")", "\n", "for", "idx_link", ",", "link_id", "in", "enumerate", "(", "unique_links", "[", "batch", "]", ")", ":", "\n", "            ", "link_id_to_idx", "[", "link_id", ".", "item", "(", ")", "]", "=", "idx_link", "\n", "", "gold2cluster", "=", "{", "}", "\n", "for", "idx", ",", "span", "in", "enumerate", "(", "gold", ")", ":", "\n", "            ", "gold2cluster", "[", "span", "]", "=", "clusters", "[", "idx", "]", ".", "item", "(", ")", "\n", "# processed_clusters = set()", "\n", "", "for", "idx1", ",", "span1", "in", "enumerate", "(", "pred", ")", ":", "\n", "# between spans", "\n", "            ", "for", "idx2", ",", "span2", "in", "enumerate", "(", "pred", ")", ":", "\n", "                ", "if", "idx2", "!=", "idx1", ":", "\n", "                    ", "coreflinker_mtt_z_mask", "[", "batch", ",", "idx1", "+", "span_offset", ",", "idx2", "+", "span_offset", "]", "=", "1.0", "\n", "\n", "# from links to spans", "\n", "", "", "if", "candidate_lengths", "[", "batch", ",", "idx1", "]", ">", "0", ":", "\n", "                ", "for", "cand_id", "in", "candidates", "[", "batch", ",", "idx1", "]", ":", "\n", "                    ", "cand_id", "=", "cand_id", ".", "item", "(", ")", "\n", "if", "cand_id", "!=", "unknown_id", ":", "\n", "# + 1 because of the root which is in the first row", "\n", "                        ", "coreflinker_mtt_z_mask", "[", "batch", ",", "link_id_to_idx", "[", "cand_id", "]", "+", "1", ",", "idx1", "+", "span_offset", "]", "=", "1.0", "\n", "\n", "# from root to span", "\n", "", "", "", "coreflinker_mtt_z_mask", "[", "batch", ",", "0", ",", "idx1", "+", "span_offset", "]", "=", "1.0", "\n", "\n", "# from root to all the links of the spans", "\n", "", "for", "curr_link_idx", "in", "range", "(", "unique_links_lengths", "[", "batch", "]", ")", ":", "\n", "# + 1 because of the root which is in the first column", "\n", "            ", "coreflinker_mtt_z_mask", "[", "batch", ",", "0", ",", "curr_link_idx", "+", "1", "]", "=", "1.0", "\n", "\n", "", "", "return", "coreflinker_mtt_z_mask", ",", "torch", ".", "tensor", "(", "z_mask_lengths", ",", "dtype", "=", "torch", ".", "int32", ",", "device", "=", "settings", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt.create_coreflinker_mtt_z_mask_indexed": [[183, 225], ["len", "max", "torch.zeros", "torch.zeros", "list", "enumerate", "zip", "list.append", "len", "torch.ones", "torch.ones", "numpy.diag_indices", "torch.zeros", "torch.zeros", "mix_cross.sum", "torch.tensor", "torch.tensor", "len", "span_offset.item", "len", "candidates[].unsqueeze"], "function", ["None"], ["", "def", "create_coreflinker_mtt_z_mask_indexed", "(", "pred_spans", ",", "gold_spans", ",", "gold_clusters", ",", "linker_targets", ",", "\n", "candidates", ",", "\n", "candidate_lengths", ",", "\n", "unique_links", ",", "unique_links_lengths", ",", "unknown_id", ")", ":", "\n", "    ", "\"\"\"\n    :param pred_spans:\n    :param gold_spans:\n    :param gold_clusters:\n    :param linker_targets:\n    :return:\n        Binary (1 or 0) mask matrix of dimensions (not counting the first batch):\n        [(1(root) + distinct links from pred spans + pred spans) x\n        (1(root) + distinct links from pred spans + pred spans)]\n        Indexed version that should be faster than create_coreflinker_mtt_z_mask\n    \"\"\"", "\n", "num_batch", "=", "len", "(", "pred_spans", ")", "# 1", "\n", "max_spans", "=", "max", "(", "[", "len", "(", "x", ")", "for", "x", "in", "pred_spans", "]", ")", "# 9", "\n", "\n", "coreflinker_mtt_z_mask_indexed", "=", "torch", ".", "zeros", "(", "num_batch", ",", "1", "+", "unique_links", ".", "shape", "[", "-", "1", "]", "+", "max_spans", ",", "\n", "1", "+", "unique_links", ".", "shape", "[", "-", "1", "]", "+", "max_spans", ",", "device", "=", "settings", ".", "device", ",", "\n", "dtype", "=", "torch", ".", "float32", ")", "\n", "z_mask_lengths", "=", "list", "(", ")", "\n", "for", "batch", ",", "(", "pred", ",", "gold", ",", "clusters", ")", "in", "enumerate", "(", "zip", "(", "pred_spans", ",", "gold_spans", ",", "gold_clusters", ")", ")", ":", "\n", "        ", "span_offset", "=", "unique_links_lengths", "[", "batch", "]", "+", "1", "\n", "curr_z_mask_length", "=", "span_offset", ".", "item", "(", ")", "+", "len", "(", "pred", ")", "# root + links + spans", "\n", "z_mask_lengths", ".", "append", "(", "curr_z_mask_length", ")", "\n", "\n", "len_pred", "=", "len", "(", "pred", ")", "\n", "mask_span_to_span", "=", "torch", ".", "ones", "(", "len_pred", ",", "len_pred", ",", "device", "=", "settings", ".", "device", ")", "\n", "ind", "=", "np", ".", "diag_indices", "(", "mask_span_to_span", ".", "shape", "[", "0", "]", ")", "\n", "mask_span_to_span", "[", "ind", "[", "0", "]", ",", "ind", "[", "1", "]", "]", "=", "torch", ".", "zeros", "(", "mask_span_to_span", ".", "shape", "[", "0", "]", ",", "device", "=", "settings", ".", "device", ")", "\n", "\n", "coreflinker_mtt_z_mask_indexed", "[", "batch", ",", "span_offset", ":", ",", "span_offset", ":", "]", "=", "mask_span_to_span", "[", ":", "]", "\n", "\n", "mix_cross", ":", "torch", ".", "Tensor", "=", "candidates", "[", "batch", "]", ".", "unsqueeze", "(", "-", "1", ")", "==", "unique_links", "[", "batch", "]", "\n", "mask_link_to_span", "=", "mix_cross", ".", "sum", "(", "-", "2", ")", "\n", "mask_link_to_span", "=", "mask_link_to_span", ".", "T", "\n", "\n", "coreflinker_mtt_z_mask_indexed", "[", "batch", ",", "1", ":", "span_offset", ",", "span_offset", ":", "]", "=", "mask_link_to_span", "[", ":", "]", "\n", "coreflinker_mtt_z_mask_indexed", "[", "batch", ",", "0", ",", "1", ":", "]", "=", "1.0", "\n", "\n", "", "return", "coreflinker_mtt_z_mask_indexed", ",", "torch", ".", "tensor", "(", "z_mask_lengths", ",", "dtype", "=", "torch", ".", "int32", ",", "device", "=", "settings", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt.create_coreflinker_mtt_target_mask": [[227, 293], ["len", "max", "torch.zeros", "torch.zeros", "linker_targets.sum", "list", "enumerate", "zip", "list.append", "enumerate", "set", "enumerate", "torch.tensor", "torch.tensor", "len", "unique_links_lengths[].item", "len", "clusters[].item", "nr_candidate_links_per_mention[].item", "enumerate", "candidates[].item", "set.add"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add"], ["", "def", "create_coreflinker_mtt_target_mask", "(", "pred_spans", ",", "gold_spans", ",", "gold_clusters", ",", "linker_targets", ",", "candidates", ",", "\n", "unique_links", ",", "unique_links_lengths", ")", ":", "\n", "    ", "\"\"\"\n\n    :param pred_spans:\n    :param gold_spans:\n    :param gold_clusters:\n    :param linker_targets ; :\n    :return:\n        Binary (1 or 0) mask matrix of dimensions (not counting the first batch):\n        [(1(root) + distinct links from pred spans + pred spans) x\n        (1(root) + distinct links from pred spans + pred spans)]\n    \"\"\"", "\n", "\n", "num_batch", "=", "len", "(", "pred_spans", ")", "# 1", "\n", "max_spans", "=", "max", "(", "[", "len", "(", "x", ")", "for", "x", "in", "pred_spans", "]", ")", "# 9", "\n", "\n", "coreflinker_mtt_targets", "=", "torch", ".", "zeros", "(", "num_batch", ",", "1", "+", "unique_links", ".", "shape", "[", "-", "1", "]", "+", "max_spans", ",", "\n", "1", "+", "unique_links", ".", "shape", "[", "-", "1", "]", "+", "max_spans", ",", "\n", "dtype", "=", "torch", ".", "float32", ",", "\n", "device", "=", "settings", ".", "device", ")", "\n", "nr_candidate_links_per_mention", "=", "linker_targets", ".", "sum", "(", "-", "1", ")", "\n", "target_mask_lengths", "=", "list", "(", ")", "\n", "# targets for span-span coref # TODO!! - also check that linker_targets come as batch!!!", "\n", "for", "batch", ",", "(", "pred", ",", "gold", ",", "clusters", ")", "in", "enumerate", "(", "zip", "(", "pred_spans", ",", "gold_spans", ",", "gold_clusters", ")", ")", ":", "\n", "# root to links always in 1", "\n", "        ", "coreflinker_mtt_targets", "[", "batch", ",", "0", ",", "1", ":", "unique_links_lengths", "[", "batch", "]", "+", "1", "]", "=", "1.0", "\n", "span_offset", "=", "1", "+", "unique_links_lengths", "[", "batch", "]", ".", "item", "(", ")", "\n", "curr_target_length", "=", "span_offset", "+", "len", "(", "pred", ")", "# root + links + spans", "\n", "target_mask_lengths", ".", "append", "(", "curr_target_length", ")", "\n", "gold2cluster", "=", "{", "}", "\n", "for", "idx", ",", "span", "in", "enumerate", "(", "gold", ")", ":", "\n", "            ", "gold2cluster", "[", "span", "]", "=", "clusters", "[", "idx", "]", ".", "item", "(", ")", "\n", "", "processed_clusters", "=", "set", "(", ")", "\n", "for", "idx1", ",", "span1", "in", "enumerate", "(", "pred", ")", ":", "\n", "            ", "num_coref_spans_found", "=", "0", "\n", "# num_span_links_found = 0", "\n", "if", "span1", "in", "gold2cluster", ":", "\n", "                ", "for", "idx2", ",", "span2", "in", "enumerate", "(", "pred", ")", ":", "\n", "# if idx2 < idx1 and span2 in gold2cluster and gold2cluster[span1] == gold2cluster[span2]:", "\n", "                    ", "if", "idx2", "!=", "idx1", "and", "span2", "in", "gold2cluster", "and", "gold2cluster", "[", "span1", "]", "==", "gold2cluster", "[", "span2", "]", ":", "\n", "# coref_targets[batch, idx1, idx2] = 1.0", "\n", "                        ", "coreflinker_mtt_targets", "[", "batch", ",", "idx1", "+", "span_offset", ",", "idx2", "+", "span_offset", "]", "=", "1.0", "\n", "num_coref_spans_found", "+=", "1", "\n", "\n", "# (kzaporoj) - here also checks whether a particular mention has entity linking candidates, and if so,", "\n", "# also sets the num_found to num_candidates", "\n", "# print('here todo with num_found of linking candidates')", "\n", "", "", "", "num_span_links_found", "=", "nr_candidate_links_per_mention", "[", "batch", ",", "idx1", "]", ".", "item", "(", ")", "\n", "if", "num_span_links_found", "==", "0", ":", "\n", "# TODO!!! - potentially buggy code, in case the correct link is not in the candidates of the first span!", "\n", "                ", "if", "(", "span1", "not", "in", "gold2cluster", ")", "or", "(", "span1", "in", "gold2cluster", "and", "gold2cluster", "[", "span1", "]", "not", "in", "processed_clusters", ")", ":", "\n", "                    ", "coreflinker_mtt_targets", "[", "batch", ",", "0", ",", "idx1", "+", "span_offset", "]", "=", "1.0", "\n", "", "", "else", ":", "\n", "# connects to the correct link", "\n", "                ", "correct_link_id", "=", "candidates", "[", "batch", ",", "idx1", ",", "linker_targets", "[", "batch", ",", "idx1", "]", ">", "0.5", "]", ".", "item", "(", ")", "\n", "# correct_link_id = candidates[batch, idx1, linker_targets[batch, idx1] == 1.0].item()", "\n", "offset_correct_link", "=", "(", "unique_links", "[", "batch", "]", "==", "correct_link_id", ")", ".", "nonzero", "(", ")", ".", "item", "(", ")", "\n", "coreflinker_mtt_targets", "[", "batch", ",", "offset_correct_link", "+", "1", ",", "idx1", "+", "span_offset", "]", "=", "1.0", "\n", "# raise Exception('STILL HAVE TO DEBUG THIS PART, TO SEE IF correct_link_id is correctly calculated')", "\n", "\n", "", "if", "span1", "in", "gold2cluster", ":", "\n", "                ", "processed_clusters", ".", "add", "(", "gold2cluster", "[", "span1", "]", ")", "\n", "\n", "", "", "", "return", "coreflinker_mtt_targets", ",", "torch", ".", "tensor", "(", "target_mask_lengths", ",", "dtype", "=", "torch", ".", "int32", ",", "device", "=", "settings", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt.create_coreflinker_mtt_target_mask_multihead": [[295, 421], ["len", "max", "torch.zeros", "torch.zeros", "linker_targets.sum", "list", "list", "enumerate", "zip", "list.append", "dict", "enumerate", "dict", "enumerate", "list", "dict.values", "list.append", "torch.tensor", "torch.tensor", "len", "unique_links_lengths[].item", "len", "clusters[].item", "clusters.max().item", "nr_candidate_links_per_mention[].item", "enumerate", "clusters.max", "candidates[].item", "[].append", "len", "enumerate", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "numpy.diag_indices", "torch.zeros", "torch.zeros", "list.append"], "function", ["None"], ["", "def", "create_coreflinker_mtt_target_mask_multihead", "(", "pred_spans", ",", "gold_spans", ",", "gold_clusters", ",", "linker_targets", ",", "candidates", ",", "\n", "unique_links", ",", "unique_links_lengths", ",", "\n", "use_multihead", "=", "True", ",", "torch_float_precision", "=", "torch", ".", "float32", ")", ":", "\n", "    ", "\"\"\"\n    Unlike create_coreflinker_mtt_target_mask, this that produces only a single entry (1.0 mask activation) from root\n    to a span (the first span in a cluster) in a particular NIL cluster, this one returns multiple matrices with\n    activations for each of the spans (\"heads\") in a NIL cluster.\n    For details: see slide https://docs.google.com/presentation/d/1Za2gCNq55gp1MCTlg4p0CN-JGyKjj4WtzxpYJKDZz3E/edit#slide=id.gbea2b70095_0_61\n    For details of what create_coreflinker_mtt_target_mask is doing see slide https://docs.google.com/presentation/d/1Za2gCNq55gp1MCTlg4p0CN-JGyKjj4WtzxpYJKDZz3E/edit#slide=id.gbea2b70095_0_0\n\n    :param pred_spans:\n    :param gold_spans:\n    :param gold_clusters:\n    :param linker_targets:\n    :return:\n        Binary (1 or 0) mask matrix of dimensions (not counting the first batch):\n        [(1(root) + distinct links from pred spans + pred spans) x\n        (1(root) + distinct links from pred spans + pred spans)]\n    \"\"\"", "\n", "\n", "num_batch", "=", "len", "(", "pred_spans", ")", "# 1", "\n", "max_spans", "=", "max", "(", "[", "len", "(", "x", ")", "for", "x", "in", "pred_spans", "]", ")", "# 9", "\n", "\n", "coreflinker_mtt_targets", "=", "torch", ".", "zeros", "(", "num_batch", ",", "1", "+", "unique_links", ".", "shape", "[", "-", "1", "]", "+", "max_spans", ",", "\n", "1", "+", "unique_links", ".", "shape", "[", "-", "1", "]", "+", "max_spans", ",", "\n", "dtype", "=", "torch", ".", "float32", ",", "\n", "device", "=", "settings", ".", "device", ")", "\n", "nr_candidate_links_per_mention", "=", "linker_targets", ".", "sum", "(", "-", "1", ")", "\n", "target_mask_lengths", "=", "list", "(", ")", "\n", "batched_lst_multiheads", "=", "list", "(", ")", "\n", "# targets for span-span coref # TODO!! - also check that linker_targets come as batch!!!", "\n", "for", "batch", ",", "(", "pred", ",", "gold", ",", "clusters", ")", "in", "enumerate", "(", "zip", "(", "pred_spans", ",", "gold_spans", ",", "gold_clusters", ")", ")", ":", "\n", "# root to links always in 1", "\n", "        ", "coreflinker_mtt_targets", "[", "batch", ",", "0", ",", "1", ":", "unique_links_lengths", "[", "batch", "]", "+", "1", "]", "=", "1.0", "\n", "span_offset", "=", "1", "+", "unique_links_lengths", "[", "batch", "]", ".", "item", "(", ")", "\n", "curr_target_length", "=", "span_offset", "+", "len", "(", "pred", ")", "# root + links + spans", "\n", "target_mask_lengths", ".", "append", "(", "curr_target_length", ")", "\n", "gold2cluster", "=", "dict", "(", ")", "\n", "for", "idx", ",", "span", "in", "enumerate", "(", "gold", ")", ":", "\n", "            ", "gold2cluster", "[", "span", "]", "=", "clusters", "[", "idx", "]", ".", "item", "(", ")", "\n", "\n", "", "pred2cluster_struct", "=", "dict", "(", ")", "\n", "if", "clusters", ".", "shape", "[", "-", "1", "]", ">", "0", ":", "\n", "            ", "max_gold_cl_id", "=", "clusters", ".", "max", "(", ")", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "            ", "max_gold_cl_id", "=", "0", "\n", "", "to_assign_cl_id", "=", "max_gold_cl_id", "+", "1", "\n", "for", "idx_span1", ",", "span1", "in", "enumerate", "(", "pred", ")", ":", "\n", "            ", "if", "span1", "not", "in", "gold2cluster", ":", "\n", "                ", "new_cl_id", "=", "to_assign_cl_id", "\n", "to_assign_cl_id", "+=", "1", "\n", "pred2cluster_struct", "[", "new_cl_id", "]", "=", "{", "'cluster_id'", ":", "to_assign_cl_id", ",", "\n", "'spans'", ":", "[", "(", "idx_span1", ",", "span1", ")", "]", ",", "\n", "# if it is not in gold2cluster, then there is no way to know", "\n", "# if the link is valid or not", "\n", "'is_valid_link'", ":", "False", "}", "\n", "", "else", ":", "\n", "                ", "cluster_id", "=", "gold2cluster", "[", "span1", "]", "\n", "num_span_links_found", "=", "nr_candidate_links_per_mention", "[", "batch", ",", "idx_span1", "]", ".", "item", "(", ")", "\n", "is_valid_link", "=", "False", "\n", "if", "num_span_links_found", ">", "0", ":", "\n", "                    ", "is_valid_link", "=", "True", "\n", "correct_link_id", "=", "candidates", "[", "batch", ",", "idx_span1", ",", "linker_targets", "[", "batch", ",", "idx_span1", "]", ">", "0.5", "]", ".", "item", "(", ")", "\n", "offset_correct_link", "=", "(", "unique_links", "[", "batch", "]", "==", "correct_link_id", ")", ".", "nonzero", "(", ")", ".", "item", "(", ")", "\n", "coreflinker_mtt_targets", "[", "batch", ",", "offset_correct_link", "+", "1", ",", "idx_span1", "+", "span_offset", "]", "=", "1.0", "\n", "\n", "", "for", "idx_span2", ",", "span2", "in", "enumerate", "(", "pred", ")", ":", "\n", "                    ", "if", "idx_span2", "!=", "idx_span1", "and", "span2", "in", "gold2cluster", "and", "gold2cluster", "[", "span1", "]", "==", "gold2cluster", "[", "span2", "]", ":", "\n", "                        ", "coreflinker_mtt_targets", "[", "batch", ",", "idx_span1", "+", "span_offset", ",", "idx_span2", "+", "span_offset", "]", "=", "1.0", "\n", "# num_coref_spans_found += 1", "\n", "\n", "", "", "if", "cluster_id", "not", "in", "pred2cluster_struct", ":", "\n", "                    ", "pred2cluster_struct", "[", "cluster_id", "]", "=", "{", "'cluster_id'", ":", "cluster_id", ",", "\n", "'spans'", ":", "[", "(", "idx_span1", ",", "span1", ")", "]", ",", "\n", "'is_valid_link'", ":", "False", "}", "\n", "", "else", ":", "\n", "                    ", "pred2cluster_struct", "[", "cluster_id", "]", "[", "'spans'", "]", ".", "append", "(", "(", "idx_span1", ",", "span1", ")", ")", "\n", "\n", "", "if", "is_valid_link", ":", "\n", "                    ", "pred2cluster_struct", "[", "cluster_id", "]", "[", "'is_valid_link'", "]", "=", "True", "\n", "\n", "", "", "", "lst_multiheads", "=", "list", "(", ")", "# probably put this on top", "\n", "for", "cluster_struct", "in", "pred2cluster_struct", ".", "values", "(", ")", ":", "\n", "            ", "is_valid_link", "=", "cluster_struct", "[", "'is_valid_link'", "]", "\n", "if", "not", "is_valid_link", ":", "\n", "# puts the first one directly into coref_mtt_targets", "\n", "                ", "spans", "=", "cluster_struct", "[", "'spans'", "]", "\n", "idx_1st_span", "=", "spans", "[", "0", "]", "[", "0", "]", "\n", "coreflinker_mtt_targets", "[", "batch", ",", "0", ",", "idx_1st_span", "+", "span_offset", "]", "=", "1.0", "\n", "if", "use_multihead", ":", "\n", "                    ", "len_spans", "=", "len", "(", "spans", ")", "\n", "indices", "=", "[", "0", "]", "# the first index always 0 (root)", "\n", "curr_indices", "=", "indices", "+", "[", "curr_ind", "[", "0", "]", "+", "span_offset", "for", "curr_ind", "in", "spans", "]", "\n", "# :1 because the first head is already taken care in coreflinker_mtt_targets", "\n", "for", "idx", ",", "curr_head", "in", "enumerate", "(", "spans", "[", "1", ":", "]", ")", ":", "\n", "                        ", "mtt_targets", "=", "torch", ".", "zeros", "(", "len_spans", "+", "1", ",", "len_spans", "+", "1", ",", "dtype", "=", "torch_float_precision", ",", "\n", "device", "=", "settings", ".", "device", ")", "\n", "\n", "# +2 because of root and the first head that is already taken care in coreflinker_mtt_targets", "\n", "mtt_targets", "[", "0", ",", "2", "+", "idx", "]", "=", "1.0", "\n", "# the connections between spans (inter_spans) all in 1 except the main diagonal", "\n", "inter_spans", "=", "torch", ".", "ones", "(", "mtt_targets", ".", "shape", "[", "0", "]", "-", "1", ",", "mtt_targets", ".", "shape", "[", "1", "]", "-", "1", ",", "\n", "dtype", "=", "torch_float_precision", ",", "\n", "device", "=", "settings", ".", "device", ")", "\n", "ind", "=", "np", ".", "diag_indices", "(", "inter_spans", ".", "shape", "[", "0", "]", ")", "\n", "inter_spans", "[", "ind", "[", "0", "]", ",", "ind", "[", "1", "]", "]", "=", "torch", ".", "zeros", "(", "inter_spans", ".", "shape", "[", "0", "]", ",", "\n", "dtype", "=", "torch_float_precision", ",", "\n", "device", "=", "settings", ".", "device", ")", "\n", "mtt_targets", "[", "1", ":", ",", "1", ":", "]", "=", "inter_spans", "[", ":", "]", "\n", "lst_multiheads", ".", "append", "(", "{", "'mtt_targets'", ":", "mtt_targets", ",", "'indices'", ":", "curr_indices", "}", ")", "\n", "# mask_span_to_span[ind[0], ind[1]] = torch.zeros(mask_span_to_span.shape[0], device=settings.device)", "\n", "\n", "# TODO: now a loop over all elements in pred2cluster_struct and", "\n", "#  1- if is_valid_link in True, just add it into a big matrix (coref_mtt_targets)", "\n", "#  2- if is_valid_link in False, then for each one create a separate M matrices where M is the number of", "\n", "#  spans in 'spans', each matrix will have a different head, also the corresponding offset of the matrix", "\n", "#  will have to be added. IS THIS OFFSET REALLY NEEDED or even possible (non-contiguous spans)?????", "\n", "#  TO GET ACCESS TO THE REAL SCORES?? SO MAYBE just pass the 'scores' matrix here and instead of mask", "\n", "#  assign the real scores there", "\n", "#    - !!maybe the first head in M add it to the coref_mtt_targets matrix; this way it will be possible to", "\n", "#      calculate laplacian and determinant, as well as configurable on whether multihead is needed!!", "\n", "#  3- IS IT POSSIBLE TO GET TO KNOW IF A PARTICULAR CLUSTER IS NIL HERE to make NIL configurable and differentiate", "\n", "#  it from the case where the spans just don't have a valid link??", "\n", "", "", "", "", "batched_lst_multiheads", ".", "append", "(", "lst_multiheads", ")", "\n", "", "return", "coreflinker_mtt_targets", ",", "torch", ".", "tensor", "(", "target_mask_lengths", ",", "dtype", "=", "torch", ".", "int32", ",", "device", "=", "settings", ".", "device", ")", ",", "batched_lst_multiheads", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt.m2i_to_clusters_linkercoref_mtt": [[423, 463], ["enumerate", "list", "links_dictionary.get", "clusters[].append", "clusters[].append", "clusters.values"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get"], ["", "def", "m2i_to_clusters_linkercoref_mtt", "(", "m2i", ",", "coref_col_to_link_id", "=", "None", ",", "\n", "links_dictionary", ":", "Dictionary", "=", "None", ",", "nr_candidates", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n\n    :param m2i: <class 'list'>: [36, 4, 36, 14, 36, 4, 4, 4, 32]\n    :return:\n    \"\"\"", "\n", "clusters", "=", "{", "}", "\n", "m2c", "=", "{", "}", "\n", "for", "m", ",", "c", "in", "enumerate", "(", "m2i", ")", ":", "\n", "        ", "if", "c", "==", "-", "1", ":", "\n", "# not a valid cluster (i.e. should happen if filter_singletons_with_matrix is in true and the span points to", "\n", "# the matrix column that indicates it is a not valid entity mention).", "\n", "            ", "continue", "\n", "\n", "", "if", "c", "not", "in", "clusters", ":", "\n", "            ", "clusters", "[", "c", "]", "=", "[", "]", "\n", "\n", "", "link_token", "=", "''", "\n", "if", "c", "<", "nr_candidates", ":", "\n", "            ", "link_id", "=", "coref_col_to_link_id", "[", "c", "+", "1", "]", "\n", "link_token", "=", "links_dictionary", ".", "get", "(", "link_id", ")", "\n", "\n", "# if points to 'NILL', just makes it point to itself, this is because we can not cluster entities based on 'NILL'", "\n", "# since different entities can point to 'NILL'. Same with NONE.", "\n", "", "if", "link_token", "==", "'NILL'", "or", "link_token", "==", "'NONE'", ":", "\n", "# if link_token == 'NILL':", "\n", "            ", "if", "m", "not", "in", "clusters", ":", "\n", "                ", "clusters", "[", "m", "]", "=", "[", "]", "\n", "", "clusters", "[", "m", "]", ".", "append", "(", "m", ")", "\n", "m2c", "[", "m", "]", "=", "clusters", "[", "m", "]", "\n", "", "else", ":", "\n", "            ", "clusters", "[", "c", "]", ".", "append", "(", "m", ")", "\n", "m2c", "[", "m", "]", "=", "clusters", "[", "c", "]", "\n", "\n", "# clusters: <class 'dict'>: {0: [0], 1: [1, 6, 7, 10], 2: [2], 3: [3, 11], 4: [4], 5: [5], 8: [8, 12], 9: [9], 13: [13]}", "\n", "# clusters.values(): <class 'list'>: [[0], [1, 6, 7, 10], [2], [3, 11], [4], [5], [8, 12], [9], [13]]", "\n", "# m2c: <class 'dict'>: {0: [0], 1: [1, 6, 7, 10], 2: [2], 3: [3, 11], 4: [4], 5: [5], 6: [1, 6, 7, 10],", "\n", "#   7: [1, 6, 7, 10], 8: [8, 12], 9: [9], 10: [1, 6, 7, 10], 11: [3, 11], 12: [8, 12], 13: [13]}", "\n", "", "", "return", "list", "(", "clusters", ".", "values", "(", ")", ")", ",", "m2c", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt.dfs_edges": [[466, 477], ["range", "coreflinker_mtt.dfs_edges"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt.dfs_edges"], ["", "def", "dfs_edges", "(", "b_pred_matrix_mst", ",", "from_node", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n\n    :param b_pred_matrix_mst:\n    :return: gets edges of depth first search traverse over the adjacency matrix passed as parameter\n    \"\"\"", "\n", "to_ret", "=", "[", "]", "\n", "for", "to_node", "in", "range", "(", "b_pred_matrix_mst", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "if", "b_pred_matrix_mst", "[", "from_node", ",", "to_node", "]", "==", "1.0", ":", "\n", "            ", "to_ret", "+=", "[", "(", "from_node", ",", "to_node", ")", "]", "+", "dfs_edges", "(", "b_pred_matrix_mst", ",", "to_node", ")", "\n", "", "", "return", "to_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt.decode_m2i_coreflinker_mtt": [[479, 604], ["list", "list", "enumerate", "zip", "list", "dict", "list.extend", "list", "b_unique_links_lengths.item", "list.extend", "dict", "list.append", "list.append", "networkx.dfs_edges", "list", "len", "range", "b_pred_masked_scores[].item", "dic.get", "link_id.item", "Exception"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt.dfs_edges", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get"], ["", "def", "decode_m2i_coreflinker_mtt", "(", "pred_masked_scores", ",", "pred_tree_mst", ",", "\n", "# lengths_coref, lengths_linker,", "\n", "candidate_ids", ",", "\n", "link_id_to_coref_col", ",", "\n", "# coref_col_to_link_id,", "\n", "dic", ",", "unique_links", ",", "\n", "unique_links_lengths", ",", "pred_spans", ")", ":", "\n", "    ", "\"\"\"\n\n    :return: This function should return the \"root\" each of the mentions point to. The \"root\" can be either an \"entity\",\n    in which case this would be a link. Or can be another mention; in which case it would be a mention that can not be linked\n    or that does not have a link I guess.\n    \"\"\"", "\n", "# to_ret = []", "\n", "span_to_pointers_detail_info", "=", "list", "(", ")", "\n", "\n", "decoded_m2i_coref_linker", "=", "list", "(", ")", "\n", "\n", "for", "batch", ",", "(", "b_unique_links", ",", "b_unique_links_lengths", ")", "in", "enumerate", "(", "zip", "(", "unique_links", ",", "unique_links_lengths", ")", ")", ":", "\n", "# print('decode_m2i_coreflinker_mtt processing batch ', batch)", "\n", "        ", "b_link_id_to_coref_col", "=", "link_id_to_coref_col", "[", "batch", "]", "\n", "# b_decoded_m2i_coref_linker = [0]  # 0 for root", "\n", "# NO, now I think that it should not include the root, only the nodes representing links or spans", "\n", "b_decoded_m2i_coref_linker", "=", "list", "(", ")", "\n", "b_span_to_pointers_detail_info", "=", "dict", "(", ")", "\n", "# -1 because we do not count the root node", "\n", "b_decoded_m2i_coref_linker", ".", "extend", "(", "[", "b_link_id_to_coref_col", "[", "link_id", ".", "item", "(", ")", "]", "-", "1", "for", "link_id", "in", "b_unique_links", "]", ")", "\n", "# b_pred_matrix_mst = pred_matrix_mst[batch]", "\n", "b_pred_tree_mst", "=", "pred_tree_mst", "[", "batch", "]", "\n", "b_pred_spans", "=", "pred_spans", "[", "batch", "]", "\n", "b_pred_masked_scores", "=", "pred_masked_scores", "[", "batch", "]", "\n", "my_edges", "=", "list", "(", "nx", ".", "dfs_edges", "(", "b_pred_tree_mst", ")", ")", "\n", "# print('dfs edges: ', list(edges))", "\n", "# my_edges = dfs_edges(b_pred_matrix_mst, from_node=0)", "\n", "# print('my edges: ', my_edges)", "\n", "# print('nicely printed matrix: ')", "\n", "\n", "# assert torch.diagonal(b_pred_matrix_mst).sum() == 0.0  # no self referring spans", "\n", "# assert b_pred_matrix_mst.shape[0] == b_pred_matrix_mst.shape[1]  # square adjacency matrix", "\n", "\n", "# for row in range(b_pred_matrix_mst.shape[0]):", "\n", "#     curr_col = ''", "\n", "#     for col in range(b_pred_matrix_mst.shape[1]):", "\n", "#         if curr_col != '':", "\n", "#             curr_col += '\\t'", "\n", "#         curr_col += str(int(b_pred_matrix_mst[row, col].item()))", "\n", "#     print(curr_col)", "\n", "\n", "# nr_nodes = b_pred_matrix_mst.shape[0]", "\n", "nr_nodes", "=", "b_pred_masked_scores", ".", "shape", "[", "0", "]", "\n", "\n", "nr_links", "=", "b_unique_links_lengths", ".", "item", "(", ")", "\n", "\n", "b_decoded_m2i_coref_linker", ".", "extend", "(", "list", "(", "range", "(", "nr_links", ",", "nr_nodes", "-", "1", ")", ")", ")", "\n", "assert", "len", "(", "b_pred_spans", ")", "==", "nr_nodes", "-", "nr_links", "-", "1", "\n", "# -1 because we do not add the root node", "\n", "# assert len(b_decoded_m2i_coref_linker) == b_pred_matrix_mst.shape[0] - 1", "\n", "\n", "initial_node", "=", "0", "\n", "pred_span_to_how_pointed", "=", "dict", "(", ")", "\n", "for", "curr_edge", "in", "my_edges", ":", "\n", "# print('curr edge is as follows: ', curr_edge)", "\n", "            ", "if", "curr_edge", "[", "0", "]", "==", "0", ":", "\n", "                ", "initial_node", "=", "0", "\n", "", "else", ":", "\n", "                ", "if", "initial_node", "==", "0", ":", "\n", "                    ", "initial_node", "=", "curr_edge", "[", "0", "]", "\n", "", "", "curr_input_node", "=", "curr_edge", "[", "1", "]", "\n", "input_node_span", "=", "curr_input_node", "-", "1", "\n", "if", "initial_node", "!=", "0", ":", "\n", "# points to the first non-root node; -1 because the root node is not in b_decoded_m2i_coref_linker list", "\n", "                ", "b_decoded_m2i_coref_linker", "[", "curr_input_node", "-", "1", "]", "=", "initial_node", "-", "1", "\n", "# span_to_pointers_detail_info", "\n", "\n", "# fills in the information on how the span is connected", "\n", "", "if", "curr_input_node", ">", "nr_links", ":", "# it is a span node", "\n", "                ", "curr_span_id", "=", "curr_input_node", "-", "nr_links", "-", "1", "\n", "in_span", "=", "b_pred_spans", "[", "curr_span_id", "]", "\n", "coref_connection_score", "=", "b_pred_masked_scores", "[", "curr_edge", "[", "0", "]", ",", "curr_edge", "[", "1", "]", "]", ".", "item", "(", ")", "\n", "if", "curr_edge", "[", "0", "]", "==", "0", ":", "\n", "                    ", "pred_span_to_how_pointed", "[", "in_span", "]", "=", "{", "'coref_connection_type'", ":", "'root'", ",", "\n", "'coref_connection_pointer'", ":", "in_span", ",", "\n", "'coref_connection_score'", ":", "coref_connection_score", "}", "\n", "", "elif", "0", "<", "curr_edge", "[", "0", "]", "<", "nr_links", "+", "1", ":", "\n", "                    ", "link_id", "=", "b_unique_links", "[", "curr_edge", "[", "0", "]", "-", "1", "]", "\n", "link_name", "=", "dic", ".", "get", "(", "link_id", ")", "\n", "pred_span_to_how_pointed", "[", "in_span", "]", "=", "{", "'coref_connection_type'", ":", "'link'", ",", "\n", "'coref_connection_pointer'", ":", "link_name", ",", "\n", "'coref_connection_score'", ":", "coref_connection_score", "}", "\n", "", "elif", "curr_edge", "[", "0", "]", ">", "nr_links", ":", "\n", "                    ", "other_mention_span", "=", "b_pred_spans", "[", "curr_edge", "[", "0", "]", "-", "nr_links", "-", "1", "]", "\n", "pred_span_to_how_pointed", "[", "in_span", "]", "=", "{", "'coref_connection_type'", ":", "'mention_other'", ",", "\n", "'coref_connection_pointer'", ":", "other_mention_span", ",", "\n", "'coref_connection_score'", ":", "coref_connection_score", "}", "\n", "", "else", ":", "\n", "                    ", "raise", "Exception", "(", "'This should not happen, something wrong with coreflinker_mtt 1!'", ")", "\n", "", "", "", "for", "curr_span", "in", "b_pred_spans", ":", "\n", "            ", "if", "curr_span", "in", "pred_span_to_how_pointed", ":", "\n", "                ", "b_span_to_pointers_detail_info", "[", "curr_span", "]", "=", "pred_span_to_how_pointed", "[", "curr_span", "]", "\n", "", "else", ":", "\n", "                ", "b_span_to_pointers_detail_info", "[", "curr_span", "]", "=", "{", "'coref_connection_type'", ":", "'unknown'", ",", "\n", "'coref_connection_pointer'", ":", "None", ",", "\n", "'coref_connection_score'", ":", "None", "}", "\n", "\n", "", "", "decoded_m2i_coref_linker", ".", "append", "(", "b_decoded_m2i_coref_linker", ")", "\n", "span_to_pointers_detail_info", ".", "append", "(", "b_span_to_pointers_detail_info", ")", "\n", "\n", "# example of span_to_pointer_detail_info:", "\n", "#   <class 'list'>:", "\n", "#   [{(3, 4): {'coref_connection_type': 'mention_self', 'coref_connection_pointer': (3, 4), 'coref_connection_score': -0.0},", "\n", "#   (3, 7): {'coref_connection_type': 'mention_self', 'coref_connection_pointer': (3, 7), 'coref_connection_score': -0.0},", "\n", "#   (5, 6): {'coref_connection_type': 'mention_self', 'coref_connection_pointer': (5, 6), 'coref_connection_score': -0.0},", "\n", "#   (5, 7): {'coref_connection_type': 'mention_self', 'coref_connection_pointer': (5, 7), 'coref_connection_score': -0.0},", "\n", "#   (41, 43): {'coref_connection_type': 'mention_self', 'coref_connection_pointer': (41, 43), 'coref_connection_score': -0.0},", "\n", "#   (45, 47): {'coref_connection_type': 'mention_self', 'coref_connection_pointer': (45, 47), 'coref_connection_score': -0.0},", "\n", "#   (49, 49): {'coref_connection_type': 'link', 'coref_connection_pointer': 'Berlin'},", "\n", "#   (49, 50): {'coref_connection_type': 'mention_self', 'coref_connection_pointer': (49, 50), 'coref_connection_score': -0.0},", "\n", "#   (50, 50): {'coref_connection_type': 'mention_self', 'coref_connection_pointer': (50, 50), 'coref_connection_score': -0.0},", "\n", "#   (50, 52): {'coref_connection_type': 'mention_self', 'coref_connection_pointer': (50, 52), 'coref_connection_score': -0.0},", "\n", "#   (51, 52): {'coref_connection_type': 'mention_self', 'coref_connection_pointer': (51, 52), 'coref_connection_score': -0.0},", "\n", "#   (51, 54): {'coref_connection_type': 'mention_self', 'coref_connection_pointer': (51, 54), 'coref_connection_score': -0.0},", "\n", "#   (53, 54): {'coref_connection_type': 'mention_self', 'coref_connection_pointer': (53, 54), 'coref_connection_score': -0.0},", "\n", "#   (57, 57): {'coref_connection_type': 'link', 'coref_connection_pointer': 'Berlin'}}]", "\n", "\n", "", "return", "decoded_m2i_coref_linker", ",", "span_to_pointers_detail_info", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt.convert_coref_mtt": [[606, 640], ["dict", "range", "set", "dict.items", "len", "out_mention_to_link_id[].append", "print", "links_dictionary.get"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get"], ["", "def", "convert_coref_mtt", "(", "clusters", ",", "spans", ",", "number_candidates", "=", "None", ",", "links_dictionary", ":", "Dictionary", "=", "None", ",", "\n", "coref_col_to_link_id", ":", "dict", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n\n    :param clusters: it is a tuple, see below for components (clusters and m2c)\n    :param spans: <class 'list'>: [(3, 4), (5, 7), (41, 43), (45, 47), (49, 49), (50, 50), (51, 52), (53, 54), (57, 57)]\n    :return:\n    \"\"\"", "\n", "(", "clusters", ",", "m2c", ")", "=", "clusters", "\n", "\n", "out_coref_clusters", "=", "[", "[", "spans", "[", "m", "-", "number_candidates", "]", "for", "m", "in", "cluster", "if", "m", ">=", "number_candidates", "]", "\n", "for", "cluster", "in", "clusters", "]", "# IndexError: list index out of range", "\n", "out_coref_clusters", "=", "[", "span_cluster", "for", "span_cluster", "in", "out_coref_clusters", "if", "len", "(", "span_cluster", ")", ">", "0", "]", "\n", "\n", "out_mention_to_link_id", "=", "dict", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "number_candidates", ")", ":", "\n", "        ", "span_ids", "=", "[", "span_id", "for", "span_id", "in", "m2c", "[", "i", "]", "if", "span_id", ">=", "number_candidates", "]", "\n", "for", "curr_span_id", "in", "span_ids", ":", "\n", "            ", "if", "curr_span_id", "not", "in", "out_mention_to_link_id", ":", "\n", "                ", "out_mention_to_link_id", "[", "curr_span_id", "]", "=", "[", "i", "]", "\n", "", "else", ":", "\n", "                ", "out_mention_to_link_id", "[", "curr_span_id", "]", ".", "append", "(", "i", ")", "\n", "print", "(", "'WARNING ON CANDIDATE LINKING!!: '", ",", "curr_span_id", ",", "' has been resolved to multiple '", "\n", "'candidates: '", ",", "\n", "out_mention_to_link_id", "[", "curr_span_id", "]", ")", "\n", "\n", "# +1 because we do not count the root taken into account in coref_col_to_link_id", "\n", "", "", "", "out_mention_to_link_id2", "=", "[", "(", "spans", "[", "k", "-", "number_candidates", "]", "+", "(", "links_dictionary", ".", "get", "(", "coref_col_to_link_id", "[", "v", "[", "0", "]", "+", "1", "]", ")", ",", ")", ")", "\n", "for", "k", ",", "v", "in", "out_mention_to_link_id", ".", "items", "(", ")", "]", "\n", "\n", "spans_with_link", "=", "set", "(", "[", "(", "span_start", ",", "span_end", ")", "for", "span_start", ",", "span_end", ",", "_", "in", "out_mention_to_link_id2", "]", ")", "\n", "\n", "return", "out_coref_clusters", ",", "out_mention_to_link_id2", ",", "spans_with_link", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt.get_mtt_loss": [[642, 702], ["torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.slogdet", "torch.slogdet", "torch.slogdet", "torch.slogdet", "torch.isinf", "torch.isinf", "dict", "targets_mask[].tolist", "z_mask[].tolist", "pred_scores_mtt[].tolist", "torch.exp", "torch.exp", "targets_scores_exp.sum", "torch.exp", "torch.exp", "z_scores_exp.sum", "mtt_det_z_scores[].item", "mtt_det_tgt_scores[].item", "laplacian_z_scores[].tolist", "laplacian_tgt_scores[].tolist", "curr_loss.item", "print", "torch.isnan", "torch.isnan", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "open", "json.dump", "print"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "get_mtt_loss", "(", "targets_mask", ",", "pred_scores_mtt", ",", "z_mask", ",", "torch_float_precision", ",", "print_debugging", "=", "False", ")", ":", "\n", "# TODO: we are here!!! WIP!!", "\n", "# tot_loss = None", "\n", "# get the laplacian of target, first applies the mask", "\n", "# TODO: add for the batch calculation", "\n", "    ", "if", "print_debugging", ":", "\n", "        ", "to_print_debugging", "=", "dict", "(", ")", "\n", "to_print_debugging", "[", "'target_mask'", "]", "=", "targets_mask", "[", "0", "]", ".", "tolist", "(", ")", "\n", "to_print_debugging", "[", "'z_mask'", "]", "=", "z_mask", "[", "0", "]", ".", "tolist", "(", ")", "\n", "to_print_debugging", "[", "'scores'", "]", "=", "pred_scores_mtt", "[", "0", "]", ".", "tolist", "(", ")", "\n", "\n", "", "targets_scores", "=", "targets_mask", "*", "torch", ".", "exp", "(", "pred_scores_mtt", ")", "\n", "\n", "targets_scores_exp", "=", "targets_scores", "\n", "# TODO: instead of unsqueeze(0), implement it in a batched way!!", "\n", "laplacian_tgt_scores", "=", "torch", ".", "eye", "(", "targets_scores_exp", ".", "shape", "[", "-", "2", "]", ",", "targets_scores_exp", ".", "shape", "[", "-", "1", "]", ",", "\n", "dtype", "=", "torch_float_precision", ",", "device", "=", "settings", ".", "device", ")", ".", "unsqueeze", "(", "0", ")", "\n", "laplacian_tgt_scores", "=", "laplacian_tgt_scores", "*", "targets_scores_exp", ".", "sum", "(", "dim", "=", "-", "2", ")", "# main diagonal", "\n", "laplacian_tgt_scores", "+=", "(", "targets_scores_exp", "*", "-", "1.0", ")", "\n", "\n", "z_scores", "=", "z_mask", "*", "torch", ".", "exp", "(", "pred_scores_mtt", ")", "\n", "\n", "# TODO: instead of unsqueeze(0), implement it in a batched way!!", "\n", "z_scores_exp", "=", "z_scores", "\n", "laplacian_z_scores", "=", "torch", ".", "eye", "(", "z_scores_exp", ".", "shape", "[", "-", "2", "]", ",", "z_scores_exp", ".", "shape", "[", "-", "1", "]", ",", "\n", "device", "=", "settings", ".", "device", ",", "dtype", "=", "torch_float_precision", ")", ".", "unsqueeze", "(", "0", ")", "\n", "laplacian_z_scores", "=", "laplacian_z_scores", "*", "z_scores_exp", ".", "sum", "(", "dim", "=", "-", "2", ")", "# main diagonal", "\n", "laplacian_z_scores", "+=", "(", "z_scores_exp", "*", "-", "1.0", ")", "\n", "\n", "# get the mtts", "\n", "laplacian_tgt_scores_exp", "=", "laplacian_tgt_scores", "\n", "mtt_det_tgt_scores", "=", "torch", ".", "slogdet", "(", "laplacian_tgt_scores_exp", "[", "0", ",", "1", ":", ",", "1", ":", "]", ")", "\n", "# mtt_det_tgt_scores = torch.det(laplacian_tgt_scores_exp[0, 1:, 1:])", "\n", "laplacian_z_scores_exp", "=", "laplacian_z_scores", "\n", "mtt_det_z_scores", "=", "torch", ".", "slogdet", "(", "laplacian_z_scores_exp", "[", "0", ",", "1", ":", ",", "1", ":", "]", ")", "\n", "# mtt_det_z_scores = torch.det(laplacian_z_scores_exp[0, 1:, 1:])", "\n", "\n", "curr_loss", "=", "mtt_det_z_scores", "[", "1", "]", "-", "mtt_det_tgt_scores", "[", "1", "]", "\n", "\n", "if", "print_debugging", ":", "\n", "        ", "to_print_debugging", "[", "'z_slogdet'", "]", "=", "mtt_det_z_scores", "[", "1", "]", ".", "item", "(", ")", "\n", "to_print_debugging", "[", "'target_slogdet'", "]", "=", "mtt_det_tgt_scores", "[", "1", "]", ".", "item", "(", ")", "\n", "to_print_debugging", "[", "'z_laplacian'", "]", "=", "laplacian_z_scores", "[", "0", "]", ".", "tolist", "(", ")", "\n", "to_print_debugging", "[", "'target_laplacian'", "]", "=", "laplacian_tgt_scores", "[", "0", "]", ".", "tolist", "(", ")", "\n", "to_print_debugging", "[", "'loss'", "]", "=", "curr_loss", ".", "item", "(", ")", "\n", "with", "open", "(", "'debugging_mtt.json'", ",", "'w'", ")", "as", "fp", ":", "\n", "            ", "json", ".", "dump", "(", "to_print_debugging", ",", "fp", ")", "\n", "\n", "", "", "if", "torch", ".", "isinf", "(", "curr_loss", ")", ":", "\n", "        ", "print", "(", "'!!!!WARNING, CURR LOSS IN INF, setting to 0!!! mtt_det_z_scores[1]'", ",", "mtt_det_z_scores", "[", "1", "]", ",", "\n", "'mtt_det_tgt_scores[1]'", ",", "mtt_det_tgt_scores", "[", "1", "]", ")", "\n", "# curr_loss = 0", "\n", "curr_loss", "=", "None", "\n", "", "elif", "torch", ".", "isnan", "(", "curr_loss", ")", ":", "\n", "        ", "print", "(", "'!!!!WARNING, CURR LOSS IN NAN, setting to 0!!! mtt_det_z_scores[1]'", ",", "mtt_det_z_scores", "[", "1", "]", ",", "\n", "'mtt_det_tgt_scores[1]'", ",", "mtt_det_tgt_scores", "[", "1", "]", ")", "\n", "# curr_loss = 0", "\n", "curr_loss", "=", "None", "\n", "\n", "", "return", "curr_loss", "\n", "# if curr_loss is not None:", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt.create_target_matrix": [[1057, 1071], ["enumerate", "torch.zeros", "torch.zeros", "cluster2mentions.items", "clusters.tolist", "cluster2mentions[].append", "clusters.size"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist"], ["", "", "def", "create_target_matrix", "(", "clusters", ")", ":", "\n", "    ", "cluster2mentions", "=", "{", "}", "\n", "for", "mention", ",", "cluster", "in", "enumerate", "(", "clusters", ".", "tolist", "(", ")", ")", ":", "\n", "        ", "if", "cluster", "not", "in", "cluster2mentions", ":", "\n", "            ", "cluster2mentions", "[", "cluster", "]", "=", "[", "]", "\n", "", "cluster2mentions", "[", "cluster", "]", ".", "append", "(", "mention", ")", "\n", "\n", "", "number_of_mentions", "=", "clusters", ".", "size", "(", ")", "[", "0", "]", "\n", "target", "=", "torch", ".", "zeros", "(", "number_of_mentions", ",", "number_of_mentions", ",", "device", "=", "settings", ".", "device", ")", "\n", "for", "cluster", ",", "mentions", "in", "cluster2mentions", ".", "items", "(", ")", ":", "\n", "        ", "for", "m1", "in", "mentions", ":", "\n", "            ", "for", "m2", "in", "mentions", ":", "\n", "                ", "target", "[", "m1", ",", "m2", "]", "=", "1", "\n", "", "", "", "return", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_mtt.logZ": [[1073, 1084], ["torch.zeros", "torch.zeros", "torch.exp", "torch.exp", "torch.diag", "torch.diag", "L.logdet", "torch.exp.sum", "scores.size", "scores.size", "torch.eye", "torch.eye"], "function", ["None"], ["", "def", "logZ", "(", "scores", ")", ":", "\n", "    ", "dim", "=", "scores", ".", "size", "(", ")", "[", "0", "]", "+", "1", "\n", "\n", "S", "=", "torch", ".", "zeros", "(", "dim", ",", "dim", ")", "\n", "S", "[", "1", ":", ",", "1", ":", "]", "=", "scores", "\n", "A", "=", "torch", ".", "exp", "(", "S", "+", "torch", ".", "eye", "(", "dim", ")", "*", "-", "10000", ")", "\n", "D", "=", "torch", ".", "diag", "(", "A", ".", "sum", "(", "0", ")", ")", "\n", "L", "=", "D", "-", "A", "\n", "\n", "L", "[", "0", ",", "1", ":", "]", "=", "1", "/", "scores", ".", "size", "(", ")", "[", "0", "]", "\n", "return", "L", ".", "logdet", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coref.TaskCoref.__init__": [[75, 83], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "config.get"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get"], ["    ", "def", "__init__", "(", "self", ",", "task", ",", "dim_input", ",", "config", ")", ":", "\n", "        ", "super", "(", "TaskCoref", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "task", "=", "task", "\n", "self", ".", "dim_hidden", "=", "config", "[", "'dim'", "]", "\n", "self", ".", "left", "=", "nn", ".", "Linear", "(", "dim_input", ",", "self", ".", "dim_hidden", ",", "bias", "=", "False", ")", "\n", "self", ".", "right", "=", "nn", ".", "Linear", "(", "dim_input", ",", "self", ".", "dim_hidden", ",", "bias", "=", "False", ")", "\n", "self", ".", "weight", "=", "config", ".", "get", "(", "'weight'", ",", "1.0", ")", "\n", "self", ".", "enabled", "=", "config", "[", "'enabled'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coref.TaskCoref.forward": [[84, 108], ["coref.TaskCoref.left", "coref.TaskCoref.right().permute", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "metrics.coref.set_backup", "torch.ones().tril().unsqueeze", "torch.ones().tril().unsqueeze", "torch.ones().tril().unsqueeze", "torch.ones().tril().unsqueeze", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.matmul.max().item", "torch.matmul.max().item", "util.sequence.get_mask_from_sequence_lengths", "metrics.coref.decode_m2i", "coref.TaskCoref.right", "torch.ones().tril", "torch.ones().tril", "torch.ones().tril", "torch.ones().tril", "additive_mask.to", "util.math.logsumexp", "lengths.max().item", "torch.matmul.max", "torch.matmul.max", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "lengths.max", "util.sequence.get_mask_from_sequence_lengths.float", "torch.matmul.size", "torch.matmul.size"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.set_backup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.sequence.get_mask_from_sequence_lengths", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.decode_m2i", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.math.logsumexp"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ",", "lengths", ")", ":", "\n", "        ", "l", "=", "self", ".", "left", "(", "inputs", ")", "\n", "r", "=", "self", ".", "right", "(", "inputs", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "scores", "=", "torch", ".", "matmul", "(", "l", ",", "r", ")", "\n", "\n", "set_backup", "(", "scores", ")", "\n", "\n", "# print('->', scores.size(), scores.min().item(), scores.max().item())", "\n", "\n", "triangular_mask", "=", "torch", ".", "ones", "(", "scores", ".", "size", "(", ")", "[", "1", ":", "]", ")", ".", "tril", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "constant", "=", "scores", ".", "max", "(", ")", ".", "item", "(", ")", "+", "100000", "\n", "additive_mask", "=", "(", "1", "-", "triangular_mask", ")", "*", "-", "constant", "\n", "logits", "=", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "scores", "+", "additive_mask", ".", "to", "(", "scores", ".", "device", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "if", "targets", "is", "not", "None", ":", "\n", "            ", "loss", "=", "-", "logsumexp", "(", "logits", "+", "(", "1", "-", "targets", ")", "*", "-", "100000", ")", "\n", "mask", "=", "get_mask_from_sequence_lengths", "(", "lengths", ",", "lengths", ".", "max", "(", ")", ".", "item", "(", ")", ")", "\n", "m2is", "=", "None", "\n", "output", "=", "self", ".", "weight", "*", "(", "mask", ".", "float", "(", ")", "*", "loss", ")", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "None", "\n", "m2is", "=", "decode_m2i", "(", "logits", ",", "lengths", ")", "\n", "\n", "", "return", "output", ",", "logits", ",", "m2is", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coref.TaskCoref.create_metrics": [[109, 112], ["metrics.coref.MetricCoref", "metrics.coref.MetricCoref", "metrics.misc.MetricObjective"], "methods", ["None"], ["", "def", "create_metrics", "(", "self", ")", ":", "\n", "        ", "return", "[", "MetricCoref", "(", "self", ".", "task", ",", "'muc'", ",", "MetricCoref", ".", "muc", ")", ",", "MetricCoref", "(", "self", ".", "task", ",", "'bcubed'", ",", "MetricCoref", ".", "b_cubed", ")", ",", "\n", "MetricObjective", "(", "self", ".", "task", ")", "]", "if", "self", ".", "enabled", "else", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coref.TaskCoref2.__init__": [[116, 123], ["torch.Module.__init__", "modules.graph.create_graph", "config.get", "print"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.graph.create_graph", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["    ", "def", "__init__", "(", "self", ",", "task", ",", "dim_input", ",", "config", ")", ":", "\n", "        ", "super", "(", "TaskCoref2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "task", "=", "task", "\n", "self", ".", "module", "=", "create_graph", "(", "dim_input", ",", "1", ",", "config", "[", "'scorer'", "]", ")", "\n", "self", ".", "weight", "=", "config", ".", "get", "(", "'weight'", ",", "1.0", ")", "\n", "self", ".", "enabled", "=", "config", "[", "'enabled'", "]", "\n", "print", "(", "\"Task {}: enabled={} weight={}\"", ".", "format", "(", "self", ".", "task", ",", "self", ".", "enabled", ",", "self", ".", "weight", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coref.TaskCoref2.set_weight": [[124, 128], ["print"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "set_weight", "(", "self", ",", "W0", ")", ":", "\n", "# self.weight = W0", "\n", "        ", "self", ".", "weight", "=", "0.5", "\n", "print", "(", "\"Task {} weight: {}\"", ".", "format", "(", "self", ".", "task", ",", "self", ".", "weight", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coref.TaskCoref2.forward": [[129, 152], ["torch.ones().tril().unsqueeze().to", "torch.ones().tril().unsqueeze().to", "torch.ones().tril().unsqueeze().to", "torch.ones().tril().unsqueeze().to", "coref.TaskCoref2.module().squeeze", "metrics.coref.set_backup", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "coref.TaskCoref2.max().item", "util.sequence.get_mask_from_sequence_lengths", "metrics.coref.decode_m2i", "torch.ones().tril().unsqueeze", "torch.ones().tril().unsqueeze", "torch.ones().tril().unsqueeze", "torch.ones().tril().unsqueeze", "coref.TaskCoref2.module", "additive_mask.to", "util.math.logsumexp", "lengths.max().item", "coref.TaskCoref2.max", "torch.ones().tril", "torch.ones().tril", "torch.ones().tril", "torch.ones().tril", "lengths.max", "util.sequence.get_mask_from_sequence_lengths.float", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "inputs.size", "inputs.size"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.set_backup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.sequence.get_mask_from_sequence_lengths", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.decode_m2i", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.math.logsumexp"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ",", "lengths", ")", ":", "\n", "        ", "triangular_mask", "=", "torch", ".", "ones", "(", "inputs", ".", "size", "(", ")", "[", "1", "]", ",", "inputs", ".", "size", "(", ")", "[", "1", "]", ")", ".", "tril", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "inputs", ".", "device", ")", "\n", "\n", "scores", "=", "self", ".", "module", "(", "inputs", ",", "triangular_mask", ",", "lengths", "=", "lengths", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "set_backup", "(", "scores", ")", "\n", "\n", "# print('->', scores.size(), scores.min().item(), scores.max().item())", "\n", "\n", "constant", "=", "scores", ".", "max", "(", ")", ".", "item", "(", ")", "+", "100000", "\n", "additive_mask", "=", "(", "1", "-", "triangular_mask", ")", "*", "-", "constant", "\n", "logits", "=", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "scores", "+", "additive_mask", ".", "to", "(", "scores", ".", "device", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "if", "targets", "is", "not", "None", ":", "\n", "            ", "loss", "=", "-", "logsumexp", "(", "logits", "+", "(", "1", "-", "targets", ")", "*", "-", "100000", ")", "\n", "mask", "=", "get_mask_from_sequence_lengths", "(", "lengths", ",", "lengths", ".", "max", "(", ")", ".", "item", "(", ")", ")", "\n", "m2is", "=", "None", "\n", "output", "=", "self", ".", "weight", "*", "(", "mask", ".", "float", "(", ")", "*", "loss", ")", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "None", "\n", "m2is", "=", "decode_m2i", "(", "logits", ",", "lengths", ")", "\n", "\n", "", "return", "output", ",", "logits", ",", "m2is", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coref.TaskCoref2.create_metrics": [[153, 156], ["metrics.coref.MetricCoref", "metrics.coref.MetricCoref", "metrics.misc.MetricObjective"], "methods", ["None"], ["", "def", "create_metrics", "(", "self", ")", ":", "\n", "        ", "return", "[", "MetricCoref", "(", "self", ".", "task", ",", "'muc'", ",", "MetricCoref", ".", "muc", ")", ",", "MetricCoref", "(", "self", ".", "task", ",", "'bcubed'", ",", "MetricCoref", ".", "b_cubed", ")", ",", "\n", "MetricObjective", "(", "self", ".", "task", ")", "]", "if", "self", ".", "enabled", "else", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coref.LossCoref.__init__": [[175, 185], ["torch.Module.__init__", "config.get"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get"], ["    ", "def", "__init__", "(", "self", ",", "task", ",", "config", ")", ":", "\n", "        ", "super", "(", "LossCoref", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "task", "=", "task", "\n", "self", ".", "weight", "=", "config", ".", "get", "(", "'weight'", ",", "1.0", ")", "\n", "self", ".", "enabled", "=", "config", "[", "'enabled'", "]", "\n", "self", ".", "filter_singletons_with_pruner", "=", "config", "[", "'filter_singletons_with_pruner'", "]", "\n", "self", ".", "filter_singletons_with_ner", "=", "config", "[", "'filter_singletons_with_ner'", "]", "\n", "self", ".", "singletons", "=", "self", ".", "filter_singletons_with_pruner", "or", "self", ".", "filter_singletons_with_ner", "# write out singletons to json", "\n", "if", "'singletons'", "in", "config", ":", "\n", "            ", "self", ".", "singletons", "=", "config", "[", "'singletons'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coref.LossCoref.forward": [[188, 239], ["create_coref_target_forward().to", "torch.ones().tril().unsqueeze", "torch.ones().tril().unsqueeze", "torch.ones().tril().unsqueeze", "torch.ones().tril().unsqueeze", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "util.sequence.get_mask_from_sequence_lengths().float", "BaseException", "modules.tasks.coreflinker.predict_scores_coref", "coref.create_coref_target_forward", "scores.max().item", "util.math.logsumexp", "coref.convert", "coref.remove_disabled_spans", "modules.tasks.coreflinker.remove_disabled_scores_coref", "coref.remove_disabled_spans", "torch.ones().tril", "torch.ones().tril", "torch.ones().tril", "torch.ones().tril", "additive_mask.to", "util.sequence.get_mask_from_sequence_lengths", "coref.convert", "zip", "scores.max", "span_lengths.max().item", "zip", "metrics.coref.m2i_to_clusters", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "metrics.coref.m2i_to_clusters", "metrics.coref.decode_m2i", "x.tolist", "span_lengths.max", "scores.size"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.predict_scores_coref", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coref.create_coref_target_forward", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.math.logsumexp", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile.LineFileWriter.convert", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coref.remove_disabled_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.remove_disabled_scores_coref", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coref.remove_disabled_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.sequence.get_mask_from_sequence_lengths", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile.LineFileWriter.convert", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.m2i_to_clusters", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.m2i_to_clusters", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.decode_m2i", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist"], ["", "", "def", "forward", "(", "self", ",", "scores", ",", "gold_m2i", ",", "pred_spans", ",", "gold_spans", ",", "predict", "=", "False", ",", "pruner_spans", "=", "None", ",", "span_lengths", "=", "None", ",", "\n", "ner_spans", "=", "None", ")", ":", "\n", "        ", "output", "=", "{", "}", "\n", "\n", "if", "self", ".", "enabled", "and", "scores", "is", "not", "None", ":", "\n", "# TODO!!! tensorize this function!! take ideas from https://github.com/lxucs/coref-hoi", "\n", "            ", "targets", "=", "create_coref_target_forward", "(", "pred_spans", ",", "gold_spans", ",", "gold_m2i", ")", ".", "to", "(", "scores", ".", "device", ")", "\n", "#", "\n", "if", "scores", "is", "not", "None", ":", "\n", "# span_lengths = torch.LongTensor([len(x) for x in pred_spans]).to(scores.device)", "\n", "\n", "                ", "triangular_mask", "=", "torch", ".", "ones", "(", "scores", ".", "size", "(", ")", "[", "1", ":", "]", ")", ".", "tril", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "constant", "=", "scores", ".", "max", "(", ")", ".", "item", "(", ")", "+", "100000", "\n", "additive_mask", "=", "(", "1", "-", "triangular_mask", ")", "*", "-", "constant", "\n", "logits", "=", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "scores", "+", "additive_mask", ".", "to", "(", "scores", ".", "device", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "if", "scores", "is", "not", "None", "and", "targets", "is", "not", "None", ":", "\n", "                ", "loss", "=", "-", "logsumexp", "(", "logits", "+", "(", "1", "-", "targets", ")", "*", "-", "100000", ")", "\n", "mask", "=", "get_mask_from_sequence_lengths", "(", "span_lengths", ",", "span_lengths", ".", "max", "(", ")", ".", "item", "(", ")", ")", ".", "float", "(", ")", "\n", "output", "[", "'loss'", "]", "=", "self", ".", "weight", "*", "(", "mask", "*", "loss", ")", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "                ", "raise", "BaseException", "(", "\"HUH\"", ")", "\n", "# output['loss'] = torch.tensor(0.0).cuda()", "\n", "\n", "", "if", "predict", ":", "\n", "                ", "output", "[", "'pred'", "]", "=", "[", "convert", "(", "m2i_to_clusters", "(", "x", ")", "[", "0", "]", ",", "y", ")", "for", "x", ",", "y", "in", "\n", "zip", "(", "decode_m2i", "(", "logits", ",", "span_lengths", ")", ",", "pred_spans", ")", "]", "if", "scores", "is", "not", "None", "else", "[", "[", "]", "for", "_", "in", "pred_spans", "]", "\n", "output", "[", "'scores'", "]", "=", "predict_scores_coref", "(", "scores", ",", "pred_spans", "=", "pred_spans", ")", "\n", "\n", "output", "[", "'pred_pointers'", "]", "=", "[", "{", "}", "for", "x", "in", "gold_spans", "]", "\n", "output", "[", "'gold'", "]", "=", "[", "convert", "(", "m2i_to_clusters", "(", "x", ".", "tolist", "(", ")", ")", "[", "0", "]", ",", "y", ")", "for", "x", ",", "y", "in", "zip", "(", "gold_m2i", ",", "gold_spans", ")", "]", "\n", "\n", "if", "self", ".", "filter_singletons_with_pruner", ":", "\n", "# this assumes that pruner is able to predict spans", "\n", "                    ", "output", "[", "'pred'", "]", "=", "remove_disabled_spans", "(", "output", "[", "'pred'", "]", ",", "pruner_spans", ")", "\n", "coref_flat", "=", "[", "{", "item", "for", "sublist", "in", "batch", "for", "item", "in", "sublist", "}", "for", "batch", "in", "output", "[", "'pred'", "]", "]", "\n", "output", "[", "'scores'", "]", "=", "remove_disabled_scores_coref", "(", "output", "[", "'scores'", "]", ",", "coref_flat", ")", "\n", "", "if", "self", ".", "filter_singletons_with_ner", ":", "\n", "                    ", "output", "[", "'pred'", "]", "=", "remove_disabled_spans", "(", "output", "[", "'pred'", "]", ",", "ner_spans", ")", "\n", "\n", "", "", "", "else", ":", "\n", "            ", "output", "[", "'loss'", "]", "=", "0", "# torch.tensor(0.0).cuda() (skip minibatch)", "\n", "# if gold_spans is None:", "\n", "#     gold_spans = []", "\n", "output", "[", "'pred'", "]", "=", "[", "None", "for", "x", "in", "gold_spans", "]", "\n", "output", "[", "'gold'", "]", "=", "[", "None", "for", "x", "in", "gold_spans", "]", "\n", "output", "[", "'scores'", "]", "=", "[", "None", "for", "x", "in", "gold_spans", "]", "\n", "output", "[", "'pred_pointers'", "]", "=", "[", "{", "}", "for", "x", "in", "gold_spans", "]", "\n", "\n", "", "return", "output", "[", "'loss'", "]", ",", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coref.LossCoref.create_metrics": [[240, 254], ["out.extend", "out.append", "out.append", "out.append", "metrics.coref.MetricCoref", "metrics.coref.MetricCoref", "metrics.coref.MetricCoref", "metrics.coref.MetricCorefAverage", "metrics.misc.MetricObjective", "metrics.corefx.MetricCorefExternal"], "methods", ["None"], ["", "def", "create_metrics", "(", "self", ")", ":", "\n", "        ", "out", "=", "[", "]", "\n", "if", "self", ".", "enabled", ":", "\n", "            ", "metrics", "=", "[", "\n", "MetricCoref", "(", "self", ".", "task", ",", "'muc'", ",", "MetricCoref", ".", "muc", ")", ",", "\n", "MetricCoref", "(", "self", ".", "task", ",", "'bcubed'", ",", "MetricCoref", ".", "b_cubed", ",", "verbose", "=", "False", ")", ",", "\n", "MetricCoref", "(", "self", ".", "task", ",", "'ceafe'", ",", "MetricCoref", ".", "ceafe", ",", "verbose", "=", "False", ")", ",", "\n", "]", "\n", "\n", "out", ".", "extend", "(", "metrics", ")", "\n", "out", ".", "append", "(", "MetricCorefAverage", "(", "self", ".", "task", ",", "'avg'", ",", "metrics", ")", ")", "\n", "out", ".", "append", "(", "MetricObjective", "(", "self", ".", "task", ")", ")", "\n", "out", ".", "append", "(", "MetricCorefExternal", "(", "self", ".", "task", ")", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coref.LossBidirectionalCoref.__init__": [[261, 266], ["torch.Module.__init__", "config.get"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get"], ["    ", "def", "__init__", "(", "self", ",", "task", ",", "config", ")", ":", "\n", "        ", "super", "(", "LossBidirectionalCoref", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "task", "=", "task", "\n", "self", ".", "weight", "=", "config", ".", "get", "(", "'weight'", ",", "1.0", ")", "\n", "self", ".", "enabled", "=", "config", "[", "'enabled'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coref.LossBidirectionalCoref.forward": [[267, 309], ["torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.ones().tril().unsqueeze", "torch.ones().tril().unsqueeze", "torch.ones().tril().unsqueeze", "torch.ones().tril().unsqueeze", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "create_coref_target_forward().to", "create_coref_target_backward().to", "util.sequence.get_mask_from_sequence_lengths().float", "BaseException", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "scores.max().item", "additive_mask.permute", "util.math.logsumexp", "util.math.logsumexp", "coref.convert", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.ones().tril", "torch.ones().tril", "torch.ones().tril", "torch.ones().tril", "coref.create_coref_target_forward", "coref.create_coref_target_backward", "util.sequence.get_mask_from_sequence_lengths", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "coref.convert", "zip", "scores.max", "torch.LongTensor().to.max().item", "torch.LongTensor().to.max().item", "zip", "metrics.coref.m2i_to_clusters", "len", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "metrics.coref.m2i_to_clusters", "metrics.coref.decode_m2i", "x.tolist", "torch.LongTensor().to.max", "torch.LongTensor().to.max", "scores.size"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.math.logsumexp", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.math.logsumexp", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile.LineFileWriter.convert", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coref.create_coref_target_forward", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coref.create_coref_target_backward", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.sequence.get_mask_from_sequence_lengths", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile.LineFileWriter.convert", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.m2i_to_clusters", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.m2i_to_clusters", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.decode_m2i", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist"], ["", "def", "forward", "(", "self", ",", "scores", ",", "gold_m2i", ",", "pred_spans", ",", "gold_spans", ",", "predict", "=", "False", ")", ":", "\n", "        ", "output", "=", "{", "}", "\n", "\n", "if", "self", ".", "enabled", ":", "\n", "            ", "if", "scores", "is", "not", "None", ":", "\n", "                ", "lengths", "=", "torch", ".", "LongTensor", "(", "[", "len", "(", "x", ")", "for", "x", "in", "pred_spans", "]", ")", ".", "to", "(", "scores", ".", "device", ")", "\n", "constant", "=", "scores", ".", "max", "(", ")", ".", "item", "(", ")", "+", "100000", "\n", "\n", "triangular_mask", "=", "torch", ".", "ones", "(", "scores", ".", "size", "(", ")", "[", "1", ":", "]", ")", ".", "tril", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "additive_mask", "=", "(", "(", "1", "-", "triangular_mask", ")", "*", "-", "constant", ")", ".", "to", "(", "scores", ".", "device", ")", "\n", "\n", "scores1", "=", "scores", "+", "additive_mask", "\n", "scores2", "=", "scores", "+", "additive_mask", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "logits1", "=", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "scores1", ",", "dim", "=", "-", "1", ")", "\n", "logits2", "=", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "scores2", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "if", "scores", "is", "not", "None", ":", "\n", "                ", "targets1", "=", "create_coref_target_forward", "(", "pred_spans", ",", "gold_spans", ",", "gold_m2i", ")", ".", "to", "(", "scores", ".", "device", ")", "\n", "targets2", "=", "create_coref_target_backward", "(", "pred_spans", ",", "gold_spans", ",", "gold_m2i", ")", ".", "to", "(", "scores", ".", "device", ")", "\n", "\n", "mask", "=", "get_mask_from_sequence_lengths", "(", "lengths", ",", "lengths", ".", "max", "(", ")", ".", "item", "(", ")", ")", ".", "float", "(", ")", "\n", "loss1", "=", "-", "logsumexp", "(", "logits1", "+", "(", "1.0", "-", "targets1", ")", "*", "-", "100000", ")", "\n", "loss2", "=", "-", "logsumexp", "(", "logits2", "+", "(", "1.0", "-", "targets2", ")", "*", "-", "100000", ")", "\n", "obj1", "=", "(", "mask", "*", "loss1", ")", ".", "sum", "(", ")", "\n", "obj2", "=", "(", "mask", "*", "loss2", ")", ".", "sum", "(", ")", "\n", "output", "[", "'loss'", "]", "=", "self", ".", "weight", "*", "(", "obj1", "+", "obj2", ")", "\n", "", "else", ":", "\n", "                ", "raise", "BaseException", "(", "\"HUH\"", ")", "\n", "output", "[", "'loss'", "]", "=", "torch", ".", "tensor", "(", "0.0", ")", ".", "cuda", "(", ")", "\n", "\n", "", "if", "predict", ":", "\n", "                ", "output", "[", "'pred'", "]", "=", "[", "convert", "(", "m2i_to_clusters", "(", "x", ")", "[", "0", "]", ",", "y", ")", "for", "x", ",", "y", "in", "\n", "zip", "(", "decode_m2i", "(", "logits1", ",", "lengths", ")", ",", "pred_spans", ")", "]", "if", "scores", "is", "not", "None", "else", "[", "[", "]", "for", "_", "in", "\n", "pred_spans", "]", "\n", "output", "[", "'gold'", "]", "=", "[", "convert", "(", "m2i_to_clusters", "(", "x", ".", "tolist", "(", ")", ")", "[", "0", "]", ",", "y", ")", "for", "x", ",", "y", "in", "zip", "(", "gold_m2i", ",", "gold_spans", ")", "]", "\n", "", "", "else", ":", "\n", "            ", "output", "[", "'loss'", "]", "=", "torch", ".", "tensor", "(", "0.0", ")", ".", "cuda", "(", ")", "\n", "output", "[", "'pred'", "]", "=", "None", "\n", "output", "[", "'gold'", "]", "=", "None", "\n", "\n", "", "return", "output", "[", "'loss'", "]", ",", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coref.LossBidirectionalCoref.create_metrics": [[310, 322], ["out.extend", "out.append", "out.append", "metrics.coref.MetricCorefAverage", "metrics.misc.MetricObjective", "metrics.coref.MetricCoref", "metrics.coref.MetricCoref", "metrics.coref.MetricCoref"], "methods", ["None"], ["", "def", "create_metrics", "(", "self", ")", ":", "\n", "        ", "metrics", "=", "[", "\n", "MetricCoref", "(", "self", ".", "task", ",", "'muc'", ",", "MetricCoref", ".", "muc", ")", ",", "\n", "MetricCoref", "(", "self", ".", "task", ",", "'bcubed'", ",", "MetricCoref", ".", "b_cubed", ",", "verbose", "=", "False", ")", ",", "\n", "MetricCoref", "(", "self", ".", "task", ",", "'ceafe'", ",", "MetricCoref", ".", "ceafe", ",", "verbose", "=", "False", ")", ",", "\n", "]", "if", "self", ".", "enabled", "else", "[", "]", "\n", "\n", "out", "=", "[", "]", "\n", "out", ".", "extend", "(", "metrics", ")", "\n", "out", ".", "append", "(", "MetricCorefAverage", "(", "self", ".", "task", ",", "'avg'", ",", "metrics", ")", ")", "\n", "out", ".", "append", "(", "MetricObjective", "(", "self", ".", "task", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coref.TaskCorefMTT.__init__": [[358, 361], ["torch.Module.__init__", "modules.graph.create_graph"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.graph.create_graph"], ["    ", "def", "__init__", "(", "self", ",", "dim_input", ",", "config", ")", ":", "\n", "        ", "super", "(", "TaskCorefMTT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "module", "=", "create_graph", "(", "dim_input", ",", "1", ",", "config", "[", "'scorer'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coref.TaskCorefMTT.forward": [[362, 372], ["coref.TaskCorefMTT.module().squeeze().squeeze", "create_target_matrix().to", "coref.logZ", "coref.logZ", "coref.TaskCorefMTT.max", "coref.TaskCorefMTT.module().squeeze", "coref.create_target_matrix", "coref.TaskCorefMTT.module"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coref.logZ", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coref.logZ", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coref.create_target_matrix"], ["", "def", "forward", "(", "self", ",", "mentions", ",", "clusters", ")", ":", "\n", "        ", "scores", "=", "self", ".", "module", "(", "mentions", ")", ".", "squeeze", "(", "-", "1", ")", ".", "squeeze", "(", "0", ")", "\n", "targets", "=", "create_target_matrix", "(", "clusters", "[", "0", "]", ")", ".", "to", "(", "scores", ".", "device", ")", "\n", "\n", "scores", "=", "scores", "-", "scores", ".", "max", "(", ")", "\n", "\n", "g", "=", "logZ", "(", "scores", "+", "(", "1", "-", "targets", ")", "*", "-", "10000", ")", "\n", "z", "=", "logZ", "(", "scores", ")", "\n", "\n", "return", "z", "-", "g", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coref.create_coref_target_forward": [[16, 39], ["len", "max", "torch.zeros", "torch.zeros", "enumerate", "zip", "enumerate", "enumerate", "len", "clusters[].item", "enumerate"], "function", ["None"], ["def", "create_coref_target_forward", "(", "pred_spans", ",", "gold_spans", ",", "gold_clusters", ")", ":", "\n", "    ", "num_batch", "=", "len", "(", "pred_spans", ")", "\n", "max_spans", "=", "max", "(", "[", "len", "(", "x", ")", "for", "x", "in", "pred_spans", "]", ")", "\n", "\n", "targets", "=", "torch", ".", "zeros", "(", "num_batch", ",", "max_spans", ",", "max_spans", ")", "\n", "\n", "for", "batch", ",", "(", "pred", ",", "gold", ",", "clusters", ")", "in", "enumerate", "(", "zip", "(", "pred_spans", ",", "gold_spans", ",", "gold_clusters", ")", ")", ":", "\n", "        ", "gold2cluster", "=", "{", "}", "\n", "for", "idx", ",", "span", "in", "enumerate", "(", "gold", ")", ":", "\n", "            ", "gold2cluster", "[", "span", "]", "=", "clusters", "[", "idx", "]", ".", "item", "(", ")", "\n", "\n", "", "for", "idx1", ",", "span1", "in", "enumerate", "(", "pred", ")", ":", "\n", "            ", "num_found", "=", "0", "\n", "if", "span1", "in", "gold2cluster", ":", "\n", "                ", "for", "idx2", ",", "span2", "in", "enumerate", "(", "pred", ")", ":", "\n", "                    ", "if", "idx2", "<", "idx1", "and", "span2", "in", "gold2cluster", "and", "gold2cluster", "[", "span1", "]", "==", "gold2cluster", "[", "span2", "]", ":", "\n", "                        ", "targets", "[", "batch", ",", "idx1", ",", "idx2", "]", "=", "1.0", "\n", "num_found", "+=", "1", "\n", "\n", "", "", "", "if", "num_found", "==", "0", ":", "\n", "                ", "targets", "[", "batch", ",", "idx1", ",", "idx1", "]", "=", "1.0", "\n", "\n", "", "", "", "return", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coref.create_coref_target_backward": [[41, 64], ["len", "max", "torch.zeros", "torch.zeros", "enumerate", "zip", "enumerate", "enumerate", "len", "clusters[].item", "enumerate"], "function", ["None"], ["", "def", "create_coref_target_backward", "(", "pred_spans", ",", "gold_spans", ",", "gold_clusters", ")", ":", "\n", "    ", "num_batch", "=", "len", "(", "pred_spans", ")", "\n", "max_spans", "=", "max", "(", "[", "len", "(", "x", ")", "for", "x", "in", "pred_spans", "]", ")", "\n", "\n", "targets", "=", "torch", ".", "zeros", "(", "num_batch", ",", "max_spans", ",", "max_spans", ")", "\n", "\n", "for", "batch", ",", "(", "pred", ",", "gold", ",", "clusters", ")", "in", "enumerate", "(", "zip", "(", "pred_spans", ",", "gold_spans", ",", "gold_clusters", ")", ")", ":", "\n", "        ", "gold2cluster", "=", "{", "}", "\n", "for", "idx", ",", "span", "in", "enumerate", "(", "gold", ")", ":", "\n", "            ", "gold2cluster", "[", "span", "]", "=", "clusters", "[", "idx", "]", ".", "item", "(", ")", "\n", "\n", "", "for", "idx1", ",", "span1", "in", "enumerate", "(", "pred", ")", ":", "\n", "            ", "num_found", "=", "0", "\n", "if", "span1", "in", "gold2cluster", ":", "\n", "                ", "for", "idx2", ",", "span2", "in", "enumerate", "(", "pred", ")", ":", "\n", "                    ", "if", "idx2", ">", "idx1", "and", "span2", "in", "gold2cluster", "and", "gold2cluster", "[", "span1", "]", "==", "gold2cluster", "[", "span2", "]", ":", "\n", "                        ", "targets", "[", "batch", ",", "idx1", ",", "idx2", "]", "=", "1.0", "\n", "num_found", "+=", "1", "\n", "\n", "", "", "", "if", "num_found", "==", "0", ":", "\n", "                ", "targets", "[", "batch", ",", "idx1", ",", "idx1", "]", "=", "1.0", "\n", "\n", "", "", "", "return", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coref.create_coref": [[66, 71], ["coref.LossCoref", "modules.tasks.coref_edmonds.LossCorefEdmonds"], "function", ["None"], ["", "def", "create_coref", "(", "config", ")", ":", "\n", "    ", "if", "config", "[", "'type'", "]", "==", "'coref-a'", ":", "\n", "        ", "return", "LossCoref", "(", "'coref'", ",", "config", ")", "\n", "", "elif", "config", "[", "'type'", "]", "==", "'coref-e'", ":", "\n", "        ", "return", "LossCorefEdmonds", "(", "'coref'", ",", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coref.convert": [[158, 161], ["None"], "function", ["None"], ["", "", "def", "convert", "(", "clusters", ",", "spans", ")", ":", "\n", "    ", "out", "=", "[", "[", "spans", "[", "m", "]", "for", "m", "in", "cluster", "]", "for", "cluster", "in", "clusters", "]", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coref.remove_disabled_spans": [[164, 170], ["zip", "set", "out.append", "len"], "function", ["None"], ["", "def", "remove_disabled_spans", "(", "clusters", ",", "enabled_spans", ")", ":", "\n", "    ", "out", "=", "[", "]", "\n", "for", "cs", ",", "spans", "in", "zip", "(", "clusters", ",", "enabled_spans", ")", ":", "\n", "        ", "enabled", "=", "set", "(", "spans", ")", "\n", "out", ".", "append", "(", "[", "cluster", "for", "cluster", "in", "cs", "if", "len", "(", "cluster", ")", ">", "1", "or", "cluster", "[", "0", "]", "in", "enabled", "]", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coref.create_target_matrix": [[327, 341], ["enumerate", "torch.zeros", "torch.zeros", "cluster2mentions.items", "clusters.tolist", "cluster2mentions[].append", "clusters.size"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist"], ["", "", "def", "create_target_matrix", "(", "clusters", ")", ":", "\n", "    ", "cluster2mentions", "=", "{", "}", "\n", "for", "mention", ",", "cluster", "in", "enumerate", "(", "clusters", ".", "tolist", "(", ")", ")", ":", "\n", "        ", "if", "cluster", "not", "in", "cluster2mentions", ":", "\n", "            ", "cluster2mentions", "[", "cluster", "]", "=", "[", "]", "\n", "", "cluster2mentions", "[", "cluster", "]", ".", "append", "(", "mention", ")", "\n", "\n", "", "number_of_mentions", "=", "clusters", ".", "size", "(", ")", "[", "0", "]", "\n", "target", "=", "torch", ".", "zeros", "(", "number_of_mentions", ",", "number_of_mentions", ")", "\n", "for", "cluster", ",", "mentions", "in", "cluster2mentions", ".", "items", "(", ")", ":", "\n", "        ", "for", "m1", "in", "mentions", ":", "\n", "            ", "for", "m2", "in", "mentions", ":", "\n", "                ", "target", "[", "m1", ",", "m2", "]", "=", "1", "\n", "", "", "", "return", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coref.logZ": [[343, 354], ["torch.zeros", "torch.zeros", "torch.exp", "torch.exp", "torch.diag", "torch.diag", "L.logdet", "torch.exp.sum", "scores.size", "scores.size", "torch.eye", "torch.eye"], "function", ["None"], ["", "def", "logZ", "(", "scores", ")", ":", "\n", "    ", "dim", "=", "scores", ".", "size", "(", ")", "[", "0", "]", "+", "1", "\n", "\n", "S", "=", "torch", ".", "zeros", "(", "dim", ",", "dim", ")", "\n", "S", "[", "1", ":", ",", "1", ":", "]", "=", "scores", "\n", "A", "=", "torch", ".", "exp", "(", "S", "+", "torch", ".", "eye", "(", "dim", ")", "*", "-", "10000", ")", "\n", "D", "=", "torch", ".", "diag", "(", "A", ".", "sum", "(", "0", ")", ")", "\n", "L", "=", "D", "-", "A", "\n", "\n", "L", "[", "0", ",", "1", ":", "]", "=", "1", "/", "scores", ".", "size", "(", ")", "[", "0", "]", "\n", "return", "L", ".", "logdet", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.relations.TaskRelations.__init__": [[43, 59], ["torch.Module.__init__", "len", "modules.graph.create_graph", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "config.get", "config.get", "print", "config.get", "len", "config.get"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.graph.create_graph", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get"], ["    ", "def", "__init__", "(", "self", ",", "dim_input", ",", "config", ",", "labels", ")", ":", "\n", "        ", "super", "(", "TaskRelations", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_relations", "=", "len", "(", "labels", ")", "\n", "self", ".", "module", "=", "create_graph", "(", "dim_input", ",", "self", ".", "num_relations", ",", "config", "[", "'scorer'", "]", ")", "\n", "self", ".", "loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", "reduction", "=", "'none'", ")", "\n", "self", ".", "labels", "=", "labels", "\n", "W0", "=", "config", ".", "get", "(", "'weight'", ",", "1.0", ")", "\n", "self", ".", "weight", "=", "W0", "/", "len", "(", "self", ".", "labels", ")", "if", "config", ".", "get", "(", "'normalize'", ",", "False", ")", "else", "W0", "\n", "self", ".", "divide_by_number_of_concepts", "=", "config", ".", "get", "(", "'divide_by_number_of_concepts'", ",", "True", ")", "\n", "self", ".", "enabled", "=", "config", "[", "'enabled'", "]", "\n", "print", "(", "\"Task relations: enabled={} weight={} normalize={} divide_by_number_of_concepts={}\"", ".", "format", "(", "self", ".", "enabled", ",", "\n", "self", ".", "weight", ",", "\n", "config", ".", "get", "(", "\n", "'normalize'", ",", "\n", "False", ")", ",", "\n", "self", ".", "divide_by_number_of_concepts", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.relations.TaskRelations.set_weight": [[60, 64], ["print", "len"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "set_weight", "(", "self", ",", "W0", ")", ":", "\n", "        ", "self", ".", "weight", "=", "3", "/", "len", "(", "self", ".", "labels", ")", "\n", "print", "(", "\"Task {} weight: {}\"", ".", "format", "(", "'relations'", ",", "self", ".", "weight", ")", ")", "\n", "self", ".", "divide_by_number_of_concepts", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.relations.TaskRelations.forward": [[65, 84], ["util.sequence.get_mask_from_sequence_lengths", "relations.TaskRelations.module", "scores.permute.permute.permute", "concept_lengths.max().item", "relations.TaskRelations.loss", "metrics.f1.decode_relations", "util.sequence.get_mask_from_sequence_lengths.float", "concept_lengths.unsqueeze().float", "relations.masked_sum", "concept_lengths.max", "concept_lengths.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.sequence.get_mask_from_sequence_lengths", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.decode_relations", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.relations.masked_sum"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ",", "concept_lengths", ",", "square_mask", ")", ":", "\n", "        ", "mask", "=", "get_mask_from_sequence_lengths", "(", "concept_lengths", ",", "concept_lengths", ".", "max", "(", ")", ".", "item", "(", ")", ")", "\n", "if", "self", ".", "divide_by_number_of_concepts", ":", "\n", "            ", "mask", "=", "mask", ".", "float", "(", ")", "/", "concept_lengths", ".", "unsqueeze", "(", "1", ")", ".", "float", "(", ")", "# dunno if this helps?", "\n", "\n", "", "scores", "=", "self", ".", "module", "(", "inputs", ",", "square_mask", ")", "\n", "scores", "=", "scores", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n", "if", "targets", "is", "not", "None", ":", "\n", "            ", "obj", "=", "self", ".", "loss", "(", "scores", ",", "targets", ")", "\n", "obj", "=", "self", ".", "weight", "*", "masked_sum", "(", "obj", ",", "mask", ")", "\n", "predictions", "=", "None", "\n", "", "else", ":", "\n", "            ", "obj", "=", "None", "\n", "predictions", "=", "decode_relations", "(", "scores", ",", "concept_lengths", ",", "self", ".", "labels", ")", "\n", "\n", "# print('obj:', obj.item())", "\n", "\n", "", "return", "obj", ",", "scores", ",", "predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.relations.TaskRelations.create_metrics": [[85, 87], ["metrics.f1.MetricRelationF1", "metrics.misc.MetricObjective"], "methods", ["None"], ["", "def", "create_metrics", "(", "self", ")", ":", "\n", "        ", "return", "[", "MetricRelationF1", "(", "'relations'", ",", "self", ".", "labels", ")", ",", "MetricObjective", "(", "'relations'", ")", "]", "if", "self", ".", "enabled", "else", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.relations.LossRelationsOld.__init__": [[132, 139], ["torch.Module.__init__", "len", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "len"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "labels", ")", ":", "\n", "        ", "super", "(", "LossRelationsOld", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_relations", "=", "len", "(", "labels", ")", "\n", "self", ".", "loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", "reduction", "=", "'none'", ")", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "weight", "=", "config", "[", "'weight'", "]", "/", "len", "(", "self", ".", "labels", ")", "\n", "self", ".", "enabled", "=", "config", "[", "'enabled'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.relations.LossRelationsOld.forward": [[140, 153], ["relations.LossRelationsOld.loss", "metrics.f1.decode_relations", "mention_scores.permute", "mention_mask.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.decode_relations"], ["", "def", "forward", "(", "self", ",", "mention_scores", ",", "mention_targets", ",", "mention_lengths", ",", "mention_mask", ",", "mapping", ",", "concept_lengths", ")", ":", "\n", "        ", "if", "mention_targets", "is", "not", "None", ":", "\n", "            ", "obj", "=", "self", ".", "loss", "(", "mention_scores", ",", "mention_targets", ")", "\n", "obj", "=", "self", ".", "weight", "*", "(", "obj", "*", "mention_mask", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "sum", "(", ")", "\n", "predictions", "=", "None", "\n", "", "else", ":", "\n", "# TODO: fix reordering", "\n", "            ", "obj", "=", "None", "\n", "predictions", "=", "decode_relations", "(", "mention_scores", ",", "concept_lengths", ",", "self", ".", "labels", ")", "\n", "\n", "# print('obj:', obj.item())", "\n", "\n", "", "return", "obj", ",", "mention_scores", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ",", "predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.relations.LossRelationsOld.create_metrics": [[154, 156], ["metrics.f1.MetricRelationF1", "metrics.misc.MetricObjective"], "methods", ["None"], ["", "def", "create_metrics", "(", "self", ")", ":", "\n", "        ", "return", "[", "MetricRelationF1", "(", "'relations'", ",", "self", ".", "labels", ")", ",", "MetricObjective", "(", "'relations'", ")", "]", "if", "self", ".", "enabled", "else", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.relations.LossRelations.__init__": [[160, 169], ["torch.Module.__init__", "len", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "len"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "config", ",", "labels", ")", ":", "\n", "        ", "super", "(", "LossRelations", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "num_relations", "=", "len", "(", "labels", ")", "\n", "self", ".", "loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", "reduction", "=", "'none'", ")", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "enabled", "=", "config", "[", "'enabled'", "]", "\n", "self", ".", "weight", "=", "config", "[", "'weight'", "]", "/", "len", "(", "self", ".", "labels", ")", "\n", "self", ".", "debug", "=", "config", "[", "'debug'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.relations.LossRelations.forward": [[170, 210], ["torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "modules.relations.latent.decode_relations_new", "len", "modules.relations.latent.sum_scores", "modules.relations.latent.decode_relations_new", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "modules.relations.latent.sum_scores", "zip", "len", "zip", "zip", "relations.LossRelations.loss", "mention_mask.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.relations.latent.decode_relations_new", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.relations.latent.sum_scores", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.relations.latent.decode_relations_new", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.relations.latent.sum_scores"], ["", "def", "forward", "(", "self", ",", "mention_scores", ",", "mention_targets", ",", "mention_lengths", ",", "mention_mask", ",", "mapping", ",", "coref", ",", "relations", ",", "\n", "predict", "=", "False", ")", ":", "\n", "        ", "output", "=", "{", "}", "\n", "\n", "if", "self", ".", "enabled", "and", "mention_targets", "is", "not", "None", ":", "\n", "            ", "obj", "=", "self", ".", "weight", "*", "(", "self", ".", "loss", "(", "mention_scores", ",", "mention_targets", ")", "*", "mention_mask", ".", "unsqueeze", "(", "\n", "-", "1", ")", ")", ".", "sum", "(", ")", "/", "self", ".", "num_relations", "\n", "", "else", ":", "\n", "            ", "obj", "=", "torch", ".", "tensor", "(", "0.0", ")", ".", "cuda", "(", ")", "\n", "\n", "", "output", "[", "'loss'", "]", "=", "obj", "\n", "\n", "concept_targets", "=", "(", "sum_scores", "(", "mention_targets", ",", "mapping", ")", ">", "0", ")", ".", "float", "(", ")", "\n", "\n", "if", "mention_targets", "is", "not", "None", ":", "\n", "            ", "concept_lengths", "=", "[", "len", "(", "x", ")", "for", "x", "in", "coref", "[", "'pred'", "]", "]", "\n", "mytargets", "=", "decode_relations_new", "(", "concept_targets", ",", "concept_lengths", ",", "self", ".", "labels", ")", "\n", "output", "[", "'target'", "]", "=", "[", "[", "(", "clusters", "[", "src", "]", ",", "clusters", "[", "dst", "]", ",", "rel", ")", "for", "src", ",", "dst", ",", "rel", "in", "triples", "]", "for", "clusters", ",", "triples", "\n", "in", "zip", "(", "coref", "[", "'pred'", "]", ",", "mytargets", ")", "]", "\n", "\n", "", "if", "predict", ":", "\n", "            ", "if", "mention_scores", "is", "None", ":", "\n", "                ", "output", "[", "'pred'", "]", "=", "[", "[", "]", "for", "x", "in", "coref", "[", "'pred'", "]", "]", "\n", "", "else", ":", "\n", "# print('min:', mention_scores.min().item())", "\n", "# print('max:', mention_scores.max().item())", "\n", "                ", "pred_mentions", "=", "(", "mention_scores", ">", "0", ")", ".", "float", "(", ")", "\n", "pred_concepts", "=", "sum_scores", "(", "pred_mentions", ",", "mapping", ")", "\n", "pred_concepts", "=", "(", "pred_concepts", ">", "0", ")", ".", "float", "(", ")", "\n", "\n", "concept_lengths", "=", "[", "len", "(", "x", ")", "for", "x", "in", "coref", "[", "'pred'", "]", "]", "\n", "predictions", "=", "decode_relations_new", "(", "pred_concepts", ",", "concept_lengths", ",", "self", ".", "labels", ")", "\n", "output", "[", "'pred'", "]", "=", "[", "[", "(", "clusters", "[", "src", "]", ",", "clusters", "[", "dst", "]", ",", "rel", ")", "for", "src", ",", "dst", ",", "rel", "in", "triples", "]", "for", "\n", "clusters", ",", "triples", "in", "zip", "(", "coref", "[", "'pred'", "]", ",", "predictions", ")", "]", "\n", "\n", "", "output", "[", "'gold'", "]", "=", "[", "[", "(", "clusters", "[", "src", "]", ",", "clusters", "[", "dst", "]", ",", "self", ".", "labels", "[", "rel", "]", ")", "for", "src", ",", "dst", ",", "rel", "in", "triples", "]", "for", "\n", "clusters", ",", "(", "_", ",", "triples", ",", "_", ")", "in", "\n", "zip", "(", "relations", "[", "'gold_clusters2'", "]", ",", "relations", "[", "'gold_relations'", "]", ")", "]", "\n", "\n", "", "return", "output", "[", "'loss'", "]", ",", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.relations.LossRelations.create_metrics": [[211, 214], ["metrics.relations.MetricConceptRelationSoftF1", "metrics.misc.MetricObjective"], "methods", ["None"], ["", "def", "create_metrics", "(", "self", ")", ":", "\n", "        ", "return", "[", "MetricConceptRelationSoftF1", "(", "self", ".", "name", ",", "self", ".", "labels", ",", "verbose", "=", "self", ".", "debug", ")", ",", "\n", "MetricObjective", "(", "self", ".", "name", ")", "]", "if", "self", ".", "enabled", "else", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.relations.LossRelationsLatent.__init__": [[218, 229], ["torch.Module.__init__", "len", "len"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "config", ",", "labels", ")", ":", "\n", "        ", "super", "(", "LossRelationsLatent", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "num_relations", "=", "len", "(", "labels", ")", "\n", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "enabled", "=", "config", "[", "'enabled'", "]", "\n", "self", ".", "weight", "=", "config", "[", "'weight'", "]", "/", "len", "(", "self", ".", "labels", ")", "\n", "self", ".", "latent", "=", "True", "\n", "self", ".", "old_implementation", "=", "False", "\n", "self", ".", "debug", "=", "config", "[", "'debug'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.relations.LossRelationsLatent.forward": [[230, 346], ["torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "modules.relations.latent.decode_relations_new", "torch.logsigmoid", "torch.logsigmoid", "torch.logsigmoid", "torch.logsigmoid", "torch.logsigmoid", "torch.logsigmoid", "modules.relations.latent.sum_scores", "modules.relations.latent.sum_scores", "len", "modules.relations.latent.sum_scores", "modules.relations.latent.decode_relations_new", "torch.logsigmoid", "torch.logsigmoid", "torch.logsigmoid", "modules.relations.latent.sum_scores", "relations.inspect", "modules.relations.latent.sum_scores", "mention_mask.unsqueeze", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "zip", "len", "zip", "modules.relations.latent.sum_scores", "print", "relations.log1mex", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "mapping.double", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "loss2.sum", "zip", "tmp.sum().item", "loss.sum", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "loss.sum", "modules.relations.latent.sum_scores", "modules.relations.latent.sum_scores", "mention_scores.double", "torch.expm1", "torch.expm1", "torch.expm1", "torch.expm1", "torch.expm1", "torch.expm1", "torch.expm1", "torch.expm1", "torch.expm1", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "tmp.sum", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "mention_scores.size", "mention_scores.size"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.relations.latent.decode_relations_new", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.relations.latent.sum_scores", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.relations.latent.sum_scores", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.relations.latent.sum_scores", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.relations.latent.decode_relations_new", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.relations.latent.sum_scores", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.ncr3.CheckGradient.inspect", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.relations.latent.sum_scores", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.relations.latent.sum_scores", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.relations.log1mex", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.relations.latent.sum_scores", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.relations.latent.sum_scores"], ["", "def", "forward", "(", "self", ",", "mention_scores", ",", "mention_targets", ",", "mention_lengths", ",", "mention_mask", ",", "mapping", ",", "coref", ",", "relations", ",", "\n", "predict", "=", "False", ")", ":", "\n", "        ", "output", "=", "{", "}", "\n", "\n", "# if mention_scores is not None:", "\n", "#     print('mention_scores:', mention_scores.size())", "\n", "# if mention_targets is not None:", "\n", "#     print('mention_targets:', mention_targets.size())", "\n", "\n", "if", "mention_targets", "is", "not", "None", ":", "\n", "# print('relations active', mention_targets.sum().item())", "\n", "\n", "            ", "concept_targets", "=", "(", "sum_scores", "(", "mention_targets", ",", "mapping", ")", ">", "0", ")", ".", "float", "(", ")", "\n", "\n", "if", "self", ".", "latent", ":", "\n", "                ", "if", "self", ".", "old_implementation", ":", "\n", "# not all concept pairs have mention pairs", "\n", "                    ", "mask", "=", "(", "sum_scores", "(", "torch", ".", "ones", "(", "mention_scores", ".", "size", "(", ")", ")", ".", "cuda", "(", ")", ",", "mapping", ")", ">", "0", ")", ".", "float", "(", ")", "\n", "\n", "mention_logits", "=", "F", ".", "logsigmoid", "(", "-", "mention_scores", ")", "# [-inf, 0]", "\n", "concept_logits", "=", "sum_scores", "(", "mention_logits", ",", "mapping", ")", "\n", "\n", "if", "self", ".", "debug", ":", "\n", "                        ", "tmp", "=", "(", "concept_logits", "*", "mask", "==", "0", ")", ".", "float", "(", ")", "*", "mask", "\n", "print", "(", "'tmp:'", ",", "tmp", ".", "sum", "(", ")", ".", "item", "(", ")", ")", "# shouldn't this be zero?", "\n", "\n", "# print('->', (concept_logits * mask).min(), (concept_logits * mask).max())", "\n", "# print('->', (concept_logits * (1-mask)).min(), (concept_logits * (1-mask)).max())", "\n", "\n", "# print('logits:', concept_logits.sum(-1))", "\n", "\n", "# TODO: can we remove this? sign of possible simplification of loss equation?", "\n", "", "x", "=", "concept_logits", "-", "1e-8", "\n", "# x = concept_logits - (1-mask) * 100000 - 1e-8", "\n", "\n", "# concept_logits.register_hook(lambda grad: debug_grad(x, grad))", "\n", "\n", "inspect", "(", "x", ")", "\n", "\n", "loss", "=", "concept_targets", "*", "log1mex", "(", "x", ")", "\n", "loss", "+=", "(", "1", "-", "concept_targets", ")", "*", "concept_logits", "\n", "loss", "*=", "mask", "\n", "\n", "# print('nan:', torch.isnan(loss).any()) ", "\n", "\n", "obj", "=", "-", "self", ".", "weight", "*", "loss", ".", "sum", "(", ")", "/", "self", ".", "num_relations", "\n", "", "else", ":", "\n", "                    ", "mask", "=", "(", "sum_scores", "(", "torch", ".", "ones", "(", "mention_scores", ".", "size", "(", ")", ")", ".", "cuda", "(", ")", ",", "mapping", ")", ">", "0", ")", ".", "float", "(", ")", "\n", "\n", "mention_logits", "=", "-", "torch", ".", "log1p", "(", "torch", ".", "exp", "(", "mention_scores", ".", "double", "(", ")", ")", ")", "\n", "# print('mention_logits:', mention_logits.min().item(), mention_logits.max().item())", "\n", "concept_logits", "=", "sum_scores", "(", "mention_logits", ",", "mapping", ".", "double", "(", ")", ")", "\n", "concept_logits", "=", "concept_logits", "+", "(", "1.0", "-", "mask", ")", "*", "-", "10000", "\n", "# print('concept_logits:', concept_logits.min().item(), concept_logits.max().item())", "\n", "\n", "loss", "=", "concept_targets", "*", "torch", ".", "log", "(", "-", "torch", ".", "expm1", "(", "concept_logits", "-", "1e-100", ")", ")", "\n", "# print('loss:', loss.min().item(), loss.max().item())", "\n", "loss", "+=", "(", "1", "-", "concept_targets", ")", "*", "concept_logits", "\n", "loss", "*=", "mask", "\n", "\n", "# print('nan:', torch.isnan(loss).any()) ", "\n", "\n", "obj", "=", "-", "self", ".", "weight", "*", "loss", ".", "sum", "(", ")", "/", "self", ".", "num_relations", "\n", "", "", "else", ":", "\n", "                ", "pos_logits", "=", "F", ".", "logsigmoid", "(", "mention_scores", ")", "\n", "neg_logits", "=", "F", ".", "logsigmoid", "(", "-", "mention_scores", ")", "\n", "loss", "=", "mention_targets", "*", "pos_logits", "+", "(", "1", "-", "mention_targets", ")", "*", "neg_logits", "\n", "loss", "=", "loss", "*", "mention_mask", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "pos_logits2", "=", "sum_scores", "(", "pos_logits", ",", "mapping", ")", "\n", "neg_logits2", "=", "sum_scores", "(", "neg_logits", ",", "mapping", ")", "\n", "loss2", "=", "concept_targets", "*", "pos_logits2", "+", "(", "1", "-", "concept_targets", ")", "*", "neg_logits2", "\n", "\n", "# print('->', (loss.sum()-loss2.sum()).item())", "\n", "\n", "obj", "=", "-", "self", ".", "weight", "*", "loss2", ".", "sum", "(", ")", "/", "self", ".", "num_relations", "\n", "", "", "else", ":", "\n", "            ", "obj", "=", "torch", ".", "tensor", "(", "0.0", ")", ".", "cuda", "(", ")", "\n", "\n", "", "output", "[", "'loss'", "]", "=", "obj", "\n", "\n", "if", "mention_targets", "is", "not", "None", ":", "\n", "            ", "concept_lengths", "=", "[", "len", "(", "x", ")", "for", "x", "in", "coref", "[", "'pred'", "]", "]", "\n", "mytargets", "=", "decode_relations_new", "(", "concept_targets", ",", "concept_lengths", ",", "self", ".", "labels", ")", "\n", "output", "[", "'target'", "]", "=", "[", "[", "(", "clusters", "[", "src", "]", ",", "clusters", "[", "dst", "]", ",", "rel", ")", "for", "src", ",", "dst", ",", "rel", "in", "triples", "]", "for", "clusters", ",", "triples", "\n", "in", "zip", "(", "coref", "[", "'pred'", "]", ",", "mytargets", ")", "]", "\n", "\n", "", "if", "predict", ":", "\n", "            ", "if", "mention_scores", "is", "None", ":", "\n", "                ", "output", "[", "'pred'", "]", "=", "[", "[", "]", "for", "x", "in", "coref", "[", "'pred'", "]", "]", "\n", "", "else", ":", "\n", "# print('min:', mention_scores.min().item())", "\n", "# print('max:', mention_scores.max().item())", "\n", "                ", "pred_mentions", "=", "(", "mention_scores", ">", "0", ")", ".", "float", "(", ")", "\n", "pred_concepts", "=", "sum_scores", "(", "pred_mentions", ",", "mapping", ")", "\n", "pred_concepts", "=", "(", "pred_concepts", ">", "0", ")", ".", "float", "(", ")", "\n", "\n", "concept_lengths", "=", "[", "len", "(", "x", ")", "for", "x", "in", "coref", "[", "'pred'", "]", "]", "\n", "predictions", "=", "decode_relations_new", "(", "pred_concepts", ",", "concept_lengths", ",", "self", ".", "labels", ")", "\n", "output", "[", "'pred'", "]", "=", "[", "[", "(", "clusters", "[", "src", "]", ",", "clusters", "[", "dst", "]", ",", "rel", ")", "for", "src", ",", "dst", ",", "rel", "in", "triples", "]", "for", "\n", "clusters", ",", "triples", "in", "zip", "(", "coref", "[", "'pred'", "]", ",", "predictions", ")", "]", "\n", "\n", "", "output", "[", "'gold'", "]", "=", "[", "[", "(", "clusters", "[", "src", "]", ",", "clusters", "[", "dst", "]", ",", "self", ".", "labels", "[", "rel", "]", ")", "for", "src", ",", "dst", ",", "rel", "in", "triples", "]", "for", "\n", "clusters", ",", "(", "_", ",", "triples", ",", "_", ")", "in", "\n", "zip", "(", "relations", "[", "'gold_clusters2'", "]", ",", "relations", "[", "'gold_relations'", "]", ")", "]", "\n", "\n", "# gold = []", "\n", "# for clusters, relations in zip(coref['gold'], relations['gold_relations']):", "\n", "#     print('clusters:', len(clusters))", "\n", "#     for src, dst, rel in relations[1]:", "\n", "#         print(src, dst, rel)", "\n", "#         gold.append((clusters[src], rel, clusters[dst]))", "\n", "# print('gold:', gold)", "\n", "\n", "# return obj, mention_scores.permute(0, 3, 1, 2), predictions", "\n", "", "return", "output", "[", "'loss'", "]", ",", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.relations.LossRelationsLatent.create_metrics": [[347, 352], ["metrics.relations.MetricConceptRelationSoftF1", "metrics.misc.MetricObjective"], "methods", ["None"], ["", "def", "create_metrics", "(", "self", ")", ":", "\n", "# MetricRelationF1('relations', self.labels), ", "\n", "# , MetricObjective('relations')", "\n", "        ", "return", "[", "MetricConceptRelationSoftF1", "(", "self", ".", "name", ",", "self", ".", "labels", ",", "verbose", "=", "self", ".", "debug", ")", ",", "\n", "MetricObjective", "(", "self", ".", "name", ")", "]", "if", "self", ".", "enabled", "else", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.relations.LossRelationsNew.__init__": [[356, 364], ["torch.Module.__init__", "len", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "len"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "labels", ")", ":", "\n", "        ", "super", "(", "LossRelationsNew", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_relations", "=", "len", "(", "labels", ")", "\n", "self", ".", "loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", "reduction", "=", "'none'", ")", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "weight", "=", "config", "[", "'weight'", "]", "/", "len", "(", "self", ".", "labels", ")", "\n", "self", ".", "enabled", "=", "config", "[", "'enabled'", "]", "\n", "self", ".", "debug", "=", "config", "[", "'debug'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.relations.LossRelationsNew.forward": [[365, 398], ["max", "len", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "util.sequence.get_mask_from_sequence_lengths().float", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "relations.LossRelationsNew.loss", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "modules.relations.latent.decode_relations_new", "util.sequence.get_mask_from_sequence_lengths().float.unsqueeze", "util.sequence.get_mask_from_sequence_lengths().float.unsqueeze", "modules.relations.latent.decode_relations_new", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "util.sequence.get_mask_from_sequence_lengths", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "zip", "zip", "zip", "torch.bmm.unsqueeze", "torch.bmm.unsqueeze", "torch.bmm.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.relations.latent.decode_relations_new", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.relations.latent.decode_relations_new", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.sequence.get_mask_from_sequence_lengths"], ["", "def", "forward", "(", "self", ",", "scores", ",", "targets", ",", "clusters", ",", "relations", ",", "predict", "=", "False", ")", ":", "\n", "        ", "output", "=", "{", "}", "\n", "\n", "num_concepts", "=", "[", "len", "(", "x", ")", "for", "x", "in", "clusters", "]", "\n", "max_concepts", "=", "max", "(", "num_concepts", ")", "\n", "\n", "if", "scores", "is", "not", "None", "and", "targets", "is", "not", "None", ":", "\n", "            ", "lengths", "=", "torch", ".", "LongTensor", "(", "num_concepts", ")", ".", "to", "(", "scores", ".", "device", ")", "\n", "mask", "=", "get_mask_from_sequence_lengths", "(", "lengths", ",", "max_concepts", ")", ".", "float", "(", ")", "\n", "square_mask", "=", "torch", ".", "bmm", "(", "mask", ".", "unsqueeze", "(", "-", "1", ")", ",", "mask", ".", "unsqueeze", "(", "-", "2", ")", ")", "\n", "\n", "obj", "=", "self", ".", "loss", "(", "scores", ",", "targets", ")", "\n", "output", "[", "'loss'", "]", "=", "self", ".", "weight", "*", "(", "obj", "*", "square_mask", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "            ", "output", "[", "'loss'", "]", "=", "torch", ".", "tensor", "(", "0.0", ")", ".", "cuda", "(", ")", "\n", "\n", "", "if", "targets", "is", "not", "None", ":", "\n", "            ", "mytargets", "=", "decode_relations_new", "(", "targets", ",", "num_concepts", ",", "self", ".", "labels", ")", "\n", "output", "[", "'target'", "]", "=", "[", "[", "(", "myclusters", "[", "src", "]", ",", "myclusters", "[", "dst", "]", ",", "rel", ")", "for", "src", ",", "dst", ",", "rel", "in", "triples", "]", "for", "\n", "myclusters", ",", "triples", "in", "zip", "(", "clusters", ",", "mytargets", ")", "]", "\n", "\n", "", "if", "predict", ":", "\n", "            ", "if", "scores", "is", "None", ":", "\n", "                ", "output", "[", "'pred'", "]", "=", "[", "[", "]", "for", "_", "in", "clusters", "]", "\n", "", "else", ":", "\n", "                ", "predictions", "=", "decode_relations_new", "(", "scores", ",", "num_concepts", ",", "self", ".", "labels", ")", "\n", "output", "[", "'pred'", "]", "=", "[", "[", "(", "myclusters", "[", "src", "]", ",", "myclusters", "[", "dst", "]", ",", "rel", ")", "for", "src", ",", "dst", ",", "rel", "in", "triples", "]", "for", "\n", "myclusters", ",", "triples", "in", "zip", "(", "clusters", ",", "predictions", ")", "]", "\n", "", "output", "[", "'gold'", "]", "=", "[", "[", "(", "myclusters", "[", "src", "]", ",", "myclusters", "[", "dst", "]", ",", "self", ".", "labels", "[", "rel", "]", ")", "for", "src", ",", "dst", ",", "rel", "in", "triples", "]", "for", "\n", "myclusters", ",", "(", "_", ",", "triples", ",", "_", ")", "in", "\n", "zip", "(", "relations", "[", "'gold_clusters'", "]", ",", "relations", "[", "'gold_relations'", "]", ")", "]", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.relations.LossRelationsNew.create_metrics": [[399, 401], ["metrics.relations.MetricConceptRelationSoftF1"], "methods", ["None"], ["", "def", "create_metrics", "(", "self", ")", ":", "\n", "        ", "return", "[", "MetricConceptRelationSoftF1", "(", "'relations'", ",", "self", ".", "labels", ",", "verbose", "=", "self", ".", "debug", ")", "]", "if", "self", ".", "enabled", "else", "[", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.relations.masked_sum": [[15, 20], ["mask.float.float", "x.sum", "mask.float.unsqueeze().unsqueeze", "x.sum", "mask.float.unsqueeze", "mask.float.unsqueeze"], "function", ["None"], ["def", "masked_sum", "(", "scores", ",", "mask", ")", ":", "\n", "    ", "mask", "=", "mask", ".", "float", "(", ")", "\n", "x", "=", "scores", "*", "mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "x", "=", "x", ".", "sum", "(", "dim", "=", "-", "1", ")", "*", "mask", ".", "unsqueeze", "(", "1", ")", "\n", "return", "x", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.relations.inspect": [[124, 128], ["print", "print", "print", "x.min().item", "x.max().item", "x.min", "x.max"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "", "", "", "def", "inspect", "(", "x", ")", ":", "\n", "    ", "print", "(", "'x-min:'", ",", "x", ".", "min", "(", ")", ".", "item", "(", ")", ")", "\n", "print", "(", "'x-max:'", ",", "x", ".", "max", "(", ")", ".", "item", "(", ")", ")", "\n", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.relations.create_task_relations": [[26, 39], ["relations.LossRelations", "relations.LossRelationsLatent", "modules.relations.latent.LossRelationsLatentX", "modules.relations.binary.LossRelationsX", "modules.relations.basic.TaskSpanRelations", "BaseException"], "function", ["None"], ["", "def", "create_task_relations", "(", "name", ",", "config", ",", "labels", ")", ":", "\n", "    ", "if", "config", "[", "'type'", "]", "==", "'binary'", ":", "\n", "        ", "return", "LossRelations", "(", "name", ",", "config", ",", "labels", ")", "\n", "", "elif", "config", "[", "'type'", "]", "==", "'latent-binary'", ":", "\n", "        ", "return", "LossRelationsLatent", "(", "name", ",", "config", ",", "labels", ")", "\n", "", "elif", "config", "[", "'type'", "]", "==", "'latent-x'", ":", "\n", "        ", "return", "LossRelationsLatentX", "(", "name", ",", "config", ",", "labels", ")", "\n", "", "elif", "config", "[", "'type'", "]", "==", "'binary-x'", ":", "\n", "        ", "return", "LossRelationsX", "(", "name", ",", "config", ",", "labels", ")", "\n", "", "elif", "config", "[", "'type'", "]", "==", "'span-binary'", ":", "\n", "        ", "return", "TaskSpanRelations", "(", "name", ",", "config", ",", "labels", ")", "\n", "", "else", ":", "\n", "        ", "raise", "BaseException", "(", "\"no such relation task:\"", ",", "config", "[", "'type'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.relations.log1mex": [[94, 106], ["torch.log", "torch.log", "torch.log", "torch.log1p", "torch.log1p", "torch.log1p", "torch.expm1", "torch.expm1", "torch.expm1", "torch.exp", "torch.exp", "torch.exp"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log"], ["def", "log1mex", "(", "x", ")", ":", "\n", "# print('x:', x.min().item(), x.max().item())", "\n", "# print(x[0,0,0,:])", "\n", "\n", "# expm1(x) = exp(x) - 1", "\n", "    ", "v1", "=", "torch", ".", "log", "(", "-", "torch", ".", "expm1", "(", "x", ")", ")", "\n", "# print('v1:', v1)", "\n", "# log1p(x) = log(1 + x)", "\n", "v2", "=", "torch", ".", "log1p", "(", "-", "torch", ".", "exp", "(", "x", ")", ")", "\n", "# print('v2:', v2)", "\n", "\n", "return", "v1", "\n", "# return torch.where(x > -0.693, v1, v2)", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.relations.create_square_mask": [[109, 114], ["util.sequence.get_mask_from_sequence_lengths", "mask.float.float", "torch.bmm", "torch.bmm", "torch.bmm", "lengths.max().item", "mask.float.unsqueeze", "mask.float.unsqueeze", "lengths.max"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.sequence.get_mask_from_sequence_lengths"], ["", "def", "create_square_mask", "(", "lengths", ")", ":", "\n", "    ", "mask", "=", "get_mask_from_sequence_lengths", "(", "lengths", ",", "lengths", ".", "max", "(", ")", ".", "item", "(", ")", ")", "\n", "mask", "=", "mask", ".", "float", "(", ")", "\n", "square_mask", "=", "torch", ".", "bmm", "(", "mask", ".", "unsqueeze", "(", "-", "1", ")", ",", "mask", ".", "unsqueeze", "(", "-", "2", ")", ")", "\n", "return", "square_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.relations.debug_grad": [[116, 122], ["range", "grad.size", "range", "grad.size", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "print", "print", "torch.isnan", "torch.isnan", "torch.isnan"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "debug_grad", "(", "x", ",", "grad", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "grad", ".", "size", "(", "1", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "grad", ".", "size", "(", "2", ")", ")", ":", "\n", "            ", "if", "torch", ".", "isnan", "(", "grad", "[", "0", ",", "i", ",", "j", ",", ":", "]", ")", ".", "any", "(", ")", ":", "\n", "                ", "print", "(", "'x:'", ",", "i", ",", "j", ",", "x", "[", "0", ",", "i", ",", "j", ",", ":", "]", ")", "\n", "print", "(", "'dx:'", ",", "i", ",", "j", ",", "grad", "[", "0", ",", "i", ",", "j", ",", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.linker_hoi.LossLinkerE2EHoi.make_linear": [[31, 38], ["torch.Linear", "torch.Linear", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.zeros_", "torch.nn.init.zeros_"], "methods", ["None"], ["    ", "def", "make_linear", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ",", "std", "=", "0.02", ")", ":", "\n", "        ", "linear", "=", "nn", ".", "Linear", "(", "in_features", ",", "out_features", ",", "bias", ")", "\n", "if", "std", "is", "not", "None", ":", "\n", "            ", "init", ".", "normal_", "(", "linear", ".", "weight", ",", "std", "=", "std", ")", "\n", "if", "bias", ":", "\n", "                ", "init", ".", "zeros_", "(", "linear", ".", "bias", ")", "\n", "", "return", "linear", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.linker_hoi.LossLinkerE2EHoi.make_ffnn": [[39, 51], ["range", "ffnn.append", "torch.Sequential", "torch.Sequential", "linker_hoi.LossLinkerE2EHoi.make_linear", "isinstance", "linker_hoi.LossLinkerE2EHoi.make_linear", "torch.ReLU", "torch.ReLU", "len", "linker_hoi.LossLinkerE2EHoi.make_linear", "linker_hoi.LossLinkerE2EHoi.make_linear", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_linear", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_linear", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_linear", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_linear"], ["", "", "def", "make_ffnn", "(", "self", ",", "feat_size", ",", "hidden_size", ",", "output_size", ",", "init_weights_std", ")", ":", "\n", "        ", "if", "hidden_size", "is", "None", "or", "hidden_size", "==", "0", "or", "hidden_size", "==", "[", "]", "or", "hidden_size", "==", "[", "0", "]", ":", "\n", "            ", "return", "self", ".", "make_linear", "(", "feat_size", ",", "output_size", ",", "std", "=", "init_weights_std", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "hidden_size", ",", "Iterable", ")", ":", "\n", "            ", "hidden_size", "=", "[", "hidden_size", "]", "\n", "", "ffnn", "=", "[", "self", ".", "make_linear", "(", "feat_size", ",", "hidden_size", "[", "0", "]", ",", "std", "=", "init_weights_std", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "self", ".", "dropout", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "hidden_size", ")", ")", ":", "\n", "            ", "ffnn", "+=", "[", "self", ".", "make_linear", "(", "hidden_size", "[", "i", "-", "1", "]", ",", "hidden_size", "[", "i", "]", ",", "std", "=", "init_weights_std", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "\n", "self", ".", "dropout", "]", "\n", "", "ffnn", ".", "append", "(", "self", ".", "make_linear", "(", "hidden_size", "[", "-", "1", "]", ",", "output_size", ",", "std", "=", "init_weights_std", ")", ")", "\n", "return", "nn", ".", "Sequential", "(", "*", "ffnn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.linker_hoi.LossLinkerE2EHoi.__init__": [[52, 100], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "linker_hoi.LossLinkerE2EHoi.make_ffnn", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "linker_hoi.LossLinkerE2EHoi.entity_embedder.dictionary.tolist", "modules.text_field.TextFieldEmbedderTokens", "modules.utils.entity.EntityEmbbederKB", "modules.entity_embeddings.KolitsasEntityEmbeddings", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_ffnn", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist"], ["", "def", "__init__", "(", "self", ",", "name", ",", "dim_span", ",", "dictionaries", ",", "config", ",", "max_span_length", ")", ":", "\n", "        ", "super", "(", "LossLinkerE2EHoi", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "enabled", "=", "True", "\n", "self", ".", "max_span_length", "=", "max_span_length", "\n", "self", ".", "init_weights_std", "=", "config", "[", "'init_weights_std'", "]", "\n", "self", ".", "scorers_ffnn_depth", "=", "config", "[", "'scorers_ffnn_depth'", "]", "\n", "\n", "self", ".", "embeddings_type", "=", "config", "[", "'entity_embedder'", "]", "[", "'type'", "]", "\n", "\n", "if", "self", ".", "embeddings_type", "==", "'yamada-johannes'", ":", "\n", "            ", "self", ".", "entity_embedder", "=", "TextFieldEmbedderTokens", "(", "dictionaries", ",", "config", "[", "'entity_embedder'", "]", ")", "\n", "", "elif", "self", ".", "embeddings_type", "==", "'kolitsas'", ":", "\n", "            ", "self", ".", "entity_embedder", "=", "KolitsasEntityEmbeddings", "(", "dictionaries", ",", "config", "[", "'entity_embedder'", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Unrecognized embeddings type in LossLinkerE2EHoi: '", "+", "self", ".", "embeddings_type", ")", "\n", "\n", "", "if", "'kb_embedder'", "in", "config", ":", "\n", "            ", "self", ".", "kb_embedder", "=", "EntityEmbbederKB", "(", "dictionaries", ",", "config", "[", "'kb_embedder'", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "kb_embedder", "=", "None", "\n", "\n", "", "hidden_dim", "=", "config", "[", "'hidden_dim'", "]", "\n", "hidden_dp", "=", "config", "[", "'hidden_dropout'", "]", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "hidden_dp", ")", "\n", "\n", "# layers = []", "\n", "dim", "=", "dim_span", "+", "self", ".", "entity_embedder", ".", "dim", "\n", "if", "'kb_embedder'", "in", "config", ":", "\n", "            ", "dim", "+=", "self", ".", "kb_embedder", ".", "dim_output", "\n", "", "self", ".", "layers", "=", "self", ".", "make_ffnn", "(", "dim", ",", "[", "hidden_dim", "]", "*", "self", ".", "scorers_ffnn_depth", ",", "output_size", "=", "1", ",", "\n", "init_weights_std", "=", "self", ".", "init_weights_std", ")", "\n", "# for _ in range(config['layers']):", "\n", "#     layers.extend([", "\n", "#         nn.Linear(dim, hidden_dim),", "\n", "#         nn.ReLU(),", "\n", "#         nn.Dropout(hidden_dp),", "\n", "#     ])", "\n", "#     dim = hidden_dim", "\n", "# layers.append(nn.Linear(dim, 1))", "\n", "# self.layers = nn.Sequential(*layers)", "\n", "\n", "# self.loss = nn.CrossEntropyLoss(reduction='none')", "\n", "self", ".", "loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", "reduction", "=", "'none'", ")", "\n", "self", ".", "labels", "=", "self", ".", "entity_embedder", ".", "dictionary", ".", "tolist", "(", ")", "\n", "self", ".", "entity_dictionary", "=", "self", ".", "entity_embedder", ".", "dictionary", "\n", "self", ".", "weight", "=", "config", "[", "'weight'", "]", "\n", "self", ".", "source", "=", "config", "[", "'source'", "]", "# either the 'pruned' or 'all' spans", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.linker_hoi.LossLinkerE2EHoi.forward": [[101, 294], ["dict", "spans_all[].sum", "spans_all[].view", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "linker_indices_hoi.size", "modules.misc.misc.batched_index_select", "modules.misc.misc.batched_index_select().squeeze", "modules.misc.misc.batched_index_select", "modules.utils.misc.filter_spans", "modules.misc.misc.batched_index_select.to", "linker_hoi.LossLinkerE2EHoi.entity_embedder", "linker_vecs.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "linker_hoi.LossLinkerE2EHoi.layers().squeeze", "modules.tasks.linker.create_candidate_mask().float().to", "linker_hoi.LossLinkerE2EHoi.loss", "spans_all[].size", "spans_all[].size", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "all_linker_indices.append", "modules.utils.misc.indices_to_spans", "all_linker_spans.append", "linker_indices_hoi.to", "linker_hoi.LossLinkerE2EHoi.kb_embedder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "linker_vecs.unsqueeze().expand.unsqueeze().expand.size", "linker_vecs.unsqueeze().expand.unsqueeze().expand.size", "torch.cat.size", "torch.cat.size", "linker_vecs.unsqueeze().expand.unsqueeze().expand.size", "list", "torch.stack.unsqueeze", "torch.stack.unsqueeze", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "modules.misc.misc.batched_index_select", "linker_vecs.unsqueeze().expand.unsqueeze().expand.unsqueeze", "linker_hoi.LossLinkerE2EHoi.layers", "modules.tasks.linker.create_candidate_mask().float", "modules.tasks.linker.predict_links_e2e", "modules.tasks.linker.predict_links_e2e", "dict", "list", "list.append", "enumerate", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "modules.misc.misc.batched_index_select().squeeze.unsqueeze", "dict.values", "sorted", "linker_hoi.span_to_cluster", "set", "set", "set.difference", "set", "modules.tasks.linker.create_candidate_mask", "curr_doc_link_to_span[].append", "set", "modules.tasks.coreflinker.convert_coref", "zip", "spans_all[].view.size", "spans_all[].view.size", "list", "set.intersection", "max_intersection_cluster_cluster.append", "set.add", "pred_coref_clusters.append", "modules.tasks.coreflinker.m2i_to_clusters_linkercoref", "set", "len", "len", "set.add", "x.tolist"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.batched_index_select", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.batched_index_select", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.filter_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.indices_to_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.batched_index_select", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.linker.predict_links_e2e", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.linker.predict_links_e2e", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.linker_hoi.span_to_cluster", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.create_candidate_mask", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.convert_coref", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.m2i_to_clusters_linkercoref", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist"], ["", "def", "forward", "(", "self", ",", "spans_all", ",", "linker", ",", "filtered_spans", ",", "gold_m2i", "=", "None", ",", "gold_spans", "=", "None", ",", "coref_pred", "=", "None", ",", "\n", "predict", "=", "False", ",", "only_loss", "=", "False", ")", ":", "\n", "        ", "if", "self", ".", "source", "==", "'all'", ":", "\n", "            ", "nr_possible_spans", "=", "spans_all", "[", "'span_mask'", "]", ".", "sum", "(", "(", "-", "1", ",", "-", "2", ")", ",", "dtype", "=", "torch", ".", "int32", ")", "\n", "span_masked_scores", "=", "spans_all", "[", "'span_mask'", "]", ".", "view", "(", "spans_all", "[", "'span_mask'", "]", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "all_linker_indices", "=", "[", "]", "\n", "all_linker_spans", "=", "[", "]", "\n", "# TODO (kzaporoj) - don't like this code, improve it", "\n", "for", "batch", "in", "range", "(", "spans_all", "[", "'span_mask'", "]", ".", "size", "(", "0", ")", ")", ":", "\n", "                ", "linker_indices", ",", "_", "=", "torch", ".", "sort", "(", "torch", ".", "topk", "(", "span_masked_scores", "[", "batch", "]", ",", "nr_possible_spans", "[", "batch", "]", ",", "\n", "largest", "=", "True", ",", "sorted", "=", "True", ")", "[", "1", "]", ",", "0", ")", "\n", "all_linker_indices", ".", "append", "(", "linker_indices", ")", "\n", "linker_spans", "=", "indices_to_spans", "(", "linker_indices", ".", "unsqueeze", "(", "0", ")", ",", "\n", "torch", ".", "tensor", "(", "\n", "[", "span_masked_scores", ".", "size", "(", "-", "1", ")", "*", "span_masked_scores", ".", "size", "(", "-", "2", ")", "]", ")", ",", "\n", "self", ".", "max_span_length", ")", "\n", "all_linker_spans", ".", "append", "(", "linker_spans", "[", "0", "]", ")", "\n", "", "linker_spans", "=", "all_linker_spans", "\n", "linker_indices", "=", "torch", ".", "stack", "(", "all_linker_indices", ")", "\n", "", "else", ":", "\n", "# linker_indices_hoi = filtered_spans['prune_indices']", "\n", "            ", "linker_indices_hoi", "=", "filtered_spans", "[", "'prune_indices_hoi'", "]", "\n", "# linker_indices_hoi.shape --> [1, 21]", "\n", "linker_spans", "=", "filtered_spans", "[", "'pruned_spans'", "]", "\n", "# linker_spans --> <class 'list'>: [[(3, 6), (4, 6), (5, 5), (25, 25), (26, 26), (31, 34), ...]]", "\n", "# len(linker_spans) --> 21", "\n", "\n", "", "output_coref", "=", "dict", "(", ")", "\n", "if", "linker_indices_hoi", ".", "size", "(", "1", ")", ">", "0", ":", "\n", "# TODO 11/04/2021 - we are here, refactoring", "\n", "            ", "cand_all_vecs", "=", "spans_all", "[", "'cand_span_vecs'", "]", "# torch.Size([1, 69, 5, 1676])", "\n", "# cand_all_vecs.shape --> torch.Size([1, 315, 2324])", "\n", "linker_candidates", "=", "batched_index_select", "(", "linker", "[", "'candidates'", "]", ",", "linker_indices_hoi", ")", "\n", "candidate_lengths", "=", "linker", "[", "'candidate_lengths'", "]", "\n", "candidate_lengths", "=", "batched_index_select", "(", "candidate_lengths", ".", "unsqueeze", "(", "-", "1", ")", ",", "linker_indices_hoi", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "# filter_spans()", "\n", "# targets = linker['targets_all_spans']", "\n", "targets", "=", "linker", "[", "'targets'", "]", "\n", "targets", "=", "batched_index_select", "(", "targets", ",", "linker_indices_hoi", ")", "\n", "\n", "# linker_vecs = filter_spans(all_vecs, linker_indices_hoi.to(cand_all_vecs.device))  # torch.Size([1, 9, 1676])", "\n", "linker_vecs", "=", "filter_spans", "(", "cand_all_vecs", ",", "\n", "linker_indices_hoi", ".", "to", "(", "cand_all_vecs", ".", "device", ")", ")", "# torch.Size([1, 9, 1676])", "\n", "\n", "candidates", "=", "linker_candidates", ".", "to", "(", "cand_all_vecs", ".", "device", ")", "# torch.Size([1, 9, 17])", "\n", "candidate_vecs", "=", "self", ".", "entity_embedder", "(", "candidates", ")", "# torch.Size([1, 9, 17, 200])", "\n", "if", "self", ".", "kb_embedder", "is", "not", "None", ":", "\n", "                ", "kb_vecs", "=", "self", ".", "kb_embedder", "(", "candidates", ")", "\n", "candidate_vecs", "=", "torch", ".", "cat", "(", "(", "candidate_vecs", ",", "kb_vecs", ")", ",", "-", "1", ")", "\n", "\n", "", "dims", "=", "(", "linker_vecs", ".", "size", "(", "0", ")", ",", "linker_vecs", ".", "size", "(", "1", ")", ",", "candidate_vecs", ".", "size", "(", "2", ")", ",", "\n", "linker_vecs", ".", "size", "(", "2", ")", ")", "# <class 'tuple'>: (1, 9, 17, 1676)", "\n", "linker_vecs", "=", "linker_vecs", ".", "unsqueeze", "(", "-", "2", ")", ".", "expand", "(", "dims", ")", "# torch.Size([1, 9, 17, 1676])", "\n", "vecs", "=", "torch", ".", "cat", "(", "(", "linker_vecs", ",", "candidate_vecs", ")", ",", "-", "1", ")", "# torch.Size([1, 9, 17, 1876])", "\n", "\n", "scores", "=", "self", ".", "layers", "(", "vecs", ")", ".", "squeeze", "(", "-", "1", ")", "# torch.Size([1, 9, 17])", "\n", "scores_mask", "=", "create_candidate_mask", "(", "scores", ",", "candidate_lengths", ")", ".", "float", "(", ")", ".", "to", "(", "\n", "cand_all_vecs", ".", "device", ")", "# torch.Size([1, 9, 17])", "\n", "\n", "obj", "=", "self", ".", "loss", "(", "scores", ",", "targets", ")", "# torch.Size([1, 9, 17]) -> targets shape", "\n", "obj", "=", "(", "scores_mask", "*", "obj", ")", ".", "sum", "(", ")", "*", "self", ".", "weight", "\n", "\n", "if", "predict", "and", "not", "only_loss", ":", "\n", "                ", "_", ",", "predictions", "=", "(", "scores", "-", "(", "1.0", "-", "scores_mask", ")", "*", "1e23", ")", ".", "max", "(", "dim", "=", "-", "1", ")", "\n", "\n", "if", "coref_pred", "is", "not", "None", ":", "\n", "                    ", "pred", ",", "s", "=", "predict_links_e2e", "(", "predictions", ",", "linker_spans", "=", "linker_spans", ",", "\n", "linker_candidates", "=", "linker_candidates", ",", "\n", "candidate_lengths", "=", "candidate_lengths", ",", "\n", "labels", "=", "self", ".", "labels", ",", "scores", "=", "scores", ",", "coref_pred", "=", "coref_pred", "[", "'pred'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "pred", ",", "s", "=", "predict_links_e2e", "(", "predictions", ",", "linker_spans", "=", "linker_spans", ",", "\n", "linker_candidates", "=", "linker_candidates", ",", "\n", "candidate_lengths", "=", "candidate_lengths", ",", "\n", "labels", "=", "self", ".", "labels", ",", "scores", "=", "scores", ",", "coref_pred", "=", "None", ")", "\n", "\n", "# <class 'list'>: [[(5, 7, 'NILL'), (41, 43, 'NILL'), (45, 47, 'NILL'), (49, 49, 'Berlin'),", "\n", "# (51, 52, 'NILL'), (53, 54, 'NILL'), (57, 57, 'Berlin')]]", "\n", "", "pred_clusters", "=", "list", "(", ")", "\n", "for", "curr_links_doc", "in", "pred", ":", "\n", "                    ", "curr_doc_link_to_span", "=", "dict", "(", ")", "\n", "for", "curr_link_doc", "in", "curr_links_doc", ":", "\n", "                        ", "link", "=", "curr_link_doc", "[", "2", "]", "\n", "span_begin", "=", "curr_link_doc", "[", "0", "]", "\n", "span_end", "=", "curr_link_doc", "[", "1", "]", "\n", "if", "link", "!=", "'NILL'", ":", "\n", "                            ", "if", "link", "not", "in", "curr_doc_link_to_span", ":", "\n", "                                ", "curr_doc_link_to_span", "[", "link", "]", "=", "list", "(", ")", "\n", "", "curr_doc_link_to_span", "[", "link", "]", ".", "append", "(", "(", "span_begin", ",", "span_end", ")", ")", "\n", "", "", "list_clusters", "=", "list", "(", "curr_doc_link_to_span", ".", "values", "(", ")", ")", "\n", "list_clusters", "=", "[", "sorted", "(", "x", ",", "key", "=", "lambda", "xl", ":", "xl", "[", "0", "]", ")", "for", "x", "in", "list_clusters", "]", "\n", "pred_clusters", ".", "append", "(", "list_clusters", ")", "\n", "# pred_clusters = []", "\n", "\n", "", "if", "coref_pred", "is", "not", "None", ":", "\n", "# merges the clusters of LINK and the ones predicted by coref", "\n", "#   rule 1: only the ones that are not already in cluster spans", "\n", "#   rule 2: new cluster if no current clusters with the same link", "\n", "#       - if current cluster with the same link, append it to the cluster with most links/total size of cluster", "\n", "                    ", "for", "idx_batch", ",", "curr_link_clusters", "in", "enumerate", "(", "pred_clusters", ")", ":", "\n", "# print('pred link clusters: ', curr_link_clusters)", "\n", "                        ", "pred_coref_clusters", "=", "coref_pred", "[", "'pred'", "]", "[", "idx_batch", "]", "\n", "curr_doc_links", "=", "pred", "[", "idx_batch", "]", "\n", "link_span_to_cluster", "=", "span_to_cluster", "(", "curr_link_clusters", ")", "\n", "spans_in_coref", "=", "set", "(", "[", "item", "for", "sublist", "in", "pred_coref_clusters", "for", "item", "in", "sublist", "]", ")", "\n", "spans_in_linker", "=", "set", "(", "[", "item", "for", "sublist", "in", "curr_link_clusters", "for", "item", "in", "sublist", "]", ")", "\n", "spans_not_covered_in_coref", "=", "spans_in_linker", ".", "difference", "(", "spans_in_coref", ")", "\n", "added_spans", "=", "set", "(", ")", "\n", "for", "curr_span_not_covered", "in", "spans_not_covered_in_coref", ":", "\n", "                            ", "if", "curr_span_not_covered", "in", "added_spans", ":", "\n", "                                ", "continue", "\n", "", "linker_span_cluster", "=", "set", "(", "link_span_to_cluster", "[", "curr_span_not_covered", "]", ")", "\n", "max_intersection_cluster_size", "=", "0", "\n", "max_intersection_cluster_cluster", "=", "None", "\n", "for", "curr_pred_coref_cluster", "in", "pred_coref_clusters", ":", "\n", "                                ", "intersection", "=", "linker_span_cluster", ".", "intersection", "(", "set", "(", "curr_pred_coref_cluster", ")", ")", "\n", "\n", "if", "len", "(", "intersection", ")", ">", "max_intersection_cluster_size", ":", "\n", "                                    ", "max_intersection_cluster_size", "=", "len", "(", "intersection", ")", "\n", "max_intersection_cluster_cluster", "=", "curr_pred_coref_cluster", "\n", "", "", "if", "max_intersection_cluster_size", ">", "0", ":", "\n", "# appends to the cluster with highest intersection", "\n", "                                ", "max_intersection_cluster_cluster", ".", "append", "(", "curr_span_not_covered", ")", "\n", "added_spans", ".", "add", "(", "curr_span_not_covered", ")", "\n", "# TODO: also for scores matrix and other matrices! <class 'dict'>: {'loss': 0.0, 'pred': [[]], 'pred_pointers': [[]], 'gold': [[]], 'scores': [[]]}", "\n", "", "else", ":", "\n", "# creates a new cluster", "\n", "                                ", "pred_coref_clusters", ".", "append", "(", "link_span_to_cluster", "[", "curr_span_not_covered", "]", ")", "\n", "for", "added_span", "in", "link_span_to_cluster", "[", "curr_span_not_covered", "]", ":", "\n", "                                    ", "added_spans", ".", "add", "(", "added_span", ")", "\n", "# TODO: also for scores matrix and other matrices! <class 'dict'>: {'loss': 0.0, 'pred': [[]], 'pred_pointers': [[]], 'gold': [[]], 'scores': [[]]}", "\n", "\n", "# s0- span to cluster dict for curr_link_clusters", "\n", "# s1- subtraction flattened curr_link_clusters from pred_coref_clusters", "\n", "# s2- assignment of the linking span to the predicted cluster whose spans have highest intersection with the", "\n", "#   spans of the linking cluster. If no intersection detected, or if the span is singleton, then new", "\n", "#   cluster is formed and added.", "\n", "# print('pred coref clusters: ', curr_link_clusters)", "\n", "# pass", "\n", "# print('curr doc link to span: ', pred_clusters)", "\n", "", "", "", "", "", "if", "coref_pred", "is", "None", ":", "\n", "                    ", "output_coref", "[", "'loss'", "]", "=", "obj", "\n", "output_coref", "[", "'pred'", "]", "=", "pred_clusters", "\n", "output_coref", "[", "'pred_pointers'", "]", "=", "[", "None", "for", "x", "in", "linker", "[", "'gold'", "]", "]", "\n", "output_coref", "[", "'gold'", "]", "=", "[", "convert_coref", "(", "m2i_to_clusters_linkercoref", "(", "x", ".", "tolist", "(", ")", ")", ",", "y", ",", "\n", "number_candidates", "=", "0", ",", "\n", "links_dictionary", "=", "self", ".", "entity_dictionary", ")", "[", "0", "]", "for", "x", ",", "y", "in", "\n", "zip", "(", "gold_m2i", ",", "gold_spans", ")", "]", "\n", "\n", "output_coref", "[", "'scores'", "]", "=", "[", "None", "for", "_", "in", "linker", "[", "'gold'", "]", "]", "\n", "", "else", ":", "\n", "# (28/04/2021) - !this is needed because seems like coref_pred is not passed by reference! -->", "\n", "# ups, I think I am wrong here, they are passed by reference (double check!) --> if so no need for", "\n", "# the assignments below", "\n", "                    ", "output_coref", "[", "'loss'", "]", "=", "coref_pred", "[", "'loss'", "]", "\n", "output_coref", "[", "'pred'", "]", "=", "coref_pred", "[", "'pred'", "]", "\n", "output_coref", "[", "'pred_pointers'", "]", "=", "coref_pred", "[", "'pred_pointers'", "]", "\n", "output_coref", "[", "'gold'", "]", "=", "coref_pred", "[", "'gold'", "]", "\n", "\n", "output_coref", "[", "'scores'", "]", "=", "coref_pred", "[", "'scores'", "]", "\n", "\n", "", "", "else", ":", "\n", "                ", "pred", "=", "[", "[", "]", "for", "_", "in", "linker", "[", "'gold'", "]", "]", "\n", "s", "=", "[", "None", "for", "_", "in", "linker", "[", "'gold'", "]", "]", "\n", "output_coref", "[", "'loss'", "]", "=", "obj", "\n", "output_coref", "[", "'pred'", "]", "=", "[", "None", "for", "_", "in", "linker", "[", "'gold'", "]", "]", "\n", "output_coref", "[", "'pred_pointers'", "]", "=", "[", "None", "for", "_", "in", "linker", "[", "'gold'", "]", "]", "\n", "output_coref", "[", "'gold'", "]", "=", "[", "None", "for", "_", "in", "linker", "[", "'gold'", "]", "]", "\n", "output_coref", "[", "'scores'", "]", "=", "[", "None", "for", "_", "in", "linker", "[", "'gold'", "]", "]", "\n", "\n", "# s = predict_scores(scores, linker_spans, candidates, candidate_lengths, self.labels)", "\n", "", "", "else", ":", "\n", "            ", "obj", "=", "0", "\n", "pred", "=", "[", "[", "]", "for", "_", "in", "linker", "[", "'gold'", "]", "]", "\n", "s", "=", "[", "None", "for", "_", "in", "linker", "[", "'gold'", "]", "]", "\n", "#", "\n", "output_coref", "[", "'loss'", "]", "=", "0.0", "\n", "\n", "# TODO - check this, do we need 'pred_pointers'???!", "\n", "output_coref", "[", "'pred'", "]", "=", "[", "None", "for", "_", "in", "linker", "[", "'gold'", "]", "]", "\n", "output_coref", "[", "'pred_pointers'", "]", "=", "[", "None", "for", "_", "in", "linker", "[", "'gold'", "]", "]", "\n", "output_coref", "[", "'gold'", "]", "=", "[", "None", "for", "_", "in", "linker", "[", "'gold'", "]", "]", "\n", "output_coref", "[", "'scores'", "]", "=", "[", "None", "for", "_", "in", "linker", "[", "'gold'", "]", "]", "\n", "\n", "", "output", "=", "{", "\n", "'loss'", ":", "obj", ",", "\n", "'pred'", ":", "pred", ",", "\n", "'gold'", ":", "linker", "[", "'gold'", "]", ",", "\n", "'scores'", ":", "s", "\n", "}", "\n", "\n", "return", "obj", ",", "output", ",", "output_coref", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.linker_hoi.LossLinkerE2EHoi.create_metrics": [[295, 301], ["metrics.linker.MetricLinkerImproved", "metrics.linker.MetricLinkerImproved", "metrics.linker.MetricLinkerImproved", "metrics.linker.MetricLinkAccuracy", "metrics.linker.MetricLinkAccuracyNoCandidates", "metrics.misc.MetricObjective"], "methods", ["None"], ["", "def", "create_metrics", "(", "self", ")", ":", "\n", "        ", "return", "[", "MetricLinkerImproved", "(", "self", ".", "name", ")", ",", "MetricLinkerImproved", "(", "self", ".", "name", ",", "'links'", ")", ",", "\n", "MetricLinkerImproved", "(", "self", ".", "name", ",", "'nills'", ")", ",", "\n", "MetricLinkAccuracy", "(", "self", ".", "name", ")", ",", "\n", "MetricLinkAccuracyNoCandidates", "(", "self", ".", "name", ")", ",", "\n", "MetricObjective", "(", "self", ".", "name", ")", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.linker_hoi.span_to_cluster": [[20, 27], ["dict"], "function", ["None"], ["def", "span_to_cluster", "(", "clusters", ")", ":", "\n", "    ", "span_to_cluster", "=", "dict", "(", ")", "\n", "for", "curr_cluster_spans", "in", "clusters", ":", "\n", "        ", "for", "curr_span", "in", "curr_cluster_spans", ":", "\n", "            ", "span_to_cluster", "[", "curr_span", "]", "=", "curr_cluster_spans", "\n", "\n", "", "", "return", "span_to_cluster", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coref_edmonds.LossCorefEdmonds.__init__": [[11, 16], ["torch.Module.__init__", "config.get"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get"], ["    ", "def", "__init__", "(", "self", ",", "task", ",", "config", ")", ":", "\n", "        ", "super", "(", "LossCorefEdmonds", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "task", "=", "task", "\n", "self", ".", "weight", "=", "config", ".", "get", "(", "'weight'", ",", "1.0", ")", "\n", "self", ".", "enabled", "=", "config", "[", "'enabled'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coref_edmonds.LossCorefEdmonds.forward": [[17, 28], ["util.edmonds.mst", "util.edmonds.mst", "print", "torch.relu().sum", "torch.relu().sum", "torch.relu().sum", "torch.relu().sum", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "scores.size"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.edmonds.mst", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.edmonds.mst", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "forward", "(", "self", ",", "scores", ",", "targets", ",", "lengths", ")", ":", "\n", "# WARNING: targets not correct", "\n", "\n", "        ", "P", "=", "mst", "(", "scores", ",", "lengths", ")", "\n", "G", "=", "mst", "(", "scores", "*", "targets", ",", "lengths", ")", "\n", "\n", "margin", "=", "(", "(", "P", "-", "G", ")", "*", "scores", ")", ".", "view", "(", "scores", ".", "size", "(", "0", ")", ",", "-", "1", ")", ".", "sum", "(", "-", "1", ")", "\n", "print", "(", "'margin:'", ",", "margin", ")", "\n", "output", "=", "torch", ".", "relu", "(", "margin", ")", ".", "sum", "(", ")", "\n", "\n", "return", "output", ",", "P", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coref_edmonds.LossCorefEdmonds.create_metrics": [[29, 32], ["metrics.coref.MetricCoref", "metrics.coref.MetricCoref", "metrics.misc.MetricObjective"], "methods", ["None"], ["", "def", "create_metrics", "(", "self", ")", ":", "\n", "        ", "return", "[", "MetricCoref", "(", "self", ".", "task", ",", "'muc'", ",", "MetricCoref", ".", "muc", ")", ",", "MetricCoref", "(", "self", ".", "task", ",", "'bcubed'", ",", "MetricCoref", ".", "b_cubed", ")", ",", "\n", "MetricObjective", "(", "self", ".", "task", ")", "]", "if", "self", ".", "enabled", "else", "[", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.__init__.create_ner_task": [[9, 30], ["modules.tasks.sequence_labeling.TaskCRF", "modules.tasks.sequence_labeling.TaskNerSoftmax", "modules.tasks.sequence_labeling.TaskNerMulti", "modules.tasks.sequence_labeling.TaskNerRecursive", "modules.ner.spans.TaskSpanGenerator1", "modules.ner.spans.TaskSpanGenerator2", "modules.ner.spanner.TaskSpan1", "BaseException"], "function", ["None"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_hoi.CorefLinkerLossHoi.__init__": [[22, 47], ["torch.Module.__init__", "config.get", "coreflinker_hoi.CorefLinkerLossHoi.entity_dictionary.tolist", "entity_dictionary.lookup"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup"], ["    ", "def", "__init__", "(", "self", ",", "link_task", ",", "coref_task", ",", "entity_dictionary", ",", "config", ",", "end_to_end", ")", ":", "\n", "        ", "super", "(", "CorefLinkerLossHoi", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# self.entity_embedder = TextFieldEmbedderTokens(dictionaries, config['entity_embedder']) # here is entity embedder 1", "\n", "\n", "self", ".", "enabled", "=", "config", "[", "'enabled'", "]", "\n", "\n", "self", ".", "entity_dictionary", "=", "entity_dictionary", "\n", "if", "self", ".", "enabled", ":", "\n", "            ", "self", ".", "labels", "=", "self", ".", "entity_dictionary", ".", "tolist", "(", ")", "\n", "self", ".", "unknown_dict", "=", "entity_dictionary", ".", "lookup", "(", "'###UNKNOWN###'", ")", "\n", "\n", "", "self", ".", "link_task", "=", "link_task", "\n", "self", ".", "coref_task", "=", "coref_task", "\n", "self", ".", "weight", "=", "config", ".", "get", "(", "'weight'", ",", "1.0", ")", "\n", "self", ".", "filter_singletons_with_pruner", "=", "config", "[", "'filter_singletons_with_pruner'", "]", "\n", "self", ".", "filter_only_singletons", "=", "config", "[", "'filter_only_singletons'", "]", "\n", "\n", "self", ".", "filter_singletons_with_matrix", "=", "config", "[", "'filter_singletons_with_matrix'", "]", "\n", "self", ".", "ignore_no_mention_chains", "=", "config", "[", "'ignore_no_mention_chains'", "]", "\n", "self", ".", "filter_singletons_with_ner", "=", "config", "[", "'filter_singletons_with_ner'", "]", "\n", "self", ".", "no_nil_in_targets", "=", "config", "[", "'no_nil_in_targets'", "]", "\n", "self", ".", "doc_level_candidates", "=", "config", "[", "'doc_level_candidates'", "]", "\n", "self", ".", "singletons", "=", "self", ".", "filter_singletons_with_pruner", "or", "self", ".", "filter_singletons_with_ner", "# write out singletons to json", "\n", "self", ".", "end_to_end", "=", "end_to_end", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_hoi.CorefLinkerLossHoi.forward": [[48, 289], ["linker.get", "modules.misc.misc.batched_index_select", "modules.misc.misc.batched_index_select().squeeze", "modules.misc.misc.batched_index_select.to", "coreflinker_hoi.CorefLinkerLossHoi.entity_dictionary.lookup", "modules.tasks.coreflinker.create_candidate_mask().float().to", "linker.get", "modules.misc.misc.batched_index_select", "modules.tasks.coreflinker.create_coreflinker_target_forward", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().repeat().to", "torch.LongTensor().repeat().to", "torch.LongTensor().repeat().to", "torch.LongTensor().repeat().to", "torch.ones().tril().unsqueeze", "torch.ones().tril().unsqueeze", "torch.ones().tril().unsqueeze", "torch.ones().tril().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "util.sequence.get_mask_from_sequence_lengths().float", "enumerate", "list", "enumerate", "list", "enumerate", "modules.tasks.coreflinker.decode_m2i_coreflinker", "range", "modules.misc.misc.batched_index_select.size", "modules.utils.misc.predict_scores", "modules.tasks.coreflinker.predict_scores_coref", "modules.misc.misc.batched_index_select", "modules.tasks.coreflinker.create_candidate_mask().float", "modules.misc.misc.batched_index_select().squeeze", "torch.ones().unsqueeze", "torch.ones().unsqueeze", "torch.ones().unsqueeze", "torch.ones().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "scores.max().item", "util.math.logsumexp", "BaseException", "candidates[].unique", "candidate_ids.append", "list.append", "enumerate", "list.append", "len", "enumerate", "modules.tasks.coreflinker.remove_disabled_spans_linking", "modules.tasks.coreflinker.remove_disabled_scores_coref", "modules.tasks.coreflinker.remove_disabled_scores_linking", "modules.tasks.coreflinker.remove_disabled_spans", "modules.tasks.coreflinker.remove_disabled_spans_linking", "modules.misc.misc.batched_index_select().squeeze.unsqueeze", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor().repeat", "torch.LongTensor().repeat", "torch.LongTensor().repeat", "torch.LongTensor().repeat", "torch.ones().tril", "torch.ones().tril", "torch.ones().tril", "torch.ones().tril", "additive_mask.to", "util.sequence.get_mask_from_sequence_lengths", "dict", "modules.tasks.coreflinker.convert_coref", "modules.tasks.coreflinker.remove_disabled_spans", "modules.tasks.coreflinker.remove_disabled_spans_linking", "modules.tasks.coreflinker.remove_disabled_scores_coref", "modules.tasks.coreflinker.remove_disabled_scores_linking", "modules.tasks.coreflinker.remove_singletons_without_link", "modules.tasks.coreflinker.remove_disabled_spans_linking", "modules.tasks.coreflinker.remove_disabled_scores_coref", "modules.tasks.coreflinker.remove_disabled_scores_linking", "modules.tasks.coreflinker.create_candidate_mask", "modules.misc.misc.batched_index_select", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "scores.max", "torch.LongTensor().to.max().item", "torch.LongTensor().to.max().item", "modules.tasks.coreflinker.m2i_to_clusters_linkercoref", "zip", "modules.tasks.coreflinker.convert_coref", "zip", "modules.misc.misc.batched_index_select.to.size", "modules.misc.misc.batched_index_select().squeeze.unsqueeze", "len", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "link_dict_id.item", "link_id_to_coref_col_batch.items", "candidate_ids_b.size", "candidate_ids_b.size", "modules.tasks.coreflinker.m2i_to_clusters_linkercoref", "modules.tasks.coreflinker.create_candidate_mask().float().to.size", "torch.LongTensor().to.max", "torch.LongTensor().to.max", "curr_predicted_links.append", "x.tolist", "modules.tasks.coreflinker.create_candidate_mask().float().to.size", "modules.tasks.coreflinker.create_candidate_mask().float().to.size"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.batched_index_select", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.batched_index_select", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.create_coreflinker_target_forward", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.decode_m2i_coreflinker", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.misc.predict_scores", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.predict_scores_coref", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.batched_index_select", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.math.logsumexp", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.remove_disabled_spans_linking", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.remove_disabled_scores_coref", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.remove_disabled_scores_linking", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coref.remove_disabled_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.remove_disabled_spans_linking", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.sequence.get_mask_from_sequence_lengths", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.convert_coref", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coref.remove_disabled_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.remove_disabled_spans_linking", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.remove_disabled_scores_coref", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.remove_disabled_scores_linking", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.remove_singletons_without_link", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.remove_disabled_spans_linking", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.remove_disabled_scores_coref", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.remove_disabled_scores_linking", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.create_candidate_mask", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.batched_index_select", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.m2i_to_clusters_linkercoref", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.convert_coref", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker.m2i_to_clusters_linkercoref", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist"], ["", "def", "forward", "(", "self", ",", "scores", ",", "gold_m2i", ",", "filtered_spans", ",", "gold_spans", ",", "linker", ",", "\n", "predict", "=", "False", ",", "pruner_spans", "=", "None", ",", "ner_spans", "=", "None", ",", "api_call", "=", "False", ",", "only_loss", "=", "False", ")", ":", "\n", "        ", "output", "=", "{", "}", "\n", "output_coref", "=", "{", "}", "\n", "output_linking", "=", "{", "}", "\n", "\n", "if", "self", ".", "enabled", "and", "scores", "is", "not", "None", ":", "\n", "# pred_spans = filtered_spans['spans']", "\n", "            ", "pred_spans", "=", "filtered_spans", "[", "'pruned_spans'", "]", "\n", "\n", "linker_candidates", "=", "linker", "[", "'candidates'", "]", "\n", "candidate_lengths", "=", "linker", "[", "'candidate_lengths'", "]", "\n", "targets", "=", "linker", ".", "get", "(", "'targets'", ")", "\n", "\n", "if", "self", ".", "end_to_end", ":", "\n", "# if it is end-to-end, we only select the candidates pruned by pruner in order to avoid", "\n", "#   using too much memory", "\n", "# pred_spans_idx = filtered_spans['prune_indices']", "\n", "                ", "pred_spans_idx", "=", "filtered_spans", "[", "'prune_indices_hoi'", "]", "\n", "", "else", ":", "\n", "                ", "pred_spans_idx", "=", "filtered_spans", "[", "'reindex_wrt_gold'", "]", "\n", "\n", "", "linker_candidates", "=", "batched_index_select", "(", "linker_candidates", ",", "pred_spans_idx", ")", "\n", "candidate_lengths", "=", "batched_index_select", "(", "candidate_lengths", ".", "unsqueeze", "(", "-", "1", ")", ",", "pred_spans_idx", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "candidates", "=", "linker_candidates", ".", "to", "(", "scores", ".", "device", ")", "# torch.Size([1, 9, 17])", "\n", "\n", "nill_id", "=", "self", ".", "entity_dictionary", ".", "lookup", "(", "'NILL'", ")", "\n", "# none_id = self.entity_dictionary.lookup('NONE')", "\n", "\n", "linker_mask", "=", "create_candidate_mask", "(", "candidates", ".", "size", "(", "-", "1", ")", ",", "candidate_lengths", ")", ".", "float", "(", ")", ".", "to", "(", "scores", ".", "device", ")", "\n", "\n", "targets_matrix", "=", "None", "\n", "tot_cand_lengths_in_gold_mentions", "=", "None", "\n", "if", "not", "api_call", ":", "\n", "                ", "tot_cand_lengths_in_gold_mentions", "=", "linker", ".", "get", "(", "'total_cand_lengths_in_gold_mentions'", ",", "None", ")", "\n", "if", "tot_cand_lengths_in_gold_mentions", "is", "not", "None", ":", "\n", "                    ", "tot_cand_lengths_in_gold_mentions", "=", "batched_index_select", "(", "tot_cand_lengths_in_gold_mentions", ".", "unsqueeze", "(", "-", "1", ")", ",", "\n", "pred_spans_idx", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "", "targets", "=", "batched_index_select", "(", "targets", ",", "pred_spans_idx", ")", "\n", "linker_target", "=", "targets", "*", "linker_mask", "\n", "\n", "targets_matrix", "=", "create_coreflinker_target_forward", "(", "pred_spans", ",", "gold_spans", ",", "gold_m2i", ",", "linker_target", ",", "\n", "self", ".", "filter_singletons_with_matrix", ")", "\n", "\n", "", "if", "scores", "is", "not", "None", ":", "\n", "                ", "lengths_coref", "=", "torch", ".", "LongTensor", "(", "[", "len", "(", "x", ")", "for", "x", "in", "pred_spans", "]", ")", ".", "to", "(", "settings", ".", "device", ")", "\n", "\n", "# TODO: 'lengths_coref' is used with coreference ; 'lengths_linker' takes also into account the length", "\n", "#  of candidate entities of linker (which can be different between different training instances in each batch)", "\n", "#  I guess???? or should it be always the same for all batch, and use the padding of NILL to the rest???", "\n", "# lengths_linker = linker_mask.sum(-1).max(-1)[", "\n", "#     0].long()  # this will assign different length for each batch", "\n", "\n", "# TODO: this may be cheaper than the previous line, but may not work for batches > 1, experiment this!!", "\n", "lengths_linker", "=", "torch", ".", "LongTensor", "(", "[", "linker_mask", ".", "shape", "[", "-", "1", "]", "]", ")", ".", "repeat", "(", "linker_mask", ".", "shape", "[", "0", "]", ")", ".", "to", "(", "\n", "settings", ".", "device", ")", "\n", "# lengths_coref_linker = lengths_linker + lengths_coref", "\n", "\n", "triangular_mask", "=", "torch", ".", "ones", "(", "linker_mask", ".", "size", "(", ")", "[", "-", "2", "]", ",", "linker_mask", ".", "size", "(", ")", "[", "-", "2", "]", ",", "device", "=", "settings", ".", "device", "\n", ")", ".", "tril", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "triangular_mask", "=", "torch", ".", "cat", "(", "linker_mask", ".", "shape", "[", "0", "]", "*", "[", "triangular_mask", "]", ")", "\n", "\n", "# concatenate entity mask to the span-span coreference mask", "\n", "triangular_mask", "=", "torch", ".", "cat", "(", "[", "linker_mask", ",", "triangular_mask", "]", ",", "dim", "=", "-", "1", ")", "\n", "if", "self", ".", "filter_singletons_with_matrix", ":", "\n", "                    ", "no_mentions_mask", "=", "torch", ".", "ones", "(", "linker_mask", ".", "size", "(", ")", "[", "-", "2", "]", ",", "1", ",", "device", "=", "settings", ".", "device", ")", ".", "unsqueeze", "(", "0", ")", "\n", "triangular_mask", "=", "torch", ".", "cat", "(", "[", "no_mentions_mask", ",", "triangular_mask", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "constant", "=", "scores", ".", "max", "(", ")", ".", "item", "(", ")", "+", "100000", "\n", "additive_mask", "=", "(", "1", "-", "triangular_mask", ")", "*", "-", "constant", "\n", "logits", "=", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "scores", "+", "additive_mask", ".", "to", "(", "scores", ".", "device", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "if", "scores", "is", "not", "None", "and", "targets_matrix", "is", "not", "None", ":", "\n", "                ", "loss", "=", "-", "logsumexp", "(", "logits", "+", "(", "1", "-", "targets_matrix", ")", "*", "-", "100000", ")", "\n", "mask", "=", "get_mask_from_sequence_lengths", "(", "lengths_coref", ",", "lengths_coref", ".", "max", "(", ")", ".", "item", "(", ")", ")", ".", "float", "(", ")", "\n", "output", "[", "'loss'", "]", "=", "self", ".", "weight", "*", "(", "mask", "*", "loss", ")", ".", "sum", "(", ")", "\n", "", "elif", "not", "api_call", ":", "# when api call is performed (e.g. with only text), we do not get the gold annotation", "\n", "                ", "raise", "BaseException", "(", "\"HUH\"", ")", "\n", "", "else", ":", "\n", "                ", "output", "[", "'loss'", "]", "=", "0.0", "\n", "\n", "", "output_coref", "[", "'loss'", "]", "=", "output", "[", "'loss'", "]", "\n", "output_linking", "[", "'loss'", "]", "=", "output", "[", "'loss'", "]", "\n", "\n", "if", "predict", "and", "not", "only_loss", ":", "\n", "                ", "candidate_ids", "=", "[", "]", "\n", "for", "curr_cand_batch", ",", "_", "in", "enumerate", "(", "candidates", ")", ":", "\n", "                    ", "unique_curr_batch", "=", "candidates", "[", "curr_cand_batch", "]", ".", "unique", "(", "sorted", "=", "True", ")", "\n", "if", "self", ".", "no_nil_in_targets", ":", "\n", "                        ", "unique_curr_batch", "=", "unique_curr_batch", "[", "unique_curr_batch", "!=", "nill_id", "]", "\n", "# (16/10/2020) - 0 is used for padding, so remove it", "\n", "", "unique_curr_batch", "=", "unique_curr_batch", "[", "unique_curr_batch", "!=", "self", ".", "unknown_dict", "]", "\n", "\n", "candidate_ids", ".", "append", "(", "unique_curr_batch", ")", "\n", "# link_id_to_coref_col = dict()", "\n", "", "link_id_to_coref_col", "=", "list", "(", ")", "\n", "# for matrix_idx_link, link_dict_id in enumerate(candidate_ids):", "\n", "for", "batch_id", ",", "candidate_ids_batch", "in", "enumerate", "(", "candidate_ids", ")", ":", "\n", "                    ", "link_id_to_coref_col", ".", "append", "(", "dict", "(", ")", ")", "\n", "for", "matrix_idx_link", ",", "link_dict_id", "in", "enumerate", "(", "candidate_ids_batch", ")", ":", "\n", "                        ", "link_id_to_coref_col", "[", "batch_id", "]", "[", "link_dict_id", ".", "item", "(", ")", "]", "=", "matrix_idx_link", "\n", "\n", "", "", "coref_col_to_link_id", "=", "list", "(", ")", "\n", "for", "batch_id", ",", "link_id_to_coref_col_batch", "in", "enumerate", "(", "link_id_to_coref_col", ")", ":", "\n", "                    ", "coref_col_to_link_id", ".", "append", "(", "{", "v", ":", "k", "for", "k", ",", "v", "in", "link_id_to_coref_col_batch", ".", "items", "(", ")", "}", ")", "\n", "\n", "", "decoded_m2i_coref_linker", ",", "span_to_pointer_detail_info", "=", "decode_m2i_coreflinker", "(", "logits", ",", "lengths_coref", ",", "lengths_linker", ",", "\n", "# lengths_coref_linker,", "\n", "linker_candidates", ",", "candidate_ids", ",", "\n", "link_id_to_coref_col", "=", "link_id_to_coref_col", ",", "\n", "dic", "=", "self", ".", "entity_dictionary", ",", "\n", "coref_col_to_link_id", "=", "coref_col_to_link_id", ",", "\n", "pred_spans", "=", "pred_spans", ",", "real_scores", "=", "scores", ",", "\n", "filter_singletons_with_matrix", "=", "self", ".", "filter_singletons_with_matrix", ",", "\n", "ignore_no_mention_chains", "=", "self", ".", "ignore_no_mention_chains", ")", "\n", "\n", "# decoded_m2i_coref_linker - <class 'list'>: [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 5, 55, 56, 57, 58, 59, 60, 5, 62]]", "\n", "# pred_spans - <class 'list'>: [[(3, 4), (5, 6), (5, 7), (41, 43), (45, 47), (49, 49), (49, 50), (50, 50), (50, 52), (51, 52), (51, 54), (53, 54), (57, 57), (57, 59)]]", "\n", "# here gets the coref cluster spans only", "\n", "output_pred", "=", "[", "\n", "convert_coref", "(", "m2i_to_clusters_linkercoref", "(", "x", ",", "coref_col_to_link_id_b", ",", "\n", "self", ".", "entity_dictionary", ",", "\n", "candidate_ids_b", ".", "size", "(", "-", "1", ")", ")", ",", "\n", "y", ",", "number_candidates", "=", "candidate_ids_b", ".", "size", "(", "-", "1", ")", ",", "\n", "links_dictionary", "=", "self", ".", "entity_dictionary", ",", "\n", "coref_col_to_link_id", "=", "coref_col_to_link_id_b", ")", "\n", "for", "x", ",", "y", ",", "candidate_ids_b", ",", "coref_col_to_link_id_b", "in", "\n", "zip", "(", "decoded_m2i_coref_linker", ",", "pred_spans", ",", "candidate_ids", ",", "\n", "coref_col_to_link_id", ")", "]", "if", "scores", "is", "not", "None", "else", "[", "[", "]", "for", "_", "in", "pred_spans", "]", "\n", "\n", "output_coref", "[", "'pred'", "]", "=", "[", "out", "[", "0", "]", "for", "out", "in", "output_pred", "]", "\n", "output_coref", "[", "'pred_pointers'", "]", "=", "span_to_pointer_detail_info", "\n", "output_linking", "[", "'pred'", "]", "=", "[", "out", "[", "1", "]", "for", "out", "in", "output_pred", "]", "\n", "output_linking", "[", "'spans_with_link'", "]", "=", "[", "out", "[", "2", "]", "for", "out", "in", "output_pred", "]", "\n", "# THIS ONLY WILL WORK IF NOT END-TO-END!!!", "\n", "for", "batch_id", "in", "range", "(", "len", "(", "output_linking", "[", "'pred'", "]", ")", ")", ":", "\n", "                    ", "curr_pred_spans", "=", "pred_spans", "[", "batch_id", "]", "\n", "curr_spans_with_link", "=", "output_linking", "[", "'spans_with_link'", "]", "[", "batch_id", "]", "\n", "curr_predicted_links", "=", "output_linking", "[", "'pred'", "]", "[", "batch_id", "]", "\n", "for", "idx_span", ",", "curr_span", "in", "enumerate", "(", "curr_pred_spans", ")", ":", "\n", "# (kzaporoj) 14/10/2020 - changed this if to be end-to-end compatible.", "\n", "#   TODO: check the evaluator for ignoreing 'NILL' for non-linkable entity types (ex: \"role\").", "\n", "                        ", "if", "curr_span", "not", "in", "curr_spans_with_link", ":", "\n", "                            ", "if", "self", ".", "end_to_end", ":", "\n", "# curr_predicted_links.append(curr_span + ('NILL',))", "\n", "                                ", "pass", "\n", "", "elif", "tot_cand_lengths_in_gold_mentions", "[", "batch_id", "]", "[", "idx_span", "]", ">", "0", ":", "\n", "                                ", "curr_predicted_links", ".", "append", "(", "curr_span", "+", "(", "'NILL'", ",", ")", ")", "\n", "\n", "", "", "", "", "max_nr_candidates", "=", "linker_candidates", ".", "size", "(", "-", "1", ")", "\n", "\n", "if", "self", ".", "end_to_end", ":", "\n", "                    ", "linker_spans", "=", "filtered_spans", "[", "'pruned_spans'", "]", "\n", "", "else", ":", "\n", "                    ", "linker_spans", "=", "filtered_spans", "[", "'pruned_spans'", "]", "\n", "\n", "", "cols_to_ignore", "=", "0", "\n", "if", "self", ".", "filter_singletons_with_matrix", ":", "\n", "                    ", "cols_to_ignore", "=", "1", "\n", "\n", "", "s", "=", "predict_scores", "(", "scores", "[", ":", ",", ":", ",", "cols_to_ignore", ":", "max_nr_candidates", "+", "cols_to_ignore", "]", ",", "linker_spans", ",", "\n", "linker_candidates", ",", "\n", "candidate_lengths", ",", "self", ".", "labels", ")", "\n", "\n", "output_coref", "[", "'scores'", "]", "=", "predict_scores_coref", "(", "scores", "[", ":", ",", ":", ",", "max_nr_candidates", "+", "cols_to_ignore", ":", "]", ",", "\n", "pred_spans", "=", "pred_spans", ")", "\n", "\n", "output_linking", "[", "'scores'", "]", "=", "s", "\n", "\n", "if", "not", "api_call", ":", "\n", "                    ", "output_coref", "[", "'gold'", "]", "=", "[", "convert_coref", "(", "m2i_to_clusters_linkercoref", "(", "x", ".", "tolist", "(", ")", ")", ",", "y", ",", "\n", "number_candidates", "=", "0", ",", "\n", "links_dictionary", "=", "self", ".", "entity_dictionary", ")", "[", "0", "]", "for", "x", ",", "y", "in", "\n", "zip", "(", "gold_m2i", ",", "gold_spans", ")", "]", "\n", "\n", "# TODO - number_candidates!!!", "\n", "output_linking", "[", "'gold'", "]", "=", "linker", "[", "'gold'", "]", "\n", "", "else", ":", "\n", "                    ", "output_coref", "[", "'gold'", "]", "=", "[", "None", "for", "_", "in", "gold_spans", "]", "\n", "output_linking", "[", "'gold'", "]", "=", "[", "None", "for", "_", "in", "gold_spans", "]", "\n", "\n", "# for loss just copies the loss from output for both linker and coref ; this 'loss' is needed when", "\n", "# later evaluating in metrics.misc.MetricObjective#update2 for example (see below when adding metrics", "\n", "# in create_metrics(self) method)", "\n", "\n", "", "if", "self", ".", "filter_singletons_with_pruner", ":", "\n", "                    ", "if", "not", "self", ".", "filter_only_singletons", ":", "\n", "# this assumes that pruner is able to predict spans", "\n", "                        ", "output_coref", "[", "'pred'", "]", "=", "remove_disabled_spans", "(", "output_coref", "[", "'pred'", "]", ",", "pruner_spans", ")", "\n", "coref_flat", "=", "[", "{", "item", "for", "sublist", "in", "batch", "for", "item", "in", "sublist", "}", "for", "batch", "in", "output_coref", "[", "'pred'", "]", "]", "\n", "output_linking", "[", "'pred'", "]", "=", "remove_disabled_spans_linking", "(", "output_linking", "[", "'pred'", "]", ",", "coref_flat", ")", "\n", "output_coref", "[", "'scores'", "]", "=", "remove_disabled_scores_coref", "(", "output_coref", "[", "'scores'", "]", ",", "coref_flat", ")", "\n", "output_linking", "[", "'scores'", "]", "=", "remove_disabled_scores_linking", "(", "output_linking", "[", "'scores'", "]", ",", "coref_flat", ")", "\n", "", "else", ":", "\n", "# output_coref['pred'] = remove_disabled_spans(output_coref['pred'], pruner_spans)", "\n", "                        ", "output_coref", "[", "'pred'", "]", "=", "remove_singletons_without_link", "(", "output_coref", "[", "'pred'", "]", ",", "\n", "output_linking", "[", "'pred'", "]", ",", "\n", "pruner_spans", ")", "\n", "coref_flat", "=", "[", "{", "item", "for", "sublist", "in", "batch", "for", "item", "in", "sublist", "}", "for", "batch", "in", "output_coref", "[", "'pred'", "]", "]", "\n", "output_linking", "[", "'pred'", "]", "=", "remove_disabled_spans_linking", "(", "output_linking", "[", "'pred'", "]", ",", "coref_flat", ")", "\n", "output_coref", "[", "'scores'", "]", "=", "remove_disabled_scores_coref", "(", "output_coref", "[", "'scores'", "]", ",", "coref_flat", ")", "\n", "output_linking", "[", "'scores'", "]", "=", "remove_disabled_scores_linking", "(", "output_linking", "[", "'scores'", "]", ",", "coref_flat", ")", "\n", "\n", "\n", "", "", "if", "self", ".", "filter_singletons_with_matrix", ":", "\n", "                    ", "coref_flat", "=", "[", "{", "item", "for", "sublist", "in", "batch", "for", "item", "in", "sublist", "}", "for", "batch", "in", "output_coref", "[", "'pred'", "]", "]", "\n", "output_linking", "[", "'pred'", "]", "=", "remove_disabled_spans_linking", "(", "output_linking", "[", "'pred'", "]", ",", "coref_flat", ")", "\n", "output_coref", "[", "'scores'", "]", "=", "remove_disabled_scores_coref", "(", "output_coref", "[", "'scores'", "]", ",", "coref_flat", ")", "\n", "output_linking", "[", "'scores'", "]", "=", "remove_disabled_scores_linking", "(", "output_linking", "[", "'scores'", "]", ",", "coref_flat", ")", "\n", "\n", "", "if", "self", ".", "filter_singletons_with_ner", ":", "\n", "                    ", "output_coref", "[", "'pred'", "]", "=", "remove_disabled_spans", "(", "output_coref", "[", "'pred'", "]", ",", "ner_spans", ")", "\n", "output_linking", "[", "'pred'", "]", "=", "remove_disabled_spans_linking", "(", "output_linking", "[", "'pred'", "]", ",", "ner_spans", ")", "\n", "output_coref", "[", "'scores'", "]", "=", "None", "# TODO", "\n", "output_linking", "[", "'scores'", "]", "=", "None", "# TODO", "\n", "raise", "NotImplementedError", "# TODO!! first resolve the two previous TODOs!!! ,", "\n", "#  if not the builder will just output all mentions that have associated 'scores'", "\n", "\n", "", "", "", "else", ":", "\n", "# output['loss'] = torch.tensor(0.0, device=settings.device, requires_grad=True)  # (skip minibatch)", "\n", "            ", "output", "[", "'loss'", "]", "=", "0.0", "\n", "output_coref", "[", "'loss'", "]", "=", "0.0", "\n", "# if gold_spans is None:", "\n", "#     gold_spans = []", "\n", "output_coref", "[", "'pred'", "]", "=", "[", "None", "for", "x", "in", "gold_spans", "]", "\n", "output_coref", "[", "'pred_pointers'", "]", "=", "[", "None", "for", "x", "in", "gold_spans", "]", "\n", "output_coref", "[", "'gold'", "]", "=", "[", "None", "for", "x", "in", "gold_spans", "]", "\n", "output_coref", "[", "'scores'", "]", "=", "[", "None", "for", "x", "in", "gold_spans", "]", "\n", "\n", "# TODO: see well what have to add here for pred_linking and gold_linking", "\n", "output_linking", "[", "'pred'", "]", "=", "[", "None", "for", "x", "in", "gold_spans", "]", "\n", "output_linking", "[", "'gold'", "]", "=", "[", "None", "for", "x", "in", "gold_spans", "]", "\n", "output_linking", "[", "'loss'", "]", "=", "0.0", "\n", "output_linking", "[", "'scores'", "]", "=", "[", "None", "for", "x", "in", "gold_spans", "]", "\n", "\n", "# kzaporoj - None for the link part , not yet", "\n", "", "return", "output", "[", "'loss'", "]", ",", "output_linking", ",", "output_coref", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_hoi.CorefLinkerLossHoi.log_stats": [[290, 292], ["None"], "methods", ["None"], ["", "def", "log_stats", "(", "self", ",", "dataset_name", ",", "predict", ",", "tb_logger", ",", "step_nr", ")", ":", "\n", "        ", "pass", "# for now nothing here", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.coreflinker_hoi.CorefLinkerLossHoi.create_metrics": [[293, 315], ["out.extend", "out.append", "out.append", "out.append", "out.extend", "metrics.coref.MetricCoref", "metrics.coref.MetricCoref", "metrics.coref.MetricCoref", "metrics.coref.MetricCorefAverage", "metrics.misc.MetricObjective", "metrics.corefx.MetricCorefExternal", "metrics.linker.MetricLinkerImproved", "metrics.linker.MetricLinkerImproved", "metrics.linker.MetricLinkerImproved", "metrics.linker.MetricLinkAccuracy", "metrics.linker.MetricLinkAccuracyNoCandidates", "metrics.misc.MetricObjective"], "methods", ["None"], ["", "def", "create_metrics", "(", "self", ")", ":", "\n", "        ", "out", "=", "[", "]", "\n", "if", "self", ".", "enabled", ":", "\n", "            ", "metrics", "=", "[", "\n", "MetricCoref", "(", "self", ".", "coref_task", ",", "'muc'", ",", "MetricCoref", ".", "muc", ")", ",", "\n", "MetricCoref", "(", "self", ".", "coref_task", ",", "'bcubed'", ",", "MetricCoref", ".", "b_cubed", ",", "verbose", "=", "False", ")", ",", "\n", "MetricCoref", "(", "self", ".", "coref_task", ",", "'ceafe'", ",", "MetricCoref", ".", "ceafe", ",", "verbose", "=", "False", ")", ",", "\n", "]", "\n", "\n", "out", ".", "extend", "(", "metrics", ")", "\n", "out", ".", "append", "(", "MetricCorefAverage", "(", "self", ".", "coref_task", ",", "'avg'", ",", "metrics", ")", ")", "\n", "out", ".", "append", "(", "MetricObjective", "(", "self", ".", "coref_task", ")", ")", "\n", "out", ".", "append", "(", "MetricCorefExternal", "(", "self", ".", "coref_task", ")", ")", "\n", "\n", "out", ".", "extend", "(", "[", "MetricLinkerImproved", "(", "self", ".", "link_task", ")", ",", "\n", "MetricLinkerImproved", "(", "self", ".", "link_task", ",", "'links'", ")", ",", "\n", "MetricLinkerImproved", "(", "self", ".", "link_task", ",", "'nills'", ")", ",", "\n", "MetricLinkAccuracy", "(", "self", ".", "link_task", ")", ",", "\n", "MetricLinkAccuracyNoCandidates", "(", "self", ".", "link_task", ")", ",", "\n", "MetricObjective", "(", "self", ".", "link_task", ")", "]", ")", "\n", "\n", "", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.seq2seqs.augmented_lstm.AugmentedLSTM.__init__": [[8, 13], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_input", ",", "config", ")", ":", "\n", "        ", "super", "(", "AugmentedLSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim_output", "=", "config", "[", "'dim'", "]", "*", "2", "\n", "# self.rnn = StackedBidirectionalLstm(dim_input, config['dim'], config['layers'])", "\n", "self", ".", "rnn", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.seq2seqs.augmented_lstm.AugmentedLSTM.forward": [[14, 19], ["torch.pack_padded_sequence", "torch.pack_padded_sequence", "augmented_lstm.AugmentedLSTM.rnn", "torch.pad_packed_sequence", "torch.pad_packed_sequence"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "seqlens", ",", "indices", "=", "None", ")", ":", "\n", "        ", "packed_inputs", "=", "rnn_utils", ".", "pack_padded_sequence", "(", "inputs", ",", "seqlens", ",", "batch_first", "=", "True", ")", "\n", "packed_outputs", ",", "_", "=", "self", ".", "rnn", "(", "packed_inputs", ")", "\n", "outputs", ",", "_", "=", "rnn_utils", ".", "pad_packed_sequence", "(", "packed_outputs", ",", "batch_first", "=", "True", ")", "\n", "return", "outputs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.ner.spans.TaskSpanGenerator1.__init__": [[30, 45], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "create_bie_filters().cuda", "print", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "spans.create_bie_filters"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.ner.spans.create_bie_filters"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "dim_input", ",", "config", ")", ":", "\n", "        ", "super", "(", "TaskSpanGenerator1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "enabled", "=", "config", "[", "'enabled'", "]", "\n", "self", ".", "max_span_length", "=", "config", "[", "'max_span_length'", "]", "\n", "self", ".", "bie", "=", "nn", ".", "Linear", "(", "dim_input", ",", "3", ")", "\n", "self", ".", "filters", "=", "create_bie_filters", "(", "self", ".", "max_span_length", ")", ".", "cuda", "(", ")", "\n", "self", ".", "weight", "=", "config", "[", "'weight'", "]", "\n", "pos_weights", "=", "torch", ".", "ones", "(", "[", "1", "]", ")", "*", "config", "[", "'pos_weight'", "]", "\n", "print", "(", "'->'", ",", "pos_weights", ")", "\n", "self", ".", "loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", "reduction", "=", "'none'", ",", "pos_weight", "=", "pos_weights", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "max_span_length", ")", ")", "\n", "\n", "self", ".", "total_pred_spans", "=", "0", "\n", "self", ".", "total_gold_spans", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.ner.spans.TaskSpanGenerator1.forward": [[46, 93], ["spans.TaskSpanGenerator1.bie", "torch.conv1d", "torch.conv1d", "torch.conv1d", "logits.permute.permute.permute", "create_span_mask().float", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "enumerate", "spans.TaskSpanGenerator1.loss", "torch.pad", "torch.pad", "torch.pad", "len", "torch.zeros_like.view", "torch.zeros_like.view", "torch.zeros_like.view", "spans.TaskSpanGenerator1.sum", "torch.nonzero().tolist", "torch.nonzero().tolist", "torch.nonzero().tolist", "torch.nonzero().tolist", "torch.nonzero().tolist", "torch.nonzero().tolist", "torch.nonzero().tolist", "torch.nonzero().tolist", "torch.nonzero().tolist", "len", "spans.TaskSpanGenerator1.permute", "spans.create_span_mask", "list", "preds[].append", "inputs.size", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.ner.spans.create_span_mask"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ",", "sequence_lengths", ",", "mask", ",", "gold_spans", ",", "predict", "=", "False", ")", ":", "\n", "        ", "output", "=", "{", "}", "\n", "\n", "scores", "=", "self", ".", "bie", "(", "inputs", ")", "\n", "logits", "=", "F", ".", "conv1d", "(", "F", ".", "pad", "(", "scores", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ",", "(", "0", ",", "self", ".", "max_span_length", "-", "1", ")", ")", ",", "self", ".", "filters", ",", "\n", "bias", "=", "self", ".", "bias", ".", "data", ")", "\n", "logits", "=", "logits", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "# print(scores.size(), '->', out.size())", "\n", "# logits = self.test(inputs).permute(0,2,1)", "\n", "\n", "# logits = self.hihi(inputs.permute(0,2,1)).permute(0,2,1)", "\n", "\n", "mask", "=", "create_span_mask", "(", "inputs", ".", "size", "(", "1", ")", ",", "self", ".", "max_span_length", ",", "sequence_lengths", ")", ".", "float", "(", ")", "\n", "\n", "t", "=", "torch", ".", "zeros_like", "(", "logits", ")", "\n", "for", "i", ",", "instance", "in", "enumerate", "(", "gold_spans", ")", ":", "\n", "            ", "self", ".", "total_gold_spans", "+=", "len", "(", "instance", ")", "\n", "for", "begin", ",", "end", "in", "instance", ":", "\n", "                ", "if", "end", "-", "begin", "<", "self", ".", "max_span_length", ":", "\n", "                    ", "t", "[", "i", ",", "begin", ",", "end", "-", "begin", "]", "=", "1", "\n", "\n", "", "", "", "obj", "=", "self", ".", "loss", "(", "(", "logits", "*", "mask", ")", ".", "view", "(", "-", "1", ",", "1", ")", ",", "t", ".", "view", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "output", "[", "'loss'", "]", "=", "obj", ".", "sum", "(", ")", "*", "self", ".", "weight", "\n", "\n", "if", "True", ":", "\n", "            ", "predictions", "=", "torch", ".", "nonzero", "(", "logits", "*", "mask", ">", "0", ")", ".", "tolist", "(", ")", "\n", "preds", "=", "[", "list", "(", ")", "for", "_", "in", "gold_spans", "]", "\n", "for", "batch", ",", "begin", ",", "width", "in", "predictions", ":", "\n", "                ", "preds", "[", "batch", "]", ".", "append", "(", "(", "begin", ",", "begin", "+", "width", ")", ")", "\n", "", "self", ".", "total_pred_spans", "+=", "len", "(", "predictions", ")", "\n", "pred_spans", "=", "preds", "\n", "\n", "", "output", "[", "'pred'", "]", "=", "[", "[", "(", "b", ",", "e", "+", "1", ",", "'span'", ")", "for", "b", ",", "e", "in", "spans", "]", "for", "spans", "in", "pred_spans", "]", "\n", "output", "[", "'gold'", "]", "=", "[", "[", "(", "b", ",", "e", "+", "1", ",", "'span'", ")", "for", "b", ",", "e", "in", "spans", "]", "for", "spans", "in", "gold_spans", "]", "\n", "\n", "# print('p:', output['pred'][0])", "\n", "# print('g:', output['gold'][0])", "\n", "\n", "# pos = 1", "\n", "# print(\"span-0:\", scores[0,pos,0].item() + scores[0,pos,2].item(), out[0,0,pos].item())", "\n", "# print(\"span-1:\", scores[0,pos,0].item() + scores[0,pos+1,2].item(), out[0,1,pos].item())", "\n", "# print(\"span-2:\", scores[0,pos,0].item() + scores[0,pos+1,1].item() + scores[0,pos+2,2].item(), out[0,2,pos].item())", "\n", "# print(\"span-3:\", scores[0,pos,0].item() + scores[0,pos+1,1].item() + scores[0,pos+2,1].item() + scores[0,pos+3,2].item(), out[0,3,pos].item())", "\n", "# print(\"span-4:\", scores[0,pos,0].item() + scores[0,pos+1,1].item() + scores[0,pos+2,1].item() + scores[0,pos+3,1].item() + scores[0,pos+4,2].item(), out[0,4,pos].item())", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.ner.spans.TaskSpanGenerator1.create_metrics": [[94, 96], ["metrics.f1.MetricSpanNER", "metrics.misc.MetricObjective"], "methods", ["None"], ["", "def", "create_metrics", "(", "self", ")", ":", "\n", "        ", "return", "[", "MetricSpanNER", "(", "self", ".", "name", ",", "labels", "=", "[", "'span'", "]", ")", ",", "MetricObjective", "(", "self", ".", "name", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.ner.spans.TaskSpanGenerator1.tick": [[97, 102], ["print"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "tick", "(", "self", ",", "dataset_name", ")", ":", "\n", "        ", "print", "(", "\"{}-span-generator: {} / {} = {}\"", ".", "format", "(", "dataset_name", ",", "self", ".", "total_pred_spans", ",", "self", ".", "total_gold_spans", ",", "\n", "self", ".", "total_pred_spans", "/", "self", ".", "total_gold_spans", ")", ")", "\n", "self", ".", "total_pred_spans", "=", "0", "\n", "self", ".", "total_gold_spans", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.ner.spans.TaskSpanGenerator2.__init__": [[107, 122], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "create_bie_filters().cuda", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "spans.create_bie_filters"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.ner.spans.create_bie_filters"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "dim_input", ",", "config", ")", ":", "\n", "        ", "super", "(", "TaskSpanGenerator2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "enabled", "=", "config", "[", "'enabled'", "]", "\n", "self", ".", "max_span_length", "=", "config", "[", "'max_span_length'", "]", "\n", "self", ".", "bie", "=", "nn", ".", "Linear", "(", "dim_input", ",", "3", ")", "\n", "self", ".", "filters", "=", "create_bie_filters", "(", "self", ".", "max_span_length", ")", ".", "cuda", "(", ")", "\n", "self", ".", "weight", "=", "config", "[", "'weight'", "]", "\n", "self", ".", "loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", "reduction", "=", "'none'", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "max_span_length", ")", ")", "\n", "self", ".", "spans_per_token", "=", "config", "[", "'spans_per_token'", "]", "\n", "\n", "self", ".", "total_obj", "=", "0", "\n", "self", ".", "total_pred_spans", "=", "0", "\n", "self", ".", "total_gold_spans", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.ner.spans.TaskSpanGenerator2.forward": [[123, 192], ["spans.TaskSpanGenerator2.bie", "torch.conv1d", "torch.conv1d", "torch.conv1d", "logits.permute.permute.permute", "create_span_mask().float", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "enumerate", "spans.TaskSpanGenerator2.loss", "output[].item", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.fmod", "torch.fmod", "torch.fmod", "torch.fmod", "torch.fmod", "torch.fmod", "torch.fmod", "torch.fmod", "torch.fmod", "enumerate", "sum", "sum", "torch.pad", "torch.pad", "torch.pad", "spans.TaskSpanGenerator2.sum", "list", "zip", "spans.TaskSpanGenerator2.permute", "spans.create_span_mask", "masked_logits.contiguous().view", "begins[].tolist", "widths[].tolist", "preds[].append", "len", "len", "inputs.size", "logits.permute.permute.size", "masked_logits.contiguous"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.ner.spans.create_span_mask", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ",", "sequence_lengths", ",", "mask", ",", "gold_spans", ",", "predict", "=", "False", ")", ":", "\n", "        ", "output", "=", "{", "}", "\n", "\n", "scores", "=", "self", ".", "bie", "(", "inputs", ")", "\n", "logits", "=", "F", ".", "conv1d", "(", "F", ".", "pad", "(", "scores", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ",", "(", "0", ",", "self", ".", "max_span_length", "-", "1", ")", ")", ",", "self", ".", "filters", ",", "\n", "bias", "=", "self", ".", "bias", ".", "data", ")", "\n", "logits", "=", "logits", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "# print(scores.size(), '->', out.size())", "\n", "# logits = self.test(inputs).permute(0,2,1)", "\n", "\n", "# logits = self.hihi(inputs.permute(0,2,1)).permute(0,2,1)", "\n", "\n", "mask", "=", "create_span_mask", "(", "inputs", ".", "size", "(", "1", ")", ",", "self", ".", "max_span_length", ",", "sequence_lengths", ")", ".", "float", "(", ")", "\n", "\n", "t", "=", "torch", ".", "zeros_like", "(", "logits", ")", "\n", "for", "i", ",", "instance", "in", "enumerate", "(", "gold_spans", ")", ":", "\n", "            ", "for", "begin", ",", "end", "in", "instance", ":", "\n", "                ", "if", "end", "-", "begin", "<", "self", ".", "max_span_length", ":", "\n", "                    ", "t", "[", "i", ",", "begin", ",", "end", "-", "begin", "]", "=", "1", "\n", "\n", "", "", "", "obj", "=", "self", ".", "loss", "(", "logits", "*", "mask", ",", "t", ")", "\n", "\n", "output", "[", "'loss'", "]", "=", "obj", ".", "sum", "(", ")", "*", "self", ".", "weight", "\n", "self", ".", "total_obj", "+=", "output", "[", "'loss'", "]", ".", "item", "(", ")", "\n", "\n", "# if True:", "\n", "#     predictions = torch.nonzero(logits * mask > 0).tolist()", "\n", "#     preds = [list() for _ in gold_spans]", "\n", "#     for batch, begin, width in predictions:", "\n", "#         preds[batch].append( (begin, begin+width) )", "\n", "#     pred_spans = preds", "\n", "# print(\"pred-1:\", [len(x) for x in pred_spans])", "\n", "\n", "masked_logits", "=", "logits", "+", "(", "1.0", "-", "mask", ")", "*", "-", "10000.0", "\n", "# masked_logits = t + (1.0 - mask) * -10000.0", "\n", "sorted_indices", "=", "torch", ".", "argsort", "(", "-", "masked_logits", ".", "contiguous", "(", ")", ".", "view", "(", "logits", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "begins", "=", "sorted_indices", "/", "self", ".", "max_span_length", "\n", "widths", "=", "torch", ".", "fmod", "(", "sorted_indices", ",", "self", ".", "max_span_length", ")", "\n", "\n", "# tops = [len(x) for x in gold_spans]", "\n", "tops", "=", "(", "sequence_lengths", "*", "self", ".", "spans_per_token", ")", ".", "int", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "preds", "=", "[", "list", "(", ")", "for", "_", "in", "gold_spans", "]", "\n", "for", "batch", ",", "top", "in", "enumerate", "(", "tops", ")", ":", "\n", "            ", "for", "begin", ",", "width", "in", "zip", "(", "begins", "[", "batch", ",", "0", ":", "top", "]", ".", "tolist", "(", ")", ",", "widths", "[", "batch", ",", "0", ":", "top", "]", ".", "tolist", "(", ")", ")", ":", "\n", "                ", "preds", "[", "batch", "]", ".", "append", "(", "(", "begin", ",", "begin", "+", "width", ")", ")", "\n", "", "", "pred_spans", "=", "preds", "\n", "\n", "# print(\"pred-2:\", [len(x) for x in preds])", "\n", "\n", "output", "[", "'pred'", "]", "=", "[", "[", "(", "b", ",", "e", "+", "1", ",", "'span'", ")", "for", "b", ",", "e", "in", "spans", "]", "for", "spans", "in", "pred_spans", "]", "\n", "output", "[", "'gold'", "]", "=", "[", "[", "(", "b", ",", "e", "+", "1", ",", "'span'", ")", "for", "b", ",", "e", "in", "spans", "]", "for", "spans", "in", "gold_spans", "]", "\n", "\n", "# print(\"gold:\", [len(x) for x in gold_spans])", "\n", "\n", "self", ".", "total_pred_spans", "+=", "sum", "(", "[", "len", "(", "x", ")", "for", "x", "in", "pred_spans", "]", ")", "\n", "self", ".", "total_gold_spans", "+=", "sum", "(", "[", "len", "(", "x", ")", "for", "x", "in", "gold_spans", "]", ")", "\n", "\n", "# print('p:', output['pred'][0])", "\n", "# print('g:', output['gold'][0])", "\n", "\n", "# pos = 1", "\n", "# print(\"span-0:\", scores[0,pos,0].item() + scores[0,pos,2].item(), out[0,0,pos].item())", "\n", "# print(\"span-1:\", scores[0,pos,0].item() + scores[0,pos+1,2].item(), out[0,1,pos].item())", "\n", "# print(\"span-2:\", scores[0,pos,0].item() + scores[0,pos+1,1].item() + scores[0,pos+2,2].item(), out[0,2,pos].item())", "\n", "# print(\"span-3:\", scores[0,pos,0].item() + scores[0,pos+1,1].item() + scores[0,pos+2,1].item() + scores[0,pos+3,2].item(), out[0,3,pos].item())", "\n", "# print(\"span-4:\", scores[0,pos,0].item() + scores[0,pos+1,1].item() + scores[0,pos+2,1].item() + scores[0,pos+3,1].item() + scores[0,pos+4,2].item(), out[0,4,pos].item())", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.ner.spans.TaskSpanGenerator2.create_metrics": [[193, 195], ["metrics.f1.MetricSpanNER", "metrics.misc.MetricObjective"], "methods", ["None"], ["", "def", "create_metrics", "(", "self", ")", ":", "\n", "        ", "return", "[", "MetricSpanNER", "(", "self", ".", "name", ",", "labels", "=", "[", "'span'", "]", ")", ",", "MetricObjective", "(", "self", ".", "name", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.ner.spans.TaskSpanGenerator2.tick": [[196, 202], ["print", "print"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "tick", "(", "self", ",", "dataset_name", ")", ":", "\n", "        ", "print", "(", "\"{}-obj: {}\"", ".", "format", "(", "dataset_name", ",", "self", ".", "total_obj", ")", ")", "\n", "print", "(", "\"{}-span-generator: {} / {} = {}\"", ".", "format", "(", "dataset_name", ",", "self", ".", "total_pred_spans", ",", "self", ".", "total_gold_spans", ",", "\n", "self", ".", "total_pred_spans", "/", "self", ".", "total_gold_spans", ")", ")", "\n", "self", ".", "total_pred_spans", "=", "0", "\n", "self", ".", "total_gold_spans", "=", "0", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.ner.spans.create_bie_filters": [[9, 17], ["torch.zeros", "torch.zeros", "torch.zeros", "range", "range"], "function", ["None"], ["def", "create_bie_filters", "(", "max_span_length", ")", ":", "\n", "    ", "filters", "=", "torch", ".", "zeros", "(", "max_span_length", ",", "3", ",", "max_span_length", ")", "\n", "for", "width", "in", "range", "(", "1", ",", "max_span_length", "+", "1", ")", ":", "\n", "        ", "filters", "[", "width", "-", "1", ",", "0", ",", "0", "]", "=", "1", "\n", "for", "i", "in", "range", "(", "1", ",", "width", "-", "1", ")", ":", "\n", "            ", "filters", "[", "width", "-", "1", ",", "1", ",", "i", "]", "=", "1", "\n", "", "filters", "[", "width", "-", "1", ",", "2", ",", "width", "-", "1", "]", "=", "1", "\n", "", "return", "filters", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.ner.spans.create_span_mask": [[19, 25], ["torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange.unsqueeze", "torch.arange.unsqueeze", "mask.unsqueeze().to", "sequence_lengths.unsqueeze().unsqueeze", "mask.unsqueeze", "sequence_lengths.unsqueeze"], "function", ["None"], ["", "def", "create_span_mask", "(", "length", ",", "width", ",", "sequence_lengths", ")", ":", "\n", "    ", "b", "=", "torch", ".", "arange", "(", "length", ")", "\n", "w", "=", "torch", ".", "arange", "(", "width", ")", "\n", "mask", "=", "b", ".", "unsqueeze", "(", "1", ")", "+", "w", ".", "unsqueeze", "(", "0", ")", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "sequence_lengths", ")", "<", "sequence_lengths", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.ner.spanner.SpanEndpoint.make_linear": [[68, 74], ["torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.normal_", "torch.normal_", "torch.normal_", "torch.normal_", "torch.zeros_", "torch.zeros_", "torch.zeros_", "torch.zeros_"], "methods", ["None"], ["    ", "def", "make_linear", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ",", "std", "=", "0.02", ")", ":", "\n", "        ", "linear", "=", "nn", ".", "Linear", "(", "in_features", ",", "out_features", ",", "bias", ")", "\n", "init", ".", "normal_", "(", "linear", ".", "weight", ",", "std", "=", "std", ")", "\n", "if", "bias", ":", "\n", "            ", "init", ".", "zeros_", "(", "linear", ".", "bias", ")", "\n", "", "return", "linear", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.ner.spanner.SpanEndpoint.make_ffnn": [[75, 86], ["range", "ffnn.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "spanner.SpanEndpoint.make_linear", "isinstance", "spanner.SpanEndpoint.make_linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "len", "spanner.SpanEndpoint.make_linear", "spanner.SpanEndpoint.make_linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_linear", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_linear", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_linear", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_linear"], ["", "def", "make_ffnn", "(", "self", ",", "feat_size", ",", "hidden_size", ",", "output_size", ")", ":", "\n", "        ", "if", "hidden_size", "is", "None", "or", "hidden_size", "==", "0", "or", "hidden_size", "==", "[", "]", "or", "hidden_size", "==", "[", "0", "]", ":", "\n", "            ", "return", "self", ".", "make_linear", "(", "feat_size", ",", "output_size", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "hidden_size", ",", "Iterable", ")", ":", "\n", "            ", "hidden_size", "=", "[", "hidden_size", "]", "\n", "", "ffnn", "=", "[", "self", ".", "make_linear", "(", "feat_size", ",", "hidden_size", "[", "0", "]", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "self", ".", "dropout", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "hidden_size", ")", ")", ":", "\n", "            ", "ffnn", "+=", "[", "self", ".", "make_linear", "(", "hidden_size", "[", "i", "-", "1", "]", ",", "hidden_size", "[", "i", "]", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "self", ".", "dropout", "]", "\n", "", "ffnn", ".", "append", "(", "self", ".", "make_linear", "(", "hidden_size", "[", "-", "1", "]", ",", "output_size", ")", ")", "\n", "return", "nn", ".", "Sequential", "(", "*", "ffnn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.ner.spanner.SpanEndpoint.__init__": [[87, 118], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "spanner.SpanEndpoint.make_ffnn", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_ffnn"], ["", "def", "__init__", "(", "self", ",", "dim_input", ",", "max_span_length", ",", "config", ")", ":", "\n", "        ", "super", "(", "SpanEndpoint", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "span_embed", "=", "'span_embed'", "in", "config", "\n", "self", ".", "dim_output", "=", "2", "*", "dim_input", "\n", "self", ".", "dim_input", "=", "dim_input", "\n", "self", ".", "span_average", "=", "config", "[", "'average'", "]", "\n", "\n", "if", "self", ".", "span_embed", ":", "\n", "            ", "self", ".", "embed", "=", "nn", ".", "Embedding", "(", "max_span_length", ",", "config", "[", "'span_embed'", "]", ")", "\n", "self", ".", "dim_output", "+=", "config", "[", "'span_embed'", "]", "\n", "\n", "", "if", "self", ".", "span_average", ":", "\n", "            ", "self", ".", "dim_output", "+=", "dim_input", "\n", "\n", "", "if", "'ff_dim'", "in", "config", ":", "\n", "            ", "self", ".", "ff", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "dim_output", ",", "config", "[", "'ff_dim'", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "config", "[", "'ff_dropout'", "]", ")", "\n", ")", "\n", "self", ".", "dim_output", "=", "config", "[", "'ff_dim'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "ff", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "", "if", "'attention_heads'", "in", "config", "and", "config", "[", "'attention_heads'", "]", ":", "\n", "            ", "self", ".", "attention_heads", "=", "True", "\n", "# self.mention_token_attn = self.make_ffnn(self.bert_emb_size, 0, output_size=1) if config[", "\n", "self", ".", "mention_token_attn", "=", "self", ".", "make_ffnn", "(", "self", ".", "dim_input", ",", "0", ",", "output_size", "=", "1", ")", "\n", "self", ".", "dim_output", "+=", "dim_input", "\n", "", "else", ":", "\n", "            ", "self", ".", "attention_heads", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.ner.spanner.SpanEndpoint.forward": [[119, 160], ["modules.misc.misc.batched_index_select", "modules.misc.misc.batched_index_select", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "spanner.SpanEndpoint.ff", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "vecs.append", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "vecs.append", "vecs.append", "spanner.SpanEndpoint.embed", "spanner.SpanEndpoint.mention_token_attn", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "spanner.span_average", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "candidate_tokens_mask.float", "inputs.size", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.batched_index_select", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.batched_index_select", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.ner.spanner.span_average"], ["", "", "def", "forward", "(", "self", ",", "inputs", ",", "b", ",", "e", ",", "max_width", ",", "span_mask", "=", "None", ")", ":", "\n", "        ", "b_vec", "=", "batched_index_select", "(", "inputs", ",", "b", ")", "\n", "e_vec", "=", "batched_index_select", "(", "inputs", ",", "torch", ".", "clamp", "(", "e", ",", "max", "=", "inputs", ".", "size", "(", "1", ")", "-", "1", ")", ")", "\n", "\n", "vecs", "=", "[", "b_vec", ",", "e_vec", "]", "\n", "\n", "if", "self", ".", "span_embed", ":", "\n", "            ", "vecs", ".", "append", "(", "self", ".", "embed", "(", "e", "-", "b", ")", ")", "\n", "\n", "", "if", "self", ".", "attention_heads", ":", "\n", "            ", "span_mask", "=", "span_mask", ">", "0.9", "\n", "# TODO: only will work for batch size of 1!", "\n", "curr_batch", "=", "0", "\n", "candidate_starts", ",", "candidate_ends", "=", "b", "[", "curr_batch", "]", "[", "span_mask", "[", "curr_batch", "]", "]", ",", "e", "[", "curr_batch", "]", "[", "\n", "span_mask", "[", "curr_batch", "]", "]", "\n", "num_candidates", "=", "candidate_starts", ".", "shape", "[", "0", "]", "\n", "\n", "token_attn", "=", "torch", ".", "squeeze", "(", "self", ".", "mention_token_attn", "(", "inputs", "[", "curr_batch", "]", ")", ",", "1", ")", "\n", "\n", "num_subtokens", "=", "inputs", "[", "curr_batch", "]", ".", "shape", "[", "0", "]", "# num_words", "\n", "candidate_tokens", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "arange", "(", "0", ",", "num_subtokens", ",", "\n", "device", "=", "settings", ".", "device", ")", ",", "0", ")", ".", "repeat", "(", "num_candidates", ",", "1", ")", "\n", "candidate_tokens_mask", "=", "(", "candidate_tokens", ">=", "torch", ".", "unsqueeze", "(", "candidate_starts", ",", "1", ")", ")", "&", "(", "candidate_tokens", "<=", "torch", ".", "unsqueeze", "(", "candidate_ends", ",", "1", ")", ")", "\n", "\n", "candidate_tokens_attn_raw", "=", "torch", ".", "log", "(", "candidate_tokens_mask", ".", "float", "(", ")", ")", "+", "torch", ".", "unsqueeze", "(", "token_attn", ",", "0", ")", "\n", "\n", "candidate_tokens_attn", "=", "nn", ".", "functional", ".", "softmax", "(", "candidate_tokens_attn_raw", ",", "dim", "=", "1", ")", "\n", "\n", "head_attn_emb", "=", "torch", ".", "matmul", "(", "candidate_tokens_attn", ",", "inputs", "[", "curr_batch", "]", ")", "\n", "\n", "att_vec", "=", "torch", ".", "zeros_like", "(", "b_vec", ",", "device", "=", "settings", ".", "device", ")", "\n", "att_vec", "[", "span_mask", "]", "=", "head_attn_emb", "\n", "vecs", ".", "append", "(", "att_vec", ")", "\n", "\n", "", "if", "self", ".", "span_average", ":", "\n", "            ", "vecs", ".", "append", "(", "span_average", "(", "inputs", ",", "b", ",", "e", ",", "max_width", ")", ")", "\n", "\n", "", "vec", "=", "torch", ".", "cat", "(", "vecs", ",", "-", "1", ")", "\n", "return", "self", ".", "ff", "(", "vec", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.ner.spanner.SpanEndpointSpanBert.make_linear": [[168, 174], ["torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.normal_", "torch.normal_", "torch.normal_", "torch.normal_", "torch.zeros_", "torch.zeros_", "torch.zeros_", "torch.zeros_"], "methods", ["None"], ["def", "make_linear", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ",", "std", "=", "0.02", ")", ":", "\n", "        ", "linear", "=", "nn", ".", "Linear", "(", "in_features", ",", "out_features", ",", "bias", ")", "\n", "init", ".", "normal_", "(", "linear", ".", "weight", ",", "std", "=", "std", ")", "\n", "if", "bias", ":", "\n", "            ", "init", ".", "zeros_", "(", "linear", ".", "bias", ")", "\n", "", "return", "linear", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.ner.spanner.SpanEndpointSpanBert.make_ffnn": [[175, 186], ["range", "ffnn.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "spanner.SpanEndpointSpanBert.make_linear", "isinstance", "spanner.SpanEndpointSpanBert.make_linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "len", "spanner.SpanEndpointSpanBert.make_linear", "spanner.SpanEndpointSpanBert.make_linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_linear", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_linear", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_linear", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_linear"], ["", "def", "make_ffnn", "(", "self", ",", "feat_size", ",", "hidden_size", ",", "output_size", ")", ":", "\n", "        ", "if", "hidden_size", "is", "None", "or", "hidden_size", "==", "0", "or", "hidden_size", "==", "[", "]", "or", "hidden_size", "==", "[", "0", "]", ":", "\n", "            ", "return", "self", ".", "make_linear", "(", "feat_size", ",", "output_size", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "hidden_size", ",", "Iterable", ")", ":", "\n", "            ", "hidden_size", "=", "[", "hidden_size", "]", "\n", "", "ffnn", "=", "[", "self", ".", "make_linear", "(", "feat_size", ",", "hidden_size", "[", "0", "]", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "self", ".", "dropout", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "hidden_size", ")", ")", ":", "\n", "            ", "ffnn", "+=", "[", "self", ".", "make_linear", "(", "hidden_size", "[", "i", "-", "1", "]", ",", "hidden_size", "[", "i", "]", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "self", ".", "dropout", "]", "\n", "", "ffnn", ".", "append", "(", "self", ".", "make_linear", "(", "hidden_size", "[", "-", "1", "]", ",", "output_size", ")", ")", "\n", "return", "nn", ".", "Sequential", "(", "*", "ffnn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.ner.spanner.SpanEndpointSpanBert.__init__": [[187, 225], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.normal_", "torch.normal_", "torch.normal_", "torch.normal_", "spanner.SpanEndpointSpanBert.make_ffnn", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "spanner.SpanEndpointSpanBert.make_ffnn"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_ffnn", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_ffnn"], ["", "def", "__init__", "(", "self", ",", "dim_input", ",", "max_span_length", ",", "config", ")", ":", "\n", "        ", "super", "(", "SpanEndpointSpanBert", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "span_embed", "=", "'span_embed'", "in", "config", "\n", "self", ".", "dim_output", "=", "2", "*", "dim_input", "\n", "self", ".", "dim_input", "=", "dim_input", "\n", "self", ".", "span_average", "=", "config", "[", "'average'", "]", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "config", "[", "'dropout'", "]", ")", "\n", "\n", "if", "self", ".", "span_embed", ":", "\n", "            ", "self", ".", "embed", "=", "nn", ".", "Embedding", "(", "max_span_length", ",", "config", "[", "'span_embed'", "]", ")", "\n", "# adapted from hoi, initialization with std 0.02", "\n", "init", ".", "normal_", "(", "self", ".", "embed", ".", "weight", ",", "std", "=", "0.02", ")", "\n", "self", ".", "dim_output", "+=", "config", "[", "'span_embed'", "]", "\n", "\n", "", "if", "self", ".", "span_average", ":", "\n", "            ", "self", ".", "dim_output", "+=", "dim_input", "\n", "\n", "", "if", "'ff_dim'", "in", "config", ":", "\n", "# TODO: check when using this, not the same as the original nn.Sequential (commented) below", "\n", "#  missing relu and dropout; add it when using this config!!", "\n", "            ", "self", ".", "ff", "=", "self", ".", "make_ffnn", "(", "self", ".", "dim_output", ",", "0", ",", "output_size", "=", "config", "[", "'ff_dim'", "]", ")", "\n", "\n", "# self.ff = nn.Sequential(", "\n", "#     nn.Linear(self.dim_output, config['ff_dim']),", "\n", "#     nn.ReLU(),", "\n", "#     nn.Dropout(config['ff_dropout'])", "\n", "# )", "\n", "self", ".", "dim_output", "=", "config", "[", "'ff_dim'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "ff", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "", "if", "'attention_heads'", "in", "config", "and", "config", "[", "'attention_heads'", "]", ":", "\n", "            ", "self", ".", "attention_heads", "=", "True", "\n", "# self.mention_token_attn = self.make_ffnn(self.bert_emb_size, 0, output_size=1) if config[", "\n", "self", ".", "mention_token_attn", "=", "self", ".", "make_ffnn", "(", "self", ".", "dim_input", ",", "0", ",", "output_size", "=", "1", ")", "\n", "self", ".", "dim_output", "+=", "dim_input", "\n", "", "else", ":", "\n", "            ", "self", ".", "attention_heads", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.ner.spanner.SpanEndpointSpanBert.forward": [[226, 279], ["modules.misc.misc.batched_index_select", "modules.misc.misc.batched_index_select", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "spanner.SpanEndpointSpanBert.embed", "spanner.SpanEndpointSpanBert.dropout", "vecs.append", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul.unsqueeze_", "torch.matmul.unsqueeze_", "torch.matmul.unsqueeze_", "torch.matmul.unsqueeze_", "vecs.append", "vecs.append", "spanner.SpanEndpointSpanBert.ff", "spanner.SpanEndpointSpanBert.mention_token_attn", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "spanner.span_average", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "candidate_tokens_mask.float", "inputs.size", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.batched_index_select", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.batched_index_select", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.dropout", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.ner.spanner.span_average"], ["", "", "def", "forward", "(", "self", ",", "inputs", ",", "b", ",", "e", ",", "max_width", ",", "span_mask", "=", "None", ")", ":", "\n", "# inputs.shape --> [1, 96, 768]; b.shape --> [1, 315]; e.shape --> [1, 315]; max_width --> 15", "\n", "        ", "b_vec", "=", "batched_index_select", "(", "inputs", ",", "b", ")", "\n", "# b_vec.shape --> [1, 315, 768]", "\n", "\n", "# e_vec = batched_index_select(inputs, torch.clamp(e, max=inputs.size(1) - 1))", "\n", "e_vec", "=", "batched_index_select", "(", "inputs", ",", "torch", ".", "clamp", "(", "e", ",", "max", "=", "inputs", ".", "size", "(", "1", ")", "-", "1", ")", ")", "\n", "# e_vec.shape --> [1, 315, 768]", "\n", "\n", "vecs", "=", "[", "b_vec", ",", "e_vec", "]", "\n", "\n", "if", "self", ".", "span_embed", ":", "\n", "            ", "candidate_width_idx", "=", "e", "-", "b", "\n", "candidate_width_emb", "=", "self", ".", "embed", "(", "e", "-", "b", ")", "\n", "candidate_width_emb", "=", "self", ".", "dropout", "(", "candidate_width_emb", ")", "\n", "vecs", ".", "append", "(", "candidate_width_emb", ")", "\n", "\n", "", "if", "self", ".", "attention_heads", ":", "\n", "# num_candidates", "\n", "# span_mask = span_mask > 0.9", "\n", "# TODO: only will work for batch size of 1!", "\n", "            ", "curr_batch", "=", "0", "\n", "# candidate_starts, candidate_ends = b[curr_batch][span_mask[curr_batch]], e[curr_batch][", "\n", "#     span_mask[curr_batch]]", "\n", "num_candidates", "=", "b", "[", "curr_batch", "]", ".", "shape", "[", "0", "]", "\n", "\n", "token_attn", "=", "torch", ".", "squeeze", "(", "self", ".", "mention_token_attn", "(", "inputs", "[", "curr_batch", "]", ")", ",", "1", ")", "\n", "\n", "num_subtokens", "=", "inputs", "[", "curr_batch", "]", ".", "shape", "[", "0", "]", "# num_words", "\n", "candidate_tokens", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "arange", "(", "0", ",", "num_subtokens", ",", "\n", "device", "=", "settings", ".", "device", ")", ",", "0", ")", ".", "repeat", "(", "num_candidates", ",", "1", ")", "\n", "# candidate_tokens_mask = (candidate_tokens >= torch.unsqueeze(candidate_starts, 1)) & \\", "\n", "#                         (candidate_tokens <= torch.unsqueeze(candidate_ends, 1))", "\n", "candidate_tokens_mask", "=", "(", "candidate_tokens", ">=", "torch", ".", "unsqueeze", "(", "b", "[", "curr_batch", "]", ",", "1", ")", ")", "&", "(", "candidate_tokens", "<=", "torch", ".", "unsqueeze", "(", "e", "[", "curr_batch", "]", ",", "1", ")", ")", "\n", "\n", "candidate_tokens_attn_raw", "=", "torch", ".", "log", "(", "candidate_tokens_mask", ".", "float", "(", ")", ")", "+", "torch", ".", "unsqueeze", "(", "token_attn", ",", "0", ")", "\n", "\n", "candidate_tokens_attn", "=", "nn", ".", "functional", ".", "softmax", "(", "candidate_tokens_attn_raw", ",", "dim", "=", "1", ")", "\n", "\n", "head_attn_emb", "=", "torch", ".", "matmul", "(", "candidate_tokens_attn", ",", "inputs", "[", "curr_batch", "]", ")", "\n", "head_attn_emb", ".", "unsqueeze_", "(", "0", ")", "\n", "# att_vec = torch.zeros_like(b_vec, device=settings.device)", "\n", "# att_vec[span_mask] = head_attn_emb", "\n", "# vecs.append(att_vec)", "\n", "vecs", ".", "append", "(", "head_attn_emb", ")", "\n", "\n", "", "if", "self", ".", "span_average", ":", "\n", "            ", "vecs", ".", "append", "(", "span_average", "(", "inputs", ",", "b", ",", "e", ",", "max_width", ")", ")", "\n", "\n", "", "vec", "=", "torch", ".", "cat", "(", "vecs", ",", "-", "1", ")", "\n", "return", "self", ".", "ff", "(", "vec", ")", ",", "candidate_width_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.ner.spanner.SpanAverage.__init__": [[295, 303], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_input", ",", "max_span_length", ",", "config", ")", ":", "\n", "        ", "super", "(", "SpanAverage", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "span_embed", "=", "'span_embed'", "in", "config", "\n", "self", ".", "dim_output", "=", "dim_input", "\n", "\n", "if", "self", ".", "span_embed", ":", "\n", "            ", "self", ".", "embed", "=", "nn", ".", "Embedding", "(", "max_span_length", ",", "config", "[", "'span_embed'", "]", ")", "\n", "self", ".", "dim_output", "+=", "config", "[", "'span_embed'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.ner.spanner.SpanAverage.forward": [[304, 312], ["spanner.span_average", "spanner.SpanAverage.embed", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.ner.spanner.span_average"], ["", "", "def", "forward", "(", "self", ",", "inputs", ",", "b", ",", "e", ",", "max_width", ")", ":", "\n", "        ", "output", "=", "span_average", "(", "inputs", ",", "b", ",", "e", ",", "max_width", ")", "\n", "\n", "if", "self", ".", "span_embed", ":", "\n", "            ", "emb", "=", "self", ".", "embed", "(", "e", "-", "b", ")", "\n", "return", "torch", ".", "cat", "(", "(", "output", ",", "emb", ")", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.ner.spanner.SpanSelfAttention.__init__": [[316, 321], ["torch.Module.__init__", "modules.spirit.FeedForward", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_input", ",", "config", ")", ":", "\n", "        ", "super", "(", "SpanSelfAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ff", "=", "FeedForward", "(", "dim_input", ",", "config", "[", "'attention'", "]", ")", "\n", "self", ".", "out", "=", "nn", ".", "Linear", "(", "self", ".", "ff", ".", "dim_output", ",", "1", ")", "\n", "self", ".", "dim_output", "=", "dim_input", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.ner.spanner.SpanSelfAttention.forward": [[322, 340], ["torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "modules.misc.misc.batched_index_select", "spanner.SpanSelfAttention.out().squeeze", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "b.unsqueeze", "torch.arange().to.unsqueeze().unsqueeze", "torch.arange().to.unsqueeze().unsqueeze", "torch.arange().to.unsqueeze().unsqueeze", "torch.arange().to.unsqueeze().unsqueeze", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "e.unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "spanner.SpanSelfAttention.out", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "spanner.SpanSelfAttention.ff", "mask.float", "torch.softmax.unsqueeze", "inputs.size"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.batched_index_select"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "b", ",", "e", ",", "max_width", ")", ":", "\n", "        ", "w", "=", "torch", ".", "arange", "(", "max_width", ")", ".", "to", "(", "b", ".", "device", ")", "\n", "indices", "=", "b", ".", "unsqueeze", "(", "-", "1", ")", "+", "w", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "vectors", "=", "batched_index_select", "(", "inputs", ",", "torch", ".", "clamp", "(", "indices", ",", "max", "=", "inputs", ".", "size", "(", "1", ")", "-", "1", ")", ")", "\n", "\n", "# print('vectors:', vectors.size())", "\n", "\n", "mask", "=", "indices", "<=", "e", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "scores", "=", "self", ".", "out", "(", "self", ".", "ff", "(", "vectors", ")", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "scores", "=", "scores", "-", "(", "1.0", "-", "mask", ".", "float", "(", ")", ")", "*", "1e38", "\n", "probs", "=", "F", ".", "softmax", "(", "scores", ",", "-", "1", ")", "\n", "# print('probs:', probs.size())", "\n", "# print(probs)", "\n", "\n", "output", "=", "torch", ".", "matmul", "(", "probs", ".", "unsqueeze", "(", "-", "2", ")", ",", "vectors", ")", ".", "squeeze", "(", "-", "2", ")", "\n", "# print('output:', output.size())", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.ner.spanner.TaskSpan1.__init__": [[344, 368], ["torch.Module.__init__", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "dictionary.tolist", "modules.spirit.FeedForward", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "spanner.SpanEndpoint", "spanner.SpanSelfAttention", "BaseException"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "dim_input", ",", "dictionary", ",", "config", ")", ":", "\n", "        ", "super", "(", "TaskSpan1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "enabled", "=", "config", "[", "'enabled'", "]", "\n", "self", ".", "max_span_length", "=", "config", "[", "'max_span_length'", "]", "\n", "self", ".", "weight", "=", "config", "[", "'weight'", "]", "\n", "self", ".", "loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", "reduction", "=", "'none'", ")", "\n", "self", ".", "labels", "=", "dictionary", ".", "tolist", "(", ")", "\n", "\n", "span_type", "=", "config", "[", "'span-extractor'", "]", "[", "'type'", "]", "\n", "if", "span_type", "==", "'endpoint'", ":", "\n", "            ", "self", ".", "span_extractor", "=", "SpanEndpoint", "(", "dim_input", ",", "self", ".", "max_span_length", ",", "config", "[", "'span-extractor'", "]", ")", "\n", "", "elif", "span_type", "==", "'self-attention'", ":", "\n", "            ", "self", ".", "span_extractor", "=", "SpanSelfAttention", "(", "dim_input", ",", "config", "[", "'span-extractor'", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "BaseException", "(", "\"no such span extractor:\"", ",", "span_type", ")", "\n", "", "dim_span", "=", "self", ".", "span_extractor", ".", "dim_output", "\n", "\n", "self", ".", "net", "=", "FeedForward", "(", "dim_span", ",", "config", "[", "'network'", "]", ")", "\n", "self", ".", "out", "=", "nn", ".", "Linear", "(", "self", ".", "net", ".", "dim_output", ",", "dictionary", ".", "size", ")", "\n", "\n", "self", ".", "total_obj", "=", "0", "\n", "self", ".", "total_pred_spans", "=", "0", "\n", "self", ".", "total_gold_spans", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.ner.spanner.TaskSpan1.forward": [[369, 392], ["inputs.contiguous.contiguous.contiguous", "spanner.create_all_spans", "b.cuda.cuda.cuda", "e.cuda.cuda.cuda", "spanner.TaskSpan1.span_extractor", "spanner.TaskSpan1.out", "spanner.create_span_targets", "spanner.decode_span_predictions", "inputs.contiguous.contiguous.size", "inputs.contiguous.contiguous.size", "spanner.TaskSpan1.net", "spanner.TaskSpan1.loss", "obj.sum", "create_span_targets.to", "sequence_lengths.unsqueeze().unsqueeze", "sequence_lengths.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.create_all_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.ner.spanner.create_span_targets", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.ner.spanner.decode_span_predictions"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ",", "sequence_lengths", ",", "mask", ",", "gold_spans", ",", "metadata", ",", "predict", "=", "False", ")", ":", "\n", "        ", "output", "=", "{", "}", "\n", "\n", "inputs", "=", "inputs", ".", "contiguous", "(", ")", "\n", "\n", "b", ",", "e", "=", "create_all_spans", "(", "inputs", ".", "size", "(", "0", ")", ",", "inputs", ".", "size", "(", "1", ")", ",", "self", ".", "max_span_length", ")", "\n", "b", "=", "b", ".", "cuda", "(", ")", "\n", "e", "=", "e", ".", "cuda", "(", ")", "\n", "\n", "vec", "=", "self", ".", "span_extractor", "(", "inputs", ",", "b", ",", "e", ",", "self", ".", "max_span_length", ")", "\n", "logits", "=", "self", ".", "out", "(", "self", ".", "net", "(", "vec", ")", ")", "\n", "\n", "mask", "=", "(", "e", "<", "sequence_lengths", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "span_targets", "=", "create_span_targets", "(", "logits", ",", "metadata", "[", "'gold_tags_indices'", "]", ")", "\n", "\n", "obj", "=", "self", ".", "loss", "(", "logits", ",", "span_targets", ".", "to", "(", "logits", ".", "device", ")", ")", "*", "mask", "\n", "output", "[", "'loss'", "]", "=", "obj", ".", "sum", "(", ")", "*", "self", ".", "weight", "\n", "\n", "output", "[", "'pred'", "]", "=", "decode_span_predictions", "(", "logits", "*", "mask", ",", "self", ".", "labels", ")", "\n", "output", "[", "'gold'", "]", "=", "[", "[", "(", "b", ",", "e", "+", "1", ",", "self", ".", "labels", "[", "l", "]", ")", "for", "b", ",", "e", ",", "l", "in", "spans", "]", "for", "spans", "in", "metadata", "[", "'gold_tags_indices'", "]", "]", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.ner.spanner.TaskSpan1.create_metrics": [[393, 395], ["metrics.f1.MetricSpanNER", "metrics.misc.MetricObjective"], "methods", ["None"], ["", "def", "create_metrics", "(", "self", ")", ":", "\n", "        ", "return", "[", "MetricSpanNER", "(", "self", ".", "name", ",", "labels", "=", "self", ".", "labels", ")", ",", "MetricObjective", "(", "self", ".", "name", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.ner.spanner.TaskSpan1.tick": [[396, 401], ["None"], "methods", ["None"], ["", "def", "tick", "(", "self", ",", "dataset_name", ")", ":", "\n", "# print(\"{}-span-generator: {} / {} = {}\".format(dataset_name, self.total_pred_spans, self.total_gold_spans, self.total_pred_spans/(self.total_gold_spans+1e-8)))", "\n", "# self.total_pred_spans = 0", "\n", "# self.total_gold_spans = 0", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.ner.spanner.TaskSpan1x.__init__": [[411, 431], ["torch.Module.__init__", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "dictionary.tolist", "print", "modules.spirit.FeedForward", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "len"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "dim_span", ",", "dictionary", ",", "config", ")", ":", "\n", "        ", "super", "(", "TaskSpan1x", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "enabled", "=", "config", "[", "'enabled'", "]", "\n", "self", ".", "name", "=", "name", "\n", "if", "self", ".", "enabled", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", "reduction", "=", "'none'", ")", "\n", "self", ".", "labels", "=", "dictionary", ".", "tolist", "(", ")", "\n", "self", ".", "weight", "=", "config", "[", "'weight'", "]", "\n", "self", ".", "add_pruner_scores", "=", "config", "[", "'add_pruner_scores'", "]", "\n", "self", ".", "add_pruner_loss", "=", "config", "[", "'add_pruner_loss'", "]", "\n", "self", ".", "mask_target", "=", "config", "[", "'mask_target'", "]", "\n", "\n", "if", "config", "[", "'divide_by_number_of_labels'", "]", ":", "\n", "                ", "self", ".", "weight", "/=", "len", "(", "self", ".", "labels", ")", "\n", "\n", "", "print", "(", "\"TaskSpan1x: weight=\"", ",", "self", ".", "weight", ",", "\"add_pruner_scores=\"", ",", "self", ".", "add_pruner_scores", ",", "\"mask_target=\"", ",", "\n", "self", ".", "mask_target", ")", "\n", "\n", "self", ".", "net", "=", "FeedForward", "(", "dim_span", ",", "config", "[", "'network'", "]", ")", "\n", "self", ".", "out", "=", "nn", ".", "Linear", "(", "self", ".", "net", ".", "dim_output", ",", "dictionary", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.ner.spanner.TaskSpan1x.forward": [[432, 477], ["spanner.TaskSpan1x.out", "spanner.decode_span_predictions", "spans_all[].size", "spanner.TaskSpan1x.net", "create_span_targets().to", "spanner.TaskSpan1x.loss", "obj.sum", "range", "range", "spanner.create_span_targets", "spanner.TaskSpan1x.loss", "create_span_targets().to.sum", "sequence_lengths.unsqueeze().unsqueeze", "create_span_targets().to.sum", "sequence_lengths.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.ner.spanner.decode_span_predictions", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.ner.spanner.create_span_targets"], ["", "", "def", "forward", "(", "self", ",", "spans_all", ",", "sequence_lengths", ",", "gold_tags_indices", ",", "api_call", "=", "False", ")", ":", "\n", "        ", "output", "=", "{", "}", "\n", "\n", "if", "self", ".", "enabled", ":", "\n", "            ", "span_vecs", "=", "spans_all", "[", "'span_vecs'", "]", "\n", "span_end", "=", "spans_all", "[", "'span_end'", "]", "\n", "\n", "logits", "=", "self", ".", "out", "(", "self", ".", "net", "(", "span_vecs", ")", ")", "\n", "\n", "if", "self", ".", "add_pruner_scores", ":", "\n", "                ", "logits", "=", "logits", "+", "spans_all", "[", "'span_scores'", "]", "\n", "\n", "# inspect('ner-logits', logits)", "\n", "", "span_targets", "=", "None", "\n", "if", "not", "api_call", ":", "\n", "                ", "span_targets", "=", "create_span_targets", "(", "logits", ",", "gold_tags_indices", ")", ".", "to", "(", "logits", ".", "device", ")", "\n", "\n", "", "if", "self", ".", "mask_target", "and", "not", "api_call", ":", "\n", "                ", "mask", "=", "(", "span_targets", ".", "sum", "(", "-", "1", ")", ">", "0", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "mask", "=", "(", "span_end", "<", "sequence_lengths", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "", "if", "not", "api_call", ":", "\n", "                ", "obj", "=", "self", ".", "loss", "(", "logits", ",", "span_targets", ")", "*", "mask", "\n", "\n", "if", "self", ".", "add_pruner_loss", ":", "\n", "                    ", "pruner_target", "=", "(", "span_targets", ".", "sum", "(", "-", "1", ")", ">", "0", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "obj_pruner", "=", "self", ".", "loss", "(", "spans_all", "[", "'span_scores'", "]", ",", "pruner_target", ")", "*", "mask", "\n", "obj", "=", "obj", "+", "obj_pruner", "\n", "\n", "# inspect('ner-loss', obj)", "\n", "\n", "", "output", "[", "'loss'", "]", "=", "obj", ".", "sum", "(", ")", "*", "self", ".", "weight", "\n", "output", "[", "'gold'", "]", "=", "[", "[", "(", "b", ",", "e", "+", "1", ",", "self", ".", "labels", "[", "l", "]", ")", "for", "b", ",", "e", ",", "l", "in", "spans", "]", "for", "spans", "in", "gold_tags_indices", "]", "\n", "", "else", ":", "\n", "                ", "output", "[", "'loss'", "]", "=", "0", "\n", "\n", "", "output", "[", "'pred'", "]", "=", "decode_span_predictions", "(", "logits", "*", "mask", ",", "self", ".", "labels", ")", "\n", "", "else", ":", "\n", "            ", "output", "[", "'loss'", "]", "=", "0", "# torch.tensor(0.0).cuda() (trainer skips minibatch if zero)", "\n", "num_batch", "=", "spans_all", "[", "'span_vecs'", "]", ".", "size", "(", "0", ")", "\n", "output", "[", "'pred'", "]", "=", "[", "[", "]", "for", "x", "in", "range", "(", "num_batch", ")", "]", "\n", "output", "[", "'gold'", "]", "=", "[", "[", "]", "for", "x", "in", "range", "(", "num_batch", ")", "]", "\n", "\n", "", "return", "output", "[", "'loss'", "]", ",", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.ner.spanner.TaskSpan1x.create_metrics": [[478, 480], ["metrics.f1.MetricSpanNER", "metrics.misc.MetricObjective"], "methods", ["None"], ["", "def", "create_metrics", "(", "self", ")", ":", "\n", "        ", "return", "[", "MetricSpanNER", "(", "self", ".", "name", ",", "labels", "=", "self", ".", "labels", ")", ",", "MetricObjective", "(", "self", ".", "name", ")", "]", "if", "self", ".", "enabled", "else", "[", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.ner.spanner.create_all_spans": [[16, 32], ["torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "b.unsqueeze().expand.unsqueeze().expand_as", "b.unsqueeze().expand.unsqueeze().expand", "e.unsqueeze().expand.unsqueeze().expand", "b.unsqueeze().expand.unsqueeze", "torch.arange.unsqueeze", "b.unsqueeze().expand.unsqueeze", "b.unsqueeze().expand.unsqueeze", "b.unsqueeze().expand.size", "e.unsqueeze().expand.unsqueeze", "e.unsqueeze().expand.size"], "function", ["None"], ["def", "create_all_spans", "(", "batch_size", ",", "length", ",", "width", ")", ":", "\n", "    ", "\"\"\"\n\n    :param batch_size: example: {int} 1\n    :param length: example: {int} 69\n    :param width: example: {int} 5\n    :return:\n    \"\"\"", "\n", "b", "=", "torch", ".", "arange", "(", "length", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "w", "=", "torch", ".", "arange", "(", "width", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "e", "=", "b", ".", "unsqueeze", "(", "-", "1", ")", "+", "w", ".", "unsqueeze", "(", "0", ")", "\n", "b", "=", "b", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand_as", "(", "e", ")", "\n", "\n", "b", "=", "b", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "(", "batch_size", ",", ")", "+", "b", ".", "size", "(", ")", ")", "\n", "e", "=", "e", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "(", "batch_size", ",", ")", "+", "e", ".", "size", "(", ")", ")", "\n", "return", "b", ",", "e", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.ner.spanner.create_span_targets": [[34, 42], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros.size", "enumerate", "ref.size"], "function", ["None"], ["", "def", "create_span_targets", "(", "ref", ",", "instances", ")", ":", "\n", "    ", "targets", "=", "torch", ".", "zeros", "(", "ref", ".", "size", "(", ")", ")", "\n", "max_span_length", "=", "targets", ".", "size", "(", "2", ")", "\n", "for", "i", ",", "spans", "in", "enumerate", "(", "instances", ")", ":", "\n", "        ", "for", "begin", ",", "end", ",", "label", "in", "spans", ":", "\n", "            ", "if", "end", "-", "begin", "<", "max_span_length", ":", "\n", "                ", "targets", "[", "i", ",", "begin", ",", "end", "-", "begin", ",", "label", "]", "=", "1.0", "\n", "", "", "", "return", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.ner.spanner.decode_span_predictions": [[44, 51], ["torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "list", "torch.nonzero.size", "torch.nonzero.tolist", "range", "logits.size", "logits.size", "preds[].append", "logits.size"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist"], ["", "def", "decode_span_predictions", "(", "logits", ",", "labels", ")", ":", "\n", "    ", "predictions", "=", "torch", ".", "nonzero", "(", "logits", ">", "0", ")", "\n", "preds", "=", "[", "list", "(", ")", "for", "_", "in", "range", "(", "logits", ".", "size", "(", "0", ")", ")", "]", "\n", "if", "predictions", ".", "size", "(", "0", ")", "<", "logits", ".", "size", "(", "0", ")", "*", "logits", ".", "size", "(", "1", ")", ":", "\n", "        ", "for", "batch", ",", "begin", ",", "width", ",", "l", "in", "predictions", ".", "tolist", "(", ")", ":", "\n", "            ", "preds", "[", "batch", "]", ".", "append", "(", "(", "begin", ",", "begin", "+", "width", "+", "1", ",", "labels", "[", "l", "]", ")", ")", "\n", "", "", "return", "preds", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.ner.spanner.create_span_extractor": [[53, 64], ["spanner.SpanEndpoint", "spanner.SpanEndpointSpanBert", "spanner.SpanAverage", "BaseException"], "function", ["None"], ["", "def", "create_span_extractor", "(", "dim_input", ",", "max_span_length", ",", "config", ")", ":", "\n", "    ", "se_type", "=", "config", "[", "'type'", "]", "\n", "\n", "if", "se_type", "==", "'endpoint'", ":", "\n", "        ", "return", "SpanEndpoint", "(", "dim_input", ",", "max_span_length", ",", "config", ")", "\n", "", "elif", "se_type", "==", "'endpoint_spanbert'", ":", "\n", "        ", "return", "SpanEndpointSpanBert", "(", "dim_input", ",", "max_span_length", ",", "config", ")", "\n", "", "elif", "se_type", "==", "'average'", ":", "\n", "        ", "return", "SpanAverage", "(", "dim_input", ",", "max_span_length", ",", "config", ")", "\n", "", "else", ":", "\n", "        ", "raise", "BaseException", "(", "\"no such span extractor:\"", ",", "se_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.ner.spanner.span_average": [[281, 291], ["torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "modules.misc.misc.batched_index_select", "mask.sum", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "b.unsqueeze", "torch.arange().to.unsqueeze().unsqueeze", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "mask.sum.unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.arange().to.unsqueeze", "e.unsqueeze", "probs.unsqueeze", "inputs.size"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.batched_index_select"], ["", "", "def", "span_average", "(", "inputs", ",", "b", ",", "e", ",", "max_width", ")", ":", "\n", "    ", "w", "=", "torch", ".", "arange", "(", "max_width", ")", ".", "to", "(", "b", ".", "device", ")", "\n", "indices", "=", "b", ".", "unsqueeze", "(", "-", "1", ")", "+", "w", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "vectors", "=", "batched_index_select", "(", "inputs", ",", "torch", ".", "clamp", "(", "indices", ",", "max", "=", "inputs", ".", "size", "(", "1", ")", "-", "1", ")", ")", "\n", "\n", "mask", "=", "(", "indices", "<=", "e", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "float", "(", ")", "\n", "lengths", "=", "mask", ".", "sum", "(", "-", "1", ")", "\n", "probs", "=", "mask", "/", "lengths", ".", "unsqueeze", "(", "-", "1", ")", "\n", "output", "=", "torch", ".", "matmul", "(", "probs", ".", "unsqueeze", "(", "-", "2", ")", ",", "vectors", ")", ".", "squeeze", "(", "-", "2", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.LayerNorm.__init__": [[10, 15], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["self", ".", "variance_epsilon", "=", "eps", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "u", "=", "x", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "s", "=", "(", "x", "-", "u", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "x", "=", "(", "x", "-", "u", ")", "/", "torch", ".", "sqrt", "(", "s", "+", "self", ".", "variance_epsilon", ")", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.LayerNorm.forward": [[16, 21], ["x.mean", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "methods", ["None"], ["return", "self", ".", "weight", "*", "x", "+", "self", ".", "bias", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.FeedForward.__init__": [[38, 51], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "misc.FeedForward.create_default", "misc.FeedForward.create_ffnn", "BaseException"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.FeedForward.create_default", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.FeedForward.create_ffnn"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.FeedForward.create_default": [[52, 58], ["misc.FeedForward.layers.append", "misc.FeedForward.layers.append", "misc.LayerNorm", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["None"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.FeedForward.create_ffnn": [[59, 69], ["misc.FeedForward.layers.append", "misc.FeedForward.layers.append", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "misc.FeedForward.layers.append", "misc.FeedForward.layers.append", "misc.create_activation_function", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.nn.create_activation_function"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.FeedForward.forward": [[70, 72], ["misc.FeedForward.layers"], "methods", ["None"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.Seq2Seq.__init__": [[76, 80], ["torch.Module.__init__", "misc.seq2seq_create"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.seq2seq_create"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.Seq2Seq.forward": [[81, 83], ["misc.Seq2Seq.module"], "methods", ["None"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.ConfigurationError.__init__": [[91, 94], ["Exception.__init__"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.ConfigurationError.__str__": [[95, 97], ["repr"], "methods", ["None"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.SpanPairs.__init__": [[366, 388], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "BaseException"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.SpanPairs.forward": [[389, 405], ["span_vecs.size", "span_vecs.unsqueeze().expand", "span_vecs.unsqueeze().expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "tmp.append", "misc.SpanPairs.distance_function", "misc.bucket_values", "tmp.append", "span_vecs.unsqueeze", "span_vecs.unsqueeze", "misc.SpanPairs.distance_embeddings"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.bucket_values"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.SpanPairs.get_product_embedding": [[406, 411], ["span_vecs.size", "span_vecs.unsqueeze().expand", "span_vecs.unsqueeze().expand", "span_vecs.unsqueeze", "span_vecs.unsqueeze"], "methods", ["None"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.SpanPairs.get_distance_embedding": [[412, 416], ["misc.SpanPairs.distance_function", "misc.bucket_values", "misc.SpanPairs.distance_embeddings"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.bucket_values"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.LayerNone.__init__": [[429, 432], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.LayerNone.forward": [[433, 435], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.Seq2seq.__init__": [[439, 456], ["torch.Module.__init__", "print", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.LSTM", "torch.LSTM", "torch.LSTM", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.Seq2seq.forward": [[457, 463], ["misc.Seq2seq.idp", "torch.pack_padded_sequence", "torch.pack_padded_sequence", "torch.pack_padded_sequence", "misc.Seq2seq.rnn", "torch.pad_packed_sequence", "torch.pad_packed_sequence", "torch.pad_packed_sequence", "seqlens.cpu"], "methods", ["None"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.CNNMaxpool.__init__": [[467, 472], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "max", "len", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.CNNMaxpool.forward": [[473, 483], ["inputs.view", "inp.transpose.transpose.transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.view", "torch.cat.view", "torch.cat.view", "inputs.size", "inputs.size", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.cat.append", "torch.cat.append", "torch.cat.append", "inputs.size", "inputs.size", "inputs.size", "inputs.size", "cnn"], "methods", ["None"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.OptFFpairs.__init__": [[487, 501], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.OptFFpairs.forward": [[502, 515], ["misc.OptFFpairs.span_pair_generator.get_product_embedding", "misc.OptFFpairs.span_pair_generator.get_distance_embedding", "misc.OptFFpairs.dp1", "misc.OptFFpairs.layer2", "misc.OptFFpairs.dp2", "misc.OptFFpairs.out", "misc.OptFFpairs.dist", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "misc.OptFFpairs.prod", "misc.OptFFpairs.left().unsqueeze", "misc.OptFFpairs.right().unsqueeze", "misc.OptFFpairs.left", "misc.OptFFpairs.right"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.SpanPairs.get_product_embedding", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.SpanPairs.get_distance_embedding"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.create_activation_function": [[23, 34], ["torch.ReLU", "torch.Tanh", "torch.GLU", "torch.Sigmoid", "BaseException"], "function", ["None"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.get_range_vector": [[99, 108], ["torch.arange", "torch.arange", "torch.arange", "torch.cuda.LongTensor().fill_().cumsum", "torch.cuda.LongTensor().fill_().cumsum", "torch.cuda.LongTensor().fill_().cumsum", "torch.cuda.LongTensor().fill_", "torch.cuda.LongTensor().fill_", "torch.cuda.LongTensor().fill_", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor"], "function", ["None"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.get_device_of": [[110, 118], ["tensor.get_device"], "function", ["None"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.flatten_and_batch_shift_indices": [[120, 164], ["range", "offset_indices.view.view", "misc.ConfigurationError", "misc.get_range_vector", "offsets.unsqueeze.unsqueeze", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "indices.size", "misc.get_device_of", "len", "indices.size"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.get_range_vector", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.get_device_of"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.batched_index_select": [[166, 218], ["target.view", "target.view.index_select", "flattened_target.index_select.view", "misc.flatten_and_batch_shift_indices", "target.size", "list", "target.size", "indices.size", "target.size"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.flatten_and_batch_shift_indices"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.get_mask_from_sequence_lengths": [[220, 234], ["sequence_lengths.new_ones", "sequence_lengths.new_ones.cumsum", "sequence_lengths.size", "sequence_lengths.unsqueeze"], "function", ["None"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.bucket_values": [[239, 277], ["combined_index.clamp", "distances.float().log", "math.log", "distances.float"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.create_masks": [[279, 285], ["get_mask_from_sequence_lengths().float", "torch.bmm", "torch.bmm", "torch.bmm", "torch.ones().tril().unsqueeze().to", "torch.ones().tril().unsqueeze().to", "torch.ones().tril().unsqueeze().to", "get_mask_from_sequence_lengths().float.unsqueeze", "get_mask_from_sequence_lengths().float.unsqueeze", "misc.get_mask_from_sequence_lengths", "torch.ones().tril().unsqueeze", "torch.ones().tril().unsqueeze", "torch.ones().tril().unsqueeze", "torch.ones().tril", "torch.ones().tril", "torch.ones().tril", "torch.ones", "torch.ones", "torch.ones"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.sequence.get_mask_from_sequence_lengths"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.filter_spans": [[287, 291], ["span_vecs.contiguous().view", "misc.batched_index_select", "span_vecs.size", "span_vecs.size", "span_vecs.contiguous"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.batched_index_select"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.prune_spans": [[293, 302], ["span_scores.view.view", "torch.topk", "torch.topk", "torch.topk", "span_scores.view.size", "span_lengths.max().item", "enumerate", "torch.sort", "torch.sort", "torch.sort", "span_lengths.tolist", "span_lengths.max", "span_scores.view.size"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.indices_to_spans": [[304, 310], ["list", "zip", "enumerate", "b[].tolist", "e[].tolist", "span_lengths.tolist"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.spans_to_indices": [[312, 317], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.coref_add_scores": [[319, 328], ["filtered_prune_scores.squeeze().unsqueeze", "torch.eye().unsqueeze().to", "torch.eye().unsqueeze().to", "torch.eye().unsqueeze().to", "filtered_prune_scores.squeeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye", "torch.eye", "torch.eye", "coref_scores.size"], "function", ["None"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.create_all_spans": [[330, 339], ["torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "b.unsqueeze().expand.unsqueeze().expand_as", "b.unsqueeze().expand.unsqueeze().expand", "e.unsqueeze().expand.unsqueeze().expand", "b.unsqueeze().expand.unsqueeze", "torch.arange.unsqueeze", "b.unsqueeze().expand.unsqueeze", "b.unsqueeze().expand.unsqueeze", "b.unsqueeze().expand.size", "e.unsqueeze().expand.unsqueeze", "e.unsqueeze().expand.size"], "function", ["None"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.span_intersection": [[341, 346], ["zip", "len", "set", "set"], "function", ["None"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.span_distance_tokens": [[348, 355], ["span_begin.view.view", "span_end.view.view", "torch.relu", "torch.relu", "torch.relu", "span_begin.view.size", "span_end.view.size", "torch.relu.permute", "span_begin.view.unsqueeze", "span_end.view.unsqueeze"], "function", ["None"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.span_distance_ordering": [[357, 362], ["torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "span_index.expand.expand", "torch.abs", "torch.abs", "torch.abs", "torch.abs.to", "torch.arange", "torch.arange", "torch.arange", "span_begin.size", "span_index.expand.unsqueeze", "span_index.expand.unsqueeze", "span_begin.size"], "function", ["None"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.seq2seq_create": [[418, 425], ["misc.LayerNone", "misc.Seq2seq", "BaseException"], "function", ["None"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.collate.collate_character": [[5, 21], ["max", "min", "max", "torch.LongTensor", "enumerate", "len", "len", "max", "enumerate", "len", "len", "torch.from_numpy", "torch.from_numpy", "numpy.array", "numpy.array", "len"], "function", ["None"], ["def", "collate_character", "(", "batch", ",", "maxlen", ",", "padding", ",", "min_word_len", "=", "0", ")", ":", "\n", "    ", "seqlens", "=", "[", "len", "(", "x", ")", "for", "x", "in", "batch", "]", "\n", "max_word_len", "=", "max", "(", "[", "len", "(", "w", ")", "for", "sentence", "in", "batch", "for", "w", "in", "sentence", "]", ")", "\n", "maxlen", "=", "min", "(", "maxlen", ",", "max_word_len", ")", "\n", "maxlen", "=", "max", "(", "maxlen", ",", "min_word_len", ")", "\n", "\n", "output", "=", "torch", ".", "LongTensor", "(", "len", "(", "batch", ")", ",", "max", "(", "seqlens", ")", ",", "maxlen", ")", "\n", "output", "[", ":", ",", ":", ",", ":", "]", "=", "padding", "\n", "for", "i", ",", "sentence", "in", "enumerate", "(", "batch", ")", ":", "\n", "        ", "for", "pos", ",", "token", "in", "enumerate", "(", "sentence", ")", ":", "\n", "            ", "token_len", "=", "len", "(", "token", ")", "\n", "if", "token_len", "<", "maxlen", ":", "\n", "                ", "output", "[", "i", ",", "pos", ",", ":", "len", "(", "token", ")", "]", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "token", ",", "dtype", "=", "np", ".", "long", ")", ")", "\n", "", "else", ":", "\n", "                ", "output", "[", "i", ",", "pos", ",", ":", "]", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "token", "[", "0", ":", "maxlen", "]", ",", "dtype", "=", "np", ".", "long", ")", ")", "\n", "", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.collate.decode_table": [[23, 44], ["table.tolist.tolist", "range", "range", "len", "torch.LongTensor", "torch.FloatTensor", "torch.sparse.FloatTensor", "irow.append", "icol.append", "vals.append", "torch.Size"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist"], ["", "def", "decode_table", "(", "table", ")", ":", "\n", "    ", "table", "=", "table", ".", "tolist", "(", ")", "\n", "rows", "=", "table", "[", "0", "]", "\n", "cols", "=", "table", "[", "1", "]", "\n", "\n", "irow", "=", "[", "]", "\n", "icol", "=", "[", "]", "\n", "vals", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "rows", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "table", "[", "2", "+", "i", "]", ",", "table", "[", "3", "+", "i", "]", ")", ":", "\n", "            ", "irow", ".", "append", "(", "i", ")", "\n", "icol", ".", "append", "(", "j", ")", "\n", "vals", ".", "append", "(", "1.0", ")", "\n", "\n", "", "", "if", "len", "(", "vals", ")", ">", "0", ":", "\n", "        ", "i", "=", "torch", ".", "LongTensor", "(", "[", "irow", ",", "icol", "]", ")", "\n", "v", "=", "torch", ".", "FloatTensor", "(", "vals", ")", "\n", "out", "=", "torch", ".", "sparse", ".", "FloatTensor", "(", "i", ",", "v", ",", "torch", ".", "Size", "(", "[", "rows", ",", "cols", "]", ")", ")", "\n", "return", "out", "\n", "", "else", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.collate.collate_table": [[46, 61], ["output.append", "torch.IntTensor", "table.tolist.tolist", "range", "output.append"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist"], ["", "", "def", "collate_table", "(", "batch", ")", ":", "\n", "    ", "output", "=", "[", "0", ",", "0", "]", "\n", "rows", "=", "0", "\n", "cols", "=", "0", "\n", "\n", "for", "table", "in", "batch", ":", "\n", "        ", "table", "=", "table", ".", "tolist", "(", ")", "\n", "for", "i", "in", "range", "(", "table", "[", "0", "]", ")", ":", "\n", "            ", "output", ".", "append", "(", "table", "[", "2", "+", "i", "]", "+", "cols", ")", "\n", "", "rows", "+=", "table", "[", "0", "]", "\n", "cols", "+=", "table", "[", "1", "]", "\n", "", "output", ".", "append", "(", "cols", ")", "\n", "output", "[", "0", "]", "=", "rows", "\n", "output", "[", "1", "]", "=", "cols", "\n", "return", "torch", ".", "IntTensor", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.collate.collate_sparse": [[63, 81], ["torch.LongTensor", "torch.FloatTensor", "torch.sparse.FloatTensor", "zip", "torch.Size", "irow.append", "icol.append", "vals.append"], "function", ["None"], ["", "def", "collate_sparse", "(", "batch", ")", ":", "\n", "    ", "m_offs", "=", "0", "\n", "c_offs", "=", "0", "\n", "irow", "=", "[", "]", "\n", "icol", "=", "[", "]", "\n", "vals", "=", "[", "]", "\n", "for", "mentions", ",", "candidates", ",", "rs", ",", "cs", ",", "vs", "in", "batch", ":", "\n", "        ", "for", "r", ",", "c", ",", "v", "in", "zip", "(", "rs", ",", "cs", ",", "vs", ")", ":", "\n", "            ", "irow", ".", "append", "(", "r", "+", "m_offs", ")", "\n", "icol", ".", "append", "(", "c", "+", "c_offs", ")", "\n", "vals", ".", "append", "(", "v", ")", "\n", "", "m_offs", "+=", "mentions", "\n", "c_offs", "+=", "candidates", "\n", "\n", "", "i", "=", "torch", ".", "LongTensor", "(", "[", "irow", ",", "icol", "]", ")", "\n", "v", "=", "torch", ".", "FloatTensor", "(", "vals", ")", "\n", "out", "=", "torch", ".", "sparse", ".", "FloatTensor", "(", "i", ",", "v", ",", "torch", ".", "Size", "(", "[", "m_offs", ",", "c_offs", "]", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.collate.collate_mentions_sparse": [[83, 106], ["len", "zip", "torch.LongTensor", "torch.FloatTensor", "torch.sparse.FloatTensor", "irow.append", "icol.append", "vals.append", "torch.Size"], "function", ["None"], ["", "def", "collate_mentions_sparse", "(", "batch", ",", "maxlen", ")", ":", "\n", "    ", "rows", "=", "len", "(", "batch", ")", "\n", "\n", "m_offs", "=", "0", "\n", "c_offs", "=", "0", "\n", "irow", "=", "[", "]", "\n", "icol", "=", "[", "]", "\n", "vals", "=", "[", "]", "\n", "for", "mentions", ",", "_", ",", "rs", ",", "cs", ",", "vs", "in", "batch", ":", "\n", "        ", "for", "r", ",", "c", ",", "v", "in", "zip", "(", "rs", ",", "cs", ",", "vs", ")", ":", "\n", "            ", "irow", ".", "append", "(", "r", "+", "m_offs", ")", "\n", "icol", ".", "append", "(", "c", "+", "c_offs", ")", "\n", "vals", ".", "append", "(", "v", ")", "\n", "", "m_offs", "+=", "mentions", "\n", "c_offs", "+=", "maxlen", "\n", "\n", "", "if", "m_offs", ">", "0", ":", "\n", "        ", "i", "=", "torch", ".", "LongTensor", "(", "[", "irow", ",", "icol", "]", ")", "\n", "v", "=", "torch", ".", "FloatTensor", "(", "vals", ")", "\n", "out", "=", "torch", ".", "sparse", ".", "FloatTensor", "(", "i", ",", "v", ",", "torch", ".", "Size", "(", "[", "m_offs", ",", "rows", "*", "maxlen", "]", ")", ")", "\n", "return", "out", "\n", "", "else", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.collate.collate_sparse2": [[108, 129], ["zip", "torch.LongTensor", "torch.FloatTensor", "torch.sparse.FloatTensor", "irow.append", "icol.append", "vals.append", "torch.Size"], "function", ["None"], ["", "", "def", "collate_sparse2", "(", "batch", ",", "num_rows", ",", "num_cols", ")", ":", "\n", "    ", "m_offs", "=", "0", "\n", "c_offs", "=", "0", "\n", "irow", "=", "[", "]", "\n", "icol", "=", "[", "]", "\n", "vals", "=", "[", "]", "\n", "for", "mentions", ",", "_", ",", "rs", ",", "cs", ",", "vs", "in", "batch", ":", "\n", "        ", "for", "r", ",", "c", ",", "v", "in", "zip", "(", "rs", ",", "cs", ",", "vs", ")", ":", "\n", "            ", "irow", ".", "append", "(", "r", "+", "m_offs", ")", "\n", "icol", ".", "append", "(", "c", "+", "c_offs", ")", "\n", "vals", ".", "append", "(", "v", ")", "\n", "", "m_offs", "+=", "num_rows", "\n", "c_offs", "+=", "num_cols", "\n", "\n", "", "if", "m_offs", ">", "0", ":", "\n", "        ", "i", "=", "torch", ".", "LongTensor", "(", "[", "irow", ",", "icol", "]", ")", "\n", "v", "=", "torch", ".", "FloatTensor", "(", "vals", ")", "\n", "out", "=", "torch", ".", "sparse", ".", "FloatTensor", "(", "i", ",", "v", ",", "torch", ".", "Size", "(", "[", "m_offs", ",", "c_offs", "]", ")", ")", "\n", "return", "out", "\n", "", "else", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.collate.collate_sparse_to_dense_3": [[131, 139], ["max", "max", "torch.zeros", "enumerate", "len", "zip"], "function", ["None"], ["", "", "def", "collate_sparse_to_dense_3", "(", "batch", ")", ":", "\n", "    ", "max_row", "=", "max", "(", "[", "x", "[", "0", "]", "for", "x", "in", "batch", "]", ")", "\n", "max_col", "=", "max", "(", "[", "x", "[", "1", "]", "for", "x", "in", "batch", "]", ")", "\n", "output", "=", "torch", ".", "zeros", "(", "len", "(", "batch", ")", ",", "max_row", ",", "max_col", ")", "\n", "for", "b", ",", "(", "rows", ",", "cols", ",", "r", ",", "c", ",", "v", ")", "in", "enumerate", "(", "batch", ")", ":", "\n", "        ", "for", "x", ",", "y", ",", "v", "in", "zip", "(", "r", ",", "c", ",", "v", ")", ":", "\n", "            ", "output", "[", "b", ",", "x", ",", "y", "]", "=", "v", "\n", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.collate.collate_sparse_to_dense_4": [[141, 145], ["enumerate"], "function", ["None"], ["", "def", "collate_sparse_to_dense_4", "(", "relations", ",", "batch", ")", ":", "\n", "    ", "for", "b", ",", "(", "shape", ",", "I", ",", "V", ")", "in", "enumerate", "(", "batch", ")", ":", "\n", "        ", "for", "s", ",", "o", ",", "p", "in", "I", ":", "\n", "            ", "relations", "[", "b", ",", "s", ",", "o", ",", "p", "]", "=", "1.0", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.collate.collate_spans": [[147, 157], ["max", "len", "list", "output.append", "torch.LongTensor", "len", "list.extend", "range", "len"], "function", ["None"], ["", "", "", "def", "collate_spans", "(", "batch", ")", ":", "\n", "    ", "span_lengths", "=", "[", "len", "(", "x", ")", "for", "x", "in", "batch", "]", "\n", "maxlen", "=", "max", "(", "span_lengths", ")", "\n", "output", "=", "[", "]", "\n", "for", "x", "in", "batch", ":", "\n", "        ", "x", "=", "list", "(", "x", ")", "# make a copy because we modify it", "\n", "if", "len", "(", "x", ")", "<", "maxlen", ":", "\n", "            ", "x", ".", "extend", "(", "[", "[", "0", ",", "0", "]", "for", "_", "in", "range", "(", "maxlen", "-", "len", "(", "x", ")", ")", "]", ")", "\n", "", "output", ".", "append", "(", "x", ")", "\n", "", "return", "span_lengths", ",", "torch", ".", "LongTensor", "(", "output", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.stream2.SubsetDataset.__init__": [[15, 19], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "dataset", ",", "indices", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "indices", "=", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.stream2.SubsetDataset.__getitem__": [[20, 22], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "dataset", "[", "self", ".", "indices", "[", "idx", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.stream2.SubsetDataset.__len__": [[23, 25], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.stream2.Stream2Dataset.__init__": [[202, 343], ["set", "time.time", "print", "print", "config.get", "print", "print", "print", "print", "print", "open", "stream2.create_data_transformer", "transformer", "print", "enumerate", "list", "config.get", "print", "enumerate", "config[].items", "line.strip.strip.strip", "line.strip.strip.startswith", "range", "len", "len", "stream2.Stream2Dataset.data.append", "line.strip.strip.startswith", "len", "mydocs.append", "docs.append", "time.time", "line.strip.strip.startswith", "instance[].size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "instance[].tolist", "docs.append", "config.get", "print", "print", "instance.size", "instance[].size", "stream2.Stream2Dataset.convertArray", "line.strip.strip.startswith", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "docs.append", "stream2.Stream2Dataset.convertArray", "line.strip.strip.split", "stream2.Stream2Dataset.convertArray", "len", "line.strip.strip.startswith", "line.strip.strip.split", "line.strip.strip.find", "json.loads", "line.strip.strip.startswith", "line.strip.strip.split", "line.strip.strip.find", "line.strip.strip.startswith", "line.strip.strip.split", "line.strip.strip.split", "line.strip.strip.startswith", "stream2.Stream2Dataset.convertSparseMatrix", "line.strip.strip.split", "line.strip.strip.startswith", "stream2.load_sparse_tensor", "line.strip.strip.split", "line.strip.strip.startswith", "stream2.Stream2Dataset.convertArray", "line.strip.strip.find", "BaseException", "line[].replace().replace().replace", "line[].replace().replace", "line[].replace"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.stream2.create_data_transformer", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.stream2.Stream2Dataset.convertArray", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.stream2.Stream2Dataset.convertArray", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.stream2.Stream2Dataset.convertArray", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.stream2.Stream2Dataset.convertSparseMatrix", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.stream2.load_sparse_tensor", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.stream2.Stream2Dataset.convertArray"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "filename", ",", "config", ",", "dictionaries", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "data", "=", "[", "]", "\n", "self", ".", "dictionaries", "=", "{", "k", ":", "dictionaries", "[", "v", "]", "for", "k", ",", "v", "in", "config", "[", "'fields'", "]", ".", "items", "(", ")", "}", "\n", "self", ".", "dictionaries_all", "=", "dictionaries", "\n", "self", ".", "load", "=", "set", "(", "config", "[", "'load'", "]", ")", "\n", "\n", "has_candidates", "=", "False", "\n", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"Loading {}\"", ".", "format", "(", "filename", ")", ")", "\n", "print", "(", "\"   char prefix/suffix enabled\"", ")", "\n", "instance", "=", "None", "\n", "count", "=", "0", "\n", "with", "open", "(", "filename", ")", "as", "file", ":", "\n", "            ", "for", "line", "in", "file", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", ")", "\n", "\n", "if", "line", ".", "startswith", "(", "\"s id \"", ")", ":", "\n", "                    ", "instance", "=", "{", "'id'", ":", "line", "[", "5", ":", "]", "}", "\n", "self", ".", "data", ".", "append", "(", "instance", ")", "\n", "\n", "", "elif", "line", ".", "startswith", "(", "\"i[] token2mention \"", ")", ":", "\n", "                    ", "if", "'token2mention'", "in", "self", ".", "load", ":", "\n", "                        ", "instance", "[", "'token2mention'", "]", "=", "self", ".", "convertArray", "(", "line", ".", "split", "(", "\" \"", ")", "[", "3", ":", "]", ")", "\n", "\n", "", "", "elif", "line", ".", "startswith", "(", "\"i[] targets \"", ")", ":", "\n", "                    ", "if", "'targets'", "in", "self", ".", "load", ":", "\n", "                        ", "instance", "[", "'targets'", "]", "=", "self", ".", "convertArray", "(", "line", ".", "split", "(", "\" \"", ")", "[", "3", ":", "]", ")", "\n", "has_candidates", "=", "True", "\n", "\n", "# elif line.startswith(\"sm token2mention \"):", "\n", "#     if 'token2mention' in self.load:", "\n", "#         instance['token2mention'] = self.convertSparseMatrix(line.split(\" \")[2:])", "\n", "\n", "", "", "elif", "line", ".", "startswith", "(", "\"x mention2candidate \"", ")", ":", "\n", "                    ", "if", "'mention2candidate'", "in", "self", ".", "load", ":", "\n", "                        ", "instance", "[", "'mention2candidate'", "]", "=", "self", ".", "convertArray", "(", "line", ".", "split", "(", "\" \"", ")", "[", "2", ":", "]", ")", "\n", "\n", "", "", "elif", "len", "(", "line", ")", "==", "0", ":", "\n", "                    ", "count", "+=", "1", "\n", "\n", "", "elif", "line", ".", "startswith", "(", "\"json \"", ")", ":", "\n", "                    ", "sep", "=", "line", ".", "find", "(", "\" \"", ",", "5", ")", "\n", "field", "=", "line", "[", "5", ":", "sep", "]", "\n", "instance", "[", "field", "]", "=", "json", ".", "loads", "(", "line", "[", "sep", ":", "]", ")", "\n", "\n", "", "elif", "line", ".", "startswith", "(", "\"s[] \"", ")", ":", "\n", "                    ", "sep", "=", "line", ".", "find", "(", "\" \"", ",", "4", ")", "\n", "field", "=", "line", "[", "4", ":", "sep", "]", "\n", "tokens", "=", "line", ".", "split", "(", "\" \"", ")", "[", "3", ":", "]", "\n", "\n", "if", "field", "in", "self", ".", "load", ":", "\n", "                        ", "instance", "[", "field", "]", "=", "tokens", "\n", "\n", "", "", "elif", "line", ".", "startswith", "(", "\"sm \"", ")", ":", "\n", "                    ", "data", "=", "line", ".", "split", "(", "\" \"", ")", "\n", "field", "=", "data", "[", "1", "]", "\n", "if", "field", "in", "self", ".", "load", ":", "\n", "                        ", "instance", "[", "field", "]", "=", "self", ".", "convertSparseMatrix", "(", "data", "[", "2", ":", "]", ")", "\n", "\n", "", "", "elif", "line", ".", "startswith", "(", "\"st \"", ")", ":", "\n", "                    ", "data", "=", "line", ".", "split", "(", "\" \"", ")", "\n", "field", "=", "data", "[", "1", "]", "\n", "if", "field", "in", "self", ".", "load", ":", "\n", "                        ", "instance", "[", "field", "]", "=", "load_sparse_tensor", "(", "data", "[", "2", ":", "]", ")", "\n", "\n", "", "", "elif", "line", ".", "startswith", "(", "\"i[] \"", ")", ":", "\n", "                    ", "data", "=", "line", ".", "split", "(", "\" \"", ")", "\n", "field", "=", "data", "[", "1", "]", "\n", "if", "field", "in", "self", ".", "load", ":", "\n", "                        ", "instance", "[", "field", "]", "=", "self", ".", "convertArray", "(", "data", "[", "3", ":", "]", ")", "\n", "\n", "", "", "elif", "line", ".", "startswith", "(", "\"s \"", ")", ":", "\n", "                    ", "sep", "=", "line", ".", "find", "(", "\" \"", ",", "2", ")", "\n", "field", "=", "line", "[", "2", ":", "sep", "]", "\n", "\n", "if", "field", "in", "self", ".", "load", ":", "\n", "                        ", "instance", "[", "field", "]", "=", "line", "[", "(", "sep", "+", "1", ")", ":", "]", ".", "replace", "(", "'\\\\r'", ",", "'\\r'", ")", ".", "replace", "(", "'\\\\n'", ",", "'\\n'", ")", ".", "replace", "(", "'\\\\\\\\'", ",", "\n", "'\\\\'", ")", "\n", "\n", "", "", "else", ":", "\n", "                    ", "raise", "BaseException", "(", "\"invalid line\"", ",", "line", ")", "\n", "\n", "", "", "", "for", "transformer", "in", "[", "create_data_transformer", "(", "cfg", ")", "for", "cfg", "in", "config", "[", "'transformers'", "]", "]", ":", "\n", "            ", "transformer", "(", "self", ")", "\n", "\n", "", "skips", "=", "0", "\n", "if", "has_candidates", ":", "\n", "            ", "print", "(", "\"WARNING: candidates enabled\"", ")", "\n", "docs", "=", "[", "]", "\n", "for", "i", ",", "instance", "in", "enumerate", "(", "self", ".", "data", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "num_candidates", "=", "instance", "[", "'candidates'", "]", ".", "size", "(", ")", "[", "0", "]", "\n", "if", "num_candidates", ">", "0", ":", "\n", "                        ", "targets", "=", "torch", ".", "zeros", "(", "num_candidates", ")", "\n", "for", "x", "in", "instance", "[", "'targets'", "]", ".", "tolist", "(", ")", ":", "\n", "                            ", "targets", "[", "x", "]", "=", "1.0", "\n", "", "instance", "[", "'targets'", "]", "=", "targets", "\n", "docs", ".", "append", "(", "i", ")", "\n", "", "elif", "config", ".", "get", "(", "'remove-no-links'", ",", "True", ")", ":", "\n", "# print(\"skip instance without candidates\")", "\n", "                        ", "skips", "+=", "1", "\n", "", "else", ":", "\n", "                        ", "targets", "=", "torch", ".", "zeros", "(", "0", ")", "\n", "instance", "[", "'targets'", "]", "=", "targets", "\n", "docs", ".", "append", "(", "i", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                    ", "print", "(", "'Error in:'", ",", "instance", ")", "\n", "print", "(", "\"num_candidates:\"", ",", "num_candidates", ")", "\n", "raise", "e", "\n", "", "", "self", ".", "docs", "=", "docs", "\n", "", "else", ":", "\n", "            ", "self", ".", "docs", "=", "list", "(", "range", "(", "len", "(", "self", ".", "data", ")", ")", ")", "\n", "\n", "", "if", "config", ".", "get", "(", "'remove-long-instances'", ",", "0", ")", ">", "0", ":", "\n", "            ", "maxlen", "=", "config", "[", "'remove-long-instances'", "]", "\n", "mydocs", "=", "[", "]", "\n", "for", "i", "in", "self", ".", "docs", ":", "\n", "                ", "instance", "=", "self", ".", "data", "[", "i", "]", "[", "'tokens'", "]", "\n", "if", "instance", ".", "size", "(", ")", "[", "0", "]", "<=", "maxlen", ":", "\n", "                    ", "mydocs", ".", "append", "(", "i", ")", "\n", "", "else", ":", "\n", "                    ", "skips", "+=", "1", "\n", "", "", "self", ".", "docs", "=", "mydocs", "\n", "\n", "", "if", "config", ".", "get", "(", "'remove-empty'", ",", "False", ")", ":", "\n", "            ", "print", "(", "\"WARNING: removing empty sequences\"", ")", "\n", "docs", "=", "[", "]", "\n", "for", "i", ",", "instance", "in", "enumerate", "(", "self", ".", "data", ")", ":", "\n", "                ", "if", "instance", "[", "'tokens'", "]", ".", "size", "(", ")", "[", "0", "]", ">", "0", ":", "\n", "                    ", "docs", ".", "append", "(", "i", ")", "\n", "", "else", ":", "\n", "                    ", "skips", "+=", "1", "\n", "", "", "self", ".", "docs", "=", "docs", "\n", "\n", "", "print", "(", "\"   instances: {} {}\"", ".", "format", "(", "len", "(", "self", ".", "data", ")", ",", "count", ")", ")", "\n", "print", "(", "\"   docs: {}\"", ".", "format", "(", "len", "(", "self", ".", "docs", ")", ")", ")", "\n", "print", "(", "\"   skipped: {}\"", ".", "format", "(", "skips", ")", ")", "\n", "print", "(", "\"done. ({})\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "tic", ")", ")", "\n", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.stream2.Stream2Dataset.convertTokens": [[344, 346], ["torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "stream2.Stream2Dataset.words.lookup"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup"], ["", "def", "convertTokens", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "return", "torch", ".", "LongTensor", "(", "[", "self", ".", "words", ".", "lookup", "(", "x", ")", "for", "x", "in", "tokens", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.stream2.Stream2Dataset.convertTargets": [[347, 349], ["torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "stream2.Stream2Dataset.entities.lookup"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup"], ["", "def", "convertTargets", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "return", "torch", ".", "LongTensor", "(", "[", "self", ".", "entities", ".", "lookup", "(", "x", ")", "for", "x", "in", "tokens", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.stream2.Stream2Dataset.convertMatrixTargets": [[350, 361], ["range", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "int", "int", "range", "matrix.append", "row.append", "stream2.Stream2Dataset.entities.lookup"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup"], ["", "def", "convertMatrixTargets", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "rows", ",", "cols", "=", "int", "(", "tokens", "[", "0", "]", ")", ",", "int", "(", "tokens", "[", "1", "]", ")", "\n", "matrix", "=", "[", "]", "\n", "ptr", "=", "2", "\n", "for", "r", "in", "range", "(", "rows", ")", ":", "\n", "            ", "row", "=", "[", "]", "\n", "for", "c", "in", "range", "(", "cols", ")", ":", "\n", "                ", "row", ".", "append", "(", "self", ".", "entities", ".", "lookup", "(", "tokens", "[", "ptr", "]", ")", ")", "\n", "ptr", "+=", "1", "\n", "", "matrix", ".", "append", "(", "row", ")", "\n", "", "return", "torch", ".", "LongTensor", "(", "matrix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.stream2.Stream2Dataset.convertArray": [[362, 364], ["torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "int"], "methods", ["None"], ["", "def", "convertArray", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "return", "torch", ".", "IntTensor", "(", "[", "int", "(", "x", ")", "for", "x", "in", "tokens", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.stream2.Stream2Dataset.convertSparseMatrix": [[365, 377], ["range", "int", "int", "int", "irow.append", "icol.append", "vals.append", "int", "int", "float"], "methods", ["None"], ["", "def", "convertSparseMatrix", "(", "self", ",", "data", ")", ":", "\n", "        ", "rows", ",", "cols", ",", "size", "=", "int", "(", "data", "[", "0", "]", ")", ",", "int", "(", "data", "[", "1", "]", ")", ",", "int", "(", "data", "[", "2", "]", ")", "\n", "irow", "=", "[", "]", "\n", "icol", "=", "[", "]", "\n", "vals", "=", "[", "]", "\n", "offs", "=", "3", "\n", "for", "i", "in", "range", "(", "size", ")", ":", "\n", "            ", "irow", ".", "append", "(", "int", "(", "data", "[", "offs", "]", ")", ")", "\n", "icol", ".", "append", "(", "int", "(", "data", "[", "offs", "+", "1", "]", ")", ")", "\n", "vals", ".", "append", "(", "float", "(", "data", "[", "offs", "+", "2", "]", ")", ")", "\n", "offs", "+=", "3", "\n", "", "return", "rows", ",", "cols", ",", "irow", ",", "icol", ",", "vals", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.stream2.Stream2Dataset.__getitem__": [[378, 380], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "data", "[", "self", ".", "docs", "[", "index", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.stream2.Stream2Dataset.__len__": [[381, 383], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "docs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.stream2.Stream2Dataset.get_histogram": [[384, 392], ["print", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "tqdm.tqdm.tqdm", "torch.LongTensor.float", "torch.LongTensor.float", "instance[].tolist"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist"], ["", "def", "get_histogram", "(", "self", ",", "field", ")", ":", "\n", "        ", "dict", "=", "self", ".", "dictionaries", "[", "field", "]", "\n", "print", "(", "\"counting histogram of {} (size: {})\"", ".", "format", "(", "field", ",", "dict", ".", "size", ")", ")", "\n", "histogram", "=", "torch", ".", "LongTensor", "(", "dict", ".", "size", ")", "\n", "for", "instance", "in", "tqdm", "(", "self", ")", ":", "\n", "            ", "for", "idx", "in", "instance", "[", "field", "]", ".", "tolist", "(", ")", ":", "\n", "                ", "histogram", "[", "idx", "]", "+=", "1", "\n", "", "", "return", "histogram", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.stream2.load_array_tokens": [[27, 29], ["torch.LongTensor", "torch.LongTensor", "dict.lookup"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup"], ["", "", "def", "load_array_tokens", "(", "tokens", ",", "dict", ")", ":", "\n", "    ", "return", "torch", ".", "LongTensor", "(", "[", "dict", ".", "lookup", "(", "x", ")", "for", "x", "in", "tokens", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.stream2.load_unique_indices": [[31, 34], ["datass.dictionary.Dictionary", "torch.LongTensor", "torch.LongTensor", "datass.dictionary.Dictionary.lookup"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup"], ["", "def", "load_unique_indices", "(", "tokens", ")", ":", "\n", "    ", "tmp", "=", "Dictionary", "(", ")", "\n", "return", "torch", ".", "LongTensor", "(", "[", "tmp", ".", "lookup", "(", "x", ")", "for", "x", "in", "tokens", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.stream2.load_characters": [[36, 41], ["output.append", "dict.lookup"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup"], ["", "def", "load_characters", "(", "tokens", ",", "dict", ")", ":", "\n", "    ", "output", "=", "[", "]", "\n", "for", "token", "in", "tokens", ":", "\n", "        ", "output", ".", "append", "(", "[", "dict", ".", "lookup", "(", "c", ")", "for", "c", "in", "token", "]", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.stream2.load_characters2": [[43, 49], ["output.append", "dict.lookup"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup"], ["", "def", "load_characters2", "(", "tokens", ",", "dict", ")", ":", "\n", "    ", "output", "=", "[", "]", "\n", "for", "token", "in", "tokens", ":", "\n", "        ", "token", "=", "'<'", "+", "token", "+", "'>'", "\n", "output", ".", "append", "(", "[", "dict", ".", "lookup", "(", "c", ")", "for", "c", "in", "token", "]", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.stream2.load_sparse_tensor": [[51, 61], ["int", "range", "int", "int", "I.append", "V.append", "int", "len"], "function", ["None"], ["", "def", "load_sparse_tensor", "(", "data", ")", ":", "\n", "    ", "dims", "=", "int", "(", "data", "[", "0", "]", ")", "\n", "shape", "=", "[", "int", "(", "x", ")", "for", "x", "in", "data", "[", "1", ":", "dims", "+", "1", "]", "]", "\n", "I", "=", "[", "]", "\n", "V", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "int", "(", "(", "len", "(", "data", ")", "-", "1", ")", "/", "(", "dims", "+", "1", ")", ")", ")", ":", "\n", "        ", "begin", "=", "(", "i", "+", "1", ")", "*", "(", "dims", "+", "1", ")", "\n", "I", ".", "append", "(", "[", "int", "(", "x", ")", "for", "x", "in", "data", "[", "begin", ":", "begin", "+", "dims", "]", "]", ")", "\n", "V", ".", "append", "(", "data", "[", "begin", "+", "dims", "]", ")", "\n", "", "return", "(", "shape", ",", "I", ",", "V", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.stream2.transform_copy": [[63, 68], ["None"], "function", ["None"], ["", "def", "transform_copy", "(", "stream2", ",", "config", ")", ":", "\n", "    ", "src", "=", "config", "[", "'src'", "]", "\n", "dst", "=", "config", "[", "'dst'", "]", "\n", "for", "instance", "in", "stream2", ".", "data", ":", "\n", "        ", "instance", "[", "dst", "]", "=", "instance", "[", "src", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.stream2.transform_characters": [[70, 105], ["print", "stream2.load_characters2", "print", "collections.Counter", "dict.tolist", "collections.Counter.items", "print", "print", "dict.add", "stream2.load_characters2", "collections.Counter.update", "chars.append"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.stream2.load_characters2", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.stream2.load_characters2", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.update"], ["", "", "def", "transform_characters", "(", "stream2", ",", "config", ")", ":", "\n", "    ", "print", "(", "\"RUN transform_characters:\"", ",", "config", ")", "\n", "field", "=", "config", "[", "'field'", "]", "\n", "dict", "=", "stream2", ".", "dictionaries_all", "[", "config", "[", "'dict'", "]", "]", "\n", "threshold", "=", "config", "[", "'threshold'", "]", "\n", "padding", "=", "config", "[", "'padding'", "]", "\n", "\n", "for", "instance", "in", "stream2", ".", "data", ":", "\n", "        ", "instance", "[", "field", "]", "=", "load_characters2", "(", "instance", "[", "'tokens'", "]", ",", "dict", ")", "\n", "\n", "", "if", "dict", ".", "update", "==", "False", ":", "\n", "        ", "print", "(", "\"WARNING: CHARACTER DICTIONARY IS ALREADY INITIALIZED\"", ")", "\n", "", "elif", "config", "[", "'train'", "]", ":", "\n", "        ", "c", "=", "Counter", "(", ")", "\n", "for", "instance", "in", "stream2", ".", "data", ":", "\n", "            ", "for", "ch", "in", "instance", "[", "field", "]", ":", "\n", "                ", "c", ".", "update", "(", "ch", ")", "\n", "\n", "", "", "chars", "=", "[", "]", "\n", "items", "=", "dict", ".", "tolist", "(", ")", "\n", "for", "ch", ",", "count", "in", "c", ".", "items", "(", ")", ":", "\n", "            ", "if", "count", ">=", "threshold", ":", "\n", "                ", "chars", ".", "append", "(", "items", "[", "ch", "]", ")", "\n", "\n", "", "", "print", "(", "\"WARNING: NOT CLEARING DICTIONARY\"", ")", "\n", "# dict.clear()", "\n", "# dict.add(padding)", "\n", "for", "ch", "in", "chars", ":", "\n", "            ", "dict", ".", "add", "(", "ch", ")", "\n", "", "dict", ".", "update", "=", "False", "\n", "\n", "for", "instance", "in", "stream2", ".", "data", ":", "\n", "            ", "instance", "[", "field", "]", "=", "load_characters2", "(", "instance", "[", "'tokens'", "]", ",", "dict", ")", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "\"WARNING: not thresholding character dictionary\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.stream2.transform_indices": [[107, 111], ["print", "stream2.load_unique_indices"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.stream2.load_unique_indices"], ["", "", "def", "transform_indices", "(", "stream2", ",", "config", ")", ":", "\n", "    ", "print", "(", "\"RUN transform_indices:\"", ",", "config", ")", "\n", "for", "instance", "in", "stream2", ".", "data", ":", "\n", "        ", "instance", "[", "'tokens-indices'", "]", "=", "load_unique_indices", "(", "instance", "[", "'tokens'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.stream2.transform_lookup_tokens": [[113, 121], ["print", "print", "stream2.load_array_tokens"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.stream2.load_array_tokens"], ["", "", "def", "transform_lookup_tokens", "(", "stream2", ",", "config", ")", ":", "\n", "    ", "print", "(", "\"RUN transform_lookup_tokens:\"", ",", "config", ")", "\n", "field", "=", "config", "[", "'field'", "]", "\n", "dict", "=", "stream2", ".", "dictionaries_all", "[", "config", "[", "'dict'", "]", "]", "\n", "old_size", "=", "dict", ".", "size", "\n", "for", "instance", "in", "stream2", ".", "data", ":", "\n", "        ", "instance", "[", "field", "]", "=", "load_array_tokens", "(", "instance", "[", "field", "]", ",", "dict", ")", "\n", "", "print", "(", "\"new tokens added to dictionary:\"", ",", "dict", ".", "size", "-", "old_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.stream2.transform_spans": [[139, 144], ["enumerate", "dict.lookup"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup"], ["", "def", "transform_spans", "(", "stream2", ",", "config", ")", ":", "\n", "    ", "field", "=", "config", "[", "'field'", "]", "\n", "dict", "=", "stream2", ".", "dictionaries_all", "[", "config", "[", "'dict'", "]", "]", "\n", "for", "i", ",", "instance", "in", "enumerate", "(", "stream2", ".", "data", ")", ":", "\n", "        ", "instance", "[", "field", "]", "=", "[", "(", "start", ",", "end", ",", "dict", ".", "lookup", "(", "label", ")", ")", "for", "start", ",", "end", ",", "label", "in", "instance", "[", "field", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.stream2.transform_decode_spans": [[147, 158], ["zip", "list", "list", "spans[].append", "min", "max", "map", "range", "zip"], "function", ["None"], ["", "", "def", "transform_decode_spans", "(", "stream2", ",", "config", ")", ":", "\n", "    ", "field", "=", "config", "[", "'field'", "]", "\n", "for", "instance", "in", "stream2", ".", "data", ":", "\n", "        ", "rows", ",", "cols", ",", "irows", ",", "icols", ",", "vals", "=", "instance", "[", "'token2mention'", "]", "\n", "spans", "=", "[", "list", "(", ")", "for", "i", "in", "range", "(", "rows", ")", "]", "\n", "for", "irow", ",", "icol", ",", "val", "in", "zip", "(", "irows", ",", "icols", ",", "vals", ")", ":", "\n", "            ", "spans", "[", "irow", "]", ".", "append", "(", "icol", ")", "\n", "", "span_start", "=", "[", "min", "(", "x", ")", "for", "x", "in", "spans", "]", "\n", "span_end", "=", "[", "max", "(", "x", ")", "for", "x", "in", "spans", "]", "\n", "spans", "=", "[", "span_start", ",", "span_end", "]", "\n", "instance", "[", "field", "]", "=", "list", "(", "map", "(", "list", ",", "zip", "(", "*", "spans", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.stream2.transform_decode_spans_with_types": [[160, 177], ["stream2.dictionaries_all[].tolist", "print", "torch.LongTensor", "torch.LongTensor", "max", "decode_multiner", "dictionary.lookup", "lengths.append", "instance[].unsqueeze", "instance[].size"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.decode_multiner", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup"], ["", "", "def", "transform_decode_spans_with_types", "(", "stream2", ",", "config", ")", ":", "\n", "    ", "field", "=", "config", "[", "'field'", "]", "\n", "bi_labels", "=", "stream2", ".", "dictionaries_all", "[", "config", "[", "'srcdict'", "]", "]", ".", "tolist", "(", ")", "\n", "dictionary", "=", "stream2", ".", "dictionaries_all", "[", "config", "[", "'dstdict'", "]", "]", "\n", "\n", "lengths", "=", "[", "]", "\n", "\n", "for", "instance", "in", "stream2", ".", "data", ":", "\n", "        ", "from", "metrics", ".", "f1", "import", "decode_multiner", "\n", "sequence_lengths", "=", "torch", ".", "LongTensor", "(", "[", "instance", "[", "'tokens'", "]", ".", "size", "(", ")", "[", "0", "]", "]", ")", "\n", "instance", "[", "field", "]", "=", "decode_multiner", "(", "instance", "[", "'tags'", "]", ".", "unsqueeze", "(", "0", ")", ",", "sequence_lengths", ",", "bi_labels", ")", "[", "0", "]", "\n", "\n", "for", "begin", ",", "end", ",", "tag", "in", "instance", "[", "field", "]", ":", "\n", "            ", "dictionary", ".", "lookup", "(", "tag", ")", "\n", "lengths", ".", "append", "(", "end", "-", "begin", ")", "\n", "\n", "", "", "print", "(", "\"max span length:\"", ",", "max", "(", "lengths", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.stream2.create_data_transformer": [[179, 198], ["stream2.transform_characters", "stream2.transform_indices", "stream2.transform_lookup_tokens", "stream2.transform_spans", "stream2.transform_decode_spans", "stream2.transform_decode_spans_with_types", "BaseException", "stream2.transform_copy"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.stream2.transform_characters", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.stream2.transform_indices", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.stream2.transform_lookup_tokens", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.stream2.transform_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.stream2.transform_decode_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.stream2.transform_decode_spans_with_types", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.stream2.transform_copy"], ["", "def", "create_data_transformer", "(", "config", ")", ":", "\n", "    ", "if", "config", "[", "'type'", "]", "==", "'characters'", ":", "\n", "        ", "return", "lambda", "stream2", ":", "transform_characters", "(", "stream2", ",", "config", ")", "\n", "", "elif", "config", "[", "'type'", "]", "==", "\"indices\"", ":", "\n", "        ", "return", "lambda", "stream2", ":", "transform_indices", "(", "stream2", ",", "config", ")", "\n", "", "elif", "config", "[", "'type'", "]", "==", "\"lookup-tokens\"", ":", "\n", "        ", "return", "lambda", "stream2", ":", "transform_lookup_tokens", "(", "stream2", ",", "config", ")", "\n", "# elif config['type'] == \"seqlabels-multi-tags\":", "\n", "#     return lambda stream2: transform_seqlabels_multi_tags(stream2, config)", "\n", "", "elif", "config", "[", "'type'", "]", "==", "\"spans\"", ":", "\n", "        ", "return", "lambda", "stream2", ":", "transform_spans", "(", "stream2", ",", "config", ")", "\n", "", "elif", "config", "[", "'type'", "]", "==", "\"decode-spans\"", ":", "\n", "        ", "return", "lambda", "stream2", ":", "transform_decode_spans", "(", "stream2", ",", "config", ")", "\n", "", "elif", "config", "[", "'type'", "]", "==", "\"decode-spans-with-types\"", ":", "\n", "        ", "return", "lambda", "stream2", ":", "transform_decode_spans_with_types", "(", "stream2", ",", "config", ")", "\n", "", "elif", "config", "[", "'type'", "]", "==", "'copy'", ":", "\n", "        ", "return", "lambda", "stream2", ":", "transform_copy", "(", "stream2", ",", "config", ")", "\n", "", "else", ":", "\n", "        ", "raise", "BaseException", "(", "\"no such data transformer:\"", ",", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.stream2.collate_stream2": [[394, 419], ["batch.sort", "torch.pad_sequence", "datass.collate.collate_mentions_sparse", "datass.collate.collate_table", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "rnn_utils.pad_sequence.size", "datass.collate.decode_table", "x[].size", "x[].size"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.collate.collate_mentions_sparse", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.collate.collate_table", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.collate.decode_table"], ["", "", "def", "collate_stream2", "(", "batch", ")", ":", "\n", "    ", "batch", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "'tokens'", "]", ".", "size", "(", ")", "[", "0", "]", ",", "reverse", "=", "True", ")", "\n", "\n", "# tmp = []", "\n", "# tmp.extend(batch)", "\n", "# tmp.extend(batch)", "\n", "# batch = tmp", "\n", "\n", "seqlens", "=", "[", "x", "[", "'tokens'", "]", ".", "size", "(", ")", "[", "0", "]", "for", "x", "in", "batch", "]", "\n", "tokens", "=", "rnn_utils", ".", "pad_sequence", "(", "[", "x", "[", "'tokens'", "]", "for", "x", "in", "batch", "]", ",", "batch_first", "=", "True", ")", "\n", "maxlen", "=", "tokens", ".", "size", "(", ")", "[", "1", "]", "\n", "token2mention", "=", "collate_mentions_sparse", "(", "[", "x", "[", "'token2mention'", "]", "for", "x", "in", "batch", "]", ",", "maxlen", ")", "\n", "# mention2candidate = collate_sparse([decode_table(x['mention2candidate']) for x in batch])", "\n", "mention2candidate", "=", "collate_table", "(", "[", "x", "[", "'mention2candidate'", "]", "for", "x", "in", "batch", "]", ")", "\n", "targets", "=", "torch", ".", "cat", "(", "[", "x", "[", "'targets'", "]", "for", "x", "in", "batch", "]", ",", "0", ")", "\n", "candidates", "=", "torch", ".", "cat", "(", "[", "x", "[", "'candidates'", "]", "for", "x", "in", "batch", "]", ",", "0", ")", "\n", "\n", "return", "{", "\n", "'seqlens'", ":", "seqlens", ",", "\n", "'tokens'", ":", "tokens", ",", "\n", "'token2mention'", ":", "token2mention", ",", "\n", "'mention2candidate'", ":", "decode_table", "(", "mention2candidate", ")", ",", "\n", "'candidates'", ":", "candidates", ",", "\n", "'targets'", ":", "targets", ",", "\n", "'table'", ":", "mention2candidate", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.stream2.collate_stream2_negative_samples": [[422, 436], ["batch.sort", "torch.pad_sequence", "datass.collate.collate_mentions_sparse", "torch.cat", "torch.cat", "rnn_utils.pad_sequence.size", "x[].size", "x[].size"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.collate.collate_mentions_sparse"], ["", "def", "collate_stream2_negative_samples", "(", "batch", ")", ":", "\n", "    ", "batch", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "'tokens'", "]", ".", "size", "(", ")", "[", "0", "]", ",", "reverse", "=", "True", ")", "\n", "\n", "seqlens", "=", "[", "x", "[", "'tokens'", "]", ".", "size", "(", ")", "[", "0", "]", "for", "x", "in", "batch", "]", "\n", "tokens", "=", "rnn_utils", ".", "pad_sequence", "(", "[", "x", "[", "'tokens'", "]", "for", "x", "in", "batch", "]", ",", "batch_first", "=", "True", ")", "\n", "maxlen", "=", "tokens", ".", "size", "(", ")", "[", "1", "]", "\n", "token2mention", "=", "collate_mentions_sparse", "(", "[", "x", "[", "'token2mention'", "]", "for", "x", "in", "batch", "]", ",", "maxlen", ")", "\n", "targets", "=", "torch", ".", "cat", "(", "[", "x", "[", "'targets'", "]", "for", "x", "in", "batch", "]", ",", "0", ")", "\n", "\n", "return", "{", "\n", "'seqlens'", ":", "seqlens", ",", "\n", "'tokens'", ":", "tokens", ",", "\n", "'token2mention'", ":", "token2mention", ",", "\n", "'targets'", ":", "targets", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.stream2.collate_text1": [[447, 451], ["batch.sort", "torch.pad_sequence", "x.size"], "function", ["None"], ["", "def", "collate_text1", "(", "batch", ")", ":", "\n", "    ", "batch", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", ".", "size", "(", ")", "[", "0", "]", ",", "reverse", "=", "True", ")", "\n", "packed", "=", "rnn_utils", ".", "pad_sequence", "(", "batch", ")", "\n", "return", "packed", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.stream2.collate_text2": [[453, 458], ["batch.sort", "torch.pad_sequence", "torch.zeros", "torch.zeros", "x.size", "rnn_utils.pad_sequence.size", "rnn_utils.pad_sequence.size"], "function", ["None"], ["", "def", "collate_text2", "(", "batch", ")", ":", "\n", "    ", "batch", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", ".", "size", "(", ")", "[", "0", "]", ",", "reverse", "=", "True", ")", "\n", "packed", "=", "rnn_utils", ".", "pad_sequence", "(", "batch", ")", "\n", "token2mention", "=", "torch", ".", "zeros", "(", "[", "64", ",", "packed", ".", "size", "(", ")", "[", "0", "]", "*", "packed", ".", "size", "(", ")", "[", "1", "]", "]", ")", "\n", "return", "packed", ",", "token2mention", "\n", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.__init__": [[22, 31], ["dictionary.Dictionary.clear"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricF1.clear"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "rewriter", "=", "lambda", "t", ":", "t", "\n", "self", ".", "debug", "=", "False", "\n", "self", ".", "token_unknown", "=", "-", "1", "\n", "self", ".", "update", "=", "True", "\n", "self", ".", "prefix", "=", "''", "\n", "self", ".", "tmp_unknown", "=", "None", "\n", "\n", "self", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.clear": [[38, 48], ["set", "dictionary.Dictionary.lookup"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "word2idx", "=", "{", "}", "\n", "self", ".", "idx2word", "=", "{", "}", "\n", "self", ".", "matrix", "=", "False", "\n", "self", ".", "size", "=", "0", "\n", "self", ".", "out_of_voc", "=", "0", "\n", "self", ".", "oov", "=", "set", "(", ")", "\n", "\n", "if", "self", ".", "tmp_unknown", "is", "not", "None", ":", "\n", "            ", "self", ".", "token_unknown", "=", "self", ".", "lookup", "(", "self", ".", "tmp_unknown", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.load_spirit_dictionary": [[49, 61], ["open", "line.strip().split", "len", "line.strip", "int", "dictionary.Dictionary.lookup"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup"], ["", "", "def", "load_spirit_dictionary", "(", "self", ",", "filename", ",", "threshold_doc_freq", "=", "0", ")", ":", "\n", "        ", "self", ".", "update", "=", "True", "\n", "with", "open", "(", "filename", ")", "as", "file", ":", "\n", "            ", "for", "line", "in", "file", ":", "\n", "                ", "data", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "if", "len", "(", "data", ")", "==", "3", ":", "\n", "                    ", "df", ",", "tf", ",", "term", "=", "data", "\n", "if", "int", "(", "df", ")", ">=", "threshold_doc_freq", ":", "\n", "                        ", "self", ".", "lookup", "(", "term", ")", "\n", "# else:", "\n", "# \tprint(\"skip:\", line)", "\n", "", "", "", "", "self", ".", "update", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.load_wordpiece_vocab": [[62, 69], ["open", "line.split", "dictionary.Dictionary.lookup"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup"], ["", "def", "load_wordpiece_vocab", "(", "self", ",", "filename", ")", ":", "\n", "        ", "self", ".", "update", "=", "True", "\n", "with", "open", "(", "filename", ")", "as", "file", ":", "\n", "            ", "for", "line", "in", "file", ":", "\n", "                ", "term", ",", "_", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "self", ".", "lookup", "(", "term", ")", "\n", "", "", "self", ".", "update", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.load_json": [[70, 81], ["open", "json.load", "isinstance", "enumerate", "json.load.items", "dictionary.Dictionary.lookup", "print", "dictionary.Dictionary.lookup", "print"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "load_json", "(", "self", ",", "filename", ")", ":", "\n", "        ", "with", "open", "(", "filename", ")", "as", "file", ":", "\n", "            ", "data", "=", "json", ".", "load", "(", "file", ")", "\n", "if", "isinstance", "(", "data", ",", "(", "list", ",", ")", ")", ":", "\n", "                ", "for", "idx", ",", "word", "in", "enumerate", "(", "data", ")", ":", "\n", "                    ", "if", "self", ".", "lookup", "(", "word", ")", "!=", "idx", ":", "\n", "                        ", "print", "(", "\"WARNING: invalid dictionary\"", ")", "\n", "", "", "", "else", ":", "\n", "                ", "for", "word", ",", "idx", "in", "data", ".", "items", "(", ")", ":", "\n", "                    ", "if", "self", ".", "lookup", "(", "word", ")", "!=", "idx", ":", "\n", "                        ", "print", "(", "\"WARNING: invalid dictionary\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup": [[86, 99], ["dictionary.Dictionary.rewriter", "print"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "", "", "", "", "def", "lookup", "(", "self", ",", "token", ")", ":", "\n", "        ", "token", "=", "self", ".", "prefix", "+", "self", ".", "rewriter", "(", "token", ")", "\n", "if", "not", "token", "in", "self", ".", "word2idx", ":", "\n", "            ", "if", "self", ".", "update", ":", "\n", "                ", "self", ".", "word2idx", "[", "token", "]", "=", "self", ".", "size", "\n", "self", ".", "idx2word", "[", "self", ".", "size", "]", "=", "token", "\n", "self", ".", "size", "+=", "1", "\n", "", "else", ":", "\n", "                ", "if", "self", ".", "debug", ":", "\n", "                    ", "print", "(", "\"oov: '{}' -> {}\"", ".", "format", "(", "token", ",", "self", ".", "token_unknown", ")", ")", "\n", "", "self", ".", "out_of_voc", "+=", "1", "\n", "return", "self", ".", "token_unknown", "\n", "", "", "return", "self", ".", "word2idx", "[", "token", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.add": [[100, 106], ["None"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "token", ")", ":", "\n", "        ", "if", "not", "token", "in", "self", ".", "word2idx", ":", "\n", "            ", "self", ".", "word2idx", "[", "token", "]", "=", "self", ".", "size", "\n", "self", ".", "idx2word", "[", "self", ".", "size", "]", "=", "token", "\n", "self", ".", "size", "+=", "1", "\n", "", "return", "self", ".", "word2idx", "[", "token", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.set_unknown_token": [[107, 112], ["print", "dictionary.Dictionary.get"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get"], ["", "def", "set_unknown_token", "(", "self", ",", "unknown_token", ")", ":", "\n", "        ", "self", ".", "tmp_unknown", "=", "unknown_token", "\n", "# self.token_unknown = self.lookup(unknown_token) #NOT CORRECT", "\n", "self", ".", "token_unknown", "=", "self", ".", "word2idx", "[", "self", ".", "prefix", "+", "unknown_token", "]", "\n", "print", "(", "self", ".", "get", "(", "self", ".", "token_unknown", ")", ",", "\"->\"", ",", "self", ".", "token_unknown", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.write": [[113, 117], ["open", "json.dump"], "methods", ["None"], ["", "def", "write", "(", "self", ",", "filename", ")", ":", "\n", "        ", "import", "json", "\n", "with", "open", "(", "filename", ",", "'w'", ")", "as", "file", ":", "\n", "            ", "json", ".", "dump", "(", "self", ".", "word2idx", ",", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get": [[118, 124], ["dictionary.Dictionary.idx2word.get"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get"], ["", "", "def", "get", "(", "self", ",", "index", ")", ":", "\n", "# for word, idx in self.word2idx.items():", "\n", "#     if idx == index:", "\n", "#         return word", "\n", "# return None", "\n", "        ", "return", "self", ".", "idx2word", ".", "get", "(", "index", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist": [[125, 130], ["dictionary.Dictionary.word2idx.items"], "methods", ["None"], ["", "def", "tolist", "(", "self", ")", ":", "\n", "        ", "list", "=", "[", "None", "]", "*", "self", ".", "size", "\n", "for", "word", ",", "idx", "in", "self", ".", "word2idx", ".", "items", "(", ")", ":", "\n", "            ", "list", "[", "idx", "]", "=", "word", "\n", "", "return", "list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.wordvec.load_wordembeddings": [[11, 67], ["print", "print", "numpy.zeros", "wordvec.open_embedding_file", "open_embedding_file.close", "print", "wordvec.open_embedding_file", "print", "open", "wordvec.is_valid_word_line", "open.close", "wordvec.is_valid_word_line", "len", "os.path.isfile", "wordvec.parse_line", "len", "wordvec.parse_line", "dictionary.add", "numpy.asarray", "open.write", "len"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.wordvec.open_embedding_file", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.close", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.wordvec.open_embedding_file", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.wordvec.is_valid_word_line", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.close", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.wordvec.is_valid_word_line", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.wordvec.parse_line", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.wordvec.parse_line", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.write"], ["def", "load_wordembeddings", "(", "filename", ",", "dictionary", ":", "Dictionary", ",", "dim", "=", "300", ",", "out_of_voc_vector", "=", "None", ",", "filtered_file", "=", "None", ",", "\n", "use_filtered", "=", "False", ",", "what_load", "=", "'dictionary'", ",", "load_type", "=", "'wordvec'", ")", ":", "\n", "# if use_filtered and os.path.isfile(filtered_file):", "\n", "#     file = gzip.open(filtered_file, 'rt') if filtered_file.endswith('.gz') else open(filtered_file)", "\n", "# else:", "\n", "#     file = gzip.open(filename, 'rt') if filename.endswith('.gz') else open(filename)", "\n", "# file = open_embedding_file(use_filtered, filtered_file, filename)", "\n", "\n", "    ", "print", "(", "\"loading word vectors:\"", ",", "filename", ")", "\n", "print", "(", "'load_wordembeddings use_filtered: '", ",", "use_filtered", ",", "' what_load: '", ",", "what_load", ",", "' load_type: '", ",", "load_type", ")", "\n", "if", "what_load", "==", "'allvecs'", ":", "\n", "        ", "file", "=", "open_embedding_file", "(", "use_filtered", ",", "filtered_file", ",", "filename", ")", "\n", "for", "line", "in", "file", ":", "\n", "            ", "if", "is_valid_word_line", "(", "line", ",", "load_type", ")", ":", "\n", "                ", "values", "=", "parse_line", "(", "line", ",", "load_type", ")", "\n", "# values = line.rstrip().split(' ')", "\n", "word", "=", "values", "[", "0", "]", "\n", "dictionary", ".", "add", "(", "word", ")", "\n", "# else:", "\n", "", "", "", "accept", "=", "dictionary", ".", "word2idx", "\n", "embedding_matrix", "=", "np", ".", "zeros", "(", "(", "len", "(", "accept", ")", ",", "dim", ")", ")", "\n", "if", "out_of_voc_vector", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"WARNING: initialize word embeddings with \"", ",", "out_of_voc_vector", ")", "\n", "embedding_matrix", "=", "embedding_matrix", "+", "out_of_voc_vector", "\n", "\n", "", "found", "=", "0", "\n", "\n", "file", "=", "open_embedding_file", "(", "use_filtered", ",", "filtered_file", ",", "filename", ")", "\n", "\n", "if", "use_filtered", "and", "(", "not", "os", ".", "path", ".", "isfile", "(", "filtered_file", ")", ")", ":", "\n", "        ", "file_found_out", "=", "open", "(", "filtered_file", ",", "'wt'", ")", "\n", "", "else", ":", "\n", "        ", "file_found_out", "=", "None", "\n", "\n", "", "for", "line", "in", "file", ":", "\n", "# Note: use split(' ') instead of split() if you get an error.", "\n", "        ", "if", "is_valid_word_line", "(", "line", ",", "load_type", ")", ":", "\n", "            ", "values", "=", "parse_line", "(", "line", ",", "load_type", ")", "\n", "# values = line.rstrip().split(' ')", "\n", "word", "=", "values", "[", "0", "]", "\n", "if", "word", "in", "accept", ":", "\n", "# if word in accept or True: # kzaporoj - just to see how much space it occupies", "\n", "                ", "coefs", "=", "np", ".", "asarray", "(", "values", "[", "1", "]", ",", "dtype", "=", "'float32'", ")", "\n", "embedding_matrix", "[", "accept", "[", "word", "]", "]", "=", "coefs", "\n", "found", "+=", "1", "\n", "if", "file_found_out", "is", "not", "None", ":", "\n", "                    ", "file_found_out", ".", "write", "(", "line", ")", "\n", "\n", "", "", "", "", "file", ".", "close", "(", ")", "\n", "\n", "if", "file_found_out", "is", "not", "None", ":", "\n", "        ", "file_found_out", ".", "close", "(", ")", "\n", "\n", "", "print", "(", "\"found: {} / {} = {}\"", ".", "format", "(", "found", ",", "len", "(", "accept", ")", ",", "found", "/", "len", "(", "accept", ")", "if", "found", "!=", "0", "else", "0.0", ")", ")", "\n", "\n", "return", "embedding_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.wordvec.open_embedding_file": [[69, 80], ["print", "os.path.isfile", "print", "print", "filtered_file.endswith", "gzip.open", "open", "filename.endswith", "gzip.open", "open"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "open_embedding_file", "(", "use_filtered", ",", "filtered_file", ",", "filename", ")", ":", "\n", "    ", "print", "(", "'IN OPEN_EMBEDDING_FILE with use_filtered: '", ",", "use_filtered", ",", "'  filtered_file: '", ",", "filtered_file", ",", "\n", "' filename: '", ",", "filename", ")", "\n", "if", "use_filtered", "and", "os", ".", "path", ".", "isfile", "(", "filtered_file", ")", ":", "\n", "        ", "print", "(", "'FOR SOME REASON IN use_filtered PART OF open_embedding_file!!: '", ",", "use_filtered", ")", "\n", "file", "=", "gzip", ".", "open", "(", "filtered_file", ",", "'rt'", ")", "if", "filtered_file", ".", "endswith", "(", "'.gz'", ")", "else", "open", "(", "filtered_file", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'NOT IN use_filtered PART OF open_embedding_file!!: '", ",", "use_filtered", ")", "\n", "file", "=", "gzip", ".", "open", "(", "filename", ",", "'rt'", ")", "if", "filename", ".", "endswith", "(", "'.gz'", ")", "else", "open", "(", "filename", ")", "\n", "\n", "", "return", "file", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.wordvec.is_valid_word_line": [[82, 91], ["line.startswith", "line.startswith"], "function", ["None"], ["", "def", "is_valid_word_line", "(", "line", ":", "str", ",", "load_type", "=", "'wordvec'", ")", ":", "\n", "    ", "if", "load_type", "==", "'wordvec'", ":", "\n", "        ", "return", "True", "\n", "", "elif", "load_type", "==", "'word_wordentvec'", "and", "line", ".", "startswith", "(", "'1#'", ")", ":", "\n", "        ", "return", "True", "\n", "", "elif", "load_type", "==", "'ent_wordentvec'", "and", "(", "not", "line", ".", "startswith", "(", "'1#'", ")", ")", ":", "\n", "        ", "return", "True", "\n", "", "else", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.wordvec.parse_line": [[93, 111], ["line.rstrip().split", "line.startswith", "line.rstrip", "line.startswith", "Exception"], "function", ["None"], ["", "", "def", "parse_line", "(", "line", ":", "str", ",", "load_type", "=", "'wordvec'", ")", ":", "\n", "    ", "line_splitted", "=", "line", ".", "rstrip", "(", ")", ".", "split", "(", "' '", ")", "\n", "# token = None", "\n", "# embedding_vector = None", "\n", "if", "load_type", "==", "'wordvec'", "or", "load_type", "==", "'ent_wordentvec'", ":", "\n", "        ", "if", "line", ".", "startswith", "(", "'1#'", ")", ":", "\n", "            ", "token", "=", "line_splitted", "[", "0", "]", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "token", "=", "line_splitted", "[", "0", "]", "\n", "", "embedding_vector", "=", "line_splitted", "[", "1", ":", "]", "\n", "", "elif", "load_type", "==", "'word_wordentvec'", "and", "line", ".", "startswith", "(", "'1#'", ")", ":", "\n", "        ", "token", "=", "line_splitted", "[", "0", "]", "[", "2", ":", "]", "\n", "embedding_vector", "=", "line_splitted", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Something wrong in parse_line for line: '", "+", "line", "+", "\n", "' and load_type: '", "+", "load_type", ")", "\n", "\n", "", "return", "token", ",", "embedding_vector", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.wordvec.load_wordembeddings_with_random_unknowns": [[113, 242], ["print", "print", "print", "wordvec.open_embedding_file", "open_embedding_file.close", "numpy.asarray", "print", "print", "numpy.mean", "numpy.std", "math.isnan", "math.isnan", "torch.FloatTensor().normal_", "found.items", "print", "print", "print", "print", "print", "wordvec.open_embedding_file", "len", "print", "accept.items", "open", "wordvec.is_valid_word_line", "open.close", "list", "torch.FloatTensor", "torch.linalg.norm", "accept.keys", "accept.items", "print", "wordvec.is_valid_word_line", "os.path.isfile", "wordvec.parse_line", "found.values", "torch.FloatTensor", "len", "len", "len", "len", "wordvec.parse_line", "dictionary.add", "numpy.asarray", "numpy.asarray", "len", "len", "len", "print", "x.lower", "x.casefold", "open.write", "open.write", "print", "torch.FloatTensor", "print", "print", "print", "print", "word.lower", "print", "torch.FloatTensor", "word.lower", "word.casefold", "word.lower", "word.lower", "word.lower", "word.casefold", "word.casefold"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.wordvec.open_embedding_file", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.close", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.wordvec.open_embedding_file", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.wordvec.is_valid_word_line", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.close", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.wordvec.is_valid_word_line", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.wordvec.parse_line", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.wordvec.parse_line", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.write", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.write", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "load_wordembeddings_with_random_unknowns", "(", "filename", ",", "dictionary", ":", "Dictionary", "=", "None", ",", "dim", "=", "300", ",", "debug", "=", "False", ",", "\n", "backoff_to_lowercase", "=", "False", ",", "\n", "filtered_file", "=", "None", ",", "use_filtered", "=", "False", ",", "what_load", "=", "'dictionary'", ",", "\n", "load_type", "=", "'wordvec'", ")", ":", "\n", "    ", "print", "(", "\"loading word vectors with random unknowns:\"", ",", "filename", ")", "\n", "print", "(", "'load_wordembeddings use_filtered: '", ",", "use_filtered", ",", "' what_load: '", ",", "what_load", ",", "' load_type: '", ",", "load_type", ")", "\n", "found", "=", "{", "}", "\n", "\n", "if", "what_load", "==", "'allvecs'", ":", "\n", "        ", "file", "=", "open_embedding_file", "(", "use_filtered", ",", "filtered_file", ",", "filename", ")", "\n", "for", "line", "in", "file", ":", "\n", "            ", "if", "is_valid_word_line", "(", "line", ",", "load_type", ")", ":", "\n", "                ", "values", "=", "parse_line", "(", "line", ",", "load_type", ")", "\n", "# values = line.rstrip().split(' ')", "\n", "word", "=", "values", "[", "0", "]", "\n", "dictionary", ".", "add", "(", "word", ")", "\n", "\n", "", "", "", "accept", "=", "dictionary", ".", "word2idx", "\n", "print", "(", "'LENGTH OF ACCEPT: '", ",", "len", "(", "accept", ")", ")", "\n", "backoff", "=", "{", "}", "\n", "if", "backoff_to_lowercase", ":", "\n", "        ", "print", "(", "\"WARNING: backing off to lowercase\"", ")", "\n", "for", "x", ",", "idx", "in", "accept", ".", "items", "(", ")", ":", "\n", "            ", "if", "x", "==", "'UNKNOWN'", ":", "\n", "                ", "continue", "\n", "", "backoff", "[", "x", ".", "lower", "(", ")", "]", "=", "None", "\n", "backoff", "[", "x", ".", "casefold", "(", ")", "]", "=", "None", "\n", "\n", "# file = gzip.open(filename, 'rt') if filename.endswith('.gz') else open(filename)", "\n", "\n", "", "", "file", "=", "open_embedding_file", "(", "use_filtered", ",", "filtered_file", ",", "filename", ")", "\n", "\n", "if", "use_filtered", "and", "(", "not", "os", ".", "path", ".", "isfile", "(", "filtered_file", ")", ")", ":", "\n", "        ", "file_found_out", "=", "open", "(", "filtered_file", ",", "'wt'", ")", "\n", "", "else", ":", "\n", "        ", "file_found_out", "=", "None", "\n", "\n", "", "first_dim", "=", "0", "\n", "nr_lines_file", "=", "0", "\n", "for", "line", "in", "file", ":", "\n", "        ", "nr_lines_file", "+=", "1", "\n", "if", "is_valid_word_line", "(", "line", ",", "load_type", ")", ":", "\n", "            ", "values", "=", "parse_line", "(", "line", ",", "load_type", ")", "\n", "# values = line.rstrip().split(' ')", "\n", "word", "=", "values", "[", "0", "]", "\n", "if", "word", "in", "accept", ":", "\n", "                ", "np_found", "=", "np", ".", "asarray", "(", "values", "[", "1", "]", ",", "dtype", "=", "'float32'", ")", "\n", "if", "first_dim", "==", "0", ":", "\n", "                    ", "first_dim", "=", "np_found", ".", "shape", "\n", "", "elif", "first_dim", "!=", "np_found", ".", "shape", ":", "\n", "                    ", "print", "(", "'================================'", ")", "\n", "print", "(", "'!!!WARNING WITH SHAPE, first shape '", ",", "first_dim", ",", "' current shape: '", ",", "np_found", ".", "shape", ",", "\n", "'  word: '", ",", "word", ")", "\n", "print", "(", "'!!!WARNING WITH SHAPE line: '", ",", "line", ")", "\n", "print", "(", "'!!!WARNING WITH SHAPE IGNORING THIS LINE IN THE EMBEDDINGS'", ")", "\n", "continue", "\n", "", "found", "[", "accept", "[", "word", "]", "]", "=", "np_found", "\n", "if", "file_found_out", "is", "not", "None", ":", "\n", "                    ", "file_found_out", ".", "write", "(", "line", ")", "\n", "# else:", "\n", "#     print('(kzaporoj 13/04/2021) NOT FOUND debugging: ', word)", "\n", "\n", "", "", "if", "word", "in", "backoff", ":", "\n", "                ", "backoff", "[", "word", "]", "=", "np", ".", "asarray", "(", "values", "[", "1", "]", ",", "dtype", "=", "'float32'", ")", "\n", "if", "file_found_out", "is", "not", "None", ":", "\n", "                    ", "file_found_out", ".", "write", "(", "line", ")", "\n", "# else:", "\n", "#     print('(kzaporoj 13/04/2021) not valid word debugging: ', line)", "\n", "", "", "", "", "file", ".", "close", "(", ")", "\n", "\n", "# BEGIN: code for debugging purposes only", "\n", "# for word, word_id in accept.items():", "\n", "#     if word_id not in found:", "\n", "#         print('the following embedding element not found: ', word)", "\n", "\n", "# END: code for debugging purposes only", "\n", "\n", "if", "file_found_out", "is", "not", "None", ":", "\n", "        ", "file_found_out", ".", "close", "(", ")", "\n", "\n", "", "all_embeddings", "=", "np", ".", "asarray", "(", "list", "(", "found", ".", "values", "(", ")", ")", ")", "\n", "print", "(", "'nr of lines in file: '", ",", "nr_lines_file", ")", "\n", "print", "(", "'shape of all_embeddings: '", ",", "all_embeddings", ".", "shape", ")", "\n", "embeddings_mean", "=", "np", ".", "mean", "(", "all_embeddings", ")", "\n", "embeddings_std", "=", "np", ".", "std", "(", "all_embeddings", ")", "\n", "\n", "# kzaporoj - in case of the mean and/or std come on nan", "\n", "if", "math", ".", "isnan", "(", "embeddings_mean", ")", ":", "\n", "        ", "embeddings_mean", "=", "0.0", "\n", "\n", "", "if", "math", ".", "isnan", "(", "embeddings_std", ")", ":", "\n", "        ", "embeddings_std", "=", "0.5", "\n", "\n", "", "embeddings", "=", "torch", ".", "FloatTensor", "(", "len", "(", "accept", ")", ",", "dim", ")", ".", "normal_", "(", "\n", "embeddings_mean", ",", "embeddings_std", "\n", ")", "\n", "for", "key", ",", "value", "in", "found", ".", "items", "(", ")", ":", "\n", "        ", "embeddings", "[", "key", "]", "=", "torch", ".", "FloatTensor", "(", "value", ")", "\n", "\n", "", "print", "(", "\"found: {} / {} = {}\"", ".", "format", "(", "len", "(", "found", ")", ",", "len", "(", "accept", ")", ",", "len", "(", "found", ")", "/", "len", "(", "accept", ")", ")", ")", "\n", "print", "(", "\"words/embedding entries randomly initialized:\"", ",", "len", "(", "accept", ")", "-", "len", "(", "found", ")", ")", "\n", "print", "(", "'the embeddings norm is: '", ",", "torch", ".", "linalg", ".", "norm", "(", "embeddings", ")", ")", "\n", "print", "(", "'the embeddings mean is: '", ",", "embeddings_mean", ")", "\n", "print", "(", "'the embeddings std is: '", ",", "embeddings_std", ")", "\n", "\n", "if", "debug", ":", "\n", "        ", "counter", "=", "0", "\n", "for", "word", "in", "accept", ".", "keys", "(", ")", ":", "\n", "            ", "if", "accept", "[", "word", "]", "not", "in", "found", ":", "\n", "                ", "print", "(", "\"no such pretrained word: {} ({})\"", ".", "format", "(", "word", ",", "counter", ")", ")", "\n", "counter", "+=", "1", "\n", "\n", "", "", "", "if", "backoff_to_lowercase", ":", "\n", "        ", "num_backoff", "=", "0", "\n", "for", "word", ",", "idx", "in", "accept", ".", "items", "(", ")", ":", "\n", "            ", "if", "word", "==", "'UNKNOWN'", ":", "\n", "                ", "continue", "\n", "", "if", "accept", "[", "word", "]", "not", "in", "found", ":", "\n", "                ", "if", "word", ".", "lower", "(", ")", "in", "backoff", "and", "backoff", "[", "word", ".", "lower", "(", ")", "]", "is", "not", "None", ":", "\n", "                    ", "print", "(", "\"backoff {} -> {}\"", ".", "format", "(", "word", ",", "word", ".", "lower", "(", ")", ")", ")", "\n", "embeddings", "[", "idx", ",", ":", "]", "=", "torch", ".", "FloatTensor", "(", "backoff", "[", "word", ".", "lower", "(", ")", "]", ")", "\n", "num_backoff", "+=", "1", "\n", "", "elif", "word", ".", "casefold", "(", ")", "in", "backoff", "and", "backoff", "[", "word", ".", "casefold", "(", ")", "]", "is", "not", "None", ":", "\n", "                    ", "print", "(", "\"casefold {} -> {}\"", ".", "format", "(", "word", ",", "word", ".", "lower", "(", ")", ")", ")", "\n", "embeddings", "[", "idx", ",", ":", "]", "=", "torch", ".", "FloatTensor", "(", "backoff", "[", "word", ".", "casefold", "(", ")", "]", ")", "\n", "num_backoff", "+=", "1", "\n", "", "", "", "print", "(", "\"num_backoff:\"", ",", "num_backoff", ")", "\n", "\n", "", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.wordvec.load_wordembeddings_words": [[244, 256], ["print", "file.close", "filename.endswith", "gzip.open", "open", "line.rstrip().split", "words.append", "line.rstrip"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.close"], ["", "def", "load_wordembeddings_words", "(", "filename", ")", ":", "\n", "    ", "words", "=", "[", "]", "\n", "\n", "print", "(", "\"loading words:\"", ",", "filename", ")", "\n", "file", "=", "gzip", ".", "open", "(", "filename", ",", "'rt'", ")", "if", "filename", ".", "endswith", "(", "'.gz'", ")", "else", "open", "(", "filename", ")", "\n", "for", "line", "in", "file", ":", "\n", "# Note: use split(' ') instead of split() if you get an error.", "\n", "        ", "values", "=", "line", ".", "rstrip", "(", ")", ".", "split", "(", "' '", ")", "\n", "words", ".", "append", "(", "values", "[", "0", "]", ")", "\n", "", "file", ".", "close", "(", ")", "\n", "\n", "return", "words", "\n", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.entityvec.load_entity_embeddings": [[98, 110], ["print", "file.close", "filename.endswith", "gzip.open", "open", "line.rstrip().split", "entities.append", "line.rstrip"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.close"], ["", "def", "load_entity_embeddings", "(", "filename", ")", ":", "\n", "    ", "entities", "=", "[", "]", "\n", "\n", "print", "(", "\"loading words:\"", ",", "filename", ")", "\n", "file", "=", "gzip", ".", "open", "(", "filename", ",", "'rt'", ")", "if", "filename", ".", "endswith", "(", "'.gz'", ")", "else", "open", "(", "filename", ")", "\n", "for", "line", "in", "file", ":", "\n", "# Note: use split(' ') instead of split() if you get an error.", "\n", "        ", "values", "=", "line", ".", "rstrip", "(", ")", ".", "split", "(", "' '", ")", "\n", "entities", ".", "append", "(", "values", "[", "0", "]", ")", "\n", "", "file", ".", "close", "(", ")", "\n", "\n", "return", "entities", "\n", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.entityvec.load_entity_embeddings_with_random_unknowns": [[33, 96], ["print", "file.close", "numpy.asarray", "float", "float", "math.isnan", "math.isnan", "torch.FloatTensor().normal_", "found.items", "print", "print", "print", "accept.items", "filename.endswith", "gzip.open", "open", "line.rstrip().split", "list", "numpy.mean", "numpy.std", "torch.FloatTensor", "accept.keys", "accept.items", "print", "numpy.asarray", "numpy.asarray", "found.values", "torch.FloatTensor", "len", "len", "len", "len", "line.rstrip", "len", "len", "len", "print", "x.lower", "x.casefold", "print", "torch.FloatTensor", "word.lower", "print", "torch.FloatTensor", "word.lower", "word.casefold", "word.lower", "word.lower", "word.lower", "word.casefold", "word.casefold"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.close", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "load_entity_embeddings_with_random_unknowns", "(", "filename", ",", "accept", "=", "{", "}", ",", "dim", "=", "300", ",", "debug", "=", "False", ",", "backoff_to_lowercase", "=", "False", ")", ":", "\n", "    ", "print", "(", "\"loading entity vectors:\"", ",", "filename", ")", "\n", "found", "=", "{", "}", "\n", "\n", "backoff", "=", "{", "}", "\n", "if", "backoff_to_lowercase", ":", "\n", "        ", "print", "(", "\"WARNING: backing off to lowercase\"", ")", "\n", "for", "x", ",", "idx", "in", "accept", ".", "items", "(", ")", ":", "\n", "            ", "backoff", "[", "x", ".", "lower", "(", ")", "]", "=", "None", "\n", "backoff", "[", "x", ".", "casefold", "(", ")", "]", "=", "None", "\n", "\n", "", "", "file", "=", "gzip", ".", "open", "(", "filename", ",", "'rt'", ")", "if", "filename", ".", "endswith", "(", "'.gz'", ")", "else", "open", "(", "filename", ")", "\n", "for", "line", "in", "file", ":", "\n", "        ", "values", "=", "line", ".", "rstrip", "(", ")", ".", "split", "(", "' '", ")", "\n", "word", "=", "values", "[", "0", "]", "\n", "if", "word", "in", "accept", ":", "\n", "            ", "found", "[", "accept", "[", "word", "]", "]", "=", "np", ".", "asarray", "(", "values", "[", "1", ":", "]", ",", "dtype", "=", "'float32'", ")", "\n", "", "if", "word", "in", "backoff", ":", "\n", "            ", "backoff", "[", "word", "]", "=", "np", ".", "asarray", "(", "values", "[", "1", ":", "]", ",", "dtype", "=", "'float32'", ")", "\n", "", "", "file", ".", "close", "(", ")", "\n", "\n", "all_embeddings", "=", "np", ".", "asarray", "(", "list", "(", "found", ".", "values", "(", ")", ")", ")", "\n", "embeddings_mean", "=", "float", "(", "np", ".", "mean", "(", "all_embeddings", ")", ")", "\n", "embeddings_std", "=", "float", "(", "np", ".", "std", "(", "all_embeddings", ")", ")", "\n", "\n", "# kzaporoj - in case of the mean and/or std come on nan", "\n", "if", "math", ".", "isnan", "(", "embeddings_mean", ")", ":", "\n", "        ", "embeddings_mean", "=", "0.0", "\n", "\n", "", "if", "math", ".", "isnan", "(", "embeddings_std", ")", ":", "\n", "        ", "embeddings_std", "=", "0.5", "\n", "\n", "", "embeddings", "=", "torch", ".", "FloatTensor", "(", "len", "(", "accept", ")", ",", "dim", ")", ".", "normal_", "(", "\n", "embeddings_mean", ",", "embeddings_std", "\n", ")", "\n", "for", "key", ",", "value", "in", "found", ".", "items", "(", ")", ":", "\n", "        ", "embeddings", "[", "key", "]", "=", "torch", ".", "FloatTensor", "(", "value", ")", "\n", "\n", "", "print", "(", "\"found: {} / {} = {}\"", ".", "format", "(", "len", "(", "found", ")", ",", "len", "(", "accept", ")", ",", "len", "(", "found", ")", "/", "len", "(", "accept", ")", ")", ")", "\n", "print", "(", "\"entities randomly initialized:\"", ",", "len", "(", "accept", ")", "-", "len", "(", "found", ")", ")", "\n", "\n", "if", "debug", ":", "\n", "        ", "counter", "=", "0", "\n", "for", "word", "in", "accept", ".", "keys", "(", ")", ":", "\n", "            ", "if", "accept", "[", "word", "]", "not", "in", "found", ":", "\n", "                ", "print", "(", "\"no such pretrained word: {} ({})\"", ".", "format", "(", "word", ",", "counter", ")", ")", "\n", "counter", "+=", "1", "\n", "\n", "", "", "", "if", "backoff_to_lowercase", ":", "\n", "        ", "num_backoff", "=", "0", "\n", "for", "word", ",", "idx", "in", "accept", ".", "items", "(", ")", ":", "\n", "            ", "if", "accept", "[", "word", "]", "not", "in", "found", ":", "\n", "                ", "if", "word", ".", "lower", "(", ")", "in", "backoff", "and", "backoff", "[", "word", ".", "lower", "(", ")", "]", "is", "not", "None", ":", "\n", "                    ", "print", "(", "\"backoff {} -> {}\"", ".", "format", "(", "word", ",", "word", ".", "lower", "(", ")", ")", ")", "\n", "embeddings", "[", "idx", ",", ":", "]", "=", "torch", ".", "FloatTensor", "(", "backoff", "[", "word", ".", "lower", "(", ")", "]", ")", "\n", "num_backoff", "+=", "1", "\n", "", "elif", "word", ".", "casefold", "(", ")", "in", "backoff", "and", "backoff", "[", "word", ".", "casefold", "(", ")", "]", "is", "not", "None", ":", "\n", "                    ", "print", "(", "\"casefold {} -> {}\"", ".", "format", "(", "word", ",", "word", ".", "lower", "(", ")", ")", ")", "\n", "embeddings", "[", "idx", ",", ":", "]", "=", "torch", ".", "FloatTensor", "(", "backoff", "[", "word", ".", "casefold", "(", ")", "]", ")", "\n", "num_backoff", "+=", "1", "\n", "", "", "", "print", "(", "\"num_backoff:\"", ",", "num_backoff", ")", "\n", "\n", "", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dataset.create_datasets": [[13, 123], ["print", "list", "int", "random.seed", "random.shuffle", "datass.stream2.SubsetDataset", "datass.stream2.SubsetDataset", "[].items", "datass.transform.create_data_transformer2", "datasets.values", "datasets.values", "cpn.data_reader.DatasetCPN", "range", "int", "int", "print", "print", "print", "torch.utils.data.ConcatDataset", "transformer.initialize", "transformer.transform", "config[].items", "cpn.data_reader_bert.DatasetDWIESpanBert", "BaseException", "len", "len", "[].get", "random.seed", "random.shuffle", "indices_train.sort", "indices_test.sort", "datass.stream2.SubsetDataset", "datass.stream2.SubsetDataset", "list", "random.seed", "random.shuffle", "datass.stream2.SubsetDataset", "datass.stream2.SubsetDataset", "open", "json.dump", "open", "json.dump", "config[].items", "cpn.data_reader_bert_hoi.DatasetDWIESpanBertHoi", "open", "int", "int", "range", "len", "len", "len", "config[].items", "x.rstrip().split", "range", "range", "flatten", "flatten", "len", "f.readlines", "len", "len", "range", "range", "x.rstrip", "len", "len", "len", "x.rstrip"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.transform.create_data_transformer2", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.transform.TransformFixSpans.initialize", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.transform.TransformFixSpans.transform", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.bert_preprocessing.flatten", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.bert_preprocessing.flatten"], ["def", "create_datasets", "(", "config", ",", "dictionaries", ",", "default_fold", ",", "linking_candidates", "=", "None", ")", ":", "\n", "# kzaporoj - commented out this part", "\n", "# if config['dataloader']['type'] == 'stream2':", "\n", "#     datasets = {name: Stream2Dataset(name, value, config['dataloader'], dictionaries) for name, value in config['datasets'].items()}", "\n", "# elif config['dataloader']['type'] == 'binary':", "\n", "#     datasets = {name: StreamBinary(value, {'tokens': dictionaries['words'], 'targets': dictionaries['entities']}) for name, value in config['datasets'].items()}", "\n", "# elif config['dataloader']['type'] == 'text':", "\n", "#     datasets = {name: TextDataset(value, config['dataloader'], dictionaries) for name, value in config['datasets'].items()}", "\n", "# elif config['dataloader']['type'] == 'indexed-text':", "\n", "#     datasets = {name: IndexedTextDataset(value, config['dataloader'], dictionaries) for name, value in config['datasets'].items()}", "\n", "# elif config['dataloader']['type'] == 'tcm':", "\n", "#     datasets = {name: TCMDataset(value, config['dataloader'], dictionaries) for name, value in config['datasets'].items()}", "\n", "\n", "    ", "if", "config", "[", "'dataloader'", "]", "[", "'type'", "]", "==", "'cpn'", ":", "\n", "        ", "datasets", "=", "{", "name", ":", "DatasetCPN", "(", "name", ",", "{", "'dataset'", ":", "value", ",", "\n", "'model'", ":", "config", "[", "'model'", "]", ",", "\n", "'dataloader'", ":", "config", "[", "'dataloader'", "]", "\n", "}", ",", "dictionaries", ",", "linking_candidates", ")", "\n", "for", "name", ",", "value", "in", "config", "[", "'datasets'", "]", ".", "items", "(", ")", "}", "\n", "", "elif", "config", "[", "'dataloader'", "]", "[", "'type'", "]", "==", "'dwie_spanbert'", ":", "\n", "        ", "datasets", "=", "{", "name", ":", "DatasetDWIESpanBert", "(", "name", ",", "{", "'dataset'", ":", "value", ",", "\n", "'model'", ":", "config", "[", "'model'", "]", ",", "\n", "'dataloader'", ":", "config", "[", "'dataloader'", "]", "\n", "}", ",", "dictionaries", ",", "linking_candidates", ")", "\n", "for", "name", ",", "value", "in", "config", "[", "'datasets'", "]", ".", "items", "(", ")", "}", "\n", "", "elif", "config", "[", "'dataloader'", "]", "[", "'type'", "]", "==", "'dwie_spanbert_hoi'", ":", "\n", "        ", "datasets", "=", "{", "name", ":", "DatasetDWIESpanBertHoi", "(", "name", ",", "{", "'dataset'", ":", "value", ",", "\n", "'model'", ":", "config", "[", "'model'", "]", ",", "\n", "'dataloader'", ":", "config", "[", "'dataloader'", "]", ",", "\n", "'output_config'", ":", "config", "[", "'output_config'", "]", "\n", "}", ",", "dictionaries", ",", "linking_candidates", ")", "\n", "for", "name", ",", "value", "in", "config", "[", "'datasets'", "]", ".", "items", "(", ")", "}", "\n", "", "else", ":", "\n", "        ", "raise", "BaseException", "(", "\"no such data loader:\"", ",", "config", "[", "'dataloader'", "]", ")", "\n", "\n", "", "if", "'split'", "in", "config", "[", "'trainer'", "]", ":", "\n", "        ", "name", "=", "config", "[", "'trainer'", "]", "[", "'split'", "]", "[", "'dataset'", "]", "\n", "print", "(", "\"WARNING: splitting {} into train, test\"", ".", "format", "(", "name", ")", ")", "\n", "all", "=", "datasets", "[", "name", "]", "\n", "indices", "=", "list", "(", "range", "(", "len", "(", "all", ")", ")", ")", "\n", "mid", "=", "int", "(", "len", "(", "indices", ")", "*", "config", "[", "'trainer'", "]", "[", "'split'", "]", "[", "'ratio'", "]", ")", "\n", "random", ".", "seed", "(", "2018", ")", "\n", "random", ".", "shuffle", "(", "indices", ")", "\n", "datasets", "[", "'train'", "]", "=", "SubsetDataset", "(", "all", ",", "indices", "[", "0", ":", "mid", "]", ")", "\n", "datasets", "[", "'test'", "]", "=", "SubsetDataset", "(", "all", ",", "indices", "[", "mid", ":", "]", ")", "\n", "", "elif", "'cv'", "in", "config", "[", "'trainer'", "]", ":", "\n", "        ", "all", "=", "datasets", "[", "config", "[", "'trainer'", "]", "[", "'cv'", "]", "[", "'dataset'", "]", "]", "\n", "del", "datasets", "[", "config", "[", "'trainer'", "]", "[", "'cv'", "]", "[", "'dataset'", "]", "]", "\n", "fold", "=", "int", "(", "config", "[", "'trainer'", "]", "[", "'cv'", "]", ".", "get", "(", "'fold'", ",", "default_fold", ")", ")", "\n", "folds", "=", "int", "(", "config", "[", "'trainer'", "]", "[", "'cv'", "]", "[", "'folds'", "]", ")", "\n", "\n", "cv_train_name", "=", "'cv-train'", "\n", "cv_test_name", "=", "'cv-test'", "\n", "\n", "print", "(", "\"Fold {}/{}\"", ".", "format", "(", "fold", ",", "folds", ")", ")", "\n", "if", "'groupfile'", "in", "config", "[", "'trainer'", "]", "[", "'cv'", "]", ":", "\n", "            ", "with", "open", "(", "config", "[", "'trainer'", "]", "[", "'cv'", "]", "[", "'groupfile'", "]", ")", "as", "f", ":", "\n", "                ", "groups", "=", "[", "x", ".", "rstrip", "(", ")", ".", "split", "(", "','", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "if", "len", "(", "x", ".", "rstrip", "(", ")", ")", ">", "0", "]", "\n", "", "random", ".", "seed", "(", "2018", ")", "\n", "random", ".", "shuffle", "(", "groups", ")", "\n", "groups_train", "=", "[", "groups", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "groups", ")", ")", "if", "i", "%", "folds", "!=", "fold", "]", "\n", "groups_test", "=", "[", "groups", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "groups", ")", ")", "if", "i", "%", "folds", "==", "fold", "]", "\n", "# make it lists flat", "\n", "flatten", "=", "lambda", "l", ":", "[", "item", "for", "sublist", "in", "l", "for", "item", "in", "sublist", "]", "\n", "indices_train", "=", "[", "int", "(", "x", ")", "for", "x", "in", "flatten", "(", "groups_train", ")", "]", "\n", "indices_test", "=", "[", "int", "(", "x", ")", "for", "x", "in", "flatten", "(", "groups_test", ")", "]", "\n", "indices_train", ".", "sort", "(", ")", "\n", "indices_test", ".", "sort", "(", ")", "\n", "datasets", "[", "cv_train_name", "]", "=", "SubsetDataset", "(", "cv_train_name", ",", "all", ",", "indices_train", ")", "\n", "datasets", "[", "cv_test_name", "]", "=", "SubsetDataset", "(", "cv_test_name", ",", "all", ",", "indices_test", ")", "\n", "", "else", ":", "\n", "            ", "indices", "=", "list", "(", "range", "(", "len", "(", "all", ")", ")", ")", "\n", "random", ".", "seed", "(", "2018", ")", "\n", "random", ".", "shuffle", "(", "indices", ")", "\n", "datasets", "[", "cv_train_name", "]", "=", "SubsetDataset", "(", "cv_train_name", ",", "all", ",", "\n", "[", "indices", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "indices", ")", ")", "if", "i", "%", "folds", "!=", "fold", "]", ")", "\n", "datasets", "[", "cv_test_name", "]", "=", "SubsetDataset", "(", "cv_test_name", ",", "all", ",", "\n", "[", "indices", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "indices", ")", ")", "if", "i", "%", "folds", "==", "fold", "]", ")", "\n", "\n", "", "print", "(", "\"CV({}) {} -> {},{}\"", ".", "format", "(", "fold", ",", "len", "(", "all", ")", ",", "len", "(", "datasets", "[", "cv_train_name", "]", ")", ",", "len", "(", "datasets", "[", "cv_test_name", "]", ")", ")", ")", "\n", "\n", "with", "open", "(", "'{}/traindocs.json'", ".", "format", "(", "config", "[", "'path'", "]", ")", ",", "'w'", ")", "as", "file", ":", "\n", "            ", "json", ".", "dump", "(", "datasets", "[", "cv_train_name", "]", ".", "indices", ",", "file", ")", "\n", "", "with", "open", "(", "'{}/testdocs.json'", ".", "format", "(", "config", "[", "'path'", "]", ")", ",", "'w'", ")", "as", "file", ":", "\n", "            ", "json", ".", "dump", "(", "datasets", "[", "cv_test_name", "]", ".", "indices", ",", "file", ")", "\n", "\n", "", "", "if", "'concat'", "in", "config", "[", "'trainer'", "]", ":", "\n", "        ", "for", "key", ",", "names", "in", "config", "[", "'trainer'", "]", "[", "'concat'", "]", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "\"CONCAT\"", ",", "key", ",", "names", ")", "\n", "datasets", "[", "key", "]", "=", "ConcatDataset", "(", "[", "datasets", "[", "name", "]", "for", "name", "in", "names", "]", ")", "\n", "\n", "", "", "if", "'train'", "in", "config", "[", "'trainer'", "]", ":", "\n", "        ", "train", "=", "datasets", "[", "config", "[", "'trainer'", "]", "[", "'train'", "]", "]", "\n", "train", ".", "train", "=", "True", "\n", "", "else", ":", "\n", "        ", "train", "=", "None", "\n", "\n", "", "evaluate", "=", "config", "[", "'trainer'", "]", "[", "'evaluate'", "]", "\n", "\n", "transformers", "=", "[", "create_data_transformer2", "(", "cfg", ",", "dictionaries", ")", "for", "cfg", "in", "config", "[", "'dataloader'", "]", "[", "'transformers-x'", "]", "]", "\n", "\n", "for", "transformer", "in", "transformers", ":", "\n", "        ", "for", "stream", "in", "datasets", ".", "values", "(", ")", ":", "\n", "            ", "transformer", ".", "initialize", "(", "stream", ")", "\n", "\n", "", "", "for", "transformer", "in", "transformers", ":", "\n", "        ", "for", "stream", "in", "datasets", ".", "values", "(", ")", ":", "\n", "            ", "transformer", ".", "transform", "(", "stream", ")", "\n", "\n", "", "", "return", "datasets", ",", "train", ",", "evaluate", "\n", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.transform.Transform.initialize": [[35, 37], ["BaseException"], "methods", ["None"], ["    ", "def", "initialize", "(", "self", ",", "stream2", ")", ":", "\n", "        ", "raise", "BaseException", "(", "\"NOT IMPLEMENTED\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.transform.Transform.transform": [[38, 40], ["BaseException"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "stream2", ")", ":", "\n", "        ", "raise", "BaseException", "(", "\"NOT IMPLEMENTED\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.transform.TranformTokenize.__init__": [[44, 47], ["cpn.tokenizer.TokenizerCPN"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "self", ".", "field_input", "=", "config", "[", "'input'", "]", "\n", "self", ".", "tokenizer", "=", "TokenizerCPN", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.transform.TranformTokenize.initialize": [[48, 50], ["None"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "stream2", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.transform.TranformTokenize.transform": [[51, 63], ["print", "enumerate", "transform.TranformTokenize.tokenizer.tokenize", "torch.IntTensor", "torch.IntTensor"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.tokenization.WordpieceTokenizer.tokenize"], ["", "def", "transform", "(", "self", ",", "stream2", ")", ":", "\n", "        ", "print", "(", "\"RUN TranformTokenize\"", ")", "\n", "for", "i", ",", "instance", "in", "enumerate", "(", "stream2", ".", "data", ")", ":", "\n", "            ", "instance", "[", "'old_begin'", "]", "=", "instance", "[", "'begin'", "]", "\n", "instance", "[", "'old_end'", "]", "=", "instance", "[", "'end'", "]", "\n", "\n", "text", "=", "instance", "[", "self", ".", "field_input", "]", "\n", "tokens", "=", "self", ".", "tokenizer", ".", "tokenize", "(", "text", ")", "\n", "instance", "[", "'tokens'", "]", "=", "[", "x", "[", "'token'", "]", "for", "x", "in", "tokens", "]", "\n", "instance", "[", "'begin'", "]", "=", "torch", ".", "IntTensor", "(", "[", "x", "[", "'offset'", "]", "for", "x", "in", "tokens", "]", ")", "\n", "instance", "[", "'end'", "]", "=", "torch", ".", "IntTensor", "(", "[", "x", "[", "'offset'", "]", "+", "x", "[", "'length'", "]", "for", "x", "in", "tokens", "]", ")", "\n", "instance", "[", "'text'", "]", "=", "instance", "[", "'tokens'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.transform.TranformTokenIndices.__init__": [[76, 79], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "self", ".", "field_input", "=", "config", "[", "'input'", "]", "\n", "self", ".", "field_output", "=", "config", "[", "'output'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.transform.TranformTokenIndices.initialize": [[80, 82], ["None"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "stream2", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.transform.TranformTokenIndices.transform": [[83, 88], ["print", "enumerate", "torch.LongTensor", "transform.get_token_buckets"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.transform.get_token_buckets"], ["", "def", "transform", "(", "self", ",", "stream2", ")", ":", "\n", "        ", "print", "(", "\"RUN TranformTokenIndices\"", ")", "\n", "for", "i", ",", "instance", "in", "enumerate", "(", "stream2", ".", "data", ")", ":", "\n", "            ", "tokens", "=", "instance", "[", "self", ".", "field_input", "]", "\n", "instance", "[", "self", ".", "field_output", "]", "=", "torch", ".", "LongTensor", "(", "get_token_buckets", "(", "tokens", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.transform.TranformLookupTokens.__init__": [[92, 97], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "dictionaries", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "self", ".", "field_input", "=", "config", "[", "'input'", "]", "\n", "self", ".", "field_output", "=", "config", "[", "'output'", "]", "\n", "self", ".", "dictionary", "=", "dictionaries", "[", "config", "[", "'dict'", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.transform.TranformLookupTokens.initialize": [[98, 100], ["None"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "stream2", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.transform.TranformLookupTokens.transform": [[101, 108], ["print", "enumerate", "print", "torch.LongTensor", "transform.TranformLookupTokens.dictionary.lookup"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup"], ["", "def", "transform", "(", "self", ",", "stream2", ")", ":", "\n", "        ", "print", "(", "\"RUN TranformLookupTokens:\"", ",", "self", ".", "config", ")", "\n", "old_size", "=", "self", ".", "dictionary", ".", "size", "\n", "for", "i", ",", "instance", "in", "enumerate", "(", "stream2", ".", "data", ")", ":", "\n", "            ", "instance", "[", "self", ".", "field_output", "]", "=", "torch", ".", "LongTensor", "(", "\n", "[", "self", ".", "dictionary", ".", "lookup", "(", "x", ")", "for", "x", "in", "instance", "[", "self", ".", "field_input", "]", "]", ")", "\n", "", "print", "(", "\"new tokens added to dictionary:\"", ",", "self", ".", "dictionary", ".", "size", "-", "old_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.transform.TransformSeqlabelsToMultitags.__init__": [[112, 116], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "dictionaries", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "self", ".", "field", "=", "config", "[", "'field'", "]", "\n", "self", ".", "dictionary", "=", "dictionaries", "[", "config", "[", "'dict'", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.transform.TransformSeqlabelsToMultitags.initialize": [[117, 124], ["print", "enumerate", "transform.TransformSeqlabelsToMultitags.dictionary.lookup"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup"], ["", "def", "initialize", "(", "self", ",", "stream2", ")", ":", "\n", "        ", "print", "(", "\"INIT transform_seqlabels_multi_tags:\"", ",", "self", ".", "config", ")", "\n", "\n", "# add labels to dictionary", "\n", "for", "i", ",", "instance", "in", "enumerate", "(", "stream2", ".", "data", ")", ":", "\n", "            ", "for", "labels", "in", "instance", "[", "self", ".", "field", "]", ":", "\n", "                ", "[", "self", ".", "dictionary", ".", "lookup", "(", "x", ")", "for", "x", "in", "labels", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.transform.TransformSeqlabelsToMultitags.transform": [[125, 134], ["print", "enumerate", "len", "numpy.zeros", "enumerate", "torch.FloatTensor", "transform.TransformSeqlabelsToMultitags.dictionary.lookup"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup"], ["", "", "", "def", "transform", "(", "self", ",", "stream2", ")", ":", "\n", "        ", "print", "(", "\"RUN transform_seqlabels_multi_tags:\"", ",", "self", ".", "config", ",", "\"labels=\"", ",", "self", ".", "dictionary", ".", "size", ")", "\n", "for", "i", ",", "instance", "in", "enumerate", "(", "stream2", ".", "data", ")", ":", "\n", "            ", "length", "=", "len", "(", "instance", "[", "self", ".", "field", "]", ")", "\n", "array", "=", "np", ".", "zeros", "(", "(", "length", ",", "self", ".", "dictionary", ".", "size", ")", ")", "\n", "for", "pos", ",", "labels", "in", "enumerate", "(", "instance", "[", "self", ".", "field", "]", ")", ":", "\n", "                ", "idx", "=", "[", "self", ".", "dictionary", ".", "lookup", "(", "x", ")", "for", "x", "in", "labels", "]", "\n", "array", "[", "pos", ",", "idx", "]", "=", "1", "\n", "", "instance", "[", "self", ".", "field", "]", "=", "torch", ".", "FloatTensor", "(", "array", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.transform.TransformSpansToTensors.__init__": [[138, 143], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "dictionaries", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "self", ".", "field", "=", "config", "[", "'field'", "]", "\n", "self", ".", "dictionary", "=", "dictionaries", "[", "config", "[", "'dict'", "]", "]", "\n", "self", ".", "output", "=", "config", "[", "'output'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.transform.TransformSpansToTensors.initialize": [[144, 148], ["transform.TransformSpansToTensors.dictionary.lookup"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup"], ["", "def", "initialize", "(", "self", ",", "stream2", ")", ":", "\n", "        ", "for", "instance", "in", "stream2", ".", "data", ":", "\n", "            ", "[", "self", ".", "dictionary", ".", "lookup", "(", "tag", ")", "for", "_", ",", "_", ",", "tag", "in", "instance", "[", "self", ".", "field", "]", "]", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.transform.TransformSpansToTensors.transform": [[149, 158], ["enumerate", "torch.zeros", "transform.TransformSpansToTensors.dictionary.lookup"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup"], ["", "def", "transform", "(", "self", ",", "stream2", ")", ":", "\n", "        ", "for", "i", ",", "instance", "in", "enumerate", "(", "stream2", ".", "data", ")", ":", "\n", "            ", "span2tensor", "=", "{", "}", "\n", "for", "begin", ",", "end", ",", "tag", "in", "instance", "[", "self", ".", "field", "]", ":", "\n", "                ", "key", "=", "(", "begin", ",", "end", ")", "\n", "if", "key", "not", "in", "span2tensor", ":", "\n", "                    ", "span2tensor", "[", "key", "]", "=", "torch", ".", "zeros", "(", "self", ".", "dictionary", ".", "size", ")", "\n", "", "span2tensor", "[", "key", "]", "[", "self", ".", "dictionary", ".", "lookup", "(", "tag", ")", "]", "=", "1.0", "\n", "", "instance", "[", "self", ".", "output", "]", "=", "span2tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.transform.TransformLookupSpans.__init__": [[162, 166], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "dictionaries", ")", ":", "\n", "        ", "self", ".", "field", "=", "config", "[", "'field'", "]", "\n", "self", ".", "dictionary", "=", "dictionaries", "[", "config", "[", "'dict'", "]", "]", "\n", "self", ".", "output", "=", "config", "[", "'output'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.transform.TransformLookupSpans.initialize": [[167, 169], ["None"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "stream2", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.transform.TransformLookupSpans.transform": [[170, 174], ["enumerate", "transform.TransformLookupSpans.dictionary.lookup"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup"], ["", "def", "transform", "(", "self", ",", "stream2", ")", ":", "\n", "        ", "for", "i", ",", "instance", "in", "enumerate", "(", "stream2", ".", "data", ")", ":", "\n", "            ", "instance", "[", "self", ".", "output", "]", "=", "[", "(", "start", ",", "end", ",", "self", ".", "dictionary", ".", "lookup", "(", "label", ")", ")", "for", "start", ",", "end", ",", "label", "in", "\n", "instance", "[", "self", ".", "field", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.transform.TransformCharacters.__init__": [[178, 189], ["config.get", "set", "collections.Counter", "len"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "dictionaries", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "self", ".", "field_input", "=", "config", "[", "'input'", "]", "\n", "self", ".", "field_output", "=", "config", "[", "'output'", "]", "\n", "self", ".", "dictionary", "=", "dictionaries", "[", "config", "[", "'dict'", "]", "]", "\n", "self", ".", "threshold", "=", "config", "[", "'threshold'", "]", "\n", "self", ".", "padding", "=", "config", "[", "'padding'", "]", "\n", "self", ".", "debug", "=", "config", ".", "get", "(", "'debug'", ",", "False", ")", "\n", "\n", "self", ".", "fit", "=", "set", "(", "config", "[", "'fit'", "]", ")", "\n", "self", ".", "counter", "=", "Counter", "(", ")", "if", "len", "(", "self", ".", "fit", ")", ">", "0", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.transform.TransformCharacters.initialize": [[190, 196], ["print", "transform.TransformCharacters.process", "transform.TransformCharacters.counter.update"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.transform.TransformCharacters.process", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.update"], ["", "def", "initialize", "(", "self", ",", "stream2", ")", ":", "\n", "        ", "if", "stream2", ".", "name", "in", "self", ".", "fit", ":", "\n", "            ", "print", "(", "\"TransformCharacters: count characters on {}\"", ".", "format", "(", "stream2", ".", "name", ")", ")", "\n", "for", "instance", "in", "stream2", ".", "data", ":", "\n", "                ", "for", "chars", "in", "self", ".", "process", "(", "instance", "[", "self", ".", "field_input", "]", ")", ":", "\n", "                    ", "self", ".", "counter", ".", "update", "(", "chars", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.transform.TransformCharacters.initialized": [[197, 214], ["transform.TransformCharacters.dictionary.tolist", "transform.TransformCharacters.counter.items", "transform.TransformCharacters.dictionary.clear", "transform.TransformCharacters.dictionary.add", "transform.TransformCharacters.dictionary.add", "print", "chars.append"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricF1.clear", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "", "", "", "def", "initialized", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "counter", "is", "not", "None", ":", "\n", "            ", "chars", "=", "[", "]", "\n", "items", "=", "self", ".", "dictionary", ".", "tolist", "(", ")", "\n", "for", "ch", ",", "count", "in", "self", ".", "counter", ".", "items", "(", ")", ":", "\n", "                ", "if", "self", ".", "debug", ":", "\n", "                    ", "print", "(", "\"CHAR\"", ",", "ch", ",", "\": \"", ",", "count", ")", "\n", "", "if", "count", ">=", "self", ".", "threshold", ":", "\n", "                    ", "chars", ".", "append", "(", "items", "[", "ch", "]", ")", "\n", "\n", "", "", "self", ".", "dictionary", ".", "clear", "(", ")", "\n", "self", ".", "dictionary", ".", "add", "(", "self", ".", "padding", ")", "\n", "for", "ch", "in", "chars", ":", "\n", "                ", "self", ".", "dictionary", ".", "add", "(", "ch", ")", "\n", "", "self", ".", "dictionary", ".", "update", "=", "False", "\n", "\n", "self", ".", "counter", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.transform.TransformCharacters.transform": [[215, 220], ["transform.TransformCharacters.initialized", "enumerate", "transform.TransformCharacters.process"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.transform.TransformCharacters.initialized", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.transform.TransformCharacters.process"], ["", "", "def", "transform", "(", "self", ",", "stream2", ")", ":", "\n", "        ", "self", ".", "initialized", "(", ")", "\n", "\n", "for", "i", ",", "instance", "in", "enumerate", "(", "stream2", ".", "data", ")", ":", "\n", "            ", "instance", "[", "self", ".", "field_output", "]", "=", "self", ".", "process", "(", "instance", "[", "self", ".", "field_input", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.transform.TransformCharacters.process": [[221, 227], ["output.append", "transform.TransformCharacters.dictionary.lookup"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup"], ["", "", "def", "process", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "output", "=", "[", "]", "\n", "for", "token", "in", "tokens", ":", "\n", "            ", "token", "=", "'<'", "+", "token", "+", "'>'", "\n", "output", ".", "append", "(", "[", "self", ".", "dictionary", ".", "lookup", "(", "c", ")", "for", "c", "in", "token", "]", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.transform.TransformFixSpans.__init__": [[232, 234], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "dictionaries", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.transform.TransformFixSpans.initialize": [[235, 237], ["None"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "stream2", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.transform.TransformFixSpans.transform": [[238, 266], ["enumerate", "instance[].tolist", "instance[].tolist", "enumerate", "enumerate", "new_begin.get", "new_end.get", "new_begin.get", "new_end.get", "instance[].tolist", "instance[].tolist"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist"], ["", "def", "transform", "(", "self", ",", "stream2", ")", ":", "\n", "        ", "for", "i", ",", "instance", "in", "enumerate", "(", "stream2", ".", "data", ")", ":", "\n", "            ", "old_begin", "=", "instance", "[", "'old_begin'", "]", ".", "tolist", "(", ")", "\n", "old_end", "=", "instance", "[", "'old_end'", "]", ".", "tolist", "(", ")", "\n", "new_begin", "=", "{", "pos", ":", "idx", "for", "idx", ",", "pos", "in", "enumerate", "(", "instance", "[", "'begin'", "]", ".", "tolist", "(", ")", ")", "}", "\n", "new_end", "=", "{", "pos", ":", "idx", "for", "idx", ",", "pos", "in", "enumerate", "(", "instance", "[", "'end'", "]", ".", "tolist", "(", ")", ")", "}", "\n", "\n", "instance", "[", "'spans'", "]", "=", "[", "(", "new_begin", ".", "get", "(", "old_begin", "[", "begin", "]", ",", "-", "1", ")", ",", "new_end", ".", "get", "(", "old_end", "[", "end", "]", ",", "-", "1", ")", ")", "for", "begin", ",", "end", "in", "\n", "instance", "[", "'spans'", "]", "]", "\n", "instance", "[", "'gold_tags_indices'", "]", "=", "[", "(", "new_begin", ".", "get", "(", "old_begin", "[", "begin", "]", ",", "-", "1", ")", ",", "new_end", ".", "get", "(", "old_end", "[", "end", "]", ",", "-", "1", ")", ",", "l", ")", "for", "\n", "begin", ",", "end", ",", "l", "in", "instance", "[", "'gold_tags_indices'", "]", "]", "\n", "instance", "[", "'gold_tags_indices'", "]", "=", "[", "(", "b", ",", "e", ",", "l", ")", "if", "b", ">=", "0", "and", "e", ">=", "0", "else", "(", "0", ",", "1000", ",", "l", ")", "for", "b", ",", "e", ",", "l", "in", "\n", "instance", "[", "'gold_tags_indices'", "]", "]", "\n", "\n", "# print('gold_tags_indices:', instance['gold_tags_indices'])", "\n", "# print('mention2concept:', instance['mention2concept'])", "\n", "# print('clusters:', instance['clusters'])", "\n", "\n", "del", "instance", "[", "'tags'", "]", "\n", "del", "instance", "[", "'tagspans'", "]", "\n", "del", "instance", "[", "'tags-x'", "]", "\n", "del", "instance", "[", "'auto'", "]", "\n", "del", "instance", "[", "'autospans'", "]", "\n", "del", "instance", "[", "'token2mention'", "]", "\n", "# del instance['mention2concept']", "\n", "del", "instance", "[", "'coref'", "]", "\n", "# del instance['clusters']", "\n", "del", "instance", "[", "'tags_target'", "]", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.transform.create_data_transformer2": [[10, 13], ["BaseException"], "function", ["None"], ["def", "create_data_transformer2", "(", "config", ",", "dictionaries", ")", ":", "\n", "# kzaporoj - no transformer so far, lets see if errors arise", "\n", "    ", "raise", "BaseException", "(", "\"no such data transformer:\"", ",", "config", ")", "\n", "# if config['type'] == 'tokenize':", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.transform.get_token_buckets": [[65, 72], ["token.lower.lower", "len", "token.lower.lower"], "function", ["None"], ["", "", "", "def", "get_token_buckets", "(", "tokens", ")", ":", "\n", "    ", "token2idx", "=", "{", "}", "\n", "for", "token", "in", "tokens", ":", "\n", "        ", "token", "=", "token", ".", "lower", "(", ")", "\n", "if", "token", "not", "in", "token2idx", ":", "\n", "            ", "token2idx", "[", "token", "]", "=", "len", "(", "token2idx", ")", "\n", "", "", "return", "[", "token2idx", "[", "token", ".", "lower", "(", ")", "]", "for", "token", "in", "tokens", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile.LineFileWriter.__init__": [[34, 42], ["open", "open", "linefile._write_int32", "linefile._write_int64", "linefile._write_int64"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile._write_int32", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile._write_int64", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile._write_int64"], ["    ", "def", "__init__", "(", "self", ",", "filename", ")", ":", "\n", "        ", "self", ".", "file_dat", "=", "open", "(", "filename", "+", "'.dat'", ",", "'wb'", ")", "\n", "self", ".", "file_idx", "=", "open", "(", "filename", "+", "'.idx'", ",", "'wb'", ")", "\n", "self", ".", "offset", "=", "4", "+", "8", "\n", "self", ".", "num", "=", "0", "\n", "_write_int32", "(", "self", ".", "file_dat", ",", "2020", ")", "# magic number", "\n", "_write_int64", "(", "self", ".", "file_dat", ",", "self", ".", "num", ")", "# number of items", "\n", "_write_int64", "(", "self", ".", "file_idx", ",", "self", ".", "offset", ")", "# first entry", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile.LineFileWriter.write": [[43, 48], ["linefile._write_string", "linefile._write_int64"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile._write_string", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile._write_int64"], ["", "def", "write", "(", "self", ",", "line", ")", ":", "\n", "        ", "self", ".", "offset", "+=", "_write_string", "(", "self", ".", "file_dat", ",", "line", ")", "\n", "_write_int64", "(", "self", ".", "file_idx", ",", "self", ".", "offset", ")", "\n", "self", ".", "num", "+=", "1", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile.LineFileWriter.close": [[49, 57], ["linefile.LineFileWriter.file_dat.seek", "linefile._write_int64", "linefile.LineFileWriter.file_dat.close", "linefile.LineFileWriter.file_idx.close"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile._write_int64", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.close", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "file_dat", ".", "seek", "(", "4", ")", "\n", "_write_int64", "(", "self", ".", "file_dat", ",", "self", ".", "num", ")", "\n", "\n", "self", ".", "file_dat", ".", "close", "(", ")", "\n", "self", ".", "file_dat", "=", "None", "\n", "self", ".", "file_idx", ".", "close", "(", ")", "\n", "self", ".", "file_idx", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile.LineFileWriter.convert": [[58, 66], ["print", "linefile.LineFileWriter", "linefile.LineFileWriter.close", "open", "file.readlines", "linefile.LineFileWriter.write"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.close", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.write"], ["", "@", "staticmethod", "\n", "def", "convert", "(", "output_file", ",", "input_file", ")", ":", "\n", "        ", "print", "(", "\"Convert {} to {}\"", ".", "format", "(", "input_file", ",", "output_file", ")", ")", "\n", "writer", "=", "LineFileWriter", "(", "output_file", ")", "\n", "with", "open", "(", "input_file", ",", "'r'", ")", "as", "file", ":", "\n", "            ", "for", "line", "in", "file", ".", "readlines", "(", ")", ":", "\n", "                ", "writer", ".", "write", "(", "line", ")", "\n", "", "", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile.LineFileReader.__init__": [[69, 74], ["open", "open", "linefile.LineFileReader.file_dat.seek", "linefile._read_int64"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile._read_int64"], ["    ", "def", "__init__", "(", "self", ",", "filename", ")", ":", "\n", "        ", "self", ".", "file_dat", "=", "open", "(", "filename", "+", "'.dat'", ",", "'rb'", ")", "\n", "self", ".", "file_idx", "=", "open", "(", "filename", "+", "'.idx'", ",", "'rb'", ")", "\n", "self", ".", "file_dat", ".", "seek", "(", "4", ")", "\n", "self", ".", "size", "=", "_read_int64", "(", "self", ".", "file_dat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile.LineFileReader.read": [[75, 80], ["linefile.LineFileReader.file_idx.seek", "linefile._read_int64", "linefile.LineFileReader.file_dat.seek", "linefile._read_string"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile._read_int64", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile._read_string"], ["", "def", "read", "(", "self", ",", "idx", ")", ":", "\n", "        ", "self", ".", "file_idx", ".", "seek", "(", "idx", "*", "8", ")", "\n", "offset", "=", "_read_int64", "(", "self", ".", "file_idx", ")", "\n", "self", ".", "file_dat", ".", "seek", "(", "offset", ")", "\n", "return", "_read_string", "(", "self", ".", "file_dat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile.LineFileReader.close": [[81, 86], ["linefile.LineFileReader.file_dat.close", "linefile.LineFileReader.file_idx.close"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.close", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "file_dat", ".", "close", "(", ")", "\n", "self", ".", "file_dat", "=", "None", "\n", "self", ".", "file_idx", ".", "close", "(", ")", "\n", "self", ".", "file_idx", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile._read_int16": [[3, 5], ["struct.unpack", "file.read"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile.LineFileReader.read"], ["def", "_read_int16", "(", "file", ")", ":", "\n", "    ", "return", "struct", ".", "unpack", "(", "\"H\"", ",", "file", ".", "read", "(", "2", ")", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile._read_int32": [[6, 8], ["struct.unpack", "file.read"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile.LineFileReader.read"], ["", "def", "_read_int32", "(", "file", ")", ":", "\n", "    ", "return", "struct", ".", "unpack", "(", "\"I\"", ",", "file", ".", "read", "(", "4", ")", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile._read_int64": [[9, 11], ["struct.unpack", "file.read"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile.LineFileReader.read"], ["", "def", "_read_int64", "(", "file", ")", ":", "\n", "    ", "return", "struct", ".", "unpack", "(", "\"Q\"", ",", "file", ".", "read", "(", "8", ")", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile._read_string": [[12, 16], ["linefile._read_int32", "file.read", "str"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile._read_int32", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile.LineFileReader.read"], ["", "def", "_read_string", "(", "file", ")", ":", "\n", "    ", "length", "=", "_read_int32", "(", "file", ")", "\n", "xxxx", "=", "file", ".", "read", "(", "length", ")", "\n", "return", "str", "(", "xxxx", ",", "'utf-8'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile._write_int16": [[17, 19], ["file.write", "struct.pack"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.write"], ["", "def", "_write_int16", "(", "file", ",", "number", ")", ":", "\n", "    ", "file", ".", "write", "(", "struct", ".", "pack", "(", "\"H\"", ",", "number", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile._write_int32": [[20, 22], ["file.write", "struct.pack"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.write"], ["", "def", "_write_int32", "(", "file", ",", "number", ")", ":", "\n", "    ", "file", ".", "write", "(", "struct", ".", "pack", "(", "\"I\"", ",", "number", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile._write_int64": [[23, 25], ["file.write", "struct.pack"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.write"], ["", "def", "_write_int64", "(", "file", ",", "number", ")", ":", "\n", "    ", "file", ".", "write", "(", "struct", ".", "pack", "(", "\"Q\"", ",", "number", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile._write_string": [[26, 31], ["string.encode", "linefile._write_int32", "file.write", "len", "len"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.linefile._write_int32", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.write"], ["", "def", "_write_string", "(", "file", ",", "string", ")", ":", "\n", "    ", "data", "=", "string", ".", "encode", "(", "'utf-8'", ")", "\n", "_write_int32", "(", "file", ",", "len", "(", "data", ")", ")", "\n", "file", ".", "write", "(", "data", ")", "\n", "return", "4", "+", "len", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.sequence.viterbi_decode": [[8, 92], ["list", "range", "torch.max", "reversed", "viterbi_path.reverse", "tag_sequence.size", "torch.zeros", "path_scores.append", "path_scores.append", "torch.max", "path_indices.append", "int", "viterbi_path.append", "len", "modules.misc.misc.ConfigurationError", "path_scores[].unsqueeze", "torch.zeros", "path_scores.append", "path_scores.append", "paths.squeeze", "best_path.numpy", "int", "range", "model.logger.warning", "scores.squeeze"], "function", ["None"], ["def", "viterbi_decode", "(", "tag_sequence", ":", "torch", ".", "Tensor", ",", "\n", "transition_matrix", ":", "torch", ".", "Tensor", ",", "\n", "tag_observations", ":", "Optional", "[", "List", "[", "int", "]", "]", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Perform Viterbi decoding in log space over a sequence given a transition matrix\n    specifying pairwise (transition) potentials between tags and a matrix of shape\n    (sequence_length, num_tags) specifying unary potentials for possible tags per\n    timestep.\n\n    Parameters\n    ----------\n    tag_sequence : torch.Tensor, required.\n        A tensor of shape (sequence_length, num_tags) representing scores for\n        a set of tags over a given sequence.\n    transition_matrix : torch.Tensor, required.\n        A tensor of shape (num_tags, num_tags) representing the binary potentials\n        for transitioning between a given pair of tags.\n    tag_observations : Optional[List[int]], optional, (default = None)\n        A list of length ``sequence_length`` containing the class ids of observed\n        elements in the sequence, with unobserved elements being set to -1. Note that\n        it is possible to provide evidence which results in degenerate labellings if\n        the sequences of tags you provide as evidence cannot transition between each\n        other, or those transitions are extremely unlikely. In this situation we log a\n        warning, but the responsibility for providing self-consistent evidence ultimately\n        lies with the user.\n\n    Returns\n    -------\n    viterbi_path : List[int]\n        The tag indices of the maximum likelihood tag sequence.\n    viterbi_score : torch.Tensor\n        The score of the viterbi path.\n    \"\"\"", "\n", "sequence_length", ",", "num_tags", "=", "list", "(", "tag_sequence", ".", "size", "(", ")", ")", "\n", "if", "tag_observations", ":", "\n", "        ", "if", "len", "(", "tag_observations", ")", "!=", "sequence_length", ":", "\n", "            ", "raise", "ConfigurationError", "(", "\"Observations were provided, but they were not the same length \"", "\n", "\"as the sequence. Found sequence of length: {} and evidence: {}\"", "\n", ".", "format", "(", "sequence_length", ",", "tag_observations", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "tag_observations", "=", "[", "-", "1", "for", "_", "in", "range", "(", "sequence_length", ")", "]", "\n", "\n", "", "path_scores", "=", "[", "]", "\n", "path_indices", "=", "[", "]", "\n", "\n", "if", "tag_observations", "[", "0", "]", "!=", "-", "1", ":", "\n", "        ", "one_hot", "=", "torch", ".", "zeros", "(", "num_tags", ")", "\n", "one_hot", "[", "tag_observations", "[", "0", "]", "]", "=", "100000.", "\n", "path_scores", ".", "append", "(", "one_hot", ")", "\n", "", "else", ":", "\n", "        ", "path_scores", ".", "append", "(", "tag_sequence", "[", "0", ",", ":", "]", ")", "\n", "\n", "# Evaluate the scores for all possible paths.", "\n", "", "for", "timestep", "in", "range", "(", "1", ",", "sequence_length", ")", ":", "\n", "# Add pairwise potentials to current scores.", "\n", "        ", "summed_potentials", "=", "path_scores", "[", "timestep", "-", "1", "]", ".", "unsqueeze", "(", "-", "1", ")", "+", "transition_matrix", "\n", "scores", ",", "paths", "=", "torch", ".", "max", "(", "summed_potentials", ",", "0", ")", "\n", "\n", "# If we have an observation for this timestep, use it", "\n", "# instead of the distribution over tags.", "\n", "observation", "=", "tag_observations", "[", "timestep", "]", "\n", "# Warn the user if they have passed", "\n", "# invalid/extremely unlikely evidence.", "\n", "if", "tag_observations", "[", "timestep", "-", "1", "]", "!=", "-", "1", ":", "\n", "            ", "if", "transition_matrix", "[", "tag_observations", "[", "timestep", "-", "1", "]", ",", "observation", "]", "<", "-", "10000", ":", "\n", "                ", "logger", ".", "warning", "(", "\"The pairwise potential between tags you have passed as \"", "\n", "\"observations is extremely unlikely. Double check your evidence \"", "\n", "\"or transition potentials!\"", ")", "\n", "", "", "if", "observation", "!=", "-", "1", ":", "\n", "            ", "one_hot", "=", "torch", ".", "zeros", "(", "num_tags", ")", "\n", "one_hot", "[", "observation", "]", "=", "100000.", "\n", "path_scores", ".", "append", "(", "one_hot", ")", "\n", "", "else", ":", "\n", "            ", "path_scores", ".", "append", "(", "tag_sequence", "[", "timestep", ",", ":", "]", "+", "scores", ".", "squeeze", "(", ")", ")", "\n", "", "path_indices", ".", "append", "(", "paths", ".", "squeeze", "(", ")", ")", "\n", "\n", "# Construct the most likely sequence backwards.", "\n", "", "viterbi_score", ",", "best_path", "=", "torch", ".", "max", "(", "path_scores", "[", "-", "1", "]", ",", "0", ")", "\n", "viterbi_path", "=", "[", "int", "(", "best_path", ".", "numpy", "(", ")", ")", "]", "\n", "for", "backward_timestep", "in", "reversed", "(", "path_indices", ")", ":", "\n", "        ", "viterbi_path", ".", "append", "(", "int", "(", "backward_timestep", "[", "viterbi_path", "[", "-", "1", "]", "]", ")", ")", "\n", "# Reverse the backward path.", "\n", "", "viterbi_path", ".", "reverse", "(", ")", "\n", "return", "viterbi_path", ",", "viterbi_score", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.sequence.get_mask_from_sequence_lengths": [[93, 107], ["sequence_lengths.new_ones", "sequence_lengths.new_ones.cumsum", "sequence_lengths.size", "sequence_lengths.unsqueeze"], "function", ["None"], ["", "def", "get_mask_from_sequence_lengths", "(", "sequence_lengths", ",", "max_length", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Given a variable of shape ``(batch_size,)`` that represents the sequence lengths of each batch\n    element, this function returns a ``(batch_size, max_length)`` mask variable.  For example, if\n    our input was ``[2, 2, 3]``, with a ``max_length`` of 4, we'd return\n    ``[[1, 1, 0, 0], [1, 1, 0, 0], [1, 1, 1, 0]]``.\n    We require ``max_length`` here instead of just computing it from the input ``sequence_lengths``\n    because it lets us avoid finding the max, then copying that value from the GPU to the CPU so\n    that we can use it to construct a new tensor.\n    \"\"\"", "\n", "# (batch_size, max_length)", "\n", "ones", "=", "sequence_lengths", ".", "new_ones", "(", "sequence_lengths", ".", "size", "(", "0", ")", ",", "max_length", ")", "\n", "range_tensor", "=", "ones", ".", "cumsum", "(", "dim", "=", "1", ")", "\n", "return", "(", "sequence_lengths", ".", "unsqueeze", "(", "1", ")", ">=", "range_tensor", ")", ".", "long", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.linker.update_linker": [[4, 20], ["torch.zeros", "table.tolist.tolist", "range", "torch.mul", "range", "targets.cpu", "stats.get", "torch.sum().item", "stats.get", "torch.sum().item", "stats.get", "targets.size", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get"], ["# from data.dataset import create_datasets", "\n", "from", "transformers", "import", "BertTokenizer", "\n", "\n", "from", "data", ".", "dictionary", "import", "Dictionary", "\n", "from", "models", "import", "model_create", "\n", "\n", "\n", "def", "load_dictionary", "(", "config", ",", "path", ")", ":", "\n", "    ", "type", "=", "config", "[", "'type'", "]", "\n", "filename", "=", "config", "[", "'filename'", "]", "\n", "filename", "=", "filename", "if", "filename", ".", "startswith", "(", "\"/\"", ")", "else", "\"{}/{}\"", ".", "format", "(", "path", ",", "filename", ")", "\n", "\n", "if", "type", "==", "'word2vec'", ":", "\n", "        ", "print", "(", "\"init {} with {}\"", ".", "format", "(", "path", ",", "filename", ")", ")", "\n", "dictionary", "=", "Dictionary", "(", "filename", ")", "\n", "", "elif", "type", "==", "'spirit'", ":", "\n", "        ", "dictionary", "=", "Dictionary", "(", ")", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.linker.update_linker2": [[22, 41], ["enumerate", "torch.zeros", "table.tolist.tolist", "range", "torch.mul", "stats.get", "range", "targets.cpu", "stats.get", "torch.sum().item", "stats.get", "torch.sum().item", "targets.size", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get"], ["", "elif", "type", "==", "'vocab'", ":", "\n", "        ", "dictionary", "=", "Dictionary", "(", ")", "\n", "dictionary", ".", "load_wordpiece_vocab", "(", "filename", ")", "\n", "", "elif", "type", "==", "'json'", ":", "\n", "        ", "dictionary", "=", "Dictionary", "(", ")", "\n", "dictionary", ".", "load_json", "(", "filename", ")", "\n", "", "elif", "type", "==", "'bert'", ":", "\n", "        ", "dictionary", "=", "BertTokenizer", ".", "from_pretrained", "(", "config", "[", "'filename'", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "BaseException", "(", "\"no such type\"", ",", "type", ")", "\n", "\n", "", "return", "dictionary", "\n", "\n", "\n", "", "def", "create_linking_candidates", "(", "config", ",", "entity_dictionary", ":", "Dictionary", ")", ":", "\n", "# print('STARTING LOADING LINKING CANDIDATES')", "\n", "    ", "candidates_path", "=", "config", "[", "'file'", "]", "\n", "max_link_candidates", "=", "config", "[", "'max_link_candidates'", "]", "\n", "span_text_to_candidates", "=", "dict", "(", ")", "\n", "for", "curr_line", "in", "open", "(", "candidates_path", ")", ":", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.linker.linker_acc": [[43, 45], ["None"], "function", ["None"], ["span_text", "=", "curr_span_candidates", "[", "'text'", "]", ".", "strip", "(", ")", "# TODO: makes sense lowercasing, or will make it worse???", "\n", "span_candidates", "=", "curr_span_candidates", "[", "'candidates'", "]", "\n", "span_scores", "=", "curr_span_candidates", "[", "'scores'", "]", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.linker.evaluate_linker": [[47, 65], ["linker.linker_acc", "print"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.linker.linker_acc", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["sorted_candidates", "=", "sorted", "(", "zip", "(", "span_candidates", ",", "span_scores", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "if", "max_link_candidates", ">", "-", "1", ":", "\n", "            ", "sorted_candidates", "=", "sorted_candidates", "[", ":", "max_link_candidates", "]", "\n", "\n", "", "span_text_to_candidates", "[", "span_text", "]", "=", "dict", "(", ")", "\n", "\n", "scores_list", "=", "list", "(", ")", "\n", "candidates_list", "=", "list", "(", ")", "\n", "for", "curr_candidate", ",", "curr_score", "in", "sorted_candidates", ":", "\n", "            ", "candidates_list", ".", "append", "(", "entity_dictionary", ".", "add", "(", "curr_candidate", ")", ")", "\n", "scores_list", ".", "append", "(", "curr_score", ")", "\n", "# passes to torch.tensor in order to decrease the memory footprint - the lists consume too much memory in python", "\n", "", "span_text_to_candidates", "[", "span_text", "]", "[", "'candidates'", "]", "=", "torch", ".", "tensor", "(", "candidates_list", ",", "dtype", "=", "torch", ".", "int", ")", "\n", "span_text_to_candidates", "[", "span_text", "]", "[", "'scores'", "]", "=", "torch", ".", "tensor", "(", "scores_list", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n", "# print('END LOADING LINKING CANDIDATES')", "\n", "\n", "", "return", "span_text_to_candidates", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.math.logsumexp": [[4, 27], ["tensor.max", "stable_vec.exp().sum().log", "max_score.unsqueeze", "stable_vec.exp().sum", "stable_vec.exp"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log"], ["def", "logsumexp", "(", "tensor", ":", "torch", ".", "Tensor", ",", "\n", "dim", ":", "int", "=", "-", "1", ",", "\n", "keepdim", ":", "bool", "=", "False", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    A numerically stable computation of logsumexp. This is mathematically equivalent to\n    `tensor.exp().sum(dim, keep=keepdim).log()`.  This function is typically used for summing log\n    probabilities.\n\n    Parameters\n    ----------\n    tensor : torch.FloatTensor, required.\n        A tensor of arbitrary size.\n    dim : int, optional (default = -1)\n        The dimension of the tensor to apply the logsumexp to.\n    keepdim: bool, optional (default = False)\n        Whether to retain a dimension of size one at the dimension we reduce over.\n    \"\"\"", "\n", "max_score", ",", "_", "=", "tensor", ".", "max", "(", "dim", ",", "keepdim", "=", "keepdim", ")", "\n", "if", "keepdim", ":", "\n", "        ", "stable_vec", "=", "tensor", "-", "max_score", "\n", "", "else", ":", "\n", "        ", "stable_vec", "=", "tensor", "-", "max_score", ".", "unsqueeze", "(", "dim", ")", "\n", "", "return", "max_score", "+", "(", "stable_vec", ".", "exp", "(", ")", ".", "sum", "(", "dim", ",", "keepdim", "=", "keepdim", ")", ")", ".", "log", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.math.masked_log_softmax": [[30, 37], ["torch.nn.functional.log_softmax", "mask.unsqueeze.float", "mask.unsqueeze.dim", "vector.dim", "mask.unsqueeze.unsqueeze"], "function", ["None"], ["", "def", "masked_log_softmax", "(", "vector", ":", "torch", ".", "Tensor", ",", "mask", ":", "torch", ".", "Tensor", ",", "dim", ":", "int", "=", "-", "1", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "if", "mask", "is", "not", "None", ":", "\n", "        ", "mask", "=", "mask", ".", "float", "(", ")", "\n", "while", "mask", ".", "dim", "(", ")", "<", "vector", ".", "dim", "(", ")", ":", "\n", "            ", "mask", "=", "mask", ".", "unsqueeze", "(", "1", ")", "\n", "", "vector", "=", "vector", "+", "(", "mask", "+", "1e-45", ")", ".", "log", "(", ")", "\n", "", "return", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "vector", ",", "dim", "=", "dim", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.ner.decode_segments": [[3, 27], ["enumerate", "outputs.append", "target.startswith", "output.append", "output.append", "len", "output.append"], "function", ["None"], ["def", "decode_segments", "(", "indices", ",", "labels", ")", ":", "\n", "    ", "outputs", "=", "[", "]", "\n", "for", "lst", "in", "indices", ":", "\n", "        ", "data", "=", "[", "labels", "[", "x", "]", "for", "x", "in", "lst", "]", "\n", "\n", "output", "=", "[", "]", "\n", "start", "=", "-", "1", "\n", "type", "=", "None", "\n", "for", "pos", ",", "target", "in", "enumerate", "(", "data", ")", ":", "\n", "            ", "if", "target", ".", "startswith", "(", "'B-'", ")", ":", "\n", "                ", "if", "start", ">=", "0", ":", "\n", "                    ", "output", ".", "append", "(", "(", "start", ",", "pos", ",", "type", ")", ")", "\n", "", "start", "=", "pos", "\n", "type", "=", "target", "[", "2", ":", "]", "\n", "", "elif", "target", "==", "'O'", ":", "\n", "                ", "if", "start", ">=", "0", ":", "\n", "                    ", "output", ".", "append", "(", "(", "start", ",", "pos", ",", "type", ")", ")", "\n", "start", "=", "-", "1", "\n", "type", "=", "None", "\n", "\n", "", "", "", "if", "start", ">=", "0", ":", "\n", "            ", "output", ".", "append", "(", "(", "start", ",", "len", "(", "data", ")", ",", "type", ")", ")", "\n", "", "outputs", ".", "append", "(", "output", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.ner.ner_to_list": [[29, 34], ["zip", "sequence_lengths.tolist", "indices.tolist", "output.append"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist"], ["", "def", "ner_to_list", "(", "indices", ",", "sequence_lengths", ")", ":", "\n", "    ", "output", "=", "[", "]", "\n", "for", "length", ",", "data", "in", "zip", "(", "sequence_lengths", ".", "tolist", "(", ")", ",", "indices", ".", "tolist", "(", ")", ")", ":", "\n", "        ", "output", ".", "append", "(", "data", "[", ":", "length", "]", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.ner.evaluate_ner_acc": [[36, 41], ["eq.float", "mask.float", "stats.get", "correct.sum().item", "stats.get", "mask.float().sum().item", "correct.sum", "mask.float().sum", "mask.float"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get"], ["", "def", "evaluate_ner_acc", "(", "stats", ",", "predictions", ",", "targets", ",", "mask", ")", ":", "\n", "    ", "eq", "=", "predictions", "==", "targets", "\n", "correct", "=", "eq", ".", "float", "(", ")", "*", "mask", ".", "float", "(", ")", "\n", "stats", "[", "'ner_numer'", "]", "=", "stats", ".", "get", "(", "'ner_numer'", ",", "0", ")", "+", "correct", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "stats", "[", "'ner_denom'", "]", "=", "stats", ".", "get", "(", "'ner_denom'", ",", "0", ")", "+", "mask", ".", "float", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.ner.update_ner": [[43, 66], ["ner.decode_segments", "ner.decode_segments", "zip", "stats.get", "x.startswith"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.ner.decode_segments", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.ner.decode_segments", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get"], ["", "def", "update_ner", "(", "stats", ",", "predictions", ",", "targets", ",", "labels", ",", "obj", ")", ":", "\n", "    ", "preds", "=", "decode_segments", "(", "predictions", ",", "labels", ")", "\n", "golds", "=", "decode_segments", "(", "targets", ",", "labels", ")", "\n", "\n", "if", "'tp'", "not", "in", "stats", ":", "\n", "        ", "labels", "=", "[", "x", "[", "2", ":", "]", "for", "x", "in", "labels", "if", "x", ".", "startswith", "(", "'B-'", ")", "]", "\n", "stats", "[", "'tp'", "]", "=", "{", "l", ":", "0", "for", "l", "in", "labels", "}", "\n", "stats", "[", "'fp'", "]", "=", "{", "l", ":", "0", "for", "l", "in", "labels", "}", "\n", "stats", "[", "'fn'", "]", "=", "{", "l", ":", "0", "for", "l", "in", "labels", "}", "\n", "\n", "", "tp", "=", "stats", "[", "'tp'", "]", "\n", "fp", "=", "stats", "[", "'fp'", "]", "\n", "fn", "=", "stats", "[", "'fn'", "]", "\n", "\n", "for", "pred", ",", "gold", "in", "zip", "(", "preds", ",", "golds", ")", ":", "\n", "        ", "for", "_", ",", "_", ",", "label", "in", "[", "x", "for", "x", "in", "pred", "if", "x", "in", "gold", "]", ":", "\n", "            ", "tp", "[", "label", "]", "+=", "1", "\n", "", "for", "_", ",", "_", ",", "label", "in", "[", "x", "for", "x", "in", "pred", "if", "x", "not", "in", "gold", "]", ":", "\n", "            ", "fp", "[", "label", "]", "+=", "1", "\n", "", "for", "_", ",", "_", ",", "label", "in", "[", "x", "for", "x", "in", "gold", "if", "x", "not", "in", "pred", "]", ":", "\n", "            ", "fn", "[", "label", "]", "+=", "1", "\n", "\n", "", "", "stats", "[", "'ner-obj'", "]", "=", "stats", ".", "get", "(", "'ner-obj'", ",", "0", ")", "+", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.ner.ner_f1": [[68, 90], ["print", "stats[].keys", "print", "print"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "ner_f1", "(", "stats", ")", ":", "\n", "    ", "print", "(", "\"Evaluate {}\"", ".", "format", "(", "stats", "[", "'name'", "]", ")", ")", "\n", "labels", "=", "stats", "[", "'tp'", "]", ".", "keys", "(", ")", "\n", "total_tp", "=", "0", "\n", "total_fp", "=", "0", "\n", "total_fn", "=", "0", "\n", "\n", "for", "label", "in", "labels", ":", "\n", "        ", "tp", ",", "fp", ",", "fn", "=", "stats", "[", "'tp'", "]", "[", "label", "]", ",", "stats", "[", "'fp'", "]", "[", "label", "]", ",", "stats", "[", "'fn'", "]", "[", "label", "]", "\n", "pr", "=", "tp", "/", "(", "tp", "+", "fp", ")", "if", "tp", "!=", "0", "else", "0.0", "\n", "re", "=", "tp", "/", "(", "tp", "+", "fn", ")", "if", "tp", "!=", "0", "else", "0.0", "\n", "f1", "=", "2", "*", "tp", "/", "(", "2", "*", "tp", "+", "fp", "+", "fn", ")", "if", "tp", "!=", "0", "else", "0.0", "\n", "print", "(", "'{:24}    {:5}  {:5}  {:5}    {:6.5f}  {:6.5f}  {:6.5f}'", ".", "format", "(", "label", ",", "tp", ",", "fp", ",", "fn", ",", "pr", ",", "re", ",", "f1", ")", ")", "\n", "total_tp", "+=", "tp", "\n", "total_fp", "+=", "fp", "\n", "total_fn", "+=", "fn", "\n", "\n", "", "total_pr", "=", "total_tp", "/", "(", "total_tp", "+", "total_fp", ")", "if", "total_tp", "!=", "0", "else", "0.0", "\n", "total_re", "=", "total_tp", "/", "(", "total_tp", "+", "total_fn", ")", "if", "total_tp", "!=", "0", "else", "0.0", "\n", "total_f1", "=", "2", "*", "total_tp", "/", "(", "2", "*", "total_tp", "+", "total_fp", "+", "total_fn", ")", "if", "total_tp", "!=", "0", "else", "0.0", "\n", "print", "(", "'{:24}    {:5}  {:5}  {:5}    {:6.5f}  {:6.5f}  {:6.5f}'", ".", "format", "(", "''", ",", "total_tp", ",", "total_fp", ",", "total_fn", ",", "total_pr", ",", "total_re", ",", "total_f1", ")", ")", "\n", "return", "total_f1", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.ner.evaluate_ner": [[92, 111], ["ner.ner_f1", "print", "tb_logger.log_value"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.ner.ner_f1", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "evaluate_ner", "(", "progress", ",", "stats", ",", "tb_logger", ")", ":", "\n", "    ", "if", "'tp'", "in", "stats", ":", "\n", "        ", "score", "=", "ner_f1", "(", "stats", ")", "\n", "if", "'ner-f1'", "not", "in", "progress", ":", "\n", "            ", "progress", "[", "'ner-f1'", "]", "=", "{", "'max-value'", ":", "0", ",", "'stall'", ":", "0", "}", "\n", "", "p", "=", "progress", "[", "'ner-f1'", "]", "\n", "if", "score", ">=", "p", "[", "'max-value'", "]", ":", "\n", "            ", "p", "[", "'max-value'", "]", "=", "score", "\n", "p", "[", "'max-iter'", "]", "=", "stats", "[", "'epoch'", "]", "\n", "p", "[", "'stall'", "]", "=", "0", "\n", "", "else", ":", "\n", "            ", "p", "[", "'stall'", "]", "+=", "1", "\n", "", "p", "[", "'curr-value'", "]", "=", "score", "\n", "p", "[", "'curr-iter'", "]", "=", "stats", "[", "'epoch'", "]", "\n", "\n", "print", "(", "\"EVAL-NER\\t{}\\tobj: {}\\titer: {}\\tner-f1: {:6.5f}\\tbest-iter: {}\\tmax-ner-f1: {:6.5f}\\t\\tstall: {}\"", "\n", ".", "format", "(", "stats", "[", "'name'", "]", ",", "stats", "[", "'ner-obj'", "]", ",", "p", "[", "'curr-iter'", "]", ",", "p", "[", "'curr-value'", "]", ",", "p", "[", "'max-iter'", "]", ",", "p", "[", "'max-value'", "]", ",", "p", "[", "'stall'", "]", ")", ")", "\n", "if", "tb_logger", "is", "not", "None", ":", "\n", "            ", "tb_logger", ".", "log_value", "(", "'{}/f1'", ".", "format", "(", "stats", "[", "'name'", "]", ")", ",", "score", ",", "p", "[", "'curr-iter'", "]", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.edmonds.mst": [[5, 14], ["torch.zeros", "enumerate", "torch.zeros.to", "scores.size", "scores[].cpu().tolist", "edmonds.encode_graph", "networkx.maximum_spanning_arborescence", "edmonds.decode_tree", "scores[].cpu"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.edmonds.encode_graph", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.edmonds.decode_tree"], ["def", "mst", "(", "scores", ",", "lengths", ")", ":", "\n", "    ", "T", "=", "torch", ".", "zeros", "(", "scores", ".", "size", "(", ")", ")", "\n", "for", "b", ",", "nodes", "in", "enumerate", "(", "lengths", ")", ":", "\n", "        ", "if", "nodes", ">", "0", ":", "\n", "            ", "s", "=", "scores", "[", "b", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "\n", "G", "=", "encode_graph", "(", "s", ",", "nodes", ")", "\n", "tree", "=", "nx", ".", "maximum_spanning_arborescence", "(", "G", ")", "\n", "decode_tree", "(", "T", "[", "b", ",", ":", ",", ":", "]", ",", "tree", ")", "\n", "", "", "return", "T", ".", "to", "(", "scores", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.edmonds.mst_with_tree": [[16, 29], ["torch.zeros", "list", "enumerate", "scores.size", "torch.zeros.to", "mask[].cpu", "edmonds.encode_graph_mtt_indexed", "networkx.maximum_spanning_arborescence", "edmonds.decode_tree", "list.append"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.edmonds.encode_graph_mtt_indexed", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.edmonds.decode_tree"], ["", "def", "mst_with_tree", "(", "scores", ",", "lengths", ",", "mask", ")", ":", "\n", "    ", "T", "=", "torch", ".", "zeros", "(", "scores", ".", "size", "(", ")", ")", "\n", "tree_lst", "=", "list", "(", ")", "\n", "for", "b", ",", "nodes", "in", "enumerate", "(", "lengths", ")", ":", "\n", "        ", "if", "nodes", ">", "0", ":", "\n", "            ", "curr_mask", "=", "mask", "[", "b", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", "\n", "# s = scores[b, :, :].cpu().tolist()", "\n", "# G = encode_graph_mtt(s, nodes, curr_mask)", "\n", "G", "=", "encode_graph_mtt_indexed", "(", "scores", "[", "b", ",", ":", ",", ":", "]", ",", "curr_mask", ")", "\n", "tree", "=", "nx", ".", "maximum_spanning_arborescence", "(", "G", ")", "\n", "decode_tree", "(", "T", "[", "b", ",", ":", ",", ":", "]", ",", "tree", ")", "\n", "tree_lst", ".", "append", "(", "tree", ")", "\n", "", "", "return", "T", ".", "to", "(", "scores", ".", "device", ")", ",", "tree_lst", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.edmonds.mst_only_tree": [[31, 43], ["list", "enumerate", "mask[].cpu", "edmonds.encode_graph_mtt_indexed", "networkx.maximum_spanning_arborescence", "list.append"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.edmonds.encode_graph_mtt_indexed"], ["", "def", "mst_only_tree", "(", "scores", ",", "lengths", ",", "mask", ")", ":", "\n", "    ", "tree_lst", "=", "list", "(", ")", "\n", "for", "b", ",", "nodes", "in", "enumerate", "(", "lengths", ")", ":", "\n", "        ", "if", "nodes", ">", "0", ":", "\n", "            ", "curr_mask", "=", "mask", "[", "b", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", "\n", "# s = scores[b, :, :].cpu().tolist()", "\n", "# G = encode_graph_mtt(s, nodes, curr_mask)", "\n", "G", "=", "encode_graph_mtt_indexed", "(", "scores", "[", "b", ",", ":", ",", ":", "]", ",", "curr_mask", ")", "\n", "tree", "=", "nx", ".", "maximum_spanning_arborescence", "(", "G", ")", "\n", "# decode_tree(T[b, :, :], tree)", "\n", "tree_lst", ".", "append", "(", "tree", ")", "\n", "", "", "return", "tree_lst", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.edmonds.mst_only_branches": [[45, 59], ["list", "enumerate", "mask[].cpu", "edmonds.encode_graph_mtt_indexed", "networkx.maximum_branching", "list.append"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.edmonds.encode_graph_mtt_indexed"], ["", "def", "mst_only_branches", "(", "scores", ",", "lengths", ",", "mask", ")", ":", "\n", "    ", "tree_lst", "=", "list", "(", ")", "\n", "for", "b", ",", "nodes", "in", "enumerate", "(", "lengths", ")", ":", "\n", "        ", "if", "nodes", ">", "0", ":", "\n", "            ", "curr_mask", "=", "mask", "[", "b", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", "\n", "# s = scores[b, :, :].cpu().tolist()", "\n", "# G = encode_graph_mtt(s, nodes, curr_mask)", "\n", "G", "=", "encode_graph_mtt_indexed", "(", "scores", "[", "b", ",", ":", ",", ":", "]", ",", "curr_mask", ")", "\n", "tree", "=", "nx", ".", "maximum_branching", "(", "G", ")", "\n", "# decode_tree(T[b, :, :], tree)", "\n", "# my_branch_edges = list(nx.dfs_edges(tree))", "\n", "# print('branch edges: ', my_branch_edges)", "\n", "tree_lst", ".", "append", "(", "tree", ")", "\n", "", "", "return", "tree_lst", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.edmonds.encode_graph": [[61, 70], ["networkx.DiGraph", "range", "range", "range", "nx.DiGraph.add_edge", "nx.DiGraph.add_edge"], "function", ["None"], ["", "def", "encode_graph", "(", "scores", ",", "nodes", ")", ":", "\n", "    ", "G", "=", "nx", ".", "DiGraph", "(", ")", "\n", "for", "i", "in", "range", "(", "nodes", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "nodes", ")", ":", "\n", "            ", "if", "i", "!=", "j", ":", "\n", "                ", "G", ".", "add_edge", "(", "i", "+", "1", ",", "j", "+", "1", ",", "weight", "=", "scores", "[", "i", "]", "[", "j", "]", ")", "\n", "", "", "", "for", "i", "in", "range", "(", "nodes", ")", ":", "\n", "        ", "G", ".", "add_edge", "(", "i", "+", "1", ",", "0", ",", "weight", "=", "scores", "[", "i", "]", "[", "i", "]", ")", "\n", "", "return", "G", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.edmonds.encode_graph_mtt": [[72, 81], ["networkx.DiGraph", "range", "range", "nx.DiGraph.add_edge"], "function", ["None"], ["", "def", "encode_graph_mtt", "(", "scores", ",", "nodes", ",", "mask", ")", ":", "\n", "    ", "G", "=", "nx", ".", "DiGraph", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "nodes", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "nodes", ")", ":", "\n", "            ", "if", "mask", "[", "i", ",", "j", "]", "==", "1.0", ":", "\n", "                ", "G", ".", "add_edge", "(", "i", ",", "j", ",", "weight", "=", "scores", "[", "i", "]", "[", "j", "]", ")", "\n", "\n", "", "", "", "return", "G", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.edmonds.encode_graph_mtt_indexed": [[83, 105], ["networkx.DiGraph", "masked_indices.nonzero", "masked_indices_nonzero.tolist.tolist", "scores[].tolist", "zip", "int", "int", "nx.DiGraph.add_edge"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist"], ["", "def", "encode_graph_mtt_indexed", "(", "scores", ",", "mask", ")", ":", "\n", "    ", "\"\"\"\n    The idea of this version is to access elements using indexing, theoretically making it faster\n    :param scores:\n    :param mask:\n    :return:\n    \"\"\"", "\n", "G", "=", "nx", ".", "DiGraph", "(", ")", "\n", "masked_indices", "=", "(", "mask", "==", "1.0", ")", "\n", "masked_indices_nonzero", "=", "masked_indices", ".", "nonzero", "(", ")", "\n", "masked_indices_nonzero", "=", "masked_indices_nonzero", ".", "tolist", "(", ")", "\n", "masked_scores", "=", "scores", "[", "masked_indices", "]", ".", "tolist", "(", ")", "\n", "for", "pos", ",", "score", "in", "zip", "(", "masked_indices_nonzero", ",", "masked_scores", ")", ":", "\n", "# vertex_from = int(pos[0].item())", "\n", "# vertex_to = int(pos[1].item())", "\n", "# edge_score = score.item()", "\n", "        ", "vertex_from", "=", "int", "(", "pos", "[", "0", "]", ")", "\n", "vertex_to", "=", "int", "(", "pos", "[", "1", "]", ")", "\n", "edge_score", "=", "score", "\n", "G", ".", "add_edge", "(", "vertex_from", ",", "vertex_to", ",", "weight", "=", "edge_score", ")", "\n", "\n", "", "return", "G", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.edmonds.decode_tree": [[107, 115], ["tree.edges", "print"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "decode_tree", "(", "output", ",", "tree", ")", ":", "\n", "    ", "for", "src", ",", "dst", "in", "tree", ".", "edges", "(", ")", ":", "\n", "        ", "if", "dst", "==", "0", ":", "\n", "            ", "print", "(", "src", ",", "dst", ")", "\n", "output", "[", "src", "]", "[", "src", "]", "=", "1", "\n", "", "else", ":", "\n", "            ", "output", "[", "src", "]", "[", "dst", "]", "=", "1", "\n", "", "", "return", "output", "\n", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Wrapper1.__init__": [[40, 45], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "label", ",", "module", ",", "dim_output", "=", "None", ")", ":", "\n", "        ", "super", "(", "Wrapper1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "label", "=", "label", "\n", "self", ".", "module", "=", "module", "\n", "self", ".", "dim_output", "=", "module", ".", "dim_output", "if", "dim_output", "is", "None", "else", "dim_output", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Wrapper1.forward": [[46, 52], ["debug.Wrapper1.module", "inputs.norm().item", "debug.Wrapper1.norm().item", "print", "inputs.norm", "debug.Wrapper1.norm"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "module", "(", "inputs", ")", "\n", "norm_inputs", "=", "inputs", ".", "norm", "(", ")", ".", "item", "(", ")", "\n", "norm_outputs", "=", "outputs", ".", "norm", "(", ")", ".", "item", "(", ")", "\n", "print", "(", "\"forward {}: {} / {} = {}\"", ".", "format", "(", "self", ".", "label", ",", "norm_outputs", ",", "norm_inputs", ",", "norm_outputs", "/", "norm_inputs", ")", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.__init__": [[59, 63], ["open"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "mode", ")", ":", "\n", "        ", "self", ".", "file", "=", "open", "(", "name", ",", "mode", ")", "\n", "self", ".", "stdout", "=", "sys", ".", "stdout", "\n", "sys", ".", "stdout", "=", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.close": [[64, 71], ["debug.Tee.file.close"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "stdout", "is", "not", "None", ":", "\n", "            ", "sys", ".", "stdout", "=", "self", ".", "stdout", "\n", "self", ".", "stdout", "=", "None", "\n", "", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "close", "(", ")", "\n", "self", ".", "file", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.write": [[72, 75], ["debug.Tee.file.write", "debug.Tee.stdout.write"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.write", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.write"], ["", "", "def", "write", "(", "self", ",", "data", ")", ":", "\n", "        ", "self", ".", "file", ".", "write", "(", "data", ")", "\n", "self", ".", "stdout", ".", "write", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.flush": [[76, 79], ["debug.Tee.file.flush", "debug.Tee.stdout.flush"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.flush", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.flush"], ["", "def", "flush", "(", "self", ")", ":", "\n", "        ", "self", ".", "file", ".", "flush", "(", ")", "\n", "self", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.__del__": [[80, 82], ["debug.Tee.close"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.close"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.print_allocated_tensors": [[8, 20], ["gc.get_objects", "print", "print", "torch.is_tensor", "torch.is_tensor", "hasattr", "torch.is_tensor", "torch.is_tensor", "print", "obj.numel", "type", "obj.size"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["def", "print_allocated_tensors", "(", ")", ":", "\n", "    ", "total_size", "=", "0", "\n", "for", "obj", "in", "gc", ".", "get_objects", "(", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "if", "torch", ".", "is_tensor", "(", "obj", ")", "or", "(", "hasattr", "(", "obj", ",", "'data'", ")", "and", "torch", ".", "is_tensor", "(", "obj", ".", "data", ")", ")", ":", "\n", "                ", "if", "obj", ".", "is_cuda", ":", "\n", "                    ", "print", "(", "type", "(", "obj", ")", ",", "obj", ".", "size", "(", ")", ")", "\n", "total_size", "+=", "obj", ".", "numel", "(", ")", "\n", "", "", "", "except", ":", "\n", "            ", "pass", "\n", "", "", "print", "(", "\"total size:\"", ",", "total_size", "*", "4", ",", "\"=\"", ",", "total_size", "/", "1024", "/", "1024", "*", "4", ")", "\n", "print", "(", "\"allocated: \"", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.masked_inspect": [[22, 36], ["tensor.min().item", "tensor.max().item", "mask.expand_as.expand_as", "mask.expand_as.sum().item", "math.sqrt", "print", "mask.expand_as.sum().item", "tensor.min", "tensor.max", "mask.expand_as.sum", "mask.expand_as.sum"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "masked_inspect", "(", "name", ",", "tensor", ",", "mask", ")", ":", "\n", "    ", "unmasked_minimum", "=", "tensor", ".", "min", "(", ")", ".", "item", "(", ")", "\n", "unmasked_maximum", "=", "tensor", ".", "max", "(", ")", ".", "item", "(", ")", "\n", "# print('tensor:', tensor.size())", "\n", "# print('mask:', mask.size())", "\n", "mask", "=", "mask", ".", "expand_as", "(", "tensor", ")", "\n", "masked_minimum", "=", "(", "tensor", "*", "mask", "+", "(", "1.0", "-", "mask", ")", "*", "unmasked_maximum", ")", ".", "min", "(", ")", ".", "item", "(", ")", "\n", "masked_maximum", "=", "(", "tensor", "*", "mask", "+", "(", "1.0", "-", "mask", ")", "*", "unmasked_minimum", ")", ".", "max", "(", ")", ".", "item", "(", ")", "\n", "\n", "N", "=", "mask", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "average", "=", "(", "tensor", "*", "mask", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "mask", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "x", "=", "(", "tensor", "-", "average", ")", "*", "mask", "\n", "stdev", "=", "math", ".", "sqrt", "(", "(", "x", "*", "x", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "N", ")", "\n", "print", "(", "'INSPECT\\t{}: min={} max={} avg={} std={}'", ".", "format", "(", "name", ",", "masked_minimum", ",", "masked_maximum", ",", "average", ",", "stdev", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.nn.ResidualBlock.__init__": [[18, 21], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "block", ")", ":", "\n", "        ", "super", "(", "ResidualBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "block", "=", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.nn.ResidualBlock.forward": [[22, 24], ["torch.ResidualBlock.block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "+", "self", ".", "block", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.nn.create_activation_function": [[4, 15], ["torch.ReLU", "torch.Tanh", "torch.GLU", "torch.Sigmoid", "BaseException"], "function", ["None"], ["def", "create_activation_function", "(", "name", ")", ":", "\n", "    ", "if", "name", "==", "'relu'", ":", "\n", "        ", "return", "nn", ".", "ReLU", "(", ")", "\n", "", "elif", "name", "==", "'tanh'", ":", "\n", "        ", "return", "nn", ".", "Tanh", "(", ")", "\n", "", "elif", "name", "==", "'glu'", ":", "\n", "        ", "return", "nn", ".", "GLU", "(", ")", "\n", "", "elif", "name", "==", "'sigmoid'", ":", "\n", "        ", "return", "nn", ".", "Sigmoid", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "BaseException", "(", "\"no such activation function:\"", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.nn.create_module": [[26, 42], ["torch.Linear", "layers.append", "torch.Sequential", "BaseException", "layers.append", "layers.append", "torch.Linear", "torch.Linear", "nn.create_activation_function", "layers.append", "torch.Dropout"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.nn.create_activation_function"], ["", "", "def", "create_module", "(", "dim_input", ",", "dim_output", ",", "config", ")", ":", "\n", "    ", "if", "config", "[", "'type'", "]", "==", "'linear'", ":", "\n", "        ", "return", "nn", ".", "Linear", "(", "dim_input", ",", "dim_output", ")", "\n", "", "elif", "config", "[", "'type'", "]", "==", "'ffnn'", ":", "\n", "        ", "last", "=", "dim_input", "\n", "layers", "=", "[", "]", "\n", "for", "dim", "in", "config", "[", "'dims'", "]", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "last", ",", "dim", ")", ")", "\n", "layers", ".", "append", "(", "create_activation_function", "(", "config", "[", "'actfnc'", "]", ")", ")", "\n", "if", "'dropout'", "in", "config", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "Dropout", "(", "config", "[", "'dropout'", "]", ")", ")", "\n", "", "last", "=", "dim", "\n", "", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "last", ",", "dim_output", ")", ")", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "", "else", ":", "\n", "        ", "raise", "BaseException", "(", "\"unknown module type:\"", ",", "config", "[", "'type'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.nn.create_ffn": [[45, 68], ["torch.Sequential", "layers.append", "layers.append", "config.get", "torch.Linear", "nn.create_activation_function", "layers.append", "nn.ResidualBlock", "torch.Sequential", "torch.Linear", "layers.append", "torch.Sequential", "layers.append", "torch.Dropout", "torch.Dropout"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.nn.create_activation_function"], ["", "", "def", "create_ffn", "(", "dim_input", ",", "config", ")", ":", "\n", "    ", "module", "=", "nn", ".", "Sequential", "(", ")", "\n", "dim_output", "=", "dim_input", "\n", "\n", "if", "'dim'", "in", "config", ":", "\n", "        ", "dim_hidden", "=", "config", "[", "'dim'", "]", "\n", "\n", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "dim_input", ",", "dim_hidden", ")", ")", "\n", "layers", ".", "append", "(", "create_activation_function", "(", "config", "[", "'actfnc'", "]", ")", ")", "\n", "\n", "if", "config", ".", "get", "(", "'residual'", ",", "False", ")", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "dim_hidden", ",", "dim_input", ")", ")", "\n", "if", "'dropout'", "in", "config", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "Dropout", "(", "config", "[", "'dropout'", "]", ")", ")", "\n", "", "module", "=", "ResidualBlock", "(", "nn", ".", "Sequential", "(", "*", "layers", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "'dropout'", "in", "config", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "Dropout", "(", "config", "[", "'dropout'", "]", ")", ")", "\n", "", "module", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "dim_output", "=", "dim_hidden", "\n", "\n", "", "", "return", "module", ",", "dim_output", "\n", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.util.set_seed": [[10, 20], ["random.seed", "numpy.random.seed", "torch.manual_seed", "logger.info", "torch.cuda.is_available", "torch.cuda.manual_seed_all"], "function", ["None"], ["# import preprocessing.config as config", "\n", "import", "third_party", ".", "kolitsas_e2e", ".", "config", "as", "config", "\n", "\n", "\n", "# print(\"preprocessing/util.py print sys.path\")", "\n", "# print(sys.path)", "\n", "\n", "\n", "# methods below are executed every time because they are fast or because their result", "\n", "# depend on the args", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.evaluator.EvaluatorList.__init__": [[7, 9], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "evals", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.evaluator.EvaluatorList.add": [[10, 12], ["None"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "name", ",", "evaluator", ")", ":", "\n", "        ", "self", ".", "evals", "[", "name", "]", "=", "evaluator", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.evaluator.EvaluatorList.setup": [[13, 18], ["evaluator.EvaluatorList.evals.items", "evaluator.setup"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.evaluator.EvaluatorLinker.setup"], ["", "def", "setup", "(", "self", ",", "progress", ",", "epoch", ")", ":", "\n", "        ", "for", "name", ",", "evaluator", "in", "self", ".", "evals", ".", "items", "(", ")", ":", "\n", "            ", "if", "name", "not", "in", "progress", ":", "\n", "                ", "progress", "[", "name", "]", "=", "{", "'name'", ":", "'{}-{}'", ".", "format", "(", "progress", "[", "'name'", "]", ",", "name", ")", "}", "\n", "", "evaluator", ".", "setup", "(", "progress", "[", "name", "]", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.evaluator.EvaluatorList.evaluate": [[19, 22], ["evaluator.EvaluatorList.evals.values", "eval.evaluate"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.evaluator.EvaluatorLinker.evaluate"], ["", "", "def", "evaluate", "(", "self", ",", "tb_logger", "=", "None", ")", ":", "\n", "        ", "for", "eval", "in", "self", ".", "evals", ".", "values", "(", ")", ":", "\n", "            ", "eval", ".", "evaluate", "(", "tb_logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.evaluator.EvaluatorNER.__init__": [[26, 31], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "labels", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "stats", "=", "None", "\n", "self", ".", "progress", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.evaluator.EvaluatorNER.setup": [[32, 35], ["None"], "methods", ["None"], ["", "def", "setup", "(", "self", ",", "progress", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "stats", "=", "{", "'name'", ":", "progress", "[", "'name'", "]", ",", "'epoch'", ":", "epoch", "}", "\n", "self", ".", "progress", "=", "progress", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.evaluator.EvaluatorNER.update": [[36, 39], ["util.ner.ner_to_list", "util.ner.update_ner"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.ner.ner_to_list", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.ner.update_ner"], ["", "def", "update", "(", "self", ",", "pred", ",", "gold", ",", "sequence_lengths", ",", "obj", ")", ":", "\n", "        ", "gold", "=", "ner_to_list", "(", "gold", ",", "sequence_lengths", ")", "\n", "update_ner", "(", "self", ".", "stats", ",", "pred", ",", "gold", ",", "self", ".", "labels", ",", "obj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.evaluator.EvaluatorNER.evaluate": [[40, 42], ["util.ner.evaluate_ner"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.ner.evaluate_ner"], ["", "def", "evaluate", "(", "self", ",", "tb_logger", "=", "None", ")", ":", "\n", "        ", "evaluate_ner", "(", "self", ".", "progress", ",", "self", ".", "stats", ",", "tb_logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.evaluator.EvaluatorLinker.__init__": [[46, 49], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "stats", "=", "None", "\n", "self", ".", "progress", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.evaluator.EvaluatorLinker.setup": [[50, 53], ["None"], "methods", ["None"], ["", "def", "setup", "(", "self", ",", "progress", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "stats", "=", "{", "'name'", ":", "progress", "[", "'name'", "]", ",", "'epoch'", ":", "epoch", "}", "\n", "self", ".", "progress", "=", "progress", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.evaluator.EvaluatorLinker.update": [[54, 56], ["util.linker.update_linker"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.linker.update_linker"], ["", "def", "update", "(", "self", ",", "linker_scores", ",", "linker_targets", ",", "table", ",", "linker_obj", ")", ":", "\n", "        ", "update_linker", "(", "self", ".", "stats", ",", "linker_scores", ",", "linker_targets", ",", "table", ",", "linker_obj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.evaluator.EvaluatorLinker.update2": [[57, 59], ["util.linker.update_linker2"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.linker.update_linker2"], ["", "def", "update2", "(", "self", ",", "linker_scores", ",", "linker_targets", ",", "table", ",", "linker_obj", ")", ":", "\n", "        ", "update_linker2", "(", "self", ".", "stats", ",", "linker_scores", ",", "linker_targets", ",", "table", ",", "linker_obj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.evaluator.EvaluatorLinker.evaluate": [[60, 62], ["util.linker.evaluate_linker"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.linker.evaluate_linker"], ["", "def", "evaluate", "(", "self", ",", "tb_logger", "=", "None", ")", ":", "\n", "        ", "evaluate_linker", "(", "self", ".", "progress", ",", "self", ".", "stats", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.__init__.register_model": [[32, 34], ["models.coreflinker.dygie3.MyDygie3", "models.coreflinker.coreflinker_spanbert.CoreflinkerSpanBert", "models.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi"], "function", ["None"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.__init__.model_create": [[36, 42], ["BaseException"], "function", ["None"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.ncr3.SpanBuilder.__init__": [[105, 107], ["set", "range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "self", ".", "spans", "=", "[", "set", "(", ")", "for", "_", "in", "range", "(", "batch_size", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.ncr3.SpanBuilder.add": [[108, 111], ["zip", "spans.update"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.update"], ["", "def", "add", "(", "self", ",", "predictions", ")", ":", "\n", "        ", "for", "spans", ",", "prediction", "in", "zip", "(", "self", ".", "spans", ",", "predictions", ")", ":", "\n", "            ", "spans", ".", "update", "(", "[", "(", "token_begin", ",", "token_end", "-", "1", ")", "for", "token_begin", ",", "token_end", ",", "tag", "in", "prediction", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.ncr3.SpanBuilder.build": [[112, 114], ["list"], "methods", ["None"], ["", "", "def", "build", "(", "self", ")", ":", "\n", "        ", "return", "[", "list", "(", "x", ")", "for", "x", "in", "self", ".", "spans", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.ncr3.SpanBuilder.get_max_len": [[115, 117], ["max", "len"], "methods", ["None"], ["", "def", "get_max_len", "(", "self", ")", ":", "\n", "        ", "return", "max", "(", "[", "len", "(", "x", ")", "for", "x", "in", "self", ".", "spans", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.ncr3.CheckGradient.__init__": [[146, 150], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "tb_logger", ")", ":", "\n", "        ", "self", ".", "gradients", "=", "{", "}", "\n", "self", ".", "num", "=", "0", "\n", "self", ".", "tb_logger", "=", "tb_logger", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.ncr3.CheckGradient.run": [[151, 162], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential.register_backward_hook", "torch.Sequential.", "len", "ncr3.CheckGradient.inspect"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.ncr3.CheckGradient.inspect"], ["", "def", "run", "(", "self", ",", "name", ",", "inputs", ")", ":", "\n", "        ", "self", ".", "num", "+=", "1", "\n", "\n", "def", "myhook", "(", "layer", ",", "grad_input", ",", "grad_output", ")", ":", "\n", "            ", "self", ".", "gradients", "[", "name", "]", "=", "grad_input", "[", "0", "]", "\n", "if", "len", "(", "self", ".", "gradients", ")", "==", "self", ".", "num", ":", "\n", "                ", "self", ".", "inspect", "(", ")", "\n", "\n", "", "", "tmp", "=", "nn", ".", "Sequential", "(", ")", "\n", "tmp", ".", "register_backward_hook", "(", "myhook", ")", "\n", "return", "tmp", "(", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.ncr3.CheckGradient.inspect": [[163, 180], ["ncr3.CheckGradient.gradients.values", "sum.norm().item", "ncr3.CheckGradient.gradients.items", "ncr3.CheckGradient.tb_logger.log_value", "value.norm().item", "ncr3.CheckGradient.tb_logger.log_value", "ncr3.CheckGradient.tb_logger.log_value", "sum.norm", "value.norm"], "methods", ["None"], ["", "def", "inspect", "(", "self", ")", ":", "\n", "        ", "sum", "=", "None", "\n", "for", "value", "in", "self", ".", "gradients", ".", "values", "(", ")", ":", "\n", "            ", "if", "sum", "is", "None", ":", "\n", "                ", "sum", "=", "value", "\n", "", "else", ":", "\n", "                ", "sum", "=", "sum", "+", "value", "\n", "\n", "", "", "snorm", "=", "sum", ".", "norm", "(", ")", ".", "item", "(", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "gradients", ".", "items", "(", ")", ":", "\n", "            ", "vnorm", "=", "value", ".", "norm", "(", ")", ".", "item", "(", ")", "\n", "proj", "=", "(", "value", "*", "sum", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "snorm", "if", "vnorm", "!=", "0", "else", "0.0", "\n", "# print('key: {:12}   norm: {:14}   proj: {:14}'.format(key, vnorm, proj))", "\n", "self", ".", "tb_logger", ".", "log_value", "(", "'norm/{}'", ".", "format", "(", "key", ")", ",", "vnorm", ",", "CheckGradient", ".", "iter", ")", "\n", "self", ".", "tb_logger", ".", "log_value", "(", "'proj/{}'", ".", "format", "(", "key", ")", ",", "proj", ",", "CheckGradient", ".", "iter", ")", "\n", "", "self", ".", "tb_logger", ".", "log_value", "(", "'norm/sum'", ",", "snorm", ",", "CheckGradient", ".", "iter", ")", "\n", "CheckGradient", ".", "iter", "+=", "1", "\n", "# print('snorm:', snorm)", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.ncr3.NCR3.__init__": [[247, 304], ["torch.Module.__init__", "print", "modules.spirit.TextEmbedder", "modules.spirit.FeedForward", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "modules.spirit.FeedForward", "modules.aggregate.Aggregate", "modules.spirit.FeedForward", "modules.graph.create_graph", "modules.tasks.coref.LossCoref", "modules.spirit.FeedForward", "modules.aggregate.Aggregate", "modules.spirit.FeedForward", "modules.aggregate.Aggregate", "modules.spirit.FeedForward", "dictionaries[].tolist", "modules.graph.create_graph", "modules.tasks.relations.LossRelationsNew", "config.get", "print", "modules.spirit.Seq2Seq", "modules.spirit.Seq2Seq", "modules.spirit.Seq2Seq", "modules.spirit.Seq2Seq", "len", "modules.tasks.create_ner_task"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.aggregate.Aggregate", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.graph.create_graph", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.aggregate.Aggregate", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.aggregate.Aggregate", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.graph.create_graph", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.__init__.create_ner_task"], ["    ", "def", "__init__", "(", "self", ",", "dictionaries", ",", "config", ")", ":", "\n", "        ", "super", "(", "NCR3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "print", "(", "\"NCR3: ner + coref + rel\"", ")", "\n", "self", ".", "embedder", "=", "TextEmbedder", "(", "dictionaries", ",", "config", ")", "\n", "\n", "self", ".", "shared_seq", "=", "None", "\n", "self", ".", "ner_seq", "=", "None", "\n", "self", ".", "coref_seq", "=", "None", "\n", "self", ".", "relation_seq", "=", "None", "\n", "\n", "if", "'shared_seq2seq'", "in", "config", ":", "\n", "            ", "self", ".", "shared_seq", "=", "Seq2Seq", "(", "self", ".", "embedder", ".", "dim_output", ",", "config", "[", "'shared_seq2seq'", "]", ")", "\n", "shared_dim", "=", "self", ".", "shared_seq", ".", "dim_output", "\n", "", "else", ":", "\n", "            ", "shared_dim", "=", "0", "\n", "", "ner_dim", "=", "shared_dim", "\n", "coref_dim", "=", "shared_dim", "\n", "rel_dim", "=", "shared_dim", "\n", "\n", "if", "'ner_seq2seq'", "in", "config", ":", "\n", "            ", "self", ".", "ner_seq", "=", "Seq2Seq", "(", "self", ".", "embedder", ".", "dim_output", ",", "config", "[", "'ner_seq2seq'", "]", ")", "\n", "ner_dim", "+=", "self", ".", "ner_seq", ".", "dim_output", "\n", "", "self", ".", "ner_ff", "=", "FeedForward", "(", "ner_dim", ",", "config", "[", "'ner_ff'", "]", ")", "\n", "self", ".", "ner_tasks", "=", "nn", ".", "ModuleList", "(", "\n", "[", "create_ner_task", "(", "task", ",", "self", ".", "ner_ff", ".", "dim_output", ",", "dictionaries", ")", "for", "task", "in", "config", "[", "'tasks-ner'", "]", "]", ")", "\n", "\n", "if", "'coref_seq2seq'", "in", "config", ":", "\n", "            ", "self", ".", "coref_seq", "=", "Seq2Seq", "(", "self", ".", "embedder", ".", "dim_output", ",", "config", "[", "'coref_seq2seq'", "]", ")", "\n", "coref_dim", "+=", "self", ".", "coref_seq", ".", "dim_output", "\n", "", "self", ".", "coref_ff", "=", "FeedForward", "(", "ner_dim", ",", "config", "[", "'coref_ff'", "]", ")", "\n", "# self.coref_mention_net = CombineNet(self.coref_ff.dim_output, config['mention_net'])", "\n", "self", ".", "coref_mention_agr", "=", "Aggregate", "(", "self", ".", "coref_ff", ".", "dim_output", ",", "config", "[", "'mention_agr'", "]", ")", "\n", "self", ".", "coref_mention_net", "=", "FeedForward", "(", "self", ".", "coref_mention_agr", ".", "dim_output", ",", "config", "[", "'mention_net'", "]", ")", "\n", "\n", "self", ".", "coref_scorer", "=", "create_graph", "(", "self", ".", "coref_mention_net", ".", "dim_output", ",", "1", ",", "config", "[", "'coref_scorer'", "]", ")", "\n", "self", ".", "coref_task", "=", "LossCoref", "(", "'coref'", ",", "config", "[", "'task-coref'", "]", ")", "\n", "\n", "if", "'rel_seq2seq'", "in", "config", ":", "\n", "            ", "self", ".", "relation_seq", "=", "Seq2Seq", "(", "self", ".", "embedder", ".", "dim_output", ",", "config", "[", "'rel_seq2seq'", "]", ")", "\n", "rel_dim", "+=", "self", ".", "relation_seq", ".", "dim_output", "\n", "", "self", ".", "relation_ff", "=", "FeedForward", "(", "rel_dim", ",", "config", "[", "'rel_ff'", "]", ")", "\n", "self", ".", "relation_mention_agr", "=", "Aggregate", "(", "self", ".", "relation_ff", ".", "dim_output", ",", "config", "[", "'mention_agr'", "]", ")", "\n", "self", ".", "relation_mention_net", "=", "FeedForward", "(", "self", ".", "relation_mention_agr", ".", "dim_output", ",", "config", "[", "'mention_net'", "]", ")", "\n", "self", ".", "relation_concept_agr", "=", "Aggregate", "(", "self", ".", "relation_mention_net", ".", "dim_output", ",", "config", "[", "'concept_agr'", "]", ")", "\n", "self", ".", "relation_concept_net", "=", "FeedForward", "(", "self", ".", "relation_concept_agr", ".", "dim_output", ",", "config", "[", "'concept_net'", "]", ")", "\n", "self", ".", "relation_labels", "=", "dictionaries", "[", "'relations'", "]", ".", "tolist", "(", ")", "\n", "self", ".", "relation_scorer", "=", "create_graph", "(", "self", ".", "relation_concept_net", ".", "dim_output", ",", "len", "(", "self", ".", "relation_labels", ")", ",", "\n", "config", "[", "'relation_scorer'", "]", ")", "\n", "self", ".", "relation_task", "=", "LossRelationsNew", "(", "config", "[", "'task-relations'", "]", ",", "self", ".", "relation_labels", ")", "\n", "\n", "self", ".", "weight", "=", "config", ".", "get", "(", "'weight'", ",", "1.0", ")", "\n", "print", "(", "\"global weight:\"", ",", "self", ".", "weight", ")", "\n", "self", ".", "eval_correct", "=", "config", "[", "'correct-evaluation'", "]", "\n", "self", ".", "train_on_predicted_spans", "=", "config", "[", "'train-on-predicted-spans'", "]", "\n", "self", ".", "span_upperbound_factor", "=", "config", "[", "'span-upperbound-factor'", "]", "\n", "self", ".", "debug", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.ncr3.NCR3.collate_func": [[305, 310], ["print", "ncr3.collate_ncr3", "len"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.ncr3.collate_ncr3"], ["", "def", "collate_func", "(", "self", ",", "datasets", ",", "device", ")", ":", "\n", "        ", "char_padding", "=", "self", ".", "embedder", ".", "char_embedder", ".", "padding", "\n", "print", "(", "\"CHAR PADDING:\"", ",", "char_padding", ")", "\n", "return", "lambda", "x", ":", "collate_ncr3", "(", "x", ",", "device", ",", "char_padding", ",", "[", "t", ".", "name", "for", "t", "in", "self", ".", "ner_tasks", "]", ",", "\n", "len", "(", "self", ".", "relation_labels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.ncr3.NCR3.begin_epoch": [[311, 315], ["None"], "methods", ["None"], ["", "def", "begin_epoch", "(", "self", ")", ":", "\n", "        ", "self", ".", "span_recall_numer", "=", "0", "\n", "self", ".", "span_recall_denom", "=", "0", "\n", "self", ".", "obj", "=", "{", "'tags'", ":", "0.0", ",", "'auto'", ":", "0.0", ",", "'coref'", ":", "0.0", ",", "'relations'", ":", "0.0", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.ncr3.NCR3.end_epoch": [[316, 321], ["print", "ncr3.NCR3.obj.items", "print"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "end_epoch", "(", "self", ",", "dataset_name", ")", ":", "\n", "        ", "print", "(", "\"{}-span-recall: {} / {} = {}\"", ".", "format", "(", "dataset_name", ",", "self", ".", "span_recall_numer", ",", "self", ".", "span_recall_denom", ",", "\n", "self", ".", "span_recall_numer", "/", "self", ".", "span_recall_denom", ")", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "obj", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "'{}-{}-loss: {}\\n'", ".", "format", "(", "dataset_name", ",", "key", ",", "value", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.ncr3.NCR3.forward": [[322, 487], ["torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "ncr3.NCR3.embedder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ncr3.NCR3.ner_ff", "modules.seq2seq.sequence_mask().to", "sum", "ncr3.create_token2mention", "ncr3.NCR3.shared_seq", "isinstance", "ncr3.NCR3.append", "ncr3.NCR3.append", "ncr3.NCR3.append", "ncr3.NCR3.ner_seq", "ncr3.NCR3.append", "tokens.size", "ncr3.SpanBuilder", "ncr3.SpanBuilder.get_max_len", "max", "ncr3.NCR3.coref_seq", "ncr3.NCR3.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ncr3.NCR3.coref_ff", "ncr3.NCR3.coref_mention_net", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "ncr3.NCR3.coref_task", "coref_output[].item", "ncr3.NCR3.relation_seq", "ncr3.NCR3.append", "ncr3.create_relation_targets", "ncr3.NCR3.relation_task", "relation_output[].item", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "modules.seq2seq.sequence_mask", "task", "ner_output[].item", "print", "print", "print", "ncr3.SpanBuilder.build", "print", "ncr3.span_intersection", "len", "ncr3.NCR3.coref_mention_agr", "util.sequence.get_mask_from_sequence_lengths().float", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "ncr3.NCR3.coref_scorer().squeeze", "ncr3.create_mention2concept", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ncr3.NCR3.relation_ff", "ncr3.NCR3.coref_mention_net", "ncr3.NCR3.relation_concept_net", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "util.sequence.get_mask_from_sequence_lengths().float", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "ncr3.NCR3.relation_scorer", "len", "print", "m.update2", "ncr3.SpanBuilder.add", "len", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "util.sequence.get_mask_from_sequence_lengths().float.unsqueeze", "util.sequence.get_mask_from_sequence_lengths().float.unsqueeze", "ncr3.NCR3.relation_mention_agr", "ncr3.NCR3.relation_concept_agr", "util.sequence.get_mask_from_sequence_lengths().float.unsqueeze", "util.sequence.get_mask_from_sequence_lengths().float.unsqueeze", "print", "print", "create_relation_targets.sum().item", "len", "util.sequence.get_mask_from_sequence_lengths", "ncr3.NCR3.coref_scorer", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "util.sequence.get_mask_from_sequence_lengths", "ncr3.NCR3.min().item", "ncr3.NCR3.max().item", "len", "torch.LongTensor().to.max", "torch.LongTensor().to.max", "torch.LongTensor().to.max", "torch.LongTensor().to.max", "torch.LongTensor().to.max", "torch.LongTensor().to.max", "create_relation_targets.sum", "len", "ncr3.NCR3.min", "ncr3.NCR3.max"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.ncr3.create_token2mention", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.ncr3.SpanBuilder.get_max_len", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.ncr3.create_relation_targets", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.seq2seq.sequence_mask", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.ncr3.SpanBuilder.build", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.ncr3.span_intersection", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.ncr3.create_mention2concept", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.update2", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.sequence.get_mask_from_sequence_lengths", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.sequence.get_mask_from_sequence_lengths"], ["", "", "def", "forward", "(", "self", ",", "inputs", ",", "labels", ",", "coref", ",", "relations", ",", "metadata", ",", "metrics", "=", "[", "]", ")", ":", "\n", "        ", "total_obj", "=", "torch", ".", "tensor", "(", "0.0", ")", ".", "cuda", "(", ")", "\n", "output", "=", "{", "}", "\n", "\n", "tokens", "=", "inputs", "[", "'tokens'", "]", "\n", "characters", "=", "inputs", "[", "'characters'", "]", "\n", "sequence_lengths", "=", "inputs", "[", "'sequence_lengths'", "]", "\n", "token_indices", "=", "inputs", "[", "'token_indices'", "]", "\n", "\n", "embeddings", "=", "self", ".", "embedder", "(", "characters", ",", "tokens", ")", "\n", "\n", "ner_outputs", "=", "[", "]", "\n", "coref_outputs", "=", "[", "]", "\n", "relation_outputs", "=", "[", "]", "\n", "\n", "if", "self", ".", "shared_seq", "is", "not", "None", ":", "\n", "            ", "shared_outputs", "=", "self", ".", "shared_seq", "(", "embeddings", ",", "sequence_lengths", ",", "token_indices", ")", "\n", "if", "isinstance", "(", "shared_outputs", ",", "tuple", ")", ":", "\n", "                ", "n", ",", "c", ",", "r", "=", "shared_outputs", "\n", "# n, c, r = shared_outputs.unbind(-1)", "\n", "", "else", ":", "\n", "                ", "n", "=", "shared_outputs", "\n", "c", "=", "shared_outputs", "\n", "r", "=", "shared_outputs", "\n", "", "ner_outputs", ".", "append", "(", "n", ")", "\n", "coref_outputs", ".", "append", "(", "c", ")", "\n", "relation_outputs", ".", "append", "(", "r", ")", "\n", "\n", "", "if", "self", ".", "ner_seq", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "ner_seq", "(", "embeddings", ",", "sequence_lengths", ",", "token_indices", ")", "\n", "ner_outputs", ".", "append", "(", "x", ")", "\n", "\n", "# checker = CheckGradient(self.tb_logger)", "\n", "\n", "", "ner_outputs", "=", "torch", ".", "cat", "(", "ner_outputs", ",", "-", "1", ")", "\n", "# ner_outputs = checker.run('ner', ner_outputs)", "\n", "ner_outputs", "=", "self", ".", "ner_ff", "(", "ner_outputs", ")", "\n", "\n", "if", "self", ".", "train_on_predicted_spans", "or", "(", "self", ".", "eval_correct", "and", "not", "self", ".", "training", ")", ":", "\n", "            ", "num_batch", "=", "tokens", ".", "size", "(", "0", ")", "\n", "spanbuilder", "=", "SpanBuilder", "(", "num_batch", ")", "\n", "", "else", ":", "\n", "            ", "spanbuilder", "=", "None", "\n", "\n", "", "seq_mask", "=", "sequence_mask", "(", "sequence_lengths", ")", ".", "to", "(", "embeddings", ".", "device", ")", "\n", "\n", "for", "task", "in", "self", ".", "ner_tasks", ":", "\n", "            ", "if", "task", ".", "enabled", ":", "\n", "                ", "ner_output", "=", "task", "(", "ner_outputs", ",", "labels", "[", "task", ".", "name", "]", ",", "sequence_lengths", ",", "seq_mask", ",", "\n", "predict", "=", "(", "not", "self", ".", "training", "or", "self", ".", "train_on_predicted_spans", ")", ")", "\n", "output", "[", "task", ".", "name", "]", "=", "ner_output", "\n", "total_obj", "+=", "ner_output", "[", "'loss'", "]", "\n", "\n", "self", ".", "obj", "[", "task", ".", "name", "]", "+=", "ner_output", "[", "'loss'", "]", ".", "item", "(", ")", "\n", "\n", "if", "'pred'", "in", "ner_output", "and", "spanbuilder", "is", "not", "None", ":", "\n", "                    ", "spanbuilder", ".", "add", "(", "ner_output", "[", "'pred'", "]", ")", "\n", "\n", "", "", "", "gold_spans", "=", "coref", "[", "'gold_spans'", "]", "\n", "\n", "if", "spanbuilder", "is", "not", "None", ":", "\n", "            ", "max_pred_spans", "=", "spanbuilder", ".", "get_max_len", "(", ")", "\n", "max_gold_spans", "=", "max", "(", "[", "len", "(", "x", ")", "for", "x", "in", "gold_spans", "]", ")", "\n", "\n", "if", "self", ".", "training", "and", "(", "max_pred_spans", ">", "max_gold_spans", "*", "self", ".", "span_upperbound_factor", "or", "max_pred_spans", "==", "0", ")", ":", "\n", "                ", "print", "(", "\"WARNING: not enough or too many predicted spans. Backing off to gold spans.\"", ")", "\n", "print", "(", "'max_pred_spans:'", ",", "max_pred_spans", ")", "\n", "print", "(", "'max_gold_spans:'", ",", "max_gold_spans", ")", "\n", "pred_spans", "=", "gold_spans", "\n", "", "else", ":", "\n", "                ", "pred_spans", "=", "spanbuilder", ".", "build", "(", ")", "\n", "print", "(", "'pred_spans:'", ",", "[", "len", "(", "x", ")", "for", "x", "in", "pred_spans", "]", ")", "\n", "\n", "self", ".", "span_recall_numer", "+=", "span_intersection", "(", "pred_spans", ",", "gold_spans", ")", "\n", "", "", "else", ":", "\n", "            ", "pred_spans", "=", "gold_spans", "\n", "\n", "", "self", ".", "span_recall_denom", "+=", "sum", "(", "[", "len", "(", "x", ")", "for", "x", "in", "gold_spans", "]", ")", "\n", "\n", "token2mention", "=", "create_token2mention", "(", "pred_spans", ",", "sequence_lengths", ",", "embeddings", ".", "device", ")", "\n", "\n", "if", "self", ".", "coref_seq", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "coref_seq", "(", "embeddings", ",", "sequence_lengths", ",", "token_indices", ")", "\n", "coref_outputs", ".", "append", "(", "x", ")", "\n", "\n", "", "if", "token2mention", "is", "not", "None", ":", "\n", "            ", "coref_outputs", "=", "torch", ".", "cat", "(", "coref_outputs", ",", "-", "1", ")", "\n", "# coref_outputs = checker.run('coref', coref_outputs)", "\n", "coref_outputs", "=", "self", ".", "coref_ff", "(", "coref_outputs", ")", "\n", "coref_mentions", "=", "self", ".", "coref_mention_net", "(", "self", ".", "coref_mention_agr", "(", "coref_outputs", ",", "token2mention", ")", ")", "\n", "", "else", ":", "\n", "            ", "coref_mentions", "=", "None", "\n", "\n", "", "if", "self", ".", "coref_task", ".", "enabled", ":", "\n", "            ", "gold_m2i", "=", "coref", "[", "'gold_m2i'", "]", "\n", "\n", "span_lengths", "=", "torch", ".", "LongTensor", "(", "[", "len", "(", "x", ")", "for", "x", "in", "pred_spans", "]", ")", ".", "to", "(", "embeddings", ".", "device", ")", "\n", "\n", "if", "coref_mentions", "is", "not", "None", ":", "\n", "                ", "mask", "=", "get_mask_from_sequence_lengths", "(", "span_lengths", ",", "span_lengths", ".", "max", "(", ")", ")", ".", "float", "(", ")", "\n", "square_mask", "=", "torch", ".", "bmm", "(", "mask", ".", "unsqueeze", "(", "-", "1", ")", ",", "mask", ".", "unsqueeze", "(", "-", "2", ")", ")", "\n", "scores", "=", "self", ".", "coref_scorer", "(", "coref_mentions", ",", "square_mask", ",", "span_lengths", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "scores", "=", "None", "\n", "\n", "", "if", "not", "self", ".", "training", ":", "\n", "                ", "coref_targets", "=", "None", "\n", "", "else", ":", "\n", "                ", "coref_targets", "=", "None", "\n", "# coref_targets = create_coref_target(pred_spans, gold_spans, gold_m2i).to(embeddings.device)", "\n", "\n", "", "coref_output", "=", "self", ".", "coref_task", "(", "scores", ",", "coref_targets", ",", "gold_m2i", "=", "gold_m2i", ",", "pred_spans", "=", "pred_spans", ",", "\n", "gold_spans", "=", "gold_spans", ",", "predict", "=", "True", ")", "\n", "output", "[", "'coref'", "]", "=", "coref_output", "\n", "total_obj", "+=", "coref_output", "[", "'loss'", "]", "\n", "\n", "self", ".", "obj", "[", "'coref'", "]", "+=", "coref_output", "[", "'loss'", "]", ".", "item", "(", ")", "\n", "\n", "", "if", "self", ".", "relation_seq", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "relation_seq", "(", "embeddings", ",", "sequence_lengths", ",", "token_indices", ")", "\n", "relation_outputs", ".", "append", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "relation_task", ".", "enabled", ":", "\n", "            ", "pred_clusters", "=", "output", "[", "'coref'", "]", "[", "'pred'", "]", "\n", "# gold_clusters = output['coref']['gold'] # WHY IS THIS INCORRECT?", "\n", "gold_clusters", "=", "relations", "[", "'gold_clusters'", "]", "\n", "\n", "if", "token2mention", "is", "not", "None", ":", "\n", "                ", "mention2concept", "=", "create_mention2concept", "(", "pred_spans", ",", "pred_clusters", ",", "embeddings", ".", "device", ")", "\n", "\n", "relation_outputs", "=", "torch", ".", "cat", "(", "relation_outputs", ",", "-", "1", ")", "\n", "# relation_outputs = checker.run('relations', relation_outputs)", "\n", "relation_outputs", "=", "self", ".", "relation_ff", "(", "relation_outputs", ")", "\n", "relation_mentions", "=", "self", ".", "coref_mention_net", "(", "self", ".", "relation_mention_agr", "(", "relation_outputs", ",", "token2mention", ")", ")", "\n", "relation_concepts", "=", "self", ".", "relation_concept_net", "(", "\n", "self", ".", "relation_concept_agr", "(", "relation_mentions", ",", "mention2concept", ")", ")", "\n", "\n", "num_concepts", "=", "torch", ".", "LongTensor", "(", "[", "len", "(", "x", ")", "for", "x", "in", "pred_clusters", "]", ")", ".", "to", "(", "embeddings", ".", "device", ")", "\n", "mask", "=", "get_mask_from_sequence_lengths", "(", "num_concepts", ",", "num_concepts", ".", "max", "(", ")", ")", ".", "float", "(", ")", "\n", "square_mask", "=", "torch", ".", "bmm", "(", "mask", ".", "unsqueeze", "(", "-", "1", ")", ",", "mask", ".", "unsqueeze", "(", "-", "2", ")", ")", "\n", "rel_scores", "=", "self", ".", "relation_scorer", "(", "relation_concepts", ",", "square_mask", ",", "num_concepts", ")", "\n", "\n", "if", "self", ".", "debug", ":", "\n", "                    ", "print", "(", "'min:'", ",", "rel_scores", ".", "min", "(", ")", ".", "item", "(", ")", ")", "\n", "print", "(", "'max:'", ",", "rel_scores", ".", "max", "(", ")", ".", "item", "(", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "rel_scores", "=", "None", "\n", "\n", "", "rel_targets", "=", "create_relation_targets", "(", "pred_clusters", ",", "gold_clusters", ",", "relations", "[", "'gold_relations'", "]", ",", "\n", "len", "(", "self", ".", "relation_labels", ")", ",", "device", "=", "embeddings", ".", "device", ")", "\n", "if", "self", ".", "debug", ":", "\n", "                ", "print", "(", "'relations active:'", ",", "rel_targets", ".", "sum", "(", ")", ".", "item", "(", ")", ")", "\n", "\n", "", "relation_output", "=", "self", ".", "relation_task", "(", "rel_scores", ",", "rel_targets", ",", "output", "[", "'coref'", "]", "[", "'pred'", "]", ",", "relations", ",", "\n", "predict", "=", "not", "self", ".", "training", ")", "\n", "output", "[", "'relations'", "]", "=", "relation_output", "\n", "total_obj", "+=", "relation_output", "[", "'loss'", "]", "\n", "\n", "self", ".", "obj", "[", "'relations'", "]", "+=", "relation_output", "[", "'loss'", "]", ".", "item", "(", ")", "\n", "\n", "", "for", "m", "in", "metrics", ":", "\n", "            ", "if", "m", ".", "task", "in", "output", ":", "\n", "                ", "m", ".", "update2", "(", "output", "[", "m", ".", "task", "]", ",", "metadata", ")", "\n", "\n", "", "", "return", "total_obj", "*", "self", ".", "weight", ",", "output", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.ncr3.NCR3.create_metrics": [[488, 495], ["metrics.extend", "metrics.extend", "metrics.extend", "ncr3.NCR3.relation_task.create_metrics", "ncr3.NCR3.coref_task.create_metrics", "task.create_metrics"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.create_metrics", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.create_metrics", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.create_metrics"], ["", "def", "create_metrics", "(", "self", ")", ":", "\n", "        ", "metrics", "=", "[", "]", "\n", "for", "task", "in", "self", ".", "ner_tasks", ":", "\n", "            ", "metrics", ".", "extend", "(", "task", ".", "create_metrics", "(", ")", ")", "\n", "", "metrics", ".", "extend", "(", "self", ".", "relation_task", ".", "create_metrics", "(", ")", ")", "\n", "metrics", ".", "extend", "(", "self", ".", "coref_task", ".", "create_metrics", "(", ")", ")", "\n", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.ncr3.NCR3.write_model": [[496, 506], ["print", "ncr3.NCR3.state_dict().items", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "k.startswith", "ncr3.NCR3.state_dict", "print"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "write_model", "(", "self", ",", "filename", ")", ":", "\n", "        ", "print", "(", "\"write model:\"", ",", "filename", ")", "\n", "mydict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "self", ".", "state_dict", "(", ")", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", ".", "startswith", "(", "'word_embeddings'", ")", ":", "\n", "                ", "print", "(", "\"skip:\"", ",", "k", ")", "\n", "continue", "\n", "", "else", ":", "\n", "                ", "mydict", "[", "k", "]", "=", "v", "\n", "", "", "torch", ".", "save", "(", "mydict", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.ncr3.NCR3.load_model": [[507, 525], ["ncr3.NCR3.state_dict", "ncr3.NCR3.update", "ncr3.NCR3.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.update"], ["", "def", "load_model", "(", "self", ",", "filename", ",", "config", ",", "to_cpu", "=", "False", ")", ":", "\n", "        ", "if", "to_cpu", ":", "\n", "            ", "partial", "=", "torch", ".", "load", "(", "filename", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "", "else", ":", "\n", "            ", "partial", "=", "torch", ".", "load", "(", "filename", ")", "\n", "\n", "# del partial['seq2seq.rnn1.rnn.module.weight_hh_l0']", "\n", "# del partial['seq2seq.rnn1.rnn.module.weight_hh_l0_reverse']", "\n", "# del partial['seq2seq.rnn2.rnn.module.weight_hh_l0']", "\n", "# del partial['seq2seq.rnn2.rnn.module.weight_hh_l0_reverse']", "\n", "# del partial['seq2seq.rnn3.rnn.module.weight_hh_l0']", "\n", "# del partial['seq2seq.rnn3.rnn.module.weight_hh_l0_reverse']", "\n", "# print(partial.keys())", "\n", "\n", "# update because word_embed is missing", "\n", "", "state", "=", "self", ".", "state_dict", "(", ")", "\n", "state", ".", "update", "(", "partial", ")", "\n", "self", ".", "load_state_dict", "(", "state", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.ncr3.collate_ncr3": [[19, 84], ["batch.sort", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "datass.collate.collate_character", "torch.pad_sequence", "torch.pad_sequence", "max", "max", "datass.collate.collate_sparse2", "datass.collate.collate_sparse2", "torch.zeros", "torch.zeros", "torch.zeros", "datass.collate.collate_sparse_to_dense_4", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "zip", "max", "torch.pad_sequence().to", "rnn_utils.pad_sequence.size", "len", "zip", "gold_clusters.append", "rnn_utils.pad_sequence.to", "datass.collate.collate_character.to", "torch.LongTensor.to", "rnn_utils.pad_sequence.to", "list", "clusters[].append", "len", "x[].size", "torch.pad_sequence", "range", "x[].size"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.collate.collate_character", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.collate.collate_sparse2", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.collate.collate_sparse2", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.collate.collate_sparse_to_dense_4"], ["def", "collate_ncr3", "(", "batch", ",", "device", ",", "char_padding", ",", "nertasks", ",", "num_relations", ")", ":", "\n", "    ", "batch", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "'tokens'", "]", ".", "size", "(", ")", "[", "0", "]", ",", "reverse", "=", "True", ")", "\n", "\n", "last_idx", "=", "max", "(", "[", "len", "(", "x", "[", "'tokens'", "]", ")", "for", "x", "in", "batch", "]", ")", "-", "1", "\n", "\n", "sequence_lengths", "=", "torch", ".", "LongTensor", "(", "[", "x", "[", "'tokens'", "]", ".", "size", "(", ")", "[", "0", "]", "for", "x", "in", "batch", "]", ")", "\n", "characters", "=", "collate_character", "(", "[", "x", "[", "'characters'", "]", "for", "x", "in", "batch", "]", ",", "50", ",", "char_padding", ")", "\n", "tokens", "=", "rnn_utils", ".", "pad_sequence", "(", "[", "x", "[", "'tokens'", "]", "for", "x", "in", "batch", "]", ",", "batch_first", "=", "True", ")", "\n", "indices", "=", "rnn_utils", ".", "pad_sequence", "(", "[", "x", "[", "'tokens-indices'", "]", "for", "x", "in", "batch", "]", ",", "batch_first", "=", "True", ",", "padding_value", "=", "last_idx", ")", "\n", "labels", "=", "{", "task", ":", "rnn_utils", ".", "pad_sequence", "(", "[", "x", "[", "task", "]", "for", "x", "in", "batch", "]", ",", "batch_first", "=", "True", ")", ".", "to", "(", "device", ")", "for", "task", "in", "nertasks", "}", "\n", "\n", "# relations", "\n", "max_tokens", "=", "tokens", ".", "size", "(", ")", "[", "1", "]", "\n", "max_mentions", "=", "max", "(", "[", "x", "[", "'token2mention'", "]", "[", "0", "]", "for", "x", "in", "batch", "]", ")", "\n", "max_concepts", "=", "max", "(", "[", "x", "[", "'mention2concept'", "]", "[", "0", "]", "for", "x", "in", "batch", "]", ")", "\n", "token2mention", "=", "collate_sparse2", "(", "[", "x", "[", "'token2mention'", "]", "for", "x", "in", "batch", "]", ",", "max_mentions", ",", "max_tokens", ")", "\n", "mention2concept", "=", "collate_sparse2", "(", "[", "x", "[", "'mention2concept'", "]", "for", "x", "in", "batch", "]", ",", "max_concepts", ",", "max_mentions", ")", "\n", "relations", "=", "torch", ".", "zeros", "(", "len", "(", "batch", ")", ",", "max_concepts", ",", "max_concepts", ",", "num_relations", ")", "\n", "collate_sparse_to_dense_4", "(", "relations", ",", "[", "x", "[", "'relations'", "]", "for", "x", "in", "batch", "]", ")", "\n", "mention_lengths", "=", "torch", ".", "LongTensor", "(", "[", "x", "[", "'coref'", "]", "[", "0", "]", "for", "x", "in", "batch", "]", ")", "\n", "concept_lengths", "=", "torch", ".", "LongTensor", "(", "[", "x", "[", "'mention2concept'", "]", "[", "0", "]", "for", "x", "in", "batch", "]", ")", "\n", "\n", "# labels['coref'] = collate_sparse_to_dense_3([x['coref'] for x in batch]).to(device)", "\n", "# labels['relations'] = relations.to(device).permute(0, 3, 1, 2)", "\n", "\n", "gold_spans", "=", "[", "[", "(", "m", "[", "0", "]", ",", "m", "[", "1", "]", ")", "for", "m", "in", "x", "[", "'spans'", "]", "]", "for", "x", "in", "batch", "]", "\n", "\n", "gold_clusters", "=", "[", "]", "\n", "for", "spans", ",", "m2c", "in", "zip", "(", "gold_spans", ",", "[", "x", "[", "'mention2concept'", "]", "for", "x", "in", "batch", "]", ")", ":", "\n", "        ", "clusters", "=", "[", "list", "(", ")", "for", "_", "in", "range", "(", "m2c", "[", "0", "]", ")", "]", "\n", "for", "mention", ",", "concept", "in", "zip", "(", "m2c", "[", "3", "]", ",", "m2c", "[", "2", "]", ")", ":", "\n", "            ", "clusters", "[", "concept", "]", ".", "append", "(", "spans", "[", "mention", "]", ")", "\n", "", "gold_clusters", ".", "append", "(", "clusters", ")", "\n", "\n", "", "metadata", "=", "{", "\n", "'identifiers'", ":", "[", "x", "[", "'id'", "]", "for", "x", "in", "batch", "]", ",", "\n", "'mentions'", ":", "[", "x", "[", "'mentions'", "]", "for", "x", "in", "batch", "]", ",", "\n", "'tokens'", ":", "[", "x", "[", "'text'", "]", "for", "x", "in", "batch", "]", "\n", "}", "\n", "\n", "inputs", "=", "{", "\n", "'tokens'", ":", "tokens", ".", "to", "(", "device", ")", ",", "\n", "'characters'", ":", "characters", ".", "to", "(", "device", ")", ",", "\n", "'sequence_lengths'", ":", "sequence_lengths", ".", "to", "(", "device", ")", ",", "\n", "'token_indices'", ":", "indices", ".", "to", "(", "device", ")", "\n", "}", "\n", "\n", "coref", "=", "{", "\n", "'gold_spans'", ":", "gold_spans", ",", "\n", "'gold_clusters'", ":", "gold_clusters", ",", "\n", "'gold_m2i'", ":", "[", "x", "[", "'clusters'", "]", "for", "x", "in", "batch", "]", ",", "\n", "}", "\n", "\n", "relations", "=", "{", "\n", "'gold_spans'", ":", "gold_spans", ",", "\n", "'gold_clusters'", ":", "gold_clusters", ",", "\n", "'gold_relations'", ":", "[", "x", "[", "'relations'", "]", "for", "x", "in", "batch", "]", ",", "\n", "}", "\n", "\n", "return", "{", "\n", "'inputs'", ":", "inputs", ",", "\n", "'labels'", ":", "labels", ",", "\n", "'coref'", ":", "coref", ",", "\n", "'relations'", ":", "relations", ",", "\n", "'metadata'", ":", "metadata", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.ncr3.create_token2mention": [[119, 141], ["max", "sequence_lengths.max().item", "torch.sparse.FloatTensor().to", "torch.sparse.FloatTensor().to", "torch.sparse.FloatTensor().to", "len", "sequence_lengths.max", "enumerate", "range", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "rows.append", "cols.append", "vals.append", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.Size", "torch.Size", "torch.Size"], "function", ["None"], ["", "", "def", "create_token2mention", "(", "spans", ",", "sequence_lengths", ",", "device", ")", ":", "\n", "    ", "max_spans", "=", "max", "(", "len", "(", "x", ")", "for", "x", "in", "spans", ")", "\n", "max_tokens", "=", "sequence_lengths", ".", "max", "(", ")", ".", "item", "(", ")", "\n", "\n", "if", "max_spans", ">", "0", ":", "\n", "        ", "rows", ",", "cols", ",", "vals", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "row_offs", ",", "col_offs", "=", "0", ",", "0", "\n", "for", "myspans", "in", "spans", ":", "\n", "            ", "for", "span_idx", ",", "(", "begin", ",", "end", ")", "in", "enumerate", "(", "myspans", ")", ":", "\n", "                ", "for", "pos", "in", "range", "(", "begin", ",", "end", "+", "1", ")", ":", "\n", "                    ", "rows", ".", "append", "(", "row_offs", "+", "span_idx", ")", "\n", "cols", ".", "append", "(", "col_offs", "+", "pos", ")", "\n", "vals", ".", "append", "(", "1.0", "/", "(", "end", "-", "begin", "+", "1", ")", ")", "\n", "", "", "row_offs", "+=", "max_spans", "\n", "col_offs", "+=", "max_tokens", "\n", "\n", "", "token2mention", "=", "torch", ".", "sparse", ".", "FloatTensor", "(", "torch", ".", "LongTensor", "(", "[", "rows", ",", "cols", "]", ")", ",", "torch", ".", "FloatTensor", "(", "vals", ")", ",", "\n", "torch", ".", "Size", "(", "[", "row_offs", ",", "col_offs", "]", ")", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "        ", "token2mention", "=", "None", "\n", "\n", "", "return", "token2mention", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.ncr3.create_mention2concept": [[183, 207], ["len", "max", "max", "zip", "torch.sparse.FloatTensor().to", "torch.sparse.FloatTensor().to", "torch.sparse.FloatTensor().to", "enumerate", "len", "len", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "enumerate", "mentions.append", "concepts.append", "vals.append", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.Size", "torch.Size", "torch.Size", "len"], "function", ["None"], ["", "", "def", "create_mention2concept", "(", "spans", ",", "clusters", ",", "device", ")", ":", "\n", "    ", "num_batch", "=", "len", "(", "spans", ")", "\n", "max_spans", "=", "max", "(", "[", "len", "(", "x", ")", "for", "x", "in", "spans", "]", ")", "\n", "max_clusters", "=", "max", "(", "[", "len", "(", "x", ")", "for", "x", "in", "clusters", "]", ")", "\n", "mentions", "=", "[", "]", "\n", "concepts", "=", "[", "]", "\n", "vals", "=", "[", "]", "\n", "offset_mentions", "=", "0", "\n", "offset_concepts", "=", "0", "\n", "\n", "for", "myspans", ",", "myclusters", "in", "zip", "(", "spans", ",", "clusters", ")", ":", "\n", "        ", "span2index", "=", "{", "span", ":", "idx", "for", "idx", ",", "span", "in", "enumerate", "(", "myspans", ")", "}", "\n", "\n", "for", "idx", ",", "cluster", "in", "enumerate", "(", "myclusters", ")", ":", "\n", "            ", "for", "span", "in", "cluster", ":", "\n", "                ", "mentions", ".", "append", "(", "offset_mentions", "+", "span2index", "[", "span", "]", ")", "\n", "concepts", ".", "append", "(", "offset_concepts", "+", "idx", ")", "\n", "vals", ".", "append", "(", "1.0", "/", "len", "(", "cluster", ")", ")", "\n", "\n", "", "", "offset_mentions", "+=", "max_spans", "\n", "offset_concepts", "+=", "max_clusters", "\n", "\n", "", "return", "torch", ".", "sparse", ".", "FloatTensor", "(", "torch", ".", "LongTensor", "(", "[", "concepts", ",", "mentions", "]", ")", ",", "torch", ".", "FloatTensor", "(", "vals", ")", ",", "\n", "torch", ".", "Size", "(", "[", "offset_concepts", ",", "offset_mentions", "]", ")", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.ncr3.create_relation_targets": [[209, 236], ["len", "max", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "torch.zeros.to", "zip", "len", "enumerate", "len", "set", "set", "rels.append", "enumerate"], "function", ["None"], ["", "def", "create_relation_targets", "(", "pred_clusters", ",", "gold_clusters", ",", "gold_relations", ",", "num_relations", ",", "device", ")", ":", "\n", "# print('pred_clusters:', pred_clusters)", "\n", "# print('gold_relations:', gold_relations)", "\n", "# print('num_relations:', num_relations)", "\n", "\n", "    ", "num_batch", "=", "len", "(", "pred_clusters", ")", "\n", "max_clusters", "=", "max", "(", "[", "len", "(", "x", ")", "for", "x", "in", "pred_clusters", "]", ")", "\n", "\n", "targets", "=", "torch", ".", "zeros", "(", "num_batch", ",", "max_clusters", ",", "max_clusters", ",", "num_relations", ")", "\n", "\n", "for", "batch", ",", "(", "pred", ",", "gold", ",", "relations", ")", "in", "enumerate", "(", "zip", "(", "pred_clusters", ",", "gold_clusters", ",", "gold_relations", ")", ")", ":", "\n", "        ", "pred", "=", "[", "set", "(", "x", ")", "for", "x", "in", "pred", "]", "\n", "gold", "=", "[", "set", "(", "x", ")", "for", "x", "in", "gold", "]", "\n", "\n", "rels", "=", "[", "]", "\n", "len_gold", "=", "len", "(", "gold", ")", "\n", "for", "src", ",", "dst", ",", "rel", "in", "relations", "[", "1", "]", ":", "\n", "# if src < len_gold and dst < len_gold:       # ARG!!!", "\n", "            ", "rels", ".", "append", "(", "(", "gold", "[", "src", "]", ",", "gold", "[", "dst", "]", ",", "rel", ")", ")", "\n", "\n", "", "for", "src", ",", "src_cluster", "in", "enumerate", "(", "pred", ")", ":", "\n", "            ", "for", "dst", ",", "dst_cluster", "in", "enumerate", "(", "pred", ")", ":", "\n", "                ", "for", "r", "in", "rels", ":", "\n", "                    ", "if", "src_cluster", "<=", "r", "[", "0", "]", "and", "dst_cluster", "<=", "r", "[", "1", "]", ":", "\n", "                        ", "targets", "[", "batch", ",", "src", ",", "dst", ",", "r", "[", "2", "]", "]", "=", "1.0", "\n", "\n", "", "", "", "", "", "return", "targets", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.ncr3.span_intersection": [[238, 243], ["zip", "len", "set", "set"], "function", ["None"], ["", "def", "span_intersection", "(", "pred", ",", "gold", ")", ":", "\n", "    ", "numer", "=", "0", "\n", "for", "p", ",", "g", "in", "zip", "(", "pred", ",", "gold", ")", ":", "\n", "        ", "numer", "+=", "len", "(", "set", "(", "p", ")", "&", "set", "(", "g", ")", ")", "\n", "", "return", "numer", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.corefbasic.ModuleCorefBasic.__init__": [[9, 14], ["torch.Module.__init__", "print", "models.coreflinker.scorers.OptFFpairs"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["    ", "def", "__init__", "(", "self", ",", "dim_span", ",", "coref_pruner", ",", "span_pair_generator", ",", "config", ")", ":", "\n", "        ", "super", "(", "ModuleCorefBasic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "print", "(", "\"ModuleCorefBasic\"", ")", "\n", "self", ".", "scorer", "=", "OptFFpairs", "(", "dim_span", ",", "1", ",", "config", ",", "span_pair_generator", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.corefbasic.ModuleCorefBasic.forward": [[15, 24], ["corefbasic.ModuleCorefBasic.scorer().squeeze", "modules.utils.misc.coref_add_scores", "corefbasic.ModuleCorefBasic.scorer"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.coref_add_scores"], ["", "def", "forward", "(", "self", ",", "all_spans", ",", "filtered_spans", ",", "sequence_lengths", ")", ":", "\n", "        ", "update", "=", "filtered_spans", "[", "'span_vecs'", "]", "\n", "filtered_span_begin", "=", "filtered_spans", "[", "'span_begin'", "]", "\n", "filtered_span_end", "=", "filtered_spans", "[", "'span_end'", "]", "\n", "\n", "coref_scores", "=", "self", ".", "scorer", "(", "update", ",", "filtered_span_begin", ",", "filtered_span_end", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "coref_scores", "=", "coref_add_scores", "(", "coref_scores", ",", "filtered_spans", "[", "'span_scores'", "]", ")", "\n", "\n", "return", "all_spans", ",", "filtered_spans", ",", "coref_scores", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_mtt_prop_hoi.ModuleCorefLinkerMTTPropE2EHoi.__init__": [[14, 62], ["torch.Module.__init__", "print", "models.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi", "modules.utils.misc.MyGate", "modules.text_field.TextFieldEmbedderTokens", "modules.entity_embeddings.KolitsasEntityEmbeddings", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["    ", "def", "__init__", "(", "self", ",", "dim_span", ",", "coref_pruner", ",", "span_pair_generator", ",", "config", ",", "dictionaries", ")", ":", "\n", "# TODO: we are here: pass dim_entity here", "\n", "        ", "super", "(", "ModuleCorefLinkerMTTPropE2EHoi", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# no graph propagations in the first version", "\n", "self", ".", "coref_prop", "=", "None", "\n", "\n", "print", "(", "\"ModuleCorefLinkerMTTPropE2E(cp={})\"", ".", "format", "(", "self", ".", "coref_prop", ")", ")", "\n", "\n", "self", ".", "coref_pruner", "=", "coref_pruner", "\n", "\n", "# self.coref = OptFFpairs(dim_span, 1, config['linkercoref_prop'], span_pair_generator)", "\n", "\n", "self", ".", "enabled", "=", "config", "[", "'enabled'", "]", "\n", "self", ".", "nonlinear_function", "=", "config", "[", "'nonlinear_function'", "]", "\n", "self", ".", "smart_arsinh", "=", "config", "[", "'smart_arsinh'", "]", "\n", "self", ".", "float_precision", "=", "config", "[", "'float_precision'", "]", "\n", "\n", "if", "self", ".", "enabled", ":", "\n", "            ", "self", ".", "zeros_to_clusters", "=", "config", "[", "'zeros_to_clusters'", "]", "\n", "self", ".", "zeros_to_links", "=", "config", "[", "'zeros_to_links'", "]", "\n", "self", ".", "init_weights_std", "=", "config", "[", "'coreflinker_prop'", "]", "[", "'init_weights_std'", "]", "\n", "self", ".", "add_pruner_to_root", "=", "config", "[", "'add_pruner_to_root'", "]", "\n", "self", ".", "root_link_max_spans_to_link", "=", "config", "[", "'root_link_max_spans_to_link'", "]", "\n", "self", ".", "embeddings_type", "=", "config", "[", "'entity_embedder'", "]", "[", "'type'", "]", "\n", "# self.entity_embedder = TextFieldEmbedderTokens(dictionaries, config['entity_embedder'])", "\n", "if", "self", ".", "embeddings_type", "==", "'yamada-johannes'", ":", "\n", "                ", "self", ".", "entity_embedder", "=", "TextFieldEmbedderTokens", "(", "dictionaries", ",", "config", "[", "'entity_embedder'", "]", ")", "\n", "", "elif", "self", ".", "embeddings_type", "==", "'kolitsas'", ":", "\n", "                ", "self", ".", "entity_embedder", "=", "KolitsasEntityEmbeddings", "(", "dictionaries", ",", "config", "[", "'entity_embedder'", "]", ")", "\n", "", "else", ":", "\n", "                ", "raise", "RuntimeError", "(", "\n", "'Unrecognized embeddings type in ModuleCorefLinkerPropE2EHoi: '", "+", "self", ".", "embeddings_type", ")", "\n", "\n", "# if config['model_type'] == 'base':", "\n", "", "self", ".", "linker_coref", "=", "OptFFpairsCorefLinkerMTTBaseHoi", "(", "dim_span", ",", "self", ".", "entity_embedder", ",", "\n", "1", ",", "config", "[", "'coreflinker_prop'", "]", ",", "span_pair_generator", ",", "\n", "# filter_singletons_with_matrix=False,", "\n", "dictionaries", "=", "dictionaries", ",", "\n", "zeros_to_clusters", "=", "self", ".", "zeros_to_clusters", ",", "\n", "zeros_to_links", "=", "self", ".", "zeros_to_links", ")", "\n", "# elif config['model_type'] == 'super-naive':", "\n", "#     self.linker_coref = OptFFpairsLinkerCorefNaive(dim_span, self.entity_embedder.dim,", "\n", "#                                                    1, config['model_details'], span_pair_generator,", "\n", "#                                                    filter_singletons_with_matrix=False)", "\n", "self", ".", "gate", "=", "MyGate", "(", "dim_span", ",", "init_weights_std", "=", "self", ".", "init_weights_std", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "entity_embedder", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_mtt_prop_hoi.ModuleCorefLinkerMTTPropE2EHoi.coref_add_scores_coreflinker": [[63, 96], ["filtered_prune_scores.squeeze().unsqueeze", "torch.eye().unsqueeze().to", "torch.eye().unsqueeze().to", "torch.eye().unsqueeze().to", "torch.eye().unsqueeze().to", "filtered_prune_scores.squeeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "filtered_prune_scores.squeeze().unsqueeze.size", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "coref_scores.size", "filtered_prune_scores.squeeze().unsqueeze.size", "coref_scores.size", "coref_scores.size"], "methods", ["None"], ["", "", "def", "coref_add_scores_coreflinker", "(", "self", ",", "coref_scores", ",", "filtered_prune_scores", ",", "filter_singletons_with_matrix", ",", "\n", "subtract_pruner_for_singletons", "=", "True", ")", ":", "\n", "        ", "scores_left", "=", "filtered_prune_scores", "# .shape --> torch.Size([1, 21, 1])", "\n", "\n", "scores_right", "=", "filtered_prune_scores", ".", "squeeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "2", ")", "# .shape --> torch.Size([1, 1, 21])", "\n", "if", "not", "(", "self", ".", "zeros_to_clusters", "or", "self", ".", "zeros_to_links", ")", ":", "\n", "            ", "if", "self", ".", "add_pruner_to_root", ":", "\n", "                ", "coref_scores", "=", "coref_scores", "+", "scores_left", "\n", "", "else", ":", "\n", "                ", "coref_scores", "[", ":", ",", ":", ",", "1", ":", "]", "=", "coref_scores", "[", ":", ",", ":", ",", "1", ":", "]", "+", "scores_left", "\n", "", "", "else", ":", "\n", "# the connections to root are not added", "\n", "            ", "coref_scores", "[", ":", ",", ":", ",", "1", ":", "]", "=", "coref_scores", "[", ":", ",", ":", ",", "1", ":", "]", "+", "scores_left", "\n", "\n", "", "coref_scores", "[", ":", ",", ":", ",", "-", "scores_right", ".", "size", "(", "-", "1", ")", ":", "]", "=", "coref_scores", "[", ":", ",", ":", ",", "-", "scores_right", ".", "size", "(", "-", "1", ")", ":", "]", "+", "scores_right", "\n", "# coref_scores.shape --> torch.Size([1, 21, 37])", "\n", "# scores_right.shape --> torch.Size([1, 1, 21])", "\n", "# scores_right.size(-1) --> 21", "\n", "\n", "# zero-out self references (without this pruner doesn't work)", "\n", "eye", "=", "torch", ".", "eye", "(", "coref_scores", ".", "size", "(", "1", ")", ",", "device", "=", "settings", ".", "device", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "coref_scores", ")", "\n", "#", "\n", "#", "\n", "coref_scores", "[", ":", ",", ":", ",", "-", "coref_scores", ".", "size", "(", "1", ")", ":", "]", "=", "coref_scores", "[", ":", ",", ":", ",", "-", "coref_scores", ".", "size", "(", "1", ")", ":", "]", "*", "(", "1.0", "-", "eye", ")", "\n", "# coref_scores.shape --> torch.Size([1, 21, 37])", "\n", "# eye.shape --> torch.Size([1, 21, 21]) ; coref_scores[:, :, -coref_scores.size(1):].shape --> torch.Size([1, 21, 21])", "\n", "# if filter_singletons_with_matrix:", "\n", "#     # also adds (TODO substracts???) the pruner scores to the mentions in the positions to be ignored", "\n", "#     # has to subtract twice because it was added using scores_left already (see above)", "\n", "#     if subtract_pruner_for_singletons:", "\n", "#         coref_scores[:, :, :1] = coref_scores[:, :, :1] - scores_left - scores_left", "\n", "#     # print('TODO: ADD OR SUBSTRACT PRUNER SCORES FOR THE NOT ENTITY MENTION SINGLETONS??? ')", "\n", "return", "coref_scores", "\n", "# coref_scores.shape --> torch.Size([1, 21, 37])", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_mtt_prop_hoi.ModuleCorefLinkerMTTPropE2EHoi.forward": [[98, 186], ["modules.misc.misc.batched_index_select", "modules.utils.misc.filter_spans", "modules.misc.misc.batched_index_select.to", "modules.misc.misc.batched_index_select().squeeze", "modules.misc.misc.batched_index_select().squeeze.max().item", "coreflinker_mtt_prop_hoi.ModuleCorefLinkerMTTPropE2EHoi.entity_embedder", "coreflinker_mtt_prop_hoi.ModuleCorefLinkerMTTPropE2EHoi.linker_coref().squeeze", "coreflinker_mtt_prop_hoi.ModuleCorefLinkerMTTPropE2EHoi.coref_add_scores_coreflinker", "linker_indices_hoi.to", "filtered_spans[].unsqueeze", "modules.misc.misc.batched_index_select", "modules.misc.misc.batched_index_select().squeeze.max", "coreflinker_mtt_prop_hoi.ModuleCorefLinkerMTTPropE2EHoi.linker_coref", "linker[].unsqueeze"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.batched_index_select", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.filter_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_mtt_prop_hoi.ModuleCorefLinkerMTTPropE2EHoi.coref_add_scores_coreflinker", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.batched_index_select"], ["", "def", "forward", "(", "self", ",", "all_spans", ",", "filtered_spans", ",", "sequence_lengths", ",", "linker", ")", ":", "\n", "\n", "# if (not self.enabled) or (linker_spans.shape[1] == 0 and (not self.end_to_end)):", "\n", "#     return all_spans, filtered_spans, None", "\n", "        ", "if", "not", "self", ".", "enabled", "or", "filtered_spans", "[", "'span_vecs'", "]", "is", "None", ":", "\n", "            ", "return", "all_spans", ",", "filtered_spans", ",", "None", "\n", "\n", "# all_vecs = all_spans['span_vecs']  # torch.Size([1, 69, 5, 1676])", "\n", "", "cand_all_vecs", "=", "all_spans", "[", "'cand_span_vecs'", "]", "\n", "# cand_all_vecs.shape --> torch.Size([1, 335, 2324])", "\n", "# prune_indices", "\n", "# all_vecs should be of # torch.Size([1, 69, 5, 1676])", "\n", "# filtered_vecs = filtered_spans['span_vecs']  # torch.Size([1, 14, 1676])", "\n", "\n", "# TODO (13/10/2020) - changing to include end-to-end candidates, which would be the candidates not for gold", "\n", "#   BUT for the filtered_spans!", "\n", "\n", "# linker_candidates = batched_index_select(linker['cands_all_spans_no_nill'], filtered_spans['prune_indices'])", "\n", "linker_indices_hoi", "=", "filtered_spans", "[", "'prune_indices_hoi'", "]", "\n", "# linker_indices_hoi.shape --> torch.Size([1, 21])", "\n", "\n", "# linker_candidates = batched_index_select(linker['candidates'], filtered_spans['prune_indices'])", "\n", "linker_candidates", "=", "batched_index_select", "(", "linker", "[", "'candidates'", "]", ",", "linker_indices_hoi", ")", "\n", "# linker['candidates'].shape --> torch.Size([1, 335, 16])", "\n", "# linker_candidates.shape --> torch.Size([1, 21, 16])", "\n", "\n", "# TODO 13/10/2020 - WE ARE HERE: use batched_index_select from allennlp to get the candidates.", "\n", "#    batch index select of linker['cands_all_spans_no_nill'] based on indices in filtered_spans['prune_indices']", "\n", "\n", "# TODO (13/10/2020) - end changing to include end-to-end candidates, which would be the candidates not for gold", "\n", "#   BUT for the filtered_spans!", "\n", "\n", "filtered_span_begin", "=", "filtered_spans", "[", "'span_begin'", "]", "# --> torch.Size([1, 21])", "\n", "filtered_span_end", "=", "filtered_spans", "[", "'span_end'", "]", "# --> torch.Size([1, 21])", "\n", "\n", "# triangular_mask = filtered_spans['triangular_mask']", "\n", "\n", "# (11/10/2020) - new code that takes directly the filtered_spans", "\n", "# TODO: this has to be changed, can not rely on the exact position of filtered['span_vecs']!!!", "\n", "# linker_span_embeddings = filtered_spans['span_vecs']", "\n", "linker_span_embeddings", "=", "filter_spans", "(", "cand_all_vecs", ",", "linker_indices_hoi", ".", "to", "(", "cand_all_vecs", ".", "device", ")", ")", "\n", "# linker_span_embeddings.shape --> torch.Size([1, 21, 2324])", "\n", "# (11/10/2020) - end new code that takes directly the filtered_spans", "\n", "\n", "candidates", "=", "linker_candidates", ".", "to", "(", "settings", ".", "device", ")", "# torch.Size([1, 9, 17])", "\n", "# candidate_lengths = batched_index_select(linker['candidate_lengths'].unsqueeze(-1),", "\n", "#                                          filtered_spans['prune_indices']).squeeze(-1)", "\n", "candidate_lengths", "=", "batched_index_select", "(", "linker", "[", "'candidate_lengths'", "]", ".", "unsqueeze", "(", "-", "1", ")", ",", "linker_indices_hoi", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "# linker['candidate_lengths'].shape --> torch.Size([1, 335])", "\n", "# filtered_spans['prune_indices_hoi'].shape --> torch.Size([1, 21])", "\n", "# candidate_lengths.shape --> torch.Size([1, 21])", "\n", "\n", "max_cand_length", "=", "candidate_lengths", ".", "max", "(", ")", ".", "item", "(", ")", "\n", "candidates", "=", "candidates", "[", ":", ",", ":", ",", ":", "max_cand_length", "]", "\n", "\n", "candidate_vecs", "=", "self", ".", "entity_embedder", "(", "candidates", ")", "# torch.Size([1, 9, 17, 200])", "\n", "\n", "# if not self.end_to_end:", "\n", "update_mentions", "=", "linker_span_embeddings", "# torch.Size([1, 21, 2324])", "\n", "update_entities", "=", "candidate_vecs", "# torch.Size([1, 21, 16, 200]) (before was torch.Size([1, 9, 17, 200]), correct???)", "\n", "\n", "linker_coref_scores", "=", "self", ".", "linker_coref", "(", "update_mentions", ",", "update_entities", ",", "filtered_span_begin", ",", "\n", "filtered_span_end", ",", "candidate_lengths", "=", "candidate_lengths", ",", "\n", "max_cand_length", "=", "max_cand_length", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "# candidate_lengths=linker['candidate_lengths']).squeeze(-1)", "\n", "# linker_coref_scores.shape -->", "\n", "linker_coref_scores", "=", "self", ".", "coref_add_scores_coreflinker", "(", "linker_coref_scores", ",", "\n", "filtered_spans", "[", "'span_scores'", "]", ".", "unsqueeze", "(", "-", "1", ")", ",", "\n", "# self.filter_singletons_with_matrix,", "\n", "False", ",", "subtract_pruner_for_singletons", "=", "False", ")", "\n", "# linker_coref_scores.shape --> torch.Size([1, 21, 38])", "\n", "# if self.nonlinear_function is not None and self.nonlinear_function == 'arsinh':", "\n", "#     if not self.smart_arsinh:", "\n", "#         # if it is smart_arsinh, it does the simplification directly in coreflinker_mtt_hoi.py", "\n", "#         linker_coref_scores = torch.arcsinh(linker_coref_scores)", "\n", "# subtract_pruner_for_singletons=self.subtract_pruner_for_singletons)", "\n", "\n", "# TODO: is this.copy() necessary??? maybe when doing graph propagation, but not now", "\n", "# update_all = all_spans.copy()", "\n", "# update_filtered = filtered_spans.copy()", "\n", "update_all", "=", "all_spans", "\n", "update_filtered", "=", "filtered_spans", "\n", "\n", "# if self.float_precision == 'float64':", "\n", "#     linker_coref_scores = linker_coref_scores.double()", "\n", "\n", "return", "update_all", ",", "update_filtered", ",", "linker_coref_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_mtt_prop_hoi.ModuleCorefLinkerMTTPropE2EHoi.log_stats": [[187, 190], ["None"], "methods", ["None"], ["", "def", "log_stats", "(", "self", ",", "dataset_name", ",", "predict", ",", "tb_logger", ",", "step_nr", ")", ":", "\n", "# TODO: think maybe some stats useful here", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.relsimple.ModuleRelSimple.__init__": [[7, 11], ["torch.Module.__init__", "print", "modules.graph.create_graph", "len"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.modules.graph.create_graph"], ["    ", "def", "__init__", "(", "self", ",", "dim_span", ",", "labels", ",", "config", ")", ":", "\n", "        ", "super", "(", "ModuleRelSimple", ",", "self", ")", ".", "__init__", "(", ")", "\n", "print", "(", "'ModuleRelSimple:'", ",", "config", ")", "\n", "self", ".", "scorer", "=", "create_graph", "(", "dim_span", ",", "len", "(", "labels", ")", ",", "config", "[", "'scorer'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.relsimple.ModuleRelSimple.forward": [[12, 22], ["relsimple.ModuleRelSimple.scorer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "all_spans", ",", "filtered_spans", ",", "sequence_lengths", ")", ":", "\n", "        ", "update", "=", "filtered_spans", "[", "'span_vecs'", "]", "\n", "filtered_span_begin", "=", "filtered_spans", "[", "'span_begin'", "]", "\n", "filtered_span_end", "=", "filtered_spans", "[", "'span_end'", "]", "\n", "square_mask", "=", "filtered_spans", "[", "'square_mask'", "]", "\n", "span_lengths", "=", "filtered_spans", "[", "'span_lengths'", "]", "\n", "\n", "_", ",", "relation_scores", "=", "self", ".", "scorer", "(", "update", ",", "square_mask", ")", "\n", "\n", "return", "all_spans", ",", "filtered_spans", ",", "relation_scores", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.pruner.MentionPrunerSuper.__init__": [[41, 43], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MentionPrunerSuper", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.pruner.MentionPrunerSuper.forward": [[44, 47], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "all_spans", ",", "gold_spans", ",", "sequence_lengths", ",", "gold_spans_lengths", "=", "None", ",", "gold_span_tensors", "=", "None", ",", "\n", "doc_id", "=", "None", ",", "api_call", "=", "False", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.pruner.MentionPrunerGold.__init__": [[51, 60], ["pruner.MentionPrunerSuper.__init__"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "max_span_length", ",", "config", ")", ":", "\n", "        ", "super", "(", "MentionPrunerGold", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "max_span_length", "=", "max_span_length", "\n", "self", ".", "scorer", "=", "None", "\n", "self", ".", "sort_after_pruning", "=", "config", "[", "'sort_after_pruning'", "]", "\n", "self", ".", "span_generated", "=", "0", "\n", "self", ".", "span_recall_numer", "=", "0", "\n", "self", ".", "span_recall_denom", "=", "0", "\n", "self", ".", "span_loss", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.pruner.MentionPrunerGold.forward": [[61, 126], ["modules.utils.misc.spans_to_indices", "torch.zeros().unsqueeze().to", "torch.zeros().unsqueeze().to", "torch.zeros().unsqueeze().to", "torch.zeros().unsqueeze().to", "modules.utils.misc.indices_to_spans", "modules.utils.misc.create_masks", "sum", "models.ncr3.span_intersection", "sum", "torch.zeros().unsqueeze().to.view", "torch.zeros().unsqueeze().to.view", "modules.utils.misc.sort_after_pruning", "modules.utils.misc.spans_to_indices.size", "modules.utils.misc.spans_to_indices.size", "torch.zeros().unsqueeze", "torch.zeros().unsqueeze", "torch.zeros().unsqueeze", "torch.zeros().unsqueeze", "torch.zeros().unsqueeze().to.size", "torch.zeros().unsqueeze().to.size", "len", "len", "modules.utils.misc.filter_spans", "modules.utils.misc.filter_spans", "modules.utils.misc.filter_spans", "modules.utils.misc.filter_spans", "span_begin.view", "span_end.view", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros().unsqueeze().to.size", "torch.zeros().unsqueeze().to.size", "torch.zeros().unsqueeze().to.size", "torch.zeros().unsqueeze().to.size", "span_mask.size"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.spans_to_indices", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.indices_to_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.create_masks", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.ncr3.span_intersection", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.misc.sort_after_pruning", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.filter_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.filter_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.filter_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.filter_spans"], ["", "def", "forward", "(", "self", ",", "all_spans", ",", "gold_spans", ",", "sequence_lengths", ",", "gold_spans_lengths", "=", "None", ",", "gold_span_tensors", "=", "None", ",", "\n", "doc_id", "=", "None", ",", "api_call", "=", "False", ")", ":", "\n", "        ", "span_vecs", "=", "all_spans", "[", "'span_vecs'", "]", "\n", "span_mask", "=", "all_spans", "[", "'span_mask'", "]", "\n", "span_begin", "=", "all_spans", "[", "'span_begin'", "]", "\n", "span_end", "=", "all_spans", "[", "'span_end'", "]", "\n", "\n", "# filtered_span_begin = gold_span_tensors[:, :, 0].unsqueeze(-1)", "\n", "# filtered_span_end = gold_span_tensors[:, :, 1].unsqueeze(-1)", "\n", "gold_span_indices", "=", "spans_to_indices", "(", "gold_span_tensors", ",", "self", ".", "max_span_length", ")", "\n", "prune_scores", "=", "torch", ".", "zeros", "(", "span_mask", ".", "size", "(", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "to", "(", "settings", ".", "device", ")", "\n", "\n", "reindex", "=", "None", "\n", "if", "self", ".", "sort_after_pruning", ":", "\n", "            ", "pr_scores", "=", "prune_scores", ".", "view", "(", "prune_scores", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "gold_span_indices", ",", "reindex", "=", "sort_after_pruning", "(", "gold_span_indices", ",", "gold_spans_lengths", ",", "pr_scores", ")", "\n", "\n", "", "gold_spans", "=", "indices_to_spans", "(", "gold_span_indices", ",", "gold_spans_lengths", ",", "self", ".", "max_span_length", ")", "\n", "\n", "square_mask", ",", "triangular_mask", "=", "create_masks", "(", "gold_spans_lengths", ",", "gold_span_indices", ".", "size", "(", "1", ")", ")", "\n", "if", "gold_span_indices", ".", "size", "(", "-", "1", ")", "==", "0", ":", "\n", "            ", "return", "0", ",", "all_spans", ",", "{", "\n", "'prune_indices'", ":", "gold_span_indices", ",", "\n", "'reindex_wrt_gold'", ":", "reindex", ",", "\n", "'span_vecs'", ":", "None", ",", "\n", "'span_scores'", ":", "None", ",", "\n", "'span_begin'", ":", "None", ",", "\n", "'span_end'", ":", "None", ",", "\n", "'span_lengths'", ":", "None", ",", "\n", "'square_mask'", ":", "None", ",", "\n", "'triangular_mask'", ":", "None", ",", "\n", "'spans'", ":", "gold_spans", ",", "\n", "'enabled_spans'", ":", "None", "\n", "}", "\n", "# else:", "\n", "#     update = filter_spans(all_spans['span_vecs'], gold_span_indices)", "\n", "# fills in the filtered spans with the gold spans to be used in the 'rest' of the code", "\n", "# since it is not end to end", "\n", "# filtered_spans_rest = dict()", "\n", "# filtered_spans_rest['span_vecs'] = update", "\n", "# filtered_spans_rest['span_begin'] = filtered_span_begin", "\n", "# filtered_spans_rest['span_end'] = filtered_span_end", "\n", "# filtered_spans_rest['prune_indices'] = gold_span_indices", "\n", "# filtered_spans_rest['span_lengths'] = gold_spans_lengths", "\n", "", "obj_pruner", "=", "0", "\n", "enabled_spans", "=", "gold_spans", "\n", "\n", "self", ".", "span_generated", "+=", "sum", "(", "[", "len", "(", "x", ")", "for", "x", "in", "gold_spans", "]", ")", "\n", "self", ".", "span_recall_numer", "+=", "span_intersection", "(", "gold_spans", ",", "gold_spans", ")", "\n", "self", ".", "span_recall_denom", "+=", "sum", "(", "[", "len", "(", "x", ")", "for", "x", "in", "gold_spans", "]", ")", "\n", "\n", "# # something like this???", "\n", "# return gold_spans", "\n", "return", "obj_pruner", ",", "all_spans", ",", "{", "\n", "'prune_indices'", ":", "gold_span_indices", ",", "\n", "'reindex_wrt_gold'", ":", "reindex", ",", "\n", "'span_vecs'", ":", "filter_spans", "(", "span_vecs", ",", "gold_span_indices", ")", ",", "\n", "'span_scores'", ":", "filter_spans", "(", "prune_scores", ",", "gold_span_indices", ")", ",", "\n", "'span_begin'", ":", "filter_spans", "(", "span_begin", ".", "view", "(", "prune_scores", ".", "size", "(", ")", ")", ",", "gold_span_indices", ")", ",", "\n", "'span_end'", ":", "filter_spans", "(", "span_end", ".", "view", "(", "prune_scores", ".", "size", "(", ")", ")", ",", "gold_span_indices", ")", ",", "\n", "'span_lengths'", ":", "gold_spans_lengths", ",", "\n", "'square_mask'", ":", "square_mask", ",", "\n", "'triangular_mask'", ":", "triangular_mask", ",", "\n", "'spans'", ":", "gold_spans", ",", "\n", "'enabled_spans'", ":", "enabled_spans", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.pruner.MentionPrunerGold.end_epoch": [[128, 138], ["print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "end_epoch", "(", "self", ",", "dataset_name", ")", ":", "\n", "        ", "print", "(", "\"{}-span-generator: {} / {} = {}\"", ".", "format", "(", "dataset_name", ",", "self", ".", "span_generated", ",", "self", ".", "span_recall_denom", ",", "\n", "self", ".", "span_generated", "/", "(", "self", ".", "span_recall_denom", "+", "1e-7", ")", ")", ")", "\n", "print", "(", "\"{}-span-recall: {} / {} = {}\"", ".", "format", "(", "dataset_name", ",", "self", ".", "span_recall_numer", ",", "self", ".", "span_recall_denom", ",", "\n", "self", ".", "span_recall_numer", "/", "(", "self", ".", "span_recall_denom", "+", "1e-7", ")", ")", ")", "\n", "print", "(", "\"{}-span-loss: {}\"", ".", "format", "(", "dataset_name", ",", "self", ".", "span_loss", ")", ")", "\n", "self", ".", "span_generated", "=", "0", "\n", "self", ".", "span_recall_numer", "=", "0", "\n", "self", ".", "span_recall_denom", "=", "0", "\n", "self", ".", "span_loss", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.pruner.MentionPruner.__init__": [[142, 172], ["pruner.MentionPrunerSuper.__init__", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.Sequential", "torch.Sequential", "print", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["    ", "def", "__init__", "(", "self", ",", "dim_span", ",", "max_span_length", ",", "config", ")", ":", "\n", "        ", "super", "(", "MentionPruner", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "dim_span", "=", "dim_span", "\n", "self", ".", "hidden_dim", "=", "config", "[", "'hidden_dim'", "]", "# 150", "\n", "self", ".", "hidden_dp", "=", "config", "[", "'hidden_dropout'", "]", "# 0.4", "\n", "self", ".", "max_span_length", "=", "max_span_length", "\n", "self", ".", "sort_after_pruning", "=", "config", "[", "'sort_after_pruning'", "]", "\n", "self", ".", "prune_ratio", "=", "config", "[", "'prune_ratio'", "]", "\n", "self", ".", "add_pruner_loss", "=", "config", "[", "'add_pruner_loss'", "]", "\n", "self", ".", "weight", "=", "config", "[", "'weight'", "]", "if", "self", ".", "add_pruner_loss", "else", "None", "\n", "self", ".", "loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", "reduction", "=", "'none'", ")", "\n", "\n", "self", ".", "scorer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "dim_span", ",", "self", ".", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "self", ".", "hidden_dp", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "self", ".", "hidden_dp", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", ",", "1", ")", "\n", ")", "\n", "\n", "print", "(", "\"MentionPruner:\"", ",", "self", ".", "max_span_length", ",", "self", ".", "prune_ratio", ",", "self", ".", "sort_after_pruning", ",", "self", ".", "add_pruner_loss", ")", "\n", "self", ".", "span_generated", "=", "0", "\n", "self", ".", "span_recall_numer", "=", "0", "\n", "self", ".", "span_recall_numer_enabled", "=", "0", "\n", "self", ".", "span_all_enabled", "=", "0", "\n", "self", ".", "span_recall_denom", "=", "0", "\n", "self", ".", "span_loss", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.pruner.MentionPruner.create_new": [[173, 175], ["pruner.MentionPruner"], "methods", ["None"], ["", "def", "create_new", "(", "self", ")", ":", "\n", "        ", "return", "MentionPruner", "(", "self", ".", "dim_span", ",", "self", ".", "max_span_length", ",", "self", ".", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.pruner.MentionPruner.forward": [[176, 221], ["modules.utils.misc.prune_spans", "modules.utils.misc.indices_to_spans", "modules.utils.misc.create_masks", "sum", "pruner.MentionPruner.scorer", "span_pruned_indices.size", "models.ncr3.span_intersection", "sum", "pruner.decode_accepted_spans", "len", "pruner.create_spans_targets", "obj_pruner.item", "models.ncr3.span_intersection", "sum", "modules.utils.misc.filter_spans", "modules.utils.misc.filter_spans", "modules.utils.misc.filter_spans", "modules.utils.misc.filter_spans", "span_mask.unsqueeze", "len", "span_begin.view", "span_end.view", "len", "prune_scores.size", "prune_scores.size", "pruner.MentionPruner.loss", "sequence_lengths.unsqueeze().unsqueeze", "sequence_lengths.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.prune_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.indices_to_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.create_masks", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.ncr3.span_intersection", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.pruner.decode_accepted_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.pruner.create_spans_targets", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.ncr3.span_intersection", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.filter_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.filter_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.filter_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.filter_spans"], ["", "def", "forward", "(", "self", ",", "all_spans", ",", "gold_spans", ",", "sequence_lengths", ",", "gold_spans_lengths", "=", "None", ",", "gold_span_tensors", "=", "None", ",", "\n", "doc_id", "=", "None", ",", "api_call", "=", "False", ")", ":", "\n", "        ", "span_vecs", "=", "all_spans", "[", "'span_vecs'", "]", "\n", "span_mask", "=", "all_spans", "[", "'span_mask'", "]", "\n", "span_begin", "=", "all_spans", "[", "'span_begin'", "]", "\n", "span_end", "=", "all_spans", "[", "'span_end'", "]", "\n", "\n", "# prune_scores = self.scorer(span_vecs) - (1.0 - span_mask.unsqueeze(-1)) * 1e4", "\n", "# print('========================================')", "\n", "prune_scores", "=", "self", ".", "scorer", "(", "span_vecs", ")", "-", "(", "1.0", "-", "span_mask", ".", "unsqueeze", "(", "-", "1", ")", ")", "*", "1e4", "\n", "span_pruned_indices", ",", "span_lengths", "=", "prune_spans", "(", "prune_scores", ",", "sequence_lengths", ",", "self", ".", "sort_after_pruning", ",", "\n", "prune_ratio", "=", "self", ".", "prune_ratio", ")", "\n", "pred_spans", "=", "indices_to_spans", "(", "span_pruned_indices", ",", "span_lengths", ",", "self", ".", "max_span_length", ")", "\n", "square_mask", ",", "triangular_mask", "=", "create_masks", "(", "span_lengths", ",", "span_pruned_indices", ".", "size", "(", "1", ")", ")", "\n", "all_spans", "[", "'span_scores'", "]", "=", "prune_scores", "\n", "\n", "self", ".", "span_generated", "+=", "sum", "(", "[", "len", "(", "x", ")", "for", "x", "in", "pred_spans", "]", ")", "\n", "if", "not", "api_call", ":", "\n", "            ", "self", ".", "span_recall_numer", "+=", "span_intersection", "(", "pred_spans", ",", "gold_spans", ")", "\n", "self", ".", "span_recall_denom", "+=", "sum", "(", "[", "len", "(", "x", ")", "for", "x", "in", "gold_spans", "]", ")", "\n", "\n", "", "obj_pruner", "=", "0", "\n", "enabled_spans", "=", "None", "\n", "if", "self", ".", "add_pruner_loss", ":", "\n", "            ", "enabled_spans", "=", "decode_accepted_spans", "(", "prune_scores", ")", "\n", "if", "not", "api_call", ":", "\n", "                ", "prune_targets", "=", "create_spans_targets", "(", "prune_scores", ",", "gold_spans", ")", "\n", "mask", "=", "(", "span_end", "<", "sequence_lengths", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "obj_pruner", "=", "(", "self", ".", "loss", "(", "prune_scores", ",", "prune_targets", ")", "*", "mask", ")", ".", "sum", "(", ")", "*", "self", ".", "weight", "\n", "self", ".", "span_loss", "+=", "obj_pruner", ".", "item", "(", ")", "\n", "self", ".", "span_recall_numer_enabled", "+=", "span_intersection", "(", "enabled_spans", ",", "gold_spans", ")", "\n", "self", ".", "span_all_enabled", "+=", "sum", "(", "[", "len", "(", "es", ")", "for", "es", "in", "enabled_spans", "]", ")", "\n", "\n", "", "", "return", "obj_pruner", ",", "all_spans", ",", "{", "\n", "'prune_indices'", ":", "span_pruned_indices", ",", "\n", "'span_vecs'", ":", "filter_spans", "(", "span_vecs", ",", "span_pruned_indices", ")", ",", "\n", "'span_scores'", ":", "filter_spans", "(", "prune_scores", ",", "span_pruned_indices", ")", ",", "\n", "'span_begin'", ":", "filter_spans", "(", "span_begin", ".", "view", "(", "prune_scores", ".", "size", "(", ")", ")", ",", "span_pruned_indices", ")", ",", "\n", "'span_end'", ":", "filter_spans", "(", "span_end", ".", "view", "(", "prune_scores", ".", "size", "(", ")", ")", ",", "span_pruned_indices", ")", ",", "\n", "'span_lengths'", ":", "span_lengths", ",", "\n", "'square_mask'", ":", "square_mask", ",", "\n", "'triangular_mask'", ":", "triangular_mask", ",", "\n", "'spans'", ":", "pred_spans", ",", "\n", "'enabled_spans'", ":", "enabled_spans", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.pruner.MentionPruner.end_epoch": [[223, 243], ["print", "print", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "end_epoch", "(", "self", ",", "dataset_name", ")", ":", "\n", "        ", "print", "(", "\"{}-span-generator: {} / {} = {}\"", ".", "format", "(", "dataset_name", ",", "self", ".", "span_generated", ",", "self", ".", "span_recall_denom", ",", "\n", "self", ".", "span_generated", "/", "(", "self", ".", "span_recall_denom", "+", "1e-7", ")", ")", ")", "\n", "print", "(", "\"{}-span-recall: {} / {} = {}\"", ".", "format", "(", "dataset_name", ",", "self", ".", "span_recall_numer", ",", "self", ".", "span_recall_denom", ",", "\n", "self", ".", "span_recall_numer", "/", "(", "self", ".", "span_recall_denom", "+", "1e-7", ")", ")", ")", "\n", "print", "(", "\"{}-span-loss: {}\"", ".", "format", "(", "dataset_name", ",", "self", ".", "span_loss", ")", ")", "\n", "print", "(", "\"{}-span-recall-enabled: {} / {} = {}\"", ".", "format", "(", "dataset_name", ",", "self", ".", "span_recall_numer_enabled", ",", "\n", "self", ".", "span_recall_denom", ",", "\n", "self", ".", "span_recall_numer_enabled", "/", "(", "\n", "self", ".", "span_recall_denom", "+", "1e-7", ")", ")", ")", "\n", "print", "(", "\"{}-span-precision-enabled: {} / {} = {}\"", ".", "format", "(", "dataset_name", ",", "self", ".", "span_recall_numer_enabled", ",", "\n", "self", ".", "span_all_enabled", ",", "\n", "self", ".", "span_recall_numer_enabled", "/", "(", "\n", "self", ".", "span_all_enabled", "+", "1e-7", ")", ")", ")", "\n", "self", ".", "span_generated", "=", "0", "\n", "self", ".", "span_recall_numer", "=", "0", "\n", "self", ".", "span_recall_numer_enabled", "=", "0", "\n", "self", ".", "span_recall_denom", "=", "0", "\n", "self", ".", "span_loss", "=", "0.0", "\n", "self", ".", "span_all_enabled", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.pruner.MentionPrunerSpanBert.__init__": [[251, 282], ["pruner.MentionPrunerSuper.__init__", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.Sequential", "torch.Sequential", "print", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["def", "__init__", "(", "self", ",", "dim_span", ",", "config", ")", ":", "\n", "        ", "super", "(", "MentionPrunerSpanBert", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "dim_span", "=", "dim_span", "\n", "self", ".", "hidden_dim", "=", "config", "[", "'hidden_dim'", "]", "# 150", "\n", "self", ".", "hidden_dp", "=", "config", "[", "'hidden_dropout'", "]", "# 0.4", "\n", "# self.max_span_length = max_span_length", "\n", "self", ".", "sort_after_pruning", "=", "config", "[", "'sort_after_pruning'", "]", "\n", "self", ".", "prune_ratio", "=", "config", "[", "'prune_ratio'", "]", "\n", "self", ".", "add_pruner_loss", "=", "config", "[", "'add_pruner_loss'", "]", "\n", "self", ".", "no_cross_overlap", "=", "config", "[", "'no_cross_overlap'", "]", "\n", "self", ".", "weight", "=", "config", "[", "'weight'", "]", "if", "self", ".", "add_pruner_loss", "else", "None", "\n", "self", ".", "loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", "reduction", "=", "'none'", ")", "\n", "\n", "self", ".", "scorer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "dim_span", ",", "self", ".", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "self", ".", "hidden_dp", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "self", ".", "hidden_dp", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", ",", "1", ")", "\n", ")", "\n", "\n", "print", "(", "\"MentionPrunerSpanBert:\"", ",", "self", ".", "prune_ratio", ",", "self", ".", "sort_after_pruning", ",", "self", ".", "add_pruner_loss", ")", "\n", "self", ".", "span_generated", "=", "0", "\n", "self", ".", "span_recall_numer", "=", "0", "\n", "self", ".", "span_recall_numer_enabled", "=", "0", "\n", "self", ".", "span_all_enabled", "=", "0", "\n", "self", ".", "span_recall_denom", "=", "0", "\n", "self", ".", "span_loss", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.pruner.MentionPrunerSpanBert.create_new": [[283, 285], ["pruner.MentionPrunerSpanBert"], "methods", ["None"], ["", "def", "create_new", "(", "self", ")", ":", "\n", "        ", "return", "MentionPrunerSpanBert", "(", "self", ".", "dim_span", ",", "self", ".", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.pruner.MentionPrunerSpanBert.forward": [[286, 359], ["modules.utils.misc.prune_spans", "modules.utils.misc.indices_to_spans", "modules.utils.misc.create_masks", "sum", "pruner.MentionPrunerSpanBert.scorer", "span_pruned_indices.size", "models.ncr3.span_intersection", "sum", "pruner.decode_accepted_spans", "len", "pruner.create_spans_targets", "span_mask.unsqueeze", "obj_pruner.item", "models.ncr3.span_intersection", "sum", "modules.utils.misc.filter_spans", "modules.utils.misc.filter_spans", "modules.utils.misc.filter_spans", "modules.utils.misc.filter_spans", "span_mask.unsqueeze", "len", "span_begin.view", "span_end.view", "len", "prune_scores.size", "prune_scores.size", "pruner.MentionPrunerSpanBert.loss"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.prune_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.indices_to_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.create_masks", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.ncr3.span_intersection", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.pruner.decode_accepted_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.pruner.create_spans_targets", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.ncr3.span_intersection", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.filter_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.filter_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.filter_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.filter_spans"], ["", "def", "forward", "(", "self", ",", "all_spans", ",", "gold_spans", ",", "sequence_lengths", ",", "gold_spans_lengths", "=", "None", ",", "gold_span_tensors", "=", "None", ",", "\n", "doc_id", "=", "None", ",", "api_call", "=", "False", ",", "max_span_length", "=", "None", ")", ":", "\n", "        ", "span_vecs", "=", "all_spans", "[", "'span_vecs'", "]", "\n", "span_mask", "=", "all_spans", "[", "'span_mask'", "]", "\n", "span_begin", "=", "all_spans", "[", "'span_begin'", "]", "\n", "span_end", "=", "all_spans", "[", "'span_end'", "]", "\n", "\n", "# prune_scores = self.scorer(span_vecs) - (1.0 - span_mask.unsqueeze(-1)) * 1e4", "\n", "# print('========================================')", "\n", "prune_scores", "=", "self", ".", "scorer", "(", "span_vecs", ")", "-", "(", "1.0", "-", "span_mask", ".", "unsqueeze", "(", "-", "1", ")", ")", "*", "1e4", "\n", "span_pruned_indices", ",", "span_lengths", "=", "prune_spans", "(", "prune_scores", ",", "sequence_lengths", ",", "self", ".", "sort_after_pruning", ",", "\n", "prune_ratio", "=", "self", ".", "prune_ratio", ",", "\n", "no_cross_overlap", "=", "self", ".", "no_cross_overlap", ",", "\n", "span_mask", "=", "span_mask", ")", "\n", "# span_pruned_indices.shape --> [1,21] --> tensor([[  75,  316,  318,  334,  360,  362,  570,  637,  735,  737,  738,  814,", "\n", "#           815,  902, 1098, 1099, 1155, 1160, 1188, 1230, 1236]])", "\n", "# span_lengths --> tensor([21])", "\n", "# max_span_length --> 15", "\n", "pred_spans", "=", "indices_to_spans", "(", "span_pruned_indices", ",", "span_lengths", ",", "max_span_length", ")", "\n", "# pred_spans - [[(5, 5), (21, 22), (21, 24), (22, 26), (24, 24), (24, 26), (38, 38), (42, 49), (49, 49),", "\n", "# (49, 51), (49, 52), (54, 58), (54, 59), (60, 62), (73, 76), (73, 77), (77, 77), (77, 82), (79, 82),", "\n", "# (82, 82), (82, 88)]]", "\n", "square_mask", ",", "triangular_mask", "=", "create_masks", "(", "span_lengths", ",", "span_pruned_indices", ".", "size", "(", "1", ")", ")", "\n", "# square_mask.shape --> [1,21,21]", "\n", "# triangular_mask.shape --> [1,21,21]", "\n", "\n", "all_spans", "[", "'span_scores'", "]", "=", "prune_scores", "\n", "# prune_scores.shape --> [1,96,15,1]", "\n", "\n", "self", ".", "span_generated", "+=", "sum", "(", "[", "len", "(", "x", ")", "for", "x", "in", "pred_spans", "]", ")", "\n", "if", "not", "api_call", ":", "\n", "            ", "self", ".", "span_recall_numer", "+=", "span_intersection", "(", "pred_spans", ",", "gold_spans", ")", "\n", "self", ".", "span_recall_denom", "+=", "sum", "(", "[", "len", "(", "x", ")", "for", "x", "in", "gold_spans", "]", ")", "\n", "\n", "", "obj_pruner", "=", "0", "\n", "enabled_spans", "=", "None", "\n", "if", "self", ".", "add_pruner_loss", ":", "\n", "            ", "enabled_spans", "=", "decode_accepted_spans", "(", "prune_scores", ")", "\n", "# len(enabled_spans[0]) --> 124; <class 'list'>: [[(1, 2), (1, 6), (4, 5), (4, 8), ...]]", "\n", "if", "not", "api_call", ":", "\n", "                ", "prune_targets", "=", "create_spans_targets", "(", "prune_scores", ",", "gold_spans", ")", "\n", "# prune_targets.shape --> [1, 96, 15, 1]", "\n", "mask", "=", "span_mask", ".", "unsqueeze", "(", "-", "1", ")", "\n", "# mask.shape --> [1, 96, 15, 1]", "\n", "obj_pruner", "=", "(", "self", ".", "loss", "(", "prune_scores", ",", "prune_targets", ")", "*", "mask", ")", ".", "sum", "(", ")", "*", "self", ".", "weight", "\n", "#", "\n", "self", ".", "span_loss", "+=", "obj_pruner", ".", "item", "(", ")", "\n", "#", "\n", "self", ".", "span_recall_numer_enabled", "+=", "span_intersection", "(", "enabled_spans", ",", "gold_spans", ")", "\n", "# len(gold_spans[0]) --> 9; gold_spans --> [[(5, 6), (7, 12), (51, 53), (55, 59), (61, 61), ...]]", "\n", "self", ".", "span_all_enabled", "+=", "sum", "(", "[", "len", "(", "es", ")", "for", "es", "in", "enabled_spans", "]", ")", "\n", "# self.span_all_enabled --> 124", "\n", "\n", "", "", "return", "obj_pruner", ",", "all_spans", ",", "{", "\n", "'prune_indices'", ":", "span_pruned_indices", ",", "\n", "# 'prune_indices'.shape --> [1,21] --> tensor([[  75,  316,  318,  334,  360,  362,  570,  637,  ...]])", "\n", "'span_vecs'", ":", "filter_spans", "(", "span_vecs", ",", "span_pruned_indices", ")", ",", "\n", "# 'span_vecs'.shape --> [1, 21, 2324]", "\n", "'span_scores'", ":", "filter_spans", "(", "prune_scores", ",", "span_pruned_indices", ")", ",", "\n", "# 'span_scores'.shape --> torch.Size([1, 21, 1])", "\n", "'span_begin'", ":", "filter_spans", "(", "span_begin", ".", "view", "(", "prune_scores", ".", "size", "(", ")", ")", ",", "span_pruned_indices", ")", ",", "\n", "# 'span_begin'.shape --> [1, 21, 1] --> tensor([[[ 5], [21], [21], [22], [24], [24], [38], [42], [49],....", "\n", "'span_end'", ":", "filter_spans", "(", "span_end", ".", "view", "(", "prune_scores", ".", "size", "(", ")", ")", ",", "span_pruned_indices", ")", ",", "\n", "# 'span_end'.shape --> [1, 21, 1] -->  tensor([[[ 5], [22], [24], [26], [24], [26], [38], [49], [49],...]]]", "\n", "'span_lengths'", ":", "span_lengths", ",", "\n", "# span_lengths --> tensor([21])", "\n", "'square_mask'", ":", "square_mask", ",", "\n", "#", "\n", "'triangular_mask'", ":", "triangular_mask", ",", "\n", "#", "\n", "'spans'", ":", "pred_spans", ",", "\n", "# <class 'list'>: [[(5, 5), (21, 22), (21, 24), (22, 26), (24, 24), (24, 26), (38, 38), (42, 49), ....]]", "\n", "'enabled_spans'", ":", "enabled_spans", "\n", "# <class 'list'>: [[(1, 2), (1, 6), (4, 5), (4, 8), (5, 5), (6, 6), (6, 13), (11, 13), (13, 17), ...]]", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.pruner.MentionPrunerSpanBert.end_epoch": [[362, 382], ["print", "print", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "end_epoch", "(", "self", ",", "dataset_name", ")", ":", "\n", "        ", "print", "(", "\"{}-span-generator: {} / {} = {}\"", ".", "format", "(", "dataset_name", ",", "self", ".", "span_generated", ",", "self", ".", "span_recall_denom", ",", "\n", "self", ".", "span_generated", "/", "(", "self", ".", "span_recall_denom", "+", "1e-7", ")", ")", ")", "\n", "print", "(", "\"{}-span-recall: {} / {} = {}\"", ".", "format", "(", "dataset_name", ",", "self", ".", "span_recall_numer", ",", "self", ".", "span_recall_denom", ",", "\n", "self", ".", "span_recall_numer", "/", "(", "self", ".", "span_recall_denom", "+", "1e-7", ")", ")", ")", "\n", "print", "(", "\"{}-span-loss: {}\"", ".", "format", "(", "dataset_name", ",", "self", ".", "span_loss", ")", ")", "\n", "print", "(", "\"{}-span-recall-enabled: {} / {} = {}\"", ".", "format", "(", "dataset_name", ",", "self", ".", "span_recall_numer_enabled", ",", "\n", "self", ".", "span_recall_denom", ",", "\n", "self", ".", "span_recall_numer_enabled", "/", "(", "\n", "self", ".", "span_recall_denom", "+", "1e-7", ")", ")", ")", "\n", "print", "(", "\"{}-span-precision-enabled: {} / {} = {}\"", ".", "format", "(", "dataset_name", ",", "self", ".", "span_recall_numer_enabled", ",", "\n", "self", ".", "span_all_enabled", ",", "\n", "self", ".", "span_recall_numer_enabled", "/", "(", "\n", "self", ".", "span_all_enabled", "+", "1e-7", ")", ")", ")", "\n", "self", ".", "span_generated", "=", "0", "\n", "self", ".", "span_recall_numer", "=", "0", "\n", "self", ".", "span_recall_numer_enabled", "=", "0", "\n", "self", ".", "span_recall_denom", "=", "0", "\n", "self", ".", "span_loss", "=", "0.0", "\n", "self", ".", "span_all_enabled", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.pruner.MentionPrunerSpanBertHoi.make_linear": [[390, 396], ["torch.Linear", "torch.Linear", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.zeros_", "torch.nn.init.zeros_"], "methods", ["None"], ["def", "make_linear", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ",", "std", "=", "0.02", ")", ":", "\n", "        ", "linear", "=", "nn", ".", "Linear", "(", "in_features", ",", "out_features", ",", "bias", ")", "\n", "init", ".", "normal_", "(", "linear", ".", "weight", ",", "std", "=", "std", ")", "\n", "if", "bias", ":", "\n", "            ", "init", ".", "zeros_", "(", "linear", ".", "bias", ")", "\n", "", "return", "linear", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.pruner.MentionPrunerSpanBertHoi.make_ffnn": [[397, 408], ["range", "ffnn.append", "torch.Sequential", "torch.Sequential", "pruner.MentionPrunerSpanBertHoi.make_linear", "isinstance", "pruner.MentionPrunerSpanBertHoi.make_linear", "torch.ReLU", "torch.ReLU", "len", "pruner.MentionPrunerSpanBertHoi.make_linear", "pruner.MentionPrunerSpanBertHoi.make_linear", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_linear", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_linear", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_linear", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_linear"], ["", "def", "make_ffnn", "(", "self", ",", "feat_size", ",", "hidden_size", ",", "output_size", ")", ":", "\n", "        ", "if", "hidden_size", "is", "None", "or", "hidden_size", "==", "0", "or", "hidden_size", "==", "[", "]", "or", "hidden_size", "==", "[", "0", "]", ":", "\n", "            ", "return", "self", ".", "make_linear", "(", "feat_size", ",", "output_size", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "hidden_size", ",", "Iterable", ")", ":", "\n", "            ", "hidden_size", "=", "[", "hidden_size", "]", "\n", "", "ffnn", "=", "[", "self", ".", "make_linear", "(", "feat_size", ",", "hidden_size", "[", "0", "]", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "self", ".", "dropout", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "hidden_size", ")", ")", ":", "\n", "            ", "ffnn", "+=", "[", "self", ".", "make_linear", "(", "hidden_size", "[", "i", "-", "1", "]", ",", "hidden_size", "[", "i", "]", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "self", ".", "dropout", "]", "\n", "", "ffnn", ".", "append", "(", "self", ".", "make_linear", "(", "hidden_size", "[", "-", "1", "]", ",", "output_size", ")", ")", "\n", "return", "nn", ".", "Sequential", "(", "*", "ffnn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.pruner.MentionPrunerSpanBertHoi.__init__": [[409, 461], ["pruner.MentionPrunerSuper.__init__", "torch.Dropout", "torch.Dropout", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "pruner.MentionPrunerSpanBertHoi.make_ffnn", "print", "list", "list", "list", "list", "list", "list", "pruner.MentionPrunerSpanBertHoi.make_ffnn"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_ffnn", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_ffnn"], ["", "def", "__init__", "(", "self", ",", "dim_span", ",", "config", ",", "feature_emb_size", ")", ":", "\n", "        ", "super", "(", "MentionPrunerSpanBertHoi", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "dim_span", "=", "dim_span", "\n", "self", ".", "hidden_dim", "=", "config", "[", "'hidden_dim'", "]", "# 3000", "\n", "self", ".", "ffnn_depth", "=", "config", "[", "'ffnn_depth'", "]", "# 1", "\n", "self", ".", "hidden_dp", "=", "config", "[", "'hidden_dropout'", "]", "# 0.3", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "hidden_dp", ")", "\n", "# self.max_span_length = max_span_length", "\n", "self", ".", "use_width_prior", "=", "config", "[", "'use_width_prior'", "]", "\n", "self", ".", "sort_after_pruning", "=", "config", "[", "'sort_after_pruning'", "]", "\n", "self", ".", "max_num_extracted_spans", "=", "config", "[", "'max_num_extracted_spans'", "]", "\n", "self", ".", "prune_ratio", "=", "config", "[", "'prune_ratio'", "]", "\n", "self", ".", "add_pruner_loss", "=", "config", "[", "'add_pruner_loss'", "]", "\n", "self", ".", "no_cross_overlap", "=", "config", "[", "'no_cross_overlap'", "]", "\n", "self", ".", "weight", "=", "config", "[", "'weight'", "]", "if", "self", ".", "add_pruner_loss", "else", "None", "\n", "self", ".", "debug_stats", "=", "config", "[", "'debug_stats'", "]", "\n", "\n", "if", "self", ".", "debug_stats", ":", "\n", "            ", "self", ".", "pruner_losses", "=", "list", "(", ")", "\n", "self", ".", "scores_norm", "=", "list", "(", ")", "\n", "self", ".", "scores_mean", "=", "list", "(", ")", "\n", "self", ".", "scores_std", "=", "list", "(", ")", "\n", "self", ".", "scores_min", "=", "list", "(", ")", "\n", "self", ".", "scores_max", "=", "list", "(", ")", "\n", "\n", "", "self", ".", "loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", "reduction", "=", "'none'", ")", "\n", "\n", "self", ".", "scorer", "=", "self", ".", "make_ffnn", "(", "dim_span", ",", "[", "self", ".", "hidden_dim", "]", "*", "self", ".", "ffnn_depth", ",", "output_size", "=", "1", ")", "\n", "# self.make_ffnn(self.span_emb_size, [config['ffnn_size']] * config['ffnn_depth'],", "\n", "#                                                   output_size=1)", "\n", "\n", "if", "self", ".", "use_width_prior", ":", "\n", "            ", "self", ".", "span_width_score_ffnn", "=", "self", ".", "make_ffnn", "(", "feature_emb_size", ",", "\n", "[", "self", ".", "hidden_dim", "]", "*", "self", ".", "ffnn_depth", ",", "output_size", "=", "1", ")", "\n", "# self.scorer = nn.Sequential(", "\n", "#     nn.Linear(dim_span, self.hidden_dim),", "\n", "#     nn.ReLU(),", "\n", "#     nn.Dropout(self.hidden_dp),", "\n", "#     nn.Linear(self.hidden_dim, self.hidden_dim),", "\n", "#     nn.ReLU(),", "\n", "#     nn.Dropout(self.hidden_dp),", "\n", "#     nn.Linear(self.hidden_dim, 1)", "\n", "# )", "\n", "\n", "", "print", "(", "\"MentionPrunerSpanBertHoi: \"", ",", "self", ".", "prune_ratio", ",", "self", ".", "sort_after_pruning", ",", "self", ".", "add_pruner_loss", ")", "\n", "self", ".", "span_generated", "=", "0", "\n", "self", ".", "span_recall_numer", "=", "0", "\n", "self", ".", "span_recall_numer_enabled", "=", "0", "\n", "self", ".", "span_all_enabled", "=", "0", "\n", "self", ".", "span_recall_denom", "=", "0", "\n", "self", ".", "span_loss", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.pruner.MentionPrunerSpanBertHoi.create_new": [[462, 464], ["pruner.MentionPrunerSpanBert"], "methods", ["None"], ["", "def", "create_new", "(", "self", ")", ":", "\n", "        ", "return", "MentionPrunerSpanBert", "(", "self", ".", "dim_span", ",", "self", ".", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.pruner.MentionPrunerSpanBertHoi.get_mean": [[465, 470], ["len", "sum", "len"], "methods", ["None"], ["", "def", "get_mean", "(", "self", ",", "list_values", ":", "List", ")", ":", "\n", "        ", "if", "len", "(", "list_values", ")", "==", "0", ":", "\n", "            ", "return", "0.0", "\n", "", "else", ":", "\n", "            ", "return", "(", "sum", "(", "list_values", ")", "/", "len", "(", "list_values", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.pruner.MentionPrunerSpanBertHoi.forward": [[471, 597], ["torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.argsort().tolist", "torch.argsort().tolist", "torch.argsort().tolist", "torch.argsort().tolist", "int", "modules.utils.misc._extract_top_spans", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.squeeze.unsqueeze", "torch.squeeze.unsqueeze", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "modules.utils.misc.create_masks", "[].unsqueeze", "pruner.MentionPrunerSpanBertHoi.scorer", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "span_begin[].tolist", "span_end[].tolist", "min", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "sum", "pruner.MentionPrunerSpanBertHoi.span_width_score_ffnn", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "models.ncr3.span_intersection", "sum", "prune_targets.sum", "obj_pruner.item", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.tensor.unsqueeze", "torch.tensor.unsqueeze", "prune_scores[].unsqueeze", "top_span_starts.unsqueeze", "top_span_ends.unsqueeze", "top_span_starts.unsqueeze", "top_span_ends.unsqueeze", "tuple", "torch.cat.T.unsqueeze().tolist", "torch.cat.T.unsqueeze().tolist", "tuple", "gold_span_tensors.tolist", "len", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "prune_targets.max", "pruner.MentionPrunerSpanBertHoi.loss().sum", "print", "isinstance", "pruner.MentionPrunerSpanBertHoi.scores_norm.append", "pruner.MentionPrunerSpanBertHoi.scores_mean.append", "pruner.MentionPrunerSpanBertHoi.scores_std.append", "pruner.MentionPrunerSpanBertHoi.scores_min.append", "pruner.MentionPrunerSpanBertHoi.scores_max.append", "enabled_spans.unsqueeze.unsqueeze.unsqueeze", "models.ncr3.span_intersection", "sum", "sequence_lengths.float", "len", "pruner.MentionPrunerSpanBertHoi.pruner_losses.append", "pruner.MentionPrunerSpanBertHoi.pruner_losses.append", "torch.squeeze.norm().item", "torch.squeeze.norm().item", "torch.squeeze.mean().item", "torch.squeeze.mean().item", "torch.squeeze.std().item", "torch.squeeze.std().item", "torch.squeeze.min().item", "torch.squeeze.min().item", "torch.squeeze.max().item", "torch.squeeze.max().item", "torch.cat.T.unsqueeze", "torch.cat.T.unsqueeze", "pruner.MentionPrunerSpanBertHoi.loss", "obj_pruner.item", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "tuple", "enabled_spans.unsqueeze.unsqueeze.tolist", "len", "torch.squeeze.norm", "torch.squeeze.norm", "torch.squeeze.mean", "torch.squeeze.mean", "torch.squeeze.std", "torch.squeeze.std", "torch.squeeze.min", "torch.squeeze.min", "torch.squeeze.max", "torch.squeeze.max"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.misc._extract_top_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.create_masks", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.ncr3.span_intersection", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.ncr3.span_intersection", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist"], ["", "", "def", "forward", "(", "self", ",", "all_spans", ",", "sequence_lengths", ",", "gold_spans_lengths", "=", "None", ",", "gold_span_tensors", "=", "None", ",", "\n", "doc_id", "=", "None", ",", "api_call", "=", "False", ",", "max_span_length", "=", "None", ",", "emb_span_width_prior", "=", "None", ",", "predict", "=", "False", ")", ":", "\n", "        ", "cand_span_vecs", "=", "all_spans", "[", "'cand_span_vecs'", "]", "\n", "# span_mask = all_spans['cand_span_mask']", "\n", "span_begin", "=", "all_spans", "[", "'cand_span_begin'", "]", "\n", "span_end", "=", "all_spans", "[", "'cand_span_end'", "]", "\n", "candidate_width_idx", "=", "all_spans", "[", "'cand_width_idx'", "]", "\n", "# for now only single batch", "\n", "assert", "cand_span_vecs", ".", "shape", "[", "0", "]", "==", "1", "\n", "\n", "# prune_scores = self.scorer(cand_span_vecs) - (1.0 - span_mask.unsqueeze(-1)) * 1e4", "\n", "# print('========================================')", "\n", "# prune_scores = self.scorer(cand_span_vecs) - (1.0 - span_mask.unsqueeze(-1)) * 1e4", "\n", "prune_scores", "=", "torch", ".", "squeeze", "(", "self", ".", "scorer", "(", "cand_span_vecs", "[", "0", "]", ")", ",", "1", ")", "# - (1.0 - span_mask.unsqueeze(-1)) * 1e4", "\n", "\n", "if", "self", ".", "use_width_prior", ":", "\n", "            ", "width_score", "=", "torch", ".", "squeeze", "(", "self", ".", "span_width_score_ffnn", "(", "emb_span_width_prior", ".", "weight", ")", ",", "1", ")", "\n", "candidate_width_score", "=", "width_score", "[", "candidate_width_idx", "[", "0", "]", "]", "\n", "prune_scores", "+=", "candidate_width_score", "\n", "\n", "", "candidate_idx_sorted_by_score", "=", "torch", ".", "argsort", "(", "prune_scores", ",", "descending", "=", "True", ")", ".", "tolist", "(", ")", "\n", "candidate_starts_cpu", ",", "candidate_ends_cpu", "=", "span_begin", "[", "0", "]", ".", "tolist", "(", ")", ",", "span_end", "[", "0", "]", ".", "tolist", "(", ")", "\n", "\n", "span_length", "=", "(", "sequence_lengths", ".", "float", "(", ")", "*", "self", ".", "prune_ratio", "+", "1", ")", ".", "int", "(", ")", "\n", "span_length", "=", "int", "(", "min", "(", "self", ".", "max_num_extracted_spans", ",", "span_length", ")", ")", "\n", "\n", "# TODO: in self.no_cross_overlap in false, in theory no need to run the loop in _extract_top_spans", "\n", "#  can be tensorized, making it faster!", "\n", "selected_idx_cpu", "=", "_extract_top_spans", "(", "candidate_idx_sorted_by_score", ",", "candidate_starts_cpu", ",", "\n", "candidate_ends_cpu", ",", "span_length", ",", "no_cross_overlap", "=", "self", ".", "no_cross_overlap", ")", "\n", "assert", "len", "(", "selected_idx_cpu", ")", "==", "span_length", "\n", "selected_idx", "=", "torch", ".", "tensor", "(", "selected_idx_cpu", ",", "device", "=", "settings", ".", "device", ")", "\n", "top_span_starts", ",", "top_span_ends", "=", "span_begin", "[", "0", "]", "[", "selected_idx", "]", ",", "span_end", "[", "0", "]", "[", "selected_idx", "]", "\n", "\n", "all_spans", "[", "'cand_span_scores'", "]", "=", "prune_scores", ".", "unsqueeze", "(", "0", ")", "\n", "pred_spans", "=", "None", "\n", "gold_spans", "=", "None", "\n", "if", "predict", "or", "self", ".", "debug_stats", ":", "\n", "            ", "se_tuples", "=", "torch", ".", "cat", "(", "[", "top_span_starts", ".", "unsqueeze", "(", "0", ")", ",", "top_span_ends", ".", "unsqueeze", "(", "0", ")", "]", ",", "dim", "=", "0", ")", "\n", "pred_spans", "=", "[", "[", "tuple", "(", "l2", ")", "for", "l2", "in", "l", "]", "for", "l", "in", "se_tuples", ".", "T", ".", "unsqueeze", "(", "0", ")", ".", "tolist", "(", ")", "]", "\n", "gold_spans", "=", "[", "[", "tuple", "(", "l2", ")", "for", "l2", "in", "l", "]", "for", "l", "in", "gold_span_tensors", ".", "tolist", "(", ")", "]", "\n", "\n", "self", ".", "span_generated", "+=", "sum", "(", "[", "len", "(", "x", ")", "for", "x", "in", "pred_spans", "]", ")", "\n", "if", "not", "api_call", ":", "\n", "# TODO: try to make this tensorizable", "\n", "                ", "self", ".", "span_recall_numer", "+=", "span_intersection", "(", "pred_spans", ",", "gold_spans", ")", "\n", "self", ".", "span_recall_denom", "+=", "sum", "(", "[", "len", "(", "x", ")", "for", "x", "in", "gold_spans", "]", ")", "\n", "\n", "", "", "obj_pruner", "=", "0", "\n", "enabled_spans", "=", "None", "\n", "if", "self", ".", "add_pruner_loss", ":", "\n", "            ", "if", "not", "api_call", ":", "\n", "                ", "gold_starts", "=", "gold_span_tensors", "[", "0", "]", "[", ":", ",", "0", "]", "\n", "gold_ends", "=", "gold_span_tensors", "[", "0", "]", "[", ":", ",", "1", "]", "\n", "same_start", "=", "(", "torch", ".", "unsqueeze", "(", "gold_starts", ",", "1", ")", "==", "torch", ".", "unsqueeze", "(", "span_begin", "[", "0", "]", ",", "0", ")", ")", "\n", "# same_start.shape --> torch.Size([186, 20768]); same_start.sum() --> 3639", "\n", "same_end", "=", "(", "torch", ".", "unsqueeze", "(", "gold_ends", ",", "1", ")", "==", "torch", ".", "unsqueeze", "(", "span_end", "[", "0", "]", ",", "0", ")", ")", "\n", "# same_end.shape --> torch.Size([186, 20768]); same_end.sum() --> 3460  # SOMEWHERE AROUND HERE SMALL MEMORY JUMP: 3,083 TO 3,103", "\n", "# prune_targets = (same_start & same_end).to(torch.float)", "\n", "prune_targets", "=", "(", "same_start", "&", "same_end", ")", ".", "float", "(", ")", "\n", "\n", "# prune_targets = create_spans_targets(prune_scores, gold_spans)", "\n", "prune_targets", ":", "torch", ".", "Tensor", "=", "prune_targets", ".", "sum", "(", "dim", "=", "0", ")", "\n", "# TODO: probably this assert can be taken out if too slow; the maximum should be 1.0", "\n", "assert", "prune_targets", ".", "max", "(", ")", "<=", "1.0", "\n", "# obj_pruner = (self.loss(prune_scores, prune_targets) * mask).sum() * self.weight", "\n", "\n", "obj_pruner", "=", "self", ".", "loss", "(", "prune_scores", ",", "prune_targets", ")", ".", "sum", "(", ")", "*", "self", ".", "weight", "\n", "self", ".", "span_loss", "+=", "obj_pruner", ".", "item", "(", ")", "\n", "\n", "if", "torch", ".", "isnan", "(", "obj_pruner", ")", ":", "\n", "                    ", "print", "(", "'WARNING, torch.isnan(obj_pruner)'", ")", "\n", "obj_pruner", "=", "0", "\n", "", "if", "self", ".", "debug_stats", ":", "\n", "# import pdb", "\n", "# pdb.set_trace()", "\n", "                    ", "if", "isinstance", "(", "obj_pruner", ",", "torch", ".", "Tensor", ")", ":", "\n", "                        ", "self", ".", "pruner_losses", ".", "append", "(", "obj_pruner", ".", "item", "(", ")", ")", "\n", "", "else", ":", "\n", "                        ", "self", ".", "pruner_losses", ".", "append", "(", "obj_pruner", ")", "\n", "", "self", ".", "scores_norm", ".", "append", "(", "prune_scores", ".", "norm", "(", ")", ".", "item", "(", ")", ")", "\n", "self", ".", "scores_mean", ".", "append", "(", "prune_scores", ".", "mean", "(", ")", ".", "item", "(", ")", ")", "\n", "self", ".", "scores_std", ".", "append", "(", "prune_scores", ".", "std", "(", ")", ".", "item", "(", ")", ")", "\n", "self", ".", "scores_min", ".", "append", "(", "prune_scores", ".", "min", "(", ")", ".", "item", "(", ")", ")", "\n", "self", ".", "scores_max", ".", "append", "(", "prune_scores", ".", "max", "(", ")", ".", "item", "(", ")", ")", "\n", "\n", "", "if", "predict", "or", "self", ".", "debug_stats", ":", "\n", "# print('obj_pruner is: ', obj_pruner)", "\n", "# print('prune_scores mean: ', prune_scores.mean())", "\n", "# print('prune_scores norm: ', prune_scores.norm())", "\n", "# print('prune_scores std: ', prune_scores.std())", "\n", "# print('prune_scores sum: ', prune_scores.sum())", "\n", "# print('prune_scores shape: ', prune_scores.shape)", "\n", "\n", "# enabled_spans = gold_span_tensors[prune_scores > 0]", "\n", "# TODO: careful here (ergo asserts), it only will work if first dimension of span_begin is 1", "\n", "#  if without batch, will have to unsqueeze", "\n", "                    ", "assert", "span_begin", ".", "shape", "[", "0", "]", "==", "1", "\n", "assert", "span_end", ".", "shape", "[", "0", "]", "==", "1", "\n", "enabled_spans", "=", "torch", ".", "cat", "(", "[", "span_begin", ",", "span_end", "]", ")", ".", "T", "[", "prune_scores", ">", "0", "]", "\n", "enabled_spans", "=", "enabled_spans", ".", "unsqueeze", "(", "0", ")", "# adding batch dimension", "\n", "enabled_spans", "=", "[", "[", "tuple", "(", "l", ")", "for", "l", "in", "l2", "]", "for", "l2", "in", "enabled_spans", ".", "tolist", "(", ")", "]", "\n", "\n", "# enabled_spans = decode_accepted_spans(prune_scores)", "\n", "self", ".", "span_recall_numer_enabled", "+=", "span_intersection", "(", "enabled_spans", ",", "gold_spans", ")", "\n", "self", ".", "span_all_enabled", "+=", "sum", "(", "[", "len", "(", "es", ")", "for", "es", "in", "enabled_spans", "]", ")", "\n", "\n", "", "", "", "span_lengths_tensor", "=", "torch", ".", "tensor", "(", "[", "span_length", "]", ",", "device", "=", "settings", ".", "device", ")", "\n", "square_mask", ",", "triangular_mask", "=", "create_masks", "(", "span_lengths_tensor", ",", "span_length", ")", "\n", "# square_mask.shape --> [1,21,21]", "\n", "# triangular_mask.shape --> [1,21,21]", "\n", "\n", "cand_span_vecs", "=", "cand_span_vecs", "[", "0", "]", "[", "selected_idx", "]", ".", "unsqueeze", "(", "0", ")", "\n", "return", "obj_pruner", ",", "all_spans", ",", "{", "\n", "# 'prune_indices': span_pruned_indices,", "\n", "'prune_indices_hoi'", ":", "selected_idx", ".", "unsqueeze", "(", "0", ")", ",", "\n", "'span_vecs'", ":", "cand_span_vecs", ",", "\n", "'span_scores'", ":", "prune_scores", "[", "selected_idx", "]", ".", "unsqueeze", "(", "0", ")", ",", "\n", "'span_begin'", ":", "top_span_starts", ".", "unsqueeze", "(", "0", ")", ",", "\n", "'span_end'", ":", "top_span_ends", ".", "unsqueeze", "(", "0", ")", ",", "\n", "'span_lengths'", ":", "span_lengths_tensor", ",", "\n", "'square_mask'", ":", "square_mask", ",", "\n", "'triangular_mask'", ":", "triangular_mask", ",", "\n", "'pruned_spans'", ":", "pred_spans", ",", "\n", "'gold_spans'", ":", "gold_spans", ",", "\n", "'enabled_spans'", ":", "enabled_spans", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.pruner.MentionPrunerSpanBertHoi.log_stats": [[622, 640], ["tb_logger.log_value", "tb_logger.log_value", "tb_logger.log_value", "tb_logger.log_value", "tb_logger.log_value", "tb_logger.log_value", "pruner.MentionPrunerSpanBertHoi.end_epoch", "pruner.MentionPrunerSpanBertHoi.get_mean", "pruner.MentionPrunerSpanBertHoi.get_mean", "pruner.MentionPrunerSpanBertHoi.get_mean", "pruner.MentionPrunerSpanBertHoi.get_mean", "pruner.MentionPrunerSpanBertHoi.get_mean", "pruner.MentionPrunerSpanBertHoi.get_mean", "list", "list", "list", "list", "list", "list"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert.CoreflinkerSpanBert.end_epoch", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.pruner.MentionPrunerSpanBertHoi.get_mean", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.pruner.MentionPrunerSpanBertHoi.get_mean", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.pruner.MentionPrunerSpanBertHoi.get_mean", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.pruner.MentionPrunerSpanBertHoi.get_mean", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.pruner.MentionPrunerSpanBertHoi.get_mean", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.pruner.MentionPrunerSpanBertHoi.get_mean"], ["", "def", "log_stats", "(", "self", ",", "dataset_name", ",", "predict", ",", "tb_logger", ",", "step_nr", ")", ":", "\n", "        ", "tb_logger", ".", "log_value", "(", "'{}-pruner-loss'", ".", "format", "(", "dataset_name", ")", ",", "self", ".", "get_mean", "(", "self", ".", "pruner_losses", ")", ",", "step_nr", ")", "\n", "\n", "# avg norm", "\n", "tb_logger", ".", "log_value", "(", "'{}-pruner-norm'", ".", "format", "(", "dataset_name", ")", ",", "self", ".", "get_mean", "(", "self", ".", "scores_norm", ")", ",", "step_nr", ")", "\n", "tb_logger", ".", "log_value", "(", "'{}-pruner-mean'", ".", "format", "(", "dataset_name", ")", ",", "self", ".", "get_mean", "(", "self", ".", "scores_mean", ")", ",", "step_nr", ")", "\n", "tb_logger", ".", "log_value", "(", "'{}-pruner-std'", ".", "format", "(", "dataset_name", ")", ",", "self", ".", "get_mean", "(", "self", ".", "scores_std", ")", ",", "step_nr", ")", "\n", "tb_logger", ".", "log_value", "(", "'{}-pruner-min'", ".", "format", "(", "dataset_name", ")", ",", "self", ".", "get_mean", "(", "self", ".", "scores_min", ")", ",", "step_nr", ")", "\n", "tb_logger", ".", "log_value", "(", "'{}-pruner-max'", ".", "format", "(", "dataset_name", ")", ",", "self", ".", "get_mean", "(", "self", ".", "scores_max", ")", ",", "step_nr", ")", "\n", "\n", "self", ".", "end_epoch", "(", "dataset_name", ",", "predict", ",", "tb_logger", ",", "step_nr", ")", "\n", "if", "self", ".", "debug_stats", ":", "\n", "            ", "self", ".", "pruner_losses", "=", "list", "(", ")", "\n", "self", ".", "scores_norm", "=", "list", "(", ")", "\n", "self", ".", "scores_mean", "=", "list", "(", ")", "\n", "self", ".", "scores_std", "=", "list", "(", ")", "\n", "self", ".", "scores_min", "=", "list", "(", ")", "\n", "self", ".", "scores_max", "=", "list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.pruner.MentionPrunerSpanBertHoi.end_epoch": [[641, 662], ["print", "print", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "", "def", "end_epoch", "(", "self", ",", "dataset_name", ",", "predict", ",", "tb_logger", ",", "step_nr", ")", ":", "\n", "        ", "if", "self", ".", "debug_stats", "or", "predict", ":", "\n", "            ", "print", "(", "\"{}-span-generator: {} / {} = {}\"", ".", "format", "(", "dataset_name", ",", "self", ".", "span_generated", ",", "self", ".", "span_recall_denom", ",", "\n", "self", ".", "span_generated", "/", "(", "self", ".", "span_recall_denom", "+", "1e-7", ")", ")", ")", "\n", "print", "(", "\"{}-span-recall: {} / {} = {}\"", ".", "format", "(", "dataset_name", ",", "self", ".", "span_recall_numer", ",", "self", ".", "span_recall_denom", ",", "\n", "self", ".", "span_recall_numer", "/", "(", "self", ".", "span_recall_denom", "+", "1e-7", ")", ")", ")", "\n", "print", "(", "\"{}-span-loss: {}\"", ".", "format", "(", "dataset_name", ",", "self", ".", "span_loss", ")", ")", "\n", "print", "(", "\"{}-span-recall-enabled: {} / {} = {}\"", ".", "format", "(", "dataset_name", ",", "self", ".", "span_recall_numer_enabled", ",", "\n", "self", ".", "span_recall_denom", ",", "\n", "self", ".", "span_recall_numer_enabled", "/", "(", "\n", "self", ".", "span_recall_denom", "+", "1e-7", ")", ")", ")", "\n", "print", "(", "\"{}-span-precision-enabled: {} / {} = {}\"", ".", "format", "(", "dataset_name", ",", "self", ".", "span_recall_numer_enabled", ",", "\n", "self", ".", "span_all_enabled", ",", "\n", "self", ".", "span_recall_numer_enabled", "/", "(", "\n", "self", ".", "span_all_enabled", "+", "1e-7", ")", ")", ")", "\n", "", "self", ".", "span_generated", "=", "0", "\n", "self", ".", "span_recall_numer", "=", "0", "\n", "self", ".", "span_recall_numer_enabled", "=", "0", "\n", "self", ".", "span_recall_denom", "=", "0", "\n", "self", ".", "span_loss", "=", "0.0", "\n", "self", ".", "span_all_enabled", "=", "0", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.pruner.create_spans_targets": [[19, 27], ["torch.zeros_like", "torch.zeros_like", "scores.size", "enumerate"], "function", ["None"], ["def", "create_spans_targets", "(", "scores", ",", "gold_spans", ")", ":", "\n", "    ", "targets", "=", "torch", ".", "zeros_like", "(", "scores", ")", "\n", "max_span_length", "=", "scores", ".", "size", "(", "2", ")", "\n", "for", "i", ",", "spans", "in", "enumerate", "(", "gold_spans", ")", ":", "\n", "        ", "for", "begin", ",", "end", "in", "spans", ":", "\n", "            ", "if", "begin", "is", "not", "None", "and", "end", "is", "not", "None", "and", "end", "-", "begin", "<", "max_span_length", ":", "\n", "                ", "targets", "[", "i", ",", "begin", ",", "end", "-", "begin", ",", "0", "]", "=", "1.0", "\n", "", "", "", "return", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.pruner.decode_accepted_spans": [[29, 38], ["scores.size", "scores.size", "torch.nonzero().tolist", "torch.nonzero().tolist", "list", "output[].append", "range", "torch.nonzero", "torch.nonzero", "scores.view"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist"], ["", "def", "decode_accepted_spans", "(", "scores", ")", ":", "\n", "    ", "num_batch", "=", "scores", ".", "size", "(", "0", ")", "\n", "max_span_length", "=", "scores", ".", "size", "(", "2", ")", "\n", "output", "=", "[", "list", "(", ")", "for", "_", "in", "range", "(", "num_batch", ")", "]", "\n", "for", "batch_idx", ",", "span_idx", "in", "torch", ".", "nonzero", "(", "(", "scores", ".", "view", "(", "num_batch", ",", "-", "1", ")", ">", "0", ")", ".", "float", "(", ")", ")", ".", "tolist", "(", ")", ":", "\n", "        ", "begin", "=", "span_idx", "//", "max_span_length", "\n", "length", "=", "span_idx", "%", "max_span_length", "\n", "output", "[", "batch_idx", "]", ".", "append", "(", "(", "begin", ",", "begin", "+", "length", ")", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_mtt_prop.ModuleCorefLinkerMTTPropE2E.__init__": [[12, 45], ["torch.Module.__init__", "print", "modules.utils.misc.MyGate", "modules.text_field.TextFieldEmbedderTokens", "models.coreflinker.scorers.OptFFpairsCorefLinkerMTTBase"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["    ", "def", "__init__", "(", "self", ",", "dim_span", ",", "coref_pruner", ",", "span_pair_generator", ",", "config", ",", "dictionaries", ")", ":", "\n", "# TODO: we are here: pass dim_entity here", "\n", "        ", "super", "(", "ModuleCorefLinkerMTTPropE2E", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# no graph propagations in the first version", "\n", "self", ".", "coref_prop", "=", "None", "\n", "\n", "print", "(", "\"ModuleCorefLinkerMTTPropE2E(cp={})\"", ".", "format", "(", "self", ".", "coref_prop", ")", ")", "\n", "\n", "self", ".", "coref_pruner", "=", "coref_pruner", "\n", "\n", "# self.coref = OptFFpairs(dim_span, 1, config['linkercoref_prop'], span_pair_generator)", "\n", "\n", "self", ".", "enabled", "=", "config", "[", "'enabled'", "]", "\n", "self", ".", "nonlinear_function", "=", "config", "[", "'nonlinear_function'", "]", "\n", "self", ".", "float_precision", "=", "config", "[", "'float_precision'", "]", "\n", "\n", "if", "self", ".", "enabled", ":", "\n", "            ", "self", ".", "entity_embedder", "=", "TextFieldEmbedderTokens", "(", "dictionaries", ",", "config", "[", "'entity_embedder'", "]", ")", "\n", "\n", "# if config['model_type'] == 'base':", "\n", "self", ".", "linker_coref", "=", "OptFFpairsCorefLinkerMTTBase", "(", "dim_span", ",", "self", ".", "entity_embedder", ",", "\n", "1", ",", "config", "[", "'coreflinker_prop'", "]", ",", "span_pair_generator", ",", "\n", "# filter_singletons_with_matrix=False,", "\n", "dictionaries", "=", "dictionaries", ")", "\n", "# elif config['model_type'] == 'super-naive':", "\n", "#     self.linker_coref = OptFFpairsLinkerCorefNaive(dim_span, self.entity_embedder.dim,", "\n", "#                                                    1, config['model_details'], span_pair_generator,", "\n", "#                                                    filter_singletons_with_matrix=False)", "\n", "", "else", ":", "\n", "            ", "self", ".", "entity_embedder", "=", "None", "\n", "\n", "", "self", ".", "gate", "=", "MyGate", "(", "dim_span", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_mtt_prop.ModuleCorefLinkerMTTPropE2E.forward": [[46, 116], ["modules.misc.misc.batched_index_select", "modules.misc.misc.batched_index_select.to", "modules.misc.misc.batched_index_select().squeeze", "modules.misc.misc.batched_index_select().squeeze.max().item", "coreflinker_mtt_prop.ModuleCorefLinkerMTTPropE2E.entity_embedder", "coreflinker_mtt_prop.ModuleCorefLinkerMTTPropE2E.linker_coref().squeeze", "modules.utils.misc.coref_add_scores_coreflinker", "all_spans.copy", "filtered_spans.copy", "torch.arcsinh", "torch.arcsinh", "torch.arcsinh", "torch.arcsinh", "modules.misc.misc.batched_index_select", "modules.misc.misc.batched_index_select().squeeze.max", "coreflinker_mtt_prop.ModuleCorefLinkerMTTPropE2E.linker_coref", "linker[].unsqueeze"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.batched_index_select", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_mtt_prop_hoi.ModuleCorefLinkerMTTPropE2EHoi.coref_add_scores_coreflinker", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.batched_index_select"], ["", "def", "forward", "(", "self", ",", "all_spans", ",", "filtered_spans", ",", "sequence_lengths", ",", "linker", ")", ":", "\n", "\n", "# if (not self.enabled) or (linker_spans.shape[1] == 0 and (not self.end_to_end)):", "\n", "#     return all_spans, filtered_spans, None", "\n", "        ", "if", "not", "self", ".", "enabled", "or", "filtered_spans", "[", "'span_vecs'", "]", "is", "None", ":", "\n", "            ", "return", "all_spans", ",", "filtered_spans", ",", "None", "\n", "\n", "", "all_vecs", "=", "all_spans", "[", "'span_vecs'", "]", "# torch.Size([1, 69, 5, 1676])", "\n", "\n", "# prune_indices", "\n", "# all_vecs should be of # torch.Size([1, 69, 5, 1676])", "\n", "# filtered_vecs = filtered_spans['span_vecs']  # torch.Size([1, 14, 1676])", "\n", "\n", "# TODO (13/10/2020) - changing to include end-to-end candidates, which would be the candidates not for gold", "\n", "#   BUT for the filtered_spans!", "\n", "\n", "# linker_candidates = batched_index_select(linker['cands_all_spans_no_nill'], filtered_spans['prune_indices'])", "\n", "linker_candidates", "=", "batched_index_select", "(", "linker", "[", "'candidates'", "]", ",", "filtered_spans", "[", "'prune_indices'", "]", ")", "\n", "\n", "# TODO 13/10/2020 - WE ARE HERE: use batched_index_select from allennlp to get the candidates.", "\n", "#    batch index select of linker['cands_all_spans_no_nill'] based on indices in filtered_spans['prune_indices']", "\n", "\n", "# TODO (13/10/2020) - end changing to include end-to-end candidates, which would be the candidates not for gold", "\n", "#   BUT for the filtered_spans!", "\n", "\n", "filtered_span_begin", "=", "filtered_spans", "[", "'span_begin'", "]", "\n", "filtered_span_end", "=", "filtered_spans", "[", "'span_end'", "]", "\n", "\n", "# triangular_mask = filtered_spans['triangular_mask']", "\n", "\n", "# (11/10/2020) - new code that takes directly the filtered_spans", "\n", "# TODO: this has to be changed, can not rely on the exact position of filtered['span_vecs']!!!", "\n", "linker_span_embeddings", "=", "filtered_spans", "[", "'span_vecs'", "]", "\n", "# (11/10/2020) - end new code that takes directly the filtered_spans", "\n", "\n", "candidates", "=", "linker_candidates", ".", "to", "(", "all_vecs", ".", "device", ")", "# torch.Size([1, 9, 17])", "\n", "candidate_lengths", "=", "batched_index_select", "(", "linker", "[", "'candidate_lengths'", "]", ".", "unsqueeze", "(", "-", "1", ")", ",", "\n", "filtered_spans", "[", "'prune_indices'", "]", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "max_cand_length", "=", "candidate_lengths", ".", "max", "(", ")", ".", "item", "(", ")", "\n", "candidates", "=", "candidates", "[", ":", ",", ":", ",", ":", "max_cand_length", "]", "\n", "\n", "candidate_vecs", "=", "self", ".", "entity_embedder", "(", "candidates", ")", "# torch.Size([1, 9, 17, 200])", "\n", "\n", "# if not self.end_to_end:", "\n", "update_mentions", "=", "linker_span_embeddings", "# torch.Size([1, 9, 1676])", "\n", "update_entities", "=", "candidate_vecs", "# torch.Size([1, 9, 17, 200])", "\n", "\n", "linker_coref_scores", "=", "self", ".", "linker_coref", "(", "update_mentions", ",", "update_entities", ",", "filtered_span_begin", ",", "\n", "filtered_span_end", ",", "\n", "candidate_lengths", "=", "candidate_lengths", ",", "\n", "max_cand_length", "=", "max_cand_length", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "# candidate_lengths=linker['candidate_lengths']).squeeze(-1)", "\n", "\n", "linker_coref_scores", "=", "coref_add_scores_coreflinker", "(", "linker_coref_scores", ",", "filtered_spans", "[", "'span_scores'", "]", ",", "\n", "# self.filter_singletons_with_matrix,", "\n", "False", ",", "\n", "subtract_pruner_for_singletons", "=", "False", ")", "\n", "\n", "if", "self", ".", "nonlinear_function", "is", "not", "None", "and", "self", ".", "nonlinear_function", "==", "'arsinh'", ":", "\n", "            ", "linker_coref_scores", "=", "torch", ".", "arcsinh", "(", "linker_coref_scores", ")", "\n", "# subtract_pruner_for_singletons=self.subtract_pruner_for_singletons)", "\n", "\n", "", "update_all", "=", "all_spans", ".", "copy", "(", ")", "\n", "update_filtered", "=", "filtered_spans", ".", "copy", "(", ")", "\n", "\n", "# if self.float_precision == 'float64':", "\n", "#     linker_coref_scores = linker_coref_scores.double()", "\n", "\n", "return", "update_all", ",", "update_filtered", ",", "linker_coref_scores", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.dygie3.MyDygie3.__init__": [[277, 341], ["torch.Module.__init__", "modules.spirit.TextEmbedder", "torch.Dropout", "torch.Dropout", "torch.Dropout", "modules.spirit.Seq2Seq", "modules.ner.spanner.create_span_extractor", "modules.utils.misc.SpanPairs", "dygie3.create_spanprop", "dygie3.create_corefprop", "dictionaries[].tolist", "dygie3.create_relprop", "dygie3.create_coreflinker_prop", "dygie3.create_coreflinker_loss", "modules.ner.spanner.TaskSpan1x", "modules.tasks.relations.create_task_relations", "models.coreflinker.pruner.MentionPruner", "models.coreflinker.pruner.MentionPrunerGold", "modules.tasks.coref.LossCoref", "modules.tasks.coref.LossBidirectionalCoref", "modules.tasks.linker.LinkerNone", "BaseException", "modules.tasks.linker.LossLinkerE2E", "modules.tasks.linker.LossLinker"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.ner.spanner.create_span_extractor", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert.create_spanprop", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.create_corefprop", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.create_relprop", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.create_coreflinker_prop", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.create_coreflinker_loss", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.relations.create_task_relations"], ["    ", "def", "__init__", "(", "self", ",", "dictionaries", ",", "config", ")", ":", "\n", "        ", "super", "(", "MyDygie3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "random_embed_dim", "=", "config", "[", "'random_embed_dim'", "]", "\n", "self", ".", "max_span_length", "=", "config", "[", "'max_span_length'", "]", "\n", "self", ".", "hidden_dim", "=", "config", "[", "'hidden_dim'", "]", "# 150", "\n", "self", ".", "hidden_dp", "=", "config", "[", "'hidden_dropout'", "]", "# 0.4", "\n", "self", ".", "rel_after_coref", "=", "config", "[", "'rel_after_coref'", "]", "\n", "# self.spanbert_input = config['spanbert_input']", "\n", "\n", "self", ".", "load_doc_level_candidates", "=", "(", "config", "[", "'coreflinker'", "]", "[", "'enabled'", "]", "and", "config", "[", "'coreflinker'", "]", "[", "'doc_level_candidates'", "]", ")", "or", "(", "config", "[", "'linker'", "]", "[", "'enabled'", "]", "and", "config", "[", "'linker'", "]", "[", "'doc_level_candidates'", "]", ")", "\n", "\n", "self", ".", "debug_memory", "=", "False", "\n", "self", ".", "debug_tensors", "=", "False", "\n", "\n", "# whether take gold mentions or use the pruner", "\n", "self", ".", "end_to_end_mentions", "=", "config", "[", "'end_to_end_mentions'", "]", "\n", "self", ".", "embedder", "=", "TextEmbedder", "(", "dictionaries", ",", "config", "[", "'text_embedder'", "]", ")", "\n", "self", ".", "entity_dictionary", "=", "dictionaries", "[", "'entities'", "]", "\n", "\n", "self", ".", "emb_dropout", "=", "nn", ".", "Dropout", "(", "config", "[", "'lexical_dropout'", "]", ")", "\n", "self", ".", "seq2seq", "=", "Seq2Seq", "(", "self", ".", "embedder", ".", "dim_output", "+", "self", ".", "random_embed_dim", ",", "config", "[", "'seq2seq'", "]", ")", "\n", "\n", "self", ".", "span_extractor", "=", "create_span_extractor", "(", "self", ".", "seq2seq", ".", "dim_output", ",", "self", ".", "max_span_length", ",", "\n", "config", "[", "'span-extractor'", "]", ")", "\n", "\n", "if", "self", ".", "end_to_end_mentions", ":", "\n", "            ", "self", ".", "span_pruner", "=", "MentionPruner", "(", "self", ".", "span_extractor", ".", "dim_output", ",", "self", ".", "max_span_length", ",", "config", "[", "'pruner'", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "span_pruner", "=", "MentionPrunerGold", "(", "self", ".", "max_span_length", ",", "config", "[", "'pruner'", "]", ")", "\n", "\n", "", "self", ".", "span_pair_generator", "=", "SpanPairs", "(", "self", ".", "span_extractor", ".", "dim_output", ",", "config", "[", "'span-pairs'", "]", ")", "\n", "\n", "self", ".", "span_prop", "=", "create_spanprop", "(", "self", ",", "config", ")", "\n", "\n", "self", ".", "coref_scorer", "=", "create_corefprop", "(", "self", ",", "config", "[", "'coref'", "]", ")", "\n", "\n", "self", ".", "relation_labels", "=", "dictionaries", "[", "'relations'", "]", ".", "tolist", "(", ")", "\n", "self", ".", "rel_scorer", "=", "create_relprop", "(", "self", ",", "config", ")", "\n", "\n", "if", "not", "config", "[", "'coref'", "]", "[", "'bidirectional'", "]", ":", "\n", "            ", "self", ".", "coref_task", "=", "LossCoref", "(", "'coref'", ",", "config", "[", "'coref'", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "coref_task", "=", "LossBidirectionalCoref", "(", "'coref'", ",", "config", "[", "'coref'", "]", ")", "\n", "\n", "# kzaporoj - here add linkercoref joint", "\n", "", "self", ".", "coref_linker_scorer", "=", "create_coreflinker_prop", "(", "self", ",", "config", ",", "dictionaries", ")", "\n", "self", ".", "coref_linker_task", "=", "create_coreflinker_loss", "(", "self", ",", "config", ")", "\n", "\n", "self", ".", "ner_task", "=", "TaskSpan1x", "(", "'tags'", ",", "self", ".", "span_extractor", ".", "dim_output", ",", "dictionaries", "[", "'tags'", "]", ",", "config", "[", "'ner'", "]", ")", "\n", "self", ".", "relation_task", "=", "create_task_relations", "(", "'rels'", ",", "config", "[", "'relations'", "]", ",", "self", ".", "relation_labels", ")", "\n", "\n", "if", "'linker'", "in", "config", "and", "config", "[", "'linker'", "]", "[", "'enabled'", "]", ":", "\n", "            ", "if", "self", ".", "end_to_end_mentions", ":", "\n", "                ", "self", ".", "linker_task", "=", "LossLinkerE2E", "(", "'links'", ",", "self", ".", "span_extractor", ".", "dim_output", ",", "dictionaries", ",", "\n", "config", "[", "'linker'", "]", ",", "self", ".", "max_span_length", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "linker_task", "=", "LossLinker", "(", "'links'", ",", "self", ".", "span_extractor", ".", "dim_output", ",", "dictionaries", ",", "config", "[", "'linker'", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "linker_task", "=", "LinkerNone", "(", ")", "\n", "\n", "", "if", "not", "self", ".", "span_pruner", ".", "sort_after_pruning", "and", "self", ".", "pairs", ".", "requires_sorted_spans", ":", "\n", "            ", "raise", "BaseException", "(", "\"ERROR: spans MUST be sorted\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.dygie3.MyDygie3.collate_func": [[342, 344], ["dygie3.collate_dygie"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.dygie3.collate_dygie"], ["", "", "def", "collate_func", "(", "self", ",", "datasets", ",", "device", ")", ":", "\n", "        ", "return", "lambda", "x", ":", "collate_dygie", "(", "self", ",", "x", ",", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.dygie3.MyDygie3.end_epoch": [[345, 347], ["dygie3.MyDygie3.span_pruner.end_epoch"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert.CoreflinkerSpanBert.end_epoch"], ["", "def", "end_epoch", "(", "self", ",", "dataset_name", ")", ":", "\n", "        ", "self", ".", "span_pruner", ".", "end_epoch", "(", "dataset_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.dygie3.MyDygie3.forward": [[348, 548], ["dygie3.MyDygie3.embedder", "dygie3.MyDygie3.emb_dropout", "dygie3.MyDygie3.seq2seq().contiguous", "modules.ner.spanner.create_all_spans", "dygie3.MyDygie3.span_extractor", "dygie3.MyDygie3.span_pruner", "metadata.get", "dygie3.MyDygie3.ner_task", "dygie3.MyDygie3.coref_task", "dygie3.MyDygie3.coref_linker_task", "dygie3.MyDygie3.relation_task", "print", "print", "torch.FloatTensor().to().normal_", "torch.FloatTensor().to().normal_", "torch.FloatTensor().to().normal_", "torch.FloatTensor().to().normal_", "torch.FloatTensor().to().normal_", "torch.FloatTensor().to().normal_", "torch.FloatTensor().to().normal_", "torch.FloatTensor().to().normal_", "torch.FloatTensor().to().normal_", "modules.misc.misc.batched_index_select", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "modules.utils.misc.inspect", "modules.utils.misc.inspect", "dygie3.MyDygie3.size", "dygie3.MyDygie3.size", "metadata.get", "metadata.get", "metadata.get", "print", "dygie3.MyDygie3.span_prop", "dygie3.MyDygie3.coref_scorer", "dygie3.MyDygie3.coref_linker_scorer", "print", "dygie3.MyDygie3.rel_scorer", "print", "metadata.get", "list", "dygie3.MyDygie3.linker_task", "dygie3.MyDygie3.linker_task", "print", "dygie3.MyDygie3.seq2seq", "span_begin.cuda", "span_end.cuda", "span_begin.cpu", "span_end.cpu", "metadata.get", "metadata.get", "metadata.get", "metadata.get", "set", "metadata.get", "metadata.get", "metadata.get", "m.update2", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "sequence_lengths.unsqueeze().unsqueeze", "metadata.get", "metadata.get", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "sequence_lengths.unsqueeze", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.create_all_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.batched_index_select", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.ncr3.CheckGradient.inspect", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.ncr3.CheckGradient.inspect", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.update2", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "relations", ",", "metadata", ",", "metrics", "=", "[", "]", ")", ":", "\n", "        ", "output", "=", "{", "}", "\n", "\n", "sequence_lengths", "=", "inputs", "[", "'sequence_lengths'", "]", "\n", "\n", "if", "self", ".", "debug_memory", "or", "self", ".", "debug_tensors", ":", "\n", "            ", "print", "(", "\"START\"", ",", "metadata", "[", "'identifiers'", "]", "[", "0", "]", ",", "sequence_lengths", ")", "\n", "print", "(", "\"(none)  \"", ",", "torch", ".", "cuda", ".", "memory_allocated", "(", "0", ")", "/", "1024", "/", "1024", ")", "\n", "\n", "# MODEL MODULES", "\n", "", "embeddings", "=", "self", ".", "embedder", "(", "inputs", ")", "\n", "\n", "embeddings", "=", "self", ".", "emb_dropout", "(", "embeddings", ")", "\n", "\n", "if", "self", ".", "random_embed_dim", ">", "0", ":", "\n", "            ", "rand_embedding", "=", "torch", ".", "FloatTensor", "(", "embeddings", ".", "size", "(", "0", ")", ",", "embeddings", ".", "size", "(", "1", ")", ",", "self", ".", "random_embed_dim", ")", ".", "to", "(", "\n", "embeddings", ".", "device", ")", ".", "normal_", "(", "std", "=", "4.0", ")", "\n", "rand_embedding", "=", "batched_index_select", "(", "rand_embedding", ",", "inputs", "[", "'token_indices'", "]", ")", "\n", "embeddings", "=", "torch", ".", "cat", "(", "(", "embeddings", ",", "rand_embedding", ")", ",", "-", "1", ")", "\n", "\n", "", "if", "self", ".", "debug_tensors", ":", "\n", "            ", "inspect", "(", "'embeddings'", ",", "embeddings", "[", "0", ",", ":", ",", ":", "]", ")", "\n", "\n", "", "hidden", "=", "self", ".", "seq2seq", "(", "embeddings", ",", "sequence_lengths", ",", "inputs", "[", "'token_indices'", "]", ")", ".", "contiguous", "(", ")", "\n", "\n", "if", "self", ".", "debug_tensors", ":", "\n", "            ", "inspect", "(", "'hidden'", ",", "hidden", "[", "0", ",", ":", ",", ":", "]", ")", "\n", "\n", "# create span", "\n", "", "span_begin", ",", "span_end", "=", "create_all_spans", "(", "hidden", ".", "size", "(", "0", ")", ",", "hidden", ".", "size", "(", "1", ")", ",", "self", ".", "max_span_length", ")", "\n", "# span_begin.shape -->  1 x 69 x 5     ; span_end.shape --> 1 x 69 x 5", "\n", "# kzaporoj", "\n", "if", "settings", ".", "device", "==", "'cuda'", ":", "\n", "            ", "span_begin", ",", "span_end", "=", "span_begin", ".", "cuda", "(", ")", ",", "span_end", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "span_begin", ",", "span_end", "=", "span_begin", ".", "cpu", "(", ")", ",", "span_end", ".", "cpu", "(", ")", "\n", "\n", "", "span_mask", "=", "(", "span_end", "<", "sequence_lengths", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "float", "(", ")", "# span_mask.shape --> 1 x 69 x 5", "\n", "\n", "# extract span embeddings", "\n", "span_vecs", "=", "self", ".", "span_extractor", "(", "hidden", ",", "span_begin", ",", "span_end", ",", "self", ".", "max_span_length", ")", "\n", "\n", "all_spans", "=", "{", "\n", "'span_vecs'", ":", "span_vecs", ",", "\n", "'span_begin'", ":", "span_begin", ",", "\n", "'span_end'", ":", "span_end", ",", "\n", "'span_mask'", ":", "span_mask", "\n", "}", "\n", "\n", "obj_pruner", ",", "all_spans", ",", "filtered_spans", "=", "self", ".", "span_pruner", "(", "all_spans", ",", "metadata", ".", "get", "(", "'gold_spans'", ")", ",", "\n", "sequence_lengths", ",", "\n", "metadata", ".", "get", "(", "'gold_spans_lengths'", ")", ",", "\n", "metadata", ".", "get", "(", "'gold_spans_tensors'", ")", ",", "\n", "doc_id", "=", "metadata", ".", "get", "(", "'identifiers'", ")", ",", "\n", "api_call", "=", "metadata", ".", "get", "(", "'api_call'", ")", ")", "\n", "# span_lengths = filtered_spans['span_lengths']", "\n", "pred_spans", "=", "filtered_spans", "[", "'spans'", "]", "\n", "gold_spans", "=", "metadata", ".", "get", "(", "'gold_spans'", ")", "\n", "\n", "if", "self", ".", "debug_memory", ":", "\n", "            ", "print", "(", "\"(pruner)\"", ",", "torch", ".", "cuda", ".", "memory_allocated", "(", "0", ")", "/", "1024", "/", "1024", ")", "\n", "\n", "## spanprop (no extra labels)", "\n", "", "if", "self", ".", "span_prop", "is", "not", "None", ":", "\n", "            ", "all_spans", ",", "filtered_spans", "=", "self", ".", "span_prop", "(", "\n", "all_spans", ",", "\n", "filtered_spans", ",", "\n", "sequence_lengths", "\n", ")", "\n", "\n", "## coref", "\n", "", "if", "self", ".", "coref_task", ".", "enabled", ":", "\n", "            ", "coref_all", ",", "coref_filtered", ",", "coref_scores", "=", "self", ".", "coref_scorer", "(", "\n", "all_spans", ",", "\n", "filtered_spans", ",", "\n", "# sequence_lengths,", "\n", "metadata", ".", "get", "(", "'gold_spans_tensors'", ")", ",", "\n", "max_span_length", "=", "self", ".", "max_span_length", ",", "\n", "gold_spans_lengths", "=", "metadata", ".", "get", "(", "'gold_spans_lengths'", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "coref_scores", "=", "None", "\n", "\n", "", "if", "self", ".", "coref_linker_task", ".", "enabled", ":", "\n", "# kzaporoj - for now just like this, then can add different graph propagation for coref+linker configuration", "\n", "            ", "coref_all", ",", "coref_filtered", ",", "linker_coref_scores", "=", "self", ".", "coref_linker_scorer", "(", "\n", "all_spans", ",", "\n", "filtered_spans", ",", "\n", "sequence_lengths", ",", "\n", "linker", "=", "metadata", "[", "'linker'", "]", ")", "\n", "", "else", ":", "\n", "            ", "coref_all", "=", "all_spans", "\n", "coref_filtered", "=", "filtered_spans", "\n", "linker_coref_scores", "=", "None", "\n", "coref_targets", "=", "None", "\n", "\n", "", "if", "not", "self", ".", "rel_after_coref", ":", "\n", "            ", "coref_all", "=", "all_spans", "\n", "coref_filtered", "=", "filtered_spans", "\n", "\n", "", "if", "self", ".", "debug_memory", ":", "\n", "            ", "print", "(", "\"(coref) \"", ",", "torch", ".", "cuda", ".", "memory_allocated", "(", "0", ")", "/", "1024", "/", "1024", ")", "\n", "\n", "## relations", "\n", "", "if", "self", ".", "relation_task", ".", "enabled", ":", "\n", "            ", "relation_all", ",", "relation_filtered", ",", "relation_scores", "=", "self", ".", "rel_scorer", "(", "\n", "coref_all", ",", "\n", "coref_filtered", ",", "\n", "sequence_lengths", ")", "\n", "\n", "", "else", ":", "\n", "            ", "relation_all", "=", "coref_all", "\n", "relation_filtered", "=", "coref_filtered", "\n", "relation_scores", "=", "None", "\n", "relation_targets", "=", "None", "\n", "\n", "", "if", "self", ".", "debug_memory", ":", "\n", "            ", "print", "(", "\"(rels)  \"", ",", "torch", ".", "cuda", ".", "memory_allocated", "(", "0", ")", "/", "1024", "/", "1024", ")", "\n", "\n", "# LOSS FUNCTIONS", "\n", "\n", "## ner", "\n", "", "ner_obj", ",", "output", "[", "'tags'", "]", "=", "self", ".", "ner_task", "(", "\n", "relation_all", ",", "\n", "sequence_lengths", ",", "\n", "metadata", ".", "get", "(", "'gold_tags_indices'", ")", ",", "\n", "api_call", "=", "metadata", ".", "get", "(", "'api_call'", ")", "\n", ")", "\n", "\n", "ner_spans", "=", "[", "list", "(", "set", "(", "[", "(", "begin", ",", "end", "-", "1", ")", "for", "begin", ",", "end", ",", "_", "in", "spans", "]", ")", ")", "for", "spans", "in", "\n", "output", "[", "'tags'", "]", "[", "'pred'", "]", "]", "# TODO: settle on include spans", "\n", "\n", "coref_obj", ",", "output", "[", "'coref'", "]", "=", "self", ".", "coref_task", "(", "\n", "coref_scores", ",", "\n", "gold_m2i", "=", "metadata", ".", "get", "(", "'gold_m2i'", ")", ",", "\n", "pred_spans", "=", "pred_spans", ",", "\n", "gold_spans", "=", "gold_spans", ",", "\n", "predict", "=", "True", ",", "\n", "pruner_spans", "=", "relation_filtered", "[", "'enabled_spans'", "]", ",", "\n", "ner_spans", "=", "ner_spans", "\n", ")", "\n", "\n", "## linker+coref", "\n", "linker_coref_obj", ",", "output", "[", "'links'", "]", ",", "output_coref", "=", "self", ".", "coref_linker_task", "(", "\n", "scores", "=", "linker_coref_scores", ",", "\n", "gold_m2i", "=", "metadata", ".", "get", "(", "'gold_m2i'", ")", ",", "\n", "filtered_spans", "=", "filtered_spans", ",", "\n", "gold_spans", "=", "gold_spans", ",", "\n", "linker", "=", "metadata", "[", "'linker'", "]", ",", "\n", "# predict=True,", "\n", "predict", "=", "not", "self", ".", "training", ",", "\n", "pruner_spans", "=", "relation_filtered", "[", "'enabled_spans'", "]", ",", "\n", "ner_spans", "=", "ner_spans", ",", "\n", "api_call", "=", "metadata", ".", "get", "(", "'api_call'", ")", "\n", ")", "# TODO: candidate links", "\n", "\n", "# if not self.coref_task.enabled:", "\n", "if", "self", ".", "coref_linker_task", ".", "enabled", ":", "\n", "# if the coreflinker task is enabled, then overrides the corefs with the ones calculated by coreflinker", "\n", "            ", "output", "[", "'coref'", "]", "=", "output_coref", "\n", "\n", "## relations", "\n", "", "rel_obj", ",", "output", "[", "'rels'", "]", "=", "self", ".", "relation_task", "(", "\n", "relation_filtered", ",", "\n", "relation_scores", ",", "\n", "relations", ",", "\n", "output", "[", "'coref'", "]", ",", "\n", "predict", "=", "not", "self", ".", "training", "\n", ")", "\n", "\n", "## linker", "\n", "if", "self", ".", "linker_task", ".", "enabled", ":", "\n", "            ", "linker_obj", ",", "output_links", ",", "tmp_out_coref", "=", "self", ".", "linker_task", "(", "\n", "relation_all", ",", "\n", "metadata", "[", "'linker'", "]", ",", "\n", "filtered_spans", ",", "\n", "gold_m2i", "=", "metadata", ".", "get", "(", "'gold_m2i'", ")", ",", "\n", "gold_spans", "=", "gold_spans", "\n", ")", "\n", "output", "[", "'links'", "]", "=", "output_links", "\n", "\n", "if", "not", "self", ".", "coref_task", ".", "enabled", ":", "\n", "# if the coref task is not enabled, then takes the coreference given by linking (mentions pointing", "\n", "# to the same link are considered clustered).", "\n", "                ", "output", "[", "'coref'", "]", "=", "tmp_out_coref", "\n", "", "", "else", ":", "\n", "            ", "linker_obj", ",", "_", "=", "self", ".", "linker_task", "(", "\n", "relation_all", ",", "\n", "metadata", "[", "'linker'", "]", "\n", ")", "\n", "\n", "", "for", "m", "in", "metrics", ":", "\n", "            ", "if", "m", ".", "task", "in", "output", ":", "\n", "                ", "m", ".", "update2", "(", "output", "[", "m", ".", "task", "]", ",", "metadata", ")", "\n", "\n", "", "", "if", "self", ".", "debug_memory", ":", "\n", "            ", "print", "(", "\"(loss)  \"", ",", "torch", ".", "cuda", ".", "memory_allocated", "(", "0", ")", "/", "1024", "/", "1024", ")", "\n", "\n", "", "return", "obj_pruner", "+", "coref_obj", "+", "ner_obj", "+", "rel_obj", "+", "linker_obj", "+", "linker_coref_obj", ",", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.dygie3.MyDygie3.predict": [[549, 552], ["dygie3.MyDygie3.forward", "dygie3.MyDygie3.decode"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.relbasic.ModuleRelBasic.forward", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.decode"], ["", "def", "predict", "(", "self", ",", "inputs", ",", "relations", ",", "metadata", ",", "metrics", "=", "[", "]", ",", "output_config", "=", "None", ")", ":", "\n", "        ", "loss", ",", "output", "=", "self", ".", "forward", "(", "inputs", ",", "relations", ",", "metadata", ",", "metrics", ")", "\n", "return", "loss", ",", "self", ".", "decode", "(", "metadata", ",", "output", ",", "output_config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.dygie3.MyDygie3.create_metrics": [[553, 556], ["dygie3.MyDygie3.coref_linker_task.create_metrics", "dygie3.MyDygie3.linker_task.create_metrics", "dygie3.MyDygie3.relation_task.create_metrics", "dygie3.MyDygie3.coref_task.create_metrics", "dygie3.MyDygie3.ner_task.create_metrics"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.create_metrics", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.create_metrics", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.create_metrics", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.create_metrics", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.create_metrics"], ["", "def", "create_metrics", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "coref_task", ".", "create_metrics", "(", ")", "+", "self", ".", "ner_task", ".", "create_metrics", "(", ")", "+", "self", ".", "relation_task", ".", "create_metrics", "(", ")", "+", "self", ".", "linker_task", ".", "create_metrics", "(", ")", "+", "self", ".", "coref_linker_task", ".", "create_metrics", "(", ")", "\n", "# + self.coref_linker_mtt_task.create_metrics()", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.dygie3.MyDygie3.write_model": [[558, 568], ["print", "dygie3.MyDygie3.state_dict().items", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "k.startswith", "dygie3.MyDygie3.state_dict", "print"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "write_model", "(", "self", ",", "filename", ")", ":", "\n", "        ", "print", "(", "\"write model:\"", ",", "filename", ")", "\n", "mydict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "self", ".", "state_dict", "(", ")", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", ".", "startswith", "(", "'word_embeddings'", ")", ":", "\n", "                ", "print", "(", "\"skip:\"", ",", "k", ")", "\n", "continue", "\n", "", "else", ":", "\n", "                ", "mydict", "[", "k", "]", "=", "v", "\n", "", "", "torch", ".", "save", "(", "mydict", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.dygie3.MyDygie3.load_model": [[569, 590], ["print", "dygie3.MyDygie3.state_dict", "dygie3.MyDygie3.update", "dygie3.MyDygie3.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load.keys", "torch.load.keys", "torch.load.keys", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "keys_to_remove.append", "keys_to_remove.append"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.update"], ["", "def", "load_model", "(", "self", ",", "filename", ",", "to_cpu", "=", "False", ",", "load_word_embeddings", "=", "True", ")", ":", "\n", "        ", "print", "(", "'to_cpu IN LOAD_MODEL: '", ",", "to_cpu", ")", "\n", "if", "to_cpu", ":", "\n", "            ", "partial", "=", "torch", ".", "load", "(", "filename", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "", "else", ":", "\n", "# partial = torch.load(filename)", "\n", "            ", "partial", "=", "torch", ".", "load", "(", "filename", ",", "map_location", "=", "torch", ".", "device", "(", "settings", ".", "device", ")", ")", "\n", "\n", "", "if", "not", "load_word_embeddings", ":", "\n", "            ", "keys_to_remove", "=", "[", "]", "\n", "for", "curr_key", "in", "partial", ".", "keys", "(", ")", ":", "\n", "                ", "if", "'embedder.word_embedder'", "in", "curr_key", ":", "\n", "                    ", "keys_to_remove", ".", "append", "(", "curr_key", ")", "\n", "", "if", "'entity_embedder.embed.weight'", "in", "curr_key", ":", "\n", "                    ", "keys_to_remove", ".", "append", "(", "curr_key", ")", "\n", "", "", "for", "curr_key", "in", "keys_to_remove", ":", "\n", "                ", "del", "partial", "[", "curr_key", "]", "\n", "# update because word_embed is missing", "\n", "", "", "state", "=", "self", ".", "state_dict", "(", ")", "\n", "state", ".", "update", "(", "partial", ")", "\n", "self", ".", "load_state_dict", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.dygie3.MyDygie3.decode": [[591, 616], ["zip", "predictions.append", "cpn.builder.convert_to_json", "begin.tolist", "end.tolist"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.convert_to_json", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist"], ["", "def", "decode", "(", "self", ",", "metadata", ",", "outputs", ",", "output_config", ",", "api_call", "=", "False", ")", ":", "\n", "        ", "predictions", "=", "[", "]", "\n", "\n", "links_gold_batch", "=", "outputs", "[", "'links'", "]", "[", "'gold'", "]", "\n", "identifiers", "=", "metadata", "[", "'identifiers'", "]", "\n", "tags_batch", "=", "metadata", "[", "'tags'", "]", "\n", "\n", "idx", "=", "0", "\n", "for", "identifier", ",", "tags", ",", "content", ",", "begin", ",", "end", ",", "ner", ",", "coref", ",", "coref_pointers", ",", "coref_scores", ",", "concept_rels", ",", "span_rels", ",", "links_scores", ",", "links_gold", ",", "links_pred", "in", "zip", "(", "\n", "identifiers", ",", "tags_batch", ",", "metadata", "[", "'content'", "]", ",", "metadata", "[", "'begin'", "]", ",", "metadata", "[", "'end'", "]", ",", "\n", "outputs", "[", "'tags'", "]", "[", "'pred'", "]", ",", "outputs", "[", "'coref'", "]", "[", "'pred'", "]", ",", "outputs", "[", "'coref'", "]", "[", "'pred_pointers'", "]", ",", "\n", "outputs", "[", "'coref'", "]", "[", "'scores'", "]", ",", "\n", "outputs", "[", "'rels'", "]", "[", "'pred'", "]", ",", "\n", "outputs", "[", "'rels'", "]", "[", "'span-rel-pred'", "]", ",", "outputs", "[", "'links'", "]", "[", "'scores'", "]", ",", "links_gold_batch", ",", "\n", "outputs", "[", "'links'", "]", "[", "'pred'", "]", ")", ":", "\n", "            ", "predictions", ".", "append", "(", "\n", "convert_to_json", "(", "identifier", ",", "tags", ",", "content", ",", "begin", ".", "tolist", "(", ")", ",", "end", ".", "tolist", "(", ")", ",", "ner", ",", "coref", ",", "\n", "coref_pointers", ",", "coref_scores", ",", "concept_rels", ",", "\n", "span_rels", ",", "links_scores", ",", "links_gold", ",", "links_pred", ",", "\n", "singletons", "=", "self", ".", "coref_task", ".", "singletons", ",", "output_config", "=", "output_config", ")", ")", "\n", "idx", "+=", "1", "\n", "\n", "", "return", "predictions", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.dygie3.collate_dygie": [[39, 152], ["batch.sort", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.pad_sequence", "torch.pad_sequence", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "modules.tasks.linker.collate_spans", "modules.tasks.linker.collate_spans.to", "datass.collate.collate_character", "max", "rnn_utils.pad_sequence.to", "torch.LongTensor.to", "rnn_utils.pad_sequence.to", "zip", "modules.tasks.linker.collate_candidates_in_pytorch", "modules.tasks.linker.collate_targets", "modules.tasks.linker.collate_tot_cand_lengths", "datass.collate.collate_character.to", "zip", "gold_clusters.append", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "candidates.size", "[].size", "len", "list", "clusters[].append", "model.entity_dictionary.lookup", "torch.tensor", "torch.tensor", "torch.tensor", "[].size", "range", "len"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.collate.collate_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.collate.collate_character", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.linker.collate_candidates_in_pytorch", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.linker.collate_targets", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.linker.collate_tot_cand_lengths", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup"], ["def", "collate_dygie", "(", "model", ",", "batch", ",", "device", ",", "collate_api", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n\n    :param model:\n    :param batch:\n    :param device:\n    :param collate_api: if in True, means that the input comes from a client, possibly as a free text\n    (i.e., no gold mentions, relations, concepts, spans, etc.). If in False (default), the input comes for training\n    or evaluating using internal function located in traintool.train for instance.\n    :return:\n    \"\"\"", "\n", "# print('\\ncollate_dygie for following doc ids: ', [b['id'] for b in batch])", "\n", "batch", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "'xxx'", "]", "[", "'tokens'", "]", ".", "size", "(", ")", "[", "0", "]", ",", "reverse", "=", "True", ")", "\n", "sequence_lengths", "=", "torch", ".", "LongTensor", "(", "[", "x", "[", "'xxx'", "]", "[", "'tokens'", "]", ".", "size", "(", ")", "[", "0", "]", "for", "x", "in", "batch", "]", ")", "\n", "# TODO: move this to TextFieldEmbedderCharacters", "\n", "if", "model", ".", "embedder", ".", "do_char_embedding", ":", "\n", "        ", "characters", "=", "collate_character", "(", "[", "x", "[", "'xxx'", "]", "[", "'characters'", "]", "for", "x", "in", "batch", "]", ",", "50", ",", "\n", "model", ".", "embedder", ".", "char_embedder", ".", "padding", ",", "\n", "min_word_len", "=", "model", ".", "embedder", ".", "char_embedder", ".", "min_word_length", ")", "\n", "", "else", ":", "\n", "        ", "characters", "=", "None", "\n", "\n", "", "tokens", "=", "rnn_utils", ".", "pad_sequence", "(", "[", "x", "[", "'xxx'", "]", "[", "'tokens'", "]", "for", "x", "in", "batch", "]", ",", "batch_first", "=", "True", ")", "\n", "last_idx", "=", "max", "(", "[", "len", "(", "x", "[", "'xxx'", "]", "[", "'tokens'", "]", ")", "for", "x", "in", "batch", "]", ")", "-", "1", "\n", "indices", "=", "rnn_utils", ".", "pad_sequence", "(", "[", "x", "[", "'xxx'", "]", "[", "'tokens-indices'", "]", "for", "x", "in", "batch", "]", ",", "batch_first", "=", "True", ",", "\n", "padding_value", "=", "last_idx", ")", "\n", "\n", "inputs", "=", "{", "\n", "'tokens'", ":", "tokens", ".", "to", "(", "device", ")", ",", "\n", "'characters'", ":", "characters", ".", "to", "(", "device", ")", "if", "characters", "is", "not", "None", "else", "None", ",", "\n", "'sequence_lengths'", ":", "sequence_lengths", ".", "to", "(", "device", ")", ",", "\n", "'token_indices'", ":", "indices", ".", "to", "(", "device", ")", ",", "\n", "'text'", ":", "[", "b", "[", "'xxx'", "]", "[", "'text'", "]", "for", "b", "in", "batch", "]", "\n", "}", "\n", "# if not collate_api:", "\n", "gold_spans", "=", "[", "[", "(", "m", "[", "0", "]", ",", "m", "[", "1", "]", ")", "for", "m", "in", "x", "[", "'spans'", "]", "]", "for", "x", "in", "batch", "]", "\n", "# end if not collate_api", "\n", "\n", "# if not collate_api:", "\n", "if", "'gold_clusters'", "in", "batch", "[", "0", "]", ":", "\n", "        ", "gold_clusters", "=", "[", "x", "[", "'gold_clusters'", "]", "for", "x", "in", "batch", "]", "\n", "", "else", ":", "\n", "# TODO: move to cpn utility .py (or remove)", "\n", "        ", "gold_clusters", "=", "[", "]", "\n", "for", "spans", ",", "m2c", "in", "zip", "(", "gold_spans", ",", "[", "x", "[", "'mention2concept'", "]", "for", "x", "in", "batch", "]", ")", ":", "\n", "            ", "clusters", "=", "[", "list", "(", ")", "for", "_", "in", "range", "(", "m2c", "[", "0", "]", ")", "]", "\n", "for", "mention", ",", "concept", "in", "zip", "(", "m2c", "[", "3", "]", ",", "m2c", "[", "2", "]", ")", ":", "\n", "                ", "clusters", "[", "concept", "]", ".", "append", "(", "spans", "[", "mention", "]", ")", "\n", "", "gold_clusters", ".", "append", "(", "clusters", ")", "\n", "# end if not collate_api:", "\n", "\n", "", "", "metadata", "=", "{", "\n", "'tokens'", ":", "[", "x", "[", "'xxx'", "]", "[", "'text'", "]", "for", "x", "in", "batch", "]", ",", "\n", "'content'", ":", "[", "x", "[", "'content'", "]", "for", "x", "in", "batch", "]", ",", "\n", "'begin'", ":", "[", "x", "[", "'begin'", "]", "for", "x", "in", "batch", "]", ",", "\n", "'end'", ":", "[", "x", "[", "'end'", "]", "for", "x", "in", "batch", "]", "\n", "}", "\n", "\n", "# if not collate_api:", "\n", "metadata", "[", "'identifiers'", "]", "=", "[", "x", "[", "'id'", "]", "for", "x", "in", "batch", "]", "\n", "metadata", "[", "'tags'", "]", "=", "[", "x", "[", "'metadata_tags'", "]", "for", "x", "in", "batch", "]", "\n", "# end if not collate_api:", "\n", "\n", "relations", "=", "None", "\n", "# if not collate_api:", "\n", "metadata", "[", "'gold_tags_indices'", "]", "=", "[", "x", "[", "'gold_tags_indices'", "]", "for", "x", "in", "batch", "]", "\n", "metadata", "[", "'gold_spans'", "]", "=", "gold_spans", "\n", "metadata", "[", "'gold_spans_lengths'", "]", "=", "(", "torch", ".", "LongTensor", "(", "[", "len", "(", "curr_spans", ")", "for", "curr_spans", "in", "gold_spans", "]", ")", ")", ".", "to", "(", "\n", "device", "=", "settings", ".", "device", ")", "\n", "metadata", "[", "'gold_m2i'", "]", "=", "[", "x", "[", "'clusters'", "]", "for", "x", "in", "batch", "]", "\n", "\n", "relations", "=", "{", "\n", "'gold_spans'", ":", "gold_spans", ",", "\n", "'gold_m2i'", ":", "[", "x", "[", "'clusters'", "]", "for", "x", "in", "batch", "]", ",", "\n", "'gold_clusters2'", ":", "gold_clusters", "\n", "}", "\n", "\n", "if", "'relations'", "in", "batch", "[", "0", "]", ":", "\n", "# old: remove the dimension", "\n", "        ", "relations", "[", "'gold_relations'", "]", "=", "[", "x", "[", "'relations'", "]", "[", "1", "]", "for", "x", "in", "batch", "]", "\n", "relations", "[", "'num_concepts'", "]", "=", "[", "x", "[", "'relations'", "]", "[", "0", "]", "[", "0", "]", "for", "x", "in", "batch", "]", "\n", "", "else", ":", "\n", "        ", "relations", "[", "'gold_relations'", "]", "=", "[", "x", "[", "'relations2'", "]", "for", "x", "in", "batch", "]", "\n", "relations", "[", "'num_concepts'", "]", "=", "[", "x", "[", "'num_concepts'", "]", "for", "x", "in", "batch", "]", "\n", "\n", "", "spans_tensors", "=", "collate_spans", "(", "gold_spans", ")", "\n", "metadata", "[", "'gold_spans_tensors'", "]", "=", "spans_tensors", ".", "to", "(", "device", "=", "settings", ".", "device", ")", "\n", "\n", "linker", "=", "{", "}", "\n", "if", "(", "model", ".", "linker_task", ".", "enabled", "or", "model", ".", "coref_linker_task", ".", "enabled", ")", "and", "'linker_candidates'", "in", "batch", "[", "0", "]", ":", "\n", "# or model.coref_linker_mtt_task.enabled)", "\n", "        ", "candidates", ",", "candidate_lengths", "=", "collate_candidates_in_pytorch", "(", "[", "x", "[", "'linker_candidates'", "]", "for", "x", "in", "batch", "]", ",", "\n", "unknown_id", "=", "model", ".", "entity_dictionary", ".", "lookup", "(", "\n", "'###UNKNOWN###'", ")", ")", "\n", "linker", "[", "'candidates'", "]", "=", "candidates", "\n", "linker", "[", "'candidate_lengths'", "]", "=", "candidate_lengths", "\n", "# if not collate_api:", "\n", "linker", "[", "'targets'", "]", "=", "collate_targets", "(", "[", "x", "[", "'linker_targets'", "]", "for", "x", "in", "batch", "]", ",", "candidates", ".", "size", "(", "2", ")", ")", "\n", "\n", "linker", "[", "'total_cand_lengths_in_gold_mentions'", "]", "=", "collate_tot_cand_lengths", "(", "[", "torch", ".", "tensor", "(", "x", "[", "'total_cand_lengths_in_gold_mentions'", "]", ",", "dtype", "=", "torch", ".", "int32", ")", "\n", "for", "x", "in", "batch", "]", ")", "\n", "\n", "linker", "[", "'gold'", "]", "=", "[", "x", "[", "'linker_gold'", "]", "for", "x", "in", "batch", "]", "\n", "# end if not collate_api:", "\n", "\n", "", "metadata", "[", "'linker'", "]", "=", "linker", "\n", "metadata", "[", "'api_call'", "]", "=", "collate_api", "\n", "\n", "return", "{", "\n", "'inputs'", ":", "inputs", ",", "\n", "'relations'", ":", "relations", ",", "\n", "'metadata'", ":", "metadata", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.dygie3.create_spanprop": [[155, 167], ["models.coreflinker.attprop.ModuleAttentionProp", "BaseException"], "function", ["None"], ["", "def", "create_spanprop", "(", "model", ",", "config", ")", ":", "\n", "    ", "if", "'spanprop'", "in", "config", ":", "\n", "        ", "sp_type", "=", "config", "[", "'spanprop'", "]", "[", "'type'", "]", "\n", "\n", "if", "sp_type", "==", "'attprop'", ":", "\n", "            ", "return", "ModuleAttentionProp", "(", "model", ".", "span_extractor", ".", "dim_output", ",", "\n", "# model.span_pruner.scorer,", "\n", "model", ".", "span_pair_generator", ",", "config", "[", "'spanprop'", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "BaseException", "(", "\"no such spanprop:\"", ",", "sp_type", ")", "\n", "", "", "else", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.dygie3.create_corefprop": [[169, 188], ["models.coreflinker.corefbasic.ModuleCorefBasic", "models.coreflinker.corefprop.ModuleCorefProp", "models.coreflinker.corefprop2.ModuleCorefProp2", "models.coreflinker.attention.ModulePlainAttention", "BaseException"], "function", ["None"], ["", "", "def", "create_corefprop", "(", "model", ",", "config", ")", ":", "\n", "    ", "cp_type", "=", "config", "[", "'corefprop'", "]", "[", "'type'", "]", "\n", "\n", "if", "cp_type", "==", "'none'", ":", "\n", "        ", "return", "None", "\n", "", "elif", "cp_type", "==", "'basic'", ":", "\n", "        ", "return", "ModuleCorefBasic", "(", "model", ".", "span_extractor", ".", "dim_output", ",", "model", ".", "span_pruner", ".", "scorer", ",", "model", ".", "span_pair_generator", ",", "\n", "config", "[", "'corefprop'", "]", ")", "\n", "", "elif", "cp_type", "==", "'default'", ":", "\n", "        ", "return", "ModuleCorefProp", "(", "model", ".", "span_extractor", ".", "dim_output", ",", "model", ".", "span_pruner", ".", "scorer", ",", "model", ".", "span_pair_generator", ",", "\n", "config", ")", "\n", "", "elif", "cp_type", "==", "'corefprop2'", ":", "\n", "        ", "return", "ModuleCorefProp2", "(", "model", ".", "span_extractor", ".", "dim_output", ",", "model", ".", "span_pruner", ".", "scorer", ",", "model", ".", "span_pair_generator", ",", "\n", "config", "[", "'corefprop'", "]", ")", "\n", "", "elif", "cp_type", "==", "'attention'", ":", "\n", "        ", "return", "ModulePlainAttention", "(", "model", ".", "span_extractor", ".", "dim_output", ",", "1", ",", "model", ".", "span_pair_generator", ",", "config", "[", "'relprop'", "]", ",", "\n", "squeeze", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "raise", "BaseException", "(", "\"no such corefprop:\"", ",", "cp_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.dygie3.create_coreflinker_prop": [[190, 226], ["BaseException", "BaseException", "models.coreflinker.coreflinker_prop.ModuleCorefLinkerPropE2E", "models.coreflinker.coreflinker_prop.ModuleLinkerCorefProp", "models.coreflinker.coreflinker_mtt_prop.ModuleCorefLinkerMTTPropE2E", "models.coreflinker.coreflinker_mtt_prop.ModuleCorefLinkerMTTPropE2E", "models.coreflinker.coreflinker_prop.ModuleCorefLinkerPropE2E", "models.coreflinker.coreflinker_prop.ModuleLinkerCorefProp"], "function", ["None"], ["", "", "def", "create_coreflinker_prop", "(", "model", ",", "config", ",", "dictionaries", ")", ":", "\n", "    ", "cp_type", "=", "config", "[", "'coreflinker'", "]", "[", "'coreflinker_prop'", "]", "[", "'type'", "]", "\n", "\n", "if", "cp_type", "==", "'none'", ":", "\n", "        ", "return", "None", "\n", "", "elif", "cp_type", "==", "'default'", ":", "\n", "        ", "coreflinker_type", "=", "config", "[", "'coreflinker'", "]", "[", "'type'", "]", "\n", "if", "model", ".", "end_to_end_mentions", ":", "\n", "            ", "if", "coreflinker_type", "==", "'coreflinker'", ":", "\n", "                ", "return", "ModuleCorefLinkerPropE2E", "(", "model", ".", "span_extractor", ".", "dim_output", ",", "\n", "model", ".", "span_pruner", ".", "scorer", ",", "\n", "model", ".", "span_pair_generator", ",", "config", "[", "'coreflinker'", "]", ",", "dictionaries", ")", "\n", "", "elif", "coreflinker_type", "==", "'coreflinker_mtt'", ":", "\n", "                ", "return", "ModuleCorefLinkerMTTPropE2E", "(", "model", ".", "span_extractor", ".", "dim_output", ",", "\n", "model", ".", "span_pruner", ".", "scorer", ",", "\n", "model", ".", "span_pair_generator", ",", "config", "[", "'coreflinker'", "]", ",", "dictionaries", ")", "\n", "", "elif", "coreflinker_type", "==", "'coreflinker_esm'", ":", "\n", "                ", "return", "ModuleCorefLinkerPropE2E", "(", "model", ".", "span_extractor", ".", "dim_output", ",", "\n", "model", ".", "span_pruner", ".", "scorer", ",", "\n", "model", ".", "span_pair_generator", ",", "config", "[", "'coreflinker'", "]", ",", "dictionaries", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "coreflinker_type", "==", "'coreflinker'", ":", "\n", "                ", "return", "ModuleLinkerCorefProp", "(", "model", ".", "span_extractor", ".", "dim_output", ",", "\n", "model", ".", "span_pruner", ".", "scorer", ",", "\n", "model", ".", "span_pair_generator", ",", "config", "[", "'coreflinker'", "]", ",", "dictionaries", ")", "\n", "", "elif", "coreflinker_type", "==", "'coreflinker_mtt'", ":", "\n", "                ", "return", "ModuleCorefLinkerMTTPropE2E", "(", "model", ".", "span_extractor", ".", "dim_output", ",", "\n", "model", ".", "span_pruner", ".", "scorer", ",", "\n", "model", ".", "span_pair_generator", ",", "config", "[", "'coreflinker'", "]", ",", "dictionaries", ")", "\n", "", "elif", "coreflinker_type", "==", "'coreflinker_esm'", ":", "\n", "                ", "return", "ModuleLinkerCorefProp", "(", "model", ".", "span_extractor", ".", "dim_output", ",", "\n", "model", ".", "span_pruner", ".", "scorer", ",", "\n", "model", ".", "span_pair_generator", ",", "config", "[", "'coreflinker'", "]", ",", "dictionaries", ")", "\n", "", "", "", "else", ":", "\n", "        ", "raise", "BaseException", "(", "\"no such linkercoref prop:\"", ",", "cp_type", ")", "\n", "", "raise", "BaseException", "(", "\"no such coreflinker found (in coreflinker_prop):\"", ",", "config", "[", "'coreflinker'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.dygie3.create_coreflinker_loss": [[228, 244], ["BaseException", "modules.tasks.coreflinker.CorefLinkerLoss", "modules.tasks.coreflinker.CorefLinkerLoss", "modules.tasks.coreflinker_mtt.LossCorefLinkerMTT", "modules.tasks.coreflinker_edmonds_softmax.LossCorefLinkerESM"], "function", ["None"], ["", "def", "create_coreflinker_loss", "(", "model", ",", "config", ")", ":", "\n", "    ", "coreflinker_type", "=", "config", "[", "'coreflinker'", "]", "[", "'type'", "]", "\n", "if", "model", ".", "coref_linker_scorer", ".", "enabled", ":", "\n", "        ", "if", "coreflinker_type", "==", "'coreflinker'", ":", "\n", "            ", "return", "CorefLinkerLoss", "(", "'links'", ",", "'coref'", ",", "model", ".", "coref_linker_scorer", ".", "entity_embedder", ".", "dictionary", ",", "\n", "config", "[", "'coreflinker'", "]", ",", "model", ".", "end_to_end_mentions", ")", "\n", "", "elif", "coreflinker_type", "==", "'coreflinker_mtt'", ":", "\n", "            ", "return", "LossCorefLinkerMTT", "(", "'links'", ",", "'coref'", ",", "model", ".", "coref_linker_scorer", ".", "entity_embedder", ".", "dictionary", ",", "\n", "config", "[", "'coreflinker'", "]", ",", "model", ".", "end_to_end_mentions", ")", "\n", "", "elif", "coreflinker_type", "==", "'coreflinker_esm'", ":", "\n", "            ", "return", "LossCorefLinkerESM", "(", "'links'", ",", "'coref'", ",", "model", ".", "coref_linker_scorer", ".", "entity_embedder", ".", "dictionary", ",", "\n", "config", "[", "'coreflinker'", "]", ",", "model", ".", "end_to_end_mentions", ")", "\n", "", "", "else", ":", "\n", "        ", "return", "CorefLinkerLoss", "(", "'links'", ",", "'coref'", ",", "None", ",", "config", "[", "'coreflinker'", "]", ",", "model", ".", "end_to_end_mentions", ")", "\n", "\n", "", "raise", "BaseException", "(", "\"no such coreflinker found (in create_coreflinker_loss):\"", ",", "config", "[", "'coreflinker'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.dygie3.create_relprop": [[246, 273], ["models.coreflinker.relbasic.ModuleRelBasic", "models.coreflinker.relprop.ModuleRelProp", "models.coreflinker.relprop.ModuleRelPropX", "models.coreflinker.relsimple.ModuleRelSimple", "models.coreflinker.relprop1.ModuleRelProp1", "models.coreflinker.relprop2.ModuleRelProp2", "models.coreflinker.attention.ModulePlainAttention", "BaseException", "len"], "function", ["None"], ["", "def", "create_relprop", "(", "model", ",", "config", ")", ":", "\n", "    ", "rp_type", "=", "config", "[", "'relprop'", "]", "[", "'type'", "]", "\n", "\n", "if", "rp_type", "==", "'none'", ":", "\n", "        ", "return", "None", "\n", "", "elif", "rp_type", "==", "'basic'", ":", "\n", "        ", "return", "ModuleRelBasic", "(", "model", ".", "span_extractor", ".", "dim_output", ",", "model", ".", "span_pair_generator", ",", "model", ".", "relation_labels", ",", "\n", "config", "[", "'relprop'", "]", ")", "\n", "", "elif", "rp_type", "==", "'default'", ":", "\n", "        ", "return", "ModuleRelProp", "(", "model", ".", "span_extractor", ".", "dim_output", ",", "model", ".", "span_pair_generator", ",", "model", ".", "relation_labels", ",", "\n", "config", "[", "'relprop'", "]", ")", "\n", "", "elif", "rp_type", "==", "'default-x'", ":", "\n", "        ", "return", "ModuleRelPropX", "(", "model", ".", "span_extractor", ".", "dim_output", ",", "model", ".", "span_pair_generator", ",", "model", ".", "relation_labels", ",", "\n", "config", "[", "'relprop'", "]", ")", "\n", "", "elif", "rp_type", "==", "'simple'", ":", "\n", "        ", "return", "ModuleRelSimple", "(", "model", ".", "span_extractor", ".", "dim_output", ",", "model", ".", "relation_labels", ",", "config", "[", "'relprop'", "]", ")", "\n", "", "elif", "rp_type", "==", "'relprop1'", ":", "\n", "        ", "return", "ModuleRelProp1", "(", "model", ".", "span_extractor", ".", "dim_output", ",", "model", ".", "span_pruner", ",", "model", ".", "span_pair_generator", ",", "\n", "model", ".", "relation_labels", ",", "config", "[", "'relprop'", "]", ")", "\n", "", "elif", "rp_type", "==", "'relprop2'", ":", "\n", "        ", "return", "ModuleRelProp2", "(", "model", ".", "span_extractor", ".", "dim_output", ",", "model", ".", "span_pair_generator", ",", "model", ".", "relation_labels", ",", "\n", "config", "[", "'relprop'", "]", ")", "\n", "", "elif", "rp_type", "==", "'attention'", ":", "\n", "        ", "return", "ModulePlainAttention", "(", "model", ".", "span_extractor", ".", "dim_output", ",", "len", "(", "model", ".", "relation_labels", ")", ",", "\n", "model", ".", "span_pair_generator", ",", "config", "[", "'relprop'", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "BaseException", "(", "\"no such relprop:\"", ",", "rp_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.corefprop_hoi.ModuleCorefPropHoi.__init__": [[11, 32], ["torch.Module.__init__", "print", "modules.utils.misc.MyGate", "models.coreflinker.scorers.OptFFpairs", "models.coreflinker.scorers.OptFFpairsHoi", "RuntimeError", "str"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["    ", "def", "__init__", "(", "self", ",", "dim_span", ",", "coref_pruner", ",", "config", ",", "span_pair_generator", ")", ":", "\n", "        ", "super", "(", "ModuleCorefPropHoi", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "enabled", "=", "config", "[", "'coref'", "]", "[", "'enabled'", "]", "\n", "if", "self", ".", "enabled", ":", "\n", "            ", "self", ".", "coref_prop", "=", "config", "[", "'coref'", "]", "[", "'corefprop'", "]", "[", "'coref_prop'", "]", "\n", "print", "(", "\"ModuleCorefPropHoi(cp={})\"", ".", "format", "(", "self", ".", "coref_prop", ")", ")", "\n", "self", ".", "update_coref_scores", "=", "config", "[", "'coref'", "]", "[", "'corefprop'", "]", "[", "'update_coref_scores'", "]", "\n", "self", ".", "init_weights_std", "=", "config", "[", "'coref'", "]", "[", "'corefprop'", "]", "[", "'init_weights_std'", "]", "\n", "self", ".", "coref_pruner", "=", "coref_pruner", "\n", "self", ".", "corefprop_type", "=", "config", "[", "'coref'", "]", "[", "'corefprop'", "]", "[", "'type'", "]", "\n", "if", "self", ".", "corefprop_type", "==", "'ff_pairs'", ":", "\n", "                ", "self", ".", "span_pair_generator", "=", "span_pair_generator", "\n", "self", ".", "coref", "=", "OptFFpairs", "(", "dim_span", ",", "1", ",", "config", "[", "'coref'", "]", "[", "'corefprop'", "]", ",", "self", ".", "span_pair_generator", ")", "\n", "", "elif", "self", ".", "corefprop_type", "==", "'ff_pairs_hoi'", ":", "\n", "                ", "span_embed", "=", "config", "[", "'span-extractor'", "]", "[", "'span_embed'", "]", "\n", "self", ".", "coref", "=", "OptFFpairsHoi", "(", "dim_span", ",", "1", ",", "config", "[", "'coref'", "]", "[", "'corefprop'", "]", ",", "span_embed", ")", "\n", "", "else", ":", "\n", "                ", "raise", "RuntimeError", "(", "'not known corefprop.type from ModuleCorefPropHoi: '", "+", "\n", "str", "(", "config", "[", "'coref'", "]", "[", "'corefprop'", "]", "[", "'type'", "]", ")", ")", "\n", "\n", "", "self", ".", "gate", "=", "MyGate", "(", "dim_span", ",", "init_weights_std", "=", "self", ".", "init_weights_std", ")", "\n", "# self.end_to_end = config['end_to_end']", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.corefprop_hoi.ModuleCorefPropHoi.forward": [[34, 104], ["all_spans.copy", "filtered_spans_rest.copy", "corefprop_hoi.ModuleCorefPropHoi.coref().squeeze", "modules.utils.misc.coref_add_scores", "range", "modules.utils.misc.overwrite_spans_hoi", "corefprop_hoi.ModuleCorefPropHoi.coref().squeeze", "RuntimeError", "torch.softmax", "torch.softmax", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "corefprop_hoi.ModuleCorefPropHoi.gate", "corefprop_hoi.ModuleCorefPropHoi.coref", "corefprop_hoi.ModuleCorefPropHoi.coref().squeeze", "corefprop_hoi.ModuleCorefPropHoi.coref", "modules.utils.misc.coref_add_scores", "corefprop_hoi.ModuleCorefPropHoi.coref", "corefprop_hoi.ModuleCorefPropHoi.coref_pruner"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.coref_add_scores", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.misc.overwrite_spans_hoi", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.coref_add_scores"], ["", "", "def", "forward", "(", "self", ",", "all_spans", ",", "filtered_spans", ",", "gold_spans", ",", "max_span_length", "=", "0", ",", "gold_spans_lengths", "=", "0", ")", ":", "\n", "# filtered_spans_rest = None", "\n", "\n", "# if self.end_to_end:", "\n", "        ", "update", "=", "filtered_spans", "[", "'span_vecs'", "]", "\n", "# update.shape --> [1, 21, 2324]", "\n", "\n", "if", "update", "is", "None", "or", "not", "self", ".", "enabled", ":", "\n", "            ", "return", "all_spans", ",", "filtered_spans", ",", "None", "\n", "\n", "", "filtered_span_begin", "=", "filtered_spans", "[", "'span_begin'", "]", "\n", "# filtered_span_begin.shape --> [1, 21]", "\n", "filtered_span_end", "=", "filtered_spans", "[", "'span_end'", "]", "\n", "# filtered_span_end.shape --> [1, 21]", "\n", "triangular_mask", "=", "filtered_spans", "[", "'triangular_mask'", "]", "\n", "# triangular_mask.shape --> [1, 21, 21]", "\n", "filtered_spans_rest", "=", "filtered_spans", "\n", "\n", "# filtered_spans_rest.keys() --> dict_keys(['prune_indices_hoi', 'span_vecs', 'span_scores', 'span_begin',", "\n", "# 'span_end', 'span_lengths', 'square_mask', 'triangular_mask', 'pruned_spans', 'gold_spans', 'enabled_spans'])", "\n", "#", "\n", "\n", "if", "self", ".", "corefprop_type", "==", "'ff_pairs'", ":", "\n", "            ", "coref_scores", "=", "self", ".", "coref", "(", "update", ",", "filtered_span_begin", ",", "filtered_span_end", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "coref_scores", "=", "coref_add_scores", "(", "coref_scores", ",", "filtered_spans", "[", "'span_scores'", "]", ")", "\n", "", "elif", "self", ".", "corefprop_type", "==", "'ff_pairs_hoi'", ":", "\n", "# TODO (09/04/2021) - this is wip!! DO NOT RUN IN PROD!", "\n", "            ", "coref_scores", "=", "self", ".", "coref", "(", "update", ",", "filtered_span_begin", ",", "filtered_span_end", ",", "triangular_mask", ",", "\n", "filtered_spans", "[", "'span_scores'", "]", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "'corefprop_type not recognized inside corefprop_hoi.py: '", ",", "self", ".", "corefprop_type", ")", "\n", "\n", "", "update_all", "=", "all_spans", ".", "copy", "(", ")", "\n", "update_filtered", "=", "filtered_spans_rest", ".", "copy", "(", ")", "\n", "\n", "if", "self", ".", "coref_prop", ">", "0", ":", "\n", "            ", "for", "_", "in", "range", "(", "self", ".", "coref_prop", ")", ":", "\n", "                ", "probs", "=", "F", ".", "softmax", "(", "coref_scores", "-", "(", "1.0", "-", "triangular_mask", ")", "*", "1e23", ",", "dim", "=", "-", "1", ")", "\n", "# coref_scores.shape --> [1, 21, 21]; triangular_mask.shape --> [1, 21, 21];", "\n", "# triangular_mask.sum() --> 231.0 (float)", "\n", "ctxt", "=", "torch", ".", "matmul", "(", "probs", ",", "update", ")", "\n", "# ctxt.shape --> [1, 21, 2324]", "\n", "# update.shape --> [1, 21, 2324]", "\n", "update", "=", "self", ".", "gate", "(", "update", ",", "ctxt", ")", "\n", "# update.shape --> [1, 21, 2324]", "\n", "if", "self", ".", "update_coref_scores", ":", "\n", "                    ", "coref_scores", "=", "self", ".", "coref", "(", "update", ",", "filtered_span_begin", ",", "filtered_span_end", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "# update.shape --> [1, 21, 2324]", "\n", "# filtered_span_begin.shape --> [1, 21]", "\n", "# filtered_spans_end.shape --> tensor([[ 3,  3,  5,  7,  9, 13, 23, 23, 24, 25, 27, 33, 42, 42, 48,", "\n", "# 52, 52, 59, 78, 92, 93]])", "\n", "if", "self", ".", "coref_pruner", "is", "not", "None", ":", "# can be None if end_to_end is in false in model", "\n", "                        ", "coref_scores", "=", "coref_add_scores", "(", "coref_scores", ",", "self", ".", "coref_pruner", "(", "update", ")", ")", "\n", "# coref_scores.shape --> [1, 21, 21]", "\n", "# update.shape --> [1, 21, 2324]", "\n", "# TODO - adapt here!", "\n", "", "", "", "update_filtered", "[", "'span_vecs'", "]", "=", "update", "\n", "# update.shape --> [1, 21, 2324]", "\n", "\n", "update_all", "[", "'cand_span_vecs'", "]", "=", "overwrite_spans_hoi", "(", "update_all", "[", "'cand_span_vecs'", "]", ",", "\n", "filtered_spans_rest", "[", "'prune_indices_hoi'", "]", ",", "\n", "filtered_spans_rest", "[", "'span_lengths'", "]", ",", "update", ")", "\n", "# update_all['span_vecs'] --> key error, relplaced by cand_span_vecs", "\n", "#   update_all['cand_span_vecs'].shape --> [1, 315, 2324]", "\n", "# filtered_spans_rest['prune_indices'] --> key error, replaced by prune_indices_hoi", "\n", "#   filtered_spans_rest['prune_indices_hoi'].shape --> [1, 21]", "\n", "# filtered_spans_rest['span_lengths'] --> tensor([21])", "\n", "# update.shape --> torch.Size([1, 21, 2324])", "\n", "\n", "", "return", "update_all", ",", "update_filtered", ",", "coref_scores", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.attention.ModulePlainAttention.__init__": [[10, 19], ["torch.Module.__init__", "print", "models.coreflinker.scorers.create_pair_scorer", "models.coreflinker.scorers.create_pair_scorer"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.create_pair_scorer", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.create_pair_scorer"], ["    ", "def", "__init__", "(", "self", ",", "dim_span", ",", "dim_output", ",", "span_pair_generator", ",", "config", ",", "squeeze", "=", "False", ")", ":", "\n", "        ", "super", "(", "ModulePlainAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hidden_dim", "=", "config", "[", "'hidden_dim'", "]", "# 150", "\n", "self", ".", "hidden_dp", "=", "config", "[", "'hidden_dropout'", "]", "# 0.4", "\n", "self", ".", "squeeze", "=", "squeeze", "\n", "\n", "print", "(", "\"ModulePlainAttention\"", ")", "\n", "self", ".", "attention", "=", "create_pair_scorer", "(", "dim_span", ",", "1", ",", "config", ",", "span_pair_generator", ")", "\n", "self", ".", "scorer", "=", "create_pair_scorer", "(", "dim_span", "*", "2", ",", "dim_output", ",", "config", ",", "span_pair_generator", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.attention.ModulePlainAttention.forward": [[20, 36], ["attention.ModulePlainAttention.attention().squeeze", "torch.softmax", "torch.softmax", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "attention.ModulePlainAttention.scorer", "attention.ModulePlainAttention.squeeze", "attention.ModulePlainAttention.attention"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "all_spans", ",", "filtered_spans", ",", "sequence_lengths", ")", ":", "\n", "        ", "update", "=", "filtered_spans", "[", "'span_vecs'", "]", "\n", "filtered_span_begin", "=", "filtered_spans", "[", "'span_begin'", "]", "\n", "filtered_span_end", "=", "filtered_spans", "[", "'span_end'", "]", "\n", "square_mask", "=", "filtered_spans", "[", "'square_mask'", "]", "\n", "\n", "att", "=", "self", ".", "attention", "(", "update", ",", "filtered_span_begin", ",", "filtered_span_end", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "probs", "=", "F", ".", "softmax", "(", "att", "-", "(", "1.0", "-", "square_mask", ")", "*", "1e23", ",", "dim", "=", "-", "1", ")", "\n", "ctxt", "=", "torch", ".", "matmul", "(", "probs", ",", "update", ")", "\n", "\n", "update", "=", "torch", ".", "cat", "(", "(", "update", ",", "ctxt", ")", ",", "-", "1", ")", "\n", "\n", "scores", "=", "self", ".", "scorer", "(", "update", ",", "filtered_span_begin", ",", "filtered_span_end", ")", "\n", "scores", "=", "scores", ".", "squeeze", "(", "-", "1", ")", "if", "self", ".", "squeeze", "else", "scores", "\n", "\n", "return", "all_spans", ",", "filtered_spans", ",", "scores", "", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert.CoreflinkerSpanBert.__init__": [[295, 370], ["torch.Module.__init__", "modules.spirit.TextEmbedder", "modules.ner.spanner.create_span_extractor", "modules.utils.misc.SpanPairs", "coreflinker_spanbert.create_spanprop", "coreflinker_spanbert.create_corefprop", "dictionaries[].tolist", "coreflinker_spanbert.create_relprop", "coreflinker_spanbert.create_coreflinker_prop", "coreflinker_spanbert.create_coreflinker_loss", "modules.ner.spanner.TaskSpan1x", "modules.tasks.relations.create_task_relations", "torch.Dropout", "torch.Dropout", "models.coreflinker.pruner.MentionPrunerSpanBert", "NotImplementedError", "modules.tasks.coref.LossCoref", "modules.tasks.coref.LossBidirectionalCoref", "modules.tasks.linker.LinkerNone", "BaseException", "modules.tasks.linker.LossLinkerE2E", "modules.tasks.linker.LossLinker"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.ner.spanner.create_span_extractor", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert.create_spanprop", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.create_corefprop", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.create_relprop", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.create_coreflinker_prop", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.create_coreflinker_loss", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.relations.create_task_relations"], ["    ", "def", "__init__", "(", "self", ",", "dictionaries", ",", "config", ")", ":", "\n", "        ", "super", "(", "CoreflinkerSpanBert", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "random_embed_dim", "=", "config", "[", "'random_embed_dim'", "]", "\n", "self", ".", "max_span_length", "=", "config", "[", "'max_span_length'", "]", "\n", "self", ".", "hidden_dim", "=", "config", "[", "'hidden_dim'", "]", "# 150", "\n", "self", ".", "hidden_dp", "=", "config", "[", "'hidden_dropout'", "]", "# 0.4", "\n", "self", ".", "rel_after_coref", "=", "config", "[", "'rel_after_coref'", "]", "\n", "self", ".", "spans_single_sentence", "=", "config", "[", "'spans_single_sentence'", "]", "\n", "# self.spanbert_input = config['spanbert_input']", "\n", "\n", "# self.load_doc_level_candidates = \\", "\n", "#     (config['coreflinker']['enabled'] and config['coreflinker']['doc_level_candidates']) or \\", "\n", "#     (config['linker']['enabled'] and config['linker']['doc_level_candidates'])", "\n", "\n", "self", ".", "debug_memory", "=", "False", "\n", "self", ".", "debug_tensors", "=", "False", "\n", "\n", "# whether take gold mentions or use the pruner", "\n", "self", ".", "end_to_end_mentions", "=", "config", "[", "'end_to_end_mentions'", "]", "\n", "self", ".", "embedder", "=", "TextEmbedder", "(", "dictionaries", ",", "config", "[", "'text_embedder'", "]", ")", "\n", "\n", "self", ".", "entity_dictionary", "=", "None", "\n", "if", "'entities'", "in", "dictionaries", ":", "\n", "            ", "self", ".", "entity_dictionary", "=", "dictionaries", "[", "'entities'", "]", "\n", "\n", "", "if", "'lexical_dropout'", "in", "config", ":", "\n", "            ", "self", ".", "emb_dropout", "=", "nn", ".", "Dropout", "(", "config", "[", "'lexical_dropout'", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "emb_dropout", "=", "None", "\n", "# self.seq2seq = Seq2Seq(self.embedder.dim_output + self.random_embed_dim, config['seq2seq'])", "\n", "\n", "# self.span_extractor = create_span_extractor(self.seq2seq.dim_output, self.max_span_length,", "\n", "#                                             config['span-extractor'])", "\n", "", "self", ".", "span_extractor", "=", "create_span_extractor", "(", "self", ".", "embedder", ".", "dim_output", ",", "\n", "self", ".", "max_span_length", ",", "\n", "config", "[", "'span-extractor'", "]", ")", "\n", "\n", "if", "self", ".", "end_to_end_mentions", ":", "\n", "            ", "self", ".", "span_pruner", "=", "MentionPrunerSpanBert", "(", "self", ".", "span_extractor", ".", "dim_output", ",", "config", "[", "'pruner'", "]", ")", "\n", "", "else", ":", "\n", "# self.span_pruner = MentionPrunerGold(self.max_span_length, config['pruner'])", "\n", "            ", "raise", "NotImplementedError", "(", "'not implemented for not end-to-end setting'", ")", "\n", "\n", "", "self", ".", "span_pair_generator", "=", "SpanPairs", "(", "self", ".", "span_extractor", ".", "dim_output", ",", "config", "[", "'span-pairs'", "]", ")", "\n", "\n", "self", ".", "span_prop", "=", "create_spanprop", "(", "self", ",", "config", ")", "\n", "\n", "self", ".", "coref_scorer", "=", "create_corefprop", "(", "self", ",", "config", "[", "'coref'", "]", ")", "\n", "\n", "self", ".", "relation_labels", "=", "dictionaries", "[", "'relations'", "]", ".", "tolist", "(", ")", "\n", "self", ".", "rel_scorer", "=", "create_relprop", "(", "self", ",", "config", ")", "\n", "\n", "if", "not", "config", "[", "'coref'", "]", "[", "'bidirectional'", "]", ":", "\n", "            ", "self", ".", "coref_task", "=", "LossCoref", "(", "'coref'", ",", "config", "[", "'coref'", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "coref_task", "=", "LossBidirectionalCoref", "(", "'coref'", ",", "config", "[", "'coref'", "]", ")", "\n", "\n", "# kzaporoj - here add linkercoref joint", "\n", "", "self", ".", "coref_linker_scorer", "=", "create_coreflinker_prop", "(", "self", ",", "config", ",", "dictionaries", ")", "\n", "self", ".", "coref_linker_task", "=", "create_coreflinker_loss", "(", "self", ",", "config", ")", "\n", "\n", "self", ".", "ner_task", "=", "TaskSpan1x", "(", "'tags'", ",", "self", ".", "span_extractor", ".", "dim_output", ",", "dictionaries", "[", "'tags'", "]", ",", "config", "[", "'ner'", "]", ")", "\n", "self", ".", "relation_task", "=", "create_task_relations", "(", "'rels'", ",", "config", "[", "'relations'", "]", ",", "self", ".", "relation_labels", ")", "\n", "\n", "if", "'linker'", "in", "config", "and", "config", "[", "'linker'", "]", "[", "'enabled'", "]", ":", "\n", "            ", "if", "self", ".", "end_to_end_mentions", ":", "\n", "                ", "self", ".", "linker_task", "=", "LossLinkerE2E", "(", "'links'", ",", "self", ".", "span_extractor", ".", "dim_output", ",", "dictionaries", ",", "\n", "config", "[", "'linker'", "]", ",", "self", ".", "max_span_length", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "linker_task", "=", "LossLinker", "(", "'links'", ",", "self", ".", "span_extractor", ".", "dim_output", ",", "dictionaries", ",", "config", "[", "'linker'", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "linker_task", "=", "LinkerNone", "(", ")", "\n", "\n", "", "if", "not", "self", ".", "span_pruner", ".", "sort_after_pruning", "and", "self", ".", "pairs", ".", "requires_sorted_spans", ":", "\n", "            ", "raise", "BaseException", "(", "\"ERROR: spans MUST be sorted\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert.CoreflinkerSpanBert.collate_func": [[371, 373], ["coreflinker_spanbert.collate_dygie_spanbert"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.collate_dygie_spanbert"], ["", "", "def", "collate_func", "(", "self", ",", "datasets", ",", "device", ")", ":", "\n", "        ", "return", "lambda", "x", ":", "collate_dygie_spanbert", "(", "self", ",", "x", ",", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert.CoreflinkerSpanBert.end_epoch": [[374, 376], ["coreflinker_spanbert.CoreflinkerSpanBert.span_pruner.end_epoch"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert.CoreflinkerSpanBert.end_epoch"], ["", "def", "end_epoch", "(", "self", ",", "dataset_name", ")", ":", "\n", "        ", "self", ".", "span_pruner", ".", "end_epoch", "(", "dataset_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert.CoreflinkerSpanBert.get_params": [[377, 389], ["coreflinker_spanbert.CoreflinkerSpanBert.named_parameters", "name.startswith", "bert_based_param.append", "task_param.append"], "methods", ["None"], ["", "def", "get_params", "(", "self", ",", "named", "=", "False", ")", ":", "\n", "        ", "bert_based_param", ",", "task_param", "=", "[", "]", ",", "[", "]", "\n", "for", "name", ",", "param", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "# if name.startswith('bert'):", "\n", "            ", "if", "name", ".", "startswith", "(", "'embedder.spanbert_embedder.spanbert_model'", ")", ":", "\n", "                ", "to_add", "=", "(", "name", ",", "param", ")", "if", "named", "else", "param", "\n", "bert_based_param", ".", "append", "(", "to_add", ")", "\n", "", "else", ":", "\n", "# print('name of param: ', name)", "\n", "                ", "to_add", "=", "(", "name", ",", "param", ")", "if", "named", "else", "param", "\n", "task_param", ".", "append", "(", "to_add", ")", "\n", "", "", "return", "bert_based_param", ",", "task_param", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert.CoreflinkerSpanBert.forward": [[390, 678], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "coreflinker_spanbert.CoreflinkerSpanBert.embedder", "modules.ner.spanner.create_all_spans", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "modules.utils.misc.spans_to_indices().long", "range", "coreflinker_spanbert.CoreflinkerSpanBert.span_extractor", "coreflinker_spanbert.CoreflinkerSpanBert.span_pruner", "metadata.get", "coreflinker_spanbert.CoreflinkerSpanBert.ner_task", "coreflinker_spanbert.CoreflinkerSpanBert.coref_task", "coreflinker_spanbert.CoreflinkerSpanBert.coref_linker_task", "coreflinker_spanbert.CoreflinkerSpanBert.relation_task", "print", "print", "coreflinker_spanbert.CoreflinkerSpanBert.emb_dropout", "torch.FloatTensor().to().normal_", "torch.FloatTensor().to().normal_", "torch.FloatTensor().to().normal_", "torch.FloatTensor().to().normal_", "modules.misc.misc.batched_index_select", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "modules.utils.misc.inspect", "modules.utils.misc.inspect", "hidden.size", "hidden.size", "span_begin.size", "torch.zeros.sum().int().item", "torch.zeros.sum().int().item", "metadata.get", "metadata.get", "metadata.get", "print", "coreflinker_spanbert.CoreflinkerSpanBert.span_prop", "coreflinker_spanbert.CoreflinkerSpanBert.coref_scorer", "coreflinker_spanbert.CoreflinkerSpanBert.coref_linker_scorer", "print", "coreflinker_spanbert.CoreflinkerSpanBert.rel_scorer", "print", "metadata.get", "list", "coreflinker_spanbert.CoreflinkerSpanBert.linker_task", "coreflinker_spanbert.CoreflinkerSpanBert.linker_task", "print", "span_begin.cuda", "span_end.cuda", "span_begin.cpu", "span_end.cpu", "span_begin.size", "span_begin.size", "modules.utils.misc.spans_to_indices", "span_mask[].view", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "coreflinker_spanbert.CoreflinkerSpanBert.entity_dictionary.lookup", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros.unsqueeze", "torch.zeros.unsqueeze", "torch.zeros.unsqueeze", "torch.zeros.unsqueeze", "torch.zeros.unsqueeze", "torch.zeros.unsqueeze", "metadata.get", "metadata.get", "metadata.get", "metadata.get", "set", "metadata.get", "metadata.get", "metadata.get", "m.update2", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "sequence_lengths[].item", "torch.zeros.sum().int", "torch.zeros.sum().int", "metadata.get", "metadata.get", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.zeros.sum", "torch.zeros.sum", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.create_all_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.batched_index_select", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.ncr3.CheckGradient.inspect", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.ncr3.CheckGradient.inspect", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.spans_to_indices", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.update2", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "relations", ",", "metadata", ",", "metrics", "=", "[", "]", ")", ":", "\n", "        ", "output", "=", "{", "}", "\n", "# TODO (08/04/2021 - here on-off on whether to use only the passed spans or all possible combinations of subtokens!)", "\n", "all_spans_tensor", "=", "torch", ".", "tensor", "(", "metadata", "[", "'linker'", "]", "[", "'all_spans'", "]", ",", "dtype", "=", "torch", ".", "int", ",", "device", "=", "settings", ".", "device", ")", "\n", "\n", "# candidate_starts = all_spans_tensor[:,0]", "\n", "# candidate_ends = all_spans_tensor[:,1]", "\n", "sequence_lengths", "=", "inputs", "[", "'sequence_lengths'", "]", "\n", "token_lengths", "=", "inputs", "[", "'token_lengths'", "]", "\n", "\n", "if", "self", ".", "debug_memory", "or", "self", ".", "debug_tensors", ":", "\n", "# print(\"START\", metadata['identifiers'][0], sequence_lengths)", "\n", "            ", "print", "(", "\"START\"", ",", "metadata", "[", "'identifiers'", "]", "[", "0", "]", ")", "\n", "print", "(", "\"(none)  \"", ",", "torch", ".", "cuda", ".", "memory_allocated", "(", "0", ")", "/", "1024", "/", "1024", ")", "\n", "\n", "# MODEL MODULES", "\n", "", "embeddings", "=", "self", ".", "embedder", "(", "inputs", ")", "\n", "\n", "if", "self", ".", "emb_dropout", "is", "not", "None", ":", "\n", "            ", "embeddings", "=", "self", ".", "emb_dropout", "(", "embeddings", ")", "\n", "\n", "", "if", "self", ".", "random_embed_dim", ">", "0", ":", "\n", "            ", "rand_embedding", "=", "torch", ".", "FloatTensor", "(", "embeddings", ".", "size", "(", "0", ")", ",", "embeddings", ".", "size", "(", "1", ")", ",", "self", ".", "random_embed_dim", ")", ".", "to", "(", "\n", "embeddings", ".", "device", ")", ".", "normal_", "(", "std", "=", "4.0", ")", "\n", "rand_embedding", "=", "batched_index_select", "(", "rand_embedding", ",", "inputs", "[", "'token_indices'", "]", ")", "\n", "embeddings", "=", "torch", ".", "cat", "(", "(", "embeddings", ",", "rand_embedding", ")", ",", "-", "1", ")", "\n", "\n", "", "if", "self", ".", "debug_tensors", ":", "\n", "            ", "inspect", "(", "'embeddings'", ",", "embeddings", "[", "0", ",", ":", ",", ":", "]", ")", "\n", "\n", "# hidden = self.seq2seq(embeddings, sequence_lengths, inputs['token_indices']).contiguous()", "\n", "\n", "# no seq2seq is needed for SpanBert", "\n", "", "hidden", "=", "embeddings", "\n", "\n", "if", "self", ".", "debug_tensors", ":", "\n", "            ", "inspect", "(", "'hidden'", ",", "hidden", "[", "0", ",", ":", ",", ":", "]", ")", "\n", "\n", "# in spanbert version the spans already come as input", "\n", "# TODO", "\n", "\n", "# create span", "\n", "\n", "# here, it is rather tricky, since we get already all possible spans but in BERT subtokens.", "\n", "# So here create all possible spans (where max span length is the maximum span width from the passed spans),", "\n", "# and for the mask only assign the corresponding indices of all the spans passed as parameter.", "\n", "\n", "# max_span_length = torch.max(all_spans_tensor[:, :, 1] - all_spans_tensor[:, :, 0], dim=1).values + 1", "\n", "# max_span_length = max_span_length.item()", "\n", "# span_begin, span_end = create_all_spans(hidden.size(0), hidden.size(1), max_span_length)", "\n", "\n", "", "span_begin", ",", "span_end", "=", "create_all_spans", "(", "hidden", ".", "size", "(", "0", ")", ",", "hidden", ".", "size", "(", "1", ")", ",", "self", ".", "max_span_length", ")", "\n", "\n", "# kzaporoj", "\n", "if", "settings", ".", "device", "==", "'cuda'", ":", "\n", "            ", "span_begin", ",", "span_end", "=", "span_begin", ".", "cuda", "(", ")", ",", "span_end", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "span_begin", ",", "span_end", "=", "span_begin", ".", "cpu", "(", ")", ",", "span_end", ".", "cpu", "(", ")", "\n", "\n", "", "if", "self", ".", "spans_single_sentence", ":", "\n", "# TODO --> see here the code of hoi: (candidate_start_sent_idx == candidate_end_sent_idx)", "\n", "            ", "pass", "\n", "\n", "", "span_mask", "=", "torch", ".", "zeros", "(", "(", "span_begin", ".", "size", "(", "0", ")", ",", "span_begin", ".", "size", "(", "1", ")", ",", "self", ".", "max_span_length", ")", ",", "device", "=", "settings", ".", "device", ")", "\n", "# span_mask = torch.zeros((span_begin.size(0), span_begin.size(1), self.max_span_length),", "\n", "#                         device=settings.device, dtype=torch.bool)", "\n", "\n", "indices_mask", "=", "spans_to_indices", "(", "all_spans_tensor", ",", "self", ".", "max_span_length", ")", ".", "long", "(", ")", "\n", "for", "curr_batch", "in", "range", "(", "span_begin", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "span_mask", "[", "curr_batch", ",", ":", ",", ":", "]", ".", "view", "(", "-", "1", ")", "[", "indices_mask", "[", "curr_batch", "]", "]", "=", "1.0", "\n", "# span_mask[curr_batch, :, :].view(-1)[indices_mask[curr_batch]] = True", "\n", "\n", "# todo: move this code to collate, find a better alternative for this if: basically now is executed", "\n", "#  only when a single coreference is enabled without any linking component (ergo no entity_dictionary)", "\n", "if", "self", ".", "entity_dictionary", "is", "not", "None", ":", "\n", "                ", "tot_candidates", "=", "self", ".", "max_span_length", "*", "sequence_lengths", "[", "curr_batch", "]", ".", "item", "(", ")", "\n", "expanded_candidates", "=", "torch", ".", "zeros", "(", "tot_candidates", ",", "metadata", "[", "'linker'", "]", "[", "'candidates'", "]", ".", "shape", "[", "-", "1", "]", ",", "\n", "dtype", "=", "torch", ".", "long", ",", "device", "=", "settings", ".", "device", ")", "\n", "expanded_candidates", "[", ":", ",", ":", "]", "=", "self", ".", "entity_dictionary", ".", "lookup", "(", "\"###UNKNOWN###\"", ")", "\n", "\n", "expanded_candidates", "[", "indices_mask", "[", "curr_batch", "]", ",", ":", "]", "=", "metadata", "[", "'linker'", "]", "[", "'candidates'", "]", "[", "curr_batch", "]", "\n", "\n", "expanded_cand_lengths", "=", "torch", ".", "zeros", "(", "tot_candidates", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "settings", ".", "device", ")", "\n", "expanded_cand_lengths", "[", "indices_mask", "[", "curr_batch", "]", "]", "=", "metadata", "[", "'linker'", "]", "[", "'candidate_lengths'", "]", "[", "curr_batch", "]", "\n", "\n", "expanded_cand_targets", "=", "torch", ".", "zeros", "(", "tot_candidates", ",", "metadata", "[", "'linker'", "]", "[", "'targets'", "]", ".", "shape", "[", "-", "1", "]", ",", "\n", "dtype", "=", "torch", ".", "float", ",", "device", "=", "settings", ".", "device", ")", "\n", "expanded_cand_targets", "[", "indices_mask", "[", "curr_batch", "]", ",", ":", "]", "=", "metadata", "[", "'linker'", "]", "[", "'targets'", "]", "[", "curr_batch", "]", "\n", "# todo: linker targets, linker scores", "\n", "\n", "# TODO: THIS WILL ONLY WORK FOR BATCH SIZE 1!!", "\n", "metadata", "[", "'linker'", "]", "[", "'candidates'", "]", "=", "expanded_candidates", ".", "unsqueeze", "(", "0", ")", "\n", "metadata", "[", "'linker'", "]", "[", "'candidate_lengths'", "]", "=", "expanded_cand_lengths", ".", "unsqueeze", "(", "0", ")", "\n", "metadata", "[", "'linker'", "]", "[", "'targets'", "]", "=", "expanded_cand_targets", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "# END TODO: move this code to collate!!", "\n", "\n", "# TODO CRITICAL!!!: also adapts the end-to-end linker candidate list, since the width of some of the passed", "\n", "#  spans can be > than self.max_span_length, there should be also a mapping between this candidate list", "\n", "#  and the absolute position given the self.max_span>length", "\n", "\n", "# TODO: update metadata['linker']['all_spans']", "\n", "\n", "", "", "assert", "span_mask", ".", "sum", "(", "dim", "=", "(", "-", "1", ",", "-", "2", ")", ")", ".", "int", "(", ")", ".", "item", "(", ")", "==", "all_spans_tensor", ".", "shape", "[", "1", "]", "\n", "\n", "# for loop for assertion purposes only, slow this is why it is commented", "\n", "# for curr_span_idx in all_spans_tensor[0]:", "\n", "#     span_width = (curr_span_idx[1] - curr_span_idx[0]).item()", "\n", "#     assert span_mask[0, curr_span_idx[0], span_width] == 1.0", "\n", "\n", "# extract span embeddings", "\n", "# only with batch size 1 for now", "\n", "# assert span_begin.shape[0] == 1", "\n", "# span_begin = span_begin[span_mask]", "\n", "# span_end = span_end[span_mask]", "\n", "#", "\n", "span_vecs", "=", "self", ".", "span_extractor", "(", "hidden", ",", "span_begin", ",", "span_end", ",", "self", ".", "max_span_length", ",", "span_mask", ")", "\n", "# span_vecs = self.span_extractor(hidden, span_begin, span_end, max_span_length)", "\n", "# span_vecs.shape --> ??", "\n", "\n", "all_spans", "=", "{", "\n", "'span_vecs'", ":", "span_vecs", ",", "\n", "'span_begin'", ":", "span_begin", ",", "\n", "'span_end'", ":", "span_end", ",", "\n", "'span_mask'", ":", "span_mask", "\n", "# 'cand_span_vecs': span_vecs,", "\n", "# 'cand_span_begin': span_begin,", "\n", "# 'cand_span_end': span_end,", "\n", "# 'cand_span_mask': span_mask", "\n", "}", "\n", "\n", "obj_pruner", ",", "all_spans", ",", "filtered_spans", "=", "self", ".", "span_pruner", "(", "all_spans", ",", "metadata", ".", "get", "(", "'gold_spans'", ")", ",", "\n", "token_lengths", ",", "\n", "metadata", ".", "get", "(", "'gold_spans_lengths'", ")", ",", "\n", "metadata", ".", "get", "(", "'gold_spans_tensors'", ")", ",", "\n", "doc_id", "=", "metadata", ".", "get", "(", "'identifiers'", ")", ",", "\n", "api_call", "=", "metadata", ".", "get", "(", "'api_call'", ")", ",", "\n", "max_span_length", "=", "self", ".", "max_span_length", ")", "\n", "\n", "pred_spans", "=", "filtered_spans", "[", "'spans'", "]", "\n", "# len(pred_spans[0]) --> 21", "\n", "# pred_spans --> <class 'list'>: [[(4, 8), (6, 6), (19, 23), (23, 27), (25, 30), (28, 28), (38, 38), ....]]", "\n", "gold_spans", "=", "metadata", ".", "get", "(", "'gold_spans'", ")", "\n", "#", "\n", "#", "\n", "\n", "if", "self", ".", "debug_memory", ":", "\n", "            ", "print", "(", "\"(pruner)\"", ",", "torch", ".", "cuda", ".", "memory_allocated", "(", "0", ")", "/", "1024", "/", "1024", ")", "\n", "\n", "## spanprop (no extra labels)", "\n", "", "if", "self", ".", "span_prop", "is", "not", "None", ":", "\n", "            ", "all_spans", ",", "filtered_spans", "=", "self", ".", "span_prop", "(", "\n", "all_spans", ",", "\n", "filtered_spans", ",", "\n", "sequence_lengths", "\n", ")", "\n", "\n", "## coref", "\n", "", "if", "self", ".", "coref_task", ".", "enabled", ":", "\n", "            ", "coref_all", ",", "coref_filtered", ",", "coref_scores", "=", "self", ".", "coref_scorer", "(", "\n", "all_spans", ",", "\n", "filtered_spans", ",", "\n", "# sequence_lengths,", "\n", "metadata", ".", "get", "(", "'gold_spans_tensors'", ")", ",", "\n", "max_span_length", "=", "self", ".", "max_span_length", ",", "\n", "gold_spans_lengths", "=", "metadata", ".", "get", "(", "'gold_spans_lengths'", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "coref_scores", "=", "None", "\n", "\n", "", "if", "self", ".", "coref_linker_task", ".", "enabled", ":", "\n", "# kzaporoj - for now just like this, then can add different graph propagation for coref+linker configuration", "\n", "            ", "coref_all", ",", "coref_filtered", ",", "linker_coref_scores", "=", "self", ".", "coref_linker_scorer", "(", "\n", "all_spans", ",", "\n", "filtered_spans", ",", "\n", "sequence_lengths", ",", "\n", "linker", "=", "metadata", "[", "'linker'", "]", ")", "\n", "", "else", ":", "\n", "            ", "coref_all", "=", "all_spans", "\n", "coref_filtered", "=", "filtered_spans", "\n", "linker_coref_scores", "=", "None", "\n", "coref_targets", "=", "None", "\n", "\n", "", "if", "not", "self", ".", "rel_after_coref", ":", "\n", "            ", "coref_all", "=", "all_spans", "\n", "coref_filtered", "=", "filtered_spans", "\n", "\n", "", "if", "self", ".", "debug_memory", ":", "\n", "            ", "print", "(", "\"(coref) \"", ",", "torch", ".", "cuda", ".", "memory_allocated", "(", "0", ")", "/", "1024", "/", "1024", ")", "\n", "\n", "## relations", "\n", "", "if", "self", ".", "relation_task", ".", "enabled", ":", "\n", "            ", "relation_all", ",", "relation_filtered", ",", "relation_scores", "=", "self", ".", "rel_scorer", "(", "\n", "coref_all", ",", "\n", "coref_filtered", ",", "\n", "sequence_lengths", ")", "\n", "\n", "", "else", ":", "\n", "            ", "relation_all", "=", "coref_all", "\n", "relation_filtered", "=", "coref_filtered", "\n", "relation_scores", "=", "None", "\n", "relation_targets", "=", "None", "\n", "\n", "", "if", "self", ".", "debug_memory", ":", "\n", "            ", "print", "(", "\"(rels)  \"", ",", "torch", ".", "cuda", ".", "memory_allocated", "(", "0", ")", "/", "1024", "/", "1024", ")", "\n", "\n", "# LOSS FUNCTIONS", "\n", "\n", "## ner", "\n", "", "ner_obj", ",", "output", "[", "'tags'", "]", "=", "self", ".", "ner_task", "(", "\n", "relation_all", ",", "\n", "sequence_lengths", ",", "\n", "metadata", ".", "get", "(", "'gold_tags_indices'", ")", ",", "\n", "api_call", "=", "metadata", ".", "get", "(", "'api_call'", ")", "\n", ")", "\n", "\n", "ner_spans", "=", "[", "list", "(", "set", "(", "[", "(", "begin", ",", "end", "-", "1", ")", "for", "begin", ",", "end", ",", "_", "in", "spans", "]", ")", ")", "for", "spans", "in", "\n", "output", "[", "'tags'", "]", "[", "'pred'", "]", "]", "# TODO: settle on include spans", "\n", "\n", "coref_obj", ",", "output", "[", "'coref'", "]", "=", "self", ".", "coref_task", "(", "\n", "coref_scores", ",", "\n", "gold_m2i", "=", "metadata", ".", "get", "(", "'gold_m2i'", ")", ",", "\n", "pred_spans", "=", "pred_spans", ",", "\n", "gold_spans", "=", "gold_spans", ",", "\n", "predict", "=", "True", ",", "\n", "pruner_spans", "=", "relation_filtered", "[", "'enabled_spans'", "]", ",", "\n", "span_lengths", "=", "filtered_spans", "[", "'span_lengths'", "]", ",", "\n", "ner_spans", "=", "ner_spans", "\n", ")", "\n", "\n", "## linker+coref", "\n", "linker_coref_obj", ",", "output", "[", "'links'", "]", ",", "output_coref", "=", "self", ".", "coref_linker_task", "(", "\n", "scores", "=", "linker_coref_scores", ",", "\n", "gold_m2i", "=", "metadata", ".", "get", "(", "'gold_m2i'", ")", ",", "\n", "filtered_spans", "=", "filtered_spans", ",", "\n", "gold_spans", "=", "gold_spans", ",", "\n", "linker", "=", "metadata", "[", "'linker'", "]", ",", "\n", "# predict=True,", "\n", "predict", "=", "not", "self", ".", "training", ",", "\n", "pruner_spans", "=", "relation_filtered", "[", "'enabled_spans'", "]", ",", "\n", "ner_spans", "=", "ner_spans", ",", "\n", "api_call", "=", "metadata", ".", "get", "(", "'api_call'", ")", "\n", ")", "# TODO: candidate links", "\n", "\n", "# if not self.coref_task.enabled:", "\n", "if", "self", ".", "coref_linker_task", ".", "enabled", ":", "\n", "# if the coreflinker task is enabled, then overrides the corefs with the ones calculated by coreflinker", "\n", "            ", "output", "[", "'coref'", "]", "=", "output_coref", "\n", "\n", "## relations", "\n", "", "rel_obj", ",", "output", "[", "'rels'", "]", "=", "self", ".", "relation_task", "(", "\n", "relation_filtered", ",", "\n", "relation_scores", ",", "\n", "relations", ",", "\n", "output", "[", "'coref'", "]", ",", "\n", "predict", "=", "not", "self", ".", "training", "\n", ")", "\n", "\n", "## linker", "\n", "if", "self", ".", "linker_task", ".", "enabled", ":", "\n", "            ", "linker_obj", ",", "output_links", ",", "tmp_out_coref", "=", "self", ".", "linker_task", "(", "\n", "relation_all", ",", "\n", "metadata", "[", "'linker'", "]", ",", "\n", "filtered_spans", ",", "\n", "gold_m2i", "=", "metadata", ".", "get", "(", "'gold_m2i'", ")", ",", "\n", "gold_spans", "=", "gold_spans", "\n", ")", "\n", "output", "[", "'links'", "]", "=", "output_links", "\n", "\n", "if", "not", "self", ".", "coref_task", ".", "enabled", ":", "\n", "# if the coref task is not enabled, then takes the coreference given by linking (mentions pointing", "\n", "# to the same link are considered clustered).", "\n", "                ", "output", "[", "'coref'", "]", "=", "tmp_out_coref", "\n", "", "", "else", ":", "\n", "            ", "linker_obj", ",", "_", "=", "self", ".", "linker_task", "(", "\n", "relation_all", ",", "\n", "metadata", "[", "'linker'", "]", "\n", ")", "\n", "\n", "", "for", "m", "in", "metrics", ":", "\n", "            ", "if", "m", ".", "task", "in", "output", ":", "\n", "                ", "m", ".", "update2", "(", "output", "[", "m", ".", "task", "]", ",", "metadata", ")", "\n", "\n", "", "", "if", "self", ".", "debug_memory", ":", "\n", "            ", "print", "(", "\"(loss)  \"", ",", "torch", ".", "cuda", ".", "memory_allocated", "(", "0", ")", "/", "1024", "/", "1024", ")", "\n", "\n", "", "return", "obj_pruner", "+", "coref_obj", "+", "ner_obj", "+", "rel_obj", "+", "linker_obj", "+", "linker_coref_obj", ",", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert.CoreflinkerSpanBert.predict": [[679, 682], ["coreflinker_spanbert.CoreflinkerSpanBert.forward", "coreflinker_spanbert.CoreflinkerSpanBert.decode"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.relbasic.ModuleRelBasic.forward", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.decode"], ["", "def", "predict", "(", "self", ",", "inputs", ",", "relations", ",", "metadata", ",", "metrics", "=", "[", "]", ",", "output_config", "=", "None", ")", ":", "\n", "        ", "loss", ",", "output", "=", "self", ".", "forward", "(", "inputs", ",", "relations", ",", "metadata", ",", "metrics", ")", "\n", "return", "loss", ",", "self", ".", "decode", "(", "metadata", ",", "output", ",", "output_config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert.CoreflinkerSpanBert.create_metrics": [[683, 686], ["coreflinker_spanbert.CoreflinkerSpanBert.coref_linker_task.create_metrics", "coreflinker_spanbert.CoreflinkerSpanBert.linker_task.create_metrics", "coreflinker_spanbert.CoreflinkerSpanBert.relation_task.create_metrics", "coreflinker_spanbert.CoreflinkerSpanBert.coref_task.create_metrics", "coreflinker_spanbert.CoreflinkerSpanBert.ner_task.create_metrics"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.create_metrics", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.create_metrics", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.create_metrics", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.create_metrics", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.create_metrics"], ["", "def", "create_metrics", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "coref_task", ".", "create_metrics", "(", ")", "+", "self", ".", "ner_task", ".", "create_metrics", "(", ")", "+", "self", ".", "relation_task", ".", "create_metrics", "(", ")", "+", "self", ".", "linker_task", ".", "create_metrics", "(", ")", "+", "self", ".", "coref_linker_task", ".", "create_metrics", "(", ")", "\n", "# + self.coref_linker_mtt_task.create_metrics()", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert.CoreflinkerSpanBert.write_model": [[688, 698], ["print", "coreflinker_spanbert.CoreflinkerSpanBert.state_dict().items", "torch.save", "torch.save", "torch.save", "torch.save", "k.startswith", "coreflinker_spanbert.CoreflinkerSpanBert.state_dict", "print"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "write_model", "(", "self", ",", "filename", ")", ":", "\n", "        ", "print", "(", "\"write model:\"", ",", "filename", ")", "\n", "mydict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "self", ".", "state_dict", "(", ")", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", ".", "startswith", "(", "'word_embeddings'", ")", ":", "\n", "                ", "print", "(", "\"skip:\"", ",", "k", ")", "\n", "continue", "\n", "", "else", ":", "\n", "                ", "mydict", "[", "k", "]", "=", "v", "\n", "", "", "torch", ".", "save", "(", "mydict", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert.CoreflinkerSpanBert.load_model": [[699, 720], ["print", "coreflinker_spanbert.CoreflinkerSpanBert.state_dict", "coreflinker_spanbert.CoreflinkerSpanBert.update", "coreflinker_spanbert.CoreflinkerSpanBert.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load.keys", "torch.load.keys", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "keys_to_remove.append", "keys_to_remove.append"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.update"], ["", "def", "load_model", "(", "self", ",", "filename", ",", "to_cpu", "=", "False", ",", "load_word_embeddings", "=", "True", ")", ":", "\n", "        ", "print", "(", "'to_cpu IN LOAD_MODEL: '", ",", "to_cpu", ")", "\n", "if", "to_cpu", ":", "\n", "            ", "partial", "=", "torch", ".", "load", "(", "filename", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "", "else", ":", "\n", "# partial = torch.load(filename)", "\n", "            ", "partial", "=", "torch", ".", "load", "(", "filename", ",", "map_location", "=", "torch", ".", "device", "(", "settings", ".", "device", ")", ")", "\n", "\n", "", "if", "not", "load_word_embeddings", ":", "\n", "            ", "keys_to_remove", "=", "[", "]", "\n", "for", "curr_key", "in", "partial", ".", "keys", "(", ")", ":", "\n", "                ", "if", "'embedder.word_embedder'", "in", "curr_key", ":", "\n", "                    ", "keys_to_remove", ".", "append", "(", "curr_key", ")", "\n", "", "if", "'entity_embedder.embed.weight'", "in", "curr_key", ":", "\n", "                    ", "keys_to_remove", ".", "append", "(", "curr_key", ")", "\n", "", "", "for", "curr_key", "in", "keys_to_remove", ":", "\n", "                ", "del", "partial", "[", "curr_key", "]", "\n", "# update because word_embed is missing", "\n", "", "", "state", "=", "self", ".", "state_dict", "(", ")", "\n", "state", ".", "update", "(", "partial", ")", "\n", "self", ".", "load_state_dict", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert.CoreflinkerSpanBert.pass_from_subtokens_to_tokens": [[721, 801], ["zip", "dict", "coreflinker_spanbert.CoreflinkerSpanBert.pass_from_subtokens_to_tokens.get_coref_pointer"], "methods", ["None"], ["", "def", "pass_from_subtokens_to_tokens", "(", "self", ",", "outputs", ",", "subtoken_to_token_map", ")", ":", "\n", "# TODO! not only pass from BERT subtokens to tokens, but also de-duplicate (ex: delete duplicate spans in", "\n", "#  clusters). This can happen because two different BERT subtokens can map to the same token.", "\n", "        ", "new_coref", "=", "[", "]", "\n", "new_coref_pointers", "=", "[", "]", "\n", "new_coref_scores", "=", "[", "]", "\n", "new_links_scores", "=", "[", "]", "\n", "new_links_pred", "=", "[", "]", "\n", "new_links_gold", "=", "[", "]", "\n", "\n", "def", "get_coref_pointer", "(", "coref_connection_pointer", ",", "coref_connection_type", ",", "t_map", ":", "Dict", ")", ":", "\n", "            ", "if", "coref_connection_pointer", "is", "None", ":", "\n", "                ", "return", "None", "\n", "\n", "", "if", "coref_connection_type", "!=", "'link'", ":", "\n", "                ", "return", "t_map", "[", "coref_connection_pointer", "[", "0", "]", "]", ",", "t_map", "[", "coref_connection_pointer", "[", "1", "]", "]", "\n", "", "else", ":", "\n", "# should be string (i.e., the entity link)", "\n", "                ", "assert", "isinstance", "(", "coref_connection_pointer", ",", "str", ")", "\n", "return", "coref_connection_pointer", "\n", "\n", "", "", "def", "get_coref_pointer_dict_entry", "(", "span", ",", "v", ",", "t_map", ":", "Dict", ")", ":", "\n", "            ", "to_ret", "=", "dict", "(", ")", "\n", "to_ret", "[", "'coref_connection_type'", "]", "=", "v", "[", "'coref_connection_type'", "]", "\n", "to_ret", "[", "'coref_connection_pointer'", "]", "=", "get_coref_pointer", "(", "v", "[", "'coref_connection_pointer'", "]", ",", "\n", "v", "[", "'coref_connection_type'", "]", ",", "t_map", ")", "\n", "# (t_map[v['coref_connection_pointer'][0]],", "\n", "#  t_map[v['coref_connection_pointer'][1]])", "\n", "# if v['coref_connection_pointer'] is not None else None,", "\n", "if", "'coref_connection_score'", "in", "v", ":", "\n", "                ", "to_ret", "[", "'coref_connection_score'", "]", "=", "v", "[", "'coref_connection_score'", "]", "\n", "\n", "# }", "\n", "", "return", "to_ret", "\n", "\n", "", "for", "ner", ",", "coref", ",", "coref_pointers", ",", "coref_scores", ",", "concept_rels", ",", "span_rels", ",", "links_scores", ",", "links_gold", ",", "links_pred", ",", "t_map", "in", "zip", "(", "outputs", "[", "'tags'", "]", "[", "'pred'", "]", ",", "outputs", "[", "'coref'", "]", "[", "'pred'", "]", ",", "outputs", "[", "'coref'", "]", "[", "'pred_pointers'", "]", ",", "\n", "outputs", "[", "'coref'", "]", "[", "'scores'", "]", ",", "outputs", "[", "'rels'", "]", "[", "'pred'", "]", ",", "outputs", "[", "'rels'", "]", "[", "'span-rel-pred'", "]", ",", "\n", "outputs", "[", "'links'", "]", "[", "'scores'", "]", ",", "outputs", "[", "'links'", "]", "[", "'gold'", "]", ",", "outputs", "[", "'links'", "]", "[", "'pred'", "]", ",", "\n", "subtoken_to_token_map", ")", ":", "\n", "#####", "\n", "# print('an iteration over pass_from_subtokens_to_tokens')", "\n", "            ", "tok_coref", "=", "[", "[", "(", "t_map", "[", "span", "[", "0", "]", "]", ",", "t_map", "[", "span", "[", "1", "]", "]", ")", "for", "span", "in", "cluster", "]", "for", "cluster", "in", "coref", "]", "\n", "new_coref", ".", "append", "(", "tok_coref", ")", "\n", "tok_coref_pointers", "=", "{", "(", "t_map", "[", "span", "[", "0", "]", "]", ",", "t_map", "[", "span", "[", "1", "]", "]", ")", ":", "\n", "get_coref_pointer_dict_entry", "(", "span", ",", "v", ",", "t_map", ")", "\n", "# {'coref_connection_type': v['coref_connection_type'],", "\n", "#  'coref_connection_pointer':", "\n", "#      get_coref_pointer(v['coref_connection_pointer'], v['coref_connection_type'],", "\n", "#                        t_map),", "\n", "#  'coref_connection_score': v['coref_connection_score']", "\n", "#  }", "\n", "for", "span", ",", "v", "in", "\n", "coref_pointers", ".", "items", "(", ")", "}", "\n", "new_coref_pointers", ".", "append", "(", "tok_coref_pointers", ")", "\n", "\n", "tok_coref_scores", "=", "{", "(", "t_map", "[", "span", "[", "0", "]", "]", ",", "t_map", "[", "span", "[", "1", "]", "]", ")", ":", "[", "{", "'span'", ":", "(", "t_map", "[", "v", "[", "'span'", "]", "[", "0", "]", "]", ",", "t_map", "[", "v", "[", "'span'", "]", "[", "1", "]", "]", ")", ",", "\n", "'score'", ":", "v", "[", "'score'", "]", "}", "\n", "for", "v", "in", "values", "]", "for", "span", ",", "values", "in", "\n", "coref_scores", ".", "items", "(", ")", "}", "\n", "new_coref_scores", ".", "append", "(", "tok_coref_scores", ")", "\n", "\n", "tok_links_scores", "=", "[", "(", "(", "t_map", "[", "span", "[", "0", "]", "]", ",", "t_map", "[", "span", "[", "1", "]", "]", ")", ",", "links", ",", "scores", ")", "for", "span", ",", "links", ",", "scores", "in", "\n", "links_scores", "]", "\n", "new_links_scores", ".", "append", "(", "tok_links_scores", ")", "\n", "\n", "tok_links_pred", "=", "[", "(", "t_map", "[", "link_pred", "[", "0", "]", "]", ",", "t_map", "[", "link_pred", "[", "1", "]", "]", ",", "link_pred", "[", "2", "]", ")", "for", "link_pred", "in", "links_pred", "]", "\n", "new_links_pred", ".", "append", "(", "tok_links_pred", ")", "\n", "\n", "tok_links_gold", "=", "[", "(", "t_map", "[", "link_gold", "[", "0", "]", "]", ",", "t_map", "[", "link_gold", "[", "1", "]", "]", ",", "link_gold", "[", "2", "]", ")", "for", "link_gold", "in", "links_gold", "]", "\n", "new_links_gold", ".", "append", "(", "tok_links_gold", ")", "\n", "\n", "", "outputs", "[", "'coref'", "]", "[", "'pred'", "]", "=", "new_coref", "\n", "outputs", "[", "'coref'", "]", "[", "'pred_pointers'", "]", "=", "new_coref_pointers", "\n", "outputs", "[", "'coref'", "]", "[", "'scores'", "]", "=", "new_coref_scores", "\n", "outputs", "[", "'links'", "]", "[", "'scores'", "]", "=", "new_links_scores", "\n", "outputs", "[", "'links'", "]", "[", "'gold'", "]", "=", "new_links_gold", "\n", "outputs", "[", "'links'", "]", "[", "'pred'", "]", "=", "new_links_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert.CoreflinkerSpanBert.decode": [[810, 836], ["coreflinker_spanbert.CoreflinkerSpanBert.pass_from_subtokens_to_tokens", "zip", "predictions.append", "cpn.builder.convert_to_json"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.pass_from_subtokens_to_tokens", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.convert_to_json"], ["", "def", "decode", "(", "self", ",", "metadata", ",", "outputs", ",", "output_config", ",", "api_call", "=", "False", ")", ":", "\n", "        ", "subtoken_to_token_map", "=", "metadata", "[", "'subtoken_map'", "]", "\n", "self", ".", "pass_from_subtokens_to_tokens", "(", "outputs", ",", "subtoken_to_token_map", ")", "\n", "\n", "predictions", "=", "[", "]", "\n", "\n", "links_gold_batch", "=", "outputs", "[", "'links'", "]", "[", "'gold'", "]", "\n", "identifiers", "=", "metadata", "[", "'identifiers'", "]", "\n", "tags_batch", "=", "metadata", "[", "'tags'", "]", "\n", "\n", "idx", "=", "0", "\n", "for", "identifier", ",", "tags", ",", "content", ",", "begin_token", ",", "end_token", ",", "ner", ",", "coref", ",", "coref_pointers", ",", "coref_scores", ",", "concept_rels", ",", "span_rels", ",", "links_scores", ",", "links_gold", ",", "links_pred", "in", "zip", "(", "\n", "identifiers", ",", "tags_batch", ",", "metadata", "[", "'content'", "]", ",", "metadata", "[", "'begin_token'", "]", ",", "metadata", "[", "'end_token'", "]", ",", "\n", "outputs", "[", "'tags'", "]", "[", "'pred'", "]", ",", "outputs", "[", "'coref'", "]", "[", "'pred'", "]", ",", "outputs", "[", "'coref'", "]", "[", "'pred_pointers'", "]", ",", "\n", "outputs", "[", "'coref'", "]", "[", "'scores'", "]", ",", "outputs", "[", "'rels'", "]", "[", "'pred'", "]", ",", "outputs", "[", "'rels'", "]", "[", "'span-rel-pred'", "]", ",", "\n", "outputs", "[", "'links'", "]", "[", "'scores'", "]", ",", "links_gold_batch", ",", "outputs", "[", "'links'", "]", "[", "'pred'", "]", ")", ":", "\n", "####", "\n", "            ", "predictions", ".", "append", "(", "\n", "convert_to_json", "(", "identifier", ",", "tags", ",", "content", ",", "begin_token", ",", "end_token", ",", "ner", ",", "coref", ",", "\n", "coref_pointers", ",", "coref_scores", ",", "concept_rels", ",", "\n", "span_rels", ",", "links_scores", ",", "links_gold", ",", "links_pred", ",", "\n", "singletons", "=", "self", ".", "coref_task", ".", "singletons", ",", "output_config", "=", "output_config", ")", ")", "\n", "idx", "+=", "1", "\n", "\n", "", "return", "predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert.collate_dygie_spanbert": [[38, 167], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.LongTensor().to", "torch.LongTensor().to", "modules.tasks.linker.collate_spans", "modules.tasks.linker.collate_spans.to", "x[].sum().item", "zip", "modules.tasks.linker.collate_candidates_in_pytorch", "modules.tasks.linker.collate_targets", "x[].to", "x[].to", "zip", "gold_clusters.append", "torch.LongTensor", "torch.LongTensor", "candidates.size", "x[].sum", "list", "clusters[].append", "model.entity_dictionary.lookup", "range", "len"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.collate.collate_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.linker.collate_candidates_in_pytorch", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.linker.collate_targets", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup"], ["def", "collate_dygie_spanbert", "(", "model", ",", "batch", ",", "device", ",", "collate_api", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n\n    :param model:\n    :param batch:\n    :param device:\n    :param collate_api: if in True, means that the input comes from a client, possibly as a free text\n    (i.e., no gold mentions, relations, concepts, spans, etc.). If in False (default), the input comes for training\n    or evaluating using internal function located in traintool.train for instance.\n    :return:\n    \"\"\"", "\n", "\n", "# batch.sort(key=lambda x: x['xxx']['tokens'].size()[0], reverse=True)", "\n", "# sequence_lengths = torch.LongTensor([x['xxx']['tokens'].size()[0] for x in batch])", "\n", "\n", "# if model.embedder.do_char_embedding:", "\n", "#     characters = collate_character([x['xxx']['characters'] for x in batch], 50,", "\n", "#                                    model.embedder.char_embedder.padding,", "\n", "#                                    min_word_len=model.embedder.char_embedder.min_word_length)", "\n", "# else:", "\n", "#     characters = None", "\n", "\n", "# tokens = rnn_utils.pad_sequence([x['xxx']['tokens'] for x in batch], batch_first=True)", "\n", "# last_idx = max([len(x['xxx']['tokens']) for x in batch]) - 1", "\n", "# indices = rnn_utils.pad_sequence([x['xxx']['tokens-indices'] for x in batch], batch_first=True,", "\n", "#                                  padding_value=last_idx)", "\n", "\n", "sequence_lengths", "=", "[", "x", "[", "'bert_segs_mask'", "]", ".", "sum", "(", ")", ".", "item", "(", ")", "for", "x", "in", "batch", "]", "\n", "sequence_lengths", "=", "torch", ".", "tensor", "(", "sequence_lengths", ",", "dtype", "=", "torch", ".", "int", ",", "device", "=", "settings", ".", "device", ")", "\n", "\n", "tokens_lengths", "=", "torch", ".", "tensor", "(", "[", "x", "[", "'token_length'", "]", "for", "x", "in", "batch", "]", ",", "dtype", "=", "torch", ".", "int", ",", "device", "=", "settings", ".", "device", ")", "\n", "inputs", "=", "{", "\n", "'bert_segments'", ":", "[", "x", "[", "'bert_segments'", "]", ".", "to", "(", "device", "=", "settings", ".", "device", ")", "for", "x", "in", "batch", "]", ",", "\n", "'bert_segments_mask'", ":", "[", "x", "[", "'bert_segs_mask'", "]", ".", "to", "(", "device", "=", "settings", ".", "device", ")", "for", "x", "in", "batch", "]", ",", "\n", "'sequence_lengths'", ":", "sequence_lengths", ",", "\n", "'token_lengths'", ":", "tokens_lengths", "\n", "# 'characters': characters.to(device) if characters is not None else None,", "\n", "# 'sequence_lengths': sequence_lengths.to(device),", "\n", "# 'token_indices': indices.to(device),", "\n", "# 'text': [b['xxx']['text'] for b in batch]", "\n", "}", "\n", "\n", "gold_spans", "=", "[", "[", "(", "m", "[", "0", "]", ",", "m", "[", "1", "]", ")", "for", "m", "in", "x", "[", "'spans'", "]", "]", "for", "x", "in", "batch", "]", "\n", "\n", "# if not collate_api:", "\n", "if", "'gold_clusters'", "in", "batch", "[", "0", "]", ":", "\n", "        ", "gold_clusters", "=", "[", "x", "[", "'gold_clusters'", "]", "for", "x", "in", "batch", "]", "\n", "", "else", ":", "\n", "# TODO: move to cpn utility .py (or remove)", "\n", "        ", "gold_clusters", "=", "[", "]", "\n", "for", "spans", ",", "m2c", "in", "zip", "(", "gold_spans", ",", "[", "x", "[", "'mention2concept'", "]", "for", "x", "in", "batch", "]", ")", ":", "\n", "            ", "clusters", "=", "[", "list", "(", ")", "for", "_", "in", "range", "(", "m2c", "[", "0", "]", ")", "]", "\n", "for", "mention", ",", "concept", "in", "zip", "(", "m2c", "[", "3", "]", ",", "m2c", "[", "2", "]", ")", ":", "\n", "                ", "clusters", "[", "concept", "]", ".", "append", "(", "spans", "[", "mention", "]", ")", "\n", "", "gold_clusters", ".", "append", "(", "clusters", ")", "\n", "# end if not collate_api:", "\n", "\n", "", "", "metadata", "=", "{", "\n", "# 'tokens': [x['xxx']['text'] for x in batch],", "\n", "'content'", ":", "[", "x", "[", "'content'", "]", "for", "x", "in", "batch", "]", ",", "\n", "# 'begin': [[] for _ in batch],", "\n", "# 'end': [[] for _ in batch]", "\n", "'begin_token'", ":", "[", "x", "[", "'begin_token'", "]", "for", "x", "in", "batch", "]", ",", "\n", "'end_token'", ":", "[", "x", "[", "'end_token'", "]", "for", "x", "in", "batch", "]", ",", "\n", "'subtoken_map'", ":", "[", "x", "[", "'subtoken_map'", "]", "for", "x", "in", "batch", "]", "\n", "}", "\n", "\n", "# if not collate_api:", "\n", "metadata", "[", "'identifiers'", "]", "=", "[", "x", "[", "'id'", "]", "for", "x", "in", "batch", "]", "\n", "metadata", "[", "'tags'", "]", "=", "[", "x", "[", "'metadata_tags'", "]", "for", "x", "in", "batch", "]", "\n", "# end if not collate_api:", "\n", "\n", "# relations = None", "\n", "# if not collate_api:", "\n", "metadata", "[", "'gold_tags_indices'", "]", "=", "[", "x", "[", "'gold_tags_indices'", "]", "for", "x", "in", "batch", "]", "\n", "# metadata['all_spans']", "\n", "metadata", "[", "'gold_spans'", "]", "=", "gold_spans", "\n", "metadata", "[", "'gold_spans_lengths'", "]", "=", "(", "torch", ".", "LongTensor", "(", "[", "len", "(", "curr_spans", ")", "for", "curr_spans", "in", "gold_spans", "]", ")", ")", ".", "to", "(", "\n", "device", "=", "settings", ".", "device", ")", "\n", "metadata", "[", "'gold_m2i'", "]", "=", "[", "x", "[", "'clusters'", "]", "for", "x", "in", "batch", "]", "\n", "\n", "relations", "=", "{", "\n", "'gold_spans'", ":", "gold_spans", ",", "\n", "'gold_m2i'", ":", "[", "x", "[", "'clusters'", "]", "for", "x", "in", "batch", "]", ",", "\n", "'gold_clusters2'", ":", "gold_clusters", "\n", "}", "\n", "\n", "if", "'relations'", "in", "batch", "[", "0", "]", ":", "\n", "# old: remove the dimension", "\n", "        ", "relations", "[", "'gold_relations'", "]", "=", "[", "x", "[", "'relations'", "]", "[", "1", "]", "for", "x", "in", "batch", "]", "\n", "relations", "[", "'num_concepts'", "]", "=", "[", "x", "[", "'relations'", "]", "[", "0", "]", "[", "0", "]", "for", "x", "in", "batch", "]", "\n", "", "else", ":", "\n", "        ", "relations", "[", "'gold_relations'", "]", "=", "[", "x", "[", "'relations2'", "]", "for", "x", "in", "batch", "]", "\n", "relations", "[", "'num_concepts'", "]", "=", "[", "x", "[", "'num_concepts'", "]", "for", "x", "in", "batch", "]", "\n", "\n", "", "spans_tensors", "=", "collate_spans", "(", "gold_spans", ")", "\n", "# gold_spans --> <class 'list'>: [[(5, 6), (7, 12), (51, 53), (55, 59), (61, 61), (62, 62), (63, 67) ... ]]", "\n", "# spans_tensors.shape --> [1,9,2]", "\n", "# spans_tensors --> tensor([[[ 5,  6], [ 7, 12], [51, 53], [55, 59], [61, 61], [62, 62], [63, 67] ... ]])", "\n", "metadata", "[", "'gold_spans_tensors'", "]", "=", "spans_tensors", ".", "to", "(", "device", "=", "settings", ".", "device", ")", "\n", "\n", "linker", "=", "{", "}", "\n", "linker", "[", "'all_spans'", "]", "=", "[", "[", "(", "m", "[", "0", "]", ",", "m", "[", "1", "]", ")", "for", "m", "in", "x", "[", "'all_spans'", "]", "]", "for", "x", "in", "batch", "]", "\n", "if", "(", "model", ".", "linker_task", ".", "enabled", "or", "model", ".", "coref_linker_task", ".", "enabled", ")", "and", "'linker_candidates'", "in", "batch", "[", "0", "]", ":", "\n", "# or model.coref_linker_mtt_task.enabled)", "\n", "        ", "candidates", ",", "candidate_lengths", "=", "collate_candidates_in_pytorch", "(", "[", "x", "[", "'linker_candidates'", "]", "for", "x", "in", "batch", "]", ",", "\n", "unknown_id", "=", "model", ".", "entity_dictionary", ".", "lookup", "(", "\n", "'###UNKNOWN###'", ")", ")", "\n", "linker", "[", "'candidates'", "]", "=", "candidates", "\n", "linker", "[", "'candidate_lengths'", "]", "=", "candidate_lengths", "\n", "linker", "[", "'targets'", "]", "=", "collate_targets", "(", "[", "x", "[", "'linker_targets'", "]", "for", "x", "in", "batch", "]", ",", "candidates", ".", "size", "(", "2", ")", ")", "\n", "\n", "# the spans to which the candidates are assigned in linker", "\n", "\n", "# linker['total_cand_lengths_in_gold_mentions'] = \\", "\n", "#     collate_tot_cand_lengths([torch.tensor(x['total_cand_lengths_in_gold_mentions'], dtype=torch.int32)", "\n", "#                               for x in batch])", "\n", "\n", "linker", "[", "'gold'", "]", "=", "[", "x", "[", "'linker_gold'", "]", "for", "x", "in", "batch", "]", "\n", "\n", "# end if not collate_api:", "\n", "\n", "", "metadata", "[", "'linker'", "]", "=", "linker", "\n", "metadata", "[", "'api_call'", "]", "=", "collate_api", "\n", "\n", "return", "{", "\n", "'inputs'", ":", "inputs", ",", "\n", "'relations'", ":", "relations", ",", "\n", "'metadata'", ":", "metadata", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert.create_spanprop": [[170, 182], ["models.coreflinker.attprop.ModuleAttentionProp", "BaseException"], "function", ["None"], ["", "def", "create_spanprop", "(", "model", ",", "config", ")", ":", "\n", "    ", "if", "'spanprop'", "in", "config", ":", "\n", "        ", "sp_type", "=", "config", "[", "'spanprop'", "]", "[", "'type'", "]", "\n", "\n", "if", "sp_type", "==", "'attprop'", ":", "\n", "            ", "return", "ModuleAttentionProp", "(", "model", ".", "span_extractor", ".", "dim_output", ",", "\n", "# model.span_pruner.scorer,", "\n", "model", ".", "span_pair_generator", ",", "config", "[", "'spanprop'", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "BaseException", "(", "\"no such spanprop:\"", ",", "sp_type", ")", "\n", "", "", "else", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert.create_corefprop": [[184, 203], ["models.coreflinker.corefbasic.ModuleCorefBasic", "models.coreflinker.corefprop.ModuleCorefProp", "models.coreflinker.corefprop2.ModuleCorefProp2", "models.coreflinker.attention.ModulePlainAttention", "BaseException"], "function", ["None"], ["", "", "def", "create_corefprop", "(", "model", ",", "config", ")", ":", "\n", "    ", "cp_type", "=", "config", "[", "'corefprop'", "]", "[", "'type'", "]", "\n", "\n", "if", "cp_type", "==", "'none'", ":", "\n", "        ", "return", "None", "\n", "", "elif", "cp_type", "==", "'basic'", ":", "\n", "        ", "return", "ModuleCorefBasic", "(", "model", ".", "span_extractor", ".", "dim_output", ",", "model", ".", "span_pruner", ".", "scorer", ",", "model", ".", "span_pair_generator", ",", "\n", "config", "[", "'corefprop'", "]", ")", "\n", "", "elif", "cp_type", "==", "'default'", "or", "'ff_pairs'", ":", "\n", "        ", "return", "ModuleCorefProp", "(", "model", ".", "span_extractor", ".", "dim_output", ",", "model", ".", "span_pruner", ".", "scorer", ",", "model", ".", "span_pair_generator", ",", "\n", "config", ")", "\n", "", "elif", "cp_type", "==", "'corefprop2'", ":", "\n", "        ", "return", "ModuleCorefProp2", "(", "model", ".", "span_extractor", ".", "dim_output", ",", "model", ".", "span_pruner", ".", "scorer", ",", "model", ".", "span_pair_generator", ",", "\n", "config", "[", "'corefprop'", "]", ")", "\n", "", "elif", "cp_type", "==", "'attention'", ":", "\n", "        ", "return", "ModulePlainAttention", "(", "model", ".", "span_extractor", ".", "dim_output", ",", "1", ",", "model", ".", "span_pair_generator", ",", "config", "[", "'relprop'", "]", ",", "\n", "squeeze", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "raise", "BaseException", "(", "\"no such corefprop:\"", ",", "cp_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert.create_coreflinker_prop": [[205, 244], ["BaseException", "models.coreflinker.coreflinker_prop.ModuleCorefLinkerDisabled", "BaseException", "models.coreflinker.coreflinker_prop.ModuleCorefLinkerPropE2E", "models.coreflinker.coreflinker_prop.ModuleLinkerCorefProp", "models.coreflinker.coreflinker_mtt_prop.ModuleCorefLinkerMTTPropE2E", "models.coreflinker.coreflinker_mtt_prop.ModuleCorefLinkerMTTPropE2E", "models.coreflinker.coreflinker_prop.ModuleCorefLinkerPropE2E", "models.coreflinker.coreflinker_prop.ModuleLinkerCorefProp"], "function", ["None"], ["", "", "def", "create_coreflinker_prop", "(", "model", ",", "config", ",", "dictionaries", ")", ":", "\n", "    ", "if", "'coreflinker'", "not", "in", "config", "or", "not", "config", "[", "'coreflinker'", "]", "[", "'enabled'", "]", ":", "\n", "        ", "return", "ModuleCorefLinkerDisabled", "(", ")", "\n", "\n", "", "cp_type", "=", "config", "[", "'coreflinker'", "]", "[", "'coreflinker_prop'", "]", "[", "'type'", "]", "\n", "\n", "if", "cp_type", "==", "'none'", ":", "\n", "        ", "return", "None", "\n", "", "elif", "cp_type", "==", "'default'", ":", "\n", "        ", "coreflinker_type", "=", "config", "[", "'coreflinker'", "]", "[", "'type'", "]", "\n", "if", "model", ".", "end_to_end_mentions", ":", "\n", "            ", "if", "coreflinker_type", "==", "'coreflinker'", ":", "\n", "                ", "return", "ModuleCorefLinkerPropE2E", "(", "model", ".", "span_extractor", ".", "dim_output", ",", "\n", "model", ".", "span_pruner", ".", "scorer", ",", "\n", "model", ".", "span_pair_generator", ",", "config", "[", "'coreflinker'", "]", ",", "dictionaries", ")", "\n", "", "elif", "coreflinker_type", "==", "'coreflinker_mtt'", ":", "\n", "                ", "return", "ModuleCorefLinkerMTTPropE2E", "(", "model", ".", "span_extractor", ".", "dim_output", ",", "\n", "model", ".", "span_pruner", ".", "scorer", ",", "\n", "model", ".", "span_pair_generator", ",", "config", "[", "'coreflinker'", "]", ",", "dictionaries", ")", "\n", "", "elif", "coreflinker_type", "==", "'coreflinker_esm'", ":", "\n", "                ", "return", "ModuleCorefLinkerPropE2E", "(", "model", ".", "span_extractor", ".", "dim_output", ",", "\n", "model", ".", "span_pruner", ".", "scorer", ",", "\n", "model", ".", "span_pair_generator", ",", "config", "[", "'coreflinker'", "]", ",", "dictionaries", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "coreflinker_type", "==", "'coreflinker'", ":", "\n", "                ", "return", "ModuleLinkerCorefProp", "(", "model", ".", "span_extractor", ".", "dim_output", ",", "\n", "model", ".", "span_pruner", ".", "scorer", ",", "\n", "model", ".", "span_pair_generator", ",", "config", "[", "'coreflinker'", "]", ",", "dictionaries", ")", "\n", "", "elif", "coreflinker_type", "==", "'coreflinker_mtt'", ":", "\n", "                ", "return", "ModuleCorefLinkerMTTPropE2E", "(", "model", ".", "span_extractor", ".", "dim_output", ",", "\n", "model", ".", "span_pruner", ".", "scorer", ",", "\n", "model", ".", "span_pair_generator", ",", "config", "[", "'coreflinker'", "]", ",", "dictionaries", ")", "\n", "", "elif", "coreflinker_type", "==", "'coreflinker_esm'", ":", "\n", "                ", "return", "ModuleLinkerCorefProp", "(", "model", ".", "span_extractor", ".", "dim_output", ",", "\n", "model", ".", "span_pruner", ".", "scorer", ",", "\n", "model", ".", "span_pair_generator", ",", "config", "[", "'coreflinker'", "]", ",", "dictionaries", ")", "\n", "", "", "", "else", ":", "\n", "        ", "raise", "BaseException", "(", "\"no such linkercoref prop:\"", ",", "cp_type", ")", "\n", "", "raise", "BaseException", "(", "\"no such coreflinker found (in coreflinker_prop):\"", ",", "config", "[", "'coreflinker'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert.create_coreflinker_loss": [[246, 260], ["modules.tasks.coreflinker.CorefLinkerLossDisabled", "modules.tasks.coreflinker.CorefLinkerLoss", "modules.tasks.coreflinker_mtt.LossCorefLinkerMTT", "modules.tasks.coreflinker_edmonds_softmax.LossCorefLinkerESM"], "function", ["None"], ["", "def", "create_coreflinker_loss", "(", "model", ",", "config", ")", ":", "\n", "    ", "if", "model", ".", "coref_linker_scorer", ".", "enabled", ":", "\n", "        ", "coreflinker_type", "=", "config", "[", "'coreflinker'", "]", "[", "'type'", "]", "\n", "if", "coreflinker_type", "==", "'coreflinker'", ":", "\n", "            ", "return", "CorefLinkerLoss", "(", "'links'", ",", "'coref'", ",", "model", ".", "coref_linker_scorer", ".", "entity_embedder", ".", "dictionary", ",", "\n", "config", "[", "'coreflinker'", "]", ",", "model", ".", "end_to_end_mentions", ")", "\n", "", "elif", "coreflinker_type", "==", "'coreflinker_mtt'", ":", "\n", "            ", "return", "LossCorefLinkerMTT", "(", "'links'", ",", "'coref'", ",", "model", ".", "coref_linker_scorer", ".", "entity_embedder", ".", "dictionary", ",", "\n", "config", "[", "'coreflinker'", "]", ",", "model", ".", "end_to_end_mentions", ")", "\n", "", "elif", "coreflinker_type", "==", "'coreflinker_esm'", ":", "\n", "            ", "return", "LossCorefLinkerESM", "(", "'links'", ",", "'coref'", ",", "model", ".", "coref_linker_scorer", ".", "entity_embedder", ".", "dictionary", ",", "\n", "config", "[", "'coreflinker'", "]", ",", "model", ".", "end_to_end_mentions", ")", "\n", "", "", "else", ":", "\n", "        ", "return", "CorefLinkerLossDisabled", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert.create_relprop": [[264, 291], ["models.coreflinker.relbasic.ModuleRelBasic", "models.coreflinker.relprop.ModuleRelProp", "models.coreflinker.relprop.ModuleRelPropX", "models.coreflinker.relsimple.ModuleRelSimple", "models.coreflinker.relprop1.ModuleRelProp1", "models.coreflinker.relprop2.ModuleRelProp2", "models.coreflinker.attention.ModulePlainAttention", "BaseException", "len"], "function", ["None"], ["", "", "def", "create_relprop", "(", "model", ",", "config", ")", ":", "\n", "    ", "rp_type", "=", "config", "[", "'relprop'", "]", "[", "'type'", "]", "\n", "\n", "if", "rp_type", "==", "'none'", ":", "\n", "        ", "return", "None", "\n", "", "elif", "rp_type", "==", "'basic'", ":", "\n", "        ", "return", "ModuleRelBasic", "(", "model", ".", "span_extractor", ".", "dim_output", ",", "model", ".", "span_pair_generator", ",", "model", ".", "relation_labels", ",", "\n", "config", "[", "'relprop'", "]", ")", "\n", "", "elif", "rp_type", "==", "'default'", ":", "\n", "        ", "return", "ModuleRelProp", "(", "model", ".", "span_extractor", ".", "dim_output", ",", "model", ".", "span_pair_generator", ",", "model", ".", "relation_labels", ",", "\n", "config", "[", "'relprop'", "]", ")", "\n", "", "elif", "rp_type", "==", "'default-x'", ":", "\n", "        ", "return", "ModuleRelPropX", "(", "model", ".", "span_extractor", ".", "dim_output", ",", "model", ".", "span_pair_generator", ",", "model", ".", "relation_labels", ",", "\n", "config", "[", "'relprop'", "]", ")", "\n", "", "elif", "rp_type", "==", "'simple'", ":", "\n", "        ", "return", "ModuleRelSimple", "(", "model", ".", "span_extractor", ".", "dim_output", ",", "model", ".", "relation_labels", ",", "config", "[", "'relprop'", "]", ")", "\n", "", "elif", "rp_type", "==", "'relprop1'", ":", "\n", "        ", "return", "ModuleRelProp1", "(", "model", ".", "span_extractor", ".", "dim_output", ",", "model", ".", "span_pruner", ",", "model", ".", "span_pair_generator", ",", "\n", "model", ".", "relation_labels", ",", "config", "[", "'relprop'", "]", ")", "\n", "", "elif", "rp_type", "==", "'relprop2'", ":", "\n", "        ", "return", "ModuleRelProp2", "(", "model", ".", "span_extractor", ".", "dim_output", ",", "model", ".", "span_pair_generator", ",", "model", ".", "relation_labels", ",", "\n", "config", "[", "'relprop'", "]", ")", "\n", "", "elif", "rp_type", "==", "'attention'", ":", "\n", "        ", "return", "ModulePlainAttention", "(", "model", ".", "span_extractor", ".", "dim_output", ",", "len", "(", "model", ".", "relation_labels", ")", ",", "\n", "model", ".", "span_pair_generator", ",", "config", "[", "'relprop'", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "BaseException", "(", "\"no such relprop:\"", ",", "rp_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.relprop1.ModuleRelProp1.__init__": [[11, 21], ["torch.Module.__init__", "print", "shared_pruner.create_new", "models.coreflinker.scorers.OptFFpairs", "torch.Linear", "torch.Linear", "modules.utils.misc.MyGate", "len", "len"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.pruner.MentionPrunerSpanBertHoi.create_new"], ["    ", "def", "__init__", "(", "self", ",", "dim_span", ",", "shared_pruner", ",", "span_pair_generator", ",", "labels", ",", "config", ")", ":", "\n", "        ", "super", "(", "ModuleRelProp1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rel_prop", "=", "config", "[", "'rel_prop'", "]", "\n", "\n", "print", "(", "\"ModuleRelProp1: creating relation pruner\"", ")", "\n", "self", ".", "pruner", "=", "shared_pruner", ".", "create_new", "(", ")", "\n", "\n", "self", ".", "scorer", "=", "OptFFpairs", "(", "dim_span", ",", "len", "(", "labels", ")", ",", "config", ",", "span_pair_generator", ")", "\n", "self", ".", "A", "=", "nn", ".", "Linear", "(", "len", "(", "labels", ")", ",", "dim_span", ",", "bias", "=", "False", ")", "\n", "self", ".", "gate", "=", "MyGate", "(", "dim_span", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.relprop1.ModuleRelProp1.forward": [[22, 51], ["relprop1.ModuleRelProp1.pruner", "all_spans.copy", "filtered_spans.copy", "relprop1.ModuleRelProp1.scorer", "modules.utils.misc.relation_add_scores", "range", "modules.utils.misc.overwrite_spans", "relprop1.ModuleRelProp1.gate", "relprop1.ModuleRelProp1.scorer", "modules.utils.misc.relation_add_scores", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "square_mask.unsqueeze", "span_lengths.unsqueeze().unsqueeze", "relprop1.ModuleRelProp1.pruner.scorer", "span_lengths.unsqueeze", "relprop1.ModuleRelProp1.A", "relprop1.ModuleRelProp1.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.misc.relation_add_scores", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.misc.overwrite_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.misc.relation_add_scores"], ["", "def", "forward", "(", "self", ",", "all_spans", ",", "filtered_spans", ",", "sequence_lengths", ")", ":", "\n", "        ", "all_spans", ",", "filtered_spans", "=", "self", ".", "pruner", "(", "all_spans", ",", "sequence_lengths", ")", "\n", "\n", "update", "=", "filtered_spans", "[", "'span_vecs'", "]", "\n", "filtered_span_begin", "=", "filtered_spans", "[", "'span_begin'", "]", "\n", "filtered_span_end", "=", "filtered_spans", "[", "'span_end'", "]", "\n", "square_mask", "=", "filtered_spans", "[", "'square_mask'", "]", "\n", "span_lengths", "=", "filtered_spans", "[", "'span_lengths'", "]", "\n", "\n", "update_all", "=", "all_spans", ".", "copy", "(", ")", "\n", "update_filtered", "=", "filtered_spans", ".", "copy", "(", ")", "\n", "\n", "relation_scores", "=", "self", ".", "scorer", "(", "update", ",", "filtered_span_begin", ",", "filtered_span_end", ")", "\n", "relation_scores", "=", "relation_add_scores", "(", "relation_scores", ",", "filtered_spans", "[", "'span_scores'", "]", ")", "\n", "\n", "if", "self", ".", "rel_prop", ">", "0", ":", "\n", "            ", "for", "_", "in", "range", "(", "self", ".", "rel_prop", ")", ":", "\n", "                ", "probs", "=", "torch", ".", "relu", "(", "relation_scores", ")", "*", "square_mask", ".", "unsqueeze", "(", "-", "1", ")", "\n", "ctxt", "=", "(", "self", ".", "A", "(", "probs", ")", "*", "update", ".", "unsqueeze", "(", "-", "2", ")", ")", ".", "sum", "(", "-", "3", ")", "/", "span_lengths", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "update", "=", "self", ".", "gate", "(", "update", ",", "ctxt", ")", "\n", "\n", "relation_scores", "=", "self", ".", "scorer", "(", "update", ",", "filtered_span_begin", ",", "filtered_span_end", ")", "\n", "relation_scores", "=", "relation_add_scores", "(", "relation_scores", ",", "self", ".", "pruner", ".", "scorer", "(", "update", ")", ")", "\n", "\n", "", "update_filtered", "[", "'span_vecs'", "]", "=", "update", "\n", "update_all", "[", "'span_vecs'", "]", "=", "overwrite_spans", "(", "update_all", "[", "'span_vecs'", "]", ",", "filtered_spans", "[", "'prune_indices'", "]", ",", "\n", "span_lengths", ",", "update", ")", "\n", "\n", "", "return", "update_all", ",", "update_filtered", ",", "relation_scores", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.attprop.ModuleAttentionProp.__init__": [[12, 24], ["torch.Module.__init__", "print", "models.coreflinker.scorers.create_pair_scorer", "modules.utils.misc.MyGate"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.create_pair_scorer"], ["    ", "def", "__init__", "(", "self", ",", "dim_span", ",", "\n", "# coref_pruner,", "\n", "span_pair_generator", ",", "config", ")", ":", "\n", "        ", "super", "(", "ModuleAttentionProp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hidden_dim", "=", "config", "[", "'hidden_dim'", "]", "# 150", "\n", "self", ".", "hidden_dp", "=", "config", "[", "'hidden_dropout'", "]", "# 0.4", "\n", "self", ".", "att_prop", "=", "config", "[", "'att_prop'", "]", "\n", "\n", "print", "(", "\"ModuleAttentionProp(ap={})\"", ".", "format", "(", "self", ".", "att_prop", ")", ")", "\n", "if", "self", ".", "att_prop", ">", "0", ":", "\n", "            ", "self", ".", "attention", "=", "create_pair_scorer", "(", "dim_span", ",", "1", ",", "config", ",", "span_pair_generator", ")", "\n", "self", ".", "gate", "=", "MyGate", "(", "dim_span", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.attprop.ModuleAttentionProp.forward": [[25, 72], ["all_spans.copy", "filtered_spans.copy", "range", "modules.utils.misc.overwrite_spans", "attprop.ModuleAttentionProp.attention().squeeze", "torch.softmax", "torch.softmax", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "attprop.ModuleAttentionProp.gate", "attprop.ModuleAttentionProp.attention"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.misc.overwrite_spans"], ["", "", "def", "forward", "(", "self", ",", "all_spans", ",", "filtered_spans", ",", "sequence_lengths", ")", ":", "\n", "        ", "update", "=", "filtered_spans", "[", "'span_vecs'", "]", "\n", "# update.shape --> [1, 21, 2324]", "\n", "\n", "filtered_span_begin", "=", "filtered_spans", "[", "'span_begin'", "]", "\n", "# filtered_span_begin.shape --> torch.Size([1, 21, 1])", "\n", "\n", "filtered_span_end", "=", "filtered_spans", "[", "'span_end'", "]", "\n", "# filtered_span_end.shape --> [1, 21, 1]", "\n", "\n", "if", "update", "is", "None", "or", "self", ".", "att_prop", "<=", "0", ":", "\n", "            ", "return", "all_spans", ",", "filtered_spans", "\n", "\n", "", "if", "self", ".", "att_prop", ">", "0", ":", "\n", "            ", "square_mask", "=", "filtered_spans", "[", "'square_mask'", "]", "\n", "# square_mask.shape --> [1, 21, 21]", "\n", "#", "\n", "update_all", "=", "all_spans", ".", "copy", "(", ")", "\n", "# all_spans.shape -->", "\n", "#", "\n", "update_filtered", "=", "filtered_spans", ".", "copy", "(", ")", "\n", "#", "\n", "#", "\n", "for", "_", "in", "range", "(", "self", ".", "att_prop", ")", ":", "\n", "                ", "scores", "=", "self", ".", "attention", "(", "update", ",", "filtered_span_begin", ",", "filtered_span_end", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "# scores.shape --> [1, 21, 21]", "\n", "#", "\n", "probs", "=", "F", ".", "softmax", "(", "scores", "-", "(", "1.0", "-", "square_mask", ")", "*", "1e23", ",", "dim", "=", "-", "1", ")", "\n", "# probs.shape --> [1, 21, 21]", "\n", "#", "\n", "ctxt", "=", "torch", ".", "matmul", "(", "probs", ",", "update", ")", "\n", "# ctxt.shape --> [1, 21, 2324]", "\n", "#", "\n", "update", "=", "self", ".", "gate", "(", "update", ",", "ctxt", ")", "\n", "# update.shape --> [1, 21, 2324]", "\n", "#", "\n", "\n", "", "update_filtered", "[", "'span_vecs'", "]", "=", "update", "\n", "# update.shape --> [1, 21, 2324]", "\n", "#", "\n", "update_all", "[", "'span_vecs'", "]", "=", "overwrite_spans", "(", "update_all", "[", "'span_vecs'", "]", ",", "filtered_spans", "[", "'prune_indices'", "]", ",", "\n", "filtered_spans", "[", "'span_lengths'", "]", ",", "update", ")", "\n", "# update_all['span_vecs'].shape --> [1, 96, 15, 2324]", "\n", "# filtered_spans['prune_indices'].shape --> [1, 21]", "\n", "# filtered_spans['span_lengths'] --> tensor([21])", "\n", "# update.shape --> [1, 21, 2324]", "\n", "return", "update_all", ",", "update_filtered", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.attprop.ModuleAttentionPropHoi.__init__": [[78, 91], ["torch.Module.__init__", "print", "models.coreflinker.scorers.create_pair_scorer", "modules.utils.misc.MyGate"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.create_pair_scorer"], ["    ", "def", "__init__", "(", "self", ",", "dim_span", ",", "\n", "# coref_pruner,", "\n", "span_pair_generator", ",", "config", ")", ":", "\n", "        ", "super", "(", "ModuleAttentionPropHoi", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hidden_dim", "=", "config", "[", "'hidden_dim'", "]", "# 150", "\n", "self", ".", "hidden_dp", "=", "config", "[", "'hidden_dropout'", "]", "# 0.4", "\n", "self", ".", "att_prop", "=", "config", "[", "'att_prop'", "]", "\n", "self", ".", "init_weights_std", "=", "config", "[", "'init_weights_std'", "]", "\n", "\n", "print", "(", "\"ModuleAttentionProp(ap={})\"", ".", "format", "(", "self", ".", "att_prop", ")", ")", "\n", "if", "self", ".", "att_prop", ">", "0", ":", "\n", "            ", "self", ".", "attention", "=", "create_pair_scorer", "(", "dim_span", ",", "1", ",", "config", ",", "span_pair_generator", ")", "\n", "self", ".", "gate", "=", "MyGate", "(", "dim_span", ",", "self", ".", "init_weights_std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.attprop.ModuleAttentionPropHoi.forward": [[92, 136], ["range", "modules.utils.misc.overwrite_spans_hoi", "attprop.ModuleAttentionPropHoi.attention().squeeze", "torch.softmax", "torch.softmax", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "attprop.ModuleAttentionPropHoi.gate", "attprop.ModuleAttentionPropHoi.attention"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.misc.overwrite_spans_hoi"], ["", "", "def", "forward", "(", "self", ",", "all_spans", ",", "filtered_spans", ",", "sequence_lengths", ")", ":", "\n", "        ", "update", "=", "filtered_spans", "[", "'span_vecs'", "]", "\n", "# update.shape --> [1, 21, 2324]", "\n", "filtered_span_begin", "=", "filtered_spans", "[", "'span_begin'", "]", "\n", "# filtered_span_begin.shape --> [1, 21]", "\n", "filtered_span_end", "=", "filtered_spans", "[", "'span_end'", "]", "\n", "# filtered_span_end.shape --> [1, 21]", "\n", "\n", "if", "update", "is", "None", "or", "self", ".", "att_prop", "<=", "0", ":", "\n", "            ", "return", "all_spans", ",", "filtered_spans", "\n", "\n", "", "if", "self", ".", "att_prop", ">", "0", ":", "\n", "            ", "square_mask", "=", "filtered_spans", "[", "'square_mask'", "]", "\n", "# TODO: is this copy really necessary? can not see why", "\n", "# update_all = all_spans.copy()", "\n", "# update_filtered = filtered_spans.copy()", "\n", "update_all", "=", "all_spans", "\n", "update_filtered", "=", "filtered_spans", "\n", "\n", "for", "_", "in", "range", "(", "self", ".", "att_prop", ")", ":", "\n", "                ", "scores", "=", "self", ".", "attention", "(", "update", ",", "filtered_span_begin", ",", "filtered_span_end", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "probs", "=", "F", ".", "softmax", "(", "scores", "-", "(", "1.0", "-", "square_mask", ")", "*", "1e23", ",", "dim", "=", "-", "1", ")", "\n", "ctxt", "=", "torch", ".", "matmul", "(", "probs", ",", "update", ")", "\n", "update", "=", "self", ".", "gate", "(", "update", ",", "ctxt", ")", "\n", "# scores.shape --> [1, 21, 21]", "\n", "# probs.shape --> [1, 21, 21]", "\n", "# ctxt.shape --> [1, 21, 2324]", "\n", "# update.shape --> [1, 21, 2324]", "\n", "\n", "", "update_filtered", "[", "'span_vecs'", "]", "=", "update", "\n", "# update.shape --> [1, 21, 2324]", "\n", "\n", "update_all", "[", "'cand_span_vecs'", "]", "=", "overwrite_spans_hoi", "(", "update_all", "[", "'cand_span_vecs'", "]", ",", "\n", "filtered_spans", "[", "'prune_indices_hoi'", "]", ",", "\n", "filtered_spans", "[", "'span_lengths'", "]", ",", "update", ")", "\n", "\n", "# update_all['span_vecs'] --> key error, relplaced by cand_span_vecs", "\n", "#   update_all['cand_span_vecs'].shape --> [1, 315, 2324]", "\n", "# filtered_spans_rest['prune_indices'] --> key error, replaced by prune_indices_hoi", "\n", "#   filtered_spans_rest['prune_indices_hoi'].shape --> [1, 21]", "\n", "# filtered_spans_rest['span_lengths'] --> tensor([21])", "\n", "# update.shape --> torch.Size([1, 21, 2324])", "\n", "\n", "return", "update_all", ",", "update_filtered", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.__init__": [[301, 387], ["torch.Module.__init__", "modules.spirit.TextEmbedder", "modules.ner.spanner.SpanEndpointSpanBert", "modules.utils.misc.SpanPairs", "coreflinker_spanbert_hoi.create_spanprop_hoi", "models.coreflinker.corefprop_hoi.ModuleCorefPropHoi", "coreflinker_spanbert_hoi.create_coreflinker_prop", "coreflinker_spanbert_hoi.create_coreflinker_loss", "torch.Dropout", "torch.Dropout", "models.coreflinker.pruner.MentionPrunerSpanBertHoi", "NotImplementedError", "modules.tasks.coref.LossCoref", "modules.tasks.coref.LossBidirectionalCoref", "modules.tasks.linker.LinkerNone", "BaseException", "modules.tasks.linker_hoi.LossLinkerE2EHoi", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.create_spanprop_hoi", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.create_coreflinker_prop", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.create_coreflinker_loss"], ["    ", "def", "__init__", "(", "self", ",", "dictionaries", ",", "config", ")", ":", "\n", "        ", "super", "(", "CoreflinkerSpanBertHoi", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "random_embed_dim", "=", "config", "[", "'random_embed_dim'", "]", "\n", "self", ".", "max_span_length", "=", "config", "[", "'max_span_length'", "]", "\n", "# self.hidden_dim = config['hidden_dim']  # 150", "\n", "# self.hidden_dp = config['hidden_dropout']  # 0.4", "\n", "self", ".", "rel_after_coref", "=", "config", "[", "'rel_after_coref'", "]", "\n", "self", ".", "spans_single_sentence", "=", "config", "[", "'spans_single_sentence'", "]", "\n", "self", ".", "use_all_subtoken_spans", "=", "config", "[", "'use_all_subtoken_spans'", "]", "\n", "# self.spanbert_input = config['spanbert_input']", "\n", "\n", "# self.load_doc_level_candidates = \\", "\n", "#     (config['coreflinker']['enabled'] and config['coreflinker']['doc_level_candidates']) or \\", "\n", "#     (config['linker']['enabled'] and config['linker']['doc_level_candidates'])", "\n", "\n", "self", ".", "debug_memory", "=", "False", "\n", "self", ".", "debug_tensors", "=", "False", "\n", "\n", "# whether take gold mentions or use the pruner", "\n", "self", ".", "end_to_end_mentions", "=", "config", "[", "'end_to_end_mentions'", "]", "\n", "self", ".", "embedder", "=", "TextEmbedder", "(", "dictionaries", ",", "config", "[", "'text_embedder'", "]", ")", "\n", "\n", "self", ".", "entity_dictionary", "=", "None", "\n", "if", "'entities'", "in", "dictionaries", ":", "\n", "            ", "self", ".", "entity_dictionary", "=", "dictionaries", "[", "'entities'", "]", "\n", "\n", "", "if", "'lexical_dropout'", "in", "config", ":", "\n", "            ", "self", ".", "emb_dropout", "=", "nn", ".", "Dropout", "(", "config", "[", "'lexical_dropout'", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "emb_dropout", "=", "None", "\n", "# self.seq2seq = Seq2Seq(self.embedder.dim_output + self.random_embed_dim, config['seq2seq'])", "\n", "\n", "# self.span_extractor = create_span_extractor(self.seq2seq.dim_output, self.max_span_length,", "\n", "#                                             config['span-extractor'])", "\n", "", "self", ".", "span_extractor", ":", "SpanEndpointSpanBert", "=", "SpanEndpointSpanBert", "(", "self", ".", "embedder", ".", "dim_output", ",", "\n", "self", ".", "max_span_length", ",", "\n", "config", "[", "'span-extractor'", "]", ")", "\n", "# create_span_extractor(self.embedder.dim_output,", "\n", "#                                                               self.max_span_length,", "\n", "#                                                               config['span-extractor'])", "\n", "\n", "if", "self", ".", "end_to_end_mentions", ":", "\n", "            ", "self", ".", "span_pruner", ":", "MentionPrunerSpanBertHoi", "=", "MentionPrunerSpanBertHoi", "(", "self", ".", "span_extractor", ".", "dim_output", ",", "config", "[", "'pruner'", "]", ",", "\n", "config", "[", "'span-extractor'", "]", "[", "'span_embed'", "]", ")", "\n", "", "else", ":", "\n", "# self.span_pruner = MentionPrunerGold(self.max_span_length, config['pruner'])", "\n", "            ", "raise", "NotImplementedError", "(", "'not implemented for not end-to-end setting'", ")", "\n", "\n", "", "self", ".", "span_pair_generator", "=", "SpanPairs", "(", "self", ".", "span_extractor", ".", "dim_output", ",", "config", "[", "'span-pairs'", "]", ")", "\n", "self", ".", "span_prop", "=", "create_spanprop_hoi", "(", "self", ",", "config", ")", "\n", "# self.span_prop = None", "\n", "\n", "# self.coref_scorer = create_corefprop(self, config['coref'])", "\n", "self", ".", "coref_scorer", "=", "ModuleCorefPropHoi", "(", "self", ".", "span_extractor", ".", "dim_output", ",", "self", ".", "span_pruner", ".", "scorer", ",", "\n", "# self.span_pair_generator,", "\n", "config", ",", "span_pair_generator", "=", "self", ".", "span_pair_generator", ")", "\n", "\n", "# self.relation_labels = dictionaries['relations'].tolist()", "\n", "\n", "# self.rel_scorer = create_relprop(self, config)", "\n", "\n", "if", "not", "config", "[", "'coref'", "]", "[", "'bidirectional'", "]", ":", "\n", "            ", "self", ".", "coref_task", "=", "LossCoref", "(", "'coref'", ",", "config", "[", "'coref'", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "coref_task", "=", "LossBidirectionalCoref", "(", "'coref'", ",", "config", "[", "'coref'", "]", ")", "\n", "\n", "# kzaporoj - here add linkercoref joint", "\n", "", "self", ".", "coref_linker_scorer", "=", "create_coreflinker_prop", "(", "self", ",", "config", ",", "dictionaries", ")", "\n", "self", ".", "coref_linker_task", "=", "create_coreflinker_loss", "(", "self", ",", "config", ")", "\n", "\n", "# self.ner_task = TaskSpan1x('tags', self.span_extractor.dim_output, dictionaries['tags'], config['ner'])", "\n", "# self.relation_task = create_task_relations('rels', config['relations'], self.relation_labels)", "\n", "\n", "if", "'linker'", "in", "config", "and", "config", "[", "'linker'", "]", "[", "'enabled'", "]", ":", "\n", "            ", "if", "self", ".", "end_to_end_mentions", ":", "\n", "                ", "self", ".", "linker_task", "=", "LossLinkerE2EHoi", "(", "'links'", ",", "self", ".", "span_extractor", ".", "dim_output", ",", "dictionaries", ",", "\n", "config", "[", "'linker'", "]", ",", "self", ".", "max_span_length", ")", "\n", "", "else", ":", "\n", "                ", "raise", "RuntimeError", "(", "'not implemented linker for not end to end'", ")", "\n", "# self.linker_task = LossLinker('links', self.span_extractor.dim_output, dictionaries, config['linker'])", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "linker_task", "=", "LinkerNone", "(", ")", "\n", "\n", "", "if", "not", "self", ".", "span_pruner", ".", "sort_after_pruning", "and", "self", ".", "pairs", ".", "requires_sorted_spans", ":", "\n", "            ", "raise", "BaseException", "(", "\"ERROR: spans MUST be sorted\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.collate_func": [[388, 390], ["coreflinker_spanbert_hoi.collate_dygie_spanbert"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.collate_dygie_spanbert"], ["", "", "def", "collate_func", "(", "self", ",", "datasets", ",", "device", ")", ":", "\n", "        ", "return", "lambda", "x", ":", "collate_dygie_spanbert", "(", "self", ",", "x", ",", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.log_stats": [[391, 395], ["coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.span_pruner.log_stats", "coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.coref_linker_task.log_stats", "coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.coref_linker_scorer.log_stats"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_prop_hoi.ModuleCorefLinkerPropE2EHoi.log_stats", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_prop_hoi.ModuleCorefLinkerPropE2EHoi.log_stats", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_prop_hoi.ModuleCorefLinkerPropE2EHoi.log_stats"], ["", "def", "log_stats", "(", "self", ",", "dataset_name", ",", "tb_logger", ",", "step_nr", ")", ":", "\n", "        ", "self", ".", "span_pruner", ".", "log_stats", "(", "dataset_name", ",", "not", "self", ".", "training", ",", "tb_logger", ",", "step_nr", ")", "\n", "self", ".", "coref_linker_task", ".", "log_stats", "(", "dataset_name", ",", "not", "self", ".", "training", ",", "tb_logger", ",", "step_nr", ")", "\n", "self", ".", "coref_linker_scorer", ".", "log_stats", "(", "dataset_name", ",", "not", "self", ".", "training", ",", "tb_logger", ",", "step_nr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.get_params": [[401, 413], ["coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.named_parameters", "name.startswith", "bert_based_param.append", "task_param.append"], "methods", ["None"], ["", "def", "get_params", "(", "self", ",", "named", "=", "False", ")", ":", "\n", "        ", "bert_based_param", ",", "task_param", "=", "[", "]", ",", "[", "]", "\n", "for", "name", ",", "param", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "# if name.startswith('bert'):", "\n", "            ", "if", "name", ".", "startswith", "(", "'embedder.spanbert_embedder.spanbert_model'", ")", ":", "\n", "                ", "to_add", "=", "(", "name", ",", "param", ")", "if", "named", "else", "param", "\n", "bert_based_param", ".", "append", "(", "to_add", ")", "\n", "", "else", ":", "\n", "# print('name of param: ', name)", "\n", "                ", "to_add", "=", "(", "name", ",", "param", ")", "if", "named", "else", "param", "\n", "task_param", ".", "append", "(", "to_add", ")", "\n", "", "", "return", "bert_based_param", ",", "task_param", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.forward": [[414, 729], ["coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.embedder", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "[].unsqueeze.unsqueeze_", "[].unsqueeze.unsqueeze_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "modules.utils.misc.spans_to_indices().long", "range", "[].unsqueeze", "[].unsqueeze", "coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.span_extractor", "coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.span_pruner", "coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.coref_task", "coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.coref_linker_task", "print", "print", "coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.emb_dropout", "torch.FloatTensor().to().normal_", "torch.FloatTensor().to().normal_", "torch.FloatTensor().to().normal_", "torch.FloatTensor().to().normal_", "modules.misc.misc.batched_index_select", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "modules.utils.misc.inspect", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "[].to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "[].unsqueeze.size", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "metadata.get", "metadata.get", "print", "coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.span_prop", "coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.coref_scorer", "coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.coref_linker_scorer", "print", "print", "coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.linker_task", "coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.linker_task", "print", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "[].unsqueeze.size", "[].unsqueeze.size", "modules.utils.misc.spans_to_indices", "span_mask_subtoks[].view", "torch.zeros.sum().int().item", "torch.zeros.sum().int().item", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.entity_dictionary.lookup", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros.view", "torch.zeros.view", "torch.zeros.unsqueeze", "torch.zeros.unsqueeze", "torch.zeros.unsqueeze", "torch.zeros.unsqueeze", "torch.zeros.unsqueeze", "torch.zeros.unsqueeze", "metadata.get", "metadata.get", "metadata.get", "metadata.get", "metadata.get", "metadata.get", "m.update2", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.min", "torch.min", "torch.min", "torch.min", "[].unsqueeze.size", "[].unsqueeze.size", "sequence_lengths[].item", "metadata.get", "metadata.get", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.zeros.sum().int", "torch.zeros.sum().int", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.cuda.memory_allocated", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.zeros.sum", "torch.zeros.sum"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.batched_index_select", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.models.ncr3.CheckGradient.inspect", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.spans_to_indices", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.update2", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "metadata", ",", "metrics", "=", "[", "]", ",", "only_loss", "=", "False", ")", ":", "\n", "        ", "output", "=", "{", "}", "\n", "# all_spans_tensor = torch.tensor(metadata['linker']['all_spans'], dtype=torch.int, device=settings.device)", "\n", "all_spans_tensor", "=", "metadata", "[", "'linker'", "]", "[", "'all_spans_tensor'", "]", "\n", "# all_spans", "\n", "# candidate_starts = all_spans_tensor[:,0]", "\n", "# candidate_ends = all_spans_tensor[:,1]", "\n", "sequence_lengths", "=", "inputs", "[", "'sequence_lengths'", "]", "\n", "token_lengths", "=", "inputs", "[", "'token_lengths'", "]", "\n", "\n", "if", "self", ".", "debug_memory", "or", "self", ".", "debug_tensors", ":", "\n", "# print(\"START\", metadata['identifiers'][0], sequence_lengths)", "\n", "            ", "print", "(", "\"START\"", ",", "metadata", "[", "'identifiers'", "]", "[", "0", "]", ")", "\n", "print", "(", "\"(none)  \"", ",", "torch", ".", "cuda", ".", "memory_allocated", "(", "0", ")", "/", "1024", "/", "1024", ")", "\n", "\n", "# MODEL MODULES", "\n", "", "embeddings", "=", "self", ".", "embedder", "(", "inputs", ")", "\n", "\n", "if", "self", ".", "emb_dropout", "is", "not", "None", ":", "\n", "            ", "embeddings", "=", "self", ".", "emb_dropout", "(", "embeddings", ")", "\n", "\n", "", "if", "self", ".", "random_embed_dim", ">", "0", ":", "\n", "            ", "rand_embedding", "=", "torch", ".", "FloatTensor", "(", "embeddings", ".", "size", "(", "0", ")", ",", "embeddings", ".", "size", "(", "1", ")", ",", "self", ".", "random_embed_dim", ")", ".", "to", "(", "\n", "embeddings", ".", "device", ")", ".", "normal_", "(", "std", "=", "4.0", ")", "\n", "rand_embedding", "=", "batched_index_select", "(", "rand_embedding", ",", "inputs", "[", "'token_indices'", "]", ")", "\n", "embeddings", "=", "torch", ".", "cat", "(", "(", "embeddings", ",", "rand_embedding", ")", ",", "-", "1", ")", "\n", "\n", "", "if", "self", ".", "debug_tensors", ":", "\n", "            ", "inspect", "(", "'embeddings'", ",", "embeddings", "[", "0", ",", ":", ",", ":", "]", ")", "\n", "\n", "# we work only with batch size 1 in this module", "\n", "", "assert", "embeddings", ".", "shape", "[", "0", "]", "==", "1", "\n", "\n", "# embeddings = torch.squeeze(embeddings, 0)", "\n", "embeddings", "=", "torch", ".", "squeeze", "(", "embeddings", ",", "0", ")", "\n", "num_subtokens", "=", "embeddings", ".", "shape", "[", "0", "]", "\n", "\n", "span_begin", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "arange", "(", "0", ",", "num_subtokens", ",", "\n", "device", "=", "settings", ".", "device", ")", ",", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "max_span_length", ")", "\n", "span_end", "=", "span_begin", "+", "torch", ".", "arange", "(", "0", ",", "self", ".", "max_span_length", ",", "device", "=", "settings", ".", "device", ")", "\n", "\n", "span_begin", ".", "unsqueeze_", "(", "0", ")", "\n", "span_end", ".", "unsqueeze_", "(", "0", ")", "\n", "\n", "# span_mask = torch.zeros((span_begin.size(0), span_begin.size(1), self.max_span_length),", "\n", "#   device=settings.device)", "\n", "span_mask", "=", "torch", ".", "zeros", "(", "(", "span_begin", ".", "size", "(", "0", ")", ",", "span_begin", ".", "size", "(", "1", ")", ",", "self", ".", "max_span_length", ")", ",", "\n", "device", "=", "settings", ".", "device", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "\n", "span_mask", "[", "0", "]", "=", "(", "span_end", "[", "0", "]", "<", "num_subtokens", ")", "\n", "if", "self", ".", "spans_single_sentence", ":", "\n", "            ", "sentence_map", "=", "metadata", "[", "'sentence_map'", "]", "[", "0", "]", ".", "to", "(", "settings", ".", "device", ")", "\n", "assert", "sentence_map", ".", "shape", "[", "0", "]", "==", "num_subtokens", "\n", "candidate_start_sent_idx", "=", "sentence_map", "[", "span_begin", "[", "0", "]", "]", "\n", "candidate_end_sent_idx", "=", "sentence_map", "[", "\n", "torch", ".", "min", "(", "span_end", "[", "0", "]", ",", "torch", ".", "tensor", "(", "num_subtokens", "-", "1", ",", "device", "=", "settings", ".", "device", ")", ")", "]", "\n", "span_mask", "[", "0", "]", "=", "span_mask", "[", "0", "]", "&", "(", "candidate_start_sent_idx", "==", "candidate_end_sent_idx", ")", "\n", "\n", "", "indices_mask", "=", "spans_to_indices", "(", "all_spans_tensor", ",", "self", ".", "max_span_length", ")", ".", "long", "(", ")", "\n", "if", "not", "self", ".", "use_all_subtoken_spans", ":", "\n", "# uses only the spans of all_spans", "\n", "\n", "            ", "span_mask_subtoks", "=", "torch", ".", "zeros", "(", "(", "span_begin", ".", "size", "(", "0", ")", ",", "span_begin", ".", "size", "(", "1", ")", ",", "self", ".", "max_span_length", ")", ",", "\n", "device", "=", "settings", ".", "device", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "span_mask_subtoks", "[", "0", ",", ":", ",", ":", "]", ".", "view", "(", "-", "1", ")", "[", "indices_mask", "[", "0", "]", "]", "=", "True", "\n", "assert", "span_mask_subtoks", ".", "sum", "(", "dim", "=", "(", "-", "1", ",", "-", "2", ")", ")", ".", "int", "(", ")", ".", "item", "(", ")", "==", "all_spans_tensor", ".", "shape", "[", "1", "]", "\n", "span_mask", "[", "0", "]", "=", "span_mask", "[", "0", "]", "&", "span_mask_subtoks", "[", "0", "]", "\n", "\n", "", "for", "curr_batch", "in", "range", "(", "span_begin", ".", "size", "(", "0", ")", ")", ":", "\n", "# span_mask[curr_batch, :, :].view(-1)[indices_mask[curr_batch]] = True", "\n", "\n", "# todo: move this code to collate, find a better alternative for this if: basically now is executed", "\n", "#  only when a single coreference is enabled without any linking component (ergo no entity_dictionary)", "\n", "            ", "if", "self", ".", "entity_dictionary", "is", "not", "None", "and", "(", "self", ".", "coref_linker_task", ".", "enabled", "or", "self", ".", "linker_task", ".", "enabled", ")", ":", "\n", "                ", "tot_candidates", "=", "self", ".", "max_span_length", "*", "sequence_lengths", "[", "curr_batch", "]", ".", "item", "(", ")", "\n", "expanded_candidates", "=", "torch", ".", "zeros", "(", "tot_candidates", ",", "metadata", "[", "'linker'", "]", "[", "'candidates'", "]", ".", "shape", "[", "-", "1", "]", ",", "\n", "dtype", "=", "torch", ".", "long", ",", "device", "=", "settings", ".", "device", ")", "\n", "expanded_candidates", "[", ":", ",", ":", "]", "=", "self", ".", "entity_dictionary", ".", "lookup", "(", "\"###UNKNOWN###\"", ")", "\n", "\n", "expanded_candidates", "[", "indices_mask", "[", "curr_batch", "]", ",", ":", "]", "=", "metadata", "[", "'linker'", "]", "[", "'candidates'", "]", "[", "curr_batch", "]", "\n", "\n", "expanded_cand_lengths", "=", "torch", ".", "zeros", "(", "tot_candidates", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "settings", ".", "device", ")", "\n", "expanded_cand_lengths", "[", "indices_mask", "[", "curr_batch", "]", "]", "=", "metadata", "[", "'linker'", "]", "[", "'candidate_lengths'", "]", "[", "curr_batch", "]", "\n", "\n", "expanded_cand_targets", "=", "torch", ".", "zeros", "(", "tot_candidates", ",", "metadata", "[", "'linker'", "]", "[", "'targets'", "]", ".", "shape", "[", "-", "1", "]", ",", "\n", "dtype", "=", "torch", ".", "float", ",", "device", "=", "settings", ".", "device", ")", "\n", "expanded_cand_targets", "[", "indices_mask", "[", "curr_batch", "]", ",", ":", "]", "=", "metadata", "[", "'linker'", "]", "[", "'targets'", "]", "[", "curr_batch", "]", "\n", "\n", "# now applying span_mask calculated above to the candidates, first some asserts to check that the", "\n", "# dimensions match between candidates and spans", "\n", "# assert expanded_candidates", "\n", "m1", "=", "span_mask", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "m2", "=", "span_mask", "[", "0", "]", ".", "shape", "[", "1", "]", "\n", "assert", "m1", "*", "m2", "==", "tot_candidates", "\n", "span_mask_flat", "=", "span_mask", ".", "view", "(", "-", "1", ")", "\n", "expanded_candidates", "=", "expanded_candidates", "[", "span_mask_flat", ",", ":", "]", "\n", "expanded_cand_lengths", "=", "expanded_cand_lengths", "[", "span_mask_flat", "]", "\n", "expanded_cand_targets", "=", "expanded_cand_targets", "[", "span_mask_flat", ",", ":", "]", "\n", "metadata", "[", "'linker'", "]", "[", "'candidates'", "]", "=", "expanded_candidates", ".", "unsqueeze", "(", "0", ")", "\n", "metadata", "[", "'linker'", "]", "[", "'candidate_lengths'", "]", "=", "expanded_cand_lengths", ".", "unsqueeze", "(", "0", ")", "\n", "metadata", "[", "'linker'", "]", "[", "'targets'", "]", "=", "expanded_cand_targets", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "# END TODO: move this code to collate!!", "\n", "\n", "# TODO CRITICAL!!!: also adapts the end-to-end linker candidate list, since the width of some of the passed", "\n", "#  spans can be > than self.max_span_length, there should be also a mapping between this candidate list", "\n", "#  and the absolute position given the self.max_span>length", "\n", "\n", "# TODO: update metadata['linker']['all_spans']", "\n", "\n", "# for loop for assertion purposes only, slow this is why it is commented", "\n", "# for curr_span_idx in all_spans_tensor[0]:", "\n", "#     span_width = (curr_span_idx[1] - curr_span_idx[0]).item()", "\n", "#     assert span_mask[0, curr_span_idx[0], span_width] == 1.0", "\n", "\n", "# extract span embeddings", "\n", "# only with batch size 1 for now", "\n", "# assert span_begin.shape[0] == 1", "\n", "", "", "span_begin", "=", "span_begin", "[", "0", "]", "[", "span_mask", "[", "0", "]", "]", ".", "unsqueeze", "(", "0", ")", "\n", "span_end", "=", "span_end", "[", "0", "]", "[", "span_mask", "[", "0", "]", "]", ".", "unsqueeze", "(", "0", ")", "\n", "#", "\n", "span_vecs", ",", "candidate_width_idx", "=", "self", ".", "span_extractor", "(", "embeddings", ".", "unsqueeze", "(", "0", ")", ",", "span_begin", ",", "span_end", ",", "self", ".", "max_span_length", ",", "span_mask", ")", "\n", "# span_vecs = self.span_extractor(hidden, span_begin, span_end, max_span_length)", "\n", "# span_vecs.shape --> ??", "\n", "\n", "all_spans", "=", "{", "\n", "# 'span_vecs': span_vecs,", "\n", "# 'span_begin': span_begin,", "\n", "# 'span_end': span_end,", "\n", "# 'span_mask': span_mask", "\n", "'cand_span_vecs'", ":", "span_vecs", ",", "\n", "'cand_span_begin'", ":", "span_begin", ",", "\n", "'cand_span_end'", ":", "span_end", ",", "\n", "'cand_span_mask'", ":", "span_mask", ",", "\n", "'cand_width_idx'", ":", "candidate_width_idx", "\n", "}", "\n", "\n", "# gold_spans_tensors = metadata.get('gold_spans_tensors')", "\n", "obj_pruner", ",", "all_spans", ",", "filtered_spans", "=", "self", ".", "span_pruner", "(", "all_spans", ",", "\n", "token_lengths", ",", "\n", "metadata", ".", "get", "(", "'gold_spans_lengths'", ")", ",", "\n", "metadata", ".", "get", "(", "'gold_spans_tensors'", ")", ",", "\n", "doc_id", "=", "metadata", ".", "get", "(", "'identifiers'", ")", ",", "\n", "api_call", "=", "metadata", ".", "get", "(", "'api_call'", ")", ",", "\n", "max_span_length", "=", "self", ".", "max_span_length", ",", "\n", "emb_span_width_prior", "=", "self", ".", "span_extractor", ".", "embed", ",", "\n", "predict", "=", "not", "self", ".", "training", ")", "\n", "pred_spans", "=", "filtered_spans", "[", "'pruned_spans'", "]", "\n", "# gold_spans = metadata.get('gold_spans')", "\n", "gold_spans", "=", "filtered_spans", "[", "'gold_spans'", "]", "\n", "\n", "# in the original pred_spans:", "\n", "# in the original gold_spans:", "\n", "\n", "if", "self", ".", "debug_memory", ":", "\n", "            ", "print", "(", "\"(pruner)\"", ",", "torch", ".", "cuda", ".", "memory_allocated", "(", "0", ")", "/", "1024", "/", "1024", ")", "\n", "\n", "## spanprop (no extra labels)", "\n", "", "if", "self", ".", "span_prop", "is", "not", "None", ":", "\n", "            ", "all_spans", ",", "filtered_spans", "=", "self", ".", "span_prop", "(", "\n", "all_spans", ",", "\n", "filtered_spans", ",", "\n", "sequence_lengths", "\n", ")", "\n", "\n", "## coref", "\n", "", "if", "self", ".", "coref_task", ".", "enabled", ":", "\n", "            ", "coref_all", ",", "coref_filtered", ",", "coref_scores", "=", "self", ".", "coref_scorer", "(", "\n", "all_spans", ",", "\n", "filtered_spans", ",", "\n", "# sequence_lengths,", "\n", "metadata", ".", "get", "(", "'gold_spans_tensors'", ")", ",", "\n", "max_span_length", "=", "self", ".", "max_span_length", ",", "\n", "gold_spans_lengths", "=", "metadata", ".", "get", "(", "'gold_spans_lengths'", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "coref_scores", "=", "None", "\n", "\n", "", "if", "self", ".", "coref_linker_task", ".", "enabled", ":", "\n", "# kzaporoj - for now just like this, then can add different graph propagation for coref+linker configuration", "\n", "            ", "coref_all", ",", "coref_filtered", ",", "linker_coref_scores", "=", "self", ".", "coref_linker_scorer", "(", "\n", "all_spans", ",", "\n", "filtered_spans", ",", "\n", "sequence_lengths", ",", "\n", "linker", "=", "metadata", "[", "'linker'", "]", ")", "\n", "", "else", ":", "\n", "            ", "coref_all", "=", "all_spans", "\n", "coref_filtered", "=", "filtered_spans", "\n", "linker_coref_scores", "=", "None", "\n", "coref_targets", "=", "None", "\n", "\n", "", "if", "not", "self", ".", "rel_after_coref", ":", "\n", "            ", "coref_all", "=", "all_spans", "\n", "coref_filtered", "=", "filtered_spans", "\n", "\n", "", "if", "self", ".", "debug_memory", ":", "\n", "            ", "print", "(", "\"(coref) \"", ",", "torch", ".", "cuda", ".", "memory_allocated", "(", "0", ")", "/", "1024", "/", "1024", ")", "\n", "\n", "## relations", "\n", "# if self.relation_task.enabled:", "\n", "#     relation_all, relation_filtered, relation_scores = self.rel_scorer(", "\n", "#         coref_all,", "\n", "#         coref_filtered,", "\n", "#         sequence_lengths)", "\n", "#", "\n", "# else:", "\n", "#     relation_all = coref_all", "\n", "#     relation_filtered = coref_filtered", "\n", "#     relation_scores = None", "\n", "#     relation_targets = None", "\n", "\n", "", "if", "self", ".", "debug_memory", ":", "\n", "            ", "print", "(", "\"(rels)  \"", ",", "torch", ".", "cuda", ".", "memory_allocated", "(", "0", ")", "/", "1024", "/", "1024", ")", "\n", "\n", "# LOSS FUNCTIONS", "\n", "\n", "## ner", "\n", "# ner_obj, output['tags'] = self.ner_task(", "\n", "#     relation_all,", "\n", "#     sequence_lengths,", "\n", "#     metadata.get('gold_tags_indices'),", "\n", "#     api_call=metadata.get('api_call')", "\n", "# )", "\n", "#", "\n", "# ner_spans = [list(set([(begin, end - 1) for begin, end, _ in spans])) for spans in", "\n", "#              output['tags']['pred']]  # TODO: settle on include spans", "\n", "\n", "", "coref_obj", ",", "output", "[", "'coref'", "]", "=", "self", ".", "coref_task", "(", "\n", "coref_scores", ",", "\n", "gold_m2i", "=", "metadata", ".", "get", "(", "'gold_m2i'", ")", ",", "\n", "pred_spans", "=", "pred_spans", ",", "\n", "gold_spans", "=", "gold_spans", ",", "\n", "predict", "=", "not", "self", ".", "training", ",", "\n", "pruner_spans", "=", "coref_filtered", "[", "'enabled_spans'", "]", ",", "\n", "span_lengths", "=", "filtered_spans", "[", "'span_lengths'", "]", ",", "\n", "ner_spans", "=", "None", "\n", "# ner_spans=ner_spans", "\n", ")", "\n", "\n", "# \"atadura con alambre\" to be able to produce the matrix print for debugging with Johannes", "\n", "filtered_spans", "[", "'content'", "]", "=", "metadata", "[", "'content'", "]", "\n", "filtered_spans", "[", "'begin_token'", "]", "=", "metadata", "[", "'begin_token'", "]", "\n", "filtered_spans", "[", "'subtoken_map'", "]", "=", "metadata", "[", "'subtoken_map'", "]", "\n", "filtered_spans", "[", "'end_token'", "]", "=", "metadata", "[", "'end_token'", "]", "\n", "filtered_spans", "[", "'doc_id'", "]", "=", "metadata", "[", "'identifiers'", "]", "\n", "# filtered_spans['debug_path'] = config", "\n", "\n", "## linker+coref", "\n", "linker_coref_obj", ",", "output", "[", "'links'", "]", ",", "output_coref", "=", "self", ".", "coref_linker_task", "(", "\n", "scores", "=", "linker_coref_scores", ",", "\n", "gold_m2i", "=", "metadata", ".", "get", "(", "'gold_m2i'", ")", ",", "\n", "filtered_spans", "=", "filtered_spans", ",", "\n", "gold_spans", "=", "gold_spans", ",", "\n", "linker", "=", "metadata", "[", "'linker'", "]", ",", "\n", "# predict=True,", "\n", "predict", "=", "not", "self", ".", "training", ",", "\n", "pruner_spans", "=", "coref_filtered", "[", "'enabled_spans'", "]", ",", "\n", "# ner_spans=ner_spans,", "\n", "ner_spans", "=", "None", ",", "\n", "api_call", "=", "metadata", ".", "get", "(", "'api_call'", ")", ",", "\n", "only_loss", "=", "only_loss", "\n", ")", "# TODO: candidate links", "\n", "\n", "# if not self.coref_task.enabled:", "\n", "if", "self", ".", "coref_linker_task", ".", "enabled", ":", "\n", "# if the coreflinker task is enabled, then overrides the corefs with the ones calculated by coreflinker", "\n", "            ", "output", "[", "'coref'", "]", "=", "output_coref", "\n", "\n", "## relations", "\n", "# rel_obj, output['rels'] = self.relation_task(", "\n", "#     relation_filtered,", "\n", "#     relation_scores,", "\n", "#     relations,", "\n", "#     output['coref'],", "\n", "#     predict=not self.training", "\n", "# )", "\n", "\n", "## linker", "\n", "", "if", "self", ".", "linker_task", ".", "enabled", ":", "\n", "            ", "linker_obj", ",", "output_links", ",", "output", "[", "'coref'", "]", "=", "self", ".", "linker_task", "(", "\n", "# relation_all,", "\n", "coref_all", ",", "\n", "metadata", "[", "'linker'", "]", ",", "\n", "filtered_spans", ",", "\n", "gold_m2i", "=", "metadata", ".", "get", "(", "'gold_m2i'", ")", ",", "\n", "gold_spans", "=", "gold_spans", ",", "\n", "coref_pred", "=", "output", "[", "'coref'", "]", "if", "\n", "(", "self", ".", "coref_task", ".", "enabled", "and", "not", "self", ".", "training", "and", "not", "only_loss", ")", "else", "None", ",", "\n", "predict", "=", "not", "self", ".", "training", ",", "\n", "only_loss", "=", "only_loss", "\n", ")", "\n", "output", "[", "'links'", "]", "=", "output_links", "\n", "\n", "# if not self.coref_task.enabled:", "\n", "#     # if the coref task is not enabled, then takes the coreference given by linking (mentions pointing", "\n", "#     # to the same link are considered clustered).", "\n", "#     output['coref'] = tmp_out_coref", "\n", "", "else", ":", "\n", "            ", "linker_obj", ",", "_", "=", "self", ".", "linker_task", "(", "\n", "coref_all", ",", "\n", "# relation_all,", "\n", "metadata", "[", "'linker'", "]", "\n", ")", "\n", "\n", "", "for", "m", "in", "metrics", ":", "\n", "            ", "if", "m", ".", "task", "in", "output", ":", "\n", "                ", "m", ".", "update2", "(", "output", "[", "m", ".", "task", "]", ",", "metadata", ")", "\n", "\n", "", "", "if", "self", ".", "debug_memory", ":", "\n", "            ", "print", "(", "\"(loss)  \"", ",", "torch", ".", "cuda", ".", "memory_allocated", "(", "0", ")", "/", "1024", "/", "1024", ")", "\n", "\n", "# return obj_pruner + coref_obj + ner_obj + rel_obj + linker_obj + linker_coref_obj, output", "\n", "", "return", "obj_pruner", "+", "coref_obj", "+", "linker_obj", "+", "linker_coref_obj", ",", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.predict": [[730, 733], ["coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.forward", "coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.decode"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.relbasic.ModuleRelBasic.forward", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.decode"], ["", "def", "predict", "(", "self", ",", "inputs", ",", "metadata", ",", "metrics", "=", "[", "]", ",", "output_config", "=", "None", ")", ":", "\n", "        ", "loss", ",", "output", "=", "self", ".", "forward", "(", "inputs", ",", "metadata", ",", "metrics", ")", "\n", "return", "loss", ",", "self", ".", "decode", "(", "metadata", ",", "output", ",", "output_config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.create_metrics": [[734, 737], ["coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.coref_linker_task.create_metrics", "coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.coref_task.create_metrics", "coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.linker_task.create_metrics"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.create_metrics", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.create_metrics", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.create_metrics"], ["", "def", "create_metrics", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "coref_task", ".", "create_metrics", "(", ")", "+", "self", ".", "linker_task", ".", "create_metrics", "(", ")", "+", "self", ".", "coref_linker_task", ".", "create_metrics", "(", ")", "\n", "# self.ner_task.create_metrics() + \\", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.write_model": [[741, 751], ["print", "coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.state_dict().items", "torch.save", "torch.save", "torch.save", "torch.save", "k.startswith", "coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.state_dict", "print"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "write_model", "(", "self", ",", "filename", ")", ":", "\n", "        ", "print", "(", "\"write model:\"", ",", "filename", ")", "\n", "mydict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "self", ".", "state_dict", "(", ")", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", ".", "startswith", "(", "'word_embeddings'", ")", ":", "\n", "                ", "print", "(", "\"skip:\"", ",", "k", ")", "\n", "continue", "\n", "", "else", ":", "\n", "                ", "mydict", "[", "k", "]", "=", "v", "\n", "", "", "torch", ".", "save", "(", "mydict", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.load_model": [[752, 773], ["print", "coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.state_dict", "coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.update", "coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load.keys", "torch.load.keys", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "keys_to_remove.append", "keys_to_remove.append"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.update"], ["", "def", "load_model", "(", "self", ",", "filename", ",", "to_cpu", "=", "False", ",", "load_word_embeddings", "=", "True", ")", ":", "\n", "        ", "print", "(", "'to_cpu IN LOAD_MODEL: '", ",", "to_cpu", ")", "\n", "if", "to_cpu", ":", "\n", "            ", "partial", "=", "torch", ".", "load", "(", "filename", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "", "else", ":", "\n", "# partial = torch.load(filename)", "\n", "            ", "partial", "=", "torch", ".", "load", "(", "filename", ",", "map_location", "=", "torch", ".", "device", "(", "settings", ".", "device", ")", ")", "\n", "\n", "", "if", "not", "load_word_embeddings", ":", "\n", "            ", "keys_to_remove", "=", "[", "]", "\n", "for", "curr_key", "in", "partial", ".", "keys", "(", ")", ":", "\n", "                ", "if", "'embedder.word_embedder'", "in", "curr_key", ":", "\n", "                    ", "keys_to_remove", ".", "append", "(", "curr_key", ")", "\n", "", "if", "'entity_embedder.embed.weight'", "in", "curr_key", ":", "\n", "                    ", "keys_to_remove", ".", "append", "(", "curr_key", ")", "\n", "", "", "for", "curr_key", "in", "keys_to_remove", ":", "\n", "                ", "del", "partial", "[", "curr_key", "]", "\n", "# update because word_embed is missing", "\n", "", "", "state", "=", "self", ".", "state_dict", "(", ")", "\n", "state", ".", "update", "(", "partial", ")", "\n", "self", ".", "load_state_dict", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.pass_from_subtokens_to_tokens": [[774, 858], ["zip", "dict", "coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.pass_from_subtokens_to_tokens.get_coref_pointer"], "methods", ["None"], ["", "def", "pass_from_subtokens_to_tokens", "(", "self", ",", "outputs", ",", "subtoken_to_token_map", ")", ":", "\n", "# TODO! not only pass from BERT subtokens to tokens, but also de-duplicate (ex: delete duplicate spans in", "\n", "#  clusters). This can happen because two different BERT subtokens can map to the same token.", "\n", "        ", "new_coref", "=", "[", "]", "\n", "new_coref_pointers", "=", "[", "]", "\n", "new_coref_scores", "=", "[", "]", "\n", "new_links_scores", "=", "[", "]", "\n", "new_links_pred", "=", "[", "]", "\n", "new_links_gold", "=", "[", "]", "\n", "\n", "def", "get_coref_pointer", "(", "coref_connection_pointer", ",", "coref_connection_type", ",", "t_map", ":", "Dict", ")", ":", "\n", "            ", "if", "coref_connection_pointer", "is", "None", ":", "\n", "                ", "return", "None", "\n", "\n", "", "if", "coref_connection_type", "!=", "'link'", ":", "\n", "                ", "return", "t_map", "[", "coref_connection_pointer", "[", "0", "]", "]", ",", "t_map", "[", "coref_connection_pointer", "[", "1", "]", "]", "\n", "", "else", ":", "\n", "# should be string (i.e., the entity link)", "\n", "                ", "assert", "isinstance", "(", "coref_connection_pointer", ",", "str", ")", "\n", "return", "coref_connection_pointer", "\n", "\n", "", "", "def", "get_coref_pointer_dict_entry", "(", "span", ",", "v", ",", "t_map", ":", "Dict", ")", ":", "\n", "            ", "to_ret", "=", "dict", "(", ")", "\n", "to_ret", "[", "'coref_connection_type'", "]", "=", "v", "[", "'coref_connection_type'", "]", "\n", "to_ret", "[", "'coref_connection_pointer'", "]", "=", "get_coref_pointer", "(", "v", "[", "'coref_connection_pointer'", "]", ",", "\n", "v", "[", "'coref_connection_type'", "]", ",", "t_map", ")", "\n", "# (t_map[v['coref_connection_pointer'][0]],", "\n", "#  t_map[v['coref_connection_pointer'][1]])", "\n", "# if v['coref_connection_pointer'] is not None else None,", "\n", "if", "'coref_connection_score'", "in", "v", ":", "\n", "                ", "to_ret", "[", "'coref_connection_score'", "]", "=", "v", "[", "'coref_connection_score'", "]", "\n", "\n", "# }", "\n", "", "return", "to_ret", "\n", "\n", "", "for", "coref", ",", "coref_pointers", ",", "coref_scores", ",", "links_scores", ",", "links_gold", ",", "links_pred", ",", "t_map", "in", "zip", "(", "outputs", "[", "'coref'", "]", "[", "'pred'", "]", ",", "outputs", "[", "'coref'", "]", "[", "'pred_pointers'", "]", ",", "outputs", "[", "'coref'", "]", "[", "'scores'", "]", ",", "\n", "outputs", "[", "'links'", "]", "[", "'scores'", "]", ",", "outputs", "[", "'links'", "]", "[", "'gold'", "]", ",", "outputs", "[", "'links'", "]", "[", "'pred'", "]", ",", "\n", "subtoken_to_token_map", ")", ":", "\n", "#####", "\n", "# print('an iteration over pass_from_subtokens_to_tokens')", "\n", "            ", "tok_coref", "=", "[", "[", "(", "t_map", "[", "span", "[", "0", "]", "]", ",", "t_map", "[", "span", "[", "1", "]", "]", ")", "for", "span", "in", "cluster", "]", "for", "cluster", "in", "coref", "]", "\n", "new_coref", ".", "append", "(", "tok_coref", ")", "\n", "if", "coref_pointers", "is", "not", "None", ":", "\n", "                ", "tok_coref_pointers", "=", "{", "(", "t_map", "[", "span", "[", "0", "]", "]", ",", "t_map", "[", "span", "[", "1", "]", "]", ")", ":", "\n", "get_coref_pointer_dict_entry", "(", "span", ",", "v", ",", "t_map", ")", "\n", "# {'coref_connection_type': v['coref_connection_type'],", "\n", "#  'coref_connection_pointer':", "\n", "#      get_coref_pointer(v['coref_connection_pointer'], v['coref_connection_type'],", "\n", "#                        t_map),", "\n", "#  'coref_connection_score': v['coref_connection_score']", "\n", "#  }", "\n", "for", "span", ",", "v", "in", "\n", "coref_pointers", ".", "items", "(", ")", "}", "\n", "", "else", ":", "\n", "                ", "tok_coref_pointers", "=", "dict", "(", ")", "\n", "", "new_coref_pointers", ".", "append", "(", "tok_coref_pointers", ")", "\n", "\n", "if", "coref_scores", "is", "not", "None", ":", "\n", "                ", "tok_coref_scores", "=", "{", "(", "t_map", "[", "span", "[", "0", "]", "]", ",", "t_map", "[", "span", "[", "1", "]", "]", ")", ":", "[", "{", "'span'", ":", "(", "t_map", "[", "v", "[", "'span'", "]", "[", "0", "]", "]", ",", "t_map", "[", "v", "[", "'span'", "]", "[", "1", "]", "]", ")", ",", "\n", "'score'", ":", "v", "[", "'score'", "]", "}", "\n", "for", "v", "in", "values", "]", "for", "span", ",", "values", "in", "\n", "coref_scores", ".", "items", "(", ")", "}", "\n", "", "else", ":", "\n", "                ", "tok_coref_scores", "=", "dict", "(", ")", "\n", "", "new_coref_scores", ".", "append", "(", "tok_coref_scores", ")", "\n", "\n", "tok_links_scores", "=", "[", "(", "(", "t_map", "[", "span", "[", "0", "]", "]", ",", "t_map", "[", "span", "[", "1", "]", "]", ")", ",", "links", ",", "scores", ")", "for", "span", ",", "links", ",", "scores", "in", "\n", "links_scores", "]", "\n", "new_links_scores", ".", "append", "(", "tok_links_scores", ")", "\n", "\n", "tok_links_pred", "=", "[", "(", "t_map", "[", "link_pred", "[", "0", "]", "]", ",", "t_map", "[", "link_pred", "[", "1", "]", "]", ",", "link_pred", "[", "2", "]", ")", "for", "link_pred", "in", "links_pred", "]", "\n", "new_links_pred", ".", "append", "(", "tok_links_pred", ")", "\n", "\n", "tok_links_gold", "=", "[", "(", "t_map", "[", "link_gold", "[", "0", "]", "]", ",", "t_map", "[", "link_gold", "[", "1", "]", "]", ",", "link_gold", "[", "2", "]", ")", "for", "link_gold", "in", "links_gold", "]", "\n", "new_links_gold", ".", "append", "(", "tok_links_gold", ")", "\n", "\n", "", "outputs", "[", "'coref'", "]", "[", "'pred'", "]", "=", "new_coref", "\n", "outputs", "[", "'coref'", "]", "[", "'pred_pointers'", "]", "=", "new_coref_pointers", "\n", "outputs", "[", "'coref'", "]", "[", "'scores'", "]", "=", "new_coref_scores", "\n", "outputs", "[", "'links'", "]", "[", "'scores'", "]", "=", "new_links_scores", "\n", "outputs", "[", "'links'", "]", "[", "'gold'", "]", "=", "new_links_gold", "\n", "outputs", "[", "'links'", "]", "[", "'pred'", "]", "=", "new_links_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.decode": [[867, 893], ["coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.pass_from_subtokens_to_tokens", "zip", "predictions.append", "cpn.builder.convert_to_json"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.CoreflinkerSpanBertHoi.pass_from_subtokens_to_tokens", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.cpn.builder.convert_to_json"], ["", "def", "decode", "(", "self", ",", "metadata", ",", "outputs", ",", "output_config", ",", "api_call", "=", "False", ")", ":", "\n", "        ", "subtoken_to_token_map", "=", "metadata", "[", "'subtoken_map'", "]", "\n", "self", ".", "pass_from_subtokens_to_tokens", "(", "outputs", ",", "subtoken_to_token_map", ")", "\n", "\n", "predictions", "=", "[", "]", "\n", "\n", "links_gold_batch", "=", "outputs", "[", "'links'", "]", "[", "'gold'", "]", "\n", "identifiers", "=", "metadata", "[", "'identifiers'", "]", "\n", "tags_batch", "=", "metadata", "[", "'tags'", "]", "\n", "\n", "idx", "=", "0", "\n", "for", "identifier", ",", "tags", ",", "content", ",", "begin_token", ",", "end_token", ",", "coref", ",", "coref_pointers", ",", "coref_scores", ",", "links_scores", ",", "links_gold", ",", "links_pred", "in", "zip", "(", "\n", "identifiers", ",", "tags_batch", ",", "metadata", "[", "'content'", "]", ",", "metadata", "[", "'begin_token'", "]", ",", "metadata", "[", "'end_token'", "]", ",", "\n", "outputs", "[", "'coref'", "]", "[", "'pred'", "]", ",", "outputs", "[", "'coref'", "]", "[", "'pred_pointers'", "]", ",", "\n", "outputs", "[", "'coref'", "]", "[", "'scores'", "]", ",", "\n", "outputs", "[", "'links'", "]", "[", "'scores'", "]", ",", "links_gold_batch", ",", "outputs", "[", "'links'", "]", "[", "'pred'", "]", ")", ":", "\n", "####", "\n", "            ", "predictions", ".", "append", "(", "\n", "convert_to_json", "(", "identifier", ",", "tags", ",", "content", ",", "begin_token", ",", "end_token", ",", "[", "]", ",", "coref", ",", "\n", "coref_pointers", ",", "coref_scores", ",", "[", "]", ",", "\n", "[", "]", ",", "links_scores", ",", "links_gold", ",", "links_pred", ",", "\n", "singletons", "=", "self", ".", "coref_task", ".", "singletons", ",", "output_config", "=", "output_config", ")", ")", "\n", "idx", "+=", "1", "\n", "\n", "", "return", "predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.collate_dygie_spanbert": [[48, 168], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.cat().T.unsqueeze", "torch.cat().T.unsqueeze", "torch.cat().T.unsqueeze.to", "[].unsqueeze().to", "len", "x[].sum().item", "modules.tasks.linker.collate_candidates_in_pytorch", "modules.tasks.linker.collate_targets", "x[].to", "x[].to", "[].unsqueeze", "candidates.size", "x[].sum", "torch.cat", "torch.cat", "model.entity_dictionary.lookup", "gold_subtokens_start.unsqueeze", "gold_subtokens_end.unsqueeze"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.linker.collate_candidates_in_pytorch", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tasks.linker.collate_targets", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup"], ["def", "collate_dygie_spanbert", "(", "model", ",", "batch", ",", "device", ",", "collate_api", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n\n    :param model:\n    :param batch:\n    :param device:\n    :param collate_api: if in True, means that the input comes from a client, possibly as a free text\n    (i.e., no gold mentions, relations, concepts, spans, etc.). If in False (default), the input comes for training\n    or evaluating using internal function located in traintool.train for instance.\n    :return:\n    \"\"\"", "\n", "assert", "len", "(", "batch", ")", "==", "1", "# module for only batch size 1", "\n", "sequence_lengths", "=", "[", "x", "[", "'bert_segs_mask'", "]", ".", "sum", "(", ")", ".", "item", "(", ")", "for", "x", "in", "batch", "]", "\n", "sequence_lengths", "=", "torch", ".", "tensor", "(", "sequence_lengths", ",", "dtype", "=", "torch", ".", "int", ",", "device", "=", "settings", ".", "device", ")", "\n", "\n", "tokens_lengths", "=", "torch", ".", "tensor", "(", "[", "x", "[", "'token_length'", "]", "for", "x", "in", "batch", "]", ",", "dtype", "=", "torch", ".", "int", ",", "device", "=", "settings", ".", "device", ")", "\n", "inputs", "=", "{", "\n", "'bert_segments'", ":", "[", "x", "[", "'bert_segments'", "]", ".", "to", "(", "device", "=", "settings", ".", "device", ")", "for", "x", "in", "batch", "]", ",", "\n", "'bert_segments_mask'", ":", "[", "x", "[", "'bert_segs_mask'", "]", ".", "to", "(", "device", "=", "settings", ".", "device", ")", "for", "x", "in", "batch", "]", ",", "\n", "'sequence_lengths'", ":", "sequence_lengths", ",", "\n", "'token_lengths'", ":", "tokens_lengths", "\n", "# 'characters': characters.to(device) if characters is not None else None,", "\n", "# 'sequence_lengths': sequence_lengths.to(device),", "\n", "# 'token_indices': indices.to(device),", "\n", "# 'text': [b['xxx']['text'] for b in batch]", "\n", "}", "\n", "\n", "# gold_spans = [[(m[0], m[1]) for m in x['spans']] for x in batch]", "\n", "\n", "# if not collate_api:", "\n", "# if 'gold_clusters' in batch[0]:", "\n", "#     gold_clusters = [x['gold_clusters'] for x in batch]", "\n", "# else:", "\n", "#     # TODO: move to cpn utility .py (or remove)", "\n", "#     gold_clusters = []", "\n", "#     for spans, m2c in zip(gold_spans, [x['mention2concept'] for x in batch]):", "\n", "#         clusters = [list() for _ in range(m2c[0])]", "\n", "#         for mention, concept in zip(m2c[3], m2c[2]):", "\n", "#             clusters[concept].append(spans[mention])", "\n", "#         gold_clusters.append(clusters)", "\n", "# end if not collate_api:", "\n", "\n", "metadata", "=", "{", "\n", "# 'tokens': [x['xxx']['text'] for x in batch],", "\n", "'content'", ":", "[", "x", "[", "'content'", "]", "for", "x", "in", "batch", "]", ",", "\n", "# 'begin': [[] for _ in batch],", "\n", "# 'end': [[] for _ in batch]", "\n", "'begin_token'", ":", "[", "x", "[", "'begin_token'", "]", "for", "x", "in", "batch", "]", ",", "\n", "'end_token'", ":", "[", "x", "[", "'end_token'", "]", "for", "x", "in", "batch", "]", ",", "\n", "'subtoken_map'", ":", "[", "x", "[", "'subtoken_map'", "]", "for", "x", "in", "batch", "]", ",", "\n", "'sentence_map'", ":", "[", "x", "[", "'sentence_map'", "]", "for", "x", "in", "batch", "]", ",", "\n", "}", "\n", "\n", "# if not collate_api:", "\n", "metadata", "[", "'identifiers'", "]", "=", "[", "x", "[", "'id'", "]", "for", "x", "in", "batch", "]", "\n", "metadata", "[", "'tags'", "]", "=", "[", "x", "[", "'metadata_tags'", "]", "for", "x", "in", "batch", "]", "\n", "# end if not collate_api:", "\n", "\n", "# relations = None", "\n", "# if not collate_api:", "\n", "# metadata['gold_tags_indices'] = [x['gold_tags_indices'] for x in batch]", "\n", "# metadata['all_spans']", "\n", "\n", "# metadata['gold_spans'] = gold_spans", "\n", "\n", "# metadata['gold_spans_lengths'] = (torch.LongTensor([len(curr_spans) for curr_spans in gold_spans])).to(", "\n", "#     device=settings.device)", "\n", "metadata", "[", "'gold_m2i'", "]", "=", "[", "x", "[", "'clusters'", "]", "for", "x", "in", "batch", "]", "\n", "\n", "# relations = {", "\n", "#     # 'gold_spans': gold_spans,", "\n", "#     'gold_m2i': [x['clusters'] for x in batch],", "\n", "#     'gold_clusters2': gold_clusters", "\n", "# }", "\n", "#", "\n", "# if 'relations' in batch[0]:", "\n", "#     # old: remove the dimension", "\n", "#     relations['gold_relations'] = [x['relations'][1] for x in batch]", "\n", "#     relations['num_concepts'] = [x['relations'][0][0] for x in batch]", "\n", "# else:", "\n", "#     relations['gold_relations'] = [x['relations2'] for x in batch]", "\n", "#     relations['num_concepts'] = [x['num_concepts'] for x in batch]", "\n", "# gold_spans = None", "\n", "# spans_tensors = collate_spans(gold_spans)", "\n", "# spans_tensors = None", "\n", "gold_subtokens_start", "=", "batch", "[", "0", "]", "[", "'gold_subtokens_start'", "]", "\n", "gold_subtokens_end", "=", "batch", "[", "0", "]", "[", "'gold_subtokens_end'", "]", "\n", "spans_tensors", "=", "torch", ".", "cat", "(", "[", "gold_subtokens_start", ".", "unsqueeze", "(", "0", ")", ",", "gold_subtokens_end", ".", "unsqueeze", "(", "0", ")", "]", ")", ".", "T", ".", "unsqueeze", "(", "0", ")", "\n", "# spans_tensors = spans_tensors.to(device-settings.device)", "\n", "metadata", "[", "'gold_spans_tensors'", "]", "=", "spans_tensors", ".", "to", "(", "device", "=", "settings", ".", "device", ")", "\n", "\n", "linker", "=", "{", "}", "\n", "# linker['all_spans'] = [[(m[0], m[1]) for m in x['all_spans']] for x in batch]", "\n", "linker", "[", "'all_spans_tensor'", "]", "=", "batch", "[", "0", "]", "[", "'all_spans_tensor'", "]", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", "=", "settings", ".", "device", ")", "\n", "if", "(", "model", ".", "linker_task", ".", "enabled", "or", "model", ".", "coref_linker_task", ".", "enabled", ")", "and", "'linker_candidates'", "in", "batch", "[", "0", "]", ":", "\n", "# or model.coref_linker_mtt_task.enabled)", "\n", "        ", "candidates", ",", "candidate_lengths", "=", "collate_candidates_in_pytorch", "(", "[", "x", "[", "'linker_candidates'", "]", "for", "x", "in", "batch", "]", ",", "\n", "unknown_id", "=", "model", ".", "entity_dictionary", ".", "lookup", "(", "\n", "'###UNKNOWN###'", ")", ")", "\n", "linker", "[", "'candidates'", "]", "=", "candidates", "\n", "linker", "[", "'candidate_lengths'", "]", "=", "candidate_lengths", "\n", "linker", "[", "'targets'", "]", "=", "collate_targets", "(", "[", "x", "[", "'linker_targets'", "]", "for", "x", "in", "batch", "]", ",", "candidates", ".", "size", "(", "2", ")", ")", "\n", "\n", "# the spans to which the candidates are assigned in linker", "\n", "\n", "# linker['total_cand_lengths_in_gold_mentions'] = \\", "\n", "#     collate_tot_cand_lengths([torch.tensor(x['total_cand_lengths_in_gold_mentions'], dtype=torch.int32)", "\n", "#                               for x in batch])", "\n", "\n", "linker", "[", "'gold'", "]", "=", "[", "x", "[", "'linker_gold'", "]", "for", "x", "in", "batch", "]", "\n", "\n", "# end if not collate_api:", "\n", "\n", "", "metadata", "[", "'linker'", "]", "=", "linker", "\n", "metadata", "[", "'api_call'", "]", "=", "collate_api", "\n", "\n", "return", "{", "\n", "'inputs'", ":", "inputs", ",", "\n", "# 'relations': relations,", "\n", "'metadata'", ":", "metadata", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.create_spanprop_hoi": [[171, 183], ["models.coreflinker.attprop.ModuleAttentionPropHoi", "BaseException"], "function", ["None"], ["", "def", "create_spanprop_hoi", "(", "model", ",", "config", ")", ":", "\n", "    ", "if", "'spanprop'", "in", "config", ":", "\n", "        ", "sp_type", "=", "config", "[", "'spanprop'", "]", "[", "'type'", "]", "\n", "\n", "if", "sp_type", "==", "'attprop'", ":", "\n", "            ", "return", "ModuleAttentionPropHoi", "(", "model", ".", "span_extractor", ".", "dim_output", ",", "\n", "# model.span_pruner.scorer,", "\n", "model", ".", "span_pair_generator", ",", "config", "[", "'spanprop'", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "BaseException", "(", "\"no such spanprop:\"", ",", "sp_type", ")", "\n", "", "", "else", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.create_corefprop": [[185, 204], ["models.coreflinker.corefbasic.ModuleCorefBasic", "models.coreflinker.corefprop.ModuleCorefProp", "models.coreflinker.corefprop2.ModuleCorefProp2", "models.coreflinker.attention.ModulePlainAttention", "BaseException"], "function", ["None"], ["", "", "def", "create_corefprop", "(", "model", ",", "config", ")", ":", "\n", "    ", "cp_type", "=", "config", "[", "'corefprop'", "]", "[", "'type'", "]", "\n", "\n", "if", "cp_type", "==", "'none'", ":", "\n", "        ", "return", "None", "\n", "", "elif", "cp_type", "==", "'basic'", ":", "\n", "        ", "return", "ModuleCorefBasic", "(", "model", ".", "span_extractor", ".", "dim_output", ",", "model", ".", "span_pruner", ".", "scorer", ",", "model", ".", "span_pair_generator", ",", "\n", "config", "[", "'corefprop'", "]", ")", "\n", "", "elif", "cp_type", "==", "'default'", ":", "\n", "        ", "return", "ModuleCorefProp", "(", "model", ".", "span_extractor", ".", "dim_output", ",", "model", ".", "span_pruner", ".", "scorer", ",", "model", ".", "span_pair_generator", ",", "\n", "config", ")", "\n", "", "elif", "cp_type", "==", "'corefprop2'", ":", "\n", "        ", "return", "ModuleCorefProp2", "(", "model", ".", "span_extractor", ".", "dim_output", ",", "model", ".", "span_pruner", ".", "scorer", ",", "model", ".", "span_pair_generator", ",", "\n", "config", "[", "'corefprop'", "]", ")", "\n", "", "elif", "cp_type", "==", "'attention'", ":", "\n", "        ", "return", "ModulePlainAttention", "(", "model", ".", "span_extractor", ".", "dim_output", ",", "1", ",", "model", ".", "span_pair_generator", ",", "config", "[", "'relprop'", "]", ",", "\n", "squeeze", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "raise", "BaseException", "(", "\"no such corefprop:\"", ",", "cp_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.create_coreflinker_prop": [[206, 249], ["models.coreflinker.coreflinker_prop.ModuleCorefLinkerDisabled", "BaseException", "RuntimeError", "models.coreflinker.coreflinker_prop_hoi.ModuleCorefLinkerPropE2EHoi", "models.coreflinker.coreflinker_mtt_prop_hoi.ModuleCorefLinkerMTTPropE2EHoi", "RuntimeError"], "function", ["None"], ["", "", "def", "create_coreflinker_prop", "(", "model", ",", "config", ",", "dictionaries", ")", ":", "\n", "    ", "if", "'coreflinker'", "not", "in", "config", "or", "not", "config", "[", "'coreflinker'", "]", "[", "'enabled'", "]", ":", "\n", "        ", "return", "ModuleCorefLinkerDisabled", "(", ")", "\n", "\n", "", "cp_type", "=", "config", "[", "'coreflinker'", "]", "[", "'coreflinker_prop'", "]", "[", "'type'", "]", "\n", "\n", "if", "cp_type", "==", "'none'", ":", "\n", "        ", "return", "None", "\n", "", "elif", "cp_type", "==", "'default'", ":", "\n", "        ", "coreflinker_type", "=", "config", "[", "'coreflinker'", "]", "[", "'type'", "]", "\n", "if", "model", ".", "end_to_end_mentions", ":", "\n", "            ", "if", "coreflinker_type", "==", "'coreflinker'", ":", "\n", "# return ModuleCorefLinkerPropE2E(model.span_extractor.dim_output,", "\n", "                ", "return", "ModuleCorefLinkerPropE2EHoi", "(", "model", ".", "span_extractor", ".", "dim_output", ",", "\n", "model", ".", "span_pruner", ".", "scorer", ",", "\n", "model", ".", "span_pair_generator", ",", "config", "[", "'coreflinker'", "]", ",", "dictionaries", ")", "\n", "", "elif", "coreflinker_type", "==", "'coreflinker_mtt'", ":", "\n", "                ", "return", "ModuleCorefLinkerMTTPropE2EHoi", "(", "model", ".", "span_extractor", ".", "dim_output", ",", "\n", "model", ".", "span_pruner", ".", "scorer", ",", "\n", "model", ".", "span_pair_generator", ",", "config", "[", "'coreflinker'", "]", ",", "dictionaries", ")", "\n", "", "else", ":", "\n", "                ", "raise", "RuntimeError", "(", "'coreflinker_spanbert_hoi does not recognize the following coreflinker type: '", "+", "\n", "coreflinker_type", ")", "\n", "# elif coreflinker_type == 'coreflinker_esm':", "\n", "#     return ModuleCorefLinkerPropE2E(model.span_extractor.dim_output,", "\n", "#                                     model.span_pruner.scorer,", "\n", "#                                     model.span_pair_generator, config['coreflinker'], dictionaries)", "\n", "", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "'coreflinker_spanbert_hoi is not implemented to run in NOT end-to-end mode'", ")", "\n", "# if coreflinker_type == 'coreflinker':", "\n", "#     return ModuleLinkerCorefProp(model.span_extractor.dim_output,", "\n", "#                                  model.span_pruner.scorer,", "\n", "#                                  model.span_pair_generator, config['coreflinker'], dictionaries)", "\n", "# elif coreflinker_type == 'coreflinker_mtt':", "\n", "#     return ModuleCorefLinkerMTTPropE2E(model.span_extractor.dim_output,", "\n", "#                                        model.span_pruner.scorer,", "\n", "#                                        model.span_pair_generator, config['coreflinker'], dictionaries)", "\n", "# elif coreflinker_type == 'coreflinker_esm':", "\n", "#     return ModuleLinkerCorefProp(model.span_extractor.dim_output,", "\n", "#                                  model.span_pruner.scorer,", "\n", "#                                  model.span_pair_generator, config['coreflinker'], dictionaries)", "\n", "", "", "else", ":", "\n", "        ", "raise", "BaseException", "(", "\"no such linkercoref prop:\"", ",", "cp_type", ")", "\n", "# raise BaseException(\"no such coreflinker found (in coreflinker_prop):\", config['coreflinker'])", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.create_coreflinker_loss": [[252, 266], ["modules.tasks.coreflinker.CorefLinkerLossDisabled", "modules.tasks.coreflinker_hoi.CorefLinkerLossHoi", "modules.tasks.coreflinker_mtt_hoi.LossCorefLinkerMTTHoi", "modules.tasks.coreflinker_edmonds_softmax.LossCorefLinkerESM"], "function", ["None"], ["", "", "def", "create_coreflinker_loss", "(", "model", ",", "config", ")", ":", "\n", "    ", "if", "model", ".", "coref_linker_scorer", ".", "enabled", ":", "\n", "        ", "coreflinker_type", "=", "config", "[", "'coreflinker'", "]", "[", "'type'", "]", "\n", "if", "coreflinker_type", "==", "'coreflinker'", ":", "\n", "            ", "return", "CorefLinkerLossHoi", "(", "'links'", ",", "'coref'", ",", "model", ".", "coref_linker_scorer", ".", "entity_embedder", ".", "dictionary", ",", "\n", "config", "[", "'coreflinker'", "]", ",", "model", ".", "end_to_end_mentions", ")", "\n", "", "elif", "coreflinker_type", "==", "'coreflinker_mtt'", ":", "\n", "            ", "return", "LossCorefLinkerMTTHoi", "(", "'links'", ",", "'coref'", ",", "model", ".", "coref_linker_scorer", ".", "entity_embedder", ".", "dictionary", ",", "\n", "config", "[", "'coreflinker'", "]", ",", "model", ".", "end_to_end_mentions", ")", "\n", "", "elif", "coreflinker_type", "==", "'coreflinker_esm'", ":", "\n", "            ", "return", "LossCorefLinkerESM", "(", "'links'", ",", "'coref'", ",", "model", ".", "coref_linker_scorer", ".", "entity_embedder", ".", "dictionary", ",", "\n", "config", "[", "'coreflinker'", "]", ",", "model", ".", "end_to_end_mentions", ")", "\n", "", "", "else", ":", "\n", "        ", "return", "CorefLinkerLossDisabled", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_spanbert_hoi.create_relprop": [[270, 297], ["models.coreflinker.relbasic.ModuleRelBasic", "models.coreflinker.relprop.ModuleRelProp", "models.coreflinker.relprop.ModuleRelPropX", "models.coreflinker.relsimple.ModuleRelSimple", "models.coreflinker.relprop1.ModuleRelProp1", "models.coreflinker.relprop2.ModuleRelProp2", "models.coreflinker.attention.ModulePlainAttention", "BaseException", "len"], "function", ["None"], ["", "", "def", "create_relprop", "(", "model", ",", "config", ")", ":", "\n", "    ", "rp_type", "=", "config", "[", "'relprop'", "]", "[", "'type'", "]", "\n", "\n", "if", "rp_type", "==", "'none'", ":", "\n", "        ", "return", "None", "\n", "", "elif", "rp_type", "==", "'basic'", ":", "\n", "        ", "return", "ModuleRelBasic", "(", "model", ".", "span_extractor", ".", "dim_output", ",", "model", ".", "span_pair_generator", ",", "model", ".", "relation_labels", ",", "\n", "config", "[", "'relprop'", "]", ")", "\n", "", "elif", "rp_type", "==", "'default'", ":", "\n", "        ", "return", "ModuleRelProp", "(", "model", ".", "span_extractor", ".", "dim_output", ",", "model", ".", "span_pair_generator", ",", "model", ".", "relation_labels", ",", "\n", "config", "[", "'relprop'", "]", ")", "\n", "", "elif", "rp_type", "==", "'default-x'", ":", "\n", "        ", "return", "ModuleRelPropX", "(", "model", ".", "span_extractor", ".", "dim_output", ",", "model", ".", "span_pair_generator", ",", "model", ".", "relation_labels", ",", "\n", "config", "[", "'relprop'", "]", ")", "\n", "", "elif", "rp_type", "==", "'simple'", ":", "\n", "        ", "return", "ModuleRelSimple", "(", "model", ".", "span_extractor", ".", "dim_output", ",", "model", ".", "relation_labels", ",", "config", "[", "'relprop'", "]", ")", "\n", "", "elif", "rp_type", "==", "'relprop1'", ":", "\n", "        ", "return", "ModuleRelProp1", "(", "model", ".", "span_extractor", ".", "dim_output", ",", "model", ".", "span_pruner", ",", "model", ".", "span_pair_generator", ",", "\n", "model", ".", "relation_labels", ",", "config", "[", "'relprop'", "]", ")", "\n", "", "elif", "rp_type", "==", "'relprop2'", ":", "\n", "        ", "return", "ModuleRelProp2", "(", "model", ".", "span_extractor", ".", "dim_output", ",", "model", ".", "span_pair_generator", ",", "model", ".", "relation_labels", ",", "\n", "config", "[", "'relprop'", "]", ")", "\n", "", "elif", "rp_type", "==", "'attention'", ":", "\n", "        ", "return", "ModulePlainAttention", "(", "model", ".", "span_extractor", ".", "dim_output", ",", "len", "(", "model", ".", "relation_labels", ")", ",", "\n", "model", ".", "span_pair_generator", ",", "config", "[", "'relprop'", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "BaseException", "(", "\"no such relprop:\"", ",", "rp_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.corefprop2.ModuleCorefProp2.__init__": [[12, 23], ["torch.Module.__init__", "print", "models.coreflinker.scorers.OptFFpairs", "modules.utils.misc.MyGate", "modules.utils.misc.MyGate"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["    ", "def", "__init__", "(", "self", ",", "dim_span", ",", "coref_pruner", ",", "span_pair_generator", ",", "config", ")", ":", "\n", "        ", "super", "(", "ModuleCorefProp2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "coref_prop", "=", "config", "[", "'coref_prop'", "]", "\n", "self", ".", "update_coref_scores", "=", "config", "[", "'update_coref_scores'", "]", "\n", "\n", "print", "(", "\"ModuleCorefProp2(cp={})\"", ".", "format", "(", "self", ".", "coref_prop", ")", ")", "\n", "\n", "self", ".", "coref_pruner", "=", "coref_pruner", "\n", "self", ".", "coref", "=", "OptFFpairs", "(", "dim_span", ",", "1", ",", "config", ",", "span_pair_generator", ")", "\n", "self", ".", "gate1", "=", "MyGate", "(", "dim_span", ")", "\n", "self", ".", "gate2", "=", "MyGate", "(", "dim_span", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.corefprop2.ModuleCorefProp2.forward": [[24, 58], ["filtered_spans[].permute", "corefprop2.ModuleCorefProp2.coref().squeeze", "modules.utils.misc.coref_add_scores", "all_spans.copy", "filtered_spans.copy", "range", "modules.utils.misc.overwrite_spans", "corefprop2.ModuleCorefProp2.coref", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "corefprop2.ModuleCorefProp2.gate1", "corefprop2.ModuleCorefProp2.gate2", "corefprop2.ModuleCorefProp2.coref().squeeze", "modules.utils.misc.coref_add_scores", "corefprop2.ModuleCorefProp2.coref_pruner", "corefprop2.ModuleCorefProp2.coref"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.coref_add_scores", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.misc.overwrite_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.coref_add_scores"], ["", "def", "forward", "(", "self", ",", "all_spans", ",", "filtered_spans", ",", "sequence_lengths", ")", ":", "\n", "        ", "update", "=", "filtered_spans", "[", "'span_vecs'", "]", "\n", "filtered_span_begin", "=", "filtered_spans", "[", "'span_begin'", "]", "\n", "filtered_span_end", "=", "filtered_spans", "[", "'span_end'", "]", "\n", "triangular_mask1", "=", "filtered_spans", "[", "'triangular_mask'", "]", "\n", "triangular_mask2", "=", "filtered_spans", "[", "'triangular_mask'", "]", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "coref_scores", "=", "self", ".", "coref", "(", "update", ",", "filtered_span_begin", ",", "filtered_span_end", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "coref_scores", "=", "coref_add_scores", "(", "coref_scores", ",", "filtered_spans", "[", "'span_scores'", "]", ")", "\n", "\n", "update_all", "=", "all_spans", ".", "copy", "(", ")", "\n", "update_filtered", "=", "filtered_spans", ".", "copy", "(", ")", "\n", "\n", "if", "self", ".", "coref_prop", ">", "0", ":", "\n", "\n", "            ", "for", "_", "in", "range", "(", "self", ".", "coref_prop", ")", ":", "\n", "                ", "probs1", "=", "F", ".", "softmax", "(", "coref_scores", "-", "(", "1.0", "-", "triangular_mask1", ")", "*", "1e23", ",", "dim", "=", "-", "1", ")", "\n", "probs2", "=", "F", ".", "softmax", "(", "coref_scores", "-", "(", "1.0", "-", "triangular_mask2", ")", "*", "1e23", ",", "dim", "=", "-", "1", ")", "\n", "\n", "ctxt1", "=", "torch", ".", "matmul", "(", "probs1", ",", "update", ")", "\n", "ctxt2", "=", "torch", ".", "matmul", "(", "probs2", ",", "update", ")", "\n", "\n", "update", "=", "self", ".", "gate1", "(", "update", ",", "ctxt1", ")", "+", "self", ".", "gate2", "(", "update", ",", "ctxt2", ")", "\n", "\n", "if", "self", ".", "update_coref_scores", ":", "\n", "                    ", "coref_scores", "=", "self", ".", "coref", "(", "update", ",", "filtered_span_begin", ",", "filtered_span_end", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "coref_scores", "=", "coref_add_scores", "(", "coref_scores", ",", "self", ".", "coref_pruner", "(", "update", ")", ")", "\n", "\n", "", "", "update_filtered", "[", "'span_vecs'", "]", "=", "update", "\n", "\n", "update_all", "[", "'span_vecs'", "]", "=", "overwrite_spans", "(", "update_all", "[", "'span_vecs'", "]", ",", "filtered_spans", "[", "'prune_indices'", "]", ",", "\n", "filtered_spans", "[", "'span_lengths'", "]", ",", "update", ")", "\n", "\n", "", "return", "update_all", ",", "update_filtered", ",", "coref_scores", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.corefprop.ModuleCorefProp.__init__": [[11, 22], ["torch.Module.__init__", "print", "models.coreflinker.scorers.OptFFpairs", "modules.utils.misc.MyGate"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["    ", "def", "__init__", "(", "self", ",", "dim_span", ",", "coref_pruner", ",", "span_pair_generator", ",", "config", ")", ":", "\n", "        ", "super", "(", "ModuleCorefProp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "coref_prop", "=", "config", "[", "'corefprop'", "]", "[", "'coref_prop'", "]", "\n", "self", ".", "update_coref_scores", "=", "config", "[", "'corefprop'", "]", "[", "'update_coref_scores'", "]", "\n", "# self.shared_pruner = config['shared_pruner']", "\n", "\n", "print", "(", "\"ModuleCorefProp(cp={})\"", ".", "format", "(", "self", ".", "coref_prop", ")", ")", "\n", "\n", "self", ".", "coref_pruner", "=", "coref_pruner", "\n", "self", ".", "coref", "=", "OptFFpairs", "(", "dim_span", ",", "1", ",", "config", "[", "'corefprop'", "]", ",", "span_pair_generator", ")", "\n", "self", ".", "gate", "=", "MyGate", "(", "dim_span", ")", "\n", "# self.end_to_end = config['end_to_end']", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.corefprop.ModuleCorefProp.forward": [[24, 94], ["corefprop.ModuleCorefProp.coref().squeeze", "modules.utils.misc.coref_add_scores", "all_spans.copy", "filtered_spans_rest.copy", "range", "modules.utils.misc.overwrite_spans", "corefprop.ModuleCorefProp.coref", "torch.softmax", "torch.softmax", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "corefprop.ModuleCorefProp.gate", "corefprop.ModuleCorefProp.coref().squeeze", "modules.utils.misc.coref_add_scores", "corefprop.ModuleCorefProp.coref", "corefprop.ModuleCorefProp.coref_pruner"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.coref_add_scores", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.misc.overwrite_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.coref_add_scores"], ["", "def", "forward", "(", "self", ",", "all_spans", ",", "filtered_spans", ",", "gold_spans", ",", "max_span_length", "=", "0", ",", "gold_spans_lengths", "=", "0", ")", ":", "\n", "# filtered_spans_rest = None", "\n", "\n", "# if self.end_to_end:", "\n", "        ", "update", "=", "filtered_spans", "[", "'span_vecs'", "]", "\n", "# update.shape --> [1, 21, 2324]", "\n", "\n", "if", "update", "is", "None", ":", "\n", "            ", "return", "all_spans", ",", "filtered_spans", ",", "None", "\n", "\n", "", "filtered_span_begin", "=", "filtered_spans", "[", "'span_begin'", "]", "\n", "# filtered_span_begin.shape --> [1,21]", "\n", "filtered_span_end", "=", "filtered_spans", "[", "'span_end'", "]", "\n", "# filtered_span_end.shape --> [1,21]", "\n", "triangular_mask", "=", "filtered_spans", "[", "'triangular_mask'", "]", "\n", "# triangular_mask.shape --> [1,21,21]", "\n", "filtered_spans_rest", "=", "filtered_spans", "\n", "\n", "# filtered_spans_rest.keys() --> dict_keys(['prune_indices_hoi', 'span_vecs', 'span_scores', 'span_begin',", "\n", "# 'span_end', 'span_lengths', 'square_mask', 'triangular_mask', 'pruned_spans', 'gold_spans', 'enabled_spans'])", "\n", "#", "\n", "\n", "coref_scores", "=", "self", ".", "coref", "(", "update", ",", "filtered_span_begin", ",", "filtered_span_end", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "coref_scores", "=", "coref_add_scores", "(", "coref_scores", ",", "filtered_spans", "[", "'span_scores'", "]", ")", "\n", "\n", "update_all", "=", "all_spans", ".", "copy", "(", ")", "\n", "update_filtered", "=", "filtered_spans_rest", ".", "copy", "(", ")", "\n", "\n", "if", "self", ".", "coref_prop", ">", "0", ":", "\n", "            ", "for", "_", "in", "range", "(", "self", ".", "coref_prop", ")", ":", "\n", "                ", "probs", "=", "F", ".", "softmax", "(", "coref_scores", "-", "(", "1.0", "-", "triangular_mask", ")", "*", "1e23", ",", "dim", "=", "-", "1", ")", "\n", "# coref_scores.shape --> [1,21,21] ; triangular_mask.shape --> [1,21,21];", "\n", "# triangular_mask.sum --> 231.0 (float); probs.shape --> [1,21,21] ; probs.sum() --> 21.0", "\n", "ctxt", "=", "torch", ".", "matmul", "(", "probs", ",", "update", ")", "\n", "# update.shape --> torch.Size([1, 21, 2324])", "\n", "# ctxt.shape --> [1, 21, 2324]", "\n", "update", "=", "self", ".", "gate", "(", "update", ",", "ctxt", ")", "\n", "# update.shape --> [1, 21, 2324]", "\n", "#", "\n", "if", "self", ".", "update_coref_scores", ":", "\n", "                    ", "coref_scores", "=", "self", ".", "coref", "(", "update", ",", "filtered_span_begin", ",", "filtered_span_end", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "# filtered_span_begin.shape --> [1, 21, 1]; tensor([[[ 4], [ 6], [19], [23], [25], [28], ... ]])", "\n", "# filtered_span_end.shape --> [1, 21, 1];   tensor([[[ 8], [ 6], [23], [27], [30], [28], ... ]])", "\n", "if", "self", ".", "coref_pruner", "is", "not", "None", ":", "# can be None if end_to_end is in false in model", "\n", "                        ", "coref_scores", "=", "coref_add_scores", "(", "coref_scores", ",", "self", ".", "coref_pruner", "(", "update", ")", ")", "\n", "# self.coref_pruner -->", "\n", "# Sequential(", "\n", "#   (0): Linear(in_features=2324, out_features=3000, bias=True)", "\n", "#   (1): ReLU()", "\n", "#   (2): Dropout(p=0.3, inplace=False)", "\n", "#   (3): Linear(in_features=3000, out_features=3000, bias=True)", "\n", "#   (4): ReLU()", "\n", "#   (5): Dropout(p=0.3, inplace=False)", "\n", "#   (6): Linear(in_features=3000, out_features=1, bias=True)", "\n", "# )", "\n", "# coref_scores.shape --> [1, 21, 21]", "\n", "\n", "", "", "", "update_filtered", "[", "'span_vecs'", "]", "=", "update", "\n", "# update_filtered['span_vecs'].shape before update --> [1, 21, 2324]", "\n", "# update_filtered['span_vecs'].shape after update --> [1, 21, 2324]", "\n", "update_all", "[", "'span_vecs'", "]", "=", "overwrite_spans", "(", "update_all", "[", "'span_vecs'", "]", ",", "filtered_spans_rest", "[", "'prune_indices'", "]", ",", "\n", "filtered_spans_rest", "[", "'span_lengths'", "]", ",", "update", ")", "\n", "# update_all['span_vecs'].shape --> [1, 96, 15, 2324]", "\n", "# filtered_spans_rest['prune_indices'].shape --> [1, 21] --> tensor([[  64,   90,  289,  349,  380,  420,", "\n", "#   570,  617,  810,  872,  900,  907, 935,  938, 1022, 1098, 1113, 1188, 1194, 1215, 1216]])", "\n", "# filtered_spans_rest['span_lengths'] --> tensor([21])", "\n", "# update.shape --> [1, 21, 2324]", "\n", "\n", "", "return", "update_all", ",", "update_filtered", ",", "coref_scores", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.FFpairs.__init__": [[25, 39], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_input", ",", "dim_output", ",", "config", ",", "span_pair_generator", ")", ":", "\n", "        ", "super", "(", "FFpairs", ",", "self", ")", ".", "__init__", "(", ")", "\n", "hidden_dim", "=", "config", "[", "'hidden_dim'", "]", "# 150", "\n", "hidden_dp", "=", "config", "[", "'hidden_dropout'", "]", "# 0.4", "\n", "\n", "self", ".", "span_pair_generator", "=", "span_pair_generator", "\n", "self", ".", "scorer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "span_pair_generator", ".", "dim_output", ",", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "hidden_dp", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "hidden_dp", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_dim", ",", "dim_output", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.FFpairs.forward": [[41, 44], ["scorers.FFpairs.span_pair_generator", "scorers.FFpairs.scorer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "span_vecs", ",", "span_begin", ",", "span_end", ")", ":", "\n", "        ", "pairs", "=", "self", ".", "span_pair_generator", "(", "span_vecs", ",", "span_begin", ",", "span_end", ")", "\n", "return", "self", ".", "scorer", "(", "pairs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairs.make_linear": [[48, 55], ["torch.Linear", "torch.Linear", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.zeros_", "torch.nn.init.zeros_"], "methods", ["None"], ["    ", "def", "make_linear", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ",", "std", "=", "0.02", ")", ":", "\n", "        ", "linear", "=", "nn", ".", "Linear", "(", "in_features", ",", "out_features", ",", "bias", ")", "\n", "if", "std", "is", "not", "None", ":", "\n", "            ", "init", ".", "normal_", "(", "linear", ".", "weight", ",", "std", "=", "std", ")", "\n", "if", "bias", ":", "\n", "                ", "init", ".", "zeros_", "(", "linear", ".", "bias", ")", "\n", "", "return", "linear", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairs.make_ffnn": [[56, 68], ["range", "ffnn.append", "torch.Sequential", "torch.Sequential", "scorers.OptFFpairs.make_linear", "isinstance", "scorers.OptFFpairs.make_linear", "torch.ReLU", "torch.ReLU", "len", "scorers.OptFFpairs.make_linear", "scorers.OptFFpairs.make_linear", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_linear", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_linear", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_linear", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_linear"], ["", "", "def", "make_ffnn", "(", "self", ",", "feat_size", ",", "hidden_size", ",", "output_size", ",", "init_weights_std", ")", ":", "\n", "        ", "if", "hidden_size", "is", "None", "or", "hidden_size", "==", "0", "or", "hidden_size", "==", "[", "]", "or", "hidden_size", "==", "[", "0", "]", ":", "\n", "            ", "return", "self", ".", "make_linear", "(", "feat_size", ",", "output_size", ",", "std", "=", "init_weights_std", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "hidden_size", ",", "Iterable", ")", ":", "\n", "            ", "hidden_size", "=", "[", "hidden_size", "]", "\n", "", "ffnn", "=", "[", "self", ".", "make_linear", "(", "feat_size", ",", "hidden_size", "[", "0", "]", ",", "std", "=", "init_weights_std", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "self", ".", "dropout", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "hidden_size", ")", ")", ":", "\n", "            ", "ffnn", "+=", "[", "self", ".", "make_linear", "(", "hidden_size", "[", "i", "-", "1", "]", ",", "hidden_size", "[", "i", "]", ",", "std", "=", "init_weights_std", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "\n", "self", ".", "dropout", "]", "\n", "", "ffnn", ".", "append", "(", "self", ".", "make_linear", "(", "hidden_size", "[", "-", "1", "]", ",", "output_size", ",", "std", "=", "init_weights_std", ")", ")", "\n", "return", "nn", ".", "Sequential", "(", "*", "ffnn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairs.__init__": [[69, 96], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "scorers.OptFFpairs.make_ffnn", "scorers.OptFFpairs.make_ffnn", "scorers.OptFFpairs.make_ffnn", "scorers.OptFFpairs.make_ffnn", "scorers.OptFFpairs.make_ffnn"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_ffnn", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_ffnn", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_ffnn", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_ffnn", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_ffnn"], ["", "def", "__init__", "(", "self", ",", "dim_input", ",", "dim_output", ",", "config", ",", "span_pair_generator", ")", ":", "\n", "        ", "super", "(", "OptFFpairs", ",", "self", ")", ".", "__init__", "(", ")", "\n", "hidden_dim", "=", "config", "[", "'hidden_dim'", "]", "# 150", "\n", "hidden_dp", "=", "config", "[", "'hidden_dropout'", "]", "# 0.4", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "hidden_dp", ")", "\n", "self", ".", "init_weights_std", "=", "config", "[", "'init_weights_std'", "]", "\n", "self", ".", "components_ffnn_depth", "=", "config", "[", "'components_ffnn_depth'", "]", "\n", "self", ".", "scorers_ffnn_depth", "=", "config", "[", "'scorers_ffnn_depth'", "]", "\n", "\n", "self", ".", "span_pair_generator", "=", "span_pair_generator", "\n", "# self.left = nn.Linear(dim_input, hidden_dim)", "\n", "# self.right = nn.Linear(dim_input, hidden_dim)", "\n", "# self.prod = nn.Linear(dim_input, hidden_dim)", "\n", "# self.dist = nn.Linear(span_pair_generator.dim_distance_embedding, hidden_dim)", "\n", "self", ".", "left", "=", "self", ".", "make_ffnn", "(", "feat_size", "=", "dim_input", ",", "hidden_size", "=", "[", "hidden_dim", "]", "*", "self", ".", "components_ffnn_depth", ",", "\n", "output_size", "=", "hidden_dim", ",", "init_weights_std", "=", "self", ".", "init_weights_std", ")", "\n", "self", ".", "right", "=", "self", ".", "make_ffnn", "(", "feat_size", "=", "dim_input", ",", "hidden_size", "=", "[", "hidden_dim", "]", "*", "self", ".", "components_ffnn_depth", ",", "\n", "output_size", "=", "hidden_dim", ",", "init_weights_std", "=", "self", ".", "init_weights_std", ")", "\n", "self", ".", "prod", "=", "self", ".", "make_ffnn", "(", "feat_size", "=", "dim_input", ",", "hidden_size", "=", "[", "hidden_dim", "]", "*", "self", ".", "components_ffnn_depth", ",", "\n", "output_size", "=", "hidden_dim", ",", "init_weights_std", "=", "self", ".", "init_weights_std", ")", "\n", "self", ".", "dist", "=", "self", ".", "make_ffnn", "(", "feat_size", "=", "span_pair_generator", ".", "dim_distance_embedding", ",", "\n", "hidden_size", "=", "[", "hidden_dim", "]", "*", "self", ".", "components_ffnn_depth", ",", "\n", "output_size", "=", "hidden_dim", ",", "init_weights_std", "=", "self", ".", "init_weights_std", ")", "\n", "# self.dp1 = nn.Dropout(hidden_dp)", "\n", "\n", "self", ".", "scorer", "=", "self", ".", "make_ffnn", "(", "feat_size", "=", "hidden_dim", ",", "hidden_size", "=", "[", "hidden_dim", "]", "*", "self", ".", "scorers_ffnn_depth", ",", "\n", "output_size", "=", "dim_output", ",", "init_weights_std", "=", "self", ".", "init_weights_std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairs.forward": [[116, 129], ["scorers.OptFFpairs.span_pair_generator.get_product_embedding", "scorers.OptFFpairs.span_pair_generator.get_distance_embedding", "scorers.OptFFpairs.dropout", "scorers.OptFFpairs.scorer", "scorers.OptFFpairs.dist", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "scorers.OptFFpairs.prod", "scorers.OptFFpairs.left().unsqueeze", "scorers.OptFFpairs.right().unsqueeze", "scorers.OptFFpairs.left", "scorers.OptFFpairs.right"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.SpanPairs.get_product_embedding", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.SpanPairs.get_distance_embedding", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.dropout"], ["", "def", "forward", "(", "self", ",", "span_vecs", ",", "span_begin", ",", "span_end", ")", ":", "\n", "        ", "p", "=", "self", ".", "span_pair_generator", ".", "get_product_embedding", "(", "span_vecs", ")", "\n", "d", "=", "self", ".", "span_pair_generator", ".", "get_distance_embedding", "(", "span_begin", ",", "span_end", ")", "\n", "\n", "h", "=", "self", ".", "left", "(", "span_vecs", ")", ".", "unsqueeze", "(", "-", "2", ")", "+", "self", ".", "right", "(", "span_vecs", ")", ".", "unsqueeze", "(", "-", "3", ")", "+", "self", ".", "prod", "(", "p", ")", "+", "self", ".", "dist", "(", "d", ")", "\n", "h", "=", "self", ".", "dropout", "(", "torch", ".", "relu", "(", "h", ")", ")", "\n", "\n", "# h = self.layer2(h)", "\n", "# h = self.dp2(torch.relu(h))", "\n", "# return self.out(h)", "\n", "\n", "out_res", "=", "self", ".", "scorer", "(", "h", ")", "\n", "return", "out_res", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsHoi.make_linear": [[132, 138], ["torch.Linear", "torch.Linear", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.zeros_", "torch.nn.init.zeros_"], "methods", ["None"], ["    ", "def", "make_linear", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ",", "std", "=", "0.02", ")", ":", "\n", "        ", "linear", "=", "nn", ".", "Linear", "(", "in_features", ",", "out_features", ",", "bias", ")", "\n", "init", ".", "normal_", "(", "linear", ".", "weight", ",", "std", "=", "std", ")", "\n", "if", "bias", ":", "\n", "            ", "init", ".", "zeros_", "(", "linear", ".", "bias", ")", "\n", "", "return", "linear", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsHoi.make_ffnn": [[139, 150], ["range", "ffnn.append", "torch.Sequential", "torch.Sequential", "scorers.OptFFpairsHoi.make_linear", "isinstance", "scorers.OptFFpairsHoi.make_linear", "torch.ReLU", "torch.ReLU", "len", "scorers.OptFFpairsHoi.make_linear", "scorers.OptFFpairsHoi.make_linear", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_linear", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_linear", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_linear", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_linear"], ["", "def", "make_ffnn", "(", "self", ",", "feat_size", ",", "hidden_size", ",", "output_size", ")", ":", "\n", "        ", "if", "hidden_size", "is", "None", "or", "hidden_size", "==", "0", "or", "hidden_size", "==", "[", "]", "or", "hidden_size", "==", "[", "0", "]", ":", "\n", "            ", "return", "self", ".", "make_linear", "(", "feat_size", ",", "output_size", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "hidden_size", ",", "Iterable", ")", ":", "\n", "            ", "hidden_size", "=", "[", "hidden_size", "]", "\n", "", "ffnn", "=", "[", "self", ".", "make_linear", "(", "feat_size", ",", "hidden_size", "[", "0", "]", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "self", ".", "dropout", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "hidden_size", ")", ")", ":", "\n", "            ", "ffnn", "+=", "[", "self", ".", "make_linear", "(", "hidden_size", "[", "i", "-", "1", "]", ",", "hidden_size", "[", "i", "]", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "self", ".", "dropout", "]", "\n", "", "ffnn", ".", "append", "(", "self", ".", "make_linear", "(", "hidden_size", "[", "-", "1", "]", ",", "output_size", ")", ")", "\n", "return", "nn", ".", "Sequential", "(", "*", "ffnn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsHoi.bucket_distance": [[151, 159], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.log2().to", "torch.log2().to", "torch.log2().to", "torch.log2().to", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "offsets.to"], "methods", ["None"], ["", "def", "bucket_distance", "(", "self", ",", "offsets", ")", ":", "\n", "        ", "\"\"\" offsets: [num spans1, num spans2] \"\"\"", "\n", "# 10 semi-logscale bin: 0, 1, 2, 3, 4, (5-7)->5, (8-15)->6, (16-31)->7, (32-63)->8, (64+)->9", "\n", "logspace_distance", "=", "torch", ".", "log2", "(", "offsets", ".", "to", "(", "torch", ".", "float", ")", ")", ".", "to", "(", "torch", ".", "long", ")", "+", "3", "\n", "identity_mask", "=", "(", "offsets", "<=", "4", ")", ".", "to", "(", "torch", ".", "long", ")", "\n", "combined_distance", "=", "identity_mask", "*", "offsets", "+", "(", "1", "-", "identity_mask", ")", "*", "logspace_distance", "\n", "combined_distance", "=", "torch", ".", "clamp", "(", "combined_distance", ",", "0", ",", "9", ")", "\n", "return", "combined_distance", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsHoi.make_embedding": [[160, 164], ["torch.Embedding", "torch.Embedding", "torch.nn.init.normal_", "torch.nn.init.normal_"], "methods", ["None"], ["", "def", "make_embedding", "(", "self", ",", "dict_size", ",", "std", "=", "0.02", ")", ":", "\n", "        ", "emb", "=", "nn", ".", "Embedding", "(", "dict_size", ",", "self", ".", "feature_emb_size", ")", "\n", "init", ".", "normal_", "(", "emb", ".", "weight", ",", "std", "=", "std", ")", "\n", "return", "emb", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsHoi.__init__": [[165, 174], ["torch.Module.__init__", "scorers.OptFFpairsHoi.make_ffnn", "torch.Dropout", "torch.Dropout", "scorers.OptFFpairsHoi.make_ffnn", "scorers.OptFFpairsHoi.make_embedding"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_ffnn", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_ffnn", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsHoi.make_embedding"], ["", "def", "__init__", "(", "self", ",", "dim_input", ",", "dim_output", ",", "config", ",", "feature_emb_size", ")", ":", "\n", "        ", "super", "(", "OptFFpairsHoi", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "coarse_bilinear", "=", "self", ".", "make_ffnn", "(", "dim_input", ",", "0", ",", "output_size", "=", "dim_input", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", "[", "'hidden_dropout'", "]", ")", "\n", "self", ".", "use_distance_prior", "=", "config", "[", "'use_distance_prior'", "]", "\n", "self", ".", "feature_emb_size", "=", "feature_emb_size", "\n", "if", "self", ".", "use_distance_prior", ":", "\n", "            ", "self", ".", "antecedent_distance_score_ffnn", "=", "self", ".", "make_ffnn", "(", "feature_emb_size", ",", "0", ",", "output_size", "=", "1", ")", "\n", "self", ".", "emb_antecedent_distance_prior", "=", "self", ".", "make_embedding", "(", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsHoi.forward": [[188, 227], ["span_vecs.squeeze.squeeze.squeeze", "span_scores.squeeze.squeeze.squeeze", "scorers.OptFFpairsHoi.dropout", "scorers.OptFFpairsHoi.dropout", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.log", "torch.log", "torch.log", "torch.log", "scorers.OptFFpairsHoi.out", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "scorers.OptFFpairsHoi.coarse_bilinear", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "antecedent_mask.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "scorers.OptFFpairsHoi.bucket_distance", "scorers.OptFFpairsHoi.antecedent_distance_score_ffnn", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "scorers.OptFFpairsHoi.dropout"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.dropout", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.dropout", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsHoi.bucket_distance", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.dropout"], ["", "", "def", "forward", "(", "self", ",", "span_vecs", ",", "span_begin", ",", "span_end", ",", "antecedent_mask", ",", "span_scores", ")", ":", "\n", "# TODO: we are here, adapting from hoi's code", "\n", "        ", "span_vecs", "=", "span_vecs", ".", "squeeze", "(", "0", ")", "# gets rid of batch dimension, should be 1 always for this module", "\n", "span_scores", "=", "span_scores", ".", "squeeze", "(", "0", ")", "\n", "pairwise_mention_score_sum", "=", "torch", ".", "unsqueeze", "(", "span_scores", ",", "1", ")", "+", "torch", ".", "unsqueeze", "(", "span_scores", ",", "0", ")", "\n", "# top_span_emb=None", "\n", "source_span_emb", "=", "self", ".", "dropout", "(", "self", ".", "coarse_bilinear", "(", "span_vecs", ")", ")", "\n", "target_span_emb", "=", "self", ".", "dropout", "(", "torch", ".", "transpose", "(", "span_vecs", ",", "0", ",", "1", ")", ")", "\n", "pairwise_coref_scores", "=", "torch", ".", "matmul", "(", "source_span_emb", ",", "target_span_emb", ")", "\n", "pairwise_fast_scores", "=", "pairwise_mention_score_sum", "+", "pairwise_coref_scores", "\n", "# pairwise_fast_scores += torch.log(antecedent_mask.to(torch.float))", "\n", "pairwise_fast_scores", "+=", "torch", ".", "log", "(", "antecedent_mask", ".", "squeeze", "(", "0", ")", ")", "\n", "if", "self", ".", "use_distance_prior", ":", "\n", "            ", "distance_score", "=", "torch", ".", "squeeze", "(", "\n", "self", ".", "antecedent_distance_score_ffnn", "(", "self", ".", "dropout", "(", "self", ".", "emb_antecedent_distance_prior", ".", "weight", ")", ")", ",", "1", ")", "\n", "# distance_score.shape --> [10]", "\n", "num_top_spans", "=", "span_begin", ".", "shape", "[", "0", "]", "\n", "top_span_range", "=", "torch", ".", "arange", "(", "0", ",", "num_top_spans", ",", "device", "=", "settings", ".", "device", ")", "\n", "# top_span_range --> [  0,   1,   2,   3,   4,   5, ...] ; top_span_range.shape --> [441]", "\n", "antecedent_offsets", "=", "torch", ".", "unsqueeze", "(", "top_span_range", ",", "1", ")", "-", "torch", ".", "unsqueeze", "(", "top_span_range", ",", "0", ")", "\n", "\n", "bucketed_distance", "=", "self", ".", "bucket_distance", "(", "antecedent_offsets", ")", "\n", "# bucketed_distance.shape --> [441, 441] ; bucketed_distance --> [[0,0,...],[1,0,0,...],[2,1,0,...],...[9,9,9,...,2,1,0]]", "\n", "antecedent_distance_score", "=", "distance_score", "[", "bucketed_distance", "]", "\n", "# antecedent_distance_score.shape --> [441,441] ; antecedent_distance_score --> [[0.0008,0.0008,...],...[0.0015, 0.0015,...0.0008]]", "\n", "pairwise_fast_scores", "+=", "antecedent_distance_score", "\n", "# pairwise_fast_scores.shape --> [441,441]", "\n", "\n", "# TODO - we are here, for now leaving it since requires mayor adaptations such as the use of top antecedents for", "\n", "#  coref and not a square matrix like in our case.", "\n", "\n", "# p = self.span_pair_generator.get_product_embedding(span_vecs)", "\n", "# d = self.span_pair_generator.get_distance_embedding(span_begin, span_end)", "\n", "#", "\n", "# h = self.left(span_vecs).unsqueeze(-2) + self.right(span_vecs).unsqueeze(-3) + self.prod(p) + self.dist(d)", "\n", "# h = self.dp1(torch.relu(h))", "\n", "# h = self.layer2(h)", "\n", "# h = self.dp2(torch.relu(h))", "\n", "", "return", "self", ".", "out", "(", "h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerNaive.__init__": [[234, 255], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["def", "__init__", "(", "self", ",", "dim_input", ",", "dim_input_entities", ",", "dim_output", ",", "config", ",", "span_pair_generator", ",", "\n", "filter_singletons_with_matrix", "=", "False", ")", ":", "\n", "# TODO: we are here dim_input_entities still has to be passed", "\n", "# TODO 06/12/2020: implement the changes for filter_singletons_with_matrix as in OptFFpairsLinkerCorefBase", "\n", "        ", "super", "(", "OptFFpairsCorefLinkerNaive", ",", "self", ")", ".", "__init__", "(", ")", "\n", "hidden_dim", "=", "config", "[", "'hidden_dim'", "]", "# 150", "\n", "hidden_dp", "=", "config", "[", "'hidden_dropout'", "]", "# 0.4", "\n", "\n", "self", ".", "filter_singletons_with_matrix", "=", "filter_singletons_with_matrix", "\n", "self", ".", "span_pair_generator", "=", "span_pair_generator", "\n", "self", ".", "left_spans", "=", "nn", ".", "Linear", "(", "dim_input", ",", "hidden_dim", ")", "\n", "self", ".", "right_spans", "=", "nn", ".", "Linear", "(", "dim_input", ",", "hidden_dim", ")", "\n", "self", ".", "prod_spans", "=", "nn", ".", "Linear", "(", "dim_input", ",", "hidden_dim", ")", "\n", "self", ".", "dist_spans", "=", "nn", ".", "Linear", "(", "span_pair_generator", ".", "dim_distance_embedding", ",", "hidden_dim", ")", "\n", "\n", "self", ".", "left_entities", "=", "nn", ".", "Linear", "(", "dim_input_entities", ",", "hidden_dim", ")", "\n", "\n", "self", ".", "dp1", "=", "nn", ".", "Dropout", "(", "hidden_dp", ")", "\n", "self", ".", "layer2", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", "\n", "self", ".", "dp2", "=", "nn", ".", "Dropout", "(", "hidden_dp", ")", "\n", "self", ".", "out", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "dim_output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerNaive.forward": [[256, 286], ["scorers.OptFFpairsCorefLinkerNaive.span_pair_generator.get_product_embedding", "scorers.OptFFpairsCorefLinkerNaive.span_pair_generator.get_distance_embedding", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "scorers.OptFFpairsCorefLinkerNaive.dp1", "scorers.OptFFpairsCorefLinkerNaive.layer2", "scorers.OptFFpairsCorefLinkerNaive.dp2", "scorers.OptFFpairsCorefLinkerNaive.out", "scorers.OptFFpairsCorefLinkerNaive.dist_spans", "scorers.OptFFpairsCorefLinkerNaive.left_entities", "scorers.OptFFpairsCorefLinkerNaive.right_spans().unsqueeze", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "scorers.OptFFpairsCorefLinkerNaive.prod_spans", "scorers.OptFFpairsCorefLinkerNaive.left_spans().unsqueeze", "scorers.OptFFpairsCorefLinkerNaive.right_spans().unsqueeze", "scorers.OptFFpairsCorefLinkerNaive.right_spans", "scorers.OptFFpairsCorefLinkerNaive.left_spans", "scorers.OptFFpairsCorefLinkerNaive.right_spans"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.SpanPairs.get_product_embedding", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.SpanPairs.get_distance_embedding"], ["", "def", "forward", "(", "self", ",", "span_vecs", ",", "entity_vecs", ",", "span_begin", ",", "span_end", ")", ":", "\n", "# self.coref(update_mentions,", "\n", "#                               update_entities,", "\n", "#                               mentions_span_begin,", "\n", "#                               mentions_span_end)", "\n", "# span_vecs: torch.Size([1, 9, 9, 150])", "\n", "# entity_vecs: torch.Size([1, 9, 17, 200])", "\n", "        ", "p", "=", "self", ".", "span_pair_generator", ".", "get_product_embedding", "(", "span_vecs", ")", "# torch.Size([1, 9, 9, 1676])", "\n", "d", "=", "self", ".", "span_pair_generator", ".", "get_distance_embedding", "(", "span_begin", ",", "span_end", ")", "# torch.Size([1, 9, 9, 20])", "\n", "\n", "h_inter_span", "=", "self", ".", "left_spans", "(", "span_vecs", ")", ".", "unsqueeze", "(", "-", "2", ")", "+", "self", ".", "right_spans", "(", "span_vecs", ")", ".", "unsqueeze", "(", "-", "3", ")", "+", "self", ".", "prod_spans", "(", "p", ")", "+", "self", ".", "dist_spans", "(", "d", ")", "# torch.Size([1, 9, 9, 150])", "\n", "\n", "h_span_ent", "=", "(", "self", ".", "left_entities", "(", "entity_vecs", ")", "+", "self", ".", "right_spans", "(", "span_vecs", ")", ".", "unsqueeze", "(", "-", "2", ")", ")", "\n", "# torch.Size([1, 9, 17, 150])", "\n", "# TODO: is self.right_spans good? or should there be a separate self.right_spans_entities?", "\n", "# TODO: surely there can be more inter-relational aspects between span and entity added into h_span_ent,", "\n", "#  check related work", "\n", "h_final", "=", "torch", ".", "cat", "(", "[", "h_span_ent", ",", "h_inter_span", "]", ",", "dim", "=", "-", "2", ")", "# torch.Size([1, 9, 26, 150])", "\n", "\n", "# previous version (span-based coreference)", "\n", "# h_inter_span = self.dp1(torch.relu(h_inter_span))", "\n", "# h_inter_span = self.layer2(h_inter_span)", "\n", "# h_inter_span = self.dp2(torch.relu(h_inter_span))", "\n", "# return self.out(h_inter_span)", "\n", "\n", "h_final", "=", "self", ".", "dp1", "(", "torch", ".", "relu", "(", "h_final", ")", ")", "\n", "h_final", "=", "self", ".", "layer2", "(", "h_final", ")", "\n", "h_final", "=", "self", ".", "dp2", "(", "torch", ".", "relu", "(", "h_final", ")", ")", "\n", "return", "self", ".", "out", "(", "h_final", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerBase.__init__": [[294, 336], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["def", "__init__", "(", "self", ",", "dim_input", ",", "entity_embedder", ",", "dim_output", ",", "config", ",", "span_pair_generator", ",", "\n", "filter_singletons_with_matrix", "=", "False", ",", "dictionaries", "=", "None", ")", ":", "\n", "# TODO: we are here dim_input_entities still has to be passed", "\n", "        ", "super", "(", "OptFFpairsCorefLinkerBase", ",", "self", ")", ".", "__init__", "(", ")", "\n", "hidden_dim", "=", "config", "[", "'hidden_dim'", "]", "# 150", "\n", "hidden_dp", "=", "config", "[", "'hidden_dropout'", "]", "# 0.4", "\n", "\n", "dim_input_entities", "=", "entity_embedder", ".", "dim", "\n", "self", ".", "dictionaries", "=", "dictionaries", "\n", "self", ".", "entity_embedder", "=", "entity_embedder", "\n", "\n", "self", ".", "span_pair_generator", "=", "span_pair_generator", "\n", "self", ".", "left_spans", "=", "nn", ".", "Linear", "(", "dim_input", ",", "hidden_dim", ")", "\n", "self", ".", "right_spans", "=", "nn", ".", "Linear", "(", "dim_input", ",", "hidden_dim", ")", "\n", "self", ".", "prod_spans", "=", "nn", ".", "Linear", "(", "dim_input", ",", "hidden_dim", ")", "\n", "self", ".", "dist_spans", "=", "nn", ".", "Linear", "(", "span_pair_generator", ".", "dim_distance_embedding", ",", "hidden_dim", ")", "\n", "\n", "self", ".", "left_entities", "=", "nn", ".", "Linear", "(", "dim_input_entities", ",", "hidden_dim", ")", "\n", "\n", "# TODO: here build nnet for coref with/without relu in between (configurable)", "\n", "#  reference code: models.coreflinker.pruner.MentionPrunerSpanBertHoi.make_ffnn", "\n", "#", "\n", "self", ".", "dp1_coref", "=", "nn", ".", "Dropout", "(", "hidden_dp", ")", "\n", "self", ".", "layer2_coref", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", "\n", "self", ".", "dp2_coref", "=", "nn", ".", "Dropout", "(", "hidden_dp", ")", "\n", "self", ".", "out_coref", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "dim_output", ")", "\n", "\n", "# TODO: here build nnet for linking with/without relu in between (configurable)", "\n", "self", ".", "dp1_linking", "=", "nn", ".", "Dropout", "(", "hidden_dp", ")", "\n", "self", ".", "layer2_linking", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", "\n", "self", ".", "dp2_linking", "=", "nn", ".", "Dropout", "(", "hidden_dp", ")", "\n", "self", ".", "out_linking", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "dim_output", ")", "\n", "\n", "self", ".", "filter_singletons_with_matrix", "=", "filter_singletons_with_matrix", "\n", "self", ".", "filter_with_matrix_type", "=", "config", "[", "'filter_with_matrix_type'", "]", "\n", "if", "self", ".", "filter_singletons_with_matrix", "and", "self", ".", "filter_with_matrix_type", "==", "'separate_nnet'", ":", "\n", "# linear transformation from dim_input to hidden_dim, similar to left_spans, right_spans, prod_spans, etc..", "\n", "            ", "self", ".", "all_spans", "=", "nn", ".", "Linear", "(", "dim_input", ",", "hidden_dim", ")", "\n", "self", ".", "dp1_is_not_mention", "=", "nn", ".", "Dropout", "(", "hidden_dp", ")", "\n", "self", ".", "layer2_is_not_mention", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", "\n", "self", ".", "dp2_is_not_mention", "=", "nn", ".", "Dropout", "(", "hidden_dp", ")", "\n", "self", ".", "out_is_not_mention", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "dim_output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerBase.forward": [[337, 400], ["scorers.OptFFpairsCorefLinkerBase.span_pair_generator.get_product_embedding", "scorers.OptFFpairsCorefLinkerBase.span_pair_generator.get_distance_embedding", "scorers.OptFFpairsCorefLinkerBase.dp1_coref", "scorers.OptFFpairsCorefLinkerBase.layer2_coref", "scorers.OptFFpairsCorefLinkerBase.dp2_coref", "scorers.OptFFpairsCorefLinkerBase.out_coref", "scorers.OptFFpairsCorefLinkerBase.dp1_linking", "scorers.OptFFpairsCorefLinkerBase.layer2_linking", "scorers.OptFFpairsCorefLinkerBase.dp2_linking", "scorers.OptFFpairsCorefLinkerBase.out_linking", "scorers.OptFFpairsCorefLinkerBase.dist_spans", "scorers.OptFFpairsCorefLinkerBase.left_entities", "scorers.OptFFpairsCorefLinkerBase.right_spans().unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "scorers.OptFFpairsCorefLinkerBase.dictionaries[].lookup", "scorers.OptFFpairsCorefLinkerBase.entity_embedder().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "scorers.OptFFpairsCorefLinkerBase.dictionaries[].lookup", "scorers.OptFFpairsCorefLinkerBase.entity_embedder().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "scorers.OptFFpairsCorefLinkerBase.all_spans", "scorers.OptFFpairsCorefLinkerBase.dp1_is_not_mention", "scorers.OptFFpairsCorefLinkerBase.layer2_is_not_mention", "scorers.OptFFpairsCorefLinkerBase.dp2_is_not_mention", "scorers.OptFFpairsCorefLinkerBase.out_is_not_mention", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "scorers.OptFFpairsCorefLinkerBase.prod_spans", "scorers.OptFFpairsCorefLinkerBase.left_entities", "scorers.OptFFpairsCorefLinkerBase.right_spans().unsqueeze", "scorers.OptFFpairsCorefLinkerBase.left_entities", "scorers.OptFFpairsCorefLinkerBase.right_spans().unsqueeze", "span_vecs.unsqueeze", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "scorers.OptFFpairsCorefLinkerBase.left_spans().unsqueeze", "scorers.OptFFpairsCorefLinkerBase.right_spans().unsqueeze", "scorers.OptFFpairsCorefLinkerBase.right_spans", "scorers.OptFFpairsCorefLinkerBase.entity_embedder", "scorers.OptFFpairsCorefLinkerBase.entity_embedder", "scorers.OptFFpairsCorefLinkerBase.right_spans", "scorers.OptFFpairsCorefLinkerBase.right_spans", "scorers.OptFFpairsCorefLinkerBase.left_spans", "scorers.OptFFpairsCorefLinkerBase.right_spans"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.SpanPairs.get_product_embedding", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.SpanPairs.get_distance_embedding", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.SamplesGenerator.all_spans"], ["", "", "def", "forward", "(", "self", ",", "span_vecs", ",", "entity_vecs", ",", "span_begin", ",", "span_end", ")", ":", "\n", "# span_vecs: torch.Size([1, 9, 9, 150])", "\n", "# entity_vecs: torch.Size([1, 9, 17, 200])", "\n", "        ", "p", "=", "self", ".", "span_pair_generator", ".", "get_product_embedding", "(", "span_vecs", ")", "# torch.Size([1, 21, 21, 2324])", "\n", "d", "=", "self", ".", "span_pair_generator", ".", "get_distance_embedding", "(", "span_begin", ",", "span_end", ")", "# torch.Size([1, 21, 21, 20])", "\n", "\n", "h_inter_span", "=", "self", ".", "left_spans", "(", "span_vecs", ")", ".", "unsqueeze", "(", "-", "2", ")", "+", "self", ".", "right_spans", "(", "span_vecs", ")", ".", "unsqueeze", "(", "-", "3", ")", "+", "self", ".", "prod_spans", "(", "p", ")", "+", "self", ".", "dist_spans", "(", "d", ")", "# torch.Size([1, 21, 21, 150])", "\n", "\n", "h_span_ent", "=", "(", "self", ".", "left_entities", "(", "entity_vecs", ")", "+", "self", ".", "right_spans", "(", "span_vecs", ")", ".", "unsqueeze", "(", "\n", "-", "2", ")", ")", "# torch.Size([1, 21, 21, 150])", "\n", "# torch.Size([1, 9, 17, 150])", "\n", "# TODO: is self.right_spans good? or should there be a separate self.right_spans_entities?", "\n", "# TODO: surely there can be more inter-relational aspects between span and entity added into h_span_ent,", "\n", "#  check related work", "\n", "# h_final_coref = torch.cat([h_span_ent, h_inter_span], dim=-2)  # torch.Size([1, 9, 26, 150])", "\n", "# h_final_linking = torch.cat([h_span_ent, h_inter_span], dim=-2)  # torch.Size([1, 9, 26, 150])", "\n", "if", "self", ".", "filter_singletons_with_matrix", "and", "self", ".", "filter_with_matrix_type", "==", "'entity_nnet'", ":", "\n", "            ", "no_mention_col", "=", "torch", ".", "zeros", "(", "(", "entity_vecs", ".", "shape", "[", "0", "]", ",", "entity_vecs", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "torch", ".", "long", ",", "\n", "requires_grad", "=", "False", ",", "device", "=", "settings", ".", "device", ")", "\n", "no_mention_col", "[", ":", ",", ":", "]", "=", "self", ".", "dictionaries", "[", "'entities'", "]", ".", "lookup", "(", "'NONE'", ")", "\n", "no_mention_col_emb", "=", "self", ".", "entity_embedder", "(", "no_mention_col", ")", ".", "unsqueeze", "(", "-", "2", ")", "\n", "h_span_ent_nm", "=", "(", "self", ".", "left_entities", "(", "no_mention_col_emb", ")", "+", "self", ".", "right_spans", "(", "span_vecs", ")", ".", "unsqueeze", "(", "-", "2", ")", ")", "\n", "h_span_ent", "=", "torch", ".", "cat", "(", "[", "h_span_ent_nm", ",", "h_span_ent", "]", ",", "dim", "=", "-", "2", ")", "\n", "\n", "", "if", "self", ".", "filter_singletons_with_matrix", "and", "self", ".", "filter_with_matrix_type", "==", "'coref_nnet'", ":", "\n", "            ", "no_mention_col", "=", "torch", ".", "zeros", "(", "(", "entity_vecs", ".", "shape", "[", "0", "]", ",", "entity_vecs", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "torch", ".", "long", ",", "\n", "requires_grad", "=", "False", ",", "device", "=", "settings", ".", "device", ")", "\n", "no_mention_col", "[", ":", ",", ":", "]", "=", "self", ".", "dictionaries", "[", "'entities'", "]", ".", "lookup", "(", "'NONE'", ")", "\n", "no_mention_col_emb", "=", "self", ".", "entity_embedder", "(", "no_mention_col", ")", ".", "unsqueeze", "(", "-", "2", ")", "\n", "\n", "h_span_ent_nm", "=", "(", "self", ".", "left_entities", "(", "no_mention_col_emb", ")", "+", "self", ".", "right_spans", "(", "span_vecs", ")", ".", "unsqueeze", "(", "-", "2", ")", ")", "\n", "h_inter_span", "=", "torch", ".", "cat", "(", "[", "h_span_ent_nm", ",", "h_inter_span", "]", ",", "dim", "=", "-", "2", ")", "\n", "\n", "# previous version (span-based coreference)", "\n", "", "h_inter_span", "=", "self", ".", "dp1_coref", "(", "torch", ".", "relu", "(", "h_inter_span", ")", ")", "\n", "h_inter_span", "=", "self", ".", "layer2_coref", "(", "h_inter_span", ")", "\n", "h_inter_span", "=", "self", ".", "dp2_coref", "(", "torch", ".", "relu", "(", "h_inter_span", ")", ")", "\n", "out_coref_scores", "=", "self", ".", "out_coref", "(", "h_inter_span", ")", "# .shape --> torch.Size([1, 21, 21, 1])", "\n", "\n", "h_span_ent", "=", "self", ".", "dp1_linking", "(", "torch", ".", "relu", "(", "h_span_ent", ")", ")", "\n", "h_span_ent", "=", "self", ".", "layer2_linking", "(", "h_span_ent", ")", "\n", "h_span_ent", "=", "self", ".", "dp2_linking", "(", "torch", ".", "relu", "(", "h_span_ent", ")", ")", "\n", "out_linking_scores", "=", "self", ".", "out_linking", "(", "h_span_ent", ")", "# .shape --> torch.Size([1, 21, 16, 1])", "\n", "\n", "if", "self", ".", "filter_singletons_with_matrix", "and", "self", ".", "filter_with_matrix_type", "==", "'separate_nnet'", ":", "\n", "# h_all_spans = self.all_spans(span_vecs)", "\n", "            ", "h_all_spans", "=", "self", ".", "all_spans", "(", "span_vecs", ".", "unsqueeze", "(", "-", "2", ")", ")", "\n", "h_all_spans", "=", "self", ".", "dp1_is_not_mention", "(", "torch", ".", "relu", "(", "h_all_spans", ")", ")", "\n", "h_all_spans", "=", "self", ".", "layer2_is_not_mention", "(", "h_all_spans", ")", "\n", "h_all_spans", "=", "self", ".", "dp2_is_not_mention", "(", "h_all_spans", ")", "\n", "out_is_not_mention_scores", "=", "self", ".", "out_is_not_mention", "(", "h_all_spans", ")", "\n", "\n", "", "if", "self", ".", "filter_singletons_with_matrix", "and", "self", ".", "filter_with_matrix_type", "==", "'coref_nnet'", ":", "\n", "            ", "out_final_scores", "=", "torch", ".", "cat", "(", "\n", "[", "out_coref_scores", "[", ":", ",", ":", ",", ":", "1", ",", ":", "]", ",", "out_linking_scores", ",", "out_coref_scores", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "]", ",", "dim", "=", "-", "2", ")", "\n", "", "else", ":", "\n", "            ", "out_final_scores", "=", "torch", ".", "cat", "(", "[", "out_linking_scores", ",", "out_coref_scores", "]", ",", "dim", "=", "-", "2", ")", "\n", "\n", "", "if", "self", ".", "filter_singletons_with_matrix", "and", "self", ".", "filter_with_matrix_type", "==", "'separate_nnet'", ":", "\n", "            ", "out_final_scores", "=", "torch", ".", "cat", "(", "[", "out_is_not_mention_scores", ",", "out_final_scores", "]", ",", "dim", "=", "-", "2", ")", "\n", "\n", "", "return", "out_final_scores", "# .shape --> torch.Size([1, 21, 37, 1])", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerBaseHoi.make_linear": [[408, 416], ["torch.Linear", "torch.Linear", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.zeros_", "torch.nn.init.zeros_"], "methods", ["None"], ["def", "make_linear", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ")", ":", "\n", "        ", "linear", "=", "nn", ".", "Linear", "(", "in_features", ",", "out_features", ",", "bias", ")", "\n", "if", "self", ".", "init_weights", "is", "not", "None", ":", "\n", "            ", "init", ".", "normal_", "(", "linear", ".", "weight", ",", "std", "=", "self", ".", "init_weights", ")", "\n", "\n", "", "if", "bias", "and", "self", ".", "init_zeros_bias", ":", "\n", "            ", "init", ".", "zeros_", "(", "linear", ".", "bias", ")", "\n", "", "return", "linear", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerBaseHoi.make_ffnn": [[417, 437], ["range", "ffnn.append", "torch.Sequential", "torch.Sequential", "scorers.OptFFpairsCorefLinkerBaseHoi.make_linear", "isinstance", "len", "scorers.OptFFpairsCorefLinkerBaseHoi.make_linear", "scorers.OptFFpairsCorefLinkerBaseHoi.make_linear", "torch.ReLU", "torch.ReLU", "scorers.OptFFpairsCorefLinkerBaseHoi.make_linear", "scorers.OptFFpairsCorefLinkerBaseHoi.make_linear", "torch.ReLU", "torch.ReLU", "scorers.OptFFpairsCorefLinkerBaseHoi.make_linear"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_linear", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_linear", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_linear", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_linear", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_linear", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_linear"], ["", "def", "make_ffnn", "(", "self", ",", "feat_size", ",", "hidden_size", ",", "output_size", ",", "use_nonlinearity", "=", "False", ")", ":", "\n", "        ", "if", "hidden_size", "is", "None", "or", "hidden_size", "==", "0", "or", "hidden_size", "==", "[", "]", "or", "hidden_size", "==", "[", "0", "]", ":", "\n", "            ", "return", "self", ".", "make_linear", "(", "feat_size", ",", "output_size", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "hidden_size", ",", "Iterable", ")", ":", "\n", "            ", "hidden_size", "=", "[", "hidden_size", "]", "\n", "\n", "", "if", "use_nonlinearity", ":", "\n", "            ", "ffnn", "=", "[", "self", ".", "make_linear", "(", "feat_size", ",", "hidden_size", "[", "0", "]", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "self", ".", "dropout", "]", "\n", "", "else", ":", "\n", "            ", "ffnn", "=", "[", "self", ".", "make_linear", "(", "feat_size", ",", "hidden_size", "[", "0", "]", ")", ",", "self", ".", "dropout", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "1", ",", "len", "(", "hidden_size", ")", ")", ":", "\n", "            ", "if", "use_nonlinearity", ":", "\n", "                ", "ffnn", "+=", "[", "self", ".", "make_linear", "(", "hidden_size", "[", "i", "-", "1", "]", ",", "hidden_size", "[", "i", "]", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "self", ".", "dropout", "]", "\n", "", "else", ":", "\n", "                ", "ffnn", "+=", "[", "self", ".", "make_linear", "(", "hidden_size", "[", "i", "-", "1", "]", ",", "hidden_size", "[", "i", "]", ")", ",", "self", ".", "dropout", "]", "\n", "\n", "", "", "ffnn", ".", "append", "(", "self", ".", "make_linear", "(", "hidden_size", "[", "-", "1", "]", ",", "output_size", ")", ")", "\n", "return", "nn", ".", "Sequential", "(", "*", "ffnn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerBaseHoi.__init__": [[438, 524], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "scorers.OptFFpairsCorefLinkerBaseHoi.make_ffnn", "scorers.OptFFpairsCorefLinkerBaseHoi.make_ffnn", "scorers.OptFFpairsCorefLinkerBaseHoi.make_ffnn", "scorers.OptFFpairsCorefLinkerBaseHoi.make_ffnn", "scorers.OptFFpairsCorefLinkerBaseHoi.make_ffnn", "scorers.OptFFpairsCorefLinkerBaseHoi.make_ffnn", "scorers.OptFFpairsCorefLinkerBaseHoi.make_ffnn", "scorers.OptFFpairsCorefLinkerBaseHoi.make_ffnn", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_ffnn", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_ffnn", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_ffnn", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_ffnn", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_ffnn", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_ffnn", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_ffnn", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_ffnn"], ["", "def", "__init__", "(", "self", ",", "dim_input", ",", "entity_embedder", ",", "dim_output", ",", "config", ",", "span_pair_generator", ",", "\n", "filter_singletons_with_matrix", "=", "False", ",", "dictionaries", "=", "None", ")", ":", "\n", "# TODO: we are here dim_input_entities still has to be passed", "\n", "        ", "super", "(", "OptFFpairsCorefLinkerBaseHoi", ",", "self", ")", ".", "__init__", "(", ")", "\n", "hidden_dim", "=", "config", "[", "'hidden_dim'", "]", "# 150", "\n", "hidden_dp", "=", "config", "[", "'hidden_dropout'", "]", "# 0.4", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "hidden_dp", ")", "\n", "# the components are self.left_spans, self.right_spans, self.prod_spans, and self.dist_spans, normally 1 layer", "\n", "self", ".", "components_ffnn_depth", "=", "config", "[", "'components_ffnn_depth'", "]", "\n", "self", ".", "use_nonlinearity_components", "=", "config", "[", "'use_nonlinearity_components'", "]", "\n", "\n", "self", ".", "scorers_ffnn_depth", "=", "config", "[", "'scorers_ffnn_depth'", "]", "\n", "self", ".", "use_nonlinearity_scorers", "=", "config", "[", "'use_nonlinearity_scorers'", "]", "\n", "\n", "self", ".", "init_weights", "=", "config", "[", "'init_weights_std'", "]", "\n", "self", ".", "init_zeros_bias", "=", "config", "[", "'init_zeros_bias'", "]", "\n", "\n", "dim_input_entities", "=", "entity_embedder", ".", "dim", "\n", "self", ".", "dictionaries", "=", "dictionaries", "\n", "self", ".", "entity_embedder", "=", "entity_embedder", "\n", "\n", "self", ".", "span_pair_generator", "=", "span_pair_generator", "\n", "\n", "self", ".", "separate_right_spans_for_ent", "=", "config", "[", "'separate_right_spans_for_ent'", "]", "\n", "\n", "# TODO: these also replace in 1-layer nnets with/without relu", "\n", "# self.left_spans = nn.Linear(dim_input, hidden_dim)", "\n", "# self.right_spans = nn.Linear(dim_input, hidden_dim)", "\n", "# self.prod_spans = nn.Linear(dim_input, hidden_dim)", "\n", "# self.dist_spans = nn.Linear(span_pair_generator.dim_distance_embedding, hidden_dim)", "\n", "# self.left_entities = nn.Linear(dim_input_entities, hidden_dim)", "\n", "self", ".", "left_spans", "=", "self", ".", "make_ffnn", "(", "dim_input", ",", "[", "hidden_dim", "]", "*", "self", ".", "components_ffnn_depth", ",", "\n", "output_size", "=", "hidden_dim", ",", "\n", "use_nonlinearity", "=", "self", ".", "use_nonlinearity_components", ")", "\n", "\n", "self", ".", "right_spans", "=", "self", ".", "make_ffnn", "(", "dim_input", ",", "[", "hidden_dim", "]", "*", "self", ".", "components_ffnn_depth", ",", "\n", "output_size", "=", "hidden_dim", ",", "\n", "use_nonlinearity", "=", "self", ".", "use_nonlinearity_components", ")", "\n", "\n", "self", ".", "prod_spans", "=", "self", ".", "make_ffnn", "(", "dim_input", ",", "[", "hidden_dim", "]", "*", "self", ".", "components_ffnn_depth", ",", "\n", "output_size", "=", "hidden_dim", ",", "\n", "use_nonlinearity", "=", "self", ".", "use_nonlinearity_components", ")", "\n", "\n", "self", ".", "dist_spans", "=", "self", ".", "make_ffnn", "(", "span_pair_generator", ".", "dim_distance_embedding", ",", "\n", "[", "hidden_dim", "]", "*", "self", ".", "components_ffnn_depth", ",", "output_size", "=", "hidden_dim", ",", "\n", "use_nonlinearity", "=", "self", ".", "use_nonlinearity_components", ")", "\n", "\n", "self", ".", "left_entities", "=", "self", ".", "make_ffnn", "(", "dim_input_entities", ",", "\n", "[", "hidden_dim", "]", "*", "self", ".", "components_ffnn_depth", ",", "output_size", "=", "hidden_dim", ",", "\n", "use_nonlinearity", "=", "self", ".", "use_nonlinearity_components", ")", "\n", "\n", "if", "self", ".", "separate_right_spans_for_ent", ":", "\n", "            ", "self", ".", "right_spans_ent", "=", "self", ".", "make_ffnn", "(", "dim_input", ",", "[", "hidden_dim", "]", "*", "self", ".", "components_ffnn_depth", ",", "\n", "output_size", "=", "hidden_dim", ",", "\n", "use_nonlinearity", "=", "self", ".", "use_nonlinearity_components", ")", "\n", "\n", "# TODO: here build nnet for coref with/without relu in between (configurable)", "\n", "#  reference code: models.coreflinker.pruner.MentionPrunerSpanBertHoi.make_ffnn", "\n", "#", "\n", "# self.dp1_coref = nn.Dropout(hidden_dp)", "\n", "# self.layer2_coref = nn.Linear(hidden_dim, hidden_dim)", "\n", "# self.dp2_coref = nn.Dropout(hidden_dp)", "\n", "# self.out_coref = nn.Linear(hidden_dim, dim_output)", "\n", "", "self", ".", "scorer_coref", "=", "self", ".", "make_ffnn", "(", "hidden_dim", ",", "[", "hidden_dim", "]", "*", "self", ".", "scorers_ffnn_depth", ",", "\n", "output_size", "=", "dim_output", ",", "\n", "use_nonlinearity", "=", "self", ".", "use_nonlinearity_scorers", ")", "\n", "\n", "self", ".", "scorer_linker", "=", "self", ".", "make_ffnn", "(", "hidden_dim", ",", "[", "hidden_dim", "]", "*", "self", ".", "scorers_ffnn_depth", ",", "\n", "output_size", "=", "dim_output", ",", "\n", "use_nonlinearity", "=", "self", ".", "use_nonlinearity_scorers", ")", "\n", "# TODO: here build nnet for linking with/without relu in between (configurable)", "\n", "# self.dp1_linking = nn.Dropout(hidden_dp)", "\n", "# self.layer2_linking = nn.Linear(hidden_dim, hidden_dim)", "\n", "# self.dp2_linking = nn.Dropout(hidden_dp)", "\n", "# self.out_linking = nn.Linear(hidden_dim, dim_output)", "\n", "\n", "self", ".", "filter_singletons_with_matrix", "=", "filter_singletons_with_matrix", "\n", "self", ".", "filter_with_matrix_type", "=", "config", "[", "'filter_with_matrix_type'", "]", "\n", "if", "self", ".", "filter_singletons_with_matrix", "and", "self", ".", "filter_with_matrix_type", "==", "'separate_nnet'", ":", "\n", "# linear transformation from dim_input to hidden_dim, similar to left_spans, right_spans, prod_spans, etc..", "\n", "            ", "self", ".", "all_spans", "=", "nn", ".", "Linear", "(", "dim_input", ",", "hidden_dim", ")", "\n", "self", ".", "dp1_is_not_mention", "=", "nn", ".", "Dropout", "(", "hidden_dp", ")", "\n", "self", ".", "layer2_is_not_mention", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", "\n", "self", ".", "dp2_is_not_mention", "=", "nn", ".", "Dropout", "(", "hidden_dp", ")", "\n", "self", ".", "out_is_not_mention", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "dim_output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerBaseHoi.forward": [[525, 602], ["scorers.OptFFpairsCorefLinkerBaseHoi.span_pair_generator.get_product_embedding", "scorers.OptFFpairsCorefLinkerBaseHoi.span_pair_generator.get_distance_embedding", "scorers.OptFFpairsCorefLinkerBaseHoi.dropout", "scorers.OptFFpairsCorefLinkerBaseHoi.scorer_coref", "scorers.OptFFpairsCorefLinkerBaseHoi.dropout", "scorers.OptFFpairsCorefLinkerBaseHoi.scorer_linker", "scorers.OptFFpairsCorefLinkerBaseHoi.dist_spans", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "scorers.OptFFpairsCorefLinkerBaseHoi.dictionaries[].lookup", "scorers.OptFFpairsCorefLinkerBaseHoi.entity_embedder().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "scorers.OptFFpairsCorefLinkerBaseHoi.dictionaries[].lookup", "scorers.OptFFpairsCorefLinkerBaseHoi.entity_embedder().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "scorers.OptFFpairsCorefLinkerBaseHoi.all_spans", "scorers.OptFFpairsCorefLinkerBaseHoi.dp1_is_not_mention", "scorers.OptFFpairsCorefLinkerBaseHoi.layer2_is_not_mention", "scorers.OptFFpairsCorefLinkerBaseHoi.dp2_is_not_mention", "scorers.OptFFpairsCorefLinkerBaseHoi.out_is_not_mention", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "scorers.OptFFpairsCorefLinkerBaseHoi.prod_spans", "scorers.OptFFpairsCorefLinkerBaseHoi.left_entities", "scorers.OptFFpairsCorefLinkerBaseHoi.right_spans_ent().unsqueeze", "scorers.OptFFpairsCorefLinkerBaseHoi.left_entities", "scorers.OptFFpairsCorefLinkerBaseHoi.right_spans().unsqueeze", "span_vecs.unsqueeze", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "scorers.OptFFpairsCorefLinkerBaseHoi.left_spans().unsqueeze", "scorers.OptFFpairsCorefLinkerBaseHoi.right_spans().unsqueeze", "scorers.OptFFpairsCorefLinkerBaseHoi.entity_embedder", "scorers.OptFFpairsCorefLinkerBaseHoi.left_entities", "scorers.OptFFpairsCorefLinkerBaseHoi.right_spans_ent().unsqueeze", "scorers.OptFFpairsCorefLinkerBaseHoi.left_entities", "scorers.OptFFpairsCorefLinkerBaseHoi.right_spans().unsqueeze", "scorers.OptFFpairsCorefLinkerBaseHoi.entity_embedder", "scorers.OptFFpairsCorefLinkerBaseHoi.left_entities", "scorers.OptFFpairsCorefLinkerBaseHoi.right_spans_ent().unsqueeze", "scorers.OptFFpairsCorefLinkerBaseHoi.left_entities", "scorers.OptFFpairsCorefLinkerBaseHoi.right_spans().unsqueeze", "scorers.OptFFpairsCorefLinkerBaseHoi.right_spans_ent", "scorers.OptFFpairsCorefLinkerBaseHoi.right_spans", "scorers.OptFFpairsCorefLinkerBaseHoi.left_spans", "scorers.OptFFpairsCorefLinkerBaseHoi.right_spans", "scorers.OptFFpairsCorefLinkerBaseHoi.right_spans_ent", "scorers.OptFFpairsCorefLinkerBaseHoi.right_spans", "scorers.OptFFpairsCorefLinkerBaseHoi.right_spans_ent", "scorers.OptFFpairsCorefLinkerBaseHoi.right_spans"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.SpanPairs.get_product_embedding", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.SpanPairs.get_distance_embedding", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.dropout", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.dropout", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.kolitsas_e2e.prepro_util.SamplesGenerator.all_spans"], ["", "", "def", "forward", "(", "self", ",", "span_vecs", ",", "entity_vecs", ",", "span_begin", ",", "span_end", ",", "do_only_coref", ")", ":", "\n", "# span_vecs: torch.Size([1, 9, 9, 150])", "\n", "# entity_vecs: torch.Size([1, 9, 17, 200])", "\n", "        ", "prod_emb", "=", "self", ".", "span_pair_generator", ".", "get_product_embedding", "(", "span_vecs", ")", "# torch.Size([1, 9, 9, 1676])", "\n", "dist_emb", "=", "self", ".", "span_pair_generator", ".", "get_distance_embedding", "(", "span_begin", ",", "span_end", ")", "# torch.Size([1, 9, 9, 20])", "\n", "\n", "h_inter_span", "=", "self", ".", "left_spans", "(", "span_vecs", ")", ".", "unsqueeze", "(", "-", "2", ")", "+", "self", ".", "right_spans", "(", "span_vecs", ")", ".", "unsqueeze", "(", "-", "3", ")", "+", "self", ".", "prod_spans", "(", "prod_emb", ")", "+", "self", ".", "dist_spans", "(", "dist_emb", ")", "# torch.Size([1, 9, 9, 150])", "\n", "\n", "if", "self", ".", "separate_right_spans_for_ent", ":", "\n", "            ", "h_span_ent", "=", "(", "self", ".", "left_entities", "(", "entity_vecs", ")", "+", "self", ".", "right_spans_ent", "(", "span_vecs", ")", ".", "unsqueeze", "(", "-", "2", ")", ")", "\n", "", "else", ":", "\n", "            ", "h_span_ent", "=", "(", "self", ".", "left_entities", "(", "entity_vecs", ")", "+", "self", ".", "right_spans", "(", "span_vecs", ")", ".", "unsqueeze", "(", "-", "2", ")", ")", "\n", "# torch.Size([1, 9, 17, 150])", "\n", "# TODO: is self.right_spans good? or should there be a separate self.right_spans_entities?", "\n", "# TODO: surely there can be more inter-relational aspects between span and entity added into h_span_ent,", "\n", "#  check related work", "\n", "# h_final_coref = torch.cat([h_span_ent, h_inter_span], dim=-2)  # torch.Size([1, 9, 26, 150])", "\n", "# h_final_linking = torch.cat([h_span_ent, h_inter_span], dim=-2)  # torch.Size([1, 9, 26, 150])", "\n", "", "if", "self", ".", "filter_singletons_with_matrix", "and", "self", ".", "filter_with_matrix_type", "==", "'entity_nnet'", ":", "\n", "            ", "no_mention_col", "=", "torch", ".", "zeros", "(", "(", "entity_vecs", ".", "shape", "[", "0", "]", ",", "entity_vecs", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "torch", ".", "long", ",", "\n", "requires_grad", "=", "False", ",", "device", "=", "settings", ".", "device", ")", "\n", "no_mention_col", "[", ":", ",", ":", "]", "=", "self", ".", "dictionaries", "[", "'entities'", "]", ".", "lookup", "(", "'NONE'", ")", "\n", "no_mention_col_emb", "=", "self", ".", "entity_embedder", "(", "no_mention_col", ")", ".", "unsqueeze", "(", "-", "2", ")", "\n", "if", "self", ".", "separate_right_spans_for_ent", ":", "\n", "                ", "h_span_ent_nm", "=", "(", "self", ".", "left_entities", "(", "no_mention_col_emb", ")", "+", "self", ".", "right_spans_ent", "(", "span_vecs", ")", ".", "unsqueeze", "(", "-", "2", ")", ")", "\n", "", "else", ":", "\n", "                ", "h_span_ent_nm", "=", "(", "self", ".", "left_entities", "(", "no_mention_col_emb", ")", "+", "self", ".", "right_spans", "(", "span_vecs", ")", ".", "unsqueeze", "(", "-", "2", ")", ")", "\n", "", "h_span_ent", "=", "torch", ".", "cat", "(", "[", "h_span_ent_nm", ",", "h_span_ent", "]", ",", "dim", "=", "-", "2", ")", "\n", "\n", "", "if", "self", ".", "filter_singletons_with_matrix", "and", "self", ".", "filter_with_matrix_type", "==", "'coref_nnet'", ":", "\n", "            ", "no_mention_col", "=", "torch", ".", "zeros", "(", "(", "entity_vecs", ".", "shape", "[", "0", "]", ",", "entity_vecs", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "torch", ".", "long", ",", "\n", "requires_grad", "=", "False", ",", "device", "=", "settings", ".", "device", ")", "\n", "no_mention_col", "[", ":", ",", ":", "]", "=", "self", ".", "dictionaries", "[", "'entities'", "]", ".", "lookup", "(", "'NONE'", ")", "\n", "no_mention_col_emb", "=", "self", ".", "entity_embedder", "(", "no_mention_col", ")", ".", "unsqueeze", "(", "-", "2", ")", "\n", "if", "self", ".", "separate_right_spans_for_ent", ":", "\n", "                ", "h_span_ent_nm", "=", "(", "self", ".", "left_entities", "(", "no_mention_col_emb", ")", "+", "self", ".", "right_spans_ent", "(", "span_vecs", ")", ".", "unsqueeze", "(", "-", "2", ")", ")", "\n", "", "else", ":", "\n", "                ", "h_span_ent_nm", "=", "(", "self", ".", "left_entities", "(", "no_mention_col_emb", ")", "+", "self", ".", "right_spans", "(", "span_vecs", ")", ".", "unsqueeze", "(", "-", "2", ")", ")", "\n", "\n", "", "h_inter_span", "=", "torch", ".", "cat", "(", "[", "h_span_ent_nm", ",", "h_inter_span", "]", ",", "dim", "=", "-", "2", ")", "\n", "\n", "# previous version (span-based coreference)", "\n", "# h_inter_span = self.dp1_coref(torch.relu(h_inter_span))", "\n", "# h_inter_span = self.layer2_coref(h_inter_span)", "\n", "# h_inter_span = self.dp2_coref(torch.relu(h_inter_span))", "\n", "# out_coref_scores = self.out_coref(h_inter_span)", "\n", "", "h_inter_span", "=", "self", ".", "dropout", "(", "torch", ".", "relu", "(", "h_inter_span", ")", ")", "\n", "out_coref_scores", "=", "self", ".", "scorer_coref", "(", "h_inter_span", ")", "# --> .shape --> [1, 21, 21, 1]", "\n", "if", "do_only_coref", ":", "\n", "            ", "return", "out_coref_scores", "\n", "# h_span_ent = self.dp1_linking(torch.relu(h_span_ent))", "\n", "# h_span_ent = self.layer2_linking(h_span_ent)", "\n", "# h_span_ent = self.dp2_linking(torch.relu(h_span_ent))", "\n", "# out_linking_scores = self.out_linking(h_span_ent)", "\n", "\n", "", "h_span_ent", "=", "self", ".", "dropout", "(", "torch", ".", "relu", "(", "h_span_ent", ")", ")", "\n", "out_linking_scores", "=", "self", ".", "scorer_linker", "(", "h_span_ent", ")", "# --> .shape --> [1, 21, 16, 1]", "\n", "\n", "if", "self", ".", "filter_singletons_with_matrix", "and", "self", ".", "filter_with_matrix_type", "==", "'separate_nnet'", ":", "\n", "# h_all_spans = self.all_spans(span_vecs)", "\n", "            ", "h_all_spans", "=", "self", ".", "all_spans", "(", "span_vecs", ".", "unsqueeze", "(", "-", "2", ")", ")", "\n", "h_all_spans", "=", "self", ".", "dp1_is_not_mention", "(", "torch", ".", "relu", "(", "h_all_spans", ")", ")", "\n", "h_all_spans", "=", "self", ".", "layer2_is_not_mention", "(", "h_all_spans", ")", "\n", "h_all_spans", "=", "self", ".", "dp2_is_not_mention", "(", "h_all_spans", ")", "\n", "out_is_not_mention_scores", "=", "self", ".", "out_is_not_mention", "(", "h_all_spans", ")", "\n", "\n", "", "if", "self", ".", "filter_singletons_with_matrix", "and", "self", ".", "filter_with_matrix_type", "==", "'coref_nnet'", ":", "\n", "            ", "out_final_scores", "=", "torch", ".", "cat", "(", "\n", "[", "out_coref_scores", "[", ":", ",", ":", ",", ":", "1", ",", ":", "]", ",", "out_linking_scores", ",", "out_coref_scores", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "]", ",", "dim", "=", "-", "2", ")", "\n", "", "else", ":", "\n", "            ", "out_final_scores", "=", "torch", ".", "cat", "(", "[", "out_linking_scores", ",", "out_coref_scores", "]", ",", "dim", "=", "-", "2", ")", "\n", "\n", "", "if", "self", ".", "filter_singletons_with_matrix", "and", "self", ".", "filter_with_matrix_type", "==", "'separate_nnet'", ":", "\n", "            ", "out_final_scores", "=", "torch", ".", "cat", "(", "[", "out_is_not_mention_scores", ",", "out_final_scores", "]", ",", "dim", "=", "-", "2", ")", "\n", "\n", "", "return", "out_final_scores", "# .shape --> [1, 21, 37, 1]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_linear": [[609, 617], ["torch.Linear", "torch.Linear", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.zeros_", "torch.nn.init.zeros_"], "methods", ["None"], ["def", "make_linear", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ")", ":", "\n", "        ", "linear", "=", "nn", ".", "Linear", "(", "in_features", ",", "out_features", ",", "bias", ")", "\n", "if", "self", ".", "init_weights_std", "is", "not", "None", ":", "\n", "            ", "init", ".", "normal_", "(", "linear", ".", "weight", ",", "std", "=", "self", ".", "init_weights_std", ")", "\n", "\n", "", "if", "bias", "and", "self", ".", "init_zeros_bias", ":", "\n", "            ", "init", ".", "zeros_", "(", "linear", ".", "bias", ")", "\n", "", "return", "linear", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_ffnn": [[618, 632], ["range", "ffnn.append", "torch.Sequential", "torch.Sequential", "scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_linear", "isinstance", "scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_linear", "torch.ReLU", "torch.ReLU", "len", "scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_linear", "scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_linear", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_linear", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_linear", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_linear", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_linear"], ["", "def", "make_ffnn", "(", "self", ",", "feat_size", ",", "hidden_size", ",", "output_size", ")", ":", "\n", "        ", "if", "hidden_size", "is", "None", "or", "hidden_size", "==", "0", "or", "hidden_size", "==", "[", "]", "or", "hidden_size", "==", "[", "0", "]", ":", "\n", "            ", "return", "self", ".", "make_linear", "(", "feat_size", ",", "output_size", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "hidden_size", ",", "Iterable", ")", ":", "\n", "            ", "hidden_size", "=", "[", "hidden_size", "]", "\n", "\n", "", "ffnn", "=", "[", "self", ".", "make_linear", "(", "feat_size", ",", "hidden_size", "[", "0", "]", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "self", ".", "dropout", "]", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "hidden_size", ")", ")", ":", "\n", "            ", "ffnn", "+=", "[", "self", ".", "make_linear", "(", "hidden_size", "[", "i", "-", "1", "]", ",", "hidden_size", "[", "i", "]", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "self", ".", "dropout", "]", "\n", "\n", "", "ffnn", ".", "append", "(", "self", ".", "make_linear", "(", "hidden_size", "[", "-", "1", "]", ",", "output_size", ")", ")", "\n", "return", "nn", ".", "Sequential", "(", "*", "ffnn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.__init__": [[633, 719], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_ffnn", "scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_ffnn", "scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_ffnn", "scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_ffnn", "scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_ffnn", "scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_ffnn", "scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_ffnn", "scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_ffnn", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.nn.init.normal_", "torch.nn.init.normal_", "entity_embedder.embed.weight.mean().item", "entity_embedder.embed.weight.std().item", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "RuntimeError", "entity_embedder.embed.weight.mean", "entity_embedder.embed.weight.std"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_ffnn", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_ffnn", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_ffnn", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_ffnn", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_ffnn", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_ffnn", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_ffnn", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.make_ffnn"], ["", "def", "__init__", "(", "self", ",", "dim_input", ",", "entity_embedder", ",", "dim_output", ",", "config", ",", "span_pair_generator", ",", "dictionaries", "=", "None", ",", "\n", "zeros_to_clusters", "=", "False", ",", "zeros_to_links", "=", "False", ")", ":", "\n", "# TODO: we are here dim_input_entities still has to be passed", "\n", "        ", "super", "(", "OptFFpairsCorefLinkerMTTBaseHoi", ",", "self", ")", ".", "__init__", "(", ")", "\n", "hidden_dim", "=", "config", "[", "'hidden_dim'", "]", "# 150", "\n", "hidden_dp", "=", "config", "[", "'hidden_dropout'", "]", "# 0.4", "\n", "self", ".", "zeros_to_clusters", "=", "zeros_to_clusters", "\n", "self", ".", "zeros_to_links", "=", "zeros_to_links", "\n", "# self.nonlinear_function = config['nonlinear_function']", "\n", "\n", "dim_input_entities", "=", "entity_embedder", ".", "dim", "\n", "\n", "# self.root_embedding = torch.empty(dim_input_entities, device=settings.device,", "\n", "#                                   requires_grad=config['root_requires_grad'])", "\n", "\n", "self", ".", "init_weights_std", "=", "config", "[", "'init_weights_std'", "]", "\n", "self", ".", "init_root_type", "=", "config", "[", "'init_root_type'", "]", "\n", "self", ".", "init_root_std", "=", "config", "[", "'init_root_std'", "]", "\n", "self", ".", "root_requires_grad", "=", "config", "[", "'root_requires_grad'", "]", "\n", "self", ".", "apply_root_dropout", "=", "config", "[", "'apply_root_dropout'", "]", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "hidden_dp", ")", "\n", "# TODO init with 0.02?", "\n", "if", "not", "self", ".", "zeros_to_clusters", ":", "\n", "            ", "if", "self", ".", "init_root_type", "==", "'std'", ":", "\n", "                ", "self", ".", "root_embedding", "=", "torch", ".", "zeros", "(", "dim_input_entities", ",", "device", "=", "settings", ".", "device", ",", "\n", "requires_grad", "=", "config", "[", "'root_requires_grad'", "]", ")", "\n", "if", "self", ".", "init_root_std", "is", "not", "None", ":", "\n", "                    ", "init", ".", "normal_", "(", "self", ".", "root_embedding", ",", "std", "=", "self", ".", "init_root_std", ")", "\n", "", "else", ":", "\n", "                    ", "ent_emb_mean", "=", "entity_embedder", ".", "embed", ".", "weight", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "ent_emb_std", "=", "entity_embedder", ".", "embed", ".", "weight", ".", "std", "(", ")", ".", "item", "(", ")", "\n", "init", ".", "normal_", "(", "self", ".", "root_embedding", ",", "mean", "=", "ent_emb_mean", ",", "std", "=", "ent_emb_std", ")", "\n", "# self.root_embedding[:] = entity_embedder.embed.weight.detach().mean(dim=0)[:]", "\n", "", "", "elif", "self", ".", "init_root_type", "==", "'ones'", ":", "\n", "                ", "self", ".", "root_embedding", "=", "torch", ".", "ones", "(", "dim_input_entities", ",", "device", "=", "settings", ".", "device", ",", "\n", "requires_grad", "=", "config", "[", "'root_requires_grad'", "]", ")", "\n", "", "elif", "self", ".", "init_root_type", "==", "'zeros'", ":", "\n", "                ", "self", ".", "root_embedding", "=", "torch", ".", "zeros", "(", "dim_input_entities", ",", "device", "=", "settings", ".", "device", ",", "\n", "requires_grad", "=", "config", "[", "'root_requires_grad'", "]", ")", "\n", "", "else", ":", "\n", "                ", "raise", "RuntimeError", "(", "'Not recognized init_root_type in OptFFpairsCorefLinkerMTTBaseHoi: '", "+", "\n", "self", ".", "init_root_type", ")", "\n", "\n", "# self.A = nn.Parameter(A)", "\n", "\n", "", "", "self", ".", "dictionaries", "=", "dictionaries", "\n", "self", ".", "entity_embedder", "=", "entity_embedder", "\n", "\n", "self", ".", "span_pair_generator", "=", "span_pair_generator", "\n", "self", ".", "components_ffnn_depth", "=", "config", "[", "'components_ffnn_depth'", "]", "\n", "self", ".", "scorers_ffnn_depth", "=", "config", "[", "'scorers_ffnn_depth'", "]", "\n", "self", ".", "init_zeros_bias", "=", "config", "[", "'init_zeros_bias'", "]", "\n", "self", ".", "separate_right_spans_for_ent", "=", "config", "[", "'separate_right_spans_for_ent'", "]", "\n", "# self.left_spans = nn.Linear(dim_input, hidden_dim)", "\n", "# self.right_spans = nn.Linear(dim_input, hidden_dim)", "\n", "# self.prod_spans = nn.Linear(dim_input, hidden_dim)", "\n", "# self.dist_spans = nn.Linear(span_pair_generator.dim_distance_embedding, hidden_dim)", "\n", "# self.left_entities = nn.Linear(dim_input_entities, hidden_dim)", "\n", "\n", "self", ".", "left_spans", "=", "self", ".", "make_ffnn", "(", "dim_input", ",", "[", "hidden_dim", "]", "*", "self", ".", "components_ffnn_depth", ",", "output_size", "=", "hidden_dim", ")", "\n", "\n", "self", ".", "right_spans", "=", "self", ".", "make_ffnn", "(", "dim_input", ",", "[", "hidden_dim", "]", "*", "self", ".", "components_ffnn_depth", ",", "output_size", "=", "hidden_dim", ")", "\n", "\n", "if", "self", ".", "separate_right_spans_for_ent", ":", "\n", "            ", "self", ".", "right_spans_ent", "=", "self", ".", "make_ffnn", "(", "dim_input", ",", "[", "hidden_dim", "]", "*", "self", ".", "components_ffnn_depth", ",", "\n", "output_size", "=", "hidden_dim", ")", "\n", "\n", "", "self", ".", "prod_spans", "=", "self", ".", "make_ffnn", "(", "dim_input", ",", "[", "hidden_dim", "]", "*", "self", ".", "components_ffnn_depth", ",", "output_size", "=", "hidden_dim", ")", "\n", "self", ".", "dist_spans", "=", "self", ".", "make_ffnn", "(", "span_pair_generator", ".", "dim_distance_embedding", ",", "\n", "[", "hidden_dim", "]", "*", "self", ".", "components_ffnn_depth", ",", "output_size", "=", "hidden_dim", ")", "\n", "self", ".", "left_entities", "=", "self", ".", "make_ffnn", "(", "dim_input_entities", ",", "\n", "[", "hidden_dim", "]", "*", "self", ".", "components_ffnn_depth", ",", "output_size", "=", "hidden_dim", ")", "\n", "\n", "# self.dp1_coref = nn.Dropout(hidden_dp)", "\n", "# self.layer2_coref = nn.Linear(hidden_dim, hidden_dim)", "\n", "# self.dp2_coref = nn.Dropout(hidden_dp)", "\n", "# self.out_coref = nn.Linear(hidden_dim, dim_output)", "\n", "self", ".", "scorer_coref", "=", "self", ".", "make_ffnn", "(", "hidden_dim", ",", "[", "hidden_dim", "]", "*", "self", ".", "scorers_ffnn_depth", ",", "output_size", "=", "dim_output", ")", "\n", "\n", "# self.dp1_linking = nn.Dropout(hidden_dp)", "\n", "# self.layer2_linking = nn.Linear(hidden_dim, hidden_dim)", "\n", "# self.dp2_linking = nn.Dropout(hidden_dp)", "\n", "# self.out_linking = nn.Linear(hidden_dim, dim_output)", "\n", "\n", "self", ".", "scorer_linker", "=", "self", ".", "make_ffnn", "(", "hidden_dim", ",", "[", "hidden_dim", "]", "*", "self", ".", "scorers_ffnn_depth", ",", "output_size", "=", "dim_output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBaseHoi.forward": [[730, 841], ["scorers.OptFFpairsCorefLinkerMTTBaseHoi.span_pair_generator.get_product_embedding", "scorers.OptFFpairsCorefLinkerMTTBaseHoi.span_pair_generator.get_distance_embedding", "scorers.OptFFpairsCorefLinkerMTTBaseHoi.dropout", "scorers.OptFFpairsCorefLinkerMTTBaseHoi.scorer_coref", "scorers.OptFFpairsCorefLinkerMTTBaseHoi.dropout", "scorers.OptFFpairsCorefLinkerMTTBaseHoi.scorer_linker", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "scorers.OptFFpairsCorefLinkerMTTBaseHoi.dist_spans", "scorers.OptFFpairsCorefLinkerMTTBaseHoi.root_embedding.repeat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "scorers.OptFFpairsCorefLinkerMTTBaseHoi.prod_spans", "scorers.OptFFpairsCorefLinkerMTTBaseHoi.dropout", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "scorers.OptFFpairsCorefLinkerMTTBaseHoi.left_spans().unsqueeze", "scorers.OptFFpairsCorefLinkerMTTBaseHoi.right_spans().unsqueeze", "scorers.OptFFpairsCorefLinkerMTTBaseHoi.left_entities", "scorers.OptFFpairsCorefLinkerMTTBaseHoi.right_spans_ent().unsqueeze", "scorers.OptFFpairsCorefLinkerMTTBaseHoi.left_entities", "scorers.OptFFpairsCorefLinkerMTTBaseHoi.right_spans().unsqueeze", "scorers.OptFFpairsCorefLinkerMTTBaseHoi.left_entities", "scorers.OptFFpairsCorefLinkerMTTBaseHoi.right_spans_ent().unsqueeze", "scorers.OptFFpairsCorefLinkerMTTBaseHoi.left_entities", "scorers.OptFFpairsCorefLinkerMTTBaseHoi.right_spans().unsqueeze", "scorers.OptFFpairsCorefLinkerMTTBaseHoi.left_spans", "scorers.OptFFpairsCorefLinkerMTTBaseHoi.right_spans", "scorers.OptFFpairsCorefLinkerMTTBaseHoi.right_spans_ent", "scorers.OptFFpairsCorefLinkerMTTBaseHoi.right_spans", "scorers.OptFFpairsCorefLinkerMTTBaseHoi.right_spans_ent", "scorers.OptFFpairsCorefLinkerMTTBaseHoi.right_spans"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.SpanPairs.get_product_embedding", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.SpanPairs.get_distance_embedding", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.dropout", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.dropout", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.bert.modeling.dropout"], ["", "def", "forward", "(", "self", ",", "span_vecs", ",", "entity_vecs", ",", "span_begin", ",", "span_end", ",", "candidate_lengths", ",", "max_cand_length", ")", ":", "\n", "# span_vecs: torch.Size([1, 9, 9, 150])", "\n", "# entity_vecs: torch.Size([1, 9, 17, 200])", "\n", "        ", "p", "=", "self", ".", "span_pair_generator", ".", "get_product_embedding", "(", "span_vecs", ")", "# torch.Size([1, 9, 9, 1676])", "\n", "d", "=", "self", ".", "span_pair_generator", ".", "get_distance_embedding", "(", "span_begin", ",", "span_end", ")", "# torch.Size([1, 9, 9, 20])", "\n", "\n", "h_inter_span", "=", "self", ".", "left_spans", "(", "span_vecs", ")", ".", "unsqueeze", "(", "-", "2", ")", "+", "self", ".", "right_spans", "(", "span_vecs", ")", ".", "unsqueeze", "(", "-", "3", ")", "+", "self", ".", "prod_spans", "(", "p", ")", "+", "self", ".", "dist_spans", "(", "d", ")", "# torch.Size([1, 9, 9, 150])", "\n", "\n", "# TODO: ideas to make this expansion cleaner?", "\n", "# todo: MAYBE USE EXPAND??: https://discuss.pytorch.org/t/torch-repeat-and-torch-expand-which-to-use/27969/2", "\n", "if", "not", "self", ".", "zeros_to_clusters", ":", "\n", "            ", "rooted_entity_vecs", "=", "self", ".", "root_embedding", ".", "repeat", "(", "entity_vecs", ".", "shape", "[", "0", "]", ",", "entity_vecs", ".", "shape", "[", "1", "]", ",", "1", ",", "1", ")", "\n", "if", "self", ".", "root_requires_grad", "and", "self", ".", "apply_root_dropout", ":", "# dropout is applied if the root embeddings are learned", "\n", "                ", "rooted_entity_vecs", "=", "self", ".", "dropout", "(", "rooted_entity_vecs", ")", "\n", "# max_cands = torch.max(candidate_lengths)", "\n", "", "if", "max_cand_length", "==", "0", ":", "\n", "# if torch.max(candidate_lengths) < 0.5:", "\n", "# if there are no candidates, no need to concatenate, with root is enough", "\n", "                ", "entity_vecs", "=", "rooted_entity_vecs", "\n", "", "else", ":", "\n", "# entity_vecs = torch.cat([rooted_entity_vecs, entity_vecs[:, :, :max_cands, :]], dim=-2)", "\n", "                ", "entity_vecs", "=", "torch", ".", "cat", "(", "[", "rooted_entity_vecs", ",", "entity_vecs", "]", ",", "dim", "=", "-", "2", ")", "\n", "# entity_vecs.shape --> torch.Size([1, 21, 17, 200])", "\n", "", "if", "self", ".", "separate_right_spans_for_ent", ":", "\n", "                ", "h_span_ent", "=", "(", "self", ".", "left_entities", "(", "entity_vecs", ")", "+", "self", ".", "right_spans_ent", "(", "span_vecs", ")", ".", "unsqueeze", "(", "-", "2", ")", ")", "\n", "", "else", ":", "\n", "                ", "h_span_ent", "=", "(", "self", ".", "left_entities", "(", "entity_vecs", ")", "+", "self", ".", "right_spans", "(", "span_vecs", ")", ".", "unsqueeze", "(", "-", "2", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "max_cand_length", "==", "0", ":", "\n", "                ", "h_span_ent", "=", "None", "\n", "", "else", ":", "\n", "                ", "if", "self", ".", "separate_right_spans_for_ent", ":", "\n", "                    ", "h_span_ent", "=", "(", "self", ".", "left_entities", "(", "entity_vecs", ")", "+", "self", ".", "right_spans_ent", "(", "span_vecs", ")", ".", "unsqueeze", "(", "-", "2", ")", ")", "\n", "", "else", ":", "\n", "                    ", "h_span_ent", "=", "(", "self", ".", "left_entities", "(", "entity_vecs", ")", "+", "self", ".", "right_spans", "(", "span_vecs", ")", ".", "unsqueeze", "(", "-", "2", ")", ")", "\n", "\n", "# torch.Size([1, 9, 17, 150])", "\n", "# TODO: is self.right_spans good? or should there be a separate self.right_spans_entities?", "\n", "# TODO: surely there can be more inter-relational aspects between span and entity added into h_span_ent,", "\n", "#  check related work", "\n", "# h_final_coref = torch.cat([h_span_ent, h_inter_span], dim=-2)  # torch.Size([1, 9, 26, 150])", "\n", "# h_final_linking = torch.cat([h_span_ent, h_inter_span], dim=-2)  # torch.Size([1, 9, 26, 150])", "\n", "\n", "# %%%%%%%%%%%%%%%%%%%%% BEGIN - singletons with matrix code used in the coreflinker setup", "\n", "# if self.filter_singletons_with_matrix and self.filter_with_matrix_type == 'entity_nnet':", "\n", "#     no_mention_col = torch.zeros((entity_vecs.shape[0], entity_vecs.shape[1]), dtype=torch.long,", "\n", "#                                  requires_grad=False, device=settings.device)", "\n", "#     no_mention_col[:, :] = self.dictionaries['entities'].lookup('NONE')", "\n", "#     no_mention_col_emb = self.entity_embedder(no_mention_col).unsqueeze(-2)", "\n", "#     h_span_ent_nm = (self.left_entities(no_mention_col_emb) + self.right_spans(span_vecs).unsqueeze(-2))", "\n", "#     h_span_ent = torch.cat([h_span_ent_nm, h_span_ent], dim=-2)", "\n", "#", "\n", "# if self.filter_singletons_with_matrix and self.filter_with_matrix_type == 'coref_nnet':", "\n", "#     no_mention_col = torch.zeros((entity_vecs.shape[0], entity_vecs.shape[1]), dtype=torch.long,", "\n", "#                                  requires_grad=False, device=settings.device)", "\n", "#     no_mention_col[:, :] = self.dictionaries['entities'].lookup('NONE')", "\n", "#     no_mention_col_emb = self.entity_embedder(no_mention_col).unsqueeze(-2)", "\n", "#", "\n", "#     h_span_ent_nm = (self.left_entities(no_mention_col_emb) + self.right_spans(span_vecs).unsqueeze(-2))", "\n", "#     h_inter_span = torch.cat([h_span_ent_nm, h_inter_span], dim=-2)", "\n", "# %%%%%%%%%%%%%%%%%%%%% END - singletons with matrix code used in the coreflinker setup", "\n", "\n", "# previous version (span-based coreference)", "\n", "# h_inter_span = self.dp1_coref(torch.relu(h_inter_span))", "\n", "# h_inter_span = self.layer2_coref(h_inter_span)", "\n", "# h_inter_span = self.dp2_coref(torch.relu(h_inter_span))", "\n", "# out_coref_scores = self.out_coref(h_inter_span)", "\n", "\n", "", "", "", "h_inter_span", "=", "self", ".", "dropout", "(", "torch", ".", "relu", "(", "h_inter_span", ")", ")", "\n", "out_coref_scores", "=", "self", ".", "scorer_coref", "(", "h_inter_span", ")", "\n", "# out_coref_scores.shape --> torch.Size([1, 21, 21, 1])", "\n", "\n", "# h_inter_span = self.dp1_coref(torch.relu(h_inter_span))", "\n", "# h_inter_span = self.layer2_coref(h_inter_span)", "\n", "# h_inter_span = self.dp2_coref(torch.relu(h_inter_span))", "\n", "# out_coref_scores = self.out_coref(h_inter_span)", "\n", "\n", "# h_span_ent = self.dp1_linking(torch.relu(h_span_ent))", "\n", "# h_span_ent = self.layer2_linking(h_span_ent)", "\n", "# h_span_ent = self.dp2_linking(torch.relu(h_span_ent))", "\n", "# out_linking_scores = self.out_linking(h_span_ent)", "\n", "\n", "h_span_ent", "=", "self", ".", "dropout", "(", "torch", ".", "relu", "(", "h_span_ent", ")", ")", "\n", "out_linking_scores", "=", "self", ".", "scorer_linker", "(", "h_span_ent", ")", "\n", "# out_linking_scores.shape --> torch.Size([1, 21, 17, 1])", "\n", "\n", "# if self.filter_singletons_with_matrix and self.filter_with_matrix_type == 'separate_nnet':", "\n", "#     # h_all_spans = self.all_spans(span_vecs)", "\n", "#     h_all_spans = self.all_spans(span_vecs.unsqueeze(-2))", "\n", "#     h_all_spans = self.dp1_is_not_mention(torch.relu(h_all_spans))", "\n", "#     h_all_spans = self.layer2_is_not_mention(h_all_spans)", "\n", "#     h_all_spans = self.dp2_is_not_mention(h_all_spans)", "\n", "#     out_is_not_mention_scores = self.out_is_not_mention(h_all_spans)", "\n", "\n", "out_final_scores", "=", "torch", ".", "cat", "(", "[", "out_linking_scores", ",", "out_coref_scores", "]", ",", "dim", "=", "-", "2", ")", "\n", "# out_final_scores.shape --> torch.Size([1, 21, 38, 1])", "\n", "# if self.nonlinear_function is not None:", "\n", "#     if self.nonlinear_function == 'arsinh':", "\n", "#         out_final_scores = torch.arcsinh(out_final_scores)", "\n", "# if self.filter_singletons_with_matrix and self.filter_with_matrix_type == 'separate_nnet':", "\n", "#     out_final_scores = torch.cat([out_is_not_mention_scores, out_final_scores], dim=-2)", "\n", "\n", "# return out_final_scores.double() # !!SEE IF THIS CONVERSION TO FLOAT64 IS NECESSARY", "\n", "\n", "if", "self", ".", "zeros_to_clusters", ":", "\n", "# adds the zeros to cluster", "\n", "            ", "zeros_col", "=", "torch", ".", "zeros", "(", "(", "out_final_scores", ".", "shape", "[", "0", "]", ",", "out_final_scores", ".", "shape", "[", "1", "]", ",", "1", ",", "1", ")", ",", "\n", "device", "=", "settings", ".", "device", ")", "\n", "out_final_scores", "=", "torch", ".", "cat", "(", "[", "zeros_col", ",", "out_final_scores", "]", ",", "dim", "=", "-", "2", ")", "\n", "", "return", "out_final_scores", "# !!SEE IF THIS CONVERSION TO FLOAT64 IS NECESSARY", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBase.__init__": [[847, 885], ["torch.Module.__init__", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "entity_embedder.embed.weight.detach().mean", "entity_embedder.embed.weight.detach"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["def", "__init__", "(", "self", ",", "dim_input", ",", "entity_embedder", ",", "dim_output", ",", "config", ",", "span_pair_generator", ",", "dictionaries", "=", "None", ")", ":", "\n", "# TODO: we are here dim_input_entities still has to be passed", "\n", "        ", "super", "(", "OptFFpairsCorefLinkerMTTBase", ",", "self", ")", ".", "__init__", "(", ")", "\n", "hidden_dim", "=", "config", "[", "'hidden_dim'", "]", "# 150", "\n", "hidden_dp", "=", "config", "[", "'hidden_dropout'", "]", "# 0.4", "\n", "# self.nonlinear_function = config['nonlinear_function']", "\n", "\n", "dim_input_entities", "=", "entity_embedder", ".", "dim", "\n", "\n", "# self.root_embedding = torch.empty(dim_input_entities, device=settings.device,", "\n", "#                                   requires_grad=config['root_requires_grad'])", "\n", "self", ".", "root_embedding", "=", "torch", ".", "zeros", "(", "dim_input_entities", ",", "device", "=", "settings", ".", "device", ",", "\n", "requires_grad", "=", "config", "[", "'root_requires_grad'", "]", ")", "\n", "\n", "self", ".", "root_embedding", "[", ":", "]", "=", "entity_embedder", ".", "embed", ".", "weight", ".", "detach", "(", ")", ".", "mean", "(", "dim", "=", "0", ")", "[", ":", "]", "\n", "\n", "# self.A = nn.Parameter(A)", "\n", "\n", "self", ".", "dictionaries", "=", "dictionaries", "\n", "self", ".", "entity_embedder", "=", "entity_embedder", "\n", "\n", "self", ".", "span_pair_generator", "=", "span_pair_generator", "\n", "self", ".", "left_spans", "=", "nn", ".", "Linear", "(", "dim_input", ",", "hidden_dim", ")", "\n", "self", ".", "right_spans", "=", "nn", ".", "Linear", "(", "dim_input", ",", "hidden_dim", ")", "\n", "self", ".", "prod_spans", "=", "nn", ".", "Linear", "(", "dim_input", ",", "hidden_dim", ")", "\n", "self", ".", "dist_spans", "=", "nn", ".", "Linear", "(", "span_pair_generator", ".", "dim_distance_embedding", ",", "hidden_dim", ")", "\n", "\n", "self", ".", "left_entities", "=", "nn", ".", "Linear", "(", "dim_input_entities", ",", "hidden_dim", ")", "\n", "\n", "self", ".", "dp1_coref", "=", "nn", ".", "Dropout", "(", "hidden_dp", ")", "\n", "self", ".", "layer2_coref", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", "\n", "self", ".", "dp2_coref", "=", "nn", ".", "Dropout", "(", "hidden_dp", ")", "\n", "self", ".", "out_coref", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "dim_output", ")", "\n", "\n", "self", ".", "dp1_linking", "=", "nn", ".", "Dropout", "(", "hidden_dp", ")", "\n", "self", ".", "layer2_linking", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", "\n", "self", ".", "dp2_linking", "=", "nn", ".", "Dropout", "(", "hidden_dp", ")", "\n", "self", ".", "out_linking", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "dim_output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.OptFFpairsCorefLinkerMTTBase.forward": [[896, 977], ["scorers.OptFFpairsCorefLinkerMTTBase.span_pair_generator.get_product_embedding", "scorers.OptFFpairsCorefLinkerMTTBase.span_pair_generator.get_distance_embedding", "scorers.OptFFpairsCorefLinkerMTTBase.root_embedding.repeat", "scorers.OptFFpairsCorefLinkerMTTBase.dp1_coref", "scorers.OptFFpairsCorefLinkerMTTBase.layer2_coref", "scorers.OptFFpairsCorefLinkerMTTBase.dp2_coref", "scorers.OptFFpairsCorefLinkerMTTBase.out_coref", "scorers.OptFFpairsCorefLinkerMTTBase.dp1_linking", "scorers.OptFFpairsCorefLinkerMTTBase.layer2_linking", "scorers.OptFFpairsCorefLinkerMTTBase.dp2_linking", "scorers.OptFFpairsCorefLinkerMTTBase.out_linking", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "scorers.OptFFpairsCorefLinkerMTTBase.dist_spans", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "scorers.OptFFpairsCorefLinkerMTTBase.left_entities", "scorers.OptFFpairsCorefLinkerMTTBase.right_spans().unsqueeze", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "scorers.OptFFpairsCorefLinkerMTTBase.prod_spans", "scorers.OptFFpairsCorefLinkerMTTBase.left_spans().unsqueeze", "scorers.OptFFpairsCorefLinkerMTTBase.right_spans().unsqueeze", "scorers.OptFFpairsCorefLinkerMTTBase.right_spans", "scorers.OptFFpairsCorefLinkerMTTBase.left_spans", "scorers.OptFFpairsCorefLinkerMTTBase.right_spans"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.SpanPairs.get_product_embedding", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.SpanPairs.get_distance_embedding"], ["", "def", "forward", "(", "self", ",", "span_vecs", ",", "entity_vecs", ",", "span_begin", ",", "span_end", ",", "candidate_lengths", ",", "max_cand_length", ")", ":", "\n", "# span_vecs: torch.Size([1, 9, 9, 150])", "\n", "# entity_vecs: torch.Size([1, 9, 17, 200])", "\n", "        ", "p", "=", "self", ".", "span_pair_generator", ".", "get_product_embedding", "(", "span_vecs", ")", "# torch.Size([1, 9, 9, 1676])", "\n", "d", "=", "self", ".", "span_pair_generator", ".", "get_distance_embedding", "(", "span_begin", ",", "span_end", ")", "# torch.Size([1, 9, 9, 20])", "\n", "\n", "h_inter_span", "=", "self", ".", "left_spans", "(", "span_vecs", ")", ".", "unsqueeze", "(", "-", "2", ")", "+", "self", ".", "right_spans", "(", "span_vecs", ")", ".", "unsqueeze", "(", "-", "3", ")", "+", "self", ".", "prod_spans", "(", "p", ")", "+", "self", ".", "dist_spans", "(", "d", ")", "# torch.Size([1, 9, 9, 150])", "\n", "\n", "# TODO: ideas to make this expansion cleaner?", "\n", "# todo: MAYBE USE EXPAND??: https://discuss.pytorch.org/t/torch-repeat-and-torch-expand-which-to-use/27969/2", "\n", "rooted_entity_vecs", "=", "self", ".", "root_embedding", ".", "repeat", "(", "entity_vecs", ".", "shape", "[", "0", "]", ",", "entity_vecs", ".", "shape", "[", "1", "]", ",", "1", ",", "1", ")", "\n", "# max_cands = torch.max(candidate_lengths)", "\n", "if", "max_cand_length", "==", "0", ":", "\n", "# if torch.max(candidate_lengths) < 0.5:", "\n", "# if there are no candidates, no need to concatenate, with root is enough", "\n", "            ", "entity_vecs", "=", "rooted_entity_vecs", "\n", "", "else", ":", "\n", "# entity_vecs = torch.cat([rooted_entity_vecs, entity_vecs[:, :, :max_cands, :]], dim=-2)", "\n", "            ", "entity_vecs", "=", "torch", ".", "cat", "(", "[", "rooted_entity_vecs", ",", "entity_vecs", "]", ",", "dim", "=", "-", "2", ")", "\n", "\n", "", "h_span_ent", "=", "(", "self", ".", "left_entities", "(", "entity_vecs", ")", "+", "self", ".", "right_spans", "(", "span_vecs", ")", ".", "unsqueeze", "(", "-", "2", ")", ")", "\n", "# torch.Size([1, 9, 17, 150])", "\n", "# TODO: is self.right_spans good? or should there be a separate self.right_spans_entities?", "\n", "# TODO: surely there can be more inter-relational aspects between span and entity added into h_span_ent,", "\n", "#  check related work", "\n", "# h_final_coref = torch.cat([h_span_ent, h_inter_span], dim=-2)  # torch.Size([1, 9, 26, 150])", "\n", "# h_final_linking = torch.cat([h_span_ent, h_inter_span], dim=-2)  # torch.Size([1, 9, 26, 150])", "\n", "\n", "# %%%%%%%%%%%%%%%%%%%%% BEGIN - singletons with matrix code used in the coreflinker setup", "\n", "# if self.filter_singletons_with_matrix and self.filter_with_matrix_type == 'entity_nnet':", "\n", "#     no_mention_col = torch.zeros((entity_vecs.shape[0], entity_vecs.shape[1]), dtype=torch.long,", "\n", "#                                  requires_grad=False, device=settings.device)", "\n", "#     no_mention_col[:, :] = self.dictionaries['entities'].lookup('NONE')", "\n", "#     no_mention_col_emb = self.entity_embedder(no_mention_col).unsqueeze(-2)", "\n", "#     h_span_ent_nm = (self.left_entities(no_mention_col_emb) + self.right_spans(span_vecs).unsqueeze(-2))", "\n", "#     h_span_ent = torch.cat([h_span_ent_nm, h_span_ent], dim=-2)", "\n", "#", "\n", "# if self.filter_singletons_with_matrix and self.filter_with_matrix_type == 'coref_nnet':", "\n", "#     no_mention_col = torch.zeros((entity_vecs.shape[0], entity_vecs.shape[1]), dtype=torch.long,", "\n", "#                                  requires_grad=False, device=settings.device)", "\n", "#     no_mention_col[:, :] = self.dictionaries['entities'].lookup('NONE')", "\n", "#     no_mention_col_emb = self.entity_embedder(no_mention_col).unsqueeze(-2)", "\n", "#", "\n", "#     h_span_ent_nm = (self.left_entities(no_mention_col_emb) + self.right_spans(span_vecs).unsqueeze(-2))", "\n", "#     h_inter_span = torch.cat([h_span_ent_nm, h_inter_span], dim=-2)", "\n", "# %%%%%%%%%%%%%%%%%%%%% END - singletons with matrix code used in the coreflinker setup", "\n", "\n", "# previous version (span-based coreference)", "\n", "h_inter_span", "=", "self", ".", "dp1_coref", "(", "torch", ".", "relu", "(", "h_inter_span", ")", ")", "\n", "h_inter_span", "=", "self", ".", "layer2_coref", "(", "h_inter_span", ")", "\n", "h_inter_span", "=", "self", ".", "dp2_coref", "(", "torch", ".", "relu", "(", "h_inter_span", ")", ")", "\n", "out_coref_scores", "=", "self", ".", "out_coref", "(", "h_inter_span", ")", "\n", "\n", "h_span_ent", "=", "self", ".", "dp1_linking", "(", "torch", ".", "relu", "(", "h_span_ent", ")", ")", "\n", "h_span_ent", "=", "self", ".", "layer2_linking", "(", "h_span_ent", ")", "\n", "h_span_ent", "=", "self", ".", "dp2_linking", "(", "torch", ".", "relu", "(", "h_span_ent", ")", ")", "\n", "out_linking_scores", "=", "self", ".", "out_linking", "(", "h_span_ent", ")", "\n", "\n", "# if self.filter_singletons_with_matrix and self.filter_with_matrix_type == 'separate_nnet':", "\n", "#     # h_all_spans = self.all_spans(span_vecs)", "\n", "#     h_all_spans = self.all_spans(span_vecs.unsqueeze(-2))", "\n", "#     h_all_spans = self.dp1_is_not_mention(torch.relu(h_all_spans))", "\n", "#     h_all_spans = self.layer2_is_not_mention(h_all_spans)", "\n", "#     h_all_spans = self.dp2_is_not_mention(h_all_spans)", "\n", "#     out_is_not_mention_scores = self.out_is_not_mention(h_all_spans)", "\n", "\n", "# if self.filter_singletons_with_matrix and self.filter_with_matrix_type == 'coref_nnet':", "\n", "#     out_final_scores = torch.cat(", "\n", "#         [out_coref_scores[:, :, :1, :], out_linking_scores, out_coref_scores[:, :, 1:, :]], dim=-2)", "\n", "# else:", "\n", "\n", "out_final_scores", "=", "torch", ".", "cat", "(", "[", "out_linking_scores", ",", "out_coref_scores", "]", ",", "dim", "=", "-", "2", ")", "\n", "# if self.nonlinear_function is not None:", "\n", "#     if self.nonlinear_function == 'arsinh':", "\n", "#         out_final_scores = torch.arcsinh(out_final_scores)", "\n", "# if self.filter_singletons_with_matrix and self.filter_with_matrix_type == 'separate_nnet':", "\n", "#     out_final_scores = torch.cat([out_is_not_mention_scores, out_final_scores], dim=-2)", "\n", "\n", "# return out_final_scores.double() # !!SEE IF THIS CONVERSION TO FLOAT64 IS NECESSARY", "\n", "return", "out_final_scores", "# !!SEE IF THIS CONVERSION TO FLOAT64 IS NECESSARY", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.DotPairs.__init__": [[981, 997], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_input", ",", "dim_output", ",", "config", ",", "span_pair_generator", ")", ":", "\n", "        ", "super", "(", "DotPairs", ",", "self", ")", ".", "__init__", "(", ")", "\n", "hidden_dim", "=", "config", "[", "'hidden_dim'", "]", "# 150", "\n", "hidden_dp", "=", "config", "[", "'hidden_dropout'", "]", "# 0.4", "\n", "\n", "self", ".", "left", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "dim_input", ",", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "hidden_dp", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", "\n", ")", "\n", "self", ".", "right", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "dim_input", ",", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "hidden_dp", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.DotPairs.forward": [[999, 1004], ["scorers.DotPairs.left", "scorers.DotPairs.right", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul.unsqueeze", "torch.matmul.unsqueeze", "scorers.DotPairs.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "span_vecs", ",", "span_begin", ",", "span_end", ")", ":", "\n", "        ", "l", "=", "self", ".", "left", "(", "span_vecs", ")", "# [batch, length, dim_hidden]", "\n", "r", "=", "self", ".", "right", "(", "span_vecs", ")", "# [batch, length, dim_hidden]", "\n", "s", "=", "torch", ".", "matmul", "(", "l", ",", "r", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "return", "s", ".", "unsqueeze", "(", "-", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.scorers.create_pair_scorer": [[10, 21], ["config.get", "scorers.FFpairs", "scorers.OptFFpairs", "scorers.DotPairs", "BaseException"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.get"], ["def", "create_pair_scorer", "(", "dim_input", ",", "dim_output", ",", "config", ",", "span_pair_generator", ")", ":", "\n", "    ", "scorer_type", "=", "config", ".", "get", "(", "'scorer_type'", ",", "'opt-ff-pairs'", ")", "\n", "\n", "if", "scorer_type", "==", "'ff-pairs'", ":", "\n", "        ", "return", "FFpairs", "(", "dim_input", ",", "dim_output", ",", "config", ",", "span_pair_generator", ")", "\n", "", "elif", "scorer_type", "==", "'opt-ff-pairs'", ":", "\n", "        ", "return", "OptFFpairs", "(", "dim_input", ",", "dim_output", ",", "config", ",", "span_pair_generator", ")", "\n", "", "elif", "scorer_type", "==", "'dot-pairs'", ":", "\n", "        ", "return", "DotPairs", "(", "dim_input", ",", "dim_output", ",", "config", ",", "span_pair_generator", ")", "\n", "", "else", ":", "\n", "        ", "raise", "BaseException", "(", "\"no such pair scorer:\"", ",", "scorer_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_prop.ModuleLinkerCorefProp.__init__": [[21, 59], ["torch.Module.__init__", "print", "modules.utils.misc.MyGate", "models.coreflinker.scorers.OptFFpairs", "modules.text_field.TextFieldEmbedderTokens", "models.coreflinker.scorers.OptFFpairsCorefLinkerBase", "models.coreflinker.scorers.OptFFpairsCorefLinkerNaive"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["    ", "def", "__init__", "(", "self", ",", "dim_span", ",", "coref_pruner", ",", "span_pair_generator", ",", "config", ",", "dictionaries", ")", ":", "\n", "# TODO: we are here: pass dim_entity here", "\n", "        ", "super", "(", "ModuleLinkerCorefProp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "coref_prop", "=", "config", "[", "'linkercoref_prop'", "]", "[", "'coref_prop'", "]", "\n", "self", ".", "update_coref_scores", "=", "config", "[", "'linkercoref_prop'", "]", "[", "'update_coref_scores'", "]", "\n", "# if false, will imply to do union on the spans selected of pruner + linkable mentions", "\n", "# if true, will imply to take only the spans predicted by the pruner", "\n", "# self.end_to_end = end_to_end", "\n", "\n", "# self.append_from_pruner = config['append_from_pruner']", "\n", "# self.no_nil_in_targets = config['no_nil_in_targets']", "\n", "self", ".", "doc_level_candidates", "=", "config", "[", "'doc_level_candidates'", "]", "\n", "\n", "# self.only_mentions_with_valid_candidates = config['only_mentions_with_valid_candidates']", "\n", "\n", "# self.shared_pruner = config['shared_pruner']", "\n", "\n", "print", "(", "\"ModuleCorefProp(cp={})\"", ".", "format", "(", "self", ".", "coref_prop", ")", ")", "\n", "\n", "self", ".", "coref_pruner", "=", "coref_pruner", "\n", "\n", "self", ".", "enabled", "=", "config", "[", "'enabled'", "]", "\n", "if", "self", ".", "enabled", ":", "\n", "            ", "self", ".", "coref", "=", "OptFFpairs", "(", "dim_span", ",", "1", ",", "config", "[", "'linkercoref_prop'", "]", ",", "span_pair_generator", ")", "\n", "self", ".", "entity_embedder", "=", "TextFieldEmbedderTokens", "(", "dictionaries", ",", "\n", "config", "[", "'entity_embedder'", "]", ")", "# here is entity embedder 1", "\n", "\n", "if", "config", "[", "'model_type'", "]", "==", "'base'", ":", "\n", "                ", "self", ".", "linker_coref", "=", "OptFFpairsCorefLinkerBase", "(", "dim_span", ",", "self", ".", "entity_embedder", ".", "dim", ",", "\n", "1", ",", "config", "[", "'linkercoref_prop'", "]", ",", "span_pair_generator", ")", "\n", "", "elif", "config", "[", "'model_type'", "]", "==", "'super-naive'", ":", "\n", "                ", "self", ".", "linker_coref", "=", "OptFFpairsCorefLinkerNaive", "(", "dim_span", ",", "self", ".", "entity_embedder", ".", "dim", ",", "\n", "1", ",", "config", "[", "'linkercoref_prop'", "]", ",", "span_pair_generator", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "entity_embedder", "=", "None", "\n", "\n", "", "self", ".", "gate", "=", "MyGate", "(", "dim_span", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_prop.ModuleLinkerCorefProp.forward": [[60, 159], ["modules.misc.misc.batched_index_select", "modules.misc.misc.batched_index_select.to", "coreflinker_prop.ModuleLinkerCorefProp.entity_embedder", "coreflinker_prop.ModuleLinkerCorefProp.linker_coref().squeeze", "modules.utils.misc.coref_add_scores_coreflinker", "all_spans.copy", "filtered_spans.copy", "range", "modules.utils.misc.overwrite_spans", "coreflinker_prop.ModuleLinkerCorefProp.linker_coref", "torch.softmax", "torch.softmax", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "coreflinker_prop.ModuleLinkerCorefProp.gate", "coreflinker_prop.ModuleLinkerCorefProp.coref().squeeze", "torch.eye().unsqueeze().to", "torch.eye().unsqueeze().to", "torch.eye().unsqueeze().to", "torch.eye().unsqueeze().to", "torch.eye().unsqueeze().to", "torch.eye().unsqueeze().to", "torch.eye().unsqueeze().to", "torch.eye().unsqueeze().to", "torch.eye().unsqueeze().to", "triangular_mask.size", "coreflinker_prop.ModuleLinkerCorefProp.coref", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "triangular_mask.size", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "coreflinker_prop.ModuleLinkerCorefProp.size", "coreflinker_prop.ModuleLinkerCorefProp.size", "coreflinker_prop.ModuleLinkerCorefProp.size"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.batched_index_select", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_mtt_prop_hoi.ModuleCorefLinkerMTTPropE2EHoi.coref_add_scores_coreflinker", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.misc.overwrite_spans"], ["", "def", "forward", "(", "self", ",", "all_spans", ",", "filtered_spans", ",", "sequence_lengths", ",", "linker", ")", ":", "\n", "\n", "        ", "if", "not", "self", ".", "enabled", "or", "filtered_spans", "[", "'span_vecs'", "]", "is", "None", ":", "\n", "            ", "return", "all_spans", ",", "filtered_spans", ",", "None", "\n", "\n", "", "all_vecs", "=", "all_spans", "[", "'span_vecs'", "]", "# torch.Size([1, 69, 5, 1676])", "\n", "\n", "if", "self", ".", "doc_level_candidates", ":", "\n", "            ", "linker_candidates", "=", "linker", "[", "'candidates_no_nill_doc'", "]", "\n", "", "else", ":", "\n", "            ", "linker_candidates", "=", "linker", "[", "'candidates'", "]", "\n", "\n", "", "reindex", "=", "filtered_spans", "[", "'reindex_wrt_gold'", "]", "\n", "linker_candidates", "=", "batched_index_select", "(", "linker_candidates", ",", "reindex", ")", "\n", "\n", "triangular_mask", "=", "filtered_spans", "[", "'triangular_mask'", "]", "\n", "\n", "# Only process spans with linker information", "\n", "# (11/10/2020) - old code that is changed by filtered_spans that now have to come good thanks to", "\n", "#    \"end_to_end_mentions\" cofig parameter on model level", "\n", "\n", "# max_span_length = all_vecs.size(2)", "\n", "\n", "# linker_spans = linker['gold_spans_tensors']", "\n", "# linker_indices = spans_to_indices(linker_spans,", "\n", "#                                   max_span_length)  # tensor([[ 16,  27, 207, 227, 245, 250, 256, 266, 285]])", "\n", "#", "\n", "# linker_vecs = filter_spans(all_vecs, linker_indices.to(all_vecs.device))  # torch.Size([1, 9, 1676])", "\n", "#", "\n", "# linker_span_embeddings = linker_vecs  # torch.Size([1, 9, 1676])", "\n", "\n", "linker_span_embeddings", "=", "filtered_spans", "[", "'span_vecs'", "]", "\n", "\n", "# (11/10/2020) - end old code that is changed by filtered_spans that now have to come good thanks to", "\n", "#    \"end_to_end_mentions\" cofig parameter on model level", "\n", "\n", "# (11/10/2020) - new code that takes directly the filtered_spans", "\n", "# linker_span_embeddings = filtered_spans['span_vecs'] # TODO: this has to be changed, can not rely on the exact positoin of filtered['span_vecs']!!!", "\n", "# (11/10/2020) - end new code that takes directly the filtered_spans", "\n", "\n", "candidates", "=", "linker_candidates", ".", "to", "(", "all_vecs", ".", "device", ")", "# torch.Size([1, 9, 17])", "\n", "\n", "# resorts the candidates according to the orders of the spans in the filtered_spans", "\n", "# candidates = candidates[filtered_spans['index_candidates']]", "\n", "\n", "candidate_vecs", "=", "self", ".", "entity_embedder", "(", "candidates", ")", "# torch.Size([1, 9, 17, 200])", "\n", "\n", "# if not self.end_to_end:", "\n", "update_mentions", "=", "linker_span_embeddings", "# torch.Size([1, 9, 1676])", "\n", "update_entities", "=", "candidate_vecs", "# torch.Size([1, 9, 17, 200])", "\n", "\n", "# mentions_span_begin = linker['gold_spans_tensors'][..., 0].unsqueeze(-1)  # torch.Size([1, 9, 1])", "\n", "# mentions_span_end = linker['gold_spans_tensors'][..., 1].unsqueeze(-1)  # torch.Size([1, 9, 1])", "\n", "\n", "mentions_span_begin", "=", "filtered_spans", "[", "'span_begin'", "]", "# torch.Size([1, 9, 1])", "\n", "mentions_span_end", "=", "filtered_spans", "[", "'span_end'", "]", "# torch.Size([1, 9, 1])", "\n", "\n", "linker_coref_scores", "=", "self", ".", "linker_coref", "(", "update_mentions", ",", "\n", "update_entities", ",", "\n", "mentions_span_begin", ",", "\n", "mentions_span_end", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "# the \"eye\" is here , this is why I still add 0s and then it nullifies the main diagonal", "\n", "linker_coref_scores", "=", "coref_add_scores_coreflinker", "(", "linker_coref_scores", ",", "filtered_spans", "[", "'span_scores'", "]", ",", "\n", "filter_singletons_with_matrix", "=", "False", ")", "\n", "\n", "update_all", "=", "all_spans", ".", "copy", "(", ")", "\n", "update_filtered", "=", "filtered_spans", ".", "copy", "(", ")", "\n", "\n", "if", "self", ".", "coref_prop", ">", "0", ":", "\n", "# only get the coref part from linker_coref_scores:", "\n", "            ", "coref_scores", "=", "linker_coref_scores", "[", "...", ",", "-", "triangular_mask", ".", "size", "(", "-", "1", ")", ":", "]", "\n", "for", "_", "in", "range", "(", "self", ".", "coref_prop", ")", ":", "\n", "                ", "probs", "=", "F", ".", "softmax", "(", "coref_scores", "-", "(", "1.0", "-", "triangular_mask", ")", "*", "1e23", ",", "dim", "=", "-", "1", ")", "\n", "ctxt", "=", "torch", ".", "matmul", "(", "probs", ",", "update_mentions", ")", "\n", "update_mentions", "=", "self", ".", "gate", "(", "update_mentions", ",", "ctxt", ")", "\n", "\n", "if", "self", ".", "update_coref_scores", ":", "\n", "# coref_scores = self.coref(update_mentions, linker['spans_tensors'][:, :, 0].unsqueeze(-1),", "\n", "#                           linker['spans_tensors'][:, :, 1].unsqueeze(-1)).squeeze(-1)", "\n", "                    ", "coref_scores", "=", "self", ".", "coref", "(", "update_mentions", ",", "mentions_span_begin", ",", "mentions_span_end", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "# coref_scores = self.coref(update_mentions, filtered_span_begin, filtered_span_end).squeeze(-1)", "\n", "\n", "# 14/10/2020 - added this part", "\n", "eye", "=", "torch", ".", "eye", "(", "coref_scores", ".", "size", "(", "1", ")", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "coref_scores", ")", "\n", "coref_scores", "[", ":", ",", ":", ",", "-", "coref_scores", ".", "size", "(", "1", ")", ":", "]", "=", "coref_scores", "[", ":", ",", ":", ",", "-", "coref_scores", ".", "size", "(", "1", ")", ":", "]", "*", "(", "1.0", "-", "eye", ")", "\n", "\n", "", "", "linker_coref_scores", "[", "...", ",", "-", "triangular_mask", ".", "size", "(", "-", "1", ")", ":", "]", "=", "coref_scores", "\n", "update_filtered", "[", "'span_vecs'", "]", "=", "update_mentions", "\n", "update_all", "[", "'span_vecs'", "]", "=", "overwrite_spans", "(", "update_all", "[", "'span_vecs'", "]", ",", "filtered_spans", "[", "'prune_indices'", "]", ",", "\n", "filtered_spans", "[", "'span_lengths'", "]", ",", "update_mentions", ")", "\n", "\n", "# 19/10/2020 - (kzaporoj) - should not use filtered_spans in not E2E!!!", "\n", "# update_filtered['span_vecs'] = update_mentions", "\n", "# update_all['span_vecs'] = overwrite_spans(update_all['span_vecs'], filtered_spans['prune_indices'],", "\n", "#                                           filtered_spans['span_lengths'], update_mentions)", "\n", "\n", "", "return", "update_all", ",", "update_filtered", ",", "linker_coref_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_prop.ModuleCorefLinkerDisabled.__init__": [[162, 165], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ModuleCorefLinkerDisabled", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "enabled", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_prop.ModuleCorefLinkerDisabled.forward": [[166, 168], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "all_spans", ",", "filtered_spans", ",", "sequence_lengths", ",", "linker", ")", ":", "\n", "        ", "return", "all_spans", ",", "filtered_spans", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_prop.ModuleCorefLinkerDisabled.log_stats": [[169, 171], ["None"], "methods", ["None"], ["", "def", "log_stats", "(", "self", ",", "dataset_name", ",", "predict", ",", "tb_logger", ",", "step_nr", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_prop.ModuleCorefLinkerPropE2E.__init__": [[174, 215], ["torch.Module.__init__", "print", "modules.utils.misc.MyGate", "modules.text_field.TextFieldEmbedderTokens", "models.coreflinker.scorers.OptFFpairs", "models.coreflinker.scorers.OptFFpairsCorefLinkerBase", "models.coreflinker.scorers.OptFFpairsCorefLinkerNaive"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["    ", "def", "__init__", "(", "self", ",", "dim_span", ",", "coref_pruner", ",", "span_pair_generator", ",", "config", ",", "dictionaries", ")", ":", "\n", "# TODO: we are here: pass dim_entity here", "\n", "        ", "super", "(", "ModuleCorefLinkerPropE2E", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "coref_prop", "=", "config", "[", "'coreflinker_prop'", "]", "[", "'coref_prop'", "]", "\n", "self", ".", "update_coref_scores", "=", "config", "[", "'coreflinker_prop'", "]", "[", "'update_coref_scores'", "]", "\n", "# if false, will imply to do union on the spans selected of pruner + linkable mentions", "\n", "# if true, will imply to take only the spans predicted by the pruner", "\n", "# self.end_to_end = end_to_end", "\n", "\n", "# self.append_from_pruner = config['append_from_pruner']", "\n", "self", ".", "no_nil_in_targets", "=", "config", "[", "'no_nil_in_targets'", "]", "\n", "self", ".", "doc_level_candidates", "=", "config", "[", "'doc_level_candidates'", "]", "\n", "self", ".", "filter_singletons_with_matrix", "=", "config", "[", "'filter_singletons_with_matrix'", "]", "\n", "self", ".", "subtract_pruner_for_singletons", "=", "config", "[", "'subtract_pruner_for_singletons'", "]", "\n", "\n", "print", "(", "\"ModuleCorefProp(cp={})\"", ".", "format", "(", "self", ".", "coref_prop", ")", ")", "\n", "\n", "self", ".", "coref_pruner", "=", "coref_pruner", "\n", "\n", "self", ".", "enabled", "=", "config", "[", "'enabled'", "]", "\n", "if", "self", ".", "enabled", ":", "\n", "            ", "if", "self", ".", "coref_prop", ">", "0", ":", "\n", "                ", "self", ".", "coref", "=", "OptFFpairs", "(", "dim_span", ",", "1", ",", "config", "[", "'coreflinker_prop'", "]", ",", "span_pair_generator", ")", "\n", "\n", "", "self", ".", "entity_embedder", "=", "TextFieldEmbedderTokens", "(", "dictionaries", ",", "\n", "config", "[", "'entity_embedder'", "]", ")", "# here is entity embedder 1", "\n", "\n", "if", "config", "[", "'model_type'", "]", "==", "'base'", ":", "\n", "                ", "self", ".", "linker_coref", "=", "OptFFpairsCorefLinkerBase", "(", "dim_span", ",", "self", ".", "entity_embedder", ",", "\n", "1", ",", "config", "[", "'coreflinker_prop'", "]", ",", "span_pair_generator", ",", "\n", "filter_singletons_with_matrix", "=", "self", ".", "filter_singletons_with_matrix", ",", "\n", "dictionaries", "=", "dictionaries", ")", "\n", "", "elif", "config", "[", "'model_type'", "]", "==", "'super-naive'", ":", "\n", "                ", "self", ".", "linker_coref", "=", "OptFFpairsCorefLinkerNaive", "(", "dim_span", ",", "self", ".", "entity_embedder", ".", "dim", ",", "\n", "1", ",", "config", "[", "'coreflinker_prop'", "]", ",", "span_pair_generator", ",", "\n", "filter_singletons_with_matrix", "=", "self", ".", "filter_singletons_with_matrix", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "entity_embedder", "=", "None", "\n", "\n", "", "self", ".", "gate", "=", "MyGate", "(", "dim_span", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_prop.ModuleCorefLinkerPropE2E.forward": [[216, 352], ["modules.misc.misc.batched_index_select", "modules.misc.misc.batched_index_select.to", "coreflinker_prop.ModuleCorefLinkerPropE2E.entity_embedder", "coreflinker_prop.ModuleCorefLinkerPropE2E.linker_coref().squeeze", "modules.utils.misc.coref_add_scores_coreflinker", "all_spans.copy", "filtered_spans.copy", "range", "modules.utils.misc.overwrite_spans", "coreflinker_prop.ModuleCorefLinkerPropE2E.linker_coref", "torch.softmax", "torch.softmax", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "coreflinker_prop.ModuleCorefLinkerPropE2E.gate", "coreflinker_prop.ModuleCorefLinkerPropE2E.coref().squeeze", "modules.utils.misc.coref_add_scores_coreflinker", "torch.eye().unsqueeze().to", "torch.eye().unsqueeze().to", "torch.eye().unsqueeze().to", "torch.eye().unsqueeze().to", "torch.eye().unsqueeze().to", "torch.eye().unsqueeze().to", "torch.eye().unsqueeze().to", "torch.eye().unsqueeze().to", "torch.eye().unsqueeze().to", "triangular_mask.size", "coreflinker_prop.ModuleCorefLinkerPropE2E.coref", "coreflinker_prop.ModuleCorefLinkerPropE2E.coref_pruner", "triangular_mask.size", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "modules.utils.misc.coref_add_scores_coreflinker.size", "modules.utils.misc.coref_add_scores_coreflinker.size", "modules.utils.misc.coref_add_scores_coreflinker.size"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.batched_index_select", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_mtt_prop_hoi.ModuleCorefLinkerMTTPropE2EHoi.coref_add_scores_coreflinker", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.misc.overwrite_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_mtt_prop_hoi.ModuleCorefLinkerMTTPropE2EHoi.coref_add_scores_coreflinker"], ["", "def", "forward", "(", "self", ",", "all_spans", ",", "filtered_spans", ",", "sequence_lengths", ",", "linker", ")", ":", "\n", "\n", "# if (not self.enabled) or (linker_spans.shape[1] == 0 and (not self.end_to_end)):", "\n", "#     return all_spans, filtered_spans, None", "\n", "        ", "if", "not", "self", ".", "enabled", "or", "filtered_spans", "[", "'span_vecs'", "]", "is", "None", ":", "\n", "            ", "return", "all_spans", ",", "filtered_spans", ",", "None", "\n", "\n", "", "all_vecs", "=", "all_spans", "[", "'span_vecs'", "]", "# torch.Size([1, 69, 5, 1676])", "\n", "\n", "# prune_indices", "\n", "# all_vecs should be of # torch.Size([1, 69, 5, 1676])", "\n", "# filtered_vecs = filtered_spans['span_vecs']  # torch.Size([1, 14, 1676])", "\n", "\n", "# TODO (13/10/2020) - changing to include end-to-end candidates, which would be the candidates not for gold", "\n", "#   BUT for the filtered_spans!", "\n", "\n", "# linker_candidates = batched_index_select(linker['cands_all_spans_no_nill'], filtered_spans['prune_indices'])", "\n", "linker_candidates", "=", "batched_index_select", "(", "linker", "[", "'candidates'", "]", ",", "filtered_spans", "[", "'prune_indices'", "]", ")", "\n", "# linker_candidates.shape --> [1, 21, 18]", "\n", "# linker['candidates'].shape --> [1, 1440, 18]", "\n", "# filtered_spans['prune_indices'].shape --> [1, 21]", "\n", "\n", "# TODO 13/10/2020 - WE ARE HERE: use batched_index_select from allennlp to get the candidates.", "\n", "#    batch index select of linker['cands_all_spans_no_nill'] based on indices in filtered_spans['prune_indices']", "\n", "\n", "# TODO (13/10/2020) - end changing to include end-to-end candidates, which would be the candidates not for gold", "\n", "#   BUT for the filtered_spans!", "\n", "\n", "filtered_span_begin", "=", "filtered_spans", "[", "'span_begin'", "]", "\n", "# filtered_span_begin.shape --> [1, 21, 1]", "\n", "#", "\n", "filtered_span_end", "=", "filtered_spans", "[", "'span_end'", "]", "\n", "# filtered_span_end.shape --> [1, 21, 1]", "\n", "#", "\n", "\n", "triangular_mask", "=", "filtered_spans", "[", "'triangular_mask'", "]", "\n", "# triangular_mask.shape --> [1, 21, 21]", "\n", "#", "\n", "\n", "# Only process spans with linker information", "\n", "# (11/10/2020) - old code that is changed by filtered_spans that now have to come good thanks to", "\n", "#    \"end_to_end_mentions\" cofig parameter on model level", "\n", "# max_span_length = all_vecs.size(2)", "\n", "# linker_spans = linker['spans_tensors']", "\n", "# linker_indices = spans_to_indices(linker_spans,", "\n", "#                                   max_span_length)  # tensor([[ 16,  27, 207, 227, 245, 250, 256, 266, 285]])", "\n", "#", "\n", "# linker_vecs = filter_spans(all_vecs, linker_indices.to(all_vecs.device))  # torch.Size([1, 9, 1676])", "\n", "#", "\n", "# linker_span_embeddings = linker_vecs  # torch.Size([1, 9, 1676])", "\n", "# (11/10/2020) - end old code that is changed by filtered_spans that now have to come good thanks to", "\n", "#    \"end_to_end_mentions\" cofig parameter on model level", "\n", "\n", "# (11/10/2020) - new code that takes directly the filtered_spans", "\n", "# TODO: this has to be changed, can not rely on the exact position of filtered['span_vecs']!!!", "\n", "linker_span_embeddings", "=", "filtered_spans", "[", "'span_vecs'", "]", "\n", "# linker_span_embeddings.shape --> [1, 21, 2324]", "\n", "# (11/10/2020) - end new code that takes directly the filtered_spans", "\n", "\n", "candidates", "=", "linker_candidates", ".", "to", "(", "all_vecs", ".", "device", ")", "# torch.Size([1, 9, 17])", "\n", "# candidates.shape --> [1, 21, 18]", "\n", "candidate_vecs", "=", "self", ".", "entity_embedder", "(", "candidates", ")", "# torch.Size([1, 9, 17, 200])", "\n", "# candidate_vecs.shape --> [1, 21, 18, 200]", "\n", "\n", "# if not self.end_to_end:", "\n", "update_mentions", "=", "linker_span_embeddings", "# torch.Size([1, 9, 1676])", "\n", "# update_mentions.shape --> [1, 21, 2324]", "\n", "update_entities", "=", "candidate_vecs", "# torch.Size([1, 9, 17, 200])", "\n", "# update_entities.shape --> [1, 21, 18, 200]", "\n", "\n", "# mentions_span_begin = linker['spans_tensors'][:, :, 0].unsqueeze(-1)  # torch.Size([1, 9, 1])", "\n", "# mentions_span_end = linker['spans_tensors'][:, :, 1].unsqueeze(-1)  # torch.Size([1, 9, 1])", "\n", "# mentions_span_begin = filtered_spans['span_begin']  # torch.Size([1, 9, 1])", "\n", "# mentions_span_end = filtered_spans['span_end']  # torch.Size([1, 9, 1])", "\n", "\n", "linker_coref_scores", "=", "self", ".", "linker_coref", "(", "update_mentions", ",", "\n", "update_entities", ",", "\n", "filtered_span_begin", ",", "\n", "filtered_span_end", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "# linker_coref_scores.shape --> [1, 21, 39]", "\n", "# filtered_spans['span_scores'].shape --> [1,21,1]", "\n", "linker_coref_scores", "=", "coref_add_scores_coreflinker", "(", "linker_coref_scores", ",", "filtered_spans", "[", "'span_scores'", "]", ",", "\n", "self", ".", "filter_singletons_with_matrix", ",", "\n", "subtract_pruner_for_singletons", "=", "self", ".", "subtract_pruner_for_singletons", ")", "\n", "# linker_coref_scores.shape --> [1, 21, 39]", "\n", "#", "\n", "update_all", "=", "all_spans", ".", "copy", "(", ")", "\n", "#", "\n", "#", "\n", "update_filtered", "=", "filtered_spans", ".", "copy", "(", ")", "\n", "#", "\n", "#", "\n", "\n", "if", "self", ".", "coref_prop", ">", "0", ":", "\n", "# only get the coref part from linker_coref_scores:", "\n", "            ", "coref_scores", "=", "linker_coref_scores", "[", "...", ",", "-", "triangular_mask", ".", "size", "(", "-", "1", ")", ":", "]", "# [1, 21, 21]", "\n", "for", "_", "in", "range", "(", "self", ".", "coref_prop", ")", ":", "\n", "                ", "probs", "=", "F", ".", "softmax", "(", "coref_scores", "-", "(", "1.0", "-", "triangular_mask", ")", "*", "1e23", ",", "dim", "=", "-", "1", ")", "\n", "ctxt", "=", "torch", ".", "matmul", "(", "probs", ",", "update_mentions", ")", "\n", "update_mentions", "=", "self", ".", "gate", "(", "update_mentions", ",", "ctxt", ")", "\n", "# probs.shape --> [1, 21, 21]; ctxt.shape --> [1, 21, 2324]; update_mentions.shape --> [1, 21, 2324]", "\n", "if", "self", ".", "update_coref_scores", ":", "\n", "# TODO kzaporoj (11/10/2020) - will it work with this self.coref(...)???", "\n", "#  Or should we have a separate approach for joint coref+linker?", "\n", "                    ", "coref_scores", "=", "self", ".", "coref", "(", "update_mentions", ",", "filtered_span_begin", ",", "filtered_span_end", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "# coref_scores.shape --> [1, 21, 21]", "\n", "if", "self", ".", "coref_pruner", "is", "not", "None", ":", "\n", "                        ", "coref_scores", "=", "coref_add_scores_coreflinker", "(", "coref_scores", ",", "self", ".", "coref_pruner", "(", "update_mentions", ")", ",", "\n", "self", ".", "filter_singletons_with_matrix", ",", "\n", "subtract_pruner_for_singletons", "=", "self", ".", "subtract_pruner_for_singletons", ")", "\n", "# [1, 21, 21]", "\n", "#", "\n", "", "else", ":", "\n", "# 14/10/2020 - added this part", "\n", "                        ", "eye", "=", "torch", ".", "eye", "(", "coref_scores", ".", "size", "(", "1", ")", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "coref_scores", ")", "\n", "#", "\n", "#", "\n", "coref_scores", "[", ":", ",", ":", ",", "-", "coref_scores", ".", "size", "(", "1", ")", ":", "]", "=", "coref_scores", "[", ":", ",", ":", ",", "-", "coref_scores", ".", "size", "(", "1", ")", ":", "]", "*", "(", "1.0", "-", "eye", ")", "\n", "#", "\n", "#", "\n", "\n", "", "", "", "linker_coref_scores", "[", "...", ",", "-", "triangular_mask", ".", "size", "(", "-", "1", ")", ":", "]", "=", "coref_scores", "\n", "# [1, 21, 39]", "\n", "#", "\n", "update_filtered", "[", "'span_vecs'", "]", "=", "update_mentions", "\n", "# update_mentions.shape --> [1, 21, 2324]", "\n", "#", "\n", "#", "\n", "update_all", "[", "'span_vecs'", "]", "=", "overwrite_spans", "(", "update_all", "[", "'span_vecs'", "]", ",", "filtered_spans", "[", "'prune_indices'", "]", ",", "\n", "filtered_spans", "[", "'span_lengths'", "]", ",", "update_mentions", ")", "\n", "# update_all['span_vecs'].shape --> [1, 96, 15, 2324]", "\n", "# filtered_spans['prune_indices'].shape --> [1,21]", "\n", "# filtered_spans['span_lengths'] --> tensor([21])", "\n", "# update_mentions.shape --> [1, 21, 2324]", "\n", "", "return", "update_all", ",", "update_filtered", ",", "linker_coref_scores", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_prop_hoi.ModuleCorefLinkerPropE2EHoi.__init__": [[15, 67], ["torch.Module.__init__", "print", "modules.utils.misc.MyGate", "modules.text_field.TextFieldEmbedderTokens", "models.coreflinker.scorers.OptFFpairsCorefLinkerBase", "modules.entity_embeddings.KolitsasEntityEmbeddings", "RuntimeError", "models.coreflinker.scorers.OptFFpairsCorefLinkerBaseHoi", "models.coreflinker.scorers.OptFFpairsCorefLinkerNaive"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["    ", "def", "__init__", "(", "self", ",", "dim_span", ",", "coref_pruner", ",", "span_pair_generator", ",", "config", ",", "dictionaries", ")", ":", "\n", "# TODO: we are here: pass dim_entity here", "\n", "        ", "super", "(", "ModuleCorefLinkerPropE2EHoi", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "coref_prop", "=", "config", "[", "'coreflinker_prop'", "]", "[", "'coref_prop'", "]", "\n", "self", ".", "update_coref_scores", "=", "config", "[", "'coreflinker_prop'", "]", "[", "'update_coref_scores'", "]", "\n", "# if false, will imply to do union on the spans selected of pruner + linkable mentions", "\n", "# if true, will imply to take only the spans predicted by the pruner", "\n", "# self.end_to_end = end_to_end", "\n", "\n", "# self.append_from_pruner = config['append_from_pruner']", "\n", "self", ".", "no_nil_in_targets", "=", "config", "[", "'no_nil_in_targets'", "]", "\n", "self", ".", "doc_level_candidates", "=", "config", "[", "'doc_level_candidates'", "]", "\n", "self", ".", "filter_singletons_with_matrix", "=", "config", "[", "'filter_singletons_with_matrix'", "]", "\n", "self", ".", "subtract_pruner_for_singletons", "=", "config", "[", "'subtract_pruner_for_singletons'", "]", "\n", "\n", "print", "(", "\"ModuleCorefPropE2EHoi(cp={})\"", ".", "format", "(", "self", ".", "coref_prop", ")", ")", "\n", "\n", "self", ".", "coref_pruner", "=", "coref_pruner", "\n", "\n", "self", ".", "enabled", "=", "config", "[", "'enabled'", "]", "\n", "if", "self", ".", "enabled", ":", "\n", "# self.coref_prop_type = config['coreflinker_prop']['coref_prop_type']", "\n", "            ", "self", ".", "init_weights_std", "=", "config", "[", "'coreflinker_prop'", "]", "[", "'init_weights_std'", "]", "\n", "# if self.coref_prop > 0:", "\n", "#     self.coref = OptFFpairs(dim_span, 1, config['coreflinker_prop'], span_pair_generator)", "\n", "self", ".", "embeddings_type", "=", "config", "[", "'entity_embedder'", "]", "[", "'type'", "]", "\n", "\n", "if", "self", ".", "embeddings_type", "==", "'yamada-johannes'", ":", "\n", "                ", "self", ".", "entity_embedder", "=", "TextFieldEmbedderTokens", "(", "dictionaries", ",", "config", "[", "'entity_embedder'", "]", ")", "\n", "", "elif", "self", ".", "embeddings_type", "==", "'kolitsas'", ":", "\n", "                ", "self", ".", "entity_embedder", "=", "KolitsasEntityEmbeddings", "(", "dictionaries", ",", "config", "[", "'entity_embedder'", "]", ")", "\n", "", "else", ":", "\n", "                ", "raise", "RuntimeError", "(", "'Unrecognized embeddings type in ModuleCorefLinkerPropE2EHoi: '", "+", "self", ".", "embeddings_type", ")", "\n", "\n", "", "if", "config", "[", "'model_type'", "]", "==", "'base'", ":", "\n", "                ", "self", ".", "linker_coref", "=", "OptFFpairsCorefLinkerBase", "(", "dim_span", ",", "self", ".", "entity_embedder", ",", "\n", "1", ",", "config", "[", "'coreflinker_prop'", "]", ",", "span_pair_generator", ",", "\n", "filter_singletons_with_matrix", "=", "self", ".", "filter_singletons_with_matrix", ",", "\n", "dictionaries", "=", "dictionaries", ")", "\n", "", "elif", "config", "[", "'model_type'", "]", "==", "'base-hoi'", ":", "\n", "                ", "self", ".", "linker_coref", "=", "OptFFpairsCorefLinkerBaseHoi", "(", "dim_span", ",", "self", ".", "entity_embedder", ",", "\n", "1", ",", "config", "[", "'coreflinker_prop'", "]", ",", "span_pair_generator", ",", "\n", "filter_singletons_with_matrix", "=", "self", ".", "filter_singletons_with_matrix", ",", "\n", "dictionaries", "=", "dictionaries", ")", "\n", "", "elif", "config", "[", "'model_type'", "]", "==", "'super-naive'", ":", "\n", "                ", "self", ".", "linker_coref", "=", "OptFFpairsCorefLinkerNaive", "(", "dim_span", ",", "self", ".", "entity_embedder", ".", "dim", ",", "\n", "1", ",", "config", "[", "'coreflinker_prop'", "]", ",", "span_pair_generator", ",", "\n", "filter_singletons_with_matrix", "=", "self", ".", "filter_singletons_with_matrix", ")", "\n", "", "self", ".", "gate", "=", "MyGate", "(", "dim_span", ",", "self", ".", "init_weights_std", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "entity_embedder", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_prop_hoi.ModuleCorefLinkerPropE2EHoi.forward": [[68, 177], ["modules.misc.misc.batched_index_select", "modules.utils.misc.filter_spans", "modules.misc.misc.batched_index_select.to", "coreflinker_prop_hoi.ModuleCorefLinkerPropE2EHoi.entity_embedder", "coreflinker_prop_hoi.ModuleCorefLinkerPropE2EHoi.linker_coref().squeeze", "modules.utils.misc.coref_add_scores_coreflinker", "linker_indices_hoi.to", "filtered_spans[].unsqueeze", "range", "modules.utils.misc.overwrite_spans_hoi", "coreflinker_prop_hoi.ModuleCorefLinkerPropE2EHoi.linker_coref", "torch.softmax", "torch.softmax", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "coreflinker_prop_hoi.ModuleCorefLinkerPropE2EHoi.gate", "coreflinker_prop_hoi.ModuleCorefLinkerPropE2EHoi.linker_coref().squeeze", "modules.utils.misc.coref_add_scores_coreflinker", "torch.eye().unsqueeze().to", "torch.eye().unsqueeze().to", "torch.eye().unsqueeze().to", "torch.eye().unsqueeze().to", "torch.eye().unsqueeze().to", "torch.eye().unsqueeze().to", "torch.eye().unsqueeze().to", "torch.eye().unsqueeze().to", "torch.eye().unsqueeze().to", "triangular_mask.size", "coreflinker_prop_hoi.ModuleCorefLinkerPropE2EHoi.linker_coref", "coreflinker_prop_hoi.ModuleCorefLinkerPropE2EHoi.coref_pruner", "triangular_mask.size", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "modules.utils.misc.coref_add_scores_coreflinker.size", "modules.utils.misc.coref_add_scores_coreflinker.size", "modules.utils.misc.coref_add_scores_coreflinker.size"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.batched_index_select", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.misc.misc.filter_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_mtt_prop_hoi.ModuleCorefLinkerMTTPropE2EHoi.coref_add_scores_coreflinker", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.misc.overwrite_spans_hoi", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_mtt_prop_hoi.ModuleCorefLinkerMTTPropE2EHoi.coref_add_scores_coreflinker"], ["", "", "def", "forward", "(", "self", ",", "all_spans", ",", "filtered_spans", ",", "sequence_lengths", ",", "linker", ")", ":", "\n", "\n", "# if (not self.enabled) or (linker_spans.shape[1] == 0 and (not self.end_to_end)):", "\n", "#     return all_spans, filtered_spans, None", "\n", "        ", "if", "not", "self", ".", "enabled", "or", "filtered_spans", "[", "'span_vecs'", "]", "is", "None", ":", "\n", "            ", "return", "all_spans", ",", "filtered_spans", ",", "None", "\n", "\n", "", "cand_all_vecs", "=", "all_spans", "[", "'cand_span_vecs'", "]", "\n", "# cand_all_vecs.shape --> [1, 335, 2324]", "\n", "\n", "# prune_indices", "\n", "# all_vecs should be of # torch.Size([1, 69, 5, 1676])", "\n", "# filtered_vecs = filtered_spans['span_vecs']  # torch.Size([1, 14, 1676])", "\n", "\n", "# linker_candidates = batched_index_select(linker['candidates'], filtered_spans['prune_indices'])", "\n", "linker_indices_hoi", "=", "filtered_spans", "[", "'prune_indices_hoi'", "]", "\n", "# linker_indices_hoi.shape --> [1, 21]", "\n", "linker_candidates", "=", "batched_index_select", "(", "linker", "[", "'candidates'", "]", ",", "linker_indices_hoi", ")", "\n", "# linker_candidates.shape --> [1, 21, 18]", "\n", "\n", "filtered_span_begin", "=", "filtered_spans", "[", "'span_begin'", "]", "\n", "# filtered_span_begin.shape --> [1, 21]", "\n", "\n", "filtered_span_end", "=", "filtered_spans", "[", "'span_end'", "]", "\n", "# filtered_span_end.shape --> [1, 21]", "\n", "\n", "triangular_mask", "=", "filtered_spans", "[", "'triangular_mask'", "]", "\n", "# triangular_mask.shape --> [1, 21, 21]", "\n", "\n", "# linker_span_embeddings = filtered_spans['span_vecs']", "\n", "linker_span_embeddings", "=", "filter_spans", "(", "cand_all_vecs", ",", "linker_indices_hoi", ".", "to", "(", "cand_all_vecs", ".", "device", ")", ")", "\n", "# linker_span_embeddings.shape --> [1, 21, 2324]", "\n", "#", "\n", "# (11/10/2020) - end new code that takes directly the filtered_spans", "\n", "\n", "candidates", "=", "linker_candidates", ".", "to", "(", "cand_all_vecs", ".", "device", ")", "# [1, 21, 18]", "\n", "candidate_vecs", "=", "self", ".", "entity_embedder", "(", "candidates", ")", "# [1, 21, 18, 200]", "\n", "\n", "# if not self.end_to_end:", "\n", "update_mentions", "=", "linker_span_embeddings", "# [1, 21, 2324]", "\n", "update_entities", "=", "candidate_vecs", "# [1, 21, 18, 200]", "\n", "\n", "# mentions_span_begin = linker['spans_tensors'][:, :, 0].unsqueeze(-1)  # torch.Size([1, 9, 1])", "\n", "# mentions_span_end = linker['spans_tensors'][:, :, 1].unsqueeze(-1)  # torch.Size([1, 9, 1])", "\n", "# mentions_span_begin = filtered_spans['span_begin']  # torch.Size([1, 9, 1])", "\n", "# mentions_span_end = filtered_spans['span_end']  # torch.Size([1, 9, 1])", "\n", "\n", "linker_coref_scores", "=", "self", ".", "linker_coref", "(", "update_mentions", ",", "\n", "update_entities", ",", "\n", "filtered_span_begin", ",", "\n", "filtered_span_end", ",", "\n", "do_only_coref", "=", "False", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "# linker_coref_scores.shape --> [1, 21, 39]", "\n", "# filtered_spans['span_scores'].shape --> torch.Size([1, 21])", "\n", "linker_coref_scores", "=", "coref_add_scores_coreflinker", "(", "linker_coref_scores", ",", "\n", "# filtered_spans['span_scores'],", "\n", "filtered_spans", "[", "'span_scores'", "]", ".", "unsqueeze", "(", "-", "1", ")", ",", "\n", "self", ".", "filter_singletons_with_matrix", ",", "\n", "subtract_pruner_for_singletons", "=", "self", ".", "subtract_pruner_for_singletons", ")", "\n", "\n", "# TODO: do we need this copy()??, for now just disableing the copy()", "\n", "# update_all = all_spans.copy()", "\n", "# update_filtered = filtered_spans.copy()", "\n", "update_all", "=", "all_spans", "\n", "update_filtered", "=", "filtered_spans", "\n", "\n", "if", "self", ".", "coref_prop", ">", "0", ":", "\n", "# coref propagation only on coreference (mentio) part, not the link part", "\n", "# only get the coref part from linker_coref_scores:", "\n", "# TODO: get coref+linker part graph propagation", "\n", "            ", "coref_scores", "=", "linker_coref_scores", "[", "...", ",", "-", "triangular_mask", ".", "size", "(", "-", "1", ")", ":", "]", "\n", "for", "_", "in", "range", "(", "self", ".", "coref_prop", ")", ":", "\n", "# if self.coref_prop_type =='only_mentions':", "\n", "                ", "probs", "=", "F", ".", "softmax", "(", "coref_scores", "-", "(", "1.0", "-", "triangular_mask", ")", "*", "1e23", ",", "dim", "=", "-", "1", ")", "# probs.shape --> [1, 21, 21]", "\n", "# probs = F.softmax(linker_coref_scores - (1.0 - triangular_mask) * 1e23, dim=-1)", "\n", "ctxt", "=", "torch", ".", "matmul", "(", "probs", ",", "\n", "update_mentions", ")", "# update_mentions.shape -->  torch.Size([1, 21, 2324]) ; ctxt.shape --> torch.Size([1, 21, 2324])", "\n", "update_mentions", "=", "self", ".", "gate", "(", "update_mentions", ",", "ctxt", ")", "# update_mentions.shape -->", "\n", "# TODO: update_mentions and update_entities have to be calculated separately!", "\n", "\n", "if", "self", ".", "update_coref_scores", ":", "\n", "# coref_scores = self.coref(update_mentions, filtered_span_begin, filtered_span_end).squeeze(-1)", "\n", "# DONE: here figure out what to do!!! can not use just another nnet such as self.coref", "\n", "#  (like it was previously in the line above)", "\n", "#  I think (now 18/04/2021) it HAS TO BE the same self.linker_coref nnet! BUT with the option of", "\n", "#  only enable the coref part and not the linker part there! OR TODO: BOTH (coref+linker) parts.", "\n", "#  HERE add a parameter like \"do_only_coref\".", "\n", "                    ", "coref_scores", "=", "self", ".", "linker_coref", "(", "update_mentions", ",", "\n", "update_entities", ",", "\n", "filtered_span_begin", ",", "\n", "filtered_span_end", ",", "do_only_coref", "=", "True", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "# coref_scores.shape --> torch.Size([1, 21, 21])", "\n", "if", "self", ".", "coref_pruner", "is", "not", "None", ":", "\n", "                        ", "coref_scores", "=", "coref_add_scores_coreflinker", "(", "coref_scores", ",", "self", ".", "coref_pruner", "(", "update_mentions", ")", ",", "\n", "self", ".", "filter_singletons_with_matrix", ",", "\n", "subtract_pruner_for_singletons", "=", "self", ".", "subtract_pruner_for_singletons", ")", "\n", "", "else", ":", "\n", "# 14/10/2020 - added this part", "\n", "                        ", "eye", "=", "torch", ".", "eye", "(", "coref_scores", ".", "size", "(", "1", ")", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "coref_scores", ")", "\n", "coref_scores", "[", ":", ",", ":", ",", "-", "coref_scores", ".", "size", "(", "1", ")", ":", "]", "=", "coref_scores", "[", ":", ",", ":", ",", "-", "coref_scores", ".", "size", "(", "1", ")", ":", "]", "*", "(", "1.0", "-", "eye", ")", "\n", "\n", "", "", "", "linker_coref_scores", "[", "...", ",", "-", "triangular_mask", ".", "size", "(", "-", "1", ")", ":", "]", "=", "coref_scores", "\n", "update_filtered", "[", "'span_vecs'", "]", "=", "update_mentions", "# torch.Size([1, 21, 2324])", "\n", "update_all", "[", "'cand_span_vecs'", "]", "=", "overwrite_spans_hoi", "(", "update_all", "[", "'cand_span_vecs'", "]", ",", "\n", "filtered_spans", "[", "'prune_indices_hoi'", "]", ",", "\n", "filtered_spans", "[", "'span_lengths'", "]", ",", "update_mentions", ")", "\n", "\n", "", "return", "update_all", ",", "update_filtered", ",", "linker_coref_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.coreflinker_prop_hoi.ModuleCorefLinkerPropE2EHoi.log_stats": [[178, 180], ["None"], "methods", ["None"], ["", "def", "log_stats", "(", "self", ",", "dataset_name", ",", "predict", ",", "tb_logger", ",", "step_nr", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.relprop2.ModuleRelProp2.__init__": [[10, 26], ["torch.Module.__init__", "models.coreflinker.scorers.OptFFpairs", "modules.utils.misc.MyGate", "len", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_span", ",", "span_pair_generator", ",", "labels", ",", "config", ")", ":", "\n", "        ", "super", "(", "ModuleRelProp2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rel_prop", "=", "config", "[", "'rel_prop'", "]", "\n", "self", ".", "residual", "=", "config", "[", "'residual'", "]", "\n", "self", ".", "ctxt_ff", "=", "config", "[", "'ctxt_ff'", "]", "\n", "\n", "self", ".", "scorer", "=", "OptFFpairs", "(", "dim_span", ",", "len", "(", "labels", ")", ",", "config", ",", "span_pair_generator", ")", "\n", "# self.A = nn.Linear(len(labels), dim_span, bias=False)", "\n", "# self.B = nn.Linear(len(labels), dim_span, bias=False)", "\n", "if", "self", ".", "ctxt_ff", ":", "\n", "            ", "self", ".", "ff", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "dim_span", "*", "3", ",", "dim_span", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "dim_span", ",", "dim_span", ",", "bias", "=", "False", ")", "\n", ")", "\n", "", "self", ".", "gate", "=", "MyGate", "(", "dim_span", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.relprop2.ModuleRelProp2.forward": [[27, 66], ["relprop2.ModuleRelProp2.scorer", "all_spans.copy", "filtered_spans.copy", "range", "modules.utils.misc.overwrite_spans", "probs1.permute", "relprop2.ModuleRelProp2.gate", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "relprop2.ModuleRelProp2.ff", "relprop2.ModuleRelProp2.scorer", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "relprop2.ModuleRelProp2.scorer", "relprop2.ModuleRelProp2.max", "probs1.sum", "probs1.permute.sum"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.misc.overwrite_spans"], ["", "def", "forward", "(", "self", ",", "all_spans", ",", "filtered_spans", ",", "sequence_lengths", ")", ":", "\n", "        ", "update", "=", "filtered_spans", "[", "'span_vecs'", "]", "\n", "filtered_span_begin", "=", "filtered_spans", "[", "'span_begin'", "]", "\n", "filtered_span_end", "=", "filtered_spans", "[", "'span_end'", "]", "\n", "square_mask", "=", "filtered_spans", "[", "'square_mask'", "]", "\n", "\n", "relation_scores", "=", "self", ".", "scorer", "(", "update", ",", "filtered_span_begin", ",", "filtered_span_end", ")", "\n", "\n", "update_all", "=", "all_spans", ".", "copy", "(", ")", "\n", "update_filtered", "=", "filtered_spans", ".", "copy", "(", ")", "\n", "\n", "if", "self", ".", "rel_prop", ">", "0", ":", "\n", "# print('before:', update.norm().item())", "\n", "\n", "            ", "for", "_", "in", "range", "(", "self", ".", "rel_prop", ")", ":", "\n", "# probs = torch.sigmoid(relation_scores) * square_mask.unsqueeze(-1)", "\n", "# ctxt1 = (self.A(probs) * update.unsqueeze(-2)).sum(-3) / span_lengths.unsqueeze(-1).unsqueeze(-1)", "\n", "# ctxt2 = (self.B(probs) * update.unsqueeze(-3)).sum(-2) / span_lengths.unsqueeze(-1).unsqueeze(-1)", "\n", "# update = self.gate(update, ctxt1+ctxt2)", "\n", "\n", "                ", "probs1", "=", "torch", ".", "sigmoid", "(", "relation_scores", ".", "max", "(", "-", "1", ")", "[", "0", "]", ")", "*", "square_mask", "\n", "probs2", "=", "probs1", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "ctxt1", "=", "torch", ".", "matmul", "(", "probs1", ",", "update", ")", "/", "(", "probs1", ".", "sum", "(", "-", "1", ")", "+", "1e-7", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "ctxt2", "=", "torch", ".", "matmul", "(", "probs2", ",", "update", ")", "/", "(", "probs2", ".", "sum", "(", "-", "1", ")", "+", "1e-7", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "ctxt", "=", "self", ".", "ff", "(", "torch", ".", "cat", "(", "(", "update", ",", "ctxt1", ",", "ctxt2", ")", ",", "-", "1", ")", ")", "if", "self", ".", "ctxt_ff", "else", "ctxt1", "+", "ctxt2", "\n", "update", "=", "self", ".", "gate", "(", "update", ",", "ctxt", ")", "\n", "\n", "if", "self", ".", "residual", ":", "\n", "                    ", "relation_scores", "=", "relation_scores", "+", "self", ".", "scorer", "(", "update", ",", "filtered_span_begin", ",", "filtered_span_end", ")", "\n", "", "else", ":", "\n", "                    ", "relation_scores", "=", "self", ".", "scorer", "(", "update", ",", "filtered_span_begin", ",", "filtered_span_end", ")", "\n", "\n", "# print('after:', update.norm().item())", "\n", "\n", "", "", "update_filtered", "[", "'span_vecs'", "]", "=", "update", "\n", "update_all", "[", "'span_vecs'", "]", "=", "overwrite_spans", "(", "update_all", "[", "'span_vecs'", "]", ",", "filtered_spans", "[", "'prune_indices'", "]", ",", "\n", "filtered_spans", "[", "'span_lengths'", "]", ",", "update", ")", "\n", "\n", "", "return", "update_all", ",", "update_filtered", ",", "relation_scores", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.relprop.ModuleRelProp.__init__": [[11, 21], ["torch.Module.__init__", "print", "models.coreflinker.scorers.OptFFpairs", "torch.Linear", "torch.Linear", "modules.utils.misc.MyGate", "len", "len"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["    ", "def", "__init__", "(", "self", ",", "dim_span", ",", "span_pair_generator", ",", "labels", ",", "config", ")", ":", "\n", "        ", "super", "(", "ModuleRelProp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rel_prop", "=", "config", "[", "'rel_prop'", "]", "\n", "self", ".", "add_pruner_scores", "=", "config", "[", "'add_pruner_scores'", "]", "\n", "\n", "print", "(", "\"ModuleRelProp(rp={})\"", ".", "format", "(", "self", ".", "rel_prop", ",", "self", ".", "add_pruner_scores", ")", ")", "\n", "\n", "self", ".", "scorer", "=", "OptFFpairs", "(", "dim_span", ",", "len", "(", "labels", ")", ",", "config", ",", "span_pair_generator", ")", "\n", "self", ".", "A", "=", "nn", ".", "Linear", "(", "len", "(", "labels", ")", ",", "dim_span", ",", "bias", "=", "False", ")", "\n", "self", ".", "gate", "=", "MyGate", "(", "dim_span", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.relprop.ModuleRelProp.forward": [[22, 55], ["all_spans.copy", "filtered_spans.copy", "relprop.ModuleRelProp.scorer", "modules.utils.misc.relation_add_scores", "range", "modules.utils.misc.overwrite_spans", "relprop.ModuleRelProp.gate", "relprop.ModuleRelProp.scorer", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "square_mask.unsqueeze", "span_lengths.unsqueeze().unsqueeze", "modules.utils.misc.relation_add_scores", "span_lengths.unsqueeze", "relprop.ModuleRelProp.A", "relprop.ModuleRelProp.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.misc.relation_add_scores", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.misc.overwrite_spans", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.misc.relation_add_scores"], ["", "def", "forward", "(", "self", ",", "all_spans", ",", "filtered_spans", ",", "sequence_lengths", ")", ":", "\n", "        ", "update", "=", "filtered_spans", "[", "'span_vecs'", "]", "\n", "filtered_span_begin", "=", "filtered_spans", "[", "'span_begin'", "]", "\n", "filtered_span_end", "=", "filtered_spans", "[", "'span_end'", "]", "\n", "square_mask", "=", "filtered_spans", "[", "'square_mask'", "]", "\n", "span_lengths", "=", "filtered_spans", "[", "'span_lengths'", "]", "\n", "\n", "update_all", "=", "all_spans", ".", "copy", "(", ")", "\n", "update_filtered", "=", "filtered_spans", ".", "copy", "(", ")", "\n", "\n", "relation_scores", "=", "self", ".", "scorer", "(", "update", ",", "filtered_span_begin", ",", "filtered_span_end", ")", "\n", "if", "self", ".", "add_pruner_scores", ":", "\n", "            ", "relation_scores", "=", "relation_add_scores", "(", "relation_scores", ",", "filtered_spans", "[", "'span_scores'", "]", ")", "\n", "\n", "", "if", "self", ".", "rel_prop", ">", "0", ":", "\n", "# print('before:', update.norm().item())", "\n", "\n", "            ", "for", "_", "in", "range", "(", "self", ".", "rel_prop", ")", ":", "\n", "                ", "probs", "=", "torch", ".", "relu", "(", "relation_scores", ")", "*", "square_mask", ".", "unsqueeze", "(", "-", "1", ")", "\n", "ctxt", "=", "(", "self", ".", "A", "(", "probs", ")", "*", "update", ".", "unsqueeze", "(", "-", "2", ")", ")", ".", "sum", "(", "-", "3", ")", "/", "span_lengths", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "update", "=", "self", ".", "gate", "(", "update", ",", "ctxt", ")", "\n", "\n", "relation_scores", "=", "self", ".", "scorer", "(", "update", ",", "filtered_span_begin", ",", "filtered_span_end", ")", "\n", "if", "self", ".", "add_pruner_scores", ":", "\n", "                    ", "relation_scores", "=", "relation_add_scores", "(", "relation_scores", ",", "filtered_spans", "[", "'span_scores'", "]", ")", "\n", "\n", "# print('after:', update.norm().item())", "\n", "\n", "", "", "update_filtered", "[", "'span_vecs'", "]", "=", "update", "\n", "update_all", "[", "'span_vecs'", "]", "=", "overwrite_spans", "(", "update_all", "[", "'span_vecs'", "]", ",", "filtered_spans", "[", "'prune_indices'", "]", ",", "\n", "span_lengths", ",", "update", ")", "\n", "\n", "", "return", "update_all", ",", "update_filtered", ",", "relation_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.relprop.ModuleRelPropX.__init__": [[60, 70], ["torch.Module.__init__", "print", "models.coreflinker.scorers.OptFFpairs", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "modules.utils.misc.MyGate", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["    ", "def", "__init__", "(", "self", ",", "dim_span", ",", "span_pair_generator", ",", "labels", ",", "config", ")", ":", "\n", "        ", "super", "(", "ModuleRelPropX", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rel_prop", "=", "config", "[", "'rel_prop'", "]", "\n", "\n", "print", "(", "\"ModuleRelPropX(rp={})\"", ".", "format", "(", "self", ".", "rel_prop", ")", ")", "\n", "\n", "self", ".", "scorer", "=", "OptFFpairs", "(", "dim_span", ",", "len", "(", "labels", ")", ",", "config", ",", "span_pair_generator", ")", "\n", "self", ".", "A", "=", "nn", ".", "Linear", "(", "len", "(", "labels", ")", ",", "dim_span", ",", "bias", "=", "False", ")", "\n", "self", ".", "B", "=", "nn", ".", "Linear", "(", "len", "(", "labels", ")", ",", "dim_span", ",", "bias", "=", "False", ")", "\n", "self", ".", "gate", "=", "MyGate", "(", "dim_span", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.relprop.ModuleRelPropX.forward": [[71, 104], ["all_spans.copy", "filtered_spans.copy", "relprop.ModuleRelPropX.scorer", "range", "modules.utils.misc.overwrite_spans", "relprop.ModuleRelPropX.gate", "relprop.ModuleRelPropX.scorer", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "square_mask.unsqueeze", "span_lengths.unsqueeze().unsqueeze", "span_lengths.unsqueeze().unsqueeze", "span_lengths.unsqueeze", "span_lengths.unsqueeze", "relprop.ModuleRelPropX.A", "relprop.ModuleRelPropX.unsqueeze", "relprop.ModuleRelPropX.B", "relprop.ModuleRelPropX.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.misc.overwrite_spans"], ["", "def", "forward", "(", "self", ",", "all_spans", ",", "filtered_spans", ",", "sequence_lengths", ")", ":", "\n", "        ", "update", "=", "filtered_spans", "[", "'span_vecs'", "]", "\n", "filtered_span_begin", "=", "filtered_spans", "[", "'span_begin'", "]", "\n", "filtered_span_end", "=", "filtered_spans", "[", "'span_end'", "]", "\n", "square_mask", "=", "filtered_spans", "[", "'square_mask'", "]", "\n", "span_lengths", "=", "filtered_spans", "[", "'span_lengths'", "]", "\n", "\n", "update_all", "=", "all_spans", ".", "copy", "(", ")", "\n", "update_filtered", "=", "filtered_spans", ".", "copy", "(", ")", "\n", "\n", "relation_scores", "=", "self", ".", "scorer", "(", "update", ",", "filtered_span_begin", ",", "filtered_span_end", ")", "\n", "\n", "if", "self", ".", "rel_prop", ">", "0", ":", "\n", "# print('before:', update.norm().item())", "\n", "\n", "            ", "for", "_", "in", "range", "(", "self", ".", "rel_prop", ")", ":", "\n", "                ", "probs", "=", "torch", ".", "sigmoid", "(", "relation_scores", ")", "*", "square_mask", ".", "unsqueeze", "(", "-", "1", ")", "\n", "# A(probs):             [batch, length, length, dim_span]", "\n", "# update.unsqueeze(-2): [batch, length, 1, dim_spans]", "\n", "# TODO: try different form of normalization?", "\n", "ctxt1", "=", "(", "self", ".", "A", "(", "probs", ")", "*", "update", ".", "unsqueeze", "(", "-", "2", ")", ")", ".", "sum", "(", "-", "3", ")", "/", "span_lengths", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "ctxt2", "=", "(", "self", ".", "B", "(", "probs", ")", "*", "update", ".", "unsqueeze", "(", "-", "3", ")", ")", ".", "sum", "(", "-", "2", ")", "/", "span_lengths", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "update", "=", "self", ".", "gate", "(", "update", ",", "ctxt1", "+", "ctxt2", ")", "\n", "\n", "relation_scores", "=", "self", ".", "scorer", "(", "update", ",", "filtered_span_begin", ",", "filtered_span_end", ")", "\n", "\n", "# print('after:', update.norm().item())", "\n", "\n", "", "update_filtered", "[", "'span_vecs'", "]", "=", "update", "\n", "update_all", "[", "'span_vecs'", "]", "=", "overwrite_spans", "(", "update_all", "[", "'span_vecs'", "]", ",", "filtered_spans", "[", "'prune_indices'", "]", ",", "\n", "span_lengths", ",", "update", ")", "\n", "\n", "", "return", "update_all", ",", "update_filtered", ",", "relation_scores", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.relbasic.ModuleRelBasic.__init__": [[9, 14], ["torch.Module.__init__", "print", "models.coreflinker.scorers.OptFFpairs", "len"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["    ", "def", "__init__", "(", "self", ",", "dim_span", ",", "span_pair_generator", ",", "labels", ",", "config", ")", ":", "\n", "        ", "super", "(", "ModuleRelBasic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "print", "(", "\"ModuleRelBasic()\"", ")", "\n", "self", ".", "scorer", "=", "OptFFpairs", "(", "dim_span", ",", "len", "(", "labels", ")", ",", "config", ",", "span_pair_generator", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.coreflinker.relbasic.ModuleRelBasic.forward": [[15, 26], ["relbasic.ModuleRelBasic.scorer", "modules.utils.misc.relation_add_scores"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.utils.misc.relation_add_scores"], ["", "def", "forward", "(", "self", ",", "all_spans", ",", "filtered_spans", ",", "sequence_lengths", ")", ":", "\n", "        ", "update", "=", "filtered_spans", "[", "'span_vecs'", "]", "\n", "filtered_span_begin", "=", "filtered_spans", "[", "'span_begin'", "]", "\n", "filtered_span_end", "=", "filtered_spans", "[", "'span_end'", "]", "\n", "square_mask", "=", "filtered_spans", "[", "'square_mask'", "]", "\n", "span_lengths", "=", "filtered_spans", "[", "'span_lengths'", "]", "\n", "\n", "relation_scores", "=", "self", ".", "scorer", "(", "update", ",", "filtered_span_begin", ",", "filtered_span_end", ")", "\n", "relation_scores", "=", "relation_add_scores", "(", "relation_scores", ",", "filtered_spans", "[", "'span_scores'", "]", ")", "\n", "\n", "return", "all_spans", ",", "filtered_spans", ",", "relation_scores", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tests.test_linkercoref.DwieLinkerCorefTest.test_scenario_001": [[14, 90], ["print", "datass.dictionary.Dictionary", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "dict", "torch.IntTensor", "torch.Tensor", "torch.IntTensor", "torch.IntTensor", "torch.tensor", "modules.tasks.coreflinker.CorefLinkerLoss", "torch.Tensor", "modules.tasks.coreflinker.CorefLinkerLoss.", "torch.IntTensor", "len", "sorted", "len", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup"], ["    ", "def", "test_scenario_001", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        - no_nil_in_targets in True\n        - mention without any candidate (ex: role) in span (5,5)\n        - the nr of candidates is 2 for the rest of the mentions\n        \"\"\"", "\n", "print", "(", "'EXECUTING DwieLinkerCorefTest.test_scenario_001'", ")", "\n", "config_linkercoref", "=", "{", "'enabled'", ":", "True", ",", "\n", "'weight'", ":", "1.0", ",", "\n", "'filter_singletons_with_pruner'", ":", "False", ",", "\n", "'filter_singletons_with_ner'", ":", "False", ",", "\n", "'filter_singletons_with_matrix'", ":", "False", ",", "\n", "'ignore_no_mention_chains'", ":", "True", ",", "\n", "'end_to_end'", ":", "False", ",", "\n", "'no_nil_in_targets'", ":", "True", ",", "\n", "'doc_level_candidates'", ":", "False", "}", "\n", "dic", "=", "Dictionary", "(", ")", "\n", "dic", ".", "add", "(", "'Berlin'", ")", "\n", "dic", ".", "add", "(", "'NILL'", ")", "\n", "dic", ".", "add", "(", "'Ghent'", ")", "\n", "dic", ".", "add", "(", "'Ghent2'", ")", "\n", "dic", ".", "add", "(", "'Ghent3'", ")", "\n", "dic", ".", "add", "(", "'Berlin2'", ")", "\n", "dic", ".", "add", "(", "'Berlin3'", ")", "\n", "dic", ".", "add", "(", "'Berlin4'", ")", "\n", "\n", "linker", "=", "dict", "(", ")", "\n", "linker", "[", "'candidates'", "]", "=", "torch", ".", "IntTensor", "(", "[", "[", "[", "dic", ".", "lookup", "(", "'Berlin'", ")", ",", "dic", ".", "lookup", "(", "'Berlin2'", ")", "]", ",", "\n", "[", "dic", ".", "lookup", "(", "'Ghent'", ")", ",", "dic", ".", "lookup", "(", "'Ghent2'", ")", "]", ",", "\n", "[", "dic", ".", "lookup", "(", "'Berlin2'", ")", ",", "dic", ".", "lookup", "(", "'Berlin'", ")", "]", ",", "\n", "[", "dic", ".", "lookup", "(", "'Ghent2'", ")", ",", "dic", ".", "lookup", "(", "'Ghent'", ")", "]", ",", "\n", "[", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", "]", "]", "]", ")", "\n", "linker", "[", "'targets'", "]", "=", "torch", ".", "Tensor", "(", "[", "[", "[", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", "]", "]", "]", ")", "\n", "linker", "[", "'candidate_lengths'", "]", "=", "torch", ".", "IntTensor", "(", "[", "[", "3", ",", "3", ",", "3", ",", "3", ",", "0", "]", "]", ")", "\n", "linker", "[", "'total_cand_lengths_in_gold_mentions'", "]", "=", "torch", ".", "IntTensor", "(", "[", "[", "3", ",", "3", ",", "3", ",", "3", ",", "0", "]", "]", ")", "\n", "\n", "linker", "[", "'gold_spans'", "]", "=", "[", "[", "(", "1", ",", "1", ")", ",", "(", "2", ",", "2", ")", ",", "(", "3", ",", "3", ")", ",", "(", "4", ",", "4", ")", ",", "(", "5", ",", "5", ")", "]", "]", "\n", "linker", "[", "'gold'", "]", "=", "[", "[", "(", "1", ",", "1", ",", "'Berlin'", ")", ",", "(", "2", ",", "2", ",", "'NILL'", ")", ",", "(", "3", ",", "3", ",", "'Berlin'", ")", ",", "(", "4", ",", "4", ",", "'NILL'", ")", "]", "]", "\n", "\n", "filtered_spans", "=", "{", "}", "\n", "filtered_spans", "[", "'spans'", "]", "=", "[", "[", "(", "1", ",", "1", ")", ",", "(", "2", ",", "2", ")", ",", "(", "3", ",", "3", ")", ",", "(", "4", ",", "4", ")", ",", "(", "5", ",", "5", ")", "]", "]", "\n", "filtered_spans", "[", "'reindex_wrt_gold'", "]", "=", "torch", ".", "tensor", "(", "[", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", "]", "]", ",", "dtype", "=", "torch", ".", "int32", ")", "\n", "\n", "linker_coref_task", "=", "CorefLinkerLoss", "(", "'links'", ",", "\n", "'coref'", ",", "\n", "dic", ",", "\n", "# self.linker_coref_scorer.entity_embedder.dictionary,", "\n", "config_linkercoref", ",", "False", "\n", "# config['linkercoref']", "\n", ")", "\n", "\n", "scores", "=", "torch", ".", "Tensor", "(", "[", "[", "[", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# Berlin", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "# Ghent", "\n", "[", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# Berlin", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "# Ghent", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", "# NILL", "\n", "]", "]", ")", "\n", "gold_m2i", "=", "[", "torch", ".", "IntTensor", "(", "[", "0", ",", "1", ",", "0", ",", "1", ",", "2", "]", ")", "]", "\n", "settings", ".", "device", "=", "'cpu'", "\n", "output_loss", ",", "output_linking", ",", "output_coref", "=", "linker_coref_task", "(", "scores", "=", "scores", ",", "gold_m2i", "=", "gold_m2i", ",", "\n", "filtered_spans", "=", "filtered_spans", ",", "\n", "gold_spans", "=", "linker", "[", "'gold_spans'", "]", ",", "\n", "linker", "=", "linker", ",", "predict", "=", "True", ",", "pruner_spans", "=", "None", ",", "\n", "ner_spans", "=", "[", "[", "]", "]", ")", "\n", "\n", "assert", "len", "(", "output_linking", "[", "'pred'", "]", ")", "==", "1", "\n", "assert", "sorted", "(", "output_linking", "[", "'pred'", "]", "[", "0", "]", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "==", "[", "(", "1", ",", "1", ",", "'Berlin'", ")", ",", "\n", "(", "2", ",", "2", ",", "'NILL'", ")", ",", "\n", "(", "3", ",", "3", ",", "'Berlin'", ")", ",", "\n", "(", "4", ",", "4", ",", "'NILL'", ")", "]", "\n", "assert", "len", "(", "output_coref", "[", "'pred'", "]", ")", "==", "1", "\n", "assert", "output_coref", "[", "'pred'", "]", "[", "0", "]", "==", "[", "[", "(", "1", ",", "1", ")", ",", "(", "3", ",", "3", ")", "]", ",", "[", "(", "2", ",", "2", ")", ",", "(", "4", ",", "4", ")", "]", ",", "[", "(", "5", ",", "5", ")", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tests.test_linkercoref.DwieLinkerCorefTest.test_scenario_002": [[91, 163], ["print", "datass.dictionary.Dictionary", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "dict", "torch.IntTensor", "torch.Tensor", "torch.IntTensor", "torch.IntTensor", "torch.tensor", "modules.tasks.coreflinker.CorefLinkerLoss", "torch.Tensor", "modules.tasks.coreflinker.CorefLinkerLoss.", "torch.IntTensor", "len", "sorted", "len", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup"], ["", "def", "test_scenario_002", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        - no_nil_in_targets in True\n        - all mention have candidate links\n        - the nr of candidates is 2 for the rest of the mentions\n        \"\"\"", "\n", "print", "(", "'EXECUTING DwieLinkerCorefTest.test_scenario_002'", ")", "\n", "config_linkercoref", "=", "{", "'enabled'", ":", "True", ",", "\n", "'weight'", ":", "1.0", ",", "\n", "'filter_singletons_with_pruner'", ":", "False", ",", "\n", "'filter_singletons_with_ner'", ":", "False", ",", "\n", "'filter_singletons_with_matrix'", ":", "False", ",", "\n", "'ignore_no_mention_chains'", ":", "True", ",", "\n", "'end_to_end'", ":", "False", ",", "\n", "'no_nil_in_targets'", ":", "True", ",", "\n", "'doc_level_candidates'", ":", "False", "}", "\n", "dic", "=", "Dictionary", "(", ")", "\n", "dic", ".", "add", "(", "'Berlin'", ")", "\n", "dic", ".", "add", "(", "'NILL'", ")", "\n", "dic", ".", "add", "(", "'Ghent'", ")", "\n", "dic", ".", "add", "(", "'Ghent2'", ")", "\n", "dic", ".", "add", "(", "'Ghent3'", ")", "\n", "dic", ".", "add", "(", "'Berlin2'", ")", "\n", "dic", ".", "add", "(", "'Berlin3'", ")", "\n", "dic", ".", "add", "(", "'Berlin4'", ")", "\n", "\n", "linker", "=", "dict", "(", ")", "\n", "linker", "[", "'candidates'", "]", "=", "torch", ".", "IntTensor", "(", "[", "[", "[", "dic", ".", "lookup", "(", "'Berlin'", ")", ",", "dic", ".", "lookup", "(", "'Berlin2'", ")", "]", ",", "\n", "[", "dic", ".", "lookup", "(", "'Ghent'", ")", ",", "dic", ".", "lookup", "(", "'Ghent2'", ")", "]", ",", "\n", "[", "dic", ".", "lookup", "(", "'Berlin2'", ")", ",", "dic", ".", "lookup", "(", "'Berlin'", ")", "]", ",", "\n", "[", "dic", ".", "lookup", "(", "'Ghent2'", ")", ",", "dic", ".", "lookup", "(", "'Ghent'", ")", "]", "]", "]", ")", "\n", "linker", "[", "'targets'", "]", "=", "torch", ".", "Tensor", "(", "[", "[", "[", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", "]", "]", "]", ")", "\n", "linker", "[", "'candidate_lengths'", "]", "=", "torch", ".", "IntTensor", "(", "[", "[", "3", ",", "3", ",", "3", ",", "3", "]", "]", ")", "\n", "linker", "[", "'total_cand_lengths_in_gold_mentions'", "]", "=", "torch", ".", "IntTensor", "(", "[", "[", "3", ",", "3", ",", "3", ",", "3", "]", "]", ")", "\n", "linker", "[", "'gold_spans'", "]", "=", "[", "[", "(", "1", ",", "1", ")", ",", "(", "2", ",", "2", ")", ",", "(", "3", ",", "3", ")", ",", "(", "4", ",", "4", ")", "]", "]", "\n", "linker", "[", "'gold'", "]", "=", "[", "[", "(", "1", ",", "1", ",", "'Berlin'", ")", ",", "(", "2", ",", "2", ",", "'NILL'", ")", ",", "(", "3", ",", "3", ",", "'Berlin'", ")", ",", "(", "4", ",", "4", ",", "'NILL'", ")", "]", "]", "\n", "\n", "filtered_spans", "=", "{", "}", "\n", "filtered_spans", "[", "'spans'", "]", "=", "[", "[", "(", "1", ",", "1", ")", ",", "(", "2", ",", "2", ")", ",", "(", "3", ",", "3", ")", ",", "(", "4", ",", "4", ")", "]", "]", "\n", "filtered_spans", "[", "'reindex_wrt_gold'", "]", "=", "torch", ".", "tensor", "(", "[", "[", "0", ",", "1", ",", "2", ",", "3", "]", "]", ",", "dtype", "=", "torch", ".", "int32", ")", "\n", "\n", "linker_coref_task", "=", "CorefLinkerLoss", "(", "'links'", ",", "\n", "'coref'", ",", "\n", "dic", ",", "\n", "# self.linker_coref_scorer.entity_embedder.dictionary,", "\n", "config_linkercoref", ",", "False", "\n", "# config['linkercoref']", "\n", ")", "\n", "\n", "scores", "=", "torch", ".", "Tensor", "(", "[", "[", "[", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# Berlin", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "# Ghent", "\n", "[", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# Berlin", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", "# Ghent", "\n", "]", "]", ")", "\n", "gold_m2i", "=", "[", "torch", ".", "IntTensor", "(", "[", "0", ",", "1", ",", "0", ",", "1", "]", ")", "]", "\n", "settings", ".", "device", "=", "'cpu'", "\n", "output_loss", ",", "output_linking", ",", "output_coref", "=", "linker_coref_task", "(", "scores", "=", "scores", ",", "gold_m2i", "=", "gold_m2i", ",", "\n", "filtered_spans", "=", "filtered_spans", ",", "\n", "gold_spans", "=", "linker", "[", "'gold_spans'", "]", ",", "\n", "linker", "=", "linker", ",", "predict", "=", "True", ",", "pruner_spans", "=", "None", ",", "\n", "ner_spans", "=", "[", "[", "]", "]", ")", "\n", "\n", "assert", "len", "(", "output_linking", "[", "'pred'", "]", ")", "==", "1", "\n", "assert", "sorted", "(", "output_linking", "[", "'pred'", "]", "[", "0", "]", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "==", "[", "(", "1", ",", "1", ",", "'Berlin'", ")", ",", "\n", "(", "2", ",", "2", ",", "'NILL'", ")", ",", "\n", "(", "3", ",", "3", ",", "'Berlin'", ")", ",", "\n", "(", "4", ",", "4", ",", "'NILL'", ")", "]", "\n", "assert", "len", "(", "output_coref", "[", "'pred'", "]", ")", "==", "1", "\n", "assert", "output_coref", "[", "'pred'", "]", "[", "0", "]", "==", "[", "[", "(", "1", ",", "1", ")", ",", "(", "3", ",", "3", ")", "]", ",", "[", "(", "2", ",", "2", ")", ",", "(", "4", ",", "4", ")", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tests.test_linkercoref.DwieLinkerCorefTest.test_scenario_003": [[164, 236], ["print", "datass.dictionary.Dictionary", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "dict", "torch.IntTensor", "torch.Tensor", "torch.IntTensor", "torch.IntTensor", "modules.tasks.coreflinker.CorefLinkerLoss", "torch.tensor", "torch.Tensor", "modules.tasks.coreflinker.CorefLinkerLoss.", "torch.IntTensor", "len", "sorted", "len", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup"], ["", "def", "test_scenario_003", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        - no_nil_in_targets in False\n        - all mention have candidate links\n        - the nr of candidates is 3 (including NILL) for the rest of the mentions\n        - some of the valid candidates are NILL\n        \"\"\"", "\n", "\n", "print", "(", "'EXECUTING DwieLinkerCorefTest.test_scenario_003'", ")", "\n", "config_linkercoref", "=", "{", "'enabled'", ":", "True", ",", "\n", "'weight'", ":", "1.0", ",", "\n", "'filter_singletons_with_pruner'", ":", "False", ",", "\n", "'filter_singletons_with_ner'", ":", "False", ",", "\n", "'filter_singletons_with_matrix'", ":", "False", ",", "\n", "'ignore_no_mention_chains'", ":", "True", ",", "\n", "'end_to_end'", ":", "False", ",", "\n", "'no_nil_in_targets'", ":", "False", ",", "\n", "'doc_level_candidates'", ":", "False", "}", "\n", "dic", "=", "Dictionary", "(", ")", "\n", "dic", ".", "add", "(", "'Berlin'", ")", "\n", "dic", ".", "add", "(", "'NILL'", ")", "\n", "dic", ".", "add", "(", "'Ghent'", ")", "\n", "dic", ".", "add", "(", "'Ghent2'", ")", "\n", "dic", ".", "add", "(", "'Ghent3'", ")", "\n", "dic", ".", "add", "(", "'Berlin2'", ")", "\n", "dic", ".", "add", "(", "'Berlin3'", ")", "\n", "dic", ".", "add", "(", "'Berlin4'", ")", "\n", "\n", "linker", "=", "dict", "(", ")", "\n", "linker", "[", "'candidates'", "]", "=", "torch", ".", "IntTensor", "(", "[", "[", "[", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "dic", ".", "lookup", "(", "'Berlin'", ")", ",", "dic", ".", "lookup", "(", "'Berlin2'", ")", "]", ",", "\n", "[", "dic", ".", "lookup", "(", "'Ghent'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "dic", ".", "lookup", "(", "'Ghent2'", ")", "]", ",", "\n", "[", "dic", ".", "lookup", "(", "'Berlin2'", ")", ",", "dic", ".", "lookup", "(", "'Berlin'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", "]", ",", "\n", "[", "dic", ".", "lookup", "(", "'Ghent2'", ")", ",", "dic", ".", "lookup", "(", "'Ghent'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", "]", "]", "]", ")", "\n", "linker", "[", "'targets'", "]", "=", "torch", ".", "Tensor", "(", "[", "[", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", "]", ")", "\n", "\n", "linker", "[", "'candidate_lengths'", "]", "=", "torch", ".", "IntTensor", "(", "[", "[", "3", ",", "3", ",", "3", ",", "3", "]", "]", ")", "\n", "linker", "[", "'total_cand_lengths_in_gold_mentions'", "]", "=", "torch", ".", "IntTensor", "(", "[", "[", "3", ",", "3", ",", "3", ",", "3", "]", "]", ")", "\n", "linker", "[", "'gold_spans'", "]", "=", "[", "[", "(", "1", ",", "1", ")", ",", "(", "2", ",", "2", ")", ",", "(", "3", ",", "3", ")", ",", "(", "4", ",", "4", ")", "]", "]", "\n", "linker", "[", "'gold'", "]", "=", "[", "[", "(", "1", ",", "1", ",", "'Berlin'", ")", ",", "(", "2", ",", "2", ",", "'NILL'", ")", ",", "(", "3", ",", "3", ",", "'Berlin'", ")", ",", "(", "4", ",", "4", ",", "'NILL'", ")", "]", "]", "\n", "linker_coref_task", "=", "CorefLinkerLoss", "(", "'links'", ",", "\n", "'coref'", ",", "\n", "dic", ",", "\n", "config_linkercoref", ",", "False", "\n", ")", "\n", "\n", "filtered_spans", "=", "{", "}", "\n", "filtered_spans", "[", "'spans'", "]", "=", "[", "[", "(", "1", ",", "1", ")", ",", "(", "2", ",", "2", ")", ",", "(", "3", ",", "3", ")", ",", "(", "4", ",", "4", ")", "]", "]", "\n", "filtered_spans", "[", "'reindex_wrt_gold'", "]", "=", "torch", ".", "tensor", "(", "[", "[", "0", ",", "1", ",", "2", ",", "3", "]", "]", ",", "dtype", "=", "torch", ".", "int32", ")", "\n", "\n", "scores", "=", "torch", ".", "Tensor", "(", "[", "[", "[", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# Berlin", "\n", "[", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# Ghent", "\n", "[", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# Berlin", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", "# Ghent", "\n", "]", "]", ")", "\n", "gold_m2i", "=", "[", "torch", ".", "IntTensor", "(", "[", "0", ",", "1", ",", "0", ",", "1", "]", ")", "]", "\n", "settings", ".", "device", "=", "'cpu'", "\n", "output_loss", ",", "output_linking", ",", "output_coref", "=", "linker_coref_task", "(", "scores", "=", "scores", ",", "gold_m2i", "=", "gold_m2i", ",", "\n", "filtered_spans", "=", "filtered_spans", ",", "\n", "gold_spans", "=", "linker", "[", "'gold_spans'", "]", ",", "\n", "linker", "=", "linker", ",", "predict", "=", "True", ",", "pruner_spans", "=", "None", ",", "\n", "ner_spans", "=", "[", "[", "]", "]", ")", "\n", "\n", "assert", "len", "(", "output_linking", "[", "'pred'", "]", ")", "==", "1", "\n", "assert", "sorted", "(", "output_linking", "[", "'pred'", "]", "[", "0", "]", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "==", "[", "(", "1", ",", "1", ",", "'Berlin'", ")", ",", "\n", "(", "2", ",", "2", ",", "'NILL'", ")", ",", "\n", "(", "3", ",", "3", ",", "'Berlin'", ")", ",", "\n", "(", "4", ",", "4", ",", "'NILL'", ")", "]", "\n", "assert", "len", "(", "output_coref", "[", "'pred'", "]", ")", "==", "1", "\n", "assert", "output_coref", "[", "'pred'", "]", "[", "0", "]", "==", "[", "[", "(", "1", ",", "1", ")", ",", "(", "3", ",", "3", ")", "]", ",", "[", "(", "2", ",", "2", ")", ",", "(", "4", ",", "4", ")", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tests.test_linkercoref.DwieLinkerCorefTest.test_scenario_004": [[237, 312], ["print", "datass.dictionary.Dictionary", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "dict", "torch.IntTensor", "torch.Tensor", "torch.IntTensor", "torch.IntTensor", "modules.tasks.coreflinker.CorefLinkerLoss", "torch.tensor", "torch.Tensor", "modules.tasks.coreflinker.CorefLinkerLoss.", "torch.IntTensor", "len", "sorted", "len", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup"], ["", "def", "test_scenario_004", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        - no_nil_in_targets in True\n        - mention without any candidate (ex: role) in span (5,5)\n        - the nr of candidates is 3 (including NILL) for the rest of the mentions\n        \"\"\"", "\n", "\n", "print", "(", "'EXECUTING DwieLinkerCorefTest.test_scenario_004'", ")", "\n", "config_linkercoref", "=", "{", "'enabled'", ":", "True", ",", "\n", "'weight'", ":", "1.0", ",", "\n", "'filter_singletons_with_pruner'", ":", "False", ",", "\n", "'filter_singletons_with_ner'", ":", "False", ",", "\n", "'filter_singletons_with_matrix'", ":", "False", ",", "\n", "'ignore_no_mention_chains'", ":", "True", ",", "\n", "'end_to_end'", ":", "False", ",", "\n", "'no_nil_in_targets'", ":", "False", ",", "\n", "'doc_level_candidates'", ":", "False", "}", "\n", "dic", "=", "Dictionary", "(", ")", "\n", "dic", ".", "add", "(", "'Berlin'", ")", "\n", "dic", ".", "add", "(", "'NILL'", ")", "\n", "dic", ".", "add", "(", "'Ghent'", ")", "\n", "dic", ".", "add", "(", "'Ghent2'", ")", "\n", "dic", ".", "add", "(", "'Ghent3'", ")", "\n", "dic", ".", "add", "(", "'Berlin2'", ")", "\n", "dic", ".", "add", "(", "'Berlin3'", ")", "\n", "dic", ".", "add", "(", "'Berlin4'", ")", "\n", "\n", "linker", "=", "dict", "(", ")", "\n", "linker", "[", "'candidates'", "]", "=", "torch", ".", "IntTensor", "(", "[", "[", "[", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "dic", ".", "lookup", "(", "'Berlin'", ")", ",", "dic", ".", "lookup", "(", "'Berlin2'", ")", "]", ",", "\n", "[", "dic", ".", "lookup", "(", "'Ghent'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "dic", ".", "lookup", "(", "'Ghent2'", ")", "]", ",", "\n", "[", "dic", ".", "lookup", "(", "'Berlin2'", ")", ",", "dic", ".", "lookup", "(", "'Berlin'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", "]", ",", "\n", "[", "dic", ".", "lookup", "(", "'Ghent2'", ")", ",", "dic", ".", "lookup", "(", "'Ghent'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", "]", ",", "\n", "[", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", "]", "]", "]", ")", "\n", "\n", "linker", "[", "'targets'", "]", "=", "torch", ".", "Tensor", "(", "[", "[", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", "]", "]", "]", ")", "\n", "\n", "linker", "[", "'candidate_lengths'", "]", "=", "torch", ".", "IntTensor", "(", "[", "[", "3", ",", "3", ",", "3", ",", "3", ",", "0", "]", "]", ")", "\n", "linker", "[", "'total_cand_lengths_in_gold_mentions'", "]", "=", "torch", ".", "IntTensor", "(", "[", "[", "3", ",", "3", ",", "3", ",", "3", ",", "0", "]", "]", ")", "\n", "linker", "[", "'gold_spans'", "]", "=", "[", "[", "(", "1", ",", "1", ")", ",", "(", "2", ",", "2", ")", ",", "(", "3", ",", "3", ")", ",", "(", "4", ",", "4", ")", ",", "(", "5", ",", "5", ")", "]", "]", "\n", "linker", "[", "'gold'", "]", "=", "[", "[", "(", "1", ",", "1", ",", "'Berlin'", ")", ",", "(", "2", ",", "2", ",", "'NILL'", ")", ",", "(", "3", ",", "3", ",", "'Berlin'", ")", ",", "(", "4", ",", "4", ",", "'NILL'", ")", "]", "]", "\n", "linker_coref_task", "=", "CorefLinkerLoss", "(", "'links'", ",", "\n", "'coref'", ",", "\n", "dic", ",", "\n", "config_linkercoref", ",", "False", "\n", ")", "\n", "\n", "filtered_spans", "=", "{", "}", "\n", "filtered_spans", "[", "'spans'", "]", "=", "[", "[", "(", "1", ",", "1", ")", ",", "(", "2", ",", "2", ")", ",", "(", "3", ",", "3", ")", ",", "(", "4", ",", "4", ")", ",", "(", "5", ",", "5", ")", "]", "]", "\n", "filtered_spans", "[", "'reindex_wrt_gold'", "]", "=", "torch", ".", "tensor", "(", "[", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", "]", "]", ",", "dtype", "=", "torch", ".", "int32", ")", "\n", "\n", "scores", "=", "torch", ".", "Tensor", "(", "[", "[", "[", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# Berlin", "\n", "[", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# Ghent", "\n", "[", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# Berlin", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "# Ghent", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", "# NILL", "\n", "]", "]", ")", "\n", "gold_m2i", "=", "[", "torch", ".", "IntTensor", "(", "[", "0", ",", "1", ",", "0", ",", "1", ",", "2", "]", ")", "]", "\n", "settings", ".", "device", "=", "'cpu'", "\n", "output_loss", ",", "output_linking", ",", "output_coref", "=", "linker_coref_task", "(", "scores", "=", "scores", ",", "gold_m2i", "=", "gold_m2i", ",", "\n", "filtered_spans", "=", "filtered_spans", ",", "\n", "gold_spans", "=", "linker", "[", "'gold_spans'", "]", ",", "\n", "linker", "=", "linker", ",", "predict", "=", "True", ",", "pruner_spans", "=", "None", ",", "\n", "ner_spans", "=", "[", "[", "]", "]", ")", "\n", "\n", "assert", "len", "(", "output_linking", "[", "'pred'", "]", ")", "==", "1", "\n", "assert", "sorted", "(", "output_linking", "[", "'pred'", "]", "[", "0", "]", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "==", "[", "(", "1", ",", "1", ",", "'Berlin'", ")", ",", "\n", "(", "2", ",", "2", ",", "'NILL'", ")", ",", "\n", "(", "3", ",", "3", ",", "'Berlin'", ")", ",", "\n", "(", "4", ",", "4", ",", "'NILL'", ")", "]", "\n", "assert", "len", "(", "output_coref", "[", "'pred'", "]", ")", "==", "1", "\n", "assert", "output_coref", "[", "'pred'", "]", "[", "0", "]", "==", "[", "[", "(", "1", ",", "1", ")", ",", "(", "3", ",", "3", ")", "]", ",", "[", "(", "2", ",", "2", ")", ",", "(", "4", ",", "4", ")", "]", ",", "[", "(", "5", ",", "5", ")", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tests.test_linkercoref.DwieLinkerCorefTest.test_scenario_005": [[314, 423], ["print", "datass.dictionary.Dictionary", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "dict", "torch.IntTensor", "torch.Tensor", "torch.IntTensor", "torch.IntTensor", "torch.tensor", "modules.tasks.coreflinker.CorefLinkerLoss", "torch.Tensor", "modules.tasks.coreflinker.CorefLinkerLoss.", "torch.Tensor", "modules.tasks.coreflinker.CorefLinkerLoss.", "torch.IntTensor", "len", "sorted", "len", "torch.IntTensor", "len", "sorted", "len", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup"], ["", "def", "test_scenario_005", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        - no_nil_in_targets in True\n        - mention without any candidate (ex: role) in span (5,5)\n        - variable nr of candidates for the rest of the mentions\n        - some mentions in the same cluster have no correct candidates, while others do have correct ones\n        \"\"\"", "\n", "print", "(", "'EXECUTING DwieLinkerCorefTest.test_scenario_005'", ")", "\n", "config_linkercoref", "=", "{", "'enabled'", ":", "True", ",", "\n", "'weight'", ":", "1.0", ",", "\n", "'filter_singletons_with_pruner'", ":", "False", ",", "\n", "'filter_singletons_with_ner'", ":", "False", ",", "\n", "'filter_singletons_with_matrix'", ":", "False", ",", "\n", "'ignore_no_mention_chains'", ":", "True", ",", "\n", "'end_to_end'", ":", "False", ",", "\n", "'no_nil_in_targets'", ":", "True", ",", "\n", "'doc_level_candidates'", ":", "False", "}", "\n", "dic", "=", "Dictionary", "(", ")", "\n", "dic", ".", "add", "(", "'Berlin'", ")", "\n", "dic", ".", "add", "(", "'NILL'", ")", "\n", "dic", ".", "add", "(", "'Ghent'", ")", "\n", "dic", ".", "add", "(", "'Ghent2'", ")", "\n", "dic", ".", "add", "(", "'Ghent3'", ")", "\n", "dic", ".", "add", "(", "'Berlin2'", ")", "\n", "dic", ".", "add", "(", "'Berlin3'", ")", "\n", "dic", ".", "add", "(", "'Berlin4'", ")", "\n", "\n", "linker", "=", "dict", "(", ")", "\n", "\n", "linker", "[", "'candidates'", "]", "=", "torch", ".", "IntTensor", "(", "[", "[", "[", "dic", ".", "lookup", "(", "'Berlin2'", ")", ",", "dic", ".", "lookup", "(", "'Berlin4'", ")", ",", "\n", "dic", ".", "lookup", "(", "'Berlin3'", ")", ",", "dic", ".", "lookup", "(", "'Berlin'", ")", "]", ",", "\n", "[", "dic", ".", "lookup", "(", "'Ghent2'", ")", ",", "dic", ".", "lookup", "(", "'Ghent'", ")", ",", "\n", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", "]", ",", "\n", "[", "dic", ".", "lookup", "(", "'Berlin2'", ")", ",", "dic", ".", "lookup", "(", "'Berlin'", ")", ",", "\n", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", "]", ",", "\n", "[", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "\n", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", "]", ",", "\n", "[", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "\n", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", "]", "]", "]", ")", "\n", "linker", "[", "'targets'", "]", "=", "torch", ".", "Tensor", "(", "[", "[", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", "]", ")", "\n", "# linker['candidate_lengths'] = torch.IntTensor([[5, 3, 3, 1, 0]])", "\n", "# linker['candidate_lengths_no_nill'] = torch.IntTensor([[4, 2, 2, 0, 0]])", "\n", "linker", "[", "'candidate_lengths'", "]", "=", "torch", ".", "IntTensor", "(", "[", "[", "4", ",", "2", ",", "2", ",", "0", ",", "0", "]", "]", ")", "\n", "linker", "[", "'total_cand_lengths_in_gold_mentions'", "]", "=", "torch", ".", "IntTensor", "(", "[", "[", "5", ",", "3", ",", "3", ",", "1", ",", "0", "]", "]", ")", "\n", "linker", "[", "'gold_spans'", "]", "=", "[", "[", "(", "1", ",", "1", ")", ",", "(", "2", ",", "2", ")", ",", "(", "3", ",", "3", ")", ",", "(", "4", ",", "4", ")", ",", "(", "5", ",", "5", ")", "]", "]", "\n", "linker", "[", "'gold'", "]", "=", "[", "[", "(", "1", ",", "1", ",", "'Berlin'", ")", ",", "(", "2", ",", "2", ",", "'Ghent'", ")", ",", "(", "3", ",", "3", ",", "'Berlin'", ")", ",", "(", "4", ",", "4", ",", "'Ghent'", ")", "]", "]", "\n", "\n", "filtered_spans", "=", "{", "}", "\n", "filtered_spans", "[", "'spans'", "]", "=", "[", "[", "(", "1", ",", "1", ")", ",", "(", "2", ",", "2", ")", ",", "(", "3", ",", "3", ")", ",", "(", "4", ",", "4", ")", ",", "(", "5", ",", "5", ")", "]", "]", "\n", "filtered_spans", "[", "'reindex_wrt_gold'", "]", "=", "torch", ".", "tensor", "(", "[", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", "]", "]", ",", "dtype", "=", "torch", ".", "int32", ")", "\n", "\n", "linker_coref_task", "=", "CorefLinkerLoss", "(", "'links'", ",", "\n", "'coref'", ",", "\n", "dic", ",", "\n", "# self.linker_coref_scorer.entity_embedder.dictionary,", "\n", "config_linkercoref", ",", "False", "\n", "# config['linkercoref']", "\n", ")", "\n", "\n", "scores", "=", "torch", ".", "Tensor", "(", "[", "[", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# Berlin", "\n", "[", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# Ghent", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# Berlin", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "# Ghent", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", "# NILL", "\n", "]", "]", ")", "\n", "gold_m2i", "=", "[", "torch", ".", "IntTensor", "(", "[", "0", ",", "1", ",", "0", ",", "1", ",", "2", "]", ")", "]", "\n", "settings", ".", "device", "=", "'cpu'", "\n", "output_loss", ",", "output_linking", ",", "output_coref", "=", "linker_coref_task", "(", "scores", "=", "scores", ",", "gold_m2i", "=", "gold_m2i", ",", "\n", "filtered_spans", "=", "filtered_spans", ",", "\n", "gold_spans", "=", "linker", "[", "'gold_spans'", "]", ",", "\n", "linker", "=", "linker", ",", "predict", "=", "True", ",", "\n", "pruner_spans", "=", "None", ",", "\n", "ner_spans", "=", "[", "[", "]", "]", ")", "\n", "\n", "assert", "len", "(", "output_linking", "[", "'pred'", "]", ")", "==", "1", "\n", "assert", "sorted", "(", "output_linking", "[", "'pred'", "]", "[", "0", "]", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "==", "[", "(", "1", ",", "1", ",", "'Berlin'", ")", ",", "\n", "(", "2", ",", "2", ",", "'Ghent'", ")", ",", "\n", "(", "3", ",", "3", ",", "'Berlin'", ")", ",", "\n", "(", "4", ",", "4", ",", "'Ghent'", ")", "]", "\n", "assert", "len", "(", "output_coref", "[", "'pred'", "]", ")", "==", "1", "\n", "assert", "output_coref", "[", "'pred'", "]", "[", "0", "]", "==", "[", "[", "(", "1", ",", "1", ")", ",", "(", "3", ",", "3", ")", "]", ",", "[", "(", "2", ",", "2", ")", ",", "(", "4", ",", "4", ")", "]", ",", "[", "(", "5", ",", "5", ")", "]", "]", "\n", "\n", "# now making berlin to point to the link instead of the mention", "\n", "scores", "=", "torch", ".", "Tensor", "(", "[", "[", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# Berlin", "\n", "[", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# Ghent", "\n", "[", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# Berlin", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "# Ghent", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", "# NILL", "\n", "]", "]", ")", "\n", "gold_m2i", "=", "[", "torch", ".", "IntTensor", "(", "[", "0", ",", "1", ",", "0", ",", "1", ",", "2", "]", ")", "]", "\n", "settings", ".", "device", "=", "'cpu'", "\n", "output_loss", ",", "output_linking", ",", "output_coref", "=", "linker_coref_task", "(", "scores", "=", "scores", ",", "gold_m2i", "=", "gold_m2i", ",", "\n", "filtered_spans", "=", "filtered_spans", ",", "\n", "gold_spans", "=", "linker", "[", "'gold_spans'", "]", ",", "\n", "linker", "=", "linker", ",", "predict", "=", "True", ",", "\n", "pruner_spans", "=", "None", ",", "\n", "ner_spans", "=", "[", "[", "]", "]", ")", "\n", "\n", "assert", "len", "(", "output_linking", "[", "'pred'", "]", ")", "==", "1", "\n", "assert", "sorted", "(", "output_linking", "[", "'pred'", "]", "[", "0", "]", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "==", "[", "(", "1", ",", "1", ",", "'Berlin'", ")", ",", "\n", "(", "2", ",", "2", ",", "'Ghent'", ")", ",", "\n", "(", "3", ",", "3", ",", "'Berlin'", ")", ",", "\n", "(", "4", ",", "4", ",", "'Ghent'", ")", "]", "\n", "assert", "len", "(", "output_coref", "[", "'pred'", "]", ")", "==", "1", "\n", "assert", "output_coref", "[", "'pred'", "]", "[", "0", "]", "==", "[", "[", "(", "1", ",", "1", ")", ",", "(", "3", ",", "3", ")", "]", ",", "[", "(", "2", ",", "2", ")", ",", "(", "4", ",", "4", ")", "]", ",", "[", "(", "5", ",", "5", ")", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tests.test_linkercoref.DwieLinkerCorefTest.test_scenario_006": [[425, 533], ["print", "datass.dictionary.Dictionary", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "dict", "torch.IntTensor", "torch.Tensor", "torch.IntTensor", "torch.IntTensor", "modules.tasks.coreflinker.CorefLinkerLoss", "torch.tensor", "torch.Tensor", "modules.tasks.coreflinker.CorefLinkerLoss.", "torch.Tensor", "modules.tasks.coreflinker.CorefLinkerLoss.", "torch.IntTensor", "len", "sorted", "len", "torch.IntTensor", "len", "sorted", "len", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup"], ["", "def", "test_scenario_006", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        - no_nil_in_targets in False\n        - mention without any candidate (ex: role) in span (5,5)\n        - variable nr of candidates for the rest of the mentions\n        - some mentions in the same cluster have no correct candidates, while others do have correct ones\n        \"\"\"", "\n", "print", "(", "'EXECUTING DwieLinkerCorefTest.test_scenario_006'", ")", "\n", "config_linkercoref", "=", "{", "'enabled'", ":", "True", ",", "\n", "'weight'", ":", "1.0", ",", "\n", "'filter_singletons_with_pruner'", ":", "False", ",", "\n", "'filter_singletons_with_ner'", ":", "False", ",", "\n", "'filter_singletons_with_matrix'", ":", "False", ",", "\n", "'ignore_no_mention_chains'", ":", "True", ",", "\n", "'end_to_end'", ":", "False", ",", "\n", "'no_nil_in_targets'", ":", "False", ",", "\n", "'doc_level_candidates'", ":", "False", "}", "\n", "dic", "=", "Dictionary", "(", ")", "\n", "dic", ".", "add", "(", "'Berlin'", ")", "\n", "dic", ".", "add", "(", "'NILL'", ")", "\n", "dic", ".", "add", "(", "'Ghent'", ")", "\n", "dic", ".", "add", "(", "'Ghent2'", ")", "\n", "dic", ".", "add", "(", "'Ghent3'", ")", "\n", "dic", ".", "add", "(", "'Berlin2'", ")", "\n", "dic", ".", "add", "(", "'Berlin3'", ")", "\n", "dic", ".", "add", "(", "'Berlin4'", ")", "\n", "\n", "linker", "=", "dict", "(", ")", "\n", "linker", "[", "'candidates'", "]", "=", "torch", ".", "IntTensor", "(", "[", "[", "[", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "dic", ".", "lookup", "(", "'Berlin2'", ")", ",", "\n", "dic", ".", "lookup", "(", "'Berlin4'", ")", ",", "\n", "dic", ".", "lookup", "(", "'Berlin3'", ")", ",", "dic", ".", "lookup", "(", "'Berlin'", ")", "]", ",", "\n", "[", "dic", ".", "lookup", "(", "'Ghent2'", ")", ",", "dic", ".", "lookup", "(", "'Ghent'", ")", ",", "\n", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", "]", ",", "\n", "[", "dic", ".", "lookup", "(", "'Berlin2'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "dic", ".", "lookup", "(", "'Berlin'", ")", ",", "\n", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", "]", ",", "\n", "[", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "\n", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", "]", ",", "\n", "[", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "\n", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", "]", "]", "]", ")", "\n", "linker", "[", "'targets'", "]", "=", "torch", ".", "Tensor", "(", "[", "[", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", "]", ")", "\n", "\n", "linker", "[", "'candidate_lengths'", "]", "=", "torch", ".", "IntTensor", "(", "[", "[", "5", ",", "3", ",", "3", ",", "1", ",", "0", "]", "]", ")", "\n", "linker", "[", "'total_cand_lengths_in_gold_mentions'", "]", "=", "torch", ".", "IntTensor", "(", "[", "[", "5", ",", "3", ",", "3", ",", "1", ",", "0", "]", "]", ")", "\n", "# linker['candidate_lengths_no_nill'] = torch.IntTensor([[4, 2, 2, 0, 0]])", "\n", "linker", "[", "'gold_spans'", "]", "=", "[", "[", "(", "1", ",", "1", ")", ",", "(", "2", ",", "2", ")", ",", "(", "3", ",", "3", ")", ",", "(", "4", ",", "4", ")", ",", "(", "5", ",", "5", ")", "]", "]", "\n", "linker", "[", "'gold'", "]", "=", "[", "[", "(", "1", ",", "1", ",", "'Berlin'", ")", ",", "(", "2", ",", "2", ",", "'Ghent'", ")", ",", "(", "3", ",", "3", ",", "'Berlin'", ")", ",", "(", "4", ",", "4", ",", "'Ghent'", ")", "]", "]", "\n", "linker_coref_task", "=", "CorefLinkerLoss", "(", "'links'", ",", "\n", "'coref'", ",", "\n", "dic", ",", "\n", "# self.linker_coref_scorer.entity_embedder.dictionary,", "\n", "config_linkercoref", ",", "False", "\n", "# config['linkercoref']", "\n", ")", "\n", "\n", "filtered_spans", "=", "{", "}", "\n", "filtered_spans", "[", "'spans'", "]", "=", "[", "[", "(", "1", ",", "1", ")", ",", "(", "2", ",", "2", ")", ",", "(", "3", ",", "3", ")", ",", "(", "4", ",", "4", ")", ",", "(", "5", ",", "5", ")", "]", "]", "\n", "filtered_spans", "[", "'reindex_wrt_gold'", "]", "=", "torch", ".", "tensor", "(", "[", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", "]", "]", ",", "dtype", "=", "torch", ".", "int32", ")", "\n", "\n", "scores", "=", "torch", ".", "Tensor", "(", "[", "[", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# Berlin", "\n", "[", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# Ghent", "\n", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# Berlin", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "# Ghent", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", "# NILL", "\n", "]", "]", ")", "\n", "gold_m2i", "=", "[", "torch", ".", "IntTensor", "(", "[", "0", ",", "1", ",", "0", ",", "1", ",", "2", "]", ")", "]", "\n", "settings", ".", "device", "=", "'cpu'", "\n", "output_loss", ",", "output_linking", ",", "output_coref", "=", "linker_coref_task", "(", "scores", "=", "scores", ",", "gold_m2i", "=", "gold_m2i", ",", "\n", "filtered_spans", "=", "filtered_spans", ",", "\n", "gold_spans", "=", "linker", "[", "'gold_spans'", "]", ",", "\n", "linker", "=", "linker", ",", "predict", "=", "True", ",", "\n", "pruner_spans", "=", "None", ",", "\n", "ner_spans", "=", "[", "[", "]", "]", ")", "\n", "\n", "assert", "len", "(", "output_linking", "[", "'pred'", "]", ")", "==", "1", "\n", "assert", "sorted", "(", "output_linking", "[", "'pred'", "]", "[", "0", "]", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "==", "[", "(", "1", ",", "1", ",", "'Berlin'", ")", ",", "\n", "(", "2", ",", "2", ",", "'Ghent'", ")", ",", "\n", "(", "3", ",", "3", ",", "'Berlin'", ")", ",", "\n", "(", "4", ",", "4", ",", "'Ghent'", ")", "]", "\n", "assert", "len", "(", "output_coref", "[", "'pred'", "]", ")", "==", "1", "\n", "assert", "output_coref", "[", "'pred'", "]", "[", "0", "]", "==", "[", "[", "(", "1", ",", "1", ")", ",", "(", "3", ",", "3", ")", "]", ",", "[", "(", "2", ",", "2", ")", ",", "(", "4", ",", "4", ")", "]", ",", "[", "(", "5", ",", "5", ")", "]", "]", "\n", "\n", "# now making point Berlin to the mention instead of the link", "\n", "scores", "=", "torch", ".", "Tensor", "(", "[", "[", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# Berlin", "\n", "[", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# Ghent", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# Berlin", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "# Ghent", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", "# NILL", "\n", "]", "]", ")", "\n", "gold_m2i", "=", "[", "torch", ".", "IntTensor", "(", "[", "0", ",", "1", ",", "0", ",", "1", ",", "2", "]", ")", "]", "\n", "settings", ".", "device", "=", "'cpu'", "\n", "output_loss", ",", "output_linking", ",", "output_coref", "=", "linker_coref_task", "(", "scores", "=", "scores", ",", "gold_m2i", "=", "gold_m2i", ",", "\n", "filtered_spans", "=", "filtered_spans", ",", "\n", "gold_spans", "=", "linker", "[", "'gold_spans'", "]", ",", "\n", "linker", "=", "linker", ",", "predict", "=", "True", ",", "\n", "pruner_spans", "=", "None", ",", "\n", "ner_spans", "=", "[", "[", "]", "]", ")", "\n", "\n", "assert", "len", "(", "output_linking", "[", "'pred'", "]", ")", "==", "1", "\n", "assert", "sorted", "(", "output_linking", "[", "'pred'", "]", "[", "0", "]", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "==", "[", "(", "1", ",", "1", ",", "'Berlin'", ")", ",", "\n", "(", "2", ",", "2", ",", "'Ghent'", ")", ",", "\n", "(", "3", ",", "3", ",", "'Berlin'", ")", ",", "\n", "(", "4", ",", "4", ",", "'Ghent'", ")", "]", "\n", "assert", "len", "(", "output_coref", "[", "'pred'", "]", ")", "==", "1", "\n", "assert", "output_coref", "[", "'pred'", "]", "[", "0", "]", "==", "[", "[", "(", "1", ",", "1", ")", ",", "(", "3", ",", "3", ")", "]", ",", "[", "(", "2", ",", "2", ")", ",", "(", "4", ",", "4", ")", "]", ",", "[", "(", "5", ",", "5", ")", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tests.test_linkercoref.DwieLinkerCorefTest.test_scenario_007": [[535, 629], ["print", "datass.dictionary.Dictionary", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "dict", "torch.IntTensor", "torch.Tensor", "torch.IntTensor", "torch.IntTensor", "torch.tensor", "modules.tasks.coreflinker.CorefLinkerLoss", "torch.Tensor", "modules.tasks.coreflinker.CorefLinkerLoss.", "torch.IntTensor", "len", "sorted", "len", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup"], ["", "def", "test_scenario_007", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        - no_nil_in_targets in True\n        - mention without any candidate (ex: role) in span (5,5)\n        - variable nr of candidates for the rest of the mentions\n        - some mentions in the same cluster have no correct candidates, while others do have correct ones\n        - mention with incorrect candidates occurs first => impossible to get cluster?\n        \"\"\"", "\n", "print", "(", "'EXECUTING DwieLinkerCorefTest.test_scenario_007'", ")", "\n", "config_linkercoref", "=", "{", "'enabled'", ":", "True", ",", "\n", "'weight'", ":", "1.0", ",", "\n", "'filter_singletons_with_pruner'", ":", "False", ",", "\n", "'filter_singletons_with_ner'", ":", "False", ",", "\n", "'filter_singletons_with_matrix'", ":", "False", ",", "\n", "'ignore_no_mention_chains'", ":", "True", ",", "\n", "'end_to_end'", ":", "False", ",", "\n", "'no_nil_in_targets'", ":", "True", ",", "\n", "'doc_level_candidates'", ":", "False", "}", "\n", "dic", "=", "Dictionary", "(", ")", "\n", "dic", ".", "add", "(", "'Berlin'", ")", "\n", "dic", ".", "add", "(", "'NILL'", ")", "\n", "dic", ".", "add", "(", "'Ghent'", ")", "\n", "dic", ".", "add", "(", "'Ghent2'", ")", "\n", "dic", ".", "add", "(", "'Ghent3'", ")", "\n", "dic", ".", "add", "(", "'Berlin2'", ")", "\n", "dic", ".", "add", "(", "'Berlin3'", ")", "\n", "dic", ".", "add", "(", "'Berlin4'", ")", "\n", "\n", "linker", "=", "dict", "(", ")", "\n", "\n", "linker", "[", "'candidates'", "]", "=", "torch", ".", "IntTensor", "(", "[", "[", "[", "dic", ".", "lookup", "(", "'Berlin2'", ")", ",", "dic", ".", "lookup", "(", "'Berlin4'", ")", ",", "\n", "dic", ".", "lookup", "(", "'Berlin3'", ")", ",", "dic", ".", "lookup", "(", "'Berlin'", ")", "]", ",", "\n", "[", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "\n", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", "]", ",", "\n", "[", "dic", ".", "lookup", "(", "'Berlin2'", ")", ",", "dic", ".", "lookup", "(", "'Berlin'", ")", ",", "\n", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", "]", ",", "\n", "[", "dic", ".", "lookup", "(", "'Ghent2'", ")", ",", "dic", ".", "lookup", "(", "'Ghent'", ")", ",", "\n", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", "]", ",", "\n", "[", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "\n", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", "]", "]", "]", ")", "\n", "linker", "[", "'targets'", "]", "=", "torch", ".", "Tensor", "(", "[", "[", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", "]", ")", "\n", "# linker['candidate_lengths'] = torch.IntTensor([[5, 1, 3, 3, 0]])", "\n", "linker", "[", "'candidate_lengths'", "]", "=", "torch", ".", "IntTensor", "(", "[", "[", "4", ",", "0", ",", "2", ",", "2", ",", "0", "]", "]", ")", "\n", "linker", "[", "'total_cand_lengths_in_gold_mentions'", "]", "=", "torch", ".", "IntTensor", "(", "[", "[", "5", ",", "1", ",", "3", ",", "3", ",", "0", "]", "]", ")", "\n", "linker", "[", "'gold_spans'", "]", "=", "[", "[", "(", "1", ",", "1", ")", ",", "(", "2", ",", "2", ")", ",", "(", "3", ",", "3", ")", ",", "(", "4", ",", "4", ")", ",", "(", "5", ",", "5", ")", "]", "]", "\n", "linker", "[", "'gold'", "]", "=", "[", "[", "(", "1", ",", "1", ",", "'Berlin'", ")", ",", "(", "2", ",", "2", ",", "'Ghent'", ")", ",", "(", "3", ",", "3", ",", "'Berlin'", ")", ",", "(", "4", ",", "4", ",", "'Ghent'", ")", "]", "]", "\n", "\n", "filtered_spans", "=", "{", "}", "\n", "filtered_spans", "[", "'spans'", "]", "=", "[", "[", "(", "1", ",", "1", ")", ",", "(", "2", ",", "2", ")", ",", "(", "3", ",", "3", ")", ",", "(", "4", ",", "4", ")", ",", "(", "5", ",", "5", ")", "]", "]", "\n", "filtered_spans", "[", "'reindex_wrt_gold'", "]", "=", "torch", ".", "tensor", "(", "[", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", "]", "]", ",", "dtype", "=", "torch", ".", "int32", ")", "\n", "\n", "linker_coref_task", "=", "CorefLinkerLoss", "(", "'links'", ",", "\n", "'coref'", ",", "\n", "dic", ",", "\n", "# self.linker_coref_scorer.entity_embedder.dictionary,", "\n", "config_linkercoref", ",", "False", "\n", "# config['linkercoref']", "\n", ")", "\n", "\n", "scores", "=", "torch", ".", "Tensor", "(", "[", "[", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# Berlin", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "# Ghent", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# Berlin", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "# Ghent", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", "# NILL", "\n", "]", "]", ")", "\n", "gold_m2i", "=", "[", "torch", ".", "IntTensor", "(", "[", "0", ",", "1", ",", "0", ",", "1", ",", "2", "]", ")", "]", "\n", "settings", ".", "device", "=", "'cpu'", "\n", "output_loss", ",", "output_linking", ",", "output_coref", "=", "linker_coref_task", "(", "scores", "=", "scores", ",", "gold_m2i", "=", "gold_m2i", ",", "\n", "filtered_spans", "=", "filtered_spans", ",", "\n", "gold_spans", "=", "linker", "[", "'gold_spans'", "]", ",", "\n", "linker", "=", "linker", ",", "predict", "=", "True", ",", "\n", "pruner_spans", "=", "None", ",", "\n", "ner_spans", "=", "[", "[", "]", "]", ")", "\n", "\n", "assert", "len", "(", "output_linking", "[", "'pred'", "]", ")", "==", "1", "\n", "# THIS IS DOWNSIZE OF THE CURRENT APPROACH:", "\n", "assert", "sorted", "(", "output_linking", "[", "'pred'", "]", "[", "0", "]", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "==", "[", "(", "1", ",", "1", ",", "'Berlin'", ")", ",", "\n", "(", "2", ",", "2", ",", "'NILL'", ")", ",", "\n", "(", "3", ",", "3", ",", "'Berlin'", ")", ",", "\n", "(", "4", ",", "4", ",", "'NILL'", ")", "]", "\n", "\n", "# INSTEAD THIS ASSERTION SHOULD WORK: -> but not possible to refer to 'Ghent', since the first mention", "\n", "# doesn't have 'Ghent' in its candidates. This produces two wrong mentions!!!!", "\n", "# assert sorted(output_linking['pred'][0], key=lambda x: x[0]) == [(1, 1, 'Berlin'),", "\n", "#                                                                  (2, 2, 'Ghent'),", "\n", "#                                                                  (3, 3, 'Berlin'),", "\n", "#                                                                  (4, 4, 'Ghent')]", "\n", "\n", "assert", "len", "(", "output_coref", "[", "'pred'", "]", ")", "==", "1", "\n", "assert", "output_coref", "[", "'pred'", "]", "[", "0", "]", "==", "[", "[", "(", "1", ",", "1", ")", ",", "(", "3", ",", "3", ")", "]", ",", "[", "(", "2", ",", "2", ")", ",", "(", "4", ",", "4", ")", "]", ",", "[", "(", "5", ",", "5", ")", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tests.test_linkercoref.DwieLinkerCorefTest.test_scenario_008": [[632, 752], ["print", "datass.dictionary.Dictionary", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "dict", "torch.IntTensor", "torch.Tensor", "torch.IntTensor", "modules.tasks.coreflinker.CorefLinkerLoss", "torch.tensor", "torch.tensor", "torch.Tensor", "modules.tasks.coreflinker.CorefLinkerLoss.", "torch.Tensor", "modules.tasks.coreflinker.CorefLinkerLoss.", "torch.IntTensor", "len", "sorted", "len", "torch.IntTensor", "len", "sorted", "len", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup"], ["", "def", "test_scenario_008", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        - no_nil_in_targets in True\n        - mention without any candidate (ex: role) in span (5,5)\n        - variable nr of candidates for the rest of the mentions\n        - some mentions in the same cluster have no correct candidates, while others do have correct ones\n        - some mentions are not valid entity mentions where filter_singletons_with_matrix enters in play (6,6)\n            (ex: eleven) which is span but doesn't refer to any entity and is not valid entity mention\n        \"\"\"", "\n", "print", "(", "'EXECUTING DwieLinkerCorefTest.test_scenario_008'", ")", "\n", "config_linkercoref", "=", "{", "'enabled'", ":", "True", ",", "\n", "'weight'", ":", "1.0", ",", "\n", "'filter_singletons_with_pruner'", ":", "False", ",", "\n", "'filter_singletons_with_ner'", ":", "False", ",", "\n", "'filter_singletons_with_matrix'", ":", "True", ",", "\n", "'ignore_no_mention_chains'", ":", "True", ",", "\n", "'end_to_end'", ":", "False", ",", "\n", "'no_nil_in_targets'", ":", "True", ",", "\n", "'doc_level_candidates'", ":", "False", "}", "\n", "dic", "=", "Dictionary", "(", ")", "\n", "dic", ".", "add", "(", "'Berlin'", ")", "\n", "dic", ".", "add", "(", "'NILL'", ")", "\n", "dic", ".", "add", "(", "'Ghent'", ")", "\n", "dic", ".", "add", "(", "'Ghent2'", ")", "\n", "dic", ".", "add", "(", "'Ghent3'", ")", "\n", "dic", ".", "add", "(", "'Berlin2'", ")", "\n", "dic", ".", "add", "(", "'Berlin3'", ")", "\n", "dic", ".", "add", "(", "'Berlin4'", ")", "\n", "dic", ".", "add", "(", "'Eleven'", ")", "\n", "\n", "linker", "=", "dict", "(", ")", "\n", "linker", "[", "'candidates'", "]", "=", "torch", ".", "IntTensor", "(", "[", "[", "[", "dic", ".", "lookup", "(", "'Berlin2'", ")", ",", "\n", "dic", ".", "lookup", "(", "'Berlin4'", ")", ",", "\n", "dic", ".", "lookup", "(", "'Berlin3'", ")", ",", "dic", ".", "lookup", "(", "'Berlin'", ")", "]", ",", "\n", "[", "dic", ".", "lookup", "(", "'Ghent2'", ")", ",", "dic", ".", "lookup", "(", "'Ghent'", ")", ",", "\n", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", "]", ",", "\n", "[", "dic", ".", "lookup", "(", "'Berlin2'", ")", ",", "dic", ".", "lookup", "(", "'Berlin'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "\n", "dic", ".", "lookup", "(", "'NILL'", ")", "]", ",", "\n", "[", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "\n", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", "]", ",", "\n", "[", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "\n", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", "]", ",", "\n", "[", "dic", ".", "lookup", "(", "'Eleven'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "\n", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", "]", "]", "]", ")", "\n", "linker", "[", "'targets'", "]", "=", "torch", ".", "Tensor", "(", "[", "[", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", "]", ")", "\n", "\n", "linker", "[", "'candidate_lengths'", "]", "=", "torch", ".", "IntTensor", "(", "[", "[", "4", ",", "2", ",", "2", ",", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "\n", "# linker['total_cand_lengths_in_gold_mentions'] = torch.IntTensor([[4, 2, 2, 0, 0]])", "\n", "linker", "[", "'total_cand_lengths_in_gold_mentions'", "]", "=", "None", "\n", "\n", "# linker['candidate_lengths_no_nill'] = torch.IntTensor([[4, 2, 2, 0, 0]])", "\n", "linker", "[", "'gold_spans'", "]", "=", "[", "[", "(", "1", ",", "1", ")", ",", "(", "2", ",", "2", ")", ",", "(", "3", ",", "3", ")", ",", "(", "4", ",", "4", ")", ",", "(", "5", ",", "5", ")", "]", "]", "\n", "linker", "[", "'gold'", "]", "=", "[", "[", "(", "1", ",", "1", ",", "'Berlin'", ")", ",", "(", "2", ",", "2", ",", "'Ghent'", ")", ",", "(", "3", ",", "3", ",", "'Berlin'", ")", ",", "(", "4", ",", "4", ",", "'Ghent'", ")", "]", "]", "\n", "linker_coref_task", "=", "CorefLinkerLoss", "(", "'links'", ",", "\n", "'coref'", ",", "\n", "dic", ",", "\n", "# self.linker_coref_scorer.entity_embedder.dictionary,", "\n", "config_linkercoref", ",", "True", "\n", "# config['linkercoref']", "\n", ")", "\n", "\n", "filtered_spans", "=", "{", "}", "\n", "filtered_spans", "[", "'spans'", "]", "=", "[", "[", "(", "1", ",", "1", ")", ",", "(", "2", ",", "2", ")", ",", "(", "3", ",", "3", ")", ",", "(", "4", ",", "4", ")", ",", "(", "5", ",", "5", ")", ",", "(", "6", ",", "6", ")", "]", "]", "\n", "filtered_spans", "[", "'reindex_wrt_gold'", "]", "=", "torch", ".", "tensor", "(", "[", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]", "]", ",", "dtype", "=", "torch", ".", "int32", ")", "\n", "filtered_spans", "[", "'prune_indices'", "]", "=", "torch", ".", "tensor", "(", "[", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]", "]", ",", "dtype", "=", "torch", ".", "int32", ")", "\n", "\n", "scores", "=", "torch", ".", "Tensor", "(", "[", "[", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# Berlin", "\n", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# Ghent", "\n", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# Berlin", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# Ghent", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "# NILL", "\n", "[", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "# not a valid mention", "\n", "]", "]", ")", "\n", "gold_m2i", "=", "[", "torch", ".", "IntTensor", "(", "[", "0", ",", "1", ",", "0", ",", "1", ",", "2", "]", ")", "]", "\n", "settings", ".", "device", "=", "'cpu'", "\n", "output_loss", ",", "output_linking", ",", "output_coref", "=", "linker_coref_task", "(", "scores", "=", "scores", ",", "gold_m2i", "=", "gold_m2i", ",", "\n", "filtered_spans", "=", "filtered_spans", ",", "\n", "gold_spans", "=", "linker", "[", "'gold_spans'", "]", ",", "\n", "linker", "=", "linker", ",", "predict", "=", "True", ",", "\n", "pruner_spans", "=", "None", ",", "\n", "ner_spans", "=", "[", "[", "]", "]", ")", "\n", "\n", "assert", "len", "(", "output_linking", "[", "'pred'", "]", ")", "==", "1", "\n", "assert", "sorted", "(", "output_linking", "[", "'pred'", "]", "[", "0", "]", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "==", "[", "(", "1", ",", "1", ",", "'Berlin'", ")", ",", "\n", "(", "2", ",", "2", ",", "'Ghent'", ")", ",", "\n", "(", "3", ",", "3", ",", "'Berlin'", ")", ",", "\n", "(", "4", ",", "4", ",", "'Ghent'", ")", "]", "\n", "assert", "len", "(", "output_coref", "[", "'pred'", "]", ")", "==", "1", "\n", "assert", "output_coref", "[", "'pred'", "]", "[", "0", "]", "==", "[", "[", "(", "1", ",", "1", ")", ",", "(", "3", ",", "3", ")", "]", ",", "[", "(", "2", ",", "2", ")", ",", "(", "4", ",", "4", ")", "]", ",", "[", "(", "5", ",", "5", ")", "]", "]", "\n", "\n", "# now making point Berlin to the mention instead of the link", "\n", "scores", "=", "torch", ".", "Tensor", "(", "[", "[", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# Berlin", "\n", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# Ghent", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# Berlin", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# Ghent", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "# NILL", "\n", "[", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "# not a valid mention", "\n", "]", "]", ")", "\n", "gold_m2i", "=", "[", "torch", ".", "IntTensor", "(", "[", "0", ",", "1", ",", "0", ",", "1", ",", "2", "]", ")", "]", "\n", "settings", ".", "device", "=", "'cpu'", "\n", "output_loss", ",", "output_linking", ",", "output_coref", "=", "linker_coref_task", "(", "scores", "=", "scores", ",", "gold_m2i", "=", "gold_m2i", ",", "\n", "filtered_spans", "=", "filtered_spans", ",", "\n", "gold_spans", "=", "linker", "[", "'gold_spans'", "]", ",", "\n", "linker", "=", "linker", ",", "predict", "=", "True", ",", "\n", "pruner_spans", "=", "None", ",", "\n", "ner_spans", "=", "[", "[", "]", "]", ")", "\n", "\n", "assert", "len", "(", "output_linking", "[", "'pred'", "]", ")", "==", "1", "\n", "assert", "sorted", "(", "output_linking", "[", "'pred'", "]", "[", "0", "]", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "==", "[", "(", "1", ",", "1", ",", "'Berlin'", ")", ",", "\n", "(", "2", ",", "2", ",", "'Ghent'", ")", ",", "\n", "(", "3", ",", "3", ",", "'Berlin'", ")", ",", "\n", "(", "4", ",", "4", ",", "'Ghent'", ")", "]", "\n", "assert", "len", "(", "output_coref", "[", "'pred'", "]", ")", "==", "1", "\n", "assert", "output_coref", "[", "'pred'", "]", "[", "0", "]", "==", "[", "[", "(", "1", ",", "1", ")", ",", "(", "3", ",", "3", ")", "]", ",", "[", "(", "2", ",", "2", ")", ",", "(", "4", ",", "4", ")", "]", ",", "[", "(", "5", ",", "5", ")", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tests.test_linkercoref.DwieLinkerCorefTest.test_scenario_009": [[755, 881], ["print", "datass.dictionary.Dictionary", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "dict", "torch.IntTensor", "torch.Tensor", "torch.IntTensor", "modules.tasks.coreflinker.CorefLinkerLoss", "torch.tensor", "torch.Tensor", "modules.tasks.coreflinker.CorefLinkerLoss.", "torch.Tensor", "modules.tasks.coreflinker.CorefLinkerLoss.", "torch.IntTensor", "len", "sorted", "len", "torch.IntTensor", "len", "sorted", "len", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup"], ["", "def", "test_scenario_009", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        - no_nil_in_targets in True\n        - mention without any candidate (ex: role) in span (6,6)\n        - variable nr of candidates for the rest of the mentions\n        - some mentions in the same cluster have no correct candidates, while others do have correct ones\n        - some mentions are not valid entity mentions where filter_singletons_with_matrix enters in play (7,7)\n            (ex: eleven) which is span but doesn't refer to any entity and is not valid entity mention\n        - coreference from not-valid mention to other not valid mention: ignored (ignore_no_mention_chains in True)\n        \"\"\"", "\n", "print", "(", "'EXECUTING DwieLinkerCorefTest.test_scenario_009'", ")", "\n", "config_linkercoref", "=", "{", "'enabled'", ":", "True", ",", "\n", "'weight'", ":", "1.0", ",", "\n", "'filter_singletons_with_pruner'", ":", "False", ",", "\n", "'filter_singletons_with_ner'", ":", "False", ",", "\n", "'filter_singletons_with_matrix'", ":", "True", ",", "\n", "'ignore_no_mention_chains'", ":", "True", ",", "\n", "'end_to_end'", ":", "False", ",", "\n", "'no_nil_in_targets'", ":", "True", ",", "\n", "'doc_level_candidates'", ":", "False", "}", "\n", "dic", "=", "Dictionary", "(", ")", "\n", "dic", ".", "add", "(", "'Berlin'", ")", "\n", "dic", ".", "add", "(", "'NILL'", ")", "\n", "dic", ".", "add", "(", "'Ghent'", ")", "\n", "dic", ".", "add", "(", "'Ghent2'", ")", "\n", "dic", ".", "add", "(", "'Ghent3'", ")", "\n", "dic", ".", "add", "(", "'Berlin2'", ")", "\n", "dic", ".", "add", "(", "'Berlin3'", ")", "\n", "dic", ".", "add", "(", "'Berlin4'", ")", "\n", "dic", ".", "add", "(", "'Eleven'", ")", "\n", "\n", "linker", "=", "dict", "(", ")", "\n", "linker", "[", "'candidates'", "]", "=", "torch", ".", "IntTensor", "(", "[", "[", "[", "dic", ".", "lookup", "(", "'Berlin2'", ")", ",", "\n", "dic", ".", "lookup", "(", "'Berlin4'", ")", ",", "\n", "dic", ".", "lookup", "(", "'Berlin3'", ")", ",", "dic", ".", "lookup", "(", "'Berlin'", ")", "]", ",", "\n", "[", "dic", ".", "lookup", "(", "'Eleven'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "\n", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", "]", ",", "\n", "[", "dic", ".", "lookup", "(", "'Ghent2'", ")", ",", "dic", ".", "lookup", "(", "'Ghent'", ")", ",", "\n", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", "]", ",", "\n", "[", "dic", ".", "lookup", "(", "'Berlin2'", ")", ",", "dic", ".", "lookup", "(", "'Berlin'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "\n", "dic", ".", "lookup", "(", "'NILL'", ")", "]", ",", "\n", "[", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "\n", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", "]", ",", "\n", "[", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "\n", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", "]", ",", "\n", "[", "dic", ".", "lookup", "(", "'Eleven'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "\n", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", "]", "]", "]", ")", "\n", "linker", "[", "'targets'", "]", "=", "torch", ".", "Tensor", "(", "[", "[", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", "]", ")", "\n", "\n", "linker", "[", "'candidate_lengths'", "]", "=", "torch", ".", "IntTensor", "(", "[", "[", "4", ",", "1", ",", "2", ",", "2", ",", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "\n", "# linker['total_cand_lengths_in_gold_mentions'] = torch.IntTensor([[4, 2, 2, 0, 0]])", "\n", "linker", "[", "'total_cand_lengths_in_gold_mentions'", "]", "=", "None", "\n", "\n", "# linker['candidate_lengths_no_nill'] = torch.IntTensor([[4, 2, 2, 0, 0]])", "\n", "linker", "[", "'gold_spans'", "]", "=", "[", "[", "(", "1", ",", "1", ")", ",", "(", "3", ",", "3", ")", ",", "(", "4", ",", "4", ")", ",", "(", "5", ",", "5", ")", ",", "(", "6", ",", "6", ")", "]", "]", "\n", "linker", "[", "'gold'", "]", "=", "[", "[", "(", "1", ",", "1", ",", "'Berlin'", ")", ",", "(", "3", ",", "3", ",", "'Ghent'", ")", ",", "(", "4", ",", "4", ",", "'Berlin'", ")", ",", "(", "5", ",", "5", ",", "'Ghent'", ")", "]", "]", "\n", "linker_coref_task", "=", "CorefLinkerLoss", "(", "'links'", ",", "\n", "'coref'", ",", "\n", "dic", ",", "\n", "# self.linker_coref_scorer.entity_embedder.dictionary,", "\n", "config_linkercoref", ",", "True", "\n", "# config['linkercoref']", "\n", ")", "\n", "\n", "filtered_spans", "=", "{", "}", "\n", "filtered_spans", "[", "'spans'", "]", "=", "[", "[", "(", "1", ",", "1", ")", ",", "(", "2", ",", "2", ")", ",", "(", "3", ",", "3", ")", ",", "(", "4", ",", "4", ")", ",", "(", "5", ",", "5", ")", ",", "(", "6", ",", "6", ")", ",", "(", "7", ",", "7", ")", "]", "]", "\n", "# filtered_spans['reindex_wrt_gold'] = torch.tensor([[0, 1, 2, 3, 4, 5]], dtype=torch.int32)", "\n", "filtered_spans", "[", "'prune_indices'", "]", "=", "torch", ".", "tensor", "(", "[", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", "]", "]", ",", "dtype", "=", "torch", ".", "int32", ")", "\n", "\n", "scores", "=", "torch", ".", "Tensor", "(", "[", "[", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# Berlin", "\n", "[", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# not a valid mention", "\n", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# Ghent", "\n", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# Berlin", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# Ghent", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "# NILL", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "# not a valid mention", "\n", "]", "]", ")", "\n", "gold_m2i", "=", "[", "torch", ".", "IntTensor", "(", "[", "0", ",", "1", ",", "0", ",", "1", ",", "2", "]", ")", "]", "\n", "settings", ".", "device", "=", "'cpu'", "\n", "output_loss", ",", "output_linking", ",", "output_coref", "=", "linker_coref_task", "(", "scores", "=", "scores", ",", "gold_m2i", "=", "gold_m2i", ",", "\n", "filtered_spans", "=", "filtered_spans", ",", "\n", "gold_spans", "=", "linker", "[", "'gold_spans'", "]", ",", "\n", "linker", "=", "linker", ",", "predict", "=", "True", ",", "\n", "pruner_spans", "=", "None", ",", "\n", "ner_spans", "=", "[", "[", "]", "]", ")", "\n", "\n", "assert", "len", "(", "output_linking", "[", "'pred'", "]", ")", "==", "1", "\n", "assert", "sorted", "(", "output_linking", "[", "'pred'", "]", "[", "0", "]", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "==", "[", "(", "1", ",", "1", ",", "'Berlin'", ")", ",", "\n", "(", "3", ",", "3", ",", "'Ghent'", ")", ",", "\n", "(", "4", ",", "4", ",", "'Berlin'", ")", ",", "\n", "(", "5", ",", "5", ",", "'Ghent'", ")", "]", "\n", "assert", "len", "(", "output_coref", "[", "'pred'", "]", ")", "==", "1", "\n", "assert", "output_coref", "[", "'pred'", "]", "[", "0", "]", "==", "[", "[", "(", "1", ",", "1", ")", ",", "(", "4", ",", "4", ")", "]", ",", "[", "(", "3", ",", "3", ")", ",", "(", "5", ",", "5", ")", "]", ",", "[", "(", "6", ",", "6", ")", "]", "]", "\n", "\n", "# now making point Berlin to the mention instead of the link", "\n", "scores", "=", "torch", ".", "Tensor", "(", "[", "[", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# Berlin", "\n", "[", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# not a valid mention", "\n", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# Ghent", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# Berlin", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# Ghent", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "# NILL", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "# not a valid mention", "\n", "]", "]", ")", "\n", "gold_m2i", "=", "[", "torch", ".", "IntTensor", "(", "[", "0", ",", "1", ",", "0", ",", "1", ",", "2", "]", ")", "]", "\n", "settings", ".", "device", "=", "'cpu'", "\n", "output_loss", ",", "output_linking", ",", "output_coref", "=", "linker_coref_task", "(", "scores", "=", "scores", ",", "gold_m2i", "=", "gold_m2i", ",", "\n", "filtered_spans", "=", "filtered_spans", ",", "\n", "gold_spans", "=", "linker", "[", "'gold_spans'", "]", ",", "\n", "linker", "=", "linker", ",", "predict", "=", "True", ",", "\n", "pruner_spans", "=", "None", ",", "\n", "ner_spans", "=", "[", "[", "]", "]", ")", "\n", "\n", "assert", "len", "(", "output_linking", "[", "'pred'", "]", ")", "==", "1", "\n", "assert", "sorted", "(", "output_linking", "[", "'pred'", "]", "[", "0", "]", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "==", "[", "(", "1", ",", "1", ",", "'Berlin'", ")", ",", "\n", "(", "3", ",", "3", ",", "'Ghent'", ")", ",", "\n", "(", "4", ",", "4", ",", "'Berlin'", ")", ",", "\n", "(", "5", ",", "5", ",", "'Ghent'", ")", "]", "\n", "assert", "len", "(", "output_coref", "[", "'pred'", "]", ")", "==", "1", "\n", "assert", "output_coref", "[", "'pred'", "]", "[", "0", "]", "==", "[", "[", "(", "1", ",", "1", ")", ",", "(", "4", ",", "4", ")", "]", ",", "[", "(", "3", ",", "3", ")", ",", "(", "5", ",", "5", ")", "]", ",", "[", "(", "6", ",", "6", ")", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.tests.test_linkercoref.DwieLinkerCorefTest.test_scenario_010": [[882, 1008], ["print", "datass.dictionary.Dictionary", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "datass.dictionary.Dictionary.add", "dict", "torch.IntTensor", "torch.Tensor", "torch.IntTensor", "modules.tasks.coreflinker.CorefLinkerLoss", "torch.tensor", "torch.Tensor", "modules.tasks.coreflinker.CorefLinkerLoss.", "torch.Tensor", "modules.tasks.coreflinker.CorefLinkerLoss.", "torch.IntTensor", "len", "sorted", "len", "torch.IntTensor", "len", "sorted", "len", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup", "datass.dictionary.Dictionary.lookup"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.lookup"], ["", "def", "test_scenario_010", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        - no_nil_in_targets in True\n        - mention without any candidate (ex: role) in span (6,6)\n        - variable nr of candidates for the rest of the mentions\n        - some mentions in the same cluster have no correct candidates, while others do have correct ones\n        - some mentions are not valid entity mentions where filter_singletons_with_matrix enters in play (7,7)\n            (ex: eleven) which is span but doesn't refer to any entity and is not valid entity mention\n        - coreference from not-valid mention to other not valid mention: added (ignore_no_mention_chains in False)\n        \"\"\"", "\n", "print", "(", "'EXECUTING DwieLinkerCorefTest.test_scenario_010'", ")", "\n", "config_linkercoref", "=", "{", "'enabled'", ":", "True", ",", "\n", "'weight'", ":", "1.0", ",", "\n", "'filter_singletons_with_pruner'", ":", "False", ",", "\n", "'filter_singletons_with_ner'", ":", "False", ",", "\n", "'filter_singletons_with_matrix'", ":", "True", ",", "\n", "'ignore_no_mention_chains'", ":", "False", ",", "\n", "'end_to_end'", ":", "False", ",", "\n", "'no_nil_in_targets'", ":", "True", ",", "\n", "'doc_level_candidates'", ":", "False", "}", "\n", "dic", "=", "Dictionary", "(", ")", "\n", "dic", ".", "add", "(", "'Berlin'", ")", "\n", "dic", ".", "add", "(", "'NILL'", ")", "\n", "dic", ".", "add", "(", "'Ghent'", ")", "\n", "dic", ".", "add", "(", "'Ghent2'", ")", "\n", "dic", ".", "add", "(", "'Ghent3'", ")", "\n", "dic", ".", "add", "(", "'Berlin2'", ")", "\n", "dic", ".", "add", "(", "'Berlin3'", ")", "\n", "dic", ".", "add", "(", "'Berlin4'", ")", "\n", "dic", ".", "add", "(", "'Eleven'", ")", "\n", "\n", "linker", "=", "dict", "(", ")", "\n", "linker", "[", "'candidates'", "]", "=", "torch", ".", "IntTensor", "(", "[", "[", "[", "dic", ".", "lookup", "(", "'Berlin2'", ")", ",", "\n", "dic", ".", "lookup", "(", "'Berlin4'", ")", ",", "\n", "dic", ".", "lookup", "(", "'Berlin3'", ")", ",", "dic", ".", "lookup", "(", "'Berlin'", ")", "]", ",", "\n", "[", "dic", ".", "lookup", "(", "'Eleven'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "\n", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", "]", ",", "\n", "[", "dic", ".", "lookup", "(", "'Ghent2'", ")", ",", "dic", ".", "lookup", "(", "'Ghent'", ")", ",", "\n", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", "]", ",", "\n", "[", "dic", ".", "lookup", "(", "'Berlin2'", ")", ",", "dic", ".", "lookup", "(", "'Berlin'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "\n", "dic", ".", "lookup", "(", "'NILL'", ")", "]", ",", "\n", "[", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "\n", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", "]", ",", "\n", "[", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "\n", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", "]", ",", "\n", "[", "dic", ".", "lookup", "(", "'Eleven'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "\n", "dic", ".", "lookup", "(", "'NILL'", ")", ",", "dic", ".", "lookup", "(", "'NILL'", ")", "]", "]", "]", ")", "\n", "linker", "[", "'targets'", "]", "=", "torch", ".", "Tensor", "(", "[", "[", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", "]", ")", "\n", "\n", "linker", "[", "'candidate_lengths'", "]", "=", "torch", ".", "IntTensor", "(", "[", "[", "4", ",", "1", ",", "2", ",", "2", ",", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "\n", "# linker['total_cand_lengths_in_gold_mentions'] = torch.IntTensor([[4, 2, 2, 0, 0]])", "\n", "linker", "[", "'total_cand_lengths_in_gold_mentions'", "]", "=", "None", "\n", "\n", "# linker['candidate_lengths_no_nill'] = torch.IntTensor([[4, 2, 2, 0, 0]])", "\n", "linker", "[", "'gold_spans'", "]", "=", "[", "[", "(", "1", ",", "1", ")", ",", "(", "3", ",", "3", ")", ",", "(", "4", ",", "4", ")", ",", "(", "5", ",", "5", ")", ",", "(", "6", ",", "6", ")", "]", "]", "\n", "linker", "[", "'gold'", "]", "=", "[", "[", "(", "1", ",", "1", ",", "'Berlin'", ")", ",", "(", "3", ",", "3", ",", "'Ghent'", ")", ",", "(", "4", ",", "4", ",", "'Berlin'", ")", ",", "(", "5", ",", "5", ",", "'Ghent'", ")", "]", "]", "\n", "linker_coref_task", "=", "CorefLinkerLoss", "(", "'links'", ",", "\n", "'coref'", ",", "\n", "dic", ",", "\n", "# self.linker_coref_scorer.entity_embedder.dictionary,", "\n", "config_linkercoref", ",", "True", "\n", "# config['linkercoref']", "\n", ")", "\n", "\n", "filtered_spans", "=", "{", "}", "\n", "filtered_spans", "[", "'spans'", "]", "=", "[", "[", "(", "1", ",", "1", ")", ",", "(", "2", ",", "2", ")", ",", "(", "3", ",", "3", ")", ",", "(", "4", ",", "4", ")", ",", "(", "5", ",", "5", ")", ",", "(", "6", ",", "6", ")", ",", "(", "7", ",", "7", ")", "]", "]", "\n", "# filtered_spans['reindex_wrt_gold'] = torch.tensor([[0, 1, 2, 3, 4, 5]], dtype=torch.int32)", "\n", "filtered_spans", "[", "'prune_indices'", "]", "=", "torch", ".", "tensor", "(", "[", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", "]", "]", ",", "dtype", "=", "torch", ".", "int32", ")", "\n", "\n", "scores", "=", "torch", ".", "Tensor", "(", "[", "[", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# Berlin", "\n", "[", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# not a valid mention", "\n", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# Ghent", "\n", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# Berlin", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# Ghent", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "# NILL", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "# not a valid mention", "\n", "]", "]", ")", "\n", "gold_m2i", "=", "[", "torch", ".", "IntTensor", "(", "[", "0", ",", "1", ",", "0", ",", "1", ",", "2", "]", ")", "]", "\n", "settings", ".", "device", "=", "'cpu'", "\n", "output_loss", ",", "output_linking", ",", "output_coref", "=", "linker_coref_task", "(", "scores", "=", "scores", ",", "gold_m2i", "=", "gold_m2i", ",", "\n", "filtered_spans", "=", "filtered_spans", ",", "\n", "gold_spans", "=", "linker", "[", "'gold_spans'", "]", ",", "\n", "linker", "=", "linker", ",", "predict", "=", "True", ",", "\n", "pruner_spans", "=", "None", ",", "\n", "ner_spans", "=", "[", "[", "]", "]", ")", "\n", "\n", "assert", "len", "(", "output_linking", "[", "'pred'", "]", ")", "==", "1", "\n", "assert", "sorted", "(", "output_linking", "[", "'pred'", "]", "[", "0", "]", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "==", "[", "(", "1", ",", "1", ",", "'Berlin'", ")", ",", "\n", "(", "3", ",", "3", ",", "'Ghent'", ")", ",", "\n", "(", "4", ",", "4", ",", "'Berlin'", ")", ",", "\n", "(", "5", ",", "5", ",", "'Ghent'", ")", "]", "\n", "assert", "len", "(", "output_coref", "[", "'pred'", "]", ")", "==", "1", "\n", "assert", "output_coref", "[", "'pred'", "]", "[", "0", "]", "==", "[", "[", "(", "1", ",", "1", ")", ",", "(", "4", ",", "4", ")", "]", ",", "[", "(", "3", ",", "3", ")", ",", "(", "5", ",", "5", ")", "]", ",", "[", "(", "2", ",", "2", ")", ",", "(", "7", ",", "7", ")", "]", ",", "[", "(", "6", ",", "6", ")", "]", "]", "\n", "\n", "# now making point Berlin to the mention instead of the link", "\n", "scores", "=", "torch", ".", "Tensor", "(", "[", "[", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# Berlin", "\n", "[", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# not a valid mention", "\n", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# Ghent", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# Berlin", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "# Ghent", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "# NILL", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "# not a valid mention", "\n", "]", "]", ")", "\n", "gold_m2i", "=", "[", "torch", ".", "IntTensor", "(", "[", "0", ",", "1", ",", "0", ",", "1", ",", "2", "]", ")", "]", "\n", "settings", ".", "device", "=", "'cpu'", "\n", "output_loss", ",", "output_linking", ",", "output_coref", "=", "linker_coref_task", "(", "scores", "=", "scores", ",", "gold_m2i", "=", "gold_m2i", ",", "\n", "filtered_spans", "=", "filtered_spans", ",", "\n", "gold_spans", "=", "linker", "[", "'gold_spans'", "]", ",", "\n", "linker", "=", "linker", ",", "predict", "=", "True", ",", "\n", "pruner_spans", "=", "None", ",", "\n", "ner_spans", "=", "[", "[", "]", "]", ")", "\n", "\n", "assert", "len", "(", "output_linking", "[", "'pred'", "]", ")", "==", "1", "\n", "assert", "sorted", "(", "output_linking", "[", "'pred'", "]", "[", "0", "]", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "==", "[", "(", "1", ",", "1", ",", "'Berlin'", ")", ",", "\n", "(", "3", ",", "3", ",", "'Ghent'", ")", ",", "\n", "(", "4", ",", "4", ",", "'Berlin'", ")", ",", "\n", "(", "5", ",", "5", ",", "'Ghent'", ")", "]", "\n", "assert", "len", "(", "output_coref", "[", "'pred'", "]", ")", "==", "1", "\n", "assert", "output_coref", "[", "'pred'", "]", "[", "0", "]", "==", "[", "[", "(", "1", ",", "1", ")", ",", "(", "4", ",", "4", ")", "]", ",", "[", "(", "3", ",", "3", ")", ",", "(", "5", ",", "5", ")", "]", ",", "[", "(", "2", ",", "2", ")", ",", "(", "7", ",", "7", ")", "]", ",", "[", "(", "6", ",", "6", ")", "]", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.results.main_linker_results.get_dict_recursive_key_value": [[20, 39], ["set", "dictionary.items", "isinstance", "curr_set_entry_values.union.union", "isinstance", "main_linker_results.get_dict_recursive_key_value", "main_linker_results.get_dict_recursive_key_value", "tuple", "curr_set_entry_values.union.add", "curr_set_entry_values.union.add"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.results.main_linker_results.get_dict_recursive_key_value", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.results.main_linker_results.get_dict_recursive_key_value", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add"], ["def", "get_dict_recursive_key_value", "(", "dictionary", ":", "Dict", ",", "curr_entry", "=", "''", ")", ":", "\n", "    ", "curr_set_entry_values", "=", "set", "(", ")", "\n", "for", "curr_key", ",", "curr_value", "in", "dictionary", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "curr_value", ",", "dict", ")", ":", "\n", "            ", "if", "curr_entry", "==", "''", ":", "\n", "                ", "curr_values", "=", "get_dict_recursive_key_value", "(", "curr_value", ",", "curr_key", ")", "\n", "", "else", ":", "\n", "                ", "curr_values", "=", "get_dict_recursive_key_value", "(", "curr_value", ",", "curr_entry", "+", "'.'", "+", "curr_key", ")", "\n", "", "curr_set_entry_values", "=", "curr_set_entry_values", ".", "union", "(", "curr_values", ")", "\n", "", "else", ":", "\n", "            ", "if", "isinstance", "(", "curr_value", ",", "list", ")", ":", "\n", "                ", "curr_value", "=", "tuple", "(", "curr_value", ")", "\n", "\n", "", "if", "curr_entry", "==", "''", ":", "\n", "                ", "curr_set_entry_values", ".", "add", "(", "(", "curr_key", ",", "curr_value", ")", ")", "\n", "", "else", ":", "\n", "                ", "curr_set_entry_values", ".", "add", "(", "(", "curr_entry", "+", "'.'", "+", "curr_key", ",", "curr_value", ")", ")", "\n", "\n", "", "", "", "return", "curr_set_entry_values", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.results.main_linker_results.is_matching_config": [[41, 143], ["None"], "function", ["None"], ["", "def", "is_matching_config", "(", "json_config", ":", "Dict", ",", "filter_json", ":", "Dict", ")", ":", "\n", "    ", "\"\"\" Example of filter_json: {'relation_types':{'binary_x'}} \"\"\"", "\n", "\n", "# if 'specific_name' in", "\n", "\n", "if", "'mentionwise_rels'", "in", "filter_json", "and", "filter_json", "[", "'mentionwise_rels'", "]", "is", "True", ":", "\n", "        ", "if", "'mentionwise'", "not", "in", "json_config", "[", "'model'", "]", "[", "'relations'", "]", "or", "json_config", "[", "'model'", "]", "[", "'relations'", "]", "[", "'mentionwise'", "]", "is", "False", ":", "\n", "            ", "return", "False", "\n", "\n", "", "", "if", "'relation_types'", "in", "filter_json", ":", "\n", "        ", "if", "not", "(", "json_config", "[", "'model'", "]", "[", "'relations'", "]", "[", "'type'", "]", "in", "filter_json", "[", "'relation_types'", "]", ")", ":", "\n", "# print('!!!!FILTER IN FALSE!!!! FOR RELATION TYPE: ', json_config['model']['relations']['type'])", "\n", "            ", "return", "False", "\n", "\n", "", "", "if", "'is_joint'", "in", "filter_json", ":", "\n", "        ", "is_ner", "=", "0", "\n", "is_coref", "=", "0", "\n", "is_rel", "=", "0", "\n", "\n", "if", "json_config", "[", "'model'", "]", "[", "'ner'", "]", "[", "'enabled'", "]", ":", "\n", "            ", "is_ner", "=", "1", "\n", "\n", "", "if", "json_config", "[", "'model'", "]", "[", "'coref'", "]", "[", "'enabled'", "]", ":", "\n", "            ", "is_coref", "=", "1", "\n", "\n", "", "if", "json_config", "[", "'model'", "]", "[", "'relations'", "]", "[", "'enabled'", "]", ":", "\n", "            ", "is_rel", "=", "1", "\n", "\n", "", "if", "filter_json", "[", "'is_joint'", "]", "and", "is_ner", "+", "is_coref", "+", "is_rel", "<=", "2", ":", "\n", "            ", "return", "False", "\n", "", "elif", "not", "filter_json", "[", "'is_joint'", "]", "and", "is_ner", "+", "is_coref", "+", "is_rel", ">", "1", ":", "\n", "            ", "return", "False", "\n", "\n", "", "", "if", "'is_merged_with_ner_only'", "in", "filter_json", ":", "\n", "        ", "if", "'merged_with_ner_only'", "not", "in", "json_config", ":", "\n", "            ", "if", "filter_json", "[", "'is_merged_with_ner_only'", "]", ":", "\n", "                ", "return", "False", "\n", "", "", "else", ":", "\n", "            ", "if", "filter_json", "[", "'is_merged_with_ner_only'", "]", "!=", "json_config", "[", "'merged_with_ner_only'", "]", ":", "\n", "                ", "return", "False", "\n", "\n", "", "", "", "if", "'is_bert'", "in", "filter_json", ":", "\n", "\n", "        ", "if", "'bert_embedder'", "in", "json_config", "[", "'model'", "]", "[", "'text_embedder'", "]", ":", "\n", "            ", "field_is_bert", "=", "True", "\n", "", "else", ":", "\n", "            ", "field_is_bert", "=", "False", "\n", "", "if", "filter_json", "[", "'is_bert'", "]", "!=", "field_is_bert", ":", "\n", "            ", "return", "False", "\n", "\n", "", "", "if", "'is_tag'", "in", "filter_json", ":", "\n", "        ", "if", "filter_json", "[", "'is_tag'", "]", "!=", "json_config", "[", "'model'", "]", "[", "'ner'", "]", "[", "'enabled'", "]", ":", "\n", "            ", "return", "False", "\n", "\n", "", "", "if", "'is_coref'", "in", "filter_json", ":", "\n", "        ", "if", "filter_json", "[", "'is_coref'", "]", "!=", "json_config", "[", "'model'", "]", "[", "'coref'", "]", "[", "'enabled'", "]", ":", "\n", "            ", "return", "False", "\n", "\n", "", "", "if", "'is_relation'", "in", "filter_json", ":", "\n", "        ", "if", "filter_json", "[", "'is_relation'", "]", "!=", "json_config", "[", "'model'", "]", "[", "'relations'", "]", "[", "'enabled'", "]", ":", "\n", "            ", "return", "False", "\n", "\n", "", "", "if", "'coref_prop'", "in", "filter_json", ":", "\n", "        ", "if", "'coref_prop'", "not", "in", "json_config", "[", "'model'", "]", "[", "'corefprop'", "]", "and", "filter_json", "[", "'coref_prop'", "]", "!=", "0", ":", "\n", "            ", "return", "False", "\n", "\n", "", "if", "'coref_prop'", "in", "json_config", "[", "'model'", "]", "[", "'corefprop'", "]", ":", "\n", "            ", "if", "filter_json", "[", "'coref_prop'", "]", ">", "-", "1", ":", "\n", "                ", "if", "filter_json", "[", "'coref_prop'", "]", "!=", "json_config", "[", "'model'", "]", "[", "'corefprop'", "]", "[", "'coref_prop'", "]", ":", "\n", "                    ", "return", "False", "\n", "", "", "else", ":", "\n", "                ", "if", "not", "json_config", "[", "'model'", "]", "[", "'corefprop'", "]", "[", "'coref_prop'", "]", ">", "0", "or", "json_config", "[", "'model'", "]", "[", "'corefprop'", "]", "[", "'coref_prop'", "]", ">", "filter_json", "[", "'max_props'", "]", ":", "\n", "                    ", "return", "False", "\n", "\n", "", "", "", "", "if", "'rel_prop'", "in", "filter_json", ":", "\n", "        ", "if", "'rel_prop'", "not", "in", "json_config", "[", "'model'", "]", "[", "'relprop'", "]", "and", "filter_json", "[", "'rel_prop'", "]", "!=", "0", ":", "\n", "            ", "return", "False", "\n", "\n", "", "if", "'rel_prop'", "in", "json_config", "[", "'model'", "]", "[", "'relprop'", "]", ":", "\n", "            ", "if", "filter_json", "[", "'rel_prop'", "]", ">", "-", "1", ":", "\n", "                ", "if", "filter_json", "[", "'rel_prop'", "]", "!=", "json_config", "[", "'model'", "]", "[", "'relprop'", "]", "[", "'rel_prop'", "]", ":", "\n", "                    ", "return", "False", "\n", "", "", "else", ":", "\n", "                ", "if", "not", "json_config", "[", "'model'", "]", "[", "'relprop'", "]", "[", "'rel_prop'", "]", ">", "0", "or", "json_config", "[", "'model'", "]", "[", "'relprop'", "]", "[", "'rel_prop'", "]", ">", "filter_json", "[", "'max_props'", "]", ":", "\n", "                    ", "return", "False", "\n", "\n", "", "", "", "", "if", "'att_prop'", "in", "filter_json", ":", "\n", "        ", "if", "'spanprop'", "not", "in", "json_config", "[", "'model'", "]", "and", "filter_json", "[", "'att_prop'", "]", "!=", "0", ":", "\n", "            ", "return", "False", "\n", "\n", "", "if", "'spanprop'", "in", "json_config", "[", "'model'", "]", ":", "\n", "            ", "if", "filter_json", "[", "'att_prop'", "]", ">", "-", "1", ":", "\n", "                ", "if", "filter_json", "[", "'att_prop'", "]", "!=", "json_config", "[", "'model'", "]", "[", "'spanprop'", "]", "[", "'att_prop'", "]", ":", "\n", "                    ", "return", "False", "\n", "", "", "else", ":", "\n", "                ", "if", "not", "json_config", "[", "'model'", "]", "[", "'spanprop'", "]", "[", "'att_prop'", "]", ">", "0", "or", "json_config", "[", "'model'", "]", "[", "'spanprop'", "]", "[", "'att_prop'", "]", ">", "filter_json", "[", "'max_props'", "]", ":", "\n", "                    ", "return", "False", "\n", "", "", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.results.main_linker_results.get_best_joint": [[145, 168], ["None"], "function", ["None"], ["", "def", "get_best_joint", "(", "results", ":", "List", ",", "specific_config", ":", "List", "[", "str", "]", "=", "None", ")", ":", "\n", "    ", "best_f1_avg", "=", "-", "1.0", "\n", "best_result", "=", "None", "\n", "for", "curr_result", "in", "results", ":", "\n", "        ", "f1_ner", "=", "curr_result", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "\n", "f1_rel", "=", "curr_result", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_soft'", "]", "[", "'f1'", "]", "[", "0", "]", "\n", "f1_coref_avg", "=", "(", "curr_result", "[", "'experiment_results'", "]", "[", "'coref'", "]", "[", "'muc'", "]", "[", "'f1'", "]", "[", "0", "]", "+", "\n", "curr_result", "[", "'experiment_results'", "]", "[", "'coref'", "]", "[", "'b_cubed_singleton_men_conll'", "]", "[", "'f1'", "]", "[", "0", "]", "+", "\n", "curr_result", "[", "'experiment_results'", "]", "[", "'coref'", "]", "[", "'ceafe_singleton'", "]", "[", "'f1'", "]", "[", "0", "]", ")", "/", "3", "\n", "if", "specific_config", "is", "None", ":", "\n", "            ", "if", "(", "f1_ner", "+", "f1_rel", "+", "f1_coref_avg", ")", "/", "3", ">", "best_f1_avg", ":", "\n", "                ", "best_f1_avg", "=", "(", "(", "f1_ner", "+", "f1_rel", "+", "f1_coref_avg", ")", "/", "3", ")", "\n", "best_result", "=", "curr_result", "\n", "", "", "else", ":", "\n", "            ", "for", "curr_specific_config", "in", "specific_config", ":", "\n", "# curr_specific_config = curr_specific_config.split('*')", "\n", "# if all(curr_s_conf in curr_result['experiment_id'] for curr_s_conf in curr_specific_config):", "\n", "                ", "if", "curr_specific_config", "in", "curr_result", "[", "'experiment_id'", "]", ":", "\n", "                    ", "if", "(", "f1_ner", "+", "f1_rel", "+", "f1_coref_avg", ")", "/", "3", ">", "best_f1_avg", ":", "\n", "                        ", "best_f1_avg", "=", "(", "(", "f1_ner", "+", "f1_rel", "+", "f1_coref_avg", ")", "/", "3", ")", "\n", "best_result", "=", "curr_result", "\n", "\n", "", "", "", "", "", "return", "best_result", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.results.main_linker_results.get_best_single": [[170, 205], ["None"], "function", ["None"], ["", "def", "get_best_single", "(", "results", ":", "List", ",", "type", "=", "'ner'", ",", "specific_config", ":", "List", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n\n    :param specific_config:\n    :param results:\n    :param type:\n    :return:\n    \"\"\"", "\n", "best_f1", "=", "-", "1.0", "\n", "best_result", "=", "None", "\n", "for", "curr_result", "in", "results", ":", "\n", "        ", "f1_compare", "=", "0", "\n", "if", "type", "==", "'ner'", ":", "\n", "            ", "f1_compare", "=", "curr_result", "[", "'experiment_results'", "]", "[", "'tags'", "]", "[", "'tags_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "\n", "\n", "", "elif", "type", "==", "'coref'", ":", "\n", "            ", "f1_compare", "=", "(", "curr_result", "[", "'experiment_results'", "]", "[", "'coref'", "]", "[", "'muc'", "]", "[", "'f1'", "]", "[", "0", "]", "+", "\n", "curr_result", "[", "'experiment_results'", "]", "[", "'coref'", "]", "[", "'b_cubed_singleton_men_conll'", "]", "[", "'f1'", "]", "[", "0", "]", "+", "\n", "curr_result", "[", "'experiment_results'", "]", "[", "'coref'", "]", "[", "'ceafe_singleton'", "]", "[", "'f1'", "]", "[", "0", "]", ")", "/", "3", "\n", "", "elif", "type", "==", "'rel'", ":", "\n", "            ", "f1_compare", "=", "curr_result", "[", "'experiment_results'", "]", "[", "'relations'", "]", "[", "'rels_mention'", "]", "[", "'f1'", "]", "[", "0", "]", "\n", "\n", "", "if", "specific_config", "is", "None", ":", "\n", "            ", "if", "f1_compare", ">", "best_f1", ":", "\n", "                ", "best_f1", "=", "f1_compare", "\n", "best_result", "=", "curr_result", "\n", "", "", "else", ":", "\n", "            ", "for", "curr_specific_config", "in", "specific_config", ":", "\n", "                ", "if", "curr_specific_config", "in", "curr_result", "[", "'experiment_id'", "]", ":", "\n", "                    ", "if", "f1_compare", ">", "best_f1", ":", "\n", "                        ", "best_f1", "=", "f1_compare", "\n", "best_result", "=", "curr_result", "\n", "\n", "# print('curr_result: ', curr_result)", "\n", "", "", "", "", "", "return", "best_result", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.results.main_linker_results.get_csv_title_line": [[207, 209], ["None"], "function", ["None"], ["", "def", "get_csv_title_line", "(", ")", ":", "\n", "    ", "return", "[", "''", ",", "''", ",", "''", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.results.main_linker_results.my_stdev": [[211, 216], ["len", "statistics.stdev"], "function", ["None"], ["", "def", "my_stdev", "(", "numbers", ":", "List", ")", ":", "\n", "    ", "if", "len", "(", "numbers", ")", "<", "2", ":", "\n", "        ", "return", "-", "1.0", "\n", "", "else", ":", "\n", "        ", "return", "stdev", "(", "numbers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.results.main_linker_results.merge_ner_with_coref": [[218, 272], ["cpn_eval.load_jsonl", "cpn_eval.load_jsonl", "dict", "cpn_eval.load_jsonl.items", "os.makedirs", "shutil.copyfile", "dict", "dict", "open", "dict.values", "len", "out_merged_file.write", "concept_to_mention[].append", "[].extend", "list", "coref_content[].append", "coref_content[].append", "len", "print", "list", "set", "json.dumps", "set"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.load_jsonl", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.load_jsonl", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.write", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "", "def", "merge_ner_with_coref", "(", "coref_test_path", ",", "ner_test_path", ",", "merged_coref_ner_path", ",", "id_exp", ",", "create_clusters", "=", "False", ")", ":", "\n", "    ", "ner_test_file", "=", "'{}-{}/test.json'", ".", "format", "(", "ner_test_path", ",", "id_exp", ")", "\n", "coref_test_file", "=", "'{}-{}/test.json'", ".", "format", "(", "coref_test_path", ",", "id_exp", ")", "\n", "# curr_ner_file = open(ner_test_file, 'r')", "\n", "loaded_ner_json", "=", "load_jsonl", "(", "ner_test_file", ",", "None", ")", "\n", "loaded_coref_json", "=", "load_jsonl", "(", "coref_test_file", ",", "None", ")", "\n", "merged_coref_ner_json", "=", "dict", "(", ")", "\n", "for", "id_file", ",", "ner_content", "in", "loaded_ner_json", ".", "items", "(", ")", ":", "\n", "        ", "mention_pos_to_concept", "=", "dict", "(", ")", "\n", "concept_to_mention", "=", "dict", "(", ")", "\n", "coref_content", "=", "loaded_coref_json", "[", "id_file", "]", "\n", "for", "curr_mention", "in", "coref_content", "[", "'mentions'", "]", ":", "\n", "            ", "mention_pos_to_concept", "[", "(", "curr_mention", "[", "'begin'", "]", ",", "curr_mention", "[", "'end'", "]", ")", "]", "=", "curr_mention", "[", "'concept'", "]", "\n", "if", "curr_mention", "[", "'concept'", "]", "not", "in", "concept_to_mention", ":", "\n", "                ", "concept_to_mention", "[", "curr_mention", "[", "'concept'", "]", "]", "=", "[", "curr_mention", "]", "\n", "", "else", ":", "\n", "                ", "concept_to_mention", "[", "curr_mention", "[", "'concept'", "]", "]", ".", "append", "(", "curr_mention", ")", "\n", "# if curr_mention['concept'] > max_concept_id:", "\n", "#     max_concept_id = curr_mention['concept']", "\n", "", "", "max_concept_id", "=", "len", "(", "coref_content", "[", "'concepts'", "]", ")", "-", "1", "\n", "for", "curr_mention", "in", "ner_content", "[", "'mentions'", "]", ":", "\n", "# pred_tag_types = ner_content['concepts'][curr_mention['concept']]['tags']", "\n", "            ", "pred_tag_types", "=", "curr_mention", "[", "'tags'", "]", "\n", "if", "(", "curr_mention", "[", "'begin'", "]", ",", "curr_mention", "[", "'end'", "]", ")", "not", "in", "mention_pos_to_concept", ":", "\n", "                ", "if", "create_clusters", ":", "\n", "                    ", "curr_mention", "[", "'concept'", "]", "=", "max_concept_id", "+", "1", "\n", "coref_content", "[", "'mentions'", "]", ".", "append", "(", "curr_mention", ")", "\n", "coref_content", "[", "'concepts'", "]", ".", "append", "(", "{", "'concept'", ":", "max_concept_id", "+", "1", ",", "'text'", ":", "curr_mention", "[", "'text'", "]", ",", "\n", "'count'", ":", "1", ",", "'tags'", ":", "pred_tag_types", "}", ")", "\n", "max_concept_id", "+=", "1", "\n", "", "", "else", ":", "\n", "# print(curr_mention['begin'], curr_mention['end'], ' IN CONCEPT ALREADY')", "\n", "                ", "coref_concept_id", "=", "mention_pos_to_concept", "[", "(", "curr_mention", "[", "'begin'", "]", ",", "curr_mention", "[", "'end'", "]", ")", "]", "\n", "# print('concept data: ', coref_content['concepts'][coref_concept_id])", "\n", "if", "coref_concept_id", ">=", "len", "(", "coref_content", "[", "'concepts'", "]", ")", ":", "\n", "                    ", "print", "(", "'something wrong here the concept id is bigger than the nr of concepts!!'", ")", "\n", "\n", "", "for", "curr_men", "in", "concept_to_mention", "[", "coref_concept_id", "]", ":", "\n", "                    ", "curr_men", "[", "'tags'", "]", "=", "list", "(", "set", "(", "curr_men", "[", "'tags'", "]", "+", "pred_tag_types", ")", ")", "\n", "\n", "", "coref_content", "[", "'concepts'", "]", "[", "coref_concept_id", "]", "[", "'tags'", "]", ".", "extend", "(", "pred_tag_types", ")", "\n", "coref_content", "[", "'concepts'", "]", "[", "coref_concept_id", "]", "[", "'tags'", "]", "=", "list", "(", "set", "(", "coref_content", "[", "'concepts'", "]", "[", "coref_concept_id", "]", "[", "'tags'", "]", ")", ")", "\n", "\n", "", "", "merged_coref_ner_json", "[", "id_file", "]", "=", "coref_content", "\n", "\n", "# if path doesn't exist, creates it, also copies the config of coref there", "\n", "", "os", ".", "makedirs", "(", "'{}-{}/'", ".", "format", "(", "merged_coref_ner_path", ",", "id_exp", ")", ",", "exist_ok", "=", "True", ")", "\n", "shutil", ".", "copyfile", "(", "'{}-{}/config.json'", ".", "format", "(", "coref_test_path", ",", "id_exp", ")", ",", "\n", "'{}-{}/config.json'", ".", "format", "(", "merged_coref_ner_path", ",", "id_exp", ")", ")", "\n", "\n", "with", "open", "(", "'{}-{}/test.json'", ".", "format", "(", "merged_coref_ner_path", ",", "id_exp", ")", ",", "'w'", ")", "as", "out_merged_file", ":", "\n", "        ", "for", "curr_json_merged", "in", "merged_coref_ner_json", ".", "values", "(", ")", ":", "\n", "            ", "out_merged_file", ".", "write", "(", "json", ".", "dumps", "(", "curr_json_merged", ")", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.results.main_linker_results.merge_rel_with_coref": [[274, 345], ["cpn_eval.load_jsonl", "cpn_eval.load_jsonl", "dict", "cpn_eval.load_jsonl.items", "os.makedirs", "shutil.copyfile", "dict", "dict", "set", "open", "dict.values", "len", "out_merged_file.write", "concept_to_mention[].append", "coref_content[].append", "coref_content[].append", "coref_content[].append", "coref_content[].append", "coref_content[].append", "set.add", "json.dumps"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.load_jsonl", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.external.python_cpn_eval.load_jsonl", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.debug.Tee.write", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add"], ["", "", "", "def", "merge_rel_with_coref", "(", "coref_test_path", ",", "rel_test_path", ",", "merged_coref_rel_path", ",", "id_exp", ",", "create_clusters", "=", "False", ")", ":", "\n", "    ", "rel_test_file", "=", "'{}-{}/test.json'", ".", "format", "(", "rel_test_path", ",", "id_exp", ")", "\n", "coref_test_file", "=", "'{}-{}/test.json'", ".", "format", "(", "coref_test_path", ",", "id_exp", ")", "\n", "# curr_ner_file = open(rel_test_file, 'r')", "\n", "loaded_rel_json", "=", "load_jsonl", "(", "rel_test_file", ",", "None", ")", "\n", "loaded_coref_json", "=", "load_jsonl", "(", "coref_test_file", ",", "None", ")", "\n", "merged_coref_ner_json", "=", "dict", "(", ")", "\n", "for", "id_file", ",", "rel_content", "in", "loaded_rel_json", ".", "items", "(", ")", ":", "\n", "        ", "mention_pos_to_concept", "=", "dict", "(", ")", "\n", "concept_to_mention", "=", "dict", "(", ")", "\n", "coref_content", "=", "loaded_coref_json", "[", "id_file", "]", "\n", "for", "curr_mention", "in", "coref_content", "[", "'mentions'", "]", ":", "\n", "            ", "mention_pos_to_concept", "[", "(", "curr_mention", "[", "'begin'", "]", ",", "curr_mention", "[", "'end'", "]", ")", "]", "=", "curr_mention", "[", "'concept'", "]", "\n", "if", "curr_mention", "[", "'concept'", "]", "not", "in", "concept_to_mention", ":", "\n", "                ", "concept_to_mention", "[", "curr_mention", "[", "'concept'", "]", "]", "=", "[", "curr_mention", "]", "\n", "", "else", ":", "\n", "                ", "concept_to_mention", "[", "curr_mention", "[", "'concept'", "]", "]", ".", "append", "(", "curr_mention", ")", "\n", "# if curr_mention['concept'] > max_concept_id:", "\n", "#     max_concept_id = curr_mention['concept']", "\n", "", "", "max_concept_id", "=", "len", "(", "coref_content", "[", "'concepts'", "]", ")", "-", "1", "\n", "already_added", "=", "set", "(", ")", "\n", "for", "curr_relation", "in", "rel_content", "[", "'mention_relations'", "]", ":", "\n", "# pred_tag_types = rel_content['concepts'][curr_mention['concept']]['tags']", "\n", "            ", "curr_mention_s", "=", "rel_content", "[", "'mentions'", "]", "[", "curr_relation", "[", "'s'", "]", "]", "\n", "curr_mention_o", "=", "rel_content", "[", "'mentions'", "]", "[", "curr_relation", "[", "'o'", "]", "]", "\n", "\n", "# pred_tag_types = curr_mention['tags']", "\n", "curr_concept_s", "=", "-", "1", "\n", "curr_concept_o", "=", "-", "1", "\n", "if", "(", "curr_mention_s", "[", "'begin'", "]", ",", "curr_mention_s", "[", "'end'", "]", ")", "not", "in", "mention_pos_to_concept", ":", "\n", "                ", "if", "create_clusters", ":", "\n", "                    ", "curr_mention_s", "[", "'concept'", "]", "=", "max_concept_id", "+", "1", "\n", "coref_content", "[", "'mentions'", "]", ".", "append", "(", "curr_mention_s", ")", "\n", "coref_content", "[", "'concepts'", "]", ".", "append", "(", "{", "'concept'", ":", "max_concept_id", "+", "1", ",", "'text'", ":", "curr_mention_s", "[", "'text'", "]", ",", "\n", "'count'", ":", "1", ",", "'tags'", ":", "[", "]", "}", ")", "\n", "curr_concept_s", "=", "max_concept_id", "\n", "max_concept_id", "+=", "1", "\n", "", "", "else", ":", "\n", "                ", "curr_concept_s", "=", "mention_pos_to_concept", "[", "(", "curr_mention_s", "[", "'begin'", "]", ",", "curr_mention_s", "[", "'end'", "]", ")", "]", "\n", "\n", "", "if", "(", "curr_mention_o", "[", "'begin'", "]", ",", "curr_mention_o", "[", "'end'", "]", ")", "not", "in", "mention_pos_to_concept", ":", "\n", "                ", "if", "create_clusters", ":", "\n", "                    ", "curr_mention_o", "[", "'concept'", "]", "=", "max_concept_id", "+", "1", "\n", "coref_content", "[", "'mentions'", "]", ".", "append", "(", "curr_mention_o", ")", "\n", "coref_content", "[", "'concepts'", "]", ".", "append", "(", "{", "'concept'", ":", "max_concept_id", "+", "1", ",", "'text'", ":", "curr_mention_o", "[", "'text'", "]", ",", "\n", "'count'", ":", "1", ",", "'tags'", ":", "[", "]", "}", ")", "\n", "curr_concept_o", "=", "max_concept_id", "\n", "max_concept_id", "+=", "1", "\n", "", "", "else", ":", "\n", "                ", "curr_concept_o", "=", "mention_pos_to_concept", "[", "(", "curr_mention_o", "[", "'begin'", "]", ",", "curr_mention_o", "[", "'end'", "]", ")", "]", "\n", "\n", "", "if", "curr_concept_s", ">", "-", "1", "and", "curr_concept_o", ">", "-", "1", ":", "\n", "# checks if it already exists:", "\n", "                ", "already_exists", "=", "False", "\n", "if", "(", "curr_concept_s", ",", "curr_concept_o", ",", "curr_relation", "[", "'p'", "]", ")", "in", "already_added", ":", "\n", "                    ", "already_exists", "=", "True", "\n", "", "if", "not", "already_exists", ":", "\n", "                    ", "coref_content", "[", "'relations'", "]", ".", "append", "(", "\n", "{", "'s'", ":", "curr_concept_s", ",", "'o'", ":", "curr_concept_o", ",", "'p'", ":", "curr_relation", "[", "'p'", "]", "}", ")", "\n", "already_added", ".", "add", "(", "(", "curr_concept_s", ",", "curr_concept_o", ",", "curr_relation", "[", "'p'", "]", ")", ")", "\n", "\n", "", "", "", "merged_coref_ner_json", "[", "id_file", "]", "=", "coref_content", "\n", "\n", "# if path doesn't exist, creates it, also copies the config of coref there", "\n", "", "os", ".", "makedirs", "(", "'{}-{}/'", ".", "format", "(", "merged_coref_rel_path", ",", "id_exp", ")", ",", "exist_ok", "=", "True", ")", "\n", "shutil", ".", "copyfile", "(", "'{}-{}/config.json'", ".", "format", "(", "coref_test_path", ",", "id_exp", ")", ",", "\n", "'{}-{}/config.json'", ".", "format", "(", "merged_coref_rel_path", ",", "id_exp", ")", ")", "\n", "\n", "with", "open", "(", "'{}-{}/test.json'", ".", "format", "(", "merged_coref_rel_path", ",", "id_exp", ")", ",", "'w'", ")", "as", "out_merged_file", ":", "\n", "        ", "for", "curr_json_merged", "in", "merged_coref_ner_json", ".", "values", "(", ")", ":", "\n", "            ", "out_merged_file", ".", "write", "(", "json", ".", "dumps", "(", "curr_json_merged", ")", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.results.main_linker_results_to_html.DropdownEntry.__init__": [[9, 15], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "type", ":", "str", ",", "score", ":", "float", ",", "content", ":", "str", ",", "span", ":", "Tuple", "[", "int", ",", "int", "]", "=", "None", ",", "is_correct", "=", "False", ")", ":", "\n", "        ", "self", ".", "type", "=", "type", "# coref_mention/ link", "\n", "self", ".", "score", "=", "score", "\n", "self", ".", "span", "=", "span", "# (begin,end), probably in char position (the way it appears in gold/prediction files)", "\n", "self", ".", "content", "=", "content", "\n", "self", ".", "is_correct", "=", "is_correct", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.results.main_linker_results_to_html.DropdownEntry.print_entry": [[16, 35], ["None"], "methods", ["None"], ["", "def", "print_entry", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n\n        :return: (without the 'div' tag)\n    <div class=\"menu-entry conn_con_1_men_1\">20.0 White House (0,1)</div>\n    <div class=\"menu-entry conn_con_1_men_2\">15.0 White House (10,11)</div>\n    <div class=\"menu-entry conn_link_2\">10.0 <a href=\"https://en.wikipedia.org/wiki/White_House\" target=\"_blank\">White_House</a> (link)</div>\n    <div class=\"menu-entry conn_con_2_men_1\">-10.0 Egypt (0,1)</div>\n\n        \"\"\"", "\n", "# to_ret = ''", "\n", "if", "self", ".", "type", "==", "'coref_mention'", ":", "\n", "# to_ret = '{:.2f} {} {} ({})'.format(self.score, self.content, self.span, self.type)", "\n", "            ", "to_ret", "=", "'{:.2f} {} {}'", ".", "format", "(", "self", ".", "score", ",", "self", ".", "content", ",", "self", ".", "span", ")", "\n", "", "else", ":", "\n", "# it is link", "\n", "            ", "to_ret", "=", "'{:.2f} <a href=\"https://en.wikipedia.org/wiki/{}\" target=\"_blank\">{}</a>'", ".", "format", "(", "self", ".", "score", ",", "self", ".", "content", ",", "self", ".", "content", ")", "\n", "", "return", "to_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.results.main_linker_results_to_html.DropdownEntry.__str__": [[36, 38], ["main_linker_results_to_html.DropdownEntry.print_entry"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.results.main_linker_results_to_html.DropdownEntry.print_entry"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "print_entry", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.results.main_linker_results_to_html.print_dropdown": [[40, 56], ["main_linker_results_to_html.print_div", "classes.append", "classes.append", "classes.append", "curr_dropdown.print_entry", "main_linker_results_to_html.get_span_to_str"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.results.main_linker_results_to_html.print_div", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.results.main_linker_results_to_html.DropdownEntry.print_entry", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.results.main_linker_results_to_html.get_span_to_str"], ["", "", "def", "print_dropdown", "(", "dropdown", ":", "List", "[", "DropdownEntry", "]", ",", "concept_id", ")", ":", "\n", "    ", "to_ret", "=", "''", "\n", "\n", "for", "curr_dropdown", "in", "dropdown", ":", "\n", "        ", "classes", "=", "[", "'menu-entry'", "]", "\n", "if", "curr_dropdown", ".", "type", "==", "'coref_mention'", ":", "\n", "            ", "conn_class", "=", "'conn_men_{}'", ".", "format", "(", "get_span_to_str", "(", "curr_dropdown", ".", "span", ")", ")", "\n", "classes", ".", "append", "(", "conn_class", ")", "\n", "", "if", "curr_dropdown", ".", "is_correct", ":", "\n", "            ", "classes", ".", "append", "(", "'correct-background'", ")", "\n", "", "else", ":", "\n", "            ", "classes", ".", "append", "(", "'incorrect-background'", ")", "\n", "\n", "", "to_ret", "+=", "print_div", "(", "classes", ",", "curr_dropdown", ".", "print_entry", "(", ")", ")", "\n", "\n", "", "return", "to_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.results.main_linker_results_to_html.get_span_to_str": [[58, 60], ["None"], "function", ["None"], ["", "def", "get_span_to_str", "(", "span", ":", "Tuple", "[", "int", ",", "int", "]", ")", "->", "str", ":", "\n", "    ", "return", "'{}_{}'", ".", "format", "(", "span", "[", "0", "]", ",", "span", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.results.main_linker_results_to_html.print_div": [[63, 76], ["len", "enumerate"], "function", ["None"], ["", "def", "print_div", "(", "classes", ":", "List", ",", "content", ":", "str", ")", ":", "\n", "    ", "to_ret", "=", "'<div'", "\n", "if", "len", "(", "classes", ")", ">", "0", ":", "\n", "        ", "to_ret", "+=", "' class=\"'", "\n", "for", "idx_class", ",", "curr_class", "in", "enumerate", "(", "classes", ")", ":", "\n", "            ", "if", "idx_class", ">", "0", ":", "\n", "                ", "to_ret", "+=", "' '", "\n", "", "to_ret", "+=", "curr_class", "\n", "", "to_ret", "+=", "'\"'", "\n", "", "to_ret", "+=", "'>'", "\n", "to_ret", "+=", "content", "\n", "to_ret", "+=", "'</div>'", "\n", "return", "to_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.results.main_linker_results_to_html.add_hover_function_concept": [[78, 92], ["None"], "function", ["None"], ["", "def", "add_hover_function_concept", "(", "concept_id", ",", "background_color", "=", "'green'", ")", ":", "\n", "    ", "\"\"\"\n\n    :return:\n\n    \"\"\"", "\n", "to_ret", "=", "\"\"\"\n    $('div.con_{}').hover(function() {{\n     $('div.con_{}').css('background-color', '{}');\n   }}, function() {{\n     $('div.con_{}').css('background-color', '');\n   }});\n    \"\"\"", ".", "format", "(", "concept_id", ",", "concept_id", ",", "background_color", ",", "concept_id", ")", "\n", "return", "to_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.results.main_linker_results_to_html.add_hover_function_conn_prev_mention": [[94, 117], ["main_linker_results_to_html.get_span_to_str", "main_linker_results_to_html.get_span_to_str", "main_linker_results_to_html.get_span_to_str"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.results.main_linker_results_to_html.get_span_to_str", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.results.main_linker_results_to_html.get_span_to_str", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.results.main_linker_results_to_html.get_span_to_str"], ["", "def", "add_hover_function_conn_prev_mention", "(", "concept_id", ",", "mention_from_span", ",", "mention_to_span", ",", "color_highlight", "=", "'yellow'", ")", ":", "\n", "    ", "\"\"\"\n\n    :return:\n\n    \"\"\"", "\n", "to_ret", "=", "\"\"\"\n       $('div.men_{}').hover(function() {{\n         $('div.men_{}').css('background-color', '{}');\n       }}, function() {{\n         $('div.men_{}').css('background-color', '');\n       }});    \n    \"\"\"", ".", "format", "(", "get_span_to_str", "(", "mention_from_span", ")", ",", "get_span_to_str", "(", "mention_to_span", ")", ",", "\n", "color_highlight", ",", "get_span_to_str", "(", "mention_to_span", ")", ")", "\n", "# to_ret = \"\"\"", "\n", "#    $('div.con_{}_men_{}').hover(function() {{", "\n", "#      $('div.con_{}_men_{}').css('background-color', '{}');", "\n", "#    }}, function() {{", "\n", "#      $('div.con_{}_men_{}').css('background-color', '');", "\n", "#    }});", "\n", "# \"\"\".format(concept_id, get_span_to_str(mention_from_span), concept_id, get_span_to_str(mention_to_span),", "\n", "#            color_highlight, concept_id, get_span_to_str(mention_to_span))", "\n", "return", "to_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.results.main_linker_results_to_html.add_hover_functions_conn_prev_mention_menu": [[119, 139], ["main_linker_results_to_html.get_span_to_str", "main_linker_results_to_html.get_span_to_str", "main_linker_results_to_html.get_span_to_str"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.results.main_linker_results_to_html.get_span_to_str", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.results.main_linker_results_to_html.get_span_to_str", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.results.main_linker_results_to_html.get_span_to_str"], ["", "def", "add_hover_functions_conn_prev_mention_menu", "(", "\n", "# concept_id:int, span:Tuple[int,int],", "\n", "dropdown_entries", ":", "List", "[", "DropdownEntry", "]", ",", "color_highlight", "=", "'yellow'", ")", ":", "\n", "    ", "\"\"\"\n\n    :return:\n\n    \"\"\"", "\n", "to_ret", "=", "''", "\n", "for", "curr_dropdown_entry", "in", "dropdown_entries", ":", "\n", "        ", "if", "'mention'", "in", "curr_dropdown_entry", ".", "type", ":", "\n", "            ", "to_ret", "+=", "\"\"\"\n           $('div.conn_men_{}').hover(function() {{\n             $('div.men_{}').css('background-color', '{}');\n           }}, function() {{\n             $('div.men_{}').css('background-color', '');\n           }});   \n               \"\"\"", ".", "format", "(", "get_span_to_str", "(", "curr_dropdown_entry", ".", "span", ")", ",", "get_span_to_str", "(", "curr_dropdown_entry", ".", "span", ")", ",", "\n", "color_highlight", ",", "get_span_to_str", "(", "curr_dropdown_entry", ".", "span", ")", ")", "\n", "", "", "return", "to_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.results.main_linker_results_analyzer.complete_predictions_cluster_level": [[13, 68], ["set", "os.walk", "set.add", "os.path.join", "print", "open", "json.loads", "input_structure[].items", "dict", "copy.deepcopy", "pred_cluster_to_mentions[].append", "list", "tuple", "sorted"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["def", "complete_predictions_cluster_level", "(", "models_path", "=", "'models/'", ",", "experiment_name", "=", "'20201007-coreflinker-scores'", ",", "\n", "experiment_type", "=", "'coreflinker'", ",", "input_structure", "=", "None", ",", "ground_truth_type", "=", "None", ",", "\n", "gold_structure", "=", "None", ")", ":", "\n", "    ", "nr_parallels", "=", "0", "\n", "dirs_processed", "=", "set", "(", ")", "\n", "for", "(", "dirpath", ",", "dirnames", ",", "filenames", ")", "in", "os", ".", "walk", "(", "models_path", ",", "followlinks", "=", "True", ")", ":", "\n", "        ", "if", "experiment_name", "in", "dirpath", "and", "dirpath", "not", "in", "dirs_processed", ":", "\n", "            ", "dirs_processed", ".", "add", "(", "dirpath", ")", "\n", "pred_file_name", "=", "'{}.jsonl'", ".", "format", "(", "ground_truth_type", ")", "\n", "if", "pred_file_name", "in", "filenames", ":", "\n", "                ", "file_process", "=", "os", ".", "path", ".", "join", "(", "dirpath", ",", "pred_file_name", ")", "\n", "print", "(", "'CLUSTER LEVEL, PROCESSING FOLLOWING DIR: '", ",", "file_process", ")", "\n", "nr_parallels", "+=", "1", "\n", "for", "curr_json_line", "in", "open", "(", "file_process", ")", ":", "\n", "                    ", "loaded_pred_json", "=", "json", ".", "loads", "(", "curr_json_line", ")", "\n", "doc_orig", "=", "loaded_pred_json", "[", "'id'", "]", "\n", "doc_id", "=", "loaded_pred_json", "[", "'id'", "]", "\n", "assert", "doc_id", "in", "gold_structure", "\n", "# if nr_parallels > 1:", "\n", "# doc_id = doc_id", "\n", "doc_id", "=", "'{}-{}'", ".", "format", "(", "doc_id", ",", "nr_parallels", ")", "\n", "\n", "# for each of the runs, add a different document", "\n", "if", "doc_id", "not", "in", "input_structure", ":", "\n", "# input_structure[doc_id] = input_structure[doc_orig].deepcopy()", "\n", "                        ", "input_structure", "[", "doc_id", "]", "=", "copy", ".", "deepcopy", "(", "gold_structure", "[", "doc_orig", "]", ")", "\n", "\n", "# initializes all to false and only puts to true if coincide both the cluster and the link", "\n", "", "for", "spans", ",", "cluster_data", "in", "input_structure", "[", "doc_id", "]", ".", "items", "(", ")", ":", "\n", "                        ", "cluster_data", "[", "'{}_correct'", ".", "format", "(", "experiment_type", ")", "]", "=", "False", "\n", "\n", "", "pred_cluster_to_mentions", "=", "dict", "(", ")", "\n", "\n", "for", "curr_mention", "in", "loaded_pred_json", "[", "'mentions'", "]", ":", "\n", "                        ", "concept_id", "=", "curr_mention", "[", "'concept'", "]", "\n", "if", "concept_id", "not", "in", "pred_cluster_to_mentions", ":", "\n", "                            ", "pred_cluster_to_mentions", "[", "concept_id", "]", "=", "list", "(", ")", "\n", "\n", "", "pred_cluster_to_mentions", "[", "concept_id", "]", ".", "append", "(", "curr_mention", ")", "\n", "\n", "", "for", "curr_cluster", "in", "loaded_pred_json", "[", "'concepts'", "]", ":", "\n", "                        ", "if", "curr_cluster", "[", "'concept'", "]", "not", "in", "pred_cluster_to_mentions", ":", "\n", "                            ", "continue", "\n", "", "if", "'link_pred'", "in", "curr_cluster", "and", "curr_cluster", "[", "'link_pred'", "]", "is", "not", "None", "and", "curr_cluster", "[", "'link_pred'", "]", "!=", "'NILL'", ":", "\n", "                            ", "link_pred", "=", "curr_cluster", "[", "'link_pred'", "]", "\n", "cluster_mentions", "=", "pred_cluster_to_mentions", "[", "curr_cluster", "[", "'concept'", "]", "]", "\n", "\n", "cluster_spans", "=", "[", "(", "cm", "[", "'begin'", "]", ",", "cm", "[", "'end'", "]", ")", "for", "cm", "in", "cluster_mentions", "]", "\n", "cluster_spans", "=", "tuple", "(", "sorted", "(", "cluster_spans", ",", "key", "=", "lambda", "x", ":", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ")", ")", ")", "\n", "\n", "if", "cluster_spans", "in", "input_structure", "[", "doc_id", "]", "and", "input_structure", "[", "doc_id", "]", "[", "cluster_spans", "]", "[", "'link_gold'", "]", "==", "link_pred", ":", "\n", "                                ", "input_structure", "[", "doc_id", "]", "[", "cluster_spans", "]", "[", "'{}_correct'", ".", "format", "(", "experiment_type", ")", "]", "=", "True", "\n", "", "", "", "", "", "", "", "return", "input_structure", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.results.main_linker_results_analyzer.complete_predictions": [[70, 261], ["set", "os.walk", "set.add", "os.path.join", "print", "open", "json.loads", "copy.deepcopy", "dict", "dict", "len", "print", "enumerate", "print", "Exception", "len", "print"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "complete_predictions", "(", "models_path", "=", "'models/'", ",", "experiment_name", "=", "'20201007-coreflinker-scores'", ",", "\n", "experiment_type", "=", "'coreflinker'", ",", "input_structure", "=", "None", ",", "ground_truth_type", "=", "None", ",", "\n", "gold_structure", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n\n    :param experiment_name:\n    :param experiment_type: 'coreflinker' or 'baseline_linker'\n    :return:\n    \"\"\"", "\n", "\n", "nr_parallels", "=", "0", "\n", "dirs_processed", "=", "set", "(", ")", "\n", "for", "(", "dirpath", ",", "dirnames", ",", "filenames", ")", "in", "os", ".", "walk", "(", "models_path", ",", "followlinks", "=", "True", ")", ":", "\n", "        ", "if", "experiment_name", "in", "dirpath", "and", "dirpath", "not", "in", "dirs_processed", ":", "\n", "            ", "dirs_processed", ".", "add", "(", "dirpath", ")", "\n", "pred_file_name", "=", "'{}.jsonl'", ".", "format", "(", "ground_truth_type", ")", "\n", "if", "pred_file_name", "in", "filenames", ":", "\n", "                ", "nr_parallels", "+=", "1", "\n", "curr_file_path", "=", "os", ".", "path", ".", "join", "(", "dirpath", ",", "pred_file_name", ")", "\n", "print", "(", "'MENTION LEVEL PROCESSING: '", ",", "curr_file_path", ")", "\n", "for", "curr_json_line", "in", "open", "(", "curr_file_path", ")", ":", "\n", "                    ", "loaded_pred_json", "=", "json", ".", "loads", "(", "curr_json_line", ")", "\n", "doc_id", "=", "loaded_pred_json", "[", "'id'", "]", "\n", "assert", "doc_id", "in", "gold_structure", "\n", "doc_orig", "=", "loaded_pred_json", "[", "'id'", "]", "\n", "# doc_id = loaded_pred_json['id']", "\n", "# assert doc_id in input_structure", "\n", "# if nr_parallels > 1:", "\n", "# doc_id = doc_id", "\n", "doc_id", "=", "'{}-{}'", ".", "format", "(", "doc_id", ",", "nr_parallels", ")", "\n", "\n", "# for each of the runs, add a different document", "\n", "if", "doc_id", "not", "in", "input_structure", ":", "\n", "                        ", "input_structure", "[", "doc_id", "]", "=", "copy", ".", "deepcopy", "(", "gold_structure", "[", "doc_orig", "]", ")", "\n", "\n", "# if doc_id not in input_structure:", "\n", "#     input_structure[doc_id] = dict()", "\n", "# print('loaded line to predict is: ', loaded_pred_json)", "\n", "", "for", "curr_mention", "in", "loaded_pred_json", "[", "'mentions'", "]", ":", "\n", "                        ", "pred_mention", "=", "dict", "(", ")", "\n", "mention_pos", "=", "(", "curr_mention", "[", "'begin'", "]", ",", "curr_mention", "[", "'end'", "]", ")", "\n", "if", "mention_pos", "not", "in", "input_structure", "[", "doc_id", "]", "and", "nr_parallels", ">", "1", ":", "\n", "                            ", "pred_mention", "[", "'{}_variable_result'", ".", "format", "(", "experiment_type", ")", "]", "=", "True", "\n", "\n", "", "if", "mention_pos", "in", "input_structure", "[", "doc_id", "]", ":", "\n", "                            ", "pred_mention", "=", "input_structure", "[", "doc_id", "]", "[", "mention_pos", "]", "\n", "# pred_mention['gold_mention'] = True", "\n", "", "else", ":", "\n", "# print('mention_pos not in ground truth')", "\n", "                            ", "pred_mention", "[", "'gold_mention'", "]", "=", "False", "\n", "\n", "", "link_pred", "=", "None", "\n", "if", "'link_pred'", "in", "curr_mention", ":", "\n", "                            ", "link_pred", "=", "curr_mention", "[", "'link_pred'", "]", "\n", "\n", "", "if", "'{}_link'", ".", "format", "(", "experiment_type", ")", "in", "pred_mention", ":", "\n", "                            ", "if", "pred_mention", "[", "'{}_link'", ".", "format", "(", "experiment_type", ")", "]", "!=", "link_pred", "and", "nr_parallels", ">", "1", ":", "\n", "                                ", "pred_mention", "[", "'{}_variable_result'", ".", "format", "(", "experiment_type", ")", "]", "=", "True", "\n", "", "", "else", ":", "\n", "                            ", "if", "nr_parallels", ">", "1", ":", "\n", "                                ", "pred_mention", "[", "'{}_variable_result'", ".", "format", "(", "experiment_type", ")", "]", "=", "True", "\n", "\n", "", "", "link_gold", "=", "None", "\n", "\n", "ground_truth_mention", "=", "dict", "(", ")", "\n", "if", "mention_pos", "in", "input_structure", "[", "doc_id", "]", ":", "\n", "                            ", "ground_truth_mention", "=", "input_structure", "[", "doc_id", "]", "[", "mention_pos", "]", "\n", "\n", "# kzaporoj 20210304 - 'gold_link' before to 'link_gold'", "\n", "", "if", "'link_gold'", "in", "ground_truth_mention", ":", "\n", "# kzaporoj 20210304 - 'gold_link' before to 'link_gold'", "\n", "                            ", "link_gold", "=", "ground_truth_mention", "[", "'link_gold'", "]", "\n", "\n", "", "pred_type", "=", "''", "# true positive (tp), false positive (fp), false negative (fn)", "\n", "if", "(", "link_pred", "is", "None", "or", "link_pred", "==", "'NILL'", ")", "and", "(", "\n", "link_gold", "is", "not", "None", "and", "link_gold", "!=", "'NILL'", ")", ":", "\n", "                            ", "pred_type", "=", "'fn'", "\n", "", "elif", "(", "link_pred", "is", "None", "or", "link_pred", "==", "'NILL'", ")", "and", "(", "\n", "link_gold", "is", "None", "or", "link_gold", "==", "'NILL'", ")", ":", "\n", "                            ", "pred_type", "=", "'tn'", "\n", "\n", "", "if", "link_pred", "is", "not", "None", "and", "link_pred", "!=", "'NILL'", ":", "\n", "                            ", "assigned_here", "=", "False", "\n", "if", "link_gold", "!=", "link_pred", ":", "\n", "                                ", "pred_type", "+=", "'fp'", "\n", "assigned_here", "=", "True", "\n", "if", "link_gold", "is", "not", "None", "and", "link_gold", "!=", "'NILL'", ":", "\n", "                                    ", "pred_type", "+=", "'fn'", "\n", "\n", "", "", "if", "link_gold", "is", "not", "None", "and", "link_gold", "!=", "'NILL'", ":", "\n", "                                ", "if", "link_gold", "==", "link_pred", ":", "\n", "                                    ", "pred_type", "+=", "'tp'", "\n", "if", "assigned_here", ":", "\n", "                                        ", "print", "(", "'WARN!!!: already seem have assigned fp, but has to be tp: '", "\n", "'{} (pred) vs {} (gold)'", ".", "format", "(", "link_pred", ",", "link_gold", ")", ")", "\n", "\n", "", "assigned_here", "=", "True", "\n", "", "", "if", "not", "assigned_here", ":", "\n", "                                ", "print", "(", "'WARN!!!: SOMETHING WRONG WITH ASSIGNMENT!: {} (pred) vs {} (gold)'", ".", "format", "(", "\n", "link_pred", ",", "link_gold", ")", ")", "\n", "raise", "Exception", "(", "'WARN!!!: SOMETHING WRONG WITH ASSIGNMENT!: {} (pred) vs {} '", "\n", "'(gold)'", ".", "format", "(", "link_pred", ",", "link_gold", ")", ")", "\n", "\n", "", "", "if", "len", "(", "pred_type", ")", ">", "4", ":", "\n", "                            ", "print", "(", "'!!!THIS SHOULD NOT HAPPEN FOR pred_type: '", ",", "pred_type", ")", "\n", "\n", "", "assert", "pred_type", "!=", "''", "# there should be always a pred_type", "\n", "\n", "pred_mention", "[", "'{}_mention'", ".", "format", "(", "experiment_type", ")", "]", "=", "True", "\n", "pred_mention", "[", "'{}_pred_type'", ".", "format", "(", "experiment_type", ")", "]", "=", "pred_type", "\n", "pred_mention", "[", "'{}_link'", ".", "format", "(", "experiment_type", ")", "]", "=", "link_pred", "\n", "pred_mention", "[", "'{}_concept_id'", ".", "format", "(", "experiment_type", ")", "]", "=", "curr_mention", "[", "'concept'", "]", "\n", "\n", "if", "'coref_scores'", "in", "curr_mention", ":", "\n", "# print('coref scores in mention')", "\n", "                            ", "coref_scores", "=", "curr_mention", "[", "'coref_scores'", "]", "\n", "max_score_span_idx", "=", "-", "1", "\n", "max_score", "=", "-", "999999.9", "\n", "max_score_span", "=", "None", "\n", "for", "idx_coref_span", ",", "curr_coref_span", "in", "enumerate", "(", "coref_scores", ")", ":", "\n", "                                ", "if", "curr_coref_span", "[", "'score'", "]", ">", "max_score", ":", "\n", "                                    ", "max_score", "=", "curr_coref_span", "[", "'score'", "]", "\n", "max_score_span_idx", "=", "idx_coref_span", "\n", "max_score_span", "=", "curr_coref_span", "[", "'span'", "]", "\n", "\n", "", "", "pred_mention", "[", "'{}_coref_span_start'", ".", "format", "(", "experiment_type", ")", "]", "=", "max_score_span", "[", "0", "]", "\n", "pred_mention", "[", "'{}_coref_span_end'", ".", "format", "(", "experiment_type", ")", "]", "=", "max_score_span", "[", "1", "]", "\n", "pred_mention", "[", "'{}_coref_score'", ".", "format", "(", "experiment_type", ")", "]", "=", "max_score", "\n", "pred_mention", "[", "'{}_coref_scores'", ".", "format", "(", "experiment_type", ")", "]", "=", "coref_scores", "\n", "if", "max_score_span_idx", "+", "1", "==", "len", "(", "coref_scores", ")", ":", "\n", "                                ", "pred_mention", "[", "'{}_coref_span_type'", ".", "format", "(", "experiment_type", ")", "]", "=", "'self'", "\n", "", "else", ":", "\n", "                                ", "pred_mention", "[", "'{}_coref_span_type'", ".", "format", "(", "experiment_type", ")", "]", "=", "'other'", "\n", "", "", "else", ":", "\n", "# print(doc_id, ': coref scores not in mention: ', curr_mention)", "\n", "                            ", "pred_mention", "[", "'{}_coref_span_type'", ".", "format", "(", "experiment_type", ")", "]", "=", "'self'", "\n", "# TODO! 1 or 0s for predicted mentions, this can be obtained by looking into gold clusters,", "\n", "#  and matching with predicted mentions", "\n", "# pred_mention['{}_coref_scores_gold'] = 'TODO'", "\n", "\n", "", "if", "'candidates'", "in", "curr_mention", ":", "\n", "                            ", "pred_mention", "[", "'{}_candidates'", ".", "format", "(", "experiment_type", ")", "]", "=", "curr_mention", "[", "'candidates'", "]", "[", "\n", ":", "nr_candidates", "]", "\n", "", "else", ":", "\n", "                            ", "pred_mention", "[", "'{}_candidates'", ".", "format", "(", "experiment_type", ")", "]", "=", "None", "\n", "\n", "", "if", "'scores'", "in", "curr_mention", ":", "\n", "                            ", "pred_mention", "[", "'{}_link_scores'", ".", "format", "(", "experiment_type", ")", "]", "=", "curr_mention", "[", "'scores'", "]", "\n", "", "else", ":", "\n", "                            ", "pred_mention", "[", "'{}_link_scores'", ".", "format", "(", "experiment_type", ")", "]", "=", "None", "\n", "\n", "# pred_mention['link_pred'] = link_pred", "\n", "", "pred_mention", "[", "'link_gold'", "]", "=", "link_gold", "\n", "if", "'linkable'", "in", "ground_truth_mention", ":", "\n", "                            ", "pred_mention", "[", "'linkable'", "]", "=", "ground_truth_mention", "[", "'linkable'", "]", "\n", "", "else", ":", "\n", "                            ", "pred_mention", "[", "'linkable'", "]", "=", "False", "\n", "\n", "", "if", "pred_mention", "[", "'linkable'", "]", "and", "'coreflinker_solvable'", "in", "ground_truth_mention", ":", "\n", "                            ", "pred_mention", "[", "'coreflinker_solvable'", "]", "=", "ground_truth_mention", "[", "'coreflinker_solvable'", "]", "\n", "\n", "", "if", "pred_mention", "[", "'linkable'", "]", ":", "\n", "                            ", "pred_mention", "[", "'correct_link_seen'", "]", "=", "ground_truth_mention", "[", "'correct_link_seen'", "]", "\n", "pred_mention", "[", "'has_correct_link'", "]", "=", "ground_truth_mention", "[", "'has_correct_link'", "]", "\n", "# if actually there is a corrrect candidate (i.e., from independent alias table: ex: cpn-alias-table.json)", "\n", "if", "'candidates'", "in", "curr_mention", "and", "link_gold", "in", "curr_mention", "[", "'candidates'", "]", "[", ":", "nr_candidates", "]", ":", "\n", "                                ", "pred_mention", "[", "'has_correct_link'", "]", "=", "True", "\n", "", "else", ":", "\n", "                                ", "pred_mention", "[", "'has_correct_link'", "]", "=", "False", "\n", "# elif 'candidates' in pred_mention:", "\n", "#     pred_mention['has_correct_link'] =", "\n", "\n", "", "pred_mention", "[", "'correct_link_in_cluster'", "]", "=", "ground_truth_mention", "[", "'correct_link_in_cluster'", "]", "\n", "\n", "# if experiment_type == 'coreflinker':", "\n", "", "if", "'coref_connection_type'", "in", "curr_mention", ":", "\n", "# if 'coref_connection_type' in curr_mention:", "\n", "                            ", "pred_mention", "[", "'{}_connection_type'", ".", "format", "(", "experiment_type", ")", "]", "=", "curr_mention", "[", "\n", "'coref_connection_type'", "]", "\n", "# else:", "\n", "", "else", ":", "\n", "# check this good, I think it should not happen!", "\n", "# print(doc_id, ' for some reason no coref_connection_type in ', curr_mention)", "\n", "                            ", "pred_mention", "[", "'{}_connection_type'", ".", "format", "(", "experiment_type", ")", "]", "=", "'--NOT DEFINED--'", "\n", "# pass", "\n", "# 20210303 - commented because error for mtt, TODO: check why not existent!!", "\n", "# pred_mention['{}_connection_pointer'.format(experiment_type)] = curr_mention[", "\n", "#     'coref_connection_pointer']", "\n", "", "pred_mention", "[", "'text'", "]", "=", "curr_mention", "[", "'text'", "]", "\n", "input_structure", "[", "doc_id", "]", "[", "mention_pos", "]", "=", "pred_mention", "\n", "", "", "", "", "", "return", "input_structure", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.results.main_linker_results_analyzer.merge_predictions": [[263, 306], ["input_structure.items", "curr_spans.items"], "function", ["None"], ["", "def", "merge_predictions", "(", "input_structure", ":", "Dict", "=", "None", ",", "experiment_types", ":", "List", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    The goal is to add ground truth spans that are both not detected by coreflinker and baseline; indicating in\n    the input structure which mention spans were detected by each of the models in experiment_types\n    :param input_structure:\n    :param experiment_types:\n    :return:\n    \"\"\"", "\n", "\n", "for", "curr_exp_type", "in", "experiment_types", ":", "\n", "        ", "for", "curr_doc", ",", "curr_spans", "in", "input_structure", ".", "items", "(", ")", ":", "\n", "            ", "for", "curr_span", ",", "curr_span_details", "in", "curr_spans", ".", "items", "(", ")", ":", "\n", "# print('processing data here')", "\n", "                ", "curr_exp_mention", "=", "'{}_mention'", ".", "format", "(", "curr_exp_type", ")", "\n", "if", "curr_exp_mention", "not", "in", "curr_span_details", ":", "\n", "                    ", "curr_span_details", "[", "curr_exp_mention", "]", "=", "False", "\n", "\n", "", "curr_span_pred_type", "=", "''", "\n", "if", "curr_span_details", "[", "'gold_mention'", "]", "and", "curr_span_details", "[", "curr_exp_mention", "]", ":", "\n", "                    ", "curr_span_pred_type", "=", "'tp'", "\n", "", "elif", "curr_span_details", "[", "'gold_mention'", "]", "and", "not", "curr_span_details", "[", "curr_exp_mention", "]", ":", "\n", "                    ", "curr_span_pred_type", "=", "'fn'", "\n", "", "elif", "not", "curr_span_details", "[", "'gold_mention'", "]", "and", "not", "curr_span_details", "[", "curr_exp_mention", "]", ":", "\n", "                    ", "curr_span_pred_type", "=", "'tn'", "\n", "", "elif", "not", "curr_span_details", "[", "'gold_mention'", "]", "and", "curr_span_details", "[", "curr_exp_mention", "]", ":", "\n", "                    ", "curr_span_pred_type", "=", "'fp'", "\n", "\n", "", "assert", "curr_span_pred_type", "in", "{", "'tp'", ",", "'fp'", ",", "'fn'", ",", "'tn'", "}", "\n", "\n", "curr_span_details", "[", "'{}_span_pred_type'", ".", "format", "(", "curr_exp_type", ")", "]", "=", "curr_span_pred_type", "\n", "\n", "if", "'link_gold'", "not", "in", "curr_span_details", ":", "\n", "                    ", "curr_span_details", "[", "'link_gold'", "]", "=", "None", "\n", "\n", "", "if", "not", "curr_span_details", "[", "curr_exp_mention", "]", "and", "(", "curr_span_details", "[", "'link_gold'", "]", "is", "None", "or", "curr_span_details", "[", "'link_gold'", "]", "==", "'NILL'", ")", ":", "\n", "                    ", "curr_span_details", "[", "'{}_pred_type'", ".", "format", "(", "curr_exp_type", ")", "]", "=", "'tn'", "\n", "", "elif", "not", "curr_span_details", "[", "curr_exp_mention", "]", "and", "not", "(", "curr_span_details", "[", "'link_gold'", "]", "is", "None", "or", "curr_span_details", "[", "'link_gold'", "]", "==", "'NILL'", ")", ":", "\n", "                    ", "curr_span_details", "[", "'{}_pred_type'", ".", "format", "(", "curr_exp_type", ")", "]", "=", "'fn'", "\n", "\n", "", "assert", "'{}_pred_type'", ".", "format", "(", "curr_exp_type", ")", "in", "curr_span_details", "\n", "", "", "", "return", "input_structure", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.results.main_linker_results_analyzer.show_result_statistics_clusters_acc": [[308, 352], ["pandas.DataFrame", "pd.DataFrame.pivot().reset_index", "matplotlib.subplots", "df_cl_size_stats.pivot().reset_index.plot.line", "matplotlib.xticks", "ax.set_xlabel", "ax.set_ylabel", "matplotlib.show", "len", "print", "print", "filtered_curr_cl_size[].sum", "print", "rows_cl_size.append", "pd.DataFrame.pivot"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "show_result_statistics_clusters_acc", "(", "predictors", ":", "List", ",", "predictions_cluster", ",", "ranges_cluster_data", ")", ":", "\n", "# print('we are here')", "\n", "    ", "rows_cl_size", "=", "[", "]", "\n", "# predictions_cluster =", "\n", "for", "curr_cl_size", "in", "ranges_cluster_data", ":", "\n", "        ", "if", "curr_cl_size", "==", "1", ":", "\n", "            ", "filtered_curr_cl_size", "=", "predictions_cluster", "[", "predictions_cluster", "[", "'cluster_size'", "]", "==", "curr_cl_size", "]", "\n", "", "else", ":", "\n", "            ", "filtered_curr_cl_size", "=", "predictions_cluster", "[", "predictions_cluster", "[", "'cluster_size'", "]", ">=", "curr_cl_size", "]", "\n", "# if curr_cl_size >= 2:", "\n", "#     filtered_curr_cl_size = filtered_curr_cl_size[filtered_curr_cl_size['cluster_size_distinct'] >= 2]", "\n", "\n", "# filtered_curr_cl_size = predictions_cluster[predictions_cluster['cluster_size_distinct'] >= curr_cl_size]", "\n", "", "nr_gold_clusters", "=", "len", "(", "filtered_curr_cl_size", ".", "index", ")", "\n", "print", "(", "'-----'", ")", "\n", "print", "(", "'gold cluster nr: '", ",", "nr_gold_clusters", ")", "\n", "for", "curr_predictor", "in", "predictors", ":", "\n", "            ", "curr_pred_field", "=", "'{}_correct'", ".", "format", "(", "curr_predictor", ")", "\n", "curr_pred_accuracy", "=", "filtered_curr_cl_size", "[", "curr_pred_field", "]", ".", "sum", "(", ")", "\n", "curr_pred_accuracy", "=", "curr_pred_accuracy", "/", "nr_gold_clusters", "\n", "print", "(", "'curr accuracy for {} for {} cluster size: '", ".", "format", "(", "curr_predictor", ",", "curr_cl_size", ")", ",", "\n", "curr_pred_accuracy", ")", "\n", "rows_cl_size", ".", "append", "(", "{", "'setup'", ":", "curr_predictor", ",", "'cluster_size'", ":", "curr_cl_size", ",", "'accuracy'", ":", "curr_pred_accuracy", "}", ")", "\n", "\n", "", "", "df_cl_size_stats", "=", "pd", ".", "DataFrame", "(", "rows_cl_size", ")", "\n", "df_piv", "=", "df_cl_size_stats", ".", "pivot", "(", "index", "=", "'cluster_size'", ",", "columns", "=", "'setup'", ",", "values", "=", "'accuracy'", ")", ".", "reset_index", "(", ")", "\n", "# print('df_cluster_sizes_link: ', df_cluster_sizes_link)", "\n", "# fig, ax = plt.subplots(1, 1, figsize=(15, 5))", "\n", "# bars = df_piv.plot(ax=ax, x='cluster_size',", "\n", "#                    # color=color, label='',", "\n", "#                    title='Ratio of 1 Links per Gold Cluster')", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "1", ",", "figsize", "=", "(", "5", ",", "5", ")", ")", "\n", "df_piv", ".", "plot", ".", "line", "(", "ax", "=", "ax", ",", "x", "=", "'cluster_size'", ",", "\n", "# y='accuracy',", "\n", "# color=color, label='',", "\n", "title", "=", "'Accuracy cluster size'", ")", "\n", "\n", "plt", ".", "xticks", "(", "ranges_cluster_data", ")", "\n", "ax", ".", "set_xlabel", "(", "\">= Mentions in cluster\"", ")", "\n", "# ax.set_ylabel(\"Fraction of clusters with 3 assigned links\")", "\n", "ax", ".", "set_ylabel", "(", "\"Accuracy\"", ")", "\n", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.results.main_linker_results_analyzer.get_result_statistics": [[354, 382], ["[].count().reset_index", "print", "print", "len", "len", "len", "len", "[].count", "predictions.groupby"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "get_result_statistics", "(", "predictor", ":", "str", ",", "predictions", ":", "pd", ".", "DataFrame", ")", ":", "\n", "    ", "df_stats", "=", "predictions", ".", "groupby", "(", "[", "'{}_pred_type'", ".", "format", "(", "predictor", ")", "]", ")", "[", "'text'", "]", ".", "count", "(", ")", ".", "reset_index", "(", ")", "\n", "tp", "=", "0", "\n", "filtered_tp", "=", "df_stats", "[", "df_stats", "[", "'{}_pred_type'", ".", "format", "(", "predictor", ")", "]", "==", "'tp'", "]", "\n", "if", "len", "(", "filtered_tp", ".", "index", ")", "==", "1", ":", "\n", "        ", "tp", "=", "filtered_tp", ".", "iloc", "[", "0", "]", "[", "'text'", "]", "\n", "\n", "", "filtered_fn", "=", "df_stats", "[", "df_stats", "[", "'{}_pred_type'", ".", "format", "(", "predictor", ")", "]", "==", "'fn'", "]", "\n", "fn", "=", "0", "\n", "if", "len", "(", "filtered_fn", ".", "index", ")", "==", "1", ":", "\n", "        ", "fn", "=", "filtered_fn", ".", "iloc", "[", "0", "]", "[", "'text'", "]", "\n", "\n", "", "filtered_fp", "=", "df_stats", "[", "df_stats", "[", "'{}_pred_type'", ".", "format", "(", "predictor", ")", "]", "==", "'fp'", "]", "\n", "fp", "=", "0", "\n", "if", "len", "(", "filtered_fp", ".", "index", ")", "==", "1", ":", "\n", "        ", "fp", "=", "filtered_fp", ".", "iloc", "[", "0", "]", "[", "'text'", "]", "\n", "\n", "", "filtered_fpfn", "=", "df_stats", "[", "df_stats", "[", "'{}_pred_type'", ".", "format", "(", "predictor", ")", "]", "==", "'fpfn'", "]", "\n", "fpfn", "=", "0", "\n", "if", "len", "(", "filtered_fpfn", ".", "index", ")", "==", "1", ":", "\n", "        ", "fpfn", "=", "filtered_fpfn", ".", "iloc", "[", "0", "]", "[", "'text'", "]", "\n", "\n", "", "print", "(", "'{:20}{:6}{:6}{:6}{:6}{:6}{:6}{:6}{:6}'", ".", "format", "(", "'MODEL'", ",", "'TP'", ",", "'FP/FN'", ",", "'FP'", ",", "'FN'", ",", "'Pr'", ",", "'Re'", ",", "'F1'", ",", "'Acc'", ")", ")", "\n", "pr", "=", "tp", "/", "(", "tp", "+", "fpfn", "+", "fp", ")", "\n", "re", "=", "tp", "/", "(", "tp", "+", "fpfn", "+", "fn", ")", "\n", "f1", "=", "(", "2", "*", "pr", "*", "re", ")", "/", "(", "re", "+", "pr", ")", "\n", "print", "(", "'{:20}{:<6}{:<6}{:<6}{:<6}{:<6.3f}{:<6.3f}{:<6.3f}{:<6.3f}'", ".", "format", "(", "predictor", ",", "tp", ",", "fpfn", ",", "fp", ",", "fn", ",", "pr", ",", "re", ",", "f1", ",", "\n", "re", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.results.main_linker_results_analyzer.get_avg_cluster_size_distribution": [[384, 386], ["None"], "function", ["None"], ["", "def", "get_avg_cluster_size_distribution", "(", "df_data", ":", "pd", ".", "DataFrame", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.results.main_linker_results_analyzer.get_link_coref_distribution": [[388, 417], ["print", "[].count().reset_index", "print", "len", "len", "[].count", "df_data.groupby"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "get_link_coref_distribution", "(", "df_datas", ":", "List", "[", "Tuple", "[", "str", ",", "pd", ".", "DataFrame", "]", "]", ")", ":", "\n", "    ", "\"\"\"\n    Percentage (and #) of links predicted using link prediction vs percentage (and #) predicted using reference to\n    other mention (coref)\n\n    :param df_data:\n    :return:\n    \"\"\"", "\n", "\n", "print", "(", "'{:<20}{:>7}{:>7}{:>7}{:>7}'", ".", "format", "(", "'description'", ",", "'men'", ",", "'% men'", ",", "'link'", ",", "'% link'", ")", ")", "\n", "\n", "for", "df_data_tuple", "in", "df_datas", ":", "\n", "        ", "df_data", "=", "df_data_tuple", "[", "1", "]", "\n", "description", "=", "df_data_tuple", "[", "0", "]", "\n", "\n", "df_grouped", "=", "df_data", ".", "groupby", "(", "[", "'coreflinker_connection_type'", "]", ")", "[", "'text'", "]", ".", "count", "(", ")", ".", "reset_index", "(", ")", "\n", "link", "=", "0", "\n", "filtered", "=", "df_grouped", "[", "df_grouped", "[", "'coreflinker_connection_type'", "]", "==", "'link'", "]", "\n", "if", "len", "(", "filtered", ".", "index", ")", "==", "1", ":", "\n", "            ", "link", "=", "filtered", ".", "iloc", "[", "0", "]", "[", "'text'", "]", "\n", "\n", "", "mention_other", "=", "0", "\n", "filtered", "=", "df_grouped", "[", "df_grouped", "[", "'coreflinker_connection_type'", "]", "==", "'mention_other'", "]", "\n", "if", "len", "(", "filtered", ".", "index", ")", "==", "1", ":", "\n", "            ", "mention_other", "=", "filtered", ".", "iloc", "[", "0", "]", "[", "'text'", "]", "\n", "\n", "", "print", "(", "'{:<20}{:>7}{:>7.2f}%{:>7}{:>7.2f}%'", ".", "format", "(", "description", ",", "mention_other", ",", "\n", "(", "mention_other", "/", "(", "mention_other", "+", "link", ")", ")", "*", "100", ",", "\n", "link", ",", "(", "link", "/", "(", "mention_other", "+", "link", ")", ")", "*", "100", ")", ")", "\n", "# print('mention other: {} ({:.2f}%)'.format(mention_other, (mention_other / (mention_other + link)) * 100))", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.results.main_linker_results_analyzer.get_most_common_cases": [[421, 423], ["None"], "function", ["None"], ["", "", "def", "get_most_common_cases", "(", "df_data", ":", "pd", ".", "DataFrame", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.results.main_linker_results_analyzer.get_top_entity_types": [[425, 427], ["None"], "function", ["None"], ["", "def", "get_top_entity_types", "(", "df_data", ":", "pd", ".", "DataFrame", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.results.main_linker_results_analyzer.get_nr_intersected_v2": [[429, 478], ["dict", "print", "row_format.format", "print", "sum", "row_format.format", "print", "len", "len", "curr_line_args.append", "row_format.format", "print", "len", "curr_line_args.append", "len"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "get_nr_intersected_v2", "(", "df_data", ":", "pd", ".", "DataFrame", ",", "model_types", ":", "List", ",", "pred_types", ":", "List", ")", ":", "\n", "    ", "\"\"\"\n    An improved version from get_nr_intersected, that autimatically builds the matrix based on predictors and\n    pred types passed as parameters\n    :param df_data:\n    :return:\n    \"\"\"", "\n", "matrix_res", "=", "dict", "(", ")", "\n", "for", "curr_pred_type_m1", "in", "pred_types", ":", "\n", "        ", "nr_entry_type_m1", "=", "df_data", "[", "(", "df_data", "[", "'{}_pred_type'", ".", "format", "(", "model_types", "[", "0", "]", ")", "]", "==", "curr_pred_type_m1", ")", "]", "\n", "nr_entry_type_m1", "=", "len", "(", "nr_entry_type_m1", ".", "index", ")", "\n", "nr_entry_type_m2", "=", "df_data", "[", "(", "df_data", "[", "'{}_pred_type'", ".", "format", "(", "model_types", "[", "1", "]", ")", "]", "==", "curr_pred_type_m1", ")", "]", "\n", "nr_entry_type_m2", "=", "len", "(", "nr_entry_type_m2", ".", "index", ")", "\n", "\n", "matrix_res", "[", "(", "curr_pred_type_m1", ",", "''", ")", "]", "=", "nr_entry_type_m1", "\n", "matrix_res", "[", "(", "''", ",", "curr_pred_type_m1", ")", "]", "=", "nr_entry_type_m2", "\n", "\n", "for", "curr_pred_type_m2", "in", "pred_types", ":", "\n", "            ", "model_type1", "=", "model_types", "[", "0", "]", "\n", "model_type2", "=", "model_types", "[", "1", "]", "\n", "entry_type", "=", "(", "curr_pred_type_m1", ",", "curr_pred_type_m2", ")", "\n", "nr_entry_type", "=", "df_data", "[", "(", "df_data", "[", "'{}_pred_type'", ".", "format", "(", "model_type1", ")", "]", "==", "curr_pred_type_m1", ")", "&", "\n", "(", "df_data", "[", "'{}_pred_type'", ".", "format", "(", "model_type2", ")", "]", "==", "curr_pred_type_m2", ")", "]", "\n", "nr_entry_type", "=", "len", "(", "nr_entry_type", ".", "index", ")", "\n", "matrix_res", "[", "entry_type", "]", "=", "nr_entry_type", "\n", "\n", "", "", "print", "(", "'{:^42s}'", ".", "format", "(", "model_types", "[", "1", "]", ")", ")", "\n", "row_format", "=", "'{:<15}{:>6}|'", "+", "'{:<6}'", "*", "(", "len", "(", "pred_types", ")", "+", "1", ")", "\n", "\n", "# prints the title", "\n", "title_args", "=", "[", "''", ",", "''", "]", "+", "pred_types", "+", "[", "'Tot.'", "]", "\n", "title", "=", "row_format", ".", "format", "(", "*", "title_args", ")", "\n", "print", "(", "title", ")", "\n", "sum_margins_m1", "=", "0", "\n", "for", "curr_pred_type_m1", "in", "pred_types", ":", "\n", "        ", "curr_line_args", "=", "[", "model_types", "[", "0", "]", ",", "curr_pred_type_m1", "]", "\n", "for", "curr_pred_type_m2", "in", "pred_types", ":", "\n", "            ", "curr_line_args", ".", "append", "(", "matrix_res", "[", "(", "curr_pred_type_m1", ",", "curr_pred_type_m2", ")", "]", ")", "\n", "", "curr_line_args", ".", "append", "(", "matrix_res", "[", "(", "curr_pred_type_m1", ",", "''", ")", "]", ")", "\n", "sum_margins_m1", "+=", "matrix_res", "[", "(", "curr_pred_type_m1", ",", "''", ")", "]", "\n", "curr_line", "=", "row_format", ".", "format", "(", "*", "curr_line_args", ")", "\n", "print", "(", "curr_line", ")", "\n", "\n", "", "sum_m2_lst", "=", "[", "matrix_res", "[", "(", "''", ",", "cptm2", ")", "]", "for", "cptm2", "in", "pred_types", "]", "\n", "sum_margins_m2", "=", "sum", "(", "sum_m2_lst", ")", "\n", "title_args", "=", "[", "''", ",", "'Tot.'", "]", "+", "sum_m2_lst", "\n", "title_args", "+=", "[", "'{}\\{}'", ".", "format", "(", "sum_margins_m2", ",", "sum_margins_m1", ")", "]", "\n", "title", "=", "row_format", ".", "format", "(", "*", "title_args", ")", "\n", "print", "(", "title", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.results.main_linker_results_analyzer.get_nr_intersected": [[480, 605], ["print", "print", "print", "print", "print", "print", "print", "print", "main_linker_results_analyzer.get_link_coref_distribution", "print", "print", "print", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.results.main_linker_results_analyzer.get_link_coref_distribution", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "get_nr_intersected", "(", "df_data", ":", "pd", ".", "DataFrame", ")", ":", "\n", "    ", "\"\"\"\n\n    :param df_data:\n    :param pred_type:\n    :return: how many mentions are fpfn for both coreflinker and baseline\n    \"\"\"", "\n", "df_data_coreflinker_fpfn", "=", "df_data", "[", "df_data", "[", "'coreflinker_pred_type'", "]", "==", "'fpfn'", "]", "\n", "df_data_coreflinker_fn", "=", "df_data", "[", "df_data", "[", "'coreflinker_pred_type'", "]", "==", "'fn'", "]", "\n", "df_data_coreflinker_fp", "=", "df_data", "[", "df_data", "[", "'coreflinker_pred_type'", "]", "==", "'fp'", "]", "\n", "df_data_coreflinker_tp", "=", "df_data", "[", "df_data", "[", "'coreflinker_pred_type'", "]", "==", "'tp'", "]", "\n", "\n", "df_data_base_fpfn", "=", "df_data", "[", "df_data", "[", "'baseline_linker_pred_type'", "]", "==", "'fpfn'", "]", "\n", "df_data_base_fn", "=", "df_data", "[", "df_data", "[", "'baseline_linker_pred_type'", "]", "==", "'fn'", "]", "\n", "df_data_base_fp", "=", "df_data", "[", "df_data", "[", "'baseline_linker_pred_type'", "]", "==", "'fp'", "]", "\n", "df_data_base_tp", "=", "df_data", "[", "df_data", "[", "'baseline_linker_pred_type'", "]", "==", "'tp'", "]", "\n", "\n", "df_data_tp_tp", "=", "df_data", "[", "(", "df_data", "[", "'baseline_linker_pred_type'", "]", "==", "'tp'", ")", "&", "\n", "(", "df_data", "[", "'coreflinker_pred_type'", "]", "==", "'tp'", ")", "]", "\n", "df_data_tp_fpfn", "=", "df_data", "[", "(", "df_data", "[", "'baseline_linker_pred_type'", "]", "==", "'tp'", ")", "&", "\n", "(", "df_data", "[", "'coreflinker_pred_type'", "]", "==", "'fpfn'", ")", "]", "\n", "\n", "df_data_tp_fn", "=", "df_data", "[", "(", "df_data", "[", "'baseline_linker_pred_type'", "]", "==", "'tp'", ")", "&", "\n", "(", "df_data", "[", "'coreflinker_pred_type'", "]", "==", "'fn'", ")", "]", "\n", "\n", "df_data_tp_fp", "=", "df_data", "[", "(", "df_data", "[", "'baseline_linker_pred_type'", "]", "==", "'tp'", ")", "&", "\n", "(", "df_data", "[", "'coreflinker_pred_type'", "]", "==", "'fp'", ")", "]", "\n", "\n", "df_data_fpfn_tp", "=", "df_data", "[", "(", "df_data", "[", "'baseline_linker_pred_type'", "]", "==", "'fpfn'", ")", "&", "\n", "(", "df_data", "[", "'coreflinker_pred_type'", "]", "==", "'tp'", ")", "]", "\n", "\n", "df_data_fpfn_fpfn", "=", "df_data", "[", "(", "df_data", "[", "'baseline_linker_pred_type'", "]", "==", "'fpfn'", ")", "&", "\n", "(", "df_data", "[", "'coreflinker_pred_type'", "]", "==", "'fpfn'", ")", "]", "\n", "\n", "df_data_fpfn_fp", "=", "df_data", "[", "(", "df_data", "[", "'baseline_linker_pred_type'", "]", "==", "'fpfn'", ")", "&", "\n", "(", "df_data", "[", "'coreflinker_pred_type'", "]", "==", "'fp'", ")", "]", "\n", "\n", "df_data_fpfn_fn", "=", "df_data", "[", "(", "df_data", "[", "'baseline_linker_pred_type'", "]", "==", "'fpfn'", ")", "&", "\n", "(", "df_data", "[", "'coreflinker_pred_type'", "]", "==", "'fn'", ")", "]", "\n", "\n", "df_data_fp_tp", "=", "df_data", "[", "(", "df_data", "[", "'baseline_linker_pred_type'", "]", "==", "'fp'", ")", "&", "\n", "(", "df_data", "[", "'coreflinker_pred_type'", "]", "==", "'tp'", ")", "]", "\n", "\n", "df_data_fp_fpfn", "=", "df_data", "[", "(", "df_data", "[", "'baseline_linker_pred_type'", "]", "==", "'fp'", ")", "&", "\n", "(", "df_data", "[", "'coreflinker_pred_type'", "]", "==", "'fpfn'", ")", "]", "\n", "\n", "df_data_fp_fp", "=", "df_data", "[", "(", "df_data", "[", "'baseline_linker_pred_type'", "]", "==", "'fp'", ")", "&", "\n", "(", "df_data", "[", "'coreflinker_pred_type'", "]", "==", "'fp'", ")", "]", "\n", "\n", "df_data_fp_fn", "=", "df_data", "[", "(", "df_data", "[", "'baseline_linker_pred_type'", "]", "==", "'fp'", ")", "&", "\n", "(", "df_data", "[", "'coreflinker_pred_type'", "]", "==", "'fn'", ")", "]", "\n", "\n", "df_data_fn_tp", "=", "df_data", "[", "(", "df_data", "[", "'baseline_linker_pred_type'", "]", "==", "'fn'", ")", "&", "\n", "(", "df_data", "[", "'coreflinker_pred_type'", "]", "==", "'tp'", ")", "]", "\n", "\n", "df_data_fn_fpfn", "=", "df_data", "[", "(", "df_data", "[", "'baseline_linker_pred_type'", "]", "==", "'fn'", ")", "&", "\n", "(", "df_data", "[", "'coreflinker_pred_type'", "]", "==", "'fpfn'", ")", "]", "\n", "\n", "df_data_fn_fp", "=", "df_data", "[", "(", "df_data", "[", "'baseline_linker_pred_type'", "]", "==", "'fn'", ")", "&", "\n", "(", "df_data", "[", "'coreflinker_pred_type'", "]", "==", "'fp'", ")", "]", "\n", "\n", "df_data_fn_fn", "=", "df_data", "[", "(", "df_data", "[", "'baseline_linker_pred_type'", "]", "==", "'fn'", ")", "&", "\n", "(", "df_data", "[", "'coreflinker_pred_type'", "]", "==", "'fn'", ")", "]", "\n", "\n", "print", "(", "'{:^42s}'", ".", "format", "(", "'coreflinker'", ")", ")", "\n", "print", "(", "'{:<5}{:>6}|{:<6}{:<6}{:<6}{:<6}{:<6}'", ".", "format", "(", "''", ",", "''", ",", "'TP'", ",", "'FP/FN'", ",", "'FP'", ",", "'FN'", ",", "'Tot.'", ")", ")", "\n", "print", "(", "'{:<5}{:>6}|{:<6}{:<6}{:<6}{:<6}{:<6}'", ".", "format", "(", "'base'", ",", "'TP'", ",", "\n", "len", "(", "df_data_tp_tp", ".", "index", ")", ",", "\n", "len", "(", "df_data_tp_fpfn", ".", "index", ")", ",", "\n", "len", "(", "df_data_tp_fp", ".", "index", ")", ",", "\n", "len", "(", "df_data_tp_fn", ".", "index", ")", ",", "\n", "len", "(", "df_data_base_tp", ".", "index", ")", ")", ")", "\n", "print", "(", "'{:<5}{:>6}|{:<6}{:<6}{:<6}{:<6}{:<6}'", ".", "format", "(", "'base'", ",", "'FP/FN'", ",", "\n", "len", "(", "df_data_fpfn_tp", ".", "index", ")", ",", "\n", "len", "(", "df_data_fpfn_fpfn", ".", "index", ")", ",", "\n", "len", "(", "df_data_fpfn_fp", ".", "index", ")", ",", "\n", "len", "(", "df_data_fpfn_fn", ".", "index", ")", ",", "\n", "len", "(", "df_data_base_fpfn", ".", "index", ")", ")", ")", "\n", "print", "(", "'{:<5}{:>6}|{:<6}{:<6}{:<6}{:<6}{:<6}'", ".", "format", "(", "'base'", ",", "'FP'", ",", "\n", "len", "(", "df_data_fp_tp", ".", "index", ")", ",", "\n", "len", "(", "df_data_fp_fpfn", ".", "index", ")", ",", "\n", "len", "(", "df_data_fp_fp", ".", "index", ")", ",", "\n", "len", "(", "df_data_fp_fn", ".", "index", ")", ",", "\n", "len", "(", "df_data_base_fp", ".", "index", ")", ")", ")", "\n", "print", "(", "'{:<5}{:>6}|{:<6}{:<6}{:<6}{:<6}{:<6}'", ".", "format", "(", "'base'", ",", "'FN'", ",", "\n", "len", "(", "df_data_fn_tp", ".", "index", ")", ",", "\n", "len", "(", "df_data_fn_fpfn", ".", "index", ")", ",", "\n", "len", "(", "df_data_fn_fp", ".", "index", ")", ",", "\n", "len", "(", "df_data_fn_fn", ".", "index", ")", ",", "\n", "len", "(", "df_data_base_fn", ".", "index", ")", ")", ")", "\n", "print", "(", "'-------------------------------------------------'", ")", "\n", "print", "(", "'{:<5}{:>6}|{:<6}{:<6}{:<6}{:<6}{:<6}'", ".", "format", "(", "''", ",", "'Tot.'", ",", "\n", "len", "(", "df_data_coreflinker_tp", ".", "index", ")", ",", "\n", "len", "(", "df_data_coreflinker_fpfn", ".", "index", ")", ",", "\n", "len", "(", "df_data_coreflinker_fp", ".", "index", ")", ",", "\n", "len", "(", "df_data_coreflinker_fn", ".", "index", ")", ",", "\n", "''", ")", ")", "\n", "\n", "get_link_coref_distribution", "(", "[", "(", "'coreflinker tp'", ",", "df_data_coreflinker_tp", ")", ",", "\n", "(", "'coreflinker fpfn'", ",", "df_data_coreflinker_fpfn", ")", ",", "\n", "(", "'coreflinker fn'", ",", "df_data_coreflinker_fn", ")", ",", "\n", "(", "'base-cl tp tp'", ",", "df_data_tp_tp", ")", ",", "\n", "(", "'base-cl tp fpfn'", ",", "df_data_tp_fpfn", ")", ",", "\n", "(", "'base-cl tp fn'", ",", "df_data_tp_fn", ")", ",", "\n", "(", "'base-cl fpfn tp'", ",", "df_data_fpfn_tp", ")", ",", "\n", "(", "'base-cl fpfn fpfn'", ",", "df_data_fpfn_fpfn", ")", ",", "\n", "(", "'base-cl fpfn fn'", ",", "df_data_fpfn_fn", ")", ",", "\n", "(", "'base-cl fn tp'", ",", "df_data_fn_tp", ")", ",", "\n", "(", "'base-cl fn fpfn'", ",", "df_data_fn_fpfn", ")", ",", "\n", "(", "'base-cl fn fn'", ",", "df_data_fn_fn", ")", ",", "\n", "(", "'base tp'", ",", "df_data_base_tp", ")", ",", "\n", "(", "'base fpfn'", ",", "df_data_base_fpfn", ")", ",", "\n", "(", "'base fn'", ",", "df_data_base_fn", ")", "\n", "]", ")", "\n", "\n", "print", "(", "'---'", ")", "\n", "print", "(", "'LINK/Mention other distribution for coreflinker tp: '", ")", "\n", "# print('---')", "\n", "# print('LINK/Mention other distribution for coreflinker fpfn: ')", "\n", "# get_link_coref_distribution(df_data_coreflinker_fpfn)", "\n", "# print('---')", "\n", "# print('LINK/Mention other distribution for coreflinker fpfn base tp: ')", "\n", "# get_link_coref_distribution(df_data_tp_fpfn)", "\n", "\n", "print", "(", "'here to see what intersecter does'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.results.main_linker_results_analyzer.stat001_connection_type_effect_on_others": [[607, 631], ["[].count", "[].count", "print", "print", "[].count", "print", "print", "df_tp_coreflinker.groupby", "df_tp_coreflinker[].groupby", "df_tp_coreflinker[].groupby"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "stat001_connection_type_effect_on_others", "(", ")", ":", "\n", "    ", "\"\"\"\n    Stat on the effect the different connection_types (ex: 'link', 'mention_other') have in other modules.\n    For example, we may expect that for mention where coreflinker or coreflinker mtt predicted links through\n    coreference (connection_type in 'mention_other'), the baseline can have worse result.\n    :return:\n    \"\"\"", "\n", "return", "\n", "# TODO: still has to be adapted to the new code", "\n", "# df_tp_coreflinker = df_data[df_data['coreflinker_pred_type'] == 'tp']", "\n", "\n", "df_tp_pred_type_baseline", "=", "df_tp_coreflinker", ".", "groupby", "(", "[", "'baseline_linker_pred_type'", "]", ")", "[", "'baseline_linker_link'", "]", ".", "count", "(", ")", "\n", "df_tp_link_pred_type_baseline", "=", "df_tp_coreflinker", "[", "df_tp_coreflinker", "[", "'coreflinker_connection_type'", "]", "==", "'link'", "]", ".", "groupby", "(", "\n", "[", "'baseline_linker_pred_type'", "]", ")", "[", "'baseline_linker_link'", ",", "'text'", "]", ".", "count", "(", ")", "\n", "\n", "print", "(", "'distribution of pred_types for baseline for coreflinker connected with \"link\": '", ")", "\n", "print", "(", "df_tp_link_pred_type_baseline", ")", "\n", "df_tp_mention_pred_type_baseline", "=", "df_tp_coreflinker", "[", "df_tp_coreflinker", "[", "'coreflinker_connection_type'", "]", "==", "'mention_other'", "]", ".", "groupby", "(", "\n", "[", "'baseline_linker_pred_type'", "]", ")", "[", "'baseline_linker_link'", ",", "'text'", "]", ".", "count", "(", ")", "\n", "\n", "print", "(", "'distribution of pred_types for baseline for coreflinker connected with \"mention_other\": '", ")", "\n", "print", "(", "df_tp_mention_pred_type_baseline", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.results.main_linker_results_analyzer.stat002_edit_distance_comparison": [[633, 742], ["print", "print", "[].count().reset_index().rename", "[].count().reset_index().rename.sort_values", "[].count().reset_index().rename", "[].count().reset_index().rename.sort_values", "print", "print", "print", "df_cnt_conn_type_mention_other.head().iterrows", "print", "print", "print", "df_cnt_conn_type_mention_link.head().iterrows", "print", "print", "print", "df_cnt_conn_type_not_defined.head().iterrows", "print", "print", "print", "df_cnt_conn_type_mention_other_nf.head().iterrows", "print", "print", "df_cnt_conn_type_mention_link_nf.head().iterrows", "print", "print", "df_cnt_conn_type_not_defined_nf.head().iterrows", "len", "len", "print", "print", "print", "print", "print", "print", "print", "print", "print", "len", "print", "len", "print", "print", "print", "len", "[].count().reset_index", "[].count().reset_index", "df_cnt_conn_type_mention_other.head", "df_cnt_conn_type_mention_link.head", "df_cnt_conn_type_not_defined.head", "df_cnt_conn_type_mention_other_nf.head", "df_cnt_conn_type_mention_link_nf.head", "df_cnt_conn_type_not_defined_nf.head", "len", "len", "len", "len", "sum", "len", "sum", "len", "sum", "len", "sum", "len", "[].count", "[].count", "df_tp_per_model_type[].groupby", "df_tp_per_model_type[].groupby"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "stat002_edit_distance_comparison", "(", "df_tp_per_model_type", ":", "Dict", ",", "model_types", ":", "List", ")", ":", "\n", "    ", "\"\"\"\n    This stat takes all the true positives and compares the edit distance mention vs correct link for each of the\n    connection_types ; for the baseline (I think) there is a single connection_type which is '--NOT DEFINED--'\n    (see in this module)\n\n    :return:\n    \"\"\"", "\n", "print", "(", "'==================================BEGIN: stat002_edit_distance_comparison================================='", ")", "\n", "for", "curr_model_type", "in", "model_types", ":", "\n", "        ", "model_name", "=", "curr_model_type", "[", "'alias'", "]", "\n", "df_cnt_per_connection_type", "=", "df_tp_per_model_type", "[", "model_name", "]", ".", "groupby", "(", "[", "'text'", ",", "'link_gold'", ",", "'{}_connection_type'", ".", "format", "(", "model_name", ")", "]", ")", "[", "'{}_mention'", ".", "format", "(", "model_name", ")", "]", ".", "count", "(", ")", ".", "reset_index", "(", ")", ".", "rename", "(", "columns", "=", "{", "'{}_mention'", ".", "format", "(", "model_name", ")", ":", "'count'", "}", ")", "\n", "\n", "df_cnt_per_connection_type", ".", "sort_values", "(", "by", "=", "[", "'count'", "]", ",", "ascending", "=", "False", ",", "inplace", "=", "True", ")", "\n", "\n", "df_cnt_per_connection_type_nf", "=", "df_tp_per_model_type", "[", "model_name", "]", ".", "groupby", "(", "[", "'text'", ",", "'link_gold'", ",", "\n", "'{}_connection_type_not_first'", ".", "format", "(", "model_name", ")", "]", ")", "[", "\n", "'{}_mention'", ".", "format", "(", "model_name", ")", "]", ".", "count", "(", ")", ".", "reset_index", "(", ")", ".", "rename", "(", "\n", "columns", "=", "{", "'{}_mention'", ".", "format", "(", "model_name", ")", ":", "'count'", "}", ")", "\n", "\n", "df_cnt_per_connection_type_nf", ".", "sort_values", "(", "by", "=", "[", "'count'", "]", ",", "ascending", "=", "False", ",", "inplace", "=", "True", ")", "\n", "\n", "df_cnt_conn_type_mention_other", "=", "df_cnt_per_connection_type", "[", "df_cnt_per_connection_type", "[", "'{}_connection_type'", ".", "format", "(", "model_name", ")", "]", "\n", "==", "'mention_other'", "]", "\n", "\n", "df_cnt_conn_type_mention_link", "=", "df_cnt_per_connection_type", "[", "df_cnt_per_connection_type", "[", "'{}_connection_type'", ".", "format", "(", "model_name", ")", "]", "==", "'link'", "]", "\n", "\n", "df_cnt_conn_type_not_defined", "=", "df_cnt_per_connection_type", "[", "df_cnt_per_connection_type", "[", "'{}_connection_type'", ".", "format", "(", "model_name", ")", "]", "==", "\n", "'--NOT DEFINED--'", "]", "\n", "\n", "print", "(", "'----------FOR MODEL {}----------'", ".", "format", "(", "model_name", ")", ")", "\n", "print", "(", "'TOP 20 connected with mention_other (including first mentions in cluster): '", ")", "\n", "print", "(", "'{:20}{:30}{:10}'", ".", "format", "(", "'Mention'", ",", "'Link'", ",", "'Count'", ")", ")", "\n", "for", "index", ",", "row_men_other", "in", "df_cnt_conn_type_mention_other", ".", "head", "(", "10", ")", ".", "iterrows", "(", ")", ":", "\n", "            ", "print", "(", "'{:.<20}{:.<30}{:<10}'", ".", "format", "(", "row_men_other", "[", "'text'", "]", ",", "row_men_other", "[", "'link_gold'", "]", ",", "\n", "row_men_other", "[", "'count'", "]", ")", ")", "\n", "", "print", "(", ")", "\n", "print", "(", "'TOP 20 connected with link (including first mentions in cluster): '", ")", "\n", "print", "(", "'{:20}{:30}{:10}'", ".", "format", "(", "'Mention'", ",", "'Link'", ",", "'Count'", ")", ")", "\n", "for", "index", ",", "row_men_other", "in", "df_cnt_conn_type_mention_link", ".", "head", "(", "10", ")", ".", "iterrows", "(", ")", ":", "\n", "            ", "print", "(", "'{:.<20}{:.<30}{:<10}'", ".", "format", "(", "row_men_other", "[", "'text'", "]", ",", "row_men_other", "[", "'link_gold'", "]", ",", "\n", "row_men_other", "[", "'count'", "]", ")", ")", "\n", "", "print", "(", ")", "\n", "print", "(", "'TOP 20 connected with not defined (including first mentions in cluster): '", ")", "\n", "print", "(", "'{:20}{:30}{:10}'", ".", "format", "(", "'Mention'", ",", "'Link'", ",", "'Count'", ")", ")", "\n", "for", "index", ",", "row_men_other", "in", "df_cnt_conn_type_not_defined", ".", "head", "(", "10", ")", ".", "iterrows", "(", ")", ":", "\n", "            ", "print", "(", "'{:.<20}{:.<30}{:<10}'", ".", "format", "(", "row_men_other", "[", "'text'", "]", ",", "row_men_other", "[", "'link_gold'", "]", ",", "\n", "row_men_other", "[", "'count'", "]", ")", ")", "\n", "\n", "", "df_cnt_conn_type_mention_other_nf", "=", "df_cnt_per_connection_type_nf", "[", "\n", "df_cnt_per_connection_type_nf", "[", "'{}_connection_type_not_first'", ".", "format", "(", "model_name", ")", "]", "==", "'mention_other'", "]", "\n", "\n", "df_cnt_conn_type_mention_link_nf", "=", "df_cnt_per_connection_type_nf", "[", "\n", "df_cnt_per_connection_type_nf", "[", "'{}_connection_type_not_first'", ".", "format", "(", "model_name", ")", "]", "==", "'link'", "]", "\n", "\n", "df_cnt_conn_type_not_defined_nf", "=", "df_cnt_per_connection_type_nf", "[", "\n", "df_cnt_per_connection_type_nf", "[", "'{}_connection_type_not_first'", ".", "format", "(", "model_name", ")", "]", "==", "'--NOT DEFINED--'", "]", "\n", "\n", "print", "(", ")", "\n", "print", "(", "'----'", ")", "\n", "print", "(", "'TOP 20 connected with mention_other (excluding first mentions in cluster): '", ")", "\n", "for", "index", ",", "row_men_other", "in", "df_cnt_conn_type_mention_other_nf", ".", "head", "(", "10", ")", ".", "iterrows", "(", ")", ":", "\n", "            ", "print", "(", "'{:.<20}{:.<30}{:<10}'", ".", "format", "(", "row_men_other", "[", "'text'", "]", ",", "row_men_other", "[", "'link_gold'", "]", ",", "\n", "row_men_other", "[", "'count'", "]", ")", ")", "\n", "", "print", "(", ")", "\n", "print", "(", "'TOP 20 connected with link (excluding first mentions in cluster): '", ")", "\n", "for", "index", ",", "row_men_other", "in", "df_cnt_conn_type_mention_link_nf", ".", "head", "(", "10", ")", ".", "iterrows", "(", ")", ":", "\n", "            ", "print", "(", "'{:.<20}{:.<30}{:<10}'", ".", "format", "(", "row_men_other", "[", "'text'", "]", ",", "row_men_other", "[", "'link_gold'", "]", ",", "\n", "row_men_other", "[", "'count'", "]", ")", ")", "\n", "\n", "", "print", "(", ")", "\n", "print", "(", "'TOP 20 connected with not defined (excluding first mentions in cluster): '", ")", "\n", "for", "index", ",", "row_men_other", "in", "df_cnt_conn_type_not_defined_nf", ".", "head", "(", "10", ")", ".", "iterrows", "(", ")", ":", "\n", "            ", "print", "(", "'{:.<20}{:.<30}{:<10}'", ".", "format", "(", "row_men_other", "[", "'text'", "]", ",", "row_men_other", "[", "'link_gold'", "]", ",", "\n", "row_men_other", "[", "'count'", "]", ")", ")", "\n", "\n", "", "if", "len", "(", "edit_distances_mention_other", "[", "model_name", "]", ")", ">", "0", ":", "\n", "            ", "print", "(", "'# and avg edit distances mention_other (including first mentions in cluster): '", ",", "\n", "len", "(", "edit_distances_mention_other", "[", "model_name", "]", ")", ",", "' ----- '", ",", "\n", "sum", "(", "edit_distances_mention_other", "[", "model_name", "]", ")", "/", "len", "(", "edit_distances_mention_other", "[", "model_name", "]", ")", ")", "\n", "\n", "", "if", "len", "(", "edit_distances_link", "[", "model_name", "]", ")", ">", "0", ":", "\n", "            ", "print", "(", "'# and avg edit distances link (including first mentions in cluster): '", ",", "\n", "len", "(", "edit_distances_link", "[", "model_name", "]", ")", ",", "' ----- '", ",", "\n", "sum", "(", "edit_distances_link", "[", "model_name", "]", ")", "/", "len", "(", "edit_distances_link", "[", "model_name", "]", ")", ")", "\n", "\n", "", "if", "len", "(", "edit_distances_mention_other_nf", "[", "model_name", "]", ")", ":", "\n", "            ", "print", "(", "'# and avg edit distances mention_other (excluding first mentions in cluster): '", ",", "\n", "len", "(", "edit_distances_mention_other_nf", "[", "model_name", "]", ")", ",", "' ----- '", ",", "\n", "sum", "(", "edit_distances_mention_other_nf", "[", "model_name", "]", ")", "/", "len", "(", "edit_distances_mention_other_nf", "[", "model_name", "]", ")", ")", "\n", "\n", "", "if", "len", "(", "edit_distances_link_nf", "[", "model_name", "]", ")", ":", "\n", "            ", "print", "(", "'# and avg edit distances link (excluding first mentions in cluster): '", ",", "\n", "len", "(", "edit_distances_link_nf", "[", "model_name", "]", ")", ",", "' ----- '", ",", "\n", "sum", "(", "edit_distances_link_nf", "[", "model_name", "]", ")", "/", "len", "(", "edit_distances_link_nf", "[", "model_name", "]", ")", ")", "\n", "\n", "", "print", "(", "'most common mention prev (mention-link-nr times): '", ")", "\n", "print", "(", "'most common link (mention-link-nr times): '", ")", "\n", "print", "(", "'total number of true positives: '", ",", "len", "(", "df_tp_per_model_type", "[", "model_name", "]", ".", "index", ")", ")", "\n", "", "print", "(", "'===================================END: stat002_edit_distance_comparison==================================='", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.results.main_linker_results_analyzer.plot_data": [[744, 808], ["matplotlib.subplots", "ax.yaxis.set_major_locator", "enumerate", "ax.set_ylabel", "ax.set_xlabel", "fig.subplots_adjust", "matplotlib.get_current_fig_manager", "plt.get_current_fig_manager.window.showMaximized", "matplotlib.xticks", "matplotlib.show", "df_frame_to_plot.tail.head", "matplotlib.ticker.MaxNLocator", "ax.set_xscale", "ax.set_xticks", "ax.set_yticks", "df_frame_to_plot.tail.tail", "df_frame_to_plot.tail.plot.bar", "bar.get_height", "matplotlib.text", "df_frame_to_plot.tail.plot", "list", "list", "enumerate", "zip", "ax.text", "bar.get_height", "matplotlib.text", "bar.get_x", "len", "len", "len", "bar.get_x", "len"], "function", ["None"], ["", "def", "plot_data", "(", "df_frame_to_plot", ":", "pd", ".", "DataFrame", ",", "title_plot", ":", "str", ",", "fields_to_plot", ":", "list", ",", "label_fields", ":", "list", ",", "\n", "color_fields", ":", "list", ",", "x_field", ":", "str", ",", "x_axis", ":", "str", "=", "''", ",", "y_axis", ":", "str", "=", "''", ",", "\n", "top_rows", "=", "-", "1", ",", "is_head", "=", "False", ",", "is_tail", "=", "False", ",", "type_plot", "=", "'bar'", ",", "x_ticks", "=", "None", ",", "y_ticks", "=", "None", ",", "\n", "x_scale", "=", "None", ")", ":", "\n", "    ", "line_markers", "=", "[", "'o'", ",", "'x'", ",", "'2'", ",", "'*'", ",", "'p'", ",", "'.'", "]", "\n", "if", "is_head", ":", "\n", "        ", "df_frame_to_plot", "=", "df_frame_to_plot", ".", "head", "(", "top_rows", ")", "\n", "", "elif", "is_tail", ":", "\n", "        ", "df_frame_to_plot", "=", "df_frame_to_plot", ".", "tail", "(", "top_rows", ")", "\n", "\n", "", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "1", ",", "figsize", "=", "(", "20", ",", "6", ")", ")", "\n", "ax", ".", "yaxis", ".", "set_major_locator", "(", "MaxNLocator", "(", "integer", "=", "True", ")", ")", "\n", "\n", "max_field_value", "=", "0", "\n", "for", "field", "in", "fields_to_plot", ":", "\n", "        ", "curr_field", "=", "df_frame_to_plot", ".", "iloc", "[", "0", "]", "[", "field", "]", "\n", "if", "curr_field", ">", "max_field_value", ":", "\n", "            ", "max_field_value", "=", "curr_field", "\n", "\n", "", "", "for", "idx", ",", "field", "in", "enumerate", "(", "fields_to_plot", ")", ":", "\n", "        ", "label", "=", "label_fields", "[", "idx", "]", "\n", "color", "=", "color_fields", "[", "idx", "]", "\n", "if", "type_plot", "==", "'bar'", ":", "\n", "            ", "bars", "=", "df_frame_to_plot", ".", "plot", ".", "bar", "(", "ax", "=", "ax", ",", "x", "=", "x_field", ",", "y", "=", "field", ",", "\n", "color", "=", "color", ",", "label", "=", "label", ",", "\n", "title", "=", "title_plot", ")", "\n", "for", "bar", "in", "bars", ".", "patches", ":", "\n", "                ", "yval", "=", "bar", ".", "get_height", "(", ")", "\n", "plt", ".", "text", "(", "bar", ".", "get_x", "(", ")", "-", "len", "(", "df_frame_to_plot", ".", "index", ")", "*", "0.002", ",", "\n", "yval", "+", "(", "max_field_value", ")", "*", "0.005", ",", "yval", ")", "\n", "", "", "elif", "type_plot", "==", "'line'", ":", "\n", "            ", "bars", "=", "df_frame_to_plot", ".", "plot", "(", "ax", "=", "ax", ",", "x", "=", "x_field", ",", "y", "=", "field", ",", "\n", "color", "=", "color", ",", "label", "=", "label", ",", "\n", "title", "=", "title_plot", ",", "marker", "=", "line_markers", "[", "idx", "]", ")", "\n", "x_field_vals", "=", "list", "(", "df_frame_to_plot", "[", "x_field", "]", ")", "\n", "y_field_vals", "=", "list", "(", "df_frame_to_plot", "[", "field", "]", ")", "\n", "if", "x_ticks", "is", "not", "None", ":", "\n", "                ", "while", "len", "(", "x_field_vals", ")", ">", "len", "(", "x_ticks", ")", ":", "\n", "                    ", "x_field_vals", "=", "x_field_vals", "[", ":", ":", "2", "]", "\n", "y_field_vals", "=", "y_field_vals", "[", ":", ":", "2", "]", "\n", "\n", "", "", "for", "idx", ",", "(", "x_point", ",", "y_point", ")", "in", "enumerate", "(", "zip", "(", "*", "[", "x_field_vals", ",", "y_field_vals", "]", ")", ")", ":", "\n", "                ", "ax", ".", "text", "(", "x_point", ",", "y_point", "+", "0.01", ",", "'{:.2f}'", ".", "format", "(", "y_point", ")", ")", "\n", "", "for", "bar", "in", "bars", ".", "patches", ":", "\n", "                ", "yval", "=", "bar", ".", "get_height", "(", ")", "\n", "plt", ".", "text", "(", "bar", ".", "get_x", "(", ")", "-", "len", "(", "df_frame_to_plot", ".", "index", ")", "*", "0.002", ",", "\n", "yval", "+", "(", "max_field_value", ")", "*", "0.005", ",", "yval", ")", "\n", "", "", "", "ax", ".", "set_ylabel", "(", "y_axis", ")", "\n", "ax", ".", "set_xlabel", "(", "x_axis", ")", "\n", "# ax.set_xscale('symlog')", "\n", "if", "x_scale", "is", "not", "None", ":", "\n", "        ", "ax", ".", "set_xscale", "(", "x_scale", ")", "\n", "\n", "", "if", "x_ticks", "is", "not", "None", ":", "\n", "        ", "ax", ".", "set_xticks", "(", "x_ticks", ")", "\n", "", "if", "y_ticks", "is", "not", "None", ":", "\n", "        ", "ax", ".", "set_yticks", "(", "y_ticks", ")", "\n", "# df_links.plot.bar(ax=ax, x='links', y='nr_links', title='Nr of keyword appearances')", "\n", "", "fig", ".", "subplots_adjust", "(", "bottom", "=", "0.3", ")", "\n", "mng", "=", "plt", ".", "get_current_fig_manager", "(", ")", "\n", "# mng.frame.Maximize(True)", "\n", "mng", ".", "window", ".", "showMaximized", "(", ")", "\n", "plt", ".", "xticks", "(", "rotation", "=", "90", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.stats_dataset.aida_reannotated_stats.load_raw_file": [[6, 14], ["dict", "open", "json.loads"], "function", ["None"], ["def", "load_raw_file", "(", "aida_paths", ")", ":", "\n", "    ", "aida_id_to_raw_doc", "=", "dict", "(", ")", "\n", "for", "curr_aida_path", "in", "aida_paths", ":", "\n", "        ", "with", "open", "(", "curr_aida_path", ",", "'rt'", ")", "as", "infile", ":", "\n", "            ", "for", "curr_line", "in", "infile", ":", "\n", "                ", "curr_line_json", "=", "json", ".", "loads", "(", "curr_line", ")", "\n", "aida_id_to_raw_doc", "[", "curr_line_json", "[", "'id'", "]", "]", "=", "curr_line_json", "\n", "", "", "", "return", "aida_id_to_raw_doc", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.stats_dataset.aida_reannotated_stats.load_raw_dir_path": [[16, 25], ["dict", "os.walk", "curr_file_name.endswith", "json.load", "open", "os.path.join"], "function", ["None"], ["", "def", "load_raw_dir_path", "(", "aida_path", ")", ":", "\n", "    ", "aida_id_to_raw_doc", "=", "dict", "(", ")", "\n", "for", "(", "dirpath", ",", "dirnames", ",", "filenames", ")", "in", "os", ".", "walk", "(", "aida_path", ")", ":", "\n", "        ", "curr_file_name", ":", "str", "=", "None", "\n", "for", "curr_file_name", "in", "filenames", ":", "\n", "            ", "if", "curr_file_name", ".", "endswith", "(", "'.json'", ")", ":", "\n", "                ", "loaded_raw_json", "=", "json", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "dirpath", ",", "curr_file_name", ")", ",", "'rt'", ")", ")", "\n", "aida_id_to_raw_doc", "[", "loaded_raw_json", "[", "'id'", "]", "]", "=", "loaded_raw_json", "\n", "", "", "", "return", "aida_id_to_raw_doc", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.stats_dataset.aida_reannotated_stats.get_stats_doc": [[27, 51], ["set", "curr_mention_cluster[].lower", "set.add", "set.add"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add"], ["", "def", "get_stats_doc", "(", "parsed_doc", ")", ":", "\n", "    ", "nr_linked_mentions", "=", "0", "\n", "nr_nil_mentions", "=", "0", "\n", "nr_nil_clusters", "=", "0", "\n", "nr_not_nil_clusters", "=", "0", "\n", "processed_clusters", "=", "set", "(", ")", "\n", "for", "curr_mention", "in", "parsed_doc", "[", "'mentions'", "]", ":", "\n", "        ", "mention_concept_id", "=", "curr_mention", "[", "'concept'", "]", "\n", "curr_mention_cluster", "=", "parsed_doc", "[", "'concepts'", "]", "[", "mention_concept_id", "]", "\n", "if", "'link'", "in", "curr_mention_cluster", "and", "curr_mention_cluster", "[", "'link'", "]", "is", "not", "None", "and", "curr_mention_cluster", "[", "'link'", "]", ".", "lower", "(", ")", "!=", "'nill'", ":", "\n", "            ", "if", "mention_concept_id", "not", "in", "processed_clusters", ":", "\n", "                ", "nr_not_nil_clusters", "+=", "1", "\n", "processed_clusters", ".", "add", "(", "mention_concept_id", ")", "\n", "", "nr_linked_mentions", "+=", "1", "\n", "", "else", ":", "\n", "            ", "if", "mention_concept_id", "not", "in", "processed_clusters", ":", "\n", "                ", "nr_nil_clusters", "+=", "1", "\n", "processed_clusters", ".", "add", "(", "mention_concept_id", ")", "\n", "", "nr_nil_mentions", "+=", "1", "\n", "", "", "return", "{", "'nr_linked_mentions'", ":", "nr_linked_mentions", ",", "\n", "'nr_nil_mentions'", ":", "nr_nil_mentions", ",", "\n", "'nr_linked_clusters'", ":", "nr_not_nil_clusters", ",", "\n", "'nr_nil_clusters'", ":", "nr_nil_clusters", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.stats_dataset.aida_reannotated_stats.get_stats_from_raw": [[54, 81], ["dict", "dict", "dict", "dict", "parsed.items", "print", "aida_reannotated_stats.get_stats_doc"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.stats_dataset.aida_reannotated_stats.get_stats_doc"], ["", "def", "get_stats_from_raw", "(", "to_get_stats", ")", ":", "\n", "    ", "nr_linked_mentions", "=", "dict", "(", ")", "\n", "nr_nil_mentions", "=", "dict", "(", ")", "\n", "nr_linked_clusters", "=", "dict", "(", ")", "\n", "nr_nil_clusters", "=", "dict", "(", ")", "\n", "\n", "for", "curr_dataset", "in", "to_get_stats", ":", "\n", "        ", "dataset_tag", "=", "curr_dataset", "[", "'tag'", "]", "\n", "parsed", "=", "curr_dataset", "[", "'parsed'", "]", "\n", "nr_linked_mentions", "[", "dataset_tag", "]", "=", "0", "\n", "nr_nil_mentions", "[", "dataset_tag", "]", "=", "0", "\n", "nr_linked_clusters", "[", "dataset_tag", "]", "=", "0", "\n", "nr_nil_clusters", "[", "dataset_tag", "]", "=", "0", "\n", "\n", "for", "curr_doc_id", ",", "curr_doc", "in", "parsed", ".", "items", "(", ")", ":", "\n", "            ", "curr_doc_stats", "=", "get_stats_doc", "(", "curr_doc", ")", "\n", "nr_linked_mentions", "[", "dataset_tag", "]", "+=", "curr_doc_stats", "[", "'nr_linked_mentions'", "]", "\n", "nr_nil_mentions", "[", "dataset_tag", "]", "+=", "curr_doc_stats", "[", "'nr_nil_mentions'", "]", "\n", "nr_linked_clusters", "[", "dataset_tag", "]", "+=", "curr_doc_stats", "[", "'nr_linked_clusters'", "]", "\n", "nr_nil_clusters", "[", "dataset_tag", "]", "+=", "curr_doc_stats", "[", "'nr_nil_clusters'", "]", "\n", "\n", "# prints in latex format", "\n", "", "print", "(", "'\\t {} & {:,} & {:,} & {:,} & {:,} \\\\\\\\ '", ".", "format", "(", "dataset_tag", ",", "\n", "nr_linked_clusters", "[", "dataset_tag", "]", ",", "\n", "nr_nil_clusters", "[", "dataset_tag", "]", ",", "\n", "nr_linked_mentions", "[", "dataset_tag", "]", ",", "\n", "nr_nil_mentions", "[", "dataset_tag", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.stats_dataset.dwie_mtt_simulator.plot_coverage_size": [[10, 12], ["None"], "function", ["None"], ["def", "plot_coverage_size", "(", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.stats_dataset.dwie_check_empty_concept_tags.is_associated_relation": [[5, 10], ["None"], "function", ["None"], ["def", "is_associated_relation", "(", "concept_id", ",", "relations", ")", ":", "\n", "    ", "for", "curr_relation", "in", "relations", ":", "\n", "        ", "if", "curr_relation", "[", "'s'", "]", "==", "concept_id", "or", "curr_relation", "[", "'o'", "]", "==", "concept_id", ":", "\n", "            ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.stats_dataset.dwie_check_empty_concept_tags.is_associated_tags_mentions": [[12, 18], ["len"], "function", ["None"], ["", "def", "is_associated_tags_mentions", "(", "concept_id", ",", "mentions", ")", ":", "\n", "    ", "allzero", "=", "True", "\n", "for", "curr_mention", "in", "mentions", ":", "\n", "        ", "if", "curr_mention", "[", "'concept'", "]", "==", "concept_id", "and", "len", "(", "curr_mention", "[", "'tags'", "]", ")", ">", "0", ":", "\n", "            ", "allzero", "=", "False", "\n", "", "", "return", "allzero", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.corefx.MetricCorefExternal.__init__": [[7, 12], ["corefx.MetricCorefExternal.clear"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricF1.clear"], ["    ", "def", "__init__", "(", "self", ",", "task", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "self", ".", "task", "=", "task", "\n", "self", ".", "debug", "=", "False", "\n", "self", ".", "iter", "=", "0", "\n", "self", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.corefx.MetricCorefExternal.clear": [[13, 17], ["external.python_cpn_eval.MetricCoref", "external.python_cpn_eval.MetricCoref", "external.python_cpn_eval.MetricCoref"], "methods", ["None"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "coref_muc", "=", "MetricCoref", "(", "'muc'", ",", "MetricCoref", ".", "muc", ")", "\n", "self", ".", "coref_bcubed_singleton_men", "=", "MetricCoref", "(", "'bcubed-m'", ",", "MetricCoref", ".", "b_cubed_singleton_mentions", ")", "\n", "self", ".", "coref_ceafe_singleton_ent", "=", "MetricCoref", "(", "'ceaf-e'", ",", "MetricCoref", ".", "ceafe_singleton_entities", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.corefx.MetricCorefExternal.step": [[18, 21], ["corefx.MetricCorefExternal.clear"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricF1.clear"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "self", ".", "clear", "(", ")", "\n", "self", ".", "iter", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.corefx.MetricCorefExternal.update2": [[22, 42], ["enumerate", "zip", "corefx.MetricCorefExternal.coref_muc.add", "corefx.MetricCorefExternal.coref_bcubed_singleton_men.add", "corefx.MetricCorefExternal.coref_ceafe_singleton_ent.add", "corefx.MetricCorefExternal.print"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "update2", "(", "self", ",", "output_dict", ",", "metadata", ")", ":", "\n", "        ", "for", "idx", ",", "(", "pred", ",", "gold", ")", "in", "enumerate", "(", "zip", "(", "output_dict", "[", "'pred'", "]", ",", "output_dict", "[", "'gold'", "]", ")", ")", ":", "\n", "# print(\"pred:\", len(pred), pred)", "\n", "# print(\"gold:\", len(gold), gold)", "\n", "            ", "self", ".", "coref_muc", ".", "add", "(", "pred", ",", "gold", ")", "\n", "# self.coref_bcubed.add(pred, gold)", "\n", "self", ".", "coref_bcubed_singleton_men", ".", "add", "(", "pred", ",", "gold", ")", "\n", "# self.coref_bcubed_singleton_ent.add(pred, gold)", "\n", "# self.coref_ceafe.add(pred, gold)", "\n", "# self.coref_ceafe_singleton_men.add(pred, gold)", "\n", "self", ".", "coref_ceafe_singleton_ent", ".", "add", "(", "pred", ",", "gold", ")", "\n", "\n", "if", "self", ".", "debug", ":", "\n", "                ", "print", "(", "\"ID\"", ",", "metadata", "[", "'identifiers'", "]", "[", "idx", "]", ")", "\n", "print", "(", "\"pred:\"", ",", "pred", ")", "\n", "print", "(", "\"gold:\"", ",", "gold", ")", "\n", "tokens", "=", "metadata", "[", "'tokens'", "]", "[", "idx", "]", "\n", "print", "(", "\"pred:\"", ",", "[", "[", "' '", ".", "join", "(", "tokens", "[", "begin", ":", "(", "end", "+", "1", ")", "]", ")", "for", "begin", ",", "end", "in", "cluster", "]", "for", "cluster", "in", "pred", "]", ")", "\n", "print", "(", "\"gold:\"", ",", "[", "[", "' '", ".", "join", "(", "tokens", "[", "begin", ":", "(", "end", "+", "1", ")", "]", ")", "for", "begin", ",", "end", "in", "cluster", "]", "for", "cluster", "in", "gold", "]", ")", "\n", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.corefx.MetricCorefExternal.print": [[43, 53], ["corefx.MetricCorefExternal.print"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "", "", "def", "print", "(", "self", ",", "dataset_name", ",", "details", "=", "False", ")", ":", "\n", "        ", "print", "(", "'EVAL-COREF\\t{}-{}\\tcurr-iter: {}\\t{}-f1: {}'", ".", "format", "(", "dataset_name", ",", "self", ".", "task", ",", "self", ".", "iter", ",", "\"muc-ext\"", ",", "\n", "self", ".", "coref_muc", ".", "get_f1", "(", ")", ")", ")", "\n", "print", "(", "'EVAL-COREF\\t{}-{}\\tcurr-iter: {}\\t{}-f1: {}'", ".", "format", "(", "dataset_name", ",", "self", ".", "task", ",", "self", ".", "iter", ",", "\"bcubed-m-ext\"", ",", "\n", "self", ".", "coref_bcubed_singleton_men", ".", "get_f1", "(", ")", ")", ")", "\n", "print", "(", "'EVAL-COREF\\t{}-{}\\tcurr-iter: {}\\t{}-f1: {}'", ".", "format", "(", "dataset_name", ",", "self", ".", "task", ",", "self", ".", "iter", ",", "\"ceaf-e-ext\"", ",", "\n", "self", ".", "coref_ceafe_singleton_ent", ".", "get_f1", "(", ")", ")", ")", "\n", "tmp", "=", "(", "\n", "self", ".", "coref_muc", ".", "get_f1", "(", ")", "+", "self", ".", "coref_bcubed_singleton_men", ".", "get_f1", "(", ")", "+", "self", ".", "coref_ceafe_singleton_ent", ".", "get_f1", "(", ")", ")", "/", "3", "\n", "print", "(", "'EVAL-COREF\\t{}-{}\\tcurr-iter: {}\\t{}-f1: {}'", ".", "format", "(", "dataset_name", ",", "self", ".", "task", ",", "self", ".", "iter", ",", "\"avg-ext\"", ",", "tmp", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.corefx.MetricCorefExternal.log": [[54, 85], ["tb_logger.log_value", "tb_logger.log_value", "tb_logger.log_value", "tb_logger.log_value", "tb_logger.log_value", "tb_logger.log_value", "tb_logger.log_value", "tb_logger.log_value", "tb_logger.log_value", "tb_logger.log_value", "tb_logger.log_value", "tb_logger.log_value", "tb_logger.log_value", "corefx.MetricCorefExternal.coref_muc.get_f1", "corefx.MetricCorefExternal.coref_bcubed_singleton_men.get_f1", "corefx.MetricCorefExternal.coref_ceafe_singleton_ent.get_f1", "corefx.MetricCorefExternal.coref_muc.get_pr", "corefx.MetricCorefExternal.coref_bcubed_singleton_men.get_pr", "corefx.MetricCorefExternal.coref_ceafe_singleton_ent.get_pr", "corefx.MetricCorefExternal.coref_muc.get_re", "corefx.MetricCorefExternal.coref_bcubed_singleton_men.get_re", "corefx.MetricCorefExternal.coref_ceafe_singleton_ent.get_re", "corefx.MetricCorefExternal.coref_ceafe_singleton_ent.get_f1", "corefx.MetricCorefExternal.coref_ceafe_singleton_ent.get_pr", "corefx.MetricCorefExternal.coref_ceafe_singleton_ent.get_re", "corefx.MetricCorefExternal.coref_muc.get_f1", "corefx.MetricCorefExternal.coref_bcubed_singleton_men.get_f1", "corefx.MetricCorefExternal.coref_muc.get_pr", "corefx.MetricCorefExternal.coref_bcubed_singleton_men.get_pr", "corefx.MetricCorefExternal.coref_muc.get_re", "corefx.MetricCorefExternal.coref_bcubed_singleton_men.get_re"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCorefAverage.get_f1", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCorefAverage.get_f1", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCorefAverage.get_f1", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.get_pr", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.get_pr", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.get_pr", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.get_re", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.get_re", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.get_re", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCorefAverage.get_f1", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.get_pr", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.get_re", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCorefAverage.get_f1", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCorefAverage.get_f1", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.get_pr", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.get_pr", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.get_re", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.get_re"], ["", "def", "log", "(", "self", ",", "tb_logger", ",", "dataset_name", ")", ":", "\n", "# (kzaporoj) - log to tensorboard", "\n", "        ", "tb_logger", ".", "log_value", "(", "'metrics-coref-ext/{}-f1'", ".", "format", "(", "'muc-ext'", ")", ",", "self", ".", "coref_muc", ".", "get_f1", "(", ")", ",", "self", ".", "iter", ")", "\n", "tb_logger", ".", "log_value", "(", "'metrics-coref-ext/{}-f1'", ".", "format", "(", "'bcubed-m-ext'", ")", ",", "\n", "self", ".", "coref_bcubed_singleton_men", ".", "get_f1", "(", ")", ",", "self", ".", "iter", ")", "\n", "tb_logger", ".", "log_value", "(", "'metrics-coref-ext/{}-f1'", ".", "format", "(", "'ceaf-e-ext'", ")", ",", "self", ".", "coref_ceafe_singleton_ent", ".", "get_f1", "(", ")", ",", "\n", "self", ".", "iter", ")", "\n", "tmp", "=", "(", "self", ".", "coref_muc", ".", "get_f1", "(", ")", "+", "self", ".", "coref_bcubed_singleton_men", ".", "get_f1", "(", ")", "+", "\n", "self", ".", "coref_ceafe_singleton_ent", ".", "get_f1", "(", ")", ")", "/", "3", "\n", "tb_logger", ".", "log_value", "(", "'metrics-coref-ext/{}-f1'", ".", "format", "(", "'avg-ext'", ")", ",", "tmp", ",", "self", ".", "iter", ")", "\n", "\n", "# precision", "\n", "\n", "tb_logger", ".", "log_value", "(", "'metrics-coref-ext/{}-pr'", ".", "format", "(", "'muc-ext'", ")", ",", "self", ".", "coref_muc", ".", "get_pr", "(", ")", ",", "self", ".", "iter", ")", "\n", "tb_logger", ".", "log_value", "(", "'metrics-coref-ext/{}-pr'", ".", "format", "(", "'bcubed-m-ext'", ")", ",", "\n", "self", ".", "coref_bcubed_singleton_men", ".", "get_pr", "(", ")", ",", "self", ".", "iter", ")", "\n", "tb_logger", ".", "log_value", "(", "'metrics-coref-ext/{}-pr'", ".", "format", "(", "'ceaf-e-ext'", ")", ",", "self", ".", "coref_ceafe_singleton_ent", ".", "get_pr", "(", ")", ",", "\n", "self", ".", "iter", ")", "\n", "tmp", "=", "(", "self", ".", "coref_muc", ".", "get_pr", "(", ")", "+", "self", ".", "coref_bcubed_singleton_men", ".", "get_pr", "(", ")", "+", "\n", "self", ".", "coref_ceafe_singleton_ent", ".", "get_pr", "(", ")", ")", "/", "3", "\n", "tb_logger", ".", "log_value", "(", "'metrics-coref-ext/{}-pr'", ".", "format", "(", "'avg-ext'", ")", ",", "tmp", ",", "self", ".", "iter", ")", "\n", "# recall", "\n", "tb_logger", ".", "log_value", "(", "'metrics-coref-ext/{}-re'", ".", "format", "(", "'avg-ext'", ")", ",", "tmp", ",", "self", ".", "iter", ")", "\n", "tb_logger", ".", "log_value", "(", "'metrics-coref-ext/{}-re'", ".", "format", "(", "'muc-ext'", ")", ",", "self", ".", "coref_muc", ".", "get_re", "(", ")", ",", "self", ".", "iter", ")", "\n", "tb_logger", ".", "log_value", "(", "'metrics-coref-ext/{}-re'", ".", "format", "(", "'bcubed-m-ext'", ")", ",", "\n", "self", ".", "coref_bcubed_singleton_men", ".", "get_re", "(", ")", ",", "self", ".", "iter", ")", "\n", "tb_logger", ".", "log_value", "(", "'metrics-coref-ext/{}-re'", ".", "format", "(", "'ceaf-e-ext'", ")", ",", "self", ".", "coref_ceafe_singleton_ent", ".", "get_re", "(", ")", ",", "\n", "self", ".", "iter", ")", "\n", "tmp", "=", "(", "self", ".", "coref_muc", ".", "get_re", "(", ")", "+", "self", ".", "coref_bcubed_singleton_men", ".", "get_re", "(", ")", "+", "\n", "self", ".", "coref_ceafe_singleton_ent", ".", "get_re", "(", ")", ")", "/", "3", "\n", "tb_logger", ".", "log_value", "(", "'metrics-coref-ext/{}-re'", ".", "format", "(", "'avg-ext'", ")", ",", "tmp", ",", "self", ".", "iter", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.linker.MetricLinker.__init__": [[6, 11], ["util.evaluator.EvaluatorLinker"], "methods", ["None"], ["\n", "from", "data", ".", "dictionary", "import", "Dictionary", "\n", "from", "models", "import", "model_create", "\n", "\n", "\n", "def", "load_dictionary", "(", "config", ",", "path", ")", ":", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.linker.MetricLinker.step": [[12, 15], ["None"], "methods", ["None"], ["    ", "type", "=", "config", "[", "'type'", "]", "\n", "filename", "=", "config", "[", "'filename'", "]", "\n", "filename", "=", "filename", "if", "filename", ".", "startswith", "(", "\"/\"", ")", "else", "\"{}/{}\"", ".", "format", "(", "path", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.linker.MetricLinker.update2": [[16, 18], ["linker.MetricLinker.evaluator.update"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.update"], ["if", "type", "==", "'word2vec'", ":", "\n", "        ", "print", "(", "\"init {} with {}\"", ".", "format", "(", "path", ",", "filename", ")", ")", "\n", "dictionary", "=", "Dictionary", "(", "filename", ")", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.linker.MetricLinker.print": [[19, 21], ["linker.MetricLinker.evaluator.evaluate"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.evaluator.EvaluatorLinker.evaluate"], ["", "elif", "type", "==", "'spirit'", ":", "\n", "        ", "dictionary", "=", "Dictionary", "(", ")", "\n", "dictionary", ".", "load_spirit_dictionary", "(", "filename", ",", "config", "[", "'threshold'", "]", ")", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.linker.MetricLinker.log": [[22, 24], ["linker.MetricLinker.print"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "elif", "type", "==", "'vocab'", ":", "\n", "        ", "dictionary", "=", "Dictionary", "(", ")", "\n", "dictionary", ".", "load_wordpiece_vocab", "(", "filename", ")", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.linker.MetricLinkerImproved.__init__": [[36, 52], ["None"], "methods", ["None"], ["", "def", "create_linking_candidates", "(", "config", ",", "entity_dictionary", ":", "Dictionary", ")", ":", "\n", "# print('STARTING LOADING LINKING CANDIDATES')", "\n", "    ", "candidates_path", "=", "config", "[", "'file'", "]", "\n", "max_link_candidates", "=", "config", "[", "'max_link_candidates'", "]", "\n", "span_text_to_candidates", "=", "dict", "(", ")", "\n", "for", "curr_line", "in", "open", "(", "candidates_path", ")", ":", "\n", "        ", "curr_span_candidates", "=", "json", ".", "loads", "(", "curr_line", ")", "\n", "span_text", "=", "curr_span_candidates", "[", "'text'", "]", ".", "strip", "(", ")", "# TODO: makes sense lowercasing, or will make it worse???", "\n", "span_candidates", "=", "curr_span_candidates", "[", "'candidates'", "]", "\n", "span_scores", "=", "curr_span_candidates", "[", "'scores'", "]", "\n", "# candidates should come sorted by score, but just in case sorts again", "\n", "sorted_candidates", "=", "sorted", "(", "zip", "(", "span_candidates", ",", "span_scores", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "if", "max_link_candidates", ">", "-", "1", ":", "\n", "            ", "sorted_candidates", "=", "sorted_candidates", "[", ":", "max_link_candidates", "]", "\n", "\n", "", "span_text_to_candidates", "[", "span_text", "]", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.linker.MetricLinkerImproved.step": [[53, 58], ["None"], "methods", ["None"], ["scores_list", "=", "list", "(", ")", "\n", "candidates_list", "=", "list", "(", ")", "\n", "for", "curr_candidate", ",", "curr_score", "in", "sorted_candidates", ":", "\n", "            ", "candidates_list", ".", "append", "(", "entity_dictionary", ".", "add", "(", "curr_candidate", ")", ")", "\n", "scores_list", ".", "append", "(", "curr_score", ")", "\n", "# passes to torch.tensor in order to decrease the memory footprint - the lists consume too much memory in python", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.linker.MetricLinkerImproved.update2": [[59, 76], ["zip", "linker.MetricLinkerImproved.filter", "linker.MetricLinkerImproved.filter", "set", "set", "len", "len", "len"], "methods", ["None"], ["", "span_text_to_candidates", "[", "span_text", "]", "[", "'candidates'", "]", "=", "torch", ".", "tensor", "(", "candidates_list", ",", "dtype", "=", "torch", ".", "int", ")", "\n", "span_text_to_candidates", "[", "span_text", "]", "[", "'scores'", "]", "=", "torch", ".", "tensor", "(", "scores_list", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n", "# print('END LOADING LINKING CANDIDATES')", "\n", "\n", "", "return", "span_text_to_candidates", "\n", "\n", "\n", "", "def", "create_dictionaries", "(", "config", ",", "training", ")", ":", "\n", "    ", "path", "=", "config", "[", "'path'", "]", "\n", "\n", "print", "(", "\"Loading dictionaries (training={})\"", ".", "format", "(", "training", ")", ")", "\n", "\n", "if", "'dictionaries'", "in", "config", ":", "\n", "        ", "dictionaries", "=", "{", "}", "\n", "for", "name", ",", "dict_config", "in", "config", "[", "'dictionaries'", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "training", ":", "\n", "                ", "if", "\"init\"", "in", "dict_config", ":", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.linker.MetricLinkerImproved.get_pr": [[77, 79], ["None"], "methods", ["None"], ["                    ", "dictionary", "=", "load_dictionary", "(", "dict_config", "[", "'init'", "]", ",", "path", ")", "\n", "if", "isinstance", "(", "dictionary", ",", "Dictionary", ")", ":", "\n", "                        ", "print", "(", "'init {}: size={}'", ".", "format", "(", "name", ",", "dictionary", ".", "size", ")", ")", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.linker.MetricLinkerImproved.get_re": [[80, 82], ["None"], "methods", ["None"], ["", "elif", "isinstance", "(", "dictionary", ",", "BertTokenizer", ")", ":", "\n", "                        ", "print", "(", "'init {}: size={}'", ".", "format", "(", "name", ",", "dictionary", ".", "vocab_size", ")", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.linker.MetricLinkerImproved.get_f1": [[83, 85], ["None"], "methods", ["None"], ["                        ", "raise", "Exception", "(", "'not recognized dictionary: '", ",", "dictionary", ")", "\n", "", "", "else", ":", "\n", "                    ", "print", "(", "\"init {} (blank)\"", ".", "format", "(", "name", ")", ")", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.linker.MetricLinkerImproved.print": [[86, 97], ["linker.MetricLinkerImproved.print"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["dictionary", "=", "Dictionary", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "dictionary", "=", "load_dictionary", "(", "dict_config", ",", "path", ")", "\n", "print", "(", "'load {}: size={}'", ".", "format", "(", "name", ",", "dictionary", ".", "size", ")", ")", "\n", "\n", "", "dictionary", ".", "prefix", "=", "dict_config", "[", "'prefix'", "]", "if", "'prefix'", "in", "dict_config", "else", "''", "\n", "\n", "if", "'rewriter'", "in", "dict_config", ":", "\n", "                ", "if", "dict_config", "[", "'rewriter'", "]", "==", "'lowercase'", ":", "\n", "                    ", "dictionary", ".", "rewriter", "=", "lambda", "t", ":", "t", ".", "lower", "(", ")", "\n", "", "elif", "dict_config", "[", "'rewriter'", "]", "==", "'none'", ":", "\n", "                    ", "print", "(", "\"rewriter: none\"", ")", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.linker.MetricLinkerImproved.log": [[98, 102], ["tb_logger.log_value", "tb_logger.log_value", "tb_logger.log_value", "linker.MetricLinkerImproved.get_f1", "linker.MetricLinkerImproved.get_re", "linker.MetricLinkerImproved.get_pr"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCorefAverage.get_f1", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.get_re", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.get_pr"], ["", "else", ":", "\n", "                    ", "raise", "BaseException", "(", "\"no such rewriter\"", ",", "dict_config", "[", "'rewriter'", "]", ")", "\n", "\n", "", "", "if", "'append'", "in", "dict_config", ":", "\n", "                ", "for", "x", "in", "dict_config", "[", "'append'", "]", ":", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.linker.MetricLinkAccuracy.__init__": [[107, 114], ["None"], "methods", ["None"], ["                ", "dictionary", ".", "set_unknown_token", "(", "dict_config", "[", "'unknown'", "]", ")", "\n", "\n", "", "if", "'debug'", "in", "dict_config", ":", "\n", "                ", "dictionary", ".", "debug", "=", "dict_config", "[", "'debug'", "]", "\n", "\n", "", "if", "'update'", "in", "dict_config", ":", "\n", "                ", "dictionary", ".", "update", "=", "dict_config", "[", "'update'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.linker.MetricLinkAccuracy.step": [[115, 119], ["None"], "methods", ["None"], ["# kzaporoj 20/12/2020 - I comment this update to false, reason: let's say we want to try on a different", "\n", "# domain corpus such as AIDA Conll a particular model trained on DWIE. There will be many words non-existent", "\n", "# in DWIE, but whose embedding can give extra information if they are close enough to the embeddings of", "\n", "# words in DWIE.", "\n", "# if not training:", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.linker.MetricLinkAccuracy.update2": [[120, 144], ["zip", "linker.exclude_nills", "set", "set", "len", "len", "zip", "float", "set.append", "len"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.linker.exclude_nills"], ["#     dictionary.update = False", "\n", "\n", "", "if", "isinstance", "(", "dictionary", ",", "Dictionary", ")", ":", "\n", "                ", "print", "(", "\"   update:\"", ",", "dictionary", ".", "update", ")", "\n", "print", "(", "\"   debug:\"", ",", "dictionary", ".", "debug", ")", "\n", "\n", "", "dictionaries", "[", "name", "]", "=", "dictionary", "\n", "\n", "", "return", "dictionaries", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"WARNING: using wikipedia dictionary\"", ")", "\n", "words", "=", "Dictionary", "(", ")", "\n", "entities", "=", "Dictionary", "(", ")", "\n", "\n", "words", ".", "set_unknown_token", "(", "\"UNKNOWN\"", ")", "\n", "words", ".", "load_spirit_dictionary", "(", "'data/tokens.dict'", ",", "5", ")", "\n", "entities", ".", "set_unknown_token", "(", "\"UNKNOWN\"", ")", "\n", "entities", ".", "load_spirit_dictionary", "(", "'data/entities.dict'", ",", "5", ")", "\n", "return", "{", "\n", "'words'", ":", "words", ",", "\n", "'entities'", ":", "entities", "\n", "}", "\n", "\n", "\n", "", "", "def", "create_model", "(", "config", ",", "dictionaries", ")", ":", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.linker.MetricLinkAccuracy.print": [[145, 159], ["linker.MetricLinkAccuracy.print"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["# model_name = config['model']['name']", "\n", "# if model_name == \"model3\":", "\n", "#     model = MyModel3(dictionaries, config['model'])", "\n", "# elif model_name == \"model4\":", "\n", "#     model = MyModel4(dictionaries, config['model'])", "\n", "#     # model.load_tensorflow_model()", "\n", "# elif model_name == \"model5\":", "\n", "#     model = MyModel5(dictionaries, config['model'])", "\n", "# elif model_name == \"entbydecr1\":", "\n", "#     model = entybydesc.MyModel1(dictionaries, config['model'])", "\n", "# elif model_name == \"model6\":", "\n", "#     model = MyModel6(dictionaries, config['model'])", "\n", "# elif model_name == \"lm_1\":", "\n", "#     model = LM1(dictionaries, config['model'])", "\n", "# elif model_name == \"lm_2\":", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.linker.MetricLinkAccuracy.log": [[160, 163], ["tb_logger.log_value"], "methods", ["None"], ["#     model = LM2(dictionaries, config['model'])", "\n", "# elif model_name == \"ner_1\":", "\n", "#     model = Ner1(dictionaries, config['model'])", "\n", "# elif model_name == \"ner_2\":", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.linker.MetricLinkAccuracyNoCandidates.__init__": [[169, 176], ["None"], "methods", ["None"], ["# elif model_name == \"nerlink_2\":", "\n", "#     model = NerLink2(dictionaries, config['model'])", "\n", "# elif model_name == \"linker_adv_1\":", "\n", "#     model = LinkerAdv1(dictionaries, config['model'])", "\n", "# else:", "\n", "#     raise BaseException(\"no such model: \", model_name)", "\n", "# from models import model_create", "\n", "    ", "model", "=", "model_create", "(", "config", "[", "'model'", "]", ",", "dictionaries", ")", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.linker.MetricLinkAccuracyNoCandidates.step": [[177, 181], ["None"], "methods", ["None"], ["\n", "print", "(", "\"Model:\"", ",", "model", ")", "\n", "\n", "regularization", "=", "config", "[", "'optimizer'", "]", "[", "'regularization'", "]", "if", "'regularization'", "in", "config", "[", "'optimizer'", "]", "else", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.linker.MetricLinkAccuracyNoCandidates.update2": [[182, 194], ["zip", "linker.exclude_nills", "linker.exclude_nills", "set", "set", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.linker.exclude_nills", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.linker.exclude_nills"], ["print", "(", "\"Parameters:\"", ")", "\n", "parameters", "=", "[", "]", "\n", "num_params", "=", "0", "\n", "for", "key", ",", "value", "in", "dict", "(", "model", ".", "named_parameters", "(", ")", ")", ".", "items", "(", ")", ":", "\n", "# \t\tprint(key)", "\n", "        ", "if", "not", "value", ".", "requires_grad", ":", "\n", "            ", "print", "(", "\"skip \"", ",", "key", ")", "\n", "continue", "\n", "", "else", ":", "\n", "            ", "if", "key", "in", "regularization", ":", "\n", "                ", "print", "(", "\"param {} size={} l2={}\"", ".", "format", "(", "key", ",", "value", ".", "numel", "(", ")", ",", "regularization", "[", "key", "]", ")", ")", "\n", "parameters", "+=", "[", "{", "\"params\"", ":", "value", ",", "\"weight_decay\"", ":", "regularization", "[", "key", "]", "}", "]", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.linker.MetricLinkAccuracyNoCandidates.print": [[195, 209], ["linker.MetricLinkAccuracyNoCandidates.print"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["                ", "print", "(", "\"param {} size={}\"", ".", "format", "(", "key", ",", "value", ".", "numel", "(", ")", ")", ")", "\n", "parameters", "+=", "[", "{", "\"params\"", ":", "value", "}", "]", "\n", "", "", "num_params", "+=", "value", ".", "numel", "(", ")", "\n", "", "print", "(", "\"total number of params: {} = {}M\"", ".", "format", "(", "num_params", ",", "num_params", "/", "1024", "/", "1024", "*", "4", ")", ")", "\n", "print", "(", ")", "\n", "\n", "init_cfg", "=", "config", "[", "'optimizer'", "]", "[", "'initializer'", "]", "if", "'initializer'", "in", "config", "[", "'optimizer'", "]", "else", "{", "}", "\n", "\n", "print", "(", "\"Initializaing parameters\"", ")", "\n", "for", "key", ",", "param", "in", "dict", "(", "model", ".", "named_parameters", "(", ")", ")", ".", "items", "(", ")", ":", "\n", "        ", "for", "initializer", "in", "[", "y", "for", "x", ",", "y", "in", "init_cfg", ".", "items", "(", ")", "if", "x", "in", "key", "]", ":", "\n", "            ", "if", "initializer", "==", "'orthogonal'", ":", "\n", "# is this correct for RNNs, don't think so ?", "\n", "                ", "print", "(", "\"ORTHOGONAL\"", ",", "key", ",", "param", ".", "data", ".", "size", "(", ")", ")", "\n", "torch", ".", "nn", ".", "init", ".", "orthogonal_", "(", "param", ".", "data", ")", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.linker.MetricLinkAccuracyNoCandidates.log": [[210, 213], ["tb_logger.log_value"], "methods", ["None"], ["", "elif", "initializer", "==", "'rnn-orthogonal'", ":", "\n", "                ", "print", "(", "\"before:\"", ",", "param", ".", "data", ".", "size", "(", ")", ",", "param", ".", "data", ".", "sum", "(", ")", ".", "item", "(", ")", ")", "\n", "for", "tmp", "in", "torch", ".", "split", "(", "param", ".", "data", ",", "param", ".", "data", ".", "size", "(", "1", ")", ",", "dim", "=", "0", ")", ":", "\n", "                    ", "torch", ".", "nn", ".", "init", ".", "orthogonal_", "(", "tmp", ")", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.linker.exclude_links": [[26, 28], ["None"], "function", ["None"], ["        ", "dictionary", "=", "Dictionary", "(", ")", "\n", "dictionary", ".", "load_json", "(", "filename", ")", "\n", "", "elif", "type", "==", "'bert'", ":", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.linker.exclude_nills": [[30, 32], ["None"], "function", ["None"], ["", "else", ":", "\n", "        ", "raise", "BaseException", "(", "\"no such type\"", ",", "type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.__init__": [[88, 97], ["coref.MetricCoref.clear"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricF1.clear"], ["\n", "set_backup", "(", "scores", ")", "\n", "\n", "# print('->', scores.size(), scores.min().item(), scores.max().item())", "\n", "\n", "triangular_mask", "=", "torch", ".", "ones", "(", "scores", ".", "size", "(", ")", "[", "1", ":", "]", ")", ".", "tril", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "constant", "=", "scores", ".", "max", "(", ")", ".", "item", "(", ")", "+", "100000", "\n", "additive_mask", "=", "(", "1", "-", "triangular_mask", ")", "*", "-", "constant", "\n", "logits", "=", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "scores", "+", "additive_mask", ".", "to", "(", "scores", ".", "device", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.clear": [[98, 103], ["None"], "methods", ["None"], ["if", "targets", "is", "not", "None", ":", "\n", "            ", "loss", "=", "-", "logsumexp", "(", "logits", "+", "(", "1", "-", "targets", ")", "*", "-", "100000", ")", "\n", "mask", "=", "get_mask_from_sequence_lengths", "(", "lengths", ",", "lengths", ".", "max", "(", ")", ".", "item", "(", ")", ")", "\n", "m2is", "=", "None", "\n", "output", "=", "self", ".", "weight", "*", "(", "mask", ".", "float", "(", ")", "*", "loss", ")", ".", "sum", "(", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.step": [[104, 107], ["coref.MetricCoref.clear"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricF1.clear"], ["            ", "output", "=", "None", "\n", "m2is", "=", "decode_m2i", "(", "logits", ",", "lengths", ")", "\n", "\n", "", "return", "output", ",", "logits", ",", "m2is", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.update": [[108, 131], ["coref.decode_m2i", "zip", "x.tolist", "coref.m2i_to_clusters", "coref.m2i_to_clusters", "coref.MetricCoref.m", "coref.MetricCoref.m", "coref.MetricCoref.print"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.decode_m2i", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.m2i_to_clusters", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.m2i_to_clusters", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["\n", "", "def", "create_metrics", "(", "self", ")", ":", "\n", "        ", "return", "[", "MetricCoref", "(", "self", ".", "task", ",", "'muc'", ",", "MetricCoref", ".", "muc", ")", ",", "MetricCoref", "(", "self", ".", "task", ",", "'bcubed'", ",", "MetricCoref", ".", "b_cubed", ")", ",", "\n", "MetricObjective", "(", "self", ".", "task", ")", "]", "if", "self", ".", "enabled", "else", "[", "]", "\n", "\n", "\n", "", "", "class", "TaskCoref2", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "task", ",", "dim_input", ",", "config", ")", ":", "\n", "        ", "super", "(", "TaskCoref2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "task", "=", "task", "\n", "self", ".", "module", "=", "create_graph", "(", "dim_input", ",", "1", ",", "config", "[", "'scorer'", "]", ")", "\n", "self", ".", "weight", "=", "config", ".", "get", "(", "'weight'", ",", "1.0", ")", "\n", "self", ".", "enabled", "=", "config", "[", "'enabled'", "]", "\n", "print", "(", "\"Task {}: enabled={} weight={}\"", ".", "format", "(", "self", ".", "task", ",", "self", ".", "enabled", ",", "self", ".", "weight", ")", ")", "\n", "\n", "", "def", "set_weight", "(", "self", ",", "W0", ")", ":", "\n", "# self.weight = W0", "\n", "        ", "self", ".", "weight", "=", "0.5", "\n", "print", "(", "\"Task {} weight: {}\"", ".", "format", "(", "self", ".", "task", ",", "self", ".", "weight", ")", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ",", "lengths", ")", ":", "\n", "        ", "triangular_mask", "=", "torch", ".", "ones", "(", "inputs", ".", "size", "(", ")", "[", "1", "]", ",", "inputs", ".", "size", "(", ")", "[", "1", "]", ")", ".", "tril", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "inputs", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.add": [[132, 143], ["coref.MetricCoref.m", "coref.MetricCoref.m", "coref.MetricCoref.m", "coref.mention2cluster", "coref.mention2cluster"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.mention2cluster", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.mention2cluster"], ["scores", "=", "self", ".", "module", "(", "inputs", ",", "triangular_mask", ",", "lengths", "=", "lengths", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "set_backup", "(", "scores", ")", "\n", "\n", "# print('->', scores.size(), scores.min().item(), scores.max().item())", "\n", "\n", "constant", "=", "scores", ".", "max", "(", ")", ".", "item", "(", ")", "+", "100000", "\n", "additive_mask", "=", "(", "1", "-", "triangular_mask", ")", "*", "-", "constant", "\n", "logits", "=", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "scores", "+", "additive_mask", ".", "to", "(", "scores", ".", "device", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "if", "targets", "is", "not", "None", ":", "\n", "            ", "loss", "=", "-", "logsumexp", "(", "logits", "+", "(", "1", "-", "targets", ")", "*", "-", "100000", ")", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.update2": [[144, 177], ["zip", "coref.MetricCoref.m", "coref.MetricCoref.m", "coref.MetricCoref.m", "coref.MetricCoref.print"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["mask", "=", "get_mask_from_sequence_lengths", "(", "lengths", ",", "lengths", ".", "max", "(", ")", ".", "item", "(", ")", ")", "\n", "m2is", "=", "None", "\n", "output", "=", "self", ".", "weight", "*", "(", "mask", ".", "float", "(", ")", "*", "loss", ")", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "None", "\n", "m2is", "=", "decode_m2i", "(", "logits", ",", "lengths", ")", "\n", "\n", "", "return", "output", ",", "logits", ",", "m2is", "\n", "\n", "", "def", "create_metrics", "(", "self", ")", ":", "\n", "        ", "return", "[", "MetricCoref", "(", "self", ".", "task", ",", "'muc'", ",", "MetricCoref", ".", "muc", ")", ",", "MetricCoref", "(", "self", ".", "task", ",", "'bcubed'", ",", "MetricCoref", ".", "b_cubed", ")", ",", "\n", "MetricObjective", "(", "self", ".", "task", ")", "]", "if", "self", ".", "enabled", "else", "[", "]", "\n", "\n", "\n", "", "", "def", "convert", "(", "clusters", ",", "spans", ")", ":", "\n", "    ", "out", "=", "[", "[", "spans", "[", "m", "]", "for", "m", "in", "cluster", "]", "for", "cluster", "in", "clusters", "]", "\n", "return", "out", "\n", "\n", "\n", "# remove singletons containing only a disabled span", "\n", "", "def", "remove_disabled_spans", "(", "clusters", ",", "enabled_spans", ")", ":", "\n", "    ", "out", "=", "[", "]", "\n", "for", "cs", ",", "spans", "in", "zip", "(", "clusters", ",", "enabled_spans", ")", ":", "\n", "        ", "enabled", "=", "set", "(", "spans", ")", "\n", "out", ".", "append", "(", "[", "cluster", "for", "cluster", "in", "cs", "if", "len", "(", "cluster", ")", ">", "1", "or", "cluster", "[", "0", "]", "in", "enabled", "]", ")", "\n", "", "return", "out", "\n", "\n", "\n", "# simplified", "\n", "", "class", "LossCoref", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "task", ",", "config", ")", ":", "\n", "        ", "super", "(", "LossCoref", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "task", "=", "task", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.get_pr": [[227, 231], ["float"], "methods", ["None"], ["                    ", "output", "[", "'pred'", "]", "=", "remove_disabled_spans", "(", "output", "[", "'pred'", "]", ",", "ner_spans", ")", "\n", "\n", "", "", "", "else", ":", "\n", "            ", "output", "[", "'loss'", "]", "=", "0", "# torch.tensor(0.0).cuda() (skip minibatch)", "\n", "# if gold_spans is None:", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.get_re": [[232, 236], ["float"], "methods", ["None"], ["#     gold_spans = []", "\n", "output", "[", "'pred'", "]", "=", "[", "None", "for", "x", "in", "gold_spans", "]", "\n", "output", "[", "'gold'", "]", "=", "[", "None", "for", "x", "in", "gold_spans", "]", "\n", "output", "[", "'scores'", "]", "=", "[", "None", "for", "x", "in", "gold_spans", "]", "\n", "output", "[", "'pred_pointers'", "]", "=", "[", "{", "}", "for", "x", "in", "gold_spans", "]", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.get_f1": [[237, 243], ["float", "float"], "methods", ["None"], ["\n", "", "return", "output", "[", "'loss'", "]", ",", "output", "\n", "\n", "", "def", "create_metrics", "(", "self", ")", ":", "\n", "        ", "out", "=", "[", "]", "\n", "if", "self", ".", "enabled", ":", "\n", "            ", "metrics", "=", "[", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.print": [[244, 259], ["coref.MetricCoref.get_f1", "coref.MetricCoref.print"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCorefAverage.get_f1", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["MetricCoref", "(", "self", ".", "task", ",", "'muc'", ",", "MetricCoref", ".", "muc", ")", ",", "\n", "MetricCoref", "(", "self", ".", "task", ",", "'bcubed'", ",", "MetricCoref", ".", "b_cubed", ",", "verbose", "=", "False", ")", ",", "\n", "MetricCoref", "(", "self", ".", "task", ",", "'ceafe'", ",", "MetricCoref", ".", "ceafe", ",", "verbose", "=", "False", ")", ",", "\n", "]", "\n", "\n", "out", ".", "extend", "(", "metrics", ")", "\n", "out", ".", "append", "(", "MetricCorefAverage", "(", "self", ".", "task", ",", "'avg'", ",", "metrics", ")", ")", "\n", "out", ".", "append", "(", "MetricObjective", "(", "self", ".", "task", ")", ")", "\n", "out", ".", "append", "(", "MetricCorefExternal", "(", "self", ".", "task", ")", ")", "\n", "", "return", "out", "\n", "\n", "# , MetricCoref2(self.task, 'muc2'), MetricCoref2(self.task, 'bcubed2')", "\n", "# , MetricObjective(self.task)", "\n", "\n", "\n", "", "", "class", "LossBidirectionalCoref", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.log": [[260, 265], ["tb_logger.log_value", "tb_logger.log_value", "tb_logger.log_value", "coref.MetricCoref.get_f1", "coref.MetricCoref.get_pr", "coref.MetricCoref.get_re"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCorefAverage.get_f1", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.get_pr", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.get_re"], ["\n", "    ", "def", "__init__", "(", "self", ",", "task", ",", "config", ")", ":", "\n", "        ", "super", "(", "LossBidirectionalCoref", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "task", "=", "task", "\n", "self", ".", "weight", "=", "config", ".", "get", "(", "'weight'", ",", "1.0", ")", "\n", "self", ".", "enabled", "=", "config", "[", "'enabled'", "]", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.b_cubed": [[266, 283], ["collections.Counter", "collections.Counter.items", "len", "len", "float", "len", "len", "tuple"], "methods", ["None"], ["\n", "", "def", "forward", "(", "self", ",", "scores", ",", "gold_m2i", ",", "pred_spans", ",", "gold_spans", ",", "predict", "=", "False", ")", ":", "\n", "        ", "output", "=", "{", "}", "\n", "\n", "if", "self", ".", "enabled", ":", "\n", "            ", "if", "scores", "is", "not", "None", ":", "\n", "                ", "lengths", "=", "torch", ".", "LongTensor", "(", "[", "len", "(", "x", ")", "for", "x", "in", "pred_spans", "]", ")", ".", "to", "(", "scores", ".", "device", ")", "\n", "constant", "=", "scores", ".", "max", "(", ")", ".", "item", "(", ")", "+", "100000", "\n", "\n", "triangular_mask", "=", "torch", ".", "ones", "(", "scores", ".", "size", "(", ")", "[", "1", ":", "]", ")", ".", "tril", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "additive_mask", "=", "(", "(", "1", "-", "triangular_mask", ")", "*", "-", "constant", ")", ".", "to", "(", "scores", ".", "device", ")", "\n", "\n", "scores1", "=", "scores", "+", "additive_mask", "\n", "scores2", "=", "scores", "+", "additive_mask", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "logits1", "=", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "scores1", ",", "dim", "=", "-", "1", ")", "\n", "logits2", "=", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "scores2", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.muc": [[284, 298], ["len", "set", "len", "len", "set.add"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add"], ["", "if", "scores", "is", "not", "None", ":", "\n", "                ", "targets1", "=", "create_coref_target_forward", "(", "pred_spans", ",", "gold_spans", ",", "gold_m2i", ")", ".", "to", "(", "scores", ".", "device", ")", "\n", "targets2", "=", "create_coref_target_backward", "(", "pred_spans", ",", "gold_spans", ",", "gold_m2i", ")", ".", "to", "(", "scores", ".", "device", ")", "\n", "\n", "mask", "=", "get_mask_from_sequence_lengths", "(", "lengths", ",", "lengths", ".", "max", "(", ")", ".", "item", "(", ")", ")", ".", "float", "(", ")", "\n", "loss1", "=", "-", "logsumexp", "(", "logits1", "+", "(", "1.0", "-", "targets1", ")", "*", "-", "100000", ")", "\n", "loss2", "=", "-", "logsumexp", "(", "logits2", "+", "(", "1.0", "-", "targets2", ")", "*", "-", "100000", ")", "\n", "obj1", "=", "(", "mask", "*", "loss1", ")", ".", "sum", "(", ")", "\n", "obj2", "=", "(", "mask", "*", "loss2", ")", ".", "sum", "(", ")", "\n", "output", "[", "'loss'", "]", "=", "self", ".", "weight", "*", "(", "obj1", "+", "obj2", ")", "\n", "", "else", ":", "\n", "                ", "raise", "BaseException", "(", "\"HUH\"", ")", "\n", "output", "[", "'loss'", "]", "=", "torch", ".", "tensor", "(", "0.0", ")", ".", "cuda", "(", ")", "\n", "\n", "", "if", "predict", ":", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.phi4": [[299, 309], ["float", "len", "len", "len"], "methods", ["None"], ["                ", "output", "[", "'pred'", "]", "=", "[", "convert", "(", "m2i_to_clusters", "(", "x", ")", "[", "0", "]", ",", "y", ")", "for", "x", ",", "y", "in", "\n", "zip", "(", "decode_m2i", "(", "logits1", ",", "lengths", ")", ",", "pred_spans", ")", "]", "if", "scores", "is", "not", "None", "else", "[", "[", "]", "for", "_", "in", "\n", "pred_spans", "]", "\n", "output", "[", "'gold'", "]", "=", "[", "convert", "(", "m2i_to_clusters", "(", "x", ".", "tolist", "(", ")", ")", "[", "0", "]", ",", "y", ")", "for", "x", ",", "y", "in", "zip", "(", "gold_m2i", ",", "gold_spans", ")", "]", "\n", "", "", "else", ":", "\n", "            ", "output", "[", "'loss'", "]", "=", "torch", ".", "tensor", "(", "0.0", ")", ".", "cuda", "(", ")", "\n", "output", "[", "'pred'", "]", "=", "None", "\n", "output", "[", "'gold'", "]", "=", "None", "\n", "\n", "", "return", "output", "[", "'loss'", "]", ",", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.ceafe": [[311, 330], ["numpy.zeros", "enumerate", "scipy.optimize.linear_sum_assignment", "sum", "enumerate", "len", "len", "len", "len", "coref.MetricCoref.phi4", "len", "len"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref.phi4"], ["        ", "metrics", "=", "[", "\n", "MetricCoref", "(", "self", ".", "task", ",", "'muc'", ",", "MetricCoref", ".", "muc", ")", ",", "\n", "MetricCoref", "(", "self", ".", "task", ",", "'bcubed'", ",", "MetricCoref", ".", "b_cubed", ",", "verbose", "=", "False", ")", ",", "\n", "MetricCoref", "(", "self", ".", "task", ",", "'ceafe'", ",", "MetricCoref", ".", "ceafe", ",", "verbose", "=", "False", ")", ",", "\n", "]", "if", "self", ".", "enabled", "else", "[", "]", "\n", "\n", "out", "=", "[", "]", "\n", "out", ".", "extend", "(", "metrics", ")", "\n", "out", ".", "append", "(", "MetricCorefAverage", "(", "self", ".", "task", ",", "'avg'", ",", "metrics", ")", ")", "\n", "out", ".", "append", "(", "MetricObjective", "(", "self", ".", "task", ")", ")", "\n", "return", "out", "\n", "\n", "# , MetricCoref2(self.task, 'muc2'), MetricCoref2(self.task, 'bcubed2')", "\n", "# , MetricObjective(self.task)", "\n", "\n", "\n", "", "", "def", "create_target_matrix", "(", "clusters", ")", ":", "\n", "    ", "cluster2mentions", "=", "{", "}", "\n", "for", "mention", ",", "cluster", "in", "enumerate", "(", "clusters", ".", "tolist", "(", ")", ")", ":", "\n", "        ", "if", "cluster", "not", "in", "cluster2mentions", ":", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref2.__init__": [[334, 349], ["coref.MetricCoref2.clear", "BaseException"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricF1.clear"], ["", "number_of_mentions", "=", "clusters", ".", "size", "(", ")", "[", "0", "]", "\n", "target", "=", "torch", ".", "zeros", "(", "number_of_mentions", ",", "number_of_mentions", ")", "\n", "for", "cluster", ",", "mentions", "in", "cluster2mentions", ".", "items", "(", ")", ":", "\n", "        ", "for", "m1", "in", "mentions", ":", "\n", "            ", "for", "m2", "in", "mentions", ":", "\n", "                ", "target", "[", "m1", ",", "m2", "]", "=", "1", "\n", "", "", "", "return", "target", "\n", "\n", "\n", "", "def", "logZ", "(", "scores", ")", ":", "\n", "    ", "dim", "=", "scores", ".", "size", "(", ")", "[", "0", "]", "+", "1", "\n", "\n", "S", "=", "torch", ".", "zeros", "(", "dim", ",", "dim", ")", "\n", "S", "[", "1", ":", ",", "1", ":", "]", "=", "scores", "\n", "A", "=", "torch", ".", "exp", "(", "S", "+", "torch", ".", "eye", "(", "dim", ")", "*", "-", "10000", ")", "\n", "D", "=", "torch", ".", "diag", "(", "A", ".", "sum", "(", "0", ")", ")", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref2.clear": [[350, 355], ["None"], "methods", ["None"], ["L", "=", "D", "-", "A", "\n", "\n", "L", "[", "0", ",", "1", ":", "]", "=", "1", "/", "scores", ".", "size", "(", ")", "[", "0", "]", "\n", "return", "L", ".", "logdet", "(", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref2.step": [[356, 359], ["coref.MetricCoref2.clear"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricF1.clear"], ["", "class", "TaskCorefMTT", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "dim_input", ",", "config", ")", ":", "\n", "        ", "super", "(", "TaskCorefMTT", ",", "self", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref2.update": [[360, 384], ["coref.decode_m2i", "zip", "x.tolist", "coref.m2i_to_clusters", "coref.m2i_to_clusters", "coref.MetricCoref2.m", "coref.MetricCoref2.m", "coref.MetricCoref2.print"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.decode_m2i", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.m2i_to_clusters", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.m2i_to_clusters", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["self", ".", "module", "=", "create_graph", "(", "dim_input", ",", "1", ",", "config", "[", "'scorer'", "]", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "mentions", ",", "clusters", ")", ":", "\n", "        ", "scores", "=", "self", ".", "module", "(", "mentions", ")", ".", "squeeze", "(", "-", "1", ")", ".", "squeeze", "(", "0", ")", "\n", "targets", "=", "create_target_matrix", "(", "clusters", "[", "0", "]", ")", ".", "to", "(", "scores", ".", "device", ")", "\n", "\n", "scores", "=", "scores", "-", "scores", ".", "max", "(", ")", "\n", "\n", "g", "=", "logZ", "(", "scores", "+", "(", "1", "-", "targets", ")", "*", "-", "10000", ")", "\n", "z", "=", "logZ", "(", "scores", ")", "\n", "\n", "return", "z", "-", "g", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref2.update2": [[385, 414], ["zip", "gold_span2cluster.items", "coref.MetricCoref2.m", "coref.MetricCoref2.m", "gold[].append", "coref.MetricCoref2.print"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref2.get_f1": [[415, 421], ["float", "float"], "methods", ["None"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref2.print": [[422, 434], ["coref.MetricCoref2.get_f1", "coref.MetricCoref2.print"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCorefAverage.get_f1", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref2.log": [[435, 438], ["tb_logger.log_value", "coref.MetricCoref2.get_f1"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCorefAverage.get_f1"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref2.myintersection": [[439, 442], ["list", "set", "set"], "methods", ["None"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref2.mybcubed": [[443, 456], ["len", "len", "len", "len", "coref.MetricCoref2.myintersection", "len"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref2.myintersection"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCoref2.mymuc": [[457, 476], ["enumerate", "len", "set", "len", "len", "set.add"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCorefAverage.__init__": [[480, 487], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCorefAverage.step": [[488, 490], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCorefAverage.update2": [[491, 493], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCorefAverage.get_f1": [[494, 497], ["x.get_f1", "len", "sum", "len"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCorefAverage.get_f1"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCorefAverage.print": [[498, 514], ["coref.MetricCorefAverage.get_f1", "coref.MetricCorefAverage.print"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCorefAverage.get_f1", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCorefAverage.log": [[515, 518], ["tb_logger.log_value", "coref.MetricCorefAverage.get_f1"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.MetricCorefAverage.get_f1"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.set_backup": [[13, 16], ["None"], "function", ["None"], ["from", "util", ".", "sequence", "import", "get_mask_from_sequence_lengths", "\n", "\n", "\n", "def", "create_coref_target_forward", "(", "pred_spans", ",", "gold_spans", ",", "gold_clusters", ")", ":", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.decode_m2i": [[18, 43], ["enumerate", "lengths.tolist", "list", "output.append", "range", "torch.max", "enumerate", "indices.tolist", "print", "print", "print", "print", "print", "print", "torch.save", "torch.save", "torch.save", "exit", "len", "len", "scores.min().item", "scores.max().item", "scores.min", "scores.max"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["max_spans", "=", "max", "(", "[", "len", "(", "x", ")", "for", "x", "in", "pred_spans", "]", ")", "\n", "\n", "targets", "=", "torch", ".", "zeros", "(", "num_batch", ",", "max_spans", ",", "max_spans", ")", "\n", "\n", "for", "batch", ",", "(", "pred", ",", "gold", ",", "clusters", ")", "in", "enumerate", "(", "zip", "(", "pred_spans", ",", "gold_spans", ",", "gold_clusters", ")", ")", ":", "\n", "        ", "gold2cluster", "=", "{", "}", "\n", "for", "idx", ",", "span", "in", "enumerate", "(", "gold", ")", ":", "\n", "            ", "gold2cluster", "[", "span", "]", "=", "clusters", "[", "idx", "]", ".", "item", "(", ")", "\n", "\n", "", "for", "idx1", ",", "span1", "in", "enumerate", "(", "pred", ")", ":", "\n", "            ", "num_found", "=", "0", "\n", "if", "span1", "in", "gold2cluster", ":", "\n", "                ", "for", "idx2", ",", "span2", "in", "enumerate", "(", "pred", ")", ":", "\n", "                    ", "if", "idx2", "<", "idx1", "and", "span2", "in", "gold2cluster", "and", "gold2cluster", "[", "span1", "]", "==", "gold2cluster", "[", "span2", "]", ":", "\n", "                        ", "targets", "[", "batch", ",", "idx1", ",", "idx2", "]", "=", "1.0", "\n", "num_found", "+=", "1", "\n", "\n", "", "", "", "if", "num_found", "==", "0", ":", "\n", "                ", "targets", "[", "batch", ",", "idx1", ",", "idx1", "]", "=", "1.0", "\n", "\n", "", "", "", "return", "targets", "\n", "\n", "\n", "", "def", "create_coref_target_backward", "(", "pred_spans", ",", "gold_spans", ",", "gold_clusters", ")", ":", "\n", "    ", "num_batch", "=", "len", "(", "pred_spans", ")", "\n", "max_spans", "=", "max", "(", "[", "len", "(", "x", ")", "for", "x", "in", "pred_spans", "]", ")", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.m2i_to_clusters": [[47, 66], ["enumerate", "clusters[].append", "list", "clusters.values"], "function", ["None"], ["for", "batch", ",", "(", "pred", ",", "gold", ",", "clusters", ")", "in", "enumerate", "(", "zip", "(", "pred_spans", ",", "gold_spans", ",", "gold_clusters", ")", ")", ":", "\n", "        ", "gold2cluster", "=", "{", "}", "\n", "for", "idx", ",", "span", "in", "enumerate", "(", "gold", ")", ":", "\n", "            ", "gold2cluster", "[", "span", "]", "=", "clusters", "[", "idx", "]", ".", "item", "(", ")", "\n", "\n", "", "for", "idx1", ",", "span1", "in", "enumerate", "(", "pred", ")", ":", "\n", "            ", "num_found", "=", "0", "\n", "if", "span1", "in", "gold2cluster", ":", "\n", "                ", "for", "idx2", ",", "span2", "in", "enumerate", "(", "pred", ")", ":", "\n", "                    ", "if", "idx2", ">", "idx1", "and", "span2", "in", "gold2cluster", "and", "gold2cluster", "[", "span1", "]", "==", "gold2cluster", "[", "span2", "]", ":", "\n", "                        ", "targets", "[", "batch", ",", "idx1", ",", "idx2", "]", "=", "1.0", "\n", "num_found", "+=", "1", "\n", "\n", "", "", "", "if", "num_found", "==", "0", ":", "\n", "                ", "targets", "[", "batch", ",", "idx1", ",", "idx1", "]", "=", "1.0", "\n", "\n", "", "", "", "return", "targets", "\n", "\n", "\n", "", "def", "create_coref", "(", "config", ")", ":", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.get_gold_clusters": [[68, 75], ["tuple", "tuple"], "function", ["None"], ["        ", "return", "LossCoref", "(", "'coref'", ",", "config", ")", "\n", "", "elif", "config", "[", "'type'", "]", "==", "'coref-e'", ":", "\n", "        ", "return", "LossCorefEdmonds", "(", "'coref'", ",", "config", ")", "\n", "\n", "\n", "", "", "class", "TaskCoref", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "task", ",", "dim_input", ",", "config", ")", ":", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.coref.mention2cluster": [[77, 84], ["tuple", "tuple"], "function", ["None"], ["self", ".", "task", "=", "task", "\n", "self", ".", "dim_hidden", "=", "config", "[", "'dim'", "]", "\n", "self", ".", "left", "=", "nn", ".", "Linear", "(", "dim_input", ",", "self", ".", "dim_hidden", ",", "bias", "=", "False", ")", "\n", "self", ".", "right", "=", "nn", ".", "Linear", "(", "dim_input", ",", "self", ".", "dim_hidden", ",", "bias", "=", "False", ")", "\n", "self", ".", "weight", "=", "config", ".", "get", "(", "'weight'", ",", "1.0", ")", "\n", "self", ".", "enabled", "=", "config", "[", "'enabled'", "]", "\n", "\n", "", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ",", "lengths", ")", ":", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.misc.MetricObjective.__init__": [[4, 7], ["misc.MetricObjective.clear"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricF1.clear"], ["\n", "class", "LayerNorm", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "hidden_size", ",", "eps", "=", "1e-12", ")", ":", "\n", "        ", "super", "(", "LayerNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.misc.MetricObjective.clear": [[8, 11], ["None"], "methods", ["None"], ["self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "hidden_size", ")", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "hidden_size", ")", ")", "\n", "self", ".", "variance_epsilon", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.misc.MetricObjective.step": [[12, 15], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "u", "=", "x", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "s", "=", "(", "x", "-", "u", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "x", "=", "(", "x", "-", "u", ")", "/", "torch", ".", "sqrt", "(", "s", "+", "self", ".", "variance_epsilon", ")", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.misc.MetricObjective.update": [[16, 18], ["None"], "methods", ["None"], ["return", "self", ".", "weight", "*", "x", "+", "self", ".", "bias", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.misc.MetricObjective.update2": [[19, 21], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.misc.MetricObjective.print": [[22, 24], ["misc.MetricObjective.print"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.misc.MetricObjective.log": [[25, 28], ["tb_logger.log_value"], "methods", ["None"], []], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricConceptRelationSoftF1.__init__": [[25, 32], ["None"], "methods", ["None"], ["\n", "", "def", "create_task_relations", "(", "name", ",", "config", ",", "labels", ")", ":", "\n", "    ", "if", "config", "[", "'type'", "]", "==", "'binary'", ":", "\n", "        ", "return", "LossRelations", "(", "name", ",", "config", ",", "labels", ")", "\n", "", "elif", "config", "[", "'type'", "]", "==", "'latent-binary'", ":", "\n", "        ", "return", "LossRelationsLatent", "(", "name", ",", "config", ",", "labels", ")", "\n", "", "elif", "config", "[", "'type'", "]", "==", "'latent-x'", ":", "\n", "        ", "return", "LossRelationsLatentX", "(", "name", ",", "config", ",", "labels", ")", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricConceptRelationSoftF1.step": [[33, 39], ["None"], "methods", ["None"], ["", "elif", "config", "[", "'type'", "]", "==", "'binary-x'", ":", "\n", "        ", "return", "LossRelationsX", "(", "name", ",", "config", ",", "labels", ")", "\n", "", "elif", "config", "[", "'type'", "]", "==", "'span-binary'", ":", "\n", "        ", "return", "TaskSpanRelations", "(", "name", ",", "config", ",", "labels", ")", "\n", "", "else", ":", "\n", "        ", "raise", "BaseException", "(", "\"no such relation task:\"", ",", "config", "[", "'type'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricConceptRelationSoftF1.add": [[40, 61], ["relations.to_pairwise", "relations.to_pairwise", "relations.to_pairs", "relations.to_pairs", "len", "len", "len", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.to_pairwise", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.to_pairwise", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.to_pairs", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.to_pairs"], ["\n", "", "", "class", "TaskRelations", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "dim_input", ",", "config", ",", "labels", ")", ":", "\n", "        ", "super", "(", "TaskRelations", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_relations", "=", "len", "(", "labels", ")", "\n", "self", ".", "module", "=", "create_graph", "(", "dim_input", ",", "self", ".", "num_relations", ",", "config", "[", "'scorer'", "]", ")", "\n", "self", ".", "loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", "reduction", "=", "'none'", ")", "\n", "self", ".", "labels", "=", "labels", "\n", "W0", "=", "config", ".", "get", "(", "'weight'", ",", "1.0", ")", "\n", "self", ".", "weight", "=", "W0", "/", "len", "(", "self", ".", "labels", ")", "if", "config", ".", "get", "(", "'normalize'", ",", "False", ")", "else", "W0", "\n", "self", ".", "divide_by_number_of_concepts", "=", "config", ".", "get", "(", "'divide_by_number_of_concepts'", ",", "True", ")", "\n", "self", ".", "enabled", "=", "config", "[", "'enabled'", "]", "\n", "print", "(", "\"Task relations: enabled={} weight={} normalize={} divide_by_number_of_concepts={}\"", ".", "format", "(", "self", ".", "enabled", ",", "\n", "self", ".", "weight", ",", "\n", "config", ".", "get", "(", "\n", "'normalize'", ",", "\n", "False", ")", ",", "\n", "self", ".", "divide_by_number_of_concepts", ")", ")", "\n", "\n", "", "def", "set_weight", "(", "self", ",", "W0", ")", ":", "\n", "        ", "self", ".", "weight", "=", "3", "/", "len", "(", "self", ".", "labels", ")", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricConceptRelationSoftF1.update2": [[62, 75], ["enumerate", "zip", "relations.MetricConceptRelationSoftF1.add"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add"], ["print", "(", "\"Task {} weight: {}\"", ".", "format", "(", "'relations'", ",", "self", ".", "weight", ")", ")", "\n", "self", ".", "divide_by_number_of_concepts", "=", "False", "\n", "\n", "", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ",", "concept_lengths", ",", "square_mask", ")", ":", "\n", "        ", "mask", "=", "get_mask_from_sequence_lengths", "(", "concept_lengths", ",", "concept_lengths", ".", "max", "(", ")", ".", "item", "(", ")", ")", "\n", "if", "self", ".", "divide_by_number_of_concepts", ":", "\n", "            ", "mask", "=", "mask", ".", "float", "(", ")", "/", "concept_lengths", ".", "unsqueeze", "(", "1", ")", ".", "float", "(", ")", "# dunno if this helps?", "\n", "\n", "", "scores", "=", "self", ".", "module", "(", "inputs", ",", "square_mask", ")", "\n", "scores", "=", "scores", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n", "if", "targets", "is", "not", "None", ":", "\n", "            ", "obj", "=", "self", ".", "loss", "(", "scores", ",", "targets", ")", "\n", "obj", "=", "self", ".", "weight", "*", "masked_sum", "(", "obj", ",", "mask", ")", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricConceptRelationSoftF1.print": [[77, 108], ["relations.MetricConceptRelationSoftF1.print"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "else", ":", "\n", "            ", "obj", "=", "None", "\n", "predictions", "=", "decode_relations", "(", "scores", ",", "concept_lengths", ",", "self", ".", "labels", ")", "\n", "\n", "# print('obj:', obj.item())", "\n", "\n", "", "return", "obj", ",", "scores", ",", "predictions", "\n", "\n", "", "def", "create_metrics", "(", "self", ")", ":", "\n", "        ", "return", "[", "MetricRelationF1", "(", "'relations'", ",", "self", ".", "labels", ")", ",", "MetricObjective", "(", "'relations'", ")", "]", "if", "self", ".", "enabled", "else", "[", "]", "\n", "\n", "\n", "", "", "from", "modules", ".", "relations", ".", "latent", "import", "sum_scores", ",", "decode_relations_new", "\n", "\n", "\n", "# don't know if we need this", "\n", "# numerical stable implementation of log(1 - exp(x))", "\n", "def", "log1mex", "(", "x", ")", ":", "\n", "# print('x:', x.min().item(), x.max().item())", "\n", "# print(x[0,0,0,:])", "\n", "\n", "# expm1(x) = exp(x) - 1", "\n", "    ", "v1", "=", "torch", ".", "log", "(", "-", "torch", ".", "expm1", "(", "x", ")", ")", "\n", "# print('v1:', v1)", "\n", "# log1p(x) = log(1 + x)", "\n", "v2", "=", "torch", ".", "log1p", "(", "-", "torch", ".", "exp", "(", "x", ")", ")", "\n", "# print('v2:', v2)", "\n", "\n", "return", "v1", "\n", "# return torch.where(x > -0.693, v1, v2)", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricConceptRelationSoftF1.log": [[109, 112], ["tb_logger.log_value"], "methods", ["None"], ["", "def", "create_square_mask", "(", "lengths", ")", ":", "\n", "    ", "mask", "=", "get_mask_from_sequence_lengths", "(", "lengths", ",", "lengths", ".", "max", "(", ")", ".", "item", "(", ")", ")", "\n", "mask", "=", "mask", ".", "float", "(", ")", "\n", "square_mask", "=", "torch", ".", "bmm", "(", "mask", ".", "unsqueeze", "(", "-", "1", ")", ",", "mask", ".", "unsqueeze", "(", "-", "2", ")", ")", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricConceptRelationToMentionsF1.__init__": [[117, 124], ["None"], "methods", ["None"], ["    ", "for", "i", "in", "range", "(", "grad", ".", "size", "(", "1", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "grad", ".", "size", "(", "2", ")", ")", ":", "\n", "            ", "if", "torch", ".", "isnan", "(", "grad", "[", "0", ",", "i", ",", "j", ",", ":", "]", ")", ".", "any", "(", ")", ":", "\n", "                ", "print", "(", "'x:'", ",", "i", ",", "j", ",", "x", "[", "0", ",", "i", ",", "j", ",", ":", "]", ")", "\n", "print", "(", "'dx:'", ",", "i", ",", "j", ",", "grad", "[", "0", ",", "i", ",", "j", ",", ":", "]", ")", "\n", "\n", "\n", "", "", "", "", "def", "inspect", "(", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricConceptRelationToMentionsF1.step": [[125, 133], ["None"], "methods", ["None"], ["    ", "print", "(", "'x-min:'", ",", "x", ".", "min", "(", ")", ".", "item", "(", ")", ")", "\n", "print", "(", "'x-max:'", ",", "x", ".", "max", "(", ")", ".", "item", "(", ")", ")", "\n", "print", "(", ")", "\n", "\n", "\n", "", "class", "LossRelationsOld", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "config", ",", "labels", ")", ":", "\n", "        ", "super", "(", "LossRelationsOld", ",", "self", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricConceptRelationToMentionsF1.add": [[134, 147], ["relations.to_pairwise", "relations.to_pairwise"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.to_pairwise", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.to_pairwise"], ["self", ".", "num_relations", "=", "len", "(", "labels", ")", "\n", "self", ".", "loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", "reduction", "=", "'none'", ")", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "weight", "=", "config", "[", "'weight'", "]", "/", "len", "(", "self", ".", "labels", ")", "\n", "self", ".", "enabled", "=", "config", "[", "'enabled'", "]", "\n", "\n", "", "def", "forward", "(", "self", ",", "mention_scores", ",", "mention_targets", ",", "mention_lengths", ",", "mention_mask", ",", "mapping", ",", "concept_lengths", ")", ":", "\n", "        ", "if", "mention_targets", "is", "not", "None", ":", "\n", "            ", "obj", "=", "self", ".", "loss", "(", "mention_scores", ",", "mention_targets", ")", "\n", "obj", "=", "self", ".", "weight", "*", "(", "obj", "*", "mention_mask", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "sum", "(", ")", "\n", "predictions", "=", "None", "\n", "", "else", ":", "\n", "# TODO: fix reordering", "\n", "            ", "obj", "=", "None", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricConceptRelationToMentionsF1.update2": [[148, 161], ["enumerate", "zip", "relations.MetricConceptRelationToMentionsF1.add"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add"], ["predictions", "=", "decode_relations", "(", "mention_scores", ",", "concept_lengths", ",", "self", ".", "labels", ")", "\n", "\n", "# print('obj:', obj.item())", "\n", "\n", "", "return", "obj", ",", "mention_scores", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ",", "predictions", "\n", "\n", "", "def", "create_metrics", "(", "self", ")", ":", "\n", "        ", "return", "[", "MetricRelationF1", "(", "'relations'", ",", "self", ".", "labels", ")", ",", "MetricObjective", "(", "'relations'", ")", "]", "if", "self", ".", "enabled", "else", "[", "]", "\n", "\n", "\n", "", "", "class", "LossRelations", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "name", ",", "config", ",", "labels", ")", ":", "\n", "        ", "super", "(", "LossRelations", ",", "self", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricConceptRelationToMentionsF1.print": [[163, 181], ["relations.MetricConceptRelationToMentionsF1.print"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["self", ".", "num_relations", "=", "len", "(", "labels", ")", "\n", "self", ".", "loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", "reduction", "=", "'none'", ")", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "enabled", "=", "config", "[", "'enabled'", "]", "\n", "self", ".", "weight", "=", "config", "[", "'weight'", "]", "/", "len", "(", "self", ".", "labels", ")", "\n", "self", ".", "debug", "=", "config", "[", "'debug'", "]", "\n", "\n", "", "def", "forward", "(", "self", ",", "mention_scores", ",", "mention_targets", ",", "mention_lengths", ",", "mention_mask", ",", "mapping", ",", "coref", ",", "relations", ",", "\n", "predict", "=", "False", ")", ":", "\n", "        ", "output", "=", "{", "}", "\n", "\n", "if", "self", ".", "enabled", "and", "mention_targets", "is", "not", "None", ":", "\n", "            ", "obj", "=", "self", ".", "weight", "*", "(", "self", ".", "loss", "(", "mention_scores", ",", "mention_targets", ")", "*", "mention_mask", ".", "unsqueeze", "(", "\n", "-", "1", ")", ")", ".", "sum", "(", ")", "/", "self", ".", "num_relations", "\n", "", "else", ":", "\n", "            ", "obj", "=", "torch", ".", "tensor", "(", "0.0", ")", ".", "cuda", "(", ")", "\n", "\n", "", "output", "[", "'loss'", "]", "=", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricConceptRelationToMentionsF1.pr": [[183, 185], ["None"], "methods", ["None"], ["\n", "if", "mention_targets", "is", "not", "None", ":", "\n", "            ", "concept_lengths", "=", "[", "len", "(", "x", ")", "for", "x", "in", "coref", "[", "'pred'", "]", "]", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricConceptRelationToMentionsF1.re": [[186, 188], ["None"], "methods", ["None"], ["mytargets", "=", "decode_relations_new", "(", "concept_targets", ",", "concept_lengths", ",", "self", ".", "labels", ")", "\n", "output", "[", "'target'", "]", "=", "[", "[", "(", "clusters", "[", "src", "]", ",", "clusters", "[", "dst", "]", ",", "rel", ")", "for", "src", ",", "dst", ",", "rel", "in", "triples", "]", "for", "clusters", ",", "triples", "\n", "in", "zip", "(", "coref", "[", "'pred'", "]", ",", "mytargets", ")", "]", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricConceptRelationToMentionsF1.f1": [[189, 191], ["None"], "methods", ["None"], ["\n", "", "if", "predict", ":", "\n", "            ", "if", "mention_scores", "is", "None", ":", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricConceptRelationToMentionsF1.log": [[193, 196], ["tb_logger.log_value"], "methods", ["None"], ["", "else", ":", "\n", "# print('min:', mention_scores.min().item())", "\n", "# print('max:', mention_scores.max().item())", "\n", "                ", "pred_mentions", "=", "(", "mention_scores", ">", "0", ")", ".", "float", "(", ")", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.__init__": [[201, 208], ["None"], "methods", ["None"], ["predictions", "=", "decode_relations_new", "(", "pred_concepts", ",", "concept_lengths", ",", "self", ".", "labels", ")", "\n", "output", "[", "'pred'", "]", "=", "[", "[", "(", "clusters", "[", "src", "]", ",", "clusters", "[", "dst", "]", ",", "rel", ")", "for", "src", ",", "dst", ",", "rel", "in", "triples", "]", "for", "\n", "clusters", ",", "triples", "in", "zip", "(", "coref", "[", "'pred'", "]", ",", "predictions", ")", "]", "\n", "\n", "", "output", "[", "'gold'", "]", "=", "[", "[", "(", "clusters", "[", "src", "]", ",", "clusters", "[", "dst", "]", ",", "self", ".", "labels", "[", "rel", "]", ")", "for", "src", ",", "dst", ",", "rel", "in", "triples", "]", "for", "\n", "clusters", ",", "(", "_", ",", "triples", ",", "_", ")", "in", "\n", "zip", "(", "relations", "[", "'gold_clusters2'", "]", ",", "relations", "[", "'gold_relations'", "]", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.step": [[209, 217], ["None"], "methods", ["None"], ["", "return", "output", "[", "'loss'", "]", ",", "output", "\n", "\n", "", "def", "create_metrics", "(", "self", ")", ":", "\n", "        ", "return", "[", "MetricConceptRelationSoftF1", "(", "self", ".", "name", ",", "self", ".", "labels", ",", "verbose", "=", "self", ".", "debug", ")", ",", "\n", "MetricObjective", "(", "self", ".", "name", ")", "]", "if", "self", ".", "enabled", "else", "[", "]", "\n", "\n", "\n", "", "", "class", "LossRelationsLatent", "(", "nn", ".", "Module", ")", ":", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add": [[218, 231], ["set", "set"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "config", ",", "labels", ")", ":", "\n", "        ", "super", "(", "LossRelationsLatent", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "num_relations", "=", "len", "(", "labels", ")", "\n", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "enabled", "=", "config", "[", "'enabled'", "]", "\n", "self", ".", "weight", "=", "config", "[", "'weight'", "]", "/", "len", "(", "self", ".", "labels", ")", "\n", "self", ".", "latent", "=", "True", "\n", "self", ".", "old_implementation", "=", "False", "\n", "self", ".", "debug", "=", "config", "[", "'debug'", "]", "\n", "\n", "", "def", "forward", "(", "self", ",", "mention_scores", ",", "mention_targets", ",", "mention_lengths", ",", "mention_mask", ",", "mapping", ",", "coref", ",", "relations", ",", "\n", "predict", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.update2": [[232, 235], ["enumerate", "zip", "relations.MetricSpanRelationF1x.add"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.add"], ["        ", "output", "=", "{", "}", "\n", "\n", "# if mention_scores is not None:", "\n", "#     print('mention_scores:', mention_scores.size())", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.print": [[237, 255], ["relations.MetricSpanRelationF1x.print"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["#     print('mention_targets:', mention_targets.size())", "\n", "\n", "if", "mention_targets", "is", "not", "None", ":", "\n", "# print('relations active', mention_targets.sum().item())", "\n", "\n", "            ", "concept_targets", "=", "(", "sum_scores", "(", "mention_targets", ",", "mapping", ")", ">", "0", ")", ".", "float", "(", ")", "\n", "\n", "if", "self", ".", "latent", ":", "\n", "                ", "if", "self", ".", "old_implementation", ":", "\n", "# not all concept pairs have mention pairs", "\n", "                    ", "mask", "=", "(", "sum_scores", "(", "torch", ".", "ones", "(", "mention_scores", ".", "size", "(", ")", ")", ".", "cuda", "(", ")", ",", "mapping", ")", ">", "0", ")", ".", "float", "(", ")", "\n", "\n", "mention_logits", "=", "F", ".", "logsigmoid", "(", "-", "mention_scores", ")", "# [-inf, 0]", "\n", "concept_logits", "=", "sum_scores", "(", "mention_logits", ",", "mapping", ")", "\n", "\n", "if", "self", ".", "debug", ":", "\n", "                        ", "tmp", "=", "(", "concept_logits", "*", "mask", "==", "0", ")", ".", "float", "(", ")", "*", "mask", "\n", "print", "(", "'tmp:'", ",", "tmp", ".", "sum", "(", ")", ".", "item", "(", ")", ")", "# shouldn't this be zero?", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.pr": [[257, 259], ["None"], "methods", ["None"], ["# print('->', (concept_logits * (1-mask)).min(), (concept_logits * (1-mask)).max())", "\n", "\n", "# print('logits:', concept_logits.sum(-1))", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.re": [[260, 262], ["None"], "methods", ["None"], ["\n", "# TODO: can we remove this? sign of possible simplification of loss equation?", "\n", "", "x", "=", "concept_logits", "-", "1e-8", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.f1": [[263, 265], ["None"], "methods", ["None"], ["# x = concept_logits - (1-mask) * 100000 - 1e-8", "\n", "\n", "# concept_logits.register_hook(lambda grad: debug_grad(x, grad))", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.MetricSpanRelationF1x.log": [[267, 270], ["tb_logger.log_value"], "methods", ["None"], ["inspect", "(", "x", ")", "\n", "\n", "loss", "=", "concept_targets", "*", "log1mex", "(", "x", ")", "\n", "loss", "+=", "(", "1", "-", "concept_targets", ")", "*", "concept_logits", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.to_pairwise": [[3, 10], ["set", "out.append"], "function", ["None"], ["import", "torch", ".", "nn", ".", "functional", "as", "F", "\n", "\n", "from", "metrics", ".", "f1", "import", "MetricRelationF1", ",", "decode_relations", "\n", "from", "metrics", ".", "misc", "import", "MetricObjective", "\n", "from", "metrics", ".", "relations", "import", "MetricConceptRelationSoftF1", "\n", "from", "modules", ".", "graph", "import", "create_graph", "\n", "from", "modules", ".", "relations", ".", "basic", "import", "TaskSpanRelations", "\n", "from", "modules", ".", "relations", ".", "binary", "import", "LossRelationsX", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.to_pairs": [[11, 17], ["set", "pairs.append"], "function", ["None"], ["from", "modules", ".", "relations", ".", "latent", "import", "LossRelationsLatentX", "\n", "from", "util", ".", "sequence", "import", "get_mask_from_sequence_lengths", "\n", "\n", "\n", "def", "masked_sum", "(", "scores", ",", "mask", ")", ":", "\n", "    ", "mask", "=", "mask", ".", "float", "(", ")", "\n", "x", "=", "scores", "*", "mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.relations.captions": [[18, 20], ["None"], "function", ["None"], ["x", "=", "x", ".", "sum", "(", "dim", "=", "-", "1", ")", "*", "mask", ".", "unsqueeze", "(", "1", ")", "\n", "return", "x", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricF1.__init__": [[34, 37], ["f1.MetricF1.clear"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricF1.clear"], ["    ", "def", "__init__", "(", "self", ",", "labels", ")", ":", "\n", "        ", "self", ".", "labels", "=", "labels", "\n", "self", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricF1.clear": [[38, 45], ["None"], "methods", ["None"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "tp", "=", "{", "l", ":", "0", "for", "l", "in", "self", ".", "labels", "}", "\n", "self", ".", "fp", "=", "{", "l", ":", "0", "for", "l", "in", "self", ".", "labels", "}", "\n", "self", ".", "fn", "=", "{", "l", ":", "0", "for", "l", "in", "self", ".", "labels", "}", "\n", "self", ".", "total_tp", "=", "0", "\n", "self", ".", "total_fp", "=", "0", "\n", "self", ".", "total_fn", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricF1.update": [[46, 57], ["zip"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "preds", ",", "golds", ")", ":", "\n", "        ", "for", "pred", ",", "gold", "in", "zip", "(", "preds", ",", "golds", ")", ":", "\n", "            ", "for", "_", ",", "_", ",", "label", "in", "[", "x", "for", "x", "in", "pred", "if", "x", "in", "gold", "]", ":", "\n", "                ", "self", ".", "tp", "[", "label", "]", "+=", "1", "\n", "self", ".", "total_tp", "+=", "1", "\n", "", "for", "_", ",", "_", ",", "label", "in", "[", "x", "for", "x", "in", "pred", "if", "x", "not", "in", "gold", "]", ":", "\n", "                ", "self", ".", "fp", "[", "label", "]", "+=", "1", "\n", "self", ".", "total_fp", "+=", "1", "\n", "", "for", "_", ",", "_", ",", "label", "in", "[", "x", "for", "x", "in", "gold", "if", "x", "not", "in", "pred", "]", ":", "\n", "                ", "self", ".", "fn", "[", "label", "]", "+=", "1", "\n", "self", ".", "total_fn", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricF1.print": [[58, 70], ["f1.MetricF1.print"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "", "", "def", "print", "(", "self", ",", "details", "=", "False", ")", ":", "\n", "        ", "for", "label", "in", "self", ".", "labels", ":", "\n", "            ", "tp", ",", "fp", ",", "fn", "=", "self", ".", "tp", "[", "label", "]", ",", "self", ".", "fp", "[", "label", "]", ",", "self", ".", "fn", "[", "label", "]", "\n", "pr", "=", "tp", "/", "(", "tp", "+", "fp", ")", "if", "tp", "!=", "0", "else", "0.0", "\n", "re", "=", "tp", "/", "(", "tp", "+", "fn", ")", "if", "tp", "!=", "0", "else", "0.0", "\n", "f1", "=", "2", "*", "tp", "/", "(", "2", "*", "tp", "+", "fp", "+", "fn", ")", "if", "tp", "!=", "0", "else", "0.0", "\n", "if", "details", ":", "\n", "                ", "print", "(", "'{:32}    {:5}  {:5}  {:5}    {:6.5f}  {:6.5f}  {:6.5f}'", ".", "format", "(", "label", ",", "tp", ",", "fp", ",", "fn", ",", "pr", ",", "re", ",", "f1", ")", ")", "\n", "\n", "", "", "print", "(", "'{:32}    {:5}  {:5}  {:5}    {:6.5f}  {:6.5f}  {:6.5f}'", ".", "format", "(", "''", ",", "self", ".", "total_tp", ",", "self", ".", "total_fp", ",", "\n", "self", ".", "total_fn", ",", "self", ".", "pr", "(", ")", ",", "self", ".", "re", "(", ")", ",", "\n", "self", ".", "f1", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricF1.pr": [[71, 73], ["None"], "methods", ["None"], ["", "def", "pr", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total_tp", "/", "(", "self", ".", "total_tp", "+", "self", ".", "total_fp", ")", "if", "self", ".", "total_tp", "!=", "0", "else", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricF1.re": [[74, 76], ["None"], "methods", ["None"], ["", "def", "re", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total_tp", "/", "(", "self", ".", "total_tp", "+", "self", ".", "total_fn", ")", "if", "self", ".", "total_tp", "!=", "0", "else", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricF1.f1": [[77, 79], ["None"], "methods", ["None"], ["", "def", "f1", "(", "self", ")", ":", "\n", "        ", "return", "2", "*", "self", ".", "total_tp", "/", "(", "2", "*", "self", ".", "total_tp", "+", "self", ".", "total_fp", "+", "self", ".", "total_fn", ")", "if", "self", ".", "total_tp", "!=", "0", "else", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricNERF1.__init__": [[121, 130], ["f1.MetricF1", "label.startswith"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "task", ",", "bio_labels", ",", "verbose", "=", "True", ",", "decision_function", "=", "decision_function_softmax", ")", ":", "\n", "        ", "self", ".", "task", "=", "task", "\n", "self", ".", "evaluator", "=", "MetricF1", "(", "[", "label", "[", "2", ":", "]", "for", "label", "in", "bio_labels", "if", "label", ".", "startswith", "(", "'B-'", ")", "]", ")", "\n", "self", ".", "bio_labels", "=", "bio_labels", "\n", "self", ".", "epoch", "=", "0", "\n", "self", ".", "max_f1", "=", "0", "\n", "self", ".", "max_iter", "=", "0", "\n", "self", ".", "decision_function", "=", "decision_function", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricNERF1.step": [[131, 134], ["f1.MetricNERF1.evaluator.clear"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricF1.clear"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "self", ".", "evaluator", ".", "clear", "(", ")", "\n", "self", ".", "epoch", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricNERF1.update": [[135, 140], ["f1.MetricNERF1.decision_function", "decode_segments", "decode_segments", "f1.MetricNERF1.evaluator.update"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.ner.decode_segments", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.util.ner.decode_segments", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.update"], ["", "def", "update", "(", "self", ",", "logits", ",", "targets", ",", "sequence_lengths", ",", "mask", ")", ":", "\n", "        ", "predictions", "=", "self", ".", "decision_function", "(", "logits", ",", "sequence_lengths", ",", "mask", ")", "\n", "p", "=", "decode_segments", "(", "predictions", ",", "sequence_lengths", ",", "self", ".", "bio_labels", ")", "\n", "g", "=", "decode_segments", "(", "targets", ",", "sequence_lengths", ",", "self", ".", "bio_labels", ")", "\n", "self", ".", "evaluator", ".", "update", "(", "p", ",", "g", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricNERF1.update2": [[141, 143], ["f1.MetricNERF1.update"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.update"], ["", "def", "update2", "(", "self", ",", "args", ",", "metadata", "=", "{", "}", ")", ":", "\n", "        ", "self", ".", "update", "(", "args", "[", "'scores'", "]", ",", "args", "[", "'targets'", "]", ",", "args", "[", "'sequence_lengths'", "]", ",", "args", "[", "'mask'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricNERF1.print": [[144, 159], ["f1.MetricNERF1.MetricNERF1.evaluator.f1", "f1.MetricNERF1.MetricNERF1.evaluator.print", "f1.MetricNERF1.MetricNERF1.print"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricF1.f1", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "print", "(", "self", ",", "dataset_name", ",", "details", "=", "False", ")", ":", "\n", "        ", "f1", "=", "self", ".", "evaluator", ".", "f1", "(", ")", "\n", "\n", "if", "f1", ">", "self", ".", "max_f1", ":", "\n", "            ", "self", ".", "max_f1", "=", "f1", "\n", "self", ".", "max_iter", "=", "self", ".", "epoch", "\n", "", "stall", "=", "self", ".", "epoch", "-", "self", ".", "max_iter", "\n", "\n", "self", ".", "evaluator", ".", "print", "(", "self", ".", "verbose", ")", "\n", "print", "(", "\"EVAL-NER\\t{}-{}\\tcurr-iter: {}\\tcurr-f1: {}\\tmax-iter: {}\\tmax-f1: {}\\tstall: {}\"", ".", "format", "(", "dataset_name", ",", "\n", "self", ".", "task", ",", "\n", "self", ".", "epoch", ",", "f1", ",", "\n", "self", ".", "max_iter", ",", "\n", "self", ".", "max_f1", ",", "\n", "stall", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricNERF1.log": [[160, 162], ["tb_logger.log_value", "f1.MetricNERF1.evaluator.f1"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricF1.f1"], ["", "def", "log", "(", "self", ",", "tb_logger", ",", "dataset_name", ")", ":", "\n", "        ", "tb_logger", ".", "log_value", "(", "'{}-{}/f1'", ".", "format", "(", "dataset_name", ",", "self", ".", "task", ")", ",", "self", ".", "evaluator", ".", "f1", "(", ")", ",", "self", ".", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricMultiNERF1.__init__": [[166, 173], ["f1.MetricF1", "label.startswith"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "task", ",", "bi_labels", ")", ":", "\n", "        ", "self", ".", "task", "=", "task", "\n", "self", ".", "evaluator", "=", "MetricF1", "(", "[", "label", "[", "2", ":", "]", "for", "label", "in", "bi_labels", "if", "label", ".", "startswith", "(", "'B-'", ")", "]", ")", "\n", "self", ".", "bi_labels", "=", "bi_labels", "\n", "self", ".", "epoch", "=", "0", "\n", "self", ".", "max_f1", "=", "0", "\n", "self", ".", "max_iter", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricMultiNERF1.step": [[174, 177], ["f1.MetricMultiNERF1.evaluator.clear"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricF1.clear"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "self", ".", "evaluator", ".", "clear", "(", ")", "\n", "self", ".", "epoch", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricMultiNERF1.update": [[178, 185], ["f1.decode_multiner", "f1.decode_multiner", "f1.MetricMultiNERF1.evaluator.update"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.decode_multiner", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.decode_multiner", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.update"], ["", "def", "update", "(", "self", ",", "logits", ",", "targets", ",", "args", ",", "metadata", "=", "{", "}", ")", ":", "\n", "        ", "sequence_lengths", ",", "mask", "=", "args", "[", "'sequence_lengths'", "]", ",", "args", "[", "'mask'", "]", "\n", "p", "=", "decode_multiner", "(", "logits", ",", "sequence_lengths", ",", "self", ".", "bi_labels", ")", "\n", "g", "=", "decode_multiner", "(", "targets", ",", "sequence_lengths", ",", "self", ".", "bi_labels", ")", "\n", "# print(p)", "\n", "# print(g)", "\n", "self", ".", "evaluator", ".", "update", "(", "p", ",", "g", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricMultiNERF1.update2": [[186, 188], ["f1.MetricMultiNERF1.update"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.update"], ["", "def", "update2", "(", "self", ",", "args", ",", "metadata", "=", "{", "}", ")", ":", "\n", "        ", "self", ".", "update", "(", "args", "[", "'pred'", "]", ",", "args", "[", "'gold'", "]", ",", "metadata", "=", "metadata", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricMultiNERF1.print": [[189, 204], ["f1.MetricMultiNERF1.MetricMultiNERF1.evaluator.f1", "f1.MetricMultiNERF1.MetricMultiNERF1.evaluator.print", "f1.MetricMultiNERF1.MetricMultiNERF1.print"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricF1.f1", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "print", "(", "self", ",", "dataset_name", ",", "details", "=", "False", ")", ":", "\n", "        ", "f1", "=", "self", ".", "evaluator", ".", "f1", "(", ")", "\n", "\n", "if", "f1", ">", "self", ".", "max_f1", ":", "\n", "            ", "self", ".", "max_f1", "=", "f1", "\n", "self", ".", "max_iter", "=", "self", ".", "epoch", "\n", "", "stall", "=", "self", ".", "epoch", "-", "self", ".", "max_iter", "\n", "\n", "self", ".", "evaluator", ".", "print", "(", "details", ")", "\n", "print", "(", "\"EVAL-NER\\t{}-{}\\tcurr-iter: {}\\tcurr-f1: {}\\tmax-iter: {}\\tmax-f1: {}\\tstall: {}\"", ".", "format", "(", "dataset_name", ",", "\n", "self", ".", "task", ",", "\n", "self", ".", "epoch", ",", "f1", ",", "\n", "self", ".", "max_iter", ",", "\n", "self", ".", "max_f1", ",", "\n", "stall", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricMultiNERF1.log": [[205, 207], ["tb_logger.log_value", "f1.MetricMultiNERF1.evaluator.f1"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricF1.f1"], ["", "def", "log", "(", "self", ",", "tb_logger", ",", "dataset_name", ")", ":", "\n", "        ", "tb_logger", ".", "log_value", "(", "'{}/{}-f1'", ".", "format", "(", "dataset_name", ",", "self", ".", "task", ")", ",", "self", ".", "evaluator", ".", "f1", "(", ")", ",", "self", ".", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricRelationF1.__init__": [[222, 229], ["f1.MetricF1"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "labels", ")", ":", "\n", "        ", "self", ".", "task", "=", "name", "\n", "self", ".", "evaluator", "=", "MetricF1", "(", "labels", ")", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "iter", "=", "0", "\n", "self", ".", "max_f1", "=", "0", "\n", "self", ".", "max_iter", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricRelationF1.step": [[230, 233], ["f1.MetricRelationF1.evaluator.clear"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricF1.clear"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "self", ".", "evaluator", ".", "clear", "(", ")", "\n", "self", ".", "iter", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricRelationF1.update": [[234, 243], ["f1.decode_relations", "f1.decode_relations", "f1.MetricRelationF1.evaluator.update", "logits.size", "targets.size", "BaseException", "logits.size", "targets.size"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.decode_relations", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.decode_relations", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.update"], ["", "def", "update", "(", "self", ",", "logits", ",", "targets", ",", "args", ",", "metadata", "=", "{", "}", ")", ":", "\n", "        ", "if", "logits", ".", "size", "(", ")", "!=", "targets", ".", "size", "(", ")", ":", "\n", "            ", "raise", "BaseException", "(", "\"invalid dims\"", ",", "logits", ".", "size", "(", ")", ",", "targets", ".", "size", "(", ")", ")", "\n", "", "concept_lengths", "=", "args", "[", "'concept_lengths'", "]", "\n", "p", "=", "decode_relations", "(", "logits", ",", "concept_lengths", ",", "self", ".", "labels", ")", "\n", "g", "=", "decode_relations", "(", "targets", ",", "concept_lengths", ",", "self", ".", "labels", ")", "\n", "# print('pred:', p)", "\n", "# print('gold:', g)", "\n", "self", ".", "evaluator", ".", "update", "(", "p", ",", "g", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricRelationF1.update2": [[244, 246], ["f1.MetricRelationF1.print"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "update2", "(", "self", ",", "args", ",", "metadata", "=", "{", "}", ")", ":", "\n", "        ", "print", "(", "\"TODO\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricRelationF1.print": [[247, 258], ["f1.MetricRelationF1.MetricRelationF1.evaluator.f1", "f1.MetricRelationF1.MetricRelationF1.evaluator.print", "f1.MetricRelationF1.MetricRelationF1.print"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricF1.f1", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "print", "(", "self", ",", "dataset_name", ",", "details", "=", "False", ")", ":", "\n", "        ", "f1", "=", "self", ".", "evaluator", ".", "f1", "(", ")", "\n", "\n", "if", "f1", ">", "self", ".", "max_f1", ":", "\n", "            ", "self", ".", "max_f1", "=", "f1", "\n", "self", ".", "max_iter", "=", "self", ".", "iter", "\n", "", "stall", "=", "self", ".", "iter", "-", "self", ".", "max_iter", "\n", "\n", "self", ".", "evaluator", ".", "print", "(", "details", ")", "\n", "print", "(", "\"EVAL-REL\\tdataset: {}\\tcurr-iter: {}\\tcurr-f1: {}\\tmax-iter: {}\\tmax-f1: {}\\tstall: {}\"", ".", "format", "(", "\n", "dataset_name", ",", "self", ".", "iter", ",", "f1", ",", "self", ".", "max_iter", ",", "self", ".", "max_f1", ",", "stall", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricRelationF1.log": [[259, 261], ["tb_logger.log_value", "f1.MetricRelationF1.evaluator.f1"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricF1.f1"], ["", "def", "log", "(", "self", ",", "tb_logger", ",", "dataset_name", ")", ":", "\n", "        ", "tb_logger", ".", "log_value", "(", "'{}/{}-f1'", ".", "format", "(", "dataset_name", ",", "self", ".", "task", ")", ",", "self", ".", "evaluator", ".", "f1", "(", ")", ",", "self", ".", "iter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.__init__": [[265, 279], ["f1.MetricF1", "BaseException", "label.startswith"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "task", ",", "verbose", "=", "False", ",", "labels", "=", "None", ",", "bio_labels", "=", "None", ")", ":", "\n", "        ", "if", "labels", "is", "not", "None", ":", "\n", "            ", "self", ".", "labels", "=", "labels", "\n", "", "elif", "bio_labels", "is", "not", "None", ":", "\n", "            ", "self", ".", "labels", "=", "[", "label", "[", "2", ":", "]", "for", "label", "in", "bio_labels", "if", "label", ".", "startswith", "(", "'B-'", ")", "]", "\n", "", "else", ":", "\n", "            ", "raise", "BaseException", "(", "\"no labels\"", ")", "\n", "\n", "", "self", ".", "task", "=", "task", "\n", "self", ".", "evaluator", "=", "MetricF1", "(", "self", ".", "labels", ")", "\n", "self", ".", "iter", "=", "0", "\n", "self", ".", "max_f1", "=", "0", "\n", "self", ".", "max_iter", "=", "0", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.step": [[280, 283], ["f1.MetricSpanNER.evaluator.clear"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricF1.clear"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "self", ".", "evaluator", ".", "clear", "(", ")", "\n", "self", ".", "iter", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.update": [[284, 286], ["f1.MetricSpanNER.evaluator.update"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.update"], ["", "def", "update", "(", "self", ",", "pred", ",", "gold", ",", "metadata", "=", "{", "}", ")", ":", "\n", "        ", "self", ".", "evaluator", ".", "update", "(", "pred", ",", "gold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.update2": [[287, 289], ["f1.MetricSpanNER.update"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.update"], ["", "def", "update2", "(", "self", ",", "args", ",", "metadata", "=", "{", "}", ")", ":", "\n", "        ", "self", ".", "update", "(", "args", "[", "'pred'", "]", ",", "args", "[", "'gold'", "]", ",", "metadata", "=", "metadata", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print": [[290, 306], ["f1.MetricSpanNER.MetricSpanNER.evaluator.f1", "f1.MetricSpanNER.MetricSpanNER.evaluator.print", "f1.MetricSpanNER.MetricSpanNER.print"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricF1.f1", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.print"], ["", "def", "print", "(", "self", ",", "dataset_name", ",", "details", "=", "False", ")", ":", "\n", "        ", "f1", "=", "self", ".", "evaluator", ".", "f1", "(", ")", "\n", "\n", "if", "f1", ">", "self", ".", "max_f1", ":", "\n", "            ", "self", ".", "max_f1", "=", "f1", "\n", "self", ".", "max_iter", "=", "self", ".", "iter", "\n", "", "stall", "=", "self", ".", "iter", "-", "self", ".", "max_iter", "\n", "\n", "self", ".", "evaluator", ".", "print", "(", "self", ".", "verbose", ")", "\n", "\n", "print", "(", "\"EVAL-NER\\t{}-{}\\tcurr-iter: {}\\tcurr-f1: {}\\tmax-iter: {}\\tmax-f1: {}\\tstall: {}\"", ".", "format", "(", "dataset_name", ",", "\n", "self", ".", "task", ",", "\n", "self", ".", "iter", ",", "f1", ",", "\n", "self", ".", "max_iter", ",", "\n", "self", ".", "max_f1", ",", "\n", "stall", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricSpanNER.log": [[307, 310], ["tb_logger.log_value", "f1.MetricSpanNER.evaluator.f1"], "methods", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.MetricF1.f1"], ["", "def", "log", "(", "self", ",", "tb_logger", ",", "dataset_name", ")", ":", "\n", "# tb_logger.log_value('{}/f1'.format(dataset_name), self.evaluator.f1(), self.iter)", "\n", "        ", "tb_logger", ".", "log_value", "(", "'metrics/f1'", ",", "self", ".", "evaluator", ".", "f1", "(", ")", ",", "self", ".", "iter", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.decode_multiner": [[6, 30], ["targets.data.cpu", "enumerate", "sequence_lengths.tolist", "numpy.argwhere().tolist", "enumerate", "state_begin.keys", "decoded.append", "labels[].startswith", "segments.append", "numpy.argwhere", "labels[].startswith", "segments.append", "tmp[].numpy"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist"], ["def", "decode_multiner", "(", "targets", ",", "sequence_lengths", ",", "labels", ")", ":", "\n", "    ", "decoded", "=", "[", "]", "\n", "tmp", "=", "targets", ".", "data", ".", "cpu", "(", ")", "\n", "for", "b", ",", "length", "in", "enumerate", "(", "sequence_lengths", ".", "tolist", "(", ")", ")", ":", "\n", "        ", "segments", "=", "[", "]", "\n", "\n", "enabled", "=", "np", ".", "argwhere", "(", "tmp", "[", "b", ",", "0", ":", "length", ",", ":", "]", ".", "numpy", "(", ")", ">", "0", ")", ".", "tolist", "(", ")", "\n", "state_begin", "=", "{", "}", "\n", "state_end", "=", "{", "}", "\n", "for", "i", ",", "(", "pos", ",", "idx", ")", "in", "enumerate", "(", "enabled", ")", ":", "\n", "            ", "label", "=", "labels", "[", "idx", "]", "[", "2", ":", "]", "\n", "if", "labels", "[", "idx", "]", ".", "startswith", "(", "'B-'", ")", ":", "\n", "                ", "if", "label", "in", "state_begin", ":", "\n", "                    ", "segments", ".", "append", "(", "(", "state_begin", "[", "label", "]", ",", "state_end", "[", "label", "]", ",", "label", ")", ")", "\n", "", "state_begin", "[", "label", "]", "=", "pos", "\n", "state_end", "[", "label", "]", "=", "pos", "+", "1", "\n", "", "elif", "labels", "[", "idx", "]", ".", "startswith", "(", "'I-'", ")", ":", "\n", "                ", "if", "label", "in", "state_end", "and", "state_end", "[", "label", "]", "==", "pos", ":", "\n", "                    ", "state_end", "[", "label", "]", "=", "pos", "+", "1", "\n", "", "", "", "for", "label", "in", "state_begin", ".", "keys", "(", ")", ":", "\n", "            ", "segments", ".", "append", "(", "(", "state_begin", "[", "label", "]", ",", "state_end", "[", "label", "]", ",", "label", ")", ")", "\n", "\n", "", "decoded", ".", "append", "(", "segments", ")", "\n", "", "return", "decoded", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.decision_function_softmax": [[115, 117], ["torch.max"], "function", ["None"], ["", "", "def", "decision_function_softmax", "(", "logits", ",", "sequence_lengths", ",", "mask", ")", ":", "\n", "    ", "return", "torch", ".", "max", "(", "logits", ",", "2", ")", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.metrics.f1.decode_relations": [[209, 218], ["targets.data.cpu", "enumerate", "sequence_lengths.tolist", "numpy.argwhere().tolist", "relations.append", "rels.append", "numpy.argwhere", "tmp[].numpy"], "function", ["home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist", "home.repos.pwc.inspect_result.klimzaporojets_consistent-el.datass.dictionary.Dictionary.tolist"], ["", "", "def", "decode_relations", "(", "targets", ",", "sequence_lengths", ",", "labels", ")", ":", "\n", "    ", "tmp", "=", "targets", ".", "data", ".", "cpu", "(", ")", "\n", "relations", "=", "[", "]", "\n", "for", "b", ",", "length", "in", "enumerate", "(", "sequence_lengths", ".", "tolist", "(", ")", ")", ":", "\n", "        ", "rels", "=", "[", "]", "\n", "for", "r", ",", "s", ",", "o", "in", "np", ".", "argwhere", "(", "tmp", "[", "b", ",", ":", ",", "0", ":", "length", ",", "0", ":", "length", "]", ".", "numpy", "(", ")", ">", "0", ")", ".", "tolist", "(", ")", ":", "\n", "            ", "rels", ".", "append", "(", "(", "s", ",", "o", ",", "labels", "[", "r", "]", ")", ")", "\n", "", "relations", ".", "append", "(", "rels", ")", "\n", "", "return", "relations", "\n", "\n"]]}