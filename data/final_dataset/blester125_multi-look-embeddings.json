{"home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.attested.lowercase": [[11, 15], ["t.lower"], "function", ["None"], ["def", "lowercase", "(", "tokens", ":", "List", "[", "List", "[", "str", "]", "]", ")", "->", "List", "[", "List", "[", "str", "]", "]", ":", "\n", "    ", "return", "[", "\n", "[", "t", ".", "lower", "(", ")", "for", "t", "in", "example", "]", "\n", "for", "example", "in", "tokens", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.attested.calc_attested": [[18, 36], ["collections.Counter", "dict.items", "sum", "itertools.chain", "dict", "dict.values", "len", "dict.most_common", "len"], "function", ["None"], ["", "def", "calc_attested", "(", "dataset", ":", "List", "[", "List", "[", "str", "]", "]", ",", "vocab", ":", "Union", "[", "Set", "[", "str", "]", ",", "Dict", "[", "str", ",", "int", "]", "]", ",", "limit", ":", "Optional", "[", "int", "]", "=", "None", ")", ":", "\n", "    ", "counts", "=", "Counter", "(", "chain", "(", "*", "dataset", ")", ")", "\n", "if", "limit", "is", "not", "None", ":", "\n", "        ", "counts", "=", "dict", "(", "counts", ".", "most_common", "(", "limit", ")", ")", "\n", "", "types", "=", "0", "\n", "tokens", "=", "0", "\n", "for", "word", ",", "count", "in", "counts", ".", "items", "(", ")", ":", "\n", "        ", "if", "word", "in", "vocab", ":", "\n", "            ", "types", "+=", "1", "\n", "tokens", "+=", "count", "\n", "", "", "tok_count", "=", "sum", "(", "counts", ".", "values", "(", ")", ")", "\n", "return", "{", "\n", "\"types\"", ":", "types", ",", "\n", "\"tokens\"", ":", "tokens", ",", "\n", "\"type_percent\"", ":", "types", "/", "len", "(", "counts", ")", "*", "100", ",", "\n", "\"tokens_percent\"", ":", "tokens", "/", "tok_count", "*", "100", ",", "\n", "\"total_types\"", ":", "len", "(", "counts", ")", ",", "\n", "\"total_tokens\"", ":", "tok_count", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.attested.main": [[39, 94], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "utils.load_embeddings", "utils.load_dataset", "list", "utils.load_dataset.items", "print", "len", "functools.reduce", "itertools.chain", "utils.load_embeddings.items", "tabulate.tabulate", "attested.lowercase", "attested.append", "attested[].update", "utils.load_dataset.items", "set", "utils.load_dataset.values", "attested.calc_attested", "v[].keys", "utils.load_embeddings.values", "set", "set", "[].keys", "[].keys"], "function", ["home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.utils.load_embeddings", "home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.utils.load_dataset", "home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.attested.lowercase", "home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.attested.calc_attested"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Calculate how many words in the dataset are attested in the pretrained vocab\"", ")", "\n", "parser", ".", "add_argument", "(", "\"embeddings\"", ",", "nargs", "=", "\"+\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--embeddings_index\"", ",", "\"--embeddings-index\"", ",", "default", "=", "\"configs/embeddings.json\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--cache\"", ",", "default", "=", "\"data\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dataset\"", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--datasets_index\"", ",", "\"--datasets-index\"", ",", "default", "=", "\"configs/datasets.json\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data_type\"", ",", "\"--data-type\"", ",", "default", "=", "\"conll\"", ",", "choices", "=", "(", "\"conll\"", ",", "\"label-first\"", ",", "\"parallel\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\"--surface_index\"", ",", "\"--surface-index\"", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--lowercase\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--top_k\"", ",", "\"--top-k\"", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--delim\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "embeddings", "=", "load_embeddings", "(", "args", ".", "embeddings", ",", "args", ".", "embeddings_index", ",", "args", ".", "cache", ")", "\n", "\n", "read", "=", "read_conll_dataset", "if", "args", ".", "data_type", "==", "\"conll\"", "else", "read_label_first", "\n", "if", "args", ".", "data_type", "==", "\"conll\"", ":", "\n", "        ", "read", "=", "read_conll_dataset", "\n", "", "elif", "args", ".", "data_type", "==", "\"label-first\"", ":", "\n", "        ", "read", "=", "read_label_first", "\n", "", "else", ":", "\n", "        ", "read", "=", "read_parallel", "\n", "\n", "", "dataset", "=", "load_dataset", "(", "\n", "args", ".", "dataset", ",", "\n", "args", ".", "datasets_index", ",", "\n", "args", ".", "cache", ",", "\n", "read", "=", "read", ",", "\n", "surface_index", "=", "args", ".", "surface_index", ",", "\n", "delim", "=", "args", ".", "delim", "\n", ")", "\n", "\n", "if", "args", ".", "lowercase", ":", "\n", "        ", "dataset", "=", "{", "k", ":", "lowercase", "(", "v", ")", "for", "k", ",", "v", "in", "dataset", ".", "items", "(", ")", "}", "\n", "\n", "", "if", "len", "(", "args", ".", "embeddings", ")", ">", "1", ":", "\n", "        ", "joint_vocab", "=", "reduce", "(", "or_", ",", "(", "set", "(", "v", "[", "0", "]", ".", "keys", "(", ")", ")", "for", "v", "in", "embeddings", ".", "values", "(", ")", ")", ")", "\n", "\n", "for", "embedding", "in", "args", ".", "embeddings", "[", "1", ":", "]", ":", "\n", "            ", "embeddings", "[", "f\"{embedding} - {args.embeddings[0]}\"", "]", "=", "(", "set", "(", "embeddings", "[", "embedding", "]", "[", "0", "]", ".", "keys", "(", ")", ")", "-", "set", "(", "embeddings", "[", "args", ".", "embeddings", "[", "0", "]", "]", "[", "0", "]", ".", "keys", "(", ")", ")", ",", "None", ")", "\n", "", "embeddings", "[", "\"joint\"", "]", "=", "(", "joint_vocab", ",", "None", ")", "\n", "\n", "", "dataset", "[", "'full'", "]", "=", "list", "(", "chain", "(", "*", "dataset", ".", "values", "(", ")", ")", ")", "\n", "\n", "attested", "=", "[", "]", "\n", "for", "dataset_name", ",", "data", "in", "dataset", ".", "items", "(", ")", ":", "\n", "        ", "for", "name", ",", "(", "vocab", ",", "_", ")", "in", "embeddings", ".", "items", "(", ")", ":", "\n", "            ", "attested", ".", "append", "(", "{", "\n", "\"dataset\"", ":", "dataset_name", ",", "\n", "\"embedding\"", ":", "name", ",", "\n", "}", ")", "\n", "attested", "[", "-", "1", "]", ".", "update", "(", "calc_attested", "(", "data", ",", "vocab", ",", "args", ".", "top_k", ")", ")", "\n", "\n", "", "", "print", "(", "tabulate", "(", "attested", ",", "headers", "=", "\"keys\"", ",", "tablefmt", "=", "\"psql\"", ",", "floatfmt", "=", "\".2f\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.learn-transformation.EmbeddingMapping.__init__": [[26, 31], ["super().__init__", "eight_mile.tf.embeddings.LookupTableEmbeddings", "eight_mile.tf.embeddings.LookupTableEmbeddings", "tensorflow.keras.layers.Dense"], "methods", ["home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.jaccard-overlap.NearestNeighbors.__init__"], ["    ", "def", "__init__", "(", "self", ",", "src", ",", "tgt", ",", "bias", ":", "bool", "=", "True", ",", "trainable", ":", "bool", "=", "True", ",", "dtype", "=", "tf", ".", "float32", ",", "name", ":", "Optional", "[", "str", "]", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "trainable", "=", "trainable", ",", "dtype", "=", "dtype", ",", "name", "=", "name", ")", "\n", "self", ".", "src", "=", "LookupTableEmbeddings", "(", "trainable", "=", "False", ",", "name", "=", "\"source_embeddings\"", ",", "weights", "=", "src", ")", "\n", "self", ".", "tgt", "=", "LookupTableEmbeddings", "(", "trainable", "=", "False", ",", "name", "=", "\"target_embeddings\"", ",", "weights", "=", "tgt", ")", "\n", "self", ".", "mapping", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "self", ".", "tgt", ".", "output_dim", ",", "activation", "=", "None", ",", "use_bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.learn-transformation.EmbeddingMapping.call": [[32, 34], ["learn-transformation.EmbeddingMapping.mapping", "learn-transformation.EmbeddingMapping.src"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "mapping", "(", "self", ".", "src", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.learn-transformation.EmbeddingMapping.loss": [[35, 39], ["learn-transformation.EmbeddingMapping.", "learn-transformation.EmbeddingMapping.tgt", "tensorflow.reduce_mean", "tensorflow.reduce_sum", "tensorflow.square", "tensorflow.subtract"], "methods", ["None"], ["", "def", "loss", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "w", "=", "self", "(", "x", ")", "\n", "z", "=", "self", ".", "tgt", "(", "y", ")", "\n", "return", "tf", ".", "reduce_mean", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "tf", ".", "subtract", "(", "w", ",", "z", ")", ")", ",", "axis", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.learn-transformation.norm_vectors": [[10, 14], ["numpy.linalg.norm"], "function", ["None"], ["def", "norm_vectors", "(", "vectors", ")", ":", "\n", "    ", "norms", "=", "np", ".", "linalg", ".", "norm", "(", "vectors", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "norms", "=", "(", "norms", "==", "0", ")", "+", "norms", "\n", "return", "vectors", "/", "norms", "\n", "\n"]], "home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.learn-transformation.prune_vectors": [[16, 23], ["numpy.zeros", "enumerate", "len"], "function", ["None"], ["", "def", "prune_vectors", "(", "words", ",", "vocab", ",", "vectors", ")", ":", "\n", "    ", "new_vectors", "=", "np", ".", "zeros", "(", "(", "len", "(", "words", ")", ",", "vectors", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "vectors", ".", "dtype", ")", "\n", "new_vocab", "=", "{", "}", "\n", "for", "i", ",", "word", "in", "enumerate", "(", "words", ")", ":", "\n", "        ", "new_vectors", "[", "i", ",", ":", "]", "=", "vectors", "[", "vocab", "[", "word", "]", "]", "\n", "new_vocab", "[", "word", "]", "=", "i", "\n", "", "return", "new_vocab", ",", "new_vectors", "\n", "\n"]], "home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.learn-transformation.main": [[41, 86], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "utils.load_embeddings", "list", "learn-transformation.prune_vectors", "learn-transformation.prune_vectors", "learn-transformation.norm_vectors", "learn-transformation.norm_vectors", "learn-transformation.EmbeddingMapping", "tensorflow.keras.optimizers.Adam", "range", "random.shuffle", "print", "print", "set", "set", "src_vocab.keys", "tgt_vocab.keys", "range", "tensorflow.GradientTape", "learn-transformation.EmbeddingMapping.loss", "tape.gradient", "tf.keras.optimizers.Adam.apply_gradients", "m.loss.numpy().item", "len", "len", "zip", "tensorflow.norm().numpy", "m.loss.numpy", "len", "tensorflow.norm"], "function", ["home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.utils.load_embeddings", "home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.learn-transformation.prune_vectors", "home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.learn-transformation.prune_vectors", "home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.learn-transformation.norm_vectors", "home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.learn-transformation.norm_vectors", "home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.learn-transformation.EmbeddingMapping.loss"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Learn a transformation between two embedding spaces.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"embeddings\"", ",", "nargs", "=", "2", ")", "\n", "parser", ".", "add_argument", "(", "\"--embeddings_index\"", ",", "\"--embeddings-index\"", ",", "default", "=", "\"configs/embeddings.json\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--cache\"", ",", "default", "=", "\"data\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--no_bias\"", ",", "\"--no-bias\"", ",", "action", "=", "\"store_false\"", ",", "dest", "=", "\"bias\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--epochs\"", ",", "default", "=", "10", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--batchsz\"", ",", "default", "=", "64", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--optim\"", ",", "default", "=", "\"adam\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--eta\"", ",", "default", "=", "3e-4", ",", "type", "=", "float", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "embeddings", "=", "load_embeddings", "(", "args", ".", "embeddings", ",", "args", ".", "embeddings_index", ",", "args", ".", "cache", ")", "\n", "\n", "src_vocab", ",", "src_vectors", "=", "embeddings", "[", "args", ".", "embeddings", "[", "0", "]", "]", "\n", "tgt_vocab", ",", "tgt_vectors", "=", "embeddings", "[", "args", ".", "embeddings", "[", "1", "]", "]", "\n", "\n", "shared_words", "=", "list", "(", "set", "(", "src_vocab", ".", "keys", "(", ")", ")", "&", "set", "(", "tgt_vocab", ".", "keys", "(", ")", ")", ")", "\n", "\n", "src_vocab", ",", "src_vectors", "=", "prune_vectors", "(", "shared_words", ",", "src_vocab", ",", "src_vectors", ")", "\n", "tgt_vocab", ",", "tgt_vectors", "=", "prune_vectors", "(", "shared_words", ",", "tgt_vocab", ",", "tgt_vectors", ")", "\n", "\n", "src_vectors", "=", "norm_vectors", "(", "src_vectors", ")", "\n", "tgt_vectors", "=", "norm_vectors", "(", "tgt_vectors", ")", "\n", "\n", "m", "=", "EmbeddingMapping", "(", "\n", "src_vectors", ",", "\n", "tgt_vectors", ",", "\n", "args", ".", "bias", "\n", ")", "\n", "optim", "=", "tf", ".", "keras", ".", "optimizers", ".", "Adam", "(", "learning_rate", "=", "args", ".", "eta", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "        ", "total_loss", "=", "0", "\n", "random", ".", "shuffle", "(", "shared_words", ")", "\n", "for", "batch", "in", "(", "shared_words", "[", "i", ":", "i", "+", "args", ".", "batchsz", "]", "for", "i", "in", "range", "(", "0", ",", "len", "(", "shared_words", ")", ",", "args", ".", "batchsz", ")", ")", ":", "\n", "            ", "x", "=", "[", "src_vocab", "[", "w", "]", "for", "w", "in", "batch", "]", "\n", "y", "=", "[", "tgt_vocab", "[", "y", "]", "for", "y", "in", "batch", "]", "\n", "with", "tf", ".", "GradientTape", "(", ")", "as", "tape", ":", "\n", "                ", "loss", "=", "m", ".", "loss", "(", "x", ",", "y", ")", "\n", "grads", "=", "tape", ".", "gradient", "(", "loss", ",", "m", ".", "trainable_variables", ")", "\n", "optim", ".", "apply_gradients", "(", "zip", "(", "grads", ",", "m", ".", "trainable_variables", ")", ")", "\n", "", "total_loss", "+=", "loss", ".", "numpy", "(", ")", ".", "item", "(", ")", "*", "len", "(", "batch", ")", "\n", "", "print", "(", "f\"Epoch: {epoch + 1} Loss: {total_loss / len(shared_words)}\"", ")", "\n", "print", "(", "f\"Frobenius Norm of the weight: {tf.norm(m.trainable_variables[0], ord='fro', axis=(0, 1)).numpy()}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.complement-vocab.complement_vocab": [[18, 30], ["new_vocab.items", "numpy.array", "len", "np.array.append"], "function", ["None"], ["def", "complement_vocab", "(", "base_vocab", ":", "wv", ".", "Vocab", ",", "new_vocab", ":", "wv", ".", "Vocab", ",", "new_vectors", ":", "wv", ".", "Vectors", ")", "->", "Tuple", "[", "wv", ".", "Vocab", ",", "wv", ".", "Vectors", "]", ":", "\n", "    ", "new_new_vectors", "=", "[", "]", "\n", "new_new_vocab", "=", "{", "}", "\n", "new_idx", "=", "0", "\n", "for", "word", ",", "idx", ",", "in", "new_vocab", ".", "items", "(", ")", ":", "\n", "        ", "if", "word", "not", "in", "base_vocab", "and", "word", "not", "in", "new_new_vocab", ":", "\n", "            ", "new_new_vocab", "[", "word", "]", "=", "new_idx", "\n", "new_idx", "+=", "1", "\n", "new_new_vectors", ".", "append", "(", "new_vectors", "[", "idx", "]", ")", "\n", "", "", "new_new_vectors", "=", "np", ".", "array", "(", "new_new_vectors", ")", "\n", "assert", "len", "(", "new_new_vocab", ")", "==", "new_new_vectors", ".", "shape", "[", "0", "]", "\n", "return", "new_new_vocab", ",", "new_new_vectors", "\n", "\n"]], "home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.complement-vocab.main": [[32, 100], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "utils.load_embeddings", "zip", "print", "len", "ValueError", "len", "ValueError", "complement-vocab.complement_vocab", "json.dumps", "utils.required_length", "os.path.join", "len", "len", "embedding_info.append", "utils.write_embeddings", "LOGGER.warning", "enumerate", "enumerate", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.utils.load_embeddings", "home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.complement-vocab.complement_vocab", "home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.utils.required_length", "home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.utils.write_embeddings"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "\"Prune pretrained embeddings vocabs so each one only include words not found in the previous embeddings.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"embeddings\"", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "action", "=", "required_length", "(", "2", ")", ",", "\n", "help", "=", "\"The pretrained embeddings to process, the each embedding is processed relative to the previous ones\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--embeddings_index\"", ",", "\"--embeddings-index\"", ",", "default", "=", "\"configs/embeddings.json\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--cache\"", ",", "default", "=", "\"data\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--output_format\"", ",", "\"--output-format\"", ",", "default", "=", "\"w2v\"", ",", "choices", "=", "(", "\"glove\"", ",", "\"w2v\"", ")", ",", "type", "=", "parse_file_type", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--output_labels\"", ",", "\"--output-labels\"", ",", "nargs", "=", "\"+\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--output_files\"", ",", "\"--output-files\"", ",", "nargs", "=", "\"+\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "args", ".", "output_labels", "=", "(", "\n", "[", "\n", "f\"{embed}-pruned-to-complement-{'-'.join(args.embeddings[:i])}\"", "\n", "for", "i", ",", "embed", "in", "enumerate", "(", "args", ".", "embeddings", "[", "1", ":", "]", ",", "1", ")", "\n", "]", "\n", "if", "args", ".", "output_labels", "is", "None", "\n", "else", "args", ".", "output_labels", "\n", ")", "\n", "\n", "args", ".", "output_files", "=", "(", "\n", "[", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "cache", ",", "f\"{embed}-pruned-to-complement-{'-'.join(args.embeddings[:i])}\"", ")", "\n", "for", "i", ",", "embed", "in", "enumerate", "(", "args", ".", "embeddings", "[", "1", ":", "]", ",", "1", ")", "\n", "]", "\n", "if", "args", ".", "output_files", "is", "None", "\n", "else", "args", ".", "output_files", "\n", ")", "\n", "\n", "if", "len", "(", "args", ".", "output_labels", ")", "!=", "len", "(", "args", ".", "embeddings", ")", "-", "1", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "f\"Supplied output labels must be provided for each embedding you are matching, needed {len(args.embeddings) - 1} labels got {len(args.output_labels)}\"", "\n", ")", "\n", "\n", "", "if", "len", "(", "args", ".", "output_files", ")", "!=", "len", "(", "args", ".", "embeddings", ")", "-", "1", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "f\"Supplied output files must be provided for each embedding you are matching, needed {len(args.embeddings) - 1} files got {len(args.output_files)}\"", "\n", ")", "\n", "\n", "", "embeddings", "=", "load_embeddings", "(", "args", ".", "embeddings", ",", "args", ".", "embeddings_index", ",", "args", ".", "cache", ")", "\n", "\n", "base_vocab", ",", "_", "=", "embeddings", "[", "args", ".", "embeddings", "[", "0", "]", "]", "\n", "\n", "embedding_info", "=", "[", "]", "\n", "\n", "for", "embed_label", ",", "label", ",", "output", "in", "zip", "(", "args", ".", "embeddings", "[", "1", ":", "]", ",", "args", ".", "output_labels", ",", "args", ".", "output_files", ")", ":", "\n", "        ", "new_vocab", ",", "new_vectors", "=", "embeddings", "[", "embed_label", "]", "\n", "vocab", ",", "vectors", "=", "complement_vocab", "(", "base_vocab", ",", "new_vocab", ",", "new_vectors", ")", "\n", "if", "vocab", ":", "\n", "            ", "embedding_info", ".", "append", "(", "{", "\"label\"", ":", "label", ",", "\"file\"", ":", "output", ",", "\"dsz\"", ":", "vectors", ".", "shape", "[", "1", "]", "}", ")", "\n", "write_embeddings", "(", "output", ",", "vocab", ",", "vectors", ",", "args", ".", "output_format", ")", "\n", "for", "w", "in", "vocab", ":", "\n", "                ", "base_vocab", "[", "w", "]", "=", "len", "(", "base_vocab", ")", "\n", "", "", "else", ":", "\n", "            ", "LOGGER", ".", "warning", "(", "\n", "\"Pretrained Embeddings %s did not add anything new to the clumulative vocabulary, not saving any vectors.\"", ",", "\n", "label", ",", "\n", ")", "\n", "\n", "", "", "print", "(", "json", ".", "dumps", "(", "embedding_info", ",", "indent", "=", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.jaccard-overlap.NearestNeighbors.__init__": [[20, 27], ["faiss.IndexFlatIP", "faiss.normalize_L2", "jaccard-overlap.NearestNeighbors.index.add", "vocab.items"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "vocab", ",", "vectors", ")", ":", "\n", "        ", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "rev_vocab", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "vocab", ".", "items", "(", ")", "}", "\n", "self", ".", "index", "=", "faiss", ".", "IndexFlatIP", "(", "vectors", ".", "shape", "[", "1", "]", ")", "\n", "faiss", ".", "normalize_L2", "(", "vectors", ")", "\n", "self", ".", "index", ".", "add", "(", "vectors", ")", "\n", "self", ".", "vectors", "=", "vectors", "\n", "\n"]], "home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.jaccard-overlap.NearestNeighbors.nearest": [[28, 36], ["jaccard-overlap.NearestNeighbors.index.search", "set", "set", "numpy.expand_dims"], "methods", ["None"], ["", "def", "nearest", "(", "self", ",", "word", ":", "str", ",", "k", ":", "int", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "if", "word", "not", "in", "self", ".", "vocab", ":", "\n", "            ", "return", "set", "(", ")", "\n", "", "vector", "=", "self", ".", "vectors", "[", "self", ".", "vocab", "[", "word", "]", "]", "\n", "_", ",", "I", "=", "self", ".", "index", ".", "search", "(", "np", ".", "expand_dims", "(", "vector", ",", "0", ")", ",", "k", "+", "1", ")", "\n", "# Skip over yourself", "\n", "words", "=", "set", "(", "self", ".", "rev_vocab", "[", "i", "]", "for", "i", "in", "I", "[", "0", "]", "[", "1", ":", "]", ")", "\n", "return", "words", "\n", "\n"]], "home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.jaccard-overlap.jaccard": [[12, 17], ["len", "len", "len"], "function", ["None"], ["def", "jaccard", "(", "a", ":", "Set", ",", "b", ":", "Set", ")", "->", "float", ":", "\n", "    ", "denom", "=", "a", "|", "b", "\n", "if", "len", "(", "denom", ")", "==", "0", ":", "\n", "        ", "return", "0", "\n", "", "return", "len", "(", "a", "&", "b", ")", "/", "len", "(", "denom", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.jaccard-overlap.frequencies": [[38, 41], ["collections.Counter", "set", "filter", "map", "itertools.chain"], "function", ["None"], ["", "", "def", "frequencies", "(", "tokens", ":", "List", "[", "List", "[", "str", "]", "]", ",", "transform", ":", "Callable", "[", "[", "str", "]", ",", "str", "]", "=", "lambda", "x", ":", "x", ",", "filter_tokens", ":", "Optional", "[", "Set", "[", "str", "]", "]", "=", "None", ")", "->", "CounterType", "[", "str", "]", ":", "\n", "    ", "filter_tokens", "=", "set", "(", ")", "if", "filter_tokens", "is", "None", "else", "filter_tokens", "\n", "return", "Counter", "(", "filter", "(", "lambda", "x", ":", "x", "not", "in", "filter_tokens", ",", "map", "(", "transform", ",", "chain", "(", "*", "tokens", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.jaccard-overlap.main": [[44, 82], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "utils.load_embeddings", "utils.load_dataset", "jaccard-overlap.NearestNeighbors", "jaccard-overlap.frequencies", "frequencies.most_common", "print", "open", "wf.write", "jaccards.append", "math.fsum", "len", "near.nearest", "jaccard-overlap.jaccard", "nearest.values", "frequencies.most_common"], "function", ["home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.utils.load_embeddings", "home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.utils.load_dataset", "home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.jaccard-overlap.frequencies", "home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.jaccard-overlap.NearestNeighbors.nearest", "home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.jaccard-overlap.jaccard"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Calculate the Average Jaccard similarity between nearest neighbors in embeddings spaces.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"embeddings\"", ",", "nargs", "=", "2", ")", "\n", "parser", ".", "add_argument", "(", "\"--embeddings_index\"", ",", "\"--embeddings-index\"", ",", "default", "=", "\"configs/embeddings.json\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dataset\"", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--datasets_index\"", ",", "\"--datasets-index\"", ",", "default", "=", "\"configs/datasets.json\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data_format\"", ",", "\"--data-format\"", ",", "default", "=", "\"conll\"", ",", "choices", "=", "(", "\"conll\"", ",", "\"label-first\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\"--cache\"", ",", "default", "=", "\"data\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--neighbors\"", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "\"--most_common\"", ",", "type", "=", "int", ",", "default", "=", "200", ")", "\n", "parser", ".", "add_argument", "(", "\"--filter_tokens\"", ",", "type", "=", "set", ",", "nargs", "=", "\"*\"", ",", "default", "=", "STOP_WORDS", ")", "\n", "parser", ".", "add_argument", "(", "\"--lowercase\"", ",", "action", "=", "\"store_true\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "embeddings", "=", "load_embeddings", "(", "args", ".", "embeddings", ",", "args", ".", "embeddings_index", ",", "args", ".", "cache", ")", "\n", "\n", "nearest", "=", "{", "emb", ":", "NearestNeighbors", "(", "*", "embeddings", "[", "emb", "]", ")", "for", "emb", "in", "args", ".", "embeddings", "}", "\n", "\n", "read", "=", "read_conll_dataset", "if", "args", ".", "data_format", "==", "\"conll\"", "else", "read_label_first", "\n", "\n", "data", "=", "load_dataset", "(", "args", ".", "dataset", ",", "args", ".", "datasets_index", ",", "args", ".", "cache", ",", "read", "=", "read", ")", "\n", "\n", "transform", "=", "str", ".", "lower", "if", "args", ".", "lowercase", "else", "lambda", "x", ":", "x", "\n", "\n", "for", "dataset", "in", "(", "'train'", ",", "'dev'", ",", "'test'", ")", ":", "\n", "        ", "freqs", "=", "frequencies", "(", "data", "[", "dataset", "]", ",", "transform", ",", "args", ".", "filter_tokens", ")", "\n", "with", "open", "(", "f\"{dataset}.txt\"", ",", "\"w\"", ")", "as", "wf", ":", "\n", "            ", "wf", ".", "write", "(", "\"\\n\"", ".", "join", "(", "t", "for", "t", ",", "_", "in", "freqs", ".", "most_common", "(", "args", ".", "most_common", ")", ")", ")", "\n", "\n", "", "jaccards", "=", "[", "]", "\n", "for", "token", ",", "_", "in", "freqs", ".", "most_common", "(", "args", ".", "most_common", ")", ":", "\n", "            ", "neighbors", "=", "[", "near", ".", "nearest", "(", "token", ",", "args", ".", "neighbors", ")", "for", "near", "in", "nearest", ".", "values", "(", ")", "]", "\n", "jaccards", ".", "append", "(", "jaccard", "(", "*", "neighbors", ")", ")", "\n", "\n", "", "avg_jaccard", "=", "math", ".", "fsum", "(", "jaccards", ")", "/", "len", "(", "jaccards", ")", "\n", "\n", "print", "(", "\n", "f\"{avg_jaccard * 100:.4f}: Average Jaccard Similarity between the top {args.neighbors} nearest neighbors \"", "\n", "f\"for the {args.most_common} most common words in the {args.dataset} {dataset} data using the \"", "\n"]], "home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.utils.required_length": [[41, 51], ["setattr", "len", "argparse.ArgumentTypeError", "len"], "function", ["None"], ["def", "required_length", "(", "min_", ")", ":", "\n", "    ", "class", "RequiredLength", "(", "argparse", ".", "Action", ")", ":", "\n", "        ", "def", "__call__", "(", "self", ",", "parser", ",", "args", ",", "values", ",", "option_string", "=", "None", ")", ":", "\n", "            ", "if", "len", "(", "values", ")", "<", "min_", ":", "\n", "                ", "raise", "argparse", ".", "ArgumentTypeError", "(", "\n", "f'Argument \"{self.dest}\" requires at least {min_} arguments, got {len(values)}'", "\n", ")", "\n", "", "setattr", "(", "args", ",", "self", ".", "dest", ",", "values", ")", "\n", "\n", "", "", "return", "RequiredLength", "\n", "\n"]], "home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.utils.parse_file_type": [[53, 61], ["ValueError"], "function", ["None"], ["", "def", "parse_file_type", "(", "file_type", ")", ":", "\n", "    ", "if", "file_type", "==", "\"glove\"", ":", "\n", "        ", "return", "wv", ".", "FileType", ".", "GLOVE", "\n", "", "if", "file_type", "==", "\"w2v\"", ":", "\n", "        ", "return", "wv", ".", "FileType", ".", "W2V", "\n", "", "if", "file_type", "==", "\"dense\"", ":", "\n", "        ", "return", "wv", ".", "FileType", ".", "DENSE", "\n", "", "raise", "ValueError", "(", "f\"Unsupported file type requested, got {file_type}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.utils.download_embeddings": [[63, 72], ["mead.utils.index_by_label", "mead.utils.read_config_file_or_json", "baseline.utils.EmbeddingDownloader().download", "baseline.utils.EmbeddingDownloader", "embedding.get"], "function", ["None"], ["", "def", "download_embeddings", "(", "embeddings", ":", "List", "[", "str", "]", ",", "embeddings_index", ":", "str", ",", "cache", ":", "str", ")", "->", "Dict", "[", "str", ",", "str", "]", ":", "\n", "    ", "embeddings_index", "=", "index_by_label", "(", "read_config_file_or_json", "(", "embeddings_index", ")", ")", "\n", "embeddings_map", "=", "{", "}", "\n", "for", "embed_label", "in", "embeddings", ":", "\n", "        ", "embedding", "=", "embeddings_index", "[", "embed_label", "]", "\n", "embeddings_map", "[", "embed_label", "]", "=", "EmbeddingDownloader", "(", "\n", "embedding", "[", "\"file\"", "]", ",", "embedding", "[", "\"dsz\"", "]", ",", "embedding", ".", "get", "(", "\"sha1\"", ")", ",", "cache", "\n", ")", ".", "download", "(", ")", "\n", "", "return", "embeddings_map", "\n", "\n"]], "home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.utils.download_dataset": [[74, 77], ["mead.utils.index_by_label", "baseline.utils.DataDownloader().download", "mead.utils.read_config_file_or_json", "baseline.utils.DataDownloader"], "function", ["None"], ["", "def", "download_dataset", "(", "dataset", ":", "str", ",", "dataset_index", ":", "str", ",", "cache", ":", "str", ")", "->", "Dict", "[", "str", ",", "str", "]", ":", "\n", "    ", "dataset_index", "=", "index_by_label", "(", "read_config_file_or_json", "(", "dataset_index", ")", ")", "\n", "return", "DataDownloader", "(", "dataset_index", "[", "dataset", "]", ",", "cache", ")", ".", "download", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.utils.read_conll_dataset": [[79, 90], ["baseline.utils.read_conll", "surfaces.append", "list", "zip"], "function", ["None"], ["", "def", "read_conll_dataset", "(", "\n", "file_name", ":", "str", ",", "\n", "surface_index", ":", "int", "=", "0", ",", "\n", "delim", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "**", "kwargs", "\n", ")", "->", "List", "[", "List", "[", "str", "]", "]", ":", "\n", "    ", "surfaces", "=", "[", "]", "\n", "for", "sentence", "in", "read_conll", "(", "file_name", ",", "delim", ")", ":", "\n", "        ", "surf", "=", "list", "(", "zip", "(", "*", "sentence", ")", ")", "[", "surface_index", "]", "\n", "surfaces", ".", "append", "(", "surf", ")", "\n", "", "return", "surfaces", "\n", "\n"]], "home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.utils.read_label_first": [[92, 98], ["baseline.utils.read_label_first_data"], "function", ["None"], ["", "def", "read_label_first", "(", "\n", "file_name", ":", "str", ",", "\n", "**", "kwargs", "\n", ")", "->", "List", "[", "List", "[", "str", "]", "]", ":", "\n", "    ", "_", ",", "surfaces", "=", "read_label_first_data", "(", "file_name", ")", "\n", "return", "surfaces", "\n", "\n"]], "home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.utils.read_parallel": [[100, 106], ["open", "l.strip().split", "l.strip"], "function", ["None"], ["", "def", "read_parallel", "(", "\n", "f", ":", "str", ",", "\n", "**", "keargs", "\n", ")", "->", "List", "[", "List", "[", "str", "]", "]", ":", "\n", "    ", "with", "open", "(", "f", "+", "\".txt\"", ")", "as", "f", ":", "\n", "        ", "return", "[", "l", ".", "strip", "(", ")", ".", "split", "(", ")", "for", "l", "in", "f", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.utils.load_dataset": [[108, 121], ["utils.download_dataset", "read", "read", "read"], "function", ["home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.utils.download_dataset"], ["", "", "def", "load_dataset", "(", "\n", "dataset", ":", "str", ",", "\n", "dataset_index", ":", "str", ",", "\n", "cache", ":", "str", ",", "\n", "download", ":", "Callable", "=", "download_dataset", ",", "\n", "read", ":", "Callable", "=", "read_conll_dataset", ",", "\n", "**", "kwargs", "\n", ")", "->", "Dict", "[", "str", ",", "List", "[", "List", "[", "str", "]", "]", "]", ":", "\n", "    ", "dataset", "=", "download_dataset", "(", "dataset", ",", "dataset_index", ",", "cache", ")", "\n", "return", "{", "\n", "'train'", ":", "read", "(", "dataset", "[", "'train_file'", "]", ",", "**", "kwargs", ")", ",", "\n", "'dev'", ":", "read", "(", "dataset", "[", "'valid_file'", "]", ",", "**", "kwargs", ")", ",", "\n", "'test'", ":", "read", "(", "dataset", "[", "'test_file'", "]", ",", "**", "kwargs", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.utils.read_embeddings": [[124, 126], ["word_vectors.read", "embeddings.items"], "function", ["None"], ["", "def", "read_embeddings", "(", "embeddings", ":", "Dict", "[", "str", ",", "str", "]", ")", "->", "Dict", "[", "str", ",", "Tuple", "[", "wv", ".", "Vocab", ",", "wv", ".", "Vectors", "]", "]", ":", "\n", "    ", "return", "{", "k", ":", "wv", ".", "read", "(", "v", ",", "False", ",", "False", ")", "for", "k", ",", "v", "in", "embeddings", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.utils.load_embeddings": [[128, 136], ["read", "download"], "function", ["None"], ["", "def", "load_embeddings", "(", "\n", "embeddings", ":", "List", "[", "str", "]", ",", "\n", "embeddings_index", ":", "str", ",", "\n", "cache", ":", "str", ",", "\n", "download", ":", "Callable", "=", "download_embeddings", ",", "\n", "read", ":", "Callable", "=", "read_embeddings", ",", "\n", ")", "->", "Dict", "[", "str", ",", "Tuple", "[", "wv", ".", "Vocab", ",", "wv", ".", "Vectors", "]", "]", ":", "\n", "    ", "return", "read", "(", "download", "(", "embeddings", ",", "embeddings_index", ",", "cache", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.utils.write_embeddings": [[138, 148], ["write", "ValueError"], "function", ["None"], ["", "def", "write_embeddings", "(", "file_name", ":", "str", ",", "vocab", ":", "wv", ".", "Vocab", ",", "vectors", ":", "wv", ".", "Vectors", ",", "file_type", ":", "wv", ".", "FileType", ")", ":", "\n", "    ", "if", "file_type", "is", "wv", ".", "FileType", ".", "DENSE", ":", "\n", "        ", "write", "=", "wv", ".", "write_dense", "\n", "", "elif", "file_type", "is", "wv", ".", "FileType", ".", "W2V", ":", "\n", "        ", "write", "=", "wv", ".", "write_w2v", "\n", "", "elif", "file_type", "is", "wv", ".", "FileType", ".", "GLOVE", ":", "\n", "        ", "write", "=", "wv", ".", "write_glove", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f\"Unsupported file type requested, got {file_type}\"", ")", "\n", "", "write", "(", "file_name", ",", "vocab", ",", "vectors", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.extend-vocab.combine_vocabs": [[10, 20], ["new_vocab.items", "numpy.array", "numpy.concatenate", "len", "np.array.append"], "function", ["None"], ["def", "combine_vocabs", "(", "\n", "base_vocab", ":", "wv", ".", "Vocab", ",", "base_vectors", ":", "wv", ".", "Vectors", ",", "new_vocab", ":", "wv", ".", "Vocab", ",", "new_vectors", ":", "wv", ".", "Vectors", "\n", ")", "->", "Tuple", "[", "wv", ".", "Vocab", ",", "wv", ".", "Vectors", "]", ":", "\n", "    ", "new_new_vectors", "=", "[", "]", "\n", "for", "word", ",", "idx", "in", "new_vocab", ".", "items", "(", ")", ":", "\n", "        ", "if", "word", "not", "in", "base_vocab", ":", "\n", "            ", "base_vocab", "[", "word", "]", "=", "len", "(", "base_vocab", ")", "\n", "new_new_vectors", ".", "append", "(", "new_vectors", "[", "idx", "]", ")", "\n", "", "", "new_new_vectors", "=", "np", ".", "array", "(", "new_new_vectors", ")", "\n", "return", "base_vocab", ",", "np", ".", "concatenate", "(", "[", "base_vectors", ",", "new_new_vectors", "]", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.extend-vocab.main": [[22, 65], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "utils.load_embeddings", "set", "utils.write_embeddings", "print", "os.path.join", "len", "ValueError", "extend-vocab.combine_vocabs", "json.dumps", "utils.required_length", "utils.load_embeddings.values"], "function", ["home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.utils.load_embeddings", "home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.utils.write_embeddings", "home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.extend-vocab.combine_vocabs", "home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.utils.required_length"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "\"Add new words from other pretrained embeddings to some base embeddings\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"embeddings\"", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "action", "=", "required_length", "(", "2", ")", ",", "\n", "help", "=", "\"The pretrained embeddings to process, the first embedding is the base that others are processed relative too.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--embeddings_index\"", ",", "\"--embeddings-index\"", ",", "default", "=", "\"configs/embeddings.json\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--cache\"", ",", "default", "=", "\"data\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--output_format\"", ",", "\"--output-format\"", ",", "default", "=", "\"w2v\"", ",", "choices", "=", "(", "\"glove\"", ",", "\"w2v\"", ")", ",", "type", "=", "parse_file_type", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--output_label\"", ",", "\"--output-label\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--output_file\"", ",", "\"--output-file\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "args", ".", "output_label", "=", "(", "\n", "f\"{args.embeddings[0]}-vocab-extended-by-{'-'.join(args.embeddings[1:])}\"", "\n", "if", "args", ".", "output_label", "is", "None", "\n", "else", "args", ".", "output_label", "\n", ")", "\n", "\n", "args", ".", "output_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "cache", ",", "args", ".", "output_label", ")", "if", "args", ".", "output_file", "is", "None", "else", "args", ".", "output_file", "\n", "\n", "embeddings", "=", "load_embeddings", "(", "args", ".", "embeddings", ",", "args", ".", "embeddings_index", ",", "args", ".", "cache", ")", "\n", "\n", "dsz", "=", "set", "(", "e", "[", "1", "]", ".", "shape", "[", "1", "]", "for", "e", "in", "embeddings", ".", "values", "(", ")", ")", "\n", "if", "len", "(", "dsz", ")", "!=", "1", ":", "\n", "        ", "raise", "ValueError", "(", "f\"For extending vocab experiments all embedding need to be the same size, got sizes of {dsz}\"", ")", "\n", "\n", "", "base_vocab", ",", "base_vectors", "=", "embeddings", "[", "args", ".", "embeddings", "[", "0", "]", "]", "\n", "\n", "for", "embed_label", "in", "args", ".", "embeddings", "[", "1", ":", "]", ":", "\n", "        ", "new_vocab", ",", "new_vectors", "=", "embeddings", "[", "embed_label", "]", "\n", "base_vocab", ",", "base_vectors", "=", "combine_vocabs", "(", "base_vocab", ",", "base_vectors", ",", "new_vocab", ",", "new_vectors", ")", "\n", "del", "embeddings", "[", "embed_label", "]", "\n", "\n", "", "write_embeddings", "(", "args", ".", "output_file", ",", "base_vocab", ",", "base_vectors", ",", "args", ".", "output_format", ")", "\n", "\n", "print", "(", "json", ".", "dumps", "(", "{", "\"label\"", ":", "args", ".", "output_label", ",", "\"file\"", ":", "args", ".", "output_file", ",", "\"dsz\"", ":", "base_vectors", ".", "shape", "[", "1", "]", ",", "}", ",", "indent", "=", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.match-vocab.match_vocab": [[10, 22], ["new_vocab.items", "numpy.array", "len", "np.array.append"], "function", ["None"], ["def", "match_vocab", "(", "base_vocab", ":", "wv", ".", "Vocab", ",", "new_vocab", ":", "wv", ".", "Vocab", ",", "new_vectors", ":", "wv", ".", "Vectors", ")", "->", "Tuple", "[", "wv", ".", "Vocab", ",", "wv", ".", "Vectors", "]", ":", "\n", "    ", "new_new_vectors", "=", "[", "]", "\n", "new_new_vocab", "=", "{", "}", "\n", "new_idx", "=", "0", "\n", "for", "word", ",", "idx", "in", "new_vocab", ".", "items", "(", ")", ":", "\n", "        ", "if", "word", "in", "base_vocab", "and", "word", "not", "in", "new_new_vocab", ":", "\n", "            ", "new_new_vocab", "[", "word", "]", "=", "new_idx", "\n", "new_idx", "+=", "1", "\n", "new_new_vectors", ".", "append", "(", "new_vectors", "[", "idx", "]", ")", "\n", "", "", "new_new_vectors", "=", "np", ".", "array", "(", "new_new_vectors", ")", "\n", "assert", "len", "(", "new_new_vocab", ")", "==", "new_new_vectors", ".", "shape", "[", "0", "]", "\n", "return", "new_new_vocab", ",", "new_new_vectors", "\n", "\n"]], "home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.match-vocab.main": [[24, 79], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "utils.load_embeddings", "zip", "print", "len", "ValueError", "len", "ValueError", "match-vocab.match_vocab", "embedding_info.append", "utils.write_embeddings", "json.dumps", "utils.required_length", "os.path.join", "len", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.utils.load_embeddings", "home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.match-vocab.match_vocab", "home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.utils.write_embeddings", "home.repos.pwc.inspect_result.blester125_multi-look-embeddings.scripts.utils.required_length"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "\"Prune the vocab for pretrained embeddings so the vocabs match another pretrained embedding\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"embeddings\"", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "action", "=", "required_length", "(", "2", ")", ",", "\n", "help", "=", "\"The pretrained embeddings to process, the first embedding is the base that others are processed relative too.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--embeddings_index\"", ",", "\"--embeddings-index\"", ",", "default", "=", "\"configs/embeddings.json\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--cache\"", ",", "default", "=", "\"data\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--output_format\"", ",", "\"--output-format\"", ",", "default", "=", "\"w2v\"", ",", "choices", "=", "(", "\"glove\"", ",", "\"w2v\"", ")", ",", "type", "=", "parse_file_type", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--output_labels\"", ",", "\"--output-labels\"", ",", "nargs", "=", "\"+\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--output_files\"", ",", "\"--output-files\"", ",", "nargs", "=", "\"+\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "args", ".", "output_labels", "=", "(", "\n", "[", "f\"{embed}-matched-to-{args.embeddings[0]}\"", "for", "embed", "in", "args", ".", "embeddings", "[", "1", ":", "]", "]", "\n", "if", "args", ".", "output_labels", "is", "None", "\n", "else", "args", ".", "output_labels", "\n", ")", "\n", "args", ".", "output_files", "=", "(", "\n", "[", "os", ".", "path", ".", "join", "(", "args", ".", "cache", ",", "f\"{embed}-matched-to-{args.embeddings[0]}\"", ")", "for", "embed", "in", "args", ".", "embeddings", "[", "1", ":", "]", "]", "\n", "if", "args", ".", "output_files", "is", "None", "\n", "else", "args", ".", "output_files", "\n", ")", "\n", "\n", "if", "len", "(", "args", ".", "output_labels", ")", "!=", "len", "(", "args", ".", "embeddings", ")", "-", "1", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "f\"Supplied output labels must be provided for each embedding you are matching, needed {len(args.embeddings) - 1} labels got {len(args.output_labels)}\"", "\n", ")", "\n", "\n", "", "if", "len", "(", "args", ".", "output_files", ")", "!=", "len", "(", "args", ".", "embeddings", ")", "-", "1", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "f\"Supplied output files must be provided for each embedding you are matching, needed {len(args.embeddings) - 1} files got {len(args.output_files)}\"", "\n", ")", "\n", "\n", "", "embeddings", "=", "load_embeddings", "(", "args", ".", "embeddings", ",", "args", ".", "embeddings_index", ",", "args", ".", "cache", ")", "\n", "\n", "base_vocab", ",", "_", "=", "embeddings", "[", "args", ".", "embeddings", "[", "0", "]", "]", "\n", "\n", "embedding_info", "=", "[", "]", "\n", "\n", "for", "embed_label", ",", "label", ",", "output", "in", "zip", "(", "args", ".", "embeddings", "[", "1", ":", "]", ",", "args", ".", "output_labels", ",", "args", ".", "output_files", ")", ":", "\n", "        ", "new_vocab", ",", "new_vectors", "=", "embeddings", "[", "embed_label", "]", "\n", "vocab", ",", "vectors", "=", "match_vocab", "(", "base_vocab", ",", "new_vocab", ",", "new_vectors", ")", "\n", "embedding_info", ".", "append", "(", "\n", "{", "\"label\"", ":", "label", ",", "\"file\"", ":", "output", ",", "\"dsz\"", ":", "vectors", ".", "shape", "[", "1", "]", ",", "}", "\n", ")", "\n", "write_embeddings", "(", "output", ",", "vocab", ",", "vectors", ",", "args", ".", "output_format", ")", "\n", "\n", "", "print", "(", "json", ".", "dumps", "(", "embedding_info", ",", "indent", "=", "2", ")", ")", "\n", "\n"]]}