{"home.repos.pwc.inspect_result.ermongroup_tile2vec.src.tilenet.ResidualBlock.__init__": [[13, 29], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.ermongroup_tile2vec.src.datasets.ClipAndScale.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "ResidualBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.tilenet.ResidualBlock.forward": [[30, 36], ["torch.relu", "torch.relu", "torch.relu", "tilenet.ResidualBlock.bn2", "tilenet.ResidualBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "tilenet.ResidualBlock.bn1", "tilenet.ResidualBlock.conv2", "tilenet.ResidualBlock.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.tilenet.TileNet.__init__": [[39, 54], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "tilenet.TileNet._make_layer", "tilenet.TileNet._make_layer", "tilenet.TileNet._make_layer", "tilenet.TileNet._make_layer", "tilenet.TileNet._make_layer"], "methods", ["home.repos.pwc.inspect_result.ermongroup_tile2vec.src.datasets.ClipAndScale.__init__", "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "num_blocks", ",", "in_channels", "=", "4", ",", "z_dim", "=", "512", ")", ":", "\n", "        ", "super", "(", "TileNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "z_dim", "=", "z_dim", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "self", ".", "in_channels", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer5", "=", "self", ".", "_make_layer", "(", "self", ".", "z_dim", ",", "num_blocks", "[", "4", "]", ",", "\n", "stride", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.tilenet.TileNet._make_layer": [[55, 62], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "tilenet.ResidualBlock"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "planes", ",", "num_blocks", ",", "stride", ",", "no_relu", "=", "False", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "ResidualBlock", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", "=", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.tilenet.TileNet.encode": [[63, 73], ["torch.relu", "torch.relu", "torch.relu", "tilenet.TileNet.layer1", "tilenet.TileNet.layer2", "tilenet.TileNet.layer3", "tilenet.TileNet.layer4", "tilenet.TileNet.layer5", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d.view", "tilenet.TileNet.bn1", "torch.avg_pool2d.size", "tilenet.TileNet.conv1"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x", "=", "self", ".", "layer5", "(", "x", ")", "\n", "x", "=", "F", ".", "avg_pool2d", "(", "x", ",", "4", ")", "\n", "z", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.tilenet.TileNet.forward": [[74, 76], ["tilenet.TileNet.encode"], "methods", ["home.repos.pwc.inspect_result.ermongroup_tile2vec.src.resnet.ResNet.encode"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "encode", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.tilenet.TileNet.triplet_loss": [[77, 89], ["torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.relu", "torch.relu", "torch.relu", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "def", "triplet_loss", "(", "self", ",", "z_p", ",", "z_n", ",", "z_d", ",", "margin", "=", "0.1", ",", "l2", "=", "0", ")", ":", "\n", "        ", "l_n", "=", "torch", ".", "sqrt", "(", "(", "(", "z_p", "-", "z_n", ")", "**", "2", ")", ".", "sum", "(", "dim", "=", "1", ")", ")", "\n", "l_d", "=", "-", "torch", ".", "sqrt", "(", "(", "(", "z_p", "-", "z_d", ")", "**", "2", ")", ".", "sum", "(", "dim", "=", "1", ")", ")", "\n", "l_nd", "=", "l_n", "+", "l_d", "\n", "loss", "=", "F", ".", "relu", "(", "l_n", "+", "l_d", "+", "margin", ")", "\n", "l_n", "=", "torch", ".", "mean", "(", "l_n", ")", "\n", "l_d", "=", "torch", ".", "mean", "(", "l_d", ")", "\n", "l_nd", "=", "torch", ".", "mean", "(", "l_n", "+", "l_d", ")", "\n", "loss", "=", "torch", ".", "mean", "(", "loss", ")", "\n", "if", "l2", "!=", "0", ":", "\n", "            ", "loss", "+=", "l2", "*", "(", "torch", ".", "norm", "(", "z_p", ")", "+", "torch", ".", "norm", "(", "z_n", ")", "+", "torch", ".", "norm", "(", "z_d", ")", ")", "\n", "", "return", "loss", ",", "l_n", ",", "l_d", ",", "l_nd", "\n", "\n"]], "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.tilenet.TileNet.loss": [[90, 97], ["tilenet.TileNet.triplet_loss", "tilenet.TileNet.encode", "tilenet.TileNet.encode", "tilenet.TileNet.encode"], "methods", ["home.repos.pwc.inspect_result.ermongroup_tile2vec.src.resnet.ResNet.triplet_loss", "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.resnet.ResNet.encode", "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.resnet.ResNet.encode", "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.resnet.ResNet.encode"], ["", "def", "loss", "(", "self", ",", "patch", ",", "neighbor", ",", "distant", ",", "margin", "=", "0.1", ",", "l2", "=", "0", ")", ":", "\n", "        ", "\"\"\"\n        Computes loss for each batch.\n        \"\"\"", "\n", "z_p", ",", "z_n", ",", "z_d", "=", "(", "self", ".", "encode", "(", "patch", ")", ",", "self", ".", "encode", "(", "neighbor", ")", ",", "\n", "self", ".", "encode", "(", "distant", ")", ")", "\n", "return", "self", ".", "triplet_loss", "(", "z_p", ",", "z_n", ",", "z_d", ",", "margin", "=", "margin", ",", "l2", "=", "l2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.tilenet.make_tilenet": [[99, 106], ["tilenet.TileNet"], "function", ["None"], ["", "", "def", "make_tilenet", "(", "in_channels", "=", "4", ",", "z_dim", "=", "512", ")", ":", "\n", "    ", "\"\"\"\n    Returns a TileNet for unsupervised Tile2Vec with the specified number of\n    input channels and feature dimension.\n    \"\"\"", "\n", "num_blocks", "=", "[", "2", ",", "2", ",", "2", ",", "2", ",", "2", "]", "\n", "return", "TileNet", "(", "num_blocks", ",", "in_channels", "=", "in_channels", ",", "z_dim", "=", "z_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.data_utils.clip_and_scale_image": [[9, 18], ["np.clip"], "function", ["None"], ["def", "clip_and_scale_image", "(", "img", ",", "img_type", "=", "'naip'", ",", "clip_min", "=", "0", ",", "clip_max", "=", "10000", ")", ":", "\n", "    ", "\"\"\"\n    Clips and scales bands to between [0, 1] for NAIP, RGB, and Landsat\n    satellite images. Clipping applies for Landsat only.\n    \"\"\"", "\n", "if", "img_type", "in", "[", "'naip'", ",", "'rgb'", "]", ":", "\n", "        ", "return", "img", "/", "255", "\n", "", "elif", "img_type", "==", "'landsat'", ":", "\n", "        ", "return", "np", ".", "clip", "(", "img", ",", "clip_min", ",", "clip_max", ")", "/", "(", "clip_max", "-", "clip_min", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.sample_tiles.load_img": [[6, 20], ["gdal.Open", "numpy.moveaxis", "gdal.Open.ReadAsArray().astype", "gdal.Open.ReadAsArray().astype", "ValueError", "gdal.Open.ReadAsArray", "gdal.Open.ReadAsArray"], "function", ["None"], ["def", "load_img", "(", "img_file", ",", "val_type", "=", "'uint8'", ",", "bands_only", "=", "False", ",", "num_bands", "=", "4", ")", ":", "\n", "    ", "\"\"\"\n    Loads an image using gdal, returns it as an array.\n    \"\"\"", "\n", "obj", "=", "gdal", ".", "Open", "(", "img_file", ")", "\n", "if", "val_type", "==", "'uint8'", ":", "\n", "        ", "img", "=", "obj", ".", "ReadAsArray", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", "elif", "val_type", "==", "'float32'", ":", "\n", "        ", "img", "=", "obj", ".", "ReadAsArray", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Invalid val_type for image values. Try uint8 or float32.'", ")", "\n", "", "img", "=", "np", ".", "moveaxis", "(", "img", ",", "0", ",", "-", "1", ")", "\n", "if", "bands_only", ":", "img", "=", "img", "[", ":", ",", ":", ",", ":", "num_bands", "]", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.sample_tiles.get_triplet_imgs": [[21, 34], ["os.listdir", "list", "numpy.array", "np.array.reshape", "filename.endswith", "map", "img_names.append", "range", "random.choice"], "function", ["None"], ["", "def", "get_triplet_imgs", "(", "img_dir", ",", "img_ext", "=", "'.tif'", ",", "n_triplets", "=", "1000", ")", ":", "\n", "    ", "\"\"\"\n    Returns a numpy array of dimension (n_triplets, 2). First column is\n    the img name of anchor/neighbor tiles and second column is img name \n    of distant tiles.\n    \"\"\"", "\n", "img_names", "=", "[", "]", "\n", "for", "filename", "in", "os", ".", "listdir", "(", "img_dir", ")", ":", "\n", "        ", "if", "filename", ".", "endswith", "(", "img_ext", ")", ":", "\n", "            ", "img_names", ".", "append", "(", "filename", ")", "\n", "", "", "img_triplets", "=", "list", "(", "map", "(", "lambda", "_", ":", "random", ".", "choice", "(", "img_names", ")", ",", "range", "(", "2", "*", "n_triplets", ")", ")", ")", "\n", "img_triplets", "=", "np", ".", "array", "(", "img_triplets", ")", "\n", "return", "img_triplets", ".", "reshape", "(", "(", "-", "1", ",", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.sample_tiles.get_triplet_tiles": [[35, 106], ["numpy.unique", "numpy.zeros", "os.path.exists", "os.makedirs", "print", "numpy.pad", "enumerate", "numpy.load", "sample_tiles.load_img", "os.path.join", "sample_tiles.sample_anchor", "sample_tiles.sample_neighbor", "print", "print", "print", "sample_tiles.extract_tile", "sample_tiles.extract_tile", "numpy.save", "numpy.save", "sample_tiles.sample_distant_same", "sample_tiles.sample_distant_diff", "os.path.join", "os.path.join", "print", "print", "sample_tiles.extract_tile", "numpy.save", "print", "print", "sample_tiles.extract_tile", "numpy.save", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.ermongroup_tile2vec.src.sample_tiles.load_img", "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.sample_tiles.sample_anchor", "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.sample_tiles.sample_neighbor", "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.sample_tiles.extract_tile", "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.sample_tiles.extract_tile", "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.sample_tiles.sample_distant_same", "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.sample_tiles.sample_distant_diff", "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.sample_tiles.extract_tile", "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.sample_tiles.extract_tile"], ["", "def", "get_triplet_tiles", "(", "tile_dir", ",", "img_dir", ",", "img_triplets", ",", "tile_size", "=", "50", ",", "neighborhood", "=", "100", ",", "\n", "val_type", "=", "'uint8'", ",", "bands_only", "=", "False", ",", "save", "=", "True", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "tile_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "tile_dir", ")", "\n", "", "size_even", "=", "(", "tile_size", "%", "2", "==", "0", ")", "\n", "tile_radius", "=", "tile_size", "//", "2", "\n", "\n", "n_triplets", "=", "img_triplets", ".", "shape", "[", "0", "]", "\n", "unique_imgs", "=", "np", ".", "unique", "(", "img_triplets", ")", "\n", "tiles", "=", "np", ".", "zeros", "(", "(", "n_triplets", ",", "3", ",", "2", ")", ",", "dtype", "=", "np", ".", "int16", ")", "\n", "\n", "for", "img_name", "in", "unique_imgs", ":", "\n", "        ", "print", "(", "\"Sampling image {}\"", ".", "format", "(", "img_name", ")", ")", "\n", "if", "img_name", "[", "-", "3", ":", "]", "==", "'npy'", ":", "\n", "            ", "img", "=", "np", ".", "load", "(", "img_name", ")", "\n", "", "else", ":", "\n", "            ", "img", "=", "load_img", "(", "os", ".", "path", ".", "join", "(", "img_dir", ",", "img_name", ")", ",", "val_type", "=", "val_type", ",", "\n", "bands_only", "=", "bands_only", ")", "\n", "", "img_padded", "=", "np", ".", "pad", "(", "img", ",", "pad_width", "=", "[", "(", "tile_radius", ",", "tile_radius", ")", ",", "\n", "(", "tile_radius", ",", "tile_radius", ")", ",", "(", "0", ",", "0", ")", "]", ",", "\n", "mode", "=", "'reflect'", ")", "\n", "img_shape", "=", "img_padded", ".", "shape", "\n", "\n", "for", "idx", ",", "row", "in", "enumerate", "(", "img_triplets", ")", ":", "\n", "            ", "if", "row", "[", "0", "]", "==", "img_name", ":", "\n", "                ", "xa", ",", "ya", "=", "sample_anchor", "(", "img_shape", ",", "tile_radius", ")", "\n", "xn", ",", "yn", "=", "sample_neighbor", "(", "img_shape", ",", "xa", ",", "ya", ",", "neighborhood", ",", "tile_radius", ")", "\n", "\n", "if", "verbose", ":", "\n", "                    ", "print", "(", "\"    Saving anchor and neighbor tile #{}\"", ".", "format", "(", "idx", ")", ")", "\n", "print", "(", "\"    Anchor tile center:{}\"", ".", "format", "(", "(", "xa", ",", "ya", ")", ")", ")", "\n", "print", "(", "\"    Neighbor tile center:{}\"", ".", "format", "(", "(", "xn", ",", "yn", ")", ")", ")", "\n", "", "if", "save", ":", "\n", "                    ", "tile_anchor", "=", "extract_tile", "(", "img_padded", ",", "xa", ",", "ya", ",", "tile_radius", ")", "\n", "tile_neighbor", "=", "extract_tile", "(", "img_padded", ",", "xn", ",", "yn", ",", "tile_radius", ")", "\n", "if", "size_even", ":", "\n", "                        ", "tile_anchor", "=", "tile_anchor", "[", ":", "-", "1", ",", ":", "-", "1", "]", "\n", "tile_neighbor", "=", "tile_neighbor", "[", ":", "-", "1", ",", ":", "-", "1", "]", "\n", "", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "tile_dir", ",", "'{}anchor.npy'", ".", "format", "(", "idx", ")", ")", ",", "tile_anchor", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "tile_dir", ",", "'{}neighbor.npy'", ".", "format", "(", "idx", ")", ")", ",", "tile_neighbor", ")", "\n", "\n", "", "tiles", "[", "idx", ",", "0", ",", ":", "]", "=", "xa", "-", "tile_radius", ",", "ya", "-", "tile_radius", "\n", "tiles", "[", "idx", ",", "1", ",", ":", "]", "=", "xn", "-", "tile_radius", ",", "yn", "-", "tile_radius", "\n", "\n", "if", "row", "[", "1", "]", "==", "img_name", ":", "\n", "# distant image is same as anchor/neighbor image", "\n", "                    ", "xd", ",", "yd", "=", "sample_distant_same", "(", "img_shape", ",", "xa", ",", "ya", ",", "neighborhood", ",", "tile_radius", ")", "\n", "if", "verbose", ":", "\n", "                        ", "print", "(", "\"    Saving distant tile #{}\"", ".", "format", "(", "idx", ")", ")", "\n", "print", "(", "\"    Distant tile center:{}\"", ".", "format", "(", "(", "xd", ",", "yd", ")", ")", ")", "\n", "", "if", "save", ":", "\n", "                        ", "tile_distant", "=", "extract_tile", "(", "img_padded", ",", "xd", ",", "yd", ",", "tile_radius", ")", "\n", "if", "size_even", ":", "\n", "                            ", "tile_distant", "=", "tile_distant", "[", ":", "-", "1", ",", ":", "-", "1", "]", "\n", "", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "tile_dir", ",", "'{}distant.npy'", ".", "format", "(", "idx", ")", ")", ",", "tile_distant", ")", "\n", "", "tiles", "[", "idx", ",", "2", ",", ":", "]", "=", "xd", "-", "tile_radius", ",", "yd", "-", "tile_radius", "\n", "\n", "", "", "elif", "row", "[", "1", "]", "==", "img_name", ":", "\n", "# distant image is different from anchor/neighbor image", "\n", "                ", "xd", ",", "yd", "=", "sample_distant_diff", "(", "img_shape", ",", "tile_radius", ")", "\n", "if", "verbose", ":", "\n", "                        ", "print", "(", "\"    Saving distant tile #{}\"", ".", "format", "(", "idx", ")", ")", "\n", "print", "(", "\"    Distant tile center:{}\"", ".", "format", "(", "(", "xd", ",", "yd", ")", ")", ")", "\n", "", "if", "save", ":", "\n", "                    ", "tile_distant", "=", "extract_tile", "(", "img_padded", ",", "xd", ",", "yd", ",", "tile_radius", ")", "\n", "if", "size_even", ":", "\n", "                        ", "tile_distant", "=", "tile_distant", "[", ":", "-", "1", ",", ":", "-", "1", "]", "\n", "", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "tile_dir", ",", "'{}distant.npy'", ".", "format", "(", "idx", ")", ")", ",", "tile_distant", ")", "\n", "", "tiles", "[", "idx", ",", "2", ",", ":", "]", "=", "xd", "-", "tile_radius", ",", "yd", "-", "tile_radius", "\n", "\n", "", "", "", "return", "tiles", "\n", "\n"]], "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.sample_tiles.sample_anchor": [[107, 115], ["numpy.random.randint", "numpy.random.randint"], "function", ["None"], ["", "def", "sample_anchor", "(", "img_shape", ",", "tile_radius", ")", ":", "\n", "    ", "w_padded", ",", "h_padded", ",", "c", "=", "img_shape", "\n", "w", "=", "w_padded", "-", "2", "*", "tile_radius", "\n", "h", "=", "h_padded", "-", "2", "*", "tile_radius", "\n", "\n", "xa", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "w", ")", "+", "tile_radius", "\n", "ya", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "h", ")", "+", "tile_radius", "\n", "return", "xa", ",", "ya", "\n", "\n"]], "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.sample_tiles.sample_neighbor": [[116, 126], ["numpy.random.randint", "numpy.random.randint", "max", "min", "max", "min"], "function", ["None"], ["", "def", "sample_neighbor", "(", "img_shape", ",", "xa", ",", "ya", ",", "neighborhood", ",", "tile_radius", ")", ":", "\n", "    ", "w_padded", ",", "h_padded", ",", "c", "=", "img_shape", "\n", "w", "=", "w_padded", "-", "2", "*", "tile_radius", "\n", "h", "=", "h_padded", "-", "2", "*", "tile_radius", "\n", "\n", "xn", "=", "np", ".", "random", ".", "randint", "(", "max", "(", "xa", "-", "neighborhood", ",", "tile_radius", ")", ",", "\n", "min", "(", "xa", "+", "neighborhood", ",", "w", "+", "tile_radius", ")", ")", "\n", "yn", "=", "np", ".", "random", ".", "randint", "(", "max", "(", "ya", "-", "neighborhood", ",", "tile_radius", ")", ",", "\n", "min", "(", "ya", "+", "neighborhood", ",", "h", "+", "tile_radius", ")", ")", "\n", "return", "xn", ",", "yn", "\n", "\n"]], "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.sample_tiles.sample_distant_same": [[128, 139], ["numpy.random.randint", "numpy.random.randint"], "function", ["None"], ["", "def", "sample_distant_same", "(", "img_shape", ",", "xa", ",", "ya", ",", "neighborhood", ",", "tile_radius", ")", ":", "\n", "    ", "w_padded", ",", "h_padded", ",", "c", "=", "img_shape", "\n", "w", "=", "w_padded", "-", "2", "*", "tile_radius", "\n", "h", "=", "h_padded", "-", "2", "*", "tile_radius", "\n", "\n", "xd", ",", "yd", "=", "xa", ",", "ya", "\n", "while", "(", "xd", ">=", "xa", "-", "neighborhood", ")", "and", "(", "xd", "<=", "xa", "+", "neighborhood", ")", ":", "\n", "        ", "xd", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "w", ")", "+", "tile_radius", "\n", "", "while", "(", "yd", ">=", "ya", "-", "neighborhood", ")", "and", "(", "yd", "<=", "ya", "+", "neighborhood", ")", ":", "\n", "        ", "yd", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "h", ")", "+", "tile_radius", "\n", "", "return", "xd", ",", "yd", "\n", "\n"]], "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.sample_tiles.sample_distant_diff": [[141, 143], ["sample_tiles.sample_anchor"], "function", ["home.repos.pwc.inspect_result.ermongroup_tile2vec.src.sample_tiles.sample_anchor"], ["", "def", "sample_distant_diff", "(", "img_shape", ",", "tile_radius", ")", ":", "\n", "    ", "return", "sample_anchor", "(", "img_shape", ",", "tile_radius", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.sample_tiles.extract_tile": [[144, 161], ["None"], "function", ["None"], ["", "def", "extract_tile", "(", "img_padded", ",", "x0", ",", "y0", ",", "tile_radius", ")", ":", "\n", "    ", "\"\"\"\n    Extracts a tile from a (padded) image given the row and column of\n    the center pixel and the tile size. E.g., if the tile\n    size is 15 pixels per side, then the tile radius should be 7.\n    \"\"\"", "\n", "w_padded", ",", "h_padded", ",", "c", "=", "img_padded", ".", "shape", "\n", "row_min", "=", "x0", "-", "tile_radius", "\n", "row_max", "=", "x0", "+", "tile_radius", "\n", "col_min", "=", "y0", "-", "tile_radius", "\n", "col_max", "=", "y0", "+", "tile_radius", "\n", "assert", "row_min", ">=", "0", ",", "'Row min: {}'", ".", "format", "(", "row_min", ")", "\n", "assert", "row_max", "<=", "w_padded", ",", "'Row max: {}'", ".", "format", "(", "row_max", ")", "\n", "assert", "col_min", ">=", "0", ",", "'Col min: {}'", ".", "format", "(", "col_min", ")", "\n", "assert", "col_max", "<=", "h_padded", ",", "'Col max: {}'", ".", "format", "(", "col_max", ")", "\n", "tile", "=", "img_padded", "[", "row_min", ":", "row_max", "+", "1", ",", "col_min", ":", "col_max", "+", "1", ",", ":", "]", "\n", "return", "tile", "\n", "\n"]], "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.resnet.BasicBlock.__init__": [[17, 44], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.ermongroup_tile2vec.src.datasets.ClipAndScale.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ",", "no_relu", "=", "False", ",", "\n", "activation", "=", "'relu'", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "no_relu", "=", "no_relu", "\n", "self", ".", "activation", "=", "activation", "\n", "\n", "# Choose activation function", "\n", "if", "self", ".", "activation", "==", "'relu'", ":", "\n", "            ", "self", ".", "activation_fn", "=", "F", ".", "relu", "\n", "", "elif", "self", ".", "activation", "==", "'leaky_relu'", ":", "\n", "            ", "self", ".", "activation_fn", "=", "F", ".", "leaky_relu", "\n", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "# no_relu layer", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "# no_relu layer", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.resnet.BasicBlock.forward": [[46, 58], ["resnet.BasicBlock.activation_fn", "resnet.BasicBlock.bn1", "resnet.BasicBlock.bn3", "resnet.BasicBlock.bn2", "resnet.BasicBlock.shortcut", "resnet.BasicBlock.activation_fn", "resnet.BasicBlock.conv1", "resnet.BasicBlock.conv3", "resnet.BasicBlock.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# out = F.relu(self.bn1(self.conv1(x)))", "\n", "        ", "out", "=", "self", ".", "activation_fn", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "if", "self", ".", "no_relu", ":", "\n", "            ", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "return", "out", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "# out = F.relu(out)", "\n", "out", "=", "self", ".", "activation_fn", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.resnet.Bottleneck.__init__": [[63, 77], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.ermongroup_tile2vec.src.datasets.ClipAndScale.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.resnet.Bottleneck.forward": [[79, 86], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.bn3", "resnet.Bottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.bn1", "resnet.Bottleneck.bn2", "resnet.Bottleneck.conv3", "resnet.Bottleneck.conv1", "resnet.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.resnet.ResNet.__init__": [[89, 118], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.ermongroup_tile2vec.src.datasets.ClipAndScale.__init__", "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "n_classes", "=", "10", ",", "in_channels", "=", "4", ",", "\n", "z_dim", "=", "512", ",", "supervised", "=", "False", ",", "no_relu", "=", "False", ",", "loss_type", "=", "'triplet'", ",", "\n", "tile_size", "=", "50", ",", "activation", "=", "'relu'", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "z_dim", "=", "z_dim", "\n", "self", ".", "supervised", "=", "supervised", "\n", "self", ".", "no_relu", "=", "no_relu", "\n", "self", ".", "loss_type", "=", "loss_type", "\n", "self", ".", "tile_size", "=", "tile_size", "\n", "self", ".", "activation", "=", "activation", "\n", "\n", "# Choose activation function", "\n", "if", "self", ".", "activation", "==", "'relu'", ":", "\n", "            ", "self", ".", "activation_fn", "=", "F", ".", "relu", "\n", "", "elif", "self", ".", "activation", "==", "'leaky_relu'", ":", "\n", "            ", "self", ".", "activation_fn", "=", "F", ".", "leaky_relu", "\n", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "self", ".", "in_channels", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer5", "=", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "z_dim", ",", "num_blocks", "[", "4", "]", ",", "\n", "stride", "=", "2", ",", "no_relu", "=", "self", ".", "no_relu", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "self", ".", "z_dim", "*", "block", ".", "expansion", ",", "n_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.resnet.ResNet._make_layer": [[119, 127], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ",", "no_relu", "=", "False", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", "=", "stride", ",", "\n", "no_relu", "=", "no_relu", ",", "activation", "=", "self", ".", "activation", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.resnet.ResNet.encode": [[128, 154], ["resnet.ResNet.activation_fn", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.layer5", "torch.avg_pool2d.view", "resnet.ResNet.bn1", "print", "print", "print", "print", "print", "print", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "print", "torch.avg_pool2d.size", "print", "resnet.ResNet.conv1", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ",", "verbose", "=", "False", ")", ":", "\n", "# x = F.relu(self.bn1(self.conv1(x)))", "\n", "        ", "x", "=", "self", ".", "activation_fn", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "if", "verbose", ":", "print", "(", "x", ".", "shape", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "if", "verbose", ":", "print", "(", "x", ".", "shape", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "if", "verbose", ":", "print", "(", "x", ".", "shape", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "if", "verbose", ":", "print", "(", "x", ".", "shape", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "if", "verbose", ":", "print", "(", "x", ".", "shape", ")", "\n", "x", "=", "self", ".", "layer5", "(", "x", ")", "\n", "if", "verbose", ":", "print", "(", "x", ".", "shape", ")", "\n", "if", "self", ".", "tile_size", "==", "50", ":", "\n", "            ", "x", "=", "F", ".", "avg_pool2d", "(", "x", ",", "4", ")", "\n", "", "elif", "self", ".", "tile_size", "==", "25", ":", "\n", "            ", "x", "=", "F", ".", "avg_pool2d", "(", "x", ",", "2", ")", "\n", "", "elif", "self", ".", "tile_size", "==", "75", ":", "\n", "            ", "x", "=", "F", ".", "avg_pool2d", "(", "x", ",", "5", ")", "\n", "", "elif", "self", ".", "tile_size", "==", "100", ":", "\n", "            ", "x", "=", "F", ".", "avg_pool2d", "(", "x", ",", "7", ")", "\n", "", "if", "verbose", ":", "print", "(", "'Pooling:'", ",", "x", ".", "shape", ")", "\n", "z", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "if", "verbose", ":", "print", "(", "'View:'", ",", "z", ".", "shape", ")", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.resnet.ResNet.forward": [[155, 161], ["resnet.ResNet.encode", "resnet.ResNet.linear", "resnet.ResNet.encode"], "methods", ["home.repos.pwc.inspect_result.ermongroup_tile2vec.src.resnet.ResNet.encode", "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.resnet.ResNet.encode"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "supervised", ":", "\n", "            ", "z", "=", "self", ".", "encode", "(", "x", ")", "\n", "return", "self", ".", "linear", "(", "z", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "encode", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.resnet.ResNet.triplet_loss": [[162, 174], ["torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.relu", "torch.relu", "torch.relu", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "", "def", "triplet_loss", "(", "self", ",", "z_p", ",", "z_n", ",", "z_d", ",", "margin", "=", "0.1", ",", "l2", "=", "0", ")", ":", "\n", "        ", "l_n", "=", "torch", ".", "sqrt", "(", "(", "(", "z_p", "-", "z_n", ")", "**", "2", ")", ".", "sum", "(", "dim", "=", "1", ")", ")", "\n", "l_d", "=", "-", "torch", ".", "sqrt", "(", "(", "(", "z_p", "-", "z_d", ")", "**", "2", ")", ".", "sum", "(", "dim", "=", "1", ")", ")", "\n", "l_nd", "=", "l_n", "+", "l_d", "\n", "loss", "=", "F", ".", "relu", "(", "l_n", "+", "l_d", "+", "margin", ")", "\n", "l_n", "=", "torch", ".", "mean", "(", "l_n", ")", "\n", "l_d", "=", "torch", ".", "mean", "(", "l_d", ")", "\n", "l_nd", "=", "torch", ".", "mean", "(", "l_n", "+", "l_d", ")", "\n", "loss", "=", "torch", ".", "mean", "(", "loss", ")", "\n", "if", "l2", "!=", "0", ":", "\n", "            ", "loss", "+=", "l2", "*", "(", "torch", ".", "norm", "(", "z_p", ")", "+", "torch", ".", "norm", "(", "z_n", ")", "+", "torch", ".", "norm", "(", "z_d", ")", ")", "\n", "", "return", "loss", ",", "l_n", ",", "l_d", ",", "l_nd", "\n", "\n"]], "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.resnet.ResNet.loss": [[175, 185], ["resnet.ResNet.encode", "resnet.ResNet.encode", "resnet.ResNet.encode", "resnet.ResNet.triplet_loss", "resnet.ResNet.cosine_loss"], "methods", ["home.repos.pwc.inspect_result.ermongroup_tile2vec.src.resnet.ResNet.encode", "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.resnet.ResNet.encode", "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.resnet.ResNet.encode", "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.resnet.ResNet.triplet_loss"], ["", "def", "loss", "(", "self", ",", "patch", ",", "neighbor", ",", "distant", ",", "margin", "=", "0.1", ",", "l2", "=", "0", ")", ":", "\n", "        ", "\"\"\"\n        Computes loss for each batch.\n        \"\"\"", "\n", "z_p", ",", "z_n", ",", "z_d", "=", "(", "self", ".", "encode", "(", "patch", ")", ",", "self", ".", "encode", "(", "neighbor", ")", ",", "\n", "self", ".", "encode", "(", "distant", ")", ")", "\n", "if", "self", ".", "loss_type", "==", "'triplet'", ":", "\n", "            ", "return", "self", ".", "triplet_loss", "(", "z_p", ",", "z_n", ",", "z_d", ",", "margin", "=", "margin", ",", "l2", "=", "l2", ")", "\n", "", "elif", "self", ".", "loss_type", "==", "'cosine'", ":", "\n", "            ", "return", "self", ".", "cosine_loss", "(", "z_p", ",", "z_n", ",", "z_d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.resnet.ResNet18": [[187, 193], ["resnet.ResNet"], "function", ["None"], ["", "", "", "def", "ResNet18", "(", "n_classes", "=", "10", ",", "in_channels", "=", "4", ",", "z_dim", "=", "512", ",", "supervised", "=", "False", ",", "\n", "no_relu", "=", "False", ",", "loss_type", "=", "'triplet'", ",", "tile_size", "=", "50", ",", "activation", "=", "'relu'", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", ",", "2", "]", ",", "n_classes", "=", "n_classes", ",", "\n", "in_channels", "=", "in_channels", ",", "z_dim", "=", "z_dim", ",", "supervised", "=", "supervised", ",", "\n", "no_relu", "=", "no_relu", ",", "loss_type", "=", "loss_type", ",", "tile_size", "=", "tile_size", ",", "\n", "activation", "=", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.resnet.ResNet34": [[194, 196], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet34", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.resnet.ResNet50": [[197, 199], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet50", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.resnet.ResNet101": [[200, 202], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet101", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.resnet.ResNet152": [[203, 205], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet152", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.resnet.test": [[207, 212], ["resnet.ResNet18", "ResNet18.", "print", "torch.autograd.Variable", "net.size", "torch.randn", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.ermongroup_tile2vec.src.resnet.ResNet18"], ["", "def", "test", "(", ")", ":", "\n", "# Test", "\n", "    ", "net", "=", "ResNet18", "(", ")", "\n", "y", "=", "net", "(", "Variable", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.training.prep_triplets": [[6, 15], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "a.cuda", "n.cuda", "d.cuda"], "function", ["None"], ["def", "prep_triplets", "(", "triplets", ",", "cuda", ")", ":", "\n", "    ", "\"\"\"\n    Takes a batch of triplets and converts them into Pytorch variables \n    and puts them on GPU if available.\n    \"\"\"", "\n", "a", ",", "n", ",", "d", "=", "(", "Variable", "(", "triplets", "[", "'anchor'", "]", ")", ",", "Variable", "(", "triplets", "[", "'neighbor'", "]", ")", ",", "Variable", "(", "triplets", "[", "'distant'", "]", ")", ")", "\n", "if", "cuda", ":", "\n", "    \t", "a", ",", "n", ",", "d", "=", "(", "a", ".", "cuda", "(", ")", ",", "n", ".", "cuda", "(", ")", ",", "d", ".", "cuda", "(", ")", ")", "\n", "", "return", "(", "a", ",", "n", ",", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.training.train_triplet_epoch": [[16, 54], ["model.train", "enumerate", "print", "print", "print", "print", "print", "time.time.time", "len", "len", "training.prep_triplets", "optimizer.zero_grad", "model.loss", "loss.backward", "optimizer.step", "print", "time.time"], "function", ["home.repos.pwc.inspect_result.ermongroup_tile2vec.src.training.prep_triplets", "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.resnet.ResNet.loss"], ["", "def", "train_triplet_epoch", "(", "model", ",", "cuda", ",", "dataloader", ",", "optimizer", ",", "epoch", ",", "margin", "=", "1", ",", "\n", "l2", "=", "0", ",", "print_every", "=", "100", ",", "t0", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Trains a model for one epoch using the provided dataloader.\n    \"\"\"", "\n", "model", ".", "train", "(", ")", "\n", "if", "t0", "is", "None", ":", "\n", "        ", "t0", "=", "time", ".", "time", "(", ")", "\n", "", "sum_loss", ",", "sum_l_n", ",", "sum_l_d", ",", "sum_l_nd", "=", "(", "0", ",", "0", ",", "0", ",", "0", ")", "\n", "n_train", ",", "n_batches", "=", "len", "(", "dataloader", ".", "dataset", ")", ",", "len", "(", "dataloader", ")", "\n", "print_sum_loss", "=", "0", "\n", "for", "idx", ",", "triplets", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "        ", "p", ",", "n", ",", "d", "=", "prep_triplets", "(", "triplets", ",", "cuda", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ",", "l_n", ",", "l_d", ",", "l_nd", "=", "model", ".", "loss", "(", "p", ",", "n", ",", "d", ",", "margin", "=", "margin", ",", "l2", "=", "l2", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "sum_loss", "+=", "loss", ".", "data", "[", "0", "]", "\n", "sum_l_n", "+=", "l_n", ".", "data", "[", "0", "]", "\n", "sum_l_d", "+=", "l_d", ".", "data", "[", "0", "]", "\n", "sum_l_nd", "+=", "l_nd", ".", "data", "[", "0", "]", "\n", "if", "(", "idx", "+", "1", ")", "*", "dataloader", ".", "batch_size", "%", "print_every", "==", "0", ":", "\n", "            ", "print_avg_loss", "=", "(", "sum_loss", "-", "print_sum_loss", ")", "/", "(", "\n", "print_every", "/", "dataloader", ".", "batch_size", ")", "\n", "print", "(", "'Epoch {}: [{}/{} ({:0.0f}%)], Avg loss: {:0.4f}'", ".", "format", "(", "\n", "epoch", ",", "(", "idx", "+", "1", ")", "*", "dataloader", ".", "batch_size", ",", "n_train", ",", "\n", "100", "*", "(", "idx", "+", "1", ")", "/", "n_batches", ",", "print_avg_loss", ")", ")", "\n", "print_sum_loss", "=", "sum_loss", "\n", "", "", "avg_loss", "=", "sum_loss", "/", "n_batches", "\n", "avg_l_n", "=", "sum_l_n", "/", "n_batches", "\n", "avg_l_d", "=", "sum_l_d", "/", "n_batches", "\n", "avg_l_nd", "=", "sum_l_nd", "/", "n_batches", "\n", "print", "(", "'Finished epoch {}: {:0.3f}s'", ".", "format", "(", "epoch", ",", "time", "(", ")", "-", "t0", ")", ")", "\n", "print", "(", "'  Average loss: {:0.4f}'", ".", "format", "(", "avg_loss", ")", ")", "\n", "print", "(", "'  Average l_n: {:0.4f}'", ".", "format", "(", "avg_l_n", ")", ")", "\n", "print", "(", "'  Average l_d: {:0.4f}'", ".", "format", "(", "avg_l_d", ")", ")", "\n", "print", "(", "'  Average l_nd: {:0.4f}\\n'", ".", "format", "(", "avg_l_nd", ")", ")", "\n", "return", "(", "avg_loss", ",", "avg_l_n", ",", "avg_l_d", ",", "avg_l_nd", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.datasets.TileTripletsDataset.__init__": [[12, 19], ["glob.glob", "os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "tile_dir", ",", "transform", "=", "None", ",", "n_triplets", "=", "None", ",", "\n", "pairs_only", "=", "True", ")", ":", "\n", "        ", "self", ".", "tile_dir", "=", "tile_dir", "\n", "self", ".", "tile_files", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "tile_dir", ",", "'*'", ")", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "n_triplets", "=", "n_triplets", "\n", "self", ".", "pairs_only", "=", "pairs_only", "\n", "\n"]], "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.datasets.TileTripletsDataset.__len__": [[20, 23], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "n_triplets", ":", "return", "self", ".", "n_triplets", "\n", "else", ":", "return", "len", "(", "self", ".", "tile_files", ")", "//", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.datasets.TileTripletsDataset.__getitem__": [[24, 40], ["numpy.load", "numpy.load", "numpy.moveaxis", "numpy.moveaxis", "numpy.moveaxis", "os.path.join", "os.path.join", "numpy.random.choice", "numpy.random.randint", "numpy.load", "numpy.load", "datasets.TileTripletsDataset.transform", "os.path.join", "os.path.join"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "a", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "tile_dir", ",", "'{}anchor.npy'", ".", "format", "(", "idx", ")", ")", ")", "\n", "n", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "tile_dir", ",", "'{}neighbor.npy'", ".", "format", "(", "idx", ")", ")", ")", "\n", "if", "self", ".", "pairs_only", ":", "\n", "            ", "name", "=", "np", ".", "random", ".", "choice", "(", "[", "'anchor'", ",", "'neighbor'", ",", "'distant'", "]", ")", "\n", "d_idx", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "n_triplets", ")", "\n", "d", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "tile_dir", ",", "'{}{}.npy'", ".", "format", "(", "d_idx", ",", "name", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "d", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "tile_dir", ",", "'{}distant.npy'", ".", "format", "(", "idx", ")", ")", ")", "\n", "", "a", "=", "np", ".", "moveaxis", "(", "a", ",", "-", "1", ",", "0", ")", "\n", "n", "=", "np", ".", "moveaxis", "(", "n", ",", "-", "1", ",", "0", ")", "\n", "d", "=", "np", ".", "moveaxis", "(", "d", ",", "-", "1", ",", "0", ")", "\n", "sample", "=", "{", "'anchor'", ":", "a", ",", "'neighbor'", ":", "n", ",", "'distant'", ":", "d", "}", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.datasets.GetBands.__init__": [[48, 51], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "bands", ")", ":", "\n", "        ", "assert", "bands", ">=", "0", ",", "'Must get at least 1 band'", "\n", "self", ".", "bands", "=", "bands", "\n", "\n"]], "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.datasets.GetBands.__call__": [[52, 58], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "a", ",", "n", ",", "d", "=", "(", "sample", "[", "'anchor'", "]", ",", "sample", "[", "'neighbor'", "]", ",", "sample", "[", "'distant'", "]", ")", "\n", "# Tiles are already in [c, w, h] order", "\n", "a", ",", "n", ",", "d", "=", "(", "a", "[", ":", "self", ".", "bands", ",", ":", ",", ":", "]", ",", "n", "[", ":", "self", ".", "bands", ",", ":", ",", ":", "]", ",", "d", "[", ":", "self", ".", "bands", ",", ":", ",", ":", "]", ")", "\n", "sample", "=", "{", "'anchor'", ":", "a", ",", "'neighbor'", ":", "n", ",", "'distant'", ":", "d", "}", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.datasets.RandomFlipAndRotate.__call__": [[65, 84], ["numpy.random.choice", "numpy.random.choice", "numpy.random.choice", "numpy.random.rand", "numpy.flip().copy", "numpy.random.rand", "numpy.flip().copy", "numpy.random.rand", "numpy.flip().copy", "numpy.random.rand", "numpy.flip().copy", "numpy.random.rand", "numpy.flip().copy", "numpy.random.rand", "numpy.flip().copy", "numpy.rot90().copy", "numpy.rot90().copy", "numpy.rot90().copy", "numpy.flip", "numpy.flip", "numpy.flip", "numpy.flip", "numpy.flip", "numpy.flip", "numpy.rot90", "numpy.rot90", "numpy.rot90"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "a", ",", "n", ",", "d", "=", "(", "sample", "[", "'anchor'", "]", ",", "sample", "[", "'neighbor'", "]", ",", "sample", "[", "'distant'", "]", ")", "\n", "# Randomly horizontal flip", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "0.5", ":", "a", "=", "np", ".", "flip", "(", "a", ",", "axis", "=", "2", ")", ".", "copy", "(", ")", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "0.5", ":", "n", "=", "np", ".", "flip", "(", "n", ",", "axis", "=", "2", ")", ".", "copy", "(", ")", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "0.5", ":", "d", "=", "np", ".", "flip", "(", "d", ",", "axis", "=", "2", ")", ".", "copy", "(", ")", "\n", "# Randomly vertical flip", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "0.5", ":", "a", "=", "np", ".", "flip", "(", "a", ",", "axis", "=", "1", ")", ".", "copy", "(", ")", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "0.5", ":", "n", "=", "np", ".", "flip", "(", "n", ",", "axis", "=", "1", ")", ".", "copy", "(", ")", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "0.5", ":", "d", "=", "np", ".", "flip", "(", "d", ",", "axis", "=", "1", ")", ".", "copy", "(", ")", "\n", "# Randomly rotate", "\n", "rotations", "=", "np", ".", "random", ".", "choice", "(", "[", "0", ",", "1", ",", "2", ",", "3", "]", ")", "\n", "if", "rotations", ">", "0", ":", "a", "=", "np", ".", "rot90", "(", "a", ",", "k", "=", "rotations", ",", "axes", "=", "(", "1", ",", "2", ")", ")", ".", "copy", "(", ")", "\n", "rotations", "=", "np", ".", "random", ".", "choice", "(", "[", "0", ",", "1", ",", "2", ",", "3", "]", ")", "\n", "if", "rotations", ">", "0", ":", "n", "=", "np", ".", "rot90", "(", "n", ",", "k", "=", "rotations", ",", "axes", "=", "(", "1", ",", "2", ")", ")", ".", "copy", "(", ")", "\n", "rotations", "=", "np", ".", "random", ".", "choice", "(", "[", "0", ",", "1", ",", "2", ",", "3", "]", ")", "\n", "if", "rotations", ">", "0", ":", "d", "=", "np", ".", "rot90", "(", "d", ",", "k", "=", "rotations", ",", "axes", "=", "(", "1", ",", "2", ")", ")", ".", "copy", "(", ")", "\n", "sample", "=", "{", "'anchor'", ":", "a", ",", "'neighbor'", ":", "n", ",", "'distant'", ":", "d", "}", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.datasets.ClipAndScale.__init__": [[90, 93], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "img_type", ")", ":", "\n", "        ", "assert", "img_type", "in", "[", "'naip'", ",", "'rgb'", ",", "'landsat'", "]", "\n", "self", ".", "img_type", "=", "img_type", "\n", "\n"]], "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.datasets.ClipAndScale.__call__": [[94, 100], ["src.data_utils.clip_and_scale_image", "src.data_utils.clip_and_scale_image", "src.data_utils.clip_and_scale_image"], "methods", ["home.repos.pwc.inspect_result.ermongroup_tile2vec.src.data_utils.clip_and_scale_image", "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.data_utils.clip_and_scale_image", "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.data_utils.clip_and_scale_image"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "a", ",", "n", ",", "d", "=", "(", "clip_and_scale_image", "(", "sample", "[", "'anchor'", "]", ",", "self", ".", "img_type", ")", ",", "\n", "clip_and_scale_image", "(", "sample", "[", "'neighbor'", "]", ",", "self", ".", "img_type", ")", ",", "\n", "clip_and_scale_image", "(", "sample", "[", "'distant'", "]", ",", "self", ".", "img_type", ")", ")", "\n", "sample", "=", "{", "'anchor'", ":", "a", ",", "'neighbor'", ":", "n", ",", "'distant'", ":", "d", "}", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.datasets.ToFloatTensor.__call__": [[105, 111], ["torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "a", ",", "n", ",", "d", "=", "(", "torch", ".", "from_numpy", "(", "sample", "[", "'anchor'", "]", ")", ".", "float", "(", ")", ",", "\n", "torch", ".", "from_numpy", "(", "sample", "[", "'neighbor'", "]", ")", ".", "float", "(", ")", ",", "\n", "torch", ".", "from_numpy", "(", "sample", "[", "'distant'", "]", ")", ".", "float", "(", ")", ")", "\n", "sample", "=", "{", "'anchor'", ":", "a", ",", "'neighbor'", ":", "n", ",", "'distant'", ":", "d", "}", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.ermongroup_tile2vec.src.datasets.triplet_dataloader": [[115, 135], ["transform_list.append", "transform_list.append", "torchvision.transforms.Compose", "datasets.TileTripletsDataset", "torch.utils.data.DataLoader", "transform_list.append", "datasets.ClipAndScale", "transform_list.append", "datasets.ToFloatTensor", "datasets.GetBands", "datasets.RandomFlipAndRotate"], "function", ["None"], ["", "", "def", "triplet_dataloader", "(", "img_type", ",", "tile_dir", ",", "bands", "=", "4", ",", "augment", "=", "True", ",", "\n", "batch_size", "=", "4", ",", "shuffle", "=", "True", ",", "num_workers", "=", "4", ",", "n_triplets", "=", "None", ",", "\n", "pairs_only", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Returns a DataLoader with either NAIP (RGB/IR), RGB, or Landsat tiles.\n    Turn shuffle to False for producing embeddings that correspond to original\n    tiles.\n    \"\"\"", "\n", "assert", "img_type", "in", "[", "'landsat'", ",", "'rgb'", ",", "'naip'", "]", "\n", "transform_list", "=", "[", "]", "\n", "if", "img_type", "in", "[", "'landsat'", ",", "'naip'", "]", ":", "transform_list", ".", "append", "(", "GetBands", "(", "bands", ")", ")", "\n", "transform_list", ".", "append", "(", "ClipAndScale", "(", "img_type", ")", ")", "\n", "if", "augment", ":", "transform_list", ".", "append", "(", "RandomFlipAndRotate", "(", ")", ")", "\n", "transform_list", ".", "append", "(", "ToFloatTensor", "(", ")", ")", "\n", "transform", "=", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "dataset", "=", "TileTripletsDataset", "(", "tile_dir", ",", "transform", "=", "transform", ",", "\n", "n_triplets", "=", "n_triplets", ",", "pairs_only", "=", "pairs_only", ")", "\n", "dataloader", "=", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "shuffle", ",", "\n", "num_workers", "=", "num_workers", ")", "\n", "return", "dataloader", "\n", "\n"]]}