{"home.repos.pwc.inspect_result.xuxy09_RSC-Net.None.demo.size_to_scale": [[17, 29], ["None"], "function", ["None"], ["def", "size_to_scale", "(", "size", ")", ":", "\n", "    ", "if", "size", ">=", "224", ":", "\n", "        ", "scale", "=", "0", "\n", "", "elif", "128", "<=", "size", "<", "224", ":", "\n", "        ", "scale", "=", "1", "\n", "", "elif", "64", "<=", "size", "<", "128", ":", "\n", "        ", "scale", "=", "2", "\n", "", "elif", "40", "<=", "size", "<", "64", ":", "\n", "        ", "scale", "=", "3", "\n", "", "else", ":", "\n", "        ", "scale", "=", "4", "\n", "", "return", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.None.demo.get_render_results": [[31, 37], ["renderer.visualize", "renderer.visualize", "torch.ones().long", "torch.ones().long", "torch.ones", "torch.ones", "images.size", "images.size"], "function", ["home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.renderer_nr.Renderer.visualize", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.renderer_nr.Renderer.visualize"], ["", "def", "get_render_results", "(", "vertices", ",", "cam_t", ",", "renderer", ")", ":", "\n", "    ", "rendered_people_view_1", "=", "renderer", ".", "visualize", "(", "vertices", ",", "cam_t", ",", "torch", ".", "ones", "(", "(", "images", ".", "size", "(", "0", ")", ",", "3", ",", "224", ",", "224", ")", ")", ".", "long", "(", ")", "*", "255", ")", "\n", "rendered_people_view_2", "=", "renderer", ".", "visualize", "(", "vertices", ",", "cam_t", ",", "torch", ".", "ones", "(", "(", "images", ".", "size", "(", "0", ")", ",", "3", ",", "224", ",", "224", ")", ")", ".", "long", "(", ")", "*", "255", ",", "\n", "angle", "=", "90", ",", "rot_axis", "=", "[", "0", ",", "1", ",", "0", "]", ")", "\n", "\n", "return", "rendered_people_view_1", ",", "rendered_people_view_2", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.None.demo_nr.size_to_scale": [[20, 32], ["None"], "function", ["None"], ["def", "size_to_scale", "(", "size", ")", ":", "\n", "    ", "if", "size", ">=", "224", ":", "\n", "        ", "scale", "=", "0", "\n", "", "elif", "128", "<=", "size", "<", "224", ":", "\n", "        ", "scale", "=", "1", "\n", "", "elif", "64", "<=", "size", "<", "128", ":", "\n", "        ", "scale", "=", "2", "\n", "", "elif", "40", "<=", "size", "<", "64", ":", "\n", "        ", "scale", "=", "3", "\n", "", "else", ":", "\n", "        ", "scale", "=", "4", "\n", "", "return", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.None.demo_nr.get_render_results": [[34, 40], ["renderer.visualize", "renderer.visualize", "torch.ones", "torch.ones", "images.size", "images.size"], "function", ["home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.renderer_nr.Renderer.visualize", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.renderer_nr.Renderer.visualize"], ["", "def", "get_render_results", "(", "vertices", ",", "cam_t", ",", "renderer", ")", ":", "\n", "    ", "rendered_people_view_1", "=", "renderer", ".", "visualize", "(", "vertices", ",", "cam_t", ",", "torch", ".", "ones", "(", "(", "images", ".", "size", "(", "0", ")", ",", "3", ",", "224", ",", "224", ")", ")", ")", "\n", "rendered_people_view_2", "=", "renderer", ".", "visualize", "(", "vertices", ",", "cam_t", ",", "torch", ".", "ones", "(", "(", "images", ".", "size", "(", "0", ")", ",", "3", ",", "224", ",", "224", ")", ")", ",", "\n", "angle", "=", "(", "0", ",", "-", "90", ",", "0", ")", ")", "\n", "\n", "return", "rendered_people_view_1", ",", "rendered_people_view_2", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.None.eval.PW3D.__init__": [[26, 43], ["torchvision.transforms.Normalize", "numpy.load", "eval.PW3D.data[].squeeze().astype", "eval.PW3D.data[].squeeze().astype", "numpy.array().astype", "open", "pickle.load", "eval.PW3D.data[].squeeze", "eval.PW3D.data[].squeeze", "numpy.array", "numpy.ones().astype", "numpy.ones", "len", "str"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_name", ",", "pkl_name", ",", "img_size", ")", ":", "\n", "        ", "self", ".", "normalize_img", "=", "Normalize", "(", "mean", "=", "constants", ".", "IMG_NORM_MEAN", ",", "std", "=", "constants", ".", "IMG_NORM_STD", ")", "\n", "self", ".", "data", "=", "np", ".", "load", "(", "data_name", ")", "\n", "self", ".", "imgname", "=", "self", ".", "data", "[", "'imgname'", "]", "\n", "self", ".", "pose", "=", "self", ".", "data", "[", "'pose'", "]", ".", "squeeze", "(", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "self", ".", "betas", "=", "self", ".", "data", "[", "'shape'", "]", ".", "squeeze", "(", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "# Get gender data, if available", "\n", "try", ":", "\n", "            ", "gender", "=", "self", ".", "data", "[", "'gender'", "]", "\n", "self", ".", "gender", "=", "np", ".", "array", "(", "[", "0", "if", "str", "(", "g", ")", "==", "'m'", "else", "1", "for", "g", "in", "gender", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "", "except", "KeyError", ":", "\n", "            ", "self", ".", "gender", "=", "-", "1", "*", "np", ".", "ones", "(", "len", "(", "self", ".", "imgname", ")", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "", "with", "open", "(", "pkl_name", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "self", ".", "img_pkl", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "self", ".", "img_size", "=", "img_size", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.None.eval.PW3D.__len__": [[44, 46], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.None.eval.PW3D.rgb_processing": [[47, 60], ["rgb_img.copy", "scipy.misc.imresize.clip", "scipy.misc.imresize", "rgb_img_lr.clip.clip.clip", "scipy.misc.imresize", "numpy.transpose", "scipy.misc.imresize.astype"], "methods", ["None"], ["", "def", "rgb_processing", "(", "self", ",", "rgb_img", ",", "img_size", ")", ":", "\n", "        ", "\"\"\"Process rgb image and do augmentation.\"\"\"", "\n", "if", "img_size", "==", "224", ":", "\n", "            ", "rgb_img_up", "=", "rgb_img", ".", "copy", "(", ")", "\n", "rgb_img_up", "=", "rgb_img_up", ".", "clip", "(", "0", ",", "255", ")", "\n", "", "else", ":", "\n", "            ", "shape", "=", "rgb_img", ".", "shape", "\n", "rgb_img_lr", "=", "scipy", ".", "misc", ".", "imresize", "(", "rgb_img", ",", "(", "img_size", ",", "img_size", ")", ",", "interp", "=", "'bicubic'", ")", "\n", "rgb_img_lr", "=", "rgb_img_lr", ".", "clip", "(", "0", ",", "255", ")", "\n", "rgb_img_up", "=", "scipy", ".", "misc", ".", "imresize", "(", "rgb_img_lr", ",", "(", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ")", ",", "interp", "=", "'bicubic'", ")", "# naive upsampling", "\n", "\n", "", "rgb_img_up", "=", "np", ".", "transpose", "(", "rgb_img_up", ".", "astype", "(", "'float32'", ")", ",", "(", "2", ",", "0", ",", "1", ")", ")", "/", "255.0", "\n", "return", "rgb_img_up", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.None.eval.PW3D.__getitem__": [[61, 80], ["numpy.asarray", "cv2.imdecode", "img[].astype", "eval.PW3D.rgb_processing", "eval.PW3D.normalize_img", "eval.PW3D.pose[].copy", "eval.PW3D.betas[].copy", "torch.from_numpy().float", "torch.from_numpy().float", "bytearray", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.xuxy09_RSC-Net.datasets.base_dataset.BaseDataset.rgb_processing"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "item", "=", "{", "}", "\n", "\n", "img_str", "=", "self", ".", "img_pkl", "[", "index", "]", "\n", "img_encode", "=", "np", ".", "asarray", "(", "bytearray", "(", "img_str", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "img", "=", "cv2", ".", "imdecode", "(", "img_encode", ",", "cv2", ".", "IMREAD_COLOR", ")", "\n", "img", "=", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "img_up", "=", "self", ".", "rgb_processing", "(", "img", ",", "self", ".", "img_size", ")", "\n", "img_up", "=", "self", ".", "normalize_img", "(", "torch", ".", "from_numpy", "(", "img_up", ")", ".", "float", "(", ")", ")", "\n", "\n", "pose", "=", "self", ".", "pose", "[", "index", "]", ".", "copy", "(", ")", "\n", "betas", "=", "self", ".", "betas", "[", "index", "]", ".", "copy", "(", ")", "\n", "\n", "item", "[", "'gender'", "]", "=", "self", ".", "gender", "[", "index", "]", "\n", "item", "[", "'pose'", "]", "=", "torch", ".", "from_numpy", "(", "pose", ")", ".", "float", "(", ")", "\n", "item", "[", "'betas'", "]", "=", "torch", ".", "from_numpy", "(", "betas", ")", ".", "float", "(", ")", "\n", "item", "[", "'img_up'", "]", "=", "img_up", "\n", "\n", "return", "item", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.None.eval.size_to_scale": [[82, 94], ["None"], "function", ["None"], ["", "", "def", "size_to_scale", "(", "size", ")", ":", "\n", "    ", "if", "size", ">=", "224", ":", "\n", "        ", "scale", "=", "0", "\n", "", "elif", "128", "<=", "size", "<", "224", ":", "\n", "        ", "scale", "=", "1", "\n", "", "elif", "64", "<=", "size", "<", "128", ":", "\n", "        ", "scale", "=", "2", "\n", "", "elif", "40", "<=", "size", "<", "64", ":", "\n", "        ", "scale", "=", "3", "\n", "", "else", ":", "\n", "        ", "scale", "=", "4", "\n", "", "return", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.None.eval.run_evaluation": [[96, 181], ["hmr_model.to", "models.SMPL().to", "models.SMPL().to", "models.SMPL().to", "torch.from_numpy().float", "torch.utils.data.DataLoader", "numpy.zeros", "numpy.zeros", "enumerate", "print", "print", "print", "print", "print", "torch.cuda.is_available", "torch.device", "torch.device", "len", "len", "tqdm.tqdm", "batch[].to", "batch[].to", "batch[].to", "models.SMPL", "models.SMPL", "models.SMPL", "torch.from_numpy", "torch.no_grad", "images.to.to", "hmr_model", "SMPL().to.", "J_regressor[].expand().to", "torch.matmul", "gt_keypoints_3d[].clone", "torch.matmul", "pred_keypoints_3d[].clone", "torch.sqrt().mean().cpu().numpy", "utils.pose_utils.reconstruction_error", "numpy.load", "len", "SMPL().to.", "SMPL().to.", "torch.matmul.cpu().numpy", "torch.matmul.cpu().numpy", "print", "print", "np.zeros.mean", "np.zeros.mean", "eval.size_to_scale", "pred_rotmat[].unsqueeze", "J_regressor[].expand", "torch.sqrt().mean().cpu", "torch.matmul.cpu", "torch.matmul.cpu", "str", "str", "torch.sqrt().mean", "mpjpe[].mean", "recon_err[].mean", "torch.sqrt"], "function", ["home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.pose_utils.reconstruction_error", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.None.eval.size_to_scale"], ["", "def", "run_evaluation", "(", "hmr_model", ",", "dataset", ",", "eval_size", ",", "batch_size", "=", "32", ",", "num_workers", "=", "32", ",", "log_freq", "=", "50", ")", ":", "\n", "    ", "\"\"\"Run evaluation on the datasets and metrics we report in the paper. \"\"\"", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "# focal length", "\n", "focal_length", "=", "constants", ".", "FOCAL_LENGTH", "\n", "\n", "# Transfer hmr_model to the GPU", "\n", "hmr_model", ".", "to", "(", "device", ")", "\n", "\n", "# Load SMPL hmr_model", "\n", "smpl_neutral", "=", "SMPL", "(", "config", ".", "SMPL_MODEL_DIR", ",", "\n", "create_transl", "=", "False", ")", ".", "to", "(", "device", ")", "\n", "smpl_male", "=", "SMPL", "(", "config", ".", "SMPL_MODEL_DIR", ",", "\n", "gender", "=", "'male'", ",", "\n", "create_transl", "=", "False", ")", ".", "to", "(", "device", ")", "\n", "smpl_female", "=", "SMPL", "(", "config", ".", "SMPL_MODEL_DIR", ",", "\n", "gender", "=", "'female'", ",", "\n", "create_transl", "=", "False", ")", ".", "to", "(", "device", ")", "\n", "\n", "# Regressor for H36m joints", "\n", "J_regressor", "=", "torch", ".", "from_numpy", "(", "np", ".", "load", "(", "config", ".", "JOINT_REGRESSOR_H36M", ")", ")", ".", "float", "(", ")", "\n", "\n", "# Create dataloader for the dataset", "\n", "data_loader", "=", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "num_workers", ")", "\n", "\n", "# Pose metrics", "\n", "# MPJPE and Reconstruction error for the non-parametric and parametric shapes", "\n", "mpjpe", "=", "np", ".", "zeros", "(", "(", "len", "(", "dataset", ")", ")", ")", "\n", "recon_err", "=", "np", ".", "zeros", "(", "(", "len", "(", "dataset", ")", ")", ")", "\n", "\n", "joint_mapper_h36m", "=", "constants", ".", "H36M_TO_J14", "\n", "\n", "# Iterate over the entire dataset", "\n", "for", "step", ",", "batch", "in", "enumerate", "(", "tqdm", "(", "data_loader", ",", "desc", "=", "'Eval'", ",", "total", "=", "len", "(", "data_loader", ")", ")", ")", ":", "\n", "# Get ground truth annotations from the batch", "\n", "        ", "gt_pose", "=", "batch", "[", "'pose'", "]", ".", "to", "(", "device", ")", "\n", "gt_betas", "=", "batch", "[", "'betas'", "]", ".", "to", "(", "device", ")", "\n", "\n", "gender", "=", "batch", "[", "'gender'", "]", ".", "to", "(", "device", ")", "\n", "images", "=", "batch", "[", "'img_up'", "]", "\n", "curr_batch_size", "=", "images", ".", "shape", "[", "0", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "images", "=", "images", ".", "to", "(", "device", ")", "\n", "pred_rotmat", ",", "pred_betas", ",", "pred_camera", ",", "_", "=", "hmr_model", "(", "images", ",", "scale", "=", "size_to_scale", "(", "eval_size", ")", ")", "\n", "pred_output", "=", "smpl_neutral", "(", "betas", "=", "pred_betas", ",", "body_pose", "=", "pred_rotmat", "[", ":", ",", "1", ":", "]", ",", "\n", "global_orient", "=", "pred_rotmat", "[", ":", ",", "0", "]", ".", "unsqueeze", "(", "1", ")", ",", "pose2rot", "=", "False", ")", "\n", "pred_vertices", "=", "pred_output", ".", "vertices", "\n", "\n", "J_regressor_batch", "=", "J_regressor", "[", "None", ",", ":", "]", ".", "expand", "(", "pred_vertices", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "-", "1", ")", ".", "to", "(", "device", ")", "\n", "\n", "gt_vertices", "=", "smpl_male", "(", "global_orient", "=", "gt_pose", "[", ":", ",", ":", "3", "]", ",", "body_pose", "=", "gt_pose", "[", ":", ",", "3", ":", "]", ",", "betas", "=", "gt_betas", ")", ".", "vertices", "\n", "gt_vertices_female", "=", "smpl_female", "(", "global_orient", "=", "gt_pose", "[", ":", ",", ":", "3", "]", ",", "body_pose", "=", "gt_pose", "[", ":", ",", "3", ":", "]", ",", "\n", "betas", "=", "gt_betas", ")", ".", "vertices", "\n", "gt_vertices", "[", "gender", "==", "1", ",", ":", ",", ":", "]", "=", "gt_vertices_female", "[", "gender", "==", "1", ",", ":", ",", ":", "]", "\n", "gt_keypoints_3d", "=", "torch", ".", "matmul", "(", "J_regressor_batch", ",", "gt_vertices", ")", "\n", "gt_pelvis", "=", "gt_keypoints_3d", "[", ":", ",", "[", "0", "]", ",", ":", "]", ".", "clone", "(", ")", "\n", "gt_keypoints_3d", "=", "gt_keypoints_3d", "[", ":", ",", "joint_mapper_h36m", ",", ":", "]", "\n", "gt_keypoints_3d", "=", "gt_keypoints_3d", "-", "gt_pelvis", "\n", "\n", "pred_keypoints_3d", "=", "torch", ".", "matmul", "(", "J_regressor_batch", ",", "pred_vertices", ")", "\n", "pred_pelvis", "=", "pred_keypoints_3d", "[", ":", ",", "[", "0", "]", ",", ":", "]", ".", "clone", "(", ")", "\n", "pred_keypoints_3d", "=", "pred_keypoints_3d", "[", ":", ",", "joint_mapper_h36m", ",", ":", "]", "\n", "pred_keypoints_3d", "=", "pred_keypoints_3d", "-", "pred_pelvis", "\n", "\n", "# Absolute error (MPJPE)", "\n", "error", "=", "torch", ".", "sqrt", "(", "(", "(", "pred_keypoints_3d", "-", "gt_keypoints_3d", ")", "**", "2", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ")", ".", "mean", "(", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "mpjpe", "[", "step", "*", "batch_size", ":", "step", "*", "batch_size", "+", "curr_batch_size", "]", "=", "error", "\n", "\n", "# Reconstuction_error", "\n", "r_error", "=", "reconstruction_error", "(", "pred_keypoints_3d", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "gt_keypoints_3d", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "reduction", "=", "None", ")", "\n", "recon_err", "[", "step", "*", "batch_size", ":", "step", "*", "batch_size", "+", "curr_batch_size", "]", "=", "r_error", "\n", "\n", "# Print intermediate results during evaluation", "\n", "if", "step", "%", "log_freq", "==", "log_freq", "-", "1", ":", "\n", "                ", "print", "(", "'MPJPE: '", "+", "str", "(", "1000", "*", "mpjpe", "[", ":", "step", "*", "batch_size", "]", ".", "mean", "(", ")", ")", ")", "\n", "print", "(", "'Reconstruction Error: '", "+", "str", "(", "1000", "*", "recon_err", "[", ":", "step", "*", "batch_size", "]", ".", "mean", "(", ")", ")", ")", "\n", "\n", "# Print final results during evaluation", "\n", "", "", "", "print", "(", "'*** Final Results ***'", ")", "\n", "print", "(", ")", "\n", "print", "(", "'MPJPE: {}'", ".", "format", "(", "1000", "*", "mpjpe", ".", "mean", "(", ")", ")", ")", "\n", "print", "(", "'Reconstruction Error: {}'", ".", "format", "(", "1000", "*", "recon_err", ".", "mean", "(", ")", ")", ")", "\n", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.data_loader.RandomSampler.__init__": [[8, 16], ["torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm", "torch.randperm", "len", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_source", ",", "checkpoint", ")", ":", "\n", "        ", "self", ".", "data_source", "=", "data_source", "\n", "if", "checkpoint", "is", "not", "None", "and", "checkpoint", "[", "'dataset_perm'", "]", "is", "not", "None", ":", "\n", "            ", "self", ".", "dataset_perm", "=", "checkpoint", "[", "'dataset_perm'", "]", "\n", "self", ".", "perm", "=", "self", ".", "dataset_perm", "[", "checkpoint", "[", "'batch_size'", "]", "*", "checkpoint", "[", "'batch_idx'", "]", ":", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "dataset_perm", "=", "torch", ".", "randperm", "(", "len", "(", "self", ".", "data_source", ")", ")", ".", "tolist", "(", ")", "\n", "self", ".", "perm", "=", "torch", ".", "randperm", "(", "len", "(", "self", ".", "data_source", ")", ")", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.data_loader.RandomSampler.__iter__": [[17, 19], ["iter"], "methods", ["None"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "perm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.data_loader.RandomSampler.__len__": [[20, 22], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "perm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.data_loader.SequentialSampler.__init__": [[25, 33], ["list", "range", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_source", ",", "checkpoint", ")", ":", "\n", "        ", "self", ".", "data_source", "=", "data_source", "\n", "if", "checkpoint", "is", "not", "None", "and", "checkpoint", "[", "'dataset_perm'", "]", "is", "not", "None", ":", "\n", "            ", "self", ".", "dataset_perm", "=", "checkpoint", "[", "'dataset_perm'", "]", "\n", "self", ".", "perm", "=", "self", ".", "dataset_perm", "[", "checkpoint", "[", "'batch_size'", "]", "*", "checkpoint", "[", "'batch_idx'", "]", ":", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "dataset_perm", "=", "list", "(", "range", "(", "len", "(", "self", ".", "data_source", ")", ")", ")", "\n", "self", ".", "perm", "=", "self", ".", "dataset_perm", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.data_loader.SequentialSampler.__iter__": [[34, 36], ["iter"], "methods", ["None"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "perm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.data_loader.SequentialSampler.__len__": [[37, 39], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "perm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.data_loader.CheckpointDataLoader.__init__": [[44, 59], ["torch.utils.data.DataLoader.__init__", "data_loader.RandomSampler", "data_loader.SequentialSampler"], "methods", ["home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.smpl.SMPL.__init__"], ["def", "__init__", "(", "self", ",", "dataset", ",", "checkpoint", "=", "None", ",", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ",", "num_workers", "=", "0", ",", "pin_memory", "=", "False", ",", "drop_last", "=", "True", ",", "\n", "timeout", "=", "0", ",", "worker_init_fn", "=", "None", ")", ":", "\n", "\n", "        ", "if", "shuffle", ":", "\n", "            ", "sampler", "=", "RandomSampler", "(", "dataset", ",", "checkpoint", ")", "\n", "", "else", ":", "\n", "            ", "sampler", "=", "SequentialSampler", "(", "dataset", ",", "checkpoint", ")", "\n", "", "if", "checkpoint", "is", "not", "None", ":", "\n", "            ", "self", ".", "checkpoint_batch_idx", "=", "checkpoint", "[", "'batch_idx'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "checkpoint_batch_idx", "=", "0", "\n", "\n", "", "super", "(", "CheckpointDataLoader", ",", "self", ")", ".", "__init__", "(", "dataset", ",", "sampler", "=", "sampler", ",", "shuffle", "=", "False", ",", "batch_size", "=", "batch_size", ",", "num_workers", "=", "num_workers", ",", "\n", "drop_last", "=", "drop_last", ",", "pin_memory", "=", "pin_memory", ",", "timeout", "=", "timeout", ",", "worker_init_fn", "=", "None", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.base_trainer.BaseTrainer.__init__": [[17, 35], ["torch.device", "base_trainer.BaseTrainer.init_fn", "utils.CheckpointSaver", "time.time", "base_trainer.BaseTrainer.saver.exists_checkpoint", "base_trainer.BaseTrainer.saver.load_checkpoint", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.xuxy09_RSC-Net.train.trainer.Trainer.init_fn", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.saver.CheckpointSaver.exists_checkpoint", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.saver.CheckpointSaver.load_checkpoint"], ["def", "__init__", "(", "self", ",", "options", ")", ":", "\n", "        ", "self", ".", "options", "=", "options", "\n", "self", ".", "endtime", "=", "time", ".", "time", "(", ")", "+", "self", ".", "options", ".", "time_to_run", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "# override this function to define your model, optimizers etc.", "\n", "self", ".", "init_fn", "(", ")", "\n", "self", ".", "saver", "=", "CheckpointSaver", "(", "save_dir", "=", "options", ".", "checkpoint_dir", ")", "\n", "\n", "self", ".", "checkpoint", "=", "None", "\n", "if", "self", ".", "options", ".", "resume", "and", "self", ".", "saver", ".", "exists_checkpoint", "(", ")", ":", "\n", "            ", "self", ".", "checkpoint", "=", "self", ".", "saver", ".", "load_checkpoint", "(", "self", ".", "models_dict", ",", "self", ".", "optimizers_dict", ",", "checkpoint_file", "=", "self", ".", "options", ".", "checkpoint", ")", "\n", "\n", "", "if", "self", ".", "checkpoint", "is", "None", ":", "\n", "            ", "self", ".", "epoch_count", "=", "0", "\n", "self", ".", "step_count", "=", "0", "\n", "", "else", ":", "\n", "            ", "self", ".", "epoch_count", "=", "self", ".", "checkpoint", "[", "'epoch'", "]", "\n", "self", ".", "step_count", "=", "self", ".", "checkpoint", "[", "'total_step_count'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.base_trainer.BaseTrainer.load_pretrained": [[36, 56], ["torch.load", "collections.OrderedDict", "state_dict.items", "base_trainer.BaseTrainer.models_dict[].load_state_dict", "key.split"], "methods", ["None"], ["", "", "def", "load_pretrained", "(", "self", ",", "checkpoint_file", "=", "None", ")", ":", "\n", "        ", "\"\"\"Load a pretrained checkpoint.\n        This is different from resuming training using --resume.\n        \"\"\"", "\n", "if", "checkpoint_file", "is", "not", "None", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "checkpoint_file", ")", "\n", "for", "model", "in", "self", ".", "models_dict", ":", "\n", "                ", "if", "model", "in", "checkpoint", ":", "\n", "                    ", "state_dict", "=", "checkpoint", "[", "model", "]", "\n", "renamed_state_dict", "=", "OrderedDict", "(", ")", "\n", "# change the names in the state_dict to match the new layer", "\n", "for", "key", ",", "value", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "                        ", "if", "'layer'", "in", "key", ":", "\n", "                            ", "names", "=", "key", ".", "split", "(", "'.'", ")", "\n", "names", "[", "1", ":", "1", "]", "=", "[", "'hmr_layer'", "]", "\n", "new_key", "=", "'.'", ".", "join", "(", "n", "for", "n", "in", "names", ")", "\n", "renamed_state_dict", "[", "new_key", "]", "=", "value", "\n", "", "else", ":", "\n", "                            ", "renamed_state_dict", "[", "key", "]", "=", "value", "\n", "", "", "self", ".", "models_dict", "[", "model", "]", ".", "load_state_dict", "(", "renamed_state_dict", ",", "strict", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.base_trainer.BaseTrainer.linear_rampup": [[57, 65], ["None"], "methods", ["None"], ["", "", "", "", "@", "staticmethod", "\n", "def", "linear_rampup", "(", "current", ",", "rampup_length", ")", ":", "\n", "        ", "\"\"\"Linear rampup\"\"\"", "\n", "assert", "current", ">=", "0", "and", "rampup_length", ">=", "0", "\n", "if", "current", ">=", "rampup_length", ":", "\n", "            ", "return", "1.0", "\n", "", "else", ":", "\n", "            ", "return", "current", "/", "rampup_length", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.base_trainer.BaseTrainer.train": [[66, 155], ["tqdm.tqdm.tqdm", "range", "base_trainer.BaseTrainer.train_ds.update_size_intervals", "utils.CheckpointDataLoader", "enumerate", "base_trainer.BaseTrainer.model.init_alphas", "tqdm.tqdm.tqdm", "isinstance", "base_trainer.BaseTrainer.linear_rampup", "time.time", "base_trainer.BaseTrainer.train_step", "tqdm.tqdm.tqdm.write", "base_trainer.BaseTrainer.saver.save_checkpoint", "tqdm.tqdm.tqdm.write", "sys.exit", "base_trainer.BaseTrainer.lr_scheduler.step", "base_trainer.BaseTrainer.linear_rampup", "base_trainer.BaseTrainer.saver.save_checkpoint", "tqdm.tqdm.tqdm.write", "str", "len", "len", "v.to", "batch.items", "len", "len", "isinstance", "len", "len"], "methods", ["home.repos.pwc.inspect_result.xuxy09_RSC-Net.datasets.mixed_dataset.MixedDataset.update_size_intervals", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.hmr.HMR.init_alphas", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.base_trainer.BaseTrainer.linear_rampup", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.train.trainer.Trainer.train_step", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.saver.CheckpointSaver.save_checkpoint", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.base_trainer.BaseTrainer.linear_rampup", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.saver.CheckpointSaver.save_checkpoint"], ["", "", "def", "train", "(", "self", ")", ":", "\n", "        ", "\"\"\"Training process.\"\"\"", "\n", "ramp_step", "=", "0", "\n", "# Run training for num_epochs epochs", "\n", "for", "epoch", "in", "tqdm", "(", "range", "(", "self", ".", "epoch_count", ",", "self", ".", "options", ".", "num_epochs", ")", ",", "total", "=", "self", ".", "options", ".", "num_epochs", ",", "initial", "=", "self", ".", "epoch_count", ")", ":", "\n", "\n", "# ------------------ update image size intervals ----------------------", "\n", "            ", "self", ".", "train_ds", ".", "update_size_intervals", "(", "epoch", ")", "\n", "# ---------------------------------------------------------------------", "\n", "\n", "# ------------------ update batch size ----------------------", "\n", "if", "epoch", "==", "0", ":", "\n", "                ", "batch_size", "=", "self", ".", "options", ".", "batch_size", "# 24", "\n", "", "elif", "epoch", "==", "1", ":", "\n", "                ", "batch_size", "=", "self", ".", "options", ".", "batch_size", "//", "2", "# 12", "\n", "", "else", ":", "\n", "                ", "batch_size", "=", "self", ".", "options", ".", "batch_size", "//", "3", "# 8", "\n", "if", "epoch", "==", "3", ":", "\n", "                    ", "self", ".", "options", ".", "checkpoint_steps", "=", "2000", "\n", "# ---------------------------------------------------------------------", "\n", "\n", "# Create new DataLoader every epoch and (possibly) resume from an arbitrary step inside an epoch", "\n", "", "", "train_data_loader", "=", "CheckpointDataLoader", "(", "self", ".", "train_ds", ",", "checkpoint", "=", "self", ".", "checkpoint", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "num_workers", "=", "self", ".", "options", ".", "num_workers", ",", "\n", "pin_memory", "=", "self", ".", "options", ".", "pin_memory", ",", "\n", "shuffle", "=", "self", ".", "options", ".", "shuffle_train", ")", "\n", "\n", "# init alphas", "\n", "if", "epoch", "<=", "3", ":", "\n", "                ", "self", ".", "model", ".", "init_alphas", "(", "epoch", "+", "1", ",", "self", ".", "device", ")", "\n", "\n", "# Iterate over all batches in an epoch", "\n", "", "for", "step", ",", "batch", "in", "enumerate", "(", "tqdm", "(", "train_data_loader", ",", "desc", "=", "'Epoch '", "+", "str", "(", "epoch", ")", ",", "\n", "total", "=", "len", "(", "self", ".", "train_ds", ")", "//", "batch_size", ",", "\n", "initial", "=", "train_data_loader", ".", "checkpoint_batch_idx", ")", ",", "\n", "train_data_loader", ".", "checkpoint_batch_idx", ")", ":", "\n", "\n", "# ------------------ ramp consistency loss weight after updating the scale interval ----------------------", "\n", "                ", "if", "self", ".", "options", ".", "ramp", "==", "'up'", ":", "\n", "                    ", "total_ramp", "=", "(", "len", "(", "self", ".", "train_ds", ")", "//", "self", ".", "options", ".", "batch_size", ")", "*", "5", "\n", "self", ".", "consistency_loss_ramp", "=", "self", ".", "linear_rampup", "(", "ramp_step", ",", "total_ramp", ")", "\n", "ramp_step", "+=", "1", "\n", "", "elif", "self", ".", "options", ".", "ramp", "==", "'down'", ":", "\n", "                    ", "total_ramp", "=", "(", "len", "(", "self", ".", "train_ds", ")", "//", "self", ".", "options", ".", "batch_size", ")", "*", "5", "\n", "consistency_loss_ramp", "=", "self", ".", "linear_rampup", "(", "ramp_step", ",", "total_ramp", ")", "\n", "self", ".", "consistency_loss_ramp", "=", "1.0", "-", "consistency_loss_ramp", "\n", "ramp_step", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "self", ".", "consistency_loss_ramp", "=", "1.0", "\n", "# ---------------------------------------------------------------------", "\n", "\n", "\n", "", "if", "time", ".", "time", "(", ")", "<", "self", ".", "endtime", ":", "\n", "                    ", "batch", "=", "{", "k", ":", "v", ".", "to", "(", "self", ".", "device", ")", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", "and", "k", "!=", "'sample_index'", "else", "v", "for", "k", ",", "v", "in", "batch", ".", "items", "(", ")", "}", "\n", "out", "=", "self", ".", "train_step", "(", "batch", ")", "\n", "self", ".", "step_count", "+=", "1", "\n", "\n", "# Save checkpoint every checkpoint_steps steps", "\n", "if", "self", ".", "step_count", "%", "self", ".", "options", ".", "checkpoint_steps", "==", "0", "and", "epoch", ">=", "3", ":", "\n", "                        ", "self", ".", "saver", ".", "save_checkpoint", "(", "self", ".", "models_dict", ",", "self", ".", "optimizers_dict", ",", "epoch", ",", "step", "+", "1", ",", "self", ".", "options", ".", "batch_size", ",", "train_data_loader", ".", "sampler", ".", "dataset_perm", ",", "self", ".", "step_count", ")", "\n", "tqdm", ".", "write", "(", "'Checkpoint saved'", ")", "\n", "\n", "", "", "else", ":", "\n", "                    ", "tqdm", ".", "write", "(", "'Timeout reached'", ")", "\n", "self", ".", "saver", ".", "save_checkpoint", "(", "self", ".", "models_dict", ",", "self", ".", "optimizers_dict", ",", "epoch", ",", "step", ",", "self", ".", "options", ".", "batch_size", ",", "train_data_loader", ".", "sampler", ".", "dataset_perm", ",", "self", ".", "step_count", ")", "\n", "tqdm", ".", "write", "(", "'Checkpoint saved'", ")", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "\n", "# for the first 3 epochs, we only train half epoch", "\n", "", "if", "epoch", "==", "0", ":", "\n", "                    ", "if", "(", "step", "+", "1", ")", "==", "(", "len", "(", "self", ".", "train_ds", ")", "//", "(", "self", ".", "options", ".", "batch_size", "*", "2", ")", ")", ":", "\n", "                        ", "break", "\n", "", "", "elif", "epoch", "==", "1", ":", "\n", "                    ", "if", "(", "step", "+", "1", ")", "==", "(", "len", "(", "self", ".", "train_ds", ")", "//", "self", ".", "options", ".", "batch_size", ")", ":", "\n", "                        ", "break", "\n", "", "", "elif", "epoch", "==", "2", ":", "\n", "                    ", "if", "(", "step", "+", "1", ")", "==", "(", "len", "(", "self", ".", "train_ds", ")", "//", "(", "self", ".", "options", ".", "batch_size", "*", "2", ")", ")", "*", "3", ":", "\n", "                        ", "break", "\n", "\n", "# load a checkpoint only on startup, for the next epochs", "\n", "# just iterate over the dataset as usual", "\n", "", "", "", "self", ".", "checkpoint", "=", "None", "\n", "\n", "# update learning rate if lr scheduler is epoch-based", "\n", "if", "self", ".", "lr_scheduler", "is", "not", "None", "and", "isinstance", "(", "self", ".", "lr_scheduler", ",", "torch", ".", "optim", ".", "lr_scheduler", ".", "ExponentialLR", ")", ":", "\n", "                ", "if", "(", "epoch", "+", "1", ")", "%", "4", "==", "0", ":", "\n", "                    ", "self", ".", "lr_scheduler", ".", "step", "(", ")", "\n", "", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.base_trainer.BaseTrainer.init_fn": [[157, 159], ["NotImplementedError"], "methods", ["None"], ["", "def", "init_fn", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'You need to provide an _init_fn method'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.base_trainer.BaseTrainer.train_step": [[160, 162], ["NotImplementedError"], "methods", ["None"], ["", "def", "train_step", "(", "self", ",", "input_batch", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'You need to provide a train_step method'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.base_trainer.BaseTrainer.train_summaries": [[163, 165], ["NotImplementedError"], "methods", ["None"], ["", "def", "train_summaries", "(", "self", ",", "input_batch", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'You need to provide a _train_summaries method'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.base_trainer.BaseTrainer.test": [[166, 168], ["None"], "methods", ["None"], ["", "def", "test", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.geometry.batch_rodrigues": [[9, 24], ["torch.norm", "torch.unsqueeze", "torch.div", "torch.cos", "torch.sin", "torch.cat", "geometry.quat_to_rotmat"], "function", ["home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.geometry.quat_to_rotmat"], ["def", "batch_rodrigues", "(", "theta", ")", ":", "\n", "    ", "\"\"\"Convert axis-angle representation to rotation matrix.\n    Args:\n        theta: size = [B, 3]\n    Returns:\n        Rotation matrix corresponding to the quaternion -- size = [B, 3, 3]\n    \"\"\"", "\n", "l1norm", "=", "torch", ".", "norm", "(", "theta", "+", "1e-8", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "angle", "=", "torch", ".", "unsqueeze", "(", "l1norm", ",", "-", "1", ")", "\n", "normalized", "=", "torch", ".", "div", "(", "theta", ",", "angle", ")", "\n", "angle", "=", "angle", "*", "0.5", "\n", "v_cos", "=", "torch", ".", "cos", "(", "angle", ")", "\n", "v_sin", "=", "torch", ".", "sin", "(", "angle", ")", "\n", "quat", "=", "torch", ".", "cat", "(", "[", "v_cos", ",", "v_sin", "*", "normalized", "]", ",", "dim", "=", "1", ")", "\n", "return", "quat_to_rotmat", "(", "quat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.geometry.quat_to_rotmat": [[25, 46], ["quat.size", "torch.stack().view", "norm_quat.norm", "w.pow", "x.pow", "y.pow", "z.pow", "torch.stack"], "function", ["None"], ["", "def", "quat_to_rotmat", "(", "quat", ")", ":", "\n", "    ", "\"\"\"Convert quaternion coefficients to rotation matrix.\n    Args:\n        quat: size = [B, 4] 4 <===>(w, x, y, z)\n    Returns:\n        Rotation matrix corresponding to the quaternion -- size = [B, 3, 3]\n    \"\"\"", "\n", "norm_quat", "=", "quat", "\n", "norm_quat", "=", "norm_quat", "/", "norm_quat", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "w", ",", "x", ",", "y", ",", "z", "=", "norm_quat", "[", ":", ",", "0", "]", ",", "norm_quat", "[", ":", ",", "1", "]", ",", "norm_quat", "[", ":", ",", "2", "]", ",", "norm_quat", "[", ":", ",", "3", "]", "\n", "\n", "B", "=", "quat", ".", "size", "(", "0", ")", "\n", "\n", "w2", ",", "x2", ",", "y2", ",", "z2", "=", "w", ".", "pow", "(", "2", ")", ",", "x", ".", "pow", "(", "2", ")", ",", "y", ".", "pow", "(", "2", ")", ",", "z", ".", "pow", "(", "2", ")", "\n", "wx", ",", "wy", ",", "wz", "=", "w", "*", "x", ",", "w", "*", "y", ",", "w", "*", "z", "\n", "xy", ",", "xz", ",", "yz", "=", "x", "*", "y", ",", "x", "*", "z", ",", "y", "*", "z", "\n", "\n", "rotMat", "=", "torch", ".", "stack", "(", "[", "w2", "+", "x2", "-", "y2", "-", "z2", ",", "2", "*", "xy", "-", "2", "*", "wz", ",", "2", "*", "wy", "+", "2", "*", "xz", ",", "\n", "2", "*", "wz", "+", "2", "*", "xy", ",", "w2", "-", "x2", "+", "y2", "-", "z2", ",", "2", "*", "yz", "-", "2", "*", "wx", ",", "\n", "2", "*", "xz", "-", "2", "*", "wy", ",", "2", "*", "wx", "+", "2", "*", "yz", ",", "w2", "-", "x2", "-", "y2", "+", "z2", "]", ",", "dim", "=", "1", ")", ".", "view", "(", "B", ",", "3", ",", "3", ")", "\n", "return", "rotMat", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.geometry.rot6d_to_rotmat": [[47, 62], ["x.view.view", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.cross", "torch.stack", "torch.einsum().unsqueeze", "torch.einsum"], "function", ["None"], ["", "def", "rot6d_to_rotmat", "(", "x", ")", ":", "\n", "    ", "\"\"\"Convert 6D rotation representation to 3x3 rotation matrix.\n    Based on Zhou et al., \"On the Continuity of Rotation Representations in Neural Networks\", CVPR 2019\n    Input:\n        (B,6) Batch of 6-D rotation representations\n    Output:\n        (B,3,3) Batch of corresponding rotation matrices\n    \"\"\"", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "3", ",", "2", ")", "\n", "a1", "=", "x", "[", ":", ",", ":", ",", "0", "]", "\n", "a2", "=", "x", "[", ":", ",", ":", ",", "1", "]", "\n", "b1", "=", "F", ".", "normalize", "(", "a1", ")", "\n", "b2", "=", "F", ".", "normalize", "(", "a2", "-", "torch", ".", "einsum", "(", "'bi,bi->b'", ",", "b1", ",", "a2", ")", ".", "unsqueeze", "(", "-", "1", ")", "*", "b1", ")", "\n", "b3", "=", "torch", ".", "cross", "(", "b1", ",", "b2", ")", "\n", "return", "torch", ".", "stack", "(", "(", "b1", ",", "b2", ",", "b3", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.geometry.perspective_projection": [[63, 92], ["torch.zeros", "torch.einsum", "torch.einsum", "translation.unsqueeze", "points[].unsqueeze"], "function", ["None"], ["", "def", "perspective_projection", "(", "points", ",", "rotation", ",", "translation", ",", "\n", "focal_length", ",", "camera_center", ")", ":", "\n", "    ", "\"\"\"\n    This function computes the perspective projection of a set of points.\n    Input:\n        points (bs, N, 3): 3D points\n        rotation (bs, 3, 3): Camera rotation\n        translation (bs, 3): Camera translation\n        focal_length (bs,) or scalar: Focal length\n        camera_center (bs, 2): Camera center\n    \"\"\"", "\n", "batch_size", "=", "points", ".", "shape", "[", "0", "]", "\n", "K", "=", "torch", ".", "zeros", "(", "[", "batch_size", ",", "3", ",", "3", "]", ",", "device", "=", "points", ".", "device", ")", "\n", "K", "[", ":", ",", "0", ",", "0", "]", "=", "focal_length", "\n", "K", "[", ":", ",", "1", ",", "1", "]", "=", "focal_length", "\n", "K", "[", ":", ",", "2", ",", "2", "]", "=", "1.", "\n", "K", "[", ":", ",", ":", "-", "1", ",", "-", "1", "]", "=", "camera_center", "\n", "\n", "# Transform points", "\n", "points", "=", "torch", ".", "einsum", "(", "'bij,bkj->bki'", ",", "rotation", ",", "points", ")", "\n", "points", "=", "points", "+", "translation", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "# Apply perspective distortion", "\n", "projected_points", "=", "points", "/", "points", "[", ":", ",", ":", ",", "-", "1", "]", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "# Apply camera intrinsics", "\n", "projected_points", "=", "torch", ".", "einsum", "(", "'bij,bkj->bki'", ",", "K", ",", "projected_points", ")", "\n", "\n", "return", "projected_points", "[", ":", ",", ":", ",", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.geometry.estimate_translation_np": [[94, 133], ["numpy.array", "numpy.array", "numpy.reshape", "numpy.reshape", "numpy.tile", "numpy.tile", "numpy.reshape", "numpy.diagflat", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.linalg.solve", "numpy.array", "numpy.tile", "numpy.tile", "numpy.sqrt", "numpy.reshape", "numpy.tile", "numpy.tile", "numpy.reshape", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "estimate_translation_np", "(", "S", ",", "joints_2d", ",", "joints_conf", ",", "focal_length", "=", "5000", ",", "img_size", "=", "224", ")", ":", "\n", "    ", "\"\"\"Find camera translation that brings 3D joints S closest to 2D the corresponding joints_2d.\n    Input:\n        S: (25, 3) 3D joint locations\n        joints: (25, 3) 2D joint locations and confidence\n    Returns:\n        (3,) camera translation vector\n    \"\"\"", "\n", "\n", "num_joints", "=", "S", ".", "shape", "[", "0", "]", "\n", "# focal length", "\n", "f", "=", "np", ".", "array", "(", "[", "focal_length", ",", "focal_length", "]", ")", "\n", "# optical center", "\n", "center", "=", "np", ".", "array", "(", "[", "img_size", "/", "2.", ",", "img_size", "/", "2.", "]", ")", "\n", "\n", "# transformations", "\n", "Z", "=", "np", ".", "reshape", "(", "np", ".", "tile", "(", "S", "[", ":", ",", "2", "]", ",", "(", "2", ",", "1", ")", ")", ".", "T", ",", "-", "1", ")", "\n", "XY", "=", "np", ".", "reshape", "(", "S", "[", ":", ",", "0", ":", "2", "]", ",", "-", "1", ")", "\n", "O", "=", "np", ".", "tile", "(", "center", ",", "num_joints", ")", "\n", "F", "=", "np", ".", "tile", "(", "f", ",", "num_joints", ")", "\n", "weight2", "=", "np", ".", "reshape", "(", "np", ".", "tile", "(", "np", ".", "sqrt", "(", "joints_conf", ")", ",", "(", "2", ",", "1", ")", ")", ".", "T", ",", "-", "1", ")", "\n", "\n", "# least squares", "\n", "Q", "=", "np", ".", "array", "(", "[", "F", "*", "np", ".", "tile", "(", "np", ".", "array", "(", "[", "1", ",", "0", "]", ")", ",", "num_joints", ")", ",", "F", "*", "np", ".", "tile", "(", "np", ".", "array", "(", "[", "0", ",", "1", "]", ")", ",", "num_joints", ")", ",", "O", "-", "np", ".", "reshape", "(", "joints_2d", ",", "-", "1", ")", "]", ")", ".", "T", "\n", "c", "=", "(", "np", ".", "reshape", "(", "joints_2d", ",", "-", "1", ")", "-", "O", ")", "*", "Z", "-", "F", "*", "XY", "\n", "\n", "# weighted least squares", "\n", "W", "=", "np", ".", "diagflat", "(", "weight2", ")", "\n", "Q", "=", "np", ".", "dot", "(", "W", ",", "Q", ")", "\n", "c", "=", "np", ".", "dot", "(", "W", ",", "c", ")", "\n", "\n", "# square matrix", "\n", "A", "=", "np", ".", "dot", "(", "Q", ".", "T", ",", "Q", ")", "\n", "b", "=", "np", ".", "dot", "(", "Q", ".", "T", ",", "c", ")", "\n", "\n", "# solution", "\n", "trans", "=", "np", ".", "linalg", ".", "solve", "(", "A", ",", "b", ")", "\n", "\n", "return", "trans", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.geometry.estimate_translation": [[135, 158], ["S[].cpu().numpy", "joints_2d[].cpu().numpy", "numpy.zeros", "range", "torch.from_numpy().to", "geometry.estimate_translation_np", "S[].cpu", "joints_2d[].cpu", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.geometry.estimate_translation_np"], ["", "def", "estimate_translation", "(", "S", ",", "joints_2d", ",", "focal_length", "=", "5000.", ",", "img_size", "=", "224.", ")", ":", "\n", "    ", "\"\"\"Find camera translation that brings 3D joints S closest to 2D the corresponding joints_2d.\n    Input:\n        S: (B, 49, 3) 3D joint locations\n        joints: (B, 49, 3) 2D joint locations and confidence\n    Returns:\n        (B, 3) camera translation vectors\n    \"\"\"", "\n", "\n", "device", "=", "S", ".", "device", "\n", "# Use only joints 25:49 (GT joints)", "\n", "S", "=", "S", "[", ":", ",", "25", ":", ",", ":", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "joints_2d", "=", "joints_2d", "[", ":", ",", "25", ":", ",", ":", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "joints_conf", "=", "joints_2d", "[", ":", ",", ":", ",", "-", "1", "]", "\n", "joints_2d", "=", "joints_2d", "[", ":", ",", ":", ",", ":", "-", "1", "]", "\n", "trans", "=", "np", ".", "zeros", "(", "(", "S", ".", "shape", "[", "0", "]", ",", "3", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# Find the translation for each example in the batch", "\n", "for", "i", "in", "range", "(", "S", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "S_i", "=", "S", "[", "i", "]", "\n", "joints_i", "=", "joints_2d", "[", "i", "]", "\n", "conf_i", "=", "joints_conf", "[", "i", "]", "\n", "trans", "[", "i", "]", "=", "estimate_translation_np", "(", "S_i", ",", "joints_i", ",", "conf_i", ",", "focal_length", "=", "focal_length", ",", "img_size", "=", "img_size", ")", "\n", "", "return", "torch", ".", "from_numpy", "(", "trans", ")", ".", "to", "(", "device", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.train_options.TrainOptions.__init__": [[10, 73], ["argparse.ArgumentParser", "train_options.TrainOptions.parser.add_argument_group", "train_options.TrainOptions.add_argument", "train_options.TrainOptions.parser.add_argument_group", "train_options.TrainOptions.add_argument", "train_options.TrainOptions.add_argument", "train_options.TrainOptions.add_argument", "train_options.TrainOptions.add_mutually_exclusive_group", "train_options.TrainOptions.add_mutually_exclusive_group.add_argument", "train_options.TrainOptions.add_mutually_exclusive_group.add_argument", "train_options.TrainOptions.set_defaults", "train_options.TrainOptions.parser.add_argument_group", "train_options.TrainOptions.add_argument", "train_options.TrainOptions.add_argument", "train_options.TrainOptions.add_argument", "train_options.TrainOptions.add_argument", "train_options.TrainOptions.parser.add_argument_group", "train_options.TrainOptions.add_argument", "train_options.TrainOptions.add_argument", "train_options.TrainOptions.add_argument", "train_options.TrainOptions.add_argument", "train_options.TrainOptions.add_argument", "train_options.TrainOptions.add_argument", "train_options.TrainOptions.add_argument", "train_options.TrainOptions.add_argument", "train_options.TrainOptions.add_argument", "train_options.TrainOptions.add_argument", "train_options.TrainOptions.add_argument", "train_options.TrainOptions.add_argument", "train_options.TrainOptions.add_argument", "train_options.TrainOptions.add_argument", "train_options.TrainOptions.add_argument", "train_options.TrainOptions.add_argument", "train_options.TrainOptions.add_argument", "train_options.TrainOptions.add_argument", "train_options.TrainOptions.add_argument", "train_options.TrainOptions.add_argument", "train_options.TrainOptions.add_argument", "train_options.TrainOptions.add_argument", "train_options.TrainOptions.add_argument", "train_options.TrainOptions.add_argument", "train_options.TrainOptions.add_argument", "train_options.TrainOptions.add_argument", "train_options.TrainOptions.add_argument", "train_options.TrainOptions.add_argument", "train_options.TrainOptions.add_mutually_exclusive_group", "train_options.TrainOptions.add_mutually_exclusive_group.add_argument", "train_options.TrainOptions.add_mutually_exclusive_group.add_argument", "train_options.TrainOptions.add_mutually_exclusive_group.set_defaults"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "req", "=", "self", ".", "parser", ".", "add_argument_group", "(", "'Required'", ")", "\n", "req", ".", "add_argument", "(", "'--name'", ",", "required", "=", "True", ",", "help", "=", "'Name of the experiment'", ")", "\n", "\n", "gen", "=", "self", ".", "parser", ".", "add_argument_group", "(", "'General'", ")", "\n", "gen", ".", "add_argument", "(", "'--time_to_run'", ",", "type", "=", "int", ",", "default", "=", "np", ".", "inf", ",", "help", "=", "'Total time to run in seconds. Used for training in environments with timing constraints'", ")", "\n", "gen", ".", "add_argument", "(", "'--resume'", ",", "dest", "=", "'resume'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "help", "=", "'Resume from checkpoint (Use latest checkpoint by default'", ")", "\n", "gen", ".", "add_argument", "(", "'--num_workers'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'Number of processes used for data loading'", ")", "\n", "pin", "=", "gen", ".", "add_mutually_exclusive_group", "(", ")", "\n", "pin", ".", "add_argument", "(", "'--pin_memory'", ",", "dest", "=", "'pin_memory'", ",", "action", "=", "'store_true'", ")", "\n", "pin", ".", "add_argument", "(", "'--no_pin_memory'", ",", "dest", "=", "'pin_memory'", ",", "action", "=", "'store_false'", ")", "\n", "gen", ".", "set_defaults", "(", "pin_memory", "=", "True", ")", "\n", "\n", "io", "=", "self", ".", "parser", ".", "add_argument_group", "(", "'io'", ")", "\n", "io", ".", "add_argument", "(", "'--log_dir'", ",", "default", "=", "'logs'", ",", "help", "=", "'Directory to store logs'", ")", "\n", "io", ".", "add_argument", "(", "'--checkpoint'", ",", "default", "=", "None", ",", "help", "=", "'Path to checkpoint'", ")", "\n", "io", ".", "add_argument", "(", "'--from_json'", ",", "default", "=", "None", ",", "help", "=", "'Load options from json file instead of the command line'", ")", "\n", "io", ".", "add_argument", "(", "'--pretrained_checkpoint'", ",", "default", "=", "config", ".", "PRE_MODEL_PATH", ",", "help", "=", "'Load a pretrained checkpoint at the beginning training'", ")", "\n", "\n", "train", "=", "self", ".", "parser", ".", "add_argument_group", "(", "'Training Options'", ")", "\n", "train", ".", "add_argument", "(", "'--num_epochs'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'Total number of training epochs'", ")", "\n", "train", ".", "add_argument", "(", "\"--lr\"", ",", "type", "=", "float", ",", "default", "=", "5e-5", ",", "help", "=", "\"Learning rate\"", ")", "\n", "train", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "help", "=", "'Batch size'", ")", "\n", "train", ".", "add_argument", "(", "'--summary_steps'", ",", "type", "=", "int", ",", "default", "=", "2000", ",", "help", "=", "'Summary saving frequency'", ")", "\n", "train", ".", "add_argument", "(", "'--test_steps'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "'Testing frequency during training'", ")", "\n", "train", ".", "add_argument", "(", "'--checkpoint_steps'", ",", "type", "=", "int", ",", "default", "=", "2000", ",", "help", "=", "'Checkpoint saving frequency'", ")", "\n", "\n", "train", ".", "add_argument", "(", "'--img_res'", ",", "type", "=", "int", ",", "default", "=", "224", ",", "help", "=", "'Rescale bounding boxes to size [img_res, img_res] before feeding them in the network'", ")", "\n", "train", ".", "add_argument", "(", "'--rot_factor'", ",", "type", "=", "float", ",", "default", "=", "30", ",", "help", "=", "'Random rotation in the range [-rot_factor, rot_factor]'", ")", "\n", "train", ".", "add_argument", "(", "'--noise_factor'", ",", "type", "=", "float", ",", "default", "=", "0.4", ",", "help", "=", "'Randomly multiply pixel values with factor in the range [1-noise_factor, 1+noise_factor]'", ")", "\n", "train", ".", "add_argument", "(", "'--scale_factor'", ",", "type", "=", "float", ",", "default", "=", "0.25", ",", "help", "=", "'Rescale bounding boxes by a factor of [1-scale_factor,1+scale_factor]'", ")", "\n", "\n", "train", ".", "add_argument", "(", "'--ignore_3d'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "help", "=", "'Ignore GT 3D data (for unpaired experiments'", ")", "\n", "train", ".", "add_argument", "(", "'--shape_loss_weight'", ",", "default", "=", "0", ",", "type", "=", "float", ",", "help", "=", "'Weight of per-vertex loss'", ")", "\n", "train", ".", "add_argument", "(", "'--keypoint_loss_weight'", ",", "default", "=", "5.", ",", "type", "=", "float", ",", "help", "=", "'Weight of 2D and 3D keypoint loss'", ")", "\n", "train", ".", "add_argument", "(", "'--pose_loss_weight'", ",", "default", "=", "1.", ",", "type", "=", "float", ",", "help", "=", "'Weight of SMPL pose loss'", ")", "\n", "train", ".", "add_argument", "(", "'--beta_loss_weight'", ",", "default", "=", "0.001", ",", "type", "=", "float", ",", "help", "=", "'Weight of SMPL betas loss'", ")", "\n", "train", ".", "add_argument", "(", "'--cam_loss_weight'", ",", "default", "=", "0.0001", ",", "type", "=", "float", ",", "help", "=", "'Weight of SMPL cam_t loss'", ")", "\n", "train", ".", "add_argument", "(", "'--feat_loss_weight'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "help", "=", "'Weight of feat mse loss'", ")", "\n", "train", ".", "add_argument", "(", "'--openpose_train_weight'", ",", "default", "=", "0.", ",", "help", "=", "'Weight for OpenPose keypoints during training'", ")", "\n", "train", ".", "add_argument", "(", "'--gt_train_weight'", ",", "default", "=", "1.", ",", "help", "=", "'Weight for GT keypoints during training'", ")", "\n", "train", ".", "add_argument", "(", "'--tiny_pose_loss_weight'", ",", "default", "=", "2.5", ",", "type", "=", "float", ",", "help", "=", "'Weight of tiny pose 2d keypoint loss'", ")", "\n", "train", ".", "add_argument", "(", "'--consistency_loss_weight'", ",", "default", "=", "0.25", ",", "type", "=", "float", ",", "help", "=", "'Weight of consistency loss'", ")", "\n", "train", ".", "add_argument", "(", "'--ramp'", ",", "default", "=", "'up'", ",", "type", "=", "str", ",", "help", "=", "'Whether to rampup the consistency loss weight'", ")", "\n", "\n", "train", ".", "add_argument", "(", "'--kernel'", ",", "default", "=", "'dot'", ",", "type", "=", "str", ",", "help", "=", "'kernel for xent loss'", ")", "\n", "train", ".", "add_argument", "(", "'--loss_consistency_type'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "'type of consistency loss format'", ")", "\n", "\n", "train", ".", "add_argument", "(", "'--input_img'", ",", "default", "=", "'orig'", ",", "type", "=", "str", ",", "help", "=", "'orig, lr, up'", ")", "\n", "\n", "train", ".", "add_argument", "(", "'--max_queue_size'", ",", "default", "=", "20000", ",", "type", "=", "int", ",", "help", "=", "'max queue size'", ")", "\n", "train", ".", "add_argument", "(", "'--sample_size'", ",", "default", "=", "8192", "*", "2", ",", "type", "=", "int", ",", "help", "=", "'negative sampling size'", ")", "\n", "train", ".", "add_argument", "(", "'--tau'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "help", "=", "'temperatur parameter'", ")", "\n", "\n", "shuffle_train", "=", "train", ".", "add_mutually_exclusive_group", "(", ")", "\n", "shuffle_train", ".", "add_argument", "(", "'--shuffle_train'", ",", "dest", "=", "'shuffle_train'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Shuffle training data'", ")", "\n", "shuffle_train", ".", "add_argument", "(", "'--no_shuffle_train'", ",", "dest", "=", "'shuffle_train'", ",", "action", "=", "'store_false'", ",", "help", "=", "'Don\\'t shuffle training data'", ")", "\n", "shuffle_train", ".", "set_defaults", "(", "shuffle_train", "=", "True", ")", "\n", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.train_options.TrainOptions.parse_args": [[74, 94], ["train_options.TrainOptions.parser.parse_args", "os.path.abspath", "os.path.join", "os.path.join", "os.path.join", "train_options.TrainOptions.save_dump", "open", "json.load", "os.path.abspath", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "collections.namedtuple", "json.load.keys"], "methods", ["home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.train_options.TrainOptions.parse_args", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.train_options.TrainOptions.save_dump"], ["", "def", "parse_args", "(", "self", ",", "manual_args", "=", "None", ")", ":", "\n", "        ", "\"\"\"Parse input arguments.\"\"\"", "\n", "self", ".", "args", "=", "self", ".", "parser", ".", "parse_args", "(", "manual_args", ")", "\n", "# If config file is passed, override all arguments with the values from the config file", "\n", "if", "self", ".", "args", ".", "from_json", "is", "not", "None", ":", "\n", "            ", "path_to_json", "=", "os", ".", "path", ".", "abspath", "(", "self", ".", "args", ".", "from_json", ")", "\n", "with", "open", "(", "path_to_json", ",", "\"r\"", ")", "as", "f", ":", "\n", "                ", "json_args", "=", "json", ".", "load", "(", "f", ")", "\n", "json_args", "=", "namedtuple", "(", "\"json_args\"", ",", "json_args", ".", "keys", "(", ")", ")", "(", "**", "json_args", ")", "\n", "return", "json_args", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "args", ".", "log_dir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "abspath", "(", "self", ".", "args", ".", "log_dir", ")", ",", "self", ".", "args", ".", "name", ")", "\n", "self", ".", "args", ".", "summary_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "log_dir", ",", "'tensorboard'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "args", ".", "log_dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "self", ".", "args", ".", "log_dir", ")", "\n", "", "self", ".", "args", ".", "checkpoint_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "log_dir", ",", "'checkpoints'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "args", ".", "checkpoint_dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "self", ".", "args", ".", "checkpoint_dir", ")", "\n", "", "self", ".", "save_dump", "(", ")", "\n", "return", "self", ".", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.train_options.TrainOptions.save_dump": [[95, 104], ["os.path.exists", "os.makedirs", "open", "json.dump", "os.path.join", "vars"], "methods", ["None"], ["", "", "def", "save_dump", "(", "self", ")", ":", "\n", "        ", "\"\"\"Store all argument values to a json file.\n        The default location is logs/expname/config.json.\n        \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "args", ".", "log_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "args", ".", "log_dir", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "log_dir", ",", "\"config.json\"", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "vars", "(", "self", ".", "args", ")", ",", "f", ",", "indent", "=", "4", ")", "\n", "", "return", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.renderer.Renderer.__init__": [[14, 21], ["pyrender.OffscreenRenderer"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "focal_length", "=", "5000", ",", "img_res", "=", "224", ",", "faces", "=", "None", ")", ":", "\n", "        ", "self", ".", "renderer", "=", "pyrender", ".", "OffscreenRenderer", "(", "viewport_width", "=", "img_res", ",", "\n", "viewport_height", "=", "img_res", ",", "\n", "point_size", "=", "1.0", ")", "\n", "self", ".", "focal_length", "=", "focal_length", "\n", "self", ".", "camera_center", "=", "[", "img_res", "//", "2", ",", "img_res", "//", "2", "]", "\n", "self", ".", "faces", "=", "faces", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.renderer.Renderer.reset_render": [[22, 27], ["pyrender.OffscreenRenderer"], "methods", ["None"], ["", "def", "reset_render", "(", "self", ",", "img_res", ")", ":", "\n", "        ", "self", ".", "renderer", "=", "pyrender", ".", "OffscreenRenderer", "(", "viewport_width", "=", "img_res", ",", "\n", "viewport_height", "=", "img_res", ",", "\n", "point_size", "=", "1.0", ")", "\n", "self", ".", "camera_center", "=", "[", "img_res", "//", "2", ",", "img_res", "//", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.renderer.Renderer.visualize_tb": [[28, 40], ["vertices.cpu().numpy.cpu().numpy.cpu().numpy", "camera_translation.cpu().numpy.cpu().numpy.cpu().numpy", "images.cpu.cpu.cpu", "numpy.transpose", "range", "torchvision.utils.make_grid", "images.cpu.cpu.numpy", "torch.from_numpy().float", "torchvision.utils.make_grid.append", "torchvision.utils.make_grid.append", "vertices.cpu().numpy.cpu().numpy.cpu", "camera_translation.cpu().numpy.cpu().numpy.cpu", "torch.from_numpy", "numpy.transpose", "renderer.Renderer.__call__"], "methods", ["home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.feat_queue.FeatQueue.append", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.feat_queue.FeatQueue.append", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.part_utils.PartRenderer.__call__"], ["", "def", "visualize_tb", "(", "self", ",", "vertices", ",", "camera_translation", ",", "images", ")", ":", "\n", "        ", "vertices", "=", "vertices", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "camera_translation", "=", "camera_translation", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "images", "=", "images", ".", "cpu", "(", ")", "\n", "images_np", "=", "np", ".", "transpose", "(", "images", ".", "numpy", "(", ")", ",", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "\n", "rend_imgs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "vertices", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "rend_img", "=", "torch", ".", "from_numpy", "(", "np", ".", "transpose", "(", "self", ".", "__call__", "(", "vertices", "[", "i", "]", ",", "camera_translation", "[", "i", "]", ",", "images_np", "[", "i", "]", ")", ",", "(", "2", ",", "0", ",", "1", ")", ")", ")", ".", "float", "(", ")", "\n", "rend_imgs", ".", "append", "(", "images", "[", "i", "]", ")", "\n", "rend_imgs", ".", "append", "(", "rend_img", ")", "\n", "", "rend_imgs", "=", "make_grid", "(", "rend_imgs", ",", "nrow", "=", "2", ")", "\n", "return", "rend_imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.renderer.Renderer.visualize": [[41, 52], ["vertices.cpu().numpy.cpu().numpy.cpu().numpy", "camera_translation.cpu().numpy.cpu().numpy.cpu().numpy", "images.cpu.cpu.cpu", "numpy.transpose", "range", "torch.stack", "images.cpu.cpu.numpy", "torch.from_numpy().float", "torch.stack.append", "vertices.cpu().numpy.cpu().numpy.cpu", "camera_translation.cpu().numpy.cpu().numpy.cpu", "torch.from_numpy", "numpy.transpose", "renderer.Renderer.__call__"], "methods", ["home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.feat_queue.FeatQueue.append", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.part_utils.PartRenderer.__call__"], ["", "def", "visualize", "(", "self", ",", "vertices", ",", "camera_translation", ",", "images", ",", "angle", "=", "180", ",", "rot_axis", "=", "[", "1", ",", "0", ",", "0", "]", ")", ":", "\n", "        ", "vertices", "=", "vertices", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "camera_translation", "=", "camera_translation", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "images", "=", "images", ".", "cpu", "(", ")", "\n", "images_np", "=", "np", ".", "transpose", "(", "images", ".", "numpy", "(", ")", ",", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "\n", "rend_imgs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "vertices", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "rend_img", "=", "torch", ".", "from_numpy", "(", "np", ".", "transpose", "(", "self", ".", "__call__", "(", "vertices", "[", "i", "]", ",", "camera_translation", "[", "i", "]", ",", "images_np", "[", "i", "]", ",", "angle", ",", "rot_axis", ")", ",", "(", "2", ",", "0", ",", "1", ")", ")", ")", ".", "float", "(", ")", "\n", "rend_imgs", ".", "append", "(", "rend_img", ")", "\n", "", "rend_imgs", "=", "torch", ".", "stack", "(", "rend_imgs", ")", "\n", "return", "rend_imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.renderer.Renderer.__call__": [[54, 104], ["pyrender.MetallicRoughnessMaterial", "trimesh.Trimesh", "pyrender.Mesh.from_trimesh", "pyrender.Scene", "pyrender.Scene.add", "numpy.eye", "pyrender.IntrinsicsCamera", "pyrender.Scene.add", "pyrender.DirectionalLight", "numpy.eye", "numpy.array", "pyrender.Scene.add", "numpy.array", "pyrender.Scene.add", "numpy.array", "pyrender.Scene.add", "renderer.Renderer.renderer.render", "trimesh.transformations.rotation_matrix", "pyrender.Mesh.from_trimesh.apply_transform", "trimesh.transformations.rotation_matrix", "pyrender.Mesh.from_trimesh.apply_transform", "trimesh.transformations.rotation_matrix", "pyrender.Mesh.from_trimesh.apply_transform", "color.astype", "numpy.radians", "numpy.radians", "numpy.radians"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "vertices", ",", "camera_translation", ",", "image", ",", "angle", "=", "180", ",", "rot_axis", "=", "[", "1", ",", "0", ",", "0", "]", ")", ":", "\n", "        ", "material", "=", "pyrender", ".", "MetallicRoughnessMaterial", "(", "\n", "metallicFactor", "=", "0.2", ",", "\n", "alphaMode", "=", "'OPAQUE'", ",", "\n", "baseColorFactor", "=", "(", "0.8", ",", "0.3", ",", "0.3", ",", "1.0", ")", ")", "\n", "\n", "camera_translation", "[", "0", "]", "*=", "-", "1.", "\n", "\n", "mesh", "=", "trimesh", ".", "Trimesh", "(", "vertices", ",", "self", ".", "faces", ")", "\n", "if", "angle", "!=", "180", ":", "\n", "            ", "rot", "=", "trimesh", ".", "transformations", ".", "rotation_matrix", "(", "\n", "np", ".", "radians", "(", "180", ")", ",", "[", "1", ",", "0", ",", "0", "]", ")", "\n", "mesh", ".", "apply_transform", "(", "rot", ")", "\n", "rot", "=", "trimesh", ".", "transformations", ".", "rotation_matrix", "(", "\n", "np", ".", "radians", "(", "90", ")", ",", "[", "0", ",", "1", ",", "0", "]", ")", "\n", "mesh", ".", "apply_transform", "(", "rot", ")", "\n", "", "else", ":", "\n", "            ", "rot", "=", "trimesh", ".", "transformations", ".", "rotation_matrix", "(", "\n", "np", ".", "radians", "(", "angle", ")", ",", "rot_axis", ")", "\n", "mesh", ".", "apply_transform", "(", "rot", ")", "\n", "", "mesh", "=", "pyrender", ".", "Mesh", ".", "from_trimesh", "(", "mesh", ",", "material", "=", "material", ")", "\n", "\n", "scene", "=", "pyrender", ".", "Scene", "(", "ambient_light", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "\n", "scene", ".", "add", "(", "mesh", ",", "'mesh'", ")", "\n", "\n", "camera_pose", "=", "np", ".", "eye", "(", "4", ")", "\n", "camera_pose", "[", ":", "3", ",", "3", "]", "=", "camera_translation", "\n", "camera", "=", "pyrender", ".", "IntrinsicsCamera", "(", "fx", "=", "self", ".", "focal_length", ",", "fy", "=", "self", ".", "focal_length", ",", "\n", "cx", "=", "self", ".", "camera_center", "[", "0", "]", ",", "cy", "=", "self", ".", "camera_center", "[", "1", "]", ")", "\n", "scene", ".", "add", "(", "camera", ",", "pose", "=", "camera_pose", ")", "\n", "\n", "\n", "light", "=", "pyrender", ".", "DirectionalLight", "(", "color", "=", "[", "1.0", ",", "1.0", ",", "1.0", "]", ",", "intensity", "=", "1", ")", "\n", "light_pose", "=", "np", ".", "eye", "(", "4", ")", "\n", "\n", "light_pose", "[", ":", "3", ",", "3", "]", "=", "np", ".", "array", "(", "[", "0", ",", "-", "1", ",", "1", "]", ")", "\n", "scene", ".", "add", "(", "light", ",", "pose", "=", "light_pose", ")", "\n", "\n", "light_pose", "[", ":", "3", ",", "3", "]", "=", "np", ".", "array", "(", "[", "0", ",", "1", ",", "1", "]", ")", "\n", "scene", ".", "add", "(", "light", ",", "pose", "=", "light_pose", ")", "\n", "\n", "light_pose", "[", ":", "3", ",", "3", "]", "=", "np", ".", "array", "(", "[", "1", ",", "1", ",", "2", "]", ")", "\n", "scene", ".", "add", "(", "light", ",", "pose", "=", "light_pose", ")", "\n", "\n", "color", ",", "rend_depth", "=", "self", ".", "renderer", ".", "render", "(", "scene", ",", "flags", "=", "pyrender", ".", "RenderFlags", ".", "RGBA", ")", "\n", "color", "=", "color", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.0", "\n", "valid_mask", "=", "(", "rend_depth", ">", "0", ")", "[", ":", ",", ":", ",", "None", "]", "\n", "output_img", "=", "(", "color", "[", ":", ",", ":", ",", ":", "3", "]", "*", "valid_mask", "+", "\n", "(", "1", "-", "valid_mask", ")", "*", "image", ")", "\n", "return", "output_img", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.saver.CheckpointSaver.__init__": [[9, 16], ["os.path.abspath", "saver.CheckpointSaver.get_latest_checkpoint", "os.path.exists", "os.makedirs"], "methods", ["home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.saver.CheckpointSaver.get_latest_checkpoint"], ["def", "__init__", "(", "self", ",", "save_dir", ",", "save_steps", "=", "1000", ")", ":", "\n", "        ", "self", ".", "save_dir", "=", "os", ".", "path", ".", "abspath", "(", "save_dir", ")", "\n", "self", ".", "save_steps", "=", "save_steps", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "save_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "save_dir", ")", "\n", "", "self", ".", "get_latest_checkpoint", "(", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.saver.CheckpointSaver.exists_checkpoint": [[17, 23], ["os.path.isfile"], "methods", ["None"], ["", "def", "exists_checkpoint", "(", "self", ",", "checkpoint_file", "=", "None", ")", ":", "\n", "        ", "\"\"\"Check if a checkpoint exists in the current directory.\"\"\"", "\n", "if", "checkpoint_file", "is", "None", ":", "\n", "            ", "return", "False", "if", "self", ".", "latest_checkpoint", "is", "None", "else", "True", "\n", "", "else", ":", "\n", "            ", "return", "os", ".", "path", ".", "isfile", "(", "checkpoint_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.saver.CheckpointSaver.save_checkpoint": [[24, 42], ["datetime.datetime.now", "os.path.abspath", "print", "print", "torch.save", "os.path.join", "models[].state_dict", "optimizers[].state_dict", "datetime.datetime.now.strftime"], "methods", ["None"], ["", "", "def", "save_checkpoint", "(", "self", ",", "models", ",", "optimizers", ",", "epoch", ",", "batch_idx", ",", "batch_size", ",", "dataset_perm", ",", "total_step_count", ")", ":", "\n", "        ", "\"\"\"Save checkpoint.\"\"\"", "\n", "timestamp", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "checkpoint_filename", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "timestamp", ".", "strftime", "(", "'%Y_%m_%d-%H_%M_%S'", ")", "+", "'.pt'", ")", ")", "\n", "checkpoint", "=", "{", "}", "\n", "for", "model", "in", "models", ":", "\n", "            ", "checkpoint", "[", "model", "]", "=", "models", "[", "model", "]", ".", "state_dict", "(", ")", "\n", "", "for", "optimizer", "in", "optimizers", ":", "\n", "            ", "checkpoint", "[", "optimizer", "]", "=", "optimizers", "[", "optimizer", "]", ".", "state_dict", "(", ")", "\n", "", "checkpoint", "[", "'epoch'", "]", "=", "epoch", "\n", "checkpoint", "[", "'batch_idx'", "]", "=", "batch_idx", "\n", "checkpoint", "[", "'batch_size'", "]", "=", "batch_size", "\n", "checkpoint", "[", "'dataset_perm'", "]", "=", "dataset_perm", "\n", "checkpoint", "[", "'total_step_count'", "]", "=", "total_step_count", "\n", "print", "(", "timestamp", ",", "'Epoch:'", ",", "epoch", ",", "'Iteration:'", ",", "batch_idx", ")", "\n", "print", "(", "'Saving checkpoint file ['", "+", "checkpoint_filename", "+", "']'", ")", "\n", "torch", ".", "save", "(", "checkpoint", ",", "checkpoint_filename", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.saver.CheckpointSaver.load_checkpoint": [[43, 60], ["torch.load", "print", "models[].load_state_dict", "optimizers[].load_state_dict"], "methods", ["None"], ["", "def", "load_checkpoint", "(", "self", ",", "models", ",", "optimizers", ",", "checkpoint_file", "=", "None", ")", ":", "\n", "        ", "\"\"\"Load a checkpoint.\"\"\"", "\n", "if", "checkpoint_file", "is", "None", ":", "\n", "            ", "print", "(", "'Loading latest checkpoint ['", "+", "self", ".", "latest_checkpoint", "+", "']'", ")", "\n", "checkpoint_file", "=", "self", ".", "latest_checkpoint", "\n", "", "checkpoint", "=", "torch", ".", "load", "(", "checkpoint_file", ")", "\n", "for", "model", "in", "models", ":", "\n", "            ", "if", "model", "in", "checkpoint", ":", "\n", "                ", "models", "[", "model", "]", ".", "load_state_dict", "(", "checkpoint", "[", "model", "]", ")", "\n", "", "", "for", "optimizer", "in", "optimizers", ":", "\n", "            ", "if", "optimizer", "in", "checkpoint", ":", "\n", "                ", "optimizers", "[", "optimizer", "]", ".", "load_state_dict", "(", "checkpoint", "[", "optimizer", "]", ")", "\n", "", "", "return", "{", "'epoch'", ":", "checkpoint", "[", "'epoch'", "]", ",", "\n", "'batch_idx'", ":", "checkpoint", "[", "'batch_idx'", "]", ",", "\n", "'batch_size'", ":", "checkpoint", "[", "'batch_size'", "]", ",", "\n", "'dataset_perm'", ":", "checkpoint", "[", "'dataset_perm'", "]", ",", "\n", "'total_step_count'", ":", "checkpoint", "[", "'total_step_count'", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.saver.CheckpointSaver.get_latest_checkpoint": [[61, 71], ["os.walk", "sorted", "filename.endswith", "len", "sorted.append", "os.path.abspath", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.feat_queue.FeatQueue.append"], ["", "def", "get_latest_checkpoint", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get filename of latest checkpoint if it exists.\"\"\"", "\n", "checkpoint_list", "=", "[", "]", "\n", "for", "dirpath", ",", "dirnames", ",", "filenames", "in", "os", ".", "walk", "(", "self", ".", "save_dir", ")", ":", "\n", "            ", "for", "filename", "in", "filenames", ":", "\n", "                ", "if", "filename", ".", "endswith", "(", "'.pt'", ")", ":", "\n", "                    ", "checkpoint_list", ".", "append", "(", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "dirpath", ",", "filename", ")", ")", ")", "\n", "", "", "", "checkpoint_list", "=", "sorted", "(", "checkpoint_list", ")", "\n", "self", ".", "latest_checkpoint", "=", "None", "if", "(", "len", "(", "checkpoint_list", ")", "is", "0", ")", "else", "checkpoint_list", "[", "-", "1", "]", "\n", "return", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.imutils.get_transform": [[12, 37], ["numpy.zeros", "float", "float", "numpy.zeros", "numpy.eye", "np.eye.copy", "numpy.dot", "numpy.sin", "numpy.cos", "numpy.dot", "numpy.dot", "float", "float"], "function", ["None"], ["def", "get_transform", "(", "center", ",", "scale", ",", "res", ",", "rot", "=", "0", ")", ":", "\n", "    ", "\"\"\"Generate transformation matrix.\"\"\"", "\n", "h", "=", "200", "*", "scale", "\n", "t", "=", "np", ".", "zeros", "(", "(", "3", ",", "3", ")", ")", "\n", "t", "[", "0", ",", "0", "]", "=", "float", "(", "res", "[", "1", "]", ")", "/", "h", "\n", "t", "[", "1", ",", "1", "]", "=", "float", "(", "res", "[", "0", "]", ")", "/", "h", "\n", "t", "[", "0", ",", "2", "]", "=", "res", "[", "1", "]", "*", "(", "-", "float", "(", "center", "[", "0", "]", ")", "/", "h", "+", ".5", ")", "\n", "t", "[", "1", ",", "2", "]", "=", "res", "[", "0", "]", "*", "(", "-", "float", "(", "center", "[", "1", "]", ")", "/", "h", "+", ".5", ")", "\n", "t", "[", "2", ",", "2", "]", "=", "1", "\n", "if", "not", "rot", "==", "0", ":", "\n", "        ", "rot", "=", "-", "rot", "# To match direction of rotation from cropping", "\n", "rot_mat", "=", "np", ".", "zeros", "(", "(", "3", ",", "3", ")", ")", "\n", "rot_rad", "=", "rot", "*", "np", ".", "pi", "/", "180", "\n", "sn", ",", "cs", "=", "np", ".", "sin", "(", "rot_rad", ")", ",", "np", ".", "cos", "(", "rot_rad", ")", "\n", "rot_mat", "[", "0", ",", ":", "2", "]", "=", "[", "cs", ",", "-", "sn", "]", "\n", "rot_mat", "[", "1", ",", ":", "2", "]", "=", "[", "sn", ",", "cs", "]", "\n", "rot_mat", "[", "2", ",", "2", "]", "=", "1", "\n", "# Need to rotate around center", "\n", "t_mat", "=", "np", ".", "eye", "(", "3", ")", "\n", "t_mat", "[", "0", ",", "2", "]", "=", "-", "res", "[", "1", "]", "/", "2", "\n", "t_mat", "[", "1", ",", "2", "]", "=", "-", "res", "[", "0", "]", "/", "2", "\n", "t_inv", "=", "t_mat", ".", "copy", "(", ")", "\n", "t_inv", "[", ":", "2", ",", "2", "]", "*=", "-", "1", "\n", "t", "=", "np", ".", "dot", "(", "t_inv", ",", "np", ".", "dot", "(", "rot_mat", ",", "np", ".", "dot", "(", "t_mat", ",", "t", ")", ")", ")", "\n", "", "return", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.imutils.transform": [[39, 47], ["imutils.get_transform", "numpy.dot", "numpy.linalg.inv", "numpy.array", "new_pt[].astype"], "function", ["home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.imutils.get_transform"], ["", "def", "transform", "(", "pt", ",", "center", ",", "scale", ",", "res", ",", "invert", "=", "0", ",", "rot", "=", "0", ")", ":", "\n", "    ", "\"\"\"Transform pixel location to different reference.\"\"\"", "\n", "t", "=", "get_transform", "(", "center", ",", "scale", ",", "res", ",", "rot", "=", "rot", ")", "\n", "if", "invert", ":", "\n", "        ", "t", "=", "np", ".", "linalg", ".", "inv", "(", "t", ")", "\n", "", "new_pt", "=", "np", ".", "array", "(", "[", "pt", "[", "0", "]", "-", "1", ",", "pt", "[", "1", "]", "-", "1", ",", "1.", "]", ")", ".", "T", "\n", "new_pt", "=", "np", ".", "dot", "(", "t", ",", "new_pt", ")", "\n", "return", "new_pt", "[", ":", "2", "]", ".", "astype", "(", "int", ")", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.imutils.crop": [[49, 84], ["int", "numpy.zeros", "scipy.misc.imresize", "numpy.array", "numpy.array", "len", "max", "max", "max", "min", "max", "min", "scipy.misc.imrotate", "imutils.transform", "imutils.transform", "min", "min", "len", "len", "numpy.linalg.norm", "float", "len", "len"], "function", ["home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.imutils.transform", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.imutils.transform"], ["", "def", "crop", "(", "img", ",", "center", ",", "scale", ",", "res", ",", "rot", "=", "0", ")", ":", "\n", "    ", "\"\"\"Crop image according to the supplied bounding box.\"\"\"", "\n", "# Upper left point", "\n", "ul", "=", "np", ".", "array", "(", "transform", "(", "[", "1", ",", "1", "]", ",", "center", ",", "scale", ",", "res", ",", "invert", "=", "1", ")", ")", "-", "1", "\n", "# Bottom right point", "\n", "br", "=", "np", ".", "array", "(", "transform", "(", "[", "res", "[", "0", "]", "+", "1", ",", "\n", "res", "[", "1", "]", "+", "1", "]", ",", "center", ",", "scale", ",", "res", ",", "invert", "=", "1", ")", ")", "-", "1", "\n", "\n", "# Padding so that when rotated proper amount of context is included", "\n", "pad", "=", "int", "(", "np", ".", "linalg", ".", "norm", "(", "br", "-", "ul", ")", "/", "2", "-", "float", "(", "br", "[", "1", "]", "-", "ul", "[", "1", "]", ")", "/", "2", ")", "\n", "if", "not", "rot", "==", "0", ":", "\n", "        ", "ul", "-=", "pad", "\n", "br", "+=", "pad", "\n", "\n", "", "new_shape", "=", "[", "br", "[", "1", "]", "-", "ul", "[", "1", "]", ",", "br", "[", "0", "]", "-", "ul", "[", "0", "]", "]", "\n", "if", "len", "(", "img", ".", "shape", ")", ">", "2", ":", "\n", "        ", "new_shape", "+=", "[", "img", ".", "shape", "[", "2", "]", "]", "\n", "", "new_img", "=", "np", ".", "zeros", "(", "new_shape", ")", "\n", "\n", "# Range to fill new array", "\n", "new_x", "=", "max", "(", "0", ",", "-", "ul", "[", "0", "]", ")", ",", "min", "(", "br", "[", "0", "]", ",", "len", "(", "img", "[", "0", "]", ")", ")", "-", "ul", "[", "0", "]", "\n", "new_y", "=", "max", "(", "0", ",", "-", "ul", "[", "1", "]", ")", ",", "min", "(", "br", "[", "1", "]", ",", "len", "(", "img", ")", ")", "-", "ul", "[", "1", "]", "\n", "# Range to sample from original image", "\n", "old_x", "=", "max", "(", "0", ",", "ul", "[", "0", "]", ")", ",", "min", "(", "len", "(", "img", "[", "0", "]", ")", ",", "br", "[", "0", "]", ")", "\n", "old_y", "=", "max", "(", "0", ",", "ul", "[", "1", "]", ")", ",", "min", "(", "len", "(", "img", ")", ",", "br", "[", "1", "]", ")", "\n", "new_img", "[", "new_y", "[", "0", "]", ":", "new_y", "[", "1", "]", ",", "new_x", "[", "0", "]", ":", "new_x", "[", "1", "]", "]", "=", "img", "[", "old_y", "[", "0", "]", ":", "old_y", "[", "1", "]", ",", "\n", "old_x", "[", "0", "]", ":", "old_x", "[", "1", "]", "]", "\n", "\n", "if", "not", "rot", "==", "0", ":", "\n", "# Remove padding", "\n", "        ", "new_img", "=", "scipy", ".", "misc", ".", "imrotate", "(", "new_img", ",", "rot", ")", "\n", "new_img", "=", "new_img", "[", "pad", ":", "-", "pad", ",", "pad", ":", "-", "pad", "]", "\n", "\n", "", "new_img", "=", "scipy", ".", "misc", ".", "imresize", "(", "new_img", ",", "res", ")", "\n", "return", "new_img", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.imutils.crop_v2": [[87, 124], ["int", "scipy.misc.imresize", "numpy.array", "numpy.array", "scipy.misc.imrotate", "imutils.transform", "imutils.transform", "numpy.linalg.norm", "float"], "function", ["home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.imutils.transform", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.imutils.transform"], ["", "def", "crop_v2", "(", "img", ",", "center", ",", "scale", ",", "res", ",", "rot", "=", "0", ")", ":", "\n", "    ", "\"\"\"only rotate and resize, don't crop\"\"\"", "\n", "# Upper left point", "\n", "ul", "=", "np", ".", "array", "(", "transform", "(", "[", "1", ",", "1", "]", ",", "center", ",", "scale", ",", "res", ",", "invert", "=", "1", ")", ")", "-", "1", "\n", "# Bottom right point", "\n", "br", "=", "np", ".", "array", "(", "transform", "(", "[", "res", "[", "0", "]", "+", "1", ",", "\n", "res", "[", "1", "]", "+", "1", "]", ",", "center", ",", "scale", ",", "res", ",", "invert", "=", "1", ")", ")", "-", "1", "\n", "\n", "# Padding so that when rotated proper amount of context is included", "\n", "pad", "=", "int", "(", "np", ".", "linalg", ".", "norm", "(", "br", "-", "ul", ")", "/", "2", "-", "float", "(", "br", "[", "1", "]", "-", "ul", "[", "1", "]", ")", "/", "2", ")", "\n", "if", "not", "rot", "==", "0", ":", "\n", "        ", "ul", "-=", "pad", "\n", "br", "+=", "pad", "\n", "\n", "# new_shape = [br[1] - ul[1], br[0] - ul[0]]", "\n", "# if len(img.shape) > 2:", "\n", "#     new_shape += [img.shape[2]]", "\n", "# new_img = np.zeros(new_shape)", "\n", "#", "\n", "# # Range to fill new array", "\n", "# new_x = max(0, -ul[0]), min(br[0], len(img[0])) - ul[0]", "\n", "# new_y = max(0, -ul[1]), min(br[1], len(img)) - ul[1]", "\n", "# # Range to sample from original image", "\n", "# old_x = max(0, ul[0]), min(len(img[0]), br[0])", "\n", "# old_y = max(0, ul[1]), min(len(img), br[1])", "\n", "# new_img[new_y[0]:new_y[1], new_x[0]:new_x[1]] = img[old_y[0]:old_y[1],", "\n", "#                                                 old_x[0]:old_x[1]]", "\n", "\n", "", "if", "not", "rot", "==", "0", ":", "\n", "# Remove padding", "\n", "        ", "new_img", "=", "scipy", ".", "misc", ".", "imrotate", "(", "img", ",", "rot", ")", "\n", "new_img", "=", "new_img", "[", "pad", ":", "-", "pad", ",", "pad", ":", "-", "pad", "]", "\n", "", "else", ":", "\n", "        ", "new_img", "=", "img", "\n", "\n", "", "new_img", "=", "scipy", ".", "misc", ".", "imresize", "(", "new_img", ",", "res", ")", "\n", "return", "new_img", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.imutils.uncrop": [[126, 151], ["numpy.zeros", "scipy.misc.imresize", "numpy.array", "numpy.array", "len", "max", "max", "max", "min", "max", "min", "imutils.transform", "imutils.transform", "min", "min"], "function", ["home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.imutils.transform", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.imutils.transform"], ["", "def", "uncrop", "(", "img", ",", "center", ",", "scale", ",", "orig_shape", ",", "rot", "=", "0", ",", "is_rgb", "=", "True", ")", ":", "\n", "    ", "\"\"\"'Undo' the image cropping/resizing.\n    This function is used when evaluating mask/part segmentation.\n    \"\"\"", "\n", "res", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "# Upper left point", "\n", "ul", "=", "np", ".", "array", "(", "transform", "(", "[", "1", ",", "1", "]", ",", "center", ",", "scale", ",", "res", ",", "invert", "=", "1", ")", ")", "-", "1", "\n", "# Bottom right point", "\n", "br", "=", "np", ".", "array", "(", "transform", "(", "[", "res", "[", "0", "]", "+", "1", ",", "res", "[", "1", "]", "+", "1", "]", ",", "center", ",", "scale", ",", "res", ",", "invert", "=", "1", ")", ")", "-", "1", "\n", "# size of cropped image", "\n", "crop_shape", "=", "[", "br", "[", "1", "]", "-", "ul", "[", "1", "]", ",", "br", "[", "0", "]", "-", "ul", "[", "0", "]", "]", "\n", "\n", "new_shape", "=", "[", "br", "[", "1", "]", "-", "ul", "[", "1", "]", ",", "br", "[", "0", "]", "-", "ul", "[", "0", "]", "]", "\n", "if", "len", "(", "img", ".", "shape", ")", ">", "2", ":", "\n", "        ", "new_shape", "+=", "[", "img", ".", "shape", "[", "2", "]", "]", "\n", "", "new_img", "=", "np", ".", "zeros", "(", "orig_shape", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "# Range to fill new array", "\n", "new_x", "=", "max", "(", "0", ",", "-", "ul", "[", "0", "]", ")", ",", "min", "(", "br", "[", "0", "]", ",", "orig_shape", "[", "1", "]", ")", "-", "ul", "[", "0", "]", "\n", "new_y", "=", "max", "(", "0", ",", "-", "ul", "[", "1", "]", ")", ",", "min", "(", "br", "[", "1", "]", ",", "orig_shape", "[", "0", "]", ")", "-", "ul", "[", "1", "]", "\n", "# Range to sample from original image", "\n", "old_x", "=", "max", "(", "0", ",", "ul", "[", "0", "]", ")", ",", "min", "(", "orig_shape", "[", "1", "]", ",", "br", "[", "0", "]", ")", "\n", "old_y", "=", "max", "(", "0", ",", "ul", "[", "1", "]", ")", ",", "min", "(", "orig_shape", "[", "0", "]", ",", "br", "[", "1", "]", ")", "\n", "img", "=", "scipy", ".", "misc", ".", "imresize", "(", "img", ",", "crop_shape", ",", "interp", "=", "'nearest'", ")", "\n", "new_img", "[", "old_y", "[", "0", "]", ":", "old_y", "[", "1", "]", ",", "old_x", "[", "0", "]", ":", "old_x", "[", "1", "]", "]", "=", "img", "[", "new_y", "[", "0", "]", ":", "new_y", "[", "1", "]", ",", "new_x", "[", "0", "]", ":", "new_x", "[", "1", "]", "]", "\n", "return", "new_img", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.imutils.rot_aa": [[153, 165], ["numpy.array", "cv2.Rodrigues", "cv2.Rodrigues", "numpy.dot", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.deg2rad", "numpy.sin", "numpy.deg2rad", "numpy.deg2rad", "numpy.deg2rad"], "function", ["None"], ["", "def", "rot_aa", "(", "aa", ",", "rot", ")", ":", "\n", "    ", "\"\"\"Rotate axis angle parameters.\"\"\"", "\n", "# pose parameters", "\n", "R", "=", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "np", ".", "deg2rad", "(", "-", "rot", ")", ")", ",", "-", "np", ".", "sin", "(", "np", ".", "deg2rad", "(", "-", "rot", ")", ")", ",", "0", "]", ",", "\n", "[", "np", ".", "sin", "(", "np", ".", "deg2rad", "(", "-", "rot", ")", ")", ",", "np", ".", "cos", "(", "np", ".", "deg2rad", "(", "-", "rot", ")", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "# find the rotation of the body in camera frame", "\n", "per_rdg", ",", "_", "=", "cv2", ".", "Rodrigues", "(", "aa", ")", "\n", "# apply the global rotation to the global orientation", "\n", "resrot", ",", "_", "=", "cv2", ".", "Rodrigues", "(", "np", ".", "dot", "(", "R", ",", "per_rdg", ")", ")", "\n", "aa", "=", "(", "resrot", ".", "T", ")", "[", "0", "]", "\n", "return", "aa", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.imutils.flip_img": [[167, 173], ["numpy.fliplr"], "function", ["None"], ["", "def", "flip_img", "(", "img", ")", ":", "\n", "    ", "\"\"\"Flip rgb images or masks.\n    channels come last, e.g. (256,256,3).\n    \"\"\"", "\n", "img", "=", "np", ".", "fliplr", "(", "img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.imutils.flip_kp": [[175, 184], ["len", "len"], "function", ["None"], ["", "def", "flip_kp", "(", "kp", ")", ":", "\n", "    ", "\"\"\"Flip keypoints.\"\"\"", "\n", "if", "len", "(", "kp", ")", "==", "24", ":", "\n", "        ", "flipped_parts", "=", "constants", ".", "J24_FLIP_PERM", "\n", "", "elif", "len", "(", "kp", ")", "==", "49", ":", "\n", "        ", "flipped_parts", "=", "constants", ".", "J49_FLIP_PERM", "\n", "", "kp", "=", "kp", "[", "flipped_parts", "]", "\n", "kp", "[", ":", ",", "0", "]", "=", "-", "kp", "[", ":", ",", "0", "]", "\n", "return", "kp", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.imutils.flip_pose": [[186, 196], ["None"], "function", ["None"], ["", "def", "flip_pose", "(", "pose", ")", ":", "\n", "    ", "\"\"\"Flip pose.\n    The flipping is based on SMPL parameters.\n    \"\"\"", "\n", "flipped_parts", "=", "constants", ".", "SMPL_POSE_FLIP_PERM", "\n", "pose", "=", "pose", "[", "flipped_parts", "]", "\n", "# we also negate the second and the third dimension of the axis-angle", "\n", "pose", "[", "1", ":", ":", "3", "]", "=", "-", "pose", "[", "1", ":", ":", "3", "]", "\n", "pose", "[", "2", ":", ":", "3", "]", "=", "-", "pose", "[", "2", ":", ":", "3", "]", "\n", "return", "pose", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.imutils.visualize_act_map": [[199, 217], ["img.size", "cv2.resize.astype", "cv2.resize", "cv2.applyColorMap", "torch.from_numpy", "torch.cat.permute().float().div", "torch.cat.split", "torch.cat", "result.div().squeeze.div().squeeze", "cv2.resize.cpu().data.numpy", "img.cpu", "torch.cat.permute().float", "result.div().squeeze.div", "result.div().squeeze.max", "cv2.resize.cpu", "torch.cat.permute"], "function", ["None"], ["", "def", "visualize_act_map", "(", "act_mask", ",", "img", ")", ":", "\n", "    ", "\"\"\"\n    :param act_mask: H, W of range (0, 1)\n    :param img: img C. H, W of range (0, 1)\n    :return:\n    \"\"\"", "\n", "_", ",", "h", ",", "w", "=", "img", ".", "size", "(", ")", "\n", "act_mask", "=", "act_mask", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "*", "255", "# H, W", "\n", "act_mask", "=", "act_mask", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "act_mask", "=", "cv2", ".", "resize", "(", "act_mask", ",", "(", "w", ",", "h", ")", ")", "\n", "heatmap", "=", "cv2", ".", "applyColorMap", "(", "act_mask", ",", "cv2", ".", "COLORMAP_JET", ")", "# H, W, 3", "\n", "heatmap", "=", "torch", ".", "from_numpy", "(", "heatmap", ")", "# H, W , 3 BGR", "\n", "heatmap", "=", "heatmap", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "float", "(", ")", ".", "div", "(", "255", ")", "\n", "b", ",", "g", ",", "r", "=", "heatmap", ".", "split", "(", "1", ")", "\n", "heatmap", "=", "torch", ".", "cat", "(", "[", "r", ",", "g", ",", "b", "]", ")", "\n", "result", "=", "heatmap", "+", "img", ".", "cpu", "(", ")", "\n", "result", "=", "result", ".", "div", "(", "result", ".", "max", "(", ")", ")", ".", "squeeze", "(", ")", "\n", "return", "heatmap", ",", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.imutils.grayscale": [[219, 224], ["numpy.asarray().reshape", "numpy.zeros", "numpy.asarray"], "function", ["None"], ["", "def", "grayscale", "(", "img", ")", ":", "\n", "    ", "w", "=", "np", ".", "asarray", "(", "[", "0.114", ",", "0.587", ",", "0.299", "]", ")", ".", "reshape", "(", "1", ",", "1", ",", "3", ")", "\n", "gs", "=", "np", ".", "zeros", "(", "img", ".", "shape", "[", ":", "2", "]", ")", "\n", "gs", "=", "(", "img", "*", "w", ")", ".", "sum", "(", "axis", "=", "2", ",", "keepdims", "=", "True", ")", "\n", "return", "gs", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.imutils.brightness_aug": [[226, 231], ["numpy.random.rand"], "function", ["None"], ["", "def", "brightness_aug", "(", "img", ",", "val", ")", ":", "\n", "    ", "alpha", "=", "1.", "+", "val", "*", "(", "np", ".", "random", ".", "rand", "(", ")", "*", "2", "-", "1", ")", "\n", "img", "=", "img", "*", "alpha", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.imutils.contrast_aug": [[233, 240], ["imutils.grayscale", "grayscale.mean", "numpy.random.rand"], "function", ["home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.imutils.grayscale"], ["", "def", "contrast_aug", "(", "img", ",", "val", ")", ":", "\n", "    ", "gs", "=", "grayscale", "(", "img", ")", "\n", "gs", "[", ":", "]", "=", "gs", ".", "mean", "(", ")", "\n", "alpha", "=", "1.", "+", "val", "*", "(", "np", ".", "random", ".", "rand", "(", ")", "*", "2", "-", "1", ")", "\n", "img", "=", "img", "*", "alpha", "+", "gs", "*", "(", "1", "-", "alpha", ")", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.imutils.saturation_aug": [[242, 248], ["imutils.grayscale", "numpy.random.rand"], "function", ["home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.imutils.grayscale"], ["", "def", "saturation_aug", "(", "img", ",", "val", ")", ":", "\n", "    ", "gs", "=", "grayscale", "(", "img", ")", "\n", "alpha", "=", "1.", "+", "val", "*", "(", "np", ".", "random", ".", "rand", "(", ")", "*", "2", "-", "1", ")", "\n", "img", "=", "img", "*", "alpha", "+", "gs", "*", "(", "1", "-", "alpha", ")", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.imutils.color_jitter": [[250, 261], ["numpy.random.shuffle", "numpy.random.rand", "aug"], "function", ["None"], ["", "def", "color_jitter", "(", "img", ",", "brightness", ",", "contrast", ",", "saturation", ",", "prob", ")", ":", "\n", "    ", "augs", "=", "[", "(", "brightness_aug", ",", "brightness", ")", ",", "\n", "(", "contrast_aug", ",", "contrast", ")", ",", "\n", "(", "saturation_aug", ",", "saturation", ")", "]", "\n", "np", ".", "random", ".", "shuffle", "(", "augs", ")", "\n", "\n", "for", "aug", ",", "val", "in", "augs", ":", "\n", "        ", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "prob", ":", "\n", "            ", "img", "=", "aug", "(", "img", ",", "val", ")", "\n", "\n", "", "", "return", "img", "\n", "", ""]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.renderer_nr.Renderer.__init__": [[9, 23], ["neural_renderer.Renderer", "torch.from_numpy().cuda", "torch.from_numpy", "faces.astype"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "focal_length", "=", "5000.", ",", "img_res", "=", "224", ",", "faces", "=", "None", ")", ":", "\n", "# Parameters for rendering", "\n", "        ", "self", ".", "focal_length", "=", "focal_length", "\n", "self", ".", "render_res", "=", "img_res", "\n", "\n", "self", ".", "neural_renderer", "=", "nr", ".", "Renderer", "(", "dist_coeffs", "=", "None", ",", "orig_size", "=", "self", ".", "render_res", ",", "\n", "image_size", "=", "img_res", ",", "\n", "light_intensity_ambient", "=", "0.5", ",", "\n", "light_intensity_directional", "=", "0.5", ",", "\n", "light_direction", "=", "(", "1", ",", "0", ",", "1", ")", ",", "\n", "anti_aliasing", "=", "True", ")", "\n", "\n", "self", ".", "faces", "=", "torch", ".", "from_numpy", "(", "faces", ".", "astype", "(", "np", ".", "int32", ")", ")", ".", "cuda", "(", ")", "\n", "self", ".", "device", "=", "'cuda'", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.renderer_nr.Renderer.get_textures": [[24, 30], ["torch.zeros"], "methods", ["None"], ["", "def", "get_textures", "(", "self", ",", "color", ")", ":", "\n", "        ", "textures", "=", "torch", ".", "zeros", "(", "1", ",", "self", ".", "faces", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "1", ",", "3", ")", "\n", "textures", "[", "...", ",", "0", "]", "=", "color", "[", "0", "]", "\n", "textures", "[", "...", ",", "1", "]", "=", "color", "[", "1", "]", "\n", "textures", "[", "...", ",", "2", "]", "=", "color", "[", "2", "]", "\n", "return", "textures", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.renderer_nr.Renderer.visualize": [[31, 58], ["camera.to", "vertices.to.to.to", "renderer_nr.Renderer.get_textures().expand().to", "torch.eye", "K[].expand", "renderer_nr.Renderer.faces[].expand", "renderer_nr.Renderer.neural_renderer", "[].expand", "scipy.spatial.transform.Rotation.from_euler().as_dcm", "[].expand", "renderer_nr.Renderer.get_textures().expand", "camera.to.unsqueeze", "images.to", "scipy.spatial.transform.Rotation.from_euler", "renderer_nr.Renderer.get_textures", "torch.eye", "torch.from_numpy().type().to", "torch.from_numpy().type", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.renderer_nr.Renderer.get_textures"], ["", "def", "visualize", "(", "self", ",", "vertices", ",", "camera", ",", "images", ",", "angle", "=", "None", ",", "color", "=", "(", "0.1", ",", "0.6", ",", "0.2", ")", ")", ":", "\n", "        ", "\"\"\"Wrapper function for rendering process.\"\"\"", "\n", "cam_t", "=", "camera", ".", "to", "(", "self", ".", "device", ")", "\n", "vertices", "=", "vertices", ".", "to", "(", "self", ".", "device", ")", "\n", "batch_size", "=", "vertices", ".", "shape", "[", "0", "]", "\n", "\n", "textures", "=", "self", ".", "get_textures", "(", "color", ")", ".", "expand", "(", "batch_size", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "K", "=", "torch", ".", "eye", "(", "3", ",", "device", "=", "vertices", ".", "device", ")", "\n", "K", "[", "0", ",", "0", "]", "=", "self", ".", "focal_length", "\n", "K", "[", "1", ",", "1", "]", "=", "self", ".", "focal_length", "\n", "K", "[", "2", ",", "2", "]", "=", "1", "\n", "K", "[", "0", ",", "2", "]", "=", "self", ".", "render_res", "/", "2.", "\n", "K", "[", "1", ",", "2", "]", "=", "self", ".", "render_res", "/", "2.", "\n", "K", "=", "K", "[", "None", ",", ":", ",", ":", "]", ".", "expand", "(", "batch_size", ",", "-", "1", ",", "-", "1", ")", "\n", "\n", "if", "angle", "is", "None", ":", "\n", "            ", "R", "=", "torch", ".", "eye", "(", "3", ",", "device", "=", "self", ".", "device", ")", "[", "None", ",", ":", ",", ":", "]", ".", "expand", "(", "batch_size", ",", "-", "1", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "R", "=", "SciR", ".", "from_euler", "(", "'zyx'", ",", "angle", ",", "degrees", "=", "True", ")", ".", "as_dcm", "(", ")", "\n", "R", "=", "torch", ".", "from_numpy", "(", "R", ")", ".", "type", "(", "torch", ".", "float32", ")", ".", "to", "(", "self", ".", "device", ")", "[", "None", ",", ":", ",", ":", "]", ".", "expand", "(", "batch_size", ",", "-", "1", ",", "-", "1", ")", "\n", "\n", "", "faces", "=", "self", ".", "faces", "[", "None", ",", ":", ",", ":", "]", ".", "expand", "(", "batch_size", ",", "-", "1", ",", "-", "1", ")", "\n", "rendered", ",", "_", ",", "mask", "=", "self", ".", "neural_renderer", "(", "vertices", ",", "faces", ",", "textures", "=", "textures", ",", "K", "=", "K", ",", "R", "=", "R", ",", "t", "=", "cam_t", ".", "unsqueeze", "(", "1", ")", ")", "\n", "rendered", "=", "rendered", "*", "mask", "+", "images", ".", "to", "(", "self", ".", "device", ")", "*", "(", "1", "-", "mask", ")", "\n", "\n", "return", "rendered", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.part_utils.PartRenderer.__init__": [[12, 26], ["neural_renderer.Renderer", "torch.from_numpy().cuda", "numpy.load", "torch.from_numpy().cuda().float", "torch.cuda.FloatTensor", "numpy.load", "torch.from_numpy", "torch.from_numpy().cuda", "models.SMPL().faces.astype", "torch.from_numpy", "models.SMPL"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "focal_length", "=", "5000.", ",", "render_res", "=", "224", ")", ":", "\n", "# Parameters for rendering", "\n", "        ", "self", ".", "focal_length", "=", "focal_length", "\n", "self", ".", "render_res", "=", "render_res", "\n", "# We use Neural 3D mesh renderer for rendering masks and part segmentations", "\n", "self", ".", "neural_renderer", "=", "nr", ".", "Renderer", "(", "dist_coeffs", "=", "None", ",", "orig_size", "=", "self", ".", "render_res", ",", "\n", "image_size", "=", "render_res", ",", "\n", "light_intensity_ambient", "=", "1", ",", "\n", "light_intensity_directional", "=", "0", ",", "\n", "anti_aliasing", "=", "False", ")", "\n", "self", ".", "faces", "=", "torch", ".", "from_numpy", "(", "SMPL", "(", "config", ".", "SMPL_MODEL_DIR", ")", ".", "faces", ".", "astype", "(", "np", ".", "int32", ")", ")", ".", "cuda", "(", ")", "\n", "textures", "=", "np", ".", "load", "(", "config", ".", "VERTEX_TEXTURE_FILE", ")", "\n", "self", ".", "textures", "=", "torch", ".", "from_numpy", "(", "textures", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "self", ".", "cube_parts", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "np", ".", "load", "(", "config", ".", "CUBE_PARTS_FILE", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.part_utils.PartRenderer.get_parts": [[27, 36], ["mask.view.view.view", "torch.floor().long", "parts.view().long.view().long.view().long", "torch.floor", "parts.view().long.view().long.view", "parts.view().long.view().long.permute().contiguous().view", "parts.view().long.view().long.permute().contiguous", "parts.view().long.view().long.permute"], "methods", ["None"], ["", "def", "get_parts", "(", "self", ",", "parts", ",", "mask", ")", ":", "\n", "        ", "\"\"\"Process renderer part image to get body part indices.\"\"\"", "\n", "bn", ",", "c", ",", "h", ",", "w", "=", "parts", ".", "shape", "\n", "mask", "=", "mask", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "parts_index", "=", "torch", ".", "floor", "(", "100", "*", "parts", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "3", ")", ")", ".", "long", "(", ")", "\n", "parts", "=", "self", ".", "cube_parts", "[", "parts_index", "[", ":", ",", "0", "]", ",", "parts_index", "[", ":", ",", "1", "]", ",", "parts_index", "[", ":", ",", "2", "]", ",", "None", "]", "\n", "parts", "*=", "mask", "\n", "parts", "=", "parts", ".", "view", "(", "bn", ",", "h", ",", "w", ")", ".", "long", "(", ")", "\n", "return", "parts", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.part_utils.PartRenderer.__call__": [[37, 54], ["torch.stack", "torch.eye", "K[].expand", "[].expand", "part_utils.PartRenderer.faces[].expand", "part_utils.PartRenderer.neural_renderer", "part_utils.PartRenderer.get_parts", "part_utils.PartRenderer.textures.expand", "torch.stack.unsqueeze", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.part_utils.PartRenderer.get_parts"], ["", "def", "__call__", "(", "self", ",", "vertices", ",", "camera", ")", ":", "\n", "        ", "\"\"\"Wrapper function for rendering process.\"\"\"", "\n", "# Estimate camera parameters given a fixed focal length", "\n", "cam_t", "=", "torch", ".", "stack", "(", "[", "camera", "[", ":", ",", "1", "]", ",", "camera", "[", ":", ",", "2", "]", ",", "2", "*", "self", ".", "focal_length", "/", "(", "self", ".", "render_res", "*", "camera", "[", ":", ",", "0", "]", "+", "1e-9", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "batch_size", "=", "vertices", ".", "shape", "[", "0", "]", "\n", "K", "=", "torch", ".", "eye", "(", "3", ",", "device", "=", "vertices", ".", "device", ")", "\n", "K", "[", "0", ",", "0", "]", "=", "self", ".", "focal_length", "\n", "K", "[", "1", ",", "1", "]", "=", "self", ".", "focal_length", "\n", "K", "[", "2", ",", "2", "]", "=", "1", "\n", "K", "[", "0", ",", "2", "]", "=", "self", ".", "render_res", "/", "2.", "\n", "K", "[", "1", ",", "2", "]", "=", "self", ".", "render_res", "/", "2.", "\n", "K", "=", "K", "[", "None", ",", ":", ",", ":", "]", ".", "expand", "(", "batch_size", ",", "-", "1", ",", "-", "1", ")", "\n", "R", "=", "torch", ".", "eye", "(", "3", ",", "device", "=", "vertices", ".", "device", ")", "[", "None", ",", ":", ",", ":", "]", ".", "expand", "(", "batch_size", ",", "-", "1", ",", "-", "1", ")", "\n", "faces", "=", "self", ".", "faces", "[", "None", ",", ":", ",", ":", "]", ".", "expand", "(", "batch_size", ",", "-", "1", ",", "-", "1", ")", "\n", "parts", ",", "_", ",", "mask", "=", "self", ".", "neural_renderer", "(", "vertices", ",", "faces", ",", "textures", "=", "self", ".", "textures", ".", "expand", "(", "batch_size", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", ",", "K", "=", "K", ",", "R", "=", "R", ",", "t", "=", "cam_t", ".", "unsqueeze", "(", "1", ")", ")", "\n", "parts", "=", "self", ".", "get_parts", "(", "parts", ",", "mask", ")", "\n", "return", "mask", ",", "parts", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.pose_utils.compute_similarity_transform": [[10, 59], ["S1.mean", "S2.mean", "numpy.sum", "X1.dot", "numpy.linalg.svd", "numpy.eye", "numpy.sign", "V.dot", "numpy.linalg.det", "np.eye.dot", "numpy.trace", "U.dot", "V.dot.dot", "V.dot.dot", "V.dot.dot"], "function", ["None"], ["def", "compute_similarity_transform", "(", "S1", ",", "S2", ")", ":", "\n", "    ", "\"\"\"\n    Computes a similarity transform (sR, t) that takes\n    a set of 3D points S1 (3 x N) closest to a set of 3D points S2,\n    where R is an 3x3 rotation matrix, t 3x1 translation, s scale.\n    i.e. solves the orthogonal Procrutes problem.\n    \"\"\"", "\n", "transposed", "=", "False", "\n", "if", "S1", ".", "shape", "[", "0", "]", "!=", "3", "and", "S1", ".", "shape", "[", "0", "]", "!=", "2", ":", "\n", "        ", "S1", "=", "S1", ".", "T", "\n", "S2", "=", "S2", ".", "T", "\n", "transposed", "=", "True", "\n", "", "assert", "(", "S2", ".", "shape", "[", "1", "]", "==", "S1", ".", "shape", "[", "1", "]", ")", "\n", "\n", "# 1. Remove mean.", "\n", "mu1", "=", "S1", ".", "mean", "(", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "mu2", "=", "S2", ".", "mean", "(", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "X1", "=", "S1", "-", "mu1", "\n", "X2", "=", "S2", "-", "mu2", "\n", "\n", "# 2. Compute variance of X1 used for scale.", "\n", "var1", "=", "np", ".", "sum", "(", "X1", "**", "2", ")", "\n", "\n", "# 3. The outer product of X1 and X2.", "\n", "K", "=", "X1", ".", "dot", "(", "X2", ".", "T", ")", "\n", "\n", "# 4. Solution that Maximizes trace(R'K) is R=U*V', where U, V are", "\n", "# singular vectors of K.", "\n", "U", ",", "s", ",", "Vh", "=", "np", ".", "linalg", ".", "svd", "(", "K", ")", "\n", "V", "=", "Vh", ".", "T", "\n", "# Construct Z that fixes the orientation of R to get det(R)=1.", "\n", "Z", "=", "np", ".", "eye", "(", "U", ".", "shape", "[", "0", "]", ")", "\n", "Z", "[", "-", "1", ",", "-", "1", "]", "*=", "np", ".", "sign", "(", "np", ".", "linalg", ".", "det", "(", "U", ".", "dot", "(", "V", ".", "T", ")", ")", ")", "\n", "# Construct R.", "\n", "R", "=", "V", ".", "dot", "(", "Z", ".", "dot", "(", "U", ".", "T", ")", ")", "\n", "\n", "# 5. Recover scale.", "\n", "scale", "=", "np", ".", "trace", "(", "R", ".", "dot", "(", "K", ")", ")", "/", "var1", "\n", "\n", "# 6. Recover translation.", "\n", "t", "=", "mu2", "-", "scale", "*", "(", "R", ".", "dot", "(", "mu1", ")", ")", "\n", "\n", "# 7. Error:", "\n", "S1_hat", "=", "scale", "*", "R", ".", "dot", "(", "S1", ")", "+", "t", "\n", "\n", "if", "transposed", ":", "\n", "        ", "S1_hat", "=", "S1_hat", ".", "T", "\n", "\n", "", "return", "S1_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.pose_utils.compute_similarity_transform_batch": [[60, 66], ["numpy.zeros_like", "range", "pose_utils.compute_similarity_transform"], "function", ["home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.pose_utils.compute_similarity_transform"], ["", "def", "compute_similarity_transform_batch", "(", "S1", ",", "S2", ")", ":", "\n", "    ", "\"\"\"Batched version of compute_similarity_transform.\"\"\"", "\n", "S1_hat", "=", "np", ".", "zeros_like", "(", "S1", ")", "\n", "for", "i", "in", "range", "(", "S1", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "S1_hat", "[", "i", "]", "=", "compute_similarity_transform", "(", "S1", "[", "i", "]", ",", "S2", "[", "i", "]", ")", "\n", "", "return", "S1_hat", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.pose_utils.reconstruction_error": [[67, 76], ["pose_utils.compute_similarity_transform_batch", "numpy.sqrt().mean", "re.sum.mean", "numpy.sqrt", "re.sum.sum"], "function", ["home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.pose_utils.compute_similarity_transform_batch"], ["", "def", "reconstruction_error", "(", "S1", ",", "S2", ",", "reduction", "=", "'mean'", ")", ":", "\n", "    ", "\"\"\"Do Procrustes alignment and compute reconstruction error.\"\"\"", "\n", "S1_hat", "=", "compute_similarity_transform_batch", "(", "S1", ",", "S2", ")", "\n", "re", "=", "np", ".", "sqrt", "(", "(", "(", "S1_hat", "-", "S2", ")", "**", "2", ")", ".", "sum", "(", "axis", "=", "-", "1", ")", ")", ".", "mean", "(", "axis", "=", "-", "1", ")", "\n", "if", "reduction", "==", "'mean'", ":", "\n", "        ", "re", "=", "re", ".", "mean", "(", ")", "\n", "", "elif", "reduction", "==", "'sum'", ":", "\n", "        ", "re", "=", "re", ".", "sum", "(", ")", "\n", "", "return", "re", "\n", "", ""]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.datasets.base_dataset.BaseDataset.__init__": [[26, 115], ["torch.utils.data.Dataset.__init__", "torchvision.transforms.Normalize", "numpy.load", "numpy.concatenate", "open", "pickle.load", "base_dataset.BaseDataset.data[].squeeze().astype", "base_dataset.BaseDataset.data[].squeeze().astype", "numpy.zeros", "numpy.array().astype", "os.path.join", "numpy.ones", "numpy.zeros", "len", "numpy.zeros", "numpy.zeros", "base_dataset.BaseDataset.data[].squeeze", "base_dataset.BaseDataset.data[].squeeze", "len", "len", "numpy.array", "numpy.ones().astype", "len", "len", "numpy.ones", "len", "str"], "methods", ["home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.smpl.SMPL.__init__"], ["def", "__init__", "(", "self", ",", "options", ",", "dataset", ",", "ignore_3d", "=", "False", ",", "use_augmentation", "=", "True", ",", "is_train", "=", "True", ",", "is_rotate", "=", "False", ")", ":", "\n", "        ", "super", "(", "BaseDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "options", "=", "options", "\n", "self", ".", "normalize_img", "=", "Normalize", "(", "mean", "=", "constants", ".", "IMG_NORM_MEAN", ",", "std", "=", "constants", ".", "IMG_NORM_STD", ")", "\n", "self", ".", "data", "=", "np", ".", "load", "(", "config", ".", "DATASET_FILES", "[", "is_train", "]", "[", "dataset", "]", ")", "\n", "self", ".", "imgname", "=", "self", ".", "data", "[", "'imgname'", "]", "\n", "\n", "self", ".", "img_pkl_path", "=", "config", ".", "DATASET_PKL_PATH", "\n", "if", "is_train", ":", "\n", "            ", "pkl_name", "=", "'{}_imgs.pkl'", ".", "format", "(", "self", ".", "dataset", ")", "\n", "", "else", ":", "\n", "            ", "pkl_name", "=", "'{}_imgs_test.pkl'", ".", "format", "(", "self", ".", "dataset", ")", "\n", "", "with", "open", "(", "join", "(", "self", ".", "img_pkl_path", ",", "pkl_name", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "self", ".", "img_pkl", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "self", ".", "is_rotate", "=", "is_rotate", "\n", "\n", "# Get paths to gt masks, if available", "\n", "try", ":", "\n", "            ", "self", ".", "maskname", "=", "self", ".", "data", "[", "'maskname'", "]", "\n", "", "except", "KeyError", ":", "\n", "            ", "pass", "\n", "", "try", ":", "\n", "            ", "self", ".", "partname", "=", "self", ".", "data", "[", "'partname'", "]", "\n", "", "except", "KeyError", ":", "\n", "            ", "pass", "\n", "\n", "# Bounding boxes are assumed to be in the center and scale format", "\n", "", "self", ".", "scale", "=", "self", ".", "data", "[", "'scale'", "]", "\n", "self", ".", "center", "=", "self", ".", "data", "[", "'center'", "]", "\n", "\n", "# If False, do not do augmentation", "\n", "self", ".", "use_augmentation", "=", "use_augmentation", "\n", "\n", "# Get gt SMPL parameters, if available", "\n", "try", ":", "\n", "            ", "self", ".", "pose", "=", "self", ".", "data", "[", "'pose'", "]", ".", "squeeze", "(", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "self", ".", "betas", "=", "self", ".", "data", "[", "'shape'", "]", ".", "squeeze", "(", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "if", "'has_smpl'", "in", "self", ".", "data", ":", "\n", "                ", "self", ".", "has_smpl", "=", "self", ".", "data", "[", "'has_smpl'", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "has_smpl", "=", "np", ".", "ones", "(", "len", "(", "self", ".", "imgname", ")", ")", "\n", "", "", "except", "KeyError", ":", "\n", "            ", "self", ".", "has_smpl", "=", "np", ".", "zeros", "(", "len", "(", "self", ".", "imgname", ")", ")", "\n", "", "if", "ignore_3d", ":", "\n", "            ", "self", ".", "has_smpl", "=", "np", ".", "zeros", "(", "len", "(", "self", ".", "imgname", ")", ")", "\n", "\n", "# Get gt 3D pose, if available", "\n", "", "try", ":", "\n", "            ", "self", ".", "pose_3d", "=", "self", ".", "data", "[", "'S'", "]", "\n", "self", ".", "has_pose_3d", "=", "1", "\n", "", "except", "KeyError", ":", "\n", "            ", "self", ".", "has_pose_3d", "=", "0", "\n", "", "if", "ignore_3d", ":", "\n", "            ", "self", ".", "has_pose_3d", "=", "0", "\n", "\n", "# Get 2D keypoints", "\n", "", "try", ":", "\n", "            ", "keypoints_gt", "=", "self", ".", "data", "[", "'part'", "]", "\n", "", "except", "KeyError", ":", "\n", "            ", "keypoints_gt", "=", "np", ".", "zeros", "(", "(", "len", "(", "self", ".", "imgname", ")", ",", "24", ",", "3", ")", ")", "\n", "", "try", ":", "\n", "            ", "keypoints_openpose", "=", "self", ".", "data", "[", "'openpose'", "]", "\n", "", "except", "KeyError", ":", "\n", "            ", "keypoints_openpose", "=", "np", ".", "zeros", "(", "(", "len", "(", "self", ".", "imgname", ")", ",", "25", ",", "3", ")", ")", "\n", "\n", "", "self", ".", "keypoints", "=", "np", ".", "concatenate", "(", "[", "keypoints_openpose", ",", "keypoints_gt", "]", ",", "axis", "=", "1", ")", "\n", "\n", "# Get gender data, if available", "\n", "try", ":", "\n", "            ", "gender", "=", "self", ".", "data", "[", "'gender'", "]", "\n", "self", ".", "gender", "=", "np", ".", "array", "(", "[", "0", "if", "str", "(", "g", ")", "==", "'m'", "else", "1", "for", "g", "in", "gender", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "", "except", "KeyError", ":", "\n", "            ", "self", ".", "gender", "=", "-", "1", "*", "np", ".", "ones", "(", "len", "(", "self", ".", "imgname", ")", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "", "self", ".", "length", "=", "self", ".", "scale", ".", "shape", "[", "0", "]", "\n", "\n", "# add by hao, for generating 2d keypoints heatmaps", "\n", "self", ".", "num_joints", "=", "24", "\n", "self", ".", "heatmap_size", "=", "14", "\n", "\n", "# add by hao, for generating and updateing image sizes", "\n", "self", ".", "all_img_sizes", "=", "{", "0", ":", "[", "[", "224", ",", "128", "]", "]", ",", "1", ":", "[", "[", "224", ",", "128", "]", ",", "[", "128", ",", "64", "]", "]", ",", "\n", "2", ":", "[", "[", "224", ",", "128", "]", ",", "[", "128", ",", "64", "]", ",", "[", "64", ",", "40", "]", "]", ",", "3", ":", "[", "[", "224", ",", "128", "]", ",", "[", "128", ",", "64", "]", ",", "[", "64", ",", "40", "]", ",", "[", "40", ",", "24", "]", "]", "}", "\n", "\n", "# add by hao, set evaluation flag", "\n", "# for evaluation, we want to evaluate the middle point of each interval", "\n", "self", ".", "eval", "=", "not", "is_train", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.datasets.base_dataset.BaseDataset.set_eval": [[116, 119], ["None"], "methods", ["None"], ["", "def", "set_eval", "(", "self", ",", "type", "=", "0", ")", ":", "\n", "        ", "self", ".", "eval", "=", "True", "\n", "self", ".", "type", "=", "type", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.datasets.base_dataset.BaseDataset.update_size_intervals": [[120, 126], ["None"], "methods", ["None"], ["", "def", "update_size_intervals", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "\"\"\" only used for first 6 epoch, after first 6, image sizes will always be [[224, 128], [128, 64], [64, 40], [40, 24]]\"\"\"", "\n", "if", "epoch", "<=", "3", ":", "\n", "            ", "self", ".", "img_sizes", "=", "self", ".", "all_img_sizes", "[", "epoch", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "img_sizes", "=", "[", "[", "224", ",", "128", "]", ",", "[", "128", ",", "64", "]", ",", "[", "64", ",", "40", "]", ",", "[", "40", ",", "24", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.datasets.base_dataset.BaseDataset.augm_params": [[127, 155], ["numpy.ones", "numpy.random.uniform", "min", "min", "numpy.random.uniform", "max", "max", "numpy.random.uniform", "numpy.random.randn", "numpy.random.randn"], "methods", ["None"], ["", "", "def", "augm_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get augmentation parameters.\"\"\"", "\n", "flip", "=", "0", "# flipping", "\n", "pn", "=", "np", ".", "ones", "(", "3", ")", "# per channel pixel-noise", "\n", "rot", "=", "0", "# rotation", "\n", "sc", "=", "1", "# scaling", "\n", "if", "self", ".", "is_train", ":", "\n", "# We flip with probability 1/2", "\n", "            ", "if", "np", ".", "random", ".", "uniform", "(", ")", "<=", "0.5", ":", "\n", "                ", "flip", "=", "1", "\n", "\n", "# Each channel is multiplied with a number", "\n", "# in the area [1-opt.noiseFactor,1+opt.noiseFactor]", "\n", "", "pn", "=", "np", ".", "random", ".", "uniform", "(", "1", "-", "self", ".", "options", ".", "noise_factor", ",", "1", "+", "self", ".", "options", ".", "noise_factor", ",", "3", ")", "\n", "\n", "# The rotation is a number in the area [-2*rotFactor, 2*rotFactor]", "\n", "rot", "=", "min", "(", "2", "*", "self", ".", "options", ".", "rot_factor", ",", "\n", "max", "(", "-", "2", "*", "self", ".", "options", ".", "rot_factor", ",", "np", ".", "random", ".", "randn", "(", ")", "*", "self", ".", "options", ".", "rot_factor", ")", ")", "\n", "\n", "# The scale is multiplied with a number", "\n", "# in the area [1-scaleFactor,1+scaleFactor]", "\n", "sc", "=", "min", "(", "1", "+", "self", ".", "options", ".", "scale_factor", ",", "\n", "max", "(", "1", "-", "self", ".", "options", ".", "scale_factor", ",", "np", ".", "random", ".", "randn", "(", ")", "*", "self", ".", "options", ".", "scale_factor", "+", "1", ")", ")", "\n", "# but it is zero with probability 3/5", "\n", "if", "np", ".", "random", ".", "uniform", "(", ")", "<=", "0.6", ":", "\n", "                ", "rot", "=", "0", "\n", "\n", "", "", "return", "flip", ",", "pn", ",", "rot", ",", "sc", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.datasets.base_dataset.BaseDataset.rgb_processing": [[156, 188], ["numpy.minimum", "numpy.minimum", "numpy.minimum", "utils.imutils.crop_v2", "utils.imutils.flip_img", "numpy.maximum", "numpy.maximum", "numpy.maximum", "utils.imutils.flip_img.copy", "rgb_img_up.clip.clip.clip", "scipy.misc.imresize", "rgb_img_lr.clip.clip.clip", "scipy.misc.imresize", "numpy.transpose", "utils.imutils.color_jitter", "utils.imutils.color_jitter", "rgb_img_up.clip.clip.clip", "rgb_img_up.clip.clip.astype"], "methods", ["home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.imutils.crop_v2", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.imutils.flip_img", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.imutils.color_jitter", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.imutils.color_jitter"], ["", "def", "rgb_processing", "(", "self", ",", "rgb_img", ",", "center", ",", "scale", ",", "rot", ",", "flip", ",", "pn", ",", "img_size", ")", ":", "\n", "        ", "\"\"\"Process rgb image and do augmentation.\"\"\"", "\n", "if", "self", ".", "is_rotate", ":", "\n", "            ", "rgb_img", "=", "crop_v2", "(", "rgb_img", ",", "center", ",", "scale", ",", "\n", "[", "constants", ".", "IMG_RES", ",", "constants", ".", "IMG_RES", "]", ",", "rot", "=", "rot", ")", "\n", "\n", "# flip the image", "\n", "", "if", "flip", ":", "\n", "            ", "rgb_img", "=", "flip_img", "(", "rgb_img", ")", "\n", "# in the rgb image we add pixel noise in a channel-wise manner", "\n", "", "rgb_img", "[", ":", ",", ":", ",", "0", "]", "=", "np", ".", "minimum", "(", "255.0", ",", "np", ".", "maximum", "(", "0.0", ",", "rgb_img", "[", ":", ",", ":", ",", "0", "]", "*", "pn", "[", "0", "]", ")", ")", "\n", "rgb_img", "[", ":", ",", ":", ",", "1", "]", "=", "np", ".", "minimum", "(", "255.0", ",", "np", ".", "maximum", "(", "0.0", ",", "rgb_img", "[", ":", ",", ":", ",", "1", "]", "*", "pn", "[", "1", "]", ")", ")", "\n", "rgb_img", "[", ":", ",", ":", ",", "2", "]", "=", "np", ".", "minimum", "(", "255.0", ",", "np", ".", "maximum", "(", "0.0", ",", "rgb_img", "[", ":", ",", ":", ",", "2", "]", "*", "pn", "[", "2", "]", ")", ")", "\n", "\n", "if", "img_size", "==", "224", ":", "\n", "            ", "rgb_img_up", "=", "rgb_img", ".", "copy", "(", ")", "\n", "# add color jitter", "\n", "if", "self", ".", "is_train", ":", "\n", "                ", "rgb_img_up", "=", "color_jitter", "(", "rgb_img_up", ",", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.4", ",", "prob", "=", "0.5", ")", "\n", "", "rgb_img_up", "=", "rgb_img_up", ".", "clip", "(", "0", ",", "255", ")", "\n", "", "else", ":", "\n", "            ", "shape", "=", "rgb_img", ".", "shape", "\n", "rgb_img_lr", "=", "scipy", ".", "misc", ".", "imresize", "(", "rgb_img", ",", "(", "img_size", ",", "img_size", ")", ",", "interp", "=", "'bicubic'", ")", "\n", "rgb_img_lr", "=", "rgb_img_lr", ".", "clip", "(", "0", ",", "255", ")", "\n", "rgb_img_up", "=", "scipy", ".", "misc", ".", "imresize", "(", "rgb_img_lr", ",", "(", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ")", ",", "interp", "=", "'bicubic'", ")", "# naive upsampling", "\n", "# add color jitter", "\n", "if", "self", ".", "is_train", ":", "\n", "                ", "rgb_img_up", "=", "color_jitter", "(", "rgb_img_up", ",", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.4", ",", "prob", "=", "0.5", ")", "\n", "rgb_img_up", "=", "rgb_img_up", ".", "clip", "(", "0", ",", "255", ")", "\n", "\n", "", "", "rgb_img_up", "=", "np", ".", "transpose", "(", "rgb_img_up", ".", "astype", "(", "'float32'", ")", ",", "(", "2", ",", "0", ",", "1", ")", ")", "/", "255.0", "\n", "return", "rgb_img_up", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.datasets.base_dataset.BaseDataset.j2d_processing": [[189, 202], ["range", "utils.imutils.flip_kp.astype", "utils.imutils.transform", "utils.imutils.flip_kp"], "methods", ["home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.imutils.transform", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.imutils.flip_kp"], ["", "def", "j2d_processing", "(", "self", ",", "kp", ",", "center", ",", "scale", ",", "r", ",", "f", ")", ":", "\n", "        ", "\"\"\"Process gt 2D keypoints and apply all augmentation transforms.\"\"\"", "\n", "nparts", "=", "kp", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "nparts", ")", ":", "\n", "            ", "kp", "[", "i", ",", "0", ":", "2", "]", "=", "transform", "(", "kp", "[", "i", ",", "0", ":", "2", "]", "+", "1", ",", "center", ",", "scale", ",", "\n", "[", "constants", ".", "IMG_RES", ",", "constants", ".", "IMG_RES", "]", ",", "rot", "=", "r", ")", "\n", "# convert to normalized coordinates", "\n", "", "kp", "[", ":", ",", ":", "-", "1", "]", "=", "2.", "*", "kp", "[", ":", ",", ":", "-", "1", "]", "/", "constants", ".", "IMG_RES", "-", "1.", "\n", "# flip the x coordinates", "\n", "if", "f", ":", "\n", "            ", "kp", "=", "flip_kp", "(", "kp", ")", "\n", "", "kp", "=", "kp", ".", "astype", "(", "'float32'", ")", "\n", "return", "kp", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.datasets.base_dataset.BaseDataset.j2d_heatmap_location_processing": [[203, 218], ["range", "utils.imutils.flip_kp.copy().astype", "kp_heatmaps.astype.astype.astype", "utils.imutils.transform", "utils.imutils.flip_kp", "utils.imutils.flip_kp.copy"], "methods", ["home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.imutils.transform", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.imutils.flip_kp"], ["", "def", "j2d_heatmap_location_processing", "(", "self", ",", "kp", ",", "center", ",", "scale", ",", "r", ",", "f", ")", ":", "\n", "# first process the keypoints", "\n", "        ", "nparts", "=", "kp", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "nparts", ")", ":", "\n", "            ", "kp", "[", "i", ",", "0", ":", "2", "]", "=", "transform", "(", "kp", "[", "i", ",", "0", ":", "2", "]", "+", "1", ",", "center", ",", "scale", ",", "\n", "[", "constants", ".", "IMG_RES", ",", "constants", ".", "IMG_RES", "]", ",", "rot", "=", "r", ")", "\n", "# flip the x coordinates", "\n", "", "if", "f", ":", "\n", "            ", "kp", "=", "flip_kp", "(", "kp", ")", "\n", "\n", "", "kp_heatmaps", "=", "kp", ".", "copy", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "feat_stride", "=", "constants", ".", "IMG_RES", "/", "self", ".", "heatmap_size", "\n", "kp_heatmaps", "[", ":", ",", ":", "-", "1", "]", "=", "kp_heatmaps", "[", ":", ",", ":", "-", "1", "]", "/", "feat_stride", "\n", "kp_heatmaps", "=", "kp_heatmaps", ".", "astype", "(", "'float32'", ")", "\n", "return", "kp_heatmaps", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.datasets.base_dataset.BaseDataset.j2d_heatmap_processing": [[220, 270], ["range", "numpy.ones", "numpy.zeros", "range", "utils.imutils.transform", "utils.imutils.flip_kp", "int", "int", "numpy.arange", "numpy.exp", "int", "int", "int", "int", "max", "max", "max", "min", "max", "min", "min", "min"], "methods", ["home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.imutils.transform", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.imutils.flip_kp"], ["", "def", "j2d_heatmap_processing", "(", "self", ",", "kp", ",", "center", ",", "scale", ",", "r", ",", "f", ")", ":", "\n", "# first process the keypoints", "\n", "        ", "nparts", "=", "kp", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "nparts", ")", ":", "\n", "            ", "kp", "[", "i", ",", "0", ":", "2", "]", "=", "transform", "(", "kp", "[", "i", ",", "0", ":", "2", "]", "+", "1", ",", "center", ",", "scale", ",", "\n", "[", "constants", ".", "IMG_RES", ",", "constants", ".", "IMG_RES", "]", ",", "rot", "=", "r", ")", "\n", "# flip the x coordinates", "\n", "", "if", "f", ":", "\n", "            ", "kp", "=", "flip_kp", "(", "kp", ")", "\n", "\n", "# generate guaissan heatmap", "\n", "", "target_weight", "=", "np", ".", "ones", "(", "(", "self", ".", "num_joints", ",", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "target_weight", "[", ":", ",", "0", "]", "=", "kp", "[", ":", ",", "-", "1", "]", "\n", "target", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_joints", ",", "self", ".", "heatmap_size", "[", "1", "]", ",", "self", ".", "heatmap_size", "[", "0", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "tmp_size", "=", "self", ".", "sigma", "*", "3", "\n", "\n", "for", "joint_id", "in", "range", "(", "self", ".", "num_joints", ")", ":", "\n", "            ", "feat_stride", "=", "self", ".", "options", ".", "img_res", "/", "self", ".", "heatmap_size", "\n", "mu_x", "=", "int", "(", "kp", "[", "joint_id", "]", "[", "0", "]", "/", "feat_stride", "[", "0", "]", "+", "0.5", ")", "\n", "mu_y", "=", "int", "(", "kp", "[", "joint_id", "]", "[", "1", "]", "/", "feat_stride", "[", "1", "]", "+", "0.5", ")", "\n", "# Check that any part of the gaussian is in-bounds", "\n", "ul", "=", "[", "int", "(", "mu_x", "-", "tmp_size", ")", ",", "int", "(", "mu_y", "-", "tmp_size", ")", "]", "\n", "br", "=", "[", "int", "(", "mu_x", "+", "tmp_size", "+", "1", ")", ",", "int", "(", "mu_y", "+", "tmp_size", "+", "1", ")", "]", "\n", "if", "ul", "[", "0", "]", ">=", "self", ".", "heatmap_size", "[", "0", "]", "or", "ul", "[", "1", "]", ">=", "self", ".", "heatmap_size", "[", "1", "]", "or", "br", "[", "0", "]", "<", "0", "or", "br", "[", "1", "]", "<", "0", ":", "\n", "# If not, just return the image as is", "\n", "                ", "target_weight", "[", "joint_id", "]", "=", "0", "\n", "continue", "\n", "\n", "# # Generate gaussian", "\n", "", "size", "=", "2", "*", "tmp_size", "+", "1", "\n", "x", "=", "np", ".", "arange", "(", "0", ",", "size", ",", "1", ",", "np", ".", "float32", ")", "\n", "y", "=", "x", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "x0", "=", "y0", "=", "size", "//", "2", "\n", "# The gaussian is not normalized, we want the center value to equal 1", "\n", "g", "=", "np", ".", "exp", "(", "-", "(", "(", "x", "-", "x0", ")", "**", "2", "+", "(", "y", "-", "y0", ")", "**", "2", ")", "/", "(", "2", "*", "self", ".", "sigma", "**", "2", ")", ")", "\n", "\n", "# Usable gaussian range", "\n", "g_x", "=", "max", "(", "0", ",", "-", "ul", "[", "0", "]", ")", ",", "min", "(", "br", "[", "0", "]", ",", "self", ".", "heatmap_size", "[", "0", "]", ")", "-", "ul", "[", "0", "]", "\n", "g_y", "=", "max", "(", "0", ",", "-", "ul", "[", "1", "]", ")", ",", "min", "(", "br", "[", "1", "]", ",", "self", ".", "heatmap_size", "[", "1", "]", ")", "-", "ul", "[", "1", "]", "\n", "# Image range", "\n", "img_x", "=", "max", "(", "0", ",", "ul", "[", "0", "]", ")", ",", "min", "(", "br", "[", "0", "]", ",", "self", ".", "heatmap_size", "[", "0", "]", ")", "\n", "img_y", "=", "max", "(", "0", ",", "ul", "[", "1", "]", ")", ",", "min", "(", "br", "[", "1", "]", ",", "self", ".", "heatmap_size", "[", "1", "]", ")", "\n", "\n", "v", "=", "target_weight", "[", "joint_id", "]", "\n", "if", "v", ">", "0.5", ":", "\n", "                ", "target", "[", "joint_id", "]", "[", "img_y", "[", "0", "]", ":", "img_y", "[", "1", "]", ",", "img_x", "[", "0", "]", ":", "img_x", "[", "1", "]", "]", "=", "g", "[", "g_y", "[", "0", "]", ":", "g_y", "[", "1", "]", ",", "g_x", "[", "0", "]", ":", "g_x", "[", "1", "]", "]", "\n", "\n", "", "", "return", "target", ",", "target_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.datasets.base_dataset.BaseDataset.j3d_processing": [[271, 286], ["numpy.eye", "numpy.einsum", "S.astype.astype.astype", "utils.imutils.flip_kp", "numpy.sin", "numpy.cos"], "methods", ["home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.imutils.flip_kp"], ["", "def", "j3d_processing", "(", "self", ",", "S", ",", "r", ",", "f", ")", ":", "\n", "        ", "\"\"\"Process gt 3D keypoints and apply all augmentation transforms.\"\"\"", "\n", "# in-plane rotation", "\n", "rot_mat", "=", "np", ".", "eye", "(", "3", ")", "\n", "if", "not", "r", "==", "0", ":", "\n", "            ", "rot_rad", "=", "-", "r", "*", "np", ".", "pi", "/", "180", "\n", "sn", ",", "cs", "=", "np", ".", "sin", "(", "rot_rad", ")", ",", "np", ".", "cos", "(", "rot_rad", ")", "\n", "rot_mat", "[", "0", ",", ":", "2", "]", "=", "[", "cs", ",", "-", "sn", "]", "\n", "rot_mat", "[", "1", ",", ":", "2", "]", "=", "[", "sn", ",", "cs", "]", "\n", "", "S", "[", ":", ",", ":", "-", "1", "]", "=", "np", ".", "einsum", "(", "'ij,kj->ki'", ",", "rot_mat", ",", "S", "[", ":", ",", ":", "-", "1", "]", ")", "\n", "# flip the x coordinates", "\n", "if", "f", ":", "\n", "            ", "S", "[", ":", ",", ":", "-", "1", "]", "=", "flip_kp", "(", "S", "[", ":", ",", ":", "-", "1", "]", ")", "\n", "", "S", "=", "S", ".", "astype", "(", "'float32'", ")", "\n", "return", "S", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.datasets.base_dataset.BaseDataset.pose_processing": [[287, 297], ["utils.imutils.rot_aa", "utils.imutils.flip_pose.astype", "utils.imutils.flip_pose"], "methods", ["home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.imutils.rot_aa", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.imutils.flip_pose"], ["", "def", "pose_processing", "(", "self", ",", "pose", ",", "r", ",", "f", ")", ":", "\n", "        ", "\"\"\"Process SMPL theta parameters  and apply all augmentation transforms.\"\"\"", "\n", "# rotation or the pose parameters", "\n", "pose", "[", ":", "3", "]", "=", "rot_aa", "(", "pose", "[", ":", "3", "]", ",", "r", ")", "\n", "# flip the pose parameters", "\n", "if", "f", ":", "\n", "            ", "pose", "=", "flip_pose", "(", "pose", ")", "\n", "# (72),float", "\n", "", "pose", "=", "pose", ".", "astype", "(", "'float32'", ")", "\n", "return", "pose", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.datasets.base_dataset.BaseDataset.__getitem__": [[298, 399], ["base_dataset.BaseDataset.scale[].copy", "base_dataset.BaseDataset.center[].copy", "numpy.asarray", "cv2.imdecode", "img[].astype", "base_dataset.BaseDataset.augm_params", "base_dataset.BaseDataset.rgb_processing", "torch.from_numpy().float", "base_dataset.BaseDataset.normalize_img", "torch.from_numpy().float", "base_dataset.BaseDataset.keypoints[].copy", "torch.from_numpy().float", "base_dataset.BaseDataset.j2d_heatmap_location_processing", "torch.from_numpy().float", "torch.from_numpy().float", "float", "base_dataset.BaseDataset.astype", "numpy.float32", "bytearray", "numpy.array", "base_dataset.BaseDataset.pose[].copy", "base_dataset.BaseDataset.betas[].copy", "numpy.zeros", "numpy.zeros", "base_dataset.BaseDataset.pose_3d[].copy", "torch.from_numpy().float", "torch.zeros", "base_dataset.BaseDataset.augm_params", "base_dataset.BaseDataset.rgb_processing", "torch.from_numpy().float", "img_lr.append", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "base_dataset.BaseDataset.keypoints[].copy", "torch.from_numpy", "numpy.random.randint", "base_dataset.BaseDataset.normalize_img", "torch.from_numpy", "base_dataset.BaseDataset.pose_processing", "torch.from_numpy", "base_dataset.BaseDataset.j2d_processing", "torch.from_numpy", "base_dataset.BaseDataset.j3d_processing"], "methods", ["home.repos.pwc.inspect_result.xuxy09_RSC-Net.datasets.base_dataset.BaseDataset.augm_params", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.datasets.base_dataset.BaseDataset.rgb_processing", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.datasets.base_dataset.BaseDataset.j2d_heatmap_location_processing", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.datasets.base_dataset.BaseDataset.augm_params", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.datasets.base_dataset.BaseDataset.rgb_processing", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.feat_queue.FeatQueue.append", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.datasets.base_dataset.BaseDataset.pose_processing", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.datasets.base_dataset.BaseDataset.j2d_processing", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.datasets.base_dataset.BaseDataset.j3d_processing"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "item", "=", "{", "}", "\n", "scale", "=", "self", ".", "scale", "[", "index", "]", ".", "copy", "(", ")", "\n", "center", "=", "self", ".", "center", "[", "index", "]", ".", "copy", "(", ")", "\n", "\n", "# Load image", "\n", "imgname", "=", "self", ".", "imgname", "[", "index", "]", "\n", "img_str", "=", "self", ".", "img_pkl", "[", "index", "]", "\n", "img_encode", "=", "np", ".", "asarray", "(", "bytearray", "(", "img_str", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "img", "=", "cv2", ".", "imdecode", "(", "img_encode", ",", "cv2", ".", "IMREAD_COLOR", ")", "\n", "img", "=", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "orig_shape", "=", "np", ".", "array", "(", "img", ".", "shape", ")", "[", ":", "2", "]", "\n", "\n", "# Get SMPL parameters, if available", "\n", "if", "self", ".", "has_smpl", "[", "index", "]", ":", "\n", "            ", "pose", "=", "self", ".", "pose", "[", "index", "]", ".", "copy", "(", ")", "\n", "betas", "=", "self", ".", "betas", "[", "index", "]", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "            ", "pose", "=", "np", ".", "zeros", "(", "72", ")", "\n", "betas", "=", "np", ".", "zeros", "(", "10", ")", "\n", "\n", "# Get augmentation parameters", "\n", "", "flip", ",", "pn", ",", "rot", ",", "sc", "=", "self", ".", "augm_params", "(", ")", "\n", "sc", "=", "1", "\n", "if", "not", "self", ".", "is_rotate", ":", "\n", "            ", "rot", "=", "0", "\n", "\n", "# Process original HR image", "\n", "", "img_up", "=", "self", ".", "rgb_processing", "(", "img", ",", "center", ",", "sc", "*", "scale", ",", "rot", ",", "flip", ",", "pn", ",", "224", ")", "\n", "img_up", "=", "torch", ".", "from_numpy", "(", "img_up", ")", ".", "float", "(", ")", "\n", "\n", "# Store image before normalization to use it in visualization", "\n", "item", "[", "'img_hr'", "]", "=", "self", ".", "normalize_img", "(", "img_up", ")", "\n", "item", "[", "'pose'", "]", "=", "torch", ".", "from_numpy", "(", "self", ".", "pose_processing", "(", "pose", ",", "rot", ",", "flip", ")", ")", ".", "float", "(", ")", "\n", "\n", "# Get 3D pose, if available", "\n", "if", "self", ".", "has_pose_3d", ":", "\n", "            ", "S", "=", "self", ".", "pose_3d", "[", "index", "]", ".", "copy", "(", ")", "\n", "item", "[", "'pose_3d'", "]", "=", "torch", ".", "from_numpy", "(", "self", ".", "j3d_processing", "(", "S", ",", "rot", ",", "flip", ")", ")", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "            ", "item", "[", "'pose_3d'", "]", "=", "torch", ".", "zeros", "(", "24", ",", "4", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "# Get 2D keypoints and apply augmentation transforms", "\n", "", "keypoints", "=", "self", ".", "keypoints", "[", "index", "]", ".", "copy", "(", ")", "\n", "item", "[", "'keypoints'", "]", "=", "torch", ".", "from_numpy", "(", "self", ".", "j2d_processing", "(", "keypoints", ",", "center", ",", "sc", "*", "scale", ",", "rot", ",", "flip", ")", ")", ".", "float", "(", ")", "\n", "\n", "# Get 2D keypoints gaussian maps from only gt 2d keypoints", "\n", "keypoints_heatmaps", "=", "self", ".", "j2d_heatmap_location_processing", "(", "self", ".", "keypoints", "[", "index", "]", ".", "copy", "(", ")", "[", "25", ":", "]", ",", "center", ",", "sc", "*", "scale", ",", "\n", "rot", ",", "flip", ")", "\n", "item", "[", "'keypoints_heatmaps'", "]", "=", "torch", ".", "from_numpy", "(", "keypoints_heatmaps", ")", ".", "float", "(", ")", "\n", "\n", "img_lr", "=", "[", "]", "\n", "# for each size of the img, conduct augmentataion and record 2d keypoint, 3d keypoint, pose", "\n", "for", "size_interval", "in", "self", ".", "img_sizes", ":", "\n", "            ", "if", "not", "self", ".", "eval", ":", "\n", "                ", "img_size", "=", "np", ".", "random", ".", "randint", "(", "size_interval", "[", "1", "]", ",", "size_interval", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                ", "if", "self", ".", "type", "==", "0", ":", "\n", "                    ", "img_size", "=", "(", "size_interval", "[", "1", "]", "+", "size_interval", "[", "0", "]", ")", "//", "2", "\n", "", "else", ":", "\n", "                    ", "img_size", "=", "size_interval", "[", "1", "]", "\n", "\n", "# Get augmentation parameters", "\n", "", "", "flip_lr", ",", "pn", ",", "rot_lr", ",", "sc", "=", "self", ".", "augm_params", "(", ")", "\n", "sc", "=", "1", "\n", "\n", "# do not flip and rotate the low res images", "\n", "flip_lr", "=", "flip", "\n", "rot_lr", "=", "rot", "\n", "\n", "# Process image", "\n", "img_up", "=", "self", ".", "rgb_processing", "(", "img", ",", "center", ",", "sc", "*", "scale", ",", "rot_lr", ",", "flip_lr", ",", "pn", ",", "img_size", ")", "\n", "img_up", "=", "torch", ".", "from_numpy", "(", "img_up", ")", ".", "float", "(", ")", "\n", "\n", "img_lr", ".", "append", "(", "self", ".", "normalize_img", "(", "img_up", ")", ")", "\n", "\n", "", "item", "[", "'img_lr'", "]", "=", "img_lr", "\n", "\n", "item", "[", "'betas'", "]", "=", "torch", ".", "from_numpy", "(", "betas", ")", ".", "float", "(", ")", "\n", "item", "[", "'imgname'", "]", "=", "imgname", "\n", "item", "[", "'has_smpl'", "]", "=", "self", ".", "has_smpl", "[", "index", "]", "\n", "item", "[", "'has_pose_3d'", "]", "=", "self", ".", "has_pose_3d", "\n", "item", "[", "'scale'", "]", "=", "float", "(", "sc", "*", "scale", ")", "\n", "item", "[", "'center'", "]", "=", "center", ".", "astype", "(", "np", ".", "float32", ")", "\n", "item", "[", "'orig_shape'", "]", "=", "orig_shape", "\n", "item", "[", "'is_flipped'", "]", "=", "flip", "\n", "item", "[", "'rot_angle'", "]", "=", "np", ".", "float32", "(", "rot", ")", "\n", "item", "[", "'gender'", "]", "=", "self", ".", "gender", "[", "index", "]", "\n", "item", "[", "'sample_index'", "]", "=", "index", "\n", "item", "[", "'dataset_name'", "]", "=", "self", ".", "dataset", "\n", "\n", "try", ":", "\n", "            ", "item", "[", "'maskname'", "]", "=", "self", ".", "maskname", "[", "index", "]", "\n", "", "except", "AttributeError", ":", "\n", "            ", "item", "[", "'maskname'", "]", "=", "''", "\n", "", "try", ":", "\n", "            ", "item", "[", "'partname'", "]", "=", "self", ".", "partname", "[", "index", "]", "\n", "", "except", "AttributeError", ":", "\n", "            ", "item", "[", "'partname'", "]", "=", "''", "\n", "\n", "", "return", "item", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.datasets.base_dataset.BaseDataset.__len__": [[400, 402], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.datasets.mixed_dataset.MixedDataset.__init__": [[11, 29], ["sum", "sum", "max", "numpy.array().cumsum", "base_dataset.BaseDataset", "len", "len", "len", "numpy.array", "len", "len", "len", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "options", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "dataset_list", "=", "[", "'h36m'", ",", "'lsp-orig'", ",", "'mpii'", ",", "'lspet'", ",", "'coco'", ",", "'mpi-inf-3dhp'", "]", "\n", "self", ".", "dataset_dict", "=", "{", "'h36m'", ":", "0", ",", "'lsp-orig'", ":", "1", ",", "'mpii'", ":", "2", ",", "'lspet'", ":", "3", ",", "'coco'", ":", "4", ",", "'mpi-inf-3dhp'", ":", "5", "}", "\n", "self", ".", "datasets", "=", "[", "BaseDataset", "(", "options", ",", "ds", ",", "**", "kwargs", ")", "for", "ds", "in", "self", ".", "dataset_list", "]", "\n", "total_length", "=", "sum", "(", "[", "len", "(", "ds", ")", "for", "ds", "in", "self", ".", "datasets", "]", ")", "\n", "length_itw", "=", "sum", "(", "[", "len", "(", "ds", ")", "for", "ds", "in", "self", ".", "datasets", "[", "1", ":", "-", "1", "]", "]", ")", "\n", "self", ".", "length", "=", "max", "(", "[", "len", "(", "ds", ")", "for", "ds", "in", "self", ".", "datasets", "]", ")", "\n", "\"\"\"\n        Data distribution inside each batch:\n        30% H36M - 60% ITW - 10% MPI-INF\n        \"\"\"", "\n", "self", ".", "partition", "=", "[", ".3", ",", "\n", ".6", "*", "len", "(", "self", ".", "datasets", "[", "1", "]", ")", "/", "length_itw", ",", "\n", ".6", "*", "len", "(", "self", ".", "datasets", "[", "2", "]", ")", "/", "length_itw", ",", "\n", ".6", "*", "len", "(", "self", ".", "datasets", "[", "3", "]", ")", "/", "length_itw", ",", "\n", ".6", "*", "len", "(", "self", ".", "datasets", "[", "4", "]", ")", "/", "length_itw", ",", "\n", "0.1", "]", "\n", "self", ".", "partition", "=", "np", ".", "array", "(", "self", ".", "partition", ")", ".", "cumsum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.datasets.mixed_dataset.MixedDataset.__getitem__": [[30, 35], ["numpy.random.rand", "range", "len"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "p", "=", "np", ".", "random", ".", "rand", "(", ")", "\n", "for", "i", "in", "range", "(", "6", ")", ":", "\n", "            ", "if", "p", "<=", "self", ".", "partition", "[", "i", "]", ":", "\n", "                ", "return", "self", ".", "datasets", "[", "i", "]", "[", "index", "%", "len", "(", "self", ".", "datasets", "[", "i", "]", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.datasets.mixed_dataset.MixedDataset.__len__": [[36, 38], ["None"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.datasets.mixed_dataset.MixedDataset.update_size_intervals": [[39, 42], ["dataset.update_size_intervals"], "methods", ["home.repos.pwc.inspect_result.xuxy09_RSC-Net.datasets.mixed_dataset.MixedDataset.update_size_intervals"], ["", "def", "update_size_intervals", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "for", "dataset", "in", "self", ".", "datasets", ":", "\n", "            ", "dataset", ".", "update_size_intervals", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.hmr.Bottleneck.__init__": [[15, 27], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.smpl.SMPL.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.hmr.Bottleneck.forward": [[28, 48], ["hmr.Bottleneck.conv1", "hmr.Bottleneck.bn1", "hmr.Bottleneck.relu", "hmr.Bottleneck.conv2", "hmr.Bottleneck.bn2", "hmr.Bottleneck.relu", "hmr.Bottleneck.conv3", "hmr.Bottleneck.bn3", "hmr.Bottleneck.relu", "hmr.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "alpha", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "=", "alpha", "*", "out", "+", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.hmr.HMRLayer.__init__": [[51, 77], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "hmr.HMRLayer.hmr_layer.append", "range", "torch.ParameterDict", "torch.ParameterDict", "torch.Sequential", "torch.Sequential", "block", "hmr.HMRLayer.hmr_layer.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.from_numpy().float().view", "torch.from_numpy().float().view", "torch.from_numpy().float().view", "torch.from_numpy().float().view", "torch.from_numpy().float().view", "torch.from_numpy().float().view", "torch.from_numpy().float().view", "torch.from_numpy().float().view", "torch.from_numpy().float().view", "torch.from_numpy().float().view", "torch.from_numpy().float().view", "torch.from_numpy().float().view", "torch.from_numpy().float().view", "torch.from_numpy().float().view", "torch.from_numpy().float().view", "torch.from_numpy().float().view", "torch.from_numpy().float().view", "torch.from_numpy().float().view", "torch.from_numpy().float().view", "torch.from_numpy().float().view", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.smpl.SMPL.__init__", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.feat_queue.FeatQueue.append", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.feat_queue.FeatQueue.append"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "in_planes", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "HMRLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hmr_layer", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "in_planes", "=", "in_planes", "\n", "# downsample", "\n", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "in_planes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "in_planes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "", "self", ".", "hmr_layer", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "self", ".", "hmr_layer", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ")", ")", "\n", "\n", "# add alphas parameters", "\n", "", "self", ".", "alphas", "=", "nn", ".", "ParameterDict", "(", "{", "\n", "'0'", ":", "nn", ".", "Parameter", "(", "torch", ".", "from_numpy", "(", "np", ".", "ones", "(", "blocks", ",", "dtype", "=", "np", ".", "float32", ")", ")", ".", "float", "(", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "'1'", ":", "nn", ".", "Parameter", "(", "torch", ".", "from_numpy", "(", "np", ".", "ones", "(", "blocks", ",", "dtype", "=", "np", ".", "float32", ")", ")", ".", "float", "(", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "'2'", ":", "nn", ".", "Parameter", "(", "torch", ".", "from_numpy", "(", "np", ".", "ones", "(", "blocks", ",", "dtype", "=", "np", ".", "float32", ")", ")", ".", "float", "(", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "'3'", ":", "nn", ".", "Parameter", "(", "torch", ".", "from_numpy", "(", "np", ".", "ones", "(", "blocks", ",", "dtype", "=", "np", ".", "float32", ")", ")", ".", "float", "(", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ")", ",", "\n", "'4'", ":", "nn", ".", "Parameter", "(", "torch", ".", "from_numpy", "(", "np", ".", "ones", "(", "blocks", ",", "dtype", "=", "np", ".", "float32", ")", ")", ".", "float", "(", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "}", ")", "\n", "self", ".", "alphas", ".", "requires_grad", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.hmr.HMRLayer.init_alphas": [[78, 84], ["hmr.HMRLayer.alphas[].detach().clone", "hmr.HMRLayer.alphas[].detach", "str", "str"], "methods", ["None"], ["", "def", "init_alphas", "(", "self", ",", "scale", ",", "device", ")", ":", "\n", "        ", "\"\"\"\n        scale = [1, 2, 3, 4], need to be larger than 0\n        \"\"\"", "\n", "\n", "self", ".", "alphas", "[", "str", "(", "scale", ")", "]", ".", "data", "=", "self", ".", "alphas", "[", "str", "(", "scale", "-", "1", ")", "]", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.hmr.HMRLayer.forward": [[85, 94], ["enumerate", "res_block", "str"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "scale", ")", ":", "\n", "        ", "out", "=", "x", "\n", "alphas", "=", "self", ".", "alphas", "[", "str", "(", "scale", ")", "]", "\n", "\n", "for", "i", ",", "res_block", "in", "enumerate", "(", "self", ".", "hmr_layer", ")", ":", "\n", "            ", "alpha", "=", "alphas", "[", "i", "]", "\n", "out", "=", "res_block", "(", "out", ",", "alpha", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.hmr.HMR.__init__": [[101, 146], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "hmr.HMRLayer", "hmr.HMRLayer", "hmr.HMRLayer", "hmr.HMRLayer", "torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "hmr.HMR.modules", "numpy.load", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "hmr.HMR.register_buffer", "hmr.HMR.register_buffer", "hmr.HMR.register_buffer", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "isinstance", "m.weight.data.normal_", "isinstance", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "[].astype"], "methods", ["home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.smpl.SMPL.__init__"], ["def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "smpl_mean_params", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "HMR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "npose", "=", "24", "*", "6", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "layer1", "=", "HMRLayer", "(", "block", ",", "self", ".", "inplanes", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "HMRLayer", "(", "block", ",", "self", ".", "layer1", ".", "in_planes", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "HMRLayer", "(", "block", ",", "self", ".", "layer2", ".", "in_planes", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "HMRLayer", "(", "block", ",", "self", ".", "layer3", ".", "in_planes", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4_mlp", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "2048", ",", "1024", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "1024", ",", "256", ")", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", "+", "npose", "+", "13", ",", "1024", ")", "\n", "self", ".", "drop1", "=", "nn", ".", "Dropout", "(", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "1024", ",", "1024", ")", "\n", "self", ".", "drop2", "=", "nn", ".", "Dropout", "(", ")", "\n", "self", ".", "decpose", "=", "nn", ".", "Linear", "(", "1024", ",", "npose", ")", "\n", "self", ".", "decshape", "=", "nn", ".", "Linear", "(", "1024", ",", "10", ")", "\n", "self", ".", "deccam", "=", "nn", ".", "Linear", "(", "1024", ",", "3", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "decpose", ".", "weight", ",", "gain", "=", "0.01", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "decshape", ".", "weight", ",", "gain", "=", "0.01", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "deccam", ".", "weight", ",", "gain", "=", "0.01", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "", "mean_params", "=", "np", ".", "load", "(", "smpl_mean_params", ")", "\n", "init_pose", "=", "torch", ".", "from_numpy", "(", "mean_params", "[", "'pose'", "]", "[", ":", "]", ")", ".", "unsqueeze", "(", "0", ")", "\n", "init_shape", "=", "torch", ".", "from_numpy", "(", "mean_params", "[", "'shape'", "]", "[", ":", "]", ".", "astype", "(", "'float32'", ")", ")", ".", "unsqueeze", "(", "0", ")", "\n", "init_cam", "=", "torch", ".", "from_numpy", "(", "mean_params", "[", "'cam'", "]", ")", ".", "unsqueeze", "(", "0", ")", "\n", "self", ".", "register_buffer", "(", "'init_pose'", ",", "init_pose", ")", "\n", "self", ".", "register_buffer", "(", "'init_shape'", ",", "init_shape", ")", "\n", "self", ".", "register_buffer", "(", "'init_cam'", ",", "init_cam", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.hmr.HMR._make_layer": [[148, 164], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.feat_queue.FeatQueue.append", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.feat_queue.FeatQueue.append"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.hmr.HMR.init_alphas": [[165, 170], ["hmr.HMR.layer1.init_alphas", "hmr.HMR.layer2.init_alphas", "hmr.HMR.layer3.init_alphas", "hmr.HMR.layer4.init_alphas"], "methods", ["home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.hmr.HMR.init_alphas", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.hmr.HMR.init_alphas", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.hmr.HMR.init_alphas", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.hmr.HMR.init_alphas"], ["", "def", "init_alphas", "(", "self", ",", "scale", ",", "device", ")", ":", "\n", "        ", "self", ".", "layer1", ".", "init_alphas", "(", "scale", ",", "device", ")", "\n", "self", ".", "layer2", ".", "init_alphas", "(", "scale", ",", "device", ")", "\n", "self", ".", "layer3", ".", "init_alphas", "(", "scale", ",", "device", ")", "\n", "self", ".", "layer4", ".", "init_alphas", "(", "scale", ",", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.hmr.HMR.forward": [[171, 216], ["hmr.HMR.conv1", "hmr.HMR.bn1", "hmr.HMR.relu", "hmr.HMR.maxpool", "hmr.HMR.layer1", "hmr.HMR.layer2", "hmr.HMR.layer3", "hmr.HMR.layer4", "hmr.HMR.view().mean", "hmr.HMR.layer4_mlp", "hmr.HMR.avgpool", "xf.view.view.view", "range", "utils.geometry.rot6d_to_rotmat().view", "hmr.HMR.init_pose.expand", "hmr.HMR.init_shape.expand", "hmr.HMR.init_cam.expand", "xf.view.view.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "hmr.HMR.fc1", "hmr.HMR.relu", "hmr.HMR.drop1", "hmr.HMR.fc2", "hmr.HMR.relu", "hmr.HMR.drop2", "hmr.HMR.view", "hmr.HMR.decpose", "hmr.HMR.decshape", "hmr.HMR.deccam", "utils.geometry.rot6d_to_rotmat", "hmr.HMR.size"], "methods", ["home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.geometry.rot6d_to_rotmat"], ["", "def", "forward", "(", "self", ",", "x", ",", "scale", ",", "init_pose", "=", "None", ",", "init_shape", "=", "None", ",", "init_cam", "=", "None", ",", "n_iter", "=", "3", ")", ":", "\n", "\n", "        ", "batch_size", "=", "x", ".", "shape", "[", "0", "]", "\n", "\n", "if", "init_pose", "is", "None", ":", "\n", "            ", "init_pose", "=", "self", ".", "init_pose", ".", "expand", "(", "batch_size", ",", "-", "1", ")", "\n", "", "if", "init_shape", "is", "None", ":", "\n", "            ", "init_shape", "=", "self", ".", "init_shape", ".", "expand", "(", "batch_size", ",", "-", "1", ")", "\n", "", "if", "init_cam", "is", "None", ":", "\n", "            ", "init_cam", "=", "self", ".", "init_cam", ".", "expand", "(", "batch_size", ",", "-", "1", ")", "\n", "\n", "", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x1", "=", "self", ".", "layer1", "(", "x", ",", "scale", ")", "\n", "x2", "=", "self", ".", "layer2", "(", "x1", ",", "scale", ")", "\n", "x3", "=", "self", ".", "layer3", "(", "x2", ",", "scale", ")", "\n", "x4", "=", "self", ".", "layer4", "(", "x3", ",", "scale", ")", "\n", "feat_layer4", "=", "x4", ".", "view", "(", "batch_size", ",", "x4", ".", "size", "(", "1", ")", ",", "-", "1", ")", ".", "mean", "(", "dim", "=", "-", "1", ")", "\n", "feat_layer4", "=", "self", ".", "layer4_mlp", "(", "feat_layer4", ")", "\n", "\n", "xf", "=", "self", ".", "avgpool", "(", "x4", ")", "\n", "xf", "=", "xf", ".", "view", "(", "xf", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "pred_pose", "=", "init_pose", "\n", "pred_shape", "=", "init_shape", "\n", "pred_cam", "=", "init_cam", "\n", "for", "i", "in", "range", "(", "n_iter", ")", ":", "\n", "            ", "xc", "=", "torch", ".", "cat", "(", "[", "xf", ",", "pred_pose", ",", "pred_shape", ",", "pred_cam", "]", ",", "1", ")", "\n", "xc", "=", "self", ".", "fc1", "(", "xc", ")", "\n", "xc", "=", "self", ".", "relu", "(", "xc", ")", "\n", "xc", "=", "self", ".", "drop1", "(", "xc", ")", "\n", "xc", "=", "self", ".", "fc2", "(", "xc", ")", "\n", "xc", "=", "self", ".", "relu", "(", "xc", ")", "\n", "xc", "=", "self", ".", "drop2", "(", "xc", ")", "\n", "pred_pose", "=", "self", ".", "decpose", "(", "xc", ")", "+", "pred_pose", "\n", "pred_shape", "=", "self", ".", "decshape", "(", "xc", ")", "+", "pred_shape", "\n", "pred_cam", "=", "self", ".", "deccam", "(", "xc", ")", "+", "pred_cam", "\n", "\n", "", "pred_rotmat", "=", "rot6d_to_rotmat", "(", "pred_pose", ")", ".", "view", "(", "batch_size", ",", "24", ",", "3", ",", "3", ")", "\n", "feat_list", "=", "[", "feat_layer4", "]", "\n", "\n", "return", "pred_rotmat", ",", "pred_shape", ",", "pred_cam", ",", "feat_list", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.hmr.hmr": [[217, 239], ["hmr.HMR", "torchvision.resnet50", "resnet.resnet50.state_dict", "collections.OrderedDict", "resnet_imagenet.state_dict.items", "HMR.load_state_dict", "key.split"], "function", ["None"], ["", "", "def", "hmr", "(", "smpl_mean_params", ",", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" Constructs an HMR model with ResNet50 backbone.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "HMR", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "smpl_mean_params", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "resnet_imagenet", "=", "resnet", ".", "resnet50", "(", "pretrained", "=", "True", ")", "\n", "state_dict", "=", "resnet_imagenet", ".", "state_dict", "(", ")", "\n", "renamed_state_dict", "=", "OrderedDict", "(", ")", "\n", "# change the names in the state_dict to match the new layer", "\n", "for", "key", ",", "value", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "'layer'", "in", "key", ":", "\n", "                ", "names", "=", "key", ".", "split", "(", "'.'", ")", "\n", "names", "[", "1", ":", "1", "]", "=", "[", "'hmr_layer'", "]", "\n", "new_key", "=", "'.'", ".", "join", "(", "n", "for", "n", "in", "names", ")", "\n", "renamed_state_dict", "[", "new_key", "]", "=", "value", "\n", "", "else", ":", "\n", "                ", "renamed_state_dict", "[", "key", "]", "=", "value", "\n", "", "", "model", ".", "load_state_dict", "(", "renamed_state_dict", ",", "strict", "=", "False", ")", "\n", "# state_dict = model.state_dict()", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.feat_queue.FeatQueue.__init__": [[8, 11], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.smpl.SMPL.__init__"], ["    ", "def", "__init__", "(", "self", ",", "max_queue_size", "=", "30000", ")", ":", "\n", "        ", "super", "(", "FeatQueue", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "max_queue_size", "=", "max_queue_size", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.feat_queue.FeatQueue.append": [[13, 24], ["isinstance", "numpy.concatenate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "feat_queue.FeatQueue.size", "feat_queue.FeatQueue.pop"], "methods", ["home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.feat_queue.FeatQueue.pop"], ["", "def", "append", "(", "self", ",", "queue", ",", "feat", ")", ":", "\n", "        ", "if", "isinstance", "(", "feat", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "queue", "=", "np", ".", "concatenate", "(", "[", "queue", ",", "feat", "]", ",", "axis", "=", "0", ")", "\n", "queue_size", "=", "queue", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "queue", "=", "torch", ".", "cat", "(", "[", "queue", ",", "feat", "]", ",", "dim", "=", "0", ")", "\n", "queue_size", "=", "queue", ".", "size", "(", "0", ")", "\n", "# check if exceet queue_size", "\n", "", "if", "queue_size", ">", "self", ".", "max_queue_size", ":", "\n", "            ", "queue", "=", "self", ".", "pop", "(", "queue", ",", "queue_size", "-", "self", ".", "max_queue_size", ")", "\n", "", "return", "queue", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.feat_queue.FeatQueue.pop": [[25, 28], ["None"], "methods", ["None"], ["", "def", "pop", "(", "self", ",", "queue", ",", "num_item", ")", ":", "\n", "        ", "queue", "=", "queue", "[", "num_item", ":", "]", "\n", "return", "queue", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.feat_queue.FeatQueue.update_queue_size": [[29, 39], ["setattr", "getattr"], "methods", ["None"], ["", "def", "update_queue_size", "(", "self", ",", "size", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "curr_queue_size", "=", "getattr", "(", "self", ",", "'curr_queue_size'", ")", "\n", "", "except", ":", "\n", "            ", "curr_queue_size", "=", "0", "\n", "\n", "", "curr_queue_size", "+=", "size", "\n", "if", "curr_queue_size", ">=", "self", ".", "max_queue_size", ":", "\n", "            ", "curr_queue_size", "=", "self", ".", "max_queue_size", "\n", "", "setattr", "(", "self", ",", "'curr_queue_size'", ",", "curr_queue_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.feat_queue.FeatQueue.update": [[41, 48], ["getattr", "feat_queue.FeatQueue.append", "setattr", "setattr"], "methods", ["home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.feat_queue.FeatQueue.append"], ["", "def", "update", "(", "self", ",", "name", ",", "feat", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "queue", "=", "getattr", "(", "self", ",", "name", ")", "\n", "queue", "=", "self", ".", "append", "(", "queue", ",", "feat", ")", "\n", "setattr", "(", "self", ",", "name", ",", "queue", ")", "\n", "", "except", ":", "\n", "            ", "setattr", "(", "self", ",", "name", ",", "feat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.feat_queue.FeatQueue.update_all": [[49, 52], ["zip", "feat_queue.FeatQueue.update"], "methods", ["home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.feat_queue.FeatQueue.update"], ["", "", "def", "update_all", "(", "self", ",", "feats", ",", "names", ")", ":", "\n", "        ", "for", "name", ",", "feat", "in", "zip", "(", "names", ",", "feats", ")", ":", "\n", "            ", "self", ".", "update", "(", "name", ",", "feat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.feat_queue.FeatQueue.sample": [[53, 58], ["getattr"], "methods", ["None"], ["", "", "def", "sample", "(", "self", ",", "name", ",", "indices", ")", ":", "\n", "        ", "queue", "=", "getattr", "(", "self", ",", "name", ")", "\n", "# print(\"name:{}, indices:{}, queue shape {}\".format(name, indices, queue.shape))", "\n", "out", "=", "queue", "[", "indices", "]", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.feat_queue.FeatQueue.batch_sample": [[59, 66], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.append", "torch.cat.append", "feat_queue.FeatQueue.sample().unsqueeze", "feat_queue.FeatQueue.sample"], "methods", ["home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.feat_queue.FeatQueue.append", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.feat_queue.FeatQueue.append", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.feat_queue.FeatQueue.sample"], ["", "def", "batch_sample", "(", "self", ",", "indices_list", ",", "name", ")", ":", "\n", "        ", "list_items", "=", "[", "]", "\n", "for", "indices", "in", "indices_list", ":", "\n", "            ", "list_items", ".", "append", "(", "self", ".", "sample", "(", "name", ",", "indices", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "# print(name)", "\n", "", "list_items", "=", "torch", ".", "cat", "(", "list_items", ",", "dim", "=", "0", ")", "\n", "return", "list_items", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.feat_queue.FeatQueue.batch_sample_all": [[68, 73], ["results.append", "feat_queue.FeatQueue.batch_sample"], "methods", ["home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.feat_queue.FeatQueue.append", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.feat_queue.FeatQueue.batch_sample"], ["", "def", "batch_sample_all", "(", "self", ",", "indices_list", ",", "names", ")", ":", "\n", "        ", "results", "=", "[", "]", "\n", "for", "name", "in", "names", ":", "\n", "            ", "results", ".", "append", "(", "self", ".", "batch_sample", "(", "indices_list", ",", "name", ")", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.feat_queue.FeatQueue.select_indices": [[74, 97], ["zip", "numpy.min", "getattr", "getattr", "numpy.logical_and", "numpy.arange", "numpy.random.choice", "indices_list.append", "length_list.append", "numpy.where", "getattr", "numpy.delete", "len", "min", "len"], "methods", ["home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.feat_queue.FeatQueue.append", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.feat_queue.FeatQueue.append"], ["", "def", "select_indices", "(", "self", ",", "dataset_names", ",", "dataset_indices", ",", "sample_size", "=", "8192", ")", ":", "\n", "        ", "indices_list", "=", "[", "]", "\n", "length_list", "=", "[", "]", "\n", "for", "name", ",", "dataset_index", "in", "zip", "(", "dataset_names", ",", "dataset_indices", ")", ":", "\n", "            ", "dataset_names", "=", "getattr", "(", "self", ",", "'dataset_names'", ")", "\n", "dataset_indices", "=", "getattr", "(", "self", ",", "'dataset_indices'", ")", "\n", "condition", "=", "np", ".", "logical_and", "(", "dataset_names", "==", "name", ",", "dataset_indices", "==", "dataset_index", ")", "\n", "same_indices", "=", "np", ".", "where", "(", "condition", ")", "[", "0", "]", "\n", "all_indices", "=", "np", ".", "arange", "(", "getattr", "(", "self", ",", "'curr_queue_size'", ")", ")", "\n", "if", "same_indices", ".", "size", "!=", "0", ":", "\n", "                ", "diff_indices", "=", "np", ".", "delete", "(", "all_indices", ",", "same_indices", ")", "\n", "", "else", ":", "\n", "                ", "diff_indices", "=", "all_indices", "\n", "\n", "# sample", "\n", "", "perm_index", "=", "np", ".", "random", ".", "choice", "(", "diff_indices", ",", "size", "=", "min", "(", "sample_size", ",", "len", "(", "diff_indices", ")", ")", ",", "replace", "=", "False", ")", "# torch.randint(high=self.curr_queue_size, size=(min(sample_size, self.curr_queue_size),), dtype=torch.int32).tolist()", "\n", "\n", "indices_list", ".", "append", "(", "perm_index", ")", "\n", "length_list", ".", "append", "(", "len", "(", "perm_index", ")", ")", "\n", "\n", "", "minimum_length", "=", "np", ".", "min", "(", "length_list", ")", "\n", "indices_list", "=", "[", "indices", "[", ":", "minimum_length", "]", "for", "indices", "in", "indices_list", "]", "\n", "return", "indices_list", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.nt_xent.Normalize.__init__": [[9, 12], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.smpl.SMPL.__init__"], ["def", "__init__", "(", "self", ",", "power", "=", "2", ")", ":", "\n", "        ", "super", "(", "Normalize", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "power", "=", "power", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.nt_xent.Normalize.forward": [[13, 17], ["x.pow().sum().pow", "x.div", "x.pow().sum", "x.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "norm", "=", "x", ".", "pow", "(", "self", ".", "power", ")", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", ".", "pow", "(", "1.", "/", "self", ".", "power", ")", "\n", "out", "=", "x", ".", "div", "(", "norm", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.nt_xent.NTXent.__init__": [[23, 28], ["torch.Module.__init__", "nt_xent.Normalize"], "methods", ["home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.smpl.SMPL.__init__"], ["def", "__init__", "(", "self", ",", "tau", ",", "kernel", "=", "'dot'", ")", ":", "\n", "        ", "super", "(", "NTXent", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "tau", "=", "tau", "\n", "self", ".", "kernel", "=", "kernel", "\n", "self", ".", "l2_norm", "=", "Normalize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.nt_xent.NTXent.dot_pos": [[29, 38], ["nt_xent.NTXent.l2_norm", "nt_xent.NTXent.l2_norm", "nt_xent.NTXent.size", "nt_xent.NTXent.size", "torch.bmm().squeeze().squeeze", "torch.bmm().squeeze().squeeze", "torch.bmm().squeeze().squeeze", "torch.bmm().squeeze().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "nt_xent.NTXent.view", "nt_xent.NTXent.view"], "methods", ["None"], ["", "def", "dot_pos", "(", "self", ",", "z_1", ",", "z_2", ")", ":", "\n", "        ", "z_1", "=", "self", ".", "l2_norm", "(", "z_1", ")", "\n", "z_2", "=", "self", ".", "l2_norm", "(", "z_2", ")", "\n", "batch_size", "=", "z_1", ".", "size", "(", "0", ")", "\n", "feat_dim", "=", "z_1", ".", "size", "(", "1", ")", "\n", "result", "=", "torch", ".", "bmm", "(", "z_1", ".", "view", "(", "batch_size", ",", "1", ",", "feat_dim", ")", ",", "z_2", ".", "view", "(", "batch_size", ",", "feat_dim", ",", "1", ")", ")", ".", "squeeze", "(", "-", "1", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "# result = result / math.sqrt(feat_dim)", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.nt_xent.NTXent.dot_neg": [[39, 55], ["nt_xent.NTXent.l2_norm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "nt_xent.NTXent.l2_norm", "z_1.repeat.repeat.size", "z_1.repeat.repeat.size", "nt_xent.NTXent.size", "z_1.repeat.repeat.unsqueeze", "z_1.repeat.repeat.repeat", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "result.view.view.view", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "nt_xent.NTXent.size", "z_1.repeat.repeat.view", "nt_xent.NTXent.view", "z_2.unsqueeze"], "methods", ["None"], ["", "def", "dot_neg", "(", "self", ",", "z_1", ",", "z_2", ",", "z_neg", ")", ":", "\n", "        ", "z_1", "=", "self", ".", "l2_norm", "(", "z_1", ")", "\n", "# concatenate z_2 to z_neg", "\n", "z_neg", "=", "torch", ".", "cat", "(", "[", "z_2", ".", "unsqueeze", "(", "1", ")", ",", "z_neg", "]", ",", "dim", "=", "1", ")", "\n", "z_neg", "=", "self", ".", "l2_norm", "(", "z_neg", ")", "\n", "batch_size", "=", "z_1", ".", "size", "(", "0", ")", "\n", "feat_dim", "=", "z_1", ".", "size", "(", "1", ")", "\n", "num_neg", "=", "z_neg", ".", "size", "(", "1", ")", "\n", "\n", "z_1", "=", "z_1", ".", "unsqueeze", "(", "1", ")", "# (B, 1, D)", "\n", "z_1", "=", "z_1", ".", "repeat", "(", "1", ",", "z_neg", ".", "size", "(", "1", ")", ",", "1", ")", "# (B, N, D)", "\n", "result", "=", "torch", ".", "bmm", "(", "z_1", ".", "view", "(", "batch_size", "*", "num_neg", ",", "1", ",", "feat_dim", ")", ",", "z_neg", ".", "view", "(", "batch_size", "*", "num_neg", ",", "feat_dim", ",", "1", ")", ")", "# (B*N, 1, 1)", "\n", "result", "=", "result", ".", "view", "(", "batch_size", ",", "num_neg", ")", "\n", "\n", "# result = result / math.sqrt(feat_dim)", "\n", "return", "torch", ".", "exp", "(", "result", "/", "self", ".", "tau", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.nt_xent.NTXent.mse_pos": [[56, 62], ["result.sum.sum.sum", "torch.nn.functional.mse_loss", "torch.nn.functional.mse_loss"], "methods", ["None"], ["", "def", "mse_pos", "(", "self", ",", "z_1", ",", "z_2", ")", ":", "\n", "# z_1 = self.l2_norm(z_1)", "\n", "# z_2 = self.l2_norm(z_2)", "\n", "        ", "result", "=", "-", "F", ".", "mse_loss", "(", "z_1", ",", "z_2", ",", "reduction", "=", "'none'", ")", "\n", "result", "=", "result", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.nt_xent.NTXent.mse_neg": [[63, 73], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "z_1.repeat.repeat.unsqueeze", "z_1.repeat.repeat.repeat", "result.sum.sum.sum", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.cat.size", "torch.cat.size", "torch.nn.functional.mse_loss", "torch.nn.functional.mse_loss", "z_2.unsqueeze"], "methods", ["None"], ["", "def", "mse_neg", "(", "self", ",", "z_1", ",", "z_2", ",", "z_neg", ")", ":", "\n", "# concatenate z_2 to z_neg", "\n", "        ", "z_neg", "=", "torch", ".", "cat", "(", "[", "z_2", ".", "unsqueeze", "(", "1", ")", ",", "z_neg", "]", ",", "dim", "=", "1", ")", "\n", "\n", "z_1", "=", "z_1", ".", "unsqueeze", "(", "1", ")", "# (B, 1, D)", "\n", "z_1", "=", "z_1", ".", "repeat", "(", "1", ",", "z_neg", ".", "size", "(", "1", ")", ",", "1", ")", "# (B, N, D)", "\n", "result", "=", "-", "F", ".", "mse_loss", "(", "z_1", ",", "z_neg", ",", "reduction", "=", "'none'", ")", "\n", "result", "=", "result", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "\n", "return", "torch", ".", "exp", "(", "result", "/", "self", ".", "tau", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.nt_xent.NTXent.forward": [[74, 91], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "loss.mean", "pos", "torch.sum.", "torch.sum.", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z_1", ",", "z_2", ",", "z_neg", ")", ":", "\n", "        ", "\"\"\"\n        Parameters:\n            z_1: (B, D)\n            z_2: (B, D)\n            z_neg: (B, N, D)\n        \"\"\"", "\n", "if", "self", ".", "kernel", "==", "'dot'", ":", "\n", "            ", "pos", "=", "self", ".", "dot_pos", "\n", "neg", "=", "self", ".", "dot_neg", "\n", "", "elif", "self", ".", "kernel", "==", "'mse'", ":", "\n", "            ", "pos", "=", "self", ".", "mse_pos", "\n", "neg", "=", "self", ".", "mse_neg", "\n", "", "pos", "=", "pos", "(", "z_1", ",", "z_2", ")", "/", "self", ".", "tau", "# (B, 1)", "\n", "neg", "=", "torch", ".", "sum", "(", "neg", "(", "z_1", ",", "z_2", ",", "z_neg", ")", ",", "dim", "=", "-", "1", ")", "# (B, 1)", "\n", "loss", "=", "-", "pos", "+", "torch", ".", "log", "(", "neg", "+", "1e-16", ")", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.smpl.SMPL.__init__": [[14, 20], ["smplx.SMPL.__init__", "numpy.load", "smpl.SMPL.register_buffer", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.smpl.SMPL.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SMPL", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "joints", "=", "[", "constants", ".", "JOINT_MAP", "[", "i", "]", "for", "i", "in", "constants", ".", "JOINT_NAMES", "]", "\n", "J_regressor_extra", "=", "np", ".", "load", "(", "config", ".", "JOINT_REGRESSOR_TRAIN_EXTRA", ")", "\n", "self", ".", "register_buffer", "(", "'J_regressor_extra'", ",", "torch", ".", "tensor", "(", "J_regressor_extra", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "\n", "self", ".", "joint_map", "=", "torch", ".", "tensor", "(", "joints", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.smpl.SMPL.forward": [[21, 34], ["super().forward", "smplx.lbs.vertices2joints", "torch.cat", "smplx.body_models.ModelOutput"], "methods", ["home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.smpl.SMPL.forward"], ["", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "kwargs", "[", "'get_skin'", "]", "=", "True", "\n", "smpl_output", "=", "super", "(", "SMPL", ",", "self", ")", ".", "forward", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "extra_joints", "=", "vertices2joints", "(", "self", ".", "J_regressor_extra", ",", "smpl_output", ".", "vertices", ")", "\n", "joints", "=", "torch", ".", "cat", "(", "[", "smpl_output", ".", "joints", ",", "extra_joints", "]", ",", "dim", "=", "1", ")", "\n", "joints", "=", "joints", "[", ":", ",", "self", ".", "joint_map", ",", ":", "]", "\n", "output", "=", "ModelOutput", "(", "vertices", "=", "smpl_output", ".", "vertices", ",", "\n", "global_orient", "=", "smpl_output", ".", "global_orient", ",", "\n", "body_pose", "=", "smpl_output", ".", "body_pose", ",", "\n", "joints", "=", "joints", ",", "\n", "betas", "=", "smpl_output", ".", "betas", ",", "\n", "full_pose", "=", "smpl_output", ".", "full_pose", ")", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.train.trainer.Trainer.init_fn": [[18, 57], ["datasets.MixedDataset", "models.hmr().to", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.ExponentialLR", "torch.optim.lr_scheduler.ExponentialLR", "torch.optim.lr_scheduler.ExponentialLR", "torch.optim.lr_scheduler.ExponentialLR", "torch.optim.lr_scheduler.ExponentialLR", "torch.optim.lr_scheduler.ExponentialLR", "torch.optim.lr_scheduler.ExponentialLR", "torch.optim.lr_scheduler.ExponentialLR", "torch.optim.lr_scheduler.ExponentialLR", "models.SMPL().to", "models.NTXent().to", "torch.MSELoss().to", "torch.MSELoss().to", "torch.MSELoss().to", "torch.L1Loss().to", "torch.L1Loss().to", "torch.L1Loss().to", "torch.MSELoss().to", "torch.MSELoss().to", "torch.MSELoss().to", "torch.MSELoss().to", "torch.MSELoss().to", "torch.MSELoss().to", "utils.renderer.Renderer", "models.FeatQueue", "trainer.Trainer.load_pretrained", "models.hmr", "trainer.Trainer.model.parameters", "models.SMPL", "models.NTXent", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss"], "methods", ["home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.base_trainer.BaseTrainer.load_pretrained", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.hmr.hmr"], ["    ", "def", "init_fn", "(", "self", ")", ":", "\n", "        ", "self", ".", "train_ds", "=", "MixedDataset", "(", "self", ".", "options", ",", "ignore_3d", "=", "self", ".", "options", ".", "ignore_3d", ",", "is_train", "=", "True", ")", "\n", "\n", "self", ".", "model", "=", "hmr", "(", "config", ".", "SMPL_MEAN_PARAMS", ",", "pretrained", "=", "True", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "params", "=", "self", ".", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "options", ".", "lr", ")", "\n", "self", ".", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "ExponentialLR", "(", "self", ".", "optimizer", ",", "gamma", "=", "0.95", ")", "\n", "\n", "\n", "self", ".", "smpl", "=", "SMPL", "(", "config", ".", "SMPL_MODEL_DIR", ",", "\n", "batch_size", "=", "self", ".", "options", ".", "batch_size", ",", "\n", "create_transl", "=", "False", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# consistency loss", "\n", "self", ".", "criterion_consistency_contrastive", "=", "NTXent", "(", "tau", "=", "self", ".", "options", ".", "tau", ",", "kernel", "=", "self", ".", "options", ".", "kernel", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "criterion_consistency_mse", "=", "nn", ".", "MSELoss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "# Per-vertex loss on the shape", "\n", "self", ".", "criterion_shape", "=", "nn", ".", "L1Loss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "# Keypoint (2D and 3D) loss", "\n", "# No reduction because confidence weighting needs to be applied", "\n", "self", ".", "criterion_keypoints", "=", "nn", ".", "MSELoss", "(", "reduction", "=", "'none'", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "# Loss for SMPL parameter regression", "\n", "self", ".", "criterion_regr", "=", "nn", ".", "MSELoss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "models_dict", "=", "{", "'model'", ":", "self", ".", "model", "}", "\n", "self", ".", "optimizers_dict", "=", "{", "'optimizer'", ":", "self", ".", "optimizer", "}", "\n", "self", ".", "focal_length", "=", "constants", ".", "FOCAL_LENGTH", "\n", "\n", "if", "self", ".", "options", ".", "pretrained_checkpoint", "is", "not", "None", ":", "\n", "            ", "self", ".", "load_pretrained", "(", "checkpoint_file", "=", "self", ".", "options", ".", "pretrained_checkpoint", ")", "\n", "\n", "# Create renderer", "\n", "", "self", ".", "renderer", "=", "Renderer", "(", "focal_length", "=", "self", ".", "focal_length", ",", "img_res", "=", "self", ".", "options", ".", "img_res", ",", "faces", "=", "self", ".", "smpl", ".", "faces", ")", "\n", "\n", "# Create input image flag", "\n", "self", ".", "input_img", "=", "self", ".", "options", ".", "input_img", "\n", "\n", "# initialize queue", "\n", "self", ".", "feat_queue", "=", "FeatQueue", "(", "max_queue_size", "=", "self", ".", "options", ".", "max_queue_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.train.trainer.Trainer.keypoint_loss": [[59, 69], ["gt_keypoints_2d[].unsqueeze().clone", "loss.mean", "trainer.Trainer.criterion_keypoints", "gt_keypoints_2d[].unsqueeze"], "methods", ["None"], ["", "def", "keypoint_loss", "(", "self", ",", "pred_keypoints_2d", ",", "gt_keypoints_2d", ",", "openpose_weight", ",", "gt_weight", ")", ":", "\n", "        ", "\"\"\" Compute 2D reprojection loss on the keypoints.\n        The loss is weighted by the confidence.\n        The available keypoints are different for each dataset.\n        \"\"\"", "\n", "conf", "=", "gt_keypoints_2d", "[", ":", ",", ":", ",", "-", "1", "]", ".", "unsqueeze", "(", "-", "1", ")", ".", "clone", "(", ")", "\n", "conf", "[", ":", ",", ":", "25", "]", "*=", "openpose_weight", "\n", "conf", "[", ":", ",", "25", ":", "]", "*=", "gt_weight", "\n", "loss", "=", "(", "conf", "*", "self", ".", "criterion_keypoints", "(", "pred_keypoints_2d", ",", "gt_keypoints_2d", "[", ":", ",", ":", ",", ":", "-", "1", "]", ")", ")", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.train.trainer.Trainer.keypoint_3d_loss": [[70, 88], ["gt_keypoints_3d[].unsqueeze().clone", "gt_keypoints_3d[].clone", "len", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "gt_keypoints_3d[].unsqueeze", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "trainer.Trainer.criterion_keypoints", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["None"], ["", "def", "keypoint_3d_loss", "(", "self", ",", "pred_keypoints_3d", ",", "gt_keypoints_3d", ",", "has_pose_3d", ")", ":", "\n", "        ", "\"\"\"Compute 3D keypoint loss for the examples that 3D keypoint annotations are available.\n        The loss is weighted by the confidence.\n        \"\"\"", "\n", "pred_keypoints_3d", "=", "pred_keypoints_3d", "[", ":", ",", "25", ":", ",", ":", "]", "\n", "conf", "=", "gt_keypoints_3d", "[", ":", ",", ":", ",", "-", "1", "]", ".", "unsqueeze", "(", "-", "1", ")", ".", "clone", "(", ")", "\n", "gt_keypoints_3d", "=", "gt_keypoints_3d", "[", ":", ",", ":", ",", ":", "-", "1", "]", ".", "clone", "(", ")", "\n", "gt_keypoints_3d", "=", "gt_keypoints_3d", "[", "has_pose_3d", "==", "1", "]", "\n", "conf", "=", "conf", "[", "has_pose_3d", "==", "1", "]", "\n", "pred_keypoints_3d", "=", "pred_keypoints_3d", "[", "has_pose_3d", "==", "1", "]", "\n", "if", "len", "(", "gt_keypoints_3d", ")", ">", "0", ":", "\n", "            ", "gt_pelvis", "=", "(", "gt_keypoints_3d", "[", ":", ",", "2", ",", ":", "]", "+", "gt_keypoints_3d", "[", ":", ",", "3", ",", ":", "]", ")", "/", "2", "\n", "gt_keypoints_3d", "=", "gt_keypoints_3d", "-", "gt_pelvis", "[", ":", ",", "None", ",", ":", "]", "\n", "pred_pelvis", "=", "(", "pred_keypoints_3d", "[", ":", ",", "2", ",", ":", "]", "+", "pred_keypoints_3d", "[", ":", ",", "3", ",", ":", "]", ")", "/", "2", "\n", "pred_keypoints_3d", "=", "pred_keypoints_3d", "-", "pred_pelvis", "[", ":", ",", "None", ",", ":", "]", "\n", "return", "(", "conf", "*", "self", ".", "criterion_keypoints", "(", "pred_keypoints_3d", ",", "gt_keypoints_3d", ")", ")", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "FloatTensor", "(", "1", ")", ".", "fill_", "(", "0.", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.train.trainer.Trainer.shape_loss": [[89, 97], ["len", "trainer.Trainer.criterion_shape", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["None"], ["", "", "def", "shape_loss", "(", "self", ",", "pred_vertices", ",", "gt_vertices", ",", "has_smpl", ")", ":", "\n", "        ", "\"\"\"Compute per-vertex loss on the shape for the examples that SMPL annotations are available.\"\"\"", "\n", "pred_vertices_with_shape", "=", "pred_vertices", "[", "has_smpl", "==", "1", "]", "\n", "gt_vertices_with_shape", "=", "gt_vertices", "[", "has_smpl", "==", "1", "]", "\n", "if", "len", "(", "gt_vertices_with_shape", ")", ">", "0", ":", "\n", "            ", "return", "self", ".", "criterion_shape", "(", "pred_vertices_with_shape", ",", "gt_vertices_with_shape", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "FloatTensor", "(", "1", ")", ".", "fill_", "(", "0.", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.train.trainer.Trainer.smpl_losses": [[98, 115], ["utils.geometry.batch_rodrigues().view", "len", "trainer.Trainer.criterion_regr", "trainer.Trainer.criterion_regr", "trainer.Trainer.criterion_regr", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "utils.geometry.batch_rodrigues", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "gt_pose.view", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.geometry.batch_rodrigues"], ["", "", "def", "smpl_losses", "(", "self", ",", "pred_rotmat", ",", "pred_betas", ",", "pred_cam_t", ",", "gt_pose", ",", "gt_betas", ",", "gt_cam_t", ",", "has_smpl", ")", ":", "\n", "        ", "pred_rotmat_valid", "=", "pred_rotmat", "[", "has_smpl", "==", "1", "]", "\n", "gt_rotmat_valid", "=", "batch_rodrigues", "(", "gt_pose", ".", "view", "(", "-", "1", ",", "3", ")", ")", ".", "view", "(", "-", "1", ",", "24", ",", "3", ",", "3", ")", "[", "has_smpl", "==", "1", "]", "\n", "pred_betas_valid", "=", "pred_betas", "[", "has_smpl", "==", "1", "]", "\n", "gt_betas_valid", "=", "gt_betas", "[", "has_smpl", "==", "1", "]", "\n", "pred_cam_t_valid", "=", "pred_cam_t", "[", "has_smpl", "==", "1", "]", "\n", "gt_cam_t_valid", "=", "gt_cam_t", "[", "has_smpl", "==", "1", "]", "\n", "\n", "if", "len", "(", "pred_rotmat_valid", ")", ">", "0", ":", "\n", "            ", "loss_regr_pose", "=", "self", ".", "criterion_regr", "(", "pred_rotmat_valid", ",", "gt_rotmat_valid", ")", "\n", "loss_regr_betas", "=", "self", ".", "criterion_regr", "(", "pred_betas_valid", ",", "gt_betas_valid", ")", "\n", "loss_regr_cam_t", "=", "self", ".", "criterion_regr", "(", "pred_cam_t_valid", ",", "gt_cam_t_valid", ")", "\n", "", "else", ":", "\n", "            ", "loss_regr_pose", "=", "torch", ".", "FloatTensor", "(", "1", ")", ".", "fill_", "(", "0.", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "loss_regr_betas", "=", "torch", ".", "FloatTensor", "(", "1", ")", ".", "fill_", "(", "0.", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "loss_regr_cam_t", "=", "torch", ".", "FloatTensor", "(", "1", ")", ".", "fill_", "(", "0.", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "return", "loss_regr_pose", ",", "loss_regr_betas", ",", "loss_regr_cam_t", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.train.trainer.Trainer.consistency_losses": [[116, 130], ["trainer.Trainer.criterion_consistency_mse", "trainer.Trainer.criterion_consistency_mse", "trainer.Trainer.criterion_consistency_mse", "zip", "trainer.Trainer.criterion_consistency_contrastive"], "methods", ["None"], ["", "def", "consistency_losses", "(", "self", ",", "\n", "pred_rotmat", ",", "pred_betas", ",", "pred_cam_t", ",", "pred_feat_list", ",", "\n", "gt_rotmat", ",", "gt_betas", ",", "gt_cam_t", ",", "gt_feat_list", ",", "\n", "neg_feat_list", ")", ":", "\n", "        ", "loss_pose", "=", "self", ".", "criterion_consistency_mse", "(", "pred_rotmat", ",", "gt_rotmat", ")", "\n", "loss_betas", "=", "self", ".", "criterion_consistency_mse", "(", "pred_betas", ",", "gt_betas", ")", "\n", "loss_cam_t", "=", "self", ".", "criterion_consistency_mse", "(", "pred_cam_t", ",", "gt_cam_t", ")", "\n", "loss_consistency_mse", "=", "self", ".", "options", ".", "pose_loss_weight", "*", "loss_pose", "+", "self", ".", "options", ".", "beta_loss_weight", "*", "loss_betas", "+", "self", ".", "options", ".", "cam_loss_weight", "*", "loss_cam_t", "\n", "loss_feat", "=", "0", "\n", "for", "pred_feat", ",", "gt_feat", ",", "neg_feat", "in", "zip", "(", "pred_feat_list", ",", "gt_feat_list", ",", "neg_feat_list", ")", ":", "\n", "            ", "loss_feat", "+=", "self", ".", "criterion_consistency_contrastive", "(", "pred_feat", ",", "gt_feat", ",", "neg_feat", ")", "\n", "", "loss_feat", "=", "self", ".", "options", ".", "feat_loss_weight", "*", "loss_feat", "\n", "loss", "=", "loss_consistency_mse", "+", "loss_feat", "\n", "return", "loss", ",", "loss_consistency_mse", ",", "loss_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxy09_RSC-Net.train.trainer.Trainer.train_step": [[131, 277], ["trainer.Trainer.model.train", "input_batch[].byte", "input_batch[].byte", "input_batch[].numpy", "trainer.Trainer.smpl", "gt_keypoints_2d.clone", "utils.geometry.estimate_translation", "enumerate", "range", "trainer.Trainer.optimizer.zero_grad", "loss.backward", "trainer.Trainer.optimizer.step", "zip", "images.to.to.to", "trainer.Trainer.model", "trainer.Trainer.smpl", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "utils.geometry.perspective_projection", "trainer.Trainer.smpl_losses", "smpl_outputs.append", "trainer.Trainer.feat_queue.update_queue_size", "trainer.Trainer.feat_queue.update_all", "trainer.Trainer.feat_queue.update", "trainer.Trainer.feat_queue.update", "len", "len", "gt_rotmat.detach.detach.detach", "gt_betas.detach.detach.detach", "gt_cam_t.detach.detach.detach", "trainer.Trainer.feat_queue.select_indices", "trainer.Trainer.feat_queue.batch_sample_all", "range", "pred_vertices.detach", "torch.stack.detach", "torch.stack.detach", "torch.stack.detach", "loss.detach().item", "loss_consistency.detach().item", "loss_consistency_smpl.detach().item", "loss_consistency_feat.detach().item", "loss_keypoints.detach().item", "loss_keypoints_3d.detach().item", "loss_regr_pose.detach().item", "loss_regr_betas.detach().item", "loss_shape.detach().item", "len", "numpy.array", "feat.detach", "len", "trainer.Trainer.consistency_losses", "pred_rotmat[].unsqueeze", "torch.eye().unsqueeze().expand", "torch.eye().unsqueeze().expand", "torch.eye().unsqueeze().expand", "torch.eye().unsqueeze().expand", "torch.eye().unsqueeze().expand", "torch.eye().unsqueeze().expand", "torch.eye().unsqueeze().expand", "torch.eye().unsqueeze().expand", "torch.eye().unsqueeze().expand", "trainer.Trainer.keypoint_loss", "trainer.Trainer.keypoint_3d_loss", "trainer.Trainer.shape_loss", "feat.detach", "loss.detach", "loss_consistency.detach", "loss_consistency_smpl.detach", "loss_consistency_feat.detach", "loss_keypoints.detach", "loss_keypoints_3d.detach", "loss_regr_pose.detach", "loss_regr_betas.detach", "loss_shape.detach", "len", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "len", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.base_trainer.BaseTrainer.train", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.geometry.estimate_translation", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.utils.geometry.perspective_projection", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.train.trainer.Trainer.smpl_losses", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.feat_queue.FeatQueue.append", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.feat_queue.FeatQueue.update_queue_size", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.feat_queue.FeatQueue.update_all", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.feat_queue.FeatQueue.update", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.feat_queue.FeatQueue.update", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.feat_queue.FeatQueue.select_indices", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.models.feat_queue.FeatQueue.batch_sample_all", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.train.trainer.Trainer.consistency_losses", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.train.trainer.Trainer.keypoint_loss", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.train.trainer.Trainer.keypoint_3d_loss", "home.repos.pwc.inspect_result.xuxy09_RSC-Net.train.trainer.Trainer.shape_loss"], ["", "def", "train_step", "(", "self", ",", "input_batch", ")", ":", "\n", "        ", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "images_hr", "=", "input_batch", "[", "'img_hr'", "]", "\n", "images_lr_list", "=", "input_batch", "[", "'img_lr'", "]", "\n", "images_list", "=", "[", "images_hr", "]", "+", "images_lr_list", "\n", "scale_names", "=", "[", "'224'", ",", "'224_128'", ",", "'128_64'", ",", "'64_40'", ",", "'40_24'", "]", "\n", "scale_names", "=", "scale_names", "[", ":", "len", "(", "images_list", ")", "]", "\n", "feat_names", "=", "[", "'layer4'", "]", "\n", "\n", "# Get data from the batch", "\n", "gt_keypoints_2d", "=", "input_batch", "[", "'keypoints'", "]", "# 2D keypoints", "\n", "gt_pose", "=", "input_batch", "[", "'pose'", "]", "# SMPL pose parameters", "\n", "gt_betas", "=", "input_batch", "[", "'betas'", "]", "# SMPL beta parameters", "\n", "gt_joints", "=", "input_batch", "[", "'pose_3d'", "]", "# 3D pose", "\n", "has_smpl", "=", "input_batch", "[", "'has_smpl'", "]", ".", "byte", "(", ")", "# flag that indicates whether SMPL parameters are valid", "\n", "has_pose_3d", "=", "input_batch", "[", "'has_pose_3d'", "]", ".", "byte", "(", ")", "# flag that indicates whether 3D pose is valid", "\n", "dataset_name", "=", "input_batch", "[", "'dataset_name'", "]", "# name of the dataset the image comes from", "\n", "indices", "=", "input_batch", "[", "'sample_index'", "]", ".", "numpy", "(", ")", "# index of example inside mixed dataset", "\n", "batch_size", "=", "images_hr", ".", "shape", "[", "0", "]", "\n", "\n", "\n", "# Get GT vertices and model joints", "\n", "# Note that gt_model_joints is different from gt_joints as it comes from SMPL", "\n", "gt_out", "=", "self", ".", "smpl", "(", "betas", "=", "gt_betas", ",", "body_pose", "=", "gt_pose", "[", ":", ",", "3", ":", "]", ",", "global_orient", "=", "gt_pose", "[", ":", ",", ":", "3", "]", ")", "\n", "gt_model_joints", "=", "gt_out", ".", "joints", "\n", "gt_vertices", "=", "gt_out", ".", "vertices", "\n", "\n", "# De-normalize 2D keypoints from [-1,1] to pixel space", "\n", "gt_keypoints_2d_orig", "=", "gt_keypoints_2d", ".", "clone", "(", ")", "\n", "gt_keypoints_2d_orig", "[", ":", ",", ":", ",", ":", "-", "1", "]", "=", "0.5", "*", "self", ".", "options", ".", "img_res", "*", "(", "gt_keypoints_2d_orig", "[", ":", ",", ":", ",", ":", "-", "1", "]", "+", "1", ")", "\n", "\n", "# Estimate camera translation given the model joints and 2D keypoints", "\n", "# by minimizing a weighted least squares loss", "\n", "gt_cam_t", "=", "estimate_translation", "(", "gt_model_joints", ",", "gt_keypoints_2d_orig", ",", "focal_length", "=", "self", ".", "focal_length", ",", "img_size", "=", "self", ".", "options", ".", "img_res", ")", "\n", "\n", "loss_shape", "=", "0", "\n", "loss_keypoints", "=", "0", "\n", "loss_keypoints_3d", "=", "0", "\n", "loss_regr_pose", "=", "0", "\n", "loss_regr_betas", "=", "0", "\n", "loss_regr_cam_t", "=", "0", "\n", "smpl_outputs", "=", "[", "]", "\n", "for", "i", ",", "(", "images", ",", "scale_name", ")", "in", "enumerate", "(", "zip", "(", "images_list", ",", "scale_names", "[", ":", "len", "(", "images_list", ")", "]", ")", ")", ":", "\n", "            ", "images", "=", "images", ".", "to", "(", "self", ".", "device", ")", "\n", "# Feed images in the network to predict camera and SMPL parameters", "\n", "pred_rotmat", ",", "pred_betas", ",", "pred_camera", ",", "feat_list", "=", "self", ".", "model", "(", "images", ",", "scale", "=", "i", ")", "\n", "\n", "pred_output", "=", "self", ".", "smpl", "(", "betas", "=", "pred_betas", ",", "body_pose", "=", "pred_rotmat", "[", ":", ",", "1", ":", "]", ",", "global_orient", "=", "pred_rotmat", "[", ":", ",", "0", "]", ".", "unsqueeze", "(", "1", ")", ",", "pose2rot", "=", "False", ")", "\n", "pred_vertices", "=", "pred_output", ".", "vertices", "\n", "pred_joints", "=", "pred_output", ".", "joints", "\n", "\n", "# Convert Weak Perspective Camera [s, tx, ty] to camera translation [tx, ty, tz] in 3D given the bounding box size", "\n", "# This camera translation can be used in a full perspective projection", "\n", "pred_cam_t", "=", "torch", ".", "stack", "(", "[", "pred_camera", "[", ":", ",", "1", "]", ",", "\n", "pred_camera", "[", ":", ",", "2", "]", ",", "\n", "2", "*", "self", ".", "focal_length", "/", "(", "self", ".", "options", ".", "img_res", "*", "pred_camera", "[", ":", ",", "0", "]", "+", "1e-9", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "camera_center", "=", "torch", ".", "zeros", "(", "batch_size", ",", "2", ",", "device", "=", "self", ".", "device", ")", "\n", "pred_keypoints_2d", "=", "perspective_projection", "(", "pred_joints", ",", "\n", "rotation", "=", "torch", ".", "eye", "(", "3", ",", "device", "=", "self", ".", "device", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "batch_size", ",", "-", "1", ",", "-", "1", ")", ",", "\n", "translation", "=", "pred_cam_t", ",", "\n", "focal_length", "=", "self", ".", "focal_length", ",", "\n", "camera_center", "=", "camera_center", ")", "\n", "# Normalize keypoints to [-1,1]", "\n", "pred_keypoints_2d", "=", "pred_keypoints_2d", "/", "(", "self", ".", "options", ".", "img_res", "/", "2.", ")", "\n", "\n", "# Compute loss on SMPL parameters", "\n", "loss_pose", ",", "loss_betas", ",", "loss_cam_t", "=", "self", ".", "smpl_losses", "(", "pred_rotmat", ",", "pred_betas", ",", "pred_cam_t", ",", "gt_pose", ",", "gt_betas", ",", "gt_cam_t", ",", "has_smpl", ")", "\n", "loss_regr_pose", "=", "loss_regr_pose", "+", "(", "i", "+", "1", ")", "*", "loss_pose", "\n", "loss_regr_betas", "=", "loss_regr_betas", "+", "(", "i", "+", "1", ")", "*", "loss_betas", "\n", "loss_regr_cam_t", "=", "loss_regr_cam_t", "+", "(", "i", "+", "1", ")", "*", "loss_cam_t", "\n", "\n", "# Compute 2D reprojection loss for the keypoints", "\n", "loss_keypoints", "=", "loss_keypoints", "+", "(", "i", "+", "1", ")", "*", "self", ".", "keypoint_loss", "(", "pred_keypoints_2d", ",", "gt_keypoints_2d", ",", "\n", "self", ".", "options", ".", "openpose_train_weight", ",", "\n", "self", ".", "options", ".", "gt_train_weight", ")", "\n", "\n", "# Compute 3D keypoint loss", "\n", "loss_keypoints_3d", "=", "loss_keypoints_3d", "+", "(", "i", "+", "1", ")", "*", "self", ".", "keypoint_3d_loss", "(", "pred_joints", ",", "gt_joints", ",", "has_pose_3d", ")", "\n", "\n", "# Per-vertex loss for the shape", "\n", "loss_shape", "=", "loss_shape", "+", "(", "i", "+", "1", ")", "*", "self", ".", "shape_loss", "(", "pred_vertices", ",", "gt_vertices", ",", "has_smpl", ")", "\n", "\n", "# save pred_rotmat, pred_betas, pred_cam_t for later, from large images to smaller images", "\n", "smpl_outputs", ".", "append", "(", "[", "pred_rotmat", ",", "pred_betas", ",", "pred_cam_t", ",", "feat_list", "]", ")", "\n", "\n", "# update queue size", "\n", "self", ".", "feat_queue", ".", "update_queue_size", "(", "batch_size", ")", "\n", "# update the queue", "\n", "self", ".", "feat_queue", ".", "update_all", "(", "[", "feat", ".", "detach", "(", ")", "for", "feat", "in", "feat_list", "]", ",", "[", "name", "for", "name", "in", "feat_names", "]", ")", "\n", "# update dataset name and index for each scale", "\n", "self", ".", "feat_queue", ".", "update", "(", "'dataset_names'", ",", "np", ".", "array", "(", "dataset_name", ")", ")", "\n", "self", ".", "feat_queue", ".", "update", "(", "'dataset_indices'", ",", "indices", ")", "\n", "\n", "# Compute total loss except the consistency loss", "\n", "", "loss", "=", "self", ".", "options", ".", "shape_loss_weight", "*", "loss_shape", "+", "self", ".", "options", ".", "keypoint_loss_weight", "*", "loss_keypoints", "+", "self", ".", "options", ".", "keypoint_loss_weight", "*", "loss_keypoints_3d", "+", "self", ".", "options", ".", "pose_loss_weight", "*", "loss_regr_pose", "+", "self", ".", "options", ".", "beta_loss_weight", "*", "loss_regr_betas", "+", "self", ".", "options", ".", "cam_loss_weight", "*", "loss_regr_cam_t", "\n", "loss", "=", "loss", "/", "len", "(", "images_list", ")", "\n", "\n", "# compute the consistency loss", "\n", "loss_consistency", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "smpl_outputs", ")", ")", ":", "\n", "            ", "gt_rotmat", ",", "gt_betas", ",", "gt_cam_t", ",", "gt_feat_list", "=", "smpl_outputs", "[", "i", "]", "\n", "gt_rotmat", "=", "gt_rotmat", ".", "detach", "(", ")", "\n", "gt_betas", "=", "gt_betas", ".", "detach", "(", ")", "\n", "gt_cam_t", "=", "gt_cam_t", ".", "detach", "(", ")", "\n", "gt_feat_list", "=", "[", "feat", ".", "detach", "(", ")", "for", "feat", "in", "gt_feat_list", "]", "\n", "# sample negative index", "\n", "indices_list", "=", "self", ".", "feat_queue", ".", "select_indices", "(", "dataset_name", ",", "indices", ",", "self", ".", "options", ".", "sample_size", ")", "\n", "neg_feat_list", "=", "self", ".", "feat_queue", ".", "batch_sample_all", "(", "indices_list", ",", "names", "=", "feat_names", ")", "\n", "for", "j", "in", "range", "(", "i", "+", "1", ",", "len", "(", "smpl_outputs", ")", ")", ":", "\n", "# compute the consistency loss from high to low: 1:2, 1:3, 2:3 and weighted by 1/(j-i)", "\n", "                ", "pred_rotmat", ",", "pred_betas", ",", "pred_cam_t", ",", "pred_feat_list", "=", "smpl_outputs", "[", "j", "]", "\n", "loss_consistency_total", ",", "loss_consistency_smpl", ",", "loss_consistency_feat", "=", "self", ".", "consistency_losses", "(", "pred_rotmat", ",", "pred_betas", ",", "pred_cam_t", ",", "pred_feat_list", ",", "gt_rotmat", ",", "gt_betas", ",", "gt_cam_t", ",", "gt_feat_list", ",", "neg_feat_list", ")", "\n", "loss_consistency", "=", "loss_consistency", "+", "(", "(", "j", "-", "i", ")", "/", "len", "(", "smpl_outputs", ")", ")", "*", "loss_consistency_total", "\n", "", "", "loss_consistency", "=", "loss_consistency", "*", "self", ".", "consistency_loss_ramp", "*", "self", ".", "options", ".", "consistency_loss_weight", "\n", "\n", "loss", "+=", "loss_consistency", "\n", "loss", "*=", "60", "\n", "\n", "# Do backprop", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "# Pack output arguments", "\n", "output", "=", "{", "'pred_vertices'", ":", "pred_vertices", ".", "detach", "(", ")", ",", "\n", "'pred_cam_t'", ":", "pred_cam_t", ".", "detach", "(", ")", "}", "\n", "losses", "=", "{", "'lr'", ":", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "\n", "'loss_ramp'", ":", "self", ".", "consistency_loss_ramp", ",", "\n", "'loss'", ":", "loss", ".", "detach", "(", ")", ".", "item", "(", ")", ",", "\n", "'loss_consistency'", ":", "loss_consistency", ".", "detach", "(", ")", ".", "item", "(", ")", ",", "\n", "'loss_consistency_smpl'", ":", "loss_consistency_smpl", ".", "detach", "(", ")", ".", "item", "(", ")", ",", "\n", "'loss_consistency_feat'", ":", "loss_consistency_feat", ".", "detach", "(", ")", ".", "item", "(", ")", ",", "\n", "'loss_keypoints'", ":", "loss_keypoints", ".", "detach", "(", ")", ".", "item", "(", ")", ",", "\n", "'loss_keypoints_3d'", ":", "loss_keypoints_3d", ".", "detach", "(", ")", ".", "item", "(", ")", ",", "\n", "'loss_regr_pose'", ":", "loss_regr_pose", ".", "detach", "(", ")", ".", "item", "(", ")", ",", "\n", "'loss_regr_betas'", ":", "loss_regr_betas", ".", "detach", "(", ")", ".", "item", "(", ")", ",", "\n", "'loss_shape'", ":", "loss_shape", ".", "detach", "(", ")", ".", "item", "(", ")", "}", "\n", "\n", "return", "output", ",", "losses", "\n", "\n"]]}