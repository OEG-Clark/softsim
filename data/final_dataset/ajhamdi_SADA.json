{"home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.discrminator_ann": [[8, 19], ["tensorflow.variable_scope", "slim.fully_connected", "range", "slim.fully_connected", "scope.reuse_variables", "slim.fully_connected"], "function", ["None"], ["def", "discrminator_ann", "(", "x", ",", "output_size", ",", "reuse", "=", "False", ",", "network_size", "=", "3", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "\"discriminator\"", ")", "as", "scope", ":", "\n", "        ", "if", "reuse", ":", "\n", "            ", "scope", ".", "reuse_variables", "(", ")", "\n", "", "output", "=", "slim", ".", "fully_connected", "(", "x", ",", "10", ",", "scope", "=", "'objective/fc_1'", ")", "\n", "for", "ii", "in", "range", "(", "2", ",", "2", "+", "network_size", ")", ":", "\n", "            ", "output", "=", "slim", ".", "fully_connected", "(", "\n", "output", ",", "10", ",", "scope", "=", "'objective/fc_%d'", "%", "(", "ii", ")", ")", "\n", "", "output", "=", "slim", ".", "fully_connected", "(", "\n", "output", ",", "output_size", ",", "activation_fn", "=", "None", ",", "scope", "=", "'objective/fc_%d'", "%", "(", "2", "+", "network_size", ")", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.generator_ann": [[21, 33], ["numpy.absolute().astype", "tensorflow.variable_scope", "slim.fully_connected", "range", "slim.fully_connected", "tensorflow.nn.tanh", "numpy.absolute", "slim.fully_connected"], "function", ["None"], ["", "def", "generator_ann", "(", "x", ",", "output_size", ",", "min_bound", "=", "-", "1", ",", "max_bound", "=", "1", ",", "network_size", "=", "3", ")", ":", "\n", "    ", "range_required", "=", "np", ".", "absolute", "(", "max_bound", "-", "min_bound", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "with", "tf", ".", "variable_scope", "(", "\"generator\"", ")", "as", "scope", ":", "\n", "        ", "output", "=", "slim", ".", "fully_connected", "(", "x", ",", "10", ",", "scope", "=", "'objective/fc_1'", ")", "\n", "for", "ii", "in", "range", "(", "2", ",", "2", "+", "network_size", ")", ":", "\n", "            ", "output", "=", "slim", ".", "fully_connected", "(", "\n", "output", ",", "10", ",", "scope", "=", "'objective/fc_%d'", "%", "(", "ii", ")", ")", "\n", "", "output", "=", "slim", ".", "fully_connected", "(", "\n", "output", ",", "output_size", ",", "activation_fn", "=", "None", ",", "scope", "=", "'objective/fc_%d'", "%", "(", "2", "+", "network_size", ")", ")", "\n", "# contrained_output =   range_required * tf.nn.sigmoid(output) + min_bound* tf.ones_like(output)", "\n", "contrained_output", "=", "tf", ".", "nn", ".", "tanh", "(", "output", ")", "\n", "", "return", "contrained_output", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.int_shape": [[36, 39], ["tensor.get_shape().as_list", "tensor.get_shape"], "function", ["None"], ["", "def", "int_shape", "(", "tensor", ")", ":", "\n", "\t", "shape", "=", "tensor", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "return", "[", "num", "if", "num", "is", "not", "None", "else", "-", "1", "for", "num", "in", "shape", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.get_conv_shape": [[40, 47], ["models.int_shape"], "function", ["home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.int_shape"], ["", "def", "get_conv_shape", "(", "tensor", ",", "data_format", ")", ":", "\n", "\t", "shape", "=", "int_shape", "(", "tensor", ")", "\n", "# always return [N, H, W, C]", "\n", "if", "data_format", "==", "'NCHW'", ":", "\n", "\t\t", "return", "[", "shape", "[", "0", "]", ",", "shape", "[", "2", "]", ",", "shape", "[", "3", "]", ",", "shape", "[", "1", "]", "]", "\n", "", "elif", "data_format", "==", "'NHWC'", ":", "\n", "\t\t", "return", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.nchw_to_nhwc": [[48, 50], ["tensorflow.transpose"], "function", ["None"], ["", "", "def", "nchw_to_nhwc", "(", "x", ")", ":", "\n", "\t", "return", "tf", ".", "transpose", "(", "x", ",", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.nhwc_to_nchw": [[51, 53], ["tensorflow.transpose"], "function", ["None"], ["", "def", "nhwc_to_nchw", "(", "x", ")", ":", "\n", "\t", "return", "tf", ".", "transpose", "(", "x", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.reshape": [[54, 60], ["tensorflow.reshape", "tensorflow.reshape"], "function", ["home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.reshape", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.reshape"], ["", "def", "reshape", "(", "x", ",", "h", ",", "w", ",", "c", ",", "data_format", ")", ":", "\n", "\t", "if", "data_format", "==", "'NCHW'", ":", "\n", "\t\t", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "c", ",", "h", ",", "w", "]", ")", "\n", "", "else", ":", "\n", "\t\t", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "h", ",", "w", ",", "c", "]", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.resize_nearest_neighbor": [[61, 69], ["models.nchw_to_nhwc", "tensorflow.image.resize_nearest_neighbor", "models.nhwc_to_nchw", "tensorflow.image.resize_nearest_neighbor"], "function", ["home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.nchw_to_nhwc", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.resize_nearest_neighbor", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.nhwc_to_nchw", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.resize_nearest_neighbor"], ["", "def", "resize_nearest_neighbor", "(", "x", ",", "new_size", ",", "data_format", ")", ":", "\n", "\t", "if", "data_format", "==", "'NCHW'", ":", "\n", "\t\t", "x", "=", "nchw_to_nhwc", "(", "x", ")", "\n", "x", "=", "tf", ".", "image", ".", "resize_nearest_neighbor", "(", "x", ",", "new_size", ")", "\n", "x", "=", "nhwc_to_nchw", "(", "x", ")", "\n", "", "else", ":", "\n", "\t\t", "x", "=", "tf", ".", "image", ".", "resize_nearest_neighbor", "(", "x", ",", "new_size", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.upscale": [[70, 73], ["models.get_conv_shape", "models.resize_nearest_neighbor"], "function", ["home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.get_conv_shape", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.resize_nearest_neighbor"], ["", "def", "upscale", "(", "x", ",", "scale", ",", "data_format", ")", ":", "\n", "\t", "_", ",", "h", ",", "w", ",", "_", "=", "get_conv_shape", "(", "x", ",", "data_format", ")", "\n", "return", "resize_nearest_neighbor", "(", "x", ",", "(", "h", "*", "scale", ",", "w", "*", "scale", ")", ",", "data_format", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.conv": [[74, 92], ["tensorflow.reshape", "input.get_shape", "tensorflow.nn.conv2d", "convolve", "tensorflow.split", "tensorflow.split", "tensorflow.concat", "tensorflow.nn.bias_add", "convolve", "zip", "tf.concat.get_shape().as_list", "tf.concat.get_shape"], "function", ["home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.reshape", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.ops.conv2d"], ["", "def", "conv", "(", "input", ",", "kernel", ",", "biases", ",", "k_h", ",", "k_w", ",", "c_o", ",", "s_h", ",", "s_w", ",", "padding", "=", "\"VALID\"", ",", "group", "=", "1", ")", ":", "\n", "\n", "\t", "'''From https://github.com/ethereon/caffe-tensorflow\n\t'''", "\n", "c_i", "=", "input", ".", "get_shape", "(", ")", "[", "-", "1", "]", "\n", "assert", "c_i", "%", "group", "==", "0", "\n", "assert", "c_o", "%", "group", "==", "0", "\n", "convolve", "=", "lambda", "i", ",", "k", ":", "tf", ".", "nn", ".", "conv2d", "(", "i", ",", "k", ",", "[", "1", ",", "s_h", ",", "s_w", ",", "1", "]", ",", "padding", "=", "padding", ")", "\n", "\n", "\n", "if", "group", "==", "1", ":", "\n", "\t\t", "conv", "=", "convolve", "(", "input", ",", "kernel", ")", "\n", "", "else", ":", "\n", "\t\t", "input_groups", "=", "tf", ".", "split", "(", "input", ",", "group", ",", "3", ")", "#tf.split(3, group, input)", "\n", "kernel_groups", "=", "tf", ".", "split", "(", "kernel", ",", "group", ",", "3", ")", "#tf.split(3, group, kernel) ", "\n", "output_groups", "=", "[", "convolve", "(", "i", ",", "k", ")", "for", "i", ",", "k", "in", "zip", "(", "input_groups", ",", "kernel_groups", ")", "]", "\n", "conv", "=", "tf", ".", "concat", "(", "output_groups", ",", "3", ")", "#tf.concat(3, output_groups)", "\n", "", "return", "tf", ".", "reshape", "(", "tf", ".", "nn", ".", "bias_add", "(", "conv", ",", "biases", ")", ",", "[", "-", "1", "]", "+", "conv", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", ":", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.ops.batch_norm.__init__": [[126, 131], ["tensorflow.variable_scope"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "epsilon", "=", "1e-5", ",", "momentum", "=", "0.9", ",", "name", "=", "\"batch_norm\"", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "      ", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.ops.batch_norm.__call__": [[132, 140], ["tensorflow.contrib.layers.batch_norm"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "x", ",", "train", "=", "True", ")", ":", "\n", "    ", "return", "tf", ".", "contrib", ".", "layers", ".", "batch_norm", "(", "x", ",", "\n", "decay", "=", "self", ".", "momentum", ",", "\n", "updates_collections", "=", "None", ",", "\n", "epsilon", "=", "self", ".", "epsilon", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "train", ",", "\n", "scope", "=", "self", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.ops.function_batches": [[33, 42], ["range", "range", "len", "full_output.append", "range", "function", "len"], "function", ["None"], ["def", "function_batches", "(", "function", ",", "input_list", "=", "range", "(", "1000", ")", ",", "slice_size", "=", "100", ")", ":", "\n", "    ", "full_output", "=", "[", "]", "\n", "x_batches", "=", "[", "input_list", "[", "ii", ":", "ii", "+", "slice_size", "]", "\n", "for", "ii", "in", "range", "(", "0", ",", "len", "(", "input_list", ")", ",", "slice_size", ")", "]", "\n", "# if len(input_list) % self.slice_size != 0 :", "\n", "#     x_batches.pop()", "\n", "for", "ii", "in", "range", "(", "len", "(", "x_batches", ")", ")", ":", "\n", "        ", "full_output", ".", "append", "(", "function", "(", "x_batches", "[", "ii", "]", ")", ")", "\n", "", "return", "full_output", "\n", "# a function that applies the function in the argument ( which accepts athe list of inputs ) as batches and returen a list of batched output 7", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.ops.black_box": [[45, 57], ["utils.Blender", "utils.Blender.city_experiment", "utils.Blender.save_image", "utils.Blender.execute", "cv2.imread", "utils.forward_transform", "os.path.join", "cv2.cvtColor().astype", "numpy.array().tolist", "str", "str", "cv2.cvtColor", "numpy.array", "sklearn.cluster"], "function", ["home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.save_image", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.Blender.execute", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.forward_transform"], ["", "def", "black_box", "(", "input_vector", ",", "output_size", "=", "256", ",", "global_step", "=", "0", ",", "frames_path", "=", "None", ",", "cluster", "=", "False", ",", "parent_name", "=", "'car'", ",", "scenario_nb", "=", "0", ")", ":", "\n", "    ", "b", "=", "Blender", "(", "cluster", ",", "'init.py'", ",", "'3d/training_pascal/training.blend'", ")", "\n", "b", ".", "city_experiment", "(", "obj_name", "=", "\"myorigin\"", ",", "vec", "=", "np", ".", "array", "(", "\n", "input_vector", ")", ".", "tolist", "(", ")", ",", "parent_name", "=", "parent_name", ",", "scenario_nb", "=", "scenario_nb", ")", "\n", "b", ".", "save_image", "(", "output_size", ",", "output_size", ",", "\n", "path", "=", "frames_path", ",", "name", "=", "str", "(", "global_step", ")", ")", "\n", "# b.save_file()", "\n", "b", ".", "execute", "(", ")", "\n", "image", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "frames_path", ",", "str", "(", "global_step", ")", "+", "\".jpg\"", ")", ")", "\n", "image", "=", "forward_transform", "(", "cv2", ".", "cvtColor", "(", "\n", "image", ",", "cv2", ".", "COLOR_BGR2RGB", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.ops.black_box_batch": [[59, 71], ["images.append", "ops.black_box", "numpy.array"], "function", ["home.repos.pwc.inspect_result.ajhamdi_SADA.None.ops.black_box"], ["", "def", "black_box_batch", "(", "input_vectors", ",", "output_size", "=", "256", ",", "global_step", "=", "0", ",", "frames_path", "=", "None", ",", "cluster", "=", "False", ",", "parent_name", "=", "'car'", ",", "scenario_nb", "=", "0", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "for", "input_vector", "in", "input_vectors", ":", "\n", "        ", "try", ":", "\n", "            ", "images", ".", "append", "(", "black_box", "(", "np", ".", "array", "(", "input_vector", ")", ",", "output_size", ",", "\n", "global_step", ",", "frames_path", ",", "cluster", ",", "parent_name", ",", "scenario_nb", ")", ")", "\n", "# images.append(black_box(np.array(input_vector),output_size,len(images),frames_path,cluster,parent_name,scenario_nb))", "\n", "\n", "", "except", ":", "\n", "            ", "continue", "\n", "# print(\"&&&&&&&&&&&&&&&&&&&&&\\n\\n\",np.linalg.norm(np.mean(np.array(images) - np.broadcast_to(np.mean(np.array(images),axis=0),np.array(images).shape),axis=2),ord=\"fro\"))", "\n", "", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.ops.normalize_vectors_list": [[73, 81], ["numpy.array", "list", "numpy.broadcast_to", "numpy.broadcast_to", "numpy.broadcast_to"], "function", ["None"], ["", "def", "normalize_vectors_list", "(", "vector_list", ",", "old_max", ",", "old_min", ",", "new_max", ",", "new_min", ")", ":", "\n", "    ", "old_range", "=", "old_max", "-", "old_min", "\n", "new_range", "=", "new_max", "-", "new_min", "\n", "range_ratio", "=", "new_range", "/", "old_range", "\n", "matrix", "=", "np", ".", "array", "(", "vector_list", ")", "\n", "matrix", "=", "np", ".", "broadcast_to", "(", "new_min", ",", "matrix", ".", "shape", ")", "+", "(", "matrix", "-", "np", ".", "broadcast_to", "(", "\n", "old_min", ",", "matrix", ".", "shape", ")", ")", "*", "np", ".", "broadcast_to", "(", "range_ratio", ",", "matrix", ".", "shape", ")", "\n", "return", "list", "(", "matrix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.ops.sample_from_learned_gaussian": [[84, 102], ["sklearn.mixture.GaussianMixture().fit", "numpy.clip", "sklearn.mixture.GaussianMixture", "list", "numpy.array", "mixture.GaussianMixture().fit.sample", "mixture.GaussianMixture().fit.sample", "mixture.GaussianMixture().fit.sample", "len", "sample_list.append"], "function", ["None"], ["", "def", "sample_from_learned_gaussian", "(", "points_to_learn", ",", "n_components", "=", "1", ",", "n_samples", "=", "10", ",", "is_truncate", "=", "True", ",", "is_reject", "=", "False", ",", "min_value", "=", "-", "1", ",", "max_value", "=", "1", ")", ":", "\n", "    ", "gmm", "=", "mixture", ".", "GaussianMixture", "(", "\n", "n_components", "=", "n_components", ",", "covariance_type", "=", "'full'", ",", "max_iter", "=", "50000", ")", ".", "fit", "(", "points_to_learn", ")", "\n", "if", "is_truncate", ":", "\n", "        ", "return", "np", ".", "clip", "(", "gmm", ".", "sample", "(", "n_samples", "=", "n_samples", ")", "[", "0", "]", ",", "min_value", ",", "max_value", ")", "\n", "", "elif", "is_reject", ":", "\n", "        ", "sample_list", "=", "[", "]", "\n", "MAX_ITER", "=", "100000000", "\n", "iteration", "=", "0", "\n", "a", "=", "list", "(", "gmm", ".", "sample", "(", "n_samples", "=", "100", "*", "n_samples", ")", "[", "0", "]", ")", "\n", "while", "len", "(", "sample_list", ")", "<", "n_samples", "and", "iteration", "<", "MAX_ITER", ":", "\n", "            ", "if", "(", "a", "[", "iteration", "]", ">=", "min_value", ")", ".", "all", "(", ")", "and", "(", "a", "[", "iteration", "]", "<=", "max_value", ")", ".", "all", "(", ")", ":", "\n", "                ", "sample_list", ".", "append", "(", "a", "[", "iteration", "]", ")", "\n", "", "iteration", "+=", "1", "\n", "", "return", "np", ".", "array", "(", "sample_list", ")", "\n", "", "else", ":", "\n", "# , gmm.means_, gmm.covariances", "\n", "        ", "return", "gmm", ".", "sample", "(", "n_samples", "=", "n_samples", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.ops.conv_cond_concat": [[141, 147], ["x.get_shape", "y.get_shape", "concat", "tensorflow.ones"], "function", ["None"], ["", "", "def", "conv_cond_concat", "(", "x", ",", "y", ")", ":", "\n", "  ", "\"\"\"Concatenate conditioning vector on feature map axis.\"\"\"", "\n", "x_shapes", "=", "x", ".", "get_shape", "(", ")", "\n", "y_shapes", "=", "y", ".", "get_shape", "(", ")", "\n", "return", "concat", "(", "[", "\n", "x", ",", "y", "*", "tf", ".", "ones", "(", "[", "x_shapes", "[", "0", "]", ",", "x_shapes", "[", "1", "]", ",", "x_shapes", "[", "2", "]", ",", "y_shapes", "[", "3", "]", "]", ")", "]", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.ops.conv2d": [[148, 160], ["tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.nn.conv2d", "tensorflow.get_variable", "tensorflow.reshape", "tensorflow.nn.bias_add", "tf.reshape.get_shape", "tensorflow.truncated_normal_initializer", "tensorflow.constant_initializer", "input_.get_shape"], "function", ["home.repos.pwc.inspect_result.ajhamdi_SADA.None.ops.conv2d", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.reshape"], ["", "def", "conv2d", "(", "input_", ",", "output_dim", ",", "\n", "k_h", "=", "5", ",", "k_w", "=", "5", ",", "d_h", "=", "2", ",", "d_w", "=", "2", ",", "stddev", "=", "0.02", ",", "\n", "name", "=", "\"conv2d\"", ")", ":", "\n", "  ", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "    ", "w", "=", "tf", ".", "get_variable", "(", "'w'", ",", "[", "k_h", ",", "k_w", ",", "input_", ".", "get_shape", "(", ")", "[", "-", "1", "]", ",", "output_dim", "]", ",", "\n", "initializer", "=", "tf", ".", "truncated_normal_initializer", "(", "stddev", "=", "stddev", ")", ")", "\n", "conv", "=", "tf", ".", "nn", ".", "conv2d", "(", "input_", ",", "w", ",", "strides", "=", "[", "1", ",", "d_h", ",", "d_w", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "\n", "biases", "=", "tf", ".", "get_variable", "(", "'biases'", ",", "[", "output_dim", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "conv", "=", "tf", ".", "reshape", "(", "tf", ".", "nn", ".", "bias_add", "(", "conv", ",", "biases", ")", ",", "conv", ".", "get_shape", "(", ")", ")", "\n", "\n", "return", "conv", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.ops.deconv2d": [[161, 185], ["tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.reshape", "tensorflow.nn.conv2d_transpose", "tensorflow.nn.bias_add", "tf.nn.deconv2d.get_shape", "tensorflow.random_normal_initializer", "tensorflow.nn.deconv2d", "tensorflow.constant_initializer", "input_.get_shape"], "function", ["home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.reshape", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.ops.deconv2d"], ["", "", "def", "deconv2d", "(", "input_", ",", "output_shape", ",", "\n", "k_h", "=", "5", ",", "k_w", "=", "5", ",", "d_h", "=", "2", ",", "d_w", "=", "2", ",", "stddev", "=", "0.02", ",", "\n", "name", "=", "\"deconv2d\"", ",", "with_w", "=", "False", ")", ":", "\n", "  ", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "# filter : [height, width, output_channels, in_channels]", "\n", "    ", "w", "=", "tf", ".", "get_variable", "(", "'w'", ",", "[", "k_h", ",", "k_w", ",", "output_shape", "[", "-", "1", "]", ",", "input_", ".", "get_shape", "(", ")", "[", "-", "1", "]", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "stddev", ")", ")", "\n", "\n", "try", ":", "\n", "      ", "deconv", "=", "tf", ".", "nn", ".", "conv2d_transpose", "(", "input_", ",", "w", ",", "output_shape", "=", "output_shape", ",", "\n", "strides", "=", "[", "1", ",", "d_h", ",", "d_w", ",", "1", "]", ")", "\n", "\n", "# Support for verisons of TensorFlow before 0.7.0", "\n", "", "except", "AttributeError", ":", "\n", "      ", "deconv", "=", "tf", ".", "nn", ".", "deconv2d", "(", "input_", ",", "w", ",", "output_shape", "=", "output_shape", ",", "\n", "strides", "=", "[", "1", ",", "d_h", ",", "d_w", ",", "1", "]", ")", "\n", "\n", "", "biases", "=", "tf", ".", "get_variable", "(", "'biases'", ",", "[", "output_shape", "[", "-", "1", "]", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "deconv", "=", "tf", ".", "reshape", "(", "tf", ".", "nn", ".", "bias_add", "(", "deconv", ",", "biases", ")", ",", "deconv", ".", "get_shape", "(", ")", ")", "\n", "\n", "if", "with_w", ":", "\n", "      ", "return", "deconv", ",", "w", ",", "biases", "\n", "", "else", ":", "\n", "      ", "return", "deconv", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.ops.lrelu": [[186, 188], ["tensorflow.maximum"], "function", ["None"], ["", "", "", "def", "lrelu", "(", "x", ",", "leak", "=", "0.2", ",", "name", "=", "\"lrelu\"", ")", ":", "\n", "  ", "return", "tf", ".", "maximum", "(", "x", ",", "leak", "*", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.ops.linear": [[189, 201], ["input_.get_shape().as_list", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "input_.get_shape", "tensorflow.random_normal_initializer", "tensorflow.constant_initializer", "tensorflow.matmul", "tensorflow.matmul"], "function", ["None"], ["", "def", "linear", "(", "input_", ",", "output_size", ",", "scope", "=", "None", ",", "stddev", "=", "0.02", ",", "bias_start", "=", "0.0", ",", "with_w", "=", "False", ")", ":", "\n", "  ", "shape", "=", "input_", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "scope", "or", "\"Linear\"", ")", ":", "\n", "    ", "matrix", "=", "tf", ".", "get_variable", "(", "\"Matrix\"", ",", "[", "shape", "[", "1", "]", ",", "output_size", "]", ",", "tf", ".", "float32", ",", "\n", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "stddev", ")", ")", "\n", "bias", "=", "tf", ".", "get_variable", "(", "\"bias\"", ",", "[", "output_size", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "bias_start", ")", ")", "\n", "if", "with_w", ":", "\n", "      ", "return", "tf", ".", "matmul", "(", "input_", ",", "matrix", ")", "+", "bias", ",", "matrix", ",", "bias", "\n", "", "else", ":", "\n", "      ", "return", "tf", ".", "matmul", "(", "input_", ",", "matrix", ")", "+", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.ops.conv": [[202, 219], ["tensorflow.reshape", "input.get_shape", "tensorflow.nn.conv2d", "convolve", "tensorflow.split", "tensorflow.split", "tensorflow.concat", "tensorflow.nn.bias_add", "convolve", "zip", "tf.concat.get_shape().as_list", "tf.concat.get_shape"], "function", ["home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.reshape", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.ops.conv2d"], ["", "", "", "def", "conv", "(", "input", ",", "kernel", ",", "biases", ",", "k_h", ",", "k_w", ",", "c_o", ",", "s_h", ",", "s_w", ",", "padding", "=", "\"VALID\"", ",", "group", "=", "1", ")", ":", "\n", "    ", "'''From https://github.com/ethereon/caffe-tensorflow\n    '''", "\n", "c_i", "=", "input", ".", "get_shape", "(", ")", "[", "-", "1", "]", "\n", "assert", "c_i", "%", "group", "==", "0", "\n", "assert", "c_o", "%", "group", "==", "0", "\n", "convolve", "=", "lambda", "i", ",", "k", ":", "tf", ".", "nn", ".", "conv2d", "(", "i", ",", "k", ",", "[", "1", ",", "s_h", ",", "s_w", ",", "1", "]", ",", "padding", "=", "padding", ")", "\n", "\n", "\n", "if", "group", "==", "1", ":", "\n", "        ", "conv", "=", "convolve", "(", "input", ",", "kernel", ")", "\n", "", "else", ":", "\n", "        ", "input_groups", "=", "tf", ".", "split", "(", "input", ",", "group", ",", "3", ")", "#tf.split(3, group, input)", "\n", "kernel_groups", "=", "tf", ".", "split", "(", "kernel", ",", "group", ",", "3", ")", "#tf.split(3, group, kernel) ", "\n", "output_groups", "=", "[", "convolve", "(", "i", ",", "k", ")", "for", "i", ",", "k", "in", "zip", "(", "input_groups", ",", "kernel_groups", ")", "]", "\n", "conv", "=", "tf", ".", "concat", "(", "output_groups", ",", "3", ")", "#tf.concat(3, output_groups)", "\n", "", "return", "tf", ".", "reshape", "(", "tf", ".", "nn", ".", "bias_add", "(", "conv", ",", "biases", ")", ",", "[", "-", "1", "]", "+", "conv", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.ops.mysigmoid": [[220, 222], ["numpy.exp"], "function", ["None"], ["", "def", "mysigmoid", "(", "x", ",", "mean", "=", "0", ",", "bw", "=", "1", ")", ":", "\n", "  ", "return", "1", "/", "(", "1", "+", "np", ".", "exp", "(", "-", "(", "x", "-", "mean", ")", "/", "bw", ")", ")", "\n", "", "def", "sigmoid_hamming", "(", "x", ",", "mean", "=", "0", ",", "bw", "=", "1", ",", "boundary", "=", "14000", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.ops.sigmoid_hamming": [[222, 226], ["numpy.hanning", "numpy.exp"], "function", ["None"], ["", "def", "sigmoid_hamming", "(", "x", ",", "mean", "=", "0", ",", "bw", "=", "1", ",", "boundary", "=", "14000", ")", ":", "\n", "  ", "z", "=", "np", ".", "hanning", "(", "boundary", ")", "\n", "zz", "=", "1", "/", "(", "1", "+", "np", ".", "exp", "(", "-", "(", "x", "-", "mean", ")", "/", "bw", ")", ")", "\n", "return", "5", "*", "z", "[", "x", "]", "*", "zz", "\n", "", "def", "square_signal", "(", "x", ",", "bw", "=", "20", ",", "duty", "=", "0.5", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.ops.square_signal": [[226, 229], ["kk.astype", "numpy.mod"], "function", ["None"], ["", "def", "square_signal", "(", "x", ",", "bw", "=", "20", ",", "duty", "=", "0.5", ")", ":", "\n", "  ", "kk", "=", "np", ".", "mod", "(", "x", ",", "bw", ")", "<", "duty", "*", "bw", "\n", "return", "kk", ".", "astype", "(", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.main.main": [[76, 101], ["os.getcwd", "robustness.BlackBoxOptimizer", "robustness.BlackBoxOptimizer.generate_distribution", "robustness.BlackBoxOptimizer.learn_bbgan", "robustness.BlackBoxOptimizer.learn_gaussian"], "function", ["home.repos.pwc.inspect_result.ajhamdi_SADA.None.robustness.BlackBoxOptimizer.generate_distribution", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.robustness.BlackBoxOptimizer.learn_bbgan", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.robustness.BlackBoxOptimizer.learn_gaussian"], ["def", "main", "(", "argv", "=", "None", ")", ":", "\n", "    ", "base_path", "=", "os", ".", "getcwd", "(", ")", "\n", "# if FLAGS.is_cluster and FLAGS.is_randomize :", "\n", "#     randomize_setup(flags=FLAGS)", "\n", "# if FLAGS.is_cluster:", "\n", "#     pass", "\n", "\n", "bbexp", "=", "BlackBoxOptimizer", "(", "FLAGS", "=", "FLAGS", ",", "base_path", "=", "base_path", ")", "\n", "\n", "if", "FLAGS", ".", "is_gendist", ":", "\n", "            ", "bbexp", ".", "generate_distribution", "(", ")", "\n", "# elif FLAGS.is_genset:", "\n", "#         bbexp.generate_set()", "\n", "# elif FLAGS.is_genknn:", "\n", "#         bbexp.generated_nearest_neighbor()", "\n", "\n", "", "elif", "FLAGS", ".", "exp_type", "==", "\"Adversarial\"", ":", "\n", "        ", "if", "FLAGS", ".", "is_train", "or", "FLAGS", ".", "cont_train", ":", "\n", "# if not FLAGS.is_selfdrive:", "\n", "            ", "bbexp", ".", "learn_bbgan", "(", ")", "\n", "# else :", "\n", "#     bbexp.learn_selfdrive()", "\n", "", "", "elif", "FLAGS", ".", "exp_type", "==", "\"Gaussian\"", ":", "\n", "        ", "FLAGS", ".", "is_gaussian", "=", "True", "\n", "bbexp", ".", "learn_gaussian", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.robustness.BlackBoxOptimizer.__init__": [[46, 120], ["robustness.BlackBoxOptimizer.fix_paramters_to_scenario", "robustness.BlackBoxOptimizer.flag_values_dict().items", "utils.prepare_config_dict", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "utils.load_dataset_names", "utils.load_dataset_names", "utils.match_two_dictionaries", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "tensorflow.GPUOptions", "setattr", "robustness.BlackBoxOptimizer.flag_values_dict", "os.path.join", "utils.check_folder", "os.path.join", "os.path.join", "utils.check_folder", "utils.check_folder", "os.path.join", "os.path.join", "str", "str", "str", "str", "str", "str", "tensorflow.gfile.MakeDirs", "shutil.rmtree", "tensorflow.gfile.MakeDirs", "tensorflow.gfile.Exists", "tensorflow.gfile.MakeDirs", "tensorflow.gfile.MakeDirs", "open", "robustness.BlackBoxOptimizer.flag_values_dict", "list", "tensorflow.gfile.Exists", "tensorflow.gfile.Exists", "os.path.join", "open", "str", "range", "list", "os.path.join", "range"], "methods", ["home.repos.pwc.inspect_result.ajhamdi_SADA.None.robustness.BlackBoxOptimizer.fix_paramters_to_scenario", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.prepare_config_dict", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.load_dataset_names", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.load_dataset_names", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.match_two_dictionaries", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.check_folder", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.check_folder", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.check_folder"], ["def", "__init__", "(", "self", ",", "FLAGS", "=", "None", ",", "base_path", "=", "None", ")", ":", "\n", "        ", "FLAGS", "=", "self", ".", "fix_paramters_to_scenario", "(", "FLAGS", ")", "\n", "for", "k", ",", "v", "in", "FLAGS", ".", "flag_values_dict", "(", ")", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "k", ",", "v", ")", "\n", "", "ommit_list", "=", "[", "'exp_type'", ",", "'weights_file'", ",", "'h'", ",", "'help'", ",", "'helpfull'", ",", "'helpshort'", "]", "\n", "self", ".", "config_dict", "=", "prepare_config_dict", "(", "FLAGS", ".", "flag_values_dict", "(", ")", ",", "ommit_list", "=", "ommit_list", ")", "\n", "\n", "\n", "self", ".", "frames_path", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "\"frames\"", ")", "\n", "self", ".", "generated_path", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "\"generated\"", ")", "\n", "self", ".", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "\"checkpoint\"", ")", "\n", "self", ".", "detector_path", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "\"detectors\"", ")", "\n", "# if not FLAGS.is_selfdrive:", "\n", "#     from detectors.yolo_v3 import yolo_v3, load_weights, detections_boxes, non_max_suppression", "\n", "# print(\"THe VALUE....  \" , self.solution_learning_rate  / self.loss_mormalization )", "\n", "if", "FLAGS", ".", "is_genknn", ":", "\n", "            ", "self", ".", "frames_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "frames_path", ",", "\"KNN_{}\"", ".", "format", "(", "str", "(", "self", ".", "exp_no", ")", ")", ")", "\n", "check_folder", "(", "self", ".", "frames_path", ")", "\n", "self", ".", "frames_path_gen", "=", "os", ".", "path", ".", "join", "(", "self", ".", "frames_path", ",", "\"gen\"", ")", "\n", "self", ".", "frames_path_knn", "=", "os", ".", "path", ".", "join", "(", "self", ".", "frames_path", ",", "\"knn\"", ")", "\n", "check_folder", "(", "self", ".", "frames_path_gen", ")", ";", "check_folder", "(", "self", ".", "frames_path_knn", ")", "\n", "\n", "", "self", ".", "coco_classes", "=", "load_dataset_names", "(", "os", ".", "path", ".", "join", "(", "self", ".", "detector_path", ",", "\"coco.names\"", ")", ")", "\n", "self", ".", "pascal_classes", "=", "load_dataset_names", "(", "os", ".", "path", ".", "join", "(", "self", ".", "detector_path", ",", "\"pascal.names\"", ")", ")", "\n", "self", ".", "PASCAL_TO_COCO", "=", "match_two_dictionaries", "(", "self", ".", "pascal_classes", ",", "self", ".", "coco_classes", ")", "\n", "self", ".", "pascal_list", "=", "[", "'aeroplane'", ",", "'bench'", ",", "'bicycle'", ",", "'boat'", ",", "'bottle'", ",", "'bus'", ",", "'car'", ",", "'chair'", ",", "'diningtable'", ",", "'motorbike'", ",", "'train'", ",", "'truck'", "]", "\n", "if", "self", ".", "scenario_nb", "==", "0", ":", "\n", "# self.paramters_list = [\"camera distance to object\"  ,\"Camera azimuth(-180,180)\" ,\"camera pitch (0,50)\" ,\"light azimth wrt camera(-180,180)\" , \"light pitch (0,90)\",", "\n", "#  \"texture R-channel\",\"texture G-channel\",\"texture B-channel\"]", "\n", "            ", "self", ".", "paramters_list", "=", "[", "'cameraDistanceToObject'", ",", "'CameraAzimuth__180_180_'", ",", "'cameraPitch_0_50_'", ",", "'lightAzimthWrtCamera__180_180_'", ",", "'lightPitch_0_90_'", ",", "'textureR_channel'", ",", "'textureG_channel'", ",", "'textureB_channel'", "]", "\n", "", "elif", "self", ".", "scenario_nb", "in", "list", "(", "range", "(", "1", ",", "6", ")", ")", ":", "\n", "            ", "self", ".", "paramters_list", "=", "[", "\"Camera azimuth(-180,180)\"", ",", "\"camera pitch (0,50)\"", ",", "\"light azimth wrt camera(-180,180)\"", ",", "\"light pitch (0,90)\"", "]", "\n", "", "elif", "self", ".", "scenario_nb", "in", "list", "(", "range", "(", "6", ",", "11", ")", ")", ":", "\n", "            ", "self", ".", "paramters_list", "=", "[", "\"Camera azimuth(-180,180)\"", ",", "\"camera pitch (0,50)\"", ",", "\"occluder horizontal shift\"", "]", "\n", "\n", "", "self", ".", "generated_frames_train_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "generated_path", ",", "\"train_%d\"", "%", "(", "self", ".", "dataset_nb", ")", ",", "str", "(", "self", ".", "scenario_nb", ")", ",", "self", ".", "pascal_list", "[", "self", ".", "class_nb", "]", ")", "\n", "self", ".", "generated_frames_valid_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "generated_path", ",", "\"valid_%d\"", "%", "(", "self", ".", "dataset_nb", ")", ",", "str", "(", "self", ".", "scenario_nb", ")", ",", "self", ".", "pascal_list", "[", "self", ".", "class_nb", "]", ")", "\n", "self", ".", "generated_frames_test_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "generated_path", ",", "self", ".", "exp_type", ",", "\"test_%d\"", "%", "(", "self", ".", "dataset_nb", ")", ",", "str", "(", "self", ".", "scenario_nb", ")", ",", "self", ".", "pascal_list", "[", "self", ".", "class_nb", "]", ",", "str", "(", "self", ".", "exp_no", ")", ")", "\n", "self", ".", "train_log_dir", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "'logs'", ",", "self", ".", "exp_type", ",", "\"data_%d\"", "%", "(", "self", ".", "dataset_nb", ")", ",", "str", "(", "self", ".", "scenario_nb", ")", ",", "self", ".", "pascal_list", "[", "self", ".", "class_nb", "]", ",", "str", "(", "self", ".", "exp_no", ")", ")", "\n", "if", "not", "tf", ".", "gfile", ".", "Exists", "(", "self", ".", "train_log_dir", ")", "and", "not", "self", ".", "is_gendist", ":", "\n", "            ", "tf", ".", "gfile", ".", "MakeDirs", "(", "self", ".", "train_log_dir", ")", "\n", "", "else", ":", "\n", "            ", "shutil", ".", "rmtree", "(", "self", ".", "train_log_dir", ",", "ignore_errors", "=", "True", ")", "\n", "tf", ".", "gfile", ".", "MakeDirs", "(", "self", ".", "train_log_dir", ")", "\n", "", "if", "not", "tf", ".", "gfile", ".", "Exists", "(", "self", ".", "generated_frames_train_dir", ")", ":", "\n", "            ", "tf", ".", "gfile", ".", "MakeDirs", "(", "self", ".", "generated_frames_train_dir", ")", "\n", "", "if", "not", "tf", ".", "gfile", ".", "Exists", "(", "self", ".", "generated_frames_test_dir", ")", "and", "not", "self", ".", "is_gendist", ":", "\n", "            ", "tf", ".", "gfile", ".", "MakeDirs", "(", "self", ".", "generated_frames_test_dir", ")", "\n", "\n", "\n", "", "self", ".", "ALLOW_LOGGING", "=", "True", "\n", "\n", "self", ".", "retained_size", "=", "FLAGS", ".", "retained_size", "# int(0.5*self.K*self.induced_size)", "\n", "self", ".", "gan_regulaizer", "=", "0.0005", "\n", "self", ".", "beta1", "=", "0.5", "\n", "self", ".", "reg_hyp_param", "=", "10.0", "\n", "self", ".", "gamma", "=", "1", "\n", "self", ".", "OUT_SIZE", "=", "340", "\n", "self", ".", "generation_bound", "=", "0.01", "\n", "\n", "\n", "self", ".", "gan_init_variance", "=", "0.01", "\n", "self", ".", "conf_threshold", "=", "0.05", "\n", "self", ".", "SUCCESS_THRESHOLD", "=", "0.3", "\n", "self", ".", "iou_threshold", "=", "0.4", "\n", "self", ".", "weights_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "detector_path", ",", "FLAGS", ".", "weights_file", ")", "\n", "self", ".", "gpu_options", "=", "tf", ".", "GPUOptions", "(", "per_process_gpu_memory_fraction", "=", "0.7", ",", "allow_growth", "=", "True", ")", "\n", "self", ".", "X_bank", "=", "[", "]", ";", "self", ".", "Y_bank", "=", "[", "]", "\n", "# self.X = np.random.random(size=(self.N,self.nb_parameters)).astype(np.float32)", "\n", "# self.Y = np.random.random(size=(self.N,self.z_dim)).astype(np.float32)", "\n", "if", "self", ".", "is_train", ":", "\n", "            ", "self", ".", "logger", "=", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "train_log_dir", ",", "\"message.txt\"", ")", ",", "\"w\"", ")", "\n", "", "elif", "self", ".", "is_gendist", ":", "\n", "            ", "self", ".", "logger", "=", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "generated_frames_train_dir", ",", "\"message.txt\"", ")", ",", "\"w\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.robustness.BlackBoxOptimizer.fix_paramters_to_scenario": [[122, 139], ["numpy.random.randint", "list", "range", "list", "range"], "methods", ["None"], ["", "", "def", "fix_paramters_to_scenario", "(", "self", ",", "FLAGS", ")", ":", "\n", "        ", "if", "FLAGS", ".", "is_varsteps", ":", "\n", "            ", "steps_list", "=", "[", "400", ",", "420", ",", "400", ",", "200", ",", "450", ",", "250", ",", "550", ",", "400", ",", "420", ",", "480", "]", "\n", "", "else", ":", "\n", "            ", "steps_list", "=", "10", "*", "[", "FLAGS", ".", "nb_steps", "]", "\n", "", "FLAGS", ".", "exp_no", "=", "np", ".", "random", ".", "randint", "(", "100000", ",", "1000000", ")", "\n", "if", "FLAGS", ".", "scenario_nb", "in", "list", "(", "range", "(", "1", ",", "6", ")", ")", ":", "\n", "            ", "FLAGS", ".", "nb_parameters", "=", "4", "\n", "FLAGS", ".", "nb_steps", "=", "steps_list", "[", "FLAGS", ".", "scenario_nb", "-", "1", "]", "\n", "", "elif", "FLAGS", ".", "scenario_nb", "in", "list", "(", "range", "(", "6", ",", "11", ")", ")", ":", "\n", "            ", "FLAGS", ".", "nb_parameters", "=", "3", "\n", "FLAGS", ".", "nb_steps", "=", "steps_list", "[", "FLAGS", ".", "scenario_nb", "-", "1", "]", "\n", "", "if", "FLAGS", ".", "scenario_nb", "in", "[", "1", ",", "3", ",", "6", ",", "8", "]", ":", "\n", "            ", "FLAGS", ".", "class_nb", "=", "6", "\n", "", "elif", "FLAGS", ".", "scenario_nb", "in", "[", "2", ",", "4", ",", "5", ",", "7", ",", "9", ",", "10", "]", ":", "\n", "            ", "FLAGS", ".", "class_nb", "=", "9", "\n", "", "return", "FLAGS", "\n", "", "def", "generate_distribution", "(", "self", ",", "distribution_type", "=", "\"general\"", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.robustness.BlackBoxOptimizer.generate_distribution": [[139, 170], ["numpy.array", "numpy.array", "range", "robustness.BlackBoxOptimizer.logger.write", "all_Xs.append", "open", "pickle.dump", "numpy.random.uniform", "ops.black_box", "os.path.join", "len", "numpy.random.uniform", "open", "pickle.dump", "numpy.zeros", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.ajhamdi_SADA.None.ops.black_box"], ["", "def", "generate_distribution", "(", "self", ",", "distribution_type", "=", "\"general\"", ")", ":", "\n", "        ", "\"\"\"\n        gerberate distribution of the parameters we have of size  self.gendist_size\n\n        \"\"\"", "\n", "all_Xs", "=", "[", "]", "\n", "saved_dict", "=", "{", "}", "\n", "# all_Ys = []", "\n", "vec", "=", "np", ".", "array", "(", "[", "-", "0.95", ",", "-", "0.95", ",", "0.8", ",", "0", ",", "0", ",", "0", "]", ")", "\n", "focus", "=", "np", ".", "array", "(", "[", "self", ".", "generation_bound", ",", "self", ".", "generation_bound", ",", "self", ".", "generation_bound", ",", "0.9", ",", "0.9", ",", "0.9", "]", ")", "\n", "for", "gen", "in", "range", "(", "self", ".", "gendist_size", ")", ":", "\n", "            ", "if", "distribution_type", "is", "\"specific\"", ":", "\n", "                ", "x", "=", "np", ".", "random", ".", "uniform", "(", "vec", "-", "focus", ",", "vec", "+", "focus", ",", "self", ".", "nb_parameters", ")", "\n", "", "elif", "distribution_type", "is", "\"general\"", ":", "\n", "                ", "x", "=", "np", ".", "random", ".", "uniform", "(", "-", "1", ",", "1", ",", "self", ".", "nb_parameters", ")", "\n", "", "elif", "distribution_type", "is", "\"zeros\"", ":", "\n", "                ", "x", "=", "np", ".", "zeros", "(", "self", ".", "nb_parameters", ")", "\n", "", "try", ":", "\n", "                ", "y", "=", "black_box", "(", "x", ",", "output_size", "=", "self", ".", "OUT_SIZE", ",", "global_step", "=", "gen", ",", "frames_path", "=", "self", ".", "generated_frames_train_dir", ",", "cluster", "=", "self", ".", "is_cluster", ",", "parent_name", "=", "self", ".", "pascal_list", "[", "self", ".", "class_nb", "]", ",", "scenario_nb", "=", "self", ".", "scenario_nb", ")", "\n", "", "except", ":", "\n", "                ", "continue", "\n", "", "all_Xs", ".", "append", "(", "x", ")", "\n", "# all_Ys.append(y)", "\n", "if", "(", "gen", "%", "10", ")", "==", "0", ":", "\n", "                ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "generated_frames_train_dir", ",", "\"save.pkl\"", ")", ",", "'wb'", ")", "as", "fp", ":", "\n", "                    ", "saved_dict", "=", "{", "'x'", ":", "all_Xs", "}", "\n", "cPickle", ".", "dump", "(", "saved_dict", ",", "fp", ")", "\n", "", "", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "generated_frames_train_dir", ",", "\"save.pkl\"", ")", ",", "'wb'", ")", "as", "fp", ":", "\n", "            ", "saved_dict", "=", "{", "'x'", ":", "all_Xs", "}", "\n", "cPickle", ".", "dump", "(", "saved_dict", ",", "fp", ")", "\n", "", "self", ".", "logger", ".", "write", "(", "\"The number of generated images : %d\"", "%", "(", "len", "(", "all_Xs", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.robustness.BlackBoxOptimizer.generated_nearest_neighbor": [[186, 224], ["os.path.join", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "scipy.spatial.KDTree", "scipy.spatial.KDTree", "scipy.spatial.KDTree", "print", "enumerate", "pandas.DataFrame", "pandas.DataFrame", "pandas.DataFrame.to_csv", "os.path.join", "numpy.array", "open", "numpy.array", "ops.black_box", "scipy.spatial.KDTree.query", "ops.black_box", "numpy.linalg.norm", "all_gen_indx.append", "all_knn_indx.append", "all_knn_param_distance.append", "all_knn_image_distance.append", "os.path.join", "os.path.join", "range", "range", "numpy.array", "numpy.array", "str", "list", "list", "str", "str", "range", "str", "range"], "methods", ["home.repos.pwc.inspect_result.ajhamdi_SADA.None.ops.black_box", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.ops.black_box"], ["", "def", "generated_nearest_neighbor", "(", "self", ")", ":", "\n", "        ", "self", ".", "nb_parameters", "=", "8", "\n", "self", ".", "best_exp_nb_dict", "=", "{", "'aeroplane'", ":", "47696", ",", "'bench'", ":", "33638", ",", "'bicycle'", ":", "38004", ",", "'boat'", ":", "76661", ",", "'bottle'", ":", "67537", ",", "'bus'", ":", "48619", ",", "'car'", ":", "80804", ",", "'chair'", ":", "71567", ",", "'diningtable'", ":", "21909", ",", "'motorbike'", ":", "39234", ",", "'train'", ":", "63706", ",", "'truck'", ":", "69093", "}", "\n", "self", ".", "best_exp_no", "=", "self", ".", "best_exp_nb_dict", "[", "self", ".", "pascal_list", "[", "self", ".", "class_nb", "]", "]", "\n", "self", ".", "generate_dir", "=", "os", ".", "path", ".", "join", "(", "\"\"", ")", "\n", "self", ".", "paramters_list_gen", "=", "[", "'cameraDistanceToObject'", ",", "'CameraAzimuth__180_180_'", ",", "'cameraPitch_0_50_'", ",", "'lightAzimthWrtCamera__180_180_'", ",", "'lightPitch_0_90_'", ",", "'textureR_channel'", ",", "'textureG_channel'", ",", "'textureB_channel'", "]", "\n", "self", ".", "paramters_list_all", "=", "[", "\"camera distance to object\"", ",", "\"Camera azimuth(-180,180)\"", ",", "\"camera pitch (0,50)\"", ",", "\"light azimth wrt camera(-180,180)\"", ",", "\"light pitch (0,90)\"", ",", "\"texture R-channel\"", ",", "\"texture G-channel\"", ",", "\"texture B-channel\"", "]", "\n", "all_params", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "self", ".", "generated_path", ",", "\"all_params\"", ",", "\"class_{}.csv\"", ".", "format", "(", "str", "(", "self", ".", "class_nb", ")", ")", ")", ")", "\n", "\n", "all_params_list", "=", "np", ".", "array", "(", "[", "list", "(", "all_params", "[", "self", ".", "paramters_list_all", "[", "param", "]", "]", ")", "for", "param", "in", "range", "(", "self", ".", "nb_parameters", ")", "]", ")", ".", "T", "\n", "generated_parms", "=", "pd", ".", "read_csv", "(", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "generated_path", ",", "\"requested_params\"", ",", "\"{}\"", ".", "format", "(", "\n", "str", "(", "self", ".", "best_exp_no", ")", ")", ",", "\"test_params.csv\"", ")", ",", "'rU'", ")", ",", "encoding", "=", "'utf-8'", ",", "engine", "=", "'c'", ")", "\n", "generated_parms_list", "=", "np", ".", "array", "(", "\n", "[", "list", "(", "generated_parms", "[", "self", ".", "paramters_list_gen", "[", "param", "]", "]", ")", "for", "param", "in", "range", "(", "self", ".", "nb_parameters", ")", "]", ")", ".", "T", "\n", "self", ".", "X_all", "=", "[", "all_params_list", "[", "ii", ",", ":", "]", "for", "ii", "in", "range", "(", "all_params_list", ".", "shape", "[", "0", "]", ")", "]", "\n", "tree", "=", "spatial", ".", "KDTree", "(", "self", ".", "X_all", ")", "\n", "self", ".", "X_generated", "=", "[", "generated_parms_list", "[", "ii", ",", ":", "]", "\n", "for", "ii", "in", "range", "(", "generated_parms_list", ".", "shape", "[", "0", "]", ")", "]", "\n", "result_dict", "=", "{", "}", ";", "all_gen_indx", "=", "[", "]", ";", "all_knn_indx", "=", "[", "]", ";", "all_knn_param_distance", "=", "[", "]", ";", "all_knn_image_distance", "=", "[", "]", "\n", "print", "(", "\"start generating NN\"", ")", "\n", "for", "ii", ",", "param", "in", "enumerate", "(", "self", ".", "X_generated", ")", ":", "\n", "            ", "gen_image", "=", "black_box", "(", "np", ".", "array", "(", "param", ")", ",", "output_size", "=", "self", ".", "OUT_SIZE", ",", "global_step", "=", "ii", ",", "frames_path", "=", "self", ".", "frames_path_gen", ",", "cluster", "=", "self", ".", "is_cluster", ",", "parent_name", "=", "self", ".", "pascal_list", "[", "self", ".", "class_nb", "]", ",", "scenario_nb", "=", "self", ".", "scenario_nb", ")", "\n", "# print(\"@@@@ \", np.max(np.max(np.max(gen_image))),np.min(np.min(np.min(gen_image))) )", "\n", "# raise Exception(\"HHHH\")", "\n", "param_distance", ",", "target_indx", "=", "tree", ".", "query", "(", "param", ")", "\n", "nearest_param", "=", "self", ".", "X_all", "[", "target_indx", "]", "\n", "nearest_image", "=", "black_box", "(", "np", ".", "array", "(", "nearest_param", ")", ",", "output_size", "=", "self", ".", "OUT_SIZE", ",", "global_step", "=", "ii", ",", "frames_path", "=", "self", ".", "frames_path_knn", ",", "cluster", "=", "self", ".", "is_cluster", ",", "parent_name", "=", "self", ".", "pascal_list", "[", "self", ".", "class_nb", "]", ",", "scenario_nb", "=", "self", ".", "scenario_nb", ")", "\n", "image_distance", "=", "np", ".", "linalg", ".", "norm", "(", "nearest_image", "-", "gen_image", ")", "\n", "\n", "all_gen_indx", ".", "append", "(", "ii", ")", "\n", "all_knn_indx", ".", "append", "(", "target_indx", ")", "\n", "all_knn_param_distance", ".", "append", "(", "param_distance", ")", "\n", "all_knn_image_distance", ".", "append", "(", "image_distance", ")", "\n", "\n", "", "result_dict", "=", "{", "\"gen_image_nb\"", ":", "all_gen_indx", ",", "\"neigbor_nb\"", ":", "all_knn_indx", ",", "\"pram_distance\"", ":", "all_knn_param_distance", ",", "\"img_distance\"", ":", "all_knn_image_distance", "}", "\n", "result_df", "=", "pd", ".", "DataFrame", "(", "result_dict", ")", "\n", "result_df", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "self", ".", "generated_path", ",", "\"requested_params\"", ",", "\"{}\"", ".", "format", "(", "\n", "str", "(", "self", ".", "best_exp_no", ")", ")", ",", "\"test_params_KNN_{}.csv\"", ".", "format", "(", "str", "(", "self", ".", "exp_no", ")", ")", ")", ",", "sep", "=", "','", ",", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.robustness.BlackBoxOptimizer.learn_bbgan": [[225, 241], ["utils.my_read_images", "robustness.BlackBoxOptimizer.all_Ys.copy", "range", "open", "pickle.load", "len", "len", "print", "len", "len", "robustness.BlackBoxOptimizer.train_bbgan", "os.path.join", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.my_read_images", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.robustness.BlackBoxOptimizer.train_bbgan"], ["", "def", "learn_bbgan", "(", "self", ",", "random_type", "=", "\"uniform\"", ")", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "generated_frames_train_dir", ",", "\"save.pkl\"", ")", ",", "'rb'", ")", "as", "fp", ":", "\n", "            ", "saved_dict", "=", "cPickle", ".", "load", "(", "fp", ")", "\n", "", "self", ".", "all_Xs", "=", "saved_dict", "[", "\"x\"", "]", "\n", "self", ".", "all_Ys", ",", "missing_indices", "=", "my_read_images", "(", "self", ".", "generated_frames_train_dir", ",", "self", ".", "OUT_SIZE", ",", "self", ".", "OUT_SIZE", ",", "expected_number", "=", "len", "(", "self", ".", "all_Xs", ")", ",", "extension", "=", "'jpg'", ",", "d_type", "=", "np", ".", "float32", ",", "normalize", "=", "True", ")", "\n", "if", "len", "(", "self", ".", "all_Ys", ")", "!=", "len", "(", "self", ".", "all_Xs", ")", ":", "\n", "            ", "print", "(", "\"@@@@@@@@@@@\"", ",", "len", "(", "self", ".", "all_Xs", ")", ")", "\n", "for", "ii", "in", "missing_indices", ":", "\n", "                ", "del", "self", ".", "all_Xs", "[", "ii", "]", "\n", "", "", "if", "len", "(", "self", ".", "all_Ys", ")", "!=", "len", "(", "self", ".", "all_Xs", ")", ":", "\n", "            ", "self", ".", "all_Ys", "=", "self", ".", "all_Ys", "[", "0", ":", "len", "(", "self", ".", "all_Xs", ")", "]", "\n", "# raise ValueError(\"some images were not read properly ... the corrsponding Xs are not correct\")", "\n", "\n", "", "self", ".", "retained_Ys", "=", "self", ".", "all_Ys", ".", "copy", "(", ")", "\n", "for", "self", ".", "evolve_step", "in", "range", "(", "self", ".", "evolution_nb", ")", ":", "\n", "            ", "self", ".", "train_bbgan", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.robustness.BlackBoxOptimizer.train_bbgan": [[243, 383], ["tensorflow.Graph().as_default", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_mean", "tensorflow.placeholder", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "robustness.BlackBoxOptimizer.define_metrics", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.train.Saver", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.Session", "tensorflow.summary.FileWriter", "tensorflow.global_variables_initializer().run", "robustness.BlackBoxOptimizer.sess.run", "robustness.BlackBoxOptimizer.validating_bbgan", "robustness.BlackBoxOptimizer.saver.save", "robustness.BlackBoxOptimizer.register_metrics", "tensorflow.to_float", "tensorflow.constant", "tensorflow.device", "detectors.yolo_v3.detections_boxes", "tensorflow.device", "tensorflow.reduce_mean", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "slim.losses.get_regularization_losses", "print", "robustness.BlackBoxOptimizer.saver.restore", "utils.sample_batch", "numpy.concatenate", "flip().tolist", "robustness.BlackBoxOptimizer.visualize_bbgan", "utils.sample_batch", "tensorflow.Graph", "tensorflow.count_nonzero", "float", "tensorflow.nn.moments", "tensorflow.nn.moments", "tensorflow.variable_scope", "detectors.yolo_v3.yolo_v3", "detectors.yolo_v3.load_weights", "slim.arg_scope", "models.generator_ann", "models.discrminator_ann", "models.discrminator_ann", "tensorflow.reduce_mean", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer", "tensorflow.ConfigProto", "tensorflow.global_variables_initializer", "time.time", "range", "robustness.BlackBoxOptimizer.saver.restore", "robustness.BlackBoxOptimizer.validating_bbgan", "os.path.join", "tensorflow.less", "len", "tensorflow.global_variables", "tensorflow.losses.compute_weighted_loss", "tensorflow.zeros_like", "tensorflow.ones_like", "os.path.join", "range", "robustness.BlackBoxOptimizer.sess.run().reshape", "flip", "list", "list", "list", "print", "numpy.random.normal", "robustness.BlackBoxOptimizer.sess.run", "robustness.BlackBoxOptimizer.sess.run", "robustness.BlackBoxOptimizer.sess.run", "robustness.BlackBoxOptimizer.writer.add_summary", "robustness.BlackBoxOptimizer.logger.write", "robustness.BlackBoxOptimizer.visualize_bbgan", "tensorflow.nn.moments", "tensorflow.truncated_normal_initializer", "slim.l2_regularizer", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.ones_like", "len", "range", "numpy.argsort", "list", "numpy.zeros", "robustness.BlackBoxOptimizer.inducer_bbgan", "utils.sample_batch", "robustness.BlackBoxOptimizer.detector_agent().reshape", "robustness.BlackBoxOptimizer.validating_bbgan", "robustness.BlackBoxOptimizer.saver.save", "robustness.BlackBoxOptimizer.logger.write", "os.path.join", "robustness.BlackBoxOptimizer.test_X.tolist", "robustness.BlackBoxOptimizer.sess.run", "len", "robustness.BlackBoxOptimizer.visualize_bbgan", "tensorflow.ones_like", "robustness.BlackBoxOptimizer.detector_agent", "numpy.array", "os.path.join", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.reshape", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.reshape", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.robustness.BlackBoxOptimizer.define_metrics", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.robustness.BlackBoxOptimizer.validating_bbgan", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.robustness.BlackBoxOptimizer.register_metrics", "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3.detections_boxes", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.sample_batch", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.robustness.BlackBoxOptimizer.visualize_bbgan", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.sample_batch", "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3.yolo_v3", "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3.load_weights", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.generator_ann", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.discrminator_ann", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.discrminator_ann", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.robustness.BlackBoxOptimizer.validating_bbgan", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.reshape", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.robustness.BlackBoxOptimizer.visualize_bbgan", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.robustness.BlackBoxOptimizer.inducer_bbgan", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.sample_batch", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.reshape", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.robustness.BlackBoxOptimizer.validating_bbgan", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.robustness.BlackBoxOptimizer.visualize_bbgan", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.robustness.BlackBoxOptimizer.detector_agent"], ["", "", "def", "train_bbgan", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "Graph", "(", ")", ".", "as_default", "(", ")", "as", "self", ".", "g", ":", "\n", "            ", "self", ".", "z", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "self", ".", "z_dim", "]", ")", "\n", "self", ".", "x_ind", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "self", ".", "nb_parameters", "]", ")", "\n", "self", ".", "oracle_labels", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "self", ".", "OUT_SIZE", ",", "self", ".", "OUT_SIZE", ",", "3", "]", ")", "\n", "self", ".", "oracle_scores", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "]", ")", "\n", "self", ".", "success_rate", "=", "tf", ".", "to_float", "(", "tf", ".", "count_nonzero", "(", "tf", ".", "less", "(", "self", ".", "oracle_scores", ",", "self", ".", "SUCCESS_THRESHOLD", ")", ")", ")", "/", "tf", ".", "constant", "(", "float", "(", "self", ".", "valid_size", ")", ")", "\n", "self", ".", "score_mean", "=", "tf", ".", "reshape", "(", "tf", ".", "nn", ".", "moments", "(", "self", ".", "oracle_scores", ",", "axes", "=", "0", ")", "[", "0", "]", ",", "[", "]", ")", "\n", "self", ".", "input_variance", "=", "tf", ".", "reshape", "(", "tf", ".", "nn", ".", "moments", "(", "tf", ".", "nn", ".", "moments", "(", "self", ".", "x_ind", ",", "axes", "=", "0", ")", "[", "1", "]", ",", "axes", "=", "0", ")", "[", "0", "]", ",", "[", "]", ")", "\n", "self", ".", "focal_weights", "=", "self", ".", "oracle_scores", "**", "self", ".", "gamma", "\n", "self", ".", "focal_weights_avg", "=", "tf", ".", "reduce_mean", "(", "self", ".", "focal_weights", ")", "\n", "self", ".", "y", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "self", ".", "OUT_SIZE", ",", "self", ".", "OUT_SIZE", ",", "3", "]", ")", "\n", "\n", "with", "tf", ".", "device", "(", "'/GPU:0'", ")", ":", "\n", "                ", "with", "tf", ".", "variable_scope", "(", "'detector'", ")", ":", "\n", "                    ", "detections", "=", "yolo_v3", "(", "self", ".", "y", ",", "len", "(", "self", ".", "coco_classes", ")", ",", "data_format", "=", "'NHWC'", ")", "\n", "load_ops", "=", "load_weights", "(", "tf", ".", "global_variables", "(", "scope", "=", "'detector'", ")", ",", "self", ".", "weights_file", ")", "\n", "\n", "", "self", ".", "boxes", "=", "detections_boxes", "(", "detections", ")", "\n", "\n", "\n", "", "with", "tf", ".", "device", "(", "'/GPU:1'", ")", ":", "\n", "                ", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "fully_connected", "]", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "weights_initializer", "=", "tf", ".", "truncated_normal_initializer", "(", "0.0", ",", "self", ".", "gan_init_variance", ")", ",", "\n", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "self", ".", "gan_regulaizer", ")", ")", ":", "\n", "                    ", "self", ".", "x", "=", "generator_ann", "(", "self", ".", "z", ",", "self", ".", "nb_parameters", ")", "\n", "self", ".", "transmitter_good", "=", "discrminator_ann", "(", "self", ".", "x_ind", ",", "1", ",", "network_size", "=", "self", ".", "network_size", ")", "\n", "self", ".", "transmitter_bad", "=", "discrminator_ann", "(", "self", ".", "x", ",", "1", ",", "reuse", "=", "True", ",", "network_size", "=", "self", ".", "network_size", ")", "\n", "\n", "", "", "if", "self", ".", "is_focal", ":", "\n", "                ", "self", ".", "t_loss_good", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "losses", ".", "compute_weighted_loss", "(", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "transmitter_good", ",", "\n", "labels", "=", "tf", ".", "ones_like", "(", "self", ".", "transmitter_good", ")", ")", ",", "weights", "=", "(", "self", ".", "focal_weights", ")", ")", ")", "/", "self", ".", "focal_weights_avg", "\n", "", "else", ":", "\n", "                ", "self", ".", "t_loss_good", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "transmitter_good", ",", "labels", "=", "tf", ".", "ones_like", "(", "self", ".", "transmitter_good", ")", ")", ")", "\n", "# self.t_loss_bad  = tf.reduce_mean(tf.losses.compute_weighted_loss(tf.nn.sigmoid_cross_entropy_with_logits(logits=self.transmitter_bad,", "\n", "#   labels= tf.zeros_like(self.transmitter_bad)),weights=(self.focal_weights_avg * tf.ones_like(self.focal_weights))))", "\n", "# self.g_loss = tf.reduce_mean(tf.losses.compute_weighted_loss(tf.nn.sigmoid_cross_entropy_with_logits(logits=self.transmitter_bad,", "\n", "#   labels= tf.ones_like(self.transmitter_bad)),weights=(self.focal_weights_avg * tf.ones_like(self.focal_weights))))", "\n", "", "self", ".", "t_loss_bad", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "transmitter_bad", ",", "labels", "=", "tf", ".", "zeros_like", "(", "self", ".", "transmitter_bad", ")", ")", ")", "\n", "self", ".", "g_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "logits", "=", "self", ".", "transmitter_bad", ",", "labels", "=", "tf", ".", "ones_like", "(", "self", ".", "transmitter_bad", ")", ")", ")", "\n", "t_regularization_loss", "=", "slim", ".", "losses", ".", "get_regularization_losses", "(", "scope", "=", "\"discriminator\"", ")", "[", "0", "]", "\n", "self", ".", "t_loss", "=", "(", "self", ".", "t_loss_bad", "+", "self", ".", "t_loss_good", ")", "# + t_regularization_loss", "\n", "\n", "self", ".", "define_metrics", "(", ")", "\n", "\n", "g_vars", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "scope", "=", "'generator'", ")", "\n", "t_vars", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "scope", "=", "'discriminator'", ")", "\n", "# d_vars = tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope='detector')", "\n", "all_vars", "=", "g_vars", "+", "t_vars", "\n", "self", ".", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "var_list", "=", "all_vars", ")", "\n", "# restorer = tf.train.Saver(var_list=d_vars)", "\n", "# slim.losses.add_loss(self.g_loss)", "\n", "# self.total_loss = slim.losses.get_total_loss()", "\n", "self", ".", "g_optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "learning_rate_g", ",", "beta1", "=", "self", ".", "beta1", ")", ".", "minimize", "(", "self", ".", "g_loss", ",", "var_list", "=", "g_vars", ")", "\n", "self", ".", "t_optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "learning_rate_t", ",", "beta1", "=", "self", ".", "beta1", ")", ".", "minimize", "(", "self", ".", "t_loss", ",", "var_list", "=", "t_vars", ")", "\n", "\n", "\n", "\n", "", "with", "tf", ".", "Session", "(", "graph", "=", "self", ".", "g", ",", "config", "=", "tf", ".", "ConfigProto", "(", "gpu_options", "=", "self", ".", "gpu_options", ")", ")", "as", "self", ".", "sess", ":", "\n", "            ", "self", ".", "writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "self", ".", "train_log_dir", ",", "self", ".", "sess", ".", "graph", ")", "\n", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", ")", "\n", "self", ".", "sess", ".", "run", "(", "load_ops", ")", "\n", "if", "self", ".", "cont_train", ":", "\n", "                ", "print", "(", "\"@@@@@@@ START RESTORING\"", ")", "\n", "# if self.restore_all:", "\n", "self", ".", "saver", ".", "restore", "(", "self", ".", "sess", ",", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "checkpoint_path", ",", "\"oracle-model-%d\"", "%", "(", "self", ".", "task_nb", ")", ")", ")", "\n", "# X_IND =  np.random.uniform(-1, 1, [self.K*self.induced_size,self.nb_parameters])", "\n", "X_IND", ",", "indx", "=", "sample_batch", "(", "self", ".", "all_Xs", ",", "self", ".", "K", "*", "self", ".", "induced_size", ")", "\n", "Y", "=", "[", "self", ".", "all_Ys", "[", "ii", "]", "for", "ii", "in", "indx", "]", "\n", "X_batches", "=", "[", "X_IND", "[", "ii", ":", "ii", "+", "self", ".", "batch_size", "]", "for", "ii", "in", "range", "(", "0", ",", "len", "(", "X_IND", ")", ",", "self", ".", "batch_size", ")", "]", "\n", "discriminator_Scores", "=", "np", ".", "concatenate", "(", "[", "self", ".", "sess", ".", "run", "(", "self", ".", "transmitter_good", ",", "feed_dict", "=", "{", "self", ".", "x_ind", ":", "np", ".", "array", "(", "X_batches", "[", "ii", "]", ")", "}", ")", ".", "reshape", "(", "-", "1", ")", "for", "ii", "in", "range", "(", "len", "(", "X_batches", ")", ")", "]", ",", "axis", "=", "0", ")", "\n", "sorted_indices", "=", "flip", "(", "np", ".", "argsort", "(", "discriminator_Scores", ")", ",", "axis", "=", "0", ")", ".", "tolist", "(", ")", "\n", "# sorted_indices = np.argsort(discriminator_Scores,axis=0).tolist()", "\n", "self", ".", "X_bank", "=", "self", ".", "X_bank", "+", "[", "list", "(", "X_IND", ")", "[", "ii", "]", "for", "ii", "in", "sorted_indices", "[", ":", "self", ".", "induced_size", "]", "]", "\n", "self", ".", "test_targets", "=", "[", "list", "(", "Y", ")", "[", "ii", "]", "for", "ii", "in", "sorted_indices", "[", ":", "self", ".", "induced_size", "]", "]", "\n", "self", ".", "X_bad", "=", "[", "list", "(", "X_IND", ")", "[", "ii", "]", "for", "ii", "in", "sorted_indices", "[", "-", "self", ".", "induced_size", ":", "]", "]", "\n", "self", ".", "test_bad", "=", "[", "list", "(", "Y", ")", "[", "ii", "]", "for", "ii", "in", "sorted_indices", "[", "-", "self", ".", "induced_size", ":", "]", "]", "\n", "\n", "\n", "\n", "# else:", "\n", "#     restorer.restore(self.sess,save_path=os.path.join(self.checkpoint_path,\"oracle-model-0\"))", "\n", "", "elif", "self", ".", "is_train", ":", "\n", "                ", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "global_step", "=", "0", "\n", "for", "step", "in", "range", "(", "self", ".", "nb_steps", ")", ":", "\n", "                    ", "print", "(", "\"step:\"", ",", "step", ")", "\n", "self", ".", "Z", "=", "np", ".", "random", ".", "normal", "(", "np", ".", "zeros", "(", "self", ".", "z_dim", ")", ",", "1", ",", "[", "self", ".", "batch_size", ",", "self", ".", "z_dim", "]", ")", "\n", "\n", "\n", "if", "(", "step", "%", "self", ".", "ind_frq", "==", "0", ")", ":", "\n", "                        ", "self", ".", "inducer_bbgan", "(", "induced_size", "=", "self", ".", "induced_size", ")", "\n", "\n", "## evolutionary step", "\n", "", "if", "self", ".", "keep_bank", "or", "self", ".", "full_set", ":", "\n", "                        ", "self", ".", "X_IND", ",", "indx", "=", "sample_batch", "(", "self", ".", "X_bank", ",", "self", ".", "batch_size", ")", "\n", "self", ".", "Y", "=", "[", "self", ".", "Y_bank", "[", "ii", "]", "for", "ii", "in", "indx", "]", "\n", "\n", "### training step", "\n", "", "if", "not", "self", ".", "optimize_oracle", ":", "\n", "                        ", "current_oracle_scores", "=", "self", ".", "detector_agent", "(", "self", ".", "Y", ")", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "", "_", ",", "current_t_loss", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "t_optimizer", ",", "self", ".", "t_loss", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "z", ":", "self", ".", "Z", ",", "self", ".", "y", ":", "self", ".", "Y", ",", "self", ".", "x_ind", ":", "self", ".", "X_IND", ",", "self", ".", "oracle_scores", ":", "current_oracle_scores", "}", ")", "\n", "\n", "_", ",", "current_g_loss", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "g_optimizer", ",", "self", ".", "g_loss", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "z", ":", "self", ".", "Z", ",", "self", ".", "y", ":", "self", ".", "Y", ",", "self", ".", "oracle_scores", ":", "np", ".", "array", "(", "current_oracle_scores", ")", "}", ")", "\n", "_", ",", "current_g_loss", ",", "new_summary", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "g_optimizer", ",", "self", ".", "g_loss", ",", "self", ".", "total_loss_summary", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "z", ":", "self", ".", "Z", ",", "self", ".", "y", ":", "self", ".", "Y", ",", "self", ".", "x_ind", ":", "self", ".", "X_IND", ",", "self", ".", "oracle_scores", ":", "current_oracle_scores", "}", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "new_summary", ",", "self", ".", "global_step", ")", "\n", "\n", "self", ".", "logger", ".", "write", "(", "\"step number: %2d , train t_Loss: %2.5f train g_Loss: %2.5f \\n\"", "%", "(", "self", ".", "global_step", ",", "current_t_loss", ",", "current_g_loss", ")", ")", "\n", "\n", "self", ".", "global_step", "+=", "1", "\n", "if", "(", "(", "step", "+", "1", ")", "%", "self", ".", "log_frq", "==", "0", ")", ":", "\n", "                        ", "self", ".", "validating_bbgan", "(", "valid_size", "=", "self", ".", "valid_size", ")", "\n", "if", "self", ".", "is_visualize", ":", "\n", "                            ", "self", ".", "visualize_bbgan", "(", "step", "=", "step", ")", "\n", "# self.saver.save(self.sess,save_path=os.path.join(self.checkpoint_path,\"oracle-model\"), global_step=self.global_step, write_meta_graph=False)", "\n", "", "self", ".", "saver", ".", "save", "(", "self", ".", "sess", ",", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "checkpoint_path", ",", "\"oracle-model\"", ")", ",", "global_step", "=", "self", ".", "task_nb", ",", "write_meta_graph", "=", "False", ")", "\n", "\n", "self", ".", "logger", ".", "write", "(", "\"\\n\\nepoch: %d validation: %2.5f   standard: %2.5f   improvmetn: %2.5f \\n\\n\"", "%", "(", "step", ",", "self", ".", "avg_loss", ",", "self", ".", "avg_stdloss", ",", "self", ".", "avg_loss", "-", "self", ".", "avg_stdloss", ")", ")", "\n", "", "", "", "else", ":", "\n", "                ", "self", ".", "saver", ".", "restore", "(", "self", ".", "sess", ",", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "checkpoint_path", ",", "\"oracle-model-%d\"", "%", "(", "self", ".", "task_nb", ")", ")", ")", "\n", "self", ".", "validating_bbgan", "(", "valid_size", "=", "self", ".", "valid_size", ")", "\n", "if", "self", ".", "is_visualize", ":", "\n", "                    ", "self", ".", "visualize_bbgan", "(", ")", "\n", "# print(\"\\n\\n\\n validation loss : \", avg_loss)", "\n", "", "", "self", ".", "validating_bbgan", "(", "valid_size", "=", "self", ".", "valid_size", ")", "\n", "if", "self", ".", "is_visualize", ":", "\n", "                ", "self", ".", "visualize_bbgan", "(", "step", "=", "0", ")", "\n", "", "self", ".", "saver", ".", "save", "(", "self", ".", "sess", ",", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "checkpoint_path", ",", "\"oracle-model\"", ")", ",", "global_step", "=", "self", ".", "task_nb", ",", "write_meta_graph", "=", "False", ")", "\n", "self", ".", "register_metrics", "(", ")", "\n", "\n", "if", "self", ".", "is_evolve", ":", "\n", "                ", "retained_X", ",", "inxs", "=", "sample_batch", "(", "self", ".", "all_Xs", ",", "self", ".", "retained_size", ")", ";", "retained_Y", "=", "[", "self", ".", "all_Ys", "[", "ii", "]", "for", "ii", "in", "inxs", "]", "\n", "self", ".", "all_Xs", "=", "self", ".", "X_bank", "+", "self", ".", "K", "*", "self", ".", "test_X", ".", "tolist", "(", ")", "+", "retained_X", "\n", "self", ".", "all_Ys", "=", "self", ".", "Y_bank", "+", "self", ".", "K", "*", "self", ".", "test_targets", "+", "retained_Y", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.robustness.BlackBoxOptimizer.inducer_bbgan": [[384, 415], ["utils.sample_batch", "ops.function_batches", "numpy.vstack().reshape", "numpy.argsort().tolist", "ops.function_batches", "numpy.vstack().reshape", "numpy.argsort().tolist", "utils.sample_batch", "numpy.vstack", "numpy.argsort", "numpy.array", "numpy.vstack", "numpy.argsort", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.sample_batch", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.ops.function_batches", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.reshape", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.ops.function_batches", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.reshape", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.sample_batch"], ["", "", "def", "inducer_bbgan", "(", "self", ",", "induced_size", "=", "32", ")", ":", "\n", "        ", "if", "self", ".", "keep_bank", ":", "\n", "            ", "X_IND", ",", "indx", "=", "sample_batch", "(", "self", ".", "all_Xs", ",", "self", ".", "K", "*", "induced_size", ")", "\n", "Y", "=", "[", "self", ".", "all_Ys", "[", "ii", "]", "for", "ii", "in", "indx", "]", "\n", "current_oracle_scores", "=", "function_batches", "(", "self", ".", "detector_agent", ",", "Y", ",", "50", ")", "\n", "current_oracle_scores", "=", "np", ".", "vstack", "(", "np", ".", "array", "(", "current_oracle_scores", ")", ")", ".", "reshape", "(", "-", "1", ")", "\n", "# sorted_indices = flip(np.argsort(current_oracle_scores.flatten()),axis=0).tolist()", "\n", "sorted_indices", "=", "np", ".", "argsort", "(", "current_oracle_scores", ",", "axis", "=", "0", ")", ".", "tolist", "(", ")", "\n", "self", ".", "X_bank", "=", "self", ".", "X_bank", "+", "[", "X_IND", "[", "ii", "]", "for", "ii", "in", "sorted_indices", "[", ":", "induced_size", "]", "]", "\n", "self", ".", "Y_bank", "=", "self", ".", "Y_bank", "+", "[", "Y", "[", "ii", "]", "for", "ii", "in", "sorted_indices", "[", ":", "induced_size", "]", "]", "\n", "\n", "", "elif", "self", ".", "full_set", ":", "\n", "            ", "self", ".", "ind_frq", "=", "100000", "\n", "X_IND", "=", "self", ".", "all_Xs", "\n", "Y", "=", "self", ".", "all_Ys", "\n", "current_oracle_scores", "=", "function_batches", "(", "self", ".", "detector_agent", ",", "Y", ",", "50", ")", "\n", "current_oracle_scores", "=", "np", ".", "vstack", "(", "np", ".", "array", "(", "current_oracle_scores", ")", ")", ".", "reshape", "(", "-", "1", ")", "\n", "# sorted_indices = flip(np.argsort(current_oracle_scores),axis=0).tolist()", "\n", "sorted_indices", "=", "np", ".", "argsort", "(", "current_oracle_scores", ",", "axis", "=", "0", ")", ".", "tolist", "(", ")", "\n", "if", "self", ".", "exp_type", "==", "\"Gaussian\"", "or", "self", ".", "exp_type", "==", "\"GP\"", ":", "\n", "                ", "self", ".", "X_bank", "=", "self", ".", "X_bank", "+", "[", "X_IND", "[", "ii", "]", "for", "ii", "in", "sorted_indices", "[", ":", "induced_size", "]", "]", "\n", "self", ".", "Y_bank", "=", "self", ".", "Y_bank", "+", "[", "Y", "[", "ii", "]", "for", "ii", "in", "sorted_indices", "[", ":", "induced_size", "]", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "X_bank", "=", "self", ".", "X_bank", "+", "self", ".", "K", "*", "[", "X_IND", "[", "ii", "]", "for", "ii", "in", "sorted_indices", "[", ":", "induced_size", "]", "]", "\n", "self", ".", "Y_bank", "=", "self", ".", "Y_bank", "+", "self", ".", "K", "*", "[", "Y", "[", "ii", "]", "for", "ii", "in", "sorted_indices", "[", ":", "induced_size", "]", "]", "\n", "\n", "\n", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "X_IND", ",", "indx", "=", "sample_batch", "(", "self", ".", "all_Xs", ",", "self", ".", "batch_size", ")", "\n", "self", ".", "Y", "=", "[", "self", ".", "all_Ys", "[", "ii", "]", "for", "ii", "in", "indx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.robustness.BlackBoxOptimizer.detector_agent": [[417, 429], ["robustness.BlackBoxOptimizer.sess.run", "detectors.yolo_v3.non_max_suppression", "numpy.expand_dims", "utils.inverse_transform", "result.append", "numpy.array", "numpy.max", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3.non_max_suppression", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.inverse_transform"], ["", "", "def", "detector_agent", "(", "self", ",", "imgs", ",", "class_detected", "=", "None", ")", ":", "\n", "        ", "class_detected", "=", "self", ".", "PASCAL_TO_COCO", "[", "self", ".", "class_nb", "]", "\n", "imgs", "=", "[", "inverse_transform", "(", "img", ")", "for", "img", "in", "imgs", "]", "\n", "detected_boxes", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "boxes", ",", "feed_dict", "=", "{", "self", ".", "y", ":", "np", ".", "array", "(", "imgs", ",", "dtype", "=", "np", ".", "float32", ")", "}", ")", "\n", "filtered_boxes", "=", "non_max_suppression", "(", "detected_boxes", ",", "confidence_threshold", "=", "self", ".", "conf_threshold", ",", "\n", "iou_threshold", "=", "self", ".", "iou_threshold", ")", "\n", "result", "=", "[", "]", "\n", "for", "image", "in", "filtered_boxes", ":", "\n", "            ", "score", "=", "0", "if", "class_detected", "not", "in", "image", "else", "np", ".", "max", "(", "[", "score", "for", "box", ",", "score", "in", "image", "[", "class_detected", "]", "]", ")", "\n", "result", ".", "append", "(", "score", ")", "\n", "# print(self.coco_classes[class_detected],result)", "\n", "", "return", "np", ".", "expand_dims", "(", "np", ".", "array", "(", "result", ",", "dtype", "=", "np", ".", "float32", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.robustness.BlackBoxOptimizer.validating_bbgan": [[433, 482], ["ops.function_batches", "numpy.vstack().reshape", "ops.function_batches", "numpy.vstack().reshape", "robustness.BlackBoxOptimizer.test_prob.flatten().tolist", "robustness.BlackBoxOptimizer.test_stdprob.flatten().tolist", "numpy.mean", "numpy.mean", "ops.black_box_batch", "utils.sample_batch", "utils.sample_batch", "robustness.BlackBoxOptimizer.test_prob.flatten", "robustness.BlackBoxOptimizer.test_stdprob.flatten", "numpy.random.normal", "robustness.BlackBoxOptimizer.x.eval", "ops.function_batches", "numpy.vstack().reshape", "numpy.array", "ops.sample_from_learned_gaussian", "numpy.vstack", "numpy.vstack", "robustness.BlackBoxOptimizer.test_prob.flatten", "robustness.BlackBoxOptimizer.test_stdprob.flatten", "numpy.zeros", "robustness.BlackBoxOptimizer.X_bank.copy", "numpy.array", "numpy.array", "numpy.vstack", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.ajhamdi_SADA.None.ops.function_batches", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.reshape", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.ops.function_batches", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.reshape", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.ops.black_box_batch", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.sample_batch", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.sample_batch", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.ops.function_batches", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.reshape", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.ops.sample_from_learned_gaussian"], ["", "def", "validating_bbgan", "(", "self", ",", "valid_size", "=", "32", ")", ":", "\n", "        ", "if", "self", ".", "exp_type", "==", "\"Adversarial\"", ":", "\n", "            ", "if", "self", ".", "is_train", ":", "\n", "                ", "test_Z", "=", "np", ".", "random", ".", "normal", "(", "np", ".", "zeros", "(", "self", ".", "z_dim", ")", ",", "1", ",", "[", "valid_size", ",", "self", ".", "z_dim", "]", ")", "\n", "self", ".", "test_X", "=", "self", ".", "x", ".", "eval", "(", "feed_dict", "=", "{", "self", ".", "z", ":", "test_Z", "}", ",", "session", "=", "self", ".", "sess", ")", "\n", "", "if", "self", ".", "cont_train", ":", "\n", "# self.test_bad = black_box_batch(self.X_bad,output_size=self.OUT_SIZE,global_step=0,frames_path=self.frames_path,cluster=self.is_cluster,parent_name=self.pascal_list[self.class_nb],scenario_nb=self.scenario_nb)", "\n", "                ", "self", ".", "all_bad_prob", "=", "function_batches", "(", "self", ".", "detector_agent", ",", "self", ".", "test_bad", ",", "50", ")", "\n", "self", ".", "all_bad_prob", "=", "np", ".", "vstack", "(", "np", ".", "array", "(", "self", ".", "all_bad_prob", ")", ")", ".", "reshape", "(", "-", "1", ")", "\n", "# self.all_bad_prob =  self.detector_agent(np.array(self.test_bad)).flatten().tolist()", "\n", "self", ".", "test_X", "=", "np", ".", "array", "(", "self", ".", "X_bank", ")", "\n", "", "", "elif", "self", ".", "exp_type", "==", "\"Gaussian\"", "or", "self", ".", "exp_type", "==", "\"Baysian\"", ":", "\n", "            ", "self", ".", "test_X", "=", "sample_from_learned_gaussian", "(", "self", ".", "X_bank", ",", "n_components", "=", "self", ".", "gaussian_nb", ",", "n_samples", "=", "valid_size", ")", "\n", "# self.test_X = 10*self.X_bank #####################################", "\n", "\n", "", "elif", "self", ".", "exp_type", "==", "\"GP\"", ":", "\n", "            ", "self", ".", "test_X", "=", "self", ".", "X_bank", ".", "copy", "(", ")", "\n", "# self.test_targets = self.Y_bank.copy() #######################", "\n", "\n", "\n", "", "if", "not", "self", ".", "cont_train", ":", "# and  self.exp_type != \"GP\" : ################", "\n", "            ", "self", ".", "test_targets", "=", "black_box_batch", "(", "self", ".", "test_X", ",", "output_size", "=", "self", ".", "OUT_SIZE", ",", "global_step", "=", "self", ".", "task_nb", ",", "frames_path", "=", "self", ".", "frames_path", ",", "cluster", "=", "self", ".", "is_cluster", ",", "parent_name", "=", "self", ".", "pascal_list", "[", "self", ".", "class_nb", "]", ",", "scenario_nb", "=", "self", ".", "scenario_nb", ")", "\n", "# self.test_prob = self.detector_agent(np.array(self.test_targets))", "\n", "", "self", ".", "test_prob", "=", "function_batches", "(", "self", ".", "detector_agent", ",", "self", ".", "test_targets", ",", "50", ")", "\n", "self", ".", "test_prob", "=", "np", ".", "vstack", "(", "np", ".", "array", "(", "self", ".", "test_prob", ")", ")", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "\n", "if", "not", "self", ".", "is_evolve", ":", "\n", "            ", "self", ".", "test_std", ",", "indx", "=", "sample_batch", "(", "self", ".", "all_Ys", ",", "self", ".", "valid_size", ")", "\n", "self", ".", "test_stdX", "=", "[", "self", ".", "all_Xs", "[", "ii", "]", "for", "ii", "in", "indx", "]", "\n", "# if self.exp_type == \"GP\":", "\n", "#     self.test_std = self.all_Ys.copy()", "\n", "#     self.test_stdX = self.all_Xs.copy()", "\n", "", "else", ":", "\n", "            ", "self", ".", "test_std", ",", "indx", "=", "sample_batch", "(", "self", ".", "retained_Ys", ",", "self", ".", "valid_size", ")", "\n", "self", ".", "test_stdX", "=", "[", "self", ".", "all_Xs", "[", "ii", "]", "for", "ii", "in", "indx", "]", "\n", "\n", "\n", "# self.test_stdprob = self.detector_agent(np.array(self.test_std))", "\n", "", "self", ".", "test_stdprob", "=", "function_batches", "(", "self", ".", "detector_agent", ",", "self", ".", "test_std", ",", "50", ")", "\n", "self", ".", "test_stdprob", "=", "np", ".", "vstack", "(", "np", ".", "array", "(", "self", ".", "test_stdprob", ")", ")", ".", "reshape", "(", "-", "1", ")", "\n", "# all_losses.append(loss)", "\n", "self", ".", "all_prob", "=", "self", ".", "test_prob", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "\n", "self", ".", "all_stdprob", "=", "self", ".", "test_stdprob", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "\n", "self", ".", "avg_loss", "=", "np", ".", "mean", "(", "self", ".", "test_prob", ".", "flatten", "(", ")", ")", "\n", "self", ".", "avg_stdloss", "=", "np", ".", "mean", "(", "self", ".", "test_stdprob", ".", "flatten", "(", ")", ")", "\n", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.robustness.BlackBoxOptimizer.visualize_bbgan": [[485, 524], ["imageio.mimsave", "utils.save_image", "utils.imsave", "utils.imsave", "matplotlib.figure", "matplotlib.figure", "matplotlib.hist", "matplotlib.hist", "matplotlib.legend", "matplotlib.legend", "matplotlib.savefig", "matplotlib.savefig", "matplotlib.close", "matplotlib.close", "matplotlib.figure", "matplotlib.figure", "range", "matplotlib.legend", "matplotlib.legend", "matplotlib.xlim", "matplotlib.xlim", "matplotlib.savefig", "matplotlib.savefig", "matplotlib.close", "matplotlib.close", "collections.OrderedDict", "range", "pandas.DataFrame", "pandas.DataFrame", "pandas.DataFrame.to_csv", "os.path.join", "numpy.array", "os.path.join", "numpy.array", "numpy.array", "os.path.join", "matplotlib.figure", "matplotlib.figure", "matplotlib.hist", "matplotlib.hist", "matplotlib.legend", "matplotlib.legend", "matplotlib.savefig", "matplotlib.savefig", "matplotlib.close", "matplotlib.close", "sns.kdeplot", "os.path.join", "[].tolist", "os.path.join", "utils.inverse_transform", "os.path.join", "os.path.join", "os.path.join", "[].tolist", "utils.inverse_transform", "utils.inverse_transform", "utils.inverse_transform", "numpy.array", "utils.sample_batch", "utils.sample_batch", "utils.sample_batch", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.save_image", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.imsave", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.imsave", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.inverse_transform", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.inverse_transform", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.inverse_transform", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.inverse_transform", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.sample_batch", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.sample_batch", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.sample_batch"], ["", "def", "visualize_bbgan", "(", "self", ",", "step", "=", "100", ")", ":", "\n", "# for ii , img in enumerate(sorted_validation):", "\n", "#   scipy.misc.imsave(os.path.join(self.generated_frames_test_dir,\"s_%d.jpg\"%(ii)),inverse_transform(img))", "\n", "        ", "imageio", ".", "mimsave", "(", "os", ".", "path", ".", "join", "(", "self", ".", "generated_frames_test_dir", ",", "\"s_%d_%d.gif\"", "%", "(", "step", ",", "self", ".", "evolve_step", ")", ")", ",", "[", "inverse_transform", "(", "img", ")", "for", "img", "in", "self", ".", "test_targets", "]", ")", "\n", "save_image", "(", "np", ".", "array", "(", "[", "inverse_transform", "(", "img", ")", "for", "img", "in", "sample_batch", "(", "self", ".", "test_targets", ",", "16", ")", "[", "0", "]", "]", ")", ",", "os", ".", "path", ".", "join", "(", "self", ".", "generated_frames_test_dir", ",", "\"s_%d_%d.png\"", "%", "(", "step", ",", "self", ".", "evolve_step", ")", ")", ",", "\n", "nrow", "=", "4", ",", "padding", "=", "2", ",", "normalize", "=", "False", ",", "scale_each", "=", "False", ")", "\n", "imsave", "(", "np", ".", "array", "(", "[", "inverse_transform", "(", "img", ")", "for", "img", "in", "sample_batch", "(", "self", ".", "test_targets", ",", "16", ")", "[", "0", "]", "]", ")", ",", "size", "=", "self", ".", "OUT_SIZE", ",", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "generated_frames_test_dir", ",", "\"s_%d_%d.png\"", "%", "(", "step", ",", "self", ".", "evolve_step", ")", ")", ",", "is_all", "=", "True", ")", "\n", "imsave", "(", "np", ".", "array", "(", "[", "inverse_transform", "(", "img", ")", "for", "img", "in", "sample_batch", "(", "self", ".", "test_std", ",", "16", ")", "[", "0", "]", "]", ")", ",", "size", "=", "self", ".", "OUT_SIZE", ",", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "generated_frames_test_dir", ",", "\"r_%d_%d.png\"", "%", "(", "step", ",", "self", ".", "evolve_step", ")", ")", ",", "is_all", "=", "True", ")", "\n", "# imageio.mimsave(os.path.join(self.generated_frames_test_dir,\"r_%d.gif\"%(epoch)),[inverse_transform(img) for img in self.test_std])", "\n", "# if self.is_cluster:", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "8", ",", "6", ")", ")", "\n", "plt", ".", "hist", "(", "[", "self", ".", "all_prob", ",", "self", ".", "all_stdprob", "]", ",", "color", "=", "[", "\"b\"", ",", "\"r\"", "]", ",", "label", "=", "[", "\"BBGAN\"", ",", "\"Random\"", "]", ",", "bins", "=", "100", ",", "range", "=", "(", "0.0", ",", "1.0", ")", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "self", ".", "generated_frames_test_dir", ",", "\"histogram_%d_%d.jpg\"", "%", "(", "step", ",", "self", ".", "evolve_step", ")", ")", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "if", "self", ".", "cont_train", ":", "\n", "            ", "plt", ".", "figure", "(", "figsize", "=", "(", "8", ",", "6", ")", ")", "\n", "plt", ".", "hist", "(", "[", "self", ".", "all_prob", ",", "self", ".", "all_stdprob", ",", "self", ".", "all_bad_prob", "]", ",", "color", "=", "[", "\"b\"", ",", "\"r\"", ",", "'g'", "]", ",", "label", "=", "[", "\"good_discrminator\"", ",", "\"Random\"", ",", "\"bad_discrminator\"", "]", ",", "bins", "=", "100", ",", "range", "=", "(", "0.0", ",", "1.0", ")", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "self", ".", "generated_frames_test_dir", ",", "\"histogram_%d_%d.jpg\"", "%", "(", "step", ",", "self", ".", "evolve_step", ")", ")", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "\n", "", "plt", ".", "figure", "(", "figsize", "=", "(", "8", ",", "6", ")", ")", "\n", "for", "ii", "in", "range", "(", "self", ".", "nb_parameters", ")", ":", "\n", "            ", "sns", ".", "kdeplot", "(", "np", ".", "array", "(", "self", ".", "test_X", ")", "[", ":", ",", "ii", "]", ".", "tolist", "(", ")", ",", "linewidth", "=", "2", ",", "shade", "=", "False", ",", "label", "=", "self", ".", "paramters_list", "[", "ii", "]", ",", "clip", "=", "(", "-", "1", ",", "1", ")", ")", "\n", "", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "xlim", "(", "-", "1", ",", "1", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "self", ".", "generated_frames_test_dir", ",", "\"parmeters_%d_%d.jpg\"", "%", "(", "step", ",", "self", ".", "evolve_step", ")", ")", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "sphere_params", "=", "OrderedDict", "(", ")", "\n", "for", "param", "in", "range", "(", "self", ".", "nb_parameters", ")", ":", "\n", "            ", "sphere_params", "[", "self", ".", "paramters_list", "[", "param", "]", "]", "=", "np", ".", "array", "(", "self", ".", "test_X", ")", "[", ":", ",", "param", "]", ".", "tolist", "(", ")", "\n", "", "sphere_df", "=", "pd", ".", "DataFrame", "(", "sphere_params", ")", "\n", "sphere_df", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "self", ".", "generated_frames_test_dir", ",", "'test_params.csv'", ")", ",", "sep", "=", "','", ",", "index", "=", "False", ")", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.robustness.BlackBoxOptimizer.learn_gaussian": [[525, 572], ["utils.my_read_images", "robustness.BlackBoxOptimizer.all_Ys.copy", "open", "pickle.load", "len", "len", "print", "len", "len", "tensorflow.Graph().as_default", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_mean", "tensorflow.placeholder", "robustness.BlackBoxOptimizer.define_metrics", "tensorflow.Session", "tensorflow.summary.FileWriter", "tensorflow.global_variables_initializer().run", "robustness.BlackBoxOptimizer.sess.run", "os.path.join", "len", "len", "tensorflow.to_float", "tensorflow.constant", "tensorflow.device", "detectors.yolo_v3.detections_boxes", "time.time", "robustness.BlackBoxOptimizer.inducer_bbgan", "print", "robustness.BlackBoxOptimizer.validating_bbgan", "robustness.BlackBoxOptimizer.register_metrics", "len", "tensorflow.Graph", "tensorflow.count_nonzero", "float", "tensorflow.nn.moments", "tensorflow.nn.moments", "tensorflow.variable_scope", "detectors.yolo_v3.yolo_v3", "detectors.yolo_v3.load_weights", "tensorflow.ConfigProto", "tensorflow.global_variables_initializer", "robustness.BlackBoxOptimizer.visualize_bbgan", "tensorflow.less", "len", "tensorflow.global_variables", "tensorflow.nn.moments"], "methods", ["home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.my_read_images", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.reshape", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.reshape", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.robustness.BlackBoxOptimizer.define_metrics", "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3.detections_boxes", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.robustness.BlackBoxOptimizer.inducer_bbgan", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.robustness.BlackBoxOptimizer.validating_bbgan", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.robustness.BlackBoxOptimizer.register_metrics", "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3.yolo_v3", "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3.load_weights", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.robustness.BlackBoxOptimizer.visualize_bbgan"], ["", "def", "learn_gaussian", "(", "self", ")", ":", "\n", "        ", "self", ".", "evolve_step", "=", "0", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "generated_frames_train_dir", ",", "\"save.pkl\"", ")", ",", "'rb'", ")", "as", "fp", ":", "\n", "            ", "saved_dict", "=", "cPickle", ".", "load", "(", "fp", ")", "\n", "", "self", ".", "all_Xs", "=", "saved_dict", "[", "\"x\"", "]", "\n", "self", ".", "all_Ys", ",", "missing_indices", "=", "my_read_images", "(", "self", ".", "generated_frames_train_dir", ",", "self", ".", "OUT_SIZE", ",", "self", ".", "OUT_SIZE", ",", "expected_number", "=", "len", "(", "self", ".", "all_Xs", ")", ",", "extension", "=", "\"jpg\"", ",", "d_type", "=", "np", ".", "float32", ",", "normalize", "=", "True", ")", "\n", "if", "len", "(", "self", ".", "all_Ys", ")", "!=", "len", "(", "self", ".", "all_Xs", ")", ":", "\n", "            ", "print", "(", "\"@@@@@@@@@@@\"", ",", "len", "(", "self", ".", "all_Xs", ")", ")", "\n", "for", "ii", "in", "missing_indices", ":", "\n", "                ", "del", "self", ".", "all_Xs", "[", "ii", "]", "\n", "", "", "if", "len", "(", "self", ".", "all_Ys", ")", "!=", "len", "(", "self", ".", "all_Xs", ")", ":", "\n", "            ", "self", ".", "all_Ys", "=", "self", ".", "all_Ys", "[", "0", ":", "len", "(", "self", ".", "all_Xs", ")", "]", "\n", "# raise ValueError(\"some images were not read properly ... the corrsponding Xs are not correct\")", "\n", "", "self", ".", "retained_Ys", "=", "self", ".", "all_Ys", ".", "copy", "(", ")", "\n", "\n", "with", "tf", ".", "Graph", "(", ")", ".", "as_default", "(", ")", "as", "self", ".", "g", ":", "\n", "            ", "self", ".", "z", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "self", ".", "z_dim", "]", ")", "\n", "self", ".", "x_ind", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "self", ".", "nb_parameters", "]", ")", "\n", "self", ".", "oracle_labels", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "self", ".", "OUT_SIZE", ",", "self", ".", "OUT_SIZE", ",", "3", "]", ")", "\n", "self", ".", "oracle_scores", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "]", ")", "\n", "self", ".", "success_rate", "=", "tf", ".", "to_float", "(", "tf", ".", "count_nonzero", "(", "tf", ".", "less", "(", "self", ".", "oracle_scores", ",", "self", ".", "SUCCESS_THRESHOLD", ")", ")", ")", "/", "tf", ".", "constant", "(", "float", "(", "self", ".", "valid_size", ")", ")", "\n", "self", ".", "score_mean", "=", "tf", ".", "reshape", "(", "tf", ".", "nn", ".", "moments", "(", "self", ".", "oracle_scores", ",", "axes", "=", "0", ")", "[", "0", "]", ",", "[", "]", ")", "\n", "self", ".", "input_variance", "=", "tf", ".", "reshape", "(", "tf", ".", "nn", ".", "moments", "(", "tf", ".", "nn", ".", "moments", "(", "self", ".", "x_ind", ",", "axes", "=", "0", ")", "[", "1", "]", ",", "axes", "=", "0", ")", "[", "0", "]", ",", "[", "]", ")", "\n", "self", ".", "focal_weights", "=", "self", ".", "oracle_scores", "**", "self", ".", "gamma", "\n", "self", ".", "focal_weights_avg", "=", "tf", ".", "reduce_mean", "(", "self", ".", "focal_weights", ")", "\n", "self", ".", "y", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "self", ".", "OUT_SIZE", ",", "self", ".", "OUT_SIZE", ",", "3", "]", ")", "\n", "\n", "with", "tf", ".", "device", "(", "'/GPU:0'", ")", ":", "\n", "                ", "with", "tf", ".", "variable_scope", "(", "'detector'", ")", ":", "\n", "                    ", "detections", "=", "yolo_v3", "(", "self", ".", "y", ",", "len", "(", "self", ".", "coco_classes", ")", ",", "data_format", "=", "'NHWC'", ")", "\n", "load_ops", "=", "load_weights", "(", "tf", ".", "global_variables", "(", "scope", "=", "'detector'", ")", ",", "self", ".", "weights_file", ")", "\n", "\n", "", "self", ".", "boxes", "=", "detections_boxes", "(", "detections", ")", "\n", "\n", "", "self", ".", "define_metrics", "(", ")", "\n", "", "with", "tf", ".", "Session", "(", "graph", "=", "self", ".", "g", ",", "config", "=", "tf", ".", "ConfigProto", "(", "gpu_options", "=", "self", ".", "gpu_options", ")", ")", "as", "self", ".", "sess", ":", "\n", "            ", "self", ".", "writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "self", ".", "train_log_dir", ",", "self", ".", "sess", ".", "graph", ")", "\n", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", ")", "\n", "self", ".", "sess", ".", "run", "(", "load_ops", ")", "\n", "if", "self", ".", "is_train", ":", "\n", "                ", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "inducer_bbgan", "(", "induced_size", "=", "self", ".", "induced_size", ")", "\n", "print", "(", "\"start learning mixture of gaussians\"", ")", "\n", "self", ".", "validating_bbgan", "(", "valid_size", "=", "self", ".", "valid_size", ")", "\n", "self", ".", "register_metrics", "(", ")", "\n", "if", "self", ".", "is_visualize", ":", "\n", "                    ", "self", ".", "visualize_bbgan", "(", "step", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.robustness.BlackBoxOptimizer.define_metrics": [[750, 767], ["tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.merge", "tensorflow.summary.merge", "tensorflow.summary.merge", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.merge", "tensorflow.summary.scalar", "robustness.BlackBoxOptimizer.config_dict.items"], "methods", ["home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.merge", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.merge", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.merge", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.merge"], ["", "", "", "", "def", "define_metrics", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "exp_type", "==", "\"Adversarial\"", ":", "\n", "            ", "g_loss_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "'losses/G_loss'", ",", "self", ".", "g_loss", ")", "\n", "t_loss_real_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "'losses/t_loss_good'", ",", "self", ".", "t_loss_good", ")", "\n", "t_loss_bad_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "'losses/t_loss_bad'", ",", "self", ".", "t_loss_bad", ")", "\n", "t_loss_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "'losses/t_loss'", ",", "self", ".", "t_loss", ")", "\n", "self", ".", "total_loss_summary", "=", "tf", ".", "summary", ".", "merge", "(", "[", "g_loss_summary", ",", "t_loss_summary", ",", "t_loss_real_summary", ",", "t_loss_bad_summary", "]", ")", "# ", "\n", "\n", "", "score_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "'metric/score_mean'", ",", "self", ".", "score_mean", ")", "\n", "std_score_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "'metric/std_score_mean'", ",", "self", ".", "score_mean", ")", "\n", "success_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "'metric/success_rate'", ",", "self", ".", "success_rate", ")", "\n", "std_success_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "'metric/std_success_rate'", ",", "self", ".", "success_rate", ")", "\n", "var_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "'metric/input_variance'", ",", "self", ".", "input_variance", ")", "\n", "std_var_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "'metric/std_input_variance'", ",", "self", ".", "input_variance", ")", "\n", "self", ".", "total_config_summary", "=", "tf", ".", "summary", ".", "merge", "(", "[", "tf", ".", "summary", ".", "scalar", "(", "'config/{}'", ".", "format", "(", "k", ")", ",", "v", ")", "for", "k", ",", "v", "in", "self", ".", "config_dict", ".", "items", "(", ")", "]", ")", "# ", "\n", "self", ".", "total_metric_summary", "=", "tf", ".", "summary", ".", "merge", "(", "[", "score_summary", ",", "var_summary", ",", "success_summary", "]", ")", "# ", "\n", "self", ".", "std_total_metric_summary", "=", "tf", ".", "summary", ".", "merge", "(", "[", "std_score_summary", ",", "std_var_summary", ",", "std_success_summary", "]", ")", "# ", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.robustness.BlackBoxOptimizer.register_metrics": [[769, 776], ["robustness.BlackBoxOptimizer.writer.add_summary", "robustness.BlackBoxOptimizer.writer.flush", "robustness.BlackBoxOptimizer.writer.add_summary", "robustness.BlackBoxOptimizer.writer.flush", "robustness.BlackBoxOptimizer.writer.add_summary", "robustness.BlackBoxOptimizer.writer.flush", "robustness.BlackBoxOptimizer.total_metric_summary.eval", "robustness.BlackBoxOptimizer.total_config_summary.eval", "robustness.BlackBoxOptimizer.std_total_metric_summary.eval"], "methods", ["None"], ["", "def", "register_metrics", "(", "self", ")", ":", "\n", "        ", "self", ".", "writer", ".", "add_summary", "(", "self", ".", "total_metric_summary", ".", "eval", "(", "feed_dict", "=", "{", "self", ".", "oracle_scores", ":", "self", ".", "test_prob", ",", "self", ".", "x_ind", ":", "self", ".", "test_X", "}", ",", "session", "=", "self", ".", "sess", ")", ",", "0", ")", "\n", "self", ".", "writer", ".", "flush", "(", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "self", ".", "total_config_summary", ".", "eval", "(", "feed_dict", "=", "None", ",", "session", "=", "self", ".", "sess", ")", ",", "0", ")", "\n", "self", ".", "writer", ".", "flush", "(", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "self", ".", "std_total_metric_summary", ".", "eval", "(", "feed_dict", "=", "{", "self", ".", "oracle_scores", ":", "self", ".", "test_stdprob", ",", "self", ".", "x_ind", ":", "self", ".", "test_stdX", "}", ",", "session", "=", "self", ".", "sess", ")", ",", "0", ")", "\n", "self", ".", "writer", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.CreateBoundingBox.CreateBoundingBox.poll": [[106, 111], ["len"], "methods", ["None"], ["@", "classmethod", "\n", "def", "poll", "(", "cls", ",", "context", ")", ":", "\n", "        ", "if", "len", "(", "context", ".", "selected_objects", ")", "==", "0", ":", "\n", "            ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.CreateBoundingBox.CreateBoundingBox.execute": [[112, 156], ["CreateBoundingBox.add_box", "bpy.data.meshes.new", "bmesh.new", "bmesh.new.verts.ensure_lookup_table", "bmesh.new.to_mesh", "bpy.data.meshes.new.update", "bpy_extras.object_utils.object_data_add", "bmesh.new.verts.new", "bmesh.new.faces.new", "mathutils.Vector"], "methods", ["home.repos.pwc.inspect_result.ajhamdi_SADA.None.CreateBoundingBox.add_box"], ["", "def", "execute", "(", "self", ",", "context", ")", ":", "\n", "        ", "minx", ",", "miny", ",", "minz", "=", "(", "999999.0", ",", ")", "*", "3", "\n", "maxx", ",", "maxy", ",", "maxz", "=", "(", "-", "999999.0", ",", ")", "*", "3", "\n", "for", "obj", "in", "context", ".", "selected_objects", ":", "\n", "            ", "for", "v", "in", "obj", ".", "bound_box", ":", "\n", "                ", "v_world", "=", "obj", ".", "matrix_world", "*", "mathutils", ".", "Vector", "(", "(", "v", "[", "0", "]", ",", "v", "[", "1", "]", ",", "v", "[", "2", "]", ")", ")", "\n", "\n", "if", "v_world", "[", "0", "]", "<", "minx", ":", "\n", "                    ", "minx", "=", "v_world", "[", "0", "]", "\n", "", "if", "v_world", "[", "0", "]", ">", "maxx", ":", "\n", "                    ", "maxx", "=", "v_world", "[", "0", "]", "\n", "\n", "", "if", "v_world", "[", "1", "]", "<", "miny", ":", "\n", "                    ", "miny", "=", "v_world", "[", "1", "]", "\n", "", "if", "v_world", "[", "1", "]", ">", "maxy", ":", "\n", "                    ", "maxy", "=", "v_world", "[", "1", "]", "\n", "\n", "", "if", "v_world", "[", "2", "]", "<", "minz", ":", "\n", "                    ", "minz", "=", "v_world", "[", "2", "]", "\n", "", "if", "v_world", "[", "2", "]", ">", "maxz", ":", "\n", "                    ", "maxz", "=", "v_world", "[", "2", "]", "\n", "\n", "", "", "", "verts_loc", ",", "faces", "=", "add_box", "(", "(", "maxx", "-", "minx", ")", "/", "2", ",", "(", "maxz", "-", "minz", ")", "/", "2", ",", "(", "maxy", "-", "miny", ")", "/", "2", ")", "\n", "mesh", "=", "bpy", ".", "data", ".", "meshes", ".", "new", "(", "\"BoundingBox\"", ")", "\n", "bm", "=", "bmesh", ".", "new", "(", ")", "\n", "for", "v_co", "in", "verts_loc", ":", "\n", "            ", "bm", ".", "verts", ".", "new", "(", "v_co", ")", "\n", "\n", "", "bm", ".", "verts", ".", "ensure_lookup_table", "(", ")", "\n", "\n", "for", "f_idx", "in", "faces", ":", "\n", "            ", "bm", ".", "faces", ".", "new", "(", "[", "bm", ".", "verts", "[", "i", "]", "for", "i", "in", "f_idx", "]", ")", "\n", "\n", "", "bm", ".", "to_mesh", "(", "mesh", ")", "\n", "mesh", ".", "update", "(", ")", "\n", "self", ".", "location", "[", "0", "]", "=", "minx", "+", "(", "(", "maxx", "-", "minx", ")", "/", "2", ")", "\n", "self", ".", "location", "[", "1", "]", "=", "miny", "+", "(", "(", "maxy", "-", "miny", ")", "/", "2", ")", "\n", "self", ".", "location", "[", "2", "]", "=", "minz", "+", "(", "(", "maxz", "-", "minz", ")", "/", "2", ")", "\n", "bbox", "=", "object_utils", ".", "object_data_add", "(", "context", ",", "mesh", ",", "operator", "=", "self", ")", "\n", "# does a bounding box need to display more than the bounds??", "\n", "bbox", ".", "object", ".", "draw_type", "=", "'BOUNDS'", "\n", "bbox", ".", "object", ".", "hide_render", "=", "True", "\n", "\n", "return", "{", "'FINISHED'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.CreateBoundingBox.add_box": [[55, 84], ["enumerate"], "function", ["None"], ["def", "add_box", "(", "width", ",", "height", ",", "depth", ")", ":", "\n", "    ", "\"\"\"\n    This function takes inputs and returns vertex and face arrays.\n    no actual mesh data creation is done here.\n    \"\"\"", "\n", "\n", "verts", "=", "[", "(", "+", "1.0", ",", "+", "1.0", ",", "-", "1.0", ")", ",", "\n", "(", "+", "1.0", ",", "-", "1.0", ",", "-", "1.0", ")", ",", "\n", "(", "-", "1.0", ",", "-", "1.0", ",", "-", "1.0", ")", ",", "\n", "(", "-", "1.0", ",", "+", "1.0", ",", "-", "1.0", ")", ",", "\n", "(", "+", "1.0", ",", "+", "1.0", ",", "+", "1.0", ")", ",", "\n", "(", "+", "1.0", ",", "-", "1.0", ",", "+", "1.0", ")", ",", "\n", "(", "-", "1.0", ",", "-", "1.0", ",", "+", "1.0", ")", ",", "\n", "(", "-", "1.0", ",", "+", "1.0", ",", "+", "1.0", ")", ",", "\n", "]", "\n", "\n", "faces", "=", "[", "(", "0", ",", "1", ",", "2", ",", "3", ")", ",", "\n", "(", "4", ",", "7", ",", "6", ",", "5", ")", ",", "\n", "(", "0", ",", "4", ",", "5", ",", "1", ")", ",", "\n", "(", "1", ",", "5", ",", "6", ",", "2", ")", ",", "\n", "(", "2", ",", "6", ",", "7", ",", "3", ")", ",", "\n", "(", "4", ",", "0", ",", "3", ",", "7", ")", ",", "\n", "]", "\n", "\n", "# apply size", "\n", "for", "i", ",", "v", "in", "enumerate", "(", "verts", ")", ":", "\n", "        ", "verts", "[", "i", "]", "=", "v", "[", "0", "]", "*", "width", ",", "v", "[", "1", "]", "*", "depth", ",", "v", "[", "2", "]", "*", "height", "\n", "\n", "", "return", "verts", ",", "faces", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.CreateBoundingBox.menu_boundbox": [[157, 159], ["CreateBoundingBox..layout.operator"], "function", ["None"], ["", "", "def", "menu_boundbox", "(", "self", ",", "context", ")", ":", "\n", "    ", "self", ".", "layout", ".", "operator", "(", "CreateBoundingBox", ".", "bl_idname", ",", "text", "=", "CreateBoundingBox", ".", "bl_label", ",", "icon", "=", "\"PLUGIN\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.CreateBoundingBox.register": [[160, 163], ["bpy.utils.register_class", "bpy.types.INFO_MT_mesh_add.append"], "function", ["None"], ["", "def", "register", "(", ")", ":", "\n", "    ", "bpy", ".", "utils", ".", "register_class", "(", "CreateBoundingBox", ")", "\n", "bpy", ".", "types", ".", "INFO_MT_mesh_add", ".", "append", "(", "menu_boundbox", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.CreateBoundingBox.unregister": [[164, 167], ["bpy.utils.unregister_class", "bpy.types.INFO_MT_mesh_add.remove"], "function", ["None"], ["", "def", "unregister", "(", ")", ":", "\n", "    ", "bpy", ".", "utils", ".", "unregister_class", "(", "CreateBoundingBox", ")", "\n", "bpy", ".", "types", ".", "INFO_MT_mesh_add", ".", "remove", "(", "menu_boundbox", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.blender.Blender.__init__": [[7, 18], ["list", "open", "blender.Blender._code.splitlines", "file.read", "line.startswith", "blender.Blender._register", "line.find"], "methods", ["home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.Blender._register"], ["\t", "def", "__init__", "(", "self", ",", "py_file", ",", "blend_file", "=", "None", ",", "*", "args", ")", ":", "\n", "\t\t", "self", ".", "_args", "=", "list", "(", "args", ")", "\n", "self", ".", "_blend_file", "=", "blend_file", "\n", "self", ".", "_commands", "=", "[", "]", "\n", "\n", "# read code and register all top-level non-hidden functions", "\n", "with", "open", "(", "py_file", ",", "'r'", ")", "as", "file", ":", "\n", "\t\t\t", "self", ".", "_code", "=", "file", ".", "read", "(", ")", "+", "'\\n'", "*", "2", "\n", "for", "line", "in", "self", ".", "_code", ".", "splitlines", "(", ")", ":", "\n", "\t\t\t\t", "if", "line", ".", "startswith", "(", "'def '", ")", "and", "line", "[", "4", "]", "!=", "'_'", ":", "\n", "\t\t\t\t\t", "self", ".", "_register", "(", "line", "[", "4", ":", "line", ".", "find", "(", "'('", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.blender.Blender.__call__": [[19, 24], ["blender.Blender._commands.append", "len", "str", "kwargs.items", "repr"], "methods", ["None"], ["", "", "", "", "def", "__call__", "(", "self", ",", "blender_func_name", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\t\t", "args", "=", "str", "(", "args", ")", "[", "1", ":", "-", "1", "]", "+", "','", "if", "len", "(", "args", ")", ">", "0", "else", "''", "\n", "kwargs", "=", "''", ".", "join", "(", "[", "k", "+", "'='", "+", "repr", "(", "v", ")", "+", "','", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", "]", ")", "\n", "cmd", "=", "blender_func_name", "+", "'('", "+", "(", "args", "+", "kwargs", ")", "[", ":", "-", "1", "]", "+", "')'", "\n", "self", ".", "_commands", ".", "append", "(", "cmd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.blender.Blender.execute": [[25, 44], ["bytearray", "subprocess.Popen", "subprocess.Popen.communicate", "out.decode.decode.decode", "err.decode.decode.decode", "len", "blender.Blender._print", "cmd.insert", "blender.Blender._code.splitlines"], "methods", ["home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.Blender._print"], ["", "def", "execute", "(", "self", ",", "timeout", "=", "None", ",", "encoding", "=", "'utf-8'", ")", ":", "\n", "# command to run blender in the background as a python console", "\n", "\t\t", "cmd", "=", "[", "'blender'", ",", "'--background'", ",", "'--python-console'", "]", "+", "self", ".", "_args", "\n", "# setup a *.blend file to load when running blender", "\n", "if", "self", ".", "_blend_file", "is", "not", "None", ":", "\n", "\t\t\t", "cmd", ".", "insert", "(", "1", ",", "self", ".", "_blend_file", ")", "\n", "# compile the source code from the py_file and the stacked commands", "\n", "", "code", "=", "self", ".", "_code", "+", "''", ".", "join", "(", "l", "+", "'\\n'", "for", "l", "in", "self", ".", "_commands", ")", "\n", "byte_code", "=", "bytearray", "(", "code", ",", "encoding", ")", "\n", "# run blender and the compiled source code", "\n", "p", "=", "Popen", "(", "cmd", ",", "stdin", "=", "PIPE", ",", "stdout", "=", "PIPE", ",", "stderr", "=", "PIPE", ")", "\n", "out", ",", "err", "=", "p", ".", "communicate", "(", "byte_code", ",", "timeout", "=", "timeout", ")", "\n", "# get the output and print it", "\n", "out", "=", "out", ".", "decode", "(", "encoding", ")", "\n", "err", "=", "err", ".", "decode", "(", "encoding", ")", "\n", "skip", "=", "len", "(", "self", ".", "_code", ".", "splitlines", "(", ")", ")", "\n", "Blender", ".", "_print", "(", "out", ",", "err", ",", "skip", ",", "self", ".", "_commands", ")", "\n", "# empty the commands list", "\n", "self", ".", "_commands", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.blender.Blender._register": [[45, 48], ["setattr", "blender.Blender."], "methods", ["None"], ["", "def", "_register", "(", "self", ",", "func", ")", ":", "\n", "\t\t", "call", "=", "lambda", "*", "a", ",", "**", "k", ":", "self", "(", "func", ",", "*", "a", ",", "**", "k", ")", "\n", "setattr", "(", "self", ",", "func", ",", "call", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.blender.Blender._print": [[49, 67], ["blender.Blender._print.replace"], "methods", ["None"], ["", "def", "_print", "(", "out", ",", "err", ",", "skip", ",", "commands", ")", ":", "\n", "\t\t", "def", "replace", "(", "out", ",", "lst", ")", ":", "\n", "\t\t\t", "lst", "=", "[", "''", "]", "*", "lst", "if", "isinstance", "(", "lst", ",", "Number", ")", "else", "lst", "\n", "for", "string", "in", "lst", ":", "\n", "\t\t\t\t", "i", ",", "j", "=", "out", ".", "find", "(", "'>>> '", ")", ",", "out", ".", "find", "(", "'... '", ")", "\n", "ind", "=", "max", "(", "i", ",", "j", ")", "if", "min", "(", "i", ",", "j", ")", "==", "-", "1", "else", "min", "(", "i", ",", "j", ")", "\n", "out", "=", "out", "[", ":", "ind", "]", "+", "string", "+", "out", "[", "ind", "+", "4", ":", "]", "\n", "", "return", "out", "\n", "", "out", "=", "replace", "(", "out", ",", "skip", ")", "\n", "out", "=", "replace", "(", "out", ",", "[", "'${ '", "+", "c", "+", "' }$\\n'", "for", "c", "in", "commands", "]", ")", "\n", "print", "(", "'${Running on Blender}$'", ")", "\n", "out", "=", "out", "[", ":", "-", "19", "]", "\n", "print", "(", "out", ")", "\n", "err", "=", "err", "[", "err", ".", "find", "(", "'(InteractiveConsole)'", ")", "+", "22", ":", "]", "\n", "if", "err", ":", "\n", "\t\t\t", "print", "(", "err", ")", "\n", "", "print", "(", "'${Blender Done}$'", ")", "\n", "return", "out", ",", "err", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.Blender.__init__": [[462, 475], ["list", "open", "utils.Blender._code.splitlines", "file.read", "line.startswith", "utils.Blender._register", "line.find"], "methods", ["home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.Blender._register"], ["    ", "def", "__init__", "(", "self", ",", "cluster", ",", "py_file", ",", "blend_file", "=", "None", ",", "*", "args", ")", ":", "\n", "        ", "self", ".", "_args", "=", "list", "(", "args", ")", "\n", "self", ".", "cluster", "=", "cluster", "\n", "self", ".", "_blend_file", "=", "blend_file", "\n", "self", ".", "_commands", "=", "[", "]", "\n", "self", ".", "relative_path", "=", "\"../bin/blender_folder/\"", "\n", "\n", "# read code and register all top-level non-hidden functions", "\n", "with", "open", "(", "py_file", ",", "'r'", ")", "as", "file", ":", "\n", "            ", "self", ".", "_code", "=", "file", ".", "read", "(", ")", "+", "'\\n'", "*", "2", "\n", "for", "line", "in", "self", ".", "_code", ".", "splitlines", "(", ")", ":", "\n", "                ", "if", "line", ".", "startswith", "(", "'def '", ")", "and", "line", "[", "4", "]", "!=", "'_'", ":", "\n", "                    ", "self", ".", "_register", "(", "line", "[", "4", ":", "line", ".", "find", "(", "'('", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.Blender.__call__": [[476, 481], ["utils.Blender._commands.append", "len", "str", "kwargs.items", "repr"], "methods", ["None"], ["", "", "", "", "def", "__call__", "(", "self", ",", "blender_func_name", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "args", "=", "str", "(", "args", ")", "[", "1", ":", "-", "1", "]", "+", "','", "if", "len", "(", "args", ")", ">", "0", "else", "''", "\n", "kwargs", "=", "''", ".", "join", "(", "[", "k", "+", "'='", "+", "repr", "(", "v", ")", "+", "','", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", "]", ")", "\n", "cmd", "=", "blender_func_name", "+", "'('", "+", "(", "args", "+", "kwargs", ")", "[", ":", "-", "1", "]", "+", "')'", "\n", "self", ".", "_commands", ".", "append", "(", "cmd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.Blender.execute": [[482, 504], ["bytearray", "subprocess.Popen", "subprocess.Popen.communicate", "out.decode.decode.decode", "err.decode.decode.decode", "len", "utils.Blender._print", "cmd.insert", "utils.Blender._code.splitlines"], "methods", ["home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.Blender._print"], ["", "def", "execute", "(", "self", ",", "timeout", "=", "None", ",", "encoding", "=", "'utf-8'", ")", ":", "\n", "# command to run blender in the background as a python console", "\n", "        ", "if", "not", "self", ".", "cluster", ":", "\n", "            ", "cmd", "=", "[", "'blender'", ",", "'--background'", ",", "'--python-console'", "]", "+", "self", ".", "_args", "\n", "", "else", ":", "\n", "            ", "cmd", "=", "[", "'./%sblender'", "%", "(", "self", ".", "relative_path", ")", ",", "'--background'", ",", "'--python-console'", "]", "+", "self", ".", "_args", "\n", "# setup a *.blend file to load when running blender", "\n", "", "if", "self", ".", "_blend_file", "is", "not", "None", ":", "\n", "            ", "cmd", ".", "insert", "(", "1", ",", "self", ".", "_blend_file", ")", "\n", "# compile the source code from the py_file and the stacked commands", "\n", "", "code", "=", "self", ".", "_code", "+", "''", ".", "join", "(", "l", "+", "'\\n'", "for", "l", "in", "self", ".", "_commands", ")", "\n", "byte_code", "=", "bytearray", "(", "code", ",", "encoding", ")", "\n", "# run blender and the compiled source code", "\n", "p", "=", "Popen", "(", "cmd", ",", "stdin", "=", "PIPE", ",", "stdout", "=", "PIPE", ",", "stderr", "=", "PIPE", ")", "\n", "out", ",", "err", "=", "p", ".", "communicate", "(", "byte_code", ",", "timeout", "=", "timeout", ")", "\n", "# get the output and print it", "\n", "out", "=", "out", ".", "decode", "(", "encoding", ")", "\n", "err", "=", "err", ".", "decode", "(", "encoding", ")", "\n", "skip", "=", "len", "(", "self", ".", "_code", ".", "splitlines", "(", ")", ")", "\n", "Blender", ".", "_print", "(", "out", ",", "err", ",", "skip", ",", "self", ".", "_commands", ")", "\n", "# empty the commands list", "\n", "self", ".", "_commands", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.Blender._register": [[505, 508], ["setattr", "utils.Blender."], "methods", ["None"], ["", "def", "_register", "(", "self", ",", "func", ")", ":", "\n", "        ", "call", "=", "lambda", "*", "a", ",", "**", "k", ":", "self", "(", "func", ",", "*", "a", ",", "**", "k", ")", "\n", "setattr", "(", "self", ",", "func", ",", "call", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.Blender._print": [[509, 527], ["utils.Blender._print.replace"], "methods", ["None"], ["", "def", "_print", "(", "out", ",", "err", ",", "skip", ",", "commands", ")", ":", "\n", "        ", "def", "replace", "(", "out", ",", "lst", ")", ":", "\n", "            ", "lst", "=", "[", "''", "]", "*", "lst", "if", "isinstance", "(", "lst", ",", "Number", ")", "else", "lst", "\n", "for", "string", "in", "lst", ":", "\n", "                ", "i", ",", "j", "=", "out", ".", "find", "(", "'>>> '", ")", ",", "out", ".", "find", "(", "'... '", ")", "\n", "ind", "=", "max", "(", "i", ",", "j", ")", "if", "min", "(", "i", ",", "j", ")", "==", "-", "1", "else", "min", "(", "i", ",", "j", ")", "\n", "out", "=", "out", "[", ":", "ind", "]", "+", "string", "+", "out", "[", "ind", "+", "4", ":", "]", "\n", "", "return", "out", "\n", "", "out", "=", "replace", "(", "out", ",", "skip", ")", "\n", "out", "=", "replace", "(", "out", ",", "[", "'${ '", "+", "c", "+", "' }$\\n'", "for", "c", "in", "commands", "]", ")", "\n", "print", "(", "'${Running on Blender}$'", ")", "\n", "out", "=", "out", "[", ":", "-", "19", "]", "\n", "print", "(", "out", ")", "\n", "err", "=", "err", "[", "err", ".", "find", "(", "'(InteractiveConsole)'", ")", "+", "22", ":", "]", "\n", "if", "err", ":", "\n", "            ", "print", "(", "err", ")", "\n", "", "print", "(", "'${Blender Done}$'", ")", "\n", "return", "out", ",", "err", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.draw_boxes": [[20, 32], ["PIL.ImageDraw.Draw", "boxes.items", "tuple", "utils.convert_to_original_size", "ImageDraw.Draw.rectangle", "ImageDraw.Draw.text", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.mydemo.convert_to_original_size"], ["def", "draw_boxes", "(", "boxes", ",", "img", ",", "cls_names", ",", "detection_size", ")", ":", "\n", "    ", "draw", "=", "ImageDraw", ".", "Draw", "(", "img", ")", "\n", "\n", "for", "cls", ",", "bboxs", "in", "boxes", ".", "items", "(", ")", ":", "\n", "# color = tuple(np.random.randint(0, 256, 3))", "\n", "        ", "color", "=", "tuple", "(", "255", ",", "0", ",", "0", ")", "\n", "for", "box", ",", "score", "in", "bboxs", ":", "\n", "            ", "box", "=", "convert_to_original_size", "(", "\n", "box", ",", "np", ".", "array", "(", "detection_size", ")", ",", "np", ".", "array", "(", "img", ".", "size", ")", ")", "\n", "draw", ".", "rectangle", "(", "box", ",", "outline", "=", "color", ")", "\n", "draw", ".", "text", "(", "box", "[", ":", "2", "]", ",", "'{} {:.2f}%'", ".", "format", "(", "\n", "cls_names", "[", "cls", "]", ",", "score", "*", "100", ")", ",", "fill", "=", "color", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.convert_to_original_size": [[34, 38], ["list", "box.reshape", "box.reshape"], "function", ["home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.reshape", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.reshape"], ["", "", "", "def", "convert_to_original_size", "(", "box", ",", "size", ",", "original_size", ")", ":", "\n", "    ", "ratio", "=", "original_size", "/", "size", "\n", "box", "=", "box", ".", "reshape", "(", "2", ",", "2", ")", "*", "ratio", "\n", "return", "list", "(", "box", ".", "reshape", "(", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.random_lhs": [[40, 48], ["abs", "range", "required_list.append", "numpy.array", "lolo[].reshape", "lhsmdu.sample"], "function", ["home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.reshape"], ["", "def", "random_lhs", "(", "min_bound", ",", "max_bound", ",", "dimensions", ",", "number_samples", "=", "1", ")", ":", "\n", "    ", "import", "lhsmdu", "\n", "r_range", "=", "abs", "(", "max_bound", "-", "min_bound", ")", "\n", "lolo", "=", "r_range", "*", "np", ".", "array", "(", "lhsmdu", ".", "sample", "(", "dimensions", ",", "number_samples", ")", ")", "+", "min_bound", "\n", "required_list", "=", "[", "]", "\n", "for", "ii", "in", "range", "(", "number_samples", ")", ":", "\n", "        ", "required_list", ".", "append", "(", "lolo", "[", ":", ",", "ii", "]", ".", "reshape", "(", "-", "1", ")", ")", "\n", "", "return", "required_list", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.shuffle_list": [[49, 54], ["list", "random.shuffle", "zip", "zip"], "function", ["None"], ["", "def", "shuffle_list", "(", "*", "ls", ")", ":", "\n", "    ", "l", "=", "list", "(", "zip", "(", "*", "ls", ")", ")", "\n", "\n", "random", ".", "shuffle", "(", "l", ")", "\n", "return", "zip", "(", "*", "l", ")", "\n", "", "def", "splitting_train_test", "(", "all_Xs", ",", "all_Ys", ",", "percentage", ",", "shuffle", "=", "True", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.splitting_train_test": [[54, 62], ["int", "utils.shuffle_list", "utils.shuffle_list", "list", "list", "list", "list", "len"], "function", ["home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.shuffle_list", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.shuffle_list"], ["", "def", "splitting_train_test", "(", "all_Xs", ",", "all_Ys", ",", "percentage", ",", "shuffle", "=", "True", ")", ":", "\n", "    ", "splitting_index", "=", "int", "(", "percentage", "*", "len", "(", "all_Xs", ")", "/", "100.0", ")", "\n", "train_x", ",", "test_x", "=", "all_Xs", "[", "0", ":", "splitting_index", "]", ",", "all_Xs", "[", "splitting_index", "+", "1", ":", ":", "]", "\n", "train_y", ",", "test_y", "=", "all_Ys", "[", "0", ":", "splitting_index", "]", ",", "all_Ys", "[", "splitting_index", "+", "1", ":", ":", "]", "\n", "if", "shuffle", ":", "\n", "        ", "train_x", ",", "train_y", "=", "shuffle_list", "(", "train_x", ",", "train_y", ")", "\n", "test_x", ",", "test_y", "=", "shuffle_list", "(", "test_x", ",", "test_y", ")", "\n", "", "return", "list", "(", "train_x", ")", ",", "list", "(", "train_y", ")", ",", "list", "(", "test_x", ")", ",", "list", "(", "test_y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.prepare_dirs_and_logger": [[63, 89], ["logging.Formatter", "logging.getLogger", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "os.path.join", "logging.getLogger.removeHandler", "config.load_path.startswith", "hasattr", "os.path.join", "config.load_path.startswith", "utils.get_time"], "function", ["home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.get_time"], ["", "def", "prepare_dirs_and_logger", "(", "config", ")", ":", "\n", "    ", "formatter", "=", "logging", ".", "Formatter", "(", "\"%(asctime)s:%(levelname)s::%(message)s\"", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "\n", "for", "hdlr", "in", "logger", ".", "handlers", ":", "\n", "        ", "logger", ".", "removeHandler", "(", "hdlr", ")", "\n", "\n", "", "handler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "handler", ".", "setFormatter", "(", "formatter", ")", "\n", "\n", "logger", ".", "addHandler", "(", "handler", ")", "\n", "\n", "if", "config", ".", "load_path", ":", "\n", "        ", "if", "config", ".", "load_path", ".", "startswith", "(", "config", ".", "log_dir", ")", ":", "\n", "            ", "config", ".", "model_dir", "=", "config", ".", "load_path", "\n", "", "else", ":", "\n", "            ", "if", "config", ".", "load_path", ".", "startswith", "(", "config", ".", "dataset", ")", ":", "\n", "                ", "config", ".", "model_name", "=", "config", ".", "load_path", "\n", "", "else", ":", "\n", "                ", "config", ".", "model_name", "=", "\"{}_{}\"", ".", "format", "(", "config", ".", "dataset", ",", "config", ".", "load_path", ")", "\n", "", "", "", "else", ":", "\n", "        ", "config", ".", "model_name", "=", "\"{}_{}\"", ".", "format", "(", "config", ".", "dataset", ",", "get_time", "(", ")", ")", "\n", "\n", "", "if", "not", "hasattr", "(", "config", ",", "'model_dir'", ")", ":", "\n", "        ", "config", ".", "model_dir", "=", "os", ".", "path", ".", "join", "(", "config", ".", "log_dir", ",", "config", ".", "model_name", ")", "\n", "", "config", ".", "data_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "data_dir", ",", "config", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.get_time": [[94, 96], ["datetime.datetime.now().strftime", "datetime.datetime.now"], "function", ["None"], ["", "def", "get_time", "(", ")", ":", "\n", "    ", "return", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%m%d_%H%M%S\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.forward_transform": [[97, 99], ["numpy.array"], "function", ["None"], ["", "def", "forward_transform", "(", "image", ")", ":", "\n", "    ", "return", "np", ".", "array", "(", "image", ")", "/", "127.5", "-", "1.", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.inverse_transform": [[100, 102], ["numpy.floor().astype", "numpy.floor"], "function", ["None"], ["", "def", "inverse_transform", "(", "images", ")", ":", "\n", "    ", "return", "np", ".", "floor", "(", "127.5", "*", "(", "images", "+", "1.", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", "def", "save_config", "(", "config", ",", "trainer", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.save_config": [[102, 110], ["os.path.join", "print", "print", "open", "json.dump"], "function", ["None"], ["", "def", "save_config", "(", "config", ",", "trainer", ")", ":", "\n", "    ", "param_path", "=", "os", ".", "path", ".", "join", "(", "trainer", ".", "model_dir", ",", "\"params.json\"", ")", "\n", "\n", "print", "(", "\"[*] MODEL dir: %s\"", "%", "trainer", ".", "model_dir", ")", "\n", "print", "(", "\"[*] PARAM path: %s\"", "%", "param_path", ")", "\n", "\n", "with", "open", "(", "param_path", ",", "'w'", ")", "as", "fp", ":", "\n", "        ", "json", ".", "dump", "(", "config", ".", "__dict__", ",", "fp", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.rank": [[111, 113], ["len"], "function", ["None"], ["", "", "def", "rank", "(", "array", ")", ":", "\n", "    ", "return", "len", "(", "array", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.make_grid": [[114, 133], ["min", "int", "numpy.zeros", "range", "math.ceil", "int", "int", "range", "float"], "function", ["None"], ["", "def", "make_grid", "(", "tensor", ",", "nrow", "=", "8", ",", "padding", "=", "2", ",", "\n", "normalize", "=", "False", ",", "scale_each", "=", "False", ")", ":", "\n", "    ", "\"\"\"Code based on https://github.com/pytorch/vision/blob/master/torchvision/utils.py\"\"\"", "\n", "nmaps", "=", "tensor", ".", "shape", "[", "0", "]", "\n", "xmaps", "=", "min", "(", "nrow", ",", "nmaps", ")", "\n", "ymaps", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "nmaps", ")", "/", "xmaps", ")", ")", "\n", "height", ",", "width", "=", "int", "(", "tensor", ".", "shape", "[", "1", "]", "+", "padding", ")", ",", "int", "(", "tensor", ".", "shape", "[", "2", "]", "+", "padding", ")", "\n", "grid", "=", "np", ".", "zeros", "(", "[", "height", "*", "ymaps", "+", "1", "+", "padding", "//", "2", ",", "width", "*", "xmaps", "+", "1", "+", "padding", "//", "2", ",", "3", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "k", "=", "0", "\n", "for", "y", "in", "range", "(", "ymaps", ")", ":", "\n", "        ", "for", "x", "in", "range", "(", "xmaps", ")", ":", "\n", "            ", "if", "k", ">=", "nmaps", ":", "\n", "                ", "break", "\n", "", "h", ",", "h_width", "=", "y", "*", "height", "+", "1", "+", "padding", "//", "2", ",", "height", "-", "padding", "\n", "w", ",", "w_width", "=", "x", "*", "width", "+", "1", "+", "padding", "//", "2", ",", "width", "-", "padding", "\n", "\n", "grid", "[", "h", ":", "h", "+", "h_width", ",", "w", ":", "w", "+", "w_width", "]", "=", "tensor", "[", "k", "]", "\n", "k", "=", "k", "+", "1", "\n", "", "", "return", "grid", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.save_image": [[134, 140], ["utils.make_grid", "PIL.Image.fromarray", "Image.fromarray.save"], "function", ["home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.make_grid"], ["", "def", "save_image", "(", "tensor", ",", "filename", ",", "nrow", "=", "8", ",", "padding", "=", "2", ",", "\n", "normalize", "=", "False", ",", "scale_each", "=", "False", ")", ":", "\n", "    ", "ndarr", "=", "make_grid", "(", "tensor", ",", "nrow", "=", "nrow", ",", "padding", "=", "padding", ",", "\n", "normalize", "=", "normalize", ",", "scale_each", "=", "scale_each", ")", "\n", "im", "=", "Image", ".", "fromarray", "(", "ndarr", ")", "\n", "im", ".", "save", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.merge": [[141, 149], ["numpy.zeros", "enumerate"], "function", ["None"], ["", "def", "merge", "(", "images", ",", "size", ")", ":", "\n", "    ", "h", ",", "w", "=", "images", ".", "shape", "[", "1", "]", ",", "images", ".", "shape", "[", "2", "]", "\n", "img", "=", "np", ".", "zeros", "(", "(", "h", "*", "size", "[", "0", "]", ",", "w", "*", "size", "[", "1", "]", ",", "3", ")", ")", "\n", "for", "idx", ",", "image", "in", "enumerate", "(", "images", ")", ":", "\n", "        ", "i", "=", "idx", "%", "size", "[", "1", "]", "\n", "j", "=", "idx", "%", "size", "[", "1", "]", "\n", "img", "[", "j", "*", "h", ":", "j", "*", "h", "+", "h", ",", "i", "*", "w", ":", "i", "*", "w", "+", "w", ",", ":", "]", "=", "image", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.imsave": [[150, 158], ["range", "scipy.misc.imsave", "os.path.splitext", "scipy.misc.imsave", "utils.merge"], "function", ["home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.imsave", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.imsave", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.merge"], ["", "def", "imsave", "(", "images", ",", "size", ",", "path", ",", "is_all", "=", "False", ")", ":", "\n", "    ", "if", "is_all", ":", "\n", "        ", "for", "ii", "in", "range", "(", "images", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "filename", ",", "file_extension", "=", "os", ".", "path", ".", "splitext", "(", "path", ")", "\n", "subimage_name", "=", "filename", "+", "'_P{}'", ".", "format", "(", "ii", ")", "+", "file_extension", "\n", "scipy", ".", "misc", ".", "imsave", "(", "subimage_name", ",", "images", "[", "ii", ",", ":", ",", ":", ",", ":", "]", ")", "\n", "", "", "else", ":", "\n", "        ", "return", "scipy", ".", "misc", ".", "imsave", "(", "path", ",", "merge", "(", "images", ",", "size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.resize_image": [[159, 287], ["isinstance", "ValueError", "ValueError", "numpy.array", "ValueError", "float", "float", "cv2.resize", "np.repeat().reshape.astype", "np.repeat().reshape.reshape", "cv2.resize", "int", "int", "int", "int", "cv2.resize", "numpy.random.randint().astype", "numpy.concatenate", "numpy.random.randint().astype", "numpy.concatenate", "ValueError", "round", "round", "round", "round", "int", "int", "int", "int", "cv2.resize", "Exception", "numpy.dot().astype", "ValueError", "numpy.repeat().reshape", "round", "round", "round", "round", "int", "int", "numpy.random.randint", "numpy.random.randint", "ValueError", "round", "round", "numpy.dot", "numpy.repeat"], "function", ["home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.reshape", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.reshape"], ["", "", "def", "resize_image", "(", "image", ",", "height", ",", "width", ",", "channels", "=", "None", ",", "resize_mode", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Resizes an image and returns it as a np.array\n    Arguments:\n    image -- a PIL.Image or numpy.ndarray\n    height -- height of new image\n    width -- width of new image\n    Keyword Arguments:\n    channels -- channels of new image (stays unchanged if not specified)\n    resize_mode -- can be crop, squash, fill or half_crop\n    \"\"\"", "\n", "if", "resize_mode", "is", "None", ":", "\n", "        ", "resize_mode", "=", "'squash'", "\n", "", "if", "resize_mode", "not", "in", "[", "'crop'", ",", "'squash'", ",", "'fill'", ",", "'half_crop'", "]", ":", "\n", "        ", "raise", "ValueError", "(", "'resize_mode \"%s\" not supported'", "%", "resize_mode", ")", "\n", "\n", "", "if", "channels", "not", "in", "[", "None", ",", "1", ",", "3", "]", ":", "\n", "        ", "raise", "ValueError", "(", "'unsupported number of channels: %s'", "%", "channels", ")", "\n", "\n", "image", "=", "np", ".", "array", "(", "image", ")", "\n", "", "if", "isinstance", "(", "image", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "if", "image", ".", "dtype", "!=", "np", ".", "uint8", ":", "\n", "            ", "image", "=", "image", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", "if", "image", ".", "ndim", "==", "3", "and", "image", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "            ", "image", "=", "image", ".", "reshape", "(", "image", ".", "shape", "[", ":", "2", "]", ")", "\n", "", "if", "channels", "is", "None", ":", "\n", "            ", "if", "image", ".", "ndim", "==", "2", ":", "\n", "                ", "channels", "=", "1", "\n", "", "elif", "image", ".", "ndim", "==", "3", "and", "image", ".", "shape", "[", "2", "]", "==", "3", ":", "\n", "                ", "channels", "=", "3", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'invalid image shape: %s'", "%", "(", "image", ".", "shape", ",", ")", ")", "\n", "", "", "elif", "channels", "==", "1", ":", "\n", "            ", "if", "image", ".", "ndim", "!=", "2", ":", "\n", "                ", "if", "image", ".", "ndim", "==", "3", "and", "image", ".", "shape", "[", "2", "]", "==", "3", ":", "\n", "# color to grayscale", "\n", "                    ", "image", "=", "np", ".", "dot", "(", "image", ",", "[", "0.299", ",", "0.587", ",", "0.114", "]", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "'invalid image shape: %s'", "%", "(", "image", ".", "shape", ",", ")", ")", "\n", "", "", "", "elif", "channels", "==", "3", ":", "\n", "            ", "if", "image", ".", "ndim", "==", "2", ":", "\n", "# grayscale to color", "\n", "                ", "image", "=", "np", ".", "repeat", "(", "image", ",", "3", ")", ".", "reshape", "(", "image", ".", "shape", "+", "(", "3", ",", ")", ")", "\n", "", "elif", "image", ".", "shape", "[", "2", "]", "!=", "3", ":", "\n", "                ", "raise", "ValueError", "(", "'invalid image shape: %s'", "%", "(", "image", ".", "shape", ",", ")", ")", "\n", "", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'resize_image() expected a PIL.Image.Image or a numpy.ndarray'", ")", "\n", "\n", "# No need to resize", "\n", "", "if", "image", ".", "shape", "[", "0", "]", "==", "height", "and", "image", ".", "shape", "[", "1", "]", "==", "width", ":", "\n", "        ", "return", "image", "\n", "\n", "# Resize", "\n", "", "interp", "=", "'bilinear'", "\n", "\n", "width_ratio", "=", "float", "(", "image", ".", "shape", "[", "1", "]", ")", "/", "width", "\n", "height_ratio", "=", "float", "(", "image", ".", "shape", "[", "0", "]", ")", "/", "height", "\n", "if", "resize_mode", "==", "'squash'", "or", "width_ratio", "==", "height_ratio", ":", "\n", "        ", "return", "cv2", ".", "resize", "(", "image", ",", "(", "height", ",", "width", ")", ")", "\n", "", "elif", "resize_mode", "==", "'crop'", ":", "\n", "# resize to smallest of ratios (relatively larger image), keeping aspect ratio", "\n", "        ", "if", "width_ratio", ">", "height_ratio", ":", "\n", "\n", "            ", "resize_height", "=", "height", "\n", "resize_width", "=", "int", "(", "round", "(", "image", ".", "shape", "[", "1", "]", "/", "height_ratio", ")", ")", "\n", "", "else", ":", "\n", "            ", "resize_width", "=", "width", "\n", "resize_height", "=", "int", "(", "round", "(", "image", ".", "shape", "[", "0", "]", "/", "width_ratio", ")", ")", "\n", "", "image", "=", "cv2", ".", "resize", "(", "image", ",", "(", "resize_width", ",", "resize_height", ")", ")", "\n", "\n", "# chop off ends of dimension that is still too long", "\n", "if", "width_ratio", ">", "height_ratio", ":", "\n", "            ", "start", "=", "int", "(", "round", "(", "(", "resize_width", "-", "width", ")", "/", "2.0", ")", ")", "\n", "return", "image", "[", ":", ",", "start", ":", "start", "+", "width", ",", ":", "]", "\n", "", "else", ":", "\n", "            ", "start", "=", "int", "(", "round", "(", "(", "resize_height", "-", "height", ")", "/", "2.0", ")", ")", "\n", "return", "image", "[", "start", ":", "start", "+", "height", ",", ":", ",", ":", "]", "\n", "", "", "else", ":", "\n", "        ", "if", "resize_mode", "==", "'fill'", ":", "\n", "# resize to biggest of ratios (relatively smaller image), keeping aspect ratio", "\n", "            ", "if", "width_ratio", ">", "height_ratio", ":", "\n", "                ", "resize_width", "=", "width", "\n", "resize_height", "=", "int", "(", "round", "(", "image", ".", "shape", "[", "0", "]", "/", "width_ratio", ")", ")", "\n", "if", "(", "height", "-", "resize_height", ")", "%", "2", "==", "1", ":", "\n", "                    ", "resize_height", "+=", "1", "\n", "", "", "else", ":", "\n", "                ", "resize_height", "=", "height", "\n", "resize_width", "=", "int", "(", "round", "(", "image", ".", "shape", "[", "1", "]", "/", "height_ratio", ")", ")", "\n", "if", "(", "width", "-", "resize_width", ")", "%", "2", "==", "1", ":", "\n", "                    ", "resize_width", "+=", "1", "\n", "", "", "image", "=", "cv2", ".", "resize", "(", "image", ",", "(", "resize_width", ",", "resize_height", ")", ")", "\n", "", "elif", "resize_mode", "==", "'half_crop'", ":", "\n", "# resize to average ratio keeping aspect ratio", "\n", "            ", "new_ratio", "=", "(", "width_ratio", "+", "height_ratio", ")", "/", "2.0", "\n", "resize_width", "=", "int", "(", "round", "(", "image", ".", "shape", "[", "1", "]", "/", "new_ratio", ")", ")", "\n", "resize_height", "=", "int", "(", "round", "(", "image", ".", "shape", "[", "0", "]", "/", "new_ratio", ")", ")", "\n", "if", "width_ratio", ">", "height_ratio", "and", "(", "height", "-", "resize_height", ")", "%", "2", "==", "1", ":", "\n", "                ", "resize_height", "+=", "1", "\n", "", "elif", "width_ratio", "<", "height_ratio", "and", "(", "width", "-", "resize_width", ")", "%", "2", "==", "1", ":", "\n", "                ", "resize_width", "+=", "1", "\n", "", "image", "=", "cv2", ".", "resize", "(", "image", ",", "(", "resize_width", ",", "resize_height", ")", ")", "\n", "# chop off ends of dimension that is still too long", "\n", "if", "width_ratio", ">", "height_ratio", ":", "\n", "                ", "start", "=", "int", "(", "round", "(", "(", "resize_width", "-", "width", ")", "/", "2.0", ")", ")", "\n", "image", "=", "image", "[", ":", ",", "start", ":", "start", "+", "width", "]", "\n", "", "else", ":", "\n", "                ", "start", "=", "int", "(", "round", "(", "(", "resize_height", "-", "height", ")", "/", "2.0", ")", ")", "\n", "image", "=", "image", "[", "start", ":", "start", "+", "height", ",", ":", "]", "\n", "", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'unrecognized resize_mode \"%s\"'", "%", "resize_mode", ")", "\n", "\n", "# fill ends of dimension that is too short with random noise", "\n", "", "if", "width_ratio", ">", "height_ratio", ":", "\n", "            ", "padding", "=", "(", "height", "-", "resize_height", ")", "/", "2", "\n", "noise_size", "=", "(", "padding", ",", "width", ")", "\n", "if", "channels", ">", "1", ":", "\n", "                ", "noise_size", "+=", "(", "channels", ",", ")", "\n", "", "noise", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "255", ",", "noise_size", ")", ".", "astype", "(", "'uint8'", ")", "\n", "image", "=", "np", ".", "concatenate", "(", "(", "noise", ",", "image", ",", "noise", ")", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "padding", "=", "(", "width", "-", "resize_width", ")", "/", "2", "\n", "noise_size", "=", "(", "height", ",", "padding", ")", "\n", "if", "channels", ">", "1", ":", "\n", "                ", "noise_size", "+=", "(", "channels", ",", ")", "\n", "", "noise", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "255", ",", "noise_size", ")", ".", "astype", "(", "'uint8'", ")", "\n", "image", "=", "np", ".", "concatenate", "(", "(", "noise", ",", "image", ",", "noise", ")", ",", "axis", "=", "1", ")", "\n", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.read_images_to_np": [[289, 319], ["os.walk", "print", "utils.resize_image", "len", "os.path.join", "cv2.imread", "indices_missing.append", "cv2.cvtColor", "images.append", "images.append", "utils.forward_transform", "filename.lower().endswith", "filename.lower"], "function", ["home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.resize_image", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.forward_transform"], ["", "", "def", "read_images_to_np", "(", "path", ",", "h", ",", "w", ",", "extension", "=", "\"all\"", ",", "allowmax", "=", "False", ",", "maxnbr", "=", "0", ",", "d_type", "=", "np", ".", "float32", ",", "mode", "=", "\"BGR\"", ",", "normalize", "=", "False", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "for", "root", ",", "dirnames", ",", "filenames", "in", "os", ".", "walk", "(", "path", ")", ":", "\n", "        ", "exit_subdir", "=", "False", "\n", "indices_missing", "=", "[", "]", "\n", "indx", "=", "0", "\n", "max_nbr_pictures", "=", "maxnbr", "\n", "for", "filename", "in", "filenames", ":", "\n", "            ", "if", "not", "exit_subdir", "and", "(", "(", "(", "extension", "is", "not", "\"all\"", ")", "and", "filename", ".", "lower", "(", ")", ".", "endswith", "(", "\".\"", "+", "extension", ")", ")", "or", "extension", "is", "\"all\"", ")", ":", "\n", "                ", "filepath", "=", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", "\n", "image", "=", "cv2", ".", "imread", "(", "filepath", ")", "\n", "", "if", "image", "is", "None", ":", "\n", "                ", "indices_missing", ".", "append", "(", "indx", ")", "\n", "indx", "+=", "1", "\n", "continue", "\n", "", "if", "mode", "is", "\"RGB\"", ":", "\n", "                ", "image", "=", "cv2", ".", "cvtColor", "(", "image", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "", "image_resized", "=", "resize_image", "(", "image", ",", "h", ",", "w", ",", "resize_mode", "=", "\"crop\"", ")", "\n", "if", "normalize", ":", "\n", "                ", "images", ".", "append", "(", "forward_transform", "(", "image_resized", ")", ")", "\n", "", "else", ":", "\n", "                ", "images", ".", "append", "(", "image_resized", ")", "\n", "", "if", "allowmax", ":", "\n", "                ", "max_nbr_pictures", "=", "max_nbr_pictures", "-", "1", "\n", "if", "max_nbr_pictures", "is", "0", ":", "\n", "                    ", "exit_subdir", "=", "True", "\n", "", "", "indx", "+=", "1", "\n", "\n", "", "", "print", "(", "\"Finished reading the %d images ...\"", "%", "(", "len", "(", "images", ")", ")", ")", "\n", "return", "images", ",", "indices_missing", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.my_read_images": [[321, 348], ["sorted", "list", "print", "os.listdir", "int", "len", "range", "os.path.join", "cv2.imread", "cv2.cvtColor", "item.endswith", "indices_missing.append", "images.append", "images.append", "os.path.splitext", "utils.forward_transform", "len", "len"], "function", ["home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.forward_transform"], ["", "def", "my_read_images", "(", "path", ",", "h", ",", "w", ",", "expected_number", "=", "0", ",", "extension", "=", "\"jpg\"", ",", "d_type", "=", "np", ".", "float32", ",", "normalize", "=", "False", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "indices_missing", "=", "[", "]", "\n", "file_list", "=", "sorted", "(", "os", ".", "listdir", "(", "path", ")", ")", "\n", "images_list", "=", "[", "item", "for", "item", "in", "file_list", "if", "item", ".", "endswith", "(", "'.'", "+", "extension", ")", "]", "\n", "images_numbers", "=", "[", "int", "(", "os", ".", "path", ".", "splitext", "(", "img", ")", "[", "0", "]", ")", "for", "img", "in", "images_list", "]", "\n", "if", "not", "expected_number", ":", "\n", "        ", "expected_number", "=", "len", "(", "images_numbers", ")", "\n", "", "expected_numbers", "=", "list", "(", "range", "(", "expected_number", ")", ")", "\n", "indx", "=", "0", "\n", "for", "img", "in", "images_list", ":", "\n", "        ", "img_name", "=", "os", ".", "path", ".", "join", "(", "path", ",", "img", ")", "\n", "image", "=", "cv2", ".", "imread", "(", "img_name", ")", "\n", "if", "image", "is", "None", ":", "\n", "            ", "indices_missing", ".", "append", "(", "images_numbers", "[", "indx", "]", ")", "\n", "indx", "+=", "1", "\n", "continue", "\n", "", "image", "=", "cv2", ".", "cvtColor", "(", "image", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "# image_resized = resize_image(image, h, w,resize_mode=\"crop\") ", "\n", "if", "normalize", ":", "\n", "            ", "images", ".", "append", "(", "forward_transform", "(", "image", ")", ")", "\n", "", "else", ":", "\n", "            ", "images", ".", "append", "(", "image", ")", "\n", "", "indx", "+=", "1", "\n", "", "print", "(", "\"Finished reading the %d images ...missing: %d images \"", "%", "(", "len", "(", "images", ")", ",", "expected_number", "-", "len", "(", "images", ")", ")", ")", "\n", "indices_missing", "+=", "[", "x", "for", "x", "in", "expected_numbers", "if", "x", "not", "in", "images_numbers", "]", "\n", "return", "images", ",", "indices_missing", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.flip_images": [[352, 366], ["tensorflow.reset_default_graph", "tensorflow.placeholder", "tensorflow.image.flip_left_right", "tensorflow.image.flip_up_down", "tensorflow.image.transpose_image", "tensorflow.Session", "sess.run", "tensorflow.global_variables_initializer", "sess.run", "X_flip.extend"], "function", ["None"], ["", "def", "flip_images", "(", "X_imgs", ")", ":", "\n", "    ", "X_flip", "=", "[", "]", "\n", "tf", ".", "reset_default_graph", "(", ")", "\n", "X", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "X_imgs", "[", "0", "]", ".", "shape", "[", "0", "]", ",", "X_imgs", "[", "0", "]", ".", "shape", "[", "0", "]", ",", "3", ")", ")", "\n", "tf_img1", "=", "tf", ".", "image", ".", "flip_left_right", "(", "X", ")", "\n", "tf_img2", "=", "tf", ".", "image", ".", "flip_up_down", "(", "X", ")", "\n", "tf_img3", "=", "tf", ".", "image", ".", "transpose_image", "(", "X", ")", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "        ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "for", "img", "in", "X_imgs", ":", "\n", "            ", "flipped_imgs", "=", "sess", ".", "run", "(", "[", "tf_img1", ",", "tf_img2", ",", "tf_img3", "]", ",", "feed_dict", "=", "{", "X", ":", "img", "}", ")", "\n", "X_flip", ".", "extend", "(", "flipped_imgs", ")", "\n", "# X_flip = np.array(X_flip, dtype = np.float32)", "\n", "", "", "return", "X_flip", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.add_salt_pepper_noise": [[367, 385], ["X_imgs.copy", "numpy.ceil", "numpy.ceil", "numpy.random.randint", "numpy.random.randint", "int", "int"], "function", ["None"], ["", "def", "add_salt_pepper_noise", "(", "X_imgs", ")", ":", "\n", "# Need to produce a copy as to not modify the original image", "\n", "    ", "X_imgs_copy", "=", "X_imgs", ".", "copy", "(", ")", "\n", "row", ",", "col", ",", "_", "=", "X_imgs_copy", "[", "0", "]", ".", "shape", "\n", "salt_vs_pepper", "=", "0.2", "\n", "amount", "=", "0.004", "\n", "num_salt", "=", "np", ".", "ceil", "(", "amount", "*", "X_imgs_copy", "[", "0", "]", ".", "size", "*", "salt_vs_pepper", ")", "\n", "num_pepper", "=", "np", ".", "ceil", "(", "amount", "*", "X_imgs_copy", "[", "0", "]", ".", "size", "*", "(", "1.0", "-", "salt_vs_pepper", ")", ")", "\n", "\n", "for", "X_img", "in", "X_imgs_copy", ":", "\n", "# Add Salt noise", "\n", "        ", "coords", "=", "[", "np", ".", "random", ".", "randint", "(", "0", ",", "i", "-", "1", ",", "int", "(", "num_salt", ")", ")", "for", "i", "in", "X_img", ".", "shape", "]", "\n", "X_img", "[", "coords", "[", "0", "]", ",", "coords", "[", "1", "]", ",", ":", "]", "=", "1", "\n", "\n", "# Add Pepper noise", "\n", "coords", "=", "[", "np", ".", "random", ".", "randint", "(", "0", ",", "i", "-", "1", ",", "int", "(", "num_pepper", ")", ")", "for", "i", "in", "X_img", ".", "shape", "]", "\n", "X_img", "[", "coords", "[", "0", "]", ",", "coords", "[", "1", "]", ",", ":", "]", "=", "0", "\n", "", "return", "X_imgs_copy", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.add_gaussian_noise": [[386, 400], ["numpy.random.normal().astype", "cv2.addWeighted", "gaussian_noise_imgs.append", "X_img.astype", "numpy.random.normal"], "function", ["None"], ["", "def", "add_gaussian_noise", "(", "X_imgs", ")", ":", "\n", "    ", "gaussian_noise_imgs", "=", "[", "]", "\n", "row", ",", "col", ",", "clr", "=", "X_imgs", "[", "0", "]", ".", "shape", "\n", "# Gaussian distribution parameters", "\n", "mean", "=", "0", "\n", "var", "=", "0.1", "\n", "sigma", "=", "var", "**", "0.5", "\n", "\n", "for", "X_img", "in", "X_imgs", ":", "\n", "        ", "gaussian", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "sigma", ",", "(", "row", ",", "col", ",", "clr", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "gaussian_img", "=", "cv2", ".", "addWeighted", "(", "X_img", ".", "astype", "(", "np", ".", "float32", ")", ",", "0.75", ",", "gaussian", ",", "0.25", ",", "0", ")", "\n", "gaussian_noise_imgs", ".", "append", "(", "gaussian_img", ")", "\n", "# gaussian_noise_imgs = np.array(gaussian_noise_imgs, dtype = np.float32)", "\n", "", "return", "gaussian_noise_imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.find_key": [[401, 408], ["dict.items"], "function", ["None"], ["", "def", "find_key", "(", "dict", ",", "value", ")", ":", "\n", "    ", "\"\"\"\n    finds a specific key in dict that have specific value \n    \"\"\"", "\n", "for", "key", ",", "values", "in", "dict", ".", "items", "(", ")", ":", "# for name, age in dictionary.iteritems():  (for Python 2.x)", "\n", "        ", "if", "value", "==", "values", ":", "\n", "            ", "return", "key", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.match_two_dictionaries": [[410, 420], ["dict2.items", "list", "dict1.values", "utils.find_key"], "function", ["home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.find_key"], ["", "", "", "def", "match_two_dictionaries", "(", "dict1", ",", "dict2", ")", ":", "\n", "    ", "\"\"\"\n    mathcs two dictionaries together by remapping dict keys that has correpondance value in dict2 to keys in dict2 that have these values \n\n    \"\"\"", "\n", "result_dict", "=", "{", "}", "\n", "for", "key2", ",", "vlue2", "in", "dict2", ".", "items", "(", ")", ":", "\n", "        ", "if", "vlue2", "in", "list", "(", "dict1", ".", "values", "(", ")", ")", ":", "\n", "            ", "result_dict", "[", "find_key", "(", "dict1", ",", "vlue2", ")", "]", "=", "key2", "\n", "", "", "return", "result_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.prepare_config_dict": [[426, 433], ["mydict.items", "mydict.pop", "isinstance", "int"], "function", ["None"], ["", "def", "prepare_config_dict", "(", "mydict", ",", "ommit_list", "=", "[", "]", ")", ":", "\n", "    ", "for", "k", "in", "ommit_list", ":", "\n", "        ", "mydict", ".", "pop", "(", "k", ",", "None", ")", "\n", "", "for", "k", ",", "v", "in", "mydict", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "v", ",", "bool", ")", ":", "\n", "            ", "mydict", "[", "k", "]", "=", "int", "(", "v", ")", "\n", "", "", "return", "mydict", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.string_to_float_list": [[435, 437], ["float", "A[].split"], "function", ["None"], ["", "def", "string_to_float_list", "(", "A", ")", ":", "\n", "    ", "return", "[", "float", "(", "x", ")", "for", "x", "in", "A", "[", "1", ":", "-", "1", "]", ".", "split", "(", "','", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.check_folder": [[439, 445], ["os.path.exists", "os.mkdir"], "function", ["None"], ["", "def", "check_folder", "(", "data_dir", ")", ":", "\n", "    ", "\"\"\"\n    checks if folder exists and create if doesnt exist\n    \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "data_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "data_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.load_dataset_names": [[447, 456], ["open", "enumerate"], "function", ["None"], ["", "", "def", "load_dataset_names", "(", "file_name", ")", ":", "\n", "    ", "\"\"\"\n    loads the class names of the dataset from a list text file or python file and returns a dictionary that represent the dataset\n    \"\"\"", "\n", "names", "=", "{", "}", "\n", "with", "open", "(", "file_name", ")", "as", "f", ":", "\n", "        ", "for", "id", ",", "name", "in", "enumerate", "(", "f", ")", ":", "\n", "            ", "names", "[", "id", "]", "=", "name", "\n", "", "", "return", "names", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.None.utils.sample_batch": [[457, 460], ["numpy.random.choice", "len"], "function", ["None"], ["", "def", "sample_batch", "(", "all_list", ",", "batch_size", ")", ":", "\n", "    ", "indices", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "all_list", ")", ",", "batch_size", ")", "\n", "return", "[", "all_list", "[", "i", "]", "for", "i", "in", "indices", "]", ",", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.demo.load_coco_names": [[22, 28], ["open", "enumerate"], "function", ["None"], ["def", "load_coco_names", "(", "file_name", ")", ":", "\n", "    ", "names", "=", "{", "}", "\n", "with", "open", "(", "file_name", ")", "as", "f", ":", "\n", "        ", "for", "id", ",", "name", "in", "enumerate", "(", "f", ")", ":", "\n", "            ", "names", "[", "id", "]", "=", "name", "\n", "", "", "return", "names", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.demo.draw_boxes": [[30, 40], ["PIL.ImageDraw.Draw", "boxes.items", "tuple", "numpy.random.randint", "demo.convert_to_original_size", "ImageDraw.Draw.rectangle", "ImageDraw.Draw.text", "print", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.mydemo.convert_to_original_size"], ["", "def", "draw_boxes", "(", "boxes", ",", "img", ",", "cls_names", ",", "detection_size", ")", ":", "\n", "    ", "draw", "=", "ImageDraw", ".", "Draw", "(", "img", ")", "\n", "\n", "for", "cls", ",", "bboxs", "in", "boxes", ".", "items", "(", ")", ":", "\n", "        ", "color", "=", "tuple", "(", "np", ".", "random", ".", "randint", "(", "0", ",", "256", ",", "3", ")", ")", "\n", "for", "box", ",", "score", "in", "bboxs", ":", "\n", "            ", "box", "=", "convert_to_original_size", "(", "box", ",", "np", ".", "array", "(", "detection_size", ")", ",", "np", ".", "array", "(", "img", ".", "size", ")", ")", "\n", "draw", ".", "rectangle", "(", "box", ",", "outline", "=", "color", ")", "\n", "draw", ".", "text", "(", "box", "[", ":", "2", "]", ",", "'{} {:.2f}%'", ".", "format", "(", "cls_names", "[", "cls", "]", ",", "score", "*", "100", ")", ",", "fill", "=", "color", ")", "\n", "print", "(", "'{} {:.2f}%'", ".", "format", "(", "cls_names", "[", "cls", "]", ",", "score", "*", "100", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.demo.convert_to_original_size": [[42, 46], ["list", "box.reshape", "box.reshape"], "function", ["home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.reshape", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.reshape"], ["", "", "", "def", "convert_to_original_size", "(", "box", ",", "size", ",", "original_size", ")", ":", "\n", "    ", "ratio", "=", "original_size", "/", "size", "\n", "box", "=", "box", ".", "reshape", "(", "2", ",", "2", ")", "*", "ratio", "\n", "return", "list", "(", "box", ".", "reshape", "(", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.demo.main": [[48, 74], ["PIL.Image.open", "Image.open.resize", "demo.load_coco_names", "tensorflow.placeholder", "yolo_v3.detections_boxes", "demo.draw_boxes", "Image.open.save", "tensorflow.variable_scope", "yolo_v3.yolo_v3", "yolo_v3.load_weights", "tensorflow.Session", "sess.run", "sess.run", "yolo_v3.non_max_suppression", "len", "tensorflow.global_variables", "numpy.array"], "function", ["home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.mydemo.load_coco_names", "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3.detections_boxes", "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.mydemo.draw_boxes", "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3.yolo_v3", "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3.load_weights", "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3.non_max_suppression"], ["", "def", "main", "(", "argv", "=", "None", ")", ":", "\n", "    ", "img", "=", "Image", ".", "open", "(", "FLAGS", ".", "input_img", ")", "\n", "img_resized", "=", "img", ".", "resize", "(", "size", "=", "(", "FLAGS", ".", "size", ",", "FLAGS", ".", "size", ")", ")", "\n", "\n", "classes", "=", "load_coco_names", "(", "FLAGS", ".", "class_names", ")", "\n", "\n", "# placeholder for detector inputs", "\n", "inputs", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "FLAGS", ".", "size", ",", "FLAGS", ".", "size", ",", "3", "]", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'detector'", ")", ":", "\n", "        ", "detections", "=", "yolo_v3", "(", "inputs", ",", "len", "(", "classes", ")", ",", "data_format", "=", "'NCHW'", ")", "\n", "load_ops", "=", "load_weights", "(", "tf", ".", "global_variables", "(", "scope", "=", "'detector'", ")", ",", "FLAGS", ".", "weights_file", ")", "\n", "\n", "", "boxes", "=", "detections_boxes", "(", "detections", ")", "\n", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "        ", "sess", ".", "run", "(", "load_ops", ")", "\n", "\n", "detected_boxes", "=", "sess", ".", "run", "(", "boxes", ",", "feed_dict", "=", "{", "inputs", ":", "[", "np", ".", "array", "(", "img_resized", ",", "dtype", "=", "np", ".", "float32", ")", "]", "}", ")", "\n", "\n", "", "filtered_boxes", "=", "non_max_suppression", "(", "detected_boxes", ",", "confidence_threshold", "=", "FLAGS", ".", "conf_threshold", ",", "\n", "iou_threshold", "=", "FLAGS", ".", "iou_threshold", ")", "[", "0", "]", "\n", "\n", "draw_boxes", "(", "filtered_boxes", ",", "img", ",", "classes", ",", "(", "FLAGS", ".", "size", ",", "FLAGS", ".", "size", ")", ")", "\n", "\n", "img", ".", "save", "(", "FLAGS", ".", "output_img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3.darknet53": [[15, 45], ["yolo_v3._conv2d_fixed_padding", "yolo_v3._conv2d_fixed_padding", "yolo_v3._darknet53_block", "yolo_v3._conv2d_fixed_padding", "range", "yolo_v3._conv2d_fixed_padding", "range", "yolo_v3._conv2d_fixed_padding", "range", "yolo_v3._conv2d_fixed_padding", "range", "yolo_v3._darknet53_block", "yolo_v3._darknet53_block", "yolo_v3._darknet53_block", "yolo_v3._darknet53_block"], "function", ["home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3._conv2d_fixed_padding", "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3._conv2d_fixed_padding", "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3._darknet53_block", "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3._conv2d_fixed_padding", "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3._conv2d_fixed_padding", "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3._conv2d_fixed_padding", "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3._conv2d_fixed_padding", "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3._darknet53_block", "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3._darknet53_block", "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3._darknet53_block", "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3._darknet53_block"], ["def", "darknet53", "(", "inputs", ")", ":", "\n", "    ", "\"\"\"\n    Builds Darknet-53 model.\n    \"\"\"", "\n", "inputs", "=", "_conv2d_fixed_padding", "(", "inputs", ",", "32", ",", "3", ")", "\n", "inputs", "=", "_conv2d_fixed_padding", "(", "inputs", ",", "64", ",", "3", ",", "strides", "=", "2", ")", "\n", "inputs", "=", "_darknet53_block", "(", "inputs", ",", "32", ")", "\n", "inputs", "=", "_conv2d_fixed_padding", "(", "inputs", ",", "128", ",", "3", ",", "strides", "=", "2", ")", "\n", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "        ", "inputs", "=", "_darknet53_block", "(", "inputs", ",", "64", ")", "\n", "\n", "", "inputs", "=", "_conv2d_fixed_padding", "(", "inputs", ",", "256", ",", "3", ",", "strides", "=", "2", ")", "\n", "\n", "for", "i", "in", "range", "(", "8", ")", ":", "\n", "        ", "inputs", "=", "_darknet53_block", "(", "inputs", ",", "128", ")", "\n", "\n", "", "route_1", "=", "inputs", "\n", "inputs", "=", "_conv2d_fixed_padding", "(", "inputs", ",", "512", ",", "3", ",", "strides", "=", "2", ")", "\n", "\n", "for", "i", "in", "range", "(", "8", ")", ":", "\n", "        ", "inputs", "=", "_darknet53_block", "(", "inputs", ",", "256", ")", "\n", "\n", "", "route_2", "=", "inputs", "\n", "inputs", "=", "_conv2d_fixed_padding", "(", "inputs", ",", "1024", ",", "3", ",", "strides", "=", "2", ")", "\n", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "        ", "inputs", "=", "_darknet53_block", "(", "inputs", ",", "512", ")", "\n", "\n", "", "return", "route_1", ",", "route_2", ",", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3._conv2d_fixed_padding": [[47, 52], ["slim.conv2d", "yolo_v3._fixed_padding"], "function", ["home.repos.pwc.inspect_result.ajhamdi_SADA.None.ops.conv2d", "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3._fixed_padding"], ["", "def", "_conv2d_fixed_padding", "(", "inputs", ",", "filters", ",", "kernel_size", ",", "strides", "=", "1", ")", ":", "\n", "    ", "if", "strides", ">", "1", ":", "\n", "        ", "inputs", "=", "_fixed_padding", "(", "inputs", ",", "kernel_size", ")", "\n", "", "inputs", "=", "slim", ".", "conv2d", "(", "inputs", ",", "filters", ",", "kernel_size", ",", "stride", "=", "strides", ",", "padding", "=", "(", "'SAME'", "if", "strides", "==", "1", "else", "'VALID'", ")", ")", "\n", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3._darknet53_block": [[54, 61], ["yolo_v3._conv2d_fixed_padding", "yolo_v3._conv2d_fixed_padding"], "function", ["home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3._conv2d_fixed_padding", "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3._conv2d_fixed_padding"], ["", "def", "_darknet53_block", "(", "inputs", ",", "filters", ")", ":", "\n", "    ", "shortcut", "=", "inputs", "\n", "inputs", "=", "_conv2d_fixed_padding", "(", "inputs", ",", "filters", ",", "1", ")", "\n", "inputs", "=", "_conv2d_fixed_padding", "(", "inputs", ",", "filters", "*", "2", ",", "3", ")", "\n", "\n", "inputs", "=", "inputs", "+", "shortcut", "\n", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3._fixed_padding": [[63, 91], ["tensorflow.pad", "tensorflow.pad"], "function", ["None"], ["", "@", "tf", ".", "contrib", ".", "framework", ".", "add_arg_scope", "\n", "def", "_fixed_padding", "(", "inputs", ",", "kernel_size", ",", "*", "args", ",", "mode", "=", "'CONSTANT'", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Pads the input along the spatial dimensions independently of input size.\n\n    Args:\n      inputs: A tensor of size [batch, channels, height_in, width_in] or\n        [batch, height_in, width_in, channels] depending on data_format.\n      kernel_size: The kernel to be used in the conv2d or max_pool2d operation.\n                   Should be a positive integer.\n      data_format: The input format ('NHWC' or 'NCHW').\n      mode: The mode for tf.pad.\n\n    Returns:\n      A tensor with the same format as the input with the data either intact\n      (if kernel_size == 1) or padded (if kernel_size > 1).\n    \"\"\"", "\n", "pad_total", "=", "kernel_size", "-", "1", "\n", "pad_beg", "=", "pad_total", "//", "2", "\n", "pad_end", "=", "pad_total", "-", "pad_beg", "\n", "\n", "if", "kwargs", "[", "'data_format'", "]", "==", "'NCHW'", ":", "\n", "        ", "padded_inputs", "=", "tf", ".", "pad", "(", "inputs", ",", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "\n", "[", "pad_beg", ",", "pad_end", "]", ",", "[", "pad_beg", ",", "pad_end", "]", "]", ",", "mode", "=", "mode", ")", "\n", "", "else", ":", "\n", "        ", "padded_inputs", "=", "tf", ".", "pad", "(", "inputs", ",", "[", "[", "0", ",", "0", "]", ",", "[", "pad_beg", ",", "pad_end", "]", ",", "\n", "[", "pad_beg", ",", "pad_end", "]", ",", "[", "0", ",", "0", "]", "]", ",", "mode", "=", "mode", ")", "\n", "", "return", "padded_inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3._yolo_block": [[93, 102], ["yolo_v3._conv2d_fixed_padding", "yolo_v3._conv2d_fixed_padding", "yolo_v3._conv2d_fixed_padding", "yolo_v3._conv2d_fixed_padding", "yolo_v3._conv2d_fixed_padding", "yolo_v3._conv2d_fixed_padding"], "function", ["home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3._conv2d_fixed_padding", "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3._conv2d_fixed_padding", "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3._conv2d_fixed_padding", "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3._conv2d_fixed_padding", "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3._conv2d_fixed_padding", "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3._conv2d_fixed_padding"], ["", "def", "_yolo_block", "(", "inputs", ",", "filters", ")", ":", "\n", "    ", "inputs", "=", "_conv2d_fixed_padding", "(", "inputs", ",", "filters", ",", "1", ")", "\n", "inputs", "=", "_conv2d_fixed_padding", "(", "inputs", ",", "filters", "*", "2", ",", "3", ")", "\n", "inputs", "=", "_conv2d_fixed_padding", "(", "inputs", ",", "filters", ",", "1", ")", "\n", "inputs", "=", "_conv2d_fixed_padding", "(", "inputs", ",", "filters", "*", "2", ",", "3", ")", "\n", "inputs", "=", "_conv2d_fixed_padding", "(", "inputs", ",", "filters", ",", "1", ")", "\n", "route", "=", "inputs", "\n", "inputs", "=", "_conv2d_fixed_padding", "(", "inputs", ",", "filters", "*", "2", ",", "3", ")", "\n", "return", "route", ",", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3._get_size": [[104, 108], ["len"], "function", ["None"], ["", "def", "_get_size", "(", "shape", ",", "data_format", ")", ":", "\n", "    ", "if", "len", "(", "shape", ")", "==", "4", ":", "\n", "        ", "shape", "=", "shape", "[", "1", ":", "]", "\n", "", "return", "shape", "[", "1", ":", "3", "]", "if", "data_format", "==", "'NCHW'", "else", "shape", "[", "0", ":", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3._detection_layer": [[110, 157], ["len", "slim.conv2d", "tf.transpose.get_shape().as_list", "yolo_v3._get_size", "tensorflow.reshape", "tensorflow.split", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.range", "tensorflow.range", "tensorflow.meshgrid", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.concat", "tensorflow.reshape", "tensorflow.tile", "tensorflow.concat", "tensorflow.nn.sigmoid", "tensorflow.concat", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.tile", "tensorflow.exp", "tensorflow.zeros_initializer", "tf.transpose.get_shape"], "function", ["home.repos.pwc.inspect_result.ajhamdi_SADA.None.ops.conv2d", "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3._get_size", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.reshape", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.reshape", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.reshape", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.reshape", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.reshape"], ["", "def", "_detection_layer", "(", "inputs", ",", "num_classes", ",", "anchors", ",", "img_size", ",", "data_format", ")", ":", "\n", "    ", "num_anchors", "=", "len", "(", "anchors", ")", "\n", "predictions", "=", "slim", ".", "conv2d", "(", "inputs", ",", "num_anchors", "*", "(", "5", "+", "num_classes", ")", ",", "1", ",", "stride", "=", "1", ",", "normalizer_fn", "=", "None", ",", "\n", "activation_fn", "=", "None", ",", "biases_initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ")", "\n", "\n", "shape", "=", "predictions", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "grid_size", "=", "_get_size", "(", "shape", ",", "data_format", ")", "\n", "dim", "=", "grid_size", "[", "0", "]", "*", "grid_size", "[", "1", "]", "\n", "bbox_attrs", "=", "5", "+", "num_classes", "\n", "\n", "if", "data_format", "==", "'NCHW'", ":", "\n", "        ", "predictions", "=", "tf", ".", "reshape", "(", "predictions", ",", "[", "-", "1", ",", "num_anchors", "*", "bbox_attrs", ",", "dim", "]", ")", "\n", "predictions", "=", "tf", ".", "transpose", "(", "predictions", ",", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "\n", "", "predictions", "=", "tf", ".", "reshape", "(", "predictions", ",", "[", "-", "1", ",", "num_anchors", "*", "dim", ",", "bbox_attrs", "]", ")", "\n", "\n", "stride", "=", "(", "img_size", "[", "0", "]", "//", "grid_size", "[", "0", "]", ",", "img_size", "[", "1", "]", "//", "grid_size", "[", "1", "]", ")", "\n", "\n", "anchors", "=", "[", "(", "a", "[", "0", "]", "/", "stride", "[", "0", "]", ",", "a", "[", "1", "]", "/", "stride", "[", "1", "]", ")", "for", "a", "in", "anchors", "]", "\n", "\n", "box_centers", ",", "box_sizes", ",", "confidence", ",", "classes", "=", "tf", ".", "split", "(", "predictions", ",", "[", "2", ",", "2", ",", "1", ",", "num_classes", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "box_centers", "=", "tf", ".", "nn", ".", "sigmoid", "(", "box_centers", ")", "\n", "confidence", "=", "tf", ".", "nn", ".", "sigmoid", "(", "confidence", ")", "\n", "\n", "grid_x", "=", "tf", ".", "range", "(", "grid_size", "[", "0", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "grid_y", "=", "tf", ".", "range", "(", "grid_size", "[", "1", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "a", ",", "b", "=", "tf", ".", "meshgrid", "(", "grid_x", ",", "grid_y", ")", "\n", "\n", "x_offset", "=", "tf", ".", "reshape", "(", "a", ",", "(", "-", "1", ",", "1", ")", ")", "\n", "y_offset", "=", "tf", ".", "reshape", "(", "b", ",", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "x_y_offset", "=", "tf", ".", "concat", "(", "[", "x_offset", ",", "y_offset", "]", ",", "axis", "=", "-", "1", ")", "\n", "x_y_offset", "=", "tf", ".", "reshape", "(", "tf", ".", "tile", "(", "x_y_offset", ",", "[", "1", ",", "num_anchors", "]", ")", ",", "[", "1", ",", "-", "1", ",", "2", "]", ")", "\n", "\n", "box_centers", "=", "box_centers", "+", "x_y_offset", "\n", "box_centers", "=", "box_centers", "*", "stride", "\n", "\n", "anchors", "=", "tf", ".", "tile", "(", "anchors", ",", "[", "dim", ",", "1", "]", ")", "\n", "box_sizes", "=", "tf", ".", "exp", "(", "box_sizes", ")", "*", "anchors", "\n", "box_sizes", "=", "box_sizes", "*", "stride", "\n", "\n", "detections", "=", "tf", ".", "concat", "(", "[", "box_centers", ",", "box_sizes", ",", "confidence", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "classes", "=", "tf", ".", "nn", ".", "sigmoid", "(", "classes", ")", "\n", "predictions", "=", "tf", ".", "concat", "(", "[", "detections", ",", "classes", "]", ",", "axis", "=", "-", "1", ")", "\n", "return", "predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3._upsample": [[159, 179], ["tensorflow.image.resize_nearest_neighbor", "tensorflow.identity", "tensorflow.transpose", "tensorflow.transpose"], "function", ["home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.resize_nearest_neighbor"], ["", "def", "_upsample", "(", "inputs", ",", "out_shape", ",", "data_format", "=", "'NCHW'", ")", ":", "\n", "# tf.image.resize_nearest_neighbor accepts input in format NHWC", "\n", "    ", "if", "data_format", "==", "'NCHW'", ":", "\n", "        ", "inputs", "=", "tf", ".", "transpose", "(", "inputs", ",", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "\n", "", "if", "data_format", "==", "'NCHW'", ":", "\n", "        ", "new_height", "=", "out_shape", "[", "3", "]", "\n", "new_width", "=", "out_shape", "[", "2", "]", "\n", "", "else", ":", "\n", "        ", "new_height", "=", "out_shape", "[", "2", "]", "\n", "new_width", "=", "out_shape", "[", "1", "]", "\n", "\n", "", "inputs", "=", "tf", ".", "image", ".", "resize_nearest_neighbor", "(", "inputs", ",", "(", "new_height", ",", "new_width", ")", ")", "\n", "\n", "# back to NCHW if needed", "\n", "if", "data_format", "==", "'NCHW'", ":", "\n", "        ", "inputs", "=", "tf", ".", "transpose", "(", "inputs", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "\n", "", "inputs", "=", "tf", ".", "identity", "(", "inputs", ",", "name", "=", "'upsampled'", ")", "\n", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3.yolo_v3": [[181, 247], ["tf.concat.get_shape().as_list", "tensorflow.transpose", "slim.arg_scope", "slim.arg_scope", "tf.concat.get_shape", "tensorflow.variable_scope", "yolo_v3.darknet53", "tensorflow.variable_scope", "yolo_v3._yolo_block", "yolo_v3._detection_layer", "tensorflow.identity", "yolo_v3._conv2d_fixed_padding", "route_2.get_shape().as_list", "yolo_v3._upsample", "tensorflow.concat", "yolo_v3._yolo_block", "yolo_v3._detection_layer", "tensorflow.identity", "yolo_v3._conv2d_fixed_padding", "route_1.get_shape().as_list", "yolo_v3._upsample", "tensorflow.concat", "yolo_v3._yolo_block", "yolo_v3._detection_layer", "tensorflow.identity", "tensorflow.concat", "tensorflow.identity", "tensorflow.nn.leaky_relu", "route_2.get_shape", "route_1.get_shape"], "function", ["home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3.darknet53", "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3._yolo_block", "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3._detection_layer", "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3._conv2d_fixed_padding", "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3._upsample", "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3._yolo_block", "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3._detection_layer", "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3._conv2d_fixed_padding", "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3._upsample", "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3._yolo_block", "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3._detection_layer"], ["", "def", "yolo_v3", "(", "inputs", ",", "num_classes", ",", "is_training", "=", "False", ",", "data_format", "=", "'NCHW'", ",", "reuse", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Creates YOLO v3 model.\n\n    :param inputs: a 4-D tensor of size [batch_size, height, width, channels].\n        Dimension batch_size may be undefined. The channel order is RGB.\n    :param num_classes: number of predicted classes.\n    :param is_training: whether is training or not.\n    :param data_format: data format NCHW or NHWC.\n    :param reuse: whether or not the network and its variables should be reused.\n    :return:\n    \"\"\"", "\n", "# it will be needed later on", "\n", "img_size", "=", "inputs", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", ":", "3", "]", "\n", "\n", "# transpose the inputs to NCHW", "\n", "if", "data_format", "==", "'NCHW'", ":", "\n", "        ", "inputs", "=", "tf", ".", "transpose", "(", "inputs", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "\n", "# normalize values to range [0..1]", "\n", "", "inputs", "=", "inputs", "/", "255", "\n", "\n", "# set batch norm params", "\n", "batch_norm_params", "=", "{", "\n", "'decay'", ":", "_BATCH_NORM_DECAY", ",", "\n", "'epsilon'", ":", "_BATCH_NORM_EPSILON", ",", "\n", "'scale'", ":", "True", ",", "\n", "'is_training'", ":", "is_training", ",", "\n", "'fused'", ":", "None", ",", "# Use fused batch norm if possible.", "\n", "}", "\n", "\n", "# Set activation_fn and parameters for conv2d, batch_norm.", "\n", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "conv2d", ",", "slim", ".", "batch_norm", ",", "_fixed_padding", "]", ",", "data_format", "=", "data_format", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "conv2d", "]", ",", "normalizer_fn", "=", "slim", ".", "batch_norm", ",", "normalizer_params", "=", "batch_norm_params", ",", "\n", "biases_initializer", "=", "None", ",", "activation_fn", "=", "lambda", "x", ":", "tf", ".", "nn", ".", "leaky_relu", "(", "x", ",", "alpha", "=", "_LEAKY_RELU", ")", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'darknet-53'", ")", ":", "\n", "                ", "route_1", ",", "route_2", ",", "inputs", "=", "darknet53", "(", "inputs", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'yolo-v3'", ")", ":", "\n", "                ", "route", ",", "inputs", "=", "_yolo_block", "(", "inputs", ",", "512", ")", "\n", "detect_1", "=", "_detection_layer", "(", "inputs", ",", "num_classes", ",", "_ANCHORS", "[", "6", ":", "9", "]", ",", "img_size", ",", "data_format", ")", "\n", "detect_1", "=", "tf", ".", "identity", "(", "detect_1", ",", "name", "=", "'detect_1'", ")", "\n", "\n", "inputs", "=", "_conv2d_fixed_padding", "(", "route", ",", "256", ",", "1", ")", "\n", "upsample_size", "=", "route_2", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "inputs", "=", "_upsample", "(", "inputs", ",", "upsample_size", ",", "data_format", ")", "\n", "inputs", "=", "tf", ".", "concat", "(", "[", "inputs", ",", "route_2", "]", ",", "axis", "=", "1", "if", "data_format", "==", "'NCHW'", "else", "3", ")", "\n", "\n", "route", ",", "inputs", "=", "_yolo_block", "(", "inputs", ",", "256", ")", "\n", "\n", "detect_2", "=", "_detection_layer", "(", "inputs", ",", "num_classes", ",", "_ANCHORS", "[", "3", ":", "6", "]", ",", "img_size", ",", "data_format", ")", "\n", "detect_2", "=", "tf", ".", "identity", "(", "detect_2", ",", "name", "=", "'detect_2'", ")", "\n", "\n", "inputs", "=", "_conv2d_fixed_padding", "(", "route", ",", "128", ",", "1", ")", "\n", "upsample_size", "=", "route_1", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "inputs", "=", "_upsample", "(", "inputs", ",", "upsample_size", ",", "data_format", ")", "\n", "inputs", "=", "tf", ".", "concat", "(", "[", "inputs", ",", "route_1", "]", ",", "axis", "=", "1", "if", "data_format", "==", "'NCHW'", "else", "3", ")", "\n", "\n", "_", ",", "inputs", "=", "_yolo_block", "(", "inputs", ",", "128", ")", "\n", "\n", "detect_3", "=", "_detection_layer", "(", "inputs", ",", "num_classes", ",", "_ANCHORS", "[", "0", ":", "3", "]", ",", "img_size", ",", "data_format", ")", "\n", "detect_3", "=", "tf", ".", "identity", "(", "detect_3", ",", "name", "=", "'detect_3'", ")", "\n", "\n", "detections", "=", "tf", ".", "concat", "(", "[", "detect_1", ",", "detect_2", ",", "detect_3", "]", ",", "axis", "=", "1", ")", "\n", "detections", "=", "tf", ".", "identity", "(", "detections", ",", "name", "=", "'detections'", ")", "\n", "return", "detections", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3.load_weights": [[249, 306], ["open", "numpy.fromfile", "numpy.fromfile", "len", "var1.shape.as_list", "numpy.prod", "weights[].reshape", "numpy.transpose", "assign_ops.append", "var1.name.split", "tensorflow.assign", "var2.name.split", "var.shape.as_list", "numpy.prod", "weights[].reshape", "assign_ops.append", "bias.shape.as_list", "numpy.prod", "weights[].reshape", "assign_ops.append", "tensorflow.assign", "var2.name.split", "tensorflow.assign"], "function", ["home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.reshape", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.reshape", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.reshape"], ["", "", "", "", "def", "load_weights", "(", "var_list", ",", "weights_file", ")", ":", "\n", "    ", "\"\"\"\n    Loads and converts pre-trained weights.\n    :param var_list: list of network variables.\n    :param weights_file: name of the binary file.\n    :return: list of assign ops\n    \"\"\"", "\n", "with", "open", "(", "weights_file", ",", "\"rb\"", ")", "as", "fp", ":", "\n", "        ", "_", "=", "np", ".", "fromfile", "(", "fp", ",", "dtype", "=", "np", ".", "int32", ",", "count", "=", "5", ")", "\n", "\n", "weights", "=", "np", ".", "fromfile", "(", "fp", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "", "ptr", "=", "0", "\n", "i", "=", "0", "\n", "assign_ops", "=", "[", "]", "\n", "while", "i", "<", "len", "(", "var_list", ")", "-", "1", ":", "\n", "        ", "var1", "=", "var_list", "[", "i", "]", "\n", "var2", "=", "var_list", "[", "i", "+", "1", "]", "\n", "# do something only if we process conv layer", "\n", "if", "'Conv'", "in", "var1", ".", "name", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", ":", "\n", "# check type of next layer", "\n", "            ", "if", "'BatchNorm'", "in", "var2", ".", "name", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", ":", "\n", "# load batch norm params", "\n", "                ", "gamma", ",", "beta", ",", "mean", ",", "var", "=", "var_list", "[", "i", "+", "1", ":", "i", "+", "5", "]", "\n", "batch_norm_vars", "=", "[", "beta", ",", "gamma", ",", "mean", ",", "var", "]", "\n", "for", "var", "in", "batch_norm_vars", ":", "\n", "                    ", "shape", "=", "var", ".", "shape", ".", "as_list", "(", ")", "\n", "num_params", "=", "np", ".", "prod", "(", "shape", ")", "\n", "var_weights", "=", "weights", "[", "ptr", ":", "ptr", "+", "num_params", "]", ".", "reshape", "(", "shape", ")", "\n", "ptr", "+=", "num_params", "\n", "assign_ops", ".", "append", "(", "tf", ".", "assign", "(", "var", ",", "var_weights", ",", "validate_shape", "=", "True", ")", ")", "\n", "\n", "# we move the pointer by 4, because we loaded 4 variables", "\n", "", "i", "+=", "4", "\n", "", "elif", "'Conv'", "in", "var2", ".", "name", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", ":", "\n", "# load biases", "\n", "                ", "bias", "=", "var2", "\n", "bias_shape", "=", "bias", ".", "shape", ".", "as_list", "(", ")", "\n", "bias_params", "=", "np", ".", "prod", "(", "bias_shape", ")", "\n", "bias_weights", "=", "weights", "[", "ptr", ":", "ptr", "+", "bias_params", "]", ".", "reshape", "(", "bias_shape", ")", "\n", "ptr", "+=", "bias_params", "\n", "assign_ops", ".", "append", "(", "tf", ".", "assign", "(", "bias", ",", "bias_weights", ",", "validate_shape", "=", "True", ")", ")", "\n", "\n", "# we loaded 1 variable", "\n", "i", "+=", "1", "\n", "# we can load weights of conv layer", "\n", "", "shape", "=", "var1", ".", "shape", ".", "as_list", "(", ")", "\n", "num_params", "=", "np", ".", "prod", "(", "shape", ")", "\n", "\n", "var_weights", "=", "weights", "[", "ptr", ":", "ptr", "+", "num_params", "]", ".", "reshape", "(", "(", "shape", "[", "3", "]", ",", "shape", "[", "2", "]", ",", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ")", ")", "\n", "# remember to transpose to column-major", "\n", "var_weights", "=", "np", ".", "transpose", "(", "var_weights", ",", "(", "2", ",", "3", ",", "1", ",", "0", ")", ")", "\n", "ptr", "+=", "num_params", "\n", "assign_ops", ".", "append", "(", "tf", ".", "assign", "(", "var1", ",", "var_weights", ",", "validate_shape", "=", "True", ")", ")", "\n", "i", "+=", "1", "\n", "\n", "", "", "return", "assign_ops", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3.detections_boxes": [[308, 326], ["tensorflow.split", "tensorflow.concat", "tensorflow.concat"], "function", ["None"], ["", "def", "detections_boxes", "(", "detections", ")", ":", "\n", "    ", "\"\"\"\n    Converts center x, center y, width and height values to coordinates of top left and bottom right points.\n\n    :param detections: outputs of YOLO v3 detector of shape (?, 10647, (num_classes + 5))\n    :return: converted detections of same shape as input\n    \"\"\"", "\n", "center_x", ",", "center_y", ",", "width", ",", "height", ",", "attrs", "=", "tf", ".", "split", "(", "detections", ",", "[", "1", ",", "1", ",", "1", ",", "1", ",", "-", "1", "]", ",", "axis", "=", "-", "1", ")", "\n", "w2", "=", "width", "/", "2", "\n", "h2", "=", "height", "/", "2", "\n", "x0", "=", "center_x", "-", "w2", "\n", "y0", "=", "center_y", "-", "h2", "\n", "x1", "=", "center_x", "+", "w2", "\n", "y1", "=", "center_y", "+", "h2", "\n", "\n", "boxes", "=", "tf", ".", "concat", "(", "[", "x0", ",", "y0", ",", "x1", ",", "y1", "]", ",", "axis", "=", "-", "1", ")", "\n", "detections", "=", "tf", ".", "concat", "(", "[", "boxes", ",", "attrs", "]", ",", "axis", "=", "-", "1", ")", "\n", "return", "detections", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3._iou": [[328, 352], ["max", "max", "min", "min"], "function", ["None"], ["", "def", "_iou", "(", "box1", ",", "box2", ")", ":", "\n", "    ", "\"\"\"\n    Computes Intersection over Union value for 2 bounding boxes\n    \n    :param box1: array of 4 values (top left and bottom right coords): [x0, y0, x1, x2]\n    :param box2: same as box1\n    :return: IoU\n    \"\"\"", "\n", "b1_x0", ",", "b1_y0", ",", "b1_x1", ",", "b1_y1", "=", "box1", "\n", "b2_x0", ",", "b2_y0", ",", "b2_x1", ",", "b2_y1", "=", "box2", "\n", "\n", "int_x0", "=", "max", "(", "b1_x0", ",", "b2_x0", ")", "\n", "int_y0", "=", "max", "(", "b1_y0", ",", "b2_y0", ")", "\n", "int_x1", "=", "min", "(", "b1_x1", ",", "b2_x1", ")", "\n", "int_y1", "=", "min", "(", "b1_y1", ",", "b2_y1", ")", "\n", "\n", "int_area", "=", "(", "int_x1", "-", "int_x0", ")", "*", "(", "int_y1", "-", "int_y0", ")", "\n", "\n", "b1_area", "=", "(", "b1_x1", "-", "b1_x0", ")", "*", "(", "b1_y1", "-", "b1_y0", ")", "\n", "b2_area", "=", "(", "b2_x1", "-", "b2_x0", ")", "*", "(", "b2_y1", "-", "b2_y0", ")", "\n", "\n", "# we add small epsilon of 1e-05 to avoid division by 0", "\n", "iou", "=", "int_area", "/", "(", "b1_area", "+", "b2_area", "-", "int_area", "+", "1e-05", ")", "\n", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3.non_max_suppression": [[354, 401], ["numpy.expand_dims", "enumerate", "numpy.nonzero", "image_pred.reshape.reshape", "numpy.argmax", "list", "images_boxes.append", "set", "np.argmax.reshape", "len", "result[].append", "numpy.array", "numpy.nonzero", "cls_boxes[].argsort", "yolo_v3._iou", "numpy.nonzero", "numpy.nonzero"], "function", ["home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.reshape", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.reshape", "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3._iou"], ["", "def", "non_max_suppression", "(", "predictions_with_boxes", ",", "confidence_threshold", ",", "iou_threshold", "=", "0.4", ")", ":", "\n", "    ", "\"\"\"\n    Applies Non-max suppression to prediction boxes.\n\n    :param predictions_with_boxes: 3D numpy array, first 4 values in 3rd dimension are bbox attrs, 5th is confidence\n    :param confidence_threshold: the threshold for deciding if prediction is valid\n    :param iou_threshold: the threshold for deciding if two boxes overlap\n    :return: dict: class -> [(box, score)]\n    \"\"\"", "\n", "conf_mask", "=", "np", ".", "expand_dims", "(", "(", "predictions_with_boxes", "[", ":", ",", ":", ",", "4", "]", ">", "confidence_threshold", ")", ",", "-", "1", ")", "\n", "predictions", "=", "predictions_with_boxes", "*", "conf_mask", "\n", "\n", "images_boxes", "=", "[", "]", "\n", "for", "i", ",", "image_pred", "in", "enumerate", "(", "predictions", ")", ":", "\n", "        ", "shape", "=", "image_pred", ".", "shape", "\n", "non_zero_idxs", "=", "np", ".", "nonzero", "(", "image_pred", ")", "\n", "image_pred", "=", "image_pred", "[", "non_zero_idxs", "]", "\n", "image_pred", "=", "image_pred", ".", "reshape", "(", "-", "1", ",", "shape", "[", "-", "1", "]", ")", "\n", "\n", "bbox_attrs", "=", "image_pred", "[", ":", ",", ":", "5", "]", "\n", "classes", "=", "image_pred", "[", ":", ",", "5", ":", "]", "\n", "classes", "=", "np", ".", "argmax", "(", "classes", ",", "axis", "=", "-", "1", ")", "\n", "\n", "unique_classes", "=", "list", "(", "set", "(", "classes", ".", "reshape", "(", "-", "1", ")", ")", ")", "\n", "\n", "result", "=", "{", "}", "\n", "for", "cls", "in", "unique_classes", ":", "\n", "            ", "cls_mask", "=", "classes", "==", "cls", "\n", "cls_boxes", "=", "bbox_attrs", "[", "np", ".", "nonzero", "(", "cls_mask", ")", "]", "\n", "cls_boxes", "=", "cls_boxes", "[", "cls_boxes", "[", ":", ",", "-", "1", "]", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "]", "\n", "cls_scores", "=", "cls_boxes", "[", ":", ",", "-", "1", "]", "\n", "cls_boxes", "=", "cls_boxes", "[", ":", ",", ":", "-", "1", "]", "\n", "\n", "while", "len", "(", "cls_boxes", ")", ">", "0", ":", "\n", "                ", "box", "=", "cls_boxes", "[", "0", "]", "\n", "score", "=", "cls_scores", "[", "0", "]", "\n", "if", "not", "cls", "in", "result", ":", "\n", "                    ", "result", "[", "cls", "]", "=", "[", "]", "\n", "", "result", "[", "cls", "]", ".", "append", "(", "(", "box", ",", "score", ")", ")", "\n", "cls_boxes", "=", "cls_boxes", "[", "1", ":", "]", "\n", "ious", "=", "np", ".", "array", "(", "[", "_iou", "(", "box", ",", "x", ")", "for", "x", "in", "cls_boxes", "]", ")", "\n", "iou_mask", "=", "ious", "<", "iou_threshold", "\n", "cls_boxes", "=", "cls_boxes", "[", "np", ".", "nonzero", "(", "iou_mask", ")", "]", "\n", "cls_scores", "=", "cls_scores", "[", "np", ".", "nonzero", "(", "iou_mask", ")", "]", "\n", "", "", "images_boxes", ".", "append", "(", "result", ")", "\n", "\n", "", "return", "images_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.mydemo.load_coco_names": [[24, 30], ["open", "enumerate"], "function", ["None"], ["def", "load_coco_names", "(", "file_name", ")", ":", "\n", "    ", "names", "=", "{", "}", "\n", "with", "open", "(", "file_name", ")", "as", "f", ":", "\n", "        ", "for", "id", ",", "name", "in", "enumerate", "(", "f", ")", ":", "\n", "            ", "names", "[", "id", "]", "=", "name", "\n", "", "", "return", "names", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.mydemo.draw_boxes": [[32, 42], ["PIL.ImageDraw.Draw", "boxes.items", "tuple", "mydemo.convert_to_original_size", "ImageDraw.Draw.rectangle", "ImageDraw.Draw.text", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.mydemo.convert_to_original_size"], ["", "def", "draw_boxes", "(", "boxes", ",", "img", ",", "cls_names", ",", "detection_size", ")", ":", "\n", "    ", "draw", "=", "ImageDraw", ".", "Draw", "(", "img", ")", "\n", "\n", "for", "cls", ",", "bboxs", "in", "boxes", ".", "items", "(", ")", ":", "\n", "# color = tuple(np.random.randint(0, 256, 3))", "\n", "        ", "color", "=", "tuple", "(", "255", ",", "0", ",", "0", ")", "\n", "for", "box", ",", "score", "in", "bboxs", ":", "\n", "            ", "box", "=", "convert_to_original_size", "(", "box", ",", "np", ".", "array", "(", "detection_size", ")", ",", "np", ".", "array", "(", "img", ".", "size", ")", ")", "\n", "draw", ".", "rectangle", "(", "box", ",", "outline", "=", "color", ")", "\n", "draw", ".", "text", "(", "box", "[", ":", "2", "]", ",", "'{} {:.2f}%'", ".", "format", "(", "cls_names", "[", "cls", "]", ",", "score", "*", "100", ")", ",", "fill", "=", "color", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.mydemo.print_boxes": [[43, 50], ["print"], "function", ["None"], ["", "", "", "def", "print_boxes", "(", "boxes", ",", "img", ",", "cls_names", ",", "detection_size", ")", ":", "\n", "    ", "if", "not", "(", "CAR_CLASS", "in", "boxes", "[", "0", "]", ")", ":", "\n", "        ", "boxes", "[", "0", "]", "[", "CAR_CLASS", "]", "=", "(", "[", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", "]", ",", "0.0", ")", "\n", "", "for", "cls", "in", "[", "CAR_CLASS", "]", ":", "\n", "        ", "for", "box", ",", "score", "in", "boxes", "[", "0", "]", "[", "cls", "]", ":", "\n", "# print(\"class number {} is {} has score {:.2f} \\% using IOU :{} and confidence: {}\".format(cls,cls_names[cls],score * 100,FLAGS.iou_threshold,FLAGS.conf_threshold))", "\n", "            ", "print", "(", "\"{} has score {:.2f} \\% \"", ".", "format", "(", "cls_names", "[", "cls", "]", ",", "score", "*", "100", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.mydemo.convert_to_original_size": [[57, 61], ["list", "box.reshape", "box.reshape"], "function", ["home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.reshape", "home.repos.pwc.inspect_result.ajhamdi_SADA.None.models.reshape"], ["", "", "", "def", "convert_to_original_size", "(", "box", ",", "size", ",", "original_size", ")", ":", "\n", "    ", "ratio", "=", "original_size", "/", "size", "\n", "box", "=", "box", ".", "reshape", "(", "2", ",", "2", ")", "*", "ratio", "\n", "return", "list", "(", "box", ".", "reshape", "(", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.mydemo.main": [[63, 90], ["PIL.Image.open", "Image.open.resize", "mydemo.load_coco_names", "tensorflow.placeholder", "yolo_v3.detections_boxes", "yolo_v3.non_max_suppression", "mydemo.print_boxes", "tensorflow.variable_scope", "yolo_v3.yolo_v3", "yolo_v3.load_weights", "tensorflow.Session", "sess.run", "sess.run", "len", "tensorflow.global_variables", "numpy.array"], "function", ["home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.mydemo.load_coco_names", "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3.detections_boxes", "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3.non_max_suppression", "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.mydemo.print_boxes", "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3.yolo_v3", "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3.load_weights"], ["", "def", "main", "(", "argv", "=", "None", ")", ":", "\n", "    ", "img", "=", "Image", ".", "open", "(", "FLAGS", ".", "input_img", ")", "\n", "img_resized", "=", "img", ".", "resize", "(", "size", "=", "(", "FLAGS", ".", "size", ",", "FLAGS", ".", "size", ")", ")", "\n", "\n", "classes", "=", "load_coco_names", "(", "FLAGS", ".", "class_names", ")", "\n", "\n", "# placeholder for detector inputs", "\n", "inputs", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "FLAGS", ".", "size", ",", "FLAGS", ".", "size", ",", "3", "]", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'detector'", ")", ":", "\n", "        ", "detections", "=", "yolo_v3", "(", "inputs", ",", "len", "(", "classes", ")", ",", "data_format", "=", "'NCHW'", ")", "\n", "load_ops", "=", "load_weights", "(", "tf", ".", "global_variables", "(", "scope", "=", "'detector'", ")", ",", "FLAGS", ".", "weights_file", ")", "\n", "\n", "", "boxes", "=", "detections_boxes", "(", "detections", ")", "\n", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "        ", "sess", ".", "run", "(", "load_ops", ")", "\n", "\n", "detected_boxes", "=", "sess", ".", "run", "(", "boxes", ",", "feed_dict", "=", "{", "inputs", ":", "[", "np", ".", "array", "(", "img_resized", ",", "dtype", "=", "np", ".", "float32", ")", "]", "}", ")", "\n", "\n", "", "filtered_boxes", "=", "non_max_suppression", "(", "detected_boxes", ",", "confidence_threshold", "=", "FLAGS", ".", "conf_threshold", ",", "\n", "iou_threshold", "=", "FLAGS", ".", "iou_threshold", ")", "\n", "\n", "# draw_boxes(filtered_boxes, img, classes, (FLAGS.size, FLAGS.size))", "\n", "\n", "\n", "print_boxes", "(", "filtered_boxes", ",", "img", ",", "classes", ",", "(", "FLAGS", ".", "size", ",", "FLAGS", ".", "size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3_tiny.yolo_v3_tiny": [[15, 89], ["slim.max_pool2d.get_shape().as_list", "tensorflow.transpose", "slim.arg_scope", "slim.arg_scope", "slim.max_pool2d.get_shape", "slim.arg_scope", "tensorflow.variable_scope", "range", "yolo_v3._conv2d_fixed_padding", "yolo_v3._conv2d_fixed_padding", "yolo_v3._conv2d_fixed_padding", "yolo_v3._detection_layer", "tensorflow.identity", "yolo_v3._conv2d_fixed_padding", "route_1.get_shape().as_list", "yolo_v3._upsample", "tensorflow.concat", "yolo_v3._conv2d_fixed_padding", "yolo_v3._detection_layer", "tensorflow.identity", "tensorflow.concat", "tensorflow.identity", "yolo_v3._conv2d_fixed_padding", "slim.max_pool2d", "tensorflow.nn.leaky_relu", "route_1.get_shape", "pow"], "function", ["home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3._conv2d_fixed_padding", "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3._conv2d_fixed_padding", "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3._conv2d_fixed_padding", "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3._detection_layer", "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3._conv2d_fixed_padding", "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3._upsample", "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3._conv2d_fixed_padding", "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3._detection_layer", "home.repos.pwc.inspect_result.ajhamdi_SADA.detectors.yolo_v3._conv2d_fixed_padding"], ["def", "yolo_v3_tiny", "(", "inputs", ",", "num_classes", ",", "is_training", "=", "False", ",", "data_format", "=", "'NCHW'", ",", "reuse", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Creates YOLO v3 tiny model.\n\n    :param inputs: a 4-D tensor of size [batch_size, height, width, channels].\n        Dimension batch_size may be undefined. The channel order is RGB.\n    :param num_classes: number of predicted classes.\n    :param is_training: whether is training or not.\n    :param data_format: data format NCHW or NHWC.\n    :param reuse: whether or not the network and its variables should be reused.\n    :return:\n    \"\"\"", "\n", "# it will be needed later on", "\n", "img_size", "=", "inputs", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", ":", "3", "]", "\n", "\n", "# transpose the inputs to NCHW", "\n", "if", "data_format", "==", "'NCHW'", ":", "\n", "        ", "inputs", "=", "tf", ".", "transpose", "(", "inputs", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "\n", "# normalize values to range [0..1]", "\n", "", "inputs", "=", "inputs", "/", "255", "\n", "\n", "# set batch norm params", "\n", "batch_norm_params", "=", "{", "\n", "'decay'", ":", "_BATCH_NORM_DECAY", ",", "\n", "'epsilon'", ":", "_BATCH_NORM_EPSILON", ",", "\n", "'scale'", ":", "True", ",", "\n", "'is_training'", ":", "is_training", ",", "\n", "'fused'", ":", "None", ",", "# Use fused batch norm if possible.", "\n", "}", "\n", "\n", "# Set activation_fn and parameters for conv2d, batch_norm.", "\n", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "conv2d", ",", "slim", ".", "batch_norm", ",", "_fixed_padding", ",", "slim", ".", "max_pool2d", "]", ",", "data_format", "=", "data_format", ")", ":", "\n", "        ", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "conv2d", ",", "slim", ".", "batch_norm", ",", "_fixed_padding", "]", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "conv2d", "]", ",", "\n", "normalizer_fn", "=", "slim", ".", "batch_norm", ",", "\n", "normalizer_params", "=", "batch_norm_params", ",", "\n", "biases_initializer", "=", "None", ",", "\n", "activation_fn", "=", "lambda", "x", ":", "tf", ".", "nn", ".", "leaky_relu", "(", "x", ",", "alpha", "=", "_LEAKY_RELU", ")", ")", ":", "\n", "\n", "                ", "with", "tf", ".", "variable_scope", "(", "'yolo-v3-tiny'", ")", ":", "\n", "                    ", "for", "i", "in", "range", "(", "6", ")", ":", "\n", "                        ", "inputs", "=", "_conv2d_fixed_padding", "(", "inputs", ",", "16", "*", "pow", "(", "2", ",", "i", ")", ",", "3", ")", "\n", "\n", "if", "i", "==", "4", ":", "\n", "                            ", "route_1", "=", "inputs", "\n", "\n", "", "inputs", "=", "slim", ".", "max_pool2d", "(", "inputs", ",", "[", "2", ",", "2", "]", ",", "scope", "=", "'pool2'", ")", "\n", "\n", "", "inputs", "=", "_conv2d_fixed_padding", "(", "inputs", ",", "1024", ",", "3", ")", "\n", "inputs", "=", "_conv2d_fixed_padding", "(", "inputs", ",", "256", ",", "1", ")", "\n", "route_2", "=", "inputs", "\n", "\n", "inputs", "=", "_conv2d_fixed_padding", "(", "inputs", ",", "512", ",", "3", ")", "\n", "# inputs = _conv2d_fixed_padding(inputs, 255, 1)", "\n", "\n", "detect_1", "=", "_detection_layer", "(", "inputs", ",", "num_classes", ",", "_ANCHORS", "[", "3", ":", "6", "]", ",", "img_size", ",", "data_format", ")", "\n", "detect_1", "=", "tf", ".", "identity", "(", "detect_1", ",", "name", "=", "'detect_1'", ")", "\n", "\n", "inputs", "=", "_conv2d_fixed_padding", "(", "route_2", ",", "128", ",", "1", ")", "\n", "upsample_size", "=", "route_1", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "inputs", "=", "_upsample", "(", "inputs", ",", "upsample_size", ",", "data_format", ")", "\n", "\n", "inputs", "=", "tf", ".", "concat", "(", "[", "inputs", ",", "route_1", "]", ",", "axis", "=", "1", "if", "data_format", "==", "'NCHW'", "else", "3", ")", "\n", "\n", "inputs", "=", "_conv2d_fixed_padding", "(", "inputs", ",", "256", ",", "3", ")", "\n", "# inputs = _conv2d_fixed_padding(inputs, 255, 1)", "\n", "\n", "detect_2", "=", "_detection_layer", "(", "inputs", ",", "num_classes", ",", "_ANCHORS", "[", "0", ":", "3", "]", ",", "img_size", ",", "data_format", ")", "\n", "detect_2", "=", "tf", ".", "identity", "(", "detect_2", ",", "name", "=", "'detect_2'", ")", "\n", "\n", "detections", "=", "tf", ".", "concat", "(", "[", "detect_1", ",", "detect_2", "]", ",", "axis", "=", "1", ")", "\n", "detections", "=", "tf", ".", "identity", "(", "detections", ",", "name", "=", "'detections'", ")", "\n", "return", "detections", "\n", "", "", "", "", "", ""]]}