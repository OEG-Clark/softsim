{"home.repos.pwc.inspect_result.morancyc_usnet.None.train.val": [[19, 62], ["print", "torch.no_grad", "model.eval", "numpy.zeros", "enumerate", "utils.getScores", "print", "print", "print", "print", "print", "model", "torch.sum", "cv2.resize.view", "cv2.resize.detach().cpu().numpy", "numpy.array", "numpy.uint8", "cv2.resize", "label.cuda.squeeze", "label.cuda.cpu().numpy", "numpy.array", "cv2.resize", "utils.fast_hist", "oriWidth.cpu().numpy", "oriHeight.cpu().numpy", "torch.cuda.is_available", "image.cuda.cuda", "depth.cuda.cuda", "label.cuda.cuda", "torch.sum.expand", "numpy.uint8", "label.cuda.flatten", "cv2.resize.flatten", "cv2.resize.detach().cpu", "label.cuda.cpu", "oriWidth.cpu", "oriHeight.cpu", "cv2.resize.detach"], "function", ["home.repos.pwc.inspect_result.morancyc_usnet.None.utils.getScores", "home.repos.pwc.inspect_result.morancyc_usnet.None.utils.fast_hist"], ["def", "val", "(", "args", ",", "model", ",", "dataloader", ")", ":", "\n", "    ", "print", "(", "'start val!'", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "hist", "=", "np", ".", "zeros", "(", "(", "args", ".", "num_classes", ",", "args", ".", "num_classes", ")", ")", "\n", "for", "i", ",", "sample", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "            ", "image", ",", "depth", ",", "label", "=", "sample", "[", "'image'", "]", ",", "sample", "[", "'depth'", "]", ",", "sample", "[", "'label'", "]", "\n", "oriHeight", ",", "oriWidth", "=", "sample", "[", "'oriHeight'", "]", ",", "sample", "[", "'oriWidth'", "]", "\n", "oriWidth", "=", "oriWidth", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "oriHeight", "=", "oriHeight", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "args", ".", "use_gpu", ":", "\n", "                ", "image", "=", "image", ".", "cuda", "(", ")", "\n", "depth", "=", "depth", ".", "cuda", "(", ")", "\n", "label", "=", "label", ".", "cuda", "(", ")", "\n", "\n", "# get predict", "\n", "", "evidence", ",", "evidence_a", ",", "alpha", ",", "alpha_a", "=", "model", "(", "image", ",", "depth", ")", "\n", "\n", "s", "=", "torch", ".", "sum", "(", "alpha_a", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "p", "=", "alpha_a", "/", "(", "s", ".", "expand", "(", "alpha_a", ".", "shape", ")", ")", "\n", "\n", "pred", "=", "p", "[", ":", ",", "1", "]", "\n", "pred", "=", "pred", ".", "view", "(", "args", ".", "crop_height", ",", "args", ".", "crop_width", ")", "\n", "pred", "=", "pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pred", "=", "np", ".", "array", "(", "pred", ")", "\n", "pred", "=", "np", ".", "uint8", "(", "pred", ">", "0.5", ")", "\n", "pred", "=", "cv2", ".", "resize", "(", "pred", ",", "(", "oriWidth", ",", "oriHeight", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "\n", "# get label", "\n", "label", "=", "label", ".", "squeeze", "(", ")", "\n", "label", "=", "label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "label", "=", "np", ".", "array", "(", "label", ")", "\n", "label", "=", "cv2", ".", "resize", "(", "np", ".", "uint8", "(", "label", ")", ",", "(", "oriWidth", ",", "oriHeight", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "\n", "hist", "+=", "fast_hist", "(", "label", ".", "flatten", "(", ")", ",", "pred", ".", "flatten", "(", ")", ",", "args", ".", "num_classes", ")", "\n", "", "F_score", ",", "pre", ",", "recall", ",", "fpr", ",", "fnr", "=", "getScores", "(", "hist", ")", "\n", "print", "(", "'F_score: %.3f'", "%", "F_score", ")", "\n", "print", "(", "'pre : %.3f'", "%", "pre", ")", "\n", "print", "(", "'recall: %.3f'", "%", "recall", ")", "\n", "print", "(", "'fpr: %.3f'", "%", "fpr", ")", "\n", "print", "(", "'fnr: %.3f'", "%", "fpr", ")", "\n", "", "return", "F_score", ",", "pre", ",", "recall", ",", "fpr", ",", "fnr", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.None.train.train": [[64, 127], ["tensorboardX.SummaryWriter", "range", "utils.poly_lr_scheduler", "model.train", "tqdm.tqdm", "tqdm.tqdm.set_description", "enumerate", "tqdm.tqdm.close", "numpy.mean", "tensorboardX.SummaryWriter.add_scalar", "print", "model", "label.cuda.flatten", "range", "range", "torch.mean", "tqdm.tqdm.update", "tqdm.tqdm.set_postfix", "optimizer.zero_grad", "torch.mean.backward", "optimizer.step", "tensorboardX.SummaryWriter.add_scalar", "loss_record.append", "float", "torch.save", "train.val", "open", "open.write", "open.close", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "torch.cuda.is_available", "image.cuda.cuda", "depth.cuda.cuda", "label.cuda.cuda", "len", "loss.ce_loss", "len", "loss.ce_loss", "loss.ce_loss", "torch.mean.item", "os.path.isdir", "os.mkdir", "model.module.state_dict", "os.path.join", "os.path.join", "torch.save", "len", "model.module.state_dict", "os.path.join"], "function", ["home.repos.pwc.inspect_result.morancyc_usnet.None.utils.poly_lr_scheduler", "home.repos.pwc.inspect_result.morancyc_usnet.None.train.train", "home.repos.pwc.inspect_result.morancyc_usnet.None.train.val", "home.repos.pwc.inspect_result.morancyc_usnet.None.loss.ce_loss", "home.repos.pwc.inspect_result.morancyc_usnet.None.loss.ce_loss", "home.repos.pwc.inspect_result.morancyc_usnet.None.loss.ce_loss"], ["", "def", "train", "(", "args", ",", "model", ",", "optimizer", ",", "dataloader_train", ",", "dataloader_val", ")", ":", "\n", "    ", "writer", "=", "SummaryWriter", "(", "comment", "=", "''", ".", "format", "(", "args", ".", "backbone_name", ")", ")", "\n", "max_F_score", "=", "0", "\n", "step", "=", "0", "\n", "lambda_epochs", "=", "50", "\n", "for", "epoch", "in", "range", "(", "args", ".", "num_epochs", ")", ":", "\n", "        ", "lr", "=", "poly_lr_scheduler", "(", "optimizer", ",", "args", ".", "learning_rate", ",", "iter", "=", "epoch", ",", "max_iter", "=", "args", ".", "num_epochs", ")", "\n", "model", ".", "train", "(", ")", "\n", "tq", "=", "tqdm", ".", "tqdm", "(", "total", "=", "len", "(", "dataloader_train", ")", "*", "args", ".", "batch_size", ")", "\n", "tq", ".", "set_description", "(", "'epoch %d, lr %f'", "%", "(", "epoch", ",", "lr", ")", ")", "\n", "loss_record", "=", "[", "]", "\n", "for", "i", ",", "sample", "in", "enumerate", "(", "dataloader_train", ")", ":", "\n", "            ", "image", ",", "depth", ",", "label", "=", "sample", "[", "'image'", "]", ",", "sample", "[", "'depth'", "]", ",", "sample", "[", "'label'", "]", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "args", ".", "use_gpu", ":", "\n", "                ", "image", "=", "image", ".", "cuda", "(", ")", "\n", "depth", "=", "depth", ".", "cuda", "(", ")", "\n", "label", "=", "label", ".", "cuda", "(", ")", "\n", "\n", "# network output", "\n", "", "evidence_sup", ",", "alpha_sup", ",", "evidence", ",", "evidence_a", ",", "alpha", ",", "alpha_a", "=", "model", "(", "image", ",", "depth", ")", "\n", "\n", "# compute loss", "\n", "label", "=", "label", ".", "flatten", "(", ")", "\n", "loss", "=", "0", "\n", "for", "v_num", "in", "range", "(", "len", "(", "alpha_sup", ")", ")", ":", "\n", "                ", "loss", "+=", "ce_loss", "(", "label", ",", "alpha_sup", "[", "v_num", "]", ",", "args", ".", "num_classes", ",", "epoch", ",", "lambda_epochs", ")", "\n", "", "for", "v_num", "in", "range", "(", "len", "(", "alpha", ")", ")", ":", "\n", "                ", "loss", "+=", "ce_loss", "(", "label", ",", "alpha", "[", "v_num", "]", ",", "args", ".", "num_classes", ",", "epoch", ",", "lambda_epochs", ")", "\n", "", "loss", "+=", "2", "*", "ce_loss", "(", "label", ",", "alpha_a", ",", "args", ".", "num_classes", ",", "epoch", ",", "lambda_epochs", ")", "\n", "loss", "=", "torch", ".", "mean", "(", "loss", ")", "\n", "\n", "tq", ".", "update", "(", "args", ".", "batch_size", ")", "\n", "tq", ".", "set_postfix", "(", "loss", "=", "'%.6f'", "%", "loss", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "step", "+=", "1", "\n", "writer", ".", "add_scalar", "(", "'loss_step'", ",", "loss", ",", "step", ")", "\n", "loss_record", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "", "tq", ".", "close", "(", ")", "\n", "loss_train_mean", "=", "np", ".", "mean", "(", "loss_record", ")", "\n", "writer", ".", "add_scalar", "(", "'epoch/loss_epoch_train'", ",", "float", "(", "loss_train_mean", ")", ",", "epoch", ")", "\n", "print", "(", "'loss for train : %f'", "%", "(", "loss_train_mean", ")", ")", "\n", "\n", "# save checkpoints", "\n", "if", "epoch", "%", "args", ".", "checkpoint_step", "==", "0", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "isdir", "(", "args", ".", "save_model_path", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "args", ".", "save_model_path", ")", "\n", "", "torch", ".", "save", "(", "model", ".", "module", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "args", ".", "save_model_path", ",", "'usnet_latest.pth'", ")", ")", "\n", "\n", "", "if", "epoch", "%", "args", ".", "validation_step", "==", "0", ":", "\n", "            ", "F_score", ",", "pre", ",", "recall", ",", "fpr", ",", "fnr", "=", "val", "(", "args", ",", "model", ",", "dataloader_val", ")", "\n", "file", "=", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_model_path", ",", "'F_score.txt'", ")", ",", "mode", "=", "'a+'", ")", "\n", "file", ".", "write", "(", "'epoch = %d, F_score = %f\\n'", "%", "(", "epoch", ",", "F_score", ")", ")", "\n", "file", ".", "close", "(", ")", "\n", "if", "F_score", ">", "max_F_score", ":", "\n", "                ", "max_F_score", "=", "F_score", "\n", "torch", ".", "save", "(", "model", ".", "module", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "args", ".", "save_model_path", ",", "'usnet_best.pth'", ")", ")", "\n", "", "writer", ".", "add_scalar", "(", "'epoch/F_score'", ",", "F_score", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'epoch/pre'", ",", "pre", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'epoch/recall'", ",", "recall", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'epoch/fpr'", ",", "fpr", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'epoch/fnr'", ",", "fnr", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.None.train.main": [[129, 204], ["torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "numpy.random.seed", "random.seed", "argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "model.usnet.USNet", "list", "filter", "torch.optim.AdamW", "train.train", "dataset.kitti.Kitti_Dataset", "dataset.kitti.Kitti_Dataset", "torch.cuda.is_available", "torch.nn.DataParallel().cuda", "map", "torch.nn.DataParallel().cuda.parameters", "print", "torch.nn.DataParallel().cuda.module.load_state_dict", "print", "dataset.cityscapes.Cityscapes_Dataset", "dataset.cityscapes.Cityscapes_Dataset", "torch.nn.DataParallel().cuda.module.backbone.parameters", "torch.load", "torch.nn.DataParallel", "id", "torch.nn.DataParallel().cuda.module.backbone.parameters"], "function", ["home.repos.pwc.inspect_result.morancyc_usnet.None.train.train"], ["", "", "", "def", "main", "(", "params", ")", ":", "\n", "# set initialization seed", "\n", "    ", "torch", ".", "manual_seed", "(", "0", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "0", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "0", ")", "\n", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "random", ".", "seed", "(", "0", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n", "# basic parameters", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--num_epochs'", ",", "type", "=", "int", ",", "default", "=", "500", ",", "help", "=", "'Number of epochs to train for'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint_step'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'How often to save checkpoints (epochs)'", ")", "\n", "parser", ".", "add_argument", "(", "'--validation_step'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'How often to perform validation (epochs)'", ")", "\n", "parser", ".", "add_argument", "(", "'--data'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'path of training data'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "\"Kitti\"", ",", "help", "=", "'Dataset you are using.'", ")", "\n", "parser", ".", "add_argument", "(", "'--crop_height'", ",", "type", "=", "int", ",", "default", "=", "384", ",", "help", "=", "'Height of cropped/resized input image to network'", ")", "\n", "parser", ".", "add_argument", "(", "'--crop_width'", ",", "type", "=", "int", ",", "default", "=", "1248", ",", "help", "=", "'Width of cropped/resized input image to network'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'Number of images in each batch'", ")", "\n", "parser", ".", "add_argument", "(", "'--backbone_name'", ",", "type", "=", "str", ",", "default", "=", "\"resnet18\"", ",", "\n", "help", "=", "'The backbone model you are using, resnet18, resnet101.'", ")", "\n", "parser", ".", "add_argument", "(", "'--learning_rate'", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "help", "=", "'learning rate used for train'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'num of workers'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_classes'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "help", "=", "'num of object classes'", ")", "\n", "parser", ".", "add_argument", "(", "'--cuda'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "help", "=", "'GPU ids used for training'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_gpu'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "help", "=", "'whether to user gpu for training'", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrained_model_path'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'path to pretrained model'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_model_path'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'path to save model'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", "params", ")", "\n", "\n", "if", "args", ".", "dataset", "==", "'Kitti'", ":", "\n", "        ", "train_set", "=", "Kitti_Dataset", "(", "args", ",", "root", "=", "args", ".", "data", ",", "split", "=", "'training'", ")", "\n", "val_set", "=", "Kitti_Dataset", "(", "args", ",", "root", "=", "args", ".", "data", ",", "split", "=", "'validating'", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'Cityscapes'", ":", "\n", "        ", "train_set", "=", "Cityscapes_Dataset", "(", "args", ",", "root", "=", "args", ".", "data", ",", "split", "=", "'train'", ")", "\n", "val_set", "=", "Cityscapes_Dataset", "(", "args", ",", "root", "=", "args", ".", "data", ",", "split", "=", "'val'", ")", "\n", "\n", "", "dataloader_train", "=", "DataLoader", "(", "\n", "train_set", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "drop_last", "=", "True", "\n", ")", "\n", "dataloader_val", "=", "DataLoader", "(", "\n", "val_set", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "num_workers", "\n", ")", "\n", "\n", "# build model", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "args", ".", "cuda", "\n", "\n", "model", "=", "USNet", "(", "args", ".", "num_classes", ",", "args", ".", "backbone_name", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "args", ".", "use_gpu", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "\n", "", "encoder_params", "=", "list", "(", "map", "(", "id", ",", "model", ".", "module", ".", "backbone", ".", "parameters", "(", ")", ")", ")", "\n", "base_params", "=", "filter", "(", "lambda", "p", ":", "id", "(", "p", ")", "not", "in", "encoder_params", ",", "model", ".", "parameters", "(", ")", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "AdamW", "(", "[", "{", "'params'", ":", "base_params", "}", ",", "\n", "{", "'params'", ":", "model", ".", "module", ".", "backbone", ".", "parameters", "(", ")", ",", "'lr'", ":", "args", ".", "learning_rate", "*", "0.1", "}", "]", ",", "\n", "lr", "=", "args", ".", "learning_rate", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "weight_decay", "=", "0.01", ")", "\n", "\n", "# load pretrained model if exists", "\n", "if", "args", ".", "pretrained_model_path", "is", "not", "None", ":", "\n", "        ", "print", "(", "'load model from %s ...'", "%", "args", ".", "pretrained_model_path", ")", "\n", "model", ".", "module", ".", "load_state_dict", "(", "torch", ".", "load", "(", "args", ".", "pretrained_model_path", ")", ")", "\n", "print", "(", "'Done!'", ")", "\n", "\n", "# train", "\n", "", "train", "(", "args", ",", "model", ",", "optimizer", ",", "dataloader_train", ",", "dataloader_val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.None.loss.KL": [[6, 16], ["torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.digamma", "torch.digamma", "torch.digamma", "torch.digamma", "torch.digamma", "torch.digamma", "torch.lgamma", "torch.lgamma", "torch.lgamma", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.lgamma", "torch.lgamma", "torch.lgamma", "torch.ones", "torch.ones", "torch.ones", "torch.lgamma", "torch.lgamma", "torch.lgamma", "torch.lgamma", "torch.lgamma", "torch.lgamma", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["def", "KL", "(", "alpha", ",", "c", ")", ":", "\n", "    ", "beta", "=", "torch", ".", "ones", "(", "(", "1", ",", "c", ")", ")", ".", "cuda", "(", ")", "\n", "S_alpha", "=", "torch", ".", "sum", "(", "alpha", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "S_beta", "=", "torch", ".", "sum", "(", "beta", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "lnB", "=", "torch", ".", "lgamma", "(", "S_alpha", ")", "-", "torch", ".", "sum", "(", "torch", ".", "lgamma", "(", "alpha", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "lnB_uni", "=", "torch", ".", "sum", "(", "torch", ".", "lgamma", "(", "beta", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "-", "torch", ".", "lgamma", "(", "S_beta", ")", "\n", "dg0", "=", "torch", ".", "digamma", "(", "S_alpha", ")", "\n", "dg1", "=", "torch", ".", "digamma", "(", "alpha", ")", "\n", "kl", "=", "torch", ".", "sum", "(", "(", "alpha", "-", "beta", ")", "*", "(", "dg1", "-", "dg0", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "lnB", "+", "lnB_uni", "\n", "return", "kl", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.None.loss.ce_loss": [[18, 30], ["torch.sum", "torch.sum", "torch.sum", "torch.one_hot", "torch.sum", "torch.sum", "torch.sum", "min", "loss.KL", "torch.digamma", "torch.digamma", "torch.digamma", "torch.digamma", "torch.digamma", "torch.digamma"], "function", ["home.repos.pwc.inspect_result.morancyc_usnet.None.loss.KL"], ["", "def", "ce_loss", "(", "p", ",", "alpha", ",", "c", ",", "global_step", ",", "annealing_step", ")", ":", "\n", "    ", "S", "=", "torch", ".", "sum", "(", "alpha", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "E", "=", "alpha", "-", "1", "\n", "label", "=", "F", ".", "one_hot", "(", "p", ",", "num_classes", "=", "c", ")", "\n", "A", "=", "torch", ".", "sum", "(", "label", "*", "(", "torch", ".", "digamma", "(", "S", ")", "-", "torch", ".", "digamma", "(", "alpha", ")", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "annealing_coef", "=", "min", "(", "1", ",", "global_step", "/", "annealing_step", ")", "\n", "\n", "alp", "=", "E", "*", "(", "1", "-", "label", ")", "+", "1", "\n", "B", "=", "annealing_coef", "*", "KL", "(", "alp", ",", "c", ")", "\n", "\n", "return", "(", "A", "+", "B", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.None.loss.mse_loss": [[32, 43], ["torch.sum", "torch.sum", "torch.sum", "torch.one_hot", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "min", "loss.KL"], "function", ["home.repos.pwc.inspect_result.morancyc_usnet.None.loss.KL"], ["", "def", "mse_loss", "(", "p", ",", "alpha", ",", "c", ",", "global_step", ",", "annealing_step", "=", "1", ")", ":", "\n", "    ", "S", "=", "torch", ".", "sum", "(", "alpha", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "E", "=", "alpha", "-", "1", "\n", "m", "=", "alpha", "/", "S", "\n", "label", "=", "F", ".", "one_hot", "(", "p", ",", "num_classes", "=", "c", ")", "\n", "A", "=", "torch", ".", "sum", "(", "(", "label", "-", "m", ")", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "B", "=", "torch", ".", "sum", "(", "alpha", "*", "(", "S", "-", "alpha", ")", "/", "(", "S", "*", "S", "*", "(", "S", "+", "1", ")", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "annealing_coef", "=", "min", "(", "1", ",", "global_step", "/", "annealing_step", ")", "\n", "alp", "=", "E", "*", "(", "1", "-", "label", ")", "+", "1", "\n", "C", "=", "annealing_coef", "*", "KL", "(", "alp", ",", "c", ")", "\n", "return", "(", "A", "+", "B", ")", "+", "C", "\n", "", ""]], "home.repos.pwc.inspect_result.morancyc_usnet.None.test.test": [[12, 64], ["print", "torch.no_grad", "model.eval", "numpy.zeros", "enumerate", "utils.getScores", "print", "print", "print", "print", "print", "model", "torch.sum", "cv2.resize.view", "cv2.resize.detach().cpu().numpy", "numpy.array", "cv2.resize", "numpy.floor", "cv2.imwrite", "numpy.uint8", "cv2.resize", "label.cuda.squeeze", "label.cuda.cpu().numpy", "numpy.array", "cv2.resize", "utils.fast_hist", "oriWidth.cpu().numpy", "oriHeight.cpu().numpy", "torch.cuda.is_available", "image.cuda.cuda", "depth.cuda.cuda", "label.cuda.cuda", "torch.sum.expand", "img_path.split", "os.path.join", "numpy.uint8", "numpy.uint8", "label.cuda.flatten", "cv2.resize.flatten", "cv2.resize.detach().cpu", "img_name.split", "label.cuda.cpu", "oriWidth.cpu", "oriHeight.cpu", "np.floor.max", "np.floor.min", "img_name.split", "cv2.resize.detach", "np.floor.min"], "function", ["home.repos.pwc.inspect_result.morancyc_usnet.None.utils.getScores", "home.repos.pwc.inspect_result.morancyc_usnet.None.utils.fast_hist"], ["def", "test", "(", "args", ",", "model", ",", "dataloader", ")", ":", "\n", "    ", "print", "(", "'start test!'", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "hist", "=", "np", ".", "zeros", "(", "(", "args", ".", "num_classes", ",", "args", ".", "num_classes", ")", ")", "\n", "for", "i", ",", "sample", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "            ", "image", ",", "depth", ",", "label", "=", "sample", "[", "'image'", "]", ",", "sample", "[", "'depth'", "]", ",", "sample", "[", "'label'", "]", "\n", "oriHeight", ",", "oriWidth", "=", "sample", "[", "'oriHeight'", "]", ",", "sample", "[", "'oriWidth'", "]", "\n", "oriWidth", "=", "oriWidth", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "oriHeight", "=", "oriHeight", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "args", ".", "use_gpu", ":", "\n", "                ", "image", "=", "image", ".", "cuda", "(", ")", "\n", "depth", "=", "depth", ".", "cuda", "(", ")", "\n", "label", "=", "label", ".", "cuda", "(", ")", "\n", "\n", "# get predict image", "\n", "", "evidence", ",", "evidence_a", ",", "alpha", ",", "alpha_a", "=", "model", "(", "image", ",", "depth", ")", "\n", "\n", "s", "=", "torch", ".", "sum", "(", "alpha_a", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "p", "=", "alpha_a", "/", "(", "s", ".", "expand", "(", "alpha_a", ".", "shape", ")", ")", "\n", "\n", "pred", "=", "p", "[", ":", ",", "1", "]", "\n", "pred", "=", "pred", ".", "view", "(", "args", ".", "crop_height", ",", "args", ".", "crop_width", ")", "\n", "pred", "=", "pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pred", "=", "np", ".", "array", "(", "pred", ")", "\n", "\n", "# save predict image", "\n", "visualize", "=", "cv2", ".", "resize", "(", "pred", ",", "(", "oriWidth", ",", "oriHeight", ")", ")", "\n", "visualize", "=", "np", ".", "floor", "(", "255", "*", "(", "visualize", "-", "visualize", ".", "min", "(", ")", ")", "/", "(", "visualize", ".", "max", "(", ")", "-", "visualize", ".", "min", "(", ")", ")", ")", "\n", "img_path", "=", "sample", "[", "'img_path'", "]", "[", "0", "]", "\n", "img_name", "=", "img_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "save_name", "=", "img_name", ".", "split", "(", "'_'", ")", "[", "0", "]", "+", "'_road_'", "+", "img_name", ".", "split", "(", "'_'", ")", "[", "1", "]", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_path", ",", "save_name", ")", ",", "np", ".", "uint8", "(", "visualize", ")", ")", "\n", "\n", "pred", "=", "np", ".", "uint8", "(", "pred", ">", "0.5", ")", "\n", "pred", "=", "cv2", ".", "resize", "(", "pred", ",", "(", "oriWidth", ",", "oriHeight", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "\n", "# get label image", "\n", "label", "=", "label", ".", "squeeze", "(", ")", "\n", "label", "=", "label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "label", "=", "np", ".", "array", "(", "label", ")", "\n", "label", "=", "cv2", ".", "resize", "(", "np", ".", "uint8", "(", "label", ")", ",", "(", "oriWidth", ",", "oriHeight", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "\n", "hist", "+=", "fast_hist", "(", "label", ".", "flatten", "(", ")", ",", "pred", ".", "flatten", "(", ")", ",", "args", ".", "num_classes", ")", "\n", "", "F_score", ",", "pre", ",", "recall", ",", "fpr", ",", "fnr", "=", "getScores", "(", "hist", ")", "\n", "print", "(", "'F_score: %.3f'", "%", "F_score", ")", "\n", "print", "(", "'pre : %.3f'", "%", "pre", ")", "\n", "print", "(", "'recall: %.3f'", "%", "recall", ")", "\n", "print", "(", "'fpr: %.3f'", "%", "fpr", ")", "\n", "print", "(", "'fnr: %.3f'", "%", "fpr", ")", "\n", "", "return", "F_score", ",", "pre", ",", "recall", ",", "fpr", ",", "fnr", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.None.test.main": [[66, 106], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "dataset.kitti.Kitti_Dataset", "torch.utils.data.DataLoader", "model.usnet.USNet", "print", "torch.nn.DataParallel().cuda.module.load_state_dict", "print", "test.test", "torch.cuda.is_available", "torch.nn.DataParallel().cuda", "torch.load", "os.path.exists", "os.makedirs", "torch.nn.DataParallel"], "function", ["home.repos.pwc.inspect_result.morancyc_usnet.None.test.test"], ["", "def", "main", "(", "params", ")", ":", "\n", "# basic parameters", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint_path'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "required", "=", "True", ",", "help", "=", "'The path to the pretrained weights of model'", ")", "\n", "parser", ".", "add_argument", "(", "'--crop_height'", ",", "type", "=", "int", ",", "default", "=", "384", ",", "help", "=", "'Height of cropped/resized input image to network'", ")", "\n", "parser", ".", "add_argument", "(", "'--crop_width'", ",", "type", "=", "int", ",", "default", "=", "1248", ",", "help", "=", "'Width of cropped/resized input image to network'", ")", "\n", "parser", ".", "add_argument", "(", "'--data'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'Path of testing data'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "\"KITTI\"", ",", "help", "=", "'Dataset you are using.'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'Number of images in each batch'", ")", "\n", "parser", ".", "add_argument", "(", "'--backbone_name'", ",", "type", "=", "str", ",", "default", "=", "\"resnet18\"", ",", "help", "=", "'The backbone model you are using.'", ")", "\n", "parser", ".", "add_argument", "(", "'--cuda'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "help", "=", "'GPU ids used for training'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_gpu'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "help", "=", "'Whether to user gpu for training'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_classes'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'num of object classes (with void)'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_path'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "required", "=", "True", ",", "help", "=", "'Path to save predict image'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", "params", ")", "\n", "\n", "dataset", "=", "Kitti_Dataset", "(", "args", ",", "root", "=", "args", ".", "data", ",", "split", "=", "'validating'", ")", "\n", "dataloader", "=", "DataLoader", "(", "\n", "dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "1", ",", "\n", ")", "\n", "\n", "# build model", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "args", ".", "cuda", "\n", "model", "=", "USNet", "(", "args", ".", "num_classes", ",", "args", ".", "backbone_name", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "args", ".", "use_gpu", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "\n", "# load trained model", "\n", "", "print", "(", "'load model from %s ...'", "%", "args", ".", "checkpoint_path", ")", "\n", "model", ".", "module", ".", "load_state_dict", "(", "torch", ".", "load", "(", "args", ".", "checkpoint_path", ")", ")", "\n", "print", "(", "'Done!'", ")", "\n", "\n", "# make save folder", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "save_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "save_path", ")", "\n", "\n", "", "test", "(", "args", ",", "model", ",", "dataloader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.None.utils.poly_lr_scheduler": [[4, 20], ["None"], "function", ["None"], ["def", "poly_lr_scheduler", "(", "optimizer", ",", "init_lr", ",", "iter", ",", "lr_decay_iter", "=", "1", ",", "max_iter", "=", "500", ",", "power", "=", "0.9", ")", ":", "\n", "    ", "\"\"\"Polynomial decay of learning rate\n\t\t:param init_lr is base learning rate\n\t\t:param iter is a current iteration\n\t\t:param lr_decay_iter how frequently decay occurs, default is 1\n\t\t:param max_iter is number of maximum iterations\n\t\t:param power is a polymomial power\n\n\t\"\"\"", "\n", "# if iter % lr_decay_iter or iter > max_iter:", "\n", "# \treturn optimizer", "\n", "\n", "lr", "=", "init_lr", "*", "(", "1", "-", "iter", "/", "max_iter", ")", "**", "power", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "lr", "\n", "optimizer", ".", "param_groups", "[", "1", "]", "[", "'lr'", "]", "=", "lr", "*", "0.1", "\n", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.None.utils.fast_hist": [[22, 29], ["numpy.bincount().reshape", "numpy.bincount", "a[].astype"], "function", ["None"], ["", "def", "fast_hist", "(", "a", ",", "b", ",", "n", ")", ":", "\n", "    ", "'''\n\ta and b are predict and mask respectively\n\tn is the number of classes\n\t'''", "\n", "k", "=", "(", "a", ">=", "0", ")", "&", "(", "a", "<", "n", ")", "\n", "return", "np", ".", "bincount", "(", "n", "*", "a", "[", "k", "]", ".", "astype", "(", "int", ")", "+", "b", "[", "k", "]", ",", "minlength", "=", "n", "**", "2", ")", ".", "reshape", "(", "n", ",", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.None.utils.getScores": [[31, 43], ["conf_matrix.sum", "numpy.errstate", "numpy.diag", "conf_matrix.sum().astype", "numpy.diag", "conf_matrix.sum().astype", "numpy.float", "numpy.float", "conf_matrix.sum", "conf_matrix.sum"], "function", ["None"], ["", "def", "getScores", "(", "conf_matrix", ")", ":", "\n", "    ", "if", "conf_matrix", ".", "sum", "(", ")", "==", "0", ":", "\n", "        ", "return", "0", ",", "0", ",", "0", ",", "0", ",", "0", "\n", "", "with", "np", ".", "errstate", "(", "divide", "=", "'ignore'", ",", "invalid", "=", "'ignore'", ")", ":", "\n", "        ", "classpre", "=", "np", ".", "diag", "(", "conf_matrix", ")", "/", "conf_matrix", ".", "sum", "(", "0", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "classrecall", "=", "np", ".", "diag", "(", "conf_matrix", ")", "/", "conf_matrix", ".", "sum", "(", "1", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "pre", "=", "classpre", "[", "1", "]", "\n", "recall", "=", "classrecall", "[", "1", "]", "\n", "F_score", "=", "2", "*", "(", "recall", "*", "pre", ")", "/", "(", "recall", "+", "pre", ")", "\n", "fpr", "=", "conf_matrix", "[", "0", ",", "1", "]", "/", "np", ".", "float", "(", "conf_matrix", "[", "0", ",", "0", "]", "+", "conf_matrix", "[", "0", ",", "1", "]", ")", "\n", "fnr", "=", "conf_matrix", "[", "1", ",", "0", "]", "/", "np", ".", "float", "(", "conf_matrix", "[", "1", ",", "0", "]", "+", "conf_matrix", "[", "1", ",", "1", "]", ")", "\n", "", "return", "F_score", ",", "pre", ",", "recall", ",", "fpr", ",", "fnr", "\n", "", ""]], "home.repos.pwc.inspect_result.morancyc_usnet.dataset.cityscapes.Cityscapes_Dataset.__init__": [[39, 79], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "cityscapes.Cityscapes_Dataset.recursive_glob", "cityscapes.Cityscapes_Dataset.images[].sort", "cityscapes.Cityscapes_Dataset.recursive_glob", "cityscapes.Cityscapes_Dataset.disparities[].sort", "cityscapes.Cityscapes_Dataset.recursive_glob", "cityscapes.Cityscapes_Dataset.labels[].sort", "cityscapes.Cityscapes_Dataset.recursive_glob", "cityscapes.Cityscapes_Dataset.calibs[].sort", "model.sne_model.SNE", "print", "print", "Exception", "Exception", "len", "len"], "methods", ["home.repos.pwc.inspect_result.morancyc_usnet.dataset.cityscapes.Cityscapes_Dataset.recursive_glob", "home.repos.pwc.inspect_result.morancyc_usnet.dataset.cityscapes.Cityscapes_Dataset.recursive_glob", "home.repos.pwc.inspect_result.morancyc_usnet.dataset.cityscapes.Cityscapes_Dataset.recursive_glob", "home.repos.pwc.inspect_result.morancyc_usnet.dataset.cityscapes.Cityscapes_Dataset.recursive_glob"], ["def", "__init__", "(", "self", ",", "args", ",", "root", "=", "'./data/Cityscapes/'", ",", "split", "=", "'train'", ")", ":", "\n", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "images", "=", "{", "}", "\n", "self", ".", "disparities", "=", "{", "}", "\n", "self", ".", "labels", "=", "{", "}", "\n", "self", ".", "calibs", "=", "{", "}", "\n", "\n", "self", ".", "image_base", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'leftImg8bit_trainvaltest/leftImg8bit'", ",", "self", ".", "split", ")", "\n", "self", ".", "disparity_base", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'disparity_trainvaltest/disparity'", ",", "self", ".", "split", ")", "\n", "self", ".", "label_base", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'gtFine_trainvaltest/gtFine'", ",", "self", ".", "split", ")", "\n", "self", ".", "calib_base", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'camera_trainvaltest/camera'", ",", "self", ".", "split", ")", "\n", "\n", "self", ".", "images", "[", "split", "]", "=", "[", "]", "\n", "self", ".", "images", "[", "split", "]", "=", "self", ".", "recursive_glob", "(", "rootdir", "=", "self", ".", "image_base", ",", "suffix", "=", "'.png'", ")", "\n", "self", ".", "images", "[", "split", "]", ".", "sort", "(", ")", "\n", "\n", "self", ".", "disparities", "[", "split", "]", "=", "[", "]", "\n", "self", ".", "disparities", "[", "split", "]", "=", "self", ".", "recursive_glob", "(", "rootdir", "=", "self", ".", "disparity_base", ",", "suffix", "=", "'.png'", ")", "\n", "self", ".", "disparities", "[", "split", "]", ".", "sort", "(", ")", "\n", "\n", "self", ".", "labels", "[", "split", "]", "=", "[", "]", "\n", "self", ".", "labels", "[", "split", "]", "=", "self", ".", "recursive_glob", "(", "rootdir", "=", "self", ".", "label_base", ",", "suffix", "=", "'_labelIds.png'", ")", "\n", "self", ".", "labels", "[", "split", "]", ".", "sort", "(", ")", "\n", "\n", "self", ".", "calibs", "[", "split", "]", "=", "[", "]", "\n", "self", ".", "calibs", "[", "split", "]", "=", "self", ".", "recursive_glob", "(", "rootdir", "=", "self", ".", "calib_base", ",", "suffix", "=", "'.json'", ")", "\n", "self", ".", "calibs", "[", "split", "]", ".", "sort", "(", ")", "\n", "\n", "self", ".", "sne_model", "=", "SNE", "(", "crop_top", "=", "False", ")", "\n", "\n", "if", "not", "self", ".", "images", "[", "split", "]", ":", "\n", "            ", "raise", "Exception", "(", "\"No RGB images for split=[%s] found in %s\"", "%", "(", "split", ",", "self", ".", "image_base", ")", ")", "\n", "", "if", "not", "self", ".", "disparities", "[", "split", "]", ":", "\n", "            ", "raise", "Exception", "(", "\"No depth images for split=[%s] found in %s\"", "%", "(", "split", ",", "self", ".", "disparity_base", ")", ")", "\n", "\n", "", "print", "(", "\"Found %d %s RGB images\"", "%", "(", "len", "(", "self", ".", "images", "[", "split", "]", ")", ",", "split", ")", ")", "\n", "print", "(", "\"Found %d %s disparity images\"", "%", "(", "len", "(", "self", ".", "disparities", "[", "split", "]", ")", ",", "split", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.dataset.cityscapes.Cityscapes_Dataset.__len__": [[80, 82], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", "[", "self", ".", "split", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.dataset.cityscapes.Cityscapes_Dataset.__getitem__": [[83, 142], ["[].rstrip", "[].rstrip", "[].rstrip", "[].rstrip", "cv2.imread", "numpy.zeros", "PIL.Image.open().convert", "cv2.imread", "cityscapes.read_calib_file", "cityscapes.Disp2depth", "PIL.Image.fromarray", "PIL.Image.fromarray", "numpy.array", "numpy.array", "torch.tensor", "cityscapes.Cityscapes_Dataset.sne_model", "cv2.resize.cpu().numpy", "numpy.transpose", "cv2.resize", "numpy.array", "torch.from_numpy().long", "cityscapes.Cityscapes_Dataset.transform_tr", "torch.tensor", "torchvision.transforms.ToTensor", "PIL.Image.open", "cityscapes.Cityscapes_Dataset.transform_val", "numpy.array.astype", "cv2.resize.cpu", "torch.from_numpy", "cityscapes.Cityscapes_Dataset.transform_ts", "cityscapes.Cityscapes_Dataset.transform_ts"], "methods", ["home.repos.pwc.inspect_result.morancyc_usnet.dataset.cityscapes.read_calib_file", "home.repos.pwc.inspect_result.morancyc_usnet.dataset.cityscapes.Disp2depth", "home.repos.pwc.inspect_result.morancyc_usnet.dataset.kitti.Kitti_Dataset.transform_tr", "home.repos.pwc.inspect_result.morancyc_usnet.dataset.kitti.Kitti_Dataset.transform_val", "home.repos.pwc.inspect_result.morancyc_usnet.dataset.kitti.Kitti_Dataset.transform_ts", "home.repos.pwc.inspect_result.morancyc_usnet.dataset.kitti.Kitti_Dataset.transform_ts"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "img_path", "=", "self", ".", "images", "[", "self", ".", "split", "]", "[", "index", "]", ".", "rstrip", "(", ")", "\n", "disp_path", "=", "self", ".", "disparities", "[", "self", ".", "split", "]", "[", "index", "]", ".", "rstrip", "(", ")", "\n", "calib_path", "=", "self", ".", "calibs", "[", "self", ".", "split", "]", "[", "index", "]", ".", "rstrip", "(", ")", "\n", "lbl_path", "=", "self", ".", "labels", "[", "self", ".", "split", "]", "[", "index", "]", ".", "rstrip", "(", ")", "\n", "\n", "label_image", "=", "cv2", ".", "imread", "(", "lbl_path", ",", "cv2", ".", "IMREAD_GRAYSCALE", ")", "\n", "oriHeight", ",", "oriWidth", "=", "label_image", ".", "shape", "\n", "label", "=", "np", ".", "zeros", "(", "(", "oriHeight", ",", "oriWidth", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "# reserve the 'road' class", "\n", "label", "[", "label_image", "==", "7", "]", "=", "1", "\n", "\n", "_img", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "disp_image", "=", "cv2", ".", "imread", "(", "disp_path", ",", "cv2", ".", "IMREAD_ANYDEPTH", ")", "\n", "baseline", ",", "fx", ",", "fy", ",", "u0", ",", "v0", "=", "read_calib_file", "(", "calib_path", ")", "\n", "depth", "=", "Disp2depth", "(", "fx", ",", "baseline", ",", "disp_image", ")", "\n", "_depth", "=", "Image", ".", "fromarray", "(", "depth", ")", "\n", "\n", "_target", "=", "Image", ".", "fromarray", "(", "label", ")", "\n", "\n", "sample", "=", "{", "'image'", ":", "_img", ",", "'depth'", ":", "_depth", ",", "'label'", ":", "_target", "}", "\n", "\n", "if", "self", ".", "split", "==", "'train'", ":", "\n", "            ", "sample", "=", "self", ".", "transform_tr", "(", "sample", ")", "\n", "", "elif", "self", ".", "split", "==", "'val'", ":", "\n", "            ", "sample", "=", "self", ".", "transform_val", "(", "sample", ")", "\n", "", "elif", "self", ".", "split", "==", "'test'", ":", "\n", "            ", "sample", "=", "self", ".", "transform_ts", "(", "sample", ")", "\n", "", "else", ":", "\n", "            ", "sample", "=", "self", ".", "transform_ts", "(", "sample", ")", "\n", "\n", "", "depth_image", "=", "np", ".", "array", "(", "sample", "[", "'depth'", "]", ")", "\n", "\n", "calib", "=", "np", ".", "array", "(", "[", "[", "fx", ",", "0", ",", "u0", "]", ",", "\n", "[", "0", ",", "fy", ",", "v0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "camParam", "=", "torch", ".", "tensor", "(", "calib", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "normal", "=", "self", ".", "sne_model", "(", "torch", ".", "tensor", "(", "depth_image", ".", "astype", "(", "np", ".", "float32", ")", ")", ",", "camParam", ")", "\n", "normal", "=", "normal", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "normal", "=", "np", ".", "transpose", "(", "normal", ",", "[", "1", ",", "2", ",", "0", "]", ")", "\n", "normal", "=", "cv2", ".", "resize", "(", "normal", ",", "(", "self", ".", "args", ".", "crop_width", ",", "self", ".", "args", ".", "crop_height", ")", ")", "\n", "\n", "normal", "=", "transforms", ".", "ToTensor", "(", ")", "(", "normal", ")", "\n", "\n", "sample", "[", "'depth'", "]", "=", "normal", "\n", "\n", "sample", "[", "'label'", "]", "=", "np", ".", "array", "(", "sample", "[", "'label'", "]", ")", "\n", "sample", "[", "'label'", "]", "=", "torch", ".", "from_numpy", "(", "sample", "[", "'label'", "]", ")", ".", "long", "(", ")", "\n", "\n", "sample", "[", "'oriHeight'", "]", "=", "oriHeight", "\n", "sample", "[", "'oriWidth'", "]", "=", "oriWidth", "\n", "\n", "sample", "[", "'img_path'", "]", "=", "img_path", "\n", "sample", "[", "'depth_path'", "]", "=", "disp_path", "\n", "sample", "[", "'calib_path'", "]", "=", "calib_path", "\n", "sample", "[", "'lbl_path'", "]", "=", "lbl_path", "\n", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.dataset.cityscapes.Cityscapes_Dataset.recursive_glob": [[143, 151], ["os.path.join", "os.walk", "filename.endswith"], "methods", ["None"], ["", "def", "recursive_glob", "(", "self", ",", "rootdir", "=", "'.'", ",", "suffix", "=", "''", ")", ":", "\n", "        ", "\"\"\"Performs recursive glob with given suffix and rootdir\n            :param rootdir is the root directory\n            :param suffix is the suffix to be searched\n        \"\"\"", "\n", "return", "[", "os", ".", "path", ".", "join", "(", "looproot", ",", "filename", ")", "\n", "for", "looproot", ",", "_", ",", "filenames", "in", "os", ".", "walk", "(", "rootdir", ")", "\n", "for", "filename", "in", "filenames", "if", "filename", ".", "endswith", "(", "suffix", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.dataset.cityscapes.Cityscapes_Dataset.transform_tr": [[152, 162], ["torchvision.transforms.Compose", "torchvision.transforms.Compose.", "dataset.custom_transforms.RandomHorizontalFlip", "dataset.custom_transforms.RandomGaussianBlur", "dataset.custom_transforms.RandomGaussianNoise", "dataset.custom_transforms.Resize", "dataset.custom_transforms.ColorJitter", "dataset.custom_transforms.Normalize", "dataset.custom_transforms.ToTensor"], "methods", ["None"], ["", "def", "transform_tr", "(", "self", ",", "sample", ")", ":", "\n", "        ", "composed_transforms", "=", "transforms", ".", "Compose", "(", "[", "\n", "tr", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "tr", ".", "RandomGaussianBlur", "(", ")", ",", "\n", "tr", ".", "RandomGaussianNoise", "(", ")", ",", "\n", "tr", ".", "Resize", "(", "size", "=", "(", "self", ".", "args", ".", "crop_width", ",", "self", ".", "args", ".", "crop_height", ")", ")", ",", "\n", "tr", ".", "ColorJitter", "(", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.4", ")", ",", "\n", "tr", ".", "Normalize", "(", "mean", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "std", "=", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ",", "\n", "tr", ".", "ToTensor", "(", ")", "]", ")", "\n", "return", "composed_transforms", "(", "sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.dataset.cityscapes.Cityscapes_Dataset.transform_val": [[163, 169], ["torchvision.transforms.Compose", "torchvision.transforms.Compose.", "dataset.custom_transforms.Resize", "dataset.custom_transforms.Normalize", "dataset.custom_transforms.ToTensor"], "methods", ["None"], ["", "def", "transform_val", "(", "self", ",", "sample", ")", ":", "\n", "        ", "composed_transforms", "=", "transforms", ".", "Compose", "(", "[", "\n", "tr", ".", "Resize", "(", "size", "=", "(", "self", ".", "args", ".", "crop_width", ",", "self", ".", "args", ".", "crop_height", ")", ")", ",", "\n", "tr", ".", "Normalize", "(", "mean", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "std", "=", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ",", "\n", "tr", ".", "ToTensor", "(", ")", "]", ")", "\n", "return", "composed_transforms", "(", "sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.dataset.cityscapes.Cityscapes_Dataset.transform_ts": [[170, 176], ["torchvision.transforms.Compose", "torchvision.transforms.Compose.", "dataset.custom_transforms.Resize", "dataset.custom_transforms.Normalize", "dataset.custom_transforms.ToTensor"], "methods", ["None"], ["", "def", "transform_ts", "(", "self", ",", "sample", ")", ":", "\n", "        ", "composed_transforms", "=", "transforms", ".", "Compose", "(", "[", "\n", "tr", ".", "Resize", "(", "size", "=", "(", "self", ".", "args", ".", "crop_width", ",", "self", ".", "args", ".", "crop_height", ")", ")", ",", "\n", "tr", ".", "Normalize", "(", "mean", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "std", "=", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ",", "\n", "tr", ".", "ToTensor", "(", ")", "]", ")", "\n", "return", "composed_transforms", "(", "sample", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.morancyc_usnet.dataset.cityscapes.Disp2depth": [[15, 23], ["disp.astype"], "function", ["None"], ["def", "Disp2depth", "(", "fx", ",", "baseline", ",", "disp", ")", ":", "\n", "    ", "delta", "=", "256", "\n", "disp_mask", "=", "disp", ">", "0", "\n", "depth", "=", "disp", ".", "astype", "(", "np", ".", "float32", ")", "\n", "depth", "[", "disp_mask", "]", "=", "(", "depth", "[", "disp_mask", "]", "-", "1", ")", "/", "delta", "\n", "disp_mask", "=", "depth", ">", "0", "\n", "depth", "[", "disp_mask", "]", "=", "fx", "*", "baseline", "/", "depth", "[", "disp_mask", "]", "\n", "return", "depth", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.dataset.cityscapes.read_calib_file": [[25, 34], ["open", "json.load"], "function", ["None"], ["", "def", "read_calib_file", "(", "filepath", ")", ":", "\n", "    ", "with", "open", "(", "filepath", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "calib_info", "=", "json", ".", "load", "(", "f", ")", "\n", "baseline", "=", "calib_info", "[", "'extrinsic'", "]", "[", "'baseline'", "]", "\n", "fx", "=", "calib_info", "[", "'intrinsic'", "]", "[", "'fx'", "]", "\n", "fy", "=", "calib_info", "[", "'intrinsic'", "]", "[", "'fy'", "]", "\n", "u0", "=", "calib_info", "[", "'intrinsic'", "]", "[", "'u0'", "]", "\n", "v0", "=", "calib_info", "[", "'intrinsic'", "]", "[", "'v0'", "]", "\n", "", "return", "baseline", ",", "fx", ",", "fy", ",", "u0", ",", "v0", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.dataset.kitti.kittiCalibInfo.__init__": [[19, 25], ["kitti.kittiCalibInfo._load_calib"], "methods", ["home.repos.pwc.inspect_result.morancyc_usnet.dataset.kitti.kittiCalibInfo._load_calib"], ["def", "__init__", "(", "self", ",", "filepath", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            filepath ([str]): calibration file path (AAA.txt)\n        \"\"\"", "\n", "self", ".", "data", "=", "self", ".", "_load_calib", "(", "filepath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.dataset.kitti.kittiCalibInfo.get_cam_param": [[26, 32], ["None"], "methods", ["None"], ["", "def", "get_cam_param", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns:\n            [numpy.array]: intrinsic parameter of the cam2\n        \"\"\"", "\n", "return", "self", ".", "data", "[", "'P2'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.dataset.kitti.kittiCalibInfo._load_calib": [[33, 51], ["kitti.kittiCalibInfo._read_calib_file", "numpy.reshape", "numpy.reshape", "numpy.reshape", "numpy.reshape", "numpy.reshape", "numpy.reshape"], "methods", ["home.repos.pwc.inspect_result.morancyc_usnet.dataset.kitti.kittiCalibInfo._read_calib_file"], ["", "def", "_load_calib", "(", "self", ",", "filepath", ")", ":", "\n", "        ", "rawdata", "=", "self", ".", "_read_calib_file", "(", "filepath", ")", "\n", "data", "=", "{", "}", "\n", "P0", "=", "np", ".", "reshape", "(", "rawdata", "[", "'P0'", "]", ",", "(", "3", ",", "4", ")", ")", "\n", "P1", "=", "np", ".", "reshape", "(", "rawdata", "[", "'P1'", "]", ",", "(", "3", ",", "4", ")", ")", "\n", "P2", "=", "np", ".", "reshape", "(", "rawdata", "[", "'P2'", "]", ",", "(", "3", ",", "4", ")", ")", "\n", "P3", "=", "np", ".", "reshape", "(", "rawdata", "[", "'P3'", "]", ",", "(", "3", ",", "4", ")", ")", "\n", "R0_rect", "=", "np", ".", "reshape", "(", "rawdata", "[", "'R0_rect'", "]", ",", "(", "3", ",", "3", ")", ")", "\n", "Tr_velo_to_cam", "=", "np", ".", "reshape", "(", "rawdata", "[", "'Tr_velo_to_cam'", "]", ",", "(", "3", ",", "4", ")", ")", "\n", "\n", "data", "[", "'P0'", "]", "=", "P0", "\n", "data", "[", "'P1'", "]", "=", "P1", "\n", "data", "[", "'P2'", "]", "=", "P2", "\n", "data", "[", "'P3'", "]", "=", "P3", "\n", "data", "[", "'R0_rect'", "]", "=", "R0_rect", "\n", "data", "[", "'Tr_velo_to_cam'", "]", "=", "Tr_velo_to_cam", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.dataset.kitti.kittiCalibInfo._read_calib_file": [[52, 66], ["open", "f.readlines", "line.split", "numpy.array", "float", "value.split"], "methods", ["None"], ["", "def", "_read_calib_file", "(", "self", ",", "filepath", ")", ":", "\n", "        ", "\"\"\"Read in a calibration file and parse into a dictionary.\"\"\"", "\n", "data", "=", "{", "}", "\n", "\n", "with", "open", "(", "filepath", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "key", ",", "value", "=", "line", ".", "split", "(", "':'", ",", "1", ")", "\n", "# The only non-float values in these files are dates, which", "\n", "# we don't care about anyway", "\n", "try", ":", "\n", "                    ", "data", "[", "key", "]", "=", "np", ".", "array", "(", "[", "float", "(", "x", ")", "for", "x", "in", "value", ".", "split", "(", ")", "]", ")", "\n", "", "except", "ValueError", ":", "\n", "                    ", "pass", "\n", "", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.dataset.kitti.Kitti_Dataset.__init__": [[71, 111], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "kitti.Kitti_Dataset.images[].extend", "kitti.Kitti_Dataset.images[].sort", "kitti.Kitti_Dataset.depths[].extend", "kitti.Kitti_Dataset.depths[].sort", "kitti.Kitti_Dataset.labels[].extend", "kitti.Kitti_Dataset.labels[].sort", "kitti.Kitti_Dataset.calibs[].extend", "kitti.Kitti_Dataset.calibs[].sort", "model.sne_model.SNE", "print", "print", "glob.glob", "glob.glob", "glob.glob", "glob.glob", "Exception", "Exception", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "len", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "args", ",", "root", "=", "'./data/KITTI/'", ",", "split", "=", "'training'", ")", ":", "\n", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "images", "=", "{", "}", "\n", "self", ".", "depths", "=", "{", "}", "\n", "self", ".", "labels", "=", "{", "}", "\n", "self", ".", "calibs", "=", "{", "}", "\n", "\n", "self", ".", "image_base", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "split", ",", "'image_2'", ")", "\n", "self", ".", "depth_base", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "split", ",", "'depth_u16'", ")", "\n", "self", ".", "label_base", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "split", ",", "'gt_image_2'", ")", "\n", "self", ".", "calib_base", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "split", ",", "'calib'", ")", "\n", "\n", "self", ".", "images", "[", "split", "]", "=", "[", "]", "\n", "self", ".", "images", "[", "split", "]", ".", "extend", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "image_base", ",", "'*.png'", ")", ")", ")", "\n", "self", ".", "images", "[", "split", "]", ".", "sort", "(", ")", "\n", "\n", "self", ".", "depths", "[", "split", "]", "=", "[", "]", "\n", "self", ".", "depths", "[", "split", "]", ".", "extend", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "depth_base", ",", "'*.png'", ")", ")", ")", "\n", "self", ".", "depths", "[", "split", "]", ".", "sort", "(", ")", "\n", "\n", "self", ".", "labels", "[", "split", "]", "=", "[", "]", "\n", "self", ".", "labels", "[", "split", "]", ".", "extend", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "label_base", ",", "'*.png'", ")", ")", ")", "\n", "self", ".", "labels", "[", "split", "]", ".", "sort", "(", ")", "\n", "\n", "self", ".", "calibs", "[", "split", "]", "=", "[", "]", "\n", "self", ".", "calibs", "[", "split", "]", ".", "extend", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "calib_base", ",", "'*.txt'", ")", ")", ")", "\n", "self", ".", "calibs", "[", "split", "]", ".", "sort", "(", ")", "\n", "\n", "self", ".", "sne_model", "=", "SNE", "(", "crop_top", "=", "True", ")", "\n", "\n", "if", "not", "self", ".", "images", "[", "split", "]", ":", "\n", "            ", "raise", "Exception", "(", "\"No RGB images for split=[%s] found in %s\"", "%", "(", "split", ",", "self", ".", "image_base", ")", ")", "\n", "", "if", "not", "self", ".", "depths", "[", "split", "]", ":", "\n", "            ", "raise", "Exception", "(", "\"No depth images for split=[%s] found in %s\"", "%", "(", "split", ",", "self", ".", "depth_base", ")", ")", "\n", "\n", "", "print", "(", "\"Found %d %s RGB images\"", "%", "(", "len", "(", "self", ".", "images", "[", "split", "]", ")", ",", "split", ")", ")", "\n", "print", "(", "\"Found %d %s depth images\"", "%", "(", "len", "(", "self", ".", "depths", "[", "split", "]", ")", ",", "split", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.dataset.kitti.Kitti_Dataset.__len__": [[112, 114], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", "[", "self", ".", "split", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.dataset.kitti.Kitti_Dataset.__getitem__": [[115, 173], ["[].rstrip", "[].rstrip", "[].rstrip", "PIL.Image.open().convert", "cv2.imread", "numpy.array.astype", "PIL.Image.fromarray", "numpy.zeros", "PIL.Image.fromarray", "numpy.array", "kitti.kittiCalibInfo", "torch.tensor", "kitti.Kitti_Dataset.sne_model", "cv2.resize.cpu().numpy", "numpy.transpose", "cv2.resize", "numpy.array", "torch.from_numpy().long", "[].rstrip.split", "os.path.join", "cv2.cvtColor", "kitti.Kitti_Dataset.transform_tr", "kittiCalibInfo.get_cam_param", "torch.tensor", "torchvision.transforms.ToTensor", "[].rstrip.split", "PIL.Image.open", "cv2.imread", "kitti.Kitti_Dataset.transform_val", "cv2.resize.cpu", "torch.from_numpy", "kitti.Kitti_Dataset.transform_ts", "kitti.Kitti_Dataset.transform_ts", "numpy.array.astype"], "methods", ["home.repos.pwc.inspect_result.morancyc_usnet.dataset.kitti.Kitti_Dataset.transform_tr", "home.repos.pwc.inspect_result.morancyc_usnet.dataset.kitti.kittiCalibInfo.get_cam_param", "home.repos.pwc.inspect_result.morancyc_usnet.dataset.kitti.Kitti_Dataset.transform_val", "home.repos.pwc.inspect_result.morancyc_usnet.dataset.kitti.Kitti_Dataset.transform_ts", "home.repos.pwc.inspect_result.morancyc_usnet.dataset.kitti.Kitti_Dataset.transform_ts"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "img_path", "=", "self", ".", "images", "[", "self", ".", "split", "]", "[", "index", "]", ".", "rstrip", "(", ")", "\n", "depth_path", "=", "self", ".", "depths", "[", "self", ".", "split", "]", "[", "index", "]", ".", "rstrip", "(", ")", "\n", "calib_path", "=", "self", ".", "calibs", "[", "self", ".", "split", "]", "[", "index", "]", ".", "rstrip", "(", ")", "\n", "\n", "useDir", "=", "\"/\"", ".", "join", "(", "img_path", ".", "split", "(", "'/'", ")", "[", ":", "-", "2", "]", ")", "\n", "name", "=", "img_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "\n", "_img", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "depth_image", "=", "cv2", ".", "imread", "(", "depth_path", ",", "cv2", ".", "IMREAD_ANYDEPTH", ")", "\n", "depth_image", "=", "depth_image", ".", "astype", "(", "np", ".", "float32", ")", "\n", "oriHeight", ",", "oriWidth", "=", "depth_image", ".", "shape", "\n", "_depth", "=", "Image", ".", "fromarray", "(", "depth_image", ")", "\n", "\n", "label", "=", "np", ".", "zeros", "(", "(", "oriHeight", ",", "oriWidth", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "if", "not", "self", ".", "split", "==", "'testing'", ":", "\n", "            ", "lbl_path", "=", "os", ".", "path", ".", "join", "(", "useDir", ",", "'gt_image_2'", ",", "name", "[", ":", "-", "10", "]", "+", "'road_'", "+", "name", "[", "-", "10", ":", "]", ")", "\n", "label_image", "=", "cv2", ".", "cvtColor", "(", "cv2", ".", "imread", "(", "lbl_path", ")", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "label", "[", "label_image", "[", ":", ",", ":", ",", "2", "]", ">", "0", "]", "=", "1", "\n", "\n", "", "_target", "=", "Image", ".", "fromarray", "(", "label", ")", "\n", "\n", "sample", "=", "{", "'image'", ":", "_img", ",", "'depth'", ":", "_depth", ",", "'label'", ":", "_target", "}", "\n", "\n", "if", "self", ".", "split", "==", "'training'", ":", "\n", "            ", "sample", "=", "self", ".", "transform_tr", "(", "sample", ")", "\n", "", "elif", "self", ".", "split", "==", "'validating'", ":", "\n", "            ", "sample", "=", "self", ".", "transform_val", "(", "sample", ")", "\n", "", "elif", "self", ".", "split", "==", "'testing'", ":", "\n", "            ", "sample", "=", "self", ".", "transform_ts", "(", "sample", ")", "\n", "", "else", ":", "\n", "            ", "sample", "=", "self", ".", "transform_ts", "(", "sample", ")", "\n", "\n", "", "depth_image", "=", "np", ".", "array", "(", "sample", "[", "'depth'", "]", ")", "\n", "\n", "calib", "=", "kittiCalibInfo", "(", "calib_path", ")", "\n", "camParam", "=", "torch", ".", "tensor", "(", "calib", ".", "get_cam_param", "(", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "normal", "=", "self", ".", "sne_model", "(", "torch", ".", "tensor", "(", "depth_image", ".", "astype", "(", "np", ".", "float32", ")", "/", "1000", ")", ",", "camParam", ")", "\n", "normal", "=", "normal", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "normal", "=", "np", ".", "transpose", "(", "normal", ",", "[", "1", ",", "2", ",", "0", "]", ")", "\n", "normal", "=", "cv2", ".", "resize", "(", "normal", ",", "(", "self", ".", "args", ".", "crop_width", ",", "self", ".", "args", ".", "crop_height", ")", ")", "\n", "\n", "normal", "=", "transforms", ".", "ToTensor", "(", ")", "(", "normal", ")", "\n", "\n", "sample", "[", "'depth'", "]", "=", "normal", "\n", "\n", "sample", "[", "'label'", "]", "=", "np", ".", "array", "(", "sample", "[", "'label'", "]", ")", "\n", "sample", "[", "'label'", "]", "=", "torch", ".", "from_numpy", "(", "sample", "[", "'label'", "]", ")", ".", "long", "(", ")", "\n", "\n", "sample", "[", "'oriHeight'", "]", "=", "oriHeight", "\n", "sample", "[", "'oriWidth'", "]", "=", "oriWidth", "\n", "\n", "sample", "[", "'img_path'", "]", "=", "img_path", "\n", "sample", "[", "'depth_path'", "]", "=", "depth_path", "\n", "sample", "[", "'calib_path'", "]", "=", "calib_path", "\n", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.dataset.kitti.Kitti_Dataset.transform_tr": [[174, 184], ["torchvision.transforms.Compose", "torchvision.transforms.Compose.", "dataset.custom_transforms.RandomHorizontalFlip", "dataset.custom_transforms.RandomGaussianBlur", "dataset.custom_transforms.RandomGaussianNoise", "dataset.custom_transforms.Resize", "dataset.custom_transforms.ColorJitter", "dataset.custom_transforms.Normalize", "dataset.custom_transforms.ToTensor"], "methods", ["None"], ["", "def", "transform_tr", "(", "self", ",", "sample", ")", ":", "\n", "        ", "composed_transforms", "=", "transforms", ".", "Compose", "(", "[", "\n", "tr", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "tr", ".", "RandomGaussianBlur", "(", ")", ",", "\n", "tr", ".", "RandomGaussianNoise", "(", ")", ",", "\n", "tr", ".", "Resize", "(", "size", "=", "(", "self", ".", "args", ".", "crop_width", ",", "self", ".", "args", ".", "crop_height", ")", ")", ",", "\n", "tr", ".", "ColorJitter", "(", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.4", ")", ",", "\n", "tr", ".", "Normalize", "(", "mean", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "std", "=", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ",", "\n", "tr", ".", "ToTensor", "(", ")", "]", ")", "\n", "return", "composed_transforms", "(", "sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.dataset.kitti.Kitti_Dataset.transform_val": [[185, 191], ["torchvision.transforms.Compose", "torchvision.transforms.Compose.", "dataset.custom_transforms.Resize", "dataset.custom_transforms.Normalize", "dataset.custom_transforms.ToTensor"], "methods", ["None"], ["", "def", "transform_val", "(", "self", ",", "sample", ")", ":", "\n", "        ", "composed_transforms", "=", "transforms", ".", "Compose", "(", "[", "\n", "tr", ".", "Resize", "(", "size", "=", "(", "self", ".", "args", ".", "crop_width", ",", "self", ".", "args", ".", "crop_height", ")", ")", ",", "\n", "tr", ".", "Normalize", "(", "mean", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "std", "=", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ",", "\n", "tr", ".", "ToTensor", "(", ")", "]", ")", "\n", "return", "composed_transforms", "(", "sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.dataset.kitti.Kitti_Dataset.transform_ts": [[192, 198], ["torchvision.transforms.Compose", "torchvision.transforms.Compose.", "dataset.custom_transforms.Resize", "dataset.custom_transforms.Normalize", "dataset.custom_transforms.ToTensor"], "methods", ["None"], ["", "def", "transform_ts", "(", "self", ",", "sample", ")", ":", "\n", "        ", "composed_transforms", "=", "transforms", ".", "Compose", "(", "[", "\n", "tr", ".", "Resize", "(", "size", "=", "(", "self", ".", "args", ".", "crop_width", ",", "self", ".", "args", ".", "crop_height", ")", ")", ",", "\n", "tr", ".", "Normalize", "(", "mean", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "std", "=", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ",", "\n", "tr", ".", "ToTensor", "(", ")", "]", ")", "\n", "return", "composed_transforms", "(", "sample", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.morancyc_usnet.dataset.custom_transforms.Normalize.__init__": [[14, 17], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "mean", "=", "(", "0.", ",", "0.", ",", "0.", ")", ",", "std", "=", "(", "1.", ",", "1.", ",", "1.", ")", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.dataset.custom_transforms.Normalize.__call__": [[18, 32], ["numpy.array().astype", "numpy.array().astype", "numpy.array().astype", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "img", "=", "sample", "[", "'image'", "]", "\n", "depth", "=", "sample", "[", "'depth'", "]", "\n", "mask", "=", "sample", "[", "'label'", "]", "\n", "img", "=", "np", ".", "array", "(", "img", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "depth", "=", "np", ".", "array", "(", "depth", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "mask", "=", "np", ".", "array", "(", "mask", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "img", "/=", "255.0", "\n", "img", "-=", "self", ".", "mean", "\n", "img", "/=", "self", ".", "std", "\n", "\n", "return", "{", "'image'", ":", "img", ",", "\n", "'depth'", ":", "depth", ",", "\n", "'label'", ":", "mask", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.dataset.custom_transforms.ToTensor.__call__": [[37, 55], ["numpy.array().astype().transpose", "numpy.array().astype", "numpy.array().astype", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "numpy.array().astype", "numpy.array", "numpy.array", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.array"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "# swap color axis because", "\n", "# numpy image: H x W x C", "\n", "# torch image: C X H X W", "\n", "        ", "img", "=", "sample", "[", "'image'", "]", "\n", "depth", "=", "sample", "[", "'depth'", "]", "\n", "mask", "=", "sample", "[", "'label'", "]", "\n", "img", "=", "np", ".", "array", "(", "img", ")", ".", "astype", "(", "np", ".", "float32", ")", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "depth", "=", "np", ".", "array", "(", "depth", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "mask", "=", "np", ".", "array", "(", "mask", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "float", "(", ")", "\n", "depth", "=", "torch", ".", "from_numpy", "(", "depth", ")", ".", "float", "(", ")", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", ".", "float", "(", ")", "\n", "\n", "return", "{", "'image'", ":", "img", ",", "\n", "'depth'", ":", "depth", ",", "\n", "'label'", ":", "mask", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.dataset.custom_transforms.ColorJitter.__init__": [[58, 62], ["max", "max", "max"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.4", ")", ":", "\n", "        ", "self", ".", "brightness", "=", "[", "max", "(", "1", "-", "brightness", ",", "0", ")", ",", "1", "+", "brightness", "]", "\n", "self", ".", "contrast", "=", "[", "max", "(", "1", "-", "contrast", ",", "0", ")", ",", "1", "+", "contrast", "]", "\n", "self", ".", "saturation", "=", "[", "max", "(", "1", "-", "saturation", ",", "0", ")", ",", "1", "+", "saturation", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.dataset.custom_transforms.ColorJitter.__call__": [[63, 76], ["random.uniform", "random.uniform", "random.uniform", "PIL.ImageEnhance.Brightness().enhance", "PIL.ImageEnhance.Contrast().enhance", "PIL.ImageEnhance.Color().enhance", "PIL.ImageEnhance.Brightness", "PIL.ImageEnhance.Contrast", "PIL.ImageEnhance.Color"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "img", "=", "sample", "[", "'image'", "]", "\n", "depth", "=", "sample", "[", "'depth'", "]", "\n", "mask", "=", "sample", "[", "'label'", "]", "\n", "r_brightness", "=", "random", ".", "uniform", "(", "self", ".", "brightness", "[", "0", "]", ",", "self", ".", "brightness", "[", "1", "]", ")", "\n", "r_contrast", "=", "random", ".", "uniform", "(", "self", ".", "contrast", "[", "0", "]", ",", "self", ".", "contrast", "[", "1", "]", ")", "\n", "r_saturation", "=", "random", ".", "uniform", "(", "self", ".", "saturation", "[", "0", "]", ",", "self", ".", "saturation", "[", "1", "]", ")", "\n", "img", "=", "ImageEnhance", ".", "Brightness", "(", "img", ")", ".", "enhance", "(", "r_brightness", ")", "\n", "img", "=", "ImageEnhance", ".", "Contrast", "(", "img", ")", ".", "enhance", "(", "r_contrast", ")", "\n", "img", "=", "ImageEnhance", ".", "Color", "(", "img", ")", ".", "enhance", "(", "r_saturation", ")", "\n", "return", "{", "'image'", ":", "img", ",", "\n", "'depth'", ":", "depth", ",", "\n", "'label'", ":", "mask", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.dataset.custom_transforms.RandomHorizontalFlip.__call__": [[79, 91], ["random.random", "img.transpose.transpose.transpose", "depth.transpose.transpose.transpose", "mask.transpose.transpose.transpose"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "img", "=", "sample", "[", "'image'", "]", "\n", "depth", "=", "sample", "[", "'depth'", "]", "\n", "mask", "=", "sample", "[", "'label'", "]", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "img", "=", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "depth", "=", "depth", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "mask", "=", "mask", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "\n", "", "return", "{", "'image'", ":", "img", ",", "\n", "'depth'", ":", "depth", ",", "\n", "'label'", ":", "mask", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.dataset.custom_transforms.HorizontalFlip.__call__": [[94, 105], ["img.transpose.transpose.transpose", "depth.transpose.transpose.transpose", "mask.transpose.transpose.transpose"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "img", "=", "sample", "[", "'image'", "]", "\n", "depth", "=", "sample", "[", "'depth'", "]", "\n", "mask", "=", "sample", "[", "'label'", "]", "\n", "img", "=", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "depth", "=", "depth", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "mask", "=", "mask", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "\n", "return", "{", "'image'", ":", "img", ",", "\n", "'depth'", ":", "depth", ",", "\n", "'label'", ":", "mask", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.dataset.custom_transforms.RandomGaussianBlur.__init__": [[108, 110], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "radius", "=", "1", ")", ":", "\n", "        ", "self", ".", "radius", "=", "radius", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.dataset.custom_transforms.RandomGaussianBlur.__call__": [[111, 122], ["random.random", "img.filter.filter.filter", "PIL.ImageFilter.GaussianBlur", "random.random"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "img", "=", "sample", "[", "'image'", "]", "\n", "depth", "=", "sample", "[", "'depth'", "]", "\n", "mask", "=", "sample", "[", "'label'", "]", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "img", "=", "img", ".", "filter", "(", "ImageFilter", ".", "GaussianBlur", "(", "\n", "radius", "=", "self", ".", "radius", "*", "random", ".", "random", "(", ")", ")", ")", "\n", "\n", "", "return", "{", "'image'", ":", "img", ",", "\n", "'depth'", ":", "depth", ",", "\n", "'label'", ":", "mask", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.dataset.custom_transforms.RandomGaussianNoise.__init__": [[125, 128], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", "=", "0", ",", "sigma", "=", "10", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "sigma", "=", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.dataset.custom_transforms.RandomGaussianNoise.gaussianNoisy": [[129, 135], ["numpy.random.normal", "numpy.clip", "len"], "methods", ["None"], ["", "def", "gaussianNoisy", "(", "self", ",", "im", ",", "mean", "=", "0", ",", "sigma", "=", "10", ")", ":", "\n", "        ", "noise", "=", "np", ".", "random", ".", "normal", "(", "mean", ",", "sigma", ",", "len", "(", "im", ")", ")", "\n", "im", "=", "im", "+", "noise", "\n", "\n", "im", "=", "np", ".", "clip", "(", "im", ",", "0", ",", "255", ")", "\n", "return", "im", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.dataset.custom_transforms.RandomGaussianNoise.__call__": [[136, 154], ["random.random", "numpy.asarray", "PIL.Image.fromarray.astype", "custom_transforms.RandomGaussianNoise.gaussianNoisy", "custom_transforms.RandomGaussianNoise.gaussianNoisy", "custom_transforms.RandomGaussianNoise.gaussianNoisy", "custom_transforms.RandomGaussianNoise.reshape", "custom_transforms.RandomGaussianNoise.reshape", "custom_transforms.RandomGaussianNoise.reshape", "PIL.Image.fromarray", "img[].flatten", "img[].flatten", "img[].flatten", "numpy.uint8"], "methods", ["home.repos.pwc.inspect_result.morancyc_usnet.dataset.custom_transforms.RandomGaussianNoise.gaussianNoisy", "home.repos.pwc.inspect_result.morancyc_usnet.dataset.custom_transforms.RandomGaussianNoise.gaussianNoisy", "home.repos.pwc.inspect_result.morancyc_usnet.dataset.custom_transforms.RandomGaussianNoise.gaussianNoisy"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "img", "=", "sample", "[", "'image'", "]", "\n", "depth", "=", "sample", "[", "'depth'", "]", "\n", "mask", "=", "sample", "[", "'label'", "]", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "img", "=", "np", ".", "asarray", "(", "img", ")", "\n", "img", "=", "img", ".", "astype", "(", "np", ".", "int", ")", "\n", "width", ",", "height", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "img_r", "=", "self", ".", "gaussianNoisy", "(", "img", "[", ":", ",", ":", ",", "0", "]", ".", "flatten", "(", ")", ",", "self", ".", "mean", ",", "self", ".", "sigma", ")", "\n", "img_g", "=", "self", ".", "gaussianNoisy", "(", "img", "[", ":", ",", ":", ",", "1", "]", ".", "flatten", "(", ")", ",", "self", ".", "mean", ",", "self", ".", "sigma", ")", "\n", "img_b", "=", "self", ".", "gaussianNoisy", "(", "img", "[", ":", ",", ":", ",", "2", "]", ".", "flatten", "(", ")", ",", "self", ".", "mean", ",", "self", ".", "sigma", ")", "\n", "img", "[", ":", ",", ":", ",", "0", "]", "=", "img_r", ".", "reshape", "(", "[", "width", ",", "height", "]", ")", "\n", "img", "[", ":", ",", ":", ",", "1", "]", "=", "img_g", ".", "reshape", "(", "[", "width", ",", "height", "]", ")", "\n", "img", "[", ":", ",", ":", ",", "2", "]", "=", "img_b", ".", "reshape", "(", "[", "width", ",", "height", "]", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "img", ")", ")", "\n", "", "return", "{", "'image'", ":", "img", ",", "\n", "'depth'", ":", "depth", ",", "\n", "'label'", ":", "mask", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.dataset.custom_transforms.Resize.__init__": [[158, 160], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "# size: (h, w)", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.dataset.custom_transforms.Resize.__call__": [[161, 176], ["img.resize.resize.resize", "mask.resize.resize.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "img", "=", "sample", "[", "'image'", "]", "\n", "depth", "=", "sample", "[", "'depth'", "]", "\n", "mask", "=", "sample", "[", "'label'", "]", "\n", "\n", "assert", "img", ".", "size", "==", "depth", ".", "size", "==", "mask", ".", "size", "\n", "\n", "# resize rgb and label", "\n", "img", "=", "img", ".", "resize", "(", "self", ".", "size", ",", "Image", ".", "BILINEAR", ")", "\n", "# depth = depth.resize(self.size, Image.BILINEAR)", "\n", "mask", "=", "mask", ".", "resize", "(", "self", ".", "size", ",", "Image", ".", "NEAREST", ")", "\n", "\n", "return", "{", "'image'", ":", "img", ",", "\n", "'depth'", ":", "depth", ",", "\n", "'label'", ":", "mask", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.morancyc_usnet.model.usnet.ConvBlock.__init__": [[10, 16], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.morancyc_usnet.model.backbone.symmetric_backbone.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.model.usnet.ConvBlock.forward": [[17, 20], ["usnet.ConvBlock.conv1", "usnet.ConvBlock.relu", "usnet.ConvBlock.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "input", ")", "\n", "return", "self", ".", "relu", "(", "self", ".", "bn", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.model.usnet.FCA.__init__": [[24, 31], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d"], "methods", ["home.repos.pwc.inspect_result.morancyc_usnet.model.backbone.symmetric_backbone.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "output_size", "=", "(", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.model.usnet.FCA.forward": [[32, 40], ["usnet.FCA.avgpool", "usnet.FCA.conv", "usnet.FCA.sigmoid", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul.size", "torch.mul.size", "torch.mul.size", "torch.mul.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# global average pooling", "\n", "        ", "x", "=", "self", ".", "avgpool", "(", "input", ")", "\n", "assert", "self", ".", "in_channels", "==", "x", ".", "size", "(", "1", ")", ",", "'in_channels and out_channels should all be {}'", ".", "format", "(", "x", ".", "size", "(", "1", ")", ")", "\n", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "sigmoid", "(", "x", ")", "\n", "x", "=", "torch", ".", "mul", "(", "input", ",", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.model.usnet.Up_layer.__init__": [[43, 47], ["torch.nn.Module.__init__", "usnet.ConvBlock", "usnet.FCA"], "methods", ["home.repos.pwc.inspect_result.morancyc_usnet.model.backbone.symmetric_backbone.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "ConvBlock", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "fca", "=", "FCA", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.model.usnet.Up_layer.forward": [[48, 53], ["torch.interpolate", "torch.interpolate", "usnet.Up_layer.fca", "usnet.Up_layer.conv", "usnet.Up_layer.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "x_aux", ")", ":", "\n", "        ", "x", "=", "F", ".", "interpolate", "(", "x", ",", "size", "=", "x_aux", ".", "size", "(", ")", "[", "-", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", "\n", "x_aux", "=", "self", ".", "fca", "(", "self", ".", "conv", "(", "x_aux", ")", ")", "\n", "x", "=", "x", "+", "x_aux", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.model.usnet.MEC.__init__": [[57, 63], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Softplus", "torch.nn.Softplus"], "methods", ["home.repos.pwc.inspect_result.morancyc_usnet.model.backbone.symmetric_backbone.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale_1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "scale_2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "3", ",", "dilation", "=", "3", ")", "\n", "self", ".", "scale_3", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "6", ",", "dilation", "=", "6", ")", "\n", "self", ".", "softplus", "=", "nn", ".", "Softplus", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.model.usnet.MEC.forward": [[64, 79], ["usnet.MEC.scale_1", "usnet.MEC.scale_2", "usnet.MEC.scale_3", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "usnet.MEC.softplus", "usnet.MEC.softplus", "usnet.MEC.softplus", "input.size", "input.size", "input.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "input", ")", ":", "\n", "        ", "e_1", "=", "self", ".", "scale_1", "(", "x", ")", "\n", "e_2", "=", "self", ".", "scale_2", "(", "x", ")", "\n", "e_3", "=", "self", ".", "scale_3", "(", "x", ")", "\n", "\n", "e_1", "=", "F", ".", "interpolate", "(", "e_1", ",", "size", "=", "input", ".", "size", "(", ")", "[", "-", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", "\n", "e_2", "=", "F", ".", "interpolate", "(", "e_2", ",", "size", "=", "input", ".", "size", "(", ")", "[", "-", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", "\n", "e_3", "=", "F", ".", "interpolate", "(", "e_3", ",", "size", "=", "input", ".", "size", "(", ")", "[", "-", "2", ":", "]", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "e_1", "=", "self", ".", "softplus", "(", "e_1", ")", "\n", "e_2", "=", "self", ".", "softplus", "(", "e_2", ")", "\n", "e_3", "=", "self", ".", "softplus", "(", "e_3", ")", "\n", "\n", "e", "=", "(", "e_1", "+", "e_2", "+", "e_3", ")", "/", "3", "\n", "return", "e_1", ",", "e_2", ",", "e_3", ",", "e", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.model.usnet.USNet.__init__": [[82, 132], ["torch.nn.Module.__init__", "model.backbone.symmetric_backbone", "torch.nn.Softplus", "torch.nn.Softplus", "usnet.USNet.init_weight", "model.module.ASPP", "model.module.ASPP", "usnet.ConvBlock", "usnet.ConvBlock", "usnet.Up_layer", "usnet.Up_layer", "usnet.Up_layer", "usnet.Up_layer", "usnet.Up_layer", "usnet.Up_layer", "usnet.MEC", "usnet.MEC", "model.module.ASPP", "model.module.ASPP", "usnet.ConvBlock", "usnet.ConvBlock", "usnet.Up_layer", "usnet.Up_layer", "usnet.Up_layer", "usnet.Up_layer", "usnet.Up_layer", "usnet.Up_layer", "usnet.MEC", "usnet.MEC", "print"], "methods", ["home.repos.pwc.inspect_result.morancyc_usnet.model.backbone.symmetric_backbone.__init__", "home.repos.pwc.inspect_result.morancyc_usnet.model.usnet.USNet.init_weight"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "backbone_name", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# build backbone", "\n", "self", ".", "backbone", "=", "symmetric_backbone", "(", "name", "=", "backbone_name", ")", "\n", "\n", "if", "backbone_name", "==", "'resnet101'", ":", "\n", "# ASPP", "\n", "            ", "dilations", "=", "[", "1", ",", "6", ",", "12", ",", "18", "]", "\n", "self", ".", "aspp_r", "=", "ASPP", "(", "2048", ",", "256", ",", "dilations", ")", "\n", "self", ".", "aspp_d", "=", "ASPP", "(", "2048", ",", "256", ",", "dilations", ")", "\n", "\n", "self", ".", "conv_r", "=", "ConvBlock", "(", "in_channels", "=", "256", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv_d", "=", "ConvBlock", "(", "in_channels", "=", "256", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "self", ".", "up_r1", "=", "Up_layer", "(", "in_channels", "=", "1024", ",", "out_channels", "=", "64", ")", "\n", "self", ".", "up_r2", "=", "Up_layer", "(", "in_channels", "=", "512", ",", "out_channels", "=", "64", ")", "\n", "self", ".", "up_r3", "=", "Up_layer", "(", "in_channels", "=", "256", ",", "out_channels", "=", "64", ")", "\n", "\n", "self", ".", "up_d1", "=", "Up_layer", "(", "in_channels", "=", "1024", ",", "out_channels", "=", "64", ")", "\n", "self", ".", "up_d2", "=", "Up_layer", "(", "in_channels", "=", "512", ",", "out_channels", "=", "64", ")", "\n", "self", ".", "up_d3", "=", "Up_layer", "(", "in_channels", "=", "256", ",", "out_channels", "=", "64", ")", "\n", "\n", "self", ".", "mec_r", "=", "MEC", "(", "in_channels", "=", "64", ",", "out_channels", "=", "num_classes", ")", "\n", "self", ".", "mec_d", "=", "MEC", "(", "in_channels", "=", "64", ",", "out_channels", "=", "num_classes", ")", "\n", "\n", "", "elif", "backbone_name", "==", "'resnet18'", ":", "\n", "# ASPP", "\n", "            ", "dilations", "=", "[", "1", ",", "6", ",", "12", ",", "18", "]", "\n", "self", ".", "aspp_r", "=", "ASPP", "(", "512", ",", "256", ",", "dilations", ")", "\n", "self", ".", "aspp_d", "=", "ASPP", "(", "512", ",", "256", ",", "dilations", ")", "\n", "\n", "self", ".", "conv_r", "=", "ConvBlock", "(", "in_channels", "=", "256", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv_d", "=", "ConvBlock", "(", "in_channels", "=", "256", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "self", ".", "up_r1", "=", "Up_layer", "(", "in_channels", "=", "256", ",", "out_channels", "=", "64", ")", "\n", "self", ".", "up_r2", "=", "Up_layer", "(", "in_channels", "=", "128", ",", "out_channels", "=", "64", ")", "\n", "self", ".", "up_r3", "=", "Up_layer", "(", "in_channels", "=", "64", ",", "out_channels", "=", "64", ")", "\n", "\n", "self", ".", "up_d1", "=", "Up_layer", "(", "in_channels", "=", "256", ",", "out_channels", "=", "64", ")", "\n", "self", ".", "up_d2", "=", "Up_layer", "(", "in_channels", "=", "128", ",", "out_channels", "=", "64", ")", "\n", "self", ".", "up_d3", "=", "Up_layer", "(", "in_channels", "=", "64", ",", "out_channels", "=", "64", ")", "\n", "\n", "self", ".", "mec_r", "=", "MEC", "(", "in_channels", "=", "64", ",", "out_channels", "=", "num_classes", ")", "\n", "self", ".", "mec_d", "=", "MEC", "(", "in_channels", "=", "64", ",", "out_channels", "=", "num_classes", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Error: unspported backbone \\n'", ")", "\n", "\n", "", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "softplus", "=", "nn", ".", "Softplus", "(", ")", "\n", "self", ".", "init_weight", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.model.usnet.USNet.init_weight": [[133, 143], ["usnet.USNet.named_modules", "isinstance", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "isinstance", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["None"], ["", "def", "init_weight", "(", "self", ")", ":", "\n", "        ", "for", "name", ",", "m", "in", "self", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "'backbone'", "not", "in", "name", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_in'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "m", ".", "eps", "=", "1e-5", "\n", "m", ".", "momentum", "=", "0.1", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.model.usnet.USNet.DS_Combin": [[144, 197], ["range", "dict", "range", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "u[].expand", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "u[].expand", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "dict", "dict", "dict", "dict", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "b[].view", "b[].view", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "S_a.expand", "len", "usnet.USNet.DS_Combin.DS_Combin_two"], "methods", ["None"], ["", "", "", "", "def", "DS_Combin", "(", "self", ",", "alpha", ")", ":", "\n", "        ", "\"\"\"\n        :param alpha: All Dirichlet distribution parameters.\n        :return: Combined Dirichlet distribution parameters.\n        \"\"\"", "\n", "\n", "def", "DS_Combin_two", "(", "alpha1", ",", "alpha2", ")", ":", "\n", "            ", "\"\"\"\n            :param alpha1: Dirichlet distribution parameters of view 1\n            :param alpha2: Dirichlet distribution parameters of view 2\n            :return: Combined Dirichlet distribution parameters\n            \"\"\"", "\n", "alpha", "=", "dict", "(", ")", "\n", "alpha", "[", "0", "]", ",", "alpha", "[", "1", "]", "=", "alpha1", ",", "alpha2", "\n", "b", ",", "S", ",", "E", ",", "u", "=", "dict", "(", ")", ",", "dict", "(", ")", ",", "dict", "(", ")", ",", "dict", "(", ")", "\n", "for", "v", "in", "range", "(", "2", ")", ":", "\n", "                ", "S", "[", "v", "]", "=", "torch", ".", "sum", "(", "alpha", "[", "v", "]", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "E", "[", "v", "]", "=", "alpha", "[", "v", "]", "-", "1", "\n", "b", "[", "v", "]", "=", "E", "[", "v", "]", "/", "(", "S", "[", "v", "]", ".", "expand", "(", "E", "[", "v", "]", ".", "shape", ")", ")", "\n", "u", "[", "v", "]", "=", "self", ".", "num_classes", "/", "S", "[", "v", "]", "\n", "\n", "# b^0 @ b^(0+1)", "\n", "", "bb", "=", "torch", ".", "bmm", "(", "b", "[", "0", "]", ".", "view", "(", "-", "1", ",", "self", ".", "num_classes", ",", "1", ")", ",", "b", "[", "1", "]", ".", "view", "(", "-", "1", ",", "1", ",", "self", ".", "num_classes", ")", ")", "\n", "# b^0 * u^1", "\n", "uv1_expand", "=", "u", "[", "1", "]", ".", "expand", "(", "b", "[", "0", "]", ".", "shape", ")", "\n", "bu", "=", "torch", ".", "mul", "(", "b", "[", "0", "]", ",", "uv1_expand", ")", "\n", "# b^1 * u^0", "\n", "uv_expand", "=", "u", "[", "0", "]", ".", "expand", "(", "b", "[", "0", "]", ".", "shape", ")", "\n", "ub", "=", "torch", ".", "mul", "(", "b", "[", "1", "]", ",", "uv_expand", ")", "\n", "# calculate C", "\n", "bb_sum", "=", "torch", ".", "sum", "(", "bb", ",", "dim", "=", "(", "1", ",", "2", ")", ",", "out", "=", "None", ")", "\n", "bb_diag", "=", "torch", ".", "diagonal", "(", "bb", ",", "dim1", "=", "-", "2", ",", "dim2", "=", "-", "1", ")", ".", "sum", "(", "-", "1", ")", "\n", "# bb_diag1 = torch.diag(torch.mm(b[v], torch.transpose(b[v+1], 0, 1)))", "\n", "C", "=", "bb_sum", "-", "bb_diag", "\n", "\n", "# calculate b^a", "\n", "b_a", "=", "(", "torch", ".", "mul", "(", "b", "[", "0", "]", ",", "b", "[", "1", "]", ")", "+", "bu", "+", "ub", ")", "/", "(", "(", "1", "-", "C", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "expand", "(", "b", "[", "0", "]", ".", "shape", ")", ")", "\n", "# calculate u^a", "\n", "u_a", "=", "torch", ".", "mul", "(", "u", "[", "0", "]", ",", "u", "[", "1", "]", ")", "/", "(", "(", "1", "-", "C", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "expand", "(", "u", "[", "0", "]", ".", "shape", ")", ")", "\n", "\n", "# calculate new S", "\n", "S_a", "=", "self", ".", "num_classes", "/", "u_a", "\n", "# calculate new e_k", "\n", "e_a", "=", "torch", ".", "mul", "(", "b_a", ",", "S_a", ".", "expand", "(", "b_a", ".", "shape", ")", ")", "\n", "alpha_a", "=", "e_a", "+", "1", "\n", "return", "alpha_a", "\n", "\n", "", "for", "v", "in", "range", "(", "len", "(", "alpha", ")", "-", "1", ")", ":", "\n", "            ", "if", "v", "==", "0", ":", "\n", "                ", "alpha_a", "=", "DS_Combin_two", "(", "alpha", "[", "0", "]", ",", "alpha", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "alpha_a", "=", "DS_Combin_two", "(", "alpha_a", ",", "alpha", "[", "v", "+", "1", "]", ")", "\n", "", "", "return", "alpha_a", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.model.usnet.USNet.forward": [[198, 251], ["usnet.USNet.backbone", "usnet.USNet.aspp_r", "usnet.USNet.aspp_d", "usnet.USNet.conv_r", "usnet.USNet.conv_d", "usnet.USNet.up_r1", "usnet.USNet.up_r2", "usnet.USNet.up_r3", "usnet.USNet.up_d1", "usnet.USNet.up_d2", "usnet.USNet.up_d3", "usnet.USNet.mec_r", "usnet.USNet.mec_d", "dict", "e_r.permute().reshape", "e_d.permute().reshape", "dict", "range", "usnet.USNet.DS_Combin", "len", "dict", "e_r1.permute().reshape", "e_d1.permute().reshape", "e_r2.permute().reshape", "e_d2.permute().reshape", "e_r3.permute().reshape", "e_d3.permute().reshape", "dict", "range", "e_r.permute", "e_d.permute", "len", "e_r1.permute", "e_d1.permute", "e_r2.permute", "e_d2.permute", "e_r3.permute", "e_d3.permute"], "methods", ["home.repos.pwc.inspect_result.morancyc_usnet.model.usnet.USNet.DS_Combin"], ["", "def", "forward", "(", "self", ",", "input_rgb", ",", "input_depth", ")", ":", "\n", "# output of backbone", "\n", "        ", "x_r1", ",", "x_r2", ",", "x_r3", ",", "x_r4", ",", "x_d1", ",", "x_d2", ",", "x_d3", ",", "x_d4", "=", "self", ".", "backbone", "(", "input_rgb", ",", "input_depth", ")", "\n", "\n", "# ASPP", "\n", "x_r4", "=", "self", ".", "aspp_r", "(", "x_r4", ")", "\n", "x_d4", "=", "self", ".", "aspp_d", "(", "x_d4", ")", "\n", "\n", "# compress channel to 64", "\n", "x_r4", "=", "self", ".", "conv_r", "(", "x_r4", ")", "\n", "x_d4", "=", "self", ".", "conv_d", "(", "x_d4", ")", "\n", "\n", "# decoder", "\n", "x_r3", "=", "self", ".", "up_r1", "(", "x_r4", ",", "x_r3", ")", "\n", "x_r2", "=", "self", ".", "up_r2", "(", "x_r3", ",", "x_r2", ")", "\n", "x_r1", "=", "self", ".", "up_r3", "(", "x_r2", ",", "x_r1", ")", "\n", "\n", "x_d3", "=", "self", ".", "up_d1", "(", "x_d4", ",", "x_d3", ")", "\n", "x_d2", "=", "self", ".", "up_d2", "(", "x_d3", ",", "x_d2", ")", "\n", "x_d1", "=", "self", ".", "up_d3", "(", "x_d2", ",", "x_d1", ")", "\n", "\n", "# MEC module", "\n", "e_r1", ",", "e_r2", ",", "e_r3", ",", "e_r", "=", "self", ".", "mec_r", "(", "x_r1", ",", "input_rgb", ")", "\n", "e_d1", ",", "e_d2", ",", "e_d3", ",", "e_d", "=", "self", ".", "mec_d", "(", "x_d1", ",", "input_depth", ")", "\n", "\n", "# compute evidence, alpha", "\n", "evidence", "=", "dict", "(", ")", "\n", "evidence", "[", "0", "]", "=", "e_r", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "num_classes", ")", "# (B*H*W, 2)", "\n", "evidence", "[", "1", "]", "=", "e_d", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "num_classes", ")", "# (B*H*W, 2)", "\n", "\n", "alpha", "=", "dict", "(", ")", "\n", "for", "v_num", "in", "range", "(", "len", "(", "evidence", ")", ")", ":", "\n", "            ", "alpha", "[", "v_num", "]", "=", "evidence", "[", "v_num", "]", "+", "1", "\n", "\n", "", "alpha_a", "=", "self", ".", "DS_Combin", "(", "alpha", ")", "\n", "evidence_a", "=", "alpha_a", "-", "1", "\n", "\n", "if", "self", ".", "training", "==", "True", ":", "\n", "            ", "evidence_sup", "=", "dict", "(", ")", "\n", "evidence_sup", "[", "0", "]", "=", "e_r1", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "num_classes", ")", "# (B*H*W, 2)", "\n", "evidence_sup", "[", "1", "]", "=", "e_d1", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "num_classes", ")", "# (B*H*W, 2)", "\n", "evidence_sup", "[", "2", "]", "=", "e_r2", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "num_classes", ")", "# (B*H*W, 2)", "\n", "evidence_sup", "[", "3", "]", "=", "e_d2", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "num_classes", ")", "# (B*H*W, 2)", "\n", "evidence_sup", "[", "4", "]", "=", "e_r3", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "num_classes", ")", "# (B*H*W, 2)", "\n", "evidence_sup", "[", "5", "]", "=", "e_d3", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "num_classes", ")", "# (B*H*W, 2)", "\n", "\n", "alpha_sup", "=", "dict", "(", ")", "\n", "for", "v_num", "in", "range", "(", "len", "(", "evidence_sup", ")", ")", ":", "\n", "                ", "alpha_sup", "[", "v_num", "]", "=", "evidence_sup", "[", "v_num", "]", "+", "1", "\n", "\n", "", "return", "evidence_sup", ",", "alpha_sup", ",", "evidence", ",", "evidence_a", ",", "alpha", ",", "alpha_a", "\n", "\n", "", "return", "evidence", ",", "evidence_a", ",", "alpha", ",", "alpha_a", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.model.module._ASPPModule.__init__": [[7, 15], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "module._ASPPModule._init_weight"], "methods", ["home.repos.pwc.inspect_result.morancyc_usnet.model.backbone.symmetric_backbone.__init__", "home.repos.pwc.inspect_result.morancyc_usnet.model.module.ASPP._init_weight"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "padding", ",", "dilation", ")", ":", "\n", "        ", "super", "(", "_ASPPModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "atrous_conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "1", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "self", ".", "_init_weight", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.model.module._ASPPModule.forward": [[16, 21], ["module._ASPPModule.atrous_conv", "module._ASPPModule.bn", "module._ASPPModule.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "atrous_conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "\n", "return", "self", ".", "relu", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.model.module._ASPPModule._init_weight": [[22, 29], ["module._ASPPModule.modules", "isinstance", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_init_weight", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.model.module.ASPP.__init__": [[32, 48], ["torch.nn.Module.__init__", "module._ASPPModule", "module._ASPPModule", "module._ASPPModule", "module._ASPPModule", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Dropout", "module.ASPP._init_weight", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.morancyc_usnet.model.backbone.symmetric_backbone.__init__", "home.repos.pwc.inspect_result.morancyc_usnet.model.module.ASPP._init_weight"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "dilations", ")", ":", "\n", "        ", "super", "(", "ASPP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "aspp1", "=", "_ASPPModule", "(", "in_channels", ",", "out_channels", ",", "1", ",", "padding", "=", "0", ",", "dilation", "=", "dilations", "[", "0", "]", ")", "\n", "self", ".", "aspp2", "=", "_ASPPModule", "(", "in_channels", ",", "out_channels", ",", "3", ",", "padding", "=", "dilations", "[", "1", "]", ",", "dilation", "=", "dilations", "[", "1", "]", ")", "\n", "self", ".", "aspp3", "=", "_ASPPModule", "(", "in_channels", ",", "out_channels", ",", "3", ",", "padding", "=", "dilations", "[", "2", "]", ",", "dilation", "=", "dilations", "[", "2", "]", ")", "\n", "self", ".", "aspp4", "=", "_ASPPModule", "(", "in_channels", ",", "out_channels", ",", "3", ",", "padding", "=", "dilations", "[", "3", "]", ",", "dilation", "=", "dilations", "[", "3", "]", ")", "\n", "\n", "self", ".", "global_avg_pool", "=", "nn", ".", "Sequential", "(", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "out_channels", "*", "5", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "self", ".", "_init_weight", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.model.module.ASPP.forward": [[49, 63], ["module.ASPP.aspp1", "module.ASPP.aspp2", "module.ASPP.aspp3", "module.ASPP.aspp4", "module.ASPP.global_avg_pool", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "module.ASPP.conv1", "module.ASPP.bn1", "module.ASPP.relu", "module.ASPP.dropout", "module.ASPP.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "self", ".", "aspp1", "(", "x", ")", "\n", "x2", "=", "self", ".", "aspp2", "(", "x", ")", "\n", "x3", "=", "self", ".", "aspp3", "(", "x", ")", "\n", "x4", "=", "self", ".", "aspp4", "(", "x", ")", "\n", "x5", "=", "self", ".", "global_avg_pool", "(", "x", ")", "\n", "x5", "=", "F", ".", "interpolate", "(", "x5", ",", "size", "=", "x4", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x1", ",", "x2", ",", "x3", ",", "x4", ",", "x5", ")", ",", "dim", "=", "1", ")", "\n", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "return", "self", ".", "dropout", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.model.module.ASPP._init_weight": [[64, 71], ["module.ASPP.modules", "isinstance", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_init_weight", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.morancyc_usnet.model.sne_model.SNE.__init__": [[10, 13], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.morancyc_usnet.model.backbone.symmetric_backbone.__init__"], ["def", "__init__", "(", "self", ",", "crop_top", "=", "True", ")", ":", "\n", "        ", "super", "(", "SNE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "crop_top", "=", "crop_top", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.model.sne_model.SNE.forward": [[14, 94], ["depth.size", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "v_map.type.type.type", "u_map.type.type.type", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.mul().squeeze", "torch.mul().squeeze", "torch.mul().squeeze", "torch.mul().squeeze", "torch.mul().squeeze", "torch.mul().squeeze", "torch.mul().squeeze", "torch.mul().squeeze", "torch.mul().squeeze", "torch.mul().squeeze", "torch.mul().squeeze", "torch.mul().squeeze", "torch.mul().squeeze", "torch.mul().squeeze", "torch.mul().squeeze", "torch.mul().squeeze", "torch.mul().squeeze", "torch.mul().squeeze", "torch.mul().squeeze", "torch.mul().squeeze", "torch.mul().squeeze", "torch.mul().squeeze", "torch.mul().squeeze", "torch.mul().squeeze", "torch.mul().squeeze", "torch.mul().squeeze", "torch.mul().squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "Z.mul", "Z.mul", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.div.view", "torch.div.view", "torch.div.view", "torch.tensor.view", "torch.tensor.view", "torch.tensor.view", "torch.div.view", "torch.div.view", "torch.div.view", "torch.tensor.view", "torch.tensor.view", "torch.tensor.view", "torch.atan", "torch.atan", "torch.atan", "torch.atan", "torch.atan", "torch.atan", "torch.atan", "torch.atan", "torch.atan", "diffKernelArray[].view", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.atan", "torch.atan", "torch.atan", "torch.atan", "torch.atan", "torch.atan", "torch.atan", "torch.atan", "torch.atan", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "X.view", "Y.view", "Z.view", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "depth", ",", "camParam", ")", ":", "\n", "        ", "h", ",", "w", "=", "depth", ".", "size", "(", ")", "\n", "v_map", ",", "u_map", "=", "torch", ".", "meshgrid", "(", "torch", ".", "arange", "(", "h", ")", ",", "torch", ".", "arange", "(", "w", ")", ")", "\n", "v_map", "=", "v_map", ".", "type", "(", "torch", ".", "float32", ")", "\n", "u_map", "=", "u_map", ".", "type", "(", "torch", ".", "float32", ")", "\n", "\n", "Z", "=", "depth", "# h, w", "\n", "Y", "=", "Z", ".", "mul", "(", "(", "v_map", "-", "camParam", "[", "1", ",", "2", "]", ")", ")", "/", "camParam", "[", "0", ",", "0", "]", "# h, w", "\n", "X", "=", "Z", ".", "mul", "(", "(", "u_map", "-", "camParam", "[", "0", ",", "2", "]", ")", ")", "/", "camParam", "[", "0", ",", "0", "]", "# h, w", "\n", "\n", "if", "self", ".", "crop_top", ":", "\n", "            ", "Z", "[", "Y", "<=", "0", "]", "=", "0", "\n", "Y", "[", "Y", "<=", "0", "]", "=", "0", "\n", "\n", "", "Z", "[", "torch", ".", "isnan", "(", "Z", ")", "]", "=", "0", "\n", "D", "=", "torch", ".", "div", "(", "torch", ".", "ones", "(", "h", ",", "w", ")", ",", "Z", ")", "# h, w", "\n", "\n", "Gx", "=", "torch", ".", "tensor", "(", "[", "[", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "0", ",", "1", "]", ",", "[", "0", ",", "0", ",", "0", "]", "]", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "Gy", "=", "torch", ".", "tensor", "(", "[", "[", "0", ",", "-", "1", ",", "0", "]", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "1", ",", "0", "]", "]", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "Gu", "=", "F", ".", "conv2d", "(", "D", ".", "view", "(", "1", ",", "1", ",", "h", ",", "w", ")", ",", "Gx", ".", "view", "(", "1", ",", "1", ",", "3", ",", "3", ")", ",", "padding", "=", "1", ")", "\n", "Gv", "=", "F", ".", "conv2d", "(", "D", ".", "view", "(", "1", ",", "1", ",", "h", ",", "w", ")", ",", "Gy", ".", "view", "(", "1", ",", "1", ",", "3", ",", "3", ")", ",", "padding", "=", "1", ")", "\n", "\n", "nx_t", "=", "Gu", "*", "camParam", "[", "0", ",", "0", "]", "# 1, 1, h, w", "\n", "ny_t", "=", "Gv", "*", "camParam", "[", "1", ",", "1", "]", "# 1, 1, h, w", "\n", "\n", "phi", "=", "torch", ".", "atan", "(", "torch", ".", "div", "(", "ny_t", ",", "nx_t", ")", ")", "+", "torch", ".", "ones", "(", "[", "1", ",", "1", ",", "h", ",", "w", "]", ")", "*", "3.141592657", "\n", "a", "=", "torch", ".", "cos", "(", "phi", ")", "\n", "b", "=", "torch", ".", "sin", "(", "phi", ")", "\n", "\n", "diffKernelArray", "=", "torch", ".", "tensor", "(", "[", "[", "-", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "-", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "-", "1", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "-", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "-", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "-", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "-", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "-", "1", "]", "]", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "sum_nx", "=", "torch", ".", "zeros", "(", "(", "1", ",", "1", ",", "h", ",", "w", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "sum_ny", "=", "torch", ".", "zeros", "(", "(", "1", ",", "1", ",", "h", ",", "w", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "sum_nz", "=", "torch", ".", "zeros", "(", "(", "1", ",", "1", ",", "h", ",", "w", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "for", "i", "in", "range", "(", "8", ")", ":", "\n", "            ", "diffKernel", "=", "diffKernelArray", "[", "i", "]", ".", "view", "(", "1", ",", "1", ",", "3", ",", "3", ")", "\n", "X_d", "=", "F", ".", "conv2d", "(", "X", ".", "view", "(", "1", ",", "1", ",", "h", ",", "w", ")", ",", "diffKernel", ",", "padding", "=", "1", ")", "\n", "Y_d", "=", "F", ".", "conv2d", "(", "Y", ".", "view", "(", "1", ",", "1", ",", "h", ",", "w", ")", ",", "diffKernel", ",", "padding", "=", "1", ")", "\n", "Z_d", "=", "F", ".", "conv2d", "(", "Z", ".", "view", "(", "1", ",", "1", ",", "h", ",", "w", ")", ",", "diffKernel", ",", "padding", "=", "1", ")", "\n", "\n", "nz_i", "=", "torch", ".", "div", "(", "(", "torch", ".", "mul", "(", "nx_t", ",", "X_d", ")", "+", "torch", ".", "mul", "(", "ny_t", ",", "Y_d", ")", ")", ",", "Z_d", ")", "\n", "norm", "=", "torch", ".", "sqrt", "(", "torch", ".", "mul", "(", "nx_t", ",", "nx_t", ")", "+", "torch", ".", "mul", "(", "ny_t", ",", "ny_t", ")", "+", "torch", ".", "mul", "(", "nz_i", ",", "nz_i", ")", ")", "\n", "nx_t_i", "=", "torch", ".", "div", "(", "nx_t", ",", "norm", ")", "\n", "ny_t_i", "=", "torch", ".", "div", "(", "ny_t", ",", "norm", ")", "\n", "nz_t_i", "=", "torch", ".", "div", "(", "nz_i", ",", "norm", ")", "\n", "\n", "nx_t_i", "[", "torch", ".", "isnan", "(", "nx_t_i", ")", "]", "=", "0", "\n", "ny_t_i", "[", "torch", ".", "isnan", "(", "ny_t_i", ")", "]", "=", "0", "\n", "nz_t_i", "[", "torch", ".", "isnan", "(", "nz_t_i", ")", "]", "=", "0", "\n", "\n", "sum_nx", "=", "sum_nx", "+", "nx_t_i", "\n", "sum_ny", "=", "sum_ny", "+", "ny_t_i", "\n", "sum_nz", "=", "sum_nz", "+", "nz_t_i", "\n", "\n", "", "theta", "=", "-", "torch", ".", "atan", "(", "torch", ".", "div", "(", "(", "torch", ".", "mul", "(", "sum_nx", ",", "a", ")", "+", "torch", ".", "mul", "(", "sum_ny", ",", "b", ")", ")", ",", "sum_nz", ")", ")", "\n", "nx", "=", "torch", ".", "mul", "(", "torch", ".", "sin", "(", "theta", ")", ",", "torch", ".", "cos", "(", "phi", ")", ")", "\n", "ny", "=", "torch", ".", "mul", "(", "torch", ".", "sin", "(", "theta", ")", ",", "torch", ".", "sin", "(", "phi", ")", ")", "\n", "nz", "=", "torch", ".", "cos", "(", "theta", ")", "\n", "\n", "nx", "[", "torch", ".", "isnan", "(", "nz", ")", "]", "=", "0", "\n", "ny", "[", "torch", ".", "isnan", "(", "nz", ")", "]", "=", "0", "\n", "nz", "[", "torch", ".", "isnan", "(", "nz", ")", "]", "=", "-", "1", "\n", "\n", "sign", "=", "torch", ".", "ones", "(", "(", "1", ",", "1", ",", "h", ",", "w", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "sign", "[", "ny", ">", "0", "]", "=", "-", "1", "\n", "\n", "nx", "=", "torch", ".", "mul", "(", "nx", ",", "sign", ")", ".", "squeeze", "(", "dim", "=", "0", ")", "\n", "ny", "=", "torch", ".", "mul", "(", "ny", ",", "sign", ")", ".", "squeeze", "(", "dim", "=", "0", ")", "\n", "nz", "=", "torch", ".", "mul", "(", "nz", ",", "sign", ")", ".", "squeeze", "(", "dim", "=", "0", ")", "\n", "\n", "return", "torch", ".", "cat", "(", "[", "nx", ",", "ny", ",", "nz", "]", ",", "dim", "=", "0", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.morancyc_usnet.model.backbone.symmetric_backbone.__init__": [[6, 34], ["super().__init__", "torchvision.models.resnet18", "torchvision.models.resnet18", "torchvision.models.resnet101", "torchvision.models.resnet101", "print"], "methods", ["home.repos.pwc.inspect_result.morancyc_usnet.model.backbone.symmetric_backbone.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "pretrained", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "name", "==", "'resnet18'", ":", "\n", "            ", "features", "=", "models", ".", "resnet18", "(", "pretrained", "=", "pretrained", ")", "\n", "features_d", "=", "models", ".", "resnet18", "(", "pretrained", "=", "pretrained", ")", "\n", "", "elif", "name", "==", "'resnet101'", ":", "\n", "            ", "features", "=", "models", ".", "resnet101", "(", "pretrained", "=", "pretrained", ")", "\n", "features_d", "=", "models", ".", "resnet101", "(", "pretrained", "=", "pretrained", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Error: unspported backbone \\n'", ")", "\n", "\n", "", "self", ".", "conv1", "=", "features", ".", "conv1", "\n", "self", ".", "bn1", "=", "features", ".", "bn1", "\n", "self", ".", "relu", "=", "features", ".", "relu", "\n", "self", ".", "maxpool1", "=", "features", ".", "maxpool", "\n", "self", ".", "layer1", "=", "features", ".", "layer1", "\n", "self", ".", "layer2", "=", "features", ".", "layer2", "\n", "self", ".", "layer3", "=", "features", ".", "layer3", "\n", "self", ".", "layer4", "=", "features", ".", "layer4", "\n", "\n", "self", ".", "conv1_d", "=", "features_d", ".", "conv1", "\n", "self", ".", "bn1_d", "=", "features_d", ".", "bn1", "\n", "self", ".", "relu_d", "=", "features_d", ".", "relu", "\n", "self", ".", "maxpool1_d", "=", "features_d", ".", "maxpool", "\n", "self", ".", "layer1_d", "=", "features_d", ".", "layer1", "\n", "self", ".", "layer2_d", "=", "features_d", ".", "layer2", "\n", "self", ".", "layer3_d", "=", "features_d", ".", "layer3", "\n", "self", ".", "layer4_d", "=", "features_d", ".", "layer4", "\n", "\n"]], "home.repos.pwc.inspect_result.morancyc_usnet.model.backbone.symmetric_backbone.forward": [[35, 56], ["backbone.symmetric_backbone.conv1", "backbone.symmetric_backbone.relu", "backbone.symmetric_backbone.maxpool1", "backbone.symmetric_backbone.layer1", "backbone.symmetric_backbone.layer2", "backbone.symmetric_backbone.layer3", "backbone.symmetric_backbone.layer4", "backbone.symmetric_backbone.conv1_d", "backbone.symmetric_backbone.relu_d", "backbone.symmetric_backbone.maxpool1_d", "backbone.symmetric_backbone.layer1_d", "backbone.symmetric_backbone.layer2_d", "backbone.symmetric_backbone.layer3_d", "backbone.symmetric_backbone.layer4_d", "backbone.symmetric_backbone.bn1", "backbone.symmetric_backbone.bn1_d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_rgb", ",", "input_depth", ")", ":", "\n", "# Symmetric Network", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "input_rgb", ")", "\n", "x", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "feature0", "=", "self", ".", "maxpool1", "(", "x", ")", "\n", "\n", "feature1", "=", "self", ".", "layer1", "(", "feature0", ")", "# 1 / 4", "\n", "feature2", "=", "self", ".", "layer2", "(", "feature1", ")", "# 1 / 8", "\n", "feature3", "=", "self", ".", "layer3", "(", "feature2", ")", "# 1 / 16", "\n", "feature4", "=", "self", ".", "layer4", "(", "feature3", ")", "# 1 / 32", "\n", "\n", "y", "=", "self", ".", "conv1_d", "(", "input_depth", ")", "\n", "y", "=", "self", ".", "relu_d", "(", "self", ".", "bn1_d", "(", "y", ")", ")", "\n", "feature0_d", "=", "self", ".", "maxpool1_d", "(", "y", ")", "\n", "\n", "feature1_d", "=", "self", ".", "layer1_d", "(", "feature0_d", ")", "# 1 / 4", "\n", "feature2_d", "=", "self", ".", "layer2_d", "(", "feature1_d", ")", "# 1 / 8", "\n", "feature3_d", "=", "self", ".", "layer3_d", "(", "feature2_d", ")", "# 1 / 16", "\n", "feature4_d", "=", "self", ".", "layer4_d", "(", "feature3_d", ")", "# 1 / 32", "\n", "\n", "return", "feature1", ",", "feature2", ",", "feature3", ",", "feature4", ",", "feature1_d", ",", "feature2_d", ",", "feature3_d", ",", "feature4_d", "\n", "", "", ""]]}