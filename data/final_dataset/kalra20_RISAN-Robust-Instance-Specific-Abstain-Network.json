{"home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.RISAN-Code.Train_RISAN.to_train": [[10, 16], ["os.listdir"], "function", ["None"], ["def", "to_train", "(", "filename", ")", ":", "\n", "    ", "checkpoints", "=", "os", ".", "listdir", "(", "\"history_checkpoints/\"", ")", "\n", "if", "filename", "in", "checkpoints", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.RISAN-Code.Train_RISAN_NA.to_train": [[10, 16], ["os.listdir"], "function", ["None"], ["def", "to_train", "(", "filename", ")", ":", "\n", "    ", "checkpoints", "=", "os", ".", "listdir", "(", "\"history_checkpoints/\"", ")", "\n", "if", "filename", "in", "checkpoints", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.RISAN-Code.RISAN_utils_NA.my_generator": [[10, 15], ["func().next", "func"], "function", ["None"], ["def", "my_generator", "(", "func", ",", "x_train", ",", "y_train", ",", "batch_size", ",", "k", ")", ":", "\n", "    ", "while", "True", ":", "\n", "        ", "res", "=", "func", "(", "x_train", ",", "y_train", ",", "batch_size", "\n", ")", ".", "next", "(", ")", "\n", "yield", "[", "[", "res", "[", "0", "]", "]", ",", "[", "res", "[", "1", "]", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.RISAN-Code.RISAN_utils_NA.imread_resize": [[22, 28], ["None"], "function", ["None"], ["", "", "def", "imread_resize", "(", "p", ")", ":", "\n", "#print(cv2.imread(p).shape)", "\n", "#a = cv2.imread(p)", "\n", "#b = cv2.resize(a,(64,64))", "\n", "#b = b.flatten()", "\n", "    ", "return", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.RISAN-Code.RISAN_utils_NA.create_cats_vs_dogs_npz": [[29, 51], ["RISAN_utils_NA.create_cats_vs_dogs_npz._load_from_dir"], "function", ["None"], ["", "def", "create_cats_vs_dogs_npz", "(", "cats_vs_dogs_path", "=", "'datasets'", ")", ":", "\n", "    ", "labels", "=", "[", "'cat'", ",", "'dog'", "]", "\n", "label_to_y_dict", "=", "{", "l", ":", "i", "for", "i", ",", "l", "in", "enumerate", "(", "labels", ")", "}", "\n", "\n", "def", "_load_from_dir", "(", "dir_name", ")", ":", "\n", "        ", "glob_path", "=", "os", ".", "path", ".", "join", "(", "cats_vs_dogs_path", ",", "dir_name", ",", "'*.jpg'", ")", "\n", "# print(glob_path)", "\n", "imgs_paths", "=", "glob", "(", "glob_path", ")", "\n", "#print(cv2.imread(imgs_paths[0]))", "\n", "images", "=", "[", "imread_resize", "(", "p", ")", "for", "p", "in", "imgs_paths", "]", "# resize_and_crop_image(p, 64)", "\n", "x", "=", "np", ".", "stack", "(", "images", ")", "\n", "y", "=", "[", "label_to_y_dict", "[", "os", ".", "path", ".", "split", "(", "p", ")", "[", "-", "1", "]", "[", ":", "3", "]", "]", "for", "p", "in", "imgs_paths", "]", "\n", "y", "=", "np", ".", "array", "(", "y", ")", "\n", "return", "x", ",", "y", "\n", "\n", "", "x_train", ",", "y_train", "=", "_load_from_dir", "(", "'Train'", ")", "\n", "x_test", ",", "y_test", "=", "_load_from_dir", "(", "'Test'", ")", "\n", "#print(x_train[0],y_train[0])", "\n", "#print(x_test[0],y_test[0])", "\n", "np", ".", "savez_compressed", "(", "os", ".", "path", ".", "join", "(", "cats_vs_dogs_path", ",", "'cats_vs_dogs.npz'", ")", ",", "\n", "x_train", "=", "x_train", ",", "y_train", "=", "y_train", ",", "\n", "x_test", "=", "x_test", ",", "y_test", "=", "y_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.RISAN-Code.RISAN_utils_NA.load_cats_vs_dogs": [[53, 61], ["numpy.load", "os.path.join"], "function", ["None"], ["", "def", "load_cats_vs_dogs", "(", "cats_vs_dogs_path", "=", "'datasets/'", ")", ":", "\n", "    ", "npz_file", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "cats_vs_dogs_path", ",", "'cats_vs_dogs.npz'", ")", ")", "\n", "x_train", "=", "npz_file", "[", "'x_train'", "]", "\n", "y_train", "=", "npz_file", "[", "'y_train'", "]", "\n", "x_test", "=", "npz_file", "[", "'x_test'", "]", "\n", "y_test", "=", "npz_file", "[", "'y_test'", "]", "\n", "\n", "return", "(", "x_train", ",", "y_train", ")", ",", "(", "x_test", ",", "y_test", ")", "\n", "#create_cats_vs_dogs_npz()", "\n"]], "home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.RISAN-Code.RISAN_utils.my_generator": [[7, 12], ["func().next", "func"], "function", ["None"], ["def", "my_generator", "(", "func", ",", "x_train", ",", "y_train", ",", "batch_size", ",", "k", ")", ":", "\n", "    ", "while", "True", ":", "\n", "        ", "res", "=", "func", "(", "x_train", ",", "y_train", ",", "batch_size", "\n", ")", ".", "next", "(", ")", "\n", "yield", "[", "[", "res", "[", "0", "]", "]", ",", "[", "res", "[", "1", "]", ",", "res", "[", "1", "]", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.RISAN-Code.RISAN_utils.imread_resize": [[13, 17], ["cv2.imread", "cv2.resize"], "function", ["None"], ["", "", "def", "imread_resize", "(", "p", ")", ":", "\n", "    ", "a", "=", "cv2", ".", "imread", "(", "p", ")", "\n", "b", "=", "cv2", ".", "resize", "(", "a", ",", "(", "64", ",", "64", ")", ")", "\n", "return", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.RISAN-Code.RISAN_utils.imread_list": [[18, 20], ["None"], "function", ["None"], ["", "def", "imread_list", "(", "p", ")", ":", "\n", "    ", "return", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.RISAN-Code.RISAN_utils.create_cats_vs_dogs_npz": [[21, 41], ["RISAN_utils.create_cats_vs_dogs_npz._load_from_dir"], "function", ["None"], ["", "def", "create_cats_vs_dogs_npz", "(", "cats_vs_dogs_path", "=", "'datasets'", ")", ":", "\n", "    ", "labels", "=", "[", "'cat'", ",", "'dog'", "]", "\n", "label_to_y_dict", "=", "{", "l", ":", "i", "for", "i", ",", "l", "in", "enumerate", "(", "labels", ")", "}", "\n", "\n", "def", "_load_from_dir", "(", "dir_name", ")", ":", "\n", "        ", "glob_path", "=", "os", ".", "path", ".", "join", "(", "cats_vs_dogs_path", ",", "dir_name", ",", "'*.jpg'", ")", "\n", "imgs_paths", "=", "glob", "(", "glob_path", ")", "\n", "images", "=", "[", "imread_list", "(", "p", ")", "for", "p", "in", "imgs_paths", "]", "\n", "# images = [imread_resize(p) for p in imgs_paths]#resize all images to 64x64", "\n", "x", "=", "np", ".", "stack", "(", "images", ")", "\n", "y", "=", "[", "label_to_y_dict", "[", "os", ".", "path", ".", "split", "(", "p", ")", "[", "-", "1", "]", "[", ":", "3", "]", "]", "for", "p", "in", "imgs_paths", "]", "\n", "y", "=", "np", ".", "array", "(", "y", ")", "\n", "return", "x", ",", "y", "\n", "\n", "", "x_train", ",", "y_train", "=", "_load_from_dir", "(", "'Train'", ")", "\n", "x_test", ",", "y_test", "=", "_load_from_dir", "(", "'Test'", ")", "\n", "\n", "np", ".", "savez_compressed", "(", "os", ".", "path", ".", "join", "(", "cats_vs_dogs_path", ",", "'cats_vs_dogs.npz'", ")", ",", "\n", "x_train", "=", "x_train", ",", "y_train", "=", "y_train", ",", "\n", "x_test", "=", "x_test", ",", "y_test", "=", "y_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.RISAN-Code.RISAN_utils.load_cats_vs_dogs": [[43, 51], ["numpy.load", "os.path.join"], "function", ["None"], ["", "def", "load_cats_vs_dogs", "(", "cats_vs_dogs_path", "=", "'datasets/'", ")", ":", "\n", "    ", "npz_file", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "cats_vs_dogs_path", ",", "'cats_vs_dogs.npz'", ")", ")", "\n", "x_train", "=", "npz_file", "[", "'x_train'", "]", "\n", "y_train", "=", "npz_file", "[", "'y_train'", "]", "\n", "x_test", "=", "npz_file", "[", "'x_test'", "]", "\n", "y_test", "=", "npz_file", "[", "'y_test'", "]", "\n", "\n", "return", "(", "x_train", ",", "y_train", ")", ",", "(", "x_test", ",", "y_test", ")", "\n", "#create_cats_vs_dogs_npz() # To create npz file from the images in the dataset", "\n"]], "home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.models.RISAN_CIFAR_wa.CatDogVgg.__init__": [[25, 47], ["RISAN_CIFAR_wa.CatDogVgg._load_data", "RISAN_CIFAR_wa.CatDogVgg.build_model", "RISAN_CIFAR_wa.CatDogVgg.train", "RISAN_CIFAR_wa.CatDogVgg.model.load_weights", "RISAN_CIFAR_wa.CatDogVgg.train"], "methods", ["home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.models.RISAN_CIFAR.CIFARVgg._load_data", "home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.models.RISAN_CIFAR.CIFARVgg.build_model", "home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.models.RISAN_CIFAR.CIFARVgg.train", "home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.models.RISAN_CIFAR.CIFARVgg.train"], ["    ", "def", "__init__", "(", "self", ",", "train", "=", "True", ",", "filename", "=", "\"weightsvggnt.h5\"", ",", "alpha", "=", "0.7", ",", "gamma", "=", "1e-3", ",", "maxepochs", "=", "250", ",", "cost_rej", "=", "0.5", ",", "noise_frac", "=", "0.0", ")", ":", "\n", "\n", "# self.alpha = 0.9", "\n", "        ", "self", ".", "noise", "=", "noise_frac", "\n", "self", ".", "num_classes", "=", "2", "\n", "self", ".", "weight_decay", "=", "1e-4", "\n", "self", ".", "weight_decay_fc", "=", "1e-7", "\n", "self", ".", "weight_decay_rc", "=", "1e-7", "\n", "self", ".", "_load_data", "(", ")", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "d", "=", "cost_rej", "\n", "self", ".", "x_shape", "=", "self", ".", "x_train", ".", "shape", "[", "1", ":", "]", "\n", "self", ".", "filename", "=", "filename", "\n", "self", ".", "maxepochs", "=", "maxepochs", "\n", "\n", "self", ".", "model", "=", "self", ".", "build_model", "(", ")", "\n", "\n", "if", "train", ":", "\n", "            ", "self", ".", "model", "=", "self", ".", "train", "(", "self", ".", "model", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", ".", "load_weights", "(", "\"history_checkpoints/{}\"", ".", "format", "(", "self", ".", "filename", ")", ",", "by_name", "=", "True", ")", "\n", "self", ".", "model", "=", "self", ".", "train", "(", "self", ".", "model", ")", "\n", "", "", "def", "build_model", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.models.RISAN_CIFAR_wa.CatDogVgg.build_model": [[47, 166], ["keras.layers.Input", "keras.layers.concatenate", "keras.models.Model", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.MaxPooling2D", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.MaxPooling2D", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.MaxPooling2D", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.MaxPooling2D", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.MaxPooling2D", "keras.layers.Dropout", "keras.layers.Flatten", "keras.layers.Dense", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Dense", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Dense", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Dense", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Dense", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Dense", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2"], "methods", ["None"], ["", "", "def", "build_model", "(", "self", ")", ":", "\n", "# Build the network of vgg for 2 classes with massive dropout and weight decay as described in the paper.", "\n", "        ", "acti", "=", "'relu'", "\n", "weight_decay", "=", "self", ".", "weight_decay", "\n", "weight_decay_fc", "=", "self", ".", "weight_decay_fc", "\n", "weight_decay_rc", "=", "self", ".", "weight_decay_rc", "\n", "basic_dropout_rate", "=", "0.3", "\n", "inputa", "=", "Input", "(", "shape", "=", "self", ".", "x_shape", ")", "\n", "curr", "=", "Conv2D", "(", "64", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ",", "activation", "=", "acti", ",", "name", "=", "'block1_conv1'", ",", "trainable", "=", "True", ")", "(", "inputa", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "Dropout", "(", "basic_dropout_rate", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Conv2D", "(", "64", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ",", "activation", "=", "acti", ",", "name", "=", "'block1_conv2'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "'block1_pool'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Conv2D", "(", "128", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ",", "activation", "=", "acti", ",", "name", "=", "'block2_conv1'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.1", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Conv2D", "(", "128", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ",", "activation", "=", "acti", ",", "name", "=", "'block2_conv2'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "'block2_pool'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Conv2D", "(", "256", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ",", "activation", "=", "acti", ",", "name", "=", "'block3_conv1'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.1", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Conv2D", "(", "256", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ",", "activation", "=", "acti", ",", "name", "=", "'block3_conv2'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.1", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Conv2D", "(", "256", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ",", "activation", "=", "acti", ",", "name", "=", "'block3_conv3'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "'block3_pool'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Conv2D", "(", "512", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ",", "activation", "=", "acti", ",", "name", "=", "'block4_conv1'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.1", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Conv2D", "(", "512", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ",", "activation", "=", "acti", ",", "name", "=", "'block4_conv2'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.1", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Conv2D", "(", "512", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ",", "activation", "=", "acti", ",", "name", "=", "'block4_conv3'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "'block4_pool'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Conv2D", "(", "512", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ",", "activation", "=", "acti", ",", "name", "=", "'block5_conv1'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.1", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Conv2D", "(", "512", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ",", "activation", "=", "acti", ",", "name", "=", "'block5_conv2'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.1", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Conv2D", "(", "512", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ",", "activation", "=", "acti", ",", "name", "=", "'block5_conv3'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "'block5_pool'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "curr", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.2", ")", "(", "curr", ")", "\n", "\n", "curr_all", "=", "Flatten", "(", ")", "(", "curr", ")", "\n", "curr", "=", "Dense", "(", "512", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay_fc", ")", ",", "activation", "=", "acti", ",", "trainable", "=", "True", ")", "(", "curr_all", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "# curr_a = Dropout(basic_dropout_rate + 0.3)(curr)", "\n", "curr", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.2", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Dense", "(", "256", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay_fc", ")", ",", "activation", "=", "acti", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.2", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Dense", "(", "128", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay_fc", ")", ",", "activation", "=", "acti", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr_aux", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.2", ")", "(", "curr", ")", "\n", "\n", "# prediction head (f)", "\n", "curr_pred", "=", "Dense", "(", "1", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay_fc", ")", ")", "(", "curr_aux", ")", "\n", "\n", "curr2", "=", "Dense", "(", "512", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay_rc", ")", ",", "activation", "=", "acti", ",", "trainable", "=", "True", ")", "(", "curr_all", ")", "\n", "\n", "curr2", "=", "BatchNormalization", "(", ")", "(", "curr2", ")", "\n", "curr2", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.2", ")", "(", "curr2", ")", "\n", "\n", "curr2", "=", "Dense", "(", "256", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay_rc", ")", ",", "activation", "=", "acti", ",", "trainable", "=", "True", ")", "(", "curr2", ")", "\n", "\n", "curr2", "=", "BatchNormalization", "(", ")", "(", "curr2", ")", "\n", "curr2", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.2", ")", "(", "curr2", ")", "\n", "\n", "curr2", "=", "Dense", "(", "64", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay_rc", ")", ",", "activation", "=", "acti", ",", "trainable", "=", "True", ")", "(", "curr2", ")", "\n", "\n", "curr2", "=", "BatchNormalization", "(", ")", "(", "curr2", ")", "\n", "curr2", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.2", ")", "(", "curr2", ")", "\n", "\n", "curr_rho", "=", "Dense", "(", "1", ",", "activation", "=", "'relu'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay_rc", ")", ",", "trainable", "=", "True", ")", "(", "curr2", ")", "\n", "\n", "\n", "DEAN_output", "=", "concatenate", "(", "[", "curr_pred", ",", "curr_rho", "]", ")", "\n", "# auxiliary head (h)", "\n", "# auxiliary_output = Dense(2, activation='softmax', name=\"classification_head\")(curr_aux)", "\n", "\n", "self", ".", "model", "=", "Model", "(", "inputs", "=", "[", "inputa", "]", ",", "outputs", "=", "[", "DEAN_output", "]", ")", "\n", "\n", "return", "self", ".", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.models.RISAN_CIFAR_wa.CatDogVgg.normalize": [[167, 176], ["numpy.mean", "numpy.mean", "numpy.std", "numpy.std"], "methods", ["None"], ["", "def", "normalize", "(", "self", ",", "X_train", ",", "X_test", ")", ":", "\n", "# this function normalize inputs for zero mean and unit variance", "\n", "# it is used when training a model.", "\n", "\n", "        ", "mean", "=", "np", ".", "mean", "(", "X_train", ",", "axis", "=", "(", "0", ",", "1", ",", "2", ",", "3", ")", ")", "\n", "std", "=", "np", ".", "std", "(", "X_train", ",", "axis", "=", "(", "0", ",", "1", ",", "2", ",", "3", ")", ")", "\n", "X_train", "=", "(", "X_train", "-", "mean", ")", "/", "(", "std", "+", "1e-7", ")", "\n", "X_test", "=", "(", "X_test", "-", "mean", ")", "/", "(", "std", "+", "1e-7", ")", "\n", "return", "X_train", ",", "X_test", "\n", "\n"]], "home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.models.RISAN_CIFAR_wa.CatDogVgg.binary_cifar": [[177, 192], ["zip", "numpy.asarray().reshape", "numpy.asarray().reshape", "numpy.asarray", "numpy.asarray", "x_train_n.append", "y_train_n.append", "numpy.asarray", "numpy.asarray", "len", "x_train_n.append", "y_train_n.append"], "methods", ["None"], ["", "def", "binary_cifar", "(", "self", ",", "x_train", ",", "y_train", ")", ":", "\n", "# Select samples corresponding to class \"Automobile\" and \"Trucks\"", "\n", "        ", "x_train_n", "=", "[", "]", "\n", "y_train_n", "=", "[", "]", "\n", "for", "a", ",", "b", "in", "zip", "(", "x_train", ",", "y_train", ")", ":", "\n", "            ", "if", "b", "==", "9", ":", "\n", "                ", "x_train_n", ".", "append", "(", "a", ")", "\n", "y_train_n", ".", "append", "(", "0", ")", "\n", "", "elif", "b", "==", "1", ":", "\n", "                ", "x_train_n", ".", "append", "(", "a", ")", "\n", "y_train_n", ".", "append", "(", "1", ")", "\n", "\n", "", "", "y_train", "=", "np", ".", "asarray", "(", "y_train_n", ")", ".", "reshape", "(", "(", "len", "(", "y_train_n", ")", ",", "1", ")", ")", "\n", "x_train", "=", "np", ".", "asarray", "(", "x_train_n", ")", "\n", "return", "x_train", ",", "y_train", "\n", "\n"]], "home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.models.RISAN_CIFAR_wa.CatDogVgg._load_data": [[193, 214], ["keras.datasets.cifar10.load_data", "RISAN_CIFAR_wa.CatDogVgg.binary_cifar", "RISAN_CIFAR_wa.CatDogVgg.binary_cifar", "x_train.astype.astype.astype", "x_test.astype.astype.astype", "RISAN_CIFAR_wa.CatDogVgg.normalize", "numpy.random.seed", "numpy.random.seed", "numpy.random.randint", "numpy.random.randint", "keras.utils.to_categorical", "keras.utils.to_categorical", "len", "int", "len"], "methods", ["home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.models.RISAN_CIFAR.CIFARVgg.binary_cifar", "home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.models.RISAN_CIFAR.CIFARVgg.binary_cifar", "home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.models.RISAN_CIFAR.CIFARVgg.normalize"], ["", "def", "_load_data", "(", "self", ")", ":", "\n", "\n", "# The data, shuffled and split between train and test sets:", "\n", "\n", "        ", "(", "x_train", ",", "y_train", ")", ",", "(", "x_test", ",", "y_test", ")", "=", "cifar10", ".", "load_data", "(", ")", "\n", "\n", "(", "x_train", ",", "y_train", ")", "=", "self", ".", "binary_cifar", "(", "x_train", ",", "y_train", ")", "\n", "(", "x_test", ",", "y_test_label", ")", "=", "self", ".", "binary_cifar", "(", "x_test", ",", "y_test", ")", "\n", "x_train", "=", "x_train", ".", "astype", "(", "'float32'", ")", "\n", "x_test", "=", "x_test", ".", "astype", "(", "'float32'", ")", "\n", "\n", "self", ".", "x_train", ",", "self", ".", "x_test", "=", "self", ".", "normalize", "(", "x_train", ",", "x_test", ")", "\n", "np", ".", "random", ".", "seed", "(", "1", ")", "\n", "x", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "y_train", ")", ",", "int", "(", "self", ".", "noise", "*", "len", "(", "y_train", ")", ")", ")", "\n", "for", "ind", "in", "x", ":", "\n", "             ", "if", "y_train", "[", "ind", "]", "==", "0", ":", "\n", "                  ", "y_train", "[", "ind", "]", "=", "1", "\n", "", "elif", "y_train", "[", "ind", "]", "==", "1", ":", "\n", "                  ", "y_train", "[", "ind", "]", "=", "0", "\n", "", "", "self", ".", "y_train", "=", "keras", ".", "utils", ".", "to_categorical", "(", "y_train", ",", "self", ".", "num_classes", ")", "\n", "self", ".", "y_test", "=", "keras", ".", "utils", ".", "to_categorical", "(", "y_test_label", ",", "self", ".", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.models.RISAN_CIFAR_wa.CatDogVgg.train": [[215, 298], ["keras.callbacks.ReduceLROnPlateau", "keras.preprocessing.image.ImageDataGenerator", "keras.preprocessing.image.ImageDataGenerator.fit", "keras.optimizers.SGD", "model.compile", "model.fit_generator", "tensorflow.where", "keras.backend.cast", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.cast", "tensorflow.cast", "tensorflow.where", "tensorflow.cast", "tensorflow.where", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.cast", "keras.backend.cast", "tensorflow.reduce_sum", "tensorflow.cast", "tensorflow.cast", "tensorflow.where", "tensorflow.cast", "tensorflow.where", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.cast", "my_generator", "keras.backend.floatx", "tensorflow.cast", "tensorflow.cast", "tensorflow.math.logical_or", "tensorflow.multiply", "tensorflow.math.greater", "tensorflow.less_equal", "tensorflow.cast", "tensorflow.cast", "keras.backend.floatx", "tensorflow.cast", "tensorflow.math.logical_or", "tensorflow.multiply", "tensorflow.math.greater", "tensorflow.less_equal", "tensorflow.cast", "tensorflow.cast", "tensorflow.math.sigmoid", "tensorflow.math.sigmoid", "tensorflow.math.logical_or", "tensorflow.math.logical_or", "tensorflow.math.greater", "tensorflow.math.less", "tensorflow.reshape", "tensorflow.equal", "tensorflow.equal", "tensorflow.math.logical_or", "tensorflow.math.greater", "tensorflow.math.less", "tensorflow.reshape", "tensorflow.equal", "tensorflow.equal", "tensorflow.math.greater", "tensorflow.math.less_equal", "tensorflow.math.greater", "tensorflow.math.less", "tensorflow.math.greater", "tensorflow.math.less_equal"], "methods", ["home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.RISAN-Code.RISAN_utils.my_generator"], ["", "def", "train", "(", "self", ",", "model", ")", ":", "\n", "        ", "def", "double_sigmoid_loss", "(", "y_true", ",", "y_pred", ")", ":", "\n", "\n", "            ", "y_true", "=", "y_true", "[", ":", ",", "1", "]", "\n", "y_true", "=", "tf", ".", "where", "(", "y_true", "<", "1.0", ",", "-", "1.0", ",", "y_true", ")", "\n", "loss", "=", "2", "*", "self", ".", "d", "*", "tf", ".", "math", ".", "sigmoid", "(", "-", "self", ".", "gamma", "*", "(", "y_pred", "[", ":", ",", "0", "]", "*", "y_true", "-", "y_pred", "[", ":", ",", "1", "]", ")", ")", "+", "2", "*", "(", "1", "-", "self", ".", "d", ")", "*", "tf", ".", "math", ".", "sigmoid", "(", "-", "self", ".", "gamma", "*", "(", "y_true", "*", "y_pred", "[", ":", ",", "0", "]", "+", "y_pred", "[", ":", ",", "1", "]", ")", ")", "\n", "\n", "return", "loss", "\n", "", "def", "double_sigmoid_accuracy", "(", "y_true", ",", "y_pred", ")", ":", "\n", "            ", "y_pred", "=", "K", ".", "cast", "(", "y_pred", ",", "K", ".", "floatx", "(", ")", ")", "\n", "tn0", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "tf", ".", "math", ".", "logical_or", "(", "tf", ".", "math", ".", "greater", "(", "y_pred", "[", ":", ",", "0", "]", ",", "y_pred", "[", ":", ",", "1", "]", ")", ",", "tf", ".", "math", ".", "less_equal", "(", "y_pred", "[", ":", ",", "0", "]", ",", "y_pred", "[", ":", ",", "1", "]", ")", ")", ",", "tf", ".", "float32", ")", ")", "\n", "tot", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "tf", ".", "math", ".", "logical_or", "(", "tf", ".", "math", ".", "greater", "(", "y_pred", "[", ":", ",", "0", "]", ",", "y_pred", "[", ":", ",", "1", "]", ")", ",", "tf", ".", "math", ".", "less", "(", "y_pred", "[", ":", ",", "0", "]", ",", "-", "y_pred", "[", ":", ",", "1", "]", ")", ")", ",", "tf", ".", "float32", ")", ")", "\n", "tn1", "=", "tf", ".", "cast", "(", "tf", ".", "math", ".", "logical_or", "(", "tf", ".", "math", ".", "greater", "(", "y_pred", "[", ":", ",", "0", "]", ",", "y_pred", "[", ":", ",", "1", "]", ")", ",", "tf", ".", "math", ".", "less", "(", "y_pred", "[", ":", ",", "0", "]", ",", "-", "y_pred", "[", ":", ",", "1", "]", ")", ")", ",", "tf", ".", "float32", ")", "\n", "r1", "=", "tf", ".", "cast", "(", "tf", ".", "multiply", "(", "y_pred", ",", "tf", ".", "reshape", "(", "tn1", ",", "(", "-", "1", ",", "1", ")", ")", ")", ",", "tf", ".", "float32", ")", "\n", "r2", "=", "tf", ".", "where", "(", "tn1", "<", "1.0", ",", "-", "1.0", ",", "tn1", ")", "\n", "r3", "=", "tf", ".", "cast", "(", "tf", ".", "math", ".", "greater", "(", "r1", "[", ":", ",", "0", "]", ",", "r1", "[", ":", ",", "1", "]", ")", ",", "tf", ".", "float32", ")", "\n", "r4", "=", "tf", ".", "where", "(", "tf", ".", "less_equal", "(", "r2", ",", "r3", ")", ",", "r2", ",", "r3", ")", "\n", "r5", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "tf", ".", "equal", "(", "r4", ",", "y_true", "[", ":", ",", "1", "]", ")", ",", "tf", ".", "float32", ")", ")", "\n", "r6", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "tf", ".", "equal", "(", "r4", ",", "-", "1.0", ")", ",", "tf", ".", "float32", ")", ")", "\n", "\n", "acc", "=", "r5", "*", "(", "tn0", "-", "r6", ")", "**", "-", "1", "\n", "return", "tf", ".", "cast", "(", "acc", ",", "tf", ".", "float32", ")", "\n", "", "def", "rho_acc", "(", "y_true", ",", "y_pred", ")", ":", "\n", "            ", "y_pred", "=", "K", ".", "cast", "(", "y_pred", ",", "K", ".", "floatx", "(", ")", ")", "\n", "tn0", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "tf", ".", "math", ".", "logical_or", "(", "tf", ".", "math", ".", "greater", "(", "y_pred", "[", ":", ",", "0", "]", ",", "y_pred", "[", ":", ",", "1", "]", ")", ",", "tf", ".", "math", ".", "less_equal", "(", "y_pred", "[", ":", ",", "0", "]", ",", "y_pred", "[", ":", ",", "1", "]", ")", ")", ",", "tf", ".", "float32", ")", ")", "\n", "tn1", "=", "tf", ".", "cast", "(", "tf", ".", "math", ".", "logical_or", "(", "tf", ".", "math", ".", "greater", "(", "y_pred", "[", ":", ",", "0", "]", ",", "y_pred", "[", ":", ",", "1", "]", ")", ",", "tf", ".", "math", ".", "less", "(", "y_pred", "[", ":", ",", "0", "]", ",", "-", "y_pred", "[", ":", ",", "1", "]", ")", ")", ",", "tf", ".", "float32", ")", "\n", "r1", "=", "tf", ".", "cast", "(", "tf", ".", "multiply", "(", "y_pred", ",", "tf", ".", "reshape", "(", "tn1", ",", "(", "-", "1", ",", "1", ")", ")", ")", ",", "tf", ".", "float32", ")", "\n", "r2", "=", "tf", ".", "where", "(", "tn1", "<", "1.0", ",", "-", "1.0", ",", "tn1", ")", "\n", "r3", "=", "tf", ".", "cast", "(", "tf", ".", "math", ".", "greater", "(", "r1", "[", ":", ",", "0", "]", ",", "r1", "[", ":", ",", "1", "]", ")", ",", "tf", ".", "float32", ")", "\n", "r4", "=", "tf", ".", "where", "(", "tf", ".", "less_equal", "(", "r2", ",", "r3", ")", ",", "r2", ",", "r3", ")", "\n", "r5", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "tf", ".", "equal", "(", "r4", ",", "y_true", "[", ":", ",", "1", "]", ")", ",", "tf", ".", "float32", ")", ")", "\n", "r6", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "tf", ".", "equal", "(", "r4", ",", "-", "1.0", ")", ",", "tf", ".", "float32", ")", ")", "\n", "\n", "acc", "=", "r6", "/", "tn0", "\n", "\n", "return", "tf", ".", "cast", "(", "acc", ",", "tf", ".", "float32", ")", "\n", "\n", "# training parameters", "\n", "", "batch_size", "=", "64", "# Size of the batch", "\n", "maxepoches", "=", "self", ".", "maxepochs", "# number of epochs", "\n", "learning_rate", "=", "1e-1", "# initial learning rate", "\n", "\n", "lr_decay", "=", "1e-6", "\n", "\n", "lr_drop", "=", "25", "\n", "\n", "def", "lr_scheduler", "(", "epoch", ")", ":", "\n", "            ", "return", "learning_rate", "*", "(", "0.5", "**", "(", "epoch", "//", "lr_drop", ")", ")", "\n", "\n", "# reduce_lr = keras.callbacks.LearningRateScheduler(lr_scheduler)", "\n", "", "reduce_lr", "=", "keras", ".", "callbacks", ".", "ReduceLROnPlateau", "(", "monitor", "=", "'val_concatenate_1_loss'", ",", "factor", "=", "0.5", ",", "patience", "=", "20", ",", "min_lr", "=", "0.00001", ",", "min_delta", "=", "0.0001", ",", "verbose", "=", "1", ")", "\n", "# es = keras.callbacks.EarlyStopping(monitor='val_loss',mode='min',patience=25,min_delta=0.001)", "\n", "# data augmentation", "\n", "datagen", "=", "ImageDataGenerator", "(", "\n", "featurewise_center", "=", "False", ",", "# set input mean to 0 over the dataset", "\n", "zca_whitening", "=", "False", ",", "# apply ZCA whitening", "\n", "rotation_range", "=", "15", ",", "# randomly rotate images in the range (degrees, 0 to 180)", "\n", "width_shift_range", "=", "0.1", ",", "# randomly shift images horizontally (fraction of total width)", "\n", "height_shift_range", "=", "0.1", ",", "# randomly shift images vertically (fraction of total height)", "\n", "horizontal_flip", "=", "True", ",", "# randomly flip images", "\n", "vertical_flip", "=", "False", ",", "\n", "samplewise_center", "=", "False", ",", "# set each sample mean to 0", "\n", "featurewise_std_normalization", "=", "False", ",", "# divide inputs by std of the dataset", "\n", "samplewise_std_normalization", "=", "False", ",", "# divide each input by its std", "\n", ")", "# randomly flip images", "\n", "# (std, mean, and principal components if ZCA whitening is applied).", "\n", "datagen", ".", "fit", "(", "self", ".", "x_train", ")", "\n", "ep", "=", "1e-07", "\n", "# optimization details", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "learning_rate", ",", "decay", "=", "lr_decay", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "# adam = optimizers.Adam(lr=learning_rate,epsilon=ep)", "\n", "# model.compile(loss=[double_sigmoid_loss,'categorical_crossentropy'],loss_weights=[self.alpha,1-self.alpha],", "\n", "#               optimizer=sgd, metrics=['accuracy', double_sigmoid_accuracy,rho_acc])", "\n", "model", ".", "compile", "(", "loss", "=", "[", "double_sigmoid_loss", "]", ",", "\n", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "double_sigmoid_accuracy", ",", "rho_acc", "]", ")", "\n", "historytemp", "=", "model", ".", "fit_generator", "(", "my_generator", "(", "datagen", ".", "flow", ",", "self", ".", "x_train", ",", "self", ".", "y_train", ",", "batch_size", ",", "2", ")", ",", "use_multiprocessing", "=", "False", ",", "\n", "steps_per_epoch", "=", "self", ".", "x_train", ".", "shape", "[", "0", "]", "//", "batch_size", ",", "\n", "epochs", "=", "maxepoches", ",", "callbacks", "=", "[", "reduce_lr", "]", ",", "\n", "initial_epoch", "=", "0", ",", "\n", "validation_data", "=", "(", "[", "self", ".", "x_test", "]", ",", "[", "self", ".", "y_test", "]", ")", ")", "\n", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.models.RISAN_catdog.CatDogVgg.__init__": [[24, 46], ["RISAN_catdog.CatDogVgg._load_data", "RISAN_catdog.CatDogVgg.build_model", "RISAN_catdog.CatDogVgg.train", "RISAN_catdog.CatDogVgg.model.load_weights", "RISAN_catdog.CatDogVgg.train"], "methods", ["home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.models.RISAN_CIFAR.CIFARVgg._load_data", "home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.models.RISAN_CIFAR.CIFARVgg.build_model", "home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.models.RISAN_CIFAR.CIFARVgg.train", "home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.models.RISAN_CIFAR.CIFARVgg.train"], ["    ", "def", "__init__", "(", "self", ",", "train", "=", "True", ",", "filename", "=", "\"weightsvggnt.h5\"", ",", "alpha", "=", "0.7", ",", "gamma", "=", "1e-3", ",", "maxepochs", "=", "250", ",", "cost_rej", "=", "0.5", ",", "noise_frac", "=", "0.0", ")", ":", "\n", "\n", "        ", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "num_classes", "=", "2", "\n", "self", ".", "weight_decay", "=", "1e-4", "\n", "self", ".", "weight_decay_fc", "=", "1e-7", "\n", "self", ".", "weight_decay_rc", "=", "1e-7", "\n", "self", ".", "noise", "=", "noise_frac", "\n", "self", ".", "_load_data", "(", ")", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "d", "=", "cost_rej", "\n", "self", ".", "x_shape", "=", "self", ".", "x_train", ".", "shape", "[", "1", ":", "]", "\n", "self", ".", "filename", "=", "filename", "\n", "self", ".", "maxepochs", "=", "maxepochs", "\n", "\n", "self", ".", "model", "=", "self", ".", "build_model", "(", ")", "\n", "\n", "if", "train", ":", "\n", "            ", "self", ".", "model", "=", "self", ".", "train", "(", "self", ".", "model", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", ".", "load_weights", "(", "\"history_checkpoints/{}\"", ".", "format", "(", "self", ".", "filename", ")", ",", "by_name", "=", "True", ")", "\n", "self", ".", "model", "=", "self", ".", "train", "(", "self", ".", "model", ")", "\n", "", "", "def", "build_model", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.models.RISAN_catdog.CatDogVgg.build_model": [[46, 165], ["keras.layers.Input", "keras.layers.concatenate", "keras.models.Model", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.MaxPooling2D", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.MaxPooling2D", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.MaxPooling2D", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.MaxPooling2D", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.MaxPooling2D", "keras.layers.Dropout", "keras.layers.Flatten", "keras.layers.Dense", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Dense", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Dense", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Dense", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Dense", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Dense", "keras.layers.Dense", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2"], "methods", ["None"], ["", "", "def", "build_model", "(", "self", ")", ":", "\n", "# Build the network of vgg for 2 classes with massive dropout and weight decay as described in the paper.", "\n", "        ", "acti", "=", "'relu'", "\n", "weight_decay", "=", "self", ".", "weight_decay", "\n", "weight_decay_fc", "=", "self", ".", "weight_decay_fc", "\n", "weight_decay_rc", "=", "self", ".", "weight_decay_rc", "\n", "basic_dropout_rate", "=", "0.3", "\n", "inputa", "=", "Input", "(", "shape", "=", "self", ".", "x_shape", ")", "\n", "curr", "=", "Conv2D", "(", "64", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ",", "activation", "=", "acti", ",", "name", "=", "'block1_conv1'", ",", "trainable", "=", "True", ")", "(", "inputa", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "Dropout", "(", "basic_dropout_rate", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Conv2D", "(", "64", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ",", "activation", "=", "acti", ",", "name", "=", "'block1_conv2'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "'block1_pool'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Conv2D", "(", "128", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ",", "activation", "=", "acti", ",", "name", "=", "'block2_conv1'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.1", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Conv2D", "(", "128", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ",", "activation", "=", "acti", ",", "name", "=", "'block2_conv2'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "'block2_pool'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Conv2D", "(", "256", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ",", "activation", "=", "acti", ",", "name", "=", "'block3_conv1'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.1", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Conv2D", "(", "256", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ",", "activation", "=", "acti", ",", "name", "=", "'block3_conv2'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.1", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Conv2D", "(", "256", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ",", "activation", "=", "acti", ",", "name", "=", "'block3_conv3'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "'block3_pool'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Conv2D", "(", "512", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ",", "activation", "=", "acti", ",", "name", "=", "'block4_conv1'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.1", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Conv2D", "(", "512", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ",", "activation", "=", "acti", ",", "name", "=", "'block4_conv2'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.1", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Conv2D", "(", "512", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ",", "activation", "=", "acti", ",", "name", "=", "'block4_conv3'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "'block4_pool'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Conv2D", "(", "512", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ",", "activation", "=", "acti", ",", "name", "=", "'block5_conv1'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.1", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Conv2D", "(", "512", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ",", "activation", "=", "acti", ",", "name", "=", "'block5_conv2'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.1", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Conv2D", "(", "512", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ",", "activation", "=", "acti", ",", "name", "=", "'block5_conv3'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "'block5_pool'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "curr", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.2", ")", "(", "curr", ")", "\n", "\n", "curr_all", "=", "Flatten", "(", ")", "(", "curr", ")", "\n", "curr", "=", "Dense", "(", "512", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay_fc", ")", ",", "activation", "=", "acti", ",", "trainable", "=", "True", ")", "(", "curr_all", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "# curr_a = Dropout(basic_dropout_rate + 0.3)(curr)", "\n", "curr", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.2", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Dense", "(", "256", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay_fc", ")", ",", "activation", "=", "acti", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.2", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Dense", "(", "128", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay_fc", ")", ",", "activation", "=", "acti", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr_aux", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.2", ")", "(", "curr", ")", "\n", "\n", "# prediction head (f)", "\n", "curr_pred", "=", "Dense", "(", "1", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay_fc", ")", ")", "(", "curr_aux", ")", "\n", "\n", "curr2", "=", "Dense", "(", "512", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay_rc", ")", ",", "activation", "=", "acti", ",", "trainable", "=", "True", ")", "(", "curr_all", ")", "\n", "\n", "curr2", "=", "BatchNormalization", "(", ")", "(", "curr2", ")", "\n", "curr2", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.2", ")", "(", "curr2", ")", "\n", "\n", "curr2", "=", "Dense", "(", "256", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay_rc", ")", ",", "activation", "=", "acti", ",", "trainable", "=", "True", ")", "(", "curr2", ")", "\n", "\n", "curr2", "=", "BatchNormalization", "(", ")", "(", "curr2", ")", "\n", "curr2", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.2", ")", "(", "curr2", ")", "\n", "\n", "curr2", "=", "Dense", "(", "64", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay_rc", ")", ",", "activation", "=", "acti", ",", "trainable", "=", "True", ")", "(", "curr2", ")", "\n", "\n", "curr2", "=", "BatchNormalization", "(", ")", "(", "curr2", ")", "\n", "curr2", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.2", ")", "(", "curr2", ")", "\n", "\n", "curr_rho", "=", "Dense", "(", "1", ",", "activation", "=", "'relu'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay_rc", ")", ",", "trainable", "=", "True", ")", "(", "curr2", ")", "\n", "\n", "\n", "DEAN_output", "=", "concatenate", "(", "[", "curr_pred", ",", "curr_rho", "]", ")", "\n", "# auxiliary head (h)", "\n", "auxiliary_output", "=", "Dense", "(", "2", ",", "activation", "=", "'softmax'", ",", "name", "=", "\"classification_head\"", ")", "(", "curr_aux", ")", "\n", "\n", "self", ".", "model", "=", "Model", "(", "inputs", "=", "[", "inputa", "]", ",", "outputs", "=", "[", "DEAN_output", ",", "auxiliary_output", "]", ")", "\n", "\n", "return", "self", ".", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.models.RISAN_catdog.CatDogVgg.normalize": [[166, 175], ["numpy.mean", "numpy.mean", "numpy.std", "numpy.std"], "methods", ["None"], ["", "def", "normalize", "(", "self", ",", "X_train", ",", "X_test", ")", ":", "\n", "# this function normalize inputs for zero mean and unit variance", "\n", "# it is used when training a model.", "\n", "\n", "        ", "mean", "=", "np", ".", "mean", "(", "X_train", ",", "axis", "=", "(", "0", ",", "1", ",", "2", ",", "3", ")", ")", "\n", "std", "=", "np", ".", "std", "(", "X_train", ",", "axis", "=", "(", "0", ",", "1", ",", "2", ",", "3", ")", ")", "\n", "X_train", "=", "(", "X_train", "-", "mean", ")", "/", "(", "std", "+", "1e-7", ")", "\n", "X_test", "=", "(", "X_test", "-", "mean", ")", "/", "(", "std", "+", "1e-7", ")", "\n", "return", "X_train", ",", "X_test", "\n", "\n"]], "home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.models.RISAN_catdog.CatDogVgg._load_data": [[176, 192], ["load_cats_vs_dogs", "x_train.astype.astype.astype", "x_test.astype.astype.astype", "RISAN_catdog.CatDogVgg.normalize", "numpy.random.seed", "numpy.random.seed", "numpy.random.randint", "numpy.random.randint", "keras.utils.to_categorical", "keras.utils.to_categorical", "len", "int", "len"], "methods", ["home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.RISAN-Code.RISAN_utils.load_cats_vs_dogs", "home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.models.RISAN_CIFAR.CIFARVgg.normalize"], ["", "def", "_load_data", "(", "self", ")", ":", "\n", "\n", "# The data, shuffled and split between train and test sets:", "\n", "        ", "(", "x_train", ",", "y_train", ")", ",", "(", "x_test", ",", "y_test", ")", "=", "load_cats_vs_dogs", "(", ")", "\n", "x_train", "=", "x_train", ".", "astype", "(", "'float32'", ")", "\n", "x_test", "=", "x_test", ".", "astype", "(", "'float32'", ")", "\n", "self", ".", "x_train", ",", "self", ".", "x_test", "=", "self", ".", "normalize", "(", "x_train", ",", "x_test", ")", "\n", "np", ".", "random", ".", "seed", "(", "1", ")", "\n", "x", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "y_train", ")", ",", "int", "(", "self", ".", "noise", "*", "len", "(", "y_train", ")", ")", ")", "\n", "for", "ind", "in", "x", ":", "\n", "             ", "if", "y_train", "[", "ind", "]", "==", "0", ":", "\n", "                  ", "y_train", "[", "ind", "]", "=", "1", "\n", "", "elif", "y_train", "[", "ind", "]", "==", "1", ":", "\n", "                  ", "y_train", "[", "ind", "]", "=", "0", "\n", "", "", "self", ".", "y_train", "=", "keras", ".", "utils", ".", "to_categorical", "(", "y_train", ",", "self", ".", "num_classes", ")", "\n", "self", ".", "y_test", "=", "keras", ".", "utils", ".", "to_categorical", "(", "y_test", ",", "self", ".", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.models.RISAN_catdog.CatDogVgg.train": [[193, 284], ["keras.callbacks.ReduceLROnPlateau", "keras.preprocessing.image.ImageDataGenerator", "keras.preprocessing.image.ImageDataGenerator.fit", "keras.optimizers.SGD", "keras.optimizers.Adam", "model.compile", "model.fit_generator", "tensorflow.where", "keras.backend.cast", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.cast", "tensorflow.cast", "tensorflow.where", "tensorflow.cast", "tensorflow.where", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.cast", "keras.backend.cast", "tensorflow.reduce_sum", "tensorflow.cast", "tensorflow.cast", "tensorflow.where", "tensorflow.cast", "tensorflow.where", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.cast", "my_generator", "keras.backend.floatx", "tensorflow.cast", "tensorflow.cast", "tensorflow.math.logical_or", "tensorflow.multiply", "tensorflow.math.greater", "tensorflow.less_equal", "tensorflow.cast", "tensorflow.cast", "keras.backend.floatx", "tensorflow.cast", "tensorflow.math.logical_or", "tensorflow.multiply", "tensorflow.math.greater", "tensorflow.less_equal", "tensorflow.cast", "tensorflow.cast", "tensorflow.math.sigmoid", "tensorflow.math.sigmoid", "tensorflow.math.logical_or", "tensorflow.math.logical_or", "tensorflow.math.greater", "tensorflow.math.less", "tensorflow.reshape", "tensorflow.equal", "tensorflow.equal", "tensorflow.math.logical_or", "tensorflow.math.greater", "tensorflow.math.less", "tensorflow.reshape", "tensorflow.equal", "tensorflow.equal", "tensorflow.math.greater", "tensorflow.math.less_equal", "tensorflow.math.greater", "tensorflow.math.less", "tensorflow.math.greater", "tensorflow.math.less_equal"], "methods", ["home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.RISAN-Code.RISAN_utils.my_generator"], ["", "def", "train", "(", "self", ",", "model", ")", ":", "\n", "        ", "def", "double_sigmoid_loss", "(", "y_true", ",", "y_pred", ")", ":", "\n", "\n", "            ", "y_true", "=", "y_true", "[", ":", ",", "1", "]", "\n", "y_true", "=", "tf", ".", "where", "(", "y_true", "<", "1.0", ",", "-", "1.0", ",", "y_true", ")", "\n", "loss", "=", "2", "*", "self", ".", "d", "*", "tf", ".", "math", ".", "sigmoid", "(", "-", "self", ".", "gamma", "*", "(", "y_pred", "[", ":", ",", "0", "]", "*", "y_true", "-", "y_pred", "[", ":", ",", "1", "]", ")", ")", "+", "2", "*", "(", "1", "-", "self", ".", "d", ")", "*", "tf", ".", "math", ".", "sigmoid", "(", "-", "self", ".", "gamma", "*", "(", "y_true", "*", "y_pred", "[", ":", ",", "0", "]", "+", "y_pred", "[", ":", ",", "1", "]", ")", ")", "\n", "\n", "return", "loss", "\n", "", "def", "double_sigmoid_accuracy", "(", "y_true", ",", "y_pred", ")", ":", "\n", "            ", "y_pred", "=", "K", ".", "cast", "(", "y_pred", ",", "K", ".", "floatx", "(", ")", ")", "\n", "tn0", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "tf", ".", "math", ".", "logical_or", "(", "tf", ".", "math", ".", "greater", "(", "y_pred", "[", ":", ",", "0", "]", ",", "y_pred", "[", ":", ",", "1", "]", ")", ",", "tf", ".", "math", ".", "less_equal", "(", "y_pred", "[", ":", ",", "0", "]", ",", "y_pred", "[", ":", ",", "1", "]", ")", ")", ",", "tf", ".", "float32", ")", ")", "\n", "tot", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "tf", ".", "math", ".", "logical_or", "(", "tf", ".", "math", ".", "greater", "(", "y_pred", "[", ":", ",", "0", "]", ",", "y_pred", "[", ":", ",", "1", "]", ")", ",", "tf", ".", "math", ".", "less", "(", "y_pred", "[", ":", ",", "0", "]", ",", "-", "y_pred", "[", ":", ",", "1", "]", ")", ")", ",", "tf", ".", "float32", ")", ")", "\n", "tn1", "=", "tf", ".", "cast", "(", "tf", ".", "math", ".", "logical_or", "(", "tf", ".", "math", ".", "greater", "(", "y_pred", "[", ":", ",", "0", "]", ",", "y_pred", "[", ":", ",", "1", "]", ")", ",", "tf", ".", "math", ".", "less", "(", "y_pred", "[", ":", ",", "0", "]", ",", "-", "y_pred", "[", ":", ",", "1", "]", ")", ")", ",", "tf", ".", "float32", ")", "\n", "r1", "=", "tf", ".", "cast", "(", "tf", ".", "multiply", "(", "y_pred", ",", "tf", ".", "reshape", "(", "tn1", ",", "(", "-", "1", ",", "1", ")", ")", ")", ",", "tf", ".", "float32", ")", "\n", "r2", "=", "tf", ".", "where", "(", "tn1", "<", "1.0", ",", "-", "1.0", ",", "tn1", ")", "\n", "r3", "=", "tf", ".", "cast", "(", "tf", ".", "math", ".", "greater", "(", "r1", "[", ":", ",", "0", "]", ",", "r1", "[", ":", ",", "1", "]", ")", ",", "tf", ".", "float32", ")", "\n", "r4", "=", "tf", ".", "where", "(", "tf", ".", "less_equal", "(", "r2", ",", "r3", ")", ",", "r2", ",", "r3", ")", "\n", "r5", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "tf", ".", "equal", "(", "r4", ",", "y_true", "[", ":", ",", "1", "]", ")", ",", "tf", ".", "float32", ")", ")", "\n", "r6", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "tf", ".", "equal", "(", "r4", ",", "-", "1.0", ")", ",", "tf", ".", "float32", ")", ")", "\n", "\n", "acc", "=", "r5", "*", "(", "tn0", "-", "r6", ")", "**", "-", "1", "\n", "return", "tf", ".", "cast", "(", "acc", ",", "tf", ".", "float32", ")", "\n", "", "def", "rho_acc", "(", "y_true", ",", "y_pred", ")", ":", "\n", "            ", "y_pred", "=", "K", ".", "cast", "(", "y_pred", ",", "K", ".", "floatx", "(", ")", ")", "\n", "tn0", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "tf", ".", "math", ".", "logical_or", "(", "tf", ".", "math", ".", "greater", "(", "y_pred", "[", ":", ",", "0", "]", ",", "y_pred", "[", ":", ",", "1", "]", ")", ",", "tf", ".", "math", ".", "less_equal", "(", "y_pred", "[", ":", ",", "0", "]", ",", "y_pred", "[", ":", ",", "1", "]", ")", ")", ",", "tf", ".", "float32", ")", ")", "\n", "tn1", "=", "tf", ".", "cast", "(", "tf", ".", "math", ".", "logical_or", "(", "tf", ".", "math", ".", "greater", "(", "y_pred", "[", ":", ",", "0", "]", ",", "y_pred", "[", ":", ",", "1", "]", ")", ",", "tf", ".", "math", ".", "less", "(", "y_pred", "[", ":", ",", "0", "]", ",", "-", "y_pred", "[", ":", ",", "1", "]", ")", ")", ",", "tf", ".", "float32", ")", "\n", "r1", "=", "tf", ".", "cast", "(", "tf", ".", "multiply", "(", "y_pred", ",", "tf", ".", "reshape", "(", "tn1", ",", "(", "-", "1", ",", "1", ")", ")", ")", ",", "tf", ".", "float32", ")", "\n", "r2", "=", "tf", ".", "where", "(", "tn1", "<", "1.0", ",", "-", "1.0", ",", "tn1", ")", "\n", "r3", "=", "tf", ".", "cast", "(", "tf", ".", "math", ".", "greater", "(", "r1", "[", ":", ",", "0", "]", ",", "r1", "[", ":", ",", "1", "]", ")", ",", "tf", ".", "float32", ")", "\n", "r4", "=", "tf", ".", "where", "(", "tf", ".", "less_equal", "(", "r2", ",", "r3", ")", ",", "r2", ",", "r3", ")", "\n", "r5", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "tf", ".", "equal", "(", "r4", ",", "y_true", "[", ":", ",", "1", "]", ")", ",", "tf", ".", "float32", ")", ")", "\n", "r6", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "tf", ".", "equal", "(", "r4", ",", "-", "1.0", ")", ",", "tf", ".", "float32", ")", ")", "\n", "\n", "acc", "=", "r6", "/", "tn0", "\n", "\n", "return", "tf", ".", "cast", "(", "acc", ",", "tf", ".", "float32", ")", "\n", "\n", "# training parameters", "\n", "", "batch_size", "=", "128", "# Size of the batch", "\n", "maxepoches", "=", "self", ".", "maxepochs", "# number of epochs", "\n", "learning_rate", "=", "1e-1", "# initial learning rate", "\n", "\n", "lr_decay", "=", "1e-6", "\n", "\n", "lr_drop", "=", "25", "\n", "\n", "def", "lr_scheduler", "(", "epoch", ")", ":", "\n", "            ", "return", "learning_rate", "*", "(", "0.5", "**", "(", "epoch", "//", "lr_drop", ")", ")", "\n", "\n", "# reduce_lr = keras.callbacks.LearningRateScheduler(lr_scheduler)", "\n", "", "reduce_lr", "=", "keras", ".", "callbacks", ".", "ReduceLROnPlateau", "(", "monitor", "=", "'val_concatenate_1_loss'", ",", "factor", "=", "0.5", ",", "patience", "=", "20", ",", "min_lr", "=", "0.00001", ",", "min_delta", "=", "0.0001", ",", "verbose", "=", "1", ")", "\n", "# es = keras.callbacks.EarlyStopping(monitor='val_loss',mode='min',patience=25,min_delta=0.001)", "\n", "# data augmentation", "\n", "datagen", "=", "ImageDataGenerator", "(", "\n", "featurewise_center", "=", "False", ",", "# set input mean to 0 over the dataset", "\n", "zca_whitening", "=", "False", ",", "# apply ZCA whitening", "\n", "rotation_range", "=", "15", ",", "# randomly rotate images in the range (degrees, 0 to 180)", "\n", "width_shift_range", "=", "0.1", ",", "# randomly shift images horizontally (fraction of total width)", "\n", "height_shift_range", "=", "0.1", ",", "# randomly shift images vertically (fraction of total height)", "\n", "horizontal_flip", "=", "True", ",", "# randomly flip images", "\n", "vertical_flip", "=", "False", ",", "\n", "samplewise_center", "=", "False", ",", "# set each sample mean to 0", "\n", "featurewise_std_normalization", "=", "False", ",", "# divide inputs by std of the dataset", "\n", "samplewise_std_normalization", "=", "False", ",", "# divide each input by its std", "\n", ")", "# randomly flip images", "\n", "# (std, mean, and principal components if ZCA whitening is applied).", "\n", "datagen", ".", "fit", "(", "self", ".", "x_train", ")", "\n", "ep", "=", "1e-07", "\n", "# optimization details", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "learning_rate", ",", "decay", "=", "lr_decay", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "adam", "=", "optimizers", ".", "Adam", "(", "lr", "=", "learning_rate", ",", "epsilon", "=", "ep", ")", "\n", "model", ".", "compile", "(", "loss", "=", "[", "double_sigmoid_loss", ",", "'categorical_crossentropy'", "]", ",", "loss_weights", "=", "[", "self", ".", "alpha", ",", "1", "-", "self", ".", "alpha", "]", ",", "\n", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", ",", "double_sigmoid_accuracy", ",", "rho_acc", "]", ")", "\n", "\n", "historytemp", "=", "model", ".", "fit_generator", "(", "my_generator", "(", "datagen", ".", "flow", ",", "self", ".", "x_train", ",", "self", ".", "y_train", ",", "batch_size", ",", "2", ")", ",", "\n", "steps_per_epoch", "=", "self", ".", "x_train", ".", "shape", "[", "0", "]", "//", "batch_size", ",", "\n", "epochs", "=", "maxepoches", ",", "callbacks", "=", "[", "reduce_lr", "]", ",", "validation_steps", "=", "1", ",", "initial_epoch", "=", "0", ",", "\n", "validation_data", "=", "(", "[", "self", ".", "x_test", "]", ",", "[", "self", ".", "y_test", ",", "self", ".", "y_test", "]", ")", ")", "\n", "\n", "\n", "# with open(\"history_checkpoints/{}_history.pkl\".format(self.filename[:-3]), 'wb') as handle:", "\n", "# pickle.dump(historytemp.history, handle, protocol=pickle.HIGHEST_PROTOCOL)", "\n", "\n", "# model.save_weights(\"history_checkpoints/{}\".format(self.filename))", "\n", "\n", "#with open(\"checkpoints_epoch/{}_history.pkl\".format(self.filename[:-3]), 'wb') as handle:", "\n", "#   pickle.dump(historytemp.history, handle, protocol=pickle.HIGHEST_PROTOCOL)", "\n", "\n", "# model.save_weights(\"checkpoints3/{}\".format(self.filename))", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.models.RISAN_catdog_wa.CatDogVgg.__init__": [[24, 46], ["RISAN_catdog_wa.CatDogVgg._load_data", "RISAN_catdog_wa.CatDogVgg.build_model", "RISAN_catdog_wa.CatDogVgg.train", "RISAN_catdog_wa.CatDogVgg.model.load_weights", "RISAN_catdog_wa.CatDogVgg.train"], "methods", ["home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.models.RISAN_CIFAR.CIFARVgg._load_data", "home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.models.RISAN_CIFAR.CIFARVgg.build_model", "home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.models.RISAN_CIFAR.CIFARVgg.train", "home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.models.RISAN_CIFAR.CIFARVgg.train"], ["    ", "def", "__init__", "(", "self", ",", "train", "=", "True", ",", "filename", "=", "\"weightsvggnt.h5\"", ",", "alpha", "=", "0.7", ",", "gamma", "=", "1e-3", ",", "maxepochs", "=", "250", ",", "cost_rej", "=", "0.5", ",", "noise_frac", "=", "0.0", ")", ":", "\n", "\n", "# self.alpha = 0.9", "\n", "        ", "self", ".", "noise", "=", "noise_frac", "\n", "self", ".", "num_classes", "=", "2", "\n", "self", ".", "weight_decay", "=", "1e-4", "\n", "self", ".", "weight_decay_fc", "=", "1e-7", "\n", "self", ".", "weight_decay_rc", "=", "1e-7", "\n", "self", ".", "_load_data", "(", ")", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "d", "=", "cost_rej", "\n", "self", ".", "x_shape", "=", "self", ".", "x_train", ".", "shape", "[", "1", ":", "]", "\n", "self", ".", "filename", "=", "filename", "\n", "self", ".", "maxepochs", "=", "maxepochs", "\n", "\n", "self", ".", "model", "=", "self", ".", "build_model", "(", ")", "\n", "\n", "if", "train", ":", "\n", "            ", "self", ".", "model", "=", "self", ".", "train", "(", "self", ".", "model", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", ".", "load_weights", "(", "\"history_checkpoints/{}\"", ".", "format", "(", "self", ".", "filename", ")", ",", "by_name", "=", "True", ")", "\n", "self", ".", "model", "=", "self", ".", "train", "(", "self", ".", "model", ")", "\n", "", "", "def", "build_model", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.models.RISAN_catdog_wa.CatDogVgg.build_model": [[46, 165], ["keras.layers.Input", "keras.layers.concatenate", "keras.models.Model", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.MaxPooling2D", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.MaxPooling2D", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.MaxPooling2D", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.MaxPooling2D", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.MaxPooling2D", "keras.layers.Dropout", "keras.layers.Flatten", "keras.layers.Dense", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Dense", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Dense", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Dense", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Dense", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Dense", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2"], "methods", ["None"], ["", "", "def", "build_model", "(", "self", ")", ":", "\n", "# Build the network of vgg for 2 classes with massive dropout and weight decay as described in the paper.", "\n", "        ", "acti", "=", "'relu'", "\n", "weight_decay", "=", "self", ".", "weight_decay", "\n", "weight_decay_fc", "=", "self", ".", "weight_decay_fc", "\n", "weight_decay_rc", "=", "self", ".", "weight_decay_rc", "\n", "basic_dropout_rate", "=", "0.3", "\n", "inputa", "=", "Input", "(", "shape", "=", "self", ".", "x_shape", ")", "\n", "curr", "=", "Conv2D", "(", "64", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ",", "activation", "=", "acti", ",", "name", "=", "'block1_conv1'", ",", "trainable", "=", "True", ")", "(", "inputa", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "Dropout", "(", "basic_dropout_rate", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Conv2D", "(", "64", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ",", "activation", "=", "acti", ",", "name", "=", "'block1_conv2'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "'block1_pool'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Conv2D", "(", "128", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ",", "activation", "=", "acti", ",", "name", "=", "'block2_conv1'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.1", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Conv2D", "(", "128", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ",", "activation", "=", "acti", ",", "name", "=", "'block2_conv2'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "'block2_pool'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Conv2D", "(", "256", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ",", "activation", "=", "acti", ",", "name", "=", "'block3_conv1'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.1", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Conv2D", "(", "256", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ",", "activation", "=", "acti", ",", "name", "=", "'block3_conv2'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.1", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Conv2D", "(", "256", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ",", "activation", "=", "acti", ",", "name", "=", "'block3_conv3'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "'block3_pool'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Conv2D", "(", "512", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ",", "activation", "=", "acti", ",", "name", "=", "'block4_conv1'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.1", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Conv2D", "(", "512", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ",", "activation", "=", "acti", ",", "name", "=", "'block4_conv2'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.1", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Conv2D", "(", "512", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ",", "activation", "=", "acti", ",", "name", "=", "'block4_conv3'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "'block4_pool'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Conv2D", "(", "512", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ",", "activation", "=", "acti", ",", "name", "=", "'block5_conv1'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.1", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Conv2D", "(", "512", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ",", "activation", "=", "acti", ",", "name", "=", "'block5_conv2'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.1", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Conv2D", "(", "512", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ",", "activation", "=", "acti", ",", "name", "=", "'block5_conv3'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "'block5_pool'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "curr", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.2", ")", "(", "curr", ")", "\n", "\n", "curr_all", "=", "Flatten", "(", ")", "(", "curr", ")", "\n", "curr", "=", "Dense", "(", "512", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay_fc", ")", ",", "activation", "=", "acti", ",", "trainable", "=", "True", ")", "(", "curr_all", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "# curr_a = Dropout(basic_dropout_rate + 0.3)(curr)", "\n", "curr", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.2", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Dense", "(", "256", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay_fc", ")", ",", "activation", "=", "acti", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.2", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Dense", "(", "128", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay_fc", ")", ",", "activation", "=", "acti", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr_aux", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.2", ")", "(", "curr", ")", "\n", "\n", "# prediction head (f)", "\n", "curr_pred", "=", "Dense", "(", "1", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay_fc", ")", ")", "(", "curr_aux", ")", "\n", "\n", "curr2", "=", "Dense", "(", "512", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay_rc", ")", ",", "activation", "=", "acti", ",", "trainable", "=", "True", ")", "(", "curr_all", ")", "\n", "\n", "curr2", "=", "BatchNormalization", "(", ")", "(", "curr2", ")", "\n", "curr2", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.2", ")", "(", "curr2", ")", "\n", "\n", "curr2", "=", "Dense", "(", "256", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay_rc", ")", ",", "activation", "=", "acti", ",", "trainable", "=", "True", ")", "(", "curr2", ")", "\n", "\n", "curr2", "=", "BatchNormalization", "(", ")", "(", "curr2", ")", "\n", "curr2", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.2", ")", "(", "curr2", ")", "\n", "\n", "curr2", "=", "Dense", "(", "64", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay_rc", ")", ",", "activation", "=", "acti", ",", "trainable", "=", "True", ")", "(", "curr2", ")", "\n", "\n", "curr2", "=", "BatchNormalization", "(", ")", "(", "curr2", ")", "\n", "curr2", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.2", ")", "(", "curr2", ")", "\n", "\n", "curr_rho", "=", "Dense", "(", "1", ",", "activation", "=", "'relu'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay_rc", ")", ",", "trainable", "=", "True", ")", "(", "curr2", ")", "\n", "\n", "\n", "DEAN_output", "=", "concatenate", "(", "[", "curr_pred", ",", "curr_rho", "]", ")", "\n", "# auxiliary head (h)", "\n", "# auxiliary_output = Dense(2, activation='softmax', name=\"classification_head\")(curr_aux)", "\n", "\n", "self", ".", "model", "=", "Model", "(", "inputs", "=", "[", "inputa", "]", ",", "outputs", "=", "[", "DEAN_output", "]", ")", "\n", "\n", "return", "self", ".", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.models.RISAN_catdog_wa.CatDogVgg.normalize": [[166, 175], ["numpy.mean", "numpy.mean", "numpy.std", "numpy.std"], "methods", ["None"], ["", "def", "normalize", "(", "self", ",", "X_train", ",", "X_test", ")", ":", "\n", "# this function normalize inputs for zero mean and unit variance", "\n", "# it is used when training a model.", "\n", "\n", "        ", "mean", "=", "np", ".", "mean", "(", "X_train", ",", "axis", "=", "(", "0", ",", "1", ",", "2", ",", "3", ")", ")", "\n", "std", "=", "np", ".", "std", "(", "X_train", ",", "axis", "=", "(", "0", ",", "1", ",", "2", ",", "3", ")", ")", "\n", "X_train", "=", "(", "X_train", "-", "mean", ")", "/", "(", "std", "+", "1e-7", ")", "\n", "X_test", "=", "(", "X_test", "-", "mean", ")", "/", "(", "std", "+", "1e-7", ")", "\n", "return", "X_train", ",", "X_test", "\n", "\n"]], "home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.models.RISAN_catdog_wa.CatDogVgg._load_data": [[176, 192], ["load_cats_vs_dogs", "x_train.astype.astype.astype", "x_test.astype.astype.astype", "RISAN_catdog_wa.CatDogVgg.normalize", "numpy.random.seed", "numpy.random.seed", "numpy.random.randint", "numpy.random.randint", "keras.utils.to_categorical", "keras.utils.to_categorical", "len", "int", "len"], "methods", ["home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.RISAN-Code.RISAN_utils.load_cats_vs_dogs", "home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.models.RISAN_CIFAR.CIFARVgg.normalize"], ["", "def", "_load_data", "(", "self", ")", ":", "\n", "\n", "# The data, shuffled and split between train and test sets:", "\n", "        ", "(", "x_train", ",", "y_train", ")", ",", "(", "x_test", ",", "y_test", ")", "=", "load_cats_vs_dogs", "(", ")", "\n", "x_train", "=", "x_train", ".", "astype", "(", "'float32'", ")", "\n", "x_test", "=", "x_test", ".", "astype", "(", "'float32'", ")", "\n", "self", ".", "x_train", ",", "self", ".", "x_test", "=", "self", ".", "normalize", "(", "x_train", ",", "x_test", ")", "\n", "np", ".", "random", ".", "seed", "(", "1", ")", "\n", "x", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "y_train", ")", ",", "int", "(", "self", ".", "noise", "*", "len", "(", "y_train", ")", ")", ")", "\n", "for", "ind", "in", "x", ":", "\n", "             ", "if", "y_train", "[", "ind", "]", "==", "0", ":", "\n", "                  ", "y_train", "[", "ind", "]", "=", "1", "\n", "", "elif", "y_train", "[", "ind", "]", "==", "1", ":", "\n", "                  ", "y_train", "[", "ind", "]", "=", "0", "\n", "", "", "self", ".", "y_train", "=", "keras", ".", "utils", ".", "to_categorical", "(", "y_train", ",", "self", ".", "num_classes", ")", "\n", "self", ".", "y_test", "=", "keras", ".", "utils", ".", "to_categorical", "(", "y_test", ",", "self", ".", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.models.RISAN_catdog_wa.CatDogVgg.train": [[193, 276], ["keras.callbacks.ReduceLROnPlateau", "keras.preprocessing.image.ImageDataGenerator", "keras.preprocessing.image.ImageDataGenerator.fit", "keras.optimizers.SGD", "model.compile", "model.fit_generator", "tensorflow.where", "keras.backend.cast", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.cast", "tensorflow.cast", "tensorflow.where", "tensorflow.cast", "tensorflow.where", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.cast", "keras.backend.cast", "tensorflow.reduce_sum", "tensorflow.cast", "tensorflow.cast", "tensorflow.where", "tensorflow.cast", "tensorflow.where", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.cast", "my_generator", "keras.backend.floatx", "tensorflow.cast", "tensorflow.cast", "tensorflow.math.logical_or", "tensorflow.multiply", "tensorflow.math.greater", "tensorflow.less_equal", "tensorflow.cast", "tensorflow.cast", "keras.backend.floatx", "tensorflow.cast", "tensorflow.math.logical_or", "tensorflow.multiply", "tensorflow.math.greater", "tensorflow.less_equal", "tensorflow.cast", "tensorflow.cast", "tensorflow.math.sigmoid", "tensorflow.math.sigmoid", "tensorflow.math.logical_or", "tensorflow.math.logical_or", "tensorflow.math.greater", "tensorflow.math.less", "tensorflow.reshape", "tensorflow.equal", "tensorflow.equal", "tensorflow.math.logical_or", "tensorflow.math.greater", "tensorflow.math.less", "tensorflow.reshape", "tensorflow.equal", "tensorflow.equal", "tensorflow.math.greater", "tensorflow.math.less_equal", "tensorflow.math.greater", "tensorflow.math.less", "tensorflow.math.greater", "tensorflow.math.less_equal"], "methods", ["home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.RISAN-Code.RISAN_utils.my_generator"], ["", "def", "train", "(", "self", ",", "model", ")", ":", "\n", "        ", "def", "double_sigmoid_loss", "(", "y_true", ",", "y_pred", ")", ":", "\n", "\n", "            ", "y_true", "=", "y_true", "[", ":", ",", "1", "]", "\n", "y_true", "=", "tf", ".", "where", "(", "y_true", "<", "1.0", ",", "-", "1.0", ",", "y_true", ")", "\n", "loss", "=", "2", "*", "self", ".", "d", "*", "tf", ".", "math", ".", "sigmoid", "(", "-", "self", ".", "gamma", "*", "(", "y_pred", "[", ":", ",", "0", "]", "*", "y_true", "-", "y_pred", "[", ":", ",", "1", "]", ")", ")", "+", "2", "*", "(", "1", "-", "self", ".", "d", ")", "*", "tf", ".", "math", ".", "sigmoid", "(", "-", "self", ".", "gamma", "*", "(", "y_true", "*", "y_pred", "[", ":", ",", "0", "]", "+", "y_pred", "[", ":", ",", "1", "]", ")", ")", "\n", "\n", "return", "loss", "\n", "", "def", "double_sigmoid_accuracy", "(", "y_true", ",", "y_pred", ")", ":", "\n", "            ", "y_pred", "=", "K", ".", "cast", "(", "y_pred", ",", "K", ".", "floatx", "(", ")", ")", "\n", "tn0", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "tf", ".", "math", ".", "logical_or", "(", "tf", ".", "math", ".", "greater", "(", "y_pred", "[", ":", ",", "0", "]", ",", "y_pred", "[", ":", ",", "1", "]", ")", ",", "tf", ".", "math", ".", "less_equal", "(", "y_pred", "[", ":", ",", "0", "]", ",", "y_pred", "[", ":", ",", "1", "]", ")", ")", ",", "tf", ".", "float32", ")", ")", "\n", "tot", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "tf", ".", "math", ".", "logical_or", "(", "tf", ".", "math", ".", "greater", "(", "y_pred", "[", ":", ",", "0", "]", ",", "y_pred", "[", ":", ",", "1", "]", ")", ",", "tf", ".", "math", ".", "less", "(", "y_pred", "[", ":", ",", "0", "]", ",", "-", "y_pred", "[", ":", ",", "1", "]", ")", ")", ",", "tf", ".", "float32", ")", ")", "\n", "tn1", "=", "tf", ".", "cast", "(", "tf", ".", "math", ".", "logical_or", "(", "tf", ".", "math", ".", "greater", "(", "y_pred", "[", ":", ",", "0", "]", ",", "y_pred", "[", ":", ",", "1", "]", ")", ",", "tf", ".", "math", ".", "less", "(", "y_pred", "[", ":", ",", "0", "]", ",", "-", "y_pred", "[", ":", ",", "1", "]", ")", ")", ",", "tf", ".", "float32", ")", "\n", "r1", "=", "tf", ".", "cast", "(", "tf", ".", "multiply", "(", "y_pred", ",", "tf", ".", "reshape", "(", "tn1", ",", "(", "-", "1", ",", "1", ")", ")", ")", ",", "tf", ".", "float32", ")", "\n", "r2", "=", "tf", ".", "where", "(", "tn1", "<", "1.0", ",", "-", "1.0", ",", "tn1", ")", "\n", "r3", "=", "tf", ".", "cast", "(", "tf", ".", "math", ".", "greater", "(", "r1", "[", ":", ",", "0", "]", ",", "r1", "[", ":", ",", "1", "]", ")", ",", "tf", ".", "float32", ")", "\n", "r4", "=", "tf", ".", "where", "(", "tf", ".", "less_equal", "(", "r2", ",", "r3", ")", ",", "r2", ",", "r3", ")", "\n", "r5", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "tf", ".", "equal", "(", "r4", ",", "y_true", "[", ":", ",", "1", "]", ")", ",", "tf", ".", "float32", ")", ")", "\n", "r6", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "tf", ".", "equal", "(", "r4", ",", "-", "1.0", ")", ",", "tf", ".", "float32", ")", ")", "\n", "\n", "acc", "=", "r5", "*", "(", "tn0", "-", "r6", ")", "**", "-", "1", "\n", "return", "tf", ".", "cast", "(", "acc", ",", "tf", ".", "float32", ")", "\n", "", "def", "rho_acc", "(", "y_true", ",", "y_pred", ")", ":", "\n", "            ", "y_pred", "=", "K", ".", "cast", "(", "y_pred", ",", "K", ".", "floatx", "(", ")", ")", "\n", "tn0", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "tf", ".", "math", ".", "logical_or", "(", "tf", ".", "math", ".", "greater", "(", "y_pred", "[", ":", ",", "0", "]", ",", "y_pred", "[", ":", ",", "1", "]", ")", ",", "tf", ".", "math", ".", "less_equal", "(", "y_pred", "[", ":", ",", "0", "]", ",", "y_pred", "[", ":", ",", "1", "]", ")", ")", ",", "tf", ".", "float32", ")", ")", "\n", "tn1", "=", "tf", ".", "cast", "(", "tf", ".", "math", ".", "logical_or", "(", "tf", ".", "math", ".", "greater", "(", "y_pred", "[", ":", ",", "0", "]", ",", "y_pred", "[", ":", ",", "1", "]", ")", ",", "tf", ".", "math", ".", "less", "(", "y_pred", "[", ":", ",", "0", "]", ",", "-", "y_pred", "[", ":", ",", "1", "]", ")", ")", ",", "tf", ".", "float32", ")", "\n", "r1", "=", "tf", ".", "cast", "(", "tf", ".", "multiply", "(", "y_pred", ",", "tf", ".", "reshape", "(", "tn1", ",", "(", "-", "1", ",", "1", ")", ")", ")", ",", "tf", ".", "float32", ")", "\n", "r2", "=", "tf", ".", "where", "(", "tn1", "<", "1.0", ",", "-", "1.0", ",", "tn1", ")", "\n", "r3", "=", "tf", ".", "cast", "(", "tf", ".", "math", ".", "greater", "(", "r1", "[", ":", ",", "0", "]", ",", "r1", "[", ":", ",", "1", "]", ")", ",", "tf", ".", "float32", ")", "\n", "r4", "=", "tf", ".", "where", "(", "tf", ".", "less_equal", "(", "r2", ",", "r3", ")", ",", "r2", ",", "r3", ")", "\n", "r5", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "tf", ".", "equal", "(", "r4", ",", "y_true", "[", ":", ",", "1", "]", ")", ",", "tf", ".", "float32", ")", ")", "\n", "r6", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "tf", ".", "equal", "(", "r4", ",", "-", "1.0", ")", ",", "tf", ".", "float32", ")", ")", "\n", "\n", "acc", "=", "r6", "/", "tn0", "\n", "\n", "return", "tf", ".", "cast", "(", "acc", ",", "tf", ".", "float32", ")", "\n", "\n", "# training parameters", "\n", "", "batch_size", "=", "128", "# Size of the batch", "\n", "maxepoches", "=", "self", ".", "maxepochs", "# number of epochs", "\n", "learning_rate", "=", "1e-1", "# initial learning rate", "\n", "\n", "lr_decay", "=", "1e-6", "\n", "\n", "lr_drop", "=", "25", "\n", "\n", "def", "lr_scheduler", "(", "epoch", ")", ":", "\n", "            ", "return", "learning_rate", "*", "(", "0.5", "**", "(", "epoch", "//", "lr_drop", ")", ")", "\n", "\n", "# reduce_lr = keras.callbacks.LearningRateScheduler(lr_scheduler)", "\n", "", "reduce_lr", "=", "keras", ".", "callbacks", ".", "ReduceLROnPlateau", "(", "monitor", "=", "'val_concatenate_1_loss'", ",", "factor", "=", "0.5", ",", "patience", "=", "20", ",", "min_lr", "=", "0.00001", ",", "min_delta", "=", "0.0001", ",", "verbose", "=", "1", ")", "\n", "# es = keras.callbacks.EarlyStopping(monitor='val_loss',mode='min',patience=25,min_delta=0.001)", "\n", "# data augmentation", "\n", "datagen", "=", "ImageDataGenerator", "(", "\n", "featurewise_center", "=", "False", ",", "# set input mean to 0 over the dataset", "\n", "zca_whitening", "=", "False", ",", "# apply ZCA whitening", "\n", "rotation_range", "=", "15", ",", "# randomly rotate images in the range (degrees, 0 to 180)", "\n", "width_shift_range", "=", "0.1", ",", "# randomly shift images horizontally (fraction of total width)", "\n", "height_shift_range", "=", "0.1", ",", "# randomly shift images vertically (fraction of total height)", "\n", "horizontal_flip", "=", "True", ",", "# randomly flip images", "\n", "vertical_flip", "=", "False", ",", "\n", "samplewise_center", "=", "False", ",", "# set each sample mean to 0", "\n", "featurewise_std_normalization", "=", "False", ",", "# divide inputs by std of the dataset", "\n", "samplewise_std_normalization", "=", "False", ",", "# divide each input by its std", "\n", ")", "# randomly flip images", "\n", "# (std, mean, and principal components if ZCA whitening is applied).", "\n", "datagen", ".", "fit", "(", "self", ".", "x_train", ")", "\n", "ep", "=", "1e-07", "\n", "# optimization details", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "learning_rate", ",", "decay", "=", "lr_decay", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "# adam = optimizers.Adam(lr=learning_rate,epsilon=ep)", "\n", "# model.compile(loss=[double_sigmoid_loss,'categorical_crossentropy'],loss_weights=[self.alpha,1-self.alpha],", "\n", "#               optimizer=sgd, metrics=['accuracy', double_sigmoid_accuracy,rho_acc])", "\n", "model", ".", "compile", "(", "loss", "=", "[", "double_sigmoid_loss", "]", ",", "\n", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "double_sigmoid_accuracy", ",", "rho_acc", "]", ")", "\n", "historytemp", "=", "model", ".", "fit_generator", "(", "my_generator", "(", "datagen", ".", "flow", ",", "self", ".", "x_train", ",", "self", ".", "y_train", ",", "batch_size", ",", "2", ")", ",", "use_multiprocessing", "=", "False", ",", "\n", "steps_per_epoch", "=", "self", ".", "x_train", ".", "shape", "[", "0", "]", "//", "batch_size", ",", "\n", "epochs", "=", "maxepoches", ",", "callbacks", "=", "[", "reduce_lr", "]", ",", "\n", "initial_epoch", "=", "0", ",", "\n", "validation_data", "=", "(", "[", "self", ".", "x_test", "]", ",", "[", "self", ".", "y_test", "]", ")", ")", "\n", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.models.RISAN_CIFAR.CIFARVgg.__init__": [[25, 45], ["RISAN_CIFAR.CIFARVgg._load_data", "RISAN_CIFAR.CIFARVgg.build_model", "RISAN_CIFAR.CIFARVgg.train", "RISAN_CIFAR.CIFARVgg.model.load_weights"], "methods", ["home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.models.RISAN_CIFAR.CIFARVgg._load_data", "home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.models.RISAN_CIFAR.CIFARVgg.build_model", "home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.models.RISAN_CIFAR.CIFARVgg.train"], ["    ", "def", "__init__", "(", "self", ",", "train", "=", "True", ",", "filename", "=", "\"weightsvggnt.h5\"", ",", "alpha", "=", "0.7", ",", "gamma", "=", "1e-3", ",", "maxepochs", "=", "250", ",", "cost_rej", "=", "0.5", ",", "noise_frac", "=", "0.0", ")", ":", "\n", "        ", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "num_classes", "=", "2", "\n", "self", ".", "weight_decay", "=", "1e-4", "\n", "self", ".", "weight_decay_fc", "=", "1e-7", "\n", "self", ".", "weight_decay_rc", "=", "1e-7", "\n", "self", ".", "noise", "=", "noise_frac", "\n", "self", ".", "_load_data", "(", ")", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "d", "=", "cost_rej", "\n", "self", ".", "x_shape", "=", "self", ".", "x_train", ".", "shape", "[", "1", ":", "]", "\n", "self", ".", "filename", "=", "filename", "\n", "self", ".", "maxepochs", "=", "maxepochs", "\n", "\n", "self", ".", "model", "=", "self", ".", "build_model", "(", ")", "\n", "\n", "if", "train", ":", "\n", "            ", "self", ".", "model", "=", "self", ".", "train", "(", "self", ".", "model", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", ".", "load_weights", "(", "\"history_checkpoints/{}\"", ".", "format", "(", "self", ".", "filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.models.RISAN_CIFAR.CIFARVgg.build_model": [[46, 166], ["keras.layers.Input", "keras.layers.concatenate", "keras.models.Model", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.MaxPooling2D", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.MaxPooling2D", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.MaxPooling2D", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.MaxPooling2D", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Conv2D", "keras.layers.BatchNormalization", "keras.layers.MaxPooling2D", "keras.layers.Dropout", "keras.layers.Flatten", "keras.layers.Dense", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Dense", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Dense", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Dense", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Dense", "keras.layers.BatchNormalization", "keras.layers.Dropout", "keras.layers.Dense", "keras.layers.Dense", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2", "keras.regularizers.l2"], "methods", ["None"], ["", "", "def", "build_model", "(", "self", ")", ":", "\n", "# Build the network of vgg for 10 classes with massive dropout and weight decay as described in the paper.", "\n", "        ", "acti", "=", "'relu'", "\n", "# weight_decay = self.weight_decay", "\n", "weight_decay", "=", "self", ".", "weight_decay", "\n", "weight_decay_fc", "=", "self", ".", "weight_decay_fc", "\n", "weight_decay_rc", "=", "self", ".", "weight_decay_rc", "\n", "basic_dropout_rate", "=", "0.3", "\n", "inputa", "=", "Input", "(", "shape", "=", "self", ".", "x_shape", ")", "\n", "curr", "=", "Conv2D", "(", "64", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ",", "activation", "=", "acti", ",", "name", "=", "'block1_conv1'", ",", "trainable", "=", "True", ")", "(", "inputa", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "Dropout", "(", "basic_dropout_rate", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Conv2D", "(", "64", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ",", "activation", "=", "acti", ",", "name", "=", "'block1_conv2'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "'block1_pool'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Conv2D", "(", "128", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ",", "activation", "=", "acti", ",", "name", "=", "'block2_conv1'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.1", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Conv2D", "(", "128", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ",", "activation", "=", "acti", ",", "name", "=", "'block2_conv2'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "'block2_pool'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Conv2D", "(", "256", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ",", "activation", "=", "acti", ",", "name", "=", "'block3_conv1'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.1", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Conv2D", "(", "256", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ",", "activation", "=", "acti", ",", "name", "=", "'block3_conv2'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.1", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Conv2D", "(", "256", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ",", "activation", "=", "acti", ",", "name", "=", "'block3_conv3'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "'block3_pool'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Conv2D", "(", "512", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ",", "activation", "=", "acti", ",", "name", "=", "'block4_conv1'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.1", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Conv2D", "(", "512", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ",", "activation", "=", "acti", ",", "name", "=", "'block4_conv2'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.1", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Conv2D", "(", "512", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ",", "activation", "=", "acti", ",", "name", "=", "'block4_conv3'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "'block4_pool'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Conv2D", "(", "512", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ",", "activation", "=", "acti", ",", "name", "=", "'block5_conv1'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.1", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Conv2D", "(", "512", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ",", "activation", "=", "acti", ",", "name", "=", "'block5_conv2'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.1", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Conv2D", "(", "512", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay", ")", ",", "activation", "=", "acti", ",", "name", "=", "'block5_conv3'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "'block5_pool'", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "curr", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.2", ")", "(", "curr", ")", "\n", "\n", "curr_all", "=", "Flatten", "(", ")", "(", "curr", ")", "\n", "curr", "=", "Dense", "(", "512", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay_fc", ")", ",", "activation", "=", "acti", ",", "trainable", "=", "True", ")", "(", "curr_all", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "# curr_a = Dropout(basic_dropout_rate + 0.3)(curr)", "\n", "curr", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.2", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Dense", "(", "256", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay_fc", ")", ",", "activation", "=", "acti", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.2", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "Dense", "(", "128", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay_fc", ")", ",", "activation", "=", "acti", ",", "trainable", "=", "True", ")", "(", "curr", ")", "\n", "\n", "curr", "=", "BatchNormalization", "(", ")", "(", "curr", ")", "\n", "curr_aux", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.2", ")", "(", "curr", ")", "\n", "\n", "# prediction head (f)", "\n", "curr_pred", "=", "Dense", "(", "1", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay_fc", ")", ")", "(", "curr_aux", ")", "\n", "\n", "curr2", "=", "Dense", "(", "512", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay_rc", ")", ",", "activation", "=", "acti", ",", "trainable", "=", "True", ")", "(", "curr_all", ")", "\n", "\n", "curr2", "=", "BatchNormalization", "(", ")", "(", "curr2", ")", "\n", "curr2", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.2", ")", "(", "curr2", ")", "\n", "\n", "curr2", "=", "Dense", "(", "256", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay_rc", ")", ",", "activation", "=", "acti", ",", "trainable", "=", "True", ")", "(", "curr2", ")", "\n", "\n", "curr2", "=", "BatchNormalization", "(", ")", "(", "curr2", ")", "\n", "curr2", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.2", ")", "(", "curr2", ")", "\n", "\n", "curr2", "=", "Dense", "(", "64", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay_rc", ")", ",", "activation", "=", "acti", ",", "trainable", "=", "True", ")", "(", "curr2", ")", "\n", "\n", "curr2", "=", "BatchNormalization", "(", ")", "(", "curr2", ")", "\n", "curr2", "=", "Dropout", "(", "basic_dropout_rate", "+", "0.2", ")", "(", "curr2", ")", "\n", "\n", "curr_rho", "=", "Dense", "(", "1", ",", "activation", "=", "'relu'", ",", "kernel_regularizer", "=", "regularizers", ".", "l2", "(", "weight_decay_rc", ")", ",", "trainable", "=", "True", ")", "(", "curr2", ")", "\n", "\n", "\n", "DEAN_output", "=", "concatenate", "(", "[", "curr_pred", ",", "curr_rho", "]", ")", "\n", "# auxiliary head (h)", "\n", "auxiliary_output", "=", "Dense", "(", "2", ",", "activation", "=", "'softmax'", ",", "name", "=", "\"classification_head\"", ")", "(", "curr_aux", ")", "\n", "\n", "self", ".", "model", "=", "Model", "(", "inputs", "=", "[", "inputa", "]", ",", "outputs", "=", "[", "DEAN_output", ",", "auxiliary_output", "]", ")", "\n", "\n", "return", "self", ".", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.models.RISAN_CIFAR.CIFARVgg.normalize": [[167, 176], ["numpy.mean", "numpy.mean", "numpy.std", "numpy.std"], "methods", ["None"], ["", "def", "normalize", "(", "self", ",", "X_train", ",", "X_test", ")", ":", "\n", "# this function normalize inputs for zero mean and unit variance", "\n", "# it is used when training a model.", "\n", "\n", "        ", "mean", "=", "np", ".", "mean", "(", "X_train", ",", "axis", "=", "(", "0", ",", "1", ",", "2", ",", "3", ")", ")", "\n", "std", "=", "np", ".", "std", "(", "X_train", ",", "axis", "=", "(", "0", ",", "1", ",", "2", ",", "3", ")", ")", "\n", "X_train", "=", "(", "X_train", "-", "mean", ")", "/", "(", "std", "+", "1e-7", ")", "\n", "X_test", "=", "(", "X_test", "-", "mean", ")", "/", "(", "std", "+", "1e-7", ")", "\n", "return", "X_train", ",", "X_test", "\n", "\n"]], "home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.models.RISAN_CIFAR.CIFARVgg.binary_cifar": [[177, 193], ["zip", "numpy.asarray().reshape", "numpy.asarray().reshape", "numpy.asarray", "numpy.asarray", "x_train_n.append", "y_train_n.append", "numpy.asarray", "numpy.asarray", "len", "x_train_n.append", "y_train_n.append"], "methods", ["None"], ["", "def", "binary_cifar", "(", "self", ",", "x_train", ",", "y_train", ")", ":", "\n", "# Select samples corresponding to class \"Automobile\" and \"Trucks\"", "\n", "        ", "x_train_n", "=", "[", "]", "\n", "y_train_n", "=", "[", "]", "\n", "for", "a", ",", "b", "in", "zip", "(", "x_train", ",", "y_train", ")", ":", "\n", "            ", "if", "b", "==", "9", ":", "\n", "                ", "x_train_n", ".", "append", "(", "a", ")", "\n", "y_train_n", ".", "append", "(", "0", ")", "\n", "", "elif", "b", "==", "1", ":", "\n", "                ", "x_train_n", ".", "append", "(", "a", ")", "\n", "y_train_n", ".", "append", "(", "1", ")", "\n", "\n", "", "", "y_train", "=", "np", ".", "asarray", "(", "y_train_n", ")", ".", "reshape", "(", "(", "len", "(", "y_train_n", ")", ",", "1", ")", ")", "\n", "x_train", "=", "np", ".", "asarray", "(", "x_train_n", ")", "\n", "\n", "return", "x_train", ",", "y_train", "\n", "", "def", "_load_data", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.models.RISAN_CIFAR.CIFARVgg._load_data": [[193, 214], ["keras.datasets.cifar10.load_data", "RISAN_CIFAR.CIFARVgg.binary_cifar", "RISAN_CIFAR.CIFARVgg.binary_cifar", "x_train.astype.astype.astype", "x_test.astype.astype.astype", "RISAN_CIFAR.CIFARVgg.normalize", "numpy.random.seed", "numpy.random.seed", "numpy.random.randint", "numpy.random.randint", "keras.utils.to_categorical", "keras.utils.to_categorical", "len", "int", "len"], "methods", ["home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.models.RISAN_CIFAR.CIFARVgg.binary_cifar", "home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.models.RISAN_CIFAR.CIFARVgg.binary_cifar", "home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.models.RISAN_CIFAR.CIFARVgg.normalize"], ["", "def", "_load_data", "(", "self", ")", ":", "\n", "\n", "# The data, shuffled and split between train and test sets:", "\n", "\n", "        ", "(", "x_train", ",", "y_train", ")", ",", "(", "x_test", ",", "y_test", ")", "=", "cifar10", ".", "load_data", "(", ")", "\n", "\n", "(", "x_train", ",", "y_train", ")", "=", "self", ".", "binary_cifar", "(", "x_train", ",", "y_train", ")", "\n", "(", "x_test", ",", "y_test_label", ")", "=", "self", ".", "binary_cifar", "(", "x_test", ",", "y_test", ")", "\n", "x_train", "=", "x_train", ".", "astype", "(", "'float32'", ")", "\n", "x_test", "=", "x_test", ".", "astype", "(", "'float32'", ")", "\n", "\n", "self", ".", "x_train", ",", "self", ".", "x_test", "=", "self", ".", "normalize", "(", "x_train", ",", "x_test", ")", "\n", "np", ".", "random", ".", "seed", "(", "1", ")", "\n", "x", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "y_train", ")", ",", "int", "(", "self", ".", "noise", "*", "len", "(", "y_train", ")", ")", ")", "\n", "for", "ind", "in", "x", ":", "\n", "             ", "if", "y_train", "[", "ind", "]", "==", "0", ":", "\n", "                  ", "y_train", "[", "ind", "]", "=", "1", "\n", "", "elif", "y_train", "[", "ind", "]", "==", "1", ":", "\n", "                  ", "y_train", "[", "ind", "]", "=", "0", "\n", "", "", "self", ".", "y_train", "=", "keras", ".", "utils", ".", "to_categorical", "(", "y_train", ",", "self", ".", "num_classes", ")", "\n", "self", ".", "y_test", "=", "keras", ".", "utils", ".", "to_categorical", "(", "y_test_label", ",", "self", ".", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.models.RISAN_CIFAR.CIFARVgg.train": [[215, 309], ["keras.callbacks.ReduceLROnPlateau", "keras.preprocessing.image.ImageDataGenerator", "keras.preprocessing.image.ImageDataGenerator.fit", "keras.optimizers.SGD", "keras.optimizers.Adam", "model.compile", "model.fit_generator", "tensorflow.where", "keras.backend.cast", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.cast", "tensorflow.cast", "tensorflow.where", "tensorflow.cast", "tensorflow.where", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.cast", "keras.backend.cast", "tensorflow.reduce_sum", "tensorflow.cast", "tensorflow.cast", "tensorflow.where", "tensorflow.cast", "tensorflow.where", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.cast", "keras.backend.cast", "keras.backend.mean", "my_generator", "open", "pickle.dump", "keras.backend.floatx", "tensorflow.cast", "tensorflow.cast", "tensorflow.math.logical_or", "tensorflow.multiply", "tensorflow.math.greater", "tensorflow.less_equal", "tensorflow.cast", "tensorflow.cast", "keras.backend.floatx", "tensorflow.cast", "tensorflow.math.logical_or", "tensorflow.multiply", "tensorflow.math.greater", "tensorflow.less_equal", "tensorflow.cast", "tensorflow.cast", "keras.backend.greater", "keras.backend.floatx", "tensorflow.math.sigmoid", "tensorflow.math.sigmoid", "tensorflow.math.logical_or", "tensorflow.math.logical_or", "tensorflow.math.greater", "tensorflow.math.less", "tensorflow.reshape", "tensorflow.equal", "tensorflow.equal", "tensorflow.math.logical_or", "tensorflow.math.greater", "tensorflow.math.less", "tensorflow.reshape", "tensorflow.equal", "tensorflow.equal", "tensorflow.math.greater", "tensorflow.math.less_equal", "tensorflow.math.greater", "tensorflow.math.less", "tensorflow.math.greater", "tensorflow.math.less_equal"], "methods", ["home.repos.pwc.inspect_result.kalra20_RISAN-Robust-Instance-Specific-Abstain-Network.RISAN-Code.RISAN_utils.my_generator"], ["", "def", "train", "(", "self", ",", "model", ")", ":", "\n", "\n", "\n", "        ", "def", "double_sigmoid_loss", "(", "y_true", ",", "y_pred", ")", ":", "\n", "\n", "            ", "y_true", "=", "y_true", "[", ":", ",", "1", "]", "\n", "gamma", "=", "1e-3", "\n", "y_true", "=", "tf", ".", "where", "(", "y_true", "<", "1.0", ",", "-", "1.0", ",", "y_true", ")", "\n", "loss", "=", "2", "*", "self", ".", "d", "*", "tf", ".", "math", ".", "sigmoid", "(", "-", "self", ".", "gamma", "*", "(", "y_pred", "[", ":", ",", "0", "]", "*", "y_true", "-", "y_pred", "[", ":", ",", "1", "]", ")", ")", "+", "2", "*", "(", "1", "-", "self", ".", "d", ")", "*", "tf", ".", "math", ".", "sigmoid", "(", "-", "self", ".", "gamma", "*", "(", "y_true", "*", "y_pred", "[", ":", ",", "0", "]", "+", "y_pred", "[", ":", ",", "1", "]", ")", ")", "\n", "\n", "return", "loss", "\n", "\n", "", "def", "double_sigmoid_accuracy", "(", "y_true", ",", "y_pred", ")", ":", "\n", "            ", "y_pred", "=", "K", ".", "cast", "(", "y_pred", ",", "K", ".", "floatx", "(", ")", ")", "\n", "tn0", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "tf", ".", "math", ".", "logical_or", "(", "tf", ".", "math", ".", "greater", "(", "y_pred", "[", ":", ",", "0", "]", ",", "y_pred", "[", ":", ",", "1", "]", ")", ",", "tf", ".", "math", ".", "less_equal", "(", "y_pred", "[", ":", ",", "0", "]", ",", "y_pred", "[", ":", ",", "1", "]", ")", ")", ",", "tf", ".", "float32", ")", ")", "\n", "tot", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "tf", ".", "math", ".", "logical_or", "(", "tf", ".", "math", ".", "greater", "(", "y_pred", "[", ":", ",", "0", "]", ",", "y_pred", "[", ":", ",", "1", "]", ")", ",", "tf", ".", "math", ".", "less", "(", "y_pred", "[", ":", ",", "0", "]", ",", "-", "y_pred", "[", ":", ",", "1", "]", ")", ")", ",", "tf", ".", "float32", ")", ")", "\n", "tn1", "=", "tf", ".", "cast", "(", "tf", ".", "math", ".", "logical_or", "(", "tf", ".", "math", ".", "greater", "(", "y_pred", "[", ":", ",", "0", "]", ",", "y_pred", "[", ":", ",", "1", "]", ")", ",", "tf", ".", "math", ".", "less", "(", "y_pred", "[", ":", ",", "0", "]", ",", "-", "y_pred", "[", ":", ",", "1", "]", ")", ")", ",", "tf", ".", "float32", ")", "\n", "r1", "=", "tf", ".", "cast", "(", "tf", ".", "multiply", "(", "y_pred", ",", "tf", ".", "reshape", "(", "tn1", ",", "(", "-", "1", ",", "1", ")", ")", ")", ",", "tf", ".", "float32", ")", "\n", "r2", "=", "tf", ".", "where", "(", "tn1", "<", "1.0", ",", "-", "1.0", ",", "tn1", ")", "\n", "r3", "=", "tf", ".", "cast", "(", "tf", ".", "math", ".", "greater", "(", "r1", "[", ":", ",", "0", "]", ",", "r1", "[", ":", ",", "1", "]", ")", ",", "tf", ".", "float32", ")", "\n", "r4", "=", "tf", ".", "where", "(", "tf", ".", "less_equal", "(", "r2", ",", "r3", ")", ",", "r2", ",", "r3", ")", "\n", "r5", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "tf", ".", "equal", "(", "r4", ",", "y_true", "[", ":", ",", "1", "]", ")", ",", "tf", ".", "float32", ")", ")", "\n", "r6", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "tf", ".", "equal", "(", "r4", ",", "-", "1.0", ")", ",", "tf", ".", "float32", ")", ")", "\n", "\n", "acc", "=", "r5", "*", "(", "tn0", "-", "r6", ")", "**", "-", "1", "\n", "\n", "return", "tf", ".", "cast", "(", "acc", ",", "tf", ".", "float32", ")", "\n", "", "def", "rho_acc", "(", "y_true", ",", "y_pred", ")", ":", "\n", "            ", "y_pred", "=", "K", ".", "cast", "(", "y_pred", ",", "K", ".", "floatx", "(", ")", ")", "\n", "tn0", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "tf", ".", "math", ".", "logical_or", "(", "tf", ".", "math", ".", "greater", "(", "y_pred", "[", ":", ",", "0", "]", ",", "y_pred", "[", ":", ",", "1", "]", ")", ",", "tf", ".", "math", ".", "less_equal", "(", "y_pred", "[", ":", ",", "0", "]", ",", "y_pred", "[", ":", ",", "1", "]", ")", ")", ",", "tf", ".", "float32", ")", ")", "\n", "tn1", "=", "tf", ".", "cast", "(", "tf", ".", "math", ".", "logical_or", "(", "tf", ".", "math", ".", "greater", "(", "y_pred", "[", ":", ",", "0", "]", ",", "y_pred", "[", ":", ",", "1", "]", ")", ",", "tf", ".", "math", ".", "less", "(", "y_pred", "[", ":", ",", "0", "]", ",", "-", "y_pred", "[", ":", ",", "1", "]", ")", ")", ",", "tf", ".", "float32", ")", "\n", "r1", "=", "tf", ".", "cast", "(", "tf", ".", "multiply", "(", "y_pred", ",", "tf", ".", "reshape", "(", "tn1", ",", "(", "-", "1", ",", "1", ")", ")", ")", ",", "tf", ".", "float32", ")", "\n", "r2", "=", "tf", ".", "where", "(", "tn1", "<", "1.0", ",", "-", "1.0", ",", "tn1", ")", "\n", "r3", "=", "tf", ".", "cast", "(", "tf", ".", "math", ".", "greater", "(", "r1", "[", ":", ",", "0", "]", ",", "r1", "[", ":", ",", "1", "]", ")", ",", "tf", ".", "float32", ")", "\n", "r4", "=", "tf", ".", "where", "(", "tf", ".", "less_equal", "(", "r2", ",", "r3", ")", ",", "r2", ",", "r3", ")", "\n", "r5", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "tf", ".", "equal", "(", "r4", ",", "y_true", "[", ":", ",", "1", "]", ")", ",", "tf", ".", "float32", ")", ")", "\n", "r6", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "tf", ".", "equal", "(", "r4", ",", "-", "1.0", ")", ",", "tf", ".", "float32", ")", ")", "\n", "\n", "acc", "=", "r6", "/", "tn0", "\n", "return", "tf", ".", "cast", "(", "acc", ",", "tf", ".", "float32", ")", "\n", "\n", "", "def", "coverage", "(", "y_true", ",", "y_pred", ")", ":", "\n", "            ", "g", "=", "K", ".", "cast", "(", "K", ".", "greater", "(", "y_pred", "[", ":", ",", "-", "1", "]", ",", "0.5", ")", ",", "K", ".", "floatx", "(", ")", ")", "\n", "return", "K", ".", "mean", "(", "g", ")", "\n", "\n", "# training parameters", "\n", "", "batch_size", "=", "64", "\n", "maxepoches", "=", "self", ".", "maxepochs", "\n", "learning_rate", "=", "1e-1", "\n", "\n", "lr_decay", "=", "1e-6", "\n", "\n", "lr_drop", "=", "25", "\n", "\n", "def", "lr_scheduler", "(", "epoch", ")", ":", "\n", "            ", "return", "learning_rate", "*", "(", "0.5", "**", "(", "epoch", "//", "lr_drop", ")", ")", "\n", "\n", "#reduce_lr = keras.callbacks.LearningRateScheduler(lr_scheduler)", "\n", "# reduce_lr = keras.callbacks.ReduceLROnPlateau(monitor='val_loss',factor=0.5,patience=20,min_lr=0.00001,min_delta=0.0001,verbose=1)", "\n", "# es = keras.callbacks.EarlyStopping(monitor='val_loss',mode='min',patience=25,min_delta=0.001)", "\n", "# data augmentation", "\n", "", "reduce_lr", "=", "keras", ".", "callbacks", ".", "ReduceLROnPlateau", "(", "monitor", "=", "'val_concatenate_1_loss'", ",", "factor", "=", "0.5", ",", "patience", "=", "20", ",", "min_lr", "=", "0.00001", ",", "min_delta", "=", "0.0001", ",", "verbose", "=", "1", ")", "\n", "datagen", "=", "ImageDataGenerator", "(", "\n", "featurewise_center", "=", "False", ",", "# set input mean to 0 over the dataset", "\n", "samplewise_center", "=", "False", ",", "# set each sample mean to 0", "\n", "featurewise_std_normalization", "=", "False", ",", "# divide inputs by std of the dataset", "\n", "samplewise_std_normalization", "=", "False", ",", "# divide each input by its std", "\n", "zca_whitening", "=", "False", ",", "# apply ZCA whitening", "\n", "rotation_range", "=", "15", ",", "# randomly rotate images in the range (degrees, 0 to 180)", "\n", "width_shift_range", "=", "0.1", ",", "# randomly shift images horizontally (fraction of total width)", "\n", "height_shift_range", "=", "0.1", ",", "# randomly shift images vertically (fraction of total height)", "\n", "horizontal_flip", "=", "True", ",", "# randomly flip images", "\n", "vertical_flip", "=", "False", ")", "# randomly flip images", "\n", "# (std, mean, and principal components if ZCA whitening is applied).", "\n", "datagen", ".", "fit", "(", "self", ".", "x_train", ")", "\n", "ep", "=", "1e-07", "\n", "# optimization details", "\n", "sgd", "=", "optimizers", ".", "SGD", "(", "lr", "=", "learning_rate", ",", "decay", "=", "lr_decay", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "adam", "=", "optimizers", ".", "Adam", "(", "lr", "=", "learning_rate", ",", "epsilon", "=", "ep", ")", "\n", "model", ".", "compile", "(", "loss", "=", "[", "double_sigmoid_loss", ",", "'categorical_crossentropy'", "]", ",", "loss_weights", "=", "[", "self", ".", "alpha", ",", "1", "-", "self", ".", "alpha", "]", ",", "\n", "optimizer", "=", "sgd", ",", "metrics", "=", "[", "'accuracy'", ",", "double_sigmoid_accuracy", ",", "rho_acc", "]", ")", "\n", "\n", "historytemp", "=", "model", ".", "fit_generator", "(", "my_generator", "(", "datagen", ".", "flow", ",", "self", ".", "x_train", ",", "self", ".", "y_train", ",", "batch_size", ",", "2", ")", ",", "\n", "steps_per_epoch", "=", "self", ".", "x_train", ".", "shape", "[", "0", "]", "//", "batch_size", ",", "\n", "epochs", "=", "maxepoches", ",", "callbacks", "=", "[", "reduce_lr", "]", ",", "\n", "initial_epoch", "=", "0", ",", "\n", "validation_data", "=", "(", "[", "self", ".", "x_test", "]", ",", "[", "self", ".", "y_test", ",", "self", ".", "y_test", "]", ")", ")", "\n", "\n", "with", "open", "(", "\"history_checkpoints/{}_history.pkl\"", ".", "format", "(", "self", ".", "filename", "[", ":", "-", "3", "]", ")", ",", "'wb'", ")", "as", "handle", ":", "\n", "            ", "pickle", ".", "dump", "(", "historytemp", ".", "history", ",", "handle", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "# model.save_weights(\"history_checkpoints/{}\".format(self.filename))", "\n", "\n", "", "return", "model", "\n", "\n"]]}