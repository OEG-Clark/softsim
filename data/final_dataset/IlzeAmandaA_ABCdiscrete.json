{"home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.main_usecase.Testbed.__init__": [[6, 8], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "D", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.main_usecase.Testbed.bern": [[9, 11], ["numpy.random.binomial"], "methods", ["None"], ["", "def", "bern", "(", "self", ",", "D1", ",", "D2", ",", "p", "=", "0.5", ")", ":", "\n", "        ", "return", "np", ".", "random", ".", "binomial", "(", "1", ",", "p", ",", "(", "D1", ",", "D2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.main_usecase.Testbed.initialize": [[12, 16], ["main_usecase.Testbed.bern", "sys.exit"], "methods", ["home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.main_usecase.Testbed.bern"], ["", "def", "initialize", "(", "self", ",", "N", ")", ":", "\n", "        ", "if", "self", ".", "D", "==", "None", ":", "\n", "            ", "sys", ".", "exit", "(", "'Dimensions of the testbed are not specified'", ")", "\n", "", "return", "self", ".", "bern", "(", "N", ",", "self", ".", "D", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.main_usecase.Testbed.simulate": [[17, 19], ["None"], "methods", ["None"], ["", "def", "simulate", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.main_usecase.Testbed.distance": [[20, 22], ["None"], "methods", ["None"], ["", "def", "distance", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.main_usecase.Testbed.prior": [[23, 25], ["None"], "methods", ["None"], ["", "def", "prior", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "pass", "", "", "", ""]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.nas.NAS.__init__": [[14, 24], ["testbeds.main_usecase.Testbed.__init__", "nasbench.api.NASBench"], "methods", ["home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.kernels.proposals.Proposals.__init__"], ["    ", "def", "__init__", "(", "self", ",", "path", ")", ":", "\n", "        ", "super", "(", "NAS", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "PATH", "=", "path", "\n", "self", ".", "OPS", "=", "[", "INPUT", ",", "CONV1X1", ",", "CONV3X3", ",", "CONV3X3", ",", "CONV3X3", ",", "MAXPOOL3X3", ",", "OUTPUT", "]", "\n", "\n", "self", ".", "nasbench", "=", "api", ".", "NASBench", "(", "PATH", ")", "\n", "self", ".", "size", "=", "7", "\n", "self", ".", "var_er", "=", "None", "\n", "self", ".", "D", "=", "21", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.nas.NAS.simulate": [[25, 52], ["nas.NAS.transform", "nasbench.api.ModelSpec", "nas.NAS.nasbench.is_valid", "nas.NAS.transform", "nasbench.api.ModelSpec", "nas.NAS.nasbench.is_valid", "print"], "methods", ["home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.mnist.MNIST.transform", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.mnist.MNIST.transform"], ["", "def", "simulate", "(", "self", ",", "w_orig", ",", "eval", "=", "False", ")", ":", "\n", "        ", "if", "eval", ":", "\n", "            ", "matrix", "=", "self", ".", "transform", "(", "w_orig", ")", "\n", "cell", "=", "api", ".", "ModelSpec", "(", "\n", "matrix", "=", "matrix", ",", "\n", "ops", "=", "self", ".", "OPS", "\n", ")", "\n", "\n", "if", "self", ".", "nasbench", ".", "is_valid", "(", "cell", ")", ":", "\n", "                ", "return", "cell", "\n", "", "else", ":", "\n", "                ", "print", "(", "'invalid cell'", ")", "\n", "return", "1", "\n", "\n", "", "", "else", ":", "\n", "            ", "matrix", "=", "self", ".", "transform", "(", "w_orig", ")", "\n", "# while True:", "\n", "cell", "=", "api", ".", "ModelSpec", "(", "\n", "matrix", "=", "matrix", ",", "\n", "ops", "=", "self", ".", "OPS", "\n", ")", "\n", "\n", "if", "self", ".", "nasbench", ".", "is_valid", "(", "cell", ")", ":", "\n", "                ", "return", "cell", "\n", "\n", "", "else", ":", "\n", "                ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.nas.NAS.transform": [[53, 71], ["w_orig.copy", "range", "numpy.zeros", "enumerate", "matrix.astype.astype.astype", "W_m.append"], "methods", ["None"], ["", "", "", "def", "transform", "(", "self", ",", "w_orig", ")", ":", "\n", "        ", "w", "=", "w_orig", ".", "copy", "(", ")", "\n", "\n", "# convert w_orig to matrix form", "\n", "W_m", "=", "[", "]", "\n", "a", "=", "0", "\n", "for", "x", "in", "range", "(", "self", ".", "size", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "            ", "W_m", ".", "append", "(", "w", "[", "a", ":", "(", "a", "+", "x", ")", "]", ")", "\n", "a", "=", "(", "a", "+", "x", ")", "\n", "\n", "# create a search matrix in line with the work", "\n", "", "matrix", "=", "np", ".", "zeros", "(", "(", "self", ".", "size", ",", "self", ".", "size", ")", ")", "\n", "for", "enu", ",", "row", "in", "enumerate", "(", "W_m", ")", ":", "\n", "            ", "matrix", "[", "enu", ",", "enu", "+", "1", ":", "]", "+=", "row", "\n", "\n", "", "matrix", "=", "matrix", ".", "astype", "(", "int", ")", "\n", "\n", "return", "matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.nas.NAS.extract": [[73, 79], ["enumerate", "numpy.hstack", "w_cor.append"], "methods", ["None"], ["", "def", "extract", "(", "self", ",", "matrix", ")", ":", "\n", "        ", "w_cor", "=", "[", "]", "\n", "for", "idx", ",", "row", "in", "enumerate", "(", "matrix", ")", ":", "\n", "            ", "if", "idx", "<", "matrix", ".", "shape", "[", "0", "]", "-", "1", ":", "\n", "                ", "w_cor", ".", "append", "(", "row", "[", "idx", "+", "1", ":", "]", ")", "\n", "", "", "return", "np", ".", "hstack", "(", "w_cor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.nas.NAS.distance": [[80, 89], ["nas.NAS.nasbench.query", "nas.NAS.nasbench.query"], "methods", ["None"], ["", "def", "distance", "(", "self", ",", "input", ",", "eval", "=", "False", ")", ":", "\n", "# convert to a minimization problem", "\n", "        ", "if", "input", "==", "1", ":", "\n", "            ", "return", "1", "\n", "", "else", ":", "\n", "            ", "if", "eval", ":", "\n", "                ", "return", "1", "-", "self", ".", "nasbench", ".", "query", "(", "input", ")", "[", "'test_accuracy'", "]", "\n", "", "else", ":", "\n", "                ", "return", "1", "-", "self", ".", "nasbench", ".", "query", "(", "input", ")", "[", "'validation_accuracy'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.nas.NAS.prior": [[90, 92], ["numpy.exp", "numpy.mean"], "methods", ["None"], ["", "", "", "def", "prior", "(", "self", ",", "theta", ")", ":", "\n", "        ", "return", "np", ".", "exp", "(", "-", "np", ".", "mean", "(", "theta", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.mnist.MNIST.__init__": [[25, 80], ["testbeds.main_usecase.Testbed.__init__", "mnist.MNIST.load", "numpy.sort", "len", "numpy.reshape", "numpy.zeros", "range", "numpy.reshape", "mnist.transform_polar", "print", "numpy.sort", "numpy.reshape", "numpy.zeros", "range", "numpy.reshape", "mnist.transform_polar", "print", "os.path.isfile", "mnist.MNIST.download_mnist", "mnist.MNIST.save_mnist", "numpy.where", "numpy.where", "numpy.concatenate", "skimage.transform.resize", "numpy.where", "numpy.where", "numpy.concatenate", "skimage.transform.resize", "os.path.exists", "os.makedirs", "len"], "methods", ["home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.kernels.proposals.Proposals.__init__", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.mnist.MNIST.load", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.mnist.transform_polar", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.mnist.transform_polar", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.mnist.MNIST.download_mnist", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.mnist.MNIST.save_mnist"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "l1", "=", "0", ",", "l2", "=", "1", ",", "H", "=", "20", ",", "name", "=", "'mnist'", ",", "image_size", "=", "(", "14", ",", "14", ")", ",", "batch_size", "=", "1000", ")", ":", "\n", "        ", "super", "(", "MNIST", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "image_size", "=", "image_size", "\n", "self", ".", "H", "=", "H", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "D", "=", "self", ".", "image_size", "[", "0", "]", "*", "self", ".", "image_size", "[", "1", "]", "*", "self", ".", "H", "+", "self", ".", "H", "*", "1", "\n", "\n", "PYTHONPATH", "=", "path", "\n", "\n", "if", "not", "(", "os", ".", "path", ".", "isfile", "(", "PYTHONPATH", "+", "'/data/'", "+", "'mnist.pkl'", ")", ")", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "PYTHONPATH", "+", "'/data'", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "PYTHONPATH", "+", "'/data'", ")", "\n", "\n", "", "self", ".", "download_mnist", "(", "location", "=", "PYTHONPATH", "+", "'/data/'", ")", "\n", "self", ".", "save_mnist", "(", "location", "=", "PYTHONPATH", "+", "'/data/'", ")", "\n", "\n", "", "x_train", ",", "y_train", ",", "x_test", ",", "y_test", "=", "self", ".", "load", "(", "location", "=", "PYTHONPATH", "+", "'/data/'", ")", "\n", "\n", "x_train", "=", "x_train", "/", "255.", "\n", "x_test", "=", "x_test", "/", "255.", "\n", "\n", "# TRAIN DATA", "\n", "idx_l1", "=", "np", ".", "where", "(", "y_train", "==", "l1", ")", "[", "0", "]", "\n", "idx_l2", "=", "np", ".", "where", "(", "y_train", "==", "l2", ")", "[", "0", "]", "\n", "idx", "=", "np", ".", "sort", "(", "np", ".", "concatenate", "(", "(", "idx_l1", ",", "idx_l2", ")", ",", "axis", "=", "None", ")", ")", "\n", "train_size", "=", "len", "(", "idx", ")", "\n", "\n", "x_train", "=", "np", ".", "reshape", "(", "x_train", "[", "idx", "]", ",", "(", "train_size", ",", "28", ",", "28", ")", ")", "\n", "self", ".", "x_train", "=", "np", ".", "zeros", "(", "(", "x_train", ".", "shape", "[", "0", "]", ",", "image_size", "[", "0", "]", ",", "image_size", "[", "1", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "x_train", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "self", ".", "x_train", "[", "i", "]", "=", "resize", "(", "x_train", "[", "i", "]", ",", "image_size", ",", "anti_aliasing", "=", "True", ")", "\n", "", "self", ".", "x_train", "=", "np", ".", "reshape", "(", "self", ".", "x_train", ",", "(", "train_size", ",", "image_size", "[", "0", "]", "*", "image_size", "[", "1", "]", ")", ")", "\n", "self", ".", "y_train", "=", "y_train", "[", "idx", "]", "# [0:train_size]", "\n", "assert", "self", ".", "x_train", ".", "shape", "[", "0", "]", "==", "self", ".", "y_train", ".", "shape", "[", "0", "]", ",", "'incorrect dim xtrain and ytrain'", "\n", "transform_polar", "(", "self", ".", "x_train", ")", "\n", "\n", "print", "(", "'Shape of train data {}'", ".", "format", "(", "self", ".", "x_train", ".", "shape", ")", ")", "\n", "\n", "\n", "# TEST DATA", "\n", "idx_l1", "=", "np", ".", "where", "(", "y_test", "==", "l1", ")", "[", "0", "]", "\n", "idx_l2", "=", "np", ".", "where", "(", "y_test", "==", "l2", ")", "[", "0", "]", "\n", "idx", "=", "np", ".", "sort", "(", "np", ".", "concatenate", "(", "(", "idx_l1", ",", "idx_l2", ")", ",", "axis", "=", "None", ")", ")", "\n", "\n", "x_test", "=", "np", ".", "reshape", "(", "x_test", "[", "idx", "]", ",", "(", "len", "(", "idx", ")", ",", "28", ",", "28", ")", ")", "\n", "self", ".", "x_test", "=", "np", ".", "zeros", "(", "(", "x_test", ".", "shape", "[", "0", "]", ",", "image_size", "[", "0", "]", ",", "image_size", "[", "1", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "x_test", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "self", ".", "x_test", "[", "i", "]", "=", "resize", "(", "x_test", "[", "i", "]", ",", "image_size", ",", "anti_aliasing", "=", "True", ")", "\n", "", "self", ".", "x_test", "=", "np", ".", "reshape", "(", "self", ".", "x_test", ",", "(", "self", ".", "x_test", ".", "shape", "[", "0", "]", ",", "image_size", "[", "0", "]", "*", "image_size", "[", "1", "]", ")", ")", "\n", "self", ".", "y_test", "=", "y_test", "[", "idx", "]", "\n", "assert", "self", ".", "x_test", ".", "shape", "[", "0", "]", "==", "self", ".", "y_test", ".", "shape", "[", "0", "]", ",", "'incorrect dim xtest and ytest'", "\n", "transform_polar", "(", "self", ".", "x_test", ")", "\n", "\n", "print", "(", "'Shape of test data {}'", ".", "format", "(", "self", ".", "x_test", ".", "shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.mnist.MNIST.download_mnist": [[83, 90], ["print", "print", "urllib.request.urlretrieve"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "download_mnist", "(", "location", ")", ":", "\n", "        ", "base_url", "=", "\"http://yann.lecun.com/exdb/mnist/\"", "\n", "for", "name", "in", "filename", ":", "\n", "            ", "print", "(", "\"Downloading \"", "+", "name", "[", "1", "]", "+", "\"...\"", ")", "\n", "request", ".", "urlretrieve", "(", "base_url", "+", "name", "[", "1", "]", ",", "location", "+", "name", "[", "1", "]", ")", "\n", "", "print", "(", "\"Download complete.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.mnist.MNIST.save_mnist": [[91, 103], ["print", "open", "pickle.dump", "gzip.open", "numpy.frombuffer().reshape", "gzip.open", "numpy.frombuffer", "f.read", "numpy.frombuffer", "f.read"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "save_mnist", "(", "location", ")", ":", "\n", "        ", "mnist", "=", "{", "}", "\n", "for", "name", "in", "filename", "[", ":", "2", "]", ":", "\n", "            ", "with", "gzip", ".", "open", "(", "location", "+", "name", "[", "1", "]", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "mnist", "[", "name", "[", "0", "]", "]", "=", "np", ".", "frombuffer", "(", "f", ".", "read", "(", ")", ",", "np", ".", "uint8", ",", "offset", "=", "16", ")", ".", "reshape", "(", "-", "1", ",", "28", "*", "28", ")", "\n", "", "", "for", "name", "in", "filename", "[", "-", "2", ":", "]", ":", "\n", "            ", "with", "gzip", ".", "open", "(", "location", "+", "name", "[", "1", "]", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "mnist", "[", "name", "[", "0", "]", "]", "=", "np", ".", "frombuffer", "(", "f", ".", "read", "(", ")", ",", "np", ".", "uint8", ",", "offset", "=", "8", ")", "\n", "", "", "with", "open", "(", "location", "+", "\"mnist.pkl\"", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "mnist", ",", "f", ")", "\n", "", "print", "(", "\"Save complete.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.mnist.MNIST.load": [[104, 109], ["open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.mnist.MNIST.load"], ["", "@", "staticmethod", "\n", "def", "load", "(", "location", ")", ":", "\n", "        ", "with", "open", "(", "location", "+", "\"mnist.pkl\"", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "mnist", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "return", "mnist", "[", "\"training_images\"", "]", ",", "mnist", "[", "\"training_labels\"", "]", ",", "mnist", "[", "\"test_images\"", "]", ",", "mnist", "[", "\"test_labels\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.mnist.MNIST.transform": [[110, 115], ["None"], "methods", ["None"], ["", "def", "transform", "(", "self", ")", ":", "\n", "        ", "self", ".", "x_train", "[", "self", ".", "x_train", "<", "0.5", "]", "=", "-", "1", "\n", "self", ".", "x_train", "[", "self", ".", "x_train", ">", "0.5", "]", "=", "1", "\n", "self", ".", "x_test", "[", "self", ".", "x_test", "<", "0.5", "]", "=", "-", "1", "\n", "self", ".", "x_test", "[", "self", ".", "x_test", ">", "0.5", "]", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.mnist.MNIST.hardtanh": [[117, 120], ["None"], "methods", ["None"], ["", "def", "hardtanh", "(", "self", ",", "data", ")", ":", "\n", "        ", "data", "[", "data", ">", "1", "]", "=", "1", "\n", "data", "[", "data", "<", "-", "1", "]", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.mnist.MNIST.binary_hardtanh": [[121, 125], ["mnist.MNIST.hardtanh"], "methods", ["home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.mnist.MNIST.hardtanh"], ["", "def", "binary_hardtanh", "(", "self", ",", "data", ")", ":", "\n", "        ", "self", ".", "hardtanh", "(", "data", ")", "\n", "data", "[", "data", ">", "0", "]", "=", "1", "\n", "data", "[", "data", "==", "0", "]", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.mnist.MNIST.simulate": [[127, 177], ["numpy.copy", "numpy.zeros", "numpy.reshape", "numpy.reshape", "int", "range", "numpy.zeros.astype", "mnist.MNIST.binary_hardtanh", "numpy.dot", "scipy.special.expit", "numpy.dot", "numpy.dot", "numpy.rint", "numpy.rint", "numpy.squeeze", "numpy.squeeze"], "methods", ["home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.mnist.MNIST.binary_hardtanh"], ["", "def", "simulate", "(", "self", ",", "w_orig", ",", "eval", "=", "False", ")", ":", "#objective", "\n", "#change 0 to -1", "\n", "        ", "w", "=", "np", ".", "copy", "(", "w_orig", ")", "\n", "w", "[", "w", "==", "0", "]", "=", "-", "1", "\n", "# print('updated theta values {}'.format(set(w)))", "\n", "\n", "im_shape", "=", "self", ".", "image_size", "[", "0", "]", "*", "self", ".", "image_size", "[", "1", "]", "\n", "\n", "if", "eval", ":", "\n", "            ", "data_x", "=", "self", ".", "x_test", "\n", "data_y", "=", "self", ".", "y_test", "\n", "", "else", ":", "\n", "            ", "data_x", "=", "self", ".", "x_train", "\n", "data_y", "=", "self", ".", "y_train", "\n", "\n", "", "y_pred", "=", "np", ".", "zeros", "(", "(", "data_y", ".", "shape", "[", "0", "]", ",", ")", ")", "\n", "\n", "w1", "=", "w", "[", "0", ":", "im_shape", "*", "self", ".", "H", "]", "\n", "w2", "=", "w", "[", "im_shape", "*", "self", ".", "H", ":", "]", "\n", "\n", "W1", "=", "np", ".", "reshape", "(", "w1", ",", "(", "im_shape", ",", "self", ".", "H", ")", ")", "\n", "W2", "=", "np", ".", "reshape", "(", "w2", ",", "(", "self", ".", "H", ",", "1", ")", ")", "\n", "\n", "#select batch size", "\n", "batch_count", "=", "12", "\n", "batch_size", "=", "int", "(", "data_x", ".", "shape", "[", "0", "]", "/", "batch_count", ")", "\n", "\n", "\n", "for", "i", "in", "range", "(", "batch_count", ")", ":", "\n", "#  First layer", "\n", "            ", "if", "i", "==", "(", "batch_count", "-", "1", ")", ":", "\n", "                ", "h", "=", "np", ".", "dot", "(", "data_x", "[", "i", "*", "batch_size", ":", "data_x", ".", "shape", "[", "0", "]", "]", ",", "W1", ")", "\n", "", "else", ":", "\n", "                ", "h", "=", "np", ".", "dot", "(", "data_x", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", "]", ",", "W1", ")", "\n", "\n", "# tanh", "\n", "", "self", ".", "binary_hardtanh", "(", "h", ")", "\n", "\n", "# Second layer", "\n", "logits", "=", "np", ".", "dot", "(", "h", ",", "W2", ")", "\n", "\n", "# sigmoid", "\n", "prob", "=", "expit", "(", "logits", ")", "\n", "\n", "if", "i", "==", "(", "batch_count", "-", "1", ")", ":", "\n", "                ", "y_pred", "[", "i", "*", "batch_size", ":", "data_x", ".", "shape", "[", "0", "]", "]", "=", "np", ".", "rint", "(", "np", ".", "squeeze", "(", "prob", ")", ")", "\n", "", "else", ":", "\n", "                ", "y_pred", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", "]", "=", "np", ".", "rint", "(", "np", ".", "squeeze", "(", "prob", ")", ")", "\n", "\n", "", "", "return", "y_pred", ".", "astype", "(", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.mnist.MNIST.binarize": [[178, 182], ["x.astype"], "methods", ["None"], ["", "def", "binarize", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "[", "x", ">", "0", "]", "=", "1", "\n", "x", "[", "x", "<=", "0", "]", "=", "-", "1", "\n", "return", "x", ".", "astype", "(", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.mnist.MNIST.distance": [[183, 189], ["sum", "sum", "numpy.logical_xor", "numpy.logical_xor"], "methods", ["None"], ["", "def", "distance", "(", "self", ",", "y", ",", "eval", "=", "False", ")", ":", "\n", "        ", "if", "eval", ":", "\n", "            ", "er", "=", "1", "/", "self", ".", "y_test", ".", "shape", "[", "0", "]", "*", "sum", "(", "np", ".", "logical_xor", "(", "self", ".", "y_test", ",", "y", ")", ")", "\n", "", "else", ":", "\n", "            ", "er", "=", "1", "/", "self", ".", "y_train", ".", "shape", "[", "0", "]", "*", "sum", "(", "np", ".", "logical_xor", "(", "self", ".", "y_train", ",", "y", ")", ")", "\n", "", "return", "er", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.mnist.MNIST.prior": [[190, 193], ["numpy.exp", "numpy.mean"], "methods", ["None"], ["", "def", "prior", "(", "self", ",", "theta", ")", ":", "\n", "#define a pseduo-bolztman distribution", "\n", "        ", "return", "np", ".", "exp", "(", "-", "np", ".", "mean", "(", "theta", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.mnist.transform_polar": [[19, 22], ["None"], "function", ["None"], ["def", "transform_polar", "(", "image", ")", ":", "\n", "    ", "image", "[", "image", "<", "0.5", "]", "=", "-", "1", "\n", "image", "[", "image", ">=", "0.5", "]", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.__init__": [[10, 22], ["testbeds.main_usecase.Testbed.__init__", "qmr_dt.QMR_DT.association", "numpy.random.beta", "numpy.random.uniform", "numpy.random.beta", "numpy.random.uniform"], "methods", ["home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.kernels.proposals.Proposals.__init__", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.association"], ["    ", "def", "__init__", "(", "self", ",", "m", "=", "10", ",", "f", "=", "20", ",", "a_p", "=", "0.9", ",", "beta", "=", "True", ")", ":", "\n", "        ", "super", "(", "QMR_DT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "D", "=", "m", "\n", "self", ".", "f", "=", "f", "\n", "self", ".", "association_prob", "=", "a_p", "\n", "self", ".", "p_l", "=", "np", ".", "random", ".", "beta", "(", "0.15", ",", "0.15", ",", "self", ".", "D", ")", "if", "beta", "else", "np", ".", "random", ".", "uniform", "(", "0", ",", "0.5", ",", "self", ".", "D", ")", "# disease prior", "\n", "self", ".", "q_i0", "=", "np", ".", "random", ".", "beta", "(", "0.15", ",", "0.15", ",", "self", ".", "f", ")", "if", "beta", "else", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ",", "self", ".", "f", ")", "# leak probability", "\n", "self", ".", "q_il", "=", "self", ".", "association", "(", "beta", ")", "# association between disease l and finding i (finding, disease)", "\n", "\n", "self", ".", "parameters", "=", "None", "#sample b_truth from disease prior", "\n", "self", ".", "data", "=", "None", "#generate multipl findings given b_truth", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.association": [[24, 38], ["range", "numpy.array", "numpy.zeros", "range", "q_il.append", "numpy.random.uniform", "numpy.random.beta", "numpy.random.uniform"], "methods", ["None"], ["", "def", "association", "(", "self", ",", "beta", ")", ":", "\n", "        ", "\"\"\"\n        Function to create matrix between the finding and association probabilities q_il\n        :return: matrix(findings,diseases)\n        \"\"\"", "\n", "q_il", "=", "[", "]", "\n", "for", "f", "in", "range", "(", "self", ".", "f", ")", ":", "\n", "            ", "f_association", "=", "np", ".", "zeros", "(", "self", ".", "D", ")", "\n", "for", "b", "in", "range", "(", "self", ".", "D", ")", ":", "\n", "                ", "if", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ")", ">=", "self", ".", "association_prob", ":", "\n", "                    ", "f_association", "[", "b", "]", "=", "np", ".", "random", ".", "beta", "(", "0.15", ",", "0.15", ")", "if", "beta", "else", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ")", "\n", "", "", "q_il", ".", "append", "(", "f_association", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "q_il", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.generate_parameters": [[39, 48], ["numpy.zeros", "range", "numpy.random.uniform"], "methods", ["None"], ["", "def", "generate_parameters", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Function to generate test cases based on the disease prior p_l\n        :return: b_truth's\n        \"\"\"", "\n", "self", ".", "parameters", "=", "np", ".", "zeros", "(", "self", ".", "D", ")", "\n", "for", "l", "in", "range", "(", "self", ".", "D", ")", ":", "\n", "            ", "if", "self", ".", "p_l", "[", "l", "]", ">=", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ")", ":", "\n", "                ", "self", ".", "parameters", "[", "l", "]", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.generate_data": [[50, 59], ["numpy.zeros", "range", "range", "numpy.random.uniform", "numpy.exp", "qmr_dt.QMR_DT.llh"], "methods", ["home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.llh"], ["", "", "", "def", "generate_data", "(", "self", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "data", "=", "np", ".", "zeros", "(", "shape", "=", "(", "n", ",", "self", ".", "f", ")", ")", "\n", "for", "row", "in", "range", "(", "self", ".", "data", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "for", "idx", "in", "range", "(", "self", ".", "data", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "if", "(", "1", "-", "np", ".", "exp", "(", "self", ".", "llh", "(", "self", ".", "parameters", ",", "idx", ")", ")", ")", ">=", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ")", ":", "\n", "                    ", "self", ".", "data", "[", "row", ",", "idx", "]", "=", "1", "\n", "\n", "", "", "", "if", "n", "==", "1", ":", "\n", "            ", "self", ".", "data", "=", "self", ".", "data", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.simulate": [[62, 69], ["numpy.zeros", "range", "numpy.random.uniform", "numpy.exp", "qmr_dt.QMR_DT.llh"], "methods", ["home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.llh"], ["", "", "def", "simulate", "(", "self", ",", "b", ")", ":", "\n", "        ", "findings", "=", "np", ".", "zeros", "(", "self", ".", "f", ")", "\n", "for", "idx", "in", "range", "(", "self", ".", "f", ")", ":", "\n", "            ", "if", "(", "1", "-", "np", ".", "exp", "(", "self", ".", "llh", "(", "b", ",", "idx", ")", ")", ")", ">=", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ")", ":", "\n", "                ", "findings", "[", "idx", "]", "=", "1", "\n", "\n", "", "", "return", "findings", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.prior": [[71, 77], ["numpy.exp", "numpy.sum", "numpy.log", "numpy.log"], "methods", ["None"], ["", "def", "prior", "(", "self", ",", "b", ")", ":", "\n", "        ", "\"\"\"\n        :param b: binary vector (np.array)\n        :return: log prior\n        \"\"\"", "\n", "return", "np", ".", "exp", "(", "np", ".", "sum", "(", "b", "*", "np", ".", "log", "(", "self", ".", "p_l", ")", "+", "(", "1", "-", "b", ")", "*", "np", ".", "log", "(", "1", "-", "self", ".", "p_l", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.product_lh": [[79, 87], ["enumerate", "numpy.exp", "numpy.exp", "qmr_dt.QMR_DT.llh", "qmr_dt.QMR_DT.llh"], "methods", ["home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.llh", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.llh"], ["", "def", "product_lh", "(", "self", ",", "b", ")", ":", "\n", "        ", "product", "=", "1.", "\n", "for", "id", ",", "f", "in", "enumerate", "(", "self", ".", "data", ")", ":", "\n", "            ", "if", "f", "==", "1", ":", "\n", "                ", "product", "*=", "(", "1", "-", "np", ".", "exp", "(", "self", ".", "llh", "(", "b", ",", "id", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "product", "*=", "np", ".", "exp", "(", "self", ".", "llh", "(", "b", ",", "id", ")", ")", "\n", "", "", "return", "product", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.product_llh": [[89, 97], ["enumerate", "numpy.log", "qmr_dt.QMR_DT.llh", "numpy.exp", "qmr_dt.QMR_DT.llh"], "methods", ["home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.llh", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.llh"], ["", "def", "product_llh", "(", "self", ",", "b", ")", ":", "\n", "        ", "product", "=", "0.", "\n", "for", "id", ",", "f", "in", "enumerate", "(", "self", ".", "data", ")", ":", "\n", "            ", "if", "f", "==", "1", ":", "\n", "                ", "product", "+=", "np", ".", "log", "(", "1", "-", "np", ".", "exp", "(", "self", ".", "llh", "(", "b", ",", "id", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "product", "+=", "self", ".", "llh", "(", "b", ",", "id", ")", "\n", "", "", "return", "product", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.product_neg_llh": [[98, 106], ["enumerate", "numpy.log", "qmr_dt.QMR_DT.llh", "numpy.exp", "qmr_dt.QMR_DT.llh"], "methods", ["home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.llh", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.llh"], ["", "def", "product_neg_llh", "(", "self", ",", "b", ")", ":", "\n", "        ", "product", "=", "0.", "\n", "for", "id", ",", "f", "in", "enumerate", "(", "self", ".", "data", ")", ":", "\n", "            ", "if", "f", "==", "1", ":", "\n", "                ", "product", "+=", "np", ".", "log", "(", "1", "-", "np", ".", "exp", "(", "self", ".", "llh", "(", "b", ",", "id", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "product", "+=", "self", ".", "llh", "(", "b", ",", "id", ")", "\n", "", "", "return", "-", "product", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.llh": [[107, 109], ["numpy.log", "numpy.sum", "numpy.log"], "methods", ["None"], ["", "def", "llh", "(", "self", ",", "b", ",", "id", ")", ":", "\n", "        ", "return", "np", ".", "log", "(", "1", "-", "self", ".", "q_i0", "[", "id", "]", ")", "+", "np", ".", "sum", "(", "b", "*", "np", ".", "log", "(", "1", "-", "self", ".", "q_il", "[", "id", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.posterior": [[110, 112], ["qmr_dt.QMR_DT.product_lh", "numpy.exp", "qmr_dt.QMR_DT.prior"], "methods", ["home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.product_lh", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.prior"], ["", "def", "posterior", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "self", ".", "product_lh", "(", "data", ")", "*", "np", ".", "exp", "(", "self", ".", "prior", "(", "data", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.log_posterior": [[113, 115], ["qmr_dt.QMR_DT.product_llh", "qmr_dt.QMR_DT.prior"], "methods", ["home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.product_llh", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.prior"], ["", "def", "log_posterior", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "self", ".", "product_llh", "(", "data", ")", "+", "self", ".", "prior", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.neg_log_posterior": [[116, 118], ["qmr_dt.QMR_DT.product_llh", "qmr_dt.QMR_DT.prior"], "methods", ["home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.product_llh", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.prior"], ["", "def", "neg_log_posterior", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "-", "(", "self", ".", "product_llh", "(", "data", ")", "+", "self", ".", "prior", "(", "data", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.posterior_abc": [[119, 121], ["qmr_dt.QMR_DT.product_lh_abc", "numpy.exp", "qmr_dt.QMR_DT.prior"], "methods", ["home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.product_lh_abc", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.prior"], ["", "def", "posterior_abc", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "self", ".", "product_lh_abc", "(", "data", ")", "*", "np", ".", "exp", "(", "self", ".", "prior", "(", "data", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.log_posterior_abc": [[122, 124], ["qmr_dt.QMR_DT.product_llh_abc", "qmr_dt.QMR_DT.prior"], "methods", ["home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.product_llh_abc", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.prior"], ["", "def", "log_posterior_abc", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "self", ".", "product_llh_abc", "(", "data", ")", "+", "self", ".", "prior", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.product_lh_abc": [[125, 136], ["enumerate", "avg_lh.append", "sum", "len", "numpy.exp", "numpy.exp", "qmr_dt.QMR_DT.llh", "qmr_dt.QMR_DT.llh"], "methods", ["home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.llh", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.llh"], ["", "def", "product_lh_abc", "(", "self", ",", "b", ")", ":", "\n", "        ", "avg_lh", "=", "[", "]", "\n", "for", "datapoint", "in", "self", ".", "data", ":", "\n", "            ", "product", "=", "1.", "\n", "for", "id", ",", "f", "in", "enumerate", "(", "datapoint", ")", ":", "\n", "                ", "if", "f", "==", "1", ":", "\n", "                    ", "product", "*=", "(", "1", "-", "np", ".", "exp", "(", "self", ".", "llh", "(", "b", ",", "id", ")", ")", ")", "\n", "", "else", ":", "\n", "                    ", "product", "*=", "np", ".", "exp", "(", "self", ".", "llh", "(", "b", ",", "id", ")", ")", "\n", "", "", "avg_lh", ".", "append", "(", "product", ")", "\n", "", "return", "sum", "(", "avg_lh", ")", "/", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.product_llh_abc": [[137, 149], ["enumerate", "avg_lh.append", "sum", "len", "numpy.log", "qmr_dt.QMR_DT.llh", "numpy.exp", "qmr_dt.QMR_DT.llh"], "methods", ["home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.llh", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.llh"], ["", "def", "product_llh_abc", "(", "self", ",", "b", ")", ":", "\n", "        ", "avg_lh", "=", "[", "]", "\n", "for", "datapoint", "in", "self", ".", "data", ":", "\n", "            ", "product", "=", "0.", "\n", "for", "id", ",", "f", "in", "enumerate", "(", "datapoint", ")", ":", "\n", "                ", "if", "f", "==", "1", ":", "\n", "                    ", "product", "+=", "np", ".", "log", "(", "1", "-", "np", ".", "exp", "(", "self", ".", "llh", "(", "b", ",", "id", ")", ")", ")", "\n", "", "else", ":", "\n", "                    ", "product", "+=", "self", ".", "llh", "(", "b", ",", "id", ")", "\n", "", "", "avg_lh", ".", "append", "(", "product", ")", "\n", "\n", "", "return", "sum", "(", "avg_lh", ")", "/", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.distance": [[151, 156], ["qmr_dt.QMR_DT.hamming", "len"], "methods", ["home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.hamming"], ["", "def", "distance", "(", "self", ",", "x", ",", "eval", "=", "False", ")", ":", "\n", "        ", "distance", "=", "0.", "\n", "for", "true_data", "in", "self", ".", "data", ":", "\n", "            ", "distance", "+=", "self", ".", "hamming", "(", "x", ",", "true_data", ")", "\n", "", "return", "distance", "/", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.hamming": [[158, 164], ["enumerate"], "methods", ["None"], ["", "def", "hamming", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "distance", "=", "0.", "\n", "for", "idx", ",", "bl", "in", "enumerate", "(", "b", ")", ":", "\n", "            ", "if", "bl", "!=", "a", "[", "idx", "]", ":", "\n", "                ", "distance", "+=", "1", "\n", "", "", "return", "distance", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.utils.func_support.text_output": [[31, 48], ["open", "open.write", "open.write", "numpy.array_equal", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "str", "str", "simulation.simulator.posterior", "simulation.simulator.product_lh", "simulation.simulator.posterior", "simulation.simulator.product_lh", "simulation.simulator.hamming", "int", "int"], "function", ["home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.posterior", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.product_lh", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.posterior", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.product_lh", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.hamming"], ["def", "text_output", "(", "method", ",", "iter", ",", "solution", ",", "simulation", ",", "store", ")", ":", "\n", "    ", "textfile", "=", "open", "(", "store", "+", "'/'", "+", "method", "+", "'.txt'", ",", "'a+'", ")", "\n", "textfile", ".", "write", "(", "'------------------------------------------------\\n'", ")", "\n", "textfile", ".", "write", "(", "'Iteration {}\\n'", ".", "format", "(", "iter", ")", ")", "\n", "if", "np", ".", "array_equal", "(", "solution", ",", "simulation", ".", "simulator", ".", "parameters", ")", ":", "\n", "        ", "textfile", ".", "write", "(", "'---MATCH---'", ")", "\n", "", "else", ":", "\n", "        ", "textfile", ".", "write", "(", "'--MISMATCH of {} --'", ".", "format", "(", "simulation", ".", "simulator", ".", "hamming", "(", "solution", ",", "simulation", ".", "simulator", ".", "parameters", ")", ")", ")", "\n", "", "textfile", ".", "write", "(", "'\\n b truth\\n'", ")", "\n", "textfile", ".", "write", "(", "str", "(", "[", "int", "(", "n", ")", "for", "n", "in", "simulation", ".", "simulator", ".", "parameters", "]", ")", ")", "\n", "textfile", ".", "write", "(", "'\\n target posterior {} '", ".", "format", "(", "simulation", ".", "simulator", ".", "posterior", "(", "simulation", ".", "simulator", ".", "parameters", ")", ")", ")", "\n", "textfile", ".", "write", "(", "'\\n target likelihood {} '", ".", "format", "(", "simulation", ".", "simulator", ".", "product_lh", "(", "simulation", ".", "simulator", ".", "parameters", ")", ")", ")", "\n", "textfile", ".", "write", "(", "'\\n best simulated b\\n'", ")", "\n", "textfile", ".", "write", "(", "str", "(", "[", "int", "(", "n", ")", "for", "n", "in", "solution", "]", ")", ")", "\n", "textfile", ".", "write", "(", "'\\n best posterior {} '", ".", "format", "(", "simulation", ".", "simulator", ".", "posterior", "(", "solution", ")", ")", ")", "\n", "textfile", ".", "write", "(", "'\\n best likelihood {} '", ".", "format", "(", "simulation", ".", "simulator", ".", "product_lh", "(", "solution", ")", ")", ")", "\n", "textfile", ".", "write", "(", "'\\n\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.utils.func_support.report_weight": [[49, 52], ["open", "open.write", "numpy.mean", "numpy.std"], "function", ["None"], ["", "def", "report_weight", "(", "list_avg", ",", "loc", ")", ":", "\n", "    ", "textfile", "=", "open", "(", "loc", "+", "'.txt'", ",", "'a+'", ")", "\n", "textfile", ".", "write", "(", "'Percentage of active wegihts: {} (std {}) \\n'", ".", "format", "(", "np", ".", "mean", "(", "list_avg", ")", ",", "np", ".", "std", "(", "list_avg", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.utils.func_support.report": [[54, 60], ["open", "open.write", "dict.items", "open.write", "open.write"], "function", ["None"], ["", "def", "report", "(", "dict", ",", "epsilon", ",", "store", ")", ":", "\n", "    ", "textfile", "=", "open", "(", "store", "+", "'.txt'", ",", "'a+'", ")", "\n", "textfile", ".", "write", "(", "'epsilon value: {} \\n'", ".", "format", "(", "epsilon", ")", ")", "\n", "for", "method", ",", "values", "in", "dict", ".", "items", "(", ")", ":", "\n", "        ", "textfile", ".", "write", "(", "'proposal : {} \\n'", ".", "format", "(", "method", ")", ")", "\n", "textfile", ".", "write", "(", "'acceptance ratio : mean {} (std {}) \\n'", ".", "format", "(", "values", "[", "'mean'", "]", ",", "values", "[", "'std'", "]", ")", ")", "\n", "# textfile.write('--------------------- \\n\\n')", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.utils.func_support.report_variablitity": [[62, 71], ["open", "data.items", "info.items", "open.write", "open.write", "open.write", "numpy.mean", "numpy.std", "numpy.asarray", "numpy.asarray"], "function", ["None"], ["", "", "def", "report_variablitity", "(", "data", ",", "store", ")", ":", "\n", "    ", "textfile", "=", "open", "(", "store", "+", "'.txt'", ",", "'a+'", ")", "\n", "for", "runid", ",", "info", "in", "data", ".", "items", "(", ")", ":", "\n", "        ", "for", "method", ",", "var", "in", "info", ".", "items", "(", ")", ":", "\n", "            ", "mean", "=", "np", ".", "mean", "(", "np", ".", "asarray", "(", "var", ")", ")", "\n", "std", "=", "np", ".", "std", "(", "np", ".", "asarray", "(", "var", ")", ")", "\n", "", "textfile", ".", "write", "(", "'for run {} \\n'", ".", "format", "(", "runid", ")", ")", "\n", "textfile", ".", "write", "(", "'avg variability : {}  (std {})  '", ".", "format", "(", "mean", ",", "std", ")", ")", "\n", "textfile", ".", "write", "(", "'--------------------- \\n\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.utils.func_support.report_posterior": [[72, 89], ["open", "open.write", "open.write", "numpy.mean", "numpy.std", "open.write", "sim.simulator.log_posterior_abc", "open.write", "open.write", "posterior_list.append", "numpy.asarray", "numpy.asarray", "sim.simulator.log_posterior_abc"], "function", ["home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.log_posterior_abc", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.log_posterior_abc"], ["", "", "def", "report_posterior", "(", "sim", ",", "run", ",", "method", ",", "pops", ",", "store", ")", ":", "\n", "    ", "posterior_list", "=", "[", "]", "\n", "textfile", "=", "open", "(", "store", "+", "'.txt'", ",", "'a+'", ")", "\n", "textfile", ".", "write", "(", "'\\nRun: {} \\n'", ".", "format", "(", "run", ")", ")", "\n", "textfile", ".", "write", "(", "'Method: {} \\n'", ".", "format", "(", "method", ")", ")", "\n", "\n", "for", "chain", "in", "pops", ":", "\n", "        ", "posterior_list", ".", "append", "(", "sim", ".", "simulator", ".", "log_posterior_abc", "(", "chain", ")", ")", "\n", "", "post_avg", "=", "np", ".", "mean", "(", "np", ".", "asarray", "(", "posterior_list", ")", ")", "\n", "post_std", "=", "np", ".", "std", "(", "np", ".", "asarray", "(", "posterior_list", ")", ")", "\n", "textfile", ".", "write", "(", "'avg post : {}  (std {})  \\n'", ".", "format", "(", "post_avg", ",", "post_std", ")", ")", "\n", "\n", "true_post", "=", "sim", ".", "simulator", ".", "log_posterior_abc", "(", "sim", ".", "simulator", ".", "parameters", ")", "\n", "textfile", ".", "write", "(", "'true post : {}  '", ".", "format", "(", "true_post", ")", ")", "\n", "textfile", ".", "write", "(", "'--------------------- \\n\\n'", ")", "\n", "\n", "return", "(", "[", "post_avg", ",", "post_std", "]", ",", "true_post", ",", "posterior_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.utils.func_support.create_plot": [[91, 94], ["func_support.compute_statistics", "func_support.plot"], "function", ["home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.utils.func_support.compute_statistics", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.utils.func_support.plot"], ["", "def", "create_plot", "(", "results", ",", "x", ",", "location", ",", "yaxis", ",", "transform", "=", "False", ",", "ylim", "=", "None", ",", "xlim", "=", "None", ",", "length", "=", "16", ",", "height", "=", "6", ")", ":", "\n", "    ", "averages", "=", "compute_statistics", "(", "results", ",", "x", ",", "transform", ")", "\n", "plot", "(", "averages", ",", "location", ",", "yaxis", ",", "ylim", ",", "xlim", ",", "length", ",", "height", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.utils.func_support.compute_statistics": [[95, 109], ["dict.items", "x.items", "numpy.mean", "numpy.mean", "numpy.exp", "numpy.asarray", "numpy.std", "numpy.sqrt", "numpy.asarray", "len", "numpy.asarray"], "function", ["None"], ["", "def", "compute_statistics", "(", "dict", ",", "x", ",", "transform", "=", "False", ")", ":", "\n", "    ", "overall", "=", "{", "}", "\n", "\n", "for", "key", ",", "values", "in", "dict", ".", "items", "(", ")", ":", "\n", "# assert len(values[0]) == len(values[1]), 'issue with lenghts'", "\n", "        ", "overall", "[", "key", "]", "=", "{", "}", "\n", "values", "=", "np", ".", "exp", "(", "-", "(", "np", ".", "asarray", "(", "values", ")", ")", ")", "if", "transform", "else", "np", ".", "asarray", "(", "values", ")", "\n", "overall", "[", "key", "]", "[", "'mean'", "]", "=", "np", ".", "mean", "(", "values", ",", "axis", "=", "0", ")", "\n", "overall", "[", "key", "]", "[", "'ste'", "]", "=", "np", ".", "std", "(", "values", ",", "axis", "=", "0", ")", "/", "np", ".", "sqrt", "(", "len", "(", "values", ")", ")", "\n", "\n", "", "for", "key", ",", "values", "in", "x", ".", "items", "(", ")", ":", "\n", "        ", "overall", "[", "key", "]", "[", "'x'", "]", "=", "np", ".", "mean", "(", "np", ".", "asarray", "(", "values", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "return", "overall", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.utils.func_support.compute_avg": [[110, 118], ["dict.items", "numpy.mean", "numpy.std", "numpy.asarray", "numpy.asarray"], "function", ["None"], ["", "def", "compute_avg", "(", "dict", ")", ":", "\n", "    ", "overall", "=", "{", "}", "\n", "for", "key", ",", "values", "in", "dict", ".", "items", "(", ")", ":", "\n", "        ", "overall", "[", "key", "]", "=", "{", "}", "\n", "overall", "[", "key", "]", "[", "'mean'", "]", "=", "np", ".", "mean", "(", "np", ".", "asarray", "(", "values", ")", ")", "\n", "overall", "[", "key", "]", "[", "'std'", "]", "=", "np", ".", "std", "(", "np", ".", "asarray", "(", "values", ")", ")", "\n", "\n", "", "return", "overall", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.utils.func_support.plot": [[120, 146], ["matplotlib.figure", "avg_dict.items", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.grid", "matplotlib.legend", "matplotlib.savefig", "matplotlib.plot", "matplotlib.fill_between", "matplotlib.ylim", "matplotlib.xlim", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.utils.func_support.plot"], ["", "def", "plot", "(", "avg_dict", ",", "location", ",", "yaxis", ",", "ylim", ",", "xlim", ",", "length", "=", "16", ",", "height", "=", "6", ")", ":", "\n", "    ", "plt", ".", "figure", "(", "figsize", "=", "(", "length", ",", "height", ")", ")", "\n", "\n", "for", "transformation", ",", "results", "in", "avg_dict", ".", "items", "(", ")", ":", "\n", "        ", "y", "=", "results", "[", "'mean'", "]", "\n", "ste", "=", "results", "[", "'ste'", "]", "\n", "x", "=", "results", "[", "'x'", "]", "\n", "y_min", "=", "y", "-", "ste", "\n", "y_plus", "=", "y", "+", "ste", "\n", "assert", "len", "(", "x", ")", "==", "len", "(", "y", ")", "==", "len", "(", "ste", ")", ",", "'The number of instances fo not match, check create plot function'", "\n", "\n", "plt", ".", "plot", "(", "x", ",", "y", ",", "line", "[", "transformation", "]", ",", "color", "=", "color", "[", "transformation", "]", ",", "label", "=", "transformation", ")", "\n", "plt", ".", "fill_between", "(", "x", ",", "y_min", ",", "y_plus", ",", "\n", "alpha", "=", "0.5", ",", "edgecolor", "=", "color", "[", "transformation", "]", ",", "facecolor", "=", "fill", "[", "transformation", "]", ")", "\n", "\n", "", "if", "ylim", "is", "not", "None", ":", "\n", "        ", "a", ",", "b", "=", "ylim", "\n", "plt", ".", "ylim", "(", "a", ",", "b", ")", "\n", "", "if", "xlim", "is", "not", "None", ":", "\n", "        ", "a", ",", "b", "=", "xlim", "\n", "plt", ".", "xlim", "(", "a", ",", "b", ")", "\n", "", "plt", ".", "xlabel", "(", "'iterations'", ")", "\n", "plt", ".", "ylabel", "(", "yaxis", ")", "\n", "plt", ".", "grid", "(", "True", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "0", ")", "\n", "plt", ".", "savefig", "(", "location", "+", "'.png'", ")", "\n", "# plt.show()", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.utils.func_support.plot_bnn": [[148, 173], ["matplotlib.figure", "numpy.mean", "numpy.std", "matplotlib.plot", "matplotlib.fill_between", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.grid", "matplotlib.legend", "matplotlib.savefig", "numpy.asarray", "numpy.asarray", "len", "len", "len", "matplotlib.ylim", "matplotlib.xlim", "range", "len"], "function", ["home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.utils.func_support.plot"], ["", "def", "plot_bnn", "(", "list", ",", "location", ",", "yaxis", ",", "ylim", "=", "None", ",", "xlim", "=", "None", ",", "length", "=", "16", ",", "height", "=", "6", ")", ":", "\n", "    ", "plt", ".", "figure", "(", "figsize", "=", "(", "length", ",", "height", ")", ")", "\n", "\n", "y", "=", "np", ".", "mean", "(", "np", ".", "asarray", "(", "list", ")", ",", "axis", "=", "0", ")", "\n", "std", "=", "np", ".", "std", "(", "np", ".", "asarray", "(", "list", ")", ",", "axis", "=", "0", ")", "\n", "x", "=", "[", "i", "for", "i", "in", "range", "(", "1", ",", "len", "(", "list", "[", "0", "]", ")", "+", "1", ")", "]", "\n", "y_min", "=", "y", "-", "std", "\n", "y_plus", "=", "y", "+", "std", "\n", "assert", "len", "(", "x", ")", "==", "len", "(", "y", ")", "==", "len", "(", "std", ")", ",", "'The number of instances fo not match, check create plot function'", "\n", "\n", "plt", ".", "plot", "(", "x", ",", "y", ",", "':^g'", ",", "color", "=", "'#004577'", ",", "label", "=", "'test error'", ")", "\n", "plt", ".", "fill_between", "(", "x", ",", "y_min", ",", "y_plus", ",", "\n", "alpha", "=", "0.5", ",", "edgecolor", "=", "'#004577'", ",", "facecolor", "=", "'#95d0fc'", ")", "\n", "\n", "if", "ylim", "is", "not", "None", ":", "\n", "        ", "a", ",", "b", "=", "ylim", "\n", "plt", ".", "ylim", "(", "a", ",", "b", ")", "\n", "", "if", "xlim", "is", "not", "None", ":", "\n", "        ", "a", ",", "b", "=", "xlim", "\n", "plt", ".", "xlim", "(", "a", ",", "b", ")", "\n", "", "plt", ".", "xlabel", "(", "'epochs'", ")", "\n", "plt", ".", "ylabel", "(", "yaxis", ")", "\n", "plt", ".", "grid", "(", "True", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "0", ")", "\n", "plt", ".", "savefig", "(", "location", "+", "'.png'", ")", "\n", "# plt.show()", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.utils.func_support.plot_dist": [[176, 211], ["collections.OrderedDict", "collections.OrderedDict", "matplotlib.subplots", "ax.scatter", "ax.set", "matplotlib.xticks", "matplotlib.legend", "matplotlib.savefig", "sorted", "sorted", "ax.errorbar", "int", "dict_res.items", "dict_true.items", "y.append", "std.append", "collections.OrderedDict.keys", "str", "x.append", "x.append", "collections.OrderedDict.values", "float", "float"], "function", ["None"], ["", "def", "plot_dist", "(", "dict_res", ",", "dict_true", ",", "location", ")", ":", "\n", "    ", "format", "=", "{", "'mut+xor'", ":", "[", "'o'", ",", "'green'", ",", "'lightgreen'", "]", ",", "'dde-mc'", ":", "[", "'v'", ",", "'blue'", ",", "'lightblue'", "]", "}", "\n", "od_res", "=", "collections", ".", "OrderedDict", "(", "sorted", "(", "dict_res", ".", "items", "(", ")", ")", ")", "\n", "od_true", "=", "collections", ".", "OrderedDict", "(", "sorted", "(", "dict_true", ".", "items", "(", ")", ")", ")", "\n", "move", "=", "0.08", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "16", ",", "6", ")", ")", "\n", "\n", "for", "selection", "in", "[", "'mut+xor'", ",", "'dde-mc'", "]", ":", "\n", "        ", "x", "=", "[", "]", "\n", "y", "=", "[", "]", "\n", "std", "=", "[", "]", "\n", "\n", "for", "id", "in", "od_res", ":", "\n", "            ", "y", ".", "append", "(", "od_res", "[", "id", "]", "[", "selection", "]", "[", "0", "]", ")", "\n", "std", ".", "append", "(", "od_res", "[", "id", "]", "[", "selection", "]", "[", "1", "]", ")", "\n", "if", "selection", "==", "'mut+xor'", ":", "\n", "                ", "x", ".", "append", "(", "float", "(", "id", ")", "+", "move", ")", "\n", "", "else", ":", "\n", "                ", "x", ".", "append", "(", "float", "(", "id", ")", "-", "move", ")", "\n", "\n", "", "", "ax", ".", "errorbar", "(", "x", ",", "y", ",", "yerr", "=", "std", ",", "label", "=", "selection", ",", "\n", "fmt", "=", "format", "[", "selection", "]", "[", "0", "]", ",", "color", "=", "format", "[", "selection", "]", "[", "1", "]", ",", "ecolor", "=", "format", "[", "selection", "]", "[", "2", "]", ",", "\n", "elinewidth", "=", "1", ",", "capsize", "=", "1", ")", "\n", "\n", "", "x", "=", "[", "int", "(", "k", ")", "for", "k", "in", "od_true", ".", "keys", "(", ")", "]", "\n", "ax", ".", "scatter", "(", "x", ",", "[", "v", "[", "'dde-mc'", "]", "for", "v", "in", "od_true", ".", "values", "(", ")", "]", ",", "color", "=", "'magenta'", ",", "label", "=", "'true posterior'", ",", "marker", "=", "'*'", ")", "\n", "\n", "# Set plot title and axes labels", "\n", "ax", ".", "set", "(", "xlabel", "=", "\"Run\"", ",", "\n", "ylabel", "=", "\"Posterior\"", ")", "\n", "\n", "plt", ".", "xticks", "(", "x", ",", "[", "str", "(", "id", ")", "for", "id", "in", "x", "]", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "savefig", "(", "location", "+", "'.png'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.algorithms.abc.ABC_Discrete.__init__": [[13, 19], ["algorithms.main_sampling.Sampling_Algorithm.__init__"], "methods", ["home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.kernels.proposals.Proposals.__init__"], ["    ", "def", "__init__", "(", "self", ",", "sim", ",", "settings", ",", "epsilon", ",", "pflip", "=", "0.01", ",", "store", "=", "1", ",", "e_fixed", "=", "False", ")", ":", "\n", "        ", "super", "(", "ABC_Discrete", ",", "self", ")", ".", "__init__", "(", "sim", ",", "settings", ",", "pflip", "=", "pflip", ")", "\n", "\n", "self", ".", "tolerance", "=", "epsilon", "\n", "self", ".", "ensemble", "=", "store", "\n", "self", ".", "ep_fixed", "=", "e_fixed", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.algorithms.abc.ABC_Discrete.run": [[21, 78], ["time.time", "abc.ABC_Discrete.population.copy", "print", "range", "len", "abc.ABC_Discrete.proposal", "abc.ABC_Discrete.simulator.simulate", "numpy.random.exponential", "abc.ABC_Discrete.simulator.distance", "abc.ABC_Discrete.metropolis", "abc.ABC_Discrete.pop_error", "error_min.append", "error_pop.append", "xlim.append", "numpy.random.uniform", "str", "time.time"], "methods", ["home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.algorithms.main_sampling.Sampling_Algorithm.proposal", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.simulate", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.distance", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.algorithms.mcmc.PB_MCMC.metropolis", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.algorithms.mcmc.PB_MCMC.pop_error"], ["", "def", "run", "(", "self", ",", "method", ",", "steps", ",", "runid", ")", ":", "\n", "        ", "initial_time", "=", "time", ".", "time", "(", ")", "\n", "population", "=", "self", ".", "population", ".", "copy", "(", ")", "\n", "\n", "#storage", "\n", "er_min", "=", "np", ".", "inf", "\n", "error_pop", "=", "[", "]", "\n", "error_min", "=", "[", "]", "\n", "xlim", "=", "[", "]", "\n", "parameter_dict", "=", "{", "}", "\n", "\n", "start_store", "=", "steps", "-", "(", "(", "self", ".", "ensemble", "*", "self", ".", "N", ")", "+", "1", ")", "\n", "sample", "=", "1000", "\n", "acceptence_ratio", "=", "0.", "\n", "id", "=", "1", "\n", "n", "=", "0", "\n", "\n", "while", "n", "<", "steps", ":", "\n", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "population", ")", ")", ":", "\n", "                ", "theta_", ",", "_", ",", "_", "=", "self", ".", "proposal", "(", "population", ",", "i", ",", "method", ")", "\n", "x", "=", "self", ".", "simulator", ".", "simulate", "(", "theta_", ")", "\n", "\n", "threshold", "=", "np", ".", "random", ".", "exponential", "(", "self", ".", "tolerance", ")", "if", "not", "self", ".", "ep_fixed", "else", "self", ".", "tolerance", "\n", "if", "self", ".", "simulator", ".", "distance", "(", "x", ")", "<=", "threshold", ":", "\n", "                    ", "alpha", "=", "self", ".", "metropolis", "(", "theta_", ",", "population", "[", "i", "]", ")", "\n", "acceptence_ratio", "+=", "1", "if", "n", "<=", "10000", "else", "0", "\n", "\n", "if", "alpha", ">=", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ")", ":", "\n", "                        ", "population", "[", "i", "]", "=", "theta_", "\n", "\n", "", "", "n", "+=", "1", "\n", "\n", "if", "n", ">=", "sample", ":", "\n", "                    ", "er_p", ",", "er_min_", "=", "self", ".", "pop_error", "(", "population", ")", "\n", "\n", "if", "er_min_", "<", "er_min", ":", "\n", "                        ", "er_min", "=", "er_min_", "\n", "\n", "\n", "", "error_min", ".", "append", "(", "er_min", ")", "\n", "error_pop", ".", "append", "(", "er_p", ")", "\n", "xlim", ".", "append", "(", "n", ")", "\n", "sample", "+=", "1000", "#1500", "\n", "\n", "", "", "if", "self", ".", "ensemble", "!=", "1", "and", "n", ">=", "start_store", ":", "\n", "                ", "parameter_dict", "[", "str", "(", "id", ")", "]", "=", "population", "\n", "id", "+=", "1", "\n", "start_store", "+=", "self", ".", "N", "\n", "\n", "", "", "if", "self", ".", "ensemble", "==", "1", ":", "\n", "            ", "parameter_dict", "=", "population", "\n", "\n", "", "acceptence_ratio", "=", "(", "acceptence_ratio", "/", "10000", ")", "*", "100", "\n", "print", "(", "'final {} {} time ---- {} minutes ---'", ".", "format", "(", "runid", ",", "method", ",", "(", "time", ".", "time", "(", ")", "-", "initial_time", ")", "/", "60", ")", ")", "\n", "\n", "return", "error_pop", ",", "error_min", ",", "xlim", ",", "acceptence_ratio", ",", "parameter_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.algorithms.abc.ABC_Discrete.pop_error": [[80, 86], ["numpy.zeros", "enumerate", "len", "abc.ABC_Discrete.simulator.simulate", "abc.ABC_Discrete.simulator.distance", "numpy.mean", "numpy.min"], "methods", ["home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.simulate", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.distance"], ["", "def", "pop_error", "(", "self", ",", "population", ")", ":", "\n", "        ", "error", "=", "np", ".", "zeros", "(", "len", "(", "population", ")", ")", "\n", "for", "idx", ",", "chain", "in", "enumerate", "(", "population", ")", ":", "\n", "            ", "x", "=", "self", ".", "simulator", ".", "simulate", "(", "chain", ")", "\n", "error", "[", "idx", "]", "=", "self", ".", "simulator", ".", "distance", "(", "x", ",", "eval", "=", "False", ")", "\n", "", "return", "np", ".", "mean", "(", "error", ")", ",", "np", ".", "min", "(", "error", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.algorithms.abc.ABC_Discrete.metropolis": [[88, 90], ["min", "abc.ABC_Discrete.simulator.prior", "abc.ABC_Discrete.simulator.prior"], "methods", ["home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.prior", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.prior"], ["", "def", "metropolis", "(", "self", ",", "theta_", ",", "theta", ")", ":", "\n", "        ", "return", "min", "(", "1", ",", "self", ".", "simulator", ".", "prior", "(", "theta_", ")", "/", "self", ".", "simulator", ".", "prior", "(", "theta", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.algorithms.main_sampling.Sampling_Algorithm.__init__": [[7, 15], ["kernels.proposals.Proposals"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "sim", ",", "settings", ",", "N", "=", "24", ",", "pflip", "=", "0.01", ",", "pcross", "=", "0.5", ")", ":", "\n", "\n", "        ", "self", ".", "simulator", "=", "sim", "\n", "self", ".", "N", "=", "N", "\n", "self", ".", "settings", "=", "settings", "\n", "\n", "self", ".", "proposals", "=", "Proposals", "(", "pflip", ",", "pcross", ")", "\n", "self", ".", "population", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.algorithms.main_sampling.Sampling_Algorithm.initialize_population": [[16, 18], ["main_sampling.Sampling_Algorithm.simulator.initialize"], "methods", ["home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.main_usecase.Testbed.initialize"], ["", "def", "initialize_population", "(", "self", ")", ":", "\n", "        ", "self", ".", "population", "=", "self", ".", "simulator", ".", "initialize", "(", "self", ".", "N", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.algorithms.main_sampling.Sampling_Algorithm.run": [[20, 22], ["None"], "methods", ["None"], ["", "def", "run", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.algorithms.main_sampling.Sampling_Algorithm.pop_error": [[23, 25], ["None"], "methods", ["None"], ["", "def", "pop_error", "(", "self", ",", "pop", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.algorithms.main_sampling.Sampling_Algorithm.metropolis": [[26, 28], ["None"], "methods", ["None"], ["", "def", "metropolis", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.algorithms.main_sampling.Sampling_Algorithm.proposal": [[29, 68], ["main_sampling.Sampling_Algorithm.proposals.bit_flip", "main_sampling.Sampling_Algorithm.proposals.indepent_sampler", "main_sampling.Sampling_Algorithm.sample_idx", "len", "numpy.random.uniform", "main_sampling.Sampling_Algorithm.proposals.bit_flip", "main_sampling.Sampling_Algorithm.proposals.xor", "numpy.random.uniform", "main_sampling.Sampling_Algorithm.proposals.bit_flip", "main_sampling.Sampling_Algorithm.proposals.crossover", "main_sampling.Sampling_Algorithm.proposals.dde_mc", "main_sampling.Sampling_Algorithm.proposals.dde_mc1", "main_sampling.Sampling_Algorithm.proposals.dde_mc2", "sys.exit"], "methods", ["home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.kernels.proposals.Proposals.bit_flip", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.kernels.proposals.Proposals.indepent_sampler", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.algorithms.main_sampling.Sampling_Algorithm.sample_idx", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.kernels.proposals.Proposals.bit_flip", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.kernels.proposals.Proposals.xor", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.kernels.proposals.Proposals.bit_flip", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.kernels.proposals.Proposals.crossover", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.kernels.proposals.Proposals.dde_mc", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.kernels.proposals.Proposals.dde_mc1", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.kernels.proposals.Proposals.dde_mc2"], ["", "def", "proposal", "(", "self", ",", "population", ",", "i", ",", "method", ")", ":", "\n", "        ", "jprime", "=", "None", "\n", "j", "=", "None", "\n", "\n", "if", "method", "==", "'mut'", ":", "\n", "            ", "iprime", "=", "self", ".", "proposals", ".", "bit_flip", "(", "population", "[", "i", "]", ")", "\n", "\n", "", "elif", "method", "==", "'ind-samp'", ":", "\n", "            ", "iprime", "=", "self", ".", "proposals", ".", "indepent_sampler", "(", "population", "[", "i", "]", ")", "\n", "\n", "", "else", ":", "\n", "            ", "j", ",", "k", "=", "self", ".", "sample_idx", "(", "i", ",", "len", "(", "population", ")", ",", "2", ")", "\n", "assert", "j", "!=", "k", ",", "'Check proposal xor method {} {}'", ".", "format", "(", "j", ",", "k", ")", "\n", "\n", "if", "method", "==", "'mut+xor'", ":", "\n", "                ", "if", "self", ".", "settings", "[", "method", "]", ">=", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ")", ":", "\n", "                    ", "iprime", "=", "self", ".", "proposals", ".", "bit_flip", "(", "population", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                    ", "iprime", "=", "self", ".", "proposals", ".", "xor", "(", "population", "[", "i", "]", ",", "population", "[", "j", "]", ",", "population", "[", "k", "]", ")", "\n", "\n", "", "", "elif", "method", "==", "'mut+crx'", ":", "\n", "                ", "if", "self", ".", "settings", "[", "method", "]", ">=", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ")", ":", "\n", "                    ", "iprime", "=", "self", ".", "proposals", ".", "bit_flip", "(", "population", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                    ", "iprime", ",", "jprime", "=", "self", ".", "proposals", ".", "crossover", "(", "population", "[", "i", "]", ",", "population", "[", "j", "]", ")", "\n", "\n", "", "", "elif", "method", "==", "'dde-mc'", ":", "\n", "                ", "iprime", "=", "self", ".", "proposals", ".", "dde_mc", "(", "population", "[", "i", "]", ",", "population", "[", "j", "]", ",", "population", "[", "k", "]", ")", "\n", "\n", "", "elif", "method", "==", "'dde-mc1'", ":", "\n", "                ", "iprime", "=", "self", ".", "proposals", ".", "dde_mc1", "(", "population", "[", "i", "]", ",", "population", "[", "j", "]", ",", "population", "[", "k", "]", ")", "\n", "\n", "", "elif", "method", "==", "'dde-mc2'", ":", "\n", "                ", "iprime", "=", "self", ".", "proposals", ".", "dde_mc2", "(", "population", "[", "i", "]", ",", "population", "[", "j", "]", ",", "population", "[", "k", "]", ")", "\n", "\n", "", "else", ":", "\n", "                ", "sys", ".", "exit", "(", "'Invalid proposal selected!'", ")", "\n", "\n", "", "", "return", "iprime", ",", "jprime", ",", "j", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.algorithms.main_sampling.Sampling_Algorithm.sample_idx": [[69, 71], ["numpy.random.choice", "range"], "methods", ["None"], ["", "def", "sample_idx", "(", "self", ",", "i", ",", "max", ",", "size", "=", "1", ")", ":", "\n", "        ", "return", "np", ".", "random", ".", "choice", "(", "[", "x", "for", "x", "in", "range", "(", "1", ",", "max", ")", "if", "x", "!=", "i", "]", ",", "size", "=", "size", ",", "replace", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.algorithms.mcmc.PB_MCMC.__init__": [[12, 17], ["algorithms.main_sampling.Sampling_Algorithm.__init__"], "methods", ["home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.kernels.proposals.Proposals.__init__"], ["    ", "def", "__init__", "(", "self", ",", "sim", ",", "settings", ",", "pflip", ",", "pcross", ",", "N", ")", ":", "\n", "\n", "        ", "super", "(", "PB_MCMC", ",", "self", ")", ".", "__init__", "(", "sim", ",", "settings", ",", "pflip", "=", "pflip", ",", "pcross", "=", "pcross", ",", "N", "=", "N", ")", "\n", "\n", "self", ".", "target_population", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.algorithms.mcmc.PB_MCMC.compute_fitness": [[18, 20], ["mcmc.PB_MCMC.simulator.neg_log_posterior"], "methods", ["home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.neg_log_posterior"], ["", "def", "compute_fitness", "(", "self", ")", ":", "\n", "        ", "self", ".", "target_population", "=", "[", "self", ".", "simulator", ".", "neg_log_posterior", "(", "chain", ")", "for", "chain", "in", "self", ".", "population", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.algorithms.mcmc.PB_MCMC.run": [[21, 65], ["time.time", "mcmc.PB_MCMC.population.copy", "mcmc.PB_MCMC.target_population.copy", "min", "print", "range", "min", "len", "mcmc.PB_MCMC.proposal", "mcmc.PB_MCMC.simulator.neg_log_posterior", "mcmc.PB_MCMC.metropolis", "range", "numpy.random.uniform", "fitHistory.append", "fitDist.append", "error.append", "xlim.append", "len", "mcmc.PB_MCMC.simulator.hamming", "mcmc.PB_MCMC.pop_error", "time.time"], "methods", ["home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.algorithms.main_sampling.Sampling_Algorithm.proposal", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.neg_log_posterior", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.algorithms.mcmc.PB_MCMC.metropolis", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.hamming", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.algorithms.mcmc.PB_MCMC.pop_error"], ["", "def", "run", "(", "self", ",", "method", ",", "steps", ",", "runid", ")", ":", "\n", "        ", "initial_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "#initialize the population", "\n", "population", "=", "self", ".", "population", ".", "copy", "(", ")", "\n", "target_population", "=", "self", ".", "target_population", ".", "copy", "(", ")", "\n", "\n", "best_target", "=", "min", "(", "target_population", ")", "\n", "best_params", "=", "population", "[", "min", "(", "range", "(", "len", "(", "target_population", ")", ")", ",", "key", "=", "lambda", "i", ":", "target_population", "[", "i", "]", ")", "]", "\n", "\n", "fitHistory", "=", "[", "]", "\n", "fitDist", "=", "[", "]", "\n", "error", "=", "[", "]", "\n", "xlim", "=", "[", "]", "\n", "sample", "=", "250", "#*20", "\n", "\n", "n", "=", "0", "\n", "while", "n", "<", "steps", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "population", ")", ")", ":", "\n", "                ", "iprime", ",", "jprime", ",", "j", "=", "self", ".", "proposal", "(", "population", ",", "i", ",", "method", ")", "\n", "target_iprime", "=", "self", ".", "simulator", ".", "neg_log_posterior", "(", "iprime", ")", "\n", "alpha", "=", "self", ".", "metropolis", "(", "target_iprime", ",", "i", ",", "jprime", ",", "j", ",", "population", ")", "\n", "\n", "n", "+=", "1", "if", "jprime", "is", "None", "else", "2", "\n", "\n", "if", "alpha", ">=", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ")", ":", "\n", "                    ", "population", "[", "i", "]", "=", "iprime", "\n", "target_population", "[", "i", "]", "=", "target_iprime", "\n", "\n", "if", "target_iprime", "<=", "best_target", ":", "\n", "                        ", "best_target", "=", "target_iprime", "\n", "best_params", "=", "iprime", "\n", "\n", "", "", "if", "n", ">=", "sample", ":", "\n", "                    ", "fitHistory", ".", "append", "(", "self", ".", "simulator", ".", "hamming", "(", "best_params", ",", "self", ".", "simulator", ".", "parameters", ")", ")", "\n", "fitDist", ".", "append", "(", "best_target", ")", "\n", "\n", "error", ".", "append", "(", "self", ".", "pop_error", "(", "population", ")", ")", "\n", "xlim", ".", "append", "(", "n", ")", "\n", "sample", "+=", "500", "#*20", "\n", "\n", "", "", "", "print", "(", "'final {} for {} time ---- {} minutes ---'", ".", "format", "(", "runid", ",", "method", ",", "(", "time", ".", "time", "(", ")", "-", "initial_time", ")", "/", "60", ")", ")", "\n", "\n", "return", "best_params", ",", "fitHistory", ",", "fitDist", ",", "error", ",", "xlim", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.algorithms.mcmc.PB_MCMC.pop_error": [[67, 72], ["mcmc.PB_MCMC.simulator.hamming", "len"], "methods", ["home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.hamming"], ["", "def", "pop_error", "(", "self", ",", "population", ")", ":", "\n", "        ", "error", "=", "0.", "\n", "for", "chain", "in", "population", ":", "\n", "            ", "error", "+=", "self", ".", "simulator", ".", "hamming", "(", "chain", ",", "self", ".", "simulator", ".", "parameters", ")", "\n", "", "return", "error", "/", "len", "(", "population", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.algorithms.mcmc.PB_MCMC.metropolis": [[74, 84], ["min", "mcmc.PB_MCMC.simulator.neg_log_posterior", "mcmc.PB_MCMC.simulator.neg_log_posterior", "mcmc.PB_MCMC.simulator.neg_log_posterior", "min", "numpy.exp", "numpy.exp", "mcmc.PB_MCMC.simulator.neg_log_posterior"], "methods", ["home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.neg_log_posterior", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.neg_log_posterior", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.neg_log_posterior", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.neg_log_posterior"], ["", "def", "metropolis", "(", "self", ",", "post_iprime", ",", "i", ",", "jprime", ",", "j", ",", "population", ")", ":", "\n", "#based on negative log distribution", "\n", "        ", "if", "jprime", "is", "None", ":", "\n", "            ", "return", "min", "(", "1", ",", "np", ".", "exp", "(", "self", ".", "simulator", ".", "neg_log_posterior", "(", "population", "[", "i", "]", ")", "-", "post_iprime", ")", ")", "\n", "", "else", ":", "\n", "            ", "c1", "=", "post_iprime", "\n", "c2", "=", "self", ".", "simulator", ".", "neg_log_posterior", "(", "jprime", ")", "\n", "bi", "=", "self", ".", "simulator", ".", "neg_log_posterior", "(", "population", "[", "i", "]", ")", "\n", "bj", "=", "self", ".", "simulator", ".", "neg_log_posterior", "(", "population", "[", "j", "]", ")", "\n", "return", "min", "(", "1", ",", "np", ".", "exp", "(", "(", "bi", "-", "c1", ")", "+", "(", "bj", "-", "c2", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.experiments.main_abc_nas.execute": [[41, 47], ["np.random.seed", "simulation.initialize_population", "simulation.run"], "function", ["home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.algorithms.main_sampling.Sampling_Algorithm.initialize_population", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.algorithms.mcmc.PB_MCMC.run"], ["def", "execute", "(", "method", ",", "simulation", ",", "runid", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "runid", ")", "\n", "simulation", ".", "initialize_population", "(", ")", "\n", "error_pop", ",", "error", ",", "x_pos", ",", "ac_ratio", ",", "population", "=", "simulation", ".", "run", "(", "method", ",", "args", ".", "steps", ",", "runid", ")", "\n", "\n", "return", "(", "method", ",", "runid", ",", "error_pop", ",", "error", ",", "x_pos", ",", "ac_ratio", ",", "population", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.experiments.main_abc_nas.parallel": [[48, 57], ["multiprocessing.Pool", "range", "mp.Pool.close", "mp.Pool.join", "mp.Pool.apply_async"], "function", ["None"], ["", "def", "parallel", "(", "simulation", ")", ":", "\n", "    ", "pool", "=", "mp", ".", "Pool", "(", "processes", "=", "MAX_PROCESS", ")", "\n", "\n", "for", "k", "in", "range", "(", "args", ".", "eval", ")", ":", "\n", "        ", "for", "prop", "in", "simulation", ".", "settings", ":", "\n", "            ", "pool", ".", "apply_async", "(", "execute", ",", "(", "prop", ",", "simulation", ",", "k", ")", ",", "callback", "=", "log_result", ")", "\n", "\n", "", "", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.experiments.main_abc_nas.log_result": [[59, 76], ["pop_error[].append", "min_error[].append", "xlim[].append", "acceptance_r[].append", "str"], "function", ["None"], ["", "def", "log_result", "(", "result", ")", ":", "\n", "    ", "method", ",", "runid", ",", "error_pop", ",", "error", ",", "x_pos", ",", "ac_ratio", ",", "population", "=", "result", "\n", "\n", "global", "pop_error", "\n", "pop_error", "[", "method", "]", ".", "append", "(", "error_pop", ")", "\n", "\n", "global", "min_error", "\n", "min_error", "[", "method", "]", ".", "append", "(", "error", ")", "\n", "\n", "global", "xlim", "\n", "xlim", "[", "method", "]", ".", "append", "(", "x_pos", ")", "\n", "\n", "global", "acceptance_r", "\n", "acceptance_r", "[", "method", "]", ".", "append", "(", "ac_ratio", ")", "\n", "\n", "global", "pop_store", "\n", "pop_store", "[", "str", "(", "runid", ")", "]", "[", "method", "]", "=", "population", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.experiments.main_abc_mnist.execute": [[41, 47], ["np.random.seed", "simulation.initialize_population", "simulation.run"], "function", ["home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.algorithms.main_sampling.Sampling_Algorithm.initialize_population", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.algorithms.mcmc.PB_MCMC.run"], ["def", "execute", "(", "method", ",", "simulation", ",", "runid", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "runid", "+", "args", ".", "seed", ")", "\n", "simulation", ".", "initialize_population", "(", ")", "\n", "error_pop", ",", "error", ",", "x_pos", ",", "ac_ratio", ",", "population", "=", "simulation", ".", "run", "(", "method", ",", "args", ".", "steps", ",", "runid", ")", "\n", "\n", "return", "(", "method", ",", "runid", ",", "error_pop", ",", "error", ",", "x_pos", ",", "ac_ratio", ",", "population", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.experiments.main_abc_mnist.parallel": [[49, 58], ["multiprocessing.Pool", "range", "mp.Pool.close", "mp.Pool.join", "mp.Pool.apply_async"], "function", ["None"], ["", "def", "parallel", "(", "simulation", ")", ":", "\n", "    ", "pool", "=", "mp", ".", "Pool", "(", "processes", "=", "MAX_PROCESS", ")", "\n", "\n", "for", "k", "in", "range", "(", "args", ".", "eval", ")", ":", "\n", "        ", "for", "prop", "in", "simulation", ".", "settings", ":", "\n", "            ", "pool", ".", "apply_async", "(", "execute", ",", "(", "prop", ",", "simulation", ",", "k", ")", ",", "callback", "=", "log_result", ")", "\n", "\n", "", "", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.experiments.main_abc_mnist.log_result": [[59, 76], ["pop_error[].append", "min_error[].append", "xlim[].append", "acceptance_r[].append", "str"], "function", ["None"], ["", "def", "log_result", "(", "result", ")", ":", "\n", "    ", "method", ",", "runid", ",", "error_pop", ",", "error", ",", "x_pos", ",", "ac_ratio", ",", "population", "=", "result", "\n", "\n", "global", "pop_error", "\n", "pop_error", "[", "method", "]", ".", "append", "(", "error_pop", ")", "\n", "\n", "global", "min_error", "\n", "min_error", "[", "method", "]", ".", "append", "(", "error", ")", "\n", "\n", "global", "xlim", "\n", "xlim", "[", "method", "]", ".", "append", "(", "x_pos", ")", "\n", "\n", "global", "acceptance_r", "\n", "acceptance_r", "[", "method", "]", ".", "append", "(", "ac_ratio", ")", "\n", "\n", "global", "pop_store", "\n", "pop_store", "[", "str", "(", "runid", ")", "]", "[", "method", "]", "=", "population", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.experiments.main_abc_qmr.execute": [[37, 54], ["np.random.seed", "simulation.simulator.generate_parameters", "simulation.simulator.generate_data", "main_abc_qmr.compute_variability", "simulation.initialize_population", "simulation.run", "report_posterior", "str"], "function", ["home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.generate_parameters", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.generate_data", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.experiments.main_abc_qmr.compute_variability", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.algorithms.main_sampling.Sampling_Algorithm.initialize_population", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.algorithms.mcmc.PB_MCMC.run", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.utils.func_support.report_posterior"], ["def", "execute", "(", "method", ",", "simulation", ",", "runid", ")", ":", "\n", "\n", "    ", "'''\n    For every run initialize the chains with different initial  distribution\n    '''", "\n", "np", ".", "random", ".", "seed", "(", "runid", ")", "\n", "simulation", ".", "simulator", ".", "generate_parameters", "(", ")", "#create underlying true parameters", "\n", "simulation", ".", "simulator", ".", "generate_data", "(", "n", "=", "10", ")", "#sample K data for the given parameter settings", "\n", "run_var", "=", "compute_variability", "(", "simulation", ".", "simulator", ".", "data", ")", "\n", "\n", "simulation", ".", "initialize_population", "(", ")", "\n", "\n", "\n", "error_pop", ",", "error", ",", "x_pos", ",", "ac_ratio", ",", "population", "=", "simulation", ".", "run", "(", "method", ",", "args", ".", "steps", ",", "runid", ")", "\n", "# error, x_pos, ac_ratio, chains = simulation.run(method, args.steps, runid)", "\n", "post", "=", "report_posterior", "(", "simulation", ",", "runid", ",", "method", ",", "population", ",", "store", "+", "'/posterior'", "+", "str", "(", "args", ".", "epsilon", ")", ")", "\n", "return", "(", "method", ",", "runid", ",", "error_pop", ",", "error", ",", "x_pos", ",", "ac_ratio", ",", "run_var", ",", "post", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.experiments.main_abc_qmr.parallel": [[57, 67], ["multiprocessing.Pool", "range", "mp.Pool.close", "mp.Pool.join", "mp.Pool.apply_async"], "function", ["None"], ["", "def", "parallel", "(", "simulation", ")", ":", "\n", "\n", "    ", "pool", "=", "mp", ".", "Pool", "(", "processes", "=", "MAX_PROCESS", ")", "\n", "\n", "for", "k", "in", "range", "(", "args", ".", "eval", ")", ":", "\n", "        ", "for", "proposal", "in", "simulation", ".", "settings", ":", "\n", "            ", "pool", ".", "apply_async", "(", "execute", ",", "(", "proposal", ",", "simulation", ",", "k", ")", ",", "callback", "=", "log_result", ")", "\n", "\n", "", "", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.experiments.main_abc_qmr.log_result": [[68, 94], ["pop_error[].append", "min_error[].append", "xlim[].append", "acceptance_r[].append", "post_val[].append", "str"], "function", ["None"], ["", "def", "log_result", "(", "result", ")", ":", "\n", "    ", "method", ",", "runid", ",", "error_pop", ",", "error", ",", "x_pos", ",", "ac_ratio", ",", "run_var", ",", "post", "=", "result", "\n", "\n", "global", "pop_error", "\n", "pop_error", "[", "method", "]", ".", "append", "(", "error_pop", ")", "\n", "\n", "global", "min_error", "\n", "min_error", "[", "method", "]", ".", "append", "(", "error", ")", "\n", "\n", "global", "xlim", "\n", "xlim", "[", "method", "]", ".", "append", "(", "x_pos", ")", "\n", "\n", "global", "acceptance_r", "\n", "acceptance_r", "[", "method", "]", ".", "append", "(", "ac_ratio", ")", "\n", "\n", "global", "variability", "\n", "variability", "[", "str", "(", "runid", ")", "]", "[", "method", "]", "=", "run_var", "\n", "\n", "global", "output_post", "\n", "output_post", "[", "runid", "+", "1", "]", "[", "method", "]", "=", "post", "[", "0", "]", "\n", "\n", "global", "output_true", "\n", "output_true", "[", "runid", "+", "1", "]", "[", "method", "]", "=", "post", "[", "1", "]", "\n", "\n", "global", "post_val", "\n", "post_val", "[", "method", "]", ".", "append", "(", "post", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.experiments.main_abc_qmr.compute_variability": [[97, 110], ["range", "range", "max", "results.append", "sum"], "function", ["None"], ["", "def", "compute_variability", "(", "matrix", ")", ":", "\n", "    ", "results", "=", "[", "]", "\n", "for", "col_id", "in", "range", "(", "matrix", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "null", "=", "0", "\n", "ones", "=", "0", "\n", "for", "row_id", "in", "range", "(", "matrix", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "matrix", "[", "row_id", ",", "col_id", "]", "==", "0", "or", "matrix", "[", "row_id", ",", "col_id", "]", "==", "-", "1", ":", "\n", "                ", "null", "+=", "1", "\n", "", "else", ":", "\n", "                ", "ones", "+=", "1", "\n", "", "", "per", "=", "max", "(", "null", "/", "matrix", ".", "shape", "[", "0", "]", ",", "ones", "/", "matrix", ".", "shape", "[", "0", "]", ")", "\n", "results", ".", "append", "(", "per", ")", "\n", "", "return", "sum", "(", "results", ")", "/", "matrix", ".", "shape", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.experiments.main_mcmc.execute": [[37, 54], ["np.random.seed", "simulation.initialize_population", "simulation.compute_fitness", "simulation.run", "text_output", "simulation.simulator.generate_parameters", "simulation.simulator.generate_data"], "function", ["home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.algorithms.main_sampling.Sampling_Algorithm.initialize_population", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.algorithms.mcmc.PB_MCMC.compute_fitness", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.algorithms.mcmc.PB_MCMC.run", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.utils.func_support.text_output", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.generate_parameters", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.generate_data"], ["def", "execute", "(", "method", ",", "simulation", ",", "runid", ")", ":", "\n", "\n", "    ", "np", ".", "random", ".", "seed", "(", "runid", ")", "\n", "\n", "if", "not", "args", ".", "fB", ":", "\n", "        ", "simulation", ".", "simulator", ".", "generate_parameters", "(", ")", "# create b truth", "\n", "simulation", ".", "simulator", ".", "generate_data", "(", ")", "# sample findings for the generated instance", "\n", "\n", "", "simulation", ".", "initialize_population", "(", ")", "\n", "simulation", ".", "compute_fitness", "(", ")", "\n", "\n", "bestSolution", ",", "fitHistory", ",", "fitDist", ",", "error", ",", "x_pos", "=", "simulation", ".", "run", "(", "method", ",", "args", ".", "steps", ",", "runid", ")", "\n", "\n", "global", "store", "\n", "text_output", "(", "method", ",", "runid", ",", "bestSolution", ",", "simulation", ",", "store", ")", "#CHECK THIS", "\n", "\n", "return", "(", "method", ",", "fitHistory", ",", "fitDist", ",", "error", ",", "x_pos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.experiments.main_mcmc.parallel": [[57, 68], ["multiprocessing.Pool", "range", "mp.Pool.close", "mp.Pool.join", "mp.Pool.apply_async"], "function", ["None"], ["", "def", "parallel", "(", "simulation", ")", ":", "\n", "\n", "\n", "    ", "pool", "=", "mp", ".", "Pool", "(", "processes", "=", "MAX_PROCESS", ")", "\n", "\n", "for", "k", "in", "range", "(", "args", ".", "eval", ")", ":", "\n", "        ", "for", "proposal", "in", "simulation", ".", "settings", ":", "\n", "            ", "pool", ".", "apply_async", "(", "execute", ",", "(", "proposal", ",", "simulation", ",", "k", ")", ",", "callback", "=", "log_result", ")", "\n", "\n", "", "", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.experiments.main_mcmc.log_result": [[70, 85], ["best_error[].append", "post_dist[].append", "pop_error[].append", "xlim[].append"], "function", ["None"], ["", "def", "log_result", "(", "result", ")", ":", "\n", "\n", "    ", "method", ",", "error", ",", "dist", ",", "pop", ",", "x", "=", "result", "\n", "global", "results", "\n", "best_error", "[", "method", "]", ".", "append", "(", "error", ")", "\n", "\n", "global", "post_dist", "\n", "post_dist", "[", "method", "]", ".", "append", "(", "dist", ")", "\n", "\n", "\n", "global", "pop_error", "\n", "pop_error", "[", "method", "]", ".", "append", "(", "pop", ")", "\n", "\n", "global", "xlim", "\n", "xlim", "[", "method", "]", ".", "append", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.kernels.proposals.Proposals.__init__": [[5, 8], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "pflip", ",", "pcross", ")", ":", "\n", "        ", "self", ".", "pflip", "=", "pflip", "\n", "self", ".", "pcross", "=", "pcross", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.kernels.proposals.Proposals.bit_flip": [[9, 16], ["chain.copy().flatten", "enumerate", "numpy.reshape", "chain.flatten", "proposals.Proposals.flip", "chain.copy"], "methods", ["home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.kernels.proposals.Proposals.flip"], ["", "def", "bit_flip", "(", "self", ",", "chain", ")", ":", "\n", "        ", "shape", "=", "chain", ".", "shape", "\n", "new", "=", "chain", ".", "copy", "(", ")", ".", "flatten", "(", ")", "\n", "for", "id", ",", "bit", "in", "enumerate", "(", "chain", ".", "flatten", "(", ")", ")", ":", "\n", "            ", "new", "[", "id", "]", "=", "self", ".", "flip", "(", "bit", ")", "\n", "", "new", "=", "np", ".", "reshape", "(", "new", ",", "shape", ")", "\n", "return", "new", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.kernels.proposals.Proposals.crossover": [[17, 25], ["chain_i.copy", "chain_j.copy", "enumerate", "numpy.random.uniform"], "methods", ["None"], ["", "def", "crossover", "(", "self", ",", "chain_i", ",", "chain_j", ")", ":", "\n", "        ", "c1", "=", "chain_i", ".", "copy", "(", ")", "\n", "c2", "=", "chain_j", ".", "copy", "(", ")", "\n", "for", "idx", ",", "bit", "in", "enumerate", "(", "chain_i", ")", ":", "\n", "            ", "if", "self", ".", "pcross", ">=", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ")", ":", "\n", "                ", "c2", "[", "idx", "]", "=", "bit", "\n", "c1", "[", "idx", "]", "=", "chain_j", "[", "idx", "]", "\n", "", "", "return", "c1", ",", "c2", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.kernels.proposals.Proposals.xor": [[26, 28], ["numpy.logical_xor().astype", "numpy.logical_xor", "numpy.logical_xor"], "methods", ["None"], ["", "def", "xor", "(", "self", ",", "chain_i", ",", "chain_j", ",", "chain_k", ")", ":", "\n", "        ", "return", "np", ".", "logical_xor", "(", "chain_i", ",", "np", ".", "logical_xor", "(", "chain_j", ",", "chain_k", ")", ")", ".", "astype", "(", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.kernels.proposals.Proposals.flip": [[30, 33], ["numpy.random.uniform"], "methods", ["None"], ["", "def", "flip", "(", "self", ",", "val", ")", ":", "\n", "        ", "bit", "=", "1", "-", "val", "if", "self", ".", "pflip", ">=", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ")", "else", "val", "\n", "return", "bit", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.kernels.proposals.Proposals.dde_mc": [[35, 39], ["numpy.logical_xor().astype", "proposals.Proposals.bit_flip", "numpy.logical_xor().astype", "numpy.logical_xor", "numpy.logical_xor"], "methods", ["home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.kernels.proposals.Proposals.bit_flip"], ["", "def", "dde_mc", "(", "self", ",", "i", ",", "j", ",", "k", ")", ":", "\n", "        ", "diff", "=", "np", ".", "logical_xor", "(", "j", ",", "k", ")", ".", "astype", "(", "int", ")", "\n", "mut_diff", "=", "self", ".", "bit_flip", "(", "diff", ")", "\n", "return", "np", ".", "logical_xor", "(", "i", ",", "mut_diff", ")", ".", "astype", "(", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.kernels.proposals.Proposals.dde_mc1": [[41, 44], ["numpy.logical_xor", "proposals.Proposals.bit_flip", "numpy.logical_xor().astype", "numpy.logical_xor"], "methods", ["home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.kernels.proposals.Proposals.bit_flip"], ["", "def", "dde_mc1", "(", "self", ",", "chain_i", ",", "chain_j", ",", "chain_k", ")", ":", "\n", "        ", "xor", "=", "np", ".", "logical_xor", "(", "chain_i", ",", "np", ".", "logical_xor", "(", "chain_j", ",", "chain_k", ")", ".", "astype", "(", "int", ")", ")", "\n", "return", "self", ".", "bit_flip", "(", "xor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.kernels.proposals.Proposals.dde_mc2": [[45, 49], ["numpy.logical_xor().astype", "numpy.logical_xor().astype", "numpy.logical_xor().astype", "numpy.logical_xor", "numpy.logical_xor", "numpy.logical_xor", "numpy.random.binomial", "len"], "methods", ["None"], ["", "def", "dde_mc2", "(", "self", ",", "chain_i", ",", "chain_j", ",", "chain_k", ")", ":", "\n", "        ", "diff", "=", "np", ".", "logical_xor", "(", "chain_j", ",", "chain_k", ")", ".", "astype", "(", "int", ")", "\n", "ep_diff", "=", "np", ".", "logical_xor", "(", "diff", ",", "np", ".", "random", ".", "binomial", "(", "1", ",", "0.5", ",", "len", "(", "diff", ")", ")", ")", ".", "astype", "(", "int", ")", "\n", "return", "np", ".", "logical_xor", "(", "chain_i", ",", "ep_diff", ")", ".", "astype", "(", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.kernels.proposals.Proposals.indepent_sampler": [[51, 53], ["numpy.random.binomial", "len"], "methods", ["None"], ["", "def", "indepent_sampler", "(", "self", ",", "chain", ")", ":", "\n", "        ", "return", "np", ".", "random", ".", "binomial", "(", "1", ",", "0.5", ",", "len", "(", "chain", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.evaluate.eval_abc_mnist.eval_test": [[12, 42], ["numpy.zeros", "enumerate", "numpy.mean", "eval_abc_mnist.report_txt", "pickle.load", "pkl.load.items", "pandas.DataFrame", "use_case.distance", "numpy.std", "numpy.sqrt", "numpy.mean", "len", "open", "data.items", "numpy.array", "len", "pd.DataFrame.mode", "method_dict.items", "str", "enumerate", "use_case.simulate", "use_case.distance", "Y_hat.append", "all_min_err.append"], "function", ["home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.evaluate.eval_abc_nas.report_txt", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.mnist.MNIST.load", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.distance", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.simulate", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.distance"], ["def", "eval_test", "(", "method_id", ")", ":", "\n", "    ", "all_min_err", "=", "[", "]", "\n", "theta_best", "=", "None", "\n", "error_argmin", "=", "np", ".", "inf", "\n", "total_error", "=", "np", ".", "zeros", "(", "(", "len", "(", "storage", ")", ",", ")", ")", "\n", "for", "id", ",", "store", "in", "enumerate", "(", "storage", ")", ":", "\n", "        ", "dict", "=", "pkl", ".", "load", "(", "open", "(", "store", "+", "'pop_store'", "+", "str", "(", "type", ")", "+", "'.pkl'", ",", "'rb'", ")", ")", "\n", "Y_hat", "=", "[", "]", "\n", "for", "runid", ",", "data", "in", "dict", ".", "items", "(", ")", ":", "\n", "            ", "for", "method", ",", "method_dict", "in", "data", ".", "items", "(", ")", ":", "\n", "                ", "if", "method", "==", "method_id", ":", "\n", "                    ", "for", "cross_eval", ",", "pop", "in", "method_dict", ".", "items", "(", ")", ":", "\n", "                        ", "for", "idx", ",", "chain", "in", "enumerate", "(", "pop", ")", ":", "\n", "                            ", "y_hat", "=", "use_case", ".", "simulate", "(", "chain", ",", "eval", "=", "True", ")", "\n", "error_min", "=", "use_case", ".", "distance", "(", "y_hat", ",", "eval", "=", "True", ")", "\n", "Y_hat", ".", "append", "(", "y_hat", ")", "\n", "all_min_err", ".", "append", "(", "error_min", ")", "\n", "if", "error_min", "<", "error_argmin", ":", "\n", "                                ", "error_argmin", "=", "error_min", "\n", "theta_best", "=", "y_hat", "\n", "\n", "", "", "", "", "", "", "Y_df", "=", "pd", ".", "DataFrame", "(", "Y_hat", ")", "\n", "Y_mode", "=", "np", ".", "array", "(", "Y_df", ".", "mode", "(", "axis", "=", "0", ")", ")", "[", "0", "]", "\n", "error", "=", "use_case", ".", "distance", "(", "Y_mode", ",", "eval", "=", "True", ")", "\n", "total_error", "[", "id", "]", "=", "error", "\n", "\n", "", "avg_error", "=", "np", ".", "mean", "(", "total_error", ")", "\n", "ste", "=", "np", ".", "std", "(", "total_error", ")", "/", "np", ".", "sqrt", "(", "len", "(", "total_error", ")", ")", "\n", "dist", "=", "1", "-", "np", ".", "mean", "(", "theta_best", ")", "\n", "report_txt", "(", "method_id", ",", "avg_error", ",", "ste", ",", "error_argmin", ",", "all_min_err", ",", "dist", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.evaluate.eval_abc_mnist.report_txt": [[43, 50], ["open", "open.write", "open.write", "open.write", "open.write", "open.write", "str", "numpy.std", "numpy.sqrt", "numpy.array", "len"], "function", ["None"], ["", "def", "report_txt", "(", "method_id", ",", "avg_error", ",", "ste", ",", "error_argmin", ",", "all_argmin", ",", "dist", ")", ":", "\n", "    ", "textfile", "=", "open", "(", "res", "+", "'test_results_'", "+", "str", "(", "type", ")", "+", "'.txt'", ",", "'a+'", ")", "\n", "textfile", ".", "write", "(", "'method {}\\n'", ".", "format", "(", "method_id", ")", ")", "\n", "textfile", ".", "write", "(", "'avg error ensemble {} ste {} \\n'", ".", "format", "(", "avg_error", ",", "ste", ")", ")", "\n", "textfile", ".", "write", "(", "'min error {} ste {} \\n'", ".", "format", "(", "error_argmin", ",", "np", ".", "std", "(", "np", ".", "array", "(", "all_argmin", ")", ")", "/", "np", ".", "sqrt", "(", "len", "(", "all_argmin", ")", ")", ")", ")", "\n", "textfile", ".", "write", "(", "'percentage of 0s: {}'", ".", "format", "(", "dist", ")", ")", "\n", "textfile", ".", "write", "(", "'---------------------------------\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.evaluate.eval_abc_nas.compute_argmin": [[11, 35], ["data.items", "eval_abc_nas.report_txt", "res.items", "numpy.std", "numpy.sqrt", "len", "numpy.mean", "numpy.array", "len", "data.keys", "numpy.zeros", "enumerate", "all.append", "use_case.simulate", "use_case.distance", "numpy.min", "numpy.mean", "numpy.std", "len", "str", "numpy.argmin"], "function", ["home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.evaluate.eval_abc_nas.report_txt", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.simulate", "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.testbeds.qmr_dt.QMR_DT.distance"], ["def", "compute_argmin", "(", "method_id", ")", ":", "\n", "    ", "all", "=", "[", "]", "\n", "best", "=", "(", "np", ".", "inf", ",", "None", ")", "\n", "results", "=", "{", "}", "\n", "for", "runid", ",", "res", "in", "data", ".", "items", "(", ")", ":", "\n", "        ", "for", "method", ",", "population", "in", "res", ".", "items", "(", ")", ":", "\n", "            ", "if", "method", "==", "method_id", ":", "\n", "                ", "pop_test_error", "=", "np", ".", "zeros", "(", "(", "len", "(", "population", ")", ",", ")", ")", "\n", "for", "idx", ",", "chain", "in", "enumerate", "(", "population", ")", ":", "\n", "                    ", "Y_hat", "=", "use_case", ".", "simulate", "(", "chain", ",", "eval", "=", "True", ")", "\n", "error", "=", "use_case", ".", "distance", "(", "Y_hat", ",", "eval", "=", "True", ")", "\n", "pop_test_error", "[", "idx", "]", "=", "error", "\n", "\n", "", "min_error", "=", "(", "np", ".", "min", "(", "pop_test_error", ")", ",", "population", "[", "np", ".", "argmin", "(", "pop_test_error", ")", "]", ")", "\n", "all", ".", "append", "(", "min_error", "[", "0", "]", ")", "\n", "if", "min_error", "[", "0", "]", "<", "best", "[", "0", "]", ":", "\n", "                    ", "best", "=", "min_error", "\n", "\n", "", "results", "[", "str", "(", "runid", ")", "]", "=", "(", "np", ".", "mean", "(", "pop_test_error", ")", ",", "np", ".", "std", "(", "pop_test_error", ")", ")", "\n", "\n", "", "", "", "results", "[", "'min_error'", "]", "=", "best", "[", "0", "]", "\n", "results", "[", "'dist'", "]", "=", "(", "1", "-", "np", ".", "mean", "(", "best", "[", "1", "]", ")", ")", "*", "100", "\n", "results", "[", "'ste'", "]", "=", "np", ".", "std", "(", "np", ".", "array", "(", "all", ")", ")", "/", "np", ".", "sqrt", "(", "len", "(", "all", ")", ")", "\n", "report_txt", "(", "method_id", ",", "results", ",", "len", "(", "data", ".", "keys", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IlzeAmandaA_ABCdiscrete.evaluate.eval_abc_nas.report_txt": [[37, 46], ["open", "open.write", "open.write", "open.write", "open.write", "range", "open.write", "open.write", "str", "str", "str"], "function", ["None"], ["", "def", "report_txt", "(", "method", ",", "results", ",", "N", ")", ":", "\n", "    ", "textfile", "=", "open", "(", "res", "+", "'test_error_'", "+", "type", "+", "'.txt'", ",", "'a+'", ")", "\n", "textfile", ".", "write", "(", "'Results for proposal {} \\n'", ".", "format", "(", "method", ")", ")", "\n", "textfile", ".", "write", "(", "'Minimum error obtain on test set {} (ste {}) \\n'", ".", "format", "(", "results", "[", "'min_error'", "]", ",", "results", "[", "'ste'", "]", ")", ")", "\n", "textfile", ".", "write", "(", "'With a population chain of 0 distribution of {} \\n'", ".", "format", "(", "results", "[", "'dist'", "]", ")", ")", "\n", "textfile", ".", "write", "(", "'The avg error (Std) per run across chains: \\n'", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "textfile", ".", "write", "(", "'run {}: error {}, std {} \\n'", ".", "format", "(", "str", "(", "i", ")", ",", "results", "[", "str", "(", "i", ")", "]", "[", "0", "]", ",", "results", "[", "str", "(", "i", ")", "]", "[", "1", "]", ")", ")", "\n", "", "textfile", ".", "write", "(", "'---------------------------------\\n'", ")", "\n", "\n"]]}