{"home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.Latent_potential.__init__": [[14, 20], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__"], ["    ", "def", "__init__", "(", "self", ",", "generator", ",", "discriminator", ",", "latent_prior", ",", "temperature", "=", "100", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "generator", "=", "generator", "\n", "self", ".", "discriminator", "=", "discriminator", "\n", "self", ".", "latent_prior", "=", "latent_prior", "\n", "self", ".", "temperature", "=", "temperature", "\n", "", "def", "forward", "(", "self", ",", "Z", ")", ":", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.Latent_potential.forward": [[20, 26], ["samplers.Latent_potential.generator", "samplers.Latent_potential.discriminator", "samplers.Latent_potential.latent_prior.log_prob"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MAFMOG.log_prob"], ["", "def", "forward", "(", "self", ",", "Z", ")", ":", "\n", "        ", "out", "=", "self", ".", "generator", "(", "Z", ")", "\n", "out", "=", "self", ".", "discriminator", "(", "out", ")", "\n", "out", "=", "-", "self", ".", "latent_prior", ".", "log_prob", "(", "Z", ")", "+", "self", ".", "temperature", "*", "out", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.Cold_Latent_potential.__init__": [[29, 33], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__"], ["    ", "def", "__init__", "(", "self", ",", "generator", ",", "discriminator", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "generator", "=", "generator", "\n", "self", ".", "discriminator", "=", "discriminator", "\n", "", "def", "forward", "(", "self", ",", "Z", ")", ":", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.Cold_Latent_potential.forward": [[33, 37], ["samplers.Cold_Latent_potential.generator", "samplers.Cold_Latent_potential.discriminator"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "Z", ")", ":", "\n", "        ", "out", "=", "self", ".", "generator", "(", "Z", ")", "\n", "out", "=", "self", ".", "discriminator", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.Independent_Latent_potential.__init__": [[40, 46], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__"], ["    ", "def", "__init__", "(", "self", ",", "generator", ",", "discriminator", ",", "latent_prior", ")", ":", "\n", "#super(Latent_potential).__init__()", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "generator", "=", "generator", "\n", "self", ".", "discriminator", "=", "discriminator", "\n", "self", ".", "latent_prior", "=", "latent_prior", "\n", "", "def", "forward", "(", "self", ",", "Z", ")", ":", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.Independent_Latent_potential.forward": [[46, 51], ["samplers.Independent_Latent_potential.generator", "samplers.Independent_Latent_potential.discriminator"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "Z", ")", ":", "\n", "#with torch.no_grad():", "\n", "        ", "out", "=", "self", ".", "generator", "(", "Z", ")", "\n", "out", "=", "self", ".", "discriminator", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.Dot_Latent_potential.__init__": [[54, 60], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__"], ["    ", "def", "__init__", "(", "self", ",", "generator", ",", "discriminator", ",", "latent_prior", ")", ":", "\n", "#super(Latent_potential).__init__()", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "generator", "=", "generator", "\n", "self", ".", "discriminator", "=", "discriminator", "\n", "self", ".", "latent_prior", "=", "latent_prior", "\n", "", "def", "forward", "(", "self", ",", "Z", ")", ":", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.Dot_Latent_potential.forward": [[60, 65], ["samplers.Dot_Latent_potential.generator", "samplers.Dot_Latent_potential.discriminator", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "Z", ")", ":", "\n", "#with torch.no_grad():", "\n", "        ", "out", "=", "self", ".", "generator", "(", "Z", ")", "\n", "out", "=", "self", ".", "discriminator", "(", "out", ")", "\n", "return", "torch", ".", "norm", "(", "Z", ",", "dim", "=", "1", ")", "+", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.Grad_potential.__init__": [[67, 70], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__"], ["    ", "def", "__init__", "(", "self", ",", "potential", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "potential", "=", "potential", "\n", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.Grad_potential.forward": [[70, 75], ["X.requires_grad_", "samplers.Grad_potential.potential().sum", "samplers.Grad_potential.backward", "samplers.Grad_potential.potential"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "X", ".", "requires_grad_", "(", ")", "\n", "out", "=", "self", ".", "potential", "(", "X", ")", ".", "sum", "(", ")", "\n", "out", ".", "backward", "(", ")", "\n", "return", "X", ".", "grad", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.Grad_cond_potential.__init__": [[77, 80], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__"], ["    ", "def", "__init__", "(", "self", ",", "potential", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "potential", "=", "potential", "\n", "", "def", "forward", "(", "self", ",", "X", ",", "labels", ")", ":", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.Grad_cond_potential.forward": [[80, 86], ["X.requires_grad_", "samplers.Grad_cond_potential.potential().sum", "samplers.Grad_cond_potential.backward", "samplers.Grad_cond_potential.potential"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ",", "labels", ")", ":", "\n", "        ", "X", ".", "requires_grad_", "(", ")", "\n", "Z", "=", "X", ",", "labels", "\n", "out", "=", "self", ".", "potential", "(", "Z", ")", ".", "sum", "(", ")", "\n", "out", ".", "backward", "(", ")", "\n", "return", "X", ".", "grad", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.LMCsampler.__init__": [[89, 103], ["samplers.Grad_potential"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "potential", ",", "momentum", ",", "T", "=", "100", ",", "num_steps_min", "=", "10", ",", "num_steps_max", "=", "20", ",", "gamma", "=", "1e-2", ",", "kappa", "=", "4e-2", ")", ":", "\n", "\n", "        ", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "potential", "=", "potential", "\n", "\n", "self", ".", "num_steps_min", "=", "num_steps_min", "\n", "self", ".", "num_steps_max", "=", "num_steps_max", "\n", "self", ".", "kappa", "=", "kappa", "\n", "self", ".", "gamma", "=", "gamma", "\n", "\n", "\n", "self", ".", "grad_potential", "=", "Grad_potential", "(", "self", ".", "potential", ")", "\n", "self", ".", "T", "=", "T", "\n", "self", ".", "dUdX", "=", "None", "\n", "", "def", "sample", "(", "self", ",", "prior_z", ",", "sample_chain", "=", "False", ",", "T", "=", "None", ",", "thinning", "=", "10", ")", ":", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.LMCsampler.sample": [[103, 141], ["samplers.LMCsampler.potential.eval", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "prior_z[].clone().detach", "prior_z[].clone().detach", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "t_extract_list.append", "Z_extract_list.append", "avg_acceptence_list.append", "prior_z.clone().detach", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "samplers.LMCsampler.leapfrog", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "prior_z[].clone", "prior_z[].clone", "prior_z.clone", "t_extract_list.append", "Z_extract_list.append", "avg_acceptence_list.append", "torch.cat().clone().detach", "torch.cat().clone().detach", "torch.cat().clone().detach", "torch.cat().clone().detach", "prior_z[].clone().detach.clone().detach().cpu", "torch.cat().clone", "torch.cat().clone", "torch.cat().clone", "torch.cat().clone", "prior_z[].clone().detach.clone().detach", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "prior_z[].clone().detach.clone", "prior_z[].clone().detach.unsqueeze", "prior_z[].clone().detach.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.TrainerToy.eval", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.HMCsampler.leapfrog"], ["", "def", "sample", "(", "self", ",", "prior_z", ",", "sample_chain", "=", "False", ",", "T", "=", "None", ",", "thinning", "=", "10", ")", ":", "\n", "        ", "if", "T", "is", "None", ":", "\n", "            ", "T", "=", "self", ".", "T", "\n", "\n", "\n", "#self.momentum.eval()", "\n", "", "self", ".", "potential", ".", "eval", "(", ")", "\n", "t_extract_list", "=", "[", "]", "\n", "Z_extract_list", "=", "[", "]", "\n", "avg_acceptence_list", "=", "[", "]", "\n", "\n", "#num_steps = np.random.randint(self.num_steps_min, self.num_steps_max + 1)", "\n", "num_steps", "=", "1", "\n", "U", "=", "torch", ".", "zeros", "(", "[", "prior_z", ".", "shape", "[", "0", "]", "]", ")", ".", "to", "(", "prior_z", ".", "device", ")", "\n", "\n", "Z_t", "=", "prior_z", "[", ":", ",", ":", ",", "0", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "V_t", "=", "prior_z", "[", ":", ",", ":", ",", "1", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "sampler", "=", "torch", ".", "distributions", ".", "Normal", "(", "torch", ".", "zeros_like", "(", "Z_t", ")", ",", "1.", ")", "\n", "#V_t = self.momentum.sample([Z_t.shape[0]])", "\n", "t_extract_list", ".", "append", "(", "0", ")", "\n", "Z_extract_list", ".", "append", "(", "Z_t", ")", "\n", "avg_acceptence_list", ".", "append", "(", "1.", ")", "\n", "\n", "Z_0", "=", "prior_z", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "V_0", "=", "torch", ".", "zeros_like", "(", "Z_t", ")", "\n", "gamma", "=", "self", ".", "gamma", "\n", "for", "t", "in", "range", "(", "1", ",", "T", "+", "1", ")", ":", "\n", "            ", "Z_t", ",", "V_t", "=", "self", ".", "leapfrog", "(", "Z_t", ",", "V_t", ",", "self", ".", "grad_potential", ",", "sampler", ",", "T", "=", "num_steps", ",", "lmbda", "=", "gamma", ",", "kappa", "=", "self", ".", "kappa", ")", "\n", "\n", "if", "sample_chain", "and", "thinning", "!=", "0", "and", "t", "%", "thinning", "==", "0", ":", "\n", "                ", "t_extract_list", ".", "append", "(", "t", ")", "\n", "Z_extract_list", ".", "append", "(", "Z_t", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "#avg_acceptence_list.append(acc_prob.mean().item())", "\n", "avg_acceptence_list", ".", "append", "(", "1.", ")", "\n", "#print('iteration: '+ str(t))", "\n", "", "", "if", "not", "sample_chain", ":", "\n", "            ", "return", "torch", ".", "cat", "(", "[", "Z_t", ".", "unsqueeze", "(", "-", "1", ")", ",", "V_t", ".", "unsqueeze", "(", "-", "1", ")", "]", ",", "dim", "=", "-", "1", ")", ".", "clone", "(", ")", ".", "detach", "(", ")", ",", "1.", "\n", "", "return", "t_extract_list", ",", "Z_extract_list", ",", "avg_acceptence_list", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.LMCsampler.leapfrog": [[142, 163], ["x.clone().detach", "v.clone().detach", "numpy.exp", "numpy.sqrt", "range", "numpy.sqrt", "x.clone().detach.detach_", "v.clone().detach.detach_", "grad_x", "x.clone", "v.clone", "numpy.exp", "sampler.sample"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.FlowSequential.sample"], ["", "def", "leapfrog", "(", "self", ",", "x", ",", "v", ",", "grad_x", ",", "sampler", ",", "T", "=", "100", ",", "lmbda", "=", "1e-2", ",", "kappa", "=", "4e-2", ")", ":", "\n", "        ", "x_t", "=", "x", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "v_t", "=", "v", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "gamma", "=", "2.", "*", "np", ".", "sqrt", "(", "lmbda", ")", "\n", "C", "=", "np", ".", "exp", "(", "-", "kappa", "*", "gamma", ")", "\n", "D", "=", "np", ".", "sqrt", "(", "1", "-", "np", ".", "exp", "(", "-", "2", "*", "kappa", "*", "gamma", ")", ")", "\n", "for", "t", "in", "range", "(", "T", ")", ":", "\n", "# reset computation graph", "\n", "            ", "x_t", ".", "detach_", "(", ")", "\n", "v_t", ".", "detach_", "(", ")", "\n", "x_half", "=", "x_t", "+", "gamma", "/", "2", "*", "v_t", "\n", "# calculate potentials and derivatives", "\n", "dUdX", "=", "grad_x", "(", "x_half", ")", "\n", "# update values", "\n", "v_half", "=", "v_t", "-", "gamma", "/", "2", "*", "dUdX", "\n", "v_tilde", "=", "C", "*", "v_half", "+", "D", "*", "sampler", ".", "sample", "(", ")", "\n", "#v_tilde  = v_half", "\n", "v_t", "=", "v_tilde", "-", "gamma", "/", "2", "*", "dUdX", "\n", "x_t", "=", "x_half", "+", "gamma", "/", "2", "*", "v_t", "\n", "\n", "", "return", "x_t", ",", "v_t", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.LMCsampler.hasing_metropolis": [[164, 181], ["potential", "potential", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "momentum", "momentum", "torch.relu", "torch.relu"], "methods", ["None"], ["", "def", "hasing_metropolis", "(", "self", ",", "Z_new", ",", "V_new", ",", "Z_0", ",", "V_0", ",", "potential", ",", "momentum", ",", "U", ")", ":", "\n", "        ", "momentum_0", "=", "-", "momentum", "(", "V_0", ")", "\n", "potential_0", "=", "potential", "(", "Z_0", ")", "\n", "potential_new", "=", "potential", "(", "Z_new", ")", "\n", "momentum_new", "=", "-", "momentum", "(", "V_new", ")", "\n", "\n", "H0", "=", "potential_0", "+", "momentum_0", "\n", "H", "=", "potential_new", "+", "momentum_new", "\n", "\n", "difference", "=", "-", "H", "+", "H0", "\n", "acc_prob", "=", "torch", ".", "exp", "(", "-", "F", ".", "relu", "(", "-", "difference", ")", ")", "\n", "accepted", "=", "U", "<", "acc_prob", "\n", "Z_out", "=", "1.", "*", "Z_0", "\n", "V_out", "=", "1.", "*", "V_0", "\n", "Z_out", "[", "accepted", "]", "=", "1.", "*", "Z_new", "[", "accepted", "]", "\n", "V_out", "[", "accepted", "]", "=", "1.", "*", "V_new", "[", "accepted", "]", "\n", "return", "Z_out", ",", "V_out", ",", "acc_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.LMCsampler.hasing_metropolis_2": [[182, 199], ["potential", "potential", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "momentum", "momentum", "torch.relu", "torch.relu"], "methods", ["None"], ["", "def", "hasing_metropolis_2", "(", "self", ",", "Z_new", ",", "V_new", ",", "Z_t", ",", "V_t", ",", "Z_0", ",", "V_0", ",", "potential", ",", "momentum", ",", "U", ")", ":", "\n", "        ", "momentum_0", "=", "-", "momentum", "(", "V_0", ")", "\n", "potential_0", "=", "potential", "(", "Z_0", ")", "\n", "potential_new", "=", "potential", "(", "Z_new", ")", "\n", "momentum_new", "=", "-", "momentum", "(", "V_new", ")", "\n", "\n", "H0", "=", "potential_0", "+", "momentum_0", "\n", "H", "=", "potential_new", "+", "momentum_new", "\n", "\n", "difference", "=", "-", "H", "+", "H0", "\n", "acc_prob", "=", "torch", ".", "exp", "(", "-", "F", ".", "relu", "(", "-", "difference", ")", ")", "\n", "accepted", "=", "U", "<", "acc_prob", "\n", "Z_out", "=", "1.", "*", "Z_t", "\n", "V_out", "=", "1.", "*", "V_t", "\n", "Z_out", "[", "accepted", "]", "=", "1.", "*", "Z_new", "[", "accepted", "]", "\n", "V_out", "[", "accepted", "]", "=", "1.", "*", "V_new", "[", "accepted", "]", "\n", "return", "Z_out", ",", "V_out", ",", "acc_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.HMCsampler.__init__": [[201, 215], ["samplers.Grad_potential"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "potential", ",", "momentum", ",", "T", "=", "100", ",", "num_steps_min", "=", "10", ",", "num_steps_max", "=", "20", ",", "gamma", "=", "1e-2", ",", "kappa", "=", "4e-2", ")", ":", "\n", "\n", "        ", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "potential", "=", "potential", "\n", "\n", "self", ".", "num_steps_min", "=", "num_steps_min", "\n", "self", ".", "num_steps_max", "=", "num_steps_max", "\n", "self", ".", "kappa", "=", "kappa", "\n", "self", ".", "gamma", "=", "gamma", "\n", "\n", "\n", "self", ".", "grad_potential", "=", "Grad_potential", "(", "self", ".", "potential", ")", "\n", "self", ".", "T", "=", "T", "\n", "self", ".", "dUdX", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.HMCsampler.sample": [[216, 251], ["torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "samplers.HMCsampler.potential.eval", "numpy.random.randint", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "prior_z.clone().detach", "t_extract_list.append", "Z_extract_list.append", "range", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "samplers.HMCsampler.momentum.sample", "U.uniform_.uniform_.uniform_", "samplers.HMCsampler.leapfrog", "samplers.HMCsampler.hasing_metropolis", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "prior_z.clone", "t_extract_list.append", "Z_extract_list.append", "accept_proba_list.append", "prior_z.clone().detach.clone().detach", "acc_prob.mean().item", "prior_z.clone().detach.clone().detach().cpu", "acc_prob.clone().detach().cpu", "prior_z.clone().detach.clone", "acc_prob.mean", "prior_z.clone().detach.clone().detach", "acc_prob.clone().detach", "prior_z.clone().detach.clone", "acc_prob.clone"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.TrainerToy.eval", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.FlowSequential.sample", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.HMCsampler.leapfrog", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.IndependentMetropolisHastings.hasing_metropolis"], ["", "def", "sample", "(", "self", ",", "prior_z", ",", "sample_chain", "=", "False", ",", "T", "=", "None", ",", "thinning", "=", "10", ")", ":", "\n", "        ", "if", "T", "is", "None", ":", "\n", "            ", "T", "=", "self", ".", "T", "\n", "", "sampler", "=", "torch", ".", "distributions", ".", "Normal", "(", "torch", ".", "zeros_like", "(", "prior_z", ")", ",", "1.", ")", "\n", "\n", "#self.momentum.eval()", "\n", "self", ".", "potential", ".", "eval", "(", ")", "\n", "t_extract_list", "=", "[", "]", "\n", "Z_extract_list", "=", "[", "]", "\n", "accept_proba_list", "=", "[", "]", "\n", "\n", "\n", "num_steps", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "num_steps_min", ",", "self", ".", "num_steps_max", "+", "1", ")", "\n", "num_steps", "=", "2", "\n", "U", "=", "torch", ".", "zeros", "(", "[", "prior_z", ".", "shape", "[", "0", "]", "]", ")", ".", "to", "(", "prior_z", ".", "device", ")", "\n", "\n", "Z_t", "=", "prior_z", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "t_extract_list", ".", "append", "(", "0", ")", "\n", "Z_extract_list", ".", "append", "(", "Z_t", ")", "\n", "\n", "for", "t", "in", "range", "(", "T", ")", ":", "\n", "# reset computation graph", "\n", "            ", "V_t", "=", "self", ".", "momentum", ".", "sample", "(", "[", "Z_t", ".", "shape", "[", "0", "]", "]", ")", "\n", "U", "=", "U", ".", "uniform_", "(", "0", ",", "1", ")", "\n", "Z_new", ",", "V_new", "=", "self", ".", "leapfrog", "(", "Z_t", ",", "V_t", ",", "self", ".", "grad_potential", ",", "sampler", ",", "T", "=", "num_steps", ",", "lmbda", "=", "self", ".", "gamma", ",", "kappa", "=", "self", ".", "kappa", ")", "\n", "V_new", "=", "-", "V_new", "\n", "Z_t", ",", "V_t", ",", "acc_prob", "=", "self", ".", "hasing_metropolis", "(", "Z_new", ",", "V_new", ",", "Z_t", ",", "V_t", ",", "self", ".", "potential", ",", "self", ".", "momentum", ".", "log_prob", ",", "U", ")", "\n", "# only if extracting the samples so we have a sequence of samples", "\n", "if", "sample_chain", "and", "thinning", "!=", "0", "and", "t", "%", "thinning", "==", "0", ":", "\n", "                ", "t_extract_list", ".", "append", "(", "t", ")", "\n", "Z_extract_list", ".", "append", "(", "Z_t", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "accept_proba_list", ".", "append", "(", "acc_prob", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "", "", "if", "not", "sample_chain", ":", "\n", "            ", "return", "Z_t", ".", "clone", "(", ")", ".", "detach", "(", ")", ",", "acc_prob", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "", "return", "t_extract_list", ",", "Z_extract_list", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.HMCsampler.leapfrog": [[252, 272], ["x.clone().detach", "v.clone().detach", "range", "numpy.sqrt", "x_out.clone.detach_", "v.clone().detach.detach_", "v_half.detach_", "x_out.clone", "x.clone", "v.clone", "grad_x().clone", "grad_x().clone", "grad_x", "grad_x"], "methods", ["None"], ["", "def", "leapfrog", "(", "self", ",", "x", ",", "v", ",", "grad_x", ",", "sampler", ",", "T", "=", "100", ",", "lmbda", "=", "1e-2", ",", "kappa", "=", "4e-2", ")", ":", "\n", "        ", "x_t", "=", "x", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "v_t", "=", "v", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "gamma", "=", "2.", "*", "np", ".", "sqrt", "(", "lmbda", ")", "\n", "for", "t", "in", "range", "(", "T", ")", ":", "\n", "# reset computation graph", "\n", "            ", "x_t", ".", "detach_", "(", ")", "\n", "v_t", ".", "detach_", "(", ")", "\n", "\n", "if", "self", ".", "dUdX", "is", "None", ":", "\n", "                ", "x_tmp", "=", "1.", "*", "x_t", "\n", "self", ".", "dUdX", "=", "grad_x", "(", "x_tmp", ")", ".", "clone", "(", ")", "\n", "# update values", "\n", "", "v_half", "=", "v_t", "-", "gamma", "/", "2", "*", "self", ".", "dUdX", "\n", "v_half", ".", "detach_", "(", ")", "\n", "x_out", "=", "x_t", "+", "gamma", "*", "v_half", "\n", "self", ".", "dUdX", "=", "1.", "*", "grad_x", "(", "x_out", ")", ".", "clone", "(", ")", "\n", "x_t", "=", "x_out", ".", "clone", "(", ")", "\n", "v_t", "=", "v_half", "-", "gamma", "/", "2", "*", "self", ".", "dUdX", "\n", "", "return", "x_t", ",", "v_t", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.HMCsampler.hasing_metropolis": [[274, 291], ["potential", "potential", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "momentum", "momentum", "torch.relu", "torch.relu"], "methods", ["None"], ["", "def", "hasing_metropolis", "(", "self", ",", "Z_new", ",", "V_new", ",", "Z_0", ",", "V_0", ",", "potential", ",", "momentum", ",", "U", ")", ":", "\n", "        ", "momentum_0", "=", "-", "momentum", "(", "V_0", ")", "\n", "potential_0", "=", "potential", "(", "Z_0", ")", "\n", "potential_new", "=", "potential", "(", "Z_new", ")", "\n", "momentum_new", "=", "-", "momentum", "(", "V_new", ")", "\n", "\n", "H0", "=", "potential_0", "+", "momentum_0", "\n", "H", "=", "potential_new", "+", "momentum_new", "\n", "\n", "difference", "=", "-", "H", "+", "H0", "\n", "acc_prob", "=", "torch", ".", "exp", "(", "-", "F", ".", "relu", "(", "-", "difference", ")", ")", "\n", "accepted", "=", "U", "<", "acc_prob", "\n", "Z_out", "=", "1.", "*", "Z_0", "\n", "V_out", "=", "1.", "*", "V_0", "\n", "Z_out", "[", "accepted", "]", "=", "1.", "*", "Z_new", "[", "accepted", "]", "\n", "V_out", "[", "accepted", "]", "=", "1.", "*", "V_new", "[", "accepted", "]", "\n", "return", "Z_out", ",", "V_out", ",", "acc_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.LangevinSampler.__init__": [[294, 303], ["samplers.Grad_potential"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "potential", ",", "T", "=", "100", ",", "gamma", "=", "1e-2", ")", ":", "\n", "\n", "        ", "self", ".", "potential", "=", "potential", "\n", "\n", "#self.num_steps_min = num_steps_min", "\n", "#self.num_steps_max = num_steps_max", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "grad_potential", "=", "Grad_potential", "(", "self", ".", "potential", ")", "\n", "self", ".", "T", "=", "T", "\n", "#self.grad_momentum = Grad_potential(self.momentum.log_prob)", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.LangevinSampler.sample": [[306, 338], ["torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "samplers.LangevinSampler.potential.eval", "prior_z.clone().detach", "range", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "samplers.LangevinSampler.euler", "prior_z.clone", "t_extract_list.append", "Z_extract_list.append", "accept_list.append", "print", "samplers.LangevinSampler.clone().detach", "samplers.LangevinSampler.clone().detach().cpu", "samplers.LangevinSampler.clone", "samplers.LangevinSampler.clone().detach", "samplers.LangevinSampler.clone"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.TrainerToy.eval", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.TruncLangevinSampler.euler"], ["", "def", "sample", "(", "self", ",", "prior_z", ",", "sample_chain", "=", "False", ",", "T", "=", "None", ",", "thinning", "=", "10", ")", ":", "\n", "        ", "if", "T", "is", "None", ":", "\n", "            ", "T", "=", "self", ".", "T", "\n", "", "sampler", "=", "torch", ".", "distributions", ".", "Normal", "(", "torch", ".", "zeros_like", "(", "prior_z", ")", ",", "1.", ")", "\n", "\n", "#self.momentum.eval()", "\n", "self", ".", "potential", ".", "eval", "(", ")", "\n", "t_extract_list", "=", "[", "]", "\n", "Z_extract_list", "=", "[", "]", "\n", "accept_list", "=", "[", "]", "\n", "\n", "Z_t", "=", "prior_z", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "\n", "gamma", "=", "1.", "*", "self", ".", "gamma", "\n", "#print(f'Initial lr: {gamma}')", "\n", "for", "t", "in", "range", "(", "T", ")", ":", "\n", "            ", "if", "sample_chain", "and", "t", ">", "0", "and", "t", "%", "thinning", "==", "0", ":", "\n", "                ", "t_extract_list", ".", "append", "(", "t", ")", "\n", "Z_extract_list", ".", "append", "(", "Z_t", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "accept_list", ".", "append", "(", "1.", ")", "\n", "\n", "# reset computation graph", "\n", "", "Z_t", "=", "self", ".", "euler", "(", "Z_t", ",", "self", ".", "grad_potential", ",", "sampler", ",", "gamma", "=", "gamma", ")", "\n", "# only if extracting the samples so we have a sequence of samples", "\n", "if", "t", ">", "0", "and", "t", "%", "200", "==", "0", ":", "\n", "                ", "gamma", "*=", "0.1", "\n", "print", "(", "'decreasing lr for sampling'", ")", "\n", "\n", "#print('iteration: '+ str(t))", "\n", "", "", "if", "not", "sample_chain", ":", "\n", "            ", "return", "Z_t", ".", "clone", "(", ")", ".", "detach", "(", ")", ",", "1.", "\n", "", "return", "t_extract_list", ",", "Z_extract_list", ",", "accept_list", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.LangevinSampler.euler": [[340, 345], ["x.clone().detach", "numpy.sqrt", "x.clone", "sampler.sample", "grad_x"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.FlowSequential.sample"], ["", "def", "euler", "(", "self", ",", "x", ",", "grad_x", ",", "sampler", ",", "gamma", "=", "1e-2", ")", ":", "\n", "        ", "x_t", "=", "x", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "D", "=", "np", ".", "sqrt", "(", "gamma", ")", "\n", "x_t", "=", "x_t", "-", "gamma", "/", "2", "*", "grad_x", "(", "x_t", ")", "+", "D", "*", "sampler", ".", "sample", "(", ")", "\n", "return", "x_t", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.ZeroTemperatureSampler.__init__": [[347, 356], ["samplers.Grad_potential"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "potential", ",", "T", "=", "100", ",", "gamma", "=", "1e-2", ")", ":", "\n", "\n", "        ", "self", ".", "potential", "=", "potential", "\n", "\n", "#self.num_steps_min = num_steps_min", "\n", "#self.num_steps_max = num_steps_max", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "grad_potential", "=", "Grad_potential", "(", "self", ".", "potential", ")", "\n", "self", ".", "T", "=", "T", "\n", "#self.grad_momentum = Grad_potential(self.momentum.log_prob)", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.ZeroTemperatureSampler.sample": [[359, 391], ["torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "samplers.ZeroTemperatureSampler.potential.eval", "prior_z.clone().detach", "range", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "samplers.ZeroTemperatureSampler.euler", "prior_z.clone", "t_extract_list.append", "Z_extract_list.append", "accept_list.append", "print", "samplers.ZeroTemperatureSampler.clone().detach", "samplers.ZeroTemperatureSampler.clone().detach().cpu", "samplers.ZeroTemperatureSampler.clone", "samplers.ZeroTemperatureSampler.clone().detach", "samplers.ZeroTemperatureSampler.clone"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.TrainerToy.eval", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.TruncLangevinSampler.euler"], ["", "def", "sample", "(", "self", ",", "prior_z", ",", "sample_chain", "=", "False", ",", "T", "=", "None", ",", "thinning", "=", "10", ")", ":", "\n", "        ", "if", "T", "is", "None", ":", "\n", "            ", "T", "=", "self", ".", "T", "\n", "", "sampler", "=", "torch", ".", "distributions", ".", "Normal", "(", "torch", ".", "zeros_like", "(", "prior_z", ")", ",", "1.", ")", "\n", "\n", "#self.momentum.eval()", "\n", "self", ".", "potential", ".", "eval", "(", ")", "\n", "t_extract_list", "=", "[", "]", "\n", "Z_extract_list", "=", "[", "]", "\n", "accept_list", "=", "[", "]", "\n", "\n", "Z_t", "=", "prior_z", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "\n", "gamma", "=", "1.", "*", "self", ".", "gamma", "\n", "#print(f'Initial lr: {gamma}')", "\n", "for", "t", "in", "range", "(", "T", ")", ":", "\n", "            ", "if", "sample_chain", "and", "t", ">", "0", "and", "t", "%", "thinning", "==", "0", ":", "\n", "                ", "t_extract_list", ".", "append", "(", "t", ")", "\n", "Z_extract_list", ".", "append", "(", "Z_t", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "accept_list", ".", "append", "(", "1.", ")", "\n", "\n", "# reset computation graph", "\n", "", "Z_t", "=", "self", ".", "euler", "(", "Z_t", ",", "self", ".", "grad_potential", ",", "sampler", ",", "gamma", "=", "gamma", ")", "\n", "# only if extracting the samples so we have a sequence of samples", "\n", "if", "t", ">", "0", "and", "t", "%", "200", "==", "0", ":", "\n", "                ", "gamma", "*=", "0.1", "\n", "print", "(", "'decreasing lr for sampling'", ")", "\n", "\n", "#print('iteration: '+ str(t))", "\n", "", "", "if", "not", "sample_chain", ":", "\n", "            ", "return", "Z_t", ".", "clone", "(", ")", ".", "detach", "(", ")", ",", "1.", "\n", "", "return", "t_extract_list", ",", "Z_extract_list", ",", "accept_list", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.ZeroTemperatureSampler.euler": [[393, 398], ["x.clone().detach", "numpy.sqrt", "x.clone", "grad_x"], "methods", ["None"], ["", "def", "euler", "(", "self", ",", "x", ",", "grad_x", ",", "sampler", ",", "gamma", "=", "1e-2", ")", ":", "\n", "        ", "x_t", "=", "x", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "D", "=", "np", ".", "sqrt", "(", "gamma", ")", "\n", "x_t", "=", "x_t", "-", "gamma", "/", "2", "*", "grad_x", "(", "x_t", ")", "#+ D * sampler.sample()", "\n", "return", "x_t", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.SphereLangevinSampler.__init__": [[400, 406], ["samplers.Grad_potential"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "potential", ",", "T", "=", "100", ",", "gamma", "=", "1e-2", ")", ":", "\n", "\n", "        ", "self", ".", "potential", "=", "potential", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "grad_potential", "=", "Grad_potential", "(", "self", ".", "potential", ")", "\n", "self", ".", "T", "=", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.SphereLangevinSampler.sample": [[407, 439], ["torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "samplers.SphereLangevinSampler.potential.eval", "prior_z.clone().detach", "range", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "samplers.SphereLangevinSampler.euler", "prior_z.clone", "t_extract_list.append", "Z_extract_list.append", "accept_list.append", "print", "samplers.SphereLangevinSampler.clone().detach", "samplers.SphereLangevinSampler.clone().detach().cpu", "samplers.SphereLangevinSampler.clone", "samplers.SphereLangevinSampler.clone().detach", "samplers.SphereLangevinSampler.clone"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.TrainerToy.eval", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.TruncLangevinSampler.euler"], ["", "def", "sample", "(", "self", ",", "prior_z", ",", "sample_chain", "=", "False", ",", "T", "=", "None", ",", "thinning", "=", "10", ")", ":", "\n", "        ", "if", "T", "is", "None", ":", "\n", "            ", "T", "=", "self", ".", "T", "\n", "", "sampler", "=", "torch", ".", "distributions", ".", "Normal", "(", "torch", ".", "zeros_like", "(", "prior_z", ")", ",", "1.", ")", "\n", "\n", "#self.momentum.eval()", "\n", "self", ".", "potential", ".", "eval", "(", ")", "\n", "t_extract_list", "=", "[", "]", "\n", "Z_extract_list", "=", "[", "]", "\n", "accept_list", "=", "[", "]", "\n", "\n", "Z_t", "=", "prior_z", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "\n", "gamma", "=", "1.", "*", "self", ".", "gamma", "\n", "#print(f'Initial lr: {gamma}')", "\n", "for", "t", "in", "range", "(", "T", ")", ":", "\n", "            ", "if", "sample_chain", "and", "t", ">", "0", "and", "t", "%", "thinning", "==", "0", ":", "\n", "                ", "t_extract_list", ".", "append", "(", "t", ")", "\n", "Z_extract_list", ".", "append", "(", "Z_t", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "accept_list", ".", "append", "(", "1.", ")", "\n", "\n", "# reset computation graph", "\n", "", "Z_t", "=", "self", ".", "euler", "(", "Z_t", ",", "self", ".", "grad_potential", ",", "sampler", ",", "gamma", "=", "gamma", ")", "\n", "# only if extracting the samples so we have a sequence of samples", "\n", "if", "t", ">", "0", "and", "t", "%", "200", "==", "0", ":", "\n", "                ", "gamma", "*=", "0.1", "\n", "print", "(", "'decreasing lr for sampling'", ")", "\n", "\n", "#print('iteration: '+ str(t))", "\n", "", "", "if", "not", "sample_chain", ":", "\n", "            ", "return", "Z_t", ".", "clone", "(", ")", ".", "detach", "(", ")", ",", "1.", "\n", "", "return", "t_extract_list", ",", "Z_extract_list", ",", "accept_list", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.SphereLangevinSampler.euler": [[441, 450], ["x.clone().detach", "numpy.sqrt", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "grad_x", "x.clone", "sampler.sample"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.FlowSequential.sample"], ["", "def", "euler", "(", "self", ",", "x", ",", "grad_x", ",", "sampler", ",", "gamma", "=", "1e-2", ")", ":", "\n", "        ", "x_t", "=", "x", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "D", "=", "np", ".", "sqrt", "(", "2.", "*", "gamma", ")", "\n", "R", "=", "x_t", ".", "shape", "[", "1", "]", "\n", "grad", "=", "gamma", "*", "grad_x", "(", "x_t", ")", "\n", "dot", "=", "torch", ".", "sum", "(", "grad", "*", "x_t", ",", "dim", "=", "1", ")", "\n", "#grad = grad -   torch.einsum('n,nd->nd',dot,x_t)/np.sqrt(R)", "\n", "x_t", "=", "x_t", "-", "grad", "+", "D", "*", "sampler", ".", "sample", "(", ")", "\n", "return", "x_t", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.DOT.__init__": [[453, 465], ["samplers.Grad_potential"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "potential", ",", "T", "=", "100", ",", "gamma", "=", "1e-2", ")", ":", "\n", "\n", "        ", "self", ".", "potential", "=", "potential", "\n", "\n", "#self.num_steps_min = num_steps_min", "\n", "#self.num_steps_max = num_steps_max", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "grad_potential", "=", "Grad_potential", "(", "self", ".", "potential", ")", "\n", "self", ".", "T", "=", "T", "\n", "self", ".", "init_latent", "=", "None", "\n", "self", ".", "init_prior", "=", "None", "\n", "self", ".", "Lip_constant", "=", "None", "\n", "#self.grad_momentum = Grad_potential(self.momentum.log_prob)", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.DOT.estimate_lip": [[468, 471], ["torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.max", "torch.max", "torch.max", "torch.max", "samplers.DOT.grad_potential"], "methods", ["None"], ["", "def", "estimate_lip", "(", "self", ",", "prior_z", ")", ":", "\n", "        ", "grad_norm", "=", "torch", ".", "norm", "(", "self", ".", "grad_potential", "(", "prior_z", ")", ",", "dim", "=", "-", "1", ")", "\n", "self", ".", "Lip_constant", "=", "torch", ".", "max", "(", "grad_norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.DOT.sample": [[472, 505], ["torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "samplers.DOT.potential.eval", "prior_z[].clone().detach", "prior_z[].clone().detach", "range", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "samplers.DOT.update", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "prior_z[].clone", "prior_z[].clone", "t_extract_list.append", "Z_extract_list.append", "accept_list.append", "print", "torch.cat.clone().detach", "torch.cat.clone().detach", "torch.cat.clone().detach().cpu", "torch.cat.clone().detach().cpu", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "samplers.DOT.init_prior.unsqueeze", "torch.cat.clone", "torch.cat.clone", "torch.cat.clone().detach", "torch.cat.clone().detach", "torch.cat.clone", "torch.cat.clone"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.TrainerToy.eval", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.DOT.update"], ["", "def", "sample", "(", "self", ",", "prior_z", ",", "sample_chain", "=", "False", ",", "T", "=", "None", ",", "thinning", "=", "10", ")", ":", "\n", "        ", "if", "T", "is", "None", ":", "\n", "            ", "T", "=", "self", ".", "T", "\n", "", "sampler", "=", "torch", ".", "distributions", ".", "Normal", "(", "torch", ".", "zeros_like", "(", "prior_z", ")", ",", "1.", ")", "\n", "reg", "=", "torch", ".", "ones_like", "(", "prior_z", ")", "\n", "#self.momentum.eval()", "\n", "self", ".", "potential", ".", "eval", "(", ")", "\n", "t_extract_list", "=", "[", "]", "\n", "Z_extract_list", "=", "[", "]", "\n", "accept_list", "=", "[", "]", "\n", "Z_t", "=", "prior_z", "[", ":", ",", ":", ",", "0", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "self", ".", "init_prior", "=", "prior_z", "[", ":", ",", ":", ",", "1", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "\n", "gamma", "=", "1.", "*", "self", ".", "gamma", "\n", "#print(f'Initial lr: {gamma}')", "\n", "for", "t", "in", "range", "(", "T", ")", ":", "\n", "            ", "if", "sample_chain", "and", "t", ">", "0", "and", "t", "%", "thinning", "==", "0", ":", "\n", "                ", "t_extract_list", ".", "append", "(", "t", ")", "\n", "Z_extract_list", ".", "append", "(", "Z_t", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "accept_list", ".", "append", "(", "1.", ")", "\n", "\n", "# reset computation graph", "\n", "", "Z_t", "=", "self", ".", "update", "(", "Z_t", ",", "gamma", "=", "gamma", ")", "\n", "# only if extracting the samples so we have a sequence of samples", "\n", "if", "t", ">", "0", "and", "t", "%", "200", "==", "0", ":", "\n", "                ", "gamma", "*=", "0.1", "\n", "print", "(", "'decreasing lr for sampling'", ")", "\n", "\n", "#print('iteration: '+ str(t))", "\n", "", "", "if", "not", "sample_chain", ":", "\n", "            ", "Z_t", "=", "torch", ".", "cat", "(", "[", "Z_t", ".", "unsqueeze", "(", "-", "1", ")", ",", "self", ".", "init_prior", ".", "unsqueeze", "(", "-", "1", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "return", "Z_t", ".", "clone", "(", ")", ".", "detach", "(", ")", ",", "1.", "\n", "", "return", "t_extract_list", ",", "Z_extract_list", ",", "accept_list", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.DOT.update": [[507, 521], ["x.clone().detach", "numpy.sqrt", "x.clone().detach.requires_grad_", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "out.backward", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.norm.sum", "torch.norm.sum", "x.clone", "samplers.DOT.potential().sum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "numpy.sqrt", "samplers.DOT.potential"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "x", ",", "gamma", "=", "1e-2", ",", "eps", "=", "1e-3", ")", ":", "\n", "        ", "x_t", "=", "x", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "D", "=", "np", ".", "sqrt", "(", "gamma", ")", "\n", "R", "=", "x_t", ".", "shape", "[", "1", "]", "\n", "x_t", ".", "requires_grad_", "(", ")", "\n", "prox", "=", "torch", ".", "norm", "(", "x_t", "-", "self", ".", "init_prior", ".", "data", "+", "eps", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "potential", "(", "x_t", ")", ".", "sum", "(", ")", "/", "(", "self", ".", "Lip_constant", ")", "+", "prox", ".", "sum", "(", ")", "\n", "out", ".", "backward", "(", ")", "\n", "\n", "grad", "=", "x_t", ".", "grad", "\n", "dot", "=", "torch", ".", "sum", "(", "grad", "*", "x_t", ",", "dim", "=", "1", ")", "\n", "grad", "=", "grad", "-", "torch", ".", "einsum", "(", "'n,nd->nd'", ",", "dot", ",", "x_t", ")", "/", "np", ".", "sqrt", "(", "R", ")", "\n", "x_t", "=", "x_t", "-", "gamma", "*", "grad", "\n", "return", "x_t", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.MALA.__init__": [[525, 534], ["samplers.Grad_potential"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "potential", ",", "T", "=", "100", ",", "gamma", "=", "1e-2", ")", ":", "\n", "\n", "        ", "self", ".", "potential", "=", "potential", "\n", "\n", "#self.num_steps_min = num_steps_min", "\n", "#self.num_steps_max = num_steps_max", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "grad_potential", "=", "Grad_potential", "(", "self", ".", "potential", ")", "\n", "self", ".", "T", "=", "T", "\n", "#self.grad_momentum = Grad_potential(self.momentum.log_prob)", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.MALA.sample": [[537, 563], ["torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "samplers.MALA.potential.eval", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "prior_z.clone().detach", "samplers.MALA.grad_potential", "range", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "U.uniform_.uniform_.uniform_", "samplers.MALA.euler", "samplers.MALA.hasing_metropolis", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "prior_z.clone", "t_extract_list.append", "Z_extract_list.append", "accept_list.append", "prior_z.clone().detach.clone().detach", "acc_prob.mean().item", "prior_z.clone().detach.clone().detach().cpu", "prior_z.clone().detach.clone", "acc_prob.mean", "prior_z.clone().detach.clone().detach", "prior_z.clone().detach.clone"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.TrainerToy.eval", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.TruncLangevinSampler.euler", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.IndependentMetropolisHastings.hasing_metropolis"], ["", "def", "sample", "(", "self", ",", "prior_z", ",", "sample_chain", "=", "False", ",", "T", "=", "None", ",", "thinning", "=", "10", ")", ":", "\n", "        ", "if", "T", "is", "None", ":", "\n", "            ", "T", "=", "self", ".", "T", "\n", "", "sampler", "=", "torch", ".", "distributions", ".", "Normal", "(", "torch", ".", "zeros_like", "(", "prior_z", ")", ",", "1.", ")", "\n", "\n", "#self.momentum.eval()", "\n", "self", ".", "potential", ".", "eval", "(", ")", "\n", "t_extract_list", "=", "[", "]", "\n", "Z_extract_list", "=", "[", "]", "\n", "accept_list", "=", "[", "]", "\n", "U", "=", "torch", ".", "zeros", "(", "[", "prior_z", ".", "shape", "[", "0", "]", "]", ")", ".", "to", "(", "prior_z", ".", "device", ")", "\n", "Z_t", "=", "prior_z", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "old_grad", "=", "self", ".", "grad_potential", "(", "Z_t", ")", "\n", "gamma", "=", "1.", "*", "self", ".", "gamma", "\n", "for", "t", "in", "range", "(", "T", ")", ":", "\n", "            ", "if", "sample_chain", "and", "t", ">", "0", "and", "t", "%", "thinning", "==", "0", ":", "\n", "                ", "t_extract_list", ".", "append", "(", "t", ")", "\n", "Z_extract_list", ".", "append", "(", "Z_t", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "accept_list", ".", "append", "(", "1.", ")", "\n", "", "U", "=", "U", ".", "uniform_", "(", "0", ",", "1", ")", "\n", "# reset computation graph", "\n", "Z_new", ",", "new_grad", ",", "correction", "=", "self", ".", "euler", "(", "Z_t", ",", "old_grad", ",", "self", ".", "grad_potential", ",", "sampler", ",", "gamma", "=", "gamma", ")", "\n", "Z_t", ",", "old_grad", ",", "acc_prob", "=", "self", ".", "hasing_metropolis", "(", "Z_new", ",", "Z_t", ",", "new_grad", ",", "old_grad", ",", "self", ".", "potential", ",", "correction", ",", "U", ")", "\n", "", "if", "not", "sample_chain", ":", "\n", "            ", "return", "Z_t", ".", "clone", "(", ")", ".", "detach", "(", ")", ",", "acc_prob", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "", "return", "t_extract_list", ",", "Z_extract_list", ",", "accept_list", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.MALA.euler": [[565, 577], ["numpy.sqrt", "sampler.sample", "x_t.clone().detach.clone().detach.clone().detach", "grad_x", "x_t.clone().detach.clone().detach.clone", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.FlowSequential.sample"], ["", "def", "euler", "(", "self", ",", "x", ",", "old_grad", ",", "grad_x", ",", "sampler", ",", "gamma", "=", "1e-2", ")", ":", "\n", "\n", "        ", "D", "=", "np", ".", "sqrt", "(", "2.", "*", "gamma", ")", "\n", "noise", "=", "sampler", ".", "sample", "(", ")", "\n", "x_t", "=", "x", "-", "gamma", "*", "old_grad", "+", "D", "*", "noise", "\n", "x_t", "=", "x_t", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "new_grad", "=", "grad_x", "(", "x_t", ")", "\n", "\n", "err", "=", "x", "-", "x_t", "+", "gamma", "*", "new_grad", "\n", "correction", "=", "0.5", "*", "torch", ".", "sum", "(", "noise", "**", "2", ",", "dim", "=", "1", ")", "-", "1.", "/", "4", "*", "gamma", "*", "torch", ".", "sum", "(", "err", "**", "2", ",", "dim", "=", "1", ")", "\n", "\n", "return", "x_t", ",", "new_grad", ",", "correction", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.MALA.hasing_metropolis": [[578, 593], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "potential", "potential", "torch.relu", "torch.relu"], "methods", ["None"], ["", "def", "hasing_metropolis", "(", "self", ",", "Z_new", ",", "Z_0", ",", "new_grad", ",", "old_grad", ",", "potential", ",", "correction", ",", "U", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "potential_0", "=", "potential", "(", "Z_0", ")", "\n", "potential_new", "=", "potential", "(", "Z_new", ")", "\n", "\n", "", "H0", "=", "potential_0", "\n", "H", "=", "potential_new", "\n", "difference", "=", "-", "H", "+", "H0", "+", "correction", "\n", "acc_prob", "=", "torch", ".", "exp", "(", "-", "F", ".", "relu", "(", "-", "difference", ")", ")", "\n", "accepted", "=", "U", "<", "acc_prob", "\n", "Z_out", "=", "1.", "*", "Z_0", "\n", "grad_out", "=", "1.", "*", "old_grad", "\n", "Z_out", "[", "accepted", "]", "=", "1.", "*", "Z_new", "[", "accepted", "]", "\n", "grad_out", "[", "accepted", "]", "=", "1.", "*", "new_grad", "[", "accepted", "]", "\n", "return", "Z_out", ",", "grad_out", ",", "acc_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.TruncLangevinSampler.__init__": [[595, 608], ["samplers.Grad_cond_potential"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "potential", ",", "momentum", ",", "trunc", "=", "2.", ",", "sample_chain", "=", "False", ",", "T", "=", "100", ",", "num_steps_min", "=", "10", ",", "num_steps_max", "=", "20", ",", "gamma", "=", "1e-2", ",", "kappa", "=", "4e-2", ")", ":", "\n", "\n", "        ", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "potential", "=", "potential", "\n", "\n", "self", ".", "num_steps_min", "=", "num_steps_min", "\n", "self", ".", "num_steps_max", "=", "num_steps_max", "\n", "self", ".", "kappa", "=", "kappa", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "sample_chain", "=", "sample_chain", "\n", "self", ".", "trunc", "=", "trunc", "\n", "self", ".", "grad_potential", "=", "Grad_cond_potential", "(", "self", ".", "potential", ")", "\n", "self", ".", "T", "=", "T", "\n", "#self.grad_momentum = Grad_potential(self.momentum.log_prob)", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.TruncLangevinSampler.sample": [[611, 643], ["torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "samplers.TruncLangevinSampler.potential.eval", "numpy.random.randint", "prior_z[].clone().detach", "range", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "samplers.TruncLangevinSampler.euler", "samplers.TruncLangevinSampler.clone().detach", "prior_z[].clone", "print", "t_extract_list.append", "Z_extract_list.append", "accept_list.append", "samplers.TruncLangevinSampler.clone().detach().cpu", "samplers.TruncLangevinSampler.clone", "samplers.TruncLangevinSampler.clone().detach", "samplers.TruncLangevinSampler.clone"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.TrainerToy.eval", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.TruncLangevinSampler.euler"], ["", "def", "sample", "(", "self", ",", "prior_z", ",", "sample_chain", "=", "False", ",", "T", "=", "None", ",", "thinning", "=", "10", ")", ":", "\n", "        ", "if", "T", "is", "None", ":", "\n", "            ", "T", "=", "self", ".", "T", "\n", "", "labels", "=", "prior_z", "[", "1", "]", "\n", "sampler", "=", "torch", ".", "distributions", ".", "Normal", "(", "torch", ".", "zeros_like", "(", "prior_z", "[", "0", "]", ")", ",", "1.", ")", "\n", "\n", "#self.momentum.eval()", "\n", "self", ".", "potential", ".", "eval", "(", ")", "\n", "t_extract_list", "=", "[", "]", "\n", "Z_extract_list", "=", "[", "]", "\n", "accept_list", "=", "[", "]", "\n", "num_steps", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "num_steps_min", ",", "self", ".", "num_steps_max", "+", "1", ")", "\n", "\n", "Z_t", "=", "prior_z", "[", "0", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "gamma", "=", "self", ".", "gamma", "\n", "for", "t", "in", "range", "(", "T", ")", ":", "\n", "# reset computation graph", "\n", "            ", "Z_t", "=", "self", ".", "euler", "(", "Z_t", ",", "labels", ",", "self", ".", "grad_potential", ",", "sampler", ",", "gamma", "=", "gamma", ")", "\n", "#Z_t,acc_prob = hasing_metropolis(Z_new, V_new, Z_t, V_t, self.potential,self.momentum.log_prob, U)", "\n", "# only if extracting the samples so we have a sequence of samples", "\n", "if", "t", ">", "0", "and", "t", "%", "200", "==", "0", ":", "\n", "                ", "gamma", "*=", "0.1", "\n", "print", "(", "'decreasing lr for sampling'", ")", "\n", "", "if", "sample_chain", "and", "thinning", "!=", "0", "and", "t", "%", "thinning", "==", "0", ":", "\n", "                ", "t_extract_list", ".", "append", "(", "t", ")", "\n", "X_t", "=", "Z_t", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "labels", "\n", "Z_extract_list", ".", "append", "(", "X_t", ")", "\n", "accept_list", ".", "append", "(", "1.", ")", "\n", "#print('iteration: '+ str(t))", "\n", "", "", "if", "not", "sample_chain", ":", "\n", "            ", "return", "Z_t", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "", "return", "t_extract_list", ",", "Z_extract_list", ",", "accept_list", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.TruncLangevinSampler.euler": [[645, 653], ["x.clone().detach", "numpy.sqrt", "x.clone", "sampler.sample", "torch.relu", "torch.relu", "grad_x", "torch.relu", "torch.relu"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.FlowSequential.sample"], ["", "def", "euler", "(", "self", ",", "x", ",", "labels", ",", "grad_x", ",", "sampler", ",", "gamma", "=", "1e-2", ")", ":", "\n", "        ", "x_t", "=", "x", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "D", "=", "np", ".", "sqrt", "(", "gamma", ")", "\n", "x_t", "=", "x_t", "-", "gamma", "/", "2", "*", "grad_x", "(", "x_t", ",", "labels", ")", "+", "D", "*", "sampler", ".", "sample", "(", ")", "\n", "if", "self", ".", "trunc", ">", "0.", ":", "\n", "            ", "x_t", "=", "-", "F", ".", "relu", "(", "self", ".", "trunc", "-", "x_t", ")", "+", "self", ".", "trunc", "\n", "x_t", "=", "F", ".", "relu", "(", "x_t", "+", "self", ".", "trunc", ")", "-", "self", ".", "trunc", "\n", "", "return", "x_t", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.MetropolisHastings.__init__": [[657, 664], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "potential", ",", "sample_chain", "=", "False", ",", "T", "=", "100", ",", "gamma", "=", "1e-2", ")", ":", "\n", "\n", "        ", "self", ".", "potential", "=", "potential", "\n", "\n", "self", ".", "sample_chain", "=", "sample_chain", "\n", "self", ".", "T", "=", "T", "\n", "self", ".", "gamma", "=", "gamma", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.MetropolisHastings.sample": [[665, 695], ["samplers.MetropolisHastings.potential.eval", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "samplers.MetropolisHastings.potential", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "U.uniform_.uniform_.uniform_", "samplers.MetropolisHastings.hasing_metropolis", "z_cur.clone().detach", "torch.ones_like.mean().item", "torch.ones_like.mean().item", "samples.append", "accept_list.append", "t_extract_list.append", "z_cur.clone().detach().cpu", "torch.ones_like.mean().item", "torch.ones_like.mean().item", "numpy.sqrt", "torch.distributions.Normal.sample", "torch.distributions.Normal.sample", "z_cur.clone", "torch.ones_like.mean", "torch.ones_like.mean", "z_cur.clone().detach", "torch.ones_like.mean", "torch.ones_like.mean", "z_cur.clone"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.TrainerToy.eval", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.IndependentMetropolisHastings.hasing_metropolis", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.FlowSequential.sample", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.FlowSequential.sample"], ["", "def", "sample", "(", "self", ",", "prior_z", ",", "sample_chain", "=", "False", ",", "T", "=", "None", ",", "thinning", "=", "10", ")", ":", "\n", "        ", "if", "T", "is", "None", ":", "\n", "            ", "T", "=", "self", ".", "T", "\n", "\n", "", "self", ".", "potential", ".", "eval", "(", ")", "\n", "proposal_sampler", "=", "torch", ".", "distributions", ".", "Normal", "(", "torch", ".", "zeros_like", "(", "prior_z", ")", ",", "1.", ")", "\n", "#proposal_sampler = torch.distributions.Normal(torch.zeros_like(prior_z), 1.)", "\n", "#U_sampler = torch.distributions.Uniform(0, 1)", "\n", "U", "=", "torch", ".", "zeros", "(", "[", "prior_z", ".", "shape", "[", "0", "]", "]", ")", ".", "to", "(", "prior_z", ".", "device", ")", "\n", "samples", "=", "[", "]", "\n", "t_extract_list", "=", "[", "]", "\n", "accept_list", "=", "[", "]", "\n", "z_cur", "=", "prior_z", "\n", "potential_cur", "=", "self", ".", "potential", "(", "prior_z", ")", "\n", "gamma", "=", "self", ".", "gamma", "\n", "acc_prob", "=", "torch", ".", "ones_like", "(", "U", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "t", "in", "range", "(", "T", ")", ":", "\n", "                ", "if", "sample_chain", "and", "thinning", "!=", "0", "and", "t", "%", "thinning", "==", "0", ":", "\n", "                    ", "samples", ".", "append", "(", "z_cur", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "accept_list", ".", "append", "(", "acc_prob", ".", "mean", "(", ")", ".", "item", "(", ")", ")", "\n", "t_extract_list", ".", "append", "(", "t", ")", "\n", "\n", "", "z_prop", "=", "z_cur", "+", "np", ".", "sqrt", "(", "gamma", ")", "*", "proposal_sampler", ".", "sample", "(", ")", "\n", "U", "=", "U", ".", "uniform_", "(", "0", ",", "1", ")", "\n", "z_cur", ",", "acc_prob", "=", "self", ".", "hasing_metropolis", "(", "z_prop", ",", "z_cur", ",", "self", ".", "potential", ",", "U", ")", "\n", "\n", "", "", "if", "not", "sample_chain", ":", "\n", "            ", "return", "z_cur", ".", "clone", "(", ")", ".", "detach", "(", ")", ",", "acc_prob", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "", "return", "t_extract_list", ",", "samples", ",", "accept_list", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.MetropolisHastings.hasing_metropolis": [[697, 708], ["potential", "potential", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.relu", "torch.relu"], "methods", ["None"], ["", "def", "hasing_metropolis", "(", "self", ",", "Z_new", ",", "Z_0", ",", "potential", ",", "U", ")", ":", "\n", "        ", "potential_0", "=", "potential", "(", "Z_0", ")", "\n", "potential_new", "=", "potential", "(", "Z_new", ")", "\n", "H0", "=", "potential_0", "\n", "H", "=", "potential_new", "\n", "difference", "=", "-", "H", "+", "H0", "\n", "acc_prob", "=", "torch", ".", "exp", "(", "-", "F", ".", "relu", "(", "-", "difference", ")", ")", "\n", "accepted", "=", "U", "<", "acc_prob", "\n", "Z_out", "=", "1.", "*", "Z_0", "\n", "Z_out", "[", "accepted", "]", "=", "1.", "*", "Z_new", "[", "accepted", "]", "\n", "return", "Z_out", ",", "acc_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.IndependentMetropolisHastings.__init__": [[711, 717], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "potential", ",", "sample_chain", "=", "False", ",", "T", "=", "100", ",", "gamma", "=", "1e-2", ")", ":", "\n", "\n", "        ", "self", ".", "potential", "=", "potential", "\n", "self", ".", "sample_chain", "=", "sample_chain", "\n", "self", ".", "T", "=", "T", "\n", "self", ".", "gamma", "=", "gamma", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.IndependentMetropolisHastings.sample": [[718, 749], ["samplers.IndependentMetropolisHastings.potential.eval", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "samplers.IndependentMetropolisHastings.potential", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.distributions.Normal.sample", "torch.distributions.Normal.sample", "U.uniform_.uniform_.uniform_", "samplers.IndependentMetropolisHastings.hasing_metropolis", "z_cur.clone().detach", "torch.ones_like.mean().item", "torch.ones_like.mean().item", "samples.append", "accept_list.append", "t_extract_list.append", "z_cur.clone().detach().cpu", "torch.ones_like.mean().item", "torch.ones_like.mean().item", "z_cur.clone", "torch.ones_like.mean", "torch.ones_like.mean", "z_cur.clone().detach", "torch.ones_like.mean", "torch.ones_like.mean", "z_cur.clone"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.TrainerToy.eval", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.FlowSequential.sample", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.FlowSequential.sample", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.IndependentMetropolisHastings.hasing_metropolis"], ["", "def", "sample", "(", "self", ",", "prior_z", ",", "sample_chain", "=", "False", ",", "T", "=", "None", ",", "thinning", "=", "10", ")", ":", "\n", "        ", "if", "T", "is", "None", ":", "\n", "            ", "T", "=", "self", ".", "T", "\n", "\n", "", "self", ".", "potential", ".", "eval", "(", ")", "\n", "proposal_sampler", "=", "torch", ".", "distributions", ".", "Normal", "(", "torch", ".", "zeros_like", "(", "prior_z", ")", ",", "1.", ")", "\n", "#proposal_sampler = torch.distributions.Normal(torch.zeros_like(prior_z), 1.)", "\n", "#U_sampler = torch.distributions.Uniform(0, 1)", "\n", "U", "=", "torch", ".", "zeros", "(", "[", "prior_z", ".", "shape", "[", "0", "]", "]", ")", ".", "to", "(", "prior_z", ".", "device", ")", "\n", "samples", "=", "[", "]", "\n", "t_extract_list", "=", "[", "]", "\n", "accept_list", "=", "[", "]", "\n", "z_cur", "=", "prior_z", "\n", "potential_cur", "=", "self", ".", "potential", "(", "prior_z", ")", "\n", "gamma", "=", "1.", "*", "self", ".", "gamma", "\n", "acc_prob", "=", "torch", ".", "ones_like", "(", "U", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "            ", "for", "t", "in", "range", "(", "T", ")", ":", "\n", "                ", "if", "sample_chain", "and", "thinning", "!=", "0", "and", "t", "%", "thinning", "==", "0", ":", "\n", "                    ", "samples", ".", "append", "(", "z_cur", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "accept_list", ".", "append", "(", "acc_prob", ".", "mean", "(", ")", ".", "item", "(", ")", ")", "\n", "t_extract_list", ".", "append", "(", "t", ")", "\n", "", "z_prop", "=", "proposal_sampler", ".", "sample", "(", ")", "\n", "#potential_prop = self.potential(z_prop)", "\n", "U", "=", "U", ".", "uniform_", "(", "0", ",", "1", ")", "\n", "z_cur", ",", "acc_prob", "=", "self", ".", "hasing_metropolis", "(", "z_prop", ",", "z_cur", ",", "self", ".", "potential", ",", "U", ")", "\n", "\n", "", "", "if", "not", "sample_chain", ":", "\n", "            ", "return", "z_cur", ".", "clone", "(", ")", ".", "detach", "(", ")", ",", "acc_prob", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "", "return", "t_extract_list", ",", "samples", ",", "accept_list", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.IndependentMetropolisHastings.hasing_metropolis": [[751, 764], ["potential", "potential", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.relu", "torch.relu"], "methods", ["None"], ["", "def", "hasing_metropolis", "(", "self", ",", "Z_new", ",", "Z_0", ",", "potential", ",", "U", ")", ":", "\n", "        ", "potential_0", "=", "potential", "(", "Z_0", ")", "\n", "potential_new", "=", "potential", "(", "Z_new", ")", "\n", "\n", "\n", "H0", "=", "potential_0", "\n", "H", "=", "potential_new", "\n", "difference", "=", "-", "H", "+", "H0", "\n", "acc_prob", "=", "torch", ".", "exp", "(", "-", "F", ".", "relu", "(", "-", "difference", ")", ")", "\n", "accepted", "=", "U", "<", "acc_prob", "\n", "Z_out", "=", "1.", "*", "Z_0", "\n", "Z_out", "[", "accepted", "]", "=", "1.", "*", "Z_new", "[", "accepted", "]", "\n", "return", "Z_out", ",", "acc_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.ContrastiveDivergenceSampler.__init__": [[800, 809], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "noise_gen", ",", "sampler", ",", "device", ")", ":", "\n", "        ", "self", ".", "buffer", "=", "None", "\n", "self", ".", "max_buffer", "=", "10000", "\n", "self", ".", "buffer_cursor", "=", "0", "\n", "self", ".", "noise_gen", "=", "noise_gen", "\n", "self", ".", "sampler", "=", "sampler", "\n", "self", ".", "mask_int", "=", "None", "\n", "self", ".", "T", "=", "10", "\n", "self", ".", "device", "=", "device", "\n", "", "def", "sample_buffer", "(", "self", ",", "data", ",", "N", "=", "128", ")", ":", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.ContrastiveDivergenceSampler.sample_buffer": [[809, 818], ["samplers.ContrastiveDivergenceSampler.noise_gen.sample().to", "torch.multinomial().to", "torch.multinomial().to", "torch.multinomial().to", "torch.multinomial().to", "samplers.ContrastiveDivergenceSampler.buffer[].to", "torch.multinomial().to", "torch.multinomial().to", "torch.multinomial().to", "torch.multinomial().to", "samplers.ContrastiveDivergenceSampler.noise_gen.sample", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.FlowSequential.sample"], ["", "def", "sample_buffer", "(", "self", ",", "data", ",", "N", "=", "128", ")", ":", "\n", "        ", "if", "self", ".", "buffer", "is", "None", ":", "\n", "            ", "self", ".", "buffer", "=", "self", ".", "noise_gen", ".", "sample", "(", "[", "self", ".", "max_buffer", "]", ")", ".", "to", "(", "'cpu'", ")", "\n", "", "if", "data", "is", "None", ":", "\n", "            ", "self", ".", "mask_int", "=", "torch", ".", "multinomial", "(", "torch", ".", "ones", "(", "self", ".", "buffer", ".", "shape", "[", "0", "]", ")", ",", "N", ",", "replacement", "=", "True", ")", ".", "to", "(", "self", ".", "buffer", ".", "device", ")", "\n", "return", "self", ".", "buffer", "[", "self", ".", "mask_int", ",", ":", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "mask_int", "=", "torch", ".", "multinomial", "(", "torch", ".", "ones", "(", "self", ".", "buffer", ".", "shape", "[", "0", "]", ")", ",", "data", ".", "shape", "[", "0", "]", ",", "replacement", "=", "True", ")", ".", "to", "(", "self", ".", "buffer", ".", "device", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.ContrastiveDivergenceSampler.sample": [[819, 824], ["samplers.ContrastiveDivergenceSampler.sample_buffer", "samplers.ContrastiveDivergenceSampler.sampler.sample", "gen_data_in.detach().cpu", "gen_data_in.detach"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.ContrastiveDivergenceSampler.sample_buffer", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.FlowSequential.sample"], ["", "", "def", "sample", "(", "self", ",", "data", ",", "N", "=", "128", ")", ":", "\n", "        ", "prior_samples", "=", "self", ".", "sample_buffer", "(", "data", ",", "N", ")", "\n", "gen_data_in", ",", "_", "=", "self", ".", "sampler", ".", "sample", "(", "prior_samples", ",", "sample_chain", "=", "False", ",", "T", "=", "self", ".", "T", ")", "\n", "self", ".", "buffer", "[", "self", ".", "mask_int", ",", ":", "]", "=", "gen_data_in", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "return", "gen_data_in", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.ContrastiveDivergenceSampler.log_partition": [[825, 834], ["samplers.ContrastiveDivergenceSampler.sample", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "compute.iterative_log_sum_exp", "samplers.ContrastiveDivergenceSampler.sampler.potential", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.log", "numpy.log", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.FlowSequential.sample", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.compute.iterative_log_sum_exp"], ["", "def", "log_partition", "(", "self", ",", "N", ")", ":", "\n", "        ", "gen_data_in", "=", "self", ".", "sample", "(", "None", ",", "N", ")", "\n", "out", "=", "-", "0.5", "*", "torch", ".", "norm", "(", "gen_data_in", ",", "dim", "=", "1", ")", "**", "2", "+", "self", ".", "sampler", ".", "potential", "(", "gen_data_in", ")", "\n", "M", "=", "0", "\n", "log_partition", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "log_partition", ",", "M", "=", "cp", ".", "iterative_log_sum_exp", "(", "out", ",", "log_partition", ",", "M", ")", "\n", "log_partition", "=", "-", "log_partition", "+", "np", ".", "log", "(", "M", ")", "+", "0.5", "*", "gen_data_in", ".", "shape", "[", "1", "]", "*", "np", ".", "log", "(", "2.", "*", "np", ".", "pi", ")", "\n", "\n", "return", "log_partition", "", "", "", ""]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.main.make_flags": [[14, 21], ["yaml.safe_load", "vars", "all", "vars.update", "open", "map"], "function", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.DOT.update"], ["def", "make_flags", "(", "args", ",", "config_file", ")", ":", "\n", "    ", "if", "config_file", ":", "\n", "        ", "config", "=", "yaml", ".", "safe_load", "(", "open", "(", "config_file", ")", ")", "\n", "dic", "=", "vars", "(", "args", ")", "\n", "all", "(", "map", "(", "dic", ".", "pop", ",", "config", ")", ")", "\n", "dic", ".", "update", "(", "config", ")", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.__init__": [[34, 52], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "numpy.random.seed", "helpers.assign_device", "str", "print", "helpers.init_logs", "print", "print", "print", "pprint.PrettyPrinter", "trainer.Trainer.pp.pprint", "print", "utils.timer.Timer", "trainer.Trainer.build_model", "round", "trainer.Trainer.log_dir_formatter", "vars", "time.time", "str", "socket.gethostname", "datetime.datetime.datetime.now", "os.getpid"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.helpers.assign_device", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.helpers.init_logs", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.build_model", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.TrainerToy.log_dir_formatter"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "device", "=", "hp", ".", "assign_device", "(", "args", ".", "device", ")", "\n", "self", ".", "run_id", "=", "str", "(", "round", "(", "time", ".", "time", "(", ")", "%", "1e7", ")", ")", "\n", "print", "(", "f\"Run id: {self.run_id}\"", ")", "\n", "self", ".", "log_dir", ",", "self", ".", "checkpoint_dir", ",", "self", ".", "samples_dir", "=", "hp", ".", "init_logs", "(", "args", ",", "self", ".", "run_id", ",", "self", ".", "log_dir_formatter", "(", "args", ")", ")", "\n", "\n", "print", "(", "f\"Process id: {str(os.getpid())} | hostname: {socket.gethostname()}\"", ")", "\n", "print", "(", "f\"Run id: {self.run_id}\"", ")", "\n", "print", "(", "f\"Time: {datetime.now()}\"", ")", "\n", "self", ".", "pp", "=", "pprint", ".", "PrettyPrinter", "(", "indent", "=", "4", ")", "\n", "self", ".", "pp", ".", "pprint", "(", "vars", "(", "args", ")", ")", "\n", "print", "(", "'==> Building model..'", ")", "\n", "self", ".", "timer", "=", "timer", ".", "Timer", "(", ")", "\n", "self", ".", "mode", "=", "args", ".", "mode", "\n", "self", ".", "build_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.log_dir_formatter": [[56, 58], ["os.path.join"], "methods", ["None"], ["", "def", "log_dir_formatter", "(", "self", ",", "args", ")", ":", "\n", "            ", "return", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "args", ".", "mode", ",", "args", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.build_model": [[60, 136], ["helpers.get_data_loader", "helpers.get_base", "helpers.get_energy", "helpers.get_latent_noise", "trainer.Trainer.noise_gen.sample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "list", "helpers.get_latent_sampler", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "filter", "trainer.Trainer.load_generator", "trainer.Trainer.generator.eval", "trainer.Trainer.load_discriminator", "trainer.Trainer.discriminator.eval", "helpers.get_optimizer", "helpers.get_optimizer", "helpers.get_optimizer", "helpers.get_scheduler", "helpers.get_scheduler", "helpers.get_scheduler", "helpers.get_loss", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "samplers.Independent_Latent_potential", "print", "compute.InceptionV3().to", "utils.fid_scheduler.FIDScheduler", "utils.fid_scheduler.MMDScheduler", "trainer.Trainer.fid_scheduler.init_trainer", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "trainer.Trainer.noise_gen.sample().cpu", "torch.zeros().cpu", "torch.zeros().cpu", "torch.zeros().cpu", "torch.zeros().cpu", "trainer.Trainer.discriminator.parameters", "torch.Parameter", "torch.Parameter", "trainer.Trainer.d_params.append", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "trainer.Trainer.generator.parameters", "samplers.Cold_Latent_potential", "samplers.Latent_potential", "range", "range", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "compute.InceptionV3", "list", "list", "trainer.Trainer.noise_gen.sample", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.autograd.Variable", "torch.autograd.Variable", "range", "range", "int", "int", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.helpers.get_data_loader", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.helpers.get_base", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.helpers.get_energy", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.helpers.get_latent_noise", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.FlowSequential.sample", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.helpers.get_latent_sampler", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.load_generator", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.TrainerToy.eval", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.load_discriminator", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.TrainerToy.eval", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.helpers.get_optimizer", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.helpers.get_optimizer", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.helpers.get_optimizer", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.helpers.get_scheduler", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.helpers.get_scheduler", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.helpers.get_scheduler", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.helpers.get_loss", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.fid_scheduler.MMDScheduler.init_trainer", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.FlowSequential.sample"], ["", "def", "build_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "train_loader", ",", "self", ".", "test_loader", ",", "self", ".", "valid_loader", ",", "self", ".", "input_dims", "=", "hp", ".", "get_data_loader", "(", "self", ".", "args", ",", "self", ".", "args", ".", "b_size", ",", "self", ".", "args", ".", "num_workers", ")", "\n", "\n", "self", ".", "generator", "=", "hp", ".", "get_base", "(", "self", ".", "args", ",", "self", ".", "input_dims", ",", "self", ".", "device", ")", "\n", "self", ".", "discriminator", "=", "hp", ".", "get_energy", "(", "self", ".", "args", ",", "self", ".", "input_dims", ",", "self", ".", "device", ")", "\n", "self", ".", "noise_gen", "=", "hp", ".", "get_latent_noise", "(", "self", ".", "args", ",", "self", ".", "args", ".", "Z_dim", ",", "self", ".", "device", ")", "\n", "self", ".", "fixed_latents", "=", "self", ".", "noise_gen", ".", "sample", "(", "[", "64", "]", ")", "\n", "self", ".", "eval_latents", "=", "torch", ".", "cat", "(", "[", "self", ".", "noise_gen", ".", "sample", "(", "[", "self", ".", "args", ".", "sample_b_size", "]", ")", ".", "cpu", "(", ")", "for", "b", "in", "range", "(", "int", "(", "self", ".", "args", ".", "fid_samples", "/", "self", ".", "args", ".", "sample_b_size", ")", "+", "1", ")", "]", ",", "dim", "=", "0", ")", "\n", "self", ".", "eval_latents", "=", "self", ".", "eval_latents", "[", ":", "self", ".", "args", ".", "fid_samples", "]", "\n", "self", ".", "eval_velocity", "=", "torch", ".", "cat", "(", "[", "torch", ".", "zeros", "(", "[", "self", ".", "args", ".", "sample_b_size", ",", "self", ".", "eval_latents", ".", "shape", "[", "1", "]", "]", ")", ".", "cpu", "(", ")", "for", "b", "in", "range", "(", "int", "(", "self", ".", "args", ".", "fid_samples", "/", "self", ".", "args", ".", "sample_b_size", ")", "+", "1", ")", "]", ",", "dim", "=", "0", ")", "\n", "self", ".", "eval_velocity", "=", "self", ".", "eval_velocity", "[", ":", "self", ".", "args", ".", "fid_samples", "]", "\n", "# load models if path exists, define log partition if using kale and add to discriminator", "\n", "self", ".", "d_params", "=", "list", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "self", ".", "discriminator", ".", "parameters", "(", ")", ")", ")", "\n", "if", "self", ".", "args", ".", "g_path", "is", "not", "None", ":", "\n", "            ", "self", ".", "load_generator", "(", ")", "\n", "self", ".", "generator", ".", "eval", "(", ")", "\n", "", "if", "self", ".", "args", ".", "d_path", "is", "not", "None", ":", "\n", "            ", "self", ".", "load_discriminator", "(", ")", "\n", "self", ".", "discriminator", ".", "eval", "(", ")", "\n", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "args", ".", "criterion", "==", "'kale'", ":", "\n", "                ", "self", ".", "log_partition", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "self", ".", "d_params", ".", "append", "(", "self", ".", "log_partition", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "log_partition", "=", "Variable", "(", "torch", ".", "zeros", "(", "1", ",", "requires_grad", "=", "False", ")", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "", "", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "# optimizers", "\n", "            ", "self", ".", "optim_d", "=", "hp", ".", "get_optimizer", "(", "self", ".", "args", ",", "'discriminator'", ",", "self", ".", "d_params", ")", "\n", "self", ".", "optim_g", "=", "hp", ".", "get_optimizer", "(", "self", ".", "args", ",", "'generator'", ",", "self", ".", "generator", ".", "parameters", "(", ")", ")", "\n", "self", ".", "optim_partition", "=", "hp", ".", "get_optimizer", "(", "self", ".", "args", ",", "'discriminator'", ",", "[", "self", ".", "log_partition", "]", ")", "\n", "# schedulers", "\n", "self", ".", "scheduler_d", "=", "hp", ".", "get_scheduler", "(", "self", ".", "args", ",", "self", ".", "optim_d", ")", "\n", "self", ".", "scheduler_g", "=", "hp", ".", "get_scheduler", "(", "self", ".", "args", ",", "self", ".", "optim_g", ")", "\n", "self", ".", "scheduler_partition", "=", "hp", ".", "get_scheduler", "(", "self", ".", "args", ",", "self", ".", "optim_partition", ")", "\n", "self", ".", "loss", "=", "hp", ".", "get_loss", "(", "self", ".", "args", ")", "\n", "\n", "self", ".", "counter", "=", "0", "\n", "self", ".", "g_counter", "=", "0", "\n", "self", ".", "g_loss", "=", "torch", ".", "tensor", "(", "0.", ")", "\n", "self", ".", "d_loss", "=", "torch", ".", "tensor", "(", "0.", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "latent_sampler", "in", "[", "'imh'", ",", "'dot'", ",", "'spherelangevin'", "]", ":", "\n", "            ", "self", ".", "latent_potential", "=", "samplers", ".", "Independent_Latent_potential", "(", "self", ".", "generator", ",", "self", ".", "discriminator", ",", "self", ".", "noise_gen", ")", "\n", "", "elif", "self", ".", "args", ".", "latent_sampler", "in", "[", "'zero_temperature_langevin'", "]", ":", "\n", "            ", "self", ".", "latent_potential", "=", "samplers", ".", "Cold_Latent_potential", "(", "self", ".", "generator", ",", "self", ".", "discriminator", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "latent_potential", "=", "samplers", ".", "Latent_potential", "(", "self", ".", "generator", ",", "self", ".", "discriminator", ",", "self", ".", "noise_gen", ",", "self", ".", "args", ".", "temperature", ")", "\n", "\n", "", "self", ".", "latent_sampler", "=", "hp", ".", "get_latent_sampler", "(", "self", ".", "args", ",", "self", ".", "latent_potential", ",", "self", ".", "args", ".", "Z_dim", ",", "self", ".", "device", ")", "\n", "if", "self", ".", "args", ".", "eval_fid", ":", "\n", "            ", "self", ".", "eval_fid", "=", "True", "\n", "print", "(", "'==> Loading inception network...'", ")", "\n", "block_idx", "=", "cp", ".", "InceptionV3", ".", "BLOCK_INDEX_BY_DIM", "[", "2048", "]", "\n", "self", ".", "fid_model", "=", "cp", ".", "InceptionV3", "(", "[", "block_idx", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "fid_scheduler", "=", "FIDScheduler", "(", "self", ".", "args", ")", "\n", "self", ".", "fid_scheduler", "=", "MMDScheduler", "(", "self", ".", "args", ",", "self", ".", "device", ")", "\n", "self", ".", "fid_scheduler", ".", "init_trainer", "(", "self", ")", "\n", "self", ".", "fid_train", "=", "-", "1.", "\n", "", "else", ":", "\n", "            ", "self", ".", "eval_fid", "=", "False", "\n", "\n", "", "dev_count", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "if", "self", ".", "args", ".", "dataparallel", "and", "dev_count", ">", "1", ":", "\n", "            ", "self", ".", "generator", "=", "torch", ".", "nn", ".", "DataParallel", "(", "self", ".", "generator", ",", "device_ids", "=", "list", "(", "range", "(", "dev_count", ")", ")", ")", "\n", "self", ".", "discriminator", "=", "torch", ".", "nn", ".", "DataParallel", "(", "self", ".", "discriminator", ",", "device_ids", "=", "list", "(", "range", "(", "dev_count", ")", ")", ")", "\n", "", "self", ".", "accum_loss_g", "=", "[", "]", "\n", "self", ".", "accum_loss_d", "=", "[", "]", "\n", "self", ".", "true_train_scores", "=", "None", "\n", "self", ".", "true_valid_scores", "=", "None", "\n", "self", ".", "true_train_mu", "=", "None", "\n", "self", ".", "true_train_sigma", "=", "None", "\n", "self", ".", "true_valid_mu", "=", "None", "\n", "self", ".", "true_valid_sigma", "=", "None", "\n", "self", ".", "kids", "=", "None", "\n", "", "def", "main", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.main": [[136, 144], ["print", "trainer.Trainer.train", "trainer.Trainer.eval", "trainer.Trainer.sample"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.train", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.TrainerToy.eval", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.FlowSequential.sample"], ["", "def", "main", "(", "self", ")", ":", "\n", "        ", "print", "(", "f'==> Mode: {self.mode}'", ")", "\n", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "self", ".", "train", "(", ")", "\n", "", "elif", "self", ".", "mode", "==", "'eval'", ":", "\n", "            ", "self", ".", "eval", "(", ")", "\n", "", "elif", "self", ".", "mode", "==", "'sample'", ":", "\n", "            ", "self", ".", "sample", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.load_generator": [[145, 150], ["torch.load", "torch.load", "torch.load", "torch.load", "helpers.get_normal", "trainer.Trainer.generator.load_state_dict", "trainer.Trainer.generator.to"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.helpers.get_normal"], ["", "", "def", "load_generator", "(", "self", ")", ":", "\n", "        ", "g_model", "=", "torch", ".", "load", "(", "self", ".", "args", ".", "g_path", ",", "map_location", "=", "self", ".", "device", ")", "\n", "self", ".", "noise_gen", "=", "hp", ".", "get_normal", "(", "self", ".", "args", ".", "Z_dim", ",", "self", ".", "device", ")", "\n", "self", ".", "generator", ".", "load_state_dict", "(", "g_model", ")", "\n", "self", ".", "generator", "=", "self", ".", "generator", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.load_discriminator": [[151, 163], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load.pop", "torch.load.pop", "trainer.Trainer.discriminator.load_state_dict", "trainer.Trainer.discriminator.to", "d_model[].to", "torch.Parameter", "torch.Parameter", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "load_discriminator", "(", "self", ")", ":", "\n", "        ", "d_model", "=", "torch", ".", "load", "(", "self", ".", "args", ".", "d_path", ",", "map_location", "=", "self", ".", "device", ")", "\n", "\n", "\n", "if", "self", ".", "args", ".", "criterion", "==", "'kale'", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "log_partition", "=", "d_model", "[", "'log_partition'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "", "except", ":", "\n", "                ", "self", ".", "log_partition", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "", "", "d_model", ".", "pop", "(", "'log_partition'", ",", "None", ")", "\n", "self", ".", "discriminator", ".", "load_state_dict", "(", "d_model", ")", "\n", "self", ".", "discriminator", "=", "self", ".", "discriminator", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.train": [[165, 175], ["trainer.Trainer.init_log_partition", "trainer.Trainer.train_epoch"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.init_log_partition", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.train_epoch"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "done", "=", "False", "\n", "if", "self", ".", "args", ".", "initialize_log_partition", ":", "\n", "            ", "self", ".", "log_partition", ".", "data", "=", "self", ".", "init_log_partition", "(", ")", "\n", "", "while", "not", "done", ":", "\n", "            ", "self", ".", "train_epoch", "(", ")", "\n", "if", "self", ".", "args", ".", "train_mode", "in", "[", "'both'", ",", "'base'", "]", ":", "\n", "                ", "done", "=", "self", ".", "g_counter", ">=", "self", ".", "args", ".", "total_gen_iter", "\n", "", "else", ":", "\n", "                ", "done", "=", "self", ".", "counter", ">=", "self", ".", "args", ".", "total_gen_iter", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.train_epoch": [[176, 239], ["enumerate", "data.to().clone().detach.to().clone().detach.to().clone().detach", "trainer.Trainer.which_step", "trainer.Trainer.eval", "trainer.Trainer.iteration", "trainer.Trainer.accum_loss_g.append", "trainer.Trainer.iteration", "trainer.Trainer.accum_loss_d.append", "trainer.Trainer.save_checkpoint", "data.to().clone().detach.to().clone().detach.to().clone", "trainer.Trainer.g_loss.item", "trainer.Trainer.d_loss.item", "numpy.asarray().mean", "numpy.asarray().mean", "trainer.Trainer.save_dictionary", "trainer.Trainer.timer", "trainer.Trainer.sample_images", "utils.vizualization.make_and_save_grid_images", "numpy.mod", "numpy.mod", "trainer.Trainer.fid_scheduler.step", "numpy.asarray().mean", "trainer.Trainer.save_dictionary", "trainer.Trainer.timer", "print", "trainer.Trainer.scheduler_d.step", "trainer.Trainer.scheduler_g.step", "data.to().clone().detach.to().clone().detach.to", "numpy.asarray", "numpy.asarray", "numpy.asarray().mean", "trainer.Trainer.save_dictionary", "trainer.Trainer.timer", "numpy.mod", "numpy.asarray", "str().zfill", "numpy.asarray", "str"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.which_step", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.TrainerToy.eval", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.TrainerEBM.iteration", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.TrainerEBM.iteration", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.save_checkpoint", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.save_dictionary", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.sample_images", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.vizualization.make_and_save_grid_images", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.fid_scheduler.MMDScheduler.step", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.save_dictionary", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.fid_scheduler.MMDScheduler.step", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.fid_scheduler.MMDScheduler.step", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.save_dictionary"], ["", "", "", "def", "train_epoch", "(", "self", ")", ":", "\n", "\n", "        ", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "self", ".", "train_loader", ")", ":", "\n", "            ", "data", "=", "data", ".", "to", "(", "self", ".", "device", ")", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "self", ".", "counter", "+=", "1", "\n", "is_gstep", ",", "is_dstep", "=", "self", ".", "which_step", "(", ")", "\n", "# discriminator takes n_iter_d steps of learning for each generator step", "\n", "if", "is_gstep", ":", "\n", "                ", "self", ".", "g_counter", "+=", "1", "\n", "self", ".", "g_loss", "=", "self", ".", "iteration", "(", "data", ",", "net_type", "=", "'generator'", ")", "\n", "self", ".", "accum_loss_g", ".", "append", "(", "self", ".", "g_loss", ".", "item", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "d_loss", "=", "self", ".", "iteration", "(", "data", ",", "net_type", "=", "'discriminator'", ")", "\n", "self", ".", "accum_loss_d", ".", "append", "(", "self", ".", "d_loss", ".", "item", "(", ")", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "train_mode", "==", "'both'", ":", "\n", "                ", "counter", "=", "self", ".", "g_counter", "\n", "is_valid_step", "=", "is_gstep", "\n", "if", "self", ".", "g_counter", "%", "self", ".", "args", ".", "disp_freq", "==", "0", "and", "is_gstep", ":", "\n", "                    ", "ag", "=", "np", ".", "asarray", "(", "self", ".", "accum_loss_g", ")", ".", "mean", "(", ")", "\n", "ad", "=", "np", ".", "asarray", "(", "self", ".", "accum_loss_d", ")", ".", "mean", "(", ")", "\n", "self", ".", "save_dictionary", "(", "{", "'g_loss'", ":", "ag", ",", "'d_loss'", ":", "ad", ",", "'loss_iter'", ":", "self", ".", "g_counter", "}", ")", "\n", "self", ".", "timer", "(", "self", ".", "g_counter", ",", "\" base loss: %.8f, energy loss: %.8f\"", "%", "(", "ag", ",", "ad", ")", ")", "\n", "self", ".", "accum_loss_g", "=", "[", "]", "\n", "self", ".", "accum_loss_d", "=", "[", "]", "\n", "\n", "", "", "elif", "self", ".", "args", ".", "train_mode", "==", "'base'", ":", "\n", "                ", "counter", "=", "self", ".", "g_counter", "\n", "is_valid_step", "=", "is_gstep", "\n", "if", "self", ".", "g_counter", "%", "self", ".", "args", ".", "disp_freq", "==", "0", "and", "is_gstep", ":", "\n", "                    ", "ag", "=", "np", ".", "asarray", "(", "self", ".", "accum_loss_g", ")", ".", "mean", "(", ")", "\n", "self", ".", "save_dictionary", "(", "{", "'g_loss'", ":", "ag", ",", "'loss_iter'", ":", "self", ".", "g_counter", "}", ")", "\n", "self", ".", "timer", "(", "self", ".", "g_counter", ",", "\" base loss: %.8f\"", "%", "ag", ")", "\n", "self", ".", "accum_loss_g", "=", "[", "]", "\n", "\n", "", "", "elif", "self", ".", "args", ".", "train_mode", "==", "'energy'", ":", "\n", "                ", "counter", "=", "self", ".", "counter", "\n", "is_valid_step", "=", "is_dstep", "\n", "if", "self", ".", "counter", "%", "self", ".", "args", ".", "disp_freq", "==", "0", "and", "is_dstep", ":", "\n", "                    ", "ad", "=", "np", ".", "asarray", "(", "self", ".", "accum_loss_d", ")", ".", "mean", "(", ")", "\n", "self", ".", "save_dictionary", "(", "{", "'d_loss'", ":", "ad", ",", "'loss_iter'", ":", "self", ".", "counter", "}", ")", "\n", "self", ".", "timer", "(", "self", ".", "counter", ",", "\" energy loss: %.8f\"", "%", "ad", ")", "\n", "self", ".", "accum_loss_d", "=", "[", "]", "\n", "\n", "", "", "if", "counter", "%", "self", ".", "args", ".", "checkpoint_freq", "==", "0", "and", "is_valid_step", ":", "\n", "                ", "if", "self", ".", "args", ".", "train_mode", "in", "[", "'both'", ",", "'base'", "]", "and", "self", ".", "args", ".", "dataset_type", "==", "'images'", ":", "\n", "                    ", "images", "=", "self", ".", "sample_images", "(", "self", ".", "fixed_latents", ",", "self", ".", "args", ".", "sample_b_size", ")", "\n", "viz", ".", "make_and_save_grid_images", "(", "images", ",", "f'Iter_{str(self.g_counter).zfill(3)}'", ",", "self", ".", "samples_dir", ")", "\n", "", "self", ".", "save_checkpoint", "(", "self", ".", "g_counter", ")", "\n", "\n", "", "self", ".", "eval_fid", "=", "is_gstep", "and", "np", ".", "mod", "(", "self", ".", "g_counter", ",", "self", ".", "args", ".", "freq_fid", ")", "==", "0", "and", "self", ".", "args", ".", "eval_fid", "\n", "self", ".", "eval_kale", "=", "is_valid_step", "and", "np", ".", "mod", "(", "counter", ",", "self", ".", "args", ".", "freq_kale", ")", "==", "0", "and", "self", ".", "args", ".", "eval_kale", "\n", "self", ".", "eval", "(", ")", "\n", "if", "self", ".", "args", ".", "use_scheduler", ":", "\n", "                ", "if", "self", ".", "eval_fid", ":", "\n", "#self.fid_scheduler.step(self.fid_train)", "\n", "                    ", "self", ".", "fid_scheduler", ".", "step", "(", "self", ".", "fid_train", ",", "self", ".", "true_train_scores", ",", "self", ".", "fake_scores", ")", "\n", "", "else", ":", "\n", "                    ", "valid_step", "=", "(", "(", "self", ".", "args", ".", "train_mode", "==", "'base'", "or", "self", ".", "args", ".", "train_mode", "==", "'both'", ")", "and", "is_gstep", ")", "or", "self", ".", "args", ".", "train_mode", "==", "'energy'", "\n", "if", "np", ".", "mod", "(", "counter", ",", "5000", ")", "==", "0", "and", "valid_step", ":", "\n", "                        ", "print", "(", "'decreasing lr'", ")", "\n", "self", ".", "scheduler_d", ".", "step", "(", ")", "\n", "self", ".", "scheduler_g", ".", "step", "(", ")", "\n", "", "", "", "", "", "def", "eval", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.eval": [[239, 252], ["trainer.Trainer.sample_images", "trainer.Trainer.compute_kale", "trainer.Trainer.compute_kale", "trainer.Trainer.save_dictionary", "torch.split", "torch.split", "torch.split", "torch.split", "trainer.Trainer.compute_fid", "trainer.Trainer.save_dictionary", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "KALE_train.item", "KALE_test.item", "base_mean.item", "log_partition.item"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.sample_images", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.compute_kale", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.compute_kale", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.save_dictionary", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.compute_fid", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.save_dictionary"], ["", "", "", "", "", "def", "eval", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "eval_fid", "or", "self", ".", "eval_kale", ":", "\n", "            ", "images", "=", "self", ".", "sample_images", "(", "self", ".", "eval_latents", ",", "self", ".", "args", ".", "sample_b_size", ",", "as_list", "=", "True", ")", "\n", "if", "self", ".", "eval_kale", ":", "\n", "                ", "KALE_train", ",", "base_mean", ",", "log_partition", "=", "self", ".", "compute_kale", "(", "self", ".", "train_loader", ",", "images", ")", "\n", "KALE_test", ",", "_", ",", "_", "=", "self", ".", "compute_kale", "(", "self", ".", "test_loader", ",", "images", ",", "precomputed_stats", "=", "(", "base_mean", ",", "log_partition", ")", ")", "\n", "self", ".", "save_dictionary", "(", "{", "'kale_train'", ":", "KALE_train", ".", "item", "(", ")", ",", "'kale_test'", ":", "KALE_test", ".", "item", "(", ")", ",", "'base_mean'", ":", "base_mean", ".", "item", "(", ")", ",", "'log_partition'", ":", "log_partition", ".", "item", "(", ")", ",", "'kale_iter'", ":", "self", ".", "counter", "}", ")", "\n", "", "if", "self", ".", "eval_fid", ":", "\n", "\n", "                ", "images", "=", "torch", ".", "split", "(", "torch", ".", "cat", "(", "images", ",", "dim", "=", "0", ")", ",", "self", ".", "args", ".", "fid_b_size", ",", "dim", "=", "0", ")", "\n", "fid_train", ",", "fid_test", "=", "self", ".", "compute_fid", "(", "images", ",", "loader_types", "=", "[", "'train'", ",", "'valid'", "]", ")", "\n", "self", ".", "fid_train", "=", "fid_train", "\n", "self", ".", "save_dictionary", "(", "{", "'fid_train'", ":", "fid_train", ",", "'fid_test'", ":", "fid_test", ",", "'kid_train'", ":", "self", ".", "kids", "[", "'kid_train'", "]", ",", "'kid_valid'", ":", "self", ".", "kids", "[", "'kid_valid'", "]", ",", "'fid_iter'", ":", "self", ".", "g_counter", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.which_step": [[254, 267], ["numpy.mod"], "methods", ["None"], ["", "", "", "def", "which_step", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "train_mode", "==", "'both'", ":", "\n", "            ", "if", "self", ".", "g_counter", "<", "2", "or", "(", "self", ".", "g_counter", "%", "500", "==", "0", ")", ":", "\n", "#if self.counter == 0:", "\n", "                ", "n_iter_d", "=", "self", ".", "args", ".", "n_iter_d_init", "\n", "", "else", ":", "\n", "                ", "n_iter_d", "=", "self", ".", "args", ".", "n_iter_d", "\n", "", "is_gstep", "=", "(", "np", ".", "mod", "(", "self", ".", "counter", ",", "n_iter_d", "+", "1", ")", "==", "0", ")", "and", "(", "self", ".", "counter", ">", "self", ".", "args", ".", "n_iter_d_init", ")", "\n", "return", "is_gstep", ",", "~", "is_gstep", "\n", "", "elif", "self", ".", "args", ".", "train_mode", "==", "'base'", ":", "\n", "            ", "return", "True", ",", "False", "\n", "", "elif", "self", ".", "args", ".", "train_mode", "==", "'energy'", ":", "\n", "            ", "return", "False", ",", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.iteration": [[269, 299], ["trainer.Trainer.prepare_optimizer", "trainer.Trainer.noise_gen.sample", "trainer.Trainer.loss", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "trainer.Trainer.generator", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "trainer.Trainer.discriminator", "trainer.Trainer.discriminator", "trainer.Trainer.compute_log_partition", "trainer.Trainer.add_penalty", "trainer.Trainer.backward", "trainer.Trainer.step", "trainer.Trainer.grad_clip"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.prepare_optimizer", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.FlowSequential.sample", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.compute_log_partition", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.add_penalty", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.fid_scheduler.MMDScheduler.step", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.grad_clip"], ["", "", "def", "iteration", "(", "self", ",", "data", ",", "net_type", ",", "train_mode", "=", "True", ")", ":", "\n", "        ", "optimizer", "=", "self", ".", "prepare_optimizer", "(", "net_type", ")", "\n", "# get data and run through discriminator", "\n", "Z", "=", "self", ".", "noise_gen", ".", "sample", "(", "[", "self", ".", "args", ".", "noise_factor", "*", "data", ".", "shape", "[", "0", "]", "]", ")", "\n", "with_gen_grad", "=", "train_mode", "and", "(", "net_type", "==", "'generator'", ")", "\n", "with", "torch", ".", "set_grad_enabled", "(", "with_gen_grad", ")", ":", "\n", "            ", "fake_data", "=", "self", ".", "generator", "(", "Z", ")", "\n", "\n", "", "with", "torch", ".", "set_grad_enabled", "(", "train_mode", ")", ":", "\n", "            ", "true_results", "=", "self", ".", "discriminator", "(", "data", ")", "\n", "fake_results", "=", "self", ".", "discriminator", "(", "fake_data", ")", "\n", "log_partition", ",", "batch_log_partition", "=", "self", ".", "compute_log_partition", "(", "fake_results", ",", "net_type", ",", "with_batch_est", "=", "True", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "criterion", "in", "[", "'kale'", ",", "'donsker'", "]", ":", "\n", "            ", "true_results", "=", "true_results", "+", "log_partition", "\n", "fake_results", "=", "fake_results", "+", "log_partition", "\n", "# calculate loss and propagate", "\n", "", "loss", "=", "self", ".", "loss", "(", "true_results", ",", "fake_results", ",", "net_type", ")", "\n", "\n", "if", "train_mode", ":", "\n", "            ", "total_loss", "=", "self", ".", "add_penalty", "(", "loss", ",", "net_type", ",", "data", ",", "fake_data", ")", "\n", "total_loss", ".", "backward", "(", ")", "\n", "if", "self", ".", "args", ".", "grad_clip", ">", "0", ":", "\n", "                ", "self", ".", "grad_clip", "(", "optimizer", ",", "net_type", "=", "net_type", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "\n", "#if net_type == 'discriminator' and loss>0. and self.args.criterion in ['kale','donsker']:", "\n", "#    self.log_partition.data = batch_log_partition.detach().clone()", "\n", "#print(loss.item())", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.prepare_optimizer": [[300, 311], ["optimizer.zero_grad", "trainer.Trainer.discriminator.train", "trainer.Trainer.generator.eval", "trainer.Trainer.generator.train", "trainer.Trainer.discriminator.eval"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.train", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.TrainerToy.eval", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.train", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.TrainerToy.eval"], ["", "def", "prepare_optimizer", "(", "self", ",", "net_type", ")", ":", "\n", "        ", "if", "net_type", "==", "'discriminator'", ":", "\n", "            ", "optimizer", "=", "self", ".", "optim_d", "\n", "self", ".", "discriminator", ".", "train", "(", ")", "\n", "self", ".", "generator", ".", "eval", "(", ")", "\n", "", "elif", "net_type", "==", "'generator'", ":", "\n", "            ", "optimizer", "=", "self", ".", "optim_g", "\n", "self", ".", "generator", ".", "train", "(", ")", "\n", "self", ".", "discriminator", ".", "eval", "(", ")", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.add_penalty": [[312, 319], ["compute.penalty_d"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.compute.penalty_d"], ["", "def", "add_penalty", "(", "self", ",", "loss", ",", "net_type", ",", "data", ",", "fake_data", ")", ":", "\n", "        ", "if", "net_type", "==", "'discriminator'", ":", "\n", "            ", "penalty", "=", "self", ".", "args", ".", "penalty_lambda", "*", "cp", ".", "penalty_d", "(", "self", ".", "args", ",", "self", ".", "discriminator", ",", "data", ",", "fake_data", ",", "self", ".", "device", ")", "\n", "total_loss", "=", "loss", "+", "penalty", "\n", "", "else", ":", "\n", "            ", "total_loss", "=", "loss", "\n", "", "return", "total_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.init_log_partition": [[320, 334], ["torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "trainer.Trainer.generator.eval", "trainer.Trainer.discriminator.eval", "range", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "numpy.log", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "trainer.Trainer.noise_gen.sample", "trainer.Trainer.generator", "compute.iterative_log_sum_exp", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "trainer.Trainer.discriminator", "torch.tensor().to.item", "torch.tensor().to.item"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.TrainerToy.eval", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.TrainerToy.eval", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.FlowSequential.sample", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.compute.iterative_log_sum_exp"], ["", "def", "init_log_partition", "(", "self", ")", ":", "\n", "        ", "log_partition", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "M", "=", "0", "\n", "num_batches", "=", "100", "\n", "self", ".", "generator", ".", "eval", "(", ")", "\n", "self", ".", "discriminator", ".", "eval", "(", ")", "\n", "for", "batch_idx", "in", "range", "(", "num_batches", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "Z", "=", "self", ".", "noise_gen", ".", "sample", "(", "[", "self", ".", "args", ".", "sample_b_size", "]", ")", "\n", "fake_data", "=", "self", ".", "generator", "(", "Z", ")", "\n", "fake_data", "=", "-", "self", ".", "discriminator", "(", "fake_data", ")", "\n", "log_partition", ",", "M", "=", "cp", ".", "iterative_log_sum_exp", "(", "fake_data", ",", "log_partition", ",", "M", ")", "\n", "", "", "log_partition", "=", "log_partition", "-", "np", ".", "log", "(", "M", ")", "\n", "return", "torch", ".", "tensor", "(", "log_partition", ".", "item", "(", ")", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.compute_log_partition": [[335, 354], ["batch_log_partition.squeeze.squeeze.squeeze", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "numpy.log", "batch_log_partition.squeeze.squeeze.detach"], "methods", ["None"], ["", "def", "compute_log_partition", "(", "self", ",", "fake_results", ",", "net_type", ",", "with_batch_est", "=", "False", ")", ":", "\n", "        ", "batch_log_partition", "=", "torch", ".", "logsumexp", "(", "-", "fake_results", ",", "dim", "=", "0", ")", "-", "np", ".", "log", "(", "fake_results", ".", "shape", "[", "0", "]", ")", "\n", "batch_log_partition", "=", "batch_log_partition", ".", "squeeze", "(", ")", "\n", "val_log_partition", "=", "self", ".", "log_partition", "\n", "tmp", "=", "fake_results", "+", "val_log_partition", "\n", "#if torch.min(tmp)<-10.:", "\n", "#    self.log_partition.data = batch_log_partition.item()*torch.ones_like(self.log_partition)", "\n", "\n", "if", "net_type", "==", "'discriminator'", ":", "\n", "            ", "if", "self", ".", "args", ".", "criterion", "==", "'donsker'", ":", "\n", "                ", "log_partition", "=", "batch_log_partition", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "                ", "log_partition", "=", "val_log_partition", "\n", "", "", "else", ":", "\n", "            ", "log_partition", "=", "batch_log_partition", "\n", "", "if", "with_batch_est", ":", "\n", "            ", "return", "log_partition", ",", "batch_log_partition", "\n", "", "else", ":", "\n", "            ", "return", "log_partition", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.grad_clip": [[355, 372], ["enumerate", "math.isfinite", "math.isfinite", "torch.norm().item", "torch.norm().item", "torch.norm().item", "torch.norm().item", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.norm().item", "torch.norm().item", "torch.norm().item", "torch.norm().item", "print", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "", "def", "grad_clip", "(", "self", ",", "optimizer", ",", "net_type", "=", "'discriminator'", ")", ":", "\n", "        ", "if", "net_type", "==", "'discriminator'", ":", "\n", "            ", "params", "=", "self", ".", "d_params", "[", ":", "-", "1", "]", "\n", "for", "i", ",", "param", "in", "enumerate", "(", "params", ")", ":", "\n", "                ", "new_grad", "=", "2.", "*", "(", "param", ".", "grad", ".", "data", ")", "/", "(", "1", "+", "(", "param", ".", "grad", ".", "data", ")", "**", "2", ")", "\n", "if", "math", ".", "isfinite", "(", "torch", ".", "norm", "(", "new_grad", ")", ".", "item", "(", ")", ")", ":", "\n", "                    ", "param", ".", "grad", ".", "data", "=", "1.", "*", "new_grad", "\n", "", "else", ":", "\n", "                    ", "print", "(", "'nan grad'", ")", "\n", "param", ".", "grad", ".", "data", "=", "torch", ".", "zeros_like", "(", "new_grad", ")", "\n", "\n", "", "", "param", "=", "self", ".", "d_params", "[", "-", "1", "]", "\n", "new_grad", "=", "param", ".", "grad", ".", "data", "/", "(", "1", "-", "param", ".", "grad", ".", "data", ")", "\n", "if", "math", ".", "isfinite", "(", "torch", ".", "norm", "(", "new_grad", ")", ".", "item", "(", ")", ")", ":", "\n", "                ", "param", ".", "grad", ".", "data", "=", "new_grad", "\n", "", "else", ":", "\n", "                ", "param", ".", "grad", ".", "data", "=", "torch", ".", "zeros_like", "(", "new_grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.compute_fid": [[376, 410], ["trainer.Trainer.get_activations", "trainer.Trainer.fake_scores.numpy", "numpy.mean", "numpy.cov", "compute.get_fid_stats", "compute.calculate_frechet_distance", "utils.kid_score.polynomial_mmd_averages", "kid[].mean", "fids.append", "kids.append", "trainer.Trainer.true_train_scores.numpy", "trainer.Trainer.true_valid_scores.numpy"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.fid_pytorch.get_activations", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.compute.get_fid_stats", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.fid_pytorch.calculate_frechet_distance", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.kid_score.polynomial_mmd_averages"], ["", "", "", "def", "compute_fid", "(", "self", ",", "gen_loader", ",", "loader_types", "=", "[", "'train'", ",", "'valid'", "]", ")", ":", "\n", "        ", "self", ".", "get_activations", "(", "gen_loader", ",", "loader_types", "=", "loader_types", ")", "\n", "\n", "fids", "=", "[", "]", "\n", "kids", "=", "[", "]", "\n", "np_fake_scores", "=", "self", ".", "fake_scores", ".", "numpy", "(", ")", "\n", "mu2", "=", "np", ".", "mean", "(", "np_fake_scores", ",", "axis", "=", "0", ")", "\n", "sigma2", "=", "np", ".", "cov", "(", "np_fake_scores", ",", "rowvar", "=", "False", ")", "\n", "\n", "for", "loader_type", "in", "loader_types", ":", "\n", "            ", "if", "loader_type", "==", "'train'", ":", "\n", "                ", "data_loader", "=", "self", ".", "train_loader", "\n", "np_true_scores", "=", "self", ".", "true_train_scores", ".", "numpy", "(", ")", "\n", "#if self.true_train_mu is None:", "\n", "#    self.true_train_mu = np.mean(np_true_scores, axis=0)", "\n", "#    self.true_train_sigma = np.cov(np_true_scores, rowvar=False)", "\n", "#fid = cp.calculate_frechet_distance(self.true_train_mu, self.true_train_sigma, mu2, sigma2)", "\n", "", "elif", "loader_type", "==", "'valid'", ":", "\n", "                ", "data_loader", "=", "self", ".", "test_loader", "\n", "np_true_scores", "=", "self", ".", "true_valid_scores", ".", "numpy", "(", ")", "\n", "#if self.true_valid_mu is None:", "\n", "#    self.true_valid_mu = np.mean(np_true_scores, axis=0)", "\n", "#    self.true_valid_sigma = np.cov(np_true_scores, rowvar=False)", "\n", "#fid = cp.calculate_frechet_distance(self.true_valid_mu, self.true_valid_sigma, mu2, sigma2)", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "mu1", ",", "sigma1", "=", "cp", ".", "get_fid_stats", "(", "self", ".", "fid_model", ",", "data_loader", ",", "self", ".", "args", ".", "dataset", ",", "loader_type", ",", "self", ".", "device", ")", "\n", "fid", "=", "cp", ".", "calculate_frechet_distance", "(", "mu1", ",", "sigma1", ",", "mu2", ",", "sigma2", ")", "\n", "kid", "=", "kid_score", ".", "polynomial_mmd_averages", "(", "np_true_scores", ",", "np_fake_scores", ",", "n_subsets", "=", "10", ")", "\n", "kid", "=", "kid", "[", "0", "]", ".", "mean", "(", ")", "\n", "fids", ".", "append", "(", "fid", ")", "\n", "kids", ".", "append", "(", "kid", ")", "\n", "", "self", ".", "kids", "=", "{", "'kid_train'", ":", "kids", "[", "0", "]", ",", "'kid_valid'", ":", "kids", "[", "1", "]", "}", "\n", "return", "fids", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.get_activations": [[411, 445], ["trainer.Trainer.generator.to", "trainer.Trainer.discriminator.to", "trainer.Trainer.fid_model.to", "compute.get_activations_from_loader", "trainer.Trainer.fid_model.to", "trainer.Trainer.generator.to", "trainer.Trainer.discriminator.to", "numpy.load", "numpy.load.close", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "compute.get_activations_from_loader.clone", "print", "compute.get_activations_from_loader", "numpy.savez", "compute.get_activations_from_loader.clone", "compute.get_activations_from_loader.numpy"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.fid_pytorch.get_activations_from_loader", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.fid_pytorch.get_activations_from_loader"], ["", "def", "get_activations", "(", "self", ",", "gen_loader", ",", "loader_types", "=", "[", "'train'", ",", "'valid'", "]", ")", ":", "\n", "        ", "self", ".", "generator", ".", "to", "(", "'cpu'", ")", "\n", "self", ".", "discriminator", ".", "to", "(", "'cpu'", ")", "\n", "self", ".", "fid_model", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "fake_scores", "=", "cp", ".", "get_activations_from_loader", "(", "gen_loader", ",", "self", ".", "fid_model", ",", "self", ".", "device", ",", "batch_size", "=", "self", ".", "args", ".", "fid_b_size", ",", "total_samples", "=", "self", ".", "args", ".", "fid_samples", ")", "\n", "for", "loader_type", "in", "loader_types", ":", "\n", "            ", "if", "loader_type", "==", "'train'", ":", "\n", "                ", "data_loader", "=", "self", ".", "train_loader", "\n", "true_scores", "=", "self", ".", "true_train_scores", "\n", "", "elif", "loader_type", "==", "'valid'", ":", "\n", "                ", "data_loader", "=", "self", ".", "test_loader", "\n", "true_scores", "=", "self", ".", "true_valid_scores", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "path", "=", "'metrics/res/stats_pytorch/fid_scores_'", "+", "self", ".", "args", ".", "dataset", "+", "'_'", "+", "loader_type", "+", "'.npz'", "\n", "\n", "if", "true_scores", "is", "None", ":", "\n", "                ", "try", ":", "\n", "                    ", "f", "=", "np", ".", "load", "(", "path", ")", "\n", "true_scores", "=", "f", "[", "'scores'", "]", "[", ":", "]", "\n", "f", ".", "close", "(", ")", "\n", "true_scores", "=", "torch", ".", "tensor", "(", "true_scores", ")", "\n", "", "except", ":", "\n", "                    ", "print", "(", "'==> Computing data stats'", ")", "\n", "true_scores", "=", "cp", ".", "get_activations_from_loader", "(", "self", ".", "train_loader", ",", "self", ".", "fid_model", ",", "self", ".", "device", ",", "batch_size", "=", "self", ".", "args", ".", "fid_b_size", ",", "total_samples", "=", "self", ".", "args", ".", "fid_samples", ",", "is_tuple", "=", "True", ")", "\n", "np", ".", "savez", "(", "path", ",", "scores", "=", "true_scores", ".", "numpy", "(", ")", ")", "\n", "", "if", "loader_type", "==", "'train'", ":", "\n", "                    ", "self", ".", "true_train_scores", "=", "true_scores", ".", "clone", "(", ")", "\n", "", "elif", "loader_type", "==", "'valid'", ":", "\n", "                    ", "self", ".", "true_valid_scores", "=", "true_scores", ".", "clone", "(", ")", "\n", "", "", "", "self", ".", "fid_model", ".", "to", "(", "'cpu'", ")", "\n", "self", ".", "generator", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "discriminator", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.compute_kale": [[448, 479], ["trainer.Trainer.discriminator.eval", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "compute.iterative_mean", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "numpy.log", "trainer.Trainer.discriminator", "compute.iterative_log_sum_exp", "compute.iterative_mean", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "trainer.Trainer.discriminator", "img.to", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "data.to"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.TrainerToy.eval", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.compute.iterative_mean", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.compute.iterative_log_sum_exp", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.compute.iterative_mean"], ["", "def", "compute_kale", "(", "self", ",", "data_loader", ",", "base_loader", ",", "precomputed_stats", "=", "None", ")", ":", "\n", "        ", "self", ".", "discriminator", ".", "eval", "(", ")", "\n", "base_mean", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "data_mean", "=", "0", "\n", "if", "precomputed_stats", "is", "None", ":", "\n", "            ", "M", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "img", "in", "base_loader", ":", "\n", "                    ", "energy", "=", "-", "self", ".", "discriminator", "(", "img", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "if", "self", ".", "args", ".", "criterion", "==", "'donsker'", ":", "\n", "                        ", "base_mean", ",", "M", "=", "cp", ".", "iterative_log_sum_exp", "(", "torch", ".", "exp", "(", "energy", ")", ",", "base_mean", ",", "M", ")", "\n", "", "else", ":", "\n", "                        ", "energy", "=", "-", "torch", ".", "exp", "(", "energy", "-", "self", ".", "log_partition", ")", "\n", "base_mean", ",", "M", "=", "cp", ".", "iterative_mean", "(", "energy", ",", "base_mean", ",", "M", ")", "\n", "", "", "", "if", "self", ".", "args", ".", "criterion", "==", "'donsker'", ":", "\n", "                ", "log_partition", "=", "1.", "*", "base_mean", "-", "np", ".", "log", "(", "M", ")", "\n", "base_mean", "=", "torch", ".", "tensor", "(", "-", "1.", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "                ", "log_partition", "=", "self", ".", "log_partition", "\n", "\n", "", "", "else", ":", "\n", "            ", "base_mean", ",", "log_partition", "=", "precomputed_stats", "\n", "\n", "", "M", "=", "0", "\n", "for", "data", ",", "target", "in", "data_loader", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "data_energy", "=", "-", "(", "self", ".", "discriminator", "(", "data", ".", "to", "(", "self", ".", "device", ")", ")", "+", "log_partition", ")", "\n", "", "data_mean", ",", "M", "=", "cp", ".", "iterative_mean", "(", "data_energy", ",", "data_mean", ",", "M", ")", "\n", "\n", "", "KALE", "=", "data_mean", "+", "base_mean", "+", "1", "\n", "return", "KALE", ",", "base_mean", ",", "log_partition", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.init_latents": [[482, 494], ["numpy.minimum", "trainer.Trainer.latent_sampler.estimate_lip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "trainer.Trainer.eval_latents.unsqueeze().clone", "trainer.Trainer.eval_latents[].to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "trainer.Trainer.eval_latents.unsqueeze", "trainer.Trainer.eval_latents.unsqueeze", "trainer.Trainer.eval_latents.unsqueeze", "trainer.Trainer.eval_velocity.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.DOT.estimate_lip"], ["", "def", "init_latents", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "latent_sampler", "==", "'dot'", ":", "\n", "            ", "priors", "=", "1.", "*", "self", ".", "eval_latents", ".", "unsqueeze", "(", "-", "1", ")", ".", "clone", "(", ")", "\n", "max_samples", "=", "np", ".", "minimum", "(", "500", ",", "self", ".", "eval_latents", ".", "shape", "[", "0", "]", ")", "\n", "self", ".", "latent_sampler", ".", "estimate_lip", "(", "self", ".", "eval_latents", "[", ":", "max_samples", "]", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "self", ".", "eval_latents", ".", "unsqueeze", "(", "-", "1", ")", ",", "priors", "]", ",", "dim", "=", "-", "1", ")", "\n", "return", "out", "\n", "", "elif", "self", ".", "args", ".", "latent_sampler", "==", "'lmc'", ":", "\n", "            ", "out", "=", "torch", ".", "cat", "(", "[", "self", ".", "eval_latents", ".", "unsqueeze", "(", "-", "1", ")", ",", "self", ".", "eval_velocity", ".", "unsqueeze", "(", "-", "1", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "return", "out", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "eval_latents", "\n", "", "", "def", "get_posterior", "(", "self", ",", "posteriors", ")", ":", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.get_posterior": [[494, 501], ["None"], "methods", ["None"], ["", "", "def", "get_posterior", "(", "self", ",", "posteriors", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "latent_sampler", "==", "'dot'", ":", "\n", "            ", "return", "posteriors", "[", ":", ",", ":", ",", "0", "]", "\n", "", "elif", "self", ".", "args", ".", "latent_sampler", "==", "'lmc'", ":", "\n", "            ", "return", "posteriors", "[", ":", ",", ":", ",", "0", "]", "\n", "", "else", ":", "\n", "            ", "return", "posteriors", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.sample": [[502, 529], ["time.time", "range", "int", "trainer.Trainer.sample_images", "trainer.Trainer.compute_kale", "trainer.Trainer.compute_fid", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "trainer.Trainer.save_dictionary", "utils.vizualization.make_and_save_grid_images", "time.time", "print", "trainer.Trainer.init_latents", "trainer.Trainer.sample_latents", "trainer.Trainer.get_posterior", "saved_images.cpu().numpy", "saved_posteriors.cpu().numpy", "print", "saved_images.cpu", "saved_posteriors.cpu", "str().zfill", "str"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.sample_images", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.compute_kale", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.compute_fid", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.save_dictionary", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.vizualization.make_and_save_grid_images", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.init_latents", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.toy_models.BaseDataset.sample_latents", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.get_posterior"], ["", "", "def", "sample", "(", "self", ")", ":", "\n", "        ", "T", "=", "10", "\n", "max_saved", "=", "50", "\n", "num_dps", "=", "int", "(", "self", ".", "args", ".", "num_sampler_steps", "/", "T", ")", "+", "1", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "for", "i", "in", "range", "(", "num_dps", ")", ":", "\n", "            ", "iter_num", "=", "i", "*", "T", "\n", "if", "i", "==", "0", ":", "\n", "                ", "posteriors", "=", "self", ".", "init_latents", "(", ")", "\n", "", "else", ":", "\n", "                ", "posteriors", "=", "self", ".", "sample_latents", "(", "posteriors", ",", "self", ".", "args", ".", "sample_b_size", ",", "T", ")", "\n", "\n", "", "images", "=", "self", ".", "sample_images", "(", "self", ".", "get_posterior", "(", "posteriors", ")", ",", "self", ".", "args", ".", "fid_b_size", ",", "as_list", "=", "True", ")", "\n", "KALE_train", ",", "base_mean", ",", "log_partition", "=", "self", ".", "compute_kale", "(", "self", ".", "train_loader", ",", "images", ")", "\n", "fid_train", ",", "fid_test", "=", "self", ".", "compute_fid", "(", "images", ",", "loader_types", "=", "[", "'train'", ",", "'valid'", "]", ")", "\n", "images", "=", "torch", ".", "cat", "(", "images", ",", "dim", "=", "0", ")", "\n", "saved_images", "=", "images", "[", ":", "64", "]", "\n", "saved_posteriors", "=", "posteriors", "[", ":", "64", "]", "\n", "dic_arrays", "=", "{", "'images'", ":", "saved_images", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "'latents'", ":", "saved_posteriors", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "}", "\n", "self", ".", "save_dictionary", "(", "{", "'fid_train'", ":", "fid_train", ",", "'fid_test'", ":", "fid_test", ",", "'temp'", ":", "self", ".", "args", ".", "temperature", "}", ",", "dic_arrays", "=", "dic_arrays", ",", "index", "=", "iter_num", ")", "\n", "viz", ".", "make_and_save_grid_images", "(", "images", ",", "f'iter_{str(iter_num).zfill(3)}'", ",", "self", ".", "samples_dir", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "F'FID at step {iter_num}: {fid_train},  avg time {end-start}'", ")", "\n", "start", "=", "end", "\n", "if", "i", "%", "20", "==", "0", "and", "i", ">", "0", ":", "\n", "                ", "self", ".", "latent_sampler", ".", "gamma", "*=", "0.1", "\n", "print", "(", "f'decreasing lr for sampling: {self.latent_sampler.gamma}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.sample_latents": [[530, 548], ["enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "numpy.mean", "priors.split", "time.time", "prior.clone().to.clone().to.clone().to", "trainer.Trainer.latent_sampler.sample", "torch.cat.append", "torch.cat.append", "numpy.mean.append", "numpy.array", "prior.clone().to.clone().to.clone"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.FlowSequential.sample"], ["", "", "", "def", "sample_latents", "(", "self", ",", "priors", ",", "b_size", ",", "T", ",", "with_acceptance", "=", "False", ")", ":", "\n", "        ", "avg_time", "=", "0", "\n", "posteriors", "=", "[", "]", "\n", "avg_acceptences", "=", "[", "]", "\n", "for", "b", ",", "prior", "in", "enumerate", "(", "priors", ".", "split", "(", "b_size", ",", "dim", "=", "0", ")", ")", ":", "\n", "            ", "st", "=", "time", ".", "time", "(", ")", "\n", "prior", "=", "prior", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "posterior", ",", "avg_acceptence", "=", "self", ".", "latent_sampler", ".", "sample", "(", "prior", ",", "sample_chain", "=", "False", ",", "T", "=", "T", ")", "\n", "posteriors", ".", "append", "(", "posterior", ")", "\n", "avg_acceptences", ".", "append", "(", "avg_acceptence", ")", "\n", "\n", "", "posteriors", "=", "torch", ".", "cat", "(", "posteriors", ",", "axis", "=", "0", ")", "\n", "avg_acceptences", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "avg_acceptences", ")", ",", "axis", "=", "0", ")", "\n", "\n", "if", "with_acceptance", ":", "\n", "            ", "return", "posteriors", ",", "avg_acceptences", "\n", "", "else", ":", "\n", "            ", "return", "posteriors", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.sample_images": [[549, 563], ["trainer.Trainer.discriminator.eval", "trainer.Trainer.generator.eval", "latents.split", "images.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "trainer.Trainer.generator", "img.cpu.cpu.cpu", "latent.to"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.TrainerToy.eval", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.TrainerToy.eval"], ["", "", "def", "sample_images", "(", "self", ",", "latents", ",", "b_size", "=", "128", ",", "to_cpu", "=", "True", ",", "as_list", "=", "False", ")", ":", "\n", "        ", "self", ".", "discriminator", ".", "eval", "(", ")", "\n", "self", ".", "generator", ".", "eval", "(", ")", "\n", "images", "=", "[", "]", "\n", "for", "latent", "in", "latents", ".", "split", "(", "b_size", ",", "dim", "=", "0", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "img", "=", "self", ".", "generator", "(", "latent", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "", "if", "to_cpu", ":", "\n", "                ", "img", "=", "img", ".", "cpu", "(", ")", "\n", "", "images", ".", "append", "(", "img", ")", "\n", "", "if", "as_list", ":", "\n", "            ", "return", "images", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "cat", "(", "images", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.save_checkpoint": [[566, 586], ["trainer.Trainer.discriminator.state_dict", "torch.save", "torch.save", "torch.save", "torch.save", "print", "torch.save", "torch.save", "torch.save", "torch.save", "print", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "trainer.Trainer.generator.state_dict"], "methods", ["None"], ["", "", "def", "save_checkpoint", "(", "self", ",", "epoch", ",", "best", "=", "False", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "save_nothing", ":", "\n", "            ", "return", "\n", "", "if", "self", ".", "args", ".", "train_mode", "in", "[", "'both'", ",", "'energy'", "]", ":", "\n", "            ", "d_dict", "=", "self", ".", "discriminator", ".", "state_dict", "(", ")", "\n", "if", "self", ".", "args", ".", "criterion", "==", "'kale'", ":", "\n", "                ", "d_dict", "[", "'log_partition'", "]", "=", "self", ".", "log_partition", "\n", "", "if", "best", ":", "\n", "                ", "d_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "checkpoint_dir", ",", "f'd_best.pth'", ")", "\n", "", "else", ":", "\n", "                ", "d_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "checkpoint_dir", ",", "f'd_{epoch}.pth'", ")", "\n", "", "torch", ".", "save", "(", "d_dict", ",", "d_path", ")", "\n", "print", "(", "f'Saved {d_path}'", ")", "\n", "", "if", "self", ".", "args", ".", "train_mode", "in", "[", "'both'", ",", "'base'", "]", ":", "\n", "            ", "if", "best", ":", "\n", "                ", "g_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "checkpoint_dir", ",", "f'g_best.pth'", ")", "\n", "", "else", ":", "\n", "                ", "g_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "checkpoint_dir", ",", "f'g_{epoch}.pth'", ")", "\n", "", "torch", ".", "save", "(", "self", ".", "generator", ".", "state_dict", "(", ")", ",", "g_path", ")", "\n", "print", "(", "f'Saved {g_path}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.save_dictionary": [[589, 599], ["os.path.join", "os.path.join", "numpy.savez", "open", "json.dump", "f.write", "str().zfill", "str"], "methods", ["None"], ["", "", "def", "save_dictionary", "(", "self", ",", "new_dict", ",", "dic_arrays", "=", "None", ",", "index", "=", "0", ")", ":", "\n", "        ", "if", "dic_arrays", "is", "not", "None", ":", "\n", "            ", "fname", "=", "os", ".", "path", ".", "join", "(", "self", ".", "samples_dir", ",", "f'MCMC_samples_{str(index).zfill(3)}.pkl'", ")", "\n", "np", ".", "savez", "(", "fname", ",", "**", "dic_arrays", ")", "\n", "new_dict", "[", "'index'", "]", "=", "index", "\n", "new_dict", "[", "'path_arrays'", "]", "=", "fname", "\n", "", "file_name", "=", "os", ".", "path", ".", "join", "(", "self", ".", "samples_dir", ",", "f'stats_seed_{self.args.seed}'", ")", "\n", "with", "open", "(", "file_name", "+", "'.json'", ",", "'a'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "new_dict", ",", "f", ")", "\n", "f", ".", "write", "(", "os", ".", "linesep", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.TrainerEBM.__init__": [[601, 613], ["helpers.get_data_loader", "int", "int", "trainer.Trainer.__init__", "models.energy_model.CombinedDiscriminator", "get_latent_sampler", "samplers.ContrastiveDivergenceSampler"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.helpers.get_data_loader", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.helpers.get_latent_sampler"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "train_loader", ",", "self", ".", "test_loader", ",", "self", ".", "valid_loader", ",", "self", ".", "input_dims", "=", "hp", ".", "get_data_loader", "(", "self", ".", "args", ",", "self", ".", "args", ".", "b_size", ",", "self", ".", "args", ".", "num_workers", ")", "\n", "args", ".", "Z_dim", "=", "int", "(", "self", ".", "input_dims", ")", "\n", "self", ".", "dataset_size", "=", "int", "(", "self", ".", "train_loader", ".", "dataset", ".", "X", ".", "shape", "[", "0", "]", ")", "\n", "super", "(", "TrainerEBM", ",", "self", ")", ".", "__init__", "(", "args", ")", "\n", "if", "self", ".", "args", ".", "combined_discriminator", ":", "\n", "            ", "self", ".", "discriminator", "=", "models", ".", "energy_model", ".", "CombinedDiscriminator", "(", "self", ".", "discriminator", ",", "self", ".", "generator", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "criterion", "==", "'cd'", ":", "\n", "            ", "sampler", "=", "get_latent_sampler", "(", "self", ".", "args", ",", "self", ".", "discriminator", ",", "self", ".", "args", ".", "Z_dim", ",", "self", ".", "device", ")", "\n", "self", ".", "cd_sampler", "=", "samplers", ".", "ContrastiveDivergenceSampler", "(", "self", ".", "noise_gen", ",", "sampler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.TrainerEBM.select_statistics": [[614, 624], ["getattr", "getattr", "statistics.append", "statistics.append"], "methods", ["None"], ["", "", "def", "select_statistics", "(", "self", ")", ":", "\n", "        ", "statistics", "=", "[", "'nll_gen'", ",", "'kale'", "]", "\n", "has_log_density", "=", "getattr", "(", "self", ".", "discriminator", ",", "\"log_density\"", ",", "None", ")", "is", "not", "None", "\n", "has_log_partition", "=", "getattr", "(", "self", ".", "discriminator", ",", "\"log_partition\"", ",", "None", ")", "is", "not", "None", "\n", "if", "has_log_density", ":", "\n", "            ", "statistics", ".", "append", "(", "'nll_dis'", ")", "\n", "", "if", "has_log_partition", ":", "\n", "            ", "statistics", ".", "append", "(", "'gt_log_partition'", ")", "\n", "\n", "", "return", "statistics", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.TrainerEBM.eval": [[625, 638], ["numpy.mod", "trainer.TrainerEBM.select_statistics", "trainer.TrainerEBM.sample_images", "trainer.TrainerEBM.compute_stats_dic", "trainer.TrainerEBM.compute_stats_dic", "trainer.TrainerEBM.compute_stats_dic", "trainer.TrainerEBM.save_dictionary", "trainer.TrainerEBM.print", "trainer.TrainerEBM.pp.pprint", "str", "int"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.TrainerEBM.select_statistics", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.sample_images", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.TrainerEBM.compute_stats_dic", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.TrainerEBM.compute_stats_dic", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.TrainerEBM.compute_stats_dic", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.save_dictionary"], ["", "def", "eval", "(", "self", ")", ":", "\n", "        ", "if", "np", ".", "mod", "(", "self", ".", "counter", ",", "self", ".", "dataset_size", ")", "==", "0", ":", "\n", "            ", "statistics", "=", "self", ".", "select_statistics", "(", ")", "\n", "gen_loader", "=", "self", ".", "sample_images", "(", "self", ".", "eval_latents", ",", "self", ".", "args", ".", "noise_factor", "*", "self", ".", "args", ".", "b_size", ",", "as_list", "=", "True", ")", "\n", "\n", "train_dic", ",", "base_mean", ",", "log_partition", "=", "self", ".", "compute_stats_dic", "(", "self", ".", "train_loader", ",", "gen_loader", ",", "'train'", ",", "statistics", ")", "\n", "valid_dic", ",", "_", ",", "_", "=", "self", ".", "compute_stats_dic", "(", "self", ".", "valid_loader", ",", "gen_loader", ",", "'valid'", ",", "statistics", ",", "precomputed_stats", "=", "(", "base_mean", ",", "log_partition", ")", ")", "\n", "test_dic", ",", "_", ",", "_", "=", "self", ".", "compute_stats_dic", "(", "self", ".", "test_loader", ",", "gen_loader", ",", "'test'", ",", "statistics", ",", "precomputed_stats", "=", "(", "base_mean", ",", "log_partition", ")", ")", "\n", "\n", "total_dic", "=", "{", "**", "train_dic", ",", "**", "valid_dic", ",", "**", "test_dic", "}", "\n", "self", ".", "save_dictionary", "(", "total_dic", ")", "\n", "self", ".", "print", "(", "'Epoch'", "+", "str", "(", "int", "(", "self", ".", "counter", "/", "self", ".", "dataset_size", ")", ")", ")", "\n", "self", ".", "pp", ".", "pprint", "(", "total_dic", ")", "\n", "#print(total_dic)", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.TrainerEBM.compute_stats_dic": [[641, 665], ["compute.compute_nll", "compute.compute_nll.item", "compute.compute_nll", "compute.compute_nll.item", "trainer.TrainerEBM.compute_kale", "KALE.item", "base_mean.item", "log_partition.item", "trainer.TrainerEBM.discriminator.log_partition().item", "trainer.TrainerEBM.discriminator.log_partition"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.compute.compute_nll", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.compute.compute_nll", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.compute_kale", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.energy_model.FlowGenerator.log_partition"], ["", "", "def", "compute_stats_dic", "(", "self", ",", "data_loader", ",", "gen_loader", ",", "loader_type", ",", "statistics", "=", "[", "'nll_gen'", ",", "'nll_dis'", ",", "'kale'", "]", ",", "precomputed_stats", "=", "None", ")", ":", "\n", "        ", "stats_dic", "=", "{", "}", "\n", "if", "'nll_gen'", "in", "statistics", ":", "\n", "            ", "nll_gen", "=", "cp", ".", "compute_nll", "(", "data_loader", ",", "self", ".", "generator", ",", "self", ".", "device", ")", "\n", "stats_dic", "[", "loader_type", "+", "'_nll_gen'", "]", "=", "nll_gen", ".", "item", "(", ")", "\n", "", "if", "'nll_dis'", "in", "statistics", ":", "\n", "            ", "nll_gen", "=", "cp", ".", "compute_nll", "(", "data_loader", ",", "self", ".", "discriminator", ",", "self", ".", "device", ")", "\n", "stats_dic", "[", "loader_type", "+", "'_nll_dis'", "]", "=", "nll_gen", ".", "item", "(", ")", "\n", "", "if", "'kale'", "in", "statistics", ":", "\n", "\n", "            ", "KALE", ",", "base_mean", ",", "log_partition", "=", "self", ".", "compute_kale", "(", "data_loader", ",", "gen_loader", ",", "precomputed_stats", "=", "precomputed_stats", ")", "\n", "stats_dic", "[", "loader_type", "+", "'_kale'", "]", "=", "KALE", ".", "item", "(", ")", "\n", "stats_dic", "[", "loader_type", "+", "'_base_mean'", "]", "=", "base_mean", ".", "item", "(", ")", "\n", "stats_dic", "[", "loader_type", "+", "'_log_partition'", "]", "=", "log_partition", ".", "item", "(", ")", "\n", "precomputed_stats", "=", "(", "base_mean", ",", "log_partition", ")", "\n", "", "if", "'gt_log_partition'", "in", "statistics", ":", "\n", "            ", "stats_dic", "[", "loader_type", "+", "'_gt_log_partition'", "]", "=", "self", ".", "discriminator", ".", "log_partition", "(", ")", ".", "item", "(", ")", "\n", "", "if", "precomputed_stats", "is", "None", ":", "\n", "\n", "\n", "            ", "return", "stats_dic", ",", "None", "\n", "", "else", ":", "\n", "            ", "base_mean", ",", "log_partition", "=", "precomputed_stats", "\n", "return", "stats_dic", ",", "base_mean", ",", "log_partition", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.TrainerEBM.iteration": [[666, 671], ["trainer.TrainerEBM.ebm_iteration", "trainer.Trainer.iteration"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.TrainerEBM.ebm_iteration", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.TrainerEBM.iteration"], ["", "", "def", "iteration", "(", "self", ",", "data", ",", "net_type", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "criterion", "in", "[", "'cd'", ",", "'ml'", "]", ":", "\n", "            ", "return", "self", ".", "ebm_iteration", "(", "data", ",", "net_type", ")", "\n", "", "else", ":", "\n", "            ", "return", "super", "(", ")", ".", "iteration", "(", "data", ",", "net_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.TrainerEBM.ebm_iteration": [[672, 690], ["trainer.TrainerEBM.prepare_optimizer", "trainer.TrainerEBM.add_penalty", "loss.backward", "trainer.TrainerEBM.step", "trainer.TrainerEBM.cd_sampler.sample", "trainer.TrainerEBM.discriminator", "trainer.TrainerEBM.discriminator", "trainer.TrainerEBM.mean", "trainer.TrainerEBM.mean", "model.log_density().mean", "model.log_density"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.prepare_optimizer", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.add_penalty", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.fid_scheduler.MMDScheduler.step", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.FlowSequential.sample", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.energy_model.GaussianGenerator.log_density"], ["", "", "def", "ebm_iteration", "(", "self", ",", "data", ",", "net_type", "=", "'discriminator'", ")", ":", "\n", "        ", "optimizer", "=", "self", ".", "prepare_optimizer", "(", "net_type", ")", "\n", "if", "self", ".", "args", ".", "criterion", "==", "'cd'", ":", "\n", "            ", "gen_data", "=", "self", ".", "cd_sampler", ".", "sample", "(", "data", ")", "\n", "true_data", "=", "self", ".", "discriminator", "(", "data", ")", "\n", "fake_data", "=", "self", ".", "discriminator", "(", "gen_data", ")", "\n", "loss", "=", "true_data", ".", "mean", "(", ")", "-", "fake_data", ".", "mean", "(", ")", "\n", "", "elif", "self", ".", "args", ".", "criterion", "==", "'ml'", ":", "\n", "            ", "if", "net_type", "==", "'discriminator'", ":", "\n", "                ", "model", "=", "self", ".", "discriminator", "\n", "", "elif", "net_type", "==", "'generator'", ":", "\n", "                ", "model", "=", "self", ".", "generator", "\n", "", "loss", "=", "-", "model", ".", "log_density", "(", "data", ")", ".", "mean", "(", ")", "\n", "", "total_loss", "=", "self", ".", "add_penalty", "(", "loss", ",", "net_type", ",", "data", ",", "gen_fdata_in", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.TrainerEBM.train_multiple_splits": [[691, 697], ["enumerate", "range", "print", "trainer.TrainerEBM.build_model", "trainer.TrainerEBM.train", "str"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.build_model", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.train"], ["", "def", "train_multiple_splits", "(", "self", ")", ":", "\n", "        ", "for", "i", ",", "seed", "in", "enumerate", "(", "range", "(", "15", ")", ")", ":", "\n", "            ", "print", "(", "' Iteration : '", "+", "str", "(", "i", ")", ")", "\n", "self", ".", "args", ".", "seed", "=", "seed", "\n", "self", ".", "build_model", "(", ")", "\n", "self", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.TrainerToy.__init__": [[699, 705], ["helpers.get_data_loader", "trainer.Trainer.__init__"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.helpers.get_data_loader", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "train_loader", ",", "self", ".", "test_loader", ",", "self", ".", "valid_loader", ",", "self", ".", "input_dims", "=", "hp", ".", "get_data_loader", "(", "args", ",", "args", ".", "trainer", ".", "b_size", ",", "args", ".", "system", ".", "num_workers", ")", "\n", "args", ".", "Z_dim", "=", "self", ".", "input_dims", "\n", "\n", "self", ".", "args", "=", "args", "\n", "super", "(", "TrainerToy", ",", "self", ")", ".", "__init__", "(", "args", ")", "\n", "", "def", "log_dir_formatter", "(", "self", ",", "args", ")", ":", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.TrainerToy.log_dir_formatter": [[705, 707], ["os.path.join"], "methods", ["None"], ["", "def", "log_dir_formatter", "(", "self", ",", "args", ")", ":", "\n", "            ", "return", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "args", ".", "mode", ",", "args", ".", "dataset_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.TrainerToy.eval": [[708, 712], ["numpy.mod", "trainer.TrainerToy.compute_error_model", "trainer.TrainerToy.timer"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.TrainerToy.compute_error_model"], ["", "def", "eval", "(", "self", ")", ":", "\n", "        ", "if", "np", ".", "mod", "(", "self", ".", "counter", ",", "self", ".", "train", ")", "==", "0", ":", "\n", "            ", "out", "=", "self", ".", "compute_error_model", "(", ")", "\n", "self", ".", "timer", "(", "self", ".", "counter", ",", "\" energy error params: %.8f, base error params: %.8f\"", "%", "(", "out", "[", "'error_energy'", "]", ",", "out", "[", "'error_base'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.TrainerToy.compute_error_model": [[713, 733], ["list", "list", "list", "list", "numpy.array().sum", "numpy.array().sum", "os.path.join", "trainer.TrainerToy.discriminator.parameters", "trainer.TrainerToy.train_loader.dataset.energy.parameters", "trainer.TrainerToy.generator.parameters", "trainer.TrainerToy.train_loader.dataset.base.parameters", "open", "pickle.dump", "numpy.array", "numpy.array", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "zip", "zip"], "methods", ["None"], ["", "", "def", "compute_error_model", "(", "self", ")", ":", "\n", "        ", "params_energy", "=", "list", "(", "self", ".", "discriminator", ".", "parameters", "(", ")", ")", "\n", "true_params_energy", "=", "list", "(", "self", ".", "train_loader", ".", "dataset", ".", "energy", ".", "parameters", "(", ")", ")", "\n", "\n", "params_base", "=", "list", "(", "self", ".", "generator", ".", "parameters", "(", ")", ")", "\n", "true_params_base", "=", "list", "(", "self", ".", "train_loader", ".", "dataset", ".", "base", ".", "parameters", "(", ")", ")", "\n", "error_bases", "=", "np", ".", "array", "(", "[", "torch", ".", "norm", "(", "p", "-", "tp", ")", "for", "p", ",", "tp", "in", "zip", "(", "params_base", ",", "true_params_base", ")", "]", ")", ".", "sum", "(", ")", "\n", "error_energy", "=", "np", ".", "array", "(", "[", "torch", ".", "norm", "(", "p", "-", "tp", ")", "for", "p", ",", "tp", "in", "zip", "(", "params_energy", ",", "true_params_energy", ")", "]", ")", ".", "sum", "(", ")", "\n", "\n", "out", "=", "{", "'energy'", ":", "params_energy", ",", "\n", "'base'", ":", "params_base", ",", "\n", "'true_energy'", ":", "true_params_energy", ",", "\n", "'true_base'", ":", "true_params_base", ",", "\n", "'error_energy'", ":", "error_energy", ",", "\n", "'error_base'", ":", "error_bases", "}", "\n", "#if not f_exists and not self.args.save_nothing:", "\n", "fname", "=", "os", ".", "path", ".", "join", "(", "self", ".", "samples_dir", ",", "f'saved_model_{self.counter}.pkl'", ")", "\n", "with", "open", "(", "fname", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pkl", ".", "dump", "(", "out", ",", "f", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.compute.wasserstein": [[22, 27], ["fake_data.mean", "fake_data.mean", "true_data.mean"], "function", ["None"], ["def", "wasserstein", "(", "true_data", ",", "fake_data", ",", "loss_type", ")", ":", "\n", "    ", "if", "loss_type", "==", "'discriminator'", ":", "\n", "        ", "return", "-", "true_data", ".", "mean", "(", ")", "+", "fake_data", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "-", "fake_data", ".", "mean", "(", ")", "\n", "", "", "def", "logistic", "(", "true_data", ",", "fake_data", ",", "loss_type", ")", ":", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.compute.logistic": [[27, 35], ["torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "function", ["None"], ["", "", "def", "logistic", "(", "true_data", ",", "fake_data", ",", "loss_type", ")", ":", "\n", "    ", "if", "loss_type", "==", "'discriminator'", ":", "\n", "        ", "loss", "=", "torch", ".", "nn", ".", "BCEWithLogitsLoss", "(", ")", "(", "true_data", ",", "torch", ".", "ones", "(", "true_data", ".", "shape", "[", "0", "]", ")", ".", "to", "(", "true_data", ".", "device", ")", ")", "+", "torch", ".", "nn", ".", "BCEWithLogitsLoss", "(", ")", "(", "fake_data", ",", "torch", ".", "zeros", "(", "fake_data", ".", "shape", "[", "0", "]", ")", ".", "to", "(", "fake_data", ".", "device", ")", ")", "\n", "return", "loss", "\n", "", "else", ":", "\n", "        ", "loss", "=", "torch", ".", "nn", ".", "BCEWithLogitsLoss", "(", ")", "(", "fake_data", ",", "torch", ".", "ones", "(", "fake_data", ".", "shape", "[", "0", "]", ")", ".", "to", "(", "fake_data", ".", "device", ")", ")", "\n", "return", "loss", "\n", "", "", "def", "kale", "(", "true_data", ",", "fake_data", ",", "loss_type", ")", ":", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.compute.kale": [[35, 40], ["true_data.mean", "true_data.mean", "torch.exp().mean", "torch.exp().mean", "torch.exp().mean", "torch.exp().mean", "torch.exp().mean", "torch.exp().mean", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "function", ["None"], ["", "", "def", "kale", "(", "true_data", ",", "fake_data", ",", "loss_type", ")", ":", "\n", "    ", "if", "loss_type", "==", "'discriminator'", ":", "\n", "        ", "return", "true_data", ".", "mean", "(", ")", "+", "torch", ".", "exp", "(", "-", "fake_data", ")", ".", "mean", "(", ")", "-", "1", "\n", "", "else", ":", "\n", "        ", "return", "-", "true_data", ".", "mean", "(", ")", "#- torch.exp(-fake_data).mean()  + 1", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.compute.penalty_d": [[43, 65], ["d.parameters", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "compute._gradient_penalty", "d.parameters", "compute._gradient_penalty", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "numpy.sum", "numpy.array", "list"], "function", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.compute._gradient_penalty", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.compute._gradient_penalty"], ["", "", "def", "penalty_d", "(", "args", ",", "d", ",", "true_data", ",", "fake_data", ",", "device", ")", ":", "\n", "    ", "penalty", "=", "0.", "\n", "len_params", "=", "0.", "\n", "# no penalty", "\n", "if", "args", ".", "penalty_type", "==", "'none'", ":", "\n", "        ", "pass", "\n", "# L2 regularization only", "\n", "", "elif", "args", ".", "penalty_type", "==", "'l2'", ":", "\n", "        ", "for", "params", "in", "d", ".", "parameters", "(", ")", ":", "\n", "            ", "penalty", "+=", "torch", ".", "sum", "(", "params", "**", "2", ")", "\n", "# gradient penalty only", "\n", "", "", "elif", "args", ".", "penalty_type", "==", "'gradient'", ":", "\n", "        ", "penalty", "=", "_gradient_penalty", "(", "d", ",", "true_data", ",", "fake_data", ",", "device", ")", "\n", "# L2 + gradient penalty", "\n", "", "elif", "args", ".", "penalty_type", "==", "'gradient_l2'", ":", "\n", "        ", "for", "params", "in", "d", ".", "parameters", "(", ")", ":", "\n", "            ", "penalty", "+=", "torch", ".", "sum", "(", "params", "**", "2", ")", "\n", "len_params", "+=", "np", ".", "sum", "(", "np", ".", "array", "(", "list", "(", "params", ".", "shape", ")", ")", ")", "\n", "", "penalty", "=", "penalty", "/", "len_params", "\n", "g_penalty", "=", "_gradient_penalty", "(", "d", ",", "true_data", ",", "fake_data", ",", "device", ")", "\n", "penalty", "+=", "g_penalty", "\n", "", "return", "penalty", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.compute._gradient_penalty": [[68, 98], ["min", "list", "tuple", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "alpha.to.expand_as", "alpha.to.to", "torch.autograd.Variable().to", "d", "gradients.view.view", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "true_data.size", "numpy.ones", "torch.autograd.grad", "fake_data.size", "int", "torch.autograd.Variable", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "len", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "d.size"], "function", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.ToyDataset.grad"], ["", "def", "_gradient_penalty", "(", "d", ",", "true_data", ",", "fake_data", ",", "device", ")", ":", "\n", "    ", "batch_size", "=", "true_data", ".", "size", "(", ")", "[", "0", "]", "\n", "size_inter", "=", "min", "(", "batch_size", ",", "fake_data", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "# Calculate interpolation", "\n", "shape", "=", "list", "(", "np", ".", "ones", "(", "len", "(", "true_data", ".", "shape", ")", "-", "1", ")", ")", "\n", "shape", "=", "tuple", "(", "[", "int", "(", "a", ")", "for", "a", "in", "shape", "]", ")", "\n", "alpha", "=", "torch", ".", "rand", "(", "(", "size_inter", ",", ")", "+", "shape", ")", "\n", "alpha", "=", "alpha", ".", "expand_as", "(", "true_data", ")", "\n", "alpha", "=", "alpha", ".", "to", "(", "device", ")", "\n", "\n", "interpolated", "=", "alpha", "*", "true_data", ".", "data", "[", ":", "size_inter", "]", "+", "(", "1", "-", "alpha", ")", "*", "fake_data", ".", "data", "[", ":", "size_inter", "]", "\n", "#interpolated = torch.cat([true_data.data,fake_data.data],dim=0)", "\n", "interpolated", "=", "Variable", "(", "interpolated", ",", "requires_grad", "=", "True", ")", ".", "to", "(", "device", ")", "\n", "\n", "# Calculate probability of interpolated examples", "\n", "prob_interpolated", "=", "d", "(", "interpolated", ")", "\n", "\n", "# Calculate gradients of probabilities with respect to examples", "\n", "gradients", "=", "torch_grad", "(", "outputs", "=", "prob_interpolated", ",", "inputs", "=", "interpolated", ",", "\n", "grad_outputs", "=", "torch", ".", "ones", "(", "prob_interpolated", ".", "size", "(", ")", ")", ".", "to", "(", "device", ")", ",", "\n", "create_graph", "=", "True", ",", "retain_graph", "=", "True", ")", "[", "0", "]", "\n", "\n", "# Gradients have shape (batch_size, num_channels, img_width, img_height),", "\n", "# so flatten to easily take norm per example in batch", "\n", "gradients", "=", "gradients", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "\n", "# Derivatives of the gradient close to 0 can cause problems because of", "\n", "# the square root, so manually calculate norm and add epsilon", "\n", "gradients_norm", "=", "torch", ".", "sum", "(", "gradients", "**", "2", ",", "dim", "=", "1", ")", ".", "mean", "(", ")", "\n", "return", "gradients_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.compute.iterative_mean": [[102, 108], ["batch_tensor.mean"], "function", ["None"], ["", "def", "iterative_mean", "(", "batch_tensor", ",", "total_mean", ",", "total_els", ",", "dim", "=", "0", ")", ":", "\n", "    ", "b", "=", "batch_tensor", ".", "shape", "[", "dim", "]", "\n", "cur_mean", "=", "batch_tensor", ".", "mean", "(", "dim", "=", "dim", ")", "\n", "total_mean", "=", "(", "total_els", "/", "(", "total_els", "+", "b", ")", ")", "*", "total_mean", "+", "(", "b", "/", "(", "total_els", "+", "b", ")", ")", "*", "cur_mean", "\n", "total_els", "+=", "b", "\n", "return", "total_mean", ",", "total_els", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.compute.iterative_log_sum_exp": [[109, 115], ["torch.logsumexp().sum", "torch.logsumexp().sum", "torch.logsumexp().sum", "torch.logsumexp().sum", "torch.logsumexp().sum", "torch.logsumexp().sum", "torch.logsumexp().sum", "torch.logsumexp().sum", "torch.logsumexp().sum", "torch.logsumexp().sum", "torch.logsumexp().sum", "torch.logsumexp().sum", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "function", ["None"], ["", "def", "iterative_log_sum_exp", "(", "batch_tensor", ",", "total_sum", ",", "total_els", ",", "dim", "=", "0", ")", ":", "\n", "    ", "b", "=", "batch_tensor", ".", "shape", "[", "dim", "]", "\n", "cur_sum", "=", "torch", ".", "logsumexp", "(", "batch_tensor", ",", "dim", "=", "0", ")", ".", "sum", "(", ")", "\n", "total_sum", "=", "torch", ".", "logsumexp", "(", "torch", ".", "stack", "(", "[", "total_sum", ",", "cur_sum", "]", ",", "dim", "=", "0", ")", ",", "dim", "=", "0", ")", ".", "sum", "(", ")", "\n", "total_els", "+=", "b", "\n", "return", "total_sum", ",", "total_els", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.compute.compute_nll": [[117, 127], ["model.eval", "enumerate", "log_density.mean", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "compute.iterative_mean", "model.log_density", "data.to"], "function", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.TrainerToy.eval", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.compute.iterative_mean", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.energy_model.GaussianGenerator.log_density"], ["", "def", "compute_nll", "(", "data_loader", ",", "model", ",", "device", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "log_density", "=", "0.", "\n", "M", "=", "0", "\n", "for", "i", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "cur_log_density", "=", "-", "model", ".", "log_density", "(", "data", ".", "to", "(", "device", ")", ")", "\n", "log_density", ",", "M", "=", "iterative_mean", "(", "cur_log_density", ",", "log_density", ",", "M", ")", "\n", "\n", "", "", "return", "log_density", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.compute.get_fid_stats": [[131, 142], ["numpy.load", "np.load.close", "print", "metrics.compute_stats_from_loader", "numpy.savez"], "function", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.fid_pytorch.compute_stats_from_loader"], ["", "def", "get_fid_stats", "(", "fid_model", ",", "loader", ",", "dataset", ",", "dataset_type", ",", "device", ")", ":", "\n", "    ", "path", "=", "'metrics/res/stats_pytorch/fid_stats_'", "+", "dataset", "+", "'_'", "+", "dataset_type", "+", "'.npz'", "\n", "try", ":", "\n", "        ", "f", "=", "np", ".", "load", "(", "path", ")", "\n", "mu", ",", "sigma", "=", "f", "[", "'mu'", "]", "[", ":", "]", ",", "f", "[", "'sigma'", "]", "[", ":", "]", "\n", "f", ".", "close", "(", ")", "\n", "", "except", ":", "\n", "        ", "print", "(", "'==> Computing data stats'", ")", "\n", "mu", ",", "sigma", "=", "fid_pytorch", ".", "compute_stats_from_loader", "(", "fid_model", ",", "loader", ",", "device", ")", "\n", "np", ".", "savez", "(", "path", ",", "mu", "=", "mu", ",", "sigma", "=", "sigma", ")", "\n", "", "return", "mu", ",", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.compute.get_activations_from_loader": [[143, 193], ["model.eval", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "print", "image_batch.to", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "adaptive_avg_pool2d.mean", "torch.cat.append", "model", "adaptive_avg_pool2d", "adaptive_avg_pool2d.cpu"], "function", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.TrainerToy.eval"], ["", "def", "get_activations_from_loader", "(", "dataloader", ",", "model", ",", "device", ",", "total_samples", "=", "50000", ",", "batch_size", "=", "50", ",", "dims", "=", "2048", ",", "verbose", "=", "False", ",", "is_tuple", "=", "False", ")", ":", "\n", "    ", "\"\"\"Calculates the activations of the pool_3 layer for all images.\n    Params:\n    -- files       : List of image files paths\n    -- model       : Instance of inception model\n    -- batch_size  : Batch size of images for the model to process at once.\n                     Make sure that the number of samples is a multiple of\n                     the batch size, otherwise some samples are ignored. This\n                     behavior is retained to match the original FID score\n                     implementation.\n    -- dims        : Dimensionality of features returned by Inception\n    -- cuda        : If set to True, use GPU\n    -- verbose     : If set to True and parameter out_step is given, the number\n                     of calculated batches is reported.\n    Returns:\n    -- A numpy array of dimension (num images, dims) that contains the\n       activations of the given tensor when feeding inception with the\n       query tensor.\n    \"\"\"", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "#n_batches = len(dataloader.dataset.data) // batch_size", "\n", "#n_used_imgs = n_batches * batch_size", "\n", "\n", "pred_arr", "=", "[", "]", "\n", "num_samples", "=", "0", "\n", "for", "batch_idx", ",", "data", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "        ", "if", "is_tuple", ":", "\n", "            ", "data", ",", "_", "=", "data", "\n", "", "if", "num_samples", "<=", "total_samples", ":", "\n", "            ", "if", "verbose", ":", "\n", "                ", "print", "(", "'\\rPropagating batch %d'", "%", "(", "batch_idx", "+", "1", ")", ",", "\n", "end", "=", "''", ",", "flush", "=", "True", ")", "\n", "", "start", "=", "batch_idx", "*", "batch_size", "\n", "end", "=", "start", "+", "batch_size", "\n", "image_batch", "=", "(", "data", "+", "1.", ")", "*", "0.5", "\n", "batch", "=", "image_batch", ".", "to", "(", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "pred", "=", "model", "(", "batch", ")", "[", "0", "]", "\n", "if", "pred", ".", "shape", "[", "2", "]", "!=", "1", "or", "pred", ".", "shape", "[", "3", "]", "!=", "1", ":", "\n", "                    ", "pred", "=", "adaptive_avg_pool2d", "(", "pred", ",", "output_size", "=", "(", "1", ",", "1", ")", ")", "\n", "", "pred", "=", "pred", ".", "mean", "(", "[", "2", ",", "3", "]", ")", "\n", "pred_arr", ".", "append", "(", "pred", ".", "cpu", "(", ")", ")", "\n", "", "num_samples", "+=", "data", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "break", "\n", "", "", "pred_arr", "=", "torch", ".", "cat", "(", "pred_arr", ",", "dim", "=", "0", ")", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "' done'", ")", "\n", "", "return", "pred_arr", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.compute.calculate_frechet_distance": [[195, 249], ["numpy.atleast_1d", "numpy.atleast_1d", "numpy.atleast_2d", "numpy.atleast_2d", "scipy.linalg.sqrtm", "numpy.iscomplexobj", "numpy.trace", "np.atleast_2d.dot", "numpy.isfinite().all", "print", "scipy.linalg.sqrtm", "numpy.eye", "numpy.allclose", "numpy.max", "ValueError", "numpy.trace", "numpy.isfinite", "numpy.abs", "diff.dot", "numpy.trace", "numpy.diagonal"], "function", ["None"], ["", "def", "calculate_frechet_distance", "(", "mu1", ",", "sigma1", ",", "mu2", ",", "sigma2", ",", "eps", "=", "1e-6", ")", ":", "\n", "# taken from https://github.com/mseitzer/pytorch-fid/blob/master/fid_score.py", "\n", "\n", "    ", "\"\"\"Numpy implementation of the Frechet Distance.\n    The Frechet distance between two multivariate Gaussians X_1 ~ N(mu_1, C_1)\n    and X_2 ~ N(mu_2, C_2) is\n            d^2 = ||mu_1 - mu_2||^2 + Tr(C_1 + C_2 - 2*sqrt(C_1*C_2)).\n    Stable version by Dougal J. Sutherland.\n    Params:\n    -- mu1   : Numpy array containing the activations of a layer of the\n               inception net (like returned by the function 'get_predictions')\n               for generated samples.\n    -- mu2   : The sample mean over activations, precalculated on an\n               representative data set.\n    -- sigma1: The covariance matrix over activations for generated samples.\n    -- sigma2: The covariance matrix over activations, precalculated on an\n               representative data set.\n    Returns:\n    --   : The Frechet Distance.\n    \"\"\"", "\n", "\n", "mu1", "=", "np", ".", "atleast_1d", "(", "mu1", ")", "\n", "mu2", "=", "np", ".", "atleast_1d", "(", "mu2", ")", "\n", "\n", "sigma1", "=", "np", ".", "atleast_2d", "(", "sigma1", ")", "\n", "sigma2", "=", "np", ".", "atleast_2d", "(", "sigma2", ")", "\n", "\n", "assert", "mu1", ".", "shape", "==", "mu2", ".", "shape", ",", "'Training and test mean vectors have different lengths'", "\n", "assert", "sigma1", ".", "shape", "==", "sigma2", ".", "shape", ",", "'Training and test covariances have different dimensions'", "\n", "\n", "diff", "=", "mu1", "-", "mu2", "\n", "\n", "# Product might be almost singular", "\n", "covmean", ",", "_", "=", "linalg", ".", "sqrtm", "(", "sigma1", ".", "dot", "(", "sigma2", ")", ",", "disp", "=", "False", ")", "\n", "if", "not", "np", ".", "isfinite", "(", "covmean", ")", ".", "all", "(", ")", ":", "\n", "        ", "msg", "=", "(", "'fid calculation produces singular product; '", "\n", "'adding %s to diagonal of cov estimates'", ")", "%", "eps", "\n", "print", "(", "msg", ")", "\n", "offset", "=", "np", ".", "eye", "(", "sigma1", ".", "shape", "[", "0", "]", ")", "*", "eps", "\n", "covmean", "=", "linalg", ".", "sqrtm", "(", "(", "sigma1", "+", "offset", ")", ".", "dot", "(", "sigma2", "+", "offset", ")", ")", "\n", "\n", "# Numerical error might give slight imaginary component", "\n", "", "if", "np", ".", "iscomplexobj", "(", "covmean", ")", ":", "\n", "        ", "if", "not", "np", ".", "allclose", "(", "np", ".", "diagonal", "(", "covmean", ")", ".", "imag", ",", "0", ",", "atol", "=", "1e-3", ")", ":", "\n", "            ", "m", "=", "np", ".", "max", "(", "np", ".", "abs", "(", "covmean", ".", "imag", ")", ")", "\n", "raise", "ValueError", "(", "'Imaginary component {}'", ".", "format", "(", "m", ")", ")", "\n", "", "covmean", "=", "covmean", ".", "real", "\n", "\n", "", "tr_covmean", "=", "np", ".", "trace", "(", "covmean", ")", "\n", "\n", "return", "(", "diff", ".", "dot", "(", "diff", ")", "+", "np", ".", "trace", "(", "sigma1", ")", "+", "\n", "np", ".", "trace", "(", "sigma2", ")", "-", "2", "*", "tr_covmean", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.helpers.ConditionalNoiseGen.__init__": [[238, 246], ["torch.Module.__init__", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "numpy.array", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "range", "list"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__"], ["    ", "def", "__init__", "(", "self", ",", "truncation", ",", "device", ")", ":", "\n", "        ", "super", "(", "ConditionalNoiseGen", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "truncation", "=", "truncation", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "num_classes", "=", "1000", "\n", "labels", "=", "1.", "*", "np", ".", "array", "(", "range", "(", "self", ".", "num_classes", ")", ")", "/", "self", ".", "num_classes", "\n", "labels", "=", "torch", ".", "tensor", "(", "list", "(", "labels", ")", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "multinomial", "=", "torch", ".", "distributions", ".", "categorical", ".", "Categorical", "(", "labels", ")", "\n", "", "def", "log_prob", "(", "self", ",", "noise", ")", ":", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.helpers.ConditionalNoiseGen.log_prob": [[246, 250], ["torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "def", "log_prob", "(", "self", ",", "noise", ")", ":", "\n", "        ", "Z", ",", "labels", "=", "noise", "\n", "prob", "=", "-", "0.5", "*", "torch", ".", "norm", "(", "Z", ",", "dim", "=", "1", ")", "**", "2", "\n", "return", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.helpers.ConditionalNoiseGen.sample": [[251, 257], ["truncated_noise_sample", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "Z.to.to.to", "helpers.ConditionalNoiseGen.multinomial.sample"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.FlowSequential.sample"], ["", "def", "sample", "(", "self", ",", "shape", ")", ":", "\n", "        ", "Z", "=", "truncated_noise_sample", "(", "truncation", "=", "self", ".", "truncation", ",", "batch_size", "=", "shape", "[", "0", "]", ")", "\n", "Z", "=", "torch", ".", "from_numpy", "(", "Z", ")", "\n", "Z", "=", "Z", ".", "to", "(", "self", ".", "device", ")", "\n", "labels", "=", "self", ".", "multinomial", ".", "sample", "(", "shape", ")", "\n", "return", "Z", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.helpers.pil_loader": [[39, 44], ["open", "PIL.Image.open", "Image.open.convert"], "function", ["None"], ["def", "pil_loader", "(", "path", ")", ":", "\n", "# open path as file to avoid ResourceWarning (https://github.com/python-pillow/Pillow/issues/835)", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "f", ")", "\n", "return", "img", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.helpers.accimage_loader": [[46, 53], ["accimage.Image", "helpers.pil_loader"], "function", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.imagenet.pil_loader"], ["", "", "def", "accimage_loader", "(", "path", ")", ":", "\n", "    ", "import", "accimage", "\n", "try", ":", "\n", "        ", "return", "accimage", ".", "Image", "(", "path", ")", "\n", "", "except", "IOError", ":", "\n", "# Potentially a decoding problem, fall back to PIL.Image", "\n", "        ", "return", "pil_loader", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.helpers.default_loader": [[54, 60], ["get_image_backend", "helpers.accimage_loader", "helpers.pil_loader"], "function", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.imagenet.accimage_loader", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.imagenet.pil_loader"], ["", "", "def", "default_loader", "(", "path", ")", ":", "\n", "    ", "from", "torchvision", "import", "get_image_backend", "\n", "if", "get_image_backend", "(", ")", "==", "'accimage'", ":", "\n", "        ", "return", "accimage_loader", "(", "path", ")", "\n", "", "else", ":", "\n", "        ", "return", "pil_loader", "(", "path", ")", "\n", "# choose dataloaders for pytorch", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.helpers.get_image_loader": [[61, 147], ["torchvision.Compose", "torchvision.Compose", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Compose", "torchvision.datasets.LSUN", "torchvision.datasets.LSUN", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "Imagenet32", "Imagenet32", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Compose", "torchvision.Compose", "utils.celebA.CelebA", "utils.celebA.CelebA", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.Compose", "torchvision.Compose", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "", "def", "get_image_loader", "(", "args", ",", "b_size", ",", "num_workers", ")", ":", "\n", "    ", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "\n", "]", ")", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "\n", "]", ")", "\n", "if", "args", ".", "dataset", "==", "'cifar10'", ":", "\n", "        ", "spatial_size", "=", "32", "\n", "\n", "trainset", "=", "CIFAR10", "(", "root", "=", "'./data'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transform_train", ")", "\n", "trainloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "trainset", ",", "batch_size", "=", "b_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "num_workers", ")", "\n", "n_classes", "=", "10", "\n", "testset", "=", "CIFAR10", "(", "root", "=", "'./data'", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "transform_test", ")", "\n", "testloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "testset", ",", "batch_size", "=", "b_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "num_workers", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'lsun'", ":", "\n", "        ", "spatial_size", "=", "32", "\n", "\n", "transform_lsun", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "spatial_size", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "spatial_size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "\n", "]", ")", "\n", "trainset", "=", "LSUN", "(", "\n", "root", "=", "args", ".", "data_path", ",", "\n", "classes", "=", "[", "'bedroom_train'", "]", ",", "\n", "transform", "=", "transform_lsun", ")", "\n", "testset", "=", "LSUN", "(", "\n", "root", "=", "args", ".", "data_path", ",", "\n", "classes", "=", "[", "'bedroom_val'", "]", ",", "\n", "transform", "=", "transform_lsun", ")", "\n", "trainloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "trainset", ",", "batch_size", "=", "b_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "num_workers", ")", "\n", "testloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "testset", ",", "batch_size", "=", "b_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "num_workers", ")", "\n", "\n", "", "elif", "args", ".", "dataset", "==", "'imagenet32'", ":", "\n", "\n", "        ", "from", "utils", ".", "imagenet", "import", "Imagenet32", "\n", "\n", "spatial_size", "=", "32", "\n", "\n", "transforms_train", "=", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "\n", "]", "\n", "\n", "trainset", "=", "Imagenet32", "(", "args", ".", "imagenet_train_path", ",", "transform", "=", "transforms", ".", "Compose", "(", "transforms_train", ")", ",", "sz", "=", "spatial_size", ")", "\n", "valset", "=", "Imagenet32", "(", "args", ".", "imagenet_test_path", ",", "transform", "=", "transforms", ".", "Compose", "(", "transforms_train", ")", ",", "sz", "=", "spatial_size", ")", "\n", "n_classes", "=", "1000", "\n", "trainloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "trainset", ",", "batch_size", "=", "b_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "num_workers", ")", "\n", "testloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "valset", ",", "batch_size", "=", "b_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "num_workers", ")", "\n", "\n", "\n", "\n", "", "elif", "args", ".", "dataset", "==", "'celebA'", ":", "\n", "        ", "size", "=", "32", "\n", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "size", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "\n", "]", ")", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "size", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "\n", "]", ")", "\n", "\n", "trainset", "=", "CelebA", "(", "\n", "root", "=", "args", ".", "data_path", ",", "\n", "split", "=", "'train'", ",", "\n", "transform", "=", "transform_train", ",", "download", "=", "False", ")", "\n", "testset", "=", "CelebA", "(", "\n", "root", "=", "args", ".", "data_path", ",", "\n", "split", "=", "'train'", ",", "\n", "transform", "=", "transform_train", ",", "download", "=", "False", ")", "\n", "\n", "trainloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "trainset", ",", "batch_size", "=", "b_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "num_workers", ")", "\n", "testloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "testset", ",", "batch_size", "=", "b_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "num_workers", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "return", "trainloader", ",", "testloader", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.helpers.get_UCI_data_loader": [[149, 164], ["utils.dataloader.load_data", "utils.dataloader.PrepareUCIData", "utils.dataloader.PrepareUCIData", "utils.dataloader.PrepareUCIData", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.load_data"], ["", "def", "get_UCI_data_loader", "(", "args", ",", "b_size", ",", "num_workers", ")", ":", "\n", "    ", "p", "=", "load_data", "(", "args", ".", "dataset", ")", "\n", "\n", "train_data", "=", "p", ".", "data", "\n", "test_data", "=", "p", ".", "test_data", "\n", "valid_data", "=", "p", ".", "valid_data", "\n", "train_set", "=", "PrepareUCIData", "(", "train_data", ")", "\n", "test_set", "=", "PrepareUCIData", "(", "test_data", ")", "\n", "valid_set", "=", "PrepareUCIData", "(", "valid_data", ")", "\n", "\n", "trainloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_set", ",", "batch_size", "=", "b_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "num_workers", ")", "\n", "testloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_set", ",", "batch_size", "=", "b_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "num_workers", ")", "\n", "validloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "valid_set", ",", "batch_size", "=", "b_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "num_workers", ")", "\n", "\n", "return", "trainloader", ",", "testloader", ",", "validloader", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.helpers.get_toy_loader": [[165, 175], ["models.BaseDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["None"], ["", "def", "get_toy_loader", "(", "args", ",", "b_size", ",", "device", ")", ":", "\n", "    ", "import", "models", ".", "toy_models", "as", "tm", "\n", "N_samples", "=", "5000", "\n", "dtype", "=", "'float32'", "\n", "dataset", "=", "tm", ".", "BaseDataset", "(", "N_samples", ",", "dtype", ",", "device", ",", "b_size", ",", "args", ".", "data_path", ")", "\n", "\n", "params", "=", "{", "'batch_size'", ":", "args", ".", "b_size", ",", "\n", "'shuffle'", ":", "True", ",", "\n", "'num_workers'", ":", "0", "}", "\n", "return", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "**", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.helpers.get_data_loader": [[176, 189], ["helpers.get_image_loader", "helpers.get_UCI_data_loader", "numpy.array", "helpers.get_toy_loader"], "function", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.helpers.get_image_loader", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.helpers.get_UCI_data_loader", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.helpers.get_toy_loader"], ["", "def", "get_data_loader", "(", "args", ",", "b_size", ",", "num_workers", ")", ":", "\n", "    ", "if", "args", ".", "dataset_type", "==", "'images'", ":", "\n", "        ", "trainloader", ",", "testloader", ",", "validloader", "=", "get_image_loader", "(", "args", ",", "b_size", ",", "num_workers", ")", "\n", "input_dims", "=", "None", "\n", "", "elif", "args", ".", "dataset_type", "==", "'UCI'", ":", "\n", "        ", "trainloader", ",", "testloader", ",", "validloader", "=", "get_UCI_data_loader", "(", "args", ",", "b_size", ",", "num_workers", ")", "\n", "input_dims", "=", "np", ".", "array", "(", "[", "trainloader", ".", "dataset", ".", "X", ".", "shape", "[", "1", "]", "]", ")", "[", "0", "]", "\n", "", "elif", "args", ".", "dataset_type", "==", "'toy'", ":", "\n", "        ", "trainloader", "=", "get_toy_loader", "(", "args", ",", "b_size", ",", "'cuda'", ")", "\n", "input_dims", "=", "3", "\n", "validloader", "=", "trainloader", "\n", "testloader", "=", "trainloader", "\n", "", "return", "trainloader", ",", "testloader", ",", "validloader", ",", "input_dims", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.helpers.get_loss": [[192, 203], ["None"], "function", ["None"], ["", "def", "get_loss", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "criterion", "==", "'hinge'", ":", "\n", "        ", "return", "cp", ".", "hinge", "\n", "", "elif", "args", ".", "criterion", "==", "'wasserstein'", ":", "\n", "        ", "return", "cp", ".", "wasserstein", "\n", "", "elif", "args", ".", "criterion", "==", "'logistic'", ":", "\n", "        ", "return", "cp", ".", "logistic", "\n", "", "elif", "args", ".", "criterion", "in", "[", "'kale'", ",", "'donsker'", "]", ":", "\n", "        ", "return", "cp", ".", "kale", "\n", "", "elif", "args", ".", "criterion", "==", "'kale-nlp'", ":", "\n", "        ", "return", "cp", ".", "kale", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.helpers.get_optimizer": [[205, 217], ["torch.Adam", "torch.SGD", "NotImplementedError"], "function", ["None"], ["", "", "def", "get_optimizer", "(", "args", ",", "net_type", ",", "params", ")", ":", "\n", "    ", "if", "net_type", "==", "'discriminator'", ":", "\n", "        ", "learn_rate", "=", "args", ".", "lr", "\n", "", "elif", "net_type", "==", "'generator'", ":", "\n", "        ", "learn_rate", "=", "args", ".", "lr_generator", "\n", "", "if", "args", ".", "optimizer", "==", "'Adam'", ":", "\n", "        ", "optimizer", "=", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "learn_rate", ",", "weight_decay", "=", "args", ".", "weight_decay", ",", "betas", "=", "(", "args", ".", "beta_1", ",", "args", ".", "beta_2", ")", ")", "\n", "", "elif", "args", ".", "optimizer", "==", "'SGD'", ":", "\n", "        ", "optimizer", "=", "optim", ".", "SGD", "(", "params", ",", "lr", "=", "learn_rate", ",", "momentum", "=", "args", ".", "sgd_momentum", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'optimizer {} not implemented'", ".", "format", "(", "args", ".", "optimizer", ")", ")", "\n", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.helpers.get_scheduler": [[219, 229], ["torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.lr_scheduler.ExponentialLR", "int", "args.milestone.split", "int", "int"], "function", ["None"], ["", "def", "get_scheduler", "(", "args", ",", "optimizer", ")", ":", "\n", "    ", "if", "args", ".", "scheduler", "==", "'MultiStepLR'", ":", "\n", "        ", "if", "args", ".", "milestone", "is", "None", ":", "\n", "            ", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "milestones", "=", "[", "int", "(", "args", ".", "total_epochs", "*", "0.5", ")", ",", "int", "(", "args", ".", "total_epochs", "*", "0.75", ")", "]", ",", "gamma", "=", "args", ".", "lr_decay", ")", "\n", "", "else", ":", "\n", "            ", "milestone", "=", "[", "int", "(", "_", ")", "for", "_", "in", "args", ".", "milestone", ".", "split", "(", "','", ")", "]", "\n", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "milestones", "=", "milestone", ",", "gamma", "=", "args", ".", "lr_decay", ")", "\n", "", "return", "lr_scheduler", "\n", "", "elif", "args", ".", "scheduler", "==", "'ExponentialLR'", ":", "\n", "        ", "return", "optim", ".", "lr_scheduler", ".", "ExponentialLR", "(", "optimizer", ",", "gamma", "=", "args", ".", "scheduler_gamma", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.helpers.get_normal": [[231, 236], ["torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.independent.Independent", "torch.distributions.independent.Independent", "torch.distributions.independent.Independent", "torch.distributions.independent.Independent", "torch.distributions.independent.Independent", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "function", ["None"], ["", "", "def", "get_normal", "(", "Z_dim", ",", "device", ")", ":", "\n", "    ", "loc", "=", "torch", ".", "zeros", "(", "Z_dim", ")", ".", "to", "(", "device", ")", "\n", "scale", "=", "torch", ".", "ones", "(", "Z_dim", ")", ".", "to", "(", "device", ")", "\n", "normal", "=", "torch", ".", "distributions", ".", "normal", ".", "Normal", "(", "loc", ",", "scale", ")", "\n", "return", "torch", ".", "distributions", ".", "independent", ".", "Independent", "(", "normal", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.helpers.get_latent_sampler": [[260, 282], ["helpers.get_normal", "samplers.HMCsampler", "samplers.LMCsampler", "samplers.LangevinSampler", "samplers.ZeroTemperatureSampler", "samplers.MALA", "samplers.SphereLangevinSampler", "samplers.DOT", "samplers.TruncLangevinSampler", "samplers.MetropolisHastings", "samplers.IndependentMetropolisHastings"], "function", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.helpers.get_normal"], ["", "", "def", "get_latent_sampler", "(", "args", ",", "potential", ",", "Z_dim", ",", "device", ")", ":", "\n", "    ", "momentum", "=", "get_normal", "(", "Z_dim", ",", "device", ")", "\n", "if", "args", ".", "latent_sampler", "==", "'hmc'", ":", "\n", "        ", "return", "samplers", ".", "HMCsampler", "(", "potential", ",", "momentum", ",", "T", "=", "args", ".", "num_sampler_steps", ",", "num_steps_min", "=", "10", ",", "num_steps_max", "=", "20", ",", "gamma", "=", "args", ".", "lmc_gamma", ",", "kappa", "=", "args", ".", "lmc_kappa", ")", "\n", "", "elif", "args", ".", "latent_sampler", "==", "'lmc'", ":", "\n", "        ", "return", "samplers", ".", "LMCsampler", "(", "potential", ",", "momentum", ",", "T", "=", "args", ".", "num_sampler_steps", ",", "num_steps_min", "=", "10", ",", "num_steps_max", "=", "20", ",", "gamma", "=", "args", ".", "lmc_gamma", ",", "kappa", "=", "args", ".", "lmc_kappa", ")", "\n", "", "elif", "args", ".", "latent_sampler", "==", "'langevin'", ":", "\n", "        ", "return", "samplers", ".", "LangevinSampler", "(", "potential", ",", "T", "=", "args", ".", "num_sampler_steps", ",", "gamma", "=", "args", ".", "lmc_gamma", ")", "\n", "", "elif", "args", ".", "latent_sampler", "==", "'zero_temperature_langevin'", ":", "\n", "        ", "return", "samplers", ".", "ZeroTemperatureSampler", "(", "potential", ",", "T", "=", "args", ".", "num_sampler_steps", ",", "gamma", "=", "args", ".", "lmc_gamma", ")", "\n", "", "elif", "args", ".", "latent_sampler", "==", "'mala'", ":", "\n", "        ", "return", "samplers", ".", "MALA", "(", "potential", ",", "T", "=", "args", ".", "num_sampler_steps", ",", "gamma", "=", "args", ".", "lmc_gamma", ")", "\n", "", "elif", "args", ".", "latent_sampler", "==", "'spherelangevin'", ":", "\n", "        ", "return", "samplers", ".", "SphereLangevinSampler", "(", "potential", ",", "T", "=", "args", ".", "num_sampler_steps", ",", "gamma", "=", "args", ".", "lmc_gamma", ")", "\n", "", "elif", "args", ".", "latent_sampler", "==", "'dot'", ":", "\n", "        ", "return", "samplers", ".", "DOT", "(", "potential", ",", "T", "=", "args", ".", "num_sampler_steps", ",", "gamma", "=", "args", ".", "lmc_gamma", ")", "\n", "", "elif", "args", ".", "latent_sampler", "==", "'trunclangevin'", ":", "\n", "        ", "return", "samplers", ".", "TruncLangevinSampler", "(", "potential", ",", "momentum", ",", "trunc", "=", "args", ".", "trunc", ",", "T", "=", "args", ".", "num_sampler_steps", ",", "num_steps_min", "=", "10", ",", "num_steps_max", "=", "20", ",", "gamma", "=", "args", ".", "lmc_gamma", ",", "kappa", "=", "args", ".", "lmc_kappa", ")", "\n", "", "elif", "args", ".", "latent_sampler", "==", "'mh'", ":", "\n", "        ", "return", "samplers", ".", "MetropolisHastings", "(", "potential", ",", "T", "=", "args", ".", "num_sampler_steps", ",", "gamma", "=", "args", ".", "lmc_gamma", ")", "\n", "", "elif", "args", ".", "latent_sampler", "==", "'imh'", ":", "\n", "        ", "return", "samplers", ".", "IndependentMetropolisHastings", "(", "potential", ",", "T", "=", "args", ".", "num_sampler_steps", ",", "gamma", "=", "args", ".", "lmc_gamma", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.helpers.get_latent_noise": [[284, 293], ["int", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.independent.Independent", "torch.distributions.independent.Independent", "torch.distributions.independent.Independent", "torch.distributions.independent.Independent", "torch.distributions.independent.Independent", "torch.distributions.Uniform", "torch.distributions.Uniform", "torch.distributions.Uniform", "torch.distributions.Uniform", "torch.distributions.Uniform", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "function", ["None"], ["", "", "def", "get_latent_noise", "(", "args", ",", "dim", ",", "device", ")", ":", "\n", "    ", "dim", "=", "int", "(", "dim", ")", "\n", "if", "args", ".", "latent_noise", "==", "'gaussian'", ":", "\n", "        ", "loc", "=", "torch", ".", "zeros", "(", "dim", ")", ".", "to", "(", "device", ")", "\n", "scale", "=", "torch", ".", "ones", "(", "dim", ")", ".", "to", "(", "device", ")", "\n", "normal", "=", "torch", ".", "distributions", ".", "normal", ".", "Normal", "(", "loc", ",", "scale", ")", "\n", "return", "torch", ".", "distributions", ".", "independent", ".", "Independent", "(", "normal", ",", "1", ")", "\n", "", "elif", "args", ".", "latent_noise", "==", "'uniform'", ":", "\n", "        ", "return", "torch", ".", "distributions", ".", "Uniform", "(", "torch", ".", "zeros", "(", "dim", ")", ".", "to", "(", "device", ")", ",", "torch", ".", "ones", "(", "dim", ")", ".", "to", "(", "device", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.helpers.get_energy": [[299, 316], ["models.discriminator.Discriminator().to", "models.energy_model.NVP().to", "models.discriminator.Discriminator", "models.energy_model.MADEGenerator().to", "models.energy_model.NVP", "models.energy_model.FlowGenerator().to", "models.energy_model.MADEGenerator", "models.energy_model.FlowGenerator().to", "models.energy_model.FlowGenerator", "models.Discriminator", "models.energy_model.FlowGenerator", "models.energy_model.Discriminator().to", "models.energy_model.Discriminator4().to", "models.energy_model.Discriminator", "models.energy_model.Discriminator4"], "function", ["None"], ["", "", "def", "get_energy", "(", "args", ",", "input_dims", ",", "device", ")", ":", "\n", "    ", "if", "args", ".", "discriminator", "==", "'convolutional'", ":", "\n", "        ", "return", "Discriminator", "(", "nn_type", "=", "args", ".", "d_model", ",", "bn", "=", "args", ".", "bn", ",", "no_trunc", "=", "args", ".", "no_trunc", ",", "skipinit", "=", "args", ".", "skipinit", ")", ".", "to", "(", "device", ")", "\n", "", "elif", "args", ".", "discriminator", "==", "'nvp'", ":", "\n", "        ", "return", "energy_model", ".", "NVP", "(", "[", "input_dims", "]", ",", "device", ",", "args", ".", "num_blocks", ",", "mode", "=", "'discriminator'", ",", "with_bn", "=", "args", ".", "dis_bn", ")", ".", "to", "(", "device", ")", "\n", "", "elif", "args", ".", "discriminator", "==", "'made'", ":", "\n", "        ", "return", "energy_model", ".", "MADEGenerator", "(", "[", "input_dims", "]", ",", "mode", "=", "'discriminator'", ")", ".", "to", "(", "device", ")", "\n", "", "elif", "args", ".", "discriminator", "==", "'maf'", ":", "\n", "        ", "return", "energy_model", ".", "FlowGenerator", "(", "[", "input_dims", "]", ",", "device", ",", "args", ".", "num_blocks", ",", "'maf'", ",", "mode", "=", "'discriminator'", ",", "with_bn", "=", "args", ".", "dis_bn", ")", ".", "to", "(", "device", ")", "\n", "", "elif", "args", ".", "discriminator", "==", "'mogmaf'", ":", "\n", "        ", "return", "energy_model", ".", "FlowGenerator", "(", "[", "input_dims", "]", ",", "device", ",", "args", ".", "num_blocks", ",", "'mogmaf'", ",", "mode", "=", "'discriminator'", ",", "with_bn", "=", "args", ".", "dis_bn", ")", ".", "to", "(", "device", ")", "\n", "", "elif", "args", ".", "discriminator", "==", "'toy'", ":", "\n", "        ", "return", "tm", ".", "Discriminator", "(", "3", ")", "\n", "", "elif", "args", ".", "discriminator", "==", "'are'", ":", "\n", "        ", "return", "energy_model", ".", "Discriminator", "(", "input_dims", ",", "device", ")", ".", "to", "(", "device", ")", "\n", "", "elif", "args", ".", "discriminator", "==", "'are4'", ":", "\n", "        ", "return", "energy_model", ".", "Discriminator4", "(", "input_dims", ",", "device", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.helpers.get_base": [[318, 334], ["models.generator.Generator().to", "models.energy_model.GaussianGenerator().to", "models.generator.Generator", "models.energy_model.MADEGenerator().to", "models.energy_model.GaussianGenerator", "models.energy_model.NVP().to", "models.energy_model.MADEGenerator", "models.energy_model.FlowGenerator().to", "models.energy_model.NVP", "models.energy_model.FlowGenerator().to", "models.energy_model.FlowGenerator", "models.Generator", "models.energy_model.FlowGenerator"], "function", ["None"], ["", "", "def", "get_base", "(", "args", ",", "input_dims", ",", "device", ")", ":", "\n", "    ", "if", "args", ".", "generator", "==", "'convolutional'", ":", "\n", "        ", "net", "=", "Generator", "(", "nz", "=", "args", ".", "Z_dim", ",", "nn_type", "=", "args", ".", "g_model", ")", ".", "to", "(", "device", ")", "\n", "", "elif", "args", ".", "generator", "==", "'gaussian'", ":", "\n", "        ", "net", "=", "energy_model", ".", "GaussianGenerator", "(", "[", "input_dims", "]", ")", ".", "to", "(", "device", ")", "\n", "", "elif", "args", ".", "generator", "==", "'made'", ":", "\n", "        ", "net", "=", "energy_model", ".", "MADEGenerator", "(", "[", "input_dims", "]", ",", "mode", "=", "'generator'", ")", ".", "to", "(", "device", ")", "\n", "", "elif", "args", ".", "generator", "==", "'nvp'", ":", "\n", "        ", "net", "=", "energy_model", ".", "NVP", "(", "[", "input_dims", "]", ",", "device", ",", "args", ".", "num_blocks", ",", "mode", "=", "'generator'", ",", "with_bn", "=", "args", ".", "gen_bn", ")", ".", "to", "(", "device", ")", "\n", "", "elif", "args", ".", "generator", "==", "'maf'", ":", "\n", "        ", "net", "=", "energy_model", ".", "FlowGenerator", "(", "[", "input_dims", "]", ",", "device", ",", "args", ".", "num_blocks", ",", "'maf'", ",", "mode", "=", "'generator'", ",", "with_bn", "=", "args", ".", "gen_bn", ")", ".", "to", "(", "device", ")", "\n", "", "elif", "args", ".", "generator", "==", "'mogmaf'", ":", "\n", "        ", "net", "=", "energy_model", ".", "FlowGenerator", "(", "[", "input_dims", "]", ",", "device", ",", "args", ".", "num_blocks", ",", "'mogmaf'", ",", "mode", "=", "'generator'", ",", "with_bn", "=", "args", ".", "gen_bn", ")", ".", "to", "(", "device", ")", "\n", "", "elif", "args", ".", "generator", "==", "'toy'", ":", "\n", "        ", "net", "=", "tm", ".", "Generator", "(", "3", ")", "\n", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.helpers.init_logs": [[335, 355], ["os.makedirs", "os.path.join", "os.makedirs", "os.path.join", "os.makedirs", "open", "open", "json.dump", "os.path.join", "os.path.join", "vars"], "function", ["None"], ["", "def", "init_logs", "(", "args", ",", "run_id", ",", "log_dir", ")", ":", "\n", "    ", "if", "args", ".", "save_nothing", ":", "\n", "        ", "return", "None", ",", "None", ",", "None", "\n", "", "os", ".", "makedirs", "(", "log_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "samples_dir", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "f'samples_{run_id}_{args.slurm_id}'", ")", "\n", "os", ".", "makedirs", "(", "samples_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "checkpoint_dir", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "f'checkpoints_{run_id}_{args.slurm_id}'", ")", "\n", "os", ".", "makedirs", "(", "checkpoint_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "if", "args", ".", "log_to_file", ":", "\n", "        ", "log_file", "=", "open", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "f'log_{run_id}_{args.slurm_id}.txt'", ")", ",", "'w'", ",", "buffering", "=", "1", ")", "\n", "sys", ".", "stdout", "=", "log_file", "\n", "sys", ".", "stderr", "=", "log_file", "\n", "\n", "# log the parameters used in this run", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "f'params_{run_id}_{args.slurm_id}.json'", ")", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "vars", "(", "args", ")", ",", "f", ",", "indent", "=", "4", ")", "\n", "", "return", "log_dir", ",", "checkpoint_dir", ",", "samples_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.helpers.assign_device": [[356, 364], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "str"], "function", ["None"], ["", "def", "assign_device", "(", "device", ")", ":", "\n", "    ", "if", "device", ">", "-", "1", ":", "\n", "        ", "device", "=", "'cuda:'", "+", "str", "(", "device", ")", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "device", ">", "-", "1", "else", "'cpu'", "\n", "", "elif", "device", "==", "-", "1", ":", "\n", "        ", "device", "=", "'cuda'", "\n", "", "elif", "device", "==", "-", "2", ":", "\n", "        ", "device", "=", "'cpu'", "\n", "", "return", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.helpers.load_dictionary": [[365, 377], ["open", "json.loads", "json.loads.keys", "out_dict[].append"], "function", ["None"], ["", "def", "load_dictionary", "(", "file_name", ")", ":", "\n", "    ", "out_dict", "=", "{", "}", "\n", "with", "open", "(", "file_name", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "cur_dict", "=", "json", ".", "loads", "(", "line", ")", "\n", "keys", "=", "cur_dict", ".", "keys", "(", ")", "\n", "for", "key", "in", "keys", ":", "\n", "                ", "if", "key", "in", "out_dict", ":", "\n", "                    ", "out_dict", "[", "key", "]", ".", "append", "(", "cur_dict", "[", "key", "]", ")", "\n", "", "else", ":", "\n", "                    ", "out_dict", "[", "key", "]", "=", "[", "cur_dict", "[", "key", "]", "]", "\n", "", "", "", "", "return", "out_dict", "\n", "", ""]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.imagenet.Imagenet32.__init__": [[25, 57], ["torchvision.datasets.vision.VisionDataset.__init__", "range", "numpy.vstack().reshape", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "torch.FloatTensor().half().cuda", "imagenet.Imagenet32.data.transpose", "str", "open", "imagenet.Imagenet32.data.append", "numpy.vstack", "pickle.load", "pickle.load", "imagenet.Imagenet32.targets.extend", "imagenet.Imagenet32.targets.extend", "torch.FloatTensor().half", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "train", "=", "True", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "cuda", "=", "False", ",", "sz", "=", "32", ")", ":", "\n", "\n", "        ", "super", "(", "Imagenet32", ",", "self", ")", ".", "__init__", "(", "root", ",", "transform", "=", "transform", ",", "\n", "target_transform", "=", "target_transform", ")", "\n", "self", ".", "base_folder", "=", "root", "\n", "self", ".", "train", "=", "train", "# training set or test set", "\n", "self", ".", "cuda", "=", "cuda", "\n", "\n", "self", ".", "data", "=", "[", "]", "\n", "self", ".", "targets", "=", "[", "]", "\n", "\n", "# now load the picked numpy arrays", "\n", "for", "i", "in", "range", "(", "1", ",", "11", ")", ":", "\n", "            ", "file_name", "=", "'train_data_batch_'", "+", "str", "(", "i", ")", "\n", "file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "base_folder", ",", "file_name", ")", "\n", "with", "open", "(", "file_path", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", ":", "\n", "                    ", "entry", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "else", ":", "\n", "                    ", "entry", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "", "self", ".", "data", ".", "append", "(", "entry", "[", "'data'", "]", ")", "\n", "if", "'labels'", "in", "entry", ":", "\n", "                    ", "self", ".", "targets", ".", "extend", "(", "entry", "[", "'labels'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "targets", ".", "extend", "(", "entry", "[", "'fine_labels'", "]", ")", "\n", "", "", "", "self", ".", "targets", "=", "[", "t", "-", "1", "for", "t", "in", "self", ".", "targets", "]", "\n", "self", ".", "data", "=", "np", ".", "vstack", "(", "self", ".", "data", ")", ".", "reshape", "(", "-", "1", ",", "3", ",", "sz", ",", "sz", ")", "\n", "if", "self", ".", "cuda", ":", "\n", "            ", "import", "torch", "\n", "self", ".", "data", "=", "torch", ".", "FloatTensor", "(", "self", ".", "data", ")", ".", "half", "(", ")", ".", "cuda", "(", ")", "#type(torch.cuda.HalfTensor)", "\n", "", "else", ":", "\n", "            ", "self", ".", "data", "=", "self", ".", "data", ".", "transpose", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.imagenet.Imagenet32.__getitem__": [[58, 81], ["PIL.Image.fromarray", "imagenet.Imagenet32.transform", "imagenet.Imagenet32.transform", "imagenet.Imagenet32.target_transform"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n        Returns:\n            tuple: (image, target) where target is index of the target class.\n        \"\"\"", "\n", "img", ",", "target", "=", "self", ".", "data", "[", "index", "]", ",", "self", ".", "targets", "[", "index", "]", "\n", "# doing this so that it is consistent with all other datasets", "\n", "# to return a PIL Image", "\n", "if", "self", ".", "cuda", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "return", "img", ",", "target", "\n", "\n", "", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.imagenet.Imagenet32.__len__": [[82, 84], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.imagenet.Imagenet64.__init__": [[97, 129], ["torchvision.datasets.vision.VisionDataset.__init__", "range", "numpy.vstack().reshape", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "torch.FloatTensor().half().cuda", "imagenet.Imagenet64.data.transpose", "str", "open", "imagenet.Imagenet64.data.append", "numpy.vstack", "pickle.load", "pickle.load", "imagenet.Imagenet64.targets.extend", "imagenet.Imagenet64.targets.extend", "torch.FloatTensor().half", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "train", "=", "True", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "cuda", "=", "False", ",", "sz", "=", "32", ")", ":", "\n", "\n", "        ", "super", "(", "Imagenet64", ",", "self", ")", ".", "__init__", "(", "root", ",", "transform", "=", "transform", ",", "\n", "target_transform", "=", "target_transform", ")", "\n", "self", ".", "base_folder", "=", "root", "\n", "self", ".", "train", "=", "train", "# training set or test set", "\n", "self", ".", "cuda", "=", "cuda", "\n", "\n", "self", ".", "data", "=", "[", "]", "\n", "self", ".", "targets", "=", "[", "]", "\n", "\n", "# now load the picked numpy arrays", "\n", "for", "i", "in", "range", "(", "1", ",", "11", ")", ":", "\n", "            ", "file_name", "=", "'train_data_batch_'", "+", "str", "(", "i", ")", "\n", "file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "base_folder", ",", "file_name", ")", "\n", "with", "open", "(", "file_path", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", ":", "\n", "                    ", "entry", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "else", ":", "\n", "                    ", "entry", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "", "self", ".", "data", ".", "append", "(", "entry", "[", "'data'", "]", ")", "\n", "if", "'labels'", "in", "entry", ":", "\n", "                    ", "self", ".", "targets", ".", "extend", "(", "entry", "[", "'labels'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "targets", ".", "extend", "(", "entry", "[", "'fine_labels'", "]", ")", "\n", "", "", "", "self", ".", "targets", "=", "[", "t", "-", "1", "for", "t", "in", "self", ".", "targets", "]", "\n", "self", ".", "data", "=", "np", ".", "vstack", "(", "self", ".", "data", ")", ".", "reshape", "(", "-", "1", ",", "3", ",", "sz", ",", "sz", ")", "\n", "if", "self", ".", "cuda", ":", "\n", "            ", "import", "torch", "\n", "self", ".", "data", "=", "torch", ".", "FloatTensor", "(", "self", ".", "data", ")", ".", "half", "(", ")", ".", "cuda", "(", ")", "#type(torch.cuda.HalfTensor)", "\n", "", "else", ":", "\n", "            ", "self", ".", "data", "=", "self", ".", "data", ".", "transpose", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.imagenet.Imagenet64.__getitem__": [[130, 153], ["PIL.Image.fromarray", "imagenet.Imagenet64.transform", "imagenet.Imagenet64.transform", "imagenet.Imagenet64.target_transform"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n        Returns:\n            tuple: (image, target) where target is index of the target class.\n        \"\"\"", "\n", "img", ",", "target", "=", "self", ".", "data", "[", "index", "]", ",", "self", ".", "targets", "[", "index", "]", "\n", "# doing this so that it is consistent with all other datasets", "\n", "# to return a PIL Image", "\n", "if", "self", ".", "cuda", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "return", "img", ",", "target", "\n", "\n", "", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.imagenet.Imagenet64.__len__": [[154, 156], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.imagenet.MiniImagenet.__init__": [[212, 224], ["torchvision.datasets.DatasetFolder.__init__"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "mat_fname", ",", "selected_classes", "=", "None", ",", "transform", "=", "None", ",", "augment_transform", "=", "None", ",", "target_transform", "=", "None", ",", "\n", "loader", "=", "default_loader", ",", "is_valid_file", "=", "None", ")", ":", "\n", "        ", "self", ".", "selected_classes", "=", "selected_classes", "\n", "self", ".", "mat_fname", "=", "mat_fname", "\n", "super", "(", "MiniImagenet", ",", "self", ")", ".", "__init__", "(", "root", ",", "loader", ",", "IMG_EXTENSIONS", "if", "is_valid_file", "is", "None", "else", "None", ",", "\n", "transform", "=", "transform", ",", "\n", "target_transform", "=", "target_transform", ",", "\n", "is_valid_file", "=", "is_valid_file", ")", "\n", "self", ".", "imgs", "=", "self", ".", "samples", "\n", "self", ".", "data", "=", "None", "\n", "self", ".", "targets", "=", "None", "\n", "self", ".", "augment_transform", "=", "augment_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.imagenet.MiniImagenet._find_classes": [[225, 250], ["classes_dir.sort", "imagenet.select_classes", "list", "select_classes.keys", "os.scandir", "os.scandir", "os.scandir", "os.scandir", "d.is_dir", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.path.isdir", "os.path.isdir", "os.path.isdir", "os.path.isdir", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.imagenet.select_classes"], ["", "def", "_find_classes", "(", "self", ",", "dir", ")", ":", "\n", "        ", "\"\"\"\n        \"\"\"", "\n", "\n", "if", "sys", ".", "version_info", ">=", "(", "3", ",", "5", ")", ":", "\n", "# Faster and available in Python 3.5 and above", "\n", "           ", "classes_dir", "=", "[", "d", ".", "name", "for", "d", "in", "os", ".", "scandir", "(", "dir", ")", "if", "d", ".", "is_dir", "(", ")", "]", "\n", "", "else", ":", "\n", "           ", "classes_dir", "=", "[", "d", "for", "d", "in", "os", ".", "listdir", "(", "dir", ")", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "d", ")", ")", "]", "\n", "", "classes_dir", ".", "sort", "(", ")", "\n", "\n", "\n", "\n", "class_to_idx", "=", "select_classes", "(", "self", ".", "mat_fname", ",", "self", ".", "selected_classes", ")", "\n", "\n", "classes", "=", "list", "(", "class_to_idx", ".", "keys", "(", ")", ")", "\n", "\n", "count_non_in_dir", "=", "0", "\n", "for", "c", "in", "classes", ":", "\n", "            ", "if", "c", "not", "in", "classes_dir", ":", "\n", "                ", "count_non_in_dir", "+=", "1", "\n", "", "", "if", "count_non_in_dir", ">", "0", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "return", "classes", ",", "class_to_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.imagenet.MiniImagenet.load_data": [[251, 284], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.isdir", "os.path.isdir", "os.path.isdir", "os.path.isdir", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "enumerate", "numpy.vstack", "numpy.concatenate", "data.numpy.numpy.transpose", "torch.load", "torch.load", "targets.numpy.numpy.numpy", "data.numpy.numpy.numpy", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "copy.deepcopy", "copy.deepcopy", "data.numpy.numpy.append", "targets.numpy.numpy.append", "inputs.cpu().numpy", "target.cpu().numpy", "inputs.cpu", "target.cpu"], "methods", ["None"], ["", "def", "load_data", "(", "self", ",", "dataloader", ",", "data_dir", ",", "force_recompute", ")", ":", "\n", "        ", "if", "self", ".", "data", "is", "None", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "isdir", "(", "data_dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "data_dir", ",", "exist_ok", "=", "True", ")", "\n", "", "data_name", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "f'data.t7'", ")", "\n", "targets_name", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "f'targets.t7'", ")", "\n", "count", "=", "0", "\n", "if", "(", "not", "os", ".", "path", ".", "exists", "(", "data_name", ")", ")", "or", "(", "not", "os", ".", "path", ".", "exists", "(", "targets_name", ")", ")", "or", "force_recompute", ":", "\n", "\n", "                ", "data", "=", "[", "]", "\n", "targets", "=", "[", "]", "\n", "for", "idx", ",", "(", "inputs", ",", "target", ")", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "# count += 1", "\n", "# if count >10:", "\n", "#     break", "\n", "                    ", "tmp_inputs", "=", "deepcopy", "(", "inputs", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "tmp_target", "=", "deepcopy", "(", "target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "data", ".", "append", "(", "tmp_inputs", ")", "\n", "targets", ".", "append", "(", "tmp_target", ")", "\n", "del", "inputs", "\n", "del", "target", "\n", "#data= [inputs.numpy()]", "\n", "#print(idx)", "\n", "", "data", "=", "np", ".", "vstack", "(", "data", ")", "\n", "targets", "=", "np", ".", "concatenate", "(", "targets", ")", "\n", "data", "=", "data", ".", "transpose", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "data", "=", "torch", ".", "load", "(", "torch_data", ")", "\n", "targets", "=", "torch", ".", "load", "(", "torch_targets", ")", "\n", "targets", "=", "targets", ".", "numpy", "(", ")", "\n", "data", "=", "data", ".", "numpy", "(", ")", "\n", "", "self", ".", "data", "=", "data", "\n", "self", ".", "targets", "=", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.imagenet.pil_loader": [[186, 191], ["open", "PIL.Image.open", "Image.open.convert"], "function", ["None"], ["def", "pil_loader", "(", "path", ")", ":", "\n", "# open path as file to avoid ResourceWarning (https://github.com/python-pillow/Pillow/issues/835)", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "f", ")", "\n", "return", "img", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.imagenet.accimage_loader": [[193, 200], ["accimage.Image", "imagenet.pil_loader"], "function", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.imagenet.pil_loader"], ["", "", "def", "accimage_loader", "(", "path", ")", ":", "\n", "    ", "import", "accimage", "\n", "try", ":", "\n", "        ", "return", "accimage", ".", "Image", "(", "path", ")", "\n", "", "except", "IOError", ":", "\n", "# Potentially a decoding problem, fall back to PIL.Image", "\n", "        ", "return", "pil_loader", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.imagenet.default_loader": [[201, 207], ["get_image_backend", "imagenet.accimage_loader", "imagenet.pil_loader"], "function", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.imagenet.accimage_loader", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.imagenet.pil_loader"], ["", "", "def", "default_loader", "(", "path", ")", ":", "\n", "    ", "from", "torchvision", "import", "get_image_backend", "\n", "if", "get_image_backend", "(", ")", "==", "'accimage'", ":", "\n", "        ", "return", "accimage_loader", "(", "path", ")", "\n", "", "else", ":", "\n", "        ", "return", "pil_loader", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.imagenet.select_classes": [[286, 299], ["sio.loadmat", "enumerate", "selected_classes.items"], "function", ["None"], ["", "", "", "def", "select_classes", "(", "mat_fname", ",", "selected_classes", "=", "SELECTED_CALSSES", ")", ":", "\n", "    ", "import", "scipy", ".", "io", "as", "sio", "\n", "mat_contents", "=", "sio", ".", "loadmat", "(", "mat_fname", ")", "\n", "\n", "classes", "=", "{", "}", "\n", "\n", "for", "i", ",", "key_values", "in", "enumerate", "(", "selected_classes", ".", "items", "(", ")", ")", ":", "\n", "        ", "key", ",", "value", "=", "key_values", "\n", "for", "idx", "in", "value", ":", "\n", "            ", "WNID", "=", "mat_contents", "[", "'synsets'", "]", "[", "idx", "-", "1", "]", "[", "0", "]", "[", "1", "]", "[", "0", "]", "\n", "classes", "[", "WNID", "]", "=", "i", "\n", "\n", "", "", "return", "classes", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.imagenet.get_color_distortion": [[305, 313], ["torchvision.transforms.ColorJitter", "torchvision.transforms.RandomApply", "torchvision.transforms.RandomGrayscale", "torchvision.transforms.Compose"], "function", ["None"], ["def", "get_color_distortion", "(", "s", "=", "0.1", ")", ":", "\n", "# s is the strength of color distortion.", "\n", "\n", "    ", "color_jitter", "=", "transforms", ".", "ColorJitter", "(", "0.8", "*", "s", ",", "0.8", "*", "s", ",", "0.8", "*", "s", ",", "0.2", "*", "s", ")", "\n", "rnd_color_jitter", "=", "transforms", ".", "RandomApply", "(", "[", "color_jitter", "]", ",", "p", "=", "0.8", ")", "\n", "rnd_gray", "=", "transforms", ".", "RandomGrayscale", "(", "p", "=", "0.2", ")", "\n", "color_distort", "=", "transforms", ".", "Compose", "(", "[", "rnd_color_jitter", ",", "rnd_gray", "]", ")", "\n", "return", "color_distort", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.imagenet.gaussian_blur": [[314, 319], ["int", "cv2.GaussianBlur"], "function", ["None"], ["", "def", "gaussian_blur", "(", "img", ")", ":", "\n", "    ", "size", "=", "int", "(", "img", ".", "height", "/", "10.", ")", "\n", "image_blur", "=", "cv2", ".", "GaussianBlur", "(", "img", ",", "(", "size", ",", "size", ")", ",", "0.1", ")", "\n", "new_image", "=", "image_blur", "\n", "return", "new_image", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.imagenet.get_data_augmentation": [[321, 341], ["torchvision.transforms.Lambda", "torchvision.transforms.RandomApply", "imagenet.get_color_distortion", "torchvision.transforms.RandomAffine", "augmentation_transforms.append", "augmentation_transforms.append", "torchvision.transforms.Compose", "torchvision.transforms.ToPILImage", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "augmentation_transforms.append", "augmentation_transforms.append", "augmentation_transforms.append", "torchvision.transforms.ToTensor"], "function", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.imagenet.get_color_distortion"], ["", "def", "get_data_augmentation", "(", "spatial_size", ",", "normalize", ",", "color_dist", "=", "1.", ",", "g_blur", "=", "0.", ",", "affine", "=", "False", ")", ":", "\n", "    ", "blur", "=", "transforms", ".", "Lambda", "(", "gaussian_blur", ")", "\n", "rnd_blur", "=", "transforms", ".", "RandomApply", "(", "[", "blur", "]", ",", "p", "=", "0.5", ")", "\n", "color_distort", "=", "get_color_distortion", "(", "s", "=", "color_dist", ")", "\n", "affine", "=", "transforms", ".", "RandomAffine", "(", "10", ",", "scale", "=", "(", "0.8", ",", "1.2", ")", ",", "shear", "=", "[", "-", "0.1", ",", "0.1", ",", "-", "0.1", ",", "0.1", "]", ")", "\n", "augmentation_transforms", "=", "[", "\n", "transforms", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "spatial_size", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", "]", "\n", "if", "affine", ":", "\n", "        ", "augmentation_transforms", ".", "append", "(", "affine", ")", "\n", "", "if", "color_dist", ">", "0.", ":", "\n", "        ", "augmentation_transforms", ".", "append", "(", "color_distort", ")", "\n", "", "if", "g_blur", ">", "0.", ":", "\n", "        ", "augmentation_transforms", ".", "append", "(", "rnd_blur", ")", "\n", "\n", "", "augmentation_transforms", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "augmentation_transforms", ".", "append", "(", "normalize", ")", "\n", "\n", "return", "transforms", ".", "Compose", "(", "augmentation_transforms", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.vizualization.make_and_save_grid_images": [[7, 30], ["min", "images[].cpu().numpy", "matplotlib.pyplot.figure", "matplotlib.GridSpec", "gridspec.GridSpec.update", "enumerate", "matplotlib.pyplot.savefig", "matplotlib.pyplot.close", "matplotlib.pyplot.subplot", "matplotlib.pyplot.axis", "plt.subplot.set_xticklabels", "plt.subplot.set_yticklabels", "plt.subplot.set_aspect", "images_list.append", "matplotlib.pyplot.imshow", "os.path.join", "images[].cpu", "sample.transpose"], "function", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.DOT.update"], ["def", "make_and_save_grid_images", "(", "images", ",", "name", ",", "samples_dir", ",", "N_h", "=", "8", ",", "N_w", "=", "8", ")", ":", "\n", "    ", "N_tot", "=", "images", ".", "shape", "[", "0", "]", "\n", "tot", "=", "min", "(", "N_h", "*", "N_w", ",", "N_tot", ")", "\n", "samples", "=", "images", "[", ":", "tot", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "N_h", ",", "N_w", ")", ")", "\n", "gs", "=", "gridspec", ".", "GridSpec", "(", "N_h", ",", "N_w", ")", "\n", "gs", ".", "update", "(", "wspace", "=", "0.05", ",", "hspace", "=", "0.05", ")", "\n", "images_list", "=", "[", "]", "\n", "for", "i", ",", "sample", "in", "enumerate", "(", "samples", ")", ":", "\n", "        ", "ax", "=", "plt", ".", "subplot", "(", "gs", "[", "i", "]", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "ax", ".", "set_xticklabels", "(", "[", "]", ")", "\n", "ax", ".", "set_yticklabels", "(", "[", "]", ")", "\n", "ax", ".", "set_aspect", "(", "'equal'", ")", "\n", "sample_t", "=", "sample", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "*", "0.5", "+", "0.5", "\n", "images_list", ".", "append", "(", "sample_t", ")", "\n", "plt", ".", "imshow", "(", "sample_t", ")", "\n", "\n", "", "plt", ".", "savefig", "(", "\n", "os", ".", "path", ".", "join", "(", "samples_dir", ",", "f'{name}.png'", ")", ",", "\n", "bbox_inches", "=", "'tight'", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "return", "images_list", "", "", ""]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.timer.Timer.__init__": [[4, 7], ["time.time"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "start_time", "=", "time", ".", "time", "(", ")", ",", "limit", "=", "100", ")", ":", "\n", "        ", "self", ".", "start_time", "=", "start_time", "\n", "self", ".", "limit", "=", "limit", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.timer.Timer.__call__": [[8, 16], ["print", "timer.hms"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.timer.hms"], ["", "def", "__call__", "(", "self", ",", "step", ",", "mess", "=", "''", ",", "prints", "=", "True", ")", ":", "\n", "        ", "if", "prints", "and", "(", "step", "%", "self", ".", "limit", "!=", "0", ")", "and", "(", "step", ">", "10", ")", ":", "\n", "            ", "return", "\n", "", "message", "=", "'[%8d][%s] %s'", "%", "(", "step", ",", "hms", "(", "self", ".", "start_time", ")", ",", "mess", ")", "\n", "if", "prints", ":", "\n", "            ", "print", "(", "message", ")", "\n", "", "else", ":", "\n", "            ", "return", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.timer.hms": [[18, 28], ["int", "time.time"], "function", ["None"], ["", "", "", "def", "hms", "(", "start_time", ")", ":", "\n", "    ", "t", "=", "int", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "\n", "m", ",", "s", "=", "t", "//", "60", ",", "t", "%", "60", "\n", "h", ",", "m", "=", "m", "//", "60", ",", "m", "%", "60", "\n", "if", "h", ">", "0", ":", "\n", "        ", "return", "'%2dh%02dm%02ds'", "%", "(", "h", ",", "m", ",", "s", ")", "\n", "", "elif", "m", ">", "0", ":", "\n", "        ", "return", "'%5dm%02ds'", "%", "(", "m", ",", "s", ")", "\n", "", "else", ":", "\n", "        ", "return", "'%8ds'", "%", "s", "", "", "", ""]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.fid_scheduler.FIDScheduler.__init__": [[7, 16], ["numpy.zeros", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "freq_fid", "=", "2000", "# args.freq_fid", "\n", "self", ".", "oldest_fid_iter", "=", "20000", "# args.oldest_fid_iter", "\n", "self", ".", "num_old_fids", "=", "int", "(", "self", ".", "oldest_fid_iter", "/", "self", ".", "freq_fid", ")", "+", "1", "\n", "self", ".", "curent_cursor", "=", "-", "self", ".", "num_old_fids", "\n", "self", ".", "old_fids", "=", "np", ".", "zeros", "(", "[", "self", ".", "num_old_fids", "]", ")", "\n", "self", ".", "trainer", "=", "None", "\n", "self", ".", "num_failures", "=", "0", "\n", "self", ".", "max_failures", "=", "3", "#args.max_failures", "\n", "", "def", "init_trainer", "(", "self", ",", "trainer", ")", ":", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.fid_scheduler.FIDScheduler.init_trainer": [[16, 18], ["None"], "methods", ["None"], ["", "def", "init_trainer", "(", "self", ",", "trainer", ")", ":", "\n", "        ", "self", ".", "trainer", "=", "trainer", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.fid_scheduler.FIDScheduler.step": [[19, 44], ["print", "print", "print", "numpy.mod", "print", "print", "print", "print", "print", "fid_scheduler.FIDScheduler.trainer.scheduler_d.step", "fid_scheduler.FIDScheduler.trainer.scheduler_g.step", "str"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.fid_scheduler.MMDScheduler.step", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.fid_scheduler.MMDScheduler.step"], ["", "def", "step", "(", "self", ",", "fid", ")", ":", "\n", "        ", "if", "self", ".", "curent_cursor", "<", "0", ":", "\n", "            ", "print", "(", "'Filling the buffer: curent_cursor'", "+", "str", "(", "self", ".", "curent_cursor", ")", ")", "\n", "self", ".", "old_fids", "[", "self", ".", "num_old_fids", "+", "self", ".", "curent_cursor", "]", "=", "fid", "\n", "self", ".", "curent_cursor", "+=", "1", "\n", "", "else", ":", "\n", "            ", "print", "(", "f'old_fids'", ")", "\n", "print", "(", "self", ".", "old_fids", ")", "\n", "self", ".", "old_fids", "[", "self", ".", "curent_cursor", "]", "=", "fid", "\n", "self", ".", "curent_cursor", "=", "np", ".", "mod", "(", "self", ".", "curent_cursor", "+", "1", ",", "self", ".", "num_old_fids", ")", "\n", "old_fid", "=", "self", ".", "old_fids", "[", "self", ".", "curent_cursor", "]", "\n", "print", "(", "'new_fids'", ")", "\n", "print", "(", "self", ".", "old_fids", ")", "\n", "\n", "if", "old_fid", "<", "fid", ":", "\n", "                ", "print", "(", "' incresing counter  '", ")", "\n", "self", ".", "num_failures", "+=", "1", "\n", "", "else", ":", "\n", "                ", "print", "(", "'resetting counter'", ")", "\n", "self", ".", "num_failures", "=", "0", "\n", "", "if", "self", ".", "num_failures", "==", "self", ".", "max_failures", ":", "\n", "                ", "print", "(", "\" reducing step-size \"", ")", "\n", "self", ".", "num_failures", "=", "0", "\n", "self", ".", "trainer", ".", "scheduler_d", ".", "step", "(", ")", "\n", "self", ".", "trainer", ".", "scheduler_g", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.fid_scheduler.MMDScheduler.__init__": [[48, 61], ["numpy.zeros", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "device", ")", ":", "\n", "        ", "self", ".", "freq_fid", "=", "args", ".", "freq_fid", "\n", "self", ".", "oldest_fid_iter", "=", "args", ".", "oldest_fid_iter", "\n", "self", ".", "num_old_fids", "=", "int", "(", "self", ".", "oldest_fid_iter", "/", "self", ".", "freq_fid", ")", "+", "1", "\n", "self", ".", "curent_cursor", "=", "-", "self", ".", "num_old_fids", "\n", "self", ".", "bs", "=", "2048", "\n", "self", ".", "old_scores", "=", "self", ".", "num_old_fids", "*", "[", "None", "]", "\n", "self", ".", "old_fids", "=", "np", ".", "zeros", "(", "[", "self", ".", "num_old_fids", "]", ")", "\n", "self", ".", "trainer", "=", "None", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "num_failures", "=", "0", "\n", "self", ".", "max_failures", "=", "3", "#args.max_failures", "\n", "self", ".", "restart", "=", "0", "\n", "", "def", "init_trainer", "(", "self", ",", "trainer", ")", ":", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.fid_scheduler.MMDScheduler.init_trainer": [[61, 63], ["None"], "methods", ["None"], ["", "def", "init_trainer", "(", "self", ",", "trainer", ")", ":", "\n", "        ", "self", ".", "trainer", "=", "trainer", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.fid_scheduler.MMDScheduler.step": [[64, 107], ["min", "print", "print", "fid_scheduler.diff_polynomial_mmd2_and_ratio_with_saving", "act_true.to", "act_fake.to", "print", "fid_scheduler.diff_polynomial_mmd2_and_ratio_with_saving", "numpy.mod", "fid_scheduler.diff_polynomial_mmd2_and_ratio_with_saving", "scipy.stats.norm.cdf", "numpy.mod", "print", "print", "str", "str", "print", "print", "str", "fid_scheduler.MMDScheduler.trainer.scheduler_d.step", "fid_scheduler.MMDScheduler.trainer.scheduler_g.step", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.fid_scheduler.diff_polynomial_mmd2_and_ratio_with_saving", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.fid_scheduler.diff_polynomial_mmd2_and_ratio_with_saving", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.fid_scheduler.diff_polynomial_mmd2_and_ratio_with_saving", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.fid_scheduler.MMDScheduler.step", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.fid_scheduler.MMDScheduler.step"], ["", "def", "step", "(", "self", ",", "fid", ",", "score_true", ",", "score_fake", ")", ":", "\n", "        ", "bs", "=", "min", "(", "self", ".", "bs", ",", "score_true", ".", "shape", "[", "0", "]", ",", "score_fake", ".", "shape", "[", "0", "]", ")", "\n", "act_true", "=", "score_true", "[", ":", "bs", "]", "\n", "act_fake", "=", "score_fake", "[", ":", "bs", "]", "\n", "if", "self", ".", "curent_cursor", "<", "0", ":", "\n", "            ", "print", "(", "'Filling the buffer: curent_cursor '", "+", "str", "(", "self", ".", "curent_cursor", ")", ")", "\n", "Y_related_sums", "=", "diff_polynomial_mmd2_and_ratio_with_saving", "(", "act_true", ".", "to", "(", "self", ".", "device", ")", ",", "act_fake", ".", "to", "(", "self", ".", "device", ")", ",", "None", ",", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "old_scores", "[", "self", ".", "num_old_fids", "+", "self", ".", "curent_cursor", "]", "=", "Y_related_sums", "\n", "self", ".", "old_fids", "[", "self", ".", "num_old_fids", "+", "self", ".", "curent_cursor", "]", "=", "fid", "\n", "self", ".", "curent_cursor", "+=", "1", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "restart", "<", "0", ":", "\n", "                ", "print", "(", "'Re-Filling the buffer: curent_cursor '", "+", "str", "(", "self", ".", "curent_cursor", ")", ")", "\n", "Y_related_sums", "=", "diff_polynomial_mmd2_and_ratio_with_saving", "(", "act_true", ",", "act_fake", ",", "None", ",", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "old_scores", "[", "self", ".", "curent_cursor", "]", "=", "Y_related_sums", "\n", "self", ".", "old_fids", "[", "self", ".", "curent_cursor", "]", "=", "fid", "\n", "self", ".", "curent_cursor", "=", "np", ".", "mod", "(", "self", ".", "curent_cursor", "+", "1", ",", "self", ".", "num_old_fids", ")", "\n", "self", ".", "restart", "+=", "1", "\n", "", "else", ":", "\n", "                ", "saved_Z", "=", "self", ".", "old_scores", "[", "self", ".", "curent_cursor", "]", "\n", "mmd2_diff", ",", "test_stat", ",", "Y_related_sums", "=", "diff_polynomial_mmd2_and_ratio_with_saving", "(", "act_true", ",", "act_fake", ",", "saved_Z", ",", "device", "=", "self", ".", "device", ")", "\n", "p_val", "=", "scipy", ".", "stats", ".", "norm", ".", "cdf", "(", "test_stat", ")", "\n", "self", ".", "old_scores", "[", "self", ".", "curent_cursor", "]", "=", "Y_related_sums", "\n", "self", ".", "old_fids", "[", "self", ".", "curent_cursor", "]", "=", "fid", "\n", "self", ".", "curent_cursor", "=", "np", ".", "mod", "(", "self", ".", "curent_cursor", "+", "1", ",", "self", ".", "num_old_fids", ")", "\n", "print", "(", "\"3-sample test stat = %.1f\"", "%", "test_stat", ")", "\n", "print", "(", "\"3-sample p-value = %.1f\"", "%", "p_val", ")", "\n", "if", "p_val", ">", ".1", ":", "\n", "                    ", "self", ".", "num_failures", "+=", "1", "\n", "print", "(", "' increasing counter to %d '", ",", "self", ".", "num_failures", ")", "\n", "if", "self", ".", "num_failures", ">=", "self", ".", "max_failures", ":", "\n", "                        ", "self", ".", "num_failures", "=", "0", "\n", "self", ".", "trainer", ".", "scheduler_d", ".", "step", "(", ")", "\n", "self", ".", "trainer", ".", "scheduler_g", ".", "step", "(", ")", "\n", "self", ".", "restart", "=", "-", "self", ".", "max_failures", "\n", "print", "(", "\"failure to improve after %d tests\"", ",", "self", ".", "max_failures", ")", "\n", "print", "(", "\" reducing lr to:  lr energy at %f  and lr gen at %f \"", ",", "self", ".", "trainer", ".", "optim_d", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "self", ".", "trainer", ".", "optim_g", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ")", "\n", "", "else", ":", "\n", "                        ", "print", "(", "\" No improvement in last %d, keeping lr energy at %f  and lr gen at %f \"", ",", "self", ".", "num_failures", ",", "self", ".", "trainer", ".", "optim_d", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "self", ".", "trainer", ".", "optim_g", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ")", "\n", "", "", "else", ":", "\n", "                    ", "print", "(", "\" Keeping lr energy at %f  and lr gen at %f \"", ",", "self", ".", "trainer", ".", "optim_d", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "self", ".", "trainer", ".", "optim_g", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ")", "\n", "self", ".", "num_failures", "=", "0", "\n", "", "", "", "print", "(", "\"FID scores: \"", "+", "str", "(", "self", ".", "old_fids", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.fid_scheduler.diff_polynomial_mmd2_and_ratio_with_saving": [[108, 128], ["float", "X.to.to", "Y.to.to", "torch.einsum", "float", "fid_scheduler._get_sums", "tuple", "fid_scheduler._diff_mmd2_and_ratio_from_sums", "tuple", "tuple", "el.to", "torch.einsum", "torch.einsum", "el.cpu", "el.cpu"], "function", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.fid_scheduler._get_sums", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.fid_scheduler._diff_mmd2_and_ratio_from_sums"], ["", "", "def", "diff_polynomial_mmd2_and_ratio_with_saving", "(", "X", ",", "Y", ",", "saved_sums_for_Z", ",", "device", "=", "'cuda'", ")", ":", "\n", "    ", "dim", "=", "float", "(", "X", ".", "shape", "[", "1", "]", ")", "\n", "X", "=", "X", ".", "to", "(", "device", ")", "\n", "Y", "=", "Y", ".", "to", "(", "device", ")", "\n", "# TODO: could definitely do this faster", "\n", "torch", ".", "einsum", "(", "'ni,mi->nm'", ",", "X", ",", "Y", ")", "\n", "K_XY", "=", "(", "torch", ".", "einsum", "(", "'ni,mi->nm'", ",", "X", ",", "Y", ")", "/", "dim", "+", "1", ")", "**", "3", "\n", "K_YY", "=", "(", "torch", ".", "einsum", "(", "'ni,mi->nm'", ",", "Y", ",", "Y", ")", "/", "dim", "+", "1", ")", "**", "3", "\n", "#K_XY = (np.dot(X, Y.transpose()) / dim + 1) ** 3", "\n", "#K_YY = (np.dot(Y, Y.transpose()) / dim + 1) ** 3", "\n", "m", "=", "float", "(", "K_YY", ".", "shape", "[", "0", "]", ")", "\n", "\n", "Y_related_sums", "=", "_get_sums", "(", "K_XY", ",", "K_YY", ")", "\n", "\n", "if", "saved_sums_for_Z", "is", "None", ":", "\n", "        ", "return", "tuple", "(", "[", "el", ".", "cpu", "(", ")", "for", "el", "in", "Y_related_sums", "]", ")", "\n", "", "saved_sums_for_Z", "=", "tuple", "(", "[", "el", ".", "to", "(", "device", ")", "for", "el", "in", "saved_sums_for_Z", "]", ")", "\n", "mmd2_diff", ",", "ratio", "=", "_diff_mmd2_and_ratio_from_sums", "(", "Y_related_sums", ",", "saved_sums_for_Z", ",", "m", ")", "\n", "\n", "return", "mmd2_diff", ",", "ratio", ",", "tuple", "(", "[", "el", ".", "cpu", "(", ")", "for", "el", "in", "Y_related_sums", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.fid_scheduler._get_sums": [[129, 154], ["float", "torch.sum", "torch.sum", "float", "torch.diag", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "_get_sums", "(", "K_XY", ",", "K_YY", ",", "const_diagonal", "=", "False", ")", ":", "\n", "    ", "m", "=", "float", "(", "K_YY", ".", "shape", "[", "0", "]", ")", "# Assumes X, Y, Z are same shape", "\n", "\n", "### Get the various sums of kernels that we'll use", "\n", "# Kts drop the diagonal, but we don't need to explicitly form them", "\n", "if", "const_diagonal", "is", "not", "False", ":", "\n", "        ", "const_diagonal", "=", "float", "(", "const_diagonal", ")", "\n", "diag_Y", "=", "const_diagonal", "\n", "sum_diag2_Y", "=", "m", "*", "const_diagonal", "**", "2", "\n", "", "else", ":", "\n", "        ", "diag_Y", "=", "torch", ".", "diag", "(", "K_YY", ")", "\n", "\n", "sum_diag2_Y", "=", "torch", ".", "sum", "(", "diag_Y", "**", "2", ")", "\n", "\n", "", "Kt_YY_sums", "=", "torch", ".", "sum", "(", "K_YY", ",", "dim", "=", "1", ")", "-", "diag_Y", "\n", "\n", "K_XY_sums_0", "=", "torch", ".", "sum", "(", "K_XY", ",", "dim", "=", "0", ")", "\n", "K_XY_sums_1", "=", "torch", ".", "sum", "(", "K_XY", ",", "dim", "=", "1", ")", "\n", "\n", "# TODO: turn these into dot products?", "\n", "# should figure out if that's faster or not on GPU / with theano...", "\n", "Kt_YY_2_sum", "=", "(", "K_YY", "**", "2", ")", ".", "sum", "(", ")", "-", "sum_diag2_Y", "\n", "K_XY_2_sum", "=", "(", "K_XY", "**", "2", ")", ".", "sum", "(", ")", "\n", "\n", "return", "Kt_YY_sums", ",", "Kt_YY_2_sum", ",", "K_XY_sums_0", ",", "K_XY_sums_1", ",", "K_XY_2_sum", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.fid_scheduler._diff_mmd2_and_ratio_from_sums": [[155, 222], ["Kt_YY_sums.sum", "Kt_ZZ_sums.sum", "K_XY_sums_0.sum", "K_XZ_sums_0.sum", "torch.dot", "torch.dot", "torch.dot", "mmd2_diff.item", "numpy.sqrt", "mmd2_diff.item", "torch.dot", "torch.dot", "torch.dot", "torch.dot", "torch.dot", "torch.dot", "max", "var_est.item"], "function", ["None"], ["", "def", "_diff_mmd2_and_ratio_from_sums", "(", "Y_related_sums", ",", "Z_related_sums", ",", "m", ",", "const_diagonal", "=", "False", ")", ":", "\n", "    ", "Kt_YY_sums", ",", "Kt_YY_2_sum", ",", "K_XY_sums_0", ",", "K_XY_sums_1", ",", "K_XY_2_sum", "=", "Y_related_sums", "\n", "Kt_ZZ_sums", ",", "Kt_ZZ_2_sum", ",", "K_XZ_sums_0", ",", "K_XZ_sums_1", ",", "K_XZ_2_sum", "=", "Z_related_sums", "\n", "\n", "Kt_YY_sum", "=", "Kt_YY_sums", ".", "sum", "(", ")", "\n", "Kt_ZZ_sum", "=", "Kt_ZZ_sums", ".", "sum", "(", ")", "\n", "\n", "K_XY_sum", "=", "K_XY_sums_0", ".", "sum", "(", ")", "\n", "K_XZ_sum", "=", "K_XZ_sums_0", ".", "sum", "(", ")", "\n", "\n", "# TODO: turn these into dot products?", "\n", "# should figure out if that's faster or not on GPU / with theano...", "\n", "\n", "### Estimators for the various terms involved", "\n", "muY_muY", "=", "Kt_YY_sum", "/", "(", "m", "*", "(", "m", "-", "1", ")", ")", "\n", "muZ_muZ", "=", "Kt_ZZ_sum", "/", "(", "m", "*", "(", "m", "-", "1", ")", ")", "\n", "\n", "muX_muY", "=", "K_XY_sum", "/", "(", "m", "*", "m", ")", "\n", "muX_muZ", "=", "K_XZ_sum", "/", "(", "m", "*", "m", ")", "\n", "\n", "E_y_muY_sq", "=", "(", "torch", ".", "dot", "(", "Kt_YY_sums", ",", "Kt_YY_sums", ")", "-", "Kt_YY_2_sum", ")", "/", "(", "m", "*", "(", "m", "-", "1", ")", "*", "(", "m", "-", "2", ")", ")", "\n", "E_z_muZ_sq", "=", "(", "torch", ".", "dot", "(", "Kt_ZZ_sums", ",", "Kt_ZZ_sums", ")", "-", "Kt_ZZ_2_sum", ")", "/", "(", "m", "*", "(", "m", "-", "1", ")", "*", "(", "m", "-", "2", ")", ")", "\n", "\n", "E_x_muY_sq", "=", "(", "torch", ".", "dot", "(", "K_XY_sums_1", ",", "K_XY_sums_1", ")", "-", "K_XY_2_sum", ")", "/", "(", "m", "*", "m", "*", "(", "m", "-", "1", ")", ")", "\n", "E_x_muZ_sq", "=", "(", "torch", ".", "dot", "(", "K_XZ_sums_1", ",", "K_XZ_sums_1", ")", "-", "K_XZ_2_sum", ")", "/", "(", "m", "*", "m", "*", "(", "m", "-", "1", ")", ")", "\n", "\n", "E_y_muX_sq", "=", "(", "torch", ".", "dot", "(", "K_XY_sums_0", ",", "K_XY_sums_0", ")", "-", "K_XY_2_sum", ")", "/", "(", "m", "*", "m", "*", "(", "m", "-", "1", ")", ")", "\n", "E_z_muX_sq", "=", "(", "torch", ".", "dot", "(", "K_XZ_sums_0", ",", "K_XZ_sums_0", ")", "-", "K_XZ_2_sum", ")", "/", "(", "m", "*", "m", "*", "(", "m", "-", "1", ")", ")", "\n", "\n", "E_y_muY_y_muX", "=", "torch", ".", "dot", "(", "Kt_YY_sums", ",", "K_XY_sums_0", ")", "/", "(", "m", "*", "m", "*", "(", "m", "-", "1", ")", ")", "\n", "E_z_muZ_z_muX", "=", "torch", ".", "dot", "(", "Kt_ZZ_sums", ",", "K_XZ_sums_0", ")", "/", "(", "m", "*", "m", "*", "(", "m", "-", "1", ")", ")", "\n", "\n", "E_x_muY_x_muZ", "=", "torch", ".", "dot", "(", "K_XY_sums_1", ",", "K_XZ_sums_1", ")", "/", "(", "m", "*", "m", "*", "m", ")", "\n", "\n", "E_kyy2", "=", "Kt_YY_2_sum", "/", "(", "m", "*", "(", "m", "-", "1", ")", ")", "\n", "E_kzz2", "=", "Kt_ZZ_2_sum", "/", "(", "m", "*", "(", "m", "-", "1", ")", ")", "\n", "\n", "E_kxy2", "=", "K_XY_2_sum", "/", "(", "m", "*", "m", ")", "\n", "E_kxz2", "=", "K_XZ_2_sum", "/", "(", "m", "*", "m", ")", "\n", "\n", "### Combine into overall estimators", "\n", "mmd2_diff", "=", "muY_muY", "-", "2", "*", "muX_muY", "-", "muZ_muZ", "+", "2", "*", "muX_muZ", "\n", "\n", "first_order", "=", "4", "*", "(", "m", "-", "2", ")", "/", "(", "m", "*", "(", "m", "-", "1", ")", ")", "*", "(", "\n", "E_y_muY_sq", "-", "muY_muY", "**", "2", "\n", "+", "E_x_muY_sq", "-", "muX_muY", "**", "2", "\n", "+", "E_y_muX_sq", "-", "muX_muY", "**", "2", "\n", "+", "E_z_muZ_sq", "-", "muZ_muZ", "**", "2", "\n", "+", "E_x_muZ_sq", "-", "muX_muZ", "**", "2", "\n", "+", "E_z_muX_sq", "-", "muX_muZ", "**", "2", "\n", "-", "2", "*", "E_y_muY_y_muX", "+", "2", "*", "muY_muY", "*", "muX_muY", "\n", "-", "2", "*", "E_x_muY_x_muZ", "+", "2", "*", "muX_muY", "*", "muX_muZ", "\n", "-", "2", "*", "E_z_muZ_z_muX", "+", "2", "*", "muZ_muZ", "*", "muX_muZ", "\n", ")", "\n", "second_order", "=", "2", "/", "(", "m", "*", "(", "m", "-", "1", ")", ")", "*", "(", "\n", "E_kyy2", "-", "muY_muY", "**", "2", "\n", "+", "2", "*", "E_kxy2", "-", "2", "*", "muX_muY", "**", "2", "\n", "+", "E_kzz2", "-", "muZ_muZ", "**", "2", "\n", "+", "2", "*", "E_kxz2", "-", "2", "*", "muX_muZ", "**", "2", "\n", "-", "4", "*", "E_y_muY_y_muX", "+", "4", "*", "muY_muY", "*", "muX_muY", "\n", "-", "4", "*", "E_x_muY_x_muZ", "+", "4", "*", "muX_muY", "*", "muX_muZ", "\n", "-", "4", "*", "E_z_muZ_z_muX", "+", "4", "*", "muZ_muZ", "*", "muX_muZ", "\n", ")", "\n", "var_est", "=", "first_order", "+", "second_order", "\n", "\n", "ratio", "=", "mmd2_diff", ".", "item", "(", ")", "/", "np", ".", "sqrt", "(", "max", "(", "var_est", ".", "item", "(", ")", ",", "_eps", ")", ")", "\n", "return", "mmd2_diff", ".", "item", "(", ")", ",", "ratio", "", "", ""]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.draw.fid_plot": [[32, 67], ["matplotlib.figure", "matplotlib.axhline", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.ylim", "matplotlib.yticks", "matplotlib.grid", "matplotlib.minorticks_on", "matplotlib.legend", "matplotlib.title", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.close", "sshfs_fp", "print", "matplotlib.plot", "numpy.arange", "open", "json.load", "len"], "function", ["None"], ["def", "fid_plot", "(", "d_types", ")", ":", "\n", "    ", "plt", ".", "figure", "(", "figsize", "=", "(", "8", ",", "7", ")", ")", "\n", "for", "d", "in", "d_types", ":", "\n", "        ", "fname", "=", "sshfs_fp", "(", "'logs'", ",", "d", ",", "'fids'", ",", "'posterior_fids.json'", ")", "\n", "print", "(", "fname", ")", "\n", "\n", "with", "open", "(", "fname", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "fid_data", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "ts", ",", "fid_train", ",", "fid_test", "=", "fid_data", "\n", "ts", "=", "ts", "[", ":", "len", "(", "fid_test", ")", "]", "\n", "\n", "plt", ".", "plot", "(", "ts", ",", "fid_test", ",", "'.'", ",", "linestyle", "=", "'-'", ",", "label", "=", "model_map", "[", "d", "]", ",", "lw", "=", "2", ")", "\n", "\n", "\n", "", "plt", ".", "axhline", "(", "y", "=", "fid_test", "[", "0", "]", ",", "linestyle", "=", "'dotted'", ",", "color", "=", "'gray'", ",", "linewidth", "=", "2", ",", "xmin", "=", "-", "100", ",", "xmax", "=", "100", ")", "\n", "plt", ".", "xlabel", "(", "'number of LMC steps'", ")", "\n", "plt", ".", "ylabel", "(", "'FID score'", ")", "\n", "pmin", "=", "30", "\n", "pmax", "=", "70", "\n", "plt", ".", "ylim", "(", "[", "pmin", ",", "pmax", "]", ")", "\n", "\n", "plt", ".", "yticks", "(", "np", ".", "arange", "(", "pmin", ",", "pmax", ",", "1", ")", ")", "\n", "\n", "plt", ".", "grid", "(", "which", "=", "'major'", ",", "axis", "=", "'both'", ",", "linewidth", "=", "0.2", ")", "\n", "plt", ".", "minorticks_on", "(", ")", "\n", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "title", "(", "'FID changes with Langevin dynamics'", ")", "\n", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "\n", "plt", ".", "savefig", "(", "'figures/lmc_v_fid2.png'", ")", "\n", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.draw.single_image": [[69, 94], ["os.listdir", "os.listdir.sort", "matplotlib.figure", "matplotlib.GridSpec", "gridspec.GridSpec.update", "matplotlib.savefig", "sshfs_fp", "f.endswith", "matplotlib.subplot", "matplotlib.axis", "plt.subplot.set_xticklabels", "plt.subplot.set_yticklabels", "plt.subplot.set_aspect", "imgs[].detach().numpy", "samples.append", "matplotlib.imshow", "open", "pickle.load", "os.path.join", "imgs[].detach", "imgs[].detach().numpy.transpose", "sshfs_fp"], "function", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.samplers.DOT.update"], ["", "def", "single_image", "(", "path", ",", "seed", "=", "0", ")", ":", "\n", "    ", "files", "=", "os", ".", "listdir", "(", "sshfs_fp", "(", "path", ")", ")", "\n", "files", ".", "sort", "(", ")", "\n", "samples", "=", "[", "]", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "10", ",", "3", ")", ")", "\n", "gs", "=", "gridspec", ".", "GridSpec", "(", "3", ",", "10", ")", "\n", "gs", ".", "update", "(", "wspace", "=", "0.05", ",", "hspace", "=", "0.05", ")", "\n", "i", "=", "0", "\n", "for", "f", "in", "files", ":", "\n", "        ", "if", "f", ".", "endswith", "(", "'.pkl'", ")", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "sshfs_fp", "(", "path", ")", ",", "f", ")", ",", "'rb'", ")", "as", "ff", ":", "\n", "                ", "imgs", "=", "pkl", ".", "load", "(", "ff", ")", "\n", "", "ax", "=", "plt", ".", "subplot", "(", "gs", "[", "i", "]", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "ax", ".", "set_xticklabels", "(", "[", "]", ")", "\n", "ax", ".", "set_yticklabels", "(", "[", "]", ")", "\n", "ax", ".", "set_aspect", "(", "'equal'", ")", "\n", "sample", "=", "imgs", "[", "seed", "]", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "sample_t", "=", "sample", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "*", "0.5", "+", "0.5", "\n", "samples", ".", "append", "(", "sample_t", ")", "\n", "plt", ".", "imshow", "(", "sample_t", ")", "\n", "i", "+=", "1", "\n", "if", "i", ">=", "30", ":", "\n", "                ", "break", "\n", "", "", "", "plt", ".", "savefig", "(", "f'figures/single_image_{seed}.png'", ",", "bbox_inches", "=", "'tight'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.kid_score._sqn": [[14, 17], ["numpy.ravel", "np.ravel.dot"], "function", ["None"], ["def", "_sqn", "(", "arr", ")", ":", "\n", "    ", "flat", "=", "np", ".", "ravel", "(", "arr", ")", "\n", "return", "flat", ".", "dot", "(", "flat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.kid_score.polynomial_mmd_averages": [[19, 38], ["min", "numpy.zeros", "min", "range", "numpy.zeros", "len", "len", "kid_score.polynomial_mmd", "choice", "choice", "len", "len"], "function", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.kid_score.polynomial_mmd"], ["", "def", "polynomial_mmd_averages", "(", "codes_g", ",", "codes_r", ",", "n_subsets", "=", "50", ",", "subset_size", "=", "1000", ",", "\n", "ret_var", "=", "True", ",", "output", "=", "sys", ".", "stdout", ",", "**", "kernel_args", ")", ":", "\n", "    ", "m", "=", "min", "(", "codes_g", ".", "shape", "[", "0", "]", ",", "codes_r", ".", "shape", "[", "0", "]", ")", "\n", "mmds", "=", "np", ".", "zeros", "(", "n_subsets", ")", "\n", "if", "ret_var", ":", "\n", "        ", "vars", "=", "np", ".", "zeros", "(", "n_subsets", ")", "\n", "", "choice", "=", "np", ".", "random", ".", "choice", "\n", "subset_size", "=", "min", "(", "len", "(", "codes_g", ")", ",", "len", "(", "codes_r", ")", ",", "subset_size", ")", "\n", "\n", "for", "i", "in", "range", "(", "n_subsets", ")", ":", "\n", "        ", "g", "=", "codes_g", "[", "choice", "(", "len", "(", "codes_g", ")", ",", "subset_size", ",", "replace", "=", "False", ")", "]", "\n", "r", "=", "codes_r", "[", "choice", "(", "len", "(", "codes_r", ")", ",", "subset_size", ",", "replace", "=", "False", ")", "]", "\n", "o", "=", "polynomial_mmd", "(", "g", ",", "r", ",", "**", "kernel_args", ",", "var_at_m", "=", "m", ",", "ret_var", "=", "ret_var", ")", "\n", "if", "ret_var", ":", "\n", "            ", "mmds", "[", "i", "]", ",", "vars", "[", "i", "]", "=", "o", "\n", "", "else", ":", "\n", "            ", "mmds", "[", "i", "]", "=", "o", "\n", "#bar.set_postfix({'mean': mmds[:i+1].mean()})", "\n", "", "", "return", "(", "mmds", ",", "vars", ")", "if", "ret_var", "else", "mmds", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.kid_score.polynomial_mmd": [[40, 53], ["sklearn.metrics.pairwise.polynomial_kernel", "sklearn.metrics.pairwise.polynomial_kernel", "sklearn.metrics.pairwise.polynomial_kernel", "kid_score._mmd2_and_variance"], "function", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.kid_score._mmd2_and_variance"], ["", "def", "polynomial_mmd", "(", "codes_g", ",", "codes_r", ",", "degree", "=", "3", ",", "gamma", "=", "None", ",", "coef0", "=", "1", ",", "\n", "var_at_m", "=", "None", ",", "ret_var", "=", "True", ")", ":", "\n", "# use  k(x, y) = (gamma <x, y> + coef0)^degree", "\n", "# default gamma is 1 / dim", "\n", "    ", "X", "=", "codes_g", "\n", "Y", "=", "codes_r", "\n", "\n", "K_XX", "=", "polynomial_kernel", "(", "X", ",", "degree", "=", "degree", ",", "gamma", "=", "gamma", ",", "coef0", "=", "coef0", ")", "\n", "K_YY", "=", "polynomial_kernel", "(", "Y", ",", "degree", "=", "degree", ",", "gamma", "=", "gamma", ",", "coef0", "=", "coef0", ")", "\n", "K_XY", "=", "polynomial_kernel", "(", "X", ",", "Y", ",", "degree", "=", "degree", ",", "gamma", "=", "gamma", ",", "coef0", "=", "coef0", ")", "\n", "\n", "return", "_mmd2_and_variance", "(", "K_XX", ",", "K_XY", ",", "K_YY", ",", "\n", "var_at_m", "=", "var_at_m", ",", "ret_var", "=", "ret_var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.kid_score._mmd2_and_variance": [[54, 138], ["K_XY.sum", "K_XY.sum", "Kt_XX_sums.sum", "Kt_YY_sums.sum", "K_XY.sum.sum", "kid_score._sqn", "Kt_XX_sums.dot", "Kt_YY_sums.dot", "numpy.diagonal", "numpy.diagonal", "np.diagonal.sum", "np.diagonal.sum", "kid_score._sqn", "kid_score._sqn", "K_XX.sum", "K_YY.sum", "kid_score._sqn", "kid_score._sqn", "numpy.trace", "kid_score._sqn", "kid_score._sqn", "kid_score._sqn", "kid_score._sqn"], "function", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.kid_score._sqn", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.kid_score._sqn", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.kid_score._sqn", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.kid_score._sqn", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.kid_score._sqn", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.kid_score._sqn", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.kid_score._sqn", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.kid_score._sqn", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.kid_score._sqn"], ["", "def", "_mmd2_and_variance", "(", "K_XX", ",", "K_XY", ",", "K_YY", ",", "unit_diagonal", "=", "False", ",", "\n", "mmd_est", "=", "'unbiased'", ",", "block_size", "=", "1024", ",", "\n", "var_at_m", "=", "None", ",", "ret_var", "=", "True", ")", ":", "\n", "# based on", "\n", "# https://github.com/dougalsutherland/opt-mmd/blob/master/two_sample/mmd.py", "\n", "# but changed to not compute the full kernel matrix at once", "\n", "    ", "m", "=", "K_XX", ".", "shape", "[", "0", "]", "\n", "assert", "K_XX", ".", "shape", "==", "(", "m", ",", "m", ")", "\n", "assert", "K_XY", ".", "shape", "==", "(", "m", ",", "m", ")", "\n", "assert", "K_YY", ".", "shape", "==", "(", "m", ",", "m", ")", "\n", "if", "var_at_m", "is", "None", ":", "\n", "        ", "var_at_m", "=", "m", "\n", "\n", "# Get the various sums of kernels that we'll use", "\n", "# Kts drop the diagonal, but we don't need to compute them explicitly", "\n", "", "if", "unit_diagonal", ":", "\n", "        ", "diag_X", "=", "diag_Y", "=", "1", "\n", "sum_diag_X", "=", "sum_diag_Y", "=", "m", "\n", "sum_diag2_X", "=", "sum_diag2_Y", "=", "m", "\n", "", "else", ":", "\n", "        ", "diag_X", "=", "np", ".", "diagonal", "(", "K_XX", ")", "\n", "diag_Y", "=", "np", ".", "diagonal", "(", "K_YY", ")", "\n", "\n", "sum_diag_X", "=", "diag_X", ".", "sum", "(", ")", "\n", "sum_diag_Y", "=", "diag_Y", ".", "sum", "(", ")", "\n", "\n", "sum_diag2_X", "=", "_sqn", "(", "diag_X", ")", "\n", "sum_diag2_Y", "=", "_sqn", "(", "diag_Y", ")", "\n", "\n", "", "Kt_XX_sums", "=", "K_XX", ".", "sum", "(", "axis", "=", "1", ")", "-", "diag_X", "\n", "Kt_YY_sums", "=", "K_YY", ".", "sum", "(", "axis", "=", "1", ")", "-", "diag_Y", "\n", "K_XY_sums_0", "=", "K_XY", ".", "sum", "(", "axis", "=", "0", ")", "\n", "K_XY_sums_1", "=", "K_XY", ".", "sum", "(", "axis", "=", "1", ")", "\n", "\n", "Kt_XX_sum", "=", "Kt_XX_sums", ".", "sum", "(", ")", "\n", "Kt_YY_sum", "=", "Kt_YY_sums", ".", "sum", "(", ")", "\n", "K_XY_sum", "=", "K_XY_sums_0", ".", "sum", "(", ")", "\n", "\n", "if", "mmd_est", "==", "'biased'", ":", "\n", "        ", "mmd2", "=", "(", "(", "Kt_XX_sum", "+", "sum_diag_X", ")", "/", "(", "m", "*", "m", ")", "\n", "+", "(", "Kt_YY_sum", "+", "sum_diag_Y", ")", "/", "(", "m", "*", "m", ")", "\n", "-", "2", "*", "K_XY_sum", "/", "(", "m", "*", "m", ")", ")", "\n", "", "else", ":", "\n", "        ", "assert", "mmd_est", "in", "{", "'unbiased'", ",", "'u-statistic'", "}", "\n", "mmd2", "=", "(", "Kt_XX_sum", "+", "Kt_YY_sum", ")", "/", "(", "m", "*", "(", "m", "-", "1", ")", ")", "\n", "if", "mmd_est", "==", "'unbiased'", ":", "\n", "            ", "mmd2", "-=", "2", "*", "K_XY_sum", "/", "(", "m", "*", "m", ")", "\n", "", "else", ":", "\n", "            ", "mmd2", "-=", "2", "*", "(", "K_XY_sum", "-", "np", ".", "trace", "(", "K_XY", ")", ")", "/", "(", "m", "*", "(", "m", "-", "1", ")", ")", "\n", "\n", "", "", "if", "not", "ret_var", ":", "\n", "        ", "return", "mmd2", "\n", "\n", "", "Kt_XX_2_sum", "=", "_sqn", "(", "K_XX", ")", "-", "sum_diag2_X", "\n", "Kt_YY_2_sum", "=", "_sqn", "(", "K_YY", ")", "-", "sum_diag2_Y", "\n", "K_XY_2_sum", "=", "_sqn", "(", "K_XY", ")", "\n", "\n", "dot_XX_XY", "=", "Kt_XX_sums", ".", "dot", "(", "K_XY_sums_1", ")", "\n", "dot_YY_YX", "=", "Kt_YY_sums", ".", "dot", "(", "K_XY_sums_0", ")", "\n", "\n", "m1", "=", "m", "-", "1", "\n", "m2", "=", "m", "-", "2", "\n", "zeta1_est", "=", "(", "\n", "1", "/", "(", "m", "*", "m1", "*", "m2", ")", "*", "(", "\n", "_sqn", "(", "Kt_XX_sums", ")", "-", "Kt_XX_2_sum", "+", "_sqn", "(", "Kt_YY_sums", ")", "-", "Kt_YY_2_sum", ")", "\n", "-", "1", "/", "(", "m", "*", "m1", ")", "**", "2", "*", "(", "Kt_XX_sum", "**", "2", "+", "Kt_YY_sum", "**", "2", ")", "\n", "+", "1", "/", "(", "m", "*", "m", "*", "m1", ")", "*", "(", "\n", "_sqn", "(", "K_XY_sums_1", ")", "+", "_sqn", "(", "K_XY_sums_0", ")", "-", "2", "*", "K_XY_2_sum", ")", "\n", "-", "2", "/", "m", "**", "4", "*", "K_XY_sum", "**", "2", "\n", "-", "2", "/", "(", "m", "*", "m", "*", "m1", ")", "*", "(", "dot_XX_XY", "+", "dot_YY_YX", ")", "\n", "+", "2", "/", "(", "m", "**", "3", "*", "m1", ")", "*", "(", "Kt_XX_sum", "+", "Kt_YY_sum", ")", "*", "K_XY_sum", "\n", ")", "\n", "zeta2_est", "=", "(", "\n", "1", "/", "(", "m", "*", "m1", ")", "*", "(", "Kt_XX_2_sum", "+", "Kt_YY_2_sum", ")", "\n", "-", "1", "/", "(", "m", "*", "m1", ")", "**", "2", "*", "(", "Kt_XX_sum", "**", "2", "+", "Kt_YY_sum", "**", "2", ")", "\n", "+", "2", "/", "(", "m", "*", "m", ")", "*", "K_XY_2_sum", "\n", "-", "2", "/", "m", "**", "4", "*", "K_XY_sum", "**", "2", "\n", "-", "4", "/", "(", "m", "*", "m", "*", "m1", ")", "*", "(", "dot_XX_XY", "+", "dot_YY_YX", ")", "\n", "+", "4", "/", "(", "m", "**", "3", "*", "m1", ")", "*", "(", "Kt_XX_sum", "+", "Kt_YY_sum", ")", "*", "K_XY_sum", "\n", ")", "\n", "var_est", "=", "(", "4", "*", "(", "var_at_m", "-", "2", ")", "/", "(", "var_at_m", "*", "(", "var_at_m", "-", "1", ")", ")", "*", "zeta1_est", "\n", "+", "2", "/", "(", "var_at_m", "*", "(", "var_at_m", "-", "1", ")", ")", "*", "zeta2_est", ")", "\n", "\n", "return", "mmd2", ",", "var_est", "", "", ""]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.PrepareUCIData.__init__": [[29, 33], ["torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "X", ")", ":", "\n", "        ", "if", "not", "torch", ".", "is_tensor", "(", "X", ")", ":", "\n", "            ", "self", ".", "X", "=", "torch", ".", "from_numpy", "(", "X", ")", ".", "float", "(", ")", "\n", "self", ".", "y", "=", "torch", ".", "zeros", "(", "[", "X", ".", "shape", "[", "0", "]", "]", ")", "\n", "", "", "def", "__len__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.PrepareUCIData.__len__": [[33, 35], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.PrepareUCIData.__getitem__": [[36, 38], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "X", "[", "idx", "]", ",", "self", ".", "y", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.Dataset.sample": [[94, 96], ["None"], "methods", ["None"], ["    ", "def", "sample", "(", "self", ",", "n", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.Dataset.sample_two": [[97, 99], ["None"], "methods", ["None"], ["", "def", "sample_two", "(", "self", ",", "n1", ",", "n2", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.ToyDataset.sample": [[103, 105], ["None"], "methods", ["None"], ["    ", "def", "sample", "(", "self", ",", "n", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.ToyDataset.sample_two": [[106, 108], ["dataloader.ToyDataset.sample", "dataloader.ToyDataset.sample"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.FlowSequential.sample", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.FlowSequential.sample"], ["", "def", "sample_two", "(", "self", ",", "n1", ",", "n2", ")", ":", "\n", "        ", "return", "self", ".", "sample", "(", "n1", ")", ",", "self", ".", "sample", "(", "n2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.ToyDataset.logpdf_multiple": [[109, 111], ["None"], "methods", ["None"], ["", "def", "logpdf_multiple", "(", "self", ",", "x", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.ToyDataset.logpdf": [[112, 114], ["support_1d"], "methods", ["None"], ["", "def", "logpdf", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "support_1d", "(", "self", ".", "logpdf_multiple", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.ToyDataset.log_pdf": [[115, 117], ["support_1d"], "methods", ["None"], ["", "def", "log_pdf", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "support_1d", "(", "self", ".", "logpdf_multiple", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.ToyDataset.log_pdf_multile": [[118, 120], ["dataloader.ToyDataset.logpdf_multiple"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.RealToy.logpdf_multiple"], ["", "def", "log_pdf_multile", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "logpdf_multiple", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.ToyDataset.dlogpdf": [[122, 124], ["dataloader.ToyDataset.grad_multiple"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.RealToy.grad_multiple"], ["", "def", "dlogpdf", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "grad_multiple", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.ToyDataset.grad_multiple": [[125, 127], ["None"], "methods", ["None"], ["", "def", "grad_multiple", "(", "self", ",", "x", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.ToyDataset.grad": [[128, 130], ["dataloader.ToyDataset.grad_multiple"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.RealToy.grad_multiple"], ["", "def", "grad", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "grad_multiple", "(", "self", ".", "logpdf", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.ToyDataset.score": [[131, 133], ["dataloader.ToyDataset.grad_multiple"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.RealToy.grad_multiple"], ["", "def", "score", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "-", "0.5", "*", "self", ".", "grad_multiple", "(", "x", "**", "2", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.RealDataset.__init__": [[148, 244], ["numpy.random.seed", "numpy.random.shuffle", "dataloader.RealDataset.data.copy", "min", "dataloader.RealDataset.update_data", "range", "numpy.random.permutation", "numpy.arange", "dataloader.apply_whiten", "numpy.eye", "numpy.zeros", "numpy.ones", "numpy.random.randn", "dataloader.apply_itanh", "int", "int", "range", "max", "dataloader.RealDataset.update_data", "dataloader.RealDataset.fit_kde", "numpy.median", "int", "numpy.diff", "numpy.floor", "numpy.unique", "numpy.random.rand"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.RealDataset.update_data", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.apply_whiten", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.apply_itanh", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.RealDataset.update_data", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.RealDataset.fit_kde"], ["    ", "def", "__init__", "(", "self", ",", "idx", "=", "None", ",", "N", "=", "None", ",", "valid_thresh", "=", "0.0", ",", "noise_std", "=", "0.0", ",", "nkde", "=", "0", ",", "\n", "ntest", "=", "None", ",", "seed", "=", "0", ",", "permute", "=", "True", ",", "itanh", "=", "False", ",", "whiten", "=", "True", ",", "dequantise", "=", "False", ",", "\n", "N_train", "=", "None", ")", ":", "\n", "\n", "        ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "self", ".", "data", ")", "\n", "\n", "if", "idx", "is", "not", "None", ":", "\n", "            ", "self", ".", "data", "=", "self", ".", "data", "[", ":", ",", "idx", "]", "\n", "", "if", "N", "is", "not", "None", ":", "\n", "            ", "self", ".", "data", "=", "self", ".", "data", "[", ":", "N", "]", "\n", "", "else", ":", "\n", "            ", "N", "=", "self", ".", "data", ".", "shape", "[", "0", "]", "\n", "self", ".", "data", "=", "self", ".", "data", "[", ":", "N", "]", "\n", "\n", "", "if", "dequantise", ":", "\n", "            ", "for", "d", "in", "range", "(", "self", ".", "data", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "diff", "=", "np", ".", "median", "(", "np", ".", "diff", "(", "np", ".", "unique", "(", "self", ".", "data", "[", ":", ",", "d", "]", ")", ")", ")", "\n", "n", "=", "self", ".", "data", ".", "shape", "[", "0", "]", "\n", "self", ".", "data", "[", ":", ",", "d", "]", "+=", "(", "np", ".", "random", ".", "rand", "(", "n", ")", "*", "2", "-", "1", ")", "*", "diff", "*", "1", "\n", "\n", "", "", "self", ".", "nround", "=", "0", "\n", "self", ".", "pointer", "=", "0", "\n", "\n", "self", ".", "itanh", "=", "itanh", "\n", "self", ".", "whiten", "=", "whiten", "\n", "\n", "self", ".", "idx", "=", "idx", "\n", "self", ".", "noise_std", "=", "noise_std", "\n", "\n", "if", "permute", ":", "\n", "            ", "idx", "=", "np", ".", "random", ".", "permutation", "(", "self", ".", "data", ".", "shape", "[", "1", "]", ")", "\n", "self", ".", "data", "=", "self", ".", "data", "[", ":", ",", "idx", "]", "\n", "", "else", ":", "\n", "            ", "idx", "=", "np", ".", "arange", "(", "self", ".", "data", ".", "shape", "[", "1", "]", ")", "\n", "\n", "", "if", "whiten", ":", "\n", "            ", "self", ".", "data", ",", "self", ".", "W", ",", "self", ".", "mean", ",", "self", ".", "s", "=", "apply_whiten", "(", "self", ".", "data", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "W", "=", "np", ".", "eye", "(", "self", ".", "data", ".", "shape", "[", "1", "]", ")", "\n", "self", ".", "mean", "=", "np", ".", "zeros", "(", "self", ".", "data", ".", "shape", "[", "1", "]", ")", "\n", "self", ".", "s", "=", "np", ".", "ones", "(", "self", ".", "data", ".", "shape", "[", "1", "]", ")", "\n", "\n", "", "self", ".", "data", "+=", "np", ".", "random", ".", "randn", "(", "*", "self", ".", "data", ".", "shape", ")", "*", "noise_std", "\n", "\n", "if", "itanh", ":", "\n", "            ", "self", ".", "data", ",", "self", ".", "ptp", ",", "self", ".", "min", ",", "self", ".", "mean2", "=", "apply_itanh", "(", "self", ".", "data", ")", "\n", "\n", "", "if", "ntest", "is", "None", ":", "\n", "            ", "self", ".", "ntest", "=", "int", "(", "N", "*", "0.1", ")", "\n", "ntest", "=", "self", ".", "ntest", "\n", "", "else", ":", "\n", "            ", "self", ".", "ntest", "=", "ntest", "\n", "\n", "", "self", ".", "all_data", "=", "self", ".", "data", ".", "copy", "(", ")", "\n", "if", "ntest", "==", "0", ":", "\n", "            ", "self", ".", "test_data", "=", "self", ".", "all_data", "[", ":", "0", "]", "\n", "self", ".", "data", "=", "self", ".", "all_data", "[", ":", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "test_data", "=", "self", ".", "all_data", "[", "-", "ntest", ":", "]", "\n", "self", ".", "data", "=", "self", ".", "all_data", "[", ":", "-", "ntest", "]", "\n", "\n", "", "nvalid", "=", "min", "(", "int", "(", "self", ".", "data", ".", "shape", "[", "0", "]", "*", "0.1", ")", ",", "1000", ")", "\n", "self", ".", "nvalid", "=", "nvalid", "\n", "self", ".", "valid_data", "=", "self", ".", "data", "[", "-", "nvalid", ":", "]", "\n", "self", ".", "data", "=", "self", ".", "data", "[", ":", "-", "nvalid", "]", "\n", "\n", "n", "=", "self", ".", "data", ".", "shape", "[", "0", "]", "\n", "self", ".", "data", "=", "self", ".", "data", "[", ":", "n", "]", "\n", "\n", "self", ".", "N", ",", "self", ".", "D", "=", "self", ".", "data", ".", "shape", "\n", "self", ".", "valid_thresh", "=", "valid_thresh", "\n", "self", ".", "update_data", "(", ")", "\n", "\n", "if", "idx", "is", "None", ":", "\n", "            ", "self", ".", "idx", "=", "range", "(", "self", ".", "D", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "idx", "=", "idx", "\n", "\n", "\n", "", "if", "N_train", "is", "not", "None", ":", "\n", "\n", "            ", "self", ".", "N_prop", "=", "N_train", "*", "1.0", "/", "self", ".", "N", "\n", "ndata", "=", "N_train", "\n", "self", ".", "data", "=", "self", ".", "data", "[", ":", "ndata", "]", "\n", "\n", "nvalid", "=", "max", "(", "300", ",", "int", "(", "np", ".", "floor", "(", "self", ".", "nvalid", "*", "self", ".", "N_prop", ")", ")", ")", "\n", "self", ".", "valid_data", "=", "self", ".", "valid_data", "[", ":", "nvalid", "]", "\n", "self", ".", "update_data", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "N_prop", "=", "None", "\n", "\n", "\n", "", "self", ".", "nkde", "=", "nkde", "\n", "if", "nkde", ":", "\n", "            ", "self", ".", "kde_logp", ",", "self", ".", "valid_kde_logp", "=", "self", ".", "fit_kde", "(", "nkde", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.RealDataset.fit_kde": [[245, 257], ["sklearn.model_selection.GridSearchCV", "sklearn.model_selection.GridSearchCV.fit", "kde.score_samples", "kde.score_samples", "numpy.logspace", "sklearn.neighbors.KernelDensity"], "methods", ["None"], ["", "", "def", "fit_kde", "(", "self", ",", "ntrain", ")", ":", "\n", "\n", "# use grid search cross-validation to optimize the bandwidth", "\n", "        ", "params", "=", "{", "'bandwidth'", ":", "np", ".", "logspace", "(", "-", "1", ",", "1", ",", "20", ")", "}", "\n", "grid", "=", "GridSearchCV", "(", "KernelDensity", "(", ")", ",", "params", ")", "\n", "grid", ".", "fit", "(", "self", ".", "data", "[", ":", "ntrain", "]", ")", "\n", "\n", "kde", "=", "grid", ".", "best_estimator_", "\n", "kde_logp", "=", "kde", ".", "score_samples", "(", "self", ".", "data", ")", "\n", "valid_kde_logp", "=", "kde", ".", "score_samples", "(", "self", ".", "valid_data", ")", "\n", "self", ".", "kde", "=", "kde", "\n", "return", "kde_logp", ",", "valid_kde_logp", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.RealDataset.update_data": [[258, 265], ["sklearn.metrics.pairwise.euclidean_distances"], "methods", ["None"], ["", "def", "update_data", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "N", "<", "10", "**", "4", ":", "\n", "            ", "self", ".", "close_mat", "=", "euclidean_distances", "(", "self", ".", "data", ")", ">", "self", ".", "valid_thresh", "\n", "", "self", ".", "N", "=", "self", ".", "data", ".", "shape", "[", "0", "]", "\n", "self", ".", "nvalid", "=", "self", ".", "valid_data", ".", "shape", "[", "0", "]", "\n", "self", ".", "ntest", "=", "self", ".", "test_data", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.RealDataset.valid_idx": [[266, 269], ["numpy.where", "numpy.all"], "methods", ["None"], ["", "def", "valid_idx", "(", "self", ",", "idx", ")", ":", "\n", "\n", "        ", "return", "np", ".", "where", "(", "np", ".", "all", "(", "self", ".", "close_mat", "[", "idx", "]", ",", "0", ")", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.RealDataset.sample": [[270, 277], ["min", "numpy.random.choice"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "n", ",", "add_noise", "=", "False", ")", ":", "\n", "\n", "        ", "n", "=", "min", "(", "n", ",", "self", ".", "N", ")", "\n", "idx", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "N", ",", "n", ",", "replace", "=", "False", ")", "\n", "d", "=", "self", ".", "data", "[", "idx", "]", "\n", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.RealDataset.sample_two": [[278, 299], ["numpy.random.choice", "dataloader.RealDataset.valid_idx", "numpy.random.choice", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.RealDataset.valid_idx"], ["", "def", "sample_two", "(", "self", ",", "n1", ",", "n2", ",", "add_noise", "=", "False", ")", ":", "\n", "\n", "\n", "        ", "if", "self", ".", "N", "<", "10", "**", "4", ":", "\n", "\n", "            ", "idx", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "N", ",", "n1", ",", "replace", "=", "False", ")", "\n", "s1", "=", "self", ".", "data", "[", "idx", "]", "\n", "\n", "valid_idx", "=", "self", ".", "valid_idx", "(", "idx", ")", "\n", "idx", "=", "np", ".", "random", ".", "choice", "(", "valid_idx", ",", "n2", ")", "\n", "s2", "=", "self", ".", "data", "[", "idx", "]", "\n", "\n", "", "else", ":", "\n", "\n", "            ", "n", "=", "n1", "+", "n2", "\n", "idx", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "N", ",", "n", ",", "replace", "=", "True", ")", "\n", "s", "=", "self", ".", "data", "[", "idx", "]", "\n", "s1", "=", "s", "[", ":", "n1", "]", "\n", "s2", "=", "s", "[", "n1", ":", "]", "\n", "\n", "", "return", "s1", ",", "s2", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.RealDataset.stream": [[300, 310], ["numpy.take", "dataloader.RealDataset.increment_pointer", "range", "numpy.take", "range"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.RealDataset.increment_pointer"], ["", "def", "stream", "(", "self", ",", "n", ",", "add_noise", "=", "False", ")", ":", "\n", "\n", "        ", "d", "=", "np", ".", "take", "(", "self", ".", "data", ",", "range", "(", "self", ".", "pointer", ",", "self", ".", "pointer", "+", "n", ")", ",", "mode", "=", "\"wrap\"", ",", "axis", "=", "0", ")", "\n", "if", "self", ".", "nkde", ":", "\n", "            ", "p", "=", "np", ".", "take", "(", "self", ".", "kde_logp", ",", "range", "(", "self", ".", "pointer", ",", "self", ".", "pointer", "+", "n", ")", ",", "mode", "=", "\"wrap\"", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "p", "=", "None", "\n", "", "self", ".", "increment_pointer", "(", "n", ")", "\n", "\n", "return", "d", ",", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.RealDataset.stream_two": [[311, 328], ["numpy.take", "dataloader.RealDataset.increment_pointer", "range", "numpy.take", "range"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.RealDataset.increment_pointer"], ["", "def", "stream_two", "(", "self", ",", "n1", ",", "n2", ",", "add_noise", "=", "False", ")", ":", "\n", "\n", "        ", "n", "=", "n1", "+", "n2", "\n", "d", "=", "np", ".", "take", "(", "self", ".", "data", ",", "range", "(", "self", ".", "pointer", ",", "self", ".", "pointer", "+", "n", ")", ",", "mode", "=", "\"wrap\"", ",", "axis", "=", "0", ")", "\n", "\n", "s1", "=", "d", "[", ":", "n1", "]", "\n", "s2", "=", "d", "[", "n1", ":", "]", "\n", "if", "self", ".", "nkde", ":", "\n", "            ", "p", "=", "np", ".", "take", "(", "self", ".", "kde_logp", ",", "range", "(", "self", ".", "pointer", ",", "self", ".", "pointer", "+", "n", ")", ",", "mode", "=", "\"wrap\"", ",", "axis", "=", "0", ")", "\n", "p1", "=", "p", "[", ":", "n1", "]", "\n", "p2", "=", "p", "[", "n1", ":", "]", "\n", "", "else", ":", "\n", "            ", "p1", ",", "p2", "=", "None", ",", "None", "\n", "\n", "", "self", ".", "increment_pointer", "(", "n", ")", "\n", "\n", "return", "s1", ",", "s2", ",", "p1", ",", "p2", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.RealDataset.increment_pointer": [[329, 338], ["numpy.random.permutation"], "methods", ["None"], ["", "def", "increment_pointer", "(", "self", ",", "n", ")", ":", "\n", "\n", "        ", "self", ".", "pointer", "+=", "n", "\n", "if", "self", ".", "pointer", "/", "self", ".", "N", "-", "self", ".", "nround", ">", "0", ":", "\n", "            ", "self", ".", "nround", "+=", "1", "\n", "idx", "=", "np", ".", "random", ".", "permutation", "(", "self", ".", "data", ".", "shape", "[", "0", "]", ")", "\n", "self", ".", "data", "=", "self", ".", "data", "[", "idx", "]", "\n", "if", "self", ".", "nkde", ":", "\n", "                ", "self", ".", "kde_logp", "=", "self", ".", "kde_logp", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.RealDataset.itrans": [[339, 350], ["dataloader.inv_itanh", "dataloader.inv_whiten", "numpy.argsort"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.inv_itanh", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.inv_whiten"], ["", "", "", "def", "itrans", "(", "self", ",", "data", ")", ":", "\n", "\n", "        ", "if", "self", ".", "itanh", ":", "\n", "            ", "data", "=", "inv_itanh", "(", "data", ",", "self", ".", "ptp", ",", "self", ".", "min", ",", "self", ".", "mean2", ")", "\n", "\n", "", "if", "self", ".", "whiten", ":", "\n", "            ", "data", "=", "inv_whiten", "(", "data", ",", "self", ".", "W", ",", "self", ".", "mean", ")", "\n", "\n", "", "data", "=", "data", "[", ":", ",", "np", ".", "argsort", "(", "self", ".", "idx", ")", "]", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.RealDataset.trans": [[351, 359], ["None"], "methods", ["None"], ["", "def", "trans", "(", "self", ",", "data", ")", ":", "\n", "# assuming only whitening ", "\n", "\n", "        ", "data", "=", "data", "[", ":", ",", "self", ".", "idx", "]", "\n", "if", "self", ".", "whiten", ":", "\n", "            ", "data", "=", "(", "data", "-", "self", ".", "mean", ")", ".", "dot", "(", "self", ".", "W", ")", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.WhiteWine.__init__": [[362, 367], ["dataloader.RealDataset.__init__", "numpy.loadtxt"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "data", "=", "np", ".", "loadtxt", "(", "\"data/winequality-white.csv\"", ",", "delimiter", "=", "\";\"", ",", "skiprows", "=", "1", ")", "[", ":", ",", ":", "-", "1", "]", "\n", "self", ".", "name", "=", "\"WhiteWine\"", "\n", "\n", "super", "(", "WhiteWine", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.RedWine.__init__": [[370, 375], ["dataloader.RealDataset.__init__", "numpy.loadtxt"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "data", "=", "np", ".", "loadtxt", "(", "\"data/winequality-red.csv\"", ",", "delimiter", "=", "\";\"", ",", "skiprows", "=", "1", ")", "[", ":", ",", ":", "-", "1", "]", "\n", "self", ".", "name", "=", "\"RedWine\"", "\n", "\n", "super", "(", "RedWine", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.HepMass.__init__": [[378, 385], ["numpy.delete", "dataloader.RealDataset.__init__", "numpy.load"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "data", "=", "np", ".", "load", "(", "\"data/hepmass.npz\"", ")", "[", "\"data\"", "]", "\n", "self", ".", "data", "=", "self", ".", "data", "[", "self", ".", "data", "[", ":", ",", "0", "]", "==", "1", ",", ":", "]", "\n", "self", ".", "data", "=", "np", ".", "delete", "(", "self", ".", "data", ",", "[", "0", ",", "6", ",", "10", ",", "14", ",", "18", ",", "22", "]", ",", "axis", "=", "1", ")", "\n", "self", ".", "name", "=", "\"HepMass\"", "\n", "\n", "super", "(", "HepMass", ",", "self", ")", ".", "__init__", "(", "ntest", "=", "174900", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.MiniBoone.__init__": [[388, 393], ["numpy.load", "dataloader.RealDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "data", "=", "np", ".", "load", "(", "\"data/miniboone.npy\"", ")", "\n", "self", ".", "name", "=", "\"MiniBoone\"", "\n", "\n", "super", "(", "MiniBoone", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.Parkinsons.__init__": [[395, 401], ["dataloader.clean_data", "dataloader.RealDataset.__init__", "numpy.loadtxt"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.clean_data", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cor", "=", "0.98", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "data", "=", "np", ".", "loadtxt", "(", "\"data/parkinsons_updrs.data\"", ",", "delimiter", "=", "\",\"", ",", "skiprows", "=", "1", ")", "[", ":", ",", "3", ":", "]", "\n", "self", ".", "name", "=", "\"Parkinsons\"", "\n", "self", ".", "data", "=", "clean_data", "(", "self", ".", "data", ",", "cor", "=", "cor", ")", "\n", "\n", "super", "(", "Parkinsons", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.Gas.__init__": [[403, 409], ["dataloader.clean_data", "dataloader.RealDataset.__init__", "numpy.array", "numpy.load"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.clean_data", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cor", "=", "0.98", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "data", "=", "np", ".", "array", "(", "np", ".", "load", "(", "\"data/ethylene_CO.pickle\"", ")", ")", "[", ":", ",", "3", ":", "]", "\n", "self", ".", "name", "=", "\"Gas\"", "\n", "self", ".", "data", "=", "clean_data", "(", "self", ".", "data", ",", "cor", "=", "cor", ")", "\n", "\n", "super", "(", "Gas", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.Power.__init__": [[411, 417], ["numpy.load", "numpy.delete", "dataloader.RealDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cor", "=", "0.98", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "data", "=", "np", ".", "load", "(", "\"data/power.npy\"", ")", "\n", "self", ".", "name", "=", "\"Owerp\"", "\n", "self", ".", "data", "=", "np", ".", "delete", "(", "self", ".", "data", ",", "[", "1", ",", "3", "]", ",", "axis", "=", "1", ")", "\n", "\n", "super", "(", "Power", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.Mixture.__init__": [[420, 460], ["sklearn.cluster.SpectralClustering", "sklearn.cluster.SpectralClustering.fit_predict", "hasattr", "hasattr", "hasattr", "hasattr", "hasattr", "hasattr", "range", "dataloader.ArrayDataset", "dataloader.Mixture.ps.append", "dataloader.Mixture.props.append", "numpy.median", "scipy.spatial.distance.pdist", "numpy.sum"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "p", ",", "n_clusters", ",", "seed", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "self", ".", "n_clusters", "=", "n_clusters", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "D", "=", "p", ".", "D", "\n", "data", "=", "np", ".", "r_", "[", "p", ".", "data", ",", "p", ".", "valid_data", "]", "\n", "gamma", "=", "1.0", "/", "2.0", "/", "np", ".", "median", "(", "pdist", "(", "data", "[", ":", "1000", "]", ")", ")", "**", "2", "\n", "cluster", "=", "SpectralClustering", "(", "gamma", "=", "gamma", ",", "n_clusters", "=", "n_clusters", ",", "random_state", "=", "seed", ",", "\n", "eigen_solver", "=", "\"arpack\"", ",", "\n", "affinity", "=", "\"nearest_neighbors\"", ")", "\n", "y", "=", "cluster", ".", "fit_predict", "(", "data", ")", "\n", "self", ".", "ps", "=", "[", "]", "\n", "self", ".", "props", "=", "[", "]", "\n", "kwargs", "[", "\"permute\"", "]", "=", "False", "\n", "kwargs", "[", "\"ntest\"", "]", "=", "0", "\n", "kwargs", "[", "\"whiten\"", "]", "=", "True", "\n", "kwargs", "[", "\"itanh\"", "]", "=", "False", "\n", "self", ".", "name", "=", "p", ".", "name", "+", "\"_mix\"", "\n", "\n", "self", ".", "test_data", "=", "p", ".", "test_data", "\n", "self", ".", "ntest", "=", "p", ".", "test_data", ".", "shape", "[", "0", "]", "\n", "if", "hasattr", "(", "p", ",", "\"has_grad\"", ")", ":", "\n", "            ", "self", ".", "has_grad", "=", "p", ".", "has_grad", "\n", "", "if", "hasattr", "(", "p", ",", "\"grad_multiple\"", ")", ":", "\n", "            ", "self", ".", "grad_multiple", "=", "p", ".", "grad_multiple", "\n", "", "if", "hasattr", "(", "p", ",", "\"logpdf_multiple\"", ")", ":", "\n", "            ", "self", ".", "logpdf_multiple", "=", "p", ".", "logpdf_multiple", "\n", "", "if", "hasattr", "(", "p", ",", "\"sample\"", ")", ":", "\n", "            ", "self", ".", "sample", "=", "p", ".", "sample", "\n", "", "if", "hasattr", "(", "p", ",", "\"noise_std\"", ")", ":", "\n", "            ", "self", ".", "noise_std", "=", "p", ".", "noise_std", "\n", "", "if", "hasattr", "(", "p", ",", "\"idx\"", ")", ":", "\n", "            ", "self", ".", "idx", "=", "p", ".", "idx", "\n", "\n", "", "for", "i", "in", "range", "(", "n_clusters", ")", ":", "\n", "            ", "d", "=", "data", "[", "y", "==", "i", "]", "\n", "p_i", "=", "ArrayDataset", "(", "d", ",", "p", ".", "name", "+", "\"_%d\"", "%", "i", ",", "*", "args", ",", "seed", "=", "seed", ",", "**", "kwargs", ")", "\n", "prop", "=", "np", ".", "sum", "(", "y", "==", "i", ")", "*", "1.0", "/", "data", ".", "shape", "[", "0", "]", "\n", "self", ".", "ps", ".", "append", "(", "p_i", ")", "\n", "self", ".", "props", ".", "append", "(", "prop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.ArrayDataset.__init__": [[464, 468], ["dataloader.RealDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__"], ["    ", "def", "__init__", "(", "self", ",", "data", ",", "name", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "data", "=", "data", "\n", "self", ".", "name", "=", "name", "\n", "super", "(", "ArrayDataset", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.RealToy.__init__": [[471, 499], ["name.title.title.title", "numpy.random.seed", "d.sample", "numpy.dot", "dataloader.RealDataset.__init__", "scipy.linalg.expm", "numpy.eye", "globals", "numpy.random.rand", "numpy.triu_indices_from"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.FlowSequential.sample", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "D", ",", "N", "=", "10000", ",", "rotate", "=", "False", ",", "data_args", "=", "{", "}", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "self", ".", "name", "=", "name", "\n", "name", "=", "name", ".", "title", "(", ")", "\n", "d", "=", "globals", "(", ")", "[", "name", "]", "(", "D", "=", "D", ",", "**", "data_args", ")", "\n", "self", ".", "dist", "=", "d", "\n", "self", ".", "has_grad", "=", "d", ".", "has_grad", "\n", "\n", "np", ".", "random", ".", "seed", "(", "kwargs", "[", "\"seed\"", "]", ")", "\n", "data", "=", "d", ".", "sample", "(", "N", ")", "\n", "\n", "if", "rotate", ":", "\n", "\n", "            ", "M", "=", "np", ".", "random", ".", "rand", "(", "D", ",", "D", ")", "*", "10", "\n", "M", "[", "np", ".", "triu_indices_from", "(", "M", ",", "k", "=", "1", ")", "]", "=", "0", "\n", "M", "=", "M", "-", "M", ".", "T", "\n", "M", "=", "expm", "(", "M", ")", "\n", "\n", "self", ".", "M", "=", "M", "\n", "", "else", ":", "\n", "            ", "self", ".", "M", "=", "np", ".", "eye", "(", "D", ")", "\n", "", "self", ".", "data", "=", "np", ".", "dot", "(", "data", ",", "self", ".", "M", ".", "T", ")", "\n", "\n", "kwargs", "[", "\"whiten\"", "]", "=", "False", "\n", "kwargs", "[", "\"itanh\"", "]", "=", "False", "\n", "kwargs", "[", "\"permute\"", "]", "=", "False", "\n", "\n", "super", "(", "RealToy", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.RealToy.logpdf_multiple": [[500, 503], ["dataloader.RealToy.dist.logpdf_multiple", "dataloader.RealToy.itrans"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.RealToy.logpdf_multiple", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.RealToy.itrans"], ["", "def", "logpdf_multiple", "(", "self", ",", "data", ")", ":", "\n", "\n", "        ", "return", "self", ".", "dist", ".", "logpdf_multiple", "(", "self", ".", "itrans", "(", "data", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.RealToy.grad_multiple": [[504, 506], ["dataloader.RealToy.dist.grad_multiple().dot", "dataloader.RealToy.dist.grad_multiple", "dataloader.RealToy.itrans"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.RealToy.grad_multiple", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.RealToy.itrans"], ["", "def", "grad_multiple", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "self", ".", "dist", ".", "grad_multiple", "(", "self", ".", "itrans", "(", "data", ")", ")", ".", "dot", "(", "self", ".", "M", ".", "T", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.RealToy.itrans": [[507, 520], ["numpy.dot", "dataloader.inv_itanh", "dataloader.inv_whiten", "numpy.argsort"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.inv_itanh", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.inv_whiten"], ["", "def", "itrans", "(", "self", ",", "data", ")", ":", "\n", "\n", "        ", "if", "self", ".", "itanh", ":", "\n", "            ", "data", "=", "inv_itanh", "(", "data", ",", "self", ".", "ptp", ",", "self", ".", "min", ",", "self", ".", "mean2", ")", "\n", "\n", "", "if", "self", ".", "whiten", ":", "\n", "            ", "data", "=", "inv_whiten", "(", "data", ",", "self", ".", "W", ",", "self", ".", "mean", ")", "\n", "\n", "", "data", "=", "data", "[", ":", ",", "np", ".", "argsort", "(", "self", ".", "idx", ")", "]", "\n", "\n", "data", "=", "np", ".", "dot", "(", "data", ",", "self", ".", "M", ")", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.RealToy.score": [[521, 523], ["numpy.sum", "dataloader.RealToy.grad_multiple"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.RealToy.grad_multiple"], ["", "def", "score", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "-", "0.5", "*", "np", ".", "sum", "(", "self", ".", "grad_multiple", "(", "x", ")", "**", "2", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.apply_whiten": [[40, 48], ["np.dot.mean", "numpy.linalg.svd", "numpy.dot", "np.dot.mean", "numpy.sqrt"], "function", ["None"], ["", "", "def", "apply_whiten", "(", "data", ")", ":", "\n", "\n", "    ", "mean", "=", "data", ".", "mean", "(", "0", ")", "\n", "data", "=", "data", "-", "data", ".", "mean", "(", "0", ")", "\n", "u", ",", "s", ",", "vt", "=", "np", ".", "linalg", ".", "svd", "(", "data", "[", ":", "10", "**", "4", "]", ")", "\n", "W", "=", "vt", ".", "T", "/", "s", "*", "np", ".", "sqrt", "(", "u", ".", "shape", "[", "0", "]", ")", "\n", "data", "=", "np", ".", "dot", "(", "data", ",", "W", ")", "\n", "return", "data", ",", "W", ",", "mean", ",", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.inv_whiten": [[49, 51], ["data.dot", "numpy.linalg.inv"], "function", ["None"], ["", "def", "inv_whiten", "(", "data", ",", "W", ",", "mean", ")", ":", "\n", "    ", "return", "data", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "W", ")", ")", "+", "mean", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.apply_scale": [[52, 60], ["data.mean", "data.std", "data.mean"], "function", ["None"], ["", "def", "apply_scale", "(", "data", ")", ":", "\n", "\n", "    ", "mean", "=", "data", ".", "mean", "(", "0", ")", "\n", "data", "=", "data", "-", "data", ".", "mean", "(", "0", ")", "\n", "std", "=", "data", ".", "std", "(", "0", ")", "\n", "data", "/=", "std", "\n", "\n", "return", "data", ",", "std", ",", "mean", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.inv_scale": [[61, 63], ["None"], "function", ["None"], ["", "def", "inv_scale", "(", "data", ",", "std", ",", "mean", ")", ":", "\n", "    ", "return", "data", "*", "std", "+", "mean", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.apply_itanh": [[64, 78], ["np.arctanh.min", "np.arctanh.ptp", "numpy.arctanh", "np.arctanh.mean"], "function", ["None"], ["", "def", "apply_itanh", "(", "data", ")", ":", "\n", "\n", "    ", "m", "=", "data", ".", "min", "(", "axis", "=", "0", ")", "\n", "data", "-=", "m", "\n", "ptp", "=", "data", ".", "ptp", "(", "axis", "=", "0", ")", "\n", "data", "/=", "ptp", "/", "0.98", "/", "2", "\n", "data", "-=", "0.98", "\n", "\n", "data", "=", "np", ".", "arctanh", "(", "data", ")", "\n", "\n", "m2", "=", "data", ".", "mean", "(", "0", ")", "\n", "data", "-=", "m2", "\n", "\n", "return", "data", ",", "ptp", ",", "m", ",", "m2", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.inv_itanh": [[79, 88], ["numpy.tanh"], "function", ["None"], ["", "def", "inv_itanh", "(", "data", ",", "ptp", ",", "m", ",", "m2", ")", ":", "\n", "\n", "    ", "data", "+=", "m2", "\n", "data", "=", "np", ".", "tanh", "(", "data", ")", "\n", "data", "+=", "0.98", "\n", "data", "*=", "ptp", "/", "0.98", "/", "2", "\n", "data", "+=", "m", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.clean_data": [[134, 145], ["numpy.abs", "numpy.sum", "numpy.any", "numpy.corrcoef", "numpy.delete", "numpy.corrcoef", "numpy.sum", "numpy.where"], "function", ["None"], ["", "", "def", "clean_data", "(", "data", ",", "cor", "=", "0.98", ")", ":", "\n", "\n", "    ", "C", "=", "np", ".", "abs", "(", "np", ".", "corrcoef", "(", "data", ".", "T", ")", ")", "\n", "B", "=", "np", ".", "sum", "(", "C", ">", "cor", ",", "axis", "=", "1", ")", "\n", "while", "np", ".", "any", "(", "B", ">", "1", ")", ":", "\n", "        ", "col_to_remove", "=", "np", ".", "where", "(", "B", ">", "1", ")", "[", "0", "]", "[", "0", "]", "\n", "data", "=", "np", ".", "delete", "(", "data", ",", "col_to_remove", ",", "axis", "=", "1", ")", "\n", "C", "=", "np", ".", "corrcoef", "(", "data", ".", "T", ")", "\n", "B", "=", "np", ".", "sum", "(", "C", ">", "cor", ",", "axis", "=", "1", ")", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.dataloader.load_data": [[524, 546], ["dname.lower.lower", "dataloader.RedWine", "dataloader.WhiteWine", "dataloader.Parkinsons", "dataloader.Gas", "dataloader.Power", "dataloader.HepMass", "dataloader.MiniBoone", "dataloader.RealToy", "dname.lower.title"], "function", ["None"], ["", "", "def", "load_data", "(", "dname", ",", "noise_std", "=", "0.0", ",", "seed", "=", "1", ",", "D", "=", "None", ",", "data_args", "=", "{", "}", ",", "**", "kwargs", ")", ":", "\n", "    ", "dname", "=", "dname", ".", "lower", "(", ")", "\n", "if", "dname", "[", "0", ":", "2", "]", "==", "\"re\"", ":", "\n", "        ", "kwargs", "[", "\"dequantise\"", "]", "=", "True", "\n", "p", "=", "RedWine", "(", "noise_std", "=", "noise_std", ",", "seed", "=", "seed", ",", "**", "kwargs", ")", "\n", "", "elif", "dname", "[", "0", "]", "==", "\"w\"", ":", "\n", "        ", "kwargs", "[", "\"dequantise\"", "]", "=", "True", "\n", "p", "=", "WhiteWine", "(", "noise_std", "=", "noise_std", ",", "seed", "=", "seed", ",", "**", "kwargs", ")", "\n", "", "elif", "dname", "[", "0", "]", "==", "'p'", ":", "\n", "        ", "p", "=", "Parkinsons", "(", "noise_std", "=", "noise_std", ",", "seed", "=", "seed", ",", "**", "kwargs", ")", "\n", "", "elif", "dname", "==", "'gas'", ":", "\n", "        ", "p", "=", "Gas", "(", "noise_std", "=", "noise_std", ",", "seed", "=", "seed", ",", "**", "kwargs", ")", "\n", "", "elif", "dname", "[", "0", "]", "==", "'o'", ":", "\n", "        ", "p", "=", "Power", "(", "noise_std", "=", "noise_std", ",", "seed", "=", "seed", ",", "**", "kwargs", ")", "\n", "", "elif", "dname", "[", "0", "]", "==", "'h'", ":", "\n", "        ", "p", "=", "HepMass", "(", "noise_std", "=", "noise_std", ",", "seed", "=", "seed", ",", "**", "kwargs", ")", "\n", "", "elif", "dname", "[", "0", ":", "2", "]", "==", "'mi'", ":", "\n", "        ", "p", "=", "MiniBoone", "(", "noise_std", "=", "noise_std", ",", "seed", "=", "seed", ",", "**", "kwargs", ")", "\n", "", "elif", "dname", "[", "0", "]", "in", "[", "'d'", ",", "'f'", ",", "'r'", ",", "'s'", ",", "'b'", ",", "'c'", ",", "'g'", ",", "'m'", ",", "'u'", "]", ":", "\n", "        ", "assert", "D", "is", "not", "None", "\n", "p", "=", "RealToy", "(", "dname", ".", "title", "(", ")", ",", "D", "=", "D", ",", "noise_std", "=", "0.0", ",", "ntest", "=", "1000", ",", "seed", "=", "seed", ",", "data_args", "=", "data_args", ",", "**", "kwargs", ")", "\n", "", "return", "p", "\n", "", ""]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.celebA.CelebA.__init__": [[50, 90], ["torchvision.datasets.vision.VisionDataset.__init__", "isinstance", "functools.partial", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "list", "RuntimeError", "celebA.CelebA.download", "celebA.CelebA._check_integrity", "RuntimeError", "functools.partial.", "functools.partial.", "functools.partial.", "functools.partial.", "functools.partial.", "slice", "torchvision.datasets.utils.verify_str_arg", "split.lower"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.celebA.CelebA.download", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.celebA.CelebA._check_integrity"], ["def", "__init__", "(", "self", ",", "root", ",", "split", "=", "\"train\"", ",", "target_type", "=", "\"attr\"", ",", "transform", "=", "None", ",", "\n", "target_transform", "=", "None", ",", "download", "=", "False", ")", ":", "\n", "        ", "import", "pandas", "\n", "super", "(", "CelebA", ",", "self", ")", ".", "__init__", "(", "root", ",", "transform", "=", "transform", ",", "\n", "target_transform", "=", "target_transform", ")", "\n", "self", ".", "split", "=", "split", "\n", "if", "isinstance", "(", "target_type", ",", "list", ")", ":", "\n", "            ", "self", ".", "target_type", "=", "target_type", "\n", "", "else", ":", "\n", "            ", "self", ".", "target_type", "=", "[", "target_type", "]", "\n", "\n", "", "if", "not", "self", ".", "target_type", "and", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "'target_transform is specified but target_type is empty'", ")", "\n", "\n", "", "if", "download", ":", "\n", "            ", "self", ".", "download", "(", ")", "\n", "\n", "", "if", "not", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Dataset not found or corrupted.'", "+", "\n", "' You can use download=True to download it'", ")", "\n", "\n", "", "split_map", "=", "{", "\"train\"", ":", "0", ",", "\"valid\"", ":", "1", ",", "\"test\"", ":", "2", ",", "\"all\"", ":", "None", ",", "}", "\n", "split", "=", "split_map", "[", "verify_str_arg", "(", "split", ".", "lower", "(", ")", ",", "\"split\"", ",", "(", "\"train\"", ",", "\"valid\"", ",", "\"test\"", ",", "\"all\"", ")", ")", "]", "\n", "\n", "fn", "=", "partial", "(", "os", ".", "path", ".", "join", ",", "self", ".", "root", ",", "self", ".", "base_folder", ")", "\n", "splits", "=", "pandas", ".", "read_csv", "(", "fn", "(", "\"list_eval_partition.txt\"", ")", ",", "delim_whitespace", "=", "True", ",", "header", "=", "None", ",", "index_col", "=", "0", ")", "\n", "identity", "=", "pandas", ".", "read_csv", "(", "fn", "(", "\"identity_CelebA.txt\"", ")", ",", "delim_whitespace", "=", "True", ",", "header", "=", "None", ",", "index_col", "=", "0", ")", "\n", "bbox", "=", "pandas", ".", "read_csv", "(", "fn", "(", "\"list_bbox_celeba.txt\"", ")", ",", "delim_whitespace", "=", "True", ",", "header", "=", "1", ",", "index_col", "=", "0", ")", "\n", "landmarks_align", "=", "pandas", ".", "read_csv", "(", "fn", "(", "\"list_landmarks_align_celeba.txt\"", ")", ",", "delim_whitespace", "=", "True", ",", "header", "=", "1", ")", "\n", "attr", "=", "pandas", ".", "read_csv", "(", "fn", "(", "\"list_attr_celeba.txt\"", ")", ",", "delim_whitespace", "=", "True", ",", "header", "=", "1", ")", "\n", "\n", "mask", "=", "slice", "(", "None", ")", "if", "split", "is", "None", "else", "(", "splits", "[", "1", "]", "==", "split", ")", "\n", "\n", "self", ".", "filename", "=", "splits", "[", "mask", "]", ".", "index", ".", "values", "\n", "self", ".", "identity", "=", "torch", ".", "as_tensor", "(", "identity", "[", "mask", "]", ".", "values", ")", "\n", "self", ".", "bbox", "=", "torch", ".", "as_tensor", "(", "bbox", "[", "mask", "]", ".", "values", ")", "\n", "self", ".", "landmarks_align", "=", "torch", ".", "as_tensor", "(", "landmarks_align", "[", "mask", "]", ".", "values", ")", "\n", "self", ".", "attr", "=", "torch", ".", "as_tensor", "(", "attr", "[", "mask", "]", ".", "values", ")", "\n", "self", ".", "attr", "=", "(", "self", ".", "attr", "+", "1", ")", "//", "2", "# map from {-1, 1} to {0, 1}", "\n", "self", ".", "attr_names", "=", "list", "(", "attr", ".", "columns", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.celebA.CelebA._check_integrity": [[91, 102], ["os.path.isdir", "os.path.join", "os.path.splitext", "os.path.join", "torchvision.datasets.utils.check_integrity"], "methods", ["None"], ["", "def", "_check_integrity", "(", "self", ")", ":", "\n", "        ", "for", "(", "_", ",", "md5", ",", "filename", ")", "in", "self", ".", "file_list", ":", "\n", "            ", "fpath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "base_folder", ",", "filename", ")", "\n", "_", ",", "ext", "=", "os", ".", "path", ".", "splitext", "(", "filename", ")", "\n", "# Allow original archive to be deleted (zip and 7z)", "\n", "# Only need the extracted images", "\n", "if", "ext", "not", "in", "[", "\".zip\"", ",", "\".7z\"", "]", "and", "not", "check_integrity", "(", "fpath", ",", "md5", ")", ":", "\n", "                ", "return", "False", "\n", "\n", "# Should check a hash of the images", "\n", "", "", "return", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "base_folder", ",", "\"img_align_celeba\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.celebA.CelebA.download": [[103, 115], ["celebA.CelebA._check_integrity", "print", "torchvision.datasets.utils.download_file_from_google_drive", "zipfile.ZipFile", "f.extractall", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.celebA.CelebA._check_integrity"], ["", "def", "download", "(", "self", ")", ":", "\n", "        ", "import", "zipfile", "\n", "\n", "if", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "print", "(", "'Files already downloaded and verified'", ")", "\n", "return", "\n", "\n", "", "for", "(", "file_id", ",", "md5", ",", "filename", ")", "in", "self", ".", "file_list", ":", "\n", "            ", "download_file_from_google_drive", "(", "file_id", ",", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "base_folder", ")", ",", "filename", ",", "md5", ")", "\n", "\n", "", "with", "zipfile", ".", "ZipFile", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "base_folder", ",", "\"img_align_celeba.zip\"", ")", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "extractall", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "base_folder", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.celebA.CelebA.__getitem__": [[116, 145], ["PIL.Image.open", "os.path.join", "celebA.CelebA.transform", "celebA.CelebA.append", "tuple", "celebA.CelebA.target_transform", "celebA.CelebA.append", "len", "celebA.CelebA.append", "celebA.CelebA.append", "ValueError"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "X", "=", "PIL", ".", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "base_folder", ",", "\"img_align_celeba\"", ",", "self", ".", "filename", "[", "index", "]", ")", ")", "\n", "\n", "target", "=", "[", "]", "\n", "for", "t", "in", "self", ".", "target_type", ":", "\n", "            ", "if", "t", "==", "\"attr\"", ":", "\n", "                ", "target", ".", "append", "(", "self", ".", "attr", "[", "index", ",", ":", "]", ")", "\n", "", "elif", "t", "==", "\"identity\"", ":", "\n", "                ", "target", ".", "append", "(", "self", ".", "identity", "[", "index", ",", "0", "]", ")", "\n", "", "elif", "t", "==", "\"bbox\"", ":", "\n", "                ", "target", ".", "append", "(", "self", ".", "bbox", "[", "index", ",", ":", "]", ")", "\n", "", "elif", "t", "==", "\"landmarks\"", ":", "\n", "                ", "target", ".", "append", "(", "self", ".", "landmarks_align", "[", "index", ",", ":", "]", ")", "\n", "", "else", ":", "\n", "# TODO: refactor with utils.verify_str_arg", "\n", "                ", "raise", "ValueError", "(", "\"Target type \\\"{}\\\" is not recognized.\"", ".", "format", "(", "t", ")", ")", "\n", "\n", "", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "X", "=", "self", ".", "transform", "(", "X", ")", "\n", "\n", "", "if", "target", ":", "\n", "            ", "target", "=", "tuple", "(", "target", ")", "if", "len", "(", "target", ")", ">", "1", "else", "target", "[", "0", "]", "\n", "\n", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "                ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "", "", "else", ":", "\n", "            ", "target", "=", "None", "\n", "\n", "", "return", "X", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.celebA.CelebA.__len__": [[146, 148], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "attr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.utils.celebA.CelebA.extra_repr": [[149, 152], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "lines", "=", "[", "\"Target type: {target_type}\"", ",", "\"Split: {split}\"", "]", "\n", "return", "'\\n'", ".", "join", "(", "lines", ")", ".", "format", "(", "**", "self", ".", "__dict__", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.discriminator.Discriminator.__init__": [[18, 248], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Flatten", "torch.nn.Flatten", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "discriminator.Discriminator.main", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Flatten", "torch.nn.Flatten", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "print", "torch.nn.Sequential", "torch.nn.Sequential", "discriminator.FirstResBlockDiscriminator", "discriminator.ResBlockDiscriminator", "discriminator.ResBlockDiscriminator", "discriminator.ResBlockDiscriminator", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.Flatten", "torch.nn.Flatten", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.Sequential", "torch.nn.Sequential", "NotImplementedError", "discriminator.FirstResBlockDiscriminator", "discriminator.ResBlockDiscriminator", "discriminator.ResBlockDiscriminator", "discriminator.ResBlockDiscriminator", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.Flatten", "torch.nn.Flatten"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.main"], ["    ", "def", "__init__", "(", "self", ",", "nn_type", "=", "'dcgan'", ",", "bn", "=", "False", ",", "skipinit", "=", "False", ",", "no_trunc", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "no_trunc", "=", "no_trunc", "\n", "self", ".", "nn_type", "=", "nn_type", "\n", "self", ".", "max", "=", "10", "\n", "self", ".", "bn", "=", "bn", "\n", "self", ".", "skipinit", "=", "skipinit", "\n", "if", "nn_type", "==", "'dcgan'", ":", "\n", "# adapted from pytorch website", "\n", "# https://pytorch.org/tutorials/beginner/dcgan_faces_tutorial.html#implementation", "\n", "\n", "# nc = number of input channels (input image size square)", "\n", "# ndf = number of filters, state sizes", "\n", "\n", "# defaults", "\n", "            ", "nc", "=", "3", "\n", "ndf", "=", "64", "\n", "leak", "=", "0.2", "\n", "\n", "if", "'nc'", "in", "kwargs", ":", "\n", "                ", "nc", "=", "kwargs", "[", "'nc'", "]", "\n", "", "if", "'ndf'", "in", "kwargs", ":", "\n", "                ", "ndf", "=", "kwargs", "[", "'ndf'", "]", "\n", "", "if", "'leak'", "in", "kwargs", ":", "\n", "                ", "leak", "=", "kwargs", "[", "'leak'", "]", "\n", "\n", "", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "# input is (nc) x 64 x 64", "\n", "# nn.Conv2d(in_channels, out_channels, kernel_size, stride, padding, dilation...)", "\n", "nn", ".", "Conv2d", "(", "nc", ",", "ndf", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "leak", ",", "inplace", "=", "True", ")", ",", "\n", "# state size. (ndf) x 32 x 32", "\n", "nn", ".", "Conv2d", "(", "ndf", ",", "ndf", "*", "2", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ndf", "*", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "leak", ",", "inplace", "=", "True", ")", ",", "\n", "# state size. (ndf*2) x 16 x 16", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "2", ",", "ndf", "*", "4", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ndf", "*", "4", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "leak", ",", "inplace", "=", "True", ")", ",", "\n", "# state size. (ndf*4) x 8 x 8", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "4", ",", "ndf", "*", "8", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ndf", "*", "8", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "leak", ",", "inplace", "=", "True", ")", ",", "\n", "# state size. (ndf*8) x 4 x 4", "\n", "#nn.Conv2d(ndf * 8, 1, 4, 1, 0, bias=False),", "\n", "# change documented at https://github.com/pytorch/examples/issues/486", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "1", ",", "2", ",", "2", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "\n", "", "elif", "nn_type", "==", "'dcgan-ns'", ":", "\n", "# dcgan, but without sigmoid for the last layer", "\n", "            ", "nc", "=", "3", "\n", "ndf", "=", "64", "\n", "leak", "=", "0.2", "\n", "\n", "if", "'nc'", "in", "kwargs", ":", "\n", "                ", "nc", "=", "kwargs", "[", "'nc'", "]", "\n", "", "if", "'ndf'", "in", "kwargs", ":", "\n", "                ", "ndf", "=", "kwargs", "[", "'ndf'", "]", "\n", "", "if", "'leak'", "in", "kwargs", ":", "\n", "                ", "leak", "=", "kwargs", "[", "'leak'", "]", "\n", "\n", "", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "# input is (nc) x 64 x 64", "\n", "# nn.Conv2d(in_channels, out_channels, kernel_size, stride, padding, dilation...)", "\n", "nn", ".", "Conv2d", "(", "nc", ",", "ndf", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "leak", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ndf", ",", "ndf", "*", "2", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ndf", "*", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "leak", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "2", ",", "ndf", "*", "4", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ndf", "*", "4", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "leak", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "4", ",", "ndf", "*", "8", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ndf", "*", "8", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "leak", ",", "inplace", "=", "True", ")", ",", "\n", "# state size. (ndf*8) x 4 x 4", "\n", "#nn.Conv2d(ndf * 8, 1, 4, 1, 0, bias=False),", "\n", "# change documented at https://github.com/pytorch/examples/issues/486", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "1", ",", "2", ",", "2", ",", "0", ",", "bias", "=", "False", ")", "\n", ")", "\n", "\n", "", "elif", "nn_type", "==", "'dcgan-sn'", ":", "\n", "# adapted from https://github.com/christiancosgrove/pytorch-spectral-normalization-gan", "\n", "# dcgan with spectral norm from pytorch", "\n", "\n", "# defaults", "\n", "            ", "nc", "=", "3", "\n", "ndf", "=", "64", "\n", "leak", "=", "0.1", "\n", "w_g", "=", "4", "\n", "\n", "if", "'nc'", "in", "kwargs", ":", "\n", "                ", "nc", "=", "kwargs", "[", "'nc'", "]", "\n", "", "if", "'ndf'", "in", "kwargs", ":", "\n", "                ", "ndf", "=", "kwargs", "[", "'ndf'", "]", "\n", "", "if", "'leak'", "in", "kwargs", ":", "\n", "                ", "leak", "=", "kwargs", "[", "'leak'", "]", "\n", "\n", "", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "# layer 1", "\n", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "nc", ",", "ndf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "leak", ")", ",", "\n", "# layer 2", "\n", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "ndf", ",", "ndf", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "True", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "leak", ")", ",", "\n", "#layer 3", "\n", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "ndf", ",", "ndf", "*", "2", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "leak", ")", ",", "\n", "# layer 4", "\n", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "ndf", "*", "2", ",", "ndf", "*", "2", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "True", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "leak", ")", ",", "\n", "# layer 5", "\n", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "ndf", "*", "2", ",", "ndf", "*", "4", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "leak", ")", ",", "\n", "# layer 6", "\n", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "ndf", "*", "4", ",", "ndf", "*", "4", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "True", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "leak", ")", ",", "\n", "# layer 7", "\n", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "ndf", "*", "4", ",", "ndf", "*", "8", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "leak", ")", ",", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", "spectral_norm", "(", "nn", ".", "Linear", "(", "w_g", "*", "w_g", "*", "512", ",", "1", ")", ")", "\n", ")", "\n", "\n", "\n", "", "elif", "nn_type", "==", "'sngan'", ":", "\n", "            ", "nc", "=", "3", "\n", "ndf", "=", "64", "\n", "leak", "=", "0.1", "\n", "w_g", "=", "4", "\n", "\n", "conv_size", "=", "5", "\n", "\n", "conv_1", "=", "nn", ".", "Conv2d", "(", "nc", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "conv_2", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "conv_3", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "conv_4", "=", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "conv_5", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "conv_6", "=", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "conv_7", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "spectral_norm", "(", "conv_1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "leak", ")", ",", "\n", "spectral_norm", "(", "conv_2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "leak", ")", ",", "\n", "spectral_norm", "(", "conv_3", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "leak", ")", ",", "\n", "spectral_norm", "(", "conv_4", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "leak", ")", ",", "\n", "spectral_norm", "(", "conv_5", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "leak", ")", ",", "\n", "spectral_norm", "(", "conv_6", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "leak", ")", ",", "\n", "spectral_norm", "(", "conv_7", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "leak", ")", ",", "\n", "nn", ".", "Flatten", "(", ")", "\n", ")", "\n", "\n", "\n", "x", "=", "torch", ".", "zeros", "(", "[", "1", ",", "3", ",", "32", ",", "32", "]", ")", "\n", "out", "=", "self", ".", "main", "(", "x", ")", "\n", "self", ".", "shape", "=", "out", ".", "shape", "[", "1", "]", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "self", ".", "shape", ",", "1", ")", "\n", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "fc", ".", "weight", ".", "data", ",", "1.", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "conv_1", ".", "weight", ".", "data", ",", "1.", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "conv_2", ".", "weight", ".", "data", ",", "1.", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "conv_3", ".", "weight", ".", "data", ",", "1.", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "conv_4", ".", "weight", ".", "data", ",", "1.", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "conv_5", ".", "weight", ".", "data", ",", "1.", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "conv_6", ".", "weight", ".", "data", ",", "1.", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "conv_7", ".", "weight", ".", "data", ",", "1.", ")", "\n", "\n", "\n", "", "elif", "nn_type", "==", "'resnet-sn'", ":", "\n", "# adapted from https://github.com/christiancosgrove/pytorch-spectral-normalization-gan", "\n", "# with spectral norm from pytorch", "\n", "\n", "            ", "nc", "=", "3", "\n", "self", ".", "disc_size", "=", "128", "\n", "\n", "self", ".", "fc_in", "=", "2048", "\n", "\n", "\n", "bn", "=", "self", ".", "bn", "\n", "skipinit", "=", "self", ".", "skipinit", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "self", ".", "disc_size", ",", "1", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "fc", ".", "weight", ".", "data", ",", "1.", ")", "\n", "print", "(", "\"building discriminator\"", ")", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "\n", "FirstResBlockDiscriminator", "(", "nc", ",", "self", ".", "disc_size", ",", "stride", "=", "2", ",", "sn", "=", "1", ",", "bn", "=", "bn", ",", "skipinit", "=", "skipinit", ")", ",", "\n", "ResBlockDiscriminator", "(", "self", ".", "disc_size", ",", "self", ".", "disc_size", ",", "stride", "=", "2", ",", "sn", "=", "1", ",", "bn", "=", "bn", ",", "skipinit", "=", "skipinit", ")", ",", "\n", "ResBlockDiscriminator", "(", "self", ".", "disc_size", ",", "self", ".", "disc_size", ",", "sn", "=", "1", ",", "bn", "=", "bn", ",", "skipinit", "=", "skipinit", ")", ",", "\n", "ResBlockDiscriminator", "(", "self", ".", "disc_size", ",", "self", ".", "disc_size", ",", "sn", "=", "1", ",", "bn", "=", "bn", ",", "skipinit", "=", "skipinit", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "8", ")", ",", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", "spectral_norm", "(", "self", ".", "fc", ")", "\n", ")", "\n", "\n", "", "elif", "nn_type", "==", "'resnet'", ":", "\n", "# same as above, but without the spectral norm", "\n", "            ", "nc", "=", "3", "\n", "self", ".", "disc_size", "=", "128", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "self", ".", "disc_size", ",", "1", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "fc", ".", "weight", ".", "data", ",", "1.", ")", "\n", "bn", "=", "self", ".", "bn", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "FirstResBlockDiscriminator", "(", "nc", ",", "self", ".", "disc_size", ",", "stride", "=", "2", ",", "sn", "=", "0", ",", "bn", "=", "bn", ",", "skipinit", "=", "skipinit", ")", ",", "\n", "ResBlockDiscriminator", "(", "self", ".", "disc_size", ",", "self", ".", "disc_size", ",", "stride", "=", "2", ",", "sn", "=", "0", ",", "bn", "=", "bn", ",", "skipinit", "=", "skipinit", ")", ",", "\n", "ResBlockDiscriminator", "(", "self", ".", "disc_size", ",", "self", ".", "disc_size", ",", "sn", "=", "0", ",", "bn", "=", "bn", ",", "skipinit", "=", "skipinit", ")", ",", "\n", "ResBlockDiscriminator", "(", "self", ".", "disc_size", ",", "self", ".", "disc_size", ",", "sn", "=", "0", ",", "bn", "=", "bn", ",", "skipinit", "=", "skipinit", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "8", ")", ",", "\n", "nn", ".", "Flatten", "(", ")", ",", "\n", "self", ".", "fc", "\n", ")", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.discriminator.Discriminator.forward": [[251, 263], ["discriminator.Discriminator.view().squeeze", "discriminator.Discriminator.fc", "discriminator.Discriminator.main", "discriminator.Discriminator.main", "discriminator.Discriminator.view", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.main", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.main"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "nn_type", "==", "'sngan'", ":", "\n", "            ", "output", "=", "self", ".", "fc", "(", "self", ".", "main", "(", "input", ")", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "self", ".", "main", "(", "input", ")", "\n", "", "if", "not", "self", ".", "no_trunc", ":", "\n", "            ", "output", "=", "nn", ".", "ReLU", "(", ")", "(", "output", "+", "self", ".", "max", ")", "-", "self", ".", "max", "\n", "#a = torch.min(output)", "\n", "#print( str(a) )", "\n", "#if a<=-self.max:", "\n", "#    print(\"large error here\")", "\n", "", "return", "output", ".", "view", "(", "-", "1", ",", "1", ")", ".", "squeeze", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.discriminator.ResBlockDiscriminator.__init__": [[275, 330], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.Sequential", "torch.nn.Sequential", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.nn.ReLU", "torch.nn.ReLU", "discriminator.ResBlockDiscriminator.__init__.spec_norm"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "stride", "=", "1", ",", "sn", "=", "1", ",", "bn", "=", "True", ",", "skipinit", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResBlockDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "sn", "==", "1", ":", "\n", "            ", "spec_norm", "=", "spectral_norm", "\n", "", "else", ":", "\n", "            ", "def", "spec_norm", "(", "x", ")", ":", "\n", "                ", "return", "x", "\n", "", "", "self", ".", "use_bn", "=", "bn", "\n", "if", "skipinit", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "0.", ")", ")", "\n", "self", ".", "scaling", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "0.", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bias", "=", "0.", "\n", "self", ".", "scaling", "=", "1.", "\n", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "3", ",", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "out_channels", ",", "out_channels", ",", "3", ",", "1", ",", "padding", "=", "1", ")", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bn1", "=", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "Identity", "(", ")", "\n", "", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "conv1", ".", "weight", ".", "data", ",", "1.", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "conv2", ".", "weight", ".", "data", ",", "1.", ")", "\n", "\n", "if", "stride", "==", "1", ":", "\n", "            ", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "spec_norm", "(", "self", ".", "conv1", ")", ",", "\n", "self", ".", "bn1", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "spec_norm", "(", "self", ".", "conv2", ")", ",", "\n", "self", ".", "bn2", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "spec_norm", "(", "self", ".", "conv1", ")", ",", "\n", "self", ".", "bn1", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "spec_norm", "(", "self", ".", "conv2", ")", ",", "\n", "self", ".", "bn2", ",", "\n", "nn", ".", "AvgPool2d", "(", "2", ",", "stride", "=", "stride", ",", "padding", "=", "0", ")", "\n", ")", "\n", "", "self", ".", "bypass", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", ":", "\n", "\n", "            ", "self", ".", "bypass_conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "1", ",", "padding", "=", "0", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "bypass_conv", ".", "weight", ".", "data", ",", "np", ".", "sqrt", "(", "2", ")", ")", "\n", "\n", "self", ".", "bypass", "=", "nn", ".", "Sequential", "(", "\n", "spec_norm", "(", "self", ".", "bypass_conv", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "2", ",", "stride", "=", "stride", ",", "padding", "=", "0", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.discriminator.ResBlockDiscriminator.forward": [[333, 335], ["discriminator.ResBlockDiscriminator.bypass", "discriminator.ResBlockDiscriminator.model"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "scaling", "*", "self", ".", "model", "(", "x", ")", "+", "self", ".", "bypass", "(", "x", ")", "+", "self", ".", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.discriminator.FirstResBlockDiscriminator.__init__": [[339, 383], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Identity", "numpy.sqrt", "discriminator.FirstResBlockDiscriminator.__init__.spec_norm"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "stride", "=", "1", ",", "sn", "=", "1", ",", "bn", "=", "True", ",", "skipinit", "=", "False", ")", ":", "\n", "        ", "super", "(", "FirstResBlockDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "sn", "==", "1", ":", "\n", "            ", "spec_norm", "=", "spectral_norm", "\n", "", "else", ":", "\n", "            ", "def", "spec_norm", "(", "x", ")", ":", "\n", "                ", "return", "x", "\n", "\n", "", "", "self", ".", "use_bn", "=", "bn", "\n", "if", "skipinit", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "0.", ")", ")", "\n", "self", ".", "scaling", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "0.", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bias", "=", "0.", "\n", "self", ".", "scaling", "=", "1.", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "3", ",", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "out_channels", ",", "out_channels", ",", "3", ",", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bypass_conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "1", ",", "padding", "=", "0", ")", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bn1", "=", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "Identity", "(", ")", "\n", "", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "conv1", ".", "weight", ".", "data", ",", "1.", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "conv2", ".", "weight", ".", "data", ",", "1.", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "bypass_conv", ".", "weight", ".", "data", ",", "np", ".", "sqrt", "(", "2", ")", ")", "\n", "\n", "# we don't want to apply ReLU activation to raw image before convolution transformation.", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "\n", "spec_norm", "(", "self", ".", "conv1", ")", ",", "\n", "self", ".", "bn1", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "spec_norm", "(", "self", ".", "conv2", ")", ",", "\n", "self", ".", "bn2", ",", "\n", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", ")", "\n", "self", ".", "bypass", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "AvgPool2d", "(", "2", ")", ",", "\n", "spec_norm", "(", "self", ".", "bypass_conv", ")", ",", "\n", "self", ".", "bn3", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.discriminator.FirstResBlockDiscriminator.forward": [[385, 387], ["discriminator.FirstResBlockDiscriminator.bypass", "discriminator.FirstResBlockDiscriminator.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "scaling", "*", "self", ".", "model", "(", "x", ")", "+", "self", ".", "bypass", "(", "x", ")", "+", "self", ".", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.MaskedLinear.__init__": [[41, 54], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "made_model.MaskedLinear.register_buffer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_features", ",", "\n", "out_features", ",", "\n", "mask", ",", "\n", "cond_in_features", "=", "None", ",", "\n", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "MaskedLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "in_features", ",", "out_features", ")", "\n", "if", "cond_in_features", "is", "not", "None", ":", "\n", "            ", "self", ".", "cond_linear", "=", "nn", ".", "Linear", "(", "\n", "cond_in_features", ",", "out_features", ",", "bias", "=", "False", ")", "\n", "\n", "", "self", ".", "register_buffer", "(", "'mask'", ",", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.MaskedLinear.forward": [[55, 61], ["torch.linear", "torch.linear", "torch.linear", "made_model.MaskedLinear.cond_linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "cond_inputs", "=", "None", ")", ":", "\n", "        ", "output", "=", "F", ".", "linear", "(", "inputs", ",", "self", ".", "linear", ".", "weight", "*", "self", ".", "mask", ",", "\n", "self", ".", "linear", ".", "bias", ")", "\n", "if", "cond_inputs", "is", "not", "None", ":", "\n", "            ", "output", "+=", "self", ".", "cond_linear", "(", "cond_inputs", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.MADESplit.__init__": [[71, 109], ["torch.Module.__init__", "made_model.get_mask", "made_model.get_mask", "made_model.get_mask", "torch.MaskedLinear", "torch.MaskedLinear", "torch.MaskedLinear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.MaskedLinear", "torch.MaskedLinear", "torch.MaskedLinear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "act_func", "torch.MaskedLinear", "torch.MaskedLinear", "torch.MaskedLinear", "act_func", "torch.MaskedLinear", "torch.MaskedLinear", "torch.MaskedLinear", "act_func", "torch.MaskedLinear", "torch.MaskedLinear", "torch.MaskedLinear", "act_func", "torch.MaskedLinear", "torch.MaskedLinear", "torch.MaskedLinear"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.get_mask", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.get_mask", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.get_mask"], ["def", "__init__", "(", "self", ",", "\n", "num_inputs", ",", "\n", "num_hidden", ",", "\n", "num_cond_inputs", "=", "None", ",", "\n", "s_act", "=", "'tanh'", ",", "\n", "t_act", "=", "'relu'", ",", "\n", "pre_exp_tanh", "=", "False", ")", ":", "\n", "        ", "super", "(", "MADESplit", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "pre_exp_tanh", "=", "pre_exp_tanh", "\n", "\n", "activations", "=", "{", "'relu'", ":", "nn", ".", "ReLU", ",", "'sigmoid'", ":", "nn", ".", "Sigmoid", ",", "'tanh'", ":", "nn", ".", "Tanh", "}", "\n", "\n", "input_mask", "=", "get_mask", "(", "num_inputs", ",", "num_hidden", ",", "num_inputs", ",", "\n", "mask_type", "=", "'input'", ")", "\n", "hidden_mask", "=", "get_mask", "(", "num_hidden", ",", "num_hidden", ",", "num_inputs", ")", "\n", "output_mask", "=", "get_mask", "(", "num_hidden", ",", "num_inputs", ",", "num_inputs", ",", "\n", "mask_type", "=", "'output'", ")", "\n", "\n", "act_func", "=", "activations", "[", "s_act", "]", "\n", "self", ".", "s_joiner", "=", "nn", ".", "MaskedLinear", "(", "num_inputs", ",", "num_hidden", ",", "input_mask", ",", "\n", "num_cond_inputs", ")", "\n", "\n", "self", ".", "s_trunk", "=", "nn", ".", "Sequential", "(", "act_func", "(", ")", ",", "\n", "nn", ".", "MaskedLinear", "(", "num_hidden", ",", "num_hidden", ",", "\n", "hidden_mask", ")", ",", "act_func", "(", ")", ",", "\n", "nn", ".", "MaskedLinear", "(", "num_hidden", ",", "num_inputs", ",", "\n", "output_mask", ")", ")", "\n", "\n", "act_func", "=", "activations", "[", "t_act", "]", "\n", "self", ".", "t_joiner", "=", "nn", ".", "MaskedLinear", "(", "num_inputs", ",", "num_hidden", ",", "input_mask", ",", "\n", "num_cond_inputs", ")", "\n", "\n", "self", ".", "t_trunk", "=", "nn", ".", "Sequential", "(", "act_func", "(", ")", ",", "\n", "nn", ".", "MaskedLinear", "(", "num_hidden", ",", "num_hidden", ",", "\n", "hidden_mask", ")", ",", "act_func", "(", ")", ",", "\n", "nn", ".", "MaskedLinear", "(", "num_hidden", ",", "num_inputs", ",", "\n", "output_mask", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.MADESplit.forward": [[110, 139], ["made_model.MADESplit.s_joiner", "made_model.MADESplit.s_trunk", "made_model.MADESplit.t_joiner", "made_model.MADESplit.t_trunk", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "made_model.MADESplit.s_joiner", "made_model.MADESplit.s_trunk", "made_model.MADESplit.t_joiner", "made_model.MADESplit.t_trunk", "torch.tanh.sum", "torch.tanh.sum", "torch.tanh.sum", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh.sum", "torch.tanh.sum", "torch.tanh.sum", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "cond_inputs", "=", "None", ",", "mode", "=", "'direct'", ")", ":", "\n", "        ", "if", "mode", "==", "'direct'", ":", "\n", "            ", "h", "=", "self", ".", "s_joiner", "(", "inputs", ",", "cond_inputs", ")", "\n", "m", "=", "self", ".", "s_trunk", "(", "h", ")", "\n", "\n", "h", "=", "self", ".", "t_joiner", "(", "inputs", ",", "cond_inputs", ")", "\n", "a", "=", "self", ".", "t_trunk", "(", "h", ")", "\n", "\n", "if", "self", ".", "pre_exp_tanh", ":", "\n", "                ", "a", "=", "torch", ".", "tanh", "(", "a", ")", "\n", "\n", "", "u", "=", "(", "inputs", "-", "m", ")", "*", "torch", ".", "exp", "(", "-", "a", ")", "\n", "return", "u", ",", "-", "a", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "", "else", ":", "\n", "            ", "x", "=", "torch", ".", "zeros_like", "(", "inputs", ")", "\n", "for", "i_col", "in", "range", "(", "inputs", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "h", "=", "self", ".", "s_joiner", "(", "x", ",", "cond_inputs", ")", "\n", "m", "=", "self", ".", "s_trunk", "(", "h", ")", "\n", "\n", "h", "=", "self", ".", "t_joiner", "(", "x", ",", "cond_inputs", ")", "\n", "a", "=", "self", ".", "t_trunk", "(", "h", ")", "\n", "\n", "if", "self", ".", "pre_exp_tanh", ":", "\n", "                    ", "a", "=", "torch", ".", "tanh", "(", "a", ")", "\n", "\n", "", "x", "[", ":", ",", "i_col", "]", "=", "inputs", "[", ":", ",", "i_col", "]", "*", "torch", ".", "exp", "(", "\n", "a", "[", ":", ",", "i_col", "]", ")", "+", "m", "[", ":", ",", "i_col", "]", "\n", "", "return", "x", ",", "-", "a", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.MADE.__init__": [[145, 170], ["torch.Module.__init__", "made_model.get_mask", "made_model.get_mask", "made_model.get_mask", "torch.MaskedLinear", "torch.MaskedLinear", "torch.MaskedLinear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "act_func", "torch.MaskedLinear", "torch.MaskedLinear", "torch.MaskedLinear", "act_func", "torch.MaskedLinear", "torch.MaskedLinear", "torch.MaskedLinear"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.get_mask", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.get_mask", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.get_mask"], ["def", "__init__", "(", "self", ",", "\n", "num_inputs", ",", "\n", "num_hidden", ",", "\n", "num_cond_inputs", "=", "None", ",", "\n", "act", "=", "'relu'", ",", "\n", "pre_exp_tanh", "=", "False", ")", ":", "\n", "        ", "super", "(", "MADE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "activations", "=", "{", "'relu'", ":", "nn", ".", "ReLU", ",", "'sigmoid'", ":", "nn", ".", "Sigmoid", ",", "'tanh'", ":", "nn", ".", "Tanh", ",", "'lrelu'", ":", "nn", ".", "LeakyReLU", "}", "\n", "act_func", "=", "activations", "[", "act", "]", "\n", "\n", "input_mask", "=", "get_mask", "(", "\n", "num_inputs", ",", "num_hidden", ",", "num_inputs", ",", "mask_type", "=", "'input'", ")", "\n", "hidden_mask", "=", "get_mask", "(", "num_hidden", ",", "num_hidden", ",", "num_inputs", ")", "\n", "output_mask", "=", "get_mask", "(", "\n", "num_hidden", ",", "num_inputs", "*", "2", ",", "num_inputs", ",", "mask_type", "=", "'output'", ")", "\n", "\n", "self", ".", "joiner", "=", "nn", ".", "MaskedLinear", "(", "num_inputs", ",", "num_hidden", ",", "input_mask", ",", "\n", "num_cond_inputs", ")", "\n", "\n", "self", ".", "trunk", "=", "nn", ".", "Sequential", "(", "act_func", "(", ")", ",", "\n", "nn", ".", "MaskedLinear", "(", "num_hidden", ",", "num_hidden", ",", "\n", "hidden_mask", ")", ",", "act_func", "(", ")", ",", "\n", "nn", ".", "MaskedLinear", "(", "num_hidden", ",", "num_inputs", "*", "2", ",", "\n", "output_mask", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.MADE.forward": [[171, 186], ["made_model.MADE.joiner", "made_model.MADE.trunk().chunk", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "made_model.MADE.joiner", "made_model.MADE.trunk().chunk", "made_model.MADE.trunk", "a.sum", "a.sum", "made_model.MADE.trunk", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "cond_inputs", "=", "None", ",", "mode", "=", "'direct'", ")", ":", "\n", "        ", "if", "mode", "==", "'direct'", ":", "\n", "            ", "h", "=", "self", ".", "joiner", "(", "inputs", ",", "cond_inputs", ")", "\n", "m", ",", "a", "=", "self", ".", "trunk", "(", "h", ")", ".", "chunk", "(", "2", ",", "1", ")", "\n", "u", "=", "(", "inputs", "-", "m", ")", "*", "torch", ".", "exp", "(", "-", "a", ")", "\n", "return", "u", ",", "-", "a", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "", "else", ":", "\n", "            ", "x", "=", "torch", ".", "zeros_like", "(", "inputs", ")", "\n", "for", "i_col", "in", "range", "(", "inputs", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "h", "=", "self", ".", "joiner", "(", "x", ",", "cond_inputs", ")", "\n", "m", ",", "a", "=", "self", ".", "trunk", "(", "h", ")", ".", "chunk", "(", "2", ",", "1", ")", "\n", "trun_a", "=", "5", "-", "nn", ".", "ReLU", "(", ")", "(", "5.", "-", "a", "[", ":", ",", "i_col", "]", ")", "\n", "x", "[", ":", ",", "i_col", "]", "=", "inputs", "[", ":", ",", "i_col", "]", "*", "torch", ".", "exp", "(", "trun_a", ")", "+", "m", "[", ":", ",", "i_col", "]", "\n", "", "return", "x", ",", "-", "a", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.Sigmoid.__init__": [[189, 191], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Sigmoid", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.Sigmoid.forward": [[192, 201], ["s", "torch.log().sum", "torch.log().sum", "torch.log().sum", "torch.log().sum", "torch.log().sum", "torch.log().sum", "torch.log().sum", "torch.log().sum", "torch.log().sum", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log().sum", "torch.log().sum", "torch.log().sum", "torch.log().sum", "torch.log().sum", "torch.log().sum", "torch.log().sum", "torch.log().sum", "torch.log().sum", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "s", "s"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "cond_inputs", "=", "None", ",", "mode", "=", "'direct'", ")", ":", "\n", "        ", "if", "mode", "==", "'direct'", ":", "\n", "            ", "s", "=", "torch", ".", "sigmoid", "\n", "return", "s", "(", "inputs", ")", ",", "torch", ".", "log", "(", "s", "(", "inputs", ")", "*", "(", "1", "-", "s", "(", "inputs", ")", ")", ")", ".", "sum", "(", "\n", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "log", "(", "inputs", "/", "\n", "(", "1", "-", "inputs", ")", ")", ",", "-", "torch", ".", "log", "(", "inputs", "-", "inputs", "**", "2", ")", ".", "sum", "(", "\n", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.Logit.__init__": [[204, 206], ["made_model.Sigmoid.__init__"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Logit", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.Logit.forward": [[207, 212], ["made_model.Sigmoid.forward", "made_model.Sigmoid.forward"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.forward", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.forward"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "cond_inputs", "=", "None", ",", "mode", "=", "'direct'", ")", ":", "\n", "        ", "if", "mode", "==", "'direct'", ":", "\n", "            ", "return", "super", "(", "Logit", ",", "self", ")", ".", "forward", "(", "inputs", ",", "'inverse'", ")", "\n", "", "else", ":", "\n", "            ", "return", "super", "(", "Logit", ",", "self", ")", ".", "forward", "(", "inputs", ",", "'direct'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.BatchNormFlow.__init__": [[220, 232], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "made_model.BatchNormFlow.register_buffer", "made_model.BatchNormFlow.register_buffer", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__"], ["def", "__init__", "(", "self", ",", "num_inputs", ",", "momentum", "=", "0.0", ",", "eps", "=", "1e-5", ",", "device", "=", "'cpu'", ")", ":", "\n", "        ", "super", "(", "BatchNormFlow", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "log_gamma", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "num_inputs", ")", ")", "\n", "self", ".", "beta", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "num_inputs", ")", ")", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "eps", "=", "eps", "\n", "\n", "self", ".", "register_buffer", "(", "'running_mean'", ",", "torch", ".", "zeros", "(", "num_inputs", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_var'", ",", "torch", ".", "ones", "(", "num_inputs", ")", ")", "\n", "self", ".", "batch_mean", "=", "Variable", "(", "torch", ".", "zeros", "(", "num_inputs", ")", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "batch_var", "=", "Variable", "(", "torch", ".", "zeros", "(", "num_inputs", ")", ")", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.BatchNormFlow.forward": [[233, 272], ["inputs.mean", "made_model.BatchNormFlow.running_mean.mul_", "made_model.BatchNormFlow.running_var.mul_", "made_model.BatchNormFlow.running_mean.add_", "made_model.BatchNormFlow.running_var.add_", "var.sqrt", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "var.sqrt", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "cond_inputs", "=", "None", ",", "mode", "=", "'direct'", ")", ":", "\n", "        ", "if", "mode", "==", "'direct'", ":", "\n", "            ", "if", "self", ".", "training", ":", "\n", "                ", "self", ".", "batch_mean", ".", "data", "=", "inputs", ".", "mean", "(", "0", ")", "\n", "self", ".", "batch_var", ".", "data", "=", "(", "\n", "inputs", "-", "self", ".", "batch_mean", ".", "data", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", "0", ")", "+", "self", ".", "eps", "\n", "\n", "self", ".", "running_mean", ".", "mul_", "(", "self", ".", "momentum", ")", "\n", "self", ".", "running_var", ".", "mul_", "(", "self", ".", "momentum", ")", "\n", "\n", "self", ".", "running_mean", ".", "add_", "(", "self", ".", "batch_mean", ".", "data", "*", "\n", "(", "1", "-", "self", ".", "momentum", ")", ")", "\n", "self", ".", "running_var", ".", "add_", "(", "self", ".", "batch_var", ".", "data", "*", "\n", "(", "1", "-", "self", ".", "momentum", ")", ")", "\n", "\n", "mean", "=", "self", ".", "batch_mean", ".", "data", "\n", "var", "=", "self", ".", "batch_var", ".", "data", "\n", "", "else", ":", "\n", "                ", "mean", "=", "self", ".", "running_mean", "\n", "var", "=", "self", ".", "running_var", "\n", "\n", "", "x_hat", "=", "(", "inputs", "-", "mean", ")", "/", "var", ".", "sqrt", "(", ")", "\n", "y", "=", "torch", ".", "exp", "(", "self", ".", "log_gamma", ")", "*", "x_hat", "+", "self", ".", "beta", "\n", "return", "y", ",", "(", "self", ".", "log_gamma", "-", "0.5", "*", "torch", ".", "log", "(", "var", ")", ")", ".", "sum", "(", "\n", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "training", ":", "\n", "                ", "mean", "=", "self", ".", "batch_mean", ".", "data", "\n", "var", "=", "self", ".", "batch_var", ".", "data", "\n", "", "else", ":", "\n", "                ", "mean", "=", "self", ".", "running_mean", "\n", "var", "=", "self", ".", "running_var", "\n", "\n", "", "x_hat", "=", "(", "inputs", "-", "self", ".", "beta", ")", "/", "torch", ".", "exp", "(", "self", ".", "log_gamma", ")", "\n", "\n", "y", "=", "x_hat", "*", "var", ".", "sqrt", "(", ")", "+", "mean", "\n", "\n", "return", "y", ",", "(", "-", "self", ".", "log_gamma", "+", "0.5", "*", "torch", ".", "log", "(", "var", ")", ")", ".", "sum", "(", "\n", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.ActNorm.__init__": [[280, 285], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__"], ["def", "__init__", "(", "self", ",", "num_inputs", ")", ":", "\n", "        ", "super", "(", "ActNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "num_inputs", ")", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "num_inputs", ")", ")", "\n", "self", ".", "initialized", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.ActNorm.forward": [[286, 300], ["made_model.ActNorm.weight.data.copy_", "made_model.ActNorm.bias.data.copy_", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "inputs.mean", "made_model.ActNorm.weight.sum().unsqueeze().repeat", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "inputs.size", "made_model.ActNorm.weight.sum().unsqueeze().repeat", "made_model.ActNorm.weight.sum().unsqueeze", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "inputs.size", "inputs.std", "made_model.ActNorm.weight.sum().unsqueeze", "made_model.ActNorm.weight.sum", "made_model.ActNorm.weight.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "cond_inputs", "=", "None", ",", "mode", "=", "'direct'", ")", ":", "\n", "        ", "if", "self", ".", "initialized", "==", "False", ":", "\n", "            ", "self", ".", "weight", ".", "data", ".", "copy_", "(", "torch", ".", "log", "(", "1.0", "/", "(", "inputs", ".", "std", "(", "0", ")", "+", "1e-12", ")", ")", ")", "\n", "self", ".", "bias", ".", "data", ".", "copy_", "(", "inputs", ".", "mean", "(", "0", ")", ")", "\n", "self", ".", "initialized", "=", "True", "\n", "\n", "", "if", "mode", "==", "'direct'", ":", "\n", "            ", "return", "(", "\n", "inputs", "-", "self", ".", "bias", ")", "*", "torch", ".", "exp", "(", "self", ".", "weight", ")", ",", "self", ".", "weight", ".", "sum", "(", "\n", "-", "1", ",", "keepdim", "=", "True", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "inputs", ".", "size", "(", "0", ")", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "return", "inputs", "*", "torch", ".", "exp", "(", "\n", "-", "self", ".", "weight", ")", "+", "self", ".", "bias", ",", "-", "self", ".", "weight", ".", "sum", "(", "\n", "-", "1", ",", "keepdim", "=", "True", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "inputs", ".", "size", "(", "0", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.InvertibleMM.__init__": [[308, 312], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__"], ["def", "__init__", "(", "self", ",", "num_inputs", ")", ":", "\n", "        ", "super", "(", "InvertibleMM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "W", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_inputs", ",", "num_inputs", ")", ")", "\n", "nn", ".", "init", ".", "orthogonal_", "(", "self", ".", "W", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.InvertibleMM.forward": [[313, 322], ["[].unsqueeze().unsqueeze().repeat", "inputs.size", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "[].unsqueeze().unsqueeze().repeat", "[].unsqueeze().unsqueeze", "inputs.size", "[].unsqueeze().unsqueeze", "[].unsqueeze", "[].unsqueeze", "torch.slogdet", "torch.slogdet", "torch.slogdet", "torch.slogdet", "torch.slogdet", "torch.slogdet", "torch.slogdet", "torch.slogdet", "torch.slogdet", "torch.slogdet", "torch.slogdet", "torch.slogdet", "torch.slogdet", "torch.slogdet", "torch.slogdet", "torch.slogdet", "torch.slogdet", "torch.slogdet"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MAFMOG.inverse", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MAFMOG.inverse", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MAFMOG.inverse", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MAFMOG.inverse", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MAFMOG.inverse", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MAFMOG.inverse", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MAFMOG.inverse", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MAFMOG.inverse", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MAFMOG.inverse"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "cond_inputs", "=", "None", ",", "mode", "=", "'direct'", ")", ":", "\n", "        ", "if", "mode", "==", "'direct'", ":", "\n", "            ", "return", "inputs", "@", "self", ".", "W", ",", "torch", ".", "slogdet", "(", "\n", "self", ".", "W", ")", "[", "-", "1", "]", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "\n", "inputs", ".", "size", "(", "0", ")", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "return", "inputs", "@", "torch", ".", "inverse", "(", "self", ".", "W", ")", ",", "-", "torch", ".", "slogdet", "(", "\n", "self", ".", "W", ")", "[", "-", "1", "]", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "\n", "inputs", ".", "size", "(", "0", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.LUInvertibleMM.__init__": [[330, 349], ["torch.Module.__init__", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "made_model.LUInvertibleMM.L_mask.t().clone", "scipy.linalg.lu", "scipy.linalg.lu", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "numpy.diag", "numpy.sign", "numpy.log", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "made_model.LUInvertibleMM.W.numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "abs", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "made_model.LUInvertibleMM.L.size", "made_model.LUInvertibleMM.W.size", "made_model.LUInvertibleMM.L_mask.t"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__"], ["def", "__init__", "(", "self", ",", "num_inputs", ")", ":", "\n", "        ", "super", "(", "LUInvertibleMM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "W", "=", "torch", ".", "Tensor", "(", "num_inputs", ",", "num_inputs", ")", "\n", "nn", ".", "init", ".", "orthogonal_", "(", "self", ".", "W", ")", "\n", "self", ".", "L_mask", "=", "torch", ".", "tril", "(", "torch", ".", "ones", "(", "self", ".", "W", ".", "size", "(", ")", ")", ",", "-", "1", ")", "\n", "self", ".", "U_mask", "=", "self", ".", "L_mask", ".", "t", "(", ")", ".", "clone", "(", ")", "\n", "\n", "P", ",", "L", ",", "U", "=", "sp", ".", "linalg", ".", "lu", "(", "self", ".", "W", ".", "numpy", "(", ")", ")", "\n", "self", ".", "P", "=", "torch", ".", "from_numpy", "(", "P", ")", "\n", "self", ".", "L", "=", "nn", ".", "Parameter", "(", "torch", ".", "from_numpy", "(", "L", ")", ")", "\n", "self", ".", "U", "=", "nn", ".", "Parameter", "(", "torch", ".", "from_numpy", "(", "U", ")", ")", "\n", "\n", "S", "=", "np", ".", "diag", "(", "U", ")", "\n", "sign_S", "=", "np", ".", "sign", "(", "S", ")", "\n", "log_S", "=", "np", ".", "log", "(", "abs", "(", "S", ")", ")", "\n", "self", ".", "sign_S", "=", "torch", ".", "from_numpy", "(", "sign_S", ")", "\n", "self", ".", "log_S", "=", "nn", ".", "Parameter", "(", "torch", ".", "from_numpy", "(", "log_S", ")", ")", "\n", "\n", "self", ".", "I", "=", "torch", ".", "eye", "(", "self", ".", "L", ".", "size", "(", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.LUInvertibleMM.forward": [[350, 370], ["str", "str", "made_model.LUInvertibleMM.L_mask.to", "made_model.LUInvertibleMM.U_mask.to", "made_model.LUInvertibleMM.I.to", "made_model.LUInvertibleMM.P.to", "made_model.LUInvertibleMM.sign_S.to", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "made_model.LUInvertibleMM.log_S.sum().unsqueeze().unsqueeze().repeat", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "inputs.size", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "made_model.LUInvertibleMM.log_S.sum().unsqueeze().unsqueeze().repeat", "made_model.LUInvertibleMM.log_S.sum().unsqueeze().unsqueeze", "inputs.size", "made_model.LUInvertibleMM.log_S.sum().unsqueeze().unsqueeze", "made_model.LUInvertibleMM.log_S.sum().unsqueeze", "made_model.LUInvertibleMM.log_S.sum().unsqueeze", "made_model.LUInvertibleMM.log_S.sum", "made_model.LUInvertibleMM.log_S.sum"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MAFMOG.inverse", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MAFMOG.inverse", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MAFMOG.inverse", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MAFMOG.inverse", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MAFMOG.inverse", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MAFMOG.inverse", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MAFMOG.inverse", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MAFMOG.inverse", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MAFMOG.inverse"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "cond_inputs", "=", "None", ",", "mode", "=", "'direct'", ")", ":", "\n", "        ", "if", "str", "(", "self", ".", "L_mask", ".", "device", ")", "!=", "str", "(", "self", ".", "L", ".", "device", ")", ":", "\n", "            ", "self", ".", "L_mask", "=", "self", ".", "L_mask", ".", "to", "(", "self", ".", "L", ".", "device", ")", "\n", "self", ".", "U_mask", "=", "self", ".", "U_mask", ".", "to", "(", "self", ".", "L", ".", "device", ")", "\n", "self", ".", "I", "=", "self", ".", "I", ".", "to", "(", "self", ".", "L", ".", "device", ")", "\n", "self", ".", "P", "=", "self", ".", "P", ".", "to", "(", "self", ".", "L", ".", "device", ")", "\n", "self", ".", "sign_S", "=", "self", ".", "sign_S", ".", "to", "(", "self", ".", "L", ".", "device", ")", "\n", "\n", "", "L", "=", "self", ".", "L", "*", "self", ".", "L_mask", "+", "self", ".", "I", "\n", "U", "=", "self", ".", "U", "*", "self", ".", "U_mask", "+", "torch", ".", "diag", "(", "\n", "self", ".", "sign_S", "*", "torch", ".", "exp", "(", "self", ".", "log_S", ")", ")", "\n", "W", "=", "self", ".", "P", "@", "L", "@", "U", "\n", "\n", "if", "mode", "==", "'direct'", ":", "\n", "            ", "return", "inputs", "@", "W", ",", "self", ".", "log_S", ".", "sum", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "\n", "0", ")", ".", "repeat", "(", "inputs", ".", "size", "(", "0", ")", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "return", "inputs", "@", "torch", ".", "inverse", "(", "\n", "W", ")", ",", "-", "self", ".", "log_S", ".", "sum", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "\n", "inputs", ".", "size", "(", "0", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.Shuffle.__init__": [[378, 382], ["torch.Module.__init__", "numpy.random.permutation", "numpy.argsort"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__"], ["def", "__init__", "(", "self", ",", "num_inputs", ")", ":", "\n", "        ", "super", "(", "Shuffle", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "perm", "=", "np", ".", "random", ".", "permutation", "(", "num_inputs", ")", "\n", "self", ".", "inv_perm", "=", "np", ".", "argsort", "(", "self", ".", "perm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.Shuffle.forward": [[383, 390], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "inputs.size", "inputs.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "cond_inputs", "=", "None", ",", "mode", "=", "'direct'", ")", ":", "\n", "        ", "if", "mode", "==", "'direct'", ":", "\n", "            ", "return", "inputs", "[", ":", ",", "self", ".", "perm", "]", ",", "torch", ".", "zeros", "(", "\n", "inputs", ".", "size", "(", "0", ")", ",", "1", ",", "device", "=", "inputs", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "return", "inputs", "[", ":", ",", "self", ".", "inv_perm", "]", ",", "torch", ".", "zeros", "(", "\n", "inputs", ".", "size", "(", "0", ")", ",", "1", ",", "device", "=", "inputs", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.Reverse.__init__": [[398, 402], ["torch.Module.__init__", "numpy.array", "numpy.argsort", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__"], ["def", "__init__", "(", "self", ",", "num_inputs", ")", ":", "\n", "        ", "super", "(", "Reverse", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "perm", "=", "np", ".", "array", "(", "np", ".", "arange", "(", "0", ",", "num_inputs", ")", "[", ":", ":", "-", "1", "]", ")", "\n", "self", ".", "inv_perm", "=", "np", ".", "argsort", "(", "self", ".", "perm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.Reverse.forward": [[403, 410], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "inputs.size", "inputs.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "cond_inputs", "=", "None", ",", "mode", "=", "'direct'", ")", ":", "\n", "        ", "if", "mode", "==", "'direct'", ":", "\n", "            ", "return", "inputs", "[", ":", ",", "self", ".", "perm", "]", ",", "torch", ".", "zeros", "(", "\n", "inputs", ".", "size", "(", "0", ")", ",", "1", ",", "device", "=", "inputs", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "return", "inputs", "[", ":", ",", "self", ".", "inv_perm", "]", ",", "torch", ".", "zeros", "(", "\n", "inputs", ".", "size", "(", "0", ")", ",", "1", ",", "device", "=", "inputs", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.CouplingLayer.__init__": [[417, 451], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "s_act_func", "torch.Linear", "torch.Linear", "torch.Linear", "s_act_func", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "t_act_func", "torch.Linear", "torch.Linear", "torch.Linear", "t_act_func", "torch.Linear", "torch.Linear", "torch.Linear", "isinstance", "m.bias.data.fill_", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__"], ["def", "__init__", "(", "self", ",", "\n", "num_inputs", ",", "\n", "num_hidden", ",", "\n", "mask", ",", "\n", "num_cond_inputs", "=", "None", ",", "\n", "s_act", "=", "'tanh'", ",", "\n", "t_act", "=", "'relu'", ")", ":", "\n", "        ", "super", "(", "CouplingLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_inputs", "=", "num_inputs", "\n", "self", ".", "mask", "=", "mask", "\n", "\n", "activations", "=", "{", "'relu'", ":", "nn", ".", "ReLU", ",", "'sigmoid'", ":", "nn", ".", "Sigmoid", ",", "'tanh'", ":", "nn", ".", "Tanh", "}", "\n", "s_act_func", "=", "activations", "[", "s_act", "]", "\n", "t_act_func", "=", "activations", "[", "t_act", "]", "\n", "\n", "if", "num_cond_inputs", "is", "not", "None", ":", "\n", "            ", "total_inputs", "=", "num_inputs", "+", "num_cond_inputs", "\n", "", "else", ":", "\n", "            ", "total_inputs", "=", "num_inputs", "\n", "\n", "", "self", ".", "scale_net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "total_inputs", ",", "num_hidden", ")", ",", "s_act_func", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "num_hidden", ",", "num_hidden", ")", ",", "s_act_func", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "num_hidden", ",", "num_inputs", ")", ")", "\n", "self", ".", "translate_net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "total_inputs", ",", "num_hidden", ")", ",", "t_act_func", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "num_hidden", ",", "num_hidden", ")", ",", "t_act_func", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "num_hidden", ",", "num_inputs", ")", ")", "\n", "\n", "def", "init", "(", "m", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "nn", ".", "init", ".", "orthogonal_", "(", "m", ".", "weight", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.CouplingLayer.forward": [[452, 469], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "made_model.CouplingLayer.scale_net", "made_model.CouplingLayer.translate_net", "log_s.sum", "made_model.CouplingLayer.scale_net", "made_model.CouplingLayer.translate_net", "log_s.sum"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "inputs", ",", "cond_inputs", "=", "None", ",", "mode", "=", "'direct'", ")", ":", "\n", "        ", "mask", "=", "self", ".", "mask", "\n", "\n", "masked_inputs", "=", "inputs", "*", "mask", "\n", "if", "cond_inputs", "is", "not", "None", ":", "\n", "            ", "masked_inputs", "=", "torch", ".", "cat", "(", "[", "masked_inputs", ",", "cond_inputs", "]", ",", "-", "1", ")", "\n", "\n", "", "if", "mode", "==", "'direct'", ":", "\n", "            ", "log_s", "=", "self", ".", "scale_net", "(", "masked_inputs", ")", "*", "(", "1", "-", "mask", ")", "\n", "t", "=", "self", ".", "translate_net", "(", "masked_inputs", ")", "*", "(", "1", "-", "mask", ")", "\n", "s", "=", "torch", ".", "exp", "(", "log_s", ")", "\n", "return", "inputs", "*", "s", "+", "t", ",", "log_s", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "log_s", "=", "self", ".", "scale_net", "(", "masked_inputs", ")", "*", "(", "1", "-", "mask", ")", "\n", "t", "=", "self", ".", "translate_net", "(", "masked_inputs", ")", "*", "(", "1", "-", "mask", ")", "\n", "s", "=", "torch", ".", "exp", "(", "-", "log_s", ")", "\n", "return", "(", "inputs", "-", "t", ")", "*", "s", ",", "-", "log_s", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.MADEMOG.__init__": [[474, 511], ["torch.Module.__init__", "made_model.MADEMOG.register_buffer", "made_model.MADEMOG.register_buffer", "models.mog_maf_model.create_masks", "made_model.MaskedLinear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ReLU", "torch.ReLU", "torch.ReLU", "made_model.MaskedLinear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "ValueError", "made_model.MaskedLinear", "masks[].repeat"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.create_masks"], ["def", "__init__", "(", "self", ",", "n_components", ",", "input_size", ",", "hidden_size", ",", "n_hidden", ",", "cond_label_size", "=", "None", ",", "activation", "=", "'relu'", ",", "input_order", "=", "'sequential'", ",", "input_degrees", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            n_components -- scalar; number of gauassian components in the mixture\n            input_size -- scalar; dim of inputs\n            hidden_size -- scalar; dim of hidden layers\n            n_hidden -- scalar; number of hidden layers\n            activation -- str; activation function to use\n            input_order -- str or tensor; variable order for creating the autoregressive masks (sequential|random)\n                            or the order flipped from the previous layer in a stack of mades\n            conditional -- bool; whether model is conditional\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_components", "=", "n_components", "\n", "\n", "# base distribution for calculation of log prob under the model", "\n", "self", ".", "register_buffer", "(", "'base_dist_mean'", ",", "torch", ".", "zeros", "(", "input_size", ")", ")", "\n", "self", ".", "register_buffer", "(", "'base_dist_var'", ",", "torch", ".", "ones", "(", "input_size", ")", ")", "\n", "\n", "# create masks", "\n", "masks", ",", "self", ".", "input_degrees", "=", "create_masks", "(", "input_size", ",", "hidden_size", ",", "n_hidden", ",", "input_order", ",", "input_degrees", ")", "\n", "\n", "# setup activation", "\n", "if", "activation", "==", "'relu'", ":", "\n", "            ", "activation_fn", "=", "nn", ".", "ReLU", "(", ")", "\n", "", "elif", "activation", "==", "'tanh'", ":", "\n", "            ", "activation_fn", "=", "nn", ".", "Tanh", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Check activation function.'", ")", "\n", "\n", "# construct model", "\n", "", "self", ".", "net_input", "=", "MaskedLinear", "(", "input_size", ",", "hidden_size", ",", "masks", "[", "0", "]", ",", "cond_label_size", ")", "\n", "self", ".", "net", "=", "[", "]", "\n", "for", "m", "in", "masks", "[", "1", ":", "-", "1", "]", ":", "\n", "            ", "self", ".", "net", "+=", "[", "activation_fn", ",", "MaskedLinear", "(", "hidden_size", ",", "hidden_size", ",", "m", ")", "]", "\n", "", "self", ".", "net", "+=", "[", "activation_fn", ",", "MaskedLinear", "(", "hidden_size", ",", "n_components", "*", "3", "*", "input_size", ",", "masks", "[", "-", "1", "]", ".", "repeat", "(", "n_components", "*", "3", ",", "1", ")", ")", "]", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "net", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.MADEMOG.base_dist": [[512, 515], ["torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal"], "methods", ["None"], ["", "@", "property", "\n", "def", "base_dist", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "distributions", ".", "normal", ".", "Normal", "(", "self", ".", "base_dist_mean", ",", "self", ".", "base_dist_var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.MADEMOG.forward": [[516, 530], ["made_model.MADEMOG.net().view().chunk", "x.repeat().view.repeat().view.repeat().view", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "logr.logsumexp", "made_model.MADEMOG.net().view", "x.repeat().view.repeat().view.repeat", "made_model.MADEMOG.net", "made_model.MADEMOG.net_input"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "# shapes", "\n", "        ", "N", ",", "L", "=", "x", ".", "shape", "\n", "C", "=", "self", ".", "n_components", "\n", "# MAF eq 2 -- parameters of Gaussians - mean, logsigma, log unnormalized cluster probabilities", "\n", "m", ",", "loga", ",", "logr", "=", "self", ".", "net", "(", "self", ".", "net_input", "(", "x", ",", "y", ")", ")", ".", "view", "(", "N", ",", "C", ",", "3", "*", "L", ")", ".", "chunk", "(", "chunks", "=", "3", ",", "dim", "=", "-", "1", ")", "# out 3 x (N, C, L)", "\n", "# MAF eq 4", "\n", "x", "=", "x", ".", "repeat", "(", "1", ",", "C", ")", ".", "view", "(", "N", ",", "C", ",", "L", ")", "# out (N, C, L)", "\n", "u", "=", "(", "x", "-", "m", ")", "*", "torch", ".", "exp", "(", "-", "loga", ")", "# out (N, C, L)", "\n", "# MAF eq 5", "\n", "log_abs_det_jacobian", "=", "-", "loga", "# out (N, C, L)", "\n", "# normalize cluster responsibilities", "\n", "self", ".", "logr", "=", "logr", "-", "logr", ".", "logsumexp", "(", "1", ",", "keepdim", "=", "True", ")", "# out (N, C, L)", "\n", "return", "u", ",", "log_abs_det_jacobian", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.MADEMOG.inverse": [[531, 549], ["torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "made_model.MADEMOG.net().view().chunk", "D.Categorical().sample().unsqueeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "logr.logsumexp", "made_model.MADEMOG.net().view", "D.Categorical().sample", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "made_model.MADEMOG.net", "D.Categorical", "made_model.MADEMOG.net_input"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.FlowSequential.sample"], ["", "def", "inverse", "(", "self", ",", "u", ",", "y", "=", "None", ",", "sum_log_abs_det_jacobians", "=", "None", ")", ":", "\n", "# shapes", "\n", "        ", "N", ",", "C", ",", "L", "=", "u", ".", "shape", "\n", "# init output", "\n", "x", "=", "torch", ".", "zeros", "(", "N", ",", "L", ")", ".", "to", "(", "u", ".", "device", ")", "\n", "# MAF eq 3", "\n", "# run through reverse model along each L", "\n", "for", "i", "in", "self", ".", "input_degrees", ":", "\n", "            ", "m", ",", "loga", ",", "logr", "=", "self", ".", "net", "(", "self", ".", "net_input", "(", "x", ",", "y", ")", ")", ".", "view", "(", "N", ",", "C", ",", "3", "*", "L", ")", ".", "chunk", "(", "chunks", "=", "3", ",", "dim", "=", "-", "1", ")", "# out 3 x (N, C, L)", "\n", "# normalize cluster responsibilities and sample cluster assignments from a categorical dist", "\n", "logr", "=", "logr", "-", "logr", ".", "logsumexp", "(", "1", ",", "keepdim", "=", "True", ")", "# out (N, C, L)", "\n", "z", "=", "D", ".", "Categorical", "(", "logits", "=", "logr", "[", ":", ",", ":", ",", "i", "]", ")", ".", "sample", "(", ")", ".", "unsqueeze", "(", "-", "1", ")", "# out (N, 1)", "\n", "u_z", "=", "torch", ".", "gather", "(", "u", "[", ":", ",", ":", ",", "i", "]", ",", "1", ",", "z", ")", ".", "squeeze", "(", ")", "# out (N, 1)", "\n", "m_z", "=", "torch", ".", "gather", "(", "m", "[", ":", ",", ":", ",", "i", "]", ",", "1", ",", "z", ")", ".", "squeeze", "(", ")", "# out (N, 1)", "\n", "loga_z", "=", "torch", ".", "gather", "(", "loga", "[", ":", ",", ":", ",", "i", "]", ",", "1", ",", "z", ")", ".", "squeeze", "(", ")", "\n", "x", "[", ":", ",", "i", "]", "=", "u_z", "*", "torch", ".", "exp", "(", "loga_z", ")", "+", "m_z", "\n", "", "log_abs_det_jacobian", "=", "loga", "\n", "return", "x", ",", "log_abs_det_jacobian", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.MADEMOG.log_prob": [[550, 555], ["made_model.MADEMOG.forward", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp.sum", "torch.logsumexp.sum", "torch.logsumexp.sum", "made_model.MADEMOG.base_dist.log_prob"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.forward", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MAFMOG.log_prob"], ["", "def", "log_prob", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "u", ",", "log_abs_det_jacobian", "=", "self", ".", "forward", "(", "x", ",", "y", ")", "# u = (N,C,L); log_abs_det_jacobian = (N,C,L)", "\n", "# marginalize cluster probs", "\n", "log_probs", "=", "torch", ".", "logsumexp", "(", "self", ".", "logr", "+", "self", ".", "base_dist", ".", "log_prob", "(", "u", ")", "+", "log_abs_det_jacobian", ",", "dim", "=", "1", ")", "# sum over C; out (N, L)", "\n", "return", "log_probs", ".", "sum", "(", "1", ")", "# sum over L; out (N,)", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.MAFMOG.__init__": [[558, 569], ["torch.Module.__init__", "made_model.MAFMOG.register_buffer", "made_model.MAFMOG.register_buffer", "made_model.MAF", "made_model.MADEMOG", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__"], ["def", "__init__", "(", "self", ",", "n_blocks", ",", "n_components", ",", "input_size", ",", "hidden_size", ",", "n_hidden", ",", "cond_label_size", "=", "None", ",", "activation", "=", "'relu'", ",", "\n", "input_order", "=", "'sequential'", ",", "batch_norm", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# base distribution for calculation of log prob under the model", "\n", "self", ".", "register_buffer", "(", "'base_dist_mean'", ",", "torch", ".", "zeros", "(", "input_size", ")", ")", "\n", "self", ".", "register_buffer", "(", "'base_dist_var'", ",", "torch", ".", "ones", "(", "input_size", ")", ")", "\n", "\n", "self", ".", "maf", "=", "MAF", "(", "n_blocks", ",", "input_size", ",", "hidden_size", ",", "n_hidden", ",", "cond_label_size", ",", "activation", ",", "input_order", ",", "batch_norm", ")", "\n", "# get reversed input order from the last layer (note in maf model, input_degrees are already flipped in for-loop model constructor", "\n", "input_degrees", "=", "self", ".", "maf", ".", "input_degrees", "#.flip(0)", "\n", "self", ".", "mademog", "=", "MADEMOG", "(", "n_components", ",", "input_size", ",", "hidden_size", ",", "n_hidden", ",", "cond_label_size", ",", "activation", ",", "input_order", ",", "input_degrees", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.MAFMOG.base_dist": [[570, 573], ["torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal"], "methods", ["None"], ["", "@", "property", "\n", "def", "base_dist", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "distributions", ".", "normal", ".", "Normal", "(", "self", ".", "base_dist_mean", ",", "self", ".", "base_dist_var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.MAFMOG.forward": [[574, 579], ["made_model.MAFMOG.maf", "made_model.MAFMOG.mademog", "maf_log_abs_dets.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "u", ",", "maf_log_abs_dets", "=", "self", ".", "maf", "(", "x", ",", "y", ")", "\n", "u", ",", "made_log_abs_dets", "=", "self", ".", "mademog", "(", "u", ",", "y", ")", "\n", "sum_log_abs_det_jacobians", "=", "maf_log_abs_dets", ".", "unsqueeze", "(", "1", ")", "+", "made_log_abs_dets", "\n", "return", "u", ",", "sum_log_abs_det_jacobians", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.MAFMOG.inverse": [[580, 585], ["made_model.MAFMOG.mademog.inverse", "made_model.MAFMOG.maf.inverse", "maf_log_abs_dets.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MAFMOG.inverse", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MAFMOG.inverse"], ["", "def", "inverse", "(", "self", ",", "u", ",", "y", "=", "None", ")", ":", "\n", "        ", "x", ",", "made_log_abs_dets", "=", "self", ".", "mademog", ".", "inverse", "(", "u", ",", "y", ")", "\n", "x", ",", "maf_log_abs_dets", "=", "self", ".", "maf", ".", "inverse", "(", "x", ",", "y", ")", "\n", "sum_log_abs_det_jacobians", "=", "maf_log_abs_dets", ".", "unsqueeze", "(", "1", ")", "+", "made_log_abs_dets", "\n", "return", "x", ",", "sum_log_abs_det_jacobians", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.MAFMOG.log_prob": [[586, 591], ["made_model.MAFMOG.forward", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp.sum", "torch.logsumexp.sum", "torch.logsumexp.sum", "made_model.MAFMOG.base_dist.log_prob"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.forward", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MAFMOG.log_prob"], ["", "def", "log_prob", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "u", ",", "log_abs_det_jacobian", "=", "self", ".", "forward", "(", "x", ",", "y", ")", "# u = (N,C,L); log_abs_det_jacobian = (N,C,L)", "\n", "# marginalize cluster probs", "\n", "log_probs", "=", "torch", ".", "logsumexp", "(", "self", ".", "mademog", ".", "logr", "+", "self", ".", "base_dist", ".", "log_prob", "(", "u", ")", "+", "log_abs_det_jacobian", ",", "dim", "=", "1", ")", "# out (N, L)", "\n", "return", "log_probs", ".", "sum", "(", "1", ")", "# out (N,)", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.MAF.__init__": [[594, 605], ["torch.Module.__init__", "made_model.MAF.register_buffer", "made_model.MAF.register_buffer", "range", "made_model.FlowSequential", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "made_model.MADE", "made_model.BatchNormFlow", "made_model.Reverse"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__"], ["def", "__init__", "(", "self", ",", "n_blocks", ",", "input_size", ",", "hidden_size", ",", "n_hidden", ",", "cond_label_size", "=", "None", ",", "activation", "=", "'relu'", ",", "\n", "input_order", "=", "'sequential'", ",", "batch_norm", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# base distribution for calculation of log prob under the model", "\n", "self", ".", "register_buffer", "(", "'base_dist_mean'", ",", "torch", ".", "zeros", "(", "input_size", ")", ")", "\n", "self", ".", "register_buffer", "(", "'base_dist_var'", ",", "torch", ".", "ones", "(", "input_size", ")", ")", "\n", "self", ".", "input_degrees", "=", "None", "\n", "modules", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_blocks", ")", ":", "\n", "            ", "modules", "+=", "[", "MADE", "(", "input_size", ",", "hidden_size", ",", "act", "=", "activation", ")", ",", "BatchNormFlow", "(", "input_size", ")", ",", "Reverse", "(", "input_size", ")", "]", "\n", "", "self", ".", "maf", "=", "FlowSequential", "(", "*", "modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.MAF.base_dist": [[610, 613], ["torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal"], "methods", ["None"], ["", "@", "property", "\n", "def", "base_dist", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "distributions", ".", "normal", ".", "Normal", "(", "self", ".", "base_dist_mean", ",", "self", ".", "base_dist_var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.MAF.forward": [[614, 618], ["made_model.MAF.maf"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "u", ",", "maf_log_abs_dets", "=", "self", ".", "maf", "(", "x", ",", "y", ")", "\n", "\n", "return", "u", ",", "maf_log_abs_dets", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.MAF.inverse": [[619, 622], ["made_model.MAF.maf.inverse"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MAFMOG.inverse"], ["", "def", "inverse", "(", "self", ",", "u", ",", "y", "=", "None", ")", ":", "\n", "        ", "x", ",", "maf_log_abs_dets", "=", "self", ".", "maf", ".", "inverse", "(", "u", ",", "y", ")", "\n", "return", "x", ",", "maf_log_abs_dets", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.MAF.log_prob": [[623, 628], ["made_model.MAF.forward", "log_probs.sum", "made_model.MAF.base_dist.log_prob"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.forward", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MAFMOG.log_prob"], ["", "def", "log_prob", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "u", ",", "log_abs_det_jacobian", "=", "self", ".", "forward", "(", "x", ",", "y", ")", "# u = (N,C,L); log_abs_det_jacobian = (N,C,L)", "\n", "# marginalize cluster probs", "\n", "log_probs", "=", "self", ".", "base_dist", ".", "log_prob", "(", "u", ")", "+", "log_abs_det_jacobian", "# out (N, L)", "\n", "return", "log_probs", ".", "sum", "(", "1", ")", "# out (N,)", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.FlowSequential.forward": [[638, 660], ["inputs.size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "made_model.FlowSequential._modules.values", "reversed", "inputs.size", "module", "made_model.FlowSequential._modules.values", "module"], "methods", ["None"], ["def", "forward", "(", "self", ",", "inputs", ",", "cond_inputs", "=", "None", ",", "mode", "=", "'direct'", ",", "logdets", "=", "None", ")", ":", "\n", "        ", "\"\"\" Performs a forward or backward pass for flow modules.\n        Args:\n            inputs: a tuple of inputs and logdets\n            mode: to run direct computation or inverse\n        \"\"\"", "\n", "self", ".", "num_inputs", "=", "inputs", ".", "size", "(", "-", "1", ")", "\n", "\n", "if", "logdets", "is", "None", ":", "\n", "            ", "logdets", "=", "torch", ".", "zeros", "(", "inputs", ".", "size", "(", "0", ")", ",", "1", ",", "device", "=", "inputs", ".", "device", ")", "\n", "\n", "", "assert", "mode", "in", "[", "'direct'", ",", "'inverse'", "]", "\n", "if", "mode", "==", "'direct'", ":", "\n", "            ", "for", "module", "in", "self", ".", "_modules", ".", "values", "(", ")", ":", "\n", "                ", "inputs", ",", "logdet", "=", "module", "(", "inputs", ",", "cond_inputs", ",", "mode", ")", "\n", "logdets", "+=", "logdet", "\n", "", "", "else", ":", "\n", "            ", "for", "module", "in", "reversed", "(", "self", ".", "_modules", ".", "values", "(", ")", ")", ":", "\n", "                ", "inputs", ",", "logdet", "=", "module", "(", "inputs", ",", "cond_inputs", ",", "mode", ")", "\n", "logdets", "+=", "logdet", "\n", "\n", "", "", "return", "inputs", ",", "logdets", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.FlowSequential.log_probs": [[661, 666], ["made_model.FlowSequential.", "u.pow", "math.log"], "methods", ["None"], ["", "def", "log_probs", "(", "self", ",", "inputs", ",", "cond_inputs", "=", "None", ")", ":", "\n", "        ", "u", ",", "log_jacob", "=", "self", "(", "inputs", ",", "cond_inputs", ")", "\n", "log_probs", "=", "(", "-", "0.5", "*", "u", ".", "pow", "(", "2", ")", "-", "0.5", "*", "math", ".", "log", "(", "2", "*", "math", ".", "pi", ")", ")", ".", "sum", "(", "\n", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "return", "(", "log_probs", "+", "log_jacob", ")", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.FlowSequential.sample": [[667, 676], ["torch.Tensor().normal_.to", "torch.Tensor().normal_.to", "torch.Tensor().normal_.to", "torch.Tensor().normal_", "torch.Tensor().normal_", "torch.Tensor().normal_", "torch.Tensor().normal_", "torch.Tensor().normal_", "torch.Tensor().normal_", "torch.Tensor().normal_", "torch.Tensor().normal_", "torch.Tensor().normal_", "next", "cond_inputs.to.to.to", "made_model.FlowSequential.forward", "made_model.FlowSequential.parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.forward"], ["", "def", "sample", "(", "self", ",", "num_samples", "=", "None", ",", "noise", "=", "None", ",", "cond_inputs", "=", "None", ")", ":", "\n", "        ", "if", "noise", "is", "None", ":", "\n", "            ", "noise", "=", "torch", ".", "Tensor", "(", "num_samples", ",", "self", ".", "num_inputs", ")", ".", "normal_", "(", ")", "\n", "", "device", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "device", "\n", "noise", "=", "noise", ".", "to", "(", "device", ")", "\n", "if", "cond_inputs", "is", "not", "None", ":", "\n", "            ", "cond_inputs", "=", "cond_inputs", ".", "to", "(", "device", ")", "\n", "", "samples", "=", "self", ".", "forward", "(", "noise", ",", "cond_inputs", ",", "mode", "=", "'inverse'", ")", "[", "0", "]", "\n", "return", "samples", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.get_mask": [[20, 38], ["torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "out_degrees.unsqueeze", "in_degrees.unsqueeze"], "function", ["None"], ["def", "get_mask", "(", "in_features", ",", "out_features", ",", "in_flow_features", ",", "mask_type", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    mask_type: input | None | output\n    \n    See Figure 1 for a better illustration:\n    https://arxiv.org/pdf/1502.03509.pdf\n    \"\"\"", "\n", "if", "mask_type", "==", "'input'", ":", "\n", "        ", "in_degrees", "=", "torch", ".", "arange", "(", "in_features", ")", "%", "in_flow_features", "\n", "", "else", ":", "\n", "        ", "in_degrees", "=", "torch", ".", "arange", "(", "in_features", ")", "%", "(", "in_flow_features", "-", "1", ")", "\n", "\n", "", "if", "mask_type", "==", "'output'", ":", "\n", "        ", "out_degrees", "=", "torch", ".", "arange", "(", "out_features", ")", "%", "in_flow_features", "-", "1", "\n", "", "else", ":", "\n", "        ", "out_degrees", "=", "torch", ".", "arange", "(", "out_features", ")", "%", "(", "in_flow_features", "-", "1", ")", "\n", "\n", "", "return", "(", "out_degrees", ".", "unsqueeze", "(", "-", "1", ")", ">=", "in_degrees", ".", "unsqueeze", "(", "0", ")", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.energy_model.CombinedDiscriminator.__init__": [[24, 28], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__"], ["    ", "def", "__init__", "(", "self", ",", "discriminator", ",", "generator", ")", ":", "\n", "        ", "super", "(", "CombinedDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "discriminator", "=", "discriminator", "\n", "self", ".", "generator", "=", "generator", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.energy_model.CombinedDiscriminator.forward": [[29, 32], ["energy_model.CombinedDiscriminator.discriminator", "energy_model.CombinedDiscriminator.generator.log_density"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.energy_model.GaussianGenerator.log_density"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "discriminator", "(", "x", ")", "+", "self", ".", "generator", ".", "log_density", "(", "x", ")", "\n", "return", "out", "\n", "", "def", "log_density", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.energy_model.CombinedDiscriminator.log_density": [[32, 38], ["energy_model.CombinedDiscriminator.discriminator.log_density", "energy_model.CombinedDiscriminator.generator.log_density", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.energy_model.GaussianGenerator.log_density", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.energy_model.GaussianGenerator.log_density"], ["", "def", "log_density", "(", "self", ",", "x", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "out", "=", "self", ".", "discriminator", ".", "log_density", "(", "x", ")", "-", "self", ".", "generator", ".", "log_density", "(", "x", ")", "\n", "return", "out", "\n", "", "except", ":", "\n", "            ", "return", "torch", ".", "sum", "(", "torch", ".", "zeros_like", "(", "x", ")", ",", "dim", "=", "1", ")", "\n", "", "", "def", "log_partition", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.energy_model.CombinedDiscriminator.log_partition": [[38, 44], ["energy_model.CombinedDiscriminator.discriminator.log_partition", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.energy_model.FlowGenerator.log_partition"], ["", "", "def", "log_partition", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "\n", "            ", "return", "self", ".", "discriminator", ".", "log_partition", "(", ")", "\n", "", "except", ":", "\n", "            ", "return", "torch", ".", "tensor", "(", "0.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.energy_model.Identity.__init__": [[46, 49], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__"], ["    ", "def", "__init__", "(", "self", ",", "max_val", ")", ":", "\n", "        ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "max", "=", "max_val", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.energy_model.Identity.forward": [[49, 51], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "", "def", "inverse", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.energy_model.Identity.inverse": [[51, 53], ["None"], "methods", ["None"], ["", "def", "inverse", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "", "def", "log_grad", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.energy_model.Identity.log_grad": [[53, 55], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["None"], ["", "def", "log_grad", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "torch", ".", "zeros_like", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.energy_model.MADEGenerator.__init__": [[61, 68], ["torch.nn.Module.__init__", "models.MADE", "models.MADE", "list", "energy_model.MADEGenerator.made.parameters"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dims", ",", "mode", "=", "'discriminator'", ")", ":", "\n", "        ", "super", "(", "MADEGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_inputs", "=", "dims", "[", "0", "]", "\n", "self", ".", "num_hidden", "=", "100", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "made", "=", "made", ".", "MADE", "(", "self", ".", "num_inputs", ",", "self", ".", "num_hidden", ",", "act", "=", "'lrelu'", ")", "\n", "self", ".", "params", "=", "list", "(", "self", ".", "made", ".", "parameters", "(", ")", ")", "\n", "", "def", "forward", "(", "self", ",", "z", ")", ":", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.energy_model.MADEGenerator.forward": [[68, 74], ["energy_model.MADEGenerator.made", "energy_model.MADEGenerator.log_partition", "energy_model.MADEGenerator.log_density"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.energy_model.FlowGenerator.log_partition", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.energy_model.GaussianGenerator.log_density"], ["", "def", "forward", "(", "self", ",", "z", ")", ":", "\n", "        ", "if", "self", ".", "mode", "==", "'generator'", ":", "\n", "            ", "u", ",", "a", "=", "self", ".", "made", "(", "z", ",", "mode", "=", "'inverse'", ")", "\n", "return", "u", "\n", "", "elif", "self", ".", "mode", "==", "'discriminator'", ":", "\n", "            ", "return", "-", "self", ".", "log_density", "(", "z", ")", "-", "self", ".", "log_partition", "(", ")", "\n", "", "", "def", "log_density", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.energy_model.MADEGenerator.log_density": [[74, 77], ["energy_model.MADEGenerator.made", "u.pow", "numpy.log"], "methods", ["None"], ["", "", "def", "log_density", "(", "self", ",", "x", ")", ":", "\n", "        ", "u", ",", "a", "=", "self", ".", "made", "(", "x", ")", "\n", "return", "a", "+", "(", "-", "0.5", "*", "u", ".", "pow", "(", "2", ")", "-", "0.5", "*", "np", ".", "log", "(", "2", "*", "np", ".", "pi", ")", ")", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.energy_model.MADEGenerator.log_partition": [[78, 82], ["torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "def", "log_partition", "(", "self", ")", ":", "\n", "        ", "abs_value", "=", "[", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "p", ")", ")", "for", "p", "in", "self", ".", "params", "]", "\n", "abs_value", "=", "torch", ".", "stack", "(", "abs_value", ",", "dim", "=", "0", ")", ".", "sum", "(", ")", "\n", "return", "-", "abs_value", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.energy_model.NVP.__init__": [[85, 114], ["torch.nn.Module.__init__", "mask.to().float.to().float.to().float", "range", "models.FlowSequential", "models.FlowSequential", "energy_model.Identity", "list", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "energy_model.NVP.model.parameters", "mask.to().float.to().float.to", "models.CouplingLayer", "models.CouplingLayer", "models.BatchNormFlow().to", "models.BatchNormFlow().to", "models.CouplingLayer", "models.CouplingLayer", "models.BatchNormFlow", "models.BatchNormFlow"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dims", ",", "device", ",", "num_blocks", ",", "mode", "=", "'generator'", ",", "with_bn", "=", "True", ")", ":", "\n", "        ", "super", "(", "NVP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "num_inputs", "=", "dims", "[", "0", "]", "\n", "num_hidden", "=", "100", "\n", "mask", "=", "torch", ".", "arange", "(", "0", ",", "num_inputs", ")", "%", "2", "\n", "mask", "=", "mask", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "num_cond_inputs", "=", "None", "\n", "modules", "=", "[", "]", "\n", "num_blocks", "=", "5", "\n", "for", "_", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "if", "with_bn", ":", "\n", "                ", "modules", "+=", "[", "\n", "made", ".", "CouplingLayer", "(", "\n", "num_inputs", ",", "num_hidden", ",", "mask", ",", "num_cond_inputs", ",", "\n", "s_act", "=", "'tanh'", ",", "t_act", "=", "'relu'", ")", ",", "\n", "made", ".", "BatchNormFlow", "(", "num_inputs", ",", "device", "=", "device", ")", ".", "to", "(", "device", ")", "\n", "]", "\n", "", "else", ":", "\n", "                ", "modules", "+=", "[", "\n", "made", ".", "CouplingLayer", "(", "\n", "num_inputs", ",", "num_hidden", ",", "mask", ",", "num_cond_inputs", ",", "\n", "s_act", "=", "'tanh'", ",", "t_act", "=", "'relu'", ")", "\n", "]", "\n", "", "mask", "=", "1", "-", "mask", "\n", "", "self", ".", "model", "=", "made", ".", "FlowSequential", "(", "*", "modules", ")", "\n", "self", ".", "max", "=", "10", "\n", "self", ".", "non_linearity", "=", "Identity", "(", "self", ".", "max", ")", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "params", "=", "list", "(", "self", ".", "model", ".", "parameters", "(", ")", ")", "\n", "", "def", "forward", "(", "self", ",", "z", ")", ":", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.energy_model.NVP.forward": [[114, 121], ["energy_model.NVP.non_linearity.inverse", "energy_model.NVP.model", "energy_model.NVP.log_partition", "energy_model.NVP.log_density"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MAFMOG.inverse", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.energy_model.FlowGenerator.log_partition", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.energy_model.GaussianGenerator.log_density"], ["", "def", "forward", "(", "self", ",", "z", ")", ":", "\n", "        ", "if", "self", ".", "mode", "==", "'generator'", ":", "\n", "            ", "z", "=", "self", ".", "non_linearity", ".", "inverse", "(", "z", ")", "\n", "u", ",", "a", "=", "self", ".", "model", "(", "z", ",", "mode", "=", "'inverse'", ")", "\n", "return", "u", "\n", "", "elif", "self", ".", "mode", "==", "'discriminator'", ":", "\n", "            ", "return", "-", "self", ".", "log_density", "(", "z", ")", "-", "self", ".", "log_partition", "(", ")", "\n", "", "", "def", "log_density", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.energy_model.NVP.log_density": [[121, 127], ["energy_model.NVP.model", "energy_model.NVP.non_linearity.log_grad().sum", "energy_model.NVP.non_linearity.log_grad", "energy_model.NVP.non_linearity().pow", "numpy.log", "energy_model.NVP.non_linearity"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.energy_model.Identity.log_grad"], ["", "", "def", "log_density", "(", "self", ",", "x", ")", ":", "\n", "        ", "u", ",", "log_jacob", "=", "self", ".", "model", "(", "x", ")", "\n", "log_probs", "=", "self", ".", "non_linearity", ".", "log_grad", "(", "u", ")", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", "+", "log_jacob", "\n", "log_probs", "+=", "(", "-", "0.5", "*", "self", ".", "non_linearity", "(", "u", ")", ".", "pow", "(", "2", ")", "-", "0.5", "*", "np", ".", "log", "(", "2", "*", "np", ".", "pi", ")", ")", ".", "sum", "(", "\n", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "return", "log_probs", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.energy_model.NVP.log_partition": [[128, 132], ["torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "def", "log_partition", "(", "self", ")", ":", "\n", "        ", "abs_value", "=", "[", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "p", ")", ")", "for", "p", "in", "self", ".", "params", "]", "\n", "abs_value", "=", "torch", ".", "stack", "(", "abs_value", ",", "dim", "=", "0", ")", ".", "sum", "(", ")", "\n", "return", "-", "abs_value", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.energy_model.FlowGenerator.__init__": [[134, 155], ["torch.nn.Module.__init__", "mask.to().float.to().float.to().float", "energy_model.Identity", "list", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "models.mog_maf_model.MAFMOG", "models.mog_maf_model.MAFMOG", "energy_model.FlowGenerator.model.parameters", "mask.to().float.to().float.to", "models.mog_maf_model.MAF", "models.mog_maf_model.MAF", "models.MADE", "models.MADE"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dims", ",", "device", ",", "num_blocks", ",", "flow_type", ",", "mode", "=", "'generator'", ",", "with_bn", "=", "True", ")", ":", "\n", "        ", "super", "(", "FlowGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "num_inputs", "=", "dims", "[", "0", "]", "\n", "hidden_size", "=", "100", "\n", "mask", "=", "torch", ".", "arange", "(", "0", ",", "num_inputs", ")", "%", "2", "\n", "mask", "=", "mask", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "num_cond_inputs", "=", "None", "\n", "modules", "=", "[", "]", "\n", "num_blocks", "=", "5", "\n", "self", ".", "n_components", "=", "10", "\n", "n_hidden", "=", "1", "\n", "if", "flow_type", "==", "'mogmaf'", ":", "\n", "            ", "self", ".", "model", "=", "MAFMOG", "(", "num_blocks", ",", "self", ".", "n_components", ",", "num_inputs", ",", "hidden_size", ",", "n_hidden", ",", "batch_norm", "=", "with_bn", ")", "\n", "", "elif", "flow_type", "==", "'maf'", ":", "\n", "            ", "self", ".", "model", "=", "MAF", "(", "num_blocks", ",", "num_inputs", ",", "hidden_size", ",", "n_hidden", ",", "batch_norm", "=", "with_bn", ")", "\n", "", "elif", "flow_type", "==", "'made'", ":", "\n", "            ", "self", ".", "model", "=", "made", ".", "MADE", "(", "num_inputs", ",", "hidden_size", ",", "act", "=", "'lrelu'", ")", "\n", "", "self", ".", "max", "=", "10", "\n", "self", ".", "non_linearity", "=", "Identity", "(", "self", ".", "max", ")", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "params", "=", "list", "(", "self", ".", "model", ".", "parameters", "(", ")", ")", "\n", "", "def", "forward", "(", "self", ",", "z", ")", ":", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.energy_model.FlowGenerator.forward": [[155, 162], ["z.unsqueeze().repeat", "energy_model.FlowGenerator.model.inverse", "z.unsqueeze", "energy_model.FlowGenerator.log_partition", "energy_model.FlowGenerator.log_density"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MAFMOG.inverse", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.energy_model.FlowGenerator.log_partition", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.energy_model.GaussianGenerator.log_density"], ["", "def", "forward", "(", "self", ",", "z", ")", ":", "\n", "        ", "if", "self", ".", "mode", "==", "'generator'", ":", "\n", "            ", "Z", "=", "z", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "n_components", ",", "1", ")", "\n", "u", ",", "a", "=", "self", ".", "model", ".", "inverse", "(", "Z", ")", "\n", "return", "u", "\n", "", "elif", "self", ".", "mode", "==", "'discriminator'", ":", "\n", "            ", "return", "-", "self", ".", "log_density", "(", "z", ")", "-", "self", ".", "log_partition", "(", ")", "\n", "", "", "def", "log_density", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.energy_model.FlowGenerator.log_density": [[162, 164], ["energy_model.FlowGenerator.model.log_prob"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MAFMOG.log_prob"], ["", "", "def", "log_density", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "log_prob", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.energy_model.FlowGenerator.log_partition": [[165, 169], ["torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "def", "log_partition", "(", "self", ")", ":", "\n", "        ", "abs_value", "=", "[", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "p", ")", ")", "for", "p", "in", "self", ".", "params", "]", "\n", "abs_value", "=", "torch", ".", "stack", "(", "abs_value", ",", "dim", "=", "0", ")", ".", "sum", "(", ")", "\n", "return", "-", "abs_value", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.energy_model.GaussianGenerator.__init__": [[198, 207], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dims", ")", ":", "\n", "        ", "super", "(", "GaussianGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "z_dim", "=", "dims", "[", "0", "]", "\n", "\n", "self", ".", "linear_var", "=", "nn", ".", "Parameter", "(", "1.", "*", "torch", ".", "ones", "(", "[", "self", ".", "z_dim", "]", ")", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "[", "self", ".", "z_dim", "]", ")", ")", "\n", "self", ".", "lmbda", "=", "1e-3", "\n", "#self.Sigma= None", "\n", "self", ".", "dist", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.energy_model.GaussianGenerator.forward": [[208, 212], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z", ")", ":", "\n", "        ", "out", "=", "z", "*", "self", ".", "linear_var", "**", "2", "\n", "out", "=", "out", "+", "self", ".", "lmbda", "*", "z", "+", "self", ".", "bias", "\n", "return", "out", "\n", "", "def", "log_density", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.energy_model.GaussianGenerator.log_density": [[212, 220], ["torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "quad.unsqueeze.unsqueeze.unsqueeze", "torch.log().sum", "torch.log().sum", "torch.log().sum", "torch.log().sum", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["None"], ["", "def", "log_density", "(", "self", ",", "x", ")", ":", "\n", "        ", "Sigma", "=", "self", ".", "linear_var", "**", "2", "+", "self", ".", "lmbda", "\n", "Sigma", "=", "Sigma", "**", "2", "\n", "location", "=", "(", "x", "-", "self", ".", "bias", ")", "\n", "quad", "=", "torch", ".", "einsum", "(", "'nd,nd,d->n'", ",", "location", ",", "location", ",", "1.", "/", "Sigma", ")", "\n", "quad", "=", "quad", ".", "unsqueeze", "(", "-", "1", ")", "\n", "value", "=", "(", "-", "0.5", "*", "quad", "-", "0.5", "*", "torch", ".", "log", "(", "2.", "*", "np", ".", "pi", "*", "Sigma", ")", ".", "sum", "(", ")", ")", "\n", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.energy_model.Discriminator.__init__": [[359, 385], ["torch.nn.Module.__init__", "int", "models.get_mask", "models.get_mask", "models.get_mask", "models.get_mask", "models.get_mask", "models.get_mask", "energy_model.MaskedLinear", "energy_model.MaskedLinear", "energy_model.MaskedLinear", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.get_mask", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.get_mask", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.get_mask", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.get_mask", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.get_mask", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.get_mask"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "device", ")", ":", "\n", "        ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "kernel_size", "=", "3", "\n", "d_1", ",", "d_2", ",", "d_3", "=", "100", ",", "200", ",", "100", "\n", "d_0", "=", "int", "(", "dim", ")", "\n", "\n", "mask_1", "=", "made", ".", "get_mask", "(", "d_0", ",", "d_1", ",", "d_0", "+", "1", ",", "mask_type", "=", "'input'", ")", "\n", "mask_2", "=", "made", ".", "get_mask", "(", "d_1", ",", "d_2", ",", "d_0", ")", "\n", "#mask_2 = made.get_mask(d_2, d_3, d_0)", "\n", "mask_3", "=", "made", ".", "get_mask", "(", "d_2", ",", "d_3", ",", "d_0", ",", "mask_type", "=", "'output'", ")", "\n", "\n", "\n", "self", ".", "linear1", "=", "MaskedLinear", "(", "d_0", ",", "d_1", ",", "mask_1", ",", "device", ")", "\n", "self", ".", "linear2", "=", "MaskedLinear", "(", "d_1", ",", "d_2", ",", "mask_2", ",", "device", ")", "\n", "self", ".", "linear3", "=", "MaskedLinear", "(", "d_2", ",", "d_3", ",", "mask_3", ",", "device", ")", "\n", "#self.linear4 = MaskedLinear(d_4, d_4, mask_4,device)", "\n", "\n", "\n", "#self.linear1 = Linear(d_0, d_1, mask_1,device)", "\n", "#self.linear2 = Linear(d_1, d_2, mask_2,device)", "\n", "#self.linear3 = Linear(d_2, d_3, mask_3,device)", "\n", "\n", "\n", "#self.linear4 = spectral_norm(nn.Linear(d_3, 1))", "\n", "self", ".", "linear4", "=", "spectral_norm", "(", "nn", ".", "Linear", "(", "d_3", ",", "1", ")", ")", "\n", "self", ".", "max", "=", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.energy_model.Discriminator.forward": [[387, 398], ["energy_model.Discriminator.linear4", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "energy_model.Discriminator.linear1", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "energy_model.Discriminator.linear2", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "energy_model.Discriminator.linear3", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "m", "=", "x", "\n", "\n", "m", "=", "nn", ".", "LeakyReLU", "(", "leak", ")", "(", "self", ".", "linear1", "(", "m", ")", ")", "\n", "m", "=", "nn", ".", "LeakyReLU", "(", "leak", ")", "(", "self", ".", "linear2", "(", "m", ")", ")", "\n", "m", "=", "nn", ".", "LeakyReLU", "(", "leak", ")", "(", "self", ".", "linear3", "(", "m", ")", ")", "\n", "#m = nn.LeakyReLU(leak)(self.linear4(m))", "\n", "\n", "m", "=", "self", ".", "linear4", "(", "m", ")", "\n", "m", "=", "nn", ".", "ReLU", "(", ")", "(", "m", "+", "self", ".", "max", ")", "-", "self", ".", "max", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.energy_model.MaskedLinear.__init__": [[453, 459], ["torch.nn.Module.__init__", "torch.nn.Linear().to", "torch.nn.Linear().to", "energy_model.MaskedLinear.register_buffer", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "mask", ",", "device", ")", ":", "\n", "        ", "super", "(", "MaskedLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "#self.linear = spectral_norm(nn.Linear(in_features, out_features))", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "in_features", ",", "out_features", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "register_buffer", "(", "'mask'", ",", "mask", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.energy_model.MaskedLinear.forward": [[459, 463], ["torch.linear", "torch.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "linear", "(", "x", ",", "self", ".", "linear", ".", "weight", "*", "self", ".", "mask", ",", "\n", "self", ".", "linear", ".", "bias", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.energy_model.Discriminator4.__init__": [[415, 436], ["torch.nn.Module.__init__", "int", "models.get_mask", "models.get_mask", "models.get_mask", "models.get_mask", "models.get_mask", "models.get_mask", "models.get_mask", "models.get_mask", "energy_model.MaskedLinear", "energy_model.MaskedLinear", "energy_model.MaskedLinear", "energy_model.MaskedLinear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.get_mask", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.get_mask", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.get_mask", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.get_mask", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.get_mask", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.get_mask", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.get_mask", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.get_mask"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "device", ")", ":", "\n", "        ", "super", "(", "Discriminator4", ",", "self", ")", ".", "__init__", "(", ")", "\n", "kernel_size", "=", "3", "\n", "d_1", ",", "d_2", ",", "d_3", ",", "d_4", "=", "100", ",", "200", ",", "200", ",", "100", "\n", "d_0", "=", "int", "(", "dim", ")", "\n", "\n", "mask_1", "=", "made", ".", "get_mask", "(", "d_0", ",", "d_1", ",", "d_0", "+", "1", ",", "mask_type", "=", "'input'", ")", "\n", "mask_2", "=", "made", ".", "get_mask", "(", "d_1", ",", "d_2", ",", "d_0", ")", "\n", "mask_3", "=", "made", ".", "get_mask", "(", "d_2", ",", "d_3", ",", "d_0", ")", "\n", "mask_4", "=", "made", ".", "get_mask", "(", "d_3", ",", "d_4", ",", "d_0", ",", "mask_type", "=", "'output'", ")", "\n", "\n", "\n", "self", ".", "linear1", "=", "MaskedLinear", "(", "d_0", ",", "d_1", ",", "mask_1", ",", "device", ")", "\n", "self", ".", "linear2", "=", "MaskedLinear", "(", "d_1", ",", "d_2", ",", "mask_2", ",", "device", ")", "\n", "self", ".", "linear3", "=", "MaskedLinear", "(", "d_2", ",", "d_3", ",", "mask_3", ",", "device", ")", "\n", "self", ".", "linear4", "=", "MaskedLinear", "(", "d_3", ",", "d_4", ",", "mask_4", ",", "device", ")", "\n", "\n", "\n", "\n", "self", ".", "linear5", "=", "nn", ".", "Linear", "(", "d_4", ",", "1", ")", "\n", "self", ".", "max", "=", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.energy_model.Discriminator4.forward": [[438, 449], ["energy_model.Discriminator4.linear5", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "energy_model.Discriminator4.linear1", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "energy_model.Discriminator4.linear2", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "energy_model.Discriminator4.linear3", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "energy_model.Discriminator4.linear4", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "m", "=", "x", "\n", "\n", "m", "=", "nn", ".", "LeakyReLU", "(", "leak", ")", "(", "self", ".", "linear1", "(", "m", ")", ")", "\n", "m", "=", "nn", ".", "LeakyReLU", "(", "leak", ")", "(", "self", ".", "linear2", "(", "m", ")", ")", "\n", "m", "=", "nn", ".", "LeakyReLU", "(", "leak", ")", "(", "self", ".", "linear3", "(", "m", ")", ")", "\n", "m", "=", "nn", ".", "LeakyReLU", "(", "leak", ")", "(", "self", ".", "linear4", "(", "m", ")", ")", "\n", "\n", "m", "=", "self", ".", "linear5", "(", "m", ")", "\n", "m", "=", "nn", ".", "ReLU", "(", ")", "(", "m", "+", "self", ".", "max", ")", "-", "self", ".", "max", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.generator.Generator.__init__": [[7, 145], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.ConvTranspose2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.Tanh", "torch.nn.Sequential", "torch.nn.ConvTranspose2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.Tanh", "generator.conv_sizes", "torch.nn.Linear", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.Sequential", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.Tanh", "torch.nn.Linear", "torch.nn.Conv2d", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.Sequential", "NotImplementedError", "generator.ResBlockGenerator", "generator.ResBlockGenerator", "generator.ResBlockGenerator", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.Tanh"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.generator.conv_sizes"], ["    ", "def", "__init__", "(", "self", ",", "nz", "=", "100", ",", "nn_type", "=", "'dcgan'", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "nn_type", "=", "nn_type", "\n", "\n", "nc", "=", "3", "\n", "ngf", "=", "64", "\n", "\n", "# z_dim is latent variable dimension for generator", "\n", "self", ".", "z_dim", "=", "nz", "\n", "\n", "if", "nn_type", "==", "'dcgan'", ":", "\n", "# adapted from pytorch website", "\n", "# https://pytorch.org/tutorials/beginner/dcgan_faces_tutorial.html#implementation", "\n", "\n", "# defaults", "\n", "            ", "nc", "=", "3", "\n", "ngf", "=", "64", "\n", "\n", "# nc = number of channels", "\n", "# ngf = number of generator filters", "\n", "\n", "if", "'nc'", "in", "kwargs", ":", "\n", "                ", "nc", "=", "kwargs", "[", "'nc'", "]", "\n", "", "if", "'ndf'", "in", "kwargs", ":", "\n", "                ", "ndf", "=", "kwargs", "[", "'ndf'", "]", "\n", "\n", "", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "# input is Z, going into a convolution", "\n", "nn", ".", "ConvTranspose2d", "(", "nz", ",", "ngf", "*", "8", ",", "4", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ngf", "*", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "# state size. (ngf*8) x 4 x 4", "\n", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "8", ",", "ngf", "*", "4", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ngf", "*", "4", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "# state size. (ngf*4) x 8 x 8", "\n", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "4", ",", "ngf", "*", "2", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ngf", "*", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "# state size. (ngf*2) x 16 x 16", "\n", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "2", ",", "ngf", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ngf", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "ngf", ",", "nc", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n", "\n", "", "elif", "nn_type", "==", "'dcgan-sn'", ":", "\n", "# adapted from https://github.com/christiancosgrove/pytorch-spectral-normalization-gan", "\n", "# with spectral norm from pytorch", "\n", "\n", "\n", "\n", "            ", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "#nn.Linear(z_dim,)", "\n", "nn", ".", "ConvTranspose2d", "(", "nz", ",", "512", ",", "4", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "512", ",", "256", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "256", ",", "128", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "128", ",", "64", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "64", ",", "nc", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "# range between -1 and 1", "\n", ")", "\n", "\n", "\n", "", "elif", "nn_type", "==", "'sngan'", ":", "\n", "\n", "            ", "self", ".", "gen_size", "=", "64", "\n", "s1", ",", "s2", ",", "s4", ",", "s8", ",", "s16", "=", "conv_sizes", "(", "32", ",", "layers", "=", "4", ",", "stride", "=", "2", ")", "\n", "self", ".", "s8", "=", "s8", "\n", "\n", "conv_size", "=", "4", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "self", ".", "z_dim", ",", "s8", "*", "s8", "*", "8", "*", "self", ".", "gen_size", ")", "\n", "conv_1", "=", "nn", ".", "ConvTranspose2d", "(", "self", ".", "gen_size", "*", "8", ",", "self", ".", "gen_size", "*", "4", ",", "conv_size", ",", "stride", "=", "2", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "conv_2", "=", "nn", ".", "ConvTranspose2d", "(", "self", ".", "gen_size", "*", "4", ",", "self", ".", "gen_size", "*", "2", ",", "conv_size", ",", "stride", "=", "2", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "conv_3", "=", "nn", ".", "ConvTranspose2d", "(", "self", ".", "gen_size", "*", "2", ",", "self", ".", "gen_size", ",", "conv_size", ",", "stride", "=", "2", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "conv_4", "=", "nn", ".", "ConvTranspose2d", "(", "self", ".", "gen_size", ",", "nc", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "(", "1", ",", "1", ")", ")", "\n", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "dense", ".", "weight", ".", "data", ",", "1.", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "conv_1", ".", "weight", ".", "data", ",", "1.", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "conv_2", ".", "weight", ".", "data", ",", "1.", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "conv_3", ".", "weight", ".", "data", ",", "1.", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "conv_4", ".", "weight", ".", "data", ",", "1.", ")", "\n", "\n", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "gen_size", "*", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "conv_1", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "gen_size", "*", "4", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "conv_2", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "gen_size", "*", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "conv_3", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "gen_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "conv_4", ",", "\n", "nn", ".", "Tanh", "(", ")", "# range between -1 and 1", "\n", ")", "\n", "\n", "\n", "\n", "\n", "\n", "", "elif", "nn_type", "==", "'resnet-sn'", ":", "\n", "# adapted from https://github.com/christiancosgrove/pytorch-spectral-normalization-gan", "\n", "# with spectral norm from pytorch", "\n", "\n", "            ", "self", ".", "gen_size", "=", "128", "\n", "\n", "nc", "=", "3", "\n", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "self", ".", "z_dim", ",", "4", "*", "4", "*", "self", ".", "gen_size", ")", "\n", "self", ".", "final", "=", "nn", ".", "Conv2d", "(", "self", ".", "gen_size", ",", "nc", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "dense", ".", "weight", ".", "data", ",", "1.", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "final", ".", "weight", ".", "data", ",", "1.", ")", "\n", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "ResBlockGenerator", "(", "self", ".", "gen_size", ",", "self", ".", "gen_size", ",", "stride", "=", "2", ")", ",", "\n", "ResBlockGenerator", "(", "self", ".", "gen_size", ",", "self", ".", "gen_size", ",", "stride", "=", "2", ")", ",", "\n", "ResBlockGenerator", "(", "self", ".", "gen_size", ",", "self", ".", "gen_size", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "gen_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "self", ".", "final", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.generator.Generator.forward": [[147, 161], ["generator.Generator.main", "input.view", "generator.Generator.main", "generator.Generator.dense().view", "generator.Generator.dense().view", "generator.Generator.main", "generator.Generator.dense().view", "generator.Generator.main", "generator.Generator.dense", "generator.Generator.dense", "generator.Generator.dense"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.main", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.main", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.main", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.main"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "nn_type", "in", "[", "'dcgan'", ",", "'dcgan-sn'", "]", ":", "\n", "            ", "output", "=", "self", ".", "main", "(", "input", ".", "view", "(", "-", "1", ",", "self", ".", "z_dim", ",", "1", ",", "1", ")", ")", "\n", "", "elif", "self", ".", "nn_type", "in", "[", "'spectral-resnet'", "]", ":", "\n", "            ", "output", "=", "self", ".", "main", "(", "self", ".", "dense", "(", "input", ")", ".", "view", "(", "-", "1", ",", "self", ".", "gen_size", ",", "4", ",", "4", ")", ")", "\n", "", "elif", "self", ".", "nn_type", "in", "[", "'sngan'", "]", ":", "\n", "            ", "output", "=", "self", ".", "dense", "(", "input", ")", ".", "view", "(", "-", "1", ",", "self", ".", "gen_size", "*", "8", ",", "self", ".", "s8", ",", "self", ".", "s8", ")", "\n", "output", "=", "self", ".", "main", "(", "output", ")", "\n", "", "elif", "self", ".", "nn_type", "in", "[", "'resnet-sn'", "]", ":", "\n", "            ", "output", "=", "self", ".", "dense", "(", "input", ")", ".", "view", "(", "-", "1", ",", "self", ".", "gen_size", ",", "4", ",", "4", ")", "\n", "output", "=", "self", ".", "main", "(", "output", ")", "\n", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.generator.ResBlockGenerator.__init__": [[170, 190], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.Upsample", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.Upsample"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "ResBlockGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "3", ",", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "out_channels", ",", "out_channels", ",", "3", ",", "1", ",", "padding", "=", "1", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "conv1", ".", "weight", ".", "data", ",", "1.", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "conv2", ".", "weight", ".", "data", ",", "1.", ")", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "BatchNorm2d", "(", "in_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ")", ",", "\n", "self", ".", "conv1", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "self", ".", "conv2", "\n", ")", "\n", "self", ".", "bypass", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", ":", "\n", "            ", "self", ".", "bypass", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.generator.ResBlockGenerator.forward": [[191, 193], ["generator.ResBlockGenerator.model", "generator.ResBlockGenerator.bypass"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "+", "self", ".", "bypass", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.generator.BigGANwrapper.__init__": [[195, 201], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "truncation", ")", ":", "\n", "        ", "super", "(", "BigGANwrapper", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "truncation", "=", "truncation", "\n", "self", ".", "num_classes", "=", "1000", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.generator.BigGANwrapper.forward": [[203, 208], ["torch.one_hot().float", "generator.BigGANwrapper.model", "torch.one_hot"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "latent", ")", ":", "\n", "        ", "x", ",", "targets", "=", "latent", "\n", "labels", "=", "F", ".", "one_hot", "(", "targets", ",", "num_classes", "=", "self", ".", "num_classes", ")", ".", "float", "(", ")", "\n", "\n", "return", "self", ".", "model", "(", "x", ",", "labels", ",", "self", ".", "truncation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.generator.conv_sizes": [[209, 214], ["range", "tuple", "int", "s.append", "int", "numpy.ceil", "float", "float"], "function", ["None"], ["", "", "def", "conv_sizes", "(", "size", ",", "layers", ",", "stride", "=", "2", ")", ":", "\n", "    ", "s", "=", "[", "int", "(", "size", ")", "]", "\n", "for", "l", "in", "range", "(", "layers", ")", ":", "\n", "        ", "s", ".", "append", "(", "int", "(", "np", ".", "ceil", "(", "float", "(", "s", "[", "-", "1", "]", ")", "/", "float", "(", "stride", ")", ")", ")", ")", "\n", "", "return", "tuple", "(", "s", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MaskedLinear.__init__": [[41, 49], ["torch.Linear.__init__", "mog_maf_model.MaskedLinear.register_buffer", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__"], ["def", "__init__", "(", "self", ",", "input_size", ",", "n_outputs", ",", "mask", ",", "cond_label_size", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "input_size", ",", "n_outputs", ")", "\n", "\n", "self", ".", "register_buffer", "(", "'mask'", ",", "mask", ")", "\n", "\n", "self", ".", "cond_label_size", "=", "cond_label_size", "\n", "if", "cond_label_size", "is", "not", "None", ":", "\n", "            ", "self", ".", "cond_weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "rand", "(", "n_outputs", ",", "cond_label_size", ")", "/", "math", ".", "sqrt", "(", "cond_label_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MaskedLinear.forward": [[50, 55], ["torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "out", "=", "F", ".", "linear", "(", "x", ",", "self", ".", "weight", "*", "self", ".", "mask", ",", "self", ".", "bias", ")", "\n", "if", "y", "is", "not", "None", ":", "\n", "            ", "out", "=", "out", "+", "F", ".", "linear", "(", "y", ",", "self", ".", "cond_weight", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MaskedLinear.extra_repr": [[56, 60], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "'in_features={}, out_features={}, bias={}'", ".", "format", "(", "\n", "self", ".", "in_features", ",", "self", ".", "out_features", ",", "self", ".", "bias", "is", "not", "None", "\n", ")", "+", "(", "self", ".", "cond_label_size", "!=", "None", ")", "*", "', cond_features={}'", ".", "format", "(", "self", ".", "cond_label_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.LinearMaskedCoupling.__init__": [[64, 81], ["torch.Module.__init__", "mog_maf_model.LinearMaskedCoupling.register_buffer", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "copy.deepcopy", "range", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "len", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "isinstance", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__"], ["def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "n_hidden", ",", "mask", ",", "cond_label_size", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "register_buffer", "(", "'mask'", ",", "mask", ")", "\n", "\n", "# scale function", "\n", "s_net", "=", "[", "nn", ".", "Linear", "(", "input_size", "+", "(", "cond_label_size", "if", "cond_label_size", "is", "not", "None", "else", "0", ")", ",", "hidden_size", ")", "]", "\n", "for", "_", "in", "range", "(", "n_hidden", ")", ":", "\n", "            ", "s_net", "+=", "[", "nn", ".", "Tanh", "(", ")", ",", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ")", "]", "\n", "", "s_net", "+=", "[", "nn", ".", "Tanh", "(", ")", ",", "nn", ".", "Linear", "(", "hidden_size", ",", "input_size", ")", "]", "\n", "self", ".", "s_net", "=", "nn", ".", "Sequential", "(", "*", "s_net", ")", "\n", "\n", "# translation function", "\n", "self", ".", "t_net", "=", "copy", ".", "deepcopy", "(", "self", ".", "s_net", ")", "\n", "# replace Tanh with ReLU's per MAF paper", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "t_net", ")", ")", ":", "\n", "            ", "if", "not", "isinstance", "(", "self", ".", "t_net", "[", "i", "]", ",", "nn", ".", "Linear", ")", ":", "self", ".", "t_net", "[", "i", "]", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.LinearMaskedCoupling.forward": [[82, 94], ["mog_maf_model.LinearMaskedCoupling.s_net", "mog_maf_model.LinearMaskedCoupling.t_net", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "# apply mask", "\n", "        ", "mx", "=", "x", "*", "self", ".", "mask", "\n", "\n", "# run through model", "\n", "s", "=", "self", ".", "s_net", "(", "mx", "if", "y", "is", "None", "else", "torch", ".", "cat", "(", "[", "y", ",", "mx", "]", ",", "dim", "=", "1", ")", ")", "\n", "t", "=", "self", ".", "t_net", "(", "mx", "if", "y", "is", "None", "else", "torch", ".", "cat", "(", "[", "y", ",", "mx", "]", ",", "dim", "=", "1", ")", ")", "\n", "u", "=", "mx", "+", "(", "1", "-", "self", ".", "mask", ")", "*", "(", "x", "-", "t", ")", "*", "torch", ".", "exp", "(", "-", "s", ")", "# cf RealNVP eq 8 where u corresponds to x (here we're modeling u)", "\n", "\n", "log_abs_det_jacobian", "=", "-", "(", "1", "-", "self", ".", "mask", ")", "*", "s", "# log det du/dx; cf RealNVP 8 and 6; note, sum over input_size done at model log_prob", "\n", "\n", "return", "u", ",", "log_abs_det_jacobian", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.LinearMaskedCoupling.inverse": [[95, 107], ["mog_maf_model.LinearMaskedCoupling.s_net", "mog_maf_model.LinearMaskedCoupling.t_net", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mog_maf_model.LinearMaskedCoupling.exp"], "methods", ["None"], ["", "def", "inverse", "(", "self", ",", "u", ",", "y", "=", "None", ")", ":", "\n", "# apply mask", "\n", "        ", "mu", "=", "u", "*", "self", ".", "mask", "\n", "\n", "# run through model", "\n", "s", "=", "self", ".", "s_net", "(", "mu", "if", "y", "is", "None", "else", "torch", ".", "cat", "(", "[", "y", ",", "mu", "]", ",", "dim", "=", "1", ")", ")", "\n", "t", "=", "self", ".", "t_net", "(", "mu", "if", "y", "is", "None", "else", "torch", ".", "cat", "(", "[", "y", ",", "mu", "]", ",", "dim", "=", "1", ")", ")", "\n", "x", "=", "mu", "+", "(", "1", "-", "self", ".", "mask", ")", "*", "(", "u", "*", "s", ".", "exp", "(", ")", "+", "t", ")", "# cf RealNVP eq 7", "\n", "\n", "log_abs_det_jacobian", "=", "(", "1", "-", "self", ".", "mask", ")", "*", "s", "# log det dx/du", "\n", "\n", "return", "x", ",", "log_abs_det_jacobian", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.BatchNorm.__init__": [[111, 121], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "mog_maf_model.BatchNorm.register_buffer", "mog_maf_model.BatchNorm.register_buffer", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__"], ["def", "__init__", "(", "self", ",", "input_size", ",", "momentum", "=", "0.9", ",", "eps", "=", "1e-5", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "eps", "=", "eps", "\n", "\n", "self", ".", "log_gamma", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "input_size", ")", ")", "\n", "self", ".", "beta", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "input_size", ")", ")", "\n", "\n", "self", ".", "register_buffer", "(", "'running_mean'", ",", "torch", ".", "zeros", "(", "input_size", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_var'", ",", "torch", ".", "ones", "(", "input_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.BatchNorm.forward": [[122, 146], ["x.mean", "x.var", "mog_maf_model.BatchNorm.running_mean.mul_().add_", "mog_maf_model.BatchNorm.running_var.mul_().add_", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "log_abs_det_jacobian.expand_as", "mog_maf_model.BatchNorm.log_gamma.exp", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "mog_maf_model.BatchNorm.running_mean.mul_", "mog_maf_model.BatchNorm.running_var.mul_"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "cond_y", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "self", ".", "batch_mean", "=", "x", ".", "mean", "(", "0", ")", "\n", "self", ".", "batch_var", "=", "x", ".", "var", "(", "0", ")", "# note MAF paper uses biased variance estimate; ie x.var(0, unbiased=False)", "\n", "\n", "# update running mean", "\n", "self", ".", "running_mean", ".", "mul_", "(", "self", ".", "momentum", ")", ".", "add_", "(", "self", ".", "batch_mean", ".", "data", "*", "(", "1", "-", "self", ".", "momentum", ")", ")", "\n", "self", ".", "running_var", ".", "mul_", "(", "self", ".", "momentum", ")", ".", "add_", "(", "self", ".", "batch_var", ".", "data", "*", "(", "1", "-", "self", ".", "momentum", ")", ")", "\n", "\n", "mean", "=", "self", ".", "batch_mean", "\n", "var", "=", "self", ".", "batch_var", "\n", "", "else", ":", "\n", "            ", "mean", "=", "self", ".", "running_mean", "\n", "var", "=", "self", ".", "running_var", "\n", "\n", "# compute normalized input (cf original batch norm paper algo 1)", "\n", "", "x_hat", "=", "(", "x", "-", "mean", ")", "/", "torch", ".", "sqrt", "(", "var", "+", "self", ".", "eps", ")", "\n", "y", "=", "self", ".", "log_gamma", ".", "exp", "(", ")", "*", "x_hat", "+", "self", ".", "beta", "\n", "\n", "# compute log_abs_det_jacobian (cf RealNVP paper)", "\n", "log_abs_det_jacobian", "=", "self", ".", "log_gamma", "-", "0.5", "*", "torch", ".", "log", "(", "var", "+", "self", ".", "eps", ")", "\n", "#        print('in sum log var {:6.3f} ; out sum log var {:6.3f}; sum log det {:8.3f}; mean log_gamma {:5.3f}; mean beta {:5.3f}'.format(", "\n", "#            (var + self.eps).log().sum().data.numpy(), y.var(0).log().sum().data.numpy(), log_abs_det_jacobian.mean(0).item(), self.log_gamma.mean(), self.beta.mean()))", "\n", "return", "y", ",", "log_abs_det_jacobian", ".", "expand_as", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.BatchNorm.inverse": [[147, 161], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "log_abs_det_jacobian.expand_as", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["None"], ["", "def", "inverse", "(", "self", ",", "y", ",", "cond_y", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "mean", "=", "self", ".", "batch_mean", "\n", "var", "=", "self", ".", "batch_var", "\n", "", "else", ":", "\n", "            ", "mean", "=", "self", ".", "running_mean", "\n", "var", "=", "self", ".", "running_var", "\n", "\n", "", "x_hat", "=", "(", "y", "-", "self", ".", "beta", ")", "*", "torch", ".", "exp", "(", "-", "self", ".", "log_gamma", ")", "\n", "x", "=", "x_hat", "*", "torch", ".", "sqrt", "(", "var", "+", "self", ".", "eps", ")", "+", "mean", "\n", "\n", "log_abs_det_jacobian", "=", "0.5", "*", "torch", ".", "log", "(", "var", "+", "self", ".", "eps", ")", "-", "self", ".", "log_gamma", "\n", "\n", "return", "x", ",", "log_abs_det_jacobian", ".", "expand_as", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.FlowSequential.forward": [[165, 171], ["module"], "methods", ["None"], ["def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "sum_log_abs_det_jacobians", "=", "0", "\n", "for", "module", "in", "self", ":", "\n", "            ", "x", ",", "log_abs_det_jacobian", "=", "module", "(", "x", ",", "y", ")", "\n", "sum_log_abs_det_jacobians", "=", "sum_log_abs_det_jacobians", "+", "log_abs_det_jacobian", "\n", "", "return", "x", ",", "sum_log_abs_det_jacobians", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.FlowSequential.inverse": [[172, 178], ["reversed", "module.inverse"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MAFMOG.inverse"], ["", "def", "inverse", "(", "self", ",", "u", ",", "y", ")", ":", "\n", "        ", "sum_log_abs_det_jacobians", "=", "0", "\n", "for", "module", "in", "reversed", "(", "self", ")", ":", "\n", "            ", "u", ",", "log_abs_det_jacobian", "=", "module", ".", "inverse", "(", "u", ",", "y", ")", "\n", "sum_log_abs_det_jacobians", "=", "sum_log_abs_det_jacobians", "+", "log_abs_det_jacobian", "\n", "", "return", "u", ",", "sum_log_abs_det_jacobians", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MADE.__init__": [[187, 224], ["torch.Module.__init__", "mog_maf_model.MADE.register_buffer", "mog_maf_model.MADE.register_buffer", "mog_maf_model.create_masks", "mog_maf_model.MaskedLinear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "mog_maf_model.MaskedLinear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "mog_maf_model.MaskedLinear", "masks[].repeat", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "ValueError"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.create_masks"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "n_hidden", ",", "cond_label_size", "=", "None", ",", "activation", "=", "'relu'", ",", "input_order", "=", "'sequential'", ",", "input_degrees", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            input_size -- scalar; dim of inputs\n            hidden_size -- scalar; dim of hidden layers\n            n_hidden -- scalar; number of hidden layers\n            activation -- str; activation function to use\n            input_order -- str or tensor; variable order for creating the autoregressive masks (sequential|random)\n                            or the order flipped from the previous layer in a stack of mades\n            conditional -- bool; whether model is conditional\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# base distribution for calculation of log prob under the model", "\n", "self", ".", "register_buffer", "(", "'base_dist_mean'", ",", "torch", ".", "zeros", "(", "input_size", ")", ")", "\n", "self", ".", "register_buffer", "(", "'base_dist_var'", ",", "torch", ".", "ones", "(", "input_size", ")", ")", "\n", "\n", "# create masks", "\n", "masks", ",", "self", ".", "input_degrees", "=", "create_masks", "(", "input_size", ",", "hidden_size", ",", "n_hidden", ",", "input_order", ",", "input_degrees", ")", "\n", "\n", "# setup activation", "\n", "if", "activation", "==", "'relu'", ":", "\n", "            ", "activation_fn", "=", "nn", ".", "ReLU", "(", ")", "\n", "", "elif", "activation", "==", "'tanh'", ":", "\n", "            ", "activation_fn", "=", "nn", ".", "Tanh", "(", ")", "\n", "", "elif", "activation", "==", "'lrelu'", ":", "\n", "            ", "leak", "=", "0.1", "\n", "activation_fn", "=", "nn", ".", "LeakyReLU", "(", "leak", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Check activation function.'", ")", "\n", "\n", "# construct model", "\n", "", "self", ".", "net_input", "=", "MaskedLinear", "(", "input_size", ",", "hidden_size", ",", "masks", "[", "0", "]", ",", "cond_label_size", ")", "\n", "self", ".", "net", "=", "[", "]", "\n", "for", "m", "in", "masks", "[", "1", ":", "-", "1", "]", ":", "\n", "            ", "self", ".", "net", "+=", "[", "activation_fn", ",", "MaskedLinear", "(", "hidden_size", ",", "hidden_size", ",", "m", ")", "]", "\n", "", "self", ".", "net", "+=", "[", "activation_fn", ",", "MaskedLinear", "(", "hidden_size", ",", "2", "*", "input_size", ",", "masks", "[", "-", "1", "]", ".", "repeat", "(", "2", ",", "1", ")", ")", "]", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "net", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MADE.base_dist": [[225, 228], ["torch.Normal", "torch.Normal", "torch.Normal", "torch.Normal"], "methods", ["None"], ["", "@", "property", "\n", "def", "base_dist", "(", "self", ")", ":", "\n", "        ", "return", "D", ".", "Normal", "(", "self", ".", "base_dist_mean", ",", "self", ".", "base_dist_var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MADE.forward": [[229, 236], ["mog_maf_model.MADE.net().chunk", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "mog_maf_model.MADE.net", "mog_maf_model.MADE.net_input"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "# MAF eq 4 -- return mean and log std", "\n", "        ", "m", ",", "loga", "=", "self", ".", "net", "(", "self", ".", "net_input", "(", "x", ",", "y", ")", ")", ".", "chunk", "(", "chunks", "=", "2", ",", "dim", "=", "1", ")", "\n", "u", "=", "(", "x", "-", "m", ")", "*", "torch", ".", "exp", "(", "-", "loga", ")", "\n", "# MAF eq 5", "\n", "log_abs_det_jacobian", "=", "-", "loga", "\n", "return", "u", ",", "log_abs_det_jacobian", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MADE.inverse": [[237, 247], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "mog_maf_model.MADE.net().chunk", "mog_maf_model.MADE.net", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "mog_maf_model.MADE.net_input"], "methods", ["None"], ["", "def", "inverse", "(", "self", ",", "u", ",", "y", "=", "None", ",", "sum_log_abs_det_jacobians", "=", "None", ")", ":", "\n", "# MAF eq 3", "\n", "        ", "D", "=", "u", ".", "shape", "[", "1", "]", "\n", "x", "=", "torch", ".", "zeros_like", "(", "u", ")", "\n", "# run through reverse model", "\n", "for", "i", "in", "self", ".", "input_degrees", ":", "\n", "            ", "m", ",", "loga", "=", "self", ".", "net", "(", "self", ".", "net_input", "(", "x", ",", "y", ")", ")", ".", "chunk", "(", "chunks", "=", "2", ",", "dim", "=", "1", ")", "\n", "x", "[", ":", ",", "i", "]", "=", "u", "[", ":", ",", "i", "]", "*", "torch", ".", "exp", "(", "loga", "[", ":", ",", "i", "]", ")", "+", "m", "[", ":", ",", "i", "]", "\n", "", "log_abs_det_jacobian", "=", "loga", "\n", "return", "x", ",", "log_abs_det_jacobian", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MADE.log_prob": [[248, 251], ["mog_maf_model.MADE.forward", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "mog_maf_model.MADE.base_dist.log_prob"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.forward", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MAFMOG.log_prob"], ["", "def", "log_prob", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "u", ",", "log_abs_det_jacobian", "=", "self", ".", "forward", "(", "x", ",", "y", ")", "\n", "return", "torch", ".", "sum", "(", "self", ".", "base_dist", ".", "log_prob", "(", "u", ")", "+", "log_abs_det_jacobian", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MADEMOG.__init__": [[255, 292], ["torch.Module.__init__", "mog_maf_model.MADEMOG.register_buffer", "mog_maf_model.MADEMOG.register_buffer", "mog_maf_model.create_masks", "mog_maf_model.MaskedLinear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "mog_maf_model.MaskedLinear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "ValueError", "mog_maf_model.MaskedLinear", "masks[].repeat"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.create_masks"], ["def", "__init__", "(", "self", ",", "n_components", ",", "input_size", ",", "hidden_size", ",", "n_hidden", ",", "cond_label_size", "=", "None", ",", "activation", "=", "'relu'", ",", "input_order", "=", "'sequential'", ",", "input_degrees", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            n_components -- scalar; number of gauassian components in the mixture\n            input_size -- scalar; dim of inputs\n            hidden_size -- scalar; dim of hidden layers\n            n_hidden -- scalar; number of hidden layers\n            activation -- str; activation function to use\n            input_order -- str or tensor; variable order for creating the autoregressive masks (sequential|random)\n                            or the order flipped from the previous layer in a stack of mades\n            conditional -- bool; whether model is conditional\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_components", "=", "n_components", "\n", "\n", "# base distribution for calculation of log prob under the model", "\n", "self", ".", "register_buffer", "(", "'base_dist_mean'", ",", "torch", ".", "zeros", "(", "input_size", ")", ")", "\n", "self", ".", "register_buffer", "(", "'base_dist_var'", ",", "torch", ".", "ones", "(", "input_size", ")", ")", "\n", "\n", "# create masks", "\n", "masks", ",", "self", ".", "input_degrees", "=", "create_masks", "(", "input_size", ",", "hidden_size", ",", "n_hidden", ",", "input_order", ",", "input_degrees", ")", "\n", "\n", "# setup activation", "\n", "if", "activation", "==", "'relu'", ":", "\n", "            ", "activation_fn", "=", "nn", ".", "ReLU", "(", ")", "\n", "", "elif", "activation", "==", "'tanh'", ":", "\n", "            ", "activation_fn", "=", "nn", ".", "Tanh", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Check activation function.'", ")", "\n", "\n", "# construct model", "\n", "", "self", ".", "net_input", "=", "MaskedLinear", "(", "input_size", ",", "hidden_size", ",", "masks", "[", "0", "]", ",", "cond_label_size", ")", "\n", "self", ".", "net", "=", "[", "]", "\n", "for", "m", "in", "masks", "[", "1", ":", "-", "1", "]", ":", "\n", "            ", "self", ".", "net", "+=", "[", "activation_fn", ",", "MaskedLinear", "(", "hidden_size", ",", "hidden_size", ",", "m", ")", "]", "\n", "", "self", ".", "net", "+=", "[", "activation_fn", ",", "MaskedLinear", "(", "hidden_size", ",", "n_components", "*", "3", "*", "input_size", ",", "masks", "[", "-", "1", "]", ".", "repeat", "(", "n_components", "*", "3", ",", "1", ")", ")", "]", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "net", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MADEMOG.base_dist": [[293, 296], ["torch.Normal", "torch.Normal", "torch.Normal", "torch.Normal"], "methods", ["None"], ["", "@", "property", "\n", "def", "base_dist", "(", "self", ")", ":", "\n", "        ", "return", "D", ".", "Normal", "(", "self", ".", "base_dist_mean", ",", "self", ".", "base_dist_var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MADEMOG.forward": [[297, 311], ["mog_maf_model.MADEMOG.net().view().chunk", "x.repeat().view.repeat().view.repeat().view", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "logr.logsumexp", "mog_maf_model.MADEMOG.net().view", "x.repeat().view.repeat().view.repeat", "mog_maf_model.MADEMOG.net", "mog_maf_model.MADEMOG.net_input"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "# shapes", "\n", "        ", "N", ",", "L", "=", "x", ".", "shape", "\n", "C", "=", "self", ".", "n_components", "\n", "# MAF eq 2 -- parameters of Gaussians - mean, logsigma, log unnormalized cluster probabilities", "\n", "m", ",", "loga", ",", "logr", "=", "self", ".", "net", "(", "self", ".", "net_input", "(", "x", ",", "y", ")", ")", ".", "view", "(", "N", ",", "C", ",", "3", "*", "L", ")", ".", "chunk", "(", "chunks", "=", "3", ",", "dim", "=", "-", "1", ")", "# out 3 x (N, C, L)", "\n", "# MAF eq 4", "\n", "x", "=", "x", ".", "repeat", "(", "1", ",", "C", ")", ".", "view", "(", "N", ",", "C", ",", "L", ")", "# out (N, C, L)", "\n", "u", "=", "(", "x", "-", "m", ")", "*", "torch", ".", "exp", "(", "-", "loga", ")", "# out (N, C, L)", "\n", "# MAF eq 5", "\n", "log_abs_det_jacobian", "=", "-", "loga", "# out (N, C, L)", "\n", "# normalize cluster responsibilities", "\n", "self", ".", "logr", "=", "logr", "-", "logr", ".", "logsumexp", "(", "1", ",", "keepdim", "=", "True", ")", "# out (N, C, L)", "\n", "return", "u", ",", "log_abs_det_jacobian", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MADEMOG.inverse": [[312, 330], ["torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "mog_maf_model.MADEMOG.net().view().chunk", "torch.Categorical().sample().unsqueeze", "torch.Categorical().sample().unsqueeze", "torch.Categorical().sample().unsqueeze", "torch.Categorical().sample().unsqueeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "logr.logsumexp", "mog_maf_model.MADEMOG.net().view", "torch.Categorical().sample", "torch.Categorical().sample", "torch.Categorical().sample", "torch.Categorical().sample", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "mog_maf_model.MADEMOG.net", "torch.Categorical", "torch.Categorical", "torch.Categorical", "torch.Categorical", "mog_maf_model.MADEMOG.net_input"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.FlowSequential.sample", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.FlowSequential.sample", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.FlowSequential.sample", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.FlowSequential.sample"], ["", "def", "inverse", "(", "self", ",", "u", ",", "y", "=", "None", ",", "sum_log_abs_det_jacobians", "=", "None", ")", ":", "\n", "# shapes", "\n", "        ", "N", ",", "C", ",", "L", "=", "u", ".", "shape", "\n", "# init output", "\n", "x", "=", "torch", ".", "zeros", "(", "N", ",", "L", ")", ".", "to", "(", "u", ".", "device", ")", "\n", "# MAF eq 3", "\n", "# run through reverse model along each L", "\n", "for", "i", "in", "self", ".", "input_degrees", ":", "\n", "            ", "m", ",", "loga", ",", "logr", "=", "self", ".", "net", "(", "self", ".", "net_input", "(", "x", ",", "y", ")", ")", ".", "view", "(", "N", ",", "C", ",", "3", "*", "L", ")", ".", "chunk", "(", "chunks", "=", "3", ",", "dim", "=", "-", "1", ")", "# out 3 x (N, C, L)", "\n", "# normalize cluster responsibilities and sample cluster assignments from a categorical dist", "\n", "logr", "=", "logr", "-", "logr", ".", "logsumexp", "(", "1", ",", "keepdim", "=", "True", ")", "# out (N, C, L)", "\n", "z", "=", "D", ".", "Categorical", "(", "logits", "=", "logr", "[", ":", ",", ":", ",", "i", "]", ")", ".", "sample", "(", ")", ".", "unsqueeze", "(", "-", "1", ")", "# out (N, 1)", "\n", "u_z", "=", "torch", ".", "gather", "(", "u", "[", ":", ",", ":", ",", "i", "]", ",", "1", ",", "z", ")", ".", "squeeze", "(", ")", "# out (N, 1)", "\n", "m_z", "=", "torch", ".", "gather", "(", "m", "[", ":", ",", ":", ",", "i", "]", ",", "1", ",", "z", ")", ".", "squeeze", "(", ")", "# out (N, 1)", "\n", "loga_z", "=", "torch", ".", "gather", "(", "loga", "[", ":", ",", ":", ",", "i", "]", ",", "1", ",", "z", ")", ".", "squeeze", "(", ")", "\n", "x", "[", ":", ",", "i", "]", "=", "u_z", "*", "torch", ".", "exp", "(", "loga_z", ")", "+", "m_z", "\n", "", "log_abs_det_jacobian", "=", "loga", "\n", "return", "x", ",", "log_abs_det_jacobian", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MADEMOG.log_prob": [[331, 336], ["mog_maf_model.MADEMOG.forward", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp.sum", "torch.logsumexp.sum", "torch.logsumexp.sum", "torch.logsumexp.sum", "mog_maf_model.MADEMOG.base_dist.log_prob"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.forward", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MAFMOG.log_prob"], ["", "def", "log_prob", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "u", ",", "log_abs_det_jacobian", "=", "self", ".", "forward", "(", "x", ",", "y", ")", "# u = (N,C,L); log_abs_det_jacobian = (N,C,L)", "\n", "# marginalize cluster probs", "\n", "log_probs", "=", "torch", ".", "logsumexp", "(", "self", ".", "logr", "+", "self", ".", "base_dist", ".", "log_prob", "(", "u", ")", "+", "log_abs_det_jacobian", ",", "dim", "=", "1", ")", "# sum over C; out (N, L)", "\n", "return", "log_probs", ".", "sum", "(", "1", ")", "# sum over L; out (N,)", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MAF.__init__": [[339, 354], ["torch.Module.__init__", "mog_maf_model.MAF.register_buffer", "mog_maf_model.MAF.register_buffer", "range", "mog_maf_model.FlowSequential", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "modules[].input_degrees.flip", "mog_maf_model.MADE", "mog_maf_model.BatchNorm"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_blocks", ",", "input_size", ",", "hidden_size", ",", "n_hidden", ",", "cond_label_size", "=", "None", ",", "activation", "=", "'relu'", ",", "input_order", "=", "'sequential'", ",", "batch_norm", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# base distribution for calculation of log prob under the model", "\n", "self", ".", "register_buffer", "(", "'base_dist_mean'", ",", "torch", ".", "zeros", "(", "input_size", ")", ")", "\n", "self", ".", "register_buffer", "(", "'base_dist_var'", ",", "torch", ".", "ones", "(", "input_size", ")", ")", "\n", "\n", "# construct model", "\n", "modules", "=", "[", "]", "\n", "self", ".", "input_degrees", "=", "None", "\n", "for", "i", "in", "range", "(", "n_blocks", ")", ":", "\n", "            ", "modules", "+=", "[", "MADE", "(", "input_size", ",", "hidden_size", ",", "n_hidden", ",", "cond_label_size", ",", "activation", ",", "input_order", ",", "self", ".", "input_degrees", ")", "]", "\n", "self", ".", "input_degrees", "=", "modules", "[", "-", "1", "]", ".", "input_degrees", ".", "flip", "(", "0", ")", "\n", "modules", "+=", "batch_norm", "*", "[", "BatchNorm", "(", "input_size", ")", "]", "\n", "\n", "", "self", ".", "net", "=", "FlowSequential", "(", "*", "modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MAF.base_dist": [[355, 358], ["torch.Normal", "torch.Normal", "torch.Normal", "torch.Normal"], "methods", ["None"], ["", "@", "property", "\n", "def", "base_dist", "(", "self", ")", ":", "\n", "        ", "return", "D", ".", "Normal", "(", "self", ".", "base_dist_mean", ",", "self", ".", "base_dist_var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MAF.forward": [[359, 361], ["mog_maf_model.MAF.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "x", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MAF.inverse": [[362, 364], ["mog_maf_model.MAF.net.inverse"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MAFMOG.inverse"], ["", "def", "inverse", "(", "self", ",", "u", ",", "y", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "net", ".", "inverse", "(", "u", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MAF.log_prob": [[365, 368], ["mog_maf_model.MAF.forward", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "mog_maf_model.MAF.base_dist.log_prob"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.forward", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MAFMOG.log_prob"], ["", "def", "log_prob", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "u", ",", "sum_log_abs_det_jacobians", "=", "self", ".", "forward", "(", "x", ",", "y", ")", "\n", "return", "torch", ".", "sum", "(", "self", ".", "base_dist", ".", "log_prob", "(", "u", ")", "+", "sum_log_abs_det_jacobians", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MAFMOG.__init__": [[371, 382], ["torch.Module.__init__", "mog_maf_model.MAFMOG.register_buffer", "mog_maf_model.MAFMOG.register_buffer", "mog_maf_model.MAF", "mog_maf_model.MADEMOG", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__"], ["def", "__init__", "(", "self", ",", "n_blocks", ",", "n_components", ",", "input_size", ",", "hidden_size", ",", "n_hidden", ",", "cond_label_size", "=", "None", ",", "activation", "=", "'relu'", ",", "\n", "input_order", "=", "'sequential'", ",", "batch_norm", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# base distribution for calculation of log prob under the model", "\n", "self", ".", "register_buffer", "(", "'base_dist_mean'", ",", "torch", ".", "zeros", "(", "input_size", ")", ")", "\n", "self", ".", "register_buffer", "(", "'base_dist_var'", ",", "torch", ".", "ones", "(", "input_size", ")", ")", "\n", "\n", "self", ".", "maf", "=", "MAF", "(", "n_blocks", ",", "input_size", ",", "hidden_size", ",", "n_hidden", ",", "cond_label_size", ",", "activation", ",", "input_order", ",", "batch_norm", ")", "\n", "# get reversed input order from the last layer (note in maf model, input_degrees are already flipped in for-loop model constructor", "\n", "input_degrees", "=", "self", ".", "maf", ".", "input_degrees", "#.flip(0)", "\n", "self", ".", "mademog", "=", "MADEMOG", "(", "n_components", ",", "input_size", ",", "hidden_size", ",", "n_hidden", ",", "cond_label_size", ",", "activation", ",", "input_order", ",", "input_degrees", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MAFMOG.base_dist": [[383, 386], ["torch.Normal", "torch.Normal", "torch.Normal", "torch.Normal"], "methods", ["None"], ["", "@", "property", "\n", "def", "base_dist", "(", "self", ")", ":", "\n", "        ", "return", "D", ".", "Normal", "(", "self", ".", "base_dist_mean", ",", "self", ".", "base_dist_var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MAFMOG.forward": [[387, 392], ["mog_maf_model.MAFMOG.maf", "mog_maf_model.MAFMOG.mademog", "maf_log_abs_dets.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "u", ",", "maf_log_abs_dets", "=", "self", ".", "maf", "(", "x", ",", "y", ")", "\n", "u", ",", "made_log_abs_dets", "=", "self", ".", "mademog", "(", "u", ",", "y", ")", "\n", "sum_log_abs_det_jacobians", "=", "maf_log_abs_dets", ".", "unsqueeze", "(", "1", ")", "+", "made_log_abs_dets", "\n", "return", "u", ",", "sum_log_abs_det_jacobians", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MAFMOG.inverse": [[393, 398], ["mog_maf_model.MAFMOG.mademog.inverse", "mog_maf_model.MAFMOG.maf.inverse", "maf_log_abs_dets.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MAFMOG.inverse", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MAFMOG.inverse"], ["", "def", "inverse", "(", "self", ",", "u", ",", "y", "=", "None", ")", ":", "\n", "        ", "x", ",", "made_log_abs_dets", "=", "self", ".", "mademog", ".", "inverse", "(", "u", ",", "y", ")", "\n", "x", ",", "maf_log_abs_dets", "=", "self", ".", "maf", ".", "inverse", "(", "x", ",", "y", ")", "\n", "sum_log_abs_det_jacobians", "=", "maf_log_abs_dets", ".", "unsqueeze", "(", "1", ")", "+", "made_log_abs_dets", "\n", "return", "x", ",", "sum_log_abs_det_jacobians", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MAFMOG.log_prob": [[399, 404], ["mog_maf_model.MAFMOG.forward", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp.sum().unsqueeze", "torch.logsumexp.sum().unsqueeze", "torch.logsumexp.sum().unsqueeze", "torch.logsumexp.sum().unsqueeze", "torch.logsumexp.sum", "torch.logsumexp.sum", "torch.logsumexp.sum", "torch.logsumexp.sum", "mog_maf_model.MAFMOG.base_dist.log_prob"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.forward", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.MAFMOG.log_prob"], ["", "def", "log_prob", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "u", ",", "log_abs_det_jacobian", "=", "self", ".", "forward", "(", "x", ",", "y", ")", "# u = (N,C,L); log_abs_det_jacobian = (N,C,L)", "\n", "# marginalinze cluster probs", "\n", "log_probs", "=", "torch", ".", "logsumexp", "(", "self", ".", "mademog", ".", "logr", "+", "self", ".", "base_dist", ".", "log_prob", "(", "u", ")", "+", "log_abs_det_jacobian", ",", "dim", "=", "1", ")", "# out (N, L)", "\n", "return", "log_probs", ".", "sum", "(", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "# out (N,)", "", "", "", ""]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.mog_maf_model.create_masks": [[10, 37], ["zip", "range", "range", "min", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "min", "degrees[].min().item", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "torch.randperm().to", "degrees[].min().item", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "degrees[].min", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "d1.unsqueeze", "d0.unsqueeze", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "degrees[].min", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "function", ["None"], ["def", "create_masks", "(", "input_size", ",", "hidden_size", ",", "n_hidden", ",", "input_order", "=", "'sequential'", ",", "input_degrees", "=", "None", ")", ":", "\n", "# MADE paper sec 4:", "\n", "# degrees of connections between layers -- ensure at most in_degree - 1 connections", "\n", "    ", "degrees", "=", "[", "]", "\n", "\n", "# set input degrees to what is provided in args (the flipped order of the previous layer in a stack of mades);", "\n", "# else init input degrees based on strategy in input_order (sequential or random)", "\n", "if", "input_order", "==", "'sequential'", ":", "\n", "        ", "degrees", "+=", "[", "torch", ".", "arange", "(", "input_size", ")", ".", "to", "(", "torch", ".", "int64", ")", "]", "if", "input_degrees", "is", "None", "else", "[", "input_degrees", "]", "\n", "for", "_", "in", "range", "(", "n_hidden", "+", "1", ")", ":", "\n", "            ", "degrees", "+=", "[", "torch", ".", "arange", "(", "hidden_size", ")", "%", "(", "input_size", "-", "1", ")", "]", "\n", "", "degrees", "+=", "[", "torch", ".", "arange", "(", "input_size", ")", ".", "to", "(", "torch", ".", "int64", ")", "%", "input_size", "-", "1", "]", "if", "input_degrees", "is", "None", "else", "[", "input_degrees", "%", "input_size", "-", "1", "]", "\n", "\n", "", "elif", "input_order", "==", "'random'", ":", "\n", "        ", "degrees", "+=", "[", "torch", ".", "randperm", "(", "input_size", ")", ".", "to", "(", "torch", ".", "int64", ")", "]", "if", "input_degrees", "is", "None", "else", "[", "input_degrees", "]", "\n", "for", "_", "in", "range", "(", "n_hidden", "+", "1", ")", ":", "\n", "            ", "min_prev_degree", "=", "min", "(", "degrees", "[", "-", "1", "]", ".", "min", "(", ")", ".", "item", "(", ")", ",", "input_size", "-", "1", ")", "\n", "degrees", "+=", "[", "torch", ".", "randint", "(", "min_prev_degree", ",", "input_size", ",", "(", "hidden_size", ",", ")", ")", "]", "\n", "", "min_prev_degree", "=", "min", "(", "degrees", "[", "-", "1", "]", ".", "min", "(", ")", ".", "item", "(", ")", ",", "input_size", "-", "1", ")", "\n", "degrees", "+=", "[", "torch", ".", "randint", "(", "min_prev_degree", ",", "input_size", ",", "(", "input_size", ",", ")", ")", "-", "1", "]", "if", "input_degrees", "is", "None", "else", "[", "input_degrees", "-", "1", "]", "\n", "\n", "# construct masks", "\n", "", "masks", "=", "[", "]", "\n", "for", "(", "d0", ",", "d1", ")", "in", "zip", "(", "degrees", "[", ":", "-", "1", "]", ",", "degrees", "[", "1", ":", "]", ")", ":", "\n", "        ", "masks", "+=", "[", "(", "d1", ".", "unsqueeze", "(", "-", "1", ")", ">=", "d0", ".", "unsqueeze", "(", "0", ")", ")", ".", "float", "(", ")", "]", "\n", "\n", "", "return", "masks", ",", "degrees", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.toy_models.Generator.__init__": [[10, 22], ["torch.nn.Module.__init__", "torch.eye().float().to", "torch.eye().float().to", "torch.eye().float().to", "torch.eye().float().to", "torch.zeros().float().to", "torch.zeros().float().to", "torch.zeros().float().to", "torch.zeros().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.eye().float", "torch.eye().float", "torch.eye().float", "torch.eye().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", "=", "3", ",", "device", "=", "'cuda'", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "W", "=", "torch", ".", "eye", "(", "dim", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "U", "=", "torch", ".", "zeros", "(", "[", "dim", ",", "dim", "]", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "U", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "[", "1.", ",", "0", ",", "0", "]", ",", "[", "0", ",", "1.", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1.", "]", "]", ")", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "W", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "U", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "W", ".", "weight", ".", "data", "=", "W", "\n", "self", ".", "U", ".", "weight", ".", "data", "=", "U", "\n", "\n", "self", ".", "W", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.toy_models.Generator.forward": [[26, 35], ["torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.sum().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "torch.norm().unsqueeze", "toy_models.Generator.W", "toy_models.Generator.U", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "latent", ")", ":", "\n", "# latent is a gaussian in 3D", "\n", "# normalize to get a uniform on the sphere", "\n", "\n", "        ", "Z", "=", "latent", "/", "torch", ".", "norm", "(", "latent", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "U", "=", "self", ".", "W", "(", "Z", ")", "+", "self", ".", "U", "(", "Z", "**", "4", ")", "\n", "R", "=", "torch", ".", "sum", "(", "U", "**", "2", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "return", "R", "*", "Z", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.toy_models.Discriminator.__init__": [[37, 82], ["torch.nn.Module.__init__", "torch.randn().float().to", "torch.randn().float().to", "torch.randn().float().to", "torch.randn().float().to", "torch.randn().float().to", "torch.randn().float().to", "torch.randn().float().to", "torch.randn().float().to", "torch.randn().float().to", "torch.randn().float().to", "torch.randn().float().to", "torch.randn().float().to", "torch.randn().float().to", "torch.randn().float().to", "torch.randn().float().to", "torch.randn().float().to", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.ones().float().to", "torch.ones().float().to", "torch.ones().float().to", "torch.ones().float().to", "numpy.sqrt", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.randn().float", "torch.randn().float", "torch.randn().float", "torch.randn().float", "torch.randn().float", "torch.randn().float", "torch.randn().float", "torch.randn().float", "torch.randn().float", "torch.randn().float", "torch.randn().float", "torch.randn().float", "torch.randn().float", "torch.randn().float", "torch.randn().float", "torch.randn().float", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.utils.spectral_norm", "torch.nn.utils.spectral_norm", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "device", "=", "'cuda'", ",", "sn", "=", "True", ")", ":", "\n", "\n", "        ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "W_1", "=", "torch", ".", "randn", "(", "[", "dim", ",", "dim", "]", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "W_2", "=", "torch", ".", "randn", "(", "[", "dim", ",", "dim", "]", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "W_3", "=", "torch", ".", "randn", "(", "[", "dim", ",", "dim", "]", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "W_4", "=", "torch", ".", "randn", "(", "[", "dim", ",", "dim", "]", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "U", "=", "torch", ".", "ones", "(", "[", "dim", "]", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "/", "np", ".", "sqrt", "(", "dim", ")", "\n", "\n", "self", ".", "W_1", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ",", "bias", "=", "False", ")", "\n", "#self.W_2 = nn.Linear(dim,dim, bias=False)", "\n", "#self.W_3 = nn.Linear(dim,dim, bias=False)", "\n", "#self.W_4 = nn.Linear(dim,dim, bias=False)", "\n", "self", ".", "U", "=", "nn", ".", "Linear", "(", "dim", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "W_1", ".", "weight", ".", "data", "=", "W_1", "\n", "#self.W_2.weight.data = W_2", "\n", "#self.W_3.weight.data = W_3", "\n", "#self.W_4.weight.data = W_4", "\n", "self", ".", "U", ".", "weight", ".", "data", "=", "U", "\n", "\n", "\n", "self", ".", "leak", "=", "0.1", "\n", "self", ".", "sn", "=", "sn", "\n", "if", "self", ".", "sn", ":", "\n", "            ", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "spectral_norm", "(", "self", ".", "W_1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "self", ".", "leak", ")", ",", "\n", "#spectral_norm(self.W_2),", "\n", "#nn.LeakyReLU(self.leak),", "\n", "#spectral_norm(self.W_3),", "\n", "#nn.LeakyReLU(self.leak), ", "\n", "#spectral_norm(self.W_4),", "\n", "#nn.LeakyReLU(self.leak),  ", "\n", "spectral_norm", "(", "self", ".", "U", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "self", ".", "W_1", ",", "\n", "nn", ".", "LeakyReLU", "(", "self", ".", "leak", ")", ",", "\n", "#self.W_2,", "\n", "#nn.LeakyReLU(self.leak), ", "\n", "#self.W_3,", "\n", "#nn.LeakyReLU(self.leak), ", "\n", "#self.W_4,", "\n", "#nn.LeakyReLU(self.leak), ", "\n", "self", ".", "U", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.toy_models.Discriminator.forward": [[84, 87], ["toy_models.Discriminator.main"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.Trainer.main"], ["", "", "def", "forward", "(", "self", ",", "data", ")", ":", "\n", "\n", "        ", "return", "self", ".", "main", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.toy_models.BaseDataset.__init__": [[90, 141], ["Generator().to", "torch.eye().float().to", "torch.eye().float().to", "torch.eye().float().to", "torch.eye().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "Discriminator().to", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.linalg.svd", "numpy.linalg.svd", "numpy.linalg.svd", "numpy.linalg.svd", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.distributions.multivariate_normal.MultivariateNormal", "torch.distributions.multivariate_normal.MultivariateNormal", "torch.distributions.multivariate_normal.MultivariateNormal", "torch.distributions.multivariate_normal.MultivariateNormal", "samplers.Latent_potential", "samplers.MALA", "os.path.join", "numpy.array", "numpy.sqrt", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "os.path.exists", "toy_models.BaseDataset.make_data", "numpy.savez", "numpy.load", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "toy_models.Generator", "torch.eye().float", "torch.eye().float", "torch.eye().float", "torch.eye().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "toy_models.Discriminator", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "data.cpu().numpy", "latents.cpu().numpy", "noise.cpu().numpy", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.array", "data.cpu", "latents.cpu", "noise.cpu"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.toy_models.BaseDataset.make_data"], ["    ", "def", "__init__", "(", "self", ",", "N_samples", ",", "dtype", ",", "device", ",", "b_size", ",", "root", ")", ":", "\n", "        ", "self", ".", "total_size", "=", "N_samples", "\n", "self", ".", "cur_index", "=", "b_size", "\n", "self", ".", "b_size", "=", "b_size", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "N_samples", "=", "N_samples", "\n", "self", ".", "dtype", "=", "dtype", "\n", "D", "=", "3", "\n", "self", ".", "base", "=", "Generator", "(", "dim", "=", "D", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "base", ".", "W", ".", "weight", ".", "data", "=", "torch", ".", "eye", "(", "3", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "base", ".", "U", ".", "weight", ".", "data", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "[", "1.", ",", "0", ",", "0", "]", ",", "[", "0", ",", "1.", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1.", "]", "]", ")", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "energy", "=", "Discriminator", "(", "dim", "=", "D", ",", "sn", "=", "False", ")", ".", "to", "(", "device", ")", "\n", "W_1", "=", "np", ".", "array", "(", "[", "[", "0.1", ",", "-", "1.", ",", "-", "1.", "]", ",", "[", "-", "1.", ",", "0.1", ",", "-", "1.", "]", ",", "[", "-", "1.", ",", "-", "1.", ",", "0.1", "]", "]", ")", "\n", "W_2", "=", "np", ".", "array", "(", "[", "[", "-", "0.1", ",", "-", "1.", ",", "1.", "]", ",", "[", "-", "1.", ",", "-", "0.1", ",", "1.", "]", ",", "[", "1.", ",", "-", "1.", ",", "-", "0.1", "]", "]", ")", "\n", "W_3", "=", "np", ".", "array", "(", "[", "[", "-", "0.1", ",", "-", "1.", ",", "1.", "]", ",", "[", "-", "1.", ",", "-", "0.1", ",", "1.", "]", ",", "[", "1.", ",", "-", "1.", ",", "-", "0.1", "]", "]", ")", "\n", "W_4", "=", "np", ".", "array", "(", "[", "[", "0.1", ",", "-", "1.", ",", "-", "1.", "]", ",", "[", "-", "1.", ",", "0.1", ",", "-", "1.", "]", ",", "[", "-", "1.", ",", "-", "1.", ",", "0.1", "]", "]", ")", "\n", "U", "=", "np", ".", "array", "(", "[", "1.", ",", "1.", ",", "1.", "]", ")", "/", "np", ".", "sqrt", "(", "3", ")", "\n", "_", ",", "S_1", ",", "_", "=", "np", ".", "linalg", ".", "svd", "(", "W_1", ")", "\n", "_", ",", "S_2", ",", "_", "=", "np", ".", "linalg", ".", "svd", "(", "W_2", ")", "\n", "_", ",", "S_3", ",", "_", "=", "np", ".", "linalg", ".", "svd", "(", "W_3", ")", "\n", "_", ",", "S_4", ",", "_", "=", "np", ".", "linalg", ".", "svd", "(", "W_4", ")", "\n", "W_1", "=", "W_1", "/", "S_1", "[", "0", "]", "\n", "W_2", "=", "W_2", "/", "S_2", "[", "0", "]", "\n", "W_3", "=", "W_3", "/", "S_3", "[", "0", "]", "\n", "W_4", "=", "W_4", "/", "S_4", "[", "0", "]", "\n", "\n", "self", ".", "energy", ".", "W_1", ".", "weight", ".", "data", "=", "torch", ".", "from_numpy", "(", "W_1", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "#self.energy.W_2.weight.data = torch.from_numpy(W_2).float().to(self.device)", "\n", "#self.energy.W_3.weight.data = torch.from_numpy(W_3).float().to(self.device)", "\n", "#self.energy.W_4.weight.data = torch.from_numpy(W_4).float().to(self.device)", "\n", "\n", "\n", "self", ".", "energy", ".", "U", ".", "weight", ".", "data", "=", "torch", ".", "from_numpy", "(", "U", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "source", "=", "torch", ".", "distributions", ".", "multivariate_normal", ".", "MultivariateNormal", "(", "torch", ".", "zeros", "(", "[", "D", "]", ")", ".", "to", "(", "self", ".", "device", ")", ",", "torch", ".", "eye", "(", "D", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "self", ".", "latent_potential", "=", "samplers", ".", "Latent_potential", "(", "self", ".", "base", ",", "self", ".", "energy", ",", "self", ".", "source", ",", "1.", ")", "\n", "self", ".", "latent_sampler", "=", "samplers", ".", "MALA", "(", "self", ".", "latent_potential", ",", "T", "=", "1000", ",", "gamma", "=", "1e-3", ")", "\n", "\n", "file_name", "=", "'toy_data'", "\n", "data_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "file_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "data_path", "+", "'.npz'", ")", ":", "\n", "            ", "data", ",", "latents", ",", "noise", "=", "self", ".", "make_data", "(", ")", "\n", "np", ".", "savez", "(", "data_path", ",", "data", "=", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "latents", "=", "latents", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "noise", "=", "noise", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "dataset", "=", "np", ".", "load", "(", "data_path", "+", "'.npz'", ")", "\n", "self", ".", "data", "=", "torch", ".", "from_numpy", "(", "dataset", "[", "'data'", "]", ")", "\n", "self", ".", "latents", "=", "torch", ".", "from_numpy", "(", "dataset", "[", "'latents'", "]", ")", "\n", "self", ".", "noise", "=", "torch", ".", "from_numpy", "(", "dataset", "[", "'noise'", "]", ")", "\n", "", "self", ".", "counter", "=", "0", "\n", "", "def", "make_data", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.toy_models.BaseDataset.make_data": [[141, 147], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "toy_models.BaseDataset.sample_latents", "toy_models.BaseDataset.sample_data", "toy_models.BaseDataset.source.sample().cpu", "range", "toy_models.BaseDataset.source.sample", "int"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.toy_models.BaseDataset.sample_latents", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.toy_models.BaseDataset.sample_data", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.FlowSequential.sample"], ["", "def", "make_data", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "noise", "=", "torch", ".", "cat", "(", "[", "self", ".", "source", ".", "sample", "(", "[", "self", ".", "b_size", "]", ")", ".", "cpu", "(", ")", "for", "b", "in", "range", "(", "int", "(", "self", ".", "N_samples", "/", "self", ".", "b_size", ")", "+", "1", ")", "]", ",", "dim", "=", "0", ")", "\n", "self", ".", "latents", "=", "self", ".", "sample_latents", "(", "self", ".", "noise", ",", "T", "=", "100", ")", "\n", "self", ".", "data", "=", "self", ".", "sample_data", "(", "self", ".", "latents", ")", "\n", "return", "self", ".", "data", ",", "self", ".", "latents", ",", "self", ".", "noise", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.toy_models.BaseDataset.__len__": [[148, 150], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total_size", "\n", "", "def", "sample_latents", "(", "self", ",", "priors", ",", "T", ",", "with_acceptance", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.toy_models.BaseDataset.sample_latents": [[150, 167], ["enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "numpy.mean", "priors.split", "prior.clone().to.clone().to.clone().to", "toy_models.BaseDataset.latent_sampler.sample", "torch.cat.append", "torch.cat.append", "numpy.mean.append", "numpy.array", "prior.clone().to.clone().to.clone"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.made_model.FlowSequential.sample"], ["", "def", "sample_latents", "(", "self", ",", "priors", ",", "T", ",", "with_acceptance", "=", "False", ")", ":", "\n", "#return priors", "\n", "        ", "posteriors", "=", "[", "]", "\n", "avg_acceptences", "=", "[", "]", "\n", "for", "b", ",", "prior", "in", "enumerate", "(", "priors", ".", "split", "(", "self", ".", "b_size", ",", "dim", "=", "0", ")", ")", ":", "\n", "            ", "prior", "=", "prior", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "posterior", ",", "avg_acceptence", "=", "self", ".", "latent_sampler", ".", "sample", "(", "prior", ",", "sample_chain", "=", "False", ",", "T", "=", "T", ")", "\n", "posteriors", ".", "append", "(", "posterior", ")", "\n", "avg_acceptences", ".", "append", "(", "avg_acceptence", ")", "\n", "\n", "", "posteriors", "=", "torch", ".", "cat", "(", "posteriors", ",", "axis", "=", "0", ")", "\n", "avg_acceptences", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "avg_acceptences", ")", ",", "axis", "=", "0", ")", "\n", "\n", "if", "with_acceptance", ":", "\n", "            ", "return", "posteriors", ",", "avg_acceptences", "\n", "", "else", ":", "\n", "            ", "return", "posteriors", "\n", "", "", "def", "sample_data", "(", "self", ",", "latents", ",", "to_cpu", "=", "True", ",", "as_list", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.toy_models.BaseDataset.sample_data": [[167, 181], ["toy_models.BaseDataset.base.eval", "toy_models.BaseDataset.energy.eval", "latents.split", "images.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "toy_models.BaseDataset.base", "img.cpu.cpu.cpu", "latent.to"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.TrainerToy.eval", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.TrainerToy.eval"], ["", "", "def", "sample_data", "(", "self", ",", "latents", ",", "to_cpu", "=", "True", ",", "as_list", "=", "False", ")", ":", "\n", "        ", "self", ".", "base", ".", "eval", "(", ")", "\n", "self", ".", "energy", ".", "eval", "(", ")", "\n", "images", "=", "[", "]", "\n", "for", "latent", "in", "latents", ".", "split", "(", "self", ".", "b_size", ",", "dim", "=", "0", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "img", "=", "self", ".", "base", "(", "latent", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "", "if", "to_cpu", ":", "\n", "                ", "img", "=", "img", ".", "cpu", "(", ")", "\n", "", "images", ".", "append", "(", "img", ")", "\n", "", "if", "as_list", ":", "\n", "            ", "return", "images", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "cat", "(", "images", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.toy_models.BaseDataset.__getitem__": [[182, 190], ["numpy.mod", "print", "toy_models.BaseDataset.sample_latents", "toy_models.BaseDataset.sample_data"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.toy_models.BaseDataset.sample_latents", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.models.toy_models.BaseDataset.sample_data"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "self", ".", "counter", "+=", "1", "\n", "if", "np", ".", "mod", "(", "self", ".", "counter", ",", "100.", "*", "self", ".", "N_samples", ")", "==", "0", ":", "\n", "            ", "print", "(", "'sampling data'", ")", "\n", "self", ".", "latents", "=", "self", ".", "sample_latents", "(", "self", ".", "latents", ",", "T", "=", "10", ")", "\n", "self", ".", "data", "=", "self", ".", "sample_data", "(", "self", ".", "latents", ")", "\n", "\n", "", "return", "self", ".", "data", "[", "index", "]", ",", "self", ".", "data", "[", "index", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.InceptionV3.__init__": [[33, 129], ["torch.Module.__init__", "sorted", "max", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "models.inception_v3.InceptionV3.blocks.append", "models.inception_v3.InceptionV3.parameters", "inception.fid_inception_v3", "torchvision.models.inception_v3", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.inception_v3.InceptionV3.blocks.append", "models.inception_v3.InceptionV3.blocks.append", "models.inception_v3.InceptionV3.blocks.append", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.fid_inception_v3"], ["def", "__init__", "(", "self", ",", "\n", "output_blocks", "=", "[", "DEFAULT_BLOCK_INDEX", "]", ",", "\n", "resize_input", "=", "True", ",", "\n", "normalize_input", "=", "True", ",", "\n", "requires_grad", "=", "False", ",", "\n", "use_fid_inception", "=", "True", ")", ":", "\n", "        ", "\"\"\"Build pretrained InceptionV3\n        Parameters\n        ----------\n        output_blocks : list of int\n            Indices of blocks to return features of. Possible values are:\n                - 0: corresponds to output of first max pooling\n                - 1: corresponds to output of second max pooling\n                - 2: corresponds to output which is fed to aux classifier\n                - 3: corresponds to output of final average pooling\n        resize_input : bool\n            If true, bilinearly resizes input to width and height 299 before\n            feeding input to model. As the network without fully connected\n            layers is fully convolutional, it should be able to handle inputs\n            of arbitrary size, so resizing might not be strictly needed\n        normalize_input : bool\n            If true, scales the input from range (0, 1) to the range the\n            pretrained Inception network expects, namely (-1, 1)\n        requires_grad : bool\n            If true, parameters of the model require gradients. Possibly useful\n            for finetuning the network\n        use_fid_inception : bool\n            If true, uses the pretrained Inception model used in Tensorflow's\n            FID implementation. If false, uses the pretrained Inception model\n            available in torchvision. The FID Inception model has different\n            weights and a slightly different structure from torchvision's\n            Inception model. If you want to compute FID scores, you are\n            strongly advised to set this parameter to true to get comparable\n            results.\n        \"\"\"", "\n", "super", "(", "InceptionV3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "resize_input", "=", "resize_input", "\n", "self", ".", "normalize_input", "=", "normalize_input", "\n", "self", ".", "output_blocks", "=", "sorted", "(", "output_blocks", ")", "\n", "self", ".", "last_needed_block", "=", "max", "(", "output_blocks", ")", "\n", "\n", "assert", "self", ".", "last_needed_block", "<=", "3", ",", "'Last possible output block index is 3'", "\n", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "if", "use_fid_inception", ":", "\n", "            ", "inception", "=", "fid_inception_v3", "(", ")", "\n", "", "else", ":", "\n", "            ", "inception", "=", "models", ".", "inception_v3", "(", "pretrained", "=", "True", ")", "\n", "\n", "# Block 0: input to maxpool1", "\n", "", "block0", "=", "[", "\n", "inception", ".", "Conv2d_1a_3x3", ",", "\n", "inception", ".", "Conv2d_2a_3x3", ",", "\n", "inception", ".", "Conv2d_2b_3x3", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block0", ")", ")", "\n", "\n", "# Block 1: maxpool1 to maxpool2", "\n", "if", "self", ".", "last_needed_block", ">=", "1", ":", "\n", "            ", "block1", "=", "[", "\n", "inception", ".", "Conv2d_3b_1x1", ",", "\n", "inception", ".", "Conv2d_4a_3x3", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block1", ")", ")", "\n", "\n", "# Block 2: maxpool2 to aux classifier", "\n", "", "if", "self", ".", "last_needed_block", ">=", "2", ":", "\n", "            ", "block2", "=", "[", "\n", "inception", ".", "Mixed_5b", ",", "\n", "inception", ".", "Mixed_5c", ",", "\n", "inception", ".", "Mixed_5d", ",", "\n", "inception", ".", "Mixed_6a", ",", "\n", "inception", ".", "Mixed_6b", ",", "\n", "inception", ".", "Mixed_6c", ",", "\n", "inception", ".", "Mixed_6d", ",", "\n", "inception", ".", "Mixed_6e", ",", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block2", ")", ")", "\n", "\n", "# Block 3: aux classifier to final avgpool", "\n", "", "if", "self", ".", "last_needed_block", ">=", "3", ":", "\n", "            ", "block3", "=", "[", "\n", "inception", ".", "Mixed_7a", ",", "\n", "inception", ".", "Mixed_7b", ",", "\n", "inception", ".", "Mixed_7c", ",", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "output_size", "=", "(", "1", ",", "1", ")", ")", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block3", ")", ")", "\n", "\n", "", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "requires_grad", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.InceptionV3.forward": [[130, 163], ["enumerate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "block", "outp.append"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "\"\"\"Get Inception feature maps\n        Parameters\n        ----------\n        inp : torch.autograd.Variable\n            Input tensor of shape Bx3xHxW. Values are expected to be in\n            range (0, 1)\n        Returns\n        -------\n        List of torch.autograd.Variable, corresponding to the selected output\n        block, sorted ascending by index\n        \"\"\"", "\n", "outp", "=", "[", "]", "\n", "x", "=", "inp", "\n", "\n", "if", "self", ".", "resize_input", ":", "\n", "            ", "x", "=", "F", ".", "interpolate", "(", "x", ",", "\n", "size", "=", "(", "299", ",", "299", ")", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "False", ")", "\n", "\n", "", "if", "self", ".", "normalize_input", ":", "\n", "            ", "x", "=", "2", "*", "x", "-", "1", "# Scale from range (0, 1) to range (-1, 1)", "\n", "\n", "", "for", "idx", ",", "block", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "            ", "x", "=", "block", "(", "x", ")", "\n", "if", "idx", "in", "self", ".", "output_blocks", ":", "\n", "                ", "outp", ".", "append", "(", "x", ")", "\n", "\n", "", "if", "idx", "==", "self", ".", "last_needed_block", ":", "\n", "                ", "break", "\n", "\n", "", "", "return", "outp", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionA.__init__": [[192, 194], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "pool_features", ")", ":", "\n", "        ", "super", "(", "FIDInceptionA", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "pool_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionA.forward": [[195, 213], ["inception.FIDInceptionA.branch1x1", "inception.FIDInceptionA.branch5x5_1", "inception.FIDInceptionA.branch5x5_2", "inception.FIDInceptionA.branch3x3dbl_1", "inception.FIDInceptionA.branch3x3dbl_2", "inception.FIDInceptionA.branch3x3dbl_3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "inception.FIDInceptionA.branch_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch1x1", "=", "self", ".", "branch1x1", "(", "x", ")", "\n", "\n", "branch5x5", "=", "self", ".", "branch5x5_1", "(", "x", ")", "\n", "branch5x5", "=", "self", ".", "branch5x5_2", "(", "branch5x5", ")", "\n", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_1", "(", "x", ")", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_2", "(", "branch3x3dbl", ")", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_3", "(", "branch3x3dbl", ")", "\n", "\n", "# Patch: Tensorflow's average pool does not use the padded zero's in", "\n", "# its average calculation", "\n", "branch_pool", "=", "F", ".", "avg_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "count_include_pad", "=", "False", ")", "\n", "branch_pool", "=", "self", ".", "branch_pool", "(", "branch_pool", ")", "\n", "\n", "outputs", "=", "[", "branch1x1", ",", "branch5x5", ",", "branch3x3dbl", ",", "branch_pool", "]", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionC.__init__": [[217, 219], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "channels_7x7", ")", ":", "\n", "        ", "super", "(", "FIDInceptionC", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "channels_7x7", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionC.forward": [[220, 241], ["inception.FIDInceptionC.branch1x1", "inception.FIDInceptionC.branch7x7_1", "inception.FIDInceptionC.branch7x7_2", "inception.FIDInceptionC.branch7x7_3", "inception.FIDInceptionC.branch7x7dbl_1", "inception.FIDInceptionC.branch7x7dbl_2", "inception.FIDInceptionC.branch7x7dbl_3", "inception.FIDInceptionC.branch7x7dbl_4", "inception.FIDInceptionC.branch7x7dbl_5", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "inception.FIDInceptionC.branch_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch1x1", "=", "self", ".", "branch1x1", "(", "x", ")", "\n", "\n", "branch7x7", "=", "self", ".", "branch7x7_1", "(", "x", ")", "\n", "branch7x7", "=", "self", ".", "branch7x7_2", "(", "branch7x7", ")", "\n", "branch7x7", "=", "self", ".", "branch7x7_3", "(", "branch7x7", ")", "\n", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_1", "(", "x", ")", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_2", "(", "branch7x7dbl", ")", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_3", "(", "branch7x7dbl", ")", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_4", "(", "branch7x7dbl", ")", "\n", "branch7x7dbl", "=", "self", ".", "branch7x7dbl_5", "(", "branch7x7dbl", ")", "\n", "\n", "# Patch: Tensorflow's average pool does not use the padded zero's in", "\n", "# its average calculation", "\n", "branch_pool", "=", "F", ".", "avg_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "count_include_pad", "=", "False", ")", "\n", "branch_pool", "=", "self", ".", "branch_pool", "(", "branch_pool", ")", "\n", "\n", "outputs", "=", "[", "branch1x1", ",", "branch7x7", ",", "branch7x7dbl", ",", "branch_pool", "]", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_1.__init__": [[245, 247], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "FIDInceptionE_1", ",", "self", ")", ".", "__init__", "(", "in_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_1.forward": [[248, 274], ["inception.FIDInceptionE_1.branch1x1", "inception.FIDInceptionE_1.branch3x3_1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inception.FIDInceptionE_1.branch3x3dbl_1", "inception.FIDInceptionE_1.branch3x3dbl_2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "inception.FIDInceptionE_1.branch_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inception.FIDInceptionE_1.branch3x3_2a", "inception.FIDInceptionE_1.branch3x3_2b", "inception.FIDInceptionE_1.branch3x3dbl_3a", "inception.FIDInceptionE_1.branch3x3dbl_3b"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch1x1", "=", "self", ".", "branch1x1", "(", "x", ")", "\n", "\n", "branch3x3", "=", "self", ".", "branch3x3_1", "(", "x", ")", "\n", "branch3x3", "=", "[", "\n", "self", ".", "branch3x3_2a", "(", "branch3x3", ")", ",", "\n", "self", ".", "branch3x3_2b", "(", "branch3x3", ")", ",", "\n", "]", "\n", "branch3x3", "=", "torch", ".", "cat", "(", "branch3x3", ",", "1", ")", "\n", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_1", "(", "x", ")", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_2", "(", "branch3x3dbl", ")", "\n", "branch3x3dbl", "=", "[", "\n", "self", ".", "branch3x3dbl_3a", "(", "branch3x3dbl", ")", ",", "\n", "self", ".", "branch3x3dbl_3b", "(", "branch3x3dbl", ")", ",", "\n", "]", "\n", "branch3x3dbl", "=", "torch", ".", "cat", "(", "branch3x3dbl", ",", "1", ")", "\n", "\n", "# Patch: Tensorflow's average pool does not use the padded zero's in", "\n", "# its average calculation", "\n", "branch_pool", "=", "F", ".", "avg_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "count_include_pad", "=", "False", ")", "\n", "branch_pool", "=", "self", ".", "branch_pool", "(", "branch_pool", ")", "\n", "\n", "outputs", "=", "[", "branch1x1", ",", "branch3x3", ",", "branch3x3dbl", ",", "branch_pool", "]", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__": [[278, 280], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "FIDInceptionE_2", ",", "self", ")", ".", "__init__", "(", "in_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.FIDInceptionE_2.forward": [[281, 308], ["inception.FIDInceptionE_2.branch1x1", "inception.FIDInceptionE_2.branch3x3_1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inception.FIDInceptionE_2.branch3x3dbl_1", "inception.FIDInceptionE_2.branch3x3dbl_2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "inception.FIDInceptionE_2.branch_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inception.FIDInceptionE_2.branch3x3_2a", "inception.FIDInceptionE_2.branch3x3_2b", "inception.FIDInceptionE_2.branch3x3dbl_3a", "inception.FIDInceptionE_2.branch3x3dbl_3b"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "branch1x1", "=", "self", ".", "branch1x1", "(", "x", ")", "\n", "\n", "branch3x3", "=", "self", ".", "branch3x3_1", "(", "x", ")", "\n", "branch3x3", "=", "[", "\n", "self", ".", "branch3x3_2a", "(", "branch3x3", ")", ",", "\n", "self", ".", "branch3x3_2b", "(", "branch3x3", ")", ",", "\n", "]", "\n", "branch3x3", "=", "torch", ".", "cat", "(", "branch3x3", ",", "1", ")", "\n", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_1", "(", "x", ")", "\n", "branch3x3dbl", "=", "self", ".", "branch3x3dbl_2", "(", "branch3x3dbl", ")", "\n", "branch3x3dbl", "=", "[", "\n", "self", ".", "branch3x3dbl_3a", "(", "branch3x3dbl", ")", ",", "\n", "self", ".", "branch3x3dbl_3b", "(", "branch3x3dbl", ")", ",", "\n", "]", "\n", "branch3x3dbl", "=", "torch", ".", "cat", "(", "branch3x3dbl", ",", "1", ")", "\n", "\n", "# Patch: The FID Inception model uses max pooling instead of average", "\n", "# pooling. This is likely an error in this specific Inception", "\n", "# implementation, as other Inception models use average pooling here", "\n", "# (which matches the description in the paper).", "\n", "branch_pool", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "branch_pool", "=", "self", ".", "branch_pool", "(", "branch_pool", ")", "\n", "\n", "outputs", "=", "[", "branch1x1", ",", "branch3x3", ",", "branch3x3dbl", ",", "branch_pool", "]", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "1", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.inception.fid_inception_v3": [[165, 188], ["torchvision.models.inception_v3", "inception.FIDInceptionA", "inception.FIDInceptionA", "inception.FIDInceptionA", "inception.FIDInceptionC", "inception.FIDInceptionC", "inception.FIDInceptionC", "inception.FIDInceptionC", "inception.FIDInceptionE_1", "inception.FIDInceptionE_2", "load_state_dict_from_url", "models.inception_v3.load_state_dict"], "function", ["None"], ["", "", "def", "fid_inception_v3", "(", ")", ":", "\n", "    ", "\"\"\"Build pretrained Inception model for FID computation\n    The Inception model for FID computation uses a different set of weights\n    and has a slightly different structure than torchvision's Inception.\n    This method first constructs torchvision's Inception and then patches the\n    necessary parts that are different in the FID Inception model.\n    \"\"\"", "\n", "inception", "=", "models", ".", "inception_v3", "(", "num_classes", "=", "1008", ",", "\n", "aux_logits", "=", "False", ",", "\n", "pretrained", "=", "False", ")", "\n", "inception", ".", "Mixed_5b", "=", "FIDInceptionA", "(", "192", ",", "pool_features", "=", "32", ")", "\n", "inception", ".", "Mixed_5c", "=", "FIDInceptionA", "(", "256", ",", "pool_features", "=", "64", ")", "\n", "inception", ".", "Mixed_5d", "=", "FIDInceptionA", "(", "288", ",", "pool_features", "=", "64", ")", "\n", "inception", ".", "Mixed_6b", "=", "FIDInceptionC", "(", "768", ",", "channels_7x7", "=", "128", ")", "\n", "inception", ".", "Mixed_6c", "=", "FIDInceptionC", "(", "768", ",", "channels_7x7", "=", "160", ")", "\n", "inception", ".", "Mixed_6d", "=", "FIDInceptionC", "(", "768", ",", "channels_7x7", "=", "160", ")", "\n", "inception", ".", "Mixed_6e", "=", "FIDInceptionC", "(", "768", ",", "channels_7x7", "=", "192", ")", "\n", "inception", ".", "Mixed_7b", "=", "FIDInceptionE_1", "(", "1280", ")", "\n", "inception", ".", "Mixed_7c", "=", "FIDInceptionE_2", "(", "2048", ")", "\n", "\n", "state_dict", "=", "load_state_dict_from_url", "(", "FID_WEIGHTS_URL", ",", "progress", "=", "True", ")", "\n", "inception", ".", "load_state_dict", "(", "state_dict", ")", "\n", "return", "inception", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.fid_pytorch.get_activations": [[131, 188], ["model.eval", "range", "numpy.concatenate", "len", "len", "image_batch.to", "np.concatenate.append", "print", "len", "torch.no_grad", "torch.nn.functional.adaptive_avg_pool2d.mean", "torch.nn.functional.adaptive_avg_pool2d.cpu().data.numpy", "model", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d.cpu"], "function", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.TrainerToy.eval"], ["def", "get_activations", "(", "images", ",", "model", ",", "device", ",", "batch_size", "=", "50", ",", "dims", "=", "2048", ",", "verbose", "=", "True", ")", ":", "\n", "    ", "\"\"\"Calculates the activations of the pool_3 layer for all images.\n    Params:\n    -- files       : List of image files paths\n    -- model       : Instance of inception model\n    -- batch_size  : Batch size of images for the model to process at once.\n                     Make sure that the number of samples is a multiple of\n                     the batch size, otherwise some samples are ignored. This\n                     behavior is retained to match the original FID score\n                     implementation.\n    -- dims        : Dimensionality of features returned by Inception\n    -- cuda        : If set to True, use GPU\n    -- verbose     : If set to True and parameter out_step is given, the number\n                     of calculated batches is reported.\n    Returns:\n    -- A numpy array of dimension (num images, dims) that contains the\n       activations of the given tensor when feeding inception with the\n       query tensor.\n    \"\"\"", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "if", "len", "(", "images", ")", ">", "batch_size", ":", "\n", "        ", "n_batches", "=", "len", "(", "images", ")", "//", "batch_size", "\n", "n_used_imgs", "=", "n_batches", "*", "batch_size", "\n", "", "else", ":", "\n", "        ", "n_batches", "=", "1", "\n", "n_used_imgs", "=", "len", "(", "images", ")", "\n", "", "pred_arr", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "n_batches", ")", ":", "\n", "#if verbose and i % 100 == 0:", "\n", "#    print('  Propagating batch %d/%d' % (i + 1, n_batches))", "\n", "        ", "start", "=", "i", "*", "batch_size", "\n", "end", "=", "start", "+", "batch_size", "\n", "\n", "\n", "image_batch", "=", "images", "[", "start", ":", "end", "]", "\n", "\n", "# Reshape to (n_images, 3, height, width)", "\n", "#image_batch = image_batch.transpose((0, 3, 1, 2))", "\n", "image_batch", "=", "(", "image_batch", "+", "1.", ")", "*", "0.5", "\n", "# Needs images in range [0,1]", "\n", "batch", "=", "image_batch", ".", "to", "(", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "pred", "=", "model", "(", "batch", ")", "[", "0", "]", "\n", "\n", "# If model output is not scalar, apply global spatial average pooling.", "\n", "# This happens if you choose a dimensionality not equal 2048.", "\n", "if", "pred", ".", "shape", "[", "2", "]", "!=", "1", "or", "pred", ".", "shape", "[", "3", "]", "!=", "1", ":", "\n", "                ", "pred", "=", "adaptive_avg_pool2d", "(", "pred", ",", "output_size", "=", "(", "1", ",", "1", ")", ")", "\n", "", "pred", "=", "pred", ".", "mean", "(", "[", "2", ",", "3", "]", ")", "\n", "", "pred_arr", ".", "append", "(", "pred", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ")", "\n", "", "pred_arr", "=", "np", ".", "concatenate", "(", "pred_arr", ",", "axis", "=", "0", ")", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "' done'", ")", "\n", "\n", "", "return", "pred_arr", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.fid_pytorch.get_activations_from_loader": [[191, 237], ["model.eval", "model.to", "enumerate", "torch.cat", "model.to", "image_batch.to", "print", "print", "torch.no_grad", "torch.nn.functional.adaptive_avg_pool2d.mean", "torch.cat.append", "model", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d.cpu"], "function", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.None.trainer.TrainerToy.eval"], ["", "def", "get_activations_from_loader", "(", "dataloader", ",", "model", ",", "device", ",", "batch_size", "=", "50", ",", "dims", "=", "2048", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"Calculates the activations of the pool_3 layer for all images.\n    Params:\n    -- files       : List of image files paths\n    -- model       : Instance of inception model\n    -- batch_size  : Batch size of images for the model to process at once.\n                     Make sure that the number of samples is a multiple of\n                     the batch size, otherwise some samples are ignored. This\n                     behavior is retained to match the original FID score\n                     implementation.\n    -- dims        : Dimensionality of features returned by Inception\n    -- cuda        : If set to True, use GPU\n    -- verbose     : If set to True and parameter out_step is given, the number\n                     of calculated batches is reported.\n    Returns:\n    -- A numpy array of dimension (num images, dims) that contains the\n       activations of the given tensor when feeding inception with the\n       query tensor.\n    \"\"\"", "\n", "model", ".", "eval", "(", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "\n", "#n_batches = len(dataloader.dataset.data) // batch_size", "\n", "#n_used_imgs = n_batches * batch_size", "\n", "\n", "pred_arr", "=", "[", "]", "\n", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "        ", "if", "verbose", ":", "\n", "            ", "print", "(", "'\\rPropagating batch %d'", "%", "(", "batch_idx", "+", "1", ")", ",", "\n", "end", "=", "''", ",", "flush", "=", "True", ")", "\n", "", "start", "=", "batch_idx", "*", "batch_size", "\n", "end", "=", "start", "+", "batch_size", "\n", "image_batch", "=", "(", "data", "+", "1.", ")", "*", "0.5", "\n", "batch", "=", "image_batch", ".", "to", "(", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "pred", "=", "model", "(", "batch", ")", "[", "0", "]", "\n", "if", "pred", ".", "shape", "[", "2", "]", "!=", "1", "or", "pred", ".", "shape", "[", "3", "]", "!=", "1", ":", "\n", "                ", "pred", "=", "adaptive_avg_pool2d", "(", "pred", ",", "output_size", "=", "(", "1", ",", "1", ")", ")", "\n", "", "pred", "=", "pred", ".", "mean", "(", "[", "2", ",", "3", "]", ")", "\n", "pred_arr", ".", "append", "(", "pred", ".", "cpu", "(", ")", ")", "\n", "", "", "pred_arr", "=", "torch", ".", "cat", "(", "pred_arr", ",", "dim", "=", "0", ")", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "' done'", ")", "\n", "", "model", ".", "to", "(", "'cpu'", ")", "\n", "return", "pred_arr", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.fid_pytorch.compute_stats": [[240, 247], ["fid_pytorch.get_activations", "numpy.mean", "numpy.cov"], "function", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.fid_pytorch.get_activations"], ["", "def", "compute_stats", "(", "images", ",", "model", ",", "device", ",", "batch_size", "=", "128", ",", "dims", "=", "2048", ")", ":", "\n", "\n", "    ", "pred_arr", "=", "get_activations", "(", "images", ",", "model", ",", "device", ",", "batch_size", ")", "\n", "\n", "mu", "=", "np", ".", "mean", "(", "pred_arr", ",", "axis", "=", "0", ")", "\n", "sigma", "=", "np", ".", "cov", "(", "pred_arr", ",", "rowvar", "=", "False", ")", "\n", "return", "mu", ",", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.fid_pytorch.compute_stats_from_loader": [[248, 257], ["fid_pytorch.get_activations_from_loader", "pred_arr.cpu().detach().numpy.cpu().detach().numpy", "numpy.mean", "numpy.cov", "pred_arr.cpu().detach().numpy.cpu().detach", "pred_arr.cpu().detach().numpy.cpu"], "function", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.fid_pytorch.get_activations_from_loader"], ["", "def", "compute_stats_from_loader", "(", "model", ",", "data_loader", ",", "device", ",", "batch_size", "=", "128", ")", ":", "\n", "#images = data_loader.dataset.data", "\n", "#images = images/255", "\n", "\n", "    ", "pred_arr", "=", "get_activations_from_loader", "(", "data_loader", ",", "model", ",", "device", ",", "batch_size", ")", "\n", "pred_arr", "=", "pred_arr", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "mu", "=", "np", ".", "mean", "(", "pred_arr", ",", "axis", "=", "0", ")", "\n", "sigma", "=", "np", ".", "cov", "(", "pred_arr", ",", "rowvar", "=", "False", ")", "\n", "return", "mu", ",", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.fid_pytorch.calculate_frechet_distance": [[258, 310], ["numpy.atleast_1d", "numpy.atleast_1d", "numpy.atleast_2d", "numpy.atleast_2d", "scipy.linalg.sqrtm", "numpy.iscomplexobj", "numpy.trace", "np.atleast_2d.dot", "numpy.isfinite().all", "print", "scipy.linalg.sqrtm", "numpy.eye", "numpy.allclose", "numpy.max", "ValueError", "numpy.trace", "numpy.isfinite", "numpy.abs", "diff.dot", "numpy.trace", "numpy.diagonal"], "function", ["None"], ["", "def", "calculate_frechet_distance", "(", "mu1", ",", "sigma1", ",", "mu2", ",", "sigma2", ",", "eps", "=", "1e-6", ")", ":", "\n", "    ", "\"\"\"Numpy implementation of the Frechet Distance.\n    The Frechet distance between two multivariate Gaussians X_1 ~ N(mu_1, C_1)\n    and X_2 ~ N(mu_2, C_2) is\n            d^2 = ||mu_1 - mu_2||^2 + Tr(C_1 + C_2 - 2*sqrt(C_1*C_2)).\n    Stable version by Dougal J. Sutherland.\n    Params:\n    -- mu1   : Numpy array containing the activations of a layer of the\n               inception net (like returned by the function 'get_predictions')\n               for generated samples.\n    -- mu2   : The sample mean over activations, precalculated on an\n               representative data set.\n    -- sigma1: The covariance matrix over activations for generated samples.\n    -- sigma2: The covariance matrix over activations, precalculated on an\n               representative data set.\n    Returns:\n    --   : The Frechet Distance.\n    \"\"\"", "\n", "\n", "mu1", "=", "np", ".", "atleast_1d", "(", "mu1", ")", "\n", "mu2", "=", "np", ".", "atleast_1d", "(", "mu2", ")", "\n", "\n", "sigma1", "=", "np", ".", "atleast_2d", "(", "sigma1", ")", "\n", "sigma2", "=", "np", ".", "atleast_2d", "(", "sigma2", ")", "\n", "\n", "assert", "mu1", ".", "shape", "==", "mu2", ".", "shape", ",", "'Training and test mean vectors have different lengths'", "\n", "assert", "sigma1", ".", "shape", "==", "sigma2", ".", "shape", ",", "'Training and test covariances have different dimensions'", "\n", "\n", "diff", "=", "mu1", "-", "mu2", "\n", "\n", "# Product might be almost singular", "\n", "covmean", ",", "_", "=", "linalg", ".", "sqrtm", "(", "sigma1", ".", "dot", "(", "sigma2", ")", ",", "disp", "=", "False", ")", "\n", "if", "not", "np", ".", "isfinite", "(", "covmean", ")", ".", "all", "(", ")", ":", "\n", "        ", "msg", "=", "(", "'fid calculation produces singular product; '", "\n", "'adding %s to diagonal of cov estimates'", ")", "%", "eps", "\n", "print", "(", "msg", ")", "\n", "offset", "=", "np", ".", "eye", "(", "sigma1", ".", "shape", "[", "0", "]", ")", "*", "eps", "\n", "covmean", "=", "linalg", ".", "sqrtm", "(", "(", "sigma1", "+", "offset", ")", ".", "dot", "(", "sigma2", "+", "offset", ")", ")", "\n", "\n", "# Numerical error might give slight imaginary component", "\n", "", "if", "np", ".", "iscomplexobj", "(", "covmean", ")", ":", "\n", "        ", "if", "not", "np", ".", "allclose", "(", "np", ".", "diagonal", "(", "covmean", ")", ".", "imag", ",", "0", ",", "atol", "=", "1e-3", ")", ":", "\n", "            ", "m", "=", "np", ".", "max", "(", "np", ".", "abs", "(", "covmean", ".", "imag", ")", ")", "\n", "raise", "ValueError", "(", "'Imaginary component {}'", ".", "format", "(", "m", ")", ")", "\n", "", "covmean", "=", "covmean", ".", "real", "\n", "\n", "", "tr_covmean", "=", "np", ".", "trace", "(", "covmean", ")", "\n", "\n", "return", "(", "diff", ".", "dot", "(", "diff", ")", "+", "np", ".", "trace", "(", "sigma1", ")", "+", "\n", "np", ".", "trace", "(", "sigma2", ")", "-", "2", "*", "tr_covmean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.fid_pytorch.calculate_activation_statistics": [[312, 335], ["fid_pytorch.get_activations", "numpy.mean", "numpy.cov"], "function", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.fid_pytorch.get_activations"], ["", "def", "calculate_activation_statistics", "(", "files", ",", "model", ",", "batch_size", "=", "50", ",", "\n", "dims", "=", "2048", ",", "cuda", "=", "False", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"Calculation of the statistics used by the FID.\n    Params:\n    -- files       : List of image files paths\n    -- model       : Instance of inception model\n    -- batch_size  : The images numpy array is split into batches with\n                     batch size batch_size. A reasonable batch size\n                     depends on the hardware.\n    -- dims        : Dimensionality of features returned by Inception\n    -- cuda        : If set to True, use GPU\n    -- verbose     : If set to True and parameter out_step is given, the\n                     number of calculated batches is reported.\n    Returns:\n    -- mu    : The mean over samples of the activations of the pool_3 layer of\n               the inception model.\n    -- sigma : The covariance matrix of the activations of the pool_3 layer of\n               the inception model.\n    \"\"\"", "\n", "act", "=", "get_activations", "(", "files", ",", "model", ",", "batch_size", ",", "dims", ",", "cuda", ",", "verbose", ")", "\n", "mu", "=", "np", ".", "mean", "(", "act", ",", "axis", "=", "0", ")", "\n", "sigma", "=", "np", ".", "cov", "(", "act", ",", "rowvar", "=", "False", ")", "\n", "return", "mu", ",", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.fid_pytorch._compute_statistics_of_path": [[337, 349], ["pathlib.Path.endswith", "numpy.load", "np.load.close", "pathlib.Path", "fid_pytorch.calculate_activation_statistics", "list", "list", "pathlib.Path.glob", "pathlib.Path.glob"], "function", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.fid_pytorch.calculate_activation_statistics"], ["", "def", "_compute_statistics_of_path", "(", "path", ",", "model", ",", "batch_size", ",", "dims", ",", "cuda", ")", ":", "\n", "    ", "if", "path", ".", "endswith", "(", "'.npz'", ")", ":", "\n", "        ", "f", "=", "np", ".", "load", "(", "path", ")", "\n", "m", ",", "s", "=", "f", "[", "'mu'", "]", "[", ":", "]", ",", "f", "[", "'sigma'", "]", "[", ":", "]", "\n", "f", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "        ", "path", "=", "pathlib", ".", "Path", "(", "path", ")", "\n", "files", "=", "list", "(", "path", ".", "glob", "(", "'*.jpg'", ")", ")", "+", "list", "(", "path", ".", "glob", "(", "'*.png'", ")", ")", "\n", "m", ",", "s", "=", "calculate_activation_statistics", "(", "files", ",", "model", ",", "batch_size", ",", "\n", "dims", ",", "cuda", ")", "\n", "\n", "", "return", "m", ",", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.fid_pytorch.calculate_fid_given_paths": [[351, 370], ["metrics.inception.InceptionV3", "fid_pytorch._compute_statistics_of_path", "fid_pytorch._compute_statistics_of_path", "fid_pytorch.calculate_frechet_distance", "metrics.inception.InceptionV3.cuda", "os.path.exists", "RuntimeError"], "function", ["home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.fid_pytorch._compute_statistics_of_path", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.fid_pytorch._compute_statistics_of_path", "home.repos.pwc.inspect_result.MichaelArbel_GeneralizedEBM.metrics.fid_pytorch.calculate_frechet_distance"], ["", "def", "calculate_fid_given_paths", "(", "paths", ",", "batch_size", ",", "cuda", ",", "dims", ")", ":", "\n", "    ", "\"\"\"Calculates the FID of two paths\"\"\"", "\n", "for", "p", "in", "paths", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "p", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Invalid path: %s'", "%", "p", ")", "\n", "\n", "", "", "block_idx", "=", "InceptionV3", ".", "BLOCK_INDEX_BY_DIM", "[", "dims", "]", "\n", "\n", "model", "=", "InceptionV3", "(", "[", "block_idx", "]", ")", "\n", "if", "cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "\n", "", "m1", ",", "s1", "=", "_compute_statistics_of_path", "(", "paths", "[", "0", "]", ",", "model", ",", "batch_size", ",", "\n", "dims", ",", "cuda", ")", "\n", "m2", ",", "s2", "=", "_compute_statistics_of_path", "(", "paths", "[", "1", "]", ",", "model", ",", "batch_size", ",", "\n", "dims", ",", "cuda", ")", "\n", "fid_value", "=", "calculate_frechet_distance", "(", "m1", ",", "s1", ",", "m2", ",", "s2", ")", "\n", "\n", "return", "fid_value", "\n", "\n"]]}